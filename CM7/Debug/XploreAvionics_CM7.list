
XploreAvionics_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001d038  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003710  0801d2d8  0801d2d8  0002d2d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080209e8  080209e8  000309e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   0000000c  080209f0  080209f0  000309f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000008  080209fc  080209fc  000309fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000020c  24000000  08020a04  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000cc7c  2400020c  08020c10  0004020c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2400ce88  08020c10  0004ce88  2**0
                  ALLOC
  9 .lwip_sec     000419d0  30000000  08020c10  00050000  2**2
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  0004020c  2**0
                  CONTENTS, READONLY
 11 .debug_info   00097176  00000000  00000000  0004023a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000f1b6  00000000  00000000  000d73b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000031d0  00000000  00000000  000e6568  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00002e88  00000000  00000000  000e9738  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  00058aab  00000000  00000000  000ec5c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0004afec  00000000  00000000  0014506b  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    001c7e5c  00000000  00000000  00190057  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  00357eb3  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000f1e4  00000000  00000000  00357f30  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400020c 	.word	0x2400020c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801d2c0 	.word	0x0801d2c0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000210 	.word	0x24000210
 80002dc:	0801d2c0 	.word	0x0801d2c0

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strcmp>:
 8000380:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000384:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000388:	2a01      	cmp	r2, #1
 800038a:	bf28      	it	cs
 800038c:	429a      	cmpcs	r2, r3
 800038e:	d0f7      	beq.n	8000380 <strcmp>
 8000390:	1ad0      	subs	r0, r2, r3
 8000392:	4770      	bx	lr

08000394 <strlen>:
 8000394:	4603      	mov	r3, r0
 8000396:	f813 2b01 	ldrb.w	r2, [r3], #1
 800039a:	2a00      	cmp	r2, #0
 800039c:	d1fb      	bne.n	8000396 <strlen+0x2>
 800039e:	1a18      	subs	r0, r3, r0
 80003a0:	3801      	subs	r0, #1
 80003a2:	4770      	bx	lr

080003a4 <__aeabi_uldivmod>:
 80003a4:	b953      	cbnz	r3, 80003bc <__aeabi_uldivmod+0x18>
 80003a6:	b94a      	cbnz	r2, 80003bc <__aeabi_uldivmod+0x18>
 80003a8:	2900      	cmp	r1, #0
 80003aa:	bf08      	it	eq
 80003ac:	2800      	cmpeq	r0, #0
 80003ae:	bf1c      	itt	ne
 80003b0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003b4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003b8:	f000 b972 	b.w	80006a0 <__aeabi_idiv0>
 80003bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80003c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003c4:	f000 f806 	bl	80003d4 <__udivmoddi4>
 80003c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003d0:	b004      	add	sp, #16
 80003d2:	4770      	bx	lr

080003d4 <__udivmoddi4>:
 80003d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003d8:	9e08      	ldr	r6, [sp, #32]
 80003da:	4604      	mov	r4, r0
 80003dc:	4688      	mov	r8, r1
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d14b      	bne.n	800047a <__udivmoddi4+0xa6>
 80003e2:	428a      	cmp	r2, r1
 80003e4:	4615      	mov	r5, r2
 80003e6:	d967      	bls.n	80004b8 <__udivmoddi4+0xe4>
 80003e8:	fab2 f282 	clz	r2, r2
 80003ec:	b14a      	cbz	r2, 8000402 <__udivmoddi4+0x2e>
 80003ee:	f1c2 0720 	rsb	r7, r2, #32
 80003f2:	fa01 f302 	lsl.w	r3, r1, r2
 80003f6:	fa20 f707 	lsr.w	r7, r0, r7
 80003fa:	4095      	lsls	r5, r2
 80003fc:	ea47 0803 	orr.w	r8, r7, r3
 8000400:	4094      	lsls	r4, r2
 8000402:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000406:	0c23      	lsrs	r3, r4, #16
 8000408:	fbb8 f7fe 	udiv	r7, r8, lr
 800040c:	fa1f fc85 	uxth.w	ip, r5
 8000410:	fb0e 8817 	mls	r8, lr, r7, r8
 8000414:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000418:	fb07 f10c 	mul.w	r1, r7, ip
 800041c:	4299      	cmp	r1, r3
 800041e:	d909      	bls.n	8000434 <__udivmoddi4+0x60>
 8000420:	18eb      	adds	r3, r5, r3
 8000422:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000426:	f080 811b 	bcs.w	8000660 <__udivmoddi4+0x28c>
 800042a:	4299      	cmp	r1, r3
 800042c:	f240 8118 	bls.w	8000660 <__udivmoddi4+0x28c>
 8000430:	3f02      	subs	r7, #2
 8000432:	442b      	add	r3, r5
 8000434:	1a5b      	subs	r3, r3, r1
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb3 f0fe 	udiv	r0, r3, lr
 800043c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000440:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000444:	fb00 fc0c 	mul.w	ip, r0, ip
 8000448:	45a4      	cmp	ip, r4
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x8c>
 800044c:	192c      	adds	r4, r5, r4
 800044e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000452:	f080 8107 	bcs.w	8000664 <__udivmoddi4+0x290>
 8000456:	45a4      	cmp	ip, r4
 8000458:	f240 8104 	bls.w	8000664 <__udivmoddi4+0x290>
 800045c:	3802      	subs	r0, #2
 800045e:	442c      	add	r4, r5
 8000460:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000464:	eba4 040c 	sub.w	r4, r4, ip
 8000468:	2700      	movs	r7, #0
 800046a:	b11e      	cbz	r6, 8000474 <__udivmoddi4+0xa0>
 800046c:	40d4      	lsrs	r4, r2
 800046e:	2300      	movs	r3, #0
 8000470:	e9c6 4300 	strd	r4, r3, [r6]
 8000474:	4639      	mov	r1, r7
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	428b      	cmp	r3, r1
 800047c:	d909      	bls.n	8000492 <__udivmoddi4+0xbe>
 800047e:	2e00      	cmp	r6, #0
 8000480:	f000 80eb 	beq.w	800065a <__udivmoddi4+0x286>
 8000484:	2700      	movs	r7, #0
 8000486:	e9c6 0100 	strd	r0, r1, [r6]
 800048a:	4638      	mov	r0, r7
 800048c:	4639      	mov	r1, r7
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	fab3 f783 	clz	r7, r3
 8000496:	2f00      	cmp	r7, #0
 8000498:	d147      	bne.n	800052a <__udivmoddi4+0x156>
 800049a:	428b      	cmp	r3, r1
 800049c:	d302      	bcc.n	80004a4 <__udivmoddi4+0xd0>
 800049e:	4282      	cmp	r2, r0
 80004a0:	f200 80fa 	bhi.w	8000698 <__udivmoddi4+0x2c4>
 80004a4:	1a84      	subs	r4, r0, r2
 80004a6:	eb61 0303 	sbc.w	r3, r1, r3
 80004aa:	2001      	movs	r0, #1
 80004ac:	4698      	mov	r8, r3
 80004ae:	2e00      	cmp	r6, #0
 80004b0:	d0e0      	beq.n	8000474 <__udivmoddi4+0xa0>
 80004b2:	e9c6 4800 	strd	r4, r8, [r6]
 80004b6:	e7dd      	b.n	8000474 <__udivmoddi4+0xa0>
 80004b8:	b902      	cbnz	r2, 80004bc <__udivmoddi4+0xe8>
 80004ba:	deff      	udf	#255	; 0xff
 80004bc:	fab2 f282 	clz	r2, r2
 80004c0:	2a00      	cmp	r2, #0
 80004c2:	f040 808f 	bne.w	80005e4 <__udivmoddi4+0x210>
 80004c6:	1b49      	subs	r1, r1, r5
 80004c8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004cc:	fa1f f885 	uxth.w	r8, r5
 80004d0:	2701      	movs	r7, #1
 80004d2:	fbb1 fcfe 	udiv	ip, r1, lr
 80004d6:	0c23      	lsrs	r3, r4, #16
 80004d8:	fb0e 111c 	mls	r1, lr, ip, r1
 80004dc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e0:	fb08 f10c 	mul.w	r1, r8, ip
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d907      	bls.n	80004f8 <__udivmoddi4+0x124>
 80004e8:	18eb      	adds	r3, r5, r3
 80004ea:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80004ee:	d202      	bcs.n	80004f6 <__udivmoddi4+0x122>
 80004f0:	4299      	cmp	r1, r3
 80004f2:	f200 80cd 	bhi.w	8000690 <__udivmoddi4+0x2bc>
 80004f6:	4684      	mov	ip, r0
 80004f8:	1a59      	subs	r1, r3, r1
 80004fa:	b2a3      	uxth	r3, r4
 80004fc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000500:	fb0e 1410 	mls	r4, lr, r0, r1
 8000504:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000508:	fb08 f800 	mul.w	r8, r8, r0
 800050c:	45a0      	cmp	r8, r4
 800050e:	d907      	bls.n	8000520 <__udivmoddi4+0x14c>
 8000510:	192c      	adds	r4, r5, r4
 8000512:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000516:	d202      	bcs.n	800051e <__udivmoddi4+0x14a>
 8000518:	45a0      	cmp	r8, r4
 800051a:	f200 80b6 	bhi.w	800068a <__udivmoddi4+0x2b6>
 800051e:	4618      	mov	r0, r3
 8000520:	eba4 0408 	sub.w	r4, r4, r8
 8000524:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000528:	e79f      	b.n	800046a <__udivmoddi4+0x96>
 800052a:	f1c7 0c20 	rsb	ip, r7, #32
 800052e:	40bb      	lsls	r3, r7
 8000530:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000534:	ea4e 0e03 	orr.w	lr, lr, r3
 8000538:	fa01 f407 	lsl.w	r4, r1, r7
 800053c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000540:	fa21 f30c 	lsr.w	r3, r1, ip
 8000544:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000548:	4325      	orrs	r5, r4
 800054a:	fbb3 f9f8 	udiv	r9, r3, r8
 800054e:	0c2c      	lsrs	r4, r5, #16
 8000550:	fb08 3319 	mls	r3, r8, r9, r3
 8000554:	fa1f fa8e 	uxth.w	sl, lr
 8000558:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800055c:	fb09 f40a 	mul.w	r4, r9, sl
 8000560:	429c      	cmp	r4, r3
 8000562:	fa02 f207 	lsl.w	r2, r2, r7
 8000566:	fa00 f107 	lsl.w	r1, r0, r7
 800056a:	d90b      	bls.n	8000584 <__udivmoddi4+0x1b0>
 800056c:	eb1e 0303 	adds.w	r3, lr, r3
 8000570:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000574:	f080 8087 	bcs.w	8000686 <__udivmoddi4+0x2b2>
 8000578:	429c      	cmp	r4, r3
 800057a:	f240 8084 	bls.w	8000686 <__udivmoddi4+0x2b2>
 800057e:	f1a9 0902 	sub.w	r9, r9, #2
 8000582:	4473      	add	r3, lr
 8000584:	1b1b      	subs	r3, r3, r4
 8000586:	b2ad      	uxth	r5, r5
 8000588:	fbb3 f0f8 	udiv	r0, r3, r8
 800058c:	fb08 3310 	mls	r3, r8, r0, r3
 8000590:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000594:	fb00 fa0a 	mul.w	sl, r0, sl
 8000598:	45a2      	cmp	sl, r4
 800059a:	d908      	bls.n	80005ae <__udivmoddi4+0x1da>
 800059c:	eb1e 0404 	adds.w	r4, lr, r4
 80005a0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80005a4:	d26b      	bcs.n	800067e <__udivmoddi4+0x2aa>
 80005a6:	45a2      	cmp	sl, r4
 80005a8:	d969      	bls.n	800067e <__udivmoddi4+0x2aa>
 80005aa:	3802      	subs	r0, #2
 80005ac:	4474      	add	r4, lr
 80005ae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80005b2:	fba0 8902 	umull	r8, r9, r0, r2
 80005b6:	eba4 040a 	sub.w	r4, r4, sl
 80005ba:	454c      	cmp	r4, r9
 80005bc:	46c2      	mov	sl, r8
 80005be:	464b      	mov	r3, r9
 80005c0:	d354      	bcc.n	800066c <__udivmoddi4+0x298>
 80005c2:	d051      	beq.n	8000668 <__udivmoddi4+0x294>
 80005c4:	2e00      	cmp	r6, #0
 80005c6:	d069      	beq.n	800069c <__udivmoddi4+0x2c8>
 80005c8:	ebb1 050a 	subs.w	r5, r1, sl
 80005cc:	eb64 0403 	sbc.w	r4, r4, r3
 80005d0:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005d4:	40fd      	lsrs	r5, r7
 80005d6:	40fc      	lsrs	r4, r7
 80005d8:	ea4c 0505 	orr.w	r5, ip, r5
 80005dc:	e9c6 5400 	strd	r5, r4, [r6]
 80005e0:	2700      	movs	r7, #0
 80005e2:	e747      	b.n	8000474 <__udivmoddi4+0xa0>
 80005e4:	f1c2 0320 	rsb	r3, r2, #32
 80005e8:	fa20 f703 	lsr.w	r7, r0, r3
 80005ec:	4095      	lsls	r5, r2
 80005ee:	fa01 f002 	lsl.w	r0, r1, r2
 80005f2:	fa21 f303 	lsr.w	r3, r1, r3
 80005f6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005fa:	4338      	orrs	r0, r7
 80005fc:	0c01      	lsrs	r1, r0, #16
 80005fe:	fbb3 f7fe 	udiv	r7, r3, lr
 8000602:	fa1f f885 	uxth.w	r8, r5
 8000606:	fb0e 3317 	mls	r3, lr, r7, r3
 800060a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800060e:	fb07 f308 	mul.w	r3, r7, r8
 8000612:	428b      	cmp	r3, r1
 8000614:	fa04 f402 	lsl.w	r4, r4, r2
 8000618:	d907      	bls.n	800062a <__udivmoddi4+0x256>
 800061a:	1869      	adds	r1, r5, r1
 800061c:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000620:	d22f      	bcs.n	8000682 <__udivmoddi4+0x2ae>
 8000622:	428b      	cmp	r3, r1
 8000624:	d92d      	bls.n	8000682 <__udivmoddi4+0x2ae>
 8000626:	3f02      	subs	r7, #2
 8000628:	4429      	add	r1, r5
 800062a:	1acb      	subs	r3, r1, r3
 800062c:	b281      	uxth	r1, r0
 800062e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000632:	fb0e 3310 	mls	r3, lr, r0, r3
 8000636:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800063a:	fb00 f308 	mul.w	r3, r0, r8
 800063e:	428b      	cmp	r3, r1
 8000640:	d907      	bls.n	8000652 <__udivmoddi4+0x27e>
 8000642:	1869      	adds	r1, r5, r1
 8000644:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000648:	d217      	bcs.n	800067a <__udivmoddi4+0x2a6>
 800064a:	428b      	cmp	r3, r1
 800064c:	d915      	bls.n	800067a <__udivmoddi4+0x2a6>
 800064e:	3802      	subs	r0, #2
 8000650:	4429      	add	r1, r5
 8000652:	1ac9      	subs	r1, r1, r3
 8000654:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000658:	e73b      	b.n	80004d2 <__udivmoddi4+0xfe>
 800065a:	4637      	mov	r7, r6
 800065c:	4630      	mov	r0, r6
 800065e:	e709      	b.n	8000474 <__udivmoddi4+0xa0>
 8000660:	4607      	mov	r7, r0
 8000662:	e6e7      	b.n	8000434 <__udivmoddi4+0x60>
 8000664:	4618      	mov	r0, r3
 8000666:	e6fb      	b.n	8000460 <__udivmoddi4+0x8c>
 8000668:	4541      	cmp	r1, r8
 800066a:	d2ab      	bcs.n	80005c4 <__udivmoddi4+0x1f0>
 800066c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000670:	eb69 020e 	sbc.w	r2, r9, lr
 8000674:	3801      	subs	r0, #1
 8000676:	4613      	mov	r3, r2
 8000678:	e7a4      	b.n	80005c4 <__udivmoddi4+0x1f0>
 800067a:	4660      	mov	r0, ip
 800067c:	e7e9      	b.n	8000652 <__udivmoddi4+0x27e>
 800067e:	4618      	mov	r0, r3
 8000680:	e795      	b.n	80005ae <__udivmoddi4+0x1da>
 8000682:	4667      	mov	r7, ip
 8000684:	e7d1      	b.n	800062a <__udivmoddi4+0x256>
 8000686:	4681      	mov	r9, r0
 8000688:	e77c      	b.n	8000584 <__udivmoddi4+0x1b0>
 800068a:	3802      	subs	r0, #2
 800068c:	442c      	add	r4, r5
 800068e:	e747      	b.n	8000520 <__udivmoddi4+0x14c>
 8000690:	f1ac 0c02 	sub.w	ip, ip, #2
 8000694:	442b      	add	r3, r5
 8000696:	e72f      	b.n	80004f8 <__udivmoddi4+0x124>
 8000698:	4638      	mov	r0, r7
 800069a:	e708      	b.n	80004ae <__udivmoddi4+0xda>
 800069c:	4637      	mov	r7, r6
 800069e:	e6e9      	b.n	8000474 <__udivmoddi4+0xa0>

080006a0 <__aeabi_idiv0>:
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop

080006a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80006a8:	4b3f      	ldr	r3, [pc, #252]	; (80007a8 <SystemInit+0x104>)
 80006aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006ae:	4a3e      	ldr	r2, [pc, #248]	; (80007a8 <SystemInit+0x104>)
 80006b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006b8:	4b3b      	ldr	r3, [pc, #236]	; (80007a8 <SystemInit+0x104>)
 80006ba:	691b      	ldr	r3, [r3, #16]
 80006bc:	4a3a      	ldr	r2, [pc, #232]	; (80007a8 <SystemInit+0x104>)
 80006be:	f043 0310 	orr.w	r3, r3, #16
 80006c2:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006c4:	4b39      	ldr	r3, [pc, #228]	; (80007ac <SystemInit+0x108>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f003 030f 	and.w	r3, r3, #15
 80006cc:	2b06      	cmp	r3, #6
 80006ce:	d807      	bhi.n	80006e0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006d0:	4b36      	ldr	r3, [pc, #216]	; (80007ac <SystemInit+0x108>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	f023 030f 	bic.w	r3, r3, #15
 80006d8:	4a34      	ldr	r2, [pc, #208]	; (80007ac <SystemInit+0x108>)
 80006da:	f043 0307 	orr.w	r3, r3, #7
 80006de:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006e0:	4b33      	ldr	r3, [pc, #204]	; (80007b0 <SystemInit+0x10c>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4a32      	ldr	r2, [pc, #200]	; (80007b0 <SystemInit+0x10c>)
 80006e6:	f043 0301 	orr.w	r3, r3, #1
 80006ea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006ec:	4b30      	ldr	r3, [pc, #192]	; (80007b0 <SystemInit+0x10c>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006f2:	4b2f      	ldr	r3, [pc, #188]	; (80007b0 <SystemInit+0x10c>)
 80006f4:	681a      	ldr	r2, [r3, #0]
 80006f6:	492e      	ldr	r1, [pc, #184]	; (80007b0 <SystemInit+0x10c>)
 80006f8:	4b2e      	ldr	r3, [pc, #184]	; (80007b4 <SystemInit+0x110>)
 80006fa:	4013      	ands	r3, r2
 80006fc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006fe:	4b2b      	ldr	r3, [pc, #172]	; (80007ac <SystemInit+0x108>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	f003 030f 	and.w	r3, r3, #15
 8000706:	2b07      	cmp	r3, #7
 8000708:	d907      	bls.n	800071a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800070a:	4b28      	ldr	r3, [pc, #160]	; (80007ac <SystemInit+0x108>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	f023 030f 	bic.w	r3, r3, #15
 8000712:	4a26      	ldr	r2, [pc, #152]	; (80007ac <SystemInit+0x108>)
 8000714:	f043 0307 	orr.w	r3, r3, #7
 8000718:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800071a:	4b25      	ldr	r3, [pc, #148]	; (80007b0 <SystemInit+0x10c>)
 800071c:	2200      	movs	r2, #0
 800071e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000720:	4b23      	ldr	r3, [pc, #140]	; (80007b0 <SystemInit+0x10c>)
 8000722:	2200      	movs	r2, #0
 8000724:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000726:	4b22      	ldr	r3, [pc, #136]	; (80007b0 <SystemInit+0x10c>)
 8000728:	2200      	movs	r2, #0
 800072a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800072c:	4b20      	ldr	r3, [pc, #128]	; (80007b0 <SystemInit+0x10c>)
 800072e:	4a22      	ldr	r2, [pc, #136]	; (80007b8 <SystemInit+0x114>)
 8000730:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000732:	4b1f      	ldr	r3, [pc, #124]	; (80007b0 <SystemInit+0x10c>)
 8000734:	4a21      	ldr	r2, [pc, #132]	; (80007bc <SystemInit+0x118>)
 8000736:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000738:	4b1d      	ldr	r3, [pc, #116]	; (80007b0 <SystemInit+0x10c>)
 800073a:	4a21      	ldr	r2, [pc, #132]	; (80007c0 <SystemInit+0x11c>)
 800073c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800073e:	4b1c      	ldr	r3, [pc, #112]	; (80007b0 <SystemInit+0x10c>)
 8000740:	2200      	movs	r2, #0
 8000742:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000744:	4b1a      	ldr	r3, [pc, #104]	; (80007b0 <SystemInit+0x10c>)
 8000746:	4a1e      	ldr	r2, [pc, #120]	; (80007c0 <SystemInit+0x11c>)
 8000748:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800074a:	4b19      	ldr	r3, [pc, #100]	; (80007b0 <SystemInit+0x10c>)
 800074c:	2200      	movs	r2, #0
 800074e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000750:	4b17      	ldr	r3, [pc, #92]	; (80007b0 <SystemInit+0x10c>)
 8000752:	4a1b      	ldr	r2, [pc, #108]	; (80007c0 <SystemInit+0x11c>)
 8000754:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000756:	4b16      	ldr	r3, [pc, #88]	; (80007b0 <SystemInit+0x10c>)
 8000758:	2200      	movs	r2, #0
 800075a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800075c:	4b14      	ldr	r3, [pc, #80]	; (80007b0 <SystemInit+0x10c>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4a13      	ldr	r2, [pc, #76]	; (80007b0 <SystemInit+0x10c>)
 8000762:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000766:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000768:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <SystemInit+0x10c>)
 800076a:	2200      	movs	r2, #0
 800076c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800076e:	4b15      	ldr	r3, [pc, #84]	; (80007c4 <SystemInit+0x120>)
 8000770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000772:	4a14      	ldr	r2, [pc, #80]	; (80007c4 <SystemInit+0x120>)
 8000774:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000778:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800077a:	4b13      	ldr	r3, [pc, #76]	; (80007c8 <SystemInit+0x124>)
 800077c:	681a      	ldr	r2, [r3, #0]
 800077e:	4b13      	ldr	r3, [pc, #76]	; (80007cc <SystemInit+0x128>)
 8000780:	4013      	ands	r3, r2
 8000782:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000786:	d202      	bcs.n	800078e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000788:	4b11      	ldr	r3, [pc, #68]	; (80007d0 <SystemInit+0x12c>)
 800078a:	2201      	movs	r2, #1
 800078c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800078e:	4b11      	ldr	r3, [pc, #68]	; (80007d4 <SystemInit+0x130>)
 8000790:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000794:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000796:	4b04      	ldr	r3, [pc, #16]	; (80007a8 <SystemInit+0x104>)
 8000798:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800079c:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800079e:	bf00      	nop
 80007a0:	46bd      	mov	sp, r7
 80007a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a6:	4770      	bx	lr
 80007a8:	e000ed00 	.word	0xe000ed00
 80007ac:	52002000 	.word	0x52002000
 80007b0:	58024400 	.word	0x58024400
 80007b4:	eaf6ed7f 	.word	0xeaf6ed7f
 80007b8:	02020200 	.word	0x02020200
 80007bc:	01ff0000 	.word	0x01ff0000
 80007c0:	01010280 	.word	0x01010280
 80007c4:	580000c0 	.word	0x580000c0
 80007c8:	5c001000 	.word	0x5c001000
 80007cc:	ffff0000 	.word	0xffff0000
 80007d0:	51008108 	.word	0x51008108
 80007d4:	52004000 	.word	0x52004000

080007d8 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 80007dc:	4b0d      	ldr	r3, [pc, #52]	; (8000814 <MX_CRC_Init+0x3c>)
 80007de:	4a0e      	ldr	r2, [pc, #56]	; (8000818 <MX_CRC_Init+0x40>)
 80007e0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80007e2:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <MX_CRC_Init+0x3c>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80007e8:	4b0a      	ldr	r3, [pc, #40]	; (8000814 <MX_CRC_Init+0x3c>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80007ee:	4b09      	ldr	r3, [pc, #36]	; (8000814 <MX_CRC_Init+0x3c>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80007f4:	4b07      	ldr	r3, [pc, #28]	; (8000814 <MX_CRC_Init+0x3c>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80007fa:	4b06      	ldr	r3, [pc, #24]	; (8000814 <MX_CRC_Init+0x3c>)
 80007fc:	2201      	movs	r2, #1
 80007fe:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000800:	4804      	ldr	r0, [pc, #16]	; (8000814 <MX_CRC_Init+0x3c>)
 8000802:	f001 fc41 	bl	8002088 <HAL_CRC_Init>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 800080c:	f000 fb34 	bl	8000e78 <Error_Handler>
  }

}
 8000810:	bf00      	nop
 8000812:	bd80      	pop	{r7, pc}
 8000814:	24009574 	.word	0x24009574
 8000818:	58024c00 	.word	0x58024c00

0800081c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 800081c:	b480      	push	{r7}
 800081e:	b085      	sub	sp, #20
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a0b      	ldr	r2, [pc, #44]	; (8000858 <HAL_CRC_MspInit+0x3c>)
 800082a:	4293      	cmp	r3, r2
 800082c:	d10e      	bne.n	800084c <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800082e:	4b0b      	ldr	r3, [pc, #44]	; (800085c <HAL_CRC_MspInit+0x40>)
 8000830:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000834:	4a09      	ldr	r2, [pc, #36]	; (800085c <HAL_CRC_MspInit+0x40>)
 8000836:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800083a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800083e:	4b07      	ldr	r3, [pc, #28]	; (800085c <HAL_CRC_MspInit+0x40>)
 8000840:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000844:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000848:	60fb      	str	r3, [r7, #12]
 800084a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800084c:	bf00      	nop
 800084e:	3714      	adds	r7, #20
 8000850:	46bd      	mov	sp, r7
 8000852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000856:	4770      	bx	lr
 8000858:	58024c00 	.word	0x58024c00
 800085c:	58024400 	.word	0x58024400

08000860 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000866:	4b29      	ldr	r3, [pc, #164]	; (800090c <MX_DMA_Init+0xac>)
 8000868:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800086c:	4a27      	ldr	r2, [pc, #156]	; (800090c <MX_DMA_Init+0xac>)
 800086e:	f043 0301 	orr.w	r3, r3, #1
 8000872:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000876:	4b25      	ldr	r3, [pc, #148]	; (800090c <MX_DMA_Init+0xac>)
 8000878:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800087c:	f003 0301 	and.w	r3, r3, #1
 8000880:	607b      	str	r3, [r7, #4]
 8000882:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000884:	4b21      	ldr	r3, [pc, #132]	; (800090c <MX_DMA_Init+0xac>)
 8000886:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800088a:	4a20      	ldr	r2, [pc, #128]	; (800090c <MX_DMA_Init+0xac>)
 800088c:	f043 0302 	orr.w	r3, r3, #2
 8000890:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000894:	4b1d      	ldr	r3, [pc, #116]	; (800090c <MX_DMA_Init+0xac>)
 8000896:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800089a:	f003 0302 	and.w	r3, r3, #2
 800089e:	603b      	str	r3, [r7, #0]
 80008a0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80008a2:	2200      	movs	r2, #0
 80008a4:	2105      	movs	r1, #5
 80008a6:	2038      	movs	r0, #56	; 0x38
 80008a8:	f001 fb3a 	bl	8001f20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80008ac:	2038      	movs	r0, #56	; 0x38
 80008ae:	f001 fb51 	bl	8001f54 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 80008b2:	2200      	movs	r2, #0
 80008b4:	2105      	movs	r1, #5
 80008b6:	2039      	movs	r0, #57	; 0x39
 80008b8:	f001 fb32 	bl	8001f20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80008bc:	2039      	movs	r0, #57	; 0x39
 80008be:	f001 fb49 	bl	8001f54 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 80008c2:	2200      	movs	r2, #0
 80008c4:	2105      	movs	r1, #5
 80008c6:	203c      	movs	r0, #60	; 0x3c
 80008c8:	f001 fb2a 	bl	8001f20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 80008cc:	203c      	movs	r0, #60	; 0x3c
 80008ce:	f001 fb41 	bl	8001f54 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 5, 0);
 80008d2:	2200      	movs	r2, #0
 80008d4:	2105      	movs	r1, #5
 80008d6:	2044      	movs	r0, #68	; 0x44
 80008d8:	f001 fb22 	bl	8001f20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 80008dc:	2044      	movs	r0, #68	; 0x44
 80008de:	f001 fb39 	bl	8001f54 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 80008e2:	2200      	movs	r2, #0
 80008e4:	2105      	movs	r1, #5
 80008e6:	2045      	movs	r0, #69	; 0x45
 80008e8:	f001 fb1a 	bl	8001f20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80008ec:	2045      	movs	r0, #69	; 0x45
 80008ee:	f001 fb31 	bl	8001f54 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 80008f2:	2200      	movs	r2, #0
 80008f4:	2105      	movs	r1, #5
 80008f6:	2046      	movs	r0, #70	; 0x46
 80008f8:	f001 fb12 	bl	8001f20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80008fc:	2046      	movs	r0, #70	; 0x46
 80008fe:	f001 fb29 	bl	8001f54 <HAL_NVIC_EnableIRQ>

}
 8000902:	bf00      	nop
 8000904:	3708      	adds	r7, #8
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	58024400 	.word	0x58024400

08000910 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000910:	b480      	push	{r7}
 8000912:	b085      	sub	sp, #20
 8000914:	af00      	add	r7, sp, #0
 8000916:	60f8      	str	r0, [r7, #12]
 8000918:	60b9      	str	r1, [r7, #8]
 800091a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	4a07      	ldr	r2, [pc, #28]	; (800093c <vApplicationGetIdleTaskMemory+0x2c>)
 8000920:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000922:	68bb      	ldr	r3, [r7, #8]
 8000924:	4a06      	ldr	r2, [pc, #24]	; (8000940 <vApplicationGetIdleTaskMemory+0x30>)
 8000926:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800092e:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000930:	bf00      	nop
 8000932:	3714      	adds	r7, #20
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr
 800093c:	24000228 	.word	0x24000228
 8000940:	2400027c 	.word	0x2400027c

08000944 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000944:	b5b0      	push	{r4, r5, r7, lr}
 8000946:	b088      	sub	sp, #32
 8000948:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of watchdog */
  osThreadDef(watchdog, watchdogTask, osPriorityNormal, 0, 512);
 800094a:	4b0b      	ldr	r3, [pc, #44]	; (8000978 <MX_FREERTOS_Init+0x34>)
 800094c:	1d3c      	adds	r4, r7, #4
 800094e:	461d      	mov	r5, r3
 8000950:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000952:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000954:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000958:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  watchdogHandle = osThreadCreate(osThread(watchdog), NULL);
 800095c:	1d3b      	adds	r3, r7, #4
 800095e:	2100      	movs	r1, #0
 8000960:	4618      	mov	r0, r3
 8000962:	f009 fee8 	bl	800a736 <osThreadCreate>
 8000966:	4602      	mov	r2, r0
 8000968:	4b04      	ldr	r3, [pc, #16]	; (800097c <MX_FREERTOS_Init+0x38>)
 800096a:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  initCortexM7();
 800096c:	f019 f898 	bl	8019aa0 <initCortexM7>
  /* USER CODE END RTOS_THREADS */

}
 8000970:	bf00      	nop
 8000972:	3720      	adds	r7, #32
 8000974:	46bd      	mov	sp, r7
 8000976:	bdb0      	pop	{r4, r5, r7, pc}
 8000978:	0801d2e4 	.word	0x0801d2e4
 800097c:	24009598 	.word	0x24009598

08000980 <watchdogTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_watchdogTask */
void watchdogTask(void const * argument)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  /* USER CODE BEGIN watchdogTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000988:	2001      	movs	r0, #1
 800098a:	f009 ff20 	bl	800a7ce <osDelay>
 800098e:	e7fb      	b.n	8000988 <watchdogTask+0x8>

08000990 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 8000990:	b480      	push	{r7}
 8000992:	b087      	sub	sp, #28
 8000994:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000996:	4b30      	ldr	r3, [pc, #192]	; (8000a58 <MX_GPIO_Init+0xc8>)
 8000998:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800099c:	4a2e      	ldr	r2, [pc, #184]	; (8000a58 <MX_GPIO_Init+0xc8>)
 800099e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009a6:	4b2c      	ldr	r3, [pc, #176]	; (8000a58 <MX_GPIO_Init+0xc8>)
 80009a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009b0:	617b      	str	r3, [r7, #20]
 80009b2:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009b4:	4b28      	ldr	r3, [pc, #160]	; (8000a58 <MX_GPIO_Init+0xc8>)
 80009b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ba:	4a27      	ldr	r2, [pc, #156]	; (8000a58 <MX_GPIO_Init+0xc8>)
 80009bc:	f043 0304 	orr.w	r3, r3, #4
 80009c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009c4:	4b24      	ldr	r3, [pc, #144]	; (8000a58 <MX_GPIO_Init+0xc8>)
 80009c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ca:	f003 0304 	and.w	r3, r3, #4
 80009ce:	613b      	str	r3, [r7, #16]
 80009d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d2:	4b21      	ldr	r3, [pc, #132]	; (8000a58 <MX_GPIO_Init+0xc8>)
 80009d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d8:	4a1f      	ldr	r2, [pc, #124]	; (8000a58 <MX_GPIO_Init+0xc8>)
 80009da:	f043 0301 	orr.w	r3, r3, #1
 80009de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009e2:	4b1d      	ldr	r3, [pc, #116]	; (8000a58 <MX_GPIO_Init+0xc8>)
 80009e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e8:	f003 0301 	and.w	r3, r3, #1
 80009ec:	60fb      	str	r3, [r7, #12]
 80009ee:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f0:	4b19      	ldr	r3, [pc, #100]	; (8000a58 <MX_GPIO_Init+0xc8>)
 80009f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009f6:	4a18      	ldr	r2, [pc, #96]	; (8000a58 <MX_GPIO_Init+0xc8>)
 80009f8:	f043 0302 	orr.w	r3, r3, #2
 80009fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a00:	4b15      	ldr	r3, [pc, #84]	; (8000a58 <MX_GPIO_Init+0xc8>)
 8000a02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a06:	f003 0302 	and.w	r3, r3, #2
 8000a0a:	60bb      	str	r3, [r7, #8]
 8000a0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a0e:	4b12      	ldr	r3, [pc, #72]	; (8000a58 <MX_GPIO_Init+0xc8>)
 8000a10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a14:	4a10      	ldr	r2, [pc, #64]	; (8000a58 <MX_GPIO_Init+0xc8>)
 8000a16:	f043 0308 	orr.w	r3, r3, #8
 8000a1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a1e:	4b0e      	ldr	r3, [pc, #56]	; (8000a58 <MX_GPIO_Init+0xc8>)
 8000a20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a24:	f003 0308 	and.w	r3, r3, #8
 8000a28:	607b      	str	r3, [r7, #4]
 8000a2a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a2c:	4b0a      	ldr	r3, [pc, #40]	; (8000a58 <MX_GPIO_Init+0xc8>)
 8000a2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a32:	4a09      	ldr	r2, [pc, #36]	; (8000a58 <MX_GPIO_Init+0xc8>)
 8000a34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a3c:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <MX_GPIO_Init+0xc8>)
 8000a3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a46:	603b      	str	r3, [r7, #0]
 8000a48:	683b      	ldr	r3, [r7, #0]

}
 8000a4a:	bf00      	nop
 8000a4c:	371c      	adds	r7, #28
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	58024400 	.word	0x58024400

08000a5c <MX_IWDG1_Init>:

IWDG_HandleTypeDef hiwdg1;

/* IWDG1 init function */
void MX_IWDG1_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0

  hiwdg1.Instance = IWDG1;
 8000a60:	4b0b      	ldr	r3, [pc, #44]	; (8000a90 <MX_IWDG1_Init+0x34>)
 8000a62:	4a0c      	ldr	r2, [pc, #48]	; (8000a94 <MX_IWDG1_Init+0x38>)
 8000a64:	601a      	str	r2, [r3, #0]
  hiwdg1.Init.Prescaler = IWDG_PRESCALER_4;
 8000a66:	4b0a      	ldr	r3, [pc, #40]	; (8000a90 <MX_IWDG1_Init+0x34>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	605a      	str	r2, [r3, #4]
  hiwdg1.Init.Window = 4095;
 8000a6c:	4b08      	ldr	r3, [pc, #32]	; (8000a90 <MX_IWDG1_Init+0x34>)
 8000a6e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000a72:	60da      	str	r2, [r3, #12]
  hiwdg1.Init.Reload = 4095;
 8000a74:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <MX_IWDG1_Init+0x34>)
 8000a76:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000a7a:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg1) != HAL_OK)
 8000a7c:	4804      	ldr	r0, [pc, #16]	; (8000a90 <MX_IWDG1_Init+0x34>)
 8000a7e:	f005 f957 	bl	8005d30 <HAL_IWDG_Init>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_IWDG1_Init+0x30>
  {
    Error_Handler();
 8000a88:	f000 f9f6 	bl	8000e78 <Error_Handler>
  }

}
 8000a8c:	bf00      	nop
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	2400959c 	.word	0x2400959c
 8000a94:	58004800 	.word	0x58004800

08000a98 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000a9c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000aa0:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000aa4:	4b0b      	ldr	r3, [pc, #44]	; (8000ad4 <SCB_EnableICache+0x3c>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000aac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000ab0:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000ab4:	4b07      	ldr	r3, [pc, #28]	; (8000ad4 <SCB_EnableICache+0x3c>)
 8000ab6:	695b      	ldr	r3, [r3, #20]
 8000ab8:	4a06      	ldr	r2, [pc, #24]	; (8000ad4 <SCB_EnableICache+0x3c>)
 8000aba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000abe:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000ac0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000ac4:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 8000ac8:	bf00      	nop
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	e000ed00 	.word	0xe000ed00

08000ad8 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b085      	sub	sp, #20
 8000adc:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000ade:	4b1d      	ldr	r3, [pc, #116]	; (8000b54 <SCB_EnableDCache+0x7c>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000ae6:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000aea:	4b1a      	ldr	r3, [pc, #104]	; (8000b54 <SCB_EnableDCache+0x7c>)
 8000aec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000af0:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	0b5b      	lsrs	r3, r3, #13
 8000af6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000afa:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	08db      	lsrs	r3, r3, #3
 8000b00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000b04:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	015a      	lsls	r2, r3, #5
 8000b0a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000b0e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000b10:	68ba      	ldr	r2, [r7, #8]
 8000b12:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000b14:	490f      	ldr	r1, [pc, #60]	; (8000b54 <SCB_EnableDCache+0x7c>)
 8000b16:	4313      	orrs	r3, r2
 8000b18:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	1e5a      	subs	r2, r3, #1
 8000b20:	60ba      	str	r2, [r7, #8]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d1ef      	bne.n	8000b06 <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	1e5a      	subs	r2, r3, #1
 8000b2a:	60fa      	str	r2, [r7, #12]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d1e5      	bne.n	8000afc <SCB_EnableDCache+0x24>
 8000b30:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000b34:	4b07      	ldr	r3, [pc, #28]	; (8000b54 <SCB_EnableDCache+0x7c>)
 8000b36:	695b      	ldr	r3, [r3, #20]
 8000b38:	4a06      	ldr	r2, [pc, #24]	; (8000b54 <SCB_EnableDCache+0x7c>)
 8000b3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b3e:	6153      	str	r3, [r2, #20]
 8000b40:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000b44:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 8000b48:	bf00      	nop
 8000b4a:	3714      	adds	r7, #20
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr
 8000b54:	e000ed00 	.word	0xe000ed00

08000b58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000b5e:	f000 f931 	bl	8000dc4 <MPU_Config>

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000b62:	f7ff ff99 	bl	8000a98 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000b66:	f7ff ffb7 	bl	8000ad8 <SCB_EnableDCache>

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000b6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b6e:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000b70:	bf00      	nop
 8000b72:	4b2a      	ldr	r3, [pc, #168]	; (8000c1c <main+0xc4>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d004      	beq.n	8000b88 <main+0x30>
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	1e5a      	subs	r2, r3, #1
 8000b82:	607a      	str	r2, [r7, #4]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	dcf4      	bgt.n	8000b72 <main+0x1a>
  if ( timeout < 0 )
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	da01      	bge.n	8000b92 <main+0x3a>
  {
  Error_Handler();
 8000b8e:	f000 f973 	bl	8000e78 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b92:	f001 f891 	bl	8001cb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b96:	f000 f843 	bl	8000c20 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000b9a:	4b20      	ldr	r3, [pc, #128]	; (8000c1c <main+0xc4>)
 8000b9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ba0:	4a1e      	ldr	r2, [pc, #120]	; (8000c1c <main+0xc4>)
 8000ba2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ba6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000baa:	4b1c      	ldr	r3, [pc, #112]	; (8000c1c <main+0xc4>)
 8000bac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bb4:	603b      	str	r3, [r7, #0]
 8000bb6:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000bb8:	2000      	movs	r0, #0
 8000bba:	f005 f875 	bl	8005ca8 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	2000      	movs	r0, #0
 8000bc2:	f005 f8a1 	bl	8005d08 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000bc6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000bca:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000bcc:	bf00      	nop
 8000bce:	4b13      	ldr	r3, [pc, #76]	; (8000c1c <main+0xc4>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d104      	bne.n	8000be4 <main+0x8c>
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	1e5a      	subs	r2, r3, #1
 8000bde:	607a      	str	r2, [r7, #4]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	dcf4      	bgt.n	8000bce <main+0x76>
if ( timeout < 0 )
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	da01      	bge.n	8000bee <main+0x96>
{
Error_Handler();
 8000bea:	f000 f945 	bl	8000e78 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bee:	f7ff fecf 	bl	8000990 <MX_GPIO_Init>
  MX_DMA_Init();
 8000bf2:	f7ff fe35 	bl	8000860 <MX_DMA_Init>
  MX_CRC_Init();
 8000bf6:	f7ff fdef 	bl	80007d8 <MX_CRC_Init>
  MX_USART1_UART_Init();
 8000bfa:	f000 fb3d 	bl	8001278 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000bfe:	f000 fb87 	bl	8001310 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000c02:	f000 fbd1 	bl	80013a8 <MX_USART3_UART_Init>
  MX_IWDG1_Init();
 8000c06:	f7ff ff29 	bl	8000a5c <MX_IWDG1_Init>
  MX_USART6_UART_Init();
 8000c0a:	f000 fc19 	bl	8001440 <MX_USART6_UART_Init>
  MX_RTC_Init();
 8000c0e:	f000 f937 	bl	8000e80 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000c12:	f7ff fe97 	bl	8000944 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000c16:	f009 fd77 	bl	800a708 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c1a:	e7fe      	b.n	8000c1a <main+0xc2>
 8000c1c:	58024400 	.word	0x58024400

08000c20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b0cc      	sub	sp, #304	; 0x130
 8000c24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c26:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000c2a:	224c      	movs	r2, #76	; 0x4c
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f019 fe25 	bl	801a87e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c34:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000c38:	2220      	movs	r2, #32
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f019 fe1e 	bl	801a87e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c42:	f107 0308 	add.w	r3, r7, #8
 8000c46:	4618      	mov	r0, r3
 8000c48:	23bc      	movs	r3, #188	; 0xbc
 8000c4a:	461a      	mov	r2, r3
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	f019 fe16 	bl	801a87e <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000c52:	2004      	movs	r0, #4
 8000c54:	f005 f8c2 	bl	8005ddc <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c58:	1d3b      	adds	r3, r7, #4
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	601a      	str	r2, [r3, #0]
 8000c5e:	4b56      	ldr	r3, [pc, #344]	; (8000db8 <SystemClock_Config+0x198>)
 8000c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c62:	4a55      	ldr	r2, [pc, #340]	; (8000db8 <SystemClock_Config+0x198>)
 8000c64:	f023 0301 	bic.w	r3, r3, #1
 8000c68:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000c6a:	4b53      	ldr	r3, [pc, #332]	; (8000db8 <SystemClock_Config+0x198>)
 8000c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c6e:	f003 0201 	and.w	r2, r3, #1
 8000c72:	1d3b      	adds	r3, r7, #4
 8000c74:	601a      	str	r2, [r3, #0]
 8000c76:	4b51      	ldr	r3, [pc, #324]	; (8000dbc <SystemClock_Config+0x19c>)
 8000c78:	699b      	ldr	r3, [r3, #24]
 8000c7a:	4a50      	ldr	r2, [pc, #320]	; (8000dbc <SystemClock_Config+0x19c>)
 8000c7c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c80:	6193      	str	r3, [r2, #24]
 8000c82:	4b4e      	ldr	r3, [pc, #312]	; (8000dbc <SystemClock_Config+0x19c>)
 8000c84:	699b      	ldr	r3, [r3, #24]
 8000c86:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000c8a:	1d3b      	adds	r3, r7, #4
 8000c8c:	601a      	str	r2, [r3, #0]
 8000c8e:	1d3b      	adds	r3, r7, #4
 8000c90:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c92:	bf00      	nop
 8000c94:	4b49      	ldr	r3, [pc, #292]	; (8000dbc <SystemClock_Config+0x19c>)
 8000c96:	699b      	ldr	r3, [r3, #24]
 8000c98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ca0:	d1f8      	bne.n	8000c94 <SystemClock_Config+0x74>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8000ca2:	230b      	movs	r3, #11
 8000ca4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ca8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000cac:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cb6:	2340      	movs	r3, #64	; 0x40
 8000cb8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000cce:	2302      	movs	r3, #2
 8000cd0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000cd4:	2340      	movs	r3, #64	; 0x40
 8000cd6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000cda:	2302      	movs	r3, #2
 8000cdc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000cec:	230c      	movs	r3, #12
 8000cee:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cfe:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000d02:	4618      	mov	r0, r3
 8000d04:	f005 f8c4 	bl	8005e90 <HAL_RCC_OscConfig>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000d0e:	f000 f8b3 	bl	8000e78 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d12:	233f      	movs	r3, #63	; 0x3f
 8000d14:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d18:	2303      	movs	r3, #3
 8000d1a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000d24:	2308      	movs	r3, #8
 8000d26:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000d2a:	2340      	movs	r3, #64	; 0x40
 8000d2c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000d30:	2340      	movs	r3, #64	; 0x40
 8000d32:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000d36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000d3e:	2340      	movs	r3, #64	; 0x40
 8000d40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d44:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000d48:	2102      	movs	r1, #2
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f005 fcb0 	bl	80066b0 <HAL_RCC_ClockConfig>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <SystemClock_Config+0x13a>
  {
    Error_Handler();
 8000d56:	f000 f88f 	bl	8000e78 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART3
 8000d5a:	f107 0308 	add.w	r3, r7, #8
 8000d5e:	4a18      	ldr	r2, [pc, #96]	; (8000dc0 <SystemClock_Config+0x1a0>)
 8000d60:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART6
                              |RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_SPI4
                              |RCC_PERIPHCLK_SPI3|RCC_PERIPHCLK_SPI1
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_I2C3
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000d62:	f107 0308 	add.w	r3, r7, #8
 8000d66:	2200      	movs	r2, #0
 8000d68:	65da      	str	r2, [r3, #92]	; 0x5c
  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8000d6a:	f107 0308 	add.w	r3, r7, #8
 8000d6e:	2200      	movs	r2, #0
 8000d70:	661a      	str	r2, [r3, #96]	; 0x60
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_HSI;
 8000d72:	f107 0308 	add.w	r3, r7, #8
 8000d76:	2203      	movs	r2, #3
 8000d78:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_HSI;
 8000d7a:	f107 0308 	add.w	r3, r7, #8
 8000d7e:	2218      	movs	r2, #24
 8000d80:	679a      	str	r2, [r3, #120]	; 0x78
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000d82:	f107 0308 	add.w	r3, r7, #8
 8000d86:	2200      	movs	r2, #0
 8000d88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000d8c:	f107 0308 	add.w	r3, r7, #8
 8000d90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d94:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d98:	f107 0308 	add.w	r3, r7, #8
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f006 f84d 	bl	8006e3c <HAL_RCCEx_PeriphCLKConfig>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <SystemClock_Config+0x18c>
  {
    Error_Handler();
 8000da8:	f000 f866 	bl	8000e78 <Error_Handler>
  }
}
 8000dac:	bf00      	nop
 8000dae:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	58000400 	.word	0x58000400
 8000dbc:	58024800 	.word	0x58024800
 8000dc0:	0040300b 	.word	0x0040300b

08000dc4 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000dca:	463b      	mov	r3, r7
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]
 8000dd2:	609a      	str	r2, [r3, #8]
 8000dd4:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000dd6:	f001 f8cb 	bl	8001f70 <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000dde:	2300      	movs	r3, #0
 8000de0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 8000de2:	4b1b      	ldr	r3, [pc, #108]	; (8000e50 <MPU_Config+0x8c>)
 8000de4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 8000de6:	230e      	movs	r3, #14
 8000de8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000dea:	2300      	movs	r3, #0
 8000dec:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000dee:	2301      	movs	r3, #1
 8000df0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000df2:	2303      	movs	r3, #3
 8000df4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000df6:	2301      	movs	r3, #1
 8000df8:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000e02:	2300      	movs	r3, #0
 8000e04:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000e06:	463b      	mov	r3, r7
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f001 f8e5 	bl	8001fd8 <HAL_MPU_ConfigRegion>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000e12:	2301      	movs	r3, #1
 8000e14:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 8000e16:	4b0e      	ldr	r3, [pc, #56]	; (8000e50 <MPU_Config+0x8c>)
 8000e18:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 8000e1a:	2307      	movs	r3, #7
 8000e1c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000e22:	2300      	movs	r3, #0
 8000e24:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000e26:	2303      	movs	r3, #3
 8000e28:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000e32:	2300      	movs	r3, #0
 8000e34:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000e36:	2301      	movs	r3, #1
 8000e38:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000e3a:	463b      	mov	r3, r7
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f001 f8cb 	bl	8001fd8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000e42:	2004      	movs	r0, #4
 8000e44:	f001 f8aa 	bl	8001f9c <HAL_MPU_Enable>

}
 8000e48:	bf00      	nop
 8000e4a:	3710      	adds	r7, #16
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	30040000 	.word	0x30040000

08000e54 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a04      	ldr	r2, [pc, #16]	; (8000e74 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d101      	bne.n	8000e6a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e66:	f000 ff63 	bl	8001d30 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e6a:	bf00      	nop
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	40001400 	.word	0x40001400

08000e78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000e7c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e7e:	e7fe      	b.n	8000e7e <Error_Handler+0x6>

08000e80 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000e84:	4b10      	ldr	r3, [pc, #64]	; (8000ec8 <MX_RTC_Init+0x48>)
 8000e86:	4a11      	ldr	r2, [pc, #68]	; (8000ecc <MX_RTC_Init+0x4c>)
 8000e88:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000e8a:	4b0f      	ldr	r3, [pc, #60]	; (8000ec8 <MX_RTC_Init+0x48>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000e90:	4b0d      	ldr	r3, [pc, #52]	; (8000ec8 <MX_RTC_Init+0x48>)
 8000e92:	227f      	movs	r2, #127	; 0x7f
 8000e94:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000e96:	4b0c      	ldr	r3, [pc, #48]	; (8000ec8 <MX_RTC_Init+0x48>)
 8000e98:	22ff      	movs	r2, #255	; 0xff
 8000e9a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000e9c:	4b0a      	ldr	r3, [pc, #40]	; (8000ec8 <MX_RTC_Init+0x48>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000ea2:	4b09      	ldr	r3, [pc, #36]	; (8000ec8 <MX_RTC_Init+0x48>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000ea8:	4b07      	ldr	r3, [pc, #28]	; (8000ec8 <MX_RTC_Init+0x48>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000eae:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <MX_RTC_Init+0x48>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000eb4:	4804      	ldr	r0, [pc, #16]	; (8000ec8 <MX_RTC_Init+0x48>)
 8000eb6:	f007 fac1 	bl	800843c <HAL_RTC_Init>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8000ec0:	f7ff ffda 	bl	8000e78 <Error_Handler>
  }

}
 8000ec4:	bf00      	nop
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	240095ac 	.word	0x240095ac
 8000ecc:	58004000 	.word	0x58004000

08000ed0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a07      	ldr	r2, [pc, #28]	; (8000efc <HAL_RTC_MspInit+0x2c>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d105      	bne.n	8000eee <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000ee2:	4b07      	ldr	r3, [pc, #28]	; (8000f00 <HAL_RTC_MspInit+0x30>)
 8000ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ee6:	4a06      	ldr	r2, [pc, #24]	; (8000f00 <HAL_RTC_MspInit+0x30>)
 8000ee8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000eec:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000eee:	bf00      	nop
 8000ef0:	370c      	adds	r7, #12
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	58004000 	.word	0x58004000
 8000f00:	58024400 	.word	0x58024400

08000f04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f0a:	4b0c      	ldr	r3, [pc, #48]	; (8000f3c <HAL_MspInit+0x38>)
 8000f0c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f10:	4a0a      	ldr	r2, [pc, #40]	; (8000f3c <HAL_MspInit+0x38>)
 8000f12:	f043 0302 	orr.w	r3, r3, #2
 8000f16:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000f1a:	4b08      	ldr	r3, [pc, #32]	; (8000f3c <HAL_MspInit+0x38>)
 8000f1c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f20:	f003 0302 	and.w	r3, r3, #2
 8000f24:	607b      	str	r3, [r7, #4]
 8000f26:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f28:	2200      	movs	r2, #0
 8000f2a:	210f      	movs	r1, #15
 8000f2c:	f06f 0001 	mvn.w	r0, #1
 8000f30:	f000 fff6 	bl	8001f20 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f34:	bf00      	nop
 8000f36:	3708      	adds	r7, #8
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	58024400 	.word	0x58024400

08000f40 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b090      	sub	sp, #64	; 0x40
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM7 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2b0f      	cmp	r3, #15
 8000f4c:	d827      	bhi.n	8000f9e <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0U);
 8000f4e:	2200      	movs	r2, #0
 8000f50:	6879      	ldr	r1, [r7, #4]
 8000f52:	2037      	movs	r0, #55	; 0x37
 8000f54:	f000 ffe4 	bl	8001f20 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000f58:	2037      	movs	r0, #55	; 0x37
 8000f5a:	f000 fffb 	bl	8001f54 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000f5e:	4a29      	ldr	r2, [pc, #164]	; (8001004 <HAL_InitTick+0xc4>)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000f64:	4b28      	ldr	r3, [pc, #160]	; (8001008 <HAL_InitTick+0xc8>)
 8000f66:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f6a:	4a27      	ldr	r2, [pc, #156]	; (8001008 <HAL_InitTick+0xc8>)
 8000f6c:	f043 0320 	orr.w	r3, r3, #32
 8000f70:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000f74:	4b24      	ldr	r3, [pc, #144]	; (8001008 <HAL_InitTick+0xc8>)
 8000f76:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f7a:	f003 0320 	and.w	r3, r3, #32
 8000f7e:	60fb      	str	r3, [r7, #12]
 8000f80:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f82:	f107 0210 	add.w	r2, r7, #16
 8000f86:	f107 0314 	add.w	r3, r7, #20
 8000f8a:	4611      	mov	r1, r2
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f005 ff13 	bl	8006db8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f94:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d106      	bne.n	8000faa <HAL_InitTick+0x6a>
 8000f9c:	e001      	b.n	8000fa2 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e02b      	b.n	8000ffa <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000fa2:	f005 fedd 	bl	8006d60 <HAL_RCC_GetPCLK1Freq>
 8000fa6:	63f8      	str	r0, [r7, #60]	; 0x3c
 8000fa8:	e004      	b.n	8000fb4 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000faa:	f005 fed9 	bl	8006d60 <HAL_RCC_GetPCLK1Freq>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000fb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000fb6:	4a15      	ldr	r2, [pc, #84]	; (800100c <HAL_InitTick+0xcc>)
 8000fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8000fbc:	0c9b      	lsrs	r3, r3, #18
 8000fbe:	3b01      	subs	r3, #1
 8000fc0:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000fc2:	4b13      	ldr	r3, [pc, #76]	; (8001010 <HAL_InitTick+0xd0>)
 8000fc4:	4a13      	ldr	r2, [pc, #76]	; (8001014 <HAL_InitTick+0xd4>)
 8000fc6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8000fc8:	4b11      	ldr	r3, [pc, #68]	; (8001010 <HAL_InitTick+0xd0>)
 8000fca:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000fce:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000fd0:	4a0f      	ldr	r2, [pc, #60]	; (8001010 <HAL_InitTick+0xd0>)
 8000fd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fd4:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000fd6:	4b0e      	ldr	r3, [pc, #56]	; (8001010 <HAL_InitTick+0xd0>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fdc:	4b0c      	ldr	r3, [pc, #48]	; (8001010 <HAL_InitTick+0xd0>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8000fe2:	480b      	ldr	r0, [pc, #44]	; (8001010 <HAL_InitTick+0xd0>)
 8000fe4:	f007 fb36 	bl	8008654 <HAL_TIM_Base_Init>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d104      	bne.n	8000ff8 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8000fee:	4808      	ldr	r0, [pc, #32]	; (8001010 <HAL_InitTick+0xd0>)
 8000ff0:	f007 fb92 	bl	8008718 <HAL_TIM_Base_Start_IT>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	e000      	b.n	8000ffa <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8000ff8:	2301      	movs	r3, #1
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3740      	adds	r7, #64	; 0x40
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	24000008 	.word	0x24000008
 8001008:	58024400 	.word	0x58024400
 800100c:	431bde83 	.word	0x431bde83
 8001010:	240095d0 	.word	0x240095d0
 8001014:	40001400 	.word	0x40001400

08001018 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800101c:	e7fe      	b.n	800101c <NMI_Handler+0x4>

0800101e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800101e:	b480      	push	{r7}
 8001020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001022:	e7fe      	b.n	8001022 <HardFault_Handler+0x4>

08001024 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001028:	e7fe      	b.n	8001028 <MemManage_Handler+0x4>

0800102a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800102a:	b480      	push	{r7}
 800102c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800102e:	e7fe      	b.n	800102e <BusFault_Handler+0x4>

08001030 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001034:	e7fe      	b.n	8001034 <UsageFault_Handler+0x4>

08001036 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001036:	b480      	push	{r7}
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800103a:	bf00      	nop
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr

08001044 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001048:	4802      	ldr	r0, [pc, #8]	; (8001054 <TIM7_IRQHandler+0x10>)
 800104a:	f007 fb9b 	bl	8008784 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	240095d0 	.word	0x240095d0

08001058 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800105c:	4802      	ldr	r0, [pc, #8]	; (8001068 <DMA2_Stream0_IRQHandler+0x10>)
 800105e:	f001 fc59 	bl	8002914 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001062:	bf00      	nop
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	24009978 	.word	0x24009978

0800106c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001070:	4802      	ldr	r0, [pc, #8]	; (800107c <DMA2_Stream1_IRQHandler+0x10>)
 8001072:	f001 fc4f 	bl	8002914 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001076:	bf00      	nop
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	24009888 	.word	0x24009888

08001080 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001084:	4802      	ldr	r0, [pc, #8]	; (8001090 <DMA2_Stream4_IRQHandler+0x10>)
 8001086:	f001 fc45 	bl	8002914 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 800108a:	bf00      	nop
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	2400961c 	.word	0x2400961c

08001094 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001098:	4802      	ldr	r0, [pc, #8]	; (80010a4 <ETH_IRQHandler+0x10>)
 800109a:	f003 fa7b 	bl	8004594 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	24009cfc 	.word	0x24009cfc

080010a8 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80010ac:	4802      	ldr	r0, [pc, #8]	; (80010b8 <DMA2_Stream5_IRQHandler+0x10>)
 80010ae:	f001 fc31 	bl	8002914 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 80010b2:	bf00      	nop
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	240099f0 	.word	0x240099f0

080010bc <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 80010c0:	4802      	ldr	r0, [pc, #8]	; (80010cc <DMA2_Stream6_IRQHandler+0x10>)
 80010c2:	f001 fc27 	bl	8002914 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80010c6:	bf00      	nop
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	24009694 	.word	0x24009694

080010d0 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 80010d4:	4802      	ldr	r0, [pc, #8]	; (80010e0 <DMA2_Stream7_IRQHandler+0x10>)
 80010d6:	f001 fc1d 	bl	8002914 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80010da:	bf00      	nop
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	24009900 	.word	0x24009900

080010e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
	return 1;
 80010e8:	2301      	movs	r3, #1
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr

080010f4 <_kill>:

int _kill(int pid, int sig)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80010fe:	4b05      	ldr	r3, [pc, #20]	; (8001114 <_kill+0x20>)
 8001100:	2216      	movs	r2, #22
 8001102:	601a      	str	r2, [r3, #0]
	return -1;
 8001104:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001108:	4618      	mov	r0, r3
 800110a:	370c      	adds	r7, #12
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	2400ce5c 	.word	0x2400ce5c

08001118 <_exit>:

void _exit (int status)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001120:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f7ff ffe5 	bl	80010f4 <_kill>
	while (1) {}		/* Make sure we hang here */
 800112a:	e7fe      	b.n	800112a <_exit+0x12>

0800112c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b086      	sub	sp, #24
 8001130:	af00      	add	r7, sp, #0
 8001132:	60f8      	str	r0, [r7, #12]
 8001134:	60b9      	str	r1, [r7, #8]
 8001136:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001138:	2300      	movs	r3, #0
 800113a:	617b      	str	r3, [r7, #20]
 800113c:	e00a      	b.n	8001154 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800113e:	f3af 8000 	nop.w
 8001142:	4601      	mov	r1, r0
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	1c5a      	adds	r2, r3, #1
 8001148:	60ba      	str	r2, [r7, #8]
 800114a:	b2ca      	uxtb	r2, r1
 800114c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	3301      	adds	r3, #1
 8001152:	617b      	str	r3, [r7, #20]
 8001154:	697a      	ldr	r2, [r7, #20]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	429a      	cmp	r2, r3
 800115a:	dbf0      	blt.n	800113e <_read+0x12>
	}

return len;
 800115c:	687b      	ldr	r3, [r7, #4]
}
 800115e:	4618      	mov	r0, r3
 8001160:	3718      	adds	r7, #24
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}

08001166 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001166:	b580      	push	{r7, lr}
 8001168:	b086      	sub	sp, #24
 800116a:	af00      	add	r7, sp, #0
 800116c:	60f8      	str	r0, [r7, #12]
 800116e:	60b9      	str	r1, [r7, #8]
 8001170:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001172:	2300      	movs	r3, #0
 8001174:	617b      	str	r3, [r7, #20]
 8001176:	e009      	b.n	800118c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	1c5a      	adds	r2, r3, #1
 800117c:	60ba      	str	r2, [r7, #8]
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	4618      	mov	r0, r3
 8001182:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	3301      	adds	r3, #1
 800118a:	617b      	str	r3, [r7, #20]
 800118c:	697a      	ldr	r2, [r7, #20]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	429a      	cmp	r2, r3
 8001192:	dbf1      	blt.n	8001178 <_write+0x12>
	}
	return len;
 8001194:	687b      	ldr	r3, [r7, #4]
}
 8001196:	4618      	mov	r0, r3
 8001198:	3718      	adds	r7, #24
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}

0800119e <_close>:

int _close(int file)
{
 800119e:	b480      	push	{r7}
 80011a0:	b083      	sub	sp, #12
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	6078      	str	r0, [r7, #4]
	return -1;
 80011a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	370c      	adds	r7, #12
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr

080011b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011b6:	b480      	push	{r7}
 80011b8:	b083      	sub	sp, #12
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	6078      	str	r0, [r7, #4]
 80011be:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011c6:	605a      	str	r2, [r3, #4]
	return 0;
 80011c8:	2300      	movs	r3, #0
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr

080011d6 <_isatty>:

int _isatty(int file)
{
 80011d6:	b480      	push	{r7}
 80011d8:	b083      	sub	sp, #12
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
	return 1;
 80011de:	2301      	movs	r3, #1
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	370c      	adds	r7, #12
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr

080011ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b085      	sub	sp, #20
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	60f8      	str	r0, [r7, #12]
 80011f4:	60b9      	str	r1, [r7, #8]
 80011f6:	607a      	str	r2, [r7, #4]
	return 0;
 80011f8:	2300      	movs	r3, #0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3714      	adds	r7, #20
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
	...

08001208 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001208:	b480      	push	{r7}
 800120a:	b087      	sub	sp, #28
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001210:	4a14      	ldr	r2, [pc, #80]	; (8001264 <_sbrk+0x5c>)
 8001212:	4b15      	ldr	r3, [pc, #84]	; (8001268 <_sbrk+0x60>)
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800121c:	4b13      	ldr	r3, [pc, #76]	; (800126c <_sbrk+0x64>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d102      	bne.n	800122a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001224:	4b11      	ldr	r3, [pc, #68]	; (800126c <_sbrk+0x64>)
 8001226:	4a12      	ldr	r2, [pc, #72]	; (8001270 <_sbrk+0x68>)
 8001228:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800122a:	4b10      	ldr	r3, [pc, #64]	; (800126c <_sbrk+0x64>)
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4413      	add	r3, r2
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	429a      	cmp	r2, r3
 8001236:	d205      	bcs.n	8001244 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001238:	4b0e      	ldr	r3, [pc, #56]	; (8001274 <_sbrk+0x6c>)
 800123a:	220c      	movs	r2, #12
 800123c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800123e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001242:	e009      	b.n	8001258 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001244:	4b09      	ldr	r3, [pc, #36]	; (800126c <_sbrk+0x64>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800124a:	4b08      	ldr	r3, [pc, #32]	; (800126c <_sbrk+0x64>)
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4413      	add	r3, r2
 8001252:	4a06      	ldr	r2, [pc, #24]	; (800126c <_sbrk+0x64>)
 8001254:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001256:	68fb      	ldr	r3, [r7, #12]
}
 8001258:	4618      	mov	r0, r3
 800125a:	371c      	adds	r7, #28
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr
 8001264:	24080000 	.word	0x24080000
 8001268:	00000400 	.word	0x00000400
 800126c:	24000a7c 	.word	0x24000a7c
 8001270:	2400ce88 	.word	0x2400ce88
 8001274:	2400ce5c 	.word	0x2400ce5c

08001278 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart6_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800127c:	4b22      	ldr	r3, [pc, #136]	; (8001308 <MX_USART1_UART_Init+0x90>)
 800127e:	4a23      	ldr	r2, [pc, #140]	; (800130c <MX_USART1_UART_Init+0x94>)
 8001280:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001282:	4b21      	ldr	r3, [pc, #132]	; (8001308 <MX_USART1_UART_Init+0x90>)
 8001284:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001288:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800128a:	4b1f      	ldr	r3, [pc, #124]	; (8001308 <MX_USART1_UART_Init+0x90>)
 800128c:	2200      	movs	r2, #0
 800128e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001290:	4b1d      	ldr	r3, [pc, #116]	; (8001308 <MX_USART1_UART_Init+0x90>)
 8001292:	2200      	movs	r2, #0
 8001294:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001296:	4b1c      	ldr	r3, [pc, #112]	; (8001308 <MX_USART1_UART_Init+0x90>)
 8001298:	2200      	movs	r2, #0
 800129a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800129c:	4b1a      	ldr	r3, [pc, #104]	; (8001308 <MX_USART1_UART_Init+0x90>)
 800129e:	220c      	movs	r2, #12
 80012a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012a2:	4b19      	ldr	r3, [pc, #100]	; (8001308 <MX_USART1_UART_Init+0x90>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012a8:	4b17      	ldr	r3, [pc, #92]	; (8001308 <MX_USART1_UART_Init+0x90>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012ae:	4b16      	ldr	r3, [pc, #88]	; (8001308 <MX_USART1_UART_Init+0x90>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012b4:	4b14      	ldr	r3, [pc, #80]	; (8001308 <MX_USART1_UART_Init+0x90>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012ba:	4b13      	ldr	r3, [pc, #76]	; (8001308 <MX_USART1_UART_Init+0x90>)
 80012bc:	2200      	movs	r2, #0
 80012be:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012c0:	4811      	ldr	r0, [pc, #68]	; (8001308 <MX_USART1_UART_Init+0x90>)
 80012c2:	f007 fc5f 	bl	8008b84 <HAL_UART_Init>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80012cc:	f7ff fdd4 	bl	8000e78 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012d0:	2100      	movs	r1, #0
 80012d2:	480d      	ldr	r0, [pc, #52]	; (8001308 <MX_USART1_UART_Init+0x90>)
 80012d4:	f008 fc8f 	bl	8009bf6 <HAL_UARTEx_SetTxFifoThreshold>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80012de:	f7ff fdcb 	bl	8000e78 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012e2:	2100      	movs	r1, #0
 80012e4:	4808      	ldr	r0, [pc, #32]	; (8001308 <MX_USART1_UART_Init+0x90>)
 80012e6:	f008 fcc4 	bl	8009c72 <HAL_UARTEx_SetRxFifoThreshold>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80012f0:	f7ff fdc2 	bl	8000e78 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80012f4:	4804      	ldr	r0, [pc, #16]	; (8001308 <MX_USART1_UART_Init+0x90>)
 80012f6:	f008 fc45 	bl	8009b84 <HAL_UARTEx_DisableFifoMode>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001300:	f7ff fdba 	bl	8000e78 <Error_Handler>
  }

}
 8001304:	bf00      	nop
 8001306:	bd80      	pop	{r7, pc}
 8001308:	24009a68 	.word	0x24009a68
 800130c:	40011000 	.word	0x40011000

08001310 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001314:	4b22      	ldr	r3, [pc, #136]	; (80013a0 <MX_USART2_UART_Init+0x90>)
 8001316:	4a23      	ldr	r2, [pc, #140]	; (80013a4 <MX_USART2_UART_Init+0x94>)
 8001318:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800131a:	4b21      	ldr	r3, [pc, #132]	; (80013a0 <MX_USART2_UART_Init+0x90>)
 800131c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001320:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001322:	4b1f      	ldr	r3, [pc, #124]	; (80013a0 <MX_USART2_UART_Init+0x90>)
 8001324:	2200      	movs	r2, #0
 8001326:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001328:	4b1d      	ldr	r3, [pc, #116]	; (80013a0 <MX_USART2_UART_Init+0x90>)
 800132a:	2200      	movs	r2, #0
 800132c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800132e:	4b1c      	ldr	r3, [pc, #112]	; (80013a0 <MX_USART2_UART_Init+0x90>)
 8001330:	2200      	movs	r2, #0
 8001332:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001334:	4b1a      	ldr	r3, [pc, #104]	; (80013a0 <MX_USART2_UART_Init+0x90>)
 8001336:	220c      	movs	r2, #12
 8001338:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800133a:	4b19      	ldr	r3, [pc, #100]	; (80013a0 <MX_USART2_UART_Init+0x90>)
 800133c:	2200      	movs	r2, #0
 800133e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001340:	4b17      	ldr	r3, [pc, #92]	; (80013a0 <MX_USART2_UART_Init+0x90>)
 8001342:	2200      	movs	r2, #0
 8001344:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001346:	4b16      	ldr	r3, [pc, #88]	; (80013a0 <MX_USART2_UART_Init+0x90>)
 8001348:	2200      	movs	r2, #0
 800134a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800134c:	4b14      	ldr	r3, [pc, #80]	; (80013a0 <MX_USART2_UART_Init+0x90>)
 800134e:	2200      	movs	r2, #0
 8001350:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001352:	4b13      	ldr	r3, [pc, #76]	; (80013a0 <MX_USART2_UART_Init+0x90>)
 8001354:	2200      	movs	r2, #0
 8001356:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001358:	4811      	ldr	r0, [pc, #68]	; (80013a0 <MX_USART2_UART_Init+0x90>)
 800135a:	f007 fc13 	bl	8008b84 <HAL_UART_Init>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001364:	f7ff fd88 	bl	8000e78 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001368:	2100      	movs	r1, #0
 800136a:	480d      	ldr	r0, [pc, #52]	; (80013a0 <MX_USART2_UART_Init+0x90>)
 800136c:	f008 fc43 	bl	8009bf6 <HAL_UARTEx_SetTxFifoThreshold>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001376:	f7ff fd7f 	bl	8000e78 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800137a:	2100      	movs	r1, #0
 800137c:	4808      	ldr	r0, [pc, #32]	; (80013a0 <MX_USART2_UART_Init+0x90>)
 800137e:	f008 fc78 	bl	8009c72 <HAL_UARTEx_SetRxFifoThreshold>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001388:	f7ff fd76 	bl	8000e78 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800138c:	4804      	ldr	r0, [pc, #16]	; (80013a0 <MX_USART2_UART_Init+0x90>)
 800138e:	f008 fbf9 	bl	8009b84 <HAL_UARTEx_DisableFifoMode>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001398:	f7ff fd6e 	bl	8000e78 <Error_Handler>
  }

}
 800139c:	bf00      	nop
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	24009b80 	.word	0x24009b80
 80013a4:	40004400 	.word	0x40004400

080013a8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80013ac:	4b22      	ldr	r3, [pc, #136]	; (8001438 <MX_USART3_UART_Init+0x90>)
 80013ae:	4a23      	ldr	r2, [pc, #140]	; (800143c <MX_USART3_UART_Init+0x94>)
 80013b0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80013b2:	4b21      	ldr	r3, [pc, #132]	; (8001438 <MX_USART3_UART_Init+0x90>)
 80013b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013b8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80013ba:	4b1f      	ldr	r3, [pc, #124]	; (8001438 <MX_USART3_UART_Init+0x90>)
 80013bc:	2200      	movs	r2, #0
 80013be:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80013c0:	4b1d      	ldr	r3, [pc, #116]	; (8001438 <MX_USART3_UART_Init+0x90>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80013c6:	4b1c      	ldr	r3, [pc, #112]	; (8001438 <MX_USART3_UART_Init+0x90>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80013cc:	4b1a      	ldr	r3, [pc, #104]	; (8001438 <MX_USART3_UART_Init+0x90>)
 80013ce:	220c      	movs	r2, #12
 80013d0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013d2:	4b19      	ldr	r3, [pc, #100]	; (8001438 <MX_USART3_UART_Init+0x90>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80013d8:	4b17      	ldr	r3, [pc, #92]	; (8001438 <MX_USART3_UART_Init+0x90>)
 80013da:	2200      	movs	r2, #0
 80013dc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013de:	4b16      	ldr	r3, [pc, #88]	; (8001438 <MX_USART3_UART_Init+0x90>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013e4:	4b14      	ldr	r3, [pc, #80]	; (8001438 <MX_USART3_UART_Init+0x90>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013ea:	4b13      	ldr	r3, [pc, #76]	; (8001438 <MX_USART3_UART_Init+0x90>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80013f0:	4811      	ldr	r0, [pc, #68]	; (8001438 <MX_USART3_UART_Init+0x90>)
 80013f2:	f007 fbc7 	bl	8008b84 <HAL_UART_Init>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80013fc:	f7ff fd3c 	bl	8000e78 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001400:	2100      	movs	r1, #0
 8001402:	480d      	ldr	r0, [pc, #52]	; (8001438 <MX_USART3_UART_Init+0x90>)
 8001404:	f008 fbf7 	bl	8009bf6 <HAL_UARTEx_SetTxFifoThreshold>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800140e:	f7ff fd33 	bl	8000e78 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001412:	2100      	movs	r1, #0
 8001414:	4808      	ldr	r0, [pc, #32]	; (8001438 <MX_USART3_UART_Init+0x90>)
 8001416:	f008 fc2c 	bl	8009c72 <HAL_UARTEx_SetRxFifoThreshold>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001420:	f7ff fd2a 	bl	8000e78 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001424:	4804      	ldr	r0, [pc, #16]	; (8001438 <MX_USART3_UART_Init+0x90>)
 8001426:	f008 fbad 	bl	8009b84 <HAL_UARTEx_DisableFifoMode>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001430:	f7ff fd22 	bl	8000e78 <Error_Handler>
  }

}
 8001434:	bf00      	nop
 8001436:	bd80      	pop	{r7, pc}
 8001438:	24009784 	.word	0x24009784
 800143c:	40004800 	.word	0x40004800

08001440 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0

  huart6.Instance = USART6;
 8001444:	4b22      	ldr	r3, [pc, #136]	; (80014d0 <MX_USART6_UART_Init+0x90>)
 8001446:	4a23      	ldr	r2, [pc, #140]	; (80014d4 <MX_USART6_UART_Init+0x94>)
 8001448:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800144a:	4b21      	ldr	r3, [pc, #132]	; (80014d0 <MX_USART6_UART_Init+0x90>)
 800144c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001450:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001452:	4b1f      	ldr	r3, [pc, #124]	; (80014d0 <MX_USART6_UART_Init+0x90>)
 8001454:	2200      	movs	r2, #0
 8001456:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001458:	4b1d      	ldr	r3, [pc, #116]	; (80014d0 <MX_USART6_UART_Init+0x90>)
 800145a:	2200      	movs	r2, #0
 800145c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800145e:	4b1c      	ldr	r3, [pc, #112]	; (80014d0 <MX_USART6_UART_Init+0x90>)
 8001460:	2200      	movs	r2, #0
 8001462:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001464:	4b1a      	ldr	r3, [pc, #104]	; (80014d0 <MX_USART6_UART_Init+0x90>)
 8001466:	220c      	movs	r2, #12
 8001468:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800146a:	4b19      	ldr	r3, [pc, #100]	; (80014d0 <MX_USART6_UART_Init+0x90>)
 800146c:	2200      	movs	r2, #0
 800146e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001470:	4b17      	ldr	r3, [pc, #92]	; (80014d0 <MX_USART6_UART_Init+0x90>)
 8001472:	2200      	movs	r2, #0
 8001474:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001476:	4b16      	ldr	r3, [pc, #88]	; (80014d0 <MX_USART6_UART_Init+0x90>)
 8001478:	2200      	movs	r2, #0
 800147a:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800147c:	4b14      	ldr	r3, [pc, #80]	; (80014d0 <MX_USART6_UART_Init+0x90>)
 800147e:	2200      	movs	r2, #0
 8001480:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001482:	4b13      	ldr	r3, [pc, #76]	; (80014d0 <MX_USART6_UART_Init+0x90>)
 8001484:	2200      	movs	r2, #0
 8001486:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001488:	4811      	ldr	r0, [pc, #68]	; (80014d0 <MX_USART6_UART_Init+0x90>)
 800148a:	f007 fb7b 	bl	8008b84 <HAL_UART_Init>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8001494:	f7ff fcf0 	bl	8000e78 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001498:	2100      	movs	r1, #0
 800149a:	480d      	ldr	r0, [pc, #52]	; (80014d0 <MX_USART6_UART_Init+0x90>)
 800149c:	f008 fbab 	bl	8009bf6 <HAL_UARTEx_SetTxFifoThreshold>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 80014a6:	f7ff fce7 	bl	8000e78 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014aa:	2100      	movs	r1, #0
 80014ac:	4808      	ldr	r0, [pc, #32]	; (80014d0 <MX_USART6_UART_Init+0x90>)
 80014ae:	f008 fbe0 	bl	8009c72 <HAL_UARTEx_SetRxFifoThreshold>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 80014b8:	f7ff fcde 	bl	8000e78 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 80014bc:	4804      	ldr	r0, [pc, #16]	; (80014d0 <MX_USART6_UART_Init+0x90>)
 80014be:	f008 fb61 	bl	8009b84 <HAL_UARTEx_DisableFifoMode>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 80014c8:	f7ff fcd6 	bl	8000e78 <Error_Handler>
  }

}
 80014cc:	bf00      	nop
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	24009af4 	.word	0x24009af4
 80014d4:	40011400 	.word	0x40011400

080014d8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b08e      	sub	sp, #56	; 0x38
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	605a      	str	r2, [r3, #4]
 80014ea:	609a      	str	r2, [r3, #8]
 80014ec:	60da      	str	r2, [r3, #12]
 80014ee:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a90      	ldr	r2, [pc, #576]	; (8001738 <HAL_UART_MspInit+0x260>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	f040 808c 	bne.w	8001614 <HAL_UART_MspInit+0x13c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014fc:	4b8f      	ldr	r3, [pc, #572]	; (800173c <HAL_UART_MspInit+0x264>)
 80014fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001502:	4a8e      	ldr	r2, [pc, #568]	; (800173c <HAL_UART_MspInit+0x264>)
 8001504:	f043 0310 	orr.w	r3, r3, #16
 8001508:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800150c:	4b8b      	ldr	r3, [pc, #556]	; (800173c <HAL_UART_MspInit+0x264>)
 800150e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001512:	f003 0310 	and.w	r3, r3, #16
 8001516:	623b      	str	r3, [r7, #32]
 8001518:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800151a:	4b88      	ldr	r3, [pc, #544]	; (800173c <HAL_UART_MspInit+0x264>)
 800151c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001520:	4a86      	ldr	r2, [pc, #536]	; (800173c <HAL_UART_MspInit+0x264>)
 8001522:	f043 0301 	orr.w	r3, r3, #1
 8001526:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800152a:	4b84      	ldr	r3, [pc, #528]	; (800173c <HAL_UART_MspInit+0x264>)
 800152c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001530:	f003 0301 	and.w	r3, r3, #1
 8001534:	61fb      	str	r3, [r7, #28]
 8001536:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001538:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800153c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153e:	2302      	movs	r3, #2
 8001540:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001542:	2300      	movs	r3, #0
 8001544:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001546:	2300      	movs	r3, #0
 8001548:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800154a:	2307      	movs	r3, #7
 800154c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800154e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001552:	4619      	mov	r1, r3
 8001554:	487a      	ldr	r0, [pc, #488]	; (8001740 <HAL_UART_MspInit+0x268>)
 8001556:	f004 f9d5 	bl	8005904 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream0;
 800155a:	4b7a      	ldr	r3, [pc, #488]	; (8001744 <HAL_UART_MspInit+0x26c>)
 800155c:	4a7a      	ldr	r2, [pc, #488]	; (8001748 <HAL_UART_MspInit+0x270>)
 800155e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001560:	4b78      	ldr	r3, [pc, #480]	; (8001744 <HAL_UART_MspInit+0x26c>)
 8001562:	2229      	movs	r2, #41	; 0x29
 8001564:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001566:	4b77      	ldr	r3, [pc, #476]	; (8001744 <HAL_UART_MspInit+0x26c>)
 8001568:	2200      	movs	r2, #0
 800156a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800156c:	4b75      	ldr	r3, [pc, #468]	; (8001744 <HAL_UART_MspInit+0x26c>)
 800156e:	2200      	movs	r2, #0
 8001570:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001572:	4b74      	ldr	r3, [pc, #464]	; (8001744 <HAL_UART_MspInit+0x26c>)
 8001574:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001578:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800157a:	4b72      	ldr	r3, [pc, #456]	; (8001744 <HAL_UART_MspInit+0x26c>)
 800157c:	2200      	movs	r2, #0
 800157e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001580:	4b70      	ldr	r3, [pc, #448]	; (8001744 <HAL_UART_MspInit+0x26c>)
 8001582:	2200      	movs	r2, #0
 8001584:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001586:	4b6f      	ldr	r3, [pc, #444]	; (8001744 <HAL_UART_MspInit+0x26c>)
 8001588:	2200      	movs	r2, #0
 800158a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800158c:	4b6d      	ldr	r3, [pc, #436]	; (8001744 <HAL_UART_MspInit+0x26c>)
 800158e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001592:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001594:	4b6b      	ldr	r3, [pc, #428]	; (8001744 <HAL_UART_MspInit+0x26c>)
 8001596:	2200      	movs	r2, #0
 8001598:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800159a:	486a      	ldr	r0, [pc, #424]	; (8001744 <HAL_UART_MspInit+0x26c>)
 800159c:	f000 fe5e 	bl	800225c <HAL_DMA_Init>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <HAL_UART_MspInit+0xd2>
    {
      Error_Handler();
 80015a6:	f7ff fc67 	bl	8000e78 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4a65      	ldr	r2, [pc, #404]	; (8001744 <HAL_UART_MspInit+0x26c>)
 80015ae:	679a      	str	r2, [r3, #120]	; 0x78
 80015b0:	4a64      	ldr	r2, [pc, #400]	; (8001744 <HAL_UART_MspInit+0x26c>)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream1;
 80015b6:	4b65      	ldr	r3, [pc, #404]	; (800174c <HAL_UART_MspInit+0x274>)
 80015b8:	4a65      	ldr	r2, [pc, #404]	; (8001750 <HAL_UART_MspInit+0x278>)
 80015ba:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80015bc:	4b63      	ldr	r3, [pc, #396]	; (800174c <HAL_UART_MspInit+0x274>)
 80015be:	222a      	movs	r2, #42	; 0x2a
 80015c0:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015c2:	4b62      	ldr	r3, [pc, #392]	; (800174c <HAL_UART_MspInit+0x274>)
 80015c4:	2240      	movs	r2, #64	; 0x40
 80015c6:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015c8:	4b60      	ldr	r3, [pc, #384]	; (800174c <HAL_UART_MspInit+0x274>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80015ce:	4b5f      	ldr	r3, [pc, #380]	; (800174c <HAL_UART_MspInit+0x274>)
 80015d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015d4:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015d6:	4b5d      	ldr	r3, [pc, #372]	; (800174c <HAL_UART_MspInit+0x274>)
 80015d8:	2200      	movs	r2, #0
 80015da:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015dc:	4b5b      	ldr	r3, [pc, #364]	; (800174c <HAL_UART_MspInit+0x274>)
 80015de:	2200      	movs	r2, #0
 80015e0:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80015e2:	4b5a      	ldr	r3, [pc, #360]	; (800174c <HAL_UART_MspInit+0x274>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80015e8:	4b58      	ldr	r3, [pc, #352]	; (800174c <HAL_UART_MspInit+0x274>)
 80015ea:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80015ee:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015f0:	4b56      	ldr	r3, [pc, #344]	; (800174c <HAL_UART_MspInit+0x274>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80015f6:	4855      	ldr	r0, [pc, #340]	; (800174c <HAL_UART_MspInit+0x274>)
 80015f8:	f000 fe30 	bl	800225c <HAL_DMA_Init>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8001602:	f7ff fc39 	bl	8000e78 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4a50      	ldr	r2, [pc, #320]	; (800174c <HAL_UART_MspInit+0x274>)
 800160a:	675a      	str	r2, [r3, #116]	; 0x74
 800160c:	4a4f      	ldr	r2, [pc, #316]	; (800174c <HAL_UART_MspInit+0x274>)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8001612:	e1aa      	b.n	800196a <HAL_UART_MspInit+0x492>
  else if(uartHandle->Instance==USART2)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a4e      	ldr	r2, [pc, #312]	; (8001754 <HAL_UART_MspInit+0x27c>)
 800161a:	4293      	cmp	r3, r2
 800161c:	f040 80a6 	bne.w	800176c <HAL_UART_MspInit+0x294>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001620:	4b46      	ldr	r3, [pc, #280]	; (800173c <HAL_UART_MspInit+0x264>)
 8001622:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001626:	4a45      	ldr	r2, [pc, #276]	; (800173c <HAL_UART_MspInit+0x264>)
 8001628:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800162c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001630:	4b42      	ldr	r3, [pc, #264]	; (800173c <HAL_UART_MspInit+0x264>)
 8001632:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800163a:	61bb      	str	r3, [r7, #24]
 800163c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800163e:	4b3f      	ldr	r3, [pc, #252]	; (800173c <HAL_UART_MspInit+0x264>)
 8001640:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001644:	4a3d      	ldr	r2, [pc, #244]	; (800173c <HAL_UART_MspInit+0x264>)
 8001646:	f043 0308 	orr.w	r3, r3, #8
 800164a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800164e:	4b3b      	ldr	r3, [pc, #236]	; (800173c <HAL_UART_MspInit+0x264>)
 8001650:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001654:	f003 0308 	and.w	r3, r3, #8
 8001658:	617b      	str	r3, [r7, #20]
 800165a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800165c:	2360      	movs	r3, #96	; 0x60
 800165e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001660:	2302      	movs	r3, #2
 8001662:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001664:	2300      	movs	r3, #0
 8001666:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001668:	2300      	movs	r3, #0
 800166a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800166c:	2307      	movs	r3, #7
 800166e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001670:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001674:	4619      	mov	r1, r3
 8001676:	4838      	ldr	r0, [pc, #224]	; (8001758 <HAL_UART_MspInit+0x280>)
 8001678:	f004 f944 	bl	8005904 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA2_Stream4;
 800167c:	4b37      	ldr	r3, [pc, #220]	; (800175c <HAL_UART_MspInit+0x284>)
 800167e:	4a38      	ldr	r2, [pc, #224]	; (8001760 <HAL_UART_MspInit+0x288>)
 8001680:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8001682:	4b36      	ldr	r3, [pc, #216]	; (800175c <HAL_UART_MspInit+0x284>)
 8001684:	222b      	movs	r2, #43	; 0x2b
 8001686:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001688:	4b34      	ldr	r3, [pc, #208]	; (800175c <HAL_UART_MspInit+0x284>)
 800168a:	2200      	movs	r2, #0
 800168c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800168e:	4b33      	ldr	r3, [pc, #204]	; (800175c <HAL_UART_MspInit+0x284>)
 8001690:	2200      	movs	r2, #0
 8001692:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001694:	4b31      	ldr	r3, [pc, #196]	; (800175c <HAL_UART_MspInit+0x284>)
 8001696:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800169a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800169c:	4b2f      	ldr	r3, [pc, #188]	; (800175c <HAL_UART_MspInit+0x284>)
 800169e:	2200      	movs	r2, #0
 80016a0:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016a2:	4b2e      	ldr	r3, [pc, #184]	; (800175c <HAL_UART_MspInit+0x284>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80016a8:	4b2c      	ldr	r3, [pc, #176]	; (800175c <HAL_UART_MspInit+0x284>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80016ae:	4b2b      	ldr	r3, [pc, #172]	; (800175c <HAL_UART_MspInit+0x284>)
 80016b0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80016b4:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016b6:	4b29      	ldr	r3, [pc, #164]	; (800175c <HAL_UART_MspInit+0x284>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80016bc:	4827      	ldr	r0, [pc, #156]	; (800175c <HAL_UART_MspInit+0x284>)
 80016be:	f000 fdcd 	bl	800225c <HAL_DMA_Init>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <HAL_UART_MspInit+0x1f4>
      Error_Handler();
 80016c8:	f7ff fbd6 	bl	8000e78 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	4a23      	ldr	r2, [pc, #140]	; (800175c <HAL_UART_MspInit+0x284>)
 80016d0:	679a      	str	r2, [r3, #120]	; 0x78
 80016d2:	4a22      	ldr	r2, [pc, #136]	; (800175c <HAL_UART_MspInit+0x284>)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA2_Stream5;
 80016d8:	4b22      	ldr	r3, [pc, #136]	; (8001764 <HAL_UART_MspInit+0x28c>)
 80016da:	4a23      	ldr	r2, [pc, #140]	; (8001768 <HAL_UART_MspInit+0x290>)
 80016dc:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80016de:	4b21      	ldr	r3, [pc, #132]	; (8001764 <HAL_UART_MspInit+0x28c>)
 80016e0:	222c      	movs	r2, #44	; 0x2c
 80016e2:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016e4:	4b1f      	ldr	r3, [pc, #124]	; (8001764 <HAL_UART_MspInit+0x28c>)
 80016e6:	2240      	movs	r2, #64	; 0x40
 80016e8:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016ea:	4b1e      	ldr	r3, [pc, #120]	; (8001764 <HAL_UART_MspInit+0x28c>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80016f0:	4b1c      	ldr	r3, [pc, #112]	; (8001764 <HAL_UART_MspInit+0x28c>)
 80016f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016f6:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016f8:	4b1a      	ldr	r3, [pc, #104]	; (8001764 <HAL_UART_MspInit+0x28c>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016fe:	4b19      	ldr	r3, [pc, #100]	; (8001764 <HAL_UART_MspInit+0x28c>)
 8001700:	2200      	movs	r2, #0
 8001702:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001704:	4b17      	ldr	r3, [pc, #92]	; (8001764 <HAL_UART_MspInit+0x28c>)
 8001706:	2200      	movs	r2, #0
 8001708:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800170a:	4b16      	ldr	r3, [pc, #88]	; (8001764 <HAL_UART_MspInit+0x28c>)
 800170c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001710:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001712:	4b14      	ldr	r3, [pc, #80]	; (8001764 <HAL_UART_MspInit+0x28c>)
 8001714:	2200      	movs	r2, #0
 8001716:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001718:	4812      	ldr	r0, [pc, #72]	; (8001764 <HAL_UART_MspInit+0x28c>)
 800171a:	f000 fd9f 	bl	800225c <HAL_DMA_Init>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <HAL_UART_MspInit+0x250>
      Error_Handler();
 8001724:	f7ff fba8 	bl	8000e78 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	4a0e      	ldr	r2, [pc, #56]	; (8001764 <HAL_UART_MspInit+0x28c>)
 800172c:	675a      	str	r2, [r3, #116]	; 0x74
 800172e:	4a0d      	ldr	r2, [pc, #52]	; (8001764 <HAL_UART_MspInit+0x28c>)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001734:	e119      	b.n	800196a <HAL_UART_MspInit+0x492>
 8001736:	bf00      	nop
 8001738:	40011000 	.word	0x40011000
 800173c:	58024400 	.word	0x58024400
 8001740:	58020000 	.word	0x58020000
 8001744:	24009978 	.word	0x24009978
 8001748:	40020410 	.word	0x40020410
 800174c:	24009888 	.word	0x24009888
 8001750:	40020428 	.word	0x40020428
 8001754:	40004400 	.word	0x40004400
 8001758:	58020c00 	.word	0x58020c00
 800175c:	2400961c 	.word	0x2400961c
 8001760:	40020470 	.word	0x40020470
 8001764:	240099f0 	.word	0x240099f0
 8001768:	40020488 	.word	0x40020488
  else if(uartHandle->Instance==USART3)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a80      	ldr	r2, [pc, #512]	; (8001974 <HAL_UART_MspInit+0x49c>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d16b      	bne.n	800184e <HAL_UART_MspInit+0x376>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001776:	4b80      	ldr	r3, [pc, #512]	; (8001978 <HAL_UART_MspInit+0x4a0>)
 8001778:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800177c:	4a7e      	ldr	r2, [pc, #504]	; (8001978 <HAL_UART_MspInit+0x4a0>)
 800177e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001782:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001786:	4b7c      	ldr	r3, [pc, #496]	; (8001978 <HAL_UART_MspInit+0x4a0>)
 8001788:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800178c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001790:	613b      	str	r3, [r7, #16]
 8001792:	693b      	ldr	r3, [r7, #16]
    hdma_usart3_rx.Instance = DMA2_Stream2;
 8001794:	4b79      	ldr	r3, [pc, #484]	; (800197c <HAL_UART_MspInit+0x4a4>)
 8001796:	4a7a      	ldr	r2, [pc, #488]	; (8001980 <HAL_UART_MspInit+0x4a8>)
 8001798:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 800179a:	4b78      	ldr	r3, [pc, #480]	; (800197c <HAL_UART_MspInit+0x4a4>)
 800179c:	222d      	movs	r2, #45	; 0x2d
 800179e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017a0:	4b76      	ldr	r3, [pc, #472]	; (800197c <HAL_UART_MspInit+0x4a4>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017a6:	4b75      	ldr	r3, [pc, #468]	; (800197c <HAL_UART_MspInit+0x4a4>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80017ac:	4b73      	ldr	r3, [pc, #460]	; (800197c <HAL_UART_MspInit+0x4a4>)
 80017ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017b2:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017b4:	4b71      	ldr	r3, [pc, #452]	; (800197c <HAL_UART_MspInit+0x4a4>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017ba:	4b70      	ldr	r3, [pc, #448]	; (800197c <HAL_UART_MspInit+0x4a4>)
 80017bc:	2200      	movs	r2, #0
 80017be:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80017c0:	4b6e      	ldr	r3, [pc, #440]	; (800197c <HAL_UART_MspInit+0x4a4>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80017c6:	4b6d      	ldr	r3, [pc, #436]	; (800197c <HAL_UART_MspInit+0x4a4>)
 80017c8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80017cc:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017ce:	4b6b      	ldr	r3, [pc, #428]	; (800197c <HAL_UART_MspInit+0x4a4>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80017d4:	4869      	ldr	r0, [pc, #420]	; (800197c <HAL_UART_MspInit+0x4a4>)
 80017d6:	f000 fd41 	bl	800225c <HAL_DMA_Init>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <HAL_UART_MspInit+0x30c>
      Error_Handler();
 80017e0:	f7ff fb4a 	bl	8000e78 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	4a65      	ldr	r2, [pc, #404]	; (800197c <HAL_UART_MspInit+0x4a4>)
 80017e8:	679a      	str	r2, [r3, #120]	; 0x78
 80017ea:	4a64      	ldr	r2, [pc, #400]	; (800197c <HAL_UART_MspInit+0x4a4>)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA2_Stream3;
 80017f0:	4b64      	ldr	r3, [pc, #400]	; (8001984 <HAL_UART_MspInit+0x4ac>)
 80017f2:	4a65      	ldr	r2, [pc, #404]	; (8001988 <HAL_UART_MspInit+0x4b0>)
 80017f4:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80017f6:	4b63      	ldr	r3, [pc, #396]	; (8001984 <HAL_UART_MspInit+0x4ac>)
 80017f8:	222e      	movs	r2, #46	; 0x2e
 80017fa:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017fc:	4b61      	ldr	r3, [pc, #388]	; (8001984 <HAL_UART_MspInit+0x4ac>)
 80017fe:	2240      	movs	r2, #64	; 0x40
 8001800:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001802:	4b60      	ldr	r3, [pc, #384]	; (8001984 <HAL_UART_MspInit+0x4ac>)
 8001804:	2200      	movs	r2, #0
 8001806:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001808:	4b5e      	ldr	r3, [pc, #376]	; (8001984 <HAL_UART_MspInit+0x4ac>)
 800180a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800180e:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001810:	4b5c      	ldr	r3, [pc, #368]	; (8001984 <HAL_UART_MspInit+0x4ac>)
 8001812:	2200      	movs	r2, #0
 8001814:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001816:	4b5b      	ldr	r3, [pc, #364]	; (8001984 <HAL_UART_MspInit+0x4ac>)
 8001818:	2200      	movs	r2, #0
 800181a:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800181c:	4b59      	ldr	r3, [pc, #356]	; (8001984 <HAL_UART_MspInit+0x4ac>)
 800181e:	2200      	movs	r2, #0
 8001820:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001822:	4b58      	ldr	r3, [pc, #352]	; (8001984 <HAL_UART_MspInit+0x4ac>)
 8001824:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001828:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800182a:	4b56      	ldr	r3, [pc, #344]	; (8001984 <HAL_UART_MspInit+0x4ac>)
 800182c:	2200      	movs	r2, #0
 800182e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001830:	4854      	ldr	r0, [pc, #336]	; (8001984 <HAL_UART_MspInit+0x4ac>)
 8001832:	f000 fd13 	bl	800225c <HAL_DMA_Init>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <HAL_UART_MspInit+0x368>
      Error_Handler();
 800183c:	f7ff fb1c 	bl	8000e78 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	4a50      	ldr	r2, [pc, #320]	; (8001984 <HAL_UART_MspInit+0x4ac>)
 8001844:	675a      	str	r2, [r3, #116]	; 0x74
 8001846:	4a4f      	ldr	r2, [pc, #316]	; (8001984 <HAL_UART_MspInit+0x4ac>)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800184c:	e08d      	b.n	800196a <HAL_UART_MspInit+0x492>
  else if(uartHandle->Instance==USART6)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a4e      	ldr	r2, [pc, #312]	; (800198c <HAL_UART_MspInit+0x4b4>)
 8001854:	4293      	cmp	r3, r2
 8001856:	f040 8088 	bne.w	800196a <HAL_UART_MspInit+0x492>
    __HAL_RCC_USART6_CLK_ENABLE();
 800185a:	4b47      	ldr	r3, [pc, #284]	; (8001978 <HAL_UART_MspInit+0x4a0>)
 800185c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001860:	4a45      	ldr	r2, [pc, #276]	; (8001978 <HAL_UART_MspInit+0x4a0>)
 8001862:	f043 0320 	orr.w	r3, r3, #32
 8001866:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800186a:	4b43      	ldr	r3, [pc, #268]	; (8001978 <HAL_UART_MspInit+0x4a0>)
 800186c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001870:	f003 0320 	and.w	r3, r3, #32
 8001874:	60fb      	str	r3, [r7, #12]
 8001876:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001878:	4b3f      	ldr	r3, [pc, #252]	; (8001978 <HAL_UART_MspInit+0x4a0>)
 800187a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800187e:	4a3e      	ldr	r2, [pc, #248]	; (8001978 <HAL_UART_MspInit+0x4a0>)
 8001880:	f043 0304 	orr.w	r3, r3, #4
 8001884:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001888:	4b3b      	ldr	r3, [pc, #236]	; (8001978 <HAL_UART_MspInit+0x4a0>)
 800188a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800188e:	f003 0304 	and.w	r3, r3, #4
 8001892:	60bb      	str	r3, [r7, #8]
 8001894:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001896:	23c0      	movs	r3, #192	; 0xc0
 8001898:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800189a:	2302      	movs	r3, #2
 800189c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189e:	2300      	movs	r3, #0
 80018a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a2:	2300      	movs	r3, #0
 80018a4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 80018a6:	2307      	movs	r3, #7
 80018a8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018ae:	4619      	mov	r1, r3
 80018b0:	4837      	ldr	r0, [pc, #220]	; (8001990 <HAL_UART_MspInit+0x4b8>)
 80018b2:	f004 f827 	bl	8005904 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream6;
 80018b6:	4b37      	ldr	r3, [pc, #220]	; (8001994 <HAL_UART_MspInit+0x4bc>)
 80018b8:	4a37      	ldr	r2, [pc, #220]	; (8001998 <HAL_UART_MspInit+0x4c0>)
 80018ba:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Request = DMA_REQUEST_USART6_RX;
 80018bc:	4b35      	ldr	r3, [pc, #212]	; (8001994 <HAL_UART_MspInit+0x4bc>)
 80018be:	2247      	movs	r2, #71	; 0x47
 80018c0:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018c2:	4b34      	ldr	r3, [pc, #208]	; (8001994 <HAL_UART_MspInit+0x4bc>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018c8:	4b32      	ldr	r3, [pc, #200]	; (8001994 <HAL_UART_MspInit+0x4bc>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80018ce:	4b31      	ldr	r3, [pc, #196]	; (8001994 <HAL_UART_MspInit+0x4bc>)
 80018d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018d4:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018d6:	4b2f      	ldr	r3, [pc, #188]	; (8001994 <HAL_UART_MspInit+0x4bc>)
 80018d8:	2200      	movs	r2, #0
 80018da:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018dc:	4b2d      	ldr	r3, [pc, #180]	; (8001994 <HAL_UART_MspInit+0x4bc>)
 80018de:	2200      	movs	r2, #0
 80018e0:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 80018e2:	4b2c      	ldr	r3, [pc, #176]	; (8001994 <HAL_UART_MspInit+0x4bc>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 80018e8:	4b2a      	ldr	r3, [pc, #168]	; (8001994 <HAL_UART_MspInit+0x4bc>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018ee:	4b29      	ldr	r3, [pc, #164]	; (8001994 <HAL_UART_MspInit+0x4bc>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80018f4:	4827      	ldr	r0, [pc, #156]	; (8001994 <HAL_UART_MspInit+0x4bc>)
 80018f6:	f000 fcb1 	bl	800225c <HAL_DMA_Init>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <HAL_UART_MspInit+0x42c>
      Error_Handler();
 8001900:	f7ff faba 	bl	8000e78 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	4a23      	ldr	r2, [pc, #140]	; (8001994 <HAL_UART_MspInit+0x4bc>)
 8001908:	679a      	str	r2, [r3, #120]	; 0x78
 800190a:	4a22      	ldr	r2, [pc, #136]	; (8001994 <HAL_UART_MspInit+0x4bc>)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream7;
 8001910:	4b22      	ldr	r3, [pc, #136]	; (800199c <HAL_UART_MspInit+0x4c4>)
 8001912:	4a23      	ldr	r2, [pc, #140]	; (80019a0 <HAL_UART_MspInit+0x4c8>)
 8001914:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Request = DMA_REQUEST_USART6_TX;
 8001916:	4b21      	ldr	r3, [pc, #132]	; (800199c <HAL_UART_MspInit+0x4c4>)
 8001918:	2248      	movs	r2, #72	; 0x48
 800191a:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800191c:	4b1f      	ldr	r3, [pc, #124]	; (800199c <HAL_UART_MspInit+0x4c4>)
 800191e:	2240      	movs	r2, #64	; 0x40
 8001920:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001922:	4b1e      	ldr	r3, [pc, #120]	; (800199c <HAL_UART_MspInit+0x4c4>)
 8001924:	2200      	movs	r2, #0
 8001926:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001928:	4b1c      	ldr	r3, [pc, #112]	; (800199c <HAL_UART_MspInit+0x4c4>)
 800192a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800192e:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001930:	4b1a      	ldr	r3, [pc, #104]	; (800199c <HAL_UART_MspInit+0x4c4>)
 8001932:	2200      	movs	r2, #0
 8001934:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001936:	4b19      	ldr	r3, [pc, #100]	; (800199c <HAL_UART_MspInit+0x4c4>)
 8001938:	2200      	movs	r2, #0
 800193a:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 800193c:	4b17      	ldr	r3, [pc, #92]	; (800199c <HAL_UART_MspInit+0x4c4>)
 800193e:	2200      	movs	r2, #0
 8001940:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001942:	4b16      	ldr	r3, [pc, #88]	; (800199c <HAL_UART_MspInit+0x4c4>)
 8001944:	2200      	movs	r2, #0
 8001946:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001948:	4b14      	ldr	r3, [pc, #80]	; (800199c <HAL_UART_MspInit+0x4c4>)
 800194a:	2200      	movs	r2, #0
 800194c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 800194e:	4813      	ldr	r0, [pc, #76]	; (800199c <HAL_UART_MspInit+0x4c4>)
 8001950:	f000 fc84 	bl	800225c <HAL_DMA_Init>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <HAL_UART_MspInit+0x486>
      Error_Handler();
 800195a:	f7ff fa8d 	bl	8000e78 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4a0e      	ldr	r2, [pc, #56]	; (800199c <HAL_UART_MspInit+0x4c4>)
 8001962:	675a      	str	r2, [r3, #116]	; 0x74
 8001964:	4a0d      	ldr	r2, [pc, #52]	; (800199c <HAL_UART_MspInit+0x4c4>)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6393      	str	r3, [r2, #56]	; 0x38
}
 800196a:	bf00      	nop
 800196c:	3738      	adds	r7, #56	; 0x38
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	40004800 	.word	0x40004800
 8001978:	58024400 	.word	0x58024400
 800197c:	2400970c 	.word	0x2400970c
 8001980:	40020440 	.word	0x40020440
 8001984:	24009810 	.word	0x24009810
 8001988:	40020458 	.word	0x40020458
 800198c:	40011400 	.word	0x40011400
 8001990:	58020800 	.word	0x58020800
 8001994:	24009694 	.word	0x24009694
 8001998:	400204a0 	.word	0x400204a0
 800199c:	24009900 	.word	0x24009900
 80019a0:	400204b8 	.word	0x400204b8

080019a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   sp, =_estack      /* set stack pointer */
 80019a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019dc <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80019a8:	f7fe fe7c 	bl	80006a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80019ac:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80019ae:	e003      	b.n	80019b8 <LoopCopyDataInit>

080019b0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80019b0:	4b0b      	ldr	r3, [pc, #44]	; (80019e0 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 80019b2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80019b4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80019b6:	3104      	adds	r1, #4

080019b8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80019b8:	480a      	ldr	r0, [pc, #40]	; (80019e4 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 80019ba:	4b0b      	ldr	r3, [pc, #44]	; (80019e8 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 80019bc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80019be:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80019c0:	d3f6      	bcc.n	80019b0 <CopyDataInit>
  ldr  r2, =_sbss
 80019c2:	4a0a      	ldr	r2, [pc, #40]	; (80019ec <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 80019c4:	e002      	b.n	80019cc <LoopFillZerobss>

080019c6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80019c6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80019c8:	f842 3b04 	str.w	r3, [r2], #4

080019cc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80019cc:	4b08      	ldr	r3, [pc, #32]	; (80019f0 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 80019ce:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80019d0:	d3f9      	bcc.n	80019c6 <FillZerobss>
   
/* Call static constructors */
    bl __libc_init_array
 80019d2:	f018 feeb 	bl	801a7ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019d6:	f7ff f8bf 	bl	8000b58 <main>
  bx  lr    
 80019da:	4770      	bx	lr
   ldr   sp, =_estack      /* set stack pointer */
 80019dc:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 80019e0:	08020a04 	.word	0x08020a04
  ldr  r0, =_sdata
 80019e4:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80019e8:	2400020c 	.word	0x2400020c
  ldr  r2, =_sbss
 80019ec:	2400020c 	.word	0x2400020c
  ldr  r3, = _ebss
 80019f0:	2400ce88 	.word	0x2400ce88

080019f4 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019f4:	e7fe      	b.n	80019f4 <ADC3_IRQHandler>

080019f6 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80019f6:	b480      	push	{r7}
 80019f8:	b083      	sub	sp, #12
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
 80019fe:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d00b      	beq.n	8001a1e <LAN8742_RegisterBusIO+0x28>
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	68db      	ldr	r3, [r3, #12]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d007      	beq.n	8001a1e <LAN8742_RegisterBusIO+0x28>
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d003      	beq.n	8001a1e <LAN8742_RegisterBusIO+0x28>
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	691b      	ldr	r3, [r3, #16]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d102      	bne.n	8001a24 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001a1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a22:	e014      	b.n	8001a4e <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	685a      	ldr	r2, [r3, #4]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	68da      	ldr	r2, [r3, #12]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	689a      	ldr	r2, [r3, #8]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	691a      	ldr	r2, [r3, #16]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8001a4c:	2300      	movs	r3, #0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr

08001a5a <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	b086      	sub	sp, #24
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8001a62:	2300      	movs	r3, #0
 8001a64:	60fb      	str	r3, [r7, #12]
 8001a66:	2300      	movs	r3, #0
 8001a68:	60bb      	str	r3, [r7, #8]
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d17c      	bne.n	8001b74 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d002      	beq.n	8001a88 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2220      	movs	r2, #32
 8001a8c:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001a8e:	2300      	movs	r3, #0
 8001a90:	617b      	str	r3, [r7, #20]
 8001a92:	e01c      	b.n	8001ace <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	695b      	ldr	r3, [r3, #20]
 8001a98:	f107 0208 	add.w	r2, r7, #8
 8001a9c:	2112      	movs	r1, #18
 8001a9e:	6978      	ldr	r0, [r7, #20]
 8001aa0:	4798      	blx	r3
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	da03      	bge.n	8001ab0 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8001aa8:	f06f 0304 	mvn.w	r3, #4
 8001aac:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8001aae:	e00b      	b.n	8001ac8 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	f003 031f 	and.w	r3, r3, #31
 8001ab6:	697a      	ldr	r2, [r7, #20]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d105      	bne.n	8001ac8 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	697a      	ldr	r2, [r7, #20]
 8001ac0:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	613b      	str	r3, [r7, #16]
         break;
 8001ac6:	e005      	b.n	8001ad4 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	3301      	adds	r3, #1
 8001acc:	617b      	str	r3, [r7, #20]
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	2b1f      	cmp	r3, #31
 8001ad2:	d9df      	bls.n	8001a94 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	2b1f      	cmp	r3, #31
 8001ada:	d902      	bls.n	8001ae2 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001adc:	f06f 0302 	mvn.w	r3, #2
 8001ae0:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d145      	bne.n	8001b74 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	691b      	ldr	r3, [r3, #16]
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	6810      	ldr	r0, [r2, #0]
 8001af0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001af4:	2100      	movs	r1, #0
 8001af6:	4798      	blx	r3
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	db37      	blt.n	8001b6e <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	695b      	ldr	r3, [r3, #20]
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	6810      	ldr	r0, [r2, #0]
 8001b06:	f107 0208 	add.w	r2, r7, #8
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	4798      	blx	r3
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	db28      	blt.n	8001b66 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	699b      	ldr	r3, [r3, #24]
 8001b18:	4798      	blx	r3
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001b1e:	e01c      	b.n	8001b5a <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	699b      	ldr	r3, [r3, #24]
 8001b24:	4798      	blx	r3
 8001b26:	4603      	mov	r3, r0
 8001b28:	461a      	mov	r2, r3
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001b32:	d80e      	bhi.n	8001b52 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	695b      	ldr	r3, [r3, #20]
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	6810      	ldr	r0, [r2, #0]
 8001b3c:	f107 0208 	add.w	r2, r7, #8
 8001b40:	2100      	movs	r1, #0
 8001b42:	4798      	blx	r3
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	da07      	bge.n	8001b5a <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8001b4a:	f06f 0304 	mvn.w	r3, #4
 8001b4e:	613b      	str	r3, [r7, #16]
                 break;
 8001b50:	e010      	b.n	8001b74 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8001b52:	f06f 0301 	mvn.w	r3, #1
 8001b56:	613b      	str	r3, [r7, #16]
               break;
 8001b58:	e00c      	b.n	8001b74 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d1dd      	bne.n	8001b20 <LAN8742_Init+0xc6>
 8001b64:	e006      	b.n	8001b74 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8001b66:	f06f 0304 	mvn.w	r3, #4
 8001b6a:	613b      	str	r3, [r7, #16]
 8001b6c:	e002      	b.n	8001b74 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8001b6e:	f06f 0303 	mvn.w	r3, #3
 8001b72:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d112      	bne.n	8001ba0 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	699b      	ldr	r3, [r3, #24]
 8001b7e:	4798      	blx	r3
 8001b80:	4603      	mov	r3, r0
 8001b82:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001b84:	bf00      	nop
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	699b      	ldr	r3, [r3, #24]
 8001b8a:	4798      	blx	r3
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	461a      	mov	r2, r3
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001b98:	d9f5      	bls.n	8001b86 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8001ba0:	693b      	ldr	r3, [r7, #16]
 }
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3718      	adds	r7, #24
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b084      	sub	sp, #16
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	695b      	ldr	r3, [r3, #20]
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	6810      	ldr	r0, [r2, #0]
 8001bbe:	f107 020c 	add.w	r2, r7, #12
 8001bc2:	2101      	movs	r1, #1
 8001bc4:	4798      	blx	r3
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	da02      	bge.n	8001bd2 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001bcc:	f06f 0304 	mvn.w	r3, #4
 8001bd0:	e06e      	b.n	8001cb0 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	695b      	ldr	r3, [r3, #20]
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	6810      	ldr	r0, [r2, #0]
 8001bda:	f107 020c 	add.w	r2, r7, #12
 8001bde:	2101      	movs	r1, #1
 8001be0:	4798      	blx	r3
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	da02      	bge.n	8001bee <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001be8:	f06f 0304 	mvn.w	r3, #4
 8001bec:	e060      	b.n	8001cb0 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	f003 0304 	and.w	r3, r3, #4
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d101      	bne.n	8001bfc <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e059      	b.n	8001cb0 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	695b      	ldr	r3, [r3, #20]
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	6810      	ldr	r0, [r2, #0]
 8001c04:	f107 020c 	add.w	r2, r7, #12
 8001c08:	2100      	movs	r1, #0
 8001c0a:	4798      	blx	r3
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	da02      	bge.n	8001c18 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001c12:	f06f 0304 	mvn.w	r3, #4
 8001c16:	e04b      	b.n	8001cb0 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d11b      	bne.n	8001c5a <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d006      	beq.n	8001c3a <LAN8742_GetLinkState+0x90>
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001c36:	2302      	movs	r3, #2
 8001c38:	e03a      	b.n	8001cb0 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001c44:	2303      	movs	r3, #3
 8001c46:	e033      	b.n	8001cb0 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001c52:	2304      	movs	r3, #4
 8001c54:	e02c      	b.n	8001cb0 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001c56:	2305      	movs	r3, #5
 8001c58:	e02a      	b.n	8001cb0 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	695b      	ldr	r3, [r3, #20]
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	6810      	ldr	r0, [r2, #0]
 8001c62:	f107 020c 	add.w	r2, r7, #12
 8001c66:	211f      	movs	r1, #31
 8001c68:	4798      	blx	r3
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	da02      	bge.n	8001c76 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001c70:	f06f 0304 	mvn.w	r3, #4
 8001c74:	e01c      	b.n	8001cb0 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d101      	bne.n	8001c84 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001c80:	2306      	movs	r3, #6
 8001c82:	e015      	b.n	8001cb0 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f003 031c 	and.w	r3, r3, #28
 8001c8a:	2b18      	cmp	r3, #24
 8001c8c:	d101      	bne.n	8001c92 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001c8e:	2302      	movs	r3, #2
 8001c90:	e00e      	b.n	8001cb0 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	f003 031c 	and.w	r3, r3, #28
 8001c98:	2b08      	cmp	r3, #8
 8001c9a:	d101      	bne.n	8001ca0 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	e007      	b.n	8001cb0 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	f003 031c 	and.w	r3, r3, #28
 8001ca6:	2b14      	cmp	r3, #20
 8001ca8:	d101      	bne.n	8001cae <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001caa:	2304      	movs	r3, #4
 8001cac:	e000      	b.n	8001cb0 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001cae:	2305      	movs	r3, #5
    }				
  }
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3710      	adds	r7, #16
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}

08001cb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cbe:	2003      	movs	r0, #3
 8001cc0:	f000 f923 	bl	8001f0a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001cc4:	f004 feaa 	bl	8006a1c <HAL_RCC_GetSysClockFreq>
 8001cc8:	4601      	mov	r1, r0
 8001cca:	4b15      	ldr	r3, [pc, #84]	; (8001d20 <HAL_Init+0x68>)
 8001ccc:	699b      	ldr	r3, [r3, #24]
 8001cce:	0a1b      	lsrs	r3, r3, #8
 8001cd0:	f003 030f 	and.w	r3, r3, #15
 8001cd4:	4a13      	ldr	r2, [pc, #76]	; (8001d24 <HAL_Init+0x6c>)
 8001cd6:	5cd3      	ldrb	r3, [r2, r3]
 8001cd8:	f003 031f 	and.w	r3, r3, #31
 8001cdc:	fa21 f303 	lsr.w	r3, r1, r3
 8001ce0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001ce2:	4b0f      	ldr	r3, [pc, #60]	; (8001d20 <HAL_Init+0x68>)
 8001ce4:	699b      	ldr	r3, [r3, #24]
 8001ce6:	f003 030f 	and.w	r3, r3, #15
 8001cea:	4a0e      	ldr	r2, [pc, #56]	; (8001d24 <HAL_Init+0x6c>)
 8001cec:	5cd3      	ldrb	r3, [r2, r3]
 8001cee:	f003 031f 	and.w	r3, r3, #31
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	fa22 f303 	lsr.w	r3, r2, r3
 8001cf8:	4a0b      	ldr	r2, [pc, #44]	; (8001d28 <HAL_Init+0x70>)
 8001cfa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001cfc:	4a0b      	ldr	r2, [pc, #44]	; (8001d2c <HAL_Init+0x74>)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d02:	2000      	movs	r0, #0
 8001d04:	f7ff f91c 	bl	8000f40 <HAL_InitTick>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d001      	beq.n	8001d12 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e002      	b.n	8001d18 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001d12:	f7ff f8f7 	bl	8000f04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d16:	2300      	movs	r3, #0
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3708      	adds	r7, #8
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	58024400 	.word	0x58024400
 8001d24:	080200cc 	.word	0x080200cc
 8001d28:	24000004 	.word	0x24000004
 8001d2c:	24000000 	.word	0x24000000

08001d30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d34:	4b06      	ldr	r3, [pc, #24]	; (8001d50 <HAL_IncTick+0x20>)
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	461a      	mov	r2, r3
 8001d3a:	4b06      	ldr	r3, [pc, #24]	; (8001d54 <HAL_IncTick+0x24>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4413      	add	r3, r2
 8001d40:	4a04      	ldr	r2, [pc, #16]	; (8001d54 <HAL_IncTick+0x24>)
 8001d42:	6013      	str	r3, [r2, #0]
}
 8001d44:	bf00      	nop
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	2400000c 	.word	0x2400000c
 8001d54:	24009c0c 	.word	0x24009c0c

08001d58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d5c:	4b03      	ldr	r3, [pc, #12]	; (8001d6c <HAL_GetTick+0x14>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	24009c0c 	.word	0x24009c0c

08001d70 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001d74:	4b03      	ldr	r3, [pc, #12]	; (8001d84 <HAL_GetREVID+0x14>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	0c1b      	lsrs	r3, r3, #16
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr
 8001d84:	5c001000 	.word	0x5c001000

08001d88 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001d90:	4b06      	ldr	r3, [pc, #24]	; (8001dac <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001d98:	4904      	ldr	r1, [pc, #16]	; (8001dac <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	604b      	str	r3, [r1, #4]
}
 8001da0:	bf00      	nop
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr
 8001dac:	58000400 	.word	0x58000400

08001db0 <__NVIC_SetPriorityGrouping>:
{
 8001db0:	b480      	push	{r7}
 8001db2:	b085      	sub	sp, #20
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	f003 0307 	and.w	r3, r3, #7
 8001dbe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dc0:	4b0b      	ldr	r3, [pc, #44]	; (8001df0 <__NVIC_SetPriorityGrouping+0x40>)
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dc6:	68ba      	ldr	r2, [r7, #8]
 8001dc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001dcc:	4013      	ands	r3, r2
 8001dce:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001dd8:	4b06      	ldr	r3, [pc, #24]	; (8001df4 <__NVIC_SetPriorityGrouping+0x44>)
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dde:	4a04      	ldr	r2, [pc, #16]	; (8001df0 <__NVIC_SetPriorityGrouping+0x40>)
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	60d3      	str	r3, [r2, #12]
}
 8001de4:	bf00      	nop
 8001de6:	3714      	adds	r7, #20
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr
 8001df0:	e000ed00 	.word	0xe000ed00
 8001df4:	05fa0000 	.word	0x05fa0000

08001df8 <__NVIC_GetPriorityGrouping>:
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dfc:	4b04      	ldr	r3, [pc, #16]	; (8001e10 <__NVIC_GetPriorityGrouping+0x18>)
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	0a1b      	lsrs	r3, r3, #8
 8001e02:	f003 0307 	and.w	r3, r3, #7
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr
 8001e10:	e000ed00 	.word	0xe000ed00

08001e14 <__NVIC_EnableIRQ>:
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001e1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	db0b      	blt.n	8001e3e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e26:	88fb      	ldrh	r3, [r7, #6]
 8001e28:	f003 021f 	and.w	r2, r3, #31
 8001e2c:	4907      	ldr	r1, [pc, #28]	; (8001e4c <__NVIC_EnableIRQ+0x38>)
 8001e2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e32:	095b      	lsrs	r3, r3, #5
 8001e34:	2001      	movs	r0, #1
 8001e36:	fa00 f202 	lsl.w	r2, r0, r2
 8001e3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001e3e:	bf00      	nop
 8001e40:	370c      	adds	r7, #12
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	e000e100 	.word	0xe000e100

08001e50 <__NVIC_SetPriority>:
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	4603      	mov	r3, r0
 8001e58:	6039      	str	r1, [r7, #0]
 8001e5a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001e5c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	db0a      	blt.n	8001e7a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	b2da      	uxtb	r2, r3
 8001e68:	490c      	ldr	r1, [pc, #48]	; (8001e9c <__NVIC_SetPriority+0x4c>)
 8001e6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e6e:	0112      	lsls	r2, r2, #4
 8001e70:	b2d2      	uxtb	r2, r2
 8001e72:	440b      	add	r3, r1
 8001e74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001e78:	e00a      	b.n	8001e90 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	b2da      	uxtb	r2, r3
 8001e7e:	4908      	ldr	r1, [pc, #32]	; (8001ea0 <__NVIC_SetPriority+0x50>)
 8001e80:	88fb      	ldrh	r3, [r7, #6]
 8001e82:	f003 030f 	and.w	r3, r3, #15
 8001e86:	3b04      	subs	r3, #4
 8001e88:	0112      	lsls	r2, r2, #4
 8001e8a:	b2d2      	uxtb	r2, r2
 8001e8c:	440b      	add	r3, r1
 8001e8e:	761a      	strb	r2, [r3, #24]
}
 8001e90:	bf00      	nop
 8001e92:	370c      	adds	r7, #12
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr
 8001e9c:	e000e100 	.word	0xe000e100
 8001ea0:	e000ed00 	.word	0xe000ed00

08001ea4 <NVIC_EncodePriority>:
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b089      	sub	sp, #36	; 0x24
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	60f8      	str	r0, [r7, #12]
 8001eac:	60b9      	str	r1, [r7, #8]
 8001eae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	f003 0307 	and.w	r3, r3, #7
 8001eb6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	f1c3 0307 	rsb	r3, r3, #7
 8001ebe:	2b04      	cmp	r3, #4
 8001ec0:	bf28      	it	cs
 8001ec2:	2304      	movcs	r3, #4
 8001ec4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	3304      	adds	r3, #4
 8001eca:	2b06      	cmp	r3, #6
 8001ecc:	d902      	bls.n	8001ed4 <NVIC_EncodePriority+0x30>
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	3b03      	subs	r3, #3
 8001ed2:	e000      	b.n	8001ed6 <NVIC_EncodePriority+0x32>
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ed8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee2:	43da      	mvns	r2, r3
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	401a      	ands	r2, r3
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001eec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ef6:	43d9      	mvns	r1, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001efc:	4313      	orrs	r3, r2
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3724      	adds	r7, #36	; 0x24
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr

08001f0a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b082      	sub	sp, #8
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f7ff ff4c 	bl	8001db0 <__NVIC_SetPriorityGrouping>
}
 8001f18:	bf00      	nop
 8001f1a:	3708      	adds	r7, #8
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b086      	sub	sp, #24
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	4603      	mov	r3, r0
 8001f28:	60b9      	str	r1, [r7, #8]
 8001f2a:	607a      	str	r2, [r7, #4]
 8001f2c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f2e:	f7ff ff63 	bl	8001df8 <__NVIC_GetPriorityGrouping>
 8001f32:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	68b9      	ldr	r1, [r7, #8]
 8001f38:	6978      	ldr	r0, [r7, #20]
 8001f3a:	f7ff ffb3 	bl	8001ea4 <NVIC_EncodePriority>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001f44:	4611      	mov	r1, r2
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7ff ff82 	bl	8001e50 <__NVIC_SetPriority>
}
 8001f4c:	bf00      	nop
 8001f4e:	3718      	adds	r7, #24
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7ff ff56 	bl	8001e14 <__NVIC_EnableIRQ>
}
 8001f68:	bf00      	nop
 8001f6a:	3708      	adds	r7, #8
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001f74:	f3bf 8f5f 	dmb	sy
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001f78:	4b06      	ldr	r3, [pc, #24]	; (8001f94 <HAL_MPU_Disable+0x24>)
 8001f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7c:	4a05      	ldr	r2, [pc, #20]	; (8001f94 <HAL_MPU_Disable+0x24>)
 8001f7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f82:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001f84:	4b04      	ldr	r3, [pc, #16]	; (8001f98 <HAL_MPU_Disable+0x28>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	605a      	str	r2, [r3, #4]
}
 8001f8a:	bf00      	nop
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr
 8001f94:	e000ed00 	.word	0xe000ed00
 8001f98:	e000ed90 	.word	0xe000ed90

08001f9c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001fa4:	4a0a      	ldr	r2, [pc, #40]	; (8001fd0 <HAL_MPU_Enable+0x34>)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f043 0301 	orr.w	r3, r3, #1
 8001fac:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001fae:	4b09      	ldr	r3, [pc, #36]	; (8001fd4 <HAL_MPU_Enable+0x38>)
 8001fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb2:	4a08      	ldr	r2, [pc, #32]	; (8001fd4 <HAL_MPU_Enable+0x38>)
 8001fb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fb8:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001fba:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001fbe:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001fc2:	bf00      	nop
 8001fc4:	370c      	adds	r7, #12
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	e000ed90 	.word	0xe000ed90
 8001fd4:	e000ed00 	.word	0xe000ed00

08001fd8 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	785a      	ldrb	r2, [r3, #1]
 8001fe4:	4b1d      	ldr	r3, [pc, #116]	; (800205c <HAL_MPU_ConfigRegion+0x84>)
 8001fe6:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d029      	beq.n	8002044 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8001ff0:	4a1a      	ldr	r2, [pc, #104]	; (800205c <HAL_MPU_ConfigRegion+0x84>)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	7b1b      	ldrb	r3, [r3, #12]
 8001ffc:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	7adb      	ldrb	r3, [r3, #11]
 8002002:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002004:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	7a9b      	ldrb	r3, [r3, #10]
 800200a:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800200c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	7b5b      	ldrb	r3, [r3, #13]
 8002012:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002014:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	7b9b      	ldrb	r3, [r3, #14]
 800201a:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800201c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	7bdb      	ldrb	r3, [r3, #15]
 8002022:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002024:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	7a5b      	ldrb	r3, [r3, #9]
 800202a:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800202c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	7a1b      	ldrb	r3, [r3, #8]
 8002032:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002034:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	7812      	ldrb	r2, [r2, #0]
 800203a:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800203c:	4a07      	ldr	r2, [pc, #28]	; (800205c <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800203e:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002040:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8002042:	e005      	b.n	8002050 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8002044:	4b05      	ldr	r3, [pc, #20]	; (800205c <HAL_MPU_ConfigRegion+0x84>)
 8002046:	2200      	movs	r2, #0
 8002048:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 800204a:	4b04      	ldr	r3, [pc, #16]	; (800205c <HAL_MPU_ConfigRegion+0x84>)
 800204c:	2200      	movs	r2, #0
 800204e:	611a      	str	r2, [r3, #16]
}
 8002050:	bf00      	nop
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr
 800205c:	e000ed90 	.word	0xe000ed90

08002060 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8002064:	4b07      	ldr	r3, [pc, #28]	; (8002084 <HAL_GetCurrentCPUID+0x24>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	091b      	lsrs	r3, r3, #4
 800206a:	f003 030f 	and.w	r3, r3, #15
 800206e:	2b07      	cmp	r3, #7
 8002070:	d101      	bne.n	8002076 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8002072:	2303      	movs	r3, #3
 8002074:	e000      	b.n	8002078 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8002076:	2301      	movs	r3, #1
  }
}
 8002078:	4618      	mov	r0, r3
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	e000ed00 	.word	0xe000ed00

08002088 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d101      	bne.n	800209a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e054      	b.n	8002144 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	7f5b      	ldrb	r3, [r3, #29]
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d105      	bne.n	80020b0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2200      	movs	r2, #0
 80020a8:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f7fe fbb6 	bl	800081c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2202      	movs	r2, #2
 80020b4:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	791b      	ldrb	r3, [r3, #4]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d10c      	bne.n	80020d8 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a22      	ldr	r2, [pc, #136]	; (800214c <HAL_CRC_Init+0xc4>)
 80020c4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	689a      	ldr	r2, [r3, #8]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f022 0218 	bic.w	r2, r2, #24
 80020d4:	609a      	str	r2, [r3, #8]
 80020d6:	e00c      	b.n	80020f2 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6899      	ldr	r1, [r3, #8]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	461a      	mov	r2, r3
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f000 f834 	bl	8002150 <HAL_CRCEx_Polynomial_Set>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e028      	b.n	8002144 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	795b      	ldrb	r3, [r3, #5]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d105      	bne.n	8002106 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002102:	611a      	str	r2, [r3, #16]
 8002104:	e004      	b.n	8002110 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	6912      	ldr	r2, [r2, #16]
 800210e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	695a      	ldr	r2, [r3, #20]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	430a      	orrs	r2, r1
 8002124:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	699a      	ldr	r2, [r3, #24]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	430a      	orrs	r2, r1
 800213a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2201      	movs	r2, #1
 8002140:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002142:	2300      	movs	r3, #0
}
 8002144:	4618      	mov	r0, r3
 8002146:	3708      	adds	r7, #8
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	04c11db7 	.word	0x04c11db7

08002150 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002150:	b480      	push	{r7}
 8002152:	b087      	sub	sp, #28
 8002154:	af00      	add	r7, sp, #0
 8002156:	60f8      	str	r0, [r7, #12]
 8002158:	60b9      	str	r1, [r7, #8]
 800215a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800215c:	2300      	movs	r3, #0
 800215e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002160:	231f      	movs	r3, #31
 8002162:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002164:	bf00      	nop
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	1e5a      	subs	r2, r3, #1
 800216a:	613a      	str	r2, [r7, #16]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d009      	beq.n	8002184 <HAL_CRCEx_Polynomial_Set+0x34>
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	f003 031f 	and.w	r3, r3, #31
 8002176:	68ba      	ldr	r2, [r7, #8]
 8002178:	fa22 f303 	lsr.w	r3, r2, r3
 800217c:	f003 0301 	and.w	r3, r3, #1
 8002180:	2b00      	cmp	r3, #0
 8002182:	d0f0      	beq.n	8002166 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2b18      	cmp	r3, #24
 8002188:	d846      	bhi.n	8002218 <HAL_CRCEx_Polynomial_Set+0xc8>
 800218a:	a201      	add	r2, pc, #4	; (adr r2, 8002190 <HAL_CRCEx_Polynomial_Set+0x40>)
 800218c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002190:	0800221f 	.word	0x0800221f
 8002194:	08002219 	.word	0x08002219
 8002198:	08002219 	.word	0x08002219
 800219c:	08002219 	.word	0x08002219
 80021a0:	08002219 	.word	0x08002219
 80021a4:	08002219 	.word	0x08002219
 80021a8:	08002219 	.word	0x08002219
 80021ac:	08002219 	.word	0x08002219
 80021b0:	0800220d 	.word	0x0800220d
 80021b4:	08002219 	.word	0x08002219
 80021b8:	08002219 	.word	0x08002219
 80021bc:	08002219 	.word	0x08002219
 80021c0:	08002219 	.word	0x08002219
 80021c4:	08002219 	.word	0x08002219
 80021c8:	08002219 	.word	0x08002219
 80021cc:	08002219 	.word	0x08002219
 80021d0:	08002201 	.word	0x08002201
 80021d4:	08002219 	.word	0x08002219
 80021d8:	08002219 	.word	0x08002219
 80021dc:	08002219 	.word	0x08002219
 80021e0:	08002219 	.word	0x08002219
 80021e4:	08002219 	.word	0x08002219
 80021e8:	08002219 	.word	0x08002219
 80021ec:	08002219 	.word	0x08002219
 80021f0:	080021f5 	.word	0x080021f5
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	2b06      	cmp	r3, #6
 80021f8:	d913      	bls.n	8002222 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80021fe:	e010      	b.n	8002222 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	2b07      	cmp	r3, #7
 8002204:	d90f      	bls.n	8002226 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800220a:	e00c      	b.n	8002226 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	2b0f      	cmp	r3, #15
 8002210:	d90b      	bls.n	800222a <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002216:	e008      	b.n	800222a <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	75fb      	strb	r3, [r7, #23]
      break;
 800221c:	e006      	b.n	800222c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800221e:	bf00      	nop
 8002220:	e004      	b.n	800222c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002222:	bf00      	nop
 8002224:	e002      	b.n	800222c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002226:	bf00      	nop
 8002228:	e000      	b.n	800222c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800222a:	bf00      	nop
  }
  if (status == HAL_OK)
 800222c:	7dfb      	ldrb	r3, [r7, #23]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d10d      	bne.n	800224e <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	68ba      	ldr	r2, [r7, #8]
 8002238:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	f023 0118 	bic.w	r1, r3, #24
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	430a      	orrs	r2, r1
 800224c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800224e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002250:	4618      	mov	r0, r3
 8002252:	371c      	adds	r7, #28
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b086      	sub	sp, #24
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002264:	f7ff fd78 	bl	8001d58 <HAL_GetTick>
 8002268:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d101      	bne.n	8002274 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e316      	b.n	80028a2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a66      	ldr	r2, [pc, #408]	; (8002414 <HAL_DMA_Init+0x1b8>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d04a      	beq.n	8002314 <HAL_DMA_Init+0xb8>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a65      	ldr	r2, [pc, #404]	; (8002418 <HAL_DMA_Init+0x1bc>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d045      	beq.n	8002314 <HAL_DMA_Init+0xb8>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a63      	ldr	r2, [pc, #396]	; (800241c <HAL_DMA_Init+0x1c0>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d040      	beq.n	8002314 <HAL_DMA_Init+0xb8>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a62      	ldr	r2, [pc, #392]	; (8002420 <HAL_DMA_Init+0x1c4>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d03b      	beq.n	8002314 <HAL_DMA_Init+0xb8>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a60      	ldr	r2, [pc, #384]	; (8002424 <HAL_DMA_Init+0x1c8>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d036      	beq.n	8002314 <HAL_DMA_Init+0xb8>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a5f      	ldr	r2, [pc, #380]	; (8002428 <HAL_DMA_Init+0x1cc>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d031      	beq.n	8002314 <HAL_DMA_Init+0xb8>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a5d      	ldr	r2, [pc, #372]	; (800242c <HAL_DMA_Init+0x1d0>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d02c      	beq.n	8002314 <HAL_DMA_Init+0xb8>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a5c      	ldr	r2, [pc, #368]	; (8002430 <HAL_DMA_Init+0x1d4>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d027      	beq.n	8002314 <HAL_DMA_Init+0xb8>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a5a      	ldr	r2, [pc, #360]	; (8002434 <HAL_DMA_Init+0x1d8>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d022      	beq.n	8002314 <HAL_DMA_Init+0xb8>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a59      	ldr	r2, [pc, #356]	; (8002438 <HAL_DMA_Init+0x1dc>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d01d      	beq.n	8002314 <HAL_DMA_Init+0xb8>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a57      	ldr	r2, [pc, #348]	; (800243c <HAL_DMA_Init+0x1e0>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d018      	beq.n	8002314 <HAL_DMA_Init+0xb8>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a56      	ldr	r2, [pc, #344]	; (8002440 <HAL_DMA_Init+0x1e4>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d013      	beq.n	8002314 <HAL_DMA_Init+0xb8>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a54      	ldr	r2, [pc, #336]	; (8002444 <HAL_DMA_Init+0x1e8>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d00e      	beq.n	8002314 <HAL_DMA_Init+0xb8>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a53      	ldr	r2, [pc, #332]	; (8002448 <HAL_DMA_Init+0x1ec>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d009      	beq.n	8002314 <HAL_DMA_Init+0xb8>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a51      	ldr	r2, [pc, #324]	; (800244c <HAL_DMA_Init+0x1f0>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d004      	beq.n	8002314 <HAL_DMA_Init+0xb8>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a50      	ldr	r2, [pc, #320]	; (8002450 <HAL_DMA_Init+0x1f4>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d101      	bne.n	8002318 <HAL_DMA_Init+0xbc>
 8002314:	2301      	movs	r3, #1
 8002316:	e000      	b.n	800231a <HAL_DMA_Init+0xbe>
 8002318:	2300      	movs	r3, #0
 800231a:	2b00      	cmp	r3, #0
 800231c:	f000 813b 	beq.w	8002596 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2200      	movs	r2, #0
 8002324:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2202      	movs	r2, #2
 800232c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a37      	ldr	r2, [pc, #220]	; (8002414 <HAL_DMA_Init+0x1b8>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d04a      	beq.n	80023d0 <HAL_DMA_Init+0x174>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a36      	ldr	r2, [pc, #216]	; (8002418 <HAL_DMA_Init+0x1bc>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d045      	beq.n	80023d0 <HAL_DMA_Init+0x174>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a34      	ldr	r2, [pc, #208]	; (800241c <HAL_DMA_Init+0x1c0>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d040      	beq.n	80023d0 <HAL_DMA_Init+0x174>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a33      	ldr	r2, [pc, #204]	; (8002420 <HAL_DMA_Init+0x1c4>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d03b      	beq.n	80023d0 <HAL_DMA_Init+0x174>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a31      	ldr	r2, [pc, #196]	; (8002424 <HAL_DMA_Init+0x1c8>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d036      	beq.n	80023d0 <HAL_DMA_Init+0x174>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a30      	ldr	r2, [pc, #192]	; (8002428 <HAL_DMA_Init+0x1cc>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d031      	beq.n	80023d0 <HAL_DMA_Init+0x174>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a2e      	ldr	r2, [pc, #184]	; (800242c <HAL_DMA_Init+0x1d0>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d02c      	beq.n	80023d0 <HAL_DMA_Init+0x174>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a2d      	ldr	r2, [pc, #180]	; (8002430 <HAL_DMA_Init+0x1d4>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d027      	beq.n	80023d0 <HAL_DMA_Init+0x174>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a2b      	ldr	r2, [pc, #172]	; (8002434 <HAL_DMA_Init+0x1d8>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d022      	beq.n	80023d0 <HAL_DMA_Init+0x174>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a2a      	ldr	r2, [pc, #168]	; (8002438 <HAL_DMA_Init+0x1dc>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d01d      	beq.n	80023d0 <HAL_DMA_Init+0x174>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a28      	ldr	r2, [pc, #160]	; (800243c <HAL_DMA_Init+0x1e0>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d018      	beq.n	80023d0 <HAL_DMA_Init+0x174>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a27      	ldr	r2, [pc, #156]	; (8002440 <HAL_DMA_Init+0x1e4>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d013      	beq.n	80023d0 <HAL_DMA_Init+0x174>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a25      	ldr	r2, [pc, #148]	; (8002444 <HAL_DMA_Init+0x1e8>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d00e      	beq.n	80023d0 <HAL_DMA_Init+0x174>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a24      	ldr	r2, [pc, #144]	; (8002448 <HAL_DMA_Init+0x1ec>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d009      	beq.n	80023d0 <HAL_DMA_Init+0x174>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a22      	ldr	r2, [pc, #136]	; (800244c <HAL_DMA_Init+0x1f0>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d004      	beq.n	80023d0 <HAL_DMA_Init+0x174>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a21      	ldr	r2, [pc, #132]	; (8002450 <HAL_DMA_Init+0x1f4>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d108      	bne.n	80023e2 <HAL_DMA_Init+0x186>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f022 0201 	bic.w	r2, r2, #1
 80023de:	601a      	str	r2, [r3, #0]
 80023e0:	e007      	b.n	80023f2 <HAL_DMA_Init+0x196>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f022 0201 	bic.w	r2, r2, #1
 80023f0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80023f2:	e02f      	b.n	8002454 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023f4:	f7ff fcb0 	bl	8001d58 <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	2b05      	cmp	r3, #5
 8002400:	d928      	bls.n	8002454 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2220      	movs	r2, #32
 8002406:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2203      	movs	r2, #3
 800240c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e246      	b.n	80028a2 <HAL_DMA_Init+0x646>
 8002414:	40020010 	.word	0x40020010
 8002418:	40020028 	.word	0x40020028
 800241c:	40020040 	.word	0x40020040
 8002420:	40020058 	.word	0x40020058
 8002424:	40020070 	.word	0x40020070
 8002428:	40020088 	.word	0x40020088
 800242c:	400200a0 	.word	0x400200a0
 8002430:	400200b8 	.word	0x400200b8
 8002434:	40020410 	.word	0x40020410
 8002438:	40020428 	.word	0x40020428
 800243c:	40020440 	.word	0x40020440
 8002440:	40020458 	.word	0x40020458
 8002444:	40020470 	.word	0x40020470
 8002448:	40020488 	.word	0x40020488
 800244c:	400204a0 	.word	0x400204a0
 8002450:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0301 	and.w	r3, r3, #1
 800245e:	2b00      	cmp	r3, #0
 8002460:	d1c8      	bne.n	80023f4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800246a:	697a      	ldr	r2, [r7, #20]
 800246c:	4b83      	ldr	r3, [pc, #524]	; (800267c <HAL_DMA_Init+0x420>)
 800246e:	4013      	ands	r3, r2
 8002470:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800247a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	691b      	ldr	r3, [r3, #16]
 8002480:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002486:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	699b      	ldr	r3, [r3, #24]
 800248c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002492:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6a1b      	ldr	r3, [r3, #32]
 8002498:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800249a:	697a      	ldr	r2, [r7, #20]
 800249c:	4313      	orrs	r3, r2
 800249e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a4:	2b04      	cmp	r3, #4
 80024a6:	d107      	bne.n	80024b8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b0:	4313      	orrs	r3, r2
 80024b2:	697a      	ldr	r2, [r7, #20]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80024b8:	4b71      	ldr	r3, [pc, #452]	; (8002680 <HAL_DMA_Init+0x424>)
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	4b71      	ldr	r3, [pc, #452]	; (8002684 <HAL_DMA_Init+0x428>)
 80024be:	4013      	ands	r3, r2
 80024c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80024c4:	d328      	bcc.n	8002518 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	2b28      	cmp	r3, #40	; 0x28
 80024cc:	d903      	bls.n	80024d6 <HAL_DMA_Init+0x27a>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	2b2e      	cmp	r3, #46	; 0x2e
 80024d4:	d917      	bls.n	8002506 <HAL_DMA_Init+0x2aa>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	2b3e      	cmp	r3, #62	; 0x3e
 80024dc:	d903      	bls.n	80024e6 <HAL_DMA_Init+0x28a>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	2b42      	cmp	r3, #66	; 0x42
 80024e4:	d90f      	bls.n	8002506 <HAL_DMA_Init+0x2aa>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	2b46      	cmp	r3, #70	; 0x46
 80024ec:	d903      	bls.n	80024f6 <HAL_DMA_Init+0x29a>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	2b48      	cmp	r3, #72	; 0x48
 80024f4:	d907      	bls.n	8002506 <HAL_DMA_Init+0x2aa>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	2b4e      	cmp	r3, #78	; 0x4e
 80024fc:	d905      	bls.n	800250a <HAL_DMA_Init+0x2ae>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	2b52      	cmp	r3, #82	; 0x52
 8002504:	d801      	bhi.n	800250a <HAL_DMA_Init+0x2ae>
 8002506:	2301      	movs	r3, #1
 8002508:	e000      	b.n	800250c <HAL_DMA_Init+0x2b0>
 800250a:	2300      	movs	r3, #0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d003      	beq.n	8002518 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002516:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	697a      	ldr	r2, [r7, #20]
 800251e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	695b      	ldr	r3, [r3, #20]
 8002526:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	f023 0307 	bic.w	r3, r3, #7
 800252e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002534:	697a      	ldr	r2, [r7, #20]
 8002536:	4313      	orrs	r3, r2
 8002538:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253e:	2b04      	cmp	r3, #4
 8002540:	d117      	bne.n	8002572 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002546:	697a      	ldr	r2, [r7, #20]
 8002548:	4313      	orrs	r3, r2
 800254a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002550:	2b00      	cmp	r3, #0
 8002552:	d00e      	beq.n	8002572 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f001 f9b9 	bl	80038cc <DMA_CheckFifoParam>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d008      	beq.n	8002572 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2240      	movs	r2, #64	; 0x40
 8002564:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2201      	movs	r2, #1
 800256a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e197      	b.n	80028a2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	697a      	ldr	r2, [r7, #20]
 8002578:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f001 f8f4 	bl	8003768 <DMA_CalcBaseAndBitshift>
 8002580:	4603      	mov	r3, r0
 8002582:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002588:	f003 031f 	and.w	r3, r3, #31
 800258c:	223f      	movs	r2, #63	; 0x3f
 800258e:	409a      	lsls	r2, r3
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	609a      	str	r2, [r3, #8]
 8002594:	e0cd      	b.n	8002732 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a3b      	ldr	r2, [pc, #236]	; (8002688 <HAL_DMA_Init+0x42c>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d022      	beq.n	80025e6 <HAL_DMA_Init+0x38a>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a39      	ldr	r2, [pc, #228]	; (800268c <HAL_DMA_Init+0x430>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d01d      	beq.n	80025e6 <HAL_DMA_Init+0x38a>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a38      	ldr	r2, [pc, #224]	; (8002690 <HAL_DMA_Init+0x434>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d018      	beq.n	80025e6 <HAL_DMA_Init+0x38a>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a36      	ldr	r2, [pc, #216]	; (8002694 <HAL_DMA_Init+0x438>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d013      	beq.n	80025e6 <HAL_DMA_Init+0x38a>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a35      	ldr	r2, [pc, #212]	; (8002698 <HAL_DMA_Init+0x43c>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d00e      	beq.n	80025e6 <HAL_DMA_Init+0x38a>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a33      	ldr	r2, [pc, #204]	; (800269c <HAL_DMA_Init+0x440>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d009      	beq.n	80025e6 <HAL_DMA_Init+0x38a>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a32      	ldr	r2, [pc, #200]	; (80026a0 <HAL_DMA_Init+0x444>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d004      	beq.n	80025e6 <HAL_DMA_Init+0x38a>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a30      	ldr	r2, [pc, #192]	; (80026a4 <HAL_DMA_Init+0x448>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d101      	bne.n	80025ea <HAL_DMA_Init+0x38e>
 80025e6:	2301      	movs	r3, #1
 80025e8:	e000      	b.n	80025ec <HAL_DMA_Init+0x390>
 80025ea:	2300      	movs	r3, #0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	f000 8097 	beq.w	8002720 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a24      	ldr	r2, [pc, #144]	; (8002688 <HAL_DMA_Init+0x42c>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d021      	beq.n	8002640 <HAL_DMA_Init+0x3e4>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a22      	ldr	r2, [pc, #136]	; (800268c <HAL_DMA_Init+0x430>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d01c      	beq.n	8002640 <HAL_DMA_Init+0x3e4>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a21      	ldr	r2, [pc, #132]	; (8002690 <HAL_DMA_Init+0x434>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d017      	beq.n	8002640 <HAL_DMA_Init+0x3e4>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a1f      	ldr	r2, [pc, #124]	; (8002694 <HAL_DMA_Init+0x438>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d012      	beq.n	8002640 <HAL_DMA_Init+0x3e4>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a1e      	ldr	r2, [pc, #120]	; (8002698 <HAL_DMA_Init+0x43c>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d00d      	beq.n	8002640 <HAL_DMA_Init+0x3e4>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a1c      	ldr	r2, [pc, #112]	; (800269c <HAL_DMA_Init+0x440>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d008      	beq.n	8002640 <HAL_DMA_Init+0x3e4>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a1b      	ldr	r2, [pc, #108]	; (80026a0 <HAL_DMA_Init+0x444>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d003      	beq.n	8002640 <HAL_DMA_Init+0x3e4>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a19      	ldr	r2, [pc, #100]	; (80026a4 <HAL_DMA_Init+0x448>)
 800263e:	4293      	cmp	r3, r2
 8002640:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2202      	movs	r2, #2
 800264e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800265a:	697a      	ldr	r2, [r7, #20]
 800265c:	4b12      	ldr	r3, [pc, #72]	; (80026a8 <HAL_DMA_Init+0x44c>)
 800265e:	4013      	ands	r3, r2
 8002660:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	2b40      	cmp	r3, #64	; 0x40
 8002668:	d020      	beq.n	80026ac <HAL_DMA_Init+0x450>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	2b80      	cmp	r3, #128	; 0x80
 8002670:	d102      	bne.n	8002678 <HAL_DMA_Init+0x41c>
 8002672:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002676:	e01a      	b.n	80026ae <HAL_DMA_Init+0x452>
 8002678:	2300      	movs	r3, #0
 800267a:	e018      	b.n	80026ae <HAL_DMA_Init+0x452>
 800267c:	fe10803f 	.word	0xfe10803f
 8002680:	5c001000 	.word	0x5c001000
 8002684:	ffff0000 	.word	0xffff0000
 8002688:	58025408 	.word	0x58025408
 800268c:	5802541c 	.word	0x5802541c
 8002690:	58025430 	.word	0x58025430
 8002694:	58025444 	.word	0x58025444
 8002698:	58025458 	.word	0x58025458
 800269c:	5802546c 	.word	0x5802546c
 80026a0:	58025480 	.word	0x58025480
 80026a4:	58025494 	.word	0x58025494
 80026a8:	fffe000f 	.word	0xfffe000f
 80026ac:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	68d2      	ldr	r2, [r2, #12]
 80026b2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80026b4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	691b      	ldr	r3, [r3, #16]
 80026ba:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80026bc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	695b      	ldr	r3, [r3, #20]
 80026c2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80026c4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	699b      	ldr	r3, [r3, #24]
 80026ca:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80026cc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	69db      	ldr	r3, [r3, #28]
 80026d2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80026d4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a1b      	ldr	r3, [r3, #32]
 80026da:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80026dc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80026de:	697a      	ldr	r2, [r7, #20]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	697a      	ldr	r2, [r7, #20]
 80026ea:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	461a      	mov	r2, r3
 80026f2:	4b6e      	ldr	r3, [pc, #440]	; (80028ac <HAL_DMA_Init+0x650>)
 80026f4:	4413      	add	r3, r2
 80026f6:	4a6e      	ldr	r2, [pc, #440]	; (80028b0 <HAL_DMA_Init+0x654>)
 80026f8:	fba2 2303 	umull	r2, r3, r2, r3
 80026fc:	091b      	lsrs	r3, r3, #4
 80026fe:	009a      	lsls	r2, r3, #2
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f001 f82f 	bl	8003768 <DMA_CalcBaseAndBitshift>
 800270a:	4603      	mov	r3, r0
 800270c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002712:	f003 031f 	and.w	r3, r3, #31
 8002716:	2201      	movs	r2, #1
 8002718:	409a      	lsls	r2, r3
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	605a      	str	r2, [r3, #4]
 800271e:	e008      	b.n	8002732 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2240      	movs	r2, #64	; 0x40
 8002724:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2203      	movs	r2, #3
 800272a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e0b7      	b.n	80028a2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a5f      	ldr	r2, [pc, #380]	; (80028b4 <HAL_DMA_Init+0x658>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d072      	beq.n	8002822 <HAL_DMA_Init+0x5c6>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a5d      	ldr	r2, [pc, #372]	; (80028b8 <HAL_DMA_Init+0x65c>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d06d      	beq.n	8002822 <HAL_DMA_Init+0x5c6>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a5c      	ldr	r2, [pc, #368]	; (80028bc <HAL_DMA_Init+0x660>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d068      	beq.n	8002822 <HAL_DMA_Init+0x5c6>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a5a      	ldr	r2, [pc, #360]	; (80028c0 <HAL_DMA_Init+0x664>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d063      	beq.n	8002822 <HAL_DMA_Init+0x5c6>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a59      	ldr	r2, [pc, #356]	; (80028c4 <HAL_DMA_Init+0x668>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d05e      	beq.n	8002822 <HAL_DMA_Init+0x5c6>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a57      	ldr	r2, [pc, #348]	; (80028c8 <HAL_DMA_Init+0x66c>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d059      	beq.n	8002822 <HAL_DMA_Init+0x5c6>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a56      	ldr	r2, [pc, #344]	; (80028cc <HAL_DMA_Init+0x670>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d054      	beq.n	8002822 <HAL_DMA_Init+0x5c6>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a54      	ldr	r2, [pc, #336]	; (80028d0 <HAL_DMA_Init+0x674>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d04f      	beq.n	8002822 <HAL_DMA_Init+0x5c6>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a53      	ldr	r2, [pc, #332]	; (80028d4 <HAL_DMA_Init+0x678>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d04a      	beq.n	8002822 <HAL_DMA_Init+0x5c6>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a51      	ldr	r2, [pc, #324]	; (80028d8 <HAL_DMA_Init+0x67c>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d045      	beq.n	8002822 <HAL_DMA_Init+0x5c6>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a50      	ldr	r2, [pc, #320]	; (80028dc <HAL_DMA_Init+0x680>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d040      	beq.n	8002822 <HAL_DMA_Init+0x5c6>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a4e      	ldr	r2, [pc, #312]	; (80028e0 <HAL_DMA_Init+0x684>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d03b      	beq.n	8002822 <HAL_DMA_Init+0x5c6>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a4d      	ldr	r2, [pc, #308]	; (80028e4 <HAL_DMA_Init+0x688>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d036      	beq.n	8002822 <HAL_DMA_Init+0x5c6>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a4b      	ldr	r2, [pc, #300]	; (80028e8 <HAL_DMA_Init+0x68c>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d031      	beq.n	8002822 <HAL_DMA_Init+0x5c6>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a4a      	ldr	r2, [pc, #296]	; (80028ec <HAL_DMA_Init+0x690>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d02c      	beq.n	8002822 <HAL_DMA_Init+0x5c6>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a48      	ldr	r2, [pc, #288]	; (80028f0 <HAL_DMA_Init+0x694>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d027      	beq.n	8002822 <HAL_DMA_Init+0x5c6>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a47      	ldr	r2, [pc, #284]	; (80028f4 <HAL_DMA_Init+0x698>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d022      	beq.n	8002822 <HAL_DMA_Init+0x5c6>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a45      	ldr	r2, [pc, #276]	; (80028f8 <HAL_DMA_Init+0x69c>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d01d      	beq.n	8002822 <HAL_DMA_Init+0x5c6>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a44      	ldr	r2, [pc, #272]	; (80028fc <HAL_DMA_Init+0x6a0>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d018      	beq.n	8002822 <HAL_DMA_Init+0x5c6>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a42      	ldr	r2, [pc, #264]	; (8002900 <HAL_DMA_Init+0x6a4>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d013      	beq.n	8002822 <HAL_DMA_Init+0x5c6>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a41      	ldr	r2, [pc, #260]	; (8002904 <HAL_DMA_Init+0x6a8>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d00e      	beq.n	8002822 <HAL_DMA_Init+0x5c6>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a3f      	ldr	r2, [pc, #252]	; (8002908 <HAL_DMA_Init+0x6ac>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d009      	beq.n	8002822 <HAL_DMA_Init+0x5c6>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a3e      	ldr	r2, [pc, #248]	; (800290c <HAL_DMA_Init+0x6b0>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d004      	beq.n	8002822 <HAL_DMA_Init+0x5c6>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a3c      	ldr	r2, [pc, #240]	; (8002910 <HAL_DMA_Init+0x6b4>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d101      	bne.n	8002826 <HAL_DMA_Init+0x5ca>
 8002822:	2301      	movs	r3, #1
 8002824:	e000      	b.n	8002828 <HAL_DMA_Init+0x5cc>
 8002826:	2300      	movs	r3, #0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d032      	beq.n	8002892 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f001 f8c9 	bl	80039c4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	2b80      	cmp	r3, #128	; 0x80
 8002838:	d102      	bne.n	8002840 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	685a      	ldr	r2, [r3, #4]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002848:	b2d2      	uxtb	r2, r2
 800284a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002854:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d010      	beq.n	8002880 <HAL_DMA_Init+0x624>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	2b08      	cmp	r3, #8
 8002864:	d80c      	bhi.n	8002880 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f001 f946 	bl	8003af8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002870:	2200      	movs	r2, #0
 8002872:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800287c:	605a      	str	r2, [r3, #4]
 800287e:	e008      	b.n	8002892 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2200      	movs	r2, #0
 8002884:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2200      	movs	r2, #0
 8002890:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2200      	movs	r2, #0
 8002896:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3718      	adds	r7, #24
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	a7fdabf8 	.word	0xa7fdabf8
 80028b0:	cccccccd 	.word	0xcccccccd
 80028b4:	40020010 	.word	0x40020010
 80028b8:	40020028 	.word	0x40020028
 80028bc:	40020040 	.word	0x40020040
 80028c0:	40020058 	.word	0x40020058
 80028c4:	40020070 	.word	0x40020070
 80028c8:	40020088 	.word	0x40020088
 80028cc:	400200a0 	.word	0x400200a0
 80028d0:	400200b8 	.word	0x400200b8
 80028d4:	40020410 	.word	0x40020410
 80028d8:	40020428 	.word	0x40020428
 80028dc:	40020440 	.word	0x40020440
 80028e0:	40020458 	.word	0x40020458
 80028e4:	40020470 	.word	0x40020470
 80028e8:	40020488 	.word	0x40020488
 80028ec:	400204a0 	.word	0x400204a0
 80028f0:	400204b8 	.word	0x400204b8
 80028f4:	58025408 	.word	0x58025408
 80028f8:	5802541c 	.word	0x5802541c
 80028fc:	58025430 	.word	0x58025430
 8002900:	58025444 	.word	0x58025444
 8002904:	58025458 	.word	0x58025458
 8002908:	5802546c 	.word	0x5802546c
 800290c:	58025480 	.word	0x58025480
 8002910:	58025494 	.word	0x58025494

08002914 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b08a      	sub	sp, #40	; 0x28
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800291c:	2300      	movs	r3, #0
 800291e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002920:	4b67      	ldr	r3, [pc, #412]	; (8002ac0 <HAL_DMA_IRQHandler+0x1ac>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a67      	ldr	r2, [pc, #412]	; (8002ac4 <HAL_DMA_IRQHandler+0x1b0>)
 8002926:	fba2 2303 	umull	r2, r3, r2, r3
 800292a:	0a9b      	lsrs	r3, r3, #10
 800292c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002932:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002938:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800293a:	6a3b      	ldr	r3, [r7, #32]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a5f      	ldr	r2, [pc, #380]	; (8002ac8 <HAL_DMA_IRQHandler+0x1b4>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d04a      	beq.n	80029e6 <HAL_DMA_IRQHandler+0xd2>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a5d      	ldr	r2, [pc, #372]	; (8002acc <HAL_DMA_IRQHandler+0x1b8>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d045      	beq.n	80029e6 <HAL_DMA_IRQHandler+0xd2>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a5c      	ldr	r2, [pc, #368]	; (8002ad0 <HAL_DMA_IRQHandler+0x1bc>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d040      	beq.n	80029e6 <HAL_DMA_IRQHandler+0xd2>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a5a      	ldr	r2, [pc, #360]	; (8002ad4 <HAL_DMA_IRQHandler+0x1c0>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d03b      	beq.n	80029e6 <HAL_DMA_IRQHandler+0xd2>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a59      	ldr	r2, [pc, #356]	; (8002ad8 <HAL_DMA_IRQHandler+0x1c4>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d036      	beq.n	80029e6 <HAL_DMA_IRQHandler+0xd2>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a57      	ldr	r2, [pc, #348]	; (8002adc <HAL_DMA_IRQHandler+0x1c8>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d031      	beq.n	80029e6 <HAL_DMA_IRQHandler+0xd2>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a56      	ldr	r2, [pc, #344]	; (8002ae0 <HAL_DMA_IRQHandler+0x1cc>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d02c      	beq.n	80029e6 <HAL_DMA_IRQHandler+0xd2>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a54      	ldr	r2, [pc, #336]	; (8002ae4 <HAL_DMA_IRQHandler+0x1d0>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d027      	beq.n	80029e6 <HAL_DMA_IRQHandler+0xd2>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a53      	ldr	r2, [pc, #332]	; (8002ae8 <HAL_DMA_IRQHandler+0x1d4>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d022      	beq.n	80029e6 <HAL_DMA_IRQHandler+0xd2>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a51      	ldr	r2, [pc, #324]	; (8002aec <HAL_DMA_IRQHandler+0x1d8>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d01d      	beq.n	80029e6 <HAL_DMA_IRQHandler+0xd2>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a50      	ldr	r2, [pc, #320]	; (8002af0 <HAL_DMA_IRQHandler+0x1dc>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d018      	beq.n	80029e6 <HAL_DMA_IRQHandler+0xd2>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a4e      	ldr	r2, [pc, #312]	; (8002af4 <HAL_DMA_IRQHandler+0x1e0>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d013      	beq.n	80029e6 <HAL_DMA_IRQHandler+0xd2>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a4d      	ldr	r2, [pc, #308]	; (8002af8 <HAL_DMA_IRQHandler+0x1e4>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d00e      	beq.n	80029e6 <HAL_DMA_IRQHandler+0xd2>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a4b      	ldr	r2, [pc, #300]	; (8002afc <HAL_DMA_IRQHandler+0x1e8>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d009      	beq.n	80029e6 <HAL_DMA_IRQHandler+0xd2>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a4a      	ldr	r2, [pc, #296]	; (8002b00 <HAL_DMA_IRQHandler+0x1ec>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d004      	beq.n	80029e6 <HAL_DMA_IRQHandler+0xd2>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a48      	ldr	r2, [pc, #288]	; (8002b04 <HAL_DMA_IRQHandler+0x1f0>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d101      	bne.n	80029ea <HAL_DMA_IRQHandler+0xd6>
 80029e6:	2301      	movs	r3, #1
 80029e8:	e000      	b.n	80029ec <HAL_DMA_IRQHandler+0xd8>
 80029ea:	2300      	movs	r3, #0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	f000 842b 	beq.w	8003248 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029f6:	f003 031f 	and.w	r3, r3, #31
 80029fa:	2208      	movs	r2, #8
 80029fc:	409a      	lsls	r2, r3
 80029fe:	69bb      	ldr	r3, [r7, #24]
 8002a00:	4013      	ands	r3, r2
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	f000 80a2 	beq.w	8002b4c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a2e      	ldr	r2, [pc, #184]	; (8002ac8 <HAL_DMA_IRQHandler+0x1b4>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d04a      	beq.n	8002aa8 <HAL_DMA_IRQHandler+0x194>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a2d      	ldr	r2, [pc, #180]	; (8002acc <HAL_DMA_IRQHandler+0x1b8>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d045      	beq.n	8002aa8 <HAL_DMA_IRQHandler+0x194>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a2b      	ldr	r2, [pc, #172]	; (8002ad0 <HAL_DMA_IRQHandler+0x1bc>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d040      	beq.n	8002aa8 <HAL_DMA_IRQHandler+0x194>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a2a      	ldr	r2, [pc, #168]	; (8002ad4 <HAL_DMA_IRQHandler+0x1c0>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d03b      	beq.n	8002aa8 <HAL_DMA_IRQHandler+0x194>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a28      	ldr	r2, [pc, #160]	; (8002ad8 <HAL_DMA_IRQHandler+0x1c4>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d036      	beq.n	8002aa8 <HAL_DMA_IRQHandler+0x194>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a27      	ldr	r2, [pc, #156]	; (8002adc <HAL_DMA_IRQHandler+0x1c8>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d031      	beq.n	8002aa8 <HAL_DMA_IRQHandler+0x194>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a25      	ldr	r2, [pc, #148]	; (8002ae0 <HAL_DMA_IRQHandler+0x1cc>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d02c      	beq.n	8002aa8 <HAL_DMA_IRQHandler+0x194>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a24      	ldr	r2, [pc, #144]	; (8002ae4 <HAL_DMA_IRQHandler+0x1d0>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d027      	beq.n	8002aa8 <HAL_DMA_IRQHandler+0x194>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a22      	ldr	r2, [pc, #136]	; (8002ae8 <HAL_DMA_IRQHandler+0x1d4>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d022      	beq.n	8002aa8 <HAL_DMA_IRQHandler+0x194>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a21      	ldr	r2, [pc, #132]	; (8002aec <HAL_DMA_IRQHandler+0x1d8>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d01d      	beq.n	8002aa8 <HAL_DMA_IRQHandler+0x194>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a1f      	ldr	r2, [pc, #124]	; (8002af0 <HAL_DMA_IRQHandler+0x1dc>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d018      	beq.n	8002aa8 <HAL_DMA_IRQHandler+0x194>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a1e      	ldr	r2, [pc, #120]	; (8002af4 <HAL_DMA_IRQHandler+0x1e0>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d013      	beq.n	8002aa8 <HAL_DMA_IRQHandler+0x194>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a1c      	ldr	r2, [pc, #112]	; (8002af8 <HAL_DMA_IRQHandler+0x1e4>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d00e      	beq.n	8002aa8 <HAL_DMA_IRQHandler+0x194>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a1b      	ldr	r2, [pc, #108]	; (8002afc <HAL_DMA_IRQHandler+0x1e8>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d009      	beq.n	8002aa8 <HAL_DMA_IRQHandler+0x194>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a19      	ldr	r2, [pc, #100]	; (8002b00 <HAL_DMA_IRQHandler+0x1ec>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d004      	beq.n	8002aa8 <HAL_DMA_IRQHandler+0x194>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a18      	ldr	r2, [pc, #96]	; (8002b04 <HAL_DMA_IRQHandler+0x1f0>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d12f      	bne.n	8002b08 <HAL_DMA_IRQHandler+0x1f4>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0304 	and.w	r3, r3, #4
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	bf14      	ite	ne
 8002ab6:	2301      	movne	r3, #1
 8002ab8:	2300      	moveq	r3, #0
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	e02e      	b.n	8002b1c <HAL_DMA_IRQHandler+0x208>
 8002abe:	bf00      	nop
 8002ac0:	24000000 	.word	0x24000000
 8002ac4:	1b4e81b5 	.word	0x1b4e81b5
 8002ac8:	40020010 	.word	0x40020010
 8002acc:	40020028 	.word	0x40020028
 8002ad0:	40020040 	.word	0x40020040
 8002ad4:	40020058 	.word	0x40020058
 8002ad8:	40020070 	.word	0x40020070
 8002adc:	40020088 	.word	0x40020088
 8002ae0:	400200a0 	.word	0x400200a0
 8002ae4:	400200b8 	.word	0x400200b8
 8002ae8:	40020410 	.word	0x40020410
 8002aec:	40020428 	.word	0x40020428
 8002af0:	40020440 	.word	0x40020440
 8002af4:	40020458 	.word	0x40020458
 8002af8:	40020470 	.word	0x40020470
 8002afc:	40020488 	.word	0x40020488
 8002b00:	400204a0 	.word	0x400204a0
 8002b04:	400204b8 	.word	0x400204b8
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0308 	and.w	r3, r3, #8
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	bf14      	ite	ne
 8002b16:	2301      	movne	r3, #1
 8002b18:	2300      	moveq	r3, #0
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d015      	beq.n	8002b4c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f022 0204 	bic.w	r2, r2, #4
 8002b2e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b34:	f003 031f 	and.w	r3, r3, #31
 8002b38:	2208      	movs	r2, #8
 8002b3a:	409a      	lsls	r2, r3
 8002b3c:	6a3b      	ldr	r3, [r7, #32]
 8002b3e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b44:	f043 0201 	orr.w	r2, r3, #1
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b50:	f003 031f 	and.w	r3, r3, #31
 8002b54:	69ba      	ldr	r2, [r7, #24]
 8002b56:	fa22 f303 	lsr.w	r3, r2, r3
 8002b5a:	f003 0301 	and.w	r3, r3, #1
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d06e      	beq.n	8002c40 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a69      	ldr	r2, [pc, #420]	; (8002d0c <HAL_DMA_IRQHandler+0x3f8>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d04a      	beq.n	8002c02 <HAL_DMA_IRQHandler+0x2ee>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a67      	ldr	r2, [pc, #412]	; (8002d10 <HAL_DMA_IRQHandler+0x3fc>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d045      	beq.n	8002c02 <HAL_DMA_IRQHandler+0x2ee>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a66      	ldr	r2, [pc, #408]	; (8002d14 <HAL_DMA_IRQHandler+0x400>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d040      	beq.n	8002c02 <HAL_DMA_IRQHandler+0x2ee>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a64      	ldr	r2, [pc, #400]	; (8002d18 <HAL_DMA_IRQHandler+0x404>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d03b      	beq.n	8002c02 <HAL_DMA_IRQHandler+0x2ee>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a63      	ldr	r2, [pc, #396]	; (8002d1c <HAL_DMA_IRQHandler+0x408>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d036      	beq.n	8002c02 <HAL_DMA_IRQHandler+0x2ee>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a61      	ldr	r2, [pc, #388]	; (8002d20 <HAL_DMA_IRQHandler+0x40c>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d031      	beq.n	8002c02 <HAL_DMA_IRQHandler+0x2ee>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a60      	ldr	r2, [pc, #384]	; (8002d24 <HAL_DMA_IRQHandler+0x410>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d02c      	beq.n	8002c02 <HAL_DMA_IRQHandler+0x2ee>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a5e      	ldr	r2, [pc, #376]	; (8002d28 <HAL_DMA_IRQHandler+0x414>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d027      	beq.n	8002c02 <HAL_DMA_IRQHandler+0x2ee>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a5d      	ldr	r2, [pc, #372]	; (8002d2c <HAL_DMA_IRQHandler+0x418>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d022      	beq.n	8002c02 <HAL_DMA_IRQHandler+0x2ee>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a5b      	ldr	r2, [pc, #364]	; (8002d30 <HAL_DMA_IRQHandler+0x41c>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d01d      	beq.n	8002c02 <HAL_DMA_IRQHandler+0x2ee>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a5a      	ldr	r2, [pc, #360]	; (8002d34 <HAL_DMA_IRQHandler+0x420>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d018      	beq.n	8002c02 <HAL_DMA_IRQHandler+0x2ee>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a58      	ldr	r2, [pc, #352]	; (8002d38 <HAL_DMA_IRQHandler+0x424>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d013      	beq.n	8002c02 <HAL_DMA_IRQHandler+0x2ee>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a57      	ldr	r2, [pc, #348]	; (8002d3c <HAL_DMA_IRQHandler+0x428>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d00e      	beq.n	8002c02 <HAL_DMA_IRQHandler+0x2ee>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a55      	ldr	r2, [pc, #340]	; (8002d40 <HAL_DMA_IRQHandler+0x42c>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d009      	beq.n	8002c02 <HAL_DMA_IRQHandler+0x2ee>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a54      	ldr	r2, [pc, #336]	; (8002d44 <HAL_DMA_IRQHandler+0x430>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d004      	beq.n	8002c02 <HAL_DMA_IRQHandler+0x2ee>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a52      	ldr	r2, [pc, #328]	; (8002d48 <HAL_DMA_IRQHandler+0x434>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d10a      	bne.n	8002c18 <HAL_DMA_IRQHandler+0x304>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	695b      	ldr	r3, [r3, #20]
 8002c08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	bf14      	ite	ne
 8002c10:	2301      	movne	r3, #1
 8002c12:	2300      	moveq	r3, #0
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	e003      	b.n	8002c20 <HAL_DMA_IRQHandler+0x30c>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2300      	movs	r3, #0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d00d      	beq.n	8002c40 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c28:	f003 031f 	and.w	r3, r3, #31
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	409a      	lsls	r2, r3
 8002c30:	6a3b      	ldr	r3, [r7, #32]
 8002c32:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c38:	f043 0202 	orr.w	r2, r3, #2
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c44:	f003 031f 	and.w	r3, r3, #31
 8002c48:	2204      	movs	r2, #4
 8002c4a:	409a      	lsls	r2, r3
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	4013      	ands	r3, r2
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	f000 808f 	beq.w	8002d74 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a2c      	ldr	r2, [pc, #176]	; (8002d0c <HAL_DMA_IRQHandler+0x3f8>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d04a      	beq.n	8002cf6 <HAL_DMA_IRQHandler+0x3e2>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a2a      	ldr	r2, [pc, #168]	; (8002d10 <HAL_DMA_IRQHandler+0x3fc>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d045      	beq.n	8002cf6 <HAL_DMA_IRQHandler+0x3e2>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a29      	ldr	r2, [pc, #164]	; (8002d14 <HAL_DMA_IRQHandler+0x400>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d040      	beq.n	8002cf6 <HAL_DMA_IRQHandler+0x3e2>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a27      	ldr	r2, [pc, #156]	; (8002d18 <HAL_DMA_IRQHandler+0x404>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d03b      	beq.n	8002cf6 <HAL_DMA_IRQHandler+0x3e2>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a26      	ldr	r2, [pc, #152]	; (8002d1c <HAL_DMA_IRQHandler+0x408>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d036      	beq.n	8002cf6 <HAL_DMA_IRQHandler+0x3e2>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a24      	ldr	r2, [pc, #144]	; (8002d20 <HAL_DMA_IRQHandler+0x40c>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d031      	beq.n	8002cf6 <HAL_DMA_IRQHandler+0x3e2>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a23      	ldr	r2, [pc, #140]	; (8002d24 <HAL_DMA_IRQHandler+0x410>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d02c      	beq.n	8002cf6 <HAL_DMA_IRQHandler+0x3e2>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a21      	ldr	r2, [pc, #132]	; (8002d28 <HAL_DMA_IRQHandler+0x414>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d027      	beq.n	8002cf6 <HAL_DMA_IRQHandler+0x3e2>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a20      	ldr	r2, [pc, #128]	; (8002d2c <HAL_DMA_IRQHandler+0x418>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d022      	beq.n	8002cf6 <HAL_DMA_IRQHandler+0x3e2>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a1e      	ldr	r2, [pc, #120]	; (8002d30 <HAL_DMA_IRQHandler+0x41c>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d01d      	beq.n	8002cf6 <HAL_DMA_IRQHandler+0x3e2>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a1d      	ldr	r2, [pc, #116]	; (8002d34 <HAL_DMA_IRQHandler+0x420>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d018      	beq.n	8002cf6 <HAL_DMA_IRQHandler+0x3e2>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a1b      	ldr	r2, [pc, #108]	; (8002d38 <HAL_DMA_IRQHandler+0x424>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d013      	beq.n	8002cf6 <HAL_DMA_IRQHandler+0x3e2>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a1a      	ldr	r2, [pc, #104]	; (8002d3c <HAL_DMA_IRQHandler+0x428>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d00e      	beq.n	8002cf6 <HAL_DMA_IRQHandler+0x3e2>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a18      	ldr	r2, [pc, #96]	; (8002d40 <HAL_DMA_IRQHandler+0x42c>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d009      	beq.n	8002cf6 <HAL_DMA_IRQHandler+0x3e2>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a17      	ldr	r2, [pc, #92]	; (8002d44 <HAL_DMA_IRQHandler+0x430>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d004      	beq.n	8002cf6 <HAL_DMA_IRQHandler+0x3e2>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a15      	ldr	r2, [pc, #84]	; (8002d48 <HAL_DMA_IRQHandler+0x434>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d12a      	bne.n	8002d4c <HAL_DMA_IRQHandler+0x438>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0302 	and.w	r3, r3, #2
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	bf14      	ite	ne
 8002d04:	2301      	movne	r3, #1
 8002d06:	2300      	moveq	r3, #0
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	e023      	b.n	8002d54 <HAL_DMA_IRQHandler+0x440>
 8002d0c:	40020010 	.word	0x40020010
 8002d10:	40020028 	.word	0x40020028
 8002d14:	40020040 	.word	0x40020040
 8002d18:	40020058 	.word	0x40020058
 8002d1c:	40020070 	.word	0x40020070
 8002d20:	40020088 	.word	0x40020088
 8002d24:	400200a0 	.word	0x400200a0
 8002d28:	400200b8 	.word	0x400200b8
 8002d2c:	40020410 	.word	0x40020410
 8002d30:	40020428 	.word	0x40020428
 8002d34:	40020440 	.word	0x40020440
 8002d38:	40020458 	.word	0x40020458
 8002d3c:	40020470 	.word	0x40020470
 8002d40:	40020488 	.word	0x40020488
 8002d44:	400204a0 	.word	0x400204a0
 8002d48:	400204b8 	.word	0x400204b8
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	2300      	movs	r3, #0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d00d      	beq.n	8002d74 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d5c:	f003 031f 	and.w	r3, r3, #31
 8002d60:	2204      	movs	r2, #4
 8002d62:	409a      	lsls	r2, r3
 8002d64:	6a3b      	ldr	r3, [r7, #32]
 8002d66:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d6c:	f043 0204 	orr.w	r2, r3, #4
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d78:	f003 031f 	and.w	r3, r3, #31
 8002d7c:	2210      	movs	r2, #16
 8002d7e:	409a      	lsls	r2, r3
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	4013      	ands	r3, r2
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	f000 80a6 	beq.w	8002ed6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a85      	ldr	r2, [pc, #532]	; (8002fa4 <HAL_DMA_IRQHandler+0x690>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d04a      	beq.n	8002e2a <HAL_DMA_IRQHandler+0x516>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a83      	ldr	r2, [pc, #524]	; (8002fa8 <HAL_DMA_IRQHandler+0x694>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d045      	beq.n	8002e2a <HAL_DMA_IRQHandler+0x516>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a82      	ldr	r2, [pc, #520]	; (8002fac <HAL_DMA_IRQHandler+0x698>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d040      	beq.n	8002e2a <HAL_DMA_IRQHandler+0x516>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a80      	ldr	r2, [pc, #512]	; (8002fb0 <HAL_DMA_IRQHandler+0x69c>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d03b      	beq.n	8002e2a <HAL_DMA_IRQHandler+0x516>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a7f      	ldr	r2, [pc, #508]	; (8002fb4 <HAL_DMA_IRQHandler+0x6a0>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d036      	beq.n	8002e2a <HAL_DMA_IRQHandler+0x516>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a7d      	ldr	r2, [pc, #500]	; (8002fb8 <HAL_DMA_IRQHandler+0x6a4>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d031      	beq.n	8002e2a <HAL_DMA_IRQHandler+0x516>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a7c      	ldr	r2, [pc, #496]	; (8002fbc <HAL_DMA_IRQHandler+0x6a8>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d02c      	beq.n	8002e2a <HAL_DMA_IRQHandler+0x516>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a7a      	ldr	r2, [pc, #488]	; (8002fc0 <HAL_DMA_IRQHandler+0x6ac>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d027      	beq.n	8002e2a <HAL_DMA_IRQHandler+0x516>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a79      	ldr	r2, [pc, #484]	; (8002fc4 <HAL_DMA_IRQHandler+0x6b0>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d022      	beq.n	8002e2a <HAL_DMA_IRQHandler+0x516>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a77      	ldr	r2, [pc, #476]	; (8002fc8 <HAL_DMA_IRQHandler+0x6b4>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d01d      	beq.n	8002e2a <HAL_DMA_IRQHandler+0x516>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a76      	ldr	r2, [pc, #472]	; (8002fcc <HAL_DMA_IRQHandler+0x6b8>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d018      	beq.n	8002e2a <HAL_DMA_IRQHandler+0x516>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a74      	ldr	r2, [pc, #464]	; (8002fd0 <HAL_DMA_IRQHandler+0x6bc>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d013      	beq.n	8002e2a <HAL_DMA_IRQHandler+0x516>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a73      	ldr	r2, [pc, #460]	; (8002fd4 <HAL_DMA_IRQHandler+0x6c0>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d00e      	beq.n	8002e2a <HAL_DMA_IRQHandler+0x516>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a71      	ldr	r2, [pc, #452]	; (8002fd8 <HAL_DMA_IRQHandler+0x6c4>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d009      	beq.n	8002e2a <HAL_DMA_IRQHandler+0x516>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a70      	ldr	r2, [pc, #448]	; (8002fdc <HAL_DMA_IRQHandler+0x6c8>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d004      	beq.n	8002e2a <HAL_DMA_IRQHandler+0x516>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a6e      	ldr	r2, [pc, #440]	; (8002fe0 <HAL_DMA_IRQHandler+0x6cc>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d10a      	bne.n	8002e40 <HAL_DMA_IRQHandler+0x52c>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0308 	and.w	r3, r3, #8
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	bf14      	ite	ne
 8002e38:	2301      	movne	r3, #1
 8002e3a:	2300      	moveq	r3, #0
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	e009      	b.n	8002e54 <HAL_DMA_IRQHandler+0x540>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0304 	and.w	r3, r3, #4
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	bf14      	ite	ne
 8002e4e:	2301      	movne	r3, #1
 8002e50:	2300      	moveq	r3, #0
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d03e      	beq.n	8002ed6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e5c:	f003 031f 	and.w	r3, r3, #31
 8002e60:	2210      	movs	r2, #16
 8002e62:	409a      	lsls	r2, r3
 8002e64:	6a3b      	ldr	r3, [r7, #32]
 8002e66:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d018      	beq.n	8002ea8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d108      	bne.n	8002e96 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d024      	beq.n	8002ed6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	4798      	blx	r3
 8002e94:	e01f      	b.n	8002ed6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d01b      	beq.n	8002ed6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	4798      	blx	r3
 8002ea6:	e016      	b.n	8002ed6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d107      	bne.n	8002ec6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f022 0208 	bic.w	r2, r2, #8
 8002ec4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d003      	beq.n	8002ed6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eda:	f003 031f 	and.w	r3, r3, #31
 8002ede:	2220      	movs	r2, #32
 8002ee0:	409a      	lsls	r2, r3
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	f000 8110 	beq.w	800310c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a2c      	ldr	r2, [pc, #176]	; (8002fa4 <HAL_DMA_IRQHandler+0x690>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d04a      	beq.n	8002f8c <HAL_DMA_IRQHandler+0x678>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a2b      	ldr	r2, [pc, #172]	; (8002fa8 <HAL_DMA_IRQHandler+0x694>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d045      	beq.n	8002f8c <HAL_DMA_IRQHandler+0x678>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a29      	ldr	r2, [pc, #164]	; (8002fac <HAL_DMA_IRQHandler+0x698>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d040      	beq.n	8002f8c <HAL_DMA_IRQHandler+0x678>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a28      	ldr	r2, [pc, #160]	; (8002fb0 <HAL_DMA_IRQHandler+0x69c>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d03b      	beq.n	8002f8c <HAL_DMA_IRQHandler+0x678>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a26      	ldr	r2, [pc, #152]	; (8002fb4 <HAL_DMA_IRQHandler+0x6a0>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d036      	beq.n	8002f8c <HAL_DMA_IRQHandler+0x678>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a25      	ldr	r2, [pc, #148]	; (8002fb8 <HAL_DMA_IRQHandler+0x6a4>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d031      	beq.n	8002f8c <HAL_DMA_IRQHandler+0x678>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a23      	ldr	r2, [pc, #140]	; (8002fbc <HAL_DMA_IRQHandler+0x6a8>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d02c      	beq.n	8002f8c <HAL_DMA_IRQHandler+0x678>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a22      	ldr	r2, [pc, #136]	; (8002fc0 <HAL_DMA_IRQHandler+0x6ac>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d027      	beq.n	8002f8c <HAL_DMA_IRQHandler+0x678>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a20      	ldr	r2, [pc, #128]	; (8002fc4 <HAL_DMA_IRQHandler+0x6b0>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d022      	beq.n	8002f8c <HAL_DMA_IRQHandler+0x678>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a1f      	ldr	r2, [pc, #124]	; (8002fc8 <HAL_DMA_IRQHandler+0x6b4>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d01d      	beq.n	8002f8c <HAL_DMA_IRQHandler+0x678>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a1d      	ldr	r2, [pc, #116]	; (8002fcc <HAL_DMA_IRQHandler+0x6b8>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d018      	beq.n	8002f8c <HAL_DMA_IRQHandler+0x678>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a1c      	ldr	r2, [pc, #112]	; (8002fd0 <HAL_DMA_IRQHandler+0x6bc>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d013      	beq.n	8002f8c <HAL_DMA_IRQHandler+0x678>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a1a      	ldr	r2, [pc, #104]	; (8002fd4 <HAL_DMA_IRQHandler+0x6c0>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d00e      	beq.n	8002f8c <HAL_DMA_IRQHandler+0x678>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a19      	ldr	r2, [pc, #100]	; (8002fd8 <HAL_DMA_IRQHandler+0x6c4>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d009      	beq.n	8002f8c <HAL_DMA_IRQHandler+0x678>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a17      	ldr	r2, [pc, #92]	; (8002fdc <HAL_DMA_IRQHandler+0x6c8>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d004      	beq.n	8002f8c <HAL_DMA_IRQHandler+0x678>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a16      	ldr	r2, [pc, #88]	; (8002fe0 <HAL_DMA_IRQHandler+0x6cc>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d12b      	bne.n	8002fe4 <HAL_DMA_IRQHandler+0x6d0>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0310 	and.w	r3, r3, #16
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	bf14      	ite	ne
 8002f9a:	2301      	movne	r3, #1
 8002f9c:	2300      	moveq	r3, #0
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	e02a      	b.n	8002ff8 <HAL_DMA_IRQHandler+0x6e4>
 8002fa2:	bf00      	nop
 8002fa4:	40020010 	.word	0x40020010
 8002fa8:	40020028 	.word	0x40020028
 8002fac:	40020040 	.word	0x40020040
 8002fb0:	40020058 	.word	0x40020058
 8002fb4:	40020070 	.word	0x40020070
 8002fb8:	40020088 	.word	0x40020088
 8002fbc:	400200a0 	.word	0x400200a0
 8002fc0:	400200b8 	.word	0x400200b8
 8002fc4:	40020410 	.word	0x40020410
 8002fc8:	40020428 	.word	0x40020428
 8002fcc:	40020440 	.word	0x40020440
 8002fd0:	40020458 	.word	0x40020458
 8002fd4:	40020470 	.word	0x40020470
 8002fd8:	40020488 	.word	0x40020488
 8002fdc:	400204a0 	.word	0x400204a0
 8002fe0:	400204b8 	.word	0x400204b8
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0302 	and.w	r3, r3, #2
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	bf14      	ite	ne
 8002ff2:	2301      	movne	r3, #1
 8002ff4:	2300      	moveq	r3, #0
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	f000 8087 	beq.w	800310c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003002:	f003 031f 	and.w	r3, r3, #31
 8003006:	2220      	movs	r2, #32
 8003008:	409a      	lsls	r2, r3
 800300a:	6a3b      	ldr	r3, [r7, #32]
 800300c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003014:	b2db      	uxtb	r3, r3
 8003016:	2b04      	cmp	r3, #4
 8003018:	d139      	bne.n	800308e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f022 0216 	bic.w	r2, r2, #22
 8003028:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	695a      	ldr	r2, [r3, #20]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003038:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303e:	2b00      	cmp	r3, #0
 8003040:	d103      	bne.n	800304a <HAL_DMA_IRQHandler+0x736>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003046:	2b00      	cmp	r3, #0
 8003048:	d007      	beq.n	800305a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f022 0208 	bic.w	r2, r2, #8
 8003058:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800305e:	f003 031f 	and.w	r3, r3, #31
 8003062:	223f      	movs	r2, #63	; 0x3f
 8003064:	409a      	lsls	r2, r3
 8003066:	6a3b      	ldr	r3, [r7, #32]
 8003068:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2201      	movs	r2, #1
 8003076:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800307e:	2b00      	cmp	r3, #0
 8003080:	f000 834a 	beq.w	8003718 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	4798      	blx	r3
          }
          return;
 800308c:	e344      	b.n	8003718 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d018      	beq.n	80030ce <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d108      	bne.n	80030bc <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d02c      	beq.n	800310c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	4798      	blx	r3
 80030ba:	e027      	b.n	800310c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d023      	beq.n	800310c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	4798      	blx	r3
 80030cc:	e01e      	b.n	800310c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d10f      	bne.n	80030fc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f022 0210 	bic.w	r2, r2, #16
 80030ea:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2200      	movs	r2, #0
 80030f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003100:	2b00      	cmp	r3, #0
 8003102:	d003      	beq.n	800310c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003110:	2b00      	cmp	r3, #0
 8003112:	f000 8306 	beq.w	8003722 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800311a:	f003 0301 	and.w	r3, r3, #1
 800311e:	2b00      	cmp	r3, #0
 8003120:	f000 8088 	beq.w	8003234 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2204      	movs	r2, #4
 8003128:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a7a      	ldr	r2, [pc, #488]	; (800331c <HAL_DMA_IRQHandler+0xa08>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d04a      	beq.n	80031cc <HAL_DMA_IRQHandler+0x8b8>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a79      	ldr	r2, [pc, #484]	; (8003320 <HAL_DMA_IRQHandler+0xa0c>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d045      	beq.n	80031cc <HAL_DMA_IRQHandler+0x8b8>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a77      	ldr	r2, [pc, #476]	; (8003324 <HAL_DMA_IRQHandler+0xa10>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d040      	beq.n	80031cc <HAL_DMA_IRQHandler+0x8b8>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a76      	ldr	r2, [pc, #472]	; (8003328 <HAL_DMA_IRQHandler+0xa14>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d03b      	beq.n	80031cc <HAL_DMA_IRQHandler+0x8b8>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a74      	ldr	r2, [pc, #464]	; (800332c <HAL_DMA_IRQHandler+0xa18>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d036      	beq.n	80031cc <HAL_DMA_IRQHandler+0x8b8>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a73      	ldr	r2, [pc, #460]	; (8003330 <HAL_DMA_IRQHandler+0xa1c>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d031      	beq.n	80031cc <HAL_DMA_IRQHandler+0x8b8>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a71      	ldr	r2, [pc, #452]	; (8003334 <HAL_DMA_IRQHandler+0xa20>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d02c      	beq.n	80031cc <HAL_DMA_IRQHandler+0x8b8>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a70      	ldr	r2, [pc, #448]	; (8003338 <HAL_DMA_IRQHandler+0xa24>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d027      	beq.n	80031cc <HAL_DMA_IRQHandler+0x8b8>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a6e      	ldr	r2, [pc, #440]	; (800333c <HAL_DMA_IRQHandler+0xa28>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d022      	beq.n	80031cc <HAL_DMA_IRQHandler+0x8b8>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a6d      	ldr	r2, [pc, #436]	; (8003340 <HAL_DMA_IRQHandler+0xa2c>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d01d      	beq.n	80031cc <HAL_DMA_IRQHandler+0x8b8>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a6b      	ldr	r2, [pc, #428]	; (8003344 <HAL_DMA_IRQHandler+0xa30>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d018      	beq.n	80031cc <HAL_DMA_IRQHandler+0x8b8>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a6a      	ldr	r2, [pc, #424]	; (8003348 <HAL_DMA_IRQHandler+0xa34>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d013      	beq.n	80031cc <HAL_DMA_IRQHandler+0x8b8>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a68      	ldr	r2, [pc, #416]	; (800334c <HAL_DMA_IRQHandler+0xa38>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d00e      	beq.n	80031cc <HAL_DMA_IRQHandler+0x8b8>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a67      	ldr	r2, [pc, #412]	; (8003350 <HAL_DMA_IRQHandler+0xa3c>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d009      	beq.n	80031cc <HAL_DMA_IRQHandler+0x8b8>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a65      	ldr	r2, [pc, #404]	; (8003354 <HAL_DMA_IRQHandler+0xa40>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d004      	beq.n	80031cc <HAL_DMA_IRQHandler+0x8b8>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a64      	ldr	r2, [pc, #400]	; (8003358 <HAL_DMA_IRQHandler+0xa44>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d108      	bne.n	80031de <HAL_DMA_IRQHandler+0x8ca>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f022 0201 	bic.w	r2, r2, #1
 80031da:	601a      	str	r2, [r3, #0]
 80031dc:	e007      	b.n	80031ee <HAL_DMA_IRQHandler+0x8da>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f022 0201 	bic.w	r2, r2, #1
 80031ec:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	3301      	adds	r3, #1
 80031f2:	60fb      	str	r3, [r7, #12]
 80031f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d307      	bcc.n	800320a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 0301 	and.w	r3, r3, #1
 8003204:	2b00      	cmp	r3, #0
 8003206:	d1f2      	bne.n	80031ee <HAL_DMA_IRQHandler+0x8da>
 8003208:	e000      	b.n	800320c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800320a:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0301 	and.w	r3, r3, #1
 800321e:	2b00      	cmp	r3, #0
 8003220:	d004      	beq.n	800322c <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2203      	movs	r2, #3
 8003226:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800322a:	e003      	b.n	8003234 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003238:	2b00      	cmp	r3, #0
 800323a:	f000 8272 	beq.w	8003722 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	4798      	blx	r3
 8003246:	e26c      	b.n	8003722 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a43      	ldr	r2, [pc, #268]	; (800335c <HAL_DMA_IRQHandler+0xa48>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d022      	beq.n	8003298 <HAL_DMA_IRQHandler+0x984>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a42      	ldr	r2, [pc, #264]	; (8003360 <HAL_DMA_IRQHandler+0xa4c>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d01d      	beq.n	8003298 <HAL_DMA_IRQHandler+0x984>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a40      	ldr	r2, [pc, #256]	; (8003364 <HAL_DMA_IRQHandler+0xa50>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d018      	beq.n	8003298 <HAL_DMA_IRQHandler+0x984>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a3f      	ldr	r2, [pc, #252]	; (8003368 <HAL_DMA_IRQHandler+0xa54>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d013      	beq.n	8003298 <HAL_DMA_IRQHandler+0x984>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a3d      	ldr	r2, [pc, #244]	; (800336c <HAL_DMA_IRQHandler+0xa58>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d00e      	beq.n	8003298 <HAL_DMA_IRQHandler+0x984>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a3c      	ldr	r2, [pc, #240]	; (8003370 <HAL_DMA_IRQHandler+0xa5c>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d009      	beq.n	8003298 <HAL_DMA_IRQHandler+0x984>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a3a      	ldr	r2, [pc, #232]	; (8003374 <HAL_DMA_IRQHandler+0xa60>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d004      	beq.n	8003298 <HAL_DMA_IRQHandler+0x984>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a39      	ldr	r2, [pc, #228]	; (8003378 <HAL_DMA_IRQHandler+0xa64>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d101      	bne.n	800329c <HAL_DMA_IRQHandler+0x988>
 8003298:	2301      	movs	r3, #1
 800329a:	e000      	b.n	800329e <HAL_DMA_IRQHandler+0x98a>
 800329c:	2300      	movs	r3, #0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	f000 823f 	beq.w	8003722 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032b0:	f003 031f 	and.w	r3, r3, #31
 80032b4:	2204      	movs	r2, #4
 80032b6:	409a      	lsls	r2, r3
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	4013      	ands	r3, r2
 80032bc:	2b00      	cmp	r3, #0
 80032be:	f000 80cd 	beq.w	800345c <HAL_DMA_IRQHandler+0xb48>
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	f003 0304 	and.w	r3, r3, #4
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	f000 80c7 	beq.w	800345c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032d2:	f003 031f 	and.w	r3, r3, #31
 80032d6:	2204      	movs	r2, #4
 80032d8:	409a      	lsls	r2, r3
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d049      	beq.n	800337c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d109      	bne.n	8003306 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	f000 8210 	beq.w	800371c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003304:	e20a      	b.n	800371c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330a:	2b00      	cmp	r3, #0
 800330c:	f000 8206 	beq.w	800371c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003318:	e200      	b.n	800371c <HAL_DMA_IRQHandler+0xe08>
 800331a:	bf00      	nop
 800331c:	40020010 	.word	0x40020010
 8003320:	40020028 	.word	0x40020028
 8003324:	40020040 	.word	0x40020040
 8003328:	40020058 	.word	0x40020058
 800332c:	40020070 	.word	0x40020070
 8003330:	40020088 	.word	0x40020088
 8003334:	400200a0 	.word	0x400200a0
 8003338:	400200b8 	.word	0x400200b8
 800333c:	40020410 	.word	0x40020410
 8003340:	40020428 	.word	0x40020428
 8003344:	40020440 	.word	0x40020440
 8003348:	40020458 	.word	0x40020458
 800334c:	40020470 	.word	0x40020470
 8003350:	40020488 	.word	0x40020488
 8003354:	400204a0 	.word	0x400204a0
 8003358:	400204b8 	.word	0x400204b8
 800335c:	58025408 	.word	0x58025408
 8003360:	5802541c 	.word	0x5802541c
 8003364:	58025430 	.word	0x58025430
 8003368:	58025444 	.word	0x58025444
 800336c:	58025458 	.word	0x58025458
 8003370:	5802546c 	.word	0x5802546c
 8003374:	58025480 	.word	0x58025480
 8003378:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	f003 0320 	and.w	r3, r3, #32
 8003382:	2b00      	cmp	r3, #0
 8003384:	d160      	bne.n	8003448 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a8c      	ldr	r2, [pc, #560]	; (80035bc <HAL_DMA_IRQHandler+0xca8>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d04a      	beq.n	8003426 <HAL_DMA_IRQHandler+0xb12>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a8a      	ldr	r2, [pc, #552]	; (80035c0 <HAL_DMA_IRQHandler+0xcac>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d045      	beq.n	8003426 <HAL_DMA_IRQHandler+0xb12>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a89      	ldr	r2, [pc, #548]	; (80035c4 <HAL_DMA_IRQHandler+0xcb0>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d040      	beq.n	8003426 <HAL_DMA_IRQHandler+0xb12>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a87      	ldr	r2, [pc, #540]	; (80035c8 <HAL_DMA_IRQHandler+0xcb4>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d03b      	beq.n	8003426 <HAL_DMA_IRQHandler+0xb12>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a86      	ldr	r2, [pc, #536]	; (80035cc <HAL_DMA_IRQHandler+0xcb8>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d036      	beq.n	8003426 <HAL_DMA_IRQHandler+0xb12>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a84      	ldr	r2, [pc, #528]	; (80035d0 <HAL_DMA_IRQHandler+0xcbc>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d031      	beq.n	8003426 <HAL_DMA_IRQHandler+0xb12>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a83      	ldr	r2, [pc, #524]	; (80035d4 <HAL_DMA_IRQHandler+0xcc0>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d02c      	beq.n	8003426 <HAL_DMA_IRQHandler+0xb12>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a81      	ldr	r2, [pc, #516]	; (80035d8 <HAL_DMA_IRQHandler+0xcc4>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d027      	beq.n	8003426 <HAL_DMA_IRQHandler+0xb12>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a80      	ldr	r2, [pc, #512]	; (80035dc <HAL_DMA_IRQHandler+0xcc8>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d022      	beq.n	8003426 <HAL_DMA_IRQHandler+0xb12>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a7e      	ldr	r2, [pc, #504]	; (80035e0 <HAL_DMA_IRQHandler+0xccc>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d01d      	beq.n	8003426 <HAL_DMA_IRQHandler+0xb12>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a7d      	ldr	r2, [pc, #500]	; (80035e4 <HAL_DMA_IRQHandler+0xcd0>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d018      	beq.n	8003426 <HAL_DMA_IRQHandler+0xb12>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a7b      	ldr	r2, [pc, #492]	; (80035e8 <HAL_DMA_IRQHandler+0xcd4>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d013      	beq.n	8003426 <HAL_DMA_IRQHandler+0xb12>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a7a      	ldr	r2, [pc, #488]	; (80035ec <HAL_DMA_IRQHandler+0xcd8>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d00e      	beq.n	8003426 <HAL_DMA_IRQHandler+0xb12>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a78      	ldr	r2, [pc, #480]	; (80035f0 <HAL_DMA_IRQHandler+0xcdc>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d009      	beq.n	8003426 <HAL_DMA_IRQHandler+0xb12>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a77      	ldr	r2, [pc, #476]	; (80035f4 <HAL_DMA_IRQHandler+0xce0>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d004      	beq.n	8003426 <HAL_DMA_IRQHandler+0xb12>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a75      	ldr	r2, [pc, #468]	; (80035f8 <HAL_DMA_IRQHandler+0xce4>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d108      	bne.n	8003438 <HAL_DMA_IRQHandler+0xb24>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f022 0208 	bic.w	r2, r2, #8
 8003434:	601a      	str	r2, [r3, #0]
 8003436:	e007      	b.n	8003448 <HAL_DMA_IRQHandler+0xb34>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f022 0204 	bic.w	r2, r2, #4
 8003446:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344c:	2b00      	cmp	r3, #0
 800344e:	f000 8165 	beq.w	800371c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800345a:	e15f      	b.n	800371c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003460:	f003 031f 	and.w	r3, r3, #31
 8003464:	2202      	movs	r2, #2
 8003466:	409a      	lsls	r2, r3
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	4013      	ands	r3, r2
 800346c:	2b00      	cmp	r3, #0
 800346e:	f000 80c5 	beq.w	80035fc <HAL_DMA_IRQHandler+0xce8>
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	f003 0302 	and.w	r3, r3, #2
 8003478:	2b00      	cmp	r3, #0
 800347a:	f000 80bf 	beq.w	80035fc <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003482:	f003 031f 	and.w	r3, r3, #31
 8003486:	2202      	movs	r2, #2
 8003488:	409a      	lsls	r2, r3
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d018      	beq.n	80034ca <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d109      	bne.n	80034b6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	f000 813a 	beq.w	8003720 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80034b4:	e134      	b.n	8003720 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	f000 8130 	beq.w	8003720 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80034c8:	e12a      	b.n	8003720 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	f003 0320 	and.w	r3, r3, #32
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d168      	bne.n	80035a6 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a38      	ldr	r2, [pc, #224]	; (80035bc <HAL_DMA_IRQHandler+0xca8>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d04a      	beq.n	8003574 <HAL_DMA_IRQHandler+0xc60>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a37      	ldr	r2, [pc, #220]	; (80035c0 <HAL_DMA_IRQHandler+0xcac>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d045      	beq.n	8003574 <HAL_DMA_IRQHandler+0xc60>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a35      	ldr	r2, [pc, #212]	; (80035c4 <HAL_DMA_IRQHandler+0xcb0>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d040      	beq.n	8003574 <HAL_DMA_IRQHandler+0xc60>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a34      	ldr	r2, [pc, #208]	; (80035c8 <HAL_DMA_IRQHandler+0xcb4>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d03b      	beq.n	8003574 <HAL_DMA_IRQHandler+0xc60>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a32      	ldr	r2, [pc, #200]	; (80035cc <HAL_DMA_IRQHandler+0xcb8>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d036      	beq.n	8003574 <HAL_DMA_IRQHandler+0xc60>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a31      	ldr	r2, [pc, #196]	; (80035d0 <HAL_DMA_IRQHandler+0xcbc>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d031      	beq.n	8003574 <HAL_DMA_IRQHandler+0xc60>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a2f      	ldr	r2, [pc, #188]	; (80035d4 <HAL_DMA_IRQHandler+0xcc0>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d02c      	beq.n	8003574 <HAL_DMA_IRQHandler+0xc60>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a2e      	ldr	r2, [pc, #184]	; (80035d8 <HAL_DMA_IRQHandler+0xcc4>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d027      	beq.n	8003574 <HAL_DMA_IRQHandler+0xc60>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a2c      	ldr	r2, [pc, #176]	; (80035dc <HAL_DMA_IRQHandler+0xcc8>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d022      	beq.n	8003574 <HAL_DMA_IRQHandler+0xc60>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a2b      	ldr	r2, [pc, #172]	; (80035e0 <HAL_DMA_IRQHandler+0xccc>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d01d      	beq.n	8003574 <HAL_DMA_IRQHandler+0xc60>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a29      	ldr	r2, [pc, #164]	; (80035e4 <HAL_DMA_IRQHandler+0xcd0>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d018      	beq.n	8003574 <HAL_DMA_IRQHandler+0xc60>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a28      	ldr	r2, [pc, #160]	; (80035e8 <HAL_DMA_IRQHandler+0xcd4>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d013      	beq.n	8003574 <HAL_DMA_IRQHandler+0xc60>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a26      	ldr	r2, [pc, #152]	; (80035ec <HAL_DMA_IRQHandler+0xcd8>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d00e      	beq.n	8003574 <HAL_DMA_IRQHandler+0xc60>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a25      	ldr	r2, [pc, #148]	; (80035f0 <HAL_DMA_IRQHandler+0xcdc>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d009      	beq.n	8003574 <HAL_DMA_IRQHandler+0xc60>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a23      	ldr	r2, [pc, #140]	; (80035f4 <HAL_DMA_IRQHandler+0xce0>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d004      	beq.n	8003574 <HAL_DMA_IRQHandler+0xc60>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a22      	ldr	r2, [pc, #136]	; (80035f8 <HAL_DMA_IRQHandler+0xce4>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d108      	bne.n	8003586 <HAL_DMA_IRQHandler+0xc72>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f022 0214 	bic.w	r2, r2, #20
 8003582:	601a      	str	r2, [r3, #0]
 8003584:	e007      	b.n	8003596 <HAL_DMA_IRQHandler+0xc82>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f022 020a 	bic.w	r2, r2, #10
 8003594:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2201      	movs	r2, #1
 80035a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	f000 80b8 	beq.w	8003720 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80035b8:	e0b2      	b.n	8003720 <HAL_DMA_IRQHandler+0xe0c>
 80035ba:	bf00      	nop
 80035bc:	40020010 	.word	0x40020010
 80035c0:	40020028 	.word	0x40020028
 80035c4:	40020040 	.word	0x40020040
 80035c8:	40020058 	.word	0x40020058
 80035cc:	40020070 	.word	0x40020070
 80035d0:	40020088 	.word	0x40020088
 80035d4:	400200a0 	.word	0x400200a0
 80035d8:	400200b8 	.word	0x400200b8
 80035dc:	40020410 	.word	0x40020410
 80035e0:	40020428 	.word	0x40020428
 80035e4:	40020440 	.word	0x40020440
 80035e8:	40020458 	.word	0x40020458
 80035ec:	40020470 	.word	0x40020470
 80035f0:	40020488 	.word	0x40020488
 80035f4:	400204a0 	.word	0x400204a0
 80035f8:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003600:	f003 031f 	and.w	r3, r3, #31
 8003604:	2208      	movs	r2, #8
 8003606:	409a      	lsls	r2, r3
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	4013      	ands	r3, r2
 800360c:	2b00      	cmp	r3, #0
 800360e:	f000 8088 	beq.w	8003722 <HAL_DMA_IRQHandler+0xe0e>
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	f003 0308 	and.w	r3, r3, #8
 8003618:	2b00      	cmp	r3, #0
 800361a:	f000 8082 	beq.w	8003722 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a41      	ldr	r2, [pc, #260]	; (8003728 <HAL_DMA_IRQHandler+0xe14>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d04a      	beq.n	80036be <HAL_DMA_IRQHandler+0xdaa>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a3f      	ldr	r2, [pc, #252]	; (800372c <HAL_DMA_IRQHandler+0xe18>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d045      	beq.n	80036be <HAL_DMA_IRQHandler+0xdaa>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a3e      	ldr	r2, [pc, #248]	; (8003730 <HAL_DMA_IRQHandler+0xe1c>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d040      	beq.n	80036be <HAL_DMA_IRQHandler+0xdaa>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a3c      	ldr	r2, [pc, #240]	; (8003734 <HAL_DMA_IRQHandler+0xe20>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d03b      	beq.n	80036be <HAL_DMA_IRQHandler+0xdaa>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a3b      	ldr	r2, [pc, #236]	; (8003738 <HAL_DMA_IRQHandler+0xe24>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d036      	beq.n	80036be <HAL_DMA_IRQHandler+0xdaa>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a39      	ldr	r2, [pc, #228]	; (800373c <HAL_DMA_IRQHandler+0xe28>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d031      	beq.n	80036be <HAL_DMA_IRQHandler+0xdaa>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a38      	ldr	r2, [pc, #224]	; (8003740 <HAL_DMA_IRQHandler+0xe2c>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d02c      	beq.n	80036be <HAL_DMA_IRQHandler+0xdaa>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a36      	ldr	r2, [pc, #216]	; (8003744 <HAL_DMA_IRQHandler+0xe30>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d027      	beq.n	80036be <HAL_DMA_IRQHandler+0xdaa>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a35      	ldr	r2, [pc, #212]	; (8003748 <HAL_DMA_IRQHandler+0xe34>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d022      	beq.n	80036be <HAL_DMA_IRQHandler+0xdaa>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a33      	ldr	r2, [pc, #204]	; (800374c <HAL_DMA_IRQHandler+0xe38>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d01d      	beq.n	80036be <HAL_DMA_IRQHandler+0xdaa>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a32      	ldr	r2, [pc, #200]	; (8003750 <HAL_DMA_IRQHandler+0xe3c>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d018      	beq.n	80036be <HAL_DMA_IRQHandler+0xdaa>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a30      	ldr	r2, [pc, #192]	; (8003754 <HAL_DMA_IRQHandler+0xe40>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d013      	beq.n	80036be <HAL_DMA_IRQHandler+0xdaa>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a2f      	ldr	r2, [pc, #188]	; (8003758 <HAL_DMA_IRQHandler+0xe44>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d00e      	beq.n	80036be <HAL_DMA_IRQHandler+0xdaa>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a2d      	ldr	r2, [pc, #180]	; (800375c <HAL_DMA_IRQHandler+0xe48>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d009      	beq.n	80036be <HAL_DMA_IRQHandler+0xdaa>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a2c      	ldr	r2, [pc, #176]	; (8003760 <HAL_DMA_IRQHandler+0xe4c>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d004      	beq.n	80036be <HAL_DMA_IRQHandler+0xdaa>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a2a      	ldr	r2, [pc, #168]	; (8003764 <HAL_DMA_IRQHandler+0xe50>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d108      	bne.n	80036d0 <HAL_DMA_IRQHandler+0xdbc>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f022 021c 	bic.w	r2, r2, #28
 80036cc:	601a      	str	r2, [r3, #0]
 80036ce:	e007      	b.n	80036e0 <HAL_DMA_IRQHandler+0xdcc>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f022 020e 	bic.w	r2, r2, #14
 80036de:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036e4:	f003 031f 	and.w	r3, r3, #31
 80036e8:	2201      	movs	r2, #1
 80036ea:	409a      	lsls	r2, r3
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2201      	movs	r2, #1
 80036f4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2201      	movs	r2, #1
 8003702:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800370a:	2b00      	cmp	r3, #0
 800370c:	d009      	beq.n	8003722 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	4798      	blx	r3
 8003716:	e004      	b.n	8003722 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003718:	bf00      	nop
 800371a:	e002      	b.n	8003722 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800371c:	bf00      	nop
 800371e:	e000      	b.n	8003722 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003720:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003722:	3728      	adds	r7, #40	; 0x28
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}
 8003728:	40020010 	.word	0x40020010
 800372c:	40020028 	.word	0x40020028
 8003730:	40020040 	.word	0x40020040
 8003734:	40020058 	.word	0x40020058
 8003738:	40020070 	.word	0x40020070
 800373c:	40020088 	.word	0x40020088
 8003740:	400200a0 	.word	0x400200a0
 8003744:	400200b8 	.word	0x400200b8
 8003748:	40020410 	.word	0x40020410
 800374c:	40020428 	.word	0x40020428
 8003750:	40020440 	.word	0x40020440
 8003754:	40020458 	.word	0x40020458
 8003758:	40020470 	.word	0x40020470
 800375c:	40020488 	.word	0x40020488
 8003760:	400204a0 	.word	0x400204a0
 8003764:	400204b8 	.word	0x400204b8

08003768 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003768:	b480      	push	{r7}
 800376a:	b085      	sub	sp, #20
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a42      	ldr	r2, [pc, #264]	; (8003880 <DMA_CalcBaseAndBitshift+0x118>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d04a      	beq.n	8003810 <DMA_CalcBaseAndBitshift+0xa8>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a41      	ldr	r2, [pc, #260]	; (8003884 <DMA_CalcBaseAndBitshift+0x11c>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d045      	beq.n	8003810 <DMA_CalcBaseAndBitshift+0xa8>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a3f      	ldr	r2, [pc, #252]	; (8003888 <DMA_CalcBaseAndBitshift+0x120>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d040      	beq.n	8003810 <DMA_CalcBaseAndBitshift+0xa8>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a3e      	ldr	r2, [pc, #248]	; (800388c <DMA_CalcBaseAndBitshift+0x124>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d03b      	beq.n	8003810 <DMA_CalcBaseAndBitshift+0xa8>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a3c      	ldr	r2, [pc, #240]	; (8003890 <DMA_CalcBaseAndBitshift+0x128>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d036      	beq.n	8003810 <DMA_CalcBaseAndBitshift+0xa8>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a3b      	ldr	r2, [pc, #236]	; (8003894 <DMA_CalcBaseAndBitshift+0x12c>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d031      	beq.n	8003810 <DMA_CalcBaseAndBitshift+0xa8>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a39      	ldr	r2, [pc, #228]	; (8003898 <DMA_CalcBaseAndBitshift+0x130>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d02c      	beq.n	8003810 <DMA_CalcBaseAndBitshift+0xa8>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a38      	ldr	r2, [pc, #224]	; (800389c <DMA_CalcBaseAndBitshift+0x134>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d027      	beq.n	8003810 <DMA_CalcBaseAndBitshift+0xa8>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a36      	ldr	r2, [pc, #216]	; (80038a0 <DMA_CalcBaseAndBitshift+0x138>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d022      	beq.n	8003810 <DMA_CalcBaseAndBitshift+0xa8>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a35      	ldr	r2, [pc, #212]	; (80038a4 <DMA_CalcBaseAndBitshift+0x13c>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d01d      	beq.n	8003810 <DMA_CalcBaseAndBitshift+0xa8>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a33      	ldr	r2, [pc, #204]	; (80038a8 <DMA_CalcBaseAndBitshift+0x140>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d018      	beq.n	8003810 <DMA_CalcBaseAndBitshift+0xa8>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a32      	ldr	r2, [pc, #200]	; (80038ac <DMA_CalcBaseAndBitshift+0x144>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d013      	beq.n	8003810 <DMA_CalcBaseAndBitshift+0xa8>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a30      	ldr	r2, [pc, #192]	; (80038b0 <DMA_CalcBaseAndBitshift+0x148>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d00e      	beq.n	8003810 <DMA_CalcBaseAndBitshift+0xa8>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a2f      	ldr	r2, [pc, #188]	; (80038b4 <DMA_CalcBaseAndBitshift+0x14c>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d009      	beq.n	8003810 <DMA_CalcBaseAndBitshift+0xa8>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a2d      	ldr	r2, [pc, #180]	; (80038b8 <DMA_CalcBaseAndBitshift+0x150>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d004      	beq.n	8003810 <DMA_CalcBaseAndBitshift+0xa8>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a2c      	ldr	r2, [pc, #176]	; (80038bc <DMA_CalcBaseAndBitshift+0x154>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d101      	bne.n	8003814 <DMA_CalcBaseAndBitshift+0xac>
 8003810:	2301      	movs	r3, #1
 8003812:	e000      	b.n	8003816 <DMA_CalcBaseAndBitshift+0xae>
 8003814:	2300      	movs	r3, #0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d024      	beq.n	8003864 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	b2db      	uxtb	r3, r3
 8003820:	3b10      	subs	r3, #16
 8003822:	4a27      	ldr	r2, [pc, #156]	; (80038c0 <DMA_CalcBaseAndBitshift+0x158>)
 8003824:	fba2 2303 	umull	r2, r3, r2, r3
 8003828:	091b      	lsrs	r3, r3, #4
 800382a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f003 0307 	and.w	r3, r3, #7
 8003832:	4a24      	ldr	r2, [pc, #144]	; (80038c4 <DMA_CalcBaseAndBitshift+0x15c>)
 8003834:	5cd3      	ldrb	r3, [r2, r3]
 8003836:	461a      	mov	r2, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2b03      	cmp	r3, #3
 8003840:	d908      	bls.n	8003854 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	461a      	mov	r2, r3
 8003848:	4b1f      	ldr	r3, [pc, #124]	; (80038c8 <DMA_CalcBaseAndBitshift+0x160>)
 800384a:	4013      	ands	r3, r2
 800384c:	1d1a      	adds	r2, r3, #4
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	659a      	str	r2, [r3, #88]	; 0x58
 8003852:	e00d      	b.n	8003870 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	461a      	mov	r2, r3
 800385a:	4b1b      	ldr	r3, [pc, #108]	; (80038c8 <DMA_CalcBaseAndBitshift+0x160>)
 800385c:	4013      	ands	r3, r2
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	6593      	str	r3, [r2, #88]	; 0x58
 8003862:	e005      	b.n	8003870 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003874:	4618      	mov	r0, r3
 8003876:	3714      	adds	r7, #20
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr
 8003880:	40020010 	.word	0x40020010
 8003884:	40020028 	.word	0x40020028
 8003888:	40020040 	.word	0x40020040
 800388c:	40020058 	.word	0x40020058
 8003890:	40020070 	.word	0x40020070
 8003894:	40020088 	.word	0x40020088
 8003898:	400200a0 	.word	0x400200a0
 800389c:	400200b8 	.word	0x400200b8
 80038a0:	40020410 	.word	0x40020410
 80038a4:	40020428 	.word	0x40020428
 80038a8:	40020440 	.word	0x40020440
 80038ac:	40020458 	.word	0x40020458
 80038b0:	40020470 	.word	0x40020470
 80038b4:	40020488 	.word	0x40020488
 80038b8:	400204a0 	.word	0x400204a0
 80038bc:	400204b8 	.word	0x400204b8
 80038c0:	aaaaaaab 	.word	0xaaaaaaab
 80038c4:	080200dc 	.word	0x080200dc
 80038c8:	fffffc00 	.word	0xfffffc00

080038cc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b085      	sub	sp, #20
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038d4:	2300      	movs	r3, #0
 80038d6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	699b      	ldr	r3, [r3, #24]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d120      	bne.n	8003922 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e4:	2b03      	cmp	r3, #3
 80038e6:	d858      	bhi.n	800399a <DMA_CheckFifoParam+0xce>
 80038e8:	a201      	add	r2, pc, #4	; (adr r2, 80038f0 <DMA_CheckFifoParam+0x24>)
 80038ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ee:	bf00      	nop
 80038f0:	08003901 	.word	0x08003901
 80038f4:	08003913 	.word	0x08003913
 80038f8:	08003901 	.word	0x08003901
 80038fc:	0800399b 	.word	0x0800399b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003904:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d048      	beq.n	800399e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003910:	e045      	b.n	800399e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003916:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800391a:	d142      	bne.n	80039a2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003920:	e03f      	b.n	80039a2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	699b      	ldr	r3, [r3, #24]
 8003926:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800392a:	d123      	bne.n	8003974 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003930:	2b03      	cmp	r3, #3
 8003932:	d838      	bhi.n	80039a6 <DMA_CheckFifoParam+0xda>
 8003934:	a201      	add	r2, pc, #4	; (adr r2, 800393c <DMA_CheckFifoParam+0x70>)
 8003936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800393a:	bf00      	nop
 800393c:	0800394d 	.word	0x0800394d
 8003940:	08003953 	.word	0x08003953
 8003944:	0800394d 	.word	0x0800394d
 8003948:	08003965 	.word	0x08003965
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	73fb      	strb	r3, [r7, #15]
        break;
 8003950:	e030      	b.n	80039b4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003956:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d025      	beq.n	80039aa <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003962:	e022      	b.n	80039aa <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003968:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800396c:	d11f      	bne.n	80039ae <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003972:	e01c      	b.n	80039ae <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003978:	2b02      	cmp	r3, #2
 800397a:	d902      	bls.n	8003982 <DMA_CheckFifoParam+0xb6>
 800397c:	2b03      	cmp	r3, #3
 800397e:	d003      	beq.n	8003988 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003980:	e018      	b.n	80039b4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	73fb      	strb	r3, [r7, #15]
        break;
 8003986:	e015      	b.n	80039b4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800398c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003990:	2b00      	cmp	r3, #0
 8003992:	d00e      	beq.n	80039b2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	73fb      	strb	r3, [r7, #15]
    break;
 8003998:	e00b      	b.n	80039b2 <DMA_CheckFifoParam+0xe6>
        break;
 800399a:	bf00      	nop
 800399c:	e00a      	b.n	80039b4 <DMA_CheckFifoParam+0xe8>
        break;
 800399e:	bf00      	nop
 80039a0:	e008      	b.n	80039b4 <DMA_CheckFifoParam+0xe8>
        break;
 80039a2:	bf00      	nop
 80039a4:	e006      	b.n	80039b4 <DMA_CheckFifoParam+0xe8>
        break;
 80039a6:	bf00      	nop
 80039a8:	e004      	b.n	80039b4 <DMA_CheckFifoParam+0xe8>
        break;
 80039aa:	bf00      	nop
 80039ac:	e002      	b.n	80039b4 <DMA_CheckFifoParam+0xe8>
        break;
 80039ae:	bf00      	nop
 80039b0:	e000      	b.n	80039b4 <DMA_CheckFifoParam+0xe8>
    break;
 80039b2:	bf00      	nop
    }
  }

  return status;
 80039b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3714      	adds	r7, #20
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr
 80039c2:	bf00      	nop

080039c4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b085      	sub	sp, #20
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a38      	ldr	r2, [pc, #224]	; (8003ab8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d022      	beq.n	8003a22 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a36      	ldr	r2, [pc, #216]	; (8003abc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d01d      	beq.n	8003a22 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a35      	ldr	r2, [pc, #212]	; (8003ac0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d018      	beq.n	8003a22 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a33      	ldr	r2, [pc, #204]	; (8003ac4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d013      	beq.n	8003a22 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a32      	ldr	r2, [pc, #200]	; (8003ac8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d00e      	beq.n	8003a22 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a30      	ldr	r2, [pc, #192]	; (8003acc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d009      	beq.n	8003a22 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a2f      	ldr	r2, [pc, #188]	; (8003ad0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d004      	beq.n	8003a22 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a2d      	ldr	r2, [pc, #180]	; (8003ad4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d101      	bne.n	8003a26 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003a22:	2301      	movs	r3, #1
 8003a24:	e000      	b.n	8003a28 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003a26:	2300      	movs	r3, #0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d01a      	beq.n	8003a62 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	3b08      	subs	r3, #8
 8003a34:	4a28      	ldr	r2, [pc, #160]	; (8003ad8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003a36:	fba2 2303 	umull	r2, r3, r2, r3
 8003a3a:	091b      	lsrs	r3, r3, #4
 8003a3c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003a3e:	68fa      	ldr	r2, [r7, #12]
 8003a40:	4b26      	ldr	r3, [pc, #152]	; (8003adc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003a42:	4413      	add	r3, r2
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	461a      	mov	r2, r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	4a24      	ldr	r2, [pc, #144]	; (8003ae0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003a50:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	f003 031f 	and.w	r3, r3, #31
 8003a58:	2201      	movs	r2, #1
 8003a5a:	409a      	lsls	r2, r3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003a60:	e024      	b.n	8003aac <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	3b10      	subs	r3, #16
 8003a6a:	4a1e      	ldr	r2, [pc, #120]	; (8003ae4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a70:	091b      	lsrs	r3, r3, #4
 8003a72:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	4a1c      	ldr	r2, [pc, #112]	; (8003ae8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d806      	bhi.n	8003a8a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	4a1b      	ldr	r2, [pc, #108]	; (8003aec <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d902      	bls.n	8003a8a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	3308      	adds	r3, #8
 8003a88:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003a8a:	68fa      	ldr	r2, [r7, #12]
 8003a8c:	4b18      	ldr	r3, [pc, #96]	; (8003af0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003a8e:	4413      	add	r3, r2
 8003a90:	009b      	lsls	r3, r3, #2
 8003a92:	461a      	mov	r2, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	4a16      	ldr	r2, [pc, #88]	; (8003af4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003a9c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	f003 031f 	and.w	r3, r3, #31
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	409a      	lsls	r2, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003aac:	bf00      	nop
 8003aae:	3714      	adds	r7, #20
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr
 8003ab8:	58025408 	.word	0x58025408
 8003abc:	5802541c 	.word	0x5802541c
 8003ac0:	58025430 	.word	0x58025430
 8003ac4:	58025444 	.word	0x58025444
 8003ac8:	58025458 	.word	0x58025458
 8003acc:	5802546c 	.word	0x5802546c
 8003ad0:	58025480 	.word	0x58025480
 8003ad4:	58025494 	.word	0x58025494
 8003ad8:	cccccccd 	.word	0xcccccccd
 8003adc:	16009600 	.word	0x16009600
 8003ae0:	58025880 	.word	0x58025880
 8003ae4:	aaaaaaab 	.word	0xaaaaaaab
 8003ae8:	400204b8 	.word	0x400204b8
 8003aec:	4002040f 	.word	0x4002040f
 8003af0:	10008200 	.word	0x10008200
 8003af4:	40020880 	.word	0x40020880

08003af8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b085      	sub	sp, #20
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d04a      	beq.n	8003ba4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2b08      	cmp	r3, #8
 8003b12:	d847      	bhi.n	8003ba4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a25      	ldr	r2, [pc, #148]	; (8003bb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d022      	beq.n	8003b64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a24      	ldr	r2, [pc, #144]	; (8003bb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d01d      	beq.n	8003b64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a22      	ldr	r2, [pc, #136]	; (8003bb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d018      	beq.n	8003b64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a21      	ldr	r2, [pc, #132]	; (8003bbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d013      	beq.n	8003b64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a1f      	ldr	r2, [pc, #124]	; (8003bc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d00e      	beq.n	8003b64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a1e      	ldr	r2, [pc, #120]	; (8003bc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d009      	beq.n	8003b64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a1c      	ldr	r2, [pc, #112]	; (8003bc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d004      	beq.n	8003b64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a1b      	ldr	r2, [pc, #108]	; (8003bcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d101      	bne.n	8003b68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003b64:	2301      	movs	r3, #1
 8003b66:	e000      	b.n	8003b6a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003b68:	2300      	movs	r3, #0
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d00a      	beq.n	8003b84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003b6e:	68fa      	ldr	r2, [r7, #12]
 8003b70:	4b17      	ldr	r3, [pc, #92]	; (8003bd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003b72:	4413      	add	r3, r2
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	461a      	mov	r2, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4a15      	ldr	r2, [pc, #84]	; (8003bd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003b80:	671a      	str	r2, [r3, #112]	; 0x70
 8003b82:	e009      	b.n	8003b98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003b84:	68fa      	ldr	r2, [r7, #12]
 8003b86:	4b14      	ldr	r3, [pc, #80]	; (8003bd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003b88:	4413      	add	r3, r2
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a11      	ldr	r2, [pc, #68]	; (8003bdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003b96:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	3b01      	subs	r3, #1
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	409a      	lsls	r2, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8003ba4:	bf00      	nop
 8003ba6:	3714      	adds	r7, #20
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr
 8003bb0:	58025408 	.word	0x58025408
 8003bb4:	5802541c 	.word	0x5802541c
 8003bb8:	58025430 	.word	0x58025430
 8003bbc:	58025444 	.word	0x58025444
 8003bc0:	58025458 	.word	0x58025458
 8003bc4:	5802546c 	.word	0x5802546c
 8003bc8:	58025480 	.word	0x58025480
 8003bcc:	58025494 	.word	0x58025494
 8003bd0:	1600963f 	.word	0x1600963f
 8003bd4:	58025940 	.word	0x58025940
 8003bd8:	1000823f 	.word	0x1000823f
 8003bdc:	40020940 	.word	0x40020940

08003be0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b084      	sub	sp, #16
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d101      	bne.n	8003bf2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e0c6      	b.n	8003d80 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d102      	bne.n	8003c00 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f006 f90a 	bl	8009e14 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2223      	movs	r2, #35	; 0x23
 8003c04:	655a      	str	r2, [r3, #84]	; 0x54

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c06:	4b60      	ldr	r3, [pc, #384]	; (8003d88 <HAL_ETH_Init+0x1a8>)
 8003c08:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003c0c:	4a5e      	ldr	r2, [pc, #376]	; (8003d88 <HAL_ETH_Init+0x1a8>)
 8003c0e:	f043 0302 	orr.w	r3, r3, #2
 8003c12:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003c16:	4b5c      	ldr	r3, [pc, #368]	; (8003d88 <HAL_ETH_Init+0x1a8>)
 8003c18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003c1c:	f003 0302 	and.w	r3, r3, #2
 8003c20:	60bb      	str	r3, [r7, #8]
 8003c22:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	7a1b      	ldrb	r3, [r3, #8]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d103      	bne.n	8003c34 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8003c2c:	2000      	movs	r0, #0
 8003c2e:	f7fe f8ab 	bl	8001d88 <HAL_SYSCFG_ETHInterfaceSelect>
 8003c32:	e003      	b.n	8003c3c <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8003c34:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8003c38:	f7fe f8a6 	bl	8001d88 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f042 0201 	orr.w	r2, r2, #1
 8003c4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c52:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c54:	f7fe f880 	bl	8001d58 <HAL_GetTick>
 8003c58:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003c5a:	e00f      	b.n	8003c7c <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8003c5c:	f7fe f87c 	bl	8001d58 <HAL_GetTick>
 8003c60:	4602      	mov	r2, r0
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003c6a:	d907      	bls.n	8003c7c <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2204      	movs	r2, #4
 8003c70:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	22e0      	movs	r2, #224	; 0xe0
 8003c76:	655a      	str	r2, [r3, #84]	; 0x54
      /* Return Error */
      return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e081      	b.n	8003d80 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0301 	and.w	r3, r3, #1
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d1e6      	bne.n	8003c5c <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f001 fae8 	bl	8005264 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8003c94:	f003 f834 	bl	8006d00 <HAL_RCC_GetHCLKFreq>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	4b3c      	ldr	r3, [pc, #240]	; (8003d8c <HAL_ETH_Init+0x1ac>)
 8003c9c:	fba3 2302 	umull	r2, r3, r3, r2
 8003ca0:	0c9a      	lsrs	r2, r3, #18
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	3a01      	subs	r2, #1
 8003ca8:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f001 fa3b 	bl	8005128 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8003cc8:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8003ccc:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	695b      	ldr	r3, [r3, #20]
 8003cd2:	f003 0303 	and.w	r3, r3, #3
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d007      	beq.n	8003cea <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2201      	movs	r2, #1
 8003cde:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	22e0      	movs	r2, #224	; 0xe0
 8003ce4:	655a      	str	r2, [r3, #84]	; 0x54
    /* Return Error */
    return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e04a      	b.n	8003d80 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	f241 1308 	movw	r3, #4360	; 0x1108
 8003cf2:	4413      	add	r3, r2
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	4b26      	ldr	r3, [pc, #152]	; (8003d90 <HAL_ETH_Init+0x1b0>)
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	687a      	ldr	r2, [r7, #4]
 8003cfc:	6952      	ldr	r2, [r2, #20]
 8003cfe:	0052      	lsls	r2, r2, #1
 8003d00:	6879      	ldr	r1, [r7, #4]
 8003d02:	6809      	ldr	r1, [r1, #0]
 8003d04:	431a      	orrs	r2, r3
 8003d06:	f241 1308 	movw	r3, #4360	; 0x1108
 8003d0a:	440b      	add	r3, r1
 8003d0c:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f001 fb00 	bl	8005314 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f001 fb44 	bl	80053a2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	3305      	adds	r3, #5
 8003d20:	781b      	ldrb	r3, [r3, #0]
 8003d22:	021a      	lsls	r2, r3, #8
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	3304      	adds	r3, #4
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	4619      	mov	r1, r3
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	430a      	orrs	r2, r1
 8003d34:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	3303      	adds	r3, #3
 8003d3e:	781b      	ldrb	r3, [r3, #0]
 8003d40:	061a      	lsls	r2, r3, #24
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	3302      	adds	r3, #2
 8003d48:	781b      	ldrb	r3, [r3, #0]
 8003d4a:	041b      	lsls	r3, r3, #16
 8003d4c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	3301      	adds	r3, #1
 8003d54:	781b      	ldrb	r3, [r3, #0]
 8003d56:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003d58:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003d66:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003d68:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	65da      	str	r2, [r3, #92]	; 0x5c
  heth->gState = HAL_ETH_STATE_READY;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2210      	movs	r2, #16
 8003d76:	655a      	str	r2, [r3, #84]	; 0x54
  heth->RxState = HAL_ETH_STATE_READY;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2210      	movs	r2, #16
 8003d7c:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8003d7e:	2300      	movs	r3, #0
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	3710      	adds	r7, #16
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}
 8003d88:	58024400 	.word	0x58024400
 8003d8c:	431bde83 	.word	0x431bde83
 8003d90:	ffff8001 	.word	0xffff8001

08003d94 <HAL_ETH_DescAssignMemory>:
  * @param  pBuffer1: address of buffer 1
  * @param  pBuffer2: address of buffer 2 if available
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DescAssignMemory(ETH_HandleTypeDef *heth, uint32_t Index, uint8_t *pBuffer1, uint8_t *pBuffer2)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b087      	sub	sp, #28
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	60f8      	str	r0, [r7, #12]
 8003d9c:	60b9      	str	r1, [r7, #8]
 8003d9e:	607a      	str	r2, [r7, #4]
 8003da0:	603b      	str	r3, [r7, #0]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[Index];
 8003da2:	68fa      	ldr	r2, [r7, #12]
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	330a      	adds	r3, #10
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	4413      	add	r3, r2
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	617b      	str	r3, [r7, #20]

  if((pBuffer1 == NULL) || (Index >= (uint32_t)ETH_RX_DESC_CNT))
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d002      	beq.n	8003dbc <HAL_ETH_DescAssignMemory+0x28>
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	2b03      	cmp	r3, #3
 8003dba:	d904      	bls.n	8003dc6 <HAL_ETH_DescAssignMemory+0x32>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Return Error */
    return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e021      	b.n	8003e0a <HAL_ETH_DescAssignMemory+0x76>
  }

  /* write buffer address to RDES0 */
  WRITE_REG(dmarxdesc->DESC0, (uint32_t)pBuffer1);
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	601a      	str	r2, [r3, #0]
  /* store buffer address */
  WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)pBuffer1);
 8003dcc:	687a      	ldr	r2, [r7, #4]
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	611a      	str	r2, [r3, #16]
  /* set buffer address valid bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	68db      	ldr	r3, [r3, #12]
 8003dd6:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	60da      	str	r2, [r3, #12]

  if(pBuffer2 != NULL)
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d00b      	beq.n	8003dfc <HAL_ETH_DescAssignMemory+0x68>
  {
    /* write buffer 2 address to RDES1 */
    WRITE_REG(dmarxdesc->DESC2, (uint32_t)pBuffer2);
 8003de4:	683a      	ldr	r2, [r7, #0]
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	609a      	str	r2, [r3, #8]
     /* store buffer 2 address */
    WRITE_REG(dmarxdesc->BackupAddr1, (uint32_t)pBuffer2);
 8003dea:	683a      	ldr	r2, [r7, #0]
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	615a      	str	r2, [r3, #20]
    /* set buffer 2 address valid bit to RDES3 */
    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	60da      	str	r2, [r3, #12]
  }
  /* set OWN bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003e08:	2300      	movs	r3, #0
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	371c      	adds	r7, #28
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr

08003e16 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8003e16:	b480      	push	{r7}
 8003e18:	b085      	sub	sp, #20
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	6078      	str	r0, [r7, #4]
  uint32_t descindex;

  ETH_DMADescTypeDef *dmarxdesc;

  if(heth->gState == HAL_ETH_STATE_READY)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e22:	2b10      	cmp	r3, #16
 8003e24:	d174      	bne.n	8003f10 <HAL_ETH_Start_IT+0xfa>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2223      	movs	r2, #35	; 0x23
 8003e2a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set IOC bit to all Rx descriptors */
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	60fb      	str	r3, [r7, #12]
 8003e30:	e00f      	b.n	8003e52 <HAL_ETH_Start_IT+0x3c>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	330a      	adds	r3, #10
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	4413      	add	r3, r2
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	60bb      	str	r3, [r7, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	60da      	str	r2, [r3, #12]
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	3301      	adds	r3, #1
 8003e50:	60fb      	str	r3, [r7, #12]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2b03      	cmp	r3, #3
 8003e56:	d9ec      	bls.n	8003e32 <HAL_ETH_Start_IT+0x1c>
    }

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f042 0202 	orr.w	r2, r2, #2
 8003e6c:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f042 0201 	orr.w	r2, r2, #1
 8003e7c:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f042 0201 	orr.w	r2, r2, #1
 8003e8e:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	f241 1304 	movw	r3, #4356	; 0x1104
 8003e9a:	4413      	add	r3, r2
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	6811      	ldr	r1, [r2, #0]
 8003ea2:	f043 0201 	orr.w	r2, r3, #1
 8003ea6:	f241 1304 	movw	r3, #4356	; 0x1104
 8003eaa:	440b      	add	r3, r1
 8003eac:	601a      	str	r2, [r3, #0]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	f241 1308 	movw	r3, #4360	; 0x1108
 8003eb6:	4413      	add	r3, r2
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	6811      	ldr	r1, [r2, #0]
 8003ebe:	f043 0201 	orr.w	r2, r3, #1
 8003ec2:	f241 1308 	movw	r3, #4360	; 0x1108
 8003ec6:	440b      	add	r3, r1
 8003ec8:	601a      	str	r2, [r3, #0]

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f442 7281 	orr.w	r2, r2, #258	; 0x102
 8003edc:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8003ee0:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	f241 1334 	movw	r3, #4404	; 0x1134
 8003eea:	4413      	add	r3, r2
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	6811      	ldr	r1, [r2, #0]
 8003ef2:	f24d 0241 	movw	r2, #53313	; 0xd041
 8003ef6:	431a      	orrs	r2, r3
 8003ef8:	f241 1334 	movw	r3, #4404	; 0x1134
 8003efc:	440b      	add	r3, r1
 8003efe:	601a      	str	r2, [r3, #0]
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE));

    heth->gState = HAL_ETH_STATE_READY;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2210      	movs	r2, #16
 8003f04:	655a      	str	r2, [r3, #84]	; 0x54
    heth->RxState = HAL_ETH_STATE_BUSY_RX;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2222      	movs	r2, #34	; 0x22
 8003f0a:	659a      	str	r2, [r3, #88]	; 0x58

    return HAL_OK;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	e000      	b.n	8003f12 <HAL_ETH_Start_IT+0xfc>
  }
  else
  {
    return HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
  }
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3714      	adds	r7, #20
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr
	...

08003f20 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b085      	sub	sp, #20
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if(heth->gState != HAL_ETH_STATE_RESET)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d067      	beq.n	8004000 <HAL_ETH_Stop_IT+0xe0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2223      	movs	r2, #35	; 0x23
 8003f34:	655a      	str	r2, [r3, #84]	; 0x54
    /* Disable intrrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	f241 1334 	movw	r3, #4404	; 0x1134
 8003f3e:	4413      	add	r3, r2
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	6811      	ldr	r1, [r2, #0]
 8003f46:	4a32      	ldr	r2, [pc, #200]	; (8004010 <HAL_ETH_Stop_IT+0xf0>)
 8003f48:	401a      	ands	r2, r3
 8003f4a:	f241 1334 	movw	r3, #4404	; 0x1134
 8003f4e:	440b      	add	r3, r1
 8003f50:	601a      	str	r2, [r3, #0]
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	f241 1304 	movw	r3, #4356	; 0x1104
 8003f5a:	4413      	add	r3, r2
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	6811      	ldr	r1, [r2, #0]
 8003f62:	f023 0201 	bic.w	r2, r3, #1
 8003f66:	f241 1304 	movw	r3, #4356	; 0x1104
 8003f6a:	440b      	add	r3, r1
 8003f6c:	601a      	str	r2, [r3, #0]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	f241 1308 	movw	r3, #4360	; 0x1108
 8003f76:	4413      	add	r3, r2
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	6811      	ldr	r1, [r2, #0]
 8003f7e:	f023 0201 	bic.w	r2, r3, #1
 8003f82:	f241 1308 	movw	r3, #4360	; 0x1108
 8003f86:	440b      	add	r3, r1
 8003f88:	601a      	str	r2, [r3, #0]

    /* Disable the MAC reception */
    CLEAR_BIT( heth->Instance->MACCR, ETH_MACCR_RE);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f022 0201 	bic.w	r2, r2, #1
 8003f98:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f042 0201 	orr.w	r2, r2, #1
 8003faa:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f022 0202 	bic.w	r2, r2, #2
 8003fbc:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	60fb      	str	r3, [r7, #12]
 8003fc2:	e00f      	b.n	8003fe4 <HAL_ETH_Stop_IT+0xc4>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	330a      	adds	r3, #10
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	4413      	add	r3, r2
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	60da      	str	r2, [r3, #12]
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	3301      	adds	r3, #1
 8003fe2:	60fb      	str	r3, [r7, #12]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2b03      	cmp	r3, #3
 8003fe8:	d9ec      	bls.n	8003fc4 <HAL_ETH_Stop_IT+0xa4>
    }

    heth->RxDescList.ItMode = 0U;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2200      	movs	r2, #0
 8003fee:	64da      	str	r2, [r3, #76]	; 0x4c

    heth->gState = HAL_ETH_STATE_READY;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2210      	movs	r2, #16
 8003ff4:	655a      	str	r2, [r3, #84]	; 0x54
    heth->RxState = HAL_ETH_STATE_READY;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2210      	movs	r2, #16
 8003ffa:	659a      	str	r2, [r3, #88]	; 0x58

    /* Return function status */
    return HAL_OK;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	e000      	b.n	8004002 <HAL_ETH_Stop_IT+0xe2>
  }
  else
  {
    return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
  }
}
 8004002:	4618      	mov	r0, r3
 8004004:	3714      	adds	r7, #20
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr
 800400e:	bf00      	nop
 8004010:	ffff2fbe 	.word	0xffff2fbe

08004014 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b086      	sub	sp, #24
 8004018:	af00      	add	r7, sp, #0
 800401a:	60f8      	str	r0, [r7, #12]
 800401c:	60b9      	str	r1, [r7, #8]
 800401e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  const ETH_DMADescTypeDef *dmatxdesc;

  if(pTxConfig == NULL)
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d107      	bne.n	8004036 <HAL_ETH_Transmit+0x22>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800402a:	f043 0201 	orr.w	r2, r3, #1
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	65da      	str	r2, [r3, #92]	; 0x5c
    return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e073      	b.n	800411e <HAL_ETH_Transmit+0x10a>
  }

  if(heth->gState == HAL_ETH_STATE_READY)
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800403a:	2b10      	cmp	r3, #16
 800403c:	d16e      	bne.n	800411c <HAL_ETH_Transmit+0x108>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 800403e:	2200      	movs	r2, #0
 8004040:	68b9      	ldr	r1, [r7, #8]
 8004042:	68f8      	ldr	r0, [r7, #12]
 8004044:	f001 fa0a 	bl	800545c <ETH_Prepare_Tx_Descriptors>
 8004048:	4603      	mov	r3, r0
 800404a:	2b00      	cmp	r3, #0
 800404c:	d007      	beq.n	800405e <HAL_ETH_Transmit+0x4a>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004052:	f043 0202 	orr.w	r2, r3, #2
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e05f      	b.n	800411e <HAL_ETH_Transmit+0x10a>
    }

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	3206      	adds	r2, #6
 8004066:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800406a:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004070:	1c5a      	adds	r2, r3, #1
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	629a      	str	r2, [r3, #40]	; 0x28
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800407a:	2b03      	cmp	r3, #3
 800407c:	d904      	bls.n	8004088 <HAL_ETH_Transmit+0x74>
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004082:	1f1a      	subs	r2, r3, #4
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	68fa      	ldr	r2, [r7, #12]
 8004092:	3106      	adds	r1, #6
 8004094:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8004098:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 800409c:	601a      	str	r2, [r3, #0]

    tickstart = HAL_GetTick();
 800409e:	f7fd fe5b 	bl	8001d58 <HAL_GetTick>
 80040a2:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occured */
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 80040a4:	e034      	b.n	8004110 <HAL_ETH_Transmit+0xfc>
    {
      if((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d011      	beq.n	80040dc <HAL_ETH_Transmit+0xc8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040bc:	f043 0208 	orr.w	r2, r3, #8
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	65da      	str	r2, [r3, #92]	; 0x5c
        heth->DMAErrorCode = heth->Instance->DMACSR;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	661a      	str	r2, [r3, #96]	; 0x60
        /* Set ETH HAL State to Ready */
        heth->gState = HAL_ETH_STATE_ERROR;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	22e0      	movs	r2, #224	; 0xe0
 80040d6:	655a      	str	r2, [r3, #84]	; 0x54
        /* Return function status */
        return HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	e020      	b.n	800411e <HAL_ETH_Transmit+0x10a>
      }

      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040e2:	d015      	beq.n	8004110 <HAL_ETH_Transmit+0xfc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout) || (Timeout == 0U))
 80040e4:	f7fd fe38 	bl	8001d58 <HAL_GetTick>
 80040e8:	4602      	mov	r2, r0
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d302      	bcc.n	80040fa <HAL_ETH_Transmit+0xe6>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d10a      	bne.n	8004110 <HAL_ETH_Transmit+0xfc>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040fe:	f043 0204 	orr.w	r2, r3, #4
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	65da      	str	r2, [r3, #92]	; 0x5c
          heth->gState = HAL_ETH_STATE_ERROR;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	22e0      	movs	r2, #224	; 0xe0
 800410a:	655a      	str	r2, [r3, #84]	; 0x54
          return HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	e006      	b.n	800411e <HAL_ETH_Transmit+0x10a>
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	2b00      	cmp	r3, #0
 8004116:	dbc6      	blt.n	80040a6 <HAL_ETH_Transmit+0x92>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8004118:	2300      	movs	r3, #0
 800411a:	e000      	b.n	800411e <HAL_ETH_Transmit+0x10a>
  }
  else
  {
    return HAL_ERROR;
 800411c:	2301      	movs	r3, #1
  }
}
 800411e:	4618      	mov	r0, r3
 8004120:	3718      	adds	r7, #24
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}

08004126 <HAL_ETH_IsRxDataAvailable>:
  *         the configuration information for ETHERNET module
  * @retval  1: A Packet is received
  *          0: no Packet received
  */
uint8_t HAL_ETH_IsRxDataAvailable(ETH_HandleTypeDef *heth)
{
 8004126:	b480      	push	{r7}
 8004128:	b089      	sub	sp, #36	; 0x24
 800412a:	af00      	add	r7, sp, #0
 800412c:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	332c      	adds	r3, #44	; 0x2c
 8004132:	60bb      	str	r3, [r7, #8]
  uint32_t descidx = dmarxdesclist->CurRxDesc;
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	691b      	ldr	r3, [r3, #16]
 8004138:	61fb      	str	r3, [r7, #28]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	69fa      	ldr	r2, [r7, #28]
 800413e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004142:	61bb      	str	r3, [r7, #24]
  uint32_t descscancnt = 0;
 8004144:	2300      	movs	r3, #0
 8004146:	617b      	str	r3, [r7, #20]
  uint32_t appdesccnt = 0, firstappdescidx = 0;
 8004148:	2300      	movs	r3, #0
 800414a:	613b      	str	r3, [r7, #16]
 800414c:	2300      	movs	r3, #0
 800414e:	60fb      	str	r3, [r7, #12]

  if(dmarxdesclist->AppDescNbr != 0U)
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	699b      	ldr	r3, [r3, #24]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d06b      	beq.n	8004230 <HAL_ETH_IsRxDataAvailable+0x10a>
  {
    /* data already received by not yet processed*/
    return 0;
 8004158:	2300      	movs	r3, #0
 800415a:	e0ce      	b.n	80042fa <HAL_ETH_IsRxDataAvailable+0x1d4>
  }

  /* Check if descriptor is not owned by DMA */
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
  {
    descscancnt++;
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	3301      	adds	r3, #1
 8004160:	617b      	str	r3, [r7, #20]

    /* Check if last descriptor */
    if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8004162:	69bb      	ldr	r3, [r7, #24]
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800416a:	2b00      	cmp	r3, #0
 800416c:	d036      	beq.n	80041dc <HAL_ETH_IsRxDataAvailable+0xb6>
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	3301      	adds	r3, #1
 8004172:	613b      	str	r3, [r7, #16]

      if(appdesccnt == 1U)
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	2b01      	cmp	r3, #1
 8004178:	d101      	bne.n	800417e <HAL_ETH_IsRxDataAvailable+0x58>
      {
        WRITE_REG(firstappdescidx, descidx);
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	60fb      	str	r3, [r7, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800417e:	69fb      	ldr	r3, [r7, #28]
 8004180:	3301      	adds	r3, #1
 8004182:	61fb      	str	r3, [r7, #28]
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	2b03      	cmp	r3, #3
 8004188:	d902      	bls.n	8004190 <HAL_ETH_IsRxDataAvailable+0x6a>
 800418a:	69fb      	ldr	r3, [r7, #28]
 800418c:	3b04      	subs	r3, #4
 800418e:	61fb      	str	r3, [r7, #28]

      /* Check for Context descriptor */
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	69fa      	ldr	r2, [r7, #28]
 8004194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004198:	61bb      	str	r3, [r7, #24]

      if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_OWN)  == (uint32_t)RESET)
 800419a:	69bb      	ldr	r3, [r7, #24]
 800419c:	68db      	ldr	r3, [r3, #12]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	db11      	blt.n	80041c6 <HAL_ETH_IsRxDataAvailable+0xa0>
      {
        if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 80041a2:	69bb      	ldr	r3, [r7, #24]
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d00b      	beq.n	80041c6 <HAL_ETH_IsRxDataAvailable+0xa0>
        {
          /* Increment the number of descriptors to be passed to the application */
          dmarxdesclist->AppContextDesc = 1;
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	2201      	movs	r2, #1
 80041b2:	61da      	str	r2, [r3, #28]
          /* Increment current rx descriptor index */
          INCR_RX_DESC_INDEX(descidx, 1U);
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	3301      	adds	r3, #1
 80041b8:	61fb      	str	r3, [r7, #28]
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	2b03      	cmp	r3, #3
 80041be:	d902      	bls.n	80041c6 <HAL_ETH_IsRxDataAvailable+0xa0>
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	3b04      	subs	r3, #4
 80041c4:	61fb      	str	r3, [r7, #28]
        }
      }
      /* Fill information to Rx descriptors list */
      dmarxdesclist->CurRxDesc = descidx;
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	69fa      	ldr	r2, [r7, #28]
 80041ca:	611a      	str	r2, [r3, #16]
      dmarxdesclist->FirstAppDesc = firstappdescidx;
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	68fa      	ldr	r2, [r7, #12]
 80041d0:	615a      	str	r2, [r3, #20]
      dmarxdesclist->AppDescNbr = appdesccnt;
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	693a      	ldr	r2, [r7, #16]
 80041d6:	619a      	str	r2, [r3, #24]

      /* Return function status */
      return 1;
 80041d8:	2301      	movs	r3, #1
 80041da:	e08e      	b.n	80042fa <HAL_ETH_IsRxDataAvailable+0x1d4>
    }
    /* Check if first descriptor */
    else if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 80041dc:	69bb      	ldr	r3, [r7, #24]
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d012      	beq.n	800420e <HAL_ETH_IsRxDataAvailable+0xe8>
    {
      WRITE_REG(firstappdescidx, descidx);
 80041e8:	69fb      	ldr	r3, [r7, #28]
 80041ea:	60fb      	str	r3, [r7, #12]
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt = 1U;
 80041ec:	2301      	movs	r3, #1
 80041ee:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80041f0:	69fb      	ldr	r3, [r7, #28]
 80041f2:	3301      	adds	r3, #1
 80041f4:	61fb      	str	r3, [r7, #28]
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	2b03      	cmp	r3, #3
 80041fa:	d902      	bls.n	8004202 <HAL_ETH_IsRxDataAvailable+0xdc>
 80041fc:	69fb      	ldr	r3, [r7, #28]
 80041fe:	3b04      	subs	r3, #4
 8004200:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	69fa      	ldr	r2, [r7, #28]
 8004206:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800420a:	61bb      	str	r3, [r7, #24]
 800420c:	e010      	b.n	8004230 <HAL_ETH_IsRxDataAvailable+0x10a>
    }
    /* It should be an intermediate descriptor */
    else
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	3301      	adds	r3, #1
 8004212:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8004214:	69fb      	ldr	r3, [r7, #28]
 8004216:	3301      	adds	r3, #1
 8004218:	61fb      	str	r3, [r7, #28]
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	2b03      	cmp	r3, #3
 800421e:	d902      	bls.n	8004226 <HAL_ETH_IsRxDataAvailable+0x100>
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	3b04      	subs	r3, #4
 8004224:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	69fa      	ldr	r2, [r7, #28]
 800422a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800422e:	61bb      	str	r3, [r7, #24]
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
 8004230:	69bb      	ldr	r3, [r7, #24]
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	2b00      	cmp	r3, #0
 8004236:	db02      	blt.n	800423e <HAL_ETH_IsRxDataAvailable+0x118>
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	2b03      	cmp	r3, #3
 800423c:	d98e      	bls.n	800415c <HAL_ETH_IsRxDataAvailable+0x36>
    }
  }

  /* Build Descriptors if an incomplete Packet is received */
  if(appdesccnt > 0U)
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d056      	beq.n	80042f2 <HAL_ETH_IsRxDataAvailable+0x1cc>
  {
    dmarxdesclist->CurRxDesc = descidx;
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	69fa      	ldr	r2, [r7, #28]
 8004248:	611a      	str	r2, [r3, #16]
    dmarxdesclist->FirstAppDesc = firstappdescidx;
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	68fa      	ldr	r2, [r7, #12]
 800424e:	615a      	str	r2, [r3, #20]
    descidx = firstappdescidx;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	61fb      	str	r3, [r7, #28]
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	69fa      	ldr	r2, [r7, #28]
 8004258:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800425c:	61bb      	str	r3, [r7, #24]

    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 800425e:	2300      	movs	r3, #0
 8004260:	617b      	str	r3, [r7, #20]
 8004262:	e03b      	b.n	80042dc <HAL_ETH_IsRxDataAvailable+0x1b6>
    {
      WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 8004264:	69bb      	ldr	r3, [r7, #24]
 8004266:	691a      	ldr	r2, [r3, #16]
 8004268:	69bb      	ldr	r3, [r7, #24]
 800426a:	601a      	str	r2, [r3, #0]
      WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 800426c:	69bb      	ldr	r3, [r7, #24]
 800426e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004272:	60da      	str	r2, [r3, #12]

      if (READ_REG(dmarxdesc->BackupAddr1) != ((uint32_t)RESET))
 8004274:	69bb      	ldr	r3, [r7, #24]
 8004276:	695b      	ldr	r3, [r3, #20]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d009      	beq.n	8004290 <HAL_ETH_IsRxDataAvailable+0x16a>
      {
        WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 800427c:	69bb      	ldr	r3, [r7, #24]
 800427e:	695a      	ldr	r2, [r3, #20]
 8004280:	69bb      	ldr	r3, [r7, #24]
 8004282:	609a      	str	r2, [r3, #8]
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8004284:	69bb      	ldr	r3, [r7, #24]
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800428c:	69bb      	ldr	r3, [r7, #24]
 800428e:	60da      	str	r2, [r3, #12]
      }

      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8004290:	69bb      	ldr	r3, [r7, #24]
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004298:	69bb      	ldr	r3, [r7, #24]
 800429a:	60da      	str	r2, [r3, #12]

      if(dmarxdesclist->ItMode != ((uint32_t)RESET))
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	6a1b      	ldr	r3, [r3, #32]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d005      	beq.n	80042b0 <HAL_ETH_IsRxDataAvailable+0x18a>
      {
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 80042a4:	69bb      	ldr	r3, [r7, #24]
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80042ac:	69bb      	ldr	r3, [r7, #24]
 80042ae:	60da      	str	r2, [r3, #12]
      }
      if(descscancnt < (appdesccnt - 1U))
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	3b01      	subs	r3, #1
 80042b4:	697a      	ldr	r2, [r7, #20]
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d20d      	bcs.n	80042d6 <HAL_ETH_IsRxDataAvailable+0x1b0>
      {
        /* Increment rx descriptor index */
        INCR_RX_DESC_INDEX(descidx, 1U);
 80042ba:	69fb      	ldr	r3, [r7, #28]
 80042bc:	3301      	adds	r3, #1
 80042be:	61fb      	str	r3, [r7, #28]
 80042c0:	69fb      	ldr	r3, [r7, #28]
 80042c2:	2b03      	cmp	r3, #3
 80042c4:	d902      	bls.n	80042cc <HAL_ETH_IsRxDataAvailable+0x1a6>
 80042c6:	69fb      	ldr	r3, [r7, #28]
 80042c8:	3b04      	subs	r3, #4
 80042ca:	61fb      	str	r3, [r7, #28]
        /* Get descriptor address */
        dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	69fa      	ldr	r2, [r7, #28]
 80042d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042d4:	61bb      	str	r3, [r7, #24]
    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	3301      	adds	r3, #1
 80042da:	617b      	str	r3, [r7, #20]
 80042dc:	697a      	ldr	r2, [r7, #20]
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d3bf      	bcc.n	8004264 <HAL_ETH_IsRxDataAvailable+0x13e>
      }
    }

    /* Set the Tail pointer address to the last rx descriptor hold by the app */
    WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6819      	ldr	r1, [r3, #0]
 80042e8:	69ba      	ldr	r2, [r7, #24]
 80042ea:	f241 1328 	movw	r3, #4392	; 0x1128
 80042ee:	440b      	add	r3, r1
 80042f0:	601a      	str	r2, [r3, #0]
  }

  /* Fill information to Rx descriptors list: No received Packet */
  dmarxdesclist->AppDescNbr = 0U;
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	2200      	movs	r2, #0
 80042f6:	619a      	str	r2, [r3, #24]

  return 0;
 80042f8:	2300      	movs	r3, #0
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3724      	adds	r7, #36	; 0x24
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr

08004306 <HAL_ETH_GetRxDataBuffer>:
  *         the configuration information for ETHERNET module
  * @param  RxBuffer: Pointer to a ETH_BufferTypeDef structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataBuffer(ETH_HandleTypeDef *heth, ETH_BufferTypeDef *RxBuffer)
{
 8004306:	b580      	push	{r7, lr}
 8004308:	b08a      	sub	sp, #40	; 0x28
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
 800430e:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	332c      	adds	r3, #44	; 0x2c
 8004314:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	695b      	ldr	r3, [r3, #20]
 800431a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t index, accumulatedlen = 0, lastdesclen;
 800431c:	2300      	movs	r3, #0
 800431e:	61fb      	str	r3, [r7, #28]
  __IO const ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004324:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004328:	61bb      	str	r3, [r7, #24]
  ETH_BufferTypeDef *rxbuff = RxBuffer;
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	617b      	str	r3, [r7, #20]

  if(rxbuff == NULL)
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d104      	bne.n	800433e <HAL_ETH_GetRxDataBuffer+0x38>
  {
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	65da      	str	r2, [r3, #92]	; 0x5c
    return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e07d      	b.n	800443a <HAL_ETH_GetRxDataBuffer+0x134>
  }

  if(dmarxdesclist->AppDescNbr == 0U)
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	699b      	ldr	r3, [r3, #24]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d10f      	bne.n	8004366 <HAL_ETH_GetRxDataBuffer+0x60>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f7ff feed 	bl	8004126 <HAL_ETH_IsRxDataAvailable>
 800434c:	4603      	mov	r3, r0
 800434e:	2b00      	cmp	r3, #0
 8004350:	d101      	bne.n	8004356 <HAL_ETH_GetRxDataBuffer+0x50>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e071      	b.n	800443a <HAL_ETH_GetRxDataBuffer+0x134>
    }
    else
    {
      descidx = dmarxdesclist->FirstAppDesc;
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	695b      	ldr	r3, [r3, #20]
 800435a:	627b      	str	r3, [r7, #36]	; 0x24
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004360:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004364:	61bb      	str	r3, [r7, #24]
    }
  }

  /* Get intermediate descriptors buffers: in case of the Packet is splitted into multi descriptors */
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 8004366:	2300      	movs	r3, #0
 8004368:	623b      	str	r3, [r7, #32]
 800436a:	e031      	b.n	80043d0 <HAL_ETH_GetRxDataBuffer+0xca>
  {
    /* Get Address and length of the first buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 800436c:	69bb      	ldr	r3, [r7, #24]
 800436e:	691b      	ldr	r3, [r3, #16]
 8004370:	461a      	mov	r2, r3
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	601a      	str	r2, [r3, #0]
    rxbuff->len =  heth->Init.RxBuffLen;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	695a      	ldr	r2, [r3, #20]
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	605a      	str	r2, [r3, #4]

    /* Check if the second buffer address of this descriptor is valid */
    if(dmarxdesc->BackupAddr1 != 0U)
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	695b      	ldr	r3, [r3, #20]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d00b      	beq.n	800439e <HAL_ETH_GetRxDataBuffer+0x98>
    {
      /* Point to next buffer */
      rxbuff = rxbuff->next;
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	617b      	str	r3, [r7, #20]
      /* Get Address and length of the second buffer address */
      rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 800438c:	69bb      	ldr	r3, [r7, #24]
 800438e:	695b      	ldr	r3, [r3, #20]
 8004390:	461a      	mov	r2, r3
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	601a      	str	r2, [r3, #0]
      rxbuff->len =  heth->Init.RxBuffLen;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	695a      	ldr	r2, [r3, #20]
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	605a      	str	r2, [r3, #4]
    {
      /* Nothing to do here */
    }

    /* get total length until this descriptor */
    accumulatedlen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 800439e:	69bb      	ldr	r3, [r7, #24]
 80043a0:	68db      	ldr	r3, [r3, #12]
 80043a2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80043a6:	61fb      	str	r3, [r7, #28]

    /* Increment to next descriptor */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80043a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043aa:	3301      	adds	r3, #1
 80043ac:	627b      	str	r3, [r7, #36]	; 0x24
 80043ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b0:	2b03      	cmp	r3, #3
 80043b2:	d902      	bls.n	80043ba <HAL_ETH_GetRxDataBuffer+0xb4>
 80043b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b6:	3b04      	subs	r3, #4
 80043b8:	627b      	str	r3, [r7, #36]	; 0x24
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043c2:	61bb      	str	r3, [r7, #24]

    /* Point to next buffer */
    rxbuff = rxbuff->next;
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	617b      	str	r3, [r7, #20]
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 80043ca:	6a3b      	ldr	r3, [r7, #32]
 80043cc:	3301      	adds	r3, #1
 80043ce:	623b      	str	r3, [r7, #32]
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	699b      	ldr	r3, [r3, #24]
 80043d4:	3b01      	subs	r3, #1
 80043d6:	6a3a      	ldr	r2, [r7, #32]
 80043d8:	429a      	cmp	r2, r3
 80043da:	d3c7      	bcc.n	800436c <HAL_ETH_GetRxDataBuffer+0x66>
  }

  /* last descriptor data length */
  lastdesclen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - accumulatedlen;
 80043dc:	69bb      	ldr	r3, [r7, #24]
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80043e4:	69fb      	ldr	r3, [r7, #28]
 80043e6:	1ad3      	subs	r3, r2, r3
 80043e8:	60fb      	str	r3, [r7, #12]

  /* Get Address of the first buffer address */
  rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 80043ea:	69bb      	ldr	r3, [r7, #24]
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	461a      	mov	r2, r3
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	601a      	str	r2, [r3, #0]

  /* data is in only one buffer */
  if(lastdesclen <= heth->Init.RxBuffLen)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	695b      	ldr	r3, [r3, #20]
 80043f8:	68fa      	ldr	r2, [r7, #12]
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d803      	bhi.n	8004406 <HAL_ETH_GetRxDataBuffer+0x100>
  {
    rxbuff->len = lastdesclen;
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	68fa      	ldr	r2, [r7, #12]
 8004402:	605a      	str	r2, [r3, #4]
 8004404:	e018      	b.n	8004438 <HAL_ETH_GetRxDataBuffer+0x132>
  }
  /* data is in two buffers */
  else if(dmarxdesc->BackupAddr1 != 0U)
 8004406:	69bb      	ldr	r3, [r7, #24]
 8004408:	695b      	ldr	r3, [r3, #20]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d012      	beq.n	8004434 <HAL_ETH_GetRxDataBuffer+0x12e>
  {
    /* Get the Length of the first buffer address */
    rxbuff->len = heth->Init.RxBuffLen;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	695a      	ldr	r2, [r3, #20]
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	605a      	str	r2, [r3, #4]
    /* Point to next buffer */
    rxbuff = rxbuff->next;
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	617b      	str	r3, [r7, #20]
    /* Get the Address the Length of the second buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 800441c:	69bb      	ldr	r3, [r7, #24]
 800441e:	695b      	ldr	r3, [r3, #20]
 8004420:	461a      	mov	r2, r3
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	601a      	str	r2, [r3, #0]
    rxbuff->len =  lastdesclen - (heth->Init.RxBuffLen);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	695b      	ldr	r3, [r3, #20]
 800442a:	68fa      	ldr	r2, [r7, #12]
 800442c:	1ad2      	subs	r2, r2, r3
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	605a      	str	r2, [r3, #4]
 8004432:	e001      	b.n	8004438 <HAL_ETH_GetRxDataBuffer+0x132>
  }
  else /* Buffer 2 not valid*/
  {
    return HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	e000      	b.n	800443a <HAL_ETH_GetRxDataBuffer+0x134>
  }

  return HAL_OK;
 8004438:	2300      	movs	r3, #0
}
 800443a:	4618      	mov	r0, r3
 800443c:	3728      	adds	r7, #40	; 0x28
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}

08004442 <HAL_ETH_GetRxDataLength>:
  *         the configuration information for ETHERNET module
  * @param  Length: parameter to hold Rx packet length
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataLength(ETH_HandleTypeDef *heth, uint32_t *Length)
{
 8004442:	b580      	push	{r7, lr}
 8004444:	b086      	sub	sp, #24
 8004446:	af00      	add	r7, sp, #0
 8004448:	6078      	str	r0, [r7, #4]
 800444a:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	332c      	adds	r3, #44	; 0x2c
 8004450:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	695b      	ldr	r3, [r3, #20]
 8004456:	617b      	str	r3, [r7, #20]
  __IO const ETH_DMADescTypeDef *dmarxdesc;

  if(dmarxdesclist->AppDescNbr == 0U)
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	699b      	ldr	r3, [r3, #24]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d107      	bne.n	8004470 <HAL_ETH_GetRxDataLength+0x2e>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	f7ff fe60 	bl	8004126 <HAL_ETH_IsRxDataAvailable>
 8004466:	4603      	mov	r3, r0
 8004468:	2b00      	cmp	r3, #0
 800446a:	d101      	bne.n	8004470 <HAL_ETH_GetRxDataLength+0x2e>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	e017      	b.n	80044a0 <HAL_ETH_GetRxDataLength+0x5e>
    }
  }

  /* Get index of last descriptor */
  INCR_RX_DESC_INDEX(descidx, (dmarxdesclist->AppDescNbr - 1U));
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	699a      	ldr	r2, [r3, #24]
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	4413      	add	r3, r2
 8004478:	3b01      	subs	r3, #1
 800447a:	617b      	str	r3, [r7, #20]
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	2b03      	cmp	r3, #3
 8004480:	d902      	bls.n	8004488 <HAL_ETH_GetRxDataLength+0x46>
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	3b04      	subs	r3, #4
 8004486:	617b      	str	r3, [r7, #20]
  /* Point to last descriptor */
  dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	697a      	ldr	r2, [r7, #20]
 800448c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004490:	60fb      	str	r3, [r7, #12]

  *Length = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	68db      	ldr	r3, [r3, #12]
 8004496:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800449e:	2300      	movs	r3, #0
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3718      	adds	r7, #24
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}

080044a8 <HAL_ETH_BuildRxDescriptors>:
* @param  heth: pointer to a ETH_HandleTypeDef structure that contains
*         the configuration information for ETHERNET module
* @retval HAL status.
*/
HAL_StatusTypeDef HAL_ETH_BuildRxDescriptors(ETH_HandleTypeDef *heth)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b089      	sub	sp, #36	; 0x24
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	332c      	adds	r3, #44	; 0x2c
 80044b4:	60fb      	str	r3, [r7, #12]
  uint32_t descindex = dmarxdesclist->FirstAppDesc;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	695b      	ldr	r3, [r3, #20]
 80044ba:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	69fa      	ldr	r2, [r7, #28]
 80044c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044c4:	61bb      	str	r3, [r7, #24]
  uint32_t totalappdescnbr = dmarxdesclist->AppDescNbr;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	699b      	ldr	r3, [r3, #24]
 80044ca:	617b      	str	r3, [r7, #20]
  uint32_t descscan;

  if(dmarxdesclist->AppDescNbr == 0U)
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	699b      	ldr	r3, [r3, #24]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d101      	bne.n	80044d8 <HAL_ETH_BuildRxDescriptors+0x30>
  {
    /* No Rx descriptors to build */
    return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e057      	b.n	8004588 <HAL_ETH_BuildRxDescriptors+0xe0>
  }

  if(dmarxdesclist->AppContextDesc != 0U)
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	69db      	ldr	r3, [r3, #28]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d002      	beq.n	80044e6 <HAL_ETH_BuildRxDescriptors+0x3e>
  {
    /* A context descriptor is available */
    totalappdescnbr += 1U;
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	3301      	adds	r3, #1
 80044e4:	617b      	str	r3, [r7, #20]
  }

  for(descscan =0; descscan < totalappdescnbr; descscan++)
 80044e6:	2300      	movs	r3, #0
 80044e8:	613b      	str	r3, [r7, #16]
 80044ea:	e03b      	b.n	8004564 <HAL_ETH_BuildRxDescriptors+0xbc>
  {
    WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 80044ec:	69bb      	ldr	r3, [r7, #24]
 80044ee:	691a      	ldr	r2, [r3, #16]
 80044f0:	69bb      	ldr	r3, [r7, #24]
 80044f2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 80044f4:	69bb      	ldr	r3, [r7, #24]
 80044f6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80044fa:	60da      	str	r2, [r3, #12]

    if (READ_REG(dmarxdesc->BackupAddr1) != 0U)
 80044fc:	69bb      	ldr	r3, [r7, #24]
 80044fe:	695b      	ldr	r3, [r3, #20]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d009      	beq.n	8004518 <HAL_ETH_BuildRxDescriptors+0x70>
    {
      WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 8004504:	69bb      	ldr	r3, [r7, #24]
 8004506:	695a      	ldr	r2, [r3, #20]
 8004508:	69bb      	ldr	r3, [r7, #24]
 800450a:	609a      	str	r2, [r3, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 800450c:	69bb      	ldr	r3, [r7, #24]
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004514:	69bb      	ldr	r3, [r7, #24]
 8004516:	60da      	str	r2, [r3, #12]
    }

    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8004518:	69bb      	ldr	r3, [r7, #24]
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004520:	69bb      	ldr	r3, [r7, #24]
 8004522:	60da      	str	r2, [r3, #12]

    if(dmarxdesclist->ItMode != 0U)
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6a1b      	ldr	r3, [r3, #32]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d005      	beq.n	8004538 <HAL_ETH_BuildRxDescriptors+0x90>
    {
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 800452c:	69bb      	ldr	r3, [r7, #24]
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004534:	69bb      	ldr	r3, [r7, #24]
 8004536:	60da      	str	r2, [r3, #12]
    }

    if(descscan < (totalappdescnbr - 1U))
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	3b01      	subs	r3, #1
 800453c:	693a      	ldr	r2, [r7, #16]
 800453e:	429a      	cmp	r2, r3
 8004540:	d20d      	bcs.n	800455e <HAL_ETH_BuildRxDescriptors+0xb6>
    {
      /* Increment rx descriptor index */
      INCR_RX_DESC_INDEX(descindex, 1U);
 8004542:	69fb      	ldr	r3, [r7, #28]
 8004544:	3301      	adds	r3, #1
 8004546:	61fb      	str	r3, [r7, #28]
 8004548:	69fb      	ldr	r3, [r7, #28]
 800454a:	2b03      	cmp	r3, #3
 800454c:	d902      	bls.n	8004554 <HAL_ETH_BuildRxDescriptors+0xac>
 800454e:	69fb      	ldr	r3, [r7, #28]
 8004550:	3b04      	subs	r3, #4
 8004552:	61fb      	str	r3, [r7, #28]
      /* Get descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	69fa      	ldr	r2, [r7, #28]
 8004558:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800455c:	61bb      	str	r3, [r7, #24]
  for(descscan =0; descscan < totalappdescnbr; descscan++)
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	3301      	adds	r3, #1
 8004562:	613b      	str	r3, [r7, #16]
 8004564:	693a      	ldr	r2, [r7, #16]
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	429a      	cmp	r2, r3
 800456a:	d3bf      	bcc.n	80044ec <HAL_ETH_BuildRxDescriptors+0x44>
    }
  }

  /* Set the Tail pointer address to the last rx descriptor hold by the app */
  WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6819      	ldr	r1, [r3, #0]
 8004570:	69ba      	ldr	r2, [r7, #24]
 8004572:	f241 1328 	movw	r3, #4392	; 0x1128
 8004576:	440b      	add	r3, r1
 8004578:	601a      	str	r2, [r3, #0]

  /* reset the Application desc number */
  WRITE_REG(dmarxdesclist->AppDescNbr, 0);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2200      	movs	r2, #0
 800457e:	619a      	str	r2, [r3, #24]

  /*  reset the application context descriptor */
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	649a      	str	r2, [r3, #72]	; 0x48

  return HAL_OK;
 8004586:	2300      	movs	r3, #0
}
 8004588:	4618      	mov	r0, r3
 800458a:	3724      	adds	r7, #36	; 0x24
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr

08004594 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b082      	sub	sp, #8
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045aa:	2b40      	cmp	r3, #64	; 0x40
 80045ac:	d113      	bne.n	80045d6 <HAL_ETH_IRQHandler+0x42>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	f241 1334 	movw	r3, #4404	; 0x1134
 80045b6:	4413      	add	r3, r2
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045be:	2b40      	cmp	r3, #64	; 0x40
 80045c0:	d109      	bne.n	80045d6 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f005 fcfc 	bl	8009fc0 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80045d0:	f248 0240 	movw	r2, #32832	; 0x8040
 80045d4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 0301 	and.w	r3, r3, #1
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d113      	bne.n	8004610 <HAL_ETH_IRQHandler+0x7c>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	f241 1334 	movw	r3, #4404	; 0x1134
 80045f0:	4413      	add	r3, r2
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 0301 	and.w	r3, r3, #1
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d109      	bne.n	8004610 <HAL_ETH_IRQHandler+0x7c>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
        /*Call registered Transmit complete callback*/
        heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f000 f8c7 	bl	8004790 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800460a:	f248 0201 	movw	r2, #32769	; 0x8001
 800460e:	601a      	str	r2, [r3, #0]
    }
  }


  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800461e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004622:	d149      	bne.n	80046b8 <HAL_ETH_IRQHandler+0x124>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	f241 1334 	movw	r3, #4404	; 0x1134
 800462c:	4413      	add	r3, r2
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004634:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004638:	d13e      	bne.n	80046b8 <HAL_ETH_IRQHandler+0x124>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800463e:	f043 0208 	orr.w	r2, r3, #8
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	65da      	str	r2, [r3, #92]	; 0x5c

      /* if fatal bus error occured */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004654:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004658:	d11b      	bne.n	8004692 <HAL_ETH_IRQHandler+0xfe>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	f241 1302 	movw	r3, #4354	; 0x1102
 8004668:	4013      	ands	r3, r2
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	6613      	str	r3, [r2, #96]	; 0x60

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	f241 1334 	movw	r3, #4404	; 0x1134
 8004676:	4413      	add	r3, r2
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	6811      	ldr	r1, [r2, #0]
 800467e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004682:	f241 1334 	movw	r3, #4404	; 0x1134
 8004686:	440b      	add	r3, r1
 8004688:	601a      	str	r2, [r3, #0]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	22e0      	movs	r2, #224	; 0xe0
 800468e:	655a      	str	r2, [r3, #84]	; 0x54
 8004690:	e00f      	b.n	80046b2 <HAL_ETH_IRQHandler+0x11e>
      }
      else
      {
        /* Get DMA error status  */
       heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	661a      	str	r2, [r3, #96]	; 0x60
                                                       ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80046ac:	f44f 42cd 	mov.w	r2, #26240	; 0x6680
 80046b0:	601a      	str	r2, [r3, #0]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered DMA Error callback*/
      heth->DMAErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_DMAErrorCallback(heth);
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f000 f876 	bl	80047a4 <HAL_ETH_DMAErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  if(__HAL_ETH_MAC_GET_IT(heth, (ETH_MACIER_RXSTSIE | ETH_MACIER_TXSTSIE)))
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80046c0:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 80046c4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80046c8:	d10e      	bne.n	80046e8 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	665a      	str	r2, [r3, #100]	; 0x64

    heth->gState = HAL_ETH_STATE_ERROR;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	22e0      	movs	r2, #224	; 0xe0
 80046da:	655a      	str	r2, [r3, #84]	; 0x54
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered MAC Error callback*/
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet MAC Error callback */
    HAL_ETH_MACErrorCallback(heth);
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f000 f86b 	bl	80047b8 <HAL_ETH_MACErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACErrorCode = (uint32_t)(0x0U);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* ETH PMT IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80046f0:	f003 0310 	and.w	r3, r3, #16
 80046f4:	2b10      	cmp	r3, #16
 80046f6:	d10d      	bne.n	8004714 <HAL_ETH_IRQHandler+0x180>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004700:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f000 f85f 	bl	80047cc <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* ETH EEE IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800471c:	f003 0320 	and.w	r3, r3, #32
 8004720:	2b20      	cmp	r3, #32
 8004722:	d10d      	bne.n	8004740 <HAL_ETH_IRQHandler+0x1ac>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800472c:	f003 020f 	and.w	r2, r3, #15
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f000 f853 	bl	80047e0 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	66da      	str	r2, [r3, #108]	; 0x6c
  }

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 8004740:	f7fd fc8e 	bl	8002060 <HAL_GetCurrentCPUID>
 8004744:	4603      	mov	r3, r0
 8004746:	2b03      	cmp	r3, #3
 8004748:	d10d      	bne.n	8004766 <HAL_ETH_IRQHandler+0x1d2>
  {
    /* check ETH WAKEUP exti flag */
    if(__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 800474a:	4b0f      	ldr	r3, [pc, #60]	; (8004788 <HAL_ETH_IRQHandler+0x1f4>)
 800474c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800474e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004752:	2b00      	cmp	r3, #0
 8004754:	d014      	beq.n	8004780 <HAL_ETH_IRQHandler+0x1ec>
    {
      /* Clear ETH WAKEUP Exti pending bit */
      __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8004756:	4b0c      	ldr	r3, [pc, #48]	; (8004788 <HAL_ETH_IRQHandler+0x1f4>)
 8004758:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800475c:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered WakeUp callback*/
      heth->WakeUpCallback(heth);
#else
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f000 f848 	bl	80047f4 <HAL_ETH_WakeUpCallback>
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
#endif
  }
#endif
}
 8004764:	e00c      	b.n	8004780 <HAL_ETH_IRQHandler+0x1ec>
    if(__HAL_ETH_WAKEUP_EXTID2_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8004766:	4b09      	ldr	r3, [pc, #36]	; (800478c <HAL_ETH_IRQHandler+0x1f8>)
 8004768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800476a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800476e:	2b00      	cmp	r3, #0
 8004770:	d006      	beq.n	8004780 <HAL_ETH_IRQHandler+0x1ec>
      __HAL_ETH_WAKEUP_EXTID2_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8004772:	4b06      	ldr	r3, [pc, #24]	; (800478c <HAL_ETH_IRQHandler+0x1f8>)
 8004774:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8004778:	629a      	str	r2, [r3, #40]	; 0x28
      HAL_ETH_WakeUpCallback(heth);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f000 f83a 	bl	80047f4 <HAL_ETH_WakeUpCallback>
}
 8004780:	bf00      	nop
 8004782:	3708      	adds	r7, #8
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}
 8004788:	58000080 	.word	0x58000080
 800478c:	580000c0 	.word	0x580000c0

08004790 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8004790:	b480      	push	{r7}
 8004792:	b083      	sub	sp, #12
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8004798:	bf00      	nop
 800479a:	370c      	adds	r7, #12
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr

080047a4 <HAL_ETH_DMAErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_DMAErrorCallback(ETH_HandleTypeDef *heth)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b083      	sub	sp, #12
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_DMAErrorCallback could be implemented in the user file
  */
}
 80047ac:	bf00      	nop
 80047ae:	370c      	adds	r7, #12
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr

080047b8 <HAL_ETH_MACErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_MACErrorCallback(ETH_HandleTypeDef *heth)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b083      	sub	sp, #12
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_MACErrorCallback could be implemented in the user file
  */
}
 80047c0:	bf00      	nop
 80047c2:	370c      	adds	r7, #12
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr

080047cc <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 80047d4:	bf00      	nop
 80047d6:	370c      	adds	r7, #12
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr

080047e0 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b083      	sub	sp, #12
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 80047e8:	bf00      	nop
 80047ea:	370c      	adds	r7, #12
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr

080047f4 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b083      	sub	sp, #12
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 80047fc:	bf00      	nop
 80047fe:	370c      	adds	r7, #12
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr

08004808 <HAL_ETH_ReadPHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t *pRegValue)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b086      	sub	sp, #24
 800480c:	af00      	add	r7, sp, #0
 800480e:	60f8      	str	r0, [r7, #12]
 8004810:	60b9      	str	r1, [r7, #8]
 8004812:	607a      	str	r2, [r7, #4]
 8004814:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800481e:	f003 0301 	and.w	r3, r3, #1
 8004822:	2b00      	cmp	r3, #0
 8004824:	d001      	beq.n	800482a <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e03e      	b.n	80048a8 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004832:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	055b      	lsls	r3, r3, #21
 800483e:	4313      	orrs	r3, r2
 8004840:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	041b      	lsls	r3, r3, #16
 800484c:	4313      	orrs	r3, r2
 800484e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	f043 030c 	orr.w	r3, r3, #12
 8004856:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	f043 0301 	orr.w	r3, r3, #1
 800485e:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	697a      	ldr	r2, [r7, #20]
 8004866:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 800486a:	f7fd fa75 	bl	8001d58 <HAL_GetTick>
 800486e:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8004870:	e009      	b.n	8004886 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 8004872:	f7fd fa71 	bl	8001d58 <HAL_GetTick>
 8004876:	4602      	mov	r2, r0
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	1ad3      	subs	r3, r2, r3
 800487c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004880:	d901      	bls.n	8004886 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	e010      	b.n	80048a8 <HAL_ETH_ReadPHYRegister+0xa0>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800488e:	f003 0301 	and.w	r3, r3, #1
 8004892:	2b00      	cmp	r3, #0
 8004894:	d1ed      	bne.n	8004872 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800489e:	b29b      	uxth	r3, r3
 80048a0:	461a      	mov	r2, r3
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80048a6:	2300      	movs	r3, #0
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3718      	adds	r7, #24
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}

080048b0 <HAL_ETH_WritePHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t RegValue)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b086      	sub	sp, #24
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	60f8      	str	r0, [r7, #12]
 80048b8:	60b9      	str	r1, [r7, #8]
 80048ba:	607a      	str	r2, [r7, #4]
 80048bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80048c6:	f003 0301 	and.w	r3, r3, #1
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d001      	beq.n	80048d2 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e03c      	b.n	800494c <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80048da:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	055b      	lsls	r3, r3, #21
 80048e6:	4313      	orrs	r3, r2
 80048e8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	041b      	lsls	r3, r3, #16
 80048f4:	4313      	orrs	r3, r2
 80048f6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	f023 030c 	bic.w	r3, r3, #12
 80048fe:	f043 0304 	orr.w	r3, r3, #4
 8004902:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	f043 0301 	orr.w	r3, r3, #1
 800490a:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	b29a      	uxth	r2, r3
 8004910:	4b10      	ldr	r3, [pc, #64]	; (8004954 <HAL_ETH_WritePHYRegister+0xa4>)
 8004912:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8004916:	4a0f      	ldr	r2, [pc, #60]	; (8004954 <HAL_ETH_WritePHYRegister+0xa4>)
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 800491e:	f7fd fa1b 	bl	8001d58 <HAL_GetTick>
 8004922:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8004924:	e009      	b.n	800493a <HAL_ETH_WritePHYRegister+0x8a>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 8004926:	f7fd fa17 	bl	8001d58 <HAL_GetTick>
 800492a:	4602      	mov	r2, r0
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	1ad3      	subs	r3, r2, r3
 8004930:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004934:	d901      	bls.n	800493a <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	e008      	b.n	800494c <HAL_ETH_WritePHYRegister+0x9c>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004942:	f003 0301 	and.w	r3, r3, #1
 8004946:	2b00      	cmp	r3, #0
 8004948:	d1ed      	bne.n	8004926 <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 800494a:	2300      	movs	r3, #0
}
 800494c:	4618      	mov	r0, r3
 800494e:	3718      	adds	r7, #24
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}
 8004954:	40028000 	.word	0x40028000

08004958 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8004958:	b480      	push	{r7}
 800495a:	b083      	sub	sp, #12
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d101      	bne.n	800496c <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	e1c3      	b.n	8004cf4 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 020c 	and.w	r2, r3, #12
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC)>> 4) > 0U) ? ENABLE : DISABLE;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 0310 	and.w	r3, r3, #16
 8004984:	2b00      	cmp	r3, #0
 8004986:	bf14      	ite	ne
 8004988:	2301      	movne	r3, #1
 800498a:	2300      	moveq	r3, #0
 800498c:	b2db      	uxtb	r3, r3
 800498e:	461a      	mov	r2, r3
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	bf0c      	ite	eq
 80049b2:	2301      	moveq	r3, #1
 80049b4:	2300      	movne	r3, #0
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	461a      	mov	r2, r3
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U) ? ENABLE : DISABLE;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	bf14      	ite	ne
 80049ce:	2301      	movne	r3, #1
 80049d0:	2300      	moveq	r3, #0
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	461a      	mov	r2, r3
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	bf0c      	ite	eq
 80049e8:	2301      	moveq	r3, #1
 80049ea:	2300      	movne	r3, #0
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	461a      	mov	r2, r3
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	bf14      	ite	ne
 8004a02:	2301      	movne	r3, #1
 8004a04:	2300      	moveq	r3, #0
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	461a      	mov	r2, r3
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	bf14      	ite	ne
 8004a1c:	2301      	movne	r3, #1
 8004a1e:	2300      	moveq	r3, #0
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	461a      	mov	r2, r3
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	bf14      	ite	ne
 8004a52:	2301      	movne	r3, #1
 8004a54:	2300      	moveq	r3, #0
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	461a      	mov	r2, r3
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >>17) == 0U) ? ENABLE : DISABLE;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	bf0c      	ite	eq
 8004a6c:	2301      	moveq	r3, #1
 8004a6e:	2300      	movne	r3, #0
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	461a      	mov	r2, r3
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >>19) == 0U) ? ENABLE : DISABLE;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	bf0c      	ite	eq
 8004a86:	2301      	moveq	r3, #1
 8004a88:	2300      	movne	r3, #0
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	bf14      	ite	ne
 8004aa0:	2301      	movne	r3, #1
 8004aa2:	2300      	moveq	r3, #0
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	461a      	mov	r2, r3
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	bf14      	ite	ne
 8004aba:	2301      	movne	r3, #1
 8004abc:	2300      	moveq	r3, #0
 8004abe:	b2db      	uxtb	r3, r3
 8004ac0:	461a      	mov	r2, r3
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	bf14      	ite	ne
 8004ad4:	2301      	movne	r3, #1
 8004ad6:	2300      	moveq	r3, #0
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	461a      	mov	r2, r3
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	bf14      	ite	ne
 8004aee:	2301      	movne	r3, #1
 8004af0:	2300      	moveq	r3, #0
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	461a      	mov	r2, r3
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	bf14      	ite	ne
 8004b16:	2301      	movne	r3, #1
 8004b18:	2300      	moveq	r3, #0
 8004b1a:	b2db      	uxtb	r3, r3
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	bf0c      	ite	eq
 8004b4c:	2301      	moveq	r3, #1
 8004b4e:	2300      	movne	r3, #0
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	461a      	mov	r2, r3
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	bf14      	ite	ne
 8004b68:	2301      	movne	r3, #1
 8004b6a:	2300      	moveq	r3, #0
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	461a      	mov	r2, r3
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	bf14      	ite	ne
 8004b84:	2301      	movne	r3, #1
 8004b86:	2300      	moveq	r3, #0
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U) ? ENABLE : DISABLE;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	bf14      	ite	ne
 8004ba0:	2301      	movne	r3, #1
 8004ba2:	2300      	moveq	r3, #0
 8004ba4:	b2db      	uxtb	r3, r3
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	0e5b      	lsrs	r3, r3, #25
 8004bb6:	f003 021f 	and.w	r2, r3, #31
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	68db      	ldr	r3, [r3, #12]
 8004bc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	bf14      	ite	ne
 8004bcc:	2301      	movne	r3, #1
 8004bce:	2300      	moveq	r3, #0
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	f003 020f 	and.w	r2, r3, #15
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bee:	f003 0302 	and.w	r3, r3, #2
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	bf14      	ite	ne
 8004bf6:	2301      	movne	r3, #1
 8004bf8:	2300      	moveq	r3, #0
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	461a      	mov	r2, r3
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	bf0c      	ite	eq
 8004c12:	2301      	moveq	r3, #1
 8004c14:	2300      	movne	r3, #0
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	461a      	mov	r2, r3
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c26:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c34:	0c1b      	lsrs	r3, r3, #16
 8004c36:	b29a      	uxth	r2, r3
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c44:	f003 0301 	and.w	r3, r3, #1
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	bf14      	ite	ne
 8004c4c:	2301      	movne	r3, #1
 8004c4e:	2300      	moveq	r3, #0
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	461a      	mov	r2, r3
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U) ? ENABLE : DISABLE;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c62:	f003 0302 	and.w	r3, r3, #2
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	bf14      	ite	ne
 8004c6a:	2301      	movne	r3, #1
 8004c6c:	2300      	moveq	r3, #0
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	461a      	mov	r2, r3
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8004c80:	f003 0272 	and.w	r2, r3, #114	; 0x72
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8004c90:	f003 0223 	and.w	r2, r3, #35	; 0x23
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8004ca0:	f003 0308 	and.w	r3, r3, #8
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	bf14      	ite	ne
 8004ca8:	2301      	movne	r3, #1
 8004caa:	2300      	moveq	r3, #0
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	461a      	mov	r2, r3
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8004cbe:	f003 0310 	and.w	r3, r3, #16
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	bf14      	ite	ne
 8004cc6:	2301      	movne	r3, #1
 8004cc8:	2300      	moveq	r3, #0
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	461a      	mov	r2, r3
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8004cdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	bf0c      	ite	eq
 8004ce4:	2301      	moveq	r3, #1
 8004ce6:	2300      	movne	r3, #0
 8004ce8:	b2db      	uxtb	r3, r3
 8004cea:	461a      	mov	r2, r3
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8004cf2:	2300      	movs	r3, #0
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	370c      	adds	r7, #12
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr

08004d00 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b082      	sub	sp, #8
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	6039      	str	r1, [r7, #0]
  if(macconf == NULL)
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d101      	bne.n	8004d14 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	e00a      	b.n	8004d2a <HAL_ETH_SetMACConfig+0x2a>
  }

  if(heth->RxState == HAL_ETH_STATE_READY)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d18:	2b10      	cmp	r3, #16
 8004d1a:	d105      	bne.n	8004d28 <HAL_ETH_SetMACConfig+0x28>
  {
    ETH_SetMACConfig(heth, macconf);
 8004d1c:	6839      	ldr	r1, [r7, #0]
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f000 f860 	bl	8004de4 <ETH_SetMACConfig>

    return HAL_OK;
 8004d24:	2300      	movs	r3, #0
 8004d26:	e000      	b.n	8004d2a <HAL_ETH_SetMACConfig+0x2a>
  }
  else
  {
    return HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
  }
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3708      	adds	r7, #8
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}
	...

08004d34 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b084      	sub	sp, #16
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004d44:	60fb      	str	r3, [r7, #12]

	/* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004d4c:	60fb      	str	r3, [r7, #12]

	/* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004d4e:	f001 ffd7 	bl	8006d00 <HAL_RCC_GetHCLKFreq>
 8004d52:	60b8      	str	r0, [r7, #8]

	/* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	4a1e      	ldr	r2, [pc, #120]	; (8004dd0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d908      	bls.n	8004d6e <HAL_ETH_SetMDIOClockRange+0x3a>
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	4a1d      	ldr	r2, [pc, #116]	; (8004dd4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d804      	bhi.n	8004d6e <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d6a:	60fb      	str	r3, [r7, #12]
 8004d6c:	e027      	b.n	8004dbe <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	4a18      	ldr	r2, [pc, #96]	; (8004dd4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d908      	bls.n	8004d88 <HAL_ETH_SetMDIOClockRange+0x54>
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	4a17      	ldr	r2, [pc, #92]	; (8004dd8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d804      	bhi.n	8004d88 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004d84:	60fb      	str	r3, [r7, #12]
 8004d86:	e01a      	b.n	8004dbe <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	4a13      	ldr	r2, [pc, #76]	; (8004dd8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d903      	bls.n	8004d98 <HAL_ETH_SetMDIOClockRange+0x64>
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	4a12      	ldr	r2, [pc, #72]	; (8004ddc <HAL_ETH_SetMDIOClockRange+0xa8>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d911      	bls.n	8004dbc <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	4a10      	ldr	r2, [pc, #64]	; (8004ddc <HAL_ETH_SetMDIOClockRange+0xa8>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d908      	bls.n	8004db2 <HAL_ETH_SetMDIOClockRange+0x7e>
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	4a0f      	ldr	r2, [pc, #60]	; (8004de0 <HAL_ETH_SetMDIOClockRange+0xac>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d804      	bhi.n	8004db2 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dae:	60fb      	str	r3, [r7, #12]
 8004db0:	e005      	b.n	8004dbe <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004db8:	60fb      	str	r3, [r7, #12]
 8004dba:	e000      	b.n	8004dbe <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8004dbc:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	68fa      	ldr	r2, [r7, #12]
 8004dc4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8004dc8:	bf00      	nop
 8004dca:	3710      	adds	r7, #16
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}
 8004dd0:	01312cff 	.word	0x01312cff
 8004dd4:	02160ebf 	.word	0x02160ebf
 8004dd8:	039386ff 	.word	0x039386ff
 8004ddc:	05f5e0ff 	.word	0x05f5e0ff
 8004de0:	08f0d17f 	.word	0x08f0d17f

08004de4 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b085      	sub	sp, #20
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
 8004dec:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8004df6:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	791b      	ldrb	r3, [r3, #4]
 8004dfc:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8004dfe:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	7b1b      	ldrb	r3, [r3, #12]
 8004e04:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8004e06:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	7b5b      	ldrb	r3, [r3, #13]
 8004e0c:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004e0e:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	7b9b      	ldrb	r3, [r3, #14]
 8004e14:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8004e16:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	7bdb      	ldrb	r3, [r3, #15]
 8004e1c:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004e1e:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004e20:	683a      	ldr	r2, [r7, #0]
 8004e22:	7c12      	ldrb	r2, [r2, #16]
 8004e24:	2a00      	cmp	r2, #0
 8004e26:	d102      	bne.n	8004e2e <ETH_SetMACConfig+0x4a>
 8004e28:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004e2c:	e000      	b.n	8004e30 <ETH_SetMACConfig+0x4c>
 8004e2e:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004e30:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004e32:	683a      	ldr	r2, [r7, #0]
 8004e34:	7c52      	ldrb	r2, [r2, #17]
 8004e36:	2a00      	cmp	r2, #0
 8004e38:	d102      	bne.n	8004e40 <ETH_SetMACConfig+0x5c>
 8004e3a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004e3e:	e000      	b.n	8004e42 <ETH_SetMACConfig+0x5e>
 8004e40:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004e42:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	7c9b      	ldrb	r3, [r3, #18]
 8004e48:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004e4a:	431a      	orrs	r2, r3
                                macconf->Speed |
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8004e50:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8004e56:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	7f1b      	ldrb	r3, [r3, #28]
 8004e5c:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8004e5e:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	7f5b      	ldrb	r3, [r3, #29]
 8004e64:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8004e66:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8004e68:	683a      	ldr	r2, [r7, #0]
 8004e6a:	7f92      	ldrb	r2, [r2, #30]
 8004e6c:	2a00      	cmp	r2, #0
 8004e6e:	d102      	bne.n	8004e76 <ETH_SetMACConfig+0x92>
 8004e70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004e74:	e000      	b.n	8004e78 <ETH_SetMACConfig+0x94>
 8004e76:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8004e78:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	7fdb      	ldrb	r3, [r3, #31]
 8004e7e:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8004e80:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8004e82:	683a      	ldr	r2, [r7, #0]
 8004e84:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004e88:	2a00      	cmp	r2, #0
 8004e8a:	d102      	bne.n	8004e92 <ETH_SetMACConfig+0xae>
 8004e8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004e90:	e000      	b.n	8004e94 <ETH_SetMACConfig+0xb0>
 8004e92:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8004e94:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8004e9a:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ea2:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8004ea4:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	4b56      	ldr	r3, [pc, #344]	; (8005010 <ETH_SetMACConfig+0x22c>)
 8004eb6:	4013      	ands	r3, r2
 8004eb8:	687a      	ldr	r2, [r7, #4]
 8004eba:	6812      	ldr	r2, [r2, #0]
 8004ebc:	68f9      	ldr	r1, [r7, #12]
 8004ebe:	430b      	orrs	r3, r1
 8004ec0:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ec6:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004ece:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8004ed0:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004ed8:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8004eda:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004ee2:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8004ee4:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8004ee6:	683a      	ldr	r2, [r7, #0]
 8004ee8:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8004eec:	2a00      	cmp	r2, #0
 8004eee:	d102      	bne.n	8004ef6 <ETH_SetMACConfig+0x112>
 8004ef0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004ef4:	e000      	b.n	8004ef8 <ETH_SetMACConfig+0x114>
 8004ef6:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8004ef8:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8004efe:	4313      	orrs	r3, r2
 8004f00:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	685a      	ldr	r2, [r3, #4]
 8004f08:	4b42      	ldr	r3, [pc, #264]	; (8005014 <ETH_SetMACConfig+0x230>)
 8004f0a:	4013      	ands	r3, r2
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	6812      	ldr	r2, [r2, #0]
 8004f10:	68f9      	ldr	r1, [r7, #12]
 8004f12:	430b      	orrs	r3, r1
 8004f14:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f1c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004f22:	4313      	orrs	r3, r2
 8004f24:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	68da      	ldr	r2, [r3, #12]
 8004f2c:	4b3a      	ldr	r3, [pc, #232]	; (8005018 <ETH_SetMACConfig+0x234>)
 8004f2e:	4013      	ands	r3, r2
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	6812      	ldr	r2, [r2, #0]
 8004f34:	68f9      	ldr	r1, [r7, #12]
 8004f36:	430b      	orrs	r3, r1
 8004f38:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004f40:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004f46:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8004f48:	683a      	ldr	r2, [r7, #0]
 8004f4a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8004f4e:	2a00      	cmp	r2, #0
 8004f50:	d101      	bne.n	8004f56 <ETH_SetMACConfig+0x172>
 8004f52:	2280      	movs	r2, #128	; 0x80
 8004f54:	e000      	b.n	8004f58 <ETH_SetMACConfig+0x174>
 8004f56:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8004f58:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f5e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004f60:	4313      	orrs	r3, r2
 8004f62:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004f6a:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8004f6e:	4013      	ands	r3, r2
 8004f70:	687a      	ldr	r2, [r7, #4]
 8004f72:	6812      	ldr	r2, [r2, #0]
 8004f74:	68f9      	ldr	r1, [r7, #12]
 8004f76:	430b      	orrs	r3, r1
 8004f78:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8004f80:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8004f88:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f96:	f023 0103 	bic.w	r1, r3, #3
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	68fa      	ldr	r2, [r7, #12]
 8004fa0:	430a      	orrs	r2, r1
 8004fa2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8004fae:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	430a      	orrs	r2, r1
 8004fbc:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004fc4:	683a      	ldr	r2, [r7, #0]
 8004fc6:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8004fca:	2a00      	cmp	r2, #0
 8004fcc:	d101      	bne.n	8004fd2 <ETH_SetMACConfig+0x1ee>
 8004fce:	2240      	movs	r2, #64	; 0x40
 8004fd0:	e000      	b.n	8004fd4 <ETH_SetMACConfig+0x1f0>
 8004fd2:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8004fd4:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8004fdc:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004fde:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8004fe6:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8004ff4:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	68fa      	ldr	r2, [r7, #12]
 8004ffe:	430a      	orrs	r2, r1
 8005000:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8005004:	bf00      	nop
 8005006:	3714      	adds	r7, #20
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr
 8005010:	00048083 	.word	0x00048083
 8005014:	c0f88000 	.word	0xc0f88000
 8005018:	fffffef0 	.word	0xfffffef0

0800501c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800501c:	b480      	push	{r7}
 800501e:	b085      	sub	sp, #20
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	4b38      	ldr	r3, [pc, #224]	; (8005114 <ETH_SetDMAConfig+0xf8>)
 8005032:	4013      	ands	r3, r2
 8005034:	683a      	ldr	r2, [r7, #0]
 8005036:	6812      	ldr	r2, [r2, #0]
 8005038:	6879      	ldr	r1, [r7, #4]
 800503a:	6809      	ldr	r1, [r1, #0]
 800503c:	431a      	orrs	r2, r3
 800503e:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8005042:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	791b      	ldrb	r3, [r3, #4]
 8005048:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800504e:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	7b1b      	ldrb	r3, [r3, #12]
 8005054:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005056:	4313      	orrs	r3, r2
 8005058:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	f241 0304 	movw	r3, #4100	; 0x1004
 8005062:	4413      	add	r3, r2
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	4b2c      	ldr	r3, [pc, #176]	; (8005118 <ETH_SetDMAConfig+0xfc>)
 8005068:	4013      	ands	r3, r2
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	6811      	ldr	r1, [r2, #0]
 800506e:	68fa      	ldr	r2, [r7, #12]
 8005070:	431a      	orrs	r2, r3
 8005072:	f241 0304 	movw	r3, #4100	; 0x1004
 8005076:	440b      	add	r3, r1
 8005078:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	7b5b      	ldrb	r3, [r3, #13]
 800507e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005084:	4313      	orrs	r3, r2
 8005086:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	4b22      	ldr	r3, [pc, #136]	; (800511c <ETH_SetDMAConfig+0x100>)
 8005094:	4013      	ands	r3, r2
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	6811      	ldr	r1, [r2, #0]
 800509a:	68fa      	ldr	r2, [r7, #12]
 800509c:	431a      	orrs	r2, r3
 800509e:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 80050a2:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	7d1b      	ldrb	r3, [r3, #20]
 80050ac:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80050ae:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	7f5b      	ldrb	r3, [r3, #29]
 80050b4:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80050b6:	4313      	orrs	r3, r2
 80050b8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	f241 1304 	movw	r3, #4356	; 0x1104
 80050c2:	4413      	add	r3, r2
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	4b16      	ldr	r3, [pc, #88]	; (8005120 <ETH_SetDMAConfig+0x104>)
 80050c8:	4013      	ands	r3, r2
 80050ca:	687a      	ldr	r2, [r7, #4]
 80050cc:	6811      	ldr	r1, [r2, #0]
 80050ce:	68fa      	ldr	r2, [r7, #12]
 80050d0:	431a      	orrs	r2, r3
 80050d2:	f241 1304 	movw	r3, #4356	; 0x1104
 80050d6:	440b      	add	r3, r1
 80050d8:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	7f1b      	ldrb	r3, [r3, #28]
 80050de:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80050e4:	4313      	orrs	r3, r2
 80050e6:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	f241 1308 	movw	r3, #4360	; 0x1108
 80050f0:	4413      	add	r3, r2
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	4b0b      	ldr	r3, [pc, #44]	; (8005124 <ETH_SetDMAConfig+0x108>)
 80050f6:	4013      	ands	r3, r2
 80050f8:	687a      	ldr	r2, [r7, #4]
 80050fa:	6811      	ldr	r1, [r2, #0]
 80050fc:	68fa      	ldr	r2, [r7, #12]
 80050fe:	431a      	orrs	r2, r3
 8005100:	f241 1308 	movw	r3, #4360	; 0x1108
 8005104:	440b      	add	r3, r1
 8005106:	601a      	str	r2, [r3, #0]
}
 8005108:	bf00      	nop
 800510a:	3714      	adds	r7, #20
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr
 8005114:	ffff87fd 	.word	0xffff87fd
 8005118:	ffff2ffe 	.word	0xffff2ffe
 800511c:	fffec000 	.word	0xfffec000
 8005120:	ffc0efef 	.word	0xffc0efef
 8005124:	7fc0ffff 	.word	0x7fc0ffff

08005128 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b0a4      	sub	sp, #144	; 0x90
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8005130:	2301      	movs	r3, #1
 8005132:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8005136:	2300      	movs	r3, #0
 8005138:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800513a:	2300      	movs	r3, #0
 800513c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8005140:	2300      	movs	r3, #0
 8005142:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8005146:	2301      	movs	r3, #1
 8005148:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 800514c:	2301      	movs	r3, #1
 800514e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8005152:	2301      	movs	r3, #1
 8005154:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8005158:	2300      	movs	r3, #0
 800515a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800515e:	2301      	movs	r3, #1
 8005160:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8005164:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005168:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800516a:	2300      	movs	r3, #0
 800516c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8005170:	2300      	movs	r3, #0
 8005172:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8005174:	2300      	movs	r3, #0
 8005176:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800517a:	2300      	movs	r3, #0
 800517c:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8005180:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8005184:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8005186:	2300      	movs	r3, #0
 8005188:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 800518c:	2300      	movs	r3, #0
 800518e:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8005190:	2301      	movs	r3, #1
 8005192:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8005196:	2300      	movs	r3, #0
 8005198:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 800519c:	2300      	movs	r3, #0
 800519e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80051a2:	2300      	movs	r3, #0
 80051a4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80051a6:	2300      	movs	r3, #0
 80051a8:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80051aa:	2300      	movs	r3, #0
 80051ac:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80051ae:	2300      	movs	r3, #0
 80051b0:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80051b4:	2300      	movs	r3, #0
 80051b6:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80051ba:	2301      	movs	r3, #1
 80051bc:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80051c0:	2320      	movs	r3, #32
 80051c2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80051c6:	2301      	movs	r3, #1
 80051c8:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80051cc:	2300      	movs	r3, #0
 80051ce:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80051d2:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80051d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80051d8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80051dc:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80051de:	2300      	movs	r3, #0
 80051e0:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80051e4:	2302      	movs	r3, #2
 80051e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80051ea:	2300      	movs	r3, #0
 80051ec:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80051f0:	2300      	movs	r3, #0
 80051f2:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80051f6:	2300      	movs	r3, #0
 80051f8:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80051fc:	2301      	movs	r3, #1
 80051fe:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8005202:	2300      	movs	r3, #0
 8005204:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8005206:	2301      	movs	r3, #1
 8005208:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800520c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005210:	4619      	mov	r1, r3
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f7ff fde6 	bl	8004de4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8005218:	2301      	movs	r3, #1
 800521a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800521c:	2301      	movs	r3, #1
 800521e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8005220:	2300      	movs	r3, #0
 8005222:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8005224:	2300      	movs	r3, #0
 8005226:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800522a:	2300      	movs	r3, #0
 800522c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800522e:	2300      	movs	r3, #0
 8005230:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8005232:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005236:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8005238:	2300      	movs	r3, #0
 800523a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800523c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005240:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8005242:	2300      	movs	r3, #0
 8005244:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8005248:	f44f 7306 	mov.w	r3, #536	; 0x218
 800524c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800524e:	f107 0308 	add.w	r3, r7, #8
 8005252:	4619      	mov	r1, r3
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f7ff fee1 	bl	800501c <ETH_SetDMAConfig>
}
 800525a:	bf00      	nop
 800525c:	3790      	adds	r7, #144	; 0x90
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
	...

08005264 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b084      	sub	sp, #16
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005274:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800527c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800527e:	f001 fd3f 	bl	8006d00 <HAL_RCC_GetHCLKFreq>
 8005282:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	4a1e      	ldr	r2, [pc, #120]	; (8005300 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d908      	bls.n	800529e <ETH_MAC_MDIO_ClkConfig+0x3a>
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	4a1d      	ldr	r2, [pc, #116]	; (8005304 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d804      	bhi.n	800529e <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800529a:	60fb      	str	r3, [r7, #12]
 800529c:	e027      	b.n	80052ee <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	4a18      	ldr	r2, [pc, #96]	; (8005304 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d908      	bls.n	80052b8 <ETH_MAC_MDIO_ClkConfig+0x54>
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	4a17      	ldr	r2, [pc, #92]	; (8005308 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d804      	bhi.n	80052b8 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80052b4:	60fb      	str	r3, [r7, #12]
 80052b6:	e01a      	b.n	80052ee <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	4a13      	ldr	r2, [pc, #76]	; (8005308 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d903      	bls.n	80052c8 <ETH_MAC_MDIO_ClkConfig+0x64>
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	4a12      	ldr	r2, [pc, #72]	; (800530c <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d911      	bls.n	80052ec <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	4a10      	ldr	r2, [pc, #64]	; (800530c <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d908      	bls.n	80052e2 <ETH_MAC_MDIO_ClkConfig+0x7e>
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	4a0f      	ldr	r2, [pc, #60]	; (8005310 <ETH_MAC_MDIO_ClkConfig+0xac>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d804      	bhi.n	80052e2 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052de:	60fb      	str	r3, [r7, #12]
 80052e0:	e005      	b.n	80052ee <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80052e8:	60fb      	str	r3, [r7, #12]
 80052ea:	e000      	b.n	80052ee <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80052ec:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	68fa      	ldr	r2, [r7, #12]
 80052f4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80052f8:	bf00      	nop
 80052fa:	3710      	adds	r7, #16
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}
 8005300:	01312cff 	.word	0x01312cff
 8005304:	02160ebf 	.word	0x02160ebf
 8005308:	039386ff 	.word	0x039386ff
 800530c:	05f5e0ff 	.word	0x05f5e0ff
 8005310:	08f0d17f 	.word	0x08f0d17f

08005314 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8005314:	b480      	push	{r7}
 8005316:	b085      	sub	sp, #20
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800531c:	2300      	movs	r3, #0
 800531e:	60fb      	str	r3, [r7, #12]
 8005320:	e01d      	b.n	800535e <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	68d9      	ldr	r1, [r3, #12]
 8005326:	68fa      	ldr	r2, [r7, #12]
 8005328:	4613      	mov	r3, r2
 800532a:	005b      	lsls	r3, r3, #1
 800532c:	4413      	add	r3, r2
 800532e:	00db      	lsls	r3, r3, #3
 8005330:	440b      	add	r3, r1
 8005332:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	2200      	movs	r2, #0
 8005338:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	2200      	movs	r2, #0
 800533e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	2200      	movs	r2, #0
 8005344:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	2200      	movs	r2, #0
 800534a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800534c:	68b9      	ldr	r1, [r7, #8]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	68fa      	ldr	r2, [r7, #12]
 8005352:	3206      	adds	r2, #6
 8005354:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	3301      	adds	r3, #1
 800535c:	60fb      	str	r3, [r7, #12]
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2b03      	cmp	r3, #3
 8005362:	d9de      	bls.n	8005322 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2200      	movs	r2, #0
 8005368:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	f241 132c 	movw	r3, #4396	; 0x112c
 8005372:	4413      	add	r3, r2
 8005374:	2203      	movs	r2, #3
 8005376:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	68d9      	ldr	r1, [r3, #12]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	f241 1314 	movw	r3, #4372	; 0x1114
 8005384:	4413      	add	r3, r2
 8005386:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	68da      	ldr	r2, [r3, #12]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8005394:	601a      	str	r2, [r3, #0]
}
 8005396:	bf00      	nop
 8005398:	3714      	adds	r7, #20
 800539a:	46bd      	mov	sp, r7
 800539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a0:	4770      	bx	lr

080053a2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80053a2:	b480      	push	{r7}
 80053a4:	b085      	sub	sp, #20
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80053aa:	2300      	movs	r3, #0
 80053ac:	60fb      	str	r3, [r7, #12]
 80053ae:	e024      	b.n	80053fa <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6919      	ldr	r1, [r3, #16]
 80053b4:	68fa      	ldr	r2, [r7, #12]
 80053b6:	4613      	mov	r3, r2
 80053b8:	005b      	lsls	r3, r3, #1
 80053ba:	4413      	add	r3, r2
 80053bc:	00db      	lsls	r3, r3, #3
 80053be:	440b      	add	r3, r1
 80053c0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	2200      	movs	r2, #0
 80053c6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	2200      	movs	r2, #0
 80053cc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	2200      	movs	r2, #0
 80053d2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	2200      	movs	r2, #0
 80053d8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	2200      	movs	r2, #0
 80053de:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	2200      	movs	r2, #0
 80053e4:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors adresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80053e6:	68ba      	ldr	r2, [r7, #8]
 80053e8:	6879      	ldr	r1, [r7, #4]
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	330a      	adds	r3, #10
 80053ee:	009b      	lsls	r3, r3, #2
 80053f0:	440b      	add	r3, r1
 80053f2:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	3301      	adds	r3, #1
 80053f8:	60fb      	str	r3, [r7, #12]
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2b03      	cmp	r3, #3
 80053fe:	d9d7      	bls.n	80053b0 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2200      	movs	r2, #0
 8005404:	63da      	str	r2, [r3, #60]	; 0x3c
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2200      	movs	r2, #0
 800540a:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2200      	movs	r2, #0
 8005410:	645a      	str	r2, [r3, #68]	; 0x44
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2200      	movs	r2, #0
 8005416:	64da      	str	r2, [r3, #76]	; 0x4c
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2200      	movs	r2, #0
 800541c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	f241 1330 	movw	r3, #4400	; 0x1130
 8005426:	4413      	add	r3, r2
 8005428:	2203      	movs	r2, #3
 800542a:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6919      	ldr	r1, [r3, #16]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	f241 131c 	movw	r3, #4380	; 0x111c
 8005438:	4413      	add	r3, r2
 800543a:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	691b      	ldr	r3, [r3, #16]
 8005440:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	f241 1328 	movw	r3, #4392	; 0x1128
 800544c:	4413      	add	r3, r2
 800544e:	6019      	str	r1, [r3, #0]
}
 8005450:	bf00      	nop
 8005452:	3714      	adds	r7, #20
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr

0800545c <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 800545c:	b480      	push	{r7}
 800545e:	b08d      	sub	sp, #52	; 0x34
 8005460:	af00      	add	r7, sp, #0
 8005462:	60f8      	str	r0, [r7, #12]
 8005464:	60b9      	str	r1, [r7, #8]
 8005466:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	3318      	adds	r3, #24
 800546c:	61bb      	str	r3, [r7, #24]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800546e:	69bb      	ldr	r3, [r7, #24]
 8005470:	691b      	ldr	r3, [r3, #16]
 8005472:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8005474:	69bb      	ldr	r3, [r7, #24]
 8005476:	691b      	ldr	r3, [r3, #16]
 8005478:	617b      	str	r3, [r7, #20]
  uint32_t descnbr = 0, idx;
 800547a:	2300      	movs	r3, #0
 800547c:	62bb      	str	r3, [r7, #40]	; 0x28
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800547e:	69bb      	ldr	r3, [r7, #24]
 8005480:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005482:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005486:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	61fb      	str	r3, [r7, #28]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 800548e:	6a3b      	ldr	r3, [r7, #32]
 8005490:	68db      	ldr	r3, [r3, #12]
 8005492:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005496:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800549a:	d101      	bne.n	80054a0 <ETH_Prepare_Tx_Descriptors+0x44>
  {
    return HAL_ETH_ERROR_BUSY;
 800549c:	2302      	movs	r3, #2
 800549e:	e223      	b.n	80058e8 <ETH_Prepare_Tx_Descriptors+0x48c>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f003 0304 	and.w	r3, r3, #4
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d044      	beq.n	8005536 <ETH_Prepare_Tx_Descriptors+0xda>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 80054ac:	6a3b      	ldr	r3, [r7, #32]
 80054ae:	68da      	ldr	r2, [r3, #12]
 80054b0:	4b72      	ldr	r3, [pc, #456]	; (800567c <ETH_Prepare_Tx_Descriptors+0x220>)
 80054b2:	4013      	ands	r3, r2
 80054b4:	68ba      	ldr	r2, [r7, #8]
 80054b6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80054b8:	431a      	orrs	r2, r3
 80054ba:	6a3b      	ldr	r3, [r7, #32]
 80054bc:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 80054be:	6a3b      	ldr	r3, [r7, #32]
 80054c0:	68db      	ldr	r3, [r3, #12]
 80054c2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80054c6:	6a3b      	ldr	r3, [r7, #32]
 80054c8:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80054d8:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != 0U)
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f003 0308 	and.w	r3, r3, #8
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d027      	beq.n	8005536 <ETH_Prepare_Tx_Descriptors+0xda>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 80054e6:	6a3b      	ldr	r3, [r7, #32]
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	b29a      	uxth	r2, r3
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054f0:	041b      	lsls	r3, r3, #16
 80054f2:	431a      	orrs	r2, r3
 80054f4:	6a3b      	ldr	r3, [r7, #32]
 80054f6:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 80054f8:	6a3b      	ldr	r3, [r7, #32]
 80054fa:	68db      	ldr	r3, [r3, #12]
 80054fc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005500:	6a3b      	ldr	r3, [r7, #32]
 8005502:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8005504:	6a3b      	ldr	r3, [r7, #32]
 8005506:	68db      	ldr	r3, [r3, #12]
 8005508:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005510:	431a      	orrs	r2, r3
 8005512:	6a3b      	ldr	r3, [r7, #32]
 8005514:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005524:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005534:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segementation is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f003 0310 	and.w	r3, r3, #16
 800553e:	2b00      	cmp	r3, #0
 8005540:	d00e      	beq.n	8005560 <ETH_Prepare_Tx_Descriptors+0x104>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8005542:	6a3b      	ldr	r3, [r7, #32]
 8005544:	689a      	ldr	r2, [r3, #8]
 8005546:	4b4e      	ldr	r3, [pc, #312]	; (8005680 <ETH_Prepare_Tx_Descriptors+0x224>)
 8005548:	4013      	ands	r3, r2
 800554a:	68ba      	ldr	r2, [r7, #8]
 800554c:	6992      	ldr	r2, [r2, #24]
 800554e:	431a      	orrs	r2, r3
 8005550:	6a3b      	ldr	r3, [r7, #32]
 8005552:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8005554:	6a3b      	ldr	r3, [r7, #32]
 8005556:	68db      	ldr	r3, [r3, #12]
 8005558:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800555c:	6a3b      	ldr	r3, [r7, #32]
 800555e:	60da      	str	r2, [r3, #12]
  }

  if((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)|| (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U))
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f003 0304 	and.w	r3, r3, #4
 8005568:	2b00      	cmp	r3, #0
 800556a:	d105      	bne.n	8005578 <ETH_Prepare_Tx_Descriptors+0x11c>
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f003 0310 	and.w	r3, r3, #16
 8005574:	2b00      	cmp	r3, #0
 8005576:	d030      	beq.n	80055da <ETH_Prepare_Tx_Descriptors+0x17e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8005578:	6a3b      	ldr	r3, [r7, #32]
 800557a:	68db      	ldr	r3, [r3, #12]
 800557c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005580:	6a3b      	ldr	r3, [r7, #32]
 8005582:	60da      	str	r2, [r3, #12]
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8005584:	6a3b      	ldr	r3, [r7, #32]
 8005586:	68db      	ldr	r3, [r3, #12]
 8005588:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800558c:	6a3b      	ldr	r3, [r7, #32]
 800558e:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8005590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005592:	3301      	adds	r3, #1
 8005594:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005598:	2b03      	cmp	r3, #3
 800559a:	d902      	bls.n	80055a2 <ETH_Prepare_Tx_Descriptors+0x146>
 800559c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800559e:	3b04      	subs	r3, #4
 80055a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80055a2:	69bb      	ldr	r3, [r7, #24]
 80055a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055aa:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 80055ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ae:	3301      	adds	r3, #1
 80055b0:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 80055b2:	6a3b      	ldr	r3, [r7, #32]
 80055b4:	68db      	ldr	r3, [r3, #12]
 80055b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055be:	d10c      	bne.n	80055da <ETH_Prepare_Tx_Descriptors+0x17e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 80055c0:	69bb      	ldr	r3, [r7, #24]
 80055c2:	697a      	ldr	r2, [r7, #20]
 80055c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055c8:	623b      	str	r3, [r7, #32]
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80055ca:	6a3b      	ldr	r3, [r7, #32]
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80055d2:	6a3b      	ldr	r3, [r7, #32]
 80055d4:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 80055d6:	2302      	movs	r3, #2
 80055d8:	e186      	b.n	80058e8 <ETH_Prepare_Tx_Descriptors+0x48c>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 80055da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055dc:	3301      	adds	r3, #1
 80055de:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 80055e0:	69fb      	ldr	r3, [r7, #28]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	461a      	mov	r2, r3
 80055e6:	6a3b      	ldr	r3, [r7, #32]
 80055e8:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80055ea:	6a3b      	ldr	r3, [r7, #32]
 80055ec:	689a      	ldr	r2, [r3, #8]
 80055ee:	4b24      	ldr	r3, [pc, #144]	; (8005680 <ETH_Prepare_Tx_Descriptors+0x224>)
 80055f0:	4013      	ands	r3, r2
 80055f2:	69fa      	ldr	r2, [r7, #28]
 80055f4:	6852      	ldr	r2, [r2, #4]
 80055f6:	431a      	orrs	r2, r3
 80055f8:	6a3b      	ldr	r3, [r7, #32]
 80055fa:	609a      	str	r2, [r3, #8]

  if(txbuffer->next != NULL)
 80055fc:	69fb      	ldr	r3, [r7, #28]
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d012      	beq.n	800562a <ETH_Prepare_Tx_Descriptors+0x1ce>
  {
    txbuffer = txbuffer->next;
 8005604:	69fb      	ldr	r3, [r7, #28]
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 800560a:	69fb      	ldr	r3, [r7, #28]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	461a      	mov	r2, r3
 8005610:	6a3b      	ldr	r3, [r7, #32]
 8005612:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8005614:	6a3b      	ldr	r3, [r7, #32]
 8005616:	689a      	ldr	r2, [r3, #8]
 8005618:	4b1a      	ldr	r3, [pc, #104]	; (8005684 <ETH_Prepare_Tx_Descriptors+0x228>)
 800561a:	4013      	ands	r3, r2
 800561c:	69fa      	ldr	r2, [r7, #28]
 800561e:	6852      	ldr	r2, [r2, #4]
 8005620:	0412      	lsls	r2, r2, #16
 8005622:	431a      	orrs	r2, r3
 8005624:	6a3b      	ldr	r3, [r7, #32]
 8005626:	609a      	str	r2, [r3, #8]
 8005628:	e008      	b.n	800563c <ETH_Prepare_Tx_Descriptors+0x1e0>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800562a:	6a3b      	ldr	r3, [r7, #32]
 800562c:	2200      	movs	r2, #0
 800562e:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8005630:	6a3b      	ldr	r3, [r7, #32]
 8005632:	689a      	ldr	r2, [r3, #8]
 8005634:	4b13      	ldr	r3, [pc, #76]	; (8005684 <ETH_Prepare_Tx_Descriptors+0x228>)
 8005636:	4013      	ands	r3, r2
 8005638:	6a3a      	ldr	r2, [r7, #32]
 800563a:	6093      	str	r3, [r2, #8]
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f003 0310 	and.w	r3, r3, #16
 8005644:	2b00      	cmp	r3, #0
 8005646:	d021      	beq.n	800568c <ETH_Prepare_Tx_Descriptors+0x230>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8005648:	6a3b      	ldr	r3, [r7, #32]
 800564a:	68db      	ldr	r3, [r3, #12]
 800564c:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	6a1b      	ldr	r3, [r3, #32]
 8005654:	04db      	lsls	r3, r3, #19
 8005656:	431a      	orrs	r2, r3
 8005658:	6a3b      	ldr	r3, [r7, #32]
 800565a:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 800565c:	6a3b      	ldr	r3, [r7, #32]
 800565e:	68da      	ldr	r2, [r3, #12]
 8005660:	4b09      	ldr	r3, [pc, #36]	; (8005688 <ETH_Prepare_Tx_Descriptors+0x22c>)
 8005662:	4013      	ands	r3, r2
 8005664:	68ba      	ldr	r2, [r7, #8]
 8005666:	69d2      	ldr	r2, [r2, #28]
 8005668:	431a      	orrs	r2, r3
 800566a:	6a3b      	ldr	r3, [r7, #32]
 800566c:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 800566e:	6a3b      	ldr	r3, [r7, #32]
 8005670:	68db      	ldr	r3, [r3, #12]
 8005672:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005676:	6a3b      	ldr	r3, [r7, #32]
 8005678:	60da      	str	r2, [r3, #12]
 800567a:	e02e      	b.n	80056da <ETH_Prepare_Tx_Descriptors+0x27e>
 800567c:	ffff0000 	.word	0xffff0000
 8005680:	ffffc000 	.word	0xffffc000
 8005684:	c000ffff 	.word	0xc000ffff
 8005688:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 800568c:	6a3b      	ldr	r3, [r7, #32]
 800568e:	68da      	ldr	r2, [r3, #12]
 8005690:	4b98      	ldr	r3, [pc, #608]	; (80058f4 <ETH_Prepare_Tx_Descriptors+0x498>)
 8005692:	4013      	ands	r3, r2
 8005694:	68ba      	ldr	r2, [r7, #8]
 8005696:	6852      	ldr	r2, [r2, #4]
 8005698:	431a      	orrs	r2, r3
 800569a:	6a3b      	ldr	r3, [r7, #32]
 800569c:	60da      	str	r2, [r3, #12]

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f003 0301 	and.w	r3, r3, #1
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d008      	beq.n	80056bc <ETH_Prepare_Tx_Descriptors+0x260>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 80056aa:	6a3b      	ldr	r3, [r7, #32]
 80056ac:	68db      	ldr	r3, [r3, #12]
 80056ae:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	695b      	ldr	r3, [r3, #20]
 80056b6:	431a      	orrs	r2, r3
 80056b8:	6a3b      	ldr	r3, [r7, #32]
 80056ba:	60da      	str	r2, [r3, #12]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f003 0320 	and.w	r3, r3, #32
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d008      	beq.n	80056da <ETH_Prepare_Tx_Descriptors+0x27e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 80056c8:	6a3b      	ldr	r3, [r7, #32]
 80056ca:	68db      	ldr	r3, [r3, #12]
 80056cc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	691b      	ldr	r3, [r3, #16]
 80056d4:	431a      	orrs	r2, r3
 80056d6:	6a3b      	ldr	r3, [r7, #32]
 80056d8:	60da      	str	r2, [r3, #12]
    }
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f003 0304 	and.w	r3, r3, #4
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d008      	beq.n	80056f8 <ETH_Prepare_Tx_Descriptors+0x29c>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 80056e6:	6a3b      	ldr	r3, [r7, #32]
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056f2:	431a      	orrs	r2, r3
 80056f4:	6a3b      	ldr	r3, [r7, #32]
 80056f6:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 80056f8:	6a3b      	ldr	r3, [r7, #32]
 80056fa:	68db      	ldr	r3, [r3, #12]
 80056fc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005700:	6a3b      	ldr	r3, [r7, #32]
 8005702:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8005704:	6a3b      	ldr	r3, [r7, #32]
 8005706:	68db      	ldr	r3, [r3, #12]
 8005708:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800570c:	6a3b      	ldr	r3, [r7, #32]
 800570e:	60da      	str	r2, [r3, #12]
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8005710:	6a3b      	ldr	r3, [r7, #32]
 8005712:	68db      	ldr	r3, [r3, #12]
 8005714:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005718:	6a3b      	ldr	r3, [r7, #32]
 800571a:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != 0U)
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f003 0302 	and.w	r3, r3, #2
 8005724:	2b00      	cmp	r3, #0
 8005726:	f000 80c0 	beq.w	80058aa <ETH_Prepare_Tx_Descriptors+0x44e>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 800572a:	6a3b      	ldr	r3, [r7, #32]
 800572c:	68db      	ldr	r3, [r3, #12]
 800572e:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	68db      	ldr	r3, [r3, #12]
 8005736:	431a      	orrs	r2, r3
 8005738:	6a3b      	ldr	r3, [r7, #32]
 800573a:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is splitted into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 800573c:	e0b5      	b.n	80058aa <ETH_Prepare_Tx_Descriptors+0x44e>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 800573e:	6a3b      	ldr	r3, [r7, #32]
 8005740:	68db      	ldr	r3, [r3, #12]
 8005742:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005746:	6a3b      	ldr	r3, [r7, #32]
 8005748:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800574a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800574c:	3301      	adds	r3, #1
 800574e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005752:	2b03      	cmp	r3, #3
 8005754:	d902      	bls.n	800575c <ETH_Prepare_Tx_Descriptors+0x300>
 8005756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005758:	3b04      	subs	r3, #4
 800575a:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800575c:	69bb      	ldr	r3, [r7, #24]
 800575e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005760:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005764:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8005766:	6a3b      	ldr	r3, [r7, #32]
 8005768:	68db      	ldr	r3, [r3, #12]
 800576a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800576e:	6a3b      	ldr	r3, [r7, #32]
 8005770:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8005772:	6a3b      	ldr	r3, [r7, #32]
 8005774:	68db      	ldr	r3, [r3, #12]
 8005776:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800577a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800577e:	d126      	bne.n	80057ce <ETH_Prepare_Tx_Descriptors+0x372>
    {
      descidx = firstdescidx;
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005784:	69bb      	ldr	r3, [r7, #24]
 8005786:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005788:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800578c:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for(idx = 0; idx < descnbr; idx ++)
 800578e:	2300      	movs	r3, #0
 8005790:	627b      	str	r3, [r7, #36]	; 0x24
 8005792:	e016      	b.n	80057c2 <ETH_Prepare_Tx_Descriptors+0x366>
      {
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8005794:	6a3b      	ldr	r3, [r7, #32]
 8005796:	68db      	ldr	r3, [r3, #12]
 8005798:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800579c:	6a3b      	ldr	r3, [r7, #32]
 800579e:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80057a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057a2:	3301      	adds	r3, #1
 80057a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057a8:	2b03      	cmp	r3, #3
 80057aa:	d902      	bls.n	80057b2 <ETH_Prepare_Tx_Descriptors+0x356>
 80057ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057ae:	3b04      	subs	r3, #4
 80057b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80057b2:	69bb      	ldr	r3, [r7, #24]
 80057b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057ba:	623b      	str	r3, [r7, #32]
      for(idx = 0; idx < descnbr; idx ++)
 80057bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057be:	3301      	adds	r3, #1
 80057c0:	627b      	str	r3, [r7, #36]	; 0x24
 80057c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d3e4      	bcc.n	8005794 <ETH_Prepare_Tx_Descriptors+0x338>
      }

      return HAL_ETH_ERROR_BUSY;
 80057ca:	2302      	movs	r3, #2
 80057cc:	e08c      	b.n	80058e8 <ETH_Prepare_Tx_Descriptors+0x48c>
    }

    descnbr += 1U;
 80057ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057d0:	3301      	adds	r3, #1
 80057d2:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80057d4:	69fb      	ldr	r3, [r7, #28]
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 80057da:	69fb      	ldr	r3, [r7, #28]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	461a      	mov	r2, r3
 80057e0:	6a3b      	ldr	r3, [r7, #32]
 80057e2:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80057e4:	6a3b      	ldr	r3, [r7, #32]
 80057e6:	689a      	ldr	r2, [r3, #8]
 80057e8:	4b43      	ldr	r3, [pc, #268]	; (80058f8 <ETH_Prepare_Tx_Descriptors+0x49c>)
 80057ea:	4013      	ands	r3, r2
 80057ec:	69fa      	ldr	r2, [r7, #28]
 80057ee:	6852      	ldr	r2, [r2, #4]
 80057f0:	431a      	orrs	r2, r3
 80057f2:	6a3b      	ldr	r3, [r7, #32]
 80057f4:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 80057f6:	69fb      	ldr	r3, [r7, #28]
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d012      	beq.n	8005824 <ETH_Prepare_Tx_Descriptors+0x3c8>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 80057fe:	69fb      	ldr	r3, [r7, #28]
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8005804:	69fb      	ldr	r3, [r7, #28]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	461a      	mov	r2, r3
 800580a:	6a3b      	ldr	r3, [r7, #32]
 800580c:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 800580e:	6a3b      	ldr	r3, [r7, #32]
 8005810:	689a      	ldr	r2, [r3, #8]
 8005812:	4b3a      	ldr	r3, [pc, #232]	; (80058fc <ETH_Prepare_Tx_Descriptors+0x4a0>)
 8005814:	4013      	ands	r3, r2
 8005816:	69fa      	ldr	r2, [r7, #28]
 8005818:	6852      	ldr	r2, [r2, #4]
 800581a:	0412      	lsls	r2, r2, #16
 800581c:	431a      	orrs	r2, r3
 800581e:	6a3b      	ldr	r3, [r7, #32]
 8005820:	609a      	str	r2, [r3, #8]
 8005822:	e008      	b.n	8005836 <ETH_Prepare_Tx_Descriptors+0x3da>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8005824:	6a3b      	ldr	r3, [r7, #32]
 8005826:	2200      	movs	r2, #0
 8005828:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 800582a:	6a3b      	ldr	r3, [r7, #32]
 800582c:	689a      	ldr	r2, [r3, #8]
 800582e:	4b33      	ldr	r3, [pc, #204]	; (80058fc <ETH_Prepare_Tx_Descriptors+0x4a0>)
 8005830:	4013      	ands	r3, r2
 8005832:	6a3a      	ldr	r2, [r7, #32]
 8005834:	6093      	str	r3, [r2, #8]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f003 0310 	and.w	r3, r3, #16
 800583e:	2b00      	cmp	r3, #0
 8005840:	d00f      	beq.n	8005862 <ETH_Prepare_Tx_Descriptors+0x406>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8005842:	6a3b      	ldr	r3, [r7, #32]
 8005844:	68da      	ldr	r2, [r3, #12]
 8005846:	4b2e      	ldr	r3, [pc, #184]	; (8005900 <ETH_Prepare_Tx_Descriptors+0x4a4>)
 8005848:	4013      	ands	r3, r2
 800584a:	68ba      	ldr	r2, [r7, #8]
 800584c:	69d2      	ldr	r2, [r2, #28]
 800584e:	431a      	orrs	r2, r3
 8005850:	6a3b      	ldr	r3, [r7, #32]
 8005852:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8005854:	6a3b      	ldr	r3, [r7, #32]
 8005856:	68db      	ldr	r3, [r3, #12]
 8005858:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800585c:	6a3b      	ldr	r3, [r7, #32]
 800585e:	60da      	str	r2, [r3, #12]
 8005860:	e017      	b.n	8005892 <ETH_Prepare_Tx_Descriptors+0x436>
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8005862:	6a3b      	ldr	r3, [r7, #32]
 8005864:	68da      	ldr	r2, [r3, #12]
 8005866:	4b23      	ldr	r3, [pc, #140]	; (80058f4 <ETH_Prepare_Tx_Descriptors+0x498>)
 8005868:	4013      	ands	r3, r2
 800586a:	68ba      	ldr	r2, [r7, #8]
 800586c:	6852      	ldr	r2, [r2, #4]
 800586e:	431a      	orrs	r2, r3
 8005870:	6a3b      	ldr	r3, [r7, #32]
 8005872:	60da      	str	r2, [r3, #12]

      if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f003 0301 	and.w	r3, r3, #1
 800587c:	2b00      	cmp	r3, #0
 800587e:	d008      	beq.n	8005892 <ETH_Prepare_Tx_Descriptors+0x436>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8005880:	6a3b      	ldr	r3, [r7, #32]
 8005882:	68db      	ldr	r3, [r3, #12]
 8005884:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	695b      	ldr	r3, [r3, #20]
 800588c:	431a      	orrs	r2, r3
 800588e:	6a3b      	ldr	r3, [r7, #32]
 8005890:	60da      	str	r2, [r3, #12]
      }
    }

    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8005892:	6a3b      	ldr	r3, [r7, #32]
 8005894:	68db      	ldr	r3, [r3, #12]
 8005896:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800589a:	6a3b      	ldr	r3, [r7, #32]
 800589c:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 800589e:	6a3b      	ldr	r3, [r7, #32]
 80058a0:	68db      	ldr	r3, [r3, #12]
 80058a2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80058a6:	6a3b      	ldr	r3, [r7, #32]
 80058a8:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 80058aa:	69fb      	ldr	r3, [r7, #28]
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	f47f af45 	bne.w	800573e <ETH_Prepare_Tx_Descriptors+0x2e2>
  }

  if(ItMode != ((uint32_t)RESET))
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d006      	beq.n	80058c8 <ETH_Prepare_Tx_Descriptors+0x46c>
  {
    /* Set Interrupt on completition bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 80058ba:	6a3b      	ldr	r3, [r7, #32]
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80058c2:	6a3b      	ldr	r3, [r7, #32]
 80058c4:	609a      	str	r2, [r3, #8]
 80058c6:	e005      	b.n	80058d4 <ETH_Prepare_Tx_Descriptors+0x478>
  }
  else
  {
    /* Clear Interrupt on completition bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 80058c8:	6a3b      	ldr	r3, [r7, #32]
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80058d0:	6a3b      	ldr	r3, [r7, #32]
 80058d2:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 80058d4:	6a3b      	ldr	r3, [r7, #32]
 80058d6:	68db      	ldr	r3, [r3, #12]
 80058d8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80058dc:	6a3b      	ldr	r3, [r7, #32]
 80058de:	60da      	str	r2, [r3, #12]

  dmatxdesclist->CurTxDesc = descidx;
 80058e0:	69bb      	ldr	r3, [r7, #24]
 80058e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058e4:	611a      	str	r2, [r3, #16]

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80058e6:	2300      	movs	r3, #0
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3734      	adds	r7, #52	; 0x34
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr
 80058f4:	ffff8000 	.word	0xffff8000
 80058f8:	ffffc000 	.word	0xffffc000
 80058fc:	c000ffff 	.word	0xc000ffff
 8005900:	fffc0000 	.word	0xfffc0000

08005904 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005904:	b480      	push	{r7}
 8005906:	b089      	sub	sp, #36	; 0x24
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800590e:	2300      	movs	r3, #0
 8005910:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005912:	4b89      	ldr	r3, [pc, #548]	; (8005b38 <HAL_GPIO_Init+0x234>)
 8005914:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005916:	e194      	b.n	8005c42 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	2101      	movs	r1, #1
 800591e:	69fb      	ldr	r3, [r7, #28]
 8005920:	fa01 f303 	lsl.w	r3, r1, r3
 8005924:	4013      	ands	r3, r2
 8005926:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	2b00      	cmp	r3, #0
 800592c:	f000 8186 	beq.w	8005c3c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	2b01      	cmp	r3, #1
 8005936:	d00b      	beq.n	8005950 <HAL_GPIO_Init+0x4c>
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	2b02      	cmp	r3, #2
 800593e:	d007      	beq.n	8005950 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005944:	2b11      	cmp	r3, #17
 8005946:	d003      	beq.n	8005950 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	2b12      	cmp	r3, #18
 800594e:	d130      	bne.n	80059b2 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005956:	69fb      	ldr	r3, [r7, #28]
 8005958:	005b      	lsls	r3, r3, #1
 800595a:	2203      	movs	r2, #3
 800595c:	fa02 f303 	lsl.w	r3, r2, r3
 8005960:	43db      	mvns	r3, r3
 8005962:	69ba      	ldr	r2, [r7, #24]
 8005964:	4013      	ands	r3, r2
 8005966:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	68da      	ldr	r2, [r3, #12]
 800596c:	69fb      	ldr	r3, [r7, #28]
 800596e:	005b      	lsls	r3, r3, #1
 8005970:	fa02 f303 	lsl.w	r3, r2, r3
 8005974:	69ba      	ldr	r2, [r7, #24]
 8005976:	4313      	orrs	r3, r2
 8005978:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	69ba      	ldr	r2, [r7, #24]
 800597e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005986:	2201      	movs	r2, #1
 8005988:	69fb      	ldr	r3, [r7, #28]
 800598a:	fa02 f303 	lsl.w	r3, r2, r3
 800598e:	43db      	mvns	r3, r3
 8005990:	69ba      	ldr	r2, [r7, #24]
 8005992:	4013      	ands	r3, r2
 8005994:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	091b      	lsrs	r3, r3, #4
 800599c:	f003 0201 	and.w	r2, r3, #1
 80059a0:	69fb      	ldr	r3, [r7, #28]
 80059a2:	fa02 f303 	lsl.w	r3, r2, r3
 80059a6:	69ba      	ldr	r2, [r7, #24]
 80059a8:	4313      	orrs	r3, r2
 80059aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	69ba      	ldr	r2, [r7, #24]
 80059b0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	68db      	ldr	r3, [r3, #12]
 80059b6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80059b8:	69fb      	ldr	r3, [r7, #28]
 80059ba:	005b      	lsls	r3, r3, #1
 80059bc:	2203      	movs	r2, #3
 80059be:	fa02 f303 	lsl.w	r3, r2, r3
 80059c2:	43db      	mvns	r3, r3
 80059c4:	69ba      	ldr	r2, [r7, #24]
 80059c6:	4013      	ands	r3, r2
 80059c8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	689a      	ldr	r2, [r3, #8]
 80059ce:	69fb      	ldr	r3, [r7, #28]
 80059d0:	005b      	lsls	r3, r3, #1
 80059d2:	fa02 f303 	lsl.w	r3, r2, r3
 80059d6:	69ba      	ldr	r2, [r7, #24]
 80059d8:	4313      	orrs	r3, r2
 80059da:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	69ba      	ldr	r2, [r7, #24]
 80059e0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	2b02      	cmp	r3, #2
 80059e8:	d003      	beq.n	80059f2 <HAL_GPIO_Init+0xee>
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	2b12      	cmp	r3, #18
 80059f0:	d123      	bne.n	8005a3a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80059f2:	69fb      	ldr	r3, [r7, #28]
 80059f4:	08da      	lsrs	r2, r3, #3
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	3208      	adds	r2, #8
 80059fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005a00:	69fb      	ldr	r3, [r7, #28]
 8005a02:	f003 0307 	and.w	r3, r3, #7
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	220f      	movs	r2, #15
 8005a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a0e:	43db      	mvns	r3, r3
 8005a10:	69ba      	ldr	r2, [r7, #24]
 8005a12:	4013      	ands	r3, r2
 8005a14:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	691a      	ldr	r2, [r3, #16]
 8005a1a:	69fb      	ldr	r3, [r7, #28]
 8005a1c:	f003 0307 	and.w	r3, r3, #7
 8005a20:	009b      	lsls	r3, r3, #2
 8005a22:	fa02 f303 	lsl.w	r3, r2, r3
 8005a26:	69ba      	ldr	r2, [r7, #24]
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005a2c:	69fb      	ldr	r3, [r7, #28]
 8005a2e:	08da      	lsrs	r2, r3, #3
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	3208      	adds	r2, #8
 8005a34:	69b9      	ldr	r1, [r7, #24]
 8005a36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005a40:	69fb      	ldr	r3, [r7, #28]
 8005a42:	005b      	lsls	r3, r3, #1
 8005a44:	2203      	movs	r2, #3
 8005a46:	fa02 f303 	lsl.w	r3, r2, r3
 8005a4a:	43db      	mvns	r3, r3
 8005a4c:	69ba      	ldr	r2, [r7, #24]
 8005a4e:	4013      	ands	r3, r2
 8005a50:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	f003 0203 	and.w	r2, r3, #3
 8005a5a:	69fb      	ldr	r3, [r7, #28]
 8005a5c:	005b      	lsls	r3, r3, #1
 8005a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a62:	69ba      	ldr	r2, [r7, #24]
 8005a64:	4313      	orrs	r3, r2
 8005a66:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	69ba      	ldr	r2, [r7, #24]
 8005a6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	f000 80e0 	beq.w	8005c3c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a7c:	4b2f      	ldr	r3, [pc, #188]	; (8005b3c <HAL_GPIO_Init+0x238>)
 8005a7e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005a82:	4a2e      	ldr	r2, [pc, #184]	; (8005b3c <HAL_GPIO_Init+0x238>)
 8005a84:	f043 0302 	orr.w	r3, r3, #2
 8005a88:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005a8c:	4b2b      	ldr	r3, [pc, #172]	; (8005b3c <HAL_GPIO_Init+0x238>)
 8005a8e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005a92:	f003 0302 	and.w	r3, r3, #2
 8005a96:	60fb      	str	r3, [r7, #12]
 8005a98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005a9a:	4a29      	ldr	r2, [pc, #164]	; (8005b40 <HAL_GPIO_Init+0x23c>)
 8005a9c:	69fb      	ldr	r3, [r7, #28]
 8005a9e:	089b      	lsrs	r3, r3, #2
 8005aa0:	3302      	adds	r3, #2
 8005aa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005aa8:	69fb      	ldr	r3, [r7, #28]
 8005aaa:	f003 0303 	and.w	r3, r3, #3
 8005aae:	009b      	lsls	r3, r3, #2
 8005ab0:	220f      	movs	r2, #15
 8005ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ab6:	43db      	mvns	r3, r3
 8005ab8:	69ba      	ldr	r2, [r7, #24]
 8005aba:	4013      	ands	r3, r2
 8005abc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	4a20      	ldr	r2, [pc, #128]	; (8005b44 <HAL_GPIO_Init+0x240>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d052      	beq.n	8005b6c <HAL_GPIO_Init+0x268>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	4a1f      	ldr	r2, [pc, #124]	; (8005b48 <HAL_GPIO_Init+0x244>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d031      	beq.n	8005b32 <HAL_GPIO_Init+0x22e>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	4a1e      	ldr	r2, [pc, #120]	; (8005b4c <HAL_GPIO_Init+0x248>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d02b      	beq.n	8005b2e <HAL_GPIO_Init+0x22a>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	4a1d      	ldr	r2, [pc, #116]	; (8005b50 <HAL_GPIO_Init+0x24c>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d025      	beq.n	8005b2a <HAL_GPIO_Init+0x226>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	4a1c      	ldr	r2, [pc, #112]	; (8005b54 <HAL_GPIO_Init+0x250>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d01f      	beq.n	8005b26 <HAL_GPIO_Init+0x222>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	4a1b      	ldr	r2, [pc, #108]	; (8005b58 <HAL_GPIO_Init+0x254>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d019      	beq.n	8005b22 <HAL_GPIO_Init+0x21e>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	4a1a      	ldr	r2, [pc, #104]	; (8005b5c <HAL_GPIO_Init+0x258>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d013      	beq.n	8005b1e <HAL_GPIO_Init+0x21a>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	4a19      	ldr	r2, [pc, #100]	; (8005b60 <HAL_GPIO_Init+0x25c>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d00d      	beq.n	8005b1a <HAL_GPIO_Init+0x216>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	4a18      	ldr	r2, [pc, #96]	; (8005b64 <HAL_GPIO_Init+0x260>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d007      	beq.n	8005b16 <HAL_GPIO_Init+0x212>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	4a17      	ldr	r2, [pc, #92]	; (8005b68 <HAL_GPIO_Init+0x264>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d101      	bne.n	8005b12 <HAL_GPIO_Init+0x20e>
 8005b0e:	2309      	movs	r3, #9
 8005b10:	e02d      	b.n	8005b6e <HAL_GPIO_Init+0x26a>
 8005b12:	230a      	movs	r3, #10
 8005b14:	e02b      	b.n	8005b6e <HAL_GPIO_Init+0x26a>
 8005b16:	2308      	movs	r3, #8
 8005b18:	e029      	b.n	8005b6e <HAL_GPIO_Init+0x26a>
 8005b1a:	2307      	movs	r3, #7
 8005b1c:	e027      	b.n	8005b6e <HAL_GPIO_Init+0x26a>
 8005b1e:	2306      	movs	r3, #6
 8005b20:	e025      	b.n	8005b6e <HAL_GPIO_Init+0x26a>
 8005b22:	2305      	movs	r3, #5
 8005b24:	e023      	b.n	8005b6e <HAL_GPIO_Init+0x26a>
 8005b26:	2304      	movs	r3, #4
 8005b28:	e021      	b.n	8005b6e <HAL_GPIO_Init+0x26a>
 8005b2a:	2303      	movs	r3, #3
 8005b2c:	e01f      	b.n	8005b6e <HAL_GPIO_Init+0x26a>
 8005b2e:	2302      	movs	r3, #2
 8005b30:	e01d      	b.n	8005b6e <HAL_GPIO_Init+0x26a>
 8005b32:	2301      	movs	r3, #1
 8005b34:	e01b      	b.n	8005b6e <HAL_GPIO_Init+0x26a>
 8005b36:	bf00      	nop
 8005b38:	58000080 	.word	0x58000080
 8005b3c:	58024400 	.word	0x58024400
 8005b40:	58000400 	.word	0x58000400
 8005b44:	58020000 	.word	0x58020000
 8005b48:	58020400 	.word	0x58020400
 8005b4c:	58020800 	.word	0x58020800
 8005b50:	58020c00 	.word	0x58020c00
 8005b54:	58021000 	.word	0x58021000
 8005b58:	58021400 	.word	0x58021400
 8005b5c:	58021800 	.word	0x58021800
 8005b60:	58021c00 	.word	0x58021c00
 8005b64:	58022000 	.word	0x58022000
 8005b68:	58022400 	.word	0x58022400
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	69fa      	ldr	r2, [r7, #28]
 8005b70:	f002 0203 	and.w	r2, r2, #3
 8005b74:	0092      	lsls	r2, r2, #2
 8005b76:	4093      	lsls	r3, r2
 8005b78:	69ba      	ldr	r2, [r7, #24]
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005b7e:	4938      	ldr	r1, [pc, #224]	; (8005c60 <HAL_GPIO_Init+0x35c>)
 8005b80:	69fb      	ldr	r3, [r7, #28]
 8005b82:	089b      	lsrs	r3, r3, #2
 8005b84:	3302      	adds	r3, #2
 8005b86:	69ba      	ldr	r2, [r7, #24]
 8005b88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	43db      	mvns	r3, r3
 8005b96:	69ba      	ldr	r2, [r7, #24]
 8005b98:	4013      	ands	r3, r2
 8005b9a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d003      	beq.n	8005bb0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005ba8:	69ba      	ldr	r2, [r7, #24]
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	4313      	orrs	r3, r2
 8005bae:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	69ba      	ldr	r2, [r7, #24]
 8005bb4:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	43db      	mvns	r3, r3
 8005bc0:	69ba      	ldr	r2, [r7, #24]
 8005bc2:	4013      	ands	r3, r2
 8005bc4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d003      	beq.n	8005bda <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005bd2:	69ba      	ldr	r2, [r7, #24]
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	69ba      	ldr	r2, [r7, #24]
 8005bde:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005be0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	43db      	mvns	r3, r3
 8005bec:	69ba      	ldr	r2, [r7, #24]
 8005bee:	4013      	ands	r3, r2
 8005bf0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d003      	beq.n	8005c06 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8005bfe:	69ba      	ldr	r2, [r7, #24]
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	4313      	orrs	r3, r2
 8005c04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005c06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c0a:	69bb      	ldr	r3, [r7, #24]
 8005c0c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005c0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	43db      	mvns	r3, r3
 8005c1a:	69ba      	ldr	r2, [r7, #24]
 8005c1c:	4013      	ands	r3, r2
 8005c1e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d003      	beq.n	8005c34 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8005c2c:	69ba      	ldr	r2, [r7, #24]
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	4313      	orrs	r3, r2
 8005c32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005c34:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c38:	69bb      	ldr	r3, [r7, #24]
 8005c3a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8005c3c:	69fb      	ldr	r3, [r7, #28]
 8005c3e:	3301      	adds	r3, #1
 8005c40:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	681a      	ldr	r2, [r3, #0]
 8005c46:	69fb      	ldr	r3, [r7, #28]
 8005c48:	fa22 f303 	lsr.w	r3, r2, r3
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	f47f ae63 	bne.w	8005918 <HAL_GPIO_Init+0x14>
  }
}
 8005c52:	bf00      	nop
 8005c54:	3724      	adds	r7, #36	; 0x24
 8005c56:	46bd      	mov	sp, r7
 8005c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5c:	4770      	bx	lr
 8005c5e:	bf00      	nop
 8005c60:	58000400 	.word	0x58000400

08005c64 <HAL_HSEM_Take>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_HSEM_Take(uint32_t SemID, uint32_t ProcessID)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b083      	sub	sp, #12
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
 8005c6c:	6039      	str	r1, [r7, #0]
    /*take success when MasterID and ProcessID match and take bit set*/
    return HAL_OK;
  }
#else
  /* First step  write R register with MasterID, processID and take bit=1*/
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK);
 8005c6e:	490c      	ldr	r1, [pc, #48]	; (8005ca0 <HAL_HSEM_Take+0x3c>)
 8005c70:	683a      	ldr	r2, [r7, #0]
 8005c72:	4b0c      	ldr	r3, [pc, #48]	; (8005ca4 <HAL_HSEM_Take+0x40>)
 8005c74:	4313      	orrs	r3, r2
 8005c76:	687a      	ldr	r2, [r7, #4]
 8005c78:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  /* second step : read the R register . Take achieved if MasterID and processID match and take bit set to 1 */
  if (HSEM->R[SemID] == (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK))
 8005c7c:	4a08      	ldr	r2, [pc, #32]	; (8005ca0 <HAL_HSEM_Take+0x3c>)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005c84:	6839      	ldr	r1, [r7, #0]
 8005c86:	4b07      	ldr	r3, [pc, #28]	; (8005ca4 <HAL_HSEM_Take+0x40>)
 8005c88:	430b      	orrs	r3, r1
 8005c8a:	429a      	cmp	r2, r3
 8005c8c:	d101      	bne.n	8005c92 <HAL_HSEM_Take+0x2e>
  {
    /*take success when MasterID and ProcessID match and take bit set*/
    return HAL_OK;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	e000      	b.n	8005c94 <HAL_HSEM_Take+0x30>
  }
#endif

  /* Semaphore take fails*/
  return HAL_ERROR;
 8005c92:	2301      	movs	r3, #1
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	370c      	adds	r7, #12
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr
 8005ca0:	58026400 	.word	0x58026400
 8005ca4:	80000300 	.word	0x80000300

08005ca8 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b083      	sub	sp, #12
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8005cb0:	4a08      	ldr	r2, [pc, #32]	; (8005cd4 <HAL_HSEM_FastTake+0x2c>)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	3320      	adds	r3, #32
 8005cb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cba:	4a07      	ldr	r2, [pc, #28]	; (8005cd8 <HAL_HSEM_FastTake+0x30>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d101      	bne.n	8005cc4 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	e000      	b.n	8005cc6 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	370c      	adds	r7, #12
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr
 8005cd2:	bf00      	nop
 8005cd4:	58026400 	.word	0x58026400
 8005cd8:	80000300 	.word	0x80000300

08005cdc <HAL_HSEM_IsSemTaken>:
  * @brief  Check semaphore state Taken or not.
  * @param  SemID: semaphore ID
  * @retval HAL HSEM state
  */
uint32_t HAL_HSEM_IsSemTaken(uint32_t SemID)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b083      	sub	sp, #12
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  return (((HSEM->R[SemID] & HSEM_R_LOCK) != 0U) ? 1UL : 0UL);
 8005ce4:	4a07      	ldr	r2, [pc, #28]	; (8005d04 <HAL_HSEM_IsSemTaken+0x28>)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	da01      	bge.n	8005cf4 <HAL_HSEM_IsSemTaken+0x18>
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	e000      	b.n	8005cf6 <HAL_HSEM_IsSemTaken+0x1a>
 8005cf4:	2300      	movs	r3, #0
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	370c      	adds	r7, #12
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d00:	4770      	bx	lr
 8005d02:	bf00      	nop
 8005d04:	58026400 	.word	0x58026400

08005d08 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b083      	sub	sp, #12
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
 8005d10:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8005d12:	4906      	ldr	r1, [pc, #24]	; (8005d2c <HAL_HSEM_Release+0x24>)
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8005d20:	bf00      	nop
 8005d22:	370c      	adds	r7, #12
 8005d24:	46bd      	mov	sp, r7
 8005d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2a:	4770      	bx	lr
 8005d2c:	58026400 	.word	0x58026400

08005d30 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b084      	sub	sp, #16
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d101      	bne.n	8005d42 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	e038      	b.n	8005db4 <HAL_IWDG_Init+0x84>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8005d4a:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f245 5255 	movw	r2, #21845	; 0x5555
 8005d54:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	687a      	ldr	r2, [r7, #4]
 8005d5c:	6852      	ldr	r2, [r2, #4]
 8005d5e:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	687a      	ldr	r2, [r7, #4]
 8005d66:	6892      	ldr	r2, [r2, #8]
 8005d68:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8005d6a:	f7fb fff5 	bl	8001d58 <HAL_GetTick>
 8005d6e:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 8005d70:	e008      	b.n	8005d84 <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8005d72:	f7fb fff1 	bl	8001d58 <HAL_GetTick>
 8005d76:	4602      	mov	r2, r0
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	1ad3      	subs	r3, r2, r3
 8005d7c:	2b30      	cmp	r3, #48	; 0x30
 8005d7e:	d901      	bls.n	8005d84 <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 8005d80:	2303      	movs	r3, #3
 8005d82:	e017      	b.n	8005db4 <HAL_IWDG_Init+0x84>
  while (hiwdg->Instance->SR != 0x00u)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	68db      	ldr	r3, [r3, #12]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d1f1      	bne.n	8005d72 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	691a      	ldr	r2, [r3, #16]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	68db      	ldr	r3, [r3, #12]
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	d005      	beq.n	8005da8 <HAL_IWDG_Init+0x78>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	687a      	ldr	r2, [r7, #4]
 8005da2:	68d2      	ldr	r2, [r2, #12]
 8005da4:	611a      	str	r2, [r3, #16]
 8005da6:	e004      	b.n	8005db2 <HAL_IWDG_Init+0x82>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8005db0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005db2:	2300      	movs	r3, #0
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	3710      	adds	r7, #16
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}

08005dbc <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b083      	sub	sp, #12
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8005dcc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005dce:	2300      	movs	r3, #0
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	370c      	adds	r7, #12
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr

08005ddc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b084      	sub	sp, #16
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8005de4:	4b29      	ldr	r3, [pc, #164]	; (8005e8c <HAL_PWREx_ConfigSupply+0xb0>)
 8005de6:	68db      	ldr	r3, [r3, #12]
 8005de8:	f003 0307 	and.w	r3, r3, #7
 8005dec:	2b06      	cmp	r3, #6
 8005dee:	d00a      	beq.n	8005e06 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005df0:	4b26      	ldr	r3, [pc, #152]	; (8005e8c <HAL_PWREx_ConfigSupply+0xb0>)
 8005df2:	68db      	ldr	r3, [r3, #12]
 8005df4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005df8:	687a      	ldr	r2, [r7, #4]
 8005dfa:	429a      	cmp	r2, r3
 8005dfc:	d001      	beq.n	8005e02 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	e040      	b.n	8005e84 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005e02:	2300      	movs	r3, #0
 8005e04:	e03e      	b.n	8005e84 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005e06:	4b21      	ldr	r3, [pc, #132]	; (8005e8c <HAL_PWREx_ConfigSupply+0xb0>)
 8005e08:	68db      	ldr	r3, [r3, #12]
 8005e0a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8005e0e:	491f      	ldr	r1, [pc, #124]	; (8005e8c <HAL_PWREx_ConfigSupply+0xb0>)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	4313      	orrs	r3, r2
 8005e14:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005e16:	f7fb ff9f 	bl	8001d58 <HAL_GetTick>
 8005e1a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005e1c:	e009      	b.n	8005e32 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005e1e:	f7fb ff9b 	bl	8001d58 <HAL_GetTick>
 8005e22:	4602      	mov	r2, r0
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	1ad3      	subs	r3, r2, r3
 8005e28:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e2c:	d901      	bls.n	8005e32 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	e028      	b.n	8005e84 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005e32:	4b16      	ldr	r3, [pc, #88]	; (8005e8c <HAL_PWREx_ConfigSupply+0xb0>)
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e3e:	d1ee      	bne.n	8005e1e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2b1e      	cmp	r3, #30
 8005e44:	d008      	beq.n	8005e58 <HAL_PWREx_ConfigSupply+0x7c>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2b2e      	cmp	r3, #46	; 0x2e
 8005e4a:	d005      	beq.n	8005e58 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2b1d      	cmp	r3, #29
 8005e50:	d002      	beq.n	8005e58 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2b2d      	cmp	r3, #45	; 0x2d
 8005e56:	d114      	bne.n	8005e82 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8005e58:	f7fb ff7e 	bl	8001d58 <HAL_GetTick>
 8005e5c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005e5e:	e009      	b.n	8005e74 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005e60:	f7fb ff7a 	bl	8001d58 <HAL_GetTick>
 8005e64:	4602      	mov	r2, r0
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	1ad3      	subs	r3, r2, r3
 8005e6a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e6e:	d901      	bls.n	8005e74 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8005e70:	2301      	movs	r3, #1
 8005e72:	e007      	b.n	8005e84 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005e74:	4b05      	ldr	r3, [pc, #20]	; (8005e8c <HAL_PWREx_ConfigSupply+0xb0>)
 8005e76:	68db      	ldr	r3, [r3, #12]
 8005e78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e80:	d1ee      	bne.n	8005e60 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005e82:	2300      	movs	r3, #0
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	3710      	adds	r7, #16
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}
 8005e8c:	58024800 	.word	0x58024800

08005e90 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b08c      	sub	sp, #48	; 0x30
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d101      	bne.n	8005ea2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	e3ff      	b.n	80066a2 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f003 0301 	and.w	r3, r3, #1
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	f000 8087 	beq.w	8005fbe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005eb0:	4b99      	ldr	r3, [pc, #612]	; (8006118 <HAL_RCC_OscConfig+0x288>)
 8005eb2:	691b      	ldr	r3, [r3, #16]
 8005eb4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005eba:	4b97      	ldr	r3, [pc, #604]	; (8006118 <HAL_RCC_OscConfig+0x288>)
 8005ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ebe:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ec2:	2b10      	cmp	r3, #16
 8005ec4:	d007      	beq.n	8005ed6 <HAL_RCC_OscConfig+0x46>
 8005ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ec8:	2b18      	cmp	r3, #24
 8005eca:	d110      	bne.n	8005eee <HAL_RCC_OscConfig+0x5e>
 8005ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ece:	f003 0303 	and.w	r3, r3, #3
 8005ed2:	2b02      	cmp	r3, #2
 8005ed4:	d10b      	bne.n	8005eee <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ed6:	4b90      	ldr	r3, [pc, #576]	; (8006118 <HAL_RCC_OscConfig+0x288>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d06c      	beq.n	8005fbc <HAL_RCC_OscConfig+0x12c>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d168      	bne.n	8005fbc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005eea:	2301      	movs	r3, #1
 8005eec:	e3d9      	b.n	80066a2 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ef6:	d106      	bne.n	8005f06 <HAL_RCC_OscConfig+0x76>
 8005ef8:	4b87      	ldr	r3, [pc, #540]	; (8006118 <HAL_RCC_OscConfig+0x288>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a86      	ldr	r2, [pc, #536]	; (8006118 <HAL_RCC_OscConfig+0x288>)
 8005efe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f02:	6013      	str	r3, [r2, #0]
 8005f04:	e02e      	b.n	8005f64 <HAL_RCC_OscConfig+0xd4>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d10c      	bne.n	8005f28 <HAL_RCC_OscConfig+0x98>
 8005f0e:	4b82      	ldr	r3, [pc, #520]	; (8006118 <HAL_RCC_OscConfig+0x288>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a81      	ldr	r2, [pc, #516]	; (8006118 <HAL_RCC_OscConfig+0x288>)
 8005f14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f18:	6013      	str	r3, [r2, #0]
 8005f1a:	4b7f      	ldr	r3, [pc, #508]	; (8006118 <HAL_RCC_OscConfig+0x288>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a7e      	ldr	r2, [pc, #504]	; (8006118 <HAL_RCC_OscConfig+0x288>)
 8005f20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f24:	6013      	str	r3, [r2, #0]
 8005f26:	e01d      	b.n	8005f64 <HAL_RCC_OscConfig+0xd4>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005f30:	d10c      	bne.n	8005f4c <HAL_RCC_OscConfig+0xbc>
 8005f32:	4b79      	ldr	r3, [pc, #484]	; (8006118 <HAL_RCC_OscConfig+0x288>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a78      	ldr	r2, [pc, #480]	; (8006118 <HAL_RCC_OscConfig+0x288>)
 8005f38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005f3c:	6013      	str	r3, [r2, #0]
 8005f3e:	4b76      	ldr	r3, [pc, #472]	; (8006118 <HAL_RCC_OscConfig+0x288>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a75      	ldr	r2, [pc, #468]	; (8006118 <HAL_RCC_OscConfig+0x288>)
 8005f44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f48:	6013      	str	r3, [r2, #0]
 8005f4a:	e00b      	b.n	8005f64 <HAL_RCC_OscConfig+0xd4>
 8005f4c:	4b72      	ldr	r3, [pc, #456]	; (8006118 <HAL_RCC_OscConfig+0x288>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a71      	ldr	r2, [pc, #452]	; (8006118 <HAL_RCC_OscConfig+0x288>)
 8005f52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f56:	6013      	str	r3, [r2, #0]
 8005f58:	4b6f      	ldr	r3, [pc, #444]	; (8006118 <HAL_RCC_OscConfig+0x288>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a6e      	ldr	r2, [pc, #440]	; (8006118 <HAL_RCC_OscConfig+0x288>)
 8005f5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d013      	beq.n	8005f94 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f6c:	f7fb fef4 	bl	8001d58 <HAL_GetTick>
 8005f70:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005f72:	e008      	b.n	8005f86 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f74:	f7fb fef0 	bl	8001d58 <HAL_GetTick>
 8005f78:	4602      	mov	r2, r0
 8005f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f7c:	1ad3      	subs	r3, r2, r3
 8005f7e:	2b64      	cmp	r3, #100	; 0x64
 8005f80:	d901      	bls.n	8005f86 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005f82:	2303      	movs	r3, #3
 8005f84:	e38d      	b.n	80066a2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005f86:	4b64      	ldr	r3, [pc, #400]	; (8006118 <HAL_RCC_OscConfig+0x288>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d0f0      	beq.n	8005f74 <HAL_RCC_OscConfig+0xe4>
 8005f92:	e014      	b.n	8005fbe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f94:	f7fb fee0 	bl	8001d58 <HAL_GetTick>
 8005f98:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005f9a:	e008      	b.n	8005fae <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f9c:	f7fb fedc 	bl	8001d58 <HAL_GetTick>
 8005fa0:	4602      	mov	r2, r0
 8005fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa4:	1ad3      	subs	r3, r2, r3
 8005fa6:	2b64      	cmp	r3, #100	; 0x64
 8005fa8:	d901      	bls.n	8005fae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005faa:	2303      	movs	r3, #3
 8005fac:	e379      	b.n	80066a2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005fae:	4b5a      	ldr	r3, [pc, #360]	; (8006118 <HAL_RCC_OscConfig+0x288>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d1f0      	bne.n	8005f9c <HAL_RCC_OscConfig+0x10c>
 8005fba:	e000      	b.n	8005fbe <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f003 0302 	and.w	r3, r3, #2
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	f000 80ae 	beq.w	8006128 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005fcc:	4b52      	ldr	r3, [pc, #328]	; (8006118 <HAL_RCC_OscConfig+0x288>)
 8005fce:	691b      	ldr	r3, [r3, #16]
 8005fd0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005fd4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005fd6:	4b50      	ldr	r3, [pc, #320]	; (8006118 <HAL_RCC_OscConfig+0x288>)
 8005fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fda:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005fdc:	6a3b      	ldr	r3, [r7, #32]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d007      	beq.n	8005ff2 <HAL_RCC_OscConfig+0x162>
 8005fe2:	6a3b      	ldr	r3, [r7, #32]
 8005fe4:	2b18      	cmp	r3, #24
 8005fe6:	d13a      	bne.n	800605e <HAL_RCC_OscConfig+0x1ce>
 8005fe8:	69fb      	ldr	r3, [r7, #28]
 8005fea:	f003 0303 	and.w	r3, r3, #3
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d135      	bne.n	800605e <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ff2:	4b49      	ldr	r3, [pc, #292]	; (8006118 <HAL_RCC_OscConfig+0x288>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f003 0304 	and.w	r3, r3, #4
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d005      	beq.n	800600a <HAL_RCC_OscConfig+0x17a>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	68db      	ldr	r3, [r3, #12]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d101      	bne.n	800600a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	e34b      	b.n	80066a2 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800600a:	f7fb feb1 	bl	8001d70 <HAL_GetREVID>
 800600e:	4602      	mov	r2, r0
 8006010:	f241 0303 	movw	r3, #4099	; 0x1003
 8006014:	429a      	cmp	r2, r3
 8006016:	d817      	bhi.n	8006048 <HAL_RCC_OscConfig+0x1b8>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	691b      	ldr	r3, [r3, #16]
 800601c:	2b40      	cmp	r3, #64	; 0x40
 800601e:	d108      	bne.n	8006032 <HAL_RCC_OscConfig+0x1a2>
 8006020:	4b3d      	ldr	r3, [pc, #244]	; (8006118 <HAL_RCC_OscConfig+0x288>)
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006028:	4a3b      	ldr	r2, [pc, #236]	; (8006118 <HAL_RCC_OscConfig+0x288>)
 800602a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800602e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006030:	e07a      	b.n	8006128 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006032:	4b39      	ldr	r3, [pc, #228]	; (8006118 <HAL_RCC_OscConfig+0x288>)
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	691b      	ldr	r3, [r3, #16]
 800603e:	031b      	lsls	r3, r3, #12
 8006040:	4935      	ldr	r1, [pc, #212]	; (8006118 <HAL_RCC_OscConfig+0x288>)
 8006042:	4313      	orrs	r3, r2
 8006044:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006046:	e06f      	b.n	8006128 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006048:	4b33      	ldr	r3, [pc, #204]	; (8006118 <HAL_RCC_OscConfig+0x288>)
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	691b      	ldr	r3, [r3, #16]
 8006054:	061b      	lsls	r3, r3, #24
 8006056:	4930      	ldr	r1, [pc, #192]	; (8006118 <HAL_RCC_OscConfig+0x288>)
 8006058:	4313      	orrs	r3, r2
 800605a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800605c:	e064      	b.n	8006128 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	68db      	ldr	r3, [r3, #12]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d045      	beq.n	80060f2 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006066:	4b2c      	ldr	r3, [pc, #176]	; (8006118 <HAL_RCC_OscConfig+0x288>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f023 0219 	bic.w	r2, r3, #25
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	68db      	ldr	r3, [r3, #12]
 8006072:	4929      	ldr	r1, [pc, #164]	; (8006118 <HAL_RCC_OscConfig+0x288>)
 8006074:	4313      	orrs	r3, r2
 8006076:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006078:	f7fb fe6e 	bl	8001d58 <HAL_GetTick>
 800607c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800607e:	e008      	b.n	8006092 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006080:	f7fb fe6a 	bl	8001d58 <HAL_GetTick>
 8006084:	4602      	mov	r2, r0
 8006086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006088:	1ad3      	subs	r3, r2, r3
 800608a:	2b02      	cmp	r3, #2
 800608c:	d901      	bls.n	8006092 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800608e:	2303      	movs	r3, #3
 8006090:	e307      	b.n	80066a2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006092:	4b21      	ldr	r3, [pc, #132]	; (8006118 <HAL_RCC_OscConfig+0x288>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f003 0304 	and.w	r3, r3, #4
 800609a:	2b00      	cmp	r3, #0
 800609c:	d0f0      	beq.n	8006080 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800609e:	f7fb fe67 	bl	8001d70 <HAL_GetREVID>
 80060a2:	4602      	mov	r2, r0
 80060a4:	f241 0303 	movw	r3, #4099	; 0x1003
 80060a8:	429a      	cmp	r2, r3
 80060aa:	d817      	bhi.n	80060dc <HAL_RCC_OscConfig+0x24c>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	691b      	ldr	r3, [r3, #16]
 80060b0:	2b40      	cmp	r3, #64	; 0x40
 80060b2:	d108      	bne.n	80060c6 <HAL_RCC_OscConfig+0x236>
 80060b4:	4b18      	ldr	r3, [pc, #96]	; (8006118 <HAL_RCC_OscConfig+0x288>)
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80060bc:	4a16      	ldr	r2, [pc, #88]	; (8006118 <HAL_RCC_OscConfig+0x288>)
 80060be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060c2:	6053      	str	r3, [r2, #4]
 80060c4:	e030      	b.n	8006128 <HAL_RCC_OscConfig+0x298>
 80060c6:	4b14      	ldr	r3, [pc, #80]	; (8006118 <HAL_RCC_OscConfig+0x288>)
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	691b      	ldr	r3, [r3, #16]
 80060d2:	031b      	lsls	r3, r3, #12
 80060d4:	4910      	ldr	r1, [pc, #64]	; (8006118 <HAL_RCC_OscConfig+0x288>)
 80060d6:	4313      	orrs	r3, r2
 80060d8:	604b      	str	r3, [r1, #4]
 80060da:	e025      	b.n	8006128 <HAL_RCC_OscConfig+0x298>
 80060dc:	4b0e      	ldr	r3, [pc, #56]	; (8006118 <HAL_RCC_OscConfig+0x288>)
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	691b      	ldr	r3, [r3, #16]
 80060e8:	061b      	lsls	r3, r3, #24
 80060ea:	490b      	ldr	r1, [pc, #44]	; (8006118 <HAL_RCC_OscConfig+0x288>)
 80060ec:	4313      	orrs	r3, r2
 80060ee:	604b      	str	r3, [r1, #4]
 80060f0:	e01a      	b.n	8006128 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80060f2:	4b09      	ldr	r3, [pc, #36]	; (8006118 <HAL_RCC_OscConfig+0x288>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a08      	ldr	r2, [pc, #32]	; (8006118 <HAL_RCC_OscConfig+0x288>)
 80060f8:	f023 0301 	bic.w	r3, r3, #1
 80060fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060fe:	f7fb fe2b 	bl	8001d58 <HAL_GetTick>
 8006102:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006104:	e00a      	b.n	800611c <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006106:	f7fb fe27 	bl	8001d58 <HAL_GetTick>
 800610a:	4602      	mov	r2, r0
 800610c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800610e:	1ad3      	subs	r3, r2, r3
 8006110:	2b02      	cmp	r3, #2
 8006112:	d903      	bls.n	800611c <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8006114:	2303      	movs	r3, #3
 8006116:	e2c4      	b.n	80066a2 <HAL_RCC_OscConfig+0x812>
 8006118:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800611c:	4ba4      	ldr	r3, [pc, #656]	; (80063b0 <HAL_RCC_OscConfig+0x520>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f003 0304 	and.w	r3, r3, #4
 8006124:	2b00      	cmp	r3, #0
 8006126:	d1ee      	bne.n	8006106 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f003 0310 	and.w	r3, r3, #16
 8006130:	2b00      	cmp	r3, #0
 8006132:	f000 80a9 	beq.w	8006288 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006136:	4b9e      	ldr	r3, [pc, #632]	; (80063b0 <HAL_RCC_OscConfig+0x520>)
 8006138:	691b      	ldr	r3, [r3, #16]
 800613a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800613e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006140:	4b9b      	ldr	r3, [pc, #620]	; (80063b0 <HAL_RCC_OscConfig+0x520>)
 8006142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006144:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006146:	69bb      	ldr	r3, [r7, #24]
 8006148:	2b08      	cmp	r3, #8
 800614a:	d007      	beq.n	800615c <HAL_RCC_OscConfig+0x2cc>
 800614c:	69bb      	ldr	r3, [r7, #24]
 800614e:	2b18      	cmp	r3, #24
 8006150:	d13a      	bne.n	80061c8 <HAL_RCC_OscConfig+0x338>
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	f003 0303 	and.w	r3, r3, #3
 8006158:	2b01      	cmp	r3, #1
 800615a:	d135      	bne.n	80061c8 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800615c:	4b94      	ldr	r3, [pc, #592]	; (80063b0 <HAL_RCC_OscConfig+0x520>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006164:	2b00      	cmp	r3, #0
 8006166:	d005      	beq.n	8006174 <HAL_RCC_OscConfig+0x2e4>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	69db      	ldr	r3, [r3, #28]
 800616c:	2b80      	cmp	r3, #128	; 0x80
 800616e:	d001      	beq.n	8006174 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8006170:	2301      	movs	r3, #1
 8006172:	e296      	b.n	80066a2 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006174:	f7fb fdfc 	bl	8001d70 <HAL_GetREVID>
 8006178:	4602      	mov	r2, r0
 800617a:	f241 0303 	movw	r3, #4099	; 0x1003
 800617e:	429a      	cmp	r2, r3
 8006180:	d817      	bhi.n	80061b2 <HAL_RCC_OscConfig+0x322>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6a1b      	ldr	r3, [r3, #32]
 8006186:	2b20      	cmp	r3, #32
 8006188:	d108      	bne.n	800619c <HAL_RCC_OscConfig+0x30c>
 800618a:	4b89      	ldr	r3, [pc, #548]	; (80063b0 <HAL_RCC_OscConfig+0x520>)
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006192:	4a87      	ldr	r2, [pc, #540]	; (80063b0 <HAL_RCC_OscConfig+0x520>)
 8006194:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006198:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800619a:	e075      	b.n	8006288 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800619c:	4b84      	ldr	r3, [pc, #528]	; (80063b0 <HAL_RCC_OscConfig+0x520>)
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6a1b      	ldr	r3, [r3, #32]
 80061a8:	069b      	lsls	r3, r3, #26
 80061aa:	4981      	ldr	r1, [pc, #516]	; (80063b0 <HAL_RCC_OscConfig+0x520>)
 80061ac:	4313      	orrs	r3, r2
 80061ae:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80061b0:	e06a      	b.n	8006288 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80061b2:	4b7f      	ldr	r3, [pc, #508]	; (80063b0 <HAL_RCC_OscConfig+0x520>)
 80061b4:	68db      	ldr	r3, [r3, #12]
 80061b6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6a1b      	ldr	r3, [r3, #32]
 80061be:	061b      	lsls	r3, r3, #24
 80061c0:	497b      	ldr	r1, [pc, #492]	; (80063b0 <HAL_RCC_OscConfig+0x520>)
 80061c2:	4313      	orrs	r3, r2
 80061c4:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80061c6:	e05f      	b.n	8006288 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	69db      	ldr	r3, [r3, #28]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d042      	beq.n	8006256 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80061d0:	4b77      	ldr	r3, [pc, #476]	; (80063b0 <HAL_RCC_OscConfig+0x520>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a76      	ldr	r2, [pc, #472]	; (80063b0 <HAL_RCC_OscConfig+0x520>)
 80061d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061dc:	f7fb fdbc 	bl	8001d58 <HAL_GetTick>
 80061e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80061e2:	e008      	b.n	80061f6 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80061e4:	f7fb fdb8 	bl	8001d58 <HAL_GetTick>
 80061e8:	4602      	mov	r2, r0
 80061ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ec:	1ad3      	subs	r3, r2, r3
 80061ee:	2b02      	cmp	r3, #2
 80061f0:	d901      	bls.n	80061f6 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80061f2:	2303      	movs	r3, #3
 80061f4:	e255      	b.n	80066a2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80061f6:	4b6e      	ldr	r3, [pc, #440]	; (80063b0 <HAL_RCC_OscConfig+0x520>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d0f0      	beq.n	80061e4 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006202:	f7fb fdb5 	bl	8001d70 <HAL_GetREVID>
 8006206:	4602      	mov	r2, r0
 8006208:	f241 0303 	movw	r3, #4099	; 0x1003
 800620c:	429a      	cmp	r2, r3
 800620e:	d817      	bhi.n	8006240 <HAL_RCC_OscConfig+0x3b0>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6a1b      	ldr	r3, [r3, #32]
 8006214:	2b20      	cmp	r3, #32
 8006216:	d108      	bne.n	800622a <HAL_RCC_OscConfig+0x39a>
 8006218:	4b65      	ldr	r3, [pc, #404]	; (80063b0 <HAL_RCC_OscConfig+0x520>)
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006220:	4a63      	ldr	r2, [pc, #396]	; (80063b0 <HAL_RCC_OscConfig+0x520>)
 8006222:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006226:	6053      	str	r3, [r2, #4]
 8006228:	e02e      	b.n	8006288 <HAL_RCC_OscConfig+0x3f8>
 800622a:	4b61      	ldr	r3, [pc, #388]	; (80063b0 <HAL_RCC_OscConfig+0x520>)
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6a1b      	ldr	r3, [r3, #32]
 8006236:	069b      	lsls	r3, r3, #26
 8006238:	495d      	ldr	r1, [pc, #372]	; (80063b0 <HAL_RCC_OscConfig+0x520>)
 800623a:	4313      	orrs	r3, r2
 800623c:	604b      	str	r3, [r1, #4]
 800623e:	e023      	b.n	8006288 <HAL_RCC_OscConfig+0x3f8>
 8006240:	4b5b      	ldr	r3, [pc, #364]	; (80063b0 <HAL_RCC_OscConfig+0x520>)
 8006242:	68db      	ldr	r3, [r3, #12]
 8006244:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6a1b      	ldr	r3, [r3, #32]
 800624c:	061b      	lsls	r3, r3, #24
 800624e:	4958      	ldr	r1, [pc, #352]	; (80063b0 <HAL_RCC_OscConfig+0x520>)
 8006250:	4313      	orrs	r3, r2
 8006252:	60cb      	str	r3, [r1, #12]
 8006254:	e018      	b.n	8006288 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006256:	4b56      	ldr	r3, [pc, #344]	; (80063b0 <HAL_RCC_OscConfig+0x520>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a55      	ldr	r2, [pc, #340]	; (80063b0 <HAL_RCC_OscConfig+0x520>)
 800625c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006260:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006262:	f7fb fd79 	bl	8001d58 <HAL_GetTick>
 8006266:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006268:	e008      	b.n	800627c <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800626a:	f7fb fd75 	bl	8001d58 <HAL_GetTick>
 800626e:	4602      	mov	r2, r0
 8006270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006272:	1ad3      	subs	r3, r2, r3
 8006274:	2b02      	cmp	r3, #2
 8006276:	d901      	bls.n	800627c <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8006278:	2303      	movs	r3, #3
 800627a:	e212      	b.n	80066a2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800627c:	4b4c      	ldr	r3, [pc, #304]	; (80063b0 <HAL_RCC_OscConfig+0x520>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006284:	2b00      	cmp	r3, #0
 8006286:	d1f0      	bne.n	800626a <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f003 0308 	and.w	r3, r3, #8
 8006290:	2b00      	cmp	r3, #0
 8006292:	d036      	beq.n	8006302 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	695b      	ldr	r3, [r3, #20]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d019      	beq.n	80062d0 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800629c:	4b44      	ldr	r3, [pc, #272]	; (80063b0 <HAL_RCC_OscConfig+0x520>)
 800629e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062a0:	4a43      	ldr	r2, [pc, #268]	; (80063b0 <HAL_RCC_OscConfig+0x520>)
 80062a2:	f043 0301 	orr.w	r3, r3, #1
 80062a6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062a8:	f7fb fd56 	bl	8001d58 <HAL_GetTick>
 80062ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80062ae:	e008      	b.n	80062c2 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80062b0:	f7fb fd52 	bl	8001d58 <HAL_GetTick>
 80062b4:	4602      	mov	r2, r0
 80062b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b8:	1ad3      	subs	r3, r2, r3
 80062ba:	2b02      	cmp	r3, #2
 80062bc:	d901      	bls.n	80062c2 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80062be:	2303      	movs	r3, #3
 80062c0:	e1ef      	b.n	80066a2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80062c2:	4b3b      	ldr	r3, [pc, #236]	; (80063b0 <HAL_RCC_OscConfig+0x520>)
 80062c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062c6:	f003 0302 	and.w	r3, r3, #2
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d0f0      	beq.n	80062b0 <HAL_RCC_OscConfig+0x420>
 80062ce:	e018      	b.n	8006302 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80062d0:	4b37      	ldr	r3, [pc, #220]	; (80063b0 <HAL_RCC_OscConfig+0x520>)
 80062d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062d4:	4a36      	ldr	r2, [pc, #216]	; (80063b0 <HAL_RCC_OscConfig+0x520>)
 80062d6:	f023 0301 	bic.w	r3, r3, #1
 80062da:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062dc:	f7fb fd3c 	bl	8001d58 <HAL_GetTick>
 80062e0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80062e2:	e008      	b.n	80062f6 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80062e4:	f7fb fd38 	bl	8001d58 <HAL_GetTick>
 80062e8:	4602      	mov	r2, r0
 80062ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ec:	1ad3      	subs	r3, r2, r3
 80062ee:	2b02      	cmp	r3, #2
 80062f0:	d901      	bls.n	80062f6 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80062f2:	2303      	movs	r3, #3
 80062f4:	e1d5      	b.n	80066a2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80062f6:	4b2e      	ldr	r3, [pc, #184]	; (80063b0 <HAL_RCC_OscConfig+0x520>)
 80062f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062fa:	f003 0302 	and.w	r3, r3, #2
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d1f0      	bne.n	80062e4 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f003 0320 	and.w	r3, r3, #32
 800630a:	2b00      	cmp	r3, #0
 800630c:	d036      	beq.n	800637c <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	699b      	ldr	r3, [r3, #24]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d019      	beq.n	800634a <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006316:	4b26      	ldr	r3, [pc, #152]	; (80063b0 <HAL_RCC_OscConfig+0x520>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a25      	ldr	r2, [pc, #148]	; (80063b0 <HAL_RCC_OscConfig+0x520>)
 800631c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006320:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006322:	f7fb fd19 	bl	8001d58 <HAL_GetTick>
 8006326:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006328:	e008      	b.n	800633c <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800632a:	f7fb fd15 	bl	8001d58 <HAL_GetTick>
 800632e:	4602      	mov	r2, r0
 8006330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006332:	1ad3      	subs	r3, r2, r3
 8006334:	2b02      	cmp	r3, #2
 8006336:	d901      	bls.n	800633c <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8006338:	2303      	movs	r3, #3
 800633a:	e1b2      	b.n	80066a2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800633c:	4b1c      	ldr	r3, [pc, #112]	; (80063b0 <HAL_RCC_OscConfig+0x520>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006344:	2b00      	cmp	r3, #0
 8006346:	d0f0      	beq.n	800632a <HAL_RCC_OscConfig+0x49a>
 8006348:	e018      	b.n	800637c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800634a:	4b19      	ldr	r3, [pc, #100]	; (80063b0 <HAL_RCC_OscConfig+0x520>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a18      	ldr	r2, [pc, #96]	; (80063b0 <HAL_RCC_OscConfig+0x520>)
 8006350:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006354:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006356:	f7fb fcff 	bl	8001d58 <HAL_GetTick>
 800635a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800635c:	e008      	b.n	8006370 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800635e:	f7fb fcfb 	bl	8001d58 <HAL_GetTick>
 8006362:	4602      	mov	r2, r0
 8006364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006366:	1ad3      	subs	r3, r2, r3
 8006368:	2b02      	cmp	r3, #2
 800636a:	d901      	bls.n	8006370 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 800636c:	2303      	movs	r3, #3
 800636e:	e198      	b.n	80066a2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006370:	4b0f      	ldr	r3, [pc, #60]	; (80063b0 <HAL_RCC_OscConfig+0x520>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006378:	2b00      	cmp	r3, #0
 800637a:	d1f0      	bne.n	800635e <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f003 0304 	and.w	r3, r3, #4
 8006384:	2b00      	cmp	r3, #0
 8006386:	f000 8085 	beq.w	8006494 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800638a:	4b0a      	ldr	r3, [pc, #40]	; (80063b4 <HAL_RCC_OscConfig+0x524>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a09      	ldr	r2, [pc, #36]	; (80063b4 <HAL_RCC_OscConfig+0x524>)
 8006390:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006394:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006396:	f7fb fcdf 	bl	8001d58 <HAL_GetTick>
 800639a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800639c:	e00c      	b.n	80063b8 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800639e:	f7fb fcdb 	bl	8001d58 <HAL_GetTick>
 80063a2:	4602      	mov	r2, r0
 80063a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a6:	1ad3      	subs	r3, r2, r3
 80063a8:	2b64      	cmp	r3, #100	; 0x64
 80063aa:	d905      	bls.n	80063b8 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80063ac:	2303      	movs	r3, #3
 80063ae:	e178      	b.n	80066a2 <HAL_RCC_OscConfig+0x812>
 80063b0:	58024400 	.word	0x58024400
 80063b4:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80063b8:	4b96      	ldr	r3, [pc, #600]	; (8006614 <HAL_RCC_OscConfig+0x784>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d0ec      	beq.n	800639e <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	689b      	ldr	r3, [r3, #8]
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	d106      	bne.n	80063da <HAL_RCC_OscConfig+0x54a>
 80063cc:	4b92      	ldr	r3, [pc, #584]	; (8006618 <HAL_RCC_OscConfig+0x788>)
 80063ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063d0:	4a91      	ldr	r2, [pc, #580]	; (8006618 <HAL_RCC_OscConfig+0x788>)
 80063d2:	f043 0301 	orr.w	r3, r3, #1
 80063d6:	6713      	str	r3, [r2, #112]	; 0x70
 80063d8:	e02d      	b.n	8006436 <HAL_RCC_OscConfig+0x5a6>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	689b      	ldr	r3, [r3, #8]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d10c      	bne.n	80063fc <HAL_RCC_OscConfig+0x56c>
 80063e2:	4b8d      	ldr	r3, [pc, #564]	; (8006618 <HAL_RCC_OscConfig+0x788>)
 80063e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063e6:	4a8c      	ldr	r2, [pc, #560]	; (8006618 <HAL_RCC_OscConfig+0x788>)
 80063e8:	f023 0301 	bic.w	r3, r3, #1
 80063ec:	6713      	str	r3, [r2, #112]	; 0x70
 80063ee:	4b8a      	ldr	r3, [pc, #552]	; (8006618 <HAL_RCC_OscConfig+0x788>)
 80063f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063f2:	4a89      	ldr	r2, [pc, #548]	; (8006618 <HAL_RCC_OscConfig+0x788>)
 80063f4:	f023 0304 	bic.w	r3, r3, #4
 80063f8:	6713      	str	r3, [r2, #112]	; 0x70
 80063fa:	e01c      	b.n	8006436 <HAL_RCC_OscConfig+0x5a6>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	2b05      	cmp	r3, #5
 8006402:	d10c      	bne.n	800641e <HAL_RCC_OscConfig+0x58e>
 8006404:	4b84      	ldr	r3, [pc, #528]	; (8006618 <HAL_RCC_OscConfig+0x788>)
 8006406:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006408:	4a83      	ldr	r2, [pc, #524]	; (8006618 <HAL_RCC_OscConfig+0x788>)
 800640a:	f043 0304 	orr.w	r3, r3, #4
 800640e:	6713      	str	r3, [r2, #112]	; 0x70
 8006410:	4b81      	ldr	r3, [pc, #516]	; (8006618 <HAL_RCC_OscConfig+0x788>)
 8006412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006414:	4a80      	ldr	r2, [pc, #512]	; (8006618 <HAL_RCC_OscConfig+0x788>)
 8006416:	f043 0301 	orr.w	r3, r3, #1
 800641a:	6713      	str	r3, [r2, #112]	; 0x70
 800641c:	e00b      	b.n	8006436 <HAL_RCC_OscConfig+0x5a6>
 800641e:	4b7e      	ldr	r3, [pc, #504]	; (8006618 <HAL_RCC_OscConfig+0x788>)
 8006420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006422:	4a7d      	ldr	r2, [pc, #500]	; (8006618 <HAL_RCC_OscConfig+0x788>)
 8006424:	f023 0301 	bic.w	r3, r3, #1
 8006428:	6713      	str	r3, [r2, #112]	; 0x70
 800642a:	4b7b      	ldr	r3, [pc, #492]	; (8006618 <HAL_RCC_OscConfig+0x788>)
 800642c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800642e:	4a7a      	ldr	r2, [pc, #488]	; (8006618 <HAL_RCC_OscConfig+0x788>)
 8006430:	f023 0304 	bic.w	r3, r3, #4
 8006434:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	689b      	ldr	r3, [r3, #8]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d015      	beq.n	800646a <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800643e:	f7fb fc8b 	bl	8001d58 <HAL_GetTick>
 8006442:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006444:	e00a      	b.n	800645c <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006446:	f7fb fc87 	bl	8001d58 <HAL_GetTick>
 800644a:	4602      	mov	r2, r0
 800644c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800644e:	1ad3      	subs	r3, r2, r3
 8006450:	f241 3288 	movw	r2, #5000	; 0x1388
 8006454:	4293      	cmp	r3, r2
 8006456:	d901      	bls.n	800645c <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8006458:	2303      	movs	r3, #3
 800645a:	e122      	b.n	80066a2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800645c:	4b6e      	ldr	r3, [pc, #440]	; (8006618 <HAL_RCC_OscConfig+0x788>)
 800645e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006460:	f003 0302 	and.w	r3, r3, #2
 8006464:	2b00      	cmp	r3, #0
 8006466:	d0ee      	beq.n	8006446 <HAL_RCC_OscConfig+0x5b6>
 8006468:	e014      	b.n	8006494 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800646a:	f7fb fc75 	bl	8001d58 <HAL_GetTick>
 800646e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006470:	e00a      	b.n	8006488 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006472:	f7fb fc71 	bl	8001d58 <HAL_GetTick>
 8006476:	4602      	mov	r2, r0
 8006478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647a:	1ad3      	subs	r3, r2, r3
 800647c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006480:	4293      	cmp	r3, r2
 8006482:	d901      	bls.n	8006488 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8006484:	2303      	movs	r3, #3
 8006486:	e10c      	b.n	80066a2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006488:	4b63      	ldr	r3, [pc, #396]	; (8006618 <HAL_RCC_OscConfig+0x788>)
 800648a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800648c:	f003 0302 	and.w	r3, r3, #2
 8006490:	2b00      	cmp	r3, #0
 8006492:	d1ee      	bne.n	8006472 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006498:	2b00      	cmp	r3, #0
 800649a:	f000 8101 	beq.w	80066a0 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800649e:	4b5e      	ldr	r3, [pc, #376]	; (8006618 <HAL_RCC_OscConfig+0x788>)
 80064a0:	691b      	ldr	r3, [r3, #16]
 80064a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80064a6:	2b18      	cmp	r3, #24
 80064a8:	f000 80bc 	beq.w	8006624 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b0:	2b02      	cmp	r3, #2
 80064b2:	f040 8095 	bne.w	80065e0 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064b6:	4b58      	ldr	r3, [pc, #352]	; (8006618 <HAL_RCC_OscConfig+0x788>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a57      	ldr	r2, [pc, #348]	; (8006618 <HAL_RCC_OscConfig+0x788>)
 80064bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80064c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064c2:	f7fb fc49 	bl	8001d58 <HAL_GetTick>
 80064c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80064c8:	e008      	b.n	80064dc <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80064ca:	f7fb fc45 	bl	8001d58 <HAL_GetTick>
 80064ce:	4602      	mov	r2, r0
 80064d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d2:	1ad3      	subs	r3, r2, r3
 80064d4:	2b02      	cmp	r3, #2
 80064d6:	d901      	bls.n	80064dc <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80064d8:	2303      	movs	r3, #3
 80064da:	e0e2      	b.n	80066a2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80064dc:	4b4e      	ldr	r3, [pc, #312]	; (8006618 <HAL_RCC_OscConfig+0x788>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d1f0      	bne.n	80064ca <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80064e8:	4b4b      	ldr	r3, [pc, #300]	; (8006618 <HAL_RCC_OscConfig+0x788>)
 80064ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80064ec:	4b4b      	ldr	r3, [pc, #300]	; (800661c <HAL_RCC_OscConfig+0x78c>)
 80064ee:	4013      	ands	r3, r2
 80064f0:	687a      	ldr	r2, [r7, #4]
 80064f2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80064f4:	687a      	ldr	r2, [r7, #4]
 80064f6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80064f8:	0112      	lsls	r2, r2, #4
 80064fa:	430a      	orrs	r2, r1
 80064fc:	4946      	ldr	r1, [pc, #280]	; (8006618 <HAL_RCC_OscConfig+0x788>)
 80064fe:	4313      	orrs	r3, r2
 8006500:	628b      	str	r3, [r1, #40]	; 0x28
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006506:	3b01      	subs	r3, #1
 8006508:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006510:	3b01      	subs	r3, #1
 8006512:	025b      	lsls	r3, r3, #9
 8006514:	b29b      	uxth	r3, r3
 8006516:	431a      	orrs	r2, r3
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800651c:	3b01      	subs	r3, #1
 800651e:	041b      	lsls	r3, r3, #16
 8006520:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006524:	431a      	orrs	r2, r3
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800652a:	3b01      	subs	r3, #1
 800652c:	061b      	lsls	r3, r3, #24
 800652e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006532:	4939      	ldr	r1, [pc, #228]	; (8006618 <HAL_RCC_OscConfig+0x788>)
 8006534:	4313      	orrs	r3, r2
 8006536:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006538:	4b37      	ldr	r3, [pc, #220]	; (8006618 <HAL_RCC_OscConfig+0x788>)
 800653a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800653c:	4a36      	ldr	r2, [pc, #216]	; (8006618 <HAL_RCC_OscConfig+0x788>)
 800653e:	f023 0301 	bic.w	r3, r3, #1
 8006542:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006544:	4b34      	ldr	r3, [pc, #208]	; (8006618 <HAL_RCC_OscConfig+0x788>)
 8006546:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006548:	4b35      	ldr	r3, [pc, #212]	; (8006620 <HAL_RCC_OscConfig+0x790>)
 800654a:	4013      	ands	r3, r2
 800654c:	687a      	ldr	r2, [r7, #4]
 800654e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006550:	00d2      	lsls	r2, r2, #3
 8006552:	4931      	ldr	r1, [pc, #196]	; (8006618 <HAL_RCC_OscConfig+0x788>)
 8006554:	4313      	orrs	r3, r2
 8006556:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006558:	4b2f      	ldr	r3, [pc, #188]	; (8006618 <HAL_RCC_OscConfig+0x788>)
 800655a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800655c:	f023 020c 	bic.w	r2, r3, #12
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006564:	492c      	ldr	r1, [pc, #176]	; (8006618 <HAL_RCC_OscConfig+0x788>)
 8006566:	4313      	orrs	r3, r2
 8006568:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800656a:	4b2b      	ldr	r3, [pc, #172]	; (8006618 <HAL_RCC_OscConfig+0x788>)
 800656c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800656e:	f023 0202 	bic.w	r2, r3, #2
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006576:	4928      	ldr	r1, [pc, #160]	; (8006618 <HAL_RCC_OscConfig+0x788>)
 8006578:	4313      	orrs	r3, r2
 800657a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800657c:	4b26      	ldr	r3, [pc, #152]	; (8006618 <HAL_RCC_OscConfig+0x788>)
 800657e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006580:	4a25      	ldr	r2, [pc, #148]	; (8006618 <HAL_RCC_OscConfig+0x788>)
 8006582:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006586:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006588:	4b23      	ldr	r3, [pc, #140]	; (8006618 <HAL_RCC_OscConfig+0x788>)
 800658a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800658c:	4a22      	ldr	r2, [pc, #136]	; (8006618 <HAL_RCC_OscConfig+0x788>)
 800658e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006592:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006594:	4b20      	ldr	r3, [pc, #128]	; (8006618 <HAL_RCC_OscConfig+0x788>)
 8006596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006598:	4a1f      	ldr	r2, [pc, #124]	; (8006618 <HAL_RCC_OscConfig+0x788>)
 800659a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800659e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80065a0:	4b1d      	ldr	r3, [pc, #116]	; (8006618 <HAL_RCC_OscConfig+0x788>)
 80065a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065a4:	4a1c      	ldr	r2, [pc, #112]	; (8006618 <HAL_RCC_OscConfig+0x788>)
 80065a6:	f043 0301 	orr.w	r3, r3, #1
 80065aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80065ac:	4b1a      	ldr	r3, [pc, #104]	; (8006618 <HAL_RCC_OscConfig+0x788>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a19      	ldr	r2, [pc, #100]	; (8006618 <HAL_RCC_OscConfig+0x788>)
 80065b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80065b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065b8:	f7fb fbce 	bl	8001d58 <HAL_GetTick>
 80065bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80065be:	e008      	b.n	80065d2 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80065c0:	f7fb fbca 	bl	8001d58 <HAL_GetTick>
 80065c4:	4602      	mov	r2, r0
 80065c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c8:	1ad3      	subs	r3, r2, r3
 80065ca:	2b02      	cmp	r3, #2
 80065cc:	d901      	bls.n	80065d2 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 80065ce:	2303      	movs	r3, #3
 80065d0:	e067      	b.n	80066a2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80065d2:	4b11      	ldr	r3, [pc, #68]	; (8006618 <HAL_RCC_OscConfig+0x788>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d0f0      	beq.n	80065c0 <HAL_RCC_OscConfig+0x730>
 80065de:	e05f      	b.n	80066a0 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065e0:	4b0d      	ldr	r3, [pc, #52]	; (8006618 <HAL_RCC_OscConfig+0x788>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a0c      	ldr	r2, [pc, #48]	; (8006618 <HAL_RCC_OscConfig+0x788>)
 80065e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80065ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065ec:	f7fb fbb4 	bl	8001d58 <HAL_GetTick>
 80065f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80065f2:	e008      	b.n	8006606 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80065f4:	f7fb fbb0 	bl	8001d58 <HAL_GetTick>
 80065f8:	4602      	mov	r2, r0
 80065fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065fc:	1ad3      	subs	r3, r2, r3
 80065fe:	2b02      	cmp	r3, #2
 8006600:	d901      	bls.n	8006606 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8006602:	2303      	movs	r3, #3
 8006604:	e04d      	b.n	80066a2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006606:	4b04      	ldr	r3, [pc, #16]	; (8006618 <HAL_RCC_OscConfig+0x788>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800660e:	2b00      	cmp	r3, #0
 8006610:	d1f0      	bne.n	80065f4 <HAL_RCC_OscConfig+0x764>
 8006612:	e045      	b.n	80066a0 <HAL_RCC_OscConfig+0x810>
 8006614:	58024800 	.word	0x58024800
 8006618:	58024400 	.word	0x58024400
 800661c:	fffffc0c 	.word	0xfffffc0c
 8006620:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006624:	4b21      	ldr	r3, [pc, #132]	; (80066ac <HAL_RCC_OscConfig+0x81c>)
 8006626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006628:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800662a:	4b20      	ldr	r3, [pc, #128]	; (80066ac <HAL_RCC_OscConfig+0x81c>)
 800662c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800662e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006634:	2b01      	cmp	r3, #1
 8006636:	d031      	beq.n	800669c <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	f003 0203 	and.w	r2, r3, #3
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006642:	429a      	cmp	r2, r3
 8006644:	d12a      	bne.n	800669c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	091b      	lsrs	r3, r3, #4
 800664a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006652:	429a      	cmp	r2, r3
 8006654:	d122      	bne.n	800669c <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006660:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006662:	429a      	cmp	r2, r3
 8006664:	d11a      	bne.n	800669c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	0a5b      	lsrs	r3, r3, #9
 800666a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006672:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006674:	429a      	cmp	r2, r3
 8006676:	d111      	bne.n	800669c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	0c1b      	lsrs	r3, r3, #16
 800667c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006684:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006686:	429a      	cmp	r2, r3
 8006688:	d108      	bne.n	800669c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	0e1b      	lsrs	r3, r3, #24
 800668e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006696:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006698:	429a      	cmp	r2, r3
 800669a:	d001      	beq.n	80066a0 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 800669c:	2301      	movs	r3, #1
 800669e:	e000      	b.n	80066a2 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 80066a0:	2300      	movs	r3, #0
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3730      	adds	r7, #48	; 0x30
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}
 80066aa:	bf00      	nop
 80066ac:	58024400 	.word	0x58024400

080066b0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b086      	sub	sp, #24
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
 80066b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d101      	bne.n	80066c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80066c0:	2301      	movs	r3, #1
 80066c2:	e19c      	b.n	80069fe <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80066c4:	4b8a      	ldr	r3, [pc, #552]	; (80068f0 <HAL_RCC_ClockConfig+0x240>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f003 030f 	and.w	r3, r3, #15
 80066cc:	683a      	ldr	r2, [r7, #0]
 80066ce:	429a      	cmp	r2, r3
 80066d0:	d910      	bls.n	80066f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066d2:	4b87      	ldr	r3, [pc, #540]	; (80068f0 <HAL_RCC_ClockConfig+0x240>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f023 020f 	bic.w	r2, r3, #15
 80066da:	4985      	ldr	r1, [pc, #532]	; (80068f0 <HAL_RCC_ClockConfig+0x240>)
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	4313      	orrs	r3, r2
 80066e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80066e2:	4b83      	ldr	r3, [pc, #524]	; (80068f0 <HAL_RCC_ClockConfig+0x240>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f003 030f 	and.w	r3, r3, #15
 80066ea:	683a      	ldr	r2, [r7, #0]
 80066ec:	429a      	cmp	r2, r3
 80066ee:	d001      	beq.n	80066f4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80066f0:	2301      	movs	r3, #1
 80066f2:	e184      	b.n	80069fe <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f003 0304 	and.w	r3, r3, #4
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d010      	beq.n	8006722 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	691a      	ldr	r2, [r3, #16]
 8006704:	4b7b      	ldr	r3, [pc, #492]	; (80068f4 <HAL_RCC_ClockConfig+0x244>)
 8006706:	699b      	ldr	r3, [r3, #24]
 8006708:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800670c:	429a      	cmp	r2, r3
 800670e:	d908      	bls.n	8006722 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006710:	4b78      	ldr	r3, [pc, #480]	; (80068f4 <HAL_RCC_ClockConfig+0x244>)
 8006712:	699b      	ldr	r3, [r3, #24]
 8006714:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	691b      	ldr	r3, [r3, #16]
 800671c:	4975      	ldr	r1, [pc, #468]	; (80068f4 <HAL_RCC_ClockConfig+0x244>)
 800671e:	4313      	orrs	r3, r2
 8006720:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f003 0308 	and.w	r3, r3, #8
 800672a:	2b00      	cmp	r3, #0
 800672c:	d010      	beq.n	8006750 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	695a      	ldr	r2, [r3, #20]
 8006732:	4b70      	ldr	r3, [pc, #448]	; (80068f4 <HAL_RCC_ClockConfig+0x244>)
 8006734:	69db      	ldr	r3, [r3, #28]
 8006736:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800673a:	429a      	cmp	r2, r3
 800673c:	d908      	bls.n	8006750 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800673e:	4b6d      	ldr	r3, [pc, #436]	; (80068f4 <HAL_RCC_ClockConfig+0x244>)
 8006740:	69db      	ldr	r3, [r3, #28]
 8006742:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	695b      	ldr	r3, [r3, #20]
 800674a:	496a      	ldr	r1, [pc, #424]	; (80068f4 <HAL_RCC_ClockConfig+0x244>)
 800674c:	4313      	orrs	r3, r2
 800674e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f003 0310 	and.w	r3, r3, #16
 8006758:	2b00      	cmp	r3, #0
 800675a:	d010      	beq.n	800677e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	699a      	ldr	r2, [r3, #24]
 8006760:	4b64      	ldr	r3, [pc, #400]	; (80068f4 <HAL_RCC_ClockConfig+0x244>)
 8006762:	69db      	ldr	r3, [r3, #28]
 8006764:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006768:	429a      	cmp	r2, r3
 800676a:	d908      	bls.n	800677e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800676c:	4b61      	ldr	r3, [pc, #388]	; (80068f4 <HAL_RCC_ClockConfig+0x244>)
 800676e:	69db      	ldr	r3, [r3, #28]
 8006770:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	699b      	ldr	r3, [r3, #24]
 8006778:	495e      	ldr	r1, [pc, #376]	; (80068f4 <HAL_RCC_ClockConfig+0x244>)
 800677a:	4313      	orrs	r3, r2
 800677c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f003 0320 	and.w	r3, r3, #32
 8006786:	2b00      	cmp	r3, #0
 8006788:	d010      	beq.n	80067ac <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	69da      	ldr	r2, [r3, #28]
 800678e:	4b59      	ldr	r3, [pc, #356]	; (80068f4 <HAL_RCC_ClockConfig+0x244>)
 8006790:	6a1b      	ldr	r3, [r3, #32]
 8006792:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006796:	429a      	cmp	r2, r3
 8006798:	d908      	bls.n	80067ac <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800679a:	4b56      	ldr	r3, [pc, #344]	; (80068f4 <HAL_RCC_ClockConfig+0x244>)
 800679c:	6a1b      	ldr	r3, [r3, #32]
 800679e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	69db      	ldr	r3, [r3, #28]
 80067a6:	4953      	ldr	r1, [pc, #332]	; (80068f4 <HAL_RCC_ClockConfig+0x244>)
 80067a8:	4313      	orrs	r3, r2
 80067aa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f003 0302 	and.w	r3, r3, #2
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d010      	beq.n	80067da <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	68da      	ldr	r2, [r3, #12]
 80067bc:	4b4d      	ldr	r3, [pc, #308]	; (80068f4 <HAL_RCC_ClockConfig+0x244>)
 80067be:	699b      	ldr	r3, [r3, #24]
 80067c0:	f003 030f 	and.w	r3, r3, #15
 80067c4:	429a      	cmp	r2, r3
 80067c6:	d908      	bls.n	80067da <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80067c8:	4b4a      	ldr	r3, [pc, #296]	; (80068f4 <HAL_RCC_ClockConfig+0x244>)
 80067ca:	699b      	ldr	r3, [r3, #24]
 80067cc:	f023 020f 	bic.w	r2, r3, #15
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	68db      	ldr	r3, [r3, #12]
 80067d4:	4947      	ldr	r1, [pc, #284]	; (80068f4 <HAL_RCC_ClockConfig+0x244>)
 80067d6:	4313      	orrs	r3, r2
 80067d8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f003 0301 	and.w	r3, r3, #1
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d055      	beq.n	8006892 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80067e6:	4b43      	ldr	r3, [pc, #268]	; (80068f4 <HAL_RCC_ClockConfig+0x244>)
 80067e8:	699b      	ldr	r3, [r3, #24]
 80067ea:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	689b      	ldr	r3, [r3, #8]
 80067f2:	4940      	ldr	r1, [pc, #256]	; (80068f4 <HAL_RCC_ClockConfig+0x244>)
 80067f4:	4313      	orrs	r3, r2
 80067f6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	2b02      	cmp	r3, #2
 80067fe:	d107      	bne.n	8006810 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006800:	4b3c      	ldr	r3, [pc, #240]	; (80068f4 <HAL_RCC_ClockConfig+0x244>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006808:	2b00      	cmp	r3, #0
 800680a:	d121      	bne.n	8006850 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800680c:	2301      	movs	r3, #1
 800680e:	e0f6      	b.n	80069fe <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	2b03      	cmp	r3, #3
 8006816:	d107      	bne.n	8006828 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006818:	4b36      	ldr	r3, [pc, #216]	; (80068f4 <HAL_RCC_ClockConfig+0x244>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006820:	2b00      	cmp	r3, #0
 8006822:	d115      	bne.n	8006850 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006824:	2301      	movs	r3, #1
 8006826:	e0ea      	b.n	80069fe <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	685b      	ldr	r3, [r3, #4]
 800682c:	2b01      	cmp	r3, #1
 800682e:	d107      	bne.n	8006840 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006830:	4b30      	ldr	r3, [pc, #192]	; (80068f4 <HAL_RCC_ClockConfig+0x244>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006838:	2b00      	cmp	r3, #0
 800683a:	d109      	bne.n	8006850 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800683c:	2301      	movs	r3, #1
 800683e:	e0de      	b.n	80069fe <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006840:	4b2c      	ldr	r3, [pc, #176]	; (80068f4 <HAL_RCC_ClockConfig+0x244>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f003 0304 	and.w	r3, r3, #4
 8006848:	2b00      	cmp	r3, #0
 800684a:	d101      	bne.n	8006850 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800684c:	2301      	movs	r3, #1
 800684e:	e0d6      	b.n	80069fe <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006850:	4b28      	ldr	r3, [pc, #160]	; (80068f4 <HAL_RCC_ClockConfig+0x244>)
 8006852:	691b      	ldr	r3, [r3, #16]
 8006854:	f023 0207 	bic.w	r2, r3, #7
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	4925      	ldr	r1, [pc, #148]	; (80068f4 <HAL_RCC_ClockConfig+0x244>)
 800685e:	4313      	orrs	r3, r2
 8006860:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006862:	f7fb fa79 	bl	8001d58 <HAL_GetTick>
 8006866:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006868:	e00a      	b.n	8006880 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800686a:	f7fb fa75 	bl	8001d58 <HAL_GetTick>
 800686e:	4602      	mov	r2, r0
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	1ad3      	subs	r3, r2, r3
 8006874:	f241 3288 	movw	r2, #5000	; 0x1388
 8006878:	4293      	cmp	r3, r2
 800687a:	d901      	bls.n	8006880 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800687c:	2303      	movs	r3, #3
 800687e:	e0be      	b.n	80069fe <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006880:	4b1c      	ldr	r3, [pc, #112]	; (80068f4 <HAL_RCC_ClockConfig+0x244>)
 8006882:	691b      	ldr	r3, [r3, #16]
 8006884:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	00db      	lsls	r3, r3, #3
 800688e:	429a      	cmp	r2, r3
 8006890:	d1eb      	bne.n	800686a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f003 0302 	and.w	r3, r3, #2
 800689a:	2b00      	cmp	r3, #0
 800689c:	d010      	beq.n	80068c0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	68da      	ldr	r2, [r3, #12]
 80068a2:	4b14      	ldr	r3, [pc, #80]	; (80068f4 <HAL_RCC_ClockConfig+0x244>)
 80068a4:	699b      	ldr	r3, [r3, #24]
 80068a6:	f003 030f 	and.w	r3, r3, #15
 80068aa:	429a      	cmp	r2, r3
 80068ac:	d208      	bcs.n	80068c0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80068ae:	4b11      	ldr	r3, [pc, #68]	; (80068f4 <HAL_RCC_ClockConfig+0x244>)
 80068b0:	699b      	ldr	r3, [r3, #24]
 80068b2:	f023 020f 	bic.w	r2, r3, #15
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	68db      	ldr	r3, [r3, #12]
 80068ba:	490e      	ldr	r1, [pc, #56]	; (80068f4 <HAL_RCC_ClockConfig+0x244>)
 80068bc:	4313      	orrs	r3, r2
 80068be:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80068c0:	4b0b      	ldr	r3, [pc, #44]	; (80068f0 <HAL_RCC_ClockConfig+0x240>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f003 030f 	and.w	r3, r3, #15
 80068c8:	683a      	ldr	r2, [r7, #0]
 80068ca:	429a      	cmp	r2, r3
 80068cc:	d214      	bcs.n	80068f8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068ce:	4b08      	ldr	r3, [pc, #32]	; (80068f0 <HAL_RCC_ClockConfig+0x240>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f023 020f 	bic.w	r2, r3, #15
 80068d6:	4906      	ldr	r1, [pc, #24]	; (80068f0 <HAL_RCC_ClockConfig+0x240>)
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	4313      	orrs	r3, r2
 80068dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80068de:	4b04      	ldr	r3, [pc, #16]	; (80068f0 <HAL_RCC_ClockConfig+0x240>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f003 030f 	and.w	r3, r3, #15
 80068e6:	683a      	ldr	r2, [r7, #0]
 80068e8:	429a      	cmp	r2, r3
 80068ea:	d005      	beq.n	80068f8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80068ec:	2301      	movs	r3, #1
 80068ee:	e086      	b.n	80069fe <HAL_RCC_ClockConfig+0x34e>
 80068f0:	52002000 	.word	0x52002000
 80068f4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f003 0304 	and.w	r3, r3, #4
 8006900:	2b00      	cmp	r3, #0
 8006902:	d010      	beq.n	8006926 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	691a      	ldr	r2, [r3, #16]
 8006908:	4b3f      	ldr	r3, [pc, #252]	; (8006a08 <HAL_RCC_ClockConfig+0x358>)
 800690a:	699b      	ldr	r3, [r3, #24]
 800690c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006910:	429a      	cmp	r2, r3
 8006912:	d208      	bcs.n	8006926 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006914:	4b3c      	ldr	r3, [pc, #240]	; (8006a08 <HAL_RCC_ClockConfig+0x358>)
 8006916:	699b      	ldr	r3, [r3, #24]
 8006918:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	691b      	ldr	r3, [r3, #16]
 8006920:	4939      	ldr	r1, [pc, #228]	; (8006a08 <HAL_RCC_ClockConfig+0x358>)
 8006922:	4313      	orrs	r3, r2
 8006924:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f003 0308 	and.w	r3, r3, #8
 800692e:	2b00      	cmp	r3, #0
 8006930:	d010      	beq.n	8006954 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	695a      	ldr	r2, [r3, #20]
 8006936:	4b34      	ldr	r3, [pc, #208]	; (8006a08 <HAL_RCC_ClockConfig+0x358>)
 8006938:	69db      	ldr	r3, [r3, #28]
 800693a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800693e:	429a      	cmp	r2, r3
 8006940:	d208      	bcs.n	8006954 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006942:	4b31      	ldr	r3, [pc, #196]	; (8006a08 <HAL_RCC_ClockConfig+0x358>)
 8006944:	69db      	ldr	r3, [r3, #28]
 8006946:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	695b      	ldr	r3, [r3, #20]
 800694e:	492e      	ldr	r1, [pc, #184]	; (8006a08 <HAL_RCC_ClockConfig+0x358>)
 8006950:	4313      	orrs	r3, r2
 8006952:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f003 0310 	and.w	r3, r3, #16
 800695c:	2b00      	cmp	r3, #0
 800695e:	d010      	beq.n	8006982 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	699a      	ldr	r2, [r3, #24]
 8006964:	4b28      	ldr	r3, [pc, #160]	; (8006a08 <HAL_RCC_ClockConfig+0x358>)
 8006966:	69db      	ldr	r3, [r3, #28]
 8006968:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800696c:	429a      	cmp	r2, r3
 800696e:	d208      	bcs.n	8006982 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006970:	4b25      	ldr	r3, [pc, #148]	; (8006a08 <HAL_RCC_ClockConfig+0x358>)
 8006972:	69db      	ldr	r3, [r3, #28]
 8006974:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	699b      	ldr	r3, [r3, #24]
 800697c:	4922      	ldr	r1, [pc, #136]	; (8006a08 <HAL_RCC_ClockConfig+0x358>)
 800697e:	4313      	orrs	r3, r2
 8006980:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f003 0320 	and.w	r3, r3, #32
 800698a:	2b00      	cmp	r3, #0
 800698c:	d010      	beq.n	80069b0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	69da      	ldr	r2, [r3, #28]
 8006992:	4b1d      	ldr	r3, [pc, #116]	; (8006a08 <HAL_RCC_ClockConfig+0x358>)
 8006994:	6a1b      	ldr	r3, [r3, #32]
 8006996:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800699a:	429a      	cmp	r2, r3
 800699c:	d208      	bcs.n	80069b0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800699e:	4b1a      	ldr	r3, [pc, #104]	; (8006a08 <HAL_RCC_ClockConfig+0x358>)
 80069a0:	6a1b      	ldr	r3, [r3, #32]
 80069a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	69db      	ldr	r3, [r3, #28]
 80069aa:	4917      	ldr	r1, [pc, #92]	; (8006a08 <HAL_RCC_ClockConfig+0x358>)
 80069ac:	4313      	orrs	r3, r2
 80069ae:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80069b0:	f000 f834 	bl	8006a1c <HAL_RCC_GetSysClockFreq>
 80069b4:	4601      	mov	r1, r0
 80069b6:	4b14      	ldr	r3, [pc, #80]	; (8006a08 <HAL_RCC_ClockConfig+0x358>)
 80069b8:	699b      	ldr	r3, [r3, #24]
 80069ba:	0a1b      	lsrs	r3, r3, #8
 80069bc:	f003 030f 	and.w	r3, r3, #15
 80069c0:	4a12      	ldr	r2, [pc, #72]	; (8006a0c <HAL_RCC_ClockConfig+0x35c>)
 80069c2:	5cd3      	ldrb	r3, [r2, r3]
 80069c4:	f003 031f 	and.w	r3, r3, #31
 80069c8:	fa21 f303 	lsr.w	r3, r1, r3
 80069cc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80069ce:	4b0e      	ldr	r3, [pc, #56]	; (8006a08 <HAL_RCC_ClockConfig+0x358>)
 80069d0:	699b      	ldr	r3, [r3, #24]
 80069d2:	f003 030f 	and.w	r3, r3, #15
 80069d6:	4a0d      	ldr	r2, [pc, #52]	; (8006a0c <HAL_RCC_ClockConfig+0x35c>)
 80069d8:	5cd3      	ldrb	r3, [r2, r3]
 80069da:	f003 031f 	and.w	r3, r3, #31
 80069de:	693a      	ldr	r2, [r7, #16]
 80069e0:	fa22 f303 	lsr.w	r3, r2, r3
 80069e4:	4a0a      	ldr	r2, [pc, #40]	; (8006a10 <HAL_RCC_ClockConfig+0x360>)
 80069e6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80069e8:	4a0a      	ldr	r2, [pc, #40]	; (8006a14 <HAL_RCC_ClockConfig+0x364>)
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80069ee:	4b0a      	ldr	r3, [pc, #40]	; (8006a18 <HAL_RCC_ClockConfig+0x368>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4618      	mov	r0, r3
 80069f4:	f7fa faa4 	bl	8000f40 <HAL_InitTick>
 80069f8:	4603      	mov	r3, r0
 80069fa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80069fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	3718      	adds	r7, #24
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}
 8006a06:	bf00      	nop
 8006a08:	58024400 	.word	0x58024400
 8006a0c:	080200cc 	.word	0x080200cc
 8006a10:	24000004 	.word	0x24000004
 8006a14:	24000000 	.word	0x24000000
 8006a18:	24000008 	.word	0x24000008

08006a1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b089      	sub	sp, #36	; 0x24
 8006a20:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006a22:	4baf      	ldr	r3, [pc, #700]	; (8006ce0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006a24:	691b      	ldr	r3, [r3, #16]
 8006a26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a2a:	2b18      	cmp	r3, #24
 8006a2c:	f200 814e 	bhi.w	8006ccc <HAL_RCC_GetSysClockFreq+0x2b0>
 8006a30:	a201      	add	r2, pc, #4	; (adr r2, 8006a38 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a36:	bf00      	nop
 8006a38:	08006a9d 	.word	0x08006a9d
 8006a3c:	08006ccd 	.word	0x08006ccd
 8006a40:	08006ccd 	.word	0x08006ccd
 8006a44:	08006ccd 	.word	0x08006ccd
 8006a48:	08006ccd 	.word	0x08006ccd
 8006a4c:	08006ccd 	.word	0x08006ccd
 8006a50:	08006ccd 	.word	0x08006ccd
 8006a54:	08006ccd 	.word	0x08006ccd
 8006a58:	08006ac3 	.word	0x08006ac3
 8006a5c:	08006ccd 	.word	0x08006ccd
 8006a60:	08006ccd 	.word	0x08006ccd
 8006a64:	08006ccd 	.word	0x08006ccd
 8006a68:	08006ccd 	.word	0x08006ccd
 8006a6c:	08006ccd 	.word	0x08006ccd
 8006a70:	08006ccd 	.word	0x08006ccd
 8006a74:	08006ccd 	.word	0x08006ccd
 8006a78:	08006ac9 	.word	0x08006ac9
 8006a7c:	08006ccd 	.word	0x08006ccd
 8006a80:	08006ccd 	.word	0x08006ccd
 8006a84:	08006ccd 	.word	0x08006ccd
 8006a88:	08006ccd 	.word	0x08006ccd
 8006a8c:	08006ccd 	.word	0x08006ccd
 8006a90:	08006ccd 	.word	0x08006ccd
 8006a94:	08006ccd 	.word	0x08006ccd
 8006a98:	08006acf 	.word	0x08006acf
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a9c:	4b90      	ldr	r3, [pc, #576]	; (8006ce0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f003 0320 	and.w	r3, r3, #32
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d009      	beq.n	8006abc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006aa8:	4b8d      	ldr	r3, [pc, #564]	; (8006ce0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	08db      	lsrs	r3, r3, #3
 8006aae:	f003 0303 	and.w	r3, r3, #3
 8006ab2:	4a8c      	ldr	r2, [pc, #560]	; (8006ce4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006ab4:	fa22 f303 	lsr.w	r3, r2, r3
 8006ab8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8006aba:	e10a      	b.n	8006cd2 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006abc:	4b89      	ldr	r3, [pc, #548]	; (8006ce4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006abe:	61bb      	str	r3, [r7, #24]
    break;
 8006ac0:	e107      	b.n	8006cd2 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006ac2:	4b89      	ldr	r3, [pc, #548]	; (8006ce8 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8006ac4:	61bb      	str	r3, [r7, #24]
    break;
 8006ac6:	e104      	b.n	8006cd2 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006ac8:	4b88      	ldr	r3, [pc, #544]	; (8006cec <HAL_RCC_GetSysClockFreq+0x2d0>)
 8006aca:	61bb      	str	r3, [r7, #24]
    break;
 8006acc:	e101      	b.n	8006cd2 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006ace:	4b84      	ldr	r3, [pc, #528]	; (8006ce0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ad2:	f003 0303 	and.w	r3, r3, #3
 8006ad6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006ad8:	4b81      	ldr	r3, [pc, #516]	; (8006ce0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006adc:	091b      	lsrs	r3, r3, #4
 8006ade:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006ae2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006ae4:	4b7e      	ldr	r3, [pc, #504]	; (8006ce0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ae8:	f003 0301 	and.w	r3, r3, #1
 8006aec:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006aee:	4b7c      	ldr	r3, [pc, #496]	; (8006ce0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006af0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006af2:	08db      	lsrs	r3, r3, #3
 8006af4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006af8:	68fa      	ldr	r2, [r7, #12]
 8006afa:	fb02 f303 	mul.w	r3, r2, r3
 8006afe:	ee07 3a90 	vmov	s15, r3
 8006b02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b06:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006b0a:	693b      	ldr	r3, [r7, #16]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	f000 80da 	beq.w	8006cc6 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	2b01      	cmp	r3, #1
 8006b16:	d05a      	beq.n	8006bce <HAL_RCC_GetSysClockFreq+0x1b2>
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	d302      	bcc.n	8006b22 <HAL_RCC_GetSysClockFreq+0x106>
 8006b1c:	2b02      	cmp	r3, #2
 8006b1e:	d078      	beq.n	8006c12 <HAL_RCC_GetSysClockFreq+0x1f6>
 8006b20:	e099      	b.n	8006c56 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b22:	4b6f      	ldr	r3, [pc, #444]	; (8006ce0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f003 0320 	and.w	r3, r3, #32
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d02d      	beq.n	8006b8a <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006b2e:	4b6c      	ldr	r3, [pc, #432]	; (8006ce0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	08db      	lsrs	r3, r3, #3
 8006b34:	f003 0303 	and.w	r3, r3, #3
 8006b38:	4a6a      	ldr	r2, [pc, #424]	; (8006ce4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006b3a:	fa22 f303 	lsr.w	r3, r2, r3
 8006b3e:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	ee07 3a90 	vmov	s15, r3
 8006b46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	ee07 3a90 	vmov	s15, r3
 8006b50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b58:	4b61      	ldr	r3, [pc, #388]	; (8006ce0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b60:	ee07 3a90 	vmov	s15, r3
 8006b64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b68:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b6c:	eddf 5a60 	vldr	s11, [pc, #384]	; 8006cf0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006b70:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b74:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b78:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b84:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006b88:	e087      	b.n	8006c9a <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	ee07 3a90 	vmov	s15, r3
 8006b90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b94:	eddf 6a57 	vldr	s13, [pc, #348]	; 8006cf4 <HAL_RCC_GetSysClockFreq+0x2d8>
 8006b98:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b9c:	4b50      	ldr	r3, [pc, #320]	; (8006ce0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ba0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ba4:	ee07 3a90 	vmov	s15, r3
 8006ba8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bac:	ed97 6a02 	vldr	s12, [r7, #8]
 8006bb0:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8006cf0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006bb4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bb8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bbc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006bc0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bc8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006bcc:	e065      	b.n	8006c9a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	ee07 3a90 	vmov	s15, r3
 8006bd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bd8:	eddf 6a47 	vldr	s13, [pc, #284]	; 8006cf8 <HAL_RCC_GetSysClockFreq+0x2dc>
 8006bdc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006be0:	4b3f      	ldr	r3, [pc, #252]	; (8006ce0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006be4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006be8:	ee07 3a90 	vmov	s15, r3
 8006bec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bf0:	ed97 6a02 	vldr	s12, [r7, #8]
 8006bf4:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8006cf0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006bf8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bfc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c00:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c04:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c0c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c10:	e043      	b.n	8006c9a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	ee07 3a90 	vmov	s15, r3
 8006c18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c1c:	eddf 6a37 	vldr	s13, [pc, #220]	; 8006cfc <HAL_RCC_GetSysClockFreq+0x2e0>
 8006c20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c24:	4b2e      	ldr	r3, [pc, #184]	; (8006ce0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c2c:	ee07 3a90 	vmov	s15, r3
 8006c30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c34:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c38:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8006cf0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006c3c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c40:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c44:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c50:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c54:	e021      	b.n	8006c9a <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	ee07 3a90 	vmov	s15, r3
 8006c5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c60:	eddf 6a25 	vldr	s13, [pc, #148]	; 8006cf8 <HAL_RCC_GetSysClockFreq+0x2dc>
 8006c64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c68:	4b1d      	ldr	r3, [pc, #116]	; (8006ce0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c70:	ee07 3a90 	vmov	s15, r3
 8006c74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c78:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c7c:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8006cf0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006c80:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c84:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c88:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c94:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c98:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006c9a:	4b11      	ldr	r3, [pc, #68]	; (8006ce0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c9e:	0a5b      	lsrs	r3, r3, #9
 8006ca0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ca4:	3301      	adds	r3, #1
 8006ca6:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	ee07 3a90 	vmov	s15, r3
 8006cae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006cb2:	edd7 6a07 	vldr	s13, [r7, #28]
 8006cb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006cba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006cbe:	ee17 3a90 	vmov	r3, s15
 8006cc2:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006cc4:	e005      	b.n	8006cd2 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	61bb      	str	r3, [r7, #24]
    break;
 8006cca:	e002      	b.n	8006cd2 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8006ccc:	4b06      	ldr	r3, [pc, #24]	; (8006ce8 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8006cce:	61bb      	str	r3, [r7, #24]
    break;
 8006cd0:	bf00      	nop
  }

  return sysclockfreq;
 8006cd2:	69bb      	ldr	r3, [r7, #24]
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	3724      	adds	r7, #36	; 0x24
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cde:	4770      	bx	lr
 8006ce0:	58024400 	.word	0x58024400
 8006ce4:	03d09000 	.word	0x03d09000
 8006ce8:	003d0900 	.word	0x003d0900
 8006cec:	017d7840 	.word	0x017d7840
 8006cf0:	46000000 	.word	0x46000000
 8006cf4:	4c742400 	.word	0x4c742400
 8006cf8:	4a742400 	.word	0x4a742400
 8006cfc:	4bbebc20 	.word	0x4bbebc20

08006d00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b082      	sub	sp, #8
 8006d04:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006d06:	f7ff fe89 	bl	8006a1c <HAL_RCC_GetSysClockFreq>
 8006d0a:	4601      	mov	r1, r0
 8006d0c:	4b10      	ldr	r3, [pc, #64]	; (8006d50 <HAL_RCC_GetHCLKFreq+0x50>)
 8006d0e:	699b      	ldr	r3, [r3, #24]
 8006d10:	0a1b      	lsrs	r3, r3, #8
 8006d12:	f003 030f 	and.w	r3, r3, #15
 8006d16:	4a0f      	ldr	r2, [pc, #60]	; (8006d54 <HAL_RCC_GetHCLKFreq+0x54>)
 8006d18:	5cd3      	ldrb	r3, [r2, r3]
 8006d1a:	f003 031f 	and.w	r3, r3, #31
 8006d1e:	fa21 f303 	lsr.w	r3, r1, r3
 8006d22:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006d24:	4b0a      	ldr	r3, [pc, #40]	; (8006d50 <HAL_RCC_GetHCLKFreq+0x50>)
 8006d26:	699b      	ldr	r3, [r3, #24]
 8006d28:	f003 030f 	and.w	r3, r3, #15
 8006d2c:	4a09      	ldr	r2, [pc, #36]	; (8006d54 <HAL_RCC_GetHCLKFreq+0x54>)
 8006d2e:	5cd3      	ldrb	r3, [r2, r3]
 8006d30:	f003 031f 	and.w	r3, r3, #31
 8006d34:	687a      	ldr	r2, [r7, #4]
 8006d36:	fa22 f303 	lsr.w	r3, r2, r3
 8006d3a:	4a07      	ldr	r2, [pc, #28]	; (8006d58 <HAL_RCC_GetHCLKFreq+0x58>)
 8006d3c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006d3e:	4a07      	ldr	r2, [pc, #28]	; (8006d5c <HAL_RCC_GetHCLKFreq+0x5c>)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006d44:	4b04      	ldr	r3, [pc, #16]	; (8006d58 <HAL_RCC_GetHCLKFreq+0x58>)
 8006d46:	681b      	ldr	r3, [r3, #0]
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	3708      	adds	r7, #8
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}
 8006d50:	58024400 	.word	0x58024400
 8006d54:	080200cc 	.word	0x080200cc
 8006d58:	24000004 	.word	0x24000004
 8006d5c:	24000000 	.word	0x24000000

08006d60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006d64:	f7ff ffcc 	bl	8006d00 <HAL_RCC_GetHCLKFreq>
 8006d68:	4601      	mov	r1, r0
 8006d6a:	4b06      	ldr	r3, [pc, #24]	; (8006d84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006d6c:	69db      	ldr	r3, [r3, #28]
 8006d6e:	091b      	lsrs	r3, r3, #4
 8006d70:	f003 0307 	and.w	r3, r3, #7
 8006d74:	4a04      	ldr	r2, [pc, #16]	; (8006d88 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006d76:	5cd3      	ldrb	r3, [r2, r3]
 8006d78:	f003 031f 	and.w	r3, r3, #31
 8006d7c:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	bd80      	pop	{r7, pc}
 8006d84:	58024400 	.word	0x58024400
 8006d88:	080200cc 	.word	0x080200cc

08006d8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006d90:	f7ff ffb6 	bl	8006d00 <HAL_RCC_GetHCLKFreq>
 8006d94:	4601      	mov	r1, r0
 8006d96:	4b06      	ldr	r3, [pc, #24]	; (8006db0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006d98:	69db      	ldr	r3, [r3, #28]
 8006d9a:	0a1b      	lsrs	r3, r3, #8
 8006d9c:	f003 0307 	and.w	r3, r3, #7
 8006da0:	4a04      	ldr	r2, [pc, #16]	; (8006db4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006da2:	5cd3      	ldrb	r3, [r2, r3]
 8006da4:	f003 031f 	and.w	r3, r3, #31
 8006da8:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	bd80      	pop	{r7, pc}
 8006db0:	58024400 	.word	0x58024400
 8006db4:	080200cc 	.word	0x080200cc

08006db8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b083      	sub	sp, #12
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
 8006dc0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	223f      	movs	r2, #63	; 0x3f
 8006dc6:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006dc8:	4b1a      	ldr	r3, [pc, #104]	; (8006e34 <HAL_RCC_GetClockConfig+0x7c>)
 8006dca:	691b      	ldr	r3, [r3, #16]
 8006dcc:	f003 0207 	and.w	r2, r3, #7
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8006dd4:	4b17      	ldr	r3, [pc, #92]	; (8006e34 <HAL_RCC_GetClockConfig+0x7c>)
 8006dd6:	699b      	ldr	r3, [r3, #24]
 8006dd8:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8006de0:	4b14      	ldr	r3, [pc, #80]	; (8006e34 <HAL_RCC_GetClockConfig+0x7c>)
 8006de2:	699b      	ldr	r3, [r3, #24]
 8006de4:	f003 020f 	and.w	r2, r3, #15
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8006dec:	4b11      	ldr	r3, [pc, #68]	; (8006e34 <HAL_RCC_GetClockConfig+0x7c>)
 8006dee:	699b      	ldr	r3, [r3, #24]
 8006df0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8006df8:	4b0e      	ldr	r3, [pc, #56]	; (8006e34 <HAL_RCC_GetClockConfig+0x7c>)
 8006dfa:	69db      	ldr	r3, [r3, #28]
 8006dfc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8006e04:	4b0b      	ldr	r3, [pc, #44]	; (8006e34 <HAL_RCC_GetClockConfig+0x7c>)
 8006e06:	69db      	ldr	r3, [r3, #28]
 8006e08:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8006e10:	4b08      	ldr	r3, [pc, #32]	; (8006e34 <HAL_RCC_GetClockConfig+0x7c>)
 8006e12:	6a1b      	ldr	r3, [r3, #32]
 8006e14:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006e1c:	4b06      	ldr	r3, [pc, #24]	; (8006e38 <HAL_RCC_GetClockConfig+0x80>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f003 020f 	and.w	r2, r3, #15
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	601a      	str	r2, [r3, #0]
}
 8006e28:	bf00      	nop
 8006e2a:	370c      	adds	r7, #12
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e32:	4770      	bx	lr
 8006e34:	58024400 	.word	0x58024400
 8006e38:	52002000 	.word	0x52002000

08006e3c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b086      	sub	sp, #24
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006e44:	2300      	movs	r3, #0
 8006e46:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006e48:	2300      	movs	r3, #0
 8006e4a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d03d      	beq.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e60:	d013      	beq.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8006e62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e66:	d802      	bhi.n	8006e6e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d007      	beq.n	8006e7c <HAL_RCCEx_PeriphCLKConfig+0x40>
 8006e6c:	e01f      	b.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0x72>
 8006e6e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e72:	d013      	beq.n	8006e9c <HAL_RCCEx_PeriphCLKConfig+0x60>
 8006e74:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006e78:	d01c      	beq.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8006e7a:	e018      	b.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e7c:	4baf      	ldr	r3, [pc, #700]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e80:	4aae      	ldr	r2, [pc, #696]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006e82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e86:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006e88:	e015      	b.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	3304      	adds	r3, #4
 8006e8e:	2102      	movs	r1, #2
 8006e90:	4618      	mov	r0, r3
 8006e92:	f001 f96f 	bl	8008174 <RCCEx_PLL2_Config>
 8006e96:	4603      	mov	r3, r0
 8006e98:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006e9a:	e00c      	b.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	3324      	adds	r3, #36	; 0x24
 8006ea0:	2102      	movs	r1, #2
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	f001 fa18 	bl	80082d8 <RCCEx_PLL3_Config>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006eac:	e003      	b.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006eae:	2301      	movs	r3, #1
 8006eb0:	75fb      	strb	r3, [r7, #23]
      break;
 8006eb2:	e000      	b.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8006eb4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006eb6:	7dfb      	ldrb	r3, [r7, #23]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d109      	bne.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006ebc:	4b9f      	ldr	r3, [pc, #636]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006ebe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ec0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ec8:	499c      	ldr	r1, [pc, #624]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	650b      	str	r3, [r1, #80]	; 0x50
 8006ece:	e001      	b.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ed0:	7dfb      	ldrb	r3, [r7, #23]
 8006ed2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d03d      	beq.n	8006f5c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ee4:	2b04      	cmp	r3, #4
 8006ee6:	d826      	bhi.n	8006f36 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8006ee8:	a201      	add	r2, pc, #4	; (adr r2, 8006ef0 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8006eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eee:	bf00      	nop
 8006ef0:	08006f05 	.word	0x08006f05
 8006ef4:	08006f13 	.word	0x08006f13
 8006ef8:	08006f25 	.word	0x08006f25
 8006efc:	08006f3d 	.word	0x08006f3d
 8006f00:	08006f3d 	.word	0x08006f3d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f04:	4b8d      	ldr	r3, [pc, #564]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f08:	4a8c      	ldr	r2, [pc, #560]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006f0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f0e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006f10:	e015      	b.n	8006f3e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	3304      	adds	r3, #4
 8006f16:	2100      	movs	r1, #0
 8006f18:	4618      	mov	r0, r3
 8006f1a:	f001 f92b 	bl	8008174 <RCCEx_PLL2_Config>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006f22:	e00c      	b.n	8006f3e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	3324      	adds	r3, #36	; 0x24
 8006f28:	2100      	movs	r1, #0
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	f001 f9d4 	bl	80082d8 <RCCEx_PLL3_Config>
 8006f30:	4603      	mov	r3, r0
 8006f32:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006f34:	e003      	b.n	8006f3e <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f36:	2301      	movs	r3, #1
 8006f38:	75fb      	strb	r3, [r7, #23]
      break;
 8006f3a:	e000      	b.n	8006f3e <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8006f3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f3e:	7dfb      	ldrb	r3, [r7, #23]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d109      	bne.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006f44:	4b7d      	ldr	r3, [pc, #500]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006f46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f48:	f023 0207 	bic.w	r2, r3, #7
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f50:	497a      	ldr	r1, [pc, #488]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006f52:	4313      	orrs	r3, r2
 8006f54:	650b      	str	r3, [r1, #80]	; 0x50
 8006f56:	e001      	b.n	8006f5c <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f58:	7dfb      	ldrb	r3, [r7, #23]
 8006f5a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d03e      	beq.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f6c:	2b80      	cmp	r3, #128	; 0x80
 8006f6e:	d01c      	beq.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8006f70:	2b80      	cmp	r3, #128	; 0x80
 8006f72:	d804      	bhi.n	8006f7e <HAL_RCCEx_PeriphCLKConfig+0x142>
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d008      	beq.n	8006f8a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006f78:	2b40      	cmp	r3, #64	; 0x40
 8006f7a:	d00d      	beq.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8006f7c:	e01e      	b.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0x180>
 8006f7e:	2bc0      	cmp	r3, #192	; 0xc0
 8006f80:	d01f      	beq.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8006f82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f86:	d01e      	beq.n	8006fc6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006f88:	e018      	b.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f8a:	4b6c      	ldr	r3, [pc, #432]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f8e:	4a6b      	ldr	r2, [pc, #428]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006f90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f94:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006f96:	e017      	b.n	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	3304      	adds	r3, #4
 8006f9c:	2100      	movs	r1, #0
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f001 f8e8 	bl	8008174 <RCCEx_PLL2_Config>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006fa8:	e00e      	b.n	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	3324      	adds	r3, #36	; 0x24
 8006fae:	2100      	movs	r1, #0
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	f001 f991 	bl	80082d8 <RCCEx_PLL3_Config>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006fba:	e005      	b.n	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	75fb      	strb	r3, [r7, #23]
      break;
 8006fc0:	e002      	b.n	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8006fc2:	bf00      	nop
 8006fc4:	e000      	b.n	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8006fc6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006fc8:	7dfb      	ldrb	r3, [r7, #23]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d109      	bne.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006fce:	4b5b      	ldr	r3, [pc, #364]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006fd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fd2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fda:	4958      	ldr	r1, [pc, #352]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	650b      	str	r3, [r1, #80]	; 0x50
 8006fe0:	e001      	b.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fe2:	7dfb      	ldrb	r3, [r7, #23]
 8006fe4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d044      	beq.n	800707c <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006ff8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ffc:	d01f      	beq.n	800703e <HAL_RCCEx_PeriphCLKConfig+0x202>
 8006ffe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007002:	d805      	bhi.n	8007010 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8007004:	2b00      	cmp	r3, #0
 8007006:	d00a      	beq.n	800701e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007008:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800700c:	d00e      	beq.n	800702c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 800700e:	e01f      	b.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8007010:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007014:	d01f      	beq.n	8007056 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8007016:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800701a:	d01e      	beq.n	800705a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800701c:	e018      	b.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800701e:	4b47      	ldr	r3, [pc, #284]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007022:	4a46      	ldr	r2, [pc, #280]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007024:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007028:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800702a:	e017      	b.n	800705c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	3304      	adds	r3, #4
 8007030:	2100      	movs	r1, #0
 8007032:	4618      	mov	r0, r3
 8007034:	f001 f89e 	bl	8008174 <RCCEx_PLL2_Config>
 8007038:	4603      	mov	r3, r0
 800703a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800703c:	e00e      	b.n	800705c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	3324      	adds	r3, #36	; 0x24
 8007042:	2100      	movs	r1, #0
 8007044:	4618      	mov	r0, r3
 8007046:	f001 f947 	bl	80082d8 <RCCEx_PLL3_Config>
 800704a:	4603      	mov	r3, r0
 800704c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800704e:	e005      	b.n	800705c <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007050:	2301      	movs	r3, #1
 8007052:	75fb      	strb	r3, [r7, #23]
      break;
 8007054:	e002      	b.n	800705c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8007056:	bf00      	nop
 8007058:	e000      	b.n	800705c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800705a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800705c:	7dfb      	ldrb	r3, [r7, #23]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d10a      	bne.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007062:	4b36      	ldr	r3, [pc, #216]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007066:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007070:	4932      	ldr	r1, [pc, #200]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007072:	4313      	orrs	r3, r2
 8007074:	658b      	str	r3, [r1, #88]	; 0x58
 8007076:	e001      	b.n	800707c <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007078:	7dfb      	ldrb	r3, [r7, #23]
 800707a:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007084:	2b00      	cmp	r3, #0
 8007086:	d044      	beq.n	8007112 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800708e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007092:	d01f      	beq.n	80070d4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007094:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007098:	d805      	bhi.n	80070a6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800709a:	2b00      	cmp	r3, #0
 800709c:	d00a      	beq.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x278>
 800709e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80070a2:	d00e      	beq.n	80070c2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80070a4:	e01f      	b.n	80070e6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 80070a6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80070aa:	d01f      	beq.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80070ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80070b0:	d01e      	beq.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80070b2:	e018      	b.n	80070e6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070b4:	4b21      	ldr	r3, [pc, #132]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80070b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070b8:	4a20      	ldr	r2, [pc, #128]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80070ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80070c0:	e017      	b.n	80070f2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	3304      	adds	r3, #4
 80070c6:	2100      	movs	r1, #0
 80070c8:	4618      	mov	r0, r3
 80070ca:	f001 f853 	bl	8008174 <RCCEx_PLL2_Config>
 80070ce:	4603      	mov	r3, r0
 80070d0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80070d2:	e00e      	b.n	80070f2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	3324      	adds	r3, #36	; 0x24
 80070d8:	2100      	movs	r1, #0
 80070da:	4618      	mov	r0, r3
 80070dc:	f001 f8fc 	bl	80082d8 <RCCEx_PLL3_Config>
 80070e0:	4603      	mov	r3, r0
 80070e2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80070e4:	e005      	b.n	80070f2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80070e6:	2301      	movs	r3, #1
 80070e8:	75fb      	strb	r3, [r7, #23]
      break;
 80070ea:	e002      	b.n	80070f2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80070ec:	bf00      	nop
 80070ee:	e000      	b.n	80070f2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80070f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80070f2:	7dfb      	ldrb	r3, [r7, #23]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d10a      	bne.n	800710e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80070f8:	4b10      	ldr	r3, [pc, #64]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80070fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070fc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007106:	490d      	ldr	r1, [pc, #52]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007108:	4313      	orrs	r3, r2
 800710a:	658b      	str	r3, [r1, #88]	; 0x58
 800710c:	e001      	b.n	8007112 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800710e:	7dfb      	ldrb	r3, [r7, #23]
 8007110:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800711a:	2b00      	cmp	r3, #0
 800711c:	d035      	beq.n	800718a <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007122:	2b10      	cmp	r3, #16
 8007124:	d00c      	beq.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8007126:	2b10      	cmp	r3, #16
 8007128:	d802      	bhi.n	8007130 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 800712a:	2b00      	cmp	r3, #0
 800712c:	d01b      	beq.n	8007166 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 800712e:	e017      	b.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8007130:	2b20      	cmp	r3, #32
 8007132:	d00c      	beq.n	800714e <HAL_RCCEx_PeriphCLKConfig+0x312>
 8007134:	2b30      	cmp	r3, #48	; 0x30
 8007136:	d018      	beq.n	800716a <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8007138:	e012      	b.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x324>
 800713a:	bf00      	nop
 800713c:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007140:	4baf      	ldr	r3, [pc, #700]	; (8007400 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007144:	4aae      	ldr	r2, [pc, #696]	; (8007400 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007146:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800714a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800714c:	e00e      	b.n	800716c <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	3304      	adds	r3, #4
 8007152:	2102      	movs	r1, #2
 8007154:	4618      	mov	r0, r3
 8007156:	f001 f80d 	bl	8008174 <RCCEx_PLL2_Config>
 800715a:	4603      	mov	r3, r0
 800715c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800715e:	e005      	b.n	800716c <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007160:	2301      	movs	r3, #1
 8007162:	75fb      	strb	r3, [r7, #23]
      break;
 8007164:	e002      	b.n	800716c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8007166:	bf00      	nop
 8007168:	e000      	b.n	800716c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800716a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800716c:	7dfb      	ldrb	r3, [r7, #23]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d109      	bne.n	8007186 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007172:	4ba3      	ldr	r3, [pc, #652]	; (8007400 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007176:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800717e:	49a0      	ldr	r1, [pc, #640]	; (8007400 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007180:	4313      	orrs	r3, r2
 8007182:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007184:	e001      	b.n	800718a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007186:	7dfb      	ldrb	r3, [r7, #23]
 8007188:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007192:	2b00      	cmp	r3, #0
 8007194:	d042      	beq.n	800721c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800719a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800719e:	d01f      	beq.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 80071a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071a4:	d805      	bhi.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d00a      	beq.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0x384>
 80071aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071ae:	d00e      	beq.n	80071ce <HAL_RCCEx_PeriphCLKConfig+0x392>
 80071b0:	e01f      	b.n	80071f2 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 80071b2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80071b6:	d01f      	beq.n	80071f8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80071b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80071bc:	d01e      	beq.n	80071fc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80071be:	e018      	b.n	80071f2 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071c0:	4b8f      	ldr	r3, [pc, #572]	; (8007400 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80071c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071c4:	4a8e      	ldr	r2, [pc, #568]	; (8007400 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80071c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80071cc:	e017      	b.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	3304      	adds	r3, #4
 80071d2:	2100      	movs	r1, #0
 80071d4:	4618      	mov	r0, r3
 80071d6:	f000 ffcd 	bl	8008174 <RCCEx_PLL2_Config>
 80071da:	4603      	mov	r3, r0
 80071dc:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80071de:	e00e      	b.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	3324      	adds	r3, #36	; 0x24
 80071e4:	2100      	movs	r1, #0
 80071e6:	4618      	mov	r0, r3
 80071e8:	f001 f876 	bl	80082d8 <RCCEx_PLL3_Config>
 80071ec:	4603      	mov	r3, r0
 80071ee:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80071f0:	e005      	b.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80071f2:	2301      	movs	r3, #1
 80071f4:	75fb      	strb	r3, [r7, #23]
      break;
 80071f6:	e002      	b.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80071f8:	bf00      	nop
 80071fa:	e000      	b.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80071fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80071fe:	7dfb      	ldrb	r3, [r7, #23]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d109      	bne.n	8007218 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007204:	4b7e      	ldr	r3, [pc, #504]	; (8007400 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007206:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007208:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007210:	497b      	ldr	r1, [pc, #492]	; (8007400 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007212:	4313      	orrs	r3, r2
 8007214:	650b      	str	r3, [r1, #80]	; 0x50
 8007216:	e001      	b.n	800721c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007218:	7dfb      	ldrb	r3, [r7, #23]
 800721a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007224:	2b00      	cmp	r3, #0
 8007226:	d042      	beq.n	80072ae <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800722c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007230:	d01b      	beq.n	800726a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8007232:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007236:	d805      	bhi.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8007238:	2b00      	cmp	r3, #0
 800723a:	d022      	beq.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0x446>
 800723c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007240:	d00a      	beq.n	8007258 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8007242:	e01b      	b.n	800727c <HAL_RCCEx_PeriphCLKConfig+0x440>
 8007244:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007248:	d01d      	beq.n	8007286 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 800724a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800724e:	d01c      	beq.n	800728a <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8007250:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007254:	d01b      	beq.n	800728e <HAL_RCCEx_PeriphCLKConfig+0x452>
 8007256:	e011      	b.n	800727c <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	3304      	adds	r3, #4
 800725c:	2101      	movs	r1, #1
 800725e:	4618      	mov	r0, r3
 8007260:	f000 ff88 	bl	8008174 <RCCEx_PLL2_Config>
 8007264:	4603      	mov	r3, r0
 8007266:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007268:	e012      	b.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	3324      	adds	r3, #36	; 0x24
 800726e:	2101      	movs	r1, #1
 8007270:	4618      	mov	r0, r3
 8007272:	f001 f831 	bl	80082d8 <RCCEx_PLL3_Config>
 8007276:	4603      	mov	r3, r0
 8007278:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800727a:	e009      	b.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800727c:	2301      	movs	r3, #1
 800727e:	75fb      	strb	r3, [r7, #23]
      break;
 8007280:	e006      	b.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8007282:	bf00      	nop
 8007284:	e004      	b.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8007286:	bf00      	nop
 8007288:	e002      	b.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800728a:	bf00      	nop
 800728c:	e000      	b.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800728e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007290:	7dfb      	ldrb	r3, [r7, #23]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d109      	bne.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007296:	4b5a      	ldr	r3, [pc, #360]	; (8007400 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007298:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800729a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072a2:	4957      	ldr	r1, [pc, #348]	; (8007400 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80072a4:	4313      	orrs	r3, r2
 80072a6:	650b      	str	r3, [r1, #80]	; 0x50
 80072a8:	e001      	b.n	80072ae <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072aa:	7dfb      	ldrb	r3, [r7, #23]
 80072ac:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d044      	beq.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80072c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072c4:	d01b      	beq.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80072c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072ca:	d805      	bhi.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d022      	beq.n	8007316 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80072d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80072d4:	d00a      	beq.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80072d6:	e01b      	b.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 80072d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072dc:	d01d      	beq.n	800731a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80072de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80072e2:	d01c      	beq.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 80072e4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80072e8:	d01b      	beq.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80072ea:	e011      	b.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	3304      	adds	r3, #4
 80072f0:	2101      	movs	r1, #1
 80072f2:	4618      	mov	r0, r3
 80072f4:	f000 ff3e 	bl	8008174 <RCCEx_PLL2_Config>
 80072f8:	4603      	mov	r3, r0
 80072fa:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80072fc:	e012      	b.n	8007324 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	3324      	adds	r3, #36	; 0x24
 8007302:	2101      	movs	r1, #1
 8007304:	4618      	mov	r0, r3
 8007306:	f000 ffe7 	bl	80082d8 <RCCEx_PLL3_Config>
 800730a:	4603      	mov	r3, r0
 800730c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800730e:	e009      	b.n	8007324 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8007310:	2301      	movs	r3, #1
 8007312:	75fb      	strb	r3, [r7, #23]
      break;
 8007314:	e006      	b.n	8007324 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8007316:	bf00      	nop
 8007318:	e004      	b.n	8007324 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800731a:	bf00      	nop
 800731c:	e002      	b.n	8007324 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800731e:	bf00      	nop
 8007320:	e000      	b.n	8007324 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8007322:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007324:	7dfb      	ldrb	r3, [r7, #23]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d10a      	bne.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800732a:	4b35      	ldr	r3, [pc, #212]	; (8007400 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800732c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800732e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007338:	4931      	ldr	r1, [pc, #196]	; (8007400 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800733a:	4313      	orrs	r3, r2
 800733c:	658b      	str	r3, [r1, #88]	; 0x58
 800733e:	e001      	b.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007340:	7dfb      	ldrb	r3, [r7, #23]
 8007342:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800734c:	2b00      	cmp	r3, #0
 800734e:	d02d      	beq.n	80073ac <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007354:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007358:	d005      	beq.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800735a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800735e:	d009      	beq.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8007360:	2b00      	cmp	r3, #0
 8007362:	d013      	beq.n	800738c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8007364:	e00f      	b.n	8007386 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007366:	4b26      	ldr	r3, [pc, #152]	; (8007400 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800736a:	4a25      	ldr	r2, [pc, #148]	; (8007400 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800736c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007370:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007372:	e00c      	b.n	800738e <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	3304      	adds	r3, #4
 8007378:	2101      	movs	r1, #1
 800737a:	4618      	mov	r0, r3
 800737c:	f000 fefa 	bl	8008174 <RCCEx_PLL2_Config>
 8007380:	4603      	mov	r3, r0
 8007382:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007384:	e003      	b.n	800738e <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007386:	2301      	movs	r3, #1
 8007388:	75fb      	strb	r3, [r7, #23]
      break;
 800738a:	e000      	b.n	800738e <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 800738c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800738e:	7dfb      	ldrb	r3, [r7, #23]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d109      	bne.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007394:	4b1a      	ldr	r3, [pc, #104]	; (8007400 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007396:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007398:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073a0:	4917      	ldr	r1, [pc, #92]	; (8007400 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80073a2:	4313      	orrs	r3, r2
 80073a4:	650b      	str	r3, [r1, #80]	; 0x50
 80073a6:	e001      	b.n	80073ac <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073a8:	7dfb      	ldrb	r3, [r7, #23]
 80073aa:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d035      	beq.n	8007424 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073bc:	2b03      	cmp	r3, #3
 80073be:	d81b      	bhi.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80073c0:	a201      	add	r2, pc, #4	; (adr r2, 80073c8 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 80073c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073c6:	bf00      	nop
 80073c8:	08007405 	.word	0x08007405
 80073cc:	080073d9 	.word	0x080073d9
 80073d0:	080073e7 	.word	0x080073e7
 80073d4:	08007405 	.word	0x08007405
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073d8:	4b09      	ldr	r3, [pc, #36]	; (8007400 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80073da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073dc:	4a08      	ldr	r2, [pc, #32]	; (8007400 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80073de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80073e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80073e4:	e00f      	b.n	8007406 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	3304      	adds	r3, #4
 80073ea:	2102      	movs	r1, #2
 80073ec:	4618      	mov	r0, r3
 80073ee:	f000 fec1 	bl	8008174 <RCCEx_PLL2_Config>
 80073f2:	4603      	mov	r3, r0
 80073f4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80073f6:	e006      	b.n	8007406 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80073f8:	2301      	movs	r3, #1
 80073fa:	75fb      	strb	r3, [r7, #23]
      break;
 80073fc:	e003      	b.n	8007406 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 80073fe:	bf00      	nop
 8007400:	58024400 	.word	0x58024400
      break;
 8007404:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007406:	7dfb      	ldrb	r3, [r7, #23]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d109      	bne.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800740c:	4bba      	ldr	r3, [pc, #744]	; (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800740e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007410:	f023 0203 	bic.w	r2, r3, #3
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007418:	49b7      	ldr	r1, [pc, #732]	; (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800741a:	4313      	orrs	r3, r2
 800741c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800741e:	e001      	b.n	8007424 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007420:	7dfb      	ldrb	r3, [r7, #23]
 8007422:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800742c:	2b00      	cmp	r3, #0
 800742e:	f000 8086 	beq.w	800753e <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007432:	4bb2      	ldr	r3, [pc, #712]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4ab1      	ldr	r2, [pc, #708]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8007438:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800743c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800743e:	f7fa fc8b 	bl	8001d58 <HAL_GetTick>
 8007442:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007444:	e009      	b.n	800745a <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007446:	f7fa fc87 	bl	8001d58 <HAL_GetTick>
 800744a:	4602      	mov	r2, r0
 800744c:	693b      	ldr	r3, [r7, #16]
 800744e:	1ad3      	subs	r3, r2, r3
 8007450:	2b64      	cmp	r3, #100	; 0x64
 8007452:	d902      	bls.n	800745a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8007454:	2303      	movs	r3, #3
 8007456:	75fb      	strb	r3, [r7, #23]
        break;
 8007458:	e005      	b.n	8007466 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800745a:	4ba8      	ldr	r3, [pc, #672]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007462:	2b00      	cmp	r3, #0
 8007464:	d0ef      	beq.n	8007446 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8007466:	7dfb      	ldrb	r3, [r7, #23]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d166      	bne.n	800753a <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800746c:	4ba2      	ldr	r3, [pc, #648]	; (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800746e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007476:	4053      	eors	r3, r2
 8007478:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800747c:	2b00      	cmp	r3, #0
 800747e:	d013      	beq.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007480:	4b9d      	ldr	r3, [pc, #628]	; (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007484:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007488:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800748a:	4b9b      	ldr	r3, [pc, #620]	; (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800748c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800748e:	4a9a      	ldr	r2, [pc, #616]	; (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007490:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007494:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007496:	4b98      	ldr	r3, [pc, #608]	; (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800749a:	4a97      	ldr	r2, [pc, #604]	; (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800749c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80074a0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80074a2:	4a95      	ldr	r2, [pc, #596]	; (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80074ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074b2:	d115      	bne.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074b4:	f7fa fc50 	bl	8001d58 <HAL_GetTick>
 80074b8:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80074ba:	e00b      	b.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074bc:	f7fa fc4c 	bl	8001d58 <HAL_GetTick>
 80074c0:	4602      	mov	r2, r0
 80074c2:	693b      	ldr	r3, [r7, #16]
 80074c4:	1ad3      	subs	r3, r2, r3
 80074c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d902      	bls.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 80074ce:	2303      	movs	r3, #3
 80074d0:	75fb      	strb	r3, [r7, #23]
            break;
 80074d2:	e005      	b.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80074d4:	4b88      	ldr	r3, [pc, #544]	; (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80074d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074d8:	f003 0302 	and.w	r3, r3, #2
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d0ed      	beq.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 80074e0:	7dfb      	ldrb	r3, [r7, #23]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d126      	bne.n	8007534 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80074ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80074f4:	d10d      	bne.n	8007512 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 80074f6:	4b80      	ldr	r3, [pc, #512]	; (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80074f8:	691b      	ldr	r3, [r3, #16]
 80074fa:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007504:	0919      	lsrs	r1, r3, #4
 8007506:	4b7e      	ldr	r3, [pc, #504]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8007508:	400b      	ands	r3, r1
 800750a:	497b      	ldr	r1, [pc, #492]	; (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800750c:	4313      	orrs	r3, r2
 800750e:	610b      	str	r3, [r1, #16]
 8007510:	e005      	b.n	800751e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8007512:	4b79      	ldr	r3, [pc, #484]	; (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007514:	691b      	ldr	r3, [r3, #16]
 8007516:	4a78      	ldr	r2, [pc, #480]	; (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007518:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800751c:	6113      	str	r3, [r2, #16]
 800751e:	4b76      	ldr	r3, [pc, #472]	; (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007520:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007528:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800752c:	4972      	ldr	r1, [pc, #456]	; (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800752e:	4313      	orrs	r3, r2
 8007530:	670b      	str	r3, [r1, #112]	; 0x70
 8007532:	e004      	b.n	800753e <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007534:	7dfb      	ldrb	r3, [r7, #23]
 8007536:	75bb      	strb	r3, [r7, #22]
 8007538:	e001      	b.n	800753e <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800753a:	7dfb      	ldrb	r3, [r7, #23]
 800753c:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f003 0301 	and.w	r3, r3, #1
 8007546:	2b00      	cmp	r3, #0
 8007548:	d07d      	beq.n	8007646 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800754e:	2b28      	cmp	r3, #40	; 0x28
 8007550:	d866      	bhi.n	8007620 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8007552:	a201      	add	r2, pc, #4	; (adr r2, 8007558 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8007554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007558:	08007627 	.word	0x08007627
 800755c:	08007621 	.word	0x08007621
 8007560:	08007621 	.word	0x08007621
 8007564:	08007621 	.word	0x08007621
 8007568:	08007621 	.word	0x08007621
 800756c:	08007621 	.word	0x08007621
 8007570:	08007621 	.word	0x08007621
 8007574:	08007621 	.word	0x08007621
 8007578:	080075fd 	.word	0x080075fd
 800757c:	08007621 	.word	0x08007621
 8007580:	08007621 	.word	0x08007621
 8007584:	08007621 	.word	0x08007621
 8007588:	08007621 	.word	0x08007621
 800758c:	08007621 	.word	0x08007621
 8007590:	08007621 	.word	0x08007621
 8007594:	08007621 	.word	0x08007621
 8007598:	0800760f 	.word	0x0800760f
 800759c:	08007621 	.word	0x08007621
 80075a0:	08007621 	.word	0x08007621
 80075a4:	08007621 	.word	0x08007621
 80075a8:	08007621 	.word	0x08007621
 80075ac:	08007621 	.word	0x08007621
 80075b0:	08007621 	.word	0x08007621
 80075b4:	08007621 	.word	0x08007621
 80075b8:	08007627 	.word	0x08007627
 80075bc:	08007621 	.word	0x08007621
 80075c0:	08007621 	.word	0x08007621
 80075c4:	08007621 	.word	0x08007621
 80075c8:	08007621 	.word	0x08007621
 80075cc:	08007621 	.word	0x08007621
 80075d0:	08007621 	.word	0x08007621
 80075d4:	08007621 	.word	0x08007621
 80075d8:	08007627 	.word	0x08007627
 80075dc:	08007621 	.word	0x08007621
 80075e0:	08007621 	.word	0x08007621
 80075e4:	08007621 	.word	0x08007621
 80075e8:	08007621 	.word	0x08007621
 80075ec:	08007621 	.word	0x08007621
 80075f0:	08007621 	.word	0x08007621
 80075f4:	08007621 	.word	0x08007621
 80075f8:	08007627 	.word	0x08007627
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	3304      	adds	r3, #4
 8007600:	2101      	movs	r1, #1
 8007602:	4618      	mov	r0, r3
 8007604:	f000 fdb6 	bl	8008174 <RCCEx_PLL2_Config>
 8007608:	4603      	mov	r3, r0
 800760a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800760c:	e00c      	b.n	8007628 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	3324      	adds	r3, #36	; 0x24
 8007612:	2101      	movs	r1, #1
 8007614:	4618      	mov	r0, r3
 8007616:	f000 fe5f 	bl	80082d8 <RCCEx_PLL3_Config>
 800761a:	4603      	mov	r3, r0
 800761c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800761e:	e003      	b.n	8007628 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007620:	2301      	movs	r3, #1
 8007622:	75fb      	strb	r3, [r7, #23]
      break;
 8007624:	e000      	b.n	8007628 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8007626:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007628:	7dfb      	ldrb	r3, [r7, #23]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d109      	bne.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800762e:	4b32      	ldr	r3, [pc, #200]	; (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007630:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007632:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800763a:	492f      	ldr	r1, [pc, #188]	; (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800763c:	4313      	orrs	r3, r2
 800763e:	654b      	str	r3, [r1, #84]	; 0x54
 8007640:	e001      	b.n	8007646 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007642:	7dfb      	ldrb	r3, [r7, #23]
 8007644:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f003 0302 	and.w	r3, r3, #2
 800764e:	2b00      	cmp	r3, #0
 8007650:	d037      	beq.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007656:	2b05      	cmp	r3, #5
 8007658:	d820      	bhi.n	800769c <HAL_RCCEx_PeriphCLKConfig+0x860>
 800765a:	a201      	add	r2, pc, #4	; (adr r2, 8007660 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800765c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007660:	080076a3 	.word	0x080076a3
 8007664:	08007679 	.word	0x08007679
 8007668:	0800768b 	.word	0x0800768b
 800766c:	080076a3 	.word	0x080076a3
 8007670:	080076a3 	.word	0x080076a3
 8007674:	080076a3 	.word	0x080076a3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	3304      	adds	r3, #4
 800767c:	2101      	movs	r1, #1
 800767e:	4618      	mov	r0, r3
 8007680:	f000 fd78 	bl	8008174 <RCCEx_PLL2_Config>
 8007684:	4603      	mov	r3, r0
 8007686:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007688:	e00c      	b.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	3324      	adds	r3, #36	; 0x24
 800768e:	2101      	movs	r1, #1
 8007690:	4618      	mov	r0, r3
 8007692:	f000 fe21 	bl	80082d8 <RCCEx_PLL3_Config>
 8007696:	4603      	mov	r3, r0
 8007698:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800769a:	e003      	b.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800769c:	2301      	movs	r3, #1
 800769e:	75fb      	strb	r3, [r7, #23]
      break;
 80076a0:	e000      	b.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 80076a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80076a4:	7dfb      	ldrb	r3, [r7, #23]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d109      	bne.n	80076be <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80076aa:	4b13      	ldr	r3, [pc, #76]	; (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80076ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076ae:	f023 0207 	bic.w	r2, r3, #7
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076b6:	4910      	ldr	r1, [pc, #64]	; (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80076b8:	4313      	orrs	r3, r2
 80076ba:	654b      	str	r3, [r1, #84]	; 0x54
 80076bc:	e001      	b.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076be:	7dfb      	ldrb	r3, [r7, #23]
 80076c0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f003 0304 	and.w	r3, r3, #4
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d040      	beq.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076d4:	2b05      	cmp	r3, #5
 80076d6:	d827      	bhi.n	8007728 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 80076d8:	a201      	add	r2, pc, #4	; (adr r2, 80076e0 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 80076da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076de:	bf00      	nop
 80076e0:	0800772f 	.word	0x0800772f
 80076e4:	08007705 	.word	0x08007705
 80076e8:	08007717 	.word	0x08007717
 80076ec:	0800772f 	.word	0x0800772f
 80076f0:	0800772f 	.word	0x0800772f
 80076f4:	0800772f 	.word	0x0800772f
 80076f8:	58024400 	.word	0x58024400
 80076fc:	58024800 	.word	0x58024800
 8007700:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	3304      	adds	r3, #4
 8007708:	2101      	movs	r1, #1
 800770a:	4618      	mov	r0, r3
 800770c:	f000 fd32 	bl	8008174 <RCCEx_PLL2_Config>
 8007710:	4603      	mov	r3, r0
 8007712:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007714:	e00c      	b.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	3324      	adds	r3, #36	; 0x24
 800771a:	2101      	movs	r1, #1
 800771c:	4618      	mov	r0, r3
 800771e:	f000 fddb 	bl	80082d8 <RCCEx_PLL3_Config>
 8007722:	4603      	mov	r3, r0
 8007724:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007726:	e003      	b.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007728:	2301      	movs	r3, #1
 800772a:	75fb      	strb	r3, [r7, #23]
      break;
 800772c:	e000      	b.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 800772e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007730:	7dfb      	ldrb	r3, [r7, #23]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d10a      	bne.n	800774c <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007736:	4bb2      	ldr	r3, [pc, #712]	; (8007a00 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800773a:	f023 0207 	bic.w	r2, r3, #7
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007744:	49ae      	ldr	r1, [pc, #696]	; (8007a00 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007746:	4313      	orrs	r3, r2
 8007748:	658b      	str	r3, [r1, #88]	; 0x58
 800774a:	e001      	b.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800774c:	7dfb      	ldrb	r3, [r7, #23]
 800774e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f003 0320 	and.w	r3, r3, #32
 8007758:	2b00      	cmp	r3, #0
 800775a:	d044      	beq.n	80077e6 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007762:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007766:	d01b      	beq.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8007768:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800776c:	d805      	bhi.n	800777a <HAL_RCCEx_PeriphCLKConfig+0x93e>
 800776e:	2b00      	cmp	r3, #0
 8007770:	d022      	beq.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8007772:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007776:	d00a      	beq.n	800778e <HAL_RCCEx_PeriphCLKConfig+0x952>
 8007778:	e01b      	b.n	80077b2 <HAL_RCCEx_PeriphCLKConfig+0x976>
 800777a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800777e:	d01d      	beq.n	80077bc <HAL_RCCEx_PeriphCLKConfig+0x980>
 8007780:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007784:	d01c      	beq.n	80077c0 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8007786:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800778a:	d01b      	beq.n	80077c4 <HAL_RCCEx_PeriphCLKConfig+0x988>
 800778c:	e011      	b.n	80077b2 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	3304      	adds	r3, #4
 8007792:	2100      	movs	r1, #0
 8007794:	4618      	mov	r0, r3
 8007796:	f000 fced 	bl	8008174 <RCCEx_PLL2_Config>
 800779a:	4603      	mov	r3, r0
 800779c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800779e:	e012      	b.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	3324      	adds	r3, #36	; 0x24
 80077a4:	2102      	movs	r1, #2
 80077a6:	4618      	mov	r0, r3
 80077a8:	f000 fd96 	bl	80082d8 <RCCEx_PLL3_Config>
 80077ac:	4603      	mov	r3, r0
 80077ae:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80077b0:	e009      	b.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80077b2:	2301      	movs	r3, #1
 80077b4:	75fb      	strb	r3, [r7, #23]
      break;
 80077b6:	e006      	b.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80077b8:	bf00      	nop
 80077ba:	e004      	b.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80077bc:	bf00      	nop
 80077be:	e002      	b.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80077c0:	bf00      	nop
 80077c2:	e000      	b.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80077c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80077c6:	7dfb      	ldrb	r3, [r7, #23]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d10a      	bne.n	80077e2 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80077cc:	4b8c      	ldr	r3, [pc, #560]	; (8007a00 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80077ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077d0:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80077da:	4989      	ldr	r1, [pc, #548]	; (8007a00 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80077dc:	4313      	orrs	r3, r2
 80077de:	654b      	str	r3, [r1, #84]	; 0x54
 80077e0:	e001      	b.n	80077e6 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077e2:	7dfb      	ldrb	r3, [r7, #23]
 80077e4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d044      	beq.n	800787c <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80077f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077fc:	d01b      	beq.n	8007836 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 80077fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007802:	d805      	bhi.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8007804:	2b00      	cmp	r3, #0
 8007806:	d022      	beq.n	800784e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8007808:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800780c:	d00a      	beq.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 800780e:	e01b      	b.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8007810:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007814:	d01d      	beq.n	8007852 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8007816:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800781a:	d01c      	beq.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 800781c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007820:	d01b      	beq.n	800785a <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8007822:	e011      	b.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	3304      	adds	r3, #4
 8007828:	2100      	movs	r1, #0
 800782a:	4618      	mov	r0, r3
 800782c:	f000 fca2 	bl	8008174 <RCCEx_PLL2_Config>
 8007830:	4603      	mov	r3, r0
 8007832:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007834:	e012      	b.n	800785c <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	3324      	adds	r3, #36	; 0x24
 800783a:	2102      	movs	r1, #2
 800783c:	4618      	mov	r0, r3
 800783e:	f000 fd4b 	bl	80082d8 <RCCEx_PLL3_Config>
 8007842:	4603      	mov	r3, r0
 8007844:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007846:	e009      	b.n	800785c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007848:	2301      	movs	r3, #1
 800784a:	75fb      	strb	r3, [r7, #23]
      break;
 800784c:	e006      	b.n	800785c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800784e:	bf00      	nop
 8007850:	e004      	b.n	800785c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007852:	bf00      	nop
 8007854:	e002      	b.n	800785c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007856:	bf00      	nop
 8007858:	e000      	b.n	800785c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800785a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800785c:	7dfb      	ldrb	r3, [r7, #23]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d10a      	bne.n	8007878 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007862:	4b67      	ldr	r3, [pc, #412]	; (8007a00 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007866:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007870:	4963      	ldr	r1, [pc, #396]	; (8007a00 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007872:	4313      	orrs	r3, r2
 8007874:	658b      	str	r3, [r1, #88]	; 0x58
 8007876:	e001      	b.n	800787c <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007878:	7dfb      	ldrb	r3, [r7, #23]
 800787a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007884:	2b00      	cmp	r3, #0
 8007886:	d044      	beq.n	8007912 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800788e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007892:	d01b      	beq.n	80078cc <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8007894:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007898:	d805      	bhi.n	80078a6 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 800789a:	2b00      	cmp	r3, #0
 800789c:	d022      	beq.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800789e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078a2:	d00a      	beq.n	80078ba <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80078a4:	e01b      	b.n	80078de <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 80078a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078aa:	d01d      	beq.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80078ac:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80078b0:	d01c      	beq.n	80078ec <HAL_RCCEx_PeriphCLKConfig+0xab0>
 80078b2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80078b6:	d01b      	beq.n	80078f0 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 80078b8:	e011      	b.n	80078de <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	3304      	adds	r3, #4
 80078be:	2100      	movs	r1, #0
 80078c0:	4618      	mov	r0, r3
 80078c2:	f000 fc57 	bl	8008174 <RCCEx_PLL2_Config>
 80078c6:	4603      	mov	r3, r0
 80078c8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80078ca:	e012      	b.n	80078f2 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	3324      	adds	r3, #36	; 0x24
 80078d0:	2102      	movs	r1, #2
 80078d2:	4618      	mov	r0, r3
 80078d4:	f000 fd00 	bl	80082d8 <RCCEx_PLL3_Config>
 80078d8:	4603      	mov	r3, r0
 80078da:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80078dc:	e009      	b.n	80078f2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80078de:	2301      	movs	r3, #1
 80078e0:	75fb      	strb	r3, [r7, #23]
      break;
 80078e2:	e006      	b.n	80078f2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80078e4:	bf00      	nop
 80078e6:	e004      	b.n	80078f2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80078e8:	bf00      	nop
 80078ea:	e002      	b.n	80078f2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80078ec:	bf00      	nop
 80078ee:	e000      	b.n	80078f2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80078f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80078f2:	7dfb      	ldrb	r3, [r7, #23]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d10a      	bne.n	800790e <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80078f8:	4b41      	ldr	r3, [pc, #260]	; (8007a00 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80078fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078fc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007906:	493e      	ldr	r1, [pc, #248]	; (8007a00 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007908:	4313      	orrs	r3, r2
 800790a:	658b      	str	r3, [r1, #88]	; 0x58
 800790c:	e001      	b.n	8007912 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800790e:	7dfb      	ldrb	r3, [r7, #23]
 8007910:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f003 0308 	and.w	r3, r3, #8
 800791a:	2b00      	cmp	r3, #0
 800791c:	d01a      	beq.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007924:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007928:	d10a      	bne.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	3324      	adds	r3, #36	; 0x24
 800792e:	2102      	movs	r1, #2
 8007930:	4618      	mov	r0, r3
 8007932:	f000 fcd1 	bl	80082d8 <RCCEx_PLL3_Config>
 8007936:	4603      	mov	r3, r0
 8007938:	2b00      	cmp	r3, #0
 800793a:	d001      	beq.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 800793c:	2301      	movs	r3, #1
 800793e:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007940:	4b2f      	ldr	r3, [pc, #188]	; (8007a00 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007942:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007944:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800794e:	492c      	ldr	r1, [pc, #176]	; (8007a00 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007950:	4313      	orrs	r3, r2
 8007952:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f003 0310 	and.w	r3, r3, #16
 800795c:	2b00      	cmp	r3, #0
 800795e:	d01a      	beq.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007966:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800796a:	d10a      	bne.n	8007982 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	3324      	adds	r3, #36	; 0x24
 8007970:	2102      	movs	r1, #2
 8007972:	4618      	mov	r0, r3
 8007974:	f000 fcb0 	bl	80082d8 <RCCEx_PLL3_Config>
 8007978:	4603      	mov	r3, r0
 800797a:	2b00      	cmp	r3, #0
 800797c:	d001      	beq.n	8007982 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 800797e:	2301      	movs	r3, #1
 8007980:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007982:	4b1f      	ldr	r3, [pc, #124]	; (8007a00 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007986:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007990:	491b      	ldr	r1, [pc, #108]	; (8007a00 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007992:	4313      	orrs	r3, r2
 8007994:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d032      	beq.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80079a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079ac:	d00d      	beq.n	80079ca <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 80079ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80079b2:	d016      	beq.n	80079e2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d111      	bne.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	3304      	adds	r3, #4
 80079bc:	2100      	movs	r1, #0
 80079be:	4618      	mov	r0, r3
 80079c0:	f000 fbd8 	bl	8008174 <RCCEx_PLL2_Config>
 80079c4:	4603      	mov	r3, r0
 80079c6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80079c8:	e00c      	b.n	80079e4 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	3324      	adds	r3, #36	; 0x24
 80079ce:	2102      	movs	r1, #2
 80079d0:	4618      	mov	r0, r3
 80079d2:	f000 fc81 	bl	80082d8 <RCCEx_PLL3_Config>
 80079d6:	4603      	mov	r3, r0
 80079d8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80079da:	e003      	b.n	80079e4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80079dc:	2301      	movs	r3, #1
 80079de:	75fb      	strb	r3, [r7, #23]
      break;
 80079e0:	e000      	b.n	80079e4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 80079e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80079e4:	7dfb      	ldrb	r3, [r7, #23]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d10c      	bne.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80079ea:	4b05      	ldr	r3, [pc, #20]	; (8007a00 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80079ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079ee:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80079f8:	4901      	ldr	r1, [pc, #4]	; (8007a00 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80079fa:	4313      	orrs	r3, r2
 80079fc:	658b      	str	r3, [r1, #88]	; 0x58
 80079fe:	e003      	b.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8007a00:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a04:	7dfb      	ldrb	r3, [r7, #23]
 8007a06:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d02f      	beq.n	8007a74 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007a1e:	d00c      	beq.n	8007a3a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8007a20:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007a24:	d015      	beq.n	8007a52 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8007a26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a2a:	d10f      	bne.n	8007a4c <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a2c:	4b79      	ldr	r3, [pc, #484]	; (8007c14 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a30:	4a78      	ldr	r2, [pc, #480]	; (8007c14 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007a32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a36:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007a38:	e00c      	b.n	8007a54 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	3324      	adds	r3, #36	; 0x24
 8007a3e:	2101      	movs	r1, #1
 8007a40:	4618      	mov	r0, r3
 8007a42:	f000 fc49 	bl	80082d8 <RCCEx_PLL3_Config>
 8007a46:	4603      	mov	r3, r0
 8007a48:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8007a4a:	e003      	b.n	8007a54 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	75fb      	strb	r3, [r7, #23]
      break;
 8007a50:	e000      	b.n	8007a54 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8007a52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a54:	7dfb      	ldrb	r3, [r7, #23]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d10a      	bne.n	8007a70 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007a5a:	4b6e      	ldr	r3, [pc, #440]	; (8007c14 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007a5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a5e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a68:	496a      	ldr	r1, [pc, #424]	; (8007c14 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007a6a:	4313      	orrs	r3, r2
 8007a6c:	654b      	str	r3, [r1, #84]	; 0x54
 8007a6e:	e001      	b.n	8007a74 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a70:	7dfb      	ldrb	r3, [r7, #23]
 8007a72:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d029      	beq.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d003      	beq.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8007a88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a8c:	d007      	beq.n	8007a9e <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8007a8e:	e00f      	b.n	8007ab0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a90:	4b60      	ldr	r3, [pc, #384]	; (8007c14 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a94:	4a5f      	ldr	r2, [pc, #380]	; (8007c14 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007a96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a9a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007a9c:	e00b      	b.n	8007ab6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	3304      	adds	r3, #4
 8007aa2:	2102      	movs	r1, #2
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	f000 fb65 	bl	8008174 <RCCEx_PLL2_Config>
 8007aaa:	4603      	mov	r3, r0
 8007aac:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007aae:	e002      	b.n	8007ab6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	75fb      	strb	r3, [r7, #23]
      break;
 8007ab4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ab6:	7dfb      	ldrb	r3, [r7, #23]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d109      	bne.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007abc:	4b55      	ldr	r3, [pc, #340]	; (8007c14 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007abe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ac0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ac8:	4952      	ldr	r1, [pc, #328]	; (8007c14 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007aca:	4313      	orrs	r3, r2
 8007acc:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007ace:	e001      	b.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ad0:	7dfb      	ldrb	r3, [r7, #23]
 8007ad2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d00a      	beq.n	8007af6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	3324      	adds	r3, #36	; 0x24
 8007ae4:	2102      	movs	r1, #2
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f000 fbf6 	bl	80082d8 <RCCEx_PLL3_Config>
 8007aec:	4603      	mov	r3, r0
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d001      	beq.n	8007af6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8007af2:	2301      	movs	r3, #1
 8007af4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d02f      	beq.n	8007b62 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b0a:	d00c      	beq.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007b0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b10:	d802      	bhi.n	8007b18 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d011      	beq.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8007b16:	e00d      	b.n	8007b34 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8007b18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b1c:	d00f      	beq.n	8007b3e <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8007b1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b22:	d00e      	beq.n	8007b42 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8007b24:	e006      	b.n	8007b34 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b26:	4b3b      	ldr	r3, [pc, #236]	; (8007c14 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b2a:	4a3a      	ldr	r2, [pc, #232]	; (8007c14 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007b2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b30:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007b32:	e007      	b.n	8007b44 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b34:	2301      	movs	r3, #1
 8007b36:	75fb      	strb	r3, [r7, #23]
      break;
 8007b38:	e004      	b.n	8007b44 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8007b3a:	bf00      	nop
 8007b3c:	e002      	b.n	8007b44 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8007b3e:	bf00      	nop
 8007b40:	e000      	b.n	8007b44 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8007b42:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b44:	7dfb      	ldrb	r3, [r7, #23]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d109      	bne.n	8007b5e <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007b4a:	4b32      	ldr	r3, [pc, #200]	; (8007c14 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b4e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b56:	492f      	ldr	r1, [pc, #188]	; (8007c14 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007b58:	4313      	orrs	r3, r2
 8007b5a:	654b      	str	r3, [r1, #84]	; 0x54
 8007b5c:	e001      	b.n	8007b62 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b5e:	7dfb      	ldrb	r3, [r7, #23]
 8007b60:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d008      	beq.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007b6e:	4b29      	ldr	r3, [pc, #164]	; (8007c14 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007b70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b72:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b7a:	4926      	ldr	r1, [pc, #152]	; (8007c14 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007b7c:	4313      	orrs	r3, r2
 8007b7e:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d009      	beq.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007b8c:	4b21      	ldr	r3, [pc, #132]	; (8007c14 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007b8e:	691b      	ldr	r3, [r3, #16]
 8007b90:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007b9a:	491e      	ldr	r1, [pc, #120]	; (8007c14 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007b9c:	4313      	orrs	r3, r2
 8007b9e:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d008      	beq.n	8007bbe <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007bac:	4b19      	ldr	r3, [pc, #100]	; (8007c14 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007bae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bb0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007bb8:	4916      	ldr	r1, [pc, #88]	; (8007c14 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d00d      	beq.n	8007be6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007bca:	4b12      	ldr	r3, [pc, #72]	; (8007c14 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007bcc:	691b      	ldr	r3, [r3, #16]
 8007bce:	4a11      	ldr	r2, [pc, #68]	; (8007c14 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007bd0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007bd4:	6113      	str	r3, [r2, #16]
 8007bd6:	4b0f      	ldr	r3, [pc, #60]	; (8007c14 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007bd8:	691a      	ldr	r2, [r3, #16]
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007be0:	490c      	ldr	r1, [pc, #48]	; (8007c14 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007be2:	4313      	orrs	r3, r2
 8007be4:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	da08      	bge.n	8007c00 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007bee:	4b09      	ldr	r3, [pc, #36]	; (8007c14 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bf2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bfa:	4906      	ldr	r1, [pc, #24]	; (8007c14 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8007c00:	7dbb      	ldrb	r3, [r7, #22]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d101      	bne.n	8007c0a <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 8007c06:	2300      	movs	r3, #0
 8007c08:	e000      	b.n	8007c0c <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 8007c0a:	2301      	movs	r3, #1
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	3718      	adds	r7, #24
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}
 8007c14:	58024400 	.word	0x58024400

08007c18 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007c1c:	f7ff f870 	bl	8006d00 <HAL_RCC_GetHCLKFreq>
 8007c20:	4601      	mov	r1, r0
 8007c22:	4b06      	ldr	r3, [pc, #24]	; (8007c3c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007c24:	6a1b      	ldr	r3, [r3, #32]
 8007c26:	091b      	lsrs	r3, r3, #4
 8007c28:	f003 0307 	and.w	r3, r3, #7
 8007c2c:	4a04      	ldr	r2, [pc, #16]	; (8007c40 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007c2e:	5cd3      	ldrb	r3, [r2, r3]
 8007c30:	f003 031f 	and.w	r3, r3, #31
 8007c34:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	bd80      	pop	{r7, pc}
 8007c3c:	58024400 	.word	0x58024400
 8007c40:	080200cc 	.word	0x080200cc

08007c44 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007c44:	b480      	push	{r7}
 8007c46:	b089      	sub	sp, #36	; 0x24
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007c4c:	4b9d      	ldr	r3, [pc, #628]	; (8007ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c50:	f003 0303 	and.w	r3, r3, #3
 8007c54:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007c56:	4b9b      	ldr	r3, [pc, #620]	; (8007ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c5a:	0b1b      	lsrs	r3, r3, #12
 8007c5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007c60:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007c62:	4b98      	ldr	r3, [pc, #608]	; (8007ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c66:	091b      	lsrs	r3, r3, #4
 8007c68:	f003 0301 	and.w	r3, r3, #1
 8007c6c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007c6e:	4b95      	ldr	r3, [pc, #596]	; (8007ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c72:	08db      	lsrs	r3, r3, #3
 8007c74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007c78:	693a      	ldr	r2, [r7, #16]
 8007c7a:	fb02 f303 	mul.w	r3, r2, r3
 8007c7e:	ee07 3a90 	vmov	s15, r3
 8007c82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c86:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007c8a:	697b      	ldr	r3, [r7, #20]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	f000 810a 	beq.w	8007ea6 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8007c92:	69bb      	ldr	r3, [r7, #24]
 8007c94:	2b01      	cmp	r3, #1
 8007c96:	d05a      	beq.n	8007d4e <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8007c98:	2b01      	cmp	r3, #1
 8007c9a:	d302      	bcc.n	8007ca2 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8007c9c:	2b02      	cmp	r3, #2
 8007c9e:	d078      	beq.n	8007d92 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8007ca0:	e099      	b.n	8007dd6 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007ca2:	4b88      	ldr	r3, [pc, #544]	; (8007ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f003 0320 	and.w	r3, r3, #32
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d02d      	beq.n	8007d0a <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007cae:	4b85      	ldr	r3, [pc, #532]	; (8007ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	08db      	lsrs	r3, r3, #3
 8007cb4:	f003 0303 	and.w	r3, r3, #3
 8007cb8:	4a83      	ldr	r2, [pc, #524]	; (8007ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8007cba:	fa22 f303 	lsr.w	r3, r2, r3
 8007cbe:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	ee07 3a90 	vmov	s15, r3
 8007cc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cca:	697b      	ldr	r3, [r7, #20]
 8007ccc:	ee07 3a90 	vmov	s15, r3
 8007cd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cd4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cd8:	4b7a      	ldr	r3, [pc, #488]	; (8007ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ce0:	ee07 3a90 	vmov	s15, r3
 8007ce4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ce8:	ed97 6a03 	vldr	s12, [r7, #12]
 8007cec:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007ecc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007cf0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cf4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cf8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007cfc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d04:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007d08:	e087      	b.n	8007e1a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007d0a:	697b      	ldr	r3, [r7, #20]
 8007d0c:	ee07 3a90 	vmov	s15, r3
 8007d10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d14:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007ed0 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8007d18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d1c:	4b69      	ldr	r3, [pc, #420]	; (8007ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d24:	ee07 3a90 	vmov	s15, r3
 8007d28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d2c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d30:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007ecc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007d34:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d38:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d3c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d48:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007d4c:	e065      	b.n	8007e1a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007d4e:	697b      	ldr	r3, [r7, #20]
 8007d50:	ee07 3a90 	vmov	s15, r3
 8007d54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d58:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007ed4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8007d5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d60:	4b58      	ldr	r3, [pc, #352]	; (8007ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d68:	ee07 3a90 	vmov	s15, r3
 8007d6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d70:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d74:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007ecc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007d78:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d80:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d84:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d8c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007d90:	e043      	b.n	8007e1a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007d92:	697b      	ldr	r3, [r7, #20]
 8007d94:	ee07 3a90 	vmov	s15, r3
 8007d98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d9c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8007da0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007da4:	4b47      	ldr	r3, [pc, #284]	; (8007ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007da8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dac:	ee07 3a90 	vmov	s15, r3
 8007db0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007db4:	ed97 6a03 	vldr	s12, [r7, #12]
 8007db8:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007ecc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007dbc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007dc0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007dc4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007dc8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007dcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007dd0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007dd4:	e021      	b.n	8007e1a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007dd6:	697b      	ldr	r3, [r7, #20]
 8007dd8:	ee07 3a90 	vmov	s15, r3
 8007ddc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007de0:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8007ed4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8007de4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007de8:	4b36      	ldr	r3, [pc, #216]	; (8007ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007df0:	ee07 3a90 	vmov	s15, r3
 8007df4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007df8:	ed97 6a03 	vldr	s12, [r7, #12]
 8007dfc:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007ecc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007e00:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e04:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e08:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e14:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007e18:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007e1a:	4b2a      	ldr	r3, [pc, #168]	; (8007ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e1e:	0a5b      	lsrs	r3, r3, #9
 8007e20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e24:	ee07 3a90 	vmov	s15, r3
 8007e28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e2c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007e30:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e34:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e40:	ee17 2a90 	vmov	r2, s15
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007e48:	4b1e      	ldr	r3, [pc, #120]	; (8007ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e4c:	0c1b      	lsrs	r3, r3, #16
 8007e4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e52:	ee07 3a90 	vmov	s15, r3
 8007e56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007e5e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e62:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e6e:	ee17 2a90 	vmov	r2, s15
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007e76:	4b13      	ldr	r3, [pc, #76]	; (8007ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e7a:	0e1b      	lsrs	r3, r3, #24
 8007e7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e80:	ee07 3a90 	vmov	s15, r3
 8007e84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e88:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007e8c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e90:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e9c:	ee17 2a90 	vmov	r2, s15
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007ea4:	e008      	b.n	8007eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	609a      	str	r2, [r3, #8]
}
 8007eb8:	bf00      	nop
 8007eba:	3724      	adds	r7, #36	; 0x24
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec2:	4770      	bx	lr
 8007ec4:	58024400 	.word	0x58024400
 8007ec8:	03d09000 	.word	0x03d09000
 8007ecc:	46000000 	.word	0x46000000
 8007ed0:	4c742400 	.word	0x4c742400
 8007ed4:	4a742400 	.word	0x4a742400
 8007ed8:	4bbebc20 	.word	0x4bbebc20

08007edc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007edc:	b480      	push	{r7}
 8007ede:	b089      	sub	sp, #36	; 0x24
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007ee4:	4b9d      	ldr	r3, [pc, #628]	; (800815c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ee8:	f003 0303 	and.w	r3, r3, #3
 8007eec:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8007eee:	4b9b      	ldr	r3, [pc, #620]	; (800815c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ef2:	0d1b      	lsrs	r3, r3, #20
 8007ef4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ef8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007efa:	4b98      	ldr	r3, [pc, #608]	; (800815c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007efe:	0a1b      	lsrs	r3, r3, #8
 8007f00:	f003 0301 	and.w	r3, r3, #1
 8007f04:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007f06:	4b95      	ldr	r3, [pc, #596]	; (800815c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f0a:	08db      	lsrs	r3, r3, #3
 8007f0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007f10:	693a      	ldr	r2, [r7, #16]
 8007f12:	fb02 f303 	mul.w	r3, r2, r3
 8007f16:	ee07 3a90 	vmov	s15, r3
 8007f1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f1e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007f22:	697b      	ldr	r3, [r7, #20]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	f000 810a 	beq.w	800813e <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8007f2a:	69bb      	ldr	r3, [r7, #24]
 8007f2c:	2b01      	cmp	r3, #1
 8007f2e:	d05a      	beq.n	8007fe6 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8007f30:	2b01      	cmp	r3, #1
 8007f32:	d302      	bcc.n	8007f3a <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8007f34:	2b02      	cmp	r3, #2
 8007f36:	d078      	beq.n	800802a <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8007f38:	e099      	b.n	800806e <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007f3a:	4b88      	ldr	r3, [pc, #544]	; (800815c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f003 0320 	and.w	r3, r3, #32
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d02d      	beq.n	8007fa2 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007f46:	4b85      	ldr	r3, [pc, #532]	; (800815c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	08db      	lsrs	r3, r3, #3
 8007f4c:	f003 0303 	and.w	r3, r3, #3
 8007f50:	4a83      	ldr	r2, [pc, #524]	; (8008160 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8007f52:	fa22 f303 	lsr.w	r3, r2, r3
 8007f56:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	ee07 3a90 	vmov	s15, r3
 8007f5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f62:	697b      	ldr	r3, [r7, #20]
 8007f64:	ee07 3a90 	vmov	s15, r3
 8007f68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f70:	4b7a      	ldr	r3, [pc, #488]	; (800815c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f78:	ee07 3a90 	vmov	s15, r3
 8007f7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f80:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f84:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008164 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007f88:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f8c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f90:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f94:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f9c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007fa0:	e087      	b.n	80080b2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007fa2:	697b      	ldr	r3, [r7, #20]
 8007fa4:	ee07 3a90 	vmov	s15, r3
 8007fa8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fac:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008168 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8007fb0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fb4:	4b69      	ldr	r3, [pc, #420]	; (800815c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fbc:	ee07 3a90 	vmov	s15, r3
 8007fc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fc4:	ed97 6a03 	vldr	s12, [r7, #12]
 8007fc8:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008164 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007fcc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fd0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fd4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007fd8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fe0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007fe4:	e065      	b.n	80080b2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	ee07 3a90 	vmov	s15, r3
 8007fec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ff0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800816c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8007ff4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ff8:	4b58      	ldr	r3, [pc, #352]	; (800815c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ffc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008000:	ee07 3a90 	vmov	s15, r3
 8008004:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008008:	ed97 6a03 	vldr	s12, [r7, #12]
 800800c:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008164 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008010:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008014:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008018:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800801c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008020:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008024:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008028:	e043      	b.n	80080b2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800802a:	697b      	ldr	r3, [r7, #20]
 800802c:	ee07 3a90 	vmov	s15, r3
 8008030:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008034:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008170 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8008038:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800803c:	4b47      	ldr	r3, [pc, #284]	; (800815c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800803e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008040:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008044:	ee07 3a90 	vmov	s15, r3
 8008048:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800804c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008050:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008164 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008054:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008058:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800805c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008060:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008064:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008068:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800806c:	e021      	b.n	80080b2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800806e:	697b      	ldr	r3, [r7, #20]
 8008070:	ee07 3a90 	vmov	s15, r3
 8008074:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008078:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800816c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800807c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008080:	4b36      	ldr	r3, [pc, #216]	; (800815c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008084:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008088:	ee07 3a90 	vmov	s15, r3
 800808c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008090:	ed97 6a03 	vldr	s12, [r7, #12]
 8008094:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008164 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008098:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800809c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80080a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080ac:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80080b0:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80080b2:	4b2a      	ldr	r3, [pc, #168]	; (800815c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80080b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080b6:	0a5b      	lsrs	r3, r3, #9
 80080b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080bc:	ee07 3a90 	vmov	s15, r3
 80080c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80080c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80080cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80080d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80080d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80080d8:	ee17 2a90 	vmov	r2, s15
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80080e0:	4b1e      	ldr	r3, [pc, #120]	; (800815c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80080e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080e4:	0c1b      	lsrs	r3, r3, #16
 80080e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080ea:	ee07 3a90 	vmov	s15, r3
 80080ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80080f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80080fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80080fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008102:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008106:	ee17 2a90 	vmov	r2, s15
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800810e:	4b13      	ldr	r3, [pc, #76]	; (800815c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008112:	0e1b      	lsrs	r3, r3, #24
 8008114:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008118:	ee07 3a90 	vmov	s15, r3
 800811c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008120:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008124:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008128:	edd7 6a07 	vldr	s13, [r7, #28]
 800812c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008130:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008134:	ee17 2a90 	vmov	r2, s15
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800813c:	e008      	b.n	8008150 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2200      	movs	r2, #0
 8008142:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2200      	movs	r2, #0
 8008148:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2200      	movs	r2, #0
 800814e:	609a      	str	r2, [r3, #8]
}
 8008150:	bf00      	nop
 8008152:	3724      	adds	r7, #36	; 0x24
 8008154:	46bd      	mov	sp, r7
 8008156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815a:	4770      	bx	lr
 800815c:	58024400 	.word	0x58024400
 8008160:	03d09000 	.word	0x03d09000
 8008164:	46000000 	.word	0x46000000
 8008168:	4c742400 	.word	0x4c742400
 800816c:	4a742400 	.word	0x4a742400
 8008170:	4bbebc20 	.word	0x4bbebc20

08008174 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b084      	sub	sp, #16
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
 800817c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800817e:	2300      	movs	r3, #0
 8008180:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008182:	4b53      	ldr	r3, [pc, #332]	; (80082d0 <RCCEx_PLL2_Config+0x15c>)
 8008184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008186:	f003 0303 	and.w	r3, r3, #3
 800818a:	2b03      	cmp	r3, #3
 800818c:	d101      	bne.n	8008192 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800818e:	2301      	movs	r3, #1
 8008190:	e099      	b.n	80082c6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008192:	4b4f      	ldr	r3, [pc, #316]	; (80082d0 <RCCEx_PLL2_Config+0x15c>)
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	4a4e      	ldr	r2, [pc, #312]	; (80082d0 <RCCEx_PLL2_Config+0x15c>)
 8008198:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800819c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800819e:	f7f9 fddb 	bl	8001d58 <HAL_GetTick>
 80081a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80081a4:	e008      	b.n	80081b8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80081a6:	f7f9 fdd7 	bl	8001d58 <HAL_GetTick>
 80081aa:	4602      	mov	r2, r0
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	1ad3      	subs	r3, r2, r3
 80081b0:	2b02      	cmp	r3, #2
 80081b2:	d901      	bls.n	80081b8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80081b4:	2303      	movs	r3, #3
 80081b6:	e086      	b.n	80082c6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80081b8:	4b45      	ldr	r3, [pc, #276]	; (80082d0 <RCCEx_PLL2_Config+0x15c>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d1f0      	bne.n	80081a6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80081c4:	4b42      	ldr	r3, [pc, #264]	; (80082d0 <RCCEx_PLL2_Config+0x15c>)
 80081c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081c8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	031b      	lsls	r3, r3, #12
 80081d2:	493f      	ldr	r1, [pc, #252]	; (80082d0 <RCCEx_PLL2_Config+0x15c>)
 80081d4:	4313      	orrs	r3, r2
 80081d6:	628b      	str	r3, [r1, #40]	; 0x28
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	685b      	ldr	r3, [r3, #4]
 80081dc:	3b01      	subs	r3, #1
 80081de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	689b      	ldr	r3, [r3, #8]
 80081e6:	3b01      	subs	r3, #1
 80081e8:	025b      	lsls	r3, r3, #9
 80081ea:	b29b      	uxth	r3, r3
 80081ec:	431a      	orrs	r2, r3
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	68db      	ldr	r3, [r3, #12]
 80081f2:	3b01      	subs	r3, #1
 80081f4:	041b      	lsls	r3, r3, #16
 80081f6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80081fa:	431a      	orrs	r2, r3
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	691b      	ldr	r3, [r3, #16]
 8008200:	3b01      	subs	r3, #1
 8008202:	061b      	lsls	r3, r3, #24
 8008204:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008208:	4931      	ldr	r1, [pc, #196]	; (80082d0 <RCCEx_PLL2_Config+0x15c>)
 800820a:	4313      	orrs	r3, r2
 800820c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800820e:	4b30      	ldr	r3, [pc, #192]	; (80082d0 <RCCEx_PLL2_Config+0x15c>)
 8008210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008212:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	695b      	ldr	r3, [r3, #20]
 800821a:	492d      	ldr	r1, [pc, #180]	; (80082d0 <RCCEx_PLL2_Config+0x15c>)
 800821c:	4313      	orrs	r3, r2
 800821e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008220:	4b2b      	ldr	r3, [pc, #172]	; (80082d0 <RCCEx_PLL2_Config+0x15c>)
 8008222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008224:	f023 0220 	bic.w	r2, r3, #32
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	699b      	ldr	r3, [r3, #24]
 800822c:	4928      	ldr	r1, [pc, #160]	; (80082d0 <RCCEx_PLL2_Config+0x15c>)
 800822e:	4313      	orrs	r3, r2
 8008230:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008232:	4b27      	ldr	r3, [pc, #156]	; (80082d0 <RCCEx_PLL2_Config+0x15c>)
 8008234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008236:	4a26      	ldr	r2, [pc, #152]	; (80082d0 <RCCEx_PLL2_Config+0x15c>)
 8008238:	f023 0310 	bic.w	r3, r3, #16
 800823c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800823e:	4b24      	ldr	r3, [pc, #144]	; (80082d0 <RCCEx_PLL2_Config+0x15c>)
 8008240:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008242:	4b24      	ldr	r3, [pc, #144]	; (80082d4 <RCCEx_PLL2_Config+0x160>)
 8008244:	4013      	ands	r3, r2
 8008246:	687a      	ldr	r2, [r7, #4]
 8008248:	69d2      	ldr	r2, [r2, #28]
 800824a:	00d2      	lsls	r2, r2, #3
 800824c:	4920      	ldr	r1, [pc, #128]	; (80082d0 <RCCEx_PLL2_Config+0x15c>)
 800824e:	4313      	orrs	r3, r2
 8008250:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008252:	4b1f      	ldr	r3, [pc, #124]	; (80082d0 <RCCEx_PLL2_Config+0x15c>)
 8008254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008256:	4a1e      	ldr	r2, [pc, #120]	; (80082d0 <RCCEx_PLL2_Config+0x15c>)
 8008258:	f043 0310 	orr.w	r3, r3, #16
 800825c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d106      	bne.n	8008272 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008264:	4b1a      	ldr	r3, [pc, #104]	; (80082d0 <RCCEx_PLL2_Config+0x15c>)
 8008266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008268:	4a19      	ldr	r2, [pc, #100]	; (80082d0 <RCCEx_PLL2_Config+0x15c>)
 800826a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800826e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008270:	e00f      	b.n	8008292 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	2b01      	cmp	r3, #1
 8008276:	d106      	bne.n	8008286 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008278:	4b15      	ldr	r3, [pc, #84]	; (80082d0 <RCCEx_PLL2_Config+0x15c>)
 800827a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800827c:	4a14      	ldr	r2, [pc, #80]	; (80082d0 <RCCEx_PLL2_Config+0x15c>)
 800827e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008282:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008284:	e005      	b.n	8008292 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008286:	4b12      	ldr	r3, [pc, #72]	; (80082d0 <RCCEx_PLL2_Config+0x15c>)
 8008288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800828a:	4a11      	ldr	r2, [pc, #68]	; (80082d0 <RCCEx_PLL2_Config+0x15c>)
 800828c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008290:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008292:	4b0f      	ldr	r3, [pc, #60]	; (80082d0 <RCCEx_PLL2_Config+0x15c>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	4a0e      	ldr	r2, [pc, #56]	; (80082d0 <RCCEx_PLL2_Config+0x15c>)
 8008298:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800829c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800829e:	f7f9 fd5b 	bl	8001d58 <HAL_GetTick>
 80082a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80082a4:	e008      	b.n	80082b8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80082a6:	f7f9 fd57 	bl	8001d58 <HAL_GetTick>
 80082aa:	4602      	mov	r2, r0
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	1ad3      	subs	r3, r2, r3
 80082b0:	2b02      	cmp	r3, #2
 80082b2:	d901      	bls.n	80082b8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80082b4:	2303      	movs	r3, #3
 80082b6:	e006      	b.n	80082c6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80082b8:	4b05      	ldr	r3, [pc, #20]	; (80082d0 <RCCEx_PLL2_Config+0x15c>)
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d0f0      	beq.n	80082a6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80082c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	3710      	adds	r7, #16
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}
 80082ce:	bf00      	nop
 80082d0:	58024400 	.word	0x58024400
 80082d4:	ffff0007 	.word	0xffff0007

080082d8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b084      	sub	sp, #16
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
 80082e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80082e2:	2300      	movs	r3, #0
 80082e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80082e6:	4b53      	ldr	r3, [pc, #332]	; (8008434 <RCCEx_PLL3_Config+0x15c>)
 80082e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082ea:	f003 0303 	and.w	r3, r3, #3
 80082ee:	2b03      	cmp	r3, #3
 80082f0:	d101      	bne.n	80082f6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80082f2:	2301      	movs	r3, #1
 80082f4:	e099      	b.n	800842a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80082f6:	4b4f      	ldr	r3, [pc, #316]	; (8008434 <RCCEx_PLL3_Config+0x15c>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	4a4e      	ldr	r2, [pc, #312]	; (8008434 <RCCEx_PLL3_Config+0x15c>)
 80082fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008300:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008302:	f7f9 fd29 	bl	8001d58 <HAL_GetTick>
 8008306:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008308:	e008      	b.n	800831c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800830a:	f7f9 fd25 	bl	8001d58 <HAL_GetTick>
 800830e:	4602      	mov	r2, r0
 8008310:	68bb      	ldr	r3, [r7, #8]
 8008312:	1ad3      	subs	r3, r2, r3
 8008314:	2b02      	cmp	r3, #2
 8008316:	d901      	bls.n	800831c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008318:	2303      	movs	r3, #3
 800831a:	e086      	b.n	800842a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800831c:	4b45      	ldr	r3, [pc, #276]	; (8008434 <RCCEx_PLL3_Config+0x15c>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008324:	2b00      	cmp	r3, #0
 8008326:	d1f0      	bne.n	800830a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008328:	4b42      	ldr	r3, [pc, #264]	; (8008434 <RCCEx_PLL3_Config+0x15c>)
 800832a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800832c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	051b      	lsls	r3, r3, #20
 8008336:	493f      	ldr	r1, [pc, #252]	; (8008434 <RCCEx_PLL3_Config+0x15c>)
 8008338:	4313      	orrs	r3, r2
 800833a:	628b      	str	r3, [r1, #40]	; 0x28
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	685b      	ldr	r3, [r3, #4]
 8008340:	3b01      	subs	r3, #1
 8008342:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	689b      	ldr	r3, [r3, #8]
 800834a:	3b01      	subs	r3, #1
 800834c:	025b      	lsls	r3, r3, #9
 800834e:	b29b      	uxth	r3, r3
 8008350:	431a      	orrs	r2, r3
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	68db      	ldr	r3, [r3, #12]
 8008356:	3b01      	subs	r3, #1
 8008358:	041b      	lsls	r3, r3, #16
 800835a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800835e:	431a      	orrs	r2, r3
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	691b      	ldr	r3, [r3, #16]
 8008364:	3b01      	subs	r3, #1
 8008366:	061b      	lsls	r3, r3, #24
 8008368:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800836c:	4931      	ldr	r1, [pc, #196]	; (8008434 <RCCEx_PLL3_Config+0x15c>)
 800836e:	4313      	orrs	r3, r2
 8008370:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008372:	4b30      	ldr	r3, [pc, #192]	; (8008434 <RCCEx_PLL3_Config+0x15c>)
 8008374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008376:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	695b      	ldr	r3, [r3, #20]
 800837e:	492d      	ldr	r1, [pc, #180]	; (8008434 <RCCEx_PLL3_Config+0x15c>)
 8008380:	4313      	orrs	r3, r2
 8008382:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008384:	4b2b      	ldr	r3, [pc, #172]	; (8008434 <RCCEx_PLL3_Config+0x15c>)
 8008386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008388:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	699b      	ldr	r3, [r3, #24]
 8008390:	4928      	ldr	r1, [pc, #160]	; (8008434 <RCCEx_PLL3_Config+0x15c>)
 8008392:	4313      	orrs	r3, r2
 8008394:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008396:	4b27      	ldr	r3, [pc, #156]	; (8008434 <RCCEx_PLL3_Config+0x15c>)
 8008398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800839a:	4a26      	ldr	r2, [pc, #152]	; (8008434 <RCCEx_PLL3_Config+0x15c>)
 800839c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80083a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80083a2:	4b24      	ldr	r3, [pc, #144]	; (8008434 <RCCEx_PLL3_Config+0x15c>)
 80083a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80083a6:	4b24      	ldr	r3, [pc, #144]	; (8008438 <RCCEx_PLL3_Config+0x160>)
 80083a8:	4013      	ands	r3, r2
 80083aa:	687a      	ldr	r2, [r7, #4]
 80083ac:	69d2      	ldr	r2, [r2, #28]
 80083ae:	00d2      	lsls	r2, r2, #3
 80083b0:	4920      	ldr	r1, [pc, #128]	; (8008434 <RCCEx_PLL3_Config+0x15c>)
 80083b2:	4313      	orrs	r3, r2
 80083b4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80083b6:	4b1f      	ldr	r3, [pc, #124]	; (8008434 <RCCEx_PLL3_Config+0x15c>)
 80083b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083ba:	4a1e      	ldr	r2, [pc, #120]	; (8008434 <RCCEx_PLL3_Config+0x15c>)
 80083bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80083c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d106      	bne.n	80083d6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80083c8:	4b1a      	ldr	r3, [pc, #104]	; (8008434 <RCCEx_PLL3_Config+0x15c>)
 80083ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083cc:	4a19      	ldr	r2, [pc, #100]	; (8008434 <RCCEx_PLL3_Config+0x15c>)
 80083ce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80083d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80083d4:	e00f      	b.n	80083f6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	2b01      	cmp	r3, #1
 80083da:	d106      	bne.n	80083ea <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80083dc:	4b15      	ldr	r3, [pc, #84]	; (8008434 <RCCEx_PLL3_Config+0x15c>)
 80083de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083e0:	4a14      	ldr	r2, [pc, #80]	; (8008434 <RCCEx_PLL3_Config+0x15c>)
 80083e2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80083e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80083e8:	e005      	b.n	80083f6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80083ea:	4b12      	ldr	r3, [pc, #72]	; (8008434 <RCCEx_PLL3_Config+0x15c>)
 80083ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083ee:	4a11      	ldr	r2, [pc, #68]	; (8008434 <RCCEx_PLL3_Config+0x15c>)
 80083f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80083f4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80083f6:	4b0f      	ldr	r3, [pc, #60]	; (8008434 <RCCEx_PLL3_Config+0x15c>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	4a0e      	ldr	r2, [pc, #56]	; (8008434 <RCCEx_PLL3_Config+0x15c>)
 80083fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008400:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008402:	f7f9 fca9 	bl	8001d58 <HAL_GetTick>
 8008406:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008408:	e008      	b.n	800841c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800840a:	f7f9 fca5 	bl	8001d58 <HAL_GetTick>
 800840e:	4602      	mov	r2, r0
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	1ad3      	subs	r3, r2, r3
 8008414:	2b02      	cmp	r3, #2
 8008416:	d901      	bls.n	800841c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008418:	2303      	movs	r3, #3
 800841a:	e006      	b.n	800842a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800841c:	4b05      	ldr	r3, [pc, #20]	; (8008434 <RCCEx_PLL3_Config+0x15c>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008424:	2b00      	cmp	r3, #0
 8008426:	d0f0      	beq.n	800840a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008428:	7bfb      	ldrb	r3, [r7, #15]
}
 800842a:	4618      	mov	r0, r3
 800842c:	3710      	adds	r7, #16
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}
 8008432:	bf00      	nop
 8008434:	58024400 	.word	0x58024400
 8008438:	ffff0007 	.word	0xffff0007

0800843c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b084      	sub	sp, #16
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008444:	2301      	movs	r3, #1
 8008446:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d067      	beq.n	800851e <HAL_RTC_Init+0xe2>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008454:	b2db      	uxtb	r3, r3
 8008456:	2b00      	cmp	r3, #0
 8008458:	d106      	bne.n	8008468 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2200      	movs	r2, #0
 800845e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	f7f8 fd34 	bl	8000ed0 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2202      	movs	r2, #2
 800846c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	22ca      	movs	r2, #202	; 0xca
 8008476:	625a      	str	r2, [r3, #36]	; 0x24
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	2253      	movs	r2, #83	; 0x53
 800847e:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	f000 f879 	bl	8008578 <RTC_EnterInitMode>
 8008486:	4603      	mov	r3, r0
 8008488:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 800848a:	7bfb      	ldrb	r3, [r7, #15]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d13b      	bne.n	8008508 <HAL_RTC_Init+0xcc>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	6899      	ldr	r1, [r3, #8]
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681a      	ldr	r2, [r3, #0]
 800849a:	4b23      	ldr	r3, [pc, #140]	; (8008528 <HAL_RTC_Init+0xec>)
 800849c:	400b      	ands	r3, r1
 800849e:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	6899      	ldr	r1, [r3, #8]
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	685a      	ldr	r2, [r3, #4]
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	691b      	ldr	r3, [r3, #16]
 80084ae:	431a      	orrs	r2, r3
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	699b      	ldr	r3, [r3, #24]
 80084b4:	431a      	orrs	r2, r3
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	430a      	orrs	r2, r1
 80084bc:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	689b      	ldr	r3, [r3, #8]
 80084c2:	0419      	lsls	r1, r3, #16
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	68da      	ldr	r2, [r3, #12]
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	430a      	orrs	r2, r1
 80084ce:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	f000 f881 	bl	80085d8 <RTC_ExitInitMode>
 80084d6:	4603      	mov	r3, r0
 80084d8:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 80084da:	7bfb      	ldrb	r3, [r7, #15]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d113      	bne.n	8008508 <HAL_RTC_Init+0xcc>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f022 0203 	bic.w	r2, r2, #3
 80084ee:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	69da      	ldr	r2, [r3, #28]
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	695b      	ldr	r3, [r3, #20]
 80084fe:	431a      	orrs	r2, r3
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	430a      	orrs	r2, r1
 8008506:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	22ff      	movs	r2, #255	; 0xff
 800850e:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8008510:	7bfb      	ldrb	r3, [r7, #15]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d103      	bne.n	800851e <HAL_RTC_Init+0xe2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2201      	movs	r2, #1
 800851a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800851e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008520:	4618      	mov	r0, r3
 8008522:	3710      	adds	r7, #16
 8008524:	46bd      	mov	sp, r7
 8008526:	bd80      	pop	{r7, pc}
 8008528:	ff8fffbf 	.word	0xff8fffbf

0800852c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b084      	sub	sp, #16
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	68da      	ldr	r2, [r3, #12]
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008542:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 8008544:	f7f9 fc08 	bl	8001d58 <HAL_GetTick>
 8008548:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800854a:	e009      	b.n	8008560 <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800854c:	f7f9 fc04 	bl	8001d58 <HAL_GetTick>
 8008550:	4602      	mov	r2, r0
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	1ad3      	subs	r3, r2, r3
 8008556:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800855a:	d901      	bls.n	8008560 <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 800855c:	2303      	movs	r3, #3
 800855e:	e007      	b.n	8008570 <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	68db      	ldr	r3, [r3, #12]
 8008566:	f003 0320 	and.w	r3, r3, #32
 800856a:	2b00      	cmp	r3, #0
 800856c:	d0ee      	beq.n	800854c <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 800856e:	2300      	movs	r3, #0
}
 8008570:	4618      	mov	r0, r3
 8008572:	3710      	adds	r7, #16
 8008574:	46bd      	mov	sp, r7
 8008576:	bd80      	pop	{r7, pc}

08008578 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b084      	sub	sp, #16
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008580:	2300      	movs	r3, #0
 8008582:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	68db      	ldr	r3, [r3, #12]
 800858a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800858e:	2b00      	cmp	r3, #0
 8008590:	d11d      	bne.n	80085ce <RTC_EnterInitMode+0x56>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800859a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800859c:	f7f9 fbdc 	bl	8001d58 <HAL_GetTick>
 80085a0:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80085a2:	e00d      	b.n	80085c0 <RTC_EnterInitMode+0x48>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80085a4:	f7f9 fbd8 	bl	8001d58 <HAL_GetTick>
 80085a8:	4602      	mov	r2, r0
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	1ad3      	subs	r3, r2, r3
 80085ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80085b2:	d905      	bls.n	80085c0 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80085b4:	2303      	movs	r3, #3
 80085b6:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2203      	movs	r2, #3
 80085bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	68db      	ldr	r3, [r3, #12]
 80085c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d0ea      	beq.n	80085a4 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 80085ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	3710      	adds	r7, #16
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bd80      	pop	{r7, pc}

080085d8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b084      	sub	sp, #16
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80085e0:	2300      	movs	r3, #0
 80085e2:	73fb      	strb	r3, [r7, #15]
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);

#elif defined(RTC_ISR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 80085e4:	4b1a      	ldr	r3, [pc, #104]	; (8008650 <RTC_ExitInitMode+0x78>)
 80085e6:	68db      	ldr	r3, [r3, #12]
 80085e8:	4a19      	ldr	r2, [pc, #100]	; (8008650 <RTC_ExitInitMode+0x78>)
 80085ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80085ee:	60d3      	str	r3, [r2, #12]

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80085f0:	4b17      	ldr	r3, [pc, #92]	; (8008650 <RTC_ExitInitMode+0x78>)
 80085f2:	689b      	ldr	r3, [r3, #8]
 80085f4:	f003 0320 	and.w	r3, r3, #32
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d10c      	bne.n	8008616 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80085fc:	6878      	ldr	r0, [r7, #4]
 80085fe:	f7ff ff95 	bl	800852c <HAL_RTC_WaitForSynchro>
 8008602:	4603      	mov	r3, r0
 8008604:	2b00      	cmp	r3, #0
 8008606:	d01e      	beq.n	8008646 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2203      	movs	r2, #3
 800860c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8008610:	2303      	movs	r3, #3
 8008612:	73fb      	strb	r3, [r7, #15]
 8008614:	e017      	b.n	8008646 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008616:	4b0e      	ldr	r3, [pc, #56]	; (8008650 <RTC_ExitInitMode+0x78>)
 8008618:	689b      	ldr	r3, [r3, #8]
 800861a:	4a0d      	ldr	r2, [pc, #52]	; (8008650 <RTC_ExitInitMode+0x78>)
 800861c:	f023 0320 	bic.w	r3, r3, #32
 8008620:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f7ff ff82 	bl	800852c <HAL_RTC_WaitForSynchro>
 8008628:	4603      	mov	r3, r0
 800862a:	2b00      	cmp	r3, #0
 800862c:	d005      	beq.n	800863a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2203      	movs	r2, #3
 8008632:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8008636:	2303      	movs	r3, #3
 8008638:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800863a:	4b05      	ldr	r3, [pc, #20]	; (8008650 <RTC_ExitInitMode+0x78>)
 800863c:	689b      	ldr	r3, [r3, #8]
 800863e:	4a04      	ldr	r2, [pc, #16]	; (8008650 <RTC_ExitInitMode+0x78>)
 8008640:	f043 0320 	orr.w	r3, r3, #32
 8008644:	6093      	str	r3, [r2, #8]
  }

  return status;
 8008646:	7bfb      	ldrb	r3, [r7, #15]
}
 8008648:	4618      	mov	r0, r3
 800864a:	3710      	adds	r7, #16
 800864c:	46bd      	mov	sp, r7
 800864e:	bd80      	pop	{r7, pc}
 8008650:	58004000 	.word	0x58004000

08008654 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b082      	sub	sp, #8
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d101      	bne.n	8008666 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008662:	2301      	movs	r3, #1
 8008664:	e049      	b.n	80086fa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800866c:	b2db      	uxtb	r3, r3
 800866e:	2b00      	cmp	r3, #0
 8008670:	d106      	bne.n	8008680 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2200      	movs	r2, #0
 8008676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f000 f841 	bl	8008702 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2202      	movs	r2, #2
 8008684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681a      	ldr	r2, [r3, #0]
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	3304      	adds	r3, #4
 8008690:	4619      	mov	r1, r3
 8008692:	4610      	mov	r0, r2
 8008694:	f000 f9be 	bl	8008a14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2201      	movs	r2, #1
 800869c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2201      	movs	r2, #1
 80086a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2201      	movs	r2, #1
 80086ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2201      	movs	r2, #1
 80086b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2201      	movs	r2, #1
 80086bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2201      	movs	r2, #1
 80086c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2201      	movs	r2, #1
 80086cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2201      	movs	r2, #1
 80086d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2201      	movs	r2, #1
 80086dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2201      	movs	r2, #1
 80086e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2201      	movs	r2, #1
 80086ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2201      	movs	r2, #1
 80086f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80086f8:	2300      	movs	r3, #0
}
 80086fa:	4618      	mov	r0, r3
 80086fc:	3708      	adds	r7, #8
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd80      	pop	{r7, pc}

08008702 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008702:	b480      	push	{r7}
 8008704:	b083      	sub	sp, #12
 8008706:	af00      	add	r7, sp, #0
 8008708:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800870a:	bf00      	nop
 800870c:	370c      	adds	r7, #12
 800870e:	46bd      	mov	sp, r7
 8008710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008714:	4770      	bx	lr
	...

08008718 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008718:	b480      	push	{r7}
 800871a:	b085      	sub	sp, #20
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008726:	b2db      	uxtb	r3, r3
 8008728:	2b01      	cmp	r3, #1
 800872a:	d001      	beq.n	8008730 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800872c:	2301      	movs	r3, #1
 800872e:	e021      	b.n	8008774 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2202      	movs	r2, #2
 8008734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	68da      	ldr	r2, [r3, #12]
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f042 0201 	orr.w	r2, r2, #1
 8008746:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	689a      	ldr	r2, [r3, #8]
 800874e:	4b0c      	ldr	r3, [pc, #48]	; (8008780 <HAL_TIM_Base_Start_IT+0x68>)
 8008750:	4013      	ands	r3, r2
 8008752:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	2b06      	cmp	r3, #6
 8008758:	d00b      	beq.n	8008772 <HAL_TIM_Base_Start_IT+0x5a>
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008760:	d007      	beq.n	8008772 <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	681a      	ldr	r2, [r3, #0]
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f042 0201 	orr.w	r2, r2, #1
 8008770:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008772:	2300      	movs	r3, #0
}
 8008774:	4618      	mov	r0, r3
 8008776:	3714      	adds	r7, #20
 8008778:	46bd      	mov	sp, r7
 800877a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877e:	4770      	bx	lr
 8008780:	00010007 	.word	0x00010007

08008784 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b082      	sub	sp, #8
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	691b      	ldr	r3, [r3, #16]
 8008792:	f003 0302 	and.w	r3, r3, #2
 8008796:	2b02      	cmp	r3, #2
 8008798:	d122      	bne.n	80087e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	68db      	ldr	r3, [r3, #12]
 80087a0:	f003 0302 	and.w	r3, r3, #2
 80087a4:	2b02      	cmp	r3, #2
 80087a6:	d11b      	bne.n	80087e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f06f 0202 	mvn.w	r2, #2
 80087b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2201      	movs	r2, #1
 80087b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	699b      	ldr	r3, [r3, #24]
 80087be:	f003 0303 	and.w	r3, r3, #3
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d003      	beq.n	80087ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f000 f905 	bl	80089d6 <HAL_TIM_IC_CaptureCallback>
 80087cc:	e005      	b.n	80087da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f000 f8f7 	bl	80089c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	f000 f908 	bl	80089ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2200      	movs	r2, #0
 80087de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	691b      	ldr	r3, [r3, #16]
 80087e6:	f003 0304 	and.w	r3, r3, #4
 80087ea:	2b04      	cmp	r3, #4
 80087ec:	d122      	bne.n	8008834 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	68db      	ldr	r3, [r3, #12]
 80087f4:	f003 0304 	and.w	r3, r3, #4
 80087f8:	2b04      	cmp	r3, #4
 80087fa:	d11b      	bne.n	8008834 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f06f 0204 	mvn.w	r2, #4
 8008804:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2202      	movs	r2, #2
 800880a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	699b      	ldr	r3, [r3, #24]
 8008812:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008816:	2b00      	cmp	r3, #0
 8008818:	d003      	beq.n	8008822 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f000 f8db 	bl	80089d6 <HAL_TIM_IC_CaptureCallback>
 8008820:	e005      	b.n	800882e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f000 f8cd 	bl	80089c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008828:	6878      	ldr	r0, [r7, #4]
 800882a:	f000 f8de 	bl	80089ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2200      	movs	r2, #0
 8008832:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	691b      	ldr	r3, [r3, #16]
 800883a:	f003 0308 	and.w	r3, r3, #8
 800883e:	2b08      	cmp	r3, #8
 8008840:	d122      	bne.n	8008888 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	68db      	ldr	r3, [r3, #12]
 8008848:	f003 0308 	and.w	r3, r3, #8
 800884c:	2b08      	cmp	r3, #8
 800884e:	d11b      	bne.n	8008888 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f06f 0208 	mvn.w	r2, #8
 8008858:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2204      	movs	r2, #4
 800885e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	69db      	ldr	r3, [r3, #28]
 8008866:	f003 0303 	and.w	r3, r3, #3
 800886a:	2b00      	cmp	r3, #0
 800886c:	d003      	beq.n	8008876 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800886e:	6878      	ldr	r0, [r7, #4]
 8008870:	f000 f8b1 	bl	80089d6 <HAL_TIM_IC_CaptureCallback>
 8008874:	e005      	b.n	8008882 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	f000 f8a3 	bl	80089c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f000 f8b4 	bl	80089ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2200      	movs	r2, #0
 8008886:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	691b      	ldr	r3, [r3, #16]
 800888e:	f003 0310 	and.w	r3, r3, #16
 8008892:	2b10      	cmp	r3, #16
 8008894:	d122      	bne.n	80088dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	68db      	ldr	r3, [r3, #12]
 800889c:	f003 0310 	and.w	r3, r3, #16
 80088a0:	2b10      	cmp	r3, #16
 80088a2:	d11b      	bne.n	80088dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f06f 0210 	mvn.w	r2, #16
 80088ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2208      	movs	r2, #8
 80088b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	69db      	ldr	r3, [r3, #28]
 80088ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d003      	beq.n	80088ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	f000 f887 	bl	80089d6 <HAL_TIM_IC_CaptureCallback>
 80088c8:	e005      	b.n	80088d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	f000 f879 	bl	80089c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	f000 f88a 	bl	80089ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2200      	movs	r2, #0
 80088da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	691b      	ldr	r3, [r3, #16]
 80088e2:	f003 0301 	and.w	r3, r3, #1
 80088e6:	2b01      	cmp	r3, #1
 80088e8:	d10e      	bne.n	8008908 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	68db      	ldr	r3, [r3, #12]
 80088f0:	f003 0301 	and.w	r3, r3, #1
 80088f4:	2b01      	cmp	r3, #1
 80088f6:	d107      	bne.n	8008908 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f06f 0201 	mvn.w	r2, #1
 8008900:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008902:	6878      	ldr	r0, [r7, #4]
 8008904:	f7f8 faa6 	bl	8000e54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	691b      	ldr	r3, [r3, #16]
 800890e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008912:	2b80      	cmp	r3, #128	; 0x80
 8008914:	d10e      	bne.n	8008934 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	68db      	ldr	r3, [r3, #12]
 800891c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008920:	2b80      	cmp	r3, #128	; 0x80
 8008922:	d107      	bne.n	8008934 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800892c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	f000 f914 	bl	8008b5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	691b      	ldr	r3, [r3, #16]
 800893a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800893e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008942:	d10e      	bne.n	8008962 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	68db      	ldr	r3, [r3, #12]
 800894a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800894e:	2b80      	cmp	r3, #128	; 0x80
 8008950:	d107      	bne.n	8008962 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800895a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	f000 f907 	bl	8008b70 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	691b      	ldr	r3, [r3, #16]
 8008968:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800896c:	2b40      	cmp	r3, #64	; 0x40
 800896e:	d10e      	bne.n	800898e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	68db      	ldr	r3, [r3, #12]
 8008976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800897a:	2b40      	cmp	r3, #64	; 0x40
 800897c:	d107      	bne.n	800898e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008986:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	f000 f838 	bl	80089fe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	691b      	ldr	r3, [r3, #16]
 8008994:	f003 0320 	and.w	r3, r3, #32
 8008998:	2b20      	cmp	r3, #32
 800899a:	d10e      	bne.n	80089ba <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	68db      	ldr	r3, [r3, #12]
 80089a2:	f003 0320 	and.w	r3, r3, #32
 80089a6:	2b20      	cmp	r3, #32
 80089a8:	d107      	bne.n	80089ba <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f06f 0220 	mvn.w	r2, #32
 80089b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80089b4:	6878      	ldr	r0, [r7, #4]
 80089b6:	f000 f8c7 	bl	8008b48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80089ba:	bf00      	nop
 80089bc:	3708      	adds	r7, #8
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}

080089c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80089c2:	b480      	push	{r7}
 80089c4:	b083      	sub	sp, #12
 80089c6:	af00      	add	r7, sp, #0
 80089c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80089ca:	bf00      	nop
 80089cc:	370c      	adds	r7, #12
 80089ce:	46bd      	mov	sp, r7
 80089d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d4:	4770      	bx	lr

080089d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80089d6:	b480      	push	{r7}
 80089d8:	b083      	sub	sp, #12
 80089da:	af00      	add	r7, sp, #0
 80089dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80089de:	bf00      	nop
 80089e0:	370c      	adds	r7, #12
 80089e2:	46bd      	mov	sp, r7
 80089e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e8:	4770      	bx	lr

080089ea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80089ea:	b480      	push	{r7}
 80089ec:	b083      	sub	sp, #12
 80089ee:	af00      	add	r7, sp, #0
 80089f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80089f2:	bf00      	nop
 80089f4:	370c      	adds	r7, #12
 80089f6:	46bd      	mov	sp, r7
 80089f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fc:	4770      	bx	lr

080089fe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80089fe:	b480      	push	{r7}
 8008a00:	b083      	sub	sp, #12
 8008a02:	af00      	add	r7, sp, #0
 8008a04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008a06:	bf00      	nop
 8008a08:	370c      	adds	r7, #12
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a10:	4770      	bx	lr
	...

08008a14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008a14:	b480      	push	{r7}
 8008a16:	b085      	sub	sp, #20
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
 8008a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	4a40      	ldr	r2, [pc, #256]	; (8008b28 <TIM_Base_SetConfig+0x114>)
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	d013      	beq.n	8008a54 <TIM_Base_SetConfig+0x40>
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a32:	d00f      	beq.n	8008a54 <TIM_Base_SetConfig+0x40>
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	4a3d      	ldr	r2, [pc, #244]	; (8008b2c <TIM_Base_SetConfig+0x118>)
 8008a38:	4293      	cmp	r3, r2
 8008a3a:	d00b      	beq.n	8008a54 <TIM_Base_SetConfig+0x40>
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	4a3c      	ldr	r2, [pc, #240]	; (8008b30 <TIM_Base_SetConfig+0x11c>)
 8008a40:	4293      	cmp	r3, r2
 8008a42:	d007      	beq.n	8008a54 <TIM_Base_SetConfig+0x40>
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	4a3b      	ldr	r2, [pc, #236]	; (8008b34 <TIM_Base_SetConfig+0x120>)
 8008a48:	4293      	cmp	r3, r2
 8008a4a:	d003      	beq.n	8008a54 <TIM_Base_SetConfig+0x40>
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	4a3a      	ldr	r2, [pc, #232]	; (8008b38 <TIM_Base_SetConfig+0x124>)
 8008a50:	4293      	cmp	r3, r2
 8008a52:	d108      	bne.n	8008a66 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	685b      	ldr	r3, [r3, #4]
 8008a60:	68fa      	ldr	r2, [r7, #12]
 8008a62:	4313      	orrs	r3, r2
 8008a64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	4a2f      	ldr	r2, [pc, #188]	; (8008b28 <TIM_Base_SetConfig+0x114>)
 8008a6a:	4293      	cmp	r3, r2
 8008a6c:	d01f      	beq.n	8008aae <TIM_Base_SetConfig+0x9a>
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a74:	d01b      	beq.n	8008aae <TIM_Base_SetConfig+0x9a>
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	4a2c      	ldr	r2, [pc, #176]	; (8008b2c <TIM_Base_SetConfig+0x118>)
 8008a7a:	4293      	cmp	r3, r2
 8008a7c:	d017      	beq.n	8008aae <TIM_Base_SetConfig+0x9a>
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	4a2b      	ldr	r2, [pc, #172]	; (8008b30 <TIM_Base_SetConfig+0x11c>)
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d013      	beq.n	8008aae <TIM_Base_SetConfig+0x9a>
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	4a2a      	ldr	r2, [pc, #168]	; (8008b34 <TIM_Base_SetConfig+0x120>)
 8008a8a:	4293      	cmp	r3, r2
 8008a8c:	d00f      	beq.n	8008aae <TIM_Base_SetConfig+0x9a>
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	4a29      	ldr	r2, [pc, #164]	; (8008b38 <TIM_Base_SetConfig+0x124>)
 8008a92:	4293      	cmp	r3, r2
 8008a94:	d00b      	beq.n	8008aae <TIM_Base_SetConfig+0x9a>
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	4a28      	ldr	r2, [pc, #160]	; (8008b3c <TIM_Base_SetConfig+0x128>)
 8008a9a:	4293      	cmp	r3, r2
 8008a9c:	d007      	beq.n	8008aae <TIM_Base_SetConfig+0x9a>
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	4a27      	ldr	r2, [pc, #156]	; (8008b40 <TIM_Base_SetConfig+0x12c>)
 8008aa2:	4293      	cmp	r3, r2
 8008aa4:	d003      	beq.n	8008aae <TIM_Base_SetConfig+0x9a>
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	4a26      	ldr	r2, [pc, #152]	; (8008b44 <TIM_Base_SetConfig+0x130>)
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	d108      	bne.n	8008ac0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ab4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	68db      	ldr	r3, [r3, #12]
 8008aba:	68fa      	ldr	r2, [r7, #12]
 8008abc:	4313      	orrs	r3, r2
 8008abe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	695b      	ldr	r3, [r3, #20]
 8008aca:	4313      	orrs	r3, r2
 8008acc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	68fa      	ldr	r2, [r7, #12]
 8008ad2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	689a      	ldr	r2, [r3, #8]
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	681a      	ldr	r2, [r3, #0]
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	4a10      	ldr	r2, [pc, #64]	; (8008b28 <TIM_Base_SetConfig+0x114>)
 8008ae8:	4293      	cmp	r3, r2
 8008aea:	d00f      	beq.n	8008b0c <TIM_Base_SetConfig+0xf8>
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	4a12      	ldr	r2, [pc, #72]	; (8008b38 <TIM_Base_SetConfig+0x124>)
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d00b      	beq.n	8008b0c <TIM_Base_SetConfig+0xf8>
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	4a11      	ldr	r2, [pc, #68]	; (8008b3c <TIM_Base_SetConfig+0x128>)
 8008af8:	4293      	cmp	r3, r2
 8008afa:	d007      	beq.n	8008b0c <TIM_Base_SetConfig+0xf8>
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	4a10      	ldr	r2, [pc, #64]	; (8008b40 <TIM_Base_SetConfig+0x12c>)
 8008b00:	4293      	cmp	r3, r2
 8008b02:	d003      	beq.n	8008b0c <TIM_Base_SetConfig+0xf8>
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	4a0f      	ldr	r2, [pc, #60]	; (8008b44 <TIM_Base_SetConfig+0x130>)
 8008b08:	4293      	cmp	r3, r2
 8008b0a:	d103      	bne.n	8008b14 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	691a      	ldr	r2, [r3, #16]
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2201      	movs	r2, #1
 8008b18:	615a      	str	r2, [r3, #20]
}
 8008b1a:	bf00      	nop
 8008b1c:	3714      	adds	r7, #20
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b24:	4770      	bx	lr
 8008b26:	bf00      	nop
 8008b28:	40010000 	.word	0x40010000
 8008b2c:	40000400 	.word	0x40000400
 8008b30:	40000800 	.word	0x40000800
 8008b34:	40000c00 	.word	0x40000c00
 8008b38:	40010400 	.word	0x40010400
 8008b3c:	40014000 	.word	0x40014000
 8008b40:	40014400 	.word	0x40014400
 8008b44:	40014800 	.word	0x40014800

08008b48 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008b48:	b480      	push	{r7}
 8008b4a:	b083      	sub	sp, #12
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008b50:	bf00      	nop
 8008b52:	370c      	adds	r7, #12
 8008b54:	46bd      	mov	sp, r7
 8008b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5a:	4770      	bx	lr

08008b5c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	b083      	sub	sp, #12
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008b64:	bf00      	nop
 8008b66:	370c      	adds	r7, #12
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6e:	4770      	bx	lr

08008b70 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008b70:	b480      	push	{r7}
 8008b72:	b083      	sub	sp, #12
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008b78:	bf00      	nop
 8008b7a:	370c      	adds	r7, #12
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b82:	4770      	bx	lr

08008b84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b082      	sub	sp, #8
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d101      	bne.n	8008b96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008b92:	2301      	movs	r3, #1
 8008b94:	e042      	b.n	8008c1c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d106      	bne.n	8008bae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f7f8 fc95 	bl	80014d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2224      	movs	r2, #36	; 0x24
 8008bb2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	681a      	ldr	r2, [r3, #0]
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f022 0201 	bic.w	r2, r2, #1
 8008bc4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008bc6:	6878      	ldr	r0, [r7, #4]
 8008bc8:	f000 f8c2 	bl	8008d50 <UART_SetConfig>
 8008bcc:	4603      	mov	r3, r0
 8008bce:	2b01      	cmp	r3, #1
 8008bd0:	d101      	bne.n	8008bd6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008bd2:	2301      	movs	r3, #1
 8008bd4:	e022      	b.n	8008c1c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d002      	beq.n	8008be4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	f000 fe66 	bl	80098b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	685a      	ldr	r2, [r3, #4]
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008bf2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	689a      	ldr	r2, [r3, #8]
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008c02:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	681a      	ldr	r2, [r3, #0]
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f042 0201 	orr.w	r2, r2, #1
 8008c12:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008c14:	6878      	ldr	r0, [r7, #4]
 8008c16:	f000 feed 	bl	80099f4 <UART_CheckIdleState>
 8008c1a:	4603      	mov	r3, r0
}
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	3708      	adds	r7, #8
 8008c20:	46bd      	mov	sp, r7
 8008c22:	bd80      	pop	{r7, pc}

08008c24 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b08a      	sub	sp, #40	; 0x28
 8008c28:	af02      	add	r7, sp, #8
 8008c2a:	60f8      	str	r0, [r7, #12]
 8008c2c:	60b9      	str	r1, [r7, #8]
 8008c2e:	603b      	str	r3, [r7, #0]
 8008c30:	4613      	mov	r3, r2
 8008c32:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008c3a:	2b20      	cmp	r3, #32
 8008c3c:	f040 8083 	bne.w	8008d46 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d002      	beq.n	8008c4c <HAL_UART_Transmit+0x28>
 8008c46:	88fb      	ldrh	r3, [r7, #6]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d101      	bne.n	8008c50 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	e07b      	b.n	8008d48 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008c56:	2b01      	cmp	r3, #1
 8008c58:	d101      	bne.n	8008c5e <HAL_UART_Transmit+0x3a>
 8008c5a:	2302      	movs	r3, #2
 8008c5c:	e074      	b.n	8008d48 <HAL_UART_Transmit+0x124>
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	2201      	movs	r2, #1
 8008c62:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	2200      	movs	r2, #0
 8008c6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	2221      	movs	r2, #33	; 0x21
 8008c72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8008c76:	f7f9 f86f 	bl	8001d58 <HAL_GetTick>
 8008c7a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	88fa      	ldrh	r2, [r7, #6]
 8008c80:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	88fa      	ldrh	r2, [r7, #6]
 8008c88:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	689b      	ldr	r3, [r3, #8]
 8008c90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c94:	d108      	bne.n	8008ca8 <HAL_UART_Transmit+0x84>
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	691b      	ldr	r3, [r3, #16]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d104      	bne.n	8008ca8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	61bb      	str	r3, [r7, #24]
 8008ca6:	e003      	b.n	8008cb0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8008ca8:	68bb      	ldr	r3, [r7, #8]
 8008caa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008cac:	2300      	movs	r3, #0
 8008cae:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8008cb8:	e02c      	b.n	8008d14 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	9300      	str	r3, [sp, #0]
 8008cbe:	697b      	ldr	r3, [r7, #20]
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	2180      	movs	r1, #128	; 0x80
 8008cc4:	68f8      	ldr	r0, [r7, #12]
 8008cc6:	f000 fedd 	bl	8009a84 <UART_WaitOnFlagUntilTimeout>
 8008cca:	4603      	mov	r3, r0
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d001      	beq.n	8008cd4 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8008cd0:	2303      	movs	r3, #3
 8008cd2:	e039      	b.n	8008d48 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8008cd4:	69fb      	ldr	r3, [r7, #28]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d10b      	bne.n	8008cf2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008cda:	69bb      	ldr	r3, [r7, #24]
 8008cdc:	881b      	ldrh	r3, [r3, #0]
 8008cde:	461a      	mov	r2, r3
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008ce8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008cea:	69bb      	ldr	r3, [r7, #24]
 8008cec:	3302      	adds	r3, #2
 8008cee:	61bb      	str	r3, [r7, #24]
 8008cf0:	e007      	b.n	8008d02 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008cf2:	69fb      	ldr	r3, [r7, #28]
 8008cf4:	781a      	ldrb	r2, [r3, #0]
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008cfc:	69fb      	ldr	r3, [r7, #28]
 8008cfe:	3301      	adds	r3, #1
 8008d00:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008d08:	b29b      	uxth	r3, r3
 8008d0a:	3b01      	subs	r3, #1
 8008d0c:	b29a      	uxth	r2, r3
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008d1a:	b29b      	uxth	r3, r3
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d1cc      	bne.n	8008cba <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	9300      	str	r3, [sp, #0]
 8008d24:	697b      	ldr	r3, [r7, #20]
 8008d26:	2200      	movs	r2, #0
 8008d28:	2140      	movs	r1, #64	; 0x40
 8008d2a:	68f8      	ldr	r0, [r7, #12]
 8008d2c:	f000 feaa 	bl	8009a84 <UART_WaitOnFlagUntilTimeout>
 8008d30:	4603      	mov	r3, r0
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d001      	beq.n	8008d3a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8008d36:	2303      	movs	r3, #3
 8008d38:	e006      	b.n	8008d48 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	2220      	movs	r2, #32
 8008d3e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8008d42:	2300      	movs	r3, #0
 8008d44:	e000      	b.n	8008d48 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8008d46:	2302      	movs	r3, #2
  }
}
 8008d48:	4618      	mov	r0, r3
 8008d4a:	3720      	adds	r7, #32
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bd80      	pop	{r7, pc}

08008d50 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008d50:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8008d54:	b08e      	sub	sp, #56	; 0x38
 8008d56:	af00      	add	r7, sp, #0
 8008d58:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	689a      	ldr	r2, [r3, #8]
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	691b      	ldr	r3, [r3, #16]
 8008d68:	431a      	orrs	r2, r3
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	695b      	ldr	r3, [r3, #20]
 8008d6e:	431a      	orrs	r2, r3
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	69db      	ldr	r3, [r3, #28]
 8008d74:	4313      	orrs	r3, r2
 8008d76:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d7e:	4313      	orrs	r3, r2
 8008d80:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	681a      	ldr	r2, [r3, #0]
 8008d88:	4bc1      	ldr	r3, [pc, #772]	; (8009090 <UART_SetConfig+0x340>)
 8008d8a:	4013      	ands	r3, r2
 8008d8c:	687a      	ldr	r2, [r7, #4]
 8008d8e:	6812      	ldr	r2, [r2, #0]
 8008d90:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008d92:	430b      	orrs	r3, r1
 8008d94:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	685b      	ldr	r3, [r3, #4]
 8008d9c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	68da      	ldr	r2, [r3, #12]
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	430a      	orrs	r2, r1
 8008daa:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	699b      	ldr	r3, [r3, #24]
 8008db0:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	4ab7      	ldr	r2, [pc, #732]	; (8009094 <UART_SetConfig+0x344>)
 8008db8:	4293      	cmp	r3, r2
 8008dba:	d004      	beq.n	8008dc6 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	6a1b      	ldr	r3, [r3, #32]
 8008dc0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008dc2:	4313      	orrs	r3, r2
 8008dc4:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	689a      	ldr	r2, [r3, #8]
 8008dcc:	4bb2      	ldr	r3, [pc, #712]	; (8009098 <UART_SetConfig+0x348>)
 8008dce:	4013      	ands	r3, r2
 8008dd0:	687a      	ldr	r2, [r7, #4]
 8008dd2:	6812      	ldr	r2, [r2, #0]
 8008dd4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008dd6:	430b      	orrs	r3, r1
 8008dd8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008de0:	f023 010f 	bic.w	r1, r3, #15
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	430a      	orrs	r2, r1
 8008dee:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	4aa9      	ldr	r2, [pc, #676]	; (800909c <UART_SetConfig+0x34c>)
 8008df6:	4293      	cmp	r3, r2
 8008df8:	d177      	bne.n	8008eea <UART_SetConfig+0x19a>
 8008dfa:	4ba9      	ldr	r3, [pc, #676]	; (80090a0 <UART_SetConfig+0x350>)
 8008dfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008dfe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008e02:	2b28      	cmp	r3, #40	; 0x28
 8008e04:	d86c      	bhi.n	8008ee0 <UART_SetConfig+0x190>
 8008e06:	a201      	add	r2, pc, #4	; (adr r2, 8008e0c <UART_SetConfig+0xbc>)
 8008e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e0c:	08008eb1 	.word	0x08008eb1
 8008e10:	08008ee1 	.word	0x08008ee1
 8008e14:	08008ee1 	.word	0x08008ee1
 8008e18:	08008ee1 	.word	0x08008ee1
 8008e1c:	08008ee1 	.word	0x08008ee1
 8008e20:	08008ee1 	.word	0x08008ee1
 8008e24:	08008ee1 	.word	0x08008ee1
 8008e28:	08008ee1 	.word	0x08008ee1
 8008e2c:	08008eb9 	.word	0x08008eb9
 8008e30:	08008ee1 	.word	0x08008ee1
 8008e34:	08008ee1 	.word	0x08008ee1
 8008e38:	08008ee1 	.word	0x08008ee1
 8008e3c:	08008ee1 	.word	0x08008ee1
 8008e40:	08008ee1 	.word	0x08008ee1
 8008e44:	08008ee1 	.word	0x08008ee1
 8008e48:	08008ee1 	.word	0x08008ee1
 8008e4c:	08008ec1 	.word	0x08008ec1
 8008e50:	08008ee1 	.word	0x08008ee1
 8008e54:	08008ee1 	.word	0x08008ee1
 8008e58:	08008ee1 	.word	0x08008ee1
 8008e5c:	08008ee1 	.word	0x08008ee1
 8008e60:	08008ee1 	.word	0x08008ee1
 8008e64:	08008ee1 	.word	0x08008ee1
 8008e68:	08008ee1 	.word	0x08008ee1
 8008e6c:	08008ec9 	.word	0x08008ec9
 8008e70:	08008ee1 	.word	0x08008ee1
 8008e74:	08008ee1 	.word	0x08008ee1
 8008e78:	08008ee1 	.word	0x08008ee1
 8008e7c:	08008ee1 	.word	0x08008ee1
 8008e80:	08008ee1 	.word	0x08008ee1
 8008e84:	08008ee1 	.word	0x08008ee1
 8008e88:	08008ee1 	.word	0x08008ee1
 8008e8c:	08008ed1 	.word	0x08008ed1
 8008e90:	08008ee1 	.word	0x08008ee1
 8008e94:	08008ee1 	.word	0x08008ee1
 8008e98:	08008ee1 	.word	0x08008ee1
 8008e9c:	08008ee1 	.word	0x08008ee1
 8008ea0:	08008ee1 	.word	0x08008ee1
 8008ea4:	08008ee1 	.word	0x08008ee1
 8008ea8:	08008ee1 	.word	0x08008ee1
 8008eac:	08008ed9 	.word	0x08008ed9
 8008eb0:	2301      	movs	r3, #1
 8008eb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008eb6:	e233      	b.n	8009320 <UART_SetConfig+0x5d0>
 8008eb8:	2304      	movs	r3, #4
 8008eba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ebe:	e22f      	b.n	8009320 <UART_SetConfig+0x5d0>
 8008ec0:	2308      	movs	r3, #8
 8008ec2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ec6:	e22b      	b.n	8009320 <UART_SetConfig+0x5d0>
 8008ec8:	2310      	movs	r3, #16
 8008eca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ece:	e227      	b.n	8009320 <UART_SetConfig+0x5d0>
 8008ed0:	2320      	movs	r3, #32
 8008ed2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ed6:	e223      	b.n	8009320 <UART_SetConfig+0x5d0>
 8008ed8:	2340      	movs	r3, #64	; 0x40
 8008eda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ede:	e21f      	b.n	8009320 <UART_SetConfig+0x5d0>
 8008ee0:	2380      	movs	r3, #128	; 0x80
 8008ee2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ee6:	bf00      	nop
 8008ee8:	e21a      	b.n	8009320 <UART_SetConfig+0x5d0>
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	4a6d      	ldr	r2, [pc, #436]	; (80090a4 <UART_SetConfig+0x354>)
 8008ef0:	4293      	cmp	r3, r2
 8008ef2:	d132      	bne.n	8008f5a <UART_SetConfig+0x20a>
 8008ef4:	4b6a      	ldr	r3, [pc, #424]	; (80090a0 <UART_SetConfig+0x350>)
 8008ef6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ef8:	f003 0307 	and.w	r3, r3, #7
 8008efc:	2b05      	cmp	r3, #5
 8008efe:	d827      	bhi.n	8008f50 <UART_SetConfig+0x200>
 8008f00:	a201      	add	r2, pc, #4	; (adr r2, 8008f08 <UART_SetConfig+0x1b8>)
 8008f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f06:	bf00      	nop
 8008f08:	08008f21 	.word	0x08008f21
 8008f0c:	08008f29 	.word	0x08008f29
 8008f10:	08008f31 	.word	0x08008f31
 8008f14:	08008f39 	.word	0x08008f39
 8008f18:	08008f41 	.word	0x08008f41
 8008f1c:	08008f49 	.word	0x08008f49
 8008f20:	2300      	movs	r3, #0
 8008f22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f26:	e1fb      	b.n	8009320 <UART_SetConfig+0x5d0>
 8008f28:	2304      	movs	r3, #4
 8008f2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f2e:	e1f7      	b.n	8009320 <UART_SetConfig+0x5d0>
 8008f30:	2308      	movs	r3, #8
 8008f32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f36:	e1f3      	b.n	8009320 <UART_SetConfig+0x5d0>
 8008f38:	2310      	movs	r3, #16
 8008f3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f3e:	e1ef      	b.n	8009320 <UART_SetConfig+0x5d0>
 8008f40:	2320      	movs	r3, #32
 8008f42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f46:	e1eb      	b.n	8009320 <UART_SetConfig+0x5d0>
 8008f48:	2340      	movs	r3, #64	; 0x40
 8008f4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f4e:	e1e7      	b.n	8009320 <UART_SetConfig+0x5d0>
 8008f50:	2380      	movs	r3, #128	; 0x80
 8008f52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f56:	bf00      	nop
 8008f58:	e1e2      	b.n	8009320 <UART_SetConfig+0x5d0>
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	4a52      	ldr	r2, [pc, #328]	; (80090a8 <UART_SetConfig+0x358>)
 8008f60:	4293      	cmp	r3, r2
 8008f62:	d132      	bne.n	8008fca <UART_SetConfig+0x27a>
 8008f64:	4b4e      	ldr	r3, [pc, #312]	; (80090a0 <UART_SetConfig+0x350>)
 8008f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f68:	f003 0307 	and.w	r3, r3, #7
 8008f6c:	2b05      	cmp	r3, #5
 8008f6e:	d827      	bhi.n	8008fc0 <UART_SetConfig+0x270>
 8008f70:	a201      	add	r2, pc, #4	; (adr r2, 8008f78 <UART_SetConfig+0x228>)
 8008f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f76:	bf00      	nop
 8008f78:	08008f91 	.word	0x08008f91
 8008f7c:	08008f99 	.word	0x08008f99
 8008f80:	08008fa1 	.word	0x08008fa1
 8008f84:	08008fa9 	.word	0x08008fa9
 8008f88:	08008fb1 	.word	0x08008fb1
 8008f8c:	08008fb9 	.word	0x08008fb9
 8008f90:	2300      	movs	r3, #0
 8008f92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f96:	e1c3      	b.n	8009320 <UART_SetConfig+0x5d0>
 8008f98:	2304      	movs	r3, #4
 8008f9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f9e:	e1bf      	b.n	8009320 <UART_SetConfig+0x5d0>
 8008fa0:	2308      	movs	r3, #8
 8008fa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fa6:	e1bb      	b.n	8009320 <UART_SetConfig+0x5d0>
 8008fa8:	2310      	movs	r3, #16
 8008faa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fae:	e1b7      	b.n	8009320 <UART_SetConfig+0x5d0>
 8008fb0:	2320      	movs	r3, #32
 8008fb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fb6:	e1b3      	b.n	8009320 <UART_SetConfig+0x5d0>
 8008fb8:	2340      	movs	r3, #64	; 0x40
 8008fba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fbe:	e1af      	b.n	8009320 <UART_SetConfig+0x5d0>
 8008fc0:	2380      	movs	r3, #128	; 0x80
 8008fc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fc6:	bf00      	nop
 8008fc8:	e1aa      	b.n	8009320 <UART_SetConfig+0x5d0>
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	4a37      	ldr	r2, [pc, #220]	; (80090ac <UART_SetConfig+0x35c>)
 8008fd0:	4293      	cmp	r3, r2
 8008fd2:	d132      	bne.n	800903a <UART_SetConfig+0x2ea>
 8008fd4:	4b32      	ldr	r3, [pc, #200]	; (80090a0 <UART_SetConfig+0x350>)
 8008fd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fd8:	f003 0307 	and.w	r3, r3, #7
 8008fdc:	2b05      	cmp	r3, #5
 8008fde:	d827      	bhi.n	8009030 <UART_SetConfig+0x2e0>
 8008fe0:	a201      	add	r2, pc, #4	; (adr r2, 8008fe8 <UART_SetConfig+0x298>)
 8008fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fe6:	bf00      	nop
 8008fe8:	08009001 	.word	0x08009001
 8008fec:	08009009 	.word	0x08009009
 8008ff0:	08009011 	.word	0x08009011
 8008ff4:	08009019 	.word	0x08009019
 8008ff8:	08009021 	.word	0x08009021
 8008ffc:	08009029 	.word	0x08009029
 8009000:	2300      	movs	r3, #0
 8009002:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009006:	e18b      	b.n	8009320 <UART_SetConfig+0x5d0>
 8009008:	2304      	movs	r3, #4
 800900a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800900e:	e187      	b.n	8009320 <UART_SetConfig+0x5d0>
 8009010:	2308      	movs	r3, #8
 8009012:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009016:	e183      	b.n	8009320 <UART_SetConfig+0x5d0>
 8009018:	2310      	movs	r3, #16
 800901a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800901e:	e17f      	b.n	8009320 <UART_SetConfig+0x5d0>
 8009020:	2320      	movs	r3, #32
 8009022:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009026:	e17b      	b.n	8009320 <UART_SetConfig+0x5d0>
 8009028:	2340      	movs	r3, #64	; 0x40
 800902a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800902e:	e177      	b.n	8009320 <UART_SetConfig+0x5d0>
 8009030:	2380      	movs	r3, #128	; 0x80
 8009032:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009036:	bf00      	nop
 8009038:	e172      	b.n	8009320 <UART_SetConfig+0x5d0>
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	4a1c      	ldr	r2, [pc, #112]	; (80090b0 <UART_SetConfig+0x360>)
 8009040:	4293      	cmp	r3, r2
 8009042:	d144      	bne.n	80090ce <UART_SetConfig+0x37e>
 8009044:	4b16      	ldr	r3, [pc, #88]	; (80090a0 <UART_SetConfig+0x350>)
 8009046:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009048:	f003 0307 	and.w	r3, r3, #7
 800904c:	2b05      	cmp	r3, #5
 800904e:	d839      	bhi.n	80090c4 <UART_SetConfig+0x374>
 8009050:	a201      	add	r2, pc, #4	; (adr r2, 8009058 <UART_SetConfig+0x308>)
 8009052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009056:	bf00      	nop
 8009058:	08009071 	.word	0x08009071
 800905c:	08009079 	.word	0x08009079
 8009060:	08009081 	.word	0x08009081
 8009064:	08009089 	.word	0x08009089
 8009068:	080090b5 	.word	0x080090b5
 800906c:	080090bd 	.word	0x080090bd
 8009070:	2300      	movs	r3, #0
 8009072:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009076:	e153      	b.n	8009320 <UART_SetConfig+0x5d0>
 8009078:	2304      	movs	r3, #4
 800907a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800907e:	e14f      	b.n	8009320 <UART_SetConfig+0x5d0>
 8009080:	2308      	movs	r3, #8
 8009082:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009086:	e14b      	b.n	8009320 <UART_SetConfig+0x5d0>
 8009088:	2310      	movs	r3, #16
 800908a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800908e:	e147      	b.n	8009320 <UART_SetConfig+0x5d0>
 8009090:	cfff69f3 	.word	0xcfff69f3
 8009094:	58000c00 	.word	0x58000c00
 8009098:	11fff4ff 	.word	0x11fff4ff
 800909c:	40011000 	.word	0x40011000
 80090a0:	58024400 	.word	0x58024400
 80090a4:	40004400 	.word	0x40004400
 80090a8:	40004800 	.word	0x40004800
 80090ac:	40004c00 	.word	0x40004c00
 80090b0:	40005000 	.word	0x40005000
 80090b4:	2320      	movs	r3, #32
 80090b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090ba:	e131      	b.n	8009320 <UART_SetConfig+0x5d0>
 80090bc:	2340      	movs	r3, #64	; 0x40
 80090be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090c2:	e12d      	b.n	8009320 <UART_SetConfig+0x5d0>
 80090c4:	2380      	movs	r3, #128	; 0x80
 80090c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090ca:	bf00      	nop
 80090cc:	e128      	b.n	8009320 <UART_SetConfig+0x5d0>
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	4ab6      	ldr	r2, [pc, #728]	; (80093ac <UART_SetConfig+0x65c>)
 80090d4:	4293      	cmp	r3, r2
 80090d6:	d178      	bne.n	80091ca <UART_SetConfig+0x47a>
 80090d8:	4bb5      	ldr	r3, [pc, #724]	; (80093b0 <UART_SetConfig+0x660>)
 80090da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80090e0:	2b28      	cmp	r3, #40	; 0x28
 80090e2:	d86d      	bhi.n	80091c0 <UART_SetConfig+0x470>
 80090e4:	a201      	add	r2, pc, #4	; (adr r2, 80090ec <UART_SetConfig+0x39c>)
 80090e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090ea:	bf00      	nop
 80090ec:	08009191 	.word	0x08009191
 80090f0:	080091c1 	.word	0x080091c1
 80090f4:	080091c1 	.word	0x080091c1
 80090f8:	080091c1 	.word	0x080091c1
 80090fc:	080091c1 	.word	0x080091c1
 8009100:	080091c1 	.word	0x080091c1
 8009104:	080091c1 	.word	0x080091c1
 8009108:	080091c1 	.word	0x080091c1
 800910c:	08009199 	.word	0x08009199
 8009110:	080091c1 	.word	0x080091c1
 8009114:	080091c1 	.word	0x080091c1
 8009118:	080091c1 	.word	0x080091c1
 800911c:	080091c1 	.word	0x080091c1
 8009120:	080091c1 	.word	0x080091c1
 8009124:	080091c1 	.word	0x080091c1
 8009128:	080091c1 	.word	0x080091c1
 800912c:	080091a1 	.word	0x080091a1
 8009130:	080091c1 	.word	0x080091c1
 8009134:	080091c1 	.word	0x080091c1
 8009138:	080091c1 	.word	0x080091c1
 800913c:	080091c1 	.word	0x080091c1
 8009140:	080091c1 	.word	0x080091c1
 8009144:	080091c1 	.word	0x080091c1
 8009148:	080091c1 	.word	0x080091c1
 800914c:	080091a9 	.word	0x080091a9
 8009150:	080091c1 	.word	0x080091c1
 8009154:	080091c1 	.word	0x080091c1
 8009158:	080091c1 	.word	0x080091c1
 800915c:	080091c1 	.word	0x080091c1
 8009160:	080091c1 	.word	0x080091c1
 8009164:	080091c1 	.word	0x080091c1
 8009168:	080091c1 	.word	0x080091c1
 800916c:	080091b1 	.word	0x080091b1
 8009170:	080091c1 	.word	0x080091c1
 8009174:	080091c1 	.word	0x080091c1
 8009178:	080091c1 	.word	0x080091c1
 800917c:	080091c1 	.word	0x080091c1
 8009180:	080091c1 	.word	0x080091c1
 8009184:	080091c1 	.word	0x080091c1
 8009188:	080091c1 	.word	0x080091c1
 800918c:	080091b9 	.word	0x080091b9
 8009190:	2301      	movs	r3, #1
 8009192:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009196:	e0c3      	b.n	8009320 <UART_SetConfig+0x5d0>
 8009198:	2304      	movs	r3, #4
 800919a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800919e:	e0bf      	b.n	8009320 <UART_SetConfig+0x5d0>
 80091a0:	2308      	movs	r3, #8
 80091a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091a6:	e0bb      	b.n	8009320 <UART_SetConfig+0x5d0>
 80091a8:	2310      	movs	r3, #16
 80091aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091ae:	e0b7      	b.n	8009320 <UART_SetConfig+0x5d0>
 80091b0:	2320      	movs	r3, #32
 80091b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091b6:	e0b3      	b.n	8009320 <UART_SetConfig+0x5d0>
 80091b8:	2340      	movs	r3, #64	; 0x40
 80091ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091be:	e0af      	b.n	8009320 <UART_SetConfig+0x5d0>
 80091c0:	2380      	movs	r3, #128	; 0x80
 80091c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091c6:	bf00      	nop
 80091c8:	e0aa      	b.n	8009320 <UART_SetConfig+0x5d0>
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	4a79      	ldr	r2, [pc, #484]	; (80093b4 <UART_SetConfig+0x664>)
 80091d0:	4293      	cmp	r3, r2
 80091d2:	d132      	bne.n	800923a <UART_SetConfig+0x4ea>
 80091d4:	4b76      	ldr	r3, [pc, #472]	; (80093b0 <UART_SetConfig+0x660>)
 80091d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091d8:	f003 0307 	and.w	r3, r3, #7
 80091dc:	2b05      	cmp	r3, #5
 80091de:	d827      	bhi.n	8009230 <UART_SetConfig+0x4e0>
 80091e0:	a201      	add	r2, pc, #4	; (adr r2, 80091e8 <UART_SetConfig+0x498>)
 80091e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091e6:	bf00      	nop
 80091e8:	08009201 	.word	0x08009201
 80091ec:	08009209 	.word	0x08009209
 80091f0:	08009211 	.word	0x08009211
 80091f4:	08009219 	.word	0x08009219
 80091f8:	08009221 	.word	0x08009221
 80091fc:	08009229 	.word	0x08009229
 8009200:	2300      	movs	r3, #0
 8009202:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009206:	e08b      	b.n	8009320 <UART_SetConfig+0x5d0>
 8009208:	2304      	movs	r3, #4
 800920a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800920e:	e087      	b.n	8009320 <UART_SetConfig+0x5d0>
 8009210:	2308      	movs	r3, #8
 8009212:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009216:	e083      	b.n	8009320 <UART_SetConfig+0x5d0>
 8009218:	2310      	movs	r3, #16
 800921a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800921e:	e07f      	b.n	8009320 <UART_SetConfig+0x5d0>
 8009220:	2320      	movs	r3, #32
 8009222:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009226:	e07b      	b.n	8009320 <UART_SetConfig+0x5d0>
 8009228:	2340      	movs	r3, #64	; 0x40
 800922a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800922e:	e077      	b.n	8009320 <UART_SetConfig+0x5d0>
 8009230:	2380      	movs	r3, #128	; 0x80
 8009232:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009236:	bf00      	nop
 8009238:	e072      	b.n	8009320 <UART_SetConfig+0x5d0>
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	4a5e      	ldr	r2, [pc, #376]	; (80093b8 <UART_SetConfig+0x668>)
 8009240:	4293      	cmp	r3, r2
 8009242:	d132      	bne.n	80092aa <UART_SetConfig+0x55a>
 8009244:	4b5a      	ldr	r3, [pc, #360]	; (80093b0 <UART_SetConfig+0x660>)
 8009246:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009248:	f003 0307 	and.w	r3, r3, #7
 800924c:	2b05      	cmp	r3, #5
 800924e:	d827      	bhi.n	80092a0 <UART_SetConfig+0x550>
 8009250:	a201      	add	r2, pc, #4	; (adr r2, 8009258 <UART_SetConfig+0x508>)
 8009252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009256:	bf00      	nop
 8009258:	08009271 	.word	0x08009271
 800925c:	08009279 	.word	0x08009279
 8009260:	08009281 	.word	0x08009281
 8009264:	08009289 	.word	0x08009289
 8009268:	08009291 	.word	0x08009291
 800926c:	08009299 	.word	0x08009299
 8009270:	2300      	movs	r3, #0
 8009272:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009276:	e053      	b.n	8009320 <UART_SetConfig+0x5d0>
 8009278:	2304      	movs	r3, #4
 800927a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800927e:	e04f      	b.n	8009320 <UART_SetConfig+0x5d0>
 8009280:	2308      	movs	r3, #8
 8009282:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009286:	e04b      	b.n	8009320 <UART_SetConfig+0x5d0>
 8009288:	2310      	movs	r3, #16
 800928a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800928e:	e047      	b.n	8009320 <UART_SetConfig+0x5d0>
 8009290:	2320      	movs	r3, #32
 8009292:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009296:	e043      	b.n	8009320 <UART_SetConfig+0x5d0>
 8009298:	2340      	movs	r3, #64	; 0x40
 800929a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800929e:	e03f      	b.n	8009320 <UART_SetConfig+0x5d0>
 80092a0:	2380      	movs	r3, #128	; 0x80
 80092a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092a6:	bf00      	nop
 80092a8:	e03a      	b.n	8009320 <UART_SetConfig+0x5d0>
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	4a43      	ldr	r2, [pc, #268]	; (80093bc <UART_SetConfig+0x66c>)
 80092b0:	4293      	cmp	r3, r2
 80092b2:	d132      	bne.n	800931a <UART_SetConfig+0x5ca>
 80092b4:	4b3e      	ldr	r3, [pc, #248]	; (80093b0 <UART_SetConfig+0x660>)
 80092b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092b8:	f003 0307 	and.w	r3, r3, #7
 80092bc:	2b05      	cmp	r3, #5
 80092be:	d827      	bhi.n	8009310 <UART_SetConfig+0x5c0>
 80092c0:	a201      	add	r2, pc, #4	; (adr r2, 80092c8 <UART_SetConfig+0x578>)
 80092c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092c6:	bf00      	nop
 80092c8:	080092e1 	.word	0x080092e1
 80092cc:	080092e9 	.word	0x080092e9
 80092d0:	080092f1 	.word	0x080092f1
 80092d4:	080092f9 	.word	0x080092f9
 80092d8:	08009301 	.word	0x08009301
 80092dc:	08009309 	.word	0x08009309
 80092e0:	2302      	movs	r3, #2
 80092e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092e6:	e01b      	b.n	8009320 <UART_SetConfig+0x5d0>
 80092e8:	2304      	movs	r3, #4
 80092ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092ee:	e017      	b.n	8009320 <UART_SetConfig+0x5d0>
 80092f0:	2308      	movs	r3, #8
 80092f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092f6:	e013      	b.n	8009320 <UART_SetConfig+0x5d0>
 80092f8:	2310      	movs	r3, #16
 80092fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092fe:	e00f      	b.n	8009320 <UART_SetConfig+0x5d0>
 8009300:	2320      	movs	r3, #32
 8009302:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009306:	e00b      	b.n	8009320 <UART_SetConfig+0x5d0>
 8009308:	2340      	movs	r3, #64	; 0x40
 800930a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800930e:	e007      	b.n	8009320 <UART_SetConfig+0x5d0>
 8009310:	2380      	movs	r3, #128	; 0x80
 8009312:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009316:	bf00      	nop
 8009318:	e002      	b.n	8009320 <UART_SetConfig+0x5d0>
 800931a:	2380      	movs	r3, #128	; 0x80
 800931c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	4a25      	ldr	r2, [pc, #148]	; (80093bc <UART_SetConfig+0x66c>)
 8009326:	4293      	cmp	r3, r2
 8009328:	f040 80b8 	bne.w	800949c <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800932c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009330:	2b08      	cmp	r3, #8
 8009332:	d019      	beq.n	8009368 <UART_SetConfig+0x618>
 8009334:	2b08      	cmp	r3, #8
 8009336:	dc04      	bgt.n	8009342 <UART_SetConfig+0x5f2>
 8009338:	2b02      	cmp	r3, #2
 800933a:	d009      	beq.n	8009350 <UART_SetConfig+0x600>
 800933c:	2b04      	cmp	r3, #4
 800933e:	d00b      	beq.n	8009358 <UART_SetConfig+0x608>
 8009340:	e042      	b.n	80093c8 <UART_SetConfig+0x678>
 8009342:	2b20      	cmp	r3, #32
 8009344:	d02b      	beq.n	800939e <UART_SetConfig+0x64e>
 8009346:	2b40      	cmp	r3, #64	; 0x40
 8009348:	d02c      	beq.n	80093a4 <UART_SetConfig+0x654>
 800934a:	2b10      	cmp	r3, #16
 800934c:	d014      	beq.n	8009378 <UART_SetConfig+0x628>
 800934e:	e03b      	b.n	80093c8 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009350:	f7fe fc62 	bl	8007c18 <HAL_RCCEx_GetD3PCLK1Freq>
 8009354:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009356:	e03d      	b.n	80093d4 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009358:	f107 0314 	add.w	r3, r7, #20
 800935c:	4618      	mov	r0, r3
 800935e:	f7fe fc71 	bl	8007c44 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009362:	69bb      	ldr	r3, [r7, #24]
 8009364:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009366:	e035      	b.n	80093d4 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009368:	f107 0308 	add.w	r3, r7, #8
 800936c:	4618      	mov	r0, r3
 800936e:	f7fe fdb5 	bl	8007edc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009376:	e02d      	b.n	80093d4 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009378:	4b0d      	ldr	r3, [pc, #52]	; (80093b0 <UART_SetConfig+0x660>)
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f003 0320 	and.w	r3, r3, #32
 8009380:	2b00      	cmp	r3, #0
 8009382:	d009      	beq.n	8009398 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009384:	4b0a      	ldr	r3, [pc, #40]	; (80093b0 <UART_SetConfig+0x660>)
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	08db      	lsrs	r3, r3, #3
 800938a:	f003 0303 	and.w	r3, r3, #3
 800938e:	4a0c      	ldr	r2, [pc, #48]	; (80093c0 <UART_SetConfig+0x670>)
 8009390:	fa22 f303 	lsr.w	r3, r2, r3
 8009394:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009396:	e01d      	b.n	80093d4 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 8009398:	4b09      	ldr	r3, [pc, #36]	; (80093c0 <UART_SetConfig+0x670>)
 800939a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800939c:	e01a      	b.n	80093d4 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800939e:	4b09      	ldr	r3, [pc, #36]	; (80093c4 <UART_SetConfig+0x674>)
 80093a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80093a2:	e017      	b.n	80093d4 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80093a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80093a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80093aa:	e013      	b.n	80093d4 <UART_SetConfig+0x684>
 80093ac:	40011400 	.word	0x40011400
 80093b0:	58024400 	.word	0x58024400
 80093b4:	40007800 	.word	0x40007800
 80093b8:	40007c00 	.word	0x40007c00
 80093bc:	58000c00 	.word	0x58000c00
 80093c0:	03d09000 	.word	0x03d09000
 80093c4:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 80093c8:	2300      	movs	r3, #0
 80093ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80093cc:	2301      	movs	r3, #1
 80093ce:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80093d2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80093d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	f000 824d 	beq.w	8009876 <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093e0:	4aad      	ldr	r2, [pc, #692]	; (8009698 <UART_SetConfig+0x948>)
 80093e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80093e6:	461a      	mov	r2, r3
 80093e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80093ee:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	685a      	ldr	r2, [r3, #4]
 80093f4:	4613      	mov	r3, r2
 80093f6:	005b      	lsls	r3, r3, #1
 80093f8:	4413      	add	r3, r2
 80093fa:	6a3a      	ldr	r2, [r7, #32]
 80093fc:	429a      	cmp	r2, r3
 80093fe:	d305      	bcc.n	800940c <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	685b      	ldr	r3, [r3, #4]
 8009404:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009406:	6a3a      	ldr	r2, [r7, #32]
 8009408:	429a      	cmp	r2, r3
 800940a:	d903      	bls.n	8009414 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 800940c:	2301      	movs	r3, #1
 800940e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009412:	e230      	b.n	8009876 <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009416:	4618      	mov	r0, r3
 8009418:	f04f 0100 	mov.w	r1, #0
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009420:	4a9d      	ldr	r2, [pc, #628]	; (8009698 <UART_SetConfig+0x948>)
 8009422:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009426:	b29b      	uxth	r3, r3
 8009428:	f04f 0400 	mov.w	r4, #0
 800942c:	461a      	mov	r2, r3
 800942e:	4623      	mov	r3, r4
 8009430:	f7f6 ffb8 	bl	80003a4 <__aeabi_uldivmod>
 8009434:	4603      	mov	r3, r0
 8009436:	460c      	mov	r4, r1
 8009438:	4619      	mov	r1, r3
 800943a:	4622      	mov	r2, r4
 800943c:	f04f 0300 	mov.w	r3, #0
 8009440:	f04f 0400 	mov.w	r4, #0
 8009444:	0214      	lsls	r4, r2, #8
 8009446:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800944a:	020b      	lsls	r3, r1, #8
 800944c:	687a      	ldr	r2, [r7, #4]
 800944e:	6852      	ldr	r2, [r2, #4]
 8009450:	0852      	lsrs	r2, r2, #1
 8009452:	4611      	mov	r1, r2
 8009454:	f04f 0200 	mov.w	r2, #0
 8009458:	eb13 0b01 	adds.w	fp, r3, r1
 800945c:	eb44 0c02 	adc.w	ip, r4, r2
 8009460:	4658      	mov	r0, fp
 8009462:	4661      	mov	r1, ip
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	685b      	ldr	r3, [r3, #4]
 8009468:	f04f 0400 	mov.w	r4, #0
 800946c:	461a      	mov	r2, r3
 800946e:	4623      	mov	r3, r4
 8009470:	f7f6 ff98 	bl	80003a4 <__aeabi_uldivmod>
 8009474:	4603      	mov	r3, r0
 8009476:	460c      	mov	r4, r1
 8009478:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800947a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800947c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009480:	d308      	bcc.n	8009494 <UART_SetConfig+0x744>
 8009482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009484:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009488:	d204      	bcs.n	8009494 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009490:	60da      	str	r2, [r3, #12]
 8009492:	e1f0      	b.n	8009876 <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 8009494:	2301      	movs	r3, #1
 8009496:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800949a:	e1ec      	b.n	8009876 <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	69db      	ldr	r3, [r3, #28]
 80094a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80094a4:	f040 8100 	bne.w	80096a8 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 80094a8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80094ac:	2b40      	cmp	r3, #64	; 0x40
 80094ae:	f200 80b7 	bhi.w	8009620 <UART_SetConfig+0x8d0>
 80094b2:	a201      	add	r2, pc, #4	; (adr r2, 80094b8 <UART_SetConfig+0x768>)
 80094b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094b8:	080095bd 	.word	0x080095bd
 80094bc:	080095c5 	.word	0x080095c5
 80094c0:	08009621 	.word	0x08009621
 80094c4:	08009621 	.word	0x08009621
 80094c8:	080095cd 	.word	0x080095cd
 80094cc:	08009621 	.word	0x08009621
 80094d0:	08009621 	.word	0x08009621
 80094d4:	08009621 	.word	0x08009621
 80094d8:	080095dd 	.word	0x080095dd
 80094dc:	08009621 	.word	0x08009621
 80094e0:	08009621 	.word	0x08009621
 80094e4:	08009621 	.word	0x08009621
 80094e8:	08009621 	.word	0x08009621
 80094ec:	08009621 	.word	0x08009621
 80094f0:	08009621 	.word	0x08009621
 80094f4:	08009621 	.word	0x08009621
 80094f8:	080095ed 	.word	0x080095ed
 80094fc:	08009621 	.word	0x08009621
 8009500:	08009621 	.word	0x08009621
 8009504:	08009621 	.word	0x08009621
 8009508:	08009621 	.word	0x08009621
 800950c:	08009621 	.word	0x08009621
 8009510:	08009621 	.word	0x08009621
 8009514:	08009621 	.word	0x08009621
 8009518:	08009621 	.word	0x08009621
 800951c:	08009621 	.word	0x08009621
 8009520:	08009621 	.word	0x08009621
 8009524:	08009621 	.word	0x08009621
 8009528:	08009621 	.word	0x08009621
 800952c:	08009621 	.word	0x08009621
 8009530:	08009621 	.word	0x08009621
 8009534:	08009621 	.word	0x08009621
 8009538:	08009613 	.word	0x08009613
 800953c:	08009621 	.word	0x08009621
 8009540:	08009621 	.word	0x08009621
 8009544:	08009621 	.word	0x08009621
 8009548:	08009621 	.word	0x08009621
 800954c:	08009621 	.word	0x08009621
 8009550:	08009621 	.word	0x08009621
 8009554:	08009621 	.word	0x08009621
 8009558:	08009621 	.word	0x08009621
 800955c:	08009621 	.word	0x08009621
 8009560:	08009621 	.word	0x08009621
 8009564:	08009621 	.word	0x08009621
 8009568:	08009621 	.word	0x08009621
 800956c:	08009621 	.word	0x08009621
 8009570:	08009621 	.word	0x08009621
 8009574:	08009621 	.word	0x08009621
 8009578:	08009621 	.word	0x08009621
 800957c:	08009621 	.word	0x08009621
 8009580:	08009621 	.word	0x08009621
 8009584:	08009621 	.word	0x08009621
 8009588:	08009621 	.word	0x08009621
 800958c:	08009621 	.word	0x08009621
 8009590:	08009621 	.word	0x08009621
 8009594:	08009621 	.word	0x08009621
 8009598:	08009621 	.word	0x08009621
 800959c:	08009621 	.word	0x08009621
 80095a0:	08009621 	.word	0x08009621
 80095a4:	08009621 	.word	0x08009621
 80095a8:	08009621 	.word	0x08009621
 80095ac:	08009621 	.word	0x08009621
 80095b0:	08009621 	.word	0x08009621
 80095b4:	08009621 	.word	0x08009621
 80095b8:	08009619 	.word	0x08009619
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80095bc:	f7fd fbd0 	bl	8006d60 <HAL_RCC_GetPCLK1Freq>
 80095c0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80095c2:	e033      	b.n	800962c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80095c4:	f7fd fbe2 	bl	8006d8c <HAL_RCC_GetPCLK2Freq>
 80095c8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80095ca:	e02f      	b.n	800962c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80095cc:	f107 0314 	add.w	r3, r7, #20
 80095d0:	4618      	mov	r0, r3
 80095d2:	f7fe fb37 	bl	8007c44 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80095d6:	69bb      	ldr	r3, [r7, #24]
 80095d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80095da:	e027      	b.n	800962c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80095dc:	f107 0308 	add.w	r3, r7, #8
 80095e0:	4618      	mov	r0, r3
 80095e2:	f7fe fc7b 	bl	8007edc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80095ea:	e01f      	b.n	800962c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80095ec:	4b2b      	ldr	r3, [pc, #172]	; (800969c <UART_SetConfig+0x94c>)
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	f003 0320 	and.w	r3, r3, #32
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d009      	beq.n	800960c <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80095f8:	4b28      	ldr	r3, [pc, #160]	; (800969c <UART_SetConfig+0x94c>)
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	08db      	lsrs	r3, r3, #3
 80095fe:	f003 0303 	and.w	r3, r3, #3
 8009602:	4a27      	ldr	r2, [pc, #156]	; (80096a0 <UART_SetConfig+0x950>)
 8009604:	fa22 f303 	lsr.w	r3, r2, r3
 8009608:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800960a:	e00f      	b.n	800962c <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 800960c:	4b24      	ldr	r3, [pc, #144]	; (80096a0 <UART_SetConfig+0x950>)
 800960e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009610:	e00c      	b.n	800962c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009612:	4b24      	ldr	r3, [pc, #144]	; (80096a4 <UART_SetConfig+0x954>)
 8009614:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009616:	e009      	b.n	800962c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009618:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800961c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800961e:	e005      	b.n	800962c <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 8009620:	2300      	movs	r3, #0
 8009622:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009624:	2301      	movs	r3, #1
 8009626:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800962a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800962c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800962e:	2b00      	cmp	r3, #0
 8009630:	f000 8121 	beq.w	8009876 <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009638:	4a17      	ldr	r2, [pc, #92]	; (8009698 <UART_SetConfig+0x948>)
 800963a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800963e:	461a      	mov	r2, r3
 8009640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009642:	fbb3 f3f2 	udiv	r3, r3, r2
 8009646:	005a      	lsls	r2, r3, #1
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	685b      	ldr	r3, [r3, #4]
 800964c:	085b      	lsrs	r3, r3, #1
 800964e:	441a      	add	r2, r3
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	685b      	ldr	r3, [r3, #4]
 8009654:	fbb2 f3f3 	udiv	r3, r2, r3
 8009658:	b29b      	uxth	r3, r3
 800965a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800965c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800965e:	2b0f      	cmp	r3, #15
 8009660:	d916      	bls.n	8009690 <UART_SetConfig+0x940>
 8009662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009664:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009668:	d212      	bcs.n	8009690 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800966a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800966c:	b29b      	uxth	r3, r3
 800966e:	f023 030f 	bic.w	r3, r3, #15
 8009672:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009676:	085b      	lsrs	r3, r3, #1
 8009678:	b29b      	uxth	r3, r3
 800967a:	f003 0307 	and.w	r3, r3, #7
 800967e:	b29a      	uxth	r2, r3
 8009680:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009682:	4313      	orrs	r3, r2
 8009684:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800968c:	60da      	str	r2, [r3, #12]
 800968e:	e0f2      	b.n	8009876 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8009690:	2301      	movs	r3, #1
 8009692:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009696:	e0ee      	b.n	8009876 <UART_SetConfig+0xb26>
 8009698:	080200e4 	.word	0x080200e4
 800969c:	58024400 	.word	0x58024400
 80096a0:	03d09000 	.word	0x03d09000
 80096a4:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 80096a8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80096ac:	2b40      	cmp	r3, #64	; 0x40
 80096ae:	f200 80b7 	bhi.w	8009820 <UART_SetConfig+0xad0>
 80096b2:	a201      	add	r2, pc, #4	; (adr r2, 80096b8 <UART_SetConfig+0x968>)
 80096b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096b8:	080097bd 	.word	0x080097bd
 80096bc:	080097c5 	.word	0x080097c5
 80096c0:	08009821 	.word	0x08009821
 80096c4:	08009821 	.word	0x08009821
 80096c8:	080097cd 	.word	0x080097cd
 80096cc:	08009821 	.word	0x08009821
 80096d0:	08009821 	.word	0x08009821
 80096d4:	08009821 	.word	0x08009821
 80096d8:	080097dd 	.word	0x080097dd
 80096dc:	08009821 	.word	0x08009821
 80096e0:	08009821 	.word	0x08009821
 80096e4:	08009821 	.word	0x08009821
 80096e8:	08009821 	.word	0x08009821
 80096ec:	08009821 	.word	0x08009821
 80096f0:	08009821 	.word	0x08009821
 80096f4:	08009821 	.word	0x08009821
 80096f8:	080097ed 	.word	0x080097ed
 80096fc:	08009821 	.word	0x08009821
 8009700:	08009821 	.word	0x08009821
 8009704:	08009821 	.word	0x08009821
 8009708:	08009821 	.word	0x08009821
 800970c:	08009821 	.word	0x08009821
 8009710:	08009821 	.word	0x08009821
 8009714:	08009821 	.word	0x08009821
 8009718:	08009821 	.word	0x08009821
 800971c:	08009821 	.word	0x08009821
 8009720:	08009821 	.word	0x08009821
 8009724:	08009821 	.word	0x08009821
 8009728:	08009821 	.word	0x08009821
 800972c:	08009821 	.word	0x08009821
 8009730:	08009821 	.word	0x08009821
 8009734:	08009821 	.word	0x08009821
 8009738:	08009813 	.word	0x08009813
 800973c:	08009821 	.word	0x08009821
 8009740:	08009821 	.word	0x08009821
 8009744:	08009821 	.word	0x08009821
 8009748:	08009821 	.word	0x08009821
 800974c:	08009821 	.word	0x08009821
 8009750:	08009821 	.word	0x08009821
 8009754:	08009821 	.word	0x08009821
 8009758:	08009821 	.word	0x08009821
 800975c:	08009821 	.word	0x08009821
 8009760:	08009821 	.word	0x08009821
 8009764:	08009821 	.word	0x08009821
 8009768:	08009821 	.word	0x08009821
 800976c:	08009821 	.word	0x08009821
 8009770:	08009821 	.word	0x08009821
 8009774:	08009821 	.word	0x08009821
 8009778:	08009821 	.word	0x08009821
 800977c:	08009821 	.word	0x08009821
 8009780:	08009821 	.word	0x08009821
 8009784:	08009821 	.word	0x08009821
 8009788:	08009821 	.word	0x08009821
 800978c:	08009821 	.word	0x08009821
 8009790:	08009821 	.word	0x08009821
 8009794:	08009821 	.word	0x08009821
 8009798:	08009821 	.word	0x08009821
 800979c:	08009821 	.word	0x08009821
 80097a0:	08009821 	.word	0x08009821
 80097a4:	08009821 	.word	0x08009821
 80097a8:	08009821 	.word	0x08009821
 80097ac:	08009821 	.word	0x08009821
 80097b0:	08009821 	.word	0x08009821
 80097b4:	08009821 	.word	0x08009821
 80097b8:	08009819 	.word	0x08009819
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80097bc:	f7fd fad0 	bl	8006d60 <HAL_RCC_GetPCLK1Freq>
 80097c0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80097c2:	e033      	b.n	800982c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80097c4:	f7fd fae2 	bl	8006d8c <HAL_RCC_GetPCLK2Freq>
 80097c8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80097ca:	e02f      	b.n	800982c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80097cc:	f107 0314 	add.w	r3, r7, #20
 80097d0:	4618      	mov	r0, r3
 80097d2:	f7fe fa37 	bl	8007c44 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80097d6:	69bb      	ldr	r3, [r7, #24]
 80097d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80097da:	e027      	b.n	800982c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80097dc:	f107 0308 	add.w	r3, r7, #8
 80097e0:	4618      	mov	r0, r3
 80097e2:	f7fe fb7b 	bl	8007edc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80097ea:	e01f      	b.n	800982c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80097ec:	4b2c      	ldr	r3, [pc, #176]	; (80098a0 <UART_SetConfig+0xb50>)
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	f003 0320 	and.w	r3, r3, #32
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d009      	beq.n	800980c <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80097f8:	4b29      	ldr	r3, [pc, #164]	; (80098a0 <UART_SetConfig+0xb50>)
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	08db      	lsrs	r3, r3, #3
 80097fe:	f003 0303 	and.w	r3, r3, #3
 8009802:	4a28      	ldr	r2, [pc, #160]	; (80098a4 <UART_SetConfig+0xb54>)
 8009804:	fa22 f303 	lsr.w	r3, r2, r3
 8009808:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800980a:	e00f      	b.n	800982c <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 800980c:	4b25      	ldr	r3, [pc, #148]	; (80098a4 <UART_SetConfig+0xb54>)
 800980e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009810:	e00c      	b.n	800982c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009812:	4b25      	ldr	r3, [pc, #148]	; (80098a8 <UART_SetConfig+0xb58>)
 8009814:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009816:	e009      	b.n	800982c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009818:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800981c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800981e:	e005      	b.n	800982c <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 8009820:	2300      	movs	r3, #0
 8009822:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009824:	2301      	movs	r3, #1
 8009826:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800982a:	bf00      	nop
    }

    if (pclk != 0U)
 800982c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800982e:	2b00      	cmp	r3, #0
 8009830:	d021      	beq.n	8009876 <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009836:	4a1d      	ldr	r2, [pc, #116]	; (80098ac <UART_SetConfig+0xb5c>)
 8009838:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800983c:	461a      	mov	r2, r3
 800983e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009840:	fbb3 f2f2 	udiv	r2, r3, r2
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	685b      	ldr	r3, [r3, #4]
 8009848:	085b      	lsrs	r3, r3, #1
 800984a:	441a      	add	r2, r3
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	685b      	ldr	r3, [r3, #4]
 8009850:	fbb2 f3f3 	udiv	r3, r2, r3
 8009854:	b29b      	uxth	r3, r3
 8009856:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800985a:	2b0f      	cmp	r3, #15
 800985c:	d908      	bls.n	8009870 <UART_SetConfig+0xb20>
 800985e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009860:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009864:	d204      	bcs.n	8009870 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800986c:	60da      	str	r2, [r3, #12]
 800986e:	e002      	b.n	8009876 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8009870:	2301      	movs	r3, #1
 8009872:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	2201      	movs	r2, #1
 800987a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	2201      	movs	r2, #1
 8009882:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	2200      	movs	r2, #0
 800988a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2200      	movs	r2, #0
 8009890:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8009892:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8009896:	4618      	mov	r0, r3
 8009898:	3738      	adds	r7, #56	; 0x38
 800989a:	46bd      	mov	sp, r7
 800989c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80098a0:	58024400 	.word	0x58024400
 80098a4:	03d09000 	.word	0x03d09000
 80098a8:	003d0900 	.word	0x003d0900
 80098ac:	080200e4 	.word	0x080200e4

080098b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80098b0:	b480      	push	{r7}
 80098b2:	b083      	sub	sp, #12
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098bc:	f003 0301 	and.w	r3, r3, #1
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d00a      	beq.n	80098da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	685b      	ldr	r3, [r3, #4]
 80098ca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	430a      	orrs	r2, r1
 80098d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098de:	f003 0302 	and.w	r3, r3, #2
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d00a      	beq.n	80098fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	685b      	ldr	r3, [r3, #4]
 80098ec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	430a      	orrs	r2, r1
 80098fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009900:	f003 0304 	and.w	r3, r3, #4
 8009904:	2b00      	cmp	r3, #0
 8009906:	d00a      	beq.n	800991e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	685b      	ldr	r3, [r3, #4]
 800990e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	430a      	orrs	r2, r1
 800991c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009922:	f003 0308 	and.w	r3, r3, #8
 8009926:	2b00      	cmp	r3, #0
 8009928:	d00a      	beq.n	8009940 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	685b      	ldr	r3, [r3, #4]
 8009930:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	430a      	orrs	r2, r1
 800993e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009944:	f003 0310 	and.w	r3, r3, #16
 8009948:	2b00      	cmp	r3, #0
 800994a:	d00a      	beq.n	8009962 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	689b      	ldr	r3, [r3, #8]
 8009952:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	430a      	orrs	r2, r1
 8009960:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009966:	f003 0320 	and.w	r3, r3, #32
 800996a:	2b00      	cmp	r3, #0
 800996c:	d00a      	beq.n	8009984 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	689b      	ldr	r3, [r3, #8]
 8009974:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	430a      	orrs	r2, r1
 8009982:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009988:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800998c:	2b00      	cmp	r3, #0
 800998e:	d01a      	beq.n	80099c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	685b      	ldr	r3, [r3, #4]
 8009996:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	430a      	orrs	r2, r1
 80099a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80099ae:	d10a      	bne.n	80099c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	685b      	ldr	r3, [r3, #4]
 80099b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	430a      	orrs	r2, r1
 80099c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d00a      	beq.n	80099e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	685b      	ldr	r3, [r3, #4]
 80099d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	430a      	orrs	r2, r1
 80099e6:	605a      	str	r2, [r3, #4]
  }
}
 80099e8:	bf00      	nop
 80099ea:	370c      	adds	r7, #12
 80099ec:	46bd      	mov	sp, r7
 80099ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f2:	4770      	bx	lr

080099f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b086      	sub	sp, #24
 80099f8:	af02      	add	r7, sp, #8
 80099fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2200      	movs	r2, #0
 8009a00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8009a04:	f7f8 f9a8 	bl	8001d58 <HAL_GetTick>
 8009a08:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	f003 0308 	and.w	r3, r3, #8
 8009a14:	2b08      	cmp	r3, #8
 8009a16:	d10e      	bne.n	8009a36 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009a18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009a1c:	9300      	str	r3, [sp, #0]
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	2200      	movs	r2, #0
 8009a22:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009a26:	6878      	ldr	r0, [r7, #4]
 8009a28:	f000 f82c 	bl	8009a84 <UART_WaitOnFlagUntilTimeout>
 8009a2c:	4603      	mov	r3, r0
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d001      	beq.n	8009a36 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009a32:	2303      	movs	r3, #3
 8009a34:	e022      	b.n	8009a7c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	f003 0304 	and.w	r3, r3, #4
 8009a40:	2b04      	cmp	r3, #4
 8009a42:	d10e      	bne.n	8009a62 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009a44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009a48:	9300      	str	r3, [sp, #0]
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009a52:	6878      	ldr	r0, [r7, #4]
 8009a54:	f000 f816 	bl	8009a84 <UART_WaitOnFlagUntilTimeout>
 8009a58:	4603      	mov	r3, r0
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d001      	beq.n	8009a62 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009a5e:	2303      	movs	r3, #3
 8009a60:	e00c      	b.n	8009a7c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	2220      	movs	r2, #32
 8009a66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	2220      	movs	r2, #32
 8009a6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	2200      	movs	r2, #0
 8009a76:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009a7a:	2300      	movs	r3, #0
}
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	3710      	adds	r7, #16
 8009a80:	46bd      	mov	sp, r7
 8009a82:	bd80      	pop	{r7, pc}

08009a84 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b084      	sub	sp, #16
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	60f8      	str	r0, [r7, #12]
 8009a8c:	60b9      	str	r1, [r7, #8]
 8009a8e:	603b      	str	r3, [r7, #0]
 8009a90:	4613      	mov	r3, r2
 8009a92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a94:	e062      	b.n	8009b5c <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009a96:	69bb      	ldr	r3, [r7, #24]
 8009a98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009a9c:	d05e      	beq.n	8009b5c <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a9e:	f7f8 f95b 	bl	8001d58 <HAL_GetTick>
 8009aa2:	4602      	mov	r2, r0
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	1ad3      	subs	r3, r2, r3
 8009aa8:	69ba      	ldr	r2, [r7, #24]
 8009aaa:	429a      	cmp	r2, r3
 8009aac:	d302      	bcc.n	8009ab4 <UART_WaitOnFlagUntilTimeout+0x30>
 8009aae:	69bb      	ldr	r3, [r7, #24]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d11d      	bne.n	8009af0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	681a      	ldr	r2, [r3, #0]
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009ac2:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	689a      	ldr	r2, [r3, #8]
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	f022 0201 	bic.w	r2, r2, #1
 8009ad2:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	2220      	movs	r2, #32
 8009ad8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	2220      	movs	r2, #32
 8009ae0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8009aec:	2303      	movs	r3, #3
 8009aee:	e045      	b.n	8009b7c <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	f003 0304 	and.w	r3, r3, #4
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d02e      	beq.n	8009b5c <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	69db      	ldr	r3, [r3, #28]
 8009b04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009b08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009b0c:	d126      	bne.n	8009b5c <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009b16:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	681a      	ldr	r2, [r3, #0]
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009b26:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	689a      	ldr	r2, [r3, #8]
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	f022 0201 	bic.w	r2, r2, #1
 8009b36:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	2220      	movs	r2, #32
 8009b3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	2220      	movs	r2, #32
 8009b44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	2220      	movs	r2, #32
 8009b4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	2200      	movs	r2, #0
 8009b54:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8009b58:	2303      	movs	r3, #3
 8009b5a:	e00f      	b.n	8009b7c <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	69da      	ldr	r2, [r3, #28]
 8009b62:	68bb      	ldr	r3, [r7, #8]
 8009b64:	4013      	ands	r3, r2
 8009b66:	68ba      	ldr	r2, [r7, #8]
 8009b68:	429a      	cmp	r2, r3
 8009b6a:	bf0c      	ite	eq
 8009b6c:	2301      	moveq	r3, #1
 8009b6e:	2300      	movne	r3, #0
 8009b70:	b2db      	uxtb	r3, r3
 8009b72:	461a      	mov	r2, r3
 8009b74:	79fb      	ldrb	r3, [r7, #7]
 8009b76:	429a      	cmp	r2, r3
 8009b78:	d08d      	beq.n	8009a96 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009b7a:	2300      	movs	r3, #0
}
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	3710      	adds	r7, #16
 8009b80:	46bd      	mov	sp, r7
 8009b82:	bd80      	pop	{r7, pc}

08009b84 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009b84:	b480      	push	{r7}
 8009b86:	b085      	sub	sp, #20
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009b92:	2b01      	cmp	r3, #1
 8009b94:	d101      	bne.n	8009b9a <HAL_UARTEx_DisableFifoMode+0x16>
 8009b96:	2302      	movs	r3, #2
 8009b98:	e027      	b.n	8009bea <HAL_UARTEx_DisableFifoMode+0x66>
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	2201      	movs	r2, #1
 8009b9e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	2224      	movs	r2, #36	; 0x24
 8009ba6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	681a      	ldr	r2, [r3, #0]
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	f022 0201 	bic.w	r2, r2, #1
 8009bc0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009bc8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2200      	movs	r2, #0
 8009bce:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	68fa      	ldr	r2, [r7, #12]
 8009bd6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	2220      	movs	r2, #32
 8009bdc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2200      	movs	r2, #0
 8009be4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009be8:	2300      	movs	r3, #0
}
 8009bea:	4618      	mov	r0, r3
 8009bec:	3714      	adds	r7, #20
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf4:	4770      	bx	lr

08009bf6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009bf6:	b580      	push	{r7, lr}
 8009bf8:	b084      	sub	sp, #16
 8009bfa:	af00      	add	r7, sp, #0
 8009bfc:	6078      	str	r0, [r7, #4]
 8009bfe:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009c06:	2b01      	cmp	r3, #1
 8009c08:	d101      	bne.n	8009c0e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009c0a:	2302      	movs	r3, #2
 8009c0c:	e02d      	b.n	8009c6a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	2201      	movs	r2, #1
 8009c12:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2224      	movs	r2, #36	; 0x24
 8009c1a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	681a      	ldr	r2, [r3, #0]
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	f022 0201 	bic.w	r2, r2, #1
 8009c34:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	689b      	ldr	r3, [r3, #8]
 8009c3c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	683a      	ldr	r2, [r7, #0]
 8009c46:	430a      	orrs	r2, r1
 8009c48:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009c4a:	6878      	ldr	r0, [r7, #4]
 8009c4c:	f000 f850 	bl	8009cf0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	68fa      	ldr	r2, [r7, #12]
 8009c56:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2220      	movs	r2, #32
 8009c5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	2200      	movs	r2, #0
 8009c64:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009c68:	2300      	movs	r3, #0
}
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	3710      	adds	r7, #16
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	bd80      	pop	{r7, pc}

08009c72 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009c72:	b580      	push	{r7, lr}
 8009c74:	b084      	sub	sp, #16
 8009c76:	af00      	add	r7, sp, #0
 8009c78:	6078      	str	r0, [r7, #4]
 8009c7a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009c82:	2b01      	cmp	r3, #1
 8009c84:	d101      	bne.n	8009c8a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009c86:	2302      	movs	r3, #2
 8009c88:	e02d      	b.n	8009ce6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	2201      	movs	r2, #1
 8009c8e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2224      	movs	r2, #36	; 0x24
 8009c96:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	681a      	ldr	r2, [r3, #0]
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	f022 0201 	bic.w	r2, r2, #1
 8009cb0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	689b      	ldr	r3, [r3, #8]
 8009cb8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	683a      	ldr	r2, [r7, #0]
 8009cc2:	430a      	orrs	r2, r1
 8009cc4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009cc6:	6878      	ldr	r0, [r7, #4]
 8009cc8:	f000 f812 	bl	8009cf0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	68fa      	ldr	r2, [r7, #12]
 8009cd2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2220      	movs	r2, #32
 8009cd8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	2200      	movs	r2, #0
 8009ce0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009ce4:	2300      	movs	r3, #0
}
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	3710      	adds	r7, #16
 8009cea:	46bd      	mov	sp, r7
 8009cec:	bd80      	pop	{r7, pc}
	...

08009cf0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009cf0:	b480      	push	{r7}
 8009cf2:	b089      	sub	sp, #36	; 0x24
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8009cf8:	4a2f      	ldr	r2, [pc, #188]	; (8009db8 <UARTEx_SetNbDataToProcess+0xc8>)
 8009cfa:	f107 0314 	add.w	r3, r7, #20
 8009cfe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009d02:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8009d06:	4a2d      	ldr	r2, [pc, #180]	; (8009dbc <UARTEx_SetNbDataToProcess+0xcc>)
 8009d08:	f107 030c 	add.w	r3, r7, #12
 8009d0c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009d10:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d108      	bne.n	8009d2e <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2201      	movs	r2, #1
 8009d20:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	2201      	movs	r2, #1
 8009d28:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009d2c:	e03d      	b.n	8009daa <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009d2e:	2310      	movs	r3, #16
 8009d30:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009d32:	2310      	movs	r3, #16
 8009d34:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	689b      	ldr	r3, [r3, #8]
 8009d3c:	0e5b      	lsrs	r3, r3, #25
 8009d3e:	b2db      	uxtb	r3, r3
 8009d40:	f003 0307 	and.w	r3, r3, #7
 8009d44:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	689b      	ldr	r3, [r3, #8]
 8009d4c:	0f5b      	lsrs	r3, r3, #29
 8009d4e:	b2db      	uxtb	r3, r3
 8009d50:	f003 0307 	and.w	r3, r3, #7
 8009d54:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8009d56:	7fbb      	ldrb	r3, [r7, #30]
 8009d58:	7f3a      	ldrb	r2, [r7, #28]
 8009d5a:	f107 0120 	add.w	r1, r7, #32
 8009d5e:	440a      	add	r2, r1
 8009d60:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8009d64:	fb02 f303 	mul.w	r3, r2, r3
 8009d68:	7f3a      	ldrb	r2, [r7, #28]
 8009d6a:	f107 0120 	add.w	r1, r7, #32
 8009d6e:	440a      	add	r2, r1
 8009d70:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8009d74:	fb93 f3f2 	sdiv	r3, r3, r2
 8009d78:	b29a      	uxth	r2, r3
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8009d80:	7ffb      	ldrb	r3, [r7, #31]
 8009d82:	7f7a      	ldrb	r2, [r7, #29]
 8009d84:	f107 0120 	add.w	r1, r7, #32
 8009d88:	440a      	add	r2, r1
 8009d8a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8009d8e:	fb02 f303 	mul.w	r3, r2, r3
 8009d92:	7f7a      	ldrb	r2, [r7, #29]
 8009d94:	f107 0120 	add.w	r1, r7, #32
 8009d98:	440a      	add	r2, r1
 8009d9a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8009d9e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009da2:	b29a      	uxth	r2, r3
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009daa:	bf00      	nop
 8009dac:	3724      	adds	r7, #36	; 0x24
 8009dae:	46bd      	mov	sp, r7
 8009db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db4:	4770      	bx	lr
 8009db6:	bf00      	nop
 8009db8:	0801d300 	.word	0x0801d300
 8009dbc:	0801d308 	.word	0x0801d308

08009dc0 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 8009dc0:	b480      	push	{r7}
 8009dc2:	b087      	sub	sp, #28
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
 8009dc8:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8009dd2:	2320      	movs	r3, #32
 8009dd4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8009dd6:	f3bf 8f4f 	dsb	sy

    __DSB();

    while (op_size > 0) {
 8009dda:	e00b      	b.n	8009df4 <SCB_InvalidateDCache_by_Addr+0x34>
      SCB->DCIMVAC = op_addr;
 8009ddc:	4a0c      	ldr	r2, [pc, #48]	; (8009e10 <SCB_InvalidateDCache_by_Addr+0x50>)
 8009dde:	693b      	ldr	r3, [r7, #16]
 8009de0:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	693a      	ldr	r2, [r7, #16]
 8009de8:	4413      	add	r3, r2
 8009dea:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8009dec:	697a      	ldr	r2, [r7, #20]
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	1ad3      	subs	r3, r2, r3
 8009df2:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8009df4:	697b      	ldr	r3, [r7, #20]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	dcf0      	bgt.n	8009ddc <SCB_InvalidateDCache_by_Addr+0x1c>
 8009dfa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8009dfe:	f3bf 8f6f 	isb	sy
    }

    __DSB();
    __ISB();
  #endif
}
 8009e02:	bf00      	nop
 8009e04:	371c      	adds	r7, #28
 8009e06:	46bd      	mov	sp, r7
 8009e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0c:	4770      	bx	lr
 8009e0e:	bf00      	nop
 8009e10:	e000ed00 	.word	0xe000ed00

08009e14 <HAL_ETH_MspInit>:
/* Private functions ---------------------------------------------------------*/
void pbuf_free_custom(struct pbuf *p);
void Error_Handler(void);

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b08e      	sub	sp, #56	; 0x38
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009e1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009e20:	2200      	movs	r2, #0
 8009e22:	601a      	str	r2, [r3, #0]
 8009e24:	605a      	str	r2, [r3, #4]
 8009e26:	609a      	str	r2, [r3, #8]
 8009e28:	60da      	str	r2, [r3, #12]
 8009e2a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	4a5d      	ldr	r2, [pc, #372]	; (8009fa8 <HAL_ETH_MspInit+0x194>)
 8009e32:	4293      	cmp	r3, r2
 8009e34:	f040 80b3 	bne.w	8009f9e <HAL_ETH_MspInit+0x18a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8009e38:	4b5c      	ldr	r3, [pc, #368]	; (8009fac <HAL_ETH_MspInit+0x198>)
 8009e3a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009e3e:	4a5b      	ldr	r2, [pc, #364]	; (8009fac <HAL_ETH_MspInit+0x198>)
 8009e40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e44:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8009e48:	4b58      	ldr	r3, [pc, #352]	; (8009fac <HAL_ETH_MspInit+0x198>)
 8009e4a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009e4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009e52:	623b      	str	r3, [r7, #32]
 8009e54:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8009e56:	4b55      	ldr	r3, [pc, #340]	; (8009fac <HAL_ETH_MspInit+0x198>)
 8009e58:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009e5c:	4a53      	ldr	r2, [pc, #332]	; (8009fac <HAL_ETH_MspInit+0x198>)
 8009e5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009e62:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8009e66:	4b51      	ldr	r3, [pc, #324]	; (8009fac <HAL_ETH_MspInit+0x198>)
 8009e68:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009e6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009e70:	61fb      	str	r3, [r7, #28]
 8009e72:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8009e74:	4b4d      	ldr	r3, [pc, #308]	; (8009fac <HAL_ETH_MspInit+0x198>)
 8009e76:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009e7a:	4a4c      	ldr	r2, [pc, #304]	; (8009fac <HAL_ETH_MspInit+0x198>)
 8009e7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e80:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8009e84:	4b49      	ldr	r3, [pc, #292]	; (8009fac <HAL_ETH_MspInit+0x198>)
 8009e86:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e8e:	61bb      	str	r3, [r7, #24]
 8009e90:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009e92:	4b46      	ldr	r3, [pc, #280]	; (8009fac <HAL_ETH_MspInit+0x198>)
 8009e94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009e98:	4a44      	ldr	r2, [pc, #272]	; (8009fac <HAL_ETH_MspInit+0x198>)
 8009e9a:	f043 0304 	orr.w	r3, r3, #4
 8009e9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009ea2:	4b42      	ldr	r3, [pc, #264]	; (8009fac <HAL_ETH_MspInit+0x198>)
 8009ea4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009ea8:	f003 0304 	and.w	r3, r3, #4
 8009eac:	617b      	str	r3, [r7, #20]
 8009eae:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009eb0:	4b3e      	ldr	r3, [pc, #248]	; (8009fac <HAL_ETH_MspInit+0x198>)
 8009eb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009eb6:	4a3d      	ldr	r2, [pc, #244]	; (8009fac <HAL_ETH_MspInit+0x198>)
 8009eb8:	f043 0301 	orr.w	r3, r3, #1
 8009ebc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009ec0:	4b3a      	ldr	r3, [pc, #232]	; (8009fac <HAL_ETH_MspInit+0x198>)
 8009ec2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009ec6:	f003 0301 	and.w	r3, r3, #1
 8009eca:	613b      	str	r3, [r7, #16]
 8009ecc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009ece:	4b37      	ldr	r3, [pc, #220]	; (8009fac <HAL_ETH_MspInit+0x198>)
 8009ed0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009ed4:	4a35      	ldr	r2, [pc, #212]	; (8009fac <HAL_ETH_MspInit+0x198>)
 8009ed6:	f043 0302 	orr.w	r3, r3, #2
 8009eda:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009ede:	4b33      	ldr	r3, [pc, #204]	; (8009fac <HAL_ETH_MspInit+0x198>)
 8009ee0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009ee4:	f003 0302 	and.w	r3, r3, #2
 8009ee8:	60fb      	str	r3, [r7, #12]
 8009eea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8009eec:	4b2f      	ldr	r3, [pc, #188]	; (8009fac <HAL_ETH_MspInit+0x198>)
 8009eee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009ef2:	4a2e      	ldr	r2, [pc, #184]	; (8009fac <HAL_ETH_MspInit+0x198>)
 8009ef4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ef8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009efc:	4b2b      	ldr	r3, [pc, #172]	; (8009fac <HAL_ETH_MspInit+0x198>)
 8009efe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f06:	60bb      	str	r3, [r7, #8]
 8009f08:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8009f0a:	2332      	movs	r3, #50	; 0x32
 8009f0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009f0e:	2302      	movs	r3, #2
 8009f10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f12:	2300      	movs	r3, #0
 8009f14:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009f16:	2303      	movs	r3, #3
 8009f18:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009f1a:	230b      	movs	r3, #11
 8009f1c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009f1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009f22:	4619      	mov	r1, r3
 8009f24:	4822      	ldr	r0, [pc, #136]	; (8009fb0 <HAL_ETH_MspInit+0x19c>)
 8009f26:	f7fb fced 	bl	8005904 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8009f2a:	2386      	movs	r3, #134	; 0x86
 8009f2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009f2e:	2302      	movs	r3, #2
 8009f30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f32:	2300      	movs	r3, #0
 8009f34:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009f36:	2303      	movs	r3, #3
 8009f38:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009f3a:	230b      	movs	r3, #11
 8009f3c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009f3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009f42:	4619      	mov	r1, r3
 8009f44:	481b      	ldr	r0, [pc, #108]	; (8009fb4 <HAL_ETH_MspInit+0x1a0>)
 8009f46:	f7fb fcdd 	bl	8005904 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8009f4a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009f4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009f50:	2302      	movs	r3, #2
 8009f52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f54:	2300      	movs	r3, #0
 8009f56:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009f58:	2303      	movs	r3, #3
 8009f5a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009f5c:	230b      	movs	r3, #11
 8009f5e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009f60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009f64:	4619      	mov	r1, r3
 8009f66:	4814      	ldr	r0, [pc, #80]	; (8009fb8 <HAL_ETH_MspInit+0x1a4>)
 8009f68:	f7fb fccc 	bl	8005904 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8009f6c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8009f70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009f72:	2302      	movs	r3, #2
 8009f74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f76:	2300      	movs	r3, #0
 8009f78:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009f7a:	2303      	movs	r3, #3
 8009f7c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009f7e:	230b      	movs	r3, #11
 8009f80:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8009f82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009f86:	4619      	mov	r1, r3
 8009f88:	480c      	ldr	r0, [pc, #48]	; (8009fbc <HAL_ETH_MspInit+0x1a8>)
 8009f8a:	f7fb fcbb 	bl	8005904 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 7, 0);
 8009f8e:	2200      	movs	r2, #0
 8009f90:	2107      	movs	r1, #7
 8009f92:	203d      	movs	r0, #61	; 0x3d
 8009f94:	f7f7 ffc4 	bl	8001f20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8009f98:	203d      	movs	r0, #61	; 0x3d
 8009f9a:	f7f7 ffdb 	bl	8001f54 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8009f9e:	bf00      	nop
 8009fa0:	3738      	adds	r7, #56	; 0x38
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	bd80      	pop	{r7, pc}
 8009fa6:	bf00      	nop
 8009fa8:	40028000 	.word	0x40028000
 8009fac:	58024400 	.word	0x58024400
 8009fb0:	58020800 	.word	0x58020800
 8009fb4:	58020000 	.word	0x58020000
 8009fb8:	58020400 	.word	0x58020400
 8009fbc:	58021800 	.word	0x58021800

08009fc0 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b082      	sub	sp, #8
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8009fc8:	4b04      	ldr	r3, [pc, #16]	; (8009fdc <HAL_ETH_RxCpltCallback+0x1c>)
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	4618      	mov	r0, r3
 8009fce:	f000 fd31 	bl	800aa34 <osSemaphoreRelease>
}
 8009fd2:	bf00      	nop
 8009fd4:	3708      	adds	r7, #8
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	bd80      	pop	{r7, pc}
 8009fda:	bf00      	nop
 8009fdc:	24000a80 	.word	0x24000a80

08009fe0 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8009fe0:	b5b0      	push	{r4, r5, r7, lr}
 8009fe2:	b0ac      	sub	sp, #176	; 0xb0
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8009fe8:	2300      	movs	r3, #0
 8009fea:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
  uint32_t idx = 0;
 8009fee:	2300      	movs	r3, #0
 8009ff0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  ETH_MACConfigTypeDef MACConf;
  int32_t PHYLinkState;
  uint32_t duplex, speed = 0;
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8009ffa:	4b91      	ldr	r3, [pc, #580]	; (800a240 <low_level_init+0x260>)
 8009ffc:	4a91      	ldr	r2, [pc, #580]	; (800a244 <low_level_init+0x264>)
 8009ffe:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800a000:	2300      	movs	r3, #0
 800a002:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 800a006:	2380      	movs	r3, #128	; 0x80
 800a008:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 800a00c:	23e1      	movs	r3, #225	; 0xe1
 800a00e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 800a012:	2300      	movs	r3, #0
 800a014:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 800a018:	2300      	movs	r3, #0
 800a01a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 800a01e:	2300      	movs	r3, #0
 800a020:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 800a024:	4a86      	ldr	r2, [pc, #536]	; (800a240 <low_level_init+0x260>)
 800a026:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a02a:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800a02c:	4b84      	ldr	r3, [pc, #528]	; (800a240 <low_level_init+0x260>)
 800a02e:	2201      	movs	r2, #1
 800a030:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800a032:	4b83      	ldr	r3, [pc, #524]	; (800a240 <low_level_init+0x260>)
 800a034:	4a84      	ldr	r2, [pc, #528]	; (800a248 <low_level_init+0x268>)
 800a036:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800a038:	4b81      	ldr	r3, [pc, #516]	; (800a240 <low_level_init+0x260>)
 800a03a:	4a84      	ldr	r2, [pc, #528]	; (800a24c <low_level_init+0x26c>)
 800a03c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800a03e:	4b80      	ldr	r3, [pc, #512]	; (800a240 <low_level_init+0x260>)
 800a040:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800a044:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800a046:	487e      	ldr	r0, [pc, #504]	; (800a240 <low_level_init+0x260>)
 800a048:	f7f9 fdca 	bl	8003be0 <HAL_ETH_Init>
 800a04c:	4603      	mov	r3, r0
 800a04e:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800a052:	2234      	movs	r2, #52	; 0x34
 800a054:	2100      	movs	r1, #0
 800a056:	487e      	ldr	r0, [pc, #504]	; (800a250 <low_level_init+0x270>)
 800a058:	f010 fc11 	bl	801a87e <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800a05c:	4b7c      	ldr	r3, [pc, #496]	; (800a250 <low_level_init+0x270>)
 800a05e:	2221      	movs	r2, #33	; 0x21
 800a060:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800a062:	4b7b      	ldr	r3, [pc, #492]	; (800a250 <low_level_init+0x270>)
 800a064:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800a068:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800a06a:	4b79      	ldr	r3, [pc, #484]	; (800a250 <low_level_init+0x270>)
 800a06c:	2200      	movs	r2, #0
 800a06e:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800a070:	4878      	ldr	r0, [pc, #480]	; (800a254 <low_level_init+0x274>)
 800a072:	f006 f9d3 	bl	801041c <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	2206      	movs	r2, #6
 800a07a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800a07e:	4b70      	ldr	r3, [pc, #448]	; (800a240 <low_level_init+0x260>)
 800a080:	685b      	ldr	r3, [r3, #4]
 800a082:	781a      	ldrb	r2, [r3, #0]
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800a08a:	4b6d      	ldr	r3, [pc, #436]	; (800a240 <low_level_init+0x260>)
 800a08c:	685b      	ldr	r3, [r3, #4]
 800a08e:	785a      	ldrb	r2, [r3, #1]
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800a096:	4b6a      	ldr	r3, [pc, #424]	; (800a240 <low_level_init+0x260>)
 800a098:	685b      	ldr	r3, [r3, #4]
 800a09a:	789a      	ldrb	r2, [r3, #2]
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800a0a2:	4b67      	ldr	r3, [pc, #412]	; (800a240 <low_level_init+0x260>)
 800a0a4:	685b      	ldr	r3, [r3, #4]
 800a0a6:	78da      	ldrb	r2, [r3, #3]
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800a0ae:	4b64      	ldr	r3, [pc, #400]	; (800a240 <low_level_init+0x260>)
 800a0b0:	685b      	ldr	r3, [r3, #4]
 800a0b2:	791a      	ldrb	r2, [r3, #4]
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800a0ba:	4b61      	ldr	r3, [pc, #388]	; (800a240 <low_level_init+0x260>)
 800a0bc:	685b      	ldr	r3, [r3, #4]
 800a0be:	795a      	ldrb	r2, [r3, #5]
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800a0cc:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a0d4:	f043 030a 	orr.w	r3, r3, #10
 800a0d8:	b2da      	uxtb	r2, r3
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a0e6:	e012      	b.n	800a10e <low_level_init+0x12e>
  {
    HAL_ETH_DescAssignMemory(&heth, idx, Rx_Buff[idx], NULL);
 800a0e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a0ec:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800a0f0:	fb02 f303 	mul.w	r3, r2, r3
 800a0f4:	4a58      	ldr	r2, [pc, #352]	; (800a258 <low_level_init+0x278>)
 800a0f6:	441a      	add	r2, r3
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 800a0fe:	4850      	ldr	r0, [pc, #320]	; (800a240 <low_level_init+0x260>)
 800a100:	f7f9 fe48 	bl	8003d94 <HAL_ETH_DescAssignMemory>
  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 800a104:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a108:	3301      	adds	r3, #1
 800a10a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a10e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a112:	2b03      	cmp	r3, #3
 800a114:	d9e8      	bls.n	800a0e8 <low_level_init+0x108>
  }

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 800a116:	2300      	movs	r3, #0
 800a118:	62bb      	str	r3, [r7, #40]	; 0x28
 800a11a:	2300      	movs	r3, #0
 800a11c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(SEM) , 1 );
 800a11e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a122:	2101      	movs	r1, #1
 800a124:	4618      	mov	r0, r3
 800a126:	f000 fc03 	bl	800a930 <osSemaphoreCreate>
 800a12a:	4602      	mov	r2, r0
 800a12c:	4b4b      	ldr	r3, [pc, #300]	; (800a25c <low_level_init+0x27c>)
 800a12e:	601a      	str	r2, [r3, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800a130:	4b4b      	ldr	r3, [pc, #300]	; (800a260 <low_level_init+0x280>)
 800a132:	f107 040c 	add.w	r4, r7, #12
 800a136:	461d      	mov	r5, r3
 800a138:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a13a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a13c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a140:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 800a144:	f107 030c 	add.w	r3, r7, #12
 800a148:	6879      	ldr	r1, [r7, #4]
 800a14a:	4618      	mov	r0, r3
 800a14c:	f000 faf3 	bl	800a736 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800a150:	4944      	ldr	r1, [pc, #272]	; (800a264 <low_level_init+0x284>)
 800a152:	4845      	ldr	r0, [pc, #276]	; (800a268 <low_level_init+0x288>)
 800a154:	f7f7 fc4f 	bl	80019f6 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800a158:	4843      	ldr	r0, [pc, #268]	; (800a268 <low_level_init+0x288>)
 800a15a:	f7f7 fc7e 	bl	8001a5a <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800a15e:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 800a162:	2b00      	cmp	r3, #0
 800a164:	d165      	bne.n	800a232 <low_level_init+0x252>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800a166:	4840      	ldr	r0, [pc, #256]	; (800a268 <low_level_init+0x288>)
 800a168:	f7f7 fd1f 	bl	8001baa <LAN8742_GetLinkState>
 800a16c:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800a170:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a174:	2b01      	cmp	r3, #1
 800a176:	dc06      	bgt.n	800a186 <low_level_init+0x1a6>
    {
      netif_set_link_down(netif);
 800a178:	6878      	ldr	r0, [r7, #4]
 800a17a:	f006 fd29 	bl	8010bd0 <netif_set_link_down>
      netif_set_down(netif);
 800a17e:	6878      	ldr	r0, [r7, #4]
 800a180:	f006 fcc0 	bl	8010b04 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800a184:	e057      	b.n	800a236 <low_level_init+0x256>
      switch (PHYLinkState)
 800a186:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a18a:	3b02      	subs	r3, #2
 800a18c:	2b03      	cmp	r3, #3
 800a18e:	d82b      	bhi.n	800a1e8 <low_level_init+0x208>
 800a190:	a201      	add	r2, pc, #4	; (adr r2, 800a198 <low_level_init+0x1b8>)
 800a192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a196:	bf00      	nop
 800a198:	0800a1a9 	.word	0x0800a1a9
 800a19c:	0800a1bb 	.word	0x0800a1bb
 800a1a0:	0800a1cb 	.word	0x0800a1cb
 800a1a4:	0800a1db 	.word	0x0800a1db
        duplex = ETH_FULLDUPLEX_MODE;
 800a1a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a1ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 800a1b0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a1b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800a1b8:	e01f      	b.n	800a1fa <low_level_init+0x21a>
        duplex = ETH_HALFDUPLEX_MODE;
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 800a1c0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a1c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800a1c8:	e017      	b.n	800a1fa <low_level_init+0x21a>
        duplex = ETH_FULLDUPLEX_MODE;
 800a1ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a1ce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_10M;
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800a1d8:	e00f      	b.n	800a1fa <low_level_init+0x21a>
        duplex = ETH_HALFDUPLEX_MODE;
 800a1da:	2300      	movs	r3, #0
 800a1dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_10M;
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800a1e6:	e008      	b.n	800a1fa <low_level_init+0x21a>
        duplex = ETH_FULLDUPLEX_MODE;
 800a1e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a1ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 800a1f0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a1f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800a1f8:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 800a1fa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a1fe:	4619      	mov	r1, r3
 800a200:	480f      	ldr	r0, [pc, #60]	; (800a240 <low_level_init+0x260>)
 800a202:	f7fa fba9 	bl	8004958 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800a206:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a20a:	653b      	str	r3, [r7, #80]	; 0x50
    MACConf.Speed = speed;
 800a20c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a210:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800a212:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a216:	4619      	mov	r1, r3
 800a218:	4809      	ldr	r0, [pc, #36]	; (800a240 <low_level_init+0x260>)
 800a21a:	f7fa fd71 	bl	8004d00 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 800a21e:	4808      	ldr	r0, [pc, #32]	; (800a240 <low_level_init+0x260>)
 800a220:	f7f9 fdf9 	bl	8003e16 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800a224:	6878      	ldr	r0, [r7, #4]
 800a226:	f006 fc01 	bl	8010a2c <netif_set_up>
    netif_set_link_up(netif);
 800a22a:	6878      	ldr	r0, [r7, #4]
 800a22c:	f006 fc9c 	bl	8010b68 <netif_set_link_up>
}
 800a230:	e001      	b.n	800a236 <low_level_init+0x256>
    Error_Handler();
 800a232:	f7f6 fe21 	bl	8000e78 <Error_Handler>
}
 800a236:	bf00      	nop
 800a238:	37b0      	adds	r7, #176	; 0xb0
 800a23a:	46bd      	mov	sp, r7
 800a23c:	bdb0      	pop	{r4, r5, r7, pc}
 800a23e:	bf00      	nop
 800a240:	24009cfc 	.word	0x24009cfc
 800a244:	40028000 	.word	0x40028000
 800a248:	30040060 	.word	0x30040060
 800a24c:	30040000 	.word	0x30040000
 800a250:	24009d6c 	.word	0x24009d6c
 800a254:	080200fc 	.word	0x080200fc
 800a258:	30040200 	.word	0x30040200
 800a25c:	24000a80 	.word	0x24000a80
 800a260:	0801d318 	.word	0x0801d318
 800a264:	24000010 	.word	0x24000010
 800a268:	24009cdc 	.word	0x24009cdc

0800a26c <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b092      	sub	sp, #72	; 0x48
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
 800a274:	6039      	str	r1, [r7, #0]
  uint32_t i=0;
 800a276:	2300      	movs	r3, #0
 800a278:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q;
  err_t errval = ERR_OK;
 800a27a:	2300      	movs	r3, #0
 800a27c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800a280:	f107 030c 	add.w	r3, r7, #12
 800a284:	2230      	movs	r2, #48	; 0x30
 800a286:	2100      	movs	r1, #0
 800a288:	4618      	mov	r0, r3
 800a28a:	f010 faf8 	bl	801a87e <memset>

  for(q = p; q != NULL; q = q->next)
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	643b      	str	r3, [r7, #64]	; 0x40
 800a292:	e049      	b.n	800a328 <low_level_output+0xbc>
  {
    if(i >= ETH_TX_DESC_CNT)
 800a294:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a296:	2b03      	cmp	r3, #3
 800a298:	d902      	bls.n	800a2a0 <low_level_output+0x34>
      return ERR_IF;
 800a29a:	f06f 030b 	mvn.w	r3, #11
 800a29e:	e056      	b.n	800a34e <low_level_output+0xe2>

    Txbuffer[i].buffer = q->payload;
 800a2a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a2a2:	6859      	ldr	r1, [r3, #4]
 800a2a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a2a6:	4613      	mov	r3, r2
 800a2a8:	005b      	lsls	r3, r3, #1
 800a2aa:	4413      	add	r3, r2
 800a2ac:	009b      	lsls	r3, r3, #2
 800a2ae:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a2b2:	4413      	add	r3, r2
 800a2b4:	3b3c      	subs	r3, #60	; 0x3c
 800a2b6:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800a2b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a2ba:	895b      	ldrh	r3, [r3, #10]
 800a2bc:	4619      	mov	r1, r3
 800a2be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a2c0:	4613      	mov	r3, r2
 800a2c2:	005b      	lsls	r3, r3, #1
 800a2c4:	4413      	add	r3, r2
 800a2c6:	009b      	lsls	r3, r3, #2
 800a2c8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a2cc:	4413      	add	r3, r2
 800a2ce:	3b38      	subs	r3, #56	; 0x38
 800a2d0:	6019      	str	r1, [r3, #0]

    if(i>0)
 800a2d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d012      	beq.n	800a2fe <low_level_output+0x92>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800a2d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a2da:	1e5a      	subs	r2, r3, #1
 800a2dc:	f107 000c 	add.w	r0, r7, #12
 800a2e0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a2e2:	460b      	mov	r3, r1
 800a2e4:	005b      	lsls	r3, r3, #1
 800a2e6:	440b      	add	r3, r1
 800a2e8:	009b      	lsls	r3, r3, #2
 800a2ea:	18c1      	adds	r1, r0, r3
 800a2ec:	4613      	mov	r3, r2
 800a2ee:	005b      	lsls	r3, r3, #1
 800a2f0:	4413      	add	r3, r2
 800a2f2:	009b      	lsls	r3, r3, #2
 800a2f4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a2f8:	4413      	add	r3, r2
 800a2fa:	3b34      	subs	r3, #52	; 0x34
 800a2fc:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800a2fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d10a      	bne.n	800a31c <low_level_output+0xb0>
    {
      Txbuffer[i].next = NULL;
 800a306:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a308:	4613      	mov	r3, r2
 800a30a:	005b      	lsls	r3, r3, #1
 800a30c:	4413      	add	r3, r2
 800a30e:	009b      	lsls	r3, r3, #2
 800a310:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a314:	4413      	add	r3, r2
 800a316:	3b34      	subs	r3, #52	; 0x34
 800a318:	2200      	movs	r2, #0
 800a31a:	601a      	str	r2, [r3, #0]
    }

    i++;
 800a31c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a31e:	3301      	adds	r3, #1
 800a320:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800a322:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	643b      	str	r3, [r7, #64]	; 0x40
 800a328:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d1b2      	bne.n	800a294 <low_level_output+0x28>
  }

  TxConfig.Length =  p->tot_len;
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	891b      	ldrh	r3, [r3, #8]
 800a332:	461a      	mov	r2, r3
 800a334:	4b08      	ldr	r3, [pc, #32]	; (800a358 <low_level_output+0xec>)
 800a336:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800a338:	4a07      	ldr	r2, [pc, #28]	; (800a358 <low_level_output+0xec>)
 800a33a:	f107 030c 	add.w	r3, r7, #12
 800a33e:	6093      	str	r3, [r2, #8]

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800a340:	2214      	movs	r2, #20
 800a342:	4905      	ldr	r1, [pc, #20]	; (800a358 <low_level_output+0xec>)
 800a344:	4805      	ldr	r0, [pc, #20]	; (800a35c <low_level_output+0xf0>)
 800a346:	f7f9 fe65 	bl	8004014 <HAL_ETH_Transmit>

  return errval;
 800a34a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800a34e:	4618      	mov	r0, r3
 800a350:	3748      	adds	r7, #72	; 0x48
 800a352:	46bd      	mov	sp, r7
 800a354:	bd80      	pop	{r7, pc}
 800a356:	bf00      	nop
 800a358:	24009d6c 	.word	0x24009d6c
 800a35c:	24009cfc 	.word	0x24009cfc

0800a360 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800a360:	b580      	push	{r7, lr}
 800a362:	b094      	sub	sp, #80	; 0x50
 800a364:	af02      	add	r7, sp, #8
 800a366:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800a368:	2300      	movs	r3, #0
 800a36a:	647b      	str	r3, [r7, #68]	; 0x44
  ETH_BufferTypeDef RxBuff[ETH_RX_DESC_CNT];
  uint32_t framelength = 0, i = 0;
 800a36c:	2300      	movs	r3, #0
 800a36e:	60bb      	str	r3, [r7, #8]
 800a370:	2300      	movs	r3, #0
 800a372:	643b      	str	r3, [r7, #64]	; 0x40
  struct pbuf_custom* custom_pbuf;

  memset(RxBuff, 0 , ETH_RX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800a374:	f107 030c 	add.w	r3, r7, #12
 800a378:	2230      	movs	r2, #48	; 0x30
 800a37a:	2100      	movs	r1, #0
 800a37c:	4618      	mov	r0, r3
 800a37e:	f010 fa7e 	bl	801a87e <memset>

  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 800a382:	2300      	movs	r3, #0
 800a384:	643b      	str	r3, [r7, #64]	; 0x40
 800a386:	e015      	b.n	800a3b4 <low_level_input+0x54>
  {
    RxBuff[i].next=&RxBuff[i+1];
 800a388:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a38a:	1c5a      	adds	r2, r3, #1
 800a38c:	f107 010c 	add.w	r1, r7, #12
 800a390:	4613      	mov	r3, r2
 800a392:	005b      	lsls	r3, r3, #1
 800a394:	4413      	add	r3, r2
 800a396:	009b      	lsls	r3, r3, #2
 800a398:	4419      	add	r1, r3
 800a39a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a39c:	4613      	mov	r3, r2
 800a39e:	005b      	lsls	r3, r3, #1
 800a3a0:	4413      	add	r3, r2
 800a3a2:	009b      	lsls	r3, r3, #2
 800a3a4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a3a8:	4413      	add	r3, r2
 800a3aa:	3b34      	subs	r3, #52	; 0x34
 800a3ac:	6019      	str	r1, [r3, #0]
  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 800a3ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a3b0:	3301      	adds	r3, #1
 800a3b2:	643b      	str	r3, [r7, #64]	; 0x40
 800a3b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a3b6:	2b02      	cmp	r3, #2
 800a3b8:	d9e6      	bls.n	800a388 <low_level_input+0x28>
  }

  if (HAL_ETH_GetRxDataBuffer(&heth, RxBuff) == HAL_OK)
 800a3ba:	f107 030c 	add.w	r3, r7, #12
 800a3be:	4619      	mov	r1, r3
 800a3c0:	4818      	ldr	r0, [pc, #96]	; (800a424 <low_level_input+0xc4>)
 800a3c2:	f7f9 ffa0 	bl	8004306 <HAL_ETH_GetRxDataBuffer>
 800a3c6:	4603      	mov	r3, r0
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d125      	bne.n	800a418 <low_level_input+0xb8>
  {
    HAL_ETH_GetRxDataLength(&heth, &framelength);
 800a3cc:	f107 0308 	add.w	r3, r7, #8
 800a3d0:	4619      	mov	r1, r3
 800a3d2:	4814      	ldr	r0, [pc, #80]	; (800a424 <low_level_input+0xc4>)
 800a3d4:	f7fa f835 	bl	8004442 <HAL_ETH_GetRxDataLength>

    /* Build Rx descriptor to be ready for next data reception */
    HAL_ETH_BuildRxDescriptors(&heth);
 800a3d8:	4812      	ldr	r0, [pc, #72]	; (800a424 <low_level_input+0xc4>)
 800a3da:	f7fa f865 	bl	80044a8 <HAL_ETH_BuildRxDescriptors>

#if !defined(DUAL_CORE) || defined(CORE_CM7)
    /* Invalidate data cache for ETH Rx Buffers */
    SCB_InvalidateDCache_by_Addr((uint32_t *)RxBuff->buffer, framelength);
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	68ba      	ldr	r2, [r7, #8]
 800a3e2:	4611      	mov	r1, r2
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	f7ff fceb 	bl	8009dc0 <SCB_InvalidateDCache_by_Addr>
#endif

    custom_pbuf  = (struct pbuf_custom*)LWIP_MEMPOOL_ALLOC(RX_POOL);
 800a3ea:	480f      	ldr	r0, [pc, #60]	; (800a428 <low_level_input+0xc8>)
 800a3ec:	f006 f892 	bl	8010514 <memp_malloc_pool>
 800a3f0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(custom_pbuf != NULL)
 800a3f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d00f      	beq.n	800a418 <low_level_input+0xb8>
    {
      custom_pbuf->custom_free_function = pbuf_free_custom;
 800a3f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3fa:	4a0c      	ldr	r2, [pc, #48]	; (800a42c <low_level_input+0xcc>)
 800a3fc:	611a      	str	r2, [r3, #16]
      p = pbuf_alloced_custom(PBUF_RAW, framelength, PBUF_REF, custom_pbuf, RxBuff->buffer, framelength);
 800a3fe:	68bb      	ldr	r3, [r7, #8]
 800a400:	b299      	uxth	r1, r3
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	68ba      	ldr	r2, [r7, #8]
 800a406:	b292      	uxth	r2, r2
 800a408:	9201      	str	r2, [sp, #4]
 800a40a:	9300      	str	r3, [sp, #0]
 800a40c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a40e:	2241      	movs	r2, #65	; 0x41
 800a410:	2000      	movs	r0, #0
 800a412:	f006 fdfd 	bl	8011010 <pbuf_alloced_custom>
 800a416:	6478      	str	r0, [r7, #68]	; 0x44
    }
  }

  return p;
 800a418:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800a41a:	4618      	mov	r0, r3
 800a41c:	3748      	adds	r7, #72	; 0x48
 800a41e:	46bd      	mov	sp, r7
 800a420:	bd80      	pop	{r7, pc}
 800a422:	bf00      	nop
 800a424:	24009cfc 	.word	0x24009cfc
 800a428:	080200fc 	.word	0x080200fc
 800a42c:	0800a4dd 	.word	0x0800a4dd

0800a430 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b084      	sub	sp, #16
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800a43c:	4b0f      	ldr	r3, [pc, #60]	; (800a47c <ethernetif_input+0x4c>)
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a444:	4618      	mov	r0, r3
 800a446:	f000 faa7 	bl	800a998 <osSemaphoreWait>
 800a44a:	4603      	mov	r3, r0
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d1f5      	bne.n	800a43c <ethernetif_input+0xc>
    {
      do
      {
        p = low_level_input( netif );
 800a450:	68f8      	ldr	r0, [r7, #12]
 800a452:	f7ff ff85 	bl	800a360 <low_level_input>
 800a456:	60b8      	str	r0, [r7, #8]
        if (p != NULL)
 800a458:	68bb      	ldr	r3, [r7, #8]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d00a      	beq.n	800a474 <ethernetif_input+0x44>
        {
          if (netif->input( p, netif) != ERR_OK )
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	691b      	ldr	r3, [r3, #16]
 800a462:	68f9      	ldr	r1, [r7, #12]
 800a464:	68b8      	ldr	r0, [r7, #8]
 800a466:	4798      	blx	r3
 800a468:	4603      	mov	r3, r0
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d002      	beq.n	800a474 <ethernetif_input+0x44>
          {
            pbuf_free(p);
 800a46e:	68b8      	ldr	r0, [r7, #8]
 800a470:	f006 ff88 	bl	8011384 <pbuf_free>
          }
        }
      } while(p!=NULL);
 800a474:	68bb      	ldr	r3, [r7, #8]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d1ea      	bne.n	800a450 <ethernetif_input+0x20>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800a47a:	e7df      	b.n	800a43c <ethernetif_input+0xc>
 800a47c:	24000a80 	.word	0x24000a80

0800a480 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800a480:	b580      	push	{r7, lr}
 800a482:	b082      	sub	sp, #8
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d106      	bne.n	800a49c <ethernetif_init+0x1c>
 800a48e:	4b0e      	ldr	r3, [pc, #56]	; (800a4c8 <ethernetif_init+0x48>)
 800a490:	f44f 7212 	mov.w	r2, #584	; 0x248
 800a494:	490d      	ldr	r1, [pc, #52]	; (800a4cc <ethernetif_init+0x4c>)
 800a496:	480e      	ldr	r0, [pc, #56]	; (800a4d0 <ethernetif_init+0x50>)
 800a498:	f010 fe32 	bl	801b100 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2273      	movs	r2, #115	; 0x73
 800a4a0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	2274      	movs	r2, #116	; 0x74
 800a4a8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	4a09      	ldr	r2, [pc, #36]	; (800a4d4 <ethernetif_init+0x54>)
 800a4b0:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	4a08      	ldr	r2, [pc, #32]	; (800a4d8 <ethernetif_init+0x58>)
 800a4b6:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800a4b8:	6878      	ldr	r0, [r7, #4]
 800a4ba:	f7ff fd91 	bl	8009fe0 <low_level_init>

  return ERR_OK;
 800a4be:	2300      	movs	r3, #0
}
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	3708      	adds	r7, #8
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	bd80      	pop	{r7, pc}
 800a4c8:	0801d334 	.word	0x0801d334
 800a4cc:	0801d350 	.word	0x0801d350
 800a4d0:	0801d360 	.word	0x0801d360
 800a4d4:	0800dd4d 	.word	0x0800dd4d
 800a4d8:	0800a26d 	.word	0x0800a26d

0800a4dc <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b084      	sub	sp, #16
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	60fb      	str	r3, [r7, #12]

  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800a4e8:	68f9      	ldr	r1, [r7, #12]
 800a4ea:	4803      	ldr	r0, [pc, #12]	; (800a4f8 <pbuf_free_custom+0x1c>)
 800a4ec:	f006 f886 	bl	80105fc <memp_free_pool>
}
 800a4f0:	bf00      	nop
 800a4f2:	3710      	adds	r7, #16
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	bd80      	pop	{r7, pc}
 800a4f8:	080200fc 	.word	0x080200fc

0800a4fc <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800a500:	f7f7 fc2a 	bl	8001d58 <HAL_GetTick>
 800a504:	4603      	mov	r3, r0
}
 800a506:	4618      	mov	r0, r3
 800a508:	bd80      	pop	{r7, pc}
	...

0800a50c <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800a510:	4802      	ldr	r0, [pc, #8]	; (800a51c <ETH_PHY_IO_Init+0x10>)
 800a512:	f7fa fc0f 	bl	8004d34 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800a516:	2300      	movs	r3, #0
}
 800a518:	4618      	mov	r0, r3
 800a51a:	bd80      	pop	{r7, pc}
 800a51c:	24009cfc 	.word	0x24009cfc

0800a520 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800a520:	b480      	push	{r7}
 800a522:	af00      	add	r7, sp, #0
  return 0;
 800a524:	2300      	movs	r3, #0
}
 800a526:	4618      	mov	r0, r3
 800a528:	46bd      	mov	sp, r7
 800a52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52e:	4770      	bx	lr

0800a530 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800a530:	b580      	push	{r7, lr}
 800a532:	b084      	sub	sp, #16
 800a534:	af00      	add	r7, sp, #0
 800a536:	60f8      	str	r0, [r7, #12]
 800a538:	60b9      	str	r1, [r7, #8]
 800a53a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	68ba      	ldr	r2, [r7, #8]
 800a540:	68f9      	ldr	r1, [r7, #12]
 800a542:	4807      	ldr	r0, [pc, #28]	; (800a560 <ETH_PHY_IO_ReadReg+0x30>)
 800a544:	f7fa f960 	bl	8004808 <HAL_ETH_ReadPHYRegister>
 800a548:	4603      	mov	r3, r0
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d002      	beq.n	800a554 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800a54e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a552:	e000      	b.n	800a556 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800a554:	2300      	movs	r3, #0
}
 800a556:	4618      	mov	r0, r3
 800a558:	3710      	adds	r7, #16
 800a55a:	46bd      	mov	sp, r7
 800a55c:	bd80      	pop	{r7, pc}
 800a55e:	bf00      	nop
 800a560:	24009cfc 	.word	0x24009cfc

0800a564 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b084      	sub	sp, #16
 800a568:	af00      	add	r7, sp, #0
 800a56a:	60f8      	str	r0, [r7, #12]
 800a56c:	60b9      	str	r1, [r7, #8]
 800a56e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	68ba      	ldr	r2, [r7, #8]
 800a574:	68f9      	ldr	r1, [r7, #12]
 800a576:	4807      	ldr	r0, [pc, #28]	; (800a594 <ETH_PHY_IO_WriteReg+0x30>)
 800a578:	f7fa f99a 	bl	80048b0 <HAL_ETH_WritePHYRegister>
 800a57c:	4603      	mov	r3, r0
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d002      	beq.n	800a588 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800a582:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a586:	e000      	b.n	800a58a <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800a588:	2300      	movs	r3, #0
}
 800a58a:	4618      	mov	r0, r3
 800a58c:	3710      	adds	r7, #16
 800a58e:	46bd      	mov	sp, r7
 800a590:	bd80      	pop	{r7, pc}
 800a592:	bf00      	nop
 800a594:	24009cfc 	.word	0x24009cfc

0800a598 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800a598:	b580      	push	{r7, lr}
 800a59a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800a59c:	f7f7 fbdc 	bl	8001d58 <HAL_GetTick>
 800a5a0:	4603      	mov	r3, r0
}
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	bd80      	pop	{r7, pc}
	...

0800a5a8 <ethernet_link_thread>:
  * @param  argument: netif
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b0a0      	sub	sp, #128	; 0x80
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf;
  uint32_t PHYLinkState;
  uint32_t linkchanged = 0, speed = 0, duplex =0;
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	67bb      	str	r3, [r7, #120]	; 0x78
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	673b      	str	r3, [r7, #112]	; 0x70

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800a5c0:	483a      	ldr	r0, [pc, #232]	; (800a6ac <ethernet_link_thread+0x104>)
 800a5c2:	f7f7 faf2 	bl	8001baa <LAN8742_GetLinkState>
 800a5c6:	4603      	mov	r3, r0
 800a5c8:	66fb      	str	r3, [r7, #108]	; 0x6c

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800a5ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a5cc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a5d0:	089b      	lsrs	r3, r3, #2
 800a5d2:	f003 0301 	and.w	r3, r3, #1
 800a5d6:	b2db      	uxtb	r3, r3
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d00c      	beq.n	800a5f6 <ethernet_link_thread+0x4e>
 800a5dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a5de:	2b01      	cmp	r3, #1
 800a5e0:	d809      	bhi.n	800a5f6 <ethernet_link_thread+0x4e>
  {
    HAL_ETH_Stop_IT(&heth);
 800a5e2:	4833      	ldr	r0, [pc, #204]	; (800a6b0 <ethernet_link_thread+0x108>)
 800a5e4:	f7f9 fc9c 	bl	8003f20 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800a5e8:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800a5ea:	f006 fa8b 	bl	8010b04 <netif_set_down>
    netif_set_link_down(netif);
 800a5ee:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800a5f0:	f006 faee 	bl	8010bd0 <netif_set_link_down>
 800a5f4:	e055      	b.n	800a6a2 <ethernet_link_thread+0xfa>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800a5f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a5f8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a5fc:	f003 0304 	and.w	r3, r3, #4
 800a600:	2b00      	cmp	r3, #0
 800a602:	d14e      	bne.n	800a6a2 <ethernet_link_thread+0xfa>
 800a604:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a606:	2b01      	cmp	r3, #1
 800a608:	d94b      	bls.n	800a6a2 <ethernet_link_thread+0xfa>
  {
    switch (PHYLinkState)
 800a60a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a60c:	3b02      	subs	r3, #2
 800a60e:	2b03      	cmp	r3, #3
 800a610:	d82a      	bhi.n	800a668 <ethernet_link_thread+0xc0>
 800a612:	a201      	add	r2, pc, #4	; (adr r2, 800a618 <ethernet_link_thread+0x70>)
 800a614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a618:	0800a629 	.word	0x0800a629
 800a61c:	0800a63b 	.word	0x0800a63b
 800a620:	0800a64b 	.word	0x0800a64b
 800a624:	0800a65b 	.word	0x0800a65b
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800a628:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a62c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800a62e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a632:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800a634:	2301      	movs	r3, #1
 800a636:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800a638:	e017      	b.n	800a66a <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800a63a:	2300      	movs	r3, #0
 800a63c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800a63e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a642:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800a644:	2301      	movs	r3, #1
 800a646:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800a648:	e00f      	b.n	800a66a <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800a64a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a64e:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800a650:	2300      	movs	r3, #0
 800a652:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800a654:	2301      	movs	r3, #1
 800a656:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800a658:	e007      	b.n	800a66a <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800a65a:	2300      	movs	r3, #0
 800a65c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800a65e:	2300      	movs	r3, #0
 800a660:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800a662:	2301      	movs	r3, #1
 800a664:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800a666:	e000      	b.n	800a66a <ethernet_link_thread+0xc2>
    default:
      break;
 800a668:	bf00      	nop
    }

    if(linkchanged)
 800a66a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d018      	beq.n	800a6a2 <ethernet_link_thread+0xfa>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800a670:	f107 0308 	add.w	r3, r7, #8
 800a674:	4619      	mov	r1, r3
 800a676:	480e      	ldr	r0, [pc, #56]	; (800a6b0 <ethernet_link_thread+0x108>)
 800a678:	f7fa f96e 	bl	8004958 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800a67c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a67e:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 800a680:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a682:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800a684:	f107 0308 	add.w	r3, r7, #8
 800a688:	4619      	mov	r1, r3
 800a68a:	4809      	ldr	r0, [pc, #36]	; (800a6b0 <ethernet_link_thread+0x108>)
 800a68c:	f7fa fb38 	bl	8004d00 <HAL_ETH_SetMACConfig>

      HAL_ETH_Start_IT(&heth);
 800a690:	4807      	ldr	r0, [pc, #28]	; (800a6b0 <ethernet_link_thread+0x108>)
 800a692:	f7f9 fbc0 	bl	8003e16 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800a696:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800a698:	f006 f9c8 	bl	8010a2c <netif_set_up>
      netif_set_link_up(netif);
 800a69c:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800a69e:	f006 fa63 	bl	8010b68 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800a6a2:	2064      	movs	r0, #100	; 0x64
 800a6a4:	f000 f893 	bl	800a7ce <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800a6a8:	e78a      	b.n	800a5c0 <ethernet_link_thread+0x18>
 800a6aa:	bf00      	nop
 800a6ac:	24009cdc 	.word	0x24009cdc
 800a6b0:	24009cfc 	.word	0x24009cfc

0800a6b4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800a6b4:	b480      	push	{r7}
 800a6b6:	b085      	sub	sp, #20
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	4603      	mov	r3, r0
 800a6bc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800a6be:	2300      	movs	r3, #0
 800a6c0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800a6c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a6c6:	2b84      	cmp	r3, #132	; 0x84
 800a6c8:	d005      	beq.n	800a6d6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800a6ca:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	4413      	add	r3, r2
 800a6d2:	3303      	adds	r3, #3
 800a6d4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800a6d6:	68fb      	ldr	r3, [r7, #12]
}
 800a6d8:	4618      	mov	r0, r3
 800a6da:	3714      	adds	r7, #20
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e2:	4770      	bx	lr

0800a6e4 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800a6e4:	b480      	push	{r7}
 800a6e6:	b083      	sub	sp, #12
 800a6e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a6ea:	f3ef 8305 	mrs	r3, IPSR
 800a6ee:	607b      	str	r3, [r7, #4]
  return(result);
 800a6f0:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	bf14      	ite	ne
 800a6f6:	2301      	movne	r3, #1
 800a6f8:	2300      	moveq	r3, #0
 800a6fa:	b2db      	uxtb	r3, r3
}
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	370c      	adds	r7, #12
 800a700:	46bd      	mov	sp, r7
 800a702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a706:	4770      	bx	lr

0800a708 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800a70c:	f002 f85a 	bl	800c7c4 <vTaskStartScheduler>
  
  return osOK;
 800a710:	2300      	movs	r3, #0
}
 800a712:	4618      	mov	r0, r3
 800a714:	bd80      	pop	{r7, pc}

0800a716 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800a716:	b580      	push	{r7, lr}
 800a718:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800a71a:	f7ff ffe3 	bl	800a6e4 <inHandlerMode>
 800a71e:	4603      	mov	r3, r0
 800a720:	2b00      	cmp	r3, #0
 800a722:	d003      	beq.n	800a72c <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800a724:	f002 f966 	bl	800c9f4 <xTaskGetTickCountFromISR>
 800a728:	4603      	mov	r3, r0
 800a72a:	e002      	b.n	800a732 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800a72c:	f002 f952 	bl	800c9d4 <xTaskGetTickCount>
 800a730:	4603      	mov	r3, r0
  }
}
 800a732:	4618      	mov	r0, r3
 800a734:	bd80      	pop	{r7, pc}

0800a736 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800a736:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a738:	b089      	sub	sp, #36	; 0x24
 800a73a:	af04      	add	r7, sp, #16
 800a73c:	6078      	str	r0, [r7, #4]
 800a73e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	695b      	ldr	r3, [r3, #20]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d020      	beq.n	800a78a <osThreadCreate+0x54>
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	699b      	ldr	r3, [r3, #24]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d01c      	beq.n	800a78a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	685c      	ldr	r4, [r3, #4]
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681d      	ldr	r5, [r3, #0]
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	691e      	ldr	r6, [r3, #16]
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a762:	4618      	mov	r0, r3
 800a764:	f7ff ffa6 	bl	800a6b4 <makeFreeRtosPriority>
 800a768:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	695b      	ldr	r3, [r3, #20]
 800a76e:	687a      	ldr	r2, [r7, #4]
 800a770:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a772:	9202      	str	r2, [sp, #8]
 800a774:	9301      	str	r3, [sp, #4]
 800a776:	9100      	str	r1, [sp, #0]
 800a778:	683b      	ldr	r3, [r7, #0]
 800a77a:	4632      	mov	r2, r6
 800a77c:	4629      	mov	r1, r5
 800a77e:	4620      	mov	r0, r4
 800a780:	f001 fe5d 	bl	800c43e <xTaskCreateStatic>
 800a784:	4603      	mov	r3, r0
 800a786:	60fb      	str	r3, [r7, #12]
 800a788:	e01c      	b.n	800a7c4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	685c      	ldr	r4, [r3, #4]
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a796:	b29e      	uxth	r6, r3
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a79e:	4618      	mov	r0, r3
 800a7a0:	f7ff ff88 	bl	800a6b4 <makeFreeRtosPriority>
 800a7a4:	4602      	mov	r2, r0
 800a7a6:	f107 030c 	add.w	r3, r7, #12
 800a7aa:	9301      	str	r3, [sp, #4]
 800a7ac:	9200      	str	r2, [sp, #0]
 800a7ae:	683b      	ldr	r3, [r7, #0]
 800a7b0:	4632      	mov	r2, r6
 800a7b2:	4629      	mov	r1, r5
 800a7b4:	4620      	mov	r0, r4
 800a7b6:	f001 fe9c 	bl	800c4f2 <xTaskCreate>
 800a7ba:	4603      	mov	r3, r0
 800a7bc:	2b01      	cmp	r3, #1
 800a7be:	d001      	beq.n	800a7c4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	e000      	b.n	800a7c6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800a7c4:	68fb      	ldr	r3, [r7, #12]
}
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	3714      	adds	r7, #20
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a7ce <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800a7ce:	b580      	push	{r7, lr}
 800a7d0:	b084      	sub	sp, #16
 800a7d2:	af00      	add	r7, sp, #0
 800a7d4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d001      	beq.n	800a7e4 <osDelay+0x16>
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	e000      	b.n	800a7e6 <osDelay+0x18>
 800a7e4:	2301      	movs	r3, #1
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	f001 ffb8 	bl	800c75c <vTaskDelay>
  
  return osOK;
 800a7ec:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	3710      	adds	r7, #16
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	bd80      	pop	{r7, pc}

0800a7f6 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800a7f6:	b580      	push	{r7, lr}
 800a7f8:	b082      	sub	sp, #8
 800a7fa:	af00      	add	r7, sp, #0
 800a7fc:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	685b      	ldr	r3, [r3, #4]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d007      	beq.n	800a816 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	685b      	ldr	r3, [r3, #4]
 800a80a:	4619      	mov	r1, r3
 800a80c:	2001      	movs	r0, #1
 800a80e:	f001 f85a 	bl	800b8c6 <xQueueCreateMutexStatic>
 800a812:	4603      	mov	r3, r0
 800a814:	e003      	b.n	800a81e <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800a816:	2001      	movs	r0, #1
 800a818:	f001 f83d 	bl	800b896 <xQueueCreateMutex>
 800a81c:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800a81e:	4618      	mov	r0, r3
 800a820:	3708      	adds	r7, #8
 800a822:	46bd      	mov	sp, r7
 800a824:	bd80      	pop	{r7, pc}
	...

0800a828 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800a828:	b580      	push	{r7, lr}
 800a82a:	b084      	sub	sp, #16
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
 800a830:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800a832:	2300      	movs	r3, #0
 800a834:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d101      	bne.n	800a840 <osMutexWait+0x18>
    return osErrorParameter;
 800a83c:	2380      	movs	r3, #128	; 0x80
 800a83e:	e03a      	b.n	800a8b6 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800a840:	2300      	movs	r3, #0
 800a842:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800a844:	683b      	ldr	r3, [r7, #0]
 800a846:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a84a:	d103      	bne.n	800a854 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800a84c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a850:	60fb      	str	r3, [r7, #12]
 800a852:	e009      	b.n	800a868 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800a854:	683b      	ldr	r3, [r7, #0]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d006      	beq.n	800a868 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800a85a:	683b      	ldr	r3, [r7, #0]
 800a85c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	2b00      	cmp	r3, #0
 800a862:	d101      	bne.n	800a868 <osMutexWait+0x40>
      ticks = 1;
 800a864:	2301      	movs	r3, #1
 800a866:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800a868:	f7ff ff3c 	bl	800a6e4 <inHandlerMode>
 800a86c:	4603      	mov	r3, r0
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d017      	beq.n	800a8a2 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800a872:	f107 0308 	add.w	r3, r7, #8
 800a876:	461a      	mov	r2, r3
 800a878:	2100      	movs	r1, #0
 800a87a:	6878      	ldr	r0, [r7, #4]
 800a87c:	f001 fc3a 	bl	800c0f4 <xQueueReceiveFromISR>
 800a880:	4603      	mov	r3, r0
 800a882:	2b01      	cmp	r3, #1
 800a884:	d001      	beq.n	800a88a <osMutexWait+0x62>
      return osErrorOS;
 800a886:	23ff      	movs	r3, #255	; 0xff
 800a888:	e015      	b.n	800a8b6 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800a88a:	68bb      	ldr	r3, [r7, #8]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d011      	beq.n	800a8b4 <osMutexWait+0x8c>
 800a890:	4b0b      	ldr	r3, [pc, #44]	; (800a8c0 <osMutexWait+0x98>)
 800a892:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a896:	601a      	str	r2, [r3, #0]
 800a898:	f3bf 8f4f 	dsb	sy
 800a89c:	f3bf 8f6f 	isb	sy
 800a8a0:	e008      	b.n	800a8b4 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800a8a2:	68f9      	ldr	r1, [r7, #12]
 800a8a4:	6878      	ldr	r0, [r7, #4]
 800a8a6:	f001 fb1d 	bl	800bee4 <xQueueSemaphoreTake>
 800a8aa:	4603      	mov	r3, r0
 800a8ac:	2b01      	cmp	r3, #1
 800a8ae:	d001      	beq.n	800a8b4 <osMutexWait+0x8c>
    return osErrorOS;
 800a8b0:	23ff      	movs	r3, #255	; 0xff
 800a8b2:	e000      	b.n	800a8b6 <osMutexWait+0x8e>
  }
  
  return osOK;
 800a8b4:	2300      	movs	r3, #0
}
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	3710      	adds	r7, #16
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	bd80      	pop	{r7, pc}
 800a8be:	bf00      	nop
 800a8c0:	e000ed04 	.word	0xe000ed04

0800a8c4 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b084      	sub	sp, #16
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800a8d4:	f7ff ff06 	bl	800a6e4 <inHandlerMode>
 800a8d8:	4603      	mov	r3, r0
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d016      	beq.n	800a90c <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800a8de:	f107 0308 	add.w	r3, r7, #8
 800a8e2:	4619      	mov	r1, r3
 800a8e4:	6878      	ldr	r0, [r7, #4]
 800a8e6:	f001 f997 	bl	800bc18 <xQueueGiveFromISR>
 800a8ea:	4603      	mov	r3, r0
 800a8ec:	2b01      	cmp	r3, #1
 800a8ee:	d001      	beq.n	800a8f4 <osMutexRelease+0x30>
      return osErrorOS;
 800a8f0:	23ff      	movs	r3, #255	; 0xff
 800a8f2:	e017      	b.n	800a924 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a8f4:	68bb      	ldr	r3, [r7, #8]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d013      	beq.n	800a922 <osMutexRelease+0x5e>
 800a8fa:	4b0c      	ldr	r3, [pc, #48]	; (800a92c <osMutexRelease+0x68>)
 800a8fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a900:	601a      	str	r2, [r3, #0]
 800a902:	f3bf 8f4f 	dsb	sy
 800a906:	f3bf 8f6f 	isb	sy
 800a90a:	e00a      	b.n	800a922 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800a90c:	2300      	movs	r3, #0
 800a90e:	2200      	movs	r2, #0
 800a910:	2100      	movs	r1, #0
 800a912:	6878      	ldr	r0, [r7, #4]
 800a914:	f000 fff2 	bl	800b8fc <xQueueGenericSend>
 800a918:	4603      	mov	r3, r0
 800a91a:	2b01      	cmp	r3, #1
 800a91c:	d001      	beq.n	800a922 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800a91e:	23ff      	movs	r3, #255	; 0xff
 800a920:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800a922:	68fb      	ldr	r3, [r7, #12]
}
 800a924:	4618      	mov	r0, r3
 800a926:	3710      	adds	r7, #16
 800a928:	46bd      	mov	sp, r7
 800a92a:	bd80      	pop	{r7, pc}
 800a92c:	e000ed04 	.word	0xe000ed04

0800a930 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800a930:	b580      	push	{r7, lr}
 800a932:	b086      	sub	sp, #24
 800a934:	af02      	add	r7, sp, #8
 800a936:	6078      	str	r0, [r7, #4]
 800a938:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	685b      	ldr	r3, [r3, #4]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d010      	beq.n	800a964 <osSemaphoreCreate+0x34>
    if (count == 1) {
 800a942:	683b      	ldr	r3, [r7, #0]
 800a944:	2b01      	cmp	r3, #1
 800a946:	d10b      	bne.n	800a960 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	685a      	ldr	r2, [r3, #4]
 800a94c:	2303      	movs	r3, #3
 800a94e:	9300      	str	r3, [sp, #0]
 800a950:	4613      	mov	r3, r2
 800a952:	2200      	movs	r2, #0
 800a954:	2100      	movs	r1, #0
 800a956:	2001      	movs	r0, #1
 800a958:	f000 feb2 	bl	800b6c0 <xQueueGenericCreateStatic>
 800a95c:	4603      	mov	r3, r0
 800a95e:	e016      	b.n	800a98e <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800a960:	2300      	movs	r3, #0
 800a962:	e014      	b.n	800a98e <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 800a964:	683b      	ldr	r3, [r7, #0]
 800a966:	2b01      	cmp	r3, #1
 800a968:	d110      	bne.n	800a98c <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 800a96a:	2203      	movs	r2, #3
 800a96c:	2100      	movs	r1, #0
 800a96e:	2001      	movs	r0, #1
 800a970:	f000 ff19 	bl	800b7a6 <xQueueGenericCreate>
 800a974:	60f8      	str	r0, [r7, #12]
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d005      	beq.n	800a988 <osSemaphoreCreate+0x58>
 800a97c:	2300      	movs	r3, #0
 800a97e:	2200      	movs	r2, #0
 800a980:	2100      	movs	r1, #0
 800a982:	68f8      	ldr	r0, [r7, #12]
 800a984:	f000 ffba 	bl	800b8fc <xQueueGenericSend>
      return sema;
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	e000      	b.n	800a98e <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800a98c:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800a98e:	4618      	mov	r0, r3
 800a990:	3710      	adds	r7, #16
 800a992:	46bd      	mov	sp, r7
 800a994:	bd80      	pop	{r7, pc}
	...

0800a998 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800a998:	b580      	push	{r7, lr}
 800a99a:	b084      	sub	sp, #16
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
 800a9a0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d101      	bne.n	800a9b0 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800a9ac:	2380      	movs	r3, #128	; 0x80
 800a9ae:	e03a      	b.n	800aa26 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800a9b4:	683b      	ldr	r3, [r7, #0]
 800a9b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a9ba:	d103      	bne.n	800a9c4 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800a9bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a9c0:	60fb      	str	r3, [r7, #12]
 800a9c2:	e009      	b.n	800a9d8 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d006      	beq.n	800a9d8 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800a9ca:	683b      	ldr	r3, [r7, #0]
 800a9cc:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d101      	bne.n	800a9d8 <osSemaphoreWait+0x40>
      ticks = 1;
 800a9d4:	2301      	movs	r3, #1
 800a9d6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800a9d8:	f7ff fe84 	bl	800a6e4 <inHandlerMode>
 800a9dc:	4603      	mov	r3, r0
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d017      	beq.n	800aa12 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800a9e2:	f107 0308 	add.w	r3, r7, #8
 800a9e6:	461a      	mov	r2, r3
 800a9e8:	2100      	movs	r1, #0
 800a9ea:	6878      	ldr	r0, [r7, #4]
 800a9ec:	f001 fb82 	bl	800c0f4 <xQueueReceiveFromISR>
 800a9f0:	4603      	mov	r3, r0
 800a9f2:	2b01      	cmp	r3, #1
 800a9f4:	d001      	beq.n	800a9fa <osSemaphoreWait+0x62>
      return osErrorOS;
 800a9f6:	23ff      	movs	r3, #255	; 0xff
 800a9f8:	e015      	b.n	800aa26 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800a9fa:	68bb      	ldr	r3, [r7, #8]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d011      	beq.n	800aa24 <osSemaphoreWait+0x8c>
 800aa00:	4b0b      	ldr	r3, [pc, #44]	; (800aa30 <osSemaphoreWait+0x98>)
 800aa02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa06:	601a      	str	r2, [r3, #0]
 800aa08:	f3bf 8f4f 	dsb	sy
 800aa0c:	f3bf 8f6f 	isb	sy
 800aa10:	e008      	b.n	800aa24 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800aa12:	68f9      	ldr	r1, [r7, #12]
 800aa14:	6878      	ldr	r0, [r7, #4]
 800aa16:	f001 fa65 	bl	800bee4 <xQueueSemaphoreTake>
 800aa1a:	4603      	mov	r3, r0
 800aa1c:	2b01      	cmp	r3, #1
 800aa1e:	d001      	beq.n	800aa24 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800aa20:	23ff      	movs	r3, #255	; 0xff
 800aa22:	e000      	b.n	800aa26 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800aa24:	2300      	movs	r3, #0
}
 800aa26:	4618      	mov	r0, r3
 800aa28:	3710      	adds	r7, #16
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	bd80      	pop	{r7, pc}
 800aa2e:	bf00      	nop
 800aa30:	e000ed04 	.word	0xe000ed04

0800aa34 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b084      	sub	sp, #16
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800aa40:	2300      	movs	r3, #0
 800aa42:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800aa44:	f7ff fe4e 	bl	800a6e4 <inHandlerMode>
 800aa48:	4603      	mov	r3, r0
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d016      	beq.n	800aa7c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800aa4e:	f107 0308 	add.w	r3, r7, #8
 800aa52:	4619      	mov	r1, r3
 800aa54:	6878      	ldr	r0, [r7, #4]
 800aa56:	f001 f8df 	bl	800bc18 <xQueueGiveFromISR>
 800aa5a:	4603      	mov	r3, r0
 800aa5c:	2b01      	cmp	r3, #1
 800aa5e:	d001      	beq.n	800aa64 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800aa60:	23ff      	movs	r3, #255	; 0xff
 800aa62:	e017      	b.n	800aa94 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800aa64:	68bb      	ldr	r3, [r7, #8]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d013      	beq.n	800aa92 <osSemaphoreRelease+0x5e>
 800aa6a:	4b0c      	ldr	r3, [pc, #48]	; (800aa9c <osSemaphoreRelease+0x68>)
 800aa6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa70:	601a      	str	r2, [r3, #0]
 800aa72:	f3bf 8f4f 	dsb	sy
 800aa76:	f3bf 8f6f 	isb	sy
 800aa7a:	e00a      	b.n	800aa92 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	2200      	movs	r2, #0
 800aa80:	2100      	movs	r1, #0
 800aa82:	6878      	ldr	r0, [r7, #4]
 800aa84:	f000 ff3a 	bl	800b8fc <xQueueGenericSend>
 800aa88:	4603      	mov	r3, r0
 800aa8a:	2b01      	cmp	r3, #1
 800aa8c:	d001      	beq.n	800aa92 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800aa8e:	23ff      	movs	r3, #255	; 0xff
 800aa90:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800aa92:	68fb      	ldr	r3, [r7, #12]
}
 800aa94:	4618      	mov	r0, r3
 800aa96:	3710      	adds	r7, #16
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	bd80      	pop	{r7, pc}
 800aa9c:	e000ed04 	.word	0xe000ed04

0800aaa0 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800aaa0:	b590      	push	{r4, r7, lr}
 800aaa2:	b085      	sub	sp, #20
 800aaa4:	af02      	add	r7, sp, #8
 800aaa6:	6078      	str	r0, [r7, #4]
 800aaa8:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	689b      	ldr	r3, [r3, #8]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d012      	beq.n	800aad8 <osMessageCreate+0x38>
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	68db      	ldr	r3, [r3, #12]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d00e      	beq.n	800aad8 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	6818      	ldr	r0, [r3, #0]
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	6859      	ldr	r1, [r3, #4]
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	689a      	ldr	r2, [r3, #8]
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	68dc      	ldr	r4, [r3, #12]
 800aaca:	2300      	movs	r3, #0
 800aacc:	9300      	str	r3, [sp, #0]
 800aace:	4623      	mov	r3, r4
 800aad0:	f000 fdf6 	bl	800b6c0 <xQueueGenericCreateStatic>
 800aad4:	4603      	mov	r3, r0
 800aad6:	e008      	b.n	800aaea <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	6818      	ldr	r0, [r3, #0]
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	685b      	ldr	r3, [r3, #4]
 800aae0:	2200      	movs	r2, #0
 800aae2:	4619      	mov	r1, r3
 800aae4:	f000 fe5f 	bl	800b7a6 <xQueueGenericCreate>
 800aae8:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800aaea:	4618      	mov	r0, r3
 800aaec:	370c      	adds	r7, #12
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	bd90      	pop	{r4, r7, pc}
	...

0800aaf4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	b086      	sub	sp, #24
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	60f8      	str	r0, [r7, #12]
 800aafc:	60b9      	str	r1, [r7, #8]
 800aafe:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800ab00:	2300      	movs	r3, #0
 800ab02:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800ab08:	697b      	ldr	r3, [r7, #20]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d101      	bne.n	800ab12 <osMessagePut+0x1e>
    ticks = 1;
 800ab0e:	2301      	movs	r3, #1
 800ab10:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800ab12:	f7ff fde7 	bl	800a6e4 <inHandlerMode>
 800ab16:	4603      	mov	r3, r0
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d018      	beq.n	800ab4e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800ab1c:	f107 0210 	add.w	r2, r7, #16
 800ab20:	f107 0108 	add.w	r1, r7, #8
 800ab24:	2300      	movs	r3, #0
 800ab26:	68f8      	ldr	r0, [r7, #12]
 800ab28:	f000 ffe2 	bl	800baf0 <xQueueGenericSendFromISR>
 800ab2c:	4603      	mov	r3, r0
 800ab2e:	2b01      	cmp	r3, #1
 800ab30:	d001      	beq.n	800ab36 <osMessagePut+0x42>
      return osErrorOS;
 800ab32:	23ff      	movs	r3, #255	; 0xff
 800ab34:	e018      	b.n	800ab68 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ab36:	693b      	ldr	r3, [r7, #16]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d014      	beq.n	800ab66 <osMessagePut+0x72>
 800ab3c:	4b0c      	ldr	r3, [pc, #48]	; (800ab70 <osMessagePut+0x7c>)
 800ab3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab42:	601a      	str	r2, [r3, #0]
 800ab44:	f3bf 8f4f 	dsb	sy
 800ab48:	f3bf 8f6f 	isb	sy
 800ab4c:	e00b      	b.n	800ab66 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800ab4e:	f107 0108 	add.w	r1, r7, #8
 800ab52:	2300      	movs	r3, #0
 800ab54:	697a      	ldr	r2, [r7, #20]
 800ab56:	68f8      	ldr	r0, [r7, #12]
 800ab58:	f000 fed0 	bl	800b8fc <xQueueGenericSend>
 800ab5c:	4603      	mov	r3, r0
 800ab5e:	2b01      	cmp	r3, #1
 800ab60:	d001      	beq.n	800ab66 <osMessagePut+0x72>
      return osErrorOS;
 800ab62:	23ff      	movs	r3, #255	; 0xff
 800ab64:	e000      	b.n	800ab68 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800ab66:	2300      	movs	r3, #0
}
 800ab68:	4618      	mov	r0, r3
 800ab6a:	3718      	adds	r7, #24
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	bd80      	pop	{r7, pc}
 800ab70:	e000ed04 	.word	0xe000ed04

0800ab74 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800ab74:	b590      	push	{r4, r7, lr}
 800ab76:	b08b      	sub	sp, #44	; 0x2c
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	60f8      	str	r0, [r7, #12]
 800ab7c:	60b9      	str	r1, [r7, #8]
 800ab7e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800ab80:	68bb      	ldr	r3, [r7, #8]
 800ab82:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800ab84:	2300      	movs	r3, #0
 800ab86:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800ab88:	68bb      	ldr	r3, [r7, #8]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d10a      	bne.n	800aba4 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800ab8e:	2380      	movs	r3, #128	; 0x80
 800ab90:	617b      	str	r3, [r7, #20]
    return event;
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	461c      	mov	r4, r3
 800ab96:	f107 0314 	add.w	r3, r7, #20
 800ab9a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ab9e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800aba2:	e054      	b.n	800ac4e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800aba4:	2300      	movs	r3, #0
 800aba6:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800aba8:	2300      	movs	r3, #0
 800abaa:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800abb2:	d103      	bne.n	800abbc <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800abb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800abb8:	627b      	str	r3, [r7, #36]	; 0x24
 800abba:	e009      	b.n	800abd0 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d006      	beq.n	800abd0 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800abc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d101      	bne.n	800abd0 <osMessageGet+0x5c>
      ticks = 1;
 800abcc:	2301      	movs	r3, #1
 800abce:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800abd0:	f7ff fd88 	bl	800a6e4 <inHandlerMode>
 800abd4:	4603      	mov	r3, r0
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d01c      	beq.n	800ac14 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800abda:	f107 0220 	add.w	r2, r7, #32
 800abde:	f107 0314 	add.w	r3, r7, #20
 800abe2:	3304      	adds	r3, #4
 800abe4:	4619      	mov	r1, r3
 800abe6:	68b8      	ldr	r0, [r7, #8]
 800abe8:	f001 fa84 	bl	800c0f4 <xQueueReceiveFromISR>
 800abec:	4603      	mov	r3, r0
 800abee:	2b01      	cmp	r3, #1
 800abf0:	d102      	bne.n	800abf8 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800abf2:	2310      	movs	r3, #16
 800abf4:	617b      	str	r3, [r7, #20]
 800abf6:	e001      	b.n	800abfc <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800abf8:	2300      	movs	r3, #0
 800abfa:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800abfc:	6a3b      	ldr	r3, [r7, #32]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d01d      	beq.n	800ac3e <osMessageGet+0xca>
 800ac02:	4b15      	ldr	r3, [pc, #84]	; (800ac58 <osMessageGet+0xe4>)
 800ac04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac08:	601a      	str	r2, [r3, #0]
 800ac0a:	f3bf 8f4f 	dsb	sy
 800ac0e:	f3bf 8f6f 	isb	sy
 800ac12:	e014      	b.n	800ac3e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800ac14:	f107 0314 	add.w	r3, r7, #20
 800ac18:	3304      	adds	r3, #4
 800ac1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac1c:	4619      	mov	r1, r3
 800ac1e:	68b8      	ldr	r0, [r7, #8]
 800ac20:	f001 f884 	bl	800bd2c <xQueueReceive>
 800ac24:	4603      	mov	r3, r0
 800ac26:	2b01      	cmp	r3, #1
 800ac28:	d102      	bne.n	800ac30 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800ac2a:	2310      	movs	r3, #16
 800ac2c:	617b      	str	r3, [r7, #20]
 800ac2e:	e006      	b.n	800ac3e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800ac30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d101      	bne.n	800ac3a <osMessageGet+0xc6>
 800ac36:	2300      	movs	r3, #0
 800ac38:	e000      	b.n	800ac3c <osMessageGet+0xc8>
 800ac3a:	2340      	movs	r3, #64	; 0x40
 800ac3c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	461c      	mov	r4, r3
 800ac42:	f107 0314 	add.w	r3, r7, #20
 800ac46:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ac4a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800ac4e:	68f8      	ldr	r0, [r7, #12]
 800ac50:	372c      	adds	r7, #44	; 0x2c
 800ac52:	46bd      	mov	sp, r7
 800ac54:	bd90      	pop	{r4, r7, pc}
 800ac56:	bf00      	nop
 800ac58:	e000ed04 	.word	0xe000ed04

0800ac5c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ac5c:	b580      	push	{r7, lr}
 800ac5e:	b08a      	sub	sp, #40	; 0x28
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ac64:	2300      	movs	r3, #0
 800ac66:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ac68:	f001 fe0a 	bl	800c880 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ac6c:	4b57      	ldr	r3, [pc, #348]	; (800adcc <pvPortMalloc+0x170>)
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d101      	bne.n	800ac78 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ac74:	f000 f90c 	bl	800ae90 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ac78:	4b55      	ldr	r3, [pc, #340]	; (800add0 <pvPortMalloc+0x174>)
 800ac7a:	681a      	ldr	r2, [r3, #0]
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	4013      	ands	r3, r2
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	f040 808c 	bne.w	800ad9e <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d01c      	beq.n	800acc6 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800ac8c:	2208      	movs	r2, #8
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	4413      	add	r3, r2
 800ac92:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	f003 0307 	and.w	r3, r3, #7
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d013      	beq.n	800acc6 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	f023 0307 	bic.w	r3, r3, #7
 800aca4:	3308      	adds	r3, #8
 800aca6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	f003 0307 	and.w	r3, r3, #7
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d009      	beq.n	800acc6 <pvPortMalloc+0x6a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800acb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acb6:	f383 8811 	msr	BASEPRI, r3
 800acba:	f3bf 8f6f 	isb	sy
 800acbe:	f3bf 8f4f 	dsb	sy
 800acc2:	617b      	str	r3, [r7, #20]
 800acc4:	e7fe      	b.n	800acc4 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d068      	beq.n	800ad9e <pvPortMalloc+0x142>
 800accc:	4b41      	ldr	r3, [pc, #260]	; (800add4 <pvPortMalloc+0x178>)
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	687a      	ldr	r2, [r7, #4]
 800acd2:	429a      	cmp	r2, r3
 800acd4:	d863      	bhi.n	800ad9e <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800acd6:	4b40      	ldr	r3, [pc, #256]	; (800add8 <pvPortMalloc+0x17c>)
 800acd8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800acda:	4b3f      	ldr	r3, [pc, #252]	; (800add8 <pvPortMalloc+0x17c>)
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ace0:	e004      	b.n	800acec <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800ace2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ace4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ace6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800acec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acee:	685b      	ldr	r3, [r3, #4]
 800acf0:	687a      	ldr	r2, [r7, #4]
 800acf2:	429a      	cmp	r2, r3
 800acf4:	d903      	bls.n	800acfe <pvPortMalloc+0xa2>
 800acf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d1f1      	bne.n	800ace2 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800acfe:	4b33      	ldr	r3, [pc, #204]	; (800adcc <pvPortMalloc+0x170>)
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad04:	429a      	cmp	r2, r3
 800ad06:	d04a      	beq.n	800ad9e <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ad08:	6a3b      	ldr	r3, [r7, #32]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	2208      	movs	r2, #8
 800ad0e:	4413      	add	r3, r2
 800ad10:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ad12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad14:	681a      	ldr	r2, [r3, #0]
 800ad16:	6a3b      	ldr	r3, [r7, #32]
 800ad18:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ad1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad1c:	685a      	ldr	r2, [r3, #4]
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	1ad2      	subs	r2, r2, r3
 800ad22:	2308      	movs	r3, #8
 800ad24:	005b      	lsls	r3, r3, #1
 800ad26:	429a      	cmp	r2, r3
 800ad28:	d91e      	bls.n	800ad68 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ad2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	4413      	add	r3, r2
 800ad30:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ad32:	69bb      	ldr	r3, [r7, #24]
 800ad34:	f003 0307 	and.w	r3, r3, #7
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d009      	beq.n	800ad50 <pvPortMalloc+0xf4>
 800ad3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad40:	f383 8811 	msr	BASEPRI, r3
 800ad44:	f3bf 8f6f 	isb	sy
 800ad48:	f3bf 8f4f 	dsb	sy
 800ad4c:	613b      	str	r3, [r7, #16]
 800ad4e:	e7fe      	b.n	800ad4e <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ad50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad52:	685a      	ldr	r2, [r3, #4]
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	1ad2      	subs	r2, r2, r3
 800ad58:	69bb      	ldr	r3, [r7, #24]
 800ad5a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ad5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad5e:	687a      	ldr	r2, [r7, #4]
 800ad60:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ad62:	69b8      	ldr	r0, [r7, #24]
 800ad64:	f000 f8f6 	bl	800af54 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ad68:	4b1a      	ldr	r3, [pc, #104]	; (800add4 <pvPortMalloc+0x178>)
 800ad6a:	681a      	ldr	r2, [r3, #0]
 800ad6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad6e:	685b      	ldr	r3, [r3, #4]
 800ad70:	1ad3      	subs	r3, r2, r3
 800ad72:	4a18      	ldr	r2, [pc, #96]	; (800add4 <pvPortMalloc+0x178>)
 800ad74:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ad76:	4b17      	ldr	r3, [pc, #92]	; (800add4 <pvPortMalloc+0x178>)
 800ad78:	681a      	ldr	r2, [r3, #0]
 800ad7a:	4b18      	ldr	r3, [pc, #96]	; (800addc <pvPortMalloc+0x180>)
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	429a      	cmp	r2, r3
 800ad80:	d203      	bcs.n	800ad8a <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ad82:	4b14      	ldr	r3, [pc, #80]	; (800add4 <pvPortMalloc+0x178>)
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	4a15      	ldr	r2, [pc, #84]	; (800addc <pvPortMalloc+0x180>)
 800ad88:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ad8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad8c:	685a      	ldr	r2, [r3, #4]
 800ad8e:	4b10      	ldr	r3, [pc, #64]	; (800add0 <pvPortMalloc+0x174>)
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	431a      	orrs	r2, r3
 800ad94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad96:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ad98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ad9e:	f001 fd7d 	bl	800c89c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ada2:	69fb      	ldr	r3, [r7, #28]
 800ada4:	f003 0307 	and.w	r3, r3, #7
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d009      	beq.n	800adc0 <pvPortMalloc+0x164>
 800adac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adb0:	f383 8811 	msr	BASEPRI, r3
 800adb4:	f3bf 8f6f 	isb	sy
 800adb8:	f3bf 8f4f 	dsb	sy
 800adbc:	60fb      	str	r3, [r7, #12]
 800adbe:	e7fe      	b.n	800adbe <pvPortMalloc+0x162>
	return pvReturn;
 800adc0:	69fb      	ldr	r3, [r7, #28]
}
 800adc2:	4618      	mov	r0, r3
 800adc4:	3728      	adds	r7, #40	; 0x28
 800adc6:	46bd      	mov	sp, r7
 800adc8:	bd80      	pop	{r7, pc}
 800adca:	bf00      	nop
 800adcc:	24004690 	.word	0x24004690
 800add0:	2400469c 	.word	0x2400469c
 800add4:	24004694 	.word	0x24004694
 800add8:	24004688 	.word	0x24004688
 800addc:	24004698 	.word	0x24004698

0800ade0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b086      	sub	sp, #24
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d046      	beq.n	800ae80 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800adf2:	2308      	movs	r3, #8
 800adf4:	425b      	negs	r3, r3
 800adf6:	697a      	ldr	r2, [r7, #20]
 800adf8:	4413      	add	r3, r2
 800adfa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800adfc:	697b      	ldr	r3, [r7, #20]
 800adfe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ae00:	693b      	ldr	r3, [r7, #16]
 800ae02:	685a      	ldr	r2, [r3, #4]
 800ae04:	4b20      	ldr	r3, [pc, #128]	; (800ae88 <vPortFree+0xa8>)
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	4013      	ands	r3, r2
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d109      	bne.n	800ae22 <vPortFree+0x42>
 800ae0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae12:	f383 8811 	msr	BASEPRI, r3
 800ae16:	f3bf 8f6f 	isb	sy
 800ae1a:	f3bf 8f4f 	dsb	sy
 800ae1e:	60fb      	str	r3, [r7, #12]
 800ae20:	e7fe      	b.n	800ae20 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ae22:	693b      	ldr	r3, [r7, #16]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d009      	beq.n	800ae3e <vPortFree+0x5e>
 800ae2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae2e:	f383 8811 	msr	BASEPRI, r3
 800ae32:	f3bf 8f6f 	isb	sy
 800ae36:	f3bf 8f4f 	dsb	sy
 800ae3a:	60bb      	str	r3, [r7, #8]
 800ae3c:	e7fe      	b.n	800ae3c <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ae3e:	693b      	ldr	r3, [r7, #16]
 800ae40:	685a      	ldr	r2, [r3, #4]
 800ae42:	4b11      	ldr	r3, [pc, #68]	; (800ae88 <vPortFree+0xa8>)
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	4013      	ands	r3, r2
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d019      	beq.n	800ae80 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ae4c:	693b      	ldr	r3, [r7, #16]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d115      	bne.n	800ae80 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ae54:	693b      	ldr	r3, [r7, #16]
 800ae56:	685a      	ldr	r2, [r3, #4]
 800ae58:	4b0b      	ldr	r3, [pc, #44]	; (800ae88 <vPortFree+0xa8>)
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	43db      	mvns	r3, r3
 800ae5e:	401a      	ands	r2, r3
 800ae60:	693b      	ldr	r3, [r7, #16]
 800ae62:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ae64:	f001 fd0c 	bl	800c880 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ae68:	693b      	ldr	r3, [r7, #16]
 800ae6a:	685a      	ldr	r2, [r3, #4]
 800ae6c:	4b07      	ldr	r3, [pc, #28]	; (800ae8c <vPortFree+0xac>)
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	4413      	add	r3, r2
 800ae72:	4a06      	ldr	r2, [pc, #24]	; (800ae8c <vPortFree+0xac>)
 800ae74:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ae76:	6938      	ldr	r0, [r7, #16]
 800ae78:	f000 f86c 	bl	800af54 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800ae7c:	f001 fd0e 	bl	800c89c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ae80:	bf00      	nop
 800ae82:	3718      	adds	r7, #24
 800ae84:	46bd      	mov	sp, r7
 800ae86:	bd80      	pop	{r7, pc}
 800ae88:	2400469c 	.word	0x2400469c
 800ae8c:	24004694 	.word	0x24004694

0800ae90 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ae90:	b480      	push	{r7}
 800ae92:	b085      	sub	sp, #20
 800ae94:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ae96:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800ae9a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ae9c:	4b27      	ldr	r3, [pc, #156]	; (800af3c <prvHeapInit+0xac>)
 800ae9e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	f003 0307 	and.w	r3, r3, #7
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d00c      	beq.n	800aec4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	3307      	adds	r3, #7
 800aeae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	f023 0307 	bic.w	r3, r3, #7
 800aeb6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800aeb8:	68ba      	ldr	r2, [r7, #8]
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	1ad3      	subs	r3, r2, r3
 800aebe:	4a1f      	ldr	r2, [pc, #124]	; (800af3c <prvHeapInit+0xac>)
 800aec0:	4413      	add	r3, r2
 800aec2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800aec8:	4a1d      	ldr	r2, [pc, #116]	; (800af40 <prvHeapInit+0xb0>)
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800aece:	4b1c      	ldr	r3, [pc, #112]	; (800af40 <prvHeapInit+0xb0>)
 800aed0:	2200      	movs	r2, #0
 800aed2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	68ba      	ldr	r2, [r7, #8]
 800aed8:	4413      	add	r3, r2
 800aeda:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800aedc:	2208      	movs	r2, #8
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	1a9b      	subs	r3, r3, r2
 800aee2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	f023 0307 	bic.w	r3, r3, #7
 800aeea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	4a15      	ldr	r2, [pc, #84]	; (800af44 <prvHeapInit+0xb4>)
 800aef0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800aef2:	4b14      	ldr	r3, [pc, #80]	; (800af44 <prvHeapInit+0xb4>)
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	2200      	movs	r2, #0
 800aef8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800aefa:	4b12      	ldr	r3, [pc, #72]	; (800af44 <prvHeapInit+0xb4>)
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	2200      	movs	r2, #0
 800af00:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	68fa      	ldr	r2, [r7, #12]
 800af0a:	1ad2      	subs	r2, r2, r3
 800af0c:	683b      	ldr	r3, [r7, #0]
 800af0e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800af10:	4b0c      	ldr	r3, [pc, #48]	; (800af44 <prvHeapInit+0xb4>)
 800af12:	681a      	ldr	r2, [r3, #0]
 800af14:	683b      	ldr	r3, [r7, #0]
 800af16:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800af18:	683b      	ldr	r3, [r7, #0]
 800af1a:	685b      	ldr	r3, [r3, #4]
 800af1c:	4a0a      	ldr	r2, [pc, #40]	; (800af48 <prvHeapInit+0xb8>)
 800af1e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800af20:	683b      	ldr	r3, [r7, #0]
 800af22:	685b      	ldr	r3, [r3, #4]
 800af24:	4a09      	ldr	r2, [pc, #36]	; (800af4c <prvHeapInit+0xbc>)
 800af26:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800af28:	4b09      	ldr	r3, [pc, #36]	; (800af50 <prvHeapInit+0xc0>)
 800af2a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800af2e:	601a      	str	r2, [r3, #0]
}
 800af30:	bf00      	nop
 800af32:	3714      	adds	r7, #20
 800af34:	46bd      	mov	sp, r7
 800af36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3a:	4770      	bx	lr
 800af3c:	24000a88 	.word	0x24000a88
 800af40:	24004688 	.word	0x24004688
 800af44:	24004690 	.word	0x24004690
 800af48:	24004698 	.word	0x24004698
 800af4c:	24004694 	.word	0x24004694
 800af50:	2400469c 	.word	0x2400469c

0800af54 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800af54:	b480      	push	{r7}
 800af56:	b085      	sub	sp, #20
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800af5c:	4b28      	ldr	r3, [pc, #160]	; (800b000 <prvInsertBlockIntoFreeList+0xac>)
 800af5e:	60fb      	str	r3, [r7, #12]
 800af60:	e002      	b.n	800af68 <prvInsertBlockIntoFreeList+0x14>
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	60fb      	str	r3, [r7, #12]
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	687a      	ldr	r2, [r7, #4]
 800af6e:	429a      	cmp	r2, r3
 800af70:	d8f7      	bhi.n	800af62 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	685b      	ldr	r3, [r3, #4]
 800af7a:	68ba      	ldr	r2, [r7, #8]
 800af7c:	4413      	add	r3, r2
 800af7e:	687a      	ldr	r2, [r7, #4]
 800af80:	429a      	cmp	r2, r3
 800af82:	d108      	bne.n	800af96 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	685a      	ldr	r2, [r3, #4]
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	685b      	ldr	r3, [r3, #4]
 800af8c:	441a      	add	r2, r3
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	685b      	ldr	r3, [r3, #4]
 800af9e:	68ba      	ldr	r2, [r7, #8]
 800afa0:	441a      	add	r2, r3
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	429a      	cmp	r2, r3
 800afa8:	d118      	bne.n	800afdc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	681a      	ldr	r2, [r3, #0]
 800afae:	4b15      	ldr	r3, [pc, #84]	; (800b004 <prvInsertBlockIntoFreeList+0xb0>)
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	429a      	cmp	r2, r3
 800afb4:	d00d      	beq.n	800afd2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	685a      	ldr	r2, [r3, #4]
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	685b      	ldr	r3, [r3, #4]
 800afc0:	441a      	add	r2, r3
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	681a      	ldr	r2, [r3, #0]
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	601a      	str	r2, [r3, #0]
 800afd0:	e008      	b.n	800afe4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800afd2:	4b0c      	ldr	r3, [pc, #48]	; (800b004 <prvInsertBlockIntoFreeList+0xb0>)
 800afd4:	681a      	ldr	r2, [r3, #0]
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	601a      	str	r2, [r3, #0]
 800afda:	e003      	b.n	800afe4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	681a      	ldr	r2, [r3, #0]
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800afe4:	68fa      	ldr	r2, [r7, #12]
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	429a      	cmp	r2, r3
 800afea:	d002      	beq.n	800aff2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	687a      	ldr	r2, [r7, #4]
 800aff0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aff2:	bf00      	nop
 800aff4:	3714      	adds	r7, #20
 800aff6:	46bd      	mov	sp, r7
 800aff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affc:	4770      	bx	lr
 800affe:	bf00      	nop
 800b000:	24004688 	.word	0x24004688
 800b004:	24004690 	.word	0x24004690

0800b008 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b008:	b480      	push	{r7}
 800b00a:	b083      	sub	sp, #12
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	f103 0208 	add.w	r2, r3, #8
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b020:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	f103 0208 	add.w	r2, r3, #8
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	f103 0208 	add.w	r2, r3, #8
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	2200      	movs	r2, #0
 800b03a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b03c:	bf00      	nop
 800b03e:	370c      	adds	r7, #12
 800b040:	46bd      	mov	sp, r7
 800b042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b046:	4770      	bx	lr

0800b048 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b048:	b480      	push	{r7}
 800b04a:	b083      	sub	sp, #12
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	2200      	movs	r2, #0
 800b054:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b056:	bf00      	nop
 800b058:	370c      	adds	r7, #12
 800b05a:	46bd      	mov	sp, r7
 800b05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b060:	4770      	bx	lr

0800b062 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b062:	b480      	push	{r7}
 800b064:	b085      	sub	sp, #20
 800b066:	af00      	add	r7, sp, #0
 800b068:	6078      	str	r0, [r7, #4]
 800b06a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	685b      	ldr	r3, [r3, #4]
 800b070:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b072:	683b      	ldr	r3, [r7, #0]
 800b074:	68fa      	ldr	r2, [r7, #12]
 800b076:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	689a      	ldr	r2, [r3, #8]
 800b07c:	683b      	ldr	r3, [r7, #0]
 800b07e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	689b      	ldr	r3, [r3, #8]
 800b084:	683a      	ldr	r2, [r7, #0]
 800b086:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	683a      	ldr	r2, [r7, #0]
 800b08c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b08e:	683b      	ldr	r3, [r7, #0]
 800b090:	687a      	ldr	r2, [r7, #4]
 800b092:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	1c5a      	adds	r2, r3, #1
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	601a      	str	r2, [r3, #0]
}
 800b09e:	bf00      	nop
 800b0a0:	3714      	adds	r7, #20
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a8:	4770      	bx	lr

0800b0aa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b0aa:	b480      	push	{r7}
 800b0ac:	b085      	sub	sp, #20
 800b0ae:	af00      	add	r7, sp, #0
 800b0b0:	6078      	str	r0, [r7, #4]
 800b0b2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b0b4:	683b      	ldr	r3, [r7, #0]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b0ba:	68bb      	ldr	r3, [r7, #8]
 800b0bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b0c0:	d103      	bne.n	800b0ca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	691b      	ldr	r3, [r3, #16]
 800b0c6:	60fb      	str	r3, [r7, #12]
 800b0c8:	e00c      	b.n	800b0e4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	3308      	adds	r3, #8
 800b0ce:	60fb      	str	r3, [r7, #12]
 800b0d0:	e002      	b.n	800b0d8 <vListInsert+0x2e>
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	685b      	ldr	r3, [r3, #4]
 800b0d6:	60fb      	str	r3, [r7, #12]
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	685b      	ldr	r3, [r3, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	68ba      	ldr	r2, [r7, #8]
 800b0e0:	429a      	cmp	r2, r3
 800b0e2:	d2f6      	bcs.n	800b0d2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	685a      	ldr	r2, [r3, #4]
 800b0e8:	683b      	ldr	r3, [r7, #0]
 800b0ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b0ec:	683b      	ldr	r3, [r7, #0]
 800b0ee:	685b      	ldr	r3, [r3, #4]
 800b0f0:	683a      	ldr	r2, [r7, #0]
 800b0f2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b0f4:	683b      	ldr	r3, [r7, #0]
 800b0f6:	68fa      	ldr	r2, [r7, #12]
 800b0f8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	683a      	ldr	r2, [r7, #0]
 800b0fe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b100:	683b      	ldr	r3, [r7, #0]
 800b102:	687a      	ldr	r2, [r7, #4]
 800b104:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	1c5a      	adds	r2, r3, #1
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	601a      	str	r2, [r3, #0]
}
 800b110:	bf00      	nop
 800b112:	3714      	adds	r7, #20
 800b114:	46bd      	mov	sp, r7
 800b116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b11a:	4770      	bx	lr

0800b11c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b11c:	b480      	push	{r7}
 800b11e:	b085      	sub	sp, #20
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	691b      	ldr	r3, [r3, #16]
 800b128:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	685b      	ldr	r3, [r3, #4]
 800b12e:	687a      	ldr	r2, [r7, #4]
 800b130:	6892      	ldr	r2, [r2, #8]
 800b132:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	689b      	ldr	r3, [r3, #8]
 800b138:	687a      	ldr	r2, [r7, #4]
 800b13a:	6852      	ldr	r2, [r2, #4]
 800b13c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	685b      	ldr	r3, [r3, #4]
 800b142:	687a      	ldr	r2, [r7, #4]
 800b144:	429a      	cmp	r2, r3
 800b146:	d103      	bne.n	800b150 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	689a      	ldr	r2, [r3, #8]
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	2200      	movs	r2, #0
 800b154:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	1e5a      	subs	r2, r3, #1
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	681b      	ldr	r3, [r3, #0]
}
 800b164:	4618      	mov	r0, r3
 800b166:	3714      	adds	r7, #20
 800b168:	46bd      	mov	sp, r7
 800b16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16e:	4770      	bx	lr

0800b170 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b170:	b480      	push	{r7}
 800b172:	b085      	sub	sp, #20
 800b174:	af00      	add	r7, sp, #0
 800b176:	60f8      	str	r0, [r7, #12]
 800b178:	60b9      	str	r1, [r7, #8]
 800b17a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	3b04      	subs	r3, #4
 800b180:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b188:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	3b04      	subs	r3, #4
 800b18e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b190:	68bb      	ldr	r3, [r7, #8]
 800b192:	f023 0201 	bic.w	r2, r3, #1
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	3b04      	subs	r3, #4
 800b19e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b1a0:	4a0c      	ldr	r2, [pc, #48]	; (800b1d4 <pxPortInitialiseStack+0x64>)
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	3b14      	subs	r3, #20
 800b1aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b1ac:	687a      	ldr	r2, [r7, #4]
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	3b04      	subs	r3, #4
 800b1b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	f06f 0202 	mvn.w	r2, #2
 800b1be:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	3b20      	subs	r3, #32
 800b1c4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b1c6:	68fb      	ldr	r3, [r7, #12]
}
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	3714      	adds	r7, #20
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d2:	4770      	bx	lr
 800b1d4:	0800b1d9 	.word	0x0800b1d9

0800b1d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b1d8:	b480      	push	{r7}
 800b1da:	b085      	sub	sp, #20
 800b1dc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b1de:	2300      	movs	r3, #0
 800b1e0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b1e2:	4b11      	ldr	r3, [pc, #68]	; (800b228 <prvTaskExitError+0x50>)
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b1ea:	d009      	beq.n	800b200 <prvTaskExitError+0x28>
 800b1ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1f0:	f383 8811 	msr	BASEPRI, r3
 800b1f4:	f3bf 8f6f 	isb	sy
 800b1f8:	f3bf 8f4f 	dsb	sy
 800b1fc:	60fb      	str	r3, [r7, #12]
 800b1fe:	e7fe      	b.n	800b1fe <prvTaskExitError+0x26>
 800b200:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b204:	f383 8811 	msr	BASEPRI, r3
 800b208:	f3bf 8f6f 	isb	sy
 800b20c:	f3bf 8f4f 	dsb	sy
 800b210:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b212:	bf00      	nop
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	2b00      	cmp	r3, #0
 800b218:	d0fc      	beq.n	800b214 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b21a:	bf00      	nop
 800b21c:	3714      	adds	r7, #20
 800b21e:	46bd      	mov	sp, r7
 800b220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b224:	4770      	bx	lr
 800b226:	bf00      	nop
 800b228:	24000024 	.word	0x24000024
 800b22c:	00000000 	.word	0x00000000

0800b230 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b230:	4b07      	ldr	r3, [pc, #28]	; (800b250 <pxCurrentTCBConst2>)
 800b232:	6819      	ldr	r1, [r3, #0]
 800b234:	6808      	ldr	r0, [r1, #0]
 800b236:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b23a:	f380 8809 	msr	PSP, r0
 800b23e:	f3bf 8f6f 	isb	sy
 800b242:	f04f 0000 	mov.w	r0, #0
 800b246:	f380 8811 	msr	BASEPRI, r0
 800b24a:	4770      	bx	lr
 800b24c:	f3af 8000 	nop.w

0800b250 <pxCurrentTCBConst2>:
 800b250:	240046a8 	.word	0x240046a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b254:	bf00      	nop
 800b256:	bf00      	nop

0800b258 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b258:	4808      	ldr	r0, [pc, #32]	; (800b27c <prvPortStartFirstTask+0x24>)
 800b25a:	6800      	ldr	r0, [r0, #0]
 800b25c:	6800      	ldr	r0, [r0, #0]
 800b25e:	f380 8808 	msr	MSP, r0
 800b262:	f04f 0000 	mov.w	r0, #0
 800b266:	f380 8814 	msr	CONTROL, r0
 800b26a:	b662      	cpsie	i
 800b26c:	b661      	cpsie	f
 800b26e:	f3bf 8f4f 	dsb	sy
 800b272:	f3bf 8f6f 	isb	sy
 800b276:	df00      	svc	0
 800b278:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b27a:	bf00      	nop
 800b27c:	e000ed08 	.word	0xe000ed08

0800b280 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b280:	b580      	push	{r7, lr}
 800b282:	b086      	sub	sp, #24
 800b284:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b286:	4b44      	ldr	r3, [pc, #272]	; (800b398 <xPortStartScheduler+0x118>)
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	4a44      	ldr	r2, [pc, #272]	; (800b39c <xPortStartScheduler+0x11c>)
 800b28c:	4293      	cmp	r3, r2
 800b28e:	d109      	bne.n	800b2a4 <xPortStartScheduler+0x24>
 800b290:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b294:	f383 8811 	msr	BASEPRI, r3
 800b298:	f3bf 8f6f 	isb	sy
 800b29c:	f3bf 8f4f 	dsb	sy
 800b2a0:	613b      	str	r3, [r7, #16]
 800b2a2:	e7fe      	b.n	800b2a2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b2a4:	4b3c      	ldr	r3, [pc, #240]	; (800b398 <xPortStartScheduler+0x118>)
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	4a3d      	ldr	r2, [pc, #244]	; (800b3a0 <xPortStartScheduler+0x120>)
 800b2aa:	4293      	cmp	r3, r2
 800b2ac:	d109      	bne.n	800b2c2 <xPortStartScheduler+0x42>
 800b2ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2b2:	f383 8811 	msr	BASEPRI, r3
 800b2b6:	f3bf 8f6f 	isb	sy
 800b2ba:	f3bf 8f4f 	dsb	sy
 800b2be:	60fb      	str	r3, [r7, #12]
 800b2c0:	e7fe      	b.n	800b2c0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b2c2:	4b38      	ldr	r3, [pc, #224]	; (800b3a4 <xPortStartScheduler+0x124>)
 800b2c4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b2c6:	697b      	ldr	r3, [r7, #20]
 800b2c8:	781b      	ldrb	r3, [r3, #0]
 800b2ca:	b2db      	uxtb	r3, r3
 800b2cc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b2ce:	697b      	ldr	r3, [r7, #20]
 800b2d0:	22ff      	movs	r2, #255	; 0xff
 800b2d2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b2d4:	697b      	ldr	r3, [r7, #20]
 800b2d6:	781b      	ldrb	r3, [r3, #0]
 800b2d8:	b2db      	uxtb	r3, r3
 800b2da:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b2dc:	78fb      	ldrb	r3, [r7, #3]
 800b2de:	b2db      	uxtb	r3, r3
 800b2e0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b2e4:	b2da      	uxtb	r2, r3
 800b2e6:	4b30      	ldr	r3, [pc, #192]	; (800b3a8 <xPortStartScheduler+0x128>)
 800b2e8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b2ea:	4b30      	ldr	r3, [pc, #192]	; (800b3ac <xPortStartScheduler+0x12c>)
 800b2ec:	2207      	movs	r2, #7
 800b2ee:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b2f0:	e009      	b.n	800b306 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800b2f2:	4b2e      	ldr	r3, [pc, #184]	; (800b3ac <xPortStartScheduler+0x12c>)
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	3b01      	subs	r3, #1
 800b2f8:	4a2c      	ldr	r2, [pc, #176]	; (800b3ac <xPortStartScheduler+0x12c>)
 800b2fa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b2fc:	78fb      	ldrb	r3, [r7, #3]
 800b2fe:	b2db      	uxtb	r3, r3
 800b300:	005b      	lsls	r3, r3, #1
 800b302:	b2db      	uxtb	r3, r3
 800b304:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b306:	78fb      	ldrb	r3, [r7, #3]
 800b308:	b2db      	uxtb	r3, r3
 800b30a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b30e:	2b80      	cmp	r3, #128	; 0x80
 800b310:	d0ef      	beq.n	800b2f2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b312:	4b26      	ldr	r3, [pc, #152]	; (800b3ac <xPortStartScheduler+0x12c>)
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	f1c3 0307 	rsb	r3, r3, #7
 800b31a:	2b04      	cmp	r3, #4
 800b31c:	d009      	beq.n	800b332 <xPortStartScheduler+0xb2>
 800b31e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b322:	f383 8811 	msr	BASEPRI, r3
 800b326:	f3bf 8f6f 	isb	sy
 800b32a:	f3bf 8f4f 	dsb	sy
 800b32e:	60bb      	str	r3, [r7, #8]
 800b330:	e7fe      	b.n	800b330 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b332:	4b1e      	ldr	r3, [pc, #120]	; (800b3ac <xPortStartScheduler+0x12c>)
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	021b      	lsls	r3, r3, #8
 800b338:	4a1c      	ldr	r2, [pc, #112]	; (800b3ac <xPortStartScheduler+0x12c>)
 800b33a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b33c:	4b1b      	ldr	r3, [pc, #108]	; (800b3ac <xPortStartScheduler+0x12c>)
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b344:	4a19      	ldr	r2, [pc, #100]	; (800b3ac <xPortStartScheduler+0x12c>)
 800b346:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	b2da      	uxtb	r2, r3
 800b34c:	697b      	ldr	r3, [r7, #20]
 800b34e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b350:	4b17      	ldr	r3, [pc, #92]	; (800b3b0 <xPortStartScheduler+0x130>)
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	4a16      	ldr	r2, [pc, #88]	; (800b3b0 <xPortStartScheduler+0x130>)
 800b356:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b35a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b35c:	4b14      	ldr	r3, [pc, #80]	; (800b3b0 <xPortStartScheduler+0x130>)
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	4a13      	ldr	r2, [pc, #76]	; (800b3b0 <xPortStartScheduler+0x130>)
 800b362:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b366:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b368:	f000 f8d6 	bl	800b518 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b36c:	4b11      	ldr	r3, [pc, #68]	; (800b3b4 <xPortStartScheduler+0x134>)
 800b36e:	2200      	movs	r2, #0
 800b370:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b372:	f000 f8f5 	bl	800b560 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b376:	4b10      	ldr	r3, [pc, #64]	; (800b3b8 <xPortStartScheduler+0x138>)
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	4a0f      	ldr	r2, [pc, #60]	; (800b3b8 <xPortStartScheduler+0x138>)
 800b37c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b380:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b382:	f7ff ff69 	bl	800b258 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b386:	f001 fbff 	bl	800cb88 <vTaskSwitchContext>
	prvTaskExitError();
 800b38a:	f7ff ff25 	bl	800b1d8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b38e:	2300      	movs	r3, #0
}
 800b390:	4618      	mov	r0, r3
 800b392:	3718      	adds	r7, #24
 800b394:	46bd      	mov	sp, r7
 800b396:	bd80      	pop	{r7, pc}
 800b398:	e000ed00 	.word	0xe000ed00
 800b39c:	410fc271 	.word	0x410fc271
 800b3a0:	410fc270 	.word	0x410fc270
 800b3a4:	e000e400 	.word	0xe000e400
 800b3a8:	240046a0 	.word	0x240046a0
 800b3ac:	240046a4 	.word	0x240046a4
 800b3b0:	e000ed20 	.word	0xe000ed20
 800b3b4:	24000024 	.word	0x24000024
 800b3b8:	e000ef34 	.word	0xe000ef34

0800b3bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b3bc:	b480      	push	{r7}
 800b3be:	b083      	sub	sp, #12
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3c6:	f383 8811 	msr	BASEPRI, r3
 800b3ca:	f3bf 8f6f 	isb	sy
 800b3ce:	f3bf 8f4f 	dsb	sy
 800b3d2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b3d4:	4b0e      	ldr	r3, [pc, #56]	; (800b410 <vPortEnterCritical+0x54>)
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	3301      	adds	r3, #1
 800b3da:	4a0d      	ldr	r2, [pc, #52]	; (800b410 <vPortEnterCritical+0x54>)
 800b3dc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b3de:	4b0c      	ldr	r3, [pc, #48]	; (800b410 <vPortEnterCritical+0x54>)
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	2b01      	cmp	r3, #1
 800b3e4:	d10e      	bne.n	800b404 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b3e6:	4b0b      	ldr	r3, [pc, #44]	; (800b414 <vPortEnterCritical+0x58>)
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	b2db      	uxtb	r3, r3
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d009      	beq.n	800b404 <vPortEnterCritical+0x48>
 800b3f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3f4:	f383 8811 	msr	BASEPRI, r3
 800b3f8:	f3bf 8f6f 	isb	sy
 800b3fc:	f3bf 8f4f 	dsb	sy
 800b400:	603b      	str	r3, [r7, #0]
 800b402:	e7fe      	b.n	800b402 <vPortEnterCritical+0x46>
	}
}
 800b404:	bf00      	nop
 800b406:	370c      	adds	r7, #12
 800b408:	46bd      	mov	sp, r7
 800b40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40e:	4770      	bx	lr
 800b410:	24000024 	.word	0x24000024
 800b414:	e000ed04 	.word	0xe000ed04

0800b418 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b418:	b480      	push	{r7}
 800b41a:	b083      	sub	sp, #12
 800b41c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b41e:	4b11      	ldr	r3, [pc, #68]	; (800b464 <vPortExitCritical+0x4c>)
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d109      	bne.n	800b43a <vPortExitCritical+0x22>
 800b426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b42a:	f383 8811 	msr	BASEPRI, r3
 800b42e:	f3bf 8f6f 	isb	sy
 800b432:	f3bf 8f4f 	dsb	sy
 800b436:	607b      	str	r3, [r7, #4]
 800b438:	e7fe      	b.n	800b438 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800b43a:	4b0a      	ldr	r3, [pc, #40]	; (800b464 <vPortExitCritical+0x4c>)
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	3b01      	subs	r3, #1
 800b440:	4a08      	ldr	r2, [pc, #32]	; (800b464 <vPortExitCritical+0x4c>)
 800b442:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b444:	4b07      	ldr	r3, [pc, #28]	; (800b464 <vPortExitCritical+0x4c>)
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d104      	bne.n	800b456 <vPortExitCritical+0x3e>
 800b44c:	2300      	movs	r3, #0
 800b44e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b450:	683b      	ldr	r3, [r7, #0]
 800b452:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800b456:	bf00      	nop
 800b458:	370c      	adds	r7, #12
 800b45a:	46bd      	mov	sp, r7
 800b45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b460:	4770      	bx	lr
 800b462:	bf00      	nop
 800b464:	24000024 	.word	0x24000024
	...

0800b470 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b470:	f3ef 8009 	mrs	r0, PSP
 800b474:	f3bf 8f6f 	isb	sy
 800b478:	4b15      	ldr	r3, [pc, #84]	; (800b4d0 <pxCurrentTCBConst>)
 800b47a:	681a      	ldr	r2, [r3, #0]
 800b47c:	f01e 0f10 	tst.w	lr, #16
 800b480:	bf08      	it	eq
 800b482:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b486:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b48a:	6010      	str	r0, [r2, #0]
 800b48c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b490:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b494:	f380 8811 	msr	BASEPRI, r0
 800b498:	f3bf 8f4f 	dsb	sy
 800b49c:	f3bf 8f6f 	isb	sy
 800b4a0:	f001 fb72 	bl	800cb88 <vTaskSwitchContext>
 800b4a4:	f04f 0000 	mov.w	r0, #0
 800b4a8:	f380 8811 	msr	BASEPRI, r0
 800b4ac:	bc09      	pop	{r0, r3}
 800b4ae:	6819      	ldr	r1, [r3, #0]
 800b4b0:	6808      	ldr	r0, [r1, #0]
 800b4b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4b6:	f01e 0f10 	tst.w	lr, #16
 800b4ba:	bf08      	it	eq
 800b4bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b4c0:	f380 8809 	msr	PSP, r0
 800b4c4:	f3bf 8f6f 	isb	sy
 800b4c8:	4770      	bx	lr
 800b4ca:	bf00      	nop
 800b4cc:	f3af 8000 	nop.w

0800b4d0 <pxCurrentTCBConst>:
 800b4d0:	240046a8 	.word	0x240046a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b4d4:	bf00      	nop
 800b4d6:	bf00      	nop

0800b4d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b082      	sub	sp, #8
 800b4dc:	af00      	add	r7, sp, #0
	__asm volatile
 800b4de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4e2:	f383 8811 	msr	BASEPRI, r3
 800b4e6:	f3bf 8f6f 	isb	sy
 800b4ea:	f3bf 8f4f 	dsb	sy
 800b4ee:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b4f0:	f001 fa92 	bl	800ca18 <xTaskIncrementTick>
 800b4f4:	4603      	mov	r3, r0
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d003      	beq.n	800b502 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b4fa:	4b06      	ldr	r3, [pc, #24]	; (800b514 <SysTick_Handler+0x3c>)
 800b4fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b500:	601a      	str	r2, [r3, #0]
 800b502:	2300      	movs	r3, #0
 800b504:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b506:	683b      	ldr	r3, [r7, #0]
 800b508:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800b50c:	bf00      	nop
 800b50e:	3708      	adds	r7, #8
 800b510:	46bd      	mov	sp, r7
 800b512:	bd80      	pop	{r7, pc}
 800b514:	e000ed04 	.word	0xe000ed04

0800b518 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b518:	b480      	push	{r7}
 800b51a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b51c:	4b0b      	ldr	r3, [pc, #44]	; (800b54c <vPortSetupTimerInterrupt+0x34>)
 800b51e:	2200      	movs	r2, #0
 800b520:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b522:	4b0b      	ldr	r3, [pc, #44]	; (800b550 <vPortSetupTimerInterrupt+0x38>)
 800b524:	2200      	movs	r2, #0
 800b526:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b528:	4b0a      	ldr	r3, [pc, #40]	; (800b554 <vPortSetupTimerInterrupt+0x3c>)
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	4a0a      	ldr	r2, [pc, #40]	; (800b558 <vPortSetupTimerInterrupt+0x40>)
 800b52e:	fba2 2303 	umull	r2, r3, r2, r3
 800b532:	099b      	lsrs	r3, r3, #6
 800b534:	4a09      	ldr	r2, [pc, #36]	; (800b55c <vPortSetupTimerInterrupt+0x44>)
 800b536:	3b01      	subs	r3, #1
 800b538:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b53a:	4b04      	ldr	r3, [pc, #16]	; (800b54c <vPortSetupTimerInterrupt+0x34>)
 800b53c:	2207      	movs	r2, #7
 800b53e:	601a      	str	r2, [r3, #0]
}
 800b540:	bf00      	nop
 800b542:	46bd      	mov	sp, r7
 800b544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b548:	4770      	bx	lr
 800b54a:	bf00      	nop
 800b54c:	e000e010 	.word	0xe000e010
 800b550:	e000e018 	.word	0xe000e018
 800b554:	24000000 	.word	0x24000000
 800b558:	10624dd3 	.word	0x10624dd3
 800b55c:	e000e014 	.word	0xe000e014

0800b560 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b560:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b570 <vPortEnableVFP+0x10>
 800b564:	6801      	ldr	r1, [r0, #0]
 800b566:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b56a:	6001      	str	r1, [r0, #0]
 800b56c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b56e:	bf00      	nop
 800b570:	e000ed88 	.word	0xe000ed88

0800b574 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b574:	b480      	push	{r7}
 800b576:	b085      	sub	sp, #20
 800b578:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b57a:	f3ef 8305 	mrs	r3, IPSR
 800b57e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	2b0f      	cmp	r3, #15
 800b584:	d913      	bls.n	800b5ae <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b586:	4a16      	ldr	r2, [pc, #88]	; (800b5e0 <vPortValidateInterruptPriority+0x6c>)
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	4413      	add	r3, r2
 800b58c:	781b      	ldrb	r3, [r3, #0]
 800b58e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b590:	4b14      	ldr	r3, [pc, #80]	; (800b5e4 <vPortValidateInterruptPriority+0x70>)
 800b592:	781b      	ldrb	r3, [r3, #0]
 800b594:	7afa      	ldrb	r2, [r7, #11]
 800b596:	429a      	cmp	r2, r3
 800b598:	d209      	bcs.n	800b5ae <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800b59a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b59e:	f383 8811 	msr	BASEPRI, r3
 800b5a2:	f3bf 8f6f 	isb	sy
 800b5a6:	f3bf 8f4f 	dsb	sy
 800b5aa:	607b      	str	r3, [r7, #4]
 800b5ac:	e7fe      	b.n	800b5ac <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b5ae:	4b0e      	ldr	r3, [pc, #56]	; (800b5e8 <vPortValidateInterruptPriority+0x74>)
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b5b6:	4b0d      	ldr	r3, [pc, #52]	; (800b5ec <vPortValidateInterruptPriority+0x78>)
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	429a      	cmp	r2, r3
 800b5bc:	d909      	bls.n	800b5d2 <vPortValidateInterruptPriority+0x5e>
 800b5be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5c2:	f383 8811 	msr	BASEPRI, r3
 800b5c6:	f3bf 8f6f 	isb	sy
 800b5ca:	f3bf 8f4f 	dsb	sy
 800b5ce:	603b      	str	r3, [r7, #0]
 800b5d0:	e7fe      	b.n	800b5d0 <vPortValidateInterruptPriority+0x5c>
	}
 800b5d2:	bf00      	nop
 800b5d4:	3714      	adds	r7, #20
 800b5d6:	46bd      	mov	sp, r7
 800b5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5dc:	4770      	bx	lr
 800b5de:	bf00      	nop
 800b5e0:	e000e3f0 	.word	0xe000e3f0
 800b5e4:	240046a0 	.word	0x240046a0
 800b5e8:	e000ed0c 	.word	0xe000ed0c
 800b5ec:	240046a4 	.word	0x240046a4

0800b5f0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b5f0:	b580      	push	{r7, lr}
 800b5f2:	b084      	sub	sp, #16
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	6078      	str	r0, [r7, #4]
 800b5f8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d109      	bne.n	800b618 <xQueueGenericReset+0x28>
 800b604:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b608:	f383 8811 	msr	BASEPRI, r3
 800b60c:	f3bf 8f6f 	isb	sy
 800b610:	f3bf 8f4f 	dsb	sy
 800b614:	60bb      	str	r3, [r7, #8]
 800b616:	e7fe      	b.n	800b616 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800b618:	f7ff fed0 	bl	800b3bc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	681a      	ldr	r2, [r3, #0]
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b624:	68f9      	ldr	r1, [r7, #12]
 800b626:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b628:	fb01 f303 	mul.w	r3, r1, r3
 800b62c:	441a      	add	r2, r3
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	2200      	movs	r2, #0
 800b636:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	681a      	ldr	r2, [r3, #0]
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	681a      	ldr	r2, [r3, #0]
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b648:	3b01      	subs	r3, #1
 800b64a:	68f9      	ldr	r1, [r7, #12]
 800b64c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b64e:	fb01 f303 	mul.w	r3, r1, r3
 800b652:	441a      	add	r2, r3
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	22ff      	movs	r2, #255	; 0xff
 800b65c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	22ff      	movs	r2, #255	; 0xff
 800b664:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b668:	683b      	ldr	r3, [r7, #0]
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d114      	bne.n	800b698 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	691b      	ldr	r3, [r3, #16]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d01a      	beq.n	800b6ac <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	3310      	adds	r3, #16
 800b67a:	4618      	mov	r0, r3
 800b67c:	f001 fb02 	bl	800cc84 <xTaskRemoveFromEventList>
 800b680:	4603      	mov	r3, r0
 800b682:	2b00      	cmp	r3, #0
 800b684:	d012      	beq.n	800b6ac <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b686:	4b0d      	ldr	r3, [pc, #52]	; (800b6bc <xQueueGenericReset+0xcc>)
 800b688:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b68c:	601a      	str	r2, [r3, #0]
 800b68e:	f3bf 8f4f 	dsb	sy
 800b692:	f3bf 8f6f 	isb	sy
 800b696:	e009      	b.n	800b6ac <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	3310      	adds	r3, #16
 800b69c:	4618      	mov	r0, r3
 800b69e:	f7ff fcb3 	bl	800b008 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	3324      	adds	r3, #36	; 0x24
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	f7ff fcae 	bl	800b008 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b6ac:	f7ff feb4 	bl	800b418 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b6b0:	2301      	movs	r3, #1
}
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	3710      	adds	r7, #16
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	bd80      	pop	{r7, pc}
 800b6ba:	bf00      	nop
 800b6bc:	e000ed04 	.word	0xe000ed04

0800b6c0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	b08e      	sub	sp, #56	; 0x38
 800b6c4:	af02      	add	r7, sp, #8
 800b6c6:	60f8      	str	r0, [r7, #12]
 800b6c8:	60b9      	str	r1, [r7, #8]
 800b6ca:	607a      	str	r2, [r7, #4]
 800b6cc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d109      	bne.n	800b6e8 <xQueueGenericCreateStatic+0x28>
 800b6d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6d8:	f383 8811 	msr	BASEPRI, r3
 800b6dc:	f3bf 8f6f 	isb	sy
 800b6e0:	f3bf 8f4f 	dsb	sy
 800b6e4:	62bb      	str	r3, [r7, #40]	; 0x28
 800b6e6:	e7fe      	b.n	800b6e6 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b6e8:	683b      	ldr	r3, [r7, #0]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d109      	bne.n	800b702 <xQueueGenericCreateStatic+0x42>
 800b6ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6f2:	f383 8811 	msr	BASEPRI, r3
 800b6f6:	f3bf 8f6f 	isb	sy
 800b6fa:	f3bf 8f4f 	dsb	sy
 800b6fe:	627b      	str	r3, [r7, #36]	; 0x24
 800b700:	e7fe      	b.n	800b700 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	2b00      	cmp	r3, #0
 800b706:	d002      	beq.n	800b70e <xQueueGenericCreateStatic+0x4e>
 800b708:	68bb      	ldr	r3, [r7, #8]
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d001      	beq.n	800b712 <xQueueGenericCreateStatic+0x52>
 800b70e:	2301      	movs	r3, #1
 800b710:	e000      	b.n	800b714 <xQueueGenericCreateStatic+0x54>
 800b712:	2300      	movs	r3, #0
 800b714:	2b00      	cmp	r3, #0
 800b716:	d109      	bne.n	800b72c <xQueueGenericCreateStatic+0x6c>
 800b718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b71c:	f383 8811 	msr	BASEPRI, r3
 800b720:	f3bf 8f6f 	isb	sy
 800b724:	f3bf 8f4f 	dsb	sy
 800b728:	623b      	str	r3, [r7, #32]
 800b72a:	e7fe      	b.n	800b72a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d102      	bne.n	800b738 <xQueueGenericCreateStatic+0x78>
 800b732:	68bb      	ldr	r3, [r7, #8]
 800b734:	2b00      	cmp	r3, #0
 800b736:	d101      	bne.n	800b73c <xQueueGenericCreateStatic+0x7c>
 800b738:	2301      	movs	r3, #1
 800b73a:	e000      	b.n	800b73e <xQueueGenericCreateStatic+0x7e>
 800b73c:	2300      	movs	r3, #0
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d109      	bne.n	800b756 <xQueueGenericCreateStatic+0x96>
 800b742:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b746:	f383 8811 	msr	BASEPRI, r3
 800b74a:	f3bf 8f6f 	isb	sy
 800b74e:	f3bf 8f4f 	dsb	sy
 800b752:	61fb      	str	r3, [r7, #28]
 800b754:	e7fe      	b.n	800b754 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b756:	2348      	movs	r3, #72	; 0x48
 800b758:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b75a:	697b      	ldr	r3, [r7, #20]
 800b75c:	2b48      	cmp	r3, #72	; 0x48
 800b75e:	d009      	beq.n	800b774 <xQueueGenericCreateStatic+0xb4>
 800b760:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b764:	f383 8811 	msr	BASEPRI, r3
 800b768:	f3bf 8f6f 	isb	sy
 800b76c:	f3bf 8f4f 	dsb	sy
 800b770:	61bb      	str	r3, [r7, #24]
 800b772:	e7fe      	b.n	800b772 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b774:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b776:	683b      	ldr	r3, [r7, #0]
 800b778:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b77a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d00d      	beq.n	800b79c <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b782:	2201      	movs	r2, #1
 800b784:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b788:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b78c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b78e:	9300      	str	r3, [sp, #0]
 800b790:	4613      	mov	r3, r2
 800b792:	687a      	ldr	r2, [r7, #4]
 800b794:	68b9      	ldr	r1, [r7, #8]
 800b796:	68f8      	ldr	r0, [r7, #12]
 800b798:	f000 f844 	bl	800b824 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b79c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b79e:	4618      	mov	r0, r3
 800b7a0:	3730      	adds	r7, #48	; 0x30
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	bd80      	pop	{r7, pc}

0800b7a6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b7a6:	b580      	push	{r7, lr}
 800b7a8:	b08a      	sub	sp, #40	; 0x28
 800b7aa:	af02      	add	r7, sp, #8
 800b7ac:	60f8      	str	r0, [r7, #12]
 800b7ae:	60b9      	str	r1, [r7, #8]
 800b7b0:	4613      	mov	r3, r2
 800b7b2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d109      	bne.n	800b7ce <xQueueGenericCreate+0x28>
 800b7ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7be:	f383 8811 	msr	BASEPRI, r3
 800b7c2:	f3bf 8f6f 	isb	sy
 800b7c6:	f3bf 8f4f 	dsb	sy
 800b7ca:	613b      	str	r3, [r7, #16]
 800b7cc:	e7fe      	b.n	800b7cc <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800b7ce:	68bb      	ldr	r3, [r7, #8]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d102      	bne.n	800b7da <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	61fb      	str	r3, [r7, #28]
 800b7d8:	e004      	b.n	800b7e4 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	68ba      	ldr	r2, [r7, #8]
 800b7de:	fb02 f303 	mul.w	r3, r2, r3
 800b7e2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b7e4:	69fb      	ldr	r3, [r7, #28]
 800b7e6:	3348      	adds	r3, #72	; 0x48
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	f7ff fa37 	bl	800ac5c <pvPortMalloc>
 800b7ee:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b7f0:	69bb      	ldr	r3, [r7, #24]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d011      	beq.n	800b81a <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b7f6:	69bb      	ldr	r3, [r7, #24]
 800b7f8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b7fa:	697b      	ldr	r3, [r7, #20]
 800b7fc:	3348      	adds	r3, #72	; 0x48
 800b7fe:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b800:	69bb      	ldr	r3, [r7, #24]
 800b802:	2200      	movs	r2, #0
 800b804:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b808:	79fa      	ldrb	r2, [r7, #7]
 800b80a:	69bb      	ldr	r3, [r7, #24]
 800b80c:	9300      	str	r3, [sp, #0]
 800b80e:	4613      	mov	r3, r2
 800b810:	697a      	ldr	r2, [r7, #20]
 800b812:	68b9      	ldr	r1, [r7, #8]
 800b814:	68f8      	ldr	r0, [r7, #12]
 800b816:	f000 f805 	bl	800b824 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b81a:	69bb      	ldr	r3, [r7, #24]
	}
 800b81c:	4618      	mov	r0, r3
 800b81e:	3720      	adds	r7, #32
 800b820:	46bd      	mov	sp, r7
 800b822:	bd80      	pop	{r7, pc}

0800b824 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b824:	b580      	push	{r7, lr}
 800b826:	b084      	sub	sp, #16
 800b828:	af00      	add	r7, sp, #0
 800b82a:	60f8      	str	r0, [r7, #12]
 800b82c:	60b9      	str	r1, [r7, #8]
 800b82e:	607a      	str	r2, [r7, #4]
 800b830:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b832:	68bb      	ldr	r3, [r7, #8]
 800b834:	2b00      	cmp	r3, #0
 800b836:	d103      	bne.n	800b840 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b838:	69bb      	ldr	r3, [r7, #24]
 800b83a:	69ba      	ldr	r2, [r7, #24]
 800b83c:	601a      	str	r2, [r3, #0]
 800b83e:	e002      	b.n	800b846 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b840:	69bb      	ldr	r3, [r7, #24]
 800b842:	687a      	ldr	r2, [r7, #4]
 800b844:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b846:	69bb      	ldr	r3, [r7, #24]
 800b848:	68fa      	ldr	r2, [r7, #12]
 800b84a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b84c:	69bb      	ldr	r3, [r7, #24]
 800b84e:	68ba      	ldr	r2, [r7, #8]
 800b850:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b852:	2101      	movs	r1, #1
 800b854:	69b8      	ldr	r0, [r7, #24]
 800b856:	f7ff fecb 	bl	800b5f0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b85a:	bf00      	nop
 800b85c:	3710      	adds	r7, #16
 800b85e:	46bd      	mov	sp, r7
 800b860:	bd80      	pop	{r7, pc}

0800b862 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800b862:	b580      	push	{r7, lr}
 800b864:	b082      	sub	sp, #8
 800b866:	af00      	add	r7, sp, #0
 800b868:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d00e      	beq.n	800b88e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	2200      	movs	r2, #0
 800b874:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	2200      	movs	r2, #0
 800b87a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	2200      	movs	r2, #0
 800b880:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800b882:	2300      	movs	r3, #0
 800b884:	2200      	movs	r2, #0
 800b886:	2100      	movs	r1, #0
 800b888:	6878      	ldr	r0, [r7, #4]
 800b88a:	f000 f837 	bl	800b8fc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800b88e:	bf00      	nop
 800b890:	3708      	adds	r7, #8
 800b892:	46bd      	mov	sp, r7
 800b894:	bd80      	pop	{r7, pc}

0800b896 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800b896:	b580      	push	{r7, lr}
 800b898:	b086      	sub	sp, #24
 800b89a:	af00      	add	r7, sp, #0
 800b89c:	4603      	mov	r3, r0
 800b89e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b8a0:	2301      	movs	r3, #1
 800b8a2:	617b      	str	r3, [r7, #20]
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800b8a8:	79fb      	ldrb	r3, [r7, #7]
 800b8aa:	461a      	mov	r2, r3
 800b8ac:	6939      	ldr	r1, [r7, #16]
 800b8ae:	6978      	ldr	r0, [r7, #20]
 800b8b0:	f7ff ff79 	bl	800b7a6 <xQueueGenericCreate>
 800b8b4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b8b6:	68f8      	ldr	r0, [r7, #12]
 800b8b8:	f7ff ffd3 	bl	800b862 <prvInitialiseMutex>

		return xNewQueue;
 800b8bc:	68fb      	ldr	r3, [r7, #12]
	}
 800b8be:	4618      	mov	r0, r3
 800b8c0:	3718      	adds	r7, #24
 800b8c2:	46bd      	mov	sp, r7
 800b8c4:	bd80      	pop	{r7, pc}

0800b8c6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800b8c6:	b580      	push	{r7, lr}
 800b8c8:	b088      	sub	sp, #32
 800b8ca:	af02      	add	r7, sp, #8
 800b8cc:	4603      	mov	r3, r0
 800b8ce:	6039      	str	r1, [r7, #0]
 800b8d0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b8d2:	2301      	movs	r3, #1
 800b8d4:	617b      	str	r3, [r7, #20]
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800b8da:	79fb      	ldrb	r3, [r7, #7]
 800b8dc:	9300      	str	r3, [sp, #0]
 800b8de:	683b      	ldr	r3, [r7, #0]
 800b8e0:	2200      	movs	r2, #0
 800b8e2:	6939      	ldr	r1, [r7, #16]
 800b8e4:	6978      	ldr	r0, [r7, #20]
 800b8e6:	f7ff feeb 	bl	800b6c0 <xQueueGenericCreateStatic>
 800b8ea:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b8ec:	68f8      	ldr	r0, [r7, #12]
 800b8ee:	f7ff ffb8 	bl	800b862 <prvInitialiseMutex>

		return xNewQueue;
 800b8f2:	68fb      	ldr	r3, [r7, #12]
	}
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	3718      	adds	r7, #24
 800b8f8:	46bd      	mov	sp, r7
 800b8fa:	bd80      	pop	{r7, pc}

0800b8fc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b8fc:	b580      	push	{r7, lr}
 800b8fe:	b08e      	sub	sp, #56	; 0x38
 800b900:	af00      	add	r7, sp, #0
 800b902:	60f8      	str	r0, [r7, #12]
 800b904:	60b9      	str	r1, [r7, #8]
 800b906:	607a      	str	r2, [r7, #4]
 800b908:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b90a:	2300      	movs	r3, #0
 800b90c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b914:	2b00      	cmp	r3, #0
 800b916:	d109      	bne.n	800b92c <xQueueGenericSend+0x30>
 800b918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b91c:	f383 8811 	msr	BASEPRI, r3
 800b920:	f3bf 8f6f 	isb	sy
 800b924:	f3bf 8f4f 	dsb	sy
 800b928:	62bb      	str	r3, [r7, #40]	; 0x28
 800b92a:	e7fe      	b.n	800b92a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b92c:	68bb      	ldr	r3, [r7, #8]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d103      	bne.n	800b93a <xQueueGenericSend+0x3e>
 800b932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b936:	2b00      	cmp	r3, #0
 800b938:	d101      	bne.n	800b93e <xQueueGenericSend+0x42>
 800b93a:	2301      	movs	r3, #1
 800b93c:	e000      	b.n	800b940 <xQueueGenericSend+0x44>
 800b93e:	2300      	movs	r3, #0
 800b940:	2b00      	cmp	r3, #0
 800b942:	d109      	bne.n	800b958 <xQueueGenericSend+0x5c>
 800b944:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b948:	f383 8811 	msr	BASEPRI, r3
 800b94c:	f3bf 8f6f 	isb	sy
 800b950:	f3bf 8f4f 	dsb	sy
 800b954:	627b      	str	r3, [r7, #36]	; 0x24
 800b956:	e7fe      	b.n	800b956 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b958:	683b      	ldr	r3, [r7, #0]
 800b95a:	2b02      	cmp	r3, #2
 800b95c:	d103      	bne.n	800b966 <xQueueGenericSend+0x6a>
 800b95e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b962:	2b01      	cmp	r3, #1
 800b964:	d101      	bne.n	800b96a <xQueueGenericSend+0x6e>
 800b966:	2301      	movs	r3, #1
 800b968:	e000      	b.n	800b96c <xQueueGenericSend+0x70>
 800b96a:	2300      	movs	r3, #0
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d109      	bne.n	800b984 <xQueueGenericSend+0x88>
 800b970:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b974:	f383 8811 	msr	BASEPRI, r3
 800b978:	f3bf 8f6f 	isb	sy
 800b97c:	f3bf 8f4f 	dsb	sy
 800b980:	623b      	str	r3, [r7, #32]
 800b982:	e7fe      	b.n	800b982 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b984:	f001 fb34 	bl	800cff0 <xTaskGetSchedulerState>
 800b988:	4603      	mov	r3, r0
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d102      	bne.n	800b994 <xQueueGenericSend+0x98>
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	2b00      	cmp	r3, #0
 800b992:	d101      	bne.n	800b998 <xQueueGenericSend+0x9c>
 800b994:	2301      	movs	r3, #1
 800b996:	e000      	b.n	800b99a <xQueueGenericSend+0x9e>
 800b998:	2300      	movs	r3, #0
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d109      	bne.n	800b9b2 <xQueueGenericSend+0xb6>
 800b99e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9a2:	f383 8811 	msr	BASEPRI, r3
 800b9a6:	f3bf 8f6f 	isb	sy
 800b9aa:	f3bf 8f4f 	dsb	sy
 800b9ae:	61fb      	str	r3, [r7, #28]
 800b9b0:	e7fe      	b.n	800b9b0 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b9b2:	f7ff fd03 	bl	800b3bc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b9b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b9ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9be:	429a      	cmp	r2, r3
 800b9c0:	d302      	bcc.n	800b9c8 <xQueueGenericSend+0xcc>
 800b9c2:	683b      	ldr	r3, [r7, #0]
 800b9c4:	2b02      	cmp	r3, #2
 800b9c6:	d129      	bne.n	800ba1c <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b9c8:	683a      	ldr	r2, [r7, #0]
 800b9ca:	68b9      	ldr	r1, [r7, #8]
 800b9cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b9ce:	f000 fc26 	bl	800c21e <prvCopyDataToQueue>
 800b9d2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b9d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d010      	beq.n	800b9fe <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b9dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9de:	3324      	adds	r3, #36	; 0x24
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	f001 f94f 	bl	800cc84 <xTaskRemoveFromEventList>
 800b9e6:	4603      	mov	r3, r0
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d013      	beq.n	800ba14 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b9ec:	4b3f      	ldr	r3, [pc, #252]	; (800baec <xQueueGenericSend+0x1f0>)
 800b9ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b9f2:	601a      	str	r2, [r3, #0]
 800b9f4:	f3bf 8f4f 	dsb	sy
 800b9f8:	f3bf 8f6f 	isb	sy
 800b9fc:	e00a      	b.n	800ba14 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b9fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d007      	beq.n	800ba14 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ba04:	4b39      	ldr	r3, [pc, #228]	; (800baec <xQueueGenericSend+0x1f0>)
 800ba06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba0a:	601a      	str	r2, [r3, #0]
 800ba0c:	f3bf 8f4f 	dsb	sy
 800ba10:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ba14:	f7ff fd00 	bl	800b418 <vPortExitCritical>
				return pdPASS;
 800ba18:	2301      	movs	r3, #1
 800ba1a:	e063      	b.n	800bae4 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d103      	bne.n	800ba2a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ba22:	f7ff fcf9 	bl	800b418 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ba26:	2300      	movs	r3, #0
 800ba28:	e05c      	b.n	800bae4 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ba2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d106      	bne.n	800ba3e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ba30:	f107 0314 	add.w	r3, r7, #20
 800ba34:	4618      	mov	r0, r3
 800ba36:	f001 f987 	bl	800cd48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ba3a:	2301      	movs	r3, #1
 800ba3c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ba3e:	f7ff fceb 	bl	800b418 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ba42:	f000 ff1d 	bl	800c880 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ba46:	f7ff fcb9 	bl	800b3bc <vPortEnterCritical>
 800ba4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba4c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ba50:	b25b      	sxtb	r3, r3
 800ba52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ba56:	d103      	bne.n	800ba60 <xQueueGenericSend+0x164>
 800ba58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ba60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba62:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ba66:	b25b      	sxtb	r3, r3
 800ba68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ba6c:	d103      	bne.n	800ba76 <xQueueGenericSend+0x17a>
 800ba6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba70:	2200      	movs	r2, #0
 800ba72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ba76:	f7ff fccf 	bl	800b418 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ba7a:	1d3a      	adds	r2, r7, #4
 800ba7c:	f107 0314 	add.w	r3, r7, #20
 800ba80:	4611      	mov	r1, r2
 800ba82:	4618      	mov	r0, r3
 800ba84:	f001 f976 	bl	800cd74 <xTaskCheckForTimeOut>
 800ba88:	4603      	mov	r3, r0
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d124      	bne.n	800bad8 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ba8e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ba90:	f000 fcbd 	bl	800c40e <prvIsQueueFull>
 800ba94:	4603      	mov	r3, r0
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d018      	beq.n	800bacc <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ba9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba9c:	3310      	adds	r3, #16
 800ba9e:	687a      	ldr	r2, [r7, #4]
 800baa0:	4611      	mov	r1, r2
 800baa2:	4618      	mov	r0, r3
 800baa4:	f001 f8ca 	bl	800cc3c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800baa8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800baaa:	f000 fc48 	bl	800c33e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800baae:	f000 fef5 	bl	800c89c <xTaskResumeAll>
 800bab2:	4603      	mov	r3, r0
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	f47f af7c 	bne.w	800b9b2 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800baba:	4b0c      	ldr	r3, [pc, #48]	; (800baec <xQueueGenericSend+0x1f0>)
 800babc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bac0:	601a      	str	r2, [r3, #0]
 800bac2:	f3bf 8f4f 	dsb	sy
 800bac6:	f3bf 8f6f 	isb	sy
 800baca:	e772      	b.n	800b9b2 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800bacc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bace:	f000 fc36 	bl	800c33e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bad2:	f000 fee3 	bl	800c89c <xTaskResumeAll>
 800bad6:	e76c      	b.n	800b9b2 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800bad8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bada:	f000 fc30 	bl	800c33e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bade:	f000 fedd 	bl	800c89c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800bae2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800bae4:	4618      	mov	r0, r3
 800bae6:	3738      	adds	r7, #56	; 0x38
 800bae8:	46bd      	mov	sp, r7
 800baea:	bd80      	pop	{r7, pc}
 800baec:	e000ed04 	.word	0xe000ed04

0800baf0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b08e      	sub	sp, #56	; 0x38
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	60f8      	str	r0, [r7, #12]
 800baf8:	60b9      	str	r1, [r7, #8]
 800bafa:	607a      	str	r2, [r7, #4]
 800bafc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bb02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d109      	bne.n	800bb1c <xQueueGenericSendFromISR+0x2c>
 800bb08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb0c:	f383 8811 	msr	BASEPRI, r3
 800bb10:	f3bf 8f6f 	isb	sy
 800bb14:	f3bf 8f4f 	dsb	sy
 800bb18:	627b      	str	r3, [r7, #36]	; 0x24
 800bb1a:	e7fe      	b.n	800bb1a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bb1c:	68bb      	ldr	r3, [r7, #8]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d103      	bne.n	800bb2a <xQueueGenericSendFromISR+0x3a>
 800bb22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d101      	bne.n	800bb2e <xQueueGenericSendFromISR+0x3e>
 800bb2a:	2301      	movs	r3, #1
 800bb2c:	e000      	b.n	800bb30 <xQueueGenericSendFromISR+0x40>
 800bb2e:	2300      	movs	r3, #0
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d109      	bne.n	800bb48 <xQueueGenericSendFromISR+0x58>
 800bb34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb38:	f383 8811 	msr	BASEPRI, r3
 800bb3c:	f3bf 8f6f 	isb	sy
 800bb40:	f3bf 8f4f 	dsb	sy
 800bb44:	623b      	str	r3, [r7, #32]
 800bb46:	e7fe      	b.n	800bb46 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bb48:	683b      	ldr	r3, [r7, #0]
 800bb4a:	2b02      	cmp	r3, #2
 800bb4c:	d103      	bne.n	800bb56 <xQueueGenericSendFromISR+0x66>
 800bb4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb52:	2b01      	cmp	r3, #1
 800bb54:	d101      	bne.n	800bb5a <xQueueGenericSendFromISR+0x6a>
 800bb56:	2301      	movs	r3, #1
 800bb58:	e000      	b.n	800bb5c <xQueueGenericSendFromISR+0x6c>
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d109      	bne.n	800bb74 <xQueueGenericSendFromISR+0x84>
 800bb60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb64:	f383 8811 	msr	BASEPRI, r3
 800bb68:	f3bf 8f6f 	isb	sy
 800bb6c:	f3bf 8f4f 	dsb	sy
 800bb70:	61fb      	str	r3, [r7, #28]
 800bb72:	e7fe      	b.n	800bb72 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bb74:	f7ff fcfe 	bl	800b574 <vPortValidateInterruptPriority>
	__asm volatile
 800bb78:	f3ef 8211 	mrs	r2, BASEPRI
 800bb7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb80:	f383 8811 	msr	BASEPRI, r3
 800bb84:	f3bf 8f6f 	isb	sy
 800bb88:	f3bf 8f4f 	dsb	sy
 800bb8c:	61ba      	str	r2, [r7, #24]
 800bb8e:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800bb90:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bb92:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bb94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bb98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb9c:	429a      	cmp	r2, r3
 800bb9e:	d302      	bcc.n	800bba6 <xQueueGenericSendFromISR+0xb6>
 800bba0:	683b      	ldr	r3, [r7, #0]
 800bba2:	2b02      	cmp	r3, #2
 800bba4:	d12c      	bne.n	800bc00 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bba8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bbac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bbb0:	683a      	ldr	r2, [r7, #0]
 800bbb2:	68b9      	ldr	r1, [r7, #8]
 800bbb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bbb6:	f000 fb32 	bl	800c21e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bbba:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800bbbe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bbc2:	d112      	bne.n	800bbea <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bbc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d016      	beq.n	800bbfa <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bbcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbce:	3324      	adds	r3, #36	; 0x24
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	f001 f857 	bl	800cc84 <xTaskRemoveFromEventList>
 800bbd6:	4603      	mov	r3, r0
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d00e      	beq.n	800bbfa <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d00b      	beq.n	800bbfa <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	2201      	movs	r2, #1
 800bbe6:	601a      	str	r2, [r3, #0]
 800bbe8:	e007      	b.n	800bbfa <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bbea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bbee:	3301      	adds	r3, #1
 800bbf0:	b2db      	uxtb	r3, r3
 800bbf2:	b25a      	sxtb	r2, r3
 800bbf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbf6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800bbfa:	2301      	movs	r3, #1
 800bbfc:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800bbfe:	e001      	b.n	800bc04 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bc00:	2300      	movs	r3, #0
 800bc02:	637b      	str	r3, [r7, #52]	; 0x34
 800bc04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc06:	613b      	str	r3, [r7, #16]
	__asm volatile
 800bc08:	693b      	ldr	r3, [r7, #16]
 800bc0a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bc0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800bc10:	4618      	mov	r0, r3
 800bc12:	3738      	adds	r7, #56	; 0x38
 800bc14:	46bd      	mov	sp, r7
 800bc16:	bd80      	pop	{r7, pc}

0800bc18 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800bc18:	b580      	push	{r7, lr}
 800bc1a:	b08e      	sub	sp, #56	; 0x38
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	6078      	str	r0, [r7, #4]
 800bc20:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800bc26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d109      	bne.n	800bc40 <xQueueGiveFromISR+0x28>
	__asm volatile
 800bc2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc30:	f383 8811 	msr	BASEPRI, r3
 800bc34:	f3bf 8f6f 	isb	sy
 800bc38:	f3bf 8f4f 	dsb	sy
 800bc3c:	623b      	str	r3, [r7, #32]
 800bc3e:	e7fe      	b.n	800bc3e <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800bc40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d009      	beq.n	800bc5c <xQueueGiveFromISR+0x44>
 800bc48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc4c:	f383 8811 	msr	BASEPRI, r3
 800bc50:	f3bf 8f6f 	isb	sy
 800bc54:	f3bf 8f4f 	dsb	sy
 800bc58:	61fb      	str	r3, [r7, #28]
 800bc5a:	e7fe      	b.n	800bc5a <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800bc5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d103      	bne.n	800bc6c <xQueueGiveFromISR+0x54>
 800bc64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc66:	689b      	ldr	r3, [r3, #8]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d101      	bne.n	800bc70 <xQueueGiveFromISR+0x58>
 800bc6c:	2301      	movs	r3, #1
 800bc6e:	e000      	b.n	800bc72 <xQueueGiveFromISR+0x5a>
 800bc70:	2300      	movs	r3, #0
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d109      	bne.n	800bc8a <xQueueGiveFromISR+0x72>
 800bc76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc7a:	f383 8811 	msr	BASEPRI, r3
 800bc7e:	f3bf 8f6f 	isb	sy
 800bc82:	f3bf 8f4f 	dsb	sy
 800bc86:	61bb      	str	r3, [r7, #24]
 800bc88:	e7fe      	b.n	800bc88 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bc8a:	f7ff fc73 	bl	800b574 <vPortValidateInterruptPriority>
	__asm volatile
 800bc8e:	f3ef 8211 	mrs	r2, BASEPRI
 800bc92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc96:	f383 8811 	msr	BASEPRI, r3
 800bc9a:	f3bf 8f6f 	isb	sy
 800bc9e:	f3bf 8f4f 	dsb	sy
 800bca2:	617a      	str	r2, [r7, #20]
 800bca4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800bca6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bca8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bcaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcae:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800bcb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bcb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bcb6:	429a      	cmp	r2, r3
 800bcb8:	d22b      	bcs.n	800bd12 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bcba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcbc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bcc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bcc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcc6:	1c5a      	adds	r2, r3, #1
 800bcc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcca:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bccc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bcd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bcd4:	d112      	bne.n	800bcfc <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bcd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d016      	beq.n	800bd0c <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bcde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bce0:	3324      	adds	r3, #36	; 0x24
 800bce2:	4618      	mov	r0, r3
 800bce4:	f000 ffce 	bl	800cc84 <xTaskRemoveFromEventList>
 800bce8:	4603      	mov	r3, r0
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d00e      	beq.n	800bd0c <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bcee:	683b      	ldr	r3, [r7, #0]
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d00b      	beq.n	800bd0c <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bcf4:	683b      	ldr	r3, [r7, #0]
 800bcf6:	2201      	movs	r2, #1
 800bcf8:	601a      	str	r2, [r3, #0]
 800bcfa:	e007      	b.n	800bd0c <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bcfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bd00:	3301      	adds	r3, #1
 800bd02:	b2db      	uxtb	r3, r3
 800bd04:	b25a      	sxtb	r2, r3
 800bd06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800bd0c:	2301      	movs	r3, #1
 800bd0e:	637b      	str	r3, [r7, #52]	; 0x34
 800bd10:	e001      	b.n	800bd16 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bd12:	2300      	movs	r3, #0
 800bd14:	637b      	str	r3, [r7, #52]	; 0x34
 800bd16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd18:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bd20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800bd22:	4618      	mov	r0, r3
 800bd24:	3738      	adds	r7, #56	; 0x38
 800bd26:	46bd      	mov	sp, r7
 800bd28:	bd80      	pop	{r7, pc}
	...

0800bd2c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	b08c      	sub	sp, #48	; 0x30
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	60f8      	str	r0, [r7, #12]
 800bd34:	60b9      	str	r1, [r7, #8]
 800bd36:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800bd38:	2300      	movs	r3, #0
 800bd3a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bd40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d109      	bne.n	800bd5a <xQueueReceive+0x2e>
	__asm volatile
 800bd46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd4a:	f383 8811 	msr	BASEPRI, r3
 800bd4e:	f3bf 8f6f 	isb	sy
 800bd52:	f3bf 8f4f 	dsb	sy
 800bd56:	623b      	str	r3, [r7, #32]
 800bd58:	e7fe      	b.n	800bd58 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bd5a:	68bb      	ldr	r3, [r7, #8]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d103      	bne.n	800bd68 <xQueueReceive+0x3c>
 800bd60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d101      	bne.n	800bd6c <xQueueReceive+0x40>
 800bd68:	2301      	movs	r3, #1
 800bd6a:	e000      	b.n	800bd6e <xQueueReceive+0x42>
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d109      	bne.n	800bd86 <xQueueReceive+0x5a>
 800bd72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd76:	f383 8811 	msr	BASEPRI, r3
 800bd7a:	f3bf 8f6f 	isb	sy
 800bd7e:	f3bf 8f4f 	dsb	sy
 800bd82:	61fb      	str	r3, [r7, #28]
 800bd84:	e7fe      	b.n	800bd84 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bd86:	f001 f933 	bl	800cff0 <xTaskGetSchedulerState>
 800bd8a:	4603      	mov	r3, r0
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d102      	bne.n	800bd96 <xQueueReceive+0x6a>
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d101      	bne.n	800bd9a <xQueueReceive+0x6e>
 800bd96:	2301      	movs	r3, #1
 800bd98:	e000      	b.n	800bd9c <xQueueReceive+0x70>
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d109      	bne.n	800bdb4 <xQueueReceive+0x88>
 800bda0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bda4:	f383 8811 	msr	BASEPRI, r3
 800bda8:	f3bf 8f6f 	isb	sy
 800bdac:	f3bf 8f4f 	dsb	sy
 800bdb0:	61bb      	str	r3, [r7, #24]
 800bdb2:	e7fe      	b.n	800bdb2 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bdb4:	f7ff fb02 	bl	800b3bc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bdb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdbc:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bdbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d01f      	beq.n	800be04 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bdc4:	68b9      	ldr	r1, [r7, #8]
 800bdc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bdc8:	f000 fa93 	bl	800c2f2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bdcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdce:	1e5a      	subs	r2, r3, #1
 800bdd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdd2:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bdd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdd6:	691b      	ldr	r3, [r3, #16]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d00f      	beq.n	800bdfc <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdde:	3310      	adds	r3, #16
 800bde0:	4618      	mov	r0, r3
 800bde2:	f000 ff4f 	bl	800cc84 <xTaskRemoveFromEventList>
 800bde6:	4603      	mov	r3, r0
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d007      	beq.n	800bdfc <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bdec:	4b3c      	ldr	r3, [pc, #240]	; (800bee0 <xQueueReceive+0x1b4>)
 800bdee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bdf2:	601a      	str	r2, [r3, #0]
 800bdf4:	f3bf 8f4f 	dsb	sy
 800bdf8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bdfc:	f7ff fb0c 	bl	800b418 <vPortExitCritical>
				return pdPASS;
 800be00:	2301      	movs	r3, #1
 800be02:	e069      	b.n	800bed8 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d103      	bne.n	800be12 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800be0a:	f7ff fb05 	bl	800b418 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800be0e:	2300      	movs	r3, #0
 800be10:	e062      	b.n	800bed8 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800be12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be14:	2b00      	cmp	r3, #0
 800be16:	d106      	bne.n	800be26 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800be18:	f107 0310 	add.w	r3, r7, #16
 800be1c:	4618      	mov	r0, r3
 800be1e:	f000 ff93 	bl	800cd48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800be22:	2301      	movs	r3, #1
 800be24:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800be26:	f7ff faf7 	bl	800b418 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800be2a:	f000 fd29 	bl	800c880 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800be2e:	f7ff fac5 	bl	800b3bc <vPortEnterCritical>
 800be32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800be38:	b25b      	sxtb	r3, r3
 800be3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800be3e:	d103      	bne.n	800be48 <xQueueReceive+0x11c>
 800be40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be42:	2200      	movs	r2, #0
 800be44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800be48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800be4e:	b25b      	sxtb	r3, r3
 800be50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800be54:	d103      	bne.n	800be5e <xQueueReceive+0x132>
 800be56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be58:	2200      	movs	r2, #0
 800be5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800be5e:	f7ff fadb 	bl	800b418 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800be62:	1d3a      	adds	r2, r7, #4
 800be64:	f107 0310 	add.w	r3, r7, #16
 800be68:	4611      	mov	r1, r2
 800be6a:	4618      	mov	r0, r3
 800be6c:	f000 ff82 	bl	800cd74 <xTaskCheckForTimeOut>
 800be70:	4603      	mov	r3, r0
 800be72:	2b00      	cmp	r3, #0
 800be74:	d123      	bne.n	800bebe <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800be76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be78:	f000 fab3 	bl	800c3e2 <prvIsQueueEmpty>
 800be7c:	4603      	mov	r3, r0
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d017      	beq.n	800beb2 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800be82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be84:	3324      	adds	r3, #36	; 0x24
 800be86:	687a      	ldr	r2, [r7, #4]
 800be88:	4611      	mov	r1, r2
 800be8a:	4618      	mov	r0, r3
 800be8c:	f000 fed6 	bl	800cc3c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800be90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be92:	f000 fa54 	bl	800c33e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800be96:	f000 fd01 	bl	800c89c <xTaskResumeAll>
 800be9a:	4603      	mov	r3, r0
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d189      	bne.n	800bdb4 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800bea0:	4b0f      	ldr	r3, [pc, #60]	; (800bee0 <xQueueReceive+0x1b4>)
 800bea2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bea6:	601a      	str	r2, [r3, #0]
 800bea8:	f3bf 8f4f 	dsb	sy
 800beac:	f3bf 8f6f 	isb	sy
 800beb0:	e780      	b.n	800bdb4 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800beb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800beb4:	f000 fa43 	bl	800c33e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800beb8:	f000 fcf0 	bl	800c89c <xTaskResumeAll>
 800bebc:	e77a      	b.n	800bdb4 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800bebe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bec0:	f000 fa3d 	bl	800c33e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bec4:	f000 fcea 	bl	800c89c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bec8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800beca:	f000 fa8a 	bl	800c3e2 <prvIsQueueEmpty>
 800bece:	4603      	mov	r3, r0
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	f43f af6f 	beq.w	800bdb4 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bed6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bed8:	4618      	mov	r0, r3
 800beda:	3730      	adds	r7, #48	; 0x30
 800bedc:	46bd      	mov	sp, r7
 800bede:	bd80      	pop	{r7, pc}
 800bee0:	e000ed04 	.word	0xe000ed04

0800bee4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800bee4:	b580      	push	{r7, lr}
 800bee6:	b08e      	sub	sp, #56	; 0x38
 800bee8:	af00      	add	r7, sp, #0
 800beea:	6078      	str	r0, [r7, #4]
 800beec:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800beee:	2300      	movs	r3, #0
 800bef0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800bef6:	2300      	movs	r3, #0
 800bef8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800befa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800befc:	2b00      	cmp	r3, #0
 800befe:	d109      	bne.n	800bf14 <xQueueSemaphoreTake+0x30>
 800bf00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf04:	f383 8811 	msr	BASEPRI, r3
 800bf08:	f3bf 8f6f 	isb	sy
 800bf0c:	f3bf 8f4f 	dsb	sy
 800bf10:	623b      	str	r3, [r7, #32]
 800bf12:	e7fe      	b.n	800bf12 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800bf14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d009      	beq.n	800bf30 <xQueueSemaphoreTake+0x4c>
 800bf1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf20:	f383 8811 	msr	BASEPRI, r3
 800bf24:	f3bf 8f6f 	isb	sy
 800bf28:	f3bf 8f4f 	dsb	sy
 800bf2c:	61fb      	str	r3, [r7, #28]
 800bf2e:	e7fe      	b.n	800bf2e <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bf30:	f001 f85e 	bl	800cff0 <xTaskGetSchedulerState>
 800bf34:	4603      	mov	r3, r0
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d102      	bne.n	800bf40 <xQueueSemaphoreTake+0x5c>
 800bf3a:	683b      	ldr	r3, [r7, #0]
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d101      	bne.n	800bf44 <xQueueSemaphoreTake+0x60>
 800bf40:	2301      	movs	r3, #1
 800bf42:	e000      	b.n	800bf46 <xQueueSemaphoreTake+0x62>
 800bf44:	2300      	movs	r3, #0
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d109      	bne.n	800bf5e <xQueueSemaphoreTake+0x7a>
 800bf4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf4e:	f383 8811 	msr	BASEPRI, r3
 800bf52:	f3bf 8f6f 	isb	sy
 800bf56:	f3bf 8f4f 	dsb	sy
 800bf5a:	61bb      	str	r3, [r7, #24]
 800bf5c:	e7fe      	b.n	800bf5c <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bf5e:	f7ff fa2d 	bl	800b3bc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800bf62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf66:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800bf68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d024      	beq.n	800bfb8 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800bf6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf70:	1e5a      	subs	r2, r3, #1
 800bf72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf74:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bf76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d104      	bne.n	800bf88 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800bf7e:	f001 f9f1 	bl	800d364 <pvTaskIncrementMutexHeldCount>
 800bf82:	4602      	mov	r2, r0
 800bf84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf86:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bf88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf8a:	691b      	ldr	r3, [r3, #16]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d00f      	beq.n	800bfb0 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bf90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf92:	3310      	adds	r3, #16
 800bf94:	4618      	mov	r0, r3
 800bf96:	f000 fe75 	bl	800cc84 <xTaskRemoveFromEventList>
 800bf9a:	4603      	mov	r3, r0
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d007      	beq.n	800bfb0 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bfa0:	4b53      	ldr	r3, [pc, #332]	; (800c0f0 <xQueueSemaphoreTake+0x20c>)
 800bfa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bfa6:	601a      	str	r2, [r3, #0]
 800bfa8:	f3bf 8f4f 	dsb	sy
 800bfac:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bfb0:	f7ff fa32 	bl	800b418 <vPortExitCritical>
				return pdPASS;
 800bfb4:	2301      	movs	r3, #1
 800bfb6:	e096      	b.n	800c0e6 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bfb8:	683b      	ldr	r3, [r7, #0]
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d110      	bne.n	800bfe0 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800bfbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d009      	beq.n	800bfd8 <xQueueSemaphoreTake+0xf4>
 800bfc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfc8:	f383 8811 	msr	BASEPRI, r3
 800bfcc:	f3bf 8f6f 	isb	sy
 800bfd0:	f3bf 8f4f 	dsb	sy
 800bfd4:	617b      	str	r3, [r7, #20]
 800bfd6:	e7fe      	b.n	800bfd6 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800bfd8:	f7ff fa1e 	bl	800b418 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bfdc:	2300      	movs	r3, #0
 800bfde:	e082      	b.n	800c0e6 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bfe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d106      	bne.n	800bff4 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bfe6:	f107 030c 	add.w	r3, r7, #12
 800bfea:	4618      	mov	r0, r3
 800bfec:	f000 feac 	bl	800cd48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bff0:	2301      	movs	r3, #1
 800bff2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bff4:	f7ff fa10 	bl	800b418 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bff8:	f000 fc42 	bl	800c880 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bffc:	f7ff f9de 	bl	800b3bc <vPortEnterCritical>
 800c000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c002:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c006:	b25b      	sxtb	r3, r3
 800c008:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c00c:	d103      	bne.n	800c016 <xQueueSemaphoreTake+0x132>
 800c00e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c010:	2200      	movs	r2, #0
 800c012:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c018:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c01c:	b25b      	sxtb	r3, r3
 800c01e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c022:	d103      	bne.n	800c02c <xQueueSemaphoreTake+0x148>
 800c024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c026:	2200      	movs	r2, #0
 800c028:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c02c:	f7ff f9f4 	bl	800b418 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c030:	463a      	mov	r2, r7
 800c032:	f107 030c 	add.w	r3, r7, #12
 800c036:	4611      	mov	r1, r2
 800c038:	4618      	mov	r0, r3
 800c03a:	f000 fe9b 	bl	800cd74 <xTaskCheckForTimeOut>
 800c03e:	4603      	mov	r3, r0
 800c040:	2b00      	cmp	r3, #0
 800c042:	d132      	bne.n	800c0aa <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c044:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c046:	f000 f9cc 	bl	800c3e2 <prvIsQueueEmpty>
 800c04a:	4603      	mov	r3, r0
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d026      	beq.n	800c09e <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	2b00      	cmp	r3, #0
 800c056:	d109      	bne.n	800c06c <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 800c058:	f7ff f9b0 	bl	800b3bc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c05c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c05e:	689b      	ldr	r3, [r3, #8]
 800c060:	4618      	mov	r0, r3
 800c062:	f000 ffe3 	bl	800d02c <xTaskPriorityInherit>
 800c066:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800c068:	f7ff f9d6 	bl	800b418 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c06c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c06e:	3324      	adds	r3, #36	; 0x24
 800c070:	683a      	ldr	r2, [r7, #0]
 800c072:	4611      	mov	r1, r2
 800c074:	4618      	mov	r0, r3
 800c076:	f000 fde1 	bl	800cc3c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c07a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c07c:	f000 f95f 	bl	800c33e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c080:	f000 fc0c 	bl	800c89c <xTaskResumeAll>
 800c084:	4603      	mov	r3, r0
 800c086:	2b00      	cmp	r3, #0
 800c088:	f47f af69 	bne.w	800bf5e <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 800c08c:	4b18      	ldr	r3, [pc, #96]	; (800c0f0 <xQueueSemaphoreTake+0x20c>)
 800c08e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c092:	601a      	str	r2, [r3, #0]
 800c094:	f3bf 8f4f 	dsb	sy
 800c098:	f3bf 8f6f 	isb	sy
 800c09c:	e75f      	b.n	800bf5e <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c09e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c0a0:	f000 f94d 	bl	800c33e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c0a4:	f000 fbfa 	bl	800c89c <xTaskResumeAll>
 800c0a8:	e759      	b.n	800bf5e <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c0aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c0ac:	f000 f947 	bl	800c33e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c0b0:	f000 fbf4 	bl	800c89c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c0b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c0b6:	f000 f994 	bl	800c3e2 <prvIsQueueEmpty>
 800c0ba:	4603      	mov	r3, r0
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	f43f af4e 	beq.w	800bf5e <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c0c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d00d      	beq.n	800c0e4 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 800c0c8:	f7ff f978 	bl	800b3bc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c0cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c0ce:	f000 f88e 	bl	800c1ee <prvGetDisinheritPriorityAfterTimeout>
 800c0d2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c0d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0d6:	689b      	ldr	r3, [r3, #8]
 800c0d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c0da:	4618      	mov	r0, r3
 800c0dc:	f001 f8aa 	bl	800d234 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c0e0:	f7ff f99a 	bl	800b418 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c0e4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	3738      	adds	r7, #56	; 0x38
 800c0ea:	46bd      	mov	sp, r7
 800c0ec:	bd80      	pop	{r7, pc}
 800c0ee:	bf00      	nop
 800c0f0:	e000ed04 	.word	0xe000ed04

0800c0f4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c0f4:	b580      	push	{r7, lr}
 800c0f6:	b08e      	sub	sp, #56	; 0x38
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	60f8      	str	r0, [r7, #12]
 800c0fc:	60b9      	str	r1, [r7, #8]
 800c0fe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c106:	2b00      	cmp	r3, #0
 800c108:	d109      	bne.n	800c11e <xQueueReceiveFromISR+0x2a>
 800c10a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c10e:	f383 8811 	msr	BASEPRI, r3
 800c112:	f3bf 8f6f 	isb	sy
 800c116:	f3bf 8f4f 	dsb	sy
 800c11a:	623b      	str	r3, [r7, #32]
 800c11c:	e7fe      	b.n	800c11c <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c11e:	68bb      	ldr	r3, [r7, #8]
 800c120:	2b00      	cmp	r3, #0
 800c122:	d103      	bne.n	800c12c <xQueueReceiveFromISR+0x38>
 800c124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d101      	bne.n	800c130 <xQueueReceiveFromISR+0x3c>
 800c12c:	2301      	movs	r3, #1
 800c12e:	e000      	b.n	800c132 <xQueueReceiveFromISR+0x3e>
 800c130:	2300      	movs	r3, #0
 800c132:	2b00      	cmp	r3, #0
 800c134:	d109      	bne.n	800c14a <xQueueReceiveFromISR+0x56>
 800c136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c13a:	f383 8811 	msr	BASEPRI, r3
 800c13e:	f3bf 8f6f 	isb	sy
 800c142:	f3bf 8f4f 	dsb	sy
 800c146:	61fb      	str	r3, [r7, #28]
 800c148:	e7fe      	b.n	800c148 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c14a:	f7ff fa13 	bl	800b574 <vPortValidateInterruptPriority>
	__asm volatile
 800c14e:	f3ef 8211 	mrs	r2, BASEPRI
 800c152:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c156:	f383 8811 	msr	BASEPRI, r3
 800c15a:	f3bf 8f6f 	isb	sy
 800c15e:	f3bf 8f4f 	dsb	sy
 800c162:	61ba      	str	r2, [r7, #24]
 800c164:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c166:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c168:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c16a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c16c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c16e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c172:	2b00      	cmp	r3, #0
 800c174:	d02f      	beq.n	800c1d6 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c178:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c17c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c180:	68b9      	ldr	r1, [r7, #8]
 800c182:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c184:	f000 f8b5 	bl	800c2f2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c18a:	1e5a      	subs	r2, r3, #1
 800c18c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c18e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c190:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c194:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c198:	d112      	bne.n	800c1c0 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c19a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c19c:	691b      	ldr	r3, [r3, #16]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d016      	beq.n	800c1d0 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c1a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1a4:	3310      	adds	r3, #16
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	f000 fd6c 	bl	800cc84 <xTaskRemoveFromEventList>
 800c1ac:	4603      	mov	r3, r0
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d00e      	beq.n	800c1d0 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d00b      	beq.n	800c1d0 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	2201      	movs	r2, #1
 800c1bc:	601a      	str	r2, [r3, #0]
 800c1be:	e007      	b.n	800c1d0 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c1c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c1c4:	3301      	adds	r3, #1
 800c1c6:	b2db      	uxtb	r3, r3
 800c1c8:	b25a      	sxtb	r2, r3
 800c1ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800c1d0:	2301      	movs	r3, #1
 800c1d2:	637b      	str	r3, [r7, #52]	; 0x34
 800c1d4:	e001      	b.n	800c1da <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	637b      	str	r3, [r7, #52]	; 0x34
 800c1da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1dc:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c1de:	693b      	ldr	r3, [r7, #16]
 800c1e0:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c1e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	3738      	adds	r7, #56	; 0x38
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	bd80      	pop	{r7, pc}

0800c1ee <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c1ee:	b480      	push	{r7}
 800c1f0:	b085      	sub	sp, #20
 800c1f2:	af00      	add	r7, sp, #0
 800c1f4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d006      	beq.n	800c20c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	f1c3 0307 	rsb	r3, r3, #7
 800c208:	60fb      	str	r3, [r7, #12]
 800c20a:	e001      	b.n	800c210 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c20c:	2300      	movs	r3, #0
 800c20e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c210:	68fb      	ldr	r3, [r7, #12]
	}
 800c212:	4618      	mov	r0, r3
 800c214:	3714      	adds	r7, #20
 800c216:	46bd      	mov	sp, r7
 800c218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21c:	4770      	bx	lr

0800c21e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c21e:	b580      	push	{r7, lr}
 800c220:	b086      	sub	sp, #24
 800c222:	af00      	add	r7, sp, #0
 800c224:	60f8      	str	r0, [r7, #12]
 800c226:	60b9      	str	r1, [r7, #8]
 800c228:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c22a:	2300      	movs	r3, #0
 800c22c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c232:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d10d      	bne.n	800c258 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	2b00      	cmp	r3, #0
 800c242:	d14d      	bne.n	800c2e0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	689b      	ldr	r3, [r3, #8]
 800c248:	4618      	mov	r0, r3
 800c24a:	f000 ff6f 	bl	800d12c <xTaskPriorityDisinherit>
 800c24e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	2200      	movs	r2, #0
 800c254:	609a      	str	r2, [r3, #8]
 800c256:	e043      	b.n	800c2e0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d119      	bne.n	800c292 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	6858      	ldr	r0, [r3, #4]
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c266:	461a      	mov	r2, r3
 800c268:	68b9      	ldr	r1, [r7, #8]
 800c26a:	f00e fae4 	bl	801a836 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	685a      	ldr	r2, [r3, #4]
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c276:	441a      	add	r2, r3
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	685a      	ldr	r2, [r3, #4]
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	689b      	ldr	r3, [r3, #8]
 800c284:	429a      	cmp	r2, r3
 800c286:	d32b      	bcc.n	800c2e0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	681a      	ldr	r2, [r3, #0]
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	605a      	str	r2, [r3, #4]
 800c290:	e026      	b.n	800c2e0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	68d8      	ldr	r0, [r3, #12]
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c29a:	461a      	mov	r2, r3
 800c29c:	68b9      	ldr	r1, [r7, #8]
 800c29e:	f00e faca 	bl	801a836 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	68da      	ldr	r2, [r3, #12]
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2aa:	425b      	negs	r3, r3
 800c2ac:	441a      	add	r2, r3
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	68da      	ldr	r2, [r3, #12]
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	429a      	cmp	r2, r3
 800c2bc:	d207      	bcs.n	800c2ce <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	689a      	ldr	r2, [r3, #8]
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2c6:	425b      	negs	r3, r3
 800c2c8:	441a      	add	r2, r3
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	2b02      	cmp	r3, #2
 800c2d2:	d105      	bne.n	800c2e0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c2d4:	693b      	ldr	r3, [r7, #16]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d002      	beq.n	800c2e0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c2da:	693b      	ldr	r3, [r7, #16]
 800c2dc:	3b01      	subs	r3, #1
 800c2de:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c2e0:	693b      	ldr	r3, [r7, #16]
 800c2e2:	1c5a      	adds	r2, r3, #1
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c2e8:	697b      	ldr	r3, [r7, #20]
}
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	3718      	adds	r7, #24
 800c2ee:	46bd      	mov	sp, r7
 800c2f0:	bd80      	pop	{r7, pc}

0800c2f2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c2f2:	b580      	push	{r7, lr}
 800c2f4:	b082      	sub	sp, #8
 800c2f6:	af00      	add	r7, sp, #0
 800c2f8:	6078      	str	r0, [r7, #4]
 800c2fa:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c300:	2b00      	cmp	r3, #0
 800c302:	d018      	beq.n	800c336 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	68da      	ldr	r2, [r3, #12]
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c30c:	441a      	add	r2, r3
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	68da      	ldr	r2, [r3, #12]
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	689b      	ldr	r3, [r3, #8]
 800c31a:	429a      	cmp	r2, r3
 800c31c:	d303      	bcc.n	800c326 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	681a      	ldr	r2, [r3, #0]
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	68d9      	ldr	r1, [r3, #12]
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c32e:	461a      	mov	r2, r3
 800c330:	6838      	ldr	r0, [r7, #0]
 800c332:	f00e fa80 	bl	801a836 <memcpy>
	}
}
 800c336:	bf00      	nop
 800c338:	3708      	adds	r7, #8
 800c33a:	46bd      	mov	sp, r7
 800c33c:	bd80      	pop	{r7, pc}

0800c33e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c33e:	b580      	push	{r7, lr}
 800c340:	b084      	sub	sp, #16
 800c342:	af00      	add	r7, sp, #0
 800c344:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c346:	f7ff f839 	bl	800b3bc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c350:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c352:	e011      	b.n	800c378 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d012      	beq.n	800c382 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	3324      	adds	r3, #36	; 0x24
 800c360:	4618      	mov	r0, r3
 800c362:	f000 fc8f 	bl	800cc84 <xTaskRemoveFromEventList>
 800c366:	4603      	mov	r3, r0
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d001      	beq.n	800c370 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c36c:	f000 fd62 	bl	800ce34 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c370:	7bfb      	ldrb	r3, [r7, #15]
 800c372:	3b01      	subs	r3, #1
 800c374:	b2db      	uxtb	r3, r3
 800c376:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c378:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	dce9      	bgt.n	800c354 <prvUnlockQueue+0x16>
 800c380:	e000      	b.n	800c384 <prvUnlockQueue+0x46>
					break;
 800c382:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	22ff      	movs	r2, #255	; 0xff
 800c388:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c38c:	f7ff f844 	bl	800b418 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c390:	f7ff f814 	bl	800b3bc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c39a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c39c:	e011      	b.n	800c3c2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	691b      	ldr	r3, [r3, #16]
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d012      	beq.n	800c3cc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	3310      	adds	r3, #16
 800c3aa:	4618      	mov	r0, r3
 800c3ac:	f000 fc6a 	bl	800cc84 <xTaskRemoveFromEventList>
 800c3b0:	4603      	mov	r3, r0
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d001      	beq.n	800c3ba <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c3b6:	f000 fd3d 	bl	800ce34 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c3ba:	7bbb      	ldrb	r3, [r7, #14]
 800c3bc:	3b01      	subs	r3, #1
 800c3be:	b2db      	uxtb	r3, r3
 800c3c0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c3c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	dce9      	bgt.n	800c39e <prvUnlockQueue+0x60>
 800c3ca:	e000      	b.n	800c3ce <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c3cc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	22ff      	movs	r2, #255	; 0xff
 800c3d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c3d6:	f7ff f81f 	bl	800b418 <vPortExitCritical>
}
 800c3da:	bf00      	nop
 800c3dc:	3710      	adds	r7, #16
 800c3de:	46bd      	mov	sp, r7
 800c3e0:	bd80      	pop	{r7, pc}

0800c3e2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c3e2:	b580      	push	{r7, lr}
 800c3e4:	b084      	sub	sp, #16
 800c3e6:	af00      	add	r7, sp, #0
 800c3e8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c3ea:	f7fe ffe7 	bl	800b3bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d102      	bne.n	800c3fc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c3f6:	2301      	movs	r3, #1
 800c3f8:	60fb      	str	r3, [r7, #12]
 800c3fa:	e001      	b.n	800c400 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c3fc:	2300      	movs	r3, #0
 800c3fe:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c400:	f7ff f80a 	bl	800b418 <vPortExitCritical>

	return xReturn;
 800c404:	68fb      	ldr	r3, [r7, #12]
}
 800c406:	4618      	mov	r0, r3
 800c408:	3710      	adds	r7, #16
 800c40a:	46bd      	mov	sp, r7
 800c40c:	bd80      	pop	{r7, pc}

0800c40e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c40e:	b580      	push	{r7, lr}
 800c410:	b084      	sub	sp, #16
 800c412:	af00      	add	r7, sp, #0
 800c414:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c416:	f7fe ffd1 	bl	800b3bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c422:	429a      	cmp	r2, r3
 800c424:	d102      	bne.n	800c42c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c426:	2301      	movs	r3, #1
 800c428:	60fb      	str	r3, [r7, #12]
 800c42a:	e001      	b.n	800c430 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c42c:	2300      	movs	r3, #0
 800c42e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c430:	f7fe fff2 	bl	800b418 <vPortExitCritical>

	return xReturn;
 800c434:	68fb      	ldr	r3, [r7, #12]
}
 800c436:	4618      	mov	r0, r3
 800c438:	3710      	adds	r7, #16
 800c43a:	46bd      	mov	sp, r7
 800c43c:	bd80      	pop	{r7, pc}

0800c43e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c43e:	b580      	push	{r7, lr}
 800c440:	b08e      	sub	sp, #56	; 0x38
 800c442:	af04      	add	r7, sp, #16
 800c444:	60f8      	str	r0, [r7, #12]
 800c446:	60b9      	str	r1, [r7, #8]
 800c448:	607a      	str	r2, [r7, #4]
 800c44a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c44c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d109      	bne.n	800c466 <xTaskCreateStatic+0x28>
	__asm volatile
 800c452:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c456:	f383 8811 	msr	BASEPRI, r3
 800c45a:	f3bf 8f6f 	isb	sy
 800c45e:	f3bf 8f4f 	dsb	sy
 800c462:	623b      	str	r3, [r7, #32]
 800c464:	e7fe      	b.n	800c464 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800c466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d109      	bne.n	800c480 <xTaskCreateStatic+0x42>
 800c46c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c470:	f383 8811 	msr	BASEPRI, r3
 800c474:	f3bf 8f6f 	isb	sy
 800c478:	f3bf 8f4f 	dsb	sy
 800c47c:	61fb      	str	r3, [r7, #28]
 800c47e:	e7fe      	b.n	800c47e <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c480:	2354      	movs	r3, #84	; 0x54
 800c482:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c484:	693b      	ldr	r3, [r7, #16]
 800c486:	2b54      	cmp	r3, #84	; 0x54
 800c488:	d009      	beq.n	800c49e <xTaskCreateStatic+0x60>
 800c48a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c48e:	f383 8811 	msr	BASEPRI, r3
 800c492:	f3bf 8f6f 	isb	sy
 800c496:	f3bf 8f4f 	dsb	sy
 800c49a:	61bb      	str	r3, [r7, #24]
 800c49c:	e7fe      	b.n	800c49c <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c49e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c4a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d01e      	beq.n	800c4e4 <xTaskCreateStatic+0xa6>
 800c4a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d01b      	beq.n	800c4e4 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c4ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4ae:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c4b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c4b4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c4b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4b8:	2202      	movs	r2, #2
 800c4ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c4be:	2300      	movs	r3, #0
 800c4c0:	9303      	str	r3, [sp, #12]
 800c4c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4c4:	9302      	str	r3, [sp, #8]
 800c4c6:	f107 0314 	add.w	r3, r7, #20
 800c4ca:	9301      	str	r3, [sp, #4]
 800c4cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4ce:	9300      	str	r3, [sp, #0]
 800c4d0:	683b      	ldr	r3, [r7, #0]
 800c4d2:	687a      	ldr	r2, [r7, #4]
 800c4d4:	68b9      	ldr	r1, [r7, #8]
 800c4d6:	68f8      	ldr	r0, [r7, #12]
 800c4d8:	f000 f850 	bl	800c57c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c4dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c4de:	f000 f8d3 	bl	800c688 <prvAddNewTaskToReadyList>
 800c4e2:	e001      	b.n	800c4e8 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800c4e4:	2300      	movs	r3, #0
 800c4e6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c4e8:	697b      	ldr	r3, [r7, #20]
	}
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	3728      	adds	r7, #40	; 0x28
 800c4ee:	46bd      	mov	sp, r7
 800c4f0:	bd80      	pop	{r7, pc}

0800c4f2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c4f2:	b580      	push	{r7, lr}
 800c4f4:	b08c      	sub	sp, #48	; 0x30
 800c4f6:	af04      	add	r7, sp, #16
 800c4f8:	60f8      	str	r0, [r7, #12]
 800c4fa:	60b9      	str	r1, [r7, #8]
 800c4fc:	603b      	str	r3, [r7, #0]
 800c4fe:	4613      	mov	r3, r2
 800c500:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c502:	88fb      	ldrh	r3, [r7, #6]
 800c504:	009b      	lsls	r3, r3, #2
 800c506:	4618      	mov	r0, r3
 800c508:	f7fe fba8 	bl	800ac5c <pvPortMalloc>
 800c50c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c50e:	697b      	ldr	r3, [r7, #20]
 800c510:	2b00      	cmp	r3, #0
 800c512:	d00e      	beq.n	800c532 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c514:	2054      	movs	r0, #84	; 0x54
 800c516:	f7fe fba1 	bl	800ac5c <pvPortMalloc>
 800c51a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c51c:	69fb      	ldr	r3, [r7, #28]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d003      	beq.n	800c52a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c522:	69fb      	ldr	r3, [r7, #28]
 800c524:	697a      	ldr	r2, [r7, #20]
 800c526:	631a      	str	r2, [r3, #48]	; 0x30
 800c528:	e005      	b.n	800c536 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c52a:	6978      	ldr	r0, [r7, #20]
 800c52c:	f7fe fc58 	bl	800ade0 <vPortFree>
 800c530:	e001      	b.n	800c536 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c532:	2300      	movs	r3, #0
 800c534:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c536:	69fb      	ldr	r3, [r7, #28]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d017      	beq.n	800c56c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c53c:	69fb      	ldr	r3, [r7, #28]
 800c53e:	2200      	movs	r2, #0
 800c540:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c544:	88fa      	ldrh	r2, [r7, #6]
 800c546:	2300      	movs	r3, #0
 800c548:	9303      	str	r3, [sp, #12]
 800c54a:	69fb      	ldr	r3, [r7, #28]
 800c54c:	9302      	str	r3, [sp, #8]
 800c54e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c550:	9301      	str	r3, [sp, #4]
 800c552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c554:	9300      	str	r3, [sp, #0]
 800c556:	683b      	ldr	r3, [r7, #0]
 800c558:	68b9      	ldr	r1, [r7, #8]
 800c55a:	68f8      	ldr	r0, [r7, #12]
 800c55c:	f000 f80e 	bl	800c57c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c560:	69f8      	ldr	r0, [r7, #28]
 800c562:	f000 f891 	bl	800c688 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c566:	2301      	movs	r3, #1
 800c568:	61bb      	str	r3, [r7, #24]
 800c56a:	e002      	b.n	800c572 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c56c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c570:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c572:	69bb      	ldr	r3, [r7, #24]
	}
 800c574:	4618      	mov	r0, r3
 800c576:	3720      	adds	r7, #32
 800c578:	46bd      	mov	sp, r7
 800c57a:	bd80      	pop	{r7, pc}

0800c57c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c57c:	b580      	push	{r7, lr}
 800c57e:	b088      	sub	sp, #32
 800c580:	af00      	add	r7, sp, #0
 800c582:	60f8      	str	r0, [r7, #12]
 800c584:	60b9      	str	r1, [r7, #8]
 800c586:	607a      	str	r2, [r7, #4]
 800c588:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c58a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c58c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c58e:	6879      	ldr	r1, [r7, #4]
 800c590:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800c594:	440b      	add	r3, r1
 800c596:	009b      	lsls	r3, r3, #2
 800c598:	4413      	add	r3, r2
 800c59a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c59c:	69bb      	ldr	r3, [r7, #24]
 800c59e:	f023 0307 	bic.w	r3, r3, #7
 800c5a2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c5a4:	69bb      	ldr	r3, [r7, #24]
 800c5a6:	f003 0307 	and.w	r3, r3, #7
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d009      	beq.n	800c5c2 <prvInitialiseNewTask+0x46>
 800c5ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5b2:	f383 8811 	msr	BASEPRI, r3
 800c5b6:	f3bf 8f6f 	isb	sy
 800c5ba:	f3bf 8f4f 	dsb	sy
 800c5be:	617b      	str	r3, [r7, #20]
 800c5c0:	e7fe      	b.n	800c5c0 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c5c2:	68bb      	ldr	r3, [r7, #8]
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d01f      	beq.n	800c608 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	61fb      	str	r3, [r7, #28]
 800c5cc:	e012      	b.n	800c5f4 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c5ce:	68ba      	ldr	r2, [r7, #8]
 800c5d0:	69fb      	ldr	r3, [r7, #28]
 800c5d2:	4413      	add	r3, r2
 800c5d4:	7819      	ldrb	r1, [r3, #0]
 800c5d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c5d8:	69fb      	ldr	r3, [r7, #28]
 800c5da:	4413      	add	r3, r2
 800c5dc:	3334      	adds	r3, #52	; 0x34
 800c5de:	460a      	mov	r2, r1
 800c5e0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c5e2:	68ba      	ldr	r2, [r7, #8]
 800c5e4:	69fb      	ldr	r3, [r7, #28]
 800c5e6:	4413      	add	r3, r2
 800c5e8:	781b      	ldrb	r3, [r3, #0]
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d006      	beq.n	800c5fc <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c5ee:	69fb      	ldr	r3, [r7, #28]
 800c5f0:	3301      	adds	r3, #1
 800c5f2:	61fb      	str	r3, [r7, #28]
 800c5f4:	69fb      	ldr	r3, [r7, #28]
 800c5f6:	2b0f      	cmp	r3, #15
 800c5f8:	d9e9      	bls.n	800c5ce <prvInitialiseNewTask+0x52>
 800c5fa:	e000      	b.n	800c5fe <prvInitialiseNewTask+0x82>
			{
				break;
 800c5fc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c5fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c600:	2200      	movs	r2, #0
 800c602:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c606:	e003      	b.n	800c610 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c60a:	2200      	movs	r2, #0
 800c60c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c612:	2b06      	cmp	r3, #6
 800c614:	d901      	bls.n	800c61a <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c616:	2306      	movs	r3, #6
 800c618:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c61a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c61c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c61e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c622:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c624:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800c626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c628:	2200      	movs	r2, #0
 800c62a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c62c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c62e:	3304      	adds	r3, #4
 800c630:	4618      	mov	r0, r3
 800c632:	f7fe fd09 	bl	800b048 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c638:	3318      	adds	r3, #24
 800c63a:	4618      	mov	r0, r3
 800c63c:	f7fe fd04 	bl	800b048 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c642:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c644:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c648:	f1c3 0207 	rsb	r2, r3, #7
 800c64c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c64e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c652:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c654:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c658:	2200      	movs	r2, #0
 800c65a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c65c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c65e:	2200      	movs	r2, #0
 800c660:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c664:	683a      	ldr	r2, [r7, #0]
 800c666:	68f9      	ldr	r1, [r7, #12]
 800c668:	69b8      	ldr	r0, [r7, #24]
 800c66a:	f7fe fd81 	bl	800b170 <pxPortInitialiseStack>
 800c66e:	4602      	mov	r2, r0
 800c670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c672:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c676:	2b00      	cmp	r3, #0
 800c678:	d002      	beq.n	800c680 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c67a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c67c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c67e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c680:	bf00      	nop
 800c682:	3720      	adds	r7, #32
 800c684:	46bd      	mov	sp, r7
 800c686:	bd80      	pop	{r7, pc}

0800c688 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c688:	b580      	push	{r7, lr}
 800c68a:	b082      	sub	sp, #8
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c690:	f7fe fe94 	bl	800b3bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c694:	4b2a      	ldr	r3, [pc, #168]	; (800c740 <prvAddNewTaskToReadyList+0xb8>)
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	3301      	adds	r3, #1
 800c69a:	4a29      	ldr	r2, [pc, #164]	; (800c740 <prvAddNewTaskToReadyList+0xb8>)
 800c69c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c69e:	4b29      	ldr	r3, [pc, #164]	; (800c744 <prvAddNewTaskToReadyList+0xbc>)
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d109      	bne.n	800c6ba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c6a6:	4a27      	ldr	r2, [pc, #156]	; (800c744 <prvAddNewTaskToReadyList+0xbc>)
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c6ac:	4b24      	ldr	r3, [pc, #144]	; (800c740 <prvAddNewTaskToReadyList+0xb8>)
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	2b01      	cmp	r3, #1
 800c6b2:	d110      	bne.n	800c6d6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c6b4:	f000 fbe2 	bl	800ce7c <prvInitialiseTaskLists>
 800c6b8:	e00d      	b.n	800c6d6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c6ba:	4b23      	ldr	r3, [pc, #140]	; (800c748 <prvAddNewTaskToReadyList+0xc0>)
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d109      	bne.n	800c6d6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c6c2:	4b20      	ldr	r3, [pc, #128]	; (800c744 <prvAddNewTaskToReadyList+0xbc>)
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6cc:	429a      	cmp	r2, r3
 800c6ce:	d802      	bhi.n	800c6d6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c6d0:	4a1c      	ldr	r2, [pc, #112]	; (800c744 <prvAddNewTaskToReadyList+0xbc>)
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c6d6:	4b1d      	ldr	r3, [pc, #116]	; (800c74c <prvAddNewTaskToReadyList+0xc4>)
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	3301      	adds	r3, #1
 800c6dc:	4a1b      	ldr	r2, [pc, #108]	; (800c74c <prvAddNewTaskToReadyList+0xc4>)
 800c6de:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6e4:	2201      	movs	r2, #1
 800c6e6:	409a      	lsls	r2, r3
 800c6e8:	4b19      	ldr	r3, [pc, #100]	; (800c750 <prvAddNewTaskToReadyList+0xc8>)
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	4313      	orrs	r3, r2
 800c6ee:	4a18      	ldr	r2, [pc, #96]	; (800c750 <prvAddNewTaskToReadyList+0xc8>)
 800c6f0:	6013      	str	r3, [r2, #0]
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6f6:	4613      	mov	r3, r2
 800c6f8:	009b      	lsls	r3, r3, #2
 800c6fa:	4413      	add	r3, r2
 800c6fc:	009b      	lsls	r3, r3, #2
 800c6fe:	4a15      	ldr	r2, [pc, #84]	; (800c754 <prvAddNewTaskToReadyList+0xcc>)
 800c700:	441a      	add	r2, r3
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	3304      	adds	r3, #4
 800c706:	4619      	mov	r1, r3
 800c708:	4610      	mov	r0, r2
 800c70a:	f7fe fcaa 	bl	800b062 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c70e:	f7fe fe83 	bl	800b418 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c712:	4b0d      	ldr	r3, [pc, #52]	; (800c748 <prvAddNewTaskToReadyList+0xc0>)
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	2b00      	cmp	r3, #0
 800c718:	d00e      	beq.n	800c738 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c71a:	4b0a      	ldr	r3, [pc, #40]	; (800c744 <prvAddNewTaskToReadyList+0xbc>)
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c724:	429a      	cmp	r2, r3
 800c726:	d207      	bcs.n	800c738 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c728:	4b0b      	ldr	r3, [pc, #44]	; (800c758 <prvAddNewTaskToReadyList+0xd0>)
 800c72a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c72e:	601a      	str	r2, [r3, #0]
 800c730:	f3bf 8f4f 	dsb	sy
 800c734:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c738:	bf00      	nop
 800c73a:	3708      	adds	r7, #8
 800c73c:	46bd      	mov	sp, r7
 800c73e:	bd80      	pop	{r7, pc}
 800c740:	240047a8 	.word	0x240047a8
 800c744:	240046a8 	.word	0x240046a8
 800c748:	240047b4 	.word	0x240047b4
 800c74c:	240047c4 	.word	0x240047c4
 800c750:	240047b0 	.word	0x240047b0
 800c754:	240046ac 	.word	0x240046ac
 800c758:	e000ed04 	.word	0xe000ed04

0800c75c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c75c:	b580      	push	{r7, lr}
 800c75e:	b084      	sub	sp, #16
 800c760:	af00      	add	r7, sp, #0
 800c762:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c764:	2300      	movs	r3, #0
 800c766:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d016      	beq.n	800c79c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c76e:	4b13      	ldr	r3, [pc, #76]	; (800c7bc <vTaskDelay+0x60>)
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	2b00      	cmp	r3, #0
 800c774:	d009      	beq.n	800c78a <vTaskDelay+0x2e>
 800c776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c77a:	f383 8811 	msr	BASEPRI, r3
 800c77e:	f3bf 8f6f 	isb	sy
 800c782:	f3bf 8f4f 	dsb	sy
 800c786:	60bb      	str	r3, [r7, #8]
 800c788:	e7fe      	b.n	800c788 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800c78a:	f000 f879 	bl	800c880 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c78e:	2100      	movs	r1, #0
 800c790:	6878      	ldr	r0, [r7, #4]
 800c792:	f000 fdfb 	bl	800d38c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c796:	f000 f881 	bl	800c89c <xTaskResumeAll>
 800c79a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d107      	bne.n	800c7b2 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800c7a2:	4b07      	ldr	r3, [pc, #28]	; (800c7c0 <vTaskDelay+0x64>)
 800c7a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c7a8:	601a      	str	r2, [r3, #0]
 800c7aa:	f3bf 8f4f 	dsb	sy
 800c7ae:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c7b2:	bf00      	nop
 800c7b4:	3710      	adds	r7, #16
 800c7b6:	46bd      	mov	sp, r7
 800c7b8:	bd80      	pop	{r7, pc}
 800c7ba:	bf00      	nop
 800c7bc:	240047d0 	.word	0x240047d0
 800c7c0:	e000ed04 	.word	0xe000ed04

0800c7c4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	b08a      	sub	sp, #40	; 0x28
 800c7c8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c7ca:	2300      	movs	r3, #0
 800c7cc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c7ce:	2300      	movs	r3, #0
 800c7d0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c7d2:	463a      	mov	r2, r7
 800c7d4:	1d39      	adds	r1, r7, #4
 800c7d6:	f107 0308 	add.w	r3, r7, #8
 800c7da:	4618      	mov	r0, r3
 800c7dc:	f7f4 f898 	bl	8000910 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c7e0:	6839      	ldr	r1, [r7, #0]
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	68ba      	ldr	r2, [r7, #8]
 800c7e6:	9202      	str	r2, [sp, #8]
 800c7e8:	9301      	str	r3, [sp, #4]
 800c7ea:	2300      	movs	r3, #0
 800c7ec:	9300      	str	r3, [sp, #0]
 800c7ee:	2300      	movs	r3, #0
 800c7f0:	460a      	mov	r2, r1
 800c7f2:	491d      	ldr	r1, [pc, #116]	; (800c868 <vTaskStartScheduler+0xa4>)
 800c7f4:	481d      	ldr	r0, [pc, #116]	; (800c86c <vTaskStartScheduler+0xa8>)
 800c7f6:	f7ff fe22 	bl	800c43e <xTaskCreateStatic>
 800c7fa:	4602      	mov	r2, r0
 800c7fc:	4b1c      	ldr	r3, [pc, #112]	; (800c870 <vTaskStartScheduler+0xac>)
 800c7fe:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c800:	4b1b      	ldr	r3, [pc, #108]	; (800c870 <vTaskStartScheduler+0xac>)
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	2b00      	cmp	r3, #0
 800c806:	d002      	beq.n	800c80e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c808:	2301      	movs	r3, #1
 800c80a:	617b      	str	r3, [r7, #20]
 800c80c:	e001      	b.n	800c812 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c80e:	2300      	movs	r3, #0
 800c810:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c812:	697b      	ldr	r3, [r7, #20]
 800c814:	2b01      	cmp	r3, #1
 800c816:	d115      	bne.n	800c844 <vTaskStartScheduler+0x80>
 800c818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c81c:	f383 8811 	msr	BASEPRI, r3
 800c820:	f3bf 8f6f 	isb	sy
 800c824:	f3bf 8f4f 	dsb	sy
 800c828:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c82a:	4b12      	ldr	r3, [pc, #72]	; (800c874 <vTaskStartScheduler+0xb0>)
 800c82c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c830:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c832:	4b11      	ldr	r3, [pc, #68]	; (800c878 <vTaskStartScheduler+0xb4>)
 800c834:	2201      	movs	r2, #1
 800c836:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c838:	4b10      	ldr	r3, [pc, #64]	; (800c87c <vTaskStartScheduler+0xb8>)
 800c83a:	2200      	movs	r2, #0
 800c83c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c83e:	f7fe fd1f 	bl	800b280 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c842:	e00d      	b.n	800c860 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c844:	697b      	ldr	r3, [r7, #20]
 800c846:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c84a:	d109      	bne.n	800c860 <vTaskStartScheduler+0x9c>
 800c84c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c850:	f383 8811 	msr	BASEPRI, r3
 800c854:	f3bf 8f6f 	isb	sy
 800c858:	f3bf 8f4f 	dsb	sy
 800c85c:	60fb      	str	r3, [r7, #12]
 800c85e:	e7fe      	b.n	800c85e <vTaskStartScheduler+0x9a>
}
 800c860:	bf00      	nop
 800c862:	3718      	adds	r7, #24
 800c864:	46bd      	mov	sp, r7
 800c866:	bd80      	pop	{r7, pc}
 800c868:	0801d388 	.word	0x0801d388
 800c86c:	0800ce4d 	.word	0x0800ce4d
 800c870:	240047cc 	.word	0x240047cc
 800c874:	240047c8 	.word	0x240047c8
 800c878:	240047b4 	.word	0x240047b4
 800c87c:	240047ac 	.word	0x240047ac

0800c880 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c880:	b480      	push	{r7}
 800c882:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800c884:	4b04      	ldr	r3, [pc, #16]	; (800c898 <vTaskSuspendAll+0x18>)
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	3301      	adds	r3, #1
 800c88a:	4a03      	ldr	r2, [pc, #12]	; (800c898 <vTaskSuspendAll+0x18>)
 800c88c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800c88e:	bf00      	nop
 800c890:	46bd      	mov	sp, r7
 800c892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c896:	4770      	bx	lr
 800c898:	240047d0 	.word	0x240047d0

0800c89c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c89c:	b580      	push	{r7, lr}
 800c89e:	b084      	sub	sp, #16
 800c8a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c8a2:	2300      	movs	r3, #0
 800c8a4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c8a6:	2300      	movs	r3, #0
 800c8a8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c8aa:	4b41      	ldr	r3, [pc, #260]	; (800c9b0 <xTaskResumeAll+0x114>)
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d109      	bne.n	800c8c6 <xTaskResumeAll+0x2a>
 800c8b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8b6:	f383 8811 	msr	BASEPRI, r3
 800c8ba:	f3bf 8f6f 	isb	sy
 800c8be:	f3bf 8f4f 	dsb	sy
 800c8c2:	603b      	str	r3, [r7, #0]
 800c8c4:	e7fe      	b.n	800c8c4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c8c6:	f7fe fd79 	bl	800b3bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c8ca:	4b39      	ldr	r3, [pc, #228]	; (800c9b0 <xTaskResumeAll+0x114>)
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	3b01      	subs	r3, #1
 800c8d0:	4a37      	ldr	r2, [pc, #220]	; (800c9b0 <xTaskResumeAll+0x114>)
 800c8d2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c8d4:	4b36      	ldr	r3, [pc, #216]	; (800c9b0 <xTaskResumeAll+0x114>)
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d161      	bne.n	800c9a0 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c8dc:	4b35      	ldr	r3, [pc, #212]	; (800c9b4 <xTaskResumeAll+0x118>)
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d05d      	beq.n	800c9a0 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c8e4:	e02e      	b.n	800c944 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c8e6:	4b34      	ldr	r3, [pc, #208]	; (800c9b8 <xTaskResumeAll+0x11c>)
 800c8e8:	68db      	ldr	r3, [r3, #12]
 800c8ea:	68db      	ldr	r3, [r3, #12]
 800c8ec:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	3318      	adds	r3, #24
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	f7fe fc12 	bl	800b11c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	3304      	adds	r3, #4
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	f7fe fc0d 	bl	800b11c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c906:	2201      	movs	r2, #1
 800c908:	409a      	lsls	r2, r3
 800c90a:	4b2c      	ldr	r3, [pc, #176]	; (800c9bc <xTaskResumeAll+0x120>)
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	4313      	orrs	r3, r2
 800c910:	4a2a      	ldr	r2, [pc, #168]	; (800c9bc <xTaskResumeAll+0x120>)
 800c912:	6013      	str	r3, [r2, #0]
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c918:	4613      	mov	r3, r2
 800c91a:	009b      	lsls	r3, r3, #2
 800c91c:	4413      	add	r3, r2
 800c91e:	009b      	lsls	r3, r3, #2
 800c920:	4a27      	ldr	r2, [pc, #156]	; (800c9c0 <xTaskResumeAll+0x124>)
 800c922:	441a      	add	r2, r3
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	3304      	adds	r3, #4
 800c928:	4619      	mov	r1, r3
 800c92a:	4610      	mov	r0, r2
 800c92c:	f7fe fb99 	bl	800b062 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c934:	4b23      	ldr	r3, [pc, #140]	; (800c9c4 <xTaskResumeAll+0x128>)
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c93a:	429a      	cmp	r2, r3
 800c93c:	d302      	bcc.n	800c944 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800c93e:	4b22      	ldr	r3, [pc, #136]	; (800c9c8 <xTaskResumeAll+0x12c>)
 800c940:	2201      	movs	r2, #1
 800c942:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c944:	4b1c      	ldr	r3, [pc, #112]	; (800c9b8 <xTaskResumeAll+0x11c>)
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d1cc      	bne.n	800c8e6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d001      	beq.n	800c956 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c952:	f000 fb2d 	bl	800cfb0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800c956:	4b1d      	ldr	r3, [pc, #116]	; (800c9cc <xTaskResumeAll+0x130>)
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d010      	beq.n	800c984 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c962:	f000 f859 	bl	800ca18 <xTaskIncrementTick>
 800c966:	4603      	mov	r3, r0
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d002      	beq.n	800c972 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800c96c:	4b16      	ldr	r3, [pc, #88]	; (800c9c8 <xTaskResumeAll+0x12c>)
 800c96e:	2201      	movs	r2, #1
 800c970:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	3b01      	subs	r3, #1
 800c976:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d1f1      	bne.n	800c962 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800c97e:	4b13      	ldr	r3, [pc, #76]	; (800c9cc <xTaskResumeAll+0x130>)
 800c980:	2200      	movs	r2, #0
 800c982:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c984:	4b10      	ldr	r3, [pc, #64]	; (800c9c8 <xTaskResumeAll+0x12c>)
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d009      	beq.n	800c9a0 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c98c:	2301      	movs	r3, #1
 800c98e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c990:	4b0f      	ldr	r3, [pc, #60]	; (800c9d0 <xTaskResumeAll+0x134>)
 800c992:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c996:	601a      	str	r2, [r3, #0]
 800c998:	f3bf 8f4f 	dsb	sy
 800c99c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c9a0:	f7fe fd3a 	bl	800b418 <vPortExitCritical>

	return xAlreadyYielded;
 800c9a4:	68bb      	ldr	r3, [r7, #8]
}
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	3710      	adds	r7, #16
 800c9aa:	46bd      	mov	sp, r7
 800c9ac:	bd80      	pop	{r7, pc}
 800c9ae:	bf00      	nop
 800c9b0:	240047d0 	.word	0x240047d0
 800c9b4:	240047a8 	.word	0x240047a8
 800c9b8:	24004768 	.word	0x24004768
 800c9bc:	240047b0 	.word	0x240047b0
 800c9c0:	240046ac 	.word	0x240046ac
 800c9c4:	240046a8 	.word	0x240046a8
 800c9c8:	240047bc 	.word	0x240047bc
 800c9cc:	240047b8 	.word	0x240047b8
 800c9d0:	e000ed04 	.word	0xe000ed04

0800c9d4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c9d4:	b480      	push	{r7}
 800c9d6:	b083      	sub	sp, #12
 800c9d8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c9da:	4b05      	ldr	r3, [pc, #20]	; (800c9f0 <xTaskGetTickCount+0x1c>)
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c9e0:	687b      	ldr	r3, [r7, #4]
}
 800c9e2:	4618      	mov	r0, r3
 800c9e4:	370c      	adds	r7, #12
 800c9e6:	46bd      	mov	sp, r7
 800c9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ec:	4770      	bx	lr
 800c9ee:	bf00      	nop
 800c9f0:	240047ac 	.word	0x240047ac

0800c9f4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800c9f4:	b580      	push	{r7, lr}
 800c9f6:	b082      	sub	sp, #8
 800c9f8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c9fa:	f7fe fdbb 	bl	800b574 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800c9fe:	2300      	movs	r3, #0
 800ca00:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800ca02:	4b04      	ldr	r3, [pc, #16]	; (800ca14 <xTaskGetTickCountFromISR+0x20>)
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ca08:	683b      	ldr	r3, [r7, #0]
}
 800ca0a:	4618      	mov	r0, r3
 800ca0c:	3708      	adds	r7, #8
 800ca0e:	46bd      	mov	sp, r7
 800ca10:	bd80      	pop	{r7, pc}
 800ca12:	bf00      	nop
 800ca14:	240047ac 	.word	0x240047ac

0800ca18 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ca18:	b580      	push	{r7, lr}
 800ca1a:	b086      	sub	sp, #24
 800ca1c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ca1e:	2300      	movs	r3, #0
 800ca20:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ca22:	4b4e      	ldr	r3, [pc, #312]	; (800cb5c <xTaskIncrementTick+0x144>)
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	f040 8087 	bne.w	800cb3a <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ca2c:	4b4c      	ldr	r3, [pc, #304]	; (800cb60 <xTaskIncrementTick+0x148>)
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	3301      	adds	r3, #1
 800ca32:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ca34:	4a4a      	ldr	r2, [pc, #296]	; (800cb60 <xTaskIncrementTick+0x148>)
 800ca36:	693b      	ldr	r3, [r7, #16]
 800ca38:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ca3a:	693b      	ldr	r3, [r7, #16]
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d11f      	bne.n	800ca80 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800ca40:	4b48      	ldr	r3, [pc, #288]	; (800cb64 <xTaskIncrementTick+0x14c>)
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d009      	beq.n	800ca5e <xTaskIncrementTick+0x46>
 800ca4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca4e:	f383 8811 	msr	BASEPRI, r3
 800ca52:	f3bf 8f6f 	isb	sy
 800ca56:	f3bf 8f4f 	dsb	sy
 800ca5a:	603b      	str	r3, [r7, #0]
 800ca5c:	e7fe      	b.n	800ca5c <xTaskIncrementTick+0x44>
 800ca5e:	4b41      	ldr	r3, [pc, #260]	; (800cb64 <xTaskIncrementTick+0x14c>)
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	60fb      	str	r3, [r7, #12]
 800ca64:	4b40      	ldr	r3, [pc, #256]	; (800cb68 <xTaskIncrementTick+0x150>)
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	4a3e      	ldr	r2, [pc, #248]	; (800cb64 <xTaskIncrementTick+0x14c>)
 800ca6a:	6013      	str	r3, [r2, #0]
 800ca6c:	4a3e      	ldr	r2, [pc, #248]	; (800cb68 <xTaskIncrementTick+0x150>)
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	6013      	str	r3, [r2, #0]
 800ca72:	4b3e      	ldr	r3, [pc, #248]	; (800cb6c <xTaskIncrementTick+0x154>)
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	3301      	adds	r3, #1
 800ca78:	4a3c      	ldr	r2, [pc, #240]	; (800cb6c <xTaskIncrementTick+0x154>)
 800ca7a:	6013      	str	r3, [r2, #0]
 800ca7c:	f000 fa98 	bl	800cfb0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ca80:	4b3b      	ldr	r3, [pc, #236]	; (800cb70 <xTaskIncrementTick+0x158>)
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	693a      	ldr	r2, [r7, #16]
 800ca86:	429a      	cmp	r2, r3
 800ca88:	d348      	bcc.n	800cb1c <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ca8a:	4b36      	ldr	r3, [pc, #216]	; (800cb64 <xTaskIncrementTick+0x14c>)
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d104      	bne.n	800ca9e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ca94:	4b36      	ldr	r3, [pc, #216]	; (800cb70 <xTaskIncrementTick+0x158>)
 800ca96:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ca9a:	601a      	str	r2, [r3, #0]
					break;
 800ca9c:	e03e      	b.n	800cb1c <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca9e:	4b31      	ldr	r3, [pc, #196]	; (800cb64 <xTaskIncrementTick+0x14c>)
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	68db      	ldr	r3, [r3, #12]
 800caa4:	68db      	ldr	r3, [r3, #12]
 800caa6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800caa8:	68bb      	ldr	r3, [r7, #8]
 800caaa:	685b      	ldr	r3, [r3, #4]
 800caac:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800caae:	693a      	ldr	r2, [r7, #16]
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	429a      	cmp	r2, r3
 800cab4:	d203      	bcs.n	800cabe <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800cab6:	4a2e      	ldr	r2, [pc, #184]	; (800cb70 <xTaskIncrementTick+0x158>)
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800cabc:	e02e      	b.n	800cb1c <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cabe:	68bb      	ldr	r3, [r7, #8]
 800cac0:	3304      	adds	r3, #4
 800cac2:	4618      	mov	r0, r3
 800cac4:	f7fe fb2a 	bl	800b11c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cac8:	68bb      	ldr	r3, [r7, #8]
 800caca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d004      	beq.n	800cada <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cad0:	68bb      	ldr	r3, [r7, #8]
 800cad2:	3318      	adds	r3, #24
 800cad4:	4618      	mov	r0, r3
 800cad6:	f7fe fb21 	bl	800b11c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800cada:	68bb      	ldr	r3, [r7, #8]
 800cadc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cade:	2201      	movs	r2, #1
 800cae0:	409a      	lsls	r2, r3
 800cae2:	4b24      	ldr	r3, [pc, #144]	; (800cb74 <xTaskIncrementTick+0x15c>)
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	4313      	orrs	r3, r2
 800cae8:	4a22      	ldr	r2, [pc, #136]	; (800cb74 <xTaskIncrementTick+0x15c>)
 800caea:	6013      	str	r3, [r2, #0]
 800caec:	68bb      	ldr	r3, [r7, #8]
 800caee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800caf0:	4613      	mov	r3, r2
 800caf2:	009b      	lsls	r3, r3, #2
 800caf4:	4413      	add	r3, r2
 800caf6:	009b      	lsls	r3, r3, #2
 800caf8:	4a1f      	ldr	r2, [pc, #124]	; (800cb78 <xTaskIncrementTick+0x160>)
 800cafa:	441a      	add	r2, r3
 800cafc:	68bb      	ldr	r3, [r7, #8]
 800cafe:	3304      	adds	r3, #4
 800cb00:	4619      	mov	r1, r3
 800cb02:	4610      	mov	r0, r2
 800cb04:	f7fe faad 	bl	800b062 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cb08:	68bb      	ldr	r3, [r7, #8]
 800cb0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb0c:	4b1b      	ldr	r3, [pc, #108]	; (800cb7c <xTaskIncrementTick+0x164>)
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb12:	429a      	cmp	r2, r3
 800cb14:	d3b9      	bcc.n	800ca8a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800cb16:	2301      	movs	r3, #1
 800cb18:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cb1a:	e7b6      	b.n	800ca8a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800cb1c:	4b17      	ldr	r3, [pc, #92]	; (800cb7c <xTaskIncrementTick+0x164>)
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb22:	4915      	ldr	r1, [pc, #84]	; (800cb78 <xTaskIncrementTick+0x160>)
 800cb24:	4613      	mov	r3, r2
 800cb26:	009b      	lsls	r3, r3, #2
 800cb28:	4413      	add	r3, r2
 800cb2a:	009b      	lsls	r3, r3, #2
 800cb2c:	440b      	add	r3, r1
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	2b01      	cmp	r3, #1
 800cb32:	d907      	bls.n	800cb44 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 800cb34:	2301      	movs	r3, #1
 800cb36:	617b      	str	r3, [r7, #20]
 800cb38:	e004      	b.n	800cb44 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800cb3a:	4b11      	ldr	r3, [pc, #68]	; (800cb80 <xTaskIncrementTick+0x168>)
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	3301      	adds	r3, #1
 800cb40:	4a0f      	ldr	r2, [pc, #60]	; (800cb80 <xTaskIncrementTick+0x168>)
 800cb42:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800cb44:	4b0f      	ldr	r3, [pc, #60]	; (800cb84 <xTaskIncrementTick+0x16c>)
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d001      	beq.n	800cb50 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 800cb4c:	2301      	movs	r3, #1
 800cb4e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800cb50:	697b      	ldr	r3, [r7, #20]
}
 800cb52:	4618      	mov	r0, r3
 800cb54:	3718      	adds	r7, #24
 800cb56:	46bd      	mov	sp, r7
 800cb58:	bd80      	pop	{r7, pc}
 800cb5a:	bf00      	nop
 800cb5c:	240047d0 	.word	0x240047d0
 800cb60:	240047ac 	.word	0x240047ac
 800cb64:	24004760 	.word	0x24004760
 800cb68:	24004764 	.word	0x24004764
 800cb6c:	240047c0 	.word	0x240047c0
 800cb70:	240047c8 	.word	0x240047c8
 800cb74:	240047b0 	.word	0x240047b0
 800cb78:	240046ac 	.word	0x240046ac
 800cb7c:	240046a8 	.word	0x240046a8
 800cb80:	240047b8 	.word	0x240047b8
 800cb84:	240047bc 	.word	0x240047bc

0800cb88 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800cb88:	b480      	push	{r7}
 800cb8a:	b087      	sub	sp, #28
 800cb8c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800cb8e:	4b26      	ldr	r3, [pc, #152]	; (800cc28 <vTaskSwitchContext+0xa0>)
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d003      	beq.n	800cb9e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800cb96:	4b25      	ldr	r3, [pc, #148]	; (800cc2c <vTaskSwitchContext+0xa4>)
 800cb98:	2201      	movs	r2, #1
 800cb9a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800cb9c:	e03e      	b.n	800cc1c <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800cb9e:	4b23      	ldr	r3, [pc, #140]	; (800cc2c <vTaskSwitchContext+0xa4>)
 800cba0:	2200      	movs	r2, #0
 800cba2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cba4:	4b22      	ldr	r3, [pc, #136]	; (800cc30 <vTaskSwitchContext+0xa8>)
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	fab3 f383 	clz	r3, r3
 800cbb0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800cbb2:	7afb      	ldrb	r3, [r7, #11]
 800cbb4:	f1c3 031f 	rsb	r3, r3, #31
 800cbb8:	617b      	str	r3, [r7, #20]
 800cbba:	491e      	ldr	r1, [pc, #120]	; (800cc34 <vTaskSwitchContext+0xac>)
 800cbbc:	697a      	ldr	r2, [r7, #20]
 800cbbe:	4613      	mov	r3, r2
 800cbc0:	009b      	lsls	r3, r3, #2
 800cbc2:	4413      	add	r3, r2
 800cbc4:	009b      	lsls	r3, r3, #2
 800cbc6:	440b      	add	r3, r1
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d109      	bne.n	800cbe2 <vTaskSwitchContext+0x5a>
	__asm volatile
 800cbce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbd2:	f383 8811 	msr	BASEPRI, r3
 800cbd6:	f3bf 8f6f 	isb	sy
 800cbda:	f3bf 8f4f 	dsb	sy
 800cbde:	607b      	str	r3, [r7, #4]
 800cbe0:	e7fe      	b.n	800cbe0 <vTaskSwitchContext+0x58>
 800cbe2:	697a      	ldr	r2, [r7, #20]
 800cbe4:	4613      	mov	r3, r2
 800cbe6:	009b      	lsls	r3, r3, #2
 800cbe8:	4413      	add	r3, r2
 800cbea:	009b      	lsls	r3, r3, #2
 800cbec:	4a11      	ldr	r2, [pc, #68]	; (800cc34 <vTaskSwitchContext+0xac>)
 800cbee:	4413      	add	r3, r2
 800cbf0:	613b      	str	r3, [r7, #16]
 800cbf2:	693b      	ldr	r3, [r7, #16]
 800cbf4:	685b      	ldr	r3, [r3, #4]
 800cbf6:	685a      	ldr	r2, [r3, #4]
 800cbf8:	693b      	ldr	r3, [r7, #16]
 800cbfa:	605a      	str	r2, [r3, #4]
 800cbfc:	693b      	ldr	r3, [r7, #16]
 800cbfe:	685a      	ldr	r2, [r3, #4]
 800cc00:	693b      	ldr	r3, [r7, #16]
 800cc02:	3308      	adds	r3, #8
 800cc04:	429a      	cmp	r2, r3
 800cc06:	d104      	bne.n	800cc12 <vTaskSwitchContext+0x8a>
 800cc08:	693b      	ldr	r3, [r7, #16]
 800cc0a:	685b      	ldr	r3, [r3, #4]
 800cc0c:	685a      	ldr	r2, [r3, #4]
 800cc0e:	693b      	ldr	r3, [r7, #16]
 800cc10:	605a      	str	r2, [r3, #4]
 800cc12:	693b      	ldr	r3, [r7, #16]
 800cc14:	685b      	ldr	r3, [r3, #4]
 800cc16:	68db      	ldr	r3, [r3, #12]
 800cc18:	4a07      	ldr	r2, [pc, #28]	; (800cc38 <vTaskSwitchContext+0xb0>)
 800cc1a:	6013      	str	r3, [r2, #0]
}
 800cc1c:	bf00      	nop
 800cc1e:	371c      	adds	r7, #28
 800cc20:	46bd      	mov	sp, r7
 800cc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc26:	4770      	bx	lr
 800cc28:	240047d0 	.word	0x240047d0
 800cc2c:	240047bc 	.word	0x240047bc
 800cc30:	240047b0 	.word	0x240047b0
 800cc34:	240046ac 	.word	0x240046ac
 800cc38:	240046a8 	.word	0x240046a8

0800cc3c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800cc3c:	b580      	push	{r7, lr}
 800cc3e:	b084      	sub	sp, #16
 800cc40:	af00      	add	r7, sp, #0
 800cc42:	6078      	str	r0, [r7, #4]
 800cc44:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d109      	bne.n	800cc60 <vTaskPlaceOnEventList+0x24>
 800cc4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc50:	f383 8811 	msr	BASEPRI, r3
 800cc54:	f3bf 8f6f 	isb	sy
 800cc58:	f3bf 8f4f 	dsb	sy
 800cc5c:	60fb      	str	r3, [r7, #12]
 800cc5e:	e7fe      	b.n	800cc5e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cc60:	4b07      	ldr	r3, [pc, #28]	; (800cc80 <vTaskPlaceOnEventList+0x44>)
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	3318      	adds	r3, #24
 800cc66:	4619      	mov	r1, r3
 800cc68:	6878      	ldr	r0, [r7, #4]
 800cc6a:	f7fe fa1e 	bl	800b0aa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cc6e:	2101      	movs	r1, #1
 800cc70:	6838      	ldr	r0, [r7, #0]
 800cc72:	f000 fb8b 	bl	800d38c <prvAddCurrentTaskToDelayedList>
}
 800cc76:	bf00      	nop
 800cc78:	3710      	adds	r7, #16
 800cc7a:	46bd      	mov	sp, r7
 800cc7c:	bd80      	pop	{r7, pc}
 800cc7e:	bf00      	nop
 800cc80:	240046a8 	.word	0x240046a8

0800cc84 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800cc84:	b580      	push	{r7, lr}
 800cc86:	b086      	sub	sp, #24
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	68db      	ldr	r3, [r3, #12]
 800cc90:	68db      	ldr	r3, [r3, #12]
 800cc92:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800cc94:	693b      	ldr	r3, [r7, #16]
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d109      	bne.n	800ccae <xTaskRemoveFromEventList+0x2a>
 800cc9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc9e:	f383 8811 	msr	BASEPRI, r3
 800cca2:	f3bf 8f6f 	isb	sy
 800cca6:	f3bf 8f4f 	dsb	sy
 800ccaa:	60fb      	str	r3, [r7, #12]
 800ccac:	e7fe      	b.n	800ccac <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ccae:	693b      	ldr	r3, [r7, #16]
 800ccb0:	3318      	adds	r3, #24
 800ccb2:	4618      	mov	r0, r3
 800ccb4:	f7fe fa32 	bl	800b11c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ccb8:	4b1d      	ldr	r3, [pc, #116]	; (800cd30 <xTaskRemoveFromEventList+0xac>)
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d11c      	bne.n	800ccfa <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ccc0:	693b      	ldr	r3, [r7, #16]
 800ccc2:	3304      	adds	r3, #4
 800ccc4:	4618      	mov	r0, r3
 800ccc6:	f7fe fa29 	bl	800b11c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ccca:	693b      	ldr	r3, [r7, #16]
 800cccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccce:	2201      	movs	r2, #1
 800ccd0:	409a      	lsls	r2, r3
 800ccd2:	4b18      	ldr	r3, [pc, #96]	; (800cd34 <xTaskRemoveFromEventList+0xb0>)
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	4313      	orrs	r3, r2
 800ccd8:	4a16      	ldr	r2, [pc, #88]	; (800cd34 <xTaskRemoveFromEventList+0xb0>)
 800ccda:	6013      	str	r3, [r2, #0]
 800ccdc:	693b      	ldr	r3, [r7, #16]
 800ccde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cce0:	4613      	mov	r3, r2
 800cce2:	009b      	lsls	r3, r3, #2
 800cce4:	4413      	add	r3, r2
 800cce6:	009b      	lsls	r3, r3, #2
 800cce8:	4a13      	ldr	r2, [pc, #76]	; (800cd38 <xTaskRemoveFromEventList+0xb4>)
 800ccea:	441a      	add	r2, r3
 800ccec:	693b      	ldr	r3, [r7, #16]
 800ccee:	3304      	adds	r3, #4
 800ccf0:	4619      	mov	r1, r3
 800ccf2:	4610      	mov	r0, r2
 800ccf4:	f7fe f9b5 	bl	800b062 <vListInsertEnd>
 800ccf8:	e005      	b.n	800cd06 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ccfa:	693b      	ldr	r3, [r7, #16]
 800ccfc:	3318      	adds	r3, #24
 800ccfe:	4619      	mov	r1, r3
 800cd00:	480e      	ldr	r0, [pc, #56]	; (800cd3c <xTaskRemoveFromEventList+0xb8>)
 800cd02:	f7fe f9ae 	bl	800b062 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cd06:	693b      	ldr	r3, [r7, #16]
 800cd08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd0a:	4b0d      	ldr	r3, [pc, #52]	; (800cd40 <xTaskRemoveFromEventList+0xbc>)
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd10:	429a      	cmp	r2, r3
 800cd12:	d905      	bls.n	800cd20 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800cd14:	2301      	movs	r3, #1
 800cd16:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800cd18:	4b0a      	ldr	r3, [pc, #40]	; (800cd44 <xTaskRemoveFromEventList+0xc0>)
 800cd1a:	2201      	movs	r2, #1
 800cd1c:	601a      	str	r2, [r3, #0]
 800cd1e:	e001      	b.n	800cd24 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800cd20:	2300      	movs	r3, #0
 800cd22:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800cd24:	697b      	ldr	r3, [r7, #20]
}
 800cd26:	4618      	mov	r0, r3
 800cd28:	3718      	adds	r7, #24
 800cd2a:	46bd      	mov	sp, r7
 800cd2c:	bd80      	pop	{r7, pc}
 800cd2e:	bf00      	nop
 800cd30:	240047d0 	.word	0x240047d0
 800cd34:	240047b0 	.word	0x240047b0
 800cd38:	240046ac 	.word	0x240046ac
 800cd3c:	24004768 	.word	0x24004768
 800cd40:	240046a8 	.word	0x240046a8
 800cd44:	240047bc 	.word	0x240047bc

0800cd48 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800cd48:	b480      	push	{r7}
 800cd4a:	b083      	sub	sp, #12
 800cd4c:	af00      	add	r7, sp, #0
 800cd4e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cd50:	4b06      	ldr	r3, [pc, #24]	; (800cd6c <vTaskInternalSetTimeOutState+0x24>)
 800cd52:	681a      	ldr	r2, [r3, #0]
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800cd58:	4b05      	ldr	r3, [pc, #20]	; (800cd70 <vTaskInternalSetTimeOutState+0x28>)
 800cd5a:	681a      	ldr	r2, [r3, #0]
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	605a      	str	r2, [r3, #4]
}
 800cd60:	bf00      	nop
 800cd62:	370c      	adds	r7, #12
 800cd64:	46bd      	mov	sp, r7
 800cd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd6a:	4770      	bx	lr
 800cd6c:	240047c0 	.word	0x240047c0
 800cd70:	240047ac 	.word	0x240047ac

0800cd74 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800cd74:	b580      	push	{r7, lr}
 800cd76:	b088      	sub	sp, #32
 800cd78:	af00      	add	r7, sp, #0
 800cd7a:	6078      	str	r0, [r7, #4]
 800cd7c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d109      	bne.n	800cd98 <xTaskCheckForTimeOut+0x24>
 800cd84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd88:	f383 8811 	msr	BASEPRI, r3
 800cd8c:	f3bf 8f6f 	isb	sy
 800cd90:	f3bf 8f4f 	dsb	sy
 800cd94:	613b      	str	r3, [r7, #16]
 800cd96:	e7fe      	b.n	800cd96 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800cd98:	683b      	ldr	r3, [r7, #0]
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d109      	bne.n	800cdb2 <xTaskCheckForTimeOut+0x3e>
 800cd9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cda2:	f383 8811 	msr	BASEPRI, r3
 800cda6:	f3bf 8f6f 	isb	sy
 800cdaa:	f3bf 8f4f 	dsb	sy
 800cdae:	60fb      	str	r3, [r7, #12]
 800cdb0:	e7fe      	b.n	800cdb0 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800cdb2:	f7fe fb03 	bl	800b3bc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800cdb6:	4b1d      	ldr	r3, [pc, #116]	; (800ce2c <xTaskCheckForTimeOut+0xb8>)
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	685b      	ldr	r3, [r3, #4]
 800cdc0:	69ba      	ldr	r2, [r7, #24]
 800cdc2:	1ad3      	subs	r3, r2, r3
 800cdc4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800cdc6:	683b      	ldr	r3, [r7, #0]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cdce:	d102      	bne.n	800cdd6 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800cdd0:	2300      	movs	r3, #0
 800cdd2:	61fb      	str	r3, [r7, #28]
 800cdd4:	e023      	b.n	800ce1e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	681a      	ldr	r2, [r3, #0]
 800cdda:	4b15      	ldr	r3, [pc, #84]	; (800ce30 <xTaskCheckForTimeOut+0xbc>)
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	429a      	cmp	r2, r3
 800cde0:	d007      	beq.n	800cdf2 <xTaskCheckForTimeOut+0x7e>
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	685b      	ldr	r3, [r3, #4]
 800cde6:	69ba      	ldr	r2, [r7, #24]
 800cde8:	429a      	cmp	r2, r3
 800cdea:	d302      	bcc.n	800cdf2 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800cdec:	2301      	movs	r3, #1
 800cdee:	61fb      	str	r3, [r7, #28]
 800cdf0:	e015      	b.n	800ce1e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800cdf2:	683b      	ldr	r3, [r7, #0]
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	697a      	ldr	r2, [r7, #20]
 800cdf8:	429a      	cmp	r2, r3
 800cdfa:	d20b      	bcs.n	800ce14 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800cdfc:	683b      	ldr	r3, [r7, #0]
 800cdfe:	681a      	ldr	r2, [r3, #0]
 800ce00:	697b      	ldr	r3, [r7, #20]
 800ce02:	1ad2      	subs	r2, r2, r3
 800ce04:	683b      	ldr	r3, [r7, #0]
 800ce06:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ce08:	6878      	ldr	r0, [r7, #4]
 800ce0a:	f7ff ff9d 	bl	800cd48 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ce0e:	2300      	movs	r3, #0
 800ce10:	61fb      	str	r3, [r7, #28]
 800ce12:	e004      	b.n	800ce1e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800ce14:	683b      	ldr	r3, [r7, #0]
 800ce16:	2200      	movs	r2, #0
 800ce18:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ce1a:	2301      	movs	r3, #1
 800ce1c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ce1e:	f7fe fafb 	bl	800b418 <vPortExitCritical>

	return xReturn;
 800ce22:	69fb      	ldr	r3, [r7, #28]
}
 800ce24:	4618      	mov	r0, r3
 800ce26:	3720      	adds	r7, #32
 800ce28:	46bd      	mov	sp, r7
 800ce2a:	bd80      	pop	{r7, pc}
 800ce2c:	240047ac 	.word	0x240047ac
 800ce30:	240047c0 	.word	0x240047c0

0800ce34 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ce34:	b480      	push	{r7}
 800ce36:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ce38:	4b03      	ldr	r3, [pc, #12]	; (800ce48 <vTaskMissedYield+0x14>)
 800ce3a:	2201      	movs	r2, #1
 800ce3c:	601a      	str	r2, [r3, #0]
}
 800ce3e:	bf00      	nop
 800ce40:	46bd      	mov	sp, r7
 800ce42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce46:	4770      	bx	lr
 800ce48:	240047bc 	.word	0x240047bc

0800ce4c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ce4c:	b580      	push	{r7, lr}
 800ce4e:	b082      	sub	sp, #8
 800ce50:	af00      	add	r7, sp, #0
 800ce52:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ce54:	f000 f852 	bl	800cefc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ce58:	4b06      	ldr	r3, [pc, #24]	; (800ce74 <prvIdleTask+0x28>)
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	2b01      	cmp	r3, #1
 800ce5e:	d9f9      	bls.n	800ce54 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ce60:	4b05      	ldr	r3, [pc, #20]	; (800ce78 <prvIdleTask+0x2c>)
 800ce62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce66:	601a      	str	r2, [r3, #0]
 800ce68:	f3bf 8f4f 	dsb	sy
 800ce6c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ce70:	e7f0      	b.n	800ce54 <prvIdleTask+0x8>
 800ce72:	bf00      	nop
 800ce74:	240046ac 	.word	0x240046ac
 800ce78:	e000ed04 	.word	0xe000ed04

0800ce7c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ce7c:	b580      	push	{r7, lr}
 800ce7e:	b082      	sub	sp, #8
 800ce80:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ce82:	2300      	movs	r3, #0
 800ce84:	607b      	str	r3, [r7, #4]
 800ce86:	e00c      	b.n	800cea2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ce88:	687a      	ldr	r2, [r7, #4]
 800ce8a:	4613      	mov	r3, r2
 800ce8c:	009b      	lsls	r3, r3, #2
 800ce8e:	4413      	add	r3, r2
 800ce90:	009b      	lsls	r3, r3, #2
 800ce92:	4a12      	ldr	r2, [pc, #72]	; (800cedc <prvInitialiseTaskLists+0x60>)
 800ce94:	4413      	add	r3, r2
 800ce96:	4618      	mov	r0, r3
 800ce98:	f7fe f8b6 	bl	800b008 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	3301      	adds	r3, #1
 800cea0:	607b      	str	r3, [r7, #4]
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	2b06      	cmp	r3, #6
 800cea6:	d9ef      	bls.n	800ce88 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800cea8:	480d      	ldr	r0, [pc, #52]	; (800cee0 <prvInitialiseTaskLists+0x64>)
 800ceaa:	f7fe f8ad 	bl	800b008 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ceae:	480d      	ldr	r0, [pc, #52]	; (800cee4 <prvInitialiseTaskLists+0x68>)
 800ceb0:	f7fe f8aa 	bl	800b008 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ceb4:	480c      	ldr	r0, [pc, #48]	; (800cee8 <prvInitialiseTaskLists+0x6c>)
 800ceb6:	f7fe f8a7 	bl	800b008 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ceba:	480c      	ldr	r0, [pc, #48]	; (800ceec <prvInitialiseTaskLists+0x70>)
 800cebc:	f7fe f8a4 	bl	800b008 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800cec0:	480b      	ldr	r0, [pc, #44]	; (800cef0 <prvInitialiseTaskLists+0x74>)
 800cec2:	f7fe f8a1 	bl	800b008 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800cec6:	4b0b      	ldr	r3, [pc, #44]	; (800cef4 <prvInitialiseTaskLists+0x78>)
 800cec8:	4a05      	ldr	r2, [pc, #20]	; (800cee0 <prvInitialiseTaskLists+0x64>)
 800ceca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800cecc:	4b0a      	ldr	r3, [pc, #40]	; (800cef8 <prvInitialiseTaskLists+0x7c>)
 800cece:	4a05      	ldr	r2, [pc, #20]	; (800cee4 <prvInitialiseTaskLists+0x68>)
 800ced0:	601a      	str	r2, [r3, #0]
}
 800ced2:	bf00      	nop
 800ced4:	3708      	adds	r7, #8
 800ced6:	46bd      	mov	sp, r7
 800ced8:	bd80      	pop	{r7, pc}
 800ceda:	bf00      	nop
 800cedc:	240046ac 	.word	0x240046ac
 800cee0:	24004738 	.word	0x24004738
 800cee4:	2400474c 	.word	0x2400474c
 800cee8:	24004768 	.word	0x24004768
 800ceec:	2400477c 	.word	0x2400477c
 800cef0:	24004794 	.word	0x24004794
 800cef4:	24004760 	.word	0x24004760
 800cef8:	24004764 	.word	0x24004764

0800cefc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800cefc:	b580      	push	{r7, lr}
 800cefe:	b082      	sub	sp, #8
 800cf00:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cf02:	e019      	b.n	800cf38 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800cf04:	f7fe fa5a 	bl	800b3bc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cf08:	4b0f      	ldr	r3, [pc, #60]	; (800cf48 <prvCheckTasksWaitingTermination+0x4c>)
 800cf0a:	68db      	ldr	r3, [r3, #12]
 800cf0c:	68db      	ldr	r3, [r3, #12]
 800cf0e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	3304      	adds	r3, #4
 800cf14:	4618      	mov	r0, r3
 800cf16:	f7fe f901 	bl	800b11c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800cf1a:	4b0c      	ldr	r3, [pc, #48]	; (800cf4c <prvCheckTasksWaitingTermination+0x50>)
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	3b01      	subs	r3, #1
 800cf20:	4a0a      	ldr	r2, [pc, #40]	; (800cf4c <prvCheckTasksWaitingTermination+0x50>)
 800cf22:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800cf24:	4b0a      	ldr	r3, [pc, #40]	; (800cf50 <prvCheckTasksWaitingTermination+0x54>)
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	3b01      	subs	r3, #1
 800cf2a:	4a09      	ldr	r2, [pc, #36]	; (800cf50 <prvCheckTasksWaitingTermination+0x54>)
 800cf2c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800cf2e:	f7fe fa73 	bl	800b418 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800cf32:	6878      	ldr	r0, [r7, #4]
 800cf34:	f000 f80e 	bl	800cf54 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cf38:	4b05      	ldr	r3, [pc, #20]	; (800cf50 <prvCheckTasksWaitingTermination+0x54>)
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d1e1      	bne.n	800cf04 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800cf40:	bf00      	nop
 800cf42:	3708      	adds	r7, #8
 800cf44:	46bd      	mov	sp, r7
 800cf46:	bd80      	pop	{r7, pc}
 800cf48:	2400477c 	.word	0x2400477c
 800cf4c:	240047a8 	.word	0x240047a8
 800cf50:	24004790 	.word	0x24004790

0800cf54 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800cf54:	b580      	push	{r7, lr}
 800cf56:	b084      	sub	sp, #16
 800cf58:	af00      	add	r7, sp, #0
 800cf5a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d108      	bne.n	800cf78 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	f7fd ff38 	bl	800ade0 <vPortFree>
				vPortFree( pxTCB );
 800cf70:	6878      	ldr	r0, [r7, #4]
 800cf72:	f7fd ff35 	bl	800ade0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800cf76:	e017      	b.n	800cfa8 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800cf7e:	2b01      	cmp	r3, #1
 800cf80:	d103      	bne.n	800cf8a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800cf82:	6878      	ldr	r0, [r7, #4]
 800cf84:	f7fd ff2c 	bl	800ade0 <vPortFree>
	}
 800cf88:	e00e      	b.n	800cfa8 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800cf90:	2b02      	cmp	r3, #2
 800cf92:	d009      	beq.n	800cfa8 <prvDeleteTCB+0x54>
 800cf94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf98:	f383 8811 	msr	BASEPRI, r3
 800cf9c:	f3bf 8f6f 	isb	sy
 800cfa0:	f3bf 8f4f 	dsb	sy
 800cfa4:	60fb      	str	r3, [r7, #12]
 800cfa6:	e7fe      	b.n	800cfa6 <prvDeleteTCB+0x52>
	}
 800cfa8:	bf00      	nop
 800cfaa:	3710      	adds	r7, #16
 800cfac:	46bd      	mov	sp, r7
 800cfae:	bd80      	pop	{r7, pc}

0800cfb0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800cfb0:	b480      	push	{r7}
 800cfb2:	b083      	sub	sp, #12
 800cfb4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cfb6:	4b0c      	ldr	r3, [pc, #48]	; (800cfe8 <prvResetNextTaskUnblockTime+0x38>)
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d104      	bne.n	800cfca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800cfc0:	4b0a      	ldr	r3, [pc, #40]	; (800cfec <prvResetNextTaskUnblockTime+0x3c>)
 800cfc2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cfc6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800cfc8:	e008      	b.n	800cfdc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cfca:	4b07      	ldr	r3, [pc, #28]	; (800cfe8 <prvResetNextTaskUnblockTime+0x38>)
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	68db      	ldr	r3, [r3, #12]
 800cfd0:	68db      	ldr	r3, [r3, #12]
 800cfd2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	685b      	ldr	r3, [r3, #4]
 800cfd8:	4a04      	ldr	r2, [pc, #16]	; (800cfec <prvResetNextTaskUnblockTime+0x3c>)
 800cfda:	6013      	str	r3, [r2, #0]
}
 800cfdc:	bf00      	nop
 800cfde:	370c      	adds	r7, #12
 800cfe0:	46bd      	mov	sp, r7
 800cfe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe6:	4770      	bx	lr
 800cfe8:	24004760 	.word	0x24004760
 800cfec:	240047c8 	.word	0x240047c8

0800cff0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800cff0:	b480      	push	{r7}
 800cff2:	b083      	sub	sp, #12
 800cff4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800cff6:	4b0b      	ldr	r3, [pc, #44]	; (800d024 <xTaskGetSchedulerState+0x34>)
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d102      	bne.n	800d004 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800cffe:	2301      	movs	r3, #1
 800d000:	607b      	str	r3, [r7, #4]
 800d002:	e008      	b.n	800d016 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d004:	4b08      	ldr	r3, [pc, #32]	; (800d028 <xTaskGetSchedulerState+0x38>)
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d102      	bne.n	800d012 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d00c:	2302      	movs	r3, #2
 800d00e:	607b      	str	r3, [r7, #4]
 800d010:	e001      	b.n	800d016 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d012:	2300      	movs	r3, #0
 800d014:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d016:	687b      	ldr	r3, [r7, #4]
	}
 800d018:	4618      	mov	r0, r3
 800d01a:	370c      	adds	r7, #12
 800d01c:	46bd      	mov	sp, r7
 800d01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d022:	4770      	bx	lr
 800d024:	240047b4 	.word	0x240047b4
 800d028:	240047d0 	.word	0x240047d0

0800d02c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d02c:	b580      	push	{r7, lr}
 800d02e:	b084      	sub	sp, #16
 800d030:	af00      	add	r7, sp, #0
 800d032:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d038:	2300      	movs	r3, #0
 800d03a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d069      	beq.n	800d116 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d042:	68bb      	ldr	r3, [r7, #8]
 800d044:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d046:	4b36      	ldr	r3, [pc, #216]	; (800d120 <xTaskPriorityInherit+0xf4>)
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d04c:	429a      	cmp	r2, r3
 800d04e:	d259      	bcs.n	800d104 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d050:	68bb      	ldr	r3, [r7, #8]
 800d052:	699b      	ldr	r3, [r3, #24]
 800d054:	2b00      	cmp	r3, #0
 800d056:	db06      	blt.n	800d066 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d058:	4b31      	ldr	r3, [pc, #196]	; (800d120 <xTaskPriorityInherit+0xf4>)
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d05e:	f1c3 0207 	rsb	r2, r3, #7
 800d062:	68bb      	ldr	r3, [r7, #8]
 800d064:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d066:	68bb      	ldr	r3, [r7, #8]
 800d068:	6959      	ldr	r1, [r3, #20]
 800d06a:	68bb      	ldr	r3, [r7, #8]
 800d06c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d06e:	4613      	mov	r3, r2
 800d070:	009b      	lsls	r3, r3, #2
 800d072:	4413      	add	r3, r2
 800d074:	009b      	lsls	r3, r3, #2
 800d076:	4a2b      	ldr	r2, [pc, #172]	; (800d124 <xTaskPriorityInherit+0xf8>)
 800d078:	4413      	add	r3, r2
 800d07a:	4299      	cmp	r1, r3
 800d07c:	d13a      	bne.n	800d0f4 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d07e:	68bb      	ldr	r3, [r7, #8]
 800d080:	3304      	adds	r3, #4
 800d082:	4618      	mov	r0, r3
 800d084:	f7fe f84a 	bl	800b11c <uxListRemove>
 800d088:	4603      	mov	r3, r0
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d115      	bne.n	800d0ba <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800d08e:	68bb      	ldr	r3, [r7, #8]
 800d090:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d092:	4924      	ldr	r1, [pc, #144]	; (800d124 <xTaskPriorityInherit+0xf8>)
 800d094:	4613      	mov	r3, r2
 800d096:	009b      	lsls	r3, r3, #2
 800d098:	4413      	add	r3, r2
 800d09a:	009b      	lsls	r3, r3, #2
 800d09c:	440b      	add	r3, r1
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d10a      	bne.n	800d0ba <xTaskPriorityInherit+0x8e>
 800d0a4:	68bb      	ldr	r3, [r7, #8]
 800d0a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0a8:	2201      	movs	r2, #1
 800d0aa:	fa02 f303 	lsl.w	r3, r2, r3
 800d0ae:	43da      	mvns	r2, r3
 800d0b0:	4b1d      	ldr	r3, [pc, #116]	; (800d128 <xTaskPriorityInherit+0xfc>)
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	4013      	ands	r3, r2
 800d0b6:	4a1c      	ldr	r2, [pc, #112]	; (800d128 <xTaskPriorityInherit+0xfc>)
 800d0b8:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d0ba:	4b19      	ldr	r3, [pc, #100]	; (800d120 <xTaskPriorityInherit+0xf4>)
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0c0:	68bb      	ldr	r3, [r7, #8]
 800d0c2:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d0c4:	68bb      	ldr	r3, [r7, #8]
 800d0c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0c8:	2201      	movs	r2, #1
 800d0ca:	409a      	lsls	r2, r3
 800d0cc:	4b16      	ldr	r3, [pc, #88]	; (800d128 <xTaskPriorityInherit+0xfc>)
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	4313      	orrs	r3, r2
 800d0d2:	4a15      	ldr	r2, [pc, #84]	; (800d128 <xTaskPriorityInherit+0xfc>)
 800d0d4:	6013      	str	r3, [r2, #0]
 800d0d6:	68bb      	ldr	r3, [r7, #8]
 800d0d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0da:	4613      	mov	r3, r2
 800d0dc:	009b      	lsls	r3, r3, #2
 800d0de:	4413      	add	r3, r2
 800d0e0:	009b      	lsls	r3, r3, #2
 800d0e2:	4a10      	ldr	r2, [pc, #64]	; (800d124 <xTaskPriorityInherit+0xf8>)
 800d0e4:	441a      	add	r2, r3
 800d0e6:	68bb      	ldr	r3, [r7, #8]
 800d0e8:	3304      	adds	r3, #4
 800d0ea:	4619      	mov	r1, r3
 800d0ec:	4610      	mov	r0, r2
 800d0ee:	f7fd ffb8 	bl	800b062 <vListInsertEnd>
 800d0f2:	e004      	b.n	800d0fe <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d0f4:	4b0a      	ldr	r3, [pc, #40]	; (800d120 <xTaskPriorityInherit+0xf4>)
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0fa:	68bb      	ldr	r3, [r7, #8]
 800d0fc:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d0fe:	2301      	movs	r3, #1
 800d100:	60fb      	str	r3, [r7, #12]
 800d102:	e008      	b.n	800d116 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d104:	68bb      	ldr	r3, [r7, #8]
 800d106:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d108:	4b05      	ldr	r3, [pc, #20]	; (800d120 <xTaskPriorityInherit+0xf4>)
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d10e:	429a      	cmp	r2, r3
 800d110:	d201      	bcs.n	800d116 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d112:	2301      	movs	r3, #1
 800d114:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d116:	68fb      	ldr	r3, [r7, #12]
	}
 800d118:	4618      	mov	r0, r3
 800d11a:	3710      	adds	r7, #16
 800d11c:	46bd      	mov	sp, r7
 800d11e:	bd80      	pop	{r7, pc}
 800d120:	240046a8 	.word	0x240046a8
 800d124:	240046ac 	.word	0x240046ac
 800d128:	240047b0 	.word	0x240047b0

0800d12c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d12c:	b580      	push	{r7, lr}
 800d12e:	b086      	sub	sp, #24
 800d130:	af00      	add	r7, sp, #0
 800d132:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d138:	2300      	movs	r3, #0
 800d13a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d06c      	beq.n	800d21c <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d142:	4b39      	ldr	r3, [pc, #228]	; (800d228 <xTaskPriorityDisinherit+0xfc>)
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	693a      	ldr	r2, [r7, #16]
 800d148:	429a      	cmp	r2, r3
 800d14a:	d009      	beq.n	800d160 <xTaskPriorityDisinherit+0x34>
 800d14c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d150:	f383 8811 	msr	BASEPRI, r3
 800d154:	f3bf 8f6f 	isb	sy
 800d158:	f3bf 8f4f 	dsb	sy
 800d15c:	60fb      	str	r3, [r7, #12]
 800d15e:	e7fe      	b.n	800d15e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800d160:	693b      	ldr	r3, [r7, #16]
 800d162:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d164:	2b00      	cmp	r3, #0
 800d166:	d109      	bne.n	800d17c <xTaskPriorityDisinherit+0x50>
 800d168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d16c:	f383 8811 	msr	BASEPRI, r3
 800d170:	f3bf 8f6f 	isb	sy
 800d174:	f3bf 8f4f 	dsb	sy
 800d178:	60bb      	str	r3, [r7, #8]
 800d17a:	e7fe      	b.n	800d17a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800d17c:	693b      	ldr	r3, [r7, #16]
 800d17e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d180:	1e5a      	subs	r2, r3, #1
 800d182:	693b      	ldr	r3, [r7, #16]
 800d184:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d186:	693b      	ldr	r3, [r7, #16]
 800d188:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d18a:	693b      	ldr	r3, [r7, #16]
 800d18c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d18e:	429a      	cmp	r2, r3
 800d190:	d044      	beq.n	800d21c <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d192:	693b      	ldr	r3, [r7, #16]
 800d194:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d196:	2b00      	cmp	r3, #0
 800d198:	d140      	bne.n	800d21c <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d19a:	693b      	ldr	r3, [r7, #16]
 800d19c:	3304      	adds	r3, #4
 800d19e:	4618      	mov	r0, r3
 800d1a0:	f7fd ffbc 	bl	800b11c <uxListRemove>
 800d1a4:	4603      	mov	r3, r0
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d115      	bne.n	800d1d6 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d1aa:	693b      	ldr	r3, [r7, #16]
 800d1ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1ae:	491f      	ldr	r1, [pc, #124]	; (800d22c <xTaskPriorityDisinherit+0x100>)
 800d1b0:	4613      	mov	r3, r2
 800d1b2:	009b      	lsls	r3, r3, #2
 800d1b4:	4413      	add	r3, r2
 800d1b6:	009b      	lsls	r3, r3, #2
 800d1b8:	440b      	add	r3, r1
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d10a      	bne.n	800d1d6 <xTaskPriorityDisinherit+0xaa>
 800d1c0:	693b      	ldr	r3, [r7, #16]
 800d1c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1c4:	2201      	movs	r2, #1
 800d1c6:	fa02 f303 	lsl.w	r3, r2, r3
 800d1ca:	43da      	mvns	r2, r3
 800d1cc:	4b18      	ldr	r3, [pc, #96]	; (800d230 <xTaskPriorityDisinherit+0x104>)
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	4013      	ands	r3, r2
 800d1d2:	4a17      	ldr	r2, [pc, #92]	; (800d230 <xTaskPriorityDisinherit+0x104>)
 800d1d4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d1d6:	693b      	ldr	r3, [r7, #16]
 800d1d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d1da:	693b      	ldr	r3, [r7, #16]
 800d1dc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d1de:	693b      	ldr	r3, [r7, #16]
 800d1e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1e2:	f1c3 0207 	rsb	r2, r3, #7
 800d1e6:	693b      	ldr	r3, [r7, #16]
 800d1e8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d1ea:	693b      	ldr	r3, [r7, #16]
 800d1ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1ee:	2201      	movs	r2, #1
 800d1f0:	409a      	lsls	r2, r3
 800d1f2:	4b0f      	ldr	r3, [pc, #60]	; (800d230 <xTaskPriorityDisinherit+0x104>)
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	4313      	orrs	r3, r2
 800d1f8:	4a0d      	ldr	r2, [pc, #52]	; (800d230 <xTaskPriorityDisinherit+0x104>)
 800d1fa:	6013      	str	r3, [r2, #0]
 800d1fc:	693b      	ldr	r3, [r7, #16]
 800d1fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d200:	4613      	mov	r3, r2
 800d202:	009b      	lsls	r3, r3, #2
 800d204:	4413      	add	r3, r2
 800d206:	009b      	lsls	r3, r3, #2
 800d208:	4a08      	ldr	r2, [pc, #32]	; (800d22c <xTaskPriorityDisinherit+0x100>)
 800d20a:	441a      	add	r2, r3
 800d20c:	693b      	ldr	r3, [r7, #16]
 800d20e:	3304      	adds	r3, #4
 800d210:	4619      	mov	r1, r3
 800d212:	4610      	mov	r0, r2
 800d214:	f7fd ff25 	bl	800b062 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d218:	2301      	movs	r3, #1
 800d21a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d21c:	697b      	ldr	r3, [r7, #20]
	}
 800d21e:	4618      	mov	r0, r3
 800d220:	3718      	adds	r7, #24
 800d222:	46bd      	mov	sp, r7
 800d224:	bd80      	pop	{r7, pc}
 800d226:	bf00      	nop
 800d228:	240046a8 	.word	0x240046a8
 800d22c:	240046ac 	.word	0x240046ac
 800d230:	240047b0 	.word	0x240047b0

0800d234 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d234:	b580      	push	{r7, lr}
 800d236:	b088      	sub	sp, #32
 800d238:	af00      	add	r7, sp, #0
 800d23a:	6078      	str	r0, [r7, #4]
 800d23c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d242:	2301      	movs	r3, #1
 800d244:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	2b00      	cmp	r3, #0
 800d24a:	f000 8081 	beq.w	800d350 <vTaskPriorityDisinheritAfterTimeout+0x11c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d24e:	69bb      	ldr	r3, [r7, #24]
 800d250:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d252:	2b00      	cmp	r3, #0
 800d254:	d109      	bne.n	800d26a <vTaskPriorityDisinheritAfterTimeout+0x36>
 800d256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d25a:	f383 8811 	msr	BASEPRI, r3
 800d25e:	f3bf 8f6f 	isb	sy
 800d262:	f3bf 8f4f 	dsb	sy
 800d266:	60fb      	str	r3, [r7, #12]
 800d268:	e7fe      	b.n	800d268 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d26a:	69bb      	ldr	r3, [r7, #24]
 800d26c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d26e:	683a      	ldr	r2, [r7, #0]
 800d270:	429a      	cmp	r2, r3
 800d272:	d902      	bls.n	800d27a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d274:	683b      	ldr	r3, [r7, #0]
 800d276:	61fb      	str	r3, [r7, #28]
 800d278:	e002      	b.n	800d280 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d27a:	69bb      	ldr	r3, [r7, #24]
 800d27c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d27e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d280:	69bb      	ldr	r3, [r7, #24]
 800d282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d284:	69fa      	ldr	r2, [r7, #28]
 800d286:	429a      	cmp	r2, r3
 800d288:	d062      	beq.n	800d350 <vTaskPriorityDisinheritAfterTimeout+0x11c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d28a:	69bb      	ldr	r3, [r7, #24]
 800d28c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d28e:	697a      	ldr	r2, [r7, #20]
 800d290:	429a      	cmp	r2, r3
 800d292:	d15d      	bne.n	800d350 <vTaskPriorityDisinheritAfterTimeout+0x11c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d294:	4b30      	ldr	r3, [pc, #192]	; (800d358 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	69ba      	ldr	r2, [r7, #24]
 800d29a:	429a      	cmp	r2, r3
 800d29c:	d109      	bne.n	800d2b2 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 800d29e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2a2:	f383 8811 	msr	BASEPRI, r3
 800d2a6:	f3bf 8f6f 	isb	sy
 800d2aa:	f3bf 8f4f 	dsb	sy
 800d2ae:	60bb      	str	r3, [r7, #8]
 800d2b0:	e7fe      	b.n	800d2b0 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d2b2:	69bb      	ldr	r3, [r7, #24]
 800d2b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2b6:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d2b8:	69bb      	ldr	r3, [r7, #24]
 800d2ba:	69fa      	ldr	r2, [r7, #28]
 800d2bc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d2be:	69bb      	ldr	r3, [r7, #24]
 800d2c0:	699b      	ldr	r3, [r3, #24]
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	db04      	blt.n	800d2d0 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d2c6:	69fb      	ldr	r3, [r7, #28]
 800d2c8:	f1c3 0207 	rsb	r2, r3, #7
 800d2cc:	69bb      	ldr	r3, [r7, #24]
 800d2ce:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d2d0:	69bb      	ldr	r3, [r7, #24]
 800d2d2:	6959      	ldr	r1, [r3, #20]
 800d2d4:	693a      	ldr	r2, [r7, #16]
 800d2d6:	4613      	mov	r3, r2
 800d2d8:	009b      	lsls	r3, r3, #2
 800d2da:	4413      	add	r3, r2
 800d2dc:	009b      	lsls	r3, r3, #2
 800d2de:	4a1f      	ldr	r2, [pc, #124]	; (800d35c <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800d2e0:	4413      	add	r3, r2
 800d2e2:	4299      	cmp	r1, r3
 800d2e4:	d134      	bne.n	800d350 <vTaskPriorityDisinheritAfterTimeout+0x11c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d2e6:	69bb      	ldr	r3, [r7, #24]
 800d2e8:	3304      	adds	r3, #4
 800d2ea:	4618      	mov	r0, r3
 800d2ec:	f7fd ff16 	bl	800b11c <uxListRemove>
 800d2f0:	4603      	mov	r3, r0
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d115      	bne.n	800d322 <vTaskPriorityDisinheritAfterTimeout+0xee>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d2f6:	69bb      	ldr	r3, [r7, #24]
 800d2f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2fa:	4918      	ldr	r1, [pc, #96]	; (800d35c <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800d2fc:	4613      	mov	r3, r2
 800d2fe:	009b      	lsls	r3, r3, #2
 800d300:	4413      	add	r3, r2
 800d302:	009b      	lsls	r3, r3, #2
 800d304:	440b      	add	r3, r1
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d10a      	bne.n	800d322 <vTaskPriorityDisinheritAfterTimeout+0xee>
 800d30c:	69bb      	ldr	r3, [r7, #24]
 800d30e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d310:	2201      	movs	r2, #1
 800d312:	fa02 f303 	lsl.w	r3, r2, r3
 800d316:	43da      	mvns	r2, r3
 800d318:	4b11      	ldr	r3, [pc, #68]	; (800d360 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	4013      	ands	r3, r2
 800d31e:	4a10      	ldr	r2, [pc, #64]	; (800d360 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800d320:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d322:	69bb      	ldr	r3, [r7, #24]
 800d324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d326:	2201      	movs	r2, #1
 800d328:	409a      	lsls	r2, r3
 800d32a:	4b0d      	ldr	r3, [pc, #52]	; (800d360 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	4313      	orrs	r3, r2
 800d330:	4a0b      	ldr	r2, [pc, #44]	; (800d360 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800d332:	6013      	str	r3, [r2, #0]
 800d334:	69bb      	ldr	r3, [r7, #24]
 800d336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d338:	4613      	mov	r3, r2
 800d33a:	009b      	lsls	r3, r3, #2
 800d33c:	4413      	add	r3, r2
 800d33e:	009b      	lsls	r3, r3, #2
 800d340:	4a06      	ldr	r2, [pc, #24]	; (800d35c <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800d342:	441a      	add	r2, r3
 800d344:	69bb      	ldr	r3, [r7, #24]
 800d346:	3304      	adds	r3, #4
 800d348:	4619      	mov	r1, r3
 800d34a:	4610      	mov	r0, r2
 800d34c:	f7fd fe89 	bl	800b062 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d350:	bf00      	nop
 800d352:	3720      	adds	r7, #32
 800d354:	46bd      	mov	sp, r7
 800d356:	bd80      	pop	{r7, pc}
 800d358:	240046a8 	.word	0x240046a8
 800d35c:	240046ac 	.word	0x240046ac
 800d360:	240047b0 	.word	0x240047b0

0800d364 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d364:	b480      	push	{r7}
 800d366:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d368:	4b07      	ldr	r3, [pc, #28]	; (800d388 <pvTaskIncrementMutexHeldCount+0x24>)
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d004      	beq.n	800d37a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d370:	4b05      	ldr	r3, [pc, #20]	; (800d388 <pvTaskIncrementMutexHeldCount+0x24>)
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d376:	3201      	adds	r2, #1
 800d378:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800d37a:	4b03      	ldr	r3, [pc, #12]	; (800d388 <pvTaskIncrementMutexHeldCount+0x24>)
 800d37c:	681b      	ldr	r3, [r3, #0]
	}
 800d37e:	4618      	mov	r0, r3
 800d380:	46bd      	mov	sp, r7
 800d382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d386:	4770      	bx	lr
 800d388:	240046a8 	.word	0x240046a8

0800d38c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d38c:	b580      	push	{r7, lr}
 800d38e:	b084      	sub	sp, #16
 800d390:	af00      	add	r7, sp, #0
 800d392:	6078      	str	r0, [r7, #4]
 800d394:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d396:	4b29      	ldr	r3, [pc, #164]	; (800d43c <prvAddCurrentTaskToDelayedList+0xb0>)
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d39c:	4b28      	ldr	r3, [pc, #160]	; (800d440 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	3304      	adds	r3, #4
 800d3a2:	4618      	mov	r0, r3
 800d3a4:	f7fd feba 	bl	800b11c <uxListRemove>
 800d3a8:	4603      	mov	r3, r0
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d10b      	bne.n	800d3c6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800d3ae:	4b24      	ldr	r3, [pc, #144]	; (800d440 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3b4:	2201      	movs	r2, #1
 800d3b6:	fa02 f303 	lsl.w	r3, r2, r3
 800d3ba:	43da      	mvns	r2, r3
 800d3bc:	4b21      	ldr	r3, [pc, #132]	; (800d444 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	4013      	ands	r3, r2
 800d3c2:	4a20      	ldr	r2, [pc, #128]	; (800d444 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d3c4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d3cc:	d10a      	bne.n	800d3e4 <prvAddCurrentTaskToDelayedList+0x58>
 800d3ce:	683b      	ldr	r3, [r7, #0]
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d007      	beq.n	800d3e4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d3d4:	4b1a      	ldr	r3, [pc, #104]	; (800d440 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	3304      	adds	r3, #4
 800d3da:	4619      	mov	r1, r3
 800d3dc:	481a      	ldr	r0, [pc, #104]	; (800d448 <prvAddCurrentTaskToDelayedList+0xbc>)
 800d3de:	f7fd fe40 	bl	800b062 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d3e2:	e026      	b.n	800d432 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d3e4:	68fa      	ldr	r2, [r7, #12]
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	4413      	add	r3, r2
 800d3ea:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d3ec:	4b14      	ldr	r3, [pc, #80]	; (800d440 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	68ba      	ldr	r2, [r7, #8]
 800d3f2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d3f4:	68ba      	ldr	r2, [r7, #8]
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	429a      	cmp	r2, r3
 800d3fa:	d209      	bcs.n	800d410 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d3fc:	4b13      	ldr	r3, [pc, #76]	; (800d44c <prvAddCurrentTaskToDelayedList+0xc0>)
 800d3fe:	681a      	ldr	r2, [r3, #0]
 800d400:	4b0f      	ldr	r3, [pc, #60]	; (800d440 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	3304      	adds	r3, #4
 800d406:	4619      	mov	r1, r3
 800d408:	4610      	mov	r0, r2
 800d40a:	f7fd fe4e 	bl	800b0aa <vListInsert>
}
 800d40e:	e010      	b.n	800d432 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d410:	4b0f      	ldr	r3, [pc, #60]	; (800d450 <prvAddCurrentTaskToDelayedList+0xc4>)
 800d412:	681a      	ldr	r2, [r3, #0]
 800d414:	4b0a      	ldr	r3, [pc, #40]	; (800d440 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	3304      	adds	r3, #4
 800d41a:	4619      	mov	r1, r3
 800d41c:	4610      	mov	r0, r2
 800d41e:	f7fd fe44 	bl	800b0aa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d422:	4b0c      	ldr	r3, [pc, #48]	; (800d454 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	68ba      	ldr	r2, [r7, #8]
 800d428:	429a      	cmp	r2, r3
 800d42a:	d202      	bcs.n	800d432 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800d42c:	4a09      	ldr	r2, [pc, #36]	; (800d454 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d42e:	68bb      	ldr	r3, [r7, #8]
 800d430:	6013      	str	r3, [r2, #0]
}
 800d432:	bf00      	nop
 800d434:	3710      	adds	r7, #16
 800d436:	46bd      	mov	sp, r7
 800d438:	bd80      	pop	{r7, pc}
 800d43a:	bf00      	nop
 800d43c:	240047ac 	.word	0x240047ac
 800d440:	240046a8 	.word	0x240046a8
 800d444:	240047b0 	.word	0x240047b0
 800d448:	24004794 	.word	0x24004794
 800d44c:	24004764 	.word	0x24004764
 800d450:	24004760 	.word	0x24004760
 800d454:	240047c8 	.word	0x240047c8

0800d458 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800d458:	b480      	push	{r7}
 800d45a:	b083      	sub	sp, #12
 800d45c:	af00      	add	r7, sp, #0
 800d45e:	4603      	mov	r3, r0
 800d460:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800d462:	88fb      	ldrh	r3, [r7, #6]
 800d464:	021b      	lsls	r3, r3, #8
 800d466:	b21a      	sxth	r2, r3
 800d468:	88fb      	ldrh	r3, [r7, #6]
 800d46a:	0a1b      	lsrs	r3, r3, #8
 800d46c:	b29b      	uxth	r3, r3
 800d46e:	b21b      	sxth	r3, r3
 800d470:	4313      	orrs	r3, r2
 800d472:	b21b      	sxth	r3, r3
 800d474:	b29b      	uxth	r3, r3
}
 800d476:	4618      	mov	r0, r3
 800d478:	370c      	adds	r7, #12
 800d47a:	46bd      	mov	sp, r7
 800d47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d480:	4770      	bx	lr

0800d482 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800d482:	b480      	push	{r7}
 800d484:	b083      	sub	sp, #12
 800d486:	af00      	add	r7, sp, #0
 800d488:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	061a      	lsls	r2, r3, #24
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	021b      	lsls	r3, r3, #8
 800d492:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d496:	431a      	orrs	r2, r3
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	0a1b      	lsrs	r3, r3, #8
 800d49c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d4a0:	431a      	orrs	r2, r3
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	0e1b      	lsrs	r3, r3, #24
 800d4a6:	4313      	orrs	r3, r2
}
 800d4a8:	4618      	mov	r0, r3
 800d4aa:	370c      	adds	r7, #12
 800d4ac:	46bd      	mov	sp, r7
 800d4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b2:	4770      	bx	lr

0800d4b4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800d4b4:	b580      	push	{r7, lr}
 800d4b6:	b082      	sub	sp, #8
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800d4bc:	4915      	ldr	r1, [pc, #84]	; (800d514 <etharp_free_entry+0x60>)
 800d4be:	687a      	ldr	r2, [r7, #4]
 800d4c0:	4613      	mov	r3, r2
 800d4c2:	005b      	lsls	r3, r3, #1
 800d4c4:	4413      	add	r3, r2
 800d4c6:	00db      	lsls	r3, r3, #3
 800d4c8:	440b      	add	r3, r1
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d013      	beq.n	800d4f8 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800d4d0:	4910      	ldr	r1, [pc, #64]	; (800d514 <etharp_free_entry+0x60>)
 800d4d2:	687a      	ldr	r2, [r7, #4]
 800d4d4:	4613      	mov	r3, r2
 800d4d6:	005b      	lsls	r3, r3, #1
 800d4d8:	4413      	add	r3, r2
 800d4da:	00db      	lsls	r3, r3, #3
 800d4dc:	440b      	add	r3, r1
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	4618      	mov	r0, r3
 800d4e2:	f003 ff4f 	bl	8011384 <pbuf_free>
    arp_table[i].q = NULL;
 800d4e6:	490b      	ldr	r1, [pc, #44]	; (800d514 <etharp_free_entry+0x60>)
 800d4e8:	687a      	ldr	r2, [r7, #4]
 800d4ea:	4613      	mov	r3, r2
 800d4ec:	005b      	lsls	r3, r3, #1
 800d4ee:	4413      	add	r3, r2
 800d4f0:	00db      	lsls	r3, r3, #3
 800d4f2:	440b      	add	r3, r1
 800d4f4:	2200      	movs	r2, #0
 800d4f6:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800d4f8:	4906      	ldr	r1, [pc, #24]	; (800d514 <etharp_free_entry+0x60>)
 800d4fa:	687a      	ldr	r2, [r7, #4]
 800d4fc:	4613      	mov	r3, r2
 800d4fe:	005b      	lsls	r3, r3, #1
 800d500:	4413      	add	r3, r2
 800d502:	00db      	lsls	r3, r3, #3
 800d504:	440b      	add	r3, r1
 800d506:	3314      	adds	r3, #20
 800d508:	2200      	movs	r2, #0
 800d50a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800d50c:	bf00      	nop
 800d50e:	3708      	adds	r7, #8
 800d510:	46bd      	mov	sp, r7
 800d512:	bd80      	pop	{r7, pc}
 800d514:	240047d4 	.word	0x240047d4

0800d518 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800d518:	b580      	push	{r7, lr}
 800d51a:	b082      	sub	sp, #8
 800d51c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d51e:	2300      	movs	r3, #0
 800d520:	607b      	str	r3, [r7, #4]
 800d522:	e096      	b.n	800d652 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800d524:	494f      	ldr	r1, [pc, #316]	; (800d664 <etharp_tmr+0x14c>)
 800d526:	687a      	ldr	r2, [r7, #4]
 800d528:	4613      	mov	r3, r2
 800d52a:	005b      	lsls	r3, r3, #1
 800d52c:	4413      	add	r3, r2
 800d52e:	00db      	lsls	r3, r3, #3
 800d530:	440b      	add	r3, r1
 800d532:	3314      	adds	r3, #20
 800d534:	781b      	ldrb	r3, [r3, #0]
 800d536:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800d538:	78fb      	ldrb	r3, [r7, #3]
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	f000 8086 	beq.w	800d64c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800d540:	4948      	ldr	r1, [pc, #288]	; (800d664 <etharp_tmr+0x14c>)
 800d542:	687a      	ldr	r2, [r7, #4]
 800d544:	4613      	mov	r3, r2
 800d546:	005b      	lsls	r3, r3, #1
 800d548:	4413      	add	r3, r2
 800d54a:	00db      	lsls	r3, r3, #3
 800d54c:	440b      	add	r3, r1
 800d54e:	3312      	adds	r3, #18
 800d550:	881b      	ldrh	r3, [r3, #0]
 800d552:	3301      	adds	r3, #1
 800d554:	b298      	uxth	r0, r3
 800d556:	4943      	ldr	r1, [pc, #268]	; (800d664 <etharp_tmr+0x14c>)
 800d558:	687a      	ldr	r2, [r7, #4]
 800d55a:	4613      	mov	r3, r2
 800d55c:	005b      	lsls	r3, r3, #1
 800d55e:	4413      	add	r3, r2
 800d560:	00db      	lsls	r3, r3, #3
 800d562:	440b      	add	r3, r1
 800d564:	3312      	adds	r3, #18
 800d566:	4602      	mov	r2, r0
 800d568:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800d56a:	493e      	ldr	r1, [pc, #248]	; (800d664 <etharp_tmr+0x14c>)
 800d56c:	687a      	ldr	r2, [r7, #4]
 800d56e:	4613      	mov	r3, r2
 800d570:	005b      	lsls	r3, r3, #1
 800d572:	4413      	add	r3, r2
 800d574:	00db      	lsls	r3, r3, #3
 800d576:	440b      	add	r3, r1
 800d578:	3312      	adds	r3, #18
 800d57a:	881b      	ldrh	r3, [r3, #0]
 800d57c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800d580:	d215      	bcs.n	800d5ae <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800d582:	4938      	ldr	r1, [pc, #224]	; (800d664 <etharp_tmr+0x14c>)
 800d584:	687a      	ldr	r2, [r7, #4]
 800d586:	4613      	mov	r3, r2
 800d588:	005b      	lsls	r3, r3, #1
 800d58a:	4413      	add	r3, r2
 800d58c:	00db      	lsls	r3, r3, #3
 800d58e:	440b      	add	r3, r1
 800d590:	3314      	adds	r3, #20
 800d592:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800d594:	2b01      	cmp	r3, #1
 800d596:	d10e      	bne.n	800d5b6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800d598:	4932      	ldr	r1, [pc, #200]	; (800d664 <etharp_tmr+0x14c>)
 800d59a:	687a      	ldr	r2, [r7, #4]
 800d59c:	4613      	mov	r3, r2
 800d59e:	005b      	lsls	r3, r3, #1
 800d5a0:	4413      	add	r3, r2
 800d5a2:	00db      	lsls	r3, r3, #3
 800d5a4:	440b      	add	r3, r1
 800d5a6:	3312      	adds	r3, #18
 800d5a8:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800d5aa:	2b04      	cmp	r3, #4
 800d5ac:	d903      	bls.n	800d5b6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800d5ae:	6878      	ldr	r0, [r7, #4]
 800d5b0:	f7ff ff80 	bl	800d4b4 <etharp_free_entry>
 800d5b4:	e04a      	b.n	800d64c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800d5b6:	492b      	ldr	r1, [pc, #172]	; (800d664 <etharp_tmr+0x14c>)
 800d5b8:	687a      	ldr	r2, [r7, #4]
 800d5ba:	4613      	mov	r3, r2
 800d5bc:	005b      	lsls	r3, r3, #1
 800d5be:	4413      	add	r3, r2
 800d5c0:	00db      	lsls	r3, r3, #3
 800d5c2:	440b      	add	r3, r1
 800d5c4:	3314      	adds	r3, #20
 800d5c6:	781b      	ldrb	r3, [r3, #0]
 800d5c8:	2b03      	cmp	r3, #3
 800d5ca:	d10a      	bne.n	800d5e2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800d5cc:	4925      	ldr	r1, [pc, #148]	; (800d664 <etharp_tmr+0x14c>)
 800d5ce:	687a      	ldr	r2, [r7, #4]
 800d5d0:	4613      	mov	r3, r2
 800d5d2:	005b      	lsls	r3, r3, #1
 800d5d4:	4413      	add	r3, r2
 800d5d6:	00db      	lsls	r3, r3, #3
 800d5d8:	440b      	add	r3, r1
 800d5da:	3314      	adds	r3, #20
 800d5dc:	2204      	movs	r2, #4
 800d5de:	701a      	strb	r2, [r3, #0]
 800d5e0:	e034      	b.n	800d64c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800d5e2:	4920      	ldr	r1, [pc, #128]	; (800d664 <etharp_tmr+0x14c>)
 800d5e4:	687a      	ldr	r2, [r7, #4]
 800d5e6:	4613      	mov	r3, r2
 800d5e8:	005b      	lsls	r3, r3, #1
 800d5ea:	4413      	add	r3, r2
 800d5ec:	00db      	lsls	r3, r3, #3
 800d5ee:	440b      	add	r3, r1
 800d5f0:	3314      	adds	r3, #20
 800d5f2:	781b      	ldrb	r3, [r3, #0]
 800d5f4:	2b04      	cmp	r3, #4
 800d5f6:	d10a      	bne.n	800d60e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800d5f8:	491a      	ldr	r1, [pc, #104]	; (800d664 <etharp_tmr+0x14c>)
 800d5fa:	687a      	ldr	r2, [r7, #4]
 800d5fc:	4613      	mov	r3, r2
 800d5fe:	005b      	lsls	r3, r3, #1
 800d600:	4413      	add	r3, r2
 800d602:	00db      	lsls	r3, r3, #3
 800d604:	440b      	add	r3, r1
 800d606:	3314      	adds	r3, #20
 800d608:	2202      	movs	r2, #2
 800d60a:	701a      	strb	r2, [r3, #0]
 800d60c:	e01e      	b.n	800d64c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800d60e:	4915      	ldr	r1, [pc, #84]	; (800d664 <etharp_tmr+0x14c>)
 800d610:	687a      	ldr	r2, [r7, #4]
 800d612:	4613      	mov	r3, r2
 800d614:	005b      	lsls	r3, r3, #1
 800d616:	4413      	add	r3, r2
 800d618:	00db      	lsls	r3, r3, #3
 800d61a:	440b      	add	r3, r1
 800d61c:	3314      	adds	r3, #20
 800d61e:	781b      	ldrb	r3, [r3, #0]
 800d620:	2b01      	cmp	r3, #1
 800d622:	d113      	bne.n	800d64c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800d624:	490f      	ldr	r1, [pc, #60]	; (800d664 <etharp_tmr+0x14c>)
 800d626:	687a      	ldr	r2, [r7, #4]
 800d628:	4613      	mov	r3, r2
 800d62a:	005b      	lsls	r3, r3, #1
 800d62c:	4413      	add	r3, r2
 800d62e:	00db      	lsls	r3, r3, #3
 800d630:	440b      	add	r3, r1
 800d632:	3308      	adds	r3, #8
 800d634:	6818      	ldr	r0, [r3, #0]
 800d636:	687a      	ldr	r2, [r7, #4]
 800d638:	4613      	mov	r3, r2
 800d63a:	005b      	lsls	r3, r3, #1
 800d63c:	4413      	add	r3, r2
 800d63e:	00db      	lsls	r3, r3, #3
 800d640:	4a08      	ldr	r2, [pc, #32]	; (800d664 <etharp_tmr+0x14c>)
 800d642:	4413      	add	r3, r2
 800d644:	3304      	adds	r3, #4
 800d646:	4619      	mov	r1, r3
 800d648:	f000 fe6e 	bl	800e328 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	3301      	adds	r3, #1
 800d650:	607b      	str	r3, [r7, #4]
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	2b09      	cmp	r3, #9
 800d656:	f77f af65 	ble.w	800d524 <etharp_tmr+0xc>
      }
    }
  }
}
 800d65a:	bf00      	nop
 800d65c:	3708      	adds	r7, #8
 800d65e:	46bd      	mov	sp, r7
 800d660:	bd80      	pop	{r7, pc}
 800d662:	bf00      	nop
 800d664:	240047d4 	.word	0x240047d4

0800d668 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800d668:	b580      	push	{r7, lr}
 800d66a:	b08a      	sub	sp, #40	; 0x28
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	60f8      	str	r0, [r7, #12]
 800d670:	460b      	mov	r3, r1
 800d672:	607a      	str	r2, [r7, #4]
 800d674:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800d676:	230a      	movs	r3, #10
 800d678:	84fb      	strh	r3, [r7, #38]	; 0x26
 800d67a:	230a      	movs	r3, #10
 800d67c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800d67e:	230a      	movs	r3, #10
 800d680:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800d682:	2300      	movs	r3, #0
 800d684:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800d686:	230a      	movs	r3, #10
 800d688:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800d68a:	2300      	movs	r3, #0
 800d68c:	83bb      	strh	r3, [r7, #28]
 800d68e:	2300      	movs	r3, #0
 800d690:	837b      	strh	r3, [r7, #26]
 800d692:	2300      	movs	r3, #0
 800d694:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d696:	2300      	movs	r3, #0
 800d698:	843b      	strh	r3, [r7, #32]
 800d69a:	e0ae      	b.n	800d7fa <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800d69c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d6a0:	49a6      	ldr	r1, [pc, #664]	; (800d93c <etharp_find_entry+0x2d4>)
 800d6a2:	4613      	mov	r3, r2
 800d6a4:	005b      	lsls	r3, r3, #1
 800d6a6:	4413      	add	r3, r2
 800d6a8:	00db      	lsls	r3, r3, #3
 800d6aa:	440b      	add	r3, r1
 800d6ac:	3314      	adds	r3, #20
 800d6ae:	781b      	ldrb	r3, [r3, #0]
 800d6b0:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800d6b2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800d6b6:	2b0a      	cmp	r3, #10
 800d6b8:	d105      	bne.n	800d6c6 <etharp_find_entry+0x5e>
 800d6ba:	7dfb      	ldrb	r3, [r7, #23]
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d102      	bne.n	800d6c6 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800d6c0:	8c3b      	ldrh	r3, [r7, #32]
 800d6c2:	847b      	strh	r3, [r7, #34]	; 0x22
 800d6c4:	e095      	b.n	800d7f2 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800d6c6:	7dfb      	ldrb	r3, [r7, #23]
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	f000 8092 	beq.w	800d7f2 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800d6ce:	7dfb      	ldrb	r3, [r7, #23]
 800d6d0:	2b01      	cmp	r3, #1
 800d6d2:	d009      	beq.n	800d6e8 <etharp_find_entry+0x80>
 800d6d4:	7dfb      	ldrb	r3, [r7, #23]
 800d6d6:	2b01      	cmp	r3, #1
 800d6d8:	d806      	bhi.n	800d6e8 <etharp_find_entry+0x80>
 800d6da:	4b99      	ldr	r3, [pc, #612]	; (800d940 <etharp_find_entry+0x2d8>)
 800d6dc:	f44f 7292 	mov.w	r2, #292	; 0x124
 800d6e0:	4998      	ldr	r1, [pc, #608]	; (800d944 <etharp_find_entry+0x2dc>)
 800d6e2:	4899      	ldr	r0, [pc, #612]	; (800d948 <etharp_find_entry+0x2e0>)
 800d6e4:	f00d fd0c 	bl	801b100 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d020      	beq.n	800d730 <etharp_find_entry+0xc8>
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	6819      	ldr	r1, [r3, #0]
 800d6f2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d6f6:	4891      	ldr	r0, [pc, #580]	; (800d93c <etharp_find_entry+0x2d4>)
 800d6f8:	4613      	mov	r3, r2
 800d6fa:	005b      	lsls	r3, r3, #1
 800d6fc:	4413      	add	r3, r2
 800d6fe:	00db      	lsls	r3, r3, #3
 800d700:	4403      	add	r3, r0
 800d702:	3304      	adds	r3, #4
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	4299      	cmp	r1, r3
 800d708:	d112      	bne.n	800d730 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d00c      	beq.n	800d72a <etharp_find_entry+0xc2>
 800d710:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d714:	4989      	ldr	r1, [pc, #548]	; (800d93c <etharp_find_entry+0x2d4>)
 800d716:	4613      	mov	r3, r2
 800d718:	005b      	lsls	r3, r3, #1
 800d71a:	4413      	add	r3, r2
 800d71c:	00db      	lsls	r3, r3, #3
 800d71e:	440b      	add	r3, r1
 800d720:	3308      	adds	r3, #8
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	687a      	ldr	r2, [r7, #4]
 800d726:	429a      	cmp	r2, r3
 800d728:	d102      	bne.n	800d730 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800d72a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d72e:	e100      	b.n	800d932 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800d730:	7dfb      	ldrb	r3, [r7, #23]
 800d732:	2b01      	cmp	r3, #1
 800d734:	d140      	bne.n	800d7b8 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800d736:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d73a:	4980      	ldr	r1, [pc, #512]	; (800d93c <etharp_find_entry+0x2d4>)
 800d73c:	4613      	mov	r3, r2
 800d73e:	005b      	lsls	r3, r3, #1
 800d740:	4413      	add	r3, r2
 800d742:	00db      	lsls	r3, r3, #3
 800d744:	440b      	add	r3, r1
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d01a      	beq.n	800d782 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800d74c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d750:	497a      	ldr	r1, [pc, #488]	; (800d93c <etharp_find_entry+0x2d4>)
 800d752:	4613      	mov	r3, r2
 800d754:	005b      	lsls	r3, r3, #1
 800d756:	4413      	add	r3, r2
 800d758:	00db      	lsls	r3, r3, #3
 800d75a:	440b      	add	r3, r1
 800d75c:	3312      	adds	r3, #18
 800d75e:	881b      	ldrh	r3, [r3, #0]
 800d760:	8bba      	ldrh	r2, [r7, #28]
 800d762:	429a      	cmp	r2, r3
 800d764:	d845      	bhi.n	800d7f2 <etharp_find_entry+0x18a>
            old_queue = i;
 800d766:	8c3b      	ldrh	r3, [r7, #32]
 800d768:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800d76a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d76e:	4973      	ldr	r1, [pc, #460]	; (800d93c <etharp_find_entry+0x2d4>)
 800d770:	4613      	mov	r3, r2
 800d772:	005b      	lsls	r3, r3, #1
 800d774:	4413      	add	r3, r2
 800d776:	00db      	lsls	r3, r3, #3
 800d778:	440b      	add	r3, r1
 800d77a:	3312      	adds	r3, #18
 800d77c:	881b      	ldrh	r3, [r3, #0]
 800d77e:	83bb      	strh	r3, [r7, #28]
 800d780:	e037      	b.n	800d7f2 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800d782:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d786:	496d      	ldr	r1, [pc, #436]	; (800d93c <etharp_find_entry+0x2d4>)
 800d788:	4613      	mov	r3, r2
 800d78a:	005b      	lsls	r3, r3, #1
 800d78c:	4413      	add	r3, r2
 800d78e:	00db      	lsls	r3, r3, #3
 800d790:	440b      	add	r3, r1
 800d792:	3312      	adds	r3, #18
 800d794:	881b      	ldrh	r3, [r3, #0]
 800d796:	8b7a      	ldrh	r2, [r7, #26]
 800d798:	429a      	cmp	r2, r3
 800d79a:	d82a      	bhi.n	800d7f2 <etharp_find_entry+0x18a>
            old_pending = i;
 800d79c:	8c3b      	ldrh	r3, [r7, #32]
 800d79e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800d7a0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d7a4:	4965      	ldr	r1, [pc, #404]	; (800d93c <etharp_find_entry+0x2d4>)
 800d7a6:	4613      	mov	r3, r2
 800d7a8:	005b      	lsls	r3, r3, #1
 800d7aa:	4413      	add	r3, r2
 800d7ac:	00db      	lsls	r3, r3, #3
 800d7ae:	440b      	add	r3, r1
 800d7b0:	3312      	adds	r3, #18
 800d7b2:	881b      	ldrh	r3, [r3, #0]
 800d7b4:	837b      	strh	r3, [r7, #26]
 800d7b6:	e01c      	b.n	800d7f2 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800d7b8:	7dfb      	ldrb	r3, [r7, #23]
 800d7ba:	2b01      	cmp	r3, #1
 800d7bc:	d919      	bls.n	800d7f2 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800d7be:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d7c2:	495e      	ldr	r1, [pc, #376]	; (800d93c <etharp_find_entry+0x2d4>)
 800d7c4:	4613      	mov	r3, r2
 800d7c6:	005b      	lsls	r3, r3, #1
 800d7c8:	4413      	add	r3, r2
 800d7ca:	00db      	lsls	r3, r3, #3
 800d7cc:	440b      	add	r3, r1
 800d7ce:	3312      	adds	r3, #18
 800d7d0:	881b      	ldrh	r3, [r3, #0]
 800d7d2:	8b3a      	ldrh	r2, [r7, #24]
 800d7d4:	429a      	cmp	r2, r3
 800d7d6:	d80c      	bhi.n	800d7f2 <etharp_find_entry+0x18a>
            old_stable = i;
 800d7d8:	8c3b      	ldrh	r3, [r7, #32]
 800d7da:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800d7dc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d7e0:	4956      	ldr	r1, [pc, #344]	; (800d93c <etharp_find_entry+0x2d4>)
 800d7e2:	4613      	mov	r3, r2
 800d7e4:	005b      	lsls	r3, r3, #1
 800d7e6:	4413      	add	r3, r2
 800d7e8:	00db      	lsls	r3, r3, #3
 800d7ea:	440b      	add	r3, r1
 800d7ec:	3312      	adds	r3, #18
 800d7ee:	881b      	ldrh	r3, [r3, #0]
 800d7f0:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d7f2:	8c3b      	ldrh	r3, [r7, #32]
 800d7f4:	3301      	adds	r3, #1
 800d7f6:	b29b      	uxth	r3, r3
 800d7f8:	843b      	strh	r3, [r7, #32]
 800d7fa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d7fe:	2b09      	cmp	r3, #9
 800d800:	f77f af4c 	ble.w	800d69c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800d804:	7afb      	ldrb	r3, [r7, #11]
 800d806:	f003 0302 	and.w	r3, r3, #2
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d108      	bne.n	800d820 <etharp_find_entry+0x1b8>
 800d80e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800d812:	2b0a      	cmp	r3, #10
 800d814:	d107      	bne.n	800d826 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800d816:	7afb      	ldrb	r3, [r7, #11]
 800d818:	f003 0301 	and.w	r3, r3, #1
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d102      	bne.n	800d826 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800d820:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d824:	e085      	b.n	800d932 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800d826:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800d82a:	2b09      	cmp	r3, #9
 800d82c:	dc02      	bgt.n	800d834 <etharp_find_entry+0x1cc>
    i = empty;
 800d82e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d830:	843b      	strh	r3, [r7, #32]
 800d832:	e039      	b.n	800d8a8 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800d834:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800d838:	2b09      	cmp	r3, #9
 800d83a:	dc14      	bgt.n	800d866 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800d83c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d83e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800d840:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d844:	493d      	ldr	r1, [pc, #244]	; (800d93c <etharp_find_entry+0x2d4>)
 800d846:	4613      	mov	r3, r2
 800d848:	005b      	lsls	r3, r3, #1
 800d84a:	4413      	add	r3, r2
 800d84c:	00db      	lsls	r3, r3, #3
 800d84e:	440b      	add	r3, r1
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	2b00      	cmp	r3, #0
 800d854:	d018      	beq.n	800d888 <etharp_find_entry+0x220>
 800d856:	4b3a      	ldr	r3, [pc, #232]	; (800d940 <etharp_find_entry+0x2d8>)
 800d858:	f240 126d 	movw	r2, #365	; 0x16d
 800d85c:	493b      	ldr	r1, [pc, #236]	; (800d94c <etharp_find_entry+0x2e4>)
 800d85e:	483a      	ldr	r0, [pc, #232]	; (800d948 <etharp_find_entry+0x2e0>)
 800d860:	f00d fc4e 	bl	801b100 <iprintf>
 800d864:	e010      	b.n	800d888 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800d866:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800d86a:	2b09      	cmp	r3, #9
 800d86c:	dc02      	bgt.n	800d874 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800d86e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d870:	843b      	strh	r3, [r7, #32]
 800d872:	e009      	b.n	800d888 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800d874:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800d878:	2b09      	cmp	r3, #9
 800d87a:	dc02      	bgt.n	800d882 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800d87c:	8bfb      	ldrh	r3, [r7, #30]
 800d87e:	843b      	strh	r3, [r7, #32]
 800d880:	e002      	b.n	800d888 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800d882:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d886:	e054      	b.n	800d932 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800d888:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d88c:	2b09      	cmp	r3, #9
 800d88e:	dd06      	ble.n	800d89e <etharp_find_entry+0x236>
 800d890:	4b2b      	ldr	r3, [pc, #172]	; (800d940 <etharp_find_entry+0x2d8>)
 800d892:	f240 127f 	movw	r2, #383	; 0x17f
 800d896:	492e      	ldr	r1, [pc, #184]	; (800d950 <etharp_find_entry+0x2e8>)
 800d898:	482b      	ldr	r0, [pc, #172]	; (800d948 <etharp_find_entry+0x2e0>)
 800d89a:	f00d fc31 	bl	801b100 <iprintf>
    etharp_free_entry(i);
 800d89e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d8a2:	4618      	mov	r0, r3
 800d8a4:	f7ff fe06 	bl	800d4b4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800d8a8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d8ac:	2b09      	cmp	r3, #9
 800d8ae:	dd06      	ble.n	800d8be <etharp_find_entry+0x256>
 800d8b0:	4b23      	ldr	r3, [pc, #140]	; (800d940 <etharp_find_entry+0x2d8>)
 800d8b2:	f240 1283 	movw	r2, #387	; 0x183
 800d8b6:	4926      	ldr	r1, [pc, #152]	; (800d950 <etharp_find_entry+0x2e8>)
 800d8b8:	4823      	ldr	r0, [pc, #140]	; (800d948 <etharp_find_entry+0x2e0>)
 800d8ba:	f00d fc21 	bl	801b100 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800d8be:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d8c2:	491e      	ldr	r1, [pc, #120]	; (800d93c <etharp_find_entry+0x2d4>)
 800d8c4:	4613      	mov	r3, r2
 800d8c6:	005b      	lsls	r3, r3, #1
 800d8c8:	4413      	add	r3, r2
 800d8ca:	00db      	lsls	r3, r3, #3
 800d8cc:	440b      	add	r3, r1
 800d8ce:	3314      	adds	r3, #20
 800d8d0:	781b      	ldrb	r3, [r3, #0]
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d006      	beq.n	800d8e4 <etharp_find_entry+0x27c>
 800d8d6:	4b1a      	ldr	r3, [pc, #104]	; (800d940 <etharp_find_entry+0x2d8>)
 800d8d8:	f240 1285 	movw	r2, #389	; 0x185
 800d8dc:	491d      	ldr	r1, [pc, #116]	; (800d954 <etharp_find_entry+0x2ec>)
 800d8de:	481a      	ldr	r0, [pc, #104]	; (800d948 <etharp_find_entry+0x2e0>)
 800d8e0:	f00d fc0e 	bl	801b100 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d00b      	beq.n	800d902 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800d8ea:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	6819      	ldr	r1, [r3, #0]
 800d8f2:	4812      	ldr	r0, [pc, #72]	; (800d93c <etharp_find_entry+0x2d4>)
 800d8f4:	4613      	mov	r3, r2
 800d8f6:	005b      	lsls	r3, r3, #1
 800d8f8:	4413      	add	r3, r2
 800d8fa:	00db      	lsls	r3, r3, #3
 800d8fc:	4403      	add	r3, r0
 800d8fe:	3304      	adds	r3, #4
 800d900:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800d902:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d906:	490d      	ldr	r1, [pc, #52]	; (800d93c <etharp_find_entry+0x2d4>)
 800d908:	4613      	mov	r3, r2
 800d90a:	005b      	lsls	r3, r3, #1
 800d90c:	4413      	add	r3, r2
 800d90e:	00db      	lsls	r3, r3, #3
 800d910:	440b      	add	r3, r1
 800d912:	3312      	adds	r3, #18
 800d914:	2200      	movs	r2, #0
 800d916:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800d918:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d91c:	4907      	ldr	r1, [pc, #28]	; (800d93c <etharp_find_entry+0x2d4>)
 800d91e:	4613      	mov	r3, r2
 800d920:	005b      	lsls	r3, r3, #1
 800d922:	4413      	add	r3, r2
 800d924:	00db      	lsls	r3, r3, #3
 800d926:	440b      	add	r3, r1
 800d928:	3308      	adds	r3, #8
 800d92a:	687a      	ldr	r2, [r7, #4]
 800d92c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800d92e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800d932:	4618      	mov	r0, r3
 800d934:	3728      	adds	r7, #40	; 0x28
 800d936:	46bd      	mov	sp, r7
 800d938:	bd80      	pop	{r7, pc}
 800d93a:	bf00      	nop
 800d93c:	240047d4 	.word	0x240047d4
 800d940:	0801d390 	.word	0x0801d390
 800d944:	0801d3e4 	.word	0x0801d3e4
 800d948:	0801d424 	.word	0x0801d424
 800d94c:	0801d44c 	.word	0x0801d44c
 800d950:	0801d464 	.word	0x0801d464
 800d954:	0801d478 	.word	0x0801d478

0800d958 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800d958:	b580      	push	{r7, lr}
 800d95a:	b088      	sub	sp, #32
 800d95c:	af02      	add	r7, sp, #8
 800d95e:	60f8      	str	r0, [r7, #12]
 800d960:	60b9      	str	r1, [r7, #8]
 800d962:	607a      	str	r2, [r7, #4]
 800d964:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d96c:	2b06      	cmp	r3, #6
 800d96e:	d006      	beq.n	800d97e <etharp_update_arp_entry+0x26>
 800d970:	4b48      	ldr	r3, [pc, #288]	; (800da94 <etharp_update_arp_entry+0x13c>)
 800d972:	f240 12a9 	movw	r2, #425	; 0x1a9
 800d976:	4948      	ldr	r1, [pc, #288]	; (800da98 <etharp_update_arp_entry+0x140>)
 800d978:	4848      	ldr	r0, [pc, #288]	; (800da9c <etharp_update_arp_entry+0x144>)
 800d97a:	f00d fbc1 	bl	801b100 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800d97e:	68bb      	ldr	r3, [r7, #8]
 800d980:	2b00      	cmp	r3, #0
 800d982:	d012      	beq.n	800d9aa <etharp_update_arp_entry+0x52>
 800d984:	68bb      	ldr	r3, [r7, #8]
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d00e      	beq.n	800d9aa <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800d98c:	68bb      	ldr	r3, [r7, #8]
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	68f9      	ldr	r1, [r7, #12]
 800d992:	4618      	mov	r0, r3
 800d994:	f001 facc 	bl	800ef30 <ip4_addr_isbroadcast_u32>
 800d998:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d105      	bne.n	800d9aa <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800d99e:	68bb      	ldr	r3, [r7, #8]
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800d9a6:	2be0      	cmp	r3, #224	; 0xe0
 800d9a8:	d102      	bne.n	800d9b0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800d9aa:	f06f 030f 	mvn.w	r3, #15
 800d9ae:	e06c      	b.n	800da8a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800d9b0:	78fb      	ldrb	r3, [r7, #3]
 800d9b2:	68fa      	ldr	r2, [r7, #12]
 800d9b4:	4619      	mov	r1, r3
 800d9b6:	68b8      	ldr	r0, [r7, #8]
 800d9b8:	f7ff fe56 	bl	800d668 <etharp_find_entry>
 800d9bc:	4603      	mov	r3, r0
 800d9be:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800d9c0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	da02      	bge.n	800d9ce <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800d9c8:	8afb      	ldrh	r3, [r7, #22]
 800d9ca:	b25b      	sxtb	r3, r3
 800d9cc:	e05d      	b.n	800da8a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800d9ce:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d9d2:	4933      	ldr	r1, [pc, #204]	; (800daa0 <etharp_update_arp_entry+0x148>)
 800d9d4:	4613      	mov	r3, r2
 800d9d6:	005b      	lsls	r3, r3, #1
 800d9d8:	4413      	add	r3, r2
 800d9da:	00db      	lsls	r3, r3, #3
 800d9dc:	440b      	add	r3, r1
 800d9de:	3314      	adds	r3, #20
 800d9e0:	2202      	movs	r2, #2
 800d9e2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800d9e4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d9e8:	492d      	ldr	r1, [pc, #180]	; (800daa0 <etharp_update_arp_entry+0x148>)
 800d9ea:	4613      	mov	r3, r2
 800d9ec:	005b      	lsls	r3, r3, #1
 800d9ee:	4413      	add	r3, r2
 800d9f0:	00db      	lsls	r3, r3, #3
 800d9f2:	440b      	add	r3, r1
 800d9f4:	3308      	adds	r3, #8
 800d9f6:	68fa      	ldr	r2, [r7, #12]
 800d9f8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800d9fa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d9fe:	4613      	mov	r3, r2
 800da00:	005b      	lsls	r3, r3, #1
 800da02:	4413      	add	r3, r2
 800da04:	00db      	lsls	r3, r3, #3
 800da06:	3308      	adds	r3, #8
 800da08:	4a25      	ldr	r2, [pc, #148]	; (800daa0 <etharp_update_arp_entry+0x148>)
 800da0a:	4413      	add	r3, r2
 800da0c:	3304      	adds	r3, #4
 800da0e:	2206      	movs	r2, #6
 800da10:	6879      	ldr	r1, [r7, #4]
 800da12:	4618      	mov	r0, r3
 800da14:	f00c ff0f 	bl	801a836 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800da18:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800da1c:	4920      	ldr	r1, [pc, #128]	; (800daa0 <etharp_update_arp_entry+0x148>)
 800da1e:	4613      	mov	r3, r2
 800da20:	005b      	lsls	r3, r3, #1
 800da22:	4413      	add	r3, r2
 800da24:	00db      	lsls	r3, r3, #3
 800da26:	440b      	add	r3, r1
 800da28:	3312      	adds	r3, #18
 800da2a:	2200      	movs	r2, #0
 800da2c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800da2e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800da32:	491b      	ldr	r1, [pc, #108]	; (800daa0 <etharp_update_arp_entry+0x148>)
 800da34:	4613      	mov	r3, r2
 800da36:	005b      	lsls	r3, r3, #1
 800da38:	4413      	add	r3, r2
 800da3a:	00db      	lsls	r3, r3, #3
 800da3c:	440b      	add	r3, r1
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	2b00      	cmp	r3, #0
 800da42:	d021      	beq.n	800da88 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800da44:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800da48:	4915      	ldr	r1, [pc, #84]	; (800daa0 <etharp_update_arp_entry+0x148>)
 800da4a:	4613      	mov	r3, r2
 800da4c:	005b      	lsls	r3, r3, #1
 800da4e:	4413      	add	r3, r2
 800da50:	00db      	lsls	r3, r3, #3
 800da52:	440b      	add	r3, r1
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800da58:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800da5c:	4910      	ldr	r1, [pc, #64]	; (800daa0 <etharp_update_arp_entry+0x148>)
 800da5e:	4613      	mov	r3, r2
 800da60:	005b      	lsls	r3, r3, #1
 800da62:	4413      	add	r3, r2
 800da64:	00db      	lsls	r3, r3, #3
 800da66:	440b      	add	r3, r1
 800da68:	2200      	movs	r2, #0
 800da6a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800da72:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800da76:	9300      	str	r3, [sp, #0]
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	6939      	ldr	r1, [r7, #16]
 800da7c:	68f8      	ldr	r0, [r7, #12]
 800da7e:	f000 fcf3 	bl	800e468 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800da82:	6938      	ldr	r0, [r7, #16]
 800da84:	f003 fc7e 	bl	8011384 <pbuf_free>
  }
  return ERR_OK;
 800da88:	2300      	movs	r3, #0
}
 800da8a:	4618      	mov	r0, r3
 800da8c:	3718      	adds	r7, #24
 800da8e:	46bd      	mov	sp, r7
 800da90:	bd80      	pop	{r7, pc}
 800da92:	bf00      	nop
 800da94:	0801d390 	.word	0x0801d390
 800da98:	0801d4a4 	.word	0x0801d4a4
 800da9c:	0801d424 	.word	0x0801d424
 800daa0:	240047d4 	.word	0x240047d4

0800daa4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800daa4:	b580      	push	{r7, lr}
 800daa6:	b084      	sub	sp, #16
 800daa8:	af00      	add	r7, sp, #0
 800daaa:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800daac:	2300      	movs	r3, #0
 800daae:	60fb      	str	r3, [r7, #12]
 800dab0:	e01e      	b.n	800daf0 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800dab2:	4913      	ldr	r1, [pc, #76]	; (800db00 <etharp_cleanup_netif+0x5c>)
 800dab4:	68fa      	ldr	r2, [r7, #12]
 800dab6:	4613      	mov	r3, r2
 800dab8:	005b      	lsls	r3, r3, #1
 800daba:	4413      	add	r3, r2
 800dabc:	00db      	lsls	r3, r3, #3
 800dabe:	440b      	add	r3, r1
 800dac0:	3314      	adds	r3, #20
 800dac2:	781b      	ldrb	r3, [r3, #0]
 800dac4:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800dac6:	7afb      	ldrb	r3, [r7, #11]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d00e      	beq.n	800daea <etharp_cleanup_netif+0x46>
 800dacc:	490c      	ldr	r1, [pc, #48]	; (800db00 <etharp_cleanup_netif+0x5c>)
 800dace:	68fa      	ldr	r2, [r7, #12]
 800dad0:	4613      	mov	r3, r2
 800dad2:	005b      	lsls	r3, r3, #1
 800dad4:	4413      	add	r3, r2
 800dad6:	00db      	lsls	r3, r3, #3
 800dad8:	440b      	add	r3, r1
 800dada:	3308      	adds	r3, #8
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	687a      	ldr	r2, [r7, #4]
 800dae0:	429a      	cmp	r2, r3
 800dae2:	d102      	bne.n	800daea <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800dae4:	68f8      	ldr	r0, [r7, #12]
 800dae6:	f7ff fce5 	bl	800d4b4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	3301      	adds	r3, #1
 800daee:	60fb      	str	r3, [r7, #12]
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	2b09      	cmp	r3, #9
 800daf4:	dddd      	ble.n	800dab2 <etharp_cleanup_netif+0xe>
    }
  }
}
 800daf6:	bf00      	nop
 800daf8:	3710      	adds	r7, #16
 800dafa:	46bd      	mov	sp, r7
 800dafc:	bd80      	pop	{r7, pc}
 800dafe:	bf00      	nop
 800db00:	240047d4 	.word	0x240047d4

0800db04 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800db04:	b5b0      	push	{r4, r5, r7, lr}
 800db06:	b08a      	sub	sp, #40	; 0x28
 800db08:	af04      	add	r7, sp, #16
 800db0a:	6078      	str	r0, [r7, #4]
 800db0c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800db0e:	683b      	ldr	r3, [r7, #0]
 800db10:	2b00      	cmp	r3, #0
 800db12:	d107      	bne.n	800db24 <etharp_input+0x20>
 800db14:	4b3d      	ldr	r3, [pc, #244]	; (800dc0c <etharp_input+0x108>)
 800db16:	f240 228a 	movw	r2, #650	; 0x28a
 800db1a:	493d      	ldr	r1, [pc, #244]	; (800dc10 <etharp_input+0x10c>)
 800db1c:	483d      	ldr	r0, [pc, #244]	; (800dc14 <etharp_input+0x110>)
 800db1e:	f00d faef 	bl	801b100 <iprintf>
 800db22:	e06f      	b.n	800dc04 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	685b      	ldr	r3, [r3, #4]
 800db28:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800db2a:	693b      	ldr	r3, [r7, #16]
 800db2c:	881b      	ldrh	r3, [r3, #0]
 800db2e:	b29b      	uxth	r3, r3
 800db30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800db34:	d10c      	bne.n	800db50 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800db36:	693b      	ldr	r3, [r7, #16]
 800db38:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800db3a:	2b06      	cmp	r3, #6
 800db3c:	d108      	bne.n	800db50 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800db3e:	693b      	ldr	r3, [r7, #16]
 800db40:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800db42:	2b04      	cmp	r3, #4
 800db44:	d104      	bne.n	800db50 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800db46:	693b      	ldr	r3, [r7, #16]
 800db48:	885b      	ldrh	r3, [r3, #2]
 800db4a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800db4c:	2b08      	cmp	r3, #8
 800db4e:	d003      	beq.n	800db58 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800db50:	6878      	ldr	r0, [r7, #4]
 800db52:	f003 fc17 	bl	8011384 <pbuf_free>
    return;
 800db56:	e055      	b.n	800dc04 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800db58:	693b      	ldr	r3, [r7, #16]
 800db5a:	330e      	adds	r3, #14
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800db60:	693b      	ldr	r3, [r7, #16]
 800db62:	3318      	adds	r3, #24
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800db68:	683b      	ldr	r3, [r7, #0]
 800db6a:	3304      	adds	r3, #4
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d102      	bne.n	800db78 <etharp_input+0x74>
    for_us = 0;
 800db72:	2300      	movs	r3, #0
 800db74:	75fb      	strb	r3, [r7, #23]
 800db76:	e009      	b.n	800db8c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800db78:	68ba      	ldr	r2, [r7, #8]
 800db7a:	683b      	ldr	r3, [r7, #0]
 800db7c:	3304      	adds	r3, #4
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	429a      	cmp	r2, r3
 800db82:	bf0c      	ite	eq
 800db84:	2301      	moveq	r3, #1
 800db86:	2300      	movne	r3, #0
 800db88:	b2db      	uxtb	r3, r3
 800db8a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800db8c:	693b      	ldr	r3, [r7, #16]
 800db8e:	f103 0208 	add.w	r2, r3, #8
 800db92:	7dfb      	ldrb	r3, [r7, #23]
 800db94:	2b00      	cmp	r3, #0
 800db96:	d001      	beq.n	800db9c <etharp_input+0x98>
 800db98:	2301      	movs	r3, #1
 800db9a:	e000      	b.n	800db9e <etharp_input+0x9a>
 800db9c:	2302      	movs	r3, #2
 800db9e:	f107 010c 	add.w	r1, r7, #12
 800dba2:	6838      	ldr	r0, [r7, #0]
 800dba4:	f7ff fed8 	bl	800d958 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800dba8:	693b      	ldr	r3, [r7, #16]
 800dbaa:	88db      	ldrh	r3, [r3, #6]
 800dbac:	b29b      	uxth	r3, r3
 800dbae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dbb2:	d003      	beq.n	800dbbc <etharp_input+0xb8>
 800dbb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dbb8:	d01e      	beq.n	800dbf8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800dbba:	e020      	b.n	800dbfe <etharp_input+0xfa>
      if (for_us) {
 800dbbc:	7dfb      	ldrb	r3, [r7, #23]
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d01c      	beq.n	800dbfc <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800dbc2:	683b      	ldr	r3, [r7, #0]
 800dbc4:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800dbc8:	693b      	ldr	r3, [r7, #16]
 800dbca:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800dbce:	683b      	ldr	r3, [r7, #0]
 800dbd0:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800dbd4:	683b      	ldr	r3, [r7, #0]
 800dbd6:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800dbd8:	693a      	ldr	r2, [r7, #16]
 800dbda:	3208      	adds	r2, #8
        etharp_raw(netif,
 800dbdc:	2102      	movs	r1, #2
 800dbde:	9103      	str	r1, [sp, #12]
 800dbe0:	f107 010c 	add.w	r1, r7, #12
 800dbe4:	9102      	str	r1, [sp, #8]
 800dbe6:	9201      	str	r2, [sp, #4]
 800dbe8:	9300      	str	r3, [sp, #0]
 800dbea:	462b      	mov	r3, r5
 800dbec:	4622      	mov	r2, r4
 800dbee:	4601      	mov	r1, r0
 800dbf0:	6838      	ldr	r0, [r7, #0]
 800dbf2:	f000 faeb 	bl	800e1cc <etharp_raw>
      break;
 800dbf6:	e001      	b.n	800dbfc <etharp_input+0xf8>
      break;
 800dbf8:	bf00      	nop
 800dbfa:	e000      	b.n	800dbfe <etharp_input+0xfa>
      break;
 800dbfc:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800dbfe:	6878      	ldr	r0, [r7, #4]
 800dc00:	f003 fbc0 	bl	8011384 <pbuf_free>
}
 800dc04:	3718      	adds	r7, #24
 800dc06:	46bd      	mov	sp, r7
 800dc08:	bdb0      	pop	{r4, r5, r7, pc}
 800dc0a:	bf00      	nop
 800dc0c:	0801d390 	.word	0x0801d390
 800dc10:	0801d4fc 	.word	0x0801d4fc
 800dc14:	0801d424 	.word	0x0801d424

0800dc18 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800dc18:	b580      	push	{r7, lr}
 800dc1a:	b086      	sub	sp, #24
 800dc1c:	af02      	add	r7, sp, #8
 800dc1e:	60f8      	str	r0, [r7, #12]
 800dc20:	60b9      	str	r1, [r7, #8]
 800dc22:	4613      	mov	r3, r2
 800dc24:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800dc26:	79fa      	ldrb	r2, [r7, #7]
 800dc28:	4944      	ldr	r1, [pc, #272]	; (800dd3c <etharp_output_to_arp_index+0x124>)
 800dc2a:	4613      	mov	r3, r2
 800dc2c:	005b      	lsls	r3, r3, #1
 800dc2e:	4413      	add	r3, r2
 800dc30:	00db      	lsls	r3, r3, #3
 800dc32:	440b      	add	r3, r1
 800dc34:	3314      	adds	r3, #20
 800dc36:	781b      	ldrb	r3, [r3, #0]
 800dc38:	2b01      	cmp	r3, #1
 800dc3a:	d806      	bhi.n	800dc4a <etharp_output_to_arp_index+0x32>
 800dc3c:	4b40      	ldr	r3, [pc, #256]	; (800dd40 <etharp_output_to_arp_index+0x128>)
 800dc3e:	f240 22ef 	movw	r2, #751	; 0x2ef
 800dc42:	4940      	ldr	r1, [pc, #256]	; (800dd44 <etharp_output_to_arp_index+0x12c>)
 800dc44:	4840      	ldr	r0, [pc, #256]	; (800dd48 <etharp_output_to_arp_index+0x130>)
 800dc46:	f00d fa5b 	bl	801b100 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800dc4a:	79fa      	ldrb	r2, [r7, #7]
 800dc4c:	493b      	ldr	r1, [pc, #236]	; (800dd3c <etharp_output_to_arp_index+0x124>)
 800dc4e:	4613      	mov	r3, r2
 800dc50:	005b      	lsls	r3, r3, #1
 800dc52:	4413      	add	r3, r2
 800dc54:	00db      	lsls	r3, r3, #3
 800dc56:	440b      	add	r3, r1
 800dc58:	3314      	adds	r3, #20
 800dc5a:	781b      	ldrb	r3, [r3, #0]
 800dc5c:	2b02      	cmp	r3, #2
 800dc5e:	d153      	bne.n	800dd08 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800dc60:	79fa      	ldrb	r2, [r7, #7]
 800dc62:	4936      	ldr	r1, [pc, #216]	; (800dd3c <etharp_output_to_arp_index+0x124>)
 800dc64:	4613      	mov	r3, r2
 800dc66:	005b      	lsls	r3, r3, #1
 800dc68:	4413      	add	r3, r2
 800dc6a:	00db      	lsls	r3, r3, #3
 800dc6c:	440b      	add	r3, r1
 800dc6e:	3312      	adds	r3, #18
 800dc70:	881b      	ldrh	r3, [r3, #0]
 800dc72:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800dc76:	d919      	bls.n	800dcac <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800dc78:	79fa      	ldrb	r2, [r7, #7]
 800dc7a:	4613      	mov	r3, r2
 800dc7c:	005b      	lsls	r3, r3, #1
 800dc7e:	4413      	add	r3, r2
 800dc80:	00db      	lsls	r3, r3, #3
 800dc82:	4a2e      	ldr	r2, [pc, #184]	; (800dd3c <etharp_output_to_arp_index+0x124>)
 800dc84:	4413      	add	r3, r2
 800dc86:	3304      	adds	r3, #4
 800dc88:	4619      	mov	r1, r3
 800dc8a:	68f8      	ldr	r0, [r7, #12]
 800dc8c:	f000 fb4c 	bl	800e328 <etharp_request>
 800dc90:	4603      	mov	r3, r0
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d138      	bne.n	800dd08 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800dc96:	79fa      	ldrb	r2, [r7, #7]
 800dc98:	4928      	ldr	r1, [pc, #160]	; (800dd3c <etharp_output_to_arp_index+0x124>)
 800dc9a:	4613      	mov	r3, r2
 800dc9c:	005b      	lsls	r3, r3, #1
 800dc9e:	4413      	add	r3, r2
 800dca0:	00db      	lsls	r3, r3, #3
 800dca2:	440b      	add	r3, r1
 800dca4:	3314      	adds	r3, #20
 800dca6:	2203      	movs	r2, #3
 800dca8:	701a      	strb	r2, [r3, #0]
 800dcaa:	e02d      	b.n	800dd08 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800dcac:	79fa      	ldrb	r2, [r7, #7]
 800dcae:	4923      	ldr	r1, [pc, #140]	; (800dd3c <etharp_output_to_arp_index+0x124>)
 800dcb0:	4613      	mov	r3, r2
 800dcb2:	005b      	lsls	r3, r3, #1
 800dcb4:	4413      	add	r3, r2
 800dcb6:	00db      	lsls	r3, r3, #3
 800dcb8:	440b      	add	r3, r1
 800dcba:	3312      	adds	r3, #18
 800dcbc:	881b      	ldrh	r3, [r3, #0]
 800dcbe:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800dcc2:	d321      	bcc.n	800dd08 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800dcc4:	79fa      	ldrb	r2, [r7, #7]
 800dcc6:	4613      	mov	r3, r2
 800dcc8:	005b      	lsls	r3, r3, #1
 800dcca:	4413      	add	r3, r2
 800dccc:	00db      	lsls	r3, r3, #3
 800dcce:	4a1b      	ldr	r2, [pc, #108]	; (800dd3c <etharp_output_to_arp_index+0x124>)
 800dcd0:	4413      	add	r3, r2
 800dcd2:	1d19      	adds	r1, r3, #4
 800dcd4:	79fa      	ldrb	r2, [r7, #7]
 800dcd6:	4613      	mov	r3, r2
 800dcd8:	005b      	lsls	r3, r3, #1
 800dcda:	4413      	add	r3, r2
 800dcdc:	00db      	lsls	r3, r3, #3
 800dcde:	3308      	adds	r3, #8
 800dce0:	4a16      	ldr	r2, [pc, #88]	; (800dd3c <etharp_output_to_arp_index+0x124>)
 800dce2:	4413      	add	r3, r2
 800dce4:	3304      	adds	r3, #4
 800dce6:	461a      	mov	r2, r3
 800dce8:	68f8      	ldr	r0, [r7, #12]
 800dcea:	f000 fafb 	bl	800e2e4 <etharp_request_dst>
 800dcee:	4603      	mov	r3, r0
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d109      	bne.n	800dd08 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800dcf4:	79fa      	ldrb	r2, [r7, #7]
 800dcf6:	4911      	ldr	r1, [pc, #68]	; (800dd3c <etharp_output_to_arp_index+0x124>)
 800dcf8:	4613      	mov	r3, r2
 800dcfa:	005b      	lsls	r3, r3, #1
 800dcfc:	4413      	add	r3, r2
 800dcfe:	00db      	lsls	r3, r3, #3
 800dd00:	440b      	add	r3, r1
 800dd02:	3314      	adds	r3, #20
 800dd04:	2203      	movs	r2, #3
 800dd06:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800dd0e:	79fa      	ldrb	r2, [r7, #7]
 800dd10:	4613      	mov	r3, r2
 800dd12:	005b      	lsls	r3, r3, #1
 800dd14:	4413      	add	r3, r2
 800dd16:	00db      	lsls	r3, r3, #3
 800dd18:	3308      	adds	r3, #8
 800dd1a:	4a08      	ldr	r2, [pc, #32]	; (800dd3c <etharp_output_to_arp_index+0x124>)
 800dd1c:	4413      	add	r3, r2
 800dd1e:	1d1a      	adds	r2, r3, #4
 800dd20:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800dd24:	9300      	str	r3, [sp, #0]
 800dd26:	4613      	mov	r3, r2
 800dd28:	460a      	mov	r2, r1
 800dd2a:	68b9      	ldr	r1, [r7, #8]
 800dd2c:	68f8      	ldr	r0, [r7, #12]
 800dd2e:	f000 fb9b 	bl	800e468 <ethernet_output>
 800dd32:	4603      	mov	r3, r0
}
 800dd34:	4618      	mov	r0, r3
 800dd36:	3710      	adds	r7, #16
 800dd38:	46bd      	mov	sp, r7
 800dd3a:	bd80      	pop	{r7, pc}
 800dd3c:	240047d4 	.word	0x240047d4
 800dd40:	0801d390 	.word	0x0801d390
 800dd44:	0801d51c 	.word	0x0801d51c
 800dd48:	0801d424 	.word	0x0801d424

0800dd4c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800dd4c:	b580      	push	{r7, lr}
 800dd4e:	b08a      	sub	sp, #40	; 0x28
 800dd50:	af02      	add	r7, sp, #8
 800dd52:	60f8      	str	r0, [r7, #12]
 800dd54:	60b9      	str	r1, [r7, #8]
 800dd56:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d106      	bne.n	800dd70 <etharp_output+0x24>
 800dd62:	4b73      	ldr	r3, [pc, #460]	; (800df30 <etharp_output+0x1e4>)
 800dd64:	f240 321e 	movw	r2, #798	; 0x31e
 800dd68:	4972      	ldr	r1, [pc, #456]	; (800df34 <etharp_output+0x1e8>)
 800dd6a:	4873      	ldr	r0, [pc, #460]	; (800df38 <etharp_output+0x1ec>)
 800dd6c:	f00d f9c8 	bl	801b100 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800dd70:	68bb      	ldr	r3, [r7, #8]
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d106      	bne.n	800dd84 <etharp_output+0x38>
 800dd76:	4b6e      	ldr	r3, [pc, #440]	; (800df30 <etharp_output+0x1e4>)
 800dd78:	f240 321f 	movw	r2, #799	; 0x31f
 800dd7c:	496f      	ldr	r1, [pc, #444]	; (800df3c <etharp_output+0x1f0>)
 800dd7e:	486e      	ldr	r0, [pc, #440]	; (800df38 <etharp_output+0x1ec>)
 800dd80:	f00d f9be 	bl	801b100 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d106      	bne.n	800dd98 <etharp_output+0x4c>
 800dd8a:	4b69      	ldr	r3, [pc, #420]	; (800df30 <etharp_output+0x1e4>)
 800dd8c:	f44f 7248 	mov.w	r2, #800	; 0x320
 800dd90:	496b      	ldr	r1, [pc, #428]	; (800df40 <etharp_output+0x1f4>)
 800dd92:	4869      	ldr	r0, [pc, #420]	; (800df38 <etharp_output+0x1ec>)
 800dd94:	f00d f9b4 	bl	801b100 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	68f9      	ldr	r1, [r7, #12]
 800dd9e:	4618      	mov	r0, r3
 800dda0:	f001 f8c6 	bl	800ef30 <ip4_addr_isbroadcast_u32>
 800dda4:	4603      	mov	r3, r0
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d002      	beq.n	800ddb0 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800ddaa:	4b66      	ldr	r3, [pc, #408]	; (800df44 <etharp_output+0x1f8>)
 800ddac:	61fb      	str	r3, [r7, #28]
 800ddae:	e0af      	b.n	800df10 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ddb8:	2be0      	cmp	r3, #224	; 0xe0
 800ddba:	d118      	bne.n	800ddee <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800ddbc:	2301      	movs	r3, #1
 800ddbe:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800ddc0:	2300      	movs	r3, #0
 800ddc2:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800ddc4:	235e      	movs	r3, #94	; 0x5e
 800ddc6:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	3301      	adds	r3, #1
 800ddcc:	781b      	ldrb	r3, [r3, #0]
 800ddce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ddd2:	b2db      	uxtb	r3, r3
 800ddd4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	3302      	adds	r3, #2
 800ddda:	781b      	ldrb	r3, [r3, #0]
 800dddc:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	3303      	adds	r3, #3
 800dde2:	781b      	ldrb	r3, [r3, #0]
 800dde4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800dde6:	f107 0310 	add.w	r3, r7, #16
 800ddea:	61fb      	str	r3, [r7, #28]
 800ddec:	e090      	b.n	800df10 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	681a      	ldr	r2, [r3, #0]
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	3304      	adds	r3, #4
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	405a      	eors	r2, r3
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	3308      	adds	r3, #8
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	4013      	ands	r3, r2
 800de02:	2b00      	cmp	r3, #0
 800de04:	d012      	beq.n	800de2c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800de0c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800de10:	4293      	cmp	r3, r2
 800de12:	d00b      	beq.n	800de2c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	330c      	adds	r3, #12
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d003      	beq.n	800de26 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	330c      	adds	r3, #12
 800de22:	61bb      	str	r3, [r7, #24]
 800de24:	e002      	b.n	800de2c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800de26:	f06f 0303 	mvn.w	r3, #3
 800de2a:	e07d      	b.n	800df28 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800de2c:	4b46      	ldr	r3, [pc, #280]	; (800df48 <etharp_output+0x1fc>)
 800de2e:	781b      	ldrb	r3, [r3, #0]
 800de30:	4619      	mov	r1, r3
 800de32:	4a46      	ldr	r2, [pc, #280]	; (800df4c <etharp_output+0x200>)
 800de34:	460b      	mov	r3, r1
 800de36:	005b      	lsls	r3, r3, #1
 800de38:	440b      	add	r3, r1
 800de3a:	00db      	lsls	r3, r3, #3
 800de3c:	4413      	add	r3, r2
 800de3e:	3314      	adds	r3, #20
 800de40:	781b      	ldrb	r3, [r3, #0]
 800de42:	2b01      	cmp	r3, #1
 800de44:	d925      	bls.n	800de92 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800de46:	4b40      	ldr	r3, [pc, #256]	; (800df48 <etharp_output+0x1fc>)
 800de48:	781b      	ldrb	r3, [r3, #0]
 800de4a:	4619      	mov	r1, r3
 800de4c:	4a3f      	ldr	r2, [pc, #252]	; (800df4c <etharp_output+0x200>)
 800de4e:	460b      	mov	r3, r1
 800de50:	005b      	lsls	r3, r3, #1
 800de52:	440b      	add	r3, r1
 800de54:	00db      	lsls	r3, r3, #3
 800de56:	4413      	add	r3, r2
 800de58:	3308      	adds	r3, #8
 800de5a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800de5c:	68fa      	ldr	r2, [r7, #12]
 800de5e:	429a      	cmp	r2, r3
 800de60:	d117      	bne.n	800de92 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800de62:	69bb      	ldr	r3, [r7, #24]
 800de64:	681a      	ldr	r2, [r3, #0]
 800de66:	4b38      	ldr	r3, [pc, #224]	; (800df48 <etharp_output+0x1fc>)
 800de68:	781b      	ldrb	r3, [r3, #0]
 800de6a:	4618      	mov	r0, r3
 800de6c:	4937      	ldr	r1, [pc, #220]	; (800df4c <etharp_output+0x200>)
 800de6e:	4603      	mov	r3, r0
 800de70:	005b      	lsls	r3, r3, #1
 800de72:	4403      	add	r3, r0
 800de74:	00db      	lsls	r3, r3, #3
 800de76:	440b      	add	r3, r1
 800de78:	3304      	adds	r3, #4
 800de7a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800de7c:	429a      	cmp	r2, r3
 800de7e:	d108      	bne.n	800de92 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800de80:	4b31      	ldr	r3, [pc, #196]	; (800df48 <etharp_output+0x1fc>)
 800de82:	781b      	ldrb	r3, [r3, #0]
 800de84:	461a      	mov	r2, r3
 800de86:	68b9      	ldr	r1, [r7, #8]
 800de88:	68f8      	ldr	r0, [r7, #12]
 800de8a:	f7ff fec5 	bl	800dc18 <etharp_output_to_arp_index>
 800de8e:	4603      	mov	r3, r0
 800de90:	e04a      	b.n	800df28 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800de92:	2300      	movs	r3, #0
 800de94:	75fb      	strb	r3, [r7, #23]
 800de96:	e031      	b.n	800defc <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800de98:	7dfa      	ldrb	r2, [r7, #23]
 800de9a:	492c      	ldr	r1, [pc, #176]	; (800df4c <etharp_output+0x200>)
 800de9c:	4613      	mov	r3, r2
 800de9e:	005b      	lsls	r3, r3, #1
 800dea0:	4413      	add	r3, r2
 800dea2:	00db      	lsls	r3, r3, #3
 800dea4:	440b      	add	r3, r1
 800dea6:	3314      	adds	r3, #20
 800dea8:	781b      	ldrb	r3, [r3, #0]
 800deaa:	2b01      	cmp	r3, #1
 800deac:	d923      	bls.n	800def6 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800deae:	7dfa      	ldrb	r2, [r7, #23]
 800deb0:	4926      	ldr	r1, [pc, #152]	; (800df4c <etharp_output+0x200>)
 800deb2:	4613      	mov	r3, r2
 800deb4:	005b      	lsls	r3, r3, #1
 800deb6:	4413      	add	r3, r2
 800deb8:	00db      	lsls	r3, r3, #3
 800deba:	440b      	add	r3, r1
 800debc:	3308      	adds	r3, #8
 800debe:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800dec0:	68fa      	ldr	r2, [r7, #12]
 800dec2:	429a      	cmp	r2, r3
 800dec4:	d117      	bne.n	800def6 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800dec6:	69bb      	ldr	r3, [r7, #24]
 800dec8:	6819      	ldr	r1, [r3, #0]
 800deca:	7dfa      	ldrb	r2, [r7, #23]
 800decc:	481f      	ldr	r0, [pc, #124]	; (800df4c <etharp_output+0x200>)
 800dece:	4613      	mov	r3, r2
 800ded0:	005b      	lsls	r3, r3, #1
 800ded2:	4413      	add	r3, r2
 800ded4:	00db      	lsls	r3, r3, #3
 800ded6:	4403      	add	r3, r0
 800ded8:	3304      	adds	r3, #4
 800deda:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800dedc:	4299      	cmp	r1, r3
 800dede:	d10a      	bne.n	800def6 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800dee0:	4a19      	ldr	r2, [pc, #100]	; (800df48 <etharp_output+0x1fc>)
 800dee2:	7dfb      	ldrb	r3, [r7, #23]
 800dee4:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800dee6:	7dfb      	ldrb	r3, [r7, #23]
 800dee8:	461a      	mov	r2, r3
 800deea:	68b9      	ldr	r1, [r7, #8]
 800deec:	68f8      	ldr	r0, [r7, #12]
 800deee:	f7ff fe93 	bl	800dc18 <etharp_output_to_arp_index>
 800def2:	4603      	mov	r3, r0
 800def4:	e018      	b.n	800df28 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800def6:	7dfb      	ldrb	r3, [r7, #23]
 800def8:	3301      	adds	r3, #1
 800defa:	75fb      	strb	r3, [r7, #23]
 800defc:	7dfb      	ldrb	r3, [r7, #23]
 800defe:	2b09      	cmp	r3, #9
 800df00:	d9ca      	bls.n	800de98 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800df02:	68ba      	ldr	r2, [r7, #8]
 800df04:	69b9      	ldr	r1, [r7, #24]
 800df06:	68f8      	ldr	r0, [r7, #12]
 800df08:	f000 f822 	bl	800df50 <etharp_query>
 800df0c:	4603      	mov	r3, r0
 800df0e:	e00b      	b.n	800df28 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800df16:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800df1a:	9300      	str	r3, [sp, #0]
 800df1c:	69fb      	ldr	r3, [r7, #28]
 800df1e:	68b9      	ldr	r1, [r7, #8]
 800df20:	68f8      	ldr	r0, [r7, #12]
 800df22:	f000 faa1 	bl	800e468 <ethernet_output>
 800df26:	4603      	mov	r3, r0
}
 800df28:	4618      	mov	r0, r3
 800df2a:	3720      	adds	r7, #32
 800df2c:	46bd      	mov	sp, r7
 800df2e:	bd80      	pop	{r7, pc}
 800df30:	0801d390 	.word	0x0801d390
 800df34:	0801d4fc 	.word	0x0801d4fc
 800df38:	0801d424 	.word	0x0801d424
 800df3c:	0801d54c 	.word	0x0801d54c
 800df40:	0801d4ec 	.word	0x0801d4ec
 800df44:	08020108 	.word	0x08020108
 800df48:	240048c4 	.word	0x240048c4
 800df4c:	240047d4 	.word	0x240047d4

0800df50 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800df50:	b580      	push	{r7, lr}
 800df52:	b08c      	sub	sp, #48	; 0x30
 800df54:	af02      	add	r7, sp, #8
 800df56:	60f8      	str	r0, [r7, #12]
 800df58:	60b9      	str	r1, [r7, #8]
 800df5a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	3326      	adds	r3, #38	; 0x26
 800df60:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800df62:	23ff      	movs	r3, #255	; 0xff
 800df64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800df68:	2300      	movs	r3, #0
 800df6a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800df6c:	68bb      	ldr	r3, [r7, #8]
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	68f9      	ldr	r1, [r7, #12]
 800df72:	4618      	mov	r0, r3
 800df74:	f000 ffdc 	bl	800ef30 <ip4_addr_isbroadcast_u32>
 800df78:	4603      	mov	r3, r0
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d10c      	bne.n	800df98 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800df7e:	68bb      	ldr	r3, [r7, #8]
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800df86:	2be0      	cmp	r3, #224	; 0xe0
 800df88:	d006      	beq.n	800df98 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800df8a:	68bb      	ldr	r3, [r7, #8]
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d003      	beq.n	800df98 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800df90:	68bb      	ldr	r3, [r7, #8]
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	2b00      	cmp	r3, #0
 800df96:	d102      	bne.n	800df9e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800df98:	f06f 030f 	mvn.w	r3, #15
 800df9c:	e102      	b.n	800e1a4 <etharp_query+0x254>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800df9e:	68fa      	ldr	r2, [r7, #12]
 800dfa0:	2101      	movs	r1, #1
 800dfa2:	68b8      	ldr	r0, [r7, #8]
 800dfa4:	f7ff fb60 	bl	800d668 <etharp_find_entry>
 800dfa8:	4603      	mov	r3, r0
 800dfaa:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800dfac:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	da02      	bge.n	800dfba <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800dfb4:	8a7b      	ldrh	r3, [r7, #18]
 800dfb6:	b25b      	sxtb	r3, r3
 800dfb8:	e0f4      	b.n	800e1a4 <etharp_query+0x254>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800dfba:	8a7b      	ldrh	r3, [r7, #18]
 800dfbc:	2b7e      	cmp	r3, #126	; 0x7e
 800dfbe:	d906      	bls.n	800dfce <etharp_query+0x7e>
 800dfc0:	4b7a      	ldr	r3, [pc, #488]	; (800e1ac <etharp_query+0x25c>)
 800dfc2:	f240 32c1 	movw	r2, #961	; 0x3c1
 800dfc6:	497a      	ldr	r1, [pc, #488]	; (800e1b0 <etharp_query+0x260>)
 800dfc8:	487a      	ldr	r0, [pc, #488]	; (800e1b4 <etharp_query+0x264>)
 800dfca:	f00d f899 	bl	801b100 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800dfce:	8a7b      	ldrh	r3, [r7, #18]
 800dfd0:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800dfd2:	7c7a      	ldrb	r2, [r7, #17]
 800dfd4:	4978      	ldr	r1, [pc, #480]	; (800e1b8 <etharp_query+0x268>)
 800dfd6:	4613      	mov	r3, r2
 800dfd8:	005b      	lsls	r3, r3, #1
 800dfda:	4413      	add	r3, r2
 800dfdc:	00db      	lsls	r3, r3, #3
 800dfde:	440b      	add	r3, r1
 800dfe0:	3314      	adds	r3, #20
 800dfe2:	781b      	ldrb	r3, [r3, #0]
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d115      	bne.n	800e014 <etharp_query+0xc4>
    is_new_entry = 1;
 800dfe8:	2301      	movs	r3, #1
 800dfea:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800dfec:	7c7a      	ldrb	r2, [r7, #17]
 800dfee:	4972      	ldr	r1, [pc, #456]	; (800e1b8 <etharp_query+0x268>)
 800dff0:	4613      	mov	r3, r2
 800dff2:	005b      	lsls	r3, r3, #1
 800dff4:	4413      	add	r3, r2
 800dff6:	00db      	lsls	r3, r3, #3
 800dff8:	440b      	add	r3, r1
 800dffa:	3314      	adds	r3, #20
 800dffc:	2201      	movs	r2, #1
 800dffe:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800e000:	7c7a      	ldrb	r2, [r7, #17]
 800e002:	496d      	ldr	r1, [pc, #436]	; (800e1b8 <etharp_query+0x268>)
 800e004:	4613      	mov	r3, r2
 800e006:	005b      	lsls	r3, r3, #1
 800e008:	4413      	add	r3, r2
 800e00a:	00db      	lsls	r3, r3, #3
 800e00c:	440b      	add	r3, r1
 800e00e:	3308      	adds	r3, #8
 800e010:	68fa      	ldr	r2, [r7, #12]
 800e012:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800e014:	7c7a      	ldrb	r2, [r7, #17]
 800e016:	4968      	ldr	r1, [pc, #416]	; (800e1b8 <etharp_query+0x268>)
 800e018:	4613      	mov	r3, r2
 800e01a:	005b      	lsls	r3, r3, #1
 800e01c:	4413      	add	r3, r2
 800e01e:	00db      	lsls	r3, r3, #3
 800e020:	440b      	add	r3, r1
 800e022:	3314      	adds	r3, #20
 800e024:	781b      	ldrb	r3, [r3, #0]
 800e026:	2b01      	cmp	r3, #1
 800e028:	d011      	beq.n	800e04e <etharp_query+0xfe>
 800e02a:	7c7a      	ldrb	r2, [r7, #17]
 800e02c:	4962      	ldr	r1, [pc, #392]	; (800e1b8 <etharp_query+0x268>)
 800e02e:	4613      	mov	r3, r2
 800e030:	005b      	lsls	r3, r3, #1
 800e032:	4413      	add	r3, r2
 800e034:	00db      	lsls	r3, r3, #3
 800e036:	440b      	add	r3, r1
 800e038:	3314      	adds	r3, #20
 800e03a:	781b      	ldrb	r3, [r3, #0]
 800e03c:	2b01      	cmp	r3, #1
 800e03e:	d806      	bhi.n	800e04e <etharp_query+0xfe>
 800e040:	4b5a      	ldr	r3, [pc, #360]	; (800e1ac <etharp_query+0x25c>)
 800e042:	f240 32cf 	movw	r2, #975	; 0x3cf
 800e046:	495d      	ldr	r1, [pc, #372]	; (800e1bc <etharp_query+0x26c>)
 800e048:	485a      	ldr	r0, [pc, #360]	; (800e1b4 <etharp_query+0x264>)
 800e04a:	f00d f859 	bl	801b100 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800e04e:	6a3b      	ldr	r3, [r7, #32]
 800e050:	2b00      	cmp	r3, #0
 800e052:	d102      	bne.n	800e05a <etharp_query+0x10a>
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	2b00      	cmp	r3, #0
 800e058:	d10c      	bne.n	800e074 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800e05a:	68b9      	ldr	r1, [r7, #8]
 800e05c:	68f8      	ldr	r0, [r7, #12]
 800e05e:	f000 f963 	bl	800e328 <etharp_request>
 800e062:	4603      	mov	r3, r0
 800e064:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d102      	bne.n	800e074 <etharp_query+0x124>
      return result;
 800e06e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e072:	e097      	b.n	800e1a4 <etharp_query+0x254>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	2b00      	cmp	r3, #0
 800e078:	d106      	bne.n	800e088 <etharp_query+0x138>
 800e07a:	4b4c      	ldr	r3, [pc, #304]	; (800e1ac <etharp_query+0x25c>)
 800e07c:	f240 32e1 	movw	r2, #993	; 0x3e1
 800e080:	494f      	ldr	r1, [pc, #316]	; (800e1c0 <etharp_query+0x270>)
 800e082:	484c      	ldr	r0, [pc, #304]	; (800e1b4 <etharp_query+0x264>)
 800e084:	f00d f83c 	bl	801b100 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800e088:	7c7a      	ldrb	r2, [r7, #17]
 800e08a:	494b      	ldr	r1, [pc, #300]	; (800e1b8 <etharp_query+0x268>)
 800e08c:	4613      	mov	r3, r2
 800e08e:	005b      	lsls	r3, r3, #1
 800e090:	4413      	add	r3, r2
 800e092:	00db      	lsls	r3, r3, #3
 800e094:	440b      	add	r3, r1
 800e096:	3314      	adds	r3, #20
 800e098:	781b      	ldrb	r3, [r3, #0]
 800e09a:	2b01      	cmp	r3, #1
 800e09c:	d918      	bls.n	800e0d0 <etharp_query+0x180>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800e09e:	4a49      	ldr	r2, [pc, #292]	; (800e1c4 <etharp_query+0x274>)
 800e0a0:	7c7b      	ldrb	r3, [r7, #17]
 800e0a2:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800e0a4:	7c7a      	ldrb	r2, [r7, #17]
 800e0a6:	4613      	mov	r3, r2
 800e0a8:	005b      	lsls	r3, r3, #1
 800e0aa:	4413      	add	r3, r2
 800e0ac:	00db      	lsls	r3, r3, #3
 800e0ae:	3308      	adds	r3, #8
 800e0b0:	4a41      	ldr	r2, [pc, #260]	; (800e1b8 <etharp_query+0x268>)
 800e0b2:	4413      	add	r3, r2
 800e0b4:	1d1a      	adds	r2, r3, #4
 800e0b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e0ba:	9300      	str	r3, [sp, #0]
 800e0bc:	4613      	mov	r3, r2
 800e0be:	697a      	ldr	r2, [r7, #20]
 800e0c0:	6879      	ldr	r1, [r7, #4]
 800e0c2:	68f8      	ldr	r0, [r7, #12]
 800e0c4:	f000 f9d0 	bl	800e468 <ethernet_output>
 800e0c8:	4603      	mov	r3, r0
 800e0ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e0ce:	e067      	b.n	800e1a0 <etharp_query+0x250>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800e0d0:	7c7a      	ldrb	r2, [r7, #17]
 800e0d2:	4939      	ldr	r1, [pc, #228]	; (800e1b8 <etharp_query+0x268>)
 800e0d4:	4613      	mov	r3, r2
 800e0d6:	005b      	lsls	r3, r3, #1
 800e0d8:	4413      	add	r3, r2
 800e0da:	00db      	lsls	r3, r3, #3
 800e0dc:	440b      	add	r3, r1
 800e0de:	3314      	adds	r3, #20
 800e0e0:	781b      	ldrb	r3, [r3, #0]
 800e0e2:	2b01      	cmp	r3, #1
 800e0e4:	d15c      	bne.n	800e1a0 <etharp_query+0x250>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800e0e6:	2300      	movs	r3, #0
 800e0e8:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	61fb      	str	r3, [r7, #28]
    while (p) {
 800e0ee:	e01c      	b.n	800e12a <etharp_query+0x1da>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800e0f0:	69fb      	ldr	r3, [r7, #28]
 800e0f2:	895a      	ldrh	r2, [r3, #10]
 800e0f4:	69fb      	ldr	r3, [r7, #28]
 800e0f6:	891b      	ldrh	r3, [r3, #8]
 800e0f8:	429a      	cmp	r2, r3
 800e0fa:	d10a      	bne.n	800e112 <etharp_query+0x1c2>
 800e0fc:	69fb      	ldr	r3, [r7, #28]
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	2b00      	cmp	r3, #0
 800e102:	d006      	beq.n	800e112 <etharp_query+0x1c2>
 800e104:	4b29      	ldr	r3, [pc, #164]	; (800e1ac <etharp_query+0x25c>)
 800e106:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800e10a:	492f      	ldr	r1, [pc, #188]	; (800e1c8 <etharp_query+0x278>)
 800e10c:	4829      	ldr	r0, [pc, #164]	; (800e1b4 <etharp_query+0x264>)
 800e10e:	f00c fff7 	bl	801b100 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800e112:	69fb      	ldr	r3, [r7, #28]
 800e114:	7b1b      	ldrb	r3, [r3, #12]
 800e116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d002      	beq.n	800e124 <etharp_query+0x1d4>
        copy_needed = 1;
 800e11e:	2301      	movs	r3, #1
 800e120:	61bb      	str	r3, [r7, #24]
        break;
 800e122:	e005      	b.n	800e130 <etharp_query+0x1e0>
      }
      p = p->next;
 800e124:	69fb      	ldr	r3, [r7, #28]
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	61fb      	str	r3, [r7, #28]
    while (p) {
 800e12a:	69fb      	ldr	r3, [r7, #28]
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d1df      	bne.n	800e0f0 <etharp_query+0x1a0>
    }
    if (copy_needed) {
 800e130:	69bb      	ldr	r3, [r7, #24]
 800e132:	2b00      	cmp	r3, #0
 800e134:	d007      	beq.n	800e146 <etharp_query+0x1f6>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800e136:	687a      	ldr	r2, [r7, #4]
 800e138:	f44f 7120 	mov.w	r1, #640	; 0x280
 800e13c:	200e      	movs	r0, #14
 800e13e:	f003 fb89 	bl	8011854 <pbuf_clone>
 800e142:	61f8      	str	r0, [r7, #28]
 800e144:	e004      	b.n	800e150 <etharp_query+0x200>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800e14a:	69f8      	ldr	r0, [r7, #28]
 800e14c:	f003 f9c0 	bl	80114d0 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800e150:	69fb      	ldr	r3, [r7, #28]
 800e152:	2b00      	cmp	r3, #0
 800e154:	d021      	beq.n	800e19a <etharp_query+0x24a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800e156:	7c7a      	ldrb	r2, [r7, #17]
 800e158:	4917      	ldr	r1, [pc, #92]	; (800e1b8 <etharp_query+0x268>)
 800e15a:	4613      	mov	r3, r2
 800e15c:	005b      	lsls	r3, r3, #1
 800e15e:	4413      	add	r3, r2
 800e160:	00db      	lsls	r3, r3, #3
 800e162:	440b      	add	r3, r1
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	2b00      	cmp	r3, #0
 800e168:	d00a      	beq.n	800e180 <etharp_query+0x230>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800e16a:	7c7a      	ldrb	r2, [r7, #17]
 800e16c:	4912      	ldr	r1, [pc, #72]	; (800e1b8 <etharp_query+0x268>)
 800e16e:	4613      	mov	r3, r2
 800e170:	005b      	lsls	r3, r3, #1
 800e172:	4413      	add	r3, r2
 800e174:	00db      	lsls	r3, r3, #3
 800e176:	440b      	add	r3, r1
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	4618      	mov	r0, r3
 800e17c:	f003 f902 	bl	8011384 <pbuf_free>
      }
      arp_table[i].q = p;
 800e180:	7c7a      	ldrb	r2, [r7, #17]
 800e182:	490d      	ldr	r1, [pc, #52]	; (800e1b8 <etharp_query+0x268>)
 800e184:	4613      	mov	r3, r2
 800e186:	005b      	lsls	r3, r3, #1
 800e188:	4413      	add	r3, r2
 800e18a:	00db      	lsls	r3, r3, #3
 800e18c:	440b      	add	r3, r1
 800e18e:	69fa      	ldr	r2, [r7, #28]
 800e190:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800e192:	2300      	movs	r3, #0
 800e194:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e198:	e002      	b.n	800e1a0 <etharp_query+0x250>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800e19a:	23ff      	movs	r3, #255	; 0xff
 800e19c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800e1a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800e1a4:	4618      	mov	r0, r3
 800e1a6:	3728      	adds	r7, #40	; 0x28
 800e1a8:	46bd      	mov	sp, r7
 800e1aa:	bd80      	pop	{r7, pc}
 800e1ac:	0801d390 	.word	0x0801d390
 800e1b0:	0801d558 	.word	0x0801d558
 800e1b4:	0801d424 	.word	0x0801d424
 800e1b8:	240047d4 	.word	0x240047d4
 800e1bc:	0801d568 	.word	0x0801d568
 800e1c0:	0801d54c 	.word	0x0801d54c
 800e1c4:	240048c4 	.word	0x240048c4
 800e1c8:	0801d590 	.word	0x0801d590

0800e1cc <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800e1cc:	b580      	push	{r7, lr}
 800e1ce:	b08a      	sub	sp, #40	; 0x28
 800e1d0:	af02      	add	r7, sp, #8
 800e1d2:	60f8      	str	r0, [r7, #12]
 800e1d4:	60b9      	str	r1, [r7, #8]
 800e1d6:	607a      	str	r2, [r7, #4]
 800e1d8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800e1da:	2300      	movs	r3, #0
 800e1dc:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d106      	bne.n	800e1f2 <etharp_raw+0x26>
 800e1e4:	4b3a      	ldr	r3, [pc, #232]	; (800e2d0 <etharp_raw+0x104>)
 800e1e6:	f240 4257 	movw	r2, #1111	; 0x457
 800e1ea:	493a      	ldr	r1, [pc, #232]	; (800e2d4 <etharp_raw+0x108>)
 800e1ec:	483a      	ldr	r0, [pc, #232]	; (800e2d8 <etharp_raw+0x10c>)
 800e1ee:	f00c ff87 	bl	801b100 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800e1f2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e1f6:	211c      	movs	r1, #28
 800e1f8:	200e      	movs	r0, #14
 800e1fa:	f002 fde3 	bl	8010dc4 <pbuf_alloc>
 800e1fe:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800e200:	69bb      	ldr	r3, [r7, #24]
 800e202:	2b00      	cmp	r3, #0
 800e204:	d102      	bne.n	800e20c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800e206:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e20a:	e05d      	b.n	800e2c8 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800e20c:	69bb      	ldr	r3, [r7, #24]
 800e20e:	895b      	ldrh	r3, [r3, #10]
 800e210:	2b1b      	cmp	r3, #27
 800e212:	d806      	bhi.n	800e222 <etharp_raw+0x56>
 800e214:	4b2e      	ldr	r3, [pc, #184]	; (800e2d0 <etharp_raw+0x104>)
 800e216:	f240 4263 	movw	r2, #1123	; 0x463
 800e21a:	4930      	ldr	r1, [pc, #192]	; (800e2dc <etharp_raw+0x110>)
 800e21c:	482e      	ldr	r0, [pc, #184]	; (800e2d8 <etharp_raw+0x10c>)
 800e21e:	f00c ff6f 	bl	801b100 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800e222:	69bb      	ldr	r3, [r7, #24]
 800e224:	685b      	ldr	r3, [r3, #4]
 800e226:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800e228:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800e22a:	4618      	mov	r0, r3
 800e22c:	f7ff f914 	bl	800d458 <lwip_htons>
 800e230:	4603      	mov	r3, r0
 800e232:	461a      	mov	r2, r3
 800e234:	697b      	ldr	r3, [r7, #20]
 800e236:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e23e:	2b06      	cmp	r3, #6
 800e240:	d006      	beq.n	800e250 <etharp_raw+0x84>
 800e242:	4b23      	ldr	r3, [pc, #140]	; (800e2d0 <etharp_raw+0x104>)
 800e244:	f240 426a 	movw	r2, #1130	; 0x46a
 800e248:	4925      	ldr	r1, [pc, #148]	; (800e2e0 <etharp_raw+0x114>)
 800e24a:	4823      	ldr	r0, [pc, #140]	; (800e2d8 <etharp_raw+0x10c>)
 800e24c:	f00c ff58 	bl	801b100 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800e250:	697b      	ldr	r3, [r7, #20]
 800e252:	3308      	adds	r3, #8
 800e254:	2206      	movs	r2, #6
 800e256:	6839      	ldr	r1, [r7, #0]
 800e258:	4618      	mov	r0, r3
 800e25a:	f00c faec 	bl	801a836 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800e25e:	697b      	ldr	r3, [r7, #20]
 800e260:	3312      	adds	r3, #18
 800e262:	2206      	movs	r2, #6
 800e264:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e266:	4618      	mov	r0, r3
 800e268:	f00c fae5 	bl	801a836 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800e26c:	697b      	ldr	r3, [r7, #20]
 800e26e:	330e      	adds	r3, #14
 800e270:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e272:	6812      	ldr	r2, [r2, #0]
 800e274:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800e276:	697b      	ldr	r3, [r7, #20]
 800e278:	3318      	adds	r3, #24
 800e27a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e27c:	6812      	ldr	r2, [r2, #0]
 800e27e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800e280:	697b      	ldr	r3, [r7, #20]
 800e282:	2200      	movs	r2, #0
 800e284:	701a      	strb	r2, [r3, #0]
 800e286:	2200      	movs	r2, #0
 800e288:	f042 0201 	orr.w	r2, r2, #1
 800e28c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800e28e:	697b      	ldr	r3, [r7, #20]
 800e290:	2200      	movs	r2, #0
 800e292:	f042 0208 	orr.w	r2, r2, #8
 800e296:	709a      	strb	r2, [r3, #2]
 800e298:	2200      	movs	r2, #0
 800e29a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800e29c:	697b      	ldr	r3, [r7, #20]
 800e29e:	2206      	movs	r2, #6
 800e2a0:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800e2a2:	697b      	ldr	r3, [r7, #20]
 800e2a4:	2204      	movs	r2, #4
 800e2a6:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800e2a8:	f640 0306 	movw	r3, #2054	; 0x806
 800e2ac:	9300      	str	r3, [sp, #0]
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	68ba      	ldr	r2, [r7, #8]
 800e2b2:	69b9      	ldr	r1, [r7, #24]
 800e2b4:	68f8      	ldr	r0, [r7, #12]
 800e2b6:	f000 f8d7 	bl	800e468 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800e2ba:	69b8      	ldr	r0, [r7, #24]
 800e2bc:	f003 f862 	bl	8011384 <pbuf_free>
  p = NULL;
 800e2c0:	2300      	movs	r3, #0
 800e2c2:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800e2c4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e2c8:	4618      	mov	r0, r3
 800e2ca:	3720      	adds	r7, #32
 800e2cc:	46bd      	mov	sp, r7
 800e2ce:	bd80      	pop	{r7, pc}
 800e2d0:	0801d390 	.word	0x0801d390
 800e2d4:	0801d4fc 	.word	0x0801d4fc
 800e2d8:	0801d424 	.word	0x0801d424
 800e2dc:	0801d5ac 	.word	0x0801d5ac
 800e2e0:	0801d5e0 	.word	0x0801d5e0

0800e2e4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800e2e4:	b580      	push	{r7, lr}
 800e2e6:	b088      	sub	sp, #32
 800e2e8:	af04      	add	r7, sp, #16
 800e2ea:	60f8      	str	r0, [r7, #12]
 800e2ec:	60b9      	str	r1, [r7, #8]
 800e2ee:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800e300:	2201      	movs	r2, #1
 800e302:	9203      	str	r2, [sp, #12]
 800e304:	68ba      	ldr	r2, [r7, #8]
 800e306:	9202      	str	r2, [sp, #8]
 800e308:	4a06      	ldr	r2, [pc, #24]	; (800e324 <etharp_request_dst+0x40>)
 800e30a:	9201      	str	r2, [sp, #4]
 800e30c:	9300      	str	r3, [sp, #0]
 800e30e:	4603      	mov	r3, r0
 800e310:	687a      	ldr	r2, [r7, #4]
 800e312:	68f8      	ldr	r0, [r7, #12]
 800e314:	f7ff ff5a 	bl	800e1cc <etharp_raw>
 800e318:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800e31a:	4618      	mov	r0, r3
 800e31c:	3710      	adds	r7, #16
 800e31e:	46bd      	mov	sp, r7
 800e320:	bd80      	pop	{r7, pc}
 800e322:	bf00      	nop
 800e324:	08020110 	.word	0x08020110

0800e328 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800e328:	b580      	push	{r7, lr}
 800e32a:	b082      	sub	sp, #8
 800e32c:	af00      	add	r7, sp, #0
 800e32e:	6078      	str	r0, [r7, #4]
 800e330:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800e332:	4a05      	ldr	r2, [pc, #20]	; (800e348 <etharp_request+0x20>)
 800e334:	6839      	ldr	r1, [r7, #0]
 800e336:	6878      	ldr	r0, [r7, #4]
 800e338:	f7ff ffd4 	bl	800e2e4 <etharp_request_dst>
 800e33c:	4603      	mov	r3, r0
}
 800e33e:	4618      	mov	r0, r3
 800e340:	3708      	adds	r7, #8
 800e342:	46bd      	mov	sp, r7
 800e344:	bd80      	pop	{r7, pc}
 800e346:	bf00      	nop
 800e348:	08020108 	.word	0x08020108

0800e34c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800e34c:	b580      	push	{r7, lr}
 800e34e:	b086      	sub	sp, #24
 800e350:	af00      	add	r7, sp, #0
 800e352:	6078      	str	r0, [r7, #4]
 800e354:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800e356:	230e      	movs	r3, #14
 800e358:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	895b      	ldrh	r3, [r3, #10]
 800e35e:	2b0e      	cmp	r3, #14
 800e360:	d96e      	bls.n	800e440 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	7bdb      	ldrb	r3, [r3, #15]
 800e366:	2b00      	cmp	r3, #0
 800e368:	d106      	bne.n	800e378 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800e36a:	683b      	ldr	r3, [r7, #0]
 800e36c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e370:	3301      	adds	r3, #1
 800e372:	b2da      	uxtb	r2, r3
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	685b      	ldr	r3, [r3, #4]
 800e37c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800e37e:	693b      	ldr	r3, [r7, #16]
 800e380:	7b1a      	ldrb	r2, [r3, #12]
 800e382:	7b5b      	ldrb	r3, [r3, #13]
 800e384:	021b      	lsls	r3, r3, #8
 800e386:	4313      	orrs	r3, r2
 800e388:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800e38a:	693b      	ldr	r3, [r7, #16]
 800e38c:	781b      	ldrb	r3, [r3, #0]
 800e38e:	f003 0301 	and.w	r3, r3, #1
 800e392:	2b00      	cmp	r3, #0
 800e394:	d023      	beq.n	800e3de <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800e396:	693b      	ldr	r3, [r7, #16]
 800e398:	781b      	ldrb	r3, [r3, #0]
 800e39a:	2b01      	cmp	r3, #1
 800e39c:	d10f      	bne.n	800e3be <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800e39e:	693b      	ldr	r3, [r7, #16]
 800e3a0:	785b      	ldrb	r3, [r3, #1]
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d11b      	bne.n	800e3de <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800e3a6:	693b      	ldr	r3, [r7, #16]
 800e3a8:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800e3aa:	2b5e      	cmp	r3, #94	; 0x5e
 800e3ac:	d117      	bne.n	800e3de <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	7b5b      	ldrb	r3, [r3, #13]
 800e3b2:	f043 0310 	orr.w	r3, r3, #16
 800e3b6:	b2da      	uxtb	r2, r3
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	735a      	strb	r2, [r3, #13]
 800e3bc:	e00f      	b.n	800e3de <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800e3be:	693b      	ldr	r3, [r7, #16]
 800e3c0:	2206      	movs	r2, #6
 800e3c2:	4928      	ldr	r1, [pc, #160]	; (800e464 <ethernet_input+0x118>)
 800e3c4:	4618      	mov	r0, r3
 800e3c6:	f00c fa27 	bl	801a818 <memcmp>
 800e3ca:	4603      	mov	r3, r0
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d106      	bne.n	800e3de <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	7b5b      	ldrb	r3, [r3, #13]
 800e3d4:	f043 0308 	orr.w	r3, r3, #8
 800e3d8:	b2da      	uxtb	r2, r3
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800e3de:	89fb      	ldrh	r3, [r7, #14]
 800e3e0:	2b08      	cmp	r3, #8
 800e3e2:	d003      	beq.n	800e3ec <ethernet_input+0xa0>
 800e3e4:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800e3e8:	d014      	beq.n	800e414 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800e3ea:	e032      	b.n	800e452 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800e3ec:	683b      	ldr	r3, [r7, #0]
 800e3ee:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e3f2:	f003 0308 	and.w	r3, r3, #8
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d024      	beq.n	800e444 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800e3fa:	8afb      	ldrh	r3, [r7, #22]
 800e3fc:	4619      	mov	r1, r3
 800e3fe:	6878      	ldr	r0, [r7, #4]
 800e400:	f002 ff3a 	bl	8011278 <pbuf_remove_header>
 800e404:	4603      	mov	r3, r0
 800e406:	2b00      	cmp	r3, #0
 800e408:	d11e      	bne.n	800e448 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800e40a:	6839      	ldr	r1, [r7, #0]
 800e40c:	6878      	ldr	r0, [r7, #4]
 800e40e:	f000 fb95 	bl	800eb3c <ip4_input>
      break;
 800e412:	e013      	b.n	800e43c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800e414:	683b      	ldr	r3, [r7, #0]
 800e416:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e41a:	f003 0308 	and.w	r3, r3, #8
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d014      	beq.n	800e44c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800e422:	8afb      	ldrh	r3, [r7, #22]
 800e424:	4619      	mov	r1, r3
 800e426:	6878      	ldr	r0, [r7, #4]
 800e428:	f002 ff26 	bl	8011278 <pbuf_remove_header>
 800e42c:	4603      	mov	r3, r0
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d10e      	bne.n	800e450 <ethernet_input+0x104>
        etharp_input(p, netif);
 800e432:	6839      	ldr	r1, [r7, #0]
 800e434:	6878      	ldr	r0, [r7, #4]
 800e436:	f7ff fb65 	bl	800db04 <etharp_input>
      break;
 800e43a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800e43c:	2300      	movs	r3, #0
 800e43e:	e00c      	b.n	800e45a <ethernet_input+0x10e>
    goto free_and_return;
 800e440:	bf00      	nop
 800e442:	e006      	b.n	800e452 <ethernet_input+0x106>
        goto free_and_return;
 800e444:	bf00      	nop
 800e446:	e004      	b.n	800e452 <ethernet_input+0x106>
        goto free_and_return;
 800e448:	bf00      	nop
 800e44a:	e002      	b.n	800e452 <ethernet_input+0x106>
        goto free_and_return;
 800e44c:	bf00      	nop
 800e44e:	e000      	b.n	800e452 <ethernet_input+0x106>
        goto free_and_return;
 800e450:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800e452:	6878      	ldr	r0, [r7, #4]
 800e454:	f002 ff96 	bl	8011384 <pbuf_free>
  return ERR_OK;
 800e458:	2300      	movs	r3, #0
}
 800e45a:	4618      	mov	r0, r3
 800e45c:	3718      	adds	r7, #24
 800e45e:	46bd      	mov	sp, r7
 800e460:	bd80      	pop	{r7, pc}
 800e462:	bf00      	nop
 800e464:	08020108 	.word	0x08020108

0800e468 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800e468:	b580      	push	{r7, lr}
 800e46a:	b086      	sub	sp, #24
 800e46c:	af00      	add	r7, sp, #0
 800e46e:	60f8      	str	r0, [r7, #12]
 800e470:	60b9      	str	r1, [r7, #8]
 800e472:	607a      	str	r2, [r7, #4]
 800e474:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800e476:	8c3b      	ldrh	r3, [r7, #32]
 800e478:	4618      	mov	r0, r3
 800e47a:	f7fe ffed 	bl	800d458 <lwip_htons>
 800e47e:	4603      	mov	r3, r0
 800e480:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800e482:	210e      	movs	r1, #14
 800e484:	68b8      	ldr	r0, [r7, #8]
 800e486:	f002 fee7 	bl	8011258 <pbuf_add_header>
 800e48a:	4603      	mov	r3, r0
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d125      	bne.n	800e4dc <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800e490:	68bb      	ldr	r3, [r7, #8]
 800e492:	685b      	ldr	r3, [r3, #4]
 800e494:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800e496:	693b      	ldr	r3, [r7, #16]
 800e498:	8afa      	ldrh	r2, [r7, #22]
 800e49a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800e49c:	693b      	ldr	r3, [r7, #16]
 800e49e:	2206      	movs	r2, #6
 800e4a0:	6839      	ldr	r1, [r7, #0]
 800e4a2:	4618      	mov	r0, r3
 800e4a4:	f00c f9c7 	bl	801a836 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800e4a8:	693b      	ldr	r3, [r7, #16]
 800e4aa:	3306      	adds	r3, #6
 800e4ac:	2206      	movs	r2, #6
 800e4ae:	6879      	ldr	r1, [r7, #4]
 800e4b0:	4618      	mov	r0, r3
 800e4b2:	f00c f9c0 	bl	801a836 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e4bc:	2b06      	cmp	r3, #6
 800e4be:	d006      	beq.n	800e4ce <ethernet_output+0x66>
 800e4c0:	4b0a      	ldr	r3, [pc, #40]	; (800e4ec <ethernet_output+0x84>)
 800e4c2:	f240 1233 	movw	r2, #307	; 0x133
 800e4c6:	490a      	ldr	r1, [pc, #40]	; (800e4f0 <ethernet_output+0x88>)
 800e4c8:	480a      	ldr	r0, [pc, #40]	; (800e4f4 <ethernet_output+0x8c>)
 800e4ca:	f00c fe19 	bl	801b100 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	699b      	ldr	r3, [r3, #24]
 800e4d2:	68b9      	ldr	r1, [r7, #8]
 800e4d4:	68f8      	ldr	r0, [r7, #12]
 800e4d6:	4798      	blx	r3
 800e4d8:	4603      	mov	r3, r0
 800e4da:	e002      	b.n	800e4e2 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800e4dc:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800e4de:	f06f 0301 	mvn.w	r3, #1
}
 800e4e2:	4618      	mov	r0, r3
 800e4e4:	3718      	adds	r7, #24
 800e4e6:	46bd      	mov	sp, r7
 800e4e8:	bd80      	pop	{r7, pc}
 800e4ea:	bf00      	nop
 800e4ec:	0801d624 	.word	0x0801d624
 800e4f0:	0801d678 	.word	0x0801d678
 800e4f4:	0801d6ac 	.word	0x0801d6ac

0800e4f8 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800e4f8:	b580      	push	{r7, lr}
 800e4fa:	b08e      	sub	sp, #56	; 0x38
 800e4fc:	af04      	add	r7, sp, #16
 800e4fe:	6078      	str	r0, [r7, #4]
 800e500:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800e502:	4b87      	ldr	r3, [pc, #540]	; (800e720 <icmp_input+0x228>)
 800e504:	689b      	ldr	r3, [r3, #8]
 800e506:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800e508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e50a:	781b      	ldrb	r3, [r3, #0]
 800e50c:	f003 030f 	and.w	r3, r3, #15
 800e510:	b2db      	uxtb	r3, r3
 800e512:	009b      	lsls	r3, r3, #2
 800e514:	b2db      	uxtb	r3, r3
 800e516:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800e518:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e51a:	2b13      	cmp	r3, #19
 800e51c:	f240 80e8 	bls.w	800e6f0 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	895b      	ldrh	r3, [r3, #10]
 800e524:	2b03      	cmp	r3, #3
 800e526:	f240 80e5 	bls.w	800e6f4 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	685b      	ldr	r3, [r3, #4]
 800e52e:	781b      	ldrb	r3, [r3, #0]
 800e530:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800e534:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800e538:	2b00      	cmp	r3, #0
 800e53a:	f000 80d2 	beq.w	800e6e2 <icmp_input+0x1ea>
 800e53e:	2b08      	cmp	r3, #8
 800e540:	f040 80d2 	bne.w	800e6e8 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800e544:	4b77      	ldr	r3, [pc, #476]	; (800e724 <icmp_input+0x22c>)
 800e546:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e548:	4b75      	ldr	r3, [pc, #468]	; (800e720 <icmp_input+0x228>)
 800e54a:	695b      	ldr	r3, [r3, #20]
 800e54c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e550:	2be0      	cmp	r3, #224	; 0xe0
 800e552:	f000 80d6 	beq.w	800e702 <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800e556:	4b72      	ldr	r3, [pc, #456]	; (800e720 <icmp_input+0x228>)
 800e558:	695a      	ldr	r2, [r3, #20]
 800e55a:	4b71      	ldr	r3, [pc, #452]	; (800e720 <icmp_input+0x228>)
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	4619      	mov	r1, r3
 800e560:	4610      	mov	r0, r2
 800e562:	f000 fce5 	bl	800ef30 <ip4_addr_isbroadcast_u32>
 800e566:	4603      	mov	r3, r0
 800e568:	2b00      	cmp	r3, #0
 800e56a:	f040 80cc 	bne.w	800e706 <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	891b      	ldrh	r3, [r3, #8]
 800e572:	2b07      	cmp	r3, #7
 800e574:	f240 80c0 	bls.w	800e6f8 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 800e578:	6878      	ldr	r0, [r7, #4]
 800e57a:	f000 f9e0 	bl	800e93e <inet_chksum_pbuf>
 800e57e:	4603      	mov	r3, r0
 800e580:	2b00      	cmp	r3, #0
 800e582:	d003      	beq.n	800e58c <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 800e584:	6878      	ldr	r0, [r7, #4]
 800e586:	f002 fefd 	bl	8011384 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 800e58a:	e0c5      	b.n	800e718 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800e58c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e58e:	330e      	adds	r3, #14
 800e590:	4619      	mov	r1, r3
 800e592:	6878      	ldr	r0, [r7, #4]
 800e594:	f002 fe60 	bl	8011258 <pbuf_add_header>
 800e598:	4603      	mov	r3, r0
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d04b      	beq.n	800e636 <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	891a      	ldrh	r2, [r3, #8]
 800e5a2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e5a4:	4413      	add	r3, r2
 800e5a6:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	891b      	ldrh	r3, [r3, #8]
 800e5ac:	8b7a      	ldrh	r2, [r7, #26]
 800e5ae:	429a      	cmp	r2, r3
 800e5b0:	f0c0 80ab 	bcc.w	800e70a <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800e5b4:	8b7b      	ldrh	r3, [r7, #26]
 800e5b6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e5ba:	4619      	mov	r1, r3
 800e5bc:	200e      	movs	r0, #14
 800e5be:	f002 fc01 	bl	8010dc4 <pbuf_alloc>
 800e5c2:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800e5c4:	697b      	ldr	r3, [r7, #20]
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	f000 80a1 	beq.w	800e70e <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800e5cc:	697b      	ldr	r3, [r7, #20]
 800e5ce:	895b      	ldrh	r3, [r3, #10]
 800e5d0:	461a      	mov	r2, r3
 800e5d2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e5d4:	3308      	adds	r3, #8
 800e5d6:	429a      	cmp	r2, r3
 800e5d8:	d203      	bcs.n	800e5e2 <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800e5da:	6978      	ldr	r0, [r7, #20]
 800e5dc:	f002 fed2 	bl	8011384 <pbuf_free>
          goto icmperr;
 800e5e0:	e096      	b.n	800e710 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800e5e2:	697b      	ldr	r3, [r7, #20]
 800e5e4:	685b      	ldr	r3, [r3, #4]
 800e5e6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e5e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e5ea:	4618      	mov	r0, r3
 800e5ec:	f00c f923 	bl	801a836 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800e5f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e5f2:	4619      	mov	r1, r3
 800e5f4:	6978      	ldr	r0, [r7, #20]
 800e5f6:	f002 fe3f 	bl	8011278 <pbuf_remove_header>
 800e5fa:	4603      	mov	r3, r0
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d009      	beq.n	800e614 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800e600:	4b49      	ldr	r3, [pc, #292]	; (800e728 <icmp_input+0x230>)
 800e602:	22b6      	movs	r2, #182	; 0xb6
 800e604:	4949      	ldr	r1, [pc, #292]	; (800e72c <icmp_input+0x234>)
 800e606:	484a      	ldr	r0, [pc, #296]	; (800e730 <icmp_input+0x238>)
 800e608:	f00c fd7a 	bl	801b100 <iprintf>
          pbuf_free(r);
 800e60c:	6978      	ldr	r0, [r7, #20]
 800e60e:	f002 feb9 	bl	8011384 <pbuf_free>
          goto icmperr;
 800e612:	e07d      	b.n	800e710 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800e614:	6879      	ldr	r1, [r7, #4]
 800e616:	6978      	ldr	r0, [r7, #20]
 800e618:	f002 ffd8 	bl	80115cc <pbuf_copy>
 800e61c:	4603      	mov	r3, r0
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d003      	beq.n	800e62a <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800e622:	6978      	ldr	r0, [r7, #20]
 800e624:	f002 feae 	bl	8011384 <pbuf_free>
          goto icmperr;
 800e628:	e072      	b.n	800e710 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 800e62a:	6878      	ldr	r0, [r7, #4]
 800e62c:	f002 feaa 	bl	8011384 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800e630:	697b      	ldr	r3, [r7, #20]
 800e632:	607b      	str	r3, [r7, #4]
 800e634:	e00f      	b.n	800e656 <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800e636:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e638:	330e      	adds	r3, #14
 800e63a:	4619      	mov	r1, r3
 800e63c:	6878      	ldr	r0, [r7, #4]
 800e63e:	f002 fe1b 	bl	8011278 <pbuf_remove_header>
 800e642:	4603      	mov	r3, r0
 800e644:	2b00      	cmp	r3, #0
 800e646:	d006      	beq.n	800e656 <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800e648:	4b37      	ldr	r3, [pc, #220]	; (800e728 <icmp_input+0x230>)
 800e64a:	22c7      	movs	r2, #199	; 0xc7
 800e64c:	4939      	ldr	r1, [pc, #228]	; (800e734 <icmp_input+0x23c>)
 800e64e:	4838      	ldr	r0, [pc, #224]	; (800e730 <icmp_input+0x238>)
 800e650:	f00c fd56 	bl	801b100 <iprintf>
          goto icmperr;
 800e654:	e05c      	b.n	800e710 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	685b      	ldr	r3, [r3, #4]
 800e65a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800e65c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e65e:	4619      	mov	r1, r3
 800e660:	6878      	ldr	r0, [r7, #4]
 800e662:	f002 fdf9 	bl	8011258 <pbuf_add_header>
 800e666:	4603      	mov	r3, r0
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d13c      	bne.n	800e6e6 <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	685b      	ldr	r3, [r3, #4]
 800e670:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800e672:	69fb      	ldr	r3, [r7, #28]
 800e674:	681a      	ldr	r2, [r3, #0]
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800e67a:	4b29      	ldr	r3, [pc, #164]	; (800e720 <icmp_input+0x228>)
 800e67c:	691a      	ldr	r2, [r3, #16]
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800e682:	693b      	ldr	r3, [r7, #16]
 800e684:	2200      	movs	r2, #0
 800e686:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 800e688:	693b      	ldr	r3, [r7, #16]
 800e68a:	885b      	ldrh	r3, [r3, #2]
 800e68c:	b29b      	uxth	r3, r3
 800e68e:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800e692:	4293      	cmp	r3, r2
 800e694:	d907      	bls.n	800e6a6 <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 800e696:	693b      	ldr	r3, [r7, #16]
 800e698:	885b      	ldrh	r3, [r3, #2]
 800e69a:	b29b      	uxth	r3, r3
 800e69c:	3309      	adds	r3, #9
 800e69e:	b29a      	uxth	r2, r3
 800e6a0:	693b      	ldr	r3, [r7, #16]
 800e6a2:	805a      	strh	r2, [r3, #2]
 800e6a4:	e006      	b.n	800e6b4 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 800e6a6:	693b      	ldr	r3, [r7, #16]
 800e6a8:	885b      	ldrh	r3, [r3, #2]
 800e6aa:	b29b      	uxth	r3, r3
 800e6ac:	3308      	adds	r3, #8
 800e6ae:	b29a      	uxth	r2, r3
 800e6b0:	693b      	ldr	r3, [r7, #16]
 800e6b2:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	22ff      	movs	r2, #255	; 0xff
 800e6b8:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	2200      	movs	r2, #0
 800e6be:	729a      	strb	r2, [r3, #10]
 800e6c0:	2200      	movs	r2, #0
 800e6c2:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800e6c4:	683b      	ldr	r3, [r7, #0]
 800e6c6:	9302      	str	r3, [sp, #8]
 800e6c8:	2301      	movs	r3, #1
 800e6ca:	9301      	str	r3, [sp, #4]
 800e6cc:	2300      	movs	r3, #0
 800e6ce:	9300      	str	r3, [sp, #0]
 800e6d0:	23ff      	movs	r3, #255	; 0xff
 800e6d2:	2200      	movs	r2, #0
 800e6d4:	69f9      	ldr	r1, [r7, #28]
 800e6d6:	6878      	ldr	r0, [r7, #4]
 800e6d8:	f000 fb52 	bl	800ed80 <ip4_output_if>
 800e6dc:	4603      	mov	r3, r0
 800e6de:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800e6e0:	e001      	b.n	800e6e6 <icmp_input+0x1ee>
      break;
 800e6e2:	bf00      	nop
 800e6e4:	e000      	b.n	800e6e8 <icmp_input+0x1f0>
      break;
 800e6e6:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800e6e8:	6878      	ldr	r0, [r7, #4]
 800e6ea:	f002 fe4b 	bl	8011384 <pbuf_free>
  return;
 800e6ee:	e013      	b.n	800e718 <icmp_input+0x220>
    goto lenerr;
 800e6f0:	bf00      	nop
 800e6f2:	e002      	b.n	800e6fa <icmp_input+0x202>
    goto lenerr;
 800e6f4:	bf00      	nop
 800e6f6:	e000      	b.n	800e6fa <icmp_input+0x202>
        goto lenerr;
 800e6f8:	bf00      	nop
lenerr:
  pbuf_free(p);
 800e6fa:	6878      	ldr	r0, [r7, #4]
 800e6fc:	f002 fe42 	bl	8011384 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800e700:	e00a      	b.n	800e718 <icmp_input+0x220>
        goto icmperr;
 800e702:	bf00      	nop
 800e704:	e004      	b.n	800e710 <icmp_input+0x218>
        goto icmperr;
 800e706:	bf00      	nop
 800e708:	e002      	b.n	800e710 <icmp_input+0x218>
          goto icmperr;
 800e70a:	bf00      	nop
 800e70c:	e000      	b.n	800e710 <icmp_input+0x218>
          goto icmperr;
 800e70e:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800e710:	6878      	ldr	r0, [r7, #4]
 800e712:	f002 fe37 	bl	8011384 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800e716:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800e718:	3728      	adds	r7, #40	; 0x28
 800e71a:	46bd      	mov	sp, r7
 800e71c:	bd80      	pop	{r7, pc}
 800e71e:	bf00      	nop
 800e720:	24009da0 	.word	0x24009da0
 800e724:	24009db4 	.word	0x24009db4
 800e728:	0801d6d4 	.word	0x0801d6d4
 800e72c:	0801d728 	.word	0x0801d728
 800e730:	0801d760 	.word	0x0801d760
 800e734:	0801d788 	.word	0x0801d788

0800e738 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800e738:	b580      	push	{r7, lr}
 800e73a:	b082      	sub	sp, #8
 800e73c:	af00      	add	r7, sp, #0
 800e73e:	6078      	str	r0, [r7, #4]
 800e740:	460b      	mov	r3, r1
 800e742:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800e744:	78fb      	ldrb	r3, [r7, #3]
 800e746:	461a      	mov	r2, r3
 800e748:	2103      	movs	r1, #3
 800e74a:	6878      	ldr	r0, [r7, #4]
 800e74c:	f000 f814 	bl	800e778 <icmp_send_response>
}
 800e750:	bf00      	nop
 800e752:	3708      	adds	r7, #8
 800e754:	46bd      	mov	sp, r7
 800e756:	bd80      	pop	{r7, pc}

0800e758 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800e758:	b580      	push	{r7, lr}
 800e75a:	b082      	sub	sp, #8
 800e75c:	af00      	add	r7, sp, #0
 800e75e:	6078      	str	r0, [r7, #4]
 800e760:	460b      	mov	r3, r1
 800e762:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800e764:	78fb      	ldrb	r3, [r7, #3]
 800e766:	461a      	mov	r2, r3
 800e768:	210b      	movs	r1, #11
 800e76a:	6878      	ldr	r0, [r7, #4]
 800e76c:	f000 f804 	bl	800e778 <icmp_send_response>
}
 800e770:	bf00      	nop
 800e772:	3708      	adds	r7, #8
 800e774:	46bd      	mov	sp, r7
 800e776:	bd80      	pop	{r7, pc}

0800e778 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800e778:	b580      	push	{r7, lr}
 800e77a:	b08c      	sub	sp, #48	; 0x30
 800e77c:	af04      	add	r7, sp, #16
 800e77e:	6078      	str	r0, [r7, #4]
 800e780:	460b      	mov	r3, r1
 800e782:	70fb      	strb	r3, [r7, #3]
 800e784:	4613      	mov	r3, r2
 800e786:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800e788:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e78c:	2124      	movs	r1, #36	; 0x24
 800e78e:	2022      	movs	r0, #34	; 0x22
 800e790:	f002 fb18 	bl	8010dc4 <pbuf_alloc>
 800e794:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800e796:	69fb      	ldr	r3, [r7, #28]
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d056      	beq.n	800e84a <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800e79c:	69fb      	ldr	r3, [r7, #28]
 800e79e:	895b      	ldrh	r3, [r3, #10]
 800e7a0:	2b23      	cmp	r3, #35	; 0x23
 800e7a2:	d806      	bhi.n	800e7b2 <icmp_send_response+0x3a>
 800e7a4:	4b2b      	ldr	r3, [pc, #172]	; (800e854 <icmp_send_response+0xdc>)
 800e7a6:	f240 1269 	movw	r2, #361	; 0x169
 800e7aa:	492b      	ldr	r1, [pc, #172]	; (800e858 <icmp_send_response+0xe0>)
 800e7ac:	482b      	ldr	r0, [pc, #172]	; (800e85c <icmp_send_response+0xe4>)
 800e7ae:	f00c fca7 	bl	801b100 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	685b      	ldr	r3, [r3, #4]
 800e7b6:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800e7b8:	69fb      	ldr	r3, [r7, #28]
 800e7ba:	685b      	ldr	r3, [r3, #4]
 800e7bc:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800e7be:	697b      	ldr	r3, [r7, #20]
 800e7c0:	78fa      	ldrb	r2, [r7, #3]
 800e7c2:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800e7c4:	697b      	ldr	r3, [r7, #20]
 800e7c6:	78ba      	ldrb	r2, [r7, #2]
 800e7c8:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800e7ca:	697b      	ldr	r3, [r7, #20]
 800e7cc:	2200      	movs	r2, #0
 800e7ce:	711a      	strb	r2, [r3, #4]
 800e7d0:	2200      	movs	r2, #0
 800e7d2:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800e7d4:	697b      	ldr	r3, [r7, #20]
 800e7d6:	2200      	movs	r2, #0
 800e7d8:	719a      	strb	r2, [r3, #6]
 800e7da:	2200      	movs	r2, #0
 800e7dc:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800e7de:	69fb      	ldr	r3, [r7, #28]
 800e7e0:	685b      	ldr	r3, [r3, #4]
 800e7e2:	f103 0008 	add.w	r0, r3, #8
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	685b      	ldr	r3, [r3, #4]
 800e7ea:	221c      	movs	r2, #28
 800e7ec:	4619      	mov	r1, r3
 800e7ee:	f00c f822 	bl	801a836 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800e7f2:	69bb      	ldr	r3, [r7, #24]
 800e7f4:	68db      	ldr	r3, [r3, #12]
 800e7f6:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800e7f8:	f107 030c 	add.w	r3, r7, #12
 800e7fc:	4618      	mov	r0, r3
 800e7fe:	f000 f903 	bl	800ea08 <ip4_route>
 800e802:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800e804:	693b      	ldr	r3, [r7, #16]
 800e806:	2b00      	cmp	r3, #0
 800e808:	d01b      	beq.n	800e842 <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800e80a:	697b      	ldr	r3, [r7, #20]
 800e80c:	2200      	movs	r2, #0
 800e80e:	709a      	strb	r2, [r3, #2]
 800e810:	2200      	movs	r2, #0
 800e812:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 800e814:	69fb      	ldr	r3, [r7, #28]
 800e816:	895b      	ldrh	r3, [r3, #10]
 800e818:	4619      	mov	r1, r3
 800e81a:	6978      	ldr	r0, [r7, #20]
 800e81c:	f000 f87d 	bl	800e91a <inet_chksum>
 800e820:	4603      	mov	r3, r0
 800e822:	461a      	mov	r2, r3
 800e824:	697b      	ldr	r3, [r7, #20]
 800e826:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800e828:	f107 020c 	add.w	r2, r7, #12
 800e82c:	693b      	ldr	r3, [r7, #16]
 800e82e:	9302      	str	r3, [sp, #8]
 800e830:	2301      	movs	r3, #1
 800e832:	9301      	str	r3, [sp, #4]
 800e834:	2300      	movs	r3, #0
 800e836:	9300      	str	r3, [sp, #0]
 800e838:	23ff      	movs	r3, #255	; 0xff
 800e83a:	2100      	movs	r1, #0
 800e83c:	69f8      	ldr	r0, [r7, #28]
 800e83e:	f000 fa9f 	bl	800ed80 <ip4_output_if>
  }
  pbuf_free(q);
 800e842:	69f8      	ldr	r0, [r7, #28]
 800e844:	f002 fd9e 	bl	8011384 <pbuf_free>
 800e848:	e000      	b.n	800e84c <icmp_send_response+0xd4>
    return;
 800e84a:	bf00      	nop
}
 800e84c:	3720      	adds	r7, #32
 800e84e:	46bd      	mov	sp, r7
 800e850:	bd80      	pop	{r7, pc}
 800e852:	bf00      	nop
 800e854:	0801d6d4 	.word	0x0801d6d4
 800e858:	0801d7bc 	.word	0x0801d7bc
 800e85c:	0801d760 	.word	0x0801d760

0800e860 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800e860:	b480      	push	{r7}
 800e862:	b089      	sub	sp, #36	; 0x24
 800e864:	af00      	add	r7, sp, #0
 800e866:	6078      	str	r0, [r7, #4]
 800e868:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800e86e:	2300      	movs	r3, #0
 800e870:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800e872:	2300      	movs	r3, #0
 800e874:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800e876:	69fb      	ldr	r3, [r7, #28]
 800e878:	f003 0301 	and.w	r3, r3, #1
 800e87c:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800e87e:	693b      	ldr	r3, [r7, #16]
 800e880:	2b00      	cmp	r3, #0
 800e882:	d00d      	beq.n	800e8a0 <lwip_standard_chksum+0x40>
 800e884:	683b      	ldr	r3, [r7, #0]
 800e886:	2b00      	cmp	r3, #0
 800e888:	dd0a      	ble.n	800e8a0 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800e88a:	69fa      	ldr	r2, [r7, #28]
 800e88c:	1c53      	adds	r3, r2, #1
 800e88e:	61fb      	str	r3, [r7, #28]
 800e890:	f107 030e 	add.w	r3, r7, #14
 800e894:	3301      	adds	r3, #1
 800e896:	7812      	ldrb	r2, [r2, #0]
 800e898:	701a      	strb	r2, [r3, #0]
    len--;
 800e89a:	683b      	ldr	r3, [r7, #0]
 800e89c:	3b01      	subs	r3, #1
 800e89e:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800e8a0:	69fb      	ldr	r3, [r7, #28]
 800e8a2:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800e8a4:	e00a      	b.n	800e8bc <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800e8a6:	69bb      	ldr	r3, [r7, #24]
 800e8a8:	1c9a      	adds	r2, r3, #2
 800e8aa:	61ba      	str	r2, [r7, #24]
 800e8ac:	881b      	ldrh	r3, [r3, #0]
 800e8ae:	461a      	mov	r2, r3
 800e8b0:	697b      	ldr	r3, [r7, #20]
 800e8b2:	4413      	add	r3, r2
 800e8b4:	617b      	str	r3, [r7, #20]
    len -= 2;
 800e8b6:	683b      	ldr	r3, [r7, #0]
 800e8b8:	3b02      	subs	r3, #2
 800e8ba:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800e8bc:	683b      	ldr	r3, [r7, #0]
 800e8be:	2b01      	cmp	r3, #1
 800e8c0:	dcf1      	bgt.n	800e8a6 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800e8c2:	683b      	ldr	r3, [r7, #0]
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	dd04      	ble.n	800e8d2 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800e8c8:	f107 030e 	add.w	r3, r7, #14
 800e8cc:	69ba      	ldr	r2, [r7, #24]
 800e8ce:	7812      	ldrb	r2, [r2, #0]
 800e8d0:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800e8d2:	89fb      	ldrh	r3, [r7, #14]
 800e8d4:	461a      	mov	r2, r3
 800e8d6:	697b      	ldr	r3, [r7, #20]
 800e8d8:	4413      	add	r3, r2
 800e8da:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800e8dc:	697b      	ldr	r3, [r7, #20]
 800e8de:	0c1a      	lsrs	r2, r3, #16
 800e8e0:	697b      	ldr	r3, [r7, #20]
 800e8e2:	b29b      	uxth	r3, r3
 800e8e4:	4413      	add	r3, r2
 800e8e6:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800e8e8:	697b      	ldr	r3, [r7, #20]
 800e8ea:	0c1a      	lsrs	r2, r3, #16
 800e8ec:	697b      	ldr	r3, [r7, #20]
 800e8ee:	b29b      	uxth	r3, r3
 800e8f0:	4413      	add	r3, r2
 800e8f2:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800e8f4:	693b      	ldr	r3, [r7, #16]
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d007      	beq.n	800e90a <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800e8fa:	697b      	ldr	r3, [r7, #20]
 800e8fc:	021b      	lsls	r3, r3, #8
 800e8fe:	b29a      	uxth	r2, r3
 800e900:	697b      	ldr	r3, [r7, #20]
 800e902:	0a1b      	lsrs	r3, r3, #8
 800e904:	b2db      	uxtb	r3, r3
 800e906:	4313      	orrs	r3, r2
 800e908:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800e90a:	697b      	ldr	r3, [r7, #20]
 800e90c:	b29b      	uxth	r3, r3
}
 800e90e:	4618      	mov	r0, r3
 800e910:	3724      	adds	r7, #36	; 0x24
 800e912:	46bd      	mov	sp, r7
 800e914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e918:	4770      	bx	lr

0800e91a <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800e91a:	b580      	push	{r7, lr}
 800e91c:	b082      	sub	sp, #8
 800e91e:	af00      	add	r7, sp, #0
 800e920:	6078      	str	r0, [r7, #4]
 800e922:	460b      	mov	r3, r1
 800e924:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800e926:	887b      	ldrh	r3, [r7, #2]
 800e928:	4619      	mov	r1, r3
 800e92a:	6878      	ldr	r0, [r7, #4]
 800e92c:	f7ff ff98 	bl	800e860 <lwip_standard_chksum>
 800e930:	4603      	mov	r3, r0
 800e932:	43db      	mvns	r3, r3
 800e934:	b29b      	uxth	r3, r3
}
 800e936:	4618      	mov	r0, r3
 800e938:	3708      	adds	r7, #8
 800e93a:	46bd      	mov	sp, r7
 800e93c:	bd80      	pop	{r7, pc}

0800e93e <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800e93e:	b580      	push	{r7, lr}
 800e940:	b086      	sub	sp, #24
 800e942:	af00      	add	r7, sp, #0
 800e944:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800e946:	2300      	movs	r3, #0
 800e948:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800e94a:	2300      	movs	r3, #0
 800e94c:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	613b      	str	r3, [r7, #16]
 800e952:	e02b      	b.n	800e9ac <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800e954:	693b      	ldr	r3, [r7, #16]
 800e956:	685a      	ldr	r2, [r3, #4]
 800e958:	693b      	ldr	r3, [r7, #16]
 800e95a:	895b      	ldrh	r3, [r3, #10]
 800e95c:	4619      	mov	r1, r3
 800e95e:	4610      	mov	r0, r2
 800e960:	f7ff ff7e 	bl	800e860 <lwip_standard_chksum>
 800e964:	4603      	mov	r3, r0
 800e966:	461a      	mov	r2, r3
 800e968:	697b      	ldr	r3, [r7, #20]
 800e96a:	4413      	add	r3, r2
 800e96c:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800e96e:	697b      	ldr	r3, [r7, #20]
 800e970:	0c1a      	lsrs	r2, r3, #16
 800e972:	697b      	ldr	r3, [r7, #20]
 800e974:	b29b      	uxth	r3, r3
 800e976:	4413      	add	r3, r2
 800e978:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800e97a:	693b      	ldr	r3, [r7, #16]
 800e97c:	895b      	ldrh	r3, [r3, #10]
 800e97e:	f003 0301 	and.w	r3, r3, #1
 800e982:	b29b      	uxth	r3, r3
 800e984:	2b00      	cmp	r3, #0
 800e986:	d00e      	beq.n	800e9a6 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	bf0c      	ite	eq
 800e98e:	2301      	moveq	r3, #1
 800e990:	2300      	movne	r3, #0
 800e992:	b2db      	uxtb	r3, r3
 800e994:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 800e996:	697b      	ldr	r3, [r7, #20]
 800e998:	021b      	lsls	r3, r3, #8
 800e99a:	b29a      	uxth	r2, r3
 800e99c:	697b      	ldr	r3, [r7, #20]
 800e99e:	0a1b      	lsrs	r3, r3, #8
 800e9a0:	b2db      	uxtb	r3, r3
 800e9a2:	4313      	orrs	r3, r2
 800e9a4:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800e9a6:	693b      	ldr	r3, [r7, #16]
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	613b      	str	r3, [r7, #16]
 800e9ac:	693b      	ldr	r3, [r7, #16]
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d1d0      	bne.n	800e954 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d007      	beq.n	800e9c8 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 800e9b8:	697b      	ldr	r3, [r7, #20]
 800e9ba:	021b      	lsls	r3, r3, #8
 800e9bc:	b29a      	uxth	r2, r3
 800e9be:	697b      	ldr	r3, [r7, #20]
 800e9c0:	0a1b      	lsrs	r3, r3, #8
 800e9c2:	b2db      	uxtb	r3, r3
 800e9c4:	4313      	orrs	r3, r2
 800e9c6:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800e9c8:	697b      	ldr	r3, [r7, #20]
 800e9ca:	b29b      	uxth	r3, r3
 800e9cc:	43db      	mvns	r3, r3
 800e9ce:	b29b      	uxth	r3, r3
}
 800e9d0:	4618      	mov	r0, r3
 800e9d2:	3718      	adds	r7, #24
 800e9d4:	46bd      	mov	sp, r7
 800e9d6:	bd80      	pop	{r7, pc}

0800e9d8 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800e9d8:	b580      	push	{r7, lr}
 800e9da:	b082      	sub	sp, #8
 800e9dc:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800e9de:	2300      	movs	r3, #0
 800e9e0:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800e9e2:	f002 fff5 	bl	80119d0 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800e9e6:	f001 f9e3 	bl	800fdb0 <mem_init>
  memp_init();
 800e9ea:	f001 fd47 	bl	801047c <memp_init>
  pbuf_init();
  netif_init();
 800e9ee:	f001 fe53 	bl	8010698 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800e9f2:	f008 fce9 	bl	80173c8 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800e9f6:	f003 f875 	bl	8011ae4 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800e9fa:	f008 fc2d 	bl	8017258 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800e9fe:	bf00      	nop
 800ea00:	3708      	adds	r7, #8
 800ea02:	46bd      	mov	sp, r7
 800ea04:	bd80      	pop	{r7, pc}
	...

0800ea08 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800ea08:	b480      	push	{r7}
 800ea0a:	b085      	sub	sp, #20
 800ea0c:	af00      	add	r7, sp, #0
 800ea0e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800ea10:	4b33      	ldr	r3, [pc, #204]	; (800eae0 <ip4_route+0xd8>)
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	60fb      	str	r3, [r7, #12]
 800ea16:	e036      	b.n	800ea86 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ea1e:	f003 0301 	and.w	r3, r3, #1
 800ea22:	b2db      	uxtb	r3, r3
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d02b      	beq.n	800ea80 <ip4_route+0x78>
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ea2e:	089b      	lsrs	r3, r3, #2
 800ea30:	f003 0301 	and.w	r3, r3, #1
 800ea34:	b2db      	uxtb	r3, r3
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d022      	beq.n	800ea80 <ip4_route+0x78>
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	3304      	adds	r3, #4
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d01d      	beq.n	800ea80 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	681a      	ldr	r2, [r3, #0]
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	3304      	adds	r3, #4
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	405a      	eors	r2, r3
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	3308      	adds	r3, #8
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	4013      	ands	r3, r2
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d101      	bne.n	800ea60 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	e038      	b.n	800ead2 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ea66:	f003 0302 	and.w	r3, r3, #2
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d108      	bne.n	800ea80 <ip4_route+0x78>
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	681a      	ldr	r2, [r3, #0]
 800ea72:	68fb      	ldr	r3, [r7, #12]
 800ea74:	330c      	adds	r3, #12
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	429a      	cmp	r2, r3
 800ea7a:	d101      	bne.n	800ea80 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	e028      	b.n	800ead2 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	60fb      	str	r3, [r7, #12]
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d1c5      	bne.n	800ea18 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800ea8c:	4b15      	ldr	r3, [pc, #84]	; (800eae4 <ip4_route+0xdc>)
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d01a      	beq.n	800eaca <ip4_route+0xc2>
 800ea94:	4b13      	ldr	r3, [pc, #76]	; (800eae4 <ip4_route+0xdc>)
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ea9c:	f003 0301 	and.w	r3, r3, #1
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d012      	beq.n	800eaca <ip4_route+0xc2>
 800eaa4:	4b0f      	ldr	r3, [pc, #60]	; (800eae4 <ip4_route+0xdc>)
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800eaac:	f003 0304 	and.w	r3, r3, #4
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d00a      	beq.n	800eaca <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800eab4:	4b0b      	ldr	r3, [pc, #44]	; (800eae4 <ip4_route+0xdc>)
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	3304      	adds	r3, #4
 800eaba:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d004      	beq.n	800eaca <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	b2db      	uxtb	r3, r3
 800eac6:	2b7f      	cmp	r3, #127	; 0x7f
 800eac8:	d101      	bne.n	800eace <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800eaca:	2300      	movs	r3, #0
 800eacc:	e001      	b.n	800ead2 <ip4_route+0xca>
  }

  return netif_default;
 800eace:	4b05      	ldr	r3, [pc, #20]	; (800eae4 <ip4_route+0xdc>)
 800ead0:	681b      	ldr	r3, [r3, #0]
}
 800ead2:	4618      	mov	r0, r3
 800ead4:	3714      	adds	r7, #20
 800ead6:	46bd      	mov	sp, r7
 800ead8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eadc:	4770      	bx	lr
 800eade:	bf00      	nop
 800eae0:	2400ce50 	.word	0x2400ce50
 800eae4:	2400ce54 	.word	0x2400ce54

0800eae8 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800eae8:	b580      	push	{r7, lr}
 800eaea:	b082      	sub	sp, #8
 800eaec:	af00      	add	r7, sp, #0
 800eaee:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800eaf6:	f003 0301 	and.w	r3, r3, #1
 800eafa:	b2db      	uxtb	r3, r3
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d016      	beq.n	800eb2e <ip4_input_accept+0x46>
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	3304      	adds	r3, #4
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d011      	beq.n	800eb2e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800eb0a:	4b0b      	ldr	r3, [pc, #44]	; (800eb38 <ip4_input_accept+0x50>)
 800eb0c:	695a      	ldr	r2, [r3, #20]
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	3304      	adds	r3, #4
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	429a      	cmp	r2, r3
 800eb16:	d008      	beq.n	800eb2a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800eb18:	4b07      	ldr	r3, [pc, #28]	; (800eb38 <ip4_input_accept+0x50>)
 800eb1a:	695b      	ldr	r3, [r3, #20]
 800eb1c:	6879      	ldr	r1, [r7, #4]
 800eb1e:	4618      	mov	r0, r3
 800eb20:	f000 fa06 	bl	800ef30 <ip4_addr_isbroadcast_u32>
 800eb24:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d001      	beq.n	800eb2e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800eb2a:	2301      	movs	r3, #1
 800eb2c:	e000      	b.n	800eb30 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800eb2e:	2300      	movs	r3, #0
}
 800eb30:	4618      	mov	r0, r3
 800eb32:	3708      	adds	r7, #8
 800eb34:	46bd      	mov	sp, r7
 800eb36:	bd80      	pop	{r7, pc}
 800eb38:	24009da0 	.word	0x24009da0

0800eb3c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800eb3c:	b580      	push	{r7, lr}
 800eb3e:	b086      	sub	sp, #24
 800eb40:	af00      	add	r7, sp, #0
 800eb42:	6078      	str	r0, [r7, #4]
 800eb44:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	685b      	ldr	r3, [r3, #4]
 800eb4a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800eb4c:	697b      	ldr	r3, [r7, #20]
 800eb4e:	781b      	ldrb	r3, [r3, #0]
 800eb50:	091b      	lsrs	r3, r3, #4
 800eb52:	b2db      	uxtb	r3, r3
 800eb54:	2b04      	cmp	r3, #4
 800eb56:	d004      	beq.n	800eb62 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800eb58:	6878      	ldr	r0, [r7, #4]
 800eb5a:	f002 fc13 	bl	8011384 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800eb5e:	2300      	movs	r3, #0
 800eb60:	e105      	b.n	800ed6e <ip4_input+0x232>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800eb62:	697b      	ldr	r3, [r7, #20]
 800eb64:	781b      	ldrb	r3, [r3, #0]
 800eb66:	f003 030f 	and.w	r3, r3, #15
 800eb6a:	b2db      	uxtb	r3, r3
 800eb6c:	009b      	lsls	r3, r3, #2
 800eb6e:	b2db      	uxtb	r3, r3
 800eb70:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800eb72:	697b      	ldr	r3, [r7, #20]
 800eb74:	885b      	ldrh	r3, [r3, #2]
 800eb76:	b29b      	uxth	r3, r3
 800eb78:	4618      	mov	r0, r3
 800eb7a:	f7fe fc6d 	bl	800d458 <lwip_htons>
 800eb7e:	4603      	mov	r3, r0
 800eb80:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	891b      	ldrh	r3, [r3, #8]
 800eb86:	89ba      	ldrh	r2, [r7, #12]
 800eb88:	429a      	cmp	r2, r3
 800eb8a:	d204      	bcs.n	800eb96 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800eb8c:	89bb      	ldrh	r3, [r7, #12]
 800eb8e:	4619      	mov	r1, r3
 800eb90:	6878      	ldr	r0, [r7, #4]
 800eb92:	f002 fa71 	bl	8011078 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	895b      	ldrh	r3, [r3, #10]
 800eb9a:	89fa      	ldrh	r2, [r7, #14]
 800eb9c:	429a      	cmp	r2, r3
 800eb9e:	d807      	bhi.n	800ebb0 <ip4_input+0x74>
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	891b      	ldrh	r3, [r3, #8]
 800eba4:	89ba      	ldrh	r2, [r7, #12]
 800eba6:	429a      	cmp	r2, r3
 800eba8:	d802      	bhi.n	800ebb0 <ip4_input+0x74>
 800ebaa:	89fb      	ldrh	r3, [r7, #14]
 800ebac:	2b13      	cmp	r3, #19
 800ebae:	d804      	bhi.n	800ebba <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800ebb0:	6878      	ldr	r0, [r7, #4]
 800ebb2:	f002 fbe7 	bl	8011384 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800ebb6:	2300      	movs	r3, #0
 800ebb8:	e0d9      	b.n	800ed6e <ip4_input+0x232>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800ebba:	697b      	ldr	r3, [r7, #20]
 800ebbc:	691b      	ldr	r3, [r3, #16]
 800ebbe:	4a6e      	ldr	r2, [pc, #440]	; (800ed78 <ip4_input+0x23c>)
 800ebc0:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800ebc2:	697b      	ldr	r3, [r7, #20]
 800ebc4:	68db      	ldr	r3, [r3, #12]
 800ebc6:	4a6c      	ldr	r2, [pc, #432]	; (800ed78 <ip4_input+0x23c>)
 800ebc8:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800ebca:	4b6b      	ldr	r3, [pc, #428]	; (800ed78 <ip4_input+0x23c>)
 800ebcc:	695b      	ldr	r3, [r3, #20]
 800ebce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ebd2:	2be0      	cmp	r3, #224	; 0xe0
 800ebd4:	d112      	bne.n	800ebfc <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800ebd6:	683b      	ldr	r3, [r7, #0]
 800ebd8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ebdc:	f003 0301 	and.w	r3, r3, #1
 800ebe0:	b2db      	uxtb	r3, r3
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d007      	beq.n	800ebf6 <ip4_input+0xba>
 800ebe6:	683b      	ldr	r3, [r7, #0]
 800ebe8:	3304      	adds	r3, #4
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d002      	beq.n	800ebf6 <ip4_input+0xba>
      netif = inp;
 800ebf0:	683b      	ldr	r3, [r7, #0]
 800ebf2:	613b      	str	r3, [r7, #16]
 800ebf4:	e02a      	b.n	800ec4c <ip4_input+0x110>
    } else {
      netif = NULL;
 800ebf6:	2300      	movs	r3, #0
 800ebf8:	613b      	str	r3, [r7, #16]
 800ebfa:	e027      	b.n	800ec4c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800ebfc:	6838      	ldr	r0, [r7, #0]
 800ebfe:	f7ff ff73 	bl	800eae8 <ip4_input_accept>
 800ec02:	4603      	mov	r3, r0
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d002      	beq.n	800ec0e <ip4_input+0xd2>
      netif = inp;
 800ec08:	683b      	ldr	r3, [r7, #0]
 800ec0a:	613b      	str	r3, [r7, #16]
 800ec0c:	e01e      	b.n	800ec4c <ip4_input+0x110>
    } else {
      netif = NULL;
 800ec0e:	2300      	movs	r3, #0
 800ec10:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800ec12:	4b59      	ldr	r3, [pc, #356]	; (800ed78 <ip4_input+0x23c>)
 800ec14:	695b      	ldr	r3, [r3, #20]
 800ec16:	b2db      	uxtb	r3, r3
 800ec18:	2b7f      	cmp	r3, #127	; 0x7f
 800ec1a:	d017      	beq.n	800ec4c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800ec1c:	4b57      	ldr	r3, [pc, #348]	; (800ed7c <ip4_input+0x240>)
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	613b      	str	r3, [r7, #16]
 800ec22:	e00e      	b.n	800ec42 <ip4_input+0x106>
          if (netif == inp) {
 800ec24:	693a      	ldr	r2, [r7, #16]
 800ec26:	683b      	ldr	r3, [r7, #0]
 800ec28:	429a      	cmp	r2, r3
 800ec2a:	d006      	beq.n	800ec3a <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800ec2c:	6938      	ldr	r0, [r7, #16]
 800ec2e:	f7ff ff5b 	bl	800eae8 <ip4_input_accept>
 800ec32:	4603      	mov	r3, r0
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d108      	bne.n	800ec4a <ip4_input+0x10e>
 800ec38:	e000      	b.n	800ec3c <ip4_input+0x100>
            continue;
 800ec3a:	bf00      	nop
        NETIF_FOREACH(netif) {
 800ec3c:	693b      	ldr	r3, [r7, #16]
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	613b      	str	r3, [r7, #16]
 800ec42:	693b      	ldr	r3, [r7, #16]
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d1ed      	bne.n	800ec24 <ip4_input+0xe8>
 800ec48:	e000      	b.n	800ec4c <ip4_input+0x110>
            break;
 800ec4a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800ec4c:	4b4a      	ldr	r3, [pc, #296]	; (800ed78 <ip4_input+0x23c>)
 800ec4e:	691b      	ldr	r3, [r3, #16]
 800ec50:	6839      	ldr	r1, [r7, #0]
 800ec52:	4618      	mov	r0, r3
 800ec54:	f000 f96c 	bl	800ef30 <ip4_addr_isbroadcast_u32>
 800ec58:	4603      	mov	r3, r0
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d105      	bne.n	800ec6a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800ec5e:	4b46      	ldr	r3, [pc, #280]	; (800ed78 <ip4_input+0x23c>)
 800ec60:	691b      	ldr	r3, [r3, #16]
 800ec62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800ec66:	2be0      	cmp	r3, #224	; 0xe0
 800ec68:	d104      	bne.n	800ec74 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800ec6a:	6878      	ldr	r0, [r7, #4]
 800ec6c:	f002 fb8a 	bl	8011384 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800ec70:	2300      	movs	r3, #0
 800ec72:	e07c      	b.n	800ed6e <ip4_input+0x232>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800ec74:	693b      	ldr	r3, [r7, #16]
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d104      	bne.n	800ec84 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800ec7a:	6878      	ldr	r0, [r7, #4]
 800ec7c:	f002 fb82 	bl	8011384 <pbuf_free>
    return ERR_OK;
 800ec80:	2300      	movs	r3, #0
 800ec82:	e074      	b.n	800ed6e <ip4_input+0x232>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800ec84:	697b      	ldr	r3, [r7, #20]
 800ec86:	88db      	ldrh	r3, [r3, #6]
 800ec88:	b29b      	uxth	r3, r3
 800ec8a:	461a      	mov	r2, r3
 800ec8c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800ec90:	4013      	ands	r3, r2
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d00b      	beq.n	800ecae <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800ec96:	6878      	ldr	r0, [r7, #4]
 800ec98:	f000 fc90 	bl	800f5bc <ip4_reass>
 800ec9c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d101      	bne.n	800eca8 <ip4_input+0x16c>
      return ERR_OK;
 800eca4:	2300      	movs	r3, #0
 800eca6:	e062      	b.n	800ed6e <ip4_input+0x232>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	685b      	ldr	r3, [r3, #4]
 800ecac:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800ecae:	4a32      	ldr	r2, [pc, #200]	; (800ed78 <ip4_input+0x23c>)
 800ecb0:	693b      	ldr	r3, [r7, #16]
 800ecb2:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800ecb4:	4a30      	ldr	r2, [pc, #192]	; (800ed78 <ip4_input+0x23c>)
 800ecb6:	683b      	ldr	r3, [r7, #0]
 800ecb8:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800ecba:	4a2f      	ldr	r2, [pc, #188]	; (800ed78 <ip4_input+0x23c>)
 800ecbc:	697b      	ldr	r3, [r7, #20]
 800ecbe:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800ecc0:	697b      	ldr	r3, [r7, #20]
 800ecc2:	781b      	ldrb	r3, [r3, #0]
 800ecc4:	f003 030f 	and.w	r3, r3, #15
 800ecc8:	b2db      	uxtb	r3, r3
 800ecca:	009b      	lsls	r3, r3, #2
 800eccc:	b2db      	uxtb	r3, r3
 800ecce:	b29a      	uxth	r2, r3
 800ecd0:	4b29      	ldr	r3, [pc, #164]	; (800ed78 <ip4_input+0x23c>)
 800ecd2:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800ecd4:	89fb      	ldrh	r3, [r7, #14]
 800ecd6:	4619      	mov	r1, r3
 800ecd8:	6878      	ldr	r0, [r7, #4]
 800ecda:	f002 facd 	bl	8011278 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800ecde:	697b      	ldr	r3, [r7, #20]
 800ece0:	7a5b      	ldrb	r3, [r3, #9]
 800ece2:	2b06      	cmp	r3, #6
 800ece4:	d009      	beq.n	800ecfa <ip4_input+0x1be>
 800ece6:	2b11      	cmp	r3, #17
 800ece8:	d002      	beq.n	800ecf0 <ip4_input+0x1b4>
 800ecea:	2b01      	cmp	r3, #1
 800ecec:	d00a      	beq.n	800ed04 <ip4_input+0x1c8>
 800ecee:	e00e      	b.n	800ed0e <ip4_input+0x1d2>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800ecf0:	6839      	ldr	r1, [r7, #0]
 800ecf2:	6878      	ldr	r0, [r7, #4]
 800ecf4:	f008 fbde 	bl	80174b4 <udp_input>
        break;
 800ecf8:	e026      	b.n	800ed48 <ip4_input+0x20c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800ecfa:	6839      	ldr	r1, [r7, #0]
 800ecfc:	6878      	ldr	r0, [r7, #4]
 800ecfe:	f004 fa7f 	bl	8013200 <tcp_input>
        break;
 800ed02:	e021      	b.n	800ed48 <ip4_input+0x20c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800ed04:	6839      	ldr	r1, [r7, #0]
 800ed06:	6878      	ldr	r0, [r7, #4]
 800ed08:	f7ff fbf6 	bl	800e4f8 <icmp_input>
        break;
 800ed0c:	e01c      	b.n	800ed48 <ip4_input+0x20c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800ed0e:	4b1a      	ldr	r3, [pc, #104]	; (800ed78 <ip4_input+0x23c>)
 800ed10:	695b      	ldr	r3, [r3, #20]
 800ed12:	6939      	ldr	r1, [r7, #16]
 800ed14:	4618      	mov	r0, r3
 800ed16:	f000 f90b 	bl	800ef30 <ip4_addr_isbroadcast_u32>
 800ed1a:	4603      	mov	r3, r0
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d10f      	bne.n	800ed40 <ip4_input+0x204>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800ed20:	4b15      	ldr	r3, [pc, #84]	; (800ed78 <ip4_input+0x23c>)
 800ed22:	695b      	ldr	r3, [r3, #20]
 800ed24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800ed28:	2be0      	cmp	r3, #224	; 0xe0
 800ed2a:	d009      	beq.n	800ed40 <ip4_input+0x204>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800ed2c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800ed30:	4619      	mov	r1, r3
 800ed32:	6878      	ldr	r0, [r7, #4]
 800ed34:	f002 fb13 	bl	801135e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800ed38:	2102      	movs	r1, #2
 800ed3a:	6878      	ldr	r0, [r7, #4]
 800ed3c:	f7ff fcfc 	bl	800e738 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800ed40:	6878      	ldr	r0, [r7, #4]
 800ed42:	f002 fb1f 	bl	8011384 <pbuf_free>
        break;
 800ed46:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800ed48:	4b0b      	ldr	r3, [pc, #44]	; (800ed78 <ip4_input+0x23c>)
 800ed4a:	2200      	movs	r2, #0
 800ed4c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800ed4e:	4b0a      	ldr	r3, [pc, #40]	; (800ed78 <ip4_input+0x23c>)
 800ed50:	2200      	movs	r2, #0
 800ed52:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800ed54:	4b08      	ldr	r3, [pc, #32]	; (800ed78 <ip4_input+0x23c>)
 800ed56:	2200      	movs	r2, #0
 800ed58:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800ed5a:	4b07      	ldr	r3, [pc, #28]	; (800ed78 <ip4_input+0x23c>)
 800ed5c:	2200      	movs	r2, #0
 800ed5e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800ed60:	4b05      	ldr	r3, [pc, #20]	; (800ed78 <ip4_input+0x23c>)
 800ed62:	2200      	movs	r2, #0
 800ed64:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800ed66:	4b04      	ldr	r3, [pc, #16]	; (800ed78 <ip4_input+0x23c>)
 800ed68:	2200      	movs	r2, #0
 800ed6a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800ed6c:	2300      	movs	r3, #0
}
 800ed6e:	4618      	mov	r0, r3
 800ed70:	3718      	adds	r7, #24
 800ed72:	46bd      	mov	sp, r7
 800ed74:	bd80      	pop	{r7, pc}
 800ed76:	bf00      	nop
 800ed78:	24009da0 	.word	0x24009da0
 800ed7c:	2400ce50 	.word	0x2400ce50

0800ed80 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800ed80:	b580      	push	{r7, lr}
 800ed82:	b08a      	sub	sp, #40	; 0x28
 800ed84:	af04      	add	r7, sp, #16
 800ed86:	60f8      	str	r0, [r7, #12]
 800ed88:	60b9      	str	r1, [r7, #8]
 800ed8a:	607a      	str	r2, [r7, #4]
 800ed8c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800ed8e:	68bb      	ldr	r3, [r7, #8]
 800ed90:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d009      	beq.n	800edac <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800ed98:	68bb      	ldr	r3, [r7, #8]
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d003      	beq.n	800eda6 <ip4_output_if+0x26>
 800ed9e:	68bb      	ldr	r3, [r7, #8]
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d102      	bne.n	800edac <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800eda6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eda8:	3304      	adds	r3, #4
 800edaa:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800edac:	78fa      	ldrb	r2, [r7, #3]
 800edae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edb0:	9302      	str	r3, [sp, #8]
 800edb2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800edb6:	9301      	str	r3, [sp, #4]
 800edb8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800edbc:	9300      	str	r3, [sp, #0]
 800edbe:	4613      	mov	r3, r2
 800edc0:	687a      	ldr	r2, [r7, #4]
 800edc2:	6979      	ldr	r1, [r7, #20]
 800edc4:	68f8      	ldr	r0, [r7, #12]
 800edc6:	f000 f805 	bl	800edd4 <ip4_output_if_src>
 800edca:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800edcc:	4618      	mov	r0, r3
 800edce:	3718      	adds	r7, #24
 800edd0:	46bd      	mov	sp, r7
 800edd2:	bd80      	pop	{r7, pc}

0800edd4 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800edd4:	b580      	push	{r7, lr}
 800edd6:	b088      	sub	sp, #32
 800edd8:	af00      	add	r7, sp, #0
 800edda:	60f8      	str	r0, [r7, #12]
 800eddc:	60b9      	str	r1, [r7, #8]
 800edde:	607a      	str	r2, [r7, #4]
 800ede0:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	7b9b      	ldrb	r3, [r3, #14]
 800ede6:	2b01      	cmp	r3, #1
 800ede8:	d006      	beq.n	800edf8 <ip4_output_if_src+0x24>
 800edea:	4b4b      	ldr	r3, [pc, #300]	; (800ef18 <ip4_output_if_src+0x144>)
 800edec:	f44f 7255 	mov.w	r2, #852	; 0x354
 800edf0:	494a      	ldr	r1, [pc, #296]	; (800ef1c <ip4_output_if_src+0x148>)
 800edf2:	484b      	ldr	r0, [pc, #300]	; (800ef20 <ip4_output_if_src+0x14c>)
 800edf4:	f00c f984 	bl	801b100 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d060      	beq.n	800eec0 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800edfe:	2314      	movs	r3, #20
 800ee00:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800ee02:	2114      	movs	r1, #20
 800ee04:	68f8      	ldr	r0, [r7, #12]
 800ee06:	f002 fa27 	bl	8011258 <pbuf_add_header>
 800ee0a:	4603      	mov	r3, r0
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d002      	beq.n	800ee16 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800ee10:	f06f 0301 	mvn.w	r3, #1
 800ee14:	e07c      	b.n	800ef10 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800ee16:	68fb      	ldr	r3, [r7, #12]
 800ee18:	685b      	ldr	r3, [r3, #4]
 800ee1a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	895b      	ldrh	r3, [r3, #10]
 800ee20:	2b13      	cmp	r3, #19
 800ee22:	d806      	bhi.n	800ee32 <ip4_output_if_src+0x5e>
 800ee24:	4b3c      	ldr	r3, [pc, #240]	; (800ef18 <ip4_output_if_src+0x144>)
 800ee26:	f240 3289 	movw	r2, #905	; 0x389
 800ee2a:	493e      	ldr	r1, [pc, #248]	; (800ef24 <ip4_output_if_src+0x150>)
 800ee2c:	483c      	ldr	r0, [pc, #240]	; (800ef20 <ip4_output_if_src+0x14c>)
 800ee2e:	f00c f967 	bl	801b100 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800ee32:	69fb      	ldr	r3, [r7, #28]
 800ee34:	78fa      	ldrb	r2, [r7, #3]
 800ee36:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800ee38:	69fb      	ldr	r3, [r7, #28]
 800ee3a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800ee3e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	681a      	ldr	r2, [r3, #0]
 800ee44:	69fb      	ldr	r3, [r7, #28]
 800ee46:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800ee48:	8b7b      	ldrh	r3, [r7, #26]
 800ee4a:	089b      	lsrs	r3, r3, #2
 800ee4c:	b29b      	uxth	r3, r3
 800ee4e:	b2db      	uxtb	r3, r3
 800ee50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ee54:	b2da      	uxtb	r2, r3
 800ee56:	69fb      	ldr	r3, [r7, #28]
 800ee58:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800ee5a:	69fb      	ldr	r3, [r7, #28]
 800ee5c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800ee60:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	891b      	ldrh	r3, [r3, #8]
 800ee66:	4618      	mov	r0, r3
 800ee68:	f7fe faf6 	bl	800d458 <lwip_htons>
 800ee6c:	4603      	mov	r3, r0
 800ee6e:	461a      	mov	r2, r3
 800ee70:	69fb      	ldr	r3, [r7, #28]
 800ee72:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800ee74:	69fb      	ldr	r3, [r7, #28]
 800ee76:	2200      	movs	r2, #0
 800ee78:	719a      	strb	r2, [r3, #6]
 800ee7a:	2200      	movs	r2, #0
 800ee7c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800ee7e:	4b2a      	ldr	r3, [pc, #168]	; (800ef28 <ip4_output_if_src+0x154>)
 800ee80:	881b      	ldrh	r3, [r3, #0]
 800ee82:	4618      	mov	r0, r3
 800ee84:	f7fe fae8 	bl	800d458 <lwip_htons>
 800ee88:	4603      	mov	r3, r0
 800ee8a:	461a      	mov	r2, r3
 800ee8c:	69fb      	ldr	r3, [r7, #28]
 800ee8e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800ee90:	4b25      	ldr	r3, [pc, #148]	; (800ef28 <ip4_output_if_src+0x154>)
 800ee92:	881b      	ldrh	r3, [r3, #0]
 800ee94:	3301      	adds	r3, #1
 800ee96:	b29a      	uxth	r2, r3
 800ee98:	4b23      	ldr	r3, [pc, #140]	; (800ef28 <ip4_output_if_src+0x154>)
 800ee9a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800ee9c:	68bb      	ldr	r3, [r7, #8]
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d104      	bne.n	800eeac <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800eea2:	4b22      	ldr	r3, [pc, #136]	; (800ef2c <ip4_output_if_src+0x158>)
 800eea4:	681a      	ldr	r2, [r3, #0]
 800eea6:	69fb      	ldr	r3, [r7, #28]
 800eea8:	60da      	str	r2, [r3, #12]
 800eeaa:	e003      	b.n	800eeb4 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800eeac:	68bb      	ldr	r3, [r7, #8]
 800eeae:	681a      	ldr	r2, [r3, #0]
 800eeb0:	69fb      	ldr	r3, [r7, #28]
 800eeb2:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800eeb4:	69fb      	ldr	r3, [r7, #28]
 800eeb6:	2200      	movs	r2, #0
 800eeb8:	729a      	strb	r2, [r3, #10]
 800eeba:	2200      	movs	r2, #0
 800eebc:	72da      	strb	r2, [r3, #11]
 800eebe:	e00f      	b.n	800eee0 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800eec0:	68fb      	ldr	r3, [r7, #12]
 800eec2:	895b      	ldrh	r3, [r3, #10]
 800eec4:	2b13      	cmp	r3, #19
 800eec6:	d802      	bhi.n	800eece <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800eec8:	f06f 0301 	mvn.w	r3, #1
 800eecc:	e020      	b.n	800ef10 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	685b      	ldr	r3, [r3, #4]
 800eed2:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800eed4:	69fb      	ldr	r3, [r7, #28]
 800eed6:	691b      	ldr	r3, [r3, #16]
 800eed8:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800eeda:	f107 0314 	add.w	r3, r7, #20
 800eede:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800eee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eee2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d00c      	beq.n	800ef02 <ip4_output_if_src+0x12e>
 800eee8:	68fb      	ldr	r3, [r7, #12]
 800eeea:	891a      	ldrh	r2, [r3, #8]
 800eeec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eeee:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800eef0:	429a      	cmp	r2, r3
 800eef2:	d906      	bls.n	800ef02 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800eef4:	687a      	ldr	r2, [r7, #4]
 800eef6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800eef8:	68f8      	ldr	r0, [r7, #12]
 800eefa:	f000 fd4b 	bl	800f994 <ip4_frag>
 800eefe:	4603      	mov	r3, r0
 800ef00:	e006      	b.n	800ef10 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800ef02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef04:	695b      	ldr	r3, [r3, #20]
 800ef06:	687a      	ldr	r2, [r7, #4]
 800ef08:	68f9      	ldr	r1, [r7, #12]
 800ef0a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ef0c:	4798      	blx	r3
 800ef0e:	4603      	mov	r3, r0
}
 800ef10:	4618      	mov	r0, r3
 800ef12:	3720      	adds	r7, #32
 800ef14:	46bd      	mov	sp, r7
 800ef16:	bd80      	pop	{r7, pc}
 800ef18:	0801d7e8 	.word	0x0801d7e8
 800ef1c:	0801d83c 	.word	0x0801d83c
 800ef20:	0801d848 	.word	0x0801d848
 800ef24:	0801d870 	.word	0x0801d870
 800ef28:	240048c6 	.word	0x240048c6
 800ef2c:	08020118 	.word	0x08020118

0800ef30 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800ef30:	b480      	push	{r7}
 800ef32:	b085      	sub	sp, #20
 800ef34:	af00      	add	r7, sp, #0
 800ef36:	6078      	str	r0, [r7, #4]
 800ef38:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ef44:	d002      	beq.n	800ef4c <ip4_addr_isbroadcast_u32+0x1c>
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d101      	bne.n	800ef50 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800ef4c:	2301      	movs	r3, #1
 800ef4e:	e02a      	b.n	800efa6 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800ef50:	683b      	ldr	r3, [r7, #0]
 800ef52:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ef56:	f003 0302 	and.w	r3, r3, #2
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d101      	bne.n	800ef62 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800ef5e:	2300      	movs	r3, #0
 800ef60:	e021      	b.n	800efa6 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800ef62:	683b      	ldr	r3, [r7, #0]
 800ef64:	3304      	adds	r3, #4
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	687a      	ldr	r2, [r7, #4]
 800ef6a:	429a      	cmp	r2, r3
 800ef6c:	d101      	bne.n	800ef72 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800ef6e:	2300      	movs	r3, #0
 800ef70:	e019      	b.n	800efa6 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800ef72:	68fa      	ldr	r2, [r7, #12]
 800ef74:	683b      	ldr	r3, [r7, #0]
 800ef76:	3304      	adds	r3, #4
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	405a      	eors	r2, r3
 800ef7c:	683b      	ldr	r3, [r7, #0]
 800ef7e:	3308      	adds	r3, #8
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	4013      	ands	r3, r2
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d10d      	bne.n	800efa4 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800ef88:	683b      	ldr	r3, [r7, #0]
 800ef8a:	3308      	adds	r3, #8
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	43da      	mvns	r2, r3
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800ef94:	683b      	ldr	r3, [r7, #0]
 800ef96:	3308      	adds	r3, #8
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800ef9c:	429a      	cmp	r2, r3
 800ef9e:	d101      	bne.n	800efa4 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800efa0:	2301      	movs	r3, #1
 800efa2:	e000      	b.n	800efa6 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800efa4:	2300      	movs	r3, #0
  }
}
 800efa6:	4618      	mov	r0, r3
 800efa8:	3714      	adds	r7, #20
 800efaa:	46bd      	mov	sp, r7
 800efac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efb0:	4770      	bx	lr
	...

0800efb4 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800efb4:	b580      	push	{r7, lr}
 800efb6:	b084      	sub	sp, #16
 800efb8:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800efba:	2300      	movs	r3, #0
 800efbc:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800efbe:	4b12      	ldr	r3, [pc, #72]	; (800f008 <ip_reass_tmr+0x54>)
 800efc0:	681b      	ldr	r3, [r3, #0]
 800efc2:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800efc4:	e018      	b.n	800eff8 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	7fdb      	ldrb	r3, [r3, #31]
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d00b      	beq.n	800efe6 <ip_reass_tmr+0x32>
      r->timer--;
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	7fdb      	ldrb	r3, [r3, #31]
 800efd2:	3b01      	subs	r3, #1
 800efd4:	b2da      	uxtb	r2, r3
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	60fb      	str	r3, [r7, #12]
 800efe4:	e008      	b.n	800eff8 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800eff0:	68b9      	ldr	r1, [r7, #8]
 800eff2:	6878      	ldr	r0, [r7, #4]
 800eff4:	f000 f80a 	bl	800f00c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	2b00      	cmp	r3, #0
 800effc:	d1e3      	bne.n	800efc6 <ip_reass_tmr+0x12>
    }
  }
}
 800effe:	bf00      	nop
 800f000:	3710      	adds	r7, #16
 800f002:	46bd      	mov	sp, r7
 800f004:	bd80      	pop	{r7, pc}
 800f006:	bf00      	nop
 800f008:	240048c8 	.word	0x240048c8

0800f00c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800f00c:	b580      	push	{r7, lr}
 800f00e:	b088      	sub	sp, #32
 800f010:	af00      	add	r7, sp, #0
 800f012:	6078      	str	r0, [r7, #4]
 800f014:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800f016:	2300      	movs	r3, #0
 800f018:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800f01a:	683a      	ldr	r2, [r7, #0]
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	429a      	cmp	r2, r3
 800f020:	d105      	bne.n	800f02e <ip_reass_free_complete_datagram+0x22>
 800f022:	4b45      	ldr	r3, [pc, #276]	; (800f138 <ip_reass_free_complete_datagram+0x12c>)
 800f024:	22ab      	movs	r2, #171	; 0xab
 800f026:	4945      	ldr	r1, [pc, #276]	; (800f13c <ip_reass_free_complete_datagram+0x130>)
 800f028:	4845      	ldr	r0, [pc, #276]	; (800f140 <ip_reass_free_complete_datagram+0x134>)
 800f02a:	f00c f869 	bl	801b100 <iprintf>
  if (prev != NULL) {
 800f02e:	683b      	ldr	r3, [r7, #0]
 800f030:	2b00      	cmp	r3, #0
 800f032:	d00a      	beq.n	800f04a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800f034:	683b      	ldr	r3, [r7, #0]
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	687a      	ldr	r2, [r7, #4]
 800f03a:	429a      	cmp	r2, r3
 800f03c:	d005      	beq.n	800f04a <ip_reass_free_complete_datagram+0x3e>
 800f03e:	4b3e      	ldr	r3, [pc, #248]	; (800f138 <ip_reass_free_complete_datagram+0x12c>)
 800f040:	22ad      	movs	r2, #173	; 0xad
 800f042:	4940      	ldr	r1, [pc, #256]	; (800f144 <ip_reass_free_complete_datagram+0x138>)
 800f044:	483e      	ldr	r0, [pc, #248]	; (800f140 <ip_reass_free_complete_datagram+0x134>)
 800f046:	f00c f85b 	bl	801b100 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	685b      	ldr	r3, [r3, #4]
 800f04e:	685b      	ldr	r3, [r3, #4]
 800f050:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800f052:	697b      	ldr	r3, [r7, #20]
 800f054:	889b      	ldrh	r3, [r3, #4]
 800f056:	b29b      	uxth	r3, r3
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d12a      	bne.n	800f0b2 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	685b      	ldr	r3, [r3, #4]
 800f060:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800f062:	697b      	ldr	r3, [r7, #20]
 800f064:	681a      	ldr	r2, [r3, #0]
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800f06a:	69bb      	ldr	r3, [r7, #24]
 800f06c:	6858      	ldr	r0, [r3, #4]
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	3308      	adds	r3, #8
 800f072:	2214      	movs	r2, #20
 800f074:	4619      	mov	r1, r3
 800f076:	f00b fbde 	bl	801a836 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800f07a:	2101      	movs	r1, #1
 800f07c:	69b8      	ldr	r0, [r7, #24]
 800f07e:	f7ff fb6b 	bl	800e758 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800f082:	69b8      	ldr	r0, [r7, #24]
 800f084:	f002 fa0c 	bl	80114a0 <pbuf_clen>
 800f088:	4603      	mov	r3, r0
 800f08a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800f08c:	8bfa      	ldrh	r2, [r7, #30]
 800f08e:	8a7b      	ldrh	r3, [r7, #18]
 800f090:	4413      	add	r3, r2
 800f092:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f096:	db05      	blt.n	800f0a4 <ip_reass_free_complete_datagram+0x98>
 800f098:	4b27      	ldr	r3, [pc, #156]	; (800f138 <ip_reass_free_complete_datagram+0x12c>)
 800f09a:	22bc      	movs	r2, #188	; 0xbc
 800f09c:	492a      	ldr	r1, [pc, #168]	; (800f148 <ip_reass_free_complete_datagram+0x13c>)
 800f09e:	4828      	ldr	r0, [pc, #160]	; (800f140 <ip_reass_free_complete_datagram+0x134>)
 800f0a0:	f00c f82e 	bl	801b100 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800f0a4:	8bfa      	ldrh	r2, [r7, #30]
 800f0a6:	8a7b      	ldrh	r3, [r7, #18]
 800f0a8:	4413      	add	r3, r2
 800f0aa:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800f0ac:	69b8      	ldr	r0, [r7, #24]
 800f0ae:	f002 f969 	bl	8011384 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	685b      	ldr	r3, [r3, #4]
 800f0b6:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800f0b8:	e01f      	b.n	800f0fa <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800f0ba:	69bb      	ldr	r3, [r7, #24]
 800f0bc:	685b      	ldr	r3, [r3, #4]
 800f0be:	617b      	str	r3, [r7, #20]
    pcur = p;
 800f0c0:	69bb      	ldr	r3, [r7, #24]
 800f0c2:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800f0c4:	697b      	ldr	r3, [r7, #20]
 800f0c6:	681b      	ldr	r3, [r3, #0]
 800f0c8:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800f0ca:	68f8      	ldr	r0, [r7, #12]
 800f0cc:	f002 f9e8 	bl	80114a0 <pbuf_clen>
 800f0d0:	4603      	mov	r3, r0
 800f0d2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800f0d4:	8bfa      	ldrh	r2, [r7, #30]
 800f0d6:	8a7b      	ldrh	r3, [r7, #18]
 800f0d8:	4413      	add	r3, r2
 800f0da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f0de:	db05      	blt.n	800f0ec <ip_reass_free_complete_datagram+0xe0>
 800f0e0:	4b15      	ldr	r3, [pc, #84]	; (800f138 <ip_reass_free_complete_datagram+0x12c>)
 800f0e2:	22cc      	movs	r2, #204	; 0xcc
 800f0e4:	4918      	ldr	r1, [pc, #96]	; (800f148 <ip_reass_free_complete_datagram+0x13c>)
 800f0e6:	4816      	ldr	r0, [pc, #88]	; (800f140 <ip_reass_free_complete_datagram+0x134>)
 800f0e8:	f00c f80a 	bl	801b100 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800f0ec:	8bfa      	ldrh	r2, [r7, #30]
 800f0ee:	8a7b      	ldrh	r3, [r7, #18]
 800f0f0:	4413      	add	r3, r2
 800f0f2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800f0f4:	68f8      	ldr	r0, [r7, #12]
 800f0f6:	f002 f945 	bl	8011384 <pbuf_free>
  while (p != NULL) {
 800f0fa:	69bb      	ldr	r3, [r7, #24]
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d1dc      	bne.n	800f0ba <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800f100:	6839      	ldr	r1, [r7, #0]
 800f102:	6878      	ldr	r0, [r7, #4]
 800f104:	f000 f8c2 	bl	800f28c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800f108:	4b10      	ldr	r3, [pc, #64]	; (800f14c <ip_reass_free_complete_datagram+0x140>)
 800f10a:	881b      	ldrh	r3, [r3, #0]
 800f10c:	8bfa      	ldrh	r2, [r7, #30]
 800f10e:	429a      	cmp	r2, r3
 800f110:	d905      	bls.n	800f11e <ip_reass_free_complete_datagram+0x112>
 800f112:	4b09      	ldr	r3, [pc, #36]	; (800f138 <ip_reass_free_complete_datagram+0x12c>)
 800f114:	22d2      	movs	r2, #210	; 0xd2
 800f116:	490e      	ldr	r1, [pc, #56]	; (800f150 <ip_reass_free_complete_datagram+0x144>)
 800f118:	4809      	ldr	r0, [pc, #36]	; (800f140 <ip_reass_free_complete_datagram+0x134>)
 800f11a:	f00b fff1 	bl	801b100 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800f11e:	4b0b      	ldr	r3, [pc, #44]	; (800f14c <ip_reass_free_complete_datagram+0x140>)
 800f120:	881a      	ldrh	r2, [r3, #0]
 800f122:	8bfb      	ldrh	r3, [r7, #30]
 800f124:	1ad3      	subs	r3, r2, r3
 800f126:	b29a      	uxth	r2, r3
 800f128:	4b08      	ldr	r3, [pc, #32]	; (800f14c <ip_reass_free_complete_datagram+0x140>)
 800f12a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800f12c:	8bfb      	ldrh	r3, [r7, #30]
}
 800f12e:	4618      	mov	r0, r3
 800f130:	3720      	adds	r7, #32
 800f132:	46bd      	mov	sp, r7
 800f134:	bd80      	pop	{r7, pc}
 800f136:	bf00      	nop
 800f138:	0801d8a0 	.word	0x0801d8a0
 800f13c:	0801d8f8 	.word	0x0801d8f8
 800f140:	0801d904 	.word	0x0801d904
 800f144:	0801d92c 	.word	0x0801d92c
 800f148:	0801d940 	.word	0x0801d940
 800f14c:	240048cc 	.word	0x240048cc
 800f150:	0801d960 	.word	0x0801d960

0800f154 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800f154:	b580      	push	{r7, lr}
 800f156:	b08a      	sub	sp, #40	; 0x28
 800f158:	af00      	add	r7, sp, #0
 800f15a:	6078      	str	r0, [r7, #4]
 800f15c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800f15e:	2300      	movs	r3, #0
 800f160:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800f162:	2300      	movs	r3, #0
 800f164:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800f166:	2300      	movs	r3, #0
 800f168:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800f16a:	2300      	movs	r3, #0
 800f16c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800f16e:	2300      	movs	r3, #0
 800f170:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800f172:	4b28      	ldr	r3, [pc, #160]	; (800f214 <ip_reass_remove_oldest_datagram+0xc0>)
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800f178:	e030      	b.n	800f1dc <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800f17a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f17c:	695a      	ldr	r2, [r3, #20]
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	68db      	ldr	r3, [r3, #12]
 800f182:	429a      	cmp	r2, r3
 800f184:	d10c      	bne.n	800f1a0 <ip_reass_remove_oldest_datagram+0x4c>
 800f186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f188:	699a      	ldr	r2, [r3, #24]
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	691b      	ldr	r3, [r3, #16]
 800f18e:	429a      	cmp	r2, r3
 800f190:	d106      	bne.n	800f1a0 <ip_reass_remove_oldest_datagram+0x4c>
 800f192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f194:	899a      	ldrh	r2, [r3, #12]
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	889b      	ldrh	r3, [r3, #4]
 800f19a:	b29b      	uxth	r3, r3
 800f19c:	429a      	cmp	r2, r3
 800f19e:	d014      	beq.n	800f1ca <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800f1a0:	693b      	ldr	r3, [r7, #16]
 800f1a2:	3301      	adds	r3, #1
 800f1a4:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800f1a6:	6a3b      	ldr	r3, [r7, #32]
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d104      	bne.n	800f1b6 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800f1ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1ae:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800f1b0:	69fb      	ldr	r3, [r7, #28]
 800f1b2:	61bb      	str	r3, [r7, #24]
 800f1b4:	e009      	b.n	800f1ca <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800f1b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1b8:	7fda      	ldrb	r2, [r3, #31]
 800f1ba:	6a3b      	ldr	r3, [r7, #32]
 800f1bc:	7fdb      	ldrb	r3, [r3, #31]
 800f1be:	429a      	cmp	r2, r3
 800f1c0:	d803      	bhi.n	800f1ca <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800f1c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1c4:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800f1c6:	69fb      	ldr	r3, [r7, #28]
 800f1c8:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800f1ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1cc:	681b      	ldr	r3, [r3, #0]
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d001      	beq.n	800f1d6 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800f1d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1d4:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800f1d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1d8:	681b      	ldr	r3, [r3, #0]
 800f1da:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800f1dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d1cb      	bne.n	800f17a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800f1e2:	6a3b      	ldr	r3, [r7, #32]
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d008      	beq.n	800f1fa <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800f1e8:	69b9      	ldr	r1, [r7, #24]
 800f1ea:	6a38      	ldr	r0, [r7, #32]
 800f1ec:	f7ff ff0e 	bl	800f00c <ip_reass_free_complete_datagram>
 800f1f0:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800f1f2:	697a      	ldr	r2, [r7, #20]
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	4413      	add	r3, r2
 800f1f8:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800f1fa:	697a      	ldr	r2, [r7, #20]
 800f1fc:	683b      	ldr	r3, [r7, #0]
 800f1fe:	429a      	cmp	r2, r3
 800f200:	da02      	bge.n	800f208 <ip_reass_remove_oldest_datagram+0xb4>
 800f202:	693b      	ldr	r3, [r7, #16]
 800f204:	2b01      	cmp	r3, #1
 800f206:	dcac      	bgt.n	800f162 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800f208:	697b      	ldr	r3, [r7, #20]
}
 800f20a:	4618      	mov	r0, r3
 800f20c:	3728      	adds	r7, #40	; 0x28
 800f20e:	46bd      	mov	sp, r7
 800f210:	bd80      	pop	{r7, pc}
 800f212:	bf00      	nop
 800f214:	240048c8 	.word	0x240048c8

0800f218 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800f218:	b580      	push	{r7, lr}
 800f21a:	b084      	sub	sp, #16
 800f21c:	af00      	add	r7, sp, #0
 800f21e:	6078      	str	r0, [r7, #4]
 800f220:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800f222:	2004      	movs	r0, #4
 800f224:	f001 f998 	bl	8010558 <memp_malloc>
 800f228:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d110      	bne.n	800f252 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800f230:	6839      	ldr	r1, [r7, #0]
 800f232:	6878      	ldr	r0, [r7, #4]
 800f234:	f7ff ff8e 	bl	800f154 <ip_reass_remove_oldest_datagram>
 800f238:	4602      	mov	r2, r0
 800f23a:	683b      	ldr	r3, [r7, #0]
 800f23c:	4293      	cmp	r3, r2
 800f23e:	dc03      	bgt.n	800f248 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800f240:	2004      	movs	r0, #4
 800f242:	f001 f989 	bl	8010558 <memp_malloc>
 800f246:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d101      	bne.n	800f252 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800f24e:	2300      	movs	r3, #0
 800f250:	e016      	b.n	800f280 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800f252:	2220      	movs	r2, #32
 800f254:	2100      	movs	r1, #0
 800f256:	68f8      	ldr	r0, [r7, #12]
 800f258:	f00b fb11 	bl	801a87e <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800f25c:	68fb      	ldr	r3, [r7, #12]
 800f25e:	220f      	movs	r2, #15
 800f260:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800f262:	4b09      	ldr	r3, [pc, #36]	; (800f288 <ip_reass_enqueue_new_datagram+0x70>)
 800f264:	681a      	ldr	r2, [r3, #0]
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800f26a:	4a07      	ldr	r2, [pc, #28]	; (800f288 <ip_reass_enqueue_new_datagram+0x70>)
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	3308      	adds	r3, #8
 800f274:	2214      	movs	r2, #20
 800f276:	6879      	ldr	r1, [r7, #4]
 800f278:	4618      	mov	r0, r3
 800f27a:	f00b fadc 	bl	801a836 <memcpy>
  return ipr;
 800f27e:	68fb      	ldr	r3, [r7, #12]
}
 800f280:	4618      	mov	r0, r3
 800f282:	3710      	adds	r7, #16
 800f284:	46bd      	mov	sp, r7
 800f286:	bd80      	pop	{r7, pc}
 800f288:	240048c8 	.word	0x240048c8

0800f28c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800f28c:	b580      	push	{r7, lr}
 800f28e:	b082      	sub	sp, #8
 800f290:	af00      	add	r7, sp, #0
 800f292:	6078      	str	r0, [r7, #4]
 800f294:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800f296:	4b10      	ldr	r3, [pc, #64]	; (800f2d8 <ip_reass_dequeue_datagram+0x4c>)
 800f298:	681b      	ldr	r3, [r3, #0]
 800f29a:	687a      	ldr	r2, [r7, #4]
 800f29c:	429a      	cmp	r2, r3
 800f29e:	d104      	bne.n	800f2aa <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	4a0c      	ldr	r2, [pc, #48]	; (800f2d8 <ip_reass_dequeue_datagram+0x4c>)
 800f2a6:	6013      	str	r3, [r2, #0]
 800f2a8:	e00d      	b.n	800f2c6 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800f2aa:	683b      	ldr	r3, [r7, #0]
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d106      	bne.n	800f2be <ip_reass_dequeue_datagram+0x32>
 800f2b0:	4b0a      	ldr	r3, [pc, #40]	; (800f2dc <ip_reass_dequeue_datagram+0x50>)
 800f2b2:	f240 1245 	movw	r2, #325	; 0x145
 800f2b6:	490a      	ldr	r1, [pc, #40]	; (800f2e0 <ip_reass_dequeue_datagram+0x54>)
 800f2b8:	480a      	ldr	r0, [pc, #40]	; (800f2e4 <ip_reass_dequeue_datagram+0x58>)
 800f2ba:	f00b ff21 	bl	801b100 <iprintf>
    prev->next = ipr->next;
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	681a      	ldr	r2, [r3, #0]
 800f2c2:	683b      	ldr	r3, [r7, #0]
 800f2c4:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800f2c6:	6879      	ldr	r1, [r7, #4]
 800f2c8:	2004      	movs	r0, #4
 800f2ca:	f001 f9bb 	bl	8010644 <memp_free>
}
 800f2ce:	bf00      	nop
 800f2d0:	3708      	adds	r7, #8
 800f2d2:	46bd      	mov	sp, r7
 800f2d4:	bd80      	pop	{r7, pc}
 800f2d6:	bf00      	nop
 800f2d8:	240048c8 	.word	0x240048c8
 800f2dc:	0801d8a0 	.word	0x0801d8a0
 800f2e0:	0801d984 	.word	0x0801d984
 800f2e4:	0801d904 	.word	0x0801d904

0800f2e8 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800f2e8:	b580      	push	{r7, lr}
 800f2ea:	b08c      	sub	sp, #48	; 0x30
 800f2ec:	af00      	add	r7, sp, #0
 800f2ee:	60f8      	str	r0, [r7, #12]
 800f2f0:	60b9      	str	r1, [r7, #8]
 800f2f2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800f2f4:	2300      	movs	r3, #0
 800f2f6:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800f2f8:	2301      	movs	r3, #1
 800f2fa:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800f2fc:	68bb      	ldr	r3, [r7, #8]
 800f2fe:	685b      	ldr	r3, [r3, #4]
 800f300:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800f302:	69fb      	ldr	r3, [r7, #28]
 800f304:	885b      	ldrh	r3, [r3, #2]
 800f306:	b29b      	uxth	r3, r3
 800f308:	4618      	mov	r0, r3
 800f30a:	f7fe f8a5 	bl	800d458 <lwip_htons>
 800f30e:	4603      	mov	r3, r0
 800f310:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800f312:	69fb      	ldr	r3, [r7, #28]
 800f314:	781b      	ldrb	r3, [r3, #0]
 800f316:	f003 030f 	and.w	r3, r3, #15
 800f31a:	b2db      	uxtb	r3, r3
 800f31c:	009b      	lsls	r3, r3, #2
 800f31e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800f320:	7e7b      	ldrb	r3, [r7, #25]
 800f322:	b29b      	uxth	r3, r3
 800f324:	8b7a      	ldrh	r2, [r7, #26]
 800f326:	429a      	cmp	r2, r3
 800f328:	d202      	bcs.n	800f330 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f32a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f32e:	e135      	b.n	800f59c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800f330:	7e7b      	ldrb	r3, [r7, #25]
 800f332:	b29b      	uxth	r3, r3
 800f334:	8b7a      	ldrh	r2, [r7, #26]
 800f336:	1ad3      	subs	r3, r2, r3
 800f338:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800f33a:	69fb      	ldr	r3, [r7, #28]
 800f33c:	88db      	ldrh	r3, [r3, #6]
 800f33e:	b29b      	uxth	r3, r3
 800f340:	4618      	mov	r0, r3
 800f342:	f7fe f889 	bl	800d458 <lwip_htons>
 800f346:	4603      	mov	r3, r0
 800f348:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f34c:	b29b      	uxth	r3, r3
 800f34e:	00db      	lsls	r3, r3, #3
 800f350:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800f352:	68bb      	ldr	r3, [r7, #8]
 800f354:	685b      	ldr	r3, [r3, #4]
 800f356:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800f358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f35a:	2200      	movs	r2, #0
 800f35c:	701a      	strb	r2, [r3, #0]
 800f35e:	2200      	movs	r2, #0
 800f360:	705a      	strb	r2, [r3, #1]
 800f362:	2200      	movs	r2, #0
 800f364:	709a      	strb	r2, [r3, #2]
 800f366:	2200      	movs	r2, #0
 800f368:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800f36a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f36c:	8afa      	ldrh	r2, [r7, #22]
 800f36e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800f370:	8afa      	ldrh	r2, [r7, #22]
 800f372:	8b7b      	ldrh	r3, [r7, #26]
 800f374:	4413      	add	r3, r2
 800f376:	b29a      	uxth	r2, r3
 800f378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f37a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800f37c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f37e:	88db      	ldrh	r3, [r3, #6]
 800f380:	b29b      	uxth	r3, r3
 800f382:	8afa      	ldrh	r2, [r7, #22]
 800f384:	429a      	cmp	r2, r3
 800f386:	d902      	bls.n	800f38e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f388:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f38c:	e106      	b.n	800f59c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	685b      	ldr	r3, [r3, #4]
 800f392:	627b      	str	r3, [r7, #36]	; 0x24
 800f394:	e068      	b.n	800f468 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800f396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f398:	685b      	ldr	r3, [r3, #4]
 800f39a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800f39c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f39e:	889b      	ldrh	r3, [r3, #4]
 800f3a0:	b29a      	uxth	r2, r3
 800f3a2:	693b      	ldr	r3, [r7, #16]
 800f3a4:	889b      	ldrh	r3, [r3, #4]
 800f3a6:	b29b      	uxth	r3, r3
 800f3a8:	429a      	cmp	r2, r3
 800f3aa:	d235      	bcs.n	800f418 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800f3ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f3b0:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800f3b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d020      	beq.n	800f3fa <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800f3b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3ba:	889b      	ldrh	r3, [r3, #4]
 800f3bc:	b29a      	uxth	r2, r3
 800f3be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3c0:	88db      	ldrh	r3, [r3, #6]
 800f3c2:	b29b      	uxth	r3, r3
 800f3c4:	429a      	cmp	r2, r3
 800f3c6:	d307      	bcc.n	800f3d8 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800f3c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3ca:	88db      	ldrh	r3, [r3, #6]
 800f3cc:	b29a      	uxth	r2, r3
 800f3ce:	693b      	ldr	r3, [r7, #16]
 800f3d0:	889b      	ldrh	r3, [r3, #4]
 800f3d2:	b29b      	uxth	r3, r3
 800f3d4:	429a      	cmp	r2, r3
 800f3d6:	d902      	bls.n	800f3de <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f3d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f3dc:	e0de      	b.n	800f59c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800f3de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3e0:	68ba      	ldr	r2, [r7, #8]
 800f3e2:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800f3e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3e6:	88db      	ldrh	r3, [r3, #6]
 800f3e8:	b29a      	uxth	r2, r3
 800f3ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3ec:	889b      	ldrh	r3, [r3, #4]
 800f3ee:	b29b      	uxth	r3, r3
 800f3f0:	429a      	cmp	r2, r3
 800f3f2:	d03d      	beq.n	800f470 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800f3f4:	2300      	movs	r3, #0
 800f3f6:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800f3f8:	e03a      	b.n	800f470 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800f3fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3fc:	88db      	ldrh	r3, [r3, #6]
 800f3fe:	b29a      	uxth	r2, r3
 800f400:	693b      	ldr	r3, [r7, #16]
 800f402:	889b      	ldrh	r3, [r3, #4]
 800f404:	b29b      	uxth	r3, r3
 800f406:	429a      	cmp	r2, r3
 800f408:	d902      	bls.n	800f410 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f40a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f40e:	e0c5      	b.n	800f59c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800f410:	68fb      	ldr	r3, [r7, #12]
 800f412:	68ba      	ldr	r2, [r7, #8]
 800f414:	605a      	str	r2, [r3, #4]
      break;
 800f416:	e02b      	b.n	800f470 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800f418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f41a:	889b      	ldrh	r3, [r3, #4]
 800f41c:	b29a      	uxth	r2, r3
 800f41e:	693b      	ldr	r3, [r7, #16]
 800f420:	889b      	ldrh	r3, [r3, #4]
 800f422:	b29b      	uxth	r3, r3
 800f424:	429a      	cmp	r2, r3
 800f426:	d102      	bne.n	800f42e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f428:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f42c:	e0b6      	b.n	800f59c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800f42e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f430:	889b      	ldrh	r3, [r3, #4]
 800f432:	b29a      	uxth	r2, r3
 800f434:	693b      	ldr	r3, [r7, #16]
 800f436:	88db      	ldrh	r3, [r3, #6]
 800f438:	b29b      	uxth	r3, r3
 800f43a:	429a      	cmp	r2, r3
 800f43c:	d202      	bcs.n	800f444 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f43e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f442:	e0ab      	b.n	800f59c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800f444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f446:	2b00      	cmp	r3, #0
 800f448:	d009      	beq.n	800f45e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800f44a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f44c:	88db      	ldrh	r3, [r3, #6]
 800f44e:	b29a      	uxth	r2, r3
 800f450:	693b      	ldr	r3, [r7, #16]
 800f452:	889b      	ldrh	r3, [r3, #4]
 800f454:	b29b      	uxth	r3, r3
 800f456:	429a      	cmp	r2, r3
 800f458:	d001      	beq.n	800f45e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800f45a:	2300      	movs	r3, #0
 800f45c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800f45e:	693b      	ldr	r3, [r7, #16]
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800f464:	693b      	ldr	r3, [r7, #16]
 800f466:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800f468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d193      	bne.n	800f396 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800f46e:	e000      	b.n	800f472 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800f470:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800f472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f474:	2b00      	cmp	r3, #0
 800f476:	d12d      	bne.n	800f4d4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800f478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d01c      	beq.n	800f4b8 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800f47e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f480:	88db      	ldrh	r3, [r3, #6]
 800f482:	b29a      	uxth	r2, r3
 800f484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f486:	889b      	ldrh	r3, [r3, #4]
 800f488:	b29b      	uxth	r3, r3
 800f48a:	429a      	cmp	r2, r3
 800f48c:	d906      	bls.n	800f49c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800f48e:	4b45      	ldr	r3, [pc, #276]	; (800f5a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f490:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800f494:	4944      	ldr	r1, [pc, #272]	; (800f5a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800f496:	4845      	ldr	r0, [pc, #276]	; (800f5ac <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f498:	f00b fe32 	bl	801b100 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800f49c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f49e:	68ba      	ldr	r2, [r7, #8]
 800f4a0:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800f4a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4a4:	88db      	ldrh	r3, [r3, #6]
 800f4a6:	b29a      	uxth	r2, r3
 800f4a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4aa:	889b      	ldrh	r3, [r3, #4]
 800f4ac:	b29b      	uxth	r3, r3
 800f4ae:	429a      	cmp	r2, r3
 800f4b0:	d010      	beq.n	800f4d4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800f4b2:	2300      	movs	r3, #0
 800f4b4:	623b      	str	r3, [r7, #32]
 800f4b6:	e00d      	b.n	800f4d4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	685b      	ldr	r3, [r3, #4]
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d006      	beq.n	800f4ce <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800f4c0:	4b38      	ldr	r3, [pc, #224]	; (800f5a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f4c2:	f240 12bf 	movw	r2, #447	; 0x1bf
 800f4c6:	493a      	ldr	r1, [pc, #232]	; (800f5b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800f4c8:	4838      	ldr	r0, [pc, #224]	; (800f5ac <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f4ca:	f00b fe19 	bl	801b100 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800f4ce:	68fb      	ldr	r3, [r7, #12]
 800f4d0:	68ba      	ldr	r2, [r7, #8]
 800f4d2:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d105      	bne.n	800f4e6 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	7f9b      	ldrb	r3, [r3, #30]
 800f4de:	f003 0301 	and.w	r3, r3, #1
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d059      	beq.n	800f59a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800f4e6:	6a3b      	ldr	r3, [r7, #32]
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	d04f      	beq.n	800f58c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800f4ec:	68fb      	ldr	r3, [r7, #12]
 800f4ee:	685b      	ldr	r3, [r3, #4]
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	d006      	beq.n	800f502 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800f4f4:	68fb      	ldr	r3, [r7, #12]
 800f4f6:	685b      	ldr	r3, [r3, #4]
 800f4f8:	685b      	ldr	r3, [r3, #4]
 800f4fa:	889b      	ldrh	r3, [r3, #4]
 800f4fc:	b29b      	uxth	r3, r3
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d002      	beq.n	800f508 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800f502:	2300      	movs	r3, #0
 800f504:	623b      	str	r3, [r7, #32]
 800f506:	e041      	b.n	800f58c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800f508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f50a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800f50c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f50e:	681b      	ldr	r3, [r3, #0]
 800f510:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800f512:	e012      	b.n	800f53a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800f514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f516:	685b      	ldr	r3, [r3, #4]
 800f518:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800f51a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f51c:	88db      	ldrh	r3, [r3, #6]
 800f51e:	b29a      	uxth	r2, r3
 800f520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f522:	889b      	ldrh	r3, [r3, #4]
 800f524:	b29b      	uxth	r3, r3
 800f526:	429a      	cmp	r2, r3
 800f528:	d002      	beq.n	800f530 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800f52a:	2300      	movs	r3, #0
 800f52c:	623b      	str	r3, [r7, #32]
            break;
 800f52e:	e007      	b.n	800f540 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800f530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f532:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800f534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800f53a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d1e9      	bne.n	800f514 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800f540:	6a3b      	ldr	r3, [r7, #32]
 800f542:	2b00      	cmp	r3, #0
 800f544:	d022      	beq.n	800f58c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800f546:	68fb      	ldr	r3, [r7, #12]
 800f548:	685b      	ldr	r3, [r3, #4]
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	d106      	bne.n	800f55c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800f54e:	4b15      	ldr	r3, [pc, #84]	; (800f5a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f550:	f240 12df 	movw	r2, #479	; 0x1df
 800f554:	4917      	ldr	r1, [pc, #92]	; (800f5b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800f556:	4815      	ldr	r0, [pc, #84]	; (800f5ac <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f558:	f00b fdd2 	bl	801b100 <iprintf>
          LWIP_ASSERT("sanity check",
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	685b      	ldr	r3, [r3, #4]
 800f560:	685b      	ldr	r3, [r3, #4]
 800f562:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f564:	429a      	cmp	r2, r3
 800f566:	d106      	bne.n	800f576 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800f568:	4b0e      	ldr	r3, [pc, #56]	; (800f5a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f56a:	f240 12e1 	movw	r2, #481	; 0x1e1
 800f56e:	4911      	ldr	r1, [pc, #68]	; (800f5b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800f570:	480e      	ldr	r0, [pc, #56]	; (800f5ac <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f572:	f00b fdc5 	bl	801b100 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800f576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d006      	beq.n	800f58c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800f57e:	4b09      	ldr	r3, [pc, #36]	; (800f5a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f580:	f240 12e3 	movw	r2, #483	; 0x1e3
 800f584:	490c      	ldr	r1, [pc, #48]	; (800f5b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800f586:	4809      	ldr	r0, [pc, #36]	; (800f5ac <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f588:	f00b fdba 	bl	801b100 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800f58c:	6a3b      	ldr	r3, [r7, #32]
 800f58e:	2b00      	cmp	r3, #0
 800f590:	bf14      	ite	ne
 800f592:	2301      	movne	r3, #1
 800f594:	2300      	moveq	r3, #0
 800f596:	b2db      	uxtb	r3, r3
 800f598:	e000      	b.n	800f59c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800f59a:	2300      	movs	r3, #0
}
 800f59c:	4618      	mov	r0, r3
 800f59e:	3730      	adds	r7, #48	; 0x30
 800f5a0:	46bd      	mov	sp, r7
 800f5a2:	bd80      	pop	{r7, pc}
 800f5a4:	0801d8a0 	.word	0x0801d8a0
 800f5a8:	0801d9a0 	.word	0x0801d9a0
 800f5ac:	0801d904 	.word	0x0801d904
 800f5b0:	0801d9c0 	.word	0x0801d9c0
 800f5b4:	0801d9f8 	.word	0x0801d9f8
 800f5b8:	0801da08 	.word	0x0801da08

0800f5bc <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800f5bc:	b580      	push	{r7, lr}
 800f5be:	b08e      	sub	sp, #56	; 0x38
 800f5c0:	af00      	add	r7, sp, #0
 800f5c2:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	685b      	ldr	r3, [r3, #4]
 800f5c8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800f5ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5cc:	781b      	ldrb	r3, [r3, #0]
 800f5ce:	f003 030f 	and.w	r3, r3, #15
 800f5d2:	b2db      	uxtb	r3, r3
 800f5d4:	009b      	lsls	r3, r3, #2
 800f5d6:	b2db      	uxtb	r3, r3
 800f5d8:	2b14      	cmp	r3, #20
 800f5da:	f040 8167 	bne.w	800f8ac <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800f5de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5e0:	88db      	ldrh	r3, [r3, #6]
 800f5e2:	b29b      	uxth	r3, r3
 800f5e4:	4618      	mov	r0, r3
 800f5e6:	f7fd ff37 	bl	800d458 <lwip_htons>
 800f5ea:	4603      	mov	r3, r0
 800f5ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f5f0:	b29b      	uxth	r3, r3
 800f5f2:	00db      	lsls	r3, r3, #3
 800f5f4:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800f5f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5f8:	885b      	ldrh	r3, [r3, #2]
 800f5fa:	b29b      	uxth	r3, r3
 800f5fc:	4618      	mov	r0, r3
 800f5fe:	f7fd ff2b 	bl	800d458 <lwip_htons>
 800f602:	4603      	mov	r3, r0
 800f604:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800f606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f608:	781b      	ldrb	r3, [r3, #0]
 800f60a:	f003 030f 	and.w	r3, r3, #15
 800f60e:	b2db      	uxtb	r3, r3
 800f610:	009b      	lsls	r3, r3, #2
 800f612:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800f616:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f61a:	b29b      	uxth	r3, r3
 800f61c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f61e:	429a      	cmp	r2, r3
 800f620:	f0c0 8146 	bcc.w	800f8b0 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800f624:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f628:	b29b      	uxth	r3, r3
 800f62a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f62c:	1ad3      	subs	r3, r2, r3
 800f62e:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800f630:	6878      	ldr	r0, [r7, #4]
 800f632:	f001 ff35 	bl	80114a0 <pbuf_clen>
 800f636:	4603      	mov	r3, r0
 800f638:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800f63a:	4ba3      	ldr	r3, [pc, #652]	; (800f8c8 <ip4_reass+0x30c>)
 800f63c:	881b      	ldrh	r3, [r3, #0]
 800f63e:	461a      	mov	r2, r3
 800f640:	8c3b      	ldrh	r3, [r7, #32]
 800f642:	4413      	add	r3, r2
 800f644:	2b0a      	cmp	r3, #10
 800f646:	dd10      	ble.n	800f66a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800f648:	8c3b      	ldrh	r3, [r7, #32]
 800f64a:	4619      	mov	r1, r3
 800f64c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f64e:	f7ff fd81 	bl	800f154 <ip_reass_remove_oldest_datagram>
 800f652:	4603      	mov	r3, r0
 800f654:	2b00      	cmp	r3, #0
 800f656:	f000 812d 	beq.w	800f8b4 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800f65a:	4b9b      	ldr	r3, [pc, #620]	; (800f8c8 <ip4_reass+0x30c>)
 800f65c:	881b      	ldrh	r3, [r3, #0]
 800f65e:	461a      	mov	r2, r3
 800f660:	8c3b      	ldrh	r3, [r7, #32]
 800f662:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800f664:	2b0a      	cmp	r3, #10
 800f666:	f300 8125 	bgt.w	800f8b4 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800f66a:	4b98      	ldr	r3, [pc, #608]	; (800f8cc <ip4_reass+0x310>)
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	633b      	str	r3, [r7, #48]	; 0x30
 800f670:	e015      	b.n	800f69e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800f672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f674:	695a      	ldr	r2, [r3, #20]
 800f676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f678:	68db      	ldr	r3, [r3, #12]
 800f67a:	429a      	cmp	r2, r3
 800f67c:	d10c      	bne.n	800f698 <ip4_reass+0xdc>
 800f67e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f680:	699a      	ldr	r2, [r3, #24]
 800f682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f684:	691b      	ldr	r3, [r3, #16]
 800f686:	429a      	cmp	r2, r3
 800f688:	d106      	bne.n	800f698 <ip4_reass+0xdc>
 800f68a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f68c:	899a      	ldrh	r2, [r3, #12]
 800f68e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f690:	889b      	ldrh	r3, [r3, #4]
 800f692:	b29b      	uxth	r3, r3
 800f694:	429a      	cmp	r2, r3
 800f696:	d006      	beq.n	800f6a6 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800f698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f69a:	681b      	ldr	r3, [r3, #0]
 800f69c:	633b      	str	r3, [r7, #48]	; 0x30
 800f69e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	d1e6      	bne.n	800f672 <ip4_reass+0xb6>
 800f6a4:	e000      	b.n	800f6a8 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800f6a6:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800f6a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d109      	bne.n	800f6c2 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800f6ae:	8c3b      	ldrh	r3, [r7, #32]
 800f6b0:	4619      	mov	r1, r3
 800f6b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f6b4:	f7ff fdb0 	bl	800f218 <ip_reass_enqueue_new_datagram>
 800f6b8:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800f6ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d11c      	bne.n	800f6fa <ip4_reass+0x13e>
      goto nullreturn;
 800f6c0:	e0f9      	b.n	800f8b6 <ip4_reass+0x2fa>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800f6c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6c4:	88db      	ldrh	r3, [r3, #6]
 800f6c6:	b29b      	uxth	r3, r3
 800f6c8:	4618      	mov	r0, r3
 800f6ca:	f7fd fec5 	bl	800d458 <lwip_htons>
 800f6ce:	4603      	mov	r3, r0
 800f6d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d110      	bne.n	800f6fa <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800f6d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6da:	89db      	ldrh	r3, [r3, #14]
 800f6dc:	4618      	mov	r0, r3
 800f6de:	f7fd febb 	bl	800d458 <lwip_htons>
 800f6e2:	4603      	mov	r3, r0
 800f6e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d006      	beq.n	800f6fa <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800f6ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6ee:	3308      	adds	r3, #8
 800f6f0:	2214      	movs	r2, #20
 800f6f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f6f4:	4618      	mov	r0, r3
 800f6f6:	f00b f89e 	bl	801a836 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800f6fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6fc:	88db      	ldrh	r3, [r3, #6]
 800f6fe:	b29b      	uxth	r3, r3
 800f700:	f003 0320 	and.w	r3, r3, #32
 800f704:	2b00      	cmp	r3, #0
 800f706:	bf0c      	ite	eq
 800f708:	2301      	moveq	r3, #1
 800f70a:	2300      	movne	r3, #0
 800f70c:	b2db      	uxtb	r3, r3
 800f70e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800f710:	69fb      	ldr	r3, [r7, #28]
 800f712:	2b00      	cmp	r3, #0
 800f714:	d00e      	beq.n	800f734 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800f716:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800f718:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f71a:	4413      	add	r3, r2
 800f71c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800f71e:	8b7a      	ldrh	r2, [r7, #26]
 800f720:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f722:	429a      	cmp	r2, r3
 800f724:	f0c0 80a0 	bcc.w	800f868 <ip4_reass+0x2ac>
 800f728:	8b7b      	ldrh	r3, [r7, #26]
 800f72a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800f72e:	4293      	cmp	r3, r2
 800f730:	f200 809a 	bhi.w	800f868 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800f734:	69fa      	ldr	r2, [r7, #28]
 800f736:	6879      	ldr	r1, [r7, #4]
 800f738:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f73a:	f7ff fdd5 	bl	800f2e8 <ip_reass_chain_frag_into_datagram_and_validate>
 800f73e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800f740:	697b      	ldr	r3, [r7, #20]
 800f742:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f746:	f000 8091 	beq.w	800f86c <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800f74a:	4b5f      	ldr	r3, [pc, #380]	; (800f8c8 <ip4_reass+0x30c>)
 800f74c:	881a      	ldrh	r2, [r3, #0]
 800f74e:	8c3b      	ldrh	r3, [r7, #32]
 800f750:	4413      	add	r3, r2
 800f752:	b29a      	uxth	r2, r3
 800f754:	4b5c      	ldr	r3, [pc, #368]	; (800f8c8 <ip4_reass+0x30c>)
 800f756:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800f758:	69fb      	ldr	r3, [r7, #28]
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	d00d      	beq.n	800f77a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800f75e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800f760:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f762:	4413      	add	r3, r2
 800f764:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800f766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f768:	8a7a      	ldrh	r2, [r7, #18]
 800f76a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800f76c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f76e:	7f9b      	ldrb	r3, [r3, #30]
 800f770:	f043 0301 	orr.w	r3, r3, #1
 800f774:	b2da      	uxtb	r2, r3
 800f776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f778:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800f77a:	697b      	ldr	r3, [r7, #20]
 800f77c:	2b01      	cmp	r3, #1
 800f77e:	d171      	bne.n	800f864 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800f780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f782:	8b9b      	ldrh	r3, [r3, #28]
 800f784:	3314      	adds	r3, #20
 800f786:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800f788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f78a:	685b      	ldr	r3, [r3, #4]
 800f78c:	685b      	ldr	r3, [r3, #4]
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800f792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f794:	685b      	ldr	r3, [r3, #4]
 800f796:	685b      	ldr	r3, [r3, #4]
 800f798:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800f79a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f79c:	3308      	adds	r3, #8
 800f79e:	2214      	movs	r2, #20
 800f7a0:	4619      	mov	r1, r3
 800f7a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f7a4:	f00b f847 	bl	801a836 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800f7a8:	8a3b      	ldrh	r3, [r7, #16]
 800f7aa:	4618      	mov	r0, r3
 800f7ac:	f7fd fe54 	bl	800d458 <lwip_htons>
 800f7b0:	4603      	mov	r3, r0
 800f7b2:	461a      	mov	r2, r3
 800f7b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7b6:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800f7b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7ba:	2200      	movs	r2, #0
 800f7bc:	719a      	strb	r2, [r3, #6]
 800f7be:	2200      	movs	r2, #0
 800f7c0:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800f7c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7c4:	2200      	movs	r2, #0
 800f7c6:	729a      	strb	r2, [r3, #10]
 800f7c8:	2200      	movs	r2, #0
 800f7ca:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800f7cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7ce:	685b      	ldr	r3, [r3, #4]
 800f7d0:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800f7d2:	e00d      	b.n	800f7f0 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800f7d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f7d6:	685b      	ldr	r3, [r3, #4]
 800f7d8:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800f7da:	2114      	movs	r1, #20
 800f7dc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f7de:	f001 fd4b 	bl	8011278 <pbuf_remove_header>
      pbuf_cat(p, r);
 800f7e2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f7e4:	6878      	ldr	r0, [r7, #4]
 800f7e6:	f001 fe9b 	bl	8011520 <pbuf_cat>
      r = iprh->next_pbuf;
 800f7ea:	68fb      	ldr	r3, [r7, #12]
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800f7f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d1ee      	bne.n	800f7d4 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800f7f6:	4b35      	ldr	r3, [pc, #212]	; (800f8cc <ip4_reass+0x310>)
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f7fc:	429a      	cmp	r2, r3
 800f7fe:	d102      	bne.n	800f806 <ip4_reass+0x24a>
      ipr_prev = NULL;
 800f800:	2300      	movs	r3, #0
 800f802:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f804:	e010      	b.n	800f828 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800f806:	4b31      	ldr	r3, [pc, #196]	; (800f8cc <ip4_reass+0x310>)
 800f808:	681b      	ldr	r3, [r3, #0]
 800f80a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f80c:	e007      	b.n	800f81e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800f80e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f810:	681b      	ldr	r3, [r3, #0]
 800f812:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f814:	429a      	cmp	r2, r3
 800f816:	d006      	beq.n	800f826 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800f818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f81a:	681b      	ldr	r3, [r3, #0]
 800f81c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f81e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f820:	2b00      	cmp	r3, #0
 800f822:	d1f4      	bne.n	800f80e <ip4_reass+0x252>
 800f824:	e000      	b.n	800f828 <ip4_reass+0x26c>
          break;
 800f826:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800f828:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f82a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f82c:	f7ff fd2e 	bl	800f28c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800f830:	6878      	ldr	r0, [r7, #4]
 800f832:	f001 fe35 	bl	80114a0 <pbuf_clen>
 800f836:	4603      	mov	r3, r0
 800f838:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800f83a:	4b23      	ldr	r3, [pc, #140]	; (800f8c8 <ip4_reass+0x30c>)
 800f83c:	881b      	ldrh	r3, [r3, #0]
 800f83e:	8c3a      	ldrh	r2, [r7, #32]
 800f840:	429a      	cmp	r2, r3
 800f842:	d906      	bls.n	800f852 <ip4_reass+0x296>
 800f844:	4b22      	ldr	r3, [pc, #136]	; (800f8d0 <ip4_reass+0x314>)
 800f846:	f240 229b 	movw	r2, #667	; 0x29b
 800f84a:	4922      	ldr	r1, [pc, #136]	; (800f8d4 <ip4_reass+0x318>)
 800f84c:	4822      	ldr	r0, [pc, #136]	; (800f8d8 <ip4_reass+0x31c>)
 800f84e:	f00b fc57 	bl	801b100 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800f852:	4b1d      	ldr	r3, [pc, #116]	; (800f8c8 <ip4_reass+0x30c>)
 800f854:	881a      	ldrh	r2, [r3, #0]
 800f856:	8c3b      	ldrh	r3, [r7, #32]
 800f858:	1ad3      	subs	r3, r2, r3
 800f85a:	b29a      	uxth	r2, r3
 800f85c:	4b1a      	ldr	r3, [pc, #104]	; (800f8c8 <ip4_reass+0x30c>)
 800f85e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	e02c      	b.n	800f8be <ip4_reass+0x302>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800f864:	2300      	movs	r3, #0
 800f866:	e02a      	b.n	800f8be <ip4_reass+0x302>

nullreturn_ipr:
 800f868:	bf00      	nop
 800f86a:	e000      	b.n	800f86e <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 800f86c:	bf00      	nop
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800f86e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f870:	2b00      	cmp	r3, #0
 800f872:	d106      	bne.n	800f882 <ip4_reass+0x2c6>
 800f874:	4b16      	ldr	r3, [pc, #88]	; (800f8d0 <ip4_reass+0x314>)
 800f876:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800f87a:	4918      	ldr	r1, [pc, #96]	; (800f8dc <ip4_reass+0x320>)
 800f87c:	4816      	ldr	r0, [pc, #88]	; (800f8d8 <ip4_reass+0x31c>)
 800f87e:	f00b fc3f 	bl	801b100 <iprintf>
  if (ipr->p == NULL) {
 800f882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f884:	685b      	ldr	r3, [r3, #4]
 800f886:	2b00      	cmp	r3, #0
 800f888:	d114      	bne.n	800f8b4 <ip4_reass+0x2f8>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800f88a:	4b10      	ldr	r3, [pc, #64]	; (800f8cc <ip4_reass+0x310>)
 800f88c:	681b      	ldr	r3, [r3, #0]
 800f88e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f890:	429a      	cmp	r2, r3
 800f892:	d006      	beq.n	800f8a2 <ip4_reass+0x2e6>
 800f894:	4b0e      	ldr	r3, [pc, #56]	; (800f8d0 <ip4_reass+0x314>)
 800f896:	f240 22ab 	movw	r2, #683	; 0x2ab
 800f89a:	4911      	ldr	r1, [pc, #68]	; (800f8e0 <ip4_reass+0x324>)
 800f89c:	480e      	ldr	r0, [pc, #56]	; (800f8d8 <ip4_reass+0x31c>)
 800f89e:	f00b fc2f 	bl	801b100 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800f8a2:	2100      	movs	r1, #0
 800f8a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f8a6:	f7ff fcf1 	bl	800f28c <ip_reass_dequeue_datagram>
 800f8aa:	e004      	b.n	800f8b6 <ip4_reass+0x2fa>
    goto nullreturn;
 800f8ac:	bf00      	nop
 800f8ae:	e002      	b.n	800f8b6 <ip4_reass+0x2fa>
    goto nullreturn;
 800f8b0:	bf00      	nop
 800f8b2:	e000      	b.n	800f8b6 <ip4_reass+0x2fa>
  }

nullreturn:
 800f8b4:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800f8b6:	6878      	ldr	r0, [r7, #4]
 800f8b8:	f001 fd64 	bl	8011384 <pbuf_free>
  return NULL;
 800f8bc:	2300      	movs	r3, #0
}
 800f8be:	4618      	mov	r0, r3
 800f8c0:	3738      	adds	r7, #56	; 0x38
 800f8c2:	46bd      	mov	sp, r7
 800f8c4:	bd80      	pop	{r7, pc}
 800f8c6:	bf00      	nop
 800f8c8:	240048cc 	.word	0x240048cc
 800f8cc:	240048c8 	.word	0x240048c8
 800f8d0:	0801d8a0 	.word	0x0801d8a0
 800f8d4:	0801da2c 	.word	0x0801da2c
 800f8d8:	0801d904 	.word	0x0801d904
 800f8dc:	0801da48 	.word	0x0801da48
 800f8e0:	0801da54 	.word	0x0801da54

0800f8e4 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800f8e4:	b580      	push	{r7, lr}
 800f8e6:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800f8e8:	2005      	movs	r0, #5
 800f8ea:	f000 fe35 	bl	8010558 <memp_malloc>
 800f8ee:	4603      	mov	r3, r0
}
 800f8f0:	4618      	mov	r0, r3
 800f8f2:	bd80      	pop	{r7, pc}

0800f8f4 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800f8f4:	b580      	push	{r7, lr}
 800f8f6:	b082      	sub	sp, #8
 800f8f8:	af00      	add	r7, sp, #0
 800f8fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d106      	bne.n	800f910 <ip_frag_free_pbuf_custom_ref+0x1c>
 800f902:	4b07      	ldr	r3, [pc, #28]	; (800f920 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800f904:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800f908:	4906      	ldr	r1, [pc, #24]	; (800f924 <ip_frag_free_pbuf_custom_ref+0x30>)
 800f90a:	4807      	ldr	r0, [pc, #28]	; (800f928 <ip_frag_free_pbuf_custom_ref+0x34>)
 800f90c:	f00b fbf8 	bl	801b100 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800f910:	6879      	ldr	r1, [r7, #4]
 800f912:	2005      	movs	r0, #5
 800f914:	f000 fe96 	bl	8010644 <memp_free>
}
 800f918:	bf00      	nop
 800f91a:	3708      	adds	r7, #8
 800f91c:	46bd      	mov	sp, r7
 800f91e:	bd80      	pop	{r7, pc}
 800f920:	0801d8a0 	.word	0x0801d8a0
 800f924:	0801da74 	.word	0x0801da74
 800f928:	0801d904 	.word	0x0801d904

0800f92c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800f92c:	b580      	push	{r7, lr}
 800f92e:	b084      	sub	sp, #16
 800f930:	af00      	add	r7, sp, #0
 800f932:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800f938:	68fb      	ldr	r3, [r7, #12]
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	d106      	bne.n	800f94c <ipfrag_free_pbuf_custom+0x20>
 800f93e:	4b11      	ldr	r3, [pc, #68]	; (800f984 <ipfrag_free_pbuf_custom+0x58>)
 800f940:	f240 22ce 	movw	r2, #718	; 0x2ce
 800f944:	4910      	ldr	r1, [pc, #64]	; (800f988 <ipfrag_free_pbuf_custom+0x5c>)
 800f946:	4811      	ldr	r0, [pc, #68]	; (800f98c <ipfrag_free_pbuf_custom+0x60>)
 800f948:	f00b fbda 	bl	801b100 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800f94c:	68fa      	ldr	r2, [r7, #12]
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	429a      	cmp	r2, r3
 800f952:	d006      	beq.n	800f962 <ipfrag_free_pbuf_custom+0x36>
 800f954:	4b0b      	ldr	r3, [pc, #44]	; (800f984 <ipfrag_free_pbuf_custom+0x58>)
 800f956:	f240 22cf 	movw	r2, #719	; 0x2cf
 800f95a:	490d      	ldr	r1, [pc, #52]	; (800f990 <ipfrag_free_pbuf_custom+0x64>)
 800f95c:	480b      	ldr	r0, [pc, #44]	; (800f98c <ipfrag_free_pbuf_custom+0x60>)
 800f95e:	f00b fbcf 	bl	801b100 <iprintf>
  if (pcr->original != NULL) {
 800f962:	68fb      	ldr	r3, [r7, #12]
 800f964:	695b      	ldr	r3, [r3, #20]
 800f966:	2b00      	cmp	r3, #0
 800f968:	d004      	beq.n	800f974 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800f96a:	68fb      	ldr	r3, [r7, #12]
 800f96c:	695b      	ldr	r3, [r3, #20]
 800f96e:	4618      	mov	r0, r3
 800f970:	f001 fd08 	bl	8011384 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800f974:	68f8      	ldr	r0, [r7, #12]
 800f976:	f7ff ffbd 	bl	800f8f4 <ip_frag_free_pbuf_custom_ref>
}
 800f97a:	bf00      	nop
 800f97c:	3710      	adds	r7, #16
 800f97e:	46bd      	mov	sp, r7
 800f980:	bd80      	pop	{r7, pc}
 800f982:	bf00      	nop
 800f984:	0801d8a0 	.word	0x0801d8a0
 800f988:	0801da80 	.word	0x0801da80
 800f98c:	0801d904 	.word	0x0801d904
 800f990:	0801da8c 	.word	0x0801da8c

0800f994 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800f994:	b580      	push	{r7, lr}
 800f996:	b094      	sub	sp, #80	; 0x50
 800f998:	af02      	add	r7, sp, #8
 800f99a:	60f8      	str	r0, [r7, #12]
 800f99c:	60b9      	str	r1, [r7, #8]
 800f99e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800f9a0:	2300      	movs	r3, #0
 800f9a2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800f9a6:	68bb      	ldr	r3, [r7, #8]
 800f9a8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f9aa:	3b14      	subs	r3, #20
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	da00      	bge.n	800f9b2 <ip4_frag+0x1e>
 800f9b0:	3307      	adds	r3, #7
 800f9b2:	10db      	asrs	r3, r3, #3
 800f9b4:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800f9b6:	2314      	movs	r3, #20
 800f9b8:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800f9ba:	68fb      	ldr	r3, [r7, #12]
 800f9bc:	685b      	ldr	r3, [r3, #4]
 800f9be:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800f9c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f9c2:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800f9c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9c6:	781b      	ldrb	r3, [r3, #0]
 800f9c8:	f003 030f 	and.w	r3, r3, #15
 800f9cc:	b2db      	uxtb	r3, r3
 800f9ce:	009b      	lsls	r3, r3, #2
 800f9d0:	b2db      	uxtb	r3, r3
 800f9d2:	2b14      	cmp	r3, #20
 800f9d4:	d002      	beq.n	800f9dc <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800f9d6:	f06f 0305 	mvn.w	r3, #5
 800f9da:	e10f      	b.n	800fbfc <ip4_frag+0x268>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	895b      	ldrh	r3, [r3, #10]
 800f9e0:	2b13      	cmp	r3, #19
 800f9e2:	d809      	bhi.n	800f9f8 <ip4_frag+0x64>
 800f9e4:	4b87      	ldr	r3, [pc, #540]	; (800fc04 <ip4_frag+0x270>)
 800f9e6:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800f9ea:	4987      	ldr	r1, [pc, #540]	; (800fc08 <ip4_frag+0x274>)
 800f9ec:	4887      	ldr	r0, [pc, #540]	; (800fc0c <ip4_frag+0x278>)
 800f9ee:	f00b fb87 	bl	801b100 <iprintf>
 800f9f2:	f06f 0305 	mvn.w	r3, #5
 800f9f6:	e101      	b.n	800fbfc <ip4_frag+0x268>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800f9f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9fa:	88db      	ldrh	r3, [r3, #6]
 800f9fc:	b29b      	uxth	r3, r3
 800f9fe:	4618      	mov	r0, r3
 800fa00:	f7fd fd2a 	bl	800d458 <lwip_htons>
 800fa04:	4603      	mov	r3, r0
 800fa06:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800fa08:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fa0a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fa0e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800fa12:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fa14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800fa18:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800fa1a:	68fb      	ldr	r3, [r7, #12]
 800fa1c:	891b      	ldrh	r3, [r3, #8]
 800fa1e:	3b14      	subs	r3, #20
 800fa20:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800fa24:	e0e0      	b.n	800fbe8 <ip4_frag+0x254>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800fa26:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800fa28:	00db      	lsls	r3, r3, #3
 800fa2a:	b29b      	uxth	r3, r3
 800fa2c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800fa30:	4293      	cmp	r3, r2
 800fa32:	bf28      	it	cs
 800fa34:	4613      	movcs	r3, r2
 800fa36:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800fa38:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fa3c:	2114      	movs	r1, #20
 800fa3e:	200e      	movs	r0, #14
 800fa40:	f001 f9c0 	bl	8010dc4 <pbuf_alloc>
 800fa44:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800fa46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	f000 80d4 	beq.w	800fbf6 <ip4_frag+0x262>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800fa4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa50:	895b      	ldrh	r3, [r3, #10]
 800fa52:	2b13      	cmp	r3, #19
 800fa54:	d806      	bhi.n	800fa64 <ip4_frag+0xd0>
 800fa56:	4b6b      	ldr	r3, [pc, #428]	; (800fc04 <ip4_frag+0x270>)
 800fa58:	f240 3225 	movw	r2, #805	; 0x325
 800fa5c:	496c      	ldr	r1, [pc, #432]	; (800fc10 <ip4_frag+0x27c>)
 800fa5e:	486b      	ldr	r0, [pc, #428]	; (800fc0c <ip4_frag+0x278>)
 800fa60:	f00b fb4e 	bl	801b100 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800fa64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa66:	685b      	ldr	r3, [r3, #4]
 800fa68:	2214      	movs	r2, #20
 800fa6a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800fa6c:	4618      	mov	r0, r3
 800fa6e:	f00a fee2 	bl	801a836 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800fa72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa74:	685b      	ldr	r3, [r3, #4]
 800fa76:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800fa78:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800fa7a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800fa7e:	e064      	b.n	800fb4a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800fa80:	68fb      	ldr	r3, [r7, #12]
 800fa82:	895a      	ldrh	r2, [r3, #10]
 800fa84:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800fa86:	1ad3      	subs	r3, r2, r3
 800fa88:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	895b      	ldrh	r3, [r3, #10]
 800fa8e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800fa90:	429a      	cmp	r2, r3
 800fa92:	d906      	bls.n	800faa2 <ip4_frag+0x10e>
 800fa94:	4b5b      	ldr	r3, [pc, #364]	; (800fc04 <ip4_frag+0x270>)
 800fa96:	f240 322d 	movw	r2, #813	; 0x32d
 800fa9a:	495e      	ldr	r1, [pc, #376]	; (800fc14 <ip4_frag+0x280>)
 800fa9c:	485b      	ldr	r0, [pc, #364]	; (800fc0c <ip4_frag+0x278>)
 800fa9e:	f00b fb2f 	bl	801b100 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800faa2:	8bfa      	ldrh	r2, [r7, #30]
 800faa4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800faa8:	4293      	cmp	r3, r2
 800faaa:	bf28      	it	cs
 800faac:	4613      	movcs	r3, r2
 800faae:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800fab2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d105      	bne.n	800fac6 <ip4_frag+0x132>
        poff = 0;
 800faba:	2300      	movs	r3, #0
 800fabc:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800fabe:	68fb      	ldr	r3, [r7, #12]
 800fac0:	681b      	ldr	r3, [r3, #0]
 800fac2:	60fb      	str	r3, [r7, #12]
        continue;
 800fac4:	e041      	b.n	800fb4a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800fac6:	f7ff ff0d 	bl	800f8e4 <ip_frag_alloc_pbuf_custom_ref>
 800faca:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800facc:	69bb      	ldr	r3, [r7, #24]
 800face:	2b00      	cmp	r3, #0
 800fad0:	d103      	bne.n	800fada <ip4_frag+0x146>
        pbuf_free(rambuf);
 800fad2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fad4:	f001 fc56 	bl	8011384 <pbuf_free>
        goto memerr;
 800fad8:	e08e      	b.n	800fbf8 <ip4_frag+0x264>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800fada:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800fadc:	68fb      	ldr	r3, [r7, #12]
 800fade:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800fae0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800fae2:	4413      	add	r3, r2
 800fae4:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800fae8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800faec:	9201      	str	r2, [sp, #4]
 800faee:	9300      	str	r3, [sp, #0]
 800faf0:	4603      	mov	r3, r0
 800faf2:	2241      	movs	r2, #65	; 0x41
 800faf4:	2000      	movs	r0, #0
 800faf6:	f001 fa8b 	bl	8011010 <pbuf_alloced_custom>
 800fafa:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800fafc:	697b      	ldr	r3, [r7, #20]
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d106      	bne.n	800fb10 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800fb02:	69b8      	ldr	r0, [r7, #24]
 800fb04:	f7ff fef6 	bl	800f8f4 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800fb08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fb0a:	f001 fc3b 	bl	8011384 <pbuf_free>
        goto memerr;
 800fb0e:	e073      	b.n	800fbf8 <ip4_frag+0x264>
      }
      pbuf_ref(p);
 800fb10:	68f8      	ldr	r0, [r7, #12]
 800fb12:	f001 fcdd 	bl	80114d0 <pbuf_ref>
      pcr->original = p;
 800fb16:	69bb      	ldr	r3, [r7, #24]
 800fb18:	68fa      	ldr	r2, [r7, #12]
 800fb1a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800fb1c:	69bb      	ldr	r3, [r7, #24]
 800fb1e:	4a3e      	ldr	r2, [pc, #248]	; (800fc18 <ip4_frag+0x284>)
 800fb20:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800fb22:	6979      	ldr	r1, [r7, #20]
 800fb24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fb26:	f001 fcfb 	bl	8011520 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800fb2a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800fb2e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800fb32:	1ad3      	subs	r3, r2, r3
 800fb34:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800fb38:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d004      	beq.n	800fb4a <ip4_frag+0x1b6>
        poff = 0;
 800fb40:	2300      	movs	r3, #0
 800fb42:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800fb44:	68fb      	ldr	r3, [r7, #12]
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800fb4a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d196      	bne.n	800fa80 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800fb52:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800fb54:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800fb58:	4413      	add	r3, r2
 800fb5a:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800fb5c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800fb60:	68bb      	ldr	r3, [r7, #8]
 800fb62:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800fb64:	3b14      	subs	r3, #20
 800fb66:	429a      	cmp	r2, r3
 800fb68:	bfd4      	ite	le
 800fb6a:	2301      	movle	r3, #1
 800fb6c:	2300      	movgt	r3, #0
 800fb6e:	b2db      	uxtb	r3, r3
 800fb70:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800fb72:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800fb76:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fb7a:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800fb7c:	6a3b      	ldr	r3, [r7, #32]
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d002      	beq.n	800fb88 <ip4_frag+0x1f4>
 800fb82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d003      	beq.n	800fb90 <ip4_frag+0x1fc>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800fb88:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fb8a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800fb8e:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800fb90:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fb92:	4618      	mov	r0, r3
 800fb94:	f7fd fc60 	bl	800d458 <lwip_htons>
 800fb98:	4603      	mov	r3, r0
 800fb9a:	461a      	mov	r2, r3
 800fb9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb9e:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800fba0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800fba2:	3314      	adds	r3, #20
 800fba4:	b29b      	uxth	r3, r3
 800fba6:	4618      	mov	r0, r3
 800fba8:	f7fd fc56 	bl	800d458 <lwip_htons>
 800fbac:	4603      	mov	r3, r0
 800fbae:	461a      	mov	r2, r3
 800fbb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbb2:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800fbb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbb6:	2200      	movs	r2, #0
 800fbb8:	729a      	strb	r2, [r3, #10]
 800fbba:	2200      	movs	r2, #0
 800fbbc:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800fbbe:	68bb      	ldr	r3, [r7, #8]
 800fbc0:	695b      	ldr	r3, [r3, #20]
 800fbc2:	687a      	ldr	r2, [r7, #4]
 800fbc4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fbc6:	68b8      	ldr	r0, [r7, #8]
 800fbc8:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800fbca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fbcc:	f001 fbda 	bl	8011384 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800fbd0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800fbd4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800fbd6:	1ad3      	subs	r3, r2, r3
 800fbd8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800fbdc:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800fbe0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800fbe2:	4413      	add	r3, r2
 800fbe4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800fbe8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	f47f af1a 	bne.w	800fa26 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800fbf2:	2300      	movs	r3, #0
 800fbf4:	e002      	b.n	800fbfc <ip4_frag+0x268>
      goto memerr;
 800fbf6:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800fbf8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800fbfc:	4618      	mov	r0, r3
 800fbfe:	3748      	adds	r7, #72	; 0x48
 800fc00:	46bd      	mov	sp, r7
 800fc02:	bd80      	pop	{r7, pc}
 800fc04:	0801d8a0 	.word	0x0801d8a0
 800fc08:	0801da98 	.word	0x0801da98
 800fc0c:	0801d904 	.word	0x0801d904
 800fc10:	0801dab4 	.word	0x0801dab4
 800fc14:	0801dad4 	.word	0x0801dad4
 800fc18:	0800f92d 	.word	0x0800f92d

0800fc1c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800fc1c:	b480      	push	{r7}
 800fc1e:	b083      	sub	sp, #12
 800fc20:	af00      	add	r7, sp, #0
 800fc22:	4603      	mov	r3, r0
 800fc24:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800fc26:	4b05      	ldr	r3, [pc, #20]	; (800fc3c <ptr_to_mem+0x20>)
 800fc28:	681a      	ldr	r2, [r3, #0]
 800fc2a:	88fb      	ldrh	r3, [r7, #6]
 800fc2c:	4413      	add	r3, r2
}
 800fc2e:	4618      	mov	r0, r3
 800fc30:	370c      	adds	r7, #12
 800fc32:	46bd      	mov	sp, r7
 800fc34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc38:	4770      	bx	lr
 800fc3a:	bf00      	nop
 800fc3c:	240048d0 	.word	0x240048d0

0800fc40 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800fc40:	b480      	push	{r7}
 800fc42:	b083      	sub	sp, #12
 800fc44:	af00      	add	r7, sp, #0
 800fc46:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	4a05      	ldr	r2, [pc, #20]	; (800fc60 <mem_to_ptr+0x20>)
 800fc4c:	6812      	ldr	r2, [r2, #0]
 800fc4e:	1a9b      	subs	r3, r3, r2
 800fc50:	b29b      	uxth	r3, r3
}
 800fc52:	4618      	mov	r0, r3
 800fc54:	370c      	adds	r7, #12
 800fc56:	46bd      	mov	sp, r7
 800fc58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc5c:	4770      	bx	lr
 800fc5e:	bf00      	nop
 800fc60:	240048d0 	.word	0x240048d0

0800fc64 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800fc64:	b590      	push	{r4, r7, lr}
 800fc66:	b085      	sub	sp, #20
 800fc68:	af00      	add	r7, sp, #0
 800fc6a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800fc6c:	4b47      	ldr	r3, [pc, #284]	; (800fd8c <plug_holes+0x128>)
 800fc6e:	681b      	ldr	r3, [r3, #0]
 800fc70:	687a      	ldr	r2, [r7, #4]
 800fc72:	429a      	cmp	r2, r3
 800fc74:	d206      	bcs.n	800fc84 <plug_holes+0x20>
 800fc76:	4b46      	ldr	r3, [pc, #280]	; (800fd90 <plug_holes+0x12c>)
 800fc78:	f240 12df 	movw	r2, #479	; 0x1df
 800fc7c:	4945      	ldr	r1, [pc, #276]	; (800fd94 <plug_holes+0x130>)
 800fc7e:	4846      	ldr	r0, [pc, #280]	; (800fd98 <plug_holes+0x134>)
 800fc80:	f00b fa3e 	bl	801b100 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800fc84:	4b45      	ldr	r3, [pc, #276]	; (800fd9c <plug_holes+0x138>)
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	687a      	ldr	r2, [r7, #4]
 800fc8a:	429a      	cmp	r2, r3
 800fc8c:	d306      	bcc.n	800fc9c <plug_holes+0x38>
 800fc8e:	4b40      	ldr	r3, [pc, #256]	; (800fd90 <plug_holes+0x12c>)
 800fc90:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800fc94:	4942      	ldr	r1, [pc, #264]	; (800fda0 <plug_holes+0x13c>)
 800fc96:	4840      	ldr	r0, [pc, #256]	; (800fd98 <plug_holes+0x134>)
 800fc98:	f00b fa32 	bl	801b100 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	791b      	ldrb	r3, [r3, #4]
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d006      	beq.n	800fcb2 <plug_holes+0x4e>
 800fca4:	4b3a      	ldr	r3, [pc, #232]	; (800fd90 <plug_holes+0x12c>)
 800fca6:	f240 12e1 	movw	r2, #481	; 0x1e1
 800fcaa:	493e      	ldr	r1, [pc, #248]	; (800fda4 <plug_holes+0x140>)
 800fcac:	483a      	ldr	r0, [pc, #232]	; (800fd98 <plug_holes+0x134>)
 800fcae:	f00b fa27 	bl	801b100 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	881b      	ldrh	r3, [r3, #0]
 800fcb6:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800fcba:	4293      	cmp	r3, r2
 800fcbc:	d906      	bls.n	800fccc <plug_holes+0x68>
 800fcbe:	4b34      	ldr	r3, [pc, #208]	; (800fd90 <plug_holes+0x12c>)
 800fcc0:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800fcc4:	4938      	ldr	r1, [pc, #224]	; (800fda8 <plug_holes+0x144>)
 800fcc6:	4834      	ldr	r0, [pc, #208]	; (800fd98 <plug_holes+0x134>)
 800fcc8:	f00b fa1a 	bl	801b100 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	881b      	ldrh	r3, [r3, #0]
 800fcd0:	4618      	mov	r0, r3
 800fcd2:	f7ff ffa3 	bl	800fc1c <ptr_to_mem>
 800fcd6:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800fcd8:	687a      	ldr	r2, [r7, #4]
 800fcda:	68fb      	ldr	r3, [r7, #12]
 800fcdc:	429a      	cmp	r2, r3
 800fcde:	d025      	beq.n	800fd2c <plug_holes+0xc8>
 800fce0:	68fb      	ldr	r3, [r7, #12]
 800fce2:	791b      	ldrb	r3, [r3, #4]
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	d121      	bne.n	800fd2c <plug_holes+0xc8>
 800fce8:	4b2c      	ldr	r3, [pc, #176]	; (800fd9c <plug_holes+0x138>)
 800fcea:	681b      	ldr	r3, [r3, #0]
 800fcec:	68fa      	ldr	r2, [r7, #12]
 800fcee:	429a      	cmp	r2, r3
 800fcf0:	d01c      	beq.n	800fd2c <plug_holes+0xc8>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800fcf2:	4b2e      	ldr	r3, [pc, #184]	; (800fdac <plug_holes+0x148>)
 800fcf4:	681b      	ldr	r3, [r3, #0]
 800fcf6:	68fa      	ldr	r2, [r7, #12]
 800fcf8:	429a      	cmp	r2, r3
 800fcfa:	d102      	bne.n	800fd02 <plug_holes+0x9e>
      lfree = mem;
 800fcfc:	4a2b      	ldr	r2, [pc, #172]	; (800fdac <plug_holes+0x148>)
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	881a      	ldrh	r2, [r3, #0]
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800fd0a:	68fb      	ldr	r3, [r7, #12]
 800fd0c:	881b      	ldrh	r3, [r3, #0]
 800fd0e:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800fd12:	4293      	cmp	r3, r2
 800fd14:	d00a      	beq.n	800fd2c <plug_holes+0xc8>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800fd16:	68fb      	ldr	r3, [r7, #12]
 800fd18:	881b      	ldrh	r3, [r3, #0]
 800fd1a:	4618      	mov	r0, r3
 800fd1c:	f7ff ff7e 	bl	800fc1c <ptr_to_mem>
 800fd20:	4604      	mov	r4, r0
 800fd22:	6878      	ldr	r0, [r7, #4]
 800fd24:	f7ff ff8c 	bl	800fc40 <mem_to_ptr>
 800fd28:	4603      	mov	r3, r0
 800fd2a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	885b      	ldrh	r3, [r3, #2]
 800fd30:	4618      	mov	r0, r3
 800fd32:	f7ff ff73 	bl	800fc1c <ptr_to_mem>
 800fd36:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800fd38:	68ba      	ldr	r2, [r7, #8]
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	429a      	cmp	r2, r3
 800fd3e:	d020      	beq.n	800fd82 <plug_holes+0x11e>
 800fd40:	68bb      	ldr	r3, [r7, #8]
 800fd42:	791b      	ldrb	r3, [r3, #4]
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d11c      	bne.n	800fd82 <plug_holes+0x11e>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800fd48:	4b18      	ldr	r3, [pc, #96]	; (800fdac <plug_holes+0x148>)
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	687a      	ldr	r2, [r7, #4]
 800fd4e:	429a      	cmp	r2, r3
 800fd50:	d102      	bne.n	800fd58 <plug_holes+0xf4>
      lfree = pmem;
 800fd52:	4a16      	ldr	r2, [pc, #88]	; (800fdac <plug_holes+0x148>)
 800fd54:	68bb      	ldr	r3, [r7, #8]
 800fd56:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	881a      	ldrh	r2, [r3, #0]
 800fd5c:	68bb      	ldr	r3, [r7, #8]
 800fd5e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	881b      	ldrh	r3, [r3, #0]
 800fd64:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800fd68:	4293      	cmp	r3, r2
 800fd6a:	d00a      	beq.n	800fd82 <plug_holes+0x11e>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	881b      	ldrh	r3, [r3, #0]
 800fd70:	4618      	mov	r0, r3
 800fd72:	f7ff ff53 	bl	800fc1c <ptr_to_mem>
 800fd76:	4604      	mov	r4, r0
 800fd78:	68b8      	ldr	r0, [r7, #8]
 800fd7a:	f7ff ff61 	bl	800fc40 <mem_to_ptr>
 800fd7e:	4603      	mov	r3, r0
 800fd80:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800fd82:	bf00      	nop
 800fd84:	3714      	adds	r7, #20
 800fd86:	46bd      	mov	sp, r7
 800fd88:	bd90      	pop	{r4, r7, pc}
 800fd8a:	bf00      	nop
 800fd8c:	240048d0 	.word	0x240048d0
 800fd90:	0801dae4 	.word	0x0801dae4
 800fd94:	0801db30 	.word	0x0801db30
 800fd98:	0801db48 	.word	0x0801db48
 800fd9c:	240048d4 	.word	0x240048d4
 800fda0:	0801db70 	.word	0x0801db70
 800fda4:	0801db8c 	.word	0x0801db8c
 800fda8:	0801dba8 	.word	0x0801dba8
 800fdac:	240048dc 	.word	0x240048dc

0800fdb0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800fdb0:	b580      	push	{r7, lr}
 800fdb2:	b082      	sub	sp, #8
 800fdb4:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800fdb6:	4b1d      	ldr	r3, [pc, #116]	; (800fe2c <mem_init+0x7c>)
 800fdb8:	4a1d      	ldr	r2, [pc, #116]	; (800fe30 <mem_init+0x80>)
 800fdba:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800fdbc:	4b1b      	ldr	r3, [pc, #108]	; (800fe2c <mem_init+0x7c>)
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800fdc8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	2200      	movs	r2, #0
 800fdce:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	2200      	movs	r2, #0
 800fdd4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800fdd6:	f643 70e8 	movw	r0, #16360	; 0x3fe8
 800fdda:	f7ff ff1f 	bl	800fc1c <ptr_to_mem>
 800fdde:	4602      	mov	r2, r0
 800fde0:	4b14      	ldr	r3, [pc, #80]	; (800fe34 <mem_init+0x84>)
 800fde2:	601a      	str	r2, [r3, #0]
  ram_end->used = 1;
 800fde4:	4b13      	ldr	r3, [pc, #76]	; (800fe34 <mem_init+0x84>)
 800fde6:	681b      	ldr	r3, [r3, #0]
 800fde8:	2201      	movs	r2, #1
 800fdea:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800fdec:	4b11      	ldr	r3, [pc, #68]	; (800fe34 <mem_init+0x84>)
 800fdee:	681b      	ldr	r3, [r3, #0]
 800fdf0:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800fdf4:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800fdf6:	4b0f      	ldr	r3, [pc, #60]	; (800fe34 <mem_init+0x84>)
 800fdf8:	681b      	ldr	r3, [r3, #0]
 800fdfa:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800fdfe:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800fe00:	4b0a      	ldr	r3, [pc, #40]	; (800fe2c <mem_init+0x7c>)
 800fe02:	681b      	ldr	r3, [r3, #0]
 800fe04:	4a0c      	ldr	r2, [pc, #48]	; (800fe38 <mem_init+0x88>)
 800fe06:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800fe08:	480c      	ldr	r0, [pc, #48]	; (800fe3c <mem_init+0x8c>)
 800fe0a:	f001 fdef 	bl	80119ec <sys_mutex_new>
 800fe0e:	4603      	mov	r3, r0
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d006      	beq.n	800fe22 <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800fe14:	4b0a      	ldr	r3, [pc, #40]	; (800fe40 <mem_init+0x90>)
 800fe16:	f240 221f 	movw	r2, #543	; 0x21f
 800fe1a:	490a      	ldr	r1, [pc, #40]	; (800fe44 <mem_init+0x94>)
 800fe1c:	480a      	ldr	r0, [pc, #40]	; (800fe48 <mem_init+0x98>)
 800fe1e:	f00b f96f 	bl	801b100 <iprintf>
  }
}
 800fe22:	bf00      	nop
 800fe24:	3708      	adds	r7, #8
 800fe26:	46bd      	mov	sp, r7
 800fe28:	bd80      	pop	{r7, pc}
 800fe2a:	bf00      	nop
 800fe2c:	240048d0 	.word	0x240048d0
 800fe30:	30044000 	.word	0x30044000
 800fe34:	240048d4 	.word	0x240048d4
 800fe38:	240048dc 	.word	0x240048dc
 800fe3c:	240048d8 	.word	0x240048d8
 800fe40:	0801dae4 	.word	0x0801dae4
 800fe44:	0801dbd4 	.word	0x0801dbd4
 800fe48:	0801db48 	.word	0x0801db48

0800fe4c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800fe4c:	b580      	push	{r7, lr}
 800fe4e:	b086      	sub	sp, #24
 800fe50:	af00      	add	r7, sp, #0
 800fe52:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800fe54:	6878      	ldr	r0, [r7, #4]
 800fe56:	f7ff fef3 	bl	800fc40 <mem_to_ptr>
 800fe5a:	4603      	mov	r3, r0
 800fe5c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	881b      	ldrh	r3, [r3, #0]
 800fe62:	4618      	mov	r0, r3
 800fe64:	f7ff feda 	bl	800fc1c <ptr_to_mem>
 800fe68:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	885b      	ldrh	r3, [r3, #2]
 800fe6e:	4618      	mov	r0, r3
 800fe70:	f7ff fed4 	bl	800fc1c <ptr_to_mem>
 800fe74:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	881b      	ldrh	r3, [r3, #0]
 800fe7a:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800fe7e:	4293      	cmp	r3, r2
 800fe80:	d819      	bhi.n	800feb6 <mem_link_valid+0x6a>
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	885b      	ldrh	r3, [r3, #2]
 800fe86:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800fe8a:	4293      	cmp	r3, r2
 800fe8c:	d813      	bhi.n	800feb6 <mem_link_valid+0x6a>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800fe92:	8afa      	ldrh	r2, [r7, #22]
 800fe94:	429a      	cmp	r2, r3
 800fe96:	d004      	beq.n	800fea2 <mem_link_valid+0x56>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800fe98:	68fb      	ldr	r3, [r7, #12]
 800fe9a:	881b      	ldrh	r3, [r3, #0]
 800fe9c:	8afa      	ldrh	r2, [r7, #22]
 800fe9e:	429a      	cmp	r2, r3
 800fea0:	d109      	bne.n	800feb6 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800fea2:	4b08      	ldr	r3, [pc, #32]	; (800fec4 <mem_link_valid+0x78>)
 800fea4:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800fea6:	693a      	ldr	r2, [r7, #16]
 800fea8:	429a      	cmp	r2, r3
 800feaa:	d006      	beq.n	800feba <mem_link_valid+0x6e>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800feac:	693b      	ldr	r3, [r7, #16]
 800feae:	885b      	ldrh	r3, [r3, #2]
 800feb0:	8afa      	ldrh	r2, [r7, #22]
 800feb2:	429a      	cmp	r2, r3
 800feb4:	d001      	beq.n	800feba <mem_link_valid+0x6e>
    return 0;
 800feb6:	2300      	movs	r3, #0
 800feb8:	e000      	b.n	800febc <mem_link_valid+0x70>
  }
  return 1;
 800feba:	2301      	movs	r3, #1
}
 800febc:	4618      	mov	r0, r3
 800febe:	3718      	adds	r7, #24
 800fec0:	46bd      	mov	sp, r7
 800fec2:	bd80      	pop	{r7, pc}
 800fec4:	240048d4 	.word	0x240048d4

0800fec8 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800fec8:	b580      	push	{r7, lr}
 800feca:	b088      	sub	sp, #32
 800fecc:	af00      	add	r7, sp, #0
 800fece:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d070      	beq.n	800ffb8 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	f003 0303 	and.w	r3, r3, #3
 800fedc:	2b00      	cmp	r3, #0
 800fede:	d00d      	beq.n	800fefc <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800fee0:	4b37      	ldr	r3, [pc, #220]	; (800ffc0 <mem_free+0xf8>)
 800fee2:	f240 2273 	movw	r2, #627	; 0x273
 800fee6:	4937      	ldr	r1, [pc, #220]	; (800ffc4 <mem_free+0xfc>)
 800fee8:	4837      	ldr	r0, [pc, #220]	; (800ffc8 <mem_free+0x100>)
 800feea:	f00b f909 	bl	801b100 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800feee:	f001 fddb 	bl	8011aa8 <sys_arch_protect>
 800fef2:	60f8      	str	r0, [r7, #12]
 800fef4:	68f8      	ldr	r0, [r7, #12]
 800fef6:	f001 fde5 	bl	8011ac4 <sys_arch_unprotect>
    return;
 800fefa:	e05e      	b.n	800ffba <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	3b08      	subs	r3, #8
 800ff00:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800ff02:	4b32      	ldr	r3, [pc, #200]	; (800ffcc <mem_free+0x104>)
 800ff04:	681b      	ldr	r3, [r3, #0]
 800ff06:	69fa      	ldr	r2, [r7, #28]
 800ff08:	429a      	cmp	r2, r3
 800ff0a:	d306      	bcc.n	800ff1a <mem_free+0x52>
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	f103 020c 	add.w	r2, r3, #12
 800ff12:	4b2f      	ldr	r3, [pc, #188]	; (800ffd0 <mem_free+0x108>)
 800ff14:	681b      	ldr	r3, [r3, #0]
 800ff16:	429a      	cmp	r2, r3
 800ff18:	d90d      	bls.n	800ff36 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800ff1a:	4b29      	ldr	r3, [pc, #164]	; (800ffc0 <mem_free+0xf8>)
 800ff1c:	f240 227f 	movw	r2, #639	; 0x27f
 800ff20:	492c      	ldr	r1, [pc, #176]	; (800ffd4 <mem_free+0x10c>)
 800ff22:	4829      	ldr	r0, [pc, #164]	; (800ffc8 <mem_free+0x100>)
 800ff24:	f00b f8ec 	bl	801b100 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ff28:	f001 fdbe 	bl	8011aa8 <sys_arch_protect>
 800ff2c:	6138      	str	r0, [r7, #16]
 800ff2e:	6938      	ldr	r0, [r7, #16]
 800ff30:	f001 fdc8 	bl	8011ac4 <sys_arch_unprotect>
    return;
 800ff34:	e041      	b.n	800ffba <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800ff36:	4828      	ldr	r0, [pc, #160]	; (800ffd8 <mem_free+0x110>)
 800ff38:	f001 fd74 	bl	8011a24 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800ff3c:	69fb      	ldr	r3, [r7, #28]
 800ff3e:	791b      	ldrb	r3, [r3, #4]
 800ff40:	2b00      	cmp	r3, #0
 800ff42:	d110      	bne.n	800ff66 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800ff44:	4b1e      	ldr	r3, [pc, #120]	; (800ffc0 <mem_free+0xf8>)
 800ff46:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800ff4a:	4924      	ldr	r1, [pc, #144]	; (800ffdc <mem_free+0x114>)
 800ff4c:	481e      	ldr	r0, [pc, #120]	; (800ffc8 <mem_free+0x100>)
 800ff4e:	f00b f8d7 	bl	801b100 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800ff52:	4821      	ldr	r0, [pc, #132]	; (800ffd8 <mem_free+0x110>)
 800ff54:	f001 fd75 	bl	8011a42 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ff58:	f001 fda6 	bl	8011aa8 <sys_arch_protect>
 800ff5c:	6178      	str	r0, [r7, #20]
 800ff5e:	6978      	ldr	r0, [r7, #20]
 800ff60:	f001 fdb0 	bl	8011ac4 <sys_arch_unprotect>
    return;
 800ff64:	e029      	b.n	800ffba <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800ff66:	69f8      	ldr	r0, [r7, #28]
 800ff68:	f7ff ff70 	bl	800fe4c <mem_link_valid>
 800ff6c:	4603      	mov	r3, r0
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	d110      	bne.n	800ff94 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800ff72:	4b13      	ldr	r3, [pc, #76]	; (800ffc0 <mem_free+0xf8>)
 800ff74:	f240 2295 	movw	r2, #661	; 0x295
 800ff78:	4919      	ldr	r1, [pc, #100]	; (800ffe0 <mem_free+0x118>)
 800ff7a:	4813      	ldr	r0, [pc, #76]	; (800ffc8 <mem_free+0x100>)
 800ff7c:	f00b f8c0 	bl	801b100 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800ff80:	4815      	ldr	r0, [pc, #84]	; (800ffd8 <mem_free+0x110>)
 800ff82:	f001 fd5e 	bl	8011a42 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ff86:	f001 fd8f 	bl	8011aa8 <sys_arch_protect>
 800ff8a:	61b8      	str	r0, [r7, #24]
 800ff8c:	69b8      	ldr	r0, [r7, #24]
 800ff8e:	f001 fd99 	bl	8011ac4 <sys_arch_unprotect>
    return;
 800ff92:	e012      	b.n	800ffba <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800ff94:	69fb      	ldr	r3, [r7, #28]
 800ff96:	2200      	movs	r2, #0
 800ff98:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800ff9a:	4b12      	ldr	r3, [pc, #72]	; (800ffe4 <mem_free+0x11c>)
 800ff9c:	681b      	ldr	r3, [r3, #0]
 800ff9e:	69fa      	ldr	r2, [r7, #28]
 800ffa0:	429a      	cmp	r2, r3
 800ffa2:	d202      	bcs.n	800ffaa <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800ffa4:	4a0f      	ldr	r2, [pc, #60]	; (800ffe4 <mem_free+0x11c>)
 800ffa6:	69fb      	ldr	r3, [r7, #28]
 800ffa8:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800ffaa:	69f8      	ldr	r0, [r7, #28]
 800ffac:	f7ff fe5a 	bl	800fc64 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800ffb0:	4809      	ldr	r0, [pc, #36]	; (800ffd8 <mem_free+0x110>)
 800ffb2:	f001 fd46 	bl	8011a42 <sys_mutex_unlock>
 800ffb6:	e000      	b.n	800ffba <mem_free+0xf2>
    return;
 800ffb8:	bf00      	nop
}
 800ffba:	3720      	adds	r7, #32
 800ffbc:	46bd      	mov	sp, r7
 800ffbe:	bd80      	pop	{r7, pc}
 800ffc0:	0801dae4 	.word	0x0801dae4
 800ffc4:	0801dbf0 	.word	0x0801dbf0
 800ffc8:	0801db48 	.word	0x0801db48
 800ffcc:	240048d0 	.word	0x240048d0
 800ffd0:	240048d4 	.word	0x240048d4
 800ffd4:	0801dc14 	.word	0x0801dc14
 800ffd8:	240048d8 	.word	0x240048d8
 800ffdc:	0801dc30 	.word	0x0801dc30
 800ffe0:	0801dc58 	.word	0x0801dc58
 800ffe4:	240048dc 	.word	0x240048dc

0800ffe8 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800ffe8:	b580      	push	{r7, lr}
 800ffea:	b088      	sub	sp, #32
 800ffec:	af00      	add	r7, sp, #0
 800ffee:	6078      	str	r0, [r7, #4]
 800fff0:	460b      	mov	r3, r1
 800fff2:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800fff4:	887b      	ldrh	r3, [r7, #2]
 800fff6:	3303      	adds	r3, #3
 800fff8:	b29b      	uxth	r3, r3
 800fffa:	f023 0303 	bic.w	r3, r3, #3
 800fffe:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8010000:	8bfb      	ldrh	r3, [r7, #30]
 8010002:	2b0b      	cmp	r3, #11
 8010004:	d801      	bhi.n	801000a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8010006:	230c      	movs	r3, #12
 8010008:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 801000a:	8bfb      	ldrh	r3, [r7, #30]
 801000c:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8010010:	4293      	cmp	r3, r2
 8010012:	d803      	bhi.n	801001c <mem_trim+0x34>
 8010014:	8bfa      	ldrh	r2, [r7, #30]
 8010016:	887b      	ldrh	r3, [r7, #2]
 8010018:	429a      	cmp	r2, r3
 801001a:	d201      	bcs.n	8010020 <mem_trim+0x38>
    return NULL;
 801001c:	2300      	movs	r3, #0
 801001e:	e0dc      	b.n	80101da <mem_trim+0x1f2>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8010020:	4b70      	ldr	r3, [pc, #448]	; (80101e4 <mem_trim+0x1fc>)
 8010022:	681b      	ldr	r3, [r3, #0]
 8010024:	687a      	ldr	r2, [r7, #4]
 8010026:	429a      	cmp	r2, r3
 8010028:	d304      	bcc.n	8010034 <mem_trim+0x4c>
 801002a:	4b6f      	ldr	r3, [pc, #444]	; (80101e8 <mem_trim+0x200>)
 801002c:	681b      	ldr	r3, [r3, #0]
 801002e:	687a      	ldr	r2, [r7, #4]
 8010030:	429a      	cmp	r2, r3
 8010032:	d306      	bcc.n	8010042 <mem_trim+0x5a>
 8010034:	4b6d      	ldr	r3, [pc, #436]	; (80101ec <mem_trim+0x204>)
 8010036:	f240 22d2 	movw	r2, #722	; 0x2d2
 801003a:	496d      	ldr	r1, [pc, #436]	; (80101f0 <mem_trim+0x208>)
 801003c:	486d      	ldr	r0, [pc, #436]	; (80101f4 <mem_trim+0x20c>)
 801003e:	f00b f85f 	bl	801b100 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8010042:	4b68      	ldr	r3, [pc, #416]	; (80101e4 <mem_trim+0x1fc>)
 8010044:	681b      	ldr	r3, [r3, #0]
 8010046:	687a      	ldr	r2, [r7, #4]
 8010048:	429a      	cmp	r2, r3
 801004a:	d304      	bcc.n	8010056 <mem_trim+0x6e>
 801004c:	4b66      	ldr	r3, [pc, #408]	; (80101e8 <mem_trim+0x200>)
 801004e:	681b      	ldr	r3, [r3, #0]
 8010050:	687a      	ldr	r2, [r7, #4]
 8010052:	429a      	cmp	r2, r3
 8010054:	d307      	bcc.n	8010066 <mem_trim+0x7e>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8010056:	f001 fd27 	bl	8011aa8 <sys_arch_protect>
 801005a:	60b8      	str	r0, [r7, #8]
 801005c:	68b8      	ldr	r0, [r7, #8]
 801005e:	f001 fd31 	bl	8011ac4 <sys_arch_unprotect>
    return rmem;
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	e0b9      	b.n	80101da <mem_trim+0x1f2>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	3b08      	subs	r3, #8
 801006a:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 801006c:	69b8      	ldr	r0, [r7, #24]
 801006e:	f7ff fde7 	bl	800fc40 <mem_to_ptr>
 8010072:	4603      	mov	r3, r0
 8010074:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8010076:	69bb      	ldr	r3, [r7, #24]
 8010078:	881a      	ldrh	r2, [r3, #0]
 801007a:	8afb      	ldrh	r3, [r7, #22]
 801007c:	1ad3      	subs	r3, r2, r3
 801007e:	b29b      	uxth	r3, r3
 8010080:	3b08      	subs	r3, #8
 8010082:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8010084:	8bfa      	ldrh	r2, [r7, #30]
 8010086:	8abb      	ldrh	r3, [r7, #20]
 8010088:	429a      	cmp	r2, r3
 801008a:	d906      	bls.n	801009a <mem_trim+0xb2>
 801008c:	4b57      	ldr	r3, [pc, #348]	; (80101ec <mem_trim+0x204>)
 801008e:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8010092:	4959      	ldr	r1, [pc, #356]	; (80101f8 <mem_trim+0x210>)
 8010094:	4857      	ldr	r0, [pc, #348]	; (80101f4 <mem_trim+0x20c>)
 8010096:	f00b f833 	bl	801b100 <iprintf>
  if (newsize > size) {
 801009a:	8bfa      	ldrh	r2, [r7, #30]
 801009c:	8abb      	ldrh	r3, [r7, #20]
 801009e:	429a      	cmp	r2, r3
 80100a0:	d901      	bls.n	80100a6 <mem_trim+0xbe>
    /* not supported */
    return NULL;
 80100a2:	2300      	movs	r3, #0
 80100a4:	e099      	b.n	80101da <mem_trim+0x1f2>
  }
  if (newsize == size) {
 80100a6:	8bfa      	ldrh	r2, [r7, #30]
 80100a8:	8abb      	ldrh	r3, [r7, #20]
 80100aa:	429a      	cmp	r2, r3
 80100ac:	d101      	bne.n	80100b2 <mem_trim+0xca>
    /* No change in size, simply return */
    return rmem;
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	e093      	b.n	80101da <mem_trim+0x1f2>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80100b2:	4852      	ldr	r0, [pc, #328]	; (80101fc <mem_trim+0x214>)
 80100b4:	f001 fcb6 	bl	8011a24 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 80100b8:	69bb      	ldr	r3, [r7, #24]
 80100ba:	881b      	ldrh	r3, [r3, #0]
 80100bc:	4618      	mov	r0, r3
 80100be:	f7ff fdad 	bl	800fc1c <ptr_to_mem>
 80100c2:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 80100c4:	693b      	ldr	r3, [r7, #16]
 80100c6:	791b      	ldrb	r3, [r3, #4]
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	d141      	bne.n	8010150 <mem_trim+0x168>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80100cc:	69bb      	ldr	r3, [r7, #24]
 80100ce:	881b      	ldrh	r3, [r3, #0]
 80100d0:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 80100d4:	4293      	cmp	r3, r2
 80100d6:	d106      	bne.n	80100e6 <mem_trim+0xfe>
 80100d8:	4b44      	ldr	r3, [pc, #272]	; (80101ec <mem_trim+0x204>)
 80100da:	f240 22f5 	movw	r2, #757	; 0x2f5
 80100de:	4948      	ldr	r1, [pc, #288]	; (8010200 <mem_trim+0x218>)
 80100e0:	4844      	ldr	r0, [pc, #272]	; (80101f4 <mem_trim+0x20c>)
 80100e2:	f00b f80d 	bl	801b100 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80100e6:	693b      	ldr	r3, [r7, #16]
 80100e8:	881b      	ldrh	r3, [r3, #0]
 80100ea:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80100ec:	8afa      	ldrh	r2, [r7, #22]
 80100ee:	8bfb      	ldrh	r3, [r7, #30]
 80100f0:	4413      	add	r3, r2
 80100f2:	b29b      	uxth	r3, r3
 80100f4:	3308      	adds	r3, #8
 80100f6:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80100f8:	4b42      	ldr	r3, [pc, #264]	; (8010204 <mem_trim+0x21c>)
 80100fa:	681b      	ldr	r3, [r3, #0]
 80100fc:	693a      	ldr	r2, [r7, #16]
 80100fe:	429a      	cmp	r2, r3
 8010100:	d106      	bne.n	8010110 <mem_trim+0x128>
      lfree = ptr_to_mem(ptr2);
 8010102:	89fb      	ldrh	r3, [r7, #14]
 8010104:	4618      	mov	r0, r3
 8010106:	f7ff fd89 	bl	800fc1c <ptr_to_mem>
 801010a:	4602      	mov	r2, r0
 801010c:	4b3d      	ldr	r3, [pc, #244]	; (8010204 <mem_trim+0x21c>)
 801010e:	601a      	str	r2, [r3, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8010110:	89fb      	ldrh	r3, [r7, #14]
 8010112:	4618      	mov	r0, r3
 8010114:	f7ff fd82 	bl	800fc1c <ptr_to_mem>
 8010118:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 801011a:	693b      	ldr	r3, [r7, #16]
 801011c:	2200      	movs	r2, #0
 801011e:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8010120:	693b      	ldr	r3, [r7, #16]
 8010122:	89ba      	ldrh	r2, [r7, #12]
 8010124:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8010126:	693b      	ldr	r3, [r7, #16]
 8010128:	8afa      	ldrh	r2, [r7, #22]
 801012a:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 801012c:	69bb      	ldr	r3, [r7, #24]
 801012e:	89fa      	ldrh	r2, [r7, #14]
 8010130:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8010132:	693b      	ldr	r3, [r7, #16]
 8010134:	881b      	ldrh	r3, [r3, #0]
 8010136:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 801013a:	4293      	cmp	r3, r2
 801013c:	d049      	beq.n	80101d2 <mem_trim+0x1ea>
      ptr_to_mem(mem2->next)->prev = ptr2;
 801013e:	693b      	ldr	r3, [r7, #16]
 8010140:	881b      	ldrh	r3, [r3, #0]
 8010142:	4618      	mov	r0, r3
 8010144:	f7ff fd6a 	bl	800fc1c <ptr_to_mem>
 8010148:	4602      	mov	r2, r0
 801014a:	89fb      	ldrh	r3, [r7, #14]
 801014c:	8053      	strh	r3, [r2, #2]
 801014e:	e040      	b.n	80101d2 <mem_trim+0x1ea>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8010150:	8bfb      	ldrh	r3, [r7, #30]
 8010152:	f103 0214 	add.w	r2, r3, #20
 8010156:	8abb      	ldrh	r3, [r7, #20]
 8010158:	429a      	cmp	r2, r3
 801015a:	d83a      	bhi.n	80101d2 <mem_trim+0x1ea>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801015c:	8afa      	ldrh	r2, [r7, #22]
 801015e:	8bfb      	ldrh	r3, [r7, #30]
 8010160:	4413      	add	r3, r2
 8010162:	b29b      	uxth	r3, r3
 8010164:	3308      	adds	r3, #8
 8010166:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8010168:	69bb      	ldr	r3, [r7, #24]
 801016a:	881b      	ldrh	r3, [r3, #0]
 801016c:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8010170:	4293      	cmp	r3, r2
 8010172:	d106      	bne.n	8010182 <mem_trim+0x19a>
 8010174:	4b1d      	ldr	r3, [pc, #116]	; (80101ec <mem_trim+0x204>)
 8010176:	f240 3216 	movw	r2, #790	; 0x316
 801017a:	4921      	ldr	r1, [pc, #132]	; (8010200 <mem_trim+0x218>)
 801017c:	481d      	ldr	r0, [pc, #116]	; (80101f4 <mem_trim+0x20c>)
 801017e:	f00a ffbf 	bl	801b100 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8010182:	89fb      	ldrh	r3, [r7, #14]
 8010184:	4618      	mov	r0, r3
 8010186:	f7ff fd49 	bl	800fc1c <ptr_to_mem>
 801018a:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 801018c:	4b1d      	ldr	r3, [pc, #116]	; (8010204 <mem_trim+0x21c>)
 801018e:	681b      	ldr	r3, [r3, #0]
 8010190:	693a      	ldr	r2, [r7, #16]
 8010192:	429a      	cmp	r2, r3
 8010194:	d202      	bcs.n	801019c <mem_trim+0x1b4>
      lfree = mem2;
 8010196:	4a1b      	ldr	r2, [pc, #108]	; (8010204 <mem_trim+0x21c>)
 8010198:	693b      	ldr	r3, [r7, #16]
 801019a:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 801019c:	693b      	ldr	r3, [r7, #16]
 801019e:	2200      	movs	r2, #0
 80101a0:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80101a2:	69bb      	ldr	r3, [r7, #24]
 80101a4:	881a      	ldrh	r2, [r3, #0]
 80101a6:	693b      	ldr	r3, [r7, #16]
 80101a8:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80101aa:	693b      	ldr	r3, [r7, #16]
 80101ac:	8afa      	ldrh	r2, [r7, #22]
 80101ae:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80101b0:	69bb      	ldr	r3, [r7, #24]
 80101b2:	89fa      	ldrh	r2, [r7, #14]
 80101b4:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80101b6:	693b      	ldr	r3, [r7, #16]
 80101b8:	881b      	ldrh	r3, [r3, #0]
 80101ba:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 80101be:	4293      	cmp	r3, r2
 80101c0:	d007      	beq.n	80101d2 <mem_trim+0x1ea>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80101c2:	693b      	ldr	r3, [r7, #16]
 80101c4:	881b      	ldrh	r3, [r3, #0]
 80101c6:	4618      	mov	r0, r3
 80101c8:	f7ff fd28 	bl	800fc1c <ptr_to_mem>
 80101cc:	4602      	mov	r2, r0
 80101ce:	89fb      	ldrh	r3, [r7, #14]
 80101d0:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80101d2:	480a      	ldr	r0, [pc, #40]	; (80101fc <mem_trim+0x214>)
 80101d4:	f001 fc35 	bl	8011a42 <sys_mutex_unlock>
  return rmem;
 80101d8:	687b      	ldr	r3, [r7, #4]
}
 80101da:	4618      	mov	r0, r3
 80101dc:	3720      	adds	r7, #32
 80101de:	46bd      	mov	sp, r7
 80101e0:	bd80      	pop	{r7, pc}
 80101e2:	bf00      	nop
 80101e4:	240048d0 	.word	0x240048d0
 80101e8:	240048d4 	.word	0x240048d4
 80101ec:	0801dae4 	.word	0x0801dae4
 80101f0:	0801dc8c 	.word	0x0801dc8c
 80101f4:	0801db48 	.word	0x0801db48
 80101f8:	0801dca4 	.word	0x0801dca4
 80101fc:	240048d8 	.word	0x240048d8
 8010200:	0801dcc4 	.word	0x0801dcc4
 8010204:	240048dc 	.word	0x240048dc

08010208 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8010208:	b580      	push	{r7, lr}
 801020a:	b088      	sub	sp, #32
 801020c:	af00      	add	r7, sp, #0
 801020e:	4603      	mov	r3, r0
 8010210:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8010212:	88fb      	ldrh	r3, [r7, #6]
 8010214:	2b00      	cmp	r3, #0
 8010216:	d101      	bne.n	801021c <mem_malloc+0x14>
    return NULL;
 8010218:	2300      	movs	r3, #0
 801021a:	e0e6      	b.n	80103ea <mem_malloc+0x1e2>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 801021c:	88fb      	ldrh	r3, [r7, #6]
 801021e:	3303      	adds	r3, #3
 8010220:	b29b      	uxth	r3, r3
 8010222:	f023 0303 	bic.w	r3, r3, #3
 8010226:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8010228:	8bbb      	ldrh	r3, [r7, #28]
 801022a:	2b0b      	cmp	r3, #11
 801022c:	d801      	bhi.n	8010232 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 801022e:	230c      	movs	r3, #12
 8010230:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8010232:	8bbb      	ldrh	r3, [r7, #28]
 8010234:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8010238:	4293      	cmp	r3, r2
 801023a:	d803      	bhi.n	8010244 <mem_malloc+0x3c>
 801023c:	8bba      	ldrh	r2, [r7, #28]
 801023e:	88fb      	ldrh	r3, [r7, #6]
 8010240:	429a      	cmp	r2, r3
 8010242:	d201      	bcs.n	8010248 <mem_malloc+0x40>
    return NULL;
 8010244:	2300      	movs	r3, #0
 8010246:	e0d0      	b.n	80103ea <mem_malloc+0x1e2>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8010248:	486a      	ldr	r0, [pc, #424]	; (80103f4 <mem_malloc+0x1ec>)
 801024a:	f001 fbeb 	bl	8011a24 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801024e:	4b6a      	ldr	r3, [pc, #424]	; (80103f8 <mem_malloc+0x1f0>)
 8010250:	681b      	ldr	r3, [r3, #0]
 8010252:	4618      	mov	r0, r3
 8010254:	f7ff fcf4 	bl	800fc40 <mem_to_ptr>
 8010258:	4603      	mov	r3, r0
 801025a:	83fb      	strh	r3, [r7, #30]
 801025c:	e0b9      	b.n	80103d2 <mem_malloc+0x1ca>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 801025e:	8bfb      	ldrh	r3, [r7, #30]
 8010260:	4618      	mov	r0, r3
 8010262:	f7ff fcdb 	bl	800fc1c <ptr_to_mem>
 8010266:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8010268:	697b      	ldr	r3, [r7, #20]
 801026a:	791b      	ldrb	r3, [r3, #4]
 801026c:	2b00      	cmp	r3, #0
 801026e:	f040 80a9 	bne.w	80103c4 <mem_malloc+0x1bc>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8010272:	697b      	ldr	r3, [r7, #20]
 8010274:	881b      	ldrh	r3, [r3, #0]
 8010276:	461a      	mov	r2, r3
 8010278:	8bfb      	ldrh	r3, [r7, #30]
 801027a:	1ad3      	subs	r3, r2, r3
 801027c:	f1a3 0208 	sub.w	r2, r3, #8
 8010280:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8010282:	429a      	cmp	r2, r3
 8010284:	f0c0 809e 	bcc.w	80103c4 <mem_malloc+0x1bc>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8010288:	697b      	ldr	r3, [r7, #20]
 801028a:	881b      	ldrh	r3, [r3, #0]
 801028c:	461a      	mov	r2, r3
 801028e:	8bfb      	ldrh	r3, [r7, #30]
 8010290:	1ad3      	subs	r3, r2, r3
 8010292:	f1a3 0208 	sub.w	r2, r3, #8
 8010296:	8bbb      	ldrh	r3, [r7, #28]
 8010298:	3314      	adds	r3, #20
 801029a:	429a      	cmp	r2, r3
 801029c:	d335      	bcc.n	801030a <mem_malloc+0x102>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 801029e:	8bfa      	ldrh	r2, [r7, #30]
 80102a0:	8bbb      	ldrh	r3, [r7, #28]
 80102a2:	4413      	add	r3, r2
 80102a4:	b29b      	uxth	r3, r3
 80102a6:	3308      	adds	r3, #8
 80102a8:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80102aa:	8a7b      	ldrh	r3, [r7, #18]
 80102ac:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 80102b0:	4293      	cmp	r3, r2
 80102b2:	d106      	bne.n	80102c2 <mem_malloc+0xba>
 80102b4:	4b51      	ldr	r3, [pc, #324]	; (80103fc <mem_malloc+0x1f4>)
 80102b6:	f240 3287 	movw	r2, #903	; 0x387
 80102ba:	4951      	ldr	r1, [pc, #324]	; (8010400 <mem_malloc+0x1f8>)
 80102bc:	4851      	ldr	r0, [pc, #324]	; (8010404 <mem_malloc+0x1fc>)
 80102be:	f00a ff1f 	bl	801b100 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 80102c2:	8a7b      	ldrh	r3, [r7, #18]
 80102c4:	4618      	mov	r0, r3
 80102c6:	f7ff fca9 	bl	800fc1c <ptr_to_mem>
 80102ca:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 80102cc:	68fb      	ldr	r3, [r7, #12]
 80102ce:	2200      	movs	r2, #0
 80102d0:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80102d2:	697b      	ldr	r3, [r7, #20]
 80102d4:	881a      	ldrh	r2, [r3, #0]
 80102d6:	68fb      	ldr	r3, [r7, #12]
 80102d8:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80102da:	68fb      	ldr	r3, [r7, #12]
 80102dc:	8bfa      	ldrh	r2, [r7, #30]
 80102de:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80102e0:	697b      	ldr	r3, [r7, #20]
 80102e2:	8a7a      	ldrh	r2, [r7, #18]
 80102e4:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80102e6:	697b      	ldr	r3, [r7, #20]
 80102e8:	2201      	movs	r2, #1
 80102ea:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80102ec:	68fb      	ldr	r3, [r7, #12]
 80102ee:	881b      	ldrh	r3, [r3, #0]
 80102f0:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 80102f4:	4293      	cmp	r3, r2
 80102f6:	d00b      	beq.n	8010310 <mem_malloc+0x108>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80102f8:	68fb      	ldr	r3, [r7, #12]
 80102fa:	881b      	ldrh	r3, [r3, #0]
 80102fc:	4618      	mov	r0, r3
 80102fe:	f7ff fc8d 	bl	800fc1c <ptr_to_mem>
 8010302:	4602      	mov	r2, r0
 8010304:	8a7b      	ldrh	r3, [r7, #18]
 8010306:	8053      	strh	r3, [r2, #2]
 8010308:	e002      	b.n	8010310 <mem_malloc+0x108>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 801030a:	697b      	ldr	r3, [r7, #20]
 801030c:	2201      	movs	r2, #1
 801030e:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8010310:	4b39      	ldr	r3, [pc, #228]	; (80103f8 <mem_malloc+0x1f0>)
 8010312:	681b      	ldr	r3, [r3, #0]
 8010314:	697a      	ldr	r2, [r7, #20]
 8010316:	429a      	cmp	r2, r3
 8010318:	d127      	bne.n	801036a <mem_malloc+0x162>
          struct mem *cur = lfree;
 801031a:	4b37      	ldr	r3, [pc, #220]	; (80103f8 <mem_malloc+0x1f0>)
 801031c:	681b      	ldr	r3, [r3, #0]
 801031e:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8010320:	e005      	b.n	801032e <mem_malloc+0x126>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8010322:	69bb      	ldr	r3, [r7, #24]
 8010324:	881b      	ldrh	r3, [r3, #0]
 8010326:	4618      	mov	r0, r3
 8010328:	f7ff fc78 	bl	800fc1c <ptr_to_mem>
 801032c:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 801032e:	69bb      	ldr	r3, [r7, #24]
 8010330:	791b      	ldrb	r3, [r3, #4]
 8010332:	2b00      	cmp	r3, #0
 8010334:	d004      	beq.n	8010340 <mem_malloc+0x138>
 8010336:	4b34      	ldr	r3, [pc, #208]	; (8010408 <mem_malloc+0x200>)
 8010338:	681b      	ldr	r3, [r3, #0]
 801033a:	69ba      	ldr	r2, [r7, #24]
 801033c:	429a      	cmp	r2, r3
 801033e:	d1f0      	bne.n	8010322 <mem_malloc+0x11a>
          }
          lfree = cur;
 8010340:	4a2d      	ldr	r2, [pc, #180]	; (80103f8 <mem_malloc+0x1f0>)
 8010342:	69bb      	ldr	r3, [r7, #24]
 8010344:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8010346:	4b2c      	ldr	r3, [pc, #176]	; (80103f8 <mem_malloc+0x1f0>)
 8010348:	681a      	ldr	r2, [r3, #0]
 801034a:	4b2f      	ldr	r3, [pc, #188]	; (8010408 <mem_malloc+0x200>)
 801034c:	681b      	ldr	r3, [r3, #0]
 801034e:	429a      	cmp	r2, r3
 8010350:	d00b      	beq.n	801036a <mem_malloc+0x162>
 8010352:	4b29      	ldr	r3, [pc, #164]	; (80103f8 <mem_malloc+0x1f0>)
 8010354:	681b      	ldr	r3, [r3, #0]
 8010356:	791b      	ldrb	r3, [r3, #4]
 8010358:	2b00      	cmp	r3, #0
 801035a:	d006      	beq.n	801036a <mem_malloc+0x162>
 801035c:	4b27      	ldr	r3, [pc, #156]	; (80103fc <mem_malloc+0x1f4>)
 801035e:	f240 32b5 	movw	r2, #949	; 0x3b5
 8010362:	492a      	ldr	r1, [pc, #168]	; (801040c <mem_malloc+0x204>)
 8010364:	4827      	ldr	r0, [pc, #156]	; (8010404 <mem_malloc+0x1fc>)
 8010366:	f00a fecb 	bl	801b100 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 801036a:	4822      	ldr	r0, [pc, #136]	; (80103f4 <mem_malloc+0x1ec>)
 801036c:	f001 fb69 	bl	8011a42 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8010370:	8bba      	ldrh	r2, [r7, #28]
 8010372:	697b      	ldr	r3, [r7, #20]
 8010374:	4413      	add	r3, r2
 8010376:	3308      	adds	r3, #8
 8010378:	4a23      	ldr	r2, [pc, #140]	; (8010408 <mem_malloc+0x200>)
 801037a:	6812      	ldr	r2, [r2, #0]
 801037c:	4293      	cmp	r3, r2
 801037e:	d906      	bls.n	801038e <mem_malloc+0x186>
 8010380:	4b1e      	ldr	r3, [pc, #120]	; (80103fc <mem_malloc+0x1f4>)
 8010382:	f240 32ba 	movw	r2, #954	; 0x3ba
 8010386:	4922      	ldr	r1, [pc, #136]	; (8010410 <mem_malloc+0x208>)
 8010388:	481e      	ldr	r0, [pc, #120]	; (8010404 <mem_malloc+0x1fc>)
 801038a:	f00a feb9 	bl	801b100 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 801038e:	697b      	ldr	r3, [r7, #20]
 8010390:	f003 0303 	and.w	r3, r3, #3
 8010394:	2b00      	cmp	r3, #0
 8010396:	d006      	beq.n	80103a6 <mem_malloc+0x19e>
 8010398:	4b18      	ldr	r3, [pc, #96]	; (80103fc <mem_malloc+0x1f4>)
 801039a:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 801039e:	491d      	ldr	r1, [pc, #116]	; (8010414 <mem_malloc+0x20c>)
 80103a0:	4818      	ldr	r0, [pc, #96]	; (8010404 <mem_malloc+0x1fc>)
 80103a2:	f00a fead 	bl	801b100 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80103a6:	697b      	ldr	r3, [r7, #20]
 80103a8:	f003 0303 	and.w	r3, r3, #3
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	d006      	beq.n	80103be <mem_malloc+0x1b6>
 80103b0:	4b12      	ldr	r3, [pc, #72]	; (80103fc <mem_malloc+0x1f4>)
 80103b2:	f240 32be 	movw	r2, #958	; 0x3be
 80103b6:	4918      	ldr	r1, [pc, #96]	; (8010418 <mem_malloc+0x210>)
 80103b8:	4812      	ldr	r0, [pc, #72]	; (8010404 <mem_malloc+0x1fc>)
 80103ba:	f00a fea1 	bl	801b100 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80103be:	697b      	ldr	r3, [r7, #20]
 80103c0:	3308      	adds	r3, #8
 80103c2:	e012      	b.n	80103ea <mem_malloc+0x1e2>
         ptr = ptr_to_mem(ptr)->next) {
 80103c4:	8bfb      	ldrh	r3, [r7, #30]
 80103c6:	4618      	mov	r0, r3
 80103c8:	f7ff fc28 	bl	800fc1c <ptr_to_mem>
 80103cc:	4603      	mov	r3, r0
 80103ce:	881b      	ldrh	r3, [r3, #0]
 80103d0:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80103d2:	8bfa      	ldrh	r2, [r7, #30]
 80103d4:	8bb9      	ldrh	r1, [r7, #28]
 80103d6:	f643 73e8 	movw	r3, #16360	; 0x3fe8
 80103da:	1a5b      	subs	r3, r3, r1
 80103dc:	429a      	cmp	r2, r3
 80103de:	f4ff af3e 	bcc.w	801025e <mem_malloc+0x56>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 80103e2:	4804      	ldr	r0, [pc, #16]	; (80103f4 <mem_malloc+0x1ec>)
 80103e4:	f001 fb2d 	bl	8011a42 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80103e8:	2300      	movs	r3, #0
}
 80103ea:	4618      	mov	r0, r3
 80103ec:	3720      	adds	r7, #32
 80103ee:	46bd      	mov	sp, r7
 80103f0:	bd80      	pop	{r7, pc}
 80103f2:	bf00      	nop
 80103f4:	240048d8 	.word	0x240048d8
 80103f8:	240048dc 	.word	0x240048dc
 80103fc:	0801dae4 	.word	0x0801dae4
 8010400:	0801dcc4 	.word	0x0801dcc4
 8010404:	0801db48 	.word	0x0801db48
 8010408:	240048d4 	.word	0x240048d4
 801040c:	0801dcd8 	.word	0x0801dcd8
 8010410:	0801dcf4 	.word	0x0801dcf4
 8010414:	0801dd24 	.word	0x0801dd24
 8010418:	0801dd54 	.word	0x0801dd54

0801041c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 801041c:	b480      	push	{r7}
 801041e:	b085      	sub	sp, #20
 8010420:	af00      	add	r7, sp, #0
 8010422:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	689b      	ldr	r3, [r3, #8]
 8010428:	2200      	movs	r2, #0
 801042a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	685b      	ldr	r3, [r3, #4]
 8010430:	3303      	adds	r3, #3
 8010432:	f023 0303 	bic.w	r3, r3, #3
 8010436:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8010438:	2300      	movs	r3, #0
 801043a:	60fb      	str	r3, [r7, #12]
 801043c:	e011      	b.n	8010462 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	689b      	ldr	r3, [r3, #8]
 8010442:	681a      	ldr	r2, [r3, #0]
 8010444:	68bb      	ldr	r3, [r7, #8]
 8010446:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	689b      	ldr	r3, [r3, #8]
 801044c:	68ba      	ldr	r2, [r7, #8]
 801044e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	881b      	ldrh	r3, [r3, #0]
 8010454:	461a      	mov	r2, r3
 8010456:	68bb      	ldr	r3, [r7, #8]
 8010458:	4413      	add	r3, r2
 801045a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 801045c:	68fb      	ldr	r3, [r7, #12]
 801045e:	3301      	adds	r3, #1
 8010460:	60fb      	str	r3, [r7, #12]
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	885b      	ldrh	r3, [r3, #2]
 8010466:	461a      	mov	r2, r3
 8010468:	68fb      	ldr	r3, [r7, #12]
 801046a:	4293      	cmp	r3, r2
 801046c:	dbe7      	blt.n	801043e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 801046e:	bf00      	nop
 8010470:	3714      	adds	r7, #20
 8010472:	46bd      	mov	sp, r7
 8010474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010478:	4770      	bx	lr
	...

0801047c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 801047c:	b580      	push	{r7, lr}
 801047e:	b082      	sub	sp, #8
 8010480:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8010482:	2300      	movs	r3, #0
 8010484:	80fb      	strh	r3, [r7, #6]
 8010486:	e009      	b.n	801049c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8010488:	88fb      	ldrh	r3, [r7, #6]
 801048a:	4a08      	ldr	r2, [pc, #32]	; (80104ac <memp_init+0x30>)
 801048c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010490:	4618      	mov	r0, r3
 8010492:	f7ff ffc3 	bl	801041c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8010496:	88fb      	ldrh	r3, [r7, #6]
 8010498:	3301      	adds	r3, #1
 801049a:	80fb      	strh	r3, [r7, #6]
 801049c:	88fb      	ldrh	r3, [r7, #6]
 801049e:	2b0c      	cmp	r3, #12
 80104a0:	d9f2      	bls.n	8010488 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80104a2:	bf00      	nop
 80104a4:	3708      	adds	r7, #8
 80104a6:	46bd      	mov	sp, r7
 80104a8:	bd80      	pop	{r7, pc}
 80104aa:	bf00      	nop
 80104ac:	080201b8 	.word	0x080201b8

080104b0 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80104b0:	b580      	push	{r7, lr}
 80104b2:	b084      	sub	sp, #16
 80104b4:	af00      	add	r7, sp, #0
 80104b6:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 80104b8:	f001 faf6 	bl	8011aa8 <sys_arch_protect>
 80104bc:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	689b      	ldr	r3, [r3, #8]
 80104c2:	681b      	ldr	r3, [r3, #0]
 80104c4:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80104c6:	68bb      	ldr	r3, [r7, #8]
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d015      	beq.n	80104f8 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	689b      	ldr	r3, [r3, #8]
 80104d0:	68ba      	ldr	r2, [r7, #8]
 80104d2:	6812      	ldr	r2, [r2, #0]
 80104d4:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80104d6:	68bb      	ldr	r3, [r7, #8]
 80104d8:	f003 0303 	and.w	r3, r3, #3
 80104dc:	2b00      	cmp	r3, #0
 80104de:	d006      	beq.n	80104ee <do_memp_malloc_pool+0x3e>
 80104e0:	4b09      	ldr	r3, [pc, #36]	; (8010508 <do_memp_malloc_pool+0x58>)
 80104e2:	f240 1219 	movw	r2, #281	; 0x119
 80104e6:	4909      	ldr	r1, [pc, #36]	; (801050c <do_memp_malloc_pool+0x5c>)
 80104e8:	4809      	ldr	r0, [pc, #36]	; (8010510 <do_memp_malloc_pool+0x60>)
 80104ea:	f00a fe09 	bl	801b100 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80104ee:	68f8      	ldr	r0, [r7, #12]
 80104f0:	f001 fae8 	bl	8011ac4 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80104f4:	68bb      	ldr	r3, [r7, #8]
 80104f6:	e003      	b.n	8010500 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80104f8:	68f8      	ldr	r0, [r7, #12]
 80104fa:	f001 fae3 	bl	8011ac4 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80104fe:	2300      	movs	r3, #0
}
 8010500:	4618      	mov	r0, r3
 8010502:	3710      	adds	r7, #16
 8010504:	46bd      	mov	sp, r7
 8010506:	bd80      	pop	{r7, pc}
 8010508:	0801dd78 	.word	0x0801dd78
 801050c:	0801ddc8 	.word	0x0801ddc8
 8010510:	0801ddec 	.word	0x0801ddec

08010514 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8010514:	b580      	push	{r7, lr}
 8010516:	b082      	sub	sp, #8
 8010518:	af00      	add	r7, sp, #0
 801051a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	2b00      	cmp	r3, #0
 8010520:	d106      	bne.n	8010530 <memp_malloc_pool+0x1c>
 8010522:	4b0a      	ldr	r3, [pc, #40]	; (801054c <memp_malloc_pool+0x38>)
 8010524:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8010528:	4909      	ldr	r1, [pc, #36]	; (8010550 <memp_malloc_pool+0x3c>)
 801052a:	480a      	ldr	r0, [pc, #40]	; (8010554 <memp_malloc_pool+0x40>)
 801052c:	f00a fde8 	bl	801b100 <iprintf>
  if (desc == NULL) {
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	2b00      	cmp	r3, #0
 8010534:	d101      	bne.n	801053a <memp_malloc_pool+0x26>
    return NULL;
 8010536:	2300      	movs	r3, #0
 8010538:	e003      	b.n	8010542 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 801053a:	6878      	ldr	r0, [r7, #4]
 801053c:	f7ff ffb8 	bl	80104b0 <do_memp_malloc_pool>
 8010540:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8010542:	4618      	mov	r0, r3
 8010544:	3708      	adds	r7, #8
 8010546:	46bd      	mov	sp, r7
 8010548:	bd80      	pop	{r7, pc}
 801054a:	bf00      	nop
 801054c:	0801dd78 	.word	0x0801dd78
 8010550:	0801de14 	.word	0x0801de14
 8010554:	0801ddec 	.word	0x0801ddec

08010558 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8010558:	b580      	push	{r7, lr}
 801055a:	b084      	sub	sp, #16
 801055c:	af00      	add	r7, sp, #0
 801055e:	4603      	mov	r3, r0
 8010560:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8010562:	79fb      	ldrb	r3, [r7, #7]
 8010564:	2b0c      	cmp	r3, #12
 8010566:	d908      	bls.n	801057a <memp_malloc+0x22>
 8010568:	4b0a      	ldr	r3, [pc, #40]	; (8010594 <memp_malloc+0x3c>)
 801056a:	f240 1257 	movw	r2, #343	; 0x157
 801056e:	490a      	ldr	r1, [pc, #40]	; (8010598 <memp_malloc+0x40>)
 8010570:	480a      	ldr	r0, [pc, #40]	; (801059c <memp_malloc+0x44>)
 8010572:	f00a fdc5 	bl	801b100 <iprintf>
 8010576:	2300      	movs	r3, #0
 8010578:	e008      	b.n	801058c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 801057a:	79fb      	ldrb	r3, [r7, #7]
 801057c:	4a08      	ldr	r2, [pc, #32]	; (80105a0 <memp_malloc+0x48>)
 801057e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010582:	4618      	mov	r0, r3
 8010584:	f7ff ff94 	bl	80104b0 <do_memp_malloc_pool>
 8010588:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 801058a:	68fb      	ldr	r3, [r7, #12]
}
 801058c:	4618      	mov	r0, r3
 801058e:	3710      	adds	r7, #16
 8010590:	46bd      	mov	sp, r7
 8010592:	bd80      	pop	{r7, pc}
 8010594:	0801dd78 	.word	0x0801dd78
 8010598:	0801de28 	.word	0x0801de28
 801059c:	0801ddec 	.word	0x0801ddec
 80105a0:	080201b8 	.word	0x080201b8

080105a4 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80105a4:	b580      	push	{r7, lr}
 80105a6:	b084      	sub	sp, #16
 80105a8:	af00      	add	r7, sp, #0
 80105aa:	6078      	str	r0, [r7, #4]
 80105ac:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80105ae:	683b      	ldr	r3, [r7, #0]
 80105b0:	f003 0303 	and.w	r3, r3, #3
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	d006      	beq.n	80105c6 <do_memp_free_pool+0x22>
 80105b8:	4b0d      	ldr	r3, [pc, #52]	; (80105f0 <do_memp_free_pool+0x4c>)
 80105ba:	f240 126d 	movw	r2, #365	; 0x16d
 80105be:	490d      	ldr	r1, [pc, #52]	; (80105f4 <do_memp_free_pool+0x50>)
 80105c0:	480d      	ldr	r0, [pc, #52]	; (80105f8 <do_memp_free_pool+0x54>)
 80105c2:	f00a fd9d 	bl	801b100 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80105c6:	683b      	ldr	r3, [r7, #0]
 80105c8:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 80105ca:	f001 fa6d 	bl	8011aa8 <sys_arch_protect>
 80105ce:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	689b      	ldr	r3, [r3, #8]
 80105d4:	681a      	ldr	r2, [r3, #0]
 80105d6:	68fb      	ldr	r3, [r7, #12]
 80105d8:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	689b      	ldr	r3, [r3, #8]
 80105de:	68fa      	ldr	r2, [r7, #12]
 80105e0:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 80105e2:	68b8      	ldr	r0, [r7, #8]
 80105e4:	f001 fa6e 	bl	8011ac4 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 80105e8:	bf00      	nop
 80105ea:	3710      	adds	r7, #16
 80105ec:	46bd      	mov	sp, r7
 80105ee:	bd80      	pop	{r7, pc}
 80105f0:	0801dd78 	.word	0x0801dd78
 80105f4:	0801de48 	.word	0x0801de48
 80105f8:	0801ddec 	.word	0x0801ddec

080105fc <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80105fc:	b580      	push	{r7, lr}
 80105fe:	b082      	sub	sp, #8
 8010600:	af00      	add	r7, sp, #0
 8010602:	6078      	str	r0, [r7, #4]
 8010604:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	2b00      	cmp	r3, #0
 801060a:	d106      	bne.n	801061a <memp_free_pool+0x1e>
 801060c:	4b0a      	ldr	r3, [pc, #40]	; (8010638 <memp_free_pool+0x3c>)
 801060e:	f240 1295 	movw	r2, #405	; 0x195
 8010612:	490a      	ldr	r1, [pc, #40]	; (801063c <memp_free_pool+0x40>)
 8010614:	480a      	ldr	r0, [pc, #40]	; (8010640 <memp_free_pool+0x44>)
 8010616:	f00a fd73 	bl	801b100 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	2b00      	cmp	r3, #0
 801061e:	d007      	beq.n	8010630 <memp_free_pool+0x34>
 8010620:	683b      	ldr	r3, [r7, #0]
 8010622:	2b00      	cmp	r3, #0
 8010624:	d004      	beq.n	8010630 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8010626:	6839      	ldr	r1, [r7, #0]
 8010628:	6878      	ldr	r0, [r7, #4]
 801062a:	f7ff ffbb 	bl	80105a4 <do_memp_free_pool>
 801062e:	e000      	b.n	8010632 <memp_free_pool+0x36>
    return;
 8010630:	bf00      	nop
}
 8010632:	3708      	adds	r7, #8
 8010634:	46bd      	mov	sp, r7
 8010636:	bd80      	pop	{r7, pc}
 8010638:	0801dd78 	.word	0x0801dd78
 801063c:	0801de14 	.word	0x0801de14
 8010640:	0801ddec 	.word	0x0801ddec

08010644 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8010644:	b580      	push	{r7, lr}
 8010646:	b082      	sub	sp, #8
 8010648:	af00      	add	r7, sp, #0
 801064a:	4603      	mov	r3, r0
 801064c:	6039      	str	r1, [r7, #0]
 801064e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8010650:	79fb      	ldrb	r3, [r7, #7]
 8010652:	2b0c      	cmp	r3, #12
 8010654:	d907      	bls.n	8010666 <memp_free+0x22>
 8010656:	4b0c      	ldr	r3, [pc, #48]	; (8010688 <memp_free+0x44>)
 8010658:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 801065c:	490b      	ldr	r1, [pc, #44]	; (801068c <memp_free+0x48>)
 801065e:	480c      	ldr	r0, [pc, #48]	; (8010690 <memp_free+0x4c>)
 8010660:	f00a fd4e 	bl	801b100 <iprintf>
 8010664:	e00c      	b.n	8010680 <memp_free+0x3c>

  if (mem == NULL) {
 8010666:	683b      	ldr	r3, [r7, #0]
 8010668:	2b00      	cmp	r3, #0
 801066a:	d008      	beq.n	801067e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 801066c:	79fb      	ldrb	r3, [r7, #7]
 801066e:	4a09      	ldr	r2, [pc, #36]	; (8010694 <memp_free+0x50>)
 8010670:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010674:	6839      	ldr	r1, [r7, #0]
 8010676:	4618      	mov	r0, r3
 8010678:	f7ff ff94 	bl	80105a4 <do_memp_free_pool>
 801067c:	e000      	b.n	8010680 <memp_free+0x3c>
    return;
 801067e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8010680:	3708      	adds	r7, #8
 8010682:	46bd      	mov	sp, r7
 8010684:	bd80      	pop	{r7, pc}
 8010686:	bf00      	nop
 8010688:	0801dd78 	.word	0x0801dd78
 801068c:	0801de68 	.word	0x0801de68
 8010690:	0801ddec 	.word	0x0801ddec
 8010694:	080201b8 	.word	0x080201b8

08010698 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8010698:	b480      	push	{r7}
 801069a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 801069c:	bf00      	nop
 801069e:	46bd      	mov	sp, r7
 80106a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106a4:	4770      	bx	lr
	...

080106a8 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80106a8:	b580      	push	{r7, lr}
 80106aa:	b086      	sub	sp, #24
 80106ac:	af00      	add	r7, sp, #0
 80106ae:	60f8      	str	r0, [r7, #12]
 80106b0:	60b9      	str	r1, [r7, #8]
 80106b2:	607a      	str	r2, [r7, #4]
 80106b4:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80106b6:	68fb      	ldr	r3, [r7, #12]
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d108      	bne.n	80106ce <netif_add+0x26>
 80106bc:	4b57      	ldr	r3, [pc, #348]	; (801081c <netif_add+0x174>)
 80106be:	f240 1227 	movw	r2, #295	; 0x127
 80106c2:	4957      	ldr	r1, [pc, #348]	; (8010820 <netif_add+0x178>)
 80106c4:	4857      	ldr	r0, [pc, #348]	; (8010824 <netif_add+0x17c>)
 80106c6:	f00a fd1b 	bl	801b100 <iprintf>
 80106ca:	2300      	movs	r3, #0
 80106cc:	e0a2      	b.n	8010814 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80106ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	d108      	bne.n	80106e6 <netif_add+0x3e>
 80106d4:	4b51      	ldr	r3, [pc, #324]	; (801081c <netif_add+0x174>)
 80106d6:	f44f 7294 	mov.w	r2, #296	; 0x128
 80106da:	4953      	ldr	r1, [pc, #332]	; (8010828 <netif_add+0x180>)
 80106dc:	4851      	ldr	r0, [pc, #324]	; (8010824 <netif_add+0x17c>)
 80106de:	f00a fd0f 	bl	801b100 <iprintf>
 80106e2:	2300      	movs	r3, #0
 80106e4:	e096      	b.n	8010814 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80106e6:	68bb      	ldr	r3, [r7, #8]
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d101      	bne.n	80106f0 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80106ec:	4b4f      	ldr	r3, [pc, #316]	; (801082c <netif_add+0x184>)
 80106ee:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	2b00      	cmp	r3, #0
 80106f4:	d101      	bne.n	80106fa <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80106f6:	4b4d      	ldr	r3, [pc, #308]	; (801082c <netif_add+0x184>)
 80106f8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80106fa:	683b      	ldr	r3, [r7, #0]
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d101      	bne.n	8010704 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8010700:	4b4a      	ldr	r3, [pc, #296]	; (801082c <netif_add+0x184>)
 8010702:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8010704:	68fb      	ldr	r3, [r7, #12]
 8010706:	2200      	movs	r2, #0
 8010708:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 801070a:	68fb      	ldr	r3, [r7, #12]
 801070c:	2200      	movs	r2, #0
 801070e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8010710:	68fb      	ldr	r3, [r7, #12]
 8010712:	2200      	movs	r2, #0
 8010714:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8010716:	68fb      	ldr	r3, [r7, #12]
 8010718:	4a45      	ldr	r2, [pc, #276]	; (8010830 <netif_add+0x188>)
 801071a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 801071c:	68fb      	ldr	r3, [r7, #12]
 801071e:	2200      	movs	r2, #0
 8010720:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	2200      	movs	r2, #0
 8010726:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 801072a:	68fb      	ldr	r3, [r7, #12]
 801072c:	2200      	movs	r2, #0
 801072e:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8010730:	68fb      	ldr	r3, [r7, #12]
 8010732:	6a3a      	ldr	r2, [r7, #32]
 8010734:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8010736:	4b3f      	ldr	r3, [pc, #252]	; (8010834 <netif_add+0x18c>)
 8010738:	781a      	ldrb	r2, [r3, #0]
 801073a:	68fb      	ldr	r3, [r7, #12]
 801073c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8010740:	68fb      	ldr	r3, [r7, #12]
 8010742:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010744:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8010746:	683b      	ldr	r3, [r7, #0]
 8010748:	687a      	ldr	r2, [r7, #4]
 801074a:	68b9      	ldr	r1, [r7, #8]
 801074c:	68f8      	ldr	r0, [r7, #12]
 801074e:	f000 f913 	bl	8010978 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8010752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010754:	68f8      	ldr	r0, [r7, #12]
 8010756:	4798      	blx	r3
 8010758:	4603      	mov	r3, r0
 801075a:	2b00      	cmp	r3, #0
 801075c:	d001      	beq.n	8010762 <netif_add+0xba>
    return NULL;
 801075e:	2300      	movs	r3, #0
 8010760:	e058      	b.n	8010814 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8010762:	68fb      	ldr	r3, [r7, #12]
 8010764:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010768:	2bff      	cmp	r3, #255	; 0xff
 801076a:	d103      	bne.n	8010774 <netif_add+0xcc>
        netif->num = 0;
 801076c:	68fb      	ldr	r3, [r7, #12]
 801076e:	2200      	movs	r2, #0
 8010770:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8010774:	2300      	movs	r3, #0
 8010776:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8010778:	4b2f      	ldr	r3, [pc, #188]	; (8010838 <netif_add+0x190>)
 801077a:	681b      	ldr	r3, [r3, #0]
 801077c:	617b      	str	r3, [r7, #20]
 801077e:	e02b      	b.n	80107d8 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8010780:	697a      	ldr	r2, [r7, #20]
 8010782:	68fb      	ldr	r3, [r7, #12]
 8010784:	429a      	cmp	r2, r3
 8010786:	d106      	bne.n	8010796 <netif_add+0xee>
 8010788:	4b24      	ldr	r3, [pc, #144]	; (801081c <netif_add+0x174>)
 801078a:	f240 128b 	movw	r2, #395	; 0x18b
 801078e:	492b      	ldr	r1, [pc, #172]	; (801083c <netif_add+0x194>)
 8010790:	4824      	ldr	r0, [pc, #144]	; (8010824 <netif_add+0x17c>)
 8010792:	f00a fcb5 	bl	801b100 <iprintf>
        num_netifs++;
 8010796:	693b      	ldr	r3, [r7, #16]
 8010798:	3301      	adds	r3, #1
 801079a:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 801079c:	693b      	ldr	r3, [r7, #16]
 801079e:	2bff      	cmp	r3, #255	; 0xff
 80107a0:	dd06      	ble.n	80107b0 <netif_add+0x108>
 80107a2:	4b1e      	ldr	r3, [pc, #120]	; (801081c <netif_add+0x174>)
 80107a4:	f240 128d 	movw	r2, #397	; 0x18d
 80107a8:	4925      	ldr	r1, [pc, #148]	; (8010840 <netif_add+0x198>)
 80107aa:	481e      	ldr	r0, [pc, #120]	; (8010824 <netif_add+0x17c>)
 80107ac:	f00a fca8 	bl	801b100 <iprintf>
        if (netif2->num == netif->num) {
 80107b0:	697b      	ldr	r3, [r7, #20]
 80107b2:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80107b6:	68fb      	ldr	r3, [r7, #12]
 80107b8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80107bc:	429a      	cmp	r2, r3
 80107be:	d108      	bne.n	80107d2 <netif_add+0x12a>
          netif->num++;
 80107c0:	68fb      	ldr	r3, [r7, #12]
 80107c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80107c6:	3301      	adds	r3, #1
 80107c8:	b2da      	uxtb	r2, r3
 80107ca:	68fb      	ldr	r3, [r7, #12]
 80107cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 80107d0:	e005      	b.n	80107de <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80107d2:	697b      	ldr	r3, [r7, #20]
 80107d4:	681b      	ldr	r3, [r3, #0]
 80107d6:	617b      	str	r3, [r7, #20]
 80107d8:	697b      	ldr	r3, [r7, #20]
 80107da:	2b00      	cmp	r3, #0
 80107dc:	d1d0      	bne.n	8010780 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 80107de:	697b      	ldr	r3, [r7, #20]
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d1be      	bne.n	8010762 <netif_add+0xba>
  }
  if (netif->num == 254) {
 80107e4:	68fb      	ldr	r3, [r7, #12]
 80107e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80107ea:	2bfe      	cmp	r3, #254	; 0xfe
 80107ec:	d103      	bne.n	80107f6 <netif_add+0x14e>
    netif_num = 0;
 80107ee:	4b11      	ldr	r3, [pc, #68]	; (8010834 <netif_add+0x18c>)
 80107f0:	2200      	movs	r2, #0
 80107f2:	701a      	strb	r2, [r3, #0]
 80107f4:	e006      	b.n	8010804 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80107f6:	68fb      	ldr	r3, [r7, #12]
 80107f8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80107fc:	3301      	adds	r3, #1
 80107fe:	b2da      	uxtb	r2, r3
 8010800:	4b0c      	ldr	r3, [pc, #48]	; (8010834 <netif_add+0x18c>)
 8010802:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8010804:	4b0c      	ldr	r3, [pc, #48]	; (8010838 <netif_add+0x190>)
 8010806:	681a      	ldr	r2, [r3, #0]
 8010808:	68fb      	ldr	r3, [r7, #12]
 801080a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 801080c:	4a0a      	ldr	r2, [pc, #40]	; (8010838 <netif_add+0x190>)
 801080e:	68fb      	ldr	r3, [r7, #12]
 8010810:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8010812:	68fb      	ldr	r3, [r7, #12]
}
 8010814:	4618      	mov	r0, r3
 8010816:	3718      	adds	r7, #24
 8010818:	46bd      	mov	sp, r7
 801081a:	bd80      	pop	{r7, pc}
 801081c:	0801de84 	.word	0x0801de84
 8010820:	0801df34 	.word	0x0801df34
 8010824:	0801def0 	.word	0x0801def0
 8010828:	0801df50 	.word	0x0801df50
 801082c:	08020118 	.word	0x08020118
 8010830:	08010c53 	.word	0x08010c53
 8010834:	24004914 	.word	0x24004914
 8010838:	2400ce50 	.word	0x2400ce50
 801083c:	0801df74 	.word	0x0801df74
 8010840:	0801df88 	.word	0x0801df88

08010844 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8010844:	b580      	push	{r7, lr}
 8010846:	b082      	sub	sp, #8
 8010848:	af00      	add	r7, sp, #0
 801084a:	6078      	str	r0, [r7, #4]
 801084c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 801084e:	6839      	ldr	r1, [r7, #0]
 8010850:	6878      	ldr	r0, [r7, #4]
 8010852:	f002 fc83 	bl	801315c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8010856:	6839      	ldr	r1, [r7, #0]
 8010858:	6878      	ldr	r0, [r7, #4]
 801085a:	f006 ff3f 	bl	80176dc <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 801085e:	bf00      	nop
 8010860:	3708      	adds	r7, #8
 8010862:	46bd      	mov	sp, r7
 8010864:	bd80      	pop	{r7, pc}
	...

08010868 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8010868:	b580      	push	{r7, lr}
 801086a:	b086      	sub	sp, #24
 801086c:	af00      	add	r7, sp, #0
 801086e:	60f8      	str	r0, [r7, #12]
 8010870:	60b9      	str	r1, [r7, #8]
 8010872:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8010874:	68bb      	ldr	r3, [r7, #8]
 8010876:	2b00      	cmp	r3, #0
 8010878:	d106      	bne.n	8010888 <netif_do_set_ipaddr+0x20>
 801087a:	4b1d      	ldr	r3, [pc, #116]	; (80108f0 <netif_do_set_ipaddr+0x88>)
 801087c:	f240 12cb 	movw	r2, #459	; 0x1cb
 8010880:	491c      	ldr	r1, [pc, #112]	; (80108f4 <netif_do_set_ipaddr+0x8c>)
 8010882:	481d      	ldr	r0, [pc, #116]	; (80108f8 <netif_do_set_ipaddr+0x90>)
 8010884:	f00a fc3c 	bl	801b100 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	2b00      	cmp	r3, #0
 801088c:	d106      	bne.n	801089c <netif_do_set_ipaddr+0x34>
 801088e:	4b18      	ldr	r3, [pc, #96]	; (80108f0 <netif_do_set_ipaddr+0x88>)
 8010890:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8010894:	4917      	ldr	r1, [pc, #92]	; (80108f4 <netif_do_set_ipaddr+0x8c>)
 8010896:	4818      	ldr	r0, [pc, #96]	; (80108f8 <netif_do_set_ipaddr+0x90>)
 8010898:	f00a fc32 	bl	801b100 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 801089c:	68bb      	ldr	r3, [r7, #8]
 801089e:	681a      	ldr	r2, [r3, #0]
 80108a0:	68fb      	ldr	r3, [r7, #12]
 80108a2:	3304      	adds	r3, #4
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	429a      	cmp	r2, r3
 80108a8:	d01c      	beq.n	80108e4 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80108aa:	68bb      	ldr	r3, [r7, #8]
 80108ac:	681b      	ldr	r3, [r3, #0]
 80108ae:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80108b0:	68fb      	ldr	r3, [r7, #12]
 80108b2:	3304      	adds	r3, #4
 80108b4:	681a      	ldr	r2, [r3, #0]
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80108ba:	f107 0314 	add.w	r3, r7, #20
 80108be:	4619      	mov	r1, r3
 80108c0:	6878      	ldr	r0, [r7, #4]
 80108c2:	f7ff ffbf 	bl	8010844 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80108c6:	68bb      	ldr	r3, [r7, #8]
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d002      	beq.n	80108d2 <netif_do_set_ipaddr+0x6a>
 80108cc:	68bb      	ldr	r3, [r7, #8]
 80108ce:	681b      	ldr	r3, [r3, #0]
 80108d0:	e000      	b.n	80108d4 <netif_do_set_ipaddr+0x6c>
 80108d2:	2300      	movs	r3, #0
 80108d4:	68fa      	ldr	r2, [r7, #12]
 80108d6:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80108d8:	2101      	movs	r1, #1
 80108da:	68f8      	ldr	r0, [r7, #12]
 80108dc:	f000 f8d2 	bl	8010a84 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80108e0:	2301      	movs	r3, #1
 80108e2:	e000      	b.n	80108e6 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80108e4:	2300      	movs	r3, #0
}
 80108e6:	4618      	mov	r0, r3
 80108e8:	3718      	adds	r7, #24
 80108ea:	46bd      	mov	sp, r7
 80108ec:	bd80      	pop	{r7, pc}
 80108ee:	bf00      	nop
 80108f0:	0801de84 	.word	0x0801de84
 80108f4:	0801dfb8 	.word	0x0801dfb8
 80108f8:	0801def0 	.word	0x0801def0

080108fc <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 80108fc:	b480      	push	{r7}
 80108fe:	b085      	sub	sp, #20
 8010900:	af00      	add	r7, sp, #0
 8010902:	60f8      	str	r0, [r7, #12]
 8010904:	60b9      	str	r1, [r7, #8]
 8010906:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8010908:	68bb      	ldr	r3, [r7, #8]
 801090a:	681a      	ldr	r2, [r3, #0]
 801090c:	68fb      	ldr	r3, [r7, #12]
 801090e:	3308      	adds	r3, #8
 8010910:	681b      	ldr	r3, [r3, #0]
 8010912:	429a      	cmp	r2, r3
 8010914:	d00a      	beq.n	801092c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8010916:	68bb      	ldr	r3, [r7, #8]
 8010918:	2b00      	cmp	r3, #0
 801091a:	d002      	beq.n	8010922 <netif_do_set_netmask+0x26>
 801091c:	68bb      	ldr	r3, [r7, #8]
 801091e:	681b      	ldr	r3, [r3, #0]
 8010920:	e000      	b.n	8010924 <netif_do_set_netmask+0x28>
 8010922:	2300      	movs	r3, #0
 8010924:	68fa      	ldr	r2, [r7, #12]
 8010926:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8010928:	2301      	movs	r3, #1
 801092a:	e000      	b.n	801092e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 801092c:	2300      	movs	r3, #0
}
 801092e:	4618      	mov	r0, r3
 8010930:	3714      	adds	r7, #20
 8010932:	46bd      	mov	sp, r7
 8010934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010938:	4770      	bx	lr

0801093a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 801093a:	b480      	push	{r7}
 801093c:	b085      	sub	sp, #20
 801093e:	af00      	add	r7, sp, #0
 8010940:	60f8      	str	r0, [r7, #12]
 8010942:	60b9      	str	r1, [r7, #8]
 8010944:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8010946:	68bb      	ldr	r3, [r7, #8]
 8010948:	681a      	ldr	r2, [r3, #0]
 801094a:	68fb      	ldr	r3, [r7, #12]
 801094c:	330c      	adds	r3, #12
 801094e:	681b      	ldr	r3, [r3, #0]
 8010950:	429a      	cmp	r2, r3
 8010952:	d00a      	beq.n	801096a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8010954:	68bb      	ldr	r3, [r7, #8]
 8010956:	2b00      	cmp	r3, #0
 8010958:	d002      	beq.n	8010960 <netif_do_set_gw+0x26>
 801095a:	68bb      	ldr	r3, [r7, #8]
 801095c:	681b      	ldr	r3, [r3, #0]
 801095e:	e000      	b.n	8010962 <netif_do_set_gw+0x28>
 8010960:	2300      	movs	r3, #0
 8010962:	68fa      	ldr	r2, [r7, #12]
 8010964:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8010966:	2301      	movs	r3, #1
 8010968:	e000      	b.n	801096c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 801096a:	2300      	movs	r3, #0
}
 801096c:	4618      	mov	r0, r3
 801096e:	3714      	adds	r7, #20
 8010970:	46bd      	mov	sp, r7
 8010972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010976:	4770      	bx	lr

08010978 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8010978:	b580      	push	{r7, lr}
 801097a:	b088      	sub	sp, #32
 801097c:	af00      	add	r7, sp, #0
 801097e:	60f8      	str	r0, [r7, #12]
 8010980:	60b9      	str	r1, [r7, #8]
 8010982:	607a      	str	r2, [r7, #4]
 8010984:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8010986:	2300      	movs	r3, #0
 8010988:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 801098a:	2300      	movs	r3, #0
 801098c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801098e:	68bb      	ldr	r3, [r7, #8]
 8010990:	2b00      	cmp	r3, #0
 8010992:	d101      	bne.n	8010998 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8010994:	4b1c      	ldr	r3, [pc, #112]	; (8010a08 <netif_set_addr+0x90>)
 8010996:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	2b00      	cmp	r3, #0
 801099c:	d101      	bne.n	80109a2 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 801099e:	4b1a      	ldr	r3, [pc, #104]	; (8010a08 <netif_set_addr+0x90>)
 80109a0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80109a2:	683b      	ldr	r3, [r7, #0]
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	d101      	bne.n	80109ac <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80109a8:	4b17      	ldr	r3, [pc, #92]	; (8010a08 <netif_set_addr+0x90>)
 80109aa:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80109ac:	68bb      	ldr	r3, [r7, #8]
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	d003      	beq.n	80109ba <netif_set_addr+0x42>
 80109b2:	68bb      	ldr	r3, [r7, #8]
 80109b4:	681b      	ldr	r3, [r3, #0]
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d101      	bne.n	80109be <netif_set_addr+0x46>
 80109ba:	2301      	movs	r3, #1
 80109bc:	e000      	b.n	80109c0 <netif_set_addr+0x48>
 80109be:	2300      	movs	r3, #0
 80109c0:	617b      	str	r3, [r7, #20]
  if (remove) {
 80109c2:	697b      	ldr	r3, [r7, #20]
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	d006      	beq.n	80109d6 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80109c8:	f107 0310 	add.w	r3, r7, #16
 80109cc:	461a      	mov	r2, r3
 80109ce:	68b9      	ldr	r1, [r7, #8]
 80109d0:	68f8      	ldr	r0, [r7, #12]
 80109d2:	f7ff ff49 	bl	8010868 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80109d6:	69fa      	ldr	r2, [r7, #28]
 80109d8:	6879      	ldr	r1, [r7, #4]
 80109da:	68f8      	ldr	r0, [r7, #12]
 80109dc:	f7ff ff8e 	bl	80108fc <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80109e0:	69ba      	ldr	r2, [r7, #24]
 80109e2:	6839      	ldr	r1, [r7, #0]
 80109e4:	68f8      	ldr	r0, [r7, #12]
 80109e6:	f7ff ffa8 	bl	801093a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80109ea:	697b      	ldr	r3, [r7, #20]
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	d106      	bne.n	80109fe <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80109f0:	f107 0310 	add.w	r3, r7, #16
 80109f4:	461a      	mov	r2, r3
 80109f6:	68b9      	ldr	r1, [r7, #8]
 80109f8:	68f8      	ldr	r0, [r7, #12]
 80109fa:	f7ff ff35 	bl	8010868 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 80109fe:	bf00      	nop
 8010a00:	3720      	adds	r7, #32
 8010a02:	46bd      	mov	sp, r7
 8010a04:	bd80      	pop	{r7, pc}
 8010a06:	bf00      	nop
 8010a08:	08020118 	.word	0x08020118

08010a0c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8010a0c:	b480      	push	{r7}
 8010a0e:	b083      	sub	sp, #12
 8010a10:	af00      	add	r7, sp, #0
 8010a12:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8010a14:	4a04      	ldr	r2, [pc, #16]	; (8010a28 <netif_set_default+0x1c>)
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8010a1a:	bf00      	nop
 8010a1c:	370c      	adds	r7, #12
 8010a1e:	46bd      	mov	sp, r7
 8010a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a24:	4770      	bx	lr
 8010a26:	bf00      	nop
 8010a28:	2400ce54 	.word	0x2400ce54

08010a2c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8010a2c:	b580      	push	{r7, lr}
 8010a2e:	b082      	sub	sp, #8
 8010a30:	af00      	add	r7, sp, #0
 8010a32:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	d107      	bne.n	8010a4a <netif_set_up+0x1e>
 8010a3a:	4b0f      	ldr	r3, [pc, #60]	; (8010a78 <netif_set_up+0x4c>)
 8010a3c:	f44f 7254 	mov.w	r2, #848	; 0x350
 8010a40:	490e      	ldr	r1, [pc, #56]	; (8010a7c <netif_set_up+0x50>)
 8010a42:	480f      	ldr	r0, [pc, #60]	; (8010a80 <netif_set_up+0x54>)
 8010a44:	f00a fb5c 	bl	801b100 <iprintf>
 8010a48:	e013      	b.n	8010a72 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010a50:	f003 0301 	and.w	r3, r3, #1
 8010a54:	2b00      	cmp	r3, #0
 8010a56:	d10c      	bne.n	8010a72 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010a5e:	f043 0301 	orr.w	r3, r3, #1
 8010a62:	b2da      	uxtb	r2, r3
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8010a6a:	2103      	movs	r1, #3
 8010a6c:	6878      	ldr	r0, [r7, #4]
 8010a6e:	f000 f809 	bl	8010a84 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8010a72:	3708      	adds	r7, #8
 8010a74:	46bd      	mov	sp, r7
 8010a76:	bd80      	pop	{r7, pc}
 8010a78:	0801de84 	.word	0x0801de84
 8010a7c:	0801e028 	.word	0x0801e028
 8010a80:	0801def0 	.word	0x0801def0

08010a84 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8010a84:	b580      	push	{r7, lr}
 8010a86:	b082      	sub	sp, #8
 8010a88:	af00      	add	r7, sp, #0
 8010a8a:	6078      	str	r0, [r7, #4]
 8010a8c:	460b      	mov	r3, r1
 8010a8e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	d106      	bne.n	8010aa4 <netif_issue_reports+0x20>
 8010a96:	4b18      	ldr	r3, [pc, #96]	; (8010af8 <netif_issue_reports+0x74>)
 8010a98:	f240 326d 	movw	r2, #877	; 0x36d
 8010a9c:	4917      	ldr	r1, [pc, #92]	; (8010afc <netif_issue_reports+0x78>)
 8010a9e:	4818      	ldr	r0, [pc, #96]	; (8010b00 <netif_issue_reports+0x7c>)
 8010aa0:	f00a fb2e 	bl	801b100 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010aaa:	f003 0304 	and.w	r3, r3, #4
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d01e      	beq.n	8010af0 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010ab8:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	d017      	beq.n	8010af0 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8010ac0:	78fb      	ldrb	r3, [r7, #3]
 8010ac2:	f003 0301 	and.w	r3, r3, #1
 8010ac6:	2b00      	cmp	r3, #0
 8010ac8:	d013      	beq.n	8010af2 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	3304      	adds	r3, #4
 8010ace:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	d00e      	beq.n	8010af2 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010ada:	f003 0308 	and.w	r3, r3, #8
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	d007      	beq.n	8010af2 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	3304      	adds	r3, #4
 8010ae6:	4619      	mov	r1, r3
 8010ae8:	6878      	ldr	r0, [r7, #4]
 8010aea:	f7fd fc1d 	bl	800e328 <etharp_request>
 8010aee:	e000      	b.n	8010af2 <netif_issue_reports+0x6e>
    return;
 8010af0:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8010af2:	3708      	adds	r7, #8
 8010af4:	46bd      	mov	sp, r7
 8010af6:	bd80      	pop	{r7, pc}
 8010af8:	0801de84 	.word	0x0801de84
 8010afc:	0801e044 	.word	0x0801e044
 8010b00:	0801def0 	.word	0x0801def0

08010b04 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8010b04:	b580      	push	{r7, lr}
 8010b06:	b082      	sub	sp, #8
 8010b08:	af00      	add	r7, sp, #0
 8010b0a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	d107      	bne.n	8010b22 <netif_set_down+0x1e>
 8010b12:	4b12      	ldr	r3, [pc, #72]	; (8010b5c <netif_set_down+0x58>)
 8010b14:	f240 329b 	movw	r2, #923	; 0x39b
 8010b18:	4911      	ldr	r1, [pc, #68]	; (8010b60 <netif_set_down+0x5c>)
 8010b1a:	4812      	ldr	r0, [pc, #72]	; (8010b64 <netif_set_down+0x60>)
 8010b1c:	f00a faf0 	bl	801b100 <iprintf>
 8010b20:	e019      	b.n	8010b56 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010b28:	f003 0301 	and.w	r3, r3, #1
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	d012      	beq.n	8010b56 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010b36:	f023 0301 	bic.w	r3, r3, #1
 8010b3a:	b2da      	uxtb	r2, r3
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010b48:	f003 0308 	and.w	r3, r3, #8
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	d002      	beq.n	8010b56 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8010b50:	6878      	ldr	r0, [r7, #4]
 8010b52:	f7fc ffa7 	bl	800daa4 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8010b56:	3708      	adds	r7, #8
 8010b58:	46bd      	mov	sp, r7
 8010b5a:	bd80      	pop	{r7, pc}
 8010b5c:	0801de84 	.word	0x0801de84
 8010b60:	0801e068 	.word	0x0801e068
 8010b64:	0801def0 	.word	0x0801def0

08010b68 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8010b68:	b580      	push	{r7, lr}
 8010b6a:	b082      	sub	sp, #8
 8010b6c:	af00      	add	r7, sp, #0
 8010b6e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	d107      	bne.n	8010b86 <netif_set_link_up+0x1e>
 8010b76:	4b13      	ldr	r3, [pc, #76]	; (8010bc4 <netif_set_link_up+0x5c>)
 8010b78:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8010b7c:	4912      	ldr	r1, [pc, #72]	; (8010bc8 <netif_set_link_up+0x60>)
 8010b7e:	4813      	ldr	r0, [pc, #76]	; (8010bcc <netif_set_link_up+0x64>)
 8010b80:	f00a fabe 	bl	801b100 <iprintf>
 8010b84:	e01b      	b.n	8010bbe <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010b8c:	f003 0304 	and.w	r3, r3, #4
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	d114      	bne.n	8010bbe <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010b9a:	f043 0304 	orr.w	r3, r3, #4
 8010b9e:	b2da      	uxtb	r2, r3
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8010ba6:	2103      	movs	r1, #3
 8010ba8:	6878      	ldr	r0, [r7, #4]
 8010baa:	f7ff ff6b 	bl	8010a84 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	69db      	ldr	r3, [r3, #28]
 8010bb2:	2b00      	cmp	r3, #0
 8010bb4:	d003      	beq.n	8010bbe <netif_set_link_up+0x56>
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	69db      	ldr	r3, [r3, #28]
 8010bba:	6878      	ldr	r0, [r7, #4]
 8010bbc:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8010bbe:	3708      	adds	r7, #8
 8010bc0:	46bd      	mov	sp, r7
 8010bc2:	bd80      	pop	{r7, pc}
 8010bc4:	0801de84 	.word	0x0801de84
 8010bc8:	0801e088 	.word	0x0801e088
 8010bcc:	0801def0 	.word	0x0801def0

08010bd0 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8010bd0:	b580      	push	{r7, lr}
 8010bd2:	b082      	sub	sp, #8
 8010bd4:	af00      	add	r7, sp, #0
 8010bd6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	d107      	bne.n	8010bee <netif_set_link_down+0x1e>
 8010bde:	4b11      	ldr	r3, [pc, #68]	; (8010c24 <netif_set_link_down+0x54>)
 8010be0:	f240 4206 	movw	r2, #1030	; 0x406
 8010be4:	4910      	ldr	r1, [pc, #64]	; (8010c28 <netif_set_link_down+0x58>)
 8010be6:	4811      	ldr	r0, [pc, #68]	; (8010c2c <netif_set_link_down+0x5c>)
 8010be8:	f00a fa8a 	bl	801b100 <iprintf>
 8010bec:	e017      	b.n	8010c1e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010bf4:	f003 0304 	and.w	r3, r3, #4
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	d010      	beq.n	8010c1e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010c02:	f023 0304 	bic.w	r3, r3, #4
 8010c06:	b2da      	uxtb	r2, r3
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	69db      	ldr	r3, [r3, #28]
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	d003      	beq.n	8010c1e <netif_set_link_down+0x4e>
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	69db      	ldr	r3, [r3, #28]
 8010c1a:	6878      	ldr	r0, [r7, #4]
 8010c1c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8010c1e:	3708      	adds	r7, #8
 8010c20:	46bd      	mov	sp, r7
 8010c22:	bd80      	pop	{r7, pc}
 8010c24:	0801de84 	.word	0x0801de84
 8010c28:	0801e0ac 	.word	0x0801e0ac
 8010c2c:	0801def0 	.word	0x0801def0

08010c30 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8010c30:	b480      	push	{r7}
 8010c32:	b083      	sub	sp, #12
 8010c34:	af00      	add	r7, sp, #0
 8010c36:	6078      	str	r0, [r7, #4]
 8010c38:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	d002      	beq.n	8010c46 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	683a      	ldr	r2, [r7, #0]
 8010c44:	61da      	str	r2, [r3, #28]
  }
}
 8010c46:	bf00      	nop
 8010c48:	370c      	adds	r7, #12
 8010c4a:	46bd      	mov	sp, r7
 8010c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c50:	4770      	bx	lr

08010c52 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8010c52:	b480      	push	{r7}
 8010c54:	b085      	sub	sp, #20
 8010c56:	af00      	add	r7, sp, #0
 8010c58:	60f8      	str	r0, [r7, #12]
 8010c5a:	60b9      	str	r1, [r7, #8]
 8010c5c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8010c5e:	f06f 030b 	mvn.w	r3, #11
}
 8010c62:	4618      	mov	r0, r3
 8010c64:	3714      	adds	r7, #20
 8010c66:	46bd      	mov	sp, r7
 8010c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c6c:	4770      	bx	lr
	...

08010c70 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8010c70:	b480      	push	{r7}
 8010c72:	b085      	sub	sp, #20
 8010c74:	af00      	add	r7, sp, #0
 8010c76:	4603      	mov	r3, r0
 8010c78:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8010c7a:	79fb      	ldrb	r3, [r7, #7]
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	d013      	beq.n	8010ca8 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8010c80:	4b0d      	ldr	r3, [pc, #52]	; (8010cb8 <netif_get_by_index+0x48>)
 8010c82:	681b      	ldr	r3, [r3, #0]
 8010c84:	60fb      	str	r3, [r7, #12]
 8010c86:	e00c      	b.n	8010ca2 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8010c88:	68fb      	ldr	r3, [r7, #12]
 8010c8a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010c8e:	3301      	adds	r3, #1
 8010c90:	b2db      	uxtb	r3, r3
 8010c92:	79fa      	ldrb	r2, [r7, #7]
 8010c94:	429a      	cmp	r2, r3
 8010c96:	d101      	bne.n	8010c9c <netif_get_by_index+0x2c>
        return netif; /* found! */
 8010c98:	68fb      	ldr	r3, [r7, #12]
 8010c9a:	e006      	b.n	8010caa <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8010c9c:	68fb      	ldr	r3, [r7, #12]
 8010c9e:	681b      	ldr	r3, [r3, #0]
 8010ca0:	60fb      	str	r3, [r7, #12]
 8010ca2:	68fb      	ldr	r3, [r7, #12]
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	d1ef      	bne.n	8010c88 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8010ca8:	2300      	movs	r3, #0
}
 8010caa:	4618      	mov	r0, r3
 8010cac:	3714      	adds	r7, #20
 8010cae:	46bd      	mov	sp, r7
 8010cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cb4:	4770      	bx	lr
 8010cb6:	bf00      	nop
 8010cb8:	2400ce50 	.word	0x2400ce50

08010cbc <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8010cbc:	b580      	push	{r7, lr}
 8010cbe:	b082      	sub	sp, #8
 8010cc0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8010cc2:	f000 fef1 	bl	8011aa8 <sys_arch_protect>
 8010cc6:	6038      	str	r0, [r7, #0]
 8010cc8:	4b0d      	ldr	r3, [pc, #52]	; (8010d00 <pbuf_free_ooseq+0x44>)
 8010cca:	2200      	movs	r2, #0
 8010ccc:	701a      	strb	r2, [r3, #0]
 8010cce:	6838      	ldr	r0, [r7, #0]
 8010cd0:	f000 fef8 	bl	8011ac4 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8010cd4:	4b0b      	ldr	r3, [pc, #44]	; (8010d04 <pbuf_free_ooseq+0x48>)
 8010cd6:	681b      	ldr	r3, [r3, #0]
 8010cd8:	607b      	str	r3, [r7, #4]
 8010cda:	e00a      	b.n	8010cf2 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	d003      	beq.n	8010cec <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8010ce4:	6878      	ldr	r0, [r7, #4]
 8010ce6:	f002 fa77 	bl	80131d8 <tcp_free_ooseq>
      return;
 8010cea:	e005      	b.n	8010cf8 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	68db      	ldr	r3, [r3, #12]
 8010cf0:	607b      	str	r3, [r7, #4]
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	2b00      	cmp	r3, #0
 8010cf6:	d1f1      	bne.n	8010cdc <pbuf_free_ooseq+0x20>
    }
  }
}
 8010cf8:	3708      	adds	r7, #8
 8010cfa:	46bd      	mov	sp, r7
 8010cfc:	bd80      	pop	{r7, pc}
 8010cfe:	bf00      	nop
 8010d00:	2400ce58 	.word	0x2400ce58
 8010d04:	2400ce68 	.word	0x2400ce68

08010d08 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8010d08:	b580      	push	{r7, lr}
 8010d0a:	b082      	sub	sp, #8
 8010d0c:	af00      	add	r7, sp, #0
 8010d0e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8010d10:	f7ff ffd4 	bl	8010cbc <pbuf_free_ooseq>
}
 8010d14:	bf00      	nop
 8010d16:	3708      	adds	r7, #8
 8010d18:	46bd      	mov	sp, r7
 8010d1a:	bd80      	pop	{r7, pc}

08010d1c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8010d1c:	b580      	push	{r7, lr}
 8010d1e:	b082      	sub	sp, #8
 8010d20:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8010d22:	f000 fec1 	bl	8011aa8 <sys_arch_protect>
 8010d26:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8010d28:	4b0f      	ldr	r3, [pc, #60]	; (8010d68 <pbuf_pool_is_empty+0x4c>)
 8010d2a:	781b      	ldrb	r3, [r3, #0]
 8010d2c:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8010d2e:	4b0e      	ldr	r3, [pc, #56]	; (8010d68 <pbuf_pool_is_empty+0x4c>)
 8010d30:	2201      	movs	r2, #1
 8010d32:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8010d34:	6878      	ldr	r0, [r7, #4]
 8010d36:	f000 fec5 	bl	8011ac4 <sys_arch_unprotect>

  if (!queued) {
 8010d3a:	78fb      	ldrb	r3, [r7, #3]
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d10f      	bne.n	8010d60 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8010d40:	2100      	movs	r1, #0
 8010d42:	480a      	ldr	r0, [pc, #40]	; (8010d6c <pbuf_pool_is_empty+0x50>)
 8010d44:	f006 f91a 	bl	8016f7c <tcpip_try_callback>
 8010d48:	4603      	mov	r3, r0
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	d008      	beq.n	8010d60 <pbuf_pool_is_empty+0x44>
 8010d4e:	f000 feab 	bl	8011aa8 <sys_arch_protect>
 8010d52:	6078      	str	r0, [r7, #4]
 8010d54:	4b04      	ldr	r3, [pc, #16]	; (8010d68 <pbuf_pool_is_empty+0x4c>)
 8010d56:	2200      	movs	r2, #0
 8010d58:	701a      	strb	r2, [r3, #0]
 8010d5a:	6878      	ldr	r0, [r7, #4]
 8010d5c:	f000 feb2 	bl	8011ac4 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8010d60:	bf00      	nop
 8010d62:	3708      	adds	r7, #8
 8010d64:	46bd      	mov	sp, r7
 8010d66:	bd80      	pop	{r7, pc}
 8010d68:	2400ce58 	.word	0x2400ce58
 8010d6c:	08010d09 	.word	0x08010d09

08010d70 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8010d70:	b480      	push	{r7}
 8010d72:	b085      	sub	sp, #20
 8010d74:	af00      	add	r7, sp, #0
 8010d76:	60f8      	str	r0, [r7, #12]
 8010d78:	60b9      	str	r1, [r7, #8]
 8010d7a:	4611      	mov	r1, r2
 8010d7c:	461a      	mov	r2, r3
 8010d7e:	460b      	mov	r3, r1
 8010d80:	80fb      	strh	r3, [r7, #6]
 8010d82:	4613      	mov	r3, r2
 8010d84:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8010d86:	68fb      	ldr	r3, [r7, #12]
 8010d88:	2200      	movs	r2, #0
 8010d8a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8010d8c:	68fb      	ldr	r3, [r7, #12]
 8010d8e:	68ba      	ldr	r2, [r7, #8]
 8010d90:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8010d92:	68fb      	ldr	r3, [r7, #12]
 8010d94:	88fa      	ldrh	r2, [r7, #6]
 8010d96:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8010d98:	68fb      	ldr	r3, [r7, #12]
 8010d9a:	88ba      	ldrh	r2, [r7, #4]
 8010d9c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8010d9e:	8b3b      	ldrh	r3, [r7, #24]
 8010da0:	b2da      	uxtb	r2, r3
 8010da2:	68fb      	ldr	r3, [r7, #12]
 8010da4:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8010da6:	68fb      	ldr	r3, [r7, #12]
 8010da8:	7f3a      	ldrb	r2, [r7, #28]
 8010daa:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8010dac:	68fb      	ldr	r3, [r7, #12]
 8010dae:	2201      	movs	r2, #1
 8010db0:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8010db2:	68fb      	ldr	r3, [r7, #12]
 8010db4:	2200      	movs	r2, #0
 8010db6:	73da      	strb	r2, [r3, #15]
}
 8010db8:	bf00      	nop
 8010dba:	3714      	adds	r7, #20
 8010dbc:	46bd      	mov	sp, r7
 8010dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dc2:	4770      	bx	lr

08010dc4 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8010dc4:	b580      	push	{r7, lr}
 8010dc6:	b08c      	sub	sp, #48	; 0x30
 8010dc8:	af02      	add	r7, sp, #8
 8010dca:	4603      	mov	r3, r0
 8010dcc:	71fb      	strb	r3, [r7, #7]
 8010dce:	460b      	mov	r3, r1
 8010dd0:	80bb      	strh	r3, [r7, #4]
 8010dd2:	4613      	mov	r3, r2
 8010dd4:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8010dd6:	79fb      	ldrb	r3, [r7, #7]
 8010dd8:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8010dda:	887b      	ldrh	r3, [r7, #2]
 8010ddc:	2b41      	cmp	r3, #65	; 0x41
 8010dde:	d00b      	beq.n	8010df8 <pbuf_alloc+0x34>
 8010de0:	2b41      	cmp	r3, #65	; 0x41
 8010de2:	dc02      	bgt.n	8010dea <pbuf_alloc+0x26>
 8010de4:	2b01      	cmp	r3, #1
 8010de6:	d007      	beq.n	8010df8 <pbuf_alloc+0x34>
 8010de8:	e0c2      	b.n	8010f70 <pbuf_alloc+0x1ac>
 8010dea:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8010dee:	d00b      	beq.n	8010e08 <pbuf_alloc+0x44>
 8010df0:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8010df4:	d070      	beq.n	8010ed8 <pbuf_alloc+0x114>
 8010df6:	e0bb      	b.n	8010f70 <pbuf_alloc+0x1ac>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8010df8:	887a      	ldrh	r2, [r7, #2]
 8010dfa:	88bb      	ldrh	r3, [r7, #4]
 8010dfc:	4619      	mov	r1, r3
 8010dfe:	2000      	movs	r0, #0
 8010e00:	f000 f8d2 	bl	8010fa8 <pbuf_alloc_reference>
 8010e04:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8010e06:	e0bd      	b.n	8010f84 <pbuf_alloc+0x1c0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8010e08:	2300      	movs	r3, #0
 8010e0a:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8010e0c:	2300      	movs	r3, #0
 8010e0e:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8010e10:	88bb      	ldrh	r3, [r7, #4]
 8010e12:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8010e14:	200c      	movs	r0, #12
 8010e16:	f7ff fb9f 	bl	8010558 <memp_malloc>
 8010e1a:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8010e1c:	693b      	ldr	r3, [r7, #16]
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	d109      	bne.n	8010e36 <pbuf_alloc+0x72>
          PBUF_POOL_IS_EMPTY();
 8010e22:	f7ff ff7b 	bl	8010d1c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8010e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	d002      	beq.n	8010e32 <pbuf_alloc+0x6e>
            pbuf_free(p);
 8010e2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010e2e:	f000 faa9 	bl	8011384 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8010e32:	2300      	movs	r3, #0
 8010e34:	e0a7      	b.n	8010f86 <pbuf_alloc+0x1c2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8010e36:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010e38:	3303      	adds	r3, #3
 8010e3a:	b29b      	uxth	r3, r3
 8010e3c:	f023 0303 	bic.w	r3, r3, #3
 8010e40:	b29b      	uxth	r3, r3
 8010e42:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8010e46:	b29b      	uxth	r3, r3
 8010e48:	8b7a      	ldrh	r2, [r7, #26]
 8010e4a:	4293      	cmp	r3, r2
 8010e4c:	bf28      	it	cs
 8010e4e:	4613      	movcs	r3, r2
 8010e50:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8010e52:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010e54:	3310      	adds	r3, #16
 8010e56:	693a      	ldr	r2, [r7, #16]
 8010e58:	4413      	add	r3, r2
 8010e5a:	3303      	adds	r3, #3
 8010e5c:	f023 0303 	bic.w	r3, r3, #3
 8010e60:	4618      	mov	r0, r3
 8010e62:	89f9      	ldrh	r1, [r7, #14]
 8010e64:	8b7a      	ldrh	r2, [r7, #26]
 8010e66:	2300      	movs	r3, #0
 8010e68:	9301      	str	r3, [sp, #4]
 8010e6a:	887b      	ldrh	r3, [r7, #2]
 8010e6c:	9300      	str	r3, [sp, #0]
 8010e6e:	460b      	mov	r3, r1
 8010e70:	4601      	mov	r1, r0
 8010e72:	6938      	ldr	r0, [r7, #16]
 8010e74:	f7ff ff7c 	bl	8010d70 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8010e78:	693b      	ldr	r3, [r7, #16]
 8010e7a:	685b      	ldr	r3, [r3, #4]
 8010e7c:	f003 0303 	and.w	r3, r3, #3
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d006      	beq.n	8010e92 <pbuf_alloc+0xce>
 8010e84:	4b42      	ldr	r3, [pc, #264]	; (8010f90 <pbuf_alloc+0x1cc>)
 8010e86:	f240 1201 	movw	r2, #257	; 0x101
 8010e8a:	4942      	ldr	r1, [pc, #264]	; (8010f94 <pbuf_alloc+0x1d0>)
 8010e8c:	4842      	ldr	r0, [pc, #264]	; (8010f98 <pbuf_alloc+0x1d4>)
 8010e8e:	f00a f937 	bl	801b100 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8010e92:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010e94:	3303      	adds	r3, #3
 8010e96:	f023 0303 	bic.w	r3, r3, #3
 8010e9a:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8010e9e:	d106      	bne.n	8010eae <pbuf_alloc+0xea>
 8010ea0:	4b3b      	ldr	r3, [pc, #236]	; (8010f90 <pbuf_alloc+0x1cc>)
 8010ea2:	f240 1203 	movw	r2, #259	; 0x103
 8010ea6:	493d      	ldr	r1, [pc, #244]	; (8010f9c <pbuf_alloc+0x1d8>)
 8010ea8:	483b      	ldr	r0, [pc, #236]	; (8010f98 <pbuf_alloc+0x1d4>)
 8010eaa:	f00a f929 	bl	801b100 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8010eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	d102      	bne.n	8010eba <pbuf_alloc+0xf6>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8010eb4:	693b      	ldr	r3, [r7, #16]
 8010eb6:	627b      	str	r3, [r7, #36]	; 0x24
 8010eb8:	e002      	b.n	8010ec0 <pbuf_alloc+0xfc>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8010eba:	69fb      	ldr	r3, [r7, #28]
 8010ebc:	693a      	ldr	r2, [r7, #16]
 8010ebe:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8010ec0:	693b      	ldr	r3, [r7, #16]
 8010ec2:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8010ec4:	8b7a      	ldrh	r2, [r7, #26]
 8010ec6:	89fb      	ldrh	r3, [r7, #14]
 8010ec8:	1ad3      	subs	r3, r2, r3
 8010eca:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8010ecc:	2300      	movs	r3, #0
 8010ece:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8010ed0:	8b7b      	ldrh	r3, [r7, #26]
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d19e      	bne.n	8010e14 <pbuf_alloc+0x50>
      break;
 8010ed6:	e055      	b.n	8010f84 <pbuf_alloc+0x1c0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8010ed8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010eda:	3303      	adds	r3, #3
 8010edc:	b29b      	uxth	r3, r3
 8010ede:	f023 0303 	bic.w	r3, r3, #3
 8010ee2:	b29a      	uxth	r2, r3
 8010ee4:	88bb      	ldrh	r3, [r7, #4]
 8010ee6:	3303      	adds	r3, #3
 8010ee8:	b29b      	uxth	r3, r3
 8010eea:	f023 0303 	bic.w	r3, r3, #3
 8010eee:	b29b      	uxth	r3, r3
 8010ef0:	4413      	add	r3, r2
 8010ef2:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8010ef4:	8b3b      	ldrh	r3, [r7, #24]
 8010ef6:	3310      	adds	r3, #16
 8010ef8:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8010efa:	8b3a      	ldrh	r2, [r7, #24]
 8010efc:	88bb      	ldrh	r3, [r7, #4]
 8010efe:	3303      	adds	r3, #3
 8010f00:	f023 0303 	bic.w	r3, r3, #3
 8010f04:	429a      	cmp	r2, r3
 8010f06:	d306      	bcc.n	8010f16 <pbuf_alloc+0x152>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8010f08:	8afa      	ldrh	r2, [r7, #22]
 8010f0a:	88bb      	ldrh	r3, [r7, #4]
 8010f0c:	3303      	adds	r3, #3
 8010f0e:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8010f12:	429a      	cmp	r2, r3
 8010f14:	d201      	bcs.n	8010f1a <pbuf_alloc+0x156>
        return NULL;
 8010f16:	2300      	movs	r3, #0
 8010f18:	e035      	b.n	8010f86 <pbuf_alloc+0x1c2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8010f1a:	8afb      	ldrh	r3, [r7, #22]
 8010f1c:	4618      	mov	r0, r3
 8010f1e:	f7ff f973 	bl	8010208 <mem_malloc>
 8010f22:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8010f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d101      	bne.n	8010f2e <pbuf_alloc+0x16a>
        return NULL;
 8010f2a:	2300      	movs	r3, #0
 8010f2c:	e02b      	b.n	8010f86 <pbuf_alloc+0x1c2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8010f2e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010f30:	3310      	adds	r3, #16
 8010f32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010f34:	4413      	add	r3, r2
 8010f36:	3303      	adds	r3, #3
 8010f38:	f023 0303 	bic.w	r3, r3, #3
 8010f3c:	4618      	mov	r0, r3
 8010f3e:	88b9      	ldrh	r1, [r7, #4]
 8010f40:	88ba      	ldrh	r2, [r7, #4]
 8010f42:	2300      	movs	r3, #0
 8010f44:	9301      	str	r3, [sp, #4]
 8010f46:	887b      	ldrh	r3, [r7, #2]
 8010f48:	9300      	str	r3, [sp, #0]
 8010f4a:	460b      	mov	r3, r1
 8010f4c:	4601      	mov	r1, r0
 8010f4e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010f50:	f7ff ff0e 	bl	8010d70 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8010f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f56:	685b      	ldr	r3, [r3, #4]
 8010f58:	f003 0303 	and.w	r3, r3, #3
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	d010      	beq.n	8010f82 <pbuf_alloc+0x1be>
 8010f60:	4b0b      	ldr	r3, [pc, #44]	; (8010f90 <pbuf_alloc+0x1cc>)
 8010f62:	f240 1223 	movw	r2, #291	; 0x123
 8010f66:	490e      	ldr	r1, [pc, #56]	; (8010fa0 <pbuf_alloc+0x1dc>)
 8010f68:	480b      	ldr	r0, [pc, #44]	; (8010f98 <pbuf_alloc+0x1d4>)
 8010f6a:	f00a f8c9 	bl	801b100 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8010f6e:	e008      	b.n	8010f82 <pbuf_alloc+0x1be>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8010f70:	4b07      	ldr	r3, [pc, #28]	; (8010f90 <pbuf_alloc+0x1cc>)
 8010f72:	f240 1227 	movw	r2, #295	; 0x127
 8010f76:	490b      	ldr	r1, [pc, #44]	; (8010fa4 <pbuf_alloc+0x1e0>)
 8010f78:	4807      	ldr	r0, [pc, #28]	; (8010f98 <pbuf_alloc+0x1d4>)
 8010f7a:	f00a f8c1 	bl	801b100 <iprintf>
      return NULL;
 8010f7e:	2300      	movs	r3, #0
 8010f80:	e001      	b.n	8010f86 <pbuf_alloc+0x1c2>
      break;
 8010f82:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8010f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010f86:	4618      	mov	r0, r3
 8010f88:	3728      	adds	r7, #40	; 0x28
 8010f8a:	46bd      	mov	sp, r7
 8010f8c:	bd80      	pop	{r7, pc}
 8010f8e:	bf00      	nop
 8010f90:	0801e0d0 	.word	0x0801e0d0
 8010f94:	0801e120 	.word	0x0801e120
 8010f98:	0801e150 	.word	0x0801e150
 8010f9c:	0801e178 	.word	0x0801e178
 8010fa0:	0801e1ac 	.word	0x0801e1ac
 8010fa4:	0801e1d8 	.word	0x0801e1d8

08010fa8 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8010fa8:	b580      	push	{r7, lr}
 8010faa:	b086      	sub	sp, #24
 8010fac:	af02      	add	r7, sp, #8
 8010fae:	6078      	str	r0, [r7, #4]
 8010fb0:	460b      	mov	r3, r1
 8010fb2:	807b      	strh	r3, [r7, #2]
 8010fb4:	4613      	mov	r3, r2
 8010fb6:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8010fb8:	883b      	ldrh	r3, [r7, #0]
 8010fba:	2b41      	cmp	r3, #65	; 0x41
 8010fbc:	d009      	beq.n	8010fd2 <pbuf_alloc_reference+0x2a>
 8010fbe:	883b      	ldrh	r3, [r7, #0]
 8010fc0:	2b01      	cmp	r3, #1
 8010fc2:	d006      	beq.n	8010fd2 <pbuf_alloc_reference+0x2a>
 8010fc4:	4b0f      	ldr	r3, [pc, #60]	; (8011004 <pbuf_alloc_reference+0x5c>)
 8010fc6:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8010fca:	490f      	ldr	r1, [pc, #60]	; (8011008 <pbuf_alloc_reference+0x60>)
 8010fcc:	480f      	ldr	r0, [pc, #60]	; (801100c <pbuf_alloc_reference+0x64>)
 8010fce:	f00a f897 	bl	801b100 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8010fd2:	200b      	movs	r0, #11
 8010fd4:	f7ff fac0 	bl	8010558 <memp_malloc>
 8010fd8:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8010fda:	68fb      	ldr	r3, [r7, #12]
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	d101      	bne.n	8010fe4 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8010fe0:	2300      	movs	r3, #0
 8010fe2:	e00b      	b.n	8010ffc <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8010fe4:	8879      	ldrh	r1, [r7, #2]
 8010fe6:	887a      	ldrh	r2, [r7, #2]
 8010fe8:	2300      	movs	r3, #0
 8010fea:	9301      	str	r3, [sp, #4]
 8010fec:	883b      	ldrh	r3, [r7, #0]
 8010fee:	9300      	str	r3, [sp, #0]
 8010ff0:	460b      	mov	r3, r1
 8010ff2:	6879      	ldr	r1, [r7, #4]
 8010ff4:	68f8      	ldr	r0, [r7, #12]
 8010ff6:	f7ff febb 	bl	8010d70 <pbuf_init_alloced_pbuf>
  return p;
 8010ffa:	68fb      	ldr	r3, [r7, #12]
}
 8010ffc:	4618      	mov	r0, r3
 8010ffe:	3710      	adds	r7, #16
 8011000:	46bd      	mov	sp, r7
 8011002:	bd80      	pop	{r7, pc}
 8011004:	0801e0d0 	.word	0x0801e0d0
 8011008:	0801e1f4 	.word	0x0801e1f4
 801100c:	0801e150 	.word	0x0801e150

08011010 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8011010:	b580      	push	{r7, lr}
 8011012:	b088      	sub	sp, #32
 8011014:	af02      	add	r7, sp, #8
 8011016:	607b      	str	r3, [r7, #4]
 8011018:	4603      	mov	r3, r0
 801101a:	73fb      	strb	r3, [r7, #15]
 801101c:	460b      	mov	r3, r1
 801101e:	81bb      	strh	r3, [r7, #12]
 8011020:	4613      	mov	r3, r2
 8011022:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8011024:	7bfb      	ldrb	r3, [r7, #15]
 8011026:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8011028:	8a7b      	ldrh	r3, [r7, #18]
 801102a:	3303      	adds	r3, #3
 801102c:	f023 0203 	bic.w	r2, r3, #3
 8011030:	89bb      	ldrh	r3, [r7, #12]
 8011032:	441a      	add	r2, r3
 8011034:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011036:	429a      	cmp	r2, r3
 8011038:	d901      	bls.n	801103e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 801103a:	2300      	movs	r3, #0
 801103c:	e018      	b.n	8011070 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 801103e:	6a3b      	ldr	r3, [r7, #32]
 8011040:	2b00      	cmp	r3, #0
 8011042:	d007      	beq.n	8011054 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8011044:	8a7b      	ldrh	r3, [r7, #18]
 8011046:	3303      	adds	r3, #3
 8011048:	f023 0303 	bic.w	r3, r3, #3
 801104c:	6a3a      	ldr	r2, [r7, #32]
 801104e:	4413      	add	r3, r2
 8011050:	617b      	str	r3, [r7, #20]
 8011052:	e001      	b.n	8011058 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8011054:	2300      	movs	r3, #0
 8011056:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8011058:	6878      	ldr	r0, [r7, #4]
 801105a:	89b9      	ldrh	r1, [r7, #12]
 801105c:	89ba      	ldrh	r2, [r7, #12]
 801105e:	2302      	movs	r3, #2
 8011060:	9301      	str	r3, [sp, #4]
 8011062:	897b      	ldrh	r3, [r7, #10]
 8011064:	9300      	str	r3, [sp, #0]
 8011066:	460b      	mov	r3, r1
 8011068:	6979      	ldr	r1, [r7, #20]
 801106a:	f7ff fe81 	bl	8010d70 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 801106e:	687b      	ldr	r3, [r7, #4]
}
 8011070:	4618      	mov	r0, r3
 8011072:	3718      	adds	r7, #24
 8011074:	46bd      	mov	sp, r7
 8011076:	bd80      	pop	{r7, pc}

08011078 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8011078:	b580      	push	{r7, lr}
 801107a:	b084      	sub	sp, #16
 801107c:	af00      	add	r7, sp, #0
 801107e:	6078      	str	r0, [r7, #4]
 8011080:	460b      	mov	r3, r1
 8011082:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	2b00      	cmp	r3, #0
 8011088:	d106      	bne.n	8011098 <pbuf_realloc+0x20>
 801108a:	4b3a      	ldr	r3, [pc, #232]	; (8011174 <pbuf_realloc+0xfc>)
 801108c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8011090:	4939      	ldr	r1, [pc, #228]	; (8011178 <pbuf_realloc+0x100>)
 8011092:	483a      	ldr	r0, [pc, #232]	; (801117c <pbuf_realloc+0x104>)
 8011094:	f00a f834 	bl	801b100 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	891b      	ldrh	r3, [r3, #8]
 801109c:	887a      	ldrh	r2, [r7, #2]
 801109e:	429a      	cmp	r2, r3
 80110a0:	d264      	bcs.n	801116c <pbuf_realloc+0xf4>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	891a      	ldrh	r2, [r3, #8]
 80110a6:	887b      	ldrh	r3, [r7, #2]
 80110a8:	1ad3      	subs	r3, r2, r3
 80110aa:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80110ac:	887b      	ldrh	r3, [r7, #2]
 80110ae:	817b      	strh	r3, [r7, #10]
  q = p;
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80110b4:	e018      	b.n	80110e8 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80110b6:	68fb      	ldr	r3, [r7, #12]
 80110b8:	895b      	ldrh	r3, [r3, #10]
 80110ba:	897a      	ldrh	r2, [r7, #10]
 80110bc:	1ad3      	subs	r3, r2, r3
 80110be:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80110c0:	68fb      	ldr	r3, [r7, #12]
 80110c2:	891a      	ldrh	r2, [r3, #8]
 80110c4:	893b      	ldrh	r3, [r7, #8]
 80110c6:	1ad3      	subs	r3, r2, r3
 80110c8:	b29a      	uxth	r2, r3
 80110ca:	68fb      	ldr	r3, [r7, #12]
 80110cc:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80110ce:	68fb      	ldr	r3, [r7, #12]
 80110d0:	681b      	ldr	r3, [r3, #0]
 80110d2:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80110d4:	68fb      	ldr	r3, [r7, #12]
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	d106      	bne.n	80110e8 <pbuf_realloc+0x70>
 80110da:	4b26      	ldr	r3, [pc, #152]	; (8011174 <pbuf_realloc+0xfc>)
 80110dc:	f240 12af 	movw	r2, #431	; 0x1af
 80110e0:	4927      	ldr	r1, [pc, #156]	; (8011180 <pbuf_realloc+0x108>)
 80110e2:	4826      	ldr	r0, [pc, #152]	; (801117c <pbuf_realloc+0x104>)
 80110e4:	f00a f80c 	bl	801b100 <iprintf>
  while (rem_len > q->len) {
 80110e8:	68fb      	ldr	r3, [r7, #12]
 80110ea:	895b      	ldrh	r3, [r3, #10]
 80110ec:	897a      	ldrh	r2, [r7, #10]
 80110ee:	429a      	cmp	r2, r3
 80110f0:	d8e1      	bhi.n	80110b6 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80110f2:	68fb      	ldr	r3, [r7, #12]
 80110f4:	7b1b      	ldrb	r3, [r3, #12]
 80110f6:	f003 030f 	and.w	r3, r3, #15
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	d122      	bne.n	8011144 <pbuf_realloc+0xcc>
 80110fe:	68fb      	ldr	r3, [r7, #12]
 8011100:	895b      	ldrh	r3, [r3, #10]
 8011102:	897a      	ldrh	r2, [r7, #10]
 8011104:	429a      	cmp	r2, r3
 8011106:	d01d      	beq.n	8011144 <pbuf_realloc+0xcc>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8011108:	68fb      	ldr	r3, [r7, #12]
 801110a:	7b5b      	ldrb	r3, [r3, #13]
 801110c:	f003 0302 	and.w	r3, r3, #2
 8011110:	2b00      	cmp	r3, #0
 8011112:	d117      	bne.n	8011144 <pbuf_realloc+0xcc>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8011114:	68fb      	ldr	r3, [r7, #12]
 8011116:	685b      	ldr	r3, [r3, #4]
 8011118:	461a      	mov	r2, r3
 801111a:	68fb      	ldr	r3, [r7, #12]
 801111c:	1ad3      	subs	r3, r2, r3
 801111e:	b29a      	uxth	r2, r3
 8011120:	897b      	ldrh	r3, [r7, #10]
 8011122:	4413      	add	r3, r2
 8011124:	b29b      	uxth	r3, r3
 8011126:	4619      	mov	r1, r3
 8011128:	68f8      	ldr	r0, [r7, #12]
 801112a:	f7fe ff5d 	bl	800ffe8 <mem_trim>
 801112e:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8011130:	68fb      	ldr	r3, [r7, #12]
 8011132:	2b00      	cmp	r3, #0
 8011134:	d106      	bne.n	8011144 <pbuf_realloc+0xcc>
 8011136:	4b0f      	ldr	r3, [pc, #60]	; (8011174 <pbuf_realloc+0xfc>)
 8011138:	f240 12bd 	movw	r2, #445	; 0x1bd
 801113c:	4911      	ldr	r1, [pc, #68]	; (8011184 <pbuf_realloc+0x10c>)
 801113e:	480f      	ldr	r0, [pc, #60]	; (801117c <pbuf_realloc+0x104>)
 8011140:	f009 ffde 	bl	801b100 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8011144:	68fb      	ldr	r3, [r7, #12]
 8011146:	897a      	ldrh	r2, [r7, #10]
 8011148:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 801114a:	68fb      	ldr	r3, [r7, #12]
 801114c:	895a      	ldrh	r2, [r3, #10]
 801114e:	68fb      	ldr	r3, [r7, #12]
 8011150:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8011152:	68fb      	ldr	r3, [r7, #12]
 8011154:	681b      	ldr	r3, [r3, #0]
 8011156:	2b00      	cmp	r3, #0
 8011158:	d004      	beq.n	8011164 <pbuf_realloc+0xec>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 801115a:	68fb      	ldr	r3, [r7, #12]
 801115c:	681b      	ldr	r3, [r3, #0]
 801115e:	4618      	mov	r0, r3
 8011160:	f000 f910 	bl	8011384 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8011164:	68fb      	ldr	r3, [r7, #12]
 8011166:	2200      	movs	r2, #0
 8011168:	601a      	str	r2, [r3, #0]
 801116a:	e000      	b.n	801116e <pbuf_realloc+0xf6>
    return;
 801116c:	bf00      	nop

}
 801116e:	3710      	adds	r7, #16
 8011170:	46bd      	mov	sp, r7
 8011172:	bd80      	pop	{r7, pc}
 8011174:	0801e0d0 	.word	0x0801e0d0
 8011178:	0801e208 	.word	0x0801e208
 801117c:	0801e150 	.word	0x0801e150
 8011180:	0801e220 	.word	0x0801e220
 8011184:	0801e238 	.word	0x0801e238

08011188 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8011188:	b580      	push	{r7, lr}
 801118a:	b086      	sub	sp, #24
 801118c:	af00      	add	r7, sp, #0
 801118e:	60f8      	str	r0, [r7, #12]
 8011190:	60b9      	str	r1, [r7, #8]
 8011192:	4613      	mov	r3, r2
 8011194:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8011196:	68fb      	ldr	r3, [r7, #12]
 8011198:	2b00      	cmp	r3, #0
 801119a:	d106      	bne.n	80111aa <pbuf_add_header_impl+0x22>
 801119c:	4b2b      	ldr	r3, [pc, #172]	; (801124c <pbuf_add_header_impl+0xc4>)
 801119e:	f240 12df 	movw	r2, #479	; 0x1df
 80111a2:	492b      	ldr	r1, [pc, #172]	; (8011250 <pbuf_add_header_impl+0xc8>)
 80111a4:	482b      	ldr	r0, [pc, #172]	; (8011254 <pbuf_add_header_impl+0xcc>)
 80111a6:	f009 ffab 	bl	801b100 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80111aa:	68fb      	ldr	r3, [r7, #12]
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	d003      	beq.n	80111b8 <pbuf_add_header_impl+0x30>
 80111b0:	68bb      	ldr	r3, [r7, #8]
 80111b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80111b6:	d301      	bcc.n	80111bc <pbuf_add_header_impl+0x34>
    return 1;
 80111b8:	2301      	movs	r3, #1
 80111ba:	e043      	b.n	8011244 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 80111bc:	68bb      	ldr	r3, [r7, #8]
 80111be:	2b00      	cmp	r3, #0
 80111c0:	d101      	bne.n	80111c6 <pbuf_add_header_impl+0x3e>
    return 0;
 80111c2:	2300      	movs	r3, #0
 80111c4:	e03e      	b.n	8011244 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80111c6:	68bb      	ldr	r3, [r7, #8]
 80111c8:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80111ca:	68fb      	ldr	r3, [r7, #12]
 80111cc:	891a      	ldrh	r2, [r3, #8]
 80111ce:	8a7b      	ldrh	r3, [r7, #18]
 80111d0:	4413      	add	r3, r2
 80111d2:	b29b      	uxth	r3, r3
 80111d4:	8a7a      	ldrh	r2, [r7, #18]
 80111d6:	429a      	cmp	r2, r3
 80111d8:	d901      	bls.n	80111de <pbuf_add_header_impl+0x56>
    return 1;
 80111da:	2301      	movs	r3, #1
 80111dc:	e032      	b.n	8011244 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 80111de:	68fb      	ldr	r3, [r7, #12]
 80111e0:	7b1b      	ldrb	r3, [r3, #12]
 80111e2:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80111e4:	8a3b      	ldrh	r3, [r7, #16]
 80111e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80111ea:	2b00      	cmp	r3, #0
 80111ec:	d00c      	beq.n	8011208 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80111ee:	68fb      	ldr	r3, [r7, #12]
 80111f0:	685a      	ldr	r2, [r3, #4]
 80111f2:	68bb      	ldr	r3, [r7, #8]
 80111f4:	425b      	negs	r3, r3
 80111f6:	4413      	add	r3, r2
 80111f8:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80111fa:	68fb      	ldr	r3, [r7, #12]
 80111fc:	3310      	adds	r3, #16
 80111fe:	697a      	ldr	r2, [r7, #20]
 8011200:	429a      	cmp	r2, r3
 8011202:	d20d      	bcs.n	8011220 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8011204:	2301      	movs	r3, #1
 8011206:	e01d      	b.n	8011244 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8011208:	79fb      	ldrb	r3, [r7, #7]
 801120a:	2b00      	cmp	r3, #0
 801120c:	d006      	beq.n	801121c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 801120e:	68fb      	ldr	r3, [r7, #12]
 8011210:	685a      	ldr	r2, [r3, #4]
 8011212:	68bb      	ldr	r3, [r7, #8]
 8011214:	425b      	negs	r3, r3
 8011216:	4413      	add	r3, r2
 8011218:	617b      	str	r3, [r7, #20]
 801121a:	e001      	b.n	8011220 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 801121c:	2301      	movs	r3, #1
 801121e:	e011      	b.n	8011244 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8011220:	68fb      	ldr	r3, [r7, #12]
 8011222:	697a      	ldr	r2, [r7, #20]
 8011224:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8011226:	68fb      	ldr	r3, [r7, #12]
 8011228:	895a      	ldrh	r2, [r3, #10]
 801122a:	8a7b      	ldrh	r3, [r7, #18]
 801122c:	4413      	add	r3, r2
 801122e:	b29a      	uxth	r2, r3
 8011230:	68fb      	ldr	r3, [r7, #12]
 8011232:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8011234:	68fb      	ldr	r3, [r7, #12]
 8011236:	891a      	ldrh	r2, [r3, #8]
 8011238:	8a7b      	ldrh	r3, [r7, #18]
 801123a:	4413      	add	r3, r2
 801123c:	b29a      	uxth	r2, r3
 801123e:	68fb      	ldr	r3, [r7, #12]
 8011240:	811a      	strh	r2, [r3, #8]


  return 0;
 8011242:	2300      	movs	r3, #0
}
 8011244:	4618      	mov	r0, r3
 8011246:	3718      	adds	r7, #24
 8011248:	46bd      	mov	sp, r7
 801124a:	bd80      	pop	{r7, pc}
 801124c:	0801e0d0 	.word	0x0801e0d0
 8011250:	0801e254 	.word	0x0801e254
 8011254:	0801e150 	.word	0x0801e150

08011258 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8011258:	b580      	push	{r7, lr}
 801125a:	b082      	sub	sp, #8
 801125c:	af00      	add	r7, sp, #0
 801125e:	6078      	str	r0, [r7, #4]
 8011260:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8011262:	2200      	movs	r2, #0
 8011264:	6839      	ldr	r1, [r7, #0]
 8011266:	6878      	ldr	r0, [r7, #4]
 8011268:	f7ff ff8e 	bl	8011188 <pbuf_add_header_impl>
 801126c:	4603      	mov	r3, r0
}
 801126e:	4618      	mov	r0, r3
 8011270:	3708      	adds	r7, #8
 8011272:	46bd      	mov	sp, r7
 8011274:	bd80      	pop	{r7, pc}
	...

08011278 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8011278:	b580      	push	{r7, lr}
 801127a:	b084      	sub	sp, #16
 801127c:	af00      	add	r7, sp, #0
 801127e:	6078      	str	r0, [r7, #4]
 8011280:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	2b00      	cmp	r3, #0
 8011286:	d106      	bne.n	8011296 <pbuf_remove_header+0x1e>
 8011288:	4b20      	ldr	r3, [pc, #128]	; (801130c <pbuf_remove_header+0x94>)
 801128a:	f240 224b 	movw	r2, #587	; 0x24b
 801128e:	4920      	ldr	r1, [pc, #128]	; (8011310 <pbuf_remove_header+0x98>)
 8011290:	4820      	ldr	r0, [pc, #128]	; (8011314 <pbuf_remove_header+0x9c>)
 8011292:	f009 ff35 	bl	801b100 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	2b00      	cmp	r3, #0
 801129a:	d003      	beq.n	80112a4 <pbuf_remove_header+0x2c>
 801129c:	683b      	ldr	r3, [r7, #0]
 801129e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80112a2:	d301      	bcc.n	80112a8 <pbuf_remove_header+0x30>
    return 1;
 80112a4:	2301      	movs	r3, #1
 80112a6:	e02c      	b.n	8011302 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 80112a8:	683b      	ldr	r3, [r7, #0]
 80112aa:	2b00      	cmp	r3, #0
 80112ac:	d101      	bne.n	80112b2 <pbuf_remove_header+0x3a>
    return 0;
 80112ae:	2300      	movs	r3, #0
 80112b0:	e027      	b.n	8011302 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80112b2:	683b      	ldr	r3, [r7, #0]
 80112b4:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	895b      	ldrh	r3, [r3, #10]
 80112ba:	89fa      	ldrh	r2, [r7, #14]
 80112bc:	429a      	cmp	r2, r3
 80112be:	d908      	bls.n	80112d2 <pbuf_remove_header+0x5a>
 80112c0:	4b12      	ldr	r3, [pc, #72]	; (801130c <pbuf_remove_header+0x94>)
 80112c2:	f240 2255 	movw	r2, #597	; 0x255
 80112c6:	4914      	ldr	r1, [pc, #80]	; (8011318 <pbuf_remove_header+0xa0>)
 80112c8:	4812      	ldr	r0, [pc, #72]	; (8011314 <pbuf_remove_header+0x9c>)
 80112ca:	f009 ff19 	bl	801b100 <iprintf>
 80112ce:	2301      	movs	r3, #1
 80112d0:	e017      	b.n	8011302 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	685b      	ldr	r3, [r3, #4]
 80112d6:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	685a      	ldr	r2, [r3, #4]
 80112dc:	683b      	ldr	r3, [r7, #0]
 80112de:	441a      	add	r2, r3
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	895a      	ldrh	r2, [r3, #10]
 80112e8:	89fb      	ldrh	r3, [r7, #14]
 80112ea:	1ad3      	subs	r3, r2, r3
 80112ec:	b29a      	uxth	r2, r3
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	891a      	ldrh	r2, [r3, #8]
 80112f6:	89fb      	ldrh	r3, [r7, #14]
 80112f8:	1ad3      	subs	r3, r2, r3
 80112fa:	b29a      	uxth	r2, r3
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8011300:	2300      	movs	r3, #0
}
 8011302:	4618      	mov	r0, r3
 8011304:	3710      	adds	r7, #16
 8011306:	46bd      	mov	sp, r7
 8011308:	bd80      	pop	{r7, pc}
 801130a:	bf00      	nop
 801130c:	0801e0d0 	.word	0x0801e0d0
 8011310:	0801e254 	.word	0x0801e254
 8011314:	0801e150 	.word	0x0801e150
 8011318:	0801e260 	.word	0x0801e260

0801131c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 801131c:	b580      	push	{r7, lr}
 801131e:	b082      	sub	sp, #8
 8011320:	af00      	add	r7, sp, #0
 8011322:	6078      	str	r0, [r7, #4]
 8011324:	460b      	mov	r3, r1
 8011326:	807b      	strh	r3, [r7, #2]
 8011328:	4613      	mov	r3, r2
 801132a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 801132c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011330:	2b00      	cmp	r3, #0
 8011332:	da08      	bge.n	8011346 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8011334:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011338:	425b      	negs	r3, r3
 801133a:	4619      	mov	r1, r3
 801133c:	6878      	ldr	r0, [r7, #4]
 801133e:	f7ff ff9b 	bl	8011278 <pbuf_remove_header>
 8011342:	4603      	mov	r3, r0
 8011344:	e007      	b.n	8011356 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8011346:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801134a:	787a      	ldrb	r2, [r7, #1]
 801134c:	4619      	mov	r1, r3
 801134e:	6878      	ldr	r0, [r7, #4]
 8011350:	f7ff ff1a 	bl	8011188 <pbuf_add_header_impl>
 8011354:	4603      	mov	r3, r0
  }
}
 8011356:	4618      	mov	r0, r3
 8011358:	3708      	adds	r7, #8
 801135a:	46bd      	mov	sp, r7
 801135c:	bd80      	pop	{r7, pc}

0801135e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 801135e:	b580      	push	{r7, lr}
 8011360:	b082      	sub	sp, #8
 8011362:	af00      	add	r7, sp, #0
 8011364:	6078      	str	r0, [r7, #4]
 8011366:	460b      	mov	r3, r1
 8011368:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 801136a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801136e:	2201      	movs	r2, #1
 8011370:	4619      	mov	r1, r3
 8011372:	6878      	ldr	r0, [r7, #4]
 8011374:	f7ff ffd2 	bl	801131c <pbuf_header_impl>
 8011378:	4603      	mov	r3, r0
}
 801137a:	4618      	mov	r0, r3
 801137c:	3708      	adds	r7, #8
 801137e:	46bd      	mov	sp, r7
 8011380:	bd80      	pop	{r7, pc}
	...

08011384 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8011384:	b580      	push	{r7, lr}
 8011386:	b088      	sub	sp, #32
 8011388:	af00      	add	r7, sp, #0
 801138a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	2b00      	cmp	r3, #0
 8011390:	d10b      	bne.n	80113aa <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	2b00      	cmp	r3, #0
 8011396:	d106      	bne.n	80113a6 <pbuf_free+0x22>
 8011398:	4b3b      	ldr	r3, [pc, #236]	; (8011488 <pbuf_free+0x104>)
 801139a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 801139e:	493b      	ldr	r1, [pc, #236]	; (801148c <pbuf_free+0x108>)
 80113a0:	483b      	ldr	r0, [pc, #236]	; (8011490 <pbuf_free+0x10c>)
 80113a2:	f009 fead 	bl	801b100 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80113a6:	2300      	movs	r3, #0
 80113a8:	e069      	b.n	801147e <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80113aa:	2300      	movs	r3, #0
 80113ac:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80113ae:	e062      	b.n	8011476 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 80113b0:	f000 fb7a 	bl	8011aa8 <sys_arch_protect>
 80113b4:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	7b9b      	ldrb	r3, [r3, #14]
 80113ba:	2b00      	cmp	r3, #0
 80113bc:	d106      	bne.n	80113cc <pbuf_free+0x48>
 80113be:	4b32      	ldr	r3, [pc, #200]	; (8011488 <pbuf_free+0x104>)
 80113c0:	f240 22f1 	movw	r2, #753	; 0x2f1
 80113c4:	4933      	ldr	r1, [pc, #204]	; (8011494 <pbuf_free+0x110>)
 80113c6:	4832      	ldr	r0, [pc, #200]	; (8011490 <pbuf_free+0x10c>)
 80113c8:	f009 fe9a 	bl	801b100 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	7b9b      	ldrb	r3, [r3, #14]
 80113d0:	3b01      	subs	r3, #1
 80113d2:	b2da      	uxtb	r2, r3
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	739a      	strb	r2, [r3, #14]
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	7b9b      	ldrb	r3, [r3, #14]
 80113dc:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 80113de:	69b8      	ldr	r0, [r7, #24]
 80113e0:	f000 fb70 	bl	8011ac4 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80113e4:	7dfb      	ldrb	r3, [r7, #23]
 80113e6:	2b00      	cmp	r3, #0
 80113e8:	d143      	bne.n	8011472 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	681b      	ldr	r3, [r3, #0]
 80113ee:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	7b1b      	ldrb	r3, [r3, #12]
 80113f4:	f003 030f 	and.w	r3, r3, #15
 80113f8:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	7b5b      	ldrb	r3, [r3, #13]
 80113fe:	f003 0302 	and.w	r3, r3, #2
 8011402:	2b00      	cmp	r3, #0
 8011404:	d011      	beq.n	801142a <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 801140a:	68bb      	ldr	r3, [r7, #8]
 801140c:	691b      	ldr	r3, [r3, #16]
 801140e:	2b00      	cmp	r3, #0
 8011410:	d106      	bne.n	8011420 <pbuf_free+0x9c>
 8011412:	4b1d      	ldr	r3, [pc, #116]	; (8011488 <pbuf_free+0x104>)
 8011414:	f240 22ff 	movw	r2, #767	; 0x2ff
 8011418:	491f      	ldr	r1, [pc, #124]	; (8011498 <pbuf_free+0x114>)
 801141a:	481d      	ldr	r0, [pc, #116]	; (8011490 <pbuf_free+0x10c>)
 801141c:	f009 fe70 	bl	801b100 <iprintf>
        pc->custom_free_function(p);
 8011420:	68bb      	ldr	r3, [r7, #8]
 8011422:	691b      	ldr	r3, [r3, #16]
 8011424:	6878      	ldr	r0, [r7, #4]
 8011426:	4798      	blx	r3
 8011428:	e01d      	b.n	8011466 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 801142a:	7bfb      	ldrb	r3, [r7, #15]
 801142c:	2b02      	cmp	r3, #2
 801142e:	d104      	bne.n	801143a <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8011430:	6879      	ldr	r1, [r7, #4]
 8011432:	200c      	movs	r0, #12
 8011434:	f7ff f906 	bl	8010644 <memp_free>
 8011438:	e015      	b.n	8011466 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 801143a:	7bfb      	ldrb	r3, [r7, #15]
 801143c:	2b01      	cmp	r3, #1
 801143e:	d104      	bne.n	801144a <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8011440:	6879      	ldr	r1, [r7, #4]
 8011442:	200b      	movs	r0, #11
 8011444:	f7ff f8fe 	bl	8010644 <memp_free>
 8011448:	e00d      	b.n	8011466 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 801144a:	7bfb      	ldrb	r3, [r7, #15]
 801144c:	2b00      	cmp	r3, #0
 801144e:	d103      	bne.n	8011458 <pbuf_free+0xd4>
          mem_free(p);
 8011450:	6878      	ldr	r0, [r7, #4]
 8011452:	f7fe fd39 	bl	800fec8 <mem_free>
 8011456:	e006      	b.n	8011466 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8011458:	4b0b      	ldr	r3, [pc, #44]	; (8011488 <pbuf_free+0x104>)
 801145a:	f240 320f 	movw	r2, #783	; 0x30f
 801145e:	490f      	ldr	r1, [pc, #60]	; (801149c <pbuf_free+0x118>)
 8011460:	480b      	ldr	r0, [pc, #44]	; (8011490 <pbuf_free+0x10c>)
 8011462:	f009 fe4d 	bl	801b100 <iprintf>
        }
      }
      count++;
 8011466:	7ffb      	ldrb	r3, [r7, #31]
 8011468:	3301      	adds	r3, #1
 801146a:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 801146c:	693b      	ldr	r3, [r7, #16]
 801146e:	607b      	str	r3, [r7, #4]
 8011470:	e001      	b.n	8011476 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8011472:	2300      	movs	r3, #0
 8011474:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	2b00      	cmp	r3, #0
 801147a:	d199      	bne.n	80113b0 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 801147c:	7ffb      	ldrb	r3, [r7, #31]
}
 801147e:	4618      	mov	r0, r3
 8011480:	3720      	adds	r7, #32
 8011482:	46bd      	mov	sp, r7
 8011484:	bd80      	pop	{r7, pc}
 8011486:	bf00      	nop
 8011488:	0801e0d0 	.word	0x0801e0d0
 801148c:	0801e254 	.word	0x0801e254
 8011490:	0801e150 	.word	0x0801e150
 8011494:	0801e280 	.word	0x0801e280
 8011498:	0801e298 	.word	0x0801e298
 801149c:	0801e2bc 	.word	0x0801e2bc

080114a0 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80114a0:	b480      	push	{r7}
 80114a2:	b085      	sub	sp, #20
 80114a4:	af00      	add	r7, sp, #0
 80114a6:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80114a8:	2300      	movs	r3, #0
 80114aa:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80114ac:	e005      	b.n	80114ba <pbuf_clen+0x1a>
    ++len;
 80114ae:	89fb      	ldrh	r3, [r7, #14]
 80114b0:	3301      	adds	r3, #1
 80114b2:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	681b      	ldr	r3, [r3, #0]
 80114b8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	2b00      	cmp	r3, #0
 80114be:	d1f6      	bne.n	80114ae <pbuf_clen+0xe>
  }
  return len;
 80114c0:	89fb      	ldrh	r3, [r7, #14]
}
 80114c2:	4618      	mov	r0, r3
 80114c4:	3714      	adds	r7, #20
 80114c6:	46bd      	mov	sp, r7
 80114c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114cc:	4770      	bx	lr
	...

080114d0 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80114d0:	b580      	push	{r7, lr}
 80114d2:	b084      	sub	sp, #16
 80114d4:	af00      	add	r7, sp, #0
 80114d6:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	2b00      	cmp	r3, #0
 80114dc:	d016      	beq.n	801150c <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80114de:	f000 fae3 	bl	8011aa8 <sys_arch_protect>
 80114e2:	60f8      	str	r0, [r7, #12]
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	7b9b      	ldrb	r3, [r3, #14]
 80114e8:	3301      	adds	r3, #1
 80114ea:	b2da      	uxtb	r2, r3
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	739a      	strb	r2, [r3, #14]
 80114f0:	68f8      	ldr	r0, [r7, #12]
 80114f2:	f000 fae7 	bl	8011ac4 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	7b9b      	ldrb	r3, [r3, #14]
 80114fa:	2b00      	cmp	r3, #0
 80114fc:	d106      	bne.n	801150c <pbuf_ref+0x3c>
 80114fe:	4b05      	ldr	r3, [pc, #20]	; (8011514 <pbuf_ref+0x44>)
 8011500:	f240 3242 	movw	r2, #834	; 0x342
 8011504:	4904      	ldr	r1, [pc, #16]	; (8011518 <pbuf_ref+0x48>)
 8011506:	4805      	ldr	r0, [pc, #20]	; (801151c <pbuf_ref+0x4c>)
 8011508:	f009 fdfa 	bl	801b100 <iprintf>
  }
}
 801150c:	bf00      	nop
 801150e:	3710      	adds	r7, #16
 8011510:	46bd      	mov	sp, r7
 8011512:	bd80      	pop	{r7, pc}
 8011514:	0801e0d0 	.word	0x0801e0d0
 8011518:	0801e2d0 	.word	0x0801e2d0
 801151c:	0801e150 	.word	0x0801e150

08011520 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8011520:	b580      	push	{r7, lr}
 8011522:	b084      	sub	sp, #16
 8011524:	af00      	add	r7, sp, #0
 8011526:	6078      	str	r0, [r7, #4]
 8011528:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	2b00      	cmp	r3, #0
 801152e:	d002      	beq.n	8011536 <pbuf_cat+0x16>
 8011530:	683b      	ldr	r3, [r7, #0]
 8011532:	2b00      	cmp	r3, #0
 8011534:	d107      	bne.n	8011546 <pbuf_cat+0x26>
 8011536:	4b20      	ldr	r3, [pc, #128]	; (80115b8 <pbuf_cat+0x98>)
 8011538:	f240 325a 	movw	r2, #858	; 0x35a
 801153c:	491f      	ldr	r1, [pc, #124]	; (80115bc <pbuf_cat+0x9c>)
 801153e:	4820      	ldr	r0, [pc, #128]	; (80115c0 <pbuf_cat+0xa0>)
 8011540:	f009 fdde 	bl	801b100 <iprintf>
 8011544:	e034      	b.n	80115b0 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	60fb      	str	r3, [r7, #12]
 801154a:	e00a      	b.n	8011562 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801154c:	68fb      	ldr	r3, [r7, #12]
 801154e:	891a      	ldrh	r2, [r3, #8]
 8011550:	683b      	ldr	r3, [r7, #0]
 8011552:	891b      	ldrh	r3, [r3, #8]
 8011554:	4413      	add	r3, r2
 8011556:	b29a      	uxth	r2, r3
 8011558:	68fb      	ldr	r3, [r7, #12]
 801155a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 801155c:	68fb      	ldr	r3, [r7, #12]
 801155e:	681b      	ldr	r3, [r3, #0]
 8011560:	60fb      	str	r3, [r7, #12]
 8011562:	68fb      	ldr	r3, [r7, #12]
 8011564:	681b      	ldr	r3, [r3, #0]
 8011566:	2b00      	cmp	r3, #0
 8011568:	d1f0      	bne.n	801154c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 801156a:	68fb      	ldr	r3, [r7, #12]
 801156c:	891a      	ldrh	r2, [r3, #8]
 801156e:	68fb      	ldr	r3, [r7, #12]
 8011570:	895b      	ldrh	r3, [r3, #10]
 8011572:	429a      	cmp	r2, r3
 8011574:	d006      	beq.n	8011584 <pbuf_cat+0x64>
 8011576:	4b10      	ldr	r3, [pc, #64]	; (80115b8 <pbuf_cat+0x98>)
 8011578:	f240 3262 	movw	r2, #866	; 0x362
 801157c:	4911      	ldr	r1, [pc, #68]	; (80115c4 <pbuf_cat+0xa4>)
 801157e:	4810      	ldr	r0, [pc, #64]	; (80115c0 <pbuf_cat+0xa0>)
 8011580:	f009 fdbe 	bl	801b100 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8011584:	68fb      	ldr	r3, [r7, #12]
 8011586:	681b      	ldr	r3, [r3, #0]
 8011588:	2b00      	cmp	r3, #0
 801158a:	d006      	beq.n	801159a <pbuf_cat+0x7a>
 801158c:	4b0a      	ldr	r3, [pc, #40]	; (80115b8 <pbuf_cat+0x98>)
 801158e:	f240 3263 	movw	r2, #867	; 0x363
 8011592:	490d      	ldr	r1, [pc, #52]	; (80115c8 <pbuf_cat+0xa8>)
 8011594:	480a      	ldr	r0, [pc, #40]	; (80115c0 <pbuf_cat+0xa0>)
 8011596:	f009 fdb3 	bl	801b100 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801159a:	68fb      	ldr	r3, [r7, #12]
 801159c:	891a      	ldrh	r2, [r3, #8]
 801159e:	683b      	ldr	r3, [r7, #0]
 80115a0:	891b      	ldrh	r3, [r3, #8]
 80115a2:	4413      	add	r3, r2
 80115a4:	b29a      	uxth	r2, r3
 80115a6:	68fb      	ldr	r3, [r7, #12]
 80115a8:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80115aa:	68fb      	ldr	r3, [r7, #12]
 80115ac:	683a      	ldr	r2, [r7, #0]
 80115ae:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80115b0:	3710      	adds	r7, #16
 80115b2:	46bd      	mov	sp, r7
 80115b4:	bd80      	pop	{r7, pc}
 80115b6:	bf00      	nop
 80115b8:	0801e0d0 	.word	0x0801e0d0
 80115bc:	0801e2e4 	.word	0x0801e2e4
 80115c0:	0801e150 	.word	0x0801e150
 80115c4:	0801e31c 	.word	0x0801e31c
 80115c8:	0801e34c 	.word	0x0801e34c

080115cc <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80115cc:	b580      	push	{r7, lr}
 80115ce:	b086      	sub	sp, #24
 80115d0:	af00      	add	r7, sp, #0
 80115d2:	6078      	str	r0, [r7, #4]
 80115d4:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80115d6:	2300      	movs	r3, #0
 80115d8:	617b      	str	r3, [r7, #20]
 80115da:	2300      	movs	r3, #0
 80115dc:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	d008      	beq.n	80115f6 <pbuf_copy+0x2a>
 80115e4:	683b      	ldr	r3, [r7, #0]
 80115e6:	2b00      	cmp	r3, #0
 80115e8:	d005      	beq.n	80115f6 <pbuf_copy+0x2a>
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	891a      	ldrh	r2, [r3, #8]
 80115ee:	683b      	ldr	r3, [r7, #0]
 80115f0:	891b      	ldrh	r3, [r3, #8]
 80115f2:	429a      	cmp	r2, r3
 80115f4:	d209      	bcs.n	801160a <pbuf_copy+0x3e>
 80115f6:	4b57      	ldr	r3, [pc, #348]	; (8011754 <pbuf_copy+0x188>)
 80115f8:	f240 32ca 	movw	r2, #970	; 0x3ca
 80115fc:	4956      	ldr	r1, [pc, #344]	; (8011758 <pbuf_copy+0x18c>)
 80115fe:	4857      	ldr	r0, [pc, #348]	; (801175c <pbuf_copy+0x190>)
 8011600:	f009 fd7e 	bl	801b100 <iprintf>
 8011604:	f06f 030f 	mvn.w	r3, #15
 8011608:	e09f      	b.n	801174a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	895b      	ldrh	r3, [r3, #10]
 801160e:	461a      	mov	r2, r3
 8011610:	697b      	ldr	r3, [r7, #20]
 8011612:	1ad2      	subs	r2, r2, r3
 8011614:	683b      	ldr	r3, [r7, #0]
 8011616:	895b      	ldrh	r3, [r3, #10]
 8011618:	4619      	mov	r1, r3
 801161a:	693b      	ldr	r3, [r7, #16]
 801161c:	1acb      	subs	r3, r1, r3
 801161e:	429a      	cmp	r2, r3
 8011620:	d306      	bcc.n	8011630 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8011622:	683b      	ldr	r3, [r7, #0]
 8011624:	895b      	ldrh	r3, [r3, #10]
 8011626:	461a      	mov	r2, r3
 8011628:	693b      	ldr	r3, [r7, #16]
 801162a:	1ad3      	subs	r3, r2, r3
 801162c:	60fb      	str	r3, [r7, #12]
 801162e:	e005      	b.n	801163c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	895b      	ldrh	r3, [r3, #10]
 8011634:	461a      	mov	r2, r3
 8011636:	697b      	ldr	r3, [r7, #20]
 8011638:	1ad3      	subs	r3, r2, r3
 801163a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	685a      	ldr	r2, [r3, #4]
 8011640:	697b      	ldr	r3, [r7, #20]
 8011642:	18d0      	adds	r0, r2, r3
 8011644:	683b      	ldr	r3, [r7, #0]
 8011646:	685a      	ldr	r2, [r3, #4]
 8011648:	693b      	ldr	r3, [r7, #16]
 801164a:	4413      	add	r3, r2
 801164c:	68fa      	ldr	r2, [r7, #12]
 801164e:	4619      	mov	r1, r3
 8011650:	f009 f8f1 	bl	801a836 <memcpy>
    offset_to += len;
 8011654:	697a      	ldr	r2, [r7, #20]
 8011656:	68fb      	ldr	r3, [r7, #12]
 8011658:	4413      	add	r3, r2
 801165a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 801165c:	693a      	ldr	r2, [r7, #16]
 801165e:	68fb      	ldr	r3, [r7, #12]
 8011660:	4413      	add	r3, r2
 8011662:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	895b      	ldrh	r3, [r3, #10]
 8011668:	461a      	mov	r2, r3
 801166a:	697b      	ldr	r3, [r7, #20]
 801166c:	4293      	cmp	r3, r2
 801166e:	d906      	bls.n	801167e <pbuf_copy+0xb2>
 8011670:	4b38      	ldr	r3, [pc, #224]	; (8011754 <pbuf_copy+0x188>)
 8011672:	f240 32d9 	movw	r2, #985	; 0x3d9
 8011676:	493a      	ldr	r1, [pc, #232]	; (8011760 <pbuf_copy+0x194>)
 8011678:	4838      	ldr	r0, [pc, #224]	; (801175c <pbuf_copy+0x190>)
 801167a:	f009 fd41 	bl	801b100 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 801167e:	683b      	ldr	r3, [r7, #0]
 8011680:	895b      	ldrh	r3, [r3, #10]
 8011682:	461a      	mov	r2, r3
 8011684:	693b      	ldr	r3, [r7, #16]
 8011686:	4293      	cmp	r3, r2
 8011688:	d906      	bls.n	8011698 <pbuf_copy+0xcc>
 801168a:	4b32      	ldr	r3, [pc, #200]	; (8011754 <pbuf_copy+0x188>)
 801168c:	f240 32da 	movw	r2, #986	; 0x3da
 8011690:	4934      	ldr	r1, [pc, #208]	; (8011764 <pbuf_copy+0x198>)
 8011692:	4832      	ldr	r0, [pc, #200]	; (801175c <pbuf_copy+0x190>)
 8011694:	f009 fd34 	bl	801b100 <iprintf>
    if (offset_from >= p_from->len) {
 8011698:	683b      	ldr	r3, [r7, #0]
 801169a:	895b      	ldrh	r3, [r3, #10]
 801169c:	461a      	mov	r2, r3
 801169e:	693b      	ldr	r3, [r7, #16]
 80116a0:	4293      	cmp	r3, r2
 80116a2:	d304      	bcc.n	80116ae <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80116a4:	2300      	movs	r3, #0
 80116a6:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80116a8:	683b      	ldr	r3, [r7, #0]
 80116aa:	681b      	ldr	r3, [r3, #0]
 80116ac:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	895b      	ldrh	r3, [r3, #10]
 80116b2:	461a      	mov	r2, r3
 80116b4:	697b      	ldr	r3, [r7, #20]
 80116b6:	4293      	cmp	r3, r2
 80116b8:	d114      	bne.n	80116e4 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80116ba:	2300      	movs	r3, #0
 80116bc:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	681b      	ldr	r3, [r3, #0]
 80116c2:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d10c      	bne.n	80116e4 <pbuf_copy+0x118>
 80116ca:	683b      	ldr	r3, [r7, #0]
 80116cc:	2b00      	cmp	r3, #0
 80116ce:	d009      	beq.n	80116e4 <pbuf_copy+0x118>
 80116d0:	4b20      	ldr	r3, [pc, #128]	; (8011754 <pbuf_copy+0x188>)
 80116d2:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 80116d6:	4924      	ldr	r1, [pc, #144]	; (8011768 <pbuf_copy+0x19c>)
 80116d8:	4820      	ldr	r0, [pc, #128]	; (801175c <pbuf_copy+0x190>)
 80116da:	f009 fd11 	bl	801b100 <iprintf>
 80116de:	f06f 030f 	mvn.w	r3, #15
 80116e2:	e032      	b.n	801174a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80116e4:	683b      	ldr	r3, [r7, #0]
 80116e6:	2b00      	cmp	r3, #0
 80116e8:	d013      	beq.n	8011712 <pbuf_copy+0x146>
 80116ea:	683b      	ldr	r3, [r7, #0]
 80116ec:	895a      	ldrh	r2, [r3, #10]
 80116ee:	683b      	ldr	r3, [r7, #0]
 80116f0:	891b      	ldrh	r3, [r3, #8]
 80116f2:	429a      	cmp	r2, r3
 80116f4:	d10d      	bne.n	8011712 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80116f6:	683b      	ldr	r3, [r7, #0]
 80116f8:	681b      	ldr	r3, [r3, #0]
 80116fa:	2b00      	cmp	r3, #0
 80116fc:	d009      	beq.n	8011712 <pbuf_copy+0x146>
 80116fe:	4b15      	ldr	r3, [pc, #84]	; (8011754 <pbuf_copy+0x188>)
 8011700:	f240 32ea 	movw	r2, #1002	; 0x3ea
 8011704:	4919      	ldr	r1, [pc, #100]	; (801176c <pbuf_copy+0x1a0>)
 8011706:	4815      	ldr	r0, [pc, #84]	; (801175c <pbuf_copy+0x190>)
 8011708:	f009 fcfa 	bl	801b100 <iprintf>
 801170c:	f06f 0305 	mvn.w	r3, #5
 8011710:	e01b      	b.n	801174a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	2b00      	cmp	r3, #0
 8011716:	d013      	beq.n	8011740 <pbuf_copy+0x174>
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	895a      	ldrh	r2, [r3, #10]
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	891b      	ldrh	r3, [r3, #8]
 8011720:	429a      	cmp	r2, r3
 8011722:	d10d      	bne.n	8011740 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	681b      	ldr	r3, [r3, #0]
 8011728:	2b00      	cmp	r3, #0
 801172a:	d009      	beq.n	8011740 <pbuf_copy+0x174>
 801172c:	4b09      	ldr	r3, [pc, #36]	; (8011754 <pbuf_copy+0x188>)
 801172e:	f240 32ef 	movw	r2, #1007	; 0x3ef
 8011732:	490e      	ldr	r1, [pc, #56]	; (801176c <pbuf_copy+0x1a0>)
 8011734:	4809      	ldr	r0, [pc, #36]	; (801175c <pbuf_copy+0x190>)
 8011736:	f009 fce3 	bl	801b100 <iprintf>
 801173a:	f06f 0305 	mvn.w	r3, #5
 801173e:	e004      	b.n	801174a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8011740:	683b      	ldr	r3, [r7, #0]
 8011742:	2b00      	cmp	r3, #0
 8011744:	f47f af61 	bne.w	801160a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8011748:	2300      	movs	r3, #0
}
 801174a:	4618      	mov	r0, r3
 801174c:	3718      	adds	r7, #24
 801174e:	46bd      	mov	sp, r7
 8011750:	bd80      	pop	{r7, pc}
 8011752:	bf00      	nop
 8011754:	0801e0d0 	.word	0x0801e0d0
 8011758:	0801e398 	.word	0x0801e398
 801175c:	0801e150 	.word	0x0801e150
 8011760:	0801e3c8 	.word	0x0801e3c8
 8011764:	0801e3e0 	.word	0x0801e3e0
 8011768:	0801e3fc 	.word	0x0801e3fc
 801176c:	0801e40c 	.word	0x0801e40c

08011770 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8011770:	b580      	push	{r7, lr}
 8011772:	b088      	sub	sp, #32
 8011774:	af00      	add	r7, sp, #0
 8011776:	60f8      	str	r0, [r7, #12]
 8011778:	60b9      	str	r1, [r7, #8]
 801177a:	4611      	mov	r1, r2
 801177c:	461a      	mov	r2, r3
 801177e:	460b      	mov	r3, r1
 8011780:	80fb      	strh	r3, [r7, #6]
 8011782:	4613      	mov	r3, r2
 8011784:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8011786:	2300      	movs	r3, #0
 8011788:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 801178a:	2300      	movs	r3, #0
 801178c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 801178e:	68fb      	ldr	r3, [r7, #12]
 8011790:	2b00      	cmp	r3, #0
 8011792:	d108      	bne.n	80117a6 <pbuf_copy_partial+0x36>
 8011794:	4b2b      	ldr	r3, [pc, #172]	; (8011844 <pbuf_copy_partial+0xd4>)
 8011796:	f240 420a 	movw	r2, #1034	; 0x40a
 801179a:	492b      	ldr	r1, [pc, #172]	; (8011848 <pbuf_copy_partial+0xd8>)
 801179c:	482b      	ldr	r0, [pc, #172]	; (801184c <pbuf_copy_partial+0xdc>)
 801179e:	f009 fcaf 	bl	801b100 <iprintf>
 80117a2:	2300      	movs	r3, #0
 80117a4:	e04a      	b.n	801183c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80117a6:	68bb      	ldr	r3, [r7, #8]
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	d108      	bne.n	80117be <pbuf_copy_partial+0x4e>
 80117ac:	4b25      	ldr	r3, [pc, #148]	; (8011844 <pbuf_copy_partial+0xd4>)
 80117ae:	f240 420b 	movw	r2, #1035	; 0x40b
 80117b2:	4927      	ldr	r1, [pc, #156]	; (8011850 <pbuf_copy_partial+0xe0>)
 80117b4:	4825      	ldr	r0, [pc, #148]	; (801184c <pbuf_copy_partial+0xdc>)
 80117b6:	f009 fca3 	bl	801b100 <iprintf>
 80117ba:	2300      	movs	r3, #0
 80117bc:	e03e      	b.n	801183c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80117be:	68fb      	ldr	r3, [r7, #12]
 80117c0:	61fb      	str	r3, [r7, #28]
 80117c2:	e034      	b.n	801182e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80117c4:	88bb      	ldrh	r3, [r7, #4]
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	d00a      	beq.n	80117e0 <pbuf_copy_partial+0x70>
 80117ca:	69fb      	ldr	r3, [r7, #28]
 80117cc:	895b      	ldrh	r3, [r3, #10]
 80117ce:	88ba      	ldrh	r2, [r7, #4]
 80117d0:	429a      	cmp	r2, r3
 80117d2:	d305      	bcc.n	80117e0 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80117d4:	69fb      	ldr	r3, [r7, #28]
 80117d6:	895b      	ldrh	r3, [r3, #10]
 80117d8:	88ba      	ldrh	r2, [r7, #4]
 80117da:	1ad3      	subs	r3, r2, r3
 80117dc:	80bb      	strh	r3, [r7, #4]
 80117de:	e023      	b.n	8011828 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80117e0:	69fb      	ldr	r3, [r7, #28]
 80117e2:	895a      	ldrh	r2, [r3, #10]
 80117e4:	88bb      	ldrh	r3, [r7, #4]
 80117e6:	1ad3      	subs	r3, r2, r3
 80117e8:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80117ea:	8b3a      	ldrh	r2, [r7, #24]
 80117ec:	88fb      	ldrh	r3, [r7, #6]
 80117ee:	429a      	cmp	r2, r3
 80117f0:	d901      	bls.n	80117f6 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80117f2:	88fb      	ldrh	r3, [r7, #6]
 80117f4:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80117f6:	8b7b      	ldrh	r3, [r7, #26]
 80117f8:	68ba      	ldr	r2, [r7, #8]
 80117fa:	18d0      	adds	r0, r2, r3
 80117fc:	69fb      	ldr	r3, [r7, #28]
 80117fe:	685a      	ldr	r2, [r3, #4]
 8011800:	88bb      	ldrh	r3, [r7, #4]
 8011802:	4413      	add	r3, r2
 8011804:	8b3a      	ldrh	r2, [r7, #24]
 8011806:	4619      	mov	r1, r3
 8011808:	f009 f815 	bl	801a836 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 801180c:	8afa      	ldrh	r2, [r7, #22]
 801180e:	8b3b      	ldrh	r3, [r7, #24]
 8011810:	4413      	add	r3, r2
 8011812:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8011814:	8b7a      	ldrh	r2, [r7, #26]
 8011816:	8b3b      	ldrh	r3, [r7, #24]
 8011818:	4413      	add	r3, r2
 801181a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 801181c:	88fa      	ldrh	r2, [r7, #6]
 801181e:	8b3b      	ldrh	r3, [r7, #24]
 8011820:	1ad3      	subs	r3, r2, r3
 8011822:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8011824:	2300      	movs	r3, #0
 8011826:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8011828:	69fb      	ldr	r3, [r7, #28]
 801182a:	681b      	ldr	r3, [r3, #0]
 801182c:	61fb      	str	r3, [r7, #28]
 801182e:	88fb      	ldrh	r3, [r7, #6]
 8011830:	2b00      	cmp	r3, #0
 8011832:	d002      	beq.n	801183a <pbuf_copy_partial+0xca>
 8011834:	69fb      	ldr	r3, [r7, #28]
 8011836:	2b00      	cmp	r3, #0
 8011838:	d1c4      	bne.n	80117c4 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 801183a:	8afb      	ldrh	r3, [r7, #22]
}
 801183c:	4618      	mov	r0, r3
 801183e:	3720      	adds	r7, #32
 8011840:	46bd      	mov	sp, r7
 8011842:	bd80      	pop	{r7, pc}
 8011844:	0801e0d0 	.word	0x0801e0d0
 8011848:	0801e438 	.word	0x0801e438
 801184c:	0801e150 	.word	0x0801e150
 8011850:	0801e458 	.word	0x0801e458

08011854 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8011854:	b580      	push	{r7, lr}
 8011856:	b084      	sub	sp, #16
 8011858:	af00      	add	r7, sp, #0
 801185a:	4603      	mov	r3, r0
 801185c:	603a      	str	r2, [r7, #0]
 801185e:	71fb      	strb	r3, [r7, #7]
 8011860:	460b      	mov	r3, r1
 8011862:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8011864:	683b      	ldr	r3, [r7, #0]
 8011866:	8919      	ldrh	r1, [r3, #8]
 8011868:	88ba      	ldrh	r2, [r7, #4]
 801186a:	79fb      	ldrb	r3, [r7, #7]
 801186c:	4618      	mov	r0, r3
 801186e:	f7ff faa9 	bl	8010dc4 <pbuf_alloc>
 8011872:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8011874:	68fb      	ldr	r3, [r7, #12]
 8011876:	2b00      	cmp	r3, #0
 8011878:	d101      	bne.n	801187e <pbuf_clone+0x2a>
    return NULL;
 801187a:	2300      	movs	r3, #0
 801187c:	e011      	b.n	80118a2 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 801187e:	6839      	ldr	r1, [r7, #0]
 8011880:	68f8      	ldr	r0, [r7, #12]
 8011882:	f7ff fea3 	bl	80115cc <pbuf_copy>
 8011886:	4603      	mov	r3, r0
 8011888:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 801188a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801188e:	2b00      	cmp	r3, #0
 8011890:	d006      	beq.n	80118a0 <pbuf_clone+0x4c>
 8011892:	4b06      	ldr	r3, [pc, #24]	; (80118ac <pbuf_clone+0x58>)
 8011894:	f240 5224 	movw	r2, #1316	; 0x524
 8011898:	4905      	ldr	r1, [pc, #20]	; (80118b0 <pbuf_clone+0x5c>)
 801189a:	4806      	ldr	r0, [pc, #24]	; (80118b4 <pbuf_clone+0x60>)
 801189c:	f009 fc30 	bl	801b100 <iprintf>
  return q;
 80118a0:	68fb      	ldr	r3, [r7, #12]
}
 80118a2:	4618      	mov	r0, r3
 80118a4:	3710      	adds	r7, #16
 80118a6:	46bd      	mov	sp, r7
 80118a8:	bd80      	pop	{r7, pc}
 80118aa:	bf00      	nop
 80118ac:	0801e0d0 	.word	0x0801e0d0
 80118b0:	0801e564 	.word	0x0801e564
 80118b4:	0801e150 	.word	0x0801e150

080118b8 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 80118b8:	b580      	push	{r7, lr}
 80118ba:	b086      	sub	sp, #24
 80118bc:	af00      	add	r7, sp, #0
 80118be:	6078      	str	r0, [r7, #4]
 80118c0:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 80118c2:	683b      	ldr	r3, [r7, #0]
 80118c4:	60bb      	str	r3, [r7, #8]
 80118c6:	2304      	movs	r3, #4
 80118c8:	60fb      	str	r3, [r7, #12]
 80118ca:	2300      	movs	r3, #0
 80118cc:	613b      	str	r3, [r7, #16]
 80118ce:	2300      	movs	r3, #0
 80118d0:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 80118d2:	f107 0308 	add.w	r3, r7, #8
 80118d6:	2100      	movs	r1, #0
 80118d8:	4618      	mov	r0, r3
 80118da:	f7f9 f8e1 	bl	800aaa0 <osMessageCreate>
 80118de:	4602      	mov	r2, r0
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	681b      	ldr	r3, [r3, #0]
 80118e8:	2b00      	cmp	r3, #0
 80118ea:	d102      	bne.n	80118f2 <sys_mbox_new+0x3a>
    return ERR_MEM;
 80118ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80118f0:	e000      	b.n	80118f4 <sys_mbox_new+0x3c>

  return ERR_OK;
 80118f2:	2300      	movs	r3, #0
}
 80118f4:	4618      	mov	r0, r3
 80118f6:	3718      	adds	r7, #24
 80118f8:	46bd      	mov	sp, r7
 80118fa:	bd80      	pop	{r7, pc}

080118fc <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 80118fc:	b580      	push	{r7, lr}
 80118fe:	b084      	sub	sp, #16
 8011900:	af00      	add	r7, sp, #0
 8011902:	6078      	str	r0, [r7, #4]
 8011904:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	681b      	ldr	r3, [r3, #0]
 801190a:	6839      	ldr	r1, [r7, #0]
 801190c:	2200      	movs	r2, #0
 801190e:	4618      	mov	r0, r3
 8011910:	f7f9 f8f0 	bl	800aaf4 <osMessagePut>
 8011914:	4603      	mov	r3, r0
 8011916:	2b00      	cmp	r3, #0
 8011918:	d102      	bne.n	8011920 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 801191a:	2300      	movs	r3, #0
 801191c:	73fb      	strb	r3, [r7, #15]
 801191e:	e001      	b.n	8011924 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8011920:	23ff      	movs	r3, #255	; 0xff
 8011922:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8011924:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011928:	4618      	mov	r0, r3
 801192a:	3710      	adds	r7, #16
 801192c:	46bd      	mov	sp, r7
 801192e:	bd80      	pop	{r7, pc}

08011930 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8011930:	b580      	push	{r7, lr}
 8011932:	b08c      	sub	sp, #48	; 0x30
 8011934:	af00      	add	r7, sp, #0
 8011936:	61f8      	str	r0, [r7, #28]
 8011938:	61b9      	str	r1, [r7, #24]
 801193a:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 801193c:	f7f8 feeb 	bl	800a716 <osKernelSysTick>
 8011940:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8011942:	697b      	ldr	r3, [r7, #20]
 8011944:	2b00      	cmp	r3, #0
 8011946:	d017      	beq.n	8011978 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8011948:	69fb      	ldr	r3, [r7, #28]
 801194a:	6819      	ldr	r1, [r3, #0]
 801194c:	f107 0320 	add.w	r3, r7, #32
 8011950:	697a      	ldr	r2, [r7, #20]
 8011952:	4618      	mov	r0, r3
 8011954:	f7f9 f90e 	bl	800ab74 <osMessageGet>

    if(event.status == osEventMessage)
 8011958:	6a3b      	ldr	r3, [r7, #32]
 801195a:	2b10      	cmp	r3, #16
 801195c:	d109      	bne.n	8011972 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801195e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011960:	461a      	mov	r2, r3
 8011962:	69bb      	ldr	r3, [r7, #24]
 8011964:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8011966:	f7f8 fed6 	bl	800a716 <osKernelSysTick>
 801196a:	4602      	mov	r2, r0
 801196c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801196e:	1ad3      	subs	r3, r2, r3
 8011970:	e019      	b.n	80119a6 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8011972:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011976:	e016      	b.n	80119a6 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8011978:	69fb      	ldr	r3, [r7, #28]
 801197a:	6819      	ldr	r1, [r3, #0]
 801197c:	463b      	mov	r3, r7
 801197e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011982:	4618      	mov	r0, r3
 8011984:	f7f9 f8f6 	bl	800ab74 <osMessageGet>
 8011988:	f107 0320 	add.w	r3, r7, #32
 801198c:	463a      	mov	r2, r7
 801198e:	ca07      	ldmia	r2, {r0, r1, r2}
 8011990:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8011994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011996:	461a      	mov	r2, r3
 8011998:	69bb      	ldr	r3, [r7, #24]
 801199a:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 801199c:	f7f8 febb 	bl	800a716 <osKernelSysTick>
 80119a0:	4602      	mov	r2, r0
 80119a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119a4:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 80119a6:	4618      	mov	r0, r3
 80119a8:	3730      	adds	r7, #48	; 0x30
 80119aa:	46bd      	mov	sp, r7
 80119ac:	bd80      	pop	{r7, pc}

080119ae <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 80119ae:	b480      	push	{r7}
 80119b0:	b083      	sub	sp, #12
 80119b2:	af00      	add	r7, sp, #0
 80119b4:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	681b      	ldr	r3, [r3, #0]
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	d101      	bne.n	80119c2 <sys_mbox_valid+0x14>
    return 0;
 80119be:	2300      	movs	r3, #0
 80119c0:	e000      	b.n	80119c4 <sys_mbox_valid+0x16>
  else
    return 1;
 80119c2:	2301      	movs	r3, #1
}
 80119c4:	4618      	mov	r0, r3
 80119c6:	370c      	adds	r7, #12
 80119c8:	46bd      	mov	sp, r7
 80119ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119ce:	4770      	bx	lr

080119d0 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 80119d0:	b580      	push	{r7, lr}
 80119d2:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 80119d4:	4803      	ldr	r0, [pc, #12]	; (80119e4 <sys_init+0x14>)
 80119d6:	f7f8 ff0e 	bl	800a7f6 <osMutexCreate>
 80119da:	4602      	mov	r2, r0
 80119dc:	4b02      	ldr	r3, [pc, #8]	; (80119e8 <sys_init+0x18>)
 80119de:	601a      	str	r2, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 80119e0:	bf00      	nop
 80119e2:	bd80      	pop	{r7, pc}
 80119e4:	080201ec 	.word	0x080201ec
 80119e8:	2400ce60 	.word	0x2400ce60

080119ec <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 80119ec:	b580      	push	{r7, lr}
 80119ee:	b084      	sub	sp, #16
 80119f0:	af00      	add	r7, sp, #0
 80119f2:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 80119f4:	2300      	movs	r3, #0
 80119f6:	60bb      	str	r3, [r7, #8]
 80119f8:	2300      	movs	r3, #0
 80119fa:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 80119fc:	f107 0308 	add.w	r3, r7, #8
 8011a00:	4618      	mov	r0, r3
 8011a02:	f7f8 fef8 	bl	800a7f6 <osMutexCreate>
 8011a06:	4602      	mov	r2, r0
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	681b      	ldr	r3, [r3, #0]
 8011a10:	2b00      	cmp	r3, #0
 8011a12:	d102      	bne.n	8011a1a <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8011a14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011a18:	e000      	b.n	8011a1c <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8011a1a:	2300      	movs	r3, #0
}
 8011a1c:	4618      	mov	r0, r3
 8011a1e:	3710      	adds	r7, #16
 8011a20:	46bd      	mov	sp, r7
 8011a22:	bd80      	pop	{r7, pc}

08011a24 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8011a24:	b580      	push	{r7, lr}
 8011a26:	b082      	sub	sp, #8
 8011a28:	af00      	add	r7, sp, #0
 8011a2a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	681b      	ldr	r3, [r3, #0]
 8011a30:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8011a34:	4618      	mov	r0, r3
 8011a36:	f7f8 fef7 	bl	800a828 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8011a3a:	bf00      	nop
 8011a3c:	3708      	adds	r7, #8
 8011a3e:	46bd      	mov	sp, r7
 8011a40:	bd80      	pop	{r7, pc}

08011a42 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8011a42:	b580      	push	{r7, lr}
 8011a44:	b082      	sub	sp, #8
 8011a46:	af00      	add	r7, sp, #0
 8011a48:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	681b      	ldr	r3, [r3, #0]
 8011a4e:	4618      	mov	r0, r3
 8011a50:	f7f8 ff38 	bl	800a8c4 <osMutexRelease>
}
 8011a54:	bf00      	nop
 8011a56:	3708      	adds	r7, #8
 8011a58:	46bd      	mov	sp, r7
 8011a5a:	bd80      	pop	{r7, pc}

08011a5c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8011a5c:	b580      	push	{r7, lr}
 8011a5e:	b08c      	sub	sp, #48	; 0x30
 8011a60:	af00      	add	r7, sp, #0
 8011a62:	60f8      	str	r0, [r7, #12]
 8011a64:	60b9      	str	r1, [r7, #8]
 8011a66:	607a      	str	r2, [r7, #4]
 8011a68:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8011a6a:	f107 0314 	add.w	r3, r7, #20
 8011a6e:	2200      	movs	r2, #0
 8011a70:	601a      	str	r2, [r3, #0]
 8011a72:	605a      	str	r2, [r3, #4]
 8011a74:	609a      	str	r2, [r3, #8]
 8011a76:	60da      	str	r2, [r3, #12]
 8011a78:	611a      	str	r2, [r3, #16]
 8011a7a:	615a      	str	r2, [r3, #20]
 8011a7c:	619a      	str	r2, [r3, #24]
 8011a7e:	68fb      	ldr	r3, [r7, #12]
 8011a80:	617b      	str	r3, [r7, #20]
 8011a82:	68bb      	ldr	r3, [r7, #8]
 8011a84:	61bb      	str	r3, [r7, #24]
 8011a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a88:	b21b      	sxth	r3, r3
 8011a8a:	83bb      	strh	r3, [r7, #28]
 8011a8c:	683b      	ldr	r3, [r7, #0]
 8011a8e:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8011a90:	f107 0314 	add.w	r3, r7, #20
 8011a94:	6879      	ldr	r1, [r7, #4]
 8011a96:	4618      	mov	r0, r3
 8011a98:	f7f8 fe4d 	bl	800a736 <osThreadCreate>
 8011a9c:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8011a9e:	4618      	mov	r0, r3
 8011aa0:	3730      	adds	r7, #48	; 0x30
 8011aa2:	46bd      	mov	sp, r7
 8011aa4:	bd80      	pop	{r7, pc}
	...

08011aa8 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8011aa8:	b580      	push	{r7, lr}
 8011aaa:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8011aac:	4b04      	ldr	r3, [pc, #16]	; (8011ac0 <sys_arch_protect+0x18>)
 8011aae:	681b      	ldr	r3, [r3, #0]
 8011ab0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8011ab4:	4618      	mov	r0, r3
 8011ab6:	f7f8 feb7 	bl	800a828 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8011aba:	2301      	movs	r3, #1
}
 8011abc:	4618      	mov	r0, r3
 8011abe:	bd80      	pop	{r7, pc}
 8011ac0:	2400ce60 	.word	0x2400ce60

08011ac4 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8011ac4:	b580      	push	{r7, lr}
 8011ac6:	b082      	sub	sp, #8
 8011ac8:	af00      	add	r7, sp, #0
 8011aca:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8011acc:	4b04      	ldr	r3, [pc, #16]	; (8011ae0 <sys_arch_unprotect+0x1c>)
 8011ace:	681b      	ldr	r3, [r3, #0]
 8011ad0:	4618      	mov	r0, r3
 8011ad2:	f7f8 fef7 	bl	800a8c4 <osMutexRelease>
}
 8011ad6:	bf00      	nop
 8011ad8:	3708      	adds	r7, #8
 8011ada:	46bd      	mov	sp, r7
 8011adc:	bd80      	pop	{r7, pc}
 8011ade:	bf00      	nop
 8011ae0:	2400ce60 	.word	0x2400ce60

08011ae4 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8011ae4:	b580      	push	{r7, lr}
 8011ae6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8011ae8:	f009 fb22 	bl	801b130 <rand>
 8011aec:	4603      	mov	r3, r0
 8011aee:	b29b      	uxth	r3, r3
 8011af0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8011af4:	b29b      	uxth	r3, r3
 8011af6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8011afa:	b29a      	uxth	r2, r3
 8011afc:	4b01      	ldr	r3, [pc, #4]	; (8011b04 <tcp_init+0x20>)
 8011afe:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8011b00:	bf00      	nop
 8011b02:	bd80      	pop	{r7, pc}
 8011b04:	24000028 	.word	0x24000028

08011b08 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8011b08:	b580      	push	{r7, lr}
 8011b0a:	b082      	sub	sp, #8
 8011b0c:	af00      	add	r7, sp, #0
 8011b0e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	7d1b      	ldrb	r3, [r3, #20]
 8011b14:	2b01      	cmp	r3, #1
 8011b16:	d105      	bne.n	8011b24 <tcp_free+0x1c>
 8011b18:	4b06      	ldr	r3, [pc, #24]	; (8011b34 <tcp_free+0x2c>)
 8011b1a:	22d4      	movs	r2, #212	; 0xd4
 8011b1c:	4906      	ldr	r1, [pc, #24]	; (8011b38 <tcp_free+0x30>)
 8011b1e:	4807      	ldr	r0, [pc, #28]	; (8011b3c <tcp_free+0x34>)
 8011b20:	f009 faee 	bl	801b100 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8011b24:	6879      	ldr	r1, [r7, #4]
 8011b26:	2001      	movs	r0, #1
 8011b28:	f7fe fd8c 	bl	8010644 <memp_free>
}
 8011b2c:	bf00      	nop
 8011b2e:	3708      	adds	r7, #8
 8011b30:	46bd      	mov	sp, r7
 8011b32:	bd80      	pop	{r7, pc}
 8011b34:	0801e5f0 	.word	0x0801e5f0
 8011b38:	0801e63c 	.word	0x0801e63c
 8011b3c:	0801e650 	.word	0x0801e650

08011b40 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8011b40:	b580      	push	{r7, lr}
 8011b42:	b082      	sub	sp, #8
 8011b44:	af00      	add	r7, sp, #0
 8011b46:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	7d1b      	ldrb	r3, [r3, #20]
 8011b4c:	2b01      	cmp	r3, #1
 8011b4e:	d105      	bne.n	8011b5c <tcp_free_listen+0x1c>
 8011b50:	4b06      	ldr	r3, [pc, #24]	; (8011b6c <tcp_free_listen+0x2c>)
 8011b52:	22df      	movs	r2, #223	; 0xdf
 8011b54:	4906      	ldr	r1, [pc, #24]	; (8011b70 <tcp_free_listen+0x30>)
 8011b56:	4807      	ldr	r0, [pc, #28]	; (8011b74 <tcp_free_listen+0x34>)
 8011b58:	f009 fad2 	bl	801b100 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8011b5c:	6879      	ldr	r1, [r7, #4]
 8011b5e:	2002      	movs	r0, #2
 8011b60:	f7fe fd70 	bl	8010644 <memp_free>
}
 8011b64:	bf00      	nop
 8011b66:	3708      	adds	r7, #8
 8011b68:	46bd      	mov	sp, r7
 8011b6a:	bd80      	pop	{r7, pc}
 8011b6c:	0801e5f0 	.word	0x0801e5f0
 8011b70:	0801e678 	.word	0x0801e678
 8011b74:	0801e650 	.word	0x0801e650

08011b78 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8011b78:	b580      	push	{r7, lr}
 8011b7a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8011b7c:	f000 fe98 	bl	80128b0 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8011b80:	4b07      	ldr	r3, [pc, #28]	; (8011ba0 <tcp_tmr+0x28>)
 8011b82:	781b      	ldrb	r3, [r3, #0]
 8011b84:	3301      	adds	r3, #1
 8011b86:	b2da      	uxtb	r2, r3
 8011b88:	4b05      	ldr	r3, [pc, #20]	; (8011ba0 <tcp_tmr+0x28>)
 8011b8a:	701a      	strb	r2, [r3, #0]
 8011b8c:	4b04      	ldr	r3, [pc, #16]	; (8011ba0 <tcp_tmr+0x28>)
 8011b8e:	781b      	ldrb	r3, [r3, #0]
 8011b90:	f003 0301 	and.w	r3, r3, #1
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	d001      	beq.n	8011b9c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8011b98:	f000 fb4c 	bl	8012234 <tcp_slowtmr>
  }
}
 8011b9c:	bf00      	nop
 8011b9e:	bd80      	pop	{r7, pc}
 8011ba0:	24004915 	.word	0x24004915

08011ba4 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8011ba4:	b580      	push	{r7, lr}
 8011ba6:	b084      	sub	sp, #16
 8011ba8:	af00      	add	r7, sp, #0
 8011baa:	6078      	str	r0, [r7, #4]
 8011bac:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8011bae:	683b      	ldr	r3, [r7, #0]
 8011bb0:	2b00      	cmp	r3, #0
 8011bb2:	d105      	bne.n	8011bc0 <tcp_remove_listener+0x1c>
 8011bb4:	4b0d      	ldr	r3, [pc, #52]	; (8011bec <tcp_remove_listener+0x48>)
 8011bb6:	22ff      	movs	r2, #255	; 0xff
 8011bb8:	490d      	ldr	r1, [pc, #52]	; (8011bf0 <tcp_remove_listener+0x4c>)
 8011bba:	480e      	ldr	r0, [pc, #56]	; (8011bf4 <tcp_remove_listener+0x50>)
 8011bbc:	f009 faa0 	bl	801b100 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	60fb      	str	r3, [r7, #12]
 8011bc4:	e00a      	b.n	8011bdc <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8011bc6:	68fb      	ldr	r3, [r7, #12]
 8011bc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011bca:	683a      	ldr	r2, [r7, #0]
 8011bcc:	429a      	cmp	r2, r3
 8011bce:	d102      	bne.n	8011bd6 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8011bd0:	68fb      	ldr	r3, [r7, #12]
 8011bd2:	2200      	movs	r2, #0
 8011bd4:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8011bd6:	68fb      	ldr	r3, [r7, #12]
 8011bd8:	68db      	ldr	r3, [r3, #12]
 8011bda:	60fb      	str	r3, [r7, #12]
 8011bdc:	68fb      	ldr	r3, [r7, #12]
 8011bde:	2b00      	cmp	r3, #0
 8011be0:	d1f1      	bne.n	8011bc6 <tcp_remove_listener+0x22>
    }
  }
}
 8011be2:	bf00      	nop
 8011be4:	3710      	adds	r7, #16
 8011be6:	46bd      	mov	sp, r7
 8011be8:	bd80      	pop	{r7, pc}
 8011bea:	bf00      	nop
 8011bec:	0801e5f0 	.word	0x0801e5f0
 8011bf0:	0801e694 	.word	0x0801e694
 8011bf4:	0801e650 	.word	0x0801e650

08011bf8 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8011bf8:	b580      	push	{r7, lr}
 8011bfa:	b084      	sub	sp, #16
 8011bfc:	af00      	add	r7, sp, #0
 8011bfe:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	d106      	bne.n	8011c14 <tcp_listen_closed+0x1c>
 8011c06:	4b14      	ldr	r3, [pc, #80]	; (8011c58 <tcp_listen_closed+0x60>)
 8011c08:	f240 1211 	movw	r2, #273	; 0x111
 8011c0c:	4913      	ldr	r1, [pc, #76]	; (8011c5c <tcp_listen_closed+0x64>)
 8011c0e:	4814      	ldr	r0, [pc, #80]	; (8011c60 <tcp_listen_closed+0x68>)
 8011c10:	f009 fa76 	bl	801b100 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	7d1b      	ldrb	r3, [r3, #20]
 8011c18:	2b01      	cmp	r3, #1
 8011c1a:	d006      	beq.n	8011c2a <tcp_listen_closed+0x32>
 8011c1c:	4b0e      	ldr	r3, [pc, #56]	; (8011c58 <tcp_listen_closed+0x60>)
 8011c1e:	f44f 7289 	mov.w	r2, #274	; 0x112
 8011c22:	4910      	ldr	r1, [pc, #64]	; (8011c64 <tcp_listen_closed+0x6c>)
 8011c24:	480e      	ldr	r0, [pc, #56]	; (8011c60 <tcp_listen_closed+0x68>)
 8011c26:	f009 fa6b 	bl	801b100 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8011c2a:	2301      	movs	r3, #1
 8011c2c:	60fb      	str	r3, [r7, #12]
 8011c2e:	e00b      	b.n	8011c48 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8011c30:	4a0d      	ldr	r2, [pc, #52]	; (8011c68 <tcp_listen_closed+0x70>)
 8011c32:	68fb      	ldr	r3, [r7, #12]
 8011c34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011c38:	681b      	ldr	r3, [r3, #0]
 8011c3a:	6879      	ldr	r1, [r7, #4]
 8011c3c:	4618      	mov	r0, r3
 8011c3e:	f7ff ffb1 	bl	8011ba4 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8011c42:	68fb      	ldr	r3, [r7, #12]
 8011c44:	3301      	adds	r3, #1
 8011c46:	60fb      	str	r3, [r7, #12]
 8011c48:	68fb      	ldr	r3, [r7, #12]
 8011c4a:	2b03      	cmp	r3, #3
 8011c4c:	d9f0      	bls.n	8011c30 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8011c4e:	bf00      	nop
 8011c50:	3710      	adds	r7, #16
 8011c52:	46bd      	mov	sp, r7
 8011c54:	bd80      	pop	{r7, pc}
 8011c56:	bf00      	nop
 8011c58:	0801e5f0 	.word	0x0801e5f0
 8011c5c:	0801e6bc 	.word	0x0801e6bc
 8011c60:	0801e650 	.word	0x0801e650
 8011c64:	0801e6c8 	.word	0x0801e6c8
 8011c68:	0802020c 	.word	0x0802020c

08011c6c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8011c6c:	b5b0      	push	{r4, r5, r7, lr}
 8011c6e:	b088      	sub	sp, #32
 8011c70:	af04      	add	r7, sp, #16
 8011c72:	6078      	str	r0, [r7, #4]
 8011c74:	460b      	mov	r3, r1
 8011c76:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	d106      	bne.n	8011c8c <tcp_close_shutdown+0x20>
 8011c7e:	4b61      	ldr	r3, [pc, #388]	; (8011e04 <tcp_close_shutdown+0x198>)
 8011c80:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8011c84:	4960      	ldr	r1, [pc, #384]	; (8011e08 <tcp_close_shutdown+0x19c>)
 8011c86:	4861      	ldr	r0, [pc, #388]	; (8011e0c <tcp_close_shutdown+0x1a0>)
 8011c88:	f009 fa3a 	bl	801b100 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8011c8c:	78fb      	ldrb	r3, [r7, #3]
 8011c8e:	2b00      	cmp	r3, #0
 8011c90:	d066      	beq.n	8011d60 <tcp_close_shutdown+0xf4>
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	7d1b      	ldrb	r3, [r3, #20]
 8011c96:	2b04      	cmp	r3, #4
 8011c98:	d003      	beq.n	8011ca2 <tcp_close_shutdown+0x36>
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	7d1b      	ldrb	r3, [r3, #20]
 8011c9e:	2b07      	cmp	r3, #7
 8011ca0:	d15e      	bne.n	8011d60 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011ca6:	2b00      	cmp	r3, #0
 8011ca8:	d104      	bne.n	8011cb4 <tcp_close_shutdown+0x48>
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011cae:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8011cb2:	d055      	beq.n	8011d60 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	8b5b      	ldrh	r3, [r3, #26]
 8011cb8:	f003 0310 	and.w	r3, r3, #16
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	d106      	bne.n	8011cce <tcp_close_shutdown+0x62>
 8011cc0:	4b50      	ldr	r3, [pc, #320]	; (8011e04 <tcp_close_shutdown+0x198>)
 8011cc2:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8011cc6:	4952      	ldr	r1, [pc, #328]	; (8011e10 <tcp_close_shutdown+0x1a4>)
 8011cc8:	4850      	ldr	r0, [pc, #320]	; (8011e0c <tcp_close_shutdown+0x1a0>)
 8011cca:	f009 fa19 	bl	801b100 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8011cd6:	687d      	ldr	r5, [r7, #4]
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	3304      	adds	r3, #4
 8011cdc:	687a      	ldr	r2, [r7, #4]
 8011cde:	8ad2      	ldrh	r2, [r2, #22]
 8011ce0:	6879      	ldr	r1, [r7, #4]
 8011ce2:	8b09      	ldrh	r1, [r1, #24]
 8011ce4:	9102      	str	r1, [sp, #8]
 8011ce6:	9201      	str	r2, [sp, #4]
 8011ce8:	9300      	str	r3, [sp, #0]
 8011cea:	462b      	mov	r3, r5
 8011cec:	4622      	mov	r2, r4
 8011cee:	4601      	mov	r1, r0
 8011cf0:	6878      	ldr	r0, [r7, #4]
 8011cf2:	f004 fe91 	bl	8016a18 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8011cf6:	6878      	ldr	r0, [r7, #4]
 8011cf8:	f001 f8ba 	bl	8012e70 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8011cfc:	4b45      	ldr	r3, [pc, #276]	; (8011e14 <tcp_close_shutdown+0x1a8>)
 8011cfe:	681b      	ldr	r3, [r3, #0]
 8011d00:	687a      	ldr	r2, [r7, #4]
 8011d02:	429a      	cmp	r2, r3
 8011d04:	d105      	bne.n	8011d12 <tcp_close_shutdown+0xa6>
 8011d06:	4b43      	ldr	r3, [pc, #268]	; (8011e14 <tcp_close_shutdown+0x1a8>)
 8011d08:	681b      	ldr	r3, [r3, #0]
 8011d0a:	68db      	ldr	r3, [r3, #12]
 8011d0c:	4a41      	ldr	r2, [pc, #260]	; (8011e14 <tcp_close_shutdown+0x1a8>)
 8011d0e:	6013      	str	r3, [r2, #0]
 8011d10:	e013      	b.n	8011d3a <tcp_close_shutdown+0xce>
 8011d12:	4b40      	ldr	r3, [pc, #256]	; (8011e14 <tcp_close_shutdown+0x1a8>)
 8011d14:	681b      	ldr	r3, [r3, #0]
 8011d16:	60fb      	str	r3, [r7, #12]
 8011d18:	e00c      	b.n	8011d34 <tcp_close_shutdown+0xc8>
 8011d1a:	68fb      	ldr	r3, [r7, #12]
 8011d1c:	68db      	ldr	r3, [r3, #12]
 8011d1e:	687a      	ldr	r2, [r7, #4]
 8011d20:	429a      	cmp	r2, r3
 8011d22:	d104      	bne.n	8011d2e <tcp_close_shutdown+0xc2>
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	68da      	ldr	r2, [r3, #12]
 8011d28:	68fb      	ldr	r3, [r7, #12]
 8011d2a:	60da      	str	r2, [r3, #12]
 8011d2c:	e005      	b.n	8011d3a <tcp_close_shutdown+0xce>
 8011d2e:	68fb      	ldr	r3, [r7, #12]
 8011d30:	68db      	ldr	r3, [r3, #12]
 8011d32:	60fb      	str	r3, [r7, #12]
 8011d34:	68fb      	ldr	r3, [r7, #12]
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	d1ef      	bne.n	8011d1a <tcp_close_shutdown+0xae>
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	2200      	movs	r2, #0
 8011d3e:	60da      	str	r2, [r3, #12]
 8011d40:	4b35      	ldr	r3, [pc, #212]	; (8011e18 <tcp_close_shutdown+0x1ac>)
 8011d42:	2201      	movs	r2, #1
 8011d44:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8011d46:	4b35      	ldr	r3, [pc, #212]	; (8011e1c <tcp_close_shutdown+0x1b0>)
 8011d48:	681b      	ldr	r3, [r3, #0]
 8011d4a:	687a      	ldr	r2, [r7, #4]
 8011d4c:	429a      	cmp	r2, r3
 8011d4e:	d102      	bne.n	8011d56 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8011d50:	f003 fd4c 	bl	80157ec <tcp_trigger_input_pcb_close>
 8011d54:	e002      	b.n	8011d5c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8011d56:	6878      	ldr	r0, [r7, #4]
 8011d58:	f7ff fed6 	bl	8011b08 <tcp_free>
      }
      return ERR_OK;
 8011d5c:	2300      	movs	r3, #0
 8011d5e:	e04d      	b.n	8011dfc <tcp_close_shutdown+0x190>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	7d1b      	ldrb	r3, [r3, #20]
 8011d64:	2b01      	cmp	r3, #1
 8011d66:	d02d      	beq.n	8011dc4 <tcp_close_shutdown+0x158>
 8011d68:	2b02      	cmp	r3, #2
 8011d6a:	d036      	beq.n	8011dda <tcp_close_shutdown+0x16e>
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	d13f      	bne.n	8011df0 <tcp_close_shutdown+0x184>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	8adb      	ldrh	r3, [r3, #22]
 8011d74:	2b00      	cmp	r3, #0
 8011d76:	d021      	beq.n	8011dbc <tcp_close_shutdown+0x150>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8011d78:	4b29      	ldr	r3, [pc, #164]	; (8011e20 <tcp_close_shutdown+0x1b4>)
 8011d7a:	681b      	ldr	r3, [r3, #0]
 8011d7c:	687a      	ldr	r2, [r7, #4]
 8011d7e:	429a      	cmp	r2, r3
 8011d80:	d105      	bne.n	8011d8e <tcp_close_shutdown+0x122>
 8011d82:	4b27      	ldr	r3, [pc, #156]	; (8011e20 <tcp_close_shutdown+0x1b4>)
 8011d84:	681b      	ldr	r3, [r3, #0]
 8011d86:	68db      	ldr	r3, [r3, #12]
 8011d88:	4a25      	ldr	r2, [pc, #148]	; (8011e20 <tcp_close_shutdown+0x1b4>)
 8011d8a:	6013      	str	r3, [r2, #0]
 8011d8c:	e013      	b.n	8011db6 <tcp_close_shutdown+0x14a>
 8011d8e:	4b24      	ldr	r3, [pc, #144]	; (8011e20 <tcp_close_shutdown+0x1b4>)
 8011d90:	681b      	ldr	r3, [r3, #0]
 8011d92:	60bb      	str	r3, [r7, #8]
 8011d94:	e00c      	b.n	8011db0 <tcp_close_shutdown+0x144>
 8011d96:	68bb      	ldr	r3, [r7, #8]
 8011d98:	68db      	ldr	r3, [r3, #12]
 8011d9a:	687a      	ldr	r2, [r7, #4]
 8011d9c:	429a      	cmp	r2, r3
 8011d9e:	d104      	bne.n	8011daa <tcp_close_shutdown+0x13e>
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	68da      	ldr	r2, [r3, #12]
 8011da4:	68bb      	ldr	r3, [r7, #8]
 8011da6:	60da      	str	r2, [r3, #12]
 8011da8:	e005      	b.n	8011db6 <tcp_close_shutdown+0x14a>
 8011daa:	68bb      	ldr	r3, [r7, #8]
 8011dac:	68db      	ldr	r3, [r3, #12]
 8011dae:	60bb      	str	r3, [r7, #8]
 8011db0:	68bb      	ldr	r3, [r7, #8]
 8011db2:	2b00      	cmp	r3, #0
 8011db4:	d1ef      	bne.n	8011d96 <tcp_close_shutdown+0x12a>
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	2200      	movs	r2, #0
 8011dba:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8011dbc:	6878      	ldr	r0, [r7, #4]
 8011dbe:	f7ff fea3 	bl	8011b08 <tcp_free>
      break;
 8011dc2:	e01a      	b.n	8011dfa <tcp_close_shutdown+0x18e>
    case LISTEN:
      tcp_listen_closed(pcb);
 8011dc4:	6878      	ldr	r0, [r7, #4]
 8011dc6:	f7ff ff17 	bl	8011bf8 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8011dca:	6879      	ldr	r1, [r7, #4]
 8011dcc:	4815      	ldr	r0, [pc, #84]	; (8011e24 <tcp_close_shutdown+0x1b8>)
 8011dce:	f001 f89f 	bl	8012f10 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8011dd2:	6878      	ldr	r0, [r7, #4]
 8011dd4:	f7ff feb4 	bl	8011b40 <tcp_free_listen>
      break;
 8011dd8:	e00f      	b.n	8011dfa <tcp_close_shutdown+0x18e>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8011dda:	6879      	ldr	r1, [r7, #4]
 8011ddc:	480d      	ldr	r0, [pc, #52]	; (8011e14 <tcp_close_shutdown+0x1a8>)
 8011dde:	f001 f897 	bl	8012f10 <tcp_pcb_remove>
 8011de2:	4b0d      	ldr	r3, [pc, #52]	; (8011e18 <tcp_close_shutdown+0x1ac>)
 8011de4:	2201      	movs	r2, #1
 8011de6:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8011de8:	6878      	ldr	r0, [r7, #4]
 8011dea:	f7ff fe8d 	bl	8011b08 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8011dee:	e004      	b.n	8011dfa <tcp_close_shutdown+0x18e>
    default:
      return tcp_close_shutdown_fin(pcb);
 8011df0:	6878      	ldr	r0, [r7, #4]
 8011df2:	f000 f819 	bl	8011e28 <tcp_close_shutdown_fin>
 8011df6:	4603      	mov	r3, r0
 8011df8:	e000      	b.n	8011dfc <tcp_close_shutdown+0x190>
  }
  return ERR_OK;
 8011dfa:	2300      	movs	r3, #0
}
 8011dfc:	4618      	mov	r0, r3
 8011dfe:	3710      	adds	r7, #16
 8011e00:	46bd      	mov	sp, r7
 8011e02:	bdb0      	pop	{r4, r5, r7, pc}
 8011e04:	0801e5f0 	.word	0x0801e5f0
 8011e08:	0801e6e0 	.word	0x0801e6e0
 8011e0c:	0801e650 	.word	0x0801e650
 8011e10:	0801e700 	.word	0x0801e700
 8011e14:	2400ce68 	.word	0x2400ce68
 8011e18:	2400ce64 	.word	0x2400ce64
 8011e1c:	2400ce7c 	.word	0x2400ce7c
 8011e20:	2400ce74 	.word	0x2400ce74
 8011e24:	2400ce70 	.word	0x2400ce70

08011e28 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8011e28:	b580      	push	{r7, lr}
 8011e2a:	b084      	sub	sp, #16
 8011e2c:	af00      	add	r7, sp, #0
 8011e2e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	d106      	bne.n	8011e44 <tcp_close_shutdown_fin+0x1c>
 8011e36:	4b2c      	ldr	r3, [pc, #176]	; (8011ee8 <tcp_close_shutdown_fin+0xc0>)
 8011e38:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8011e3c:	492b      	ldr	r1, [pc, #172]	; (8011eec <tcp_close_shutdown_fin+0xc4>)
 8011e3e:	482c      	ldr	r0, [pc, #176]	; (8011ef0 <tcp_close_shutdown_fin+0xc8>)
 8011e40:	f009 f95e 	bl	801b100 <iprintf>

  switch (pcb->state) {
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	7d1b      	ldrb	r3, [r3, #20]
 8011e48:	2b04      	cmp	r3, #4
 8011e4a:	d010      	beq.n	8011e6e <tcp_close_shutdown_fin+0x46>
 8011e4c:	2b07      	cmp	r3, #7
 8011e4e:	d01b      	beq.n	8011e88 <tcp_close_shutdown_fin+0x60>
 8011e50:	2b03      	cmp	r3, #3
 8011e52:	d126      	bne.n	8011ea2 <tcp_close_shutdown_fin+0x7a>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8011e54:	6878      	ldr	r0, [r7, #4]
 8011e56:	f003 fedb 	bl	8015c10 <tcp_send_fin>
 8011e5a:	4603      	mov	r3, r0
 8011e5c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8011e5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011e62:	2b00      	cmp	r3, #0
 8011e64:	d11f      	bne.n	8011ea6 <tcp_close_shutdown_fin+0x7e>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	2205      	movs	r2, #5
 8011e6a:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011e6c:	e01b      	b.n	8011ea6 <tcp_close_shutdown_fin+0x7e>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8011e6e:	6878      	ldr	r0, [r7, #4]
 8011e70:	f003 fece 	bl	8015c10 <tcp_send_fin>
 8011e74:	4603      	mov	r3, r0
 8011e76:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8011e78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	d114      	bne.n	8011eaa <tcp_close_shutdown_fin+0x82>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	2205      	movs	r2, #5
 8011e84:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011e86:	e010      	b.n	8011eaa <tcp_close_shutdown_fin+0x82>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8011e88:	6878      	ldr	r0, [r7, #4]
 8011e8a:	f003 fec1 	bl	8015c10 <tcp_send_fin>
 8011e8e:	4603      	mov	r3, r0
 8011e90:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8011e92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011e96:	2b00      	cmp	r3, #0
 8011e98:	d109      	bne.n	8011eae <tcp_close_shutdown_fin+0x86>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	2209      	movs	r2, #9
 8011e9e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011ea0:	e005      	b.n	8011eae <tcp_close_shutdown_fin+0x86>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8011ea2:	2300      	movs	r3, #0
 8011ea4:	e01c      	b.n	8011ee0 <tcp_close_shutdown_fin+0xb8>
      break;
 8011ea6:	bf00      	nop
 8011ea8:	e002      	b.n	8011eb0 <tcp_close_shutdown_fin+0x88>
      break;
 8011eaa:	bf00      	nop
 8011eac:	e000      	b.n	8011eb0 <tcp_close_shutdown_fin+0x88>
      break;
 8011eae:	bf00      	nop
  }

  if (err == ERR_OK) {
 8011eb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011eb4:	2b00      	cmp	r3, #0
 8011eb6:	d103      	bne.n	8011ec0 <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8011eb8:	6878      	ldr	r0, [r7, #4]
 8011eba:	f003 ffe7 	bl	8015e8c <tcp_output>
 8011ebe:	e00d      	b.n	8011edc <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 8011ec0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011ec4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011ec8:	d108      	bne.n	8011edc <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	8b5b      	ldrh	r3, [r3, #26]
 8011ece:	f043 0308 	orr.w	r3, r3, #8
 8011ed2:	b29a      	uxth	r2, r3
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8011ed8:	2300      	movs	r3, #0
 8011eda:	e001      	b.n	8011ee0 <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 8011edc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011ee0:	4618      	mov	r0, r3
 8011ee2:	3710      	adds	r7, #16
 8011ee4:	46bd      	mov	sp, r7
 8011ee6:	bd80      	pop	{r7, pc}
 8011ee8:	0801e5f0 	.word	0x0801e5f0
 8011eec:	0801e6bc 	.word	0x0801e6bc
 8011ef0:	0801e650 	.word	0x0801e650

08011ef4 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8011ef4:	b580      	push	{r7, lr}
 8011ef6:	b082      	sub	sp, #8
 8011ef8:	af00      	add	r7, sp, #0
 8011efa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	2b00      	cmp	r3, #0
 8011f00:	d109      	bne.n	8011f16 <tcp_close+0x22>
 8011f02:	4b0f      	ldr	r3, [pc, #60]	; (8011f40 <tcp_close+0x4c>)
 8011f04:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8011f08:	490e      	ldr	r1, [pc, #56]	; (8011f44 <tcp_close+0x50>)
 8011f0a:	480f      	ldr	r0, [pc, #60]	; (8011f48 <tcp_close+0x54>)
 8011f0c:	f009 f8f8 	bl	801b100 <iprintf>
 8011f10:	f06f 030f 	mvn.w	r3, #15
 8011f14:	e00f      	b.n	8011f36 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	7d1b      	ldrb	r3, [r3, #20]
 8011f1a:	2b01      	cmp	r3, #1
 8011f1c:	d006      	beq.n	8011f2c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8011f1e:	687b      	ldr	r3, [r7, #4]
 8011f20:	8b5b      	ldrh	r3, [r3, #26]
 8011f22:	f043 0310 	orr.w	r3, r3, #16
 8011f26:	b29a      	uxth	r2, r3
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8011f2c:	2101      	movs	r1, #1
 8011f2e:	6878      	ldr	r0, [r7, #4]
 8011f30:	f7ff fe9c 	bl	8011c6c <tcp_close_shutdown>
 8011f34:	4603      	mov	r3, r0
}
 8011f36:	4618      	mov	r0, r3
 8011f38:	3708      	adds	r7, #8
 8011f3a:	46bd      	mov	sp, r7
 8011f3c:	bd80      	pop	{r7, pc}
 8011f3e:	bf00      	nop
 8011f40:	0801e5f0 	.word	0x0801e5f0
 8011f44:	0801e71c 	.word	0x0801e71c
 8011f48:	0801e650 	.word	0x0801e650

08011f4c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8011f4c:	b580      	push	{r7, lr}
 8011f4e:	b08e      	sub	sp, #56	; 0x38
 8011f50:	af04      	add	r7, sp, #16
 8011f52:	6078      	str	r0, [r7, #4]
 8011f54:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	d107      	bne.n	8011f6c <tcp_abandon+0x20>
 8011f5c:	4b52      	ldr	r3, [pc, #328]	; (80120a8 <tcp_abandon+0x15c>)
 8011f5e:	f240 223d 	movw	r2, #573	; 0x23d
 8011f62:	4952      	ldr	r1, [pc, #328]	; (80120ac <tcp_abandon+0x160>)
 8011f64:	4852      	ldr	r0, [pc, #328]	; (80120b0 <tcp_abandon+0x164>)
 8011f66:	f009 f8cb 	bl	801b100 <iprintf>
 8011f6a:	e099      	b.n	80120a0 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	7d1b      	ldrb	r3, [r3, #20]
 8011f70:	2b01      	cmp	r3, #1
 8011f72:	d106      	bne.n	8011f82 <tcp_abandon+0x36>
 8011f74:	4b4c      	ldr	r3, [pc, #304]	; (80120a8 <tcp_abandon+0x15c>)
 8011f76:	f240 2241 	movw	r2, #577	; 0x241
 8011f7a:	494e      	ldr	r1, [pc, #312]	; (80120b4 <tcp_abandon+0x168>)
 8011f7c:	484c      	ldr	r0, [pc, #304]	; (80120b0 <tcp_abandon+0x164>)
 8011f7e:	f009 f8bf 	bl	801b100 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	7d1b      	ldrb	r3, [r3, #20]
 8011f86:	2b0a      	cmp	r3, #10
 8011f88:	d107      	bne.n	8011f9a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8011f8a:	6879      	ldr	r1, [r7, #4]
 8011f8c:	484a      	ldr	r0, [pc, #296]	; (80120b8 <tcp_abandon+0x16c>)
 8011f8e:	f000 ffbf 	bl	8012f10 <tcp_pcb_remove>
    tcp_free(pcb);
 8011f92:	6878      	ldr	r0, [r7, #4]
 8011f94:	f7ff fdb8 	bl	8011b08 <tcp_free>
 8011f98:	e082      	b.n	80120a0 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8011f9a:	2300      	movs	r3, #0
 8011f9c:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8011f9e:	2300      	movs	r3, #0
 8011fa0:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011fa6:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011fac:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011fb4:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	691b      	ldr	r3, [r3, #16]
 8011fba:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	7d1b      	ldrb	r3, [r3, #20]
 8011fc0:	2b00      	cmp	r3, #0
 8011fc2:	d126      	bne.n	8012012 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	8adb      	ldrh	r3, [r3, #22]
 8011fc8:	2b00      	cmp	r3, #0
 8011fca:	d02e      	beq.n	801202a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8011fcc:	4b3b      	ldr	r3, [pc, #236]	; (80120bc <tcp_abandon+0x170>)
 8011fce:	681b      	ldr	r3, [r3, #0]
 8011fd0:	687a      	ldr	r2, [r7, #4]
 8011fd2:	429a      	cmp	r2, r3
 8011fd4:	d105      	bne.n	8011fe2 <tcp_abandon+0x96>
 8011fd6:	4b39      	ldr	r3, [pc, #228]	; (80120bc <tcp_abandon+0x170>)
 8011fd8:	681b      	ldr	r3, [r3, #0]
 8011fda:	68db      	ldr	r3, [r3, #12]
 8011fdc:	4a37      	ldr	r2, [pc, #220]	; (80120bc <tcp_abandon+0x170>)
 8011fde:	6013      	str	r3, [r2, #0]
 8011fe0:	e013      	b.n	801200a <tcp_abandon+0xbe>
 8011fe2:	4b36      	ldr	r3, [pc, #216]	; (80120bc <tcp_abandon+0x170>)
 8011fe4:	681b      	ldr	r3, [r3, #0]
 8011fe6:	61fb      	str	r3, [r7, #28]
 8011fe8:	e00c      	b.n	8012004 <tcp_abandon+0xb8>
 8011fea:	69fb      	ldr	r3, [r7, #28]
 8011fec:	68db      	ldr	r3, [r3, #12]
 8011fee:	687a      	ldr	r2, [r7, #4]
 8011ff0:	429a      	cmp	r2, r3
 8011ff2:	d104      	bne.n	8011ffe <tcp_abandon+0xb2>
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	68da      	ldr	r2, [r3, #12]
 8011ff8:	69fb      	ldr	r3, [r7, #28]
 8011ffa:	60da      	str	r2, [r3, #12]
 8011ffc:	e005      	b.n	801200a <tcp_abandon+0xbe>
 8011ffe:	69fb      	ldr	r3, [r7, #28]
 8012000:	68db      	ldr	r3, [r3, #12]
 8012002:	61fb      	str	r3, [r7, #28]
 8012004:	69fb      	ldr	r3, [r7, #28]
 8012006:	2b00      	cmp	r3, #0
 8012008:	d1ef      	bne.n	8011fea <tcp_abandon+0x9e>
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	2200      	movs	r2, #0
 801200e:	60da      	str	r2, [r3, #12]
 8012010:	e00b      	b.n	801202a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8012012:	683b      	ldr	r3, [r7, #0]
 8012014:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	8adb      	ldrh	r3, [r3, #22]
 801201a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801201c:	6879      	ldr	r1, [r7, #4]
 801201e:	4828      	ldr	r0, [pc, #160]	; (80120c0 <tcp_abandon+0x174>)
 8012020:	f000 ff76 	bl	8012f10 <tcp_pcb_remove>
 8012024:	4b27      	ldr	r3, [pc, #156]	; (80120c4 <tcp_abandon+0x178>)
 8012026:	2201      	movs	r2, #1
 8012028:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801202e:	2b00      	cmp	r3, #0
 8012030:	d004      	beq.n	801203c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012036:	4618      	mov	r0, r3
 8012038:	f000 fd1a 	bl	8012a70 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012040:	2b00      	cmp	r3, #0
 8012042:	d004      	beq.n	801204e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012048:	4618      	mov	r0, r3
 801204a:	f000 fd11 	bl	8012a70 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012052:	2b00      	cmp	r3, #0
 8012054:	d004      	beq.n	8012060 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801205a:	4618      	mov	r0, r3
 801205c:	f000 fd08 	bl	8012a70 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8012060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012062:	2b00      	cmp	r3, #0
 8012064:	d00e      	beq.n	8012084 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8012066:	6879      	ldr	r1, [r7, #4]
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	3304      	adds	r3, #4
 801206c:	687a      	ldr	r2, [r7, #4]
 801206e:	8b12      	ldrh	r2, [r2, #24]
 8012070:	9202      	str	r2, [sp, #8]
 8012072:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012074:	9201      	str	r2, [sp, #4]
 8012076:	9300      	str	r3, [sp, #0]
 8012078:	460b      	mov	r3, r1
 801207a:	697a      	ldr	r2, [r7, #20]
 801207c:	69b9      	ldr	r1, [r7, #24]
 801207e:	6878      	ldr	r0, [r7, #4]
 8012080:	f004 fcca 	bl	8016a18 <tcp_rst>
    }
    last_state = pcb->state;
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	7d1b      	ldrb	r3, [r3, #20]
 8012088:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 801208a:	6878      	ldr	r0, [r7, #4]
 801208c:	f7ff fd3c 	bl	8011b08 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8012090:	693b      	ldr	r3, [r7, #16]
 8012092:	2b00      	cmp	r3, #0
 8012094:	d004      	beq.n	80120a0 <tcp_abandon+0x154>
 8012096:	693b      	ldr	r3, [r7, #16]
 8012098:	f06f 010c 	mvn.w	r1, #12
 801209c:	68f8      	ldr	r0, [r7, #12]
 801209e:	4798      	blx	r3
  }
}
 80120a0:	3728      	adds	r7, #40	; 0x28
 80120a2:	46bd      	mov	sp, r7
 80120a4:	bd80      	pop	{r7, pc}
 80120a6:	bf00      	nop
 80120a8:	0801e5f0 	.word	0x0801e5f0
 80120ac:	0801e750 	.word	0x0801e750
 80120b0:	0801e650 	.word	0x0801e650
 80120b4:	0801e76c 	.word	0x0801e76c
 80120b8:	2400ce78 	.word	0x2400ce78
 80120bc:	2400ce74 	.word	0x2400ce74
 80120c0:	2400ce68 	.word	0x2400ce68
 80120c4:	2400ce64 	.word	0x2400ce64

080120c8 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80120c8:	b580      	push	{r7, lr}
 80120ca:	b082      	sub	sp, #8
 80120cc:	af00      	add	r7, sp, #0
 80120ce:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80120d0:	2101      	movs	r1, #1
 80120d2:	6878      	ldr	r0, [r7, #4]
 80120d4:	f7ff ff3a 	bl	8011f4c <tcp_abandon>
}
 80120d8:	bf00      	nop
 80120da:	3708      	adds	r7, #8
 80120dc:	46bd      	mov	sp, r7
 80120de:	bd80      	pop	{r7, pc}

080120e0 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80120e0:	b580      	push	{r7, lr}
 80120e2:	b084      	sub	sp, #16
 80120e4:	af00      	add	r7, sp, #0
 80120e6:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	2b00      	cmp	r3, #0
 80120ec:	d106      	bne.n	80120fc <tcp_update_rcv_ann_wnd+0x1c>
 80120ee:	4b25      	ldr	r3, [pc, #148]	; (8012184 <tcp_update_rcv_ann_wnd+0xa4>)
 80120f0:	f240 32a6 	movw	r2, #934	; 0x3a6
 80120f4:	4924      	ldr	r1, [pc, #144]	; (8012188 <tcp_update_rcv_ann_wnd+0xa8>)
 80120f6:	4825      	ldr	r0, [pc, #148]	; (801218c <tcp_update_rcv_ann_wnd+0xac>)
 80120f8:	f009 f802 	bl	801b100 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012100:	687a      	ldr	r2, [r7, #4]
 8012102:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8012104:	4413      	add	r3, r2
 8012106:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801210c:	687a      	ldr	r2, [r7, #4]
 801210e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8012110:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8012114:	bf28      	it	cs
 8012116:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 801211a:	b292      	uxth	r2, r2
 801211c:	4413      	add	r3, r2
 801211e:	68fa      	ldr	r2, [r7, #12]
 8012120:	1ad3      	subs	r3, r2, r3
 8012122:	2b00      	cmp	r3, #0
 8012124:	db08      	blt.n	8012138 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801212a:	687b      	ldr	r3, [r7, #4]
 801212c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012132:	68fa      	ldr	r2, [r7, #12]
 8012134:	1ad3      	subs	r3, r2, r3
 8012136:	e020      	b.n	801217a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012140:	1ad3      	subs	r3, r2, r3
 8012142:	2b00      	cmp	r3, #0
 8012144:	dd03      	ble.n	801214e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	2200      	movs	r2, #0
 801214a:	855a      	strh	r2, [r3, #42]	; 0x2a
 801214c:	e014      	b.n	8012178 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012156:	1ad3      	subs	r3, r2, r3
 8012158:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 801215a:	68bb      	ldr	r3, [r7, #8]
 801215c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012160:	d306      	bcc.n	8012170 <tcp_update_rcv_ann_wnd+0x90>
 8012162:	4b08      	ldr	r3, [pc, #32]	; (8012184 <tcp_update_rcv_ann_wnd+0xa4>)
 8012164:	f240 32b6 	movw	r2, #950	; 0x3b6
 8012168:	4909      	ldr	r1, [pc, #36]	; (8012190 <tcp_update_rcv_ann_wnd+0xb0>)
 801216a:	4808      	ldr	r0, [pc, #32]	; (801218c <tcp_update_rcv_ann_wnd+0xac>)
 801216c:	f008 ffc8 	bl	801b100 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8012170:	68bb      	ldr	r3, [r7, #8]
 8012172:	b29a      	uxth	r2, r3
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8012178:	2300      	movs	r3, #0
  }
}
 801217a:	4618      	mov	r0, r3
 801217c:	3710      	adds	r7, #16
 801217e:	46bd      	mov	sp, r7
 8012180:	bd80      	pop	{r7, pc}
 8012182:	bf00      	nop
 8012184:	0801e5f0 	.word	0x0801e5f0
 8012188:	0801e868 	.word	0x0801e868
 801218c:	0801e650 	.word	0x0801e650
 8012190:	0801e88c 	.word	0x0801e88c

08012194 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8012194:	b580      	push	{r7, lr}
 8012196:	b084      	sub	sp, #16
 8012198:	af00      	add	r7, sp, #0
 801219a:	6078      	str	r0, [r7, #4]
 801219c:	460b      	mov	r3, r1
 801219e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	2b00      	cmp	r3, #0
 80121a4:	d107      	bne.n	80121b6 <tcp_recved+0x22>
 80121a6:	4b1f      	ldr	r3, [pc, #124]	; (8012224 <tcp_recved+0x90>)
 80121a8:	f240 32cf 	movw	r2, #975	; 0x3cf
 80121ac:	491e      	ldr	r1, [pc, #120]	; (8012228 <tcp_recved+0x94>)
 80121ae:	481f      	ldr	r0, [pc, #124]	; (801222c <tcp_recved+0x98>)
 80121b0:	f008 ffa6 	bl	801b100 <iprintf>
 80121b4:	e032      	b.n	801221c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	7d1b      	ldrb	r3, [r3, #20]
 80121ba:	2b01      	cmp	r3, #1
 80121bc:	d106      	bne.n	80121cc <tcp_recved+0x38>
 80121be:	4b19      	ldr	r3, [pc, #100]	; (8012224 <tcp_recved+0x90>)
 80121c0:	f240 32d3 	movw	r2, #979	; 0x3d3
 80121c4:	491a      	ldr	r1, [pc, #104]	; (8012230 <tcp_recved+0x9c>)
 80121c6:	4819      	ldr	r0, [pc, #100]	; (801222c <tcp_recved+0x98>)
 80121c8:	f008 ff9a 	bl	801b100 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80121d0:	887b      	ldrh	r3, [r7, #2]
 80121d2:	4413      	add	r3, r2
 80121d4:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80121d6:	89fb      	ldrh	r3, [r7, #14]
 80121d8:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80121dc:	d804      	bhi.n	80121e8 <tcp_recved+0x54>
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80121e2:	89fa      	ldrh	r2, [r7, #14]
 80121e4:	429a      	cmp	r2, r3
 80121e6:	d204      	bcs.n	80121f2 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80121ee:	851a      	strh	r2, [r3, #40]	; 0x28
 80121f0:	e002      	b.n	80121f8 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	89fa      	ldrh	r2, [r7, #14]
 80121f6:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80121f8:	6878      	ldr	r0, [r7, #4]
 80121fa:	f7ff ff71 	bl	80120e0 <tcp_update_rcv_ann_wnd>
 80121fe:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8012200:	68bb      	ldr	r3, [r7, #8]
 8012202:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8012206:	d309      	bcc.n	801221c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	8b5b      	ldrh	r3, [r3, #26]
 801220c:	f043 0302 	orr.w	r3, r3, #2
 8012210:	b29a      	uxth	r2, r3
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8012216:	6878      	ldr	r0, [r7, #4]
 8012218:	f003 fe38 	bl	8015e8c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 801221c:	3710      	adds	r7, #16
 801221e:	46bd      	mov	sp, r7
 8012220:	bd80      	pop	{r7, pc}
 8012222:	bf00      	nop
 8012224:	0801e5f0 	.word	0x0801e5f0
 8012228:	0801e8a8 	.word	0x0801e8a8
 801222c:	0801e650 	.word	0x0801e650
 8012230:	0801e8c0 	.word	0x0801e8c0

08012234 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8012234:	b5b0      	push	{r4, r5, r7, lr}
 8012236:	b090      	sub	sp, #64	; 0x40
 8012238:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 801223a:	2300      	movs	r3, #0
 801223c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8012240:	4b94      	ldr	r3, [pc, #592]	; (8012494 <tcp_slowtmr+0x260>)
 8012242:	681b      	ldr	r3, [r3, #0]
 8012244:	3301      	adds	r3, #1
 8012246:	4a93      	ldr	r2, [pc, #588]	; (8012494 <tcp_slowtmr+0x260>)
 8012248:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 801224a:	4b93      	ldr	r3, [pc, #588]	; (8012498 <tcp_slowtmr+0x264>)
 801224c:	781b      	ldrb	r3, [r3, #0]
 801224e:	3301      	adds	r3, #1
 8012250:	b2da      	uxtb	r2, r3
 8012252:	4b91      	ldr	r3, [pc, #580]	; (8012498 <tcp_slowtmr+0x264>)
 8012254:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8012256:	2300      	movs	r3, #0
 8012258:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 801225a:	4b90      	ldr	r3, [pc, #576]	; (801249c <tcp_slowtmr+0x268>)
 801225c:	681b      	ldr	r3, [r3, #0]
 801225e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8012260:	e29d      	b.n	801279e <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8012262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012264:	7d1b      	ldrb	r3, [r3, #20]
 8012266:	2b00      	cmp	r3, #0
 8012268:	d106      	bne.n	8012278 <tcp_slowtmr+0x44>
 801226a:	4b8d      	ldr	r3, [pc, #564]	; (80124a0 <tcp_slowtmr+0x26c>)
 801226c:	f240 42be 	movw	r2, #1214	; 0x4be
 8012270:	498c      	ldr	r1, [pc, #560]	; (80124a4 <tcp_slowtmr+0x270>)
 8012272:	488d      	ldr	r0, [pc, #564]	; (80124a8 <tcp_slowtmr+0x274>)
 8012274:	f008 ff44 	bl	801b100 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8012278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801227a:	7d1b      	ldrb	r3, [r3, #20]
 801227c:	2b01      	cmp	r3, #1
 801227e:	d106      	bne.n	801228e <tcp_slowtmr+0x5a>
 8012280:	4b87      	ldr	r3, [pc, #540]	; (80124a0 <tcp_slowtmr+0x26c>)
 8012282:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8012286:	4989      	ldr	r1, [pc, #548]	; (80124ac <tcp_slowtmr+0x278>)
 8012288:	4887      	ldr	r0, [pc, #540]	; (80124a8 <tcp_slowtmr+0x274>)
 801228a:	f008 ff39 	bl	801b100 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801228e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012290:	7d1b      	ldrb	r3, [r3, #20]
 8012292:	2b0a      	cmp	r3, #10
 8012294:	d106      	bne.n	80122a4 <tcp_slowtmr+0x70>
 8012296:	4b82      	ldr	r3, [pc, #520]	; (80124a0 <tcp_slowtmr+0x26c>)
 8012298:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 801229c:	4984      	ldr	r1, [pc, #528]	; (80124b0 <tcp_slowtmr+0x27c>)
 801229e:	4882      	ldr	r0, [pc, #520]	; (80124a8 <tcp_slowtmr+0x274>)
 80122a0:	f008 ff2e 	bl	801b100 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80122a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122a6:	7f9a      	ldrb	r2, [r3, #30]
 80122a8:	4b7b      	ldr	r3, [pc, #492]	; (8012498 <tcp_slowtmr+0x264>)
 80122aa:	781b      	ldrb	r3, [r3, #0]
 80122ac:	429a      	cmp	r2, r3
 80122ae:	d105      	bne.n	80122bc <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 80122b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122b2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80122b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122b6:	68db      	ldr	r3, [r3, #12]
 80122b8:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 80122ba:	e270      	b.n	801279e <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 80122bc:	4b76      	ldr	r3, [pc, #472]	; (8012498 <tcp_slowtmr+0x264>)
 80122be:	781a      	ldrb	r2, [r3, #0]
 80122c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122c2:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 80122c4:	2300      	movs	r3, #0
 80122c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 80122ca:	2300      	movs	r3, #0
 80122cc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80122d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122d2:	7d1b      	ldrb	r3, [r3, #20]
 80122d4:	2b02      	cmp	r3, #2
 80122d6:	d10a      	bne.n	80122ee <tcp_slowtmr+0xba>
 80122d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80122de:	2b05      	cmp	r3, #5
 80122e0:	d905      	bls.n	80122ee <tcp_slowtmr+0xba>
      ++pcb_remove;
 80122e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80122e6:	3301      	adds	r3, #1
 80122e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80122ec:	e11e      	b.n	801252c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80122ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122f0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80122f4:	2b0b      	cmp	r3, #11
 80122f6:	d905      	bls.n	8012304 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 80122f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80122fc:	3301      	adds	r3, #1
 80122fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012302:	e113      	b.n	801252c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8012304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012306:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801230a:	2b00      	cmp	r3, #0
 801230c:	d075      	beq.n	80123fa <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 801230e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012312:	2b00      	cmp	r3, #0
 8012314:	d006      	beq.n	8012324 <tcp_slowtmr+0xf0>
 8012316:	4b62      	ldr	r3, [pc, #392]	; (80124a0 <tcp_slowtmr+0x26c>)
 8012318:	f240 42d4 	movw	r2, #1236	; 0x4d4
 801231c:	4965      	ldr	r1, [pc, #404]	; (80124b4 <tcp_slowtmr+0x280>)
 801231e:	4862      	ldr	r0, [pc, #392]	; (80124a8 <tcp_slowtmr+0x274>)
 8012320:	f008 feee 	bl	801b100 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8012324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012326:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012328:	2b00      	cmp	r3, #0
 801232a:	d106      	bne.n	801233a <tcp_slowtmr+0x106>
 801232c:	4b5c      	ldr	r3, [pc, #368]	; (80124a0 <tcp_slowtmr+0x26c>)
 801232e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8012332:	4961      	ldr	r1, [pc, #388]	; (80124b8 <tcp_slowtmr+0x284>)
 8012334:	485c      	ldr	r0, [pc, #368]	; (80124a8 <tcp_slowtmr+0x274>)
 8012336:	f008 fee3 	bl	801b100 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 801233a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801233c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8012340:	2b0b      	cmp	r3, #11
 8012342:	d905      	bls.n	8012350 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8012344:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012348:	3301      	adds	r3, #1
 801234a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801234e:	e0ed      	b.n	801252c <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8012350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012352:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8012356:	3b01      	subs	r3, #1
 8012358:	4a58      	ldr	r2, [pc, #352]	; (80124bc <tcp_slowtmr+0x288>)
 801235a:	5cd3      	ldrb	r3, [r2, r3]
 801235c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 801235e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012360:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8012364:	7c7a      	ldrb	r2, [r7, #17]
 8012366:	429a      	cmp	r2, r3
 8012368:	d907      	bls.n	801237a <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 801236a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801236c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8012370:	3301      	adds	r3, #1
 8012372:	b2da      	uxtb	r2, r3
 8012374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012376:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 801237a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801237c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8012380:	7c7a      	ldrb	r2, [r7, #17]
 8012382:	429a      	cmp	r2, r3
 8012384:	f200 80d2 	bhi.w	801252c <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8012388:	2301      	movs	r3, #1
 801238a:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 801238c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801238e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012392:	2b00      	cmp	r3, #0
 8012394:	d108      	bne.n	80123a8 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8012396:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012398:	f004 fc32 	bl	8016c00 <tcp_zero_window_probe>
 801239c:	4603      	mov	r3, r0
 801239e:	2b00      	cmp	r3, #0
 80123a0:	d014      	beq.n	80123cc <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 80123a2:	2300      	movs	r3, #0
 80123a4:	623b      	str	r3, [r7, #32]
 80123a6:	e011      	b.n	80123cc <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80123a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123aa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80123ae:	4619      	mov	r1, r3
 80123b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80123b2:	f003 fae5 	bl	8015980 <tcp_split_unsent_seg>
 80123b6:	4603      	mov	r3, r0
 80123b8:	2b00      	cmp	r3, #0
 80123ba:	d107      	bne.n	80123cc <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 80123bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80123be:	f003 fd65 	bl	8015e8c <tcp_output>
 80123c2:	4603      	mov	r3, r0
 80123c4:	2b00      	cmp	r3, #0
 80123c6:	d101      	bne.n	80123cc <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 80123c8:	2300      	movs	r3, #0
 80123ca:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 80123cc:	6a3b      	ldr	r3, [r7, #32]
 80123ce:	2b00      	cmp	r3, #0
 80123d0:	f000 80ac 	beq.w	801252c <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 80123d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123d6:	2200      	movs	r2, #0
 80123d8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80123dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123de:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80123e2:	2b06      	cmp	r3, #6
 80123e4:	f200 80a2 	bhi.w	801252c <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 80123e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123ea:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80123ee:	3301      	adds	r3, #1
 80123f0:	b2da      	uxtb	r2, r3
 80123f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123f4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 80123f8:	e098      	b.n	801252c <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80123fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123fc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012400:	2b00      	cmp	r3, #0
 8012402:	db0f      	blt.n	8012424 <tcp_slowtmr+0x1f0>
 8012404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012406:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801240a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801240e:	4293      	cmp	r3, r2
 8012410:	d008      	beq.n	8012424 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8012412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012414:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012418:	b29b      	uxth	r3, r3
 801241a:	3301      	adds	r3, #1
 801241c:	b29b      	uxth	r3, r3
 801241e:	b21a      	sxth	r2, r3
 8012420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012422:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8012424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012426:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 801242a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801242c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8012430:	429a      	cmp	r2, r3
 8012432:	db7b      	blt.n	801252c <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8012434:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012436:	f004 f821 	bl	801647c <tcp_rexmit_rto_prepare>
 801243a:	4603      	mov	r3, r0
 801243c:	2b00      	cmp	r3, #0
 801243e:	d007      	beq.n	8012450 <tcp_slowtmr+0x21c>
 8012440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012442:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012444:	2b00      	cmp	r3, #0
 8012446:	d171      	bne.n	801252c <tcp_slowtmr+0x2f8>
 8012448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801244a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801244c:	2b00      	cmp	r3, #0
 801244e:	d06d      	beq.n	801252c <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8012450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012452:	7d1b      	ldrb	r3, [r3, #20]
 8012454:	2b02      	cmp	r3, #2
 8012456:	d03a      	beq.n	80124ce <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8012458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801245a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801245e:	2b0c      	cmp	r3, #12
 8012460:	bf28      	it	cs
 8012462:	230c      	movcs	r3, #12
 8012464:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8012466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012468:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801246c:	10db      	asrs	r3, r3, #3
 801246e:	b21b      	sxth	r3, r3
 8012470:	461a      	mov	r2, r3
 8012472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012474:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012478:	4413      	add	r3, r2
 801247a:	7efa      	ldrb	r2, [r7, #27]
 801247c:	4910      	ldr	r1, [pc, #64]	; (80124c0 <tcp_slowtmr+0x28c>)
 801247e:	5c8a      	ldrb	r2, [r1, r2]
 8012480:	4093      	lsls	r3, r2
 8012482:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8012484:	697b      	ldr	r3, [r7, #20]
 8012486:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 801248a:	4293      	cmp	r3, r2
 801248c:	dc1a      	bgt.n	80124c4 <tcp_slowtmr+0x290>
 801248e:	697b      	ldr	r3, [r7, #20]
 8012490:	b21a      	sxth	r2, r3
 8012492:	e019      	b.n	80124c8 <tcp_slowtmr+0x294>
 8012494:	2400ce6c 	.word	0x2400ce6c
 8012498:	24004916 	.word	0x24004916
 801249c:	2400ce68 	.word	0x2400ce68
 80124a0:	0801e5f0 	.word	0x0801e5f0
 80124a4:	0801e950 	.word	0x0801e950
 80124a8:	0801e650 	.word	0x0801e650
 80124ac:	0801e97c 	.word	0x0801e97c
 80124b0:	0801e9a8 	.word	0x0801e9a8
 80124b4:	0801e9d8 	.word	0x0801e9d8
 80124b8:	0801ea0c 	.word	0x0801ea0c
 80124bc:	08020204 	.word	0x08020204
 80124c0:	080201f4 	.word	0x080201f4
 80124c4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80124c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124ca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 80124ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124d0:	2200      	movs	r2, #0
 80124d2:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80124d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124d6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80124da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124dc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80124e0:	4293      	cmp	r3, r2
 80124e2:	bf28      	it	cs
 80124e4:	4613      	movcs	r3, r2
 80124e6:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 80124e8:	8a7b      	ldrh	r3, [r7, #18]
 80124ea:	085b      	lsrs	r3, r3, #1
 80124ec:	b29a      	uxth	r2, r3
 80124ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124f0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80124f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124f6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80124fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80124fe:	005b      	lsls	r3, r3, #1
 8012500:	b29b      	uxth	r3, r3
 8012502:	429a      	cmp	r2, r3
 8012504:	d206      	bcs.n	8012514 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8012506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012508:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801250a:	005b      	lsls	r3, r3, #1
 801250c:	b29a      	uxth	r2, r3
 801250e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012510:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8012514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012516:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8012518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801251a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 801251e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012520:	2200      	movs	r2, #0
 8012522:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8012526:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012528:	f004 f818 	bl	801655c <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 801252c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801252e:	7d1b      	ldrb	r3, [r3, #20]
 8012530:	2b06      	cmp	r3, #6
 8012532:	d111      	bne.n	8012558 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8012534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012536:	8b5b      	ldrh	r3, [r3, #26]
 8012538:	f003 0310 	and.w	r3, r3, #16
 801253c:	2b00      	cmp	r3, #0
 801253e:	d00b      	beq.n	8012558 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012540:	4b9c      	ldr	r3, [pc, #624]	; (80127b4 <tcp_slowtmr+0x580>)
 8012542:	681a      	ldr	r2, [r3, #0]
 8012544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012546:	6a1b      	ldr	r3, [r3, #32]
 8012548:	1ad3      	subs	r3, r2, r3
 801254a:	2b28      	cmp	r3, #40	; 0x28
 801254c:	d904      	bls.n	8012558 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 801254e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012552:	3301      	adds	r3, #1
 8012554:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8012558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801255a:	7a5b      	ldrb	r3, [r3, #9]
 801255c:	f003 0308 	and.w	r3, r3, #8
 8012560:	2b00      	cmp	r3, #0
 8012562:	d04a      	beq.n	80125fa <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8012564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012566:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8012568:	2b04      	cmp	r3, #4
 801256a:	d003      	beq.n	8012574 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 801256c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801256e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8012570:	2b07      	cmp	r3, #7
 8012572:	d142      	bne.n	80125fa <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012574:	4b8f      	ldr	r3, [pc, #572]	; (80127b4 <tcp_slowtmr+0x580>)
 8012576:	681a      	ldr	r2, [r3, #0]
 8012578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801257a:	6a1b      	ldr	r3, [r3, #32]
 801257c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801257e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012580:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8012584:	4b8c      	ldr	r3, [pc, #560]	; (80127b8 <tcp_slowtmr+0x584>)
 8012586:	440b      	add	r3, r1
 8012588:	498c      	ldr	r1, [pc, #560]	; (80127bc <tcp_slowtmr+0x588>)
 801258a:	fba1 1303 	umull	r1, r3, r1, r3
 801258e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012590:	429a      	cmp	r2, r3
 8012592:	d90a      	bls.n	80125aa <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8012594:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012598:	3301      	adds	r3, #1
 801259a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 801259e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80125a2:	3301      	adds	r3, #1
 80125a4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80125a8:	e027      	b.n	80125fa <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80125aa:	4b82      	ldr	r3, [pc, #520]	; (80127b4 <tcp_slowtmr+0x580>)
 80125ac:	681a      	ldr	r2, [r3, #0]
 80125ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125b0:	6a1b      	ldr	r3, [r3, #32]
 80125b2:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80125b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125b6:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80125ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125bc:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80125c0:	4618      	mov	r0, r3
 80125c2:	4b7f      	ldr	r3, [pc, #508]	; (80127c0 <tcp_slowtmr+0x58c>)
 80125c4:	fb03 f300 	mul.w	r3, r3, r0
 80125c8:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80125ca:	497c      	ldr	r1, [pc, #496]	; (80127bc <tcp_slowtmr+0x588>)
 80125cc:	fba1 1303 	umull	r1, r3, r1, r3
 80125d0:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80125d2:	429a      	cmp	r2, r3
 80125d4:	d911      	bls.n	80125fa <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 80125d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80125d8:	f004 fad2 	bl	8016b80 <tcp_keepalive>
 80125dc:	4603      	mov	r3, r0
 80125de:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 80125e2:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80125e6:	2b00      	cmp	r3, #0
 80125e8:	d107      	bne.n	80125fa <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 80125ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125ec:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80125f0:	3301      	adds	r3, #1
 80125f2:	b2da      	uxtb	r2, r3
 80125f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125f6:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 80125fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80125fe:	2b00      	cmp	r3, #0
 8012600:	d011      	beq.n	8012626 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8012602:	4b6c      	ldr	r3, [pc, #432]	; (80127b4 <tcp_slowtmr+0x580>)
 8012604:	681a      	ldr	r2, [r3, #0]
 8012606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012608:	6a1b      	ldr	r3, [r3, #32]
 801260a:	1ad2      	subs	r2, r2, r3
 801260c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801260e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8012612:	4619      	mov	r1, r3
 8012614:	460b      	mov	r3, r1
 8012616:	005b      	lsls	r3, r3, #1
 8012618:	440b      	add	r3, r1
 801261a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 801261c:	429a      	cmp	r2, r3
 801261e:	d302      	bcc.n	8012626 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8012620:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012622:	f000 fdd9 	bl	80131d8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8012626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012628:	7d1b      	ldrb	r3, [r3, #20]
 801262a:	2b03      	cmp	r3, #3
 801262c:	d10b      	bne.n	8012646 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801262e:	4b61      	ldr	r3, [pc, #388]	; (80127b4 <tcp_slowtmr+0x580>)
 8012630:	681a      	ldr	r2, [r3, #0]
 8012632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012634:	6a1b      	ldr	r3, [r3, #32]
 8012636:	1ad3      	subs	r3, r2, r3
 8012638:	2b28      	cmp	r3, #40	; 0x28
 801263a:	d904      	bls.n	8012646 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 801263c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012640:	3301      	adds	r3, #1
 8012642:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8012646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012648:	7d1b      	ldrb	r3, [r3, #20]
 801264a:	2b09      	cmp	r3, #9
 801264c:	d10b      	bne.n	8012666 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801264e:	4b59      	ldr	r3, [pc, #356]	; (80127b4 <tcp_slowtmr+0x580>)
 8012650:	681a      	ldr	r2, [r3, #0]
 8012652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012654:	6a1b      	ldr	r3, [r3, #32]
 8012656:	1ad3      	subs	r3, r2, r3
 8012658:	2bf0      	cmp	r3, #240	; 0xf0
 801265a:	d904      	bls.n	8012666 <tcp_slowtmr+0x432>
        ++pcb_remove;
 801265c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012660:	3301      	adds	r3, #1
 8012662:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8012666:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801266a:	2b00      	cmp	r3, #0
 801266c:	d060      	beq.n	8012730 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 801266e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012670:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012674:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8012676:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012678:	f000 fbfa 	bl	8012e70 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 801267c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801267e:	2b00      	cmp	r3, #0
 8012680:	d010      	beq.n	80126a4 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8012682:	4b50      	ldr	r3, [pc, #320]	; (80127c4 <tcp_slowtmr+0x590>)
 8012684:	681b      	ldr	r3, [r3, #0]
 8012686:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012688:	429a      	cmp	r2, r3
 801268a:	d106      	bne.n	801269a <tcp_slowtmr+0x466>
 801268c:	4b4e      	ldr	r3, [pc, #312]	; (80127c8 <tcp_slowtmr+0x594>)
 801268e:	f240 526d 	movw	r2, #1389	; 0x56d
 8012692:	494e      	ldr	r1, [pc, #312]	; (80127cc <tcp_slowtmr+0x598>)
 8012694:	484e      	ldr	r0, [pc, #312]	; (80127d0 <tcp_slowtmr+0x59c>)
 8012696:	f008 fd33 	bl	801b100 <iprintf>
        prev->next = pcb->next;
 801269a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801269c:	68da      	ldr	r2, [r3, #12]
 801269e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126a0:	60da      	str	r2, [r3, #12]
 80126a2:	e00f      	b.n	80126c4 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80126a4:	4b47      	ldr	r3, [pc, #284]	; (80127c4 <tcp_slowtmr+0x590>)
 80126a6:	681b      	ldr	r3, [r3, #0]
 80126a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80126aa:	429a      	cmp	r2, r3
 80126ac:	d006      	beq.n	80126bc <tcp_slowtmr+0x488>
 80126ae:	4b46      	ldr	r3, [pc, #280]	; (80127c8 <tcp_slowtmr+0x594>)
 80126b0:	f240 5271 	movw	r2, #1393	; 0x571
 80126b4:	4947      	ldr	r1, [pc, #284]	; (80127d4 <tcp_slowtmr+0x5a0>)
 80126b6:	4846      	ldr	r0, [pc, #280]	; (80127d0 <tcp_slowtmr+0x59c>)
 80126b8:	f008 fd22 	bl	801b100 <iprintf>
        tcp_active_pcbs = pcb->next;
 80126bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126be:	68db      	ldr	r3, [r3, #12]
 80126c0:	4a40      	ldr	r2, [pc, #256]	; (80127c4 <tcp_slowtmr+0x590>)
 80126c2:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 80126c4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80126c8:	2b00      	cmp	r3, #0
 80126ca:	d013      	beq.n	80126f4 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80126cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126ce:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80126d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126d2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80126d4:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 80126d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126d8:	3304      	adds	r3, #4
 80126da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80126dc:	8ad2      	ldrh	r2, [r2, #22]
 80126de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80126e0:	8b09      	ldrh	r1, [r1, #24]
 80126e2:	9102      	str	r1, [sp, #8]
 80126e4:	9201      	str	r2, [sp, #4]
 80126e6:	9300      	str	r3, [sp, #0]
 80126e8:	462b      	mov	r3, r5
 80126ea:	4622      	mov	r2, r4
 80126ec:	4601      	mov	r1, r0
 80126ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80126f0:	f004 f992 	bl	8016a18 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 80126f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126f6:	691b      	ldr	r3, [r3, #16]
 80126f8:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80126fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126fc:	7d1b      	ldrb	r3, [r3, #20]
 80126fe:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8012700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012702:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8012704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012706:	68db      	ldr	r3, [r3, #12]
 8012708:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 801270a:	6838      	ldr	r0, [r7, #0]
 801270c:	f7ff f9fc 	bl	8011b08 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8012710:	4b31      	ldr	r3, [pc, #196]	; (80127d8 <tcp_slowtmr+0x5a4>)
 8012712:	2200      	movs	r2, #0
 8012714:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8012716:	68fb      	ldr	r3, [r7, #12]
 8012718:	2b00      	cmp	r3, #0
 801271a:	d004      	beq.n	8012726 <tcp_slowtmr+0x4f2>
 801271c:	68fb      	ldr	r3, [r7, #12]
 801271e:	f06f 010c 	mvn.w	r1, #12
 8012722:	68b8      	ldr	r0, [r7, #8]
 8012724:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8012726:	4b2c      	ldr	r3, [pc, #176]	; (80127d8 <tcp_slowtmr+0x5a4>)
 8012728:	781b      	ldrb	r3, [r3, #0]
 801272a:	2b00      	cmp	r3, #0
 801272c:	d037      	beq.n	801279e <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 801272e:	e592      	b.n	8012256 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8012730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012732:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8012734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012736:	68db      	ldr	r3, [r3, #12]
 8012738:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 801273a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801273c:	7f1b      	ldrb	r3, [r3, #28]
 801273e:	3301      	adds	r3, #1
 8012740:	b2da      	uxtb	r2, r3
 8012742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012744:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8012746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012748:	7f1a      	ldrb	r2, [r3, #28]
 801274a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801274c:	7f5b      	ldrb	r3, [r3, #29]
 801274e:	429a      	cmp	r2, r3
 8012750:	d325      	bcc.n	801279e <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 8012752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012754:	2200      	movs	r2, #0
 8012756:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8012758:	4b1f      	ldr	r3, [pc, #124]	; (80127d8 <tcp_slowtmr+0x5a4>)
 801275a:	2200      	movs	r2, #0
 801275c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 801275e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012760:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012764:	2b00      	cmp	r3, #0
 8012766:	d00b      	beq.n	8012780 <tcp_slowtmr+0x54c>
 8012768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801276a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801276e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012770:	6912      	ldr	r2, [r2, #16]
 8012772:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012774:	4610      	mov	r0, r2
 8012776:	4798      	blx	r3
 8012778:	4603      	mov	r3, r0
 801277a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801277e:	e002      	b.n	8012786 <tcp_slowtmr+0x552>
 8012780:	2300      	movs	r3, #0
 8012782:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8012786:	4b14      	ldr	r3, [pc, #80]	; (80127d8 <tcp_slowtmr+0x5a4>)
 8012788:	781b      	ldrb	r3, [r3, #0]
 801278a:	2b00      	cmp	r3, #0
 801278c:	d000      	beq.n	8012790 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 801278e:	e562      	b.n	8012256 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8012790:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8012794:	2b00      	cmp	r3, #0
 8012796:	d102      	bne.n	801279e <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8012798:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801279a:	f003 fb77 	bl	8015e8c <tcp_output>
  while (pcb != NULL) {
 801279e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127a0:	2b00      	cmp	r3, #0
 80127a2:	f47f ad5e 	bne.w	8012262 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80127a6:	2300      	movs	r3, #0
 80127a8:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 80127aa:	4b0c      	ldr	r3, [pc, #48]	; (80127dc <tcp_slowtmr+0x5a8>)
 80127ac:	681b      	ldr	r3, [r3, #0]
 80127ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80127b0:	e069      	b.n	8012886 <tcp_slowtmr+0x652>
 80127b2:	bf00      	nop
 80127b4:	2400ce6c 	.word	0x2400ce6c
 80127b8:	000a4cb8 	.word	0x000a4cb8
 80127bc:	10624dd3 	.word	0x10624dd3
 80127c0:	000124f8 	.word	0x000124f8
 80127c4:	2400ce68 	.word	0x2400ce68
 80127c8:	0801e5f0 	.word	0x0801e5f0
 80127cc:	0801ea44 	.word	0x0801ea44
 80127d0:	0801e650 	.word	0x0801e650
 80127d4:	0801ea70 	.word	0x0801ea70
 80127d8:	2400ce64 	.word	0x2400ce64
 80127dc:	2400ce78 	.word	0x2400ce78
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80127e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127e2:	7d1b      	ldrb	r3, [r3, #20]
 80127e4:	2b0a      	cmp	r3, #10
 80127e6:	d006      	beq.n	80127f6 <tcp_slowtmr+0x5c2>
 80127e8:	4b2a      	ldr	r3, [pc, #168]	; (8012894 <tcp_slowtmr+0x660>)
 80127ea:	f240 52a1 	movw	r2, #1441	; 0x5a1
 80127ee:	492a      	ldr	r1, [pc, #168]	; (8012898 <tcp_slowtmr+0x664>)
 80127f0:	482a      	ldr	r0, [pc, #168]	; (801289c <tcp_slowtmr+0x668>)
 80127f2:	f008 fc85 	bl	801b100 <iprintf>
    pcb_remove = 0;
 80127f6:	2300      	movs	r3, #0
 80127f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80127fc:	4b28      	ldr	r3, [pc, #160]	; (80128a0 <tcp_slowtmr+0x66c>)
 80127fe:	681a      	ldr	r2, [r3, #0]
 8012800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012802:	6a1b      	ldr	r3, [r3, #32]
 8012804:	1ad3      	subs	r3, r2, r3
 8012806:	2bf0      	cmp	r3, #240	; 0xf0
 8012808:	d904      	bls.n	8012814 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 801280a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801280e:	3301      	adds	r3, #1
 8012810:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8012814:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012818:	2b00      	cmp	r3, #0
 801281a:	d02f      	beq.n	801287c <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 801281c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801281e:	f000 fb27 	bl	8012e70 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8012822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012824:	2b00      	cmp	r3, #0
 8012826:	d010      	beq.n	801284a <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8012828:	4b1e      	ldr	r3, [pc, #120]	; (80128a4 <tcp_slowtmr+0x670>)
 801282a:	681b      	ldr	r3, [r3, #0]
 801282c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801282e:	429a      	cmp	r2, r3
 8012830:	d106      	bne.n	8012840 <tcp_slowtmr+0x60c>
 8012832:	4b18      	ldr	r3, [pc, #96]	; (8012894 <tcp_slowtmr+0x660>)
 8012834:	f240 52af 	movw	r2, #1455	; 0x5af
 8012838:	491b      	ldr	r1, [pc, #108]	; (80128a8 <tcp_slowtmr+0x674>)
 801283a:	4818      	ldr	r0, [pc, #96]	; (801289c <tcp_slowtmr+0x668>)
 801283c:	f008 fc60 	bl	801b100 <iprintf>
        prev->next = pcb->next;
 8012840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012842:	68da      	ldr	r2, [r3, #12]
 8012844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012846:	60da      	str	r2, [r3, #12]
 8012848:	e00f      	b.n	801286a <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 801284a:	4b16      	ldr	r3, [pc, #88]	; (80128a4 <tcp_slowtmr+0x670>)
 801284c:	681b      	ldr	r3, [r3, #0]
 801284e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012850:	429a      	cmp	r2, r3
 8012852:	d006      	beq.n	8012862 <tcp_slowtmr+0x62e>
 8012854:	4b0f      	ldr	r3, [pc, #60]	; (8012894 <tcp_slowtmr+0x660>)
 8012856:	f240 52b3 	movw	r2, #1459	; 0x5b3
 801285a:	4914      	ldr	r1, [pc, #80]	; (80128ac <tcp_slowtmr+0x678>)
 801285c:	480f      	ldr	r0, [pc, #60]	; (801289c <tcp_slowtmr+0x668>)
 801285e:	f008 fc4f 	bl	801b100 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8012862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012864:	68db      	ldr	r3, [r3, #12]
 8012866:	4a0f      	ldr	r2, [pc, #60]	; (80128a4 <tcp_slowtmr+0x670>)
 8012868:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 801286a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801286c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 801286e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012870:	68db      	ldr	r3, [r3, #12]
 8012872:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8012874:	69f8      	ldr	r0, [r7, #28]
 8012876:	f7ff f947 	bl	8011b08 <tcp_free>
 801287a:	e004      	b.n	8012886 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 801287c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801287e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8012880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012882:	68db      	ldr	r3, [r3, #12]
 8012884:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8012886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012888:	2b00      	cmp	r3, #0
 801288a:	d1a9      	bne.n	80127e0 <tcp_slowtmr+0x5ac>
    }
  }
}
 801288c:	bf00      	nop
 801288e:	3730      	adds	r7, #48	; 0x30
 8012890:	46bd      	mov	sp, r7
 8012892:	bdb0      	pop	{r4, r5, r7, pc}
 8012894:	0801e5f0 	.word	0x0801e5f0
 8012898:	0801ea9c 	.word	0x0801ea9c
 801289c:	0801e650 	.word	0x0801e650
 80128a0:	2400ce6c 	.word	0x2400ce6c
 80128a4:	2400ce78 	.word	0x2400ce78
 80128a8:	0801eacc 	.word	0x0801eacc
 80128ac:	0801eaf4 	.word	0x0801eaf4

080128b0 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80128b0:	b580      	push	{r7, lr}
 80128b2:	b082      	sub	sp, #8
 80128b4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80128b6:	4b2d      	ldr	r3, [pc, #180]	; (801296c <tcp_fasttmr+0xbc>)
 80128b8:	781b      	ldrb	r3, [r3, #0]
 80128ba:	3301      	adds	r3, #1
 80128bc:	b2da      	uxtb	r2, r3
 80128be:	4b2b      	ldr	r3, [pc, #172]	; (801296c <tcp_fasttmr+0xbc>)
 80128c0:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80128c2:	4b2b      	ldr	r3, [pc, #172]	; (8012970 <tcp_fasttmr+0xc0>)
 80128c4:	681b      	ldr	r3, [r3, #0]
 80128c6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80128c8:	e048      	b.n	801295c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	7f9a      	ldrb	r2, [r3, #30]
 80128ce:	4b27      	ldr	r3, [pc, #156]	; (801296c <tcp_fasttmr+0xbc>)
 80128d0:	781b      	ldrb	r3, [r3, #0]
 80128d2:	429a      	cmp	r2, r3
 80128d4:	d03f      	beq.n	8012956 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80128d6:	4b25      	ldr	r3, [pc, #148]	; (801296c <tcp_fasttmr+0xbc>)
 80128d8:	781a      	ldrb	r2, [r3, #0]
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	8b5b      	ldrh	r3, [r3, #26]
 80128e2:	f003 0301 	and.w	r3, r3, #1
 80128e6:	2b00      	cmp	r3, #0
 80128e8:	d010      	beq.n	801290c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	8b5b      	ldrh	r3, [r3, #26]
 80128ee:	f043 0302 	orr.w	r3, r3, #2
 80128f2:	b29a      	uxth	r2, r3
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80128f8:	6878      	ldr	r0, [r7, #4]
 80128fa:	f003 fac7 	bl	8015e8c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	8b5b      	ldrh	r3, [r3, #26]
 8012902:	f023 0303 	bic.w	r3, r3, #3
 8012906:	b29a      	uxth	r2, r3
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	8b5b      	ldrh	r3, [r3, #26]
 8012910:	f003 0308 	and.w	r3, r3, #8
 8012914:	2b00      	cmp	r3, #0
 8012916:	d009      	beq.n	801292c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	8b5b      	ldrh	r3, [r3, #26]
 801291c:	f023 0308 	bic.w	r3, r3, #8
 8012920:	b29a      	uxth	r2, r3
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8012926:	6878      	ldr	r0, [r7, #4]
 8012928:	f7ff fa7e 	bl	8011e28 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	68db      	ldr	r3, [r3, #12]
 8012930:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012936:	2b00      	cmp	r3, #0
 8012938:	d00a      	beq.n	8012950 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 801293a:	4b0e      	ldr	r3, [pc, #56]	; (8012974 <tcp_fasttmr+0xc4>)
 801293c:	2200      	movs	r2, #0
 801293e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8012940:	6878      	ldr	r0, [r7, #4]
 8012942:	f000 f819 	bl	8012978 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8012946:	4b0b      	ldr	r3, [pc, #44]	; (8012974 <tcp_fasttmr+0xc4>)
 8012948:	781b      	ldrb	r3, [r3, #0]
 801294a:	2b00      	cmp	r3, #0
 801294c:	d000      	beq.n	8012950 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 801294e:	e7b8      	b.n	80128c2 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8012950:	683b      	ldr	r3, [r7, #0]
 8012952:	607b      	str	r3, [r7, #4]
 8012954:	e002      	b.n	801295c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	68db      	ldr	r3, [r3, #12]
 801295a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	2b00      	cmp	r3, #0
 8012960:	d1b3      	bne.n	80128ca <tcp_fasttmr+0x1a>
    }
  }
}
 8012962:	bf00      	nop
 8012964:	3708      	adds	r7, #8
 8012966:	46bd      	mov	sp, r7
 8012968:	bd80      	pop	{r7, pc}
 801296a:	bf00      	nop
 801296c:	24004916 	.word	0x24004916
 8012970:	2400ce68 	.word	0x2400ce68
 8012974:	2400ce64 	.word	0x2400ce64

08012978 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8012978:	b590      	push	{r4, r7, lr}
 801297a:	b085      	sub	sp, #20
 801297c:	af00      	add	r7, sp, #0
 801297e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	2b00      	cmp	r3, #0
 8012984:	d109      	bne.n	801299a <tcp_process_refused_data+0x22>
 8012986:	4b37      	ldr	r3, [pc, #220]	; (8012a64 <tcp_process_refused_data+0xec>)
 8012988:	f240 6209 	movw	r2, #1545	; 0x609
 801298c:	4936      	ldr	r1, [pc, #216]	; (8012a68 <tcp_process_refused_data+0xf0>)
 801298e:	4837      	ldr	r0, [pc, #220]	; (8012a6c <tcp_process_refused_data+0xf4>)
 8012990:	f008 fbb6 	bl	801b100 <iprintf>
 8012994:	f06f 030f 	mvn.w	r3, #15
 8012998:	e060      	b.n	8012a5c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801299e:	7b5b      	ldrb	r3, [r3, #13]
 80129a0:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80129a6:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	2200      	movs	r2, #0
 80129ac:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80129b4:	2b00      	cmp	r3, #0
 80129b6:	d00b      	beq.n	80129d0 <tcp_process_refused_data+0x58>
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	6918      	ldr	r0, [r3, #16]
 80129c2:	2300      	movs	r3, #0
 80129c4:	68ba      	ldr	r2, [r7, #8]
 80129c6:	6879      	ldr	r1, [r7, #4]
 80129c8:	47a0      	blx	r4
 80129ca:	4603      	mov	r3, r0
 80129cc:	73fb      	strb	r3, [r7, #15]
 80129ce:	e007      	b.n	80129e0 <tcp_process_refused_data+0x68>
 80129d0:	2300      	movs	r3, #0
 80129d2:	68ba      	ldr	r2, [r7, #8]
 80129d4:	6879      	ldr	r1, [r7, #4]
 80129d6:	2000      	movs	r0, #0
 80129d8:	f000 f8a2 	bl	8012b20 <tcp_recv_null>
 80129dc:	4603      	mov	r3, r0
 80129de:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80129e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80129e4:	2b00      	cmp	r3, #0
 80129e6:	d12a      	bne.n	8012a3e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80129e8:	7bbb      	ldrb	r3, [r7, #14]
 80129ea:	f003 0320 	and.w	r3, r3, #32
 80129ee:	2b00      	cmp	r3, #0
 80129f0:	d033      	beq.n	8012a5a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80129f6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80129fa:	d005      	beq.n	8012a08 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012a00:	3301      	adds	r3, #1
 8012a02:	b29a      	uxth	r2, r3
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012a0e:	2b00      	cmp	r3, #0
 8012a10:	d00b      	beq.n	8012a2a <tcp_process_refused_data+0xb2>
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	6918      	ldr	r0, [r3, #16]
 8012a1c:	2300      	movs	r3, #0
 8012a1e:	2200      	movs	r2, #0
 8012a20:	6879      	ldr	r1, [r7, #4]
 8012a22:	47a0      	blx	r4
 8012a24:	4603      	mov	r3, r0
 8012a26:	73fb      	strb	r3, [r7, #15]
 8012a28:	e001      	b.n	8012a2e <tcp_process_refused_data+0xb6>
 8012a2a:	2300      	movs	r3, #0
 8012a2c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8012a2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012a32:	f113 0f0d 	cmn.w	r3, #13
 8012a36:	d110      	bne.n	8012a5a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8012a38:	f06f 030c 	mvn.w	r3, #12
 8012a3c:	e00e      	b.n	8012a5c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8012a3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012a42:	f113 0f0d 	cmn.w	r3, #13
 8012a46:	d102      	bne.n	8012a4e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8012a48:	f06f 030c 	mvn.w	r3, #12
 8012a4c:	e006      	b.n	8012a5c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	68ba      	ldr	r2, [r7, #8]
 8012a52:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8012a54:	f06f 0304 	mvn.w	r3, #4
 8012a58:	e000      	b.n	8012a5c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8012a5a:	2300      	movs	r3, #0
}
 8012a5c:	4618      	mov	r0, r3
 8012a5e:	3714      	adds	r7, #20
 8012a60:	46bd      	mov	sp, r7
 8012a62:	bd90      	pop	{r4, r7, pc}
 8012a64:	0801e5f0 	.word	0x0801e5f0
 8012a68:	0801eb1c 	.word	0x0801eb1c
 8012a6c:	0801e650 	.word	0x0801e650

08012a70 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8012a70:	b580      	push	{r7, lr}
 8012a72:	b084      	sub	sp, #16
 8012a74:	af00      	add	r7, sp, #0
 8012a76:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8012a78:	e007      	b.n	8012a8a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	681b      	ldr	r3, [r3, #0]
 8012a7e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8012a80:	6878      	ldr	r0, [r7, #4]
 8012a82:	f000 f809 	bl	8012a98 <tcp_seg_free>
    seg = next;
 8012a86:	68fb      	ldr	r3, [r7, #12]
 8012a88:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	2b00      	cmp	r3, #0
 8012a8e:	d1f4      	bne.n	8012a7a <tcp_segs_free+0xa>
  }
}
 8012a90:	bf00      	nop
 8012a92:	3710      	adds	r7, #16
 8012a94:	46bd      	mov	sp, r7
 8012a96:	bd80      	pop	{r7, pc}

08012a98 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8012a98:	b580      	push	{r7, lr}
 8012a9a:	b082      	sub	sp, #8
 8012a9c:	af00      	add	r7, sp, #0
 8012a9e:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	2b00      	cmp	r3, #0
 8012aa4:	d00c      	beq.n	8012ac0 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	685b      	ldr	r3, [r3, #4]
 8012aaa:	2b00      	cmp	r3, #0
 8012aac:	d004      	beq.n	8012ab8 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	685b      	ldr	r3, [r3, #4]
 8012ab2:	4618      	mov	r0, r3
 8012ab4:	f7fe fc66 	bl	8011384 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8012ab8:	6879      	ldr	r1, [r7, #4]
 8012aba:	2003      	movs	r0, #3
 8012abc:	f7fd fdc2 	bl	8010644 <memp_free>
  }
}
 8012ac0:	bf00      	nop
 8012ac2:	3708      	adds	r7, #8
 8012ac4:	46bd      	mov	sp, r7
 8012ac6:	bd80      	pop	{r7, pc}

08012ac8 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8012ac8:	b580      	push	{r7, lr}
 8012aca:	b084      	sub	sp, #16
 8012acc:	af00      	add	r7, sp, #0
 8012ace:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	2b00      	cmp	r3, #0
 8012ad4:	d106      	bne.n	8012ae4 <tcp_seg_copy+0x1c>
 8012ad6:	4b0f      	ldr	r3, [pc, #60]	; (8012b14 <tcp_seg_copy+0x4c>)
 8012ad8:	f240 6282 	movw	r2, #1666	; 0x682
 8012adc:	490e      	ldr	r1, [pc, #56]	; (8012b18 <tcp_seg_copy+0x50>)
 8012ade:	480f      	ldr	r0, [pc, #60]	; (8012b1c <tcp_seg_copy+0x54>)
 8012ae0:	f008 fb0e 	bl	801b100 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8012ae4:	2003      	movs	r0, #3
 8012ae6:	f7fd fd37 	bl	8010558 <memp_malloc>
 8012aea:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8012aec:	68fb      	ldr	r3, [r7, #12]
 8012aee:	2b00      	cmp	r3, #0
 8012af0:	d101      	bne.n	8012af6 <tcp_seg_copy+0x2e>
    return NULL;
 8012af2:	2300      	movs	r3, #0
 8012af4:	e00a      	b.n	8012b0c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8012af6:	2210      	movs	r2, #16
 8012af8:	6879      	ldr	r1, [r7, #4]
 8012afa:	68f8      	ldr	r0, [r7, #12]
 8012afc:	f007 fe9b 	bl	801a836 <memcpy>
  pbuf_ref(cseg->p);
 8012b00:	68fb      	ldr	r3, [r7, #12]
 8012b02:	685b      	ldr	r3, [r3, #4]
 8012b04:	4618      	mov	r0, r3
 8012b06:	f7fe fce3 	bl	80114d0 <pbuf_ref>
  return cseg;
 8012b0a:	68fb      	ldr	r3, [r7, #12]
}
 8012b0c:	4618      	mov	r0, r3
 8012b0e:	3710      	adds	r7, #16
 8012b10:	46bd      	mov	sp, r7
 8012b12:	bd80      	pop	{r7, pc}
 8012b14:	0801e5f0 	.word	0x0801e5f0
 8012b18:	0801eb60 	.word	0x0801eb60
 8012b1c:	0801e650 	.word	0x0801e650

08012b20 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8012b20:	b580      	push	{r7, lr}
 8012b22:	b084      	sub	sp, #16
 8012b24:	af00      	add	r7, sp, #0
 8012b26:	60f8      	str	r0, [r7, #12]
 8012b28:	60b9      	str	r1, [r7, #8]
 8012b2a:	607a      	str	r2, [r7, #4]
 8012b2c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8012b2e:	68bb      	ldr	r3, [r7, #8]
 8012b30:	2b00      	cmp	r3, #0
 8012b32:	d109      	bne.n	8012b48 <tcp_recv_null+0x28>
 8012b34:	4b12      	ldr	r3, [pc, #72]	; (8012b80 <tcp_recv_null+0x60>)
 8012b36:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8012b3a:	4912      	ldr	r1, [pc, #72]	; (8012b84 <tcp_recv_null+0x64>)
 8012b3c:	4812      	ldr	r0, [pc, #72]	; (8012b88 <tcp_recv_null+0x68>)
 8012b3e:	f008 fadf 	bl	801b100 <iprintf>
 8012b42:	f06f 030f 	mvn.w	r3, #15
 8012b46:	e016      	b.n	8012b76 <tcp_recv_null+0x56>

  if (p != NULL) {
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	2b00      	cmp	r3, #0
 8012b4c:	d009      	beq.n	8012b62 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	891b      	ldrh	r3, [r3, #8]
 8012b52:	4619      	mov	r1, r3
 8012b54:	68b8      	ldr	r0, [r7, #8]
 8012b56:	f7ff fb1d 	bl	8012194 <tcp_recved>
    pbuf_free(p);
 8012b5a:	6878      	ldr	r0, [r7, #4]
 8012b5c:	f7fe fc12 	bl	8011384 <pbuf_free>
 8012b60:	e008      	b.n	8012b74 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8012b62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012b66:	2b00      	cmp	r3, #0
 8012b68:	d104      	bne.n	8012b74 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8012b6a:	68b8      	ldr	r0, [r7, #8]
 8012b6c:	f7ff f9c2 	bl	8011ef4 <tcp_close>
 8012b70:	4603      	mov	r3, r0
 8012b72:	e000      	b.n	8012b76 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8012b74:	2300      	movs	r3, #0
}
 8012b76:	4618      	mov	r0, r3
 8012b78:	3710      	adds	r7, #16
 8012b7a:	46bd      	mov	sp, r7
 8012b7c:	bd80      	pop	{r7, pc}
 8012b7e:	bf00      	nop
 8012b80:	0801e5f0 	.word	0x0801e5f0
 8012b84:	0801eb7c 	.word	0x0801eb7c
 8012b88:	0801e650 	.word	0x0801e650

08012b8c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8012b8c:	b580      	push	{r7, lr}
 8012b8e:	b086      	sub	sp, #24
 8012b90:	af00      	add	r7, sp, #0
 8012b92:	4603      	mov	r3, r0
 8012b94:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8012b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012b9a:	2b00      	cmp	r3, #0
 8012b9c:	db01      	blt.n	8012ba2 <tcp_kill_prio+0x16>
 8012b9e:	79fb      	ldrb	r3, [r7, #7]
 8012ba0:	e000      	b.n	8012ba4 <tcp_kill_prio+0x18>
 8012ba2:	237f      	movs	r3, #127	; 0x7f
 8012ba4:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8012ba6:	7afb      	ldrb	r3, [r7, #11]
 8012ba8:	2b00      	cmp	r3, #0
 8012baa:	d034      	beq.n	8012c16 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8012bac:	7afb      	ldrb	r3, [r7, #11]
 8012bae:	3b01      	subs	r3, #1
 8012bb0:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8012bb2:	2300      	movs	r3, #0
 8012bb4:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8012bb6:	2300      	movs	r3, #0
 8012bb8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012bba:	4b19      	ldr	r3, [pc, #100]	; (8012c20 <tcp_kill_prio+0x94>)
 8012bbc:	681b      	ldr	r3, [r3, #0]
 8012bbe:	617b      	str	r3, [r7, #20]
 8012bc0:	e01f      	b.n	8012c02 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8012bc2:	697b      	ldr	r3, [r7, #20]
 8012bc4:	7d5b      	ldrb	r3, [r3, #21]
 8012bc6:	7afa      	ldrb	r2, [r7, #11]
 8012bc8:	429a      	cmp	r2, r3
 8012bca:	d80c      	bhi.n	8012be6 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8012bcc:	697b      	ldr	r3, [r7, #20]
 8012bce:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8012bd0:	7afa      	ldrb	r2, [r7, #11]
 8012bd2:	429a      	cmp	r2, r3
 8012bd4:	d112      	bne.n	8012bfc <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8012bd6:	4b13      	ldr	r3, [pc, #76]	; (8012c24 <tcp_kill_prio+0x98>)
 8012bd8:	681a      	ldr	r2, [r3, #0]
 8012bda:	697b      	ldr	r3, [r7, #20]
 8012bdc:	6a1b      	ldr	r3, [r3, #32]
 8012bde:	1ad3      	subs	r3, r2, r3
 8012be0:	68fa      	ldr	r2, [r7, #12]
 8012be2:	429a      	cmp	r2, r3
 8012be4:	d80a      	bhi.n	8012bfc <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8012be6:	4b0f      	ldr	r3, [pc, #60]	; (8012c24 <tcp_kill_prio+0x98>)
 8012be8:	681a      	ldr	r2, [r3, #0]
 8012bea:	697b      	ldr	r3, [r7, #20]
 8012bec:	6a1b      	ldr	r3, [r3, #32]
 8012bee:	1ad3      	subs	r3, r2, r3
 8012bf0:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8012bf2:	697b      	ldr	r3, [r7, #20]
 8012bf4:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8012bf6:	697b      	ldr	r3, [r7, #20]
 8012bf8:	7d5b      	ldrb	r3, [r3, #21]
 8012bfa:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012bfc:	697b      	ldr	r3, [r7, #20]
 8012bfe:	68db      	ldr	r3, [r3, #12]
 8012c00:	617b      	str	r3, [r7, #20]
 8012c02:	697b      	ldr	r3, [r7, #20]
 8012c04:	2b00      	cmp	r3, #0
 8012c06:	d1dc      	bne.n	8012bc2 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8012c08:	693b      	ldr	r3, [r7, #16]
 8012c0a:	2b00      	cmp	r3, #0
 8012c0c:	d004      	beq.n	8012c18 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8012c0e:	6938      	ldr	r0, [r7, #16]
 8012c10:	f7ff fa5a 	bl	80120c8 <tcp_abort>
 8012c14:	e000      	b.n	8012c18 <tcp_kill_prio+0x8c>
    return;
 8012c16:	bf00      	nop
  }
}
 8012c18:	3718      	adds	r7, #24
 8012c1a:	46bd      	mov	sp, r7
 8012c1c:	bd80      	pop	{r7, pc}
 8012c1e:	bf00      	nop
 8012c20:	2400ce68 	.word	0x2400ce68
 8012c24:	2400ce6c 	.word	0x2400ce6c

08012c28 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8012c28:	b580      	push	{r7, lr}
 8012c2a:	b086      	sub	sp, #24
 8012c2c:	af00      	add	r7, sp, #0
 8012c2e:	4603      	mov	r3, r0
 8012c30:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8012c32:	79fb      	ldrb	r3, [r7, #7]
 8012c34:	2b08      	cmp	r3, #8
 8012c36:	d009      	beq.n	8012c4c <tcp_kill_state+0x24>
 8012c38:	79fb      	ldrb	r3, [r7, #7]
 8012c3a:	2b09      	cmp	r3, #9
 8012c3c:	d006      	beq.n	8012c4c <tcp_kill_state+0x24>
 8012c3e:	4b1a      	ldr	r3, [pc, #104]	; (8012ca8 <tcp_kill_state+0x80>)
 8012c40:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8012c44:	4919      	ldr	r1, [pc, #100]	; (8012cac <tcp_kill_state+0x84>)
 8012c46:	481a      	ldr	r0, [pc, #104]	; (8012cb0 <tcp_kill_state+0x88>)
 8012c48:	f008 fa5a 	bl	801b100 <iprintf>

  inactivity = 0;
 8012c4c:	2300      	movs	r3, #0
 8012c4e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8012c50:	2300      	movs	r3, #0
 8012c52:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012c54:	4b17      	ldr	r3, [pc, #92]	; (8012cb4 <tcp_kill_state+0x8c>)
 8012c56:	681b      	ldr	r3, [r3, #0]
 8012c58:	617b      	str	r3, [r7, #20]
 8012c5a:	e017      	b.n	8012c8c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8012c5c:	697b      	ldr	r3, [r7, #20]
 8012c5e:	7d1b      	ldrb	r3, [r3, #20]
 8012c60:	79fa      	ldrb	r2, [r7, #7]
 8012c62:	429a      	cmp	r2, r3
 8012c64:	d10f      	bne.n	8012c86 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8012c66:	4b14      	ldr	r3, [pc, #80]	; (8012cb8 <tcp_kill_state+0x90>)
 8012c68:	681a      	ldr	r2, [r3, #0]
 8012c6a:	697b      	ldr	r3, [r7, #20]
 8012c6c:	6a1b      	ldr	r3, [r3, #32]
 8012c6e:	1ad3      	subs	r3, r2, r3
 8012c70:	68fa      	ldr	r2, [r7, #12]
 8012c72:	429a      	cmp	r2, r3
 8012c74:	d807      	bhi.n	8012c86 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8012c76:	4b10      	ldr	r3, [pc, #64]	; (8012cb8 <tcp_kill_state+0x90>)
 8012c78:	681a      	ldr	r2, [r3, #0]
 8012c7a:	697b      	ldr	r3, [r7, #20]
 8012c7c:	6a1b      	ldr	r3, [r3, #32]
 8012c7e:	1ad3      	subs	r3, r2, r3
 8012c80:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8012c82:	697b      	ldr	r3, [r7, #20]
 8012c84:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012c86:	697b      	ldr	r3, [r7, #20]
 8012c88:	68db      	ldr	r3, [r3, #12]
 8012c8a:	617b      	str	r3, [r7, #20]
 8012c8c:	697b      	ldr	r3, [r7, #20]
 8012c8e:	2b00      	cmp	r3, #0
 8012c90:	d1e4      	bne.n	8012c5c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8012c92:	693b      	ldr	r3, [r7, #16]
 8012c94:	2b00      	cmp	r3, #0
 8012c96:	d003      	beq.n	8012ca0 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8012c98:	2100      	movs	r1, #0
 8012c9a:	6938      	ldr	r0, [r7, #16]
 8012c9c:	f7ff f956 	bl	8011f4c <tcp_abandon>
  }
}
 8012ca0:	bf00      	nop
 8012ca2:	3718      	adds	r7, #24
 8012ca4:	46bd      	mov	sp, r7
 8012ca6:	bd80      	pop	{r7, pc}
 8012ca8:	0801e5f0 	.word	0x0801e5f0
 8012cac:	0801eb98 	.word	0x0801eb98
 8012cb0:	0801e650 	.word	0x0801e650
 8012cb4:	2400ce68 	.word	0x2400ce68
 8012cb8:	2400ce6c 	.word	0x2400ce6c

08012cbc <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8012cbc:	b580      	push	{r7, lr}
 8012cbe:	b084      	sub	sp, #16
 8012cc0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8012cc2:	2300      	movs	r3, #0
 8012cc4:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8012cc6:	2300      	movs	r3, #0
 8012cc8:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012cca:	4b12      	ldr	r3, [pc, #72]	; (8012d14 <tcp_kill_timewait+0x58>)
 8012ccc:	681b      	ldr	r3, [r3, #0]
 8012cce:	60fb      	str	r3, [r7, #12]
 8012cd0:	e012      	b.n	8012cf8 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8012cd2:	4b11      	ldr	r3, [pc, #68]	; (8012d18 <tcp_kill_timewait+0x5c>)
 8012cd4:	681a      	ldr	r2, [r3, #0]
 8012cd6:	68fb      	ldr	r3, [r7, #12]
 8012cd8:	6a1b      	ldr	r3, [r3, #32]
 8012cda:	1ad3      	subs	r3, r2, r3
 8012cdc:	687a      	ldr	r2, [r7, #4]
 8012cde:	429a      	cmp	r2, r3
 8012ce0:	d807      	bhi.n	8012cf2 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8012ce2:	4b0d      	ldr	r3, [pc, #52]	; (8012d18 <tcp_kill_timewait+0x5c>)
 8012ce4:	681a      	ldr	r2, [r3, #0]
 8012ce6:	68fb      	ldr	r3, [r7, #12]
 8012ce8:	6a1b      	ldr	r3, [r3, #32]
 8012cea:	1ad3      	subs	r3, r2, r3
 8012cec:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8012cee:	68fb      	ldr	r3, [r7, #12]
 8012cf0:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012cf2:	68fb      	ldr	r3, [r7, #12]
 8012cf4:	68db      	ldr	r3, [r3, #12]
 8012cf6:	60fb      	str	r3, [r7, #12]
 8012cf8:	68fb      	ldr	r3, [r7, #12]
 8012cfa:	2b00      	cmp	r3, #0
 8012cfc:	d1e9      	bne.n	8012cd2 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8012cfe:	68bb      	ldr	r3, [r7, #8]
 8012d00:	2b00      	cmp	r3, #0
 8012d02:	d002      	beq.n	8012d0a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8012d04:	68b8      	ldr	r0, [r7, #8]
 8012d06:	f7ff f9df 	bl	80120c8 <tcp_abort>
  }
}
 8012d0a:	bf00      	nop
 8012d0c:	3710      	adds	r7, #16
 8012d0e:	46bd      	mov	sp, r7
 8012d10:	bd80      	pop	{r7, pc}
 8012d12:	bf00      	nop
 8012d14:	2400ce78 	.word	0x2400ce78
 8012d18:	2400ce6c 	.word	0x2400ce6c

08012d1c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8012d1c:	b580      	push	{r7, lr}
 8012d1e:	b082      	sub	sp, #8
 8012d20:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8012d22:	4b10      	ldr	r3, [pc, #64]	; (8012d64 <tcp_handle_closepend+0x48>)
 8012d24:	681b      	ldr	r3, [r3, #0]
 8012d26:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8012d28:	e014      	b.n	8012d54 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	68db      	ldr	r3, [r3, #12]
 8012d2e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8012d30:	687b      	ldr	r3, [r7, #4]
 8012d32:	8b5b      	ldrh	r3, [r3, #26]
 8012d34:	f003 0308 	and.w	r3, r3, #8
 8012d38:	2b00      	cmp	r3, #0
 8012d3a:	d009      	beq.n	8012d50 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	8b5b      	ldrh	r3, [r3, #26]
 8012d40:	f023 0308 	bic.w	r3, r3, #8
 8012d44:	b29a      	uxth	r2, r3
 8012d46:	687b      	ldr	r3, [r7, #4]
 8012d48:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8012d4a:	6878      	ldr	r0, [r7, #4]
 8012d4c:	f7ff f86c 	bl	8011e28 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8012d50:	683b      	ldr	r3, [r7, #0]
 8012d52:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	2b00      	cmp	r3, #0
 8012d58:	d1e7      	bne.n	8012d2a <tcp_handle_closepend+0xe>
  }
}
 8012d5a:	bf00      	nop
 8012d5c:	3708      	adds	r7, #8
 8012d5e:	46bd      	mov	sp, r7
 8012d60:	bd80      	pop	{r7, pc}
 8012d62:	bf00      	nop
 8012d64:	2400ce68 	.word	0x2400ce68

08012d68 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8012d68:	b580      	push	{r7, lr}
 8012d6a:	b084      	sub	sp, #16
 8012d6c:	af00      	add	r7, sp, #0
 8012d6e:	4603      	mov	r3, r0
 8012d70:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012d72:	2001      	movs	r0, #1
 8012d74:	f7fd fbf0 	bl	8010558 <memp_malloc>
 8012d78:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8012d7a:	68fb      	ldr	r3, [r7, #12]
 8012d7c:	2b00      	cmp	r3, #0
 8012d7e:	d126      	bne.n	8012dce <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8012d80:	f7ff ffcc 	bl	8012d1c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8012d84:	f7ff ff9a 	bl	8012cbc <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012d88:	2001      	movs	r0, #1
 8012d8a:	f7fd fbe5 	bl	8010558 <memp_malloc>
 8012d8e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8012d90:	68fb      	ldr	r3, [r7, #12]
 8012d92:	2b00      	cmp	r3, #0
 8012d94:	d11b      	bne.n	8012dce <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8012d96:	2009      	movs	r0, #9
 8012d98:	f7ff ff46 	bl	8012c28 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012d9c:	2001      	movs	r0, #1
 8012d9e:	f7fd fbdb 	bl	8010558 <memp_malloc>
 8012da2:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8012da4:	68fb      	ldr	r3, [r7, #12]
 8012da6:	2b00      	cmp	r3, #0
 8012da8:	d111      	bne.n	8012dce <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8012daa:	2008      	movs	r0, #8
 8012dac:	f7ff ff3c 	bl	8012c28 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012db0:	2001      	movs	r0, #1
 8012db2:	f7fd fbd1 	bl	8010558 <memp_malloc>
 8012db6:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8012db8:	68fb      	ldr	r3, [r7, #12]
 8012dba:	2b00      	cmp	r3, #0
 8012dbc:	d107      	bne.n	8012dce <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8012dbe:	79fb      	ldrb	r3, [r7, #7]
 8012dc0:	4618      	mov	r0, r3
 8012dc2:	f7ff fee3 	bl	8012b8c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012dc6:	2001      	movs	r0, #1
 8012dc8:	f7fd fbc6 	bl	8010558 <memp_malloc>
 8012dcc:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8012dce:	68fb      	ldr	r3, [r7, #12]
 8012dd0:	2b00      	cmp	r3, #0
 8012dd2:	d03f      	beq.n	8012e54 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8012dd4:	229c      	movs	r2, #156	; 0x9c
 8012dd6:	2100      	movs	r1, #0
 8012dd8:	68f8      	ldr	r0, [r7, #12]
 8012dda:	f007 fd50 	bl	801a87e <memset>
    pcb->prio = prio;
 8012dde:	68fb      	ldr	r3, [r7, #12]
 8012de0:	79fa      	ldrb	r2, [r7, #7]
 8012de2:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8012de4:	68fb      	ldr	r3, [r7, #12]
 8012de6:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8012dea:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8012dee:	68fb      	ldr	r3, [r7, #12]
 8012df0:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8012df4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8012df6:	68fb      	ldr	r3, [r7, #12]
 8012df8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8012dfa:	68fb      	ldr	r3, [r7, #12]
 8012dfc:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8012dfe:	68fb      	ldr	r3, [r7, #12]
 8012e00:	22ff      	movs	r2, #255	; 0xff
 8012e02:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8012e04:	68fb      	ldr	r3, [r7, #12]
 8012e06:	f44f 7206 	mov.w	r2, #536	; 0x218
 8012e0a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8012e0c:	68fb      	ldr	r3, [r7, #12]
 8012e0e:	2206      	movs	r2, #6
 8012e10:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8012e14:	68fb      	ldr	r3, [r7, #12]
 8012e16:	2206      	movs	r2, #6
 8012e18:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8012e1a:	68fb      	ldr	r3, [r7, #12]
 8012e1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012e20:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8012e22:	68fb      	ldr	r3, [r7, #12]
 8012e24:	2201      	movs	r2, #1
 8012e26:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8012e2a:	4b0d      	ldr	r3, [pc, #52]	; (8012e60 <tcp_alloc+0xf8>)
 8012e2c:	681a      	ldr	r2, [r3, #0]
 8012e2e:	68fb      	ldr	r3, [r7, #12]
 8012e30:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8012e32:	4b0c      	ldr	r3, [pc, #48]	; (8012e64 <tcp_alloc+0xfc>)
 8012e34:	781a      	ldrb	r2, [r3, #0]
 8012e36:	68fb      	ldr	r3, [r7, #12]
 8012e38:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8012e3a:	68fb      	ldr	r3, [r7, #12]
 8012e3c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8012e40:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8012e44:	68fb      	ldr	r3, [r7, #12]
 8012e46:	4a08      	ldr	r2, [pc, #32]	; (8012e68 <tcp_alloc+0x100>)
 8012e48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8012e4c:	68fb      	ldr	r3, [r7, #12]
 8012e4e:	4a07      	ldr	r2, [pc, #28]	; (8012e6c <tcp_alloc+0x104>)
 8012e50:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8012e54:	68fb      	ldr	r3, [r7, #12]
}
 8012e56:	4618      	mov	r0, r3
 8012e58:	3710      	adds	r7, #16
 8012e5a:	46bd      	mov	sp, r7
 8012e5c:	bd80      	pop	{r7, pc}
 8012e5e:	bf00      	nop
 8012e60:	2400ce6c 	.word	0x2400ce6c
 8012e64:	24004916 	.word	0x24004916
 8012e68:	08012b21 	.word	0x08012b21
 8012e6c:	006ddd00 	.word	0x006ddd00

08012e70 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8012e70:	b580      	push	{r7, lr}
 8012e72:	b082      	sub	sp, #8
 8012e74:	af00      	add	r7, sp, #0
 8012e76:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	2b00      	cmp	r3, #0
 8012e7c:	d107      	bne.n	8012e8e <tcp_pcb_purge+0x1e>
 8012e7e:	4b21      	ldr	r3, [pc, #132]	; (8012f04 <tcp_pcb_purge+0x94>)
 8012e80:	f640 0251 	movw	r2, #2129	; 0x851
 8012e84:	4920      	ldr	r1, [pc, #128]	; (8012f08 <tcp_pcb_purge+0x98>)
 8012e86:	4821      	ldr	r0, [pc, #132]	; (8012f0c <tcp_pcb_purge+0x9c>)
 8012e88:	f008 f93a 	bl	801b100 <iprintf>
 8012e8c:	e037      	b.n	8012efe <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8012e8e:	687b      	ldr	r3, [r7, #4]
 8012e90:	7d1b      	ldrb	r3, [r3, #20]
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	d033      	beq.n	8012efe <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8012e96:	687b      	ldr	r3, [r7, #4]
 8012e98:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8012e9a:	2b0a      	cmp	r3, #10
 8012e9c:	d02f      	beq.n	8012efe <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8012e9e:	687b      	ldr	r3, [r7, #4]
 8012ea0:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8012ea2:	2b01      	cmp	r3, #1
 8012ea4:	d02b      	beq.n	8012efe <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012eaa:	2b00      	cmp	r3, #0
 8012eac:	d007      	beq.n	8012ebe <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012eb2:	4618      	mov	r0, r3
 8012eb4:	f7fe fa66 	bl	8011384 <pbuf_free>
      pcb->refused_data = NULL;
 8012eb8:	687b      	ldr	r3, [r7, #4]
 8012eba:	2200      	movs	r2, #0
 8012ebc:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012ec2:	2b00      	cmp	r3, #0
 8012ec4:	d002      	beq.n	8012ecc <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8012ec6:	6878      	ldr	r0, [r7, #4]
 8012ec8:	f000 f986 	bl	80131d8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8012ecc:	687b      	ldr	r3, [r7, #4]
 8012ece:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012ed2:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8012ed4:	687b      	ldr	r3, [r7, #4]
 8012ed6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012ed8:	4618      	mov	r0, r3
 8012eda:	f7ff fdc9 	bl	8012a70 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8012ede:	687b      	ldr	r3, [r7, #4]
 8012ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012ee2:	4618      	mov	r0, r3
 8012ee4:	f7ff fdc4 	bl	8012a70 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8012ee8:	687b      	ldr	r3, [r7, #4]
 8012eea:	2200      	movs	r2, #0
 8012eec:	66da      	str	r2, [r3, #108]	; 0x6c
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8012ef2:	687b      	ldr	r3, [r7, #4]
 8012ef4:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8012ef6:	687b      	ldr	r3, [r7, #4]
 8012ef8:	2200      	movs	r2, #0
 8012efa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8012efe:	3708      	adds	r7, #8
 8012f00:	46bd      	mov	sp, r7
 8012f02:	bd80      	pop	{r7, pc}
 8012f04:	0801e5f0 	.word	0x0801e5f0
 8012f08:	0801ec58 	.word	0x0801ec58
 8012f0c:	0801e650 	.word	0x0801e650

08012f10 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8012f10:	b580      	push	{r7, lr}
 8012f12:	b084      	sub	sp, #16
 8012f14:	af00      	add	r7, sp, #0
 8012f16:	6078      	str	r0, [r7, #4]
 8012f18:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8012f1a:	683b      	ldr	r3, [r7, #0]
 8012f1c:	2b00      	cmp	r3, #0
 8012f1e:	d106      	bne.n	8012f2e <tcp_pcb_remove+0x1e>
 8012f20:	4b3e      	ldr	r3, [pc, #248]	; (801301c <tcp_pcb_remove+0x10c>)
 8012f22:	f640 0283 	movw	r2, #2179	; 0x883
 8012f26:	493e      	ldr	r1, [pc, #248]	; (8013020 <tcp_pcb_remove+0x110>)
 8012f28:	483e      	ldr	r0, [pc, #248]	; (8013024 <tcp_pcb_remove+0x114>)
 8012f2a:	f008 f8e9 	bl	801b100 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8012f2e:	687b      	ldr	r3, [r7, #4]
 8012f30:	2b00      	cmp	r3, #0
 8012f32:	d106      	bne.n	8012f42 <tcp_pcb_remove+0x32>
 8012f34:	4b39      	ldr	r3, [pc, #228]	; (801301c <tcp_pcb_remove+0x10c>)
 8012f36:	f640 0284 	movw	r2, #2180	; 0x884
 8012f3a:	493b      	ldr	r1, [pc, #236]	; (8013028 <tcp_pcb_remove+0x118>)
 8012f3c:	4839      	ldr	r0, [pc, #228]	; (8013024 <tcp_pcb_remove+0x114>)
 8012f3e:	f008 f8df 	bl	801b100 <iprintf>

  TCP_RMV(pcblist, pcb);
 8012f42:	687b      	ldr	r3, [r7, #4]
 8012f44:	681b      	ldr	r3, [r3, #0]
 8012f46:	683a      	ldr	r2, [r7, #0]
 8012f48:	429a      	cmp	r2, r3
 8012f4a:	d105      	bne.n	8012f58 <tcp_pcb_remove+0x48>
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	681b      	ldr	r3, [r3, #0]
 8012f50:	68da      	ldr	r2, [r3, #12]
 8012f52:	687b      	ldr	r3, [r7, #4]
 8012f54:	601a      	str	r2, [r3, #0]
 8012f56:	e013      	b.n	8012f80 <tcp_pcb_remove+0x70>
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	681b      	ldr	r3, [r3, #0]
 8012f5c:	60fb      	str	r3, [r7, #12]
 8012f5e:	e00c      	b.n	8012f7a <tcp_pcb_remove+0x6a>
 8012f60:	68fb      	ldr	r3, [r7, #12]
 8012f62:	68db      	ldr	r3, [r3, #12]
 8012f64:	683a      	ldr	r2, [r7, #0]
 8012f66:	429a      	cmp	r2, r3
 8012f68:	d104      	bne.n	8012f74 <tcp_pcb_remove+0x64>
 8012f6a:	683b      	ldr	r3, [r7, #0]
 8012f6c:	68da      	ldr	r2, [r3, #12]
 8012f6e:	68fb      	ldr	r3, [r7, #12]
 8012f70:	60da      	str	r2, [r3, #12]
 8012f72:	e005      	b.n	8012f80 <tcp_pcb_remove+0x70>
 8012f74:	68fb      	ldr	r3, [r7, #12]
 8012f76:	68db      	ldr	r3, [r3, #12]
 8012f78:	60fb      	str	r3, [r7, #12]
 8012f7a:	68fb      	ldr	r3, [r7, #12]
 8012f7c:	2b00      	cmp	r3, #0
 8012f7e:	d1ef      	bne.n	8012f60 <tcp_pcb_remove+0x50>
 8012f80:	683b      	ldr	r3, [r7, #0]
 8012f82:	2200      	movs	r2, #0
 8012f84:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8012f86:	6838      	ldr	r0, [r7, #0]
 8012f88:	f7ff ff72 	bl	8012e70 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8012f8c:	683b      	ldr	r3, [r7, #0]
 8012f8e:	7d1b      	ldrb	r3, [r3, #20]
 8012f90:	2b0a      	cmp	r3, #10
 8012f92:	d013      	beq.n	8012fbc <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8012f94:	683b      	ldr	r3, [r7, #0]
 8012f96:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8012f98:	2b01      	cmp	r3, #1
 8012f9a:	d00f      	beq.n	8012fbc <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8012f9c:	683b      	ldr	r3, [r7, #0]
 8012f9e:	8b5b      	ldrh	r3, [r3, #26]
 8012fa0:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8012fa4:	2b00      	cmp	r3, #0
 8012fa6:	d009      	beq.n	8012fbc <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8012fa8:	683b      	ldr	r3, [r7, #0]
 8012faa:	8b5b      	ldrh	r3, [r3, #26]
 8012fac:	f043 0302 	orr.w	r3, r3, #2
 8012fb0:	b29a      	uxth	r2, r3
 8012fb2:	683b      	ldr	r3, [r7, #0]
 8012fb4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8012fb6:	6838      	ldr	r0, [r7, #0]
 8012fb8:	f002 ff68 	bl	8015e8c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8012fbc:	683b      	ldr	r3, [r7, #0]
 8012fbe:	7d1b      	ldrb	r3, [r3, #20]
 8012fc0:	2b01      	cmp	r3, #1
 8012fc2:	d020      	beq.n	8013006 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8012fc4:	683b      	ldr	r3, [r7, #0]
 8012fc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012fc8:	2b00      	cmp	r3, #0
 8012fca:	d006      	beq.n	8012fda <tcp_pcb_remove+0xca>
 8012fcc:	4b13      	ldr	r3, [pc, #76]	; (801301c <tcp_pcb_remove+0x10c>)
 8012fce:	f640 0293 	movw	r2, #2195	; 0x893
 8012fd2:	4916      	ldr	r1, [pc, #88]	; (801302c <tcp_pcb_remove+0x11c>)
 8012fd4:	4813      	ldr	r0, [pc, #76]	; (8013024 <tcp_pcb_remove+0x114>)
 8012fd6:	f008 f893 	bl	801b100 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8012fda:	683b      	ldr	r3, [r7, #0]
 8012fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012fde:	2b00      	cmp	r3, #0
 8012fe0:	d006      	beq.n	8012ff0 <tcp_pcb_remove+0xe0>
 8012fe2:	4b0e      	ldr	r3, [pc, #56]	; (801301c <tcp_pcb_remove+0x10c>)
 8012fe4:	f640 0294 	movw	r2, #2196	; 0x894
 8012fe8:	4911      	ldr	r1, [pc, #68]	; (8013030 <tcp_pcb_remove+0x120>)
 8012fea:	480e      	ldr	r0, [pc, #56]	; (8013024 <tcp_pcb_remove+0x114>)
 8012fec:	f008 f888 	bl	801b100 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8012ff0:	683b      	ldr	r3, [r7, #0]
 8012ff2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012ff4:	2b00      	cmp	r3, #0
 8012ff6:	d006      	beq.n	8013006 <tcp_pcb_remove+0xf6>
 8012ff8:	4b08      	ldr	r3, [pc, #32]	; (801301c <tcp_pcb_remove+0x10c>)
 8012ffa:	f640 0296 	movw	r2, #2198	; 0x896
 8012ffe:	490d      	ldr	r1, [pc, #52]	; (8013034 <tcp_pcb_remove+0x124>)
 8013000:	4808      	ldr	r0, [pc, #32]	; (8013024 <tcp_pcb_remove+0x114>)
 8013002:	f008 f87d 	bl	801b100 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8013006:	683b      	ldr	r3, [r7, #0]
 8013008:	2200      	movs	r2, #0
 801300a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 801300c:	683b      	ldr	r3, [r7, #0]
 801300e:	2200      	movs	r2, #0
 8013010:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8013012:	bf00      	nop
 8013014:	3710      	adds	r7, #16
 8013016:	46bd      	mov	sp, r7
 8013018:	bd80      	pop	{r7, pc}
 801301a:	bf00      	nop
 801301c:	0801e5f0 	.word	0x0801e5f0
 8013020:	0801ec74 	.word	0x0801ec74
 8013024:	0801e650 	.word	0x0801e650
 8013028:	0801ec90 	.word	0x0801ec90
 801302c:	0801ecb0 	.word	0x0801ecb0
 8013030:	0801ecc8 	.word	0x0801ecc8
 8013034:	0801ece4 	.word	0x0801ece4

08013038 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8013038:	b580      	push	{r7, lr}
 801303a:	b082      	sub	sp, #8
 801303c:	af00      	add	r7, sp, #0
 801303e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	2b00      	cmp	r3, #0
 8013044:	d106      	bne.n	8013054 <tcp_next_iss+0x1c>
 8013046:	4b0a      	ldr	r3, [pc, #40]	; (8013070 <tcp_next_iss+0x38>)
 8013048:	f640 02af 	movw	r2, #2223	; 0x8af
 801304c:	4909      	ldr	r1, [pc, #36]	; (8013074 <tcp_next_iss+0x3c>)
 801304e:	480a      	ldr	r0, [pc, #40]	; (8013078 <tcp_next_iss+0x40>)
 8013050:	f008 f856 	bl	801b100 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8013054:	4b09      	ldr	r3, [pc, #36]	; (801307c <tcp_next_iss+0x44>)
 8013056:	681a      	ldr	r2, [r3, #0]
 8013058:	4b09      	ldr	r3, [pc, #36]	; (8013080 <tcp_next_iss+0x48>)
 801305a:	681b      	ldr	r3, [r3, #0]
 801305c:	4413      	add	r3, r2
 801305e:	4a07      	ldr	r2, [pc, #28]	; (801307c <tcp_next_iss+0x44>)
 8013060:	6013      	str	r3, [r2, #0]
  return iss;
 8013062:	4b06      	ldr	r3, [pc, #24]	; (801307c <tcp_next_iss+0x44>)
 8013064:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8013066:	4618      	mov	r0, r3
 8013068:	3708      	adds	r7, #8
 801306a:	46bd      	mov	sp, r7
 801306c:	bd80      	pop	{r7, pc}
 801306e:	bf00      	nop
 8013070:	0801e5f0 	.word	0x0801e5f0
 8013074:	0801ecfc 	.word	0x0801ecfc
 8013078:	0801e650 	.word	0x0801e650
 801307c:	2400002c 	.word	0x2400002c
 8013080:	2400ce6c 	.word	0x2400ce6c

08013084 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8013084:	b580      	push	{r7, lr}
 8013086:	b086      	sub	sp, #24
 8013088:	af00      	add	r7, sp, #0
 801308a:	4603      	mov	r3, r0
 801308c:	60b9      	str	r1, [r7, #8]
 801308e:	607a      	str	r2, [r7, #4]
 8013090:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	2b00      	cmp	r3, #0
 8013096:	d106      	bne.n	80130a6 <tcp_eff_send_mss_netif+0x22>
 8013098:	4b14      	ldr	r3, [pc, #80]	; (80130ec <tcp_eff_send_mss_netif+0x68>)
 801309a:	f640 02c5 	movw	r2, #2245	; 0x8c5
 801309e:	4914      	ldr	r1, [pc, #80]	; (80130f0 <tcp_eff_send_mss_netif+0x6c>)
 80130a0:	4814      	ldr	r0, [pc, #80]	; (80130f4 <tcp_eff_send_mss_netif+0x70>)
 80130a2:	f008 f82d 	bl	801b100 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80130a6:	68bb      	ldr	r3, [r7, #8]
 80130a8:	2b00      	cmp	r3, #0
 80130aa:	d101      	bne.n	80130b0 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80130ac:	89fb      	ldrh	r3, [r7, #14]
 80130ae:	e019      	b.n	80130e4 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80130b0:	68bb      	ldr	r3, [r7, #8]
 80130b2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80130b4:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80130b6:	8afb      	ldrh	r3, [r7, #22]
 80130b8:	2b00      	cmp	r3, #0
 80130ba:	d012      	beq.n	80130e2 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80130bc:	2328      	movs	r3, #40	; 0x28
 80130be:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80130c0:	8afa      	ldrh	r2, [r7, #22]
 80130c2:	8abb      	ldrh	r3, [r7, #20]
 80130c4:	429a      	cmp	r2, r3
 80130c6:	d904      	bls.n	80130d2 <tcp_eff_send_mss_netif+0x4e>
 80130c8:	8afa      	ldrh	r2, [r7, #22]
 80130ca:	8abb      	ldrh	r3, [r7, #20]
 80130cc:	1ad3      	subs	r3, r2, r3
 80130ce:	b29b      	uxth	r3, r3
 80130d0:	e000      	b.n	80130d4 <tcp_eff_send_mss_netif+0x50>
 80130d2:	2300      	movs	r3, #0
 80130d4:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80130d6:	8a7a      	ldrh	r2, [r7, #18]
 80130d8:	89fb      	ldrh	r3, [r7, #14]
 80130da:	4293      	cmp	r3, r2
 80130dc:	bf28      	it	cs
 80130de:	4613      	movcs	r3, r2
 80130e0:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80130e2:	89fb      	ldrh	r3, [r7, #14]
}
 80130e4:	4618      	mov	r0, r3
 80130e6:	3718      	adds	r7, #24
 80130e8:	46bd      	mov	sp, r7
 80130ea:	bd80      	pop	{r7, pc}
 80130ec:	0801e5f0 	.word	0x0801e5f0
 80130f0:	0801ed18 	.word	0x0801ed18
 80130f4:	0801e650 	.word	0x0801e650

080130f8 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80130f8:	b580      	push	{r7, lr}
 80130fa:	b084      	sub	sp, #16
 80130fc:	af00      	add	r7, sp, #0
 80130fe:	6078      	str	r0, [r7, #4]
 8013100:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8013102:	683b      	ldr	r3, [r7, #0]
 8013104:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	2b00      	cmp	r3, #0
 801310a:	d119      	bne.n	8013140 <tcp_netif_ip_addr_changed_pcblist+0x48>
 801310c:	4b10      	ldr	r3, [pc, #64]	; (8013150 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 801310e:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8013112:	4910      	ldr	r1, [pc, #64]	; (8013154 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8013114:	4810      	ldr	r0, [pc, #64]	; (8013158 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8013116:	f007 fff3 	bl	801b100 <iprintf>

  while (pcb != NULL) {
 801311a:	e011      	b.n	8013140 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 801311c:	68fb      	ldr	r3, [r7, #12]
 801311e:	681a      	ldr	r2, [r3, #0]
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	681b      	ldr	r3, [r3, #0]
 8013124:	429a      	cmp	r2, r3
 8013126:	d108      	bne.n	801313a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8013128:	68fb      	ldr	r3, [r7, #12]
 801312a:	68db      	ldr	r3, [r3, #12]
 801312c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 801312e:	68f8      	ldr	r0, [r7, #12]
 8013130:	f7fe ffca 	bl	80120c8 <tcp_abort>
      pcb = next;
 8013134:	68bb      	ldr	r3, [r7, #8]
 8013136:	60fb      	str	r3, [r7, #12]
 8013138:	e002      	b.n	8013140 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 801313a:	68fb      	ldr	r3, [r7, #12]
 801313c:	68db      	ldr	r3, [r3, #12]
 801313e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8013140:	68fb      	ldr	r3, [r7, #12]
 8013142:	2b00      	cmp	r3, #0
 8013144:	d1ea      	bne.n	801311c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8013146:	bf00      	nop
 8013148:	3710      	adds	r7, #16
 801314a:	46bd      	mov	sp, r7
 801314c:	bd80      	pop	{r7, pc}
 801314e:	bf00      	nop
 8013150:	0801e5f0 	.word	0x0801e5f0
 8013154:	0801ed40 	.word	0x0801ed40
 8013158:	0801e650 	.word	0x0801e650

0801315c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801315c:	b580      	push	{r7, lr}
 801315e:	b084      	sub	sp, #16
 8013160:	af00      	add	r7, sp, #0
 8013162:	6078      	str	r0, [r7, #4]
 8013164:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8013166:	687b      	ldr	r3, [r7, #4]
 8013168:	2b00      	cmp	r3, #0
 801316a:	d02a      	beq.n	80131c2 <tcp_netif_ip_addr_changed+0x66>
 801316c:	687b      	ldr	r3, [r7, #4]
 801316e:	681b      	ldr	r3, [r3, #0]
 8013170:	2b00      	cmp	r3, #0
 8013172:	d026      	beq.n	80131c2 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8013174:	4b15      	ldr	r3, [pc, #84]	; (80131cc <tcp_netif_ip_addr_changed+0x70>)
 8013176:	681b      	ldr	r3, [r3, #0]
 8013178:	4619      	mov	r1, r3
 801317a:	6878      	ldr	r0, [r7, #4]
 801317c:	f7ff ffbc 	bl	80130f8 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8013180:	4b13      	ldr	r3, [pc, #76]	; (80131d0 <tcp_netif_ip_addr_changed+0x74>)
 8013182:	681b      	ldr	r3, [r3, #0]
 8013184:	4619      	mov	r1, r3
 8013186:	6878      	ldr	r0, [r7, #4]
 8013188:	f7ff ffb6 	bl	80130f8 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 801318c:	683b      	ldr	r3, [r7, #0]
 801318e:	2b00      	cmp	r3, #0
 8013190:	d017      	beq.n	80131c2 <tcp_netif_ip_addr_changed+0x66>
 8013192:	683b      	ldr	r3, [r7, #0]
 8013194:	681b      	ldr	r3, [r3, #0]
 8013196:	2b00      	cmp	r3, #0
 8013198:	d013      	beq.n	80131c2 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801319a:	4b0e      	ldr	r3, [pc, #56]	; (80131d4 <tcp_netif_ip_addr_changed+0x78>)
 801319c:	681b      	ldr	r3, [r3, #0]
 801319e:	60fb      	str	r3, [r7, #12]
 80131a0:	e00c      	b.n	80131bc <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80131a2:	68fb      	ldr	r3, [r7, #12]
 80131a4:	681a      	ldr	r2, [r3, #0]
 80131a6:	687b      	ldr	r3, [r7, #4]
 80131a8:	681b      	ldr	r3, [r3, #0]
 80131aa:	429a      	cmp	r2, r3
 80131ac:	d103      	bne.n	80131b6 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80131ae:	683b      	ldr	r3, [r7, #0]
 80131b0:	681a      	ldr	r2, [r3, #0]
 80131b2:	68fb      	ldr	r3, [r7, #12]
 80131b4:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80131b6:	68fb      	ldr	r3, [r7, #12]
 80131b8:	68db      	ldr	r3, [r3, #12]
 80131ba:	60fb      	str	r3, [r7, #12]
 80131bc:	68fb      	ldr	r3, [r7, #12]
 80131be:	2b00      	cmp	r3, #0
 80131c0:	d1ef      	bne.n	80131a2 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80131c2:	bf00      	nop
 80131c4:	3710      	adds	r7, #16
 80131c6:	46bd      	mov	sp, r7
 80131c8:	bd80      	pop	{r7, pc}
 80131ca:	bf00      	nop
 80131cc:	2400ce68 	.word	0x2400ce68
 80131d0:	2400ce74 	.word	0x2400ce74
 80131d4:	2400ce70 	.word	0x2400ce70

080131d8 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80131d8:	b580      	push	{r7, lr}
 80131da:	b082      	sub	sp, #8
 80131dc:	af00      	add	r7, sp, #0
 80131de:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80131e4:	2b00      	cmp	r3, #0
 80131e6:	d007      	beq.n	80131f8 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80131e8:	687b      	ldr	r3, [r7, #4]
 80131ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80131ec:	4618      	mov	r0, r3
 80131ee:	f7ff fc3f 	bl	8012a70 <tcp_segs_free>
    pcb->ooseq = NULL;
 80131f2:	687b      	ldr	r3, [r7, #4]
 80131f4:	2200      	movs	r2, #0
 80131f6:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80131f8:	bf00      	nop
 80131fa:	3708      	adds	r7, #8
 80131fc:	46bd      	mov	sp, r7
 80131fe:	bd80      	pop	{r7, pc}

08013200 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8013200:	b590      	push	{r4, r7, lr}
 8013202:	b08d      	sub	sp, #52	; 0x34
 8013204:	af04      	add	r7, sp, #16
 8013206:	6078      	str	r0, [r7, #4]
 8013208:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	2b00      	cmp	r3, #0
 801320e:	d105      	bne.n	801321c <tcp_input+0x1c>
 8013210:	4b9b      	ldr	r3, [pc, #620]	; (8013480 <tcp_input+0x280>)
 8013212:	2283      	movs	r2, #131	; 0x83
 8013214:	499b      	ldr	r1, [pc, #620]	; (8013484 <tcp_input+0x284>)
 8013216:	489c      	ldr	r0, [pc, #624]	; (8013488 <tcp_input+0x288>)
 8013218:	f007 ff72 	bl	801b100 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 801321c:	687b      	ldr	r3, [r7, #4]
 801321e:	685b      	ldr	r3, [r3, #4]
 8013220:	4a9a      	ldr	r2, [pc, #616]	; (801348c <tcp_input+0x28c>)
 8013222:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8013224:	687b      	ldr	r3, [r7, #4]
 8013226:	895b      	ldrh	r3, [r3, #10]
 8013228:	2b13      	cmp	r3, #19
 801322a:	f240 83c4 	bls.w	80139b6 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801322e:	4b98      	ldr	r3, [pc, #608]	; (8013490 <tcp_input+0x290>)
 8013230:	695a      	ldr	r2, [r3, #20]
 8013232:	4b97      	ldr	r3, [pc, #604]	; (8013490 <tcp_input+0x290>)
 8013234:	681b      	ldr	r3, [r3, #0]
 8013236:	4619      	mov	r1, r3
 8013238:	4610      	mov	r0, r2
 801323a:	f7fb fe79 	bl	800ef30 <ip4_addr_isbroadcast_u32>
 801323e:	4603      	mov	r3, r0
 8013240:	2b00      	cmp	r3, #0
 8013242:	f040 83ba 	bne.w	80139ba <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8013246:	4b92      	ldr	r3, [pc, #584]	; (8013490 <tcp_input+0x290>)
 8013248:	695b      	ldr	r3, [r3, #20]
 801324a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801324e:	2be0      	cmp	r3, #224	; 0xe0
 8013250:	f000 83b3 	beq.w	80139ba <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8013254:	4b8d      	ldr	r3, [pc, #564]	; (801348c <tcp_input+0x28c>)
 8013256:	681b      	ldr	r3, [r3, #0]
 8013258:	899b      	ldrh	r3, [r3, #12]
 801325a:	b29b      	uxth	r3, r3
 801325c:	4618      	mov	r0, r3
 801325e:	f7fa f8fb 	bl	800d458 <lwip_htons>
 8013262:	4603      	mov	r3, r0
 8013264:	0b1b      	lsrs	r3, r3, #12
 8013266:	b29b      	uxth	r3, r3
 8013268:	b2db      	uxtb	r3, r3
 801326a:	009b      	lsls	r3, r3, #2
 801326c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801326e:	7cbb      	ldrb	r3, [r7, #18]
 8013270:	2b13      	cmp	r3, #19
 8013272:	f240 83a2 	bls.w	80139ba <tcp_input+0x7ba>
 8013276:	7cbb      	ldrb	r3, [r7, #18]
 8013278:	b29a      	uxth	r2, r3
 801327a:	687b      	ldr	r3, [r7, #4]
 801327c:	891b      	ldrh	r3, [r3, #8]
 801327e:	429a      	cmp	r2, r3
 8013280:	f200 839b 	bhi.w	80139ba <tcp_input+0x7ba>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8013284:	7cbb      	ldrb	r3, [r7, #18]
 8013286:	b29b      	uxth	r3, r3
 8013288:	3b14      	subs	r3, #20
 801328a:	b29a      	uxth	r2, r3
 801328c:	4b81      	ldr	r3, [pc, #516]	; (8013494 <tcp_input+0x294>)
 801328e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8013290:	4b81      	ldr	r3, [pc, #516]	; (8013498 <tcp_input+0x298>)
 8013292:	2200      	movs	r2, #0
 8013294:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8013296:	687b      	ldr	r3, [r7, #4]
 8013298:	895a      	ldrh	r2, [r3, #10]
 801329a:	7cbb      	ldrb	r3, [r7, #18]
 801329c:	b29b      	uxth	r3, r3
 801329e:	429a      	cmp	r2, r3
 80132a0:	d309      	bcc.n	80132b6 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80132a2:	4b7c      	ldr	r3, [pc, #496]	; (8013494 <tcp_input+0x294>)
 80132a4:	881a      	ldrh	r2, [r3, #0]
 80132a6:	4b7d      	ldr	r3, [pc, #500]	; (801349c <tcp_input+0x29c>)
 80132a8:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80132aa:	7cbb      	ldrb	r3, [r7, #18]
 80132ac:	4619      	mov	r1, r3
 80132ae:	6878      	ldr	r0, [r7, #4]
 80132b0:	f7fd ffe2 	bl	8011278 <pbuf_remove_header>
 80132b4:	e04e      	b.n	8013354 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80132b6:	687b      	ldr	r3, [r7, #4]
 80132b8:	681b      	ldr	r3, [r3, #0]
 80132ba:	2b00      	cmp	r3, #0
 80132bc:	d105      	bne.n	80132ca <tcp_input+0xca>
 80132be:	4b70      	ldr	r3, [pc, #448]	; (8013480 <tcp_input+0x280>)
 80132c0:	22c2      	movs	r2, #194	; 0xc2
 80132c2:	4977      	ldr	r1, [pc, #476]	; (80134a0 <tcp_input+0x2a0>)
 80132c4:	4870      	ldr	r0, [pc, #448]	; (8013488 <tcp_input+0x288>)
 80132c6:	f007 ff1b 	bl	801b100 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80132ca:	2114      	movs	r1, #20
 80132cc:	6878      	ldr	r0, [r7, #4]
 80132ce:	f7fd ffd3 	bl	8011278 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80132d2:	687b      	ldr	r3, [r7, #4]
 80132d4:	895a      	ldrh	r2, [r3, #10]
 80132d6:	4b71      	ldr	r3, [pc, #452]	; (801349c <tcp_input+0x29c>)
 80132d8:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80132da:	4b6e      	ldr	r3, [pc, #440]	; (8013494 <tcp_input+0x294>)
 80132dc:	881a      	ldrh	r2, [r3, #0]
 80132de:	4b6f      	ldr	r3, [pc, #444]	; (801349c <tcp_input+0x29c>)
 80132e0:	881b      	ldrh	r3, [r3, #0]
 80132e2:	1ad3      	subs	r3, r2, r3
 80132e4:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80132e6:	4b6d      	ldr	r3, [pc, #436]	; (801349c <tcp_input+0x29c>)
 80132e8:	881b      	ldrh	r3, [r3, #0]
 80132ea:	4619      	mov	r1, r3
 80132ec:	6878      	ldr	r0, [r7, #4]
 80132ee:	f7fd ffc3 	bl	8011278 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80132f2:	687b      	ldr	r3, [r7, #4]
 80132f4:	681b      	ldr	r3, [r3, #0]
 80132f6:	895b      	ldrh	r3, [r3, #10]
 80132f8:	8a3a      	ldrh	r2, [r7, #16]
 80132fa:	429a      	cmp	r2, r3
 80132fc:	f200 835f 	bhi.w	80139be <tcp_input+0x7be>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8013300:	687b      	ldr	r3, [r7, #4]
 8013302:	681b      	ldr	r3, [r3, #0]
 8013304:	685b      	ldr	r3, [r3, #4]
 8013306:	4a64      	ldr	r2, [pc, #400]	; (8013498 <tcp_input+0x298>)
 8013308:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 801330a:	687b      	ldr	r3, [r7, #4]
 801330c:	681b      	ldr	r3, [r3, #0]
 801330e:	8a3a      	ldrh	r2, [r7, #16]
 8013310:	4611      	mov	r1, r2
 8013312:	4618      	mov	r0, r3
 8013314:	f7fd ffb0 	bl	8011278 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8013318:	687b      	ldr	r3, [r7, #4]
 801331a:	891a      	ldrh	r2, [r3, #8]
 801331c:	8a3b      	ldrh	r3, [r7, #16]
 801331e:	1ad3      	subs	r3, r2, r3
 8013320:	b29a      	uxth	r2, r3
 8013322:	687b      	ldr	r3, [r7, #4]
 8013324:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8013326:	687b      	ldr	r3, [r7, #4]
 8013328:	895b      	ldrh	r3, [r3, #10]
 801332a:	2b00      	cmp	r3, #0
 801332c:	d005      	beq.n	801333a <tcp_input+0x13a>
 801332e:	4b54      	ldr	r3, [pc, #336]	; (8013480 <tcp_input+0x280>)
 8013330:	22df      	movs	r2, #223	; 0xdf
 8013332:	495c      	ldr	r1, [pc, #368]	; (80134a4 <tcp_input+0x2a4>)
 8013334:	4854      	ldr	r0, [pc, #336]	; (8013488 <tcp_input+0x288>)
 8013336:	f007 fee3 	bl	801b100 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	891a      	ldrh	r2, [r3, #8]
 801333e:	687b      	ldr	r3, [r7, #4]
 8013340:	681b      	ldr	r3, [r3, #0]
 8013342:	891b      	ldrh	r3, [r3, #8]
 8013344:	429a      	cmp	r2, r3
 8013346:	d005      	beq.n	8013354 <tcp_input+0x154>
 8013348:	4b4d      	ldr	r3, [pc, #308]	; (8013480 <tcp_input+0x280>)
 801334a:	22e0      	movs	r2, #224	; 0xe0
 801334c:	4956      	ldr	r1, [pc, #344]	; (80134a8 <tcp_input+0x2a8>)
 801334e:	484e      	ldr	r0, [pc, #312]	; (8013488 <tcp_input+0x288>)
 8013350:	f007 fed6 	bl	801b100 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8013354:	4b4d      	ldr	r3, [pc, #308]	; (801348c <tcp_input+0x28c>)
 8013356:	681b      	ldr	r3, [r3, #0]
 8013358:	881b      	ldrh	r3, [r3, #0]
 801335a:	b29a      	uxth	r2, r3
 801335c:	4b4b      	ldr	r3, [pc, #300]	; (801348c <tcp_input+0x28c>)
 801335e:	681c      	ldr	r4, [r3, #0]
 8013360:	4610      	mov	r0, r2
 8013362:	f7fa f879 	bl	800d458 <lwip_htons>
 8013366:	4603      	mov	r3, r0
 8013368:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801336a:	4b48      	ldr	r3, [pc, #288]	; (801348c <tcp_input+0x28c>)
 801336c:	681b      	ldr	r3, [r3, #0]
 801336e:	885b      	ldrh	r3, [r3, #2]
 8013370:	b29a      	uxth	r2, r3
 8013372:	4b46      	ldr	r3, [pc, #280]	; (801348c <tcp_input+0x28c>)
 8013374:	681c      	ldr	r4, [r3, #0]
 8013376:	4610      	mov	r0, r2
 8013378:	f7fa f86e 	bl	800d458 <lwip_htons>
 801337c:	4603      	mov	r3, r0
 801337e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8013380:	4b42      	ldr	r3, [pc, #264]	; (801348c <tcp_input+0x28c>)
 8013382:	681b      	ldr	r3, [r3, #0]
 8013384:	685a      	ldr	r2, [r3, #4]
 8013386:	4b41      	ldr	r3, [pc, #260]	; (801348c <tcp_input+0x28c>)
 8013388:	681c      	ldr	r4, [r3, #0]
 801338a:	4610      	mov	r0, r2
 801338c:	f7fa f879 	bl	800d482 <lwip_htonl>
 8013390:	4603      	mov	r3, r0
 8013392:	6063      	str	r3, [r4, #4]
 8013394:	6863      	ldr	r3, [r4, #4]
 8013396:	4a45      	ldr	r2, [pc, #276]	; (80134ac <tcp_input+0x2ac>)
 8013398:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801339a:	4b3c      	ldr	r3, [pc, #240]	; (801348c <tcp_input+0x28c>)
 801339c:	681b      	ldr	r3, [r3, #0]
 801339e:	689a      	ldr	r2, [r3, #8]
 80133a0:	4b3a      	ldr	r3, [pc, #232]	; (801348c <tcp_input+0x28c>)
 80133a2:	681c      	ldr	r4, [r3, #0]
 80133a4:	4610      	mov	r0, r2
 80133a6:	f7fa f86c 	bl	800d482 <lwip_htonl>
 80133aa:	4603      	mov	r3, r0
 80133ac:	60a3      	str	r3, [r4, #8]
 80133ae:	68a3      	ldr	r3, [r4, #8]
 80133b0:	4a3f      	ldr	r2, [pc, #252]	; (80134b0 <tcp_input+0x2b0>)
 80133b2:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80133b4:	4b35      	ldr	r3, [pc, #212]	; (801348c <tcp_input+0x28c>)
 80133b6:	681b      	ldr	r3, [r3, #0]
 80133b8:	89db      	ldrh	r3, [r3, #14]
 80133ba:	b29a      	uxth	r2, r3
 80133bc:	4b33      	ldr	r3, [pc, #204]	; (801348c <tcp_input+0x28c>)
 80133be:	681c      	ldr	r4, [r3, #0]
 80133c0:	4610      	mov	r0, r2
 80133c2:	f7fa f849 	bl	800d458 <lwip_htons>
 80133c6:	4603      	mov	r3, r0
 80133c8:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80133ca:	4b30      	ldr	r3, [pc, #192]	; (801348c <tcp_input+0x28c>)
 80133cc:	681b      	ldr	r3, [r3, #0]
 80133ce:	899b      	ldrh	r3, [r3, #12]
 80133d0:	b29b      	uxth	r3, r3
 80133d2:	4618      	mov	r0, r3
 80133d4:	f7fa f840 	bl	800d458 <lwip_htons>
 80133d8:	4603      	mov	r3, r0
 80133da:	b2db      	uxtb	r3, r3
 80133dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80133e0:	b2da      	uxtb	r2, r3
 80133e2:	4b34      	ldr	r3, [pc, #208]	; (80134b4 <tcp_input+0x2b4>)
 80133e4:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	891a      	ldrh	r2, [r3, #8]
 80133ea:	4b33      	ldr	r3, [pc, #204]	; (80134b8 <tcp_input+0x2b8>)
 80133ec:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80133ee:	4b31      	ldr	r3, [pc, #196]	; (80134b4 <tcp_input+0x2b4>)
 80133f0:	781b      	ldrb	r3, [r3, #0]
 80133f2:	f003 0303 	and.w	r3, r3, #3
 80133f6:	2b00      	cmp	r3, #0
 80133f8:	d00c      	beq.n	8013414 <tcp_input+0x214>
    tcplen++;
 80133fa:	4b2f      	ldr	r3, [pc, #188]	; (80134b8 <tcp_input+0x2b8>)
 80133fc:	881b      	ldrh	r3, [r3, #0]
 80133fe:	3301      	adds	r3, #1
 8013400:	b29a      	uxth	r2, r3
 8013402:	4b2d      	ldr	r3, [pc, #180]	; (80134b8 <tcp_input+0x2b8>)
 8013404:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8013406:	687b      	ldr	r3, [r7, #4]
 8013408:	891a      	ldrh	r2, [r3, #8]
 801340a:	4b2b      	ldr	r3, [pc, #172]	; (80134b8 <tcp_input+0x2b8>)
 801340c:	881b      	ldrh	r3, [r3, #0]
 801340e:	429a      	cmp	r2, r3
 8013410:	f200 82d7 	bhi.w	80139c2 <tcp_input+0x7c2>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8013414:	2300      	movs	r3, #0
 8013416:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013418:	4b28      	ldr	r3, [pc, #160]	; (80134bc <tcp_input+0x2bc>)
 801341a:	681b      	ldr	r3, [r3, #0]
 801341c:	61fb      	str	r3, [r7, #28]
 801341e:	e09d      	b.n	801355c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8013420:	69fb      	ldr	r3, [r7, #28]
 8013422:	7d1b      	ldrb	r3, [r3, #20]
 8013424:	2b00      	cmp	r3, #0
 8013426:	d105      	bne.n	8013434 <tcp_input+0x234>
 8013428:	4b15      	ldr	r3, [pc, #84]	; (8013480 <tcp_input+0x280>)
 801342a:	22fb      	movs	r2, #251	; 0xfb
 801342c:	4924      	ldr	r1, [pc, #144]	; (80134c0 <tcp_input+0x2c0>)
 801342e:	4816      	ldr	r0, [pc, #88]	; (8013488 <tcp_input+0x288>)
 8013430:	f007 fe66 	bl	801b100 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8013434:	69fb      	ldr	r3, [r7, #28]
 8013436:	7d1b      	ldrb	r3, [r3, #20]
 8013438:	2b0a      	cmp	r3, #10
 801343a:	d105      	bne.n	8013448 <tcp_input+0x248>
 801343c:	4b10      	ldr	r3, [pc, #64]	; (8013480 <tcp_input+0x280>)
 801343e:	22fc      	movs	r2, #252	; 0xfc
 8013440:	4920      	ldr	r1, [pc, #128]	; (80134c4 <tcp_input+0x2c4>)
 8013442:	4811      	ldr	r0, [pc, #68]	; (8013488 <tcp_input+0x288>)
 8013444:	f007 fe5c 	bl	801b100 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8013448:	69fb      	ldr	r3, [r7, #28]
 801344a:	7d1b      	ldrb	r3, [r3, #20]
 801344c:	2b01      	cmp	r3, #1
 801344e:	d105      	bne.n	801345c <tcp_input+0x25c>
 8013450:	4b0b      	ldr	r3, [pc, #44]	; (8013480 <tcp_input+0x280>)
 8013452:	22fd      	movs	r2, #253	; 0xfd
 8013454:	491c      	ldr	r1, [pc, #112]	; (80134c8 <tcp_input+0x2c8>)
 8013456:	480c      	ldr	r0, [pc, #48]	; (8013488 <tcp_input+0x288>)
 8013458:	f007 fe52 	bl	801b100 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801345c:	69fb      	ldr	r3, [r7, #28]
 801345e:	7a1b      	ldrb	r3, [r3, #8]
 8013460:	2b00      	cmp	r3, #0
 8013462:	d033      	beq.n	80134cc <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013464:	69fb      	ldr	r3, [r7, #28]
 8013466:	7a1a      	ldrb	r2, [r3, #8]
 8013468:	4b09      	ldr	r3, [pc, #36]	; (8013490 <tcp_input+0x290>)
 801346a:	685b      	ldr	r3, [r3, #4]
 801346c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013470:	3301      	adds	r3, #1
 8013472:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013474:	429a      	cmp	r2, r3
 8013476:	d029      	beq.n	80134cc <tcp_input+0x2cc>
      prev = pcb;
 8013478:	69fb      	ldr	r3, [r7, #28]
 801347a:	61bb      	str	r3, [r7, #24]
      continue;
 801347c:	e06b      	b.n	8013556 <tcp_input+0x356>
 801347e:	bf00      	nop
 8013480:	0801ed74 	.word	0x0801ed74
 8013484:	0801edc4 	.word	0x0801edc4
 8013488:	0801eddc 	.word	0x0801eddc
 801348c:	24004928 	.word	0x24004928
 8013490:	24009da0 	.word	0x24009da0
 8013494:	2400492c 	.word	0x2400492c
 8013498:	24004930 	.word	0x24004930
 801349c:	2400492e 	.word	0x2400492e
 80134a0:	0801ee04 	.word	0x0801ee04
 80134a4:	0801ee14 	.word	0x0801ee14
 80134a8:	0801ee20 	.word	0x0801ee20
 80134ac:	24004938 	.word	0x24004938
 80134b0:	2400493c 	.word	0x2400493c
 80134b4:	24004944 	.word	0x24004944
 80134b8:	24004942 	.word	0x24004942
 80134bc:	2400ce68 	.word	0x2400ce68
 80134c0:	0801ee40 	.word	0x0801ee40
 80134c4:	0801ee68 	.word	0x0801ee68
 80134c8:	0801ee94 	.word	0x0801ee94
    }

    if (pcb->remote_port == tcphdr->src &&
 80134cc:	69fb      	ldr	r3, [r7, #28]
 80134ce:	8b1a      	ldrh	r2, [r3, #24]
 80134d0:	4b94      	ldr	r3, [pc, #592]	; (8013724 <tcp_input+0x524>)
 80134d2:	681b      	ldr	r3, [r3, #0]
 80134d4:	881b      	ldrh	r3, [r3, #0]
 80134d6:	b29b      	uxth	r3, r3
 80134d8:	429a      	cmp	r2, r3
 80134da:	d13a      	bne.n	8013552 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 80134dc:	69fb      	ldr	r3, [r7, #28]
 80134de:	8ada      	ldrh	r2, [r3, #22]
 80134e0:	4b90      	ldr	r3, [pc, #576]	; (8013724 <tcp_input+0x524>)
 80134e2:	681b      	ldr	r3, [r3, #0]
 80134e4:	885b      	ldrh	r3, [r3, #2]
 80134e6:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80134e8:	429a      	cmp	r2, r3
 80134ea:	d132      	bne.n	8013552 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80134ec:	69fb      	ldr	r3, [r7, #28]
 80134ee:	685a      	ldr	r2, [r3, #4]
 80134f0:	4b8d      	ldr	r3, [pc, #564]	; (8013728 <tcp_input+0x528>)
 80134f2:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80134f4:	429a      	cmp	r2, r3
 80134f6:	d12c      	bne.n	8013552 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80134f8:	69fb      	ldr	r3, [r7, #28]
 80134fa:	681a      	ldr	r2, [r3, #0]
 80134fc:	4b8a      	ldr	r3, [pc, #552]	; (8013728 <tcp_input+0x528>)
 80134fe:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013500:	429a      	cmp	r2, r3
 8013502:	d126      	bne.n	8013552 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8013504:	69fb      	ldr	r3, [r7, #28]
 8013506:	68db      	ldr	r3, [r3, #12]
 8013508:	69fa      	ldr	r2, [r7, #28]
 801350a:	429a      	cmp	r2, r3
 801350c:	d106      	bne.n	801351c <tcp_input+0x31c>
 801350e:	4b87      	ldr	r3, [pc, #540]	; (801372c <tcp_input+0x52c>)
 8013510:	f240 120d 	movw	r2, #269	; 0x10d
 8013514:	4986      	ldr	r1, [pc, #536]	; (8013730 <tcp_input+0x530>)
 8013516:	4887      	ldr	r0, [pc, #540]	; (8013734 <tcp_input+0x534>)
 8013518:	f007 fdf2 	bl	801b100 <iprintf>
      if (prev != NULL) {
 801351c:	69bb      	ldr	r3, [r7, #24]
 801351e:	2b00      	cmp	r3, #0
 8013520:	d00a      	beq.n	8013538 <tcp_input+0x338>
        prev->next = pcb->next;
 8013522:	69fb      	ldr	r3, [r7, #28]
 8013524:	68da      	ldr	r2, [r3, #12]
 8013526:	69bb      	ldr	r3, [r7, #24]
 8013528:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 801352a:	4b83      	ldr	r3, [pc, #524]	; (8013738 <tcp_input+0x538>)
 801352c:	681a      	ldr	r2, [r3, #0]
 801352e:	69fb      	ldr	r3, [r7, #28]
 8013530:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8013532:	4a81      	ldr	r2, [pc, #516]	; (8013738 <tcp_input+0x538>)
 8013534:	69fb      	ldr	r3, [r7, #28]
 8013536:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8013538:	69fb      	ldr	r3, [r7, #28]
 801353a:	68db      	ldr	r3, [r3, #12]
 801353c:	69fa      	ldr	r2, [r7, #28]
 801353e:	429a      	cmp	r2, r3
 8013540:	d111      	bne.n	8013566 <tcp_input+0x366>
 8013542:	4b7a      	ldr	r3, [pc, #488]	; (801372c <tcp_input+0x52c>)
 8013544:	f240 1215 	movw	r2, #277	; 0x115
 8013548:	497c      	ldr	r1, [pc, #496]	; (801373c <tcp_input+0x53c>)
 801354a:	487a      	ldr	r0, [pc, #488]	; (8013734 <tcp_input+0x534>)
 801354c:	f007 fdd8 	bl	801b100 <iprintf>
      break;
 8013550:	e009      	b.n	8013566 <tcp_input+0x366>
    }
    prev = pcb;
 8013552:	69fb      	ldr	r3, [r7, #28]
 8013554:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013556:	69fb      	ldr	r3, [r7, #28]
 8013558:	68db      	ldr	r3, [r3, #12]
 801355a:	61fb      	str	r3, [r7, #28]
 801355c:	69fb      	ldr	r3, [r7, #28]
 801355e:	2b00      	cmp	r3, #0
 8013560:	f47f af5e 	bne.w	8013420 <tcp_input+0x220>
 8013564:	e000      	b.n	8013568 <tcp_input+0x368>
      break;
 8013566:	bf00      	nop
  }

  if (pcb == NULL) {
 8013568:	69fb      	ldr	r3, [r7, #28]
 801356a:	2b00      	cmp	r3, #0
 801356c:	f040 8095 	bne.w	801369a <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8013570:	4b73      	ldr	r3, [pc, #460]	; (8013740 <tcp_input+0x540>)
 8013572:	681b      	ldr	r3, [r3, #0]
 8013574:	61fb      	str	r3, [r7, #28]
 8013576:	e03f      	b.n	80135f8 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8013578:	69fb      	ldr	r3, [r7, #28]
 801357a:	7d1b      	ldrb	r3, [r3, #20]
 801357c:	2b0a      	cmp	r3, #10
 801357e:	d006      	beq.n	801358e <tcp_input+0x38e>
 8013580:	4b6a      	ldr	r3, [pc, #424]	; (801372c <tcp_input+0x52c>)
 8013582:	f240 121f 	movw	r2, #287	; 0x11f
 8013586:	496f      	ldr	r1, [pc, #444]	; (8013744 <tcp_input+0x544>)
 8013588:	486a      	ldr	r0, [pc, #424]	; (8013734 <tcp_input+0x534>)
 801358a:	f007 fdb9 	bl	801b100 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801358e:	69fb      	ldr	r3, [r7, #28]
 8013590:	7a1b      	ldrb	r3, [r3, #8]
 8013592:	2b00      	cmp	r3, #0
 8013594:	d009      	beq.n	80135aa <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013596:	69fb      	ldr	r3, [r7, #28]
 8013598:	7a1a      	ldrb	r2, [r3, #8]
 801359a:	4b63      	ldr	r3, [pc, #396]	; (8013728 <tcp_input+0x528>)
 801359c:	685b      	ldr	r3, [r3, #4]
 801359e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80135a2:	3301      	adds	r3, #1
 80135a4:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80135a6:	429a      	cmp	r2, r3
 80135a8:	d122      	bne.n	80135f0 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80135aa:	69fb      	ldr	r3, [r7, #28]
 80135ac:	8b1a      	ldrh	r2, [r3, #24]
 80135ae:	4b5d      	ldr	r3, [pc, #372]	; (8013724 <tcp_input+0x524>)
 80135b0:	681b      	ldr	r3, [r3, #0]
 80135b2:	881b      	ldrh	r3, [r3, #0]
 80135b4:	b29b      	uxth	r3, r3
 80135b6:	429a      	cmp	r2, r3
 80135b8:	d11b      	bne.n	80135f2 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 80135ba:	69fb      	ldr	r3, [r7, #28]
 80135bc:	8ada      	ldrh	r2, [r3, #22]
 80135be:	4b59      	ldr	r3, [pc, #356]	; (8013724 <tcp_input+0x524>)
 80135c0:	681b      	ldr	r3, [r3, #0]
 80135c2:	885b      	ldrh	r3, [r3, #2]
 80135c4:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80135c6:	429a      	cmp	r2, r3
 80135c8:	d113      	bne.n	80135f2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80135ca:	69fb      	ldr	r3, [r7, #28]
 80135cc:	685a      	ldr	r2, [r3, #4]
 80135ce:	4b56      	ldr	r3, [pc, #344]	; (8013728 <tcp_input+0x528>)
 80135d0:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80135d2:	429a      	cmp	r2, r3
 80135d4:	d10d      	bne.n	80135f2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80135d6:	69fb      	ldr	r3, [r7, #28]
 80135d8:	681a      	ldr	r2, [r3, #0]
 80135da:	4b53      	ldr	r3, [pc, #332]	; (8013728 <tcp_input+0x528>)
 80135dc:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80135de:	429a      	cmp	r2, r3
 80135e0:	d107      	bne.n	80135f2 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80135e2:	69f8      	ldr	r0, [r7, #28]
 80135e4:	f000 fb52 	bl	8013c8c <tcp_timewait_input>
        }
        pbuf_free(p);
 80135e8:	6878      	ldr	r0, [r7, #4]
 80135ea:	f7fd fecb 	bl	8011384 <pbuf_free>
        return;
 80135ee:	e1ee      	b.n	80139ce <tcp_input+0x7ce>
        continue;
 80135f0:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80135f2:	69fb      	ldr	r3, [r7, #28]
 80135f4:	68db      	ldr	r3, [r3, #12]
 80135f6:	61fb      	str	r3, [r7, #28]
 80135f8:	69fb      	ldr	r3, [r7, #28]
 80135fa:	2b00      	cmp	r3, #0
 80135fc:	d1bc      	bne.n	8013578 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80135fe:	2300      	movs	r3, #0
 8013600:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8013602:	4b51      	ldr	r3, [pc, #324]	; (8013748 <tcp_input+0x548>)
 8013604:	681b      	ldr	r3, [r3, #0]
 8013606:	617b      	str	r3, [r7, #20]
 8013608:	e02a      	b.n	8013660 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801360a:	697b      	ldr	r3, [r7, #20]
 801360c:	7a1b      	ldrb	r3, [r3, #8]
 801360e:	2b00      	cmp	r3, #0
 8013610:	d00c      	beq.n	801362c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013612:	697b      	ldr	r3, [r7, #20]
 8013614:	7a1a      	ldrb	r2, [r3, #8]
 8013616:	4b44      	ldr	r3, [pc, #272]	; (8013728 <tcp_input+0x528>)
 8013618:	685b      	ldr	r3, [r3, #4]
 801361a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801361e:	3301      	adds	r3, #1
 8013620:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8013622:	429a      	cmp	r2, r3
 8013624:	d002      	beq.n	801362c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8013626:	697b      	ldr	r3, [r7, #20]
 8013628:	61bb      	str	r3, [r7, #24]
        continue;
 801362a:	e016      	b.n	801365a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 801362c:	697b      	ldr	r3, [r7, #20]
 801362e:	8ada      	ldrh	r2, [r3, #22]
 8013630:	4b3c      	ldr	r3, [pc, #240]	; (8013724 <tcp_input+0x524>)
 8013632:	681b      	ldr	r3, [r3, #0]
 8013634:	885b      	ldrh	r3, [r3, #2]
 8013636:	b29b      	uxth	r3, r3
 8013638:	429a      	cmp	r2, r3
 801363a:	d10c      	bne.n	8013656 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801363c:	697b      	ldr	r3, [r7, #20]
 801363e:	681a      	ldr	r2, [r3, #0]
 8013640:	4b39      	ldr	r3, [pc, #228]	; (8013728 <tcp_input+0x528>)
 8013642:	695b      	ldr	r3, [r3, #20]
 8013644:	429a      	cmp	r2, r3
 8013646:	d00f      	beq.n	8013668 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8013648:	697b      	ldr	r3, [r7, #20]
 801364a:	2b00      	cmp	r3, #0
 801364c:	d00d      	beq.n	801366a <tcp_input+0x46a>
 801364e:	697b      	ldr	r3, [r7, #20]
 8013650:	681b      	ldr	r3, [r3, #0]
 8013652:	2b00      	cmp	r3, #0
 8013654:	d009      	beq.n	801366a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8013656:	697b      	ldr	r3, [r7, #20]
 8013658:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801365a:	697b      	ldr	r3, [r7, #20]
 801365c:	68db      	ldr	r3, [r3, #12]
 801365e:	617b      	str	r3, [r7, #20]
 8013660:	697b      	ldr	r3, [r7, #20]
 8013662:	2b00      	cmp	r3, #0
 8013664:	d1d1      	bne.n	801360a <tcp_input+0x40a>
 8013666:	e000      	b.n	801366a <tcp_input+0x46a>
            break;
 8013668:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 801366a:	697b      	ldr	r3, [r7, #20]
 801366c:	2b00      	cmp	r3, #0
 801366e:	d014      	beq.n	801369a <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8013670:	69bb      	ldr	r3, [r7, #24]
 8013672:	2b00      	cmp	r3, #0
 8013674:	d00a      	beq.n	801368c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8013676:	697b      	ldr	r3, [r7, #20]
 8013678:	68da      	ldr	r2, [r3, #12]
 801367a:	69bb      	ldr	r3, [r7, #24]
 801367c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801367e:	4b32      	ldr	r3, [pc, #200]	; (8013748 <tcp_input+0x548>)
 8013680:	681a      	ldr	r2, [r3, #0]
 8013682:	697b      	ldr	r3, [r7, #20]
 8013684:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8013686:	4a30      	ldr	r2, [pc, #192]	; (8013748 <tcp_input+0x548>)
 8013688:	697b      	ldr	r3, [r7, #20]
 801368a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 801368c:	6978      	ldr	r0, [r7, #20]
 801368e:	f000 f9ff 	bl	8013a90 <tcp_listen_input>
      }
      pbuf_free(p);
 8013692:	6878      	ldr	r0, [r7, #4]
 8013694:	f7fd fe76 	bl	8011384 <pbuf_free>
      return;
 8013698:	e199      	b.n	80139ce <tcp_input+0x7ce>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 801369a:	69fb      	ldr	r3, [r7, #28]
 801369c:	2b00      	cmp	r3, #0
 801369e:	f000 8160 	beq.w	8013962 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80136a2:	4b2a      	ldr	r3, [pc, #168]	; (801374c <tcp_input+0x54c>)
 80136a4:	2200      	movs	r2, #0
 80136a6:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80136a8:	687b      	ldr	r3, [r7, #4]
 80136aa:	891a      	ldrh	r2, [r3, #8]
 80136ac:	4b27      	ldr	r3, [pc, #156]	; (801374c <tcp_input+0x54c>)
 80136ae:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80136b0:	4a26      	ldr	r2, [pc, #152]	; (801374c <tcp_input+0x54c>)
 80136b2:	687b      	ldr	r3, [r7, #4]
 80136b4:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80136b6:	4b1b      	ldr	r3, [pc, #108]	; (8013724 <tcp_input+0x524>)
 80136b8:	681b      	ldr	r3, [r3, #0]
 80136ba:	4a24      	ldr	r2, [pc, #144]	; (801374c <tcp_input+0x54c>)
 80136bc:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80136be:	4b24      	ldr	r3, [pc, #144]	; (8013750 <tcp_input+0x550>)
 80136c0:	2200      	movs	r2, #0
 80136c2:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80136c4:	4b23      	ldr	r3, [pc, #140]	; (8013754 <tcp_input+0x554>)
 80136c6:	2200      	movs	r2, #0
 80136c8:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80136ca:	4b23      	ldr	r3, [pc, #140]	; (8013758 <tcp_input+0x558>)
 80136cc:	2200      	movs	r2, #0
 80136ce:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80136d0:	4b22      	ldr	r3, [pc, #136]	; (801375c <tcp_input+0x55c>)
 80136d2:	781b      	ldrb	r3, [r3, #0]
 80136d4:	f003 0308 	and.w	r3, r3, #8
 80136d8:	2b00      	cmp	r3, #0
 80136da:	d006      	beq.n	80136ea <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	7b5b      	ldrb	r3, [r3, #13]
 80136e0:	f043 0301 	orr.w	r3, r3, #1
 80136e4:	b2da      	uxtb	r2, r3
 80136e6:	687b      	ldr	r3, [r7, #4]
 80136e8:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80136ea:	69fb      	ldr	r3, [r7, #28]
 80136ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80136ee:	2b00      	cmp	r3, #0
 80136f0:	d038      	beq.n	8013764 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80136f2:	69f8      	ldr	r0, [r7, #28]
 80136f4:	f7ff f940 	bl	8012978 <tcp_process_refused_data>
 80136f8:	4603      	mov	r3, r0
 80136fa:	f113 0f0d 	cmn.w	r3, #13
 80136fe:	d007      	beq.n	8013710 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8013700:	69fb      	ldr	r3, [r7, #28]
 8013702:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8013704:	2b00      	cmp	r3, #0
 8013706:	d02d      	beq.n	8013764 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8013708:	4b15      	ldr	r3, [pc, #84]	; (8013760 <tcp_input+0x560>)
 801370a:	881b      	ldrh	r3, [r3, #0]
 801370c:	2b00      	cmp	r3, #0
 801370e:	d029      	beq.n	8013764 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8013710:	69fb      	ldr	r3, [r7, #28]
 8013712:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013714:	2b00      	cmp	r3, #0
 8013716:	f040 8104 	bne.w	8013922 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 801371a:	69f8      	ldr	r0, [r7, #28]
 801371c:	f003 f9ce 	bl	8016abc <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8013720:	e0ff      	b.n	8013922 <tcp_input+0x722>
 8013722:	bf00      	nop
 8013724:	24004928 	.word	0x24004928
 8013728:	24009da0 	.word	0x24009da0
 801372c:	0801ed74 	.word	0x0801ed74
 8013730:	0801eebc 	.word	0x0801eebc
 8013734:	0801eddc 	.word	0x0801eddc
 8013738:	2400ce68 	.word	0x2400ce68
 801373c:	0801eee8 	.word	0x0801eee8
 8013740:	2400ce78 	.word	0x2400ce78
 8013744:	0801ef14 	.word	0x0801ef14
 8013748:	2400ce70 	.word	0x2400ce70
 801374c:	24004918 	.word	0x24004918
 8013750:	24004948 	.word	0x24004948
 8013754:	24004945 	.word	0x24004945
 8013758:	24004940 	.word	0x24004940
 801375c:	24004944 	.word	0x24004944
 8013760:	24004942 	.word	0x24004942
      }
    }
    tcp_input_pcb = pcb;
 8013764:	4a9b      	ldr	r2, [pc, #620]	; (80139d4 <tcp_input+0x7d4>)
 8013766:	69fb      	ldr	r3, [r7, #28]
 8013768:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 801376a:	69f8      	ldr	r0, [r7, #28]
 801376c:	f000 fb0a 	bl	8013d84 <tcp_process>
 8013770:	4603      	mov	r3, r0
 8013772:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8013774:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013778:	f113 0f0d 	cmn.w	r3, #13
 801377c:	f000 80d3 	beq.w	8013926 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 8013780:	4b95      	ldr	r3, [pc, #596]	; (80139d8 <tcp_input+0x7d8>)
 8013782:	781b      	ldrb	r3, [r3, #0]
 8013784:	f003 0308 	and.w	r3, r3, #8
 8013788:	2b00      	cmp	r3, #0
 801378a:	d015      	beq.n	80137b8 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 801378c:	69fb      	ldr	r3, [r7, #28]
 801378e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013792:	2b00      	cmp	r3, #0
 8013794:	d008      	beq.n	80137a8 <tcp_input+0x5a8>
 8013796:	69fb      	ldr	r3, [r7, #28]
 8013798:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801379c:	69fa      	ldr	r2, [r7, #28]
 801379e:	6912      	ldr	r2, [r2, #16]
 80137a0:	f06f 010d 	mvn.w	r1, #13
 80137a4:	4610      	mov	r0, r2
 80137a6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80137a8:	69f9      	ldr	r1, [r7, #28]
 80137aa:	488c      	ldr	r0, [pc, #560]	; (80139dc <tcp_input+0x7dc>)
 80137ac:	f7ff fbb0 	bl	8012f10 <tcp_pcb_remove>
        tcp_free(pcb);
 80137b0:	69f8      	ldr	r0, [r7, #28]
 80137b2:	f7fe f9a9 	bl	8011b08 <tcp_free>
 80137b6:	e0c1      	b.n	801393c <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 80137b8:	2300      	movs	r3, #0
 80137ba:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80137bc:	4b88      	ldr	r3, [pc, #544]	; (80139e0 <tcp_input+0x7e0>)
 80137be:	881b      	ldrh	r3, [r3, #0]
 80137c0:	2b00      	cmp	r3, #0
 80137c2:	d01d      	beq.n	8013800 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80137c4:	4b86      	ldr	r3, [pc, #536]	; (80139e0 <tcp_input+0x7e0>)
 80137c6:	881b      	ldrh	r3, [r3, #0]
 80137c8:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80137ca:	69fb      	ldr	r3, [r7, #28]
 80137cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80137d0:	2b00      	cmp	r3, #0
 80137d2:	d00a      	beq.n	80137ea <tcp_input+0x5ea>
 80137d4:	69fb      	ldr	r3, [r7, #28]
 80137d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80137da:	69fa      	ldr	r2, [r7, #28]
 80137dc:	6910      	ldr	r0, [r2, #16]
 80137de:	89fa      	ldrh	r2, [r7, #14]
 80137e0:	69f9      	ldr	r1, [r7, #28]
 80137e2:	4798      	blx	r3
 80137e4:	4603      	mov	r3, r0
 80137e6:	74fb      	strb	r3, [r7, #19]
 80137e8:	e001      	b.n	80137ee <tcp_input+0x5ee>
 80137ea:	2300      	movs	r3, #0
 80137ec:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80137ee:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80137f2:	f113 0f0d 	cmn.w	r3, #13
 80137f6:	f000 8098 	beq.w	801392a <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 80137fa:	4b79      	ldr	r3, [pc, #484]	; (80139e0 <tcp_input+0x7e0>)
 80137fc:	2200      	movs	r2, #0
 80137fe:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8013800:	69f8      	ldr	r0, [r7, #28]
 8013802:	f000 f905 	bl	8013a10 <tcp_input_delayed_close>
 8013806:	4603      	mov	r3, r0
 8013808:	2b00      	cmp	r3, #0
 801380a:	f040 8090 	bne.w	801392e <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801380e:	4b75      	ldr	r3, [pc, #468]	; (80139e4 <tcp_input+0x7e4>)
 8013810:	681b      	ldr	r3, [r3, #0]
 8013812:	2b00      	cmp	r3, #0
 8013814:	d041      	beq.n	801389a <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8013816:	69fb      	ldr	r3, [r7, #28]
 8013818:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801381a:	2b00      	cmp	r3, #0
 801381c:	d006      	beq.n	801382c <tcp_input+0x62c>
 801381e:	4b72      	ldr	r3, [pc, #456]	; (80139e8 <tcp_input+0x7e8>)
 8013820:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8013824:	4971      	ldr	r1, [pc, #452]	; (80139ec <tcp_input+0x7ec>)
 8013826:	4872      	ldr	r0, [pc, #456]	; (80139f0 <tcp_input+0x7f0>)
 8013828:	f007 fc6a 	bl	801b100 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 801382c:	69fb      	ldr	r3, [r7, #28]
 801382e:	8b5b      	ldrh	r3, [r3, #26]
 8013830:	f003 0310 	and.w	r3, r3, #16
 8013834:	2b00      	cmp	r3, #0
 8013836:	d008      	beq.n	801384a <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8013838:	4b6a      	ldr	r3, [pc, #424]	; (80139e4 <tcp_input+0x7e4>)
 801383a:	681b      	ldr	r3, [r3, #0]
 801383c:	4618      	mov	r0, r3
 801383e:	f7fd fda1 	bl	8011384 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8013842:	69f8      	ldr	r0, [r7, #28]
 8013844:	f7fe fc40 	bl	80120c8 <tcp_abort>
            goto aborted;
 8013848:	e078      	b.n	801393c <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801384a:	69fb      	ldr	r3, [r7, #28]
 801384c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013850:	2b00      	cmp	r3, #0
 8013852:	d00c      	beq.n	801386e <tcp_input+0x66e>
 8013854:	69fb      	ldr	r3, [r7, #28]
 8013856:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801385a:	69fb      	ldr	r3, [r7, #28]
 801385c:	6918      	ldr	r0, [r3, #16]
 801385e:	4b61      	ldr	r3, [pc, #388]	; (80139e4 <tcp_input+0x7e4>)
 8013860:	681a      	ldr	r2, [r3, #0]
 8013862:	2300      	movs	r3, #0
 8013864:	69f9      	ldr	r1, [r7, #28]
 8013866:	47a0      	blx	r4
 8013868:	4603      	mov	r3, r0
 801386a:	74fb      	strb	r3, [r7, #19]
 801386c:	e008      	b.n	8013880 <tcp_input+0x680>
 801386e:	4b5d      	ldr	r3, [pc, #372]	; (80139e4 <tcp_input+0x7e4>)
 8013870:	681a      	ldr	r2, [r3, #0]
 8013872:	2300      	movs	r3, #0
 8013874:	69f9      	ldr	r1, [r7, #28]
 8013876:	2000      	movs	r0, #0
 8013878:	f7ff f952 	bl	8012b20 <tcp_recv_null>
 801387c:	4603      	mov	r3, r0
 801387e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8013880:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013884:	f113 0f0d 	cmn.w	r3, #13
 8013888:	d053      	beq.n	8013932 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 801388a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801388e:	2b00      	cmp	r3, #0
 8013890:	d003      	beq.n	801389a <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8013892:	4b54      	ldr	r3, [pc, #336]	; (80139e4 <tcp_input+0x7e4>)
 8013894:	681a      	ldr	r2, [r3, #0]
 8013896:	69fb      	ldr	r3, [r7, #28]
 8013898:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 801389a:	4b4f      	ldr	r3, [pc, #316]	; (80139d8 <tcp_input+0x7d8>)
 801389c:	781b      	ldrb	r3, [r3, #0]
 801389e:	f003 0320 	and.w	r3, r3, #32
 80138a2:	2b00      	cmp	r3, #0
 80138a4:	d030      	beq.n	8013908 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 80138a6:	69fb      	ldr	r3, [r7, #28]
 80138a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80138aa:	2b00      	cmp	r3, #0
 80138ac:	d009      	beq.n	80138c2 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80138ae:	69fb      	ldr	r3, [r7, #28]
 80138b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80138b2:	7b5a      	ldrb	r2, [r3, #13]
 80138b4:	69fb      	ldr	r3, [r7, #28]
 80138b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80138b8:	f042 0220 	orr.w	r2, r2, #32
 80138bc:	b2d2      	uxtb	r2, r2
 80138be:	735a      	strb	r2, [r3, #13]
 80138c0:	e022      	b.n	8013908 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80138c2:	69fb      	ldr	r3, [r7, #28]
 80138c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80138c6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80138ca:	d005      	beq.n	80138d8 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 80138cc:	69fb      	ldr	r3, [r7, #28]
 80138ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80138d0:	3301      	adds	r3, #1
 80138d2:	b29a      	uxth	r2, r3
 80138d4:	69fb      	ldr	r3, [r7, #28]
 80138d6:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80138d8:	69fb      	ldr	r3, [r7, #28]
 80138da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80138de:	2b00      	cmp	r3, #0
 80138e0:	d00b      	beq.n	80138fa <tcp_input+0x6fa>
 80138e2:	69fb      	ldr	r3, [r7, #28]
 80138e4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80138e8:	69fb      	ldr	r3, [r7, #28]
 80138ea:	6918      	ldr	r0, [r3, #16]
 80138ec:	2300      	movs	r3, #0
 80138ee:	2200      	movs	r2, #0
 80138f0:	69f9      	ldr	r1, [r7, #28]
 80138f2:	47a0      	blx	r4
 80138f4:	4603      	mov	r3, r0
 80138f6:	74fb      	strb	r3, [r7, #19]
 80138f8:	e001      	b.n	80138fe <tcp_input+0x6fe>
 80138fa:	2300      	movs	r3, #0
 80138fc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80138fe:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013902:	f113 0f0d 	cmn.w	r3, #13
 8013906:	d016      	beq.n	8013936 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8013908:	4b32      	ldr	r3, [pc, #200]	; (80139d4 <tcp_input+0x7d4>)
 801390a:	2200      	movs	r2, #0
 801390c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801390e:	69f8      	ldr	r0, [r7, #28]
 8013910:	f000 f87e 	bl	8013a10 <tcp_input_delayed_close>
 8013914:	4603      	mov	r3, r0
 8013916:	2b00      	cmp	r3, #0
 8013918:	d10f      	bne.n	801393a <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 801391a:	69f8      	ldr	r0, [r7, #28]
 801391c:	f002 fab6 	bl	8015e8c <tcp_output>
 8013920:	e00c      	b.n	801393c <tcp_input+0x73c>
        goto aborted;
 8013922:	bf00      	nop
 8013924:	e00a      	b.n	801393c <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8013926:	bf00      	nop
 8013928:	e008      	b.n	801393c <tcp_input+0x73c>
              goto aborted;
 801392a:	bf00      	nop
 801392c:	e006      	b.n	801393c <tcp_input+0x73c>
          goto aborted;
 801392e:	bf00      	nop
 8013930:	e004      	b.n	801393c <tcp_input+0x73c>
            goto aborted;
 8013932:	bf00      	nop
 8013934:	e002      	b.n	801393c <tcp_input+0x73c>
              goto aborted;
 8013936:	bf00      	nop
 8013938:	e000      	b.n	801393c <tcp_input+0x73c>
          goto aborted;
 801393a:	bf00      	nop
    tcp_input_pcb = NULL;
 801393c:	4b25      	ldr	r3, [pc, #148]	; (80139d4 <tcp_input+0x7d4>)
 801393e:	2200      	movs	r2, #0
 8013940:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8013942:	4b28      	ldr	r3, [pc, #160]	; (80139e4 <tcp_input+0x7e4>)
 8013944:	2200      	movs	r2, #0
 8013946:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8013948:	4b2a      	ldr	r3, [pc, #168]	; (80139f4 <tcp_input+0x7f4>)
 801394a:	685b      	ldr	r3, [r3, #4]
 801394c:	2b00      	cmp	r3, #0
 801394e:	d03d      	beq.n	80139cc <tcp_input+0x7cc>
      pbuf_free(inseg.p);
 8013950:	4b28      	ldr	r3, [pc, #160]	; (80139f4 <tcp_input+0x7f4>)
 8013952:	685b      	ldr	r3, [r3, #4]
 8013954:	4618      	mov	r0, r3
 8013956:	f7fd fd15 	bl	8011384 <pbuf_free>
      inseg.p = NULL;
 801395a:	4b26      	ldr	r3, [pc, #152]	; (80139f4 <tcp_input+0x7f4>)
 801395c:	2200      	movs	r2, #0
 801395e:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8013960:	e034      	b.n	80139cc <tcp_input+0x7cc>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8013962:	4b25      	ldr	r3, [pc, #148]	; (80139f8 <tcp_input+0x7f8>)
 8013964:	681b      	ldr	r3, [r3, #0]
 8013966:	899b      	ldrh	r3, [r3, #12]
 8013968:	b29b      	uxth	r3, r3
 801396a:	4618      	mov	r0, r3
 801396c:	f7f9 fd74 	bl	800d458 <lwip_htons>
 8013970:	4603      	mov	r3, r0
 8013972:	b2db      	uxtb	r3, r3
 8013974:	f003 0304 	and.w	r3, r3, #4
 8013978:	2b00      	cmp	r3, #0
 801397a:	d118      	bne.n	80139ae <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801397c:	4b1f      	ldr	r3, [pc, #124]	; (80139fc <tcp_input+0x7fc>)
 801397e:	6819      	ldr	r1, [r3, #0]
 8013980:	4b1f      	ldr	r3, [pc, #124]	; (8013a00 <tcp_input+0x800>)
 8013982:	881b      	ldrh	r3, [r3, #0]
 8013984:	461a      	mov	r2, r3
 8013986:	4b1f      	ldr	r3, [pc, #124]	; (8013a04 <tcp_input+0x804>)
 8013988:	681b      	ldr	r3, [r3, #0]
 801398a:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801398c:	4b1a      	ldr	r3, [pc, #104]	; (80139f8 <tcp_input+0x7f8>)
 801398e:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013990:	885b      	ldrh	r3, [r3, #2]
 8013992:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013994:	4a18      	ldr	r2, [pc, #96]	; (80139f8 <tcp_input+0x7f8>)
 8013996:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013998:	8812      	ldrh	r2, [r2, #0]
 801399a:	b292      	uxth	r2, r2
 801399c:	9202      	str	r2, [sp, #8]
 801399e:	9301      	str	r3, [sp, #4]
 80139a0:	4b19      	ldr	r3, [pc, #100]	; (8013a08 <tcp_input+0x808>)
 80139a2:	9300      	str	r3, [sp, #0]
 80139a4:	4b19      	ldr	r3, [pc, #100]	; (8013a0c <tcp_input+0x80c>)
 80139a6:	4602      	mov	r2, r0
 80139a8:	2000      	movs	r0, #0
 80139aa:	f003 f835 	bl	8016a18 <tcp_rst>
    pbuf_free(p);
 80139ae:	6878      	ldr	r0, [r7, #4]
 80139b0:	f7fd fce8 	bl	8011384 <pbuf_free>
  return;
 80139b4:	e00a      	b.n	80139cc <tcp_input+0x7cc>
    goto dropped;
 80139b6:	bf00      	nop
 80139b8:	e004      	b.n	80139c4 <tcp_input+0x7c4>
dropped:
 80139ba:	bf00      	nop
 80139bc:	e002      	b.n	80139c4 <tcp_input+0x7c4>
      goto dropped;
 80139be:	bf00      	nop
 80139c0:	e000      	b.n	80139c4 <tcp_input+0x7c4>
      goto dropped;
 80139c2:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80139c4:	6878      	ldr	r0, [r7, #4]
 80139c6:	f7fd fcdd 	bl	8011384 <pbuf_free>
 80139ca:	e000      	b.n	80139ce <tcp_input+0x7ce>
  return;
 80139cc:	bf00      	nop
}
 80139ce:	3724      	adds	r7, #36	; 0x24
 80139d0:	46bd      	mov	sp, r7
 80139d2:	bd90      	pop	{r4, r7, pc}
 80139d4:	2400ce7c 	.word	0x2400ce7c
 80139d8:	24004945 	.word	0x24004945
 80139dc:	2400ce68 	.word	0x2400ce68
 80139e0:	24004940 	.word	0x24004940
 80139e4:	24004948 	.word	0x24004948
 80139e8:	0801ed74 	.word	0x0801ed74
 80139ec:	0801ef44 	.word	0x0801ef44
 80139f0:	0801eddc 	.word	0x0801eddc
 80139f4:	24004918 	.word	0x24004918
 80139f8:	24004928 	.word	0x24004928
 80139fc:	2400493c 	.word	0x2400493c
 8013a00:	24004942 	.word	0x24004942
 8013a04:	24004938 	.word	0x24004938
 8013a08:	24009db0 	.word	0x24009db0
 8013a0c:	24009db4 	.word	0x24009db4

08013a10 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8013a10:	b580      	push	{r7, lr}
 8013a12:	b082      	sub	sp, #8
 8013a14:	af00      	add	r7, sp, #0
 8013a16:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8013a18:	687b      	ldr	r3, [r7, #4]
 8013a1a:	2b00      	cmp	r3, #0
 8013a1c:	d106      	bne.n	8013a2c <tcp_input_delayed_close+0x1c>
 8013a1e:	4b17      	ldr	r3, [pc, #92]	; (8013a7c <tcp_input_delayed_close+0x6c>)
 8013a20:	f240 225a 	movw	r2, #602	; 0x25a
 8013a24:	4916      	ldr	r1, [pc, #88]	; (8013a80 <tcp_input_delayed_close+0x70>)
 8013a26:	4817      	ldr	r0, [pc, #92]	; (8013a84 <tcp_input_delayed_close+0x74>)
 8013a28:	f007 fb6a 	bl	801b100 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8013a2c:	4b16      	ldr	r3, [pc, #88]	; (8013a88 <tcp_input_delayed_close+0x78>)
 8013a2e:	781b      	ldrb	r3, [r3, #0]
 8013a30:	f003 0310 	and.w	r3, r3, #16
 8013a34:	2b00      	cmp	r3, #0
 8013a36:	d01c      	beq.n	8013a72 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8013a38:	687b      	ldr	r3, [r7, #4]
 8013a3a:	8b5b      	ldrh	r3, [r3, #26]
 8013a3c:	f003 0310 	and.w	r3, r3, #16
 8013a40:	2b00      	cmp	r3, #0
 8013a42:	d10d      	bne.n	8013a60 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8013a44:	687b      	ldr	r3, [r7, #4]
 8013a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013a4a:	2b00      	cmp	r3, #0
 8013a4c:	d008      	beq.n	8013a60 <tcp_input_delayed_close+0x50>
 8013a4e:	687b      	ldr	r3, [r7, #4]
 8013a50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013a54:	687a      	ldr	r2, [r7, #4]
 8013a56:	6912      	ldr	r2, [r2, #16]
 8013a58:	f06f 010e 	mvn.w	r1, #14
 8013a5c:	4610      	mov	r0, r2
 8013a5e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8013a60:	6879      	ldr	r1, [r7, #4]
 8013a62:	480a      	ldr	r0, [pc, #40]	; (8013a8c <tcp_input_delayed_close+0x7c>)
 8013a64:	f7ff fa54 	bl	8012f10 <tcp_pcb_remove>
    tcp_free(pcb);
 8013a68:	6878      	ldr	r0, [r7, #4]
 8013a6a:	f7fe f84d 	bl	8011b08 <tcp_free>
    return 1;
 8013a6e:	2301      	movs	r3, #1
 8013a70:	e000      	b.n	8013a74 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8013a72:	2300      	movs	r3, #0
}
 8013a74:	4618      	mov	r0, r3
 8013a76:	3708      	adds	r7, #8
 8013a78:	46bd      	mov	sp, r7
 8013a7a:	bd80      	pop	{r7, pc}
 8013a7c:	0801ed74 	.word	0x0801ed74
 8013a80:	0801ef60 	.word	0x0801ef60
 8013a84:	0801eddc 	.word	0x0801eddc
 8013a88:	24004945 	.word	0x24004945
 8013a8c:	2400ce68 	.word	0x2400ce68

08013a90 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8013a90:	b590      	push	{r4, r7, lr}
 8013a92:	b08b      	sub	sp, #44	; 0x2c
 8013a94:	af04      	add	r7, sp, #16
 8013a96:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8013a98:	4b6f      	ldr	r3, [pc, #444]	; (8013c58 <tcp_listen_input+0x1c8>)
 8013a9a:	781b      	ldrb	r3, [r3, #0]
 8013a9c:	f003 0304 	and.w	r3, r3, #4
 8013aa0:	2b00      	cmp	r3, #0
 8013aa2:	f040 80d3 	bne.w	8013c4c <tcp_listen_input+0x1bc>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8013aa6:	687b      	ldr	r3, [r7, #4]
 8013aa8:	2b00      	cmp	r3, #0
 8013aaa:	d106      	bne.n	8013aba <tcp_listen_input+0x2a>
 8013aac:	4b6b      	ldr	r3, [pc, #428]	; (8013c5c <tcp_listen_input+0x1cc>)
 8013aae:	f240 2281 	movw	r2, #641	; 0x281
 8013ab2:	496b      	ldr	r1, [pc, #428]	; (8013c60 <tcp_listen_input+0x1d0>)
 8013ab4:	486b      	ldr	r0, [pc, #428]	; (8013c64 <tcp_listen_input+0x1d4>)
 8013ab6:	f007 fb23 	bl	801b100 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8013aba:	4b67      	ldr	r3, [pc, #412]	; (8013c58 <tcp_listen_input+0x1c8>)
 8013abc:	781b      	ldrb	r3, [r3, #0]
 8013abe:	f003 0310 	and.w	r3, r3, #16
 8013ac2:	2b00      	cmp	r3, #0
 8013ac4:	d019      	beq.n	8013afa <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013ac6:	4b68      	ldr	r3, [pc, #416]	; (8013c68 <tcp_listen_input+0x1d8>)
 8013ac8:	6819      	ldr	r1, [r3, #0]
 8013aca:	4b68      	ldr	r3, [pc, #416]	; (8013c6c <tcp_listen_input+0x1dc>)
 8013acc:	881b      	ldrh	r3, [r3, #0]
 8013ace:	461a      	mov	r2, r3
 8013ad0:	4b67      	ldr	r3, [pc, #412]	; (8013c70 <tcp_listen_input+0x1e0>)
 8013ad2:	681b      	ldr	r3, [r3, #0]
 8013ad4:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013ad6:	4b67      	ldr	r3, [pc, #412]	; (8013c74 <tcp_listen_input+0x1e4>)
 8013ad8:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013ada:	885b      	ldrh	r3, [r3, #2]
 8013adc:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013ade:	4a65      	ldr	r2, [pc, #404]	; (8013c74 <tcp_listen_input+0x1e4>)
 8013ae0:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013ae2:	8812      	ldrh	r2, [r2, #0]
 8013ae4:	b292      	uxth	r2, r2
 8013ae6:	9202      	str	r2, [sp, #8]
 8013ae8:	9301      	str	r3, [sp, #4]
 8013aea:	4b63      	ldr	r3, [pc, #396]	; (8013c78 <tcp_listen_input+0x1e8>)
 8013aec:	9300      	str	r3, [sp, #0]
 8013aee:	4b63      	ldr	r3, [pc, #396]	; (8013c7c <tcp_listen_input+0x1ec>)
 8013af0:	4602      	mov	r2, r0
 8013af2:	6878      	ldr	r0, [r7, #4]
 8013af4:	f002 ff90 	bl	8016a18 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8013af8:	e0aa      	b.n	8013c50 <tcp_listen_input+0x1c0>
  } else if (flags & TCP_SYN) {
 8013afa:	4b57      	ldr	r3, [pc, #348]	; (8013c58 <tcp_listen_input+0x1c8>)
 8013afc:	781b      	ldrb	r3, [r3, #0]
 8013afe:	f003 0302 	and.w	r3, r3, #2
 8013b02:	2b00      	cmp	r3, #0
 8013b04:	f000 80a4 	beq.w	8013c50 <tcp_listen_input+0x1c0>
    npcb = tcp_alloc(pcb->prio);
 8013b08:	687b      	ldr	r3, [r7, #4]
 8013b0a:	7d5b      	ldrb	r3, [r3, #21]
 8013b0c:	4618      	mov	r0, r3
 8013b0e:	f7ff f92b 	bl	8012d68 <tcp_alloc>
 8013b12:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8013b14:	697b      	ldr	r3, [r7, #20]
 8013b16:	2b00      	cmp	r3, #0
 8013b18:	d111      	bne.n	8013b3e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8013b1a:	687b      	ldr	r3, [r7, #4]
 8013b1c:	699b      	ldr	r3, [r3, #24]
 8013b1e:	2b00      	cmp	r3, #0
 8013b20:	d00a      	beq.n	8013b38 <tcp_listen_input+0xa8>
 8013b22:	687b      	ldr	r3, [r7, #4]
 8013b24:	699b      	ldr	r3, [r3, #24]
 8013b26:	687a      	ldr	r2, [r7, #4]
 8013b28:	6910      	ldr	r0, [r2, #16]
 8013b2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013b2e:	2100      	movs	r1, #0
 8013b30:	4798      	blx	r3
 8013b32:	4603      	mov	r3, r0
 8013b34:	73bb      	strb	r3, [r7, #14]
      return;
 8013b36:	e08c      	b.n	8013c52 <tcp_listen_input+0x1c2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8013b38:	23f0      	movs	r3, #240	; 0xf0
 8013b3a:	73bb      	strb	r3, [r7, #14]
      return;
 8013b3c:	e089      	b.n	8013c52 <tcp_listen_input+0x1c2>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8013b3e:	4b50      	ldr	r3, [pc, #320]	; (8013c80 <tcp_listen_input+0x1f0>)
 8013b40:	695a      	ldr	r2, [r3, #20]
 8013b42:	697b      	ldr	r3, [r7, #20]
 8013b44:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8013b46:	4b4e      	ldr	r3, [pc, #312]	; (8013c80 <tcp_listen_input+0x1f0>)
 8013b48:	691a      	ldr	r2, [r3, #16]
 8013b4a:	697b      	ldr	r3, [r7, #20]
 8013b4c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8013b4e:	687b      	ldr	r3, [r7, #4]
 8013b50:	8ada      	ldrh	r2, [r3, #22]
 8013b52:	697b      	ldr	r3, [r7, #20]
 8013b54:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8013b56:	4b47      	ldr	r3, [pc, #284]	; (8013c74 <tcp_listen_input+0x1e4>)
 8013b58:	681b      	ldr	r3, [r3, #0]
 8013b5a:	881b      	ldrh	r3, [r3, #0]
 8013b5c:	b29a      	uxth	r2, r3
 8013b5e:	697b      	ldr	r3, [r7, #20]
 8013b60:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8013b62:	697b      	ldr	r3, [r7, #20]
 8013b64:	2203      	movs	r2, #3
 8013b66:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8013b68:	4b41      	ldr	r3, [pc, #260]	; (8013c70 <tcp_listen_input+0x1e0>)
 8013b6a:	681b      	ldr	r3, [r3, #0]
 8013b6c:	1c5a      	adds	r2, r3, #1
 8013b6e:	697b      	ldr	r3, [r7, #20]
 8013b70:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8013b72:	697b      	ldr	r3, [r7, #20]
 8013b74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013b76:	697b      	ldr	r3, [r7, #20]
 8013b78:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8013b7a:	6978      	ldr	r0, [r7, #20]
 8013b7c:	f7ff fa5c 	bl	8013038 <tcp_next_iss>
 8013b80:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8013b82:	697b      	ldr	r3, [r7, #20]
 8013b84:	693a      	ldr	r2, [r7, #16]
 8013b86:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8013b88:	697b      	ldr	r3, [r7, #20]
 8013b8a:	693a      	ldr	r2, [r7, #16]
 8013b8c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8013b8e:	697b      	ldr	r3, [r7, #20]
 8013b90:	693a      	ldr	r2, [r7, #16]
 8013b92:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8013b94:	697b      	ldr	r3, [r7, #20]
 8013b96:	693a      	ldr	r2, [r7, #16]
 8013b98:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8013b9a:	4b35      	ldr	r3, [pc, #212]	; (8013c70 <tcp_listen_input+0x1e0>)
 8013b9c:	681b      	ldr	r3, [r3, #0]
 8013b9e:	1e5a      	subs	r2, r3, #1
 8013ba0:	697b      	ldr	r3, [r7, #20]
 8013ba2:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8013ba4:	687b      	ldr	r3, [r7, #4]
 8013ba6:	691a      	ldr	r2, [r3, #16]
 8013ba8:	697b      	ldr	r3, [r7, #20]
 8013baa:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8013bac:	697b      	ldr	r3, [r7, #20]
 8013bae:	687a      	ldr	r2, [r7, #4]
 8013bb0:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8013bb2:	687b      	ldr	r3, [r7, #4]
 8013bb4:	7a5b      	ldrb	r3, [r3, #9]
 8013bb6:	f003 030c 	and.w	r3, r3, #12
 8013bba:	b2da      	uxtb	r2, r3
 8013bbc:	697b      	ldr	r3, [r7, #20]
 8013bbe:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	7a1a      	ldrb	r2, [r3, #8]
 8013bc4:	697b      	ldr	r3, [r7, #20]
 8013bc6:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8013bc8:	4b2e      	ldr	r3, [pc, #184]	; (8013c84 <tcp_listen_input+0x1f4>)
 8013bca:	681a      	ldr	r2, [r3, #0]
 8013bcc:	697b      	ldr	r3, [r7, #20]
 8013bce:	60da      	str	r2, [r3, #12]
 8013bd0:	4a2c      	ldr	r2, [pc, #176]	; (8013c84 <tcp_listen_input+0x1f4>)
 8013bd2:	697b      	ldr	r3, [r7, #20]
 8013bd4:	6013      	str	r3, [r2, #0]
 8013bd6:	f003 fa7f 	bl	80170d8 <tcp_timer_needed>
 8013bda:	4b2b      	ldr	r3, [pc, #172]	; (8013c88 <tcp_listen_input+0x1f8>)
 8013bdc:	2201      	movs	r2, #1
 8013bde:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8013be0:	6978      	ldr	r0, [r7, #20]
 8013be2:	f001 fd8f 	bl	8015704 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8013be6:	4b23      	ldr	r3, [pc, #140]	; (8013c74 <tcp_listen_input+0x1e4>)
 8013be8:	681b      	ldr	r3, [r3, #0]
 8013bea:	89db      	ldrh	r3, [r3, #14]
 8013bec:	b29a      	uxth	r2, r3
 8013bee:	697b      	ldr	r3, [r7, #20]
 8013bf0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8013bf4:	697b      	ldr	r3, [r7, #20]
 8013bf6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8013bfa:	697b      	ldr	r3, [r7, #20]
 8013bfc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8013c00:	697b      	ldr	r3, [r7, #20]
 8013c02:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8013c04:	697b      	ldr	r3, [r7, #20]
 8013c06:	3304      	adds	r3, #4
 8013c08:	4618      	mov	r0, r3
 8013c0a:	f7fa fefd 	bl	800ea08 <ip4_route>
 8013c0e:	4601      	mov	r1, r0
 8013c10:	697b      	ldr	r3, [r7, #20]
 8013c12:	3304      	adds	r3, #4
 8013c14:	461a      	mov	r2, r3
 8013c16:	4620      	mov	r0, r4
 8013c18:	f7ff fa34 	bl	8013084 <tcp_eff_send_mss_netif>
 8013c1c:	4603      	mov	r3, r0
 8013c1e:	461a      	mov	r2, r3
 8013c20:	697b      	ldr	r3, [r7, #20]
 8013c22:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8013c24:	2112      	movs	r1, #18
 8013c26:	6978      	ldr	r0, [r7, #20]
 8013c28:	f002 f842 	bl	8015cb0 <tcp_enqueue_flags>
 8013c2c:	4603      	mov	r3, r0
 8013c2e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8013c30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013c34:	2b00      	cmp	r3, #0
 8013c36:	d004      	beq.n	8013c42 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8013c38:	2100      	movs	r1, #0
 8013c3a:	6978      	ldr	r0, [r7, #20]
 8013c3c:	f7fe f986 	bl	8011f4c <tcp_abandon>
      return;
 8013c40:	e007      	b.n	8013c52 <tcp_listen_input+0x1c2>
    tcp_output(npcb);
 8013c42:	6978      	ldr	r0, [r7, #20]
 8013c44:	f002 f922 	bl	8015e8c <tcp_output>
  return;
 8013c48:	bf00      	nop
 8013c4a:	e001      	b.n	8013c50 <tcp_listen_input+0x1c0>
    return;
 8013c4c:	bf00      	nop
 8013c4e:	e000      	b.n	8013c52 <tcp_listen_input+0x1c2>
  return;
 8013c50:	bf00      	nop
}
 8013c52:	371c      	adds	r7, #28
 8013c54:	46bd      	mov	sp, r7
 8013c56:	bd90      	pop	{r4, r7, pc}
 8013c58:	24004944 	.word	0x24004944
 8013c5c:	0801ed74 	.word	0x0801ed74
 8013c60:	0801ef88 	.word	0x0801ef88
 8013c64:	0801eddc 	.word	0x0801eddc
 8013c68:	2400493c 	.word	0x2400493c
 8013c6c:	24004942 	.word	0x24004942
 8013c70:	24004938 	.word	0x24004938
 8013c74:	24004928 	.word	0x24004928
 8013c78:	24009db0 	.word	0x24009db0
 8013c7c:	24009db4 	.word	0x24009db4
 8013c80:	24009da0 	.word	0x24009da0
 8013c84:	2400ce68 	.word	0x2400ce68
 8013c88:	2400ce64 	.word	0x2400ce64

08013c8c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8013c8c:	b580      	push	{r7, lr}
 8013c8e:	b086      	sub	sp, #24
 8013c90:	af04      	add	r7, sp, #16
 8013c92:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8013c94:	4b30      	ldr	r3, [pc, #192]	; (8013d58 <tcp_timewait_input+0xcc>)
 8013c96:	781b      	ldrb	r3, [r3, #0]
 8013c98:	f003 0304 	and.w	r3, r3, #4
 8013c9c:	2b00      	cmp	r3, #0
 8013c9e:	d154      	bne.n	8013d4a <tcp_timewait_input+0xbe>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8013ca0:	687b      	ldr	r3, [r7, #4]
 8013ca2:	2b00      	cmp	r3, #0
 8013ca4:	d106      	bne.n	8013cb4 <tcp_timewait_input+0x28>
 8013ca6:	4b2d      	ldr	r3, [pc, #180]	; (8013d5c <tcp_timewait_input+0xd0>)
 8013ca8:	f240 22ee 	movw	r2, #750	; 0x2ee
 8013cac:	492c      	ldr	r1, [pc, #176]	; (8013d60 <tcp_timewait_input+0xd4>)
 8013cae:	482d      	ldr	r0, [pc, #180]	; (8013d64 <tcp_timewait_input+0xd8>)
 8013cb0:	f007 fa26 	bl	801b100 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8013cb4:	4b28      	ldr	r3, [pc, #160]	; (8013d58 <tcp_timewait_input+0xcc>)
 8013cb6:	781b      	ldrb	r3, [r3, #0]
 8013cb8:	f003 0302 	and.w	r3, r3, #2
 8013cbc:	2b00      	cmp	r3, #0
 8013cbe:	d02a      	beq.n	8013d16 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8013cc0:	4b29      	ldr	r3, [pc, #164]	; (8013d68 <tcp_timewait_input+0xdc>)
 8013cc2:	681a      	ldr	r2, [r3, #0]
 8013cc4:	687b      	ldr	r3, [r7, #4]
 8013cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013cc8:	1ad3      	subs	r3, r2, r3
 8013cca:	2b00      	cmp	r3, #0
 8013ccc:	db2d      	blt.n	8013d2a <tcp_timewait_input+0x9e>
 8013cce:	4b26      	ldr	r3, [pc, #152]	; (8013d68 <tcp_timewait_input+0xdc>)
 8013cd0:	681a      	ldr	r2, [r3, #0]
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013cd6:	6879      	ldr	r1, [r7, #4]
 8013cd8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013cda:	440b      	add	r3, r1
 8013cdc:	1ad3      	subs	r3, r2, r3
 8013cde:	2b00      	cmp	r3, #0
 8013ce0:	dc23      	bgt.n	8013d2a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013ce2:	4b22      	ldr	r3, [pc, #136]	; (8013d6c <tcp_timewait_input+0xe0>)
 8013ce4:	6819      	ldr	r1, [r3, #0]
 8013ce6:	4b22      	ldr	r3, [pc, #136]	; (8013d70 <tcp_timewait_input+0xe4>)
 8013ce8:	881b      	ldrh	r3, [r3, #0]
 8013cea:	461a      	mov	r2, r3
 8013cec:	4b1e      	ldr	r3, [pc, #120]	; (8013d68 <tcp_timewait_input+0xdc>)
 8013cee:	681b      	ldr	r3, [r3, #0]
 8013cf0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013cf2:	4b20      	ldr	r3, [pc, #128]	; (8013d74 <tcp_timewait_input+0xe8>)
 8013cf4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013cf6:	885b      	ldrh	r3, [r3, #2]
 8013cf8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013cfa:	4a1e      	ldr	r2, [pc, #120]	; (8013d74 <tcp_timewait_input+0xe8>)
 8013cfc:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013cfe:	8812      	ldrh	r2, [r2, #0]
 8013d00:	b292      	uxth	r2, r2
 8013d02:	9202      	str	r2, [sp, #8]
 8013d04:	9301      	str	r3, [sp, #4]
 8013d06:	4b1c      	ldr	r3, [pc, #112]	; (8013d78 <tcp_timewait_input+0xec>)
 8013d08:	9300      	str	r3, [sp, #0]
 8013d0a:	4b1c      	ldr	r3, [pc, #112]	; (8013d7c <tcp_timewait_input+0xf0>)
 8013d0c:	4602      	mov	r2, r0
 8013d0e:	6878      	ldr	r0, [r7, #4]
 8013d10:	f002 fe82 	bl	8016a18 <tcp_rst>
      return;
 8013d14:	e01c      	b.n	8013d50 <tcp_timewait_input+0xc4>
    }
  } else if (flags & TCP_FIN) {
 8013d16:	4b10      	ldr	r3, [pc, #64]	; (8013d58 <tcp_timewait_input+0xcc>)
 8013d18:	781b      	ldrb	r3, [r3, #0]
 8013d1a:	f003 0301 	and.w	r3, r3, #1
 8013d1e:	2b00      	cmp	r3, #0
 8013d20:	d003      	beq.n	8013d2a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8013d22:	4b17      	ldr	r3, [pc, #92]	; (8013d80 <tcp_timewait_input+0xf4>)
 8013d24:	681a      	ldr	r2, [r3, #0]
 8013d26:	687b      	ldr	r3, [r7, #4]
 8013d28:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8013d2a:	4b11      	ldr	r3, [pc, #68]	; (8013d70 <tcp_timewait_input+0xe4>)
 8013d2c:	881b      	ldrh	r3, [r3, #0]
 8013d2e:	2b00      	cmp	r3, #0
 8013d30:	d00d      	beq.n	8013d4e <tcp_timewait_input+0xc2>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8013d32:	687b      	ldr	r3, [r7, #4]
 8013d34:	8b5b      	ldrh	r3, [r3, #26]
 8013d36:	f043 0302 	orr.w	r3, r3, #2
 8013d3a:	b29a      	uxth	r2, r3
 8013d3c:	687b      	ldr	r3, [r7, #4]
 8013d3e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8013d40:	6878      	ldr	r0, [r7, #4]
 8013d42:	f002 f8a3 	bl	8015e8c <tcp_output>
  }
  return;
 8013d46:	bf00      	nop
 8013d48:	e001      	b.n	8013d4e <tcp_timewait_input+0xc2>
    return;
 8013d4a:	bf00      	nop
 8013d4c:	e000      	b.n	8013d50 <tcp_timewait_input+0xc4>
  return;
 8013d4e:	bf00      	nop
}
 8013d50:	3708      	adds	r7, #8
 8013d52:	46bd      	mov	sp, r7
 8013d54:	bd80      	pop	{r7, pc}
 8013d56:	bf00      	nop
 8013d58:	24004944 	.word	0x24004944
 8013d5c:	0801ed74 	.word	0x0801ed74
 8013d60:	0801efa8 	.word	0x0801efa8
 8013d64:	0801eddc 	.word	0x0801eddc
 8013d68:	24004938 	.word	0x24004938
 8013d6c:	2400493c 	.word	0x2400493c
 8013d70:	24004942 	.word	0x24004942
 8013d74:	24004928 	.word	0x24004928
 8013d78:	24009db0 	.word	0x24009db0
 8013d7c:	24009db4 	.word	0x24009db4
 8013d80:	2400ce6c 	.word	0x2400ce6c

08013d84 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8013d84:	b590      	push	{r4, r7, lr}
 8013d86:	b08d      	sub	sp, #52	; 0x34
 8013d88:	af04      	add	r7, sp, #16
 8013d8a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8013d8c:	2300      	movs	r3, #0
 8013d8e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8013d90:	2300      	movs	r3, #0
 8013d92:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8013d94:	687b      	ldr	r3, [r7, #4]
 8013d96:	2b00      	cmp	r3, #0
 8013d98:	d106      	bne.n	8013da8 <tcp_process+0x24>
 8013d9a:	4ba5      	ldr	r3, [pc, #660]	; (8014030 <tcp_process+0x2ac>)
 8013d9c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8013da0:	49a4      	ldr	r1, [pc, #656]	; (8014034 <tcp_process+0x2b0>)
 8013da2:	48a5      	ldr	r0, [pc, #660]	; (8014038 <tcp_process+0x2b4>)
 8013da4:	f007 f9ac 	bl	801b100 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8013da8:	4ba4      	ldr	r3, [pc, #656]	; (801403c <tcp_process+0x2b8>)
 8013daa:	781b      	ldrb	r3, [r3, #0]
 8013dac:	f003 0304 	and.w	r3, r3, #4
 8013db0:	2b00      	cmp	r3, #0
 8013db2:	d04e      	beq.n	8013e52 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	7d1b      	ldrb	r3, [r3, #20]
 8013db8:	2b02      	cmp	r3, #2
 8013dba:	d108      	bne.n	8013dce <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013dc0:	4b9f      	ldr	r3, [pc, #636]	; (8014040 <tcp_process+0x2bc>)
 8013dc2:	681b      	ldr	r3, [r3, #0]
 8013dc4:	429a      	cmp	r2, r3
 8013dc6:	d123      	bne.n	8013e10 <tcp_process+0x8c>
        acceptable = 1;
 8013dc8:	2301      	movs	r3, #1
 8013dca:	76fb      	strb	r3, [r7, #27]
 8013dcc:	e020      	b.n	8013e10 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8013dce:	687b      	ldr	r3, [r7, #4]
 8013dd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013dd2:	4b9c      	ldr	r3, [pc, #624]	; (8014044 <tcp_process+0x2c0>)
 8013dd4:	681b      	ldr	r3, [r3, #0]
 8013dd6:	429a      	cmp	r2, r3
 8013dd8:	d102      	bne.n	8013de0 <tcp_process+0x5c>
        acceptable = 1;
 8013dda:	2301      	movs	r3, #1
 8013ddc:	76fb      	strb	r3, [r7, #27]
 8013dde:	e017      	b.n	8013e10 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8013de0:	4b98      	ldr	r3, [pc, #608]	; (8014044 <tcp_process+0x2c0>)
 8013de2:	681a      	ldr	r2, [r3, #0]
 8013de4:	687b      	ldr	r3, [r7, #4]
 8013de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013de8:	1ad3      	subs	r3, r2, r3
 8013dea:	2b00      	cmp	r3, #0
 8013dec:	db10      	blt.n	8013e10 <tcp_process+0x8c>
 8013dee:	4b95      	ldr	r3, [pc, #596]	; (8014044 <tcp_process+0x2c0>)
 8013df0:	681a      	ldr	r2, [r3, #0]
 8013df2:	687b      	ldr	r3, [r7, #4]
 8013df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013df6:	6879      	ldr	r1, [r7, #4]
 8013df8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013dfa:	440b      	add	r3, r1
 8013dfc:	1ad3      	subs	r3, r2, r3
 8013dfe:	2b00      	cmp	r3, #0
 8013e00:	dc06      	bgt.n	8013e10 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8013e02:	687b      	ldr	r3, [r7, #4]
 8013e04:	8b5b      	ldrh	r3, [r3, #26]
 8013e06:	f043 0302 	orr.w	r3, r3, #2
 8013e0a:	b29a      	uxth	r2, r3
 8013e0c:	687b      	ldr	r3, [r7, #4]
 8013e0e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8013e10:	7efb      	ldrb	r3, [r7, #27]
 8013e12:	2b00      	cmp	r3, #0
 8013e14:	d01b      	beq.n	8013e4e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8013e16:	687b      	ldr	r3, [r7, #4]
 8013e18:	7d1b      	ldrb	r3, [r3, #20]
 8013e1a:	2b00      	cmp	r3, #0
 8013e1c:	d106      	bne.n	8013e2c <tcp_process+0xa8>
 8013e1e:	4b84      	ldr	r3, [pc, #528]	; (8014030 <tcp_process+0x2ac>)
 8013e20:	f44f 724e 	mov.w	r2, #824	; 0x338
 8013e24:	4988      	ldr	r1, [pc, #544]	; (8014048 <tcp_process+0x2c4>)
 8013e26:	4884      	ldr	r0, [pc, #528]	; (8014038 <tcp_process+0x2b4>)
 8013e28:	f007 f96a 	bl	801b100 <iprintf>
      recv_flags |= TF_RESET;
 8013e2c:	4b87      	ldr	r3, [pc, #540]	; (801404c <tcp_process+0x2c8>)
 8013e2e:	781b      	ldrb	r3, [r3, #0]
 8013e30:	f043 0308 	orr.w	r3, r3, #8
 8013e34:	b2da      	uxtb	r2, r3
 8013e36:	4b85      	ldr	r3, [pc, #532]	; (801404c <tcp_process+0x2c8>)
 8013e38:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	8b5b      	ldrh	r3, [r3, #26]
 8013e3e:	f023 0301 	bic.w	r3, r3, #1
 8013e42:	b29a      	uxth	r2, r3
 8013e44:	687b      	ldr	r3, [r7, #4]
 8013e46:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8013e48:	f06f 030d 	mvn.w	r3, #13
 8013e4c:	e37a      	b.n	8014544 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8013e4e:	2300      	movs	r3, #0
 8013e50:	e378      	b.n	8014544 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8013e52:	4b7a      	ldr	r3, [pc, #488]	; (801403c <tcp_process+0x2b8>)
 8013e54:	781b      	ldrb	r3, [r3, #0]
 8013e56:	f003 0302 	and.w	r3, r3, #2
 8013e5a:	2b00      	cmp	r3, #0
 8013e5c:	d010      	beq.n	8013e80 <tcp_process+0xfc>
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	7d1b      	ldrb	r3, [r3, #20]
 8013e62:	2b02      	cmp	r3, #2
 8013e64:	d00c      	beq.n	8013e80 <tcp_process+0xfc>
 8013e66:	687b      	ldr	r3, [r7, #4]
 8013e68:	7d1b      	ldrb	r3, [r3, #20]
 8013e6a:	2b03      	cmp	r3, #3
 8013e6c:	d008      	beq.n	8013e80 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8013e6e:	687b      	ldr	r3, [r7, #4]
 8013e70:	8b5b      	ldrh	r3, [r3, #26]
 8013e72:	f043 0302 	orr.w	r3, r3, #2
 8013e76:	b29a      	uxth	r2, r3
 8013e78:	687b      	ldr	r3, [r7, #4]
 8013e7a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8013e7c:	2300      	movs	r3, #0
 8013e7e:	e361      	b.n	8014544 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8013e80:	687b      	ldr	r3, [r7, #4]
 8013e82:	8b5b      	ldrh	r3, [r3, #26]
 8013e84:	f003 0310 	and.w	r3, r3, #16
 8013e88:	2b00      	cmp	r3, #0
 8013e8a:	d103      	bne.n	8013e94 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8013e8c:	4b70      	ldr	r3, [pc, #448]	; (8014050 <tcp_process+0x2cc>)
 8013e8e:	681a      	ldr	r2, [r3, #0]
 8013e90:	687b      	ldr	r3, [r7, #4]
 8013e92:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8013e94:	687b      	ldr	r3, [r7, #4]
 8013e96:	2200      	movs	r2, #0
 8013e98:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8013e9c:	687b      	ldr	r3, [r7, #4]
 8013e9e:	2200      	movs	r2, #0
 8013ea0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8013ea4:	6878      	ldr	r0, [r7, #4]
 8013ea6:	f001 fc2d 	bl	8015704 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8013eaa:	687b      	ldr	r3, [r7, #4]
 8013eac:	7d1b      	ldrb	r3, [r3, #20]
 8013eae:	3b02      	subs	r3, #2
 8013eb0:	2b07      	cmp	r3, #7
 8013eb2:	f200 8337 	bhi.w	8014524 <tcp_process+0x7a0>
 8013eb6:	a201      	add	r2, pc, #4	; (adr r2, 8013ebc <tcp_process+0x138>)
 8013eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013ebc:	08013edd 	.word	0x08013edd
 8013ec0:	0801410d 	.word	0x0801410d
 8013ec4:	08014285 	.word	0x08014285
 8013ec8:	080142af 	.word	0x080142af
 8013ecc:	080143d3 	.word	0x080143d3
 8013ed0:	08014285 	.word	0x08014285
 8013ed4:	0801445f 	.word	0x0801445f
 8013ed8:	080144ef 	.word	0x080144ef
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8013edc:	4b57      	ldr	r3, [pc, #348]	; (801403c <tcp_process+0x2b8>)
 8013ede:	781b      	ldrb	r3, [r3, #0]
 8013ee0:	f003 0310 	and.w	r3, r3, #16
 8013ee4:	2b00      	cmp	r3, #0
 8013ee6:	f000 80e4 	beq.w	80140b2 <tcp_process+0x32e>
 8013eea:	4b54      	ldr	r3, [pc, #336]	; (801403c <tcp_process+0x2b8>)
 8013eec:	781b      	ldrb	r3, [r3, #0]
 8013eee:	f003 0302 	and.w	r3, r3, #2
 8013ef2:	2b00      	cmp	r3, #0
 8013ef4:	f000 80dd 	beq.w	80140b2 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8013ef8:	687b      	ldr	r3, [r7, #4]
 8013efa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013efc:	1c5a      	adds	r2, r3, #1
 8013efe:	4b50      	ldr	r3, [pc, #320]	; (8014040 <tcp_process+0x2bc>)
 8013f00:	681b      	ldr	r3, [r3, #0]
 8013f02:	429a      	cmp	r2, r3
 8013f04:	f040 80d5 	bne.w	80140b2 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8013f08:	4b4e      	ldr	r3, [pc, #312]	; (8014044 <tcp_process+0x2c0>)
 8013f0a:	681b      	ldr	r3, [r3, #0]
 8013f0c:	1c5a      	adds	r2, r3, #1
 8013f0e:	687b      	ldr	r3, [r7, #4]
 8013f10:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8013f12:	687b      	ldr	r3, [r7, #4]
 8013f14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013f16:	687b      	ldr	r3, [r7, #4]
 8013f18:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8013f1a:	4b49      	ldr	r3, [pc, #292]	; (8014040 <tcp_process+0x2bc>)
 8013f1c:	681a      	ldr	r2, [r3, #0]
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8013f22:	4b4c      	ldr	r3, [pc, #304]	; (8014054 <tcp_process+0x2d0>)
 8013f24:	681b      	ldr	r3, [r3, #0]
 8013f26:	89db      	ldrh	r3, [r3, #14]
 8013f28:	b29a      	uxth	r2, r3
 8013f2a:	687b      	ldr	r3, [r7, #4]
 8013f2c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8013f30:	687b      	ldr	r3, [r7, #4]
 8013f32:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8013f36:	687b      	ldr	r3, [r7, #4]
 8013f38:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8013f3c:	4b41      	ldr	r3, [pc, #260]	; (8014044 <tcp_process+0x2c0>)
 8013f3e:	681b      	ldr	r3, [r3, #0]
 8013f40:	1e5a      	subs	r2, r3, #1
 8013f42:	687b      	ldr	r3, [r7, #4]
 8013f44:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8013f46:	687b      	ldr	r3, [r7, #4]
 8013f48:	2204      	movs	r2, #4
 8013f4a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8013f4c:	687b      	ldr	r3, [r7, #4]
 8013f4e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8013f50:	687b      	ldr	r3, [r7, #4]
 8013f52:	3304      	adds	r3, #4
 8013f54:	4618      	mov	r0, r3
 8013f56:	f7fa fd57 	bl	800ea08 <ip4_route>
 8013f5a:	4601      	mov	r1, r0
 8013f5c:	687b      	ldr	r3, [r7, #4]
 8013f5e:	3304      	adds	r3, #4
 8013f60:	461a      	mov	r2, r3
 8013f62:	4620      	mov	r0, r4
 8013f64:	f7ff f88e 	bl	8013084 <tcp_eff_send_mss_netif>
 8013f68:	4603      	mov	r3, r0
 8013f6a:	461a      	mov	r2, r3
 8013f6c:	687b      	ldr	r3, [r7, #4]
 8013f6e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8013f70:	687b      	ldr	r3, [r7, #4]
 8013f72:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013f74:	009a      	lsls	r2, r3, #2
 8013f76:	687b      	ldr	r3, [r7, #4]
 8013f78:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013f7a:	005b      	lsls	r3, r3, #1
 8013f7c:	f241 111c 	movw	r1, #4380	; 0x111c
 8013f80:	428b      	cmp	r3, r1
 8013f82:	bf38      	it	cc
 8013f84:	460b      	movcc	r3, r1
 8013f86:	429a      	cmp	r2, r3
 8013f88:	d204      	bcs.n	8013f94 <tcp_process+0x210>
 8013f8a:	687b      	ldr	r3, [r7, #4]
 8013f8c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013f8e:	009b      	lsls	r3, r3, #2
 8013f90:	b29b      	uxth	r3, r3
 8013f92:	e00d      	b.n	8013fb0 <tcp_process+0x22c>
 8013f94:	687b      	ldr	r3, [r7, #4]
 8013f96:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013f98:	005b      	lsls	r3, r3, #1
 8013f9a:	f241 121c 	movw	r2, #4380	; 0x111c
 8013f9e:	4293      	cmp	r3, r2
 8013fa0:	d904      	bls.n	8013fac <tcp_process+0x228>
 8013fa2:	687b      	ldr	r3, [r7, #4]
 8013fa4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013fa6:	005b      	lsls	r3, r3, #1
 8013fa8:	b29b      	uxth	r3, r3
 8013faa:	e001      	b.n	8013fb0 <tcp_process+0x22c>
 8013fac:	f241 131c 	movw	r3, #4380	; 0x111c
 8013fb0:	687a      	ldr	r2, [r7, #4]
 8013fb2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8013fb6:	687b      	ldr	r3, [r7, #4]
 8013fb8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013fbc:	2b00      	cmp	r3, #0
 8013fbe:	d106      	bne.n	8013fce <tcp_process+0x24a>
 8013fc0:	4b1b      	ldr	r3, [pc, #108]	; (8014030 <tcp_process+0x2ac>)
 8013fc2:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8013fc6:	4924      	ldr	r1, [pc, #144]	; (8014058 <tcp_process+0x2d4>)
 8013fc8:	481b      	ldr	r0, [pc, #108]	; (8014038 <tcp_process+0x2b4>)
 8013fca:	f007 f899 	bl	801b100 <iprintf>
        --pcb->snd_queuelen;
 8013fce:	687b      	ldr	r3, [r7, #4]
 8013fd0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013fd4:	3b01      	subs	r3, #1
 8013fd6:	b29a      	uxth	r2, r3
 8013fd8:	687b      	ldr	r3, [r7, #4]
 8013fda:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8013fde:	687b      	ldr	r3, [r7, #4]
 8013fe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013fe2:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8013fe4:	69fb      	ldr	r3, [r7, #28]
 8013fe6:	2b00      	cmp	r3, #0
 8013fe8:	d111      	bne.n	801400e <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8013fea:	687b      	ldr	r3, [r7, #4]
 8013fec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013fee:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8013ff0:	69fb      	ldr	r3, [r7, #28]
 8013ff2:	2b00      	cmp	r3, #0
 8013ff4:	d106      	bne.n	8014004 <tcp_process+0x280>
 8013ff6:	4b0e      	ldr	r3, [pc, #56]	; (8014030 <tcp_process+0x2ac>)
 8013ff8:	f44f 725d 	mov.w	r2, #884	; 0x374
 8013ffc:	4917      	ldr	r1, [pc, #92]	; (801405c <tcp_process+0x2d8>)
 8013ffe:	480e      	ldr	r0, [pc, #56]	; (8014038 <tcp_process+0x2b4>)
 8014000:	f007 f87e 	bl	801b100 <iprintf>
          pcb->unsent = rseg->next;
 8014004:	69fb      	ldr	r3, [r7, #28]
 8014006:	681a      	ldr	r2, [r3, #0]
 8014008:	687b      	ldr	r3, [r7, #4]
 801400a:	66da      	str	r2, [r3, #108]	; 0x6c
 801400c:	e003      	b.n	8014016 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 801400e:	69fb      	ldr	r3, [r7, #28]
 8014010:	681a      	ldr	r2, [r3, #0]
 8014012:	687b      	ldr	r3, [r7, #4]
 8014014:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8014016:	69f8      	ldr	r0, [r7, #28]
 8014018:	f7fe fd3e 	bl	8012a98 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 801401c:	687b      	ldr	r3, [r7, #4]
 801401e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014020:	2b00      	cmp	r3, #0
 8014022:	d11d      	bne.n	8014060 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8014024:	687b      	ldr	r3, [r7, #4]
 8014026:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801402a:	861a      	strh	r2, [r3, #48]	; 0x30
 801402c:	e01f      	b.n	801406e <tcp_process+0x2ea>
 801402e:	bf00      	nop
 8014030:	0801ed74 	.word	0x0801ed74
 8014034:	0801efc8 	.word	0x0801efc8
 8014038:	0801eddc 	.word	0x0801eddc
 801403c:	24004944 	.word	0x24004944
 8014040:	2400493c 	.word	0x2400493c
 8014044:	24004938 	.word	0x24004938
 8014048:	0801efe4 	.word	0x0801efe4
 801404c:	24004945 	.word	0x24004945
 8014050:	2400ce6c 	.word	0x2400ce6c
 8014054:	24004928 	.word	0x24004928
 8014058:	0801f004 	.word	0x0801f004
 801405c:	0801f01c 	.word	0x0801f01c
        } else {
          pcb->rtime = 0;
 8014060:	687b      	ldr	r3, [r7, #4]
 8014062:	2200      	movs	r2, #0
 8014064:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8014066:	687b      	ldr	r3, [r7, #4]
 8014068:	2200      	movs	r2, #0
 801406a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014074:	2b00      	cmp	r3, #0
 8014076:	d00a      	beq.n	801408e <tcp_process+0x30a>
 8014078:	687b      	ldr	r3, [r7, #4]
 801407a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801407e:	687a      	ldr	r2, [r7, #4]
 8014080:	6910      	ldr	r0, [r2, #16]
 8014082:	2200      	movs	r2, #0
 8014084:	6879      	ldr	r1, [r7, #4]
 8014086:	4798      	blx	r3
 8014088:	4603      	mov	r3, r0
 801408a:	76bb      	strb	r3, [r7, #26]
 801408c:	e001      	b.n	8014092 <tcp_process+0x30e>
 801408e:	2300      	movs	r3, #0
 8014090:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8014092:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8014096:	f113 0f0d 	cmn.w	r3, #13
 801409a:	d102      	bne.n	80140a2 <tcp_process+0x31e>
          return ERR_ABRT;
 801409c:	f06f 030c 	mvn.w	r3, #12
 80140a0:	e250      	b.n	8014544 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80140a2:	687b      	ldr	r3, [r7, #4]
 80140a4:	8b5b      	ldrh	r3, [r3, #26]
 80140a6:	f043 0302 	orr.w	r3, r3, #2
 80140aa:	b29a      	uxth	r2, r3
 80140ac:	687b      	ldr	r3, [r7, #4]
 80140ae:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80140b0:	e23a      	b.n	8014528 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80140b2:	4b9d      	ldr	r3, [pc, #628]	; (8014328 <tcp_process+0x5a4>)
 80140b4:	781b      	ldrb	r3, [r3, #0]
 80140b6:	f003 0310 	and.w	r3, r3, #16
 80140ba:	2b00      	cmp	r3, #0
 80140bc:	f000 8234 	beq.w	8014528 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80140c0:	4b9a      	ldr	r3, [pc, #616]	; (801432c <tcp_process+0x5a8>)
 80140c2:	6819      	ldr	r1, [r3, #0]
 80140c4:	4b9a      	ldr	r3, [pc, #616]	; (8014330 <tcp_process+0x5ac>)
 80140c6:	881b      	ldrh	r3, [r3, #0]
 80140c8:	461a      	mov	r2, r3
 80140ca:	4b9a      	ldr	r3, [pc, #616]	; (8014334 <tcp_process+0x5b0>)
 80140cc:	681b      	ldr	r3, [r3, #0]
 80140ce:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80140d0:	4b99      	ldr	r3, [pc, #612]	; (8014338 <tcp_process+0x5b4>)
 80140d2:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80140d4:	885b      	ldrh	r3, [r3, #2]
 80140d6:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80140d8:	4a97      	ldr	r2, [pc, #604]	; (8014338 <tcp_process+0x5b4>)
 80140da:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80140dc:	8812      	ldrh	r2, [r2, #0]
 80140de:	b292      	uxth	r2, r2
 80140e0:	9202      	str	r2, [sp, #8]
 80140e2:	9301      	str	r3, [sp, #4]
 80140e4:	4b95      	ldr	r3, [pc, #596]	; (801433c <tcp_process+0x5b8>)
 80140e6:	9300      	str	r3, [sp, #0]
 80140e8:	4b95      	ldr	r3, [pc, #596]	; (8014340 <tcp_process+0x5bc>)
 80140ea:	4602      	mov	r2, r0
 80140ec:	6878      	ldr	r0, [r7, #4]
 80140ee:	f002 fc93 	bl	8016a18 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80140f2:	687b      	ldr	r3, [r7, #4]
 80140f4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80140f8:	2b05      	cmp	r3, #5
 80140fa:	f200 8215 	bhi.w	8014528 <tcp_process+0x7a4>
          pcb->rtime = 0;
 80140fe:	687b      	ldr	r3, [r7, #4]
 8014100:	2200      	movs	r2, #0
 8014102:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8014104:	6878      	ldr	r0, [r7, #4]
 8014106:	f002 fa51 	bl	80165ac <tcp_rexmit_rto>
      break;
 801410a:	e20d      	b.n	8014528 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 801410c:	4b86      	ldr	r3, [pc, #536]	; (8014328 <tcp_process+0x5a4>)
 801410e:	781b      	ldrb	r3, [r3, #0]
 8014110:	f003 0310 	and.w	r3, r3, #16
 8014114:	2b00      	cmp	r3, #0
 8014116:	f000 80a1 	beq.w	801425c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801411a:	4b84      	ldr	r3, [pc, #528]	; (801432c <tcp_process+0x5a8>)
 801411c:	681a      	ldr	r2, [r3, #0]
 801411e:	687b      	ldr	r3, [r7, #4]
 8014120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014122:	1ad3      	subs	r3, r2, r3
 8014124:	3b01      	subs	r3, #1
 8014126:	2b00      	cmp	r3, #0
 8014128:	db7e      	blt.n	8014228 <tcp_process+0x4a4>
 801412a:	4b80      	ldr	r3, [pc, #512]	; (801432c <tcp_process+0x5a8>)
 801412c:	681a      	ldr	r2, [r3, #0]
 801412e:	687b      	ldr	r3, [r7, #4]
 8014130:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014132:	1ad3      	subs	r3, r2, r3
 8014134:	2b00      	cmp	r3, #0
 8014136:	dc77      	bgt.n	8014228 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8014138:	687b      	ldr	r3, [r7, #4]
 801413a:	2204      	movs	r2, #4
 801413c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801413e:	687b      	ldr	r3, [r7, #4]
 8014140:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014142:	2b00      	cmp	r3, #0
 8014144:	d102      	bne.n	801414c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8014146:	23fa      	movs	r3, #250	; 0xfa
 8014148:	76bb      	strb	r3, [r7, #26]
 801414a:	e01d      	b.n	8014188 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 801414c:	687b      	ldr	r3, [r7, #4]
 801414e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014150:	699b      	ldr	r3, [r3, #24]
 8014152:	2b00      	cmp	r3, #0
 8014154:	d106      	bne.n	8014164 <tcp_process+0x3e0>
 8014156:	4b7b      	ldr	r3, [pc, #492]	; (8014344 <tcp_process+0x5c0>)
 8014158:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 801415c:	497a      	ldr	r1, [pc, #488]	; (8014348 <tcp_process+0x5c4>)
 801415e:	487b      	ldr	r0, [pc, #492]	; (801434c <tcp_process+0x5c8>)
 8014160:	f006 ffce 	bl	801b100 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014168:	699b      	ldr	r3, [r3, #24]
 801416a:	2b00      	cmp	r3, #0
 801416c:	d00a      	beq.n	8014184 <tcp_process+0x400>
 801416e:	687b      	ldr	r3, [r7, #4]
 8014170:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014172:	699b      	ldr	r3, [r3, #24]
 8014174:	687a      	ldr	r2, [r7, #4]
 8014176:	6910      	ldr	r0, [r2, #16]
 8014178:	2200      	movs	r2, #0
 801417a:	6879      	ldr	r1, [r7, #4]
 801417c:	4798      	blx	r3
 801417e:	4603      	mov	r3, r0
 8014180:	76bb      	strb	r3, [r7, #26]
 8014182:	e001      	b.n	8014188 <tcp_process+0x404>
 8014184:	23f0      	movs	r3, #240	; 0xf0
 8014186:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8014188:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801418c:	2b00      	cmp	r3, #0
 801418e:	d00a      	beq.n	80141a6 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8014190:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8014194:	f113 0f0d 	cmn.w	r3, #13
 8014198:	d002      	beq.n	80141a0 <tcp_process+0x41c>
              tcp_abort(pcb);
 801419a:	6878      	ldr	r0, [r7, #4]
 801419c:	f7fd ff94 	bl	80120c8 <tcp_abort>
            }
            return ERR_ABRT;
 80141a0:	f06f 030c 	mvn.w	r3, #12
 80141a4:	e1ce      	b.n	8014544 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80141a6:	6878      	ldr	r0, [r7, #4]
 80141a8:	f000 fae0 	bl	801476c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80141ac:	4b68      	ldr	r3, [pc, #416]	; (8014350 <tcp_process+0x5cc>)
 80141ae:	881b      	ldrh	r3, [r3, #0]
 80141b0:	2b00      	cmp	r3, #0
 80141b2:	d005      	beq.n	80141c0 <tcp_process+0x43c>
            recv_acked--;
 80141b4:	4b66      	ldr	r3, [pc, #408]	; (8014350 <tcp_process+0x5cc>)
 80141b6:	881b      	ldrh	r3, [r3, #0]
 80141b8:	3b01      	subs	r3, #1
 80141ba:	b29a      	uxth	r2, r3
 80141bc:	4b64      	ldr	r3, [pc, #400]	; (8014350 <tcp_process+0x5cc>)
 80141be:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80141c0:	687b      	ldr	r3, [r7, #4]
 80141c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80141c4:	009a      	lsls	r2, r3, #2
 80141c6:	687b      	ldr	r3, [r7, #4]
 80141c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80141ca:	005b      	lsls	r3, r3, #1
 80141cc:	f241 111c 	movw	r1, #4380	; 0x111c
 80141d0:	428b      	cmp	r3, r1
 80141d2:	bf38      	it	cc
 80141d4:	460b      	movcc	r3, r1
 80141d6:	429a      	cmp	r2, r3
 80141d8:	d204      	bcs.n	80141e4 <tcp_process+0x460>
 80141da:	687b      	ldr	r3, [r7, #4]
 80141dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80141de:	009b      	lsls	r3, r3, #2
 80141e0:	b29b      	uxth	r3, r3
 80141e2:	e00d      	b.n	8014200 <tcp_process+0x47c>
 80141e4:	687b      	ldr	r3, [r7, #4]
 80141e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80141e8:	005b      	lsls	r3, r3, #1
 80141ea:	f241 121c 	movw	r2, #4380	; 0x111c
 80141ee:	4293      	cmp	r3, r2
 80141f0:	d904      	bls.n	80141fc <tcp_process+0x478>
 80141f2:	687b      	ldr	r3, [r7, #4]
 80141f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80141f6:	005b      	lsls	r3, r3, #1
 80141f8:	b29b      	uxth	r3, r3
 80141fa:	e001      	b.n	8014200 <tcp_process+0x47c>
 80141fc:	f241 131c 	movw	r3, #4380	; 0x111c
 8014200:	687a      	ldr	r2, [r7, #4]
 8014202:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8014206:	4b53      	ldr	r3, [pc, #332]	; (8014354 <tcp_process+0x5d0>)
 8014208:	781b      	ldrb	r3, [r3, #0]
 801420a:	f003 0320 	and.w	r3, r3, #32
 801420e:	2b00      	cmp	r3, #0
 8014210:	d037      	beq.n	8014282 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8014212:	687b      	ldr	r3, [r7, #4]
 8014214:	8b5b      	ldrh	r3, [r3, #26]
 8014216:	f043 0302 	orr.w	r3, r3, #2
 801421a:	b29a      	uxth	r2, r3
 801421c:	687b      	ldr	r3, [r7, #4]
 801421e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8014220:	687b      	ldr	r3, [r7, #4]
 8014222:	2207      	movs	r2, #7
 8014224:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8014226:	e02c      	b.n	8014282 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014228:	4b40      	ldr	r3, [pc, #256]	; (801432c <tcp_process+0x5a8>)
 801422a:	6819      	ldr	r1, [r3, #0]
 801422c:	4b40      	ldr	r3, [pc, #256]	; (8014330 <tcp_process+0x5ac>)
 801422e:	881b      	ldrh	r3, [r3, #0]
 8014230:	461a      	mov	r2, r3
 8014232:	4b40      	ldr	r3, [pc, #256]	; (8014334 <tcp_process+0x5b0>)
 8014234:	681b      	ldr	r3, [r3, #0]
 8014236:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014238:	4b3f      	ldr	r3, [pc, #252]	; (8014338 <tcp_process+0x5b4>)
 801423a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801423c:	885b      	ldrh	r3, [r3, #2]
 801423e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014240:	4a3d      	ldr	r2, [pc, #244]	; (8014338 <tcp_process+0x5b4>)
 8014242:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014244:	8812      	ldrh	r2, [r2, #0]
 8014246:	b292      	uxth	r2, r2
 8014248:	9202      	str	r2, [sp, #8]
 801424a:	9301      	str	r3, [sp, #4]
 801424c:	4b3b      	ldr	r3, [pc, #236]	; (801433c <tcp_process+0x5b8>)
 801424e:	9300      	str	r3, [sp, #0]
 8014250:	4b3b      	ldr	r3, [pc, #236]	; (8014340 <tcp_process+0x5bc>)
 8014252:	4602      	mov	r2, r0
 8014254:	6878      	ldr	r0, [r7, #4]
 8014256:	f002 fbdf 	bl	8016a18 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801425a:	e167      	b.n	801452c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801425c:	4b32      	ldr	r3, [pc, #200]	; (8014328 <tcp_process+0x5a4>)
 801425e:	781b      	ldrb	r3, [r3, #0]
 8014260:	f003 0302 	and.w	r3, r3, #2
 8014264:	2b00      	cmp	r3, #0
 8014266:	f000 8161 	beq.w	801452c <tcp_process+0x7a8>
 801426a:	687b      	ldr	r3, [r7, #4]
 801426c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801426e:	1e5a      	subs	r2, r3, #1
 8014270:	4b30      	ldr	r3, [pc, #192]	; (8014334 <tcp_process+0x5b0>)
 8014272:	681b      	ldr	r3, [r3, #0]
 8014274:	429a      	cmp	r2, r3
 8014276:	f040 8159 	bne.w	801452c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801427a:	6878      	ldr	r0, [r7, #4]
 801427c:	f002 f9b8 	bl	80165f0 <tcp_rexmit>
      break;
 8014280:	e154      	b.n	801452c <tcp_process+0x7a8>
 8014282:	e153      	b.n	801452c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8014284:	6878      	ldr	r0, [r7, #4]
 8014286:	f000 fa71 	bl	801476c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801428a:	4b32      	ldr	r3, [pc, #200]	; (8014354 <tcp_process+0x5d0>)
 801428c:	781b      	ldrb	r3, [r3, #0]
 801428e:	f003 0320 	and.w	r3, r3, #32
 8014292:	2b00      	cmp	r3, #0
 8014294:	f000 814c 	beq.w	8014530 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8014298:	687b      	ldr	r3, [r7, #4]
 801429a:	8b5b      	ldrh	r3, [r3, #26]
 801429c:	f043 0302 	orr.w	r3, r3, #2
 80142a0:	b29a      	uxth	r2, r3
 80142a2:	687b      	ldr	r3, [r7, #4]
 80142a4:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80142a6:	687b      	ldr	r3, [r7, #4]
 80142a8:	2207      	movs	r2, #7
 80142aa:	751a      	strb	r2, [r3, #20]
      }
      break;
 80142ac:	e140      	b.n	8014530 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80142ae:	6878      	ldr	r0, [r7, #4]
 80142b0:	f000 fa5c 	bl	801476c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80142b4:	4b27      	ldr	r3, [pc, #156]	; (8014354 <tcp_process+0x5d0>)
 80142b6:	781b      	ldrb	r3, [r3, #0]
 80142b8:	f003 0320 	and.w	r3, r3, #32
 80142bc:	2b00      	cmp	r3, #0
 80142be:	d071      	beq.n	80143a4 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80142c0:	4b19      	ldr	r3, [pc, #100]	; (8014328 <tcp_process+0x5a4>)
 80142c2:	781b      	ldrb	r3, [r3, #0]
 80142c4:	f003 0310 	and.w	r3, r3, #16
 80142c8:	2b00      	cmp	r3, #0
 80142ca:	d060      	beq.n	801438e <tcp_process+0x60a>
 80142cc:	687b      	ldr	r3, [r7, #4]
 80142ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80142d0:	4b16      	ldr	r3, [pc, #88]	; (801432c <tcp_process+0x5a8>)
 80142d2:	681b      	ldr	r3, [r3, #0]
 80142d4:	429a      	cmp	r2, r3
 80142d6:	d15a      	bne.n	801438e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80142d8:	687b      	ldr	r3, [r7, #4]
 80142da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80142dc:	2b00      	cmp	r3, #0
 80142de:	d156      	bne.n	801438e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80142e0:	687b      	ldr	r3, [r7, #4]
 80142e2:	8b5b      	ldrh	r3, [r3, #26]
 80142e4:	f043 0302 	orr.w	r3, r3, #2
 80142e8:	b29a      	uxth	r2, r3
 80142ea:	687b      	ldr	r3, [r7, #4]
 80142ec:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80142ee:	6878      	ldr	r0, [r7, #4]
 80142f0:	f7fe fdbe 	bl	8012e70 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80142f4:	4b18      	ldr	r3, [pc, #96]	; (8014358 <tcp_process+0x5d4>)
 80142f6:	681b      	ldr	r3, [r3, #0]
 80142f8:	687a      	ldr	r2, [r7, #4]
 80142fa:	429a      	cmp	r2, r3
 80142fc:	d105      	bne.n	801430a <tcp_process+0x586>
 80142fe:	4b16      	ldr	r3, [pc, #88]	; (8014358 <tcp_process+0x5d4>)
 8014300:	681b      	ldr	r3, [r3, #0]
 8014302:	68db      	ldr	r3, [r3, #12]
 8014304:	4a14      	ldr	r2, [pc, #80]	; (8014358 <tcp_process+0x5d4>)
 8014306:	6013      	str	r3, [r2, #0]
 8014308:	e02e      	b.n	8014368 <tcp_process+0x5e4>
 801430a:	4b13      	ldr	r3, [pc, #76]	; (8014358 <tcp_process+0x5d4>)
 801430c:	681b      	ldr	r3, [r3, #0]
 801430e:	617b      	str	r3, [r7, #20]
 8014310:	e027      	b.n	8014362 <tcp_process+0x5de>
 8014312:	697b      	ldr	r3, [r7, #20]
 8014314:	68db      	ldr	r3, [r3, #12]
 8014316:	687a      	ldr	r2, [r7, #4]
 8014318:	429a      	cmp	r2, r3
 801431a:	d11f      	bne.n	801435c <tcp_process+0x5d8>
 801431c:	687b      	ldr	r3, [r7, #4]
 801431e:	68da      	ldr	r2, [r3, #12]
 8014320:	697b      	ldr	r3, [r7, #20]
 8014322:	60da      	str	r2, [r3, #12]
 8014324:	e020      	b.n	8014368 <tcp_process+0x5e4>
 8014326:	bf00      	nop
 8014328:	24004944 	.word	0x24004944
 801432c:	2400493c 	.word	0x2400493c
 8014330:	24004942 	.word	0x24004942
 8014334:	24004938 	.word	0x24004938
 8014338:	24004928 	.word	0x24004928
 801433c:	24009db0 	.word	0x24009db0
 8014340:	24009db4 	.word	0x24009db4
 8014344:	0801ed74 	.word	0x0801ed74
 8014348:	0801f030 	.word	0x0801f030
 801434c:	0801eddc 	.word	0x0801eddc
 8014350:	24004940 	.word	0x24004940
 8014354:	24004945 	.word	0x24004945
 8014358:	2400ce68 	.word	0x2400ce68
 801435c:	697b      	ldr	r3, [r7, #20]
 801435e:	68db      	ldr	r3, [r3, #12]
 8014360:	617b      	str	r3, [r7, #20]
 8014362:	697b      	ldr	r3, [r7, #20]
 8014364:	2b00      	cmp	r3, #0
 8014366:	d1d4      	bne.n	8014312 <tcp_process+0x58e>
 8014368:	687b      	ldr	r3, [r7, #4]
 801436a:	2200      	movs	r2, #0
 801436c:	60da      	str	r2, [r3, #12]
 801436e:	4b77      	ldr	r3, [pc, #476]	; (801454c <tcp_process+0x7c8>)
 8014370:	2201      	movs	r2, #1
 8014372:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8014374:	687b      	ldr	r3, [r7, #4]
 8014376:	220a      	movs	r2, #10
 8014378:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801437a:	4b75      	ldr	r3, [pc, #468]	; (8014550 <tcp_process+0x7cc>)
 801437c:	681a      	ldr	r2, [r3, #0]
 801437e:	687b      	ldr	r3, [r7, #4]
 8014380:	60da      	str	r2, [r3, #12]
 8014382:	4a73      	ldr	r2, [pc, #460]	; (8014550 <tcp_process+0x7cc>)
 8014384:	687b      	ldr	r3, [r7, #4]
 8014386:	6013      	str	r3, [r2, #0]
 8014388:	f002 fea6 	bl	80170d8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 801438c:	e0d2      	b.n	8014534 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801438e:	687b      	ldr	r3, [r7, #4]
 8014390:	8b5b      	ldrh	r3, [r3, #26]
 8014392:	f043 0302 	orr.w	r3, r3, #2
 8014396:	b29a      	uxth	r2, r3
 8014398:	687b      	ldr	r3, [r7, #4]
 801439a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 801439c:	687b      	ldr	r3, [r7, #4]
 801439e:	2208      	movs	r2, #8
 80143a0:	751a      	strb	r2, [r3, #20]
      break;
 80143a2:	e0c7      	b.n	8014534 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80143a4:	4b6b      	ldr	r3, [pc, #428]	; (8014554 <tcp_process+0x7d0>)
 80143a6:	781b      	ldrb	r3, [r3, #0]
 80143a8:	f003 0310 	and.w	r3, r3, #16
 80143ac:	2b00      	cmp	r3, #0
 80143ae:	f000 80c1 	beq.w	8014534 <tcp_process+0x7b0>
 80143b2:	687b      	ldr	r3, [r7, #4]
 80143b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80143b6:	4b68      	ldr	r3, [pc, #416]	; (8014558 <tcp_process+0x7d4>)
 80143b8:	681b      	ldr	r3, [r3, #0]
 80143ba:	429a      	cmp	r2, r3
 80143bc:	f040 80ba 	bne.w	8014534 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80143c0:	687b      	ldr	r3, [r7, #4]
 80143c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80143c4:	2b00      	cmp	r3, #0
 80143c6:	f040 80b5 	bne.w	8014534 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80143ca:	687b      	ldr	r3, [r7, #4]
 80143cc:	2206      	movs	r2, #6
 80143ce:	751a      	strb	r2, [r3, #20]
      break;
 80143d0:	e0b0      	b.n	8014534 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80143d2:	6878      	ldr	r0, [r7, #4]
 80143d4:	f000 f9ca 	bl	801476c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80143d8:	4b60      	ldr	r3, [pc, #384]	; (801455c <tcp_process+0x7d8>)
 80143da:	781b      	ldrb	r3, [r3, #0]
 80143dc:	f003 0320 	and.w	r3, r3, #32
 80143e0:	2b00      	cmp	r3, #0
 80143e2:	f000 80a9 	beq.w	8014538 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80143e6:	687b      	ldr	r3, [r7, #4]
 80143e8:	8b5b      	ldrh	r3, [r3, #26]
 80143ea:	f043 0302 	orr.w	r3, r3, #2
 80143ee:	b29a      	uxth	r2, r3
 80143f0:	687b      	ldr	r3, [r7, #4]
 80143f2:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80143f4:	6878      	ldr	r0, [r7, #4]
 80143f6:	f7fe fd3b 	bl	8012e70 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80143fa:	4b59      	ldr	r3, [pc, #356]	; (8014560 <tcp_process+0x7dc>)
 80143fc:	681b      	ldr	r3, [r3, #0]
 80143fe:	687a      	ldr	r2, [r7, #4]
 8014400:	429a      	cmp	r2, r3
 8014402:	d105      	bne.n	8014410 <tcp_process+0x68c>
 8014404:	4b56      	ldr	r3, [pc, #344]	; (8014560 <tcp_process+0x7dc>)
 8014406:	681b      	ldr	r3, [r3, #0]
 8014408:	68db      	ldr	r3, [r3, #12]
 801440a:	4a55      	ldr	r2, [pc, #340]	; (8014560 <tcp_process+0x7dc>)
 801440c:	6013      	str	r3, [r2, #0]
 801440e:	e013      	b.n	8014438 <tcp_process+0x6b4>
 8014410:	4b53      	ldr	r3, [pc, #332]	; (8014560 <tcp_process+0x7dc>)
 8014412:	681b      	ldr	r3, [r3, #0]
 8014414:	613b      	str	r3, [r7, #16]
 8014416:	e00c      	b.n	8014432 <tcp_process+0x6ae>
 8014418:	693b      	ldr	r3, [r7, #16]
 801441a:	68db      	ldr	r3, [r3, #12]
 801441c:	687a      	ldr	r2, [r7, #4]
 801441e:	429a      	cmp	r2, r3
 8014420:	d104      	bne.n	801442c <tcp_process+0x6a8>
 8014422:	687b      	ldr	r3, [r7, #4]
 8014424:	68da      	ldr	r2, [r3, #12]
 8014426:	693b      	ldr	r3, [r7, #16]
 8014428:	60da      	str	r2, [r3, #12]
 801442a:	e005      	b.n	8014438 <tcp_process+0x6b4>
 801442c:	693b      	ldr	r3, [r7, #16]
 801442e:	68db      	ldr	r3, [r3, #12]
 8014430:	613b      	str	r3, [r7, #16]
 8014432:	693b      	ldr	r3, [r7, #16]
 8014434:	2b00      	cmp	r3, #0
 8014436:	d1ef      	bne.n	8014418 <tcp_process+0x694>
 8014438:	687b      	ldr	r3, [r7, #4]
 801443a:	2200      	movs	r2, #0
 801443c:	60da      	str	r2, [r3, #12]
 801443e:	4b43      	ldr	r3, [pc, #268]	; (801454c <tcp_process+0x7c8>)
 8014440:	2201      	movs	r2, #1
 8014442:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	220a      	movs	r2, #10
 8014448:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801444a:	4b41      	ldr	r3, [pc, #260]	; (8014550 <tcp_process+0x7cc>)
 801444c:	681a      	ldr	r2, [r3, #0]
 801444e:	687b      	ldr	r3, [r7, #4]
 8014450:	60da      	str	r2, [r3, #12]
 8014452:	4a3f      	ldr	r2, [pc, #252]	; (8014550 <tcp_process+0x7cc>)
 8014454:	687b      	ldr	r3, [r7, #4]
 8014456:	6013      	str	r3, [r2, #0]
 8014458:	f002 fe3e 	bl	80170d8 <tcp_timer_needed>
      }
      break;
 801445c:	e06c      	b.n	8014538 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801445e:	6878      	ldr	r0, [r7, #4]
 8014460:	f000 f984 	bl	801476c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8014464:	4b3b      	ldr	r3, [pc, #236]	; (8014554 <tcp_process+0x7d0>)
 8014466:	781b      	ldrb	r3, [r3, #0]
 8014468:	f003 0310 	and.w	r3, r3, #16
 801446c:	2b00      	cmp	r3, #0
 801446e:	d065      	beq.n	801453c <tcp_process+0x7b8>
 8014470:	687b      	ldr	r3, [r7, #4]
 8014472:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014474:	4b38      	ldr	r3, [pc, #224]	; (8014558 <tcp_process+0x7d4>)
 8014476:	681b      	ldr	r3, [r3, #0]
 8014478:	429a      	cmp	r2, r3
 801447a:	d15f      	bne.n	801453c <tcp_process+0x7b8>
 801447c:	687b      	ldr	r3, [r7, #4]
 801447e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014480:	2b00      	cmp	r3, #0
 8014482:	d15b      	bne.n	801453c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8014484:	6878      	ldr	r0, [r7, #4]
 8014486:	f7fe fcf3 	bl	8012e70 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801448a:	4b35      	ldr	r3, [pc, #212]	; (8014560 <tcp_process+0x7dc>)
 801448c:	681b      	ldr	r3, [r3, #0]
 801448e:	687a      	ldr	r2, [r7, #4]
 8014490:	429a      	cmp	r2, r3
 8014492:	d105      	bne.n	80144a0 <tcp_process+0x71c>
 8014494:	4b32      	ldr	r3, [pc, #200]	; (8014560 <tcp_process+0x7dc>)
 8014496:	681b      	ldr	r3, [r3, #0]
 8014498:	68db      	ldr	r3, [r3, #12]
 801449a:	4a31      	ldr	r2, [pc, #196]	; (8014560 <tcp_process+0x7dc>)
 801449c:	6013      	str	r3, [r2, #0]
 801449e:	e013      	b.n	80144c8 <tcp_process+0x744>
 80144a0:	4b2f      	ldr	r3, [pc, #188]	; (8014560 <tcp_process+0x7dc>)
 80144a2:	681b      	ldr	r3, [r3, #0]
 80144a4:	60fb      	str	r3, [r7, #12]
 80144a6:	e00c      	b.n	80144c2 <tcp_process+0x73e>
 80144a8:	68fb      	ldr	r3, [r7, #12]
 80144aa:	68db      	ldr	r3, [r3, #12]
 80144ac:	687a      	ldr	r2, [r7, #4]
 80144ae:	429a      	cmp	r2, r3
 80144b0:	d104      	bne.n	80144bc <tcp_process+0x738>
 80144b2:	687b      	ldr	r3, [r7, #4]
 80144b4:	68da      	ldr	r2, [r3, #12]
 80144b6:	68fb      	ldr	r3, [r7, #12]
 80144b8:	60da      	str	r2, [r3, #12]
 80144ba:	e005      	b.n	80144c8 <tcp_process+0x744>
 80144bc:	68fb      	ldr	r3, [r7, #12]
 80144be:	68db      	ldr	r3, [r3, #12]
 80144c0:	60fb      	str	r3, [r7, #12]
 80144c2:	68fb      	ldr	r3, [r7, #12]
 80144c4:	2b00      	cmp	r3, #0
 80144c6:	d1ef      	bne.n	80144a8 <tcp_process+0x724>
 80144c8:	687b      	ldr	r3, [r7, #4]
 80144ca:	2200      	movs	r2, #0
 80144cc:	60da      	str	r2, [r3, #12]
 80144ce:	4b1f      	ldr	r3, [pc, #124]	; (801454c <tcp_process+0x7c8>)
 80144d0:	2201      	movs	r2, #1
 80144d2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80144d4:	687b      	ldr	r3, [r7, #4]
 80144d6:	220a      	movs	r2, #10
 80144d8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80144da:	4b1d      	ldr	r3, [pc, #116]	; (8014550 <tcp_process+0x7cc>)
 80144dc:	681a      	ldr	r2, [r3, #0]
 80144de:	687b      	ldr	r3, [r7, #4]
 80144e0:	60da      	str	r2, [r3, #12]
 80144e2:	4a1b      	ldr	r2, [pc, #108]	; (8014550 <tcp_process+0x7cc>)
 80144e4:	687b      	ldr	r3, [r7, #4]
 80144e6:	6013      	str	r3, [r2, #0]
 80144e8:	f002 fdf6 	bl	80170d8 <tcp_timer_needed>
      }
      break;
 80144ec:	e026      	b.n	801453c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80144ee:	6878      	ldr	r0, [r7, #4]
 80144f0:	f000 f93c 	bl	801476c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80144f4:	4b17      	ldr	r3, [pc, #92]	; (8014554 <tcp_process+0x7d0>)
 80144f6:	781b      	ldrb	r3, [r3, #0]
 80144f8:	f003 0310 	and.w	r3, r3, #16
 80144fc:	2b00      	cmp	r3, #0
 80144fe:	d01f      	beq.n	8014540 <tcp_process+0x7bc>
 8014500:	687b      	ldr	r3, [r7, #4]
 8014502:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014504:	4b14      	ldr	r3, [pc, #80]	; (8014558 <tcp_process+0x7d4>)
 8014506:	681b      	ldr	r3, [r3, #0]
 8014508:	429a      	cmp	r2, r3
 801450a:	d119      	bne.n	8014540 <tcp_process+0x7bc>
 801450c:	687b      	ldr	r3, [r7, #4]
 801450e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014510:	2b00      	cmp	r3, #0
 8014512:	d115      	bne.n	8014540 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8014514:	4b11      	ldr	r3, [pc, #68]	; (801455c <tcp_process+0x7d8>)
 8014516:	781b      	ldrb	r3, [r3, #0]
 8014518:	f043 0310 	orr.w	r3, r3, #16
 801451c:	b2da      	uxtb	r2, r3
 801451e:	4b0f      	ldr	r3, [pc, #60]	; (801455c <tcp_process+0x7d8>)
 8014520:	701a      	strb	r2, [r3, #0]
      }
      break;
 8014522:	e00d      	b.n	8014540 <tcp_process+0x7bc>
    default:
      break;
 8014524:	bf00      	nop
 8014526:	e00c      	b.n	8014542 <tcp_process+0x7be>
      break;
 8014528:	bf00      	nop
 801452a:	e00a      	b.n	8014542 <tcp_process+0x7be>
      break;
 801452c:	bf00      	nop
 801452e:	e008      	b.n	8014542 <tcp_process+0x7be>
      break;
 8014530:	bf00      	nop
 8014532:	e006      	b.n	8014542 <tcp_process+0x7be>
      break;
 8014534:	bf00      	nop
 8014536:	e004      	b.n	8014542 <tcp_process+0x7be>
      break;
 8014538:	bf00      	nop
 801453a:	e002      	b.n	8014542 <tcp_process+0x7be>
      break;
 801453c:	bf00      	nop
 801453e:	e000      	b.n	8014542 <tcp_process+0x7be>
      break;
 8014540:	bf00      	nop
  }
  return ERR_OK;
 8014542:	2300      	movs	r3, #0
}
 8014544:	4618      	mov	r0, r3
 8014546:	3724      	adds	r7, #36	; 0x24
 8014548:	46bd      	mov	sp, r7
 801454a:	bd90      	pop	{r4, r7, pc}
 801454c:	2400ce64 	.word	0x2400ce64
 8014550:	2400ce78 	.word	0x2400ce78
 8014554:	24004944 	.word	0x24004944
 8014558:	2400493c 	.word	0x2400493c
 801455c:	24004945 	.word	0x24004945
 8014560:	2400ce68 	.word	0x2400ce68

08014564 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8014564:	b590      	push	{r4, r7, lr}
 8014566:	b085      	sub	sp, #20
 8014568:	af00      	add	r7, sp, #0
 801456a:	6078      	str	r0, [r7, #4]
 801456c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801456e:	687b      	ldr	r3, [r7, #4]
 8014570:	2b00      	cmp	r3, #0
 8014572:	d106      	bne.n	8014582 <tcp_oos_insert_segment+0x1e>
 8014574:	4b3b      	ldr	r3, [pc, #236]	; (8014664 <tcp_oos_insert_segment+0x100>)
 8014576:	f240 421f 	movw	r2, #1055	; 0x41f
 801457a:	493b      	ldr	r1, [pc, #236]	; (8014668 <tcp_oos_insert_segment+0x104>)
 801457c:	483b      	ldr	r0, [pc, #236]	; (801466c <tcp_oos_insert_segment+0x108>)
 801457e:	f006 fdbf 	bl	801b100 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8014582:	687b      	ldr	r3, [r7, #4]
 8014584:	68db      	ldr	r3, [r3, #12]
 8014586:	899b      	ldrh	r3, [r3, #12]
 8014588:	b29b      	uxth	r3, r3
 801458a:	4618      	mov	r0, r3
 801458c:	f7f8 ff64 	bl	800d458 <lwip_htons>
 8014590:	4603      	mov	r3, r0
 8014592:	b2db      	uxtb	r3, r3
 8014594:	f003 0301 	and.w	r3, r3, #1
 8014598:	2b00      	cmp	r3, #0
 801459a:	d028      	beq.n	80145ee <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 801459c:	6838      	ldr	r0, [r7, #0]
 801459e:	f7fe fa67 	bl	8012a70 <tcp_segs_free>
    next = NULL;
 80145a2:	2300      	movs	r3, #0
 80145a4:	603b      	str	r3, [r7, #0]
 80145a6:	e056      	b.n	8014656 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80145a8:	683b      	ldr	r3, [r7, #0]
 80145aa:	68db      	ldr	r3, [r3, #12]
 80145ac:	899b      	ldrh	r3, [r3, #12]
 80145ae:	b29b      	uxth	r3, r3
 80145b0:	4618      	mov	r0, r3
 80145b2:	f7f8 ff51 	bl	800d458 <lwip_htons>
 80145b6:	4603      	mov	r3, r0
 80145b8:	b2db      	uxtb	r3, r3
 80145ba:	f003 0301 	and.w	r3, r3, #1
 80145be:	2b00      	cmp	r3, #0
 80145c0:	d00d      	beq.n	80145de <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80145c2:	687b      	ldr	r3, [r7, #4]
 80145c4:	68db      	ldr	r3, [r3, #12]
 80145c6:	899b      	ldrh	r3, [r3, #12]
 80145c8:	b29c      	uxth	r4, r3
 80145ca:	2001      	movs	r0, #1
 80145cc:	f7f8 ff44 	bl	800d458 <lwip_htons>
 80145d0:	4603      	mov	r3, r0
 80145d2:	461a      	mov	r2, r3
 80145d4:	687b      	ldr	r3, [r7, #4]
 80145d6:	68db      	ldr	r3, [r3, #12]
 80145d8:	4322      	orrs	r2, r4
 80145da:	b292      	uxth	r2, r2
 80145dc:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80145de:	683b      	ldr	r3, [r7, #0]
 80145e0:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80145e2:	683b      	ldr	r3, [r7, #0]
 80145e4:	681b      	ldr	r3, [r3, #0]
 80145e6:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80145e8:	68f8      	ldr	r0, [r7, #12]
 80145ea:	f7fe fa55 	bl	8012a98 <tcp_seg_free>
    while (next &&
 80145ee:	683b      	ldr	r3, [r7, #0]
 80145f0:	2b00      	cmp	r3, #0
 80145f2:	d00e      	beq.n	8014612 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80145f4:	687b      	ldr	r3, [r7, #4]
 80145f6:	891b      	ldrh	r3, [r3, #8]
 80145f8:	461a      	mov	r2, r3
 80145fa:	4b1d      	ldr	r3, [pc, #116]	; (8014670 <tcp_oos_insert_segment+0x10c>)
 80145fc:	681b      	ldr	r3, [r3, #0]
 80145fe:	441a      	add	r2, r3
 8014600:	683b      	ldr	r3, [r7, #0]
 8014602:	68db      	ldr	r3, [r3, #12]
 8014604:	685b      	ldr	r3, [r3, #4]
 8014606:	6839      	ldr	r1, [r7, #0]
 8014608:	8909      	ldrh	r1, [r1, #8]
 801460a:	440b      	add	r3, r1
 801460c:	1ad3      	subs	r3, r2, r3
    while (next &&
 801460e:	2b00      	cmp	r3, #0
 8014610:	daca      	bge.n	80145a8 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8014612:	683b      	ldr	r3, [r7, #0]
 8014614:	2b00      	cmp	r3, #0
 8014616:	d01e      	beq.n	8014656 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8014618:	687b      	ldr	r3, [r7, #4]
 801461a:	891b      	ldrh	r3, [r3, #8]
 801461c:	461a      	mov	r2, r3
 801461e:	4b14      	ldr	r3, [pc, #80]	; (8014670 <tcp_oos_insert_segment+0x10c>)
 8014620:	681b      	ldr	r3, [r3, #0]
 8014622:	441a      	add	r2, r3
 8014624:	683b      	ldr	r3, [r7, #0]
 8014626:	68db      	ldr	r3, [r3, #12]
 8014628:	685b      	ldr	r3, [r3, #4]
 801462a:	1ad3      	subs	r3, r2, r3
    if (next &&
 801462c:	2b00      	cmp	r3, #0
 801462e:	dd12      	ble.n	8014656 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8014630:	683b      	ldr	r3, [r7, #0]
 8014632:	68db      	ldr	r3, [r3, #12]
 8014634:	685b      	ldr	r3, [r3, #4]
 8014636:	b29a      	uxth	r2, r3
 8014638:	4b0d      	ldr	r3, [pc, #52]	; (8014670 <tcp_oos_insert_segment+0x10c>)
 801463a:	681b      	ldr	r3, [r3, #0]
 801463c:	b29b      	uxth	r3, r3
 801463e:	1ad3      	subs	r3, r2, r3
 8014640:	b29a      	uxth	r2, r3
 8014642:	687b      	ldr	r3, [r7, #4]
 8014644:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8014646:	687b      	ldr	r3, [r7, #4]
 8014648:	685a      	ldr	r2, [r3, #4]
 801464a:	687b      	ldr	r3, [r7, #4]
 801464c:	891b      	ldrh	r3, [r3, #8]
 801464e:	4619      	mov	r1, r3
 8014650:	4610      	mov	r0, r2
 8014652:	f7fc fd11 	bl	8011078 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8014656:	687b      	ldr	r3, [r7, #4]
 8014658:	683a      	ldr	r2, [r7, #0]
 801465a:	601a      	str	r2, [r3, #0]
}
 801465c:	bf00      	nop
 801465e:	3714      	adds	r7, #20
 8014660:	46bd      	mov	sp, r7
 8014662:	bd90      	pop	{r4, r7, pc}
 8014664:	0801ed74 	.word	0x0801ed74
 8014668:	0801f050 	.word	0x0801f050
 801466c:	0801eddc 	.word	0x0801eddc
 8014670:	24004938 	.word	0x24004938

08014674 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8014674:	b5b0      	push	{r4, r5, r7, lr}
 8014676:	b086      	sub	sp, #24
 8014678:	af00      	add	r7, sp, #0
 801467a:	60f8      	str	r0, [r7, #12]
 801467c:	60b9      	str	r1, [r7, #8]
 801467e:	607a      	str	r2, [r7, #4]
 8014680:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8014682:	e03e      	b.n	8014702 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8014684:	68bb      	ldr	r3, [r7, #8]
 8014686:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8014688:	68bb      	ldr	r3, [r7, #8]
 801468a:	681b      	ldr	r3, [r3, #0]
 801468c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801468e:	697b      	ldr	r3, [r7, #20]
 8014690:	685b      	ldr	r3, [r3, #4]
 8014692:	4618      	mov	r0, r3
 8014694:	f7fc ff04 	bl	80114a0 <pbuf_clen>
 8014698:	4603      	mov	r3, r0
 801469a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801469c:	68fb      	ldr	r3, [r7, #12]
 801469e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80146a2:	8a7a      	ldrh	r2, [r7, #18]
 80146a4:	429a      	cmp	r2, r3
 80146a6:	d906      	bls.n	80146b6 <tcp_free_acked_segments+0x42>
 80146a8:	4b2a      	ldr	r3, [pc, #168]	; (8014754 <tcp_free_acked_segments+0xe0>)
 80146aa:	f240 4257 	movw	r2, #1111	; 0x457
 80146ae:	492a      	ldr	r1, [pc, #168]	; (8014758 <tcp_free_acked_segments+0xe4>)
 80146b0:	482a      	ldr	r0, [pc, #168]	; (801475c <tcp_free_acked_segments+0xe8>)
 80146b2:	f006 fd25 	bl	801b100 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80146b6:	68fb      	ldr	r3, [r7, #12]
 80146b8:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 80146bc:	8a7b      	ldrh	r3, [r7, #18]
 80146be:	1ad3      	subs	r3, r2, r3
 80146c0:	b29a      	uxth	r2, r3
 80146c2:	68fb      	ldr	r3, [r7, #12]
 80146c4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80146c8:	697b      	ldr	r3, [r7, #20]
 80146ca:	891a      	ldrh	r2, [r3, #8]
 80146cc:	4b24      	ldr	r3, [pc, #144]	; (8014760 <tcp_free_acked_segments+0xec>)
 80146ce:	881b      	ldrh	r3, [r3, #0]
 80146d0:	4413      	add	r3, r2
 80146d2:	b29a      	uxth	r2, r3
 80146d4:	4b22      	ldr	r3, [pc, #136]	; (8014760 <tcp_free_acked_segments+0xec>)
 80146d6:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80146d8:	6978      	ldr	r0, [r7, #20]
 80146da:	f7fe f9dd 	bl	8012a98 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80146de:	68fb      	ldr	r3, [r7, #12]
 80146e0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80146e4:	2b00      	cmp	r3, #0
 80146e6:	d00c      	beq.n	8014702 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80146e8:	68bb      	ldr	r3, [r7, #8]
 80146ea:	2b00      	cmp	r3, #0
 80146ec:	d109      	bne.n	8014702 <tcp_free_acked_segments+0x8e>
 80146ee:	683b      	ldr	r3, [r7, #0]
 80146f0:	2b00      	cmp	r3, #0
 80146f2:	d106      	bne.n	8014702 <tcp_free_acked_segments+0x8e>
 80146f4:	4b17      	ldr	r3, [pc, #92]	; (8014754 <tcp_free_acked_segments+0xe0>)
 80146f6:	f240 4262 	movw	r2, #1122	; 0x462
 80146fa:	491a      	ldr	r1, [pc, #104]	; (8014764 <tcp_free_acked_segments+0xf0>)
 80146fc:	4817      	ldr	r0, [pc, #92]	; (801475c <tcp_free_acked_segments+0xe8>)
 80146fe:	f006 fcff 	bl	801b100 <iprintf>
  while (seg_list != NULL &&
 8014702:	68bb      	ldr	r3, [r7, #8]
 8014704:	2b00      	cmp	r3, #0
 8014706:	d020      	beq.n	801474a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8014708:	68bb      	ldr	r3, [r7, #8]
 801470a:	68db      	ldr	r3, [r3, #12]
 801470c:	685b      	ldr	r3, [r3, #4]
 801470e:	4618      	mov	r0, r3
 8014710:	f7f8 feb7 	bl	800d482 <lwip_htonl>
 8014714:	4604      	mov	r4, r0
 8014716:	68bb      	ldr	r3, [r7, #8]
 8014718:	891b      	ldrh	r3, [r3, #8]
 801471a:	461d      	mov	r5, r3
 801471c:	68bb      	ldr	r3, [r7, #8]
 801471e:	68db      	ldr	r3, [r3, #12]
 8014720:	899b      	ldrh	r3, [r3, #12]
 8014722:	b29b      	uxth	r3, r3
 8014724:	4618      	mov	r0, r3
 8014726:	f7f8 fe97 	bl	800d458 <lwip_htons>
 801472a:	4603      	mov	r3, r0
 801472c:	b2db      	uxtb	r3, r3
 801472e:	f003 0303 	and.w	r3, r3, #3
 8014732:	2b00      	cmp	r3, #0
 8014734:	d001      	beq.n	801473a <tcp_free_acked_segments+0xc6>
 8014736:	2301      	movs	r3, #1
 8014738:	e000      	b.n	801473c <tcp_free_acked_segments+0xc8>
 801473a:	2300      	movs	r3, #0
 801473c:	442b      	add	r3, r5
 801473e:	18e2      	adds	r2, r4, r3
 8014740:	4b09      	ldr	r3, [pc, #36]	; (8014768 <tcp_free_acked_segments+0xf4>)
 8014742:	681b      	ldr	r3, [r3, #0]
 8014744:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8014746:	2b00      	cmp	r3, #0
 8014748:	dd9c      	ble.n	8014684 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801474a:	68bb      	ldr	r3, [r7, #8]
}
 801474c:	4618      	mov	r0, r3
 801474e:	3718      	adds	r7, #24
 8014750:	46bd      	mov	sp, r7
 8014752:	bdb0      	pop	{r4, r5, r7, pc}
 8014754:	0801ed74 	.word	0x0801ed74
 8014758:	0801f078 	.word	0x0801f078
 801475c:	0801eddc 	.word	0x0801eddc
 8014760:	24004940 	.word	0x24004940
 8014764:	0801f0a0 	.word	0x0801f0a0
 8014768:	2400493c 	.word	0x2400493c

0801476c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 801476c:	b5b0      	push	{r4, r5, r7, lr}
 801476e:	b094      	sub	sp, #80	; 0x50
 8014770:	af00      	add	r7, sp, #0
 8014772:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8014774:	2300      	movs	r3, #0
 8014776:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8014778:	687b      	ldr	r3, [r7, #4]
 801477a:	2b00      	cmp	r3, #0
 801477c:	d106      	bne.n	801478c <tcp_receive+0x20>
 801477e:	4ba6      	ldr	r3, [pc, #664]	; (8014a18 <tcp_receive+0x2ac>)
 8014780:	f240 427b 	movw	r2, #1147	; 0x47b
 8014784:	49a5      	ldr	r1, [pc, #660]	; (8014a1c <tcp_receive+0x2b0>)
 8014786:	48a6      	ldr	r0, [pc, #664]	; (8014a20 <tcp_receive+0x2b4>)
 8014788:	f006 fcba 	bl	801b100 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801478c:	687b      	ldr	r3, [r7, #4]
 801478e:	7d1b      	ldrb	r3, [r3, #20]
 8014790:	2b03      	cmp	r3, #3
 8014792:	d806      	bhi.n	80147a2 <tcp_receive+0x36>
 8014794:	4ba0      	ldr	r3, [pc, #640]	; (8014a18 <tcp_receive+0x2ac>)
 8014796:	f240 427c 	movw	r2, #1148	; 0x47c
 801479a:	49a2      	ldr	r1, [pc, #648]	; (8014a24 <tcp_receive+0x2b8>)
 801479c:	48a0      	ldr	r0, [pc, #640]	; (8014a20 <tcp_receive+0x2b4>)
 801479e:	f006 fcaf 	bl	801b100 <iprintf>

  if (flags & TCP_ACK) {
 80147a2:	4ba1      	ldr	r3, [pc, #644]	; (8014a28 <tcp_receive+0x2bc>)
 80147a4:	781b      	ldrb	r3, [r3, #0]
 80147a6:	f003 0310 	and.w	r3, r3, #16
 80147aa:	2b00      	cmp	r3, #0
 80147ac:	f000 8263 	beq.w	8014c76 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80147b0:	687b      	ldr	r3, [r7, #4]
 80147b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80147b6:	461a      	mov	r2, r3
 80147b8:	687b      	ldr	r3, [r7, #4]
 80147ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80147bc:	4413      	add	r3, r2
 80147be:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80147c0:	687b      	ldr	r3, [r7, #4]
 80147c2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80147c4:	4b99      	ldr	r3, [pc, #612]	; (8014a2c <tcp_receive+0x2c0>)
 80147c6:	681b      	ldr	r3, [r3, #0]
 80147c8:	1ad3      	subs	r3, r2, r3
 80147ca:	2b00      	cmp	r3, #0
 80147cc:	db1b      	blt.n	8014806 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80147ce:	687b      	ldr	r3, [r7, #4]
 80147d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80147d2:	4b96      	ldr	r3, [pc, #600]	; (8014a2c <tcp_receive+0x2c0>)
 80147d4:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80147d6:	429a      	cmp	r2, r3
 80147d8:	d106      	bne.n	80147e8 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80147da:	687b      	ldr	r3, [r7, #4]
 80147dc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80147de:	4b94      	ldr	r3, [pc, #592]	; (8014a30 <tcp_receive+0x2c4>)
 80147e0:	681b      	ldr	r3, [r3, #0]
 80147e2:	1ad3      	subs	r3, r2, r3
 80147e4:	2b00      	cmp	r3, #0
 80147e6:	db0e      	blt.n	8014806 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80147e8:	687b      	ldr	r3, [r7, #4]
 80147ea:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80147ec:	4b90      	ldr	r3, [pc, #576]	; (8014a30 <tcp_receive+0x2c4>)
 80147ee:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80147f0:	429a      	cmp	r2, r3
 80147f2:	d125      	bne.n	8014840 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80147f4:	4b8f      	ldr	r3, [pc, #572]	; (8014a34 <tcp_receive+0x2c8>)
 80147f6:	681b      	ldr	r3, [r3, #0]
 80147f8:	89db      	ldrh	r3, [r3, #14]
 80147fa:	b29a      	uxth	r2, r3
 80147fc:	687b      	ldr	r3, [r7, #4]
 80147fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014802:	429a      	cmp	r2, r3
 8014804:	d91c      	bls.n	8014840 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8014806:	4b8b      	ldr	r3, [pc, #556]	; (8014a34 <tcp_receive+0x2c8>)
 8014808:	681b      	ldr	r3, [r3, #0]
 801480a:	89db      	ldrh	r3, [r3, #14]
 801480c:	b29a      	uxth	r2, r3
 801480e:	687b      	ldr	r3, [r7, #4]
 8014810:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8014814:	687b      	ldr	r3, [r7, #4]
 8014816:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 801481a:	687b      	ldr	r3, [r7, #4]
 801481c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014820:	429a      	cmp	r2, r3
 8014822:	d205      	bcs.n	8014830 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8014824:	687b      	ldr	r3, [r7, #4]
 8014826:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801482a:	687b      	ldr	r3, [r7, #4]
 801482c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8014830:	4b7e      	ldr	r3, [pc, #504]	; (8014a2c <tcp_receive+0x2c0>)
 8014832:	681a      	ldr	r2, [r3, #0]
 8014834:	687b      	ldr	r3, [r7, #4]
 8014836:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8014838:	4b7d      	ldr	r3, [pc, #500]	; (8014a30 <tcp_receive+0x2c4>)
 801483a:	681a      	ldr	r2, [r3, #0]
 801483c:	687b      	ldr	r3, [r7, #4]
 801483e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8014840:	4b7b      	ldr	r3, [pc, #492]	; (8014a30 <tcp_receive+0x2c4>)
 8014842:	681a      	ldr	r2, [r3, #0]
 8014844:	687b      	ldr	r3, [r7, #4]
 8014846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014848:	1ad3      	subs	r3, r2, r3
 801484a:	2b00      	cmp	r3, #0
 801484c:	dc58      	bgt.n	8014900 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801484e:	4b7a      	ldr	r3, [pc, #488]	; (8014a38 <tcp_receive+0x2cc>)
 8014850:	881b      	ldrh	r3, [r3, #0]
 8014852:	2b00      	cmp	r3, #0
 8014854:	d14b      	bne.n	80148ee <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8014856:	687b      	ldr	r3, [r7, #4]
 8014858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801485a:	687a      	ldr	r2, [r7, #4]
 801485c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8014860:	4413      	add	r3, r2
 8014862:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014864:	429a      	cmp	r2, r3
 8014866:	d142      	bne.n	80148ee <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8014868:	687b      	ldr	r3, [r7, #4]
 801486a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801486e:	2b00      	cmp	r3, #0
 8014870:	db3d      	blt.n	80148ee <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8014872:	687b      	ldr	r3, [r7, #4]
 8014874:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014876:	4b6e      	ldr	r3, [pc, #440]	; (8014a30 <tcp_receive+0x2c4>)
 8014878:	681b      	ldr	r3, [r3, #0]
 801487a:	429a      	cmp	r2, r3
 801487c:	d137      	bne.n	80148ee <tcp_receive+0x182>
              found_dupack = 1;
 801487e:	2301      	movs	r3, #1
 8014880:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8014882:	687b      	ldr	r3, [r7, #4]
 8014884:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014888:	2bff      	cmp	r3, #255	; 0xff
 801488a:	d007      	beq.n	801489c <tcp_receive+0x130>
                ++pcb->dupacks;
 801488c:	687b      	ldr	r3, [r7, #4]
 801488e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014892:	3301      	adds	r3, #1
 8014894:	b2da      	uxtb	r2, r3
 8014896:	687b      	ldr	r3, [r7, #4]
 8014898:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 801489c:	687b      	ldr	r3, [r7, #4]
 801489e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80148a2:	2b03      	cmp	r3, #3
 80148a4:	d91b      	bls.n	80148de <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80148a6:	687b      	ldr	r3, [r7, #4]
 80148a8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80148ac:	687b      	ldr	r3, [r7, #4]
 80148ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80148b0:	4413      	add	r3, r2
 80148b2:	b29a      	uxth	r2, r3
 80148b4:	687b      	ldr	r3, [r7, #4]
 80148b6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80148ba:	429a      	cmp	r2, r3
 80148bc:	d30a      	bcc.n	80148d4 <tcp_receive+0x168>
 80148be:	687b      	ldr	r3, [r7, #4]
 80148c0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80148c4:	687b      	ldr	r3, [r7, #4]
 80148c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80148c8:	4413      	add	r3, r2
 80148ca:	b29a      	uxth	r2, r3
 80148cc:	687b      	ldr	r3, [r7, #4]
 80148ce:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80148d2:	e004      	b.n	80148de <tcp_receive+0x172>
 80148d4:	687b      	ldr	r3, [r7, #4]
 80148d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80148da:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 80148de:	687b      	ldr	r3, [r7, #4]
 80148e0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80148e4:	2b02      	cmp	r3, #2
 80148e6:	d902      	bls.n	80148ee <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80148e8:	6878      	ldr	r0, [r7, #4]
 80148ea:	f001 feed 	bl	80166c8 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80148ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80148f0:	2b00      	cmp	r3, #0
 80148f2:	f040 8160 	bne.w	8014bb6 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 80148f6:	687b      	ldr	r3, [r7, #4]
 80148f8:	2200      	movs	r2, #0
 80148fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80148fe:	e15a      	b.n	8014bb6 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014900:	4b4b      	ldr	r3, [pc, #300]	; (8014a30 <tcp_receive+0x2c4>)
 8014902:	681a      	ldr	r2, [r3, #0]
 8014904:	687b      	ldr	r3, [r7, #4]
 8014906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014908:	1ad3      	subs	r3, r2, r3
 801490a:	3b01      	subs	r3, #1
 801490c:	2b00      	cmp	r3, #0
 801490e:	f2c0 814d 	blt.w	8014bac <tcp_receive+0x440>
 8014912:	4b47      	ldr	r3, [pc, #284]	; (8014a30 <tcp_receive+0x2c4>)
 8014914:	681a      	ldr	r2, [r3, #0]
 8014916:	687b      	ldr	r3, [r7, #4]
 8014918:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801491a:	1ad3      	subs	r3, r2, r3
 801491c:	2b00      	cmp	r3, #0
 801491e:	f300 8145 	bgt.w	8014bac <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8014922:	687b      	ldr	r3, [r7, #4]
 8014924:	8b5b      	ldrh	r3, [r3, #26]
 8014926:	f003 0304 	and.w	r3, r3, #4
 801492a:	2b00      	cmp	r3, #0
 801492c:	d010      	beq.n	8014950 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801492e:	687b      	ldr	r3, [r7, #4]
 8014930:	8b5b      	ldrh	r3, [r3, #26]
 8014932:	f023 0304 	bic.w	r3, r3, #4
 8014936:	b29a      	uxth	r2, r3
 8014938:	687b      	ldr	r3, [r7, #4]
 801493a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 801493c:	687b      	ldr	r3, [r7, #4]
 801493e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8014942:	687b      	ldr	r3, [r7, #4]
 8014944:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8014948:	687b      	ldr	r3, [r7, #4]
 801494a:	2200      	movs	r2, #0
 801494c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8014950:	687b      	ldr	r3, [r7, #4]
 8014952:	2200      	movs	r2, #0
 8014954:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8014958:	687b      	ldr	r3, [r7, #4]
 801495a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801495e:	10db      	asrs	r3, r3, #3
 8014960:	b21b      	sxth	r3, r3
 8014962:	b29a      	uxth	r2, r3
 8014964:	687b      	ldr	r3, [r7, #4]
 8014966:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801496a:	b29b      	uxth	r3, r3
 801496c:	4413      	add	r3, r2
 801496e:	b29b      	uxth	r3, r3
 8014970:	b21a      	sxth	r2, r3
 8014972:	687b      	ldr	r3, [r7, #4]
 8014974:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8014978:	4b2d      	ldr	r3, [pc, #180]	; (8014a30 <tcp_receive+0x2c4>)
 801497a:	681b      	ldr	r3, [r3, #0]
 801497c:	b29a      	uxth	r2, r3
 801497e:	687b      	ldr	r3, [r7, #4]
 8014980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014982:	b29b      	uxth	r3, r3
 8014984:	1ad3      	subs	r3, r2, r3
 8014986:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8014988:	687b      	ldr	r3, [r7, #4]
 801498a:	2200      	movs	r2, #0
 801498c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8014990:	4b27      	ldr	r3, [pc, #156]	; (8014a30 <tcp_receive+0x2c4>)
 8014992:	681a      	ldr	r2, [r3, #0]
 8014994:	687b      	ldr	r3, [r7, #4]
 8014996:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8014998:	687b      	ldr	r3, [r7, #4]
 801499a:	7d1b      	ldrb	r3, [r3, #20]
 801499c:	2b03      	cmp	r3, #3
 801499e:	f240 8096 	bls.w	8014ace <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 80149a2:	687b      	ldr	r3, [r7, #4]
 80149a4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80149a8:	687b      	ldr	r3, [r7, #4]
 80149aa:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80149ae:	429a      	cmp	r2, r3
 80149b0:	d244      	bcs.n	8014a3c <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80149b2:	687b      	ldr	r3, [r7, #4]
 80149b4:	8b5b      	ldrh	r3, [r3, #26]
 80149b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80149ba:	2b00      	cmp	r3, #0
 80149bc:	d001      	beq.n	80149c2 <tcp_receive+0x256>
 80149be:	2301      	movs	r3, #1
 80149c0:	e000      	b.n	80149c4 <tcp_receive+0x258>
 80149c2:	2302      	movs	r3, #2
 80149c4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80149c8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80149cc:	b29a      	uxth	r2, r3
 80149ce:	687b      	ldr	r3, [r7, #4]
 80149d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80149d2:	fb12 f303 	smulbb	r3, r2, r3
 80149d6:	b29b      	uxth	r3, r3
 80149d8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80149da:	4293      	cmp	r3, r2
 80149dc:	bf28      	it	cs
 80149de:	4613      	movcs	r3, r2
 80149e0:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80149e2:	687b      	ldr	r3, [r7, #4]
 80149e4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80149e8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80149ea:	4413      	add	r3, r2
 80149ec:	b29a      	uxth	r2, r3
 80149ee:	687b      	ldr	r3, [r7, #4]
 80149f0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80149f4:	429a      	cmp	r2, r3
 80149f6:	d309      	bcc.n	8014a0c <tcp_receive+0x2a0>
 80149f8:	687b      	ldr	r3, [r7, #4]
 80149fa:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80149fe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014a00:	4413      	add	r3, r2
 8014a02:	b29a      	uxth	r2, r3
 8014a04:	687b      	ldr	r3, [r7, #4]
 8014a06:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8014a0a:	e060      	b.n	8014ace <tcp_receive+0x362>
 8014a0c:	687b      	ldr	r3, [r7, #4]
 8014a0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014a12:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8014a16:	e05a      	b.n	8014ace <tcp_receive+0x362>
 8014a18:	0801ed74 	.word	0x0801ed74
 8014a1c:	0801f0c0 	.word	0x0801f0c0
 8014a20:	0801eddc 	.word	0x0801eddc
 8014a24:	0801f0dc 	.word	0x0801f0dc
 8014a28:	24004944 	.word	0x24004944
 8014a2c:	24004938 	.word	0x24004938
 8014a30:	2400493c 	.word	0x2400493c
 8014a34:	24004928 	.word	0x24004928
 8014a38:	24004942 	.word	0x24004942
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8014a3c:	687b      	ldr	r3, [r7, #4]
 8014a3e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8014a42:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8014a44:	4413      	add	r3, r2
 8014a46:	b29a      	uxth	r2, r3
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8014a4e:	429a      	cmp	r2, r3
 8014a50:	d309      	bcc.n	8014a66 <tcp_receive+0x2fa>
 8014a52:	687b      	ldr	r3, [r7, #4]
 8014a54:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8014a58:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8014a5a:	4413      	add	r3, r2
 8014a5c:	b29a      	uxth	r2, r3
 8014a5e:	687b      	ldr	r3, [r7, #4]
 8014a60:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8014a64:	e004      	b.n	8014a70 <tcp_receive+0x304>
 8014a66:	687b      	ldr	r3, [r7, #4]
 8014a68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014a6c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8014a70:	687b      	ldr	r3, [r7, #4]
 8014a72:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8014a76:	687b      	ldr	r3, [r7, #4]
 8014a78:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014a7c:	429a      	cmp	r2, r3
 8014a7e:	d326      	bcc.n	8014ace <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8014a80:	687b      	ldr	r3, [r7, #4]
 8014a82:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8014a86:	687b      	ldr	r3, [r7, #4]
 8014a88:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014a8c:	1ad3      	subs	r3, r2, r3
 8014a8e:	b29a      	uxth	r2, r3
 8014a90:	687b      	ldr	r3, [r7, #4]
 8014a92:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8014a96:	687b      	ldr	r3, [r7, #4]
 8014a98:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014a9c:	687b      	ldr	r3, [r7, #4]
 8014a9e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014aa0:	4413      	add	r3, r2
 8014aa2:	b29a      	uxth	r2, r3
 8014aa4:	687b      	ldr	r3, [r7, #4]
 8014aa6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014aaa:	429a      	cmp	r2, r3
 8014aac:	d30a      	bcc.n	8014ac4 <tcp_receive+0x358>
 8014aae:	687b      	ldr	r3, [r7, #4]
 8014ab0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014ab4:	687b      	ldr	r3, [r7, #4]
 8014ab6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014ab8:	4413      	add	r3, r2
 8014aba:	b29a      	uxth	r2, r3
 8014abc:	687b      	ldr	r3, [r7, #4]
 8014abe:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8014ac2:	e004      	b.n	8014ace <tcp_receive+0x362>
 8014ac4:	687b      	ldr	r3, [r7, #4]
 8014ac6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014aca:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8014ace:	687b      	ldr	r3, [r7, #4]
 8014ad0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8014ad2:	687b      	ldr	r3, [r7, #4]
 8014ad4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014ad6:	4a98      	ldr	r2, [pc, #608]	; (8014d38 <tcp_receive+0x5cc>)
 8014ad8:	6878      	ldr	r0, [r7, #4]
 8014ada:	f7ff fdcb 	bl	8014674 <tcp_free_acked_segments>
 8014ade:	4602      	mov	r2, r0
 8014ae0:	687b      	ldr	r3, [r7, #4]
 8014ae2:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8014ae4:	687b      	ldr	r3, [r7, #4]
 8014ae6:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8014ae8:	687b      	ldr	r3, [r7, #4]
 8014aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014aec:	4a93      	ldr	r2, [pc, #588]	; (8014d3c <tcp_receive+0x5d0>)
 8014aee:	6878      	ldr	r0, [r7, #4]
 8014af0:	f7ff fdc0 	bl	8014674 <tcp_free_acked_segments>
 8014af4:	4602      	mov	r2, r0
 8014af6:	687b      	ldr	r3, [r7, #4]
 8014af8:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8014afa:	687b      	ldr	r3, [r7, #4]
 8014afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014afe:	2b00      	cmp	r3, #0
 8014b00:	d104      	bne.n	8014b0c <tcp_receive+0x3a0>
        pcb->rtime = -1;
 8014b02:	687b      	ldr	r3, [r7, #4]
 8014b04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014b08:	861a      	strh	r2, [r3, #48]	; 0x30
 8014b0a:	e002      	b.n	8014b12 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8014b0c:	687b      	ldr	r3, [r7, #4]
 8014b0e:	2200      	movs	r2, #0
 8014b10:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8014b12:	687b      	ldr	r3, [r7, #4]
 8014b14:	2200      	movs	r2, #0
 8014b16:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8014b18:	687b      	ldr	r3, [r7, #4]
 8014b1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014b1c:	2b00      	cmp	r3, #0
 8014b1e:	d103      	bne.n	8014b28 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8014b20:	687b      	ldr	r3, [r7, #4]
 8014b22:	2200      	movs	r2, #0
 8014b24:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8014b28:	687b      	ldr	r3, [r7, #4]
 8014b2a:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8014b2e:	4b84      	ldr	r3, [pc, #528]	; (8014d40 <tcp_receive+0x5d4>)
 8014b30:	881b      	ldrh	r3, [r3, #0]
 8014b32:	4413      	add	r3, r2
 8014b34:	b29a      	uxth	r2, r3
 8014b36:	687b      	ldr	r3, [r7, #4]
 8014b38:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8014b3c:	687b      	ldr	r3, [r7, #4]
 8014b3e:	8b5b      	ldrh	r3, [r3, #26]
 8014b40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8014b44:	2b00      	cmp	r3, #0
 8014b46:	d035      	beq.n	8014bb4 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8014b48:	687b      	ldr	r3, [r7, #4]
 8014b4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014b4c:	2b00      	cmp	r3, #0
 8014b4e:	d118      	bne.n	8014b82 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8014b50:	687b      	ldr	r3, [r7, #4]
 8014b52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014b54:	2b00      	cmp	r3, #0
 8014b56:	d00c      	beq.n	8014b72 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8014b58:	687b      	ldr	r3, [r7, #4]
 8014b5a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8014b5c:	687b      	ldr	r3, [r7, #4]
 8014b5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014b60:	68db      	ldr	r3, [r3, #12]
 8014b62:	685b      	ldr	r3, [r3, #4]
 8014b64:	4618      	mov	r0, r3
 8014b66:	f7f8 fc8c 	bl	800d482 <lwip_htonl>
 8014b6a:	4603      	mov	r3, r0
 8014b6c:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8014b6e:	2b00      	cmp	r3, #0
 8014b70:	dc20      	bgt.n	8014bb4 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 8014b72:	687b      	ldr	r3, [r7, #4]
 8014b74:	8b5b      	ldrh	r3, [r3, #26]
 8014b76:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8014b7a:	b29a      	uxth	r2, r3
 8014b7c:	687b      	ldr	r3, [r7, #4]
 8014b7e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014b80:	e018      	b.n	8014bb4 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8014b82:	687b      	ldr	r3, [r7, #4]
 8014b84:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8014b86:	687b      	ldr	r3, [r7, #4]
 8014b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014b8a:	68db      	ldr	r3, [r3, #12]
 8014b8c:	685b      	ldr	r3, [r3, #4]
 8014b8e:	4618      	mov	r0, r3
 8014b90:	f7f8 fc77 	bl	800d482 <lwip_htonl>
 8014b94:	4603      	mov	r3, r0
 8014b96:	1ae3      	subs	r3, r4, r3
 8014b98:	2b00      	cmp	r3, #0
 8014b9a:	dc0b      	bgt.n	8014bb4 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8014b9c:	687b      	ldr	r3, [r7, #4]
 8014b9e:	8b5b      	ldrh	r3, [r3, #26]
 8014ba0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8014ba4:	b29a      	uxth	r2, r3
 8014ba6:	687b      	ldr	r3, [r7, #4]
 8014ba8:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014baa:	e003      	b.n	8014bb4 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8014bac:	6878      	ldr	r0, [r7, #4]
 8014bae:	f001 ff85 	bl	8016abc <tcp_send_empty_ack>
 8014bb2:	e000      	b.n	8014bb6 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014bb4:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8014bb6:	687b      	ldr	r3, [r7, #4]
 8014bb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014bba:	2b00      	cmp	r3, #0
 8014bbc:	d05b      	beq.n	8014c76 <tcp_receive+0x50a>
 8014bbe:	687b      	ldr	r3, [r7, #4]
 8014bc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014bc2:	4b60      	ldr	r3, [pc, #384]	; (8014d44 <tcp_receive+0x5d8>)
 8014bc4:	681b      	ldr	r3, [r3, #0]
 8014bc6:	1ad3      	subs	r3, r2, r3
 8014bc8:	2b00      	cmp	r3, #0
 8014bca:	da54      	bge.n	8014c76 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8014bcc:	4b5e      	ldr	r3, [pc, #376]	; (8014d48 <tcp_receive+0x5dc>)
 8014bce:	681b      	ldr	r3, [r3, #0]
 8014bd0:	b29a      	uxth	r2, r3
 8014bd2:	687b      	ldr	r3, [r7, #4]
 8014bd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014bd6:	b29b      	uxth	r3, r3
 8014bd8:	1ad3      	subs	r3, r2, r3
 8014bda:	b29b      	uxth	r3, r3
 8014bdc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8014be0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8014be4:	687b      	ldr	r3, [r7, #4]
 8014be6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014bea:	10db      	asrs	r3, r3, #3
 8014bec:	b21b      	sxth	r3, r3
 8014bee:	b29b      	uxth	r3, r3
 8014bf0:	1ad3      	subs	r3, r2, r3
 8014bf2:	b29b      	uxth	r3, r3
 8014bf4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8014bf8:	687b      	ldr	r3, [r7, #4]
 8014bfa:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014bfe:	b29a      	uxth	r2, r3
 8014c00:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8014c04:	4413      	add	r3, r2
 8014c06:	b29b      	uxth	r3, r3
 8014c08:	b21a      	sxth	r2, r3
 8014c0a:	687b      	ldr	r3, [r7, #4]
 8014c0c:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8014c0e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8014c12:	2b00      	cmp	r3, #0
 8014c14:	da05      	bge.n	8014c22 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8014c16:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8014c1a:	425b      	negs	r3, r3
 8014c1c:	b29b      	uxth	r3, r3
 8014c1e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8014c22:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8014c26:	687b      	ldr	r3, [r7, #4]
 8014c28:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8014c2c:	109b      	asrs	r3, r3, #2
 8014c2e:	b21b      	sxth	r3, r3
 8014c30:	b29b      	uxth	r3, r3
 8014c32:	1ad3      	subs	r3, r2, r3
 8014c34:	b29b      	uxth	r3, r3
 8014c36:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8014c3a:	687b      	ldr	r3, [r7, #4]
 8014c3c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8014c40:	b29a      	uxth	r2, r3
 8014c42:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8014c46:	4413      	add	r3, r2
 8014c48:	b29b      	uxth	r3, r3
 8014c4a:	b21a      	sxth	r2, r3
 8014c4c:	687b      	ldr	r3, [r7, #4]
 8014c4e:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8014c50:	687b      	ldr	r3, [r7, #4]
 8014c52:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014c56:	10db      	asrs	r3, r3, #3
 8014c58:	b21b      	sxth	r3, r3
 8014c5a:	b29a      	uxth	r2, r3
 8014c5c:	687b      	ldr	r3, [r7, #4]
 8014c5e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8014c62:	b29b      	uxth	r3, r3
 8014c64:	4413      	add	r3, r2
 8014c66:	b29b      	uxth	r3, r3
 8014c68:	b21a      	sxth	r2, r3
 8014c6a:	687b      	ldr	r3, [r7, #4]
 8014c6c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8014c70:	687b      	ldr	r3, [r7, #4]
 8014c72:	2200      	movs	r2, #0
 8014c74:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8014c76:	4b35      	ldr	r3, [pc, #212]	; (8014d4c <tcp_receive+0x5e0>)
 8014c78:	881b      	ldrh	r3, [r3, #0]
 8014c7a:	2b00      	cmp	r3, #0
 8014c7c:	f000 84e1 	beq.w	8015642 <tcp_receive+0xed6>
 8014c80:	687b      	ldr	r3, [r7, #4]
 8014c82:	7d1b      	ldrb	r3, [r3, #20]
 8014c84:	2b06      	cmp	r3, #6
 8014c86:	f200 84dc 	bhi.w	8015642 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8014c8a:	687b      	ldr	r3, [r7, #4]
 8014c8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014c8e:	4b30      	ldr	r3, [pc, #192]	; (8014d50 <tcp_receive+0x5e4>)
 8014c90:	681b      	ldr	r3, [r3, #0]
 8014c92:	1ad3      	subs	r3, r2, r3
 8014c94:	3b01      	subs	r3, #1
 8014c96:	2b00      	cmp	r3, #0
 8014c98:	f2c0 808e 	blt.w	8014db8 <tcp_receive+0x64c>
 8014c9c:	687b      	ldr	r3, [r7, #4]
 8014c9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014ca0:	4b2a      	ldr	r3, [pc, #168]	; (8014d4c <tcp_receive+0x5e0>)
 8014ca2:	881b      	ldrh	r3, [r3, #0]
 8014ca4:	4619      	mov	r1, r3
 8014ca6:	4b2a      	ldr	r3, [pc, #168]	; (8014d50 <tcp_receive+0x5e4>)
 8014ca8:	681b      	ldr	r3, [r3, #0]
 8014caa:	440b      	add	r3, r1
 8014cac:	1ad3      	subs	r3, r2, r3
 8014cae:	3301      	adds	r3, #1
 8014cb0:	2b00      	cmp	r3, #0
 8014cb2:	f300 8081 	bgt.w	8014db8 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8014cb6:	4b27      	ldr	r3, [pc, #156]	; (8014d54 <tcp_receive+0x5e8>)
 8014cb8:	685b      	ldr	r3, [r3, #4]
 8014cba:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8014cbc:	687b      	ldr	r3, [r7, #4]
 8014cbe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014cc0:	4b23      	ldr	r3, [pc, #140]	; (8014d50 <tcp_receive+0x5e4>)
 8014cc2:	681b      	ldr	r3, [r3, #0]
 8014cc4:	1ad3      	subs	r3, r2, r3
 8014cc6:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8014cc8:	4b22      	ldr	r3, [pc, #136]	; (8014d54 <tcp_receive+0x5e8>)
 8014cca:	685b      	ldr	r3, [r3, #4]
 8014ccc:	2b00      	cmp	r3, #0
 8014cce:	d106      	bne.n	8014cde <tcp_receive+0x572>
 8014cd0:	4b21      	ldr	r3, [pc, #132]	; (8014d58 <tcp_receive+0x5ec>)
 8014cd2:	f240 5294 	movw	r2, #1428	; 0x594
 8014cd6:	4921      	ldr	r1, [pc, #132]	; (8014d5c <tcp_receive+0x5f0>)
 8014cd8:	4821      	ldr	r0, [pc, #132]	; (8014d60 <tcp_receive+0x5f4>)
 8014cda:	f006 fa11 	bl	801b100 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8014cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ce0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8014ce4:	4293      	cmp	r3, r2
 8014ce6:	d906      	bls.n	8014cf6 <tcp_receive+0x58a>
 8014ce8:	4b1b      	ldr	r3, [pc, #108]	; (8014d58 <tcp_receive+0x5ec>)
 8014cea:	f240 5295 	movw	r2, #1429	; 0x595
 8014cee:	491d      	ldr	r1, [pc, #116]	; (8014d64 <tcp_receive+0x5f8>)
 8014cf0:	481b      	ldr	r0, [pc, #108]	; (8014d60 <tcp_receive+0x5f4>)
 8014cf2:	f006 fa05 	bl	801b100 <iprintf>
      off = (u16_t)off32;
 8014cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cf8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8014cfc:	4b15      	ldr	r3, [pc, #84]	; (8014d54 <tcp_receive+0x5e8>)
 8014cfe:	685b      	ldr	r3, [r3, #4]
 8014d00:	891b      	ldrh	r3, [r3, #8]
 8014d02:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014d06:	429a      	cmp	r2, r3
 8014d08:	d906      	bls.n	8014d18 <tcp_receive+0x5ac>
 8014d0a:	4b13      	ldr	r3, [pc, #76]	; (8014d58 <tcp_receive+0x5ec>)
 8014d0c:	f240 5297 	movw	r2, #1431	; 0x597
 8014d10:	4915      	ldr	r1, [pc, #84]	; (8014d68 <tcp_receive+0x5fc>)
 8014d12:	4813      	ldr	r0, [pc, #76]	; (8014d60 <tcp_receive+0x5f4>)
 8014d14:	f006 f9f4 	bl	801b100 <iprintf>
      inseg.len -= off;
 8014d18:	4b0e      	ldr	r3, [pc, #56]	; (8014d54 <tcp_receive+0x5e8>)
 8014d1a:	891a      	ldrh	r2, [r3, #8]
 8014d1c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014d20:	1ad3      	subs	r3, r2, r3
 8014d22:	b29a      	uxth	r2, r3
 8014d24:	4b0b      	ldr	r3, [pc, #44]	; (8014d54 <tcp_receive+0x5e8>)
 8014d26:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8014d28:	4b0a      	ldr	r3, [pc, #40]	; (8014d54 <tcp_receive+0x5e8>)
 8014d2a:	685b      	ldr	r3, [r3, #4]
 8014d2c:	891a      	ldrh	r2, [r3, #8]
 8014d2e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014d32:	1ad3      	subs	r3, r2, r3
 8014d34:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8014d36:	e029      	b.n	8014d8c <tcp_receive+0x620>
 8014d38:	0801f0f8 	.word	0x0801f0f8
 8014d3c:	0801f100 	.word	0x0801f100
 8014d40:	24004940 	.word	0x24004940
 8014d44:	2400493c 	.word	0x2400493c
 8014d48:	2400ce6c 	.word	0x2400ce6c
 8014d4c:	24004942 	.word	0x24004942
 8014d50:	24004938 	.word	0x24004938
 8014d54:	24004918 	.word	0x24004918
 8014d58:	0801ed74 	.word	0x0801ed74
 8014d5c:	0801f108 	.word	0x0801f108
 8014d60:	0801eddc 	.word	0x0801eddc
 8014d64:	0801f118 	.word	0x0801f118
 8014d68:	0801f128 	.word	0x0801f128
        off -= p->len;
 8014d6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014d6e:	895b      	ldrh	r3, [r3, #10]
 8014d70:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014d74:	1ad3      	subs	r3, r2, r3
 8014d76:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8014d7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014d7c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8014d7e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8014d80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014d82:	2200      	movs	r2, #0
 8014d84:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8014d86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014d88:	681b      	ldr	r3, [r3, #0]
 8014d8a:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8014d8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014d8e:	895b      	ldrh	r3, [r3, #10]
 8014d90:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014d94:	429a      	cmp	r2, r3
 8014d96:	d8e9      	bhi.n	8014d6c <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8014d98:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014d9c:	4619      	mov	r1, r3
 8014d9e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8014da0:	f7fc fa6a 	bl	8011278 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8014da4:	687b      	ldr	r3, [r7, #4]
 8014da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014da8:	4a91      	ldr	r2, [pc, #580]	; (8014ff0 <tcp_receive+0x884>)
 8014daa:	6013      	str	r3, [r2, #0]
 8014dac:	4b91      	ldr	r3, [pc, #580]	; (8014ff4 <tcp_receive+0x888>)
 8014dae:	68db      	ldr	r3, [r3, #12]
 8014db0:	4a8f      	ldr	r2, [pc, #572]	; (8014ff0 <tcp_receive+0x884>)
 8014db2:	6812      	ldr	r2, [r2, #0]
 8014db4:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8014db6:	e00d      	b.n	8014dd4 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8014db8:	4b8d      	ldr	r3, [pc, #564]	; (8014ff0 <tcp_receive+0x884>)
 8014dba:	681a      	ldr	r2, [r3, #0]
 8014dbc:	687b      	ldr	r3, [r7, #4]
 8014dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014dc0:	1ad3      	subs	r3, r2, r3
 8014dc2:	2b00      	cmp	r3, #0
 8014dc4:	da06      	bge.n	8014dd4 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8014dc6:	687b      	ldr	r3, [r7, #4]
 8014dc8:	8b5b      	ldrh	r3, [r3, #26]
 8014dca:	f043 0302 	orr.w	r3, r3, #2
 8014dce:	b29a      	uxth	r2, r3
 8014dd0:	687b      	ldr	r3, [r7, #4]
 8014dd2:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8014dd4:	4b86      	ldr	r3, [pc, #536]	; (8014ff0 <tcp_receive+0x884>)
 8014dd6:	681a      	ldr	r2, [r3, #0]
 8014dd8:	687b      	ldr	r3, [r7, #4]
 8014dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014ddc:	1ad3      	subs	r3, r2, r3
 8014dde:	2b00      	cmp	r3, #0
 8014de0:	f2c0 842a 	blt.w	8015638 <tcp_receive+0xecc>
 8014de4:	4b82      	ldr	r3, [pc, #520]	; (8014ff0 <tcp_receive+0x884>)
 8014de6:	681a      	ldr	r2, [r3, #0]
 8014de8:	687b      	ldr	r3, [r7, #4]
 8014dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014dec:	6879      	ldr	r1, [r7, #4]
 8014dee:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014df0:	440b      	add	r3, r1
 8014df2:	1ad3      	subs	r3, r2, r3
 8014df4:	3301      	adds	r3, #1
 8014df6:	2b00      	cmp	r3, #0
 8014df8:	f300 841e 	bgt.w	8015638 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8014dfc:	687b      	ldr	r3, [r7, #4]
 8014dfe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014e00:	4b7b      	ldr	r3, [pc, #492]	; (8014ff0 <tcp_receive+0x884>)
 8014e02:	681b      	ldr	r3, [r3, #0]
 8014e04:	429a      	cmp	r2, r3
 8014e06:	f040 829a 	bne.w	801533e <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8014e0a:	4b7a      	ldr	r3, [pc, #488]	; (8014ff4 <tcp_receive+0x888>)
 8014e0c:	891c      	ldrh	r4, [r3, #8]
 8014e0e:	4b79      	ldr	r3, [pc, #484]	; (8014ff4 <tcp_receive+0x888>)
 8014e10:	68db      	ldr	r3, [r3, #12]
 8014e12:	899b      	ldrh	r3, [r3, #12]
 8014e14:	b29b      	uxth	r3, r3
 8014e16:	4618      	mov	r0, r3
 8014e18:	f7f8 fb1e 	bl	800d458 <lwip_htons>
 8014e1c:	4603      	mov	r3, r0
 8014e1e:	b2db      	uxtb	r3, r3
 8014e20:	f003 0303 	and.w	r3, r3, #3
 8014e24:	2b00      	cmp	r3, #0
 8014e26:	d001      	beq.n	8014e2c <tcp_receive+0x6c0>
 8014e28:	2301      	movs	r3, #1
 8014e2a:	e000      	b.n	8014e2e <tcp_receive+0x6c2>
 8014e2c:	2300      	movs	r3, #0
 8014e2e:	4423      	add	r3, r4
 8014e30:	b29a      	uxth	r2, r3
 8014e32:	4b71      	ldr	r3, [pc, #452]	; (8014ff8 <tcp_receive+0x88c>)
 8014e34:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8014e36:	687b      	ldr	r3, [r7, #4]
 8014e38:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8014e3a:	4b6f      	ldr	r3, [pc, #444]	; (8014ff8 <tcp_receive+0x88c>)
 8014e3c:	881b      	ldrh	r3, [r3, #0]
 8014e3e:	429a      	cmp	r2, r3
 8014e40:	d275      	bcs.n	8014f2e <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8014e42:	4b6c      	ldr	r3, [pc, #432]	; (8014ff4 <tcp_receive+0x888>)
 8014e44:	68db      	ldr	r3, [r3, #12]
 8014e46:	899b      	ldrh	r3, [r3, #12]
 8014e48:	b29b      	uxth	r3, r3
 8014e4a:	4618      	mov	r0, r3
 8014e4c:	f7f8 fb04 	bl	800d458 <lwip_htons>
 8014e50:	4603      	mov	r3, r0
 8014e52:	b2db      	uxtb	r3, r3
 8014e54:	f003 0301 	and.w	r3, r3, #1
 8014e58:	2b00      	cmp	r3, #0
 8014e5a:	d01f      	beq.n	8014e9c <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8014e5c:	4b65      	ldr	r3, [pc, #404]	; (8014ff4 <tcp_receive+0x888>)
 8014e5e:	68db      	ldr	r3, [r3, #12]
 8014e60:	899b      	ldrh	r3, [r3, #12]
 8014e62:	b29b      	uxth	r3, r3
 8014e64:	b21b      	sxth	r3, r3
 8014e66:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8014e6a:	b21c      	sxth	r4, r3
 8014e6c:	4b61      	ldr	r3, [pc, #388]	; (8014ff4 <tcp_receive+0x888>)
 8014e6e:	68db      	ldr	r3, [r3, #12]
 8014e70:	899b      	ldrh	r3, [r3, #12]
 8014e72:	b29b      	uxth	r3, r3
 8014e74:	4618      	mov	r0, r3
 8014e76:	f7f8 faef 	bl	800d458 <lwip_htons>
 8014e7a:	4603      	mov	r3, r0
 8014e7c:	b2db      	uxtb	r3, r3
 8014e7e:	b29b      	uxth	r3, r3
 8014e80:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8014e84:	b29b      	uxth	r3, r3
 8014e86:	4618      	mov	r0, r3
 8014e88:	f7f8 fae6 	bl	800d458 <lwip_htons>
 8014e8c:	4603      	mov	r3, r0
 8014e8e:	b21b      	sxth	r3, r3
 8014e90:	4323      	orrs	r3, r4
 8014e92:	b21a      	sxth	r2, r3
 8014e94:	4b57      	ldr	r3, [pc, #348]	; (8014ff4 <tcp_receive+0x888>)
 8014e96:	68db      	ldr	r3, [r3, #12]
 8014e98:	b292      	uxth	r2, r2
 8014e9a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8014e9c:	687b      	ldr	r3, [r7, #4]
 8014e9e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8014ea0:	4b54      	ldr	r3, [pc, #336]	; (8014ff4 <tcp_receive+0x888>)
 8014ea2:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8014ea4:	4b53      	ldr	r3, [pc, #332]	; (8014ff4 <tcp_receive+0x888>)
 8014ea6:	68db      	ldr	r3, [r3, #12]
 8014ea8:	899b      	ldrh	r3, [r3, #12]
 8014eaa:	b29b      	uxth	r3, r3
 8014eac:	4618      	mov	r0, r3
 8014eae:	f7f8 fad3 	bl	800d458 <lwip_htons>
 8014eb2:	4603      	mov	r3, r0
 8014eb4:	b2db      	uxtb	r3, r3
 8014eb6:	f003 0302 	and.w	r3, r3, #2
 8014eba:	2b00      	cmp	r3, #0
 8014ebc:	d005      	beq.n	8014eca <tcp_receive+0x75e>
            inseg.len -= 1;
 8014ebe:	4b4d      	ldr	r3, [pc, #308]	; (8014ff4 <tcp_receive+0x888>)
 8014ec0:	891b      	ldrh	r3, [r3, #8]
 8014ec2:	3b01      	subs	r3, #1
 8014ec4:	b29a      	uxth	r2, r3
 8014ec6:	4b4b      	ldr	r3, [pc, #300]	; (8014ff4 <tcp_receive+0x888>)
 8014ec8:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8014eca:	4b4a      	ldr	r3, [pc, #296]	; (8014ff4 <tcp_receive+0x888>)
 8014ecc:	685a      	ldr	r2, [r3, #4]
 8014ece:	4b49      	ldr	r3, [pc, #292]	; (8014ff4 <tcp_receive+0x888>)
 8014ed0:	891b      	ldrh	r3, [r3, #8]
 8014ed2:	4619      	mov	r1, r3
 8014ed4:	4610      	mov	r0, r2
 8014ed6:	f7fc f8cf 	bl	8011078 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8014eda:	4b46      	ldr	r3, [pc, #280]	; (8014ff4 <tcp_receive+0x888>)
 8014edc:	891c      	ldrh	r4, [r3, #8]
 8014ede:	4b45      	ldr	r3, [pc, #276]	; (8014ff4 <tcp_receive+0x888>)
 8014ee0:	68db      	ldr	r3, [r3, #12]
 8014ee2:	899b      	ldrh	r3, [r3, #12]
 8014ee4:	b29b      	uxth	r3, r3
 8014ee6:	4618      	mov	r0, r3
 8014ee8:	f7f8 fab6 	bl	800d458 <lwip_htons>
 8014eec:	4603      	mov	r3, r0
 8014eee:	b2db      	uxtb	r3, r3
 8014ef0:	f003 0303 	and.w	r3, r3, #3
 8014ef4:	2b00      	cmp	r3, #0
 8014ef6:	d001      	beq.n	8014efc <tcp_receive+0x790>
 8014ef8:	2301      	movs	r3, #1
 8014efa:	e000      	b.n	8014efe <tcp_receive+0x792>
 8014efc:	2300      	movs	r3, #0
 8014efe:	4423      	add	r3, r4
 8014f00:	b29a      	uxth	r2, r3
 8014f02:	4b3d      	ldr	r3, [pc, #244]	; (8014ff8 <tcp_receive+0x88c>)
 8014f04:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8014f06:	4b3c      	ldr	r3, [pc, #240]	; (8014ff8 <tcp_receive+0x88c>)
 8014f08:	881b      	ldrh	r3, [r3, #0]
 8014f0a:	461a      	mov	r2, r3
 8014f0c:	4b38      	ldr	r3, [pc, #224]	; (8014ff0 <tcp_receive+0x884>)
 8014f0e:	681b      	ldr	r3, [r3, #0]
 8014f10:	441a      	add	r2, r3
 8014f12:	687b      	ldr	r3, [r7, #4]
 8014f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014f16:	6879      	ldr	r1, [r7, #4]
 8014f18:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014f1a:	440b      	add	r3, r1
 8014f1c:	429a      	cmp	r2, r3
 8014f1e:	d006      	beq.n	8014f2e <tcp_receive+0x7c2>
 8014f20:	4b36      	ldr	r3, [pc, #216]	; (8014ffc <tcp_receive+0x890>)
 8014f22:	f240 52cc 	movw	r2, #1484	; 0x5cc
 8014f26:	4936      	ldr	r1, [pc, #216]	; (8015000 <tcp_receive+0x894>)
 8014f28:	4836      	ldr	r0, [pc, #216]	; (8015004 <tcp_receive+0x898>)
 8014f2a:	f006 f8e9 	bl	801b100 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8014f2e:	687b      	ldr	r3, [r7, #4]
 8014f30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014f32:	2b00      	cmp	r3, #0
 8014f34:	f000 80e7 	beq.w	8015106 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8014f38:	4b2e      	ldr	r3, [pc, #184]	; (8014ff4 <tcp_receive+0x888>)
 8014f3a:	68db      	ldr	r3, [r3, #12]
 8014f3c:	899b      	ldrh	r3, [r3, #12]
 8014f3e:	b29b      	uxth	r3, r3
 8014f40:	4618      	mov	r0, r3
 8014f42:	f7f8 fa89 	bl	800d458 <lwip_htons>
 8014f46:	4603      	mov	r3, r0
 8014f48:	b2db      	uxtb	r3, r3
 8014f4a:	f003 0301 	and.w	r3, r3, #1
 8014f4e:	2b00      	cmp	r3, #0
 8014f50:	d010      	beq.n	8014f74 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8014f52:	e00a      	b.n	8014f6a <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8014f54:	687b      	ldr	r3, [r7, #4]
 8014f56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014f58:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8014f5a:	687b      	ldr	r3, [r7, #4]
 8014f5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014f5e:	681a      	ldr	r2, [r3, #0]
 8014f60:	687b      	ldr	r3, [r7, #4]
 8014f62:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8014f64:	68f8      	ldr	r0, [r7, #12]
 8014f66:	f7fd fd97 	bl	8012a98 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8014f6a:	687b      	ldr	r3, [r7, #4]
 8014f6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014f6e:	2b00      	cmp	r3, #0
 8014f70:	d1f0      	bne.n	8014f54 <tcp_receive+0x7e8>
 8014f72:	e0c8      	b.n	8015106 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8014f74:	687b      	ldr	r3, [r7, #4]
 8014f76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014f78:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8014f7a:	e052      	b.n	8015022 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8014f7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014f7e:	68db      	ldr	r3, [r3, #12]
 8014f80:	899b      	ldrh	r3, [r3, #12]
 8014f82:	b29b      	uxth	r3, r3
 8014f84:	4618      	mov	r0, r3
 8014f86:	f7f8 fa67 	bl	800d458 <lwip_htons>
 8014f8a:	4603      	mov	r3, r0
 8014f8c:	b2db      	uxtb	r3, r3
 8014f8e:	f003 0301 	and.w	r3, r3, #1
 8014f92:	2b00      	cmp	r3, #0
 8014f94:	d03d      	beq.n	8015012 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8014f96:	4b17      	ldr	r3, [pc, #92]	; (8014ff4 <tcp_receive+0x888>)
 8014f98:	68db      	ldr	r3, [r3, #12]
 8014f9a:	899b      	ldrh	r3, [r3, #12]
 8014f9c:	b29b      	uxth	r3, r3
 8014f9e:	4618      	mov	r0, r3
 8014fa0:	f7f8 fa5a 	bl	800d458 <lwip_htons>
 8014fa4:	4603      	mov	r3, r0
 8014fa6:	b2db      	uxtb	r3, r3
 8014fa8:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8014fac:	2b00      	cmp	r3, #0
 8014fae:	d130      	bne.n	8015012 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8014fb0:	4b10      	ldr	r3, [pc, #64]	; (8014ff4 <tcp_receive+0x888>)
 8014fb2:	68db      	ldr	r3, [r3, #12]
 8014fb4:	899b      	ldrh	r3, [r3, #12]
 8014fb6:	b29c      	uxth	r4, r3
 8014fb8:	2001      	movs	r0, #1
 8014fba:	f7f8 fa4d 	bl	800d458 <lwip_htons>
 8014fbe:	4603      	mov	r3, r0
 8014fc0:	461a      	mov	r2, r3
 8014fc2:	4b0c      	ldr	r3, [pc, #48]	; (8014ff4 <tcp_receive+0x888>)
 8014fc4:	68db      	ldr	r3, [r3, #12]
 8014fc6:	4322      	orrs	r2, r4
 8014fc8:	b292      	uxth	r2, r2
 8014fca:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8014fcc:	4b09      	ldr	r3, [pc, #36]	; (8014ff4 <tcp_receive+0x888>)
 8014fce:	891c      	ldrh	r4, [r3, #8]
 8014fd0:	4b08      	ldr	r3, [pc, #32]	; (8014ff4 <tcp_receive+0x888>)
 8014fd2:	68db      	ldr	r3, [r3, #12]
 8014fd4:	899b      	ldrh	r3, [r3, #12]
 8014fd6:	b29b      	uxth	r3, r3
 8014fd8:	4618      	mov	r0, r3
 8014fda:	f7f8 fa3d 	bl	800d458 <lwip_htons>
 8014fde:	4603      	mov	r3, r0
 8014fe0:	b2db      	uxtb	r3, r3
 8014fe2:	f003 0303 	and.w	r3, r3, #3
 8014fe6:	2b00      	cmp	r3, #0
 8014fe8:	d00e      	beq.n	8015008 <tcp_receive+0x89c>
 8014fea:	2301      	movs	r3, #1
 8014fec:	e00d      	b.n	801500a <tcp_receive+0x89e>
 8014fee:	bf00      	nop
 8014ff0:	24004938 	.word	0x24004938
 8014ff4:	24004918 	.word	0x24004918
 8014ff8:	24004942 	.word	0x24004942
 8014ffc:	0801ed74 	.word	0x0801ed74
 8015000:	0801f138 	.word	0x0801f138
 8015004:	0801eddc 	.word	0x0801eddc
 8015008:	2300      	movs	r3, #0
 801500a:	4423      	add	r3, r4
 801500c:	b29a      	uxth	r2, r3
 801500e:	4b98      	ldr	r3, [pc, #608]	; (8015270 <tcp_receive+0xb04>)
 8015010:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8015012:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015014:	613b      	str	r3, [r7, #16]
              next = next->next;
 8015016:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015018:	681b      	ldr	r3, [r3, #0]
 801501a:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 801501c:	6938      	ldr	r0, [r7, #16]
 801501e:	f7fd fd3b 	bl	8012a98 <tcp_seg_free>
            while (next &&
 8015022:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015024:	2b00      	cmp	r3, #0
 8015026:	d00e      	beq.n	8015046 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8015028:	4b91      	ldr	r3, [pc, #580]	; (8015270 <tcp_receive+0xb04>)
 801502a:	881b      	ldrh	r3, [r3, #0]
 801502c:	461a      	mov	r2, r3
 801502e:	4b91      	ldr	r3, [pc, #580]	; (8015274 <tcp_receive+0xb08>)
 8015030:	681b      	ldr	r3, [r3, #0]
 8015032:	441a      	add	r2, r3
 8015034:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015036:	68db      	ldr	r3, [r3, #12]
 8015038:	685b      	ldr	r3, [r3, #4]
 801503a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801503c:	8909      	ldrh	r1, [r1, #8]
 801503e:	440b      	add	r3, r1
 8015040:	1ad3      	subs	r3, r2, r3
            while (next &&
 8015042:	2b00      	cmp	r3, #0
 8015044:	da9a      	bge.n	8014f7c <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8015046:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015048:	2b00      	cmp	r3, #0
 801504a:	d059      	beq.n	8015100 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 801504c:	4b88      	ldr	r3, [pc, #544]	; (8015270 <tcp_receive+0xb04>)
 801504e:	881b      	ldrh	r3, [r3, #0]
 8015050:	461a      	mov	r2, r3
 8015052:	4b88      	ldr	r3, [pc, #544]	; (8015274 <tcp_receive+0xb08>)
 8015054:	681b      	ldr	r3, [r3, #0]
 8015056:	441a      	add	r2, r3
 8015058:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801505a:	68db      	ldr	r3, [r3, #12]
 801505c:	685b      	ldr	r3, [r3, #4]
 801505e:	1ad3      	subs	r3, r2, r3
            if (next &&
 8015060:	2b00      	cmp	r3, #0
 8015062:	dd4d      	ble.n	8015100 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8015064:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015066:	68db      	ldr	r3, [r3, #12]
 8015068:	685b      	ldr	r3, [r3, #4]
 801506a:	b29a      	uxth	r2, r3
 801506c:	4b81      	ldr	r3, [pc, #516]	; (8015274 <tcp_receive+0xb08>)
 801506e:	681b      	ldr	r3, [r3, #0]
 8015070:	b29b      	uxth	r3, r3
 8015072:	1ad3      	subs	r3, r2, r3
 8015074:	b29a      	uxth	r2, r3
 8015076:	4b80      	ldr	r3, [pc, #512]	; (8015278 <tcp_receive+0xb0c>)
 8015078:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801507a:	4b7f      	ldr	r3, [pc, #508]	; (8015278 <tcp_receive+0xb0c>)
 801507c:	68db      	ldr	r3, [r3, #12]
 801507e:	899b      	ldrh	r3, [r3, #12]
 8015080:	b29b      	uxth	r3, r3
 8015082:	4618      	mov	r0, r3
 8015084:	f7f8 f9e8 	bl	800d458 <lwip_htons>
 8015088:	4603      	mov	r3, r0
 801508a:	b2db      	uxtb	r3, r3
 801508c:	f003 0302 	and.w	r3, r3, #2
 8015090:	2b00      	cmp	r3, #0
 8015092:	d005      	beq.n	80150a0 <tcp_receive+0x934>
                inseg.len -= 1;
 8015094:	4b78      	ldr	r3, [pc, #480]	; (8015278 <tcp_receive+0xb0c>)
 8015096:	891b      	ldrh	r3, [r3, #8]
 8015098:	3b01      	subs	r3, #1
 801509a:	b29a      	uxth	r2, r3
 801509c:	4b76      	ldr	r3, [pc, #472]	; (8015278 <tcp_receive+0xb0c>)
 801509e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80150a0:	4b75      	ldr	r3, [pc, #468]	; (8015278 <tcp_receive+0xb0c>)
 80150a2:	685a      	ldr	r2, [r3, #4]
 80150a4:	4b74      	ldr	r3, [pc, #464]	; (8015278 <tcp_receive+0xb0c>)
 80150a6:	891b      	ldrh	r3, [r3, #8]
 80150a8:	4619      	mov	r1, r3
 80150aa:	4610      	mov	r0, r2
 80150ac:	f7fb ffe4 	bl	8011078 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80150b0:	4b71      	ldr	r3, [pc, #452]	; (8015278 <tcp_receive+0xb0c>)
 80150b2:	891c      	ldrh	r4, [r3, #8]
 80150b4:	4b70      	ldr	r3, [pc, #448]	; (8015278 <tcp_receive+0xb0c>)
 80150b6:	68db      	ldr	r3, [r3, #12]
 80150b8:	899b      	ldrh	r3, [r3, #12]
 80150ba:	b29b      	uxth	r3, r3
 80150bc:	4618      	mov	r0, r3
 80150be:	f7f8 f9cb 	bl	800d458 <lwip_htons>
 80150c2:	4603      	mov	r3, r0
 80150c4:	b2db      	uxtb	r3, r3
 80150c6:	f003 0303 	and.w	r3, r3, #3
 80150ca:	2b00      	cmp	r3, #0
 80150cc:	d001      	beq.n	80150d2 <tcp_receive+0x966>
 80150ce:	2301      	movs	r3, #1
 80150d0:	e000      	b.n	80150d4 <tcp_receive+0x968>
 80150d2:	2300      	movs	r3, #0
 80150d4:	4423      	add	r3, r4
 80150d6:	b29a      	uxth	r2, r3
 80150d8:	4b65      	ldr	r3, [pc, #404]	; (8015270 <tcp_receive+0xb04>)
 80150da:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80150dc:	4b64      	ldr	r3, [pc, #400]	; (8015270 <tcp_receive+0xb04>)
 80150de:	881b      	ldrh	r3, [r3, #0]
 80150e0:	461a      	mov	r2, r3
 80150e2:	4b64      	ldr	r3, [pc, #400]	; (8015274 <tcp_receive+0xb08>)
 80150e4:	681b      	ldr	r3, [r3, #0]
 80150e6:	441a      	add	r2, r3
 80150e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80150ea:	68db      	ldr	r3, [r3, #12]
 80150ec:	685b      	ldr	r3, [r3, #4]
 80150ee:	429a      	cmp	r2, r3
 80150f0:	d006      	beq.n	8015100 <tcp_receive+0x994>
 80150f2:	4b62      	ldr	r3, [pc, #392]	; (801527c <tcp_receive+0xb10>)
 80150f4:	f240 52fd 	movw	r2, #1533	; 0x5fd
 80150f8:	4961      	ldr	r1, [pc, #388]	; (8015280 <tcp_receive+0xb14>)
 80150fa:	4862      	ldr	r0, [pc, #392]	; (8015284 <tcp_receive+0xb18>)
 80150fc:	f006 f800 	bl	801b100 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8015100:	687b      	ldr	r3, [r7, #4]
 8015102:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015104:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8015106:	4b5a      	ldr	r3, [pc, #360]	; (8015270 <tcp_receive+0xb04>)
 8015108:	881b      	ldrh	r3, [r3, #0]
 801510a:	461a      	mov	r2, r3
 801510c:	4b59      	ldr	r3, [pc, #356]	; (8015274 <tcp_receive+0xb08>)
 801510e:	681b      	ldr	r3, [r3, #0]
 8015110:	441a      	add	r2, r3
 8015112:	687b      	ldr	r3, [r7, #4]
 8015114:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8015116:	687b      	ldr	r3, [r7, #4]
 8015118:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801511a:	4b55      	ldr	r3, [pc, #340]	; (8015270 <tcp_receive+0xb04>)
 801511c:	881b      	ldrh	r3, [r3, #0]
 801511e:	429a      	cmp	r2, r3
 8015120:	d206      	bcs.n	8015130 <tcp_receive+0x9c4>
 8015122:	4b56      	ldr	r3, [pc, #344]	; (801527c <tcp_receive+0xb10>)
 8015124:	f240 6207 	movw	r2, #1543	; 0x607
 8015128:	4957      	ldr	r1, [pc, #348]	; (8015288 <tcp_receive+0xb1c>)
 801512a:	4856      	ldr	r0, [pc, #344]	; (8015284 <tcp_receive+0xb18>)
 801512c:	f005 ffe8 	bl	801b100 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8015130:	687b      	ldr	r3, [r7, #4]
 8015132:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8015134:	4b4e      	ldr	r3, [pc, #312]	; (8015270 <tcp_receive+0xb04>)
 8015136:	881b      	ldrh	r3, [r3, #0]
 8015138:	1ad3      	subs	r3, r2, r3
 801513a:	b29a      	uxth	r2, r3
 801513c:	687b      	ldr	r3, [r7, #4]
 801513e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8015140:	6878      	ldr	r0, [r7, #4]
 8015142:	f7fc ffcd 	bl	80120e0 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8015146:	4b4c      	ldr	r3, [pc, #304]	; (8015278 <tcp_receive+0xb0c>)
 8015148:	685b      	ldr	r3, [r3, #4]
 801514a:	891b      	ldrh	r3, [r3, #8]
 801514c:	2b00      	cmp	r3, #0
 801514e:	d006      	beq.n	801515e <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8015150:	4b49      	ldr	r3, [pc, #292]	; (8015278 <tcp_receive+0xb0c>)
 8015152:	685b      	ldr	r3, [r3, #4]
 8015154:	4a4d      	ldr	r2, [pc, #308]	; (801528c <tcp_receive+0xb20>)
 8015156:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8015158:	4b47      	ldr	r3, [pc, #284]	; (8015278 <tcp_receive+0xb0c>)
 801515a:	2200      	movs	r2, #0
 801515c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801515e:	4b46      	ldr	r3, [pc, #280]	; (8015278 <tcp_receive+0xb0c>)
 8015160:	68db      	ldr	r3, [r3, #12]
 8015162:	899b      	ldrh	r3, [r3, #12]
 8015164:	b29b      	uxth	r3, r3
 8015166:	4618      	mov	r0, r3
 8015168:	f7f8 f976 	bl	800d458 <lwip_htons>
 801516c:	4603      	mov	r3, r0
 801516e:	b2db      	uxtb	r3, r3
 8015170:	f003 0301 	and.w	r3, r3, #1
 8015174:	2b00      	cmp	r3, #0
 8015176:	f000 80b8 	beq.w	80152ea <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801517a:	4b45      	ldr	r3, [pc, #276]	; (8015290 <tcp_receive+0xb24>)
 801517c:	781b      	ldrb	r3, [r3, #0]
 801517e:	f043 0320 	orr.w	r3, r3, #32
 8015182:	b2da      	uxtb	r2, r3
 8015184:	4b42      	ldr	r3, [pc, #264]	; (8015290 <tcp_receive+0xb24>)
 8015186:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8015188:	e0af      	b.n	80152ea <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801518a:	687b      	ldr	r3, [r7, #4]
 801518c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801518e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8015190:	687b      	ldr	r3, [r7, #4]
 8015192:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015194:	68db      	ldr	r3, [r3, #12]
 8015196:	685b      	ldr	r3, [r3, #4]
 8015198:	4a36      	ldr	r2, [pc, #216]	; (8015274 <tcp_receive+0xb08>)
 801519a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801519c:	68bb      	ldr	r3, [r7, #8]
 801519e:	891b      	ldrh	r3, [r3, #8]
 80151a0:	461c      	mov	r4, r3
 80151a2:	68bb      	ldr	r3, [r7, #8]
 80151a4:	68db      	ldr	r3, [r3, #12]
 80151a6:	899b      	ldrh	r3, [r3, #12]
 80151a8:	b29b      	uxth	r3, r3
 80151aa:	4618      	mov	r0, r3
 80151ac:	f7f8 f954 	bl	800d458 <lwip_htons>
 80151b0:	4603      	mov	r3, r0
 80151b2:	b2db      	uxtb	r3, r3
 80151b4:	f003 0303 	and.w	r3, r3, #3
 80151b8:	2b00      	cmp	r3, #0
 80151ba:	d001      	beq.n	80151c0 <tcp_receive+0xa54>
 80151bc:	2301      	movs	r3, #1
 80151be:	e000      	b.n	80151c2 <tcp_receive+0xa56>
 80151c0:	2300      	movs	r3, #0
 80151c2:	191a      	adds	r2, r3, r4
 80151c4:	687b      	ldr	r3, [r7, #4]
 80151c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80151c8:	441a      	add	r2, r3
 80151ca:	687b      	ldr	r3, [r7, #4]
 80151cc:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80151ce:	687b      	ldr	r3, [r7, #4]
 80151d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80151d2:	461c      	mov	r4, r3
 80151d4:	68bb      	ldr	r3, [r7, #8]
 80151d6:	891b      	ldrh	r3, [r3, #8]
 80151d8:	461d      	mov	r5, r3
 80151da:	68bb      	ldr	r3, [r7, #8]
 80151dc:	68db      	ldr	r3, [r3, #12]
 80151de:	899b      	ldrh	r3, [r3, #12]
 80151e0:	b29b      	uxth	r3, r3
 80151e2:	4618      	mov	r0, r3
 80151e4:	f7f8 f938 	bl	800d458 <lwip_htons>
 80151e8:	4603      	mov	r3, r0
 80151ea:	b2db      	uxtb	r3, r3
 80151ec:	f003 0303 	and.w	r3, r3, #3
 80151f0:	2b00      	cmp	r3, #0
 80151f2:	d001      	beq.n	80151f8 <tcp_receive+0xa8c>
 80151f4:	2301      	movs	r3, #1
 80151f6:	e000      	b.n	80151fa <tcp_receive+0xa8e>
 80151f8:	2300      	movs	r3, #0
 80151fa:	442b      	add	r3, r5
 80151fc:	429c      	cmp	r4, r3
 80151fe:	d206      	bcs.n	801520e <tcp_receive+0xaa2>
 8015200:	4b1e      	ldr	r3, [pc, #120]	; (801527c <tcp_receive+0xb10>)
 8015202:	f240 622c 	movw	r2, #1580	; 0x62c
 8015206:	4923      	ldr	r1, [pc, #140]	; (8015294 <tcp_receive+0xb28>)
 8015208:	481e      	ldr	r0, [pc, #120]	; (8015284 <tcp_receive+0xb18>)
 801520a:	f005 ff79 	bl	801b100 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801520e:	68bb      	ldr	r3, [r7, #8]
 8015210:	891b      	ldrh	r3, [r3, #8]
 8015212:	461c      	mov	r4, r3
 8015214:	68bb      	ldr	r3, [r7, #8]
 8015216:	68db      	ldr	r3, [r3, #12]
 8015218:	899b      	ldrh	r3, [r3, #12]
 801521a:	b29b      	uxth	r3, r3
 801521c:	4618      	mov	r0, r3
 801521e:	f7f8 f91b 	bl	800d458 <lwip_htons>
 8015222:	4603      	mov	r3, r0
 8015224:	b2db      	uxtb	r3, r3
 8015226:	f003 0303 	and.w	r3, r3, #3
 801522a:	2b00      	cmp	r3, #0
 801522c:	d001      	beq.n	8015232 <tcp_receive+0xac6>
 801522e:	2301      	movs	r3, #1
 8015230:	e000      	b.n	8015234 <tcp_receive+0xac8>
 8015232:	2300      	movs	r3, #0
 8015234:	1919      	adds	r1, r3, r4
 8015236:	687b      	ldr	r3, [r7, #4]
 8015238:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801523a:	b28b      	uxth	r3, r1
 801523c:	1ad3      	subs	r3, r2, r3
 801523e:	b29a      	uxth	r2, r3
 8015240:	687b      	ldr	r3, [r7, #4]
 8015242:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8015244:	6878      	ldr	r0, [r7, #4]
 8015246:	f7fc ff4b 	bl	80120e0 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801524a:	68bb      	ldr	r3, [r7, #8]
 801524c:	685b      	ldr	r3, [r3, #4]
 801524e:	891b      	ldrh	r3, [r3, #8]
 8015250:	2b00      	cmp	r3, #0
 8015252:	d028      	beq.n	80152a6 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8015254:	4b0d      	ldr	r3, [pc, #52]	; (801528c <tcp_receive+0xb20>)
 8015256:	681b      	ldr	r3, [r3, #0]
 8015258:	2b00      	cmp	r3, #0
 801525a:	d01d      	beq.n	8015298 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 801525c:	4b0b      	ldr	r3, [pc, #44]	; (801528c <tcp_receive+0xb20>)
 801525e:	681a      	ldr	r2, [r3, #0]
 8015260:	68bb      	ldr	r3, [r7, #8]
 8015262:	685b      	ldr	r3, [r3, #4]
 8015264:	4619      	mov	r1, r3
 8015266:	4610      	mov	r0, r2
 8015268:	f7fc f95a 	bl	8011520 <pbuf_cat>
 801526c:	e018      	b.n	80152a0 <tcp_receive+0xb34>
 801526e:	bf00      	nop
 8015270:	24004942 	.word	0x24004942
 8015274:	24004938 	.word	0x24004938
 8015278:	24004918 	.word	0x24004918
 801527c:	0801ed74 	.word	0x0801ed74
 8015280:	0801f170 	.word	0x0801f170
 8015284:	0801eddc 	.word	0x0801eddc
 8015288:	0801f1ac 	.word	0x0801f1ac
 801528c:	24004948 	.word	0x24004948
 8015290:	24004945 	.word	0x24004945
 8015294:	0801f1cc 	.word	0x0801f1cc
            } else {
              recv_data = cseg->p;
 8015298:	68bb      	ldr	r3, [r7, #8]
 801529a:	685b      	ldr	r3, [r3, #4]
 801529c:	4a70      	ldr	r2, [pc, #448]	; (8015460 <tcp_receive+0xcf4>)
 801529e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80152a0:	68bb      	ldr	r3, [r7, #8]
 80152a2:	2200      	movs	r2, #0
 80152a4:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80152a6:	68bb      	ldr	r3, [r7, #8]
 80152a8:	68db      	ldr	r3, [r3, #12]
 80152aa:	899b      	ldrh	r3, [r3, #12]
 80152ac:	b29b      	uxth	r3, r3
 80152ae:	4618      	mov	r0, r3
 80152b0:	f7f8 f8d2 	bl	800d458 <lwip_htons>
 80152b4:	4603      	mov	r3, r0
 80152b6:	b2db      	uxtb	r3, r3
 80152b8:	f003 0301 	and.w	r3, r3, #1
 80152bc:	2b00      	cmp	r3, #0
 80152be:	d00d      	beq.n	80152dc <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80152c0:	4b68      	ldr	r3, [pc, #416]	; (8015464 <tcp_receive+0xcf8>)
 80152c2:	781b      	ldrb	r3, [r3, #0]
 80152c4:	f043 0320 	orr.w	r3, r3, #32
 80152c8:	b2da      	uxtb	r2, r3
 80152ca:	4b66      	ldr	r3, [pc, #408]	; (8015464 <tcp_receive+0xcf8>)
 80152cc:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80152ce:	687b      	ldr	r3, [r7, #4]
 80152d0:	7d1b      	ldrb	r3, [r3, #20]
 80152d2:	2b04      	cmp	r3, #4
 80152d4:	d102      	bne.n	80152dc <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 80152d6:	687b      	ldr	r3, [r7, #4]
 80152d8:	2207      	movs	r2, #7
 80152da:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80152dc:	68bb      	ldr	r3, [r7, #8]
 80152de:	681a      	ldr	r2, [r3, #0]
 80152e0:	687b      	ldr	r3, [r7, #4]
 80152e2:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 80152e4:	68b8      	ldr	r0, [r7, #8]
 80152e6:	f7fd fbd7 	bl	8012a98 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80152ea:	687b      	ldr	r3, [r7, #4]
 80152ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80152ee:	2b00      	cmp	r3, #0
 80152f0:	d008      	beq.n	8015304 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80152f2:	687b      	ldr	r3, [r7, #4]
 80152f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80152f6:	68db      	ldr	r3, [r3, #12]
 80152f8:	685a      	ldr	r2, [r3, #4]
 80152fa:	687b      	ldr	r3, [r7, #4]
 80152fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80152fe:	429a      	cmp	r2, r3
 8015300:	f43f af43 	beq.w	801518a <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8015304:	687b      	ldr	r3, [r7, #4]
 8015306:	8b5b      	ldrh	r3, [r3, #26]
 8015308:	f003 0301 	and.w	r3, r3, #1
 801530c:	2b00      	cmp	r3, #0
 801530e:	d00e      	beq.n	801532e <tcp_receive+0xbc2>
 8015310:	687b      	ldr	r3, [r7, #4]
 8015312:	8b5b      	ldrh	r3, [r3, #26]
 8015314:	f023 0301 	bic.w	r3, r3, #1
 8015318:	b29a      	uxth	r2, r3
 801531a:	687b      	ldr	r3, [r7, #4]
 801531c:	835a      	strh	r2, [r3, #26]
 801531e:	687b      	ldr	r3, [r7, #4]
 8015320:	8b5b      	ldrh	r3, [r3, #26]
 8015322:	f043 0302 	orr.w	r3, r3, #2
 8015326:	b29a      	uxth	r2, r3
 8015328:	687b      	ldr	r3, [r7, #4]
 801532a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801532c:	e188      	b.n	8015640 <tcp_receive+0xed4>
        tcp_ack(pcb);
 801532e:	687b      	ldr	r3, [r7, #4]
 8015330:	8b5b      	ldrh	r3, [r3, #26]
 8015332:	f043 0301 	orr.w	r3, r3, #1
 8015336:	b29a      	uxth	r2, r3
 8015338:	687b      	ldr	r3, [r7, #4]
 801533a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801533c:	e180      	b.n	8015640 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801533e:	687b      	ldr	r3, [r7, #4]
 8015340:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015342:	2b00      	cmp	r3, #0
 8015344:	d106      	bne.n	8015354 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8015346:	4848      	ldr	r0, [pc, #288]	; (8015468 <tcp_receive+0xcfc>)
 8015348:	f7fd fbbe 	bl	8012ac8 <tcp_seg_copy>
 801534c:	4602      	mov	r2, r0
 801534e:	687b      	ldr	r3, [r7, #4]
 8015350:	675a      	str	r2, [r3, #116]	; 0x74
 8015352:	e16d      	b.n	8015630 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8015354:	2300      	movs	r3, #0
 8015356:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8015358:	687b      	ldr	r3, [r7, #4]
 801535a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801535c:	63bb      	str	r3, [r7, #56]	; 0x38
 801535e:	e157      	b.n	8015610 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8015360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015362:	68db      	ldr	r3, [r3, #12]
 8015364:	685a      	ldr	r2, [r3, #4]
 8015366:	4b41      	ldr	r3, [pc, #260]	; (801546c <tcp_receive+0xd00>)
 8015368:	681b      	ldr	r3, [r3, #0]
 801536a:	429a      	cmp	r2, r3
 801536c:	d11d      	bne.n	80153aa <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801536e:	4b3e      	ldr	r3, [pc, #248]	; (8015468 <tcp_receive+0xcfc>)
 8015370:	891a      	ldrh	r2, [r3, #8]
 8015372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015374:	891b      	ldrh	r3, [r3, #8]
 8015376:	429a      	cmp	r2, r3
 8015378:	f240 814f 	bls.w	801561a <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801537c:	483a      	ldr	r0, [pc, #232]	; (8015468 <tcp_receive+0xcfc>)
 801537e:	f7fd fba3 	bl	8012ac8 <tcp_seg_copy>
 8015382:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8015384:	697b      	ldr	r3, [r7, #20]
 8015386:	2b00      	cmp	r3, #0
 8015388:	f000 8149 	beq.w	801561e <tcp_receive+0xeb2>
                  if (prev != NULL) {
 801538c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801538e:	2b00      	cmp	r3, #0
 8015390:	d003      	beq.n	801539a <tcp_receive+0xc2e>
                    prev->next = cseg;
 8015392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015394:	697a      	ldr	r2, [r7, #20]
 8015396:	601a      	str	r2, [r3, #0]
 8015398:	e002      	b.n	80153a0 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 801539a:	687b      	ldr	r3, [r7, #4]
 801539c:	697a      	ldr	r2, [r7, #20]
 801539e:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80153a0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80153a2:	6978      	ldr	r0, [r7, #20]
 80153a4:	f7ff f8de 	bl	8014564 <tcp_oos_insert_segment>
                }
                break;
 80153a8:	e139      	b.n	801561e <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80153aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80153ac:	2b00      	cmp	r3, #0
 80153ae:	d117      	bne.n	80153e0 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80153b0:	4b2e      	ldr	r3, [pc, #184]	; (801546c <tcp_receive+0xd00>)
 80153b2:	681a      	ldr	r2, [r3, #0]
 80153b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80153b6:	68db      	ldr	r3, [r3, #12]
 80153b8:	685b      	ldr	r3, [r3, #4]
 80153ba:	1ad3      	subs	r3, r2, r3
 80153bc:	2b00      	cmp	r3, #0
 80153be:	da57      	bge.n	8015470 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80153c0:	4829      	ldr	r0, [pc, #164]	; (8015468 <tcp_receive+0xcfc>)
 80153c2:	f7fd fb81 	bl	8012ac8 <tcp_seg_copy>
 80153c6:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80153c8:	69bb      	ldr	r3, [r7, #24]
 80153ca:	2b00      	cmp	r3, #0
 80153cc:	f000 8129 	beq.w	8015622 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 80153d0:	687b      	ldr	r3, [r7, #4]
 80153d2:	69ba      	ldr	r2, [r7, #24]
 80153d4:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 80153d6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80153d8:	69b8      	ldr	r0, [r7, #24]
 80153da:	f7ff f8c3 	bl	8014564 <tcp_oos_insert_segment>
                  }
                  break;
 80153de:	e120      	b.n	8015622 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80153e0:	4b22      	ldr	r3, [pc, #136]	; (801546c <tcp_receive+0xd00>)
 80153e2:	681a      	ldr	r2, [r3, #0]
 80153e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80153e6:	68db      	ldr	r3, [r3, #12]
 80153e8:	685b      	ldr	r3, [r3, #4]
 80153ea:	1ad3      	subs	r3, r2, r3
 80153ec:	3b01      	subs	r3, #1
 80153ee:	2b00      	cmp	r3, #0
 80153f0:	db3e      	blt.n	8015470 <tcp_receive+0xd04>
 80153f2:	4b1e      	ldr	r3, [pc, #120]	; (801546c <tcp_receive+0xd00>)
 80153f4:	681a      	ldr	r2, [r3, #0]
 80153f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80153f8:	68db      	ldr	r3, [r3, #12]
 80153fa:	685b      	ldr	r3, [r3, #4]
 80153fc:	1ad3      	subs	r3, r2, r3
 80153fe:	3301      	adds	r3, #1
 8015400:	2b00      	cmp	r3, #0
 8015402:	dc35      	bgt.n	8015470 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8015404:	4818      	ldr	r0, [pc, #96]	; (8015468 <tcp_receive+0xcfc>)
 8015406:	f7fd fb5f 	bl	8012ac8 <tcp_seg_copy>
 801540a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 801540c:	69fb      	ldr	r3, [r7, #28]
 801540e:	2b00      	cmp	r3, #0
 8015410:	f000 8109 	beq.w	8015626 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8015414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015416:	68db      	ldr	r3, [r3, #12]
 8015418:	685b      	ldr	r3, [r3, #4]
 801541a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801541c:	8912      	ldrh	r2, [r2, #8]
 801541e:	441a      	add	r2, r3
 8015420:	4b12      	ldr	r3, [pc, #72]	; (801546c <tcp_receive+0xd00>)
 8015422:	681b      	ldr	r3, [r3, #0]
 8015424:	1ad3      	subs	r3, r2, r3
 8015426:	2b00      	cmp	r3, #0
 8015428:	dd12      	ble.n	8015450 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801542a:	4b10      	ldr	r3, [pc, #64]	; (801546c <tcp_receive+0xd00>)
 801542c:	681b      	ldr	r3, [r3, #0]
 801542e:	b29a      	uxth	r2, r3
 8015430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015432:	68db      	ldr	r3, [r3, #12]
 8015434:	685b      	ldr	r3, [r3, #4]
 8015436:	b29b      	uxth	r3, r3
 8015438:	1ad3      	subs	r3, r2, r3
 801543a:	b29a      	uxth	r2, r3
 801543c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801543e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8015440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015442:	685a      	ldr	r2, [r3, #4]
 8015444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015446:	891b      	ldrh	r3, [r3, #8]
 8015448:	4619      	mov	r1, r3
 801544a:	4610      	mov	r0, r2
 801544c:	f7fb fe14 	bl	8011078 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8015450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015452:	69fa      	ldr	r2, [r7, #28]
 8015454:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8015456:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8015458:	69f8      	ldr	r0, [r7, #28]
 801545a:	f7ff f883 	bl	8014564 <tcp_oos_insert_segment>
                  }
                  break;
 801545e:	e0e2      	b.n	8015626 <tcp_receive+0xeba>
 8015460:	24004948 	.word	0x24004948
 8015464:	24004945 	.word	0x24004945
 8015468:	24004918 	.word	0x24004918
 801546c:	24004938 	.word	0x24004938
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8015470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015472:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8015474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015476:	681b      	ldr	r3, [r3, #0]
 8015478:	2b00      	cmp	r3, #0
 801547a:	f040 80c6 	bne.w	801560a <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801547e:	4b80      	ldr	r3, [pc, #512]	; (8015680 <tcp_receive+0xf14>)
 8015480:	681a      	ldr	r2, [r3, #0]
 8015482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015484:	68db      	ldr	r3, [r3, #12]
 8015486:	685b      	ldr	r3, [r3, #4]
 8015488:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801548a:	2b00      	cmp	r3, #0
 801548c:	f340 80bd 	ble.w	801560a <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8015490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015492:	68db      	ldr	r3, [r3, #12]
 8015494:	899b      	ldrh	r3, [r3, #12]
 8015496:	b29b      	uxth	r3, r3
 8015498:	4618      	mov	r0, r3
 801549a:	f7f7 ffdd 	bl	800d458 <lwip_htons>
 801549e:	4603      	mov	r3, r0
 80154a0:	b2db      	uxtb	r3, r3
 80154a2:	f003 0301 	and.w	r3, r3, #1
 80154a6:	2b00      	cmp	r3, #0
 80154a8:	f040 80bf 	bne.w	801562a <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80154ac:	4875      	ldr	r0, [pc, #468]	; (8015684 <tcp_receive+0xf18>)
 80154ae:	f7fd fb0b 	bl	8012ac8 <tcp_seg_copy>
 80154b2:	4602      	mov	r2, r0
 80154b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80154b6:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80154b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80154ba:	681b      	ldr	r3, [r3, #0]
 80154bc:	2b00      	cmp	r3, #0
 80154be:	f000 80b6 	beq.w	801562e <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80154c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80154c4:	68db      	ldr	r3, [r3, #12]
 80154c6:	685b      	ldr	r3, [r3, #4]
 80154c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80154ca:	8912      	ldrh	r2, [r2, #8]
 80154cc:	441a      	add	r2, r3
 80154ce:	4b6c      	ldr	r3, [pc, #432]	; (8015680 <tcp_receive+0xf14>)
 80154d0:	681b      	ldr	r3, [r3, #0]
 80154d2:	1ad3      	subs	r3, r2, r3
 80154d4:	2b00      	cmp	r3, #0
 80154d6:	dd12      	ble.n	80154fe <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80154d8:	4b69      	ldr	r3, [pc, #420]	; (8015680 <tcp_receive+0xf14>)
 80154da:	681b      	ldr	r3, [r3, #0]
 80154dc:	b29a      	uxth	r2, r3
 80154de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80154e0:	68db      	ldr	r3, [r3, #12]
 80154e2:	685b      	ldr	r3, [r3, #4]
 80154e4:	b29b      	uxth	r3, r3
 80154e6:	1ad3      	subs	r3, r2, r3
 80154e8:	b29a      	uxth	r2, r3
 80154ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80154ec:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80154ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80154f0:	685a      	ldr	r2, [r3, #4]
 80154f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80154f4:	891b      	ldrh	r3, [r3, #8]
 80154f6:	4619      	mov	r1, r3
 80154f8:	4610      	mov	r0, r2
 80154fa:	f7fb fdbd 	bl	8011078 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80154fe:	4b62      	ldr	r3, [pc, #392]	; (8015688 <tcp_receive+0xf1c>)
 8015500:	881b      	ldrh	r3, [r3, #0]
 8015502:	461a      	mov	r2, r3
 8015504:	4b5e      	ldr	r3, [pc, #376]	; (8015680 <tcp_receive+0xf14>)
 8015506:	681b      	ldr	r3, [r3, #0]
 8015508:	441a      	add	r2, r3
 801550a:	687b      	ldr	r3, [r7, #4]
 801550c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801550e:	6879      	ldr	r1, [r7, #4]
 8015510:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015512:	440b      	add	r3, r1
 8015514:	1ad3      	subs	r3, r2, r3
 8015516:	2b00      	cmp	r3, #0
 8015518:	f340 8089 	ble.w	801562e <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801551c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801551e:	681b      	ldr	r3, [r3, #0]
 8015520:	68db      	ldr	r3, [r3, #12]
 8015522:	899b      	ldrh	r3, [r3, #12]
 8015524:	b29b      	uxth	r3, r3
 8015526:	4618      	mov	r0, r3
 8015528:	f7f7 ff96 	bl	800d458 <lwip_htons>
 801552c:	4603      	mov	r3, r0
 801552e:	b2db      	uxtb	r3, r3
 8015530:	f003 0301 	and.w	r3, r3, #1
 8015534:	2b00      	cmp	r3, #0
 8015536:	d022      	beq.n	801557e <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8015538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801553a:	681b      	ldr	r3, [r3, #0]
 801553c:	68db      	ldr	r3, [r3, #12]
 801553e:	899b      	ldrh	r3, [r3, #12]
 8015540:	b29b      	uxth	r3, r3
 8015542:	b21b      	sxth	r3, r3
 8015544:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8015548:	b21c      	sxth	r4, r3
 801554a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801554c:	681b      	ldr	r3, [r3, #0]
 801554e:	68db      	ldr	r3, [r3, #12]
 8015550:	899b      	ldrh	r3, [r3, #12]
 8015552:	b29b      	uxth	r3, r3
 8015554:	4618      	mov	r0, r3
 8015556:	f7f7 ff7f 	bl	800d458 <lwip_htons>
 801555a:	4603      	mov	r3, r0
 801555c:	b2db      	uxtb	r3, r3
 801555e:	b29b      	uxth	r3, r3
 8015560:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8015564:	b29b      	uxth	r3, r3
 8015566:	4618      	mov	r0, r3
 8015568:	f7f7 ff76 	bl	800d458 <lwip_htons>
 801556c:	4603      	mov	r3, r0
 801556e:	b21b      	sxth	r3, r3
 8015570:	4323      	orrs	r3, r4
 8015572:	b21a      	sxth	r2, r3
 8015574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015576:	681b      	ldr	r3, [r3, #0]
 8015578:	68db      	ldr	r3, [r3, #12]
 801557a:	b292      	uxth	r2, r2
 801557c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801557e:	687b      	ldr	r3, [r7, #4]
 8015580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015582:	b29a      	uxth	r2, r3
 8015584:	687b      	ldr	r3, [r7, #4]
 8015586:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015588:	4413      	add	r3, r2
 801558a:	b299      	uxth	r1, r3
 801558c:	4b3c      	ldr	r3, [pc, #240]	; (8015680 <tcp_receive+0xf14>)
 801558e:	681b      	ldr	r3, [r3, #0]
 8015590:	b29a      	uxth	r2, r3
 8015592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015594:	681b      	ldr	r3, [r3, #0]
 8015596:	1a8a      	subs	r2, r1, r2
 8015598:	b292      	uxth	r2, r2
 801559a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801559c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801559e:	681b      	ldr	r3, [r3, #0]
 80155a0:	685a      	ldr	r2, [r3, #4]
 80155a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80155a4:	681b      	ldr	r3, [r3, #0]
 80155a6:	891b      	ldrh	r3, [r3, #8]
 80155a8:	4619      	mov	r1, r3
 80155aa:	4610      	mov	r0, r2
 80155ac:	f7fb fd64 	bl	8011078 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80155b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80155b2:	681b      	ldr	r3, [r3, #0]
 80155b4:	891c      	ldrh	r4, [r3, #8]
 80155b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80155b8:	681b      	ldr	r3, [r3, #0]
 80155ba:	68db      	ldr	r3, [r3, #12]
 80155bc:	899b      	ldrh	r3, [r3, #12]
 80155be:	b29b      	uxth	r3, r3
 80155c0:	4618      	mov	r0, r3
 80155c2:	f7f7 ff49 	bl	800d458 <lwip_htons>
 80155c6:	4603      	mov	r3, r0
 80155c8:	b2db      	uxtb	r3, r3
 80155ca:	f003 0303 	and.w	r3, r3, #3
 80155ce:	2b00      	cmp	r3, #0
 80155d0:	d001      	beq.n	80155d6 <tcp_receive+0xe6a>
 80155d2:	2301      	movs	r3, #1
 80155d4:	e000      	b.n	80155d8 <tcp_receive+0xe6c>
 80155d6:	2300      	movs	r3, #0
 80155d8:	4423      	add	r3, r4
 80155da:	b29a      	uxth	r2, r3
 80155dc:	4b2a      	ldr	r3, [pc, #168]	; (8015688 <tcp_receive+0xf1c>)
 80155de:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80155e0:	4b29      	ldr	r3, [pc, #164]	; (8015688 <tcp_receive+0xf1c>)
 80155e2:	881b      	ldrh	r3, [r3, #0]
 80155e4:	461a      	mov	r2, r3
 80155e6:	4b26      	ldr	r3, [pc, #152]	; (8015680 <tcp_receive+0xf14>)
 80155e8:	681b      	ldr	r3, [r3, #0]
 80155ea:	441a      	add	r2, r3
 80155ec:	687b      	ldr	r3, [r7, #4]
 80155ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80155f0:	6879      	ldr	r1, [r7, #4]
 80155f2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80155f4:	440b      	add	r3, r1
 80155f6:	429a      	cmp	r2, r3
 80155f8:	d019      	beq.n	801562e <tcp_receive+0xec2>
 80155fa:	4b24      	ldr	r3, [pc, #144]	; (801568c <tcp_receive+0xf20>)
 80155fc:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8015600:	4923      	ldr	r1, [pc, #140]	; (8015690 <tcp_receive+0xf24>)
 8015602:	4824      	ldr	r0, [pc, #144]	; (8015694 <tcp_receive+0xf28>)
 8015604:	f005 fd7c 	bl	801b100 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8015608:	e011      	b.n	801562e <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801560a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801560c:	681b      	ldr	r3, [r3, #0]
 801560e:	63bb      	str	r3, [r7, #56]	; 0x38
 8015610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015612:	2b00      	cmp	r3, #0
 8015614:	f47f aea4 	bne.w	8015360 <tcp_receive+0xbf4>
 8015618:	e00a      	b.n	8015630 <tcp_receive+0xec4>
                break;
 801561a:	bf00      	nop
 801561c:	e008      	b.n	8015630 <tcp_receive+0xec4>
                break;
 801561e:	bf00      	nop
 8015620:	e006      	b.n	8015630 <tcp_receive+0xec4>
                  break;
 8015622:	bf00      	nop
 8015624:	e004      	b.n	8015630 <tcp_receive+0xec4>
                  break;
 8015626:	bf00      	nop
 8015628:	e002      	b.n	8015630 <tcp_receive+0xec4>
                  break;
 801562a:	bf00      	nop
 801562c:	e000      	b.n	8015630 <tcp_receive+0xec4>
                break;
 801562e:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8015630:	6878      	ldr	r0, [r7, #4]
 8015632:	f001 fa43 	bl	8016abc <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8015636:	e003      	b.n	8015640 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8015638:	6878      	ldr	r0, [r7, #4]
 801563a:	f001 fa3f 	bl	8016abc <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801563e:	e01a      	b.n	8015676 <tcp_receive+0xf0a>
 8015640:	e019      	b.n	8015676 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8015642:	4b0f      	ldr	r3, [pc, #60]	; (8015680 <tcp_receive+0xf14>)
 8015644:	681a      	ldr	r2, [r3, #0]
 8015646:	687b      	ldr	r3, [r7, #4]
 8015648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801564a:	1ad3      	subs	r3, r2, r3
 801564c:	2b00      	cmp	r3, #0
 801564e:	db0a      	blt.n	8015666 <tcp_receive+0xefa>
 8015650:	4b0b      	ldr	r3, [pc, #44]	; (8015680 <tcp_receive+0xf14>)
 8015652:	681a      	ldr	r2, [r3, #0]
 8015654:	687b      	ldr	r3, [r7, #4]
 8015656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015658:	6879      	ldr	r1, [r7, #4]
 801565a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801565c:	440b      	add	r3, r1
 801565e:	1ad3      	subs	r3, r2, r3
 8015660:	3301      	adds	r3, #1
 8015662:	2b00      	cmp	r3, #0
 8015664:	dd07      	ble.n	8015676 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 8015666:	687b      	ldr	r3, [r7, #4]
 8015668:	8b5b      	ldrh	r3, [r3, #26]
 801566a:	f043 0302 	orr.w	r3, r3, #2
 801566e:	b29a      	uxth	r2, r3
 8015670:	687b      	ldr	r3, [r7, #4]
 8015672:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8015674:	e7ff      	b.n	8015676 <tcp_receive+0xf0a>
 8015676:	bf00      	nop
 8015678:	3750      	adds	r7, #80	; 0x50
 801567a:	46bd      	mov	sp, r7
 801567c:	bdb0      	pop	{r4, r5, r7, pc}
 801567e:	bf00      	nop
 8015680:	24004938 	.word	0x24004938
 8015684:	24004918 	.word	0x24004918
 8015688:	24004942 	.word	0x24004942
 801568c:	0801ed74 	.word	0x0801ed74
 8015690:	0801f138 	.word	0x0801f138
 8015694:	0801eddc 	.word	0x0801eddc

08015698 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8015698:	b480      	push	{r7}
 801569a:	b083      	sub	sp, #12
 801569c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801569e:	4b15      	ldr	r3, [pc, #84]	; (80156f4 <tcp_get_next_optbyte+0x5c>)
 80156a0:	881b      	ldrh	r3, [r3, #0]
 80156a2:	1c5a      	adds	r2, r3, #1
 80156a4:	b291      	uxth	r1, r2
 80156a6:	4a13      	ldr	r2, [pc, #76]	; (80156f4 <tcp_get_next_optbyte+0x5c>)
 80156a8:	8011      	strh	r1, [r2, #0]
 80156aa:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80156ac:	4b12      	ldr	r3, [pc, #72]	; (80156f8 <tcp_get_next_optbyte+0x60>)
 80156ae:	681b      	ldr	r3, [r3, #0]
 80156b0:	2b00      	cmp	r3, #0
 80156b2:	d004      	beq.n	80156be <tcp_get_next_optbyte+0x26>
 80156b4:	4b11      	ldr	r3, [pc, #68]	; (80156fc <tcp_get_next_optbyte+0x64>)
 80156b6:	881b      	ldrh	r3, [r3, #0]
 80156b8:	88fa      	ldrh	r2, [r7, #6]
 80156ba:	429a      	cmp	r2, r3
 80156bc:	d208      	bcs.n	80156d0 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80156be:	4b10      	ldr	r3, [pc, #64]	; (8015700 <tcp_get_next_optbyte+0x68>)
 80156c0:	681b      	ldr	r3, [r3, #0]
 80156c2:	3314      	adds	r3, #20
 80156c4:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80156c6:	88fb      	ldrh	r3, [r7, #6]
 80156c8:	683a      	ldr	r2, [r7, #0]
 80156ca:	4413      	add	r3, r2
 80156cc:	781b      	ldrb	r3, [r3, #0]
 80156ce:	e00b      	b.n	80156e8 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80156d0:	88fb      	ldrh	r3, [r7, #6]
 80156d2:	b2da      	uxtb	r2, r3
 80156d4:	4b09      	ldr	r3, [pc, #36]	; (80156fc <tcp_get_next_optbyte+0x64>)
 80156d6:	881b      	ldrh	r3, [r3, #0]
 80156d8:	b2db      	uxtb	r3, r3
 80156da:	1ad3      	subs	r3, r2, r3
 80156dc:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80156de:	4b06      	ldr	r3, [pc, #24]	; (80156f8 <tcp_get_next_optbyte+0x60>)
 80156e0:	681a      	ldr	r2, [r3, #0]
 80156e2:	797b      	ldrb	r3, [r7, #5]
 80156e4:	4413      	add	r3, r2
 80156e6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80156e8:	4618      	mov	r0, r3
 80156ea:	370c      	adds	r7, #12
 80156ec:	46bd      	mov	sp, r7
 80156ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156f2:	4770      	bx	lr
 80156f4:	24004934 	.word	0x24004934
 80156f8:	24004930 	.word	0x24004930
 80156fc:	2400492e 	.word	0x2400492e
 8015700:	24004928 	.word	0x24004928

08015704 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8015704:	b580      	push	{r7, lr}
 8015706:	b084      	sub	sp, #16
 8015708:	af00      	add	r7, sp, #0
 801570a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 801570c:	687b      	ldr	r3, [r7, #4]
 801570e:	2b00      	cmp	r3, #0
 8015710:	d106      	bne.n	8015720 <tcp_parseopt+0x1c>
 8015712:	4b31      	ldr	r3, [pc, #196]	; (80157d8 <tcp_parseopt+0xd4>)
 8015714:	f240 727d 	movw	r2, #1917	; 0x77d
 8015718:	4930      	ldr	r1, [pc, #192]	; (80157dc <tcp_parseopt+0xd8>)
 801571a:	4831      	ldr	r0, [pc, #196]	; (80157e0 <tcp_parseopt+0xdc>)
 801571c:	f005 fcf0 	bl	801b100 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8015720:	4b30      	ldr	r3, [pc, #192]	; (80157e4 <tcp_parseopt+0xe0>)
 8015722:	881b      	ldrh	r3, [r3, #0]
 8015724:	2b00      	cmp	r3, #0
 8015726:	d053      	beq.n	80157d0 <tcp_parseopt+0xcc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8015728:	4b2f      	ldr	r3, [pc, #188]	; (80157e8 <tcp_parseopt+0xe4>)
 801572a:	2200      	movs	r2, #0
 801572c:	801a      	strh	r2, [r3, #0]
 801572e:	e043      	b.n	80157b8 <tcp_parseopt+0xb4>
      u8_t opt = tcp_get_next_optbyte();
 8015730:	f7ff ffb2 	bl	8015698 <tcp_get_next_optbyte>
 8015734:	4603      	mov	r3, r0
 8015736:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8015738:	7bfb      	ldrb	r3, [r7, #15]
 801573a:	2b01      	cmp	r3, #1
 801573c:	d03c      	beq.n	80157b8 <tcp_parseopt+0xb4>
 801573e:	2b02      	cmp	r3, #2
 8015740:	d002      	beq.n	8015748 <tcp_parseopt+0x44>
 8015742:	2b00      	cmp	r3, #0
 8015744:	d03f      	beq.n	80157c6 <tcp_parseopt+0xc2>
 8015746:	e026      	b.n	8015796 <tcp_parseopt+0x92>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8015748:	f7ff ffa6 	bl	8015698 <tcp_get_next_optbyte>
 801574c:	4603      	mov	r3, r0
 801574e:	2b04      	cmp	r3, #4
 8015750:	d13b      	bne.n	80157ca <tcp_parseopt+0xc6>
 8015752:	4b25      	ldr	r3, [pc, #148]	; (80157e8 <tcp_parseopt+0xe4>)
 8015754:	881b      	ldrh	r3, [r3, #0]
 8015756:	3302      	adds	r3, #2
 8015758:	4a22      	ldr	r2, [pc, #136]	; (80157e4 <tcp_parseopt+0xe0>)
 801575a:	8812      	ldrh	r2, [r2, #0]
 801575c:	4293      	cmp	r3, r2
 801575e:	dc34      	bgt.n	80157ca <tcp_parseopt+0xc6>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8015760:	f7ff ff9a 	bl	8015698 <tcp_get_next_optbyte>
 8015764:	4603      	mov	r3, r0
 8015766:	b29b      	uxth	r3, r3
 8015768:	021b      	lsls	r3, r3, #8
 801576a:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801576c:	f7ff ff94 	bl	8015698 <tcp_get_next_optbyte>
 8015770:	4603      	mov	r3, r0
 8015772:	b29a      	uxth	r2, r3
 8015774:	89bb      	ldrh	r3, [r7, #12]
 8015776:	4313      	orrs	r3, r2
 8015778:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801577a:	89bb      	ldrh	r3, [r7, #12]
 801577c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8015780:	d804      	bhi.n	801578c <tcp_parseopt+0x88>
 8015782:	89bb      	ldrh	r3, [r7, #12]
 8015784:	2b00      	cmp	r3, #0
 8015786:	d001      	beq.n	801578c <tcp_parseopt+0x88>
 8015788:	89ba      	ldrh	r2, [r7, #12]
 801578a:	e001      	b.n	8015790 <tcp_parseopt+0x8c>
 801578c:	f44f 7206 	mov.w	r2, #536	; 0x218
 8015790:	687b      	ldr	r3, [r7, #4]
 8015792:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8015794:	e010      	b.n	80157b8 <tcp_parseopt+0xb4>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8015796:	f7ff ff7f 	bl	8015698 <tcp_get_next_optbyte>
 801579a:	4603      	mov	r3, r0
 801579c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801579e:	7afb      	ldrb	r3, [r7, #11]
 80157a0:	2b01      	cmp	r3, #1
 80157a2:	d914      	bls.n	80157ce <tcp_parseopt+0xca>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80157a4:	7afb      	ldrb	r3, [r7, #11]
 80157a6:	b29a      	uxth	r2, r3
 80157a8:	4b0f      	ldr	r3, [pc, #60]	; (80157e8 <tcp_parseopt+0xe4>)
 80157aa:	881b      	ldrh	r3, [r3, #0]
 80157ac:	4413      	add	r3, r2
 80157ae:	b29b      	uxth	r3, r3
 80157b0:	3b02      	subs	r3, #2
 80157b2:	b29a      	uxth	r2, r3
 80157b4:	4b0c      	ldr	r3, [pc, #48]	; (80157e8 <tcp_parseopt+0xe4>)
 80157b6:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80157b8:	4b0b      	ldr	r3, [pc, #44]	; (80157e8 <tcp_parseopt+0xe4>)
 80157ba:	881a      	ldrh	r2, [r3, #0]
 80157bc:	4b09      	ldr	r3, [pc, #36]	; (80157e4 <tcp_parseopt+0xe0>)
 80157be:	881b      	ldrh	r3, [r3, #0]
 80157c0:	429a      	cmp	r2, r3
 80157c2:	d3b5      	bcc.n	8015730 <tcp_parseopt+0x2c>
 80157c4:	e004      	b.n	80157d0 <tcp_parseopt+0xcc>
          return;
 80157c6:	bf00      	nop
 80157c8:	e002      	b.n	80157d0 <tcp_parseopt+0xcc>
            return;
 80157ca:	bf00      	nop
 80157cc:	e000      	b.n	80157d0 <tcp_parseopt+0xcc>
            return;
 80157ce:	bf00      	nop
      }
    }
  }
}
 80157d0:	3710      	adds	r7, #16
 80157d2:	46bd      	mov	sp, r7
 80157d4:	bd80      	pop	{r7, pc}
 80157d6:	bf00      	nop
 80157d8:	0801ed74 	.word	0x0801ed74
 80157dc:	0801f1f4 	.word	0x0801f1f4
 80157e0:	0801eddc 	.word	0x0801eddc
 80157e4:	2400492c 	.word	0x2400492c
 80157e8:	24004934 	.word	0x24004934

080157ec <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80157ec:	b480      	push	{r7}
 80157ee:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80157f0:	4b05      	ldr	r3, [pc, #20]	; (8015808 <tcp_trigger_input_pcb_close+0x1c>)
 80157f2:	781b      	ldrb	r3, [r3, #0]
 80157f4:	f043 0310 	orr.w	r3, r3, #16
 80157f8:	b2da      	uxtb	r2, r3
 80157fa:	4b03      	ldr	r3, [pc, #12]	; (8015808 <tcp_trigger_input_pcb_close+0x1c>)
 80157fc:	701a      	strb	r2, [r3, #0]
}
 80157fe:	bf00      	nop
 8015800:	46bd      	mov	sp, r7
 8015802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015806:	4770      	bx	lr
 8015808:	24004945 	.word	0x24004945

0801580c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 801580c:	b580      	push	{r7, lr}
 801580e:	b084      	sub	sp, #16
 8015810:	af00      	add	r7, sp, #0
 8015812:	60f8      	str	r0, [r7, #12]
 8015814:	60b9      	str	r1, [r7, #8]
 8015816:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8015818:	68fb      	ldr	r3, [r7, #12]
 801581a:	2b00      	cmp	r3, #0
 801581c:	d00a      	beq.n	8015834 <tcp_route+0x28>
 801581e:	68fb      	ldr	r3, [r7, #12]
 8015820:	7a1b      	ldrb	r3, [r3, #8]
 8015822:	2b00      	cmp	r3, #0
 8015824:	d006      	beq.n	8015834 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8015826:	68fb      	ldr	r3, [r7, #12]
 8015828:	7a1b      	ldrb	r3, [r3, #8]
 801582a:	4618      	mov	r0, r3
 801582c:	f7fb fa20 	bl	8010c70 <netif_get_by_index>
 8015830:	4603      	mov	r3, r0
 8015832:	e003      	b.n	801583c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8015834:	6878      	ldr	r0, [r7, #4]
 8015836:	f7f9 f8e7 	bl	800ea08 <ip4_route>
 801583a:	4603      	mov	r3, r0
  }
}
 801583c:	4618      	mov	r0, r3
 801583e:	3710      	adds	r7, #16
 8015840:	46bd      	mov	sp, r7
 8015842:	bd80      	pop	{r7, pc}

08015844 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8015844:	b590      	push	{r4, r7, lr}
 8015846:	b087      	sub	sp, #28
 8015848:	af00      	add	r7, sp, #0
 801584a:	60f8      	str	r0, [r7, #12]
 801584c:	60b9      	str	r1, [r7, #8]
 801584e:	603b      	str	r3, [r7, #0]
 8015850:	4613      	mov	r3, r2
 8015852:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8015854:	68fb      	ldr	r3, [r7, #12]
 8015856:	2b00      	cmp	r3, #0
 8015858:	d105      	bne.n	8015866 <tcp_create_segment+0x22>
 801585a:	4b44      	ldr	r3, [pc, #272]	; (801596c <tcp_create_segment+0x128>)
 801585c:	22a3      	movs	r2, #163	; 0xa3
 801585e:	4944      	ldr	r1, [pc, #272]	; (8015970 <tcp_create_segment+0x12c>)
 8015860:	4844      	ldr	r0, [pc, #272]	; (8015974 <tcp_create_segment+0x130>)
 8015862:	f005 fc4d 	bl	801b100 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8015866:	68bb      	ldr	r3, [r7, #8]
 8015868:	2b00      	cmp	r3, #0
 801586a:	d105      	bne.n	8015878 <tcp_create_segment+0x34>
 801586c:	4b3f      	ldr	r3, [pc, #252]	; (801596c <tcp_create_segment+0x128>)
 801586e:	22a4      	movs	r2, #164	; 0xa4
 8015870:	4941      	ldr	r1, [pc, #260]	; (8015978 <tcp_create_segment+0x134>)
 8015872:	4840      	ldr	r0, [pc, #256]	; (8015974 <tcp_create_segment+0x130>)
 8015874:	f005 fc44 	bl	801b100 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8015878:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801587c:	009b      	lsls	r3, r3, #2
 801587e:	b2db      	uxtb	r3, r3
 8015880:	f003 0304 	and.w	r3, r3, #4
 8015884:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8015886:	2003      	movs	r0, #3
 8015888:	f7fa fe66 	bl	8010558 <memp_malloc>
 801588c:	6138      	str	r0, [r7, #16]
 801588e:	693b      	ldr	r3, [r7, #16]
 8015890:	2b00      	cmp	r3, #0
 8015892:	d104      	bne.n	801589e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8015894:	68b8      	ldr	r0, [r7, #8]
 8015896:	f7fb fd75 	bl	8011384 <pbuf_free>
    return NULL;
 801589a:	2300      	movs	r3, #0
 801589c:	e061      	b.n	8015962 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801589e:	693b      	ldr	r3, [r7, #16]
 80158a0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80158a4:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80158a6:	693b      	ldr	r3, [r7, #16]
 80158a8:	2200      	movs	r2, #0
 80158aa:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80158ac:	693b      	ldr	r3, [r7, #16]
 80158ae:	68ba      	ldr	r2, [r7, #8]
 80158b0:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80158b2:	68bb      	ldr	r3, [r7, #8]
 80158b4:	891a      	ldrh	r2, [r3, #8]
 80158b6:	7dfb      	ldrb	r3, [r7, #23]
 80158b8:	b29b      	uxth	r3, r3
 80158ba:	429a      	cmp	r2, r3
 80158bc:	d205      	bcs.n	80158ca <tcp_create_segment+0x86>
 80158be:	4b2b      	ldr	r3, [pc, #172]	; (801596c <tcp_create_segment+0x128>)
 80158c0:	22b0      	movs	r2, #176	; 0xb0
 80158c2:	492e      	ldr	r1, [pc, #184]	; (801597c <tcp_create_segment+0x138>)
 80158c4:	482b      	ldr	r0, [pc, #172]	; (8015974 <tcp_create_segment+0x130>)
 80158c6:	f005 fc1b 	bl	801b100 <iprintf>
  seg->len = p->tot_len - optlen;
 80158ca:	68bb      	ldr	r3, [r7, #8]
 80158cc:	891a      	ldrh	r2, [r3, #8]
 80158ce:	7dfb      	ldrb	r3, [r7, #23]
 80158d0:	b29b      	uxth	r3, r3
 80158d2:	1ad3      	subs	r3, r2, r3
 80158d4:	b29a      	uxth	r2, r3
 80158d6:	693b      	ldr	r3, [r7, #16]
 80158d8:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80158da:	2114      	movs	r1, #20
 80158dc:	68b8      	ldr	r0, [r7, #8]
 80158de:	f7fb fcbb 	bl	8011258 <pbuf_add_header>
 80158e2:	4603      	mov	r3, r0
 80158e4:	2b00      	cmp	r3, #0
 80158e6:	d004      	beq.n	80158f2 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80158e8:	6938      	ldr	r0, [r7, #16]
 80158ea:	f7fd f8d5 	bl	8012a98 <tcp_seg_free>
    return NULL;
 80158ee:	2300      	movs	r3, #0
 80158f0:	e037      	b.n	8015962 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80158f2:	693b      	ldr	r3, [r7, #16]
 80158f4:	685b      	ldr	r3, [r3, #4]
 80158f6:	685a      	ldr	r2, [r3, #4]
 80158f8:	693b      	ldr	r3, [r7, #16]
 80158fa:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80158fc:	68fb      	ldr	r3, [r7, #12]
 80158fe:	8ada      	ldrh	r2, [r3, #22]
 8015900:	693b      	ldr	r3, [r7, #16]
 8015902:	68dc      	ldr	r4, [r3, #12]
 8015904:	4610      	mov	r0, r2
 8015906:	f7f7 fda7 	bl	800d458 <lwip_htons>
 801590a:	4603      	mov	r3, r0
 801590c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801590e:	68fb      	ldr	r3, [r7, #12]
 8015910:	8b1a      	ldrh	r2, [r3, #24]
 8015912:	693b      	ldr	r3, [r7, #16]
 8015914:	68dc      	ldr	r4, [r3, #12]
 8015916:	4610      	mov	r0, r2
 8015918:	f7f7 fd9e 	bl	800d458 <lwip_htons>
 801591c:	4603      	mov	r3, r0
 801591e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8015920:	693b      	ldr	r3, [r7, #16]
 8015922:	68dc      	ldr	r4, [r3, #12]
 8015924:	6838      	ldr	r0, [r7, #0]
 8015926:	f7f7 fdac 	bl	800d482 <lwip_htonl>
 801592a:	4603      	mov	r3, r0
 801592c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801592e:	7dfb      	ldrb	r3, [r7, #23]
 8015930:	089b      	lsrs	r3, r3, #2
 8015932:	b2db      	uxtb	r3, r3
 8015934:	b29b      	uxth	r3, r3
 8015936:	3305      	adds	r3, #5
 8015938:	b29b      	uxth	r3, r3
 801593a:	031b      	lsls	r3, r3, #12
 801593c:	b29a      	uxth	r2, r3
 801593e:	79fb      	ldrb	r3, [r7, #7]
 8015940:	b29b      	uxth	r3, r3
 8015942:	4313      	orrs	r3, r2
 8015944:	b29a      	uxth	r2, r3
 8015946:	693b      	ldr	r3, [r7, #16]
 8015948:	68dc      	ldr	r4, [r3, #12]
 801594a:	4610      	mov	r0, r2
 801594c:	f7f7 fd84 	bl	800d458 <lwip_htons>
 8015950:	4603      	mov	r3, r0
 8015952:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8015954:	693b      	ldr	r3, [r7, #16]
 8015956:	68db      	ldr	r3, [r3, #12]
 8015958:	2200      	movs	r2, #0
 801595a:	749a      	strb	r2, [r3, #18]
 801595c:	2200      	movs	r2, #0
 801595e:	74da      	strb	r2, [r3, #19]
  return seg;
 8015960:	693b      	ldr	r3, [r7, #16]
}
 8015962:	4618      	mov	r0, r3
 8015964:	371c      	adds	r7, #28
 8015966:	46bd      	mov	sp, r7
 8015968:	bd90      	pop	{r4, r7, pc}
 801596a:	bf00      	nop
 801596c:	0801f210 	.word	0x0801f210
 8015970:	0801f260 	.word	0x0801f260
 8015974:	0801f280 	.word	0x0801f280
 8015978:	0801f2a8 	.word	0x0801f2a8
 801597c:	0801f2cc 	.word	0x0801f2cc

08015980 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8015980:	b590      	push	{r4, r7, lr}
 8015982:	b08b      	sub	sp, #44	; 0x2c
 8015984:	af02      	add	r7, sp, #8
 8015986:	6078      	str	r0, [r7, #4]
 8015988:	460b      	mov	r3, r1
 801598a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801598c:	2300      	movs	r3, #0
 801598e:	61fb      	str	r3, [r7, #28]
 8015990:	2300      	movs	r3, #0
 8015992:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8015994:	2300      	movs	r3, #0
 8015996:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8015998:	687b      	ldr	r3, [r7, #4]
 801599a:	2b00      	cmp	r3, #0
 801599c:	d106      	bne.n	80159ac <tcp_split_unsent_seg+0x2c>
 801599e:	4b95      	ldr	r3, [pc, #596]	; (8015bf4 <tcp_split_unsent_seg+0x274>)
 80159a0:	f240 324b 	movw	r2, #843	; 0x34b
 80159a4:	4994      	ldr	r1, [pc, #592]	; (8015bf8 <tcp_split_unsent_seg+0x278>)
 80159a6:	4895      	ldr	r0, [pc, #596]	; (8015bfc <tcp_split_unsent_seg+0x27c>)
 80159a8:	f005 fbaa 	bl	801b100 <iprintf>

  useg = pcb->unsent;
 80159ac:	687b      	ldr	r3, [r7, #4]
 80159ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80159b0:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80159b2:	697b      	ldr	r3, [r7, #20]
 80159b4:	2b00      	cmp	r3, #0
 80159b6:	d102      	bne.n	80159be <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80159b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80159bc:	e116      	b.n	8015bec <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80159be:	887b      	ldrh	r3, [r7, #2]
 80159c0:	2b00      	cmp	r3, #0
 80159c2:	d109      	bne.n	80159d8 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80159c4:	4b8b      	ldr	r3, [pc, #556]	; (8015bf4 <tcp_split_unsent_seg+0x274>)
 80159c6:	f240 3253 	movw	r2, #851	; 0x353
 80159ca:	498d      	ldr	r1, [pc, #564]	; (8015c00 <tcp_split_unsent_seg+0x280>)
 80159cc:	488b      	ldr	r0, [pc, #556]	; (8015bfc <tcp_split_unsent_seg+0x27c>)
 80159ce:	f005 fb97 	bl	801b100 <iprintf>
    return ERR_VAL;
 80159d2:	f06f 0305 	mvn.w	r3, #5
 80159d6:	e109      	b.n	8015bec <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80159d8:	697b      	ldr	r3, [r7, #20]
 80159da:	891b      	ldrh	r3, [r3, #8]
 80159dc:	887a      	ldrh	r2, [r7, #2]
 80159de:	429a      	cmp	r2, r3
 80159e0:	d301      	bcc.n	80159e6 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80159e2:	2300      	movs	r3, #0
 80159e4:	e102      	b.n	8015bec <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80159e6:	687b      	ldr	r3, [r7, #4]
 80159e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80159ea:	887a      	ldrh	r2, [r7, #2]
 80159ec:	429a      	cmp	r2, r3
 80159ee:	d906      	bls.n	80159fe <tcp_split_unsent_seg+0x7e>
 80159f0:	4b80      	ldr	r3, [pc, #512]	; (8015bf4 <tcp_split_unsent_seg+0x274>)
 80159f2:	f240 325b 	movw	r2, #859	; 0x35b
 80159f6:	4983      	ldr	r1, [pc, #524]	; (8015c04 <tcp_split_unsent_seg+0x284>)
 80159f8:	4880      	ldr	r0, [pc, #512]	; (8015bfc <tcp_split_unsent_seg+0x27c>)
 80159fa:	f005 fb81 	bl	801b100 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80159fe:	697b      	ldr	r3, [r7, #20]
 8015a00:	891b      	ldrh	r3, [r3, #8]
 8015a02:	2b00      	cmp	r3, #0
 8015a04:	d106      	bne.n	8015a14 <tcp_split_unsent_seg+0x94>
 8015a06:	4b7b      	ldr	r3, [pc, #492]	; (8015bf4 <tcp_split_unsent_seg+0x274>)
 8015a08:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8015a0c:	497e      	ldr	r1, [pc, #504]	; (8015c08 <tcp_split_unsent_seg+0x288>)
 8015a0e:	487b      	ldr	r0, [pc, #492]	; (8015bfc <tcp_split_unsent_seg+0x27c>)
 8015a10:	f005 fb76 	bl	801b100 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8015a14:	697b      	ldr	r3, [r7, #20]
 8015a16:	7a9b      	ldrb	r3, [r3, #10]
 8015a18:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8015a1a:	7bfb      	ldrb	r3, [r7, #15]
 8015a1c:	009b      	lsls	r3, r3, #2
 8015a1e:	b2db      	uxtb	r3, r3
 8015a20:	f003 0304 	and.w	r3, r3, #4
 8015a24:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8015a26:	697b      	ldr	r3, [r7, #20]
 8015a28:	891a      	ldrh	r2, [r3, #8]
 8015a2a:	887b      	ldrh	r3, [r7, #2]
 8015a2c:	1ad3      	subs	r3, r2, r3
 8015a2e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8015a30:	7bbb      	ldrb	r3, [r7, #14]
 8015a32:	b29a      	uxth	r2, r3
 8015a34:	89bb      	ldrh	r3, [r7, #12]
 8015a36:	4413      	add	r3, r2
 8015a38:	b29b      	uxth	r3, r3
 8015a3a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015a3e:	4619      	mov	r1, r3
 8015a40:	2036      	movs	r0, #54	; 0x36
 8015a42:	f7fb f9bf 	bl	8010dc4 <pbuf_alloc>
 8015a46:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8015a48:	693b      	ldr	r3, [r7, #16]
 8015a4a:	2b00      	cmp	r3, #0
 8015a4c:	f000 80b7 	beq.w	8015bbe <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8015a50:	697b      	ldr	r3, [r7, #20]
 8015a52:	685b      	ldr	r3, [r3, #4]
 8015a54:	891a      	ldrh	r2, [r3, #8]
 8015a56:	697b      	ldr	r3, [r7, #20]
 8015a58:	891b      	ldrh	r3, [r3, #8]
 8015a5a:	1ad3      	subs	r3, r2, r3
 8015a5c:	b29a      	uxth	r2, r3
 8015a5e:	887b      	ldrh	r3, [r7, #2]
 8015a60:	4413      	add	r3, r2
 8015a62:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8015a64:	697b      	ldr	r3, [r7, #20]
 8015a66:	6858      	ldr	r0, [r3, #4]
 8015a68:	693b      	ldr	r3, [r7, #16]
 8015a6a:	685a      	ldr	r2, [r3, #4]
 8015a6c:	7bbb      	ldrb	r3, [r7, #14]
 8015a6e:	18d1      	adds	r1, r2, r3
 8015a70:	897b      	ldrh	r3, [r7, #10]
 8015a72:	89ba      	ldrh	r2, [r7, #12]
 8015a74:	f7fb fe7c 	bl	8011770 <pbuf_copy_partial>
 8015a78:	4603      	mov	r3, r0
 8015a7a:	461a      	mov	r2, r3
 8015a7c:	89bb      	ldrh	r3, [r7, #12]
 8015a7e:	4293      	cmp	r3, r2
 8015a80:	f040 809f 	bne.w	8015bc2 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8015a84:	697b      	ldr	r3, [r7, #20]
 8015a86:	68db      	ldr	r3, [r3, #12]
 8015a88:	899b      	ldrh	r3, [r3, #12]
 8015a8a:	b29b      	uxth	r3, r3
 8015a8c:	4618      	mov	r0, r3
 8015a8e:	f7f7 fce3 	bl	800d458 <lwip_htons>
 8015a92:	4603      	mov	r3, r0
 8015a94:	b2db      	uxtb	r3, r3
 8015a96:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015a9a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8015a9c:	2300      	movs	r3, #0
 8015a9e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8015aa0:	7efb      	ldrb	r3, [r7, #27]
 8015aa2:	f003 0308 	and.w	r3, r3, #8
 8015aa6:	2b00      	cmp	r3, #0
 8015aa8:	d007      	beq.n	8015aba <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8015aaa:	7efb      	ldrb	r3, [r7, #27]
 8015aac:	f023 0308 	bic.w	r3, r3, #8
 8015ab0:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8015ab2:	7ebb      	ldrb	r3, [r7, #26]
 8015ab4:	f043 0308 	orr.w	r3, r3, #8
 8015ab8:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8015aba:	7efb      	ldrb	r3, [r7, #27]
 8015abc:	f003 0301 	and.w	r3, r3, #1
 8015ac0:	2b00      	cmp	r3, #0
 8015ac2:	d007      	beq.n	8015ad4 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8015ac4:	7efb      	ldrb	r3, [r7, #27]
 8015ac6:	f023 0301 	bic.w	r3, r3, #1
 8015aca:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8015acc:	7ebb      	ldrb	r3, [r7, #26]
 8015ace:	f043 0301 	orr.w	r3, r3, #1
 8015ad2:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8015ad4:	697b      	ldr	r3, [r7, #20]
 8015ad6:	68db      	ldr	r3, [r3, #12]
 8015ad8:	685b      	ldr	r3, [r3, #4]
 8015ada:	4618      	mov	r0, r3
 8015adc:	f7f7 fcd1 	bl	800d482 <lwip_htonl>
 8015ae0:	4602      	mov	r2, r0
 8015ae2:	887b      	ldrh	r3, [r7, #2]
 8015ae4:	18d1      	adds	r1, r2, r3
 8015ae6:	7eba      	ldrb	r2, [r7, #26]
 8015ae8:	7bfb      	ldrb	r3, [r7, #15]
 8015aea:	9300      	str	r3, [sp, #0]
 8015aec:	460b      	mov	r3, r1
 8015aee:	6939      	ldr	r1, [r7, #16]
 8015af0:	6878      	ldr	r0, [r7, #4]
 8015af2:	f7ff fea7 	bl	8015844 <tcp_create_segment>
 8015af6:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8015af8:	69fb      	ldr	r3, [r7, #28]
 8015afa:	2b00      	cmp	r3, #0
 8015afc:	d063      	beq.n	8015bc6 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8015afe:	697b      	ldr	r3, [r7, #20]
 8015b00:	685b      	ldr	r3, [r3, #4]
 8015b02:	4618      	mov	r0, r3
 8015b04:	f7fb fccc 	bl	80114a0 <pbuf_clen>
 8015b08:	4603      	mov	r3, r0
 8015b0a:	461a      	mov	r2, r3
 8015b0c:	687b      	ldr	r3, [r7, #4]
 8015b0e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015b12:	1a9b      	subs	r3, r3, r2
 8015b14:	b29a      	uxth	r2, r3
 8015b16:	687b      	ldr	r3, [r7, #4]
 8015b18:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8015b1c:	697b      	ldr	r3, [r7, #20]
 8015b1e:	6858      	ldr	r0, [r3, #4]
 8015b20:	697b      	ldr	r3, [r7, #20]
 8015b22:	685b      	ldr	r3, [r3, #4]
 8015b24:	891a      	ldrh	r2, [r3, #8]
 8015b26:	89bb      	ldrh	r3, [r7, #12]
 8015b28:	1ad3      	subs	r3, r2, r3
 8015b2a:	b29b      	uxth	r3, r3
 8015b2c:	4619      	mov	r1, r3
 8015b2e:	f7fb faa3 	bl	8011078 <pbuf_realloc>
  useg->len -= remainder;
 8015b32:	697b      	ldr	r3, [r7, #20]
 8015b34:	891a      	ldrh	r2, [r3, #8]
 8015b36:	89bb      	ldrh	r3, [r7, #12]
 8015b38:	1ad3      	subs	r3, r2, r3
 8015b3a:	b29a      	uxth	r2, r3
 8015b3c:	697b      	ldr	r3, [r7, #20]
 8015b3e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8015b40:	697b      	ldr	r3, [r7, #20]
 8015b42:	68db      	ldr	r3, [r3, #12]
 8015b44:	899b      	ldrh	r3, [r3, #12]
 8015b46:	b29c      	uxth	r4, r3
 8015b48:	7efb      	ldrb	r3, [r7, #27]
 8015b4a:	b29b      	uxth	r3, r3
 8015b4c:	4618      	mov	r0, r3
 8015b4e:	f7f7 fc83 	bl	800d458 <lwip_htons>
 8015b52:	4603      	mov	r3, r0
 8015b54:	461a      	mov	r2, r3
 8015b56:	697b      	ldr	r3, [r7, #20]
 8015b58:	68db      	ldr	r3, [r3, #12]
 8015b5a:	4322      	orrs	r2, r4
 8015b5c:	b292      	uxth	r2, r2
 8015b5e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8015b60:	697b      	ldr	r3, [r7, #20]
 8015b62:	685b      	ldr	r3, [r3, #4]
 8015b64:	4618      	mov	r0, r3
 8015b66:	f7fb fc9b 	bl	80114a0 <pbuf_clen>
 8015b6a:	4603      	mov	r3, r0
 8015b6c:	461a      	mov	r2, r3
 8015b6e:	687b      	ldr	r3, [r7, #4]
 8015b70:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015b74:	4413      	add	r3, r2
 8015b76:	b29a      	uxth	r2, r3
 8015b78:	687b      	ldr	r3, [r7, #4]
 8015b7a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8015b7e:	69fb      	ldr	r3, [r7, #28]
 8015b80:	685b      	ldr	r3, [r3, #4]
 8015b82:	4618      	mov	r0, r3
 8015b84:	f7fb fc8c 	bl	80114a0 <pbuf_clen>
 8015b88:	4603      	mov	r3, r0
 8015b8a:	461a      	mov	r2, r3
 8015b8c:	687b      	ldr	r3, [r7, #4]
 8015b8e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015b92:	4413      	add	r3, r2
 8015b94:	b29a      	uxth	r2, r3
 8015b96:	687b      	ldr	r3, [r7, #4]
 8015b98:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8015b9c:	697b      	ldr	r3, [r7, #20]
 8015b9e:	681a      	ldr	r2, [r3, #0]
 8015ba0:	69fb      	ldr	r3, [r7, #28]
 8015ba2:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8015ba4:	697b      	ldr	r3, [r7, #20]
 8015ba6:	69fa      	ldr	r2, [r7, #28]
 8015ba8:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8015baa:	69fb      	ldr	r3, [r7, #28]
 8015bac:	681b      	ldr	r3, [r3, #0]
 8015bae:	2b00      	cmp	r3, #0
 8015bb0:	d103      	bne.n	8015bba <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8015bb2:	687b      	ldr	r3, [r7, #4]
 8015bb4:	2200      	movs	r2, #0
 8015bb6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8015bba:	2300      	movs	r3, #0
 8015bbc:	e016      	b.n	8015bec <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8015bbe:	bf00      	nop
 8015bc0:	e002      	b.n	8015bc8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8015bc2:	bf00      	nop
 8015bc4:	e000      	b.n	8015bc8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8015bc6:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8015bc8:	69fb      	ldr	r3, [r7, #28]
 8015bca:	2b00      	cmp	r3, #0
 8015bcc:	d006      	beq.n	8015bdc <tcp_split_unsent_seg+0x25c>
 8015bce:	4b09      	ldr	r3, [pc, #36]	; (8015bf4 <tcp_split_unsent_seg+0x274>)
 8015bd0:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8015bd4:	490d      	ldr	r1, [pc, #52]	; (8015c0c <tcp_split_unsent_seg+0x28c>)
 8015bd6:	4809      	ldr	r0, [pc, #36]	; (8015bfc <tcp_split_unsent_seg+0x27c>)
 8015bd8:	f005 fa92 	bl	801b100 <iprintf>
  if (p != NULL) {
 8015bdc:	693b      	ldr	r3, [r7, #16]
 8015bde:	2b00      	cmp	r3, #0
 8015be0:	d002      	beq.n	8015be8 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8015be2:	6938      	ldr	r0, [r7, #16]
 8015be4:	f7fb fbce 	bl	8011384 <pbuf_free>
  }

  return ERR_MEM;
 8015be8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8015bec:	4618      	mov	r0, r3
 8015bee:	3724      	adds	r7, #36	; 0x24
 8015bf0:	46bd      	mov	sp, r7
 8015bf2:	bd90      	pop	{r4, r7, pc}
 8015bf4:	0801f210 	.word	0x0801f210
 8015bf8:	0801f5c0 	.word	0x0801f5c0
 8015bfc:	0801f280 	.word	0x0801f280
 8015c00:	0801f5e4 	.word	0x0801f5e4
 8015c04:	0801f608 	.word	0x0801f608
 8015c08:	0801f618 	.word	0x0801f618
 8015c0c:	0801f628 	.word	0x0801f628

08015c10 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8015c10:	b590      	push	{r4, r7, lr}
 8015c12:	b085      	sub	sp, #20
 8015c14:	af00      	add	r7, sp, #0
 8015c16:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8015c18:	687b      	ldr	r3, [r7, #4]
 8015c1a:	2b00      	cmp	r3, #0
 8015c1c:	d106      	bne.n	8015c2c <tcp_send_fin+0x1c>
 8015c1e:	4b21      	ldr	r3, [pc, #132]	; (8015ca4 <tcp_send_fin+0x94>)
 8015c20:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8015c24:	4920      	ldr	r1, [pc, #128]	; (8015ca8 <tcp_send_fin+0x98>)
 8015c26:	4821      	ldr	r0, [pc, #132]	; (8015cac <tcp_send_fin+0x9c>)
 8015c28:	f005 fa6a 	bl	801b100 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8015c2c:	687b      	ldr	r3, [r7, #4]
 8015c2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015c30:	2b00      	cmp	r3, #0
 8015c32:	d02e      	beq.n	8015c92 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8015c34:	687b      	ldr	r3, [r7, #4]
 8015c36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015c38:	60fb      	str	r3, [r7, #12]
 8015c3a:	e002      	b.n	8015c42 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8015c3c:	68fb      	ldr	r3, [r7, #12]
 8015c3e:	681b      	ldr	r3, [r3, #0]
 8015c40:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8015c42:	68fb      	ldr	r3, [r7, #12]
 8015c44:	681b      	ldr	r3, [r3, #0]
 8015c46:	2b00      	cmp	r3, #0
 8015c48:	d1f8      	bne.n	8015c3c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8015c4a:	68fb      	ldr	r3, [r7, #12]
 8015c4c:	68db      	ldr	r3, [r3, #12]
 8015c4e:	899b      	ldrh	r3, [r3, #12]
 8015c50:	b29b      	uxth	r3, r3
 8015c52:	4618      	mov	r0, r3
 8015c54:	f7f7 fc00 	bl	800d458 <lwip_htons>
 8015c58:	4603      	mov	r3, r0
 8015c5a:	b2db      	uxtb	r3, r3
 8015c5c:	f003 0307 	and.w	r3, r3, #7
 8015c60:	2b00      	cmp	r3, #0
 8015c62:	d116      	bne.n	8015c92 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8015c64:	68fb      	ldr	r3, [r7, #12]
 8015c66:	68db      	ldr	r3, [r3, #12]
 8015c68:	899b      	ldrh	r3, [r3, #12]
 8015c6a:	b29c      	uxth	r4, r3
 8015c6c:	2001      	movs	r0, #1
 8015c6e:	f7f7 fbf3 	bl	800d458 <lwip_htons>
 8015c72:	4603      	mov	r3, r0
 8015c74:	461a      	mov	r2, r3
 8015c76:	68fb      	ldr	r3, [r7, #12]
 8015c78:	68db      	ldr	r3, [r3, #12]
 8015c7a:	4322      	orrs	r2, r4
 8015c7c:	b292      	uxth	r2, r2
 8015c7e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8015c80:	687b      	ldr	r3, [r7, #4]
 8015c82:	8b5b      	ldrh	r3, [r3, #26]
 8015c84:	f043 0320 	orr.w	r3, r3, #32
 8015c88:	b29a      	uxth	r2, r3
 8015c8a:	687b      	ldr	r3, [r7, #4]
 8015c8c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8015c8e:	2300      	movs	r3, #0
 8015c90:	e004      	b.n	8015c9c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8015c92:	2101      	movs	r1, #1
 8015c94:	6878      	ldr	r0, [r7, #4]
 8015c96:	f000 f80b 	bl	8015cb0 <tcp_enqueue_flags>
 8015c9a:	4603      	mov	r3, r0
}
 8015c9c:	4618      	mov	r0, r3
 8015c9e:	3714      	adds	r7, #20
 8015ca0:	46bd      	mov	sp, r7
 8015ca2:	bd90      	pop	{r4, r7, pc}
 8015ca4:	0801f210 	.word	0x0801f210
 8015ca8:	0801f634 	.word	0x0801f634
 8015cac:	0801f280 	.word	0x0801f280

08015cb0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8015cb0:	b580      	push	{r7, lr}
 8015cb2:	b08a      	sub	sp, #40	; 0x28
 8015cb4:	af02      	add	r7, sp, #8
 8015cb6:	6078      	str	r0, [r7, #4]
 8015cb8:	460b      	mov	r3, r1
 8015cba:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8015cbc:	2300      	movs	r3, #0
 8015cbe:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8015cc0:	2300      	movs	r3, #0
 8015cc2:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8015cc4:	78fb      	ldrb	r3, [r7, #3]
 8015cc6:	f003 0303 	and.w	r3, r3, #3
 8015cca:	2b00      	cmp	r3, #0
 8015ccc:	d106      	bne.n	8015cdc <tcp_enqueue_flags+0x2c>
 8015cce:	4b67      	ldr	r3, [pc, #412]	; (8015e6c <tcp_enqueue_flags+0x1bc>)
 8015cd0:	f240 4212 	movw	r2, #1042	; 0x412
 8015cd4:	4966      	ldr	r1, [pc, #408]	; (8015e70 <tcp_enqueue_flags+0x1c0>)
 8015cd6:	4867      	ldr	r0, [pc, #412]	; (8015e74 <tcp_enqueue_flags+0x1c4>)
 8015cd8:	f005 fa12 	bl	801b100 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8015cdc:	687b      	ldr	r3, [r7, #4]
 8015cde:	2b00      	cmp	r3, #0
 8015ce0:	d106      	bne.n	8015cf0 <tcp_enqueue_flags+0x40>
 8015ce2:	4b62      	ldr	r3, [pc, #392]	; (8015e6c <tcp_enqueue_flags+0x1bc>)
 8015ce4:	f240 4213 	movw	r2, #1043	; 0x413
 8015ce8:	4963      	ldr	r1, [pc, #396]	; (8015e78 <tcp_enqueue_flags+0x1c8>)
 8015cea:	4862      	ldr	r0, [pc, #392]	; (8015e74 <tcp_enqueue_flags+0x1c4>)
 8015cec:	f005 fa08 	bl	801b100 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8015cf0:	78fb      	ldrb	r3, [r7, #3]
 8015cf2:	f003 0302 	and.w	r3, r3, #2
 8015cf6:	2b00      	cmp	r3, #0
 8015cf8:	d001      	beq.n	8015cfe <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8015cfa:	2301      	movs	r3, #1
 8015cfc:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8015cfe:	7ffb      	ldrb	r3, [r7, #31]
 8015d00:	009b      	lsls	r3, r3, #2
 8015d02:	b2db      	uxtb	r3, r3
 8015d04:	f003 0304 	and.w	r3, r3, #4
 8015d08:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8015d0a:	7dfb      	ldrb	r3, [r7, #23]
 8015d0c:	b29b      	uxth	r3, r3
 8015d0e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015d12:	4619      	mov	r1, r3
 8015d14:	2036      	movs	r0, #54	; 0x36
 8015d16:	f7fb f855 	bl	8010dc4 <pbuf_alloc>
 8015d1a:	6138      	str	r0, [r7, #16]
 8015d1c:	693b      	ldr	r3, [r7, #16]
 8015d1e:	2b00      	cmp	r3, #0
 8015d20:	d109      	bne.n	8015d36 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015d22:	687b      	ldr	r3, [r7, #4]
 8015d24:	8b5b      	ldrh	r3, [r3, #26]
 8015d26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015d2a:	b29a      	uxth	r2, r3
 8015d2c:	687b      	ldr	r3, [r7, #4]
 8015d2e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8015d30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015d34:	e095      	b.n	8015e62 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8015d36:	693b      	ldr	r3, [r7, #16]
 8015d38:	895a      	ldrh	r2, [r3, #10]
 8015d3a:	7dfb      	ldrb	r3, [r7, #23]
 8015d3c:	b29b      	uxth	r3, r3
 8015d3e:	429a      	cmp	r2, r3
 8015d40:	d206      	bcs.n	8015d50 <tcp_enqueue_flags+0xa0>
 8015d42:	4b4a      	ldr	r3, [pc, #296]	; (8015e6c <tcp_enqueue_flags+0x1bc>)
 8015d44:	f240 423a 	movw	r2, #1082	; 0x43a
 8015d48:	494c      	ldr	r1, [pc, #304]	; (8015e7c <tcp_enqueue_flags+0x1cc>)
 8015d4a:	484a      	ldr	r0, [pc, #296]	; (8015e74 <tcp_enqueue_flags+0x1c4>)
 8015d4c:	f005 f9d8 	bl	801b100 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8015d50:	687b      	ldr	r3, [r7, #4]
 8015d52:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8015d54:	78fa      	ldrb	r2, [r7, #3]
 8015d56:	7ffb      	ldrb	r3, [r7, #31]
 8015d58:	9300      	str	r3, [sp, #0]
 8015d5a:	460b      	mov	r3, r1
 8015d5c:	6939      	ldr	r1, [r7, #16]
 8015d5e:	6878      	ldr	r0, [r7, #4]
 8015d60:	f7ff fd70 	bl	8015844 <tcp_create_segment>
 8015d64:	60f8      	str	r0, [r7, #12]
 8015d66:	68fb      	ldr	r3, [r7, #12]
 8015d68:	2b00      	cmp	r3, #0
 8015d6a:	d109      	bne.n	8015d80 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015d6c:	687b      	ldr	r3, [r7, #4]
 8015d6e:	8b5b      	ldrh	r3, [r3, #26]
 8015d70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015d74:	b29a      	uxth	r2, r3
 8015d76:	687b      	ldr	r3, [r7, #4]
 8015d78:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8015d7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015d7e:	e070      	b.n	8015e62 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8015d80:	68fb      	ldr	r3, [r7, #12]
 8015d82:	68db      	ldr	r3, [r3, #12]
 8015d84:	f003 0303 	and.w	r3, r3, #3
 8015d88:	2b00      	cmp	r3, #0
 8015d8a:	d006      	beq.n	8015d9a <tcp_enqueue_flags+0xea>
 8015d8c:	4b37      	ldr	r3, [pc, #220]	; (8015e6c <tcp_enqueue_flags+0x1bc>)
 8015d8e:	f240 4242 	movw	r2, #1090	; 0x442
 8015d92:	493b      	ldr	r1, [pc, #236]	; (8015e80 <tcp_enqueue_flags+0x1d0>)
 8015d94:	4837      	ldr	r0, [pc, #220]	; (8015e74 <tcp_enqueue_flags+0x1c4>)
 8015d96:	f005 f9b3 	bl	801b100 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8015d9a:	68fb      	ldr	r3, [r7, #12]
 8015d9c:	891b      	ldrh	r3, [r3, #8]
 8015d9e:	2b00      	cmp	r3, #0
 8015da0:	d006      	beq.n	8015db0 <tcp_enqueue_flags+0x100>
 8015da2:	4b32      	ldr	r3, [pc, #200]	; (8015e6c <tcp_enqueue_flags+0x1bc>)
 8015da4:	f240 4243 	movw	r2, #1091	; 0x443
 8015da8:	4936      	ldr	r1, [pc, #216]	; (8015e84 <tcp_enqueue_flags+0x1d4>)
 8015daa:	4832      	ldr	r0, [pc, #200]	; (8015e74 <tcp_enqueue_flags+0x1c4>)
 8015dac:	f005 f9a8 	bl	801b100 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8015db0:	687b      	ldr	r3, [r7, #4]
 8015db2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015db4:	2b00      	cmp	r3, #0
 8015db6:	d103      	bne.n	8015dc0 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8015db8:	687b      	ldr	r3, [r7, #4]
 8015dba:	68fa      	ldr	r2, [r7, #12]
 8015dbc:	66da      	str	r2, [r3, #108]	; 0x6c
 8015dbe:	e00d      	b.n	8015ddc <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8015dc0:	687b      	ldr	r3, [r7, #4]
 8015dc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015dc4:	61bb      	str	r3, [r7, #24]
 8015dc6:	e002      	b.n	8015dce <tcp_enqueue_flags+0x11e>
 8015dc8:	69bb      	ldr	r3, [r7, #24]
 8015dca:	681b      	ldr	r3, [r3, #0]
 8015dcc:	61bb      	str	r3, [r7, #24]
 8015dce:	69bb      	ldr	r3, [r7, #24]
 8015dd0:	681b      	ldr	r3, [r3, #0]
 8015dd2:	2b00      	cmp	r3, #0
 8015dd4:	d1f8      	bne.n	8015dc8 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8015dd6:	69bb      	ldr	r3, [r7, #24]
 8015dd8:	68fa      	ldr	r2, [r7, #12]
 8015dda:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8015ddc:	687b      	ldr	r3, [r7, #4]
 8015dde:	2200      	movs	r2, #0
 8015de0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8015de4:	78fb      	ldrb	r3, [r7, #3]
 8015de6:	f003 0302 	and.w	r3, r3, #2
 8015dea:	2b00      	cmp	r3, #0
 8015dec:	d104      	bne.n	8015df8 <tcp_enqueue_flags+0x148>
 8015dee:	78fb      	ldrb	r3, [r7, #3]
 8015df0:	f003 0301 	and.w	r3, r3, #1
 8015df4:	2b00      	cmp	r3, #0
 8015df6:	d004      	beq.n	8015e02 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8015df8:	687b      	ldr	r3, [r7, #4]
 8015dfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015dfc:	1c5a      	adds	r2, r3, #1
 8015dfe:	687b      	ldr	r3, [r7, #4]
 8015e00:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8015e02:	78fb      	ldrb	r3, [r7, #3]
 8015e04:	f003 0301 	and.w	r3, r3, #1
 8015e08:	2b00      	cmp	r3, #0
 8015e0a:	d006      	beq.n	8015e1a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8015e0c:	687b      	ldr	r3, [r7, #4]
 8015e0e:	8b5b      	ldrh	r3, [r3, #26]
 8015e10:	f043 0320 	orr.w	r3, r3, #32
 8015e14:	b29a      	uxth	r2, r3
 8015e16:	687b      	ldr	r3, [r7, #4]
 8015e18:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8015e1a:	68fb      	ldr	r3, [r7, #12]
 8015e1c:	685b      	ldr	r3, [r3, #4]
 8015e1e:	4618      	mov	r0, r3
 8015e20:	f7fb fb3e 	bl	80114a0 <pbuf_clen>
 8015e24:	4603      	mov	r3, r0
 8015e26:	461a      	mov	r2, r3
 8015e28:	687b      	ldr	r3, [r7, #4]
 8015e2a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015e2e:	4413      	add	r3, r2
 8015e30:	b29a      	uxth	r2, r3
 8015e32:	687b      	ldr	r3, [r7, #4]
 8015e34:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8015e38:	687b      	ldr	r3, [r7, #4]
 8015e3a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015e3e:	2b00      	cmp	r3, #0
 8015e40:	d00e      	beq.n	8015e60 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8015e42:	687b      	ldr	r3, [r7, #4]
 8015e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015e46:	2b00      	cmp	r3, #0
 8015e48:	d10a      	bne.n	8015e60 <tcp_enqueue_flags+0x1b0>
 8015e4a:	687b      	ldr	r3, [r7, #4]
 8015e4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015e4e:	2b00      	cmp	r3, #0
 8015e50:	d106      	bne.n	8015e60 <tcp_enqueue_flags+0x1b0>
 8015e52:	4b06      	ldr	r3, [pc, #24]	; (8015e6c <tcp_enqueue_flags+0x1bc>)
 8015e54:	f240 4266 	movw	r2, #1126	; 0x466
 8015e58:	490b      	ldr	r1, [pc, #44]	; (8015e88 <tcp_enqueue_flags+0x1d8>)
 8015e5a:	4806      	ldr	r0, [pc, #24]	; (8015e74 <tcp_enqueue_flags+0x1c4>)
 8015e5c:	f005 f950 	bl	801b100 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8015e60:	2300      	movs	r3, #0
}
 8015e62:	4618      	mov	r0, r3
 8015e64:	3720      	adds	r7, #32
 8015e66:	46bd      	mov	sp, r7
 8015e68:	bd80      	pop	{r7, pc}
 8015e6a:	bf00      	nop
 8015e6c:	0801f210 	.word	0x0801f210
 8015e70:	0801f650 	.word	0x0801f650
 8015e74:	0801f280 	.word	0x0801f280
 8015e78:	0801f6a8 	.word	0x0801f6a8
 8015e7c:	0801f6c8 	.word	0x0801f6c8
 8015e80:	0801f704 	.word	0x0801f704
 8015e84:	0801f71c 	.word	0x0801f71c
 8015e88:	0801f748 	.word	0x0801f748

08015e8c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8015e8c:	b5b0      	push	{r4, r5, r7, lr}
 8015e8e:	b08a      	sub	sp, #40	; 0x28
 8015e90:	af00      	add	r7, sp, #0
 8015e92:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8015e94:	687b      	ldr	r3, [r7, #4]
 8015e96:	2b00      	cmp	r3, #0
 8015e98:	d106      	bne.n	8015ea8 <tcp_output+0x1c>
 8015e9a:	4ba0      	ldr	r3, [pc, #640]	; (801611c <tcp_output+0x290>)
 8015e9c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8015ea0:	499f      	ldr	r1, [pc, #636]	; (8016120 <tcp_output+0x294>)
 8015ea2:	48a0      	ldr	r0, [pc, #640]	; (8016124 <tcp_output+0x298>)
 8015ea4:	f005 f92c 	bl	801b100 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8015ea8:	687b      	ldr	r3, [r7, #4]
 8015eaa:	7d1b      	ldrb	r3, [r3, #20]
 8015eac:	2b01      	cmp	r3, #1
 8015eae:	d106      	bne.n	8015ebe <tcp_output+0x32>
 8015eb0:	4b9a      	ldr	r3, [pc, #616]	; (801611c <tcp_output+0x290>)
 8015eb2:	f240 42e4 	movw	r2, #1252	; 0x4e4
 8015eb6:	499c      	ldr	r1, [pc, #624]	; (8016128 <tcp_output+0x29c>)
 8015eb8:	489a      	ldr	r0, [pc, #616]	; (8016124 <tcp_output+0x298>)
 8015eba:	f005 f921 	bl	801b100 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8015ebe:	4b9b      	ldr	r3, [pc, #620]	; (801612c <tcp_output+0x2a0>)
 8015ec0:	681b      	ldr	r3, [r3, #0]
 8015ec2:	687a      	ldr	r2, [r7, #4]
 8015ec4:	429a      	cmp	r2, r3
 8015ec6:	d101      	bne.n	8015ecc <tcp_output+0x40>
    return ERR_OK;
 8015ec8:	2300      	movs	r3, #0
 8015eca:	e1d2      	b.n	8016272 <tcp_output+0x3e6>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8015ecc:	687b      	ldr	r3, [r7, #4]
 8015ece:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8015ed2:	687b      	ldr	r3, [r7, #4]
 8015ed4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8015ed8:	429a      	cmp	r2, r3
 8015eda:	d203      	bcs.n	8015ee4 <tcp_output+0x58>
 8015edc:	687b      	ldr	r3, [r7, #4]
 8015ede:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015ee2:	e002      	b.n	8015eea <tcp_output+0x5e>
 8015ee4:	687b      	ldr	r3, [r7, #4]
 8015ee6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8015eea:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8015eec:	687b      	ldr	r3, [r7, #4]
 8015eee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015ef0:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8015ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ef4:	2b00      	cmp	r3, #0
 8015ef6:	d10b      	bne.n	8015f10 <tcp_output+0x84>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8015ef8:	687b      	ldr	r3, [r7, #4]
 8015efa:	8b5b      	ldrh	r3, [r3, #26]
 8015efc:	f003 0302 	and.w	r3, r3, #2
 8015f00:	2b00      	cmp	r3, #0
 8015f02:	f000 81a9 	beq.w	8016258 <tcp_output+0x3cc>
      return tcp_send_empty_ack(pcb);
 8015f06:	6878      	ldr	r0, [r7, #4]
 8015f08:	f000 fdd8 	bl	8016abc <tcp_send_empty_ack>
 8015f0c:	4603      	mov	r3, r0
 8015f0e:	e1b0      	b.n	8016272 <tcp_output+0x3e6>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8015f10:	6879      	ldr	r1, [r7, #4]
 8015f12:	687b      	ldr	r3, [r7, #4]
 8015f14:	3304      	adds	r3, #4
 8015f16:	461a      	mov	r2, r3
 8015f18:	6878      	ldr	r0, [r7, #4]
 8015f1a:	f7ff fc77 	bl	801580c <tcp_route>
 8015f1e:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8015f20:	697b      	ldr	r3, [r7, #20]
 8015f22:	2b00      	cmp	r3, #0
 8015f24:	d102      	bne.n	8015f2c <tcp_output+0xa0>
    return ERR_RTE;
 8015f26:	f06f 0303 	mvn.w	r3, #3
 8015f2a:	e1a2      	b.n	8016272 <tcp_output+0x3e6>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8015f2c:	687b      	ldr	r3, [r7, #4]
 8015f2e:	2b00      	cmp	r3, #0
 8015f30:	d003      	beq.n	8015f3a <tcp_output+0xae>
 8015f32:	687b      	ldr	r3, [r7, #4]
 8015f34:	681b      	ldr	r3, [r3, #0]
 8015f36:	2b00      	cmp	r3, #0
 8015f38:	d111      	bne.n	8015f5e <tcp_output+0xd2>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8015f3a:	697b      	ldr	r3, [r7, #20]
 8015f3c:	2b00      	cmp	r3, #0
 8015f3e:	d002      	beq.n	8015f46 <tcp_output+0xba>
 8015f40:	697b      	ldr	r3, [r7, #20]
 8015f42:	3304      	adds	r3, #4
 8015f44:	e000      	b.n	8015f48 <tcp_output+0xbc>
 8015f46:	2300      	movs	r3, #0
 8015f48:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8015f4a:	693b      	ldr	r3, [r7, #16]
 8015f4c:	2b00      	cmp	r3, #0
 8015f4e:	d102      	bne.n	8015f56 <tcp_output+0xca>
      return ERR_RTE;
 8015f50:	f06f 0303 	mvn.w	r3, #3
 8015f54:	e18d      	b.n	8016272 <tcp_output+0x3e6>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8015f56:	693b      	ldr	r3, [r7, #16]
 8015f58:	681a      	ldr	r2, [r3, #0]
 8015f5a:	687b      	ldr	r3, [r7, #4]
 8015f5c:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8015f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f60:	68db      	ldr	r3, [r3, #12]
 8015f62:	685b      	ldr	r3, [r3, #4]
 8015f64:	4618      	mov	r0, r3
 8015f66:	f7f7 fa8c 	bl	800d482 <lwip_htonl>
 8015f6a:	4602      	mov	r2, r0
 8015f6c:	687b      	ldr	r3, [r7, #4]
 8015f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015f70:	1ad3      	subs	r3, r2, r3
 8015f72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015f74:	8912      	ldrh	r2, [r2, #8]
 8015f76:	4413      	add	r3, r2
 8015f78:	69ba      	ldr	r2, [r7, #24]
 8015f7a:	429a      	cmp	r2, r3
 8015f7c:	d227      	bcs.n	8015fce <tcp_output+0x142>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8015f7e:	687b      	ldr	r3, [r7, #4]
 8015f80:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015f84:	461a      	mov	r2, r3
 8015f86:	69bb      	ldr	r3, [r7, #24]
 8015f88:	4293      	cmp	r3, r2
 8015f8a:	d114      	bne.n	8015fb6 <tcp_output+0x12a>
 8015f8c:	687b      	ldr	r3, [r7, #4]
 8015f8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015f90:	2b00      	cmp	r3, #0
 8015f92:	d110      	bne.n	8015fb6 <tcp_output+0x12a>
 8015f94:	687b      	ldr	r3, [r7, #4]
 8015f96:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8015f9a:	2b00      	cmp	r3, #0
 8015f9c:	d10b      	bne.n	8015fb6 <tcp_output+0x12a>
      pcb->persist_cnt = 0;
 8015f9e:	687b      	ldr	r3, [r7, #4]
 8015fa0:	2200      	movs	r2, #0
 8015fa2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8015fa6:	687b      	ldr	r3, [r7, #4]
 8015fa8:	2201      	movs	r2, #1
 8015faa:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8015fae:	687b      	ldr	r3, [r7, #4]
 8015fb0:	2200      	movs	r2, #0
 8015fb2:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8015fb6:	687b      	ldr	r3, [r7, #4]
 8015fb8:	8b5b      	ldrh	r3, [r3, #26]
 8015fba:	f003 0302 	and.w	r3, r3, #2
 8015fbe:	2b00      	cmp	r3, #0
 8015fc0:	f000 814c 	beq.w	801625c <tcp_output+0x3d0>
      return tcp_send_empty_ack(pcb);
 8015fc4:	6878      	ldr	r0, [r7, #4]
 8015fc6:	f000 fd79 	bl	8016abc <tcp_send_empty_ack>
 8015fca:	4603      	mov	r3, r0
 8015fcc:	e151      	b.n	8016272 <tcp_output+0x3e6>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8015fce:	687b      	ldr	r3, [r7, #4]
 8015fd0:	2200      	movs	r2, #0
 8015fd2:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8015fd6:	687b      	ldr	r3, [r7, #4]
 8015fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015fda:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8015fdc:	6a3b      	ldr	r3, [r7, #32]
 8015fde:	2b00      	cmp	r3, #0
 8015fe0:	f000 811b 	beq.w	801621a <tcp_output+0x38e>
    for (; useg->next != NULL; useg = useg->next);
 8015fe4:	e002      	b.n	8015fec <tcp_output+0x160>
 8015fe6:	6a3b      	ldr	r3, [r7, #32]
 8015fe8:	681b      	ldr	r3, [r3, #0]
 8015fea:	623b      	str	r3, [r7, #32]
 8015fec:	6a3b      	ldr	r3, [r7, #32]
 8015fee:	681b      	ldr	r3, [r3, #0]
 8015ff0:	2b00      	cmp	r3, #0
 8015ff2:	d1f8      	bne.n	8015fe6 <tcp_output+0x15a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8015ff4:	e111      	b.n	801621a <tcp_output+0x38e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8015ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ff8:	68db      	ldr	r3, [r3, #12]
 8015ffa:	899b      	ldrh	r3, [r3, #12]
 8015ffc:	b29b      	uxth	r3, r3
 8015ffe:	4618      	mov	r0, r3
 8016000:	f7f7 fa2a 	bl	800d458 <lwip_htons>
 8016004:	4603      	mov	r3, r0
 8016006:	b2db      	uxtb	r3, r3
 8016008:	f003 0304 	and.w	r3, r3, #4
 801600c:	2b00      	cmp	r3, #0
 801600e:	d006      	beq.n	801601e <tcp_output+0x192>
 8016010:	4b42      	ldr	r3, [pc, #264]	; (801611c <tcp_output+0x290>)
 8016012:	f240 5237 	movw	r2, #1335	; 0x537
 8016016:	4946      	ldr	r1, [pc, #280]	; (8016130 <tcp_output+0x2a4>)
 8016018:	4842      	ldr	r0, [pc, #264]	; (8016124 <tcp_output+0x298>)
 801601a:	f005 f871 	bl	801b100 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801601e:	687b      	ldr	r3, [r7, #4]
 8016020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016022:	2b00      	cmp	r3, #0
 8016024:	d01f      	beq.n	8016066 <tcp_output+0x1da>
 8016026:	687b      	ldr	r3, [r7, #4]
 8016028:	8b5b      	ldrh	r3, [r3, #26]
 801602a:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801602e:	2b00      	cmp	r3, #0
 8016030:	d119      	bne.n	8016066 <tcp_output+0x1da>
 8016032:	687b      	ldr	r3, [r7, #4]
 8016034:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016036:	2b00      	cmp	r3, #0
 8016038:	d00b      	beq.n	8016052 <tcp_output+0x1c6>
 801603a:	687b      	ldr	r3, [r7, #4]
 801603c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801603e:	681b      	ldr	r3, [r3, #0]
 8016040:	2b00      	cmp	r3, #0
 8016042:	d110      	bne.n	8016066 <tcp_output+0x1da>
 8016044:	687b      	ldr	r3, [r7, #4]
 8016046:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016048:	891a      	ldrh	r2, [r3, #8]
 801604a:	687b      	ldr	r3, [r7, #4]
 801604c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801604e:	429a      	cmp	r2, r3
 8016050:	d209      	bcs.n	8016066 <tcp_output+0x1da>
 8016052:	687b      	ldr	r3, [r7, #4]
 8016054:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8016058:	2b00      	cmp	r3, #0
 801605a:	d004      	beq.n	8016066 <tcp_output+0x1da>
 801605c:	687b      	ldr	r3, [r7, #4]
 801605e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016062:	2b08      	cmp	r3, #8
 8016064:	d901      	bls.n	801606a <tcp_output+0x1de>
 8016066:	2301      	movs	r3, #1
 8016068:	e000      	b.n	801606c <tcp_output+0x1e0>
 801606a:	2300      	movs	r3, #0
 801606c:	2b00      	cmp	r3, #0
 801606e:	d106      	bne.n	801607e <tcp_output+0x1f2>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8016070:	687b      	ldr	r3, [r7, #4]
 8016072:	8b5b      	ldrh	r3, [r3, #26]
 8016074:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8016078:	2b00      	cmp	r3, #0
 801607a:	f000 80e3 	beq.w	8016244 <tcp_output+0x3b8>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801607e:	687b      	ldr	r3, [r7, #4]
 8016080:	7d1b      	ldrb	r3, [r3, #20]
 8016082:	2b02      	cmp	r3, #2
 8016084:	d00d      	beq.n	80160a2 <tcp_output+0x216>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8016086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016088:	68db      	ldr	r3, [r3, #12]
 801608a:	899b      	ldrh	r3, [r3, #12]
 801608c:	b29c      	uxth	r4, r3
 801608e:	2010      	movs	r0, #16
 8016090:	f7f7 f9e2 	bl	800d458 <lwip_htons>
 8016094:	4603      	mov	r3, r0
 8016096:	461a      	mov	r2, r3
 8016098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801609a:	68db      	ldr	r3, [r3, #12]
 801609c:	4322      	orrs	r2, r4
 801609e:	b292      	uxth	r2, r2
 80160a0:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80160a2:	697a      	ldr	r2, [r7, #20]
 80160a4:	6879      	ldr	r1, [r7, #4]
 80160a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80160a8:	f000 f908 	bl	80162bc <tcp_output_segment>
 80160ac:	4603      	mov	r3, r0
 80160ae:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80160b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80160b4:	2b00      	cmp	r3, #0
 80160b6:	d009      	beq.n	80160cc <tcp_output+0x240>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80160b8:	687b      	ldr	r3, [r7, #4]
 80160ba:	8b5b      	ldrh	r3, [r3, #26]
 80160bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80160c0:	b29a      	uxth	r2, r3
 80160c2:	687b      	ldr	r3, [r7, #4]
 80160c4:	835a      	strh	r2, [r3, #26]
      return err;
 80160c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80160ca:	e0d2      	b.n	8016272 <tcp_output+0x3e6>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80160cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160ce:	681a      	ldr	r2, [r3, #0]
 80160d0:	687b      	ldr	r3, [r7, #4]
 80160d2:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 80160d4:	687b      	ldr	r3, [r7, #4]
 80160d6:	7d1b      	ldrb	r3, [r3, #20]
 80160d8:	2b02      	cmp	r3, #2
 80160da:	d006      	beq.n	80160ea <tcp_output+0x25e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80160dc:	687b      	ldr	r3, [r7, #4]
 80160de:	8b5b      	ldrh	r3, [r3, #26]
 80160e0:	f023 0303 	bic.w	r3, r3, #3
 80160e4:	b29a      	uxth	r2, r3
 80160e6:	687b      	ldr	r3, [r7, #4]
 80160e8:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80160ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160ec:	68db      	ldr	r3, [r3, #12]
 80160ee:	685b      	ldr	r3, [r3, #4]
 80160f0:	4618      	mov	r0, r3
 80160f2:	f7f7 f9c6 	bl	800d482 <lwip_htonl>
 80160f6:	4604      	mov	r4, r0
 80160f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160fa:	891b      	ldrh	r3, [r3, #8]
 80160fc:	461d      	mov	r5, r3
 80160fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016100:	68db      	ldr	r3, [r3, #12]
 8016102:	899b      	ldrh	r3, [r3, #12]
 8016104:	b29b      	uxth	r3, r3
 8016106:	4618      	mov	r0, r3
 8016108:	f7f7 f9a6 	bl	800d458 <lwip_htons>
 801610c:	4603      	mov	r3, r0
 801610e:	b2db      	uxtb	r3, r3
 8016110:	f003 0303 	and.w	r3, r3, #3
 8016114:	2b00      	cmp	r3, #0
 8016116:	d00d      	beq.n	8016134 <tcp_output+0x2a8>
 8016118:	2301      	movs	r3, #1
 801611a:	e00c      	b.n	8016136 <tcp_output+0x2aa>
 801611c:	0801f210 	.word	0x0801f210
 8016120:	0801f770 	.word	0x0801f770
 8016124:	0801f280 	.word	0x0801f280
 8016128:	0801f788 	.word	0x0801f788
 801612c:	2400ce7c 	.word	0x2400ce7c
 8016130:	0801f7b0 	.word	0x0801f7b0
 8016134:	2300      	movs	r3, #0
 8016136:	442b      	add	r3, r5
 8016138:	4423      	add	r3, r4
 801613a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801613c:	687b      	ldr	r3, [r7, #4]
 801613e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8016140:	68bb      	ldr	r3, [r7, #8]
 8016142:	1ad3      	subs	r3, r2, r3
 8016144:	2b00      	cmp	r3, #0
 8016146:	da02      	bge.n	801614e <tcp_output+0x2c2>
      pcb->snd_nxt = snd_nxt;
 8016148:	687b      	ldr	r3, [r7, #4]
 801614a:	68ba      	ldr	r2, [r7, #8]
 801614c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801614e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016150:	891b      	ldrh	r3, [r3, #8]
 8016152:	461c      	mov	r4, r3
 8016154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016156:	68db      	ldr	r3, [r3, #12]
 8016158:	899b      	ldrh	r3, [r3, #12]
 801615a:	b29b      	uxth	r3, r3
 801615c:	4618      	mov	r0, r3
 801615e:	f7f7 f97b 	bl	800d458 <lwip_htons>
 8016162:	4603      	mov	r3, r0
 8016164:	b2db      	uxtb	r3, r3
 8016166:	f003 0303 	and.w	r3, r3, #3
 801616a:	2b00      	cmp	r3, #0
 801616c:	d001      	beq.n	8016172 <tcp_output+0x2e6>
 801616e:	2301      	movs	r3, #1
 8016170:	e000      	b.n	8016174 <tcp_output+0x2e8>
 8016172:	2300      	movs	r3, #0
 8016174:	4423      	add	r3, r4
 8016176:	2b00      	cmp	r3, #0
 8016178:	d049      	beq.n	801620e <tcp_output+0x382>
      seg->next = NULL;
 801617a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801617c:	2200      	movs	r2, #0
 801617e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8016180:	687b      	ldr	r3, [r7, #4]
 8016182:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016184:	2b00      	cmp	r3, #0
 8016186:	d105      	bne.n	8016194 <tcp_output+0x308>
        pcb->unacked = seg;
 8016188:	687b      	ldr	r3, [r7, #4]
 801618a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801618c:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 801618e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016190:	623b      	str	r3, [r7, #32]
 8016192:	e03f      	b.n	8016214 <tcp_output+0x388>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8016194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016196:	68db      	ldr	r3, [r3, #12]
 8016198:	685b      	ldr	r3, [r3, #4]
 801619a:	4618      	mov	r0, r3
 801619c:	f7f7 f971 	bl	800d482 <lwip_htonl>
 80161a0:	4604      	mov	r4, r0
 80161a2:	6a3b      	ldr	r3, [r7, #32]
 80161a4:	68db      	ldr	r3, [r3, #12]
 80161a6:	685b      	ldr	r3, [r3, #4]
 80161a8:	4618      	mov	r0, r3
 80161aa:	f7f7 f96a 	bl	800d482 <lwip_htonl>
 80161ae:	4603      	mov	r3, r0
 80161b0:	1ae3      	subs	r3, r4, r3
 80161b2:	2b00      	cmp	r3, #0
 80161b4:	da24      	bge.n	8016200 <tcp_output+0x374>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80161b6:	687b      	ldr	r3, [r7, #4]
 80161b8:	3370      	adds	r3, #112	; 0x70
 80161ba:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80161bc:	e002      	b.n	80161c4 <tcp_output+0x338>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80161be:	69fb      	ldr	r3, [r7, #28]
 80161c0:	681b      	ldr	r3, [r3, #0]
 80161c2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80161c4:	69fb      	ldr	r3, [r7, #28]
 80161c6:	681b      	ldr	r3, [r3, #0]
 80161c8:	2b00      	cmp	r3, #0
 80161ca:	d011      	beq.n	80161f0 <tcp_output+0x364>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80161cc:	69fb      	ldr	r3, [r7, #28]
 80161ce:	681b      	ldr	r3, [r3, #0]
 80161d0:	68db      	ldr	r3, [r3, #12]
 80161d2:	685b      	ldr	r3, [r3, #4]
 80161d4:	4618      	mov	r0, r3
 80161d6:	f7f7 f954 	bl	800d482 <lwip_htonl>
 80161da:	4604      	mov	r4, r0
 80161dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161de:	68db      	ldr	r3, [r3, #12]
 80161e0:	685b      	ldr	r3, [r3, #4]
 80161e2:	4618      	mov	r0, r3
 80161e4:	f7f7 f94d 	bl	800d482 <lwip_htonl>
 80161e8:	4603      	mov	r3, r0
 80161ea:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80161ec:	2b00      	cmp	r3, #0
 80161ee:	dbe6      	blt.n	80161be <tcp_output+0x332>
          }
          seg->next = (*cur_seg);
 80161f0:	69fb      	ldr	r3, [r7, #28]
 80161f2:	681a      	ldr	r2, [r3, #0]
 80161f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161f6:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80161f8:	69fb      	ldr	r3, [r7, #28]
 80161fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80161fc:	601a      	str	r2, [r3, #0]
 80161fe:	e009      	b.n	8016214 <tcp_output+0x388>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8016200:	6a3b      	ldr	r3, [r7, #32]
 8016202:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016204:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8016206:	6a3b      	ldr	r3, [r7, #32]
 8016208:	681b      	ldr	r3, [r3, #0]
 801620a:	623b      	str	r3, [r7, #32]
 801620c:	e002      	b.n	8016214 <tcp_output+0x388>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801620e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016210:	f7fc fc42 	bl	8012a98 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8016214:	687b      	ldr	r3, [r7, #4]
 8016216:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016218:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801621a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801621c:	2b00      	cmp	r3, #0
 801621e:	d012      	beq.n	8016246 <tcp_output+0x3ba>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8016220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016222:	68db      	ldr	r3, [r3, #12]
 8016224:	685b      	ldr	r3, [r3, #4]
 8016226:	4618      	mov	r0, r3
 8016228:	f7f7 f92b 	bl	800d482 <lwip_htonl>
 801622c:	4602      	mov	r2, r0
 801622e:	687b      	ldr	r3, [r7, #4]
 8016230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016232:	1ad3      	subs	r3, r2, r3
 8016234:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016236:	8912      	ldrh	r2, [r2, #8]
 8016238:	4413      	add	r3, r2
  while (seg != NULL &&
 801623a:	69ba      	ldr	r2, [r7, #24]
 801623c:	429a      	cmp	r2, r3
 801623e:	f4bf aeda 	bcs.w	8015ff6 <tcp_output+0x16a>
 8016242:	e000      	b.n	8016246 <tcp_output+0x3ba>
      break;
 8016244:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8016246:	687b      	ldr	r3, [r7, #4]
 8016248:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801624a:	2b00      	cmp	r3, #0
 801624c:	d108      	bne.n	8016260 <tcp_output+0x3d4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801624e:	687b      	ldr	r3, [r7, #4]
 8016250:	2200      	movs	r2, #0
 8016252:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8016256:	e004      	b.n	8016262 <tcp_output+0x3d6>
    goto output_done;
 8016258:	bf00      	nop
 801625a:	e002      	b.n	8016262 <tcp_output+0x3d6>
    goto output_done;
 801625c:	bf00      	nop
 801625e:	e000      	b.n	8016262 <tcp_output+0x3d6>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8016260:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8016262:	687b      	ldr	r3, [r7, #4]
 8016264:	8b5b      	ldrh	r3, [r3, #26]
 8016266:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801626a:	b29a      	uxth	r2, r3
 801626c:	687b      	ldr	r3, [r7, #4]
 801626e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8016270:	2300      	movs	r3, #0
}
 8016272:	4618      	mov	r0, r3
 8016274:	3728      	adds	r7, #40	; 0x28
 8016276:	46bd      	mov	sp, r7
 8016278:	bdb0      	pop	{r4, r5, r7, pc}
 801627a:	bf00      	nop

0801627c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801627c:	b580      	push	{r7, lr}
 801627e:	b082      	sub	sp, #8
 8016280:	af00      	add	r7, sp, #0
 8016282:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8016284:	687b      	ldr	r3, [r7, #4]
 8016286:	2b00      	cmp	r3, #0
 8016288:	d106      	bne.n	8016298 <tcp_output_segment_busy+0x1c>
 801628a:	4b09      	ldr	r3, [pc, #36]	; (80162b0 <tcp_output_segment_busy+0x34>)
 801628c:	f240 529a 	movw	r2, #1434	; 0x59a
 8016290:	4908      	ldr	r1, [pc, #32]	; (80162b4 <tcp_output_segment_busy+0x38>)
 8016292:	4809      	ldr	r0, [pc, #36]	; (80162b8 <tcp_output_segment_busy+0x3c>)
 8016294:	f004 ff34 	bl	801b100 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8016298:	687b      	ldr	r3, [r7, #4]
 801629a:	685b      	ldr	r3, [r3, #4]
 801629c:	7b9b      	ldrb	r3, [r3, #14]
 801629e:	2b01      	cmp	r3, #1
 80162a0:	d001      	beq.n	80162a6 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80162a2:	2301      	movs	r3, #1
 80162a4:	e000      	b.n	80162a8 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80162a6:	2300      	movs	r3, #0
}
 80162a8:	4618      	mov	r0, r3
 80162aa:	3708      	adds	r7, #8
 80162ac:	46bd      	mov	sp, r7
 80162ae:	bd80      	pop	{r7, pc}
 80162b0:	0801f210 	.word	0x0801f210
 80162b4:	0801f7c8 	.word	0x0801f7c8
 80162b8:	0801f280 	.word	0x0801f280

080162bc <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80162bc:	b5b0      	push	{r4, r5, r7, lr}
 80162be:	b08c      	sub	sp, #48	; 0x30
 80162c0:	af04      	add	r7, sp, #16
 80162c2:	60f8      	str	r0, [r7, #12]
 80162c4:	60b9      	str	r1, [r7, #8]
 80162c6:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80162c8:	68fb      	ldr	r3, [r7, #12]
 80162ca:	2b00      	cmp	r3, #0
 80162cc:	d106      	bne.n	80162dc <tcp_output_segment+0x20>
 80162ce:	4b64      	ldr	r3, [pc, #400]	; (8016460 <tcp_output_segment+0x1a4>)
 80162d0:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 80162d4:	4963      	ldr	r1, [pc, #396]	; (8016464 <tcp_output_segment+0x1a8>)
 80162d6:	4864      	ldr	r0, [pc, #400]	; (8016468 <tcp_output_segment+0x1ac>)
 80162d8:	f004 ff12 	bl	801b100 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80162dc:	68bb      	ldr	r3, [r7, #8]
 80162de:	2b00      	cmp	r3, #0
 80162e0:	d106      	bne.n	80162f0 <tcp_output_segment+0x34>
 80162e2:	4b5f      	ldr	r3, [pc, #380]	; (8016460 <tcp_output_segment+0x1a4>)
 80162e4:	f240 52b9 	movw	r2, #1465	; 0x5b9
 80162e8:	4960      	ldr	r1, [pc, #384]	; (801646c <tcp_output_segment+0x1b0>)
 80162ea:	485f      	ldr	r0, [pc, #380]	; (8016468 <tcp_output_segment+0x1ac>)
 80162ec:	f004 ff08 	bl	801b100 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80162f0:	687b      	ldr	r3, [r7, #4]
 80162f2:	2b00      	cmp	r3, #0
 80162f4:	d106      	bne.n	8016304 <tcp_output_segment+0x48>
 80162f6:	4b5a      	ldr	r3, [pc, #360]	; (8016460 <tcp_output_segment+0x1a4>)
 80162f8:	f240 52ba 	movw	r2, #1466	; 0x5ba
 80162fc:	495c      	ldr	r1, [pc, #368]	; (8016470 <tcp_output_segment+0x1b4>)
 80162fe:	485a      	ldr	r0, [pc, #360]	; (8016468 <tcp_output_segment+0x1ac>)
 8016300:	f004 fefe 	bl	801b100 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8016304:	68f8      	ldr	r0, [r7, #12]
 8016306:	f7ff ffb9 	bl	801627c <tcp_output_segment_busy>
 801630a:	4603      	mov	r3, r0
 801630c:	2b00      	cmp	r3, #0
 801630e:	d001      	beq.n	8016314 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8016310:	2300      	movs	r3, #0
 8016312:	e0a0      	b.n	8016456 <tcp_output_segment+0x19a>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8016314:	68bb      	ldr	r3, [r7, #8]
 8016316:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016318:	68fb      	ldr	r3, [r7, #12]
 801631a:	68dc      	ldr	r4, [r3, #12]
 801631c:	4610      	mov	r0, r2
 801631e:	f7f7 f8b0 	bl	800d482 <lwip_htonl>
 8016322:	4603      	mov	r3, r0
 8016324:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8016326:	68bb      	ldr	r3, [r7, #8]
 8016328:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801632a:	68fb      	ldr	r3, [r7, #12]
 801632c:	68dc      	ldr	r4, [r3, #12]
 801632e:	4610      	mov	r0, r2
 8016330:	f7f7 f892 	bl	800d458 <lwip_htons>
 8016334:	4603      	mov	r3, r0
 8016336:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8016338:	68bb      	ldr	r3, [r7, #8]
 801633a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801633c:	68ba      	ldr	r2, [r7, #8]
 801633e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8016340:	441a      	add	r2, r3
 8016342:	68bb      	ldr	r3, [r7, #8]
 8016344:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8016346:	68fb      	ldr	r3, [r7, #12]
 8016348:	68db      	ldr	r3, [r3, #12]
 801634a:	3314      	adds	r3, #20
 801634c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801634e:	68fb      	ldr	r3, [r7, #12]
 8016350:	7a9b      	ldrb	r3, [r3, #10]
 8016352:	f003 0301 	and.w	r3, r3, #1
 8016356:	2b00      	cmp	r3, #0
 8016358:	d015      	beq.n	8016386 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801635a:	68bb      	ldr	r3, [r7, #8]
 801635c:	3304      	adds	r3, #4
 801635e:	461a      	mov	r2, r3
 8016360:	6879      	ldr	r1, [r7, #4]
 8016362:	f44f 7006 	mov.w	r0, #536	; 0x218
 8016366:	f7fc fe8d 	bl	8013084 <tcp_eff_send_mss_netif>
 801636a:	4603      	mov	r3, r0
 801636c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801636e:	8b7b      	ldrh	r3, [r7, #26]
 8016370:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8016374:	4618      	mov	r0, r3
 8016376:	f7f7 f884 	bl	800d482 <lwip_htonl>
 801637a:	4602      	mov	r2, r0
 801637c:	69fb      	ldr	r3, [r7, #28]
 801637e:	601a      	str	r2, [r3, #0]
    opts += 1;
 8016380:	69fb      	ldr	r3, [r7, #28]
 8016382:	3304      	adds	r3, #4
 8016384:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8016386:	68bb      	ldr	r3, [r7, #8]
 8016388:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801638c:	2b00      	cmp	r3, #0
 801638e:	da02      	bge.n	8016396 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8016390:	68bb      	ldr	r3, [r7, #8]
 8016392:	2200      	movs	r2, #0
 8016394:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8016396:	68bb      	ldr	r3, [r7, #8]
 8016398:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801639a:	2b00      	cmp	r3, #0
 801639c:	d10c      	bne.n	80163b8 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801639e:	4b35      	ldr	r3, [pc, #212]	; (8016474 <tcp_output_segment+0x1b8>)
 80163a0:	681a      	ldr	r2, [r3, #0]
 80163a2:	68bb      	ldr	r3, [r7, #8]
 80163a4:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80163a6:	68fb      	ldr	r3, [r7, #12]
 80163a8:	68db      	ldr	r3, [r3, #12]
 80163aa:	685b      	ldr	r3, [r3, #4]
 80163ac:	4618      	mov	r0, r3
 80163ae:	f7f7 f868 	bl	800d482 <lwip_htonl>
 80163b2:	4602      	mov	r2, r0
 80163b4:	68bb      	ldr	r3, [r7, #8]
 80163b6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80163b8:	68fb      	ldr	r3, [r7, #12]
 80163ba:	68db      	ldr	r3, [r3, #12]
 80163bc:	461a      	mov	r2, r3
 80163be:	68fb      	ldr	r3, [r7, #12]
 80163c0:	685b      	ldr	r3, [r3, #4]
 80163c2:	685b      	ldr	r3, [r3, #4]
 80163c4:	1ad3      	subs	r3, r2, r3
 80163c6:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80163c8:	68fb      	ldr	r3, [r7, #12]
 80163ca:	685b      	ldr	r3, [r3, #4]
 80163cc:	8959      	ldrh	r1, [r3, #10]
 80163ce:	68fb      	ldr	r3, [r7, #12]
 80163d0:	685b      	ldr	r3, [r3, #4]
 80163d2:	8b3a      	ldrh	r2, [r7, #24]
 80163d4:	1a8a      	subs	r2, r1, r2
 80163d6:	b292      	uxth	r2, r2
 80163d8:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80163da:	68fb      	ldr	r3, [r7, #12]
 80163dc:	685b      	ldr	r3, [r3, #4]
 80163de:	8919      	ldrh	r1, [r3, #8]
 80163e0:	68fb      	ldr	r3, [r7, #12]
 80163e2:	685b      	ldr	r3, [r3, #4]
 80163e4:	8b3a      	ldrh	r2, [r7, #24]
 80163e6:	1a8a      	subs	r2, r1, r2
 80163e8:	b292      	uxth	r2, r2
 80163ea:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80163ec:	68fb      	ldr	r3, [r7, #12]
 80163ee:	685b      	ldr	r3, [r3, #4]
 80163f0:	68fa      	ldr	r2, [r7, #12]
 80163f2:	68d2      	ldr	r2, [r2, #12]
 80163f4:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80163f6:	68fb      	ldr	r3, [r7, #12]
 80163f8:	68db      	ldr	r3, [r3, #12]
 80163fa:	2200      	movs	r2, #0
 80163fc:	741a      	strb	r2, [r3, #16]
 80163fe:	2200      	movs	r2, #0
 8016400:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8016402:	68fb      	ldr	r3, [r7, #12]
 8016404:	68db      	ldr	r3, [r3, #12]
 8016406:	f103 0214 	add.w	r2, r3, #20
 801640a:	68fb      	ldr	r3, [r7, #12]
 801640c:	7a9b      	ldrb	r3, [r3, #10]
 801640e:	009b      	lsls	r3, r3, #2
 8016410:	f003 0304 	and.w	r3, r3, #4
 8016414:	4413      	add	r3, r2
 8016416:	69fa      	ldr	r2, [r7, #28]
 8016418:	429a      	cmp	r2, r3
 801641a:	d006      	beq.n	801642a <tcp_output_segment+0x16e>
 801641c:	4b10      	ldr	r3, [pc, #64]	; (8016460 <tcp_output_segment+0x1a4>)
 801641e:	f240 621c 	movw	r2, #1564	; 0x61c
 8016422:	4915      	ldr	r1, [pc, #84]	; (8016478 <tcp_output_segment+0x1bc>)
 8016424:	4810      	ldr	r0, [pc, #64]	; (8016468 <tcp_output_segment+0x1ac>)
 8016426:	f004 fe6b 	bl	801b100 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801642a:	68fb      	ldr	r3, [r7, #12]
 801642c:	6858      	ldr	r0, [r3, #4]
 801642e:	68b9      	ldr	r1, [r7, #8]
 8016430:	68bb      	ldr	r3, [r7, #8]
 8016432:	1d1c      	adds	r4, r3, #4
 8016434:	68bb      	ldr	r3, [r7, #8]
 8016436:	7add      	ldrb	r5, [r3, #11]
 8016438:	68bb      	ldr	r3, [r7, #8]
 801643a:	7a9b      	ldrb	r3, [r3, #10]
 801643c:	687a      	ldr	r2, [r7, #4]
 801643e:	9202      	str	r2, [sp, #8]
 8016440:	2206      	movs	r2, #6
 8016442:	9201      	str	r2, [sp, #4]
 8016444:	9300      	str	r3, [sp, #0]
 8016446:	462b      	mov	r3, r5
 8016448:	4622      	mov	r2, r4
 801644a:	f7f8 fc99 	bl	800ed80 <ip4_output_if>
 801644e:	4603      	mov	r3, r0
 8016450:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8016452:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016456:	4618      	mov	r0, r3
 8016458:	3720      	adds	r7, #32
 801645a:	46bd      	mov	sp, r7
 801645c:	bdb0      	pop	{r4, r5, r7, pc}
 801645e:	bf00      	nop
 8016460:	0801f210 	.word	0x0801f210
 8016464:	0801f7f0 	.word	0x0801f7f0
 8016468:	0801f280 	.word	0x0801f280
 801646c:	0801f810 	.word	0x0801f810
 8016470:	0801f830 	.word	0x0801f830
 8016474:	2400ce6c 	.word	0x2400ce6c
 8016478:	0801f854 	.word	0x0801f854

0801647c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801647c:	b5b0      	push	{r4, r5, r7, lr}
 801647e:	b084      	sub	sp, #16
 8016480:	af00      	add	r7, sp, #0
 8016482:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8016484:	687b      	ldr	r3, [r7, #4]
 8016486:	2b00      	cmp	r3, #0
 8016488:	d106      	bne.n	8016498 <tcp_rexmit_rto_prepare+0x1c>
 801648a:	4b31      	ldr	r3, [pc, #196]	; (8016550 <tcp_rexmit_rto_prepare+0xd4>)
 801648c:	f240 6263 	movw	r2, #1635	; 0x663
 8016490:	4930      	ldr	r1, [pc, #192]	; (8016554 <tcp_rexmit_rto_prepare+0xd8>)
 8016492:	4831      	ldr	r0, [pc, #196]	; (8016558 <tcp_rexmit_rto_prepare+0xdc>)
 8016494:	f004 fe34 	bl	801b100 <iprintf>

  if (pcb->unacked == NULL) {
 8016498:	687b      	ldr	r3, [r7, #4]
 801649a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801649c:	2b00      	cmp	r3, #0
 801649e:	d102      	bne.n	80164a6 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80164a0:	f06f 0305 	mvn.w	r3, #5
 80164a4:	e050      	b.n	8016548 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80164a6:	687b      	ldr	r3, [r7, #4]
 80164a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80164aa:	60fb      	str	r3, [r7, #12]
 80164ac:	e00b      	b.n	80164c6 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80164ae:	68f8      	ldr	r0, [r7, #12]
 80164b0:	f7ff fee4 	bl	801627c <tcp_output_segment_busy>
 80164b4:	4603      	mov	r3, r0
 80164b6:	2b00      	cmp	r3, #0
 80164b8:	d002      	beq.n	80164c0 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80164ba:	f06f 0305 	mvn.w	r3, #5
 80164be:	e043      	b.n	8016548 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80164c0:	68fb      	ldr	r3, [r7, #12]
 80164c2:	681b      	ldr	r3, [r3, #0]
 80164c4:	60fb      	str	r3, [r7, #12]
 80164c6:	68fb      	ldr	r3, [r7, #12]
 80164c8:	681b      	ldr	r3, [r3, #0]
 80164ca:	2b00      	cmp	r3, #0
 80164cc:	d1ef      	bne.n	80164ae <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80164ce:	68f8      	ldr	r0, [r7, #12]
 80164d0:	f7ff fed4 	bl	801627c <tcp_output_segment_busy>
 80164d4:	4603      	mov	r3, r0
 80164d6:	2b00      	cmp	r3, #0
 80164d8:	d002      	beq.n	80164e0 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80164da:	f06f 0305 	mvn.w	r3, #5
 80164de:	e033      	b.n	8016548 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80164e0:	687b      	ldr	r3, [r7, #4]
 80164e2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80164e4:	68fb      	ldr	r3, [r7, #12]
 80164e6:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80164e8:	687b      	ldr	r3, [r7, #4]
 80164ea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80164ec:	687b      	ldr	r3, [r7, #4]
 80164ee:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80164f0:	687b      	ldr	r3, [r7, #4]
 80164f2:	2200      	movs	r2, #0
 80164f4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80164f6:	687b      	ldr	r3, [r7, #4]
 80164f8:	8b5b      	ldrh	r3, [r3, #26]
 80164fa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80164fe:	b29a      	uxth	r2, r3
 8016500:	687b      	ldr	r3, [r7, #4]
 8016502:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8016504:	68fb      	ldr	r3, [r7, #12]
 8016506:	68db      	ldr	r3, [r3, #12]
 8016508:	685b      	ldr	r3, [r3, #4]
 801650a:	4618      	mov	r0, r3
 801650c:	f7f6 ffb9 	bl	800d482 <lwip_htonl>
 8016510:	4604      	mov	r4, r0
 8016512:	68fb      	ldr	r3, [r7, #12]
 8016514:	891b      	ldrh	r3, [r3, #8]
 8016516:	461d      	mov	r5, r3
 8016518:	68fb      	ldr	r3, [r7, #12]
 801651a:	68db      	ldr	r3, [r3, #12]
 801651c:	899b      	ldrh	r3, [r3, #12]
 801651e:	b29b      	uxth	r3, r3
 8016520:	4618      	mov	r0, r3
 8016522:	f7f6 ff99 	bl	800d458 <lwip_htons>
 8016526:	4603      	mov	r3, r0
 8016528:	b2db      	uxtb	r3, r3
 801652a:	f003 0303 	and.w	r3, r3, #3
 801652e:	2b00      	cmp	r3, #0
 8016530:	d001      	beq.n	8016536 <tcp_rexmit_rto_prepare+0xba>
 8016532:	2301      	movs	r3, #1
 8016534:	e000      	b.n	8016538 <tcp_rexmit_rto_prepare+0xbc>
 8016536:	2300      	movs	r3, #0
 8016538:	442b      	add	r3, r5
 801653a:	18e2      	adds	r2, r4, r3
 801653c:	687b      	ldr	r3, [r7, #4]
 801653e:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8016540:	687b      	ldr	r3, [r7, #4]
 8016542:	2200      	movs	r2, #0
 8016544:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8016546:	2300      	movs	r3, #0
}
 8016548:	4618      	mov	r0, r3
 801654a:	3710      	adds	r7, #16
 801654c:	46bd      	mov	sp, r7
 801654e:	bdb0      	pop	{r4, r5, r7, pc}
 8016550:	0801f210 	.word	0x0801f210
 8016554:	0801f868 	.word	0x0801f868
 8016558:	0801f280 	.word	0x0801f280

0801655c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801655c:	b580      	push	{r7, lr}
 801655e:	b082      	sub	sp, #8
 8016560:	af00      	add	r7, sp, #0
 8016562:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8016564:	687b      	ldr	r3, [r7, #4]
 8016566:	2b00      	cmp	r3, #0
 8016568:	d106      	bne.n	8016578 <tcp_rexmit_rto_commit+0x1c>
 801656a:	4b0d      	ldr	r3, [pc, #52]	; (80165a0 <tcp_rexmit_rto_commit+0x44>)
 801656c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8016570:	490c      	ldr	r1, [pc, #48]	; (80165a4 <tcp_rexmit_rto_commit+0x48>)
 8016572:	480d      	ldr	r0, [pc, #52]	; (80165a8 <tcp_rexmit_rto_commit+0x4c>)
 8016574:	f004 fdc4 	bl	801b100 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8016578:	687b      	ldr	r3, [r7, #4]
 801657a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801657e:	2bff      	cmp	r3, #255	; 0xff
 8016580:	d007      	beq.n	8016592 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8016582:	687b      	ldr	r3, [r7, #4]
 8016584:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016588:	3301      	adds	r3, #1
 801658a:	b2da      	uxtb	r2, r3
 801658c:	687b      	ldr	r3, [r7, #4]
 801658e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8016592:	6878      	ldr	r0, [r7, #4]
 8016594:	f7ff fc7a 	bl	8015e8c <tcp_output>
}
 8016598:	bf00      	nop
 801659a:	3708      	adds	r7, #8
 801659c:	46bd      	mov	sp, r7
 801659e:	bd80      	pop	{r7, pc}
 80165a0:	0801f210 	.word	0x0801f210
 80165a4:	0801f88c 	.word	0x0801f88c
 80165a8:	0801f280 	.word	0x0801f280

080165ac <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80165ac:	b580      	push	{r7, lr}
 80165ae:	b082      	sub	sp, #8
 80165b0:	af00      	add	r7, sp, #0
 80165b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80165b4:	687b      	ldr	r3, [r7, #4]
 80165b6:	2b00      	cmp	r3, #0
 80165b8:	d106      	bne.n	80165c8 <tcp_rexmit_rto+0x1c>
 80165ba:	4b0a      	ldr	r3, [pc, #40]	; (80165e4 <tcp_rexmit_rto+0x38>)
 80165bc:	f240 62ad 	movw	r2, #1709	; 0x6ad
 80165c0:	4909      	ldr	r1, [pc, #36]	; (80165e8 <tcp_rexmit_rto+0x3c>)
 80165c2:	480a      	ldr	r0, [pc, #40]	; (80165ec <tcp_rexmit_rto+0x40>)
 80165c4:	f004 fd9c 	bl	801b100 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80165c8:	6878      	ldr	r0, [r7, #4]
 80165ca:	f7ff ff57 	bl	801647c <tcp_rexmit_rto_prepare>
 80165ce:	4603      	mov	r3, r0
 80165d0:	2b00      	cmp	r3, #0
 80165d2:	d102      	bne.n	80165da <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80165d4:	6878      	ldr	r0, [r7, #4]
 80165d6:	f7ff ffc1 	bl	801655c <tcp_rexmit_rto_commit>
  }
}
 80165da:	bf00      	nop
 80165dc:	3708      	adds	r7, #8
 80165de:	46bd      	mov	sp, r7
 80165e0:	bd80      	pop	{r7, pc}
 80165e2:	bf00      	nop
 80165e4:	0801f210 	.word	0x0801f210
 80165e8:	0801f8b0 	.word	0x0801f8b0
 80165ec:	0801f280 	.word	0x0801f280

080165f0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80165f0:	b590      	push	{r4, r7, lr}
 80165f2:	b085      	sub	sp, #20
 80165f4:	af00      	add	r7, sp, #0
 80165f6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80165f8:	687b      	ldr	r3, [r7, #4]
 80165fa:	2b00      	cmp	r3, #0
 80165fc:	d106      	bne.n	801660c <tcp_rexmit+0x1c>
 80165fe:	4b2f      	ldr	r3, [pc, #188]	; (80166bc <tcp_rexmit+0xcc>)
 8016600:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8016604:	492e      	ldr	r1, [pc, #184]	; (80166c0 <tcp_rexmit+0xd0>)
 8016606:	482f      	ldr	r0, [pc, #188]	; (80166c4 <tcp_rexmit+0xd4>)
 8016608:	f004 fd7a 	bl	801b100 <iprintf>

  if (pcb->unacked == NULL) {
 801660c:	687b      	ldr	r3, [r7, #4]
 801660e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016610:	2b00      	cmp	r3, #0
 8016612:	d102      	bne.n	801661a <tcp_rexmit+0x2a>
    return ERR_VAL;
 8016614:	f06f 0305 	mvn.w	r3, #5
 8016618:	e04c      	b.n	80166b4 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801661a:	687b      	ldr	r3, [r7, #4]
 801661c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801661e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8016620:	68b8      	ldr	r0, [r7, #8]
 8016622:	f7ff fe2b 	bl	801627c <tcp_output_segment_busy>
 8016626:	4603      	mov	r3, r0
 8016628:	2b00      	cmp	r3, #0
 801662a:	d002      	beq.n	8016632 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801662c:	f06f 0305 	mvn.w	r3, #5
 8016630:	e040      	b.n	80166b4 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8016632:	68bb      	ldr	r3, [r7, #8]
 8016634:	681a      	ldr	r2, [r3, #0]
 8016636:	687b      	ldr	r3, [r7, #4]
 8016638:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801663a:	687b      	ldr	r3, [r7, #4]
 801663c:	336c      	adds	r3, #108	; 0x6c
 801663e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8016640:	e002      	b.n	8016648 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8016642:	68fb      	ldr	r3, [r7, #12]
 8016644:	681b      	ldr	r3, [r3, #0]
 8016646:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8016648:	68fb      	ldr	r3, [r7, #12]
 801664a:	681b      	ldr	r3, [r3, #0]
 801664c:	2b00      	cmp	r3, #0
 801664e:	d011      	beq.n	8016674 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8016650:	68fb      	ldr	r3, [r7, #12]
 8016652:	681b      	ldr	r3, [r3, #0]
 8016654:	68db      	ldr	r3, [r3, #12]
 8016656:	685b      	ldr	r3, [r3, #4]
 8016658:	4618      	mov	r0, r3
 801665a:	f7f6 ff12 	bl	800d482 <lwip_htonl>
 801665e:	4604      	mov	r4, r0
 8016660:	68bb      	ldr	r3, [r7, #8]
 8016662:	68db      	ldr	r3, [r3, #12]
 8016664:	685b      	ldr	r3, [r3, #4]
 8016666:	4618      	mov	r0, r3
 8016668:	f7f6 ff0b 	bl	800d482 <lwip_htonl>
 801666c:	4603      	mov	r3, r0
 801666e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8016670:	2b00      	cmp	r3, #0
 8016672:	dbe6      	blt.n	8016642 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8016674:	68fb      	ldr	r3, [r7, #12]
 8016676:	681a      	ldr	r2, [r3, #0]
 8016678:	68bb      	ldr	r3, [r7, #8]
 801667a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801667c:	68fb      	ldr	r3, [r7, #12]
 801667e:	68ba      	ldr	r2, [r7, #8]
 8016680:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8016682:	68bb      	ldr	r3, [r7, #8]
 8016684:	681b      	ldr	r3, [r3, #0]
 8016686:	2b00      	cmp	r3, #0
 8016688:	d103      	bne.n	8016692 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801668a:	687b      	ldr	r3, [r7, #4]
 801668c:	2200      	movs	r2, #0
 801668e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8016692:	687b      	ldr	r3, [r7, #4]
 8016694:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016698:	2bff      	cmp	r3, #255	; 0xff
 801669a:	d007      	beq.n	80166ac <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801669c:	687b      	ldr	r3, [r7, #4]
 801669e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80166a2:	3301      	adds	r3, #1
 80166a4:	b2da      	uxtb	r2, r3
 80166a6:	687b      	ldr	r3, [r7, #4]
 80166a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80166ac:	687b      	ldr	r3, [r7, #4]
 80166ae:	2200      	movs	r2, #0
 80166b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80166b2:	2300      	movs	r3, #0
}
 80166b4:	4618      	mov	r0, r3
 80166b6:	3714      	adds	r7, #20
 80166b8:	46bd      	mov	sp, r7
 80166ba:	bd90      	pop	{r4, r7, pc}
 80166bc:	0801f210 	.word	0x0801f210
 80166c0:	0801f8cc 	.word	0x0801f8cc
 80166c4:	0801f280 	.word	0x0801f280

080166c8 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80166c8:	b580      	push	{r7, lr}
 80166ca:	b082      	sub	sp, #8
 80166cc:	af00      	add	r7, sp, #0
 80166ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80166d0:	687b      	ldr	r3, [r7, #4]
 80166d2:	2b00      	cmp	r3, #0
 80166d4:	d106      	bne.n	80166e4 <tcp_rexmit_fast+0x1c>
 80166d6:	4b2f      	ldr	r3, [pc, #188]	; (8016794 <tcp_rexmit_fast+0xcc>)
 80166d8:	f240 62f9 	movw	r2, #1785	; 0x6f9
 80166dc:	492e      	ldr	r1, [pc, #184]	; (8016798 <tcp_rexmit_fast+0xd0>)
 80166de:	482f      	ldr	r0, [pc, #188]	; (801679c <tcp_rexmit_fast+0xd4>)
 80166e0:	f004 fd0e 	bl	801b100 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80166e4:	687b      	ldr	r3, [r7, #4]
 80166e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80166e8:	2b00      	cmp	r3, #0
 80166ea:	d04f      	beq.n	801678c <tcp_rexmit_fast+0xc4>
 80166ec:	687b      	ldr	r3, [r7, #4]
 80166ee:	8b5b      	ldrh	r3, [r3, #26]
 80166f0:	f003 0304 	and.w	r3, r3, #4
 80166f4:	2b00      	cmp	r3, #0
 80166f6:	d149      	bne.n	801678c <tcp_rexmit_fast+0xc4>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80166f8:	6878      	ldr	r0, [r7, #4]
 80166fa:	f7ff ff79 	bl	80165f0 <tcp_rexmit>
 80166fe:	4603      	mov	r3, r0
 8016700:	2b00      	cmp	r3, #0
 8016702:	d143      	bne.n	801678c <tcp_rexmit_fast+0xc4>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8016704:	687b      	ldr	r3, [r7, #4]
 8016706:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801670a:	687b      	ldr	r3, [r7, #4]
 801670c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016710:	429a      	cmp	r2, r3
 8016712:	d208      	bcs.n	8016726 <tcp_rexmit_fast+0x5e>
 8016714:	687b      	ldr	r3, [r7, #4]
 8016716:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801671a:	2b00      	cmp	r3, #0
 801671c:	da00      	bge.n	8016720 <tcp_rexmit_fast+0x58>
 801671e:	3301      	adds	r3, #1
 8016720:	105b      	asrs	r3, r3, #1
 8016722:	b29b      	uxth	r3, r3
 8016724:	e007      	b.n	8016736 <tcp_rexmit_fast+0x6e>
 8016726:	687b      	ldr	r3, [r7, #4]
 8016728:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801672c:	2b00      	cmp	r3, #0
 801672e:	da00      	bge.n	8016732 <tcp_rexmit_fast+0x6a>
 8016730:	3301      	adds	r3, #1
 8016732:	105b      	asrs	r3, r3, #1
 8016734:	b29b      	uxth	r3, r3
 8016736:	687a      	ldr	r2, [r7, #4]
 8016738:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801673c:	687b      	ldr	r3, [r7, #4]
 801673e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8016742:	461a      	mov	r2, r3
 8016744:	687b      	ldr	r3, [r7, #4]
 8016746:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016748:	005b      	lsls	r3, r3, #1
 801674a:	429a      	cmp	r2, r3
 801674c:	d206      	bcs.n	801675c <tcp_rexmit_fast+0x94>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801674e:	687b      	ldr	r3, [r7, #4]
 8016750:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016752:	005b      	lsls	r3, r3, #1
 8016754:	b29a      	uxth	r2, r3
 8016756:	687b      	ldr	r3, [r7, #4]
 8016758:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801675c:	687b      	ldr	r3, [r7, #4]
 801675e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8016762:	687b      	ldr	r3, [r7, #4]
 8016764:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016766:	4619      	mov	r1, r3
 8016768:	0049      	lsls	r1, r1, #1
 801676a:	440b      	add	r3, r1
 801676c:	b29b      	uxth	r3, r3
 801676e:	4413      	add	r3, r2
 8016770:	b29a      	uxth	r2, r3
 8016772:	687b      	ldr	r3, [r7, #4]
 8016774:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8016778:	687b      	ldr	r3, [r7, #4]
 801677a:	8b5b      	ldrh	r3, [r3, #26]
 801677c:	f043 0304 	orr.w	r3, r3, #4
 8016780:	b29a      	uxth	r2, r3
 8016782:	687b      	ldr	r3, [r7, #4]
 8016784:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8016786:	687b      	ldr	r3, [r7, #4]
 8016788:	2200      	movs	r2, #0
 801678a:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801678c:	bf00      	nop
 801678e:	3708      	adds	r7, #8
 8016790:	46bd      	mov	sp, r7
 8016792:	bd80      	pop	{r7, pc}
 8016794:	0801f210 	.word	0x0801f210
 8016798:	0801f8e4 	.word	0x0801f8e4
 801679c:	0801f280 	.word	0x0801f280

080167a0 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80167a0:	b580      	push	{r7, lr}
 80167a2:	b086      	sub	sp, #24
 80167a4:	af00      	add	r7, sp, #0
 80167a6:	60f8      	str	r0, [r7, #12]
 80167a8:	607b      	str	r3, [r7, #4]
 80167aa:	460b      	mov	r3, r1
 80167ac:	817b      	strh	r3, [r7, #10]
 80167ae:	4613      	mov	r3, r2
 80167b0:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80167b2:	897a      	ldrh	r2, [r7, #10]
 80167b4:	893b      	ldrh	r3, [r7, #8]
 80167b6:	4413      	add	r3, r2
 80167b8:	b29b      	uxth	r3, r3
 80167ba:	3314      	adds	r3, #20
 80167bc:	b29b      	uxth	r3, r3
 80167be:	f44f 7220 	mov.w	r2, #640	; 0x280
 80167c2:	4619      	mov	r1, r3
 80167c4:	2022      	movs	r0, #34	; 0x22
 80167c6:	f7fa fafd 	bl	8010dc4 <pbuf_alloc>
 80167ca:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80167cc:	697b      	ldr	r3, [r7, #20]
 80167ce:	2b00      	cmp	r3, #0
 80167d0:	d04e      	beq.n	8016870 <tcp_output_alloc_header_common+0xd0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80167d2:	697b      	ldr	r3, [r7, #20]
 80167d4:	895b      	ldrh	r3, [r3, #10]
 80167d6:	461a      	mov	r2, r3
 80167d8:	897b      	ldrh	r3, [r7, #10]
 80167da:	3314      	adds	r3, #20
 80167dc:	429a      	cmp	r2, r3
 80167de:	da06      	bge.n	80167ee <tcp_output_alloc_header_common+0x4e>
 80167e0:	4b26      	ldr	r3, [pc, #152]	; (801687c <tcp_output_alloc_header_common+0xdc>)
 80167e2:	f240 7224 	movw	r2, #1828	; 0x724
 80167e6:	4926      	ldr	r1, [pc, #152]	; (8016880 <tcp_output_alloc_header_common+0xe0>)
 80167e8:	4826      	ldr	r0, [pc, #152]	; (8016884 <tcp_output_alloc_header_common+0xe4>)
 80167ea:	f004 fc89 	bl	801b100 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80167ee:	697b      	ldr	r3, [r7, #20]
 80167f0:	685b      	ldr	r3, [r3, #4]
 80167f2:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80167f4:	8c3b      	ldrh	r3, [r7, #32]
 80167f6:	4618      	mov	r0, r3
 80167f8:	f7f6 fe2e 	bl	800d458 <lwip_htons>
 80167fc:	4603      	mov	r3, r0
 80167fe:	461a      	mov	r2, r3
 8016800:	693b      	ldr	r3, [r7, #16]
 8016802:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8016804:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016806:	4618      	mov	r0, r3
 8016808:	f7f6 fe26 	bl	800d458 <lwip_htons>
 801680c:	4603      	mov	r3, r0
 801680e:	461a      	mov	r2, r3
 8016810:	693b      	ldr	r3, [r7, #16]
 8016812:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8016814:	693b      	ldr	r3, [r7, #16]
 8016816:	687a      	ldr	r2, [r7, #4]
 8016818:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801681a:	68f8      	ldr	r0, [r7, #12]
 801681c:	f7f6 fe31 	bl	800d482 <lwip_htonl>
 8016820:	4602      	mov	r2, r0
 8016822:	693b      	ldr	r3, [r7, #16]
 8016824:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8016826:	897b      	ldrh	r3, [r7, #10]
 8016828:	089b      	lsrs	r3, r3, #2
 801682a:	b29b      	uxth	r3, r3
 801682c:	3305      	adds	r3, #5
 801682e:	b29b      	uxth	r3, r3
 8016830:	031b      	lsls	r3, r3, #12
 8016832:	b29a      	uxth	r2, r3
 8016834:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8016838:	b29b      	uxth	r3, r3
 801683a:	4313      	orrs	r3, r2
 801683c:	b29b      	uxth	r3, r3
 801683e:	4618      	mov	r0, r3
 8016840:	f7f6 fe0a 	bl	800d458 <lwip_htons>
 8016844:	4603      	mov	r3, r0
 8016846:	461a      	mov	r2, r3
 8016848:	693b      	ldr	r3, [r7, #16]
 801684a:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801684c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801684e:	4618      	mov	r0, r3
 8016850:	f7f6 fe02 	bl	800d458 <lwip_htons>
 8016854:	4603      	mov	r3, r0
 8016856:	461a      	mov	r2, r3
 8016858:	693b      	ldr	r3, [r7, #16]
 801685a:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801685c:	693b      	ldr	r3, [r7, #16]
 801685e:	2200      	movs	r2, #0
 8016860:	741a      	strb	r2, [r3, #16]
 8016862:	2200      	movs	r2, #0
 8016864:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8016866:	693b      	ldr	r3, [r7, #16]
 8016868:	2200      	movs	r2, #0
 801686a:	749a      	strb	r2, [r3, #18]
 801686c:	2200      	movs	r2, #0
 801686e:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8016870:	697b      	ldr	r3, [r7, #20]
}
 8016872:	4618      	mov	r0, r3
 8016874:	3718      	adds	r7, #24
 8016876:	46bd      	mov	sp, r7
 8016878:	bd80      	pop	{r7, pc}
 801687a:	bf00      	nop
 801687c:	0801f210 	.word	0x0801f210
 8016880:	0801f904 	.word	0x0801f904
 8016884:	0801f280 	.word	0x0801f280

08016888 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8016888:	b5b0      	push	{r4, r5, r7, lr}
 801688a:	b08a      	sub	sp, #40	; 0x28
 801688c:	af04      	add	r7, sp, #16
 801688e:	60f8      	str	r0, [r7, #12]
 8016890:	607b      	str	r3, [r7, #4]
 8016892:	460b      	mov	r3, r1
 8016894:	817b      	strh	r3, [r7, #10]
 8016896:	4613      	mov	r3, r2
 8016898:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801689a:	68fb      	ldr	r3, [r7, #12]
 801689c:	2b00      	cmp	r3, #0
 801689e:	d106      	bne.n	80168ae <tcp_output_alloc_header+0x26>
 80168a0:	4b15      	ldr	r3, [pc, #84]	; (80168f8 <tcp_output_alloc_header+0x70>)
 80168a2:	f240 7242 	movw	r2, #1858	; 0x742
 80168a6:	4915      	ldr	r1, [pc, #84]	; (80168fc <tcp_output_alloc_header+0x74>)
 80168a8:	4815      	ldr	r0, [pc, #84]	; (8016900 <tcp_output_alloc_header+0x78>)
 80168aa:	f004 fc29 	bl	801b100 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80168ae:	68fb      	ldr	r3, [r7, #12]
 80168b0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80168b2:	68fb      	ldr	r3, [r7, #12]
 80168b4:	8adb      	ldrh	r3, [r3, #22]
 80168b6:	68fa      	ldr	r2, [r7, #12]
 80168b8:	8b12      	ldrh	r2, [r2, #24]
 80168ba:	68f9      	ldr	r1, [r7, #12]
 80168bc:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 80168be:	893d      	ldrh	r5, [r7, #8]
 80168c0:	897c      	ldrh	r4, [r7, #10]
 80168c2:	9103      	str	r1, [sp, #12]
 80168c4:	2110      	movs	r1, #16
 80168c6:	9102      	str	r1, [sp, #8]
 80168c8:	9201      	str	r2, [sp, #4]
 80168ca:	9300      	str	r3, [sp, #0]
 80168cc:	687b      	ldr	r3, [r7, #4]
 80168ce:	462a      	mov	r2, r5
 80168d0:	4621      	mov	r1, r4
 80168d2:	f7ff ff65 	bl	80167a0 <tcp_output_alloc_header_common>
 80168d6:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80168d8:	697b      	ldr	r3, [r7, #20]
 80168da:	2b00      	cmp	r3, #0
 80168dc:	d006      	beq.n	80168ec <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80168de:	68fb      	ldr	r3, [r7, #12]
 80168e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80168e2:	68fa      	ldr	r2, [r7, #12]
 80168e4:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80168e6:	441a      	add	r2, r3
 80168e8:	68fb      	ldr	r3, [r7, #12]
 80168ea:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 80168ec:	697b      	ldr	r3, [r7, #20]
}
 80168ee:	4618      	mov	r0, r3
 80168f0:	3718      	adds	r7, #24
 80168f2:	46bd      	mov	sp, r7
 80168f4:	bdb0      	pop	{r4, r5, r7, pc}
 80168f6:	bf00      	nop
 80168f8:	0801f210 	.word	0x0801f210
 80168fc:	0801f934 	.word	0x0801f934
 8016900:	0801f280 	.word	0x0801f280

08016904 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8016904:	b580      	push	{r7, lr}
 8016906:	b088      	sub	sp, #32
 8016908:	af00      	add	r7, sp, #0
 801690a:	60f8      	str	r0, [r7, #12]
 801690c:	60b9      	str	r1, [r7, #8]
 801690e:	4611      	mov	r1, r2
 8016910:	461a      	mov	r2, r3
 8016912:	460b      	mov	r3, r1
 8016914:	71fb      	strb	r3, [r7, #7]
 8016916:	4613      	mov	r3, r2
 8016918:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801691a:	2300      	movs	r3, #0
 801691c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801691e:	68bb      	ldr	r3, [r7, #8]
 8016920:	2b00      	cmp	r3, #0
 8016922:	d106      	bne.n	8016932 <tcp_output_fill_options+0x2e>
 8016924:	4b13      	ldr	r3, [pc, #76]	; (8016974 <tcp_output_fill_options+0x70>)
 8016926:	f240 7256 	movw	r2, #1878	; 0x756
 801692a:	4913      	ldr	r1, [pc, #76]	; (8016978 <tcp_output_fill_options+0x74>)
 801692c:	4813      	ldr	r0, [pc, #76]	; (801697c <tcp_output_fill_options+0x78>)
 801692e:	f004 fbe7 	bl	801b100 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8016932:	68bb      	ldr	r3, [r7, #8]
 8016934:	685b      	ldr	r3, [r3, #4]
 8016936:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8016938:	69bb      	ldr	r3, [r7, #24]
 801693a:	3314      	adds	r3, #20
 801693c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801693e:	69bb      	ldr	r3, [r7, #24]
 8016940:	f103 0214 	add.w	r2, r3, #20
 8016944:	8bfb      	ldrh	r3, [r7, #30]
 8016946:	009b      	lsls	r3, r3, #2
 8016948:	4619      	mov	r1, r3
 801694a:	79fb      	ldrb	r3, [r7, #7]
 801694c:	009b      	lsls	r3, r3, #2
 801694e:	f003 0304 	and.w	r3, r3, #4
 8016952:	440b      	add	r3, r1
 8016954:	4413      	add	r3, r2
 8016956:	697a      	ldr	r2, [r7, #20]
 8016958:	429a      	cmp	r2, r3
 801695a:	d006      	beq.n	801696a <tcp_output_fill_options+0x66>
 801695c:	4b05      	ldr	r3, [pc, #20]	; (8016974 <tcp_output_fill_options+0x70>)
 801695e:	f240 7275 	movw	r2, #1909	; 0x775
 8016962:	4907      	ldr	r1, [pc, #28]	; (8016980 <tcp_output_fill_options+0x7c>)
 8016964:	4805      	ldr	r0, [pc, #20]	; (801697c <tcp_output_fill_options+0x78>)
 8016966:	f004 fbcb 	bl	801b100 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801696a:	bf00      	nop
 801696c:	3720      	adds	r7, #32
 801696e:	46bd      	mov	sp, r7
 8016970:	bd80      	pop	{r7, pc}
 8016972:	bf00      	nop
 8016974:	0801f210 	.word	0x0801f210
 8016978:	0801f95c 	.word	0x0801f95c
 801697c:	0801f280 	.word	0x0801f280
 8016980:	0801f854 	.word	0x0801f854

08016984 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8016984:	b580      	push	{r7, lr}
 8016986:	b08a      	sub	sp, #40	; 0x28
 8016988:	af04      	add	r7, sp, #16
 801698a:	60f8      	str	r0, [r7, #12]
 801698c:	60b9      	str	r1, [r7, #8]
 801698e:	607a      	str	r2, [r7, #4]
 8016990:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8016992:	68bb      	ldr	r3, [r7, #8]
 8016994:	2b00      	cmp	r3, #0
 8016996:	d106      	bne.n	80169a6 <tcp_output_control_segment+0x22>
 8016998:	4b1c      	ldr	r3, [pc, #112]	; (8016a0c <tcp_output_control_segment+0x88>)
 801699a:	f240 7287 	movw	r2, #1927	; 0x787
 801699e:	491c      	ldr	r1, [pc, #112]	; (8016a10 <tcp_output_control_segment+0x8c>)
 80169a0:	481c      	ldr	r0, [pc, #112]	; (8016a14 <tcp_output_control_segment+0x90>)
 80169a2:	f004 fbad 	bl	801b100 <iprintf>

  netif = tcp_route(pcb, src, dst);
 80169a6:	683a      	ldr	r2, [r7, #0]
 80169a8:	6879      	ldr	r1, [r7, #4]
 80169aa:	68f8      	ldr	r0, [r7, #12]
 80169ac:	f7fe ff2e 	bl	801580c <tcp_route>
 80169b0:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80169b2:	693b      	ldr	r3, [r7, #16]
 80169b4:	2b00      	cmp	r3, #0
 80169b6:	d102      	bne.n	80169be <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80169b8:	23fc      	movs	r3, #252	; 0xfc
 80169ba:	75fb      	strb	r3, [r7, #23]
 80169bc:	e01c      	b.n	80169f8 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80169be:	68fb      	ldr	r3, [r7, #12]
 80169c0:	2b00      	cmp	r3, #0
 80169c2:	d006      	beq.n	80169d2 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80169c4:	68fb      	ldr	r3, [r7, #12]
 80169c6:	7adb      	ldrb	r3, [r3, #11]
 80169c8:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80169ca:	68fb      	ldr	r3, [r7, #12]
 80169cc:	7a9b      	ldrb	r3, [r3, #10]
 80169ce:	757b      	strb	r3, [r7, #21]
 80169d0:	e003      	b.n	80169da <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80169d2:	23ff      	movs	r3, #255	; 0xff
 80169d4:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80169d6:	2300      	movs	r3, #0
 80169d8:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80169da:	7dba      	ldrb	r2, [r7, #22]
 80169dc:	693b      	ldr	r3, [r7, #16]
 80169de:	9302      	str	r3, [sp, #8]
 80169e0:	2306      	movs	r3, #6
 80169e2:	9301      	str	r3, [sp, #4]
 80169e4:	7d7b      	ldrb	r3, [r7, #21]
 80169e6:	9300      	str	r3, [sp, #0]
 80169e8:	4613      	mov	r3, r2
 80169ea:	683a      	ldr	r2, [r7, #0]
 80169ec:	6879      	ldr	r1, [r7, #4]
 80169ee:	68b8      	ldr	r0, [r7, #8]
 80169f0:	f7f8 f9c6 	bl	800ed80 <ip4_output_if>
 80169f4:	4603      	mov	r3, r0
 80169f6:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80169f8:	68b8      	ldr	r0, [r7, #8]
 80169fa:	f7fa fcc3 	bl	8011384 <pbuf_free>
  return err;
 80169fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016a02:	4618      	mov	r0, r3
 8016a04:	3718      	adds	r7, #24
 8016a06:	46bd      	mov	sp, r7
 8016a08:	bd80      	pop	{r7, pc}
 8016a0a:	bf00      	nop
 8016a0c:	0801f210 	.word	0x0801f210
 8016a10:	0801f984 	.word	0x0801f984
 8016a14:	0801f280 	.word	0x0801f280

08016a18 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8016a18:	b590      	push	{r4, r7, lr}
 8016a1a:	b08b      	sub	sp, #44	; 0x2c
 8016a1c:	af04      	add	r7, sp, #16
 8016a1e:	60f8      	str	r0, [r7, #12]
 8016a20:	60b9      	str	r1, [r7, #8]
 8016a22:	607a      	str	r2, [r7, #4]
 8016a24:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8016a26:	683b      	ldr	r3, [r7, #0]
 8016a28:	2b00      	cmp	r3, #0
 8016a2a:	d106      	bne.n	8016a3a <tcp_rst+0x22>
 8016a2c:	4b1f      	ldr	r3, [pc, #124]	; (8016aac <tcp_rst+0x94>)
 8016a2e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8016a32:	491f      	ldr	r1, [pc, #124]	; (8016ab0 <tcp_rst+0x98>)
 8016a34:	481f      	ldr	r0, [pc, #124]	; (8016ab4 <tcp_rst+0x9c>)
 8016a36:	f004 fb63 	bl	801b100 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8016a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a3c:	2b00      	cmp	r3, #0
 8016a3e:	d106      	bne.n	8016a4e <tcp_rst+0x36>
 8016a40:	4b1a      	ldr	r3, [pc, #104]	; (8016aac <tcp_rst+0x94>)
 8016a42:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8016a46:	491c      	ldr	r1, [pc, #112]	; (8016ab8 <tcp_rst+0xa0>)
 8016a48:	481a      	ldr	r0, [pc, #104]	; (8016ab4 <tcp_rst+0x9c>)
 8016a4a:	f004 fb59 	bl	801b100 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8016a4e:	2300      	movs	r3, #0
 8016a50:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8016a52:	f246 0308 	movw	r3, #24584	; 0x6008
 8016a56:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8016a58:	7dfb      	ldrb	r3, [r7, #23]
 8016a5a:	b29c      	uxth	r4, r3
 8016a5c:	68b8      	ldr	r0, [r7, #8]
 8016a5e:	f7f6 fd10 	bl	800d482 <lwip_htonl>
 8016a62:	4602      	mov	r2, r0
 8016a64:	8abb      	ldrh	r3, [r7, #20]
 8016a66:	9303      	str	r3, [sp, #12]
 8016a68:	2314      	movs	r3, #20
 8016a6a:	9302      	str	r3, [sp, #8]
 8016a6c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8016a6e:	9301      	str	r3, [sp, #4]
 8016a70:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8016a72:	9300      	str	r3, [sp, #0]
 8016a74:	4613      	mov	r3, r2
 8016a76:	2200      	movs	r2, #0
 8016a78:	4621      	mov	r1, r4
 8016a7a:	6878      	ldr	r0, [r7, #4]
 8016a7c:	f7ff fe90 	bl	80167a0 <tcp_output_alloc_header_common>
 8016a80:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8016a82:	693b      	ldr	r3, [r7, #16]
 8016a84:	2b00      	cmp	r3, #0
 8016a86:	d00c      	beq.n	8016aa2 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8016a88:	7dfb      	ldrb	r3, [r7, #23]
 8016a8a:	2200      	movs	r2, #0
 8016a8c:	6939      	ldr	r1, [r7, #16]
 8016a8e:	68f8      	ldr	r0, [r7, #12]
 8016a90:	f7ff ff38 	bl	8016904 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8016a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a96:	683a      	ldr	r2, [r7, #0]
 8016a98:	6939      	ldr	r1, [r7, #16]
 8016a9a:	68f8      	ldr	r0, [r7, #12]
 8016a9c:	f7ff ff72 	bl	8016984 <tcp_output_control_segment>
 8016aa0:	e000      	b.n	8016aa4 <tcp_rst+0x8c>
    return;
 8016aa2:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8016aa4:	371c      	adds	r7, #28
 8016aa6:	46bd      	mov	sp, r7
 8016aa8:	bd90      	pop	{r4, r7, pc}
 8016aaa:	bf00      	nop
 8016aac:	0801f210 	.word	0x0801f210
 8016ab0:	0801f9b0 	.word	0x0801f9b0
 8016ab4:	0801f280 	.word	0x0801f280
 8016ab8:	0801f9cc 	.word	0x0801f9cc

08016abc <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8016abc:	b590      	push	{r4, r7, lr}
 8016abe:	b087      	sub	sp, #28
 8016ac0:	af00      	add	r7, sp, #0
 8016ac2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8016ac4:	2300      	movs	r3, #0
 8016ac6:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8016ac8:	2300      	movs	r3, #0
 8016aca:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8016acc:	687b      	ldr	r3, [r7, #4]
 8016ace:	2b00      	cmp	r3, #0
 8016ad0:	d106      	bne.n	8016ae0 <tcp_send_empty_ack+0x24>
 8016ad2:	4b28      	ldr	r3, [pc, #160]	; (8016b74 <tcp_send_empty_ack+0xb8>)
 8016ad4:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8016ad8:	4927      	ldr	r1, [pc, #156]	; (8016b78 <tcp_send_empty_ack+0xbc>)
 8016ada:	4828      	ldr	r0, [pc, #160]	; (8016b7c <tcp_send_empty_ack+0xc0>)
 8016adc:	f004 fb10 	bl	801b100 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8016ae0:	7dfb      	ldrb	r3, [r7, #23]
 8016ae2:	009b      	lsls	r3, r3, #2
 8016ae4:	b2db      	uxtb	r3, r3
 8016ae6:	f003 0304 	and.w	r3, r3, #4
 8016aea:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8016aec:	7d7b      	ldrb	r3, [r7, #21]
 8016aee:	b29c      	uxth	r4, r3
 8016af0:	687b      	ldr	r3, [r7, #4]
 8016af2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016af4:	4618      	mov	r0, r3
 8016af6:	f7f6 fcc4 	bl	800d482 <lwip_htonl>
 8016afa:	4603      	mov	r3, r0
 8016afc:	2200      	movs	r2, #0
 8016afe:	4621      	mov	r1, r4
 8016b00:	6878      	ldr	r0, [r7, #4]
 8016b02:	f7ff fec1 	bl	8016888 <tcp_output_alloc_header>
 8016b06:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8016b08:	693b      	ldr	r3, [r7, #16]
 8016b0a:	2b00      	cmp	r3, #0
 8016b0c:	d109      	bne.n	8016b22 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8016b0e:	687b      	ldr	r3, [r7, #4]
 8016b10:	8b5b      	ldrh	r3, [r3, #26]
 8016b12:	f043 0303 	orr.w	r3, r3, #3
 8016b16:	b29a      	uxth	r2, r3
 8016b18:	687b      	ldr	r3, [r7, #4]
 8016b1a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8016b1c:	f06f 0301 	mvn.w	r3, #1
 8016b20:	e023      	b.n	8016b6a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8016b22:	7dbb      	ldrb	r3, [r7, #22]
 8016b24:	7dfa      	ldrb	r2, [r7, #23]
 8016b26:	6939      	ldr	r1, [r7, #16]
 8016b28:	6878      	ldr	r0, [r7, #4]
 8016b2a:	f7ff feeb 	bl	8016904 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8016b2e:	687a      	ldr	r2, [r7, #4]
 8016b30:	687b      	ldr	r3, [r7, #4]
 8016b32:	3304      	adds	r3, #4
 8016b34:	6939      	ldr	r1, [r7, #16]
 8016b36:	6878      	ldr	r0, [r7, #4]
 8016b38:	f7ff ff24 	bl	8016984 <tcp_output_control_segment>
 8016b3c:	4603      	mov	r3, r0
 8016b3e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8016b40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016b44:	2b00      	cmp	r3, #0
 8016b46:	d007      	beq.n	8016b58 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8016b48:	687b      	ldr	r3, [r7, #4]
 8016b4a:	8b5b      	ldrh	r3, [r3, #26]
 8016b4c:	f043 0303 	orr.w	r3, r3, #3
 8016b50:	b29a      	uxth	r2, r3
 8016b52:	687b      	ldr	r3, [r7, #4]
 8016b54:	835a      	strh	r2, [r3, #26]
 8016b56:	e006      	b.n	8016b66 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8016b58:	687b      	ldr	r3, [r7, #4]
 8016b5a:	8b5b      	ldrh	r3, [r3, #26]
 8016b5c:	f023 0303 	bic.w	r3, r3, #3
 8016b60:	b29a      	uxth	r2, r3
 8016b62:	687b      	ldr	r3, [r7, #4]
 8016b64:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8016b66:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016b6a:	4618      	mov	r0, r3
 8016b6c:	371c      	adds	r7, #28
 8016b6e:	46bd      	mov	sp, r7
 8016b70:	bd90      	pop	{r4, r7, pc}
 8016b72:	bf00      	nop
 8016b74:	0801f210 	.word	0x0801f210
 8016b78:	0801f9e8 	.word	0x0801f9e8
 8016b7c:	0801f280 	.word	0x0801f280

08016b80 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8016b80:	b590      	push	{r4, r7, lr}
 8016b82:	b087      	sub	sp, #28
 8016b84:	af00      	add	r7, sp, #0
 8016b86:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8016b88:	2300      	movs	r3, #0
 8016b8a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8016b8c:	687b      	ldr	r3, [r7, #4]
 8016b8e:	2b00      	cmp	r3, #0
 8016b90:	d106      	bne.n	8016ba0 <tcp_keepalive+0x20>
 8016b92:	4b18      	ldr	r3, [pc, #96]	; (8016bf4 <tcp_keepalive+0x74>)
 8016b94:	f640 0224 	movw	r2, #2084	; 0x824
 8016b98:	4917      	ldr	r1, [pc, #92]	; (8016bf8 <tcp_keepalive+0x78>)
 8016b9a:	4818      	ldr	r0, [pc, #96]	; (8016bfc <tcp_keepalive+0x7c>)
 8016b9c:	f004 fab0 	bl	801b100 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8016ba0:	7dfb      	ldrb	r3, [r7, #23]
 8016ba2:	b29c      	uxth	r4, r3
 8016ba4:	687b      	ldr	r3, [r7, #4]
 8016ba6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016ba8:	3b01      	subs	r3, #1
 8016baa:	4618      	mov	r0, r3
 8016bac:	f7f6 fc69 	bl	800d482 <lwip_htonl>
 8016bb0:	4603      	mov	r3, r0
 8016bb2:	2200      	movs	r2, #0
 8016bb4:	4621      	mov	r1, r4
 8016bb6:	6878      	ldr	r0, [r7, #4]
 8016bb8:	f7ff fe66 	bl	8016888 <tcp_output_alloc_header>
 8016bbc:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8016bbe:	693b      	ldr	r3, [r7, #16]
 8016bc0:	2b00      	cmp	r3, #0
 8016bc2:	d102      	bne.n	8016bca <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8016bc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016bc8:	e010      	b.n	8016bec <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8016bca:	7dfb      	ldrb	r3, [r7, #23]
 8016bcc:	2200      	movs	r2, #0
 8016bce:	6939      	ldr	r1, [r7, #16]
 8016bd0:	6878      	ldr	r0, [r7, #4]
 8016bd2:	f7ff fe97 	bl	8016904 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8016bd6:	687a      	ldr	r2, [r7, #4]
 8016bd8:	687b      	ldr	r3, [r7, #4]
 8016bda:	3304      	adds	r3, #4
 8016bdc:	6939      	ldr	r1, [r7, #16]
 8016bde:	6878      	ldr	r0, [r7, #4]
 8016be0:	f7ff fed0 	bl	8016984 <tcp_output_control_segment>
 8016be4:	4603      	mov	r3, r0
 8016be6:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8016be8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016bec:	4618      	mov	r0, r3
 8016bee:	371c      	adds	r7, #28
 8016bf0:	46bd      	mov	sp, r7
 8016bf2:	bd90      	pop	{r4, r7, pc}
 8016bf4:	0801f210 	.word	0x0801f210
 8016bf8:	0801fa08 	.word	0x0801fa08
 8016bfc:	0801f280 	.word	0x0801f280

08016c00 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8016c00:	b590      	push	{r4, r7, lr}
 8016c02:	b08b      	sub	sp, #44	; 0x2c
 8016c04:	af00      	add	r7, sp, #0
 8016c06:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8016c08:	2300      	movs	r3, #0
 8016c0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8016c0e:	687b      	ldr	r3, [r7, #4]
 8016c10:	2b00      	cmp	r3, #0
 8016c12:	d106      	bne.n	8016c22 <tcp_zero_window_probe+0x22>
 8016c14:	4b4c      	ldr	r3, [pc, #304]	; (8016d48 <tcp_zero_window_probe+0x148>)
 8016c16:	f640 024f 	movw	r2, #2127	; 0x84f
 8016c1a:	494c      	ldr	r1, [pc, #304]	; (8016d4c <tcp_zero_window_probe+0x14c>)
 8016c1c:	484c      	ldr	r0, [pc, #304]	; (8016d50 <tcp_zero_window_probe+0x150>)
 8016c1e:	f004 fa6f 	bl	801b100 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8016c22:	687b      	ldr	r3, [r7, #4]
 8016c24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016c26:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8016c28:	6a3b      	ldr	r3, [r7, #32]
 8016c2a:	2b00      	cmp	r3, #0
 8016c2c:	d101      	bne.n	8016c32 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8016c2e:	2300      	movs	r3, #0
 8016c30:	e086      	b.n	8016d40 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8016c32:	687b      	ldr	r3, [r7, #4]
 8016c34:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8016c38:	2bff      	cmp	r3, #255	; 0xff
 8016c3a:	d007      	beq.n	8016c4c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8016c3c:	687b      	ldr	r3, [r7, #4]
 8016c3e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8016c42:	3301      	adds	r3, #1
 8016c44:	b2da      	uxtb	r2, r3
 8016c46:	687b      	ldr	r3, [r7, #4]
 8016c48:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8016c4c:	6a3b      	ldr	r3, [r7, #32]
 8016c4e:	68db      	ldr	r3, [r3, #12]
 8016c50:	899b      	ldrh	r3, [r3, #12]
 8016c52:	b29b      	uxth	r3, r3
 8016c54:	4618      	mov	r0, r3
 8016c56:	f7f6 fbff 	bl	800d458 <lwip_htons>
 8016c5a:	4603      	mov	r3, r0
 8016c5c:	b2db      	uxtb	r3, r3
 8016c5e:	f003 0301 	and.w	r3, r3, #1
 8016c62:	2b00      	cmp	r3, #0
 8016c64:	d005      	beq.n	8016c72 <tcp_zero_window_probe+0x72>
 8016c66:	6a3b      	ldr	r3, [r7, #32]
 8016c68:	891b      	ldrh	r3, [r3, #8]
 8016c6a:	2b00      	cmp	r3, #0
 8016c6c:	d101      	bne.n	8016c72 <tcp_zero_window_probe+0x72>
 8016c6e:	2301      	movs	r3, #1
 8016c70:	e000      	b.n	8016c74 <tcp_zero_window_probe+0x74>
 8016c72:	2300      	movs	r3, #0
 8016c74:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8016c76:	7ffb      	ldrb	r3, [r7, #31]
 8016c78:	2b00      	cmp	r3, #0
 8016c7a:	bf0c      	ite	eq
 8016c7c:	2301      	moveq	r3, #1
 8016c7e:	2300      	movne	r3, #0
 8016c80:	b2db      	uxtb	r3, r3
 8016c82:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8016c84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016c88:	b299      	uxth	r1, r3
 8016c8a:	6a3b      	ldr	r3, [r7, #32]
 8016c8c:	68db      	ldr	r3, [r3, #12]
 8016c8e:	685b      	ldr	r3, [r3, #4]
 8016c90:	8bba      	ldrh	r2, [r7, #28]
 8016c92:	6878      	ldr	r0, [r7, #4]
 8016c94:	f7ff fdf8 	bl	8016888 <tcp_output_alloc_header>
 8016c98:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8016c9a:	69bb      	ldr	r3, [r7, #24]
 8016c9c:	2b00      	cmp	r3, #0
 8016c9e:	d102      	bne.n	8016ca6 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8016ca0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016ca4:	e04c      	b.n	8016d40 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8016ca6:	69bb      	ldr	r3, [r7, #24]
 8016ca8:	685b      	ldr	r3, [r3, #4]
 8016caa:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8016cac:	7ffb      	ldrb	r3, [r7, #31]
 8016cae:	2b00      	cmp	r3, #0
 8016cb0:	d011      	beq.n	8016cd6 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8016cb2:	697b      	ldr	r3, [r7, #20]
 8016cb4:	899b      	ldrh	r3, [r3, #12]
 8016cb6:	b29b      	uxth	r3, r3
 8016cb8:	b21b      	sxth	r3, r3
 8016cba:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8016cbe:	b21c      	sxth	r4, r3
 8016cc0:	2011      	movs	r0, #17
 8016cc2:	f7f6 fbc9 	bl	800d458 <lwip_htons>
 8016cc6:	4603      	mov	r3, r0
 8016cc8:	b21b      	sxth	r3, r3
 8016cca:	4323      	orrs	r3, r4
 8016ccc:	b21b      	sxth	r3, r3
 8016cce:	b29a      	uxth	r2, r3
 8016cd0:	697b      	ldr	r3, [r7, #20]
 8016cd2:	819a      	strh	r2, [r3, #12]
 8016cd4:	e010      	b.n	8016cf8 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8016cd6:	69bb      	ldr	r3, [r7, #24]
 8016cd8:	685b      	ldr	r3, [r3, #4]
 8016cda:	3314      	adds	r3, #20
 8016cdc:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8016cde:	6a3b      	ldr	r3, [r7, #32]
 8016ce0:	6858      	ldr	r0, [r3, #4]
 8016ce2:	6a3b      	ldr	r3, [r7, #32]
 8016ce4:	685b      	ldr	r3, [r3, #4]
 8016ce6:	891a      	ldrh	r2, [r3, #8]
 8016ce8:	6a3b      	ldr	r3, [r7, #32]
 8016cea:	891b      	ldrh	r3, [r3, #8]
 8016cec:	1ad3      	subs	r3, r2, r3
 8016cee:	b29b      	uxth	r3, r3
 8016cf0:	2201      	movs	r2, #1
 8016cf2:	6939      	ldr	r1, [r7, #16]
 8016cf4:	f7fa fd3c 	bl	8011770 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8016cf8:	6a3b      	ldr	r3, [r7, #32]
 8016cfa:	68db      	ldr	r3, [r3, #12]
 8016cfc:	685b      	ldr	r3, [r3, #4]
 8016cfe:	4618      	mov	r0, r3
 8016d00:	f7f6 fbbf 	bl	800d482 <lwip_htonl>
 8016d04:	4603      	mov	r3, r0
 8016d06:	3301      	adds	r3, #1
 8016d08:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8016d0a:	687b      	ldr	r3, [r7, #4]
 8016d0c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8016d0e:	68fb      	ldr	r3, [r7, #12]
 8016d10:	1ad3      	subs	r3, r2, r3
 8016d12:	2b00      	cmp	r3, #0
 8016d14:	da02      	bge.n	8016d1c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8016d16:	687b      	ldr	r3, [r7, #4]
 8016d18:	68fa      	ldr	r2, [r7, #12]
 8016d1a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8016d1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016d20:	2200      	movs	r2, #0
 8016d22:	69b9      	ldr	r1, [r7, #24]
 8016d24:	6878      	ldr	r0, [r7, #4]
 8016d26:	f7ff fded 	bl	8016904 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8016d2a:	687a      	ldr	r2, [r7, #4]
 8016d2c:	687b      	ldr	r3, [r7, #4]
 8016d2e:	3304      	adds	r3, #4
 8016d30:	69b9      	ldr	r1, [r7, #24]
 8016d32:	6878      	ldr	r0, [r7, #4]
 8016d34:	f7ff fe26 	bl	8016984 <tcp_output_control_segment>
 8016d38:	4603      	mov	r3, r0
 8016d3a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8016d3c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8016d40:	4618      	mov	r0, r3
 8016d42:	372c      	adds	r7, #44	; 0x2c
 8016d44:	46bd      	mov	sp, r7
 8016d46:	bd90      	pop	{r4, r7, pc}
 8016d48:	0801f210 	.word	0x0801f210
 8016d4c:	0801fa24 	.word	0x0801fa24
 8016d50:	0801f280 	.word	0x0801f280

08016d54 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8016d54:	b580      	push	{r7, lr}
 8016d56:	b084      	sub	sp, #16
 8016d58:	af00      	add	r7, sp, #0
 8016d5a:	6078      	str	r0, [r7, #4]
 8016d5c:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8016d5e:	f000 fafb 	bl	8017358 <sys_timeouts_sleeptime>
 8016d62:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8016d64:	68fb      	ldr	r3, [r7, #12]
 8016d66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016d6a:	d10b      	bne.n	8016d84 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8016d6c:	4813      	ldr	r0, [pc, #76]	; (8016dbc <tcpip_timeouts_mbox_fetch+0x68>)
 8016d6e:	f7fa fe68 	bl	8011a42 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8016d72:	2200      	movs	r2, #0
 8016d74:	6839      	ldr	r1, [r7, #0]
 8016d76:	6878      	ldr	r0, [r7, #4]
 8016d78:	f7fa fdda 	bl	8011930 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8016d7c:	480f      	ldr	r0, [pc, #60]	; (8016dbc <tcpip_timeouts_mbox_fetch+0x68>)
 8016d7e:	f7fa fe51 	bl	8011a24 <sys_mutex_lock>
    return;
 8016d82:	e018      	b.n	8016db6 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8016d84:	68fb      	ldr	r3, [r7, #12]
 8016d86:	2b00      	cmp	r3, #0
 8016d88:	d102      	bne.n	8016d90 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8016d8a:	f000 faab 	bl	80172e4 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8016d8e:	e7e6      	b.n	8016d5e <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8016d90:	480a      	ldr	r0, [pc, #40]	; (8016dbc <tcpip_timeouts_mbox_fetch+0x68>)
 8016d92:	f7fa fe56 	bl	8011a42 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8016d96:	68fa      	ldr	r2, [r7, #12]
 8016d98:	6839      	ldr	r1, [r7, #0]
 8016d9a:	6878      	ldr	r0, [r7, #4]
 8016d9c:	f7fa fdc8 	bl	8011930 <sys_arch_mbox_fetch>
 8016da0:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8016da2:	4806      	ldr	r0, [pc, #24]	; (8016dbc <tcpip_timeouts_mbox_fetch+0x68>)
 8016da4:	f7fa fe3e 	bl	8011a24 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8016da8:	68bb      	ldr	r3, [r7, #8]
 8016daa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016dae:	d102      	bne.n	8016db6 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8016db0:	f000 fa98 	bl	80172e4 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8016db4:	e7d3      	b.n	8016d5e <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8016db6:	3710      	adds	r7, #16
 8016db8:	46bd      	mov	sp, r7
 8016dba:	bd80      	pop	{r7, pc}
 8016dbc:	2400ce80 	.word	0x2400ce80

08016dc0 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8016dc0:	b580      	push	{r7, lr}
 8016dc2:	b084      	sub	sp, #16
 8016dc4:	af00      	add	r7, sp, #0
 8016dc6:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8016dc8:	4810      	ldr	r0, [pc, #64]	; (8016e0c <tcpip_thread+0x4c>)
 8016dca:	f7fa fe2b 	bl	8011a24 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8016dce:	4b10      	ldr	r3, [pc, #64]	; (8016e10 <tcpip_thread+0x50>)
 8016dd0:	681b      	ldr	r3, [r3, #0]
 8016dd2:	2b00      	cmp	r3, #0
 8016dd4:	d005      	beq.n	8016de2 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8016dd6:	4b0e      	ldr	r3, [pc, #56]	; (8016e10 <tcpip_thread+0x50>)
 8016dd8:	681b      	ldr	r3, [r3, #0]
 8016dda:	4a0e      	ldr	r2, [pc, #56]	; (8016e14 <tcpip_thread+0x54>)
 8016ddc:	6812      	ldr	r2, [r2, #0]
 8016dde:	4610      	mov	r0, r2
 8016de0:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8016de2:	f107 030c 	add.w	r3, r7, #12
 8016de6:	4619      	mov	r1, r3
 8016de8:	480b      	ldr	r0, [pc, #44]	; (8016e18 <tcpip_thread+0x58>)
 8016dea:	f7ff ffb3 	bl	8016d54 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8016dee:	68fb      	ldr	r3, [r7, #12]
 8016df0:	2b00      	cmp	r3, #0
 8016df2:	d106      	bne.n	8016e02 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8016df4:	4b09      	ldr	r3, [pc, #36]	; (8016e1c <tcpip_thread+0x5c>)
 8016df6:	2291      	movs	r2, #145	; 0x91
 8016df8:	4909      	ldr	r1, [pc, #36]	; (8016e20 <tcpip_thread+0x60>)
 8016dfa:	480a      	ldr	r0, [pc, #40]	; (8016e24 <tcpip_thread+0x64>)
 8016dfc:	f004 f980 	bl	801b100 <iprintf>
      continue;
 8016e00:	e003      	b.n	8016e0a <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8016e02:	68fb      	ldr	r3, [r7, #12]
 8016e04:	4618      	mov	r0, r3
 8016e06:	f000 f80f 	bl	8016e28 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8016e0a:	e7ea      	b.n	8016de2 <tcpip_thread+0x22>
 8016e0c:	2400ce80 	.word	0x2400ce80
 8016e10:	2400494c 	.word	0x2400494c
 8016e14:	24004950 	.word	0x24004950
 8016e18:	24004954 	.word	0x24004954
 8016e1c:	0801fa48 	.word	0x0801fa48
 8016e20:	0801fa98 	.word	0x0801fa98
 8016e24:	0801fab8 	.word	0x0801fab8

08016e28 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8016e28:	b580      	push	{r7, lr}
 8016e2a:	b082      	sub	sp, #8
 8016e2c:	af00      	add	r7, sp, #0
 8016e2e:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8016e30:	687b      	ldr	r3, [r7, #4]
 8016e32:	781b      	ldrb	r3, [r3, #0]
 8016e34:	2b01      	cmp	r3, #1
 8016e36:	d018      	beq.n	8016e6a <tcpip_thread_handle_msg+0x42>
 8016e38:	2b02      	cmp	r3, #2
 8016e3a:	d021      	beq.n	8016e80 <tcpip_thread_handle_msg+0x58>
 8016e3c:	2b00      	cmp	r3, #0
 8016e3e:	d126      	bne.n	8016e8e <tcpip_thread_handle_msg+0x66>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8016e40:	687b      	ldr	r3, [r7, #4]
 8016e42:	68db      	ldr	r3, [r3, #12]
 8016e44:	687a      	ldr	r2, [r7, #4]
 8016e46:	6850      	ldr	r0, [r2, #4]
 8016e48:	687a      	ldr	r2, [r7, #4]
 8016e4a:	6892      	ldr	r2, [r2, #8]
 8016e4c:	4611      	mov	r1, r2
 8016e4e:	4798      	blx	r3
 8016e50:	4603      	mov	r3, r0
 8016e52:	2b00      	cmp	r3, #0
 8016e54:	d004      	beq.n	8016e60 <tcpip_thread_handle_msg+0x38>
        pbuf_free(msg->msg.inp.p);
 8016e56:	687b      	ldr	r3, [r7, #4]
 8016e58:	685b      	ldr	r3, [r3, #4]
 8016e5a:	4618      	mov	r0, r3
 8016e5c:	f7fa fa92 	bl	8011384 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8016e60:	6879      	ldr	r1, [r7, #4]
 8016e62:	2009      	movs	r0, #9
 8016e64:	f7f9 fbee 	bl	8010644 <memp_free>
      break;
 8016e68:	e018      	b.n	8016e9c <tcpip_thread_handle_msg+0x74>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8016e6a:	687b      	ldr	r3, [r7, #4]
 8016e6c:	685b      	ldr	r3, [r3, #4]
 8016e6e:	687a      	ldr	r2, [r7, #4]
 8016e70:	6892      	ldr	r2, [r2, #8]
 8016e72:	4610      	mov	r0, r2
 8016e74:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8016e76:	6879      	ldr	r1, [r7, #4]
 8016e78:	2008      	movs	r0, #8
 8016e7a:	f7f9 fbe3 	bl	8010644 <memp_free>
      break;
 8016e7e:	e00d      	b.n	8016e9c <tcpip_thread_handle_msg+0x74>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8016e80:	687b      	ldr	r3, [r7, #4]
 8016e82:	685b      	ldr	r3, [r3, #4]
 8016e84:	687a      	ldr	r2, [r7, #4]
 8016e86:	6892      	ldr	r2, [r2, #8]
 8016e88:	4610      	mov	r0, r2
 8016e8a:	4798      	blx	r3
      break;
 8016e8c:	e006      	b.n	8016e9c <tcpip_thread_handle_msg+0x74>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8016e8e:	4b05      	ldr	r3, [pc, #20]	; (8016ea4 <tcpip_thread_handle_msg+0x7c>)
 8016e90:	22cf      	movs	r2, #207	; 0xcf
 8016e92:	4905      	ldr	r1, [pc, #20]	; (8016ea8 <tcpip_thread_handle_msg+0x80>)
 8016e94:	4805      	ldr	r0, [pc, #20]	; (8016eac <tcpip_thread_handle_msg+0x84>)
 8016e96:	f004 f933 	bl	801b100 <iprintf>
      break;
 8016e9a:	bf00      	nop
  }
}
 8016e9c:	bf00      	nop
 8016e9e:	3708      	adds	r7, #8
 8016ea0:	46bd      	mov	sp, r7
 8016ea2:	bd80      	pop	{r7, pc}
 8016ea4:	0801fa48 	.word	0x0801fa48
 8016ea8:	0801fa98 	.word	0x0801fa98
 8016eac:	0801fab8 	.word	0x0801fab8

08016eb0 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8016eb0:	b580      	push	{r7, lr}
 8016eb2:	b086      	sub	sp, #24
 8016eb4:	af00      	add	r7, sp, #0
 8016eb6:	60f8      	str	r0, [r7, #12]
 8016eb8:	60b9      	str	r1, [r7, #8]
 8016eba:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8016ebc:	481a      	ldr	r0, [pc, #104]	; (8016f28 <tcpip_inpkt+0x78>)
 8016ebe:	f7fa fd76 	bl	80119ae <sys_mbox_valid>
 8016ec2:	4603      	mov	r3, r0
 8016ec4:	2b00      	cmp	r3, #0
 8016ec6:	d105      	bne.n	8016ed4 <tcpip_inpkt+0x24>
 8016ec8:	4b18      	ldr	r3, [pc, #96]	; (8016f2c <tcpip_inpkt+0x7c>)
 8016eca:	22fc      	movs	r2, #252	; 0xfc
 8016ecc:	4918      	ldr	r1, [pc, #96]	; (8016f30 <tcpip_inpkt+0x80>)
 8016ece:	4819      	ldr	r0, [pc, #100]	; (8016f34 <tcpip_inpkt+0x84>)
 8016ed0:	f004 f916 	bl	801b100 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8016ed4:	2009      	movs	r0, #9
 8016ed6:	f7f9 fb3f 	bl	8010558 <memp_malloc>
 8016eda:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8016edc:	697b      	ldr	r3, [r7, #20]
 8016ede:	2b00      	cmp	r3, #0
 8016ee0:	d102      	bne.n	8016ee8 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8016ee2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016ee6:	e01a      	b.n	8016f1e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8016ee8:	697b      	ldr	r3, [r7, #20]
 8016eea:	2200      	movs	r2, #0
 8016eec:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8016eee:	697b      	ldr	r3, [r7, #20]
 8016ef0:	68fa      	ldr	r2, [r7, #12]
 8016ef2:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8016ef4:	697b      	ldr	r3, [r7, #20]
 8016ef6:	68ba      	ldr	r2, [r7, #8]
 8016ef8:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8016efa:	697b      	ldr	r3, [r7, #20]
 8016efc:	687a      	ldr	r2, [r7, #4]
 8016efe:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8016f00:	6979      	ldr	r1, [r7, #20]
 8016f02:	4809      	ldr	r0, [pc, #36]	; (8016f28 <tcpip_inpkt+0x78>)
 8016f04:	f7fa fcfa 	bl	80118fc <sys_mbox_trypost>
 8016f08:	4603      	mov	r3, r0
 8016f0a:	2b00      	cmp	r3, #0
 8016f0c:	d006      	beq.n	8016f1c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8016f0e:	6979      	ldr	r1, [r7, #20]
 8016f10:	2009      	movs	r0, #9
 8016f12:	f7f9 fb97 	bl	8010644 <memp_free>
    return ERR_MEM;
 8016f16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016f1a:	e000      	b.n	8016f1e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8016f1c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8016f1e:	4618      	mov	r0, r3
 8016f20:	3718      	adds	r7, #24
 8016f22:	46bd      	mov	sp, r7
 8016f24:	bd80      	pop	{r7, pc}
 8016f26:	bf00      	nop
 8016f28:	24004954 	.word	0x24004954
 8016f2c:	0801fa48 	.word	0x0801fa48
 8016f30:	0801fae0 	.word	0x0801fae0
 8016f34:	0801fab8 	.word	0x0801fab8

08016f38 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8016f38:	b580      	push	{r7, lr}
 8016f3a:	b082      	sub	sp, #8
 8016f3c:	af00      	add	r7, sp, #0
 8016f3e:	6078      	str	r0, [r7, #4]
 8016f40:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8016f42:	683b      	ldr	r3, [r7, #0]
 8016f44:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016f48:	f003 0318 	and.w	r3, r3, #24
 8016f4c:	2b00      	cmp	r3, #0
 8016f4e:	d006      	beq.n	8016f5e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8016f50:	4a08      	ldr	r2, [pc, #32]	; (8016f74 <tcpip_input+0x3c>)
 8016f52:	6839      	ldr	r1, [r7, #0]
 8016f54:	6878      	ldr	r0, [r7, #4]
 8016f56:	f7ff ffab 	bl	8016eb0 <tcpip_inpkt>
 8016f5a:	4603      	mov	r3, r0
 8016f5c:	e005      	b.n	8016f6a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8016f5e:	4a06      	ldr	r2, [pc, #24]	; (8016f78 <tcpip_input+0x40>)
 8016f60:	6839      	ldr	r1, [r7, #0]
 8016f62:	6878      	ldr	r0, [r7, #4]
 8016f64:	f7ff ffa4 	bl	8016eb0 <tcpip_inpkt>
 8016f68:	4603      	mov	r3, r0
}
 8016f6a:	4618      	mov	r0, r3
 8016f6c:	3708      	adds	r7, #8
 8016f6e:	46bd      	mov	sp, r7
 8016f70:	bd80      	pop	{r7, pc}
 8016f72:	bf00      	nop
 8016f74:	0800e34d 	.word	0x0800e34d
 8016f78:	0800eb3d 	.word	0x0800eb3d

08016f7c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8016f7c:	b580      	push	{r7, lr}
 8016f7e:	b084      	sub	sp, #16
 8016f80:	af00      	add	r7, sp, #0
 8016f82:	6078      	str	r0, [r7, #4]
 8016f84:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8016f86:	4819      	ldr	r0, [pc, #100]	; (8016fec <tcpip_try_callback+0x70>)
 8016f88:	f7fa fd11 	bl	80119ae <sys_mbox_valid>
 8016f8c:	4603      	mov	r3, r0
 8016f8e:	2b00      	cmp	r3, #0
 8016f90:	d106      	bne.n	8016fa0 <tcpip_try_callback+0x24>
 8016f92:	4b17      	ldr	r3, [pc, #92]	; (8016ff0 <tcpip_try_callback+0x74>)
 8016f94:	f240 125d 	movw	r2, #349	; 0x15d
 8016f98:	4916      	ldr	r1, [pc, #88]	; (8016ff4 <tcpip_try_callback+0x78>)
 8016f9a:	4817      	ldr	r0, [pc, #92]	; (8016ff8 <tcpip_try_callback+0x7c>)
 8016f9c:	f004 f8b0 	bl	801b100 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8016fa0:	2008      	movs	r0, #8
 8016fa2:	f7f9 fad9 	bl	8010558 <memp_malloc>
 8016fa6:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8016fa8:	68fb      	ldr	r3, [r7, #12]
 8016faa:	2b00      	cmp	r3, #0
 8016fac:	d102      	bne.n	8016fb4 <tcpip_try_callback+0x38>
    return ERR_MEM;
 8016fae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016fb2:	e017      	b.n	8016fe4 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8016fb4:	68fb      	ldr	r3, [r7, #12]
 8016fb6:	2201      	movs	r2, #1
 8016fb8:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8016fba:	68fb      	ldr	r3, [r7, #12]
 8016fbc:	687a      	ldr	r2, [r7, #4]
 8016fbe:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8016fc0:	68fb      	ldr	r3, [r7, #12]
 8016fc2:	683a      	ldr	r2, [r7, #0]
 8016fc4:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8016fc6:	68f9      	ldr	r1, [r7, #12]
 8016fc8:	4808      	ldr	r0, [pc, #32]	; (8016fec <tcpip_try_callback+0x70>)
 8016fca:	f7fa fc97 	bl	80118fc <sys_mbox_trypost>
 8016fce:	4603      	mov	r3, r0
 8016fd0:	2b00      	cmp	r3, #0
 8016fd2:	d006      	beq.n	8016fe2 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8016fd4:	68f9      	ldr	r1, [r7, #12]
 8016fd6:	2008      	movs	r0, #8
 8016fd8:	f7f9 fb34 	bl	8010644 <memp_free>
    return ERR_MEM;
 8016fdc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016fe0:	e000      	b.n	8016fe4 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8016fe2:	2300      	movs	r3, #0
}
 8016fe4:	4618      	mov	r0, r3
 8016fe6:	3710      	adds	r7, #16
 8016fe8:	46bd      	mov	sp, r7
 8016fea:	bd80      	pop	{r7, pc}
 8016fec:	24004954 	.word	0x24004954
 8016ff0:	0801fa48 	.word	0x0801fa48
 8016ff4:	0801fae0 	.word	0x0801fae0
 8016ff8:	0801fab8 	.word	0x0801fab8

08016ffc <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8016ffc:	b580      	push	{r7, lr}
 8016ffe:	b084      	sub	sp, #16
 8017000:	af02      	add	r7, sp, #8
 8017002:	6078      	str	r0, [r7, #4]
 8017004:	6039      	str	r1, [r7, #0]
  lwip_init();
 8017006:	f7f7 fce7 	bl	800e9d8 <lwip_init>

  tcpip_init_done = initfunc;
 801700a:	4a17      	ldr	r2, [pc, #92]	; (8017068 <tcpip_init+0x6c>)
 801700c:	687b      	ldr	r3, [r7, #4]
 801700e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8017010:	4a16      	ldr	r2, [pc, #88]	; (801706c <tcpip_init+0x70>)
 8017012:	683b      	ldr	r3, [r7, #0]
 8017014:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8017016:	2106      	movs	r1, #6
 8017018:	4815      	ldr	r0, [pc, #84]	; (8017070 <tcpip_init+0x74>)
 801701a:	f7fa fc4d 	bl	80118b8 <sys_mbox_new>
 801701e:	4603      	mov	r3, r0
 8017020:	2b00      	cmp	r3, #0
 8017022:	d006      	beq.n	8017032 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8017024:	4b13      	ldr	r3, [pc, #76]	; (8017074 <tcpip_init+0x78>)
 8017026:	f240 2261 	movw	r2, #609	; 0x261
 801702a:	4913      	ldr	r1, [pc, #76]	; (8017078 <tcpip_init+0x7c>)
 801702c:	4813      	ldr	r0, [pc, #76]	; (801707c <tcpip_init+0x80>)
 801702e:	f004 f867 	bl	801b100 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8017032:	4813      	ldr	r0, [pc, #76]	; (8017080 <tcpip_init+0x84>)
 8017034:	f7fa fcda 	bl	80119ec <sys_mutex_new>
 8017038:	4603      	mov	r3, r0
 801703a:	2b00      	cmp	r3, #0
 801703c:	d006      	beq.n	801704c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 801703e:	4b0d      	ldr	r3, [pc, #52]	; (8017074 <tcpip_init+0x78>)
 8017040:	f240 2265 	movw	r2, #613	; 0x265
 8017044:	490f      	ldr	r1, [pc, #60]	; (8017084 <tcpip_init+0x88>)
 8017046:	480d      	ldr	r0, [pc, #52]	; (801707c <tcpip_init+0x80>)
 8017048:	f004 f85a 	bl	801b100 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 801704c:	2300      	movs	r3, #0
 801704e:	9300      	str	r3, [sp, #0]
 8017050:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017054:	2200      	movs	r2, #0
 8017056:	490c      	ldr	r1, [pc, #48]	; (8017088 <tcpip_init+0x8c>)
 8017058:	480c      	ldr	r0, [pc, #48]	; (801708c <tcpip_init+0x90>)
 801705a:	f7fa fcff 	bl	8011a5c <sys_thread_new>
}
 801705e:	bf00      	nop
 8017060:	3708      	adds	r7, #8
 8017062:	46bd      	mov	sp, r7
 8017064:	bd80      	pop	{r7, pc}
 8017066:	bf00      	nop
 8017068:	2400494c 	.word	0x2400494c
 801706c:	24004950 	.word	0x24004950
 8017070:	24004954 	.word	0x24004954
 8017074:	0801fa48 	.word	0x0801fa48
 8017078:	0801faf0 	.word	0x0801faf0
 801707c:	0801fab8 	.word	0x0801fab8
 8017080:	2400ce80 	.word	0x2400ce80
 8017084:	0801fb14 	.word	0x0801fb14
 8017088:	08016dc1 	.word	0x08016dc1
 801708c:	0801fb38 	.word	0x0801fb38

08017090 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8017090:	b580      	push	{r7, lr}
 8017092:	b082      	sub	sp, #8
 8017094:	af00      	add	r7, sp, #0
 8017096:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8017098:	f7fa fd6e 	bl	8011b78 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801709c:	4b0a      	ldr	r3, [pc, #40]	; (80170c8 <tcpip_tcp_timer+0x38>)
 801709e:	681b      	ldr	r3, [r3, #0]
 80170a0:	2b00      	cmp	r3, #0
 80170a2:	d103      	bne.n	80170ac <tcpip_tcp_timer+0x1c>
 80170a4:	4b09      	ldr	r3, [pc, #36]	; (80170cc <tcpip_tcp_timer+0x3c>)
 80170a6:	681b      	ldr	r3, [r3, #0]
 80170a8:	2b00      	cmp	r3, #0
 80170aa:	d005      	beq.n	80170b8 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80170ac:	2200      	movs	r2, #0
 80170ae:	4908      	ldr	r1, [pc, #32]	; (80170d0 <tcpip_tcp_timer+0x40>)
 80170b0:	20fa      	movs	r0, #250	; 0xfa
 80170b2:	f000 f8f1 	bl	8017298 <sys_timeout>
 80170b6:	e002      	b.n	80170be <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80170b8:	4b06      	ldr	r3, [pc, #24]	; (80170d4 <tcpip_tcp_timer+0x44>)
 80170ba:	2200      	movs	r2, #0
 80170bc:	601a      	str	r2, [r3, #0]
  }
}
 80170be:	bf00      	nop
 80170c0:	3708      	adds	r7, #8
 80170c2:	46bd      	mov	sp, r7
 80170c4:	bd80      	pop	{r7, pc}
 80170c6:	bf00      	nop
 80170c8:	2400ce68 	.word	0x2400ce68
 80170cc:	2400ce78 	.word	0x2400ce78
 80170d0:	08017091 	.word	0x08017091
 80170d4:	24004960 	.word	0x24004960

080170d8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80170d8:	b580      	push	{r7, lr}
 80170da:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80170dc:	4b0a      	ldr	r3, [pc, #40]	; (8017108 <tcp_timer_needed+0x30>)
 80170de:	681b      	ldr	r3, [r3, #0]
 80170e0:	2b00      	cmp	r3, #0
 80170e2:	d10f      	bne.n	8017104 <tcp_timer_needed+0x2c>
 80170e4:	4b09      	ldr	r3, [pc, #36]	; (801710c <tcp_timer_needed+0x34>)
 80170e6:	681b      	ldr	r3, [r3, #0]
 80170e8:	2b00      	cmp	r3, #0
 80170ea:	d103      	bne.n	80170f4 <tcp_timer_needed+0x1c>
 80170ec:	4b08      	ldr	r3, [pc, #32]	; (8017110 <tcp_timer_needed+0x38>)
 80170ee:	681b      	ldr	r3, [r3, #0]
 80170f0:	2b00      	cmp	r3, #0
 80170f2:	d007      	beq.n	8017104 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80170f4:	4b04      	ldr	r3, [pc, #16]	; (8017108 <tcp_timer_needed+0x30>)
 80170f6:	2201      	movs	r2, #1
 80170f8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80170fa:	2200      	movs	r2, #0
 80170fc:	4905      	ldr	r1, [pc, #20]	; (8017114 <tcp_timer_needed+0x3c>)
 80170fe:	20fa      	movs	r0, #250	; 0xfa
 8017100:	f000 f8ca 	bl	8017298 <sys_timeout>
  }
}
 8017104:	bf00      	nop
 8017106:	bd80      	pop	{r7, pc}
 8017108:	24004960 	.word	0x24004960
 801710c:	2400ce68 	.word	0x2400ce68
 8017110:	2400ce78 	.word	0x2400ce78
 8017114:	08017091 	.word	0x08017091

08017118 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8017118:	b580      	push	{r7, lr}
 801711a:	b086      	sub	sp, #24
 801711c:	af00      	add	r7, sp, #0
 801711e:	60f8      	str	r0, [r7, #12]
 8017120:	60b9      	str	r1, [r7, #8]
 8017122:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8017124:	200a      	movs	r0, #10
 8017126:	f7f9 fa17 	bl	8010558 <memp_malloc>
 801712a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801712c:	693b      	ldr	r3, [r7, #16]
 801712e:	2b00      	cmp	r3, #0
 8017130:	d109      	bne.n	8017146 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8017132:	693b      	ldr	r3, [r7, #16]
 8017134:	2b00      	cmp	r3, #0
 8017136:	d151      	bne.n	80171dc <sys_timeout_abs+0xc4>
 8017138:	4b2a      	ldr	r3, [pc, #168]	; (80171e4 <sys_timeout_abs+0xcc>)
 801713a:	22be      	movs	r2, #190	; 0xbe
 801713c:	492a      	ldr	r1, [pc, #168]	; (80171e8 <sys_timeout_abs+0xd0>)
 801713e:	482b      	ldr	r0, [pc, #172]	; (80171ec <sys_timeout_abs+0xd4>)
 8017140:	f003 ffde 	bl	801b100 <iprintf>
    return;
 8017144:	e04a      	b.n	80171dc <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8017146:	693b      	ldr	r3, [r7, #16]
 8017148:	2200      	movs	r2, #0
 801714a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801714c:	693b      	ldr	r3, [r7, #16]
 801714e:	68ba      	ldr	r2, [r7, #8]
 8017150:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8017152:	693b      	ldr	r3, [r7, #16]
 8017154:	687a      	ldr	r2, [r7, #4]
 8017156:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8017158:	693b      	ldr	r3, [r7, #16]
 801715a:	68fa      	ldr	r2, [r7, #12]
 801715c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801715e:	4b24      	ldr	r3, [pc, #144]	; (80171f0 <sys_timeout_abs+0xd8>)
 8017160:	681b      	ldr	r3, [r3, #0]
 8017162:	2b00      	cmp	r3, #0
 8017164:	d103      	bne.n	801716e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8017166:	4a22      	ldr	r2, [pc, #136]	; (80171f0 <sys_timeout_abs+0xd8>)
 8017168:	693b      	ldr	r3, [r7, #16]
 801716a:	6013      	str	r3, [r2, #0]
    return;
 801716c:	e037      	b.n	80171de <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801716e:	693b      	ldr	r3, [r7, #16]
 8017170:	685a      	ldr	r2, [r3, #4]
 8017172:	4b1f      	ldr	r3, [pc, #124]	; (80171f0 <sys_timeout_abs+0xd8>)
 8017174:	681b      	ldr	r3, [r3, #0]
 8017176:	685b      	ldr	r3, [r3, #4]
 8017178:	1ad3      	subs	r3, r2, r3
 801717a:	0fdb      	lsrs	r3, r3, #31
 801717c:	f003 0301 	and.w	r3, r3, #1
 8017180:	b2db      	uxtb	r3, r3
 8017182:	2b00      	cmp	r3, #0
 8017184:	d007      	beq.n	8017196 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8017186:	4b1a      	ldr	r3, [pc, #104]	; (80171f0 <sys_timeout_abs+0xd8>)
 8017188:	681a      	ldr	r2, [r3, #0]
 801718a:	693b      	ldr	r3, [r7, #16]
 801718c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801718e:	4a18      	ldr	r2, [pc, #96]	; (80171f0 <sys_timeout_abs+0xd8>)
 8017190:	693b      	ldr	r3, [r7, #16]
 8017192:	6013      	str	r3, [r2, #0]
 8017194:	e023      	b.n	80171de <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8017196:	4b16      	ldr	r3, [pc, #88]	; (80171f0 <sys_timeout_abs+0xd8>)
 8017198:	681b      	ldr	r3, [r3, #0]
 801719a:	617b      	str	r3, [r7, #20]
 801719c:	e01a      	b.n	80171d4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801719e:	697b      	ldr	r3, [r7, #20]
 80171a0:	681b      	ldr	r3, [r3, #0]
 80171a2:	2b00      	cmp	r3, #0
 80171a4:	d00b      	beq.n	80171be <sys_timeout_abs+0xa6>
 80171a6:	693b      	ldr	r3, [r7, #16]
 80171a8:	685a      	ldr	r2, [r3, #4]
 80171aa:	697b      	ldr	r3, [r7, #20]
 80171ac:	681b      	ldr	r3, [r3, #0]
 80171ae:	685b      	ldr	r3, [r3, #4]
 80171b0:	1ad3      	subs	r3, r2, r3
 80171b2:	0fdb      	lsrs	r3, r3, #31
 80171b4:	f003 0301 	and.w	r3, r3, #1
 80171b8:	b2db      	uxtb	r3, r3
 80171ba:	2b00      	cmp	r3, #0
 80171bc:	d007      	beq.n	80171ce <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80171be:	697b      	ldr	r3, [r7, #20]
 80171c0:	681a      	ldr	r2, [r3, #0]
 80171c2:	693b      	ldr	r3, [r7, #16]
 80171c4:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80171c6:	697b      	ldr	r3, [r7, #20]
 80171c8:	693a      	ldr	r2, [r7, #16]
 80171ca:	601a      	str	r2, [r3, #0]
        break;
 80171cc:	e007      	b.n	80171de <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80171ce:	697b      	ldr	r3, [r7, #20]
 80171d0:	681b      	ldr	r3, [r3, #0]
 80171d2:	617b      	str	r3, [r7, #20]
 80171d4:	697b      	ldr	r3, [r7, #20]
 80171d6:	2b00      	cmp	r3, #0
 80171d8:	d1e1      	bne.n	801719e <sys_timeout_abs+0x86>
 80171da:	e000      	b.n	80171de <sys_timeout_abs+0xc6>
    return;
 80171dc:	bf00      	nop
      }
    }
  }
}
 80171de:	3718      	adds	r7, #24
 80171e0:	46bd      	mov	sp, r7
 80171e2:	bd80      	pop	{r7, pc}
 80171e4:	0801fb48 	.word	0x0801fb48
 80171e8:	0801fb9c 	.word	0x0801fb9c
 80171ec:	0801fbdc 	.word	0x0801fbdc
 80171f0:	24004958 	.word	0x24004958

080171f4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80171f4:	b580      	push	{r7, lr}
 80171f6:	b086      	sub	sp, #24
 80171f8:	af00      	add	r7, sp, #0
 80171fa:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80171fc:	687b      	ldr	r3, [r7, #4]
 80171fe:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8017200:	697b      	ldr	r3, [r7, #20]
 8017202:	685b      	ldr	r3, [r3, #4]
 8017204:	4798      	blx	r3

  now = sys_now();
 8017206:	f7f3 f979 	bl	800a4fc <sys_now>
 801720a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801720c:	697b      	ldr	r3, [r7, #20]
 801720e:	681a      	ldr	r2, [r3, #0]
 8017210:	4b0f      	ldr	r3, [pc, #60]	; (8017250 <lwip_cyclic_timer+0x5c>)
 8017212:	681b      	ldr	r3, [r3, #0]
 8017214:	4413      	add	r3, r2
 8017216:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8017218:	68fa      	ldr	r2, [r7, #12]
 801721a:	693b      	ldr	r3, [r7, #16]
 801721c:	1ad3      	subs	r3, r2, r3
 801721e:	0fdb      	lsrs	r3, r3, #31
 8017220:	f003 0301 	and.w	r3, r3, #1
 8017224:	b2db      	uxtb	r3, r3
 8017226:	2b00      	cmp	r3, #0
 8017228:	d009      	beq.n	801723e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801722a:	697b      	ldr	r3, [r7, #20]
 801722c:	681a      	ldr	r2, [r3, #0]
 801722e:	693b      	ldr	r3, [r7, #16]
 8017230:	4413      	add	r3, r2
 8017232:	687a      	ldr	r2, [r7, #4]
 8017234:	4907      	ldr	r1, [pc, #28]	; (8017254 <lwip_cyclic_timer+0x60>)
 8017236:	4618      	mov	r0, r3
 8017238:	f7ff ff6e 	bl	8017118 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801723c:	e004      	b.n	8017248 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801723e:	687a      	ldr	r2, [r7, #4]
 8017240:	4904      	ldr	r1, [pc, #16]	; (8017254 <lwip_cyclic_timer+0x60>)
 8017242:	68f8      	ldr	r0, [r7, #12]
 8017244:	f7ff ff68 	bl	8017118 <sys_timeout_abs>
}
 8017248:	bf00      	nop
 801724a:	3718      	adds	r7, #24
 801724c:	46bd      	mov	sp, r7
 801724e:	bd80      	pop	{r7, pc}
 8017250:	2400495c 	.word	0x2400495c
 8017254:	080171f5 	.word	0x080171f5

08017258 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8017258:	b580      	push	{r7, lr}
 801725a:	b082      	sub	sp, #8
 801725c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801725e:	2301      	movs	r3, #1
 8017260:	607b      	str	r3, [r7, #4]
 8017262:	e00e      	b.n	8017282 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8017264:	4a0a      	ldr	r2, [pc, #40]	; (8017290 <sys_timeouts_init+0x38>)
 8017266:	687b      	ldr	r3, [r7, #4]
 8017268:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801726c:	687b      	ldr	r3, [r7, #4]
 801726e:	00db      	lsls	r3, r3, #3
 8017270:	4a07      	ldr	r2, [pc, #28]	; (8017290 <sys_timeouts_init+0x38>)
 8017272:	4413      	add	r3, r2
 8017274:	461a      	mov	r2, r3
 8017276:	4907      	ldr	r1, [pc, #28]	; (8017294 <sys_timeouts_init+0x3c>)
 8017278:	f000 f80e 	bl	8017298 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801727c:	687b      	ldr	r3, [r7, #4]
 801727e:	3301      	adds	r3, #1
 8017280:	607b      	str	r3, [r7, #4]
 8017282:	687b      	ldr	r3, [r7, #4]
 8017284:	2b02      	cmp	r3, #2
 8017286:	d9ed      	bls.n	8017264 <sys_timeouts_init+0xc>
  }
}
 8017288:	bf00      	nop
 801728a:	3708      	adds	r7, #8
 801728c:	46bd      	mov	sp, r7
 801728e:	bd80      	pop	{r7, pc}
 8017290:	0802021c 	.word	0x0802021c
 8017294:	080171f5 	.word	0x080171f5

08017298 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8017298:	b580      	push	{r7, lr}
 801729a:	b086      	sub	sp, #24
 801729c:	af00      	add	r7, sp, #0
 801729e:	60f8      	str	r0, [r7, #12]
 80172a0:	60b9      	str	r1, [r7, #8]
 80172a2:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80172a4:	68fb      	ldr	r3, [r7, #12]
 80172a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80172aa:	d306      	bcc.n	80172ba <sys_timeout+0x22>
 80172ac:	4b0a      	ldr	r3, [pc, #40]	; (80172d8 <sys_timeout+0x40>)
 80172ae:	f240 1229 	movw	r2, #297	; 0x129
 80172b2:	490a      	ldr	r1, [pc, #40]	; (80172dc <sys_timeout+0x44>)
 80172b4:	480a      	ldr	r0, [pc, #40]	; (80172e0 <sys_timeout+0x48>)
 80172b6:	f003 ff23 	bl	801b100 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80172ba:	f7f3 f91f 	bl	800a4fc <sys_now>
 80172be:	4602      	mov	r2, r0
 80172c0:	68fb      	ldr	r3, [r7, #12]
 80172c2:	4413      	add	r3, r2
 80172c4:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80172c6:	687a      	ldr	r2, [r7, #4]
 80172c8:	68b9      	ldr	r1, [r7, #8]
 80172ca:	6978      	ldr	r0, [r7, #20]
 80172cc:	f7ff ff24 	bl	8017118 <sys_timeout_abs>
#endif
}
 80172d0:	bf00      	nop
 80172d2:	3718      	adds	r7, #24
 80172d4:	46bd      	mov	sp, r7
 80172d6:	bd80      	pop	{r7, pc}
 80172d8:	0801fb48 	.word	0x0801fb48
 80172dc:	0801fc04 	.word	0x0801fc04
 80172e0:	0801fbdc 	.word	0x0801fbdc

080172e4 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80172e4:	b580      	push	{r7, lr}
 80172e6:	b084      	sub	sp, #16
 80172e8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80172ea:	f7f3 f907 	bl	800a4fc <sys_now>
 80172ee:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 80172f0:	4b17      	ldr	r3, [pc, #92]	; (8017350 <sys_check_timeouts+0x6c>)
 80172f2:	681b      	ldr	r3, [r3, #0]
 80172f4:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80172f6:	68bb      	ldr	r3, [r7, #8]
 80172f8:	2b00      	cmp	r3, #0
 80172fa:	d022      	beq.n	8017342 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80172fc:	68bb      	ldr	r3, [r7, #8]
 80172fe:	685b      	ldr	r3, [r3, #4]
 8017300:	68fa      	ldr	r2, [r7, #12]
 8017302:	1ad3      	subs	r3, r2, r3
 8017304:	0fdb      	lsrs	r3, r3, #31
 8017306:	f003 0301 	and.w	r3, r3, #1
 801730a:	b2db      	uxtb	r3, r3
 801730c:	2b00      	cmp	r3, #0
 801730e:	d11a      	bne.n	8017346 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8017310:	68bb      	ldr	r3, [r7, #8]
 8017312:	681b      	ldr	r3, [r3, #0]
 8017314:	4a0e      	ldr	r2, [pc, #56]	; (8017350 <sys_check_timeouts+0x6c>)
 8017316:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8017318:	68bb      	ldr	r3, [r7, #8]
 801731a:	689b      	ldr	r3, [r3, #8]
 801731c:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801731e:	68bb      	ldr	r3, [r7, #8]
 8017320:	68db      	ldr	r3, [r3, #12]
 8017322:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8017324:	68bb      	ldr	r3, [r7, #8]
 8017326:	685b      	ldr	r3, [r3, #4]
 8017328:	4a0a      	ldr	r2, [pc, #40]	; (8017354 <sys_check_timeouts+0x70>)
 801732a:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801732c:	68b9      	ldr	r1, [r7, #8]
 801732e:	200a      	movs	r0, #10
 8017330:	f7f9 f988 	bl	8010644 <memp_free>
    if (handler != NULL) {
 8017334:	687b      	ldr	r3, [r7, #4]
 8017336:	2b00      	cmp	r3, #0
 8017338:	d0da      	beq.n	80172f0 <sys_check_timeouts+0xc>
      handler(arg);
 801733a:	687b      	ldr	r3, [r7, #4]
 801733c:	6838      	ldr	r0, [r7, #0]
 801733e:	4798      	blx	r3
  do {
 8017340:	e7d6      	b.n	80172f0 <sys_check_timeouts+0xc>
      return;
 8017342:	bf00      	nop
 8017344:	e000      	b.n	8017348 <sys_check_timeouts+0x64>
      return;
 8017346:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8017348:	3710      	adds	r7, #16
 801734a:	46bd      	mov	sp, r7
 801734c:	bd80      	pop	{r7, pc}
 801734e:	bf00      	nop
 8017350:	24004958 	.word	0x24004958
 8017354:	2400495c 	.word	0x2400495c

08017358 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8017358:	b580      	push	{r7, lr}
 801735a:	b082      	sub	sp, #8
 801735c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801735e:	4b16      	ldr	r3, [pc, #88]	; (80173b8 <sys_timeouts_sleeptime+0x60>)
 8017360:	681b      	ldr	r3, [r3, #0]
 8017362:	2b00      	cmp	r3, #0
 8017364:	d102      	bne.n	801736c <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8017366:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801736a:	e020      	b.n	80173ae <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801736c:	f7f3 f8c6 	bl	800a4fc <sys_now>
 8017370:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8017372:	4b11      	ldr	r3, [pc, #68]	; (80173b8 <sys_timeouts_sleeptime+0x60>)
 8017374:	681b      	ldr	r3, [r3, #0]
 8017376:	685a      	ldr	r2, [r3, #4]
 8017378:	687b      	ldr	r3, [r7, #4]
 801737a:	1ad3      	subs	r3, r2, r3
 801737c:	0fdb      	lsrs	r3, r3, #31
 801737e:	f003 0301 	and.w	r3, r3, #1
 8017382:	b2db      	uxtb	r3, r3
 8017384:	2b00      	cmp	r3, #0
 8017386:	d001      	beq.n	801738c <sys_timeouts_sleeptime+0x34>
    return 0;
 8017388:	2300      	movs	r3, #0
 801738a:	e010      	b.n	80173ae <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801738c:	4b0a      	ldr	r3, [pc, #40]	; (80173b8 <sys_timeouts_sleeptime+0x60>)
 801738e:	681b      	ldr	r3, [r3, #0]
 8017390:	685a      	ldr	r2, [r3, #4]
 8017392:	687b      	ldr	r3, [r7, #4]
 8017394:	1ad3      	subs	r3, r2, r3
 8017396:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8017398:	683b      	ldr	r3, [r7, #0]
 801739a:	2b00      	cmp	r3, #0
 801739c:	da06      	bge.n	80173ac <sys_timeouts_sleeptime+0x54>
 801739e:	4b07      	ldr	r3, [pc, #28]	; (80173bc <sys_timeouts_sleeptime+0x64>)
 80173a0:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80173a4:	4906      	ldr	r1, [pc, #24]	; (80173c0 <sys_timeouts_sleeptime+0x68>)
 80173a6:	4807      	ldr	r0, [pc, #28]	; (80173c4 <sys_timeouts_sleeptime+0x6c>)
 80173a8:	f003 feaa 	bl	801b100 <iprintf>
    return ret;
 80173ac:	683b      	ldr	r3, [r7, #0]
  }
}
 80173ae:	4618      	mov	r0, r3
 80173b0:	3708      	adds	r7, #8
 80173b2:	46bd      	mov	sp, r7
 80173b4:	bd80      	pop	{r7, pc}
 80173b6:	bf00      	nop
 80173b8:	24004958 	.word	0x24004958
 80173bc:	0801fb48 	.word	0x0801fb48
 80173c0:	0801fc3c 	.word	0x0801fc3c
 80173c4:	0801fbdc 	.word	0x0801fbdc

080173c8 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80173c8:	b580      	push	{r7, lr}
 80173ca:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80173cc:	f003 feb0 	bl	801b130 <rand>
 80173d0:	4603      	mov	r3, r0
 80173d2:	b29b      	uxth	r3, r3
 80173d4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80173d8:	b29b      	uxth	r3, r3
 80173da:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80173de:	b29a      	uxth	r2, r3
 80173e0:	4b01      	ldr	r3, [pc, #4]	; (80173e8 <udp_init+0x20>)
 80173e2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80173e4:	bf00      	nop
 80173e6:	bd80      	pop	{r7, pc}
 80173e8:	24000030 	.word	0x24000030

080173ec <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80173ec:	b580      	push	{r7, lr}
 80173ee:	b084      	sub	sp, #16
 80173f0:	af00      	add	r7, sp, #0
 80173f2:	60f8      	str	r0, [r7, #12]
 80173f4:	60b9      	str	r1, [r7, #8]
 80173f6:	4613      	mov	r3, r2
 80173f8:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80173fa:	68fb      	ldr	r3, [r7, #12]
 80173fc:	2b00      	cmp	r3, #0
 80173fe:	d105      	bne.n	801740c <udp_input_local_match+0x20>
 8017400:	4b27      	ldr	r3, [pc, #156]	; (80174a0 <udp_input_local_match+0xb4>)
 8017402:	2287      	movs	r2, #135	; 0x87
 8017404:	4927      	ldr	r1, [pc, #156]	; (80174a4 <udp_input_local_match+0xb8>)
 8017406:	4828      	ldr	r0, [pc, #160]	; (80174a8 <udp_input_local_match+0xbc>)
 8017408:	f003 fe7a 	bl	801b100 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801740c:	68bb      	ldr	r3, [r7, #8]
 801740e:	2b00      	cmp	r3, #0
 8017410:	d105      	bne.n	801741e <udp_input_local_match+0x32>
 8017412:	4b23      	ldr	r3, [pc, #140]	; (80174a0 <udp_input_local_match+0xb4>)
 8017414:	2288      	movs	r2, #136	; 0x88
 8017416:	4925      	ldr	r1, [pc, #148]	; (80174ac <udp_input_local_match+0xc0>)
 8017418:	4823      	ldr	r0, [pc, #140]	; (80174a8 <udp_input_local_match+0xbc>)
 801741a:	f003 fe71 	bl	801b100 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801741e:	68fb      	ldr	r3, [r7, #12]
 8017420:	7a1b      	ldrb	r3, [r3, #8]
 8017422:	2b00      	cmp	r3, #0
 8017424:	d00b      	beq.n	801743e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8017426:	68fb      	ldr	r3, [r7, #12]
 8017428:	7a1a      	ldrb	r2, [r3, #8]
 801742a:	4b21      	ldr	r3, [pc, #132]	; (80174b0 <udp_input_local_match+0xc4>)
 801742c:	685b      	ldr	r3, [r3, #4]
 801742e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017432:	3301      	adds	r3, #1
 8017434:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017436:	429a      	cmp	r2, r3
 8017438:	d001      	beq.n	801743e <udp_input_local_match+0x52>
    return 0;
 801743a:	2300      	movs	r3, #0
 801743c:	e02b      	b.n	8017496 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801743e:	79fb      	ldrb	r3, [r7, #7]
 8017440:	2b00      	cmp	r3, #0
 8017442:	d018      	beq.n	8017476 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8017444:	68fb      	ldr	r3, [r7, #12]
 8017446:	2b00      	cmp	r3, #0
 8017448:	d013      	beq.n	8017472 <udp_input_local_match+0x86>
 801744a:	68fb      	ldr	r3, [r7, #12]
 801744c:	681b      	ldr	r3, [r3, #0]
 801744e:	2b00      	cmp	r3, #0
 8017450:	d00f      	beq.n	8017472 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8017452:	4b17      	ldr	r3, [pc, #92]	; (80174b0 <udp_input_local_match+0xc4>)
 8017454:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8017456:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801745a:	d00a      	beq.n	8017472 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801745c:	68fb      	ldr	r3, [r7, #12]
 801745e:	681a      	ldr	r2, [r3, #0]
 8017460:	4b13      	ldr	r3, [pc, #76]	; (80174b0 <udp_input_local_match+0xc4>)
 8017462:	695b      	ldr	r3, [r3, #20]
 8017464:	405a      	eors	r2, r3
 8017466:	68bb      	ldr	r3, [r7, #8]
 8017468:	3308      	adds	r3, #8
 801746a:	681b      	ldr	r3, [r3, #0]
 801746c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801746e:	2b00      	cmp	r3, #0
 8017470:	d110      	bne.n	8017494 <udp_input_local_match+0xa8>
          return 1;
 8017472:	2301      	movs	r3, #1
 8017474:	e00f      	b.n	8017496 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8017476:	68fb      	ldr	r3, [r7, #12]
 8017478:	2b00      	cmp	r3, #0
 801747a:	d009      	beq.n	8017490 <udp_input_local_match+0xa4>
 801747c:	68fb      	ldr	r3, [r7, #12]
 801747e:	681b      	ldr	r3, [r3, #0]
 8017480:	2b00      	cmp	r3, #0
 8017482:	d005      	beq.n	8017490 <udp_input_local_match+0xa4>
 8017484:	68fb      	ldr	r3, [r7, #12]
 8017486:	681a      	ldr	r2, [r3, #0]
 8017488:	4b09      	ldr	r3, [pc, #36]	; (80174b0 <udp_input_local_match+0xc4>)
 801748a:	695b      	ldr	r3, [r3, #20]
 801748c:	429a      	cmp	r2, r3
 801748e:	d101      	bne.n	8017494 <udp_input_local_match+0xa8>
        return 1;
 8017490:	2301      	movs	r3, #1
 8017492:	e000      	b.n	8017496 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8017494:	2300      	movs	r3, #0
}
 8017496:	4618      	mov	r0, r3
 8017498:	3710      	adds	r7, #16
 801749a:	46bd      	mov	sp, r7
 801749c:	bd80      	pop	{r7, pc}
 801749e:	bf00      	nop
 80174a0:	0801fc50 	.word	0x0801fc50
 80174a4:	0801fc9c 	.word	0x0801fc9c
 80174a8:	0801fcc0 	.word	0x0801fcc0
 80174ac:	0801fce8 	.word	0x0801fce8
 80174b0:	24009da0 	.word	0x24009da0

080174b4 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80174b4:	b590      	push	{r4, r7, lr}
 80174b6:	b08d      	sub	sp, #52	; 0x34
 80174b8:	af02      	add	r7, sp, #8
 80174ba:	6078      	str	r0, [r7, #4]
 80174bc:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80174be:	2300      	movs	r3, #0
 80174c0:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80174c2:	687b      	ldr	r3, [r7, #4]
 80174c4:	2b00      	cmp	r3, #0
 80174c6:	d105      	bne.n	80174d4 <udp_input+0x20>
 80174c8:	4b7c      	ldr	r3, [pc, #496]	; (80176bc <udp_input+0x208>)
 80174ca:	22cf      	movs	r2, #207	; 0xcf
 80174cc:	497c      	ldr	r1, [pc, #496]	; (80176c0 <udp_input+0x20c>)
 80174ce:	487d      	ldr	r0, [pc, #500]	; (80176c4 <udp_input+0x210>)
 80174d0:	f003 fe16 	bl	801b100 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80174d4:	683b      	ldr	r3, [r7, #0]
 80174d6:	2b00      	cmp	r3, #0
 80174d8:	d105      	bne.n	80174e6 <udp_input+0x32>
 80174da:	4b78      	ldr	r3, [pc, #480]	; (80176bc <udp_input+0x208>)
 80174dc:	22d0      	movs	r2, #208	; 0xd0
 80174de:	497a      	ldr	r1, [pc, #488]	; (80176c8 <udp_input+0x214>)
 80174e0:	4878      	ldr	r0, [pc, #480]	; (80176c4 <udp_input+0x210>)
 80174e2:	f003 fe0d 	bl	801b100 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80174e6:	687b      	ldr	r3, [r7, #4]
 80174e8:	895b      	ldrh	r3, [r3, #10]
 80174ea:	2b07      	cmp	r3, #7
 80174ec:	d803      	bhi.n	80174f6 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80174ee:	6878      	ldr	r0, [r7, #4]
 80174f0:	f7f9 ff48 	bl	8011384 <pbuf_free>
    goto end;
 80174f4:	e0de      	b.n	80176b4 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80174f6:	687b      	ldr	r3, [r7, #4]
 80174f8:	685b      	ldr	r3, [r3, #4]
 80174fa:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80174fc:	4b73      	ldr	r3, [pc, #460]	; (80176cc <udp_input+0x218>)
 80174fe:	695a      	ldr	r2, [r3, #20]
 8017500:	4b72      	ldr	r3, [pc, #456]	; (80176cc <udp_input+0x218>)
 8017502:	681b      	ldr	r3, [r3, #0]
 8017504:	4619      	mov	r1, r3
 8017506:	4610      	mov	r0, r2
 8017508:	f7f7 fd12 	bl	800ef30 <ip4_addr_isbroadcast_u32>
 801750c:	4603      	mov	r3, r0
 801750e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8017510:	697b      	ldr	r3, [r7, #20]
 8017512:	881b      	ldrh	r3, [r3, #0]
 8017514:	b29b      	uxth	r3, r3
 8017516:	4618      	mov	r0, r3
 8017518:	f7f5 ff9e 	bl	800d458 <lwip_htons>
 801751c:	4603      	mov	r3, r0
 801751e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8017520:	697b      	ldr	r3, [r7, #20]
 8017522:	885b      	ldrh	r3, [r3, #2]
 8017524:	b29b      	uxth	r3, r3
 8017526:	4618      	mov	r0, r3
 8017528:	f7f5 ff96 	bl	800d458 <lwip_htons>
 801752c:	4603      	mov	r3, r0
 801752e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8017530:	2300      	movs	r3, #0
 8017532:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8017534:	2300      	movs	r3, #0
 8017536:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8017538:	2300      	movs	r3, #0
 801753a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801753c:	4b64      	ldr	r3, [pc, #400]	; (80176d0 <udp_input+0x21c>)
 801753e:	681b      	ldr	r3, [r3, #0]
 8017540:	627b      	str	r3, [r7, #36]	; 0x24
 8017542:	e054      	b.n	80175ee <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8017544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017546:	8a5b      	ldrh	r3, [r3, #18]
 8017548:	89fa      	ldrh	r2, [r7, #14]
 801754a:	429a      	cmp	r2, r3
 801754c:	d14a      	bne.n	80175e4 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801754e:	7cfb      	ldrb	r3, [r7, #19]
 8017550:	461a      	mov	r2, r3
 8017552:	6839      	ldr	r1, [r7, #0]
 8017554:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017556:	f7ff ff49 	bl	80173ec <udp_input_local_match>
 801755a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801755c:	2b00      	cmp	r3, #0
 801755e:	d041      	beq.n	80175e4 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8017560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017562:	7c1b      	ldrb	r3, [r3, #16]
 8017564:	f003 0304 	and.w	r3, r3, #4
 8017568:	2b00      	cmp	r3, #0
 801756a:	d11d      	bne.n	80175a8 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801756c:	69fb      	ldr	r3, [r7, #28]
 801756e:	2b00      	cmp	r3, #0
 8017570:	d102      	bne.n	8017578 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8017572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017574:	61fb      	str	r3, [r7, #28]
 8017576:	e017      	b.n	80175a8 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8017578:	7cfb      	ldrb	r3, [r7, #19]
 801757a:	2b00      	cmp	r3, #0
 801757c:	d014      	beq.n	80175a8 <udp_input+0xf4>
 801757e:	4b53      	ldr	r3, [pc, #332]	; (80176cc <udp_input+0x218>)
 8017580:	695b      	ldr	r3, [r3, #20]
 8017582:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017586:	d10f      	bne.n	80175a8 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8017588:	69fb      	ldr	r3, [r7, #28]
 801758a:	681a      	ldr	r2, [r3, #0]
 801758c:	683b      	ldr	r3, [r7, #0]
 801758e:	3304      	adds	r3, #4
 8017590:	681b      	ldr	r3, [r3, #0]
 8017592:	429a      	cmp	r2, r3
 8017594:	d008      	beq.n	80175a8 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8017596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017598:	681a      	ldr	r2, [r3, #0]
 801759a:	683b      	ldr	r3, [r7, #0]
 801759c:	3304      	adds	r3, #4
 801759e:	681b      	ldr	r3, [r3, #0]
 80175a0:	429a      	cmp	r2, r3
 80175a2:	d101      	bne.n	80175a8 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80175a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175a6:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80175a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175aa:	8a9b      	ldrh	r3, [r3, #20]
 80175ac:	8a3a      	ldrh	r2, [r7, #16]
 80175ae:	429a      	cmp	r2, r3
 80175b0:	d118      	bne.n	80175e4 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80175b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175b4:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80175b6:	2b00      	cmp	r3, #0
 80175b8:	d005      	beq.n	80175c6 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80175ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175bc:	685a      	ldr	r2, [r3, #4]
 80175be:	4b43      	ldr	r3, [pc, #268]	; (80176cc <udp_input+0x218>)
 80175c0:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80175c2:	429a      	cmp	r2, r3
 80175c4:	d10e      	bne.n	80175e4 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80175c6:	6a3b      	ldr	r3, [r7, #32]
 80175c8:	2b00      	cmp	r3, #0
 80175ca:	d014      	beq.n	80175f6 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80175cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175ce:	68da      	ldr	r2, [r3, #12]
 80175d0:	6a3b      	ldr	r3, [r7, #32]
 80175d2:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80175d4:	4b3e      	ldr	r3, [pc, #248]	; (80176d0 <udp_input+0x21c>)
 80175d6:	681a      	ldr	r2, [r3, #0]
 80175d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175da:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80175dc:	4a3c      	ldr	r2, [pc, #240]	; (80176d0 <udp_input+0x21c>)
 80175de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175e0:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80175e2:	e008      	b.n	80175f6 <udp_input+0x142>
      }
    }

    prev = pcb;
 80175e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175e6:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80175e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175ea:	68db      	ldr	r3, [r3, #12]
 80175ec:	627b      	str	r3, [r7, #36]	; 0x24
 80175ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175f0:	2b00      	cmp	r3, #0
 80175f2:	d1a7      	bne.n	8017544 <udp_input+0x90>
 80175f4:	e000      	b.n	80175f8 <udp_input+0x144>
        break;
 80175f6:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80175f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175fa:	2b00      	cmp	r3, #0
 80175fc:	d101      	bne.n	8017602 <udp_input+0x14e>
    pcb = uncon_pcb;
 80175fe:	69fb      	ldr	r3, [r7, #28]
 8017600:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8017602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017604:	2b00      	cmp	r3, #0
 8017606:	d002      	beq.n	801760e <udp_input+0x15a>
    for_us = 1;
 8017608:	2301      	movs	r3, #1
 801760a:	76fb      	strb	r3, [r7, #27]
 801760c:	e00a      	b.n	8017624 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801760e:	683b      	ldr	r3, [r7, #0]
 8017610:	3304      	adds	r3, #4
 8017612:	681a      	ldr	r2, [r3, #0]
 8017614:	4b2d      	ldr	r3, [pc, #180]	; (80176cc <udp_input+0x218>)
 8017616:	695b      	ldr	r3, [r3, #20]
 8017618:	429a      	cmp	r2, r3
 801761a:	bf0c      	ite	eq
 801761c:	2301      	moveq	r3, #1
 801761e:	2300      	movne	r3, #0
 8017620:	b2db      	uxtb	r3, r3
 8017622:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8017624:	7efb      	ldrb	r3, [r7, #27]
 8017626:	2b00      	cmp	r3, #0
 8017628:	d041      	beq.n	80176ae <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801762a:	2108      	movs	r1, #8
 801762c:	6878      	ldr	r0, [r7, #4]
 801762e:	f7f9 fe23 	bl	8011278 <pbuf_remove_header>
 8017632:	4603      	mov	r3, r0
 8017634:	2b00      	cmp	r3, #0
 8017636:	d00a      	beq.n	801764e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8017638:	4b20      	ldr	r3, [pc, #128]	; (80176bc <udp_input+0x208>)
 801763a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801763e:	4925      	ldr	r1, [pc, #148]	; (80176d4 <udp_input+0x220>)
 8017640:	4820      	ldr	r0, [pc, #128]	; (80176c4 <udp_input+0x210>)
 8017642:	f003 fd5d 	bl	801b100 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8017646:	6878      	ldr	r0, [r7, #4]
 8017648:	f7f9 fe9c 	bl	8011384 <pbuf_free>
      goto end;
 801764c:	e032      	b.n	80176b4 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801764e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017650:	2b00      	cmp	r3, #0
 8017652:	d012      	beq.n	801767a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8017654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017656:	699b      	ldr	r3, [r3, #24]
 8017658:	2b00      	cmp	r3, #0
 801765a:	d00a      	beq.n	8017672 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801765c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801765e:	699c      	ldr	r4, [r3, #24]
 8017660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017662:	69d8      	ldr	r0, [r3, #28]
 8017664:	8a3b      	ldrh	r3, [r7, #16]
 8017666:	9300      	str	r3, [sp, #0]
 8017668:	4b1b      	ldr	r3, [pc, #108]	; (80176d8 <udp_input+0x224>)
 801766a:	687a      	ldr	r2, [r7, #4]
 801766c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801766e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8017670:	e021      	b.n	80176b6 <udp_input+0x202>
        pbuf_free(p);
 8017672:	6878      	ldr	r0, [r7, #4]
 8017674:	f7f9 fe86 	bl	8011384 <pbuf_free>
        goto end;
 8017678:	e01c      	b.n	80176b4 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801767a:	7cfb      	ldrb	r3, [r7, #19]
 801767c:	2b00      	cmp	r3, #0
 801767e:	d112      	bne.n	80176a6 <udp_input+0x1f2>
 8017680:	4b12      	ldr	r3, [pc, #72]	; (80176cc <udp_input+0x218>)
 8017682:	695b      	ldr	r3, [r3, #20]
 8017684:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017688:	2be0      	cmp	r3, #224	; 0xe0
 801768a:	d00c      	beq.n	80176a6 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801768c:	4b0f      	ldr	r3, [pc, #60]	; (80176cc <udp_input+0x218>)
 801768e:	899b      	ldrh	r3, [r3, #12]
 8017690:	3308      	adds	r3, #8
 8017692:	b29b      	uxth	r3, r3
 8017694:	b21b      	sxth	r3, r3
 8017696:	4619      	mov	r1, r3
 8017698:	6878      	ldr	r0, [r7, #4]
 801769a:	f7f9 fe60 	bl	801135e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801769e:	2103      	movs	r1, #3
 80176a0:	6878      	ldr	r0, [r7, #4]
 80176a2:	f7f7 f849 	bl	800e738 <icmp_dest_unreach>
      pbuf_free(p);
 80176a6:	6878      	ldr	r0, [r7, #4]
 80176a8:	f7f9 fe6c 	bl	8011384 <pbuf_free>
  return;
 80176ac:	e003      	b.n	80176b6 <udp_input+0x202>
    pbuf_free(p);
 80176ae:	6878      	ldr	r0, [r7, #4]
 80176b0:	f7f9 fe68 	bl	8011384 <pbuf_free>
  return;
 80176b4:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80176b6:	372c      	adds	r7, #44	; 0x2c
 80176b8:	46bd      	mov	sp, r7
 80176ba:	bd90      	pop	{r4, r7, pc}
 80176bc:	0801fc50 	.word	0x0801fc50
 80176c0:	0801fd10 	.word	0x0801fd10
 80176c4:	0801fcc0 	.word	0x0801fcc0
 80176c8:	0801fd28 	.word	0x0801fd28
 80176cc:	24009da0 	.word	0x24009da0
 80176d0:	2400ce84 	.word	0x2400ce84
 80176d4:	0801fd44 	.word	0x0801fd44
 80176d8:	24009db0 	.word	0x24009db0

080176dc <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80176dc:	b480      	push	{r7}
 80176de:	b085      	sub	sp, #20
 80176e0:	af00      	add	r7, sp, #0
 80176e2:	6078      	str	r0, [r7, #4]
 80176e4:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80176e6:	687b      	ldr	r3, [r7, #4]
 80176e8:	2b00      	cmp	r3, #0
 80176ea:	d01e      	beq.n	801772a <udp_netif_ip_addr_changed+0x4e>
 80176ec:	687b      	ldr	r3, [r7, #4]
 80176ee:	681b      	ldr	r3, [r3, #0]
 80176f0:	2b00      	cmp	r3, #0
 80176f2:	d01a      	beq.n	801772a <udp_netif_ip_addr_changed+0x4e>
 80176f4:	683b      	ldr	r3, [r7, #0]
 80176f6:	2b00      	cmp	r3, #0
 80176f8:	d017      	beq.n	801772a <udp_netif_ip_addr_changed+0x4e>
 80176fa:	683b      	ldr	r3, [r7, #0]
 80176fc:	681b      	ldr	r3, [r3, #0]
 80176fe:	2b00      	cmp	r3, #0
 8017700:	d013      	beq.n	801772a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8017702:	4b0d      	ldr	r3, [pc, #52]	; (8017738 <udp_netif_ip_addr_changed+0x5c>)
 8017704:	681b      	ldr	r3, [r3, #0]
 8017706:	60fb      	str	r3, [r7, #12]
 8017708:	e00c      	b.n	8017724 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801770a:	68fb      	ldr	r3, [r7, #12]
 801770c:	681a      	ldr	r2, [r3, #0]
 801770e:	687b      	ldr	r3, [r7, #4]
 8017710:	681b      	ldr	r3, [r3, #0]
 8017712:	429a      	cmp	r2, r3
 8017714:	d103      	bne.n	801771e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8017716:	683b      	ldr	r3, [r7, #0]
 8017718:	681a      	ldr	r2, [r3, #0]
 801771a:	68fb      	ldr	r3, [r7, #12]
 801771c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801771e:	68fb      	ldr	r3, [r7, #12]
 8017720:	68db      	ldr	r3, [r3, #12]
 8017722:	60fb      	str	r3, [r7, #12]
 8017724:	68fb      	ldr	r3, [r7, #12]
 8017726:	2b00      	cmp	r3, #0
 8017728:	d1ef      	bne.n	801770a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801772a:	bf00      	nop
 801772c:	3714      	adds	r7, #20
 801772e:	46bd      	mov	sp, r7
 8017730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017734:	4770      	bx	lr
 8017736:	bf00      	nop
 8017738:	2400ce84 	.word	0x2400ce84

0801773c <_ZN7ConsoleC1EP20__UART_HandleTypeDef>:



osSemaphoreDef(console_sem);

Console::Console(UART_HandleTypeDef* uart) : console_uart(uart) {
 801773c:	b580      	push	{r7, lr}
 801773e:	b082      	sub	sp, #8
 8017740:	af00      	add	r7, sp, #0
 8017742:	6078      	str	r0, [r7, #4]
 8017744:	6039      	str	r1, [r7, #0]
 8017746:	687b      	ldr	r3, [r7, #4]
 8017748:	683a      	ldr	r2, [r7, #0]
 801774a:	601a      	str	r2, [r3, #0]
	console_uart = uart;
 801774c:	687b      	ldr	r3, [r7, #4]
 801774e:	683a      	ldr	r2, [r7, #0]
 8017750:	601a      	str	r2, [r3, #0]
	console_semaphore = osSemaphoreCreate(osSemaphore(console_sem), 3);
 8017752:	2103      	movs	r1, #3
 8017754:	4805      	ldr	r0, [pc, #20]	; (801776c <_ZN7ConsoleC1EP20__UART_HandleTypeDef+0x30>)
 8017756:	f7f3 f8eb 	bl	800a930 <osSemaphoreCreate>
 801775a:	4602      	mov	r2, r0
 801775c:	687b      	ldr	r3, [r7, #4]
 801775e:	605a      	str	r2, [r3, #4]
}
 8017760:	687b      	ldr	r3, [r7, #4]
 8017762:	4618      	mov	r0, r3
 8017764:	3708      	adds	r7, #8
 8017766:	46bd      	mov	sp, r7
 8017768:	bd80      	pop	{r7, pc}
 801776a:	bf00      	nop
 801776c:	08020234 	.word	0x08020234

08017770 <_ZN7Console8transmitEPhm>:

void Console::unlock() {
	osSemaphoreRelease(console_semaphore);
}

void Console::transmit(uint8_t* buffer, uint32_t length) {
 8017770:	b580      	push	{r7, lr}
 8017772:	b084      	sub	sp, #16
 8017774:	af00      	add	r7, sp, #0
 8017776:	60f8      	str	r0, [r7, #12]
 8017778:	60b9      	str	r1, [r7, #8]
 801777a:	607a      	str	r2, [r7, #4]
	while(HAL_HSEM_IsSemTaken(HARDWARE_SEMAPHORE));
 801777c:	2002      	movs	r0, #2
 801777e:	f7ee faad 	bl	8005cdc <HAL_HSEM_IsSemTaken>
 8017782:	4603      	mov	r3, r0
 8017784:	2b00      	cmp	r3, #0
 8017786:	bf14      	ite	ne
 8017788:	2301      	movne	r3, #1
 801778a:	2300      	moveq	r3, #0
 801778c:	b2db      	uxtb	r3, r3
 801778e:	2b00      	cmp	r3, #0
 8017790:	d000      	beq.n	8017794 <_ZN7Console8transmitEPhm+0x24>
 8017792:	e7f3      	b.n	801777c <_ZN7Console8transmitEPhm+0xc>

	HAL_HSEM_Take(HARDWARE_SEMAPHORE, 2);
 8017794:	2102      	movs	r1, #2
 8017796:	2002      	movs	r0, #2
 8017798:	f7ee fa64 	bl	8005c64 <HAL_HSEM_Take>
	HAL_UART_Transmit(console_uart, buffer, length, 0xFFFFFF);
 801779c:	68fb      	ldr	r3, [r7, #12]
 801779e:	6818      	ldr	r0, [r3, #0]
 80177a0:	687b      	ldr	r3, [r7, #4]
 80177a2:	b29a      	uxth	r2, r3
 80177a4:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80177a8:	68b9      	ldr	r1, [r7, #8]
 80177aa:	f7f1 fa3b 	bl	8008c24 <HAL_UART_Transmit>
	HAL_HSEM_Release(HARDWARE_SEMAPHORE, 2);
 80177ae:	2102      	movs	r1, #2
 80177b0:	2002      	movs	r0, #2
 80177b2:	f7ee faa9 	bl	8005d08 <HAL_HSEM_Release>
}
 80177b6:	bf00      	nop
 80177b8:	3710      	adds	r7, #16
 80177ba:	46bd      	mov	sp, r7
 80177bc:	bd80      	pop	{r7, pc}

080177be <_ZN7Console5printEPKc>:

void Console::print(const char* buffer) {
 80177be:	b580      	push	{r7, lr}
 80177c0:	b082      	sub	sp, #8
 80177c2:	af00      	add	r7, sp, #0
 80177c4:	6078      	str	r0, [r7, #4]
 80177c6:	6039      	str	r1, [r7, #0]
	transmit((uint8_t*) buffer, strlen(buffer));
 80177c8:	6838      	ldr	r0, [r7, #0]
 80177ca:	f7e8 fde3 	bl	8000394 <strlen>
 80177ce:	4603      	mov	r3, r0
 80177d0:	461a      	mov	r2, r3
 80177d2:	6839      	ldr	r1, [r7, #0]
 80177d4:	6878      	ldr	r0, [r7, #4]
 80177d6:	f7ff ffcb 	bl	8017770 <_ZN7Console8transmitEPhm>
}
 80177da:	bf00      	nop
 80177dc:	3708      	adds	r7, #8
 80177de:	46bd      	mov	sp, r7
 80177e0:	bd80      	pop	{r7, pc}

080177e2 <_ZN7Console6printfEPKcz>:

void Console::printf(const char *format, ...) {
 80177e2:	b40e      	push	{r1, r2, r3}
 80177e4:	b580      	push	{r7, lr}
 80177e6:	b085      	sub	sp, #20
 80177e8:	af00      	add	r7, sp, #0
 80177ea:	6078      	str	r0, [r7, #4]
	va_list args;
	va_start(args, format);
 80177ec:	f107 0320 	add.w	r3, r7, #32
 80177f0:	60fb      	str	r3, [r7, #12]

	if(vsprintf(buffer, format, args) > 0) {
 80177f2:	687b      	ldr	r3, [r7, #4]
 80177f4:	3308      	adds	r3, #8
 80177f6:	68fa      	ldr	r2, [r7, #12]
 80177f8:	69f9      	ldr	r1, [r7, #28]
 80177fa:	4618      	mov	r0, r3
 80177fc:	f003 fd46 	bl	801b28c <vsiprintf>
 8017800:	4603      	mov	r3, r0
 8017802:	2b00      	cmp	r3, #0
 8017804:	bfcc      	ite	gt
 8017806:	2301      	movgt	r3, #1
 8017808:	2300      	movle	r3, #0
 801780a:	b2db      	uxtb	r3, r3
 801780c:	2b00      	cmp	r3, #0
 801780e:	d005      	beq.n	801781c <_ZN7Console6printfEPKcz+0x3a>
		print(buffer);
 8017810:	687b      	ldr	r3, [r7, #4]
 8017812:	3308      	adds	r3, #8
 8017814:	4619      	mov	r1, r3
 8017816:	6878      	ldr	r0, [r7, #4]
 8017818:	f7ff ffd1 	bl	80177be <_ZN7Console5printEPKc>
	}

	va_end(args);
}
 801781c:	bf00      	nop
 801781e:	3714      	adds	r7, #20
 8017820:	46bd      	mov	sp, r7
 8017822:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8017826:	b003      	add	sp, #12
 8017828:	4770      	bx	lr
	...

0801782c <_Z41__static_initialization_and_destruction_0ii>:


Console console(&huart3);
Monitor monitor;
Profiler profiler;
Terminal terminal;
 801782c:	b580      	push	{r7, lr}
 801782e:	b082      	sub	sp, #8
 8017830:	af00      	add	r7, sp, #0
 8017832:	6078      	str	r0, [r7, #4]
 8017834:	6039      	str	r1, [r7, #0]
 8017836:	687b      	ldr	r3, [r7, #4]
 8017838:	2b01      	cmp	r3, #1
 801783a:	d108      	bne.n	801784e <_Z41__static_initialization_and_destruction_0ii+0x22>
 801783c:	683b      	ldr	r3, [r7, #0]
 801783e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017842:	4293      	cmp	r3, r2
 8017844:	d103      	bne.n	801784e <_Z41__static_initialization_and_destruction_0ii+0x22>
Console console(&huart3);
 8017846:	4904      	ldr	r1, [pc, #16]	; (8017858 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8017848:	4804      	ldr	r0, [pc, #16]	; (801785c <_Z41__static_initialization_and_destruction_0ii+0x30>)
 801784a:	f7ff ff77 	bl	801773c <_ZN7ConsoleC1EP20__UART_HandleTypeDef>
Terminal terminal;
 801784e:	bf00      	nop
 8017850:	3708      	adds	r7, #8
 8017852:	46bd      	mov	sp, r7
 8017854:	bd80      	pop	{r7, pc}
 8017856:	bf00      	nop
 8017858:	24009784 	.word	0x24009784
 801785c:	24004964 	.word	0x24004964

08017860 <_GLOBAL__sub_I_console>:
 8017860:	b580      	push	{r7, lr}
 8017862:	af00      	add	r7, sp, #0
 8017864:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8017868:	2001      	movs	r0, #1
 801786a:	f7ff ffdf 	bl	801782c <_Z41__static_initialization_and_destruction_0ii>
 801786e:	bd80      	pop	{r7, pc}

08017870 <_Znwj>:

#include "Operators.h"

#include "cmsis_os.h"

void * operator new(size_t size) {
 8017870:	b580      	push	{r7, lr}
 8017872:	b082      	sub	sp, #8
 8017874:	af00      	add	r7, sp, #0
 8017876:	6078      	str	r0, [r7, #4]
    return pvPortMalloc(size);
 8017878:	6878      	ldr	r0, [r7, #4]
 801787a:	f7f3 f9ef 	bl	800ac5c <pvPortMalloc>
 801787e:	4603      	mov	r3, r0
}
 8017880:	4618      	mov	r0, r3
 8017882:	3708      	adds	r7, #8
 8017884:	46bd      	mov	sp, r7
 8017886:	bd80      	pop	{r7, pc}

08017888 <_ZdlPv>:

void * operator new[](size_t size) {
    return pvPortMalloc(size);
}

void operator delete(void* ptr) {
 8017888:	b580      	push	{r7, lr}
 801788a:	b082      	sub	sp, #8
 801788c:	af00      	add	r7, sp, #0
 801788e:	6078      	str	r0, [r7, #4]
    vPortFree(ptr);
 8017890:	6878      	ldr	r0, [r7, #4]
 8017892:	f7f3 faa5 	bl	800ade0 <vPortFree>
}
 8017896:	bf00      	nop
 8017898:	3708      	adds	r7, #8
 801789a:	46bd      	mov	sp, r7
 801789c:	bd80      	pop	{r7, pc}
	...

080178a0 <_ZN8IODriverD1Ev>:
#include <functional>


class IODriver {
public:
	virtual ~IODriver() {}
 80178a0:	b480      	push	{r7}
 80178a2:	b083      	sub	sp, #12
 80178a4:	af00      	add	r7, sp, #0
 80178a6:	6078      	str	r0, [r7, #4]
 80178a8:	4a04      	ldr	r2, [pc, #16]	; (80178bc <_ZN8IODriverD1Ev+0x1c>)
 80178aa:	687b      	ldr	r3, [r7, #4]
 80178ac:	601a      	str	r2, [r3, #0]
 80178ae:	687b      	ldr	r3, [r7, #4]
 80178b0:	4618      	mov	r0, r3
 80178b2:	370c      	adds	r7, #12
 80178b4:	46bd      	mov	sp, r7
 80178b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178ba:	4770      	bx	lr
 80178bc:	0802026c 	.word	0x0802026c

080178c0 <_ZN8IODriverD0Ev>:
 80178c0:	b580      	push	{r7, lr}
 80178c2:	b082      	sub	sp, #8
 80178c4:	af00      	add	r7, sp, #0
 80178c6:	6078      	str	r0, [r7, #4]
 80178c8:	6878      	ldr	r0, [r7, #4]
 80178ca:	f7ff ffe9 	bl	80178a0 <_ZN8IODriverD1Ev>
 80178ce:	2104      	movs	r1, #4
 80178d0:	6878      	ldr	r0, [r7, #4]
 80178d2:	f002 fb89 	bl	8019fe8 <_ZdlPvj>
 80178d6:	687b      	ldr	r3, [r7, #4]
 80178d8:	4618      	mov	r0, r3
 80178da:	3708      	adds	r7, #8
 80178dc:	46bd      	mov	sp, r7
 80178de:	bd80      	pop	{r7, pc}

080178e0 <_ZN16BufferedIODriver7receiveERKSt8functionIFvhPhmEE>:

#include "BufferedIODriver.h"

#ifdef BUILD_WITH_BUFFERED_IO

void BufferedIODriver::receive(const std::function<void (uint8_t sender_id, uint8_t* buffer, uint32_t length)> &receiver) {
 80178e0:	b480      	push	{r7}
 80178e2:	b083      	sub	sp, #12
 80178e4:	af00      	add	r7, sp, #0
 80178e6:	6078      	str	r0, [r7, #4]
 80178e8:	6039      	str	r1, [r7, #0]
	// Not implemented
}
 80178ea:	bf00      	nop
 80178ec:	370c      	adds	r7, #12
 80178ee:	46bd      	mov	sp, r7
 80178f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178f4:	4770      	bx	lr

080178f6 <_ZN16BufferedIODriver8transmitEPhm>:

/*
 * Writes data to a buffer shared between Cortex-M4 and Cortex-M7
 * Any thread can call this function
 */
void BufferedIODriver::transmit(uint8_t* buffer, uint32_t length) {
 80178f6:	b480      	push	{r7}
 80178f8:	b085      	sub	sp, #20
 80178fa:	af00      	add	r7, sp, #0
 80178fc:	60f8      	str	r0, [r7, #12]
 80178fe:	60b9      	str	r1, [r7, #8]
 8017900:	607a      	str	r2, [r7, #4]
	// TODO
}
 8017902:	bf00      	nop
 8017904:	3714      	adds	r7, #20
 8017906:	46bd      	mov	sp, r7
 8017908:	f85d 7b04 	ldr.w	r7, [sp], #4
 801790c:	4770      	bx	lr
	...

08017910 <_ZN16BufferedIODriverD1Ev>:

#include <cstdint>
#include <functional>


class BufferedIODriver : public IODriver {
 8017910:	b580      	push	{r7, lr}
 8017912:	b082      	sub	sp, #8
 8017914:	af00      	add	r7, sp, #0
 8017916:	6078      	str	r0, [r7, #4]
 8017918:	4a05      	ldr	r2, [pc, #20]	; (8017930 <_ZN16BufferedIODriverD1Ev+0x20>)
 801791a:	687b      	ldr	r3, [r7, #4]
 801791c:	601a      	str	r2, [r3, #0]
 801791e:	687b      	ldr	r3, [r7, #4]
 8017920:	4618      	mov	r0, r3
 8017922:	f7ff ffbd 	bl	80178a0 <_ZN8IODriverD1Ev>
 8017926:	687b      	ldr	r3, [r7, #4]
 8017928:	4618      	mov	r0, r3
 801792a:	3708      	adds	r7, #8
 801792c:	46bd      	mov	sp, r7
 801792e:	bd80      	pop	{r7, pc}
 8017930:	08020254 	.word	0x08020254

08017934 <_ZN16BufferedIODriverD0Ev>:
 8017934:	b580      	push	{r7, lr}
 8017936:	b082      	sub	sp, #8
 8017938:	af00      	add	r7, sp, #0
 801793a:	6078      	str	r0, [r7, #4]
 801793c:	6878      	ldr	r0, [r7, #4]
 801793e:	f7ff ffe7 	bl	8017910 <_ZN16BufferedIODriverD1Ev>
 8017942:	2104      	movs	r1, #4
 8017944:	6878      	ldr	r0, [r7, #4]
 8017946:	f002 fb4f 	bl	8019fe8 <_ZdlPvj>
 801794a:	687b      	ldr	r3, [r7, #4]
 801794c:	4618      	mov	r0, r3
 801794e:	3708      	adds	r7, #8
 8017950:	46bd      	mov	sp, r7
 8017952:	bd80      	pop	{r7, pc}

08017954 <_ZN10MessageBusD1Ev>:
	size_t hash;
};

class MessageBus {
public:
	virtual ~MessageBus() {}
 8017954:	b480      	push	{r7}
 8017956:	b083      	sub	sp, #12
 8017958:	af00      	add	r7, sp, #0
 801795a:	6078      	str	r0, [r7, #4]
 801795c:	4a04      	ldr	r2, [pc, #16]	; (8017970 <_ZN10MessageBusD1Ev+0x1c>)
 801795e:	687b      	ldr	r3, [r7, #4]
 8017960:	601a      	str	r2, [r3, #0]
 8017962:	687b      	ldr	r3, [r7, #4]
 8017964:	4618      	mov	r0, r3
 8017966:	370c      	adds	r7, #12
 8017968:	46bd      	mov	sp, r7
 801796a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801796e:	4770      	bx	lr
 8017970:	080202d0 	.word	0x080202d0

08017974 <_ZN10MessageBusD0Ev>:
 8017974:	b580      	push	{r7, lr}
 8017976:	b082      	sub	sp, #8
 8017978:	af00      	add	r7, sp, #0
 801797a:	6078      	str	r0, [r7, #4]
 801797c:	6878      	ldr	r0, [r7, #4]
 801797e:	f7ff ffe9 	bl	8017954 <_ZN10MessageBusD1Ev>
 8017982:	f644 0104 	movw	r1, #18436	; 0x4804
 8017986:	6878      	ldr	r0, [r7, #4]
 8017988:	f002 fb2e 	bl	8019fe8 <_ZdlPvj>
 801798c:	687b      	ldr	r3, [r7, #4]
 801798e:	4618      	mov	r0, r3
 8017990:	3708      	adds	r7, #8
 8017992:	46bd      	mov	sp, r7
 8017994:	bd80      	pop	{r7, pc}

08017996 <_ZNSt9_Any_data9_M_accessEv>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       { return &_M_pod_data[0]; }
 8017996:	b480      	push	{r7}
 8017998:	b083      	sub	sp, #12
 801799a:	af00      	add	r7, sp, #0
 801799c:	6078      	str	r0, [r7, #4]
 801799e:	687b      	ldr	r3, [r7, #4]
 80179a0:	4618      	mov	r0, r3
 80179a2:	370c      	adds	r7, #12
 80179a4:	46bd      	mov	sp, r7
 80179a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179aa:	4770      	bx	lr

080179ac <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
 80179ac:	b480      	push	{r7}
 80179ae:	b083      	sub	sp, #12
 80179b0:	af00      	add	r7, sp, #0
 80179b2:	6078      	str	r0, [r7, #4]
 80179b4:	687b      	ldr	r3, [r7, #4]
 80179b6:	4618      	mov	r0, r3
 80179b8:	370c      	adds	r7, #12
 80179ba:	46bd      	mov	sp, r7
 80179bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179c0:	4770      	bx	lr

080179c2 <_ZNSt14_Function_baseC1Ev>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 80179c2:	b480      	push	{r7}
 80179c4:	b083      	sub	sp, #12
 80179c6:	af00      	add	r7, sp, #0
 80179c8:	6078      	str	r0, [r7, #4]
 80179ca:	687b      	ldr	r3, [r7, #4]
 80179cc:	2200      	movs	r2, #0
 80179ce:	609a      	str	r2, [r3, #8]
 80179d0:	687b      	ldr	r3, [r7, #4]
 80179d2:	4618      	mov	r0, r3
 80179d4:	370c      	adds	r7, #12
 80179d6:	46bd      	mov	sp, r7
 80179d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179dc:	4770      	bx	lr

080179de <_ZNSt14_Function_baseD1Ev>:

    ~_Function_base()
 80179de:	b580      	push	{r7, lr}
 80179e0:	b082      	sub	sp, #8
 80179e2:	af00      	add	r7, sp, #0
 80179e4:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 80179e6:	687b      	ldr	r3, [r7, #4]
 80179e8:	689b      	ldr	r3, [r3, #8]
 80179ea:	2b00      	cmp	r3, #0
 80179ec:	d005      	beq.n	80179fa <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80179ee:	687b      	ldr	r3, [r7, #4]
 80179f0:	689b      	ldr	r3, [r3, #8]
 80179f2:	6878      	ldr	r0, [r7, #4]
 80179f4:	6879      	ldr	r1, [r7, #4]
 80179f6:	2203      	movs	r2, #3
 80179f8:	4798      	blx	r3
    }
 80179fa:	687b      	ldr	r3, [r7, #4]
 80179fc:	4618      	mov	r0, r3
 80179fe:	3708      	adds	r7, #8
 8017a00:	46bd      	mov	sp, r7
 8017a02:	bd80      	pop	{r7, pc}

08017a04 <_ZN10MessageBusC1Ev>:
class MessageBus {
 8017a04:	b480      	push	{r7}
 8017a06:	b083      	sub	sp, #12
 8017a08:	af00      	add	r7, sp, #0
 8017a0a:	6078      	str	r0, [r7, #4]
 8017a0c:	4a04      	ldr	r2, [pc, #16]	; (8017a20 <_ZN10MessageBusC1Ev+0x1c>)
 8017a0e:	687b      	ldr	r3, [r7, #4]
 8017a10:	601a      	str	r2, [r3, #0]
 8017a12:	687b      	ldr	r3, [r7, #4]
 8017a14:	4618      	mov	r0, r3
 8017a16:	370c      	adds	r7, #12
 8017a18:	46bd      	mov	sp, r7
 8017a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a1e:	4770      	bx	lr
 8017a20:	080202d0 	.word	0x080202d0

08017a24 <_ZNSt8functionIFvhPhmEED1Ev>:
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8017a24:	b580      	push	{r7, lr}
 8017a26:	b082      	sub	sp, #8
 8017a28:	af00      	add	r7, sp, #0
 8017a2a:	6078      	str	r0, [r7, #4]
 8017a2c:	687b      	ldr	r3, [r7, #4]
 8017a2e:	4618      	mov	r0, r3
 8017a30:	f7ff ffd5 	bl	80179de <_ZNSt14_Function_baseD1Ev>
 8017a34:	687b      	ldr	r3, [r7, #4]
 8017a36:	4618      	mov	r0, r3
 8017a38:	3708      	adds	r7, #8
 8017a3a:	46bd      	mov	sp, r7
 8017a3c:	bd80      	pop	{r7, pc}
	...

08017a40 <_ZN5IOBusC1EP8IODriverPhm>:

#include "IOBus.h"

#include <cstring>

IOBus::IOBus(IODriver* driver, uint8_t* buffer, uint32_t length) {
 8017a40:	b590      	push	{r4, r7, lr}
 8017a42:	b091      	sub	sp, #68	; 0x44
 8017a44:	af02      	add	r7, sp, #8
 8017a46:	60f8      	str	r0, [r7, #12]
 8017a48:	60b9      	str	r1, [r7, #8]
 8017a4a:	607a      	str	r2, [r7, #4]
 8017a4c:	603b      	str	r3, [r7, #0]
 8017a4e:	68fb      	ldr	r3, [r7, #12]
 8017a50:	4618      	mov	r0, r3
 8017a52:	f7ff ffd7 	bl	8017a04 <_ZN10MessageBusC1Ev>
 8017a56:	4a24      	ldr	r2, [pc, #144]	; (8017ae8 <_ZN5IOBusC1EP8IODriverPhm+0xa8>)
 8017a58:	68fb      	ldr	r3, [r7, #12]
 8017a5a:	601a      	str	r2, [r3, #0]
	this->driver = driver;
 8017a5c:	68fa      	ldr	r2, [r7, #12]
 8017a5e:	f644 0304 	movw	r3, #18436	; 0x4804
 8017a62:	4413      	add	r3, r2
 8017a64:	68ba      	ldr	r2, [r7, #8]
 8017a66:	601a      	str	r2, [r3, #0]
	this->packet_buffer = buffer;
 8017a68:	68fa      	ldr	r2, [r7, #12]
 8017a6a:	f644 0308 	movw	r3, #18440	; 0x4808
 8017a6e:	4413      	add	r3, r2
 8017a70:	687a      	ldr	r2, [r7, #4]
 8017a72:	601a      	str	r2, [r3, #0]
	this->buffer_length = length;
 8017a74:	68fa      	ldr	r2, [r7, #12]
 8017a76:	f644 030c 	movw	r3, #18444	; 0x480c
 8017a7a:	4413      	add	r3, r2
 8017a7c:	683a      	ldr	r2, [r7, #0]
 8017a7e:	601a      	str	r2, [r3, #0]
	this->buffer_index = 0;
 8017a80:	68fa      	ldr	r2, [r7, #12]
 8017a82:	f644 0310 	movw	r3, #18448	; 0x4810
 8017a86:	4413      	add	r3, r2
 8017a88:	2200      	movs	r2, #0
 8017a8a:	701a      	strb	r2, [r3, #0]

	using namespace std::placeholders;
	driver->receive(std::bind(&IOBus::receive, this, _1, _2, _3));
 8017a8c:	68bb      	ldr	r3, [r7, #8]
 8017a8e:	681b      	ldr	r3, [r3, #0]
 8017a90:	3308      	adds	r3, #8
 8017a92:	681c      	ldr	r4, [r3, #0]
 8017a94:	4b15      	ldr	r3, [pc, #84]	; (8017aec <_ZN5IOBusC1EP8IODriverPhm+0xac>)
 8017a96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017a98:	2300      	movs	r3, #0
 8017a9a:	633b      	str	r3, [r7, #48]	; 0x30
 8017a9c:	68fb      	ldr	r3, [r7, #12]
 8017a9e:	637b      	str	r3, [r7, #52]	; 0x34
 8017aa0:	f107 0020 	add.w	r0, r7, #32
 8017aa4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8017aa8:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8017aac:	4b10      	ldr	r3, [pc, #64]	; (8017af0 <_ZN5IOBusC1EP8IODriverPhm+0xb0>)
 8017aae:	9301      	str	r3, [sp, #4]
 8017ab0:	4b10      	ldr	r3, [pc, #64]	; (8017af4 <_ZN5IOBusC1EP8IODriverPhm+0xb4>)
 8017ab2:	9300      	str	r3, [sp, #0]
 8017ab4:	4b10      	ldr	r3, [pc, #64]	; (8017af8 <_ZN5IOBusC1EP8IODriverPhm+0xb8>)
 8017ab6:	f000 f8f1 	bl	8017c9c <_ZSt4bindIM5IOBusFvhPhmEJPS0_RKSt12_PlaceholderILi1EERKS5_ILi2EERKS5_ILi3EEEENSt12_Bind_helperIXsrSt5__or_IJSt11is_integralINSt5decayIT_E4typeEESt7is_enumISL_EEE5valueESJ_JDpT0_EE4typeEOSJ_DpOSQ_>
 8017aba:	f107 0220 	add.w	r2, r7, #32
 8017abe:	f107 0310 	add.w	r3, r7, #16
 8017ac2:	4611      	mov	r1, r2
 8017ac4:	4618      	mov	r0, r3
 8017ac6:	f000 fa45 	bl	8017f54 <_ZNSt8functionIFvhPhmEEC1ISt5_BindIFM5IOBusFvhS0_mEPS5_St12_PlaceholderILi1EES9_ILi2EES9_ILi3EEEEvvEET_>
 8017aca:	f107 0310 	add.w	r3, r7, #16
 8017ace:	4619      	mov	r1, r3
 8017ad0:	68b8      	ldr	r0, [r7, #8]
 8017ad2:	47a0      	blx	r4
 8017ad4:	f107 0310 	add.w	r3, r7, #16
 8017ad8:	4618      	mov	r0, r3
 8017ada:	f7ff ffa3 	bl	8017a24 <_ZNSt8functionIFvhPhmEED1Ev>
}
 8017ade:	68fb      	ldr	r3, [r7, #12]
 8017ae0:	4618      	mov	r0, r3
 8017ae2:	373c      	adds	r7, #60	; 0x3c
 8017ae4:	46bd      	mov	sp, r7
 8017ae6:	bd90      	pop	{r4, r7, pc}
 8017ae8:	080202b8 	.word	0x080202b8
 8017aec:	08017afd 	.word	0x08017afd
 8017af0:	080206de 	.word	0x080206de
 8017af4:	080206dd 	.word	0x080206dd
 8017af8:	080206dc 	.word	0x080206dc

08017afc <_ZN5IOBus7receiveEhPhm>:

void IOBus::receive(uint8_t sender_id, uint8_t* buffer, uint32_t length) {
 8017afc:	b580      	push	{r7, lr}
 8017afe:	b084      	sub	sp, #16
 8017b00:	af00      	add	r7, sp, #0
 8017b02:	60f8      	str	r0, [r7, #12]
 8017b04:	607a      	str	r2, [r7, #4]
 8017b06:	603b      	str	r3, [r7, #0]
 8017b08:	460b      	mov	r3, r1
 8017b0a:	72fb      	strb	r3, [r7, #11]
	while(length > buffer_length) {
 8017b0c:	68fa      	ldr	r2, [r7, #12]
 8017b0e:	f644 030c 	movw	r3, #18444	; 0x480c
 8017b12:	4413      	add	r3, r2
 8017b14:	681b      	ldr	r3, [r3, #0]
 8017b16:	683a      	ldr	r2, [r7, #0]
 8017b18:	429a      	cmp	r2, r3
 8017b1a:	d91a      	bls.n	8017b52 <_ZN5IOBus7receiveEhPhm+0x56>
		MessageBus::receive(sender_id, buffer, buffer_length);
 8017b1c:	68f8      	ldr	r0, [r7, #12]
 8017b1e:	68fa      	ldr	r2, [r7, #12]
 8017b20:	f644 030c 	movw	r3, #18444	; 0x480c
 8017b24:	4413      	add	r3, r2
 8017b26:	681b      	ldr	r3, [r3, #0]
 8017b28:	7af9      	ldrb	r1, [r7, #11]
 8017b2a:	687a      	ldr	r2, [r7, #4]
 8017b2c:	f001 fe5e 	bl	80197ec <_ZN10MessageBus7receiveEhPhm>
		length -= buffer_length;
 8017b30:	68fa      	ldr	r2, [r7, #12]
 8017b32:	f644 030c 	movw	r3, #18444	; 0x480c
 8017b36:	4413      	add	r3, r2
 8017b38:	681b      	ldr	r3, [r3, #0]
 8017b3a:	683a      	ldr	r2, [r7, #0]
 8017b3c:	1ad3      	subs	r3, r2, r3
 8017b3e:	603b      	str	r3, [r7, #0]
		buffer += buffer_length;
 8017b40:	68fa      	ldr	r2, [r7, #12]
 8017b42:	f644 030c 	movw	r3, #18444	; 0x480c
 8017b46:	4413      	add	r3, r2
 8017b48:	681b      	ldr	r3, [r3, #0]
 8017b4a:	687a      	ldr	r2, [r7, #4]
 8017b4c:	4413      	add	r3, r2
 8017b4e:	607b      	str	r3, [r7, #4]
	while(length > buffer_length) {
 8017b50:	e7dc      	b.n	8017b0c <_ZN5IOBus7receiveEhPhm+0x10>
	}

	MessageBus::receive(sender_id, buffer, length);
 8017b52:	68f8      	ldr	r0, [r7, #12]
 8017b54:	7af9      	ldrb	r1, [r7, #11]
 8017b56:	683b      	ldr	r3, [r7, #0]
 8017b58:	687a      	ldr	r2, [r7, #4]
 8017b5a:	f001 fe47 	bl	80197ec <_ZN10MessageBus7receiveEhPhm>
}
 8017b5e:	bf00      	nop
 8017b60:	3710      	adds	r7, #16
 8017b62:	46bd      	mov	sp, r7
 8017b64:	bd80      	pop	{r7, pc}

08017b66 <_ZN5IOBus6appendEPhm>:

uint8_t IOBus::append(uint8_t* buffer, uint32_t length) {
 8017b66:	b580      	push	{r7, lr}
 8017b68:	b086      	sub	sp, #24
 8017b6a:	af00      	add	r7, sp, #0
 8017b6c:	60f8      	str	r0, [r7, #12]
 8017b6e:	60b9      	str	r1, [r7, #8]
 8017b70:	607a      	str	r2, [r7, #4]
	uint32_t remaining_length = buffer_length - buffer_index;
 8017b72:	68fa      	ldr	r2, [r7, #12]
 8017b74:	f644 030c 	movw	r3, #18444	; 0x480c
 8017b78:	4413      	add	r3, r2
 8017b7a:	681a      	ldr	r2, [r3, #0]
 8017b7c:	68f9      	ldr	r1, [r7, #12]
 8017b7e:	f644 0310 	movw	r3, #18448	; 0x4810
 8017b82:	440b      	add	r3, r1
 8017b84:	781b      	ldrb	r3, [r3, #0]
 8017b86:	1ad3      	subs	r3, r2, r3
 8017b88:	617b      	str	r3, [r7, #20]

	if(length > remaining_length) {
 8017b8a:	687a      	ldr	r2, [r7, #4]
 8017b8c:	697b      	ldr	r3, [r7, #20]
 8017b8e:	429a      	cmp	r2, r3
 8017b90:	d901      	bls.n	8017b96 <_ZN5IOBus6appendEPhm+0x30>
		length = remaining_length;
 8017b92:	697b      	ldr	r3, [r7, #20]
 8017b94:	607b      	str	r3, [r7, #4]
	}

	memcpy(packet_buffer + buffer_index, buffer, length);
 8017b96:	68fa      	ldr	r2, [r7, #12]
 8017b98:	f644 0308 	movw	r3, #18440	; 0x4808
 8017b9c:	4413      	add	r3, r2
 8017b9e:	681a      	ldr	r2, [r3, #0]
 8017ba0:	68f9      	ldr	r1, [r7, #12]
 8017ba2:	f644 0310 	movw	r3, #18448	; 0x4810
 8017ba6:	440b      	add	r3, r1
 8017ba8:	781b      	ldrb	r3, [r3, #0]
 8017baa:	4413      	add	r3, r2
 8017bac:	687a      	ldr	r2, [r7, #4]
 8017bae:	68b9      	ldr	r1, [r7, #8]
 8017bb0:	4618      	mov	r0, r3
 8017bb2:	f002 fe40 	bl	801a836 <memcpy>

	buffer_index += length;
 8017bb6:	68fa      	ldr	r2, [r7, #12]
 8017bb8:	f644 0310 	movw	r3, #18448	; 0x4810
 8017bbc:	4413      	add	r3, r2
 8017bbe:	781a      	ldrb	r2, [r3, #0]
 8017bc0:	687b      	ldr	r3, [r7, #4]
 8017bc2:	b2db      	uxtb	r3, r3
 8017bc4:	4413      	add	r3, r2
 8017bc6:	b2d9      	uxtb	r1, r3
 8017bc8:	68fa      	ldr	r2, [r7, #12]
 8017bca:	f644 0310 	movw	r3, #18448	; 0x4810
 8017bce:	4413      	add	r3, r2
 8017bd0:	460a      	mov	r2, r1
 8017bd2:	701a      	strb	r2, [r3, #0]


	return length;
 8017bd4:	687b      	ldr	r3, [r7, #4]
 8017bd6:	b2db      	uxtb	r3, r3
}
 8017bd8:	4618      	mov	r0, r3
 8017bda:	3718      	adds	r7, #24
 8017bdc:	46bd      	mov	sp, r7
 8017bde:	bd80      	pop	{r7, pc}

08017be0 <_ZN5IOBus8transmitEv>:

void IOBus::transmit() {
 8017be0:	b590      	push	{r4, r7, lr}
 8017be2:	b083      	sub	sp, #12
 8017be4:	af00      	add	r7, sp, #0
 8017be6:	6078      	str	r0, [r7, #4]
	driver->transmit(packet_buffer, buffer_index);
 8017be8:	687a      	ldr	r2, [r7, #4]
 8017bea:	f644 0304 	movw	r3, #18436	; 0x4804
 8017bee:	4413      	add	r3, r2
 8017bf0:	6818      	ldr	r0, [r3, #0]
 8017bf2:	687a      	ldr	r2, [r7, #4]
 8017bf4:	f644 0304 	movw	r3, #18436	; 0x4804
 8017bf8:	4413      	add	r3, r2
 8017bfa:	681b      	ldr	r3, [r3, #0]
 8017bfc:	681b      	ldr	r3, [r3, #0]
 8017bfe:	330c      	adds	r3, #12
 8017c00:	681c      	ldr	r4, [r3, #0]
 8017c02:	687a      	ldr	r2, [r7, #4]
 8017c04:	f644 0308 	movw	r3, #18440	; 0x4808
 8017c08:	4413      	add	r3, r2
 8017c0a:	6819      	ldr	r1, [r3, #0]
 8017c0c:	687a      	ldr	r2, [r7, #4]
 8017c0e:	f644 0310 	movw	r3, #18448	; 0x4810
 8017c12:	4413      	add	r3, r2
 8017c14:	781b      	ldrb	r3, [r3, #0]
 8017c16:	461a      	mov	r2, r3
 8017c18:	47a0      	blx	r4
	buffer_index = 0;
 8017c1a:	687a      	ldr	r2, [r7, #4]
 8017c1c:	f644 0310 	movw	r3, #18448	; 0x4810
 8017c20:	4413      	add	r3, r2
 8017c22:	2200      	movs	r2, #0
 8017c24:	701a      	strb	r2, [r3, #0]
}
 8017c26:	bf00      	nop
 8017c28:	370c      	adds	r7, #12
 8017c2a:	46bd      	mov	sp, r7
 8017c2c:	bd90      	pop	{r4, r7, pc}

08017c2e <_ZSt7forwardIM5IOBusFvhPhmEEOT_RNSt16remove_referenceIS4_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8017c2e:	b480      	push	{r7}
 8017c30:	b083      	sub	sp, #12
 8017c32:	af00      	add	r7, sp, #0
 8017c34:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8017c36:	687b      	ldr	r3, [r7, #4]
 8017c38:	4618      	mov	r0, r3
 8017c3a:	370c      	adds	r7, #12
 8017c3c:	46bd      	mov	sp, r7
 8017c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c42:	4770      	bx	lr

08017c44 <_ZSt7forwardIP5IOBusEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8017c44:	b480      	push	{r7}
 8017c46:	b083      	sub	sp, #12
 8017c48:	af00      	add	r7, sp, #0
 8017c4a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8017c4c:	687b      	ldr	r3, [r7, #4]
 8017c4e:	4618      	mov	r0, r3
 8017c50:	370c      	adds	r7, #12
 8017c52:	46bd      	mov	sp, r7
 8017c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c58:	4770      	bx	lr

08017c5a <_ZSt7forwardIRKSt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8017c5a:	b480      	push	{r7}
 8017c5c:	b083      	sub	sp, #12
 8017c5e:	af00      	add	r7, sp, #0
 8017c60:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8017c62:	687b      	ldr	r3, [r7, #4]
 8017c64:	4618      	mov	r0, r3
 8017c66:	370c      	adds	r7, #12
 8017c68:	46bd      	mov	sp, r7
 8017c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c6e:	4770      	bx	lr

08017c70 <_ZSt7forwardIRKSt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8017c70:	b480      	push	{r7}
 8017c72:	b083      	sub	sp, #12
 8017c74:	af00      	add	r7, sp, #0
 8017c76:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8017c78:	687b      	ldr	r3, [r7, #4]
 8017c7a:	4618      	mov	r0, r3
 8017c7c:	370c      	adds	r7, #12
 8017c7e:	46bd      	mov	sp, r7
 8017c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c84:	4770      	bx	lr

08017c86 <_ZSt7forwardIRKSt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8017c86:	b480      	push	{r7}
 8017c88:	b083      	sub	sp, #12
 8017c8a:	af00      	add	r7, sp, #0
 8017c8c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8017c8e:	687b      	ldr	r3, [r7, #4]
 8017c90:	4618      	mov	r0, r3
 8017c92:	370c      	adds	r7, #12
 8017c94:	46bd      	mov	sp, r7
 8017c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c9a:	4770      	bx	lr

08017c9c <_ZSt4bindIM5IOBusFvhPhmEJPS0_RKSt12_PlaceholderILi1EERKS5_ILi2EERKS5_ILi3EEEENSt12_Bind_helperIXsrSt5__or_IJSt11is_integralINSt5decayIT_E4typeEESt7is_enumISL_EEE5valueESJ_JDpT0_EE4typeEOSJ_DpOSQ_>:
   *  @ingroup binders
   */
  template<typename _Func, typename... _BoundArgs>
    inline typename
    _Bind_helper<__is_socketlike<_Func>::value, _Func, _BoundArgs...>::type
    bind(_Func&& __f, _BoundArgs&&... __args)
 8017c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017ca0:	b086      	sub	sp, #24
 8017ca2:	af02      	add	r7, sp, #8
 8017ca4:	60f8      	str	r0, [r7, #12]
 8017ca6:	60b9      	str	r1, [r7, #8]
 8017ca8:	607a      	str	r2, [r7, #4]
 8017caa:	603b      	str	r3, [r7, #0]
    {
      typedef _Bind_helper<false, _Func, _BoundArgs...> __helper_type;
      return typename __helper_type::type(std::forward<_Func>(__f),
					  std::forward<_BoundArgs>(__args)...);
 8017cac:	68b8      	ldr	r0, [r7, #8]
 8017cae:	f7ff ffbe 	bl	8017c2e <_ZSt7forwardIM5IOBusFvhPhmEEOT_RNSt16remove_referenceIS4_E4typeE>
 8017cb2:	4605      	mov	r5, r0
 8017cb4:	6878      	ldr	r0, [r7, #4]
 8017cb6:	f7ff ffc5 	bl	8017c44 <_ZSt7forwardIP5IOBusEOT_RNSt16remove_referenceIS2_E4typeE>
 8017cba:	4606      	mov	r6, r0
 8017cbc:	6838      	ldr	r0, [r7, #0]
 8017cbe:	f7ff ffcc 	bl	8017c5a <_ZSt7forwardIRKSt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS4_E4typeE>
 8017cc2:	4680      	mov	r8, r0
 8017cc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017cc6:	f7ff ffd3 	bl	8017c70 <_ZSt7forwardIRKSt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS4_E4typeE>
 8017cca:	4604      	mov	r4, r0
 8017ccc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017cce:	f7ff ffda 	bl	8017c86 <_ZSt7forwardIRKSt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS4_E4typeE>
 8017cd2:	4603      	mov	r3, r0
 8017cd4:	9301      	str	r3, [sp, #4]
 8017cd6:	9400      	str	r4, [sp, #0]
 8017cd8:	4643      	mov	r3, r8
 8017cda:	4632      	mov	r2, r6
 8017cdc:	4629      	mov	r1, r5
 8017cde:	68f8      	ldr	r0, [r7, #12]
 8017ce0:	f000 f960 	bl	8017fa4 <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEEC1IJS4_RKS6_RKS7_RKS8_EEEOS3_DpOT_>
    }
 8017ce4:	68f8      	ldr	r0, [r7, #12]
 8017ce6:	3710      	adds	r7, #16
 8017ce8:	46bd      	mov	sp, r7
 8017cea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017cee <_ZSt4moveIRSt5tupleIJP5IOBusSt12_PlaceholderILi1EES3_ILi2EES3_ILi3EEEEEONSt16remove_referenceIT_E4typeEOSA_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8017cee:	b480      	push	{r7}
 8017cf0:	b083      	sub	sp, #12
 8017cf2:	af00      	add	r7, sp, #0
 8017cf4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8017cf6:	687b      	ldr	r3, [r7, #4]
 8017cf8:	4618      	mov	r0, r3
 8017cfa:	370c      	adds	r7, #12
 8017cfc:	46bd      	mov	sp, r7
 8017cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d02:	4770      	bx	lr

08017d04 <_ZNSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEE7_M_headERS2_>:
      template<std::size_t, typename...> friend class _Tuple_impl;

      typedef _Head_base<_Idx, _Head> _Base;

      static constexpr _Head&
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8017d04:	b580      	push	{r7, lr}
 8017d06:	b082      	sub	sp, #8
 8017d08:	af00      	add	r7, sp, #0
 8017d0a:	6078      	str	r0, [r7, #4]
 8017d0c:	6878      	ldr	r0, [r7, #4]
 8017d0e:	f000 f805 	bl	8017d1c <_ZNSt10_Head_baseILj3ESt12_PlaceholderILi3EELb1EE7_M_headERS2_>
 8017d12:	4603      	mov	r3, r0
 8017d14:	4618      	mov	r0, r3
 8017d16:	3708      	adds	r7, #8
 8017d18:	46bd      	mov	sp, r7
 8017d1a:	bd80      	pop	{r7, pc}

08017d1c <_ZNSt10_Head_baseILj3ESt12_PlaceholderILi3EELb1EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b; }
 8017d1c:	b480      	push	{r7}
 8017d1e:	b083      	sub	sp, #12
 8017d20:	af00      	add	r7, sp, #0
 8017d22:	6078      	str	r0, [r7, #4]
 8017d24:	687b      	ldr	r3, [r7, #4]
 8017d26:	4618      	mov	r0, r3
 8017d28:	370c      	adds	r7, #12
 8017d2a:	46bd      	mov	sp, r7
 8017d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d30:	4770      	bx	lr

08017d32 <_ZSt7forwardISt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8017d32:	b480      	push	{r7}
 8017d34:	b083      	sub	sp, #12
 8017d36:	af00      	add	r7, sp, #0
 8017d38:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8017d3a:	687b      	ldr	r3, [r7, #4]
 8017d3c:	4618      	mov	r0, r3
 8017d3e:	370c      	adds	r7, #12
 8017d40:	46bd      	mov	sp, r7
 8017d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d46:	4770      	bx	lr

08017d48 <_ZNSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEEC1EOS2_>:
	: _Base(std::forward<_UHead>(__head)) { }

      constexpr _Tuple_impl(const _Tuple_impl&) = default;

      constexpr
      _Tuple_impl(_Tuple_impl&& __in)
 8017d48:	b580      	push	{r7, lr}
 8017d4a:	b082      	sub	sp, #8
 8017d4c:	af00      	add	r7, sp, #0
 8017d4e:	6078      	str	r0, [r7, #4]
 8017d50:	6039      	str	r1, [r7, #0]
      noexcept(is_nothrow_move_constructible<_Head>::value)
      : _Base(std::forward<_Head>(_M_head(__in))) { }
 8017d52:	6838      	ldr	r0, [r7, #0]
 8017d54:	f7ff ffd6 	bl	8017d04 <_ZNSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEE7_M_headERS2_>
 8017d58:	4603      	mov	r3, r0
 8017d5a:	4618      	mov	r0, r3
 8017d5c:	f7ff ffe9 	bl	8017d32 <_ZSt7forwardISt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS2_E4typeE>
 8017d60:	4603      	mov	r3, r0
 8017d62:	4619      	mov	r1, r3
 8017d64:	6878      	ldr	r0, [r7, #4]
 8017d66:	f000 f959 	bl	801801c <_ZNSt10_Head_baseILj3ESt12_PlaceholderILi3EELb1EEC1IS1_EEOT_>
 8017d6a:	687b      	ldr	r3, [r7, #4]
 8017d6c:	4618      	mov	r0, r3
 8017d6e:	3708      	adds	r7, #8
 8017d70:	46bd      	mov	sp, r7
 8017d72:	bd80      	pop	{r7, pc}

08017d74 <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEE7_M_tailERS3_>:
      _M_tail(_Tuple_impl& __t) noexcept { return __t; }
 8017d74:	b480      	push	{r7}
 8017d76:	b083      	sub	sp, #12
 8017d78:	af00      	add	r7, sp, #0
 8017d7a:	6078      	str	r0, [r7, #4]
 8017d7c:	687b      	ldr	r3, [r7, #4]
 8017d7e:	4618      	mov	r0, r3
 8017d80:	370c      	adds	r7, #12
 8017d82:	46bd      	mov	sp, r7
 8017d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d88:	4770      	bx	lr

08017d8a <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8017d8a:	b580      	push	{r7, lr}
 8017d8c:	b082      	sub	sp, #8
 8017d8e:	af00      	add	r7, sp, #0
 8017d90:	6078      	str	r0, [r7, #4]
 8017d92:	6878      	ldr	r0, [r7, #4]
 8017d94:	f000 f805 	bl	8017da2 <_ZNSt10_Head_baseILj2ESt12_PlaceholderILi2EELb1EE7_M_headERS2_>
 8017d98:	4603      	mov	r3, r0
 8017d9a:	4618      	mov	r0, r3
 8017d9c:	3708      	adds	r7, #8
 8017d9e:	46bd      	mov	sp, r7
 8017da0:	bd80      	pop	{r7, pc}

08017da2 <_ZNSt10_Head_baseILj2ESt12_PlaceholderILi2EELb1EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b; }
 8017da2:	b480      	push	{r7}
 8017da4:	b083      	sub	sp, #12
 8017da6:	af00      	add	r7, sp, #0
 8017da8:	6078      	str	r0, [r7, #4]
 8017daa:	687b      	ldr	r3, [r7, #4]
 8017dac:	4618      	mov	r0, r3
 8017dae:	370c      	adds	r7, #12
 8017db0:	46bd      	mov	sp, r7
 8017db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017db6:	4770      	bx	lr

08017db8 <_ZSt4moveIRSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 8017db8:	b480      	push	{r7}
 8017dba:	b083      	sub	sp, #12
 8017dbc:	af00      	add	r7, sp, #0
 8017dbe:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8017dc0:	687b      	ldr	r3, [r7, #4]
 8017dc2:	4618      	mov	r0, r3
 8017dc4:	370c      	adds	r7, #12
 8017dc6:	46bd      	mov	sp, r7
 8017dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dcc:	4770      	bx	lr

08017dce <_ZSt7forwardISt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8017dce:	b480      	push	{r7}
 8017dd0:	b083      	sub	sp, #12
 8017dd2:	af00      	add	r7, sp, #0
 8017dd4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8017dd6:	687b      	ldr	r3, [r7, #4]
 8017dd8:	4618      	mov	r0, r3
 8017dda:	370c      	adds	r7, #12
 8017ddc:	46bd      	mov	sp, r7
 8017dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017de2:	4770      	bx	lr

08017de4 <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEEC1EOS3_>:
      _Tuple_impl(_Tuple_impl&& __in)
 8017de4:	b580      	push	{r7, lr}
 8017de6:	b082      	sub	sp, #8
 8017de8:	af00      	add	r7, sp, #0
 8017dea:	6078      	str	r0, [r7, #4]
 8017dec:	6039      	str	r1, [r7, #0]
      : _Inherited(std::move(_M_tail(__in))),
 8017dee:	6838      	ldr	r0, [r7, #0]
 8017df0:	f7ff ffc0 	bl	8017d74 <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEE7_M_tailERS3_>
 8017df4:	4603      	mov	r3, r0
 8017df6:	4618      	mov	r0, r3
 8017df8:	f7ff ffde 	bl	8017db8 <_ZSt4moveIRSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEEEONSt16remove_referenceIT_E4typeEOS6_>
 8017dfc:	4603      	mov	r3, r0
	_Base(std::forward<_Head>(_M_head(__in))) { }
 8017dfe:	4619      	mov	r1, r3
 8017e00:	6878      	ldr	r0, [r7, #4]
 8017e02:	f7ff ffa1 	bl	8017d48 <_ZNSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEEC1EOS2_>
 8017e06:	6838      	ldr	r0, [r7, #0]
 8017e08:	f7ff ffbf 	bl	8017d8a <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEE7_M_headERS3_>
 8017e0c:	4603      	mov	r3, r0
 8017e0e:	4618      	mov	r0, r3
 8017e10:	f7ff ffdd 	bl	8017dce <_ZSt7forwardISt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS2_E4typeE>
 8017e14:	4603      	mov	r3, r0
 8017e16:	4619      	mov	r1, r3
 8017e18:	6878      	ldr	r0, [r7, #4]
 8017e1a:	f000 f90c 	bl	8018036 <_ZNSt10_Head_baseILj2ESt12_PlaceholderILi2EELb1EEC1IS1_EEOT_>
 8017e1e:	687b      	ldr	r3, [r7, #4]
 8017e20:	4618      	mov	r0, r3
 8017e22:	3708      	adds	r7, #8
 8017e24:	46bd      	mov	sp, r7
 8017e26:	bd80      	pop	{r7, pc}

08017e28 <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEE7_M_tailERS4_>:
      _M_tail(_Tuple_impl& __t) noexcept { return __t; }
 8017e28:	b480      	push	{r7}
 8017e2a:	b083      	sub	sp, #12
 8017e2c:	af00      	add	r7, sp, #0
 8017e2e:	6078      	str	r0, [r7, #4]
 8017e30:	687b      	ldr	r3, [r7, #4]
 8017e32:	4618      	mov	r0, r3
 8017e34:	370c      	adds	r7, #12
 8017e36:	46bd      	mov	sp, r7
 8017e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e3c:	4770      	bx	lr

08017e3e <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8017e3e:	b580      	push	{r7, lr}
 8017e40:	b082      	sub	sp, #8
 8017e42:	af00      	add	r7, sp, #0
 8017e44:	6078      	str	r0, [r7, #4]
 8017e46:	6878      	ldr	r0, [r7, #4]
 8017e48:	f000 f805 	bl	8017e56 <_ZNSt10_Head_baseILj1ESt12_PlaceholderILi1EELb1EE7_M_headERS2_>
 8017e4c:	4603      	mov	r3, r0
 8017e4e:	4618      	mov	r0, r3
 8017e50:	3708      	adds	r7, #8
 8017e52:	46bd      	mov	sp, r7
 8017e54:	bd80      	pop	{r7, pc}

08017e56 <_ZNSt10_Head_baseILj1ESt12_PlaceholderILi1EELb1EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b; }
 8017e56:	b480      	push	{r7}
 8017e58:	b083      	sub	sp, #12
 8017e5a:	af00      	add	r7, sp, #0
 8017e5c:	6078      	str	r0, [r7, #4]
 8017e5e:	687b      	ldr	r3, [r7, #4]
 8017e60:	4618      	mov	r0, r3
 8017e62:	370c      	adds	r7, #12
 8017e64:	46bd      	mov	sp, r7
 8017e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e6a:	4770      	bx	lr

08017e6c <_ZSt4moveIRSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES1_ILi3EEEEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 8017e6c:	b480      	push	{r7}
 8017e6e:	b083      	sub	sp, #12
 8017e70:	af00      	add	r7, sp, #0
 8017e72:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8017e74:	687b      	ldr	r3, [r7, #4]
 8017e76:	4618      	mov	r0, r3
 8017e78:	370c      	adds	r7, #12
 8017e7a:	46bd      	mov	sp, r7
 8017e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e80:	4770      	bx	lr

08017e82 <_ZSt7forwardISt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8017e82:	b480      	push	{r7}
 8017e84:	b083      	sub	sp, #12
 8017e86:	af00      	add	r7, sp, #0
 8017e88:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8017e8a:	687b      	ldr	r3, [r7, #4]
 8017e8c:	4618      	mov	r0, r3
 8017e8e:	370c      	adds	r7, #12
 8017e90:	46bd      	mov	sp, r7
 8017e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e96:	4770      	bx	lr

08017e98 <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEEC1EOS4_>:
      _Tuple_impl(_Tuple_impl&& __in)
 8017e98:	b580      	push	{r7, lr}
 8017e9a:	b082      	sub	sp, #8
 8017e9c:	af00      	add	r7, sp, #0
 8017e9e:	6078      	str	r0, [r7, #4]
 8017ea0:	6039      	str	r1, [r7, #0]
      : _Inherited(std::move(_M_tail(__in))),
 8017ea2:	6838      	ldr	r0, [r7, #0]
 8017ea4:	f7ff ffc0 	bl	8017e28 <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEE7_M_tailERS4_>
 8017ea8:	4603      	mov	r3, r0
 8017eaa:	4618      	mov	r0, r3
 8017eac:	f7ff ffde 	bl	8017e6c <_ZSt4moveIRSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES1_ILi3EEEEEONSt16remove_referenceIT_E4typeEOS7_>
 8017eb0:	4603      	mov	r3, r0
	_Base(std::forward<_Head>(_M_head(__in))) { }
 8017eb2:	4619      	mov	r1, r3
 8017eb4:	6878      	ldr	r0, [r7, #4]
 8017eb6:	f7ff ff95 	bl	8017de4 <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEEC1EOS3_>
 8017eba:	6838      	ldr	r0, [r7, #0]
 8017ebc:	f7ff ffbf 	bl	8017e3e <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEE7_M_headERS4_>
 8017ec0:	4603      	mov	r3, r0
 8017ec2:	4618      	mov	r0, r3
 8017ec4:	f7ff ffdd 	bl	8017e82 <_ZSt7forwardISt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS2_E4typeE>
 8017ec8:	4603      	mov	r3, r0
 8017eca:	4619      	mov	r1, r3
 8017ecc:	6878      	ldr	r0, [r7, #4]
 8017ece:	f000 f8bf 	bl	8018050 <_ZNSt10_Head_baseILj1ESt12_PlaceholderILi1EELb1EEC1IS1_EEOT_>
 8017ed2:	687b      	ldr	r3, [r7, #4]
 8017ed4:	4618      	mov	r0, r3
 8017ed6:	3708      	adds	r7, #8
 8017ed8:	46bd      	mov	sp, r7
 8017eda:	bd80      	pop	{r7, pc}

08017edc <_ZNSt5tupleIJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1EOS6_>:
        explicit constexpr tuple(_UElements&&... __elements)
	: _Inherited(std::forward<_UElements>(__elements)...) {	}

      constexpr tuple(const tuple&) = default;

      constexpr tuple(tuple&&) = default;
 8017edc:	b580      	push	{r7, lr}
 8017ede:	b082      	sub	sp, #8
 8017ee0:	af00      	add	r7, sp, #0
 8017ee2:	6078      	str	r0, [r7, #4]
 8017ee4:	6039      	str	r1, [r7, #0]
 8017ee6:	687b      	ldr	r3, [r7, #4]
 8017ee8:	683a      	ldr	r2, [r7, #0]
 8017eea:	4611      	mov	r1, r2
 8017eec:	4618      	mov	r0, r3
 8017eee:	f000 f8ea 	bl	80180c6 <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1EOS6_>
 8017ef2:	687b      	ldr	r3, [r7, #4]
 8017ef4:	4618      	mov	r0, r3
 8017ef6:	3708      	adds	r7, #8
 8017ef8:	46bd      	mov	sp, r7
 8017efa:	bd80      	pop	{r7, pc}

08017efc <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEEC1EOSA_>:
      _Bind(_Bind&& __b)
 8017efc:	b590      	push	{r4, r7, lr}
 8017efe:	b083      	sub	sp, #12
 8017f00:	af00      	add	r7, sp, #0
 8017f02:	6078      	str	r0, [r7, #4]
 8017f04:	6039      	str	r1, [r7, #0]
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
 8017f06:	683b      	ldr	r3, [r7, #0]
 8017f08:	4618      	mov	r0, r3
 8017f0a:	f000 f87c 	bl	8018006 <_ZSt4moveIRM5IOBusFvhPhmEEONSt16remove_referenceIT_E4typeEOS6_>
 8017f0e:	4602      	mov	r2, r0
 8017f10:	687b      	ldr	r3, [r7, #4]
 8017f12:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017f16:	e883 0003 	stmia.w	r3, {r0, r1}
 8017f1a:	687b      	ldr	r3, [r7, #4]
 8017f1c:	f103 0408 	add.w	r4, r3, #8
 8017f20:	683b      	ldr	r3, [r7, #0]
 8017f22:	3308      	adds	r3, #8
 8017f24:	4618      	mov	r0, r3
 8017f26:	f7ff fee2 	bl	8017cee <_ZSt4moveIRSt5tupleIJP5IOBusSt12_PlaceholderILi1EES3_ILi2EES3_ILi3EEEEEONSt16remove_referenceIT_E4typeEOSA_>
 8017f2a:	4603      	mov	r3, r0
 8017f2c:	4619      	mov	r1, r3
 8017f2e:	4620      	mov	r0, r4
 8017f30:	f7ff ffd4 	bl	8017edc <_ZNSt5tupleIJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1EOS6_>
      { }
 8017f34:	687b      	ldr	r3, [r7, #4]
 8017f36:	4618      	mov	r0, r3
 8017f38:	370c      	adds	r7, #12
 8017f3a:	46bd      	mov	sp, r7
 8017f3c:	bd90      	pop	{r4, r7, pc}

08017f3e <_ZSt4moveIRSt5_BindIFM5IOBusFvhPhmEPS1_St12_PlaceholderILi1EES6_ILi2EES6_ILi3EEEEEONSt16remove_referenceIT_E4typeEOSE_>:
    move(_Tp&& __t) noexcept
 8017f3e:	b480      	push	{r7}
 8017f40:	b083      	sub	sp, #12
 8017f42:	af00      	add	r7, sp, #0
 8017f44:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8017f46:	687b      	ldr	r3, [r7, #4]
 8017f48:	4618      	mov	r0, r3
 8017f4a:	370c      	adds	r7, #12
 8017f4c:	46bd      	mov	sp, r7
 8017f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f52:	4770      	bx	lr

08017f54 <_ZNSt8functionIFvhPhmEEC1ISt5_BindIFM5IOBusFvhS0_mEPS5_St12_PlaceholderILi1EES9_ILi2EES9_ILi3EEEEvvEET_>:
	}
    }

  template<typename _Res, typename... _ArgTypes>
    template<typename _Functor, typename, typename>
      function<_Res(_ArgTypes...)>::
 8017f54:	b590      	push	{r4, r7, lr}
 8017f56:	b083      	sub	sp, #12
 8017f58:	af00      	add	r7, sp, #0
 8017f5a:	6078      	str	r0, [r7, #4]
 8017f5c:	6039      	str	r1, [r7, #0]
      function(_Functor __f)
      : _Function_base()
 8017f5e:	687b      	ldr	r3, [r7, #4]
 8017f60:	4618      	mov	r0, r3
 8017f62:	f7ff fd2e 	bl	80179c2 <_ZNSt14_Function_baseC1Ev>
      {
	typedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
 8017f66:	6838      	ldr	r0, [r7, #0]
 8017f68:	f000 f8d0 	bl	801810c <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE21_M_not_empty_functionISC_EEbRKT_>
 8017f6c:	4603      	mov	r3, r0
 8017f6e:	2b00      	cmp	r3, #0
 8017f70:	d00e      	beq.n	8017f90 <_ZNSt8functionIFvhPhmEEC1ISt5_BindIFM5IOBusFvhS0_mEPS5_St12_PlaceholderILi1EES9_ILi2EES9_ILi3EEEEvvEET_+0x3c>
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 8017f72:	687c      	ldr	r4, [r7, #4]
 8017f74:	6838      	ldr	r0, [r7, #0]
 8017f76:	f7ff ffe2 	bl	8017f3e <_ZSt4moveIRSt5_BindIFM5IOBusFvhPhmEPS1_St12_PlaceholderILi1EES6_ILi2EES6_ILi3EEEEEONSt16remove_referenceIT_E4typeEOSE_>
 8017f7a:	4603      	mov	r3, r0
 8017f7c:	4619      	mov	r1, r3
 8017f7e:	4620      	mov	r0, r4
 8017f80:	f000 f8cf 	bl	8018122 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE15_M_init_functorERSt9_Any_dataOSC_>
	    _M_invoker = &_My_handler::_M_invoke;
 8017f84:	687b      	ldr	r3, [r7, #4]
 8017f86:	4a05      	ldr	r2, [pc, #20]	; (8017f9c <_ZNSt8functionIFvhPhmEEC1ISt5_BindIFM5IOBusFvhS0_mEPS5_St12_PlaceholderILi1EES9_ILi2EES9_ILi3EEEEvvEET_+0x48>)
 8017f88:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 8017f8a:	687b      	ldr	r3, [r7, #4]
 8017f8c:	4a04      	ldr	r2, [pc, #16]	; (8017fa0 <_ZNSt8functionIFvhPhmEEC1ISt5_BindIFM5IOBusFvhS0_mEPS5_St12_PlaceholderILi1EES9_ILi2EES9_ILi3EEEEvvEET_+0x4c>)
 8017f8e:	609a      	str	r2, [r3, #8]
	  }
      }
 8017f90:	687b      	ldr	r3, [r7, #4]
 8017f92:	4618      	mov	r0, r3
 8017f94:	370c      	adds	r7, #12
 8017f96:	46bd      	mov	sp, r7
 8017f98:	bd90      	pop	{r4, r7, pc}
 8017f9a:	bf00      	nop
 8017f9c:	08018189 	.word	0x08018189
 8017fa0:	080181c9 	.word	0x080181c9

08017fa4 <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEEC1IJS4_RKS6_RKS7_RKS8_EEEOS3_DpOT_>:
	explicit _Bind(_Functor&& __f, _Args&&... __args)
 8017fa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017fa8:	b086      	sub	sp, #24
 8017faa:	af02      	add	r7, sp, #8
 8017fac:	60f8      	str	r0, [r7, #12]
 8017fae:	60b9      	str	r1, [r7, #8]
 8017fb0:	607a      	str	r2, [r7, #4]
 8017fb2:	603b      	str	r3, [r7, #0]
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
 8017fb4:	68b8      	ldr	r0, [r7, #8]
 8017fb6:	f000 f826 	bl	8018006 <_ZSt4moveIRM5IOBusFvhPhmEEONSt16remove_referenceIT_E4typeEOS6_>
 8017fba:	4602      	mov	r2, r0
 8017fbc:	68fb      	ldr	r3, [r7, #12]
 8017fbe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017fc2:	e883 0003 	stmia.w	r3, {r0, r1}
 8017fc6:	68fb      	ldr	r3, [r7, #12]
 8017fc8:	f103 0408 	add.w	r4, r3, #8
 8017fcc:	6878      	ldr	r0, [r7, #4]
 8017fce:	f7ff fe39 	bl	8017c44 <_ZSt7forwardIP5IOBusEOT_RNSt16remove_referenceIS2_E4typeE>
 8017fd2:	4605      	mov	r5, r0
 8017fd4:	6838      	ldr	r0, [r7, #0]
 8017fd6:	f7ff fe40 	bl	8017c5a <_ZSt7forwardIRKSt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS4_E4typeE>
 8017fda:	4606      	mov	r6, r0
 8017fdc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017fde:	f7ff fe47 	bl	8017c70 <_ZSt7forwardIRKSt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS4_E4typeE>
 8017fe2:	4680      	mov	r8, r0
 8017fe4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017fe6:	f7ff fe4e 	bl	8017c86 <_ZSt7forwardIRKSt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS4_E4typeE>
 8017fea:	4603      	mov	r3, r0
 8017fec:	9300      	str	r3, [sp, #0]
 8017fee:	4643      	mov	r3, r8
 8017ff0:	4632      	mov	r2, r6
 8017ff2:	4629      	mov	r1, r5
 8017ff4:	4620      	mov	r0, r4
 8017ff6:	f000 f921 	bl	801823c <_ZNSt5tupleIJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1IJS1_RKS3_RKS4_RKS5_ELb1EEEDpOT_>
	{ }
 8017ffa:	68fb      	ldr	r3, [r7, #12]
 8017ffc:	4618      	mov	r0, r3
 8017ffe:	3710      	adds	r7, #16
 8018000:	46bd      	mov	sp, r7
 8018002:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018006 <_ZSt4moveIRM5IOBusFvhPhmEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 8018006:	b480      	push	{r7}
 8018008:	b083      	sub	sp, #12
 801800a:	af00      	add	r7, sp, #0
 801800c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 801800e:	687b      	ldr	r3, [r7, #4]
 8018010:	4618      	mov	r0, r3
 8018012:	370c      	adds	r7, #12
 8018014:	46bd      	mov	sp, r7
 8018016:	f85d 7b04 	ldr.w	r7, [sp], #4
 801801a:	4770      	bx	lr

0801801c <_ZNSt10_Head_baseILj3ESt12_PlaceholderILi3EELb1EEC1IS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 801801c:	b580      	push	{r7, lr}
 801801e:	b082      	sub	sp, #8
 8018020:	af00      	add	r7, sp, #0
 8018022:	6078      	str	r0, [r7, #4]
 8018024:	6039      	str	r1, [r7, #0]
	: _Head(std::forward<_UHead>(__h)) { }
 8018026:	6838      	ldr	r0, [r7, #0]
 8018028:	f7ff fe83 	bl	8017d32 <_ZSt7forwardISt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS2_E4typeE>
 801802c:	687b      	ldr	r3, [r7, #4]
 801802e:	4618      	mov	r0, r3
 8018030:	3708      	adds	r7, #8
 8018032:	46bd      	mov	sp, r7
 8018034:	bd80      	pop	{r7, pc}

08018036 <_ZNSt10_Head_baseILj2ESt12_PlaceholderILi2EELb1EEC1IS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8018036:	b580      	push	{r7, lr}
 8018038:	b082      	sub	sp, #8
 801803a:	af00      	add	r7, sp, #0
 801803c:	6078      	str	r0, [r7, #4]
 801803e:	6039      	str	r1, [r7, #0]
	: _Head(std::forward<_UHead>(__h)) { }
 8018040:	6838      	ldr	r0, [r7, #0]
 8018042:	f7ff fec4 	bl	8017dce <_ZSt7forwardISt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS2_E4typeE>
 8018046:	687b      	ldr	r3, [r7, #4]
 8018048:	4618      	mov	r0, r3
 801804a:	3708      	adds	r7, #8
 801804c:	46bd      	mov	sp, r7
 801804e:	bd80      	pop	{r7, pc}

08018050 <_ZNSt10_Head_baseILj1ESt12_PlaceholderILi1EELb1EEC1IS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8018050:	b580      	push	{r7, lr}
 8018052:	b082      	sub	sp, #8
 8018054:	af00      	add	r7, sp, #0
 8018056:	6078      	str	r0, [r7, #4]
 8018058:	6039      	str	r1, [r7, #0]
	: _Head(std::forward<_UHead>(__h)) { }
 801805a:	6838      	ldr	r0, [r7, #0]
 801805c:	f7ff ff11 	bl	8017e82 <_ZSt7forwardISt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS2_E4typeE>
 8018060:	687b      	ldr	r3, [r7, #4]
 8018062:	4618      	mov	r0, r3
 8018064:	3708      	adds	r7, #8
 8018066:	46bd      	mov	sp, r7
 8018068:	bd80      	pop	{r7, pc}

0801806a <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEE7_M_tailERS6_>:
      _M_tail(_Tuple_impl& __t) noexcept { return __t; }
 801806a:	b480      	push	{r7}
 801806c:	b083      	sub	sp, #12
 801806e:	af00      	add	r7, sp, #0
 8018070:	6078      	str	r0, [r7, #4]
 8018072:	687b      	ldr	r3, [r7, #4]
 8018074:	4618      	mov	r0, r3
 8018076:	370c      	adds	r7, #12
 8018078:	46bd      	mov	sp, r7
 801807a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801807e:	4770      	bx	lr

08018080 <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8018080:	b580      	push	{r7, lr}
 8018082:	b082      	sub	sp, #8
 8018084:	af00      	add	r7, sp, #0
 8018086:	6078      	str	r0, [r7, #4]
 8018088:	687b      	ldr	r3, [r7, #4]
 801808a:	4618      	mov	r0, r3
 801808c:	f000 f805 	bl	801809a <_ZNSt10_Head_baseILj0EP5IOBusLb0EE7_M_headERS2_>
 8018090:	4603      	mov	r3, r0
 8018092:	4618      	mov	r0, r3
 8018094:	3708      	adds	r7, #8
 8018096:	46bd      	mov	sp, r7
 8018098:	bd80      	pop	{r7, pc}

0801809a <_ZNSt10_Head_baseILj0EP5IOBusLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 801809a:	b480      	push	{r7}
 801809c:	b083      	sub	sp, #12
 801809e:	af00      	add	r7, sp, #0
 80180a0:	6078      	str	r0, [r7, #4]
 80180a2:	687b      	ldr	r3, [r7, #4]
 80180a4:	4618      	mov	r0, r3
 80180a6:	370c      	adds	r7, #12
 80180a8:	46bd      	mov	sp, r7
 80180aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180ae:	4770      	bx	lr

080180b0 <_ZSt4moveIRSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES1_ILi2EES1_ILi3EEEEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 80180b0:	b480      	push	{r7}
 80180b2:	b083      	sub	sp, #12
 80180b4:	af00      	add	r7, sp, #0
 80180b6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80180b8:	687b      	ldr	r3, [r7, #4]
 80180ba:	4618      	mov	r0, r3
 80180bc:	370c      	adds	r7, #12
 80180be:	46bd      	mov	sp, r7
 80180c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180c4:	4770      	bx	lr

080180c6 <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1EOS6_>:
      _Tuple_impl(_Tuple_impl&& __in)
 80180c6:	b590      	push	{r4, r7, lr}
 80180c8:	b083      	sub	sp, #12
 80180ca:	af00      	add	r7, sp, #0
 80180cc:	6078      	str	r0, [r7, #4]
 80180ce:	6039      	str	r1, [r7, #0]
      : _Inherited(std::move(_M_tail(__in))),
 80180d0:	6838      	ldr	r0, [r7, #0]
 80180d2:	f7ff ffca 	bl	801806a <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEE7_M_tailERS6_>
 80180d6:	4603      	mov	r3, r0
 80180d8:	4618      	mov	r0, r3
 80180da:	f7ff ffe9 	bl	80180b0 <_ZSt4moveIRSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES1_ILi2EES1_ILi3EEEEEONSt16remove_referenceIT_E4typeEOS8_>
 80180de:	4603      	mov	r3, r0
	_Base(std::forward<_Head>(_M_head(__in))) { }
 80180e0:	4619      	mov	r1, r3
 80180e2:	6878      	ldr	r0, [r7, #4]
 80180e4:	f7ff fed8 	bl	8017e98 <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEEC1EOS4_>
 80180e8:	687c      	ldr	r4, [r7, #4]
 80180ea:	6838      	ldr	r0, [r7, #0]
 80180ec:	f7ff ffc8 	bl	8018080 <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEE7_M_headERS6_>
 80180f0:	4603      	mov	r3, r0
 80180f2:	4618      	mov	r0, r3
 80180f4:	f7ff fda6 	bl	8017c44 <_ZSt7forwardIP5IOBusEOT_RNSt16remove_referenceIS2_E4typeE>
 80180f8:	4603      	mov	r3, r0
 80180fa:	4619      	mov	r1, r3
 80180fc:	4620      	mov	r0, r4
 80180fe:	f000 f8c3 	bl	8018288 <_ZNSt10_Head_baseILj0EP5IOBusLb0EEC1IS1_EEOT_>
 8018102:	687b      	ldr	r3, [r7, #4]
 8018104:	4618      	mov	r0, r3
 8018106:	370c      	adds	r7, #12
 8018108:	46bd      	mov	sp, r7
 801810a:	bd90      	pop	{r4, r7, pc}

0801810c <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE21_M_not_empty_functionISC_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 801810c:	b480      	push	{r7}
 801810e:	b083      	sub	sp, #12
 8018110:	af00      	add	r7, sp, #0
 8018112:	6078      	str	r0, [r7, #4]
	  { return true; }
 8018114:	2301      	movs	r3, #1
 8018116:	4618      	mov	r0, r3
 8018118:	370c      	adds	r7, #12
 801811a:	46bd      	mov	sp, r7
 801811c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018120:	4770      	bx	lr

08018122 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE15_M_init_functorERSt9_Any_dataOSC_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 8018122:	b590      	push	{r4, r7, lr}
 8018124:	b085      	sub	sp, #20
 8018126:	af00      	add	r7, sp, #0
 8018128:	6078      	str	r0, [r7, #4]
 801812a:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 801812c:	6838      	ldr	r0, [r7, #0]
 801812e:	f7ff ff06 	bl	8017f3e <_ZSt4moveIRSt5_BindIFM5IOBusFvhPhmEPS1_St12_PlaceholderILi1EES6_ILi2EES6_ILi3EEEEEONSt16remove_referenceIT_E4typeEOSE_>
 8018132:	4603      	mov	r3, r0
 8018134:	4622      	mov	r2, r4
 8018136:	4619      	mov	r1, r3
 8018138:	6878      	ldr	r0, [r7, #4]
 801813a:	f000 f8b6 	bl	80182aa <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE15_M_init_functorERSt9_Any_dataOSC_St17integral_constantIbLb0EE>
 801813e:	bf00      	nop
 8018140:	3714      	adds	r7, #20
 8018142:	46bd      	mov	sp, r7
 8018144:	bd90      	pop	{r4, r7, pc}

08018146 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8018146:	b480      	push	{r7}
 8018148:	b083      	sub	sp, #12
 801814a:	af00      	add	r7, sp, #0
 801814c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801814e:	687b      	ldr	r3, [r7, #4]
 8018150:	4618      	mov	r0, r3
 8018152:	370c      	adds	r7, #12
 8018154:	46bd      	mov	sp, r7
 8018156:	f85d 7b04 	ldr.w	r7, [sp], #4
 801815a:	4770      	bx	lr

0801815c <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801815c:	b480      	push	{r7}
 801815e:	b083      	sub	sp, #12
 8018160:	af00      	add	r7, sp, #0
 8018162:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8018164:	687b      	ldr	r3, [r7, #4]
 8018166:	4618      	mov	r0, r3
 8018168:	370c      	adds	r7, #12
 801816a:	46bd      	mov	sp, r7
 801816c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018170:	4770      	bx	lr

08018172 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8018172:	b480      	push	{r7}
 8018174:	b083      	sub	sp, #12
 8018176:	af00      	add	r7, sp, #0
 8018178:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801817a:	687b      	ldr	r3, [r7, #4]
 801817c:	4618      	mov	r0, r3
 801817e:	370c      	adds	r7, #12
 8018180:	46bd      	mov	sp, r7
 8018182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018186:	4770      	bx	lr

08018188 <_ZNSt17_Function_handlerIFvhPhmESt5_BindIFM5IOBusFvhS0_mEPS3_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE9_M_invokeERKSt9_Any_dataOhOS0_Om>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8018188:	b5f0      	push	{r4, r5, r6, r7, lr}
 801818a:	b085      	sub	sp, #20
 801818c:	af00      	add	r7, sp, #0
 801818e:	60f8      	str	r0, [r7, #12]
 8018190:	60b9      	str	r1, [r7, #8]
 8018192:	607a      	str	r2, [r7, #4]
 8018194:	603b      	str	r3, [r7, #0]
	(*_Base::_M_get_pointer(__functor))(
 8018196:	68f8      	ldr	r0, [r7, #12]
 8018198:	f000 f8a3 	bl	80182e2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE14_M_get_pointerERKSt9_Any_data>
 801819c:	4604      	mov	r4, r0
 801819e:	68b8      	ldr	r0, [r7, #8]
 80181a0:	f7ff ffd1 	bl	8018146 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 80181a4:	4605      	mov	r5, r0
 80181a6:	6878      	ldr	r0, [r7, #4]
 80181a8:	f7ff ffd8 	bl	801815c <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 80181ac:	4606      	mov	r6, r0
 80181ae:	6838      	ldr	r0, [r7, #0]
 80181b0:	f7ff ffdf 	bl	8018172 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 80181b4:	4603      	mov	r3, r0
 80181b6:	4632      	mov	r2, r6
 80181b8:	4629      	mov	r1, r5
 80181ba:	4620      	mov	r0, r4
 80181bc:	f000 f9a9 	bl	8018512 <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEEclIJhS1_mEvEET0_DpOT_>
      }
 80181c0:	bf00      	nop
 80181c2:	3714      	adds	r7, #20
 80181c4:	46bd      	mov	sp, r7
 80181c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080181c8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80181c8:	b5b0      	push	{r4, r5, r7, lr}
 80181ca:	b086      	sub	sp, #24
 80181cc:	af00      	add	r7, sp, #0
 80181ce:	60f8      	str	r0, [r7, #12]
 80181d0:	60b9      	str	r1, [r7, #8]
 80181d2:	4613      	mov	r3, r2
 80181d4:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 80181d6:	79fb      	ldrb	r3, [r7, #7]
 80181d8:	2b03      	cmp	r3, #3
 80181da:	d827      	bhi.n	801822c <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x64>
 80181dc:	a201      	add	r2, pc, #4	; (adr r2, 80181e4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x1c>)
 80181de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80181e2:	bf00      	nop
 80181e4:	080181f5 	.word	0x080181f5
 80181e8:	08018203 	.word	0x08018203
 80181ec:	08018217 	.word	0x08018217
 80181f0:	08018223 	.word	0x08018223
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
 80181f4:	68f8      	ldr	r0, [r7, #12]
 80181f6:	f000 f9af 	bl	8018558 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 80181fa:	4602      	mov	r2, r0
 80181fc:	4b0e      	ldr	r3, [pc, #56]	; (8018238 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x70>)
 80181fe:	6013      	str	r3, [r2, #0]
	      break;
 8018200:	e014      	b.n	801822c <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x64>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8018202:	68f8      	ldr	r0, [r7, #12]
 8018204:	f000 f9b4 	bl	8018570 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERT_v>
 8018208:	4604      	mov	r4, r0
 801820a:	68b8      	ldr	r0, [r7, #8]
 801820c:	f000 f869 	bl	80182e2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE14_M_get_pointerERKSt9_Any_data>
 8018210:	4603      	mov	r3, r0
 8018212:	6023      	str	r3, [r4, #0]
	      break;
 8018214:	e00a      	b.n	801822c <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x64>
	      _M_clone(__dest, __source, _Local_storage());
 8018216:	462a      	mov	r2, r5
 8018218:	68b9      	ldr	r1, [r7, #8]
 801821a:	68f8      	ldr	r0, [r7, #12]
 801821c:	f000 f9b4 	bl	8018588 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE8_M_cloneERSt9_Any_dataRKSE_St17integral_constantIbLb0EE>
	      break;
 8018220:	e004      	b.n	801822c <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x64>
	      _M_destroy(__dest, _Local_storage());
 8018222:	4621      	mov	r1, r4
 8018224:	68f8      	ldr	r0, [r7, #12]
 8018226:	f000 f9cd 	bl	80185c4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE>
	      break;
 801822a:	bf00      	nop
	  return false;
 801822c:	2300      	movs	r3, #0
	}
 801822e:	4618      	mov	r0, r3
 8018230:	3718      	adds	r7, #24
 8018232:	46bd      	mov	sp, r7
 8018234:	bdb0      	pop	{r4, r5, r7, pc}
 8018236:	bf00      	nop
 8018238:	080202e0 	.word	0x080202e0

0801823c <_ZNSt5tupleIJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1IJS1_RKS3_RKS4_RKS5_ELb1EEEDpOT_>:
        constexpr tuple(_UElements&&... __elements)
 801823c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018240:	b086      	sub	sp, #24
 8018242:	af02      	add	r7, sp, #8
 8018244:	60f8      	str	r0, [r7, #12]
 8018246:	60b9      	str	r1, [r7, #8]
 8018248:	607a      	str	r2, [r7, #4]
 801824a:	603b      	str	r3, [r7, #0]
        : _Inherited(std::forward<_UElements>(__elements)...) { }
 801824c:	68fc      	ldr	r4, [r7, #12]
 801824e:	68b8      	ldr	r0, [r7, #8]
 8018250:	f7ff fcf8 	bl	8017c44 <_ZSt7forwardIP5IOBusEOT_RNSt16remove_referenceIS2_E4typeE>
 8018254:	4605      	mov	r5, r0
 8018256:	6878      	ldr	r0, [r7, #4]
 8018258:	f7ff fcff 	bl	8017c5a <_ZSt7forwardIRKSt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS4_E4typeE>
 801825c:	4606      	mov	r6, r0
 801825e:	6838      	ldr	r0, [r7, #0]
 8018260:	f7ff fd06 	bl	8017c70 <_ZSt7forwardIRKSt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS4_E4typeE>
 8018264:	4680      	mov	r8, r0
 8018266:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018268:	f7ff fd0d 	bl	8017c86 <_ZSt7forwardIRKSt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS4_E4typeE>
 801826c:	4603      	mov	r3, r0
 801826e:	9300      	str	r3, [sp, #0]
 8018270:	4643      	mov	r3, r8
 8018272:	4632      	mov	r2, r6
 8018274:	4629      	mov	r1, r5
 8018276:	4620      	mov	r0, r4
 8018278:	f000 f9b6 	bl	80185e8 <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1IS1_JRKS3_RKS4_RKS5_EvEEOT_DpOT0_>
 801827c:	68fb      	ldr	r3, [r7, #12]
 801827e:	4618      	mov	r0, r3
 8018280:	3710      	adds	r7, #16
 8018282:	46bd      	mov	sp, r7
 8018284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018288 <_ZNSt10_Head_baseILj0EP5IOBusLb0EEC1IS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8018288:	b580      	push	{r7, lr}
 801828a:	b082      	sub	sp, #8
 801828c:	af00      	add	r7, sp, #0
 801828e:	6078      	str	r0, [r7, #4]
 8018290:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8018292:	6838      	ldr	r0, [r7, #0]
 8018294:	f7ff fcd6 	bl	8017c44 <_ZSt7forwardIP5IOBusEOT_RNSt16remove_referenceIS2_E4typeE>
 8018298:	4603      	mov	r3, r0
 801829a:	681a      	ldr	r2, [r3, #0]
 801829c:	687b      	ldr	r3, [r7, #4]
 801829e:	601a      	str	r2, [r3, #0]
 80182a0:	687b      	ldr	r3, [r7, #4]
 80182a2:	4618      	mov	r0, r3
 80182a4:	3708      	adds	r7, #8
 80182a6:	46bd      	mov	sp, r7
 80182a8:	bd80      	pop	{r7, pc}

080182aa <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE15_M_init_functorERSt9_Any_dataOSC_St17integral_constantIbLb0EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
 80182aa:	b5b0      	push	{r4, r5, r7, lr}
 80182ac:	b084      	sub	sp, #16
 80182ae:	af00      	add	r7, sp, #0
 80182b0:	60f8      	str	r0, [r7, #12]
 80182b2:	60b9      	str	r1, [r7, #8]
 80182b4:	713a      	strb	r2, [r7, #4]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80182b6:	68b8      	ldr	r0, [r7, #8]
 80182b8:	f7ff fe41 	bl	8017f3e <_ZSt4moveIRSt5_BindIFM5IOBusFvhPhmEPS1_St12_PlaceholderILi1EES6_ILi2EES6_ILi3EEEEEONSt16remove_referenceIT_E4typeEOSE_>
 80182bc:	4605      	mov	r5, r0
 80182be:	200c      	movs	r0, #12
 80182c0:	f7ff fad6 	bl	8017870 <_Znwj>
 80182c4:	4603      	mov	r3, r0
 80182c6:	461c      	mov	r4, r3
 80182c8:	4629      	mov	r1, r5
 80182ca:	4620      	mov	r0, r4
 80182cc:	f7ff fe16 	bl	8017efc <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEEC1EOSA_>
 80182d0:	68f8      	ldr	r0, [r7, #12]
 80182d2:	f000 f94d 	bl	8018570 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERT_v>
 80182d6:	4603      	mov	r3, r0
 80182d8:	601c      	str	r4, [r3, #0]
 80182da:	bf00      	nop
 80182dc:	3710      	adds	r7, #16
 80182de:	46bd      	mov	sp, r7
 80182e0:	bdb0      	pop	{r4, r5, r7, pc}

080182e2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 80182e2:	b580      	push	{r7, lr}
 80182e4:	b084      	sub	sp, #16
 80182e6:	af00      	add	r7, sp, #0
 80182e8:	6078      	str	r0, [r7, #4]
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
 80182ea:	6878      	ldr	r0, [r7, #4]
 80182ec:	f000 f9a2 	bl	8018634 <_ZNKSt9_Any_data9_M_accessIPSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERKT_v>
 80182f0:	4603      	mov	r3, r0
	  const _Functor* __ptr =
 80182f2:	681b      	ldr	r3, [r3, #0]
 80182f4:	60fb      	str	r3, [r7, #12]
	  return const_cast<_Functor*>(__ptr);
 80182f6:	68fb      	ldr	r3, [r7, #12]
	}
 80182f8:	4618      	mov	r0, r3
 80182fa:	3710      	adds	r7, #16
 80182fc:	46bd      	mov	sp, r7
 80182fe:	bd80      	pop	{r7, pc}

08018300 <_ZNSt5tupleIJOhOPhOmEEC1IJhS1_mELb1EEEDpOT_>:
        constexpr tuple(_UElements&&... __elements)
 8018300:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018302:	b085      	sub	sp, #20
 8018304:	af00      	add	r7, sp, #0
 8018306:	60f8      	str	r0, [r7, #12]
 8018308:	60b9      	str	r1, [r7, #8]
 801830a:	607a      	str	r2, [r7, #4]
 801830c:	603b      	str	r3, [r7, #0]
        : _Inherited(std::forward<_UElements>(__elements)...) { }
 801830e:	68fc      	ldr	r4, [r7, #12]
 8018310:	68b8      	ldr	r0, [r7, #8]
 8018312:	f7ff ff18 	bl	8018146 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 8018316:	4605      	mov	r5, r0
 8018318:	6878      	ldr	r0, [r7, #4]
 801831a:	f7ff ff1f 	bl	801815c <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 801831e:	4606      	mov	r6, r0
 8018320:	6838      	ldr	r0, [r7, #0]
 8018322:	f7ff ff26 	bl	8018172 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 8018326:	4603      	mov	r3, r0
 8018328:	4632      	mov	r2, r6
 801832a:	4629      	mov	r1, r5
 801832c:	4620      	mov	r0, r4
 801832e:	f000 f805 	bl	801833c <_ZNSt11_Tuple_implILj0EJOhOPhOmEEC1IhJS1_mEvEEOT_DpOT0_>
 8018332:	68fb      	ldr	r3, [r7, #12]
 8018334:	4618      	mov	r0, r3
 8018336:	3714      	adds	r7, #20
 8018338:	46bd      	mov	sp, r7
 801833a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801833c <_ZNSt11_Tuple_implILj0EJOhOPhOmEEC1IhJS1_mEvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 801833c:	b5b0      	push	{r4, r5, r7, lr}
 801833e:	b084      	sub	sp, #16
 8018340:	af00      	add	r7, sp, #0
 8018342:	60f8      	str	r0, [r7, #12]
 8018344:	60b9      	str	r1, [r7, #8]
 8018346:	607a      	str	r2, [r7, #4]
 8018348:	603b      	str	r3, [r7, #0]
	  _Base(std::forward<_UHead>(__head)) { }
 801834a:	68fc      	ldr	r4, [r7, #12]
 801834c:	6878      	ldr	r0, [r7, #4]
 801834e:	f7ff ff05 	bl	801815c <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 8018352:	4605      	mov	r5, r0
 8018354:	6838      	ldr	r0, [r7, #0]
 8018356:	f7ff ff0c 	bl	8018172 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 801835a:	4603      	mov	r3, r0
 801835c:	461a      	mov	r2, r3
 801835e:	4629      	mov	r1, r5
 8018360:	4620      	mov	r0, r4
 8018362:	f000 f810 	bl	8018386 <_ZNSt11_Tuple_implILj1EJOPhOmEEC1IS0_JmEvEEOT_DpOT0_>
 8018366:	68fb      	ldr	r3, [r7, #12]
 8018368:	f103 0408 	add.w	r4, r3, #8
 801836c:	68b8      	ldr	r0, [r7, #8]
 801836e:	f7ff feea 	bl	8018146 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 8018372:	4603      	mov	r3, r0
 8018374:	4619      	mov	r1, r3
 8018376:	4620      	mov	r0, r4
 8018378:	f000 f856 	bl	8018428 <_ZNSt10_Head_baseILj0EOhLb0EEC1IhEEOT_>
 801837c:	68fb      	ldr	r3, [r7, #12]
 801837e:	4618      	mov	r0, r3
 8018380:	3710      	adds	r7, #16
 8018382:	46bd      	mov	sp, r7
 8018384:	bdb0      	pop	{r4, r5, r7, pc}

08018386 <_ZNSt11_Tuple_implILj1EJOPhOmEEC1IS0_JmEvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 8018386:	b590      	push	{r4, r7, lr}
 8018388:	b085      	sub	sp, #20
 801838a:	af00      	add	r7, sp, #0
 801838c:	60f8      	str	r0, [r7, #12]
 801838e:	60b9      	str	r1, [r7, #8]
 8018390:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 8018392:	68fc      	ldr	r4, [r7, #12]
 8018394:	6878      	ldr	r0, [r7, #4]
 8018396:	f7ff feec 	bl	8018172 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 801839a:	4603      	mov	r3, r0
 801839c:	4619      	mov	r1, r3
 801839e:	4620      	mov	r0, r4
 80183a0:	f000 f80f 	bl	80183c2 <_ZNSt11_Tuple_implILj2EJOmEEC1ImEEOT_>
 80183a4:	68fb      	ldr	r3, [r7, #12]
 80183a6:	1d1c      	adds	r4, r3, #4
 80183a8:	68b8      	ldr	r0, [r7, #8]
 80183aa:	f7ff fed7 	bl	801815c <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 80183ae:	4603      	mov	r3, r0
 80183b0:	4619      	mov	r1, r3
 80183b2:	4620      	mov	r0, r4
 80183b4:	f000 f828 	bl	8018408 <_ZNSt10_Head_baseILj1EOPhLb0EEC1IS0_EEOT_>
 80183b8:	68fb      	ldr	r3, [r7, #12]
 80183ba:	4618      	mov	r0, r3
 80183bc:	3714      	adds	r7, #20
 80183be:	46bd      	mov	sp, r7
 80183c0:	bd90      	pop	{r4, r7, pc}

080183c2 <_ZNSt11_Tuple_implILj2EJOmEEC1ImEEOT_>:
        constexpr _Tuple_impl(_UHead&& __head)
 80183c2:	b590      	push	{r4, r7, lr}
 80183c4:	b083      	sub	sp, #12
 80183c6:	af00      	add	r7, sp, #0
 80183c8:	6078      	str	r0, [r7, #4]
 80183ca:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head)) { }
 80183cc:	687c      	ldr	r4, [r7, #4]
 80183ce:	6838      	ldr	r0, [r7, #0]
 80183d0:	f7ff fecf 	bl	8018172 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 80183d4:	4603      	mov	r3, r0
 80183d6:	4619      	mov	r1, r3
 80183d8:	4620      	mov	r0, r4
 80183da:	f000 f805 	bl	80183e8 <_ZNSt10_Head_baseILj2EOmLb0EEC1ImEEOT_>
 80183de:	687b      	ldr	r3, [r7, #4]
 80183e0:	4618      	mov	r0, r3
 80183e2:	370c      	adds	r7, #12
 80183e4:	46bd      	mov	sp, r7
 80183e6:	bd90      	pop	{r4, r7, pc}

080183e8 <_ZNSt10_Head_baseILj2EOmLb0EEC1ImEEOT_>:
        constexpr _Head_base(_UHead&& __h)
 80183e8:	b580      	push	{r7, lr}
 80183ea:	b082      	sub	sp, #8
 80183ec:	af00      	add	r7, sp, #0
 80183ee:	6078      	str	r0, [r7, #4]
 80183f0:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80183f2:	6838      	ldr	r0, [r7, #0]
 80183f4:	f7ff febd 	bl	8018172 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 80183f8:	4602      	mov	r2, r0
 80183fa:	687b      	ldr	r3, [r7, #4]
 80183fc:	601a      	str	r2, [r3, #0]
 80183fe:	687b      	ldr	r3, [r7, #4]
 8018400:	4618      	mov	r0, r3
 8018402:	3708      	adds	r7, #8
 8018404:	46bd      	mov	sp, r7
 8018406:	bd80      	pop	{r7, pc}

08018408 <_ZNSt10_Head_baseILj1EOPhLb0EEC1IS0_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8018408:	b580      	push	{r7, lr}
 801840a:	b082      	sub	sp, #8
 801840c:	af00      	add	r7, sp, #0
 801840e:	6078      	str	r0, [r7, #4]
 8018410:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8018412:	6838      	ldr	r0, [r7, #0]
 8018414:	f7ff fea2 	bl	801815c <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 8018418:	4602      	mov	r2, r0
 801841a:	687b      	ldr	r3, [r7, #4]
 801841c:	601a      	str	r2, [r3, #0]
 801841e:	687b      	ldr	r3, [r7, #4]
 8018420:	4618      	mov	r0, r3
 8018422:	3708      	adds	r7, #8
 8018424:	46bd      	mov	sp, r7
 8018426:	bd80      	pop	{r7, pc}

08018428 <_ZNSt10_Head_baseILj0EOhLb0EEC1IhEEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8018428:	b580      	push	{r7, lr}
 801842a:	b082      	sub	sp, #8
 801842c:	af00      	add	r7, sp, #0
 801842e:	6078      	str	r0, [r7, #4]
 8018430:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8018432:	6838      	ldr	r0, [r7, #0]
 8018434:	f7ff fe87 	bl	8018146 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 8018438:	4602      	mov	r2, r0
 801843a:	687b      	ldr	r3, [r7, #4]
 801843c:	601a      	str	r2, [r3, #0]
 801843e:	687b      	ldr	r3, [r7, #4]
 8018440:	4618      	mov	r0, r3
 8018442:	3708      	adds	r7, #8
 8018444:	46bd      	mov	sp, r7
 8018446:	bd80      	pop	{r7, pc}

08018448 <_ZNSt11_Tuple_implILj2EJOmEE7_M_headERS1_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8018448:	b580      	push	{r7, lr}
 801844a:	b082      	sub	sp, #8
 801844c:	af00      	add	r7, sp, #0
 801844e:	6078      	str	r0, [r7, #4]
 8018450:	687b      	ldr	r3, [r7, #4]
 8018452:	4618      	mov	r0, r3
 8018454:	f000 f805 	bl	8018462 <_ZNSt10_Head_baseILj2EOmLb0EE7_M_headERS1_>
 8018458:	4603      	mov	r3, r0
 801845a:	4618      	mov	r0, r3
 801845c:	3708      	adds	r7, #8
 801845e:	46bd      	mov	sp, r7
 8018460:	bd80      	pop	{r7, pc}

08018462 <_ZNSt10_Head_baseILj2EOmLb0EE7_M_headERS1_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8018462:	b480      	push	{r7}
 8018464:	b083      	sub	sp, #12
 8018466:	af00      	add	r7, sp, #0
 8018468:	6078      	str	r0, [r7, #4]
 801846a:	687b      	ldr	r3, [r7, #4]
 801846c:	681b      	ldr	r3, [r3, #0]
 801846e:	4618      	mov	r0, r3
 8018470:	370c      	adds	r7, #12
 8018472:	46bd      	mov	sp, r7
 8018474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018478:	4770      	bx	lr

0801847a <_ZSt7forwardIOmEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801847a:	b480      	push	{r7}
 801847c:	b083      	sub	sp, #12
 801847e:	af00      	add	r7, sp, #0
 8018480:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8018482:	687b      	ldr	r3, [r7, #4]
 8018484:	4618      	mov	r0, r3
 8018486:	370c      	adds	r7, #12
 8018488:	46bd      	mov	sp, r7
 801848a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801848e:	4770      	bx	lr

08018490 <_ZNSt11_Tuple_implILj1EJOPhOmEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8018490:	b580      	push	{r7, lr}
 8018492:	b082      	sub	sp, #8
 8018494:	af00      	add	r7, sp, #0
 8018496:	6078      	str	r0, [r7, #4]
 8018498:	687b      	ldr	r3, [r7, #4]
 801849a:	3304      	adds	r3, #4
 801849c:	4618      	mov	r0, r3
 801849e:	f000 f805 	bl	80184ac <_ZNSt10_Head_baseILj1EOPhLb0EE7_M_headERS2_>
 80184a2:	4603      	mov	r3, r0
 80184a4:	4618      	mov	r0, r3
 80184a6:	3708      	adds	r7, #8
 80184a8:	46bd      	mov	sp, r7
 80184aa:	bd80      	pop	{r7, pc}

080184ac <_ZNSt10_Head_baseILj1EOPhLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80184ac:	b480      	push	{r7}
 80184ae:	b083      	sub	sp, #12
 80184b0:	af00      	add	r7, sp, #0
 80184b2:	6078      	str	r0, [r7, #4]
 80184b4:	687b      	ldr	r3, [r7, #4]
 80184b6:	681b      	ldr	r3, [r3, #0]
 80184b8:	4618      	mov	r0, r3
 80184ba:	370c      	adds	r7, #12
 80184bc:	46bd      	mov	sp, r7
 80184be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184c2:	4770      	bx	lr

080184c4 <_ZSt7forwardIOPhEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80184c4:	b480      	push	{r7}
 80184c6:	b083      	sub	sp, #12
 80184c8:	af00      	add	r7, sp, #0
 80184ca:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80184cc:	687b      	ldr	r3, [r7, #4]
 80184ce:	4618      	mov	r0, r3
 80184d0:	370c      	adds	r7, #12
 80184d2:	46bd      	mov	sp, r7
 80184d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184d8:	4770      	bx	lr

080184da <_ZSt16forward_as_tupleIJhPhmEESt5tupleIJDpOT_EES4_>:

  // _GLIBCXX_RESOLVE_LIB_DEFECTS
  // 2275. Why is forward_as_tuple not constexpr?
  template<typename... _Elements>
    constexpr tuple<_Elements&&...>
    forward_as_tuple(_Elements&&... __args) noexcept
 80184da:	b5b0      	push	{r4, r5, r7, lr}
 80184dc:	b084      	sub	sp, #16
 80184de:	af00      	add	r7, sp, #0
 80184e0:	60f8      	str	r0, [r7, #12]
 80184e2:	60b9      	str	r1, [r7, #8]
 80184e4:	607a      	str	r2, [r7, #4]
 80184e6:	603b      	str	r3, [r7, #0]
    { return tuple<_Elements&&...>(std::forward<_Elements>(__args)...); }
 80184e8:	68b8      	ldr	r0, [r7, #8]
 80184ea:	f7ff fe2c 	bl	8018146 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 80184ee:	4604      	mov	r4, r0
 80184f0:	6878      	ldr	r0, [r7, #4]
 80184f2:	f7ff fe33 	bl	801815c <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 80184f6:	4605      	mov	r5, r0
 80184f8:	6838      	ldr	r0, [r7, #0]
 80184fa:	f7ff fe3a 	bl	8018172 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 80184fe:	4603      	mov	r3, r0
 8018500:	462a      	mov	r2, r5
 8018502:	4621      	mov	r1, r4
 8018504:	68f8      	ldr	r0, [r7, #12]
 8018506:	f7ff fefb 	bl	8018300 <_ZNSt5tupleIJOhOPhOmEEC1IJhS1_mELb1EEEDpOT_>
 801850a:	68f8      	ldr	r0, [r7, #12]
 801850c:	3710      	adds	r7, #16
 801850e:	46bd      	mov	sp, r7
 8018510:	bdb0      	pop	{r4, r5, r7, pc}

08018512 <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEEclIJhS1_mEvEET0_DpOT_>:
	operator()(_Args&&... __args)
 8018512:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018514:	b089      	sub	sp, #36	; 0x24
 8018516:	af00      	add	r7, sp, #0
 8018518:	60f8      	str	r0, [r7, #12]
 801851a:	60b9      	str	r1, [r7, #8]
 801851c:	607a      	str	r2, [r7, #4]
 801851e:	603b      	str	r3, [r7, #0]
	      _Bound_indexes());
 8018520:	68b8      	ldr	r0, [r7, #8]
 8018522:	f7ff fe10 	bl	8018146 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 8018526:	4604      	mov	r4, r0
 8018528:	6878      	ldr	r0, [r7, #4]
 801852a:	f7ff fe17 	bl	801815c <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 801852e:	4605      	mov	r5, r0
 8018530:	6838      	ldr	r0, [r7, #0]
 8018532:	f7ff fe1e 	bl	8018172 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 8018536:	4603      	mov	r3, r0
 8018538:	f107 0010 	add.w	r0, r7, #16
 801853c:	462a      	mov	r2, r5
 801853e:	4621      	mov	r1, r4
 8018540:	f7ff ffcb 	bl	80184da <_ZSt16forward_as_tupleIJhPhmEESt5tupleIJDpOT_EES4_>
 8018544:	f107 0310 	add.w	r3, r7, #16
 8018548:	4632      	mov	r2, r6
 801854a:	4619      	mov	r1, r3
 801854c:	68f8      	ldr	r0, [r7, #12]
 801854e:	f000 f8a2 	bl	8018696 <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEE6__callIvJOhOS1_OmEJLj0ELj1ELj2ELj3EEEET_OSt5tupleIJDpT0_EESt12_Index_tupleIJXspT1_EEE>
	}
 8018552:	3724      	adds	r7, #36	; 0x24
 8018554:	46bd      	mov	sp, r7
 8018556:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018558 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>:
      _M_access()
 8018558:	b580      	push	{r7, lr}
 801855a:	b082      	sub	sp, #8
 801855c:	af00      	add	r7, sp, #0
 801855e:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8018560:	6878      	ldr	r0, [r7, #4]
 8018562:	f7ff fa18 	bl	8017996 <_ZNSt9_Any_data9_M_accessEv>
 8018566:	4603      	mov	r3, r0
 8018568:	4618      	mov	r0, r3
 801856a:	3708      	adds	r7, #8
 801856c:	46bd      	mov	sp, r7
 801856e:	bd80      	pop	{r7, pc}

08018570 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERT_v>:
      _M_access()
 8018570:	b580      	push	{r7, lr}
 8018572:	b082      	sub	sp, #8
 8018574:	af00      	add	r7, sp, #0
 8018576:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8018578:	6878      	ldr	r0, [r7, #4]
 801857a:	f7ff fa0c 	bl	8017996 <_ZNSt9_Any_data9_M_accessEv>
 801857e:	4603      	mov	r3, r0
 8018580:	4618      	mov	r0, r3
 8018582:	3708      	adds	r7, #8
 8018584:	46bd      	mov	sp, r7
 8018586:	bd80      	pop	{r7, pc}

08018588 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE8_M_cloneERSt9_Any_dataRKSE_St17integral_constantIbLb0EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
 8018588:	b5b0      	push	{r4, r5, r7, lr}
 801858a:	b084      	sub	sp, #16
 801858c:	af00      	add	r7, sp, #0
 801858e:	60f8      	str	r0, [r7, #12]
 8018590:	60b9      	str	r1, [r7, #8]
 8018592:	713a      	strb	r2, [r7, #4]
	    new _Functor(*__source._M_access<_Functor*>());
 8018594:	68b8      	ldr	r0, [r7, #8]
 8018596:	f000 f84d 	bl	8018634 <_ZNKSt9_Any_data9_M_accessIPSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERKT_v>
 801859a:	4603      	mov	r3, r0
	  __dest._M_access<_Functor*>() =
 801859c:	681d      	ldr	r5, [r3, #0]
	    new _Functor(*__source._M_access<_Functor*>());
 801859e:	200c      	movs	r0, #12
 80185a0:	f7ff f966 	bl	8017870 <_Znwj>
 80185a4:	4603      	mov	r3, r0
 80185a6:	461c      	mov	r4, r3
	  __dest._M_access<_Functor*>() =
 80185a8:	4623      	mov	r3, r4
 80185aa:	462a      	mov	r2, r5
 80185ac:	ca07      	ldmia	r2, {r0, r1, r2}
 80185ae:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80185b2:	68f8      	ldr	r0, [r7, #12]
 80185b4:	f7ff ffdc 	bl	8018570 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERT_v>
 80185b8:	4603      	mov	r3, r0
 80185ba:	601c      	str	r4, [r3, #0]
	}
 80185bc:	bf00      	nop
 80185be:	3710      	adds	r7, #16
 80185c0:	46bd      	mov	sp, r7
 80185c2:	bdb0      	pop	{r4, r5, r7, pc}

080185c4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE>:
	_M_destroy(_Any_data& __victim, false_type)
 80185c4:	b580      	push	{r7, lr}
 80185c6:	b082      	sub	sp, #8
 80185c8:	af00      	add	r7, sp, #0
 80185ca:	6078      	str	r0, [r7, #4]
 80185cc:	7039      	strb	r1, [r7, #0]
	  delete __victim._M_access<_Functor*>();
 80185ce:	6878      	ldr	r0, [r7, #4]
 80185d0:	f7ff ffce 	bl	8018570 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERT_v>
 80185d4:	4603      	mov	r3, r0
 80185d6:	681b      	ldr	r3, [r3, #0]
 80185d8:	210c      	movs	r1, #12
 80185da:	4618      	mov	r0, r3
 80185dc:	f001 fd04 	bl	8019fe8 <_ZdlPvj>
	}
 80185e0:	bf00      	nop
 80185e2:	3708      	adds	r7, #8
 80185e4:	46bd      	mov	sp, r7
 80185e6:	bd80      	pop	{r7, pc}

080185e8 <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1IS1_JRKS3_RKS4_RKS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 80185e8:	b5b0      	push	{r4, r5, r7, lr}
 80185ea:	b084      	sub	sp, #16
 80185ec:	af00      	add	r7, sp, #0
 80185ee:	60f8      	str	r0, [r7, #12]
 80185f0:	60b9      	str	r1, [r7, #8]
 80185f2:	607a      	str	r2, [r7, #4]
 80185f4:	603b      	str	r3, [r7, #0]
	  _Base(std::forward<_UHead>(__head)) { }
 80185f6:	6878      	ldr	r0, [r7, #4]
 80185f8:	f7ff fb2f 	bl	8017c5a <_ZSt7forwardIRKSt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS4_E4typeE>
 80185fc:	4604      	mov	r4, r0
 80185fe:	6838      	ldr	r0, [r7, #0]
 8018600:	f7ff fb36 	bl	8017c70 <_ZSt7forwardIRKSt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS4_E4typeE>
 8018604:	4605      	mov	r5, r0
 8018606:	6a38      	ldr	r0, [r7, #32]
 8018608:	f7ff fb3d 	bl	8017c86 <_ZSt7forwardIRKSt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS4_E4typeE>
 801860c:	4603      	mov	r3, r0
 801860e:	462a      	mov	r2, r5
 8018610:	4621      	mov	r1, r4
 8018612:	68f8      	ldr	r0, [r7, #12]
 8018614:	f000 f887 	bl	8018726 <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEEC1ERKS1_RKS2_RKS3_>
 8018618:	68fc      	ldr	r4, [r7, #12]
 801861a:	68b8      	ldr	r0, [r7, #8]
 801861c:	f7ff fb12 	bl	8017c44 <_ZSt7forwardIP5IOBusEOT_RNSt16remove_referenceIS2_E4typeE>
 8018620:	4603      	mov	r3, r0
 8018622:	4619      	mov	r1, r3
 8018624:	4620      	mov	r0, r4
 8018626:	f7ff fe2f 	bl	8018288 <_ZNSt10_Head_baseILj0EP5IOBusLb0EEC1IS1_EEOT_>
 801862a:	68fb      	ldr	r3, [r7, #12]
 801862c:	4618      	mov	r0, r3
 801862e:	3710      	adds	r7, #16
 8018630:	46bd      	mov	sp, r7
 8018632:	bdb0      	pop	{r4, r5, r7, pc}

08018634 <_ZNKSt9_Any_data9_M_accessIPSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERKT_v>:
      _M_access() const
 8018634:	b580      	push	{r7, lr}
 8018636:	b082      	sub	sp, #8
 8018638:	af00      	add	r7, sp, #0
 801863a:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 801863c:	6878      	ldr	r0, [r7, #4]
 801863e:	f7ff f9b5 	bl	80179ac <_ZNKSt9_Any_data9_M_accessEv>
 8018642:	4603      	mov	r3, r0
 8018644:	4618      	mov	r0, r3
 8018646:	3708      	adds	r7, #8
 8018648:	46bd      	mov	sp, r7
 801864a:	bd80      	pop	{r7, pc}

0801864c <_ZNSt11_Tuple_implILj0EJOhOPhOmEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 801864c:	b580      	push	{r7, lr}
 801864e:	b082      	sub	sp, #8
 8018650:	af00      	add	r7, sp, #0
 8018652:	6078      	str	r0, [r7, #4]
 8018654:	687b      	ldr	r3, [r7, #4]
 8018656:	3308      	adds	r3, #8
 8018658:	4618      	mov	r0, r3
 801865a:	f000 f805 	bl	8018668 <_ZNSt10_Head_baseILj0EOhLb0EE7_M_headERS1_>
 801865e:	4603      	mov	r3, r0
 8018660:	4618      	mov	r0, r3
 8018662:	3708      	adds	r7, #8
 8018664:	46bd      	mov	sp, r7
 8018666:	bd80      	pop	{r7, pc}

08018668 <_ZNSt10_Head_baseILj0EOhLb0EE7_M_headERS1_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8018668:	b480      	push	{r7}
 801866a:	b083      	sub	sp, #12
 801866c:	af00      	add	r7, sp, #0
 801866e:	6078      	str	r0, [r7, #4]
 8018670:	687b      	ldr	r3, [r7, #4]
 8018672:	681b      	ldr	r3, [r3, #0]
 8018674:	4618      	mov	r0, r3
 8018676:	370c      	adds	r7, #12
 8018678:	46bd      	mov	sp, r7
 801867a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801867e:	4770      	bx	lr

08018680 <_ZSt7forwardIOhEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8018680:	b480      	push	{r7}
 8018682:	b083      	sub	sp, #12
 8018684:	af00      	add	r7, sp, #0
 8018686:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8018688:	687b      	ldr	r3, [r7, #4]
 801868a:	4618      	mov	r0, r3
 801868c:	370c      	adds	r7, #12
 801868e:	46bd      	mov	sp, r7
 8018690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018694:	4770      	bx	lr

08018696 <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEE6__callIvJOhOS1_OmEJLj0ELj1ELj2ELj3EEEET_OSt5tupleIJDpT0_EESt12_Index_tupleIJXspT1_EEE>:
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
 8018696:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801869a:	b08a      	sub	sp, #40	; 0x28
 801869c:	af02      	add	r7, sp, #8
 801869e:	60f8      	str	r0, [r7, #12]
 80186a0:	60b9      	str	r1, [r7, #8]
 80186a2:	713a      	strb	r2, [r7, #4]
	  return std::__invoke(_M_f,
 80186a4:	68fc      	ldr	r4, [r7, #12]
	      _Mu<_Bound_args>()(std::get<_Indexes>(_M_bound_args), __args)...
 80186a6:	68fb      	ldr	r3, [r7, #12]
 80186a8:	3308      	adds	r3, #8
 80186aa:	4618      	mov	r0, r3
 80186ac:	f000 f850 	bl	8018750 <_ZSt3getILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 80186b0:	4601      	mov	r1, r0
	  return std::__invoke(_M_f,
 80186b2:	f107 0310 	add.w	r3, r7, #16
 80186b6:	68ba      	ldr	r2, [r7, #8]
 80186b8:	4618      	mov	r0, r3
 80186ba:	f000 f856 	bl	801876a <_ZNVKSt3_MuIP5IOBusLb0ELb0EEclIRS1_St5tupleIJOhOPhOmEEEEOT_SC_RT0_>
 80186be:	4605      	mov	r5, r0
	      _Mu<_Bound_args>()(std::get<_Indexes>(_M_bound_args), __args)...
 80186c0:	68fb      	ldr	r3, [r7, #12]
 80186c2:	3308      	adds	r3, #8
 80186c4:	4618      	mov	r0, r3
 80186c6:	f000 f85e 	bl	8018786 <_ZSt3getILj1EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 80186ca:	4601      	mov	r1, r0
	  return std::__invoke(_M_f,
 80186cc:	f107 0314 	add.w	r3, r7, #20
 80186d0:	68ba      	ldr	r2, [r7, #8]
 80186d2:	4618      	mov	r0, r3
 80186d4:	f000 f86e 	bl	80187b4 <_ZNVKSt3_MuISt12_PlaceholderILi1EELb0ELb1EEclISt5tupleIJOhOPhOmEEEEONSt9enable_ifIXltLj0EsrSt10tuple_sizeIT_E5valueESt13tuple_elementILj0ESC_EE4type4typeERVKS1_RSC_>
 80186d8:	4606      	mov	r6, r0
	      _Mu<_Bound_args>()(std::get<_Indexes>(_M_bound_args), __args)...
 80186da:	68fb      	ldr	r3, [r7, #12]
 80186dc:	3308      	adds	r3, #8
 80186de:	4618      	mov	r0, r3
 80186e0:	f000 f87a 	bl	80187d8 <_ZSt3getILj2EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 80186e4:	4601      	mov	r1, r0
	  return std::__invoke(_M_f,
 80186e6:	f107 0318 	add.w	r3, r7, #24
 80186ea:	68ba      	ldr	r2, [r7, #8]
 80186ec:	4618      	mov	r0, r3
 80186ee:	f000 f87f 	bl	80187f0 <_ZNVKSt3_MuISt12_PlaceholderILi2EELb0ELb1EEclISt5tupleIJOhOPhOmEEEEONSt9enable_ifIXltLj1EsrSt10tuple_sizeIT_E5valueESt13tuple_elementILj1ESC_EE4type4typeERVKS1_RSC_>
 80186f2:	4680      	mov	r8, r0
	      _Mu<_Bound_args>()(std::get<_Indexes>(_M_bound_args), __args)...
 80186f4:	68fb      	ldr	r3, [r7, #12]
 80186f6:	3308      	adds	r3, #8
 80186f8:	4618      	mov	r0, r3
 80186fa:	f000 f88b 	bl	8018814 <_ZSt3getILj3EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 80186fe:	4601      	mov	r1, r0
	  return std::__invoke(_M_f,
 8018700:	f107 031c 	add.w	r3, r7, #28
 8018704:	68ba      	ldr	r2, [r7, #8]
 8018706:	4618      	mov	r0, r3
 8018708:	f000 f890 	bl	801882c <_ZNVKSt3_MuISt12_PlaceholderILi3EELb0ELb1EEclISt5tupleIJOhOPhOmEEEEONSt9enable_ifIXltLj2EsrSt10tuple_sizeIT_E5valueESt13tuple_elementILj2ESC_EE4type4typeERVKS1_RSC_>
 801870c:	4603      	mov	r3, r0
 801870e:	9300      	str	r3, [sp, #0]
 8018710:	4643      	mov	r3, r8
 8018712:	4632      	mov	r2, r6
 8018714:	4629      	mov	r1, r5
 8018716:	4620      	mov	r0, r4
 8018718:	f000 f8b0 	bl	801887c <_ZSt8__invokeIRM5IOBusFvhPhmEJRPS0_hS1_mEENSt15__invoke_resultIT_JDpT0_EE4typeEOS8_DpOS9_>
	      );
 801871c:	bf00      	nop
	}
 801871e:	3720      	adds	r7, #32
 8018720:	46bd      	mov	sp, r7
 8018722:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018726 <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEEC1ERKS1_RKS2_RKS3_>:
      constexpr _Tuple_impl(const _Head& __head, const _Tail&... __tail)
 8018726:	b580      	push	{r7, lr}
 8018728:	b084      	sub	sp, #16
 801872a:	af00      	add	r7, sp, #0
 801872c:	60f8      	str	r0, [r7, #12]
 801872e:	60b9      	str	r1, [r7, #8]
 8018730:	607a      	str	r2, [r7, #4]
 8018732:	603b      	str	r3, [r7, #0]
      : _Inherited(__tail...), _Base(__head) { }
 8018734:	683a      	ldr	r2, [r7, #0]
 8018736:	6879      	ldr	r1, [r7, #4]
 8018738:	68f8      	ldr	r0, [r7, #12]
 801873a:	f000 f8c8 	bl	80188ce <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEEC1ERKS1_RKS2_>
 801873e:	68b9      	ldr	r1, [r7, #8]
 8018740:	68f8      	ldr	r0, [r7, #12]
 8018742:	f000 f8d7 	bl	80188f4 <_ZNSt10_Head_baseILj1ESt12_PlaceholderILi1EELb1EEC1ERKS1_>
 8018746:	68fb      	ldr	r3, [r7, #12]
 8018748:	4618      	mov	r0, r3
 801874a:	3710      	adds	r7, #16
 801874c:	46bd      	mov	sp, r7
 801874e:	bd80      	pop	{r7, pc}

08018750 <_ZSt3getILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8018750:	b580      	push	{r7, lr}
 8018752:	b082      	sub	sp, #8
 8018754:	af00      	add	r7, sp, #0
 8018756:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8018758:	687b      	ldr	r3, [r7, #4]
 801875a:	4618      	mov	r0, r3
 801875c:	f000 f8d6 	bl	801890c <_ZSt12__get_helperILj0EP5IOBusJSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8018760:	4603      	mov	r3, r0
 8018762:	4618      	mov	r0, r3
 8018764:	3708      	adds	r7, #8
 8018766:	46bd      	mov	sp, r7
 8018768:	bd80      	pop	{r7, pc}

0801876a <_ZNVKSt3_MuIP5IOBusLb0ELb0EEclIRS1_St5tupleIJOhOPhOmEEEEOT_SC_RT0_>:
	operator()(_CVArg&& __arg, _Tuple&) const volatile
 801876a:	b580      	push	{r7, lr}
 801876c:	b084      	sub	sp, #16
 801876e:	af00      	add	r7, sp, #0
 8018770:	60f8      	str	r0, [r7, #12]
 8018772:	60b9      	str	r1, [r7, #8]
 8018774:	607a      	str	r2, [r7, #4]
	{ return std::forward<_CVArg>(__arg); }
 8018776:	68b8      	ldr	r0, [r7, #8]
 8018778:	f000 f875 	bl	8018866 <_ZSt7forwardIRP5IOBusEOT_RNSt16remove_referenceIS3_E4typeE>
 801877c:	4603      	mov	r3, r0
 801877e:	4618      	mov	r0, r3
 8018780:	3710      	adds	r7, #16
 8018782:	46bd      	mov	sp, r7
 8018784:	bd80      	pop	{r7, pc}

08018786 <_ZSt3getILj1EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8018786:	b580      	push	{r7, lr}
 8018788:	b082      	sub	sp, #8
 801878a:	af00      	add	r7, sp, #0
 801878c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 801878e:	6878      	ldr	r0, [r7, #4]
 8018790:	f000 f8c8 	bl	8018924 <_ZSt12__get_helperILj1ESt12_PlaceholderILi1EEJS0_ILi2EES0_ILi3EEEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8018794:	4603      	mov	r3, r0
 8018796:	4618      	mov	r0, r3
 8018798:	3708      	adds	r7, #8
 801879a:	46bd      	mov	sp, r7
 801879c:	bd80      	pop	{r7, pc}

0801879e <_ZSt4moveIRSt5tupleIJOhOPhOmEEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 801879e:	b480      	push	{r7}
 80187a0:	b083      	sub	sp, #12
 80187a2:	af00      	add	r7, sp, #0
 80187a4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80187a6:	687b      	ldr	r3, [r7, #4]
 80187a8:	4618      	mov	r0, r3
 80187aa:	370c      	adds	r7, #12
 80187ac:	46bd      	mov	sp, r7
 80187ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187b2:	4770      	bx	lr

080187b4 <_ZNVKSt3_MuISt12_PlaceholderILi1EELb0ELb1EEclISt5tupleIJOhOPhOmEEEEONSt9enable_ifIXltLj0EsrSt10tuple_sizeIT_E5valueESt13tuple_elementILj0ESC_EE4type4typeERVKS1_RSC_>:
	operator()(const volatile _Arg&, _Tuple& __tuple) const volatile
 80187b4:	b580      	push	{r7, lr}
 80187b6:	b084      	sub	sp, #16
 80187b8:	af00      	add	r7, sp, #0
 80187ba:	60f8      	str	r0, [r7, #12]
 80187bc:	60b9      	str	r1, [r7, #8]
 80187be:	607a      	str	r2, [r7, #4]
	    ::std::get<(is_placeholder<_Arg>::value - 1)>(std::move(__tuple));
 80187c0:	6878      	ldr	r0, [r7, #4]
 80187c2:	f7ff ffec 	bl	801879e <_ZSt4moveIRSt5tupleIJOhOPhOmEEEONSt16remove_referenceIT_E4typeEOS8_>
 80187c6:	4603      	mov	r3, r0
 80187c8:	4618      	mov	r0, r3
 80187ca:	f000 f8d0 	bl	801896e <_ZSt3getILj0EJOhOPhOmEEONSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOS8_>
 80187ce:	4603      	mov	r3, r0
	}
 80187d0:	4618      	mov	r0, r3
 80187d2:	3710      	adds	r7, #16
 80187d4:	46bd      	mov	sp, r7
 80187d6:	bd80      	pop	{r7, pc}

080187d8 <_ZSt3getILj2EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 80187d8:	b580      	push	{r7, lr}
 80187da:	b082      	sub	sp, #8
 80187dc:	af00      	add	r7, sp, #0
 80187de:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80187e0:	6878      	ldr	r0, [r7, #4]
 80187e2:	f000 f8d4 	bl	801898e <_ZSt12__get_helperILj2ESt12_PlaceholderILi2EEJS0_ILi3EEEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 80187e6:	4603      	mov	r3, r0
 80187e8:	4618      	mov	r0, r3
 80187ea:	3708      	adds	r7, #8
 80187ec:	46bd      	mov	sp, r7
 80187ee:	bd80      	pop	{r7, pc}

080187f0 <_ZNVKSt3_MuISt12_PlaceholderILi2EELb0ELb1EEclISt5tupleIJOhOPhOmEEEEONSt9enable_ifIXltLj1EsrSt10tuple_sizeIT_E5valueESt13tuple_elementILj1ESC_EE4type4typeERVKS1_RSC_>:
	operator()(const volatile _Arg&, _Tuple& __tuple) const volatile
 80187f0:	b580      	push	{r7, lr}
 80187f2:	b084      	sub	sp, #16
 80187f4:	af00      	add	r7, sp, #0
 80187f6:	60f8      	str	r0, [r7, #12]
 80187f8:	60b9      	str	r1, [r7, #8]
 80187fa:	607a      	str	r2, [r7, #4]
	    ::std::get<(is_placeholder<_Arg>::value - 1)>(std::move(__tuple));
 80187fc:	6878      	ldr	r0, [r7, #4]
 80187fe:	f7ff ffce 	bl	801879e <_ZSt4moveIRSt5tupleIJOhOPhOmEEEONSt16remove_referenceIT_E4typeEOS8_>
 8018802:	4603      	mov	r3, r0
 8018804:	4618      	mov	r0, r3
 8018806:	f000 f8e7 	bl	80189d8 <_ZSt3getILj1EJOhOPhOmEEONSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOS8_>
 801880a:	4603      	mov	r3, r0
	}
 801880c:	4618      	mov	r0, r3
 801880e:	3710      	adds	r7, #16
 8018810:	46bd      	mov	sp, r7
 8018812:	bd80      	pop	{r7, pc}

08018814 <_ZSt3getILj3EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8018814:	b580      	push	{r7, lr}
 8018816:	b082      	sub	sp, #8
 8018818:	af00      	add	r7, sp, #0
 801881a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 801881c:	6878      	ldr	r0, [r7, #4]
 801881e:	f000 f8eb 	bl	80189f8 <_ZSt12__get_helperILj3ESt12_PlaceholderILi3EEJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>
 8018822:	4603      	mov	r3, r0
 8018824:	4618      	mov	r0, r3
 8018826:	3708      	adds	r7, #8
 8018828:	46bd      	mov	sp, r7
 801882a:	bd80      	pop	{r7, pc}

0801882c <_ZNVKSt3_MuISt12_PlaceholderILi3EELb0ELb1EEclISt5tupleIJOhOPhOmEEEEONSt9enable_ifIXltLj2EsrSt10tuple_sizeIT_E5valueESt13tuple_elementILj2ESC_EE4type4typeERVKS1_RSC_>:
	operator()(const volatile _Arg&, _Tuple& __tuple) const volatile
 801882c:	b580      	push	{r7, lr}
 801882e:	b084      	sub	sp, #16
 8018830:	af00      	add	r7, sp, #0
 8018832:	60f8      	str	r0, [r7, #12]
 8018834:	60b9      	str	r1, [r7, #8]
 8018836:	607a      	str	r2, [r7, #4]
	    ::std::get<(is_placeholder<_Arg>::value - 1)>(std::move(__tuple));
 8018838:	6878      	ldr	r0, [r7, #4]
 801883a:	f7ff ffb0 	bl	801879e <_ZSt4moveIRSt5tupleIJOhOPhOmEEEONSt16remove_referenceIT_E4typeEOS8_>
 801883e:	4603      	mov	r3, r0
 8018840:	4618      	mov	r0, r3
 8018842:	f000 f8fe 	bl	8018a42 <_ZSt3getILj2EJOhOPhOmEEONSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOS8_>
 8018846:	4603      	mov	r3, r0
	}
 8018848:	4618      	mov	r0, r3
 801884a:	3710      	adds	r7, #16
 801884c:	46bd      	mov	sp, r7
 801884e:	bd80      	pop	{r7, pc}

08018850 <_ZSt7forwardIRM5IOBusFvhPhmEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8018850:	b480      	push	{r7}
 8018852:	b083      	sub	sp, #12
 8018854:	af00      	add	r7, sp, #0
 8018856:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8018858:	687b      	ldr	r3, [r7, #4]
 801885a:	4618      	mov	r0, r3
 801885c:	370c      	adds	r7, #12
 801885e:	46bd      	mov	sp, r7
 8018860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018864:	4770      	bx	lr

08018866 <_ZSt7forwardIRP5IOBusEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8018866:	b480      	push	{r7}
 8018868:	b083      	sub	sp, #12
 801886a:	af00      	add	r7, sp, #0
 801886c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801886e:	687b      	ldr	r3, [r7, #4]
 8018870:	4618      	mov	r0, r3
 8018872:	370c      	adds	r7, #12
 8018874:	46bd      	mov	sp, r7
 8018876:	f85d 7b04 	ldr.w	r7, [sp], #4
 801887a:	4770      	bx	lr

0801887c <_ZSt8__invokeIRM5IOBusFvhPhmEJRPS0_hS1_mEENSt15__invoke_resultIT_JDpT0_EE4typeEOS8_DpOS9_>:
    { return (*std::forward<_Tp>(__t)).*__f; }

  /// Invoke a callable object.
  template<typename _Callable, typename... _Args>
    constexpr typename __invoke_result<_Callable, _Args...>::type
    __invoke(_Callable&& __fn, _Args&&... __args)
 801887c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018880:	b089      	sub	sp, #36	; 0x24
 8018882:	af02      	add	r7, sp, #8
 8018884:	60f8      	str	r0, [r7, #12]
 8018886:	60b9      	str	r1, [r7, #8]
 8018888:	607a      	str	r2, [r7, #4]
 801888a:	603b      	str	r3, [r7, #0]
    noexcept(__is_nothrow_invocable<_Callable, _Args...>::value)
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 801888c:	68f8      	ldr	r0, [r7, #12]
 801888e:	f7ff ffdf 	bl	8018850 <_ZSt7forwardIRM5IOBusFvhPhmEEOT_RNSt16remove_referenceIS5_E4typeE>
 8018892:	4605      	mov	r5, r0
 8018894:	68b8      	ldr	r0, [r7, #8]
 8018896:	f7ff ffe6 	bl	8018866 <_ZSt7forwardIRP5IOBusEOT_RNSt16remove_referenceIS3_E4typeE>
 801889a:	4606      	mov	r6, r0
 801889c:	6878      	ldr	r0, [r7, #4]
 801889e:	f7ff fc52 	bl	8018146 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 80188a2:	4680      	mov	r8, r0
 80188a4:	6838      	ldr	r0, [r7, #0]
 80188a6:	f7ff fc59 	bl	801815c <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 80188aa:	4604      	mov	r4, r0
 80188ac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80188ae:	f7ff fc60 	bl	8018172 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 80188b2:	4603      	mov	r3, r0
 80188b4:	9301      	str	r3, [sp, #4]
 80188b6:	9400      	str	r4, [sp, #0]
 80188b8:	4643      	mov	r3, r8
 80188ba:	4632      	mov	r2, r6
 80188bc:	4629      	mov	r1, r5
 80188be:	4648      	mov	r0, r9
 80188c0:	f000 f8cf 	bl	8018a62 <_ZSt13__invoke_implIvRM5IOBusFvhPhmERPS0_JhS1_mEET_St21__invoke_memfun_derefOT0_OT1_DpOT2_>
					std::forward<_Args>(__args)...);
 80188c4:	bf00      	nop
    }
 80188c6:	371c      	adds	r7, #28
 80188c8:	46bd      	mov	sp, r7
 80188ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080188ce <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEEC1ERKS1_RKS2_>:
      constexpr _Tuple_impl(const _Head& __head, const _Tail&... __tail)
 80188ce:	b580      	push	{r7, lr}
 80188d0:	b084      	sub	sp, #16
 80188d2:	af00      	add	r7, sp, #0
 80188d4:	60f8      	str	r0, [r7, #12]
 80188d6:	60b9      	str	r1, [r7, #8]
 80188d8:	607a      	str	r2, [r7, #4]
      : _Inherited(__tail...), _Base(__head) { }
 80188da:	6879      	ldr	r1, [r7, #4]
 80188dc:	68f8      	ldr	r0, [r7, #12]
 80188de:	f000 f8fa 	bl	8018ad6 <_ZNSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEEC1ERKS1_>
 80188e2:	68b9      	ldr	r1, [r7, #8]
 80188e4:	68f8      	ldr	r0, [r7, #12]
 80188e6:	f000 f904 	bl	8018af2 <_ZNSt10_Head_baseILj2ESt12_PlaceholderILi2EELb1EEC1ERKS1_>
 80188ea:	68fb      	ldr	r3, [r7, #12]
 80188ec:	4618      	mov	r0, r3
 80188ee:	3710      	adds	r7, #16
 80188f0:	46bd      	mov	sp, r7
 80188f2:	bd80      	pop	{r7, pc}

080188f4 <_ZNSt10_Head_baseILj1ESt12_PlaceholderILi1EELb1EEC1ERKS1_>:
      constexpr _Head_base(const _Head& __h)
 80188f4:	b480      	push	{r7}
 80188f6:	b083      	sub	sp, #12
 80188f8:	af00      	add	r7, sp, #0
 80188fa:	6078      	str	r0, [r7, #4]
 80188fc:	6039      	str	r1, [r7, #0]
      : _Head(__h) { }
 80188fe:	687b      	ldr	r3, [r7, #4]
 8018900:	4618      	mov	r0, r3
 8018902:	370c      	adds	r7, #12
 8018904:	46bd      	mov	sp, r7
 8018906:	f85d 7b04 	ldr.w	r7, [sp], #4
 801890a:	4770      	bx	lr

0801890c <_ZSt12__get_helperILj0EP5IOBusJSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 801890c:	b580      	push	{r7, lr}
 801890e:	b082      	sub	sp, #8
 8018910:	af00      	add	r7, sp, #0
 8018912:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8018914:	6878      	ldr	r0, [r7, #4]
 8018916:	f7ff fbb3 	bl	8018080 <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEE7_M_headERS6_>
 801891a:	4603      	mov	r3, r0
 801891c:	4618      	mov	r0, r3
 801891e:	3708      	adds	r7, #8
 8018920:	46bd      	mov	sp, r7
 8018922:	bd80      	pop	{r7, pc}

08018924 <_ZSt12__get_helperILj1ESt12_PlaceholderILi1EEJS0_ILi2EES0_ILi3EEEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8018924:	b580      	push	{r7, lr}
 8018926:	b082      	sub	sp, #8
 8018928:	af00      	add	r7, sp, #0
 801892a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 801892c:	6878      	ldr	r0, [r7, #4]
 801892e:	f7ff fa86 	bl	8017e3e <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEE7_M_headERS4_>
 8018932:	4603      	mov	r3, r0
 8018934:	4618      	mov	r0, r3
 8018936:	3708      	adds	r7, #8
 8018938:	46bd      	mov	sp, r7
 801893a:	bd80      	pop	{r7, pc}

0801893c <_ZSt3getILj0EJOhOPhOmEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 801893c:	b580      	push	{r7, lr}
 801893e:	b082      	sub	sp, #8
 8018940:	af00      	add	r7, sp, #0
 8018942:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8018944:	687b      	ldr	r3, [r7, #4]
 8018946:	4618      	mov	r0, r3
 8018948:	f000 f805 	bl	8018956 <_ZSt12__get_helperILj0EOhJOPhOmEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 801894c:	4603      	mov	r3, r0
 801894e:	4618      	mov	r0, r3
 8018950:	3708      	adds	r7, #8
 8018952:	46bd      	mov	sp, r7
 8018954:	bd80      	pop	{r7, pc}

08018956 <_ZSt12__get_helperILj0EOhJOPhOmEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8018956:	b580      	push	{r7, lr}
 8018958:	b082      	sub	sp, #8
 801895a:	af00      	add	r7, sp, #0
 801895c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 801895e:	6878      	ldr	r0, [r7, #4]
 8018960:	f7ff fe74 	bl	801864c <_ZNSt11_Tuple_implILj0EJOhOPhOmEE7_M_headERS4_>
 8018964:	4603      	mov	r3, r0
 8018966:	4618      	mov	r0, r3
 8018968:	3708      	adds	r7, #8
 801896a:	46bd      	mov	sp, r7
 801896c:	bd80      	pop	{r7, pc}

0801896e <_ZSt3getILj0EJOhOPhOmEEONSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOS8_>:
    get(tuple<_Elements...>&& __t) noexcept
 801896e:	b580      	push	{r7, lr}
 8018970:	b082      	sub	sp, #8
 8018972:	af00      	add	r7, sp, #0
 8018974:	6078      	str	r0, [r7, #4]
      return std::forward<__element_type&&>(std::get<__i>(__t));
 8018976:	6878      	ldr	r0, [r7, #4]
 8018978:	f7ff ffe0 	bl	801893c <_ZSt3getILj0EJOhOPhOmEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 801897c:	4603      	mov	r3, r0
 801897e:	4618      	mov	r0, r3
 8018980:	f7ff fe7e 	bl	8018680 <_ZSt7forwardIOhEOT_RNSt16remove_referenceIS1_E4typeE>
 8018984:	4603      	mov	r3, r0
    }
 8018986:	4618      	mov	r0, r3
 8018988:	3708      	adds	r7, #8
 801898a:	46bd      	mov	sp, r7
 801898c:	bd80      	pop	{r7, pc}

0801898e <_ZSt12__get_helperILj2ESt12_PlaceholderILi2EEJS0_ILi3EEEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 801898e:	b580      	push	{r7, lr}
 8018990:	b082      	sub	sp, #8
 8018992:	af00      	add	r7, sp, #0
 8018994:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8018996:	6878      	ldr	r0, [r7, #4]
 8018998:	f7ff f9f7 	bl	8017d8a <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEE7_M_headERS3_>
 801899c:	4603      	mov	r3, r0
 801899e:	4618      	mov	r0, r3
 80189a0:	3708      	adds	r7, #8
 80189a2:	46bd      	mov	sp, r7
 80189a4:	bd80      	pop	{r7, pc}

080189a6 <_ZSt3getILj1EJOhOPhOmEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 80189a6:	b580      	push	{r7, lr}
 80189a8:	b082      	sub	sp, #8
 80189aa:	af00      	add	r7, sp, #0
 80189ac:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80189ae:	687b      	ldr	r3, [r7, #4]
 80189b0:	4618      	mov	r0, r3
 80189b2:	f000 f805 	bl	80189c0 <_ZSt12__get_helperILj1EOPhJOmEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 80189b6:	4603      	mov	r3, r0
 80189b8:	4618      	mov	r0, r3
 80189ba:	3708      	adds	r7, #8
 80189bc:	46bd      	mov	sp, r7
 80189be:	bd80      	pop	{r7, pc}

080189c0 <_ZSt12__get_helperILj1EOPhJOmEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80189c0:	b580      	push	{r7, lr}
 80189c2:	b082      	sub	sp, #8
 80189c4:	af00      	add	r7, sp, #0
 80189c6:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80189c8:	6878      	ldr	r0, [r7, #4]
 80189ca:	f7ff fd61 	bl	8018490 <_ZNSt11_Tuple_implILj1EJOPhOmEE7_M_headERS3_>
 80189ce:	4603      	mov	r3, r0
 80189d0:	4618      	mov	r0, r3
 80189d2:	3708      	adds	r7, #8
 80189d4:	46bd      	mov	sp, r7
 80189d6:	bd80      	pop	{r7, pc}

080189d8 <_ZSt3getILj1EJOhOPhOmEEONSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOS8_>:
    get(tuple<_Elements...>&& __t) noexcept
 80189d8:	b580      	push	{r7, lr}
 80189da:	b082      	sub	sp, #8
 80189dc:	af00      	add	r7, sp, #0
 80189de:	6078      	str	r0, [r7, #4]
      return std::forward<__element_type&&>(std::get<__i>(__t));
 80189e0:	6878      	ldr	r0, [r7, #4]
 80189e2:	f7ff ffe0 	bl	80189a6 <_ZSt3getILj1EJOhOPhOmEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 80189e6:	4603      	mov	r3, r0
 80189e8:	4618      	mov	r0, r3
 80189ea:	f7ff fd6b 	bl	80184c4 <_ZSt7forwardIOPhEOT_RNSt16remove_referenceIS2_E4typeE>
 80189ee:	4603      	mov	r3, r0
    }
 80189f0:	4618      	mov	r0, r3
 80189f2:	3708      	adds	r7, #8
 80189f4:	46bd      	mov	sp, r7
 80189f6:	bd80      	pop	{r7, pc}

080189f8 <_ZSt12__get_helperILj3ESt12_PlaceholderILi3EEJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80189f8:	b580      	push	{r7, lr}
 80189fa:	b082      	sub	sp, #8
 80189fc:	af00      	add	r7, sp, #0
 80189fe:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8018a00:	6878      	ldr	r0, [r7, #4]
 8018a02:	f7ff f97f 	bl	8017d04 <_ZNSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEE7_M_headERS2_>
 8018a06:	4603      	mov	r3, r0
 8018a08:	4618      	mov	r0, r3
 8018a0a:	3708      	adds	r7, #8
 8018a0c:	46bd      	mov	sp, r7
 8018a0e:	bd80      	pop	{r7, pc}

08018a10 <_ZSt3getILj2EJOhOPhOmEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8018a10:	b580      	push	{r7, lr}
 8018a12:	b082      	sub	sp, #8
 8018a14:	af00      	add	r7, sp, #0
 8018a16:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8018a18:	687b      	ldr	r3, [r7, #4]
 8018a1a:	4618      	mov	r0, r3
 8018a1c:	f000 f805 	bl	8018a2a <_ZSt12__get_helperILj2EOmJEERT0_RSt11_Tuple_implIXT_EJS1_DpT1_EE>
 8018a20:	4603      	mov	r3, r0
 8018a22:	4618      	mov	r0, r3
 8018a24:	3708      	adds	r7, #8
 8018a26:	46bd      	mov	sp, r7
 8018a28:	bd80      	pop	{r7, pc}

08018a2a <_ZSt12__get_helperILj2EOmJEERT0_RSt11_Tuple_implIXT_EJS1_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8018a2a:	b580      	push	{r7, lr}
 8018a2c:	b082      	sub	sp, #8
 8018a2e:	af00      	add	r7, sp, #0
 8018a30:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8018a32:	6878      	ldr	r0, [r7, #4]
 8018a34:	f7ff fd08 	bl	8018448 <_ZNSt11_Tuple_implILj2EJOmEE7_M_headERS1_>
 8018a38:	4603      	mov	r3, r0
 8018a3a:	4618      	mov	r0, r3
 8018a3c:	3708      	adds	r7, #8
 8018a3e:	46bd      	mov	sp, r7
 8018a40:	bd80      	pop	{r7, pc}

08018a42 <_ZSt3getILj2EJOhOPhOmEEONSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOS8_>:
    get(tuple<_Elements...>&& __t) noexcept
 8018a42:	b580      	push	{r7, lr}
 8018a44:	b082      	sub	sp, #8
 8018a46:	af00      	add	r7, sp, #0
 8018a48:	6078      	str	r0, [r7, #4]
      return std::forward<__element_type&&>(std::get<__i>(__t));
 8018a4a:	6878      	ldr	r0, [r7, #4]
 8018a4c:	f7ff ffe0 	bl	8018a10 <_ZSt3getILj2EJOhOPhOmEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8018a50:	4603      	mov	r3, r0
 8018a52:	4618      	mov	r0, r3
 8018a54:	f7ff fd11 	bl	801847a <_ZSt7forwardIOmEOT_RNSt16remove_referenceIS1_E4typeE>
 8018a58:	4603      	mov	r3, r0
    }
 8018a5a:	4618      	mov	r0, r3
 8018a5c:	3708      	adds	r7, #8
 8018a5e:	46bd      	mov	sp, r7
 8018a60:	bd80      	pop	{r7, pc}

08018a62 <_ZSt13__invoke_implIvRM5IOBusFvhPhmERPS0_JhS1_mEET_St21__invoke_memfun_derefOT0_OT1_DpOT2_>:
    __invoke_impl(__invoke_memfun_deref, _MemFun&& __f, _Tp&& __t,
 8018a62:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018a64:	b087      	sub	sp, #28
 8018a66:	af00      	add	r7, sp, #0
 8018a68:	7538      	strb	r0, [r7, #20]
 8018a6a:	6139      	str	r1, [r7, #16]
 8018a6c:	60fa      	str	r2, [r7, #12]
 8018a6e:	60bb      	str	r3, [r7, #8]
      return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
 8018a70:	68f8      	ldr	r0, [r7, #12]
 8018a72:	f7ff fef8 	bl	8018866 <_ZSt7forwardIRP5IOBusEOT_RNSt16remove_referenceIS3_E4typeE>
 8018a76:	4603      	mov	r3, r0
 8018a78:	681b      	ldr	r3, [r3, #0]
 8018a7a:	693a      	ldr	r2, [r7, #16]
 8018a7c:	6852      	ldr	r2, [r2, #4]
 8018a7e:	1052      	asrs	r2, r2, #1
 8018a80:	189d      	adds	r5, r3, r2
 8018a82:	693a      	ldr	r2, [r7, #16]
 8018a84:	6852      	ldr	r2, [r2, #4]
 8018a86:	f002 0201 	and.w	r2, r2, #1
 8018a8a:	2a00      	cmp	r2, #0
 8018a8c:	d102      	bne.n	8018a94 <_ZSt13__invoke_implIvRM5IOBusFvhPhmERPS0_JhS1_mEET_St21__invoke_memfun_derefOT0_OT1_DpOT2_+0x32>
 8018a8e:	693b      	ldr	r3, [r7, #16]
 8018a90:	681c      	ldr	r4, [r3, #0]
 8018a92:	e008      	b.n	8018aa6 <_ZSt13__invoke_implIvRM5IOBusFvhPhmERPS0_JhS1_mEET_St21__invoke_memfun_derefOT0_OT1_DpOT2_+0x44>
 8018a94:	693a      	ldr	r2, [r7, #16]
 8018a96:	6852      	ldr	r2, [r2, #4]
 8018a98:	1052      	asrs	r2, r2, #1
 8018a9a:	4413      	add	r3, r2
 8018a9c:	681b      	ldr	r3, [r3, #0]
 8018a9e:	693a      	ldr	r2, [r7, #16]
 8018aa0:	6812      	ldr	r2, [r2, #0]
 8018aa2:	4413      	add	r3, r2
 8018aa4:	681c      	ldr	r4, [r3, #0]
 8018aa6:	68b8      	ldr	r0, [r7, #8]
 8018aa8:	f7ff fb4d 	bl	8018146 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 8018aac:	4603      	mov	r3, r0
 8018aae:	781e      	ldrb	r6, [r3, #0]
 8018ab0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018ab2:	f7ff fb53 	bl	801815c <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 8018ab6:	4603      	mov	r3, r0
 8018ab8:	681b      	ldr	r3, [r3, #0]
 8018aba:	607b      	str	r3, [r7, #4]
 8018abc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8018abe:	f7ff fb58 	bl	8018172 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 8018ac2:	4603      	mov	r3, r0
 8018ac4:	681b      	ldr	r3, [r3, #0]
 8018ac6:	687a      	ldr	r2, [r7, #4]
 8018ac8:	4631      	mov	r1, r6
 8018aca:	4628      	mov	r0, r5
 8018acc:	47a0      	blx	r4
 8018ace:	bf00      	nop
    }
 8018ad0:	371c      	adds	r7, #28
 8018ad2:	46bd      	mov	sp, r7
 8018ad4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018ad6 <_ZNSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEEC1ERKS1_>:
      constexpr _Tuple_impl(const _Head& __head)
 8018ad6:	b580      	push	{r7, lr}
 8018ad8:	b082      	sub	sp, #8
 8018ada:	af00      	add	r7, sp, #0
 8018adc:	6078      	str	r0, [r7, #4]
 8018ade:	6039      	str	r1, [r7, #0]
      : _Base(__head) { }
 8018ae0:	6839      	ldr	r1, [r7, #0]
 8018ae2:	6878      	ldr	r0, [r7, #4]
 8018ae4:	f000 f811 	bl	8018b0a <_ZNSt10_Head_baseILj3ESt12_PlaceholderILi3EELb1EEC1ERKS1_>
 8018ae8:	687b      	ldr	r3, [r7, #4]
 8018aea:	4618      	mov	r0, r3
 8018aec:	3708      	adds	r7, #8
 8018aee:	46bd      	mov	sp, r7
 8018af0:	bd80      	pop	{r7, pc}

08018af2 <_ZNSt10_Head_baseILj2ESt12_PlaceholderILi2EELb1EEC1ERKS1_>:
      constexpr _Head_base(const _Head& __h)
 8018af2:	b480      	push	{r7}
 8018af4:	b083      	sub	sp, #12
 8018af6:	af00      	add	r7, sp, #0
 8018af8:	6078      	str	r0, [r7, #4]
 8018afa:	6039      	str	r1, [r7, #0]
      : _Head(__h) { }
 8018afc:	687b      	ldr	r3, [r7, #4]
 8018afe:	4618      	mov	r0, r3
 8018b00:	370c      	adds	r7, #12
 8018b02:	46bd      	mov	sp, r7
 8018b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b08:	4770      	bx	lr

08018b0a <_ZNSt10_Head_baseILj3ESt12_PlaceholderILi3EELb1EEC1ERKS1_>:
      constexpr _Head_base(const _Head& __h)
 8018b0a:	b480      	push	{r7}
 8018b0c:	b083      	sub	sp, #12
 8018b0e:	af00      	add	r7, sp, #0
 8018b10:	6078      	str	r0, [r7, #4]
 8018b12:	6039      	str	r1, [r7, #0]
      : _Head(__h) { }
 8018b14:	687b      	ldr	r3, [r7, #4]
 8018b16:	4618      	mov	r0, r3
 8018b18:	370c      	adds	r7, #12
 8018b1a:	46bd      	mov	sp, r7
 8018b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b20:	4770      	bx	lr
	...

08018b24 <_ZN5IOBusD1Ev>:

#include "MessageBus.h"
#include "IODriver.h"


class IOBus : public MessageBus {
 8018b24:	b580      	push	{r7, lr}
 8018b26:	b082      	sub	sp, #8
 8018b28:	af00      	add	r7, sp, #0
 8018b2a:	6078      	str	r0, [r7, #4]
 8018b2c:	4a05      	ldr	r2, [pc, #20]	; (8018b44 <_ZN5IOBusD1Ev+0x20>)
 8018b2e:	687b      	ldr	r3, [r7, #4]
 8018b30:	601a      	str	r2, [r3, #0]
 8018b32:	687b      	ldr	r3, [r7, #4]
 8018b34:	4618      	mov	r0, r3
 8018b36:	f7fe ff0d 	bl	8017954 <_ZN10MessageBusD1Ev>
 8018b3a:	687b      	ldr	r3, [r7, #4]
 8018b3c:	4618      	mov	r0, r3
 8018b3e:	3708      	adds	r7, #8
 8018b40:	46bd      	mov	sp, r7
 8018b42:	bd80      	pop	{r7, pc}
 8018b44:	080202b8 	.word	0x080202b8

08018b48 <_ZN5IOBusD0Ev>:
 8018b48:	b580      	push	{r7, lr}
 8018b4a:	b082      	sub	sp, #8
 8018b4c:	af00      	add	r7, sp, #0
 8018b4e:	6078      	str	r0, [r7, #4]
 8018b50:	6878      	ldr	r0, [r7, #4]
 8018b52:	f7ff ffe7 	bl	8018b24 <_ZN5IOBusD1Ev>
 8018b56:	f644 0114 	movw	r1, #18452	; 0x4814
 8018b5a:	6878      	ldr	r0, [r7, #4]
 8018b5c:	f001 fa44 	bl	8019fe8 <_ZdlPvj>
 8018b60:	687b      	ldr	r3, [r7, #4]
 8018b62:	4618      	mov	r0, r3
 8018b64:	3708      	adds	r7, #8
 8018b66:	46bd      	mov	sp, r7
 8018b68:	bd80      	pop	{r7, pc}

08018b6a <_ZNKSt14_Function_base8_M_emptyEv>:
    bool _M_empty() const { return !_M_manager; }
 8018b6a:	b480      	push	{r7}
 8018b6c:	b083      	sub	sp, #12
 8018b6e:	af00      	add	r7, sp, #0
 8018b70:	6078      	str	r0, [r7, #4]
 8018b72:	687b      	ldr	r3, [r7, #4]
 8018b74:	689b      	ldr	r3, [r3, #8]
 8018b76:	2b00      	cmp	r3, #0
 8018b78:	bf0c      	ite	eq
 8018b7a:	2301      	moveq	r3, #1
 8018b7c:	2300      	movne	r3, #0
 8018b7e:	b2db      	uxtb	r3, r3
 8018b80:	4618      	mov	r0, r3
 8018b82:	370c      	adds	r7, #12
 8018b84:	46bd      	mov	sp, r7
 8018b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b8a:	4770      	bx	lr

08018b8c <_ZN8IODriverC1Ev>:
class IODriver {
 8018b8c:	b480      	push	{r7}
 8018b8e:	b083      	sub	sp, #12
 8018b90:	af00      	add	r7, sp, #0
 8018b92:	6078      	str	r0, [r7, #4]
 8018b94:	4a04      	ldr	r2, [pc, #16]	; (8018ba8 <_ZN8IODriverC1Ev+0x1c>)
 8018b96:	687b      	ldr	r3, [r7, #4]
 8018b98:	601a      	str	r2, [r3, #0]
 8018b9a:	687b      	ldr	r3, [r7, #4]
 8018b9c:	4618      	mov	r0, r3
 8018b9e:	370c      	adds	r7, #12
 8018ba0:	46bd      	mov	sp, r7
 8018ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ba6:	4770      	bx	lr
 8018ba8:	0802026c 	.word	0x0802026c

08018bac <_ZN12LWIPClientIOC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt>:

/*
 * Creates an ExternalIO interface using the given port number.
 * This constructor invocation is a light operation.
 */
LWIPClientIO::LWIPClientIO(std::string address_str, uint16_t port) : address_str(address_str) {
 8018bac:	b580      	push	{r7, lr}
 8018bae:	b084      	sub	sp, #16
 8018bb0:	af00      	add	r7, sp, #0
 8018bb2:	60f8      	str	r0, [r7, #12]
 8018bb4:	60b9      	str	r1, [r7, #8]
 8018bb6:	4613      	mov	r3, r2
 8018bb8:	80fb      	strh	r3, [r7, #6]
 8018bba:	68fb      	ldr	r3, [r7, #12]
 8018bbc:	4618      	mov	r0, r3
 8018bbe:	f7ff ffe5 	bl	8018b8c <_ZN8IODriverC1Ev>
 8018bc2:	4a19      	ldr	r2, [pc, #100]	; (8018c28 <_ZN12LWIPClientIOC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt+0x7c>)
 8018bc4:	68fb      	ldr	r3, [r7, #12]
 8018bc6:	601a      	str	r2, [r3, #0]
 8018bc8:	68fb      	ldr	r3, [r7, #12]
 8018bca:	3304      	adds	r3, #4
 8018bcc:	68b9      	ldr	r1, [r7, #8]
 8018bce:	4618      	mov	r0, r3
 8018bd0:	f001 fd80 	bl	801a6d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8018bd4:	68fb      	ldr	r3, [r7, #12]
 8018bd6:	3334      	adds	r3, #52	; 0x34
 8018bd8:	4618      	mov	r0, r3
 8018bda:	f000 f8ce 	bl	8018d7a <_ZNSt8functionIFvhPhmEEC1Ev>
	this->address = { 0 };
 8018bde:	68fb      	ldr	r3, [r7, #12]
 8018be0:	331c      	adds	r3, #28
 8018be2:	2200      	movs	r2, #0
 8018be4:	601a      	str	r2, [r3, #0]
 8018be6:	605a      	str	r2, [r3, #4]
 8018be8:	609a      	str	r2, [r3, #8]
 8018bea:	60da      	str	r2, [r3, #12]
	this->socket_id = 0;
 8018bec:	68fb      	ldr	r3, [r7, #12]
 8018bee:	2200      	movs	r2, #0
 8018bf0:	62da      	str	r2, [r3, #44]	; 0x2c
	this->connected = false;
 8018bf2:	68fb      	ldr	r3, [r7, #12]
 8018bf4:	2200      	movs	r2, #0
 8018bf6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	this->receiver = nullptr;
 8018bfa:	68fb      	ldr	r3, [r7, #12]
 8018bfc:	3334      	adds	r3, #52	; 0x34
 8018bfe:	2100      	movs	r1, #0
 8018c00:	4618      	mov	r0, r3
 8018c02:	f000 f8c7 	bl	8018d94 <_ZNSt8functionIFvhPhmEEaSEDn>

	address.sin_family = AF_INET;
 8018c06:	68fb      	ldr	r3, [r7, #12]
 8018c08:	2202      	movs	r2, #2
 8018c0a:	775a      	strb	r2, [r3, #29]
	address.sin_port = htons(port);
 8018c0c:	88fb      	ldrh	r3, [r7, #6]
 8018c0e:	4618      	mov	r0, r3
 8018c10:	f7f4 fc22 	bl	800d458 <lwip_htons>
 8018c14:	4603      	mov	r3, r0
 8018c16:	461a      	mov	r2, r3
 8018c18:	68fb      	ldr	r3, [r7, #12]
 8018c1a:	83da      	strh	r2, [r3, #30]
}
 8018c1c:	68fb      	ldr	r3, [r7, #12]
 8018c1e:	4618      	mov	r0, r3
 8018c20:	3710      	adds	r7, #16
 8018c22:	46bd      	mov	sp, r7
 8018c24:	bd80      	pop	{r7, pc}
 8018c26:	bf00      	nop
 8018c28:	080203d0 	.word	0x080203d0

08018c2c <_ZN12LWIPClientIOD1Ev>:

/*
 * Releases IO resources
 */
LWIPClientIO::~LWIPClientIO() {
 8018c2c:	b580      	push	{r7, lr}
 8018c2e:	b082      	sub	sp, #8
 8018c30:	af00      	add	r7, sp, #0
 8018c32:	6078      	str	r0, [r7, #4]
 8018c34:	4a0c      	ldr	r2, [pc, #48]	; (8018c68 <_ZN12LWIPClientIOD1Ev+0x3c>)
 8018c36:	687b      	ldr	r3, [r7, #4]
 8018c38:	601a      	str	r2, [r3, #0]
	disconnectClient();
 8018c3a:	6878      	ldr	r0, [r7, #4]
 8018c3c:	f000 f84a 	bl	8018cd4 <_ZN12LWIPClientIO16disconnectClientEv>
LWIPClientIO::~LWIPClientIO() {
 8018c40:	687b      	ldr	r3, [r7, #4]
 8018c42:	3334      	adds	r3, #52	; 0x34
 8018c44:	4618      	mov	r0, r3
 8018c46:	f7fe feed 	bl	8017a24 <_ZNSt8functionIFvhPhmEED1Ev>
 8018c4a:	687b      	ldr	r3, [r7, #4]
 8018c4c:	3304      	adds	r3, #4
 8018c4e:	4618      	mov	r0, r3
 8018c50:	f001 fd15 	bl	801a67e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8018c54:	687b      	ldr	r3, [r7, #4]
 8018c56:	4618      	mov	r0, r3
 8018c58:	f7fe fe22 	bl	80178a0 <_ZN8IODriverD1Ev>
}
 8018c5c:	687b      	ldr	r3, [r7, #4]
 8018c5e:	4618      	mov	r0, r3
 8018c60:	3708      	adds	r7, #8
 8018c62:	46bd      	mov	sp, r7
 8018c64:	bd80      	pop	{r7, pc}
 8018c66:	bf00      	nop
 8018c68:	080203d0 	.word	0x080203d0

08018c6c <_ZN12LWIPClientIOD0Ev>:
LWIPClientIO::~LWIPClientIO() {
 8018c6c:	b580      	push	{r7, lr}
 8018c6e:	b082      	sub	sp, #8
 8018c70:	af00      	add	r7, sp, #0
 8018c72:	6078      	str	r0, [r7, #4]
}
 8018c74:	6878      	ldr	r0, [r7, #4]
 8018c76:	f7ff ffd9 	bl	8018c2c <_ZN12LWIPClientIOD1Ev>
 8018c7a:	2144      	movs	r1, #68	; 0x44
 8018c7c:	6878      	ldr	r0, [r7, #4]
 8018c7e:	f001 f9b3 	bl	8019fe8 <_ZdlPvj>
 8018c82:	687b      	ldr	r3, [r7, #4]
 8018c84:	4618      	mov	r0, r3
 8018c86:	3708      	adds	r7, #8
 8018c88:	46bd      	mov	sp, r7
 8018c8a:	bd80      	pop	{r7, pc}

08018c8c <_ZN12LWIPClientIO13connectClientEv>:
 * Creates a server socket and allow incoming connections
 * through the port specified by the constructor.
 * This operation is heavy and may fail.
 * Check the returned error code and set breakpoints accordingly if needed.
 */
int8_t LWIPClientIO::connectClient() {
 8018c8c:	b580      	push	{r7, lr}
 8018c8e:	b082      	sub	sp, #8
 8018c90:	af00      	add	r7, sp, #0
 8018c92:	6078      	str	r0, [r7, #4]
	if(connected) {
 8018c94:	687b      	ldr	r3, [r7, #4]
 8018c96:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018c9a:	2b00      	cmp	r3, #0
 8018c9c:	d002      	beq.n	8018ca4 <_ZN12LWIPClientIO13connectClientEv+0x18>
		return -1; // Server already connected
 8018c9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018ca2:	e00f      	b.n	8018cc4 <_ZN12LWIPClientIO13connectClientEv+0x38>
	}

	// TODO

	this->connected = true;
 8018ca4:	687b      	ldr	r3, [r7, #4]
 8018ca6:	2201      	movs	r2, #1
 8018ca8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	console.printf("[RoCo] [Client@%s] Client connected\r\n", ntohs(address.sin_port));
 8018cac:	687b      	ldr	r3, [r7, #4]
 8018cae:	8bdb      	ldrh	r3, [r3, #30]
 8018cb0:	4618      	mov	r0, r3
 8018cb2:	f7f4 fbd1 	bl	800d458 <lwip_htons>
 8018cb6:	4603      	mov	r3, r0
 8018cb8:	461a      	mov	r2, r3
 8018cba:	4904      	ldr	r1, [pc, #16]	; (8018ccc <_ZN12LWIPClientIO13connectClientEv+0x40>)
 8018cbc:	4804      	ldr	r0, [pc, #16]	; (8018cd0 <_ZN12LWIPClientIO13connectClientEv+0x44>)
 8018cbe:	f7fe fd90 	bl	80177e2 <_ZN7Console6printfEPKcz>

	return true;
 8018cc2:	2301      	movs	r3, #1
}
 8018cc4:	4618      	mov	r0, r3
 8018cc6:	3708      	adds	r7, #8
 8018cc8:	46bd      	mov	sp, r7
 8018cca:	bd80      	pop	{r7, pc}
 8018ccc:	0801ffd0 	.word	0x0801ffd0
 8018cd0:	24004964 	.word	0x24004964

08018cd4 <_ZN12LWIPClientIO16disconnectClientEv>:
/*
 * Disconnects the ExternalIO instance.
 * In particular, this function resets the ExternalIO to an initial state and closes all used IO resources.
 * Make sure the disconnect member function is only called in the reception thread.
 */
void LWIPClientIO::disconnectClient() {
 8018cd4:	b580      	push	{r7, lr}
 8018cd6:	b082      	sub	sp, #8
 8018cd8:	af00      	add	r7, sp, #0
 8018cda:	6078      	str	r0, [r7, #4]
	if(connected) {
 8018cdc:	687b      	ldr	r3, [r7, #4]
 8018cde:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018ce2:	2b00      	cmp	r3, #0
 8018ce4:	d011      	beq.n	8018d0a <_ZN12LWIPClientIO16disconnectClientEv+0x36>
		this->connected = false;
 8018ce6:	687b      	ldr	r3, [r7, #4]
 8018ce8:	2200      	movs	r2, #0
 8018cea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		closeSocket();
 8018cee:	6878      	ldr	r0, [r7, #4]
 8018cf0:	f000 f814 	bl	8018d1c <_ZN12LWIPClientIO11closeSocketEv>
		console.printf("[RoCo] [Client@%s] Client disconnected\r\n", ntohs(address.sin_port));
 8018cf4:	687b      	ldr	r3, [r7, #4]
 8018cf6:	8bdb      	ldrh	r3, [r3, #30]
 8018cf8:	4618      	mov	r0, r3
 8018cfa:	f7f4 fbad 	bl	800d458 <lwip_htons>
 8018cfe:	4603      	mov	r3, r0
 8018d00:	461a      	mov	r2, r3
 8018d02:	4904      	ldr	r1, [pc, #16]	; (8018d14 <_ZN12LWIPClientIO16disconnectClientEv+0x40>)
 8018d04:	4804      	ldr	r0, [pc, #16]	; (8018d18 <_ZN12LWIPClientIO16disconnectClientEv+0x44>)
 8018d06:	f7fe fd6c 	bl	80177e2 <_ZN7Console6printfEPKcz>
	}
}
 8018d0a:	bf00      	nop
 8018d0c:	3708      	adds	r7, #8
 8018d0e:	46bd      	mov	sp, r7
 8018d10:	bd80      	pop	{r7, pc}
 8018d12:	bf00      	nop
 8018d14:	0801fff8 	.word	0x0801fff8
 8018d18:	24004964 	.word	0x24004964

08018d1c <_ZN12LWIPClientIO11closeSocketEv>:

/*
 * Closes all used IO resources
 */
void LWIPClientIO::closeSocket() {
 8018d1c:	b480      	push	{r7}
 8018d1e:	b083      	sub	sp, #12
 8018d20:	af00      	add	r7, sp, #0
 8018d22:	6078      	str	r0, [r7, #4]
	// TODO
}
 8018d24:	bf00      	nop
 8018d26:	370c      	adds	r7, #12
 8018d28:	46bd      	mov	sp, r7
 8018d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d2e:	4770      	bx	lr

08018d30 <_ZN12LWIPClientIO6updateEv>:
 *
 * Allows incoming connections and adds the corresponding socket to the array of opened sockets.
 * Processes input from the remote connections and passes it to the reception handler.
 * Handles closing connections.
 */
void LWIPClientIO::update() {
 8018d30:	b480      	push	{r7}
 8018d32:	b083      	sub	sp, #12
 8018d34:	af00      	add	r7, sp, #0
 8018d36:	6078      	str	r0, [r7, #4]
	if(connected) {
		// TODO
	}
}
 8018d38:	bf00      	nop
 8018d3a:	370c      	adds	r7, #12
 8018d3c:	46bd      	mov	sp, r7
 8018d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d42:	4770      	bx	lr

08018d44 <_ZN12LWIPClientIO7receiveERKSt8functionIFvhPhmEE>:

/*
 * Sets the receiver callback function
 */
void LWIPClientIO::receive(const std::function<void (uint8_t sender_id, uint8_t* buffer, uint32_t length)> &receiver) {
 8018d44:	b580      	push	{r7, lr}
 8018d46:	b082      	sub	sp, #8
 8018d48:	af00      	add	r7, sp, #0
 8018d4a:	6078      	str	r0, [r7, #4]
 8018d4c:	6039      	str	r1, [r7, #0]
	this->receiver = receiver;
 8018d4e:	687b      	ldr	r3, [r7, #4]
 8018d50:	3334      	adds	r3, #52	; 0x34
 8018d52:	6839      	ldr	r1, [r7, #0]
 8018d54:	4618      	mov	r0, r3
 8018d56:	f000 f837 	bl	8018dc8 <_ZNSt8functionIFvhPhmEEaSERKS2_>
}
 8018d5a:	bf00      	nop
 8018d5c:	3708      	adds	r7, #8
 8018d5e:	46bd      	mov	sp, r7
 8018d60:	bd80      	pop	{r7, pc}

08018d62 <_ZN12LWIPClientIO8transmitEPhm>:

/*
 * Broadcasts data to the array of connected sockets (excluding the server instance)
 * Warning: this function must be thread safe in a multithreaded environment
 */
void LWIPClientIO::transmit(uint8_t* buffer, uint32_t length) {
 8018d62:	b480      	push	{r7}
 8018d64:	b085      	sub	sp, #20
 8018d66:	af00      	add	r7, sp, #0
 8018d68:	60f8      	str	r0, [r7, #12]
 8018d6a:	60b9      	str	r1, [r7, #8]
 8018d6c:	607a      	str	r2, [r7, #4]
	if(connected) {
		// TODO
	}
}
 8018d6e:	bf00      	nop
 8018d70:	3714      	adds	r7, #20
 8018d72:	46bd      	mov	sp, r7
 8018d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d78:	4770      	bx	lr

08018d7a <_ZNSt8functionIFvhPhmEEC1Ev>:
      function() noexcept
 8018d7a:	b580      	push	{r7, lr}
 8018d7c:	b082      	sub	sp, #8
 8018d7e:	af00      	add	r7, sp, #0
 8018d80:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 8018d82:	687b      	ldr	r3, [r7, #4]
 8018d84:	4618      	mov	r0, r3
 8018d86:	f7fe fe1c 	bl	80179c2 <_ZNSt14_Function_baseC1Ev>
 8018d8a:	687b      	ldr	r3, [r7, #4]
 8018d8c:	4618      	mov	r0, r3
 8018d8e:	3708      	adds	r7, #8
 8018d90:	46bd      	mov	sp, r7
 8018d92:	bd80      	pop	{r7, pc}

08018d94 <_ZNSt8functionIFvhPhmEEaSEDn>:
      operator=(nullptr_t) noexcept
 8018d94:	b580      	push	{r7, lr}
 8018d96:	b082      	sub	sp, #8
 8018d98:	af00      	add	r7, sp, #0
 8018d9a:	6078      	str	r0, [r7, #4]
 8018d9c:	6039      	str	r1, [r7, #0]
	if (_M_manager)
 8018d9e:	687b      	ldr	r3, [r7, #4]
 8018da0:	689b      	ldr	r3, [r3, #8]
 8018da2:	2b00      	cmp	r3, #0
 8018da4:	d00b      	beq.n	8018dbe <_ZNSt8functionIFvhPhmEEaSEDn+0x2a>
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
 8018da6:	687b      	ldr	r3, [r7, #4]
 8018da8:	689b      	ldr	r3, [r3, #8]
 8018daa:	6878      	ldr	r0, [r7, #4]
 8018dac:	6879      	ldr	r1, [r7, #4]
 8018dae:	2203      	movs	r2, #3
 8018db0:	4798      	blx	r3
	    _M_manager = nullptr;
 8018db2:	687b      	ldr	r3, [r7, #4]
 8018db4:	2200      	movs	r2, #0
 8018db6:	609a      	str	r2, [r3, #8]
	    _M_invoker = nullptr;
 8018db8:	687b      	ldr	r3, [r7, #4]
 8018dba:	2200      	movs	r2, #0
 8018dbc:	60da      	str	r2, [r3, #12]
	return *this;
 8018dbe:	687b      	ldr	r3, [r7, #4]
      }
 8018dc0:	4618      	mov	r0, r3
 8018dc2:	3708      	adds	r7, #8
 8018dc4:	46bd      	mov	sp, r7
 8018dc6:	bd80      	pop	{r7, pc}

08018dc8 <_ZNSt8functionIFvhPhmEEaSERKS2_>:
      operator=(const function& __x)
 8018dc8:	b580      	push	{r7, lr}
 8018dca:	b086      	sub	sp, #24
 8018dcc:	af00      	add	r7, sp, #0
 8018dce:	6078      	str	r0, [r7, #4]
 8018dd0:	6039      	str	r1, [r7, #0]
	function(__x).swap(*this);
 8018dd2:	f107 0308 	add.w	r3, r7, #8
 8018dd6:	6839      	ldr	r1, [r7, #0]
 8018dd8:	4618      	mov	r0, r3
 8018dda:	f000 f810 	bl	8018dfe <_ZNSt8functionIFvhPhmEEC1ERKS2_>
 8018dde:	f107 0308 	add.w	r3, r7, #8
 8018de2:	6879      	ldr	r1, [r7, #4]
 8018de4:	4618      	mov	r0, r3
 8018de6:	f000 f82c 	bl	8018e42 <_ZNSt8functionIFvhPhmEE4swapERS2_>
 8018dea:	f107 0308 	add.w	r3, r7, #8
 8018dee:	4618      	mov	r0, r3
 8018df0:	f7fe fe18 	bl	8017a24 <_ZNSt8functionIFvhPhmEED1Ev>
	return *this;
 8018df4:	687b      	ldr	r3, [r7, #4]
      }
 8018df6:	4618      	mov	r0, r3
 8018df8:	3718      	adds	r7, #24
 8018dfa:	46bd      	mov	sp, r7
 8018dfc:	bd80      	pop	{r7, pc}

08018dfe <_ZNSt8functionIFvhPhmEEC1ERKS2_>:
    function<_Res(_ArgTypes...)>::
 8018dfe:	b580      	push	{r7, lr}
 8018e00:	b082      	sub	sp, #8
 8018e02:	af00      	add	r7, sp, #0
 8018e04:	6078      	str	r0, [r7, #4]
 8018e06:	6039      	str	r1, [r7, #0]
    : _Function_base()
 8018e08:	687b      	ldr	r3, [r7, #4]
 8018e0a:	4618      	mov	r0, r3
 8018e0c:	f7fe fdd9 	bl	80179c2 <_ZNSt14_Function_baseC1Ev>
      if (static_cast<bool>(__x))
 8018e10:	6838      	ldr	r0, [r7, #0]
 8018e12:	f000 f837 	bl	8018e84 <_ZNKSt8functionIFvhPhmEEcvbEv>
 8018e16:	4603      	mov	r3, r0
 8018e18:	2b00      	cmp	r3, #0
 8018e1a:	d00d      	beq.n	8018e38 <_ZNSt8functionIFvhPhmEEC1ERKS2_+0x3a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8018e1c:	683b      	ldr	r3, [r7, #0]
 8018e1e:	689b      	ldr	r3, [r3, #8]
 8018e20:	6878      	ldr	r0, [r7, #4]
 8018e22:	6839      	ldr	r1, [r7, #0]
 8018e24:	2202      	movs	r2, #2
 8018e26:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8018e28:	683b      	ldr	r3, [r7, #0]
 8018e2a:	68da      	ldr	r2, [r3, #12]
 8018e2c:	687b      	ldr	r3, [r7, #4]
 8018e2e:	60da      	str	r2, [r3, #12]
	  _M_manager = __x._M_manager;
 8018e30:	683b      	ldr	r3, [r7, #0]
 8018e32:	689a      	ldr	r2, [r3, #8]
 8018e34:	687b      	ldr	r3, [r7, #4]
 8018e36:	609a      	str	r2, [r3, #8]
    }
 8018e38:	687b      	ldr	r3, [r7, #4]
 8018e3a:	4618      	mov	r0, r3
 8018e3c:	3708      	adds	r7, #8
 8018e3e:	46bd      	mov	sp, r7
 8018e40:	bd80      	pop	{r7, pc}

08018e42 <_ZNSt8functionIFvhPhmEE4swapERS2_>:
      void swap(function& __x) noexcept
 8018e42:	b580      	push	{r7, lr}
 8018e44:	b082      	sub	sp, #8
 8018e46:	af00      	add	r7, sp, #0
 8018e48:	6078      	str	r0, [r7, #4]
 8018e4a:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 8018e4c:	687b      	ldr	r3, [r7, #4]
 8018e4e:	683a      	ldr	r2, [r7, #0]
 8018e50:	4611      	mov	r1, r2
 8018e52:	4618      	mov	r0, r3
 8018e54:	f000 f831 	bl	8018eba <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 8018e58:	687b      	ldr	r3, [r7, #4]
 8018e5a:	f103 0208 	add.w	r2, r3, #8
 8018e5e:	683b      	ldr	r3, [r7, #0]
 8018e60:	3308      	adds	r3, #8
 8018e62:	4619      	mov	r1, r3
 8018e64:	4610      	mov	r0, r2
 8018e66:	f000 f85a 	bl	8018f1e <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 8018e6a:	687b      	ldr	r3, [r7, #4]
 8018e6c:	f103 020c 	add.w	r2, r3, #12
 8018e70:	683b      	ldr	r3, [r7, #0]
 8018e72:	330c      	adds	r3, #12
 8018e74:	4619      	mov	r1, r3
 8018e76:	4610      	mov	r0, r2
 8018e78:	f000 f87b 	bl	8018f72 <_ZSt4swapIPFvRKSt9_Any_dataOhOPhOmEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISD_ESt18is_move_assignableISD_EEE5valueEvE4typeERSD_SN_>
      }
 8018e7c:	bf00      	nop
 8018e7e:	3708      	adds	r7, #8
 8018e80:	46bd      	mov	sp, r7
 8018e82:	bd80      	pop	{r7, pc}

08018e84 <_ZNKSt8functionIFvhPhmEEcvbEv>:
      explicit operator bool() const noexcept
 8018e84:	b580      	push	{r7, lr}
 8018e86:	b082      	sub	sp, #8
 8018e88:	af00      	add	r7, sp, #0
 8018e8a:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 8018e8c:	687b      	ldr	r3, [r7, #4]
 8018e8e:	4618      	mov	r0, r3
 8018e90:	f7ff fe6b 	bl	8018b6a <_ZNKSt14_Function_base8_M_emptyEv>
 8018e94:	4603      	mov	r3, r0
 8018e96:	f083 0301 	eor.w	r3, r3, #1
 8018e9a:	b2db      	uxtb	r3, r3
 8018e9c:	4618      	mov	r0, r3
 8018e9e:	3708      	adds	r7, #8
 8018ea0:	46bd      	mov	sp, r7
 8018ea2:	bd80      	pop	{r7, pc}

08018ea4 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8018ea4:	b480      	push	{r7}
 8018ea6:	b083      	sub	sp, #12
 8018ea8:	af00      	add	r7, sp, #0
 8018eaa:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8018eac:	687b      	ldr	r3, [r7, #4]
 8018eae:	4618      	mov	r0, r3
 8018eb0:	370c      	adds	r7, #12
 8018eb2:	46bd      	mov	sp, r7
 8018eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018eb8:	4770      	bx	lr

08018eba <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
 8018eba:	b580      	push	{r7, lr}
 8018ebc:	b084      	sub	sp, #16
 8018ebe:	af00      	add	r7, sp, #0
 8018ec0:	6078      	str	r0, [r7, #4]
 8018ec2:	6039      	str	r1, [r7, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8018ec4:	6878      	ldr	r0, [r7, #4]
 8018ec6:	f7ff ffed 	bl	8018ea4 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8018eca:	4602      	mov	r2, r0
 8018ecc:	f107 0308 	add.w	r3, r7, #8
 8018ed0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018ed4:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8018ed8:	6838      	ldr	r0, [r7, #0]
 8018eda:	f7ff ffe3 	bl	8018ea4 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8018ede:	4602      	mov	r2, r0
 8018ee0:	687b      	ldr	r3, [r7, #4]
 8018ee2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018ee6:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8018eea:	f107 0308 	add.w	r3, r7, #8
 8018eee:	4618      	mov	r0, r3
 8018ef0:	f7ff ffd8 	bl	8018ea4 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8018ef4:	4602      	mov	r2, r0
 8018ef6:	683b      	ldr	r3, [r7, #0]
 8018ef8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018efc:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8018f00:	bf00      	nop
 8018f02:	3710      	adds	r7, #16
 8018f04:	46bd      	mov	sp, r7
 8018f06:	bd80      	pop	{r7, pc}

08018f08 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 8018f08:	b480      	push	{r7}
 8018f0a:	b083      	sub	sp, #12
 8018f0c:	af00      	add	r7, sp, #0
 8018f0e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8018f10:	687b      	ldr	r3, [r7, #4]
 8018f12:	4618      	mov	r0, r3
 8018f14:	370c      	adds	r7, #12
 8018f16:	46bd      	mov	sp, r7
 8018f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f1c:	4770      	bx	lr

08018f1e <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 8018f1e:	b580      	push	{r7, lr}
 8018f20:	b084      	sub	sp, #16
 8018f22:	af00      	add	r7, sp, #0
 8018f24:	6078      	str	r0, [r7, #4]
 8018f26:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8018f28:	6878      	ldr	r0, [r7, #4]
 8018f2a:	f7ff ffed 	bl	8018f08 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8018f2e:	4603      	mov	r3, r0
 8018f30:	681b      	ldr	r3, [r3, #0]
 8018f32:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8018f34:	6838      	ldr	r0, [r7, #0]
 8018f36:	f7ff ffe7 	bl	8018f08 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8018f3a:	4603      	mov	r3, r0
 8018f3c:	681a      	ldr	r2, [r3, #0]
 8018f3e:	687b      	ldr	r3, [r7, #4]
 8018f40:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8018f42:	f107 030c 	add.w	r3, r7, #12
 8018f46:	4618      	mov	r0, r3
 8018f48:	f7ff ffde 	bl	8018f08 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8018f4c:	4603      	mov	r3, r0
 8018f4e:	681a      	ldr	r2, [r3, #0]
 8018f50:	683b      	ldr	r3, [r7, #0]
 8018f52:	601a      	str	r2, [r3, #0]
    }
 8018f54:	bf00      	nop
 8018f56:	3710      	adds	r7, #16
 8018f58:	46bd      	mov	sp, r7
 8018f5a:	bd80      	pop	{r7, pc}

08018f5c <_ZSt4moveIRPFvRKSt9_Any_dataOhOPhOmEEONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
 8018f5c:	b480      	push	{r7}
 8018f5e:	b083      	sub	sp, #12
 8018f60:	af00      	add	r7, sp, #0
 8018f62:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8018f64:	687b      	ldr	r3, [r7, #4]
 8018f66:	4618      	mov	r0, r3
 8018f68:	370c      	adds	r7, #12
 8018f6a:	46bd      	mov	sp, r7
 8018f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f70:	4770      	bx	lr

08018f72 <_ZSt4swapIPFvRKSt9_Any_dataOhOPhOmEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISD_ESt18is_move_assignableISD_EEE5valueEvE4typeERSD_SN_>:
    swap(_Tp& __a, _Tp& __b)
 8018f72:	b580      	push	{r7, lr}
 8018f74:	b084      	sub	sp, #16
 8018f76:	af00      	add	r7, sp, #0
 8018f78:	6078      	str	r0, [r7, #4]
 8018f7a:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8018f7c:	6878      	ldr	r0, [r7, #4]
 8018f7e:	f7ff ffed 	bl	8018f5c <_ZSt4moveIRPFvRKSt9_Any_dataOhOPhOmEEONSt16remove_referenceIT_E4typeEOSB_>
 8018f82:	4603      	mov	r3, r0
 8018f84:	681b      	ldr	r3, [r3, #0]
 8018f86:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8018f88:	6838      	ldr	r0, [r7, #0]
 8018f8a:	f7ff ffe7 	bl	8018f5c <_ZSt4moveIRPFvRKSt9_Any_dataOhOPhOmEEONSt16remove_referenceIT_E4typeEOSB_>
 8018f8e:	4603      	mov	r3, r0
 8018f90:	681a      	ldr	r2, [r3, #0]
 8018f92:	687b      	ldr	r3, [r7, #4]
 8018f94:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8018f96:	f107 030c 	add.w	r3, r7, #12
 8018f9a:	4618      	mov	r0, r3
 8018f9c:	f7ff ffde 	bl	8018f5c <_ZSt4moveIRPFvRKSt9_Any_dataOhOPhOmEEONSt16remove_referenceIT_E4typeEOSB_>
 8018fa0:	4603      	mov	r3, r0
 8018fa2:	681a      	ldr	r2, [r3, #0]
 8018fa4:	683b      	ldr	r3, [r7, #0]
 8018fa6:	601a      	str	r2, [r3, #0]
    }
 8018fa8:	bf00      	nop
 8018faa:	3710      	adds	r7, #16
 8018fac:	46bd      	mov	sp, r7
 8018fae:	bd80      	pop	{r7, pc}

08018fb0 <_ZNKSt9type_info4nameEv>:
     *  the runtime-mandated type_info structures in the new-abi.  */
    virtual ~type_info();

    /** Returns an @e implementation-defined byte string; this is not
     *  portable between compilers!  */
    const char* name() const _GLIBCXX_NOEXCEPT
 8018fb0:	b480      	push	{r7}
 8018fb2:	b083      	sub	sp, #12
 8018fb4:	af00      	add	r7, sp, #0
 8018fb6:	6078      	str	r0, [r7, #4]
    { return __name[0] == '*' ? __name + 1 : __name; }
 8018fb8:	687b      	ldr	r3, [r7, #4]
 8018fba:	685b      	ldr	r3, [r3, #4]
 8018fbc:	781b      	ldrb	r3, [r3, #0]
 8018fbe:	2b2a      	cmp	r3, #42	; 0x2a
 8018fc0:	d103      	bne.n	8018fca <_ZNKSt9type_info4nameEv+0x1a>
 8018fc2:	687b      	ldr	r3, [r7, #4]
 8018fc4:	685b      	ldr	r3, [r3, #4]
 8018fc6:	3301      	adds	r3, #1
 8018fc8:	e001      	b.n	8018fce <_ZNKSt9type_info4nameEv+0x1e>
 8018fca:	687b      	ldr	r3, [r7, #4]
 8018fcc:	685b      	ldr	r3, [r3, #4]
 8018fce:	4618      	mov	r0, r3
 8018fd0:	370c      	adds	r7, #12
 8018fd2:	46bd      	mov	sp, r7
 8018fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fd8:	4770      	bx	lr
	...

08018fdc <_ZNKSt9type_info9hash_codeEv>:
#endif
    bool operator!=(const type_info& __arg) const _GLIBCXX_NOEXCEPT
    { return !operator==(__arg); }

#if __cplusplus >= 201103L
    size_t hash_code() const noexcept
 8018fdc:	b590      	push	{r4, r7, lr}
 8018fde:	b083      	sub	sp, #12
 8018fe0:	af00      	add	r7, sp, #0
 8018fe2:	6078      	str	r0, [r7, #4]
    {
#  if !__GXX_MERGED_TYPEINFO_NAMES
      return _Hash_bytes(name(), __builtin_strlen(name()),
 8018fe4:	6878      	ldr	r0, [r7, #4]
 8018fe6:	f7ff ffe3 	bl	8018fb0 <_ZNKSt9type_info4nameEv>
 8018fea:	4604      	mov	r4, r0
 8018fec:	6878      	ldr	r0, [r7, #4]
 8018fee:	f7ff ffdf 	bl	8018fb0 <_ZNKSt9type_info4nameEv>
 8018ff2:	4603      	mov	r3, r0
 8018ff4:	4618      	mov	r0, r3
 8018ff6:	f7e7 f9cd 	bl	8000394 <strlen>
 8018ffa:	4603      	mov	r3, r0
			 static_cast<size_t>(0xc70f6907UL));
 8018ffc:	4a04      	ldr	r2, [pc, #16]	; (8019010 <_ZNKSt9type_info9hash_codeEv+0x34>)
 8018ffe:	4619      	mov	r1, r3
 8019000:	4620      	mov	r0, r4
 8019002:	f001 f803 	bl	801a00c <_ZSt11_Hash_bytesPKvjj>
 8019006:	4603      	mov	r3, r0
#  else
      return reinterpret_cast<size_t>(__name);
#  endif
    }
 8019008:	4618      	mov	r0, r3
 801900a:	370c      	adds	r7, #12
 801900c:	46bd      	mov	sp, r7
 801900e:	bd90      	pop	{r4, r7, pc}
 8019010:	c70f6907 	.word	0xc70f6907

08019014 <_ZN10MessageBus6defineI10PingPacketEEbh>:
 * Warning: this method is not thread-safe.
 */


// WARNING: using a hash as a UUID is a bad idea in general but it was to only way to get SWIG working.
template<typename T> bool MessageBus::define(uint8_t identifier) {
 8019014:	b580      	push	{r7, lr}
 8019016:	b086      	sub	sp, #24
 8019018:	af00      	add	r7, sp, #0
 801901a:	6078      	str	r0, [r7, #4]
 801901c:	460b      	mov	r3, r1
 801901e:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 8019020:	2308      	movs	r3, #8
 8019022:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 8019024:	4829      	ldr	r0, [pc, #164]	; (80190cc <_ZN10MessageBus6defineI10PingPacketEEbh+0xb8>)
 8019026:	f7ff ffd9 	bl	8018fdc <_ZNKSt9type_info9hash_codeEv>
 801902a:	60f8      	str	r0, [r7, #12]

	uint32_t insertion_point = hash % 256;
 801902c:	68fb      	ldr	r3, [r7, #12]
 801902e:	b2db      	uxtb	r3, r3
 8019030:	617b      	str	r3, [r7, #20]

	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 8019032:	78fb      	ldrb	r3, [r7, #3]
 8019034:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8019038:	687a      	ldr	r2, [r7, #4]
 801903a:	00db      	lsls	r3, r3, #3
 801903c:	4413      	add	r3, r2
 801903e:	689b      	ldr	r3, [r3, #8]
 8019040:	2b00      	cmp	r3, #0
 8019042:	d001      	beq.n	8019048 <_ZN10MessageBus6defineI10PingPacketEEbh+0x34>
		return false; // Packet ID already in use
 8019044:	2300      	movs	r3, #0
 8019046:	e03c      	b.n	80190c2 <_ZN10MessageBus6defineI10PingPacketEEbh+0xae>
	}

	if(struct_size > max_packet_size) {
 8019048:	693b      	ldr	r3, [r7, #16]
 801904a:	2bff      	cmp	r3, #255	; 0xff
 801904c:	d901      	bls.n	8019052 <_ZN10MessageBus6defineI10PingPacketEEbh+0x3e>
		return false; // Packet size too large
 801904e:	2300      	movs	r3, #0
 8019050:	e037      	b.n	80190c2 <_ZN10MessageBus6defineI10PingPacketEEbh+0xae>
	}

	while(definitions_by_type[insertion_point] != nullptr) {
 8019052:	687a      	ldr	r2, [r7, #4]
 8019054:	697b      	ldr	r3, [r7, #20]
 8019056:	3380      	adds	r3, #128	; 0x80
 8019058:	009b      	lsls	r3, r3, #2
 801905a:	4413      	add	r3, r2
 801905c:	685b      	ldr	r3, [r3, #4]
 801905e:	2b00      	cmp	r3, #0
 8019060:	d015      	beq.n	801908e <_ZN10MessageBus6defineI10PingPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 8019062:	687a      	ldr	r2, [r7, #4]
 8019064:	697b      	ldr	r3, [r7, #20]
 8019066:	3380      	adds	r3, #128	; 0x80
 8019068:	009b      	lsls	r3, r3, #2
 801906a:	4413      	add	r3, r2
 801906c:	685b      	ldr	r3, [r3, #4]
 801906e:	685b      	ldr	r3, [r3, #4]
 8019070:	68fa      	ldr	r2, [r7, #12]
 8019072:	429a      	cmp	r2, r3
 8019074:	d101      	bne.n	801907a <_ZN10MessageBus6defineI10PingPacketEEbh+0x66>
			return false; // Packet type already defined
 8019076:	2300      	movs	r3, #0
 8019078:	e023      	b.n	80190c2 <_ZN10MessageBus6defineI10PingPacketEEbh+0xae>
		}

		insertion_point++;
 801907a:	697b      	ldr	r3, [r7, #20]
 801907c:	3301      	adds	r3, #1
 801907e:	617b      	str	r3, [r7, #20]

		if(insertion_point == 256) {
 8019080:	697b      	ldr	r3, [r7, #20]
 8019082:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8019086:	d1e4      	bne.n	8019052 <_ZN10MessageBus6defineI10PingPacketEEbh+0x3e>
			insertion_point = 0;
 8019088:	2300      	movs	r3, #0
 801908a:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 801908c:	e7e1      	b.n	8019052 <_ZN10MessageBus6defineI10PingPacketEEbh+0x3e>
		}
	}

	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 801908e:	78fb      	ldrb	r3, [r7, #3]
 8019090:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8019094:	00db      	lsls	r3, r3, #3
 8019096:	687a      	ldr	r2, [r7, #4]
 8019098:	4413      	add	r3, r2
 801909a:	3304      	adds	r3, #4
 801909c:	60bb      	str	r3, [r7, #8]

	def->id = identifier;
 801909e:	68bb      	ldr	r3, [r7, #8]
 80190a0:	78fa      	ldrb	r2, [r7, #3]
 80190a2:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 80190a4:	693b      	ldr	r3, [r7, #16]
 80190a6:	b2da      	uxtb	r2, r3
 80190a8:	68bb      	ldr	r3, [r7, #8]
 80190aa:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 80190ac:	68bb      	ldr	r3, [r7, #8]
 80190ae:	68fa      	ldr	r2, [r7, #12]
 80190b0:	605a      	str	r2, [r3, #4]

	definitions_by_type[insertion_point] = def;
 80190b2:	687a      	ldr	r2, [r7, #4]
 80190b4:	697b      	ldr	r3, [r7, #20]
 80190b6:	3380      	adds	r3, #128	; 0x80
 80190b8:	009b      	lsls	r3, r3, #2
 80190ba:	4413      	add	r3, r2
 80190bc:	68ba      	ldr	r2, [r7, #8]
 80190be:	605a      	str	r2, [r3, #4]

	return true;
 80190c0:	2301      	movs	r3, #1
}
 80190c2:	4618      	mov	r0, r3
 80190c4:	3718      	adds	r7, #24
 80190c6:	46bd      	mov	sp, r7
 80190c8:	bd80      	pop	{r7, pc}
 80190ca:	bf00      	nop
 80190cc:	080204e4 	.word	0x080204e4

080190d0 <_ZN10MessageBus6defineI13ConnectPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 80190d0:	b580      	push	{r7, lr}
 80190d2:	b086      	sub	sp, #24
 80190d4:	af00      	add	r7, sp, #0
 80190d6:	6078      	str	r0, [r7, #4]
 80190d8:	460b      	mov	r3, r1
 80190da:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 80190dc:	2320      	movs	r3, #32
 80190de:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 80190e0:	4829      	ldr	r0, [pc, #164]	; (8019188 <_ZN10MessageBus6defineI13ConnectPacketEEbh+0xb8>)
 80190e2:	f7ff ff7b 	bl	8018fdc <_ZNKSt9type_info9hash_codeEv>
 80190e6:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 80190e8:	68fb      	ldr	r3, [r7, #12]
 80190ea:	b2db      	uxtb	r3, r3
 80190ec:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 80190ee:	78fb      	ldrb	r3, [r7, #3]
 80190f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80190f4:	687a      	ldr	r2, [r7, #4]
 80190f6:	00db      	lsls	r3, r3, #3
 80190f8:	4413      	add	r3, r2
 80190fa:	689b      	ldr	r3, [r3, #8]
 80190fc:	2b00      	cmp	r3, #0
 80190fe:	d001      	beq.n	8019104 <_ZN10MessageBus6defineI13ConnectPacketEEbh+0x34>
		return false; // Packet ID already in use
 8019100:	2300      	movs	r3, #0
 8019102:	e03c      	b.n	801917e <_ZN10MessageBus6defineI13ConnectPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 8019104:	693b      	ldr	r3, [r7, #16]
 8019106:	2bff      	cmp	r3, #255	; 0xff
 8019108:	d901      	bls.n	801910e <_ZN10MessageBus6defineI13ConnectPacketEEbh+0x3e>
		return false; // Packet size too large
 801910a:	2300      	movs	r3, #0
 801910c:	e037      	b.n	801917e <_ZN10MessageBus6defineI13ConnectPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 801910e:	687a      	ldr	r2, [r7, #4]
 8019110:	697b      	ldr	r3, [r7, #20]
 8019112:	3380      	adds	r3, #128	; 0x80
 8019114:	009b      	lsls	r3, r3, #2
 8019116:	4413      	add	r3, r2
 8019118:	685b      	ldr	r3, [r3, #4]
 801911a:	2b00      	cmp	r3, #0
 801911c:	d015      	beq.n	801914a <_ZN10MessageBus6defineI13ConnectPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 801911e:	687a      	ldr	r2, [r7, #4]
 8019120:	697b      	ldr	r3, [r7, #20]
 8019122:	3380      	adds	r3, #128	; 0x80
 8019124:	009b      	lsls	r3, r3, #2
 8019126:	4413      	add	r3, r2
 8019128:	685b      	ldr	r3, [r3, #4]
 801912a:	685b      	ldr	r3, [r3, #4]
 801912c:	68fa      	ldr	r2, [r7, #12]
 801912e:	429a      	cmp	r2, r3
 8019130:	d101      	bne.n	8019136 <_ZN10MessageBus6defineI13ConnectPacketEEbh+0x66>
			return false; // Packet type already defined
 8019132:	2300      	movs	r3, #0
 8019134:	e023      	b.n	801917e <_ZN10MessageBus6defineI13ConnectPacketEEbh+0xae>
		insertion_point++;
 8019136:	697b      	ldr	r3, [r7, #20]
 8019138:	3301      	adds	r3, #1
 801913a:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 801913c:	697b      	ldr	r3, [r7, #20]
 801913e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8019142:	d1e4      	bne.n	801910e <_ZN10MessageBus6defineI13ConnectPacketEEbh+0x3e>
			insertion_point = 0;
 8019144:	2300      	movs	r3, #0
 8019146:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 8019148:	e7e1      	b.n	801910e <_ZN10MessageBus6defineI13ConnectPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 801914a:	78fb      	ldrb	r3, [r7, #3]
 801914c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8019150:	00db      	lsls	r3, r3, #3
 8019152:	687a      	ldr	r2, [r7, #4]
 8019154:	4413      	add	r3, r2
 8019156:	3304      	adds	r3, #4
 8019158:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 801915a:	68bb      	ldr	r3, [r7, #8]
 801915c:	78fa      	ldrb	r2, [r7, #3]
 801915e:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 8019160:	693b      	ldr	r3, [r7, #16]
 8019162:	b2da      	uxtb	r2, r3
 8019164:	68bb      	ldr	r3, [r7, #8]
 8019166:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 8019168:	68bb      	ldr	r3, [r7, #8]
 801916a:	68fa      	ldr	r2, [r7, #12]
 801916c:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 801916e:	687a      	ldr	r2, [r7, #4]
 8019170:	697b      	ldr	r3, [r7, #20]
 8019172:	3380      	adds	r3, #128	; 0x80
 8019174:	009b      	lsls	r3, r3, #2
 8019176:	4413      	add	r3, r2
 8019178:	68ba      	ldr	r2, [r7, #8]
 801917a:	605a      	str	r2, [r3, #4]
	return true;
 801917c:	2301      	movs	r3, #1
}
 801917e:	4618      	mov	r0, r3
 8019180:	3718      	adds	r7, #24
 8019182:	46bd      	mov	sp, r7
 8019184:	bd80      	pop	{r7, pc}
 8019186:	bf00      	nop
 8019188:	080204cc 	.word	0x080204cc

0801918c <_ZN10MessageBus6defineI16DisconnectPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 801918c:	b580      	push	{r7, lr}
 801918e:	b086      	sub	sp, #24
 8019190:	af00      	add	r7, sp, #0
 8019192:	6078      	str	r0, [r7, #4]
 8019194:	460b      	mov	r3, r1
 8019196:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 8019198:	2301      	movs	r3, #1
 801919a:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 801919c:	4829      	ldr	r0, [pc, #164]	; (8019244 <_ZN10MessageBus6defineI16DisconnectPacketEEbh+0xb8>)
 801919e:	f7ff ff1d 	bl	8018fdc <_ZNKSt9type_info9hash_codeEv>
 80191a2:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 80191a4:	68fb      	ldr	r3, [r7, #12]
 80191a6:	b2db      	uxtb	r3, r3
 80191a8:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 80191aa:	78fb      	ldrb	r3, [r7, #3]
 80191ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80191b0:	687a      	ldr	r2, [r7, #4]
 80191b2:	00db      	lsls	r3, r3, #3
 80191b4:	4413      	add	r3, r2
 80191b6:	689b      	ldr	r3, [r3, #8]
 80191b8:	2b00      	cmp	r3, #0
 80191ba:	d001      	beq.n	80191c0 <_ZN10MessageBus6defineI16DisconnectPacketEEbh+0x34>
		return false; // Packet ID already in use
 80191bc:	2300      	movs	r3, #0
 80191be:	e03c      	b.n	801923a <_ZN10MessageBus6defineI16DisconnectPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 80191c0:	693b      	ldr	r3, [r7, #16]
 80191c2:	2bff      	cmp	r3, #255	; 0xff
 80191c4:	d901      	bls.n	80191ca <_ZN10MessageBus6defineI16DisconnectPacketEEbh+0x3e>
		return false; // Packet size too large
 80191c6:	2300      	movs	r3, #0
 80191c8:	e037      	b.n	801923a <_ZN10MessageBus6defineI16DisconnectPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 80191ca:	687a      	ldr	r2, [r7, #4]
 80191cc:	697b      	ldr	r3, [r7, #20]
 80191ce:	3380      	adds	r3, #128	; 0x80
 80191d0:	009b      	lsls	r3, r3, #2
 80191d2:	4413      	add	r3, r2
 80191d4:	685b      	ldr	r3, [r3, #4]
 80191d6:	2b00      	cmp	r3, #0
 80191d8:	d015      	beq.n	8019206 <_ZN10MessageBus6defineI16DisconnectPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 80191da:	687a      	ldr	r2, [r7, #4]
 80191dc:	697b      	ldr	r3, [r7, #20]
 80191de:	3380      	adds	r3, #128	; 0x80
 80191e0:	009b      	lsls	r3, r3, #2
 80191e2:	4413      	add	r3, r2
 80191e4:	685b      	ldr	r3, [r3, #4]
 80191e6:	685b      	ldr	r3, [r3, #4]
 80191e8:	68fa      	ldr	r2, [r7, #12]
 80191ea:	429a      	cmp	r2, r3
 80191ec:	d101      	bne.n	80191f2 <_ZN10MessageBus6defineI16DisconnectPacketEEbh+0x66>
			return false; // Packet type already defined
 80191ee:	2300      	movs	r3, #0
 80191f0:	e023      	b.n	801923a <_ZN10MessageBus6defineI16DisconnectPacketEEbh+0xae>
		insertion_point++;
 80191f2:	697b      	ldr	r3, [r7, #20]
 80191f4:	3301      	adds	r3, #1
 80191f6:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 80191f8:	697b      	ldr	r3, [r7, #20]
 80191fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80191fe:	d1e4      	bne.n	80191ca <_ZN10MessageBus6defineI16DisconnectPacketEEbh+0x3e>
			insertion_point = 0;
 8019200:	2300      	movs	r3, #0
 8019202:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 8019204:	e7e1      	b.n	80191ca <_ZN10MessageBus6defineI16DisconnectPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 8019206:	78fb      	ldrb	r3, [r7, #3]
 8019208:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801920c:	00db      	lsls	r3, r3, #3
 801920e:	687a      	ldr	r2, [r7, #4]
 8019210:	4413      	add	r3, r2
 8019212:	3304      	adds	r3, #4
 8019214:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 8019216:	68bb      	ldr	r3, [r7, #8]
 8019218:	78fa      	ldrb	r2, [r7, #3]
 801921a:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 801921c:	693b      	ldr	r3, [r7, #16]
 801921e:	b2da      	uxtb	r2, r3
 8019220:	68bb      	ldr	r3, [r7, #8]
 8019222:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 8019224:	68bb      	ldr	r3, [r7, #8]
 8019226:	68fa      	ldr	r2, [r7, #12]
 8019228:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 801922a:	687a      	ldr	r2, [r7, #4]
 801922c:	697b      	ldr	r3, [r7, #20]
 801922e:	3380      	adds	r3, #128	; 0x80
 8019230:	009b      	lsls	r3, r3, #2
 8019232:	4413      	add	r3, r2
 8019234:	68ba      	ldr	r2, [r7, #8]
 8019236:	605a      	str	r2, [r3, #4]
	return true;
 8019238:	2301      	movs	r3, #1
}
 801923a:	4618      	mov	r0, r3
 801923c:	3718      	adds	r7, #24
 801923e:	46bd      	mov	sp, r7
 8019240:	bd80      	pop	{r7, pc}
 8019242:	bf00      	nop
 8019244:	080204b0 	.word	0x080204b0

08019248 <_ZN10MessageBus6defineI13RequestPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 8019248:	b580      	push	{r7, lr}
 801924a:	b086      	sub	sp, #24
 801924c:	af00      	add	r7, sp, #0
 801924e:	6078      	str	r0, [r7, #4]
 8019250:	460b      	mov	r3, r1
 8019252:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 8019254:	2308      	movs	r3, #8
 8019256:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 8019258:	4829      	ldr	r0, [pc, #164]	; (8019300 <_ZN10MessageBus6defineI13RequestPacketEEbh+0xb8>)
 801925a:	f7ff febf 	bl	8018fdc <_ZNKSt9type_info9hash_codeEv>
 801925e:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 8019260:	68fb      	ldr	r3, [r7, #12]
 8019262:	b2db      	uxtb	r3, r3
 8019264:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 8019266:	78fb      	ldrb	r3, [r7, #3]
 8019268:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801926c:	687a      	ldr	r2, [r7, #4]
 801926e:	00db      	lsls	r3, r3, #3
 8019270:	4413      	add	r3, r2
 8019272:	689b      	ldr	r3, [r3, #8]
 8019274:	2b00      	cmp	r3, #0
 8019276:	d001      	beq.n	801927c <_ZN10MessageBus6defineI13RequestPacketEEbh+0x34>
		return false; // Packet ID already in use
 8019278:	2300      	movs	r3, #0
 801927a:	e03c      	b.n	80192f6 <_ZN10MessageBus6defineI13RequestPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 801927c:	693b      	ldr	r3, [r7, #16]
 801927e:	2bff      	cmp	r3, #255	; 0xff
 8019280:	d901      	bls.n	8019286 <_ZN10MessageBus6defineI13RequestPacketEEbh+0x3e>
		return false; // Packet size too large
 8019282:	2300      	movs	r3, #0
 8019284:	e037      	b.n	80192f6 <_ZN10MessageBus6defineI13RequestPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 8019286:	687a      	ldr	r2, [r7, #4]
 8019288:	697b      	ldr	r3, [r7, #20]
 801928a:	3380      	adds	r3, #128	; 0x80
 801928c:	009b      	lsls	r3, r3, #2
 801928e:	4413      	add	r3, r2
 8019290:	685b      	ldr	r3, [r3, #4]
 8019292:	2b00      	cmp	r3, #0
 8019294:	d015      	beq.n	80192c2 <_ZN10MessageBus6defineI13RequestPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 8019296:	687a      	ldr	r2, [r7, #4]
 8019298:	697b      	ldr	r3, [r7, #20]
 801929a:	3380      	adds	r3, #128	; 0x80
 801929c:	009b      	lsls	r3, r3, #2
 801929e:	4413      	add	r3, r2
 80192a0:	685b      	ldr	r3, [r3, #4]
 80192a2:	685b      	ldr	r3, [r3, #4]
 80192a4:	68fa      	ldr	r2, [r7, #12]
 80192a6:	429a      	cmp	r2, r3
 80192a8:	d101      	bne.n	80192ae <_ZN10MessageBus6defineI13RequestPacketEEbh+0x66>
			return false; // Packet type already defined
 80192aa:	2300      	movs	r3, #0
 80192ac:	e023      	b.n	80192f6 <_ZN10MessageBus6defineI13RequestPacketEEbh+0xae>
		insertion_point++;
 80192ae:	697b      	ldr	r3, [r7, #20]
 80192b0:	3301      	adds	r3, #1
 80192b2:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 80192b4:	697b      	ldr	r3, [r7, #20]
 80192b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80192ba:	d1e4      	bne.n	8019286 <_ZN10MessageBus6defineI13RequestPacketEEbh+0x3e>
			insertion_point = 0;
 80192bc:	2300      	movs	r3, #0
 80192be:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 80192c0:	e7e1      	b.n	8019286 <_ZN10MessageBus6defineI13RequestPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 80192c2:	78fb      	ldrb	r3, [r7, #3]
 80192c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80192c8:	00db      	lsls	r3, r3, #3
 80192ca:	687a      	ldr	r2, [r7, #4]
 80192cc:	4413      	add	r3, r2
 80192ce:	3304      	adds	r3, #4
 80192d0:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 80192d2:	68bb      	ldr	r3, [r7, #8]
 80192d4:	78fa      	ldrb	r2, [r7, #3]
 80192d6:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 80192d8:	693b      	ldr	r3, [r7, #16]
 80192da:	b2da      	uxtb	r2, r3
 80192dc:	68bb      	ldr	r3, [r7, #8]
 80192de:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 80192e0:	68bb      	ldr	r3, [r7, #8]
 80192e2:	68fa      	ldr	r2, [r7, #12]
 80192e4:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 80192e6:	687a      	ldr	r2, [r7, #4]
 80192e8:	697b      	ldr	r3, [r7, #20]
 80192ea:	3380      	adds	r3, #128	; 0x80
 80192ec:	009b      	lsls	r3, r3, #2
 80192ee:	4413      	add	r3, r2
 80192f0:	68ba      	ldr	r2, [r7, #8]
 80192f2:	605a      	str	r2, [r3, #4]
	return true;
 80192f4:	2301      	movs	r3, #1
}
 80192f6:	4618      	mov	r0, r3
 80192f8:	3718      	adds	r7, #24
 80192fa:	46bd      	mov	sp, r7
 80192fc:	bd80      	pop	{r7, pc}
 80192fe:	bf00      	nop
 8019300:	08020498 	.word	0x08020498

08019304 <_ZN10MessageBus6defineI17AcknowledgePacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 8019304:	b580      	push	{r7, lr}
 8019306:	b086      	sub	sp, #24
 8019308:	af00      	add	r7, sp, #0
 801930a:	6078      	str	r0, [r7, #4]
 801930c:	460b      	mov	r3, r1
 801930e:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 8019310:	2303      	movs	r3, #3
 8019312:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 8019314:	4829      	ldr	r0, [pc, #164]	; (80193bc <_ZN10MessageBus6defineI17AcknowledgePacketEEbh+0xb8>)
 8019316:	f7ff fe61 	bl	8018fdc <_ZNKSt9type_info9hash_codeEv>
 801931a:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 801931c:	68fb      	ldr	r3, [r7, #12]
 801931e:	b2db      	uxtb	r3, r3
 8019320:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 8019322:	78fb      	ldrb	r3, [r7, #3]
 8019324:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8019328:	687a      	ldr	r2, [r7, #4]
 801932a:	00db      	lsls	r3, r3, #3
 801932c:	4413      	add	r3, r2
 801932e:	689b      	ldr	r3, [r3, #8]
 8019330:	2b00      	cmp	r3, #0
 8019332:	d001      	beq.n	8019338 <_ZN10MessageBus6defineI17AcknowledgePacketEEbh+0x34>
		return false; // Packet ID already in use
 8019334:	2300      	movs	r3, #0
 8019336:	e03c      	b.n	80193b2 <_ZN10MessageBus6defineI17AcknowledgePacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 8019338:	693b      	ldr	r3, [r7, #16]
 801933a:	2bff      	cmp	r3, #255	; 0xff
 801933c:	d901      	bls.n	8019342 <_ZN10MessageBus6defineI17AcknowledgePacketEEbh+0x3e>
		return false; // Packet size too large
 801933e:	2300      	movs	r3, #0
 8019340:	e037      	b.n	80193b2 <_ZN10MessageBus6defineI17AcknowledgePacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 8019342:	687a      	ldr	r2, [r7, #4]
 8019344:	697b      	ldr	r3, [r7, #20]
 8019346:	3380      	adds	r3, #128	; 0x80
 8019348:	009b      	lsls	r3, r3, #2
 801934a:	4413      	add	r3, r2
 801934c:	685b      	ldr	r3, [r3, #4]
 801934e:	2b00      	cmp	r3, #0
 8019350:	d015      	beq.n	801937e <_ZN10MessageBus6defineI17AcknowledgePacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 8019352:	687a      	ldr	r2, [r7, #4]
 8019354:	697b      	ldr	r3, [r7, #20]
 8019356:	3380      	adds	r3, #128	; 0x80
 8019358:	009b      	lsls	r3, r3, #2
 801935a:	4413      	add	r3, r2
 801935c:	685b      	ldr	r3, [r3, #4]
 801935e:	685b      	ldr	r3, [r3, #4]
 8019360:	68fa      	ldr	r2, [r7, #12]
 8019362:	429a      	cmp	r2, r3
 8019364:	d101      	bne.n	801936a <_ZN10MessageBus6defineI17AcknowledgePacketEEbh+0x66>
			return false; // Packet type already defined
 8019366:	2300      	movs	r3, #0
 8019368:	e023      	b.n	80193b2 <_ZN10MessageBus6defineI17AcknowledgePacketEEbh+0xae>
		insertion_point++;
 801936a:	697b      	ldr	r3, [r7, #20]
 801936c:	3301      	adds	r3, #1
 801936e:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 8019370:	697b      	ldr	r3, [r7, #20]
 8019372:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8019376:	d1e4      	bne.n	8019342 <_ZN10MessageBus6defineI17AcknowledgePacketEEbh+0x3e>
			insertion_point = 0;
 8019378:	2300      	movs	r3, #0
 801937a:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 801937c:	e7e1      	b.n	8019342 <_ZN10MessageBus6defineI17AcknowledgePacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 801937e:	78fb      	ldrb	r3, [r7, #3]
 8019380:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8019384:	00db      	lsls	r3, r3, #3
 8019386:	687a      	ldr	r2, [r7, #4]
 8019388:	4413      	add	r3, r2
 801938a:	3304      	adds	r3, #4
 801938c:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 801938e:	68bb      	ldr	r3, [r7, #8]
 8019390:	78fa      	ldrb	r2, [r7, #3]
 8019392:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 8019394:	693b      	ldr	r3, [r7, #16]
 8019396:	b2da      	uxtb	r2, r3
 8019398:	68bb      	ldr	r3, [r7, #8]
 801939a:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 801939c:	68bb      	ldr	r3, [r7, #8]
 801939e:	68fa      	ldr	r2, [r7, #12]
 80193a0:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 80193a2:	687a      	ldr	r2, [r7, #4]
 80193a4:	697b      	ldr	r3, [r7, #20]
 80193a6:	3380      	adds	r3, #128	; 0x80
 80193a8:	009b      	lsls	r3, r3, #2
 80193aa:	4413      	add	r3, r2
 80193ac:	68ba      	ldr	r2, [r7, #8]
 80193ae:	605a      	str	r2, [r3, #4]
	return true;
 80193b0:	2301      	movs	r3, #1
}
 80193b2:	4618      	mov	r0, r3
 80193b4:	3718      	adds	r7, #24
 80193b6:	46bd      	mov	sp, r7
 80193b8:	bd80      	pop	{r7, pc}
 80193ba:	bf00      	nop
 80193bc:	0802047c 	.word	0x0802047c

080193c0 <_ZN10MessageBus6defineI14ResponsePacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 80193c0:	b580      	push	{r7, lr}
 80193c2:	b086      	sub	sp, #24
 80193c4:	af00      	add	r7, sp, #0
 80193c6:	6078      	str	r0, [r7, #4]
 80193c8:	460b      	mov	r3, r1
 80193ca:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 80193cc:	2308      	movs	r3, #8
 80193ce:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 80193d0:	4829      	ldr	r0, [pc, #164]	; (8019478 <_ZN10MessageBus6defineI14ResponsePacketEEbh+0xb8>)
 80193d2:	f7ff fe03 	bl	8018fdc <_ZNKSt9type_info9hash_codeEv>
 80193d6:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 80193d8:	68fb      	ldr	r3, [r7, #12]
 80193da:	b2db      	uxtb	r3, r3
 80193dc:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 80193de:	78fb      	ldrb	r3, [r7, #3]
 80193e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80193e4:	687a      	ldr	r2, [r7, #4]
 80193e6:	00db      	lsls	r3, r3, #3
 80193e8:	4413      	add	r3, r2
 80193ea:	689b      	ldr	r3, [r3, #8]
 80193ec:	2b00      	cmp	r3, #0
 80193ee:	d001      	beq.n	80193f4 <_ZN10MessageBus6defineI14ResponsePacketEEbh+0x34>
		return false; // Packet ID already in use
 80193f0:	2300      	movs	r3, #0
 80193f2:	e03c      	b.n	801946e <_ZN10MessageBus6defineI14ResponsePacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 80193f4:	693b      	ldr	r3, [r7, #16]
 80193f6:	2bff      	cmp	r3, #255	; 0xff
 80193f8:	d901      	bls.n	80193fe <_ZN10MessageBus6defineI14ResponsePacketEEbh+0x3e>
		return false; // Packet size too large
 80193fa:	2300      	movs	r3, #0
 80193fc:	e037      	b.n	801946e <_ZN10MessageBus6defineI14ResponsePacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 80193fe:	687a      	ldr	r2, [r7, #4]
 8019400:	697b      	ldr	r3, [r7, #20]
 8019402:	3380      	adds	r3, #128	; 0x80
 8019404:	009b      	lsls	r3, r3, #2
 8019406:	4413      	add	r3, r2
 8019408:	685b      	ldr	r3, [r3, #4]
 801940a:	2b00      	cmp	r3, #0
 801940c:	d015      	beq.n	801943a <_ZN10MessageBus6defineI14ResponsePacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 801940e:	687a      	ldr	r2, [r7, #4]
 8019410:	697b      	ldr	r3, [r7, #20]
 8019412:	3380      	adds	r3, #128	; 0x80
 8019414:	009b      	lsls	r3, r3, #2
 8019416:	4413      	add	r3, r2
 8019418:	685b      	ldr	r3, [r3, #4]
 801941a:	685b      	ldr	r3, [r3, #4]
 801941c:	68fa      	ldr	r2, [r7, #12]
 801941e:	429a      	cmp	r2, r3
 8019420:	d101      	bne.n	8019426 <_ZN10MessageBus6defineI14ResponsePacketEEbh+0x66>
			return false; // Packet type already defined
 8019422:	2300      	movs	r3, #0
 8019424:	e023      	b.n	801946e <_ZN10MessageBus6defineI14ResponsePacketEEbh+0xae>
		insertion_point++;
 8019426:	697b      	ldr	r3, [r7, #20]
 8019428:	3301      	adds	r3, #1
 801942a:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 801942c:	697b      	ldr	r3, [r7, #20]
 801942e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8019432:	d1e4      	bne.n	80193fe <_ZN10MessageBus6defineI14ResponsePacketEEbh+0x3e>
			insertion_point = 0;
 8019434:	2300      	movs	r3, #0
 8019436:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 8019438:	e7e1      	b.n	80193fe <_ZN10MessageBus6defineI14ResponsePacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 801943a:	78fb      	ldrb	r3, [r7, #3]
 801943c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8019440:	00db      	lsls	r3, r3, #3
 8019442:	687a      	ldr	r2, [r7, #4]
 8019444:	4413      	add	r3, r2
 8019446:	3304      	adds	r3, #4
 8019448:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 801944a:	68bb      	ldr	r3, [r7, #8]
 801944c:	78fa      	ldrb	r2, [r7, #3]
 801944e:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 8019450:	693b      	ldr	r3, [r7, #16]
 8019452:	b2da      	uxtb	r2, r3
 8019454:	68bb      	ldr	r3, [r7, #8]
 8019456:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 8019458:	68bb      	ldr	r3, [r7, #8]
 801945a:	68fa      	ldr	r2, [r7, #12]
 801945c:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 801945e:	687a      	ldr	r2, [r7, #4]
 8019460:	697b      	ldr	r3, [r7, #20]
 8019462:	3380      	adds	r3, #128	; 0x80
 8019464:	009b      	lsls	r3, r3, #2
 8019466:	4413      	add	r3, r2
 8019468:	68ba      	ldr	r2, [r7, #8]
 801946a:	605a      	str	r2, [r3, #4]
	return true;
 801946c:	2301      	movs	r3, #1
}
 801946e:	4618      	mov	r0, r3
 8019470:	3718      	adds	r7, #24
 8019472:	46bd      	mov	sp, r7
 8019474:	bd80      	pop	{r7, pc}
 8019476:	bf00      	nop
 8019478:	08020460 	.word	0x08020460

0801947c <_ZN10MessageBus6defineI14ProgressPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 801947c:	b580      	push	{r7, lr}
 801947e:	b086      	sub	sp, #24
 8019480:	af00      	add	r7, sp, #0
 8019482:	6078      	str	r0, [r7, #4]
 8019484:	460b      	mov	r3, r1
 8019486:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 8019488:	2305      	movs	r3, #5
 801948a:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 801948c:	4829      	ldr	r0, [pc, #164]	; (8019534 <_ZN10MessageBus6defineI14ProgressPacketEEbh+0xb8>)
 801948e:	f7ff fda5 	bl	8018fdc <_ZNKSt9type_info9hash_codeEv>
 8019492:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 8019494:	68fb      	ldr	r3, [r7, #12]
 8019496:	b2db      	uxtb	r3, r3
 8019498:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 801949a:	78fb      	ldrb	r3, [r7, #3]
 801949c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80194a0:	687a      	ldr	r2, [r7, #4]
 80194a2:	00db      	lsls	r3, r3, #3
 80194a4:	4413      	add	r3, r2
 80194a6:	689b      	ldr	r3, [r3, #8]
 80194a8:	2b00      	cmp	r3, #0
 80194aa:	d001      	beq.n	80194b0 <_ZN10MessageBus6defineI14ProgressPacketEEbh+0x34>
		return false; // Packet ID already in use
 80194ac:	2300      	movs	r3, #0
 80194ae:	e03c      	b.n	801952a <_ZN10MessageBus6defineI14ProgressPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 80194b0:	693b      	ldr	r3, [r7, #16]
 80194b2:	2bff      	cmp	r3, #255	; 0xff
 80194b4:	d901      	bls.n	80194ba <_ZN10MessageBus6defineI14ProgressPacketEEbh+0x3e>
		return false; // Packet size too large
 80194b6:	2300      	movs	r3, #0
 80194b8:	e037      	b.n	801952a <_ZN10MessageBus6defineI14ProgressPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 80194ba:	687a      	ldr	r2, [r7, #4]
 80194bc:	697b      	ldr	r3, [r7, #20]
 80194be:	3380      	adds	r3, #128	; 0x80
 80194c0:	009b      	lsls	r3, r3, #2
 80194c2:	4413      	add	r3, r2
 80194c4:	685b      	ldr	r3, [r3, #4]
 80194c6:	2b00      	cmp	r3, #0
 80194c8:	d015      	beq.n	80194f6 <_ZN10MessageBus6defineI14ProgressPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 80194ca:	687a      	ldr	r2, [r7, #4]
 80194cc:	697b      	ldr	r3, [r7, #20]
 80194ce:	3380      	adds	r3, #128	; 0x80
 80194d0:	009b      	lsls	r3, r3, #2
 80194d2:	4413      	add	r3, r2
 80194d4:	685b      	ldr	r3, [r3, #4]
 80194d6:	685b      	ldr	r3, [r3, #4]
 80194d8:	68fa      	ldr	r2, [r7, #12]
 80194da:	429a      	cmp	r2, r3
 80194dc:	d101      	bne.n	80194e2 <_ZN10MessageBus6defineI14ProgressPacketEEbh+0x66>
			return false; // Packet type already defined
 80194de:	2300      	movs	r3, #0
 80194e0:	e023      	b.n	801952a <_ZN10MessageBus6defineI14ProgressPacketEEbh+0xae>
		insertion_point++;
 80194e2:	697b      	ldr	r3, [r7, #20]
 80194e4:	3301      	adds	r3, #1
 80194e6:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 80194e8:	697b      	ldr	r3, [r7, #20]
 80194ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80194ee:	d1e4      	bne.n	80194ba <_ZN10MessageBus6defineI14ProgressPacketEEbh+0x3e>
			insertion_point = 0;
 80194f0:	2300      	movs	r3, #0
 80194f2:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 80194f4:	e7e1      	b.n	80194ba <_ZN10MessageBus6defineI14ProgressPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 80194f6:	78fb      	ldrb	r3, [r7, #3]
 80194f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80194fc:	00db      	lsls	r3, r3, #3
 80194fe:	687a      	ldr	r2, [r7, #4]
 8019500:	4413      	add	r3, r2
 8019502:	3304      	adds	r3, #4
 8019504:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 8019506:	68bb      	ldr	r3, [r7, #8]
 8019508:	78fa      	ldrb	r2, [r7, #3]
 801950a:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 801950c:	693b      	ldr	r3, [r7, #16]
 801950e:	b2da      	uxtb	r2, r3
 8019510:	68bb      	ldr	r3, [r7, #8]
 8019512:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 8019514:	68bb      	ldr	r3, [r7, #8]
 8019516:	68fa      	ldr	r2, [r7, #12]
 8019518:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 801951a:	687a      	ldr	r2, [r7, #4]
 801951c:	697b      	ldr	r3, [r7, #20]
 801951e:	3380      	adds	r3, #128	; 0x80
 8019520:	009b      	lsls	r3, r3, #2
 8019522:	4413      	add	r3, r2
 8019524:	68ba      	ldr	r2, [r7, #8]
 8019526:	605a      	str	r2, [r3, #4]
	return true;
 8019528:	2301      	movs	r3, #1
}
 801952a:	4618      	mov	r0, r3
 801952c:	3718      	adds	r7, #24
 801952e:	46bd      	mov	sp, r7
 8019530:	bd80      	pop	{r7, pc}
 8019532:	bf00      	nop
 8019534:	08020444 	.word	0x08020444

08019538 <_ZN10MessageBus6defineI10DataPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 8019538:	b580      	push	{r7, lr}
 801953a:	b086      	sub	sp, #24
 801953c:	af00      	add	r7, sp, #0
 801953e:	6078      	str	r0, [r7, #4]
 8019540:	460b      	mov	r3, r1
 8019542:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 8019544:	2304      	movs	r3, #4
 8019546:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 8019548:	4829      	ldr	r0, [pc, #164]	; (80195f0 <_ZN10MessageBus6defineI10DataPacketEEbh+0xb8>)
 801954a:	f7ff fd47 	bl	8018fdc <_ZNKSt9type_info9hash_codeEv>
 801954e:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 8019550:	68fb      	ldr	r3, [r7, #12]
 8019552:	b2db      	uxtb	r3, r3
 8019554:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 8019556:	78fb      	ldrb	r3, [r7, #3]
 8019558:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801955c:	687a      	ldr	r2, [r7, #4]
 801955e:	00db      	lsls	r3, r3, #3
 8019560:	4413      	add	r3, r2
 8019562:	689b      	ldr	r3, [r3, #8]
 8019564:	2b00      	cmp	r3, #0
 8019566:	d001      	beq.n	801956c <_ZN10MessageBus6defineI10DataPacketEEbh+0x34>
		return false; // Packet ID already in use
 8019568:	2300      	movs	r3, #0
 801956a:	e03c      	b.n	80195e6 <_ZN10MessageBus6defineI10DataPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 801956c:	693b      	ldr	r3, [r7, #16]
 801956e:	2bff      	cmp	r3, #255	; 0xff
 8019570:	d901      	bls.n	8019576 <_ZN10MessageBus6defineI10DataPacketEEbh+0x3e>
		return false; // Packet size too large
 8019572:	2300      	movs	r3, #0
 8019574:	e037      	b.n	80195e6 <_ZN10MessageBus6defineI10DataPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 8019576:	687a      	ldr	r2, [r7, #4]
 8019578:	697b      	ldr	r3, [r7, #20]
 801957a:	3380      	adds	r3, #128	; 0x80
 801957c:	009b      	lsls	r3, r3, #2
 801957e:	4413      	add	r3, r2
 8019580:	685b      	ldr	r3, [r3, #4]
 8019582:	2b00      	cmp	r3, #0
 8019584:	d015      	beq.n	80195b2 <_ZN10MessageBus6defineI10DataPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 8019586:	687a      	ldr	r2, [r7, #4]
 8019588:	697b      	ldr	r3, [r7, #20]
 801958a:	3380      	adds	r3, #128	; 0x80
 801958c:	009b      	lsls	r3, r3, #2
 801958e:	4413      	add	r3, r2
 8019590:	685b      	ldr	r3, [r3, #4]
 8019592:	685b      	ldr	r3, [r3, #4]
 8019594:	68fa      	ldr	r2, [r7, #12]
 8019596:	429a      	cmp	r2, r3
 8019598:	d101      	bne.n	801959e <_ZN10MessageBus6defineI10DataPacketEEbh+0x66>
			return false; // Packet type already defined
 801959a:	2300      	movs	r3, #0
 801959c:	e023      	b.n	80195e6 <_ZN10MessageBus6defineI10DataPacketEEbh+0xae>
		insertion_point++;
 801959e:	697b      	ldr	r3, [r7, #20]
 80195a0:	3301      	adds	r3, #1
 80195a2:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 80195a4:	697b      	ldr	r3, [r7, #20]
 80195a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80195aa:	d1e4      	bne.n	8019576 <_ZN10MessageBus6defineI10DataPacketEEbh+0x3e>
			insertion_point = 0;
 80195ac:	2300      	movs	r3, #0
 80195ae:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 80195b0:	e7e1      	b.n	8019576 <_ZN10MessageBus6defineI10DataPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 80195b2:	78fb      	ldrb	r3, [r7, #3]
 80195b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80195b8:	00db      	lsls	r3, r3, #3
 80195ba:	687a      	ldr	r2, [r7, #4]
 80195bc:	4413      	add	r3, r2
 80195be:	3304      	adds	r3, #4
 80195c0:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 80195c2:	68bb      	ldr	r3, [r7, #8]
 80195c4:	78fa      	ldrb	r2, [r7, #3]
 80195c6:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 80195c8:	693b      	ldr	r3, [r7, #16]
 80195ca:	b2da      	uxtb	r2, r3
 80195cc:	68bb      	ldr	r3, [r7, #8]
 80195ce:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 80195d0:	68bb      	ldr	r3, [r7, #8]
 80195d2:	68fa      	ldr	r2, [r7, #12]
 80195d4:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 80195d6:	687a      	ldr	r2, [r7, #4]
 80195d8:	697b      	ldr	r3, [r7, #20]
 80195da:	3380      	adds	r3, #128	; 0x80
 80195dc:	009b      	lsls	r3, r3, #2
 80195de:	4413      	add	r3, r2
 80195e0:	68ba      	ldr	r2, [r7, #8]
 80195e2:	605a      	str	r2, [r3, #4]
	return true;
 80195e4:	2301      	movs	r3, #1
}
 80195e6:	4618      	mov	r0, r3
 80195e8:	3718      	adds	r7, #24
 80195ea:	46bd      	mov	sp, r7
 80195ec:	bd80      	pop	{r7, pc}
 80195ee:	bf00      	nop
 80195f0:	0802042c 	.word	0x0802042c

080195f4 <_ZN10MessageBus6defineI13MessagePacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 80195f4:	b580      	push	{r7, lr}
 80195f6:	b086      	sub	sp, #24
 80195f8:	af00      	add	r7, sp, #0
 80195fa:	6078      	str	r0, [r7, #4]
 80195fc:	460b      	mov	r3, r1
 80195fe:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 8019600:	2380      	movs	r3, #128	; 0x80
 8019602:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 8019604:	4829      	ldr	r0, [pc, #164]	; (80196ac <_ZN10MessageBus6defineI13MessagePacketEEbh+0xb8>)
 8019606:	f7ff fce9 	bl	8018fdc <_ZNKSt9type_info9hash_codeEv>
 801960a:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 801960c:	68fb      	ldr	r3, [r7, #12]
 801960e:	b2db      	uxtb	r3, r3
 8019610:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 8019612:	78fb      	ldrb	r3, [r7, #3]
 8019614:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8019618:	687a      	ldr	r2, [r7, #4]
 801961a:	00db      	lsls	r3, r3, #3
 801961c:	4413      	add	r3, r2
 801961e:	689b      	ldr	r3, [r3, #8]
 8019620:	2b00      	cmp	r3, #0
 8019622:	d001      	beq.n	8019628 <_ZN10MessageBus6defineI13MessagePacketEEbh+0x34>
		return false; // Packet ID already in use
 8019624:	2300      	movs	r3, #0
 8019626:	e03c      	b.n	80196a2 <_ZN10MessageBus6defineI13MessagePacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 8019628:	693b      	ldr	r3, [r7, #16]
 801962a:	2bff      	cmp	r3, #255	; 0xff
 801962c:	d901      	bls.n	8019632 <_ZN10MessageBus6defineI13MessagePacketEEbh+0x3e>
		return false; // Packet size too large
 801962e:	2300      	movs	r3, #0
 8019630:	e037      	b.n	80196a2 <_ZN10MessageBus6defineI13MessagePacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 8019632:	687a      	ldr	r2, [r7, #4]
 8019634:	697b      	ldr	r3, [r7, #20]
 8019636:	3380      	adds	r3, #128	; 0x80
 8019638:	009b      	lsls	r3, r3, #2
 801963a:	4413      	add	r3, r2
 801963c:	685b      	ldr	r3, [r3, #4]
 801963e:	2b00      	cmp	r3, #0
 8019640:	d015      	beq.n	801966e <_ZN10MessageBus6defineI13MessagePacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 8019642:	687a      	ldr	r2, [r7, #4]
 8019644:	697b      	ldr	r3, [r7, #20]
 8019646:	3380      	adds	r3, #128	; 0x80
 8019648:	009b      	lsls	r3, r3, #2
 801964a:	4413      	add	r3, r2
 801964c:	685b      	ldr	r3, [r3, #4]
 801964e:	685b      	ldr	r3, [r3, #4]
 8019650:	68fa      	ldr	r2, [r7, #12]
 8019652:	429a      	cmp	r2, r3
 8019654:	d101      	bne.n	801965a <_ZN10MessageBus6defineI13MessagePacketEEbh+0x66>
			return false; // Packet type already defined
 8019656:	2300      	movs	r3, #0
 8019658:	e023      	b.n	80196a2 <_ZN10MessageBus6defineI13MessagePacketEEbh+0xae>
		insertion_point++;
 801965a:	697b      	ldr	r3, [r7, #20]
 801965c:	3301      	adds	r3, #1
 801965e:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 8019660:	697b      	ldr	r3, [r7, #20]
 8019662:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8019666:	d1e4      	bne.n	8019632 <_ZN10MessageBus6defineI13MessagePacketEEbh+0x3e>
			insertion_point = 0;
 8019668:	2300      	movs	r3, #0
 801966a:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 801966c:	e7e1      	b.n	8019632 <_ZN10MessageBus6defineI13MessagePacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 801966e:	78fb      	ldrb	r3, [r7, #3]
 8019670:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8019674:	00db      	lsls	r3, r3, #3
 8019676:	687a      	ldr	r2, [r7, #4]
 8019678:	4413      	add	r3, r2
 801967a:	3304      	adds	r3, #4
 801967c:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 801967e:	68bb      	ldr	r3, [r7, #8]
 8019680:	78fa      	ldrb	r2, [r7, #3]
 8019682:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 8019684:	693b      	ldr	r3, [r7, #16]
 8019686:	b2da      	uxtb	r2, r3
 8019688:	68bb      	ldr	r3, [r7, #8]
 801968a:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 801968c:	68bb      	ldr	r3, [r7, #8]
 801968e:	68fa      	ldr	r2, [r7, #12]
 8019690:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 8019692:	687a      	ldr	r2, [r7, #4]
 8019694:	697b      	ldr	r3, [r7, #20]
 8019696:	3380      	adds	r3, #128	; 0x80
 8019698:	009b      	lsls	r3, r3, #2
 801969a:	4413      	add	r3, r2
 801969c:	68ba      	ldr	r2, [r7, #8]
 801969e:	605a      	str	r2, [r3, #4]
	return true;
 80196a0:	2301      	movs	r3, #1
}
 80196a2:	4618      	mov	r0, r3
 80196a4:	3718      	adds	r7, #24
 80196a6:	46bd      	mov	sp, r7
 80196a8:	bd80      	pop	{r7, pc}
 80196aa:	bf00      	nop
 80196ac:	08020414 	.word	0x08020414

080196b0 <_ZN10MessageBus6defineI11ErrorPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 80196b0:	b580      	push	{r7, lr}
 80196b2:	b086      	sub	sp, #24
 80196b4:	af00      	add	r7, sp, #0
 80196b6:	6078      	str	r0, [r7, #4]
 80196b8:	460b      	mov	r3, r1
 80196ba:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 80196bc:	2301      	movs	r3, #1
 80196be:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 80196c0:	4829      	ldr	r0, [pc, #164]	; (8019768 <_ZN10MessageBus6defineI11ErrorPacketEEbh+0xb8>)
 80196c2:	f7ff fc8b 	bl	8018fdc <_ZNKSt9type_info9hash_codeEv>
 80196c6:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 80196c8:	68fb      	ldr	r3, [r7, #12]
 80196ca:	b2db      	uxtb	r3, r3
 80196cc:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 80196ce:	78fb      	ldrb	r3, [r7, #3]
 80196d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80196d4:	687a      	ldr	r2, [r7, #4]
 80196d6:	00db      	lsls	r3, r3, #3
 80196d8:	4413      	add	r3, r2
 80196da:	689b      	ldr	r3, [r3, #8]
 80196dc:	2b00      	cmp	r3, #0
 80196de:	d001      	beq.n	80196e4 <_ZN10MessageBus6defineI11ErrorPacketEEbh+0x34>
		return false; // Packet ID already in use
 80196e0:	2300      	movs	r3, #0
 80196e2:	e03c      	b.n	801975e <_ZN10MessageBus6defineI11ErrorPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 80196e4:	693b      	ldr	r3, [r7, #16]
 80196e6:	2bff      	cmp	r3, #255	; 0xff
 80196e8:	d901      	bls.n	80196ee <_ZN10MessageBus6defineI11ErrorPacketEEbh+0x3e>
		return false; // Packet size too large
 80196ea:	2300      	movs	r3, #0
 80196ec:	e037      	b.n	801975e <_ZN10MessageBus6defineI11ErrorPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 80196ee:	687a      	ldr	r2, [r7, #4]
 80196f0:	697b      	ldr	r3, [r7, #20]
 80196f2:	3380      	adds	r3, #128	; 0x80
 80196f4:	009b      	lsls	r3, r3, #2
 80196f6:	4413      	add	r3, r2
 80196f8:	685b      	ldr	r3, [r3, #4]
 80196fa:	2b00      	cmp	r3, #0
 80196fc:	d015      	beq.n	801972a <_ZN10MessageBus6defineI11ErrorPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 80196fe:	687a      	ldr	r2, [r7, #4]
 8019700:	697b      	ldr	r3, [r7, #20]
 8019702:	3380      	adds	r3, #128	; 0x80
 8019704:	009b      	lsls	r3, r3, #2
 8019706:	4413      	add	r3, r2
 8019708:	685b      	ldr	r3, [r3, #4]
 801970a:	685b      	ldr	r3, [r3, #4]
 801970c:	68fa      	ldr	r2, [r7, #12]
 801970e:	429a      	cmp	r2, r3
 8019710:	d101      	bne.n	8019716 <_ZN10MessageBus6defineI11ErrorPacketEEbh+0x66>
			return false; // Packet type already defined
 8019712:	2300      	movs	r3, #0
 8019714:	e023      	b.n	801975e <_ZN10MessageBus6defineI11ErrorPacketEEbh+0xae>
		insertion_point++;
 8019716:	697b      	ldr	r3, [r7, #20]
 8019718:	3301      	adds	r3, #1
 801971a:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 801971c:	697b      	ldr	r3, [r7, #20]
 801971e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8019722:	d1e4      	bne.n	80196ee <_ZN10MessageBus6defineI11ErrorPacketEEbh+0x3e>
			insertion_point = 0;
 8019724:	2300      	movs	r3, #0
 8019726:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 8019728:	e7e1      	b.n	80196ee <_ZN10MessageBus6defineI11ErrorPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 801972a:	78fb      	ldrb	r3, [r7, #3]
 801972c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8019730:	00db      	lsls	r3, r3, #3
 8019732:	687a      	ldr	r2, [r7, #4]
 8019734:	4413      	add	r3, r2
 8019736:	3304      	adds	r3, #4
 8019738:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 801973a:	68bb      	ldr	r3, [r7, #8]
 801973c:	78fa      	ldrb	r2, [r7, #3]
 801973e:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 8019740:	693b      	ldr	r3, [r7, #16]
 8019742:	b2da      	uxtb	r2, r3
 8019744:	68bb      	ldr	r3, [r7, #8]
 8019746:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 8019748:	68bb      	ldr	r3, [r7, #8]
 801974a:	68fa      	ldr	r2, [r7, #12]
 801974c:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 801974e:	687a      	ldr	r2, [r7, #4]
 8019750:	697b      	ldr	r3, [r7, #20]
 8019752:	3380      	adds	r3, #128	; 0x80
 8019754:	009b      	lsls	r3, r3, #2
 8019756:	4413      	add	r3, r2
 8019758:	68ba      	ldr	r2, [r7, #8]
 801975a:	605a      	str	r2, [r3, #4]
	return true;
 801975c:	2301      	movs	r3, #1
}
 801975e:	4618      	mov	r0, r3
 8019760:	3718      	adds	r7, #24
 8019762:	46bd      	mov	sp, r7
 8019764:	bd80      	pop	{r7, pc}
 8019766:	bf00      	nop
 8019768:	080203fc 	.word	0x080203fc

0801976c <_ZN10MessageBus4sendEP16PacketDefinitionPh>:
	PacketDefinition* def = retrieve(hash);

	return send(def, (uint8_t*) message);
}

bool MessageBus::send(PacketDefinition* def, uint8_t* data) {
 801976c:	b580      	push	{r7, lr}
 801976e:	b086      	sub	sp, #24
 8019770:	af00      	add	r7, sp, #0
 8019772:	60f8      	str	r0, [r7, #12]
 8019774:	60b9      	str	r1, [r7, #8]
 8019776:	607a      	str	r2, [r7, #4]
	if(def != nullptr) {
 8019778:	68bb      	ldr	r3, [r7, #8]
 801977a:	2b00      	cmp	r3, #0
 801977c:	d031      	beq.n	80197e2 <_ZN10MessageBus4sendEP16PacketDefinitionPh+0x76>
		uint32_t data_bytes_written = 0;
 801977e:	2300      	movs	r3, #0
 8019780:	617b      	str	r3, [r7, #20]

		while(data_bytes_written < def->size) {
 8019782:	68bb      	ldr	r3, [r7, #8]
 8019784:	785b      	ldrb	r3, [r3, #1]
 8019786:	461a      	mov	r2, r3
 8019788:	697b      	ldr	r3, [r7, #20]
 801978a:	4293      	cmp	r3, r2
 801978c:	d227      	bcs.n	80197de <_ZN10MessageBus4sendEP16PacketDefinitionPh+0x72>
			append(&def->id, 1); // Write the packet ID for each transmission frame.
 801978e:	68fb      	ldr	r3, [r7, #12]
 8019790:	681b      	ldr	r3, [r3, #0]
 8019792:	3308      	adds	r3, #8
 8019794:	681b      	ldr	r3, [r3, #0]
 8019796:	68b9      	ldr	r1, [r7, #8]
 8019798:	2201      	movs	r2, #1
 801979a:	68f8      	ldr	r0, [r7, #12]
 801979c:	4798      	blx	r3
							     // This is only to facilitate the packet reconstruction and should not increment data_bytes_written.

			uint32_t new_bytes = append(data + data_bytes_written, def->size - data_bytes_written); // Send the data
 801979e:	68fb      	ldr	r3, [r7, #12]
 80197a0:	681b      	ldr	r3, [r3, #0]
 80197a2:	3308      	adds	r3, #8
 80197a4:	681b      	ldr	r3, [r3, #0]
 80197a6:	6879      	ldr	r1, [r7, #4]
 80197a8:	697a      	ldr	r2, [r7, #20]
 80197aa:	4411      	add	r1, r2
 80197ac:	68ba      	ldr	r2, [r7, #8]
 80197ae:	7852      	ldrb	r2, [r2, #1]
 80197b0:	4610      	mov	r0, r2
 80197b2:	697a      	ldr	r2, [r7, #20]
 80197b4:	1a82      	subs	r2, r0, r2
 80197b6:	68f8      	ldr	r0, [r7, #12]
 80197b8:	4798      	blx	r3
 80197ba:	4603      	mov	r3, r0
 80197bc:	613b      	str	r3, [r7, #16]

			if(new_bytes == 0) {
 80197be:	693b      	ldr	r3, [r7, #16]
 80197c0:	2b00      	cmp	r3, #0
 80197c2:	d101      	bne.n	80197c8 <_ZN10MessageBus4sendEP16PacketDefinitionPh+0x5c>
				return false;
 80197c4:	2300      	movs	r3, #0
 80197c6:	e00d      	b.n	80197e4 <_ZN10MessageBus4sendEP16PacketDefinitionPh+0x78>
			} else {
				transmit();
 80197c8:	68fb      	ldr	r3, [r7, #12]
 80197ca:	681b      	ldr	r3, [r3, #0]
 80197cc:	330c      	adds	r3, #12
 80197ce:	681b      	ldr	r3, [r3, #0]
 80197d0:	68f8      	ldr	r0, [r7, #12]
 80197d2:	4798      	blx	r3
				data_bytes_written += new_bytes;
 80197d4:	697a      	ldr	r2, [r7, #20]
 80197d6:	693b      	ldr	r3, [r7, #16]
 80197d8:	4413      	add	r3, r2
 80197da:	617b      	str	r3, [r7, #20]
		while(data_bytes_written < def->size) {
 80197dc:	e7d1      	b.n	8019782 <_ZN10MessageBus4sendEP16PacketDefinitionPh+0x16>
			}
		}

		return true;
 80197de:	2301      	movs	r3, #1
 80197e0:	e000      	b.n	80197e4 <_ZN10MessageBus4sendEP16PacketDefinitionPh+0x78>
	}

	return false;
 80197e2:	2300      	movs	r3, #0
}
 80197e4:	4618      	mov	r0, r3
 80197e6:	3718      	adds	r7, #24
 80197e8:	46bd      	mov	sp, r7
 80197ea:	bd80      	pop	{r7, pc}

080197ec <_ZN10MessageBus7receiveEhPhm>:
 * Handles the reception of a message.
 *
 * Provided an external thread calls this method with a buffer to the next incoming message,
 * dispatches the message to the appropriate message handlers.
 */
void MessageBus::receive(uint8_t sender_id, uint8_t *pointer, uint32_t length) {
 80197ec:	b580      	push	{r7, lr}
 80197ee:	b088      	sub	sp, #32
 80197f0:	af00      	add	r7, sp, #0
 80197f2:	60f8      	str	r0, [r7, #12]
 80197f4:	607a      	str	r2, [r7, #4]
 80197f6:	603b      	str	r3, [r7, #0]
 80197f8:	460b      	mov	r3, r1
 80197fa:	72fb      	strb	r3, [r7, #11]
	if(length > 0) {
 80197fc:	683b      	ldr	r3, [r7, #0]
 80197fe:	2b00      	cmp	r3, #0
 8019800:	d075      	beq.n	80198ee <_ZN10MessageBus7receiveEhPhm+0x102>
		// Safe-cast verification
		uint8_t packet_id = *pointer++;
 8019802:	687b      	ldr	r3, [r7, #4]
 8019804:	1c5a      	adds	r2, r3, #1
 8019806:	607a      	str	r2, [r7, #4]
 8019808:	781b      	ldrb	r3, [r3, #0]
 801980a:	777b      	strb	r3, [r7, #29]

		PacketDefinition* def = &definitions_by_id[packet_id & 0b00111111];
 801980c:	7f7b      	ldrb	r3, [r7, #29]
 801980e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8019812:	00db      	lsls	r3, r3, #3
 8019814:	68fa      	ldr	r2, [r7, #12]
 8019816:	4413      	add	r3, r2
 8019818:	3304      	adds	r3, #4
 801981a:	61bb      	str	r3, [r7, #24]
		ReconstructionBuffer* indexable_buffer = &reconstruction_buffers[sender_id];
 801981c:	7afb      	ldrb	r3, [r7, #11]
 801981e:	3306      	adds	r3, #6
 8019820:	021b      	lsls	r3, r3, #8
 8019822:	68fa      	ldr	r2, [r7, #12]
 8019824:	4413      	add	r3, r2
 8019826:	3304      	adds	r3, #4
 8019828:	617b      	str	r3, [r7, #20]

		if(indexable_buffer->index + length > max_packet_size) {
 801982a:	697b      	ldr	r3, [r7, #20]
 801982c:	f893 30ff 	ldrb.w	r3, [r3, #255]	; 0xff
 8019830:	461a      	mov	r2, r3
 8019832:	683b      	ldr	r3, [r7, #0]
 8019834:	4413      	add	r3, r2
 8019836:	2bff      	cmp	r3, #255	; 0xff
 8019838:	d904      	bls.n	8019844 <_ZN10MessageBus7receiveEhPhm+0x58>
			indexable_buffer->index = 0; // Corrupted packet
 801983a:	697b      	ldr	r3, [r7, #20]
 801983c:	2200      	movs	r2, #0
 801983e:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
			return;
 8019842:	e054      	b.n	80198ee <_ZN10MessageBus7receiveEhPhm+0x102>
		}

		for(uint16_t i = 0; i < length - 1; i++) {
 8019844:	2300      	movs	r3, #0
 8019846:	83fb      	strh	r3, [r7, #30]
 8019848:	8bfa      	ldrh	r2, [r7, #30]
 801984a:	683b      	ldr	r3, [r7, #0]
 801984c:	3b01      	subs	r3, #1
 801984e:	429a      	cmp	r2, r3
 8019850:	d211      	bcs.n	8019876 <_ZN10MessageBus7receiveEhPhm+0x8a>
			indexable_buffer->buffer[indexable_buffer->index++] = *pointer++;
 8019852:	687b      	ldr	r3, [r7, #4]
 8019854:	1c5a      	adds	r2, r3, #1
 8019856:	607a      	str	r2, [r7, #4]
 8019858:	697a      	ldr	r2, [r7, #20]
 801985a:	f892 20ff 	ldrb.w	r2, [r2, #255]	; 0xff
 801985e:	1c51      	adds	r1, r2, #1
 8019860:	b2c8      	uxtb	r0, r1
 8019862:	6979      	ldr	r1, [r7, #20]
 8019864:	f881 00ff 	strb.w	r0, [r1, #255]	; 0xff
 8019868:	7819      	ldrb	r1, [r3, #0]
 801986a:	697b      	ldr	r3, [r7, #20]
 801986c:	5499      	strb	r1, [r3, r2]
		for(uint16_t i = 0; i < length - 1; i++) {
 801986e:	8bfb      	ldrh	r3, [r7, #30]
 8019870:	3301      	adds	r3, #1
 8019872:	83fb      	strh	r3, [r7, #30]
 8019874:	e7e8      	b.n	8019848 <_ZN10MessageBus7receiveEhPhm+0x5c>
		}

		if(indexable_buffer->index >= def->size) {
 8019876:	697b      	ldr	r3, [r7, #20]
 8019878:	f893 20ff 	ldrb.w	r2, [r3, #255]	; 0xff
 801987c:	69bb      	ldr	r3, [r7, #24]
 801987e:	785b      	ldrb	r3, [r3, #1]
 8019880:	429a      	cmp	r2, r3
 8019882:	d334      	bcc.n	80198ee <_ZN10MessageBus7receiveEhPhm+0x102>
			// Packet is complete. Forward buffer to handler.

			if(handlers[packet_id & 0b00111111] != nullptr) {
 8019884:	7f7b      	ldrb	r3, [r7, #29]
 8019886:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801988a:	68fa      	ldr	r2, [r7, #12]
 801988c:	f503 538c 	add.w	r3, r3, #4480	; 0x1180
 8019890:	009b      	lsls	r3, r3, #2
 8019892:	4413      	add	r3, r2
 8019894:	685b      	ldr	r3, [r3, #4]
 8019896:	2b00      	cmp	r3, #0
 8019898:	d00c      	beq.n	80198b4 <_ZN10MessageBus7receiveEhPhm+0xc8>
				handlers[packet_id & 0b00111111](sender_id, indexable_buffer->buffer);
 801989a:	7f7b      	ldrb	r3, [r7, #29]
 801989c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80198a0:	68fa      	ldr	r2, [r7, #12]
 80198a2:	f503 538c 	add.w	r3, r3, #4480	; 0x1180
 80198a6:	009b      	lsls	r3, r3, #2
 80198a8:	4413      	add	r3, r2
 80198aa:	685b      	ldr	r3, [r3, #4]
 80198ac:	6979      	ldr	r1, [r7, #20]
 80198ae:	7afa      	ldrb	r2, [r7, #11]
 80198b0:	4610      	mov	r0, r2
 80198b2:	4798      	blx	r3
			}

			if(forwarders[packet_id & 0b00111111] != nullptr) {
 80198b4:	7f7b      	ldrb	r3, [r7, #29]
 80198b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80198ba:	68fa      	ldr	r2, [r7, #12]
 80198bc:	f503 538e 	add.w	r3, r3, #4544	; 0x11c0
 80198c0:	009b      	lsls	r3, r3, #2
 80198c2:	4413      	add	r3, r2
 80198c4:	685b      	ldr	r3, [r3, #4]
 80198c6:	2b00      	cmp	r3, #0
 80198c8:	d00d      	beq.n	80198e6 <_ZN10MessageBus7receiveEhPhm+0xfa>
				forwarders[packet_id & 0b00111111]->send(def, indexable_buffer->buffer);
 80198ca:	7f7b      	ldrb	r3, [r7, #29]
 80198cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80198d0:	68fa      	ldr	r2, [r7, #12]
 80198d2:	f503 538e 	add.w	r3, r3, #4544	; 0x11c0
 80198d6:	009b      	lsls	r3, r3, #2
 80198d8:	4413      	add	r3, r2
 80198da:	685b      	ldr	r3, [r3, #4]
 80198dc:	697a      	ldr	r2, [r7, #20]
 80198de:	69b9      	ldr	r1, [r7, #24]
 80198e0:	4618      	mov	r0, r3
 80198e2:	f7ff ff43 	bl	801976c <_ZN10MessageBus4sendEP16PacketDefinitionPh>
			}

			indexable_buffer->index = 0;
 80198e6:	697b      	ldr	r3, [r7, #20]
 80198e8:	2200      	movs	r2, #0
 80198ea:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
		}
	}
}
 80198ee:	3720      	adds	r7, #32
 80198f0:	46bd      	mov	sp, r7
 80198f2:	bd80      	pop	{r7, pc}

080198f4 <_ZN10NetworkBusC1EP8IODriver>:


#include "NetworkBus.h"
#include "Protocol/Protocol.h"

NetworkBus::NetworkBus(IODriver* driver) : IOBus(driver, network_frame, sizeof(network_frame)) {
 80198f4:	b580      	push	{r7, lr}
 80198f6:	b082      	sub	sp, #8
 80198f8:	af00      	add	r7, sp, #0
 80198fa:	6078      	str	r0, [r7, #4]
 80198fc:	6039      	str	r1, [r7, #0]
 80198fe:	6878      	ldr	r0, [r7, #4]
 8019900:	687b      	ldr	r3, [r7, #4]
 8019902:	f644 0211 	movw	r2, #18449	; 0x4811
 8019906:	441a      	add	r2, r3
 8019908:	f44f 7380 	mov.w	r3, #256	; 0x100
 801990c:	6839      	ldr	r1, [r7, #0]
 801990e:	f7fe f897 	bl	8017a40 <_ZN5IOBusC1EP8IODriverPhm>
 8019912:	4a1d      	ldr	r2, [pc, #116]	; (8019988 <_ZN10NetworkBusC1EP8IODriver+0x94>)
 8019914:	687b      	ldr	r3, [r7, #4]
 8019916:	601a      	str	r2, [r3, #0]
	define<PingPacket>(0);
 8019918:	687b      	ldr	r3, [r7, #4]
 801991a:	2100      	movs	r1, #0
 801991c:	4618      	mov	r0, r3
 801991e:	f7ff fb79 	bl	8019014 <_ZN10MessageBus6defineI10PingPacketEEbh>
	define<ConnectPacket>(1);
 8019922:	687b      	ldr	r3, [r7, #4]
 8019924:	2101      	movs	r1, #1
 8019926:	4618      	mov	r0, r3
 8019928:	f7ff fbd2 	bl	80190d0 <_ZN10MessageBus6defineI13ConnectPacketEEbh>
	define<DisconnectPacket>(2);
 801992c:	687b      	ldr	r3, [r7, #4]
 801992e:	2102      	movs	r1, #2
 8019930:	4618      	mov	r0, r3
 8019932:	f7ff fc2b 	bl	801918c <_ZN10MessageBus6defineI16DisconnectPacketEEbh>
	define<RequestPacket>(3);
 8019936:	687b      	ldr	r3, [r7, #4]
 8019938:	2103      	movs	r1, #3
 801993a:	4618      	mov	r0, r3
 801993c:	f7ff fc84 	bl	8019248 <_ZN10MessageBus6defineI13RequestPacketEEbh>
	define<AcknowledgePacket>(4);
 8019940:	687b      	ldr	r3, [r7, #4]
 8019942:	2104      	movs	r1, #4
 8019944:	4618      	mov	r0, r3
 8019946:	f7ff fcdd 	bl	8019304 <_ZN10MessageBus6defineI17AcknowledgePacketEEbh>
	define<ResponsePacket>(5);
 801994a:	687b      	ldr	r3, [r7, #4]
 801994c:	2105      	movs	r1, #5
 801994e:	4618      	mov	r0, r3
 8019950:	f7ff fd36 	bl	80193c0 <_ZN10MessageBus6defineI14ResponsePacketEEbh>
	define<ProgressPacket>(6);
 8019954:	687b      	ldr	r3, [r7, #4]
 8019956:	2106      	movs	r1, #6
 8019958:	4618      	mov	r0, r3
 801995a:	f7ff fd8f 	bl	801947c <_ZN10MessageBus6defineI14ProgressPacketEEbh>
	define<DataPacket>(7);
 801995e:	687b      	ldr	r3, [r7, #4]
 8019960:	2107      	movs	r1, #7
 8019962:	4618      	mov	r0, r3
 8019964:	f7ff fde8 	bl	8019538 <_ZN10MessageBus6defineI10DataPacketEEbh>
	define<MessagePacket>(62);
 8019968:	687b      	ldr	r3, [r7, #4]
 801996a:	213e      	movs	r1, #62	; 0x3e
 801996c:	4618      	mov	r0, r3
 801996e:	f7ff fe41 	bl	80195f4 <_ZN10MessageBus6defineI13MessagePacketEEbh>
	define<ErrorPacket>(63);
 8019972:	687b      	ldr	r3, [r7, #4]
 8019974:	213f      	movs	r1, #63	; 0x3f
 8019976:	4618      	mov	r0, r3
 8019978:	f7ff fe9a 	bl	80196b0 <_ZN10MessageBus6defineI11ErrorPacketEEbh>
}
 801997c:	687b      	ldr	r3, [r7, #4]
 801997e:	4618      	mov	r0, r3
 8019980:	3708      	adds	r7, #8
 8019982:	46bd      	mov	sp, r7
 8019984:	bd80      	pop	{r7, pc}
 8019986:	bf00      	nop
 8019988:	08020504 	.word	0x08020504

0801998c <_ZN10NetworkBusD1Ev>:
#include "IOBus.h"

#define NETWORK_FRAME_SIZE 256


class NetworkBus : public IOBus {
 801998c:	b580      	push	{r7, lr}
 801998e:	b082      	sub	sp, #8
 8019990:	af00      	add	r7, sp, #0
 8019992:	6078      	str	r0, [r7, #4]
 8019994:	4a05      	ldr	r2, [pc, #20]	; (80199ac <_ZN10NetworkBusD1Ev+0x20>)
 8019996:	687b      	ldr	r3, [r7, #4]
 8019998:	601a      	str	r2, [r3, #0]
 801999a:	687b      	ldr	r3, [r7, #4]
 801999c:	4618      	mov	r0, r3
 801999e:	f7ff f8c1 	bl	8018b24 <_ZN5IOBusD1Ev>
 80199a2:	687b      	ldr	r3, [r7, #4]
 80199a4:	4618      	mov	r0, r3
 80199a6:	3708      	adds	r7, #8
 80199a8:	46bd      	mov	sp, r7
 80199aa:	bd80      	pop	{r7, pc}
 80199ac:	08020504 	.word	0x08020504

080199b0 <_ZN10NetworkBusD0Ev>:
 80199b0:	b580      	push	{r7, lr}
 80199b2:	b082      	sub	sp, #8
 80199b4:	af00      	add	r7, sp, #0
 80199b6:	6078      	str	r0, [r7, #4]
 80199b8:	6878      	ldr	r0, [r7, #4]
 80199ba:	f7ff ffe7 	bl	801998c <_ZN10NetworkBusD1Ev>
 80199be:	f644 1114 	movw	r1, #18708	; 0x4914
 80199c2:	6878      	ldr	r0, [r7, #4]
 80199c4:	f000 fb10 	bl	8019fe8 <_ZdlPvj>
 80199c8:	687b      	ldr	r3, [r7, #4]
 80199ca:	4618      	mov	r0, r3
 80199cc:	3708      	adds	r7, #8
 80199ce:	46bd      	mov	sp, r7
 80199d0:	bd80      	pop	{r7, pc}

080199d2 <_ZN14WatchdogThread4initEv>:
#include "iwdg.h"

#include "Debug/Debug.h"
#include "usart.h"

void WatchdogThread::init() {
 80199d2:	b480      	push	{r7}
 80199d4:	b083      	sub	sp, #12
 80199d6:	af00      	add	r7, sp, #0
 80199d8:	6078      	str	r0, [r7, #4]

}
 80199da:	bf00      	nop
 80199dc:	370c      	adds	r7, #12
 80199de:	46bd      	mov	sp, r7
 80199e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199e4:	4770      	bx	lr

080199e6 <_ZN14WatchdogThread4loopEv>:

void WatchdogThread::loop() {
 80199e6:	b580      	push	{r7, lr}
 80199e8:	b082      	sub	sp, #8
 80199ea:	af00      	add	r7, sp, #0
 80199ec:	6078      	str	r0, [r7, #4]
	HAL_IWDG_Refresh(watchdog_handle);
 80199ee:	687b      	ldr	r3, [r7, #4]
 80199f0:	68db      	ldr	r3, [r3, #12]
 80199f2:	4618      	mov	r0, r3
 80199f4:	f7ec f9e2 	bl	8005dbc <HAL_IWDG_Refresh>
	osDelay(100);
 80199f8:	2064      	movs	r0, #100	; 0x64
 80199fa:	f7f0 fee8 	bl	800a7ce <osDelay>
}
 80199fe:	bf00      	nop
 8019a00:	3708      	adds	r7, #8
 8019a02:	46bd      	mov	sp, r7
 8019a04:	bd80      	pop	{r7, pc}
	...

08019a08 <_ZN6ThreadD1Ev>:
public:
	Thread(const char* name);
	Thread(const char* name, osPriority priority);
	Thread(const char* name, uint32_t stackSize);
	Thread(const char* name, osPriority priority, uint32_t stackSize);
	~Thread() {};
 8019a08:	b480      	push	{r7}
 8019a0a:	b083      	sub	sp, #12
 8019a0c:	af00      	add	r7, sp, #0
 8019a0e:	6078      	str	r0, [r7, #4]
 8019a10:	4a04      	ldr	r2, [pc, #16]	; (8019a24 <_ZN6ThreadD1Ev+0x1c>)
 8019a12:	687b      	ldr	r3, [r7, #4]
 8019a14:	601a      	str	r2, [r3, #0]
 8019a16:	687b      	ldr	r3, [r7, #4]
 8019a18:	4618      	mov	r0, r3
 8019a1a:	370c      	adds	r7, #12
 8019a1c:	46bd      	mov	sp, r7
 8019a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a22:	4770      	bx	lr
 8019a24:	08020574 	.word	0x08020574

08019a28 <_ZN14WatchdogThreadC1EP18IWDG_HandleTypeDef>:

#include "../Thread.h"

class WatchdogThread : Thread {
public:
	WatchdogThread(IWDG_HandleTypeDef* hiwdg) : Thread("Watchdog"), watchdog_handle(hiwdg) {}
 8019a28:	b580      	push	{r7, lr}
 8019a2a:	b082      	sub	sp, #8
 8019a2c:	af00      	add	r7, sp, #0
 8019a2e:	6078      	str	r0, [r7, #4]
 8019a30:	6039      	str	r1, [r7, #0]
 8019a32:	687b      	ldr	r3, [r7, #4]
 8019a34:	4907      	ldr	r1, [pc, #28]	; (8019a54 <_ZN14WatchdogThreadC1EP18IWDG_HandleTypeDef+0x2c>)
 8019a36:	4618      	mov	r0, r3
 8019a38:	f000 f8d8 	bl	8019bec <_ZN6ThreadC1EPKc>
 8019a3c:	4a06      	ldr	r2, [pc, #24]	; (8019a58 <_ZN14WatchdogThreadC1EP18IWDG_HandleTypeDef+0x30>)
 8019a3e:	687b      	ldr	r3, [r7, #4]
 8019a40:	601a      	str	r2, [r3, #0]
 8019a42:	687b      	ldr	r3, [r7, #4]
 8019a44:	683a      	ldr	r2, [r7, #0]
 8019a46:	60da      	str	r2, [r3, #12]
 8019a48:	687b      	ldr	r3, [r7, #4]
 8019a4a:	4618      	mov	r0, r3
 8019a4c:	3708      	adds	r7, #8
 8019a4e:	46bd      	mov	sp, r7
 8019a50:	bd80      	pop	{r7, pc}
 8019a52:	bf00      	nop
 8019a54:	08020024 	.word	0x08020024
 8019a58:	08020538 	.word	0x08020538

08019a5c <_ZN14WatchdogThreadD1Ev>:
class WatchdogThread : Thread {
 8019a5c:	b580      	push	{r7, lr}
 8019a5e:	b082      	sub	sp, #8
 8019a60:	af00      	add	r7, sp, #0
 8019a62:	6078      	str	r0, [r7, #4]
 8019a64:	4a05      	ldr	r2, [pc, #20]	; (8019a7c <_ZN14WatchdogThreadD1Ev+0x20>)
 8019a66:	687b      	ldr	r3, [r7, #4]
 8019a68:	601a      	str	r2, [r3, #0]
 8019a6a:	687b      	ldr	r3, [r7, #4]
 8019a6c:	4618      	mov	r0, r3
 8019a6e:	f7ff ffcb 	bl	8019a08 <_ZN6ThreadD1Ev>
 8019a72:	687b      	ldr	r3, [r7, #4]
 8019a74:	4618      	mov	r0, r3
 8019a76:	3708      	adds	r7, #8
 8019a78:	46bd      	mov	sp, r7
 8019a7a:	bd80      	pop	{r7, pc}
 8019a7c:	08020538 	.word	0x08020538

08019a80 <__tcf_0>:
}
#endif

#ifdef CORE_CM7
void initCortexM7() {
	static WatchdogThread watchdog(&hiwdg1);
 8019a80:	b580      	push	{r7, lr}
 8019a82:	af00      	add	r7, sp, #0
 8019a84:	4801      	ldr	r0, [pc, #4]	; (8019a8c <__tcf_0+0xc>)
 8019a86:	f7ff ffe9 	bl	8019a5c <_ZN14WatchdogThreadD1Ev>
 8019a8a:	bd80      	pop	{r7, pc}
 8019a8c:	24004a6c 	.word	0x24004a6c

08019a90 <__tcf_1>:
	static LWIPThread lwip("localhost", 42666);
 8019a90:	b580      	push	{r7, lr}
 8019a92:	af00      	add	r7, sp, #0
 8019a94:	4801      	ldr	r0, [pc, #4]	; (8019a9c <__tcf_1+0xc>)
 8019a96:	f000 f97d 	bl	8019d94 <_ZN10LWIPThreadD1Ev>
 8019a9a:	bd80      	pop	{r7, pc}
 8019a9c:	24004a80 	.word	0x24004a80

08019aa0 <initCortexM7>:
void initCortexM7() {
 8019aa0:	b580      	push	{r7, lr}
 8019aa2:	af00      	add	r7, sp, #0
	static WatchdogThread watchdog(&hiwdg1);
 8019aa4:	4b24      	ldr	r3, [pc, #144]	; (8019b38 <initCortexM7+0x98>)
 8019aa6:	781b      	ldrb	r3, [r3, #0]
 8019aa8:	f3bf 8f5b 	dmb	ish
 8019aac:	b2db      	uxtb	r3, r3
 8019aae:	f003 0301 	and.w	r3, r3, #1
 8019ab2:	2b00      	cmp	r3, #0
 8019ab4:	bf0c      	ite	eq
 8019ab6:	2301      	moveq	r3, #1
 8019ab8:	2300      	movne	r3, #0
 8019aba:	b2db      	uxtb	r3, r3
 8019abc:	2b00      	cmp	r3, #0
 8019abe:	d014      	beq.n	8019aea <initCortexM7+0x4a>
 8019ac0:	481d      	ldr	r0, [pc, #116]	; (8019b38 <initCortexM7+0x98>)
 8019ac2:	f000 fa93 	bl	8019fec <__cxa_guard_acquire>
 8019ac6:	4603      	mov	r3, r0
 8019ac8:	2b00      	cmp	r3, #0
 8019aca:	bf14      	ite	ne
 8019acc:	2301      	movne	r3, #1
 8019ace:	2300      	moveq	r3, #0
 8019ad0:	b2db      	uxtb	r3, r3
 8019ad2:	2b00      	cmp	r3, #0
 8019ad4:	d009      	beq.n	8019aea <initCortexM7+0x4a>
 8019ad6:	4919      	ldr	r1, [pc, #100]	; (8019b3c <initCortexM7+0x9c>)
 8019ad8:	4819      	ldr	r0, [pc, #100]	; (8019b40 <initCortexM7+0xa0>)
 8019ada:	f7ff ffa5 	bl	8019a28 <_ZN14WatchdogThreadC1EP18IWDG_HandleTypeDef>
 8019ade:	4816      	ldr	r0, [pc, #88]	; (8019b38 <initCortexM7+0x98>)
 8019ae0:	f000 fa90 	bl	801a004 <__cxa_guard_release>
 8019ae4:	4817      	ldr	r0, [pc, #92]	; (8019b44 <initCortexM7+0xa4>)
 8019ae6:	f000 fe5b 	bl	801a7a0 <atexit>
	static LWIPThread lwip("localhost", 42666);
 8019aea:	4b17      	ldr	r3, [pc, #92]	; (8019b48 <initCortexM7+0xa8>)
 8019aec:	781b      	ldrb	r3, [r3, #0]
 8019aee:	f3bf 8f5b 	dmb	ish
 8019af2:	b2db      	uxtb	r3, r3
 8019af4:	f003 0301 	and.w	r3, r3, #1
 8019af8:	2b00      	cmp	r3, #0
 8019afa:	bf0c      	ite	eq
 8019afc:	2301      	moveq	r3, #1
 8019afe:	2300      	movne	r3, #0
 8019b00:	b2db      	uxtb	r3, r3
 8019b02:	2b00      	cmp	r3, #0
 8019b04:	d016      	beq.n	8019b34 <initCortexM7+0x94>
 8019b06:	4810      	ldr	r0, [pc, #64]	; (8019b48 <initCortexM7+0xa8>)
 8019b08:	f000 fa70 	bl	8019fec <__cxa_guard_acquire>
 8019b0c:	4603      	mov	r3, r0
 8019b0e:	2b00      	cmp	r3, #0
 8019b10:	bf14      	ite	ne
 8019b12:	2301      	movne	r3, #1
 8019b14:	2300      	moveq	r3, #0
 8019b16:	b2db      	uxtb	r3, r3
 8019b18:	2b00      	cmp	r3, #0
 8019b1a:	d00b      	beq.n	8019b34 <initCortexM7+0x94>
 8019b1c:	f24a 62aa 	movw	r2, #42666	; 0xa6aa
 8019b20:	490a      	ldr	r1, [pc, #40]	; (8019b4c <initCortexM7+0xac>)
 8019b22:	480b      	ldr	r0, [pc, #44]	; (8019b50 <initCortexM7+0xb0>)
 8019b24:	f000 f8f6 	bl	8019d14 <_ZN10LWIPThreadC1EPKct>
 8019b28:	4807      	ldr	r0, [pc, #28]	; (8019b48 <initCortexM7+0xa8>)
 8019b2a:	f000 fa6b 	bl	801a004 <__cxa_guard_release>
 8019b2e:	4809      	ldr	r0, [pc, #36]	; (8019b54 <initCortexM7+0xb4>)
 8019b30:	f000 fe36 	bl	801a7a0 <atexit>
}
 8019b34:	bf00      	nop
 8019b36:	bd80      	pop	{r7, pc}
 8019b38:	24004a7c 	.word	0x24004a7c
 8019b3c:	2400959c 	.word	0x2400959c
 8019b40:	24004a6c 	.word	0x24004a6c
 8019b44:	08019a81 	.word	0x08019a81
 8019b48:	24004a8c 	.word	0x24004a8c
 8019b4c:	08020030 	.word	0x08020030
 8019b50:	24004a80 	.word	0x24004a80
 8019b54:	08019a91 	.word	0x08019a91

08019b58 <_Z41__static_initialization_and_destruction_0ii>:


#include "Telemetry.h"

static BufferedIODriver telemetryDriver;
NetworkBus network(&telemetryDriver);
 8019b58:	b580      	push	{r7, lr}
 8019b5a:	b082      	sub	sp, #8
 8019b5c:	af00      	add	r7, sp, #0
 8019b5e:	6078      	str	r0, [r7, #4]
 8019b60:	6039      	str	r1, [r7, #0]
 8019b62:	687b      	ldr	r3, [r7, #4]
 8019b64:	2b01      	cmp	r3, #1
 8019b66:	d108      	bne.n	8019b7a <_Z41__static_initialization_and_destruction_0ii+0x22>
 8019b68:	683b      	ldr	r3, [r7, #0]
 8019b6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019b6e:	4293      	cmp	r3, r2
 8019b70:	d103      	bne.n	8019b7a <_Z41__static_initialization_and_destruction_0ii+0x22>
 8019b72:	490b      	ldr	r1, [pc, #44]	; (8019ba0 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8019b74:	480b      	ldr	r0, [pc, #44]	; (8019ba4 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8019b76:	f7ff febd 	bl	80198f4 <_ZN10NetworkBusC1EP8IODriver>
 8019b7a:	687b      	ldr	r3, [r7, #4]
 8019b7c:	2b00      	cmp	r3, #0
 8019b7e:	d10a      	bne.n	8019b96 <_Z41__static_initialization_and_destruction_0ii+0x3e>
 8019b80:	683b      	ldr	r3, [r7, #0]
 8019b82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019b86:	4293      	cmp	r3, r2
 8019b88:	d105      	bne.n	8019b96 <_Z41__static_initialization_and_destruction_0ii+0x3e>
 8019b8a:	4806      	ldr	r0, [pc, #24]	; (8019ba4 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8019b8c:	f7ff fefe 	bl	801998c <_ZN10NetworkBusD1Ev>
static BufferedIODriver telemetryDriver;
 8019b90:	4803      	ldr	r0, [pc, #12]	; (8019ba0 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8019b92:	f7fd febd 	bl	8017910 <_ZN16BufferedIODriverD1Ev>
NetworkBus network(&telemetryDriver);
 8019b96:	bf00      	nop
 8019b98:	3708      	adds	r7, #8
 8019b9a:	46bd      	mov	sp, r7
 8019b9c:	bd80      	pop	{r7, pc}
 8019b9e:	bf00      	nop
 8019ba0:	24000034 	.word	0x24000034
 8019ba4:	24004a90 	.word	0x24004a90

08019ba8 <_GLOBAL__sub_I_network>:
 8019ba8:	b580      	push	{r7, lr}
 8019baa:	af00      	add	r7, sp, #0
 8019bac:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8019bb0:	2001      	movs	r0, #1
 8019bb2:	f7ff ffd1 	bl	8019b58 <_Z41__static_initialization_and_destruction_0ii>
 8019bb6:	bd80      	pop	{r7, pc}

08019bb8 <_GLOBAL__sub_D_network>:
 8019bb8:	b580      	push	{r7, lr}
 8019bba:	af00      	add	r7, sp, #0
 8019bbc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8019bc0:	2000      	movs	r0, #0
 8019bc2:	f7ff ffc9 	bl	8019b58 <_Z41__static_initialization_and_destruction_0ii>
 8019bc6:	bd80      	pop	{r7, pc}

08019bc8 <_Z10__task_runPKv>:

#define DEFAULT_STACK_SIZE (512)

static char buffer[256];

void __task_run(const void* arg) {
 8019bc8:	b580      	push	{r7, lr}
 8019bca:	b084      	sub	sp, #16
 8019bcc:	af00      	add	r7, sp, #0
 8019bce:	6078      	str	r0, [r7, #4]
	Thread* thread = (Thread*) arg;
 8019bd0:	687b      	ldr	r3, [r7, #4]
 8019bd2:	60fb      	str	r3, [r7, #12]

	thread->init();
 8019bd4:	68fb      	ldr	r3, [r7, #12]
 8019bd6:	681b      	ldr	r3, [r3, #0]
 8019bd8:	681b      	ldr	r3, [r3, #0]
 8019bda:	68f8      	ldr	r0, [r7, #12]
 8019bdc:	4798      	blx	r3

	while(true) {
		thread->loop();
 8019bde:	68fb      	ldr	r3, [r7, #12]
 8019be0:	681b      	ldr	r3, [r3, #0]
 8019be2:	3304      	adds	r3, #4
 8019be4:	681b      	ldr	r3, [r3, #0]
 8019be6:	68f8      	ldr	r0, [r7, #12]
 8019be8:	4798      	blx	r3
 8019bea:	e7f8      	b.n	8019bde <_Z10__task_runPKv+0x16>

08019bec <_ZN6ThreadC1EPKc>:
	}
}

Thread::Thread(const char* name) : Thread(name, (osPriority) osPriorityNormal) {
 8019bec:	b580      	push	{r7, lr}
 8019bee:	b082      	sub	sp, #8
 8019bf0:	af00      	add	r7, sp, #0
 8019bf2:	6078      	str	r0, [r7, #4]
 8019bf4:	6039      	str	r1, [r7, #0]
 8019bf6:	2200      	movs	r2, #0
 8019bf8:	6839      	ldr	r1, [r7, #0]
 8019bfa:	6878      	ldr	r0, [r7, #4]
 8019bfc:	f000 f805 	bl	8019c0a <_ZN6ThreadC1EPKc10osPriority>
	;
}
 8019c00:	687b      	ldr	r3, [r7, #4]
 8019c02:	4618      	mov	r0, r3
 8019c04:	3708      	adds	r7, #8
 8019c06:	46bd      	mov	sp, r7
 8019c08:	bd80      	pop	{r7, pc}

08019c0a <_ZN6ThreadC1EPKc10osPriority>:

Thread::Thread(const char* name, osPriority priority) : Thread(name, priority, DEFAULT_STACK_SIZE) {
 8019c0a:	b580      	push	{r7, lr}
 8019c0c:	b084      	sub	sp, #16
 8019c0e:	af00      	add	r7, sp, #0
 8019c10:	60f8      	str	r0, [r7, #12]
 8019c12:	60b9      	str	r1, [r7, #8]
 8019c14:	4613      	mov	r3, r2
 8019c16:	80fb      	strh	r3, [r7, #6]
 8019c18:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8019c1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8019c20:	68b9      	ldr	r1, [r7, #8]
 8019c22:	68f8      	ldr	r0, [r7, #12]
 8019c24:	f000 f806 	bl	8019c34 <_ZN6ThreadC1EPKc10osPrioritym>
	;
}
 8019c28:	68fb      	ldr	r3, [r7, #12]
 8019c2a:	4618      	mov	r0, r3
 8019c2c:	3710      	adds	r7, #16
 8019c2e:	46bd      	mov	sp, r7
 8019c30:	bd80      	pop	{r7, pc}
	...

08019c34 <_ZN6ThreadC1EPKc10osPrioritym>:

Thread::Thread(const char* name, uint32_t stackSize) : Thread(name, (osPriority) osPriorityNormal, stackSize) {
	;
}

Thread::Thread(const char* name, osPriority priority, uint32_t stackSize) {
 8019c34:	b580      	push	{r7, lr}
 8019c36:	b08c      	sub	sp, #48	; 0x30
 8019c38:	af00      	add	r7, sp, #0
 8019c3a:	60f8      	str	r0, [r7, #12]
 8019c3c:	60b9      	str	r1, [r7, #8]
 8019c3e:	603b      	str	r3, [r7, #0]
 8019c40:	4613      	mov	r3, r2
 8019c42:	80fb      	strh	r3, [r7, #6]
 8019c44:	4a13      	ldr	r2, [pc, #76]	; (8019c94 <_ZN6ThreadC1EPKc10osPrioritym+0x60>)
 8019c46:	68fb      	ldr	r3, [r7, #12]
 8019c48:	601a      	str	r2, [r3, #0]
	osThreadDef(T, __task_run, priority, 0, stackSize);
 8019c4a:	f107 0314 	add.w	r3, r7, #20
 8019c4e:	2200      	movs	r2, #0
 8019c50:	601a      	str	r2, [r3, #0]
 8019c52:	605a      	str	r2, [r3, #4]
 8019c54:	609a      	str	r2, [r3, #8]
 8019c56:	60da      	str	r2, [r3, #12]
 8019c58:	611a      	str	r2, [r3, #16]
 8019c5a:	615a      	str	r2, [r3, #20]
 8019c5c:	619a      	str	r2, [r3, #24]
 8019c5e:	4b0e      	ldr	r3, [pc, #56]	; (8019c98 <_ZN6ThreadC1EPKc10osPrioritym+0x64>)
 8019c60:	617b      	str	r3, [r7, #20]
 8019c62:	4b0e      	ldr	r3, [pc, #56]	; (8019c9c <_ZN6ThreadC1EPKc10osPrioritym+0x68>)
 8019c64:	61bb      	str	r3, [r7, #24]
 8019c66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8019c6a:	83bb      	strh	r3, [r7, #28]
 8019c6c:	683b      	ldr	r3, [r7, #0]
 8019c6e:	627b      	str	r3, [r7, #36]	; 0x24
	this->handle = osThreadCreate(osThread(T), this);
 8019c70:	f107 0314 	add.w	r3, r7, #20
 8019c74:	68f9      	ldr	r1, [r7, #12]
 8019c76:	4618      	mov	r0, r3
 8019c78:	f7f0 fd5d 	bl	800a736 <osThreadCreate>
 8019c7c:	4602      	mov	r2, r0
 8019c7e:	68fb      	ldr	r3, [r7, #12]
 8019c80:	605a      	str	r2, [r3, #4]
	this->name = name;
 8019c82:	68fb      	ldr	r3, [r7, #12]
 8019c84:	68ba      	ldr	r2, [r7, #8]
 8019c86:	609a      	str	r2, [r3, #8]
}
 8019c88:	68fb      	ldr	r3, [r7, #12]
 8019c8a:	4618      	mov	r0, r3
 8019c8c:	3730      	adds	r7, #48	; 0x30
 8019c8e:	46bd      	mov	sp, r7
 8019c90:	bd80      	pop	{r7, pc}
 8019c92:	bf00      	nop
 8019c94:	08020574 	.word	0x08020574
 8019c98:	0802003c 	.word	0x0802003c
 8019c9c:	08019bc9 	.word	0x08019bc9

08019ca0 <_ZN6Thread7printlnEPKcz>:

void Thread::println(const char* format, ...) {
 8019ca0:	b40e      	push	{r1, r2, r3}
 8019ca2:	b580      	push	{r7, lr}
 8019ca4:	b085      	sub	sp, #20
 8019ca6:	af00      	add	r7, sp, #0
 8019ca8:	6078      	str	r0, [r7, #4]
	va_list args;
	va_start(args, format);
 8019caa:	f107 0320 	add.w	r3, r7, #32
 8019cae:	60fb      	str	r3, [r7, #12]

	sprintf(buffer, "[%s] ", name);
 8019cb0:	687b      	ldr	r3, [r7, #4]
 8019cb2:	689b      	ldr	r3, [r3, #8]
 8019cb4:	461a      	mov	r2, r3
 8019cb6:	4913      	ldr	r1, [pc, #76]	; (8019d04 <_ZN6Thread7printlnEPKcz+0x64>)
 8019cb8:	4813      	ldr	r0, [pc, #76]	; (8019d08 <_ZN6Thread7printlnEPKcz+0x68>)
 8019cba:	f001 fab1 	bl	801b220 <siprintf>
	vsprintf(buffer + strlen(buffer), format, args);
 8019cbe:	4812      	ldr	r0, [pc, #72]	; (8019d08 <_ZN6Thread7printlnEPKcz+0x68>)
 8019cc0:	f7e6 fb68 	bl	8000394 <strlen>
 8019cc4:	4602      	mov	r2, r0
 8019cc6:	4b10      	ldr	r3, [pc, #64]	; (8019d08 <_ZN6Thread7printlnEPKcz+0x68>)
 8019cc8:	4413      	add	r3, r2
 8019cca:	68fa      	ldr	r2, [r7, #12]
 8019ccc:	69f9      	ldr	r1, [r7, #28]
 8019cce:	4618      	mov	r0, r3
 8019cd0:	f001 fadc 	bl	801b28c <vsiprintf>
	strcat(buffer, "\r\n");
 8019cd4:	480c      	ldr	r0, [pc, #48]	; (8019d08 <_ZN6Thread7printlnEPKcz+0x68>)
 8019cd6:	f7e6 fb5d 	bl	8000394 <strlen>
 8019cda:	4603      	mov	r3, r0
 8019cdc:	461a      	mov	r2, r3
 8019cde:	4b0a      	ldr	r3, [pc, #40]	; (8019d08 <_ZN6Thread7printlnEPKcz+0x68>)
 8019ce0:	4413      	add	r3, r2
 8019ce2:	4a0a      	ldr	r2, [pc, #40]	; (8019d0c <_ZN6Thread7printlnEPKcz+0x6c>)
 8019ce4:	8811      	ldrh	r1, [r2, #0]
 8019ce6:	7892      	ldrb	r2, [r2, #2]
 8019ce8:	8019      	strh	r1, [r3, #0]
 8019cea:	709a      	strb	r2, [r3, #2]

	console.print(buffer);
 8019cec:	4906      	ldr	r1, [pc, #24]	; (8019d08 <_ZN6Thread7printlnEPKcz+0x68>)
 8019cee:	4808      	ldr	r0, [pc, #32]	; (8019d10 <_ZN6Thread7printlnEPKcz+0x70>)
 8019cf0:	f7fd fd65 	bl	80177be <_ZN7Console5printEPKc>

	va_end(args);
}
 8019cf4:	bf00      	nop
 8019cf6:	3714      	adds	r7, #20
 8019cf8:	46bd      	mov	sp, r7
 8019cfa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8019cfe:	b003      	add	sp, #12
 8019d00:	4770      	bx	lr
 8019d02:	bf00      	nop
 8019d04:	08020040 	.word	0x08020040
 8019d08:	240093a4 	.word	0x240093a4
 8019d0c:	08020048 	.word	0x08020048
 8019d10:	24004964 	.word	0x24004964

08019d14 <_ZN10LWIPThreadC1EPKct>:

static LWIPClientIO* client;
static struct netif gnetif; // global network interface
static void onStatusUpdate(struct netif *netif);

LWIPThread::LWIPThread(const char* ip, const uint16_t port) : Thread("Telemetry") {
 8019d14:	b5b0      	push	{r4, r5, r7, lr}
 8019d16:	b08c      	sub	sp, #48	; 0x30
 8019d18:	af00      	add	r7, sp, #0
 8019d1a:	60f8      	str	r0, [r7, #12]
 8019d1c:	60b9      	str	r1, [r7, #8]
 8019d1e:	4613      	mov	r3, r2
 8019d20:	80fb      	strh	r3, [r7, #6]
 8019d22:	68fb      	ldr	r3, [r7, #12]
 8019d24:	4918      	ldr	r1, [pc, #96]	; (8019d88 <_ZN10LWIPThreadC1EPKct+0x74>)
 8019d26:	4618      	mov	r0, r3
 8019d28:	f7ff ff60 	bl	8019bec <_ZN6ThreadC1EPKc>
 8019d2c:	4a17      	ldr	r2, [pc, #92]	; (8019d8c <_ZN10LWIPThreadC1EPKct+0x78>)
 8019d2e:	68fb      	ldr	r3, [r7, #12]
 8019d30:	601a      	str	r2, [r3, #0]
	client = new LWIPClientIO(ip, port);
 8019d32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8019d36:	4618      	mov	r0, r3
 8019d38:	f000 fc65 	bl	801a606 <_ZNSaIcEC1Ev>
 8019d3c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8019d40:	f107 0314 	add.w	r3, r7, #20
 8019d44:	68b9      	ldr	r1, [r7, #8]
 8019d46:	4618      	mov	r0, r3
 8019d48:	f000 fcf6 	bl	801a738 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8019d4c:	f107 0514 	add.w	r5, r7, #20
 8019d50:	2044      	movs	r0, #68	; 0x44
 8019d52:	f7fd fd8d 	bl	8017870 <_Znwj>
 8019d56:	4603      	mov	r3, r0
 8019d58:	461c      	mov	r4, r3
 8019d5a:	88fb      	ldrh	r3, [r7, #6]
 8019d5c:	461a      	mov	r2, r3
 8019d5e:	4629      	mov	r1, r5
 8019d60:	4620      	mov	r0, r4
 8019d62:	f7fe ff23 	bl	8018bac <_ZN12LWIPClientIOC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt>
 8019d66:	4b0a      	ldr	r3, [pc, #40]	; (8019d90 <_ZN10LWIPThreadC1EPKct+0x7c>)
 8019d68:	601c      	str	r4, [r3, #0]
 8019d6a:	f107 0314 	add.w	r3, r7, #20
 8019d6e:	4618      	mov	r0, r3
 8019d70:	f000 fc85 	bl	801a67e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8019d74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8019d78:	4618      	mov	r0, r3
 8019d7a:	f000 fc45 	bl	801a608 <_ZNSaIcED1Ev>
}
 8019d7e:	68fb      	ldr	r3, [r7, #12]
 8019d80:	4618      	mov	r0, r3
 8019d82:	3730      	adds	r7, #48	; 0x30
 8019d84:	46bd      	mov	sp, r7
 8019d86:	bdb0      	pop	{r4, r5, r7, pc}
 8019d88:	0802004c 	.word	0x0802004c
 8019d8c:	08020584 	.word	0x08020584
 8019d90:	240094a4 	.word	0x240094a4

08019d94 <_ZN10LWIPThreadD1Ev>:

LWIPThread::~LWIPThread() {
 8019d94:	b580      	push	{r7, lr}
 8019d96:	b082      	sub	sp, #8
 8019d98:	af00      	add	r7, sp, #0
 8019d9a:	6078      	str	r0, [r7, #4]
 8019d9c:	4a0c      	ldr	r2, [pc, #48]	; (8019dd0 <_ZN10LWIPThreadD1Ev+0x3c>)
 8019d9e:	687b      	ldr	r3, [r7, #4]
 8019da0:	601a      	str	r2, [r3, #0]
	delete client;
 8019da2:	4b0c      	ldr	r3, [pc, #48]	; (8019dd4 <_ZN10LWIPThreadD1Ev+0x40>)
 8019da4:	681b      	ldr	r3, [r3, #0]
 8019da6:	2b00      	cmp	r3, #0
 8019da8:	d008      	beq.n	8019dbc <_ZN10LWIPThreadD1Ev+0x28>
 8019daa:	4b0a      	ldr	r3, [pc, #40]	; (8019dd4 <_ZN10LWIPThreadD1Ev+0x40>)
 8019dac:	681a      	ldr	r2, [r3, #0]
 8019dae:	4b09      	ldr	r3, [pc, #36]	; (8019dd4 <_ZN10LWIPThreadD1Ev+0x40>)
 8019db0:	681b      	ldr	r3, [r3, #0]
 8019db2:	681b      	ldr	r3, [r3, #0]
 8019db4:	3304      	adds	r3, #4
 8019db6:	681b      	ldr	r3, [r3, #0]
 8019db8:	4610      	mov	r0, r2
 8019dba:	4798      	blx	r3
LWIPThread::~LWIPThread() {
 8019dbc:	687b      	ldr	r3, [r7, #4]
 8019dbe:	4618      	mov	r0, r3
 8019dc0:	f7ff fe22 	bl	8019a08 <_ZN6ThreadD1Ev>
}
 8019dc4:	687b      	ldr	r3, [r7, #4]
 8019dc6:	4618      	mov	r0, r3
 8019dc8:	3708      	adds	r7, #8
 8019dca:	46bd      	mov	sp, r7
 8019dcc:	bd80      	pop	{r7, pc}
 8019dce:	bf00      	nop
 8019dd0:	08020584 	.word	0x08020584
 8019dd4:	240094a4 	.word	0x240094a4

08019dd8 <_ZN10LWIPThread4initEv>:

void LWIPThread::init() {
 8019dd8:	b5b0      	push	{r4, r5, r7, lr}
 8019dda:	b090      	sub	sp, #64	; 0x40
 8019ddc:	af04      	add	r7, sp, #16
 8019dde:	6078      	str	r0, [r7, #4]
	osDelay(50); // Time to get the shell loaded by Cortex M4
 8019de0:	2032      	movs	r0, #50	; 0x32
 8019de2:	f7f0 fcf4 	bl	800a7ce <osDelay>

	println("Initializing LWIP...");
 8019de6:	687b      	ldr	r3, [r7, #4]
 8019de8:	491e      	ldr	r1, [pc, #120]	; (8019e64 <_ZN10LWIPThread4initEv+0x8c>)
 8019dea:	4618      	mov	r0, r3
 8019dec:	f7ff ff58 	bl	8019ca0 <_ZN6Thread7printlnEPKcz>

	tcpip_init(nullptr, nullptr);
 8019df0:	2100      	movs	r1, #0
 8019df2:	2000      	movs	r0, #0
 8019df4:	f7fd f902 	bl	8016ffc <tcpip_init>
	/* IP addresses initialization with DHCP (IPv4) */
	ip4_addr local_ip;
	ip4_addr netmask;
	ip4_addr gateway;

	IP4_ADDR(&local_ip, 192, 168, 0, 10);
 8019df8:	4b1b      	ldr	r3, [pc, #108]	; (8019e68 <_ZN10LWIPThread4initEv+0x90>)
 8019dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
	IP4_ADDR(&netmask, 255, 255, 255, 0);
 8019dfc:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8019e00:	62bb      	str	r3, [r7, #40]	; 0x28
	IP4_ADDR(&gateway, 192, 168, 0, 1);
 8019e02:	4b1a      	ldr	r3, [pc, #104]	; (8019e6c <_ZN10LWIPThread4initEv+0x94>)
 8019e04:	627b      	str	r3, [r7, #36]	; 0x24

	/* add the network interface (IPv4/IPv6) with RTOS */
	netif_add(&gnetif, &local_ip, &netmask, &gateway, NULL, &ethernetif_init, &tcpip_input);
 8019e06:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8019e0a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8019e0e:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8019e12:	4b17      	ldr	r3, [pc, #92]	; (8019e70 <_ZN10LWIPThread4initEv+0x98>)
 8019e14:	9302      	str	r3, [sp, #8]
 8019e16:	4b17      	ldr	r3, [pc, #92]	; (8019e74 <_ZN10LWIPThread4initEv+0x9c>)
 8019e18:	9301      	str	r3, [sp, #4]
 8019e1a:	2300      	movs	r3, #0
 8019e1c:	9300      	str	r3, [sp, #0]
 8019e1e:	4603      	mov	r3, r0
 8019e20:	4815      	ldr	r0, [pc, #84]	; (8019e78 <_ZN10LWIPThread4initEv+0xa0>)
 8019e22:	f7f6 fc41 	bl	80106a8 <netif_add>

	/* Registers the default network interface */
	netif_set_default(&gnetif);
 8019e26:	4814      	ldr	r0, [pc, #80]	; (8019e78 <_ZN10LWIPThread4initEv+0xa0>)
 8019e28:	f7f6 fdf0 	bl	8010a0c <netif_set_default>

	onStatusUpdate(&gnetif);
 8019e2c:	4812      	ldr	r0, [pc, #72]	; (8019e78 <_ZN10LWIPThread4initEv+0xa0>)
 8019e2e:	f000 f829 	bl	8019e84 <_ZL14onStatusUpdateP5netif>

	netif_set_link_callback(&gnetif, onStatusUpdate);
 8019e32:	4912      	ldr	r1, [pc, #72]	; (8019e7c <_ZN10LWIPThread4initEv+0xa4>)
 8019e34:	4810      	ldr	r0, [pc, #64]	; (8019e78 <_ZN10LWIPThread4initEv+0xa0>)
 8019e36:	f7f6 fefb 	bl	8010c30 <netif_set_link_callback>

	osThreadDef(EthLink, ethernet_link_thread, osPriorityNormal, 0, 1024);
 8019e3a:	4b11      	ldr	r3, [pc, #68]	; (8019e80 <_ZN10LWIPThread4initEv+0xa8>)
 8019e3c:	f107 0408 	add.w	r4, r7, #8
 8019e40:	461d      	mov	r5, r3
 8019e42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019e44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019e46:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8019e4a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	osThreadCreate(osThread(EthLink), &gnetif);
 8019e4e:	f107 0308 	add.w	r3, r7, #8
 8019e52:	4909      	ldr	r1, [pc, #36]	; (8019e78 <_ZN10LWIPThread4initEv+0xa0>)
 8019e54:	4618      	mov	r0, r3
 8019e56:	f7f0 fc6e 	bl	800a736 <osThreadCreate>
}
 8019e5a:	bf00      	nop
 8019e5c:	3730      	adds	r7, #48	; 0x30
 8019e5e:	46bd      	mov	sp, r7
 8019e60:	bdb0      	pop	{r4, r5, r7, pc}
 8019e62:	bf00      	nop
 8019e64:	08020058 	.word	0x08020058
 8019e68:	0a00a8c0 	.word	0x0a00a8c0
 8019e6c:	0100a8c0 	.word	0x0100a8c0
 8019e70:	08016f39 	.word	0x08016f39
 8019e74:	0800a481 	.word	0x0800a481
 8019e78:	240094a8 	.word	0x240094a8
 8019e7c:	08019e85 	.word	0x08019e85
 8019e80:	08020078 	.word	0x08020078

08019e84 <_ZL14onStatusUpdateP5netif>:

void onStatusUpdate(struct netif *netif) {
 8019e84:	b580      	push	{r7, lr}
 8019e86:	b082      	sub	sp, #8
 8019e88:	af00      	add	r7, sp, #0
 8019e8a:	6078      	str	r0, [r7, #4]
	if (netif_is_link_up(netif)) {
 8019e8c:	687b      	ldr	r3, [r7, #4]
 8019e8e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8019e92:	109b      	asrs	r3, r3, #2
 8019e94:	b2db      	uxtb	r3, r3
 8019e96:	f003 0301 	and.w	r3, r3, #1
 8019e9a:	2b00      	cmp	r3, #0
 8019e9c:	d009      	beq.n	8019eb2 <_ZL14onStatusUpdateP5netif+0x2e>
		/* When the netif is fully configured this function must be called */
		console.printf("[Telemetry] Link is up\r\n");
 8019e9e:	490d      	ldr	r1, [pc, #52]	; (8019ed4 <_ZL14onStatusUpdateP5netif+0x50>)
 8019ea0:	480d      	ldr	r0, [pc, #52]	; (8019ed8 <_ZL14onStatusUpdateP5netif+0x54>)
 8019ea2:	f7fd fc9e 	bl	80177e2 <_ZN7Console6printfEPKcz>
		client->connectClient();
 8019ea6:	4b0d      	ldr	r3, [pc, #52]	; (8019edc <_ZL14onStatusUpdateP5netif+0x58>)
 8019ea8:	681b      	ldr	r3, [r3, #0]
 8019eaa:	4618      	mov	r0, r3
 8019eac:	f7fe feee 	bl	8018c8c <_ZN12LWIPClientIO13connectClientEv>
		/* When the netif link is down this function must be called */
		netif_set_down(netif);
		console.printf("[Telemetry] Link is down\r\n");
		client->disconnectClient();
	}
}
 8019eb0:	e00c      	b.n	8019ecc <_ZL14onStatusUpdateP5netif+0x48>
		netif_set_down(netif);
 8019eb2:	687b      	ldr	r3, [r7, #4]
 8019eb4:	4618      	mov	r0, r3
 8019eb6:	f7f6 fe25 	bl	8010b04 <netif_set_down>
		console.printf("[Telemetry] Link is down\r\n");
 8019eba:	4909      	ldr	r1, [pc, #36]	; (8019ee0 <_ZL14onStatusUpdateP5netif+0x5c>)
 8019ebc:	4806      	ldr	r0, [pc, #24]	; (8019ed8 <_ZL14onStatusUpdateP5netif+0x54>)
 8019ebe:	f7fd fc90 	bl	80177e2 <_ZN7Console6printfEPKcz>
		client->disconnectClient();
 8019ec2:	4b06      	ldr	r3, [pc, #24]	; (8019edc <_ZL14onStatusUpdateP5netif+0x58>)
 8019ec4:	681b      	ldr	r3, [r3, #0]
 8019ec6:	4618      	mov	r0, r3
 8019ec8:	f7fe ff04 	bl	8018cd4 <_ZN12LWIPClientIO16disconnectClientEv>
}
 8019ecc:	bf00      	nop
 8019ece:	3708      	adds	r7, #8
 8019ed0:	46bd      	mov	sp, r7
 8019ed2:	bd80      	pop	{r7, pc}
 8019ed4:	08020094 	.word	0x08020094
 8019ed8:	24004964 	.word	0x24004964
 8019edc:	240094a4 	.word	0x240094a4
 8019ee0:	080200b0 	.word	0x080200b0

08019ee4 <_ZN10LWIPThread4loopEv>:

void LWIPThread::loop() {
 8019ee4:	b580      	push	{r7, lr}
 8019ee6:	b082      	sub	sp, #8
 8019ee8:	af00      	add	r7, sp, #0
 8019eea:	6078      	str	r0, [r7, #4]
	client->update(); // Handle reception
 8019eec:	4b04      	ldr	r3, [pc, #16]	; (8019f00 <_ZN10LWIPThread4loopEv+0x1c>)
 8019eee:	681b      	ldr	r3, [r3, #0]
 8019ef0:	4618      	mov	r0, r3
 8019ef2:	f7fe ff1d 	bl	8018d30 <_ZN12LWIPClientIO6updateEv>

}
 8019ef6:	bf00      	nop
 8019ef8:	3708      	adds	r7, #8
 8019efa:	46bd      	mov	sp, r7
 8019efc:	bd80      	pop	{r7, pc}
 8019efe:	bf00      	nop
 8019f00:	240094a4 	.word	0x240094a4

08019f04 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 8019f04:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8019f06:	2400      	movs	r4, #0
 8019f08:	2310      	movs	r3, #16
 8019f0a:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8019f0e:	6803      	ldr	r3, [r0, #0]
 8019f10:	9400      	str	r4, [sp, #0]
 8019f12:	4615      	mov	r5, r2
 8019f14:	699e      	ldr	r6, [r3, #24]
 8019f16:	f88d 4004 	strb.w	r4, [sp, #4]
 8019f1a:	466b      	mov	r3, sp
 8019f1c:	6812      	ldr	r2, [r2, #0]
 8019f1e:	47b0      	blx	r6
 8019f20:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8019f24:	f003 0306 	and.w	r3, r3, #6
 8019f28:	2b06      	cmp	r3, #6
 8019f2a:	bf03      	ittte	eq
 8019f2c:	9b00      	ldreq	r3, [sp, #0]
 8019f2e:	602b      	streq	r3, [r5, #0]
 8019f30:	2001      	moveq	r0, #1
 8019f32:	4620      	movne	r0, r4
 8019f34:	b004      	add	sp, #16
 8019f36:	bd70      	pop	{r4, r5, r6, pc}

08019f38 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 8019f38:	9800      	ldr	r0, [sp, #0]
 8019f3a:	4290      	cmp	r0, r2
 8019f3c:	bf0c      	ite	eq
 8019f3e:	2006      	moveq	r0, #6
 8019f40:	2001      	movne	r0, #1
 8019f42:	4770      	bx	lr

08019f44 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 8019f44:	b510      	push	{r4, lr}
 8019f46:	4b03      	ldr	r3, [pc, #12]	; (8019f54 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 8019f48:	6003      	str	r3, [r0, #0]
 8019f4a:	4604      	mov	r4, r0
 8019f4c:	f000 f915 	bl	801a17a <_ZNSt9type_infoD1Ev>
 8019f50:	4620      	mov	r0, r4
 8019f52:	bd10      	pop	{r4, pc}
 8019f54:	080205e0 	.word	0x080205e0

08019f58 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 8019f58:	b510      	push	{r4, lr}
 8019f5a:	4604      	mov	r4, r0
 8019f5c:	f7ff fff2 	bl	8019f44 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8019f60:	4620      	mov	r0, r4
 8019f62:	2108      	movs	r1, #8
 8019f64:	f000 f840 	bl	8019fe8 <_ZdlPvj>
 8019f68:	4620      	mov	r0, r4
 8019f6a:	bd10      	pop	{r4, pc}

08019f6c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 8019f6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019f70:	4698      	mov	r8, r3
 8019f72:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 8019f76:	9e06      	ldr	r6, [sp, #24]
 8019f78:	429e      	cmp	r6, r3
 8019f7a:	4607      	mov	r7, r0
 8019f7c:	4615      	mov	r5, r2
 8019f7e:	d107      	bne.n	8019f90 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x24>
 8019f80:	9907      	ldr	r1, [sp, #28]
 8019f82:	f000 f8fd 	bl	801a180 <_ZNKSt9type_infoeqERKS_>
 8019f86:	b118      	cbz	r0, 8019f90 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x24>
 8019f88:	7165      	strb	r5, [r4, #5]
 8019f8a:	2000      	movs	r0, #0
 8019f8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019f90:	4641      	mov	r1, r8
 8019f92:	4638      	mov	r0, r7
 8019f94:	f000 f8f4 	bl	801a180 <_ZNKSt9type_infoeqERKS_>
 8019f98:	2800      	cmp	r0, #0
 8019f9a:	d0f6      	beq.n	8019f8a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x1e>
 8019f9c:	2301      	movs	r3, #1
 8019f9e:	6026      	str	r6, [r4, #0]
 8019fa0:	7125      	strb	r5, [r4, #4]
 8019fa2:	71a3      	strb	r3, [r4, #6]
 8019fa4:	e7f1      	b.n	8019f8a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x1e>

08019fa6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 8019fa6:	b538      	push	{r3, r4, r5, lr}
 8019fa8:	4615      	mov	r5, r2
 8019faa:	461c      	mov	r4, r3
 8019fac:	f000 f8e8 	bl	801a180 <_ZNKSt9type_infoeqERKS_>
 8019fb0:	b120      	cbz	r0, 8019fbc <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 8019fb2:	2308      	movs	r3, #8
 8019fb4:	60e3      	str	r3, [r4, #12]
 8019fb6:	2306      	movs	r3, #6
 8019fb8:	6025      	str	r5, [r4, #0]
 8019fba:	7123      	strb	r3, [r4, #4]
 8019fbc:	bd38      	pop	{r3, r4, r5, pc}

08019fbe <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 8019fbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019fc2:	4605      	mov	r5, r0
 8019fc4:	460c      	mov	r4, r1
 8019fc6:	4616      	mov	r6, r2
 8019fc8:	461f      	mov	r7, r3
 8019fca:	f000 f8d9 	bl	801a180 <_ZNKSt9type_infoeqERKS_>
 8019fce:	b948      	cbnz	r0, 8019fe4 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8019fd0:	2f03      	cmp	r7, #3
 8019fd2:	d807      	bhi.n	8019fe4 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8019fd4:	6823      	ldr	r3, [r4, #0]
 8019fd6:	4632      	mov	r2, r6
 8019fd8:	4629      	mov	r1, r5
 8019fda:	4620      	mov	r0, r4
 8019fdc:	695b      	ldr	r3, [r3, #20]
 8019fde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019fe2:	4718      	bx	r3
 8019fe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019fe8 <_ZdlPvj>:
 8019fe8:	f7fd bc4e 	b.w	8017888 <_ZdlPv>

08019fec <__cxa_guard_acquire>:
 8019fec:	6803      	ldr	r3, [r0, #0]
 8019fee:	07db      	lsls	r3, r3, #31
 8019ff0:	d406      	bmi.n	801a000 <__cxa_guard_acquire+0x14>
 8019ff2:	7843      	ldrb	r3, [r0, #1]
 8019ff4:	b103      	cbz	r3, 8019ff8 <__cxa_guard_acquire+0xc>
 8019ff6:	deff      	udf	#255	; 0xff
 8019ff8:	2301      	movs	r3, #1
 8019ffa:	7043      	strb	r3, [r0, #1]
 8019ffc:	4618      	mov	r0, r3
 8019ffe:	4770      	bx	lr
 801a000:	2000      	movs	r0, #0
 801a002:	4770      	bx	lr

0801a004 <__cxa_guard_release>:
 801a004:	2301      	movs	r3, #1
 801a006:	6003      	str	r3, [r0, #0]
 801a008:	4770      	bx	lr
	...

0801a00c <_ZSt11_Hash_bytesPKvjj>:
 801a00c:	4b18      	ldr	r3, [pc, #96]	; (801a070 <_ZSt11_Hash_bytesPKvjj+0x64>)
 801a00e:	b570      	push	{r4, r5, r6, lr}
 801a010:	404a      	eors	r2, r1
 801a012:	460d      	mov	r5, r1
 801a014:	1846      	adds	r6, r0, r1
 801a016:	2d03      	cmp	r5, #3
 801a018:	eba6 0405 	sub.w	r4, r6, r5
 801a01c:	d908      	bls.n	801a030 <_ZSt11_Hash_bytesPKvjj+0x24>
 801a01e:	6824      	ldr	r4, [r4, #0]
 801a020:	435c      	muls	r4, r3
 801a022:	ea84 6414 	eor.w	r4, r4, r4, lsr #24
 801a026:	435a      	muls	r2, r3
 801a028:	435c      	muls	r4, r3
 801a02a:	4062      	eors	r2, r4
 801a02c:	3d04      	subs	r5, #4
 801a02e:	e7f2      	b.n	801a016 <_ZSt11_Hash_bytesPKvjj+0xa>
 801a030:	088d      	lsrs	r5, r1, #2
 801a032:	f06f 0403 	mvn.w	r4, #3
 801a036:	fb04 1105 	mla	r1, r4, r5, r1
 801a03a:	2902      	cmp	r1, #2
 801a03c:	eb00 0685 	add.w	r6, r0, r5, lsl #2
 801a040:	d011      	beq.n	801a066 <_ZSt11_Hash_bytesPKvjj+0x5a>
 801a042:	2903      	cmp	r1, #3
 801a044:	d00c      	beq.n	801a060 <_ZSt11_Hash_bytesPKvjj+0x54>
 801a046:	2901      	cmp	r1, #1
 801a048:	d103      	bne.n	801a052 <_ZSt11_Hash_bytesPKvjj+0x46>
 801a04a:	f810 0025 	ldrb.w	r0, [r0, r5, lsl #2]
 801a04e:	4042      	eors	r2, r0
 801a050:	435a      	muls	r2, r3
 801a052:	ea82 3252 	eor.w	r2, r2, r2, lsr #13
 801a056:	fb03 f002 	mul.w	r0, r3, r2
 801a05a:	ea80 30d0 	eor.w	r0, r0, r0, lsr #15
 801a05e:	bd70      	pop	{r4, r5, r6, pc}
 801a060:	78b1      	ldrb	r1, [r6, #2]
 801a062:	ea82 4201 	eor.w	r2, r2, r1, lsl #16
 801a066:	7871      	ldrb	r1, [r6, #1]
 801a068:	ea82 2201 	eor.w	r2, r2, r1, lsl #8
 801a06c:	e7ed      	b.n	801a04a <_ZSt11_Hash_bytesPKvjj+0x3e>
 801a06e:	bf00      	nop
 801a070:	5bd1e995 	.word	0x5bd1e995

0801a074 <__cxa_pure_virtual>:
 801a074:	b508      	push	{r3, lr}
 801a076:	f000 fb81 	bl	801a77c <_ZSt9terminatev>
	...

0801a07c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 801a07c:	b510      	push	{r4, lr}
 801a07e:	4b03      	ldr	r3, [pc, #12]	; (801a08c <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 801a080:	6003      	str	r3, [r0, #0]
 801a082:	4604      	mov	r4, r0
 801a084:	f7ff ff5e 	bl	8019f44 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 801a088:	4620      	mov	r0, r4
 801a08a:	bd10      	pop	{r4, pc}
 801a08c:	08020640 	.word	0x08020640

0801a090 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 801a090:	b510      	push	{r4, lr}
 801a092:	4604      	mov	r4, r0
 801a094:	f7ff fff2 	bl	801a07c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 801a098:	4620      	mov	r0, r4
 801a09a:	210c      	movs	r1, #12
 801a09c:	f7ff ffa4 	bl	8019fe8 <_ZdlPvj>
 801a0a0:	4620      	mov	r0, r4
 801a0a2:	bd10      	pop	{r4, pc}

0801a0a4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 801a0a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a0a8:	9e06      	ldr	r6, [sp, #24]
 801a0aa:	4296      	cmp	r6, r2
 801a0ac:	4607      	mov	r7, r0
 801a0ae:	4688      	mov	r8, r1
 801a0b0:	4615      	mov	r5, r2
 801a0b2:	461c      	mov	r4, r3
 801a0b4:	d00a      	beq.n	801a0cc <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x28>
 801a0b6:	68b8      	ldr	r0, [r7, #8]
 801a0b8:	6803      	ldr	r3, [r0, #0]
 801a0ba:	9606      	str	r6, [sp, #24]
 801a0bc:	6a1e      	ldr	r6, [r3, #32]
 801a0be:	462a      	mov	r2, r5
 801a0c0:	4623      	mov	r3, r4
 801a0c2:	4641      	mov	r1, r8
 801a0c4:	46b4      	mov	ip, r6
 801a0c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a0ca:	4760      	bx	ip
 801a0cc:	4619      	mov	r1, r3
 801a0ce:	f000 f857 	bl	801a180 <_ZNKSt9type_infoeqERKS_>
 801a0d2:	2800      	cmp	r0, #0
 801a0d4:	d0ef      	beq.n	801a0b6 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x12>
 801a0d6:	2006      	movs	r0, #6
 801a0d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a0dc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 801a0dc:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a0e0:	460e      	mov	r6, r1
 801a0e2:	4619      	mov	r1, r3
 801a0e4:	4683      	mov	fp, r0
 801a0e6:	4617      	mov	r7, r2
 801a0e8:	4699      	mov	r9, r3
 801a0ea:	e9dd 4a0a 	ldrd	r4, sl, [sp, #40]	; 0x28
 801a0ee:	e9dd 850c 	ldrd	r8, r5, [sp, #48]	; 0x30
 801a0f2:	f000 f845 	bl	801a180 <_ZNKSt9type_infoeqERKS_>
 801a0f6:	b190      	cbz	r0, 801a11e <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 801a0f8:	2e00      	cmp	r6, #0
 801a0fa:	602c      	str	r4, [r5, #0]
 801a0fc:	712f      	strb	r7, [r5, #4]
 801a0fe:	db09      	blt.n	801a114 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 801a100:	4434      	add	r4, r6
 801a102:	45a0      	cmp	r8, r4
 801a104:	bf0c      	ite	eq
 801a106:	2406      	moveq	r4, #6
 801a108:	2401      	movne	r4, #1
 801a10a:	71ac      	strb	r4, [r5, #6]
 801a10c:	2000      	movs	r0, #0
 801a10e:	b001      	add	sp, #4
 801a110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a114:	3602      	adds	r6, #2
 801a116:	d1f9      	bne.n	801a10c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 801a118:	2301      	movs	r3, #1
 801a11a:	71ab      	strb	r3, [r5, #6]
 801a11c:	e7f6      	b.n	801a10c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 801a11e:	4544      	cmp	r4, r8
 801a120:	d106      	bne.n	801a130 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 801a122:	4651      	mov	r1, sl
 801a124:	4658      	mov	r0, fp
 801a126:	f000 f82b 	bl	801a180 <_ZNKSt9type_infoeqERKS_>
 801a12a:	b108      	cbz	r0, 801a130 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 801a12c:	716f      	strb	r7, [r5, #5]
 801a12e:	e7ed      	b.n	801a10c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 801a130:	f8db 0008 	ldr.w	r0, [fp, #8]
 801a134:	6803      	ldr	r3, [r0, #0]
 801a136:	e9cd 850c 	strd	r8, r5, [sp, #48]	; 0x30
 801a13a:	e9cd 4a0a 	strd	r4, sl, [sp, #40]	; 0x28
 801a13e:	69dc      	ldr	r4, [r3, #28]
 801a140:	463a      	mov	r2, r7
 801a142:	464b      	mov	r3, r9
 801a144:	4631      	mov	r1, r6
 801a146:	46a4      	mov	ip, r4
 801a148:	b001      	add	sp, #4
 801a14a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a14e:	4760      	bx	ip

0801a150 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 801a150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a154:	4604      	mov	r4, r0
 801a156:	460d      	mov	r5, r1
 801a158:	4616      	mov	r6, r2
 801a15a:	461f      	mov	r7, r3
 801a15c:	f7ff ff23 	bl	8019fa6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 801a160:	b948      	cbnz	r0, 801a176 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 801a162:	68a0      	ldr	r0, [r4, #8]
 801a164:	6803      	ldr	r3, [r0, #0]
 801a166:	699c      	ldr	r4, [r3, #24]
 801a168:	4632      	mov	r2, r6
 801a16a:	463b      	mov	r3, r7
 801a16c:	4629      	mov	r1, r5
 801a16e:	46a4      	mov	ip, r4
 801a170:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a174:	4760      	bx	ip
 801a176:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a17a <_ZNSt9type_infoD1Ev>:
 801a17a:	4770      	bx	lr

0801a17c <_ZNKSt9type_info14__is_pointer_pEv>:
 801a17c:	2000      	movs	r0, #0
 801a17e:	4770      	bx	lr

0801a180 <_ZNKSt9type_infoeqERKS_>:
 801a180:	4281      	cmp	r1, r0
 801a182:	b508      	push	{r3, lr}
 801a184:	d00e      	beq.n	801a1a4 <_ZNKSt9type_infoeqERKS_+0x24>
 801a186:	6840      	ldr	r0, [r0, #4]
 801a188:	7803      	ldrb	r3, [r0, #0]
 801a18a:	2b2a      	cmp	r3, #42	; 0x2a
 801a18c:	d00c      	beq.n	801a1a8 <_ZNKSt9type_infoeqERKS_+0x28>
 801a18e:	6849      	ldr	r1, [r1, #4]
 801a190:	780b      	ldrb	r3, [r1, #0]
 801a192:	2b2a      	cmp	r3, #42	; 0x2a
 801a194:	bf08      	it	eq
 801a196:	3101      	addeq	r1, #1
 801a198:	f7e6 f8f2 	bl	8000380 <strcmp>
 801a19c:	fab0 f080 	clz	r0, r0
 801a1a0:	0940      	lsrs	r0, r0, #5
 801a1a2:	bd08      	pop	{r3, pc}
 801a1a4:	2001      	movs	r0, #1
 801a1a6:	e7fc      	b.n	801a1a2 <_ZNKSt9type_infoeqERKS_+0x22>
 801a1a8:	2000      	movs	r0, #0
 801a1aa:	e7fa      	b.n	801a1a2 <_ZNKSt9type_infoeqERKS_+0x22>

0801a1ac <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev>:
 801a1ac:	b510      	push	{r4, lr}
 801a1ae:	4b03      	ldr	r3, [pc, #12]	; (801a1bc <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev+0x10>)
 801a1b0:	6003      	str	r3, [r0, #0]
 801a1b2:	4604      	mov	r4, r0
 801a1b4:	f7ff fec6 	bl	8019f44 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 801a1b8:	4620      	mov	r0, r4
 801a1ba:	bd10      	pop	{r4, pc}
 801a1bc:	080206b8 	.word	0x080206b8

0801a1c0 <_ZN10__cxxabiv121__vmi_class_type_infoD0Ev>:
 801a1c0:	b510      	push	{r4, lr}
 801a1c2:	4604      	mov	r4, r0
 801a1c4:	f7ff fff2 	bl	801a1ac <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev>
 801a1c8:	4620      	mov	r0, r4
 801a1ca:	2118      	movs	r1, #24
 801a1cc:	f7ff ff0c 	bl	8019fe8 <_ZdlPvj>
 801a1d0:	4620      	mov	r0, r4
 801a1d2:	bd10      	pop	{r4, pc}

0801a1d4 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 801a1d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a1d8:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 801a1dc:	454a      	cmp	r2, r9
 801a1de:	4604      	mov	r4, r0
 801a1e0:	460f      	mov	r7, r1
 801a1e2:	4616      	mov	r6, r2
 801a1e4:	4698      	mov	r8, r3
 801a1e6:	d024      	beq.n	801a232 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x5e>
 801a1e8:	68e5      	ldr	r5, [r4, #12]
 801a1ea:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801a1ee:	b355      	cbz	r5, 801a246 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x72>
 801a1f0:	68e3      	ldr	r3, [r4, #12]
 801a1f2:	079a      	lsls	r2, r3, #30
 801a1f4:	d524      	bpl.n	801a240 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x6c>
 801a1f6:	f013 0a01 	ands.w	sl, r3, #1
 801a1fa:	ea4f 2223 	mov.w	r2, r3, asr #8
 801a1fe:	d003      	beq.n	801a208 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x34>
 801a200:	1cfb      	adds	r3, r7, #3
 801a202:	d01d      	beq.n	801a240 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x6c>
 801a204:	6833      	ldr	r3, [r6, #0]
 801a206:	589a      	ldr	r2, [r3, r2]
 801a208:	68a0      	ldr	r0, [r4, #8]
 801a20a:	6803      	ldr	r3, [r0, #0]
 801a20c:	f8cd 9000 	str.w	r9, [sp]
 801a210:	f8d3 b020 	ldr.w	fp, [r3, #32]
 801a214:	4432      	add	r2, r6
 801a216:	4643      	mov	r3, r8
 801a218:	4639      	mov	r1, r7
 801a21a:	47d8      	blx	fp
 801a21c:	2803      	cmp	r0, #3
 801a21e:	d90f      	bls.n	801a240 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x6c>
 801a220:	f1ba 0f00 	cmp.w	sl, #0
 801a224:	d002      	beq.n	801a22c <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x58>
 801a226:	f040 0001 	orr.w	r0, r0, #1
 801a22a:	b2c0      	uxtb	r0, r0
 801a22c:	b003      	add	sp, #12
 801a22e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a232:	4619      	mov	r1, r3
 801a234:	f7ff ffa4 	bl	801a180 <_ZNKSt9type_infoeqERKS_>
 801a238:	2800      	cmp	r0, #0
 801a23a:	d0d5      	beq.n	801a1e8 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x14>
 801a23c:	2006      	movs	r0, #6
 801a23e:	e7f5      	b.n	801a22c <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x58>
 801a240:	3d01      	subs	r5, #1
 801a242:	3c08      	subs	r4, #8
 801a244:	e7d3      	b.n	801a1ee <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x1a>
 801a246:	2001      	movs	r0, #1
 801a248:	e7f0      	b.n	801a22c <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x58>

0801a24a <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_>:
 801a24a:	b4f0      	push	{r4, r5, r6, r7}
 801a24c:	1e0e      	subs	r6, r1, #0
 801a24e:	9c04      	ldr	r4, [sp, #16]
 801a250:	db06      	blt.n	801a260 <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_+0x16>
 801a252:	1990      	adds	r0, r2, r6
 801a254:	4284      	cmp	r4, r0
 801a256:	bf14      	ite	ne
 801a258:	2001      	movne	r0, #1
 801a25a:	2006      	moveq	r0, #6
 801a25c:	bcf0      	pop	{r4, r5, r6, r7}
 801a25e:	4770      	bx	lr
 801a260:	3602      	adds	r6, #2
 801a262:	d004      	beq.n	801a26e <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_+0x24>
 801a264:	6804      	ldr	r4, [r0, #0]
 801a266:	6a24      	ldr	r4, [r4, #32]
 801a268:	46a4      	mov	ip, r4
 801a26a:	bcf0      	pop	{r4, r5, r6, r7}
 801a26c:	4760      	bx	ip
 801a26e:	2001      	movs	r0, #1
 801a270:	e7f4      	b.n	801a25c <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_+0x12>

0801a272 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 801a272:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a276:	b091      	sub	sp, #68	; 0x44
 801a278:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a27c:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 801a27e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801a280:	68a3      	ldr	r3, [r4, #8]
 801a282:	06dd      	lsls	r5, r3, #27
 801a284:	bf44      	itt	mi
 801a286:	6883      	ldrmi	r3, [r0, #8]
 801a288:	60a3      	strmi	r3, [r4, #8]
 801a28a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801a28c:	4293      	cmp	r3, r2
 801a28e:	4681      	mov	r9, r0
 801a290:	4688      	mov	r8, r1
 801a292:	d107      	bne.n	801a2a4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x32>
 801a294:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801a296:	f7ff ff73 	bl	801a180 <_ZNKSt9type_infoeqERKS_>
 801a29a:	b118      	cbz	r0, 801a2a4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x32>
 801a29c:	9b05      	ldr	r3, [sp, #20]
 801a29e:	7163      	strb	r3, [r4, #5]
 801a2a0:	2600      	movs	r6, #0
 801a2a2:	e0fa      	b.n	801a49a <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x228>
 801a2a4:	9906      	ldr	r1, [sp, #24]
 801a2a6:	4648      	mov	r0, r9
 801a2a8:	f7ff ff6a 	bl	801a180 <_ZNKSt9type_infoeqERKS_>
 801a2ac:	4682      	mov	sl, r0
 801a2ae:	b1c0      	cbz	r0, 801a2e2 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x70>
 801a2b0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801a2b2:	6023      	str	r3, [r4, #0]
 801a2b4:	f1b8 0f00 	cmp.w	r8, #0
 801a2b8:	9b05      	ldr	r3, [sp, #20]
 801a2ba:	7123      	strb	r3, [r4, #4]
 801a2bc:	db0b      	blt.n	801a2d6 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x64>
 801a2be:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801a2c0:	4498      	add	r8, r3
 801a2c2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801a2c4:	4543      	cmp	r3, r8
 801a2c6:	bf14      	ite	ne
 801a2c8:	f04f 0801 	movne.w	r8, #1
 801a2cc:	f04f 0806 	moveq.w	r8, #6
 801a2d0:	f884 8006 	strb.w	r8, [r4, #6]
 801a2d4:	e7e4      	b.n	801a2a0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2e>
 801a2d6:	f118 0f02 	cmn.w	r8, #2
 801a2da:	d1e1      	bne.n	801a2a0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2e>
 801a2dc:	2301      	movs	r3, #1
 801a2de:	71a3      	strb	r3, [r4, #6]
 801a2e0:	e7de      	b.n	801a2a0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2e>
 801a2e2:	f1b8 0f00 	cmp.w	r8, #0
 801a2e6:	bfaa      	itet	ge
 801a2e8:	9b1c      	ldrge	r3, [sp, #112]	; 0x70
 801a2ea:	f8cd a01c 	strlt.w	sl, [sp, #28]
 801a2ee:	eba3 0308 	subge.w	r3, r3, r8
 801a2f2:	f04f 0600 	mov.w	r6, #0
 801a2f6:	bfa8      	it	ge
 801a2f8:	9307      	strge	r3, [sp, #28]
 801a2fa:	2302      	movs	r3, #2
 801a2fc:	e9cd 6309 	strd	r6, r3, [sp, #36]	; 0x24
 801a300:	2301      	movs	r3, #1
 801a302:	9308      	str	r3, [sp, #32]
 801a304:	9b05      	ldr	r3, [sp, #20]
 801a306:	f043 0301 	orr.w	r3, r3, #1
 801a30a:	46b3      	mov	fp, r6
 801a30c:	930b      	str	r3, [sp, #44]	; 0x2c
 801a30e:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801a312:	9304      	str	r3, [sp, #16]
 801a314:	9b04      	ldr	r3, [sp, #16]
 801a316:	2b00      	cmp	r3, #0
 801a318:	f000 80d9 	beq.w	801a4ce <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x25c>
 801a31c:	eb09 05c3 	add.w	r5, r9, r3, lsl #3
 801a320:	68a7      	ldr	r7, [r4, #8]
 801a322:	68e9      	ldr	r1, [r5, #12]
 801a324:	970f      	str	r7, [sp, #60]	; 0x3c
 801a326:	07c8      	lsls	r0, r1, #31
 801a328:	bf48      	it	mi
 801a32a:	981a      	ldrmi	r0, [sp, #104]	; 0x68
 801a32c:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 801a330:	ea4f 2321 	mov.w	r3, r1, asr #8
 801a334:	bf48      	it	mi
 801a336:	6800      	ldrmi	r0, [r0, #0]
 801a338:	f88d b038 	strb.w	fp, [sp, #56]	; 0x38
 801a33c:	bf48      	it	mi
 801a33e:	58c3      	ldrmi	r3, [r0, r3]
 801a340:	981a      	ldr	r0, [sp, #104]	; 0x68
 801a342:	f88d b039 	strb.w	fp, [sp, #57]	; 0x39
 801a346:	4403      	add	r3, r0
 801a348:	9807      	ldr	r0, [sp, #28]
 801a34a:	f88d b03a 	strb.w	fp, [sp, #58]	; 0x3a
 801a34e:	bf4c      	ite	mi
 801a350:	9a0b      	ldrmi	r2, [sp, #44]	; 0x2c
 801a352:	9a05      	ldrpl	r2, [sp, #20]
 801a354:	b148      	cbz	r0, 801a36a <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xf8>
 801a356:	4298      	cmp	r0, r3
 801a358:	9808      	ldr	r0, [sp, #32]
 801a35a:	bf2c      	ite	cs
 801a35c:	f04f 0c00 	movcs.w	ip, #0
 801a360:	f04f 0c01 	movcc.w	ip, #1
 801a364:	4584      	cmp	ip, r0
 801a366:	f000 80ae 	beq.w	801a4c6 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x254>
 801a36a:	0789      	lsls	r1, r1, #30
 801a36c:	d407      	bmi.n	801a37e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x10c>
 801a36e:	f118 0f02 	cmn.w	r8, #2
 801a372:	d102      	bne.n	801a37a <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x108>
 801a374:	07bf      	lsls	r7, r7, #30
 801a376:	f000 80a8 	beq.w	801a4ca <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x258>
 801a37a:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
 801a37e:	68a8      	ldr	r0, [r5, #8]
 801a380:	ad0d      	add	r5, sp, #52	; 0x34
 801a382:	6801      	ldr	r1, [r0, #0]
 801a384:	9503      	str	r5, [sp, #12]
 801a386:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 801a388:	9502      	str	r5, [sp, #8]
 801a38a:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 801a38c:	e9cd 3500 	strd	r3, r5, [sp]
 801a390:	9b06      	ldr	r3, [sp, #24]
 801a392:	69cd      	ldr	r5, [r1, #28]
 801a394:	4641      	mov	r1, r8
 801a396:	47a8      	blx	r5
 801a398:	7963      	ldrb	r3, [r4, #5]
 801a39a:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 801a39e:	f89d 503a 	ldrb.w	r5, [sp, #58]	; 0x3a
 801a3a2:	990d      	ldr	r1, [sp, #52]	; 0x34
 801a3a4:	4313      	orrs	r3, r2
 801a3a6:	2d06      	cmp	r5, #6
 801a3a8:	7163      	strb	r3, [r4, #5]
 801a3aa:	d001      	beq.n	801a3b0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x13e>
 801a3ac:	2d02      	cmp	r5, #2
 801a3ae:	d106      	bne.n	801a3be <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x14c>
 801a3b0:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 801a3b4:	6021      	str	r1, [r4, #0]
 801a3b6:	7123      	strb	r3, [r4, #4]
 801a3b8:	71a5      	strb	r5, [r4, #6]
 801a3ba:	4682      	mov	sl, r0
 801a3bc:	e06c      	b.n	801a498 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x226>
 801a3be:	6822      	ldr	r2, [r4, #0]
 801a3c0:	b996      	cbnz	r6, 801a3e8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x176>
 801a3c2:	b99a      	cbnz	r2, 801a3ec <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x17a>
 801a3c4:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 801a3c8:	6021      	str	r1, [r4, #0]
 801a3ca:	7122      	strb	r2, [r4, #4]
 801a3cc:	b121      	cbz	r1, 801a3d8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x166>
 801a3ce:	b11b      	cbz	r3, 801a3d8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x166>
 801a3d0:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801a3d4:	07dd      	lsls	r5, r3, #31
 801a3d6:	d5f0      	bpl.n	801a3ba <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x148>
 801a3d8:	7963      	ldrb	r3, [r4, #5]
 801a3da:	2b04      	cmp	r3, #4
 801a3dc:	d0ed      	beq.n	801a3ba <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x148>
 801a3de:	9b04      	ldr	r3, [sp, #16]
 801a3e0:	3b01      	subs	r3, #1
 801a3e2:	9304      	str	r3, [sp, #16]
 801a3e4:	4606      	mov	r6, r0
 801a3e6:	e795      	b.n	801a314 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xa2>
 801a3e8:	2a00      	cmp	r2, #0
 801a3ea:	d037      	beq.n	801a45c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1ea>
 801a3ec:	4291      	cmp	r1, r2
 801a3ee:	d106      	bne.n	801a3fe <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x18c>
 801a3f0:	7923      	ldrb	r3, [r4, #4]
 801a3f2:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 801a3f6:	4313      	orrs	r3, r2
 801a3f8:	7123      	strb	r3, [r4, #4]
 801a3fa:	4630      	mov	r0, r6
 801a3fc:	e7ec      	b.n	801a3d8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x166>
 801a3fe:	b909      	cbnz	r1, 801a404 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x192>
 801a400:	2800      	cmp	r0, #0
 801a402:	d0fa      	beq.n	801a3fa <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x188>
 801a404:	2b03      	cmp	r3, #3
 801a406:	79a7      	ldrb	r7, [r4, #6]
 801a408:	d904      	bls.n	801a414 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1a2>
 801a40a:	07d8      	lsls	r0, r3, #31
 801a40c:	d529      	bpl.n	801a462 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1f0>
 801a40e:	68a3      	ldr	r3, [r4, #8]
 801a410:	0799      	lsls	r1, r3, #30
 801a412:	d526      	bpl.n	801a462 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1f0>
 801a414:	b97f      	cbnz	r7, 801a436 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1c4>
 801a416:	2d03      	cmp	r5, #3
 801a418:	d905      	bls.n	801a426 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1b4>
 801a41a:	07eb      	lsls	r3, r5, #31
 801a41c:	d541      	bpl.n	801a4a2 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x230>
 801a41e:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801a422:	079f      	lsls	r7, r3, #30
 801a424:	d53d      	bpl.n	801a4a2 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x230>
 801a426:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801a428:	9300      	str	r3, [sp, #0]
 801a42a:	4641      	mov	r1, r8
 801a42c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801a42e:	9806      	ldr	r0, [sp, #24]
 801a430:	f7ff ff0b 	bl	801a24a <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_>
 801a434:	4607      	mov	r7, r0
 801a436:	b9d5      	cbnz	r5, 801a46e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1fc>
 801a438:	2f03      	cmp	r7, #3
 801a43a:	d905      	bls.n	801a448 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1d6>
 801a43c:	07f8      	lsls	r0, r7, #31
 801a43e:	d532      	bpl.n	801a4a6 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x234>
 801a440:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801a444:	0799      	lsls	r1, r3, #30
 801a446:	d52e      	bpl.n	801a4a6 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x234>
 801a448:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801a44a:	9300      	str	r3, [sp, #0]
 801a44c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a44e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801a450:	9806      	ldr	r0, [sp, #24]
 801a452:	4641      	mov	r1, r8
 801a454:	f7ff fef9 	bl	801a24a <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_>
 801a458:	4605      	mov	r5, r0
 801a45a:	e008      	b.n	801a46e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1fc>
 801a45c:	2900      	cmp	r1, #0
 801a45e:	d1d1      	bne.n	801a404 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x192>
 801a460:	e7cb      	b.n	801a3fa <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x188>
 801a462:	2f00      	cmp	r7, #0
 801a464:	bf08      	it	eq
 801a466:	2701      	moveq	r7, #1
 801a468:	2d00      	cmp	r5, #0
 801a46a:	bf08      	it	eq
 801a46c:	2501      	moveq	r5, #1
 801a46e:	ea85 0307 	eor.w	r3, r5, r7
 801a472:	b2db      	uxtb	r3, r3
 801a474:	2b03      	cmp	r3, #3
 801a476:	d918      	bls.n	801a4aa <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x238>
 801a478:	2d03      	cmp	r5, #3
 801a47a:	bf81      	itttt	hi
 801a47c:	9b0d      	ldrhi	r3, [sp, #52]	; 0x34
 801a47e:	6023      	strhi	r3, [r4, #0]
 801a480:	462f      	movhi	r7, r5
 801a482:	f89d 3038 	ldrbhi.w	r3, [sp, #56]	; 0x38
 801a486:	bf86      	itte	hi
 801a488:	7123      	strbhi	r3, [r4, #4]
 801a48a:	2000      	movhi	r0, #0
 801a48c:	4630      	movls	r0, r6
 801a48e:	07ba      	lsls	r2, r7, #30
 801a490:	71a7      	strb	r7, [r4, #6]
 801a492:	d401      	bmi.n	801a498 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x226>
 801a494:	07fb      	lsls	r3, r7, #31
 801a496:	d49f      	bmi.n	801a3d8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x166>
 801a498:	4656      	mov	r6, sl
 801a49a:	4630      	mov	r0, r6
 801a49c:	b011      	add	sp, #68	; 0x44
 801a49e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a4a2:	2701      	movs	r7, #1
 801a4a4:	e7e3      	b.n	801a46e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1fc>
 801a4a6:	2501      	movs	r5, #1
 801a4a8:	e7e1      	b.n	801a46e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1fc>
 801a4aa:	403d      	ands	r5, r7
 801a4ac:	b2ed      	uxtb	r5, r5
 801a4ae:	2d03      	cmp	r5, #3
 801a4b0:	f8c4 b000 	str.w	fp, [r4]
 801a4b4:	d904      	bls.n	801a4c0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x24e>
 801a4b6:	2302      	movs	r3, #2
 801a4b8:	71a3      	strb	r3, [r4, #6]
 801a4ba:	f04f 0a01 	mov.w	sl, #1
 801a4be:	e7eb      	b.n	801a498 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x226>
 801a4c0:	2001      	movs	r0, #1
 801a4c2:	71a0      	strb	r0, [r4, #6]
 801a4c4:	e788      	b.n	801a3d8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x166>
 801a4c6:	2301      	movs	r3, #1
 801a4c8:	9309      	str	r3, [sp, #36]	; 0x24
 801a4ca:	4630      	mov	r0, r6
 801a4cc:	e787      	b.n	801a3de <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x16c>
 801a4ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a4d0:	2b00      	cmp	r3, #0
 801a4d2:	d0e2      	beq.n	801a49a <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x228>
 801a4d4:	9b04      	ldr	r3, [sp, #16]
 801a4d6:	9308      	str	r3, [sp, #32]
 801a4d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a4da:	2b01      	cmp	r3, #1
 801a4dc:	d0dd      	beq.n	801a49a <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x228>
 801a4de:	2301      	movs	r3, #1
 801a4e0:	930a      	str	r3, [sp, #40]	; 0x28
 801a4e2:	e714      	b.n	801a30e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x9c>

0801a4e4 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 801a4e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a4e8:	b089      	sub	sp, #36	; 0x24
 801a4ea:	4607      	mov	r7, r0
 801a4ec:	9102      	str	r1, [sp, #8]
 801a4ee:	4692      	mov	sl, r2
 801a4f0:	461c      	mov	r4, r3
 801a4f2:	f7ff fd58 	bl	8019fa6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 801a4f6:	4605      	mov	r5, r0
 801a4f8:	2800      	cmp	r0, #0
 801a4fa:	d159      	bne.n	801a5b0 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xcc>
 801a4fc:	f8d4 8008 	ldr.w	r8, [r4, #8]
 801a500:	f8d7 900c 	ldr.w	r9, [r7, #12]
 801a504:	f018 0f10 	tst.w	r8, #16
 801a508:	bf18      	it	ne
 801a50a:	f8d7 8008 	ldrne.w	r8, [r7, #8]
 801a50e:	f008 0301 	and.w	r3, r8, #1
 801a512:	eb07 06c9 	add.w	r6, r7, r9, lsl #3
 801a516:	f04f 0b00 	mov.w	fp, #0
 801a51a:	9303      	str	r3, [sp, #12]
 801a51c:	f1b9 0f00 	cmp.w	r9, #0
 801a520:	d06c      	beq.n	801a5fc <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x118>
 801a522:	68f2      	ldr	r2, [r6, #12]
 801a524:	f8cd b010 	str.w	fp, [sp, #16]
 801a528:	f002 0301 	and.w	r3, r2, #1
 801a52c:	9300      	str	r3, [sp, #0]
 801a52e:	f012 0302 	ands.w	r3, r2, #2
 801a532:	f88d b014 	strb.w	fp, [sp, #20]
 801a536:	e9cd 8b06 	strd	r8, fp, [sp, #24]
 801a53a:	9301      	str	r3, [sp, #4]
 801a53c:	d105      	bne.n	801a54a <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x66>
 801a53e:	9b03      	ldr	r3, [sp, #12]
 801a540:	b91b      	cbnz	r3, 801a54a <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x66>
 801a542:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 801a546:	3e08      	subs	r6, #8
 801a548:	e7e8      	b.n	801a51c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x38>
 801a54a:	f1ba 0f00 	cmp.w	sl, #0
 801a54e:	d033      	beq.n	801a5b8 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xd4>
 801a550:	9b00      	ldr	r3, [sp, #0]
 801a552:	1212      	asrs	r2, r2, #8
 801a554:	b113      	cbz	r3, 801a55c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x78>
 801a556:	f8da 3000 	ldr.w	r3, [sl]
 801a55a:	589a      	ldr	r2, [r3, r2]
 801a55c:	4452      	add	r2, sl
 801a55e:	68b0      	ldr	r0, [r6, #8]
 801a560:	9902      	ldr	r1, [sp, #8]
 801a562:	6803      	ldr	r3, [r0, #0]
 801a564:	699d      	ldr	r5, [r3, #24]
 801a566:	ab04      	add	r3, sp, #16
 801a568:	47a8      	blx	r5
 801a56a:	4605      	mov	r5, r0
 801a56c:	2800      	cmp	r0, #0
 801a56e:	d0e8      	beq.n	801a542 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x5e>
 801a570:	9b07      	ldr	r3, [sp, #28]
 801a572:	2b08      	cmp	r3, #8
 801a574:	d103      	bne.n	801a57e <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x9a>
 801a576:	9b00      	ldr	r3, [sp, #0]
 801a578:	b10b      	cbz	r3, 801a57e <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x9a>
 801a57a:	68b3      	ldr	r3, [r6, #8]
 801a57c:	9307      	str	r3, [sp, #28]
 801a57e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801a582:	2b03      	cmp	r3, #3
 801a584:	d905      	bls.n	801a592 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xae>
 801a586:	9a01      	ldr	r2, [sp, #4]
 801a588:	b91a      	cbnz	r2, 801a592 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xae>
 801a58a:	f023 0302 	bic.w	r3, r3, #2
 801a58e:	f88d 3014 	strb.w	r3, [sp, #20]
 801a592:	68e1      	ldr	r1, [r4, #12]
 801a594:	b9c1      	cbnz	r1, 801a5c8 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xe4>
 801a596:	ab04      	add	r3, sp, #16
 801a598:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801a59a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801a59e:	7923      	ldrb	r3, [r4, #4]
 801a5a0:	2b03      	cmp	r3, #3
 801a5a2:	d905      	bls.n	801a5b0 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xcc>
 801a5a4:	079a      	lsls	r2, r3, #30
 801a5a6:	d509      	bpl.n	801a5bc <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xd8>
 801a5a8:	68bb      	ldr	r3, [r7, #8]
 801a5aa:	f013 0f01 	tst.w	r3, #1
 801a5ae:	d1c8      	bne.n	801a542 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x5e>
 801a5b0:	4628      	mov	r0, r5
 801a5b2:	b009      	add	sp, #36	; 0x24
 801a5b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a5b8:	4652      	mov	r2, sl
 801a5ba:	e7d0      	b.n	801a55e <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x7a>
 801a5bc:	07db      	lsls	r3, r3, #31
 801a5be:	d5f7      	bpl.n	801a5b0 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xcc>
 801a5c0:	68bb      	ldr	r3, [r7, #8]
 801a5c2:	f013 0f02 	tst.w	r3, #2
 801a5c6:	e7f2      	b.n	801a5ae <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xca>
 801a5c8:	6823      	ldr	r3, [r4, #0]
 801a5ca:	9a04      	ldr	r2, [sp, #16]
 801a5cc:	4293      	cmp	r3, r2
 801a5ce:	d004      	beq.n	801a5da <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xf6>
 801a5d0:	2300      	movs	r3, #0
 801a5d2:	6023      	str	r3, [r4, #0]
 801a5d4:	2302      	movs	r3, #2
 801a5d6:	7123      	strb	r3, [r4, #4]
 801a5d8:	e7ea      	b.n	801a5b0 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xcc>
 801a5da:	b12b      	cbz	r3, 801a5e8 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x104>
 801a5dc:	7923      	ldrb	r3, [r4, #4]
 801a5de:	f89d 2014 	ldrb.w	r2, [sp, #20]
 801a5e2:	4313      	orrs	r3, r2
 801a5e4:	7123      	strb	r3, [r4, #4]
 801a5e6:	e7ac      	b.n	801a542 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x5e>
 801a5e8:	9807      	ldr	r0, [sp, #28]
 801a5ea:	2808      	cmp	r0, #8
 801a5ec:	d0f2      	beq.n	801a5d4 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xf0>
 801a5ee:	2908      	cmp	r1, #8
 801a5f0:	d0f0      	beq.n	801a5d4 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xf0>
 801a5f2:	f7ff fdc5 	bl	801a180 <_ZNKSt9type_infoeqERKS_>
 801a5f6:	2800      	cmp	r0, #0
 801a5f8:	d1f0      	bne.n	801a5dc <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xf8>
 801a5fa:	e7eb      	b.n	801a5d4 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xf0>
 801a5fc:	7925      	ldrb	r5, [r4, #4]
 801a5fe:	3500      	adds	r5, #0
 801a600:	bf18      	it	ne
 801a602:	2501      	movne	r5, #1
 801a604:	e7d4      	b.n	801a5b0 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xcc>

0801a606 <_ZNSaIcEC1Ev>:
 801a606:	4770      	bx	lr

0801a608 <_ZNSaIcED1Ev>:
 801a608:	4770      	bx	lr

0801a60a <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 801a60a:	b10a      	cbz	r2, 801a610 <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 801a60c:	f000 b913 	b.w	801a836 <memcpy>
 801a610:	4770      	bx	lr
	...

0801a614 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 801a614:	b508      	push	{r3, lr}
 801a616:	680b      	ldr	r3, [r1, #0]
 801a618:	2b00      	cmp	r3, #0
 801a61a:	da02      	bge.n	801a622 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0xe>
 801a61c:	4809      	ldr	r0, [pc, #36]	; (801a644 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x30>)
 801a61e:	f000 f8b5 	bl	801a78c <_ZSt20__throw_length_errorPKc>
 801a622:	4293      	cmp	r3, r2
 801a624:	d908      	bls.n	801a638 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 801a626:	0052      	lsls	r2, r2, #1
 801a628:	4293      	cmp	r3, r2
 801a62a:	d205      	bcs.n	801a638 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 801a62c:	2a00      	cmp	r2, #0
 801a62e:	bfb6      	itet	lt
 801a630:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 801a634:	600a      	strge	r2, [r1, #0]
 801a636:	600b      	strlt	r3, [r1, #0]
 801a638:	6808      	ldr	r0, [r1, #0]
 801a63a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801a63e:	3001      	adds	r0, #1
 801a640:	f7fd b916 	b.w	8017870 <_Znwj>
 801a644:	08020709 	.word	0x08020709

0801a648 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 801a648:	4603      	mov	r3, r0
 801a64a:	f853 0b08 	ldr.w	r0, [r3], #8
 801a64e:	4298      	cmp	r0, r3
 801a650:	d001      	beq.n	801a656 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 801a652:	f7fd b919 	b.w	8017888 <_ZdlPv>
 801a656:	4770      	bx	lr

0801a658 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 801a658:	2a01      	cmp	r2, #1
 801a65a:	b510      	push	{r4, lr}
 801a65c:	d102      	bne.n	801a664 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 801a65e:	780a      	ldrb	r2, [r1, #0]
 801a660:	7002      	strb	r2, [r0, #0]
 801a662:	bd10      	pop	{r4, pc}
 801a664:	f7ff ffd1 	bl	801a60a <_ZNSt11char_traitsIcE4copyEPcPKcj>
 801a668:	e7fb      	b.n	801a662 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

0801a66a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 801a66a:	b508      	push	{r3, lr}
 801a66c:	1a52      	subs	r2, r2, r1
 801a66e:	f7ff fff3 	bl	801a658 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801a672:	bd08      	pop	{r3, pc}

0801a674 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 801a674:	b508      	push	{r3, lr}
 801a676:	1a52      	subs	r2, r2, r1
 801a678:	f7ff ffee 	bl	801a658 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801a67c:	bd08      	pop	{r3, pc}

0801a67e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 801a67e:	b510      	push	{r4, lr}
 801a680:	4604      	mov	r4, r0
 801a682:	f7ff ffe1 	bl	801a648 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 801a686:	4620      	mov	r0, r4
 801a688:	bd10      	pop	{r4, pc}
	...

0801a68c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
 801a68c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a68e:	4604      	mov	r4, r0
 801a690:	4616      	mov	r6, r2
 801a692:	460d      	mov	r5, r1
 801a694:	b919      	cbnz	r1, 801a69e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 801a696:	b112      	cbz	r2, 801a69e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 801a698:	480d      	ldr	r0, [pc, #52]	; (801a6d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x44>)
 801a69a:	f000 f874 	bl	801a786 <_ZSt19__throw_logic_errorPKc>
 801a69e:	1b73      	subs	r3, r6, r5
 801a6a0:	2b0f      	cmp	r3, #15
 801a6a2:	9301      	str	r3, [sp, #4]
 801a6a4:	d907      	bls.n	801a6b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x2a>
 801a6a6:	2200      	movs	r2, #0
 801a6a8:	a901      	add	r1, sp, #4
 801a6aa:	4620      	mov	r0, r4
 801a6ac:	f7ff ffb2 	bl	801a614 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 801a6b0:	9b01      	ldr	r3, [sp, #4]
 801a6b2:	6020      	str	r0, [r4, #0]
 801a6b4:	60a3      	str	r3, [r4, #8]
 801a6b6:	4632      	mov	r2, r6
 801a6b8:	4629      	mov	r1, r5
 801a6ba:	6820      	ldr	r0, [r4, #0]
 801a6bc:	f7ff ffd5 	bl	801a66a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
 801a6c0:	9b01      	ldr	r3, [sp, #4]
 801a6c2:	6822      	ldr	r2, [r4, #0]
 801a6c4:	6063      	str	r3, [r4, #4]
 801a6c6:	2100      	movs	r1, #0
 801a6c8:	54d1      	strb	r1, [r2, r3]
 801a6ca:	b002      	add	sp, #8
 801a6cc:	bd70      	pop	{r4, r5, r6, pc}
 801a6ce:	bf00      	nop
 801a6d0:	080206df 	.word	0x080206df

0801a6d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 801a6d4:	b510      	push	{r4, lr}
 801a6d6:	f100 0208 	add.w	r2, r0, #8
 801a6da:	6002      	str	r2, [r0, #0]
 801a6dc:	e9d1 1200 	ldrd	r1, r2, [r1]
 801a6e0:	4604      	mov	r4, r0
 801a6e2:	f04f 0300 	mov.w	r3, #0
 801a6e6:	440a      	add	r2, r1
 801a6e8:	f7ff ffd0 	bl	801a68c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 801a6ec:	4620      	mov	r0, r4
 801a6ee:	bd10      	pop	{r4, pc}

0801a6f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 801a6f0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a6f2:	4604      	mov	r4, r0
 801a6f4:	4616      	mov	r6, r2
 801a6f6:	460d      	mov	r5, r1
 801a6f8:	b919      	cbnz	r1, 801a702 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 801a6fa:	b112      	cbz	r2, 801a702 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 801a6fc:	480d      	ldr	r0, [pc, #52]	; (801a734 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 801a6fe:	f000 f842 	bl	801a786 <_ZSt19__throw_logic_errorPKc>
 801a702:	1b73      	subs	r3, r6, r5
 801a704:	2b0f      	cmp	r3, #15
 801a706:	9301      	str	r3, [sp, #4]
 801a708:	d907      	bls.n	801a71a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 801a70a:	2200      	movs	r2, #0
 801a70c:	a901      	add	r1, sp, #4
 801a70e:	4620      	mov	r0, r4
 801a710:	f7ff ff80 	bl	801a614 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 801a714:	9b01      	ldr	r3, [sp, #4]
 801a716:	6020      	str	r0, [r4, #0]
 801a718:	60a3      	str	r3, [r4, #8]
 801a71a:	4632      	mov	r2, r6
 801a71c:	4629      	mov	r1, r5
 801a71e:	6820      	ldr	r0, [r4, #0]
 801a720:	f7ff ffa8 	bl	801a674 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 801a724:	9b01      	ldr	r3, [sp, #4]
 801a726:	6822      	ldr	r2, [r4, #0]
 801a728:	6063      	str	r3, [r4, #4]
 801a72a:	2100      	movs	r1, #0
 801a72c:	54d1      	strb	r1, [r2, r3]
 801a72e:	b002      	add	sp, #8
 801a730:	bd70      	pop	{r4, r5, r6, pc}
 801a732:	bf00      	nop
 801a734:	080206df 	.word	0x080206df

0801a738 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 801a738:	b538      	push	{r3, r4, r5, lr}
 801a73a:	f100 0308 	add.w	r3, r0, #8
 801a73e:	4604      	mov	r4, r0
 801a740:	6003      	str	r3, [r0, #0]
 801a742:	460d      	mov	r5, r1
 801a744:	b159      	cbz	r1, 801a75e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 801a746:	4608      	mov	r0, r1
 801a748:	f7e5 fe24 	bl	8000394 <strlen>
 801a74c:	182a      	adds	r2, r5, r0
 801a74e:	4620      	mov	r0, r4
 801a750:	f04f 0300 	mov.w	r3, #0
 801a754:	4629      	mov	r1, r5
 801a756:	f7ff ffcb 	bl	801a6f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 801a75a:	4620      	mov	r0, r4
 801a75c:	bd38      	pop	{r3, r4, r5, pc}
 801a75e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801a762:	e7f4      	b.n	801a74e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

0801a764 <_ZN10__cxxabiv111__terminateEPFvvE>:
 801a764:	b508      	push	{r3, lr}
 801a766:	4780      	blx	r0
 801a768:	f000 f813 	bl	801a792 <abort>

0801a76c <_ZSt13get_terminatev>:
 801a76c:	4b02      	ldr	r3, [pc, #8]	; (801a778 <_ZSt13get_terminatev+0xc>)
 801a76e:	6818      	ldr	r0, [r3, #0]
 801a770:	f3bf 8f5b 	dmb	ish
 801a774:	4770      	bx	lr
 801a776:	bf00      	nop
 801a778:	24000038 	.word	0x24000038

0801a77c <_ZSt9terminatev>:
 801a77c:	b508      	push	{r3, lr}
 801a77e:	f7ff fff5 	bl	801a76c <_ZSt13get_terminatev>
 801a782:	f7ff ffef 	bl	801a764 <_ZN10__cxxabiv111__terminateEPFvvE>

0801a786 <_ZSt19__throw_logic_errorPKc>:
 801a786:	b508      	push	{r3, lr}
 801a788:	f000 f803 	bl	801a792 <abort>

0801a78c <_ZSt20__throw_length_errorPKc>:
 801a78c:	b508      	push	{r3, lr}
 801a78e:	f000 f800 	bl	801a792 <abort>

0801a792 <abort>:
 801a792:	b508      	push	{r3, lr}
 801a794:	2006      	movs	r0, #6
 801a796:	f000 fd27 	bl	801b1e8 <raise>
 801a79a:	2001      	movs	r0, #1
 801a79c:	f7e6 fcbc 	bl	8001118 <_exit>

0801a7a0 <atexit>:
 801a7a0:	2300      	movs	r3, #0
 801a7a2:	4601      	mov	r1, r0
 801a7a4:	461a      	mov	r2, r3
 801a7a6:	4618      	mov	r0, r3
 801a7a8:	f000 be48 	b.w	801b43c <__register_exitproc>

0801a7ac <__libc_init_array>:
 801a7ac:	b570      	push	{r4, r5, r6, lr}
 801a7ae:	4e0d      	ldr	r6, [pc, #52]	; (801a7e4 <__libc_init_array+0x38>)
 801a7b0:	4c0d      	ldr	r4, [pc, #52]	; (801a7e8 <__libc_init_array+0x3c>)
 801a7b2:	1ba4      	subs	r4, r4, r6
 801a7b4:	10a4      	asrs	r4, r4, #2
 801a7b6:	2500      	movs	r5, #0
 801a7b8:	42a5      	cmp	r5, r4
 801a7ba:	d109      	bne.n	801a7d0 <__libc_init_array+0x24>
 801a7bc:	4e0b      	ldr	r6, [pc, #44]	; (801a7ec <__libc_init_array+0x40>)
 801a7be:	4c0c      	ldr	r4, [pc, #48]	; (801a7f0 <__libc_init_array+0x44>)
 801a7c0:	f002 fd7e 	bl	801d2c0 <_init>
 801a7c4:	1ba4      	subs	r4, r4, r6
 801a7c6:	10a4      	asrs	r4, r4, #2
 801a7c8:	2500      	movs	r5, #0
 801a7ca:	42a5      	cmp	r5, r4
 801a7cc:	d105      	bne.n	801a7da <__libc_init_array+0x2e>
 801a7ce:	bd70      	pop	{r4, r5, r6, pc}
 801a7d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801a7d4:	4798      	blx	r3
 801a7d6:	3501      	adds	r5, #1
 801a7d8:	e7ee      	b.n	801a7b8 <__libc_init_array+0xc>
 801a7da:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801a7de:	4798      	blx	r3
 801a7e0:	3501      	adds	r5, #1
 801a7e2:	e7f2      	b.n	801a7ca <__libc_init_array+0x1e>
 801a7e4:	080209f0 	.word	0x080209f0
 801a7e8:	080209f0 	.word	0x080209f0
 801a7ec:	080209f0 	.word	0x080209f0
 801a7f0:	080209fc 	.word	0x080209fc

0801a7f4 <__ascii_mbtowc>:
 801a7f4:	b082      	sub	sp, #8
 801a7f6:	b901      	cbnz	r1, 801a7fa <__ascii_mbtowc+0x6>
 801a7f8:	a901      	add	r1, sp, #4
 801a7fa:	b142      	cbz	r2, 801a80e <__ascii_mbtowc+0x1a>
 801a7fc:	b14b      	cbz	r3, 801a812 <__ascii_mbtowc+0x1e>
 801a7fe:	7813      	ldrb	r3, [r2, #0]
 801a800:	600b      	str	r3, [r1, #0]
 801a802:	7812      	ldrb	r2, [r2, #0]
 801a804:	1c10      	adds	r0, r2, #0
 801a806:	bf18      	it	ne
 801a808:	2001      	movne	r0, #1
 801a80a:	b002      	add	sp, #8
 801a80c:	4770      	bx	lr
 801a80e:	4610      	mov	r0, r2
 801a810:	e7fb      	b.n	801a80a <__ascii_mbtowc+0x16>
 801a812:	f06f 0001 	mvn.w	r0, #1
 801a816:	e7f8      	b.n	801a80a <__ascii_mbtowc+0x16>

0801a818 <memcmp>:
 801a818:	b530      	push	{r4, r5, lr}
 801a81a:	2400      	movs	r4, #0
 801a81c:	42a2      	cmp	r2, r4
 801a81e:	d101      	bne.n	801a824 <memcmp+0xc>
 801a820:	2000      	movs	r0, #0
 801a822:	e007      	b.n	801a834 <memcmp+0x1c>
 801a824:	5d03      	ldrb	r3, [r0, r4]
 801a826:	3401      	adds	r4, #1
 801a828:	190d      	adds	r5, r1, r4
 801a82a:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 801a82e:	42ab      	cmp	r3, r5
 801a830:	d0f4      	beq.n	801a81c <memcmp+0x4>
 801a832:	1b58      	subs	r0, r3, r5
 801a834:	bd30      	pop	{r4, r5, pc}

0801a836 <memcpy>:
 801a836:	b510      	push	{r4, lr}
 801a838:	1e43      	subs	r3, r0, #1
 801a83a:	440a      	add	r2, r1
 801a83c:	4291      	cmp	r1, r2
 801a83e:	d100      	bne.n	801a842 <memcpy+0xc>
 801a840:	bd10      	pop	{r4, pc}
 801a842:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a846:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a84a:	e7f7      	b.n	801a83c <memcpy+0x6>

0801a84c <memmove>:
 801a84c:	4288      	cmp	r0, r1
 801a84e:	b510      	push	{r4, lr}
 801a850:	eb01 0302 	add.w	r3, r1, r2
 801a854:	d807      	bhi.n	801a866 <memmove+0x1a>
 801a856:	1e42      	subs	r2, r0, #1
 801a858:	4299      	cmp	r1, r3
 801a85a:	d00a      	beq.n	801a872 <memmove+0x26>
 801a85c:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a860:	f802 4f01 	strb.w	r4, [r2, #1]!
 801a864:	e7f8      	b.n	801a858 <memmove+0xc>
 801a866:	4283      	cmp	r3, r0
 801a868:	d9f5      	bls.n	801a856 <memmove+0xa>
 801a86a:	1881      	adds	r1, r0, r2
 801a86c:	1ad2      	subs	r2, r2, r3
 801a86e:	42d3      	cmn	r3, r2
 801a870:	d100      	bne.n	801a874 <memmove+0x28>
 801a872:	bd10      	pop	{r4, pc}
 801a874:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a878:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801a87c:	e7f7      	b.n	801a86e <memmove+0x22>

0801a87e <memset>:
 801a87e:	4402      	add	r2, r0
 801a880:	4603      	mov	r3, r0
 801a882:	4293      	cmp	r3, r2
 801a884:	d100      	bne.n	801a888 <memset+0xa>
 801a886:	4770      	bx	lr
 801a888:	f803 1b01 	strb.w	r1, [r3], #1
 801a88c:	e7f9      	b.n	801a882 <memset+0x4>

0801a88e <__cvt>:
 801a88e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a890:	ed2d 8b02 	vpush	{d8}
 801a894:	eeb0 8b40 	vmov.f64	d8, d0
 801a898:	b085      	sub	sp, #20
 801a89a:	4617      	mov	r7, r2
 801a89c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801a89e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801a8a0:	ee18 2a90 	vmov	r2, s17
 801a8a4:	f025 0520 	bic.w	r5, r5, #32
 801a8a8:	2a00      	cmp	r2, #0
 801a8aa:	bfb6      	itet	lt
 801a8ac:	222d      	movlt	r2, #45	; 0x2d
 801a8ae:	2200      	movge	r2, #0
 801a8b0:	eeb1 8b40 	vneglt.f64	d8, d0
 801a8b4:	2d46      	cmp	r5, #70	; 0x46
 801a8b6:	460c      	mov	r4, r1
 801a8b8:	701a      	strb	r2, [r3, #0]
 801a8ba:	d004      	beq.n	801a8c6 <__cvt+0x38>
 801a8bc:	2d45      	cmp	r5, #69	; 0x45
 801a8be:	d100      	bne.n	801a8c2 <__cvt+0x34>
 801a8c0:	3401      	adds	r4, #1
 801a8c2:	2102      	movs	r1, #2
 801a8c4:	e000      	b.n	801a8c8 <__cvt+0x3a>
 801a8c6:	2103      	movs	r1, #3
 801a8c8:	ab03      	add	r3, sp, #12
 801a8ca:	9301      	str	r3, [sp, #4]
 801a8cc:	ab02      	add	r3, sp, #8
 801a8ce:	9300      	str	r3, [sp, #0]
 801a8d0:	4622      	mov	r2, r4
 801a8d2:	4633      	mov	r3, r6
 801a8d4:	eeb0 0b48 	vmov.f64	d0, d8
 801a8d8:	f000 fea2 	bl	801b620 <_dtoa_r>
 801a8dc:	2d47      	cmp	r5, #71	; 0x47
 801a8de:	d101      	bne.n	801a8e4 <__cvt+0x56>
 801a8e0:	07fb      	lsls	r3, r7, #31
 801a8e2:	d51e      	bpl.n	801a922 <__cvt+0x94>
 801a8e4:	2d46      	cmp	r5, #70	; 0x46
 801a8e6:	eb00 0304 	add.w	r3, r0, r4
 801a8ea:	d10c      	bne.n	801a906 <__cvt+0x78>
 801a8ec:	7802      	ldrb	r2, [r0, #0]
 801a8ee:	2a30      	cmp	r2, #48	; 0x30
 801a8f0:	d107      	bne.n	801a902 <__cvt+0x74>
 801a8f2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801a8f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a8fa:	bf1c      	itt	ne
 801a8fc:	f1c4 0401 	rsbne	r4, r4, #1
 801a900:	6034      	strne	r4, [r6, #0]
 801a902:	6832      	ldr	r2, [r6, #0]
 801a904:	4413      	add	r3, r2
 801a906:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801a90a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a90e:	d007      	beq.n	801a920 <__cvt+0x92>
 801a910:	2130      	movs	r1, #48	; 0x30
 801a912:	9a03      	ldr	r2, [sp, #12]
 801a914:	429a      	cmp	r2, r3
 801a916:	d204      	bcs.n	801a922 <__cvt+0x94>
 801a918:	1c54      	adds	r4, r2, #1
 801a91a:	9403      	str	r4, [sp, #12]
 801a91c:	7011      	strb	r1, [r2, #0]
 801a91e:	e7f8      	b.n	801a912 <__cvt+0x84>
 801a920:	9303      	str	r3, [sp, #12]
 801a922:	9b03      	ldr	r3, [sp, #12]
 801a924:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a926:	1a1b      	subs	r3, r3, r0
 801a928:	6013      	str	r3, [r2, #0]
 801a92a:	b005      	add	sp, #20
 801a92c:	ecbd 8b02 	vpop	{d8}
 801a930:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a932 <__exponent>:
 801a932:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a934:	2900      	cmp	r1, #0
 801a936:	4604      	mov	r4, r0
 801a938:	bfba      	itte	lt
 801a93a:	4249      	neglt	r1, r1
 801a93c:	232d      	movlt	r3, #45	; 0x2d
 801a93e:	232b      	movge	r3, #43	; 0x2b
 801a940:	2909      	cmp	r1, #9
 801a942:	f804 2b02 	strb.w	r2, [r4], #2
 801a946:	7043      	strb	r3, [r0, #1]
 801a948:	dd20      	ble.n	801a98c <__exponent+0x5a>
 801a94a:	f10d 0307 	add.w	r3, sp, #7
 801a94e:	461f      	mov	r7, r3
 801a950:	260a      	movs	r6, #10
 801a952:	fb91 f5f6 	sdiv	r5, r1, r6
 801a956:	fb06 1115 	mls	r1, r6, r5, r1
 801a95a:	3130      	adds	r1, #48	; 0x30
 801a95c:	2d09      	cmp	r5, #9
 801a95e:	f803 1c01 	strb.w	r1, [r3, #-1]
 801a962:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 801a966:	4629      	mov	r1, r5
 801a968:	dc09      	bgt.n	801a97e <__exponent+0x4c>
 801a96a:	3130      	adds	r1, #48	; 0x30
 801a96c:	3b02      	subs	r3, #2
 801a96e:	f802 1c01 	strb.w	r1, [r2, #-1]
 801a972:	42bb      	cmp	r3, r7
 801a974:	4622      	mov	r2, r4
 801a976:	d304      	bcc.n	801a982 <__exponent+0x50>
 801a978:	1a10      	subs	r0, r2, r0
 801a97a:	b003      	add	sp, #12
 801a97c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a97e:	4613      	mov	r3, r2
 801a980:	e7e7      	b.n	801a952 <__exponent+0x20>
 801a982:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a986:	f804 2b01 	strb.w	r2, [r4], #1
 801a98a:	e7f2      	b.n	801a972 <__exponent+0x40>
 801a98c:	2330      	movs	r3, #48	; 0x30
 801a98e:	4419      	add	r1, r3
 801a990:	7083      	strb	r3, [r0, #2]
 801a992:	1d02      	adds	r2, r0, #4
 801a994:	70c1      	strb	r1, [r0, #3]
 801a996:	e7ef      	b.n	801a978 <__exponent+0x46>

0801a998 <_printf_float>:
 801a998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a99c:	b08d      	sub	sp, #52	; 0x34
 801a99e:	460c      	mov	r4, r1
 801a9a0:	4616      	mov	r6, r2
 801a9a2:	461f      	mov	r7, r3
 801a9a4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801a9a8:	4605      	mov	r5, r0
 801a9aa:	f001 fcff 	bl	801c3ac <_localeconv_r>
 801a9ae:	f8d0 b000 	ldr.w	fp, [r0]
 801a9b2:	4658      	mov	r0, fp
 801a9b4:	f7e5 fcee 	bl	8000394 <strlen>
 801a9b8:	2300      	movs	r3, #0
 801a9ba:	930a      	str	r3, [sp, #40]	; 0x28
 801a9bc:	f8d8 3000 	ldr.w	r3, [r8]
 801a9c0:	9005      	str	r0, [sp, #20]
 801a9c2:	3307      	adds	r3, #7
 801a9c4:	f023 0307 	bic.w	r3, r3, #7
 801a9c8:	f103 0108 	add.w	r1, r3, #8
 801a9cc:	f894 9018 	ldrb.w	r9, [r4, #24]
 801a9d0:	6822      	ldr	r2, [r4, #0]
 801a9d2:	f8c8 1000 	str.w	r1, [r8]
 801a9d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 801a9da:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 801a9de:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 801ac68 <_printf_float+0x2d0>
 801a9e2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 801a9e6:	eeb0 6bc0 	vabs.f64	d6, d0
 801a9ea:	eeb4 6b47 	vcmp.f64	d6, d7
 801a9ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a9f2:	dd24      	ble.n	801aa3e <_printf_float+0xa6>
 801a9f4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801a9f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a9fc:	d502      	bpl.n	801aa04 <_printf_float+0x6c>
 801a9fe:	232d      	movs	r3, #45	; 0x2d
 801aa00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801aa04:	499a      	ldr	r1, [pc, #616]	; (801ac70 <_printf_float+0x2d8>)
 801aa06:	4b9b      	ldr	r3, [pc, #620]	; (801ac74 <_printf_float+0x2dc>)
 801aa08:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801aa0c:	bf8c      	ite	hi
 801aa0e:	4688      	movhi	r8, r1
 801aa10:	4698      	movls	r8, r3
 801aa12:	f022 0204 	bic.w	r2, r2, #4
 801aa16:	2303      	movs	r3, #3
 801aa18:	6123      	str	r3, [r4, #16]
 801aa1a:	6022      	str	r2, [r4, #0]
 801aa1c:	f04f 0a00 	mov.w	sl, #0
 801aa20:	9700      	str	r7, [sp, #0]
 801aa22:	4633      	mov	r3, r6
 801aa24:	aa0b      	add	r2, sp, #44	; 0x2c
 801aa26:	4621      	mov	r1, r4
 801aa28:	4628      	mov	r0, r5
 801aa2a:	f000 f9e1 	bl	801adf0 <_printf_common>
 801aa2e:	3001      	adds	r0, #1
 801aa30:	f040 8089 	bne.w	801ab46 <_printf_float+0x1ae>
 801aa34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801aa38:	b00d      	add	sp, #52	; 0x34
 801aa3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aa3e:	eeb4 0b40 	vcmp.f64	d0, d0
 801aa42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aa46:	d702      	bvc.n	801aa4e <_printf_float+0xb6>
 801aa48:	498b      	ldr	r1, [pc, #556]	; (801ac78 <_printf_float+0x2e0>)
 801aa4a:	4b8c      	ldr	r3, [pc, #560]	; (801ac7c <_printf_float+0x2e4>)
 801aa4c:	e7dc      	b.n	801aa08 <_printf_float+0x70>
 801aa4e:	6861      	ldr	r1, [r4, #4]
 801aa50:	1c4b      	adds	r3, r1, #1
 801aa52:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801aa56:	ab0a      	add	r3, sp, #40	; 0x28
 801aa58:	a809      	add	r0, sp, #36	; 0x24
 801aa5a:	d13b      	bne.n	801aad4 <_printf_float+0x13c>
 801aa5c:	2106      	movs	r1, #6
 801aa5e:	6061      	str	r1, [r4, #4]
 801aa60:	f04f 0c00 	mov.w	ip, #0
 801aa64:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 801aa68:	e9cd 0900 	strd	r0, r9, [sp]
 801aa6c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801aa70:	6022      	str	r2, [r4, #0]
 801aa72:	6861      	ldr	r1, [r4, #4]
 801aa74:	4628      	mov	r0, r5
 801aa76:	f7ff ff0a 	bl	801a88e <__cvt>
 801aa7a:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 801aa7e:	2b47      	cmp	r3, #71	; 0x47
 801aa80:	4680      	mov	r8, r0
 801aa82:	d109      	bne.n	801aa98 <_printf_float+0x100>
 801aa84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801aa86:	1cd8      	adds	r0, r3, #3
 801aa88:	db02      	blt.n	801aa90 <_printf_float+0xf8>
 801aa8a:	6862      	ldr	r2, [r4, #4]
 801aa8c:	4293      	cmp	r3, r2
 801aa8e:	dd47      	ble.n	801ab20 <_printf_float+0x188>
 801aa90:	f1a9 0902 	sub.w	r9, r9, #2
 801aa94:	fa5f f989 	uxtb.w	r9, r9
 801aa98:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801aa9c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801aa9e:	d824      	bhi.n	801aaea <_printf_float+0x152>
 801aaa0:	3901      	subs	r1, #1
 801aaa2:	464a      	mov	r2, r9
 801aaa4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801aaa8:	9109      	str	r1, [sp, #36]	; 0x24
 801aaaa:	f7ff ff42 	bl	801a932 <__exponent>
 801aaae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801aab0:	1813      	adds	r3, r2, r0
 801aab2:	2a01      	cmp	r2, #1
 801aab4:	4682      	mov	sl, r0
 801aab6:	6123      	str	r3, [r4, #16]
 801aab8:	dc02      	bgt.n	801aac0 <_printf_float+0x128>
 801aaba:	6822      	ldr	r2, [r4, #0]
 801aabc:	07d1      	lsls	r1, r2, #31
 801aabe:	d501      	bpl.n	801aac4 <_printf_float+0x12c>
 801aac0:	3301      	adds	r3, #1
 801aac2:	6123      	str	r3, [r4, #16]
 801aac4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801aac8:	2b00      	cmp	r3, #0
 801aaca:	d0a9      	beq.n	801aa20 <_printf_float+0x88>
 801aacc:	232d      	movs	r3, #45	; 0x2d
 801aace:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801aad2:	e7a5      	b.n	801aa20 <_printf_float+0x88>
 801aad4:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 801aad8:	f000 8178 	beq.w	801adcc <_printf_float+0x434>
 801aadc:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801aae0:	d1be      	bne.n	801aa60 <_printf_float+0xc8>
 801aae2:	2900      	cmp	r1, #0
 801aae4:	d1bc      	bne.n	801aa60 <_printf_float+0xc8>
 801aae6:	2101      	movs	r1, #1
 801aae8:	e7b9      	b.n	801aa5e <_printf_float+0xc6>
 801aaea:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 801aaee:	d119      	bne.n	801ab24 <_printf_float+0x18c>
 801aaf0:	2900      	cmp	r1, #0
 801aaf2:	6863      	ldr	r3, [r4, #4]
 801aaf4:	dd0c      	ble.n	801ab10 <_printf_float+0x178>
 801aaf6:	6121      	str	r1, [r4, #16]
 801aaf8:	b913      	cbnz	r3, 801ab00 <_printf_float+0x168>
 801aafa:	6822      	ldr	r2, [r4, #0]
 801aafc:	07d2      	lsls	r2, r2, #31
 801aafe:	d502      	bpl.n	801ab06 <_printf_float+0x16e>
 801ab00:	3301      	adds	r3, #1
 801ab02:	440b      	add	r3, r1
 801ab04:	6123      	str	r3, [r4, #16]
 801ab06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ab08:	65a3      	str	r3, [r4, #88]	; 0x58
 801ab0a:	f04f 0a00 	mov.w	sl, #0
 801ab0e:	e7d9      	b.n	801aac4 <_printf_float+0x12c>
 801ab10:	b913      	cbnz	r3, 801ab18 <_printf_float+0x180>
 801ab12:	6822      	ldr	r2, [r4, #0]
 801ab14:	07d0      	lsls	r0, r2, #31
 801ab16:	d501      	bpl.n	801ab1c <_printf_float+0x184>
 801ab18:	3302      	adds	r3, #2
 801ab1a:	e7f3      	b.n	801ab04 <_printf_float+0x16c>
 801ab1c:	2301      	movs	r3, #1
 801ab1e:	e7f1      	b.n	801ab04 <_printf_float+0x16c>
 801ab20:	f04f 0967 	mov.w	r9, #103	; 0x67
 801ab24:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801ab28:	4293      	cmp	r3, r2
 801ab2a:	db05      	blt.n	801ab38 <_printf_float+0x1a0>
 801ab2c:	6822      	ldr	r2, [r4, #0]
 801ab2e:	6123      	str	r3, [r4, #16]
 801ab30:	07d1      	lsls	r1, r2, #31
 801ab32:	d5e8      	bpl.n	801ab06 <_printf_float+0x16e>
 801ab34:	3301      	adds	r3, #1
 801ab36:	e7e5      	b.n	801ab04 <_printf_float+0x16c>
 801ab38:	2b00      	cmp	r3, #0
 801ab3a:	bfd4      	ite	le
 801ab3c:	f1c3 0302 	rsble	r3, r3, #2
 801ab40:	2301      	movgt	r3, #1
 801ab42:	4413      	add	r3, r2
 801ab44:	e7de      	b.n	801ab04 <_printf_float+0x16c>
 801ab46:	6823      	ldr	r3, [r4, #0]
 801ab48:	055a      	lsls	r2, r3, #21
 801ab4a:	d407      	bmi.n	801ab5c <_printf_float+0x1c4>
 801ab4c:	6923      	ldr	r3, [r4, #16]
 801ab4e:	4642      	mov	r2, r8
 801ab50:	4631      	mov	r1, r6
 801ab52:	4628      	mov	r0, r5
 801ab54:	47b8      	blx	r7
 801ab56:	3001      	adds	r0, #1
 801ab58:	d12a      	bne.n	801abb0 <_printf_float+0x218>
 801ab5a:	e76b      	b.n	801aa34 <_printf_float+0x9c>
 801ab5c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801ab60:	f240 80de 	bls.w	801ad20 <_printf_float+0x388>
 801ab64:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801ab68:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801ab6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ab70:	d133      	bne.n	801abda <_printf_float+0x242>
 801ab72:	2301      	movs	r3, #1
 801ab74:	4a42      	ldr	r2, [pc, #264]	; (801ac80 <_printf_float+0x2e8>)
 801ab76:	4631      	mov	r1, r6
 801ab78:	4628      	mov	r0, r5
 801ab7a:	47b8      	blx	r7
 801ab7c:	3001      	adds	r0, #1
 801ab7e:	f43f af59 	beq.w	801aa34 <_printf_float+0x9c>
 801ab82:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801ab86:	429a      	cmp	r2, r3
 801ab88:	db02      	blt.n	801ab90 <_printf_float+0x1f8>
 801ab8a:	6823      	ldr	r3, [r4, #0]
 801ab8c:	07d8      	lsls	r0, r3, #31
 801ab8e:	d50f      	bpl.n	801abb0 <_printf_float+0x218>
 801ab90:	9b05      	ldr	r3, [sp, #20]
 801ab92:	465a      	mov	r2, fp
 801ab94:	4631      	mov	r1, r6
 801ab96:	4628      	mov	r0, r5
 801ab98:	47b8      	blx	r7
 801ab9a:	3001      	adds	r0, #1
 801ab9c:	f43f af4a 	beq.w	801aa34 <_printf_float+0x9c>
 801aba0:	f04f 0800 	mov.w	r8, #0
 801aba4:	f104 091a 	add.w	r9, r4, #26
 801aba8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801abaa:	3b01      	subs	r3, #1
 801abac:	4543      	cmp	r3, r8
 801abae:	dc09      	bgt.n	801abc4 <_printf_float+0x22c>
 801abb0:	6823      	ldr	r3, [r4, #0]
 801abb2:	079b      	lsls	r3, r3, #30
 801abb4:	f100 8105 	bmi.w	801adc2 <_printf_float+0x42a>
 801abb8:	68e0      	ldr	r0, [r4, #12]
 801abba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801abbc:	4298      	cmp	r0, r3
 801abbe:	bfb8      	it	lt
 801abc0:	4618      	movlt	r0, r3
 801abc2:	e739      	b.n	801aa38 <_printf_float+0xa0>
 801abc4:	2301      	movs	r3, #1
 801abc6:	464a      	mov	r2, r9
 801abc8:	4631      	mov	r1, r6
 801abca:	4628      	mov	r0, r5
 801abcc:	47b8      	blx	r7
 801abce:	3001      	adds	r0, #1
 801abd0:	f43f af30 	beq.w	801aa34 <_printf_float+0x9c>
 801abd4:	f108 0801 	add.w	r8, r8, #1
 801abd8:	e7e6      	b.n	801aba8 <_printf_float+0x210>
 801abda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801abdc:	2b00      	cmp	r3, #0
 801abde:	dc2b      	bgt.n	801ac38 <_printf_float+0x2a0>
 801abe0:	2301      	movs	r3, #1
 801abe2:	4a27      	ldr	r2, [pc, #156]	; (801ac80 <_printf_float+0x2e8>)
 801abe4:	4631      	mov	r1, r6
 801abe6:	4628      	mov	r0, r5
 801abe8:	47b8      	blx	r7
 801abea:	3001      	adds	r0, #1
 801abec:	f43f af22 	beq.w	801aa34 <_printf_float+0x9c>
 801abf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801abf2:	b923      	cbnz	r3, 801abfe <_printf_float+0x266>
 801abf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801abf6:	b913      	cbnz	r3, 801abfe <_printf_float+0x266>
 801abf8:	6823      	ldr	r3, [r4, #0]
 801abfa:	07d9      	lsls	r1, r3, #31
 801abfc:	d5d8      	bpl.n	801abb0 <_printf_float+0x218>
 801abfe:	9b05      	ldr	r3, [sp, #20]
 801ac00:	465a      	mov	r2, fp
 801ac02:	4631      	mov	r1, r6
 801ac04:	4628      	mov	r0, r5
 801ac06:	47b8      	blx	r7
 801ac08:	3001      	adds	r0, #1
 801ac0a:	f43f af13 	beq.w	801aa34 <_printf_float+0x9c>
 801ac0e:	f04f 0900 	mov.w	r9, #0
 801ac12:	f104 0a1a 	add.w	sl, r4, #26
 801ac16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ac18:	425b      	negs	r3, r3
 801ac1a:	454b      	cmp	r3, r9
 801ac1c:	dc01      	bgt.n	801ac22 <_printf_float+0x28a>
 801ac1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ac20:	e795      	b.n	801ab4e <_printf_float+0x1b6>
 801ac22:	2301      	movs	r3, #1
 801ac24:	4652      	mov	r2, sl
 801ac26:	4631      	mov	r1, r6
 801ac28:	4628      	mov	r0, r5
 801ac2a:	47b8      	blx	r7
 801ac2c:	3001      	adds	r0, #1
 801ac2e:	f43f af01 	beq.w	801aa34 <_printf_float+0x9c>
 801ac32:	f109 0901 	add.w	r9, r9, #1
 801ac36:	e7ee      	b.n	801ac16 <_printf_float+0x27e>
 801ac38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ac3a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801ac3c:	429a      	cmp	r2, r3
 801ac3e:	bfa8      	it	ge
 801ac40:	461a      	movge	r2, r3
 801ac42:	2a00      	cmp	r2, #0
 801ac44:	4691      	mov	r9, r2
 801ac46:	dd07      	ble.n	801ac58 <_printf_float+0x2c0>
 801ac48:	4613      	mov	r3, r2
 801ac4a:	4631      	mov	r1, r6
 801ac4c:	4642      	mov	r2, r8
 801ac4e:	4628      	mov	r0, r5
 801ac50:	47b8      	blx	r7
 801ac52:	3001      	adds	r0, #1
 801ac54:	f43f aeee 	beq.w	801aa34 <_printf_float+0x9c>
 801ac58:	f104 031a 	add.w	r3, r4, #26
 801ac5c:	f04f 0a00 	mov.w	sl, #0
 801ac60:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801ac64:	9307      	str	r3, [sp, #28]
 801ac66:	e017      	b.n	801ac98 <_printf_float+0x300>
 801ac68:	ffffffff 	.word	0xffffffff
 801ac6c:	7fefffff 	.word	0x7fefffff
 801ac70:	08020736 	.word	0x08020736
 801ac74:	08020732 	.word	0x08020732
 801ac78:	0802073e 	.word	0x0802073e
 801ac7c:	0802073a 	.word	0x0802073a
 801ac80:	08020742 	.word	0x08020742
 801ac84:	2301      	movs	r3, #1
 801ac86:	9a07      	ldr	r2, [sp, #28]
 801ac88:	4631      	mov	r1, r6
 801ac8a:	4628      	mov	r0, r5
 801ac8c:	47b8      	blx	r7
 801ac8e:	3001      	adds	r0, #1
 801ac90:	f43f aed0 	beq.w	801aa34 <_printf_float+0x9c>
 801ac94:	f10a 0a01 	add.w	sl, sl, #1
 801ac98:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801ac9a:	9306      	str	r3, [sp, #24]
 801ac9c:	eba3 0309 	sub.w	r3, r3, r9
 801aca0:	4553      	cmp	r3, sl
 801aca2:	dcef      	bgt.n	801ac84 <_printf_float+0x2ec>
 801aca4:	9b06      	ldr	r3, [sp, #24]
 801aca6:	4498      	add	r8, r3
 801aca8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801acac:	429a      	cmp	r2, r3
 801acae:	db15      	blt.n	801acdc <_printf_float+0x344>
 801acb0:	6823      	ldr	r3, [r4, #0]
 801acb2:	07da      	lsls	r2, r3, #31
 801acb4:	d412      	bmi.n	801acdc <_printf_float+0x344>
 801acb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801acb8:	9a06      	ldr	r2, [sp, #24]
 801acba:	9909      	ldr	r1, [sp, #36]	; 0x24
 801acbc:	1a9a      	subs	r2, r3, r2
 801acbe:	eba3 0a01 	sub.w	sl, r3, r1
 801acc2:	4592      	cmp	sl, r2
 801acc4:	bfa8      	it	ge
 801acc6:	4692      	movge	sl, r2
 801acc8:	f1ba 0f00 	cmp.w	sl, #0
 801accc:	dc0e      	bgt.n	801acec <_printf_float+0x354>
 801acce:	f04f 0800 	mov.w	r8, #0
 801acd2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801acd6:	f104 091a 	add.w	r9, r4, #26
 801acda:	e019      	b.n	801ad10 <_printf_float+0x378>
 801acdc:	9b05      	ldr	r3, [sp, #20]
 801acde:	465a      	mov	r2, fp
 801ace0:	4631      	mov	r1, r6
 801ace2:	4628      	mov	r0, r5
 801ace4:	47b8      	blx	r7
 801ace6:	3001      	adds	r0, #1
 801ace8:	d1e5      	bne.n	801acb6 <_printf_float+0x31e>
 801acea:	e6a3      	b.n	801aa34 <_printf_float+0x9c>
 801acec:	4653      	mov	r3, sl
 801acee:	4642      	mov	r2, r8
 801acf0:	4631      	mov	r1, r6
 801acf2:	4628      	mov	r0, r5
 801acf4:	47b8      	blx	r7
 801acf6:	3001      	adds	r0, #1
 801acf8:	d1e9      	bne.n	801acce <_printf_float+0x336>
 801acfa:	e69b      	b.n	801aa34 <_printf_float+0x9c>
 801acfc:	2301      	movs	r3, #1
 801acfe:	464a      	mov	r2, r9
 801ad00:	4631      	mov	r1, r6
 801ad02:	4628      	mov	r0, r5
 801ad04:	47b8      	blx	r7
 801ad06:	3001      	adds	r0, #1
 801ad08:	f43f ae94 	beq.w	801aa34 <_printf_float+0x9c>
 801ad0c:	f108 0801 	add.w	r8, r8, #1
 801ad10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801ad14:	1a9b      	subs	r3, r3, r2
 801ad16:	eba3 030a 	sub.w	r3, r3, sl
 801ad1a:	4543      	cmp	r3, r8
 801ad1c:	dcee      	bgt.n	801acfc <_printf_float+0x364>
 801ad1e:	e747      	b.n	801abb0 <_printf_float+0x218>
 801ad20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ad22:	2a01      	cmp	r2, #1
 801ad24:	dc01      	bgt.n	801ad2a <_printf_float+0x392>
 801ad26:	07db      	lsls	r3, r3, #31
 801ad28:	d539      	bpl.n	801ad9e <_printf_float+0x406>
 801ad2a:	2301      	movs	r3, #1
 801ad2c:	4642      	mov	r2, r8
 801ad2e:	4631      	mov	r1, r6
 801ad30:	4628      	mov	r0, r5
 801ad32:	47b8      	blx	r7
 801ad34:	3001      	adds	r0, #1
 801ad36:	f43f ae7d 	beq.w	801aa34 <_printf_float+0x9c>
 801ad3a:	9b05      	ldr	r3, [sp, #20]
 801ad3c:	465a      	mov	r2, fp
 801ad3e:	4631      	mov	r1, r6
 801ad40:	4628      	mov	r0, r5
 801ad42:	47b8      	blx	r7
 801ad44:	3001      	adds	r0, #1
 801ad46:	f108 0801 	add.w	r8, r8, #1
 801ad4a:	f43f ae73 	beq.w	801aa34 <_printf_float+0x9c>
 801ad4e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801ad52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ad54:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801ad58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ad5c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 801ad60:	d018      	beq.n	801ad94 <_printf_float+0x3fc>
 801ad62:	4642      	mov	r2, r8
 801ad64:	4631      	mov	r1, r6
 801ad66:	4628      	mov	r0, r5
 801ad68:	47b8      	blx	r7
 801ad6a:	3001      	adds	r0, #1
 801ad6c:	d10e      	bne.n	801ad8c <_printf_float+0x3f4>
 801ad6e:	e661      	b.n	801aa34 <_printf_float+0x9c>
 801ad70:	2301      	movs	r3, #1
 801ad72:	464a      	mov	r2, r9
 801ad74:	4631      	mov	r1, r6
 801ad76:	4628      	mov	r0, r5
 801ad78:	47b8      	blx	r7
 801ad7a:	3001      	adds	r0, #1
 801ad7c:	f43f ae5a 	beq.w	801aa34 <_printf_float+0x9c>
 801ad80:	f108 0801 	add.w	r8, r8, #1
 801ad84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ad86:	3b01      	subs	r3, #1
 801ad88:	4543      	cmp	r3, r8
 801ad8a:	dcf1      	bgt.n	801ad70 <_printf_float+0x3d8>
 801ad8c:	4653      	mov	r3, sl
 801ad8e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801ad92:	e6dd      	b.n	801ab50 <_printf_float+0x1b8>
 801ad94:	f04f 0800 	mov.w	r8, #0
 801ad98:	f104 091a 	add.w	r9, r4, #26
 801ad9c:	e7f2      	b.n	801ad84 <_printf_float+0x3ec>
 801ad9e:	2301      	movs	r3, #1
 801ada0:	e7df      	b.n	801ad62 <_printf_float+0x3ca>
 801ada2:	2301      	movs	r3, #1
 801ada4:	464a      	mov	r2, r9
 801ada6:	4631      	mov	r1, r6
 801ada8:	4628      	mov	r0, r5
 801adaa:	47b8      	blx	r7
 801adac:	3001      	adds	r0, #1
 801adae:	f43f ae41 	beq.w	801aa34 <_printf_float+0x9c>
 801adb2:	f108 0801 	add.w	r8, r8, #1
 801adb6:	68e3      	ldr	r3, [r4, #12]
 801adb8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801adba:	1a9b      	subs	r3, r3, r2
 801adbc:	4543      	cmp	r3, r8
 801adbe:	dcf0      	bgt.n	801ada2 <_printf_float+0x40a>
 801adc0:	e6fa      	b.n	801abb8 <_printf_float+0x220>
 801adc2:	f04f 0800 	mov.w	r8, #0
 801adc6:	f104 0919 	add.w	r9, r4, #25
 801adca:	e7f4      	b.n	801adb6 <_printf_float+0x41e>
 801adcc:	2900      	cmp	r1, #0
 801adce:	f43f ae8a 	beq.w	801aae6 <_printf_float+0x14e>
 801add2:	f04f 0c00 	mov.w	ip, #0
 801add6:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 801adda:	e9cd 0900 	strd	r0, r9, [sp]
 801adde:	6022      	str	r2, [r4, #0]
 801ade0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801ade4:	4628      	mov	r0, r5
 801ade6:	f7ff fd52 	bl	801a88e <__cvt>
 801adea:	4680      	mov	r8, r0
 801adec:	e64a      	b.n	801aa84 <_printf_float+0xec>
 801adee:	bf00      	nop

0801adf0 <_printf_common>:
 801adf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801adf4:	4691      	mov	r9, r2
 801adf6:	461f      	mov	r7, r3
 801adf8:	688a      	ldr	r2, [r1, #8]
 801adfa:	690b      	ldr	r3, [r1, #16]
 801adfc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801ae00:	4293      	cmp	r3, r2
 801ae02:	bfb8      	it	lt
 801ae04:	4613      	movlt	r3, r2
 801ae06:	f8c9 3000 	str.w	r3, [r9]
 801ae0a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801ae0e:	4606      	mov	r6, r0
 801ae10:	460c      	mov	r4, r1
 801ae12:	b112      	cbz	r2, 801ae1a <_printf_common+0x2a>
 801ae14:	3301      	adds	r3, #1
 801ae16:	f8c9 3000 	str.w	r3, [r9]
 801ae1a:	6823      	ldr	r3, [r4, #0]
 801ae1c:	0699      	lsls	r1, r3, #26
 801ae1e:	bf42      	ittt	mi
 801ae20:	f8d9 3000 	ldrmi.w	r3, [r9]
 801ae24:	3302      	addmi	r3, #2
 801ae26:	f8c9 3000 	strmi.w	r3, [r9]
 801ae2a:	6825      	ldr	r5, [r4, #0]
 801ae2c:	f015 0506 	ands.w	r5, r5, #6
 801ae30:	d107      	bne.n	801ae42 <_printf_common+0x52>
 801ae32:	f104 0a19 	add.w	sl, r4, #25
 801ae36:	68e3      	ldr	r3, [r4, #12]
 801ae38:	f8d9 2000 	ldr.w	r2, [r9]
 801ae3c:	1a9b      	subs	r3, r3, r2
 801ae3e:	42ab      	cmp	r3, r5
 801ae40:	dc28      	bgt.n	801ae94 <_printf_common+0xa4>
 801ae42:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801ae46:	6822      	ldr	r2, [r4, #0]
 801ae48:	3300      	adds	r3, #0
 801ae4a:	bf18      	it	ne
 801ae4c:	2301      	movne	r3, #1
 801ae4e:	0692      	lsls	r2, r2, #26
 801ae50:	d42d      	bmi.n	801aeae <_printf_common+0xbe>
 801ae52:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801ae56:	4639      	mov	r1, r7
 801ae58:	4630      	mov	r0, r6
 801ae5a:	47c0      	blx	r8
 801ae5c:	3001      	adds	r0, #1
 801ae5e:	d020      	beq.n	801aea2 <_printf_common+0xb2>
 801ae60:	6823      	ldr	r3, [r4, #0]
 801ae62:	68e5      	ldr	r5, [r4, #12]
 801ae64:	f8d9 2000 	ldr.w	r2, [r9]
 801ae68:	f003 0306 	and.w	r3, r3, #6
 801ae6c:	2b04      	cmp	r3, #4
 801ae6e:	bf08      	it	eq
 801ae70:	1aad      	subeq	r5, r5, r2
 801ae72:	68a3      	ldr	r3, [r4, #8]
 801ae74:	6922      	ldr	r2, [r4, #16]
 801ae76:	bf0c      	ite	eq
 801ae78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801ae7c:	2500      	movne	r5, #0
 801ae7e:	4293      	cmp	r3, r2
 801ae80:	bfc4      	itt	gt
 801ae82:	1a9b      	subgt	r3, r3, r2
 801ae84:	18ed      	addgt	r5, r5, r3
 801ae86:	f04f 0900 	mov.w	r9, #0
 801ae8a:	341a      	adds	r4, #26
 801ae8c:	454d      	cmp	r5, r9
 801ae8e:	d11a      	bne.n	801aec6 <_printf_common+0xd6>
 801ae90:	2000      	movs	r0, #0
 801ae92:	e008      	b.n	801aea6 <_printf_common+0xb6>
 801ae94:	2301      	movs	r3, #1
 801ae96:	4652      	mov	r2, sl
 801ae98:	4639      	mov	r1, r7
 801ae9a:	4630      	mov	r0, r6
 801ae9c:	47c0      	blx	r8
 801ae9e:	3001      	adds	r0, #1
 801aea0:	d103      	bne.n	801aeaa <_printf_common+0xba>
 801aea2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801aea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801aeaa:	3501      	adds	r5, #1
 801aeac:	e7c3      	b.n	801ae36 <_printf_common+0x46>
 801aeae:	18e1      	adds	r1, r4, r3
 801aeb0:	1c5a      	adds	r2, r3, #1
 801aeb2:	2030      	movs	r0, #48	; 0x30
 801aeb4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801aeb8:	4422      	add	r2, r4
 801aeba:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801aebe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801aec2:	3302      	adds	r3, #2
 801aec4:	e7c5      	b.n	801ae52 <_printf_common+0x62>
 801aec6:	2301      	movs	r3, #1
 801aec8:	4622      	mov	r2, r4
 801aeca:	4639      	mov	r1, r7
 801aecc:	4630      	mov	r0, r6
 801aece:	47c0      	blx	r8
 801aed0:	3001      	adds	r0, #1
 801aed2:	d0e6      	beq.n	801aea2 <_printf_common+0xb2>
 801aed4:	f109 0901 	add.w	r9, r9, #1
 801aed8:	e7d8      	b.n	801ae8c <_printf_common+0x9c>
	...

0801aedc <_printf_i>:
 801aedc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801aee0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801aee4:	460c      	mov	r4, r1
 801aee6:	7e09      	ldrb	r1, [r1, #24]
 801aee8:	b085      	sub	sp, #20
 801aeea:	296e      	cmp	r1, #110	; 0x6e
 801aeec:	4617      	mov	r7, r2
 801aeee:	4606      	mov	r6, r0
 801aef0:	4698      	mov	r8, r3
 801aef2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801aef4:	f000 80b3 	beq.w	801b05e <_printf_i+0x182>
 801aef8:	d822      	bhi.n	801af40 <_printf_i+0x64>
 801aefa:	2963      	cmp	r1, #99	; 0x63
 801aefc:	d036      	beq.n	801af6c <_printf_i+0x90>
 801aefe:	d80a      	bhi.n	801af16 <_printf_i+0x3a>
 801af00:	2900      	cmp	r1, #0
 801af02:	f000 80b9 	beq.w	801b078 <_printf_i+0x19c>
 801af06:	2958      	cmp	r1, #88	; 0x58
 801af08:	f000 8083 	beq.w	801b012 <_printf_i+0x136>
 801af0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801af10:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801af14:	e032      	b.n	801af7c <_printf_i+0xa0>
 801af16:	2964      	cmp	r1, #100	; 0x64
 801af18:	d001      	beq.n	801af1e <_printf_i+0x42>
 801af1a:	2969      	cmp	r1, #105	; 0x69
 801af1c:	d1f6      	bne.n	801af0c <_printf_i+0x30>
 801af1e:	6820      	ldr	r0, [r4, #0]
 801af20:	6813      	ldr	r3, [r2, #0]
 801af22:	0605      	lsls	r5, r0, #24
 801af24:	f103 0104 	add.w	r1, r3, #4
 801af28:	d52a      	bpl.n	801af80 <_printf_i+0xa4>
 801af2a:	681b      	ldr	r3, [r3, #0]
 801af2c:	6011      	str	r1, [r2, #0]
 801af2e:	2b00      	cmp	r3, #0
 801af30:	da03      	bge.n	801af3a <_printf_i+0x5e>
 801af32:	222d      	movs	r2, #45	; 0x2d
 801af34:	425b      	negs	r3, r3
 801af36:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801af3a:	486f      	ldr	r0, [pc, #444]	; (801b0f8 <_printf_i+0x21c>)
 801af3c:	220a      	movs	r2, #10
 801af3e:	e039      	b.n	801afb4 <_printf_i+0xd8>
 801af40:	2973      	cmp	r1, #115	; 0x73
 801af42:	f000 809d 	beq.w	801b080 <_printf_i+0x1a4>
 801af46:	d808      	bhi.n	801af5a <_printf_i+0x7e>
 801af48:	296f      	cmp	r1, #111	; 0x6f
 801af4a:	d020      	beq.n	801af8e <_printf_i+0xb2>
 801af4c:	2970      	cmp	r1, #112	; 0x70
 801af4e:	d1dd      	bne.n	801af0c <_printf_i+0x30>
 801af50:	6823      	ldr	r3, [r4, #0]
 801af52:	f043 0320 	orr.w	r3, r3, #32
 801af56:	6023      	str	r3, [r4, #0]
 801af58:	e003      	b.n	801af62 <_printf_i+0x86>
 801af5a:	2975      	cmp	r1, #117	; 0x75
 801af5c:	d017      	beq.n	801af8e <_printf_i+0xb2>
 801af5e:	2978      	cmp	r1, #120	; 0x78
 801af60:	d1d4      	bne.n	801af0c <_printf_i+0x30>
 801af62:	2378      	movs	r3, #120	; 0x78
 801af64:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801af68:	4864      	ldr	r0, [pc, #400]	; (801b0fc <_printf_i+0x220>)
 801af6a:	e055      	b.n	801b018 <_printf_i+0x13c>
 801af6c:	6813      	ldr	r3, [r2, #0]
 801af6e:	1d19      	adds	r1, r3, #4
 801af70:	681b      	ldr	r3, [r3, #0]
 801af72:	6011      	str	r1, [r2, #0]
 801af74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801af78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801af7c:	2301      	movs	r3, #1
 801af7e:	e08c      	b.n	801b09a <_printf_i+0x1be>
 801af80:	681b      	ldr	r3, [r3, #0]
 801af82:	6011      	str	r1, [r2, #0]
 801af84:	f010 0f40 	tst.w	r0, #64	; 0x40
 801af88:	bf18      	it	ne
 801af8a:	b21b      	sxthne	r3, r3
 801af8c:	e7cf      	b.n	801af2e <_printf_i+0x52>
 801af8e:	6813      	ldr	r3, [r2, #0]
 801af90:	6825      	ldr	r5, [r4, #0]
 801af92:	1d18      	adds	r0, r3, #4
 801af94:	6010      	str	r0, [r2, #0]
 801af96:	0628      	lsls	r0, r5, #24
 801af98:	d501      	bpl.n	801af9e <_printf_i+0xc2>
 801af9a:	681b      	ldr	r3, [r3, #0]
 801af9c:	e002      	b.n	801afa4 <_printf_i+0xc8>
 801af9e:	0668      	lsls	r0, r5, #25
 801afa0:	d5fb      	bpl.n	801af9a <_printf_i+0xbe>
 801afa2:	881b      	ldrh	r3, [r3, #0]
 801afa4:	4854      	ldr	r0, [pc, #336]	; (801b0f8 <_printf_i+0x21c>)
 801afa6:	296f      	cmp	r1, #111	; 0x6f
 801afa8:	bf14      	ite	ne
 801afaa:	220a      	movne	r2, #10
 801afac:	2208      	moveq	r2, #8
 801afae:	2100      	movs	r1, #0
 801afb0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801afb4:	6865      	ldr	r5, [r4, #4]
 801afb6:	60a5      	str	r5, [r4, #8]
 801afb8:	2d00      	cmp	r5, #0
 801afba:	f2c0 8095 	blt.w	801b0e8 <_printf_i+0x20c>
 801afbe:	6821      	ldr	r1, [r4, #0]
 801afc0:	f021 0104 	bic.w	r1, r1, #4
 801afc4:	6021      	str	r1, [r4, #0]
 801afc6:	2b00      	cmp	r3, #0
 801afc8:	d13d      	bne.n	801b046 <_printf_i+0x16a>
 801afca:	2d00      	cmp	r5, #0
 801afcc:	f040 808e 	bne.w	801b0ec <_printf_i+0x210>
 801afd0:	4665      	mov	r5, ip
 801afd2:	2a08      	cmp	r2, #8
 801afd4:	d10b      	bne.n	801afee <_printf_i+0x112>
 801afd6:	6823      	ldr	r3, [r4, #0]
 801afd8:	07db      	lsls	r3, r3, #31
 801afda:	d508      	bpl.n	801afee <_printf_i+0x112>
 801afdc:	6923      	ldr	r3, [r4, #16]
 801afde:	6862      	ldr	r2, [r4, #4]
 801afe0:	429a      	cmp	r2, r3
 801afe2:	bfde      	ittt	le
 801afe4:	2330      	movle	r3, #48	; 0x30
 801afe6:	f805 3c01 	strble.w	r3, [r5, #-1]
 801afea:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801afee:	ebac 0305 	sub.w	r3, ip, r5
 801aff2:	6123      	str	r3, [r4, #16]
 801aff4:	f8cd 8000 	str.w	r8, [sp]
 801aff8:	463b      	mov	r3, r7
 801affa:	aa03      	add	r2, sp, #12
 801affc:	4621      	mov	r1, r4
 801affe:	4630      	mov	r0, r6
 801b000:	f7ff fef6 	bl	801adf0 <_printf_common>
 801b004:	3001      	adds	r0, #1
 801b006:	d14d      	bne.n	801b0a4 <_printf_i+0x1c8>
 801b008:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b00c:	b005      	add	sp, #20
 801b00e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b012:	4839      	ldr	r0, [pc, #228]	; (801b0f8 <_printf_i+0x21c>)
 801b014:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801b018:	6813      	ldr	r3, [r2, #0]
 801b01a:	6821      	ldr	r1, [r4, #0]
 801b01c:	1d1d      	adds	r5, r3, #4
 801b01e:	681b      	ldr	r3, [r3, #0]
 801b020:	6015      	str	r5, [r2, #0]
 801b022:	060a      	lsls	r2, r1, #24
 801b024:	d50b      	bpl.n	801b03e <_printf_i+0x162>
 801b026:	07ca      	lsls	r2, r1, #31
 801b028:	bf44      	itt	mi
 801b02a:	f041 0120 	orrmi.w	r1, r1, #32
 801b02e:	6021      	strmi	r1, [r4, #0]
 801b030:	b91b      	cbnz	r3, 801b03a <_printf_i+0x15e>
 801b032:	6822      	ldr	r2, [r4, #0]
 801b034:	f022 0220 	bic.w	r2, r2, #32
 801b038:	6022      	str	r2, [r4, #0]
 801b03a:	2210      	movs	r2, #16
 801b03c:	e7b7      	b.n	801afae <_printf_i+0xd2>
 801b03e:	064d      	lsls	r5, r1, #25
 801b040:	bf48      	it	mi
 801b042:	b29b      	uxthmi	r3, r3
 801b044:	e7ef      	b.n	801b026 <_printf_i+0x14a>
 801b046:	4665      	mov	r5, ip
 801b048:	fbb3 f1f2 	udiv	r1, r3, r2
 801b04c:	fb02 3311 	mls	r3, r2, r1, r3
 801b050:	5cc3      	ldrb	r3, [r0, r3]
 801b052:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801b056:	460b      	mov	r3, r1
 801b058:	2900      	cmp	r1, #0
 801b05a:	d1f5      	bne.n	801b048 <_printf_i+0x16c>
 801b05c:	e7b9      	b.n	801afd2 <_printf_i+0xf6>
 801b05e:	6813      	ldr	r3, [r2, #0]
 801b060:	6825      	ldr	r5, [r4, #0]
 801b062:	6961      	ldr	r1, [r4, #20]
 801b064:	1d18      	adds	r0, r3, #4
 801b066:	6010      	str	r0, [r2, #0]
 801b068:	0628      	lsls	r0, r5, #24
 801b06a:	681b      	ldr	r3, [r3, #0]
 801b06c:	d501      	bpl.n	801b072 <_printf_i+0x196>
 801b06e:	6019      	str	r1, [r3, #0]
 801b070:	e002      	b.n	801b078 <_printf_i+0x19c>
 801b072:	066a      	lsls	r2, r5, #25
 801b074:	d5fb      	bpl.n	801b06e <_printf_i+0x192>
 801b076:	8019      	strh	r1, [r3, #0]
 801b078:	2300      	movs	r3, #0
 801b07a:	6123      	str	r3, [r4, #16]
 801b07c:	4665      	mov	r5, ip
 801b07e:	e7b9      	b.n	801aff4 <_printf_i+0x118>
 801b080:	6813      	ldr	r3, [r2, #0]
 801b082:	1d19      	adds	r1, r3, #4
 801b084:	6011      	str	r1, [r2, #0]
 801b086:	681d      	ldr	r5, [r3, #0]
 801b088:	6862      	ldr	r2, [r4, #4]
 801b08a:	2100      	movs	r1, #0
 801b08c:	4628      	mov	r0, r5
 801b08e:	f7e5 f927 	bl	80002e0 <memchr>
 801b092:	b108      	cbz	r0, 801b098 <_printf_i+0x1bc>
 801b094:	1b40      	subs	r0, r0, r5
 801b096:	6060      	str	r0, [r4, #4]
 801b098:	6863      	ldr	r3, [r4, #4]
 801b09a:	6123      	str	r3, [r4, #16]
 801b09c:	2300      	movs	r3, #0
 801b09e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b0a2:	e7a7      	b.n	801aff4 <_printf_i+0x118>
 801b0a4:	6923      	ldr	r3, [r4, #16]
 801b0a6:	462a      	mov	r2, r5
 801b0a8:	4639      	mov	r1, r7
 801b0aa:	4630      	mov	r0, r6
 801b0ac:	47c0      	blx	r8
 801b0ae:	3001      	adds	r0, #1
 801b0b0:	d0aa      	beq.n	801b008 <_printf_i+0x12c>
 801b0b2:	6823      	ldr	r3, [r4, #0]
 801b0b4:	079b      	lsls	r3, r3, #30
 801b0b6:	d413      	bmi.n	801b0e0 <_printf_i+0x204>
 801b0b8:	68e0      	ldr	r0, [r4, #12]
 801b0ba:	9b03      	ldr	r3, [sp, #12]
 801b0bc:	4298      	cmp	r0, r3
 801b0be:	bfb8      	it	lt
 801b0c0:	4618      	movlt	r0, r3
 801b0c2:	e7a3      	b.n	801b00c <_printf_i+0x130>
 801b0c4:	2301      	movs	r3, #1
 801b0c6:	464a      	mov	r2, r9
 801b0c8:	4639      	mov	r1, r7
 801b0ca:	4630      	mov	r0, r6
 801b0cc:	47c0      	blx	r8
 801b0ce:	3001      	adds	r0, #1
 801b0d0:	d09a      	beq.n	801b008 <_printf_i+0x12c>
 801b0d2:	3501      	adds	r5, #1
 801b0d4:	68e3      	ldr	r3, [r4, #12]
 801b0d6:	9a03      	ldr	r2, [sp, #12]
 801b0d8:	1a9b      	subs	r3, r3, r2
 801b0da:	42ab      	cmp	r3, r5
 801b0dc:	dcf2      	bgt.n	801b0c4 <_printf_i+0x1e8>
 801b0de:	e7eb      	b.n	801b0b8 <_printf_i+0x1dc>
 801b0e0:	2500      	movs	r5, #0
 801b0e2:	f104 0919 	add.w	r9, r4, #25
 801b0e6:	e7f5      	b.n	801b0d4 <_printf_i+0x1f8>
 801b0e8:	2b00      	cmp	r3, #0
 801b0ea:	d1ac      	bne.n	801b046 <_printf_i+0x16a>
 801b0ec:	7803      	ldrb	r3, [r0, #0]
 801b0ee:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801b0f2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b0f6:	e76c      	b.n	801afd2 <_printf_i+0xf6>
 801b0f8:	08020744 	.word	0x08020744
 801b0fc:	08020755 	.word	0x08020755

0801b100 <iprintf>:
 801b100:	b40f      	push	{r0, r1, r2, r3}
 801b102:	4b0a      	ldr	r3, [pc, #40]	; (801b12c <iprintf+0x2c>)
 801b104:	b513      	push	{r0, r1, r4, lr}
 801b106:	681c      	ldr	r4, [r3, #0]
 801b108:	b124      	cbz	r4, 801b114 <iprintf+0x14>
 801b10a:	69a3      	ldr	r3, [r4, #24]
 801b10c:	b913      	cbnz	r3, 801b114 <iprintf+0x14>
 801b10e:	4620      	mov	r0, r4
 801b110:	f001 f8c2 	bl	801c298 <__sinit>
 801b114:	ab05      	add	r3, sp, #20
 801b116:	9a04      	ldr	r2, [sp, #16]
 801b118:	68a1      	ldr	r1, [r4, #8]
 801b11a:	9301      	str	r3, [sp, #4]
 801b11c:	4620      	mov	r0, r4
 801b11e:	f001 fecd 	bl	801cebc <_vfiprintf_r>
 801b122:	b002      	add	sp, #8
 801b124:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b128:	b004      	add	sp, #16
 801b12a:	4770      	bx	lr
 801b12c:	2400003c 	.word	0x2400003c

0801b130 <rand>:
 801b130:	b538      	push	{r3, r4, r5, lr}
 801b132:	4b13      	ldr	r3, [pc, #76]	; (801b180 <rand+0x50>)
 801b134:	681c      	ldr	r4, [r3, #0]
 801b136:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801b138:	b97b      	cbnz	r3, 801b15a <rand+0x2a>
 801b13a:	2018      	movs	r0, #24
 801b13c:	f001 f9a8 	bl	801c490 <malloc>
 801b140:	4a10      	ldr	r2, [pc, #64]	; (801b184 <rand+0x54>)
 801b142:	4b11      	ldr	r3, [pc, #68]	; (801b188 <rand+0x58>)
 801b144:	63a0      	str	r0, [r4, #56]	; 0x38
 801b146:	e9c0 2300 	strd	r2, r3, [r0]
 801b14a:	4b10      	ldr	r3, [pc, #64]	; (801b18c <rand+0x5c>)
 801b14c:	6083      	str	r3, [r0, #8]
 801b14e:	230b      	movs	r3, #11
 801b150:	8183      	strh	r3, [r0, #12]
 801b152:	2201      	movs	r2, #1
 801b154:	2300      	movs	r3, #0
 801b156:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801b15a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801b15c:	480c      	ldr	r0, [pc, #48]	; (801b190 <rand+0x60>)
 801b15e:	690a      	ldr	r2, [r1, #16]
 801b160:	694b      	ldr	r3, [r1, #20]
 801b162:	4c0c      	ldr	r4, [pc, #48]	; (801b194 <rand+0x64>)
 801b164:	4350      	muls	r0, r2
 801b166:	fb04 0003 	mla	r0, r4, r3, r0
 801b16a:	fba2 2304 	umull	r2, r3, r2, r4
 801b16e:	4403      	add	r3, r0
 801b170:	1c54      	adds	r4, r2, #1
 801b172:	f143 0500 	adc.w	r5, r3, #0
 801b176:	e9c1 4504 	strd	r4, r5, [r1, #16]
 801b17a:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 801b17e:	bd38      	pop	{r3, r4, r5, pc}
 801b180:	2400003c 	.word	0x2400003c
 801b184:	abcd330e 	.word	0xabcd330e
 801b188:	e66d1234 	.word	0xe66d1234
 801b18c:	0005deec 	.word	0x0005deec
 801b190:	5851f42d 	.word	0x5851f42d
 801b194:	4c957f2d 	.word	0x4c957f2d

0801b198 <_raise_r>:
 801b198:	291f      	cmp	r1, #31
 801b19a:	b538      	push	{r3, r4, r5, lr}
 801b19c:	4604      	mov	r4, r0
 801b19e:	460d      	mov	r5, r1
 801b1a0:	d904      	bls.n	801b1ac <_raise_r+0x14>
 801b1a2:	2316      	movs	r3, #22
 801b1a4:	6003      	str	r3, [r0, #0]
 801b1a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b1aa:	bd38      	pop	{r3, r4, r5, pc}
 801b1ac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801b1ae:	b112      	cbz	r2, 801b1b6 <_raise_r+0x1e>
 801b1b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801b1b4:	b94b      	cbnz	r3, 801b1ca <_raise_r+0x32>
 801b1b6:	4620      	mov	r0, r4
 801b1b8:	f000 f830 	bl	801b21c <_getpid_r>
 801b1bc:	462a      	mov	r2, r5
 801b1be:	4601      	mov	r1, r0
 801b1c0:	4620      	mov	r0, r4
 801b1c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b1c6:	f000 b817 	b.w	801b1f8 <_kill_r>
 801b1ca:	2b01      	cmp	r3, #1
 801b1cc:	d00a      	beq.n	801b1e4 <_raise_r+0x4c>
 801b1ce:	1c59      	adds	r1, r3, #1
 801b1d0:	d103      	bne.n	801b1da <_raise_r+0x42>
 801b1d2:	2316      	movs	r3, #22
 801b1d4:	6003      	str	r3, [r0, #0]
 801b1d6:	2001      	movs	r0, #1
 801b1d8:	e7e7      	b.n	801b1aa <_raise_r+0x12>
 801b1da:	2400      	movs	r4, #0
 801b1dc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801b1e0:	4628      	mov	r0, r5
 801b1e2:	4798      	blx	r3
 801b1e4:	2000      	movs	r0, #0
 801b1e6:	e7e0      	b.n	801b1aa <_raise_r+0x12>

0801b1e8 <raise>:
 801b1e8:	4b02      	ldr	r3, [pc, #8]	; (801b1f4 <raise+0xc>)
 801b1ea:	4601      	mov	r1, r0
 801b1ec:	6818      	ldr	r0, [r3, #0]
 801b1ee:	f7ff bfd3 	b.w	801b198 <_raise_r>
 801b1f2:	bf00      	nop
 801b1f4:	2400003c 	.word	0x2400003c

0801b1f8 <_kill_r>:
 801b1f8:	b538      	push	{r3, r4, r5, lr}
 801b1fa:	4c07      	ldr	r4, [pc, #28]	; (801b218 <_kill_r+0x20>)
 801b1fc:	2300      	movs	r3, #0
 801b1fe:	4605      	mov	r5, r0
 801b200:	4608      	mov	r0, r1
 801b202:	4611      	mov	r1, r2
 801b204:	6023      	str	r3, [r4, #0]
 801b206:	f7e5 ff75 	bl	80010f4 <_kill>
 801b20a:	1c43      	adds	r3, r0, #1
 801b20c:	d102      	bne.n	801b214 <_kill_r+0x1c>
 801b20e:	6823      	ldr	r3, [r4, #0]
 801b210:	b103      	cbz	r3, 801b214 <_kill_r+0x1c>
 801b212:	602b      	str	r3, [r5, #0]
 801b214:	bd38      	pop	{r3, r4, r5, pc}
 801b216:	bf00      	nop
 801b218:	2400ce5c 	.word	0x2400ce5c

0801b21c <_getpid_r>:
 801b21c:	f7e5 bf62 	b.w	80010e4 <_getpid>

0801b220 <siprintf>:
 801b220:	b40e      	push	{r1, r2, r3}
 801b222:	b500      	push	{lr}
 801b224:	b09c      	sub	sp, #112	; 0x70
 801b226:	ab1d      	add	r3, sp, #116	; 0x74
 801b228:	9002      	str	r0, [sp, #8]
 801b22a:	9006      	str	r0, [sp, #24]
 801b22c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801b230:	4809      	ldr	r0, [pc, #36]	; (801b258 <siprintf+0x38>)
 801b232:	9107      	str	r1, [sp, #28]
 801b234:	9104      	str	r1, [sp, #16]
 801b236:	4909      	ldr	r1, [pc, #36]	; (801b25c <siprintf+0x3c>)
 801b238:	f853 2b04 	ldr.w	r2, [r3], #4
 801b23c:	9105      	str	r1, [sp, #20]
 801b23e:	6800      	ldr	r0, [r0, #0]
 801b240:	9301      	str	r3, [sp, #4]
 801b242:	a902      	add	r1, sp, #8
 801b244:	f001 fd18 	bl	801cc78 <_svfiprintf_r>
 801b248:	9b02      	ldr	r3, [sp, #8]
 801b24a:	2200      	movs	r2, #0
 801b24c:	701a      	strb	r2, [r3, #0]
 801b24e:	b01c      	add	sp, #112	; 0x70
 801b250:	f85d eb04 	ldr.w	lr, [sp], #4
 801b254:	b003      	add	sp, #12
 801b256:	4770      	bx	lr
 801b258:	2400003c 	.word	0x2400003c
 801b25c:	ffff0208 	.word	0xffff0208

0801b260 <_vsiprintf_r>:
 801b260:	b500      	push	{lr}
 801b262:	b09b      	sub	sp, #108	; 0x6c
 801b264:	9100      	str	r1, [sp, #0]
 801b266:	9104      	str	r1, [sp, #16]
 801b268:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801b26c:	9105      	str	r1, [sp, #20]
 801b26e:	9102      	str	r1, [sp, #8]
 801b270:	4905      	ldr	r1, [pc, #20]	; (801b288 <_vsiprintf_r+0x28>)
 801b272:	9103      	str	r1, [sp, #12]
 801b274:	4669      	mov	r1, sp
 801b276:	f001 fcff 	bl	801cc78 <_svfiprintf_r>
 801b27a:	9b00      	ldr	r3, [sp, #0]
 801b27c:	2200      	movs	r2, #0
 801b27e:	701a      	strb	r2, [r3, #0]
 801b280:	b01b      	add	sp, #108	; 0x6c
 801b282:	f85d fb04 	ldr.w	pc, [sp], #4
 801b286:	bf00      	nop
 801b288:	ffff0208 	.word	0xffff0208

0801b28c <vsiprintf>:
 801b28c:	4613      	mov	r3, r2
 801b28e:	460a      	mov	r2, r1
 801b290:	4601      	mov	r1, r0
 801b292:	4802      	ldr	r0, [pc, #8]	; (801b29c <vsiprintf+0x10>)
 801b294:	6800      	ldr	r0, [r0, #0]
 801b296:	f7ff bfe3 	b.w	801b260 <_vsiprintf_r>
 801b29a:	bf00      	nop
 801b29c:	2400003c 	.word	0x2400003c

0801b2a0 <__swbuf_r>:
 801b2a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b2a2:	460e      	mov	r6, r1
 801b2a4:	4614      	mov	r4, r2
 801b2a6:	4605      	mov	r5, r0
 801b2a8:	b118      	cbz	r0, 801b2b2 <__swbuf_r+0x12>
 801b2aa:	6983      	ldr	r3, [r0, #24]
 801b2ac:	b90b      	cbnz	r3, 801b2b2 <__swbuf_r+0x12>
 801b2ae:	f000 fff3 	bl	801c298 <__sinit>
 801b2b2:	4b21      	ldr	r3, [pc, #132]	; (801b338 <__swbuf_r+0x98>)
 801b2b4:	429c      	cmp	r4, r3
 801b2b6:	d12a      	bne.n	801b30e <__swbuf_r+0x6e>
 801b2b8:	686c      	ldr	r4, [r5, #4]
 801b2ba:	69a3      	ldr	r3, [r4, #24]
 801b2bc:	60a3      	str	r3, [r4, #8]
 801b2be:	89a3      	ldrh	r3, [r4, #12]
 801b2c0:	071a      	lsls	r2, r3, #28
 801b2c2:	d52e      	bpl.n	801b322 <__swbuf_r+0x82>
 801b2c4:	6923      	ldr	r3, [r4, #16]
 801b2c6:	b363      	cbz	r3, 801b322 <__swbuf_r+0x82>
 801b2c8:	6923      	ldr	r3, [r4, #16]
 801b2ca:	6820      	ldr	r0, [r4, #0]
 801b2cc:	1ac0      	subs	r0, r0, r3
 801b2ce:	6963      	ldr	r3, [r4, #20]
 801b2d0:	b2f6      	uxtb	r6, r6
 801b2d2:	4283      	cmp	r3, r0
 801b2d4:	4637      	mov	r7, r6
 801b2d6:	dc04      	bgt.n	801b2e2 <__swbuf_r+0x42>
 801b2d8:	4621      	mov	r1, r4
 801b2da:	4628      	mov	r0, r5
 801b2dc:	f000 ff72 	bl	801c1c4 <_fflush_r>
 801b2e0:	bb28      	cbnz	r0, 801b32e <__swbuf_r+0x8e>
 801b2e2:	68a3      	ldr	r3, [r4, #8]
 801b2e4:	3b01      	subs	r3, #1
 801b2e6:	60a3      	str	r3, [r4, #8]
 801b2e8:	6823      	ldr	r3, [r4, #0]
 801b2ea:	1c5a      	adds	r2, r3, #1
 801b2ec:	6022      	str	r2, [r4, #0]
 801b2ee:	701e      	strb	r6, [r3, #0]
 801b2f0:	6963      	ldr	r3, [r4, #20]
 801b2f2:	3001      	adds	r0, #1
 801b2f4:	4283      	cmp	r3, r0
 801b2f6:	d004      	beq.n	801b302 <__swbuf_r+0x62>
 801b2f8:	89a3      	ldrh	r3, [r4, #12]
 801b2fa:	07db      	lsls	r3, r3, #31
 801b2fc:	d519      	bpl.n	801b332 <__swbuf_r+0x92>
 801b2fe:	2e0a      	cmp	r6, #10
 801b300:	d117      	bne.n	801b332 <__swbuf_r+0x92>
 801b302:	4621      	mov	r1, r4
 801b304:	4628      	mov	r0, r5
 801b306:	f000 ff5d 	bl	801c1c4 <_fflush_r>
 801b30a:	b190      	cbz	r0, 801b332 <__swbuf_r+0x92>
 801b30c:	e00f      	b.n	801b32e <__swbuf_r+0x8e>
 801b30e:	4b0b      	ldr	r3, [pc, #44]	; (801b33c <__swbuf_r+0x9c>)
 801b310:	429c      	cmp	r4, r3
 801b312:	d101      	bne.n	801b318 <__swbuf_r+0x78>
 801b314:	68ac      	ldr	r4, [r5, #8]
 801b316:	e7d0      	b.n	801b2ba <__swbuf_r+0x1a>
 801b318:	4b09      	ldr	r3, [pc, #36]	; (801b340 <__swbuf_r+0xa0>)
 801b31a:	429c      	cmp	r4, r3
 801b31c:	bf08      	it	eq
 801b31e:	68ec      	ldreq	r4, [r5, #12]
 801b320:	e7cb      	b.n	801b2ba <__swbuf_r+0x1a>
 801b322:	4621      	mov	r1, r4
 801b324:	4628      	mov	r0, r5
 801b326:	f000 f81b 	bl	801b360 <__swsetup_r>
 801b32a:	2800      	cmp	r0, #0
 801b32c:	d0cc      	beq.n	801b2c8 <__swbuf_r+0x28>
 801b32e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801b332:	4638      	mov	r0, r7
 801b334:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b336:	bf00      	nop
 801b338:	08020894 	.word	0x08020894
 801b33c:	080208b4 	.word	0x080208b4
 801b340:	08020874 	.word	0x08020874

0801b344 <__ascii_wctomb>:
 801b344:	b149      	cbz	r1, 801b35a <__ascii_wctomb+0x16>
 801b346:	2aff      	cmp	r2, #255	; 0xff
 801b348:	bf85      	ittet	hi
 801b34a:	238a      	movhi	r3, #138	; 0x8a
 801b34c:	6003      	strhi	r3, [r0, #0]
 801b34e:	700a      	strbls	r2, [r1, #0]
 801b350:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 801b354:	bf98      	it	ls
 801b356:	2001      	movls	r0, #1
 801b358:	4770      	bx	lr
 801b35a:	4608      	mov	r0, r1
 801b35c:	4770      	bx	lr
	...

0801b360 <__swsetup_r>:
 801b360:	4b32      	ldr	r3, [pc, #200]	; (801b42c <__swsetup_r+0xcc>)
 801b362:	b570      	push	{r4, r5, r6, lr}
 801b364:	681d      	ldr	r5, [r3, #0]
 801b366:	4606      	mov	r6, r0
 801b368:	460c      	mov	r4, r1
 801b36a:	b125      	cbz	r5, 801b376 <__swsetup_r+0x16>
 801b36c:	69ab      	ldr	r3, [r5, #24]
 801b36e:	b913      	cbnz	r3, 801b376 <__swsetup_r+0x16>
 801b370:	4628      	mov	r0, r5
 801b372:	f000 ff91 	bl	801c298 <__sinit>
 801b376:	4b2e      	ldr	r3, [pc, #184]	; (801b430 <__swsetup_r+0xd0>)
 801b378:	429c      	cmp	r4, r3
 801b37a:	d10f      	bne.n	801b39c <__swsetup_r+0x3c>
 801b37c:	686c      	ldr	r4, [r5, #4]
 801b37e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b382:	b29a      	uxth	r2, r3
 801b384:	0715      	lsls	r5, r2, #28
 801b386:	d42c      	bmi.n	801b3e2 <__swsetup_r+0x82>
 801b388:	06d0      	lsls	r0, r2, #27
 801b38a:	d411      	bmi.n	801b3b0 <__swsetup_r+0x50>
 801b38c:	2209      	movs	r2, #9
 801b38e:	6032      	str	r2, [r6, #0]
 801b390:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b394:	81a3      	strh	r3, [r4, #12]
 801b396:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b39a:	e03e      	b.n	801b41a <__swsetup_r+0xba>
 801b39c:	4b25      	ldr	r3, [pc, #148]	; (801b434 <__swsetup_r+0xd4>)
 801b39e:	429c      	cmp	r4, r3
 801b3a0:	d101      	bne.n	801b3a6 <__swsetup_r+0x46>
 801b3a2:	68ac      	ldr	r4, [r5, #8]
 801b3a4:	e7eb      	b.n	801b37e <__swsetup_r+0x1e>
 801b3a6:	4b24      	ldr	r3, [pc, #144]	; (801b438 <__swsetup_r+0xd8>)
 801b3a8:	429c      	cmp	r4, r3
 801b3aa:	bf08      	it	eq
 801b3ac:	68ec      	ldreq	r4, [r5, #12]
 801b3ae:	e7e6      	b.n	801b37e <__swsetup_r+0x1e>
 801b3b0:	0751      	lsls	r1, r2, #29
 801b3b2:	d512      	bpl.n	801b3da <__swsetup_r+0x7a>
 801b3b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b3b6:	b141      	cbz	r1, 801b3ca <__swsetup_r+0x6a>
 801b3b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b3bc:	4299      	cmp	r1, r3
 801b3be:	d002      	beq.n	801b3c6 <__swsetup_r+0x66>
 801b3c0:	4630      	mov	r0, r6
 801b3c2:	f001 fb57 	bl	801ca74 <_free_r>
 801b3c6:	2300      	movs	r3, #0
 801b3c8:	6363      	str	r3, [r4, #52]	; 0x34
 801b3ca:	89a3      	ldrh	r3, [r4, #12]
 801b3cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801b3d0:	81a3      	strh	r3, [r4, #12]
 801b3d2:	2300      	movs	r3, #0
 801b3d4:	6063      	str	r3, [r4, #4]
 801b3d6:	6923      	ldr	r3, [r4, #16]
 801b3d8:	6023      	str	r3, [r4, #0]
 801b3da:	89a3      	ldrh	r3, [r4, #12]
 801b3dc:	f043 0308 	orr.w	r3, r3, #8
 801b3e0:	81a3      	strh	r3, [r4, #12]
 801b3e2:	6923      	ldr	r3, [r4, #16]
 801b3e4:	b94b      	cbnz	r3, 801b3fa <__swsetup_r+0x9a>
 801b3e6:	89a3      	ldrh	r3, [r4, #12]
 801b3e8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801b3ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b3f0:	d003      	beq.n	801b3fa <__swsetup_r+0x9a>
 801b3f2:	4621      	mov	r1, r4
 801b3f4:	4630      	mov	r0, r6
 801b3f6:	f001 f80b 	bl	801c410 <__smakebuf_r>
 801b3fa:	89a2      	ldrh	r2, [r4, #12]
 801b3fc:	f012 0301 	ands.w	r3, r2, #1
 801b400:	d00c      	beq.n	801b41c <__swsetup_r+0xbc>
 801b402:	2300      	movs	r3, #0
 801b404:	60a3      	str	r3, [r4, #8]
 801b406:	6963      	ldr	r3, [r4, #20]
 801b408:	425b      	negs	r3, r3
 801b40a:	61a3      	str	r3, [r4, #24]
 801b40c:	6923      	ldr	r3, [r4, #16]
 801b40e:	b953      	cbnz	r3, 801b426 <__swsetup_r+0xc6>
 801b410:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b414:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801b418:	d1ba      	bne.n	801b390 <__swsetup_r+0x30>
 801b41a:	bd70      	pop	{r4, r5, r6, pc}
 801b41c:	0792      	lsls	r2, r2, #30
 801b41e:	bf58      	it	pl
 801b420:	6963      	ldrpl	r3, [r4, #20]
 801b422:	60a3      	str	r3, [r4, #8]
 801b424:	e7f2      	b.n	801b40c <__swsetup_r+0xac>
 801b426:	2000      	movs	r0, #0
 801b428:	e7f7      	b.n	801b41a <__swsetup_r+0xba>
 801b42a:	bf00      	nop
 801b42c:	2400003c 	.word	0x2400003c
 801b430:	08020894 	.word	0x08020894
 801b434:	080208b4 	.word	0x080208b4
 801b438:	08020874 	.word	0x08020874

0801b43c <__register_exitproc>:
 801b43c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b440:	4d2c      	ldr	r5, [pc, #176]	; (801b4f4 <__register_exitproc+0xb8>)
 801b442:	682c      	ldr	r4, [r5, #0]
 801b444:	4607      	mov	r7, r0
 801b446:	460e      	mov	r6, r1
 801b448:	4691      	mov	r9, r2
 801b44a:	4698      	mov	r8, r3
 801b44c:	b934      	cbnz	r4, 801b45c <__register_exitproc+0x20>
 801b44e:	4b2a      	ldr	r3, [pc, #168]	; (801b4f8 <__register_exitproc+0xbc>)
 801b450:	4c2a      	ldr	r4, [pc, #168]	; (801b4fc <__register_exitproc+0xc0>)
 801b452:	602c      	str	r4, [r5, #0]
 801b454:	b113      	cbz	r3, 801b45c <__register_exitproc+0x20>
 801b456:	681b      	ldr	r3, [r3, #0]
 801b458:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 801b45c:	6863      	ldr	r3, [r4, #4]
 801b45e:	2b1f      	cmp	r3, #31
 801b460:	dd3d      	ble.n	801b4de <__register_exitproc+0xa2>
 801b462:	4b27      	ldr	r3, [pc, #156]	; (801b500 <__register_exitproc+0xc4>)
 801b464:	b91b      	cbnz	r3, 801b46e <__register_exitproc+0x32>
 801b466:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b46a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b46e:	208c      	movs	r0, #140	; 0x8c
 801b470:	f001 f80e 	bl	801c490 <malloc>
 801b474:	4604      	mov	r4, r0
 801b476:	2800      	cmp	r0, #0
 801b478:	d0f5      	beq.n	801b466 <__register_exitproc+0x2a>
 801b47a:	2300      	movs	r3, #0
 801b47c:	682a      	ldr	r2, [r5, #0]
 801b47e:	6002      	str	r2, [r0, #0]
 801b480:	6043      	str	r3, [r0, #4]
 801b482:	6028      	str	r0, [r5, #0]
 801b484:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 801b488:	b30f      	cbz	r7, 801b4ce <__register_exitproc+0x92>
 801b48a:	f44f 7084 	mov.w	r0, #264	; 0x108
 801b48e:	f000 ffff 	bl	801c490 <malloc>
 801b492:	2800      	cmp	r0, #0
 801b494:	d0e7      	beq.n	801b466 <__register_exitproc+0x2a>
 801b496:	2300      	movs	r3, #0
 801b498:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 801b49c:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 801b4a0:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 801b4a4:	6862      	ldr	r2, [r4, #4]
 801b4a6:	f840 9022 	str.w	r9, [r0, r2, lsl #2]
 801b4aa:	2301      	movs	r3, #1
 801b4ac:	4093      	lsls	r3, r2
 801b4ae:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 801b4b2:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
 801b4b6:	431a      	orrs	r2, r3
 801b4b8:	2f02      	cmp	r7, #2
 801b4ba:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
 801b4be:	f8c1 8080 	str.w	r8, [r1, #128]	; 0x80
 801b4c2:	bf02      	ittt	eq
 801b4c4:	f8d0 2104 	ldreq.w	r2, [r0, #260]	; 0x104
 801b4c8:	4313      	orreq	r3, r2
 801b4ca:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 801b4ce:	6863      	ldr	r3, [r4, #4]
 801b4d0:	1c5a      	adds	r2, r3, #1
 801b4d2:	3302      	adds	r3, #2
 801b4d4:	6062      	str	r2, [r4, #4]
 801b4d6:	2000      	movs	r0, #0
 801b4d8:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 801b4dc:	e7c5      	b.n	801b46a <__register_exitproc+0x2e>
 801b4de:	2f00      	cmp	r7, #0
 801b4e0:	d0f5      	beq.n	801b4ce <__register_exitproc+0x92>
 801b4e2:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 801b4e6:	2800      	cmp	r0, #0
 801b4e8:	d1dc      	bne.n	801b4a4 <__register_exitproc+0x68>
 801b4ea:	4b05      	ldr	r3, [pc, #20]	; (801b500 <__register_exitproc+0xc4>)
 801b4ec:	2b00      	cmp	r3, #0
 801b4ee:	d0ba      	beq.n	801b466 <__register_exitproc+0x2a>
 801b4f0:	e7cb      	b.n	801b48a <__register_exitproc+0x4e>
 801b4f2:	bf00      	nop
 801b4f4:	24009568 	.word	0x24009568
 801b4f8:	00000000 	.word	0x00000000
 801b4fc:	240094dc 	.word	0x240094dc
 801b500:	0801c491 	.word	0x0801c491

0801b504 <quorem>:
 801b504:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b508:	6903      	ldr	r3, [r0, #16]
 801b50a:	690c      	ldr	r4, [r1, #16]
 801b50c:	42a3      	cmp	r3, r4
 801b50e:	4680      	mov	r8, r0
 801b510:	f2c0 8082 	blt.w	801b618 <quorem+0x114>
 801b514:	3c01      	subs	r4, #1
 801b516:	f101 0714 	add.w	r7, r1, #20
 801b51a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 801b51e:	f100 0614 	add.w	r6, r0, #20
 801b522:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 801b526:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 801b52a:	eb06 030c 	add.w	r3, r6, ip
 801b52e:	3501      	adds	r5, #1
 801b530:	eb07 090c 	add.w	r9, r7, ip
 801b534:	9301      	str	r3, [sp, #4]
 801b536:	fbb0 f5f5 	udiv	r5, r0, r5
 801b53a:	b395      	cbz	r5, 801b5a2 <quorem+0x9e>
 801b53c:	f04f 0a00 	mov.w	sl, #0
 801b540:	4638      	mov	r0, r7
 801b542:	46b6      	mov	lr, r6
 801b544:	46d3      	mov	fp, sl
 801b546:	f850 2b04 	ldr.w	r2, [r0], #4
 801b54a:	b293      	uxth	r3, r2
 801b54c:	fb05 a303 	mla	r3, r5, r3, sl
 801b550:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801b554:	b29b      	uxth	r3, r3
 801b556:	ebab 0303 	sub.w	r3, fp, r3
 801b55a:	0c12      	lsrs	r2, r2, #16
 801b55c:	f8de b000 	ldr.w	fp, [lr]
 801b560:	fb05 a202 	mla	r2, r5, r2, sl
 801b564:	fa13 f38b 	uxtah	r3, r3, fp
 801b568:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 801b56c:	fa1f fb82 	uxth.w	fp, r2
 801b570:	f8de 2000 	ldr.w	r2, [lr]
 801b574:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 801b578:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801b57c:	b29b      	uxth	r3, r3
 801b57e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b582:	4581      	cmp	r9, r0
 801b584:	ea4f 4b22 	mov.w	fp, r2, asr #16
 801b588:	f84e 3b04 	str.w	r3, [lr], #4
 801b58c:	d2db      	bcs.n	801b546 <quorem+0x42>
 801b58e:	f856 300c 	ldr.w	r3, [r6, ip]
 801b592:	b933      	cbnz	r3, 801b5a2 <quorem+0x9e>
 801b594:	9b01      	ldr	r3, [sp, #4]
 801b596:	3b04      	subs	r3, #4
 801b598:	429e      	cmp	r6, r3
 801b59a:	461a      	mov	r2, r3
 801b59c:	d330      	bcc.n	801b600 <quorem+0xfc>
 801b59e:	f8c8 4010 	str.w	r4, [r8, #16]
 801b5a2:	4640      	mov	r0, r8
 801b5a4:	f001 f992 	bl	801c8cc <__mcmp>
 801b5a8:	2800      	cmp	r0, #0
 801b5aa:	db25      	blt.n	801b5f8 <quorem+0xf4>
 801b5ac:	3501      	adds	r5, #1
 801b5ae:	4630      	mov	r0, r6
 801b5b0:	f04f 0c00 	mov.w	ip, #0
 801b5b4:	f857 2b04 	ldr.w	r2, [r7], #4
 801b5b8:	f8d0 e000 	ldr.w	lr, [r0]
 801b5bc:	b293      	uxth	r3, r2
 801b5be:	ebac 0303 	sub.w	r3, ip, r3
 801b5c2:	0c12      	lsrs	r2, r2, #16
 801b5c4:	fa13 f38e 	uxtah	r3, r3, lr
 801b5c8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801b5cc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801b5d0:	b29b      	uxth	r3, r3
 801b5d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b5d6:	45b9      	cmp	r9, r7
 801b5d8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801b5dc:	f840 3b04 	str.w	r3, [r0], #4
 801b5e0:	d2e8      	bcs.n	801b5b4 <quorem+0xb0>
 801b5e2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 801b5e6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801b5ea:	b92a      	cbnz	r2, 801b5f8 <quorem+0xf4>
 801b5ec:	3b04      	subs	r3, #4
 801b5ee:	429e      	cmp	r6, r3
 801b5f0:	461a      	mov	r2, r3
 801b5f2:	d30b      	bcc.n	801b60c <quorem+0x108>
 801b5f4:	f8c8 4010 	str.w	r4, [r8, #16]
 801b5f8:	4628      	mov	r0, r5
 801b5fa:	b003      	add	sp, #12
 801b5fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b600:	6812      	ldr	r2, [r2, #0]
 801b602:	3b04      	subs	r3, #4
 801b604:	2a00      	cmp	r2, #0
 801b606:	d1ca      	bne.n	801b59e <quorem+0x9a>
 801b608:	3c01      	subs	r4, #1
 801b60a:	e7c5      	b.n	801b598 <quorem+0x94>
 801b60c:	6812      	ldr	r2, [r2, #0]
 801b60e:	3b04      	subs	r3, #4
 801b610:	2a00      	cmp	r2, #0
 801b612:	d1ef      	bne.n	801b5f4 <quorem+0xf0>
 801b614:	3c01      	subs	r4, #1
 801b616:	e7ea      	b.n	801b5ee <quorem+0xea>
 801b618:	2000      	movs	r0, #0
 801b61a:	e7ee      	b.n	801b5fa <quorem+0xf6>
 801b61c:	0000      	movs	r0, r0
	...

0801b620 <_dtoa_r>:
 801b620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b624:	ec57 6b10 	vmov	r6, r7, d0
 801b628:	b095      	sub	sp, #84	; 0x54
 801b62a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801b62c:	9108      	str	r1, [sp, #32]
 801b62e:	4604      	mov	r4, r0
 801b630:	920a      	str	r2, [sp, #40]	; 0x28
 801b632:	9311      	str	r3, [sp, #68]	; 0x44
 801b634:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 801b638:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801b63c:	b93d      	cbnz	r5, 801b64e <_dtoa_r+0x2e>
 801b63e:	2010      	movs	r0, #16
 801b640:	f000 ff26 	bl	801c490 <malloc>
 801b644:	6260      	str	r0, [r4, #36]	; 0x24
 801b646:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801b64a:	6005      	str	r5, [r0, #0]
 801b64c:	60c5      	str	r5, [r0, #12]
 801b64e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b650:	6819      	ldr	r1, [r3, #0]
 801b652:	b151      	cbz	r1, 801b66a <_dtoa_r+0x4a>
 801b654:	685a      	ldr	r2, [r3, #4]
 801b656:	604a      	str	r2, [r1, #4]
 801b658:	2301      	movs	r3, #1
 801b65a:	4093      	lsls	r3, r2
 801b65c:	608b      	str	r3, [r1, #8]
 801b65e:	4620      	mov	r0, r4
 801b660:	f000 ff52 	bl	801c508 <_Bfree>
 801b664:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b666:	2200      	movs	r2, #0
 801b668:	601a      	str	r2, [r3, #0]
 801b66a:	1e3b      	subs	r3, r7, #0
 801b66c:	bfb9      	ittee	lt
 801b66e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801b672:	9303      	strlt	r3, [sp, #12]
 801b674:	2300      	movge	r3, #0
 801b676:	f8c8 3000 	strge.w	r3, [r8]
 801b67a:	9d03      	ldr	r5, [sp, #12]
 801b67c:	4bac      	ldr	r3, [pc, #688]	; (801b930 <_dtoa_r+0x310>)
 801b67e:	bfbc      	itt	lt
 801b680:	2201      	movlt	r2, #1
 801b682:	f8c8 2000 	strlt.w	r2, [r8]
 801b686:	43ab      	bics	r3, r5
 801b688:	d11b      	bne.n	801b6c2 <_dtoa_r+0xa2>
 801b68a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b68c:	f242 730f 	movw	r3, #9999	; 0x270f
 801b690:	6013      	str	r3, [r2, #0]
 801b692:	9b02      	ldr	r3, [sp, #8]
 801b694:	b923      	cbnz	r3, 801b6a0 <_dtoa_r+0x80>
 801b696:	f3c5 0513 	ubfx	r5, r5, #0, #20
 801b69a:	2d00      	cmp	r5, #0
 801b69c:	f000 84dd 	beq.w	801c05a <_dtoa_r+0xa3a>
 801b6a0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801b6a2:	b953      	cbnz	r3, 801b6ba <_dtoa_r+0x9a>
 801b6a4:	4ba3      	ldr	r3, [pc, #652]	; (801b934 <_dtoa_r+0x314>)
 801b6a6:	e020      	b.n	801b6ea <_dtoa_r+0xca>
 801b6a8:	4ba3      	ldr	r3, [pc, #652]	; (801b938 <_dtoa_r+0x318>)
 801b6aa:	9304      	str	r3, [sp, #16]
 801b6ac:	3308      	adds	r3, #8
 801b6ae:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801b6b0:	6013      	str	r3, [r2, #0]
 801b6b2:	9804      	ldr	r0, [sp, #16]
 801b6b4:	b015      	add	sp, #84	; 0x54
 801b6b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b6ba:	4b9e      	ldr	r3, [pc, #632]	; (801b934 <_dtoa_r+0x314>)
 801b6bc:	9304      	str	r3, [sp, #16]
 801b6be:	3303      	adds	r3, #3
 801b6c0:	e7f5      	b.n	801b6ae <_dtoa_r+0x8e>
 801b6c2:	ed9d 7b02 	vldr	d7, [sp, #8]
 801b6c6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801b6ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b6ce:	ed8d 7b04 	vstr	d7, [sp, #16]
 801b6d2:	d10c      	bne.n	801b6ee <_dtoa_r+0xce>
 801b6d4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b6d6:	2301      	movs	r3, #1
 801b6d8:	6013      	str	r3, [r2, #0]
 801b6da:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801b6dc:	2b00      	cmp	r3, #0
 801b6de:	f000 84b9 	beq.w	801c054 <_dtoa_r+0xa34>
 801b6e2:	4b96      	ldr	r3, [pc, #600]	; (801b93c <_dtoa_r+0x31c>)
 801b6e4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801b6e6:	6013      	str	r3, [r2, #0]
 801b6e8:	3b01      	subs	r3, #1
 801b6ea:	9304      	str	r3, [sp, #16]
 801b6ec:	e7e1      	b.n	801b6b2 <_dtoa_r+0x92>
 801b6ee:	a913      	add	r1, sp, #76	; 0x4c
 801b6f0:	aa12      	add	r2, sp, #72	; 0x48
 801b6f2:	ed9d 0b04 	vldr	d0, [sp, #16]
 801b6f6:	4620      	mov	r0, r4
 801b6f8:	f001 f95f 	bl	801c9ba <__d2b>
 801b6fc:	f3c5 560a 	ubfx	r6, r5, #20, #11
 801b700:	9001      	str	r0, [sp, #4]
 801b702:	9912      	ldr	r1, [sp, #72]	; 0x48
 801b704:	2e00      	cmp	r6, #0
 801b706:	d046      	beq.n	801b796 <_dtoa_r+0x176>
 801b708:	9805      	ldr	r0, [sp, #20]
 801b70a:	f3c0 0013 	ubfx	r0, r0, #0, #20
 801b70e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801b712:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 801b716:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801b71a:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 801b71e:	2700      	movs	r7, #0
 801b720:	ee07 aa90 	vmov	s15, sl
 801b724:	ec43 2b16 	vmov	d6, r2, r3
 801b728:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 801b72c:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 801b918 <_dtoa_r+0x2f8>
 801b730:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 801b734:	ee36 7b47 	vsub.f64	d7, d6, d7
 801b738:	ed9f 6b79 	vldr	d6, [pc, #484]	; 801b920 <_dtoa_r+0x300>
 801b73c:	eea7 6b04 	vfma.f64	d6, d7, d4
 801b740:	eeb0 7b46 	vmov.f64	d7, d6
 801b744:	ed9f 6b78 	vldr	d6, [pc, #480]	; 801b928 <_dtoa_r+0x308>
 801b748:	eea5 7b06 	vfma.f64	d7, d5, d6
 801b74c:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801b750:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801b754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b758:	ee16 ba90 	vmov	fp, s13
 801b75c:	d508      	bpl.n	801b770 <_dtoa_r+0x150>
 801b75e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801b762:	eeb4 6b47 	vcmp.f64	d6, d7
 801b766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b76a:	bf18      	it	ne
 801b76c:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 801b770:	f1bb 0f16 	cmp.w	fp, #22
 801b774:	d834      	bhi.n	801b7e0 <_dtoa_r+0x1c0>
 801b776:	4b72      	ldr	r3, [pc, #456]	; (801b940 <_dtoa_r+0x320>)
 801b778:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801b77c:	ed93 7b00 	vldr	d7, [r3]
 801b780:	ed9d 6b02 	vldr	d6, [sp, #8]
 801b784:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801b788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b78c:	dd01      	ble.n	801b792 <_dtoa_r+0x172>
 801b78e:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801b792:	2300      	movs	r3, #0
 801b794:	e025      	b.n	801b7e2 <_dtoa_r+0x1c2>
 801b796:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801b798:	eb01 0a03 	add.w	sl, r1, r3
 801b79c:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 801b7a0:	2b20      	cmp	r3, #32
 801b7a2:	dd17      	ble.n	801b7d4 <_dtoa_r+0x1b4>
 801b7a4:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 801b7a8:	9a02      	ldr	r2, [sp, #8]
 801b7aa:	409d      	lsls	r5, r3
 801b7ac:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 801b7b0:	fa22 f303 	lsr.w	r3, r2, r3
 801b7b4:	432b      	orrs	r3, r5
 801b7b6:	ee07 3a90 	vmov	s15, r3
 801b7ba:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801b7be:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801b7c2:	ed8d 7b04 	vstr	d7, [sp, #16]
 801b7c6:	9805      	ldr	r0, [sp, #20]
 801b7c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801b7cc:	2701      	movs	r7, #1
 801b7ce:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 801b7d2:	e7a5      	b.n	801b720 <_dtoa_r+0x100>
 801b7d4:	9a02      	ldr	r2, [sp, #8]
 801b7d6:	f1c3 0320 	rsb	r3, r3, #32
 801b7da:	fa02 f303 	lsl.w	r3, r2, r3
 801b7de:	e7ea      	b.n	801b7b6 <_dtoa_r+0x196>
 801b7e0:	2301      	movs	r3, #1
 801b7e2:	eba1 0a0a 	sub.w	sl, r1, sl
 801b7e6:	9310      	str	r3, [sp, #64]	; 0x40
 801b7e8:	f1ba 0301 	subs.w	r3, sl, #1
 801b7ec:	9307      	str	r3, [sp, #28]
 801b7ee:	bf43      	ittte	mi
 801b7f0:	2300      	movmi	r3, #0
 801b7f2:	f1ca 0a01 	rsbmi	sl, sl, #1
 801b7f6:	9307      	strmi	r3, [sp, #28]
 801b7f8:	f04f 0a00 	movpl.w	sl, #0
 801b7fc:	f1bb 0f00 	cmp.w	fp, #0
 801b800:	db19      	blt.n	801b836 <_dtoa_r+0x216>
 801b802:	9b07      	ldr	r3, [sp, #28]
 801b804:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 801b808:	445b      	add	r3, fp
 801b80a:	9307      	str	r3, [sp, #28]
 801b80c:	f04f 0800 	mov.w	r8, #0
 801b810:	9b08      	ldr	r3, [sp, #32]
 801b812:	2b09      	cmp	r3, #9
 801b814:	d866      	bhi.n	801b8e4 <_dtoa_r+0x2c4>
 801b816:	2b05      	cmp	r3, #5
 801b818:	bfc4      	itt	gt
 801b81a:	3b04      	subgt	r3, #4
 801b81c:	9308      	strgt	r3, [sp, #32]
 801b81e:	9b08      	ldr	r3, [sp, #32]
 801b820:	f1a3 0302 	sub.w	r3, r3, #2
 801b824:	bfcc      	ite	gt
 801b826:	2500      	movgt	r5, #0
 801b828:	2501      	movle	r5, #1
 801b82a:	2b03      	cmp	r3, #3
 801b82c:	d866      	bhi.n	801b8fc <_dtoa_r+0x2dc>
 801b82e:	e8df f003 	tbb	[pc, r3]
 801b832:	5755      	.short	0x5755
 801b834:	4909      	.short	0x4909
 801b836:	2300      	movs	r3, #0
 801b838:	ebaa 0a0b 	sub.w	sl, sl, fp
 801b83c:	f1cb 0800 	rsb	r8, fp, #0
 801b840:	930b      	str	r3, [sp, #44]	; 0x2c
 801b842:	e7e5      	b.n	801b810 <_dtoa_r+0x1f0>
 801b844:	2301      	movs	r3, #1
 801b846:	9309      	str	r3, [sp, #36]	; 0x24
 801b848:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b84a:	2b00      	cmp	r3, #0
 801b84c:	dd59      	ble.n	801b902 <_dtoa_r+0x2e2>
 801b84e:	9306      	str	r3, [sp, #24]
 801b850:	4699      	mov	r9, r3
 801b852:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801b854:	2200      	movs	r2, #0
 801b856:	6072      	str	r2, [r6, #4]
 801b858:	2204      	movs	r2, #4
 801b85a:	f102 0014 	add.w	r0, r2, #20
 801b85e:	4298      	cmp	r0, r3
 801b860:	6871      	ldr	r1, [r6, #4]
 801b862:	d953      	bls.n	801b90c <_dtoa_r+0x2ec>
 801b864:	4620      	mov	r0, r4
 801b866:	f000 fe1b 	bl	801c4a0 <_Balloc>
 801b86a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b86c:	6030      	str	r0, [r6, #0]
 801b86e:	681b      	ldr	r3, [r3, #0]
 801b870:	9304      	str	r3, [sp, #16]
 801b872:	f1b9 0f0e 	cmp.w	r9, #14
 801b876:	f200 80c2 	bhi.w	801b9fe <_dtoa_r+0x3de>
 801b87a:	2d00      	cmp	r5, #0
 801b87c:	f000 80bf 	beq.w	801b9fe <_dtoa_r+0x3de>
 801b880:	ed9d 7b02 	vldr	d7, [sp, #8]
 801b884:	f1bb 0f00 	cmp.w	fp, #0
 801b888:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 801b88c:	f340 80e6 	ble.w	801ba5c <_dtoa_r+0x43c>
 801b890:	4a2b      	ldr	r2, [pc, #172]	; (801b940 <_dtoa_r+0x320>)
 801b892:	f00b 030f 	and.w	r3, fp, #15
 801b896:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801b89a:	ed93 7b00 	vldr	d7, [r3]
 801b89e:	ea4f 132b 	mov.w	r3, fp, asr #4
 801b8a2:	06da      	lsls	r2, r3, #27
 801b8a4:	f140 80d8 	bpl.w	801ba58 <_dtoa_r+0x438>
 801b8a8:	4a26      	ldr	r2, [pc, #152]	; (801b944 <_dtoa_r+0x324>)
 801b8aa:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 801b8ae:	ed92 6b08 	vldr	d6, [r2, #32]
 801b8b2:	ee85 6b06 	vdiv.f64	d6, d5, d6
 801b8b6:	ed8d 6b02 	vstr	d6, [sp, #8]
 801b8ba:	f003 030f 	and.w	r3, r3, #15
 801b8be:	2203      	movs	r2, #3
 801b8c0:	4920      	ldr	r1, [pc, #128]	; (801b944 <_dtoa_r+0x324>)
 801b8c2:	e04a      	b.n	801b95a <_dtoa_r+0x33a>
 801b8c4:	2301      	movs	r3, #1
 801b8c6:	9309      	str	r3, [sp, #36]	; 0x24
 801b8c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b8ca:	445b      	add	r3, fp
 801b8cc:	f103 0901 	add.w	r9, r3, #1
 801b8d0:	9306      	str	r3, [sp, #24]
 801b8d2:	464b      	mov	r3, r9
 801b8d4:	2b01      	cmp	r3, #1
 801b8d6:	bfb8      	it	lt
 801b8d8:	2301      	movlt	r3, #1
 801b8da:	e7ba      	b.n	801b852 <_dtoa_r+0x232>
 801b8dc:	2300      	movs	r3, #0
 801b8de:	e7b2      	b.n	801b846 <_dtoa_r+0x226>
 801b8e0:	2300      	movs	r3, #0
 801b8e2:	e7f0      	b.n	801b8c6 <_dtoa_r+0x2a6>
 801b8e4:	2501      	movs	r5, #1
 801b8e6:	2300      	movs	r3, #0
 801b8e8:	e9cd 3508 	strd	r3, r5, [sp, #32]
 801b8ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b8f0:	9306      	str	r3, [sp, #24]
 801b8f2:	4699      	mov	r9, r3
 801b8f4:	2200      	movs	r2, #0
 801b8f6:	2312      	movs	r3, #18
 801b8f8:	920a      	str	r2, [sp, #40]	; 0x28
 801b8fa:	e7aa      	b.n	801b852 <_dtoa_r+0x232>
 801b8fc:	2301      	movs	r3, #1
 801b8fe:	9309      	str	r3, [sp, #36]	; 0x24
 801b900:	e7f4      	b.n	801b8ec <_dtoa_r+0x2cc>
 801b902:	2301      	movs	r3, #1
 801b904:	9306      	str	r3, [sp, #24]
 801b906:	4699      	mov	r9, r3
 801b908:	461a      	mov	r2, r3
 801b90a:	e7f5      	b.n	801b8f8 <_dtoa_r+0x2d8>
 801b90c:	3101      	adds	r1, #1
 801b90e:	6071      	str	r1, [r6, #4]
 801b910:	0052      	lsls	r2, r2, #1
 801b912:	e7a2      	b.n	801b85a <_dtoa_r+0x23a>
 801b914:	f3af 8000 	nop.w
 801b918:	636f4361 	.word	0x636f4361
 801b91c:	3fd287a7 	.word	0x3fd287a7
 801b920:	8b60c8b3 	.word	0x8b60c8b3
 801b924:	3fc68a28 	.word	0x3fc68a28
 801b928:	509f79fb 	.word	0x509f79fb
 801b92c:	3fd34413 	.word	0x3fd34413
 801b930:	7ff00000 	.word	0x7ff00000
 801b934:	08020870 	.word	0x08020870
 801b938:	08020867 	.word	0x08020867
 801b93c:	08020743 	.word	0x08020743
 801b940:	08020900 	.word	0x08020900
 801b944:	080208d8 	.word	0x080208d8
 801b948:	07de      	lsls	r6, r3, #31
 801b94a:	d504      	bpl.n	801b956 <_dtoa_r+0x336>
 801b94c:	ed91 6b00 	vldr	d6, [r1]
 801b950:	3201      	adds	r2, #1
 801b952:	ee27 7b06 	vmul.f64	d7, d7, d6
 801b956:	105b      	asrs	r3, r3, #1
 801b958:	3108      	adds	r1, #8
 801b95a:	2b00      	cmp	r3, #0
 801b95c:	d1f4      	bne.n	801b948 <_dtoa_r+0x328>
 801b95e:	ed9d 6b02 	vldr	d6, [sp, #8]
 801b962:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801b966:	ed8d 7b02 	vstr	d7, [sp, #8]
 801b96a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b96c:	2b00      	cmp	r3, #0
 801b96e:	f000 80a7 	beq.w	801bac0 <_dtoa_r+0x4a0>
 801b972:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801b976:	ed9d 7b02 	vldr	d7, [sp, #8]
 801b97a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801b97e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b982:	f140 809d 	bpl.w	801bac0 <_dtoa_r+0x4a0>
 801b986:	f1b9 0f00 	cmp.w	r9, #0
 801b98a:	f000 8099 	beq.w	801bac0 <_dtoa_r+0x4a0>
 801b98e:	9b06      	ldr	r3, [sp, #24]
 801b990:	2b00      	cmp	r3, #0
 801b992:	dd30      	ble.n	801b9f6 <_dtoa_r+0x3d6>
 801b994:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 801b998:	ee27 7b06 	vmul.f64	d7, d7, d6
 801b99c:	ed8d 7b02 	vstr	d7, [sp, #8]
 801b9a0:	9d06      	ldr	r5, [sp, #24]
 801b9a2:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 801b9a6:	3201      	adds	r2, #1
 801b9a8:	ed9d 6b02 	vldr	d6, [sp, #8]
 801b9ac:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 801b9b0:	ee07 2a90 	vmov	s15, r2
 801b9b4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801b9b8:	eea7 5b06 	vfma.f64	d5, d7, d6
 801b9bc:	ed8d 5b02 	vstr	d5, [sp, #8]
 801b9c0:	9a03      	ldr	r2, [sp, #12]
 801b9c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b9c6:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 801b9ca:	2d00      	cmp	r5, #0
 801b9cc:	d17b      	bne.n	801bac6 <_dtoa_r+0x4a6>
 801b9ce:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801b9d2:	ee36 6b47 	vsub.f64	d6, d6, d7
 801b9d6:	ec41 0b17 	vmov	d7, r0, r1
 801b9da:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801b9de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b9e2:	f300 8253 	bgt.w	801be8c <_dtoa_r+0x86c>
 801b9e6:	eeb1 7b47 	vneg.f64	d7, d7
 801b9ea:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801b9ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b9f2:	f100 8249 	bmi.w	801be88 <_dtoa_r+0x868>
 801b9f6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801b9fa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801b9fe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801ba00:	2b00      	cmp	r3, #0
 801ba02:	f2c0 8119 	blt.w	801bc38 <_dtoa_r+0x618>
 801ba06:	f1bb 0f0e 	cmp.w	fp, #14
 801ba0a:	f300 8115 	bgt.w	801bc38 <_dtoa_r+0x618>
 801ba0e:	4bc3      	ldr	r3, [pc, #780]	; (801bd1c <_dtoa_r+0x6fc>)
 801ba10:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801ba14:	ed93 6b00 	vldr	d6, [r3]
 801ba18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ba1a:	2b00      	cmp	r3, #0
 801ba1c:	f280 80ba 	bge.w	801bb94 <_dtoa_r+0x574>
 801ba20:	f1b9 0f00 	cmp.w	r9, #0
 801ba24:	f300 80b6 	bgt.w	801bb94 <_dtoa_r+0x574>
 801ba28:	f040 822d 	bne.w	801be86 <_dtoa_r+0x866>
 801ba2c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801ba30:	ee26 6b07 	vmul.f64	d6, d6, d7
 801ba34:	ed9d 7b02 	vldr	d7, [sp, #8]
 801ba38:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801ba3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ba40:	464d      	mov	r5, r9
 801ba42:	464f      	mov	r7, r9
 801ba44:	f280 8204 	bge.w	801be50 <_dtoa_r+0x830>
 801ba48:	9b04      	ldr	r3, [sp, #16]
 801ba4a:	9a04      	ldr	r2, [sp, #16]
 801ba4c:	1c5e      	adds	r6, r3, #1
 801ba4e:	2331      	movs	r3, #49	; 0x31
 801ba50:	7013      	strb	r3, [r2, #0]
 801ba52:	f10b 0b01 	add.w	fp, fp, #1
 801ba56:	e1ff      	b.n	801be58 <_dtoa_r+0x838>
 801ba58:	2202      	movs	r2, #2
 801ba5a:	e731      	b.n	801b8c0 <_dtoa_r+0x2a0>
 801ba5c:	d02e      	beq.n	801babc <_dtoa_r+0x49c>
 801ba5e:	f1cb 0300 	rsb	r3, fp, #0
 801ba62:	4aae      	ldr	r2, [pc, #696]	; (801bd1c <_dtoa_r+0x6fc>)
 801ba64:	f003 010f 	and.w	r1, r3, #15
 801ba68:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801ba6c:	ed92 7b00 	vldr	d7, [r2]
 801ba70:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 801ba74:	ee26 7b07 	vmul.f64	d7, d6, d7
 801ba78:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801ba7c:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 801ba80:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801ba84:	49a6      	ldr	r1, [pc, #664]	; (801bd20 <_dtoa_r+0x700>)
 801ba86:	111b      	asrs	r3, r3, #4
 801ba88:	2000      	movs	r0, #0
 801ba8a:	2202      	movs	r2, #2
 801ba8c:	b93b      	cbnz	r3, 801ba9e <_dtoa_r+0x47e>
 801ba8e:	2800      	cmp	r0, #0
 801ba90:	f43f af6b 	beq.w	801b96a <_dtoa_r+0x34a>
 801ba94:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801ba98:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ba9c:	e765      	b.n	801b96a <_dtoa_r+0x34a>
 801ba9e:	07dd      	lsls	r5, r3, #31
 801baa0:	d509      	bpl.n	801bab6 <_dtoa_r+0x496>
 801baa2:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 801baa6:	ed91 7b00 	vldr	d7, [r1]
 801baaa:	ee26 7b07 	vmul.f64	d7, d6, d7
 801baae:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801bab2:	3201      	adds	r2, #1
 801bab4:	2001      	movs	r0, #1
 801bab6:	105b      	asrs	r3, r3, #1
 801bab8:	3108      	adds	r1, #8
 801baba:	e7e7      	b.n	801ba8c <_dtoa_r+0x46c>
 801babc:	2202      	movs	r2, #2
 801babe:	e754      	b.n	801b96a <_dtoa_r+0x34a>
 801bac0:	465b      	mov	r3, fp
 801bac2:	464d      	mov	r5, r9
 801bac4:	e770      	b.n	801b9a8 <_dtoa_r+0x388>
 801bac6:	4a95      	ldr	r2, [pc, #596]	; (801bd1c <_dtoa_r+0x6fc>)
 801bac8:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 801bacc:	ed12 4b02 	vldr	d4, [r2, #-8]
 801bad0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801bad2:	ec41 0b17 	vmov	d7, r0, r1
 801bad6:	b35a      	cbz	r2, 801bb30 <_dtoa_r+0x510>
 801bad8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 801badc:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 801bae0:	9e04      	ldr	r6, [sp, #16]
 801bae2:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801bae6:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801baea:	ee35 7b47 	vsub.f64	d7, d5, d7
 801baee:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801baf2:	ee14 2a90 	vmov	r2, s9
 801baf6:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801bafa:	3230      	adds	r2, #48	; 0x30
 801bafc:	ee36 6b45 	vsub.f64	d6, d6, d5
 801bb00:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801bb04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bb08:	f806 2b01 	strb.w	r2, [r6], #1
 801bb0c:	d43b      	bmi.n	801bb86 <_dtoa_r+0x566>
 801bb0e:	ee32 5b46 	vsub.f64	d5, d2, d6
 801bb12:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801bb16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bb1a:	d472      	bmi.n	801bc02 <_dtoa_r+0x5e2>
 801bb1c:	9a04      	ldr	r2, [sp, #16]
 801bb1e:	1ab2      	subs	r2, r6, r2
 801bb20:	4295      	cmp	r5, r2
 801bb22:	f77f af68 	ble.w	801b9f6 <_dtoa_r+0x3d6>
 801bb26:	ee27 7b03 	vmul.f64	d7, d7, d3
 801bb2a:	ee26 6b03 	vmul.f64	d6, d6, d3
 801bb2e:	e7de      	b.n	801baee <_dtoa_r+0x4ce>
 801bb30:	9a04      	ldr	r2, [sp, #16]
 801bb32:	ee24 7b07 	vmul.f64	d7, d4, d7
 801bb36:	1956      	adds	r6, r2, r5
 801bb38:	4611      	mov	r1, r2
 801bb3a:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801bb3e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801bb42:	ee14 2a90 	vmov	r2, s9
 801bb46:	3230      	adds	r2, #48	; 0x30
 801bb48:	f801 2b01 	strb.w	r2, [r1], #1
 801bb4c:	42b1      	cmp	r1, r6
 801bb4e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801bb52:	ee36 6b45 	vsub.f64	d6, d6, d5
 801bb56:	d11a      	bne.n	801bb8e <_dtoa_r+0x56e>
 801bb58:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801bb5c:	ee37 4b05 	vadd.f64	d4, d7, d5
 801bb60:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801bb64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bb68:	dc4b      	bgt.n	801bc02 <_dtoa_r+0x5e2>
 801bb6a:	ee35 7b47 	vsub.f64	d7, d5, d7
 801bb6e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801bb72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bb76:	f57f af3e 	bpl.w	801b9f6 <_dtoa_r+0x3d6>
 801bb7a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801bb7e:	2a30      	cmp	r2, #48	; 0x30
 801bb80:	f106 31ff 	add.w	r1, r6, #4294967295	; 0xffffffff
 801bb84:	d001      	beq.n	801bb8a <_dtoa_r+0x56a>
 801bb86:	469b      	mov	fp, r3
 801bb88:	e02a      	b.n	801bbe0 <_dtoa_r+0x5c0>
 801bb8a:	460e      	mov	r6, r1
 801bb8c:	e7f5      	b.n	801bb7a <_dtoa_r+0x55a>
 801bb8e:	ee26 6b03 	vmul.f64	d6, d6, d3
 801bb92:	e7d4      	b.n	801bb3e <_dtoa_r+0x51e>
 801bb94:	ed9d 7b02 	vldr	d7, [sp, #8]
 801bb98:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 801bb9c:	9e04      	ldr	r6, [sp, #16]
 801bb9e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801bba2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801bba6:	ee15 3a10 	vmov	r3, s10
 801bbaa:	3330      	adds	r3, #48	; 0x30
 801bbac:	f806 3b01 	strb.w	r3, [r6], #1
 801bbb0:	9b04      	ldr	r3, [sp, #16]
 801bbb2:	1af3      	subs	r3, r6, r3
 801bbb4:	4599      	cmp	r9, r3
 801bbb6:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 801bbba:	eea3 7b46 	vfms.f64	d7, d3, d6
 801bbbe:	d133      	bne.n	801bc28 <_dtoa_r+0x608>
 801bbc0:	ee37 7b07 	vadd.f64	d7, d7, d7
 801bbc4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801bbc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bbcc:	dc18      	bgt.n	801bc00 <_dtoa_r+0x5e0>
 801bbce:	eeb4 7b46 	vcmp.f64	d7, d6
 801bbd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bbd6:	d103      	bne.n	801bbe0 <_dtoa_r+0x5c0>
 801bbd8:	ee15 3a10 	vmov	r3, s10
 801bbdc:	07db      	lsls	r3, r3, #31
 801bbde:	d40f      	bmi.n	801bc00 <_dtoa_r+0x5e0>
 801bbe0:	9901      	ldr	r1, [sp, #4]
 801bbe2:	4620      	mov	r0, r4
 801bbe4:	f000 fc90 	bl	801c508 <_Bfree>
 801bbe8:	2300      	movs	r3, #0
 801bbea:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801bbec:	7033      	strb	r3, [r6, #0]
 801bbee:	f10b 0301 	add.w	r3, fp, #1
 801bbf2:	6013      	str	r3, [r2, #0]
 801bbf4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801bbf6:	2b00      	cmp	r3, #0
 801bbf8:	f43f ad5b 	beq.w	801b6b2 <_dtoa_r+0x92>
 801bbfc:	601e      	str	r6, [r3, #0]
 801bbfe:	e558      	b.n	801b6b2 <_dtoa_r+0x92>
 801bc00:	465b      	mov	r3, fp
 801bc02:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801bc06:	2939      	cmp	r1, #57	; 0x39
 801bc08:	f106 32ff 	add.w	r2, r6, #4294967295	; 0xffffffff
 801bc0c:	d106      	bne.n	801bc1c <_dtoa_r+0x5fc>
 801bc0e:	9904      	ldr	r1, [sp, #16]
 801bc10:	4291      	cmp	r1, r2
 801bc12:	d107      	bne.n	801bc24 <_dtoa_r+0x604>
 801bc14:	2230      	movs	r2, #48	; 0x30
 801bc16:	700a      	strb	r2, [r1, #0]
 801bc18:	3301      	adds	r3, #1
 801bc1a:	460a      	mov	r2, r1
 801bc1c:	7811      	ldrb	r1, [r2, #0]
 801bc1e:	3101      	adds	r1, #1
 801bc20:	7011      	strb	r1, [r2, #0]
 801bc22:	e7b0      	b.n	801bb86 <_dtoa_r+0x566>
 801bc24:	4616      	mov	r6, r2
 801bc26:	e7ec      	b.n	801bc02 <_dtoa_r+0x5e2>
 801bc28:	ee27 7b04 	vmul.f64	d7, d7, d4
 801bc2c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801bc30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bc34:	d1b3      	bne.n	801bb9e <_dtoa_r+0x57e>
 801bc36:	e7d3      	b.n	801bbe0 <_dtoa_r+0x5c0>
 801bc38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801bc3a:	2a00      	cmp	r2, #0
 801bc3c:	f000 808d 	beq.w	801bd5a <_dtoa_r+0x73a>
 801bc40:	9a08      	ldr	r2, [sp, #32]
 801bc42:	2a01      	cmp	r2, #1
 801bc44:	dc72      	bgt.n	801bd2c <_dtoa_r+0x70c>
 801bc46:	2f00      	cmp	r7, #0
 801bc48:	d06c      	beq.n	801bd24 <_dtoa_r+0x704>
 801bc4a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801bc4e:	4645      	mov	r5, r8
 801bc50:	4656      	mov	r6, sl
 801bc52:	9a07      	ldr	r2, [sp, #28]
 801bc54:	2101      	movs	r1, #1
 801bc56:	441a      	add	r2, r3
 801bc58:	4620      	mov	r0, r4
 801bc5a:	449a      	add	sl, r3
 801bc5c:	9207      	str	r2, [sp, #28]
 801bc5e:	f000 fcf3 	bl	801c648 <__i2b>
 801bc62:	4607      	mov	r7, r0
 801bc64:	2e00      	cmp	r6, #0
 801bc66:	dd0b      	ble.n	801bc80 <_dtoa_r+0x660>
 801bc68:	9b07      	ldr	r3, [sp, #28]
 801bc6a:	2b00      	cmp	r3, #0
 801bc6c:	dd08      	ble.n	801bc80 <_dtoa_r+0x660>
 801bc6e:	42b3      	cmp	r3, r6
 801bc70:	9a07      	ldr	r2, [sp, #28]
 801bc72:	bfa8      	it	ge
 801bc74:	4633      	movge	r3, r6
 801bc76:	ebaa 0a03 	sub.w	sl, sl, r3
 801bc7a:	1af6      	subs	r6, r6, r3
 801bc7c:	1ad3      	subs	r3, r2, r3
 801bc7e:	9307      	str	r3, [sp, #28]
 801bc80:	f1b8 0f00 	cmp.w	r8, #0
 801bc84:	d01d      	beq.n	801bcc2 <_dtoa_r+0x6a2>
 801bc86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bc88:	2b00      	cmp	r3, #0
 801bc8a:	d06a      	beq.n	801bd62 <_dtoa_r+0x742>
 801bc8c:	b18d      	cbz	r5, 801bcb2 <_dtoa_r+0x692>
 801bc8e:	4639      	mov	r1, r7
 801bc90:	462a      	mov	r2, r5
 801bc92:	4620      	mov	r0, r4
 801bc94:	f000 fd78 	bl	801c788 <__pow5mult>
 801bc98:	9a01      	ldr	r2, [sp, #4]
 801bc9a:	4601      	mov	r1, r0
 801bc9c:	4607      	mov	r7, r0
 801bc9e:	4620      	mov	r0, r4
 801bca0:	f000 fcdb 	bl	801c65a <__multiply>
 801bca4:	9901      	ldr	r1, [sp, #4]
 801bca6:	900c      	str	r0, [sp, #48]	; 0x30
 801bca8:	4620      	mov	r0, r4
 801bcaa:	f000 fc2d 	bl	801c508 <_Bfree>
 801bcae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bcb0:	9301      	str	r3, [sp, #4]
 801bcb2:	ebb8 0205 	subs.w	r2, r8, r5
 801bcb6:	d004      	beq.n	801bcc2 <_dtoa_r+0x6a2>
 801bcb8:	9901      	ldr	r1, [sp, #4]
 801bcba:	4620      	mov	r0, r4
 801bcbc:	f000 fd64 	bl	801c788 <__pow5mult>
 801bcc0:	9001      	str	r0, [sp, #4]
 801bcc2:	2101      	movs	r1, #1
 801bcc4:	4620      	mov	r0, r4
 801bcc6:	f000 fcbf 	bl	801c648 <__i2b>
 801bcca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bccc:	4605      	mov	r5, r0
 801bcce:	2b00      	cmp	r3, #0
 801bcd0:	f000 81ca 	beq.w	801c068 <_dtoa_r+0xa48>
 801bcd4:	461a      	mov	r2, r3
 801bcd6:	4601      	mov	r1, r0
 801bcd8:	4620      	mov	r0, r4
 801bcda:	f000 fd55 	bl	801c788 <__pow5mult>
 801bcde:	9b08      	ldr	r3, [sp, #32]
 801bce0:	2b01      	cmp	r3, #1
 801bce2:	4605      	mov	r5, r0
 801bce4:	dc44      	bgt.n	801bd70 <_dtoa_r+0x750>
 801bce6:	9b02      	ldr	r3, [sp, #8]
 801bce8:	2b00      	cmp	r3, #0
 801bcea:	d13c      	bne.n	801bd66 <_dtoa_r+0x746>
 801bcec:	9b03      	ldr	r3, [sp, #12]
 801bcee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801bcf2:	2b00      	cmp	r3, #0
 801bcf4:	d137      	bne.n	801bd66 <_dtoa_r+0x746>
 801bcf6:	9b03      	ldr	r3, [sp, #12]
 801bcf8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801bcfc:	0d1b      	lsrs	r3, r3, #20
 801bcfe:	051b      	lsls	r3, r3, #20
 801bd00:	2b00      	cmp	r3, #0
 801bd02:	d033      	beq.n	801bd6c <_dtoa_r+0x74c>
 801bd04:	9b07      	ldr	r3, [sp, #28]
 801bd06:	3301      	adds	r3, #1
 801bd08:	f10a 0a01 	add.w	sl, sl, #1
 801bd0c:	9307      	str	r3, [sp, #28]
 801bd0e:	f04f 0801 	mov.w	r8, #1
 801bd12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bd14:	bb73      	cbnz	r3, 801bd74 <_dtoa_r+0x754>
 801bd16:	2001      	movs	r0, #1
 801bd18:	e034      	b.n	801bd84 <_dtoa_r+0x764>
 801bd1a:	bf00      	nop
 801bd1c:	08020900 	.word	0x08020900
 801bd20:	080208d8 	.word	0x080208d8
 801bd24:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801bd26:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801bd2a:	e790      	b.n	801bc4e <_dtoa_r+0x62e>
 801bd2c:	f109 35ff 	add.w	r5, r9, #4294967295	; 0xffffffff
 801bd30:	45a8      	cmp	r8, r5
 801bd32:	bfbf      	itttt	lt
 801bd34:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 801bd36:	eba5 0808 	sublt.w	r8, r5, r8
 801bd3a:	4443      	addlt	r3, r8
 801bd3c:	930b      	strlt	r3, [sp, #44]	; 0x2c
 801bd3e:	bfb6      	itet	lt
 801bd40:	46a8      	movlt	r8, r5
 801bd42:	eba8 0505 	subge.w	r5, r8, r5
 801bd46:	2500      	movlt	r5, #0
 801bd48:	f1b9 0f00 	cmp.w	r9, #0
 801bd4c:	bfb9      	ittee	lt
 801bd4e:	ebaa 0609 	sublt.w	r6, sl, r9
 801bd52:	2300      	movlt	r3, #0
 801bd54:	4656      	movge	r6, sl
 801bd56:	464b      	movge	r3, r9
 801bd58:	e77b      	b.n	801bc52 <_dtoa_r+0x632>
 801bd5a:	4645      	mov	r5, r8
 801bd5c:	4656      	mov	r6, sl
 801bd5e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801bd60:	e780      	b.n	801bc64 <_dtoa_r+0x644>
 801bd62:	4642      	mov	r2, r8
 801bd64:	e7a8      	b.n	801bcb8 <_dtoa_r+0x698>
 801bd66:	f04f 0800 	mov.w	r8, #0
 801bd6a:	e7d2      	b.n	801bd12 <_dtoa_r+0x6f2>
 801bd6c:	4698      	mov	r8, r3
 801bd6e:	e7d0      	b.n	801bd12 <_dtoa_r+0x6f2>
 801bd70:	f04f 0800 	mov.w	r8, #0
 801bd74:	692b      	ldr	r3, [r5, #16]
 801bd76:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 801bd7a:	6918      	ldr	r0, [r3, #16]
 801bd7c:	f000 fc16 	bl	801c5ac <__hi0bits>
 801bd80:	f1c0 0020 	rsb	r0, r0, #32
 801bd84:	9b07      	ldr	r3, [sp, #28]
 801bd86:	4418      	add	r0, r3
 801bd88:	f010 001f 	ands.w	r0, r0, #31
 801bd8c:	d047      	beq.n	801be1e <_dtoa_r+0x7fe>
 801bd8e:	f1c0 0320 	rsb	r3, r0, #32
 801bd92:	2b04      	cmp	r3, #4
 801bd94:	dd3b      	ble.n	801be0e <_dtoa_r+0x7ee>
 801bd96:	9b07      	ldr	r3, [sp, #28]
 801bd98:	f1c0 001c 	rsb	r0, r0, #28
 801bd9c:	4482      	add	sl, r0
 801bd9e:	4406      	add	r6, r0
 801bda0:	4403      	add	r3, r0
 801bda2:	9307      	str	r3, [sp, #28]
 801bda4:	f1ba 0f00 	cmp.w	sl, #0
 801bda8:	dd05      	ble.n	801bdb6 <_dtoa_r+0x796>
 801bdaa:	4652      	mov	r2, sl
 801bdac:	9901      	ldr	r1, [sp, #4]
 801bdae:	4620      	mov	r0, r4
 801bdb0:	f000 fd38 	bl	801c824 <__lshift>
 801bdb4:	9001      	str	r0, [sp, #4]
 801bdb6:	9b07      	ldr	r3, [sp, #28]
 801bdb8:	2b00      	cmp	r3, #0
 801bdba:	dd05      	ble.n	801bdc8 <_dtoa_r+0x7a8>
 801bdbc:	4629      	mov	r1, r5
 801bdbe:	461a      	mov	r2, r3
 801bdc0:	4620      	mov	r0, r4
 801bdc2:	f000 fd2f 	bl	801c824 <__lshift>
 801bdc6:	4605      	mov	r5, r0
 801bdc8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bdca:	b353      	cbz	r3, 801be22 <_dtoa_r+0x802>
 801bdcc:	4629      	mov	r1, r5
 801bdce:	9801      	ldr	r0, [sp, #4]
 801bdd0:	f000 fd7c 	bl	801c8cc <__mcmp>
 801bdd4:	2800      	cmp	r0, #0
 801bdd6:	da24      	bge.n	801be22 <_dtoa_r+0x802>
 801bdd8:	2300      	movs	r3, #0
 801bdda:	220a      	movs	r2, #10
 801bddc:	9901      	ldr	r1, [sp, #4]
 801bdde:	4620      	mov	r0, r4
 801bde0:	f000 fba9 	bl	801c536 <__multadd>
 801bde4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bde6:	9001      	str	r0, [sp, #4]
 801bde8:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801bdec:	2b00      	cmp	r3, #0
 801bdee:	f000 8142 	beq.w	801c076 <_dtoa_r+0xa56>
 801bdf2:	2300      	movs	r3, #0
 801bdf4:	4639      	mov	r1, r7
 801bdf6:	220a      	movs	r2, #10
 801bdf8:	4620      	mov	r0, r4
 801bdfa:	f000 fb9c 	bl	801c536 <__multadd>
 801bdfe:	9b06      	ldr	r3, [sp, #24]
 801be00:	2b00      	cmp	r3, #0
 801be02:	4607      	mov	r7, r0
 801be04:	dc4b      	bgt.n	801be9e <_dtoa_r+0x87e>
 801be06:	9b08      	ldr	r3, [sp, #32]
 801be08:	2b02      	cmp	r3, #2
 801be0a:	dd48      	ble.n	801be9e <_dtoa_r+0x87e>
 801be0c:	e011      	b.n	801be32 <_dtoa_r+0x812>
 801be0e:	d0c9      	beq.n	801bda4 <_dtoa_r+0x784>
 801be10:	9a07      	ldr	r2, [sp, #28]
 801be12:	331c      	adds	r3, #28
 801be14:	441a      	add	r2, r3
 801be16:	449a      	add	sl, r3
 801be18:	441e      	add	r6, r3
 801be1a:	4613      	mov	r3, r2
 801be1c:	e7c1      	b.n	801bda2 <_dtoa_r+0x782>
 801be1e:	4603      	mov	r3, r0
 801be20:	e7f6      	b.n	801be10 <_dtoa_r+0x7f0>
 801be22:	f1b9 0f00 	cmp.w	r9, #0
 801be26:	dc34      	bgt.n	801be92 <_dtoa_r+0x872>
 801be28:	9b08      	ldr	r3, [sp, #32]
 801be2a:	2b02      	cmp	r3, #2
 801be2c:	dd31      	ble.n	801be92 <_dtoa_r+0x872>
 801be2e:	f8cd 9018 	str.w	r9, [sp, #24]
 801be32:	9b06      	ldr	r3, [sp, #24]
 801be34:	b963      	cbnz	r3, 801be50 <_dtoa_r+0x830>
 801be36:	4629      	mov	r1, r5
 801be38:	2205      	movs	r2, #5
 801be3a:	4620      	mov	r0, r4
 801be3c:	f000 fb7b 	bl	801c536 <__multadd>
 801be40:	4601      	mov	r1, r0
 801be42:	4605      	mov	r5, r0
 801be44:	9801      	ldr	r0, [sp, #4]
 801be46:	f000 fd41 	bl	801c8cc <__mcmp>
 801be4a:	2800      	cmp	r0, #0
 801be4c:	f73f adfc 	bgt.w	801ba48 <_dtoa_r+0x428>
 801be50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801be52:	9e04      	ldr	r6, [sp, #16]
 801be54:	ea6f 0b03 	mvn.w	fp, r3
 801be58:	f04f 0900 	mov.w	r9, #0
 801be5c:	4629      	mov	r1, r5
 801be5e:	4620      	mov	r0, r4
 801be60:	f000 fb52 	bl	801c508 <_Bfree>
 801be64:	2f00      	cmp	r7, #0
 801be66:	f43f aebb 	beq.w	801bbe0 <_dtoa_r+0x5c0>
 801be6a:	f1b9 0f00 	cmp.w	r9, #0
 801be6e:	d005      	beq.n	801be7c <_dtoa_r+0x85c>
 801be70:	45b9      	cmp	r9, r7
 801be72:	d003      	beq.n	801be7c <_dtoa_r+0x85c>
 801be74:	4649      	mov	r1, r9
 801be76:	4620      	mov	r0, r4
 801be78:	f000 fb46 	bl	801c508 <_Bfree>
 801be7c:	4639      	mov	r1, r7
 801be7e:	4620      	mov	r0, r4
 801be80:	f000 fb42 	bl	801c508 <_Bfree>
 801be84:	e6ac      	b.n	801bbe0 <_dtoa_r+0x5c0>
 801be86:	2500      	movs	r5, #0
 801be88:	462f      	mov	r7, r5
 801be8a:	e7e1      	b.n	801be50 <_dtoa_r+0x830>
 801be8c:	469b      	mov	fp, r3
 801be8e:	462f      	mov	r7, r5
 801be90:	e5da      	b.n	801ba48 <_dtoa_r+0x428>
 801be92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801be94:	f8cd 9018 	str.w	r9, [sp, #24]
 801be98:	2b00      	cmp	r3, #0
 801be9a:	f000 80f3 	beq.w	801c084 <_dtoa_r+0xa64>
 801be9e:	2e00      	cmp	r6, #0
 801bea0:	dd05      	ble.n	801beae <_dtoa_r+0x88e>
 801bea2:	4639      	mov	r1, r7
 801bea4:	4632      	mov	r2, r6
 801bea6:	4620      	mov	r0, r4
 801bea8:	f000 fcbc 	bl	801c824 <__lshift>
 801beac:	4607      	mov	r7, r0
 801beae:	f1b8 0f00 	cmp.w	r8, #0
 801beb2:	d04c      	beq.n	801bf4e <_dtoa_r+0x92e>
 801beb4:	6879      	ldr	r1, [r7, #4]
 801beb6:	4620      	mov	r0, r4
 801beb8:	f000 faf2 	bl	801c4a0 <_Balloc>
 801bebc:	693a      	ldr	r2, [r7, #16]
 801bebe:	3202      	adds	r2, #2
 801bec0:	4606      	mov	r6, r0
 801bec2:	0092      	lsls	r2, r2, #2
 801bec4:	f107 010c 	add.w	r1, r7, #12
 801bec8:	300c      	adds	r0, #12
 801beca:	f7fe fcb4 	bl	801a836 <memcpy>
 801bece:	2201      	movs	r2, #1
 801bed0:	4631      	mov	r1, r6
 801bed2:	4620      	mov	r0, r4
 801bed4:	f000 fca6 	bl	801c824 <__lshift>
 801bed8:	9b02      	ldr	r3, [sp, #8]
 801beda:	f8dd a010 	ldr.w	sl, [sp, #16]
 801bede:	f003 0301 	and.w	r3, r3, #1
 801bee2:	46b9      	mov	r9, r7
 801bee4:	9307      	str	r3, [sp, #28]
 801bee6:	4607      	mov	r7, r0
 801bee8:	4629      	mov	r1, r5
 801beea:	9801      	ldr	r0, [sp, #4]
 801beec:	f7ff fb0a 	bl	801b504 <quorem>
 801bef0:	4649      	mov	r1, r9
 801bef2:	4606      	mov	r6, r0
 801bef4:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801bef8:	9801      	ldr	r0, [sp, #4]
 801befa:	f000 fce7 	bl	801c8cc <__mcmp>
 801befe:	463a      	mov	r2, r7
 801bf00:	9002      	str	r0, [sp, #8]
 801bf02:	4629      	mov	r1, r5
 801bf04:	4620      	mov	r0, r4
 801bf06:	f000 fcfb 	bl	801c900 <__mdiff>
 801bf0a:	68c3      	ldr	r3, [r0, #12]
 801bf0c:	4602      	mov	r2, r0
 801bf0e:	bb03      	cbnz	r3, 801bf52 <_dtoa_r+0x932>
 801bf10:	4601      	mov	r1, r0
 801bf12:	9009      	str	r0, [sp, #36]	; 0x24
 801bf14:	9801      	ldr	r0, [sp, #4]
 801bf16:	f000 fcd9 	bl	801c8cc <__mcmp>
 801bf1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801bf1c:	4603      	mov	r3, r0
 801bf1e:	4611      	mov	r1, r2
 801bf20:	4620      	mov	r0, r4
 801bf22:	9309      	str	r3, [sp, #36]	; 0x24
 801bf24:	f000 faf0 	bl	801c508 <_Bfree>
 801bf28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bf2a:	b9a3      	cbnz	r3, 801bf56 <_dtoa_r+0x936>
 801bf2c:	9a08      	ldr	r2, [sp, #32]
 801bf2e:	b992      	cbnz	r2, 801bf56 <_dtoa_r+0x936>
 801bf30:	9a07      	ldr	r2, [sp, #28]
 801bf32:	b982      	cbnz	r2, 801bf56 <_dtoa_r+0x936>
 801bf34:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801bf38:	d029      	beq.n	801bf8e <_dtoa_r+0x96e>
 801bf3a:	9b02      	ldr	r3, [sp, #8]
 801bf3c:	2b00      	cmp	r3, #0
 801bf3e:	dd01      	ble.n	801bf44 <_dtoa_r+0x924>
 801bf40:	f106 0831 	add.w	r8, r6, #49	; 0x31
 801bf44:	f10a 0601 	add.w	r6, sl, #1
 801bf48:	f88a 8000 	strb.w	r8, [sl]
 801bf4c:	e786      	b.n	801be5c <_dtoa_r+0x83c>
 801bf4e:	4638      	mov	r0, r7
 801bf50:	e7c2      	b.n	801bed8 <_dtoa_r+0x8b8>
 801bf52:	2301      	movs	r3, #1
 801bf54:	e7e3      	b.n	801bf1e <_dtoa_r+0x8fe>
 801bf56:	9a02      	ldr	r2, [sp, #8]
 801bf58:	2a00      	cmp	r2, #0
 801bf5a:	db04      	blt.n	801bf66 <_dtoa_r+0x946>
 801bf5c:	d124      	bne.n	801bfa8 <_dtoa_r+0x988>
 801bf5e:	9a08      	ldr	r2, [sp, #32]
 801bf60:	bb12      	cbnz	r2, 801bfa8 <_dtoa_r+0x988>
 801bf62:	9a07      	ldr	r2, [sp, #28]
 801bf64:	bb02      	cbnz	r2, 801bfa8 <_dtoa_r+0x988>
 801bf66:	2b00      	cmp	r3, #0
 801bf68:	ddec      	ble.n	801bf44 <_dtoa_r+0x924>
 801bf6a:	2201      	movs	r2, #1
 801bf6c:	9901      	ldr	r1, [sp, #4]
 801bf6e:	4620      	mov	r0, r4
 801bf70:	f000 fc58 	bl	801c824 <__lshift>
 801bf74:	4629      	mov	r1, r5
 801bf76:	9001      	str	r0, [sp, #4]
 801bf78:	f000 fca8 	bl	801c8cc <__mcmp>
 801bf7c:	2800      	cmp	r0, #0
 801bf7e:	dc03      	bgt.n	801bf88 <_dtoa_r+0x968>
 801bf80:	d1e0      	bne.n	801bf44 <_dtoa_r+0x924>
 801bf82:	f018 0f01 	tst.w	r8, #1
 801bf86:	d0dd      	beq.n	801bf44 <_dtoa_r+0x924>
 801bf88:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801bf8c:	d1d8      	bne.n	801bf40 <_dtoa_r+0x920>
 801bf8e:	2339      	movs	r3, #57	; 0x39
 801bf90:	f10a 0601 	add.w	r6, sl, #1
 801bf94:	f88a 3000 	strb.w	r3, [sl]
 801bf98:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801bf9c:	2b39      	cmp	r3, #57	; 0x39
 801bf9e:	f106 32ff 	add.w	r2, r6, #4294967295	; 0xffffffff
 801bfa2:	d04c      	beq.n	801c03e <_dtoa_r+0xa1e>
 801bfa4:	3301      	adds	r3, #1
 801bfa6:	e051      	b.n	801c04c <_dtoa_r+0xa2c>
 801bfa8:	2b00      	cmp	r3, #0
 801bfaa:	f10a 0601 	add.w	r6, sl, #1
 801bfae:	dd05      	ble.n	801bfbc <_dtoa_r+0x99c>
 801bfb0:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801bfb4:	d0eb      	beq.n	801bf8e <_dtoa_r+0x96e>
 801bfb6:	f108 0801 	add.w	r8, r8, #1
 801bfba:	e7c5      	b.n	801bf48 <_dtoa_r+0x928>
 801bfbc:	9b04      	ldr	r3, [sp, #16]
 801bfbe:	9a06      	ldr	r2, [sp, #24]
 801bfc0:	f806 8c01 	strb.w	r8, [r6, #-1]
 801bfc4:	1af3      	subs	r3, r6, r3
 801bfc6:	4293      	cmp	r3, r2
 801bfc8:	d021      	beq.n	801c00e <_dtoa_r+0x9ee>
 801bfca:	2300      	movs	r3, #0
 801bfcc:	220a      	movs	r2, #10
 801bfce:	9901      	ldr	r1, [sp, #4]
 801bfd0:	4620      	mov	r0, r4
 801bfd2:	f000 fab0 	bl	801c536 <__multadd>
 801bfd6:	45b9      	cmp	r9, r7
 801bfd8:	9001      	str	r0, [sp, #4]
 801bfda:	f04f 0300 	mov.w	r3, #0
 801bfde:	f04f 020a 	mov.w	r2, #10
 801bfe2:	4649      	mov	r1, r9
 801bfe4:	4620      	mov	r0, r4
 801bfe6:	d105      	bne.n	801bff4 <_dtoa_r+0x9d4>
 801bfe8:	f000 faa5 	bl	801c536 <__multadd>
 801bfec:	4681      	mov	r9, r0
 801bfee:	4607      	mov	r7, r0
 801bff0:	46b2      	mov	sl, r6
 801bff2:	e779      	b.n	801bee8 <_dtoa_r+0x8c8>
 801bff4:	f000 fa9f 	bl	801c536 <__multadd>
 801bff8:	4639      	mov	r1, r7
 801bffa:	4681      	mov	r9, r0
 801bffc:	2300      	movs	r3, #0
 801bffe:	220a      	movs	r2, #10
 801c000:	4620      	mov	r0, r4
 801c002:	f000 fa98 	bl	801c536 <__multadd>
 801c006:	4607      	mov	r7, r0
 801c008:	e7f2      	b.n	801bff0 <_dtoa_r+0x9d0>
 801c00a:	f04f 0900 	mov.w	r9, #0
 801c00e:	2201      	movs	r2, #1
 801c010:	9901      	ldr	r1, [sp, #4]
 801c012:	4620      	mov	r0, r4
 801c014:	f000 fc06 	bl	801c824 <__lshift>
 801c018:	4629      	mov	r1, r5
 801c01a:	9001      	str	r0, [sp, #4]
 801c01c:	f000 fc56 	bl	801c8cc <__mcmp>
 801c020:	2800      	cmp	r0, #0
 801c022:	dcb9      	bgt.n	801bf98 <_dtoa_r+0x978>
 801c024:	d102      	bne.n	801c02c <_dtoa_r+0xa0c>
 801c026:	f018 0f01 	tst.w	r8, #1
 801c02a:	d1b5      	bne.n	801bf98 <_dtoa_r+0x978>
 801c02c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801c030:	2b30      	cmp	r3, #48	; 0x30
 801c032:	f106 32ff 	add.w	r2, r6, #4294967295	; 0xffffffff
 801c036:	f47f af11 	bne.w	801be5c <_dtoa_r+0x83c>
 801c03a:	4616      	mov	r6, r2
 801c03c:	e7f6      	b.n	801c02c <_dtoa_r+0xa0c>
 801c03e:	9b04      	ldr	r3, [sp, #16]
 801c040:	4293      	cmp	r3, r2
 801c042:	d105      	bne.n	801c050 <_dtoa_r+0xa30>
 801c044:	9a04      	ldr	r2, [sp, #16]
 801c046:	f10b 0b01 	add.w	fp, fp, #1
 801c04a:	2331      	movs	r3, #49	; 0x31
 801c04c:	7013      	strb	r3, [r2, #0]
 801c04e:	e705      	b.n	801be5c <_dtoa_r+0x83c>
 801c050:	4616      	mov	r6, r2
 801c052:	e7a1      	b.n	801bf98 <_dtoa_r+0x978>
 801c054:	4b16      	ldr	r3, [pc, #88]	; (801c0b0 <_dtoa_r+0xa90>)
 801c056:	f7ff bb48 	b.w	801b6ea <_dtoa_r+0xca>
 801c05a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801c05c:	2b00      	cmp	r3, #0
 801c05e:	f47f ab23 	bne.w	801b6a8 <_dtoa_r+0x88>
 801c062:	4b14      	ldr	r3, [pc, #80]	; (801c0b4 <_dtoa_r+0xa94>)
 801c064:	f7ff bb41 	b.w	801b6ea <_dtoa_r+0xca>
 801c068:	9b08      	ldr	r3, [sp, #32]
 801c06a:	2b01      	cmp	r3, #1
 801c06c:	f77f ae3b 	ble.w	801bce6 <_dtoa_r+0x6c6>
 801c070:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 801c074:	e64f      	b.n	801bd16 <_dtoa_r+0x6f6>
 801c076:	9b06      	ldr	r3, [sp, #24]
 801c078:	2b00      	cmp	r3, #0
 801c07a:	dc03      	bgt.n	801c084 <_dtoa_r+0xa64>
 801c07c:	9b08      	ldr	r3, [sp, #32]
 801c07e:	2b02      	cmp	r3, #2
 801c080:	f73f aed7 	bgt.w	801be32 <_dtoa_r+0x812>
 801c084:	9e04      	ldr	r6, [sp, #16]
 801c086:	9801      	ldr	r0, [sp, #4]
 801c088:	4629      	mov	r1, r5
 801c08a:	f7ff fa3b 	bl	801b504 <quorem>
 801c08e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801c092:	f806 8b01 	strb.w	r8, [r6], #1
 801c096:	9b04      	ldr	r3, [sp, #16]
 801c098:	9a06      	ldr	r2, [sp, #24]
 801c09a:	1af3      	subs	r3, r6, r3
 801c09c:	429a      	cmp	r2, r3
 801c09e:	ddb4      	ble.n	801c00a <_dtoa_r+0x9ea>
 801c0a0:	2300      	movs	r3, #0
 801c0a2:	220a      	movs	r2, #10
 801c0a4:	9901      	ldr	r1, [sp, #4]
 801c0a6:	4620      	mov	r0, r4
 801c0a8:	f000 fa45 	bl	801c536 <__multadd>
 801c0ac:	9001      	str	r0, [sp, #4]
 801c0ae:	e7ea      	b.n	801c086 <_dtoa_r+0xa66>
 801c0b0:	08020742 	.word	0x08020742
 801c0b4:	08020867 	.word	0x08020867

0801c0b8 <__sflush_r>:
 801c0b8:	898a      	ldrh	r2, [r1, #12]
 801c0ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c0be:	4605      	mov	r5, r0
 801c0c0:	0710      	lsls	r0, r2, #28
 801c0c2:	460c      	mov	r4, r1
 801c0c4:	d458      	bmi.n	801c178 <__sflush_r+0xc0>
 801c0c6:	684b      	ldr	r3, [r1, #4]
 801c0c8:	2b00      	cmp	r3, #0
 801c0ca:	dc05      	bgt.n	801c0d8 <__sflush_r+0x20>
 801c0cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801c0ce:	2b00      	cmp	r3, #0
 801c0d0:	dc02      	bgt.n	801c0d8 <__sflush_r+0x20>
 801c0d2:	2000      	movs	r0, #0
 801c0d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c0d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801c0da:	2e00      	cmp	r6, #0
 801c0dc:	d0f9      	beq.n	801c0d2 <__sflush_r+0x1a>
 801c0de:	2300      	movs	r3, #0
 801c0e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801c0e4:	682f      	ldr	r7, [r5, #0]
 801c0e6:	6a21      	ldr	r1, [r4, #32]
 801c0e8:	602b      	str	r3, [r5, #0]
 801c0ea:	d032      	beq.n	801c152 <__sflush_r+0x9a>
 801c0ec:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801c0ee:	89a3      	ldrh	r3, [r4, #12]
 801c0f0:	075a      	lsls	r2, r3, #29
 801c0f2:	d505      	bpl.n	801c100 <__sflush_r+0x48>
 801c0f4:	6863      	ldr	r3, [r4, #4]
 801c0f6:	1ac0      	subs	r0, r0, r3
 801c0f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801c0fa:	b10b      	cbz	r3, 801c100 <__sflush_r+0x48>
 801c0fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801c0fe:	1ac0      	subs	r0, r0, r3
 801c100:	2300      	movs	r3, #0
 801c102:	4602      	mov	r2, r0
 801c104:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801c106:	6a21      	ldr	r1, [r4, #32]
 801c108:	4628      	mov	r0, r5
 801c10a:	47b0      	blx	r6
 801c10c:	1c43      	adds	r3, r0, #1
 801c10e:	89a3      	ldrh	r3, [r4, #12]
 801c110:	d106      	bne.n	801c120 <__sflush_r+0x68>
 801c112:	6829      	ldr	r1, [r5, #0]
 801c114:	291d      	cmp	r1, #29
 801c116:	d848      	bhi.n	801c1aa <__sflush_r+0xf2>
 801c118:	4a29      	ldr	r2, [pc, #164]	; (801c1c0 <__sflush_r+0x108>)
 801c11a:	40ca      	lsrs	r2, r1
 801c11c:	07d6      	lsls	r6, r2, #31
 801c11e:	d544      	bpl.n	801c1aa <__sflush_r+0xf2>
 801c120:	2200      	movs	r2, #0
 801c122:	6062      	str	r2, [r4, #4]
 801c124:	04d9      	lsls	r1, r3, #19
 801c126:	6922      	ldr	r2, [r4, #16]
 801c128:	6022      	str	r2, [r4, #0]
 801c12a:	d504      	bpl.n	801c136 <__sflush_r+0x7e>
 801c12c:	1c42      	adds	r2, r0, #1
 801c12e:	d101      	bne.n	801c134 <__sflush_r+0x7c>
 801c130:	682b      	ldr	r3, [r5, #0]
 801c132:	b903      	cbnz	r3, 801c136 <__sflush_r+0x7e>
 801c134:	6560      	str	r0, [r4, #84]	; 0x54
 801c136:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c138:	602f      	str	r7, [r5, #0]
 801c13a:	2900      	cmp	r1, #0
 801c13c:	d0c9      	beq.n	801c0d2 <__sflush_r+0x1a>
 801c13e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c142:	4299      	cmp	r1, r3
 801c144:	d002      	beq.n	801c14c <__sflush_r+0x94>
 801c146:	4628      	mov	r0, r5
 801c148:	f000 fc94 	bl	801ca74 <_free_r>
 801c14c:	2000      	movs	r0, #0
 801c14e:	6360      	str	r0, [r4, #52]	; 0x34
 801c150:	e7c0      	b.n	801c0d4 <__sflush_r+0x1c>
 801c152:	2301      	movs	r3, #1
 801c154:	4628      	mov	r0, r5
 801c156:	47b0      	blx	r6
 801c158:	1c41      	adds	r1, r0, #1
 801c15a:	d1c8      	bne.n	801c0ee <__sflush_r+0x36>
 801c15c:	682b      	ldr	r3, [r5, #0]
 801c15e:	2b00      	cmp	r3, #0
 801c160:	d0c5      	beq.n	801c0ee <__sflush_r+0x36>
 801c162:	2b1d      	cmp	r3, #29
 801c164:	d001      	beq.n	801c16a <__sflush_r+0xb2>
 801c166:	2b16      	cmp	r3, #22
 801c168:	d101      	bne.n	801c16e <__sflush_r+0xb6>
 801c16a:	602f      	str	r7, [r5, #0]
 801c16c:	e7b1      	b.n	801c0d2 <__sflush_r+0x1a>
 801c16e:	89a3      	ldrh	r3, [r4, #12]
 801c170:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c174:	81a3      	strh	r3, [r4, #12]
 801c176:	e7ad      	b.n	801c0d4 <__sflush_r+0x1c>
 801c178:	690f      	ldr	r7, [r1, #16]
 801c17a:	2f00      	cmp	r7, #0
 801c17c:	d0a9      	beq.n	801c0d2 <__sflush_r+0x1a>
 801c17e:	0793      	lsls	r3, r2, #30
 801c180:	680e      	ldr	r6, [r1, #0]
 801c182:	bf08      	it	eq
 801c184:	694b      	ldreq	r3, [r1, #20]
 801c186:	600f      	str	r7, [r1, #0]
 801c188:	bf18      	it	ne
 801c18a:	2300      	movne	r3, #0
 801c18c:	eba6 0807 	sub.w	r8, r6, r7
 801c190:	608b      	str	r3, [r1, #8]
 801c192:	f1b8 0f00 	cmp.w	r8, #0
 801c196:	dd9c      	ble.n	801c0d2 <__sflush_r+0x1a>
 801c198:	4643      	mov	r3, r8
 801c19a:	463a      	mov	r2, r7
 801c19c:	6a21      	ldr	r1, [r4, #32]
 801c19e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801c1a0:	4628      	mov	r0, r5
 801c1a2:	47b0      	blx	r6
 801c1a4:	2800      	cmp	r0, #0
 801c1a6:	dc06      	bgt.n	801c1b6 <__sflush_r+0xfe>
 801c1a8:	89a3      	ldrh	r3, [r4, #12]
 801c1aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c1ae:	81a3      	strh	r3, [r4, #12]
 801c1b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c1b4:	e78e      	b.n	801c0d4 <__sflush_r+0x1c>
 801c1b6:	4407      	add	r7, r0
 801c1b8:	eba8 0800 	sub.w	r8, r8, r0
 801c1bc:	e7e9      	b.n	801c192 <__sflush_r+0xda>
 801c1be:	bf00      	nop
 801c1c0:	20400001 	.word	0x20400001

0801c1c4 <_fflush_r>:
 801c1c4:	b538      	push	{r3, r4, r5, lr}
 801c1c6:	690b      	ldr	r3, [r1, #16]
 801c1c8:	4605      	mov	r5, r0
 801c1ca:	460c      	mov	r4, r1
 801c1cc:	b1db      	cbz	r3, 801c206 <_fflush_r+0x42>
 801c1ce:	b118      	cbz	r0, 801c1d8 <_fflush_r+0x14>
 801c1d0:	6983      	ldr	r3, [r0, #24]
 801c1d2:	b90b      	cbnz	r3, 801c1d8 <_fflush_r+0x14>
 801c1d4:	f000 f860 	bl	801c298 <__sinit>
 801c1d8:	4b0c      	ldr	r3, [pc, #48]	; (801c20c <_fflush_r+0x48>)
 801c1da:	429c      	cmp	r4, r3
 801c1dc:	d109      	bne.n	801c1f2 <_fflush_r+0x2e>
 801c1de:	686c      	ldr	r4, [r5, #4]
 801c1e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c1e4:	b17b      	cbz	r3, 801c206 <_fflush_r+0x42>
 801c1e6:	4621      	mov	r1, r4
 801c1e8:	4628      	mov	r0, r5
 801c1ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c1ee:	f7ff bf63 	b.w	801c0b8 <__sflush_r>
 801c1f2:	4b07      	ldr	r3, [pc, #28]	; (801c210 <_fflush_r+0x4c>)
 801c1f4:	429c      	cmp	r4, r3
 801c1f6:	d101      	bne.n	801c1fc <_fflush_r+0x38>
 801c1f8:	68ac      	ldr	r4, [r5, #8]
 801c1fa:	e7f1      	b.n	801c1e0 <_fflush_r+0x1c>
 801c1fc:	4b05      	ldr	r3, [pc, #20]	; (801c214 <_fflush_r+0x50>)
 801c1fe:	429c      	cmp	r4, r3
 801c200:	bf08      	it	eq
 801c202:	68ec      	ldreq	r4, [r5, #12]
 801c204:	e7ec      	b.n	801c1e0 <_fflush_r+0x1c>
 801c206:	2000      	movs	r0, #0
 801c208:	bd38      	pop	{r3, r4, r5, pc}
 801c20a:	bf00      	nop
 801c20c:	08020894 	.word	0x08020894
 801c210:	080208b4 	.word	0x080208b4
 801c214:	08020874 	.word	0x08020874

0801c218 <std>:
 801c218:	2300      	movs	r3, #0
 801c21a:	b510      	push	{r4, lr}
 801c21c:	4604      	mov	r4, r0
 801c21e:	e9c0 3300 	strd	r3, r3, [r0]
 801c222:	6083      	str	r3, [r0, #8]
 801c224:	8181      	strh	r1, [r0, #12]
 801c226:	6643      	str	r3, [r0, #100]	; 0x64
 801c228:	81c2      	strh	r2, [r0, #14]
 801c22a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801c22e:	6183      	str	r3, [r0, #24]
 801c230:	4619      	mov	r1, r3
 801c232:	2208      	movs	r2, #8
 801c234:	305c      	adds	r0, #92	; 0x5c
 801c236:	f7fe fb22 	bl	801a87e <memset>
 801c23a:	4b05      	ldr	r3, [pc, #20]	; (801c250 <std+0x38>)
 801c23c:	6263      	str	r3, [r4, #36]	; 0x24
 801c23e:	4b05      	ldr	r3, [pc, #20]	; (801c254 <std+0x3c>)
 801c240:	62a3      	str	r3, [r4, #40]	; 0x28
 801c242:	4b05      	ldr	r3, [pc, #20]	; (801c258 <std+0x40>)
 801c244:	62e3      	str	r3, [r4, #44]	; 0x2c
 801c246:	4b05      	ldr	r3, [pc, #20]	; (801c25c <std+0x44>)
 801c248:	6224      	str	r4, [r4, #32]
 801c24a:	6323      	str	r3, [r4, #48]	; 0x30
 801c24c:	bd10      	pop	{r4, pc}
 801c24e:	bf00      	nop
 801c250:	0801d109 	.word	0x0801d109
 801c254:	0801d12b 	.word	0x0801d12b
 801c258:	0801d163 	.word	0x0801d163
 801c25c:	0801d187 	.word	0x0801d187

0801c260 <_cleanup_r>:
 801c260:	4901      	ldr	r1, [pc, #4]	; (801c268 <_cleanup_r+0x8>)
 801c262:	f000 b885 	b.w	801c370 <_fwalk_reent>
 801c266:	bf00      	nop
 801c268:	0801c1c5 	.word	0x0801c1c5

0801c26c <__sfmoreglue>:
 801c26c:	b570      	push	{r4, r5, r6, lr}
 801c26e:	1e4a      	subs	r2, r1, #1
 801c270:	2568      	movs	r5, #104	; 0x68
 801c272:	4355      	muls	r5, r2
 801c274:	460e      	mov	r6, r1
 801c276:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801c27a:	f000 fc49 	bl	801cb10 <_malloc_r>
 801c27e:	4604      	mov	r4, r0
 801c280:	b140      	cbz	r0, 801c294 <__sfmoreglue+0x28>
 801c282:	2100      	movs	r1, #0
 801c284:	e9c0 1600 	strd	r1, r6, [r0]
 801c288:	300c      	adds	r0, #12
 801c28a:	60a0      	str	r0, [r4, #8]
 801c28c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801c290:	f7fe faf5 	bl	801a87e <memset>
 801c294:	4620      	mov	r0, r4
 801c296:	bd70      	pop	{r4, r5, r6, pc}

0801c298 <__sinit>:
 801c298:	6983      	ldr	r3, [r0, #24]
 801c29a:	b510      	push	{r4, lr}
 801c29c:	4604      	mov	r4, r0
 801c29e:	bb33      	cbnz	r3, 801c2ee <__sinit+0x56>
 801c2a0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 801c2a4:	6503      	str	r3, [r0, #80]	; 0x50
 801c2a6:	4b12      	ldr	r3, [pc, #72]	; (801c2f0 <__sinit+0x58>)
 801c2a8:	4a12      	ldr	r2, [pc, #72]	; (801c2f4 <__sinit+0x5c>)
 801c2aa:	681b      	ldr	r3, [r3, #0]
 801c2ac:	6282      	str	r2, [r0, #40]	; 0x28
 801c2ae:	4298      	cmp	r0, r3
 801c2b0:	bf04      	itt	eq
 801c2b2:	2301      	moveq	r3, #1
 801c2b4:	6183      	streq	r3, [r0, #24]
 801c2b6:	f000 f81f 	bl	801c2f8 <__sfp>
 801c2ba:	6060      	str	r0, [r4, #4]
 801c2bc:	4620      	mov	r0, r4
 801c2be:	f000 f81b 	bl	801c2f8 <__sfp>
 801c2c2:	60a0      	str	r0, [r4, #8]
 801c2c4:	4620      	mov	r0, r4
 801c2c6:	f000 f817 	bl	801c2f8 <__sfp>
 801c2ca:	2200      	movs	r2, #0
 801c2cc:	60e0      	str	r0, [r4, #12]
 801c2ce:	2104      	movs	r1, #4
 801c2d0:	6860      	ldr	r0, [r4, #4]
 801c2d2:	f7ff ffa1 	bl	801c218 <std>
 801c2d6:	2201      	movs	r2, #1
 801c2d8:	2109      	movs	r1, #9
 801c2da:	68a0      	ldr	r0, [r4, #8]
 801c2dc:	f7ff ff9c 	bl	801c218 <std>
 801c2e0:	2202      	movs	r2, #2
 801c2e2:	2112      	movs	r1, #18
 801c2e4:	68e0      	ldr	r0, [r4, #12]
 801c2e6:	f7ff ff97 	bl	801c218 <std>
 801c2ea:	2301      	movs	r3, #1
 801c2ec:	61a3      	str	r3, [r4, #24]
 801c2ee:	bd10      	pop	{r4, pc}
 801c2f0:	08020724 	.word	0x08020724
 801c2f4:	0801c261 	.word	0x0801c261

0801c2f8 <__sfp>:
 801c2f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c2fa:	4b1b      	ldr	r3, [pc, #108]	; (801c368 <__sfp+0x70>)
 801c2fc:	681e      	ldr	r6, [r3, #0]
 801c2fe:	69b3      	ldr	r3, [r6, #24]
 801c300:	4607      	mov	r7, r0
 801c302:	b913      	cbnz	r3, 801c30a <__sfp+0x12>
 801c304:	4630      	mov	r0, r6
 801c306:	f7ff ffc7 	bl	801c298 <__sinit>
 801c30a:	3648      	adds	r6, #72	; 0x48
 801c30c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801c310:	3b01      	subs	r3, #1
 801c312:	d503      	bpl.n	801c31c <__sfp+0x24>
 801c314:	6833      	ldr	r3, [r6, #0]
 801c316:	b133      	cbz	r3, 801c326 <__sfp+0x2e>
 801c318:	6836      	ldr	r6, [r6, #0]
 801c31a:	e7f7      	b.n	801c30c <__sfp+0x14>
 801c31c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801c320:	b16d      	cbz	r5, 801c33e <__sfp+0x46>
 801c322:	3468      	adds	r4, #104	; 0x68
 801c324:	e7f4      	b.n	801c310 <__sfp+0x18>
 801c326:	2104      	movs	r1, #4
 801c328:	4638      	mov	r0, r7
 801c32a:	f7ff ff9f 	bl	801c26c <__sfmoreglue>
 801c32e:	6030      	str	r0, [r6, #0]
 801c330:	2800      	cmp	r0, #0
 801c332:	d1f1      	bne.n	801c318 <__sfp+0x20>
 801c334:	230c      	movs	r3, #12
 801c336:	603b      	str	r3, [r7, #0]
 801c338:	4604      	mov	r4, r0
 801c33a:	4620      	mov	r0, r4
 801c33c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c33e:	4b0b      	ldr	r3, [pc, #44]	; (801c36c <__sfp+0x74>)
 801c340:	6665      	str	r5, [r4, #100]	; 0x64
 801c342:	e9c4 5500 	strd	r5, r5, [r4]
 801c346:	60a5      	str	r5, [r4, #8]
 801c348:	e9c4 3503 	strd	r3, r5, [r4, #12]
 801c34c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 801c350:	2208      	movs	r2, #8
 801c352:	4629      	mov	r1, r5
 801c354:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801c358:	f7fe fa91 	bl	801a87e <memset>
 801c35c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801c360:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801c364:	e7e9      	b.n	801c33a <__sfp+0x42>
 801c366:	bf00      	nop
 801c368:	08020724 	.word	0x08020724
 801c36c:	ffff0001 	.word	0xffff0001

0801c370 <_fwalk_reent>:
 801c370:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c374:	4680      	mov	r8, r0
 801c376:	4689      	mov	r9, r1
 801c378:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801c37c:	2600      	movs	r6, #0
 801c37e:	b914      	cbnz	r4, 801c386 <_fwalk_reent+0x16>
 801c380:	4630      	mov	r0, r6
 801c382:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c386:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801c38a:	3f01      	subs	r7, #1
 801c38c:	d501      	bpl.n	801c392 <_fwalk_reent+0x22>
 801c38e:	6824      	ldr	r4, [r4, #0]
 801c390:	e7f5      	b.n	801c37e <_fwalk_reent+0xe>
 801c392:	89ab      	ldrh	r3, [r5, #12]
 801c394:	2b01      	cmp	r3, #1
 801c396:	d907      	bls.n	801c3a8 <_fwalk_reent+0x38>
 801c398:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801c39c:	3301      	adds	r3, #1
 801c39e:	d003      	beq.n	801c3a8 <_fwalk_reent+0x38>
 801c3a0:	4629      	mov	r1, r5
 801c3a2:	4640      	mov	r0, r8
 801c3a4:	47c8      	blx	r9
 801c3a6:	4306      	orrs	r6, r0
 801c3a8:	3568      	adds	r5, #104	; 0x68
 801c3aa:	e7ee      	b.n	801c38a <_fwalk_reent+0x1a>

0801c3ac <_localeconv_r>:
 801c3ac:	4b04      	ldr	r3, [pc, #16]	; (801c3c0 <_localeconv_r+0x14>)
 801c3ae:	681b      	ldr	r3, [r3, #0]
 801c3b0:	6a18      	ldr	r0, [r3, #32]
 801c3b2:	4b04      	ldr	r3, [pc, #16]	; (801c3c4 <_localeconv_r+0x18>)
 801c3b4:	2800      	cmp	r0, #0
 801c3b6:	bf08      	it	eq
 801c3b8:	4618      	moveq	r0, r3
 801c3ba:	30f0      	adds	r0, #240	; 0xf0
 801c3bc:	4770      	bx	lr
 801c3be:	bf00      	nop
 801c3c0:	2400003c 	.word	0x2400003c
 801c3c4:	240000a0 	.word	0x240000a0

0801c3c8 <__swhatbuf_r>:
 801c3c8:	b570      	push	{r4, r5, r6, lr}
 801c3ca:	460e      	mov	r6, r1
 801c3cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c3d0:	2900      	cmp	r1, #0
 801c3d2:	b096      	sub	sp, #88	; 0x58
 801c3d4:	4614      	mov	r4, r2
 801c3d6:	461d      	mov	r5, r3
 801c3d8:	da07      	bge.n	801c3ea <__swhatbuf_r+0x22>
 801c3da:	2300      	movs	r3, #0
 801c3dc:	602b      	str	r3, [r5, #0]
 801c3de:	89b3      	ldrh	r3, [r6, #12]
 801c3e0:	061a      	lsls	r2, r3, #24
 801c3e2:	d410      	bmi.n	801c406 <__swhatbuf_r+0x3e>
 801c3e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801c3e8:	e00e      	b.n	801c408 <__swhatbuf_r+0x40>
 801c3ea:	466a      	mov	r2, sp
 801c3ec:	f000 fef2 	bl	801d1d4 <_fstat_r>
 801c3f0:	2800      	cmp	r0, #0
 801c3f2:	dbf2      	blt.n	801c3da <__swhatbuf_r+0x12>
 801c3f4:	9a01      	ldr	r2, [sp, #4]
 801c3f6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801c3fa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801c3fe:	425a      	negs	r2, r3
 801c400:	415a      	adcs	r2, r3
 801c402:	602a      	str	r2, [r5, #0]
 801c404:	e7ee      	b.n	801c3e4 <__swhatbuf_r+0x1c>
 801c406:	2340      	movs	r3, #64	; 0x40
 801c408:	2000      	movs	r0, #0
 801c40a:	6023      	str	r3, [r4, #0]
 801c40c:	b016      	add	sp, #88	; 0x58
 801c40e:	bd70      	pop	{r4, r5, r6, pc}

0801c410 <__smakebuf_r>:
 801c410:	898b      	ldrh	r3, [r1, #12]
 801c412:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801c414:	079d      	lsls	r5, r3, #30
 801c416:	4606      	mov	r6, r0
 801c418:	460c      	mov	r4, r1
 801c41a:	d507      	bpl.n	801c42c <__smakebuf_r+0x1c>
 801c41c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801c420:	6023      	str	r3, [r4, #0]
 801c422:	6123      	str	r3, [r4, #16]
 801c424:	2301      	movs	r3, #1
 801c426:	6163      	str	r3, [r4, #20]
 801c428:	b002      	add	sp, #8
 801c42a:	bd70      	pop	{r4, r5, r6, pc}
 801c42c:	ab01      	add	r3, sp, #4
 801c42e:	466a      	mov	r2, sp
 801c430:	f7ff ffca 	bl	801c3c8 <__swhatbuf_r>
 801c434:	9900      	ldr	r1, [sp, #0]
 801c436:	4605      	mov	r5, r0
 801c438:	4630      	mov	r0, r6
 801c43a:	f000 fb69 	bl	801cb10 <_malloc_r>
 801c43e:	b948      	cbnz	r0, 801c454 <__smakebuf_r+0x44>
 801c440:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c444:	059a      	lsls	r2, r3, #22
 801c446:	d4ef      	bmi.n	801c428 <__smakebuf_r+0x18>
 801c448:	f023 0303 	bic.w	r3, r3, #3
 801c44c:	f043 0302 	orr.w	r3, r3, #2
 801c450:	81a3      	strh	r3, [r4, #12]
 801c452:	e7e3      	b.n	801c41c <__smakebuf_r+0xc>
 801c454:	4b0d      	ldr	r3, [pc, #52]	; (801c48c <__smakebuf_r+0x7c>)
 801c456:	62b3      	str	r3, [r6, #40]	; 0x28
 801c458:	89a3      	ldrh	r3, [r4, #12]
 801c45a:	6020      	str	r0, [r4, #0]
 801c45c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c460:	81a3      	strh	r3, [r4, #12]
 801c462:	9b00      	ldr	r3, [sp, #0]
 801c464:	6163      	str	r3, [r4, #20]
 801c466:	9b01      	ldr	r3, [sp, #4]
 801c468:	6120      	str	r0, [r4, #16]
 801c46a:	b15b      	cbz	r3, 801c484 <__smakebuf_r+0x74>
 801c46c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c470:	4630      	mov	r0, r6
 801c472:	f000 fec1 	bl	801d1f8 <_isatty_r>
 801c476:	b128      	cbz	r0, 801c484 <__smakebuf_r+0x74>
 801c478:	89a3      	ldrh	r3, [r4, #12]
 801c47a:	f023 0303 	bic.w	r3, r3, #3
 801c47e:	f043 0301 	orr.w	r3, r3, #1
 801c482:	81a3      	strh	r3, [r4, #12]
 801c484:	89a3      	ldrh	r3, [r4, #12]
 801c486:	431d      	orrs	r5, r3
 801c488:	81a5      	strh	r5, [r4, #12]
 801c48a:	e7cd      	b.n	801c428 <__smakebuf_r+0x18>
 801c48c:	0801c261 	.word	0x0801c261

0801c490 <malloc>:
 801c490:	4b02      	ldr	r3, [pc, #8]	; (801c49c <malloc+0xc>)
 801c492:	4601      	mov	r1, r0
 801c494:	6818      	ldr	r0, [r3, #0]
 801c496:	f000 bb3b 	b.w	801cb10 <_malloc_r>
 801c49a:	bf00      	nop
 801c49c:	2400003c 	.word	0x2400003c

0801c4a0 <_Balloc>:
 801c4a0:	b570      	push	{r4, r5, r6, lr}
 801c4a2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801c4a4:	4604      	mov	r4, r0
 801c4a6:	460e      	mov	r6, r1
 801c4a8:	b93d      	cbnz	r5, 801c4ba <_Balloc+0x1a>
 801c4aa:	2010      	movs	r0, #16
 801c4ac:	f7ff fff0 	bl	801c490 <malloc>
 801c4b0:	6260      	str	r0, [r4, #36]	; 0x24
 801c4b2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801c4b6:	6005      	str	r5, [r0, #0]
 801c4b8:	60c5      	str	r5, [r0, #12]
 801c4ba:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801c4bc:	68eb      	ldr	r3, [r5, #12]
 801c4be:	b183      	cbz	r3, 801c4e2 <_Balloc+0x42>
 801c4c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c4c2:	68db      	ldr	r3, [r3, #12]
 801c4c4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801c4c8:	b9b8      	cbnz	r0, 801c4fa <_Balloc+0x5a>
 801c4ca:	2101      	movs	r1, #1
 801c4cc:	fa01 f506 	lsl.w	r5, r1, r6
 801c4d0:	1d6a      	adds	r2, r5, #5
 801c4d2:	0092      	lsls	r2, r2, #2
 801c4d4:	4620      	mov	r0, r4
 801c4d6:	f000 fabf 	bl	801ca58 <_calloc_r>
 801c4da:	b160      	cbz	r0, 801c4f6 <_Balloc+0x56>
 801c4dc:	e9c0 6501 	strd	r6, r5, [r0, #4]
 801c4e0:	e00e      	b.n	801c500 <_Balloc+0x60>
 801c4e2:	2221      	movs	r2, #33	; 0x21
 801c4e4:	2104      	movs	r1, #4
 801c4e6:	4620      	mov	r0, r4
 801c4e8:	f000 fab6 	bl	801ca58 <_calloc_r>
 801c4ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c4ee:	60e8      	str	r0, [r5, #12]
 801c4f0:	68db      	ldr	r3, [r3, #12]
 801c4f2:	2b00      	cmp	r3, #0
 801c4f4:	d1e4      	bne.n	801c4c0 <_Balloc+0x20>
 801c4f6:	2000      	movs	r0, #0
 801c4f8:	bd70      	pop	{r4, r5, r6, pc}
 801c4fa:	6802      	ldr	r2, [r0, #0]
 801c4fc:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 801c500:	2300      	movs	r3, #0
 801c502:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801c506:	e7f7      	b.n	801c4f8 <_Balloc+0x58>

0801c508 <_Bfree>:
 801c508:	b570      	push	{r4, r5, r6, lr}
 801c50a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 801c50c:	4606      	mov	r6, r0
 801c50e:	460d      	mov	r5, r1
 801c510:	b93c      	cbnz	r4, 801c522 <_Bfree+0x1a>
 801c512:	2010      	movs	r0, #16
 801c514:	f7ff ffbc 	bl	801c490 <malloc>
 801c518:	6270      	str	r0, [r6, #36]	; 0x24
 801c51a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801c51e:	6004      	str	r4, [r0, #0]
 801c520:	60c4      	str	r4, [r0, #12]
 801c522:	b13d      	cbz	r5, 801c534 <_Bfree+0x2c>
 801c524:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801c526:	686a      	ldr	r2, [r5, #4]
 801c528:	68db      	ldr	r3, [r3, #12]
 801c52a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801c52e:	6029      	str	r1, [r5, #0]
 801c530:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 801c534:	bd70      	pop	{r4, r5, r6, pc}

0801c536 <__multadd>:
 801c536:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c53a:	690d      	ldr	r5, [r1, #16]
 801c53c:	461f      	mov	r7, r3
 801c53e:	4606      	mov	r6, r0
 801c540:	460c      	mov	r4, r1
 801c542:	f101 0c14 	add.w	ip, r1, #20
 801c546:	2300      	movs	r3, #0
 801c548:	f8dc 0000 	ldr.w	r0, [ip]
 801c54c:	b281      	uxth	r1, r0
 801c54e:	fb02 7101 	mla	r1, r2, r1, r7
 801c552:	0c0f      	lsrs	r7, r1, #16
 801c554:	0c00      	lsrs	r0, r0, #16
 801c556:	fb02 7000 	mla	r0, r2, r0, r7
 801c55a:	b289      	uxth	r1, r1
 801c55c:	3301      	adds	r3, #1
 801c55e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801c562:	429d      	cmp	r5, r3
 801c564:	ea4f 4710 	mov.w	r7, r0, lsr #16
 801c568:	f84c 1b04 	str.w	r1, [ip], #4
 801c56c:	dcec      	bgt.n	801c548 <__multadd+0x12>
 801c56e:	b1d7      	cbz	r7, 801c5a6 <__multadd+0x70>
 801c570:	68a3      	ldr	r3, [r4, #8]
 801c572:	42ab      	cmp	r3, r5
 801c574:	dc12      	bgt.n	801c59c <__multadd+0x66>
 801c576:	6861      	ldr	r1, [r4, #4]
 801c578:	4630      	mov	r0, r6
 801c57a:	3101      	adds	r1, #1
 801c57c:	f7ff ff90 	bl	801c4a0 <_Balloc>
 801c580:	6922      	ldr	r2, [r4, #16]
 801c582:	3202      	adds	r2, #2
 801c584:	f104 010c 	add.w	r1, r4, #12
 801c588:	4680      	mov	r8, r0
 801c58a:	0092      	lsls	r2, r2, #2
 801c58c:	300c      	adds	r0, #12
 801c58e:	f7fe f952 	bl	801a836 <memcpy>
 801c592:	4621      	mov	r1, r4
 801c594:	4630      	mov	r0, r6
 801c596:	f7ff ffb7 	bl	801c508 <_Bfree>
 801c59a:	4644      	mov	r4, r8
 801c59c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801c5a0:	3501      	adds	r5, #1
 801c5a2:	615f      	str	r7, [r3, #20]
 801c5a4:	6125      	str	r5, [r4, #16]
 801c5a6:	4620      	mov	r0, r4
 801c5a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801c5ac <__hi0bits>:
 801c5ac:	0c02      	lsrs	r2, r0, #16
 801c5ae:	0412      	lsls	r2, r2, #16
 801c5b0:	4603      	mov	r3, r0
 801c5b2:	b9b2      	cbnz	r2, 801c5e2 <__hi0bits+0x36>
 801c5b4:	0403      	lsls	r3, r0, #16
 801c5b6:	2010      	movs	r0, #16
 801c5b8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801c5bc:	bf04      	itt	eq
 801c5be:	021b      	lsleq	r3, r3, #8
 801c5c0:	3008      	addeq	r0, #8
 801c5c2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801c5c6:	bf04      	itt	eq
 801c5c8:	011b      	lsleq	r3, r3, #4
 801c5ca:	3004      	addeq	r0, #4
 801c5cc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801c5d0:	bf04      	itt	eq
 801c5d2:	009b      	lsleq	r3, r3, #2
 801c5d4:	3002      	addeq	r0, #2
 801c5d6:	2b00      	cmp	r3, #0
 801c5d8:	db06      	blt.n	801c5e8 <__hi0bits+0x3c>
 801c5da:	005b      	lsls	r3, r3, #1
 801c5dc:	d503      	bpl.n	801c5e6 <__hi0bits+0x3a>
 801c5de:	3001      	adds	r0, #1
 801c5e0:	4770      	bx	lr
 801c5e2:	2000      	movs	r0, #0
 801c5e4:	e7e8      	b.n	801c5b8 <__hi0bits+0xc>
 801c5e6:	2020      	movs	r0, #32
 801c5e8:	4770      	bx	lr

0801c5ea <__lo0bits>:
 801c5ea:	6803      	ldr	r3, [r0, #0]
 801c5ec:	f013 0207 	ands.w	r2, r3, #7
 801c5f0:	4601      	mov	r1, r0
 801c5f2:	d00b      	beq.n	801c60c <__lo0bits+0x22>
 801c5f4:	07da      	lsls	r2, r3, #31
 801c5f6:	d423      	bmi.n	801c640 <__lo0bits+0x56>
 801c5f8:	0798      	lsls	r0, r3, #30
 801c5fa:	bf49      	itett	mi
 801c5fc:	085b      	lsrmi	r3, r3, #1
 801c5fe:	089b      	lsrpl	r3, r3, #2
 801c600:	2001      	movmi	r0, #1
 801c602:	600b      	strmi	r3, [r1, #0]
 801c604:	bf5c      	itt	pl
 801c606:	600b      	strpl	r3, [r1, #0]
 801c608:	2002      	movpl	r0, #2
 801c60a:	4770      	bx	lr
 801c60c:	b298      	uxth	r0, r3
 801c60e:	b9a8      	cbnz	r0, 801c63c <__lo0bits+0x52>
 801c610:	0c1b      	lsrs	r3, r3, #16
 801c612:	2010      	movs	r0, #16
 801c614:	f013 0fff 	tst.w	r3, #255	; 0xff
 801c618:	bf04      	itt	eq
 801c61a:	0a1b      	lsreq	r3, r3, #8
 801c61c:	3008      	addeq	r0, #8
 801c61e:	071a      	lsls	r2, r3, #28
 801c620:	bf04      	itt	eq
 801c622:	091b      	lsreq	r3, r3, #4
 801c624:	3004      	addeq	r0, #4
 801c626:	079a      	lsls	r2, r3, #30
 801c628:	bf04      	itt	eq
 801c62a:	089b      	lsreq	r3, r3, #2
 801c62c:	3002      	addeq	r0, #2
 801c62e:	07da      	lsls	r2, r3, #31
 801c630:	d402      	bmi.n	801c638 <__lo0bits+0x4e>
 801c632:	085b      	lsrs	r3, r3, #1
 801c634:	d006      	beq.n	801c644 <__lo0bits+0x5a>
 801c636:	3001      	adds	r0, #1
 801c638:	600b      	str	r3, [r1, #0]
 801c63a:	4770      	bx	lr
 801c63c:	4610      	mov	r0, r2
 801c63e:	e7e9      	b.n	801c614 <__lo0bits+0x2a>
 801c640:	2000      	movs	r0, #0
 801c642:	4770      	bx	lr
 801c644:	2020      	movs	r0, #32
 801c646:	4770      	bx	lr

0801c648 <__i2b>:
 801c648:	b510      	push	{r4, lr}
 801c64a:	460c      	mov	r4, r1
 801c64c:	2101      	movs	r1, #1
 801c64e:	f7ff ff27 	bl	801c4a0 <_Balloc>
 801c652:	2201      	movs	r2, #1
 801c654:	6144      	str	r4, [r0, #20]
 801c656:	6102      	str	r2, [r0, #16]
 801c658:	bd10      	pop	{r4, pc}

0801c65a <__multiply>:
 801c65a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c65e:	4614      	mov	r4, r2
 801c660:	690a      	ldr	r2, [r1, #16]
 801c662:	6923      	ldr	r3, [r4, #16]
 801c664:	429a      	cmp	r2, r3
 801c666:	bfb8      	it	lt
 801c668:	460b      	movlt	r3, r1
 801c66a:	4688      	mov	r8, r1
 801c66c:	bfbc      	itt	lt
 801c66e:	46a0      	movlt	r8, r4
 801c670:	461c      	movlt	r4, r3
 801c672:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801c676:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801c67a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801c67e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801c682:	eb07 0609 	add.w	r6, r7, r9
 801c686:	42b3      	cmp	r3, r6
 801c688:	bfb8      	it	lt
 801c68a:	3101      	addlt	r1, #1
 801c68c:	f7ff ff08 	bl	801c4a0 <_Balloc>
 801c690:	f100 0514 	add.w	r5, r0, #20
 801c694:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 801c698:	462b      	mov	r3, r5
 801c69a:	2200      	movs	r2, #0
 801c69c:	4573      	cmp	r3, lr
 801c69e:	d316      	bcc.n	801c6ce <__multiply+0x74>
 801c6a0:	f104 0214 	add.w	r2, r4, #20
 801c6a4:	f108 0114 	add.w	r1, r8, #20
 801c6a8:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 801c6ac:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 801c6b0:	9300      	str	r3, [sp, #0]
 801c6b2:	9b00      	ldr	r3, [sp, #0]
 801c6b4:	9201      	str	r2, [sp, #4]
 801c6b6:	4293      	cmp	r3, r2
 801c6b8:	d80c      	bhi.n	801c6d4 <__multiply+0x7a>
 801c6ba:	2e00      	cmp	r6, #0
 801c6bc:	dd03      	ble.n	801c6c6 <__multiply+0x6c>
 801c6be:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801c6c2:	2b00      	cmp	r3, #0
 801c6c4:	d05d      	beq.n	801c782 <__multiply+0x128>
 801c6c6:	6106      	str	r6, [r0, #16]
 801c6c8:	b003      	add	sp, #12
 801c6ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c6ce:	f843 2b04 	str.w	r2, [r3], #4
 801c6d2:	e7e3      	b.n	801c69c <__multiply+0x42>
 801c6d4:	f8b2 b000 	ldrh.w	fp, [r2]
 801c6d8:	f1bb 0f00 	cmp.w	fp, #0
 801c6dc:	d023      	beq.n	801c726 <__multiply+0xcc>
 801c6de:	4689      	mov	r9, r1
 801c6e0:	46ac      	mov	ip, r5
 801c6e2:	f04f 0800 	mov.w	r8, #0
 801c6e6:	f859 4b04 	ldr.w	r4, [r9], #4
 801c6ea:	f8dc a000 	ldr.w	sl, [ip]
 801c6ee:	b2a3      	uxth	r3, r4
 801c6f0:	fa1f fa8a 	uxth.w	sl, sl
 801c6f4:	fb0b a303 	mla	r3, fp, r3, sl
 801c6f8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801c6fc:	f8dc 4000 	ldr.w	r4, [ip]
 801c700:	4443      	add	r3, r8
 801c702:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801c706:	fb0b 840a 	mla	r4, fp, sl, r8
 801c70a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 801c70e:	46e2      	mov	sl, ip
 801c710:	b29b      	uxth	r3, r3
 801c712:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801c716:	454f      	cmp	r7, r9
 801c718:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801c71c:	f84a 3b04 	str.w	r3, [sl], #4
 801c720:	d82b      	bhi.n	801c77a <__multiply+0x120>
 801c722:	f8cc 8004 	str.w	r8, [ip, #4]
 801c726:	9b01      	ldr	r3, [sp, #4]
 801c728:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 801c72c:	3204      	adds	r2, #4
 801c72e:	f1ba 0f00 	cmp.w	sl, #0
 801c732:	d020      	beq.n	801c776 <__multiply+0x11c>
 801c734:	682b      	ldr	r3, [r5, #0]
 801c736:	4689      	mov	r9, r1
 801c738:	46a8      	mov	r8, r5
 801c73a:	f04f 0b00 	mov.w	fp, #0
 801c73e:	f8b9 c000 	ldrh.w	ip, [r9]
 801c742:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 801c746:	fb0a 440c 	mla	r4, sl, ip, r4
 801c74a:	445c      	add	r4, fp
 801c74c:	46c4      	mov	ip, r8
 801c74e:	b29b      	uxth	r3, r3
 801c750:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801c754:	f84c 3b04 	str.w	r3, [ip], #4
 801c758:	f859 3b04 	ldr.w	r3, [r9], #4
 801c75c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 801c760:	0c1b      	lsrs	r3, r3, #16
 801c762:	fb0a b303 	mla	r3, sl, r3, fp
 801c766:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801c76a:	454f      	cmp	r7, r9
 801c76c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 801c770:	d805      	bhi.n	801c77e <__multiply+0x124>
 801c772:	f8c8 3004 	str.w	r3, [r8, #4]
 801c776:	3504      	adds	r5, #4
 801c778:	e79b      	b.n	801c6b2 <__multiply+0x58>
 801c77a:	46d4      	mov	ip, sl
 801c77c:	e7b3      	b.n	801c6e6 <__multiply+0x8c>
 801c77e:	46e0      	mov	r8, ip
 801c780:	e7dd      	b.n	801c73e <__multiply+0xe4>
 801c782:	3e01      	subs	r6, #1
 801c784:	e799      	b.n	801c6ba <__multiply+0x60>
	...

0801c788 <__pow5mult>:
 801c788:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c78c:	4615      	mov	r5, r2
 801c78e:	f012 0203 	ands.w	r2, r2, #3
 801c792:	4606      	mov	r6, r0
 801c794:	460f      	mov	r7, r1
 801c796:	d007      	beq.n	801c7a8 <__pow5mult+0x20>
 801c798:	3a01      	subs	r2, #1
 801c79a:	4c21      	ldr	r4, [pc, #132]	; (801c820 <__pow5mult+0x98>)
 801c79c:	2300      	movs	r3, #0
 801c79e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801c7a2:	f7ff fec8 	bl	801c536 <__multadd>
 801c7a6:	4607      	mov	r7, r0
 801c7a8:	10ad      	asrs	r5, r5, #2
 801c7aa:	d035      	beq.n	801c818 <__pow5mult+0x90>
 801c7ac:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801c7ae:	b93c      	cbnz	r4, 801c7c0 <__pow5mult+0x38>
 801c7b0:	2010      	movs	r0, #16
 801c7b2:	f7ff fe6d 	bl	801c490 <malloc>
 801c7b6:	6270      	str	r0, [r6, #36]	; 0x24
 801c7b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801c7bc:	6004      	str	r4, [r0, #0]
 801c7be:	60c4      	str	r4, [r0, #12]
 801c7c0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801c7c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801c7c8:	b94c      	cbnz	r4, 801c7de <__pow5mult+0x56>
 801c7ca:	f240 2171 	movw	r1, #625	; 0x271
 801c7ce:	4630      	mov	r0, r6
 801c7d0:	f7ff ff3a 	bl	801c648 <__i2b>
 801c7d4:	2300      	movs	r3, #0
 801c7d6:	f8c8 0008 	str.w	r0, [r8, #8]
 801c7da:	4604      	mov	r4, r0
 801c7dc:	6003      	str	r3, [r0, #0]
 801c7de:	f04f 0800 	mov.w	r8, #0
 801c7e2:	07eb      	lsls	r3, r5, #31
 801c7e4:	d50a      	bpl.n	801c7fc <__pow5mult+0x74>
 801c7e6:	4639      	mov	r1, r7
 801c7e8:	4622      	mov	r2, r4
 801c7ea:	4630      	mov	r0, r6
 801c7ec:	f7ff ff35 	bl	801c65a <__multiply>
 801c7f0:	4639      	mov	r1, r7
 801c7f2:	4681      	mov	r9, r0
 801c7f4:	4630      	mov	r0, r6
 801c7f6:	f7ff fe87 	bl	801c508 <_Bfree>
 801c7fa:	464f      	mov	r7, r9
 801c7fc:	106d      	asrs	r5, r5, #1
 801c7fe:	d00b      	beq.n	801c818 <__pow5mult+0x90>
 801c800:	6820      	ldr	r0, [r4, #0]
 801c802:	b938      	cbnz	r0, 801c814 <__pow5mult+0x8c>
 801c804:	4622      	mov	r2, r4
 801c806:	4621      	mov	r1, r4
 801c808:	4630      	mov	r0, r6
 801c80a:	f7ff ff26 	bl	801c65a <__multiply>
 801c80e:	6020      	str	r0, [r4, #0]
 801c810:	f8c0 8000 	str.w	r8, [r0]
 801c814:	4604      	mov	r4, r0
 801c816:	e7e4      	b.n	801c7e2 <__pow5mult+0x5a>
 801c818:	4638      	mov	r0, r7
 801c81a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c81e:	bf00      	nop
 801c820:	080209c8 	.word	0x080209c8

0801c824 <__lshift>:
 801c824:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c828:	460c      	mov	r4, r1
 801c82a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801c82e:	6923      	ldr	r3, [r4, #16]
 801c830:	6849      	ldr	r1, [r1, #4]
 801c832:	eb0a 0903 	add.w	r9, sl, r3
 801c836:	68a3      	ldr	r3, [r4, #8]
 801c838:	4607      	mov	r7, r0
 801c83a:	4616      	mov	r6, r2
 801c83c:	f109 0501 	add.w	r5, r9, #1
 801c840:	42ab      	cmp	r3, r5
 801c842:	db32      	blt.n	801c8aa <__lshift+0x86>
 801c844:	4638      	mov	r0, r7
 801c846:	f7ff fe2b 	bl	801c4a0 <_Balloc>
 801c84a:	2300      	movs	r3, #0
 801c84c:	4680      	mov	r8, r0
 801c84e:	f100 0114 	add.w	r1, r0, #20
 801c852:	461a      	mov	r2, r3
 801c854:	4553      	cmp	r3, sl
 801c856:	db2b      	blt.n	801c8b0 <__lshift+0x8c>
 801c858:	6920      	ldr	r0, [r4, #16]
 801c85a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801c85e:	f104 0314 	add.w	r3, r4, #20
 801c862:	f016 021f 	ands.w	r2, r6, #31
 801c866:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801c86a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801c86e:	d025      	beq.n	801c8bc <__lshift+0x98>
 801c870:	f1c2 0e20 	rsb	lr, r2, #32
 801c874:	2000      	movs	r0, #0
 801c876:	681e      	ldr	r6, [r3, #0]
 801c878:	468a      	mov	sl, r1
 801c87a:	4096      	lsls	r6, r2
 801c87c:	4330      	orrs	r0, r6
 801c87e:	f84a 0b04 	str.w	r0, [sl], #4
 801c882:	f853 0b04 	ldr.w	r0, [r3], #4
 801c886:	459c      	cmp	ip, r3
 801c888:	fa20 f00e 	lsr.w	r0, r0, lr
 801c88c:	d814      	bhi.n	801c8b8 <__lshift+0x94>
 801c88e:	6048      	str	r0, [r1, #4]
 801c890:	b108      	cbz	r0, 801c896 <__lshift+0x72>
 801c892:	f109 0502 	add.w	r5, r9, #2
 801c896:	3d01      	subs	r5, #1
 801c898:	4638      	mov	r0, r7
 801c89a:	f8c8 5010 	str.w	r5, [r8, #16]
 801c89e:	4621      	mov	r1, r4
 801c8a0:	f7ff fe32 	bl	801c508 <_Bfree>
 801c8a4:	4640      	mov	r0, r8
 801c8a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c8aa:	3101      	adds	r1, #1
 801c8ac:	005b      	lsls	r3, r3, #1
 801c8ae:	e7c7      	b.n	801c840 <__lshift+0x1c>
 801c8b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801c8b4:	3301      	adds	r3, #1
 801c8b6:	e7cd      	b.n	801c854 <__lshift+0x30>
 801c8b8:	4651      	mov	r1, sl
 801c8ba:	e7dc      	b.n	801c876 <__lshift+0x52>
 801c8bc:	3904      	subs	r1, #4
 801c8be:	f853 2b04 	ldr.w	r2, [r3], #4
 801c8c2:	f841 2f04 	str.w	r2, [r1, #4]!
 801c8c6:	459c      	cmp	ip, r3
 801c8c8:	d8f9      	bhi.n	801c8be <__lshift+0x9a>
 801c8ca:	e7e4      	b.n	801c896 <__lshift+0x72>

0801c8cc <__mcmp>:
 801c8cc:	6903      	ldr	r3, [r0, #16]
 801c8ce:	690a      	ldr	r2, [r1, #16]
 801c8d0:	1a9b      	subs	r3, r3, r2
 801c8d2:	b530      	push	{r4, r5, lr}
 801c8d4:	d10c      	bne.n	801c8f0 <__mcmp+0x24>
 801c8d6:	0092      	lsls	r2, r2, #2
 801c8d8:	3014      	adds	r0, #20
 801c8da:	3114      	adds	r1, #20
 801c8dc:	1884      	adds	r4, r0, r2
 801c8de:	4411      	add	r1, r2
 801c8e0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801c8e4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801c8e8:	4295      	cmp	r5, r2
 801c8ea:	d003      	beq.n	801c8f4 <__mcmp+0x28>
 801c8ec:	d305      	bcc.n	801c8fa <__mcmp+0x2e>
 801c8ee:	2301      	movs	r3, #1
 801c8f0:	4618      	mov	r0, r3
 801c8f2:	bd30      	pop	{r4, r5, pc}
 801c8f4:	42a0      	cmp	r0, r4
 801c8f6:	d3f3      	bcc.n	801c8e0 <__mcmp+0x14>
 801c8f8:	e7fa      	b.n	801c8f0 <__mcmp+0x24>
 801c8fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c8fe:	e7f7      	b.n	801c8f0 <__mcmp+0x24>

0801c900 <__mdiff>:
 801c900:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c904:	460d      	mov	r5, r1
 801c906:	4607      	mov	r7, r0
 801c908:	4611      	mov	r1, r2
 801c90a:	4628      	mov	r0, r5
 801c90c:	4614      	mov	r4, r2
 801c90e:	f7ff ffdd 	bl	801c8cc <__mcmp>
 801c912:	1e06      	subs	r6, r0, #0
 801c914:	d108      	bne.n	801c928 <__mdiff+0x28>
 801c916:	4631      	mov	r1, r6
 801c918:	4638      	mov	r0, r7
 801c91a:	f7ff fdc1 	bl	801c4a0 <_Balloc>
 801c91e:	2301      	movs	r3, #1
 801c920:	e9c0 3604 	strd	r3, r6, [r0, #16]
 801c924:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c928:	bfa4      	itt	ge
 801c92a:	4623      	movge	r3, r4
 801c92c:	462c      	movge	r4, r5
 801c92e:	4638      	mov	r0, r7
 801c930:	6861      	ldr	r1, [r4, #4]
 801c932:	bfa6      	itte	ge
 801c934:	461d      	movge	r5, r3
 801c936:	2600      	movge	r6, #0
 801c938:	2601      	movlt	r6, #1
 801c93a:	f7ff fdb1 	bl	801c4a0 <_Balloc>
 801c93e:	692b      	ldr	r3, [r5, #16]
 801c940:	60c6      	str	r6, [r0, #12]
 801c942:	6926      	ldr	r6, [r4, #16]
 801c944:	f105 0914 	add.w	r9, r5, #20
 801c948:	f104 0214 	add.w	r2, r4, #20
 801c94c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 801c950:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 801c954:	f100 0514 	add.w	r5, r0, #20
 801c958:	f04f 0e00 	mov.w	lr, #0
 801c95c:	f852 ab04 	ldr.w	sl, [r2], #4
 801c960:	f859 4b04 	ldr.w	r4, [r9], #4
 801c964:	fa1e f18a 	uxtah	r1, lr, sl
 801c968:	b2a3      	uxth	r3, r4
 801c96a:	1ac9      	subs	r1, r1, r3
 801c96c:	0c23      	lsrs	r3, r4, #16
 801c96e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 801c972:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801c976:	b289      	uxth	r1, r1
 801c978:	ea4f 4e23 	mov.w	lr, r3, asr #16
 801c97c:	45c8      	cmp	r8, r9
 801c97e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801c982:	4694      	mov	ip, r2
 801c984:	f845 3b04 	str.w	r3, [r5], #4
 801c988:	d8e8      	bhi.n	801c95c <__mdiff+0x5c>
 801c98a:	45bc      	cmp	ip, r7
 801c98c:	d304      	bcc.n	801c998 <__mdiff+0x98>
 801c98e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801c992:	b183      	cbz	r3, 801c9b6 <__mdiff+0xb6>
 801c994:	6106      	str	r6, [r0, #16]
 801c996:	e7c5      	b.n	801c924 <__mdiff+0x24>
 801c998:	f85c 1b04 	ldr.w	r1, [ip], #4
 801c99c:	fa1e f381 	uxtah	r3, lr, r1
 801c9a0:	141a      	asrs	r2, r3, #16
 801c9a2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801c9a6:	b29b      	uxth	r3, r3
 801c9a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801c9ac:	ea4f 4e22 	mov.w	lr, r2, asr #16
 801c9b0:	f845 3b04 	str.w	r3, [r5], #4
 801c9b4:	e7e9      	b.n	801c98a <__mdiff+0x8a>
 801c9b6:	3e01      	subs	r6, #1
 801c9b8:	e7e9      	b.n	801c98e <__mdiff+0x8e>

0801c9ba <__d2b>:
 801c9ba:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801c9be:	460e      	mov	r6, r1
 801c9c0:	2101      	movs	r1, #1
 801c9c2:	ec59 8b10 	vmov	r8, r9, d0
 801c9c6:	4615      	mov	r5, r2
 801c9c8:	f7ff fd6a 	bl	801c4a0 <_Balloc>
 801c9cc:	f3c9 540a 	ubfx	r4, r9, #20, #11
 801c9d0:	4607      	mov	r7, r0
 801c9d2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801c9d6:	bb34      	cbnz	r4, 801ca26 <__d2b+0x6c>
 801c9d8:	9301      	str	r3, [sp, #4]
 801c9da:	f1b8 0300 	subs.w	r3, r8, #0
 801c9de:	d027      	beq.n	801ca30 <__d2b+0x76>
 801c9e0:	a802      	add	r0, sp, #8
 801c9e2:	f840 3d08 	str.w	r3, [r0, #-8]!
 801c9e6:	f7ff fe00 	bl	801c5ea <__lo0bits>
 801c9ea:	9900      	ldr	r1, [sp, #0]
 801c9ec:	b1f0      	cbz	r0, 801ca2c <__d2b+0x72>
 801c9ee:	9a01      	ldr	r2, [sp, #4]
 801c9f0:	f1c0 0320 	rsb	r3, r0, #32
 801c9f4:	fa02 f303 	lsl.w	r3, r2, r3
 801c9f8:	430b      	orrs	r3, r1
 801c9fa:	40c2      	lsrs	r2, r0
 801c9fc:	617b      	str	r3, [r7, #20]
 801c9fe:	9201      	str	r2, [sp, #4]
 801ca00:	9b01      	ldr	r3, [sp, #4]
 801ca02:	61bb      	str	r3, [r7, #24]
 801ca04:	2b00      	cmp	r3, #0
 801ca06:	bf14      	ite	ne
 801ca08:	2102      	movne	r1, #2
 801ca0a:	2101      	moveq	r1, #1
 801ca0c:	6139      	str	r1, [r7, #16]
 801ca0e:	b1c4      	cbz	r4, 801ca42 <__d2b+0x88>
 801ca10:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 801ca14:	4404      	add	r4, r0
 801ca16:	6034      	str	r4, [r6, #0]
 801ca18:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801ca1c:	6028      	str	r0, [r5, #0]
 801ca1e:	4638      	mov	r0, r7
 801ca20:	b003      	add	sp, #12
 801ca22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ca26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801ca2a:	e7d5      	b.n	801c9d8 <__d2b+0x1e>
 801ca2c:	6179      	str	r1, [r7, #20]
 801ca2e:	e7e7      	b.n	801ca00 <__d2b+0x46>
 801ca30:	a801      	add	r0, sp, #4
 801ca32:	f7ff fdda 	bl	801c5ea <__lo0bits>
 801ca36:	9b01      	ldr	r3, [sp, #4]
 801ca38:	617b      	str	r3, [r7, #20]
 801ca3a:	2101      	movs	r1, #1
 801ca3c:	6139      	str	r1, [r7, #16]
 801ca3e:	3020      	adds	r0, #32
 801ca40:	e7e5      	b.n	801ca0e <__d2b+0x54>
 801ca42:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 801ca46:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801ca4a:	6030      	str	r0, [r6, #0]
 801ca4c:	6918      	ldr	r0, [r3, #16]
 801ca4e:	f7ff fdad 	bl	801c5ac <__hi0bits>
 801ca52:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 801ca56:	e7e1      	b.n	801ca1c <__d2b+0x62>

0801ca58 <_calloc_r>:
 801ca58:	b538      	push	{r3, r4, r5, lr}
 801ca5a:	fb02 f401 	mul.w	r4, r2, r1
 801ca5e:	4621      	mov	r1, r4
 801ca60:	f000 f856 	bl	801cb10 <_malloc_r>
 801ca64:	4605      	mov	r5, r0
 801ca66:	b118      	cbz	r0, 801ca70 <_calloc_r+0x18>
 801ca68:	4622      	mov	r2, r4
 801ca6a:	2100      	movs	r1, #0
 801ca6c:	f7fd ff07 	bl	801a87e <memset>
 801ca70:	4628      	mov	r0, r5
 801ca72:	bd38      	pop	{r3, r4, r5, pc}

0801ca74 <_free_r>:
 801ca74:	b538      	push	{r3, r4, r5, lr}
 801ca76:	4605      	mov	r5, r0
 801ca78:	2900      	cmp	r1, #0
 801ca7a:	d045      	beq.n	801cb08 <_free_r+0x94>
 801ca7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ca80:	1f0c      	subs	r4, r1, #4
 801ca82:	2b00      	cmp	r3, #0
 801ca84:	bfb8      	it	lt
 801ca86:	18e4      	addlt	r4, r4, r3
 801ca88:	f000 fbd8 	bl	801d23c <__malloc_lock>
 801ca8c:	4a1f      	ldr	r2, [pc, #124]	; (801cb0c <_free_r+0x98>)
 801ca8e:	6813      	ldr	r3, [r2, #0]
 801ca90:	4610      	mov	r0, r2
 801ca92:	b933      	cbnz	r3, 801caa2 <_free_r+0x2e>
 801ca94:	6063      	str	r3, [r4, #4]
 801ca96:	6014      	str	r4, [r2, #0]
 801ca98:	4628      	mov	r0, r5
 801ca9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ca9e:	f000 bbce 	b.w	801d23e <__malloc_unlock>
 801caa2:	42a3      	cmp	r3, r4
 801caa4:	d90c      	bls.n	801cac0 <_free_r+0x4c>
 801caa6:	6821      	ldr	r1, [r4, #0]
 801caa8:	1862      	adds	r2, r4, r1
 801caaa:	4293      	cmp	r3, r2
 801caac:	bf04      	itt	eq
 801caae:	681a      	ldreq	r2, [r3, #0]
 801cab0:	685b      	ldreq	r3, [r3, #4]
 801cab2:	6063      	str	r3, [r4, #4]
 801cab4:	bf04      	itt	eq
 801cab6:	1852      	addeq	r2, r2, r1
 801cab8:	6022      	streq	r2, [r4, #0]
 801caba:	6004      	str	r4, [r0, #0]
 801cabc:	e7ec      	b.n	801ca98 <_free_r+0x24>
 801cabe:	4613      	mov	r3, r2
 801cac0:	685a      	ldr	r2, [r3, #4]
 801cac2:	b10a      	cbz	r2, 801cac8 <_free_r+0x54>
 801cac4:	42a2      	cmp	r2, r4
 801cac6:	d9fa      	bls.n	801cabe <_free_r+0x4a>
 801cac8:	6819      	ldr	r1, [r3, #0]
 801caca:	1858      	adds	r0, r3, r1
 801cacc:	42a0      	cmp	r0, r4
 801cace:	d10b      	bne.n	801cae8 <_free_r+0x74>
 801cad0:	6820      	ldr	r0, [r4, #0]
 801cad2:	4401      	add	r1, r0
 801cad4:	1858      	adds	r0, r3, r1
 801cad6:	4282      	cmp	r2, r0
 801cad8:	6019      	str	r1, [r3, #0]
 801cada:	d1dd      	bne.n	801ca98 <_free_r+0x24>
 801cadc:	6810      	ldr	r0, [r2, #0]
 801cade:	6852      	ldr	r2, [r2, #4]
 801cae0:	605a      	str	r2, [r3, #4]
 801cae2:	4401      	add	r1, r0
 801cae4:	6019      	str	r1, [r3, #0]
 801cae6:	e7d7      	b.n	801ca98 <_free_r+0x24>
 801cae8:	d902      	bls.n	801caf0 <_free_r+0x7c>
 801caea:	230c      	movs	r3, #12
 801caec:	602b      	str	r3, [r5, #0]
 801caee:	e7d3      	b.n	801ca98 <_free_r+0x24>
 801caf0:	6820      	ldr	r0, [r4, #0]
 801caf2:	1821      	adds	r1, r4, r0
 801caf4:	428a      	cmp	r2, r1
 801caf6:	bf04      	itt	eq
 801caf8:	6811      	ldreq	r1, [r2, #0]
 801cafa:	6852      	ldreq	r2, [r2, #4]
 801cafc:	6062      	str	r2, [r4, #4]
 801cafe:	bf04      	itt	eq
 801cb00:	1809      	addeq	r1, r1, r0
 801cb02:	6021      	streq	r1, [r4, #0]
 801cb04:	605c      	str	r4, [r3, #4]
 801cb06:	e7c7      	b.n	801ca98 <_free_r+0x24>
 801cb08:	bd38      	pop	{r3, r4, r5, pc}
 801cb0a:	bf00      	nop
 801cb0c:	2400956c 	.word	0x2400956c

0801cb10 <_malloc_r>:
 801cb10:	b570      	push	{r4, r5, r6, lr}
 801cb12:	1ccd      	adds	r5, r1, #3
 801cb14:	f025 0503 	bic.w	r5, r5, #3
 801cb18:	3508      	adds	r5, #8
 801cb1a:	2d0c      	cmp	r5, #12
 801cb1c:	bf38      	it	cc
 801cb1e:	250c      	movcc	r5, #12
 801cb20:	2d00      	cmp	r5, #0
 801cb22:	4606      	mov	r6, r0
 801cb24:	db01      	blt.n	801cb2a <_malloc_r+0x1a>
 801cb26:	42a9      	cmp	r1, r5
 801cb28:	d903      	bls.n	801cb32 <_malloc_r+0x22>
 801cb2a:	230c      	movs	r3, #12
 801cb2c:	6033      	str	r3, [r6, #0]
 801cb2e:	2000      	movs	r0, #0
 801cb30:	bd70      	pop	{r4, r5, r6, pc}
 801cb32:	f000 fb83 	bl	801d23c <__malloc_lock>
 801cb36:	4a21      	ldr	r2, [pc, #132]	; (801cbbc <_malloc_r+0xac>)
 801cb38:	6814      	ldr	r4, [r2, #0]
 801cb3a:	4621      	mov	r1, r4
 801cb3c:	b991      	cbnz	r1, 801cb64 <_malloc_r+0x54>
 801cb3e:	4c20      	ldr	r4, [pc, #128]	; (801cbc0 <_malloc_r+0xb0>)
 801cb40:	6823      	ldr	r3, [r4, #0]
 801cb42:	b91b      	cbnz	r3, 801cb4c <_malloc_r+0x3c>
 801cb44:	4630      	mov	r0, r6
 801cb46:	f000 facf 	bl	801d0e8 <_sbrk_r>
 801cb4a:	6020      	str	r0, [r4, #0]
 801cb4c:	4629      	mov	r1, r5
 801cb4e:	4630      	mov	r0, r6
 801cb50:	f000 faca 	bl	801d0e8 <_sbrk_r>
 801cb54:	1c43      	adds	r3, r0, #1
 801cb56:	d124      	bne.n	801cba2 <_malloc_r+0x92>
 801cb58:	230c      	movs	r3, #12
 801cb5a:	6033      	str	r3, [r6, #0]
 801cb5c:	4630      	mov	r0, r6
 801cb5e:	f000 fb6e 	bl	801d23e <__malloc_unlock>
 801cb62:	e7e4      	b.n	801cb2e <_malloc_r+0x1e>
 801cb64:	680b      	ldr	r3, [r1, #0]
 801cb66:	1b5b      	subs	r3, r3, r5
 801cb68:	d418      	bmi.n	801cb9c <_malloc_r+0x8c>
 801cb6a:	2b0b      	cmp	r3, #11
 801cb6c:	d90f      	bls.n	801cb8e <_malloc_r+0x7e>
 801cb6e:	600b      	str	r3, [r1, #0]
 801cb70:	50cd      	str	r5, [r1, r3]
 801cb72:	18cc      	adds	r4, r1, r3
 801cb74:	4630      	mov	r0, r6
 801cb76:	f000 fb62 	bl	801d23e <__malloc_unlock>
 801cb7a:	f104 000b 	add.w	r0, r4, #11
 801cb7e:	1d23      	adds	r3, r4, #4
 801cb80:	f020 0007 	bic.w	r0, r0, #7
 801cb84:	1ac3      	subs	r3, r0, r3
 801cb86:	d0d3      	beq.n	801cb30 <_malloc_r+0x20>
 801cb88:	425a      	negs	r2, r3
 801cb8a:	50e2      	str	r2, [r4, r3]
 801cb8c:	e7d0      	b.n	801cb30 <_malloc_r+0x20>
 801cb8e:	428c      	cmp	r4, r1
 801cb90:	684b      	ldr	r3, [r1, #4]
 801cb92:	bf16      	itet	ne
 801cb94:	6063      	strne	r3, [r4, #4]
 801cb96:	6013      	streq	r3, [r2, #0]
 801cb98:	460c      	movne	r4, r1
 801cb9a:	e7eb      	b.n	801cb74 <_malloc_r+0x64>
 801cb9c:	460c      	mov	r4, r1
 801cb9e:	6849      	ldr	r1, [r1, #4]
 801cba0:	e7cc      	b.n	801cb3c <_malloc_r+0x2c>
 801cba2:	1cc4      	adds	r4, r0, #3
 801cba4:	f024 0403 	bic.w	r4, r4, #3
 801cba8:	42a0      	cmp	r0, r4
 801cbaa:	d005      	beq.n	801cbb8 <_malloc_r+0xa8>
 801cbac:	1a21      	subs	r1, r4, r0
 801cbae:	4630      	mov	r0, r6
 801cbb0:	f000 fa9a 	bl	801d0e8 <_sbrk_r>
 801cbb4:	3001      	adds	r0, #1
 801cbb6:	d0cf      	beq.n	801cb58 <_malloc_r+0x48>
 801cbb8:	6025      	str	r5, [r4, #0]
 801cbba:	e7db      	b.n	801cb74 <_malloc_r+0x64>
 801cbbc:	2400956c 	.word	0x2400956c
 801cbc0:	24009570 	.word	0x24009570

0801cbc4 <__ssputs_r>:
 801cbc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cbc8:	688e      	ldr	r6, [r1, #8]
 801cbca:	429e      	cmp	r6, r3
 801cbcc:	4682      	mov	sl, r0
 801cbce:	460c      	mov	r4, r1
 801cbd0:	4690      	mov	r8, r2
 801cbd2:	4699      	mov	r9, r3
 801cbd4:	d837      	bhi.n	801cc46 <__ssputs_r+0x82>
 801cbd6:	898a      	ldrh	r2, [r1, #12]
 801cbd8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801cbdc:	d031      	beq.n	801cc42 <__ssputs_r+0x7e>
 801cbde:	6825      	ldr	r5, [r4, #0]
 801cbe0:	6909      	ldr	r1, [r1, #16]
 801cbe2:	1a6f      	subs	r7, r5, r1
 801cbe4:	6965      	ldr	r5, [r4, #20]
 801cbe6:	2302      	movs	r3, #2
 801cbe8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801cbec:	fb95 f5f3 	sdiv	r5, r5, r3
 801cbf0:	f109 0301 	add.w	r3, r9, #1
 801cbf4:	443b      	add	r3, r7
 801cbf6:	429d      	cmp	r5, r3
 801cbf8:	bf38      	it	cc
 801cbfa:	461d      	movcc	r5, r3
 801cbfc:	0553      	lsls	r3, r2, #21
 801cbfe:	d530      	bpl.n	801cc62 <__ssputs_r+0x9e>
 801cc00:	4629      	mov	r1, r5
 801cc02:	f7ff ff85 	bl	801cb10 <_malloc_r>
 801cc06:	4606      	mov	r6, r0
 801cc08:	b950      	cbnz	r0, 801cc20 <__ssputs_r+0x5c>
 801cc0a:	230c      	movs	r3, #12
 801cc0c:	f8ca 3000 	str.w	r3, [sl]
 801cc10:	89a3      	ldrh	r3, [r4, #12]
 801cc12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801cc16:	81a3      	strh	r3, [r4, #12]
 801cc18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801cc1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cc20:	463a      	mov	r2, r7
 801cc22:	6921      	ldr	r1, [r4, #16]
 801cc24:	f7fd fe07 	bl	801a836 <memcpy>
 801cc28:	89a3      	ldrh	r3, [r4, #12]
 801cc2a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801cc2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801cc32:	81a3      	strh	r3, [r4, #12]
 801cc34:	6126      	str	r6, [r4, #16]
 801cc36:	6165      	str	r5, [r4, #20]
 801cc38:	443e      	add	r6, r7
 801cc3a:	1bed      	subs	r5, r5, r7
 801cc3c:	6026      	str	r6, [r4, #0]
 801cc3e:	60a5      	str	r5, [r4, #8]
 801cc40:	464e      	mov	r6, r9
 801cc42:	454e      	cmp	r6, r9
 801cc44:	d900      	bls.n	801cc48 <__ssputs_r+0x84>
 801cc46:	464e      	mov	r6, r9
 801cc48:	4632      	mov	r2, r6
 801cc4a:	4641      	mov	r1, r8
 801cc4c:	6820      	ldr	r0, [r4, #0]
 801cc4e:	f7fd fdfd 	bl	801a84c <memmove>
 801cc52:	68a3      	ldr	r3, [r4, #8]
 801cc54:	1b9b      	subs	r3, r3, r6
 801cc56:	60a3      	str	r3, [r4, #8]
 801cc58:	6823      	ldr	r3, [r4, #0]
 801cc5a:	441e      	add	r6, r3
 801cc5c:	6026      	str	r6, [r4, #0]
 801cc5e:	2000      	movs	r0, #0
 801cc60:	e7dc      	b.n	801cc1c <__ssputs_r+0x58>
 801cc62:	462a      	mov	r2, r5
 801cc64:	f000 faec 	bl	801d240 <_realloc_r>
 801cc68:	4606      	mov	r6, r0
 801cc6a:	2800      	cmp	r0, #0
 801cc6c:	d1e2      	bne.n	801cc34 <__ssputs_r+0x70>
 801cc6e:	6921      	ldr	r1, [r4, #16]
 801cc70:	4650      	mov	r0, sl
 801cc72:	f7ff feff 	bl	801ca74 <_free_r>
 801cc76:	e7c8      	b.n	801cc0a <__ssputs_r+0x46>

0801cc78 <_svfiprintf_r>:
 801cc78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cc7c:	461d      	mov	r5, r3
 801cc7e:	898b      	ldrh	r3, [r1, #12]
 801cc80:	061f      	lsls	r7, r3, #24
 801cc82:	b09d      	sub	sp, #116	; 0x74
 801cc84:	4680      	mov	r8, r0
 801cc86:	460c      	mov	r4, r1
 801cc88:	4616      	mov	r6, r2
 801cc8a:	d50f      	bpl.n	801ccac <_svfiprintf_r+0x34>
 801cc8c:	690b      	ldr	r3, [r1, #16]
 801cc8e:	b96b      	cbnz	r3, 801ccac <_svfiprintf_r+0x34>
 801cc90:	2140      	movs	r1, #64	; 0x40
 801cc92:	f7ff ff3d 	bl	801cb10 <_malloc_r>
 801cc96:	6020      	str	r0, [r4, #0]
 801cc98:	6120      	str	r0, [r4, #16]
 801cc9a:	b928      	cbnz	r0, 801cca8 <_svfiprintf_r+0x30>
 801cc9c:	230c      	movs	r3, #12
 801cc9e:	f8c8 3000 	str.w	r3, [r8]
 801cca2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801cca6:	e0c8      	b.n	801ce3a <_svfiprintf_r+0x1c2>
 801cca8:	2340      	movs	r3, #64	; 0x40
 801ccaa:	6163      	str	r3, [r4, #20]
 801ccac:	2300      	movs	r3, #0
 801ccae:	9309      	str	r3, [sp, #36]	; 0x24
 801ccb0:	2320      	movs	r3, #32
 801ccb2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801ccb6:	2330      	movs	r3, #48	; 0x30
 801ccb8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801ccbc:	9503      	str	r5, [sp, #12]
 801ccbe:	f04f 0b01 	mov.w	fp, #1
 801ccc2:	4637      	mov	r7, r6
 801ccc4:	463d      	mov	r5, r7
 801ccc6:	f815 3b01 	ldrb.w	r3, [r5], #1
 801ccca:	b10b      	cbz	r3, 801ccd0 <_svfiprintf_r+0x58>
 801cccc:	2b25      	cmp	r3, #37	; 0x25
 801ccce:	d13e      	bne.n	801cd4e <_svfiprintf_r+0xd6>
 801ccd0:	ebb7 0a06 	subs.w	sl, r7, r6
 801ccd4:	d00b      	beq.n	801ccee <_svfiprintf_r+0x76>
 801ccd6:	4653      	mov	r3, sl
 801ccd8:	4632      	mov	r2, r6
 801ccda:	4621      	mov	r1, r4
 801ccdc:	4640      	mov	r0, r8
 801ccde:	f7ff ff71 	bl	801cbc4 <__ssputs_r>
 801cce2:	3001      	adds	r0, #1
 801cce4:	f000 80a4 	beq.w	801ce30 <_svfiprintf_r+0x1b8>
 801cce8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ccea:	4453      	add	r3, sl
 801ccec:	9309      	str	r3, [sp, #36]	; 0x24
 801ccee:	783b      	ldrb	r3, [r7, #0]
 801ccf0:	2b00      	cmp	r3, #0
 801ccf2:	f000 809d 	beq.w	801ce30 <_svfiprintf_r+0x1b8>
 801ccf6:	2300      	movs	r3, #0
 801ccf8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801ccfc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801cd00:	9304      	str	r3, [sp, #16]
 801cd02:	9307      	str	r3, [sp, #28]
 801cd04:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801cd08:	931a      	str	r3, [sp, #104]	; 0x68
 801cd0a:	462f      	mov	r7, r5
 801cd0c:	2205      	movs	r2, #5
 801cd0e:	f817 1b01 	ldrb.w	r1, [r7], #1
 801cd12:	4850      	ldr	r0, [pc, #320]	; (801ce54 <_svfiprintf_r+0x1dc>)
 801cd14:	f7e3 fae4 	bl	80002e0 <memchr>
 801cd18:	9b04      	ldr	r3, [sp, #16]
 801cd1a:	b9d0      	cbnz	r0, 801cd52 <_svfiprintf_r+0xda>
 801cd1c:	06d9      	lsls	r1, r3, #27
 801cd1e:	bf44      	itt	mi
 801cd20:	2220      	movmi	r2, #32
 801cd22:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801cd26:	071a      	lsls	r2, r3, #28
 801cd28:	bf44      	itt	mi
 801cd2a:	222b      	movmi	r2, #43	; 0x2b
 801cd2c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801cd30:	782a      	ldrb	r2, [r5, #0]
 801cd32:	2a2a      	cmp	r2, #42	; 0x2a
 801cd34:	d015      	beq.n	801cd62 <_svfiprintf_r+0xea>
 801cd36:	9a07      	ldr	r2, [sp, #28]
 801cd38:	462f      	mov	r7, r5
 801cd3a:	2000      	movs	r0, #0
 801cd3c:	250a      	movs	r5, #10
 801cd3e:	4639      	mov	r1, r7
 801cd40:	f811 3b01 	ldrb.w	r3, [r1], #1
 801cd44:	3b30      	subs	r3, #48	; 0x30
 801cd46:	2b09      	cmp	r3, #9
 801cd48:	d94d      	bls.n	801cde6 <_svfiprintf_r+0x16e>
 801cd4a:	b1b8      	cbz	r0, 801cd7c <_svfiprintf_r+0x104>
 801cd4c:	e00f      	b.n	801cd6e <_svfiprintf_r+0xf6>
 801cd4e:	462f      	mov	r7, r5
 801cd50:	e7b8      	b.n	801ccc4 <_svfiprintf_r+0x4c>
 801cd52:	4a40      	ldr	r2, [pc, #256]	; (801ce54 <_svfiprintf_r+0x1dc>)
 801cd54:	1a80      	subs	r0, r0, r2
 801cd56:	fa0b f000 	lsl.w	r0, fp, r0
 801cd5a:	4318      	orrs	r0, r3
 801cd5c:	9004      	str	r0, [sp, #16]
 801cd5e:	463d      	mov	r5, r7
 801cd60:	e7d3      	b.n	801cd0a <_svfiprintf_r+0x92>
 801cd62:	9a03      	ldr	r2, [sp, #12]
 801cd64:	1d11      	adds	r1, r2, #4
 801cd66:	6812      	ldr	r2, [r2, #0]
 801cd68:	9103      	str	r1, [sp, #12]
 801cd6a:	2a00      	cmp	r2, #0
 801cd6c:	db01      	blt.n	801cd72 <_svfiprintf_r+0xfa>
 801cd6e:	9207      	str	r2, [sp, #28]
 801cd70:	e004      	b.n	801cd7c <_svfiprintf_r+0x104>
 801cd72:	4252      	negs	r2, r2
 801cd74:	f043 0302 	orr.w	r3, r3, #2
 801cd78:	9207      	str	r2, [sp, #28]
 801cd7a:	9304      	str	r3, [sp, #16]
 801cd7c:	783b      	ldrb	r3, [r7, #0]
 801cd7e:	2b2e      	cmp	r3, #46	; 0x2e
 801cd80:	d10c      	bne.n	801cd9c <_svfiprintf_r+0x124>
 801cd82:	787b      	ldrb	r3, [r7, #1]
 801cd84:	2b2a      	cmp	r3, #42	; 0x2a
 801cd86:	d133      	bne.n	801cdf0 <_svfiprintf_r+0x178>
 801cd88:	9b03      	ldr	r3, [sp, #12]
 801cd8a:	1d1a      	adds	r2, r3, #4
 801cd8c:	681b      	ldr	r3, [r3, #0]
 801cd8e:	9203      	str	r2, [sp, #12]
 801cd90:	2b00      	cmp	r3, #0
 801cd92:	bfb8      	it	lt
 801cd94:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801cd98:	3702      	adds	r7, #2
 801cd9a:	9305      	str	r3, [sp, #20]
 801cd9c:	4d2e      	ldr	r5, [pc, #184]	; (801ce58 <_svfiprintf_r+0x1e0>)
 801cd9e:	7839      	ldrb	r1, [r7, #0]
 801cda0:	2203      	movs	r2, #3
 801cda2:	4628      	mov	r0, r5
 801cda4:	f7e3 fa9c 	bl	80002e0 <memchr>
 801cda8:	b138      	cbz	r0, 801cdba <_svfiprintf_r+0x142>
 801cdaa:	2340      	movs	r3, #64	; 0x40
 801cdac:	1b40      	subs	r0, r0, r5
 801cdae:	fa03 f000 	lsl.w	r0, r3, r0
 801cdb2:	9b04      	ldr	r3, [sp, #16]
 801cdb4:	4303      	orrs	r3, r0
 801cdb6:	3701      	adds	r7, #1
 801cdb8:	9304      	str	r3, [sp, #16]
 801cdba:	7839      	ldrb	r1, [r7, #0]
 801cdbc:	4827      	ldr	r0, [pc, #156]	; (801ce5c <_svfiprintf_r+0x1e4>)
 801cdbe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801cdc2:	2206      	movs	r2, #6
 801cdc4:	1c7e      	adds	r6, r7, #1
 801cdc6:	f7e3 fa8b 	bl	80002e0 <memchr>
 801cdca:	2800      	cmp	r0, #0
 801cdcc:	d038      	beq.n	801ce40 <_svfiprintf_r+0x1c8>
 801cdce:	4b24      	ldr	r3, [pc, #144]	; (801ce60 <_svfiprintf_r+0x1e8>)
 801cdd0:	bb13      	cbnz	r3, 801ce18 <_svfiprintf_r+0x1a0>
 801cdd2:	9b03      	ldr	r3, [sp, #12]
 801cdd4:	3307      	adds	r3, #7
 801cdd6:	f023 0307 	bic.w	r3, r3, #7
 801cdda:	3308      	adds	r3, #8
 801cddc:	9303      	str	r3, [sp, #12]
 801cdde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cde0:	444b      	add	r3, r9
 801cde2:	9309      	str	r3, [sp, #36]	; 0x24
 801cde4:	e76d      	b.n	801ccc2 <_svfiprintf_r+0x4a>
 801cde6:	fb05 3202 	mla	r2, r5, r2, r3
 801cdea:	2001      	movs	r0, #1
 801cdec:	460f      	mov	r7, r1
 801cdee:	e7a6      	b.n	801cd3e <_svfiprintf_r+0xc6>
 801cdf0:	2300      	movs	r3, #0
 801cdf2:	3701      	adds	r7, #1
 801cdf4:	9305      	str	r3, [sp, #20]
 801cdf6:	4619      	mov	r1, r3
 801cdf8:	250a      	movs	r5, #10
 801cdfa:	4638      	mov	r0, r7
 801cdfc:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ce00:	3a30      	subs	r2, #48	; 0x30
 801ce02:	2a09      	cmp	r2, #9
 801ce04:	d903      	bls.n	801ce0e <_svfiprintf_r+0x196>
 801ce06:	2b00      	cmp	r3, #0
 801ce08:	d0c8      	beq.n	801cd9c <_svfiprintf_r+0x124>
 801ce0a:	9105      	str	r1, [sp, #20]
 801ce0c:	e7c6      	b.n	801cd9c <_svfiprintf_r+0x124>
 801ce0e:	fb05 2101 	mla	r1, r5, r1, r2
 801ce12:	2301      	movs	r3, #1
 801ce14:	4607      	mov	r7, r0
 801ce16:	e7f0      	b.n	801cdfa <_svfiprintf_r+0x182>
 801ce18:	ab03      	add	r3, sp, #12
 801ce1a:	9300      	str	r3, [sp, #0]
 801ce1c:	4622      	mov	r2, r4
 801ce1e:	4b11      	ldr	r3, [pc, #68]	; (801ce64 <_svfiprintf_r+0x1ec>)
 801ce20:	a904      	add	r1, sp, #16
 801ce22:	4640      	mov	r0, r8
 801ce24:	f7fd fdb8 	bl	801a998 <_printf_float>
 801ce28:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 801ce2c:	4681      	mov	r9, r0
 801ce2e:	d1d6      	bne.n	801cdde <_svfiprintf_r+0x166>
 801ce30:	89a3      	ldrh	r3, [r4, #12]
 801ce32:	065b      	lsls	r3, r3, #25
 801ce34:	f53f af35 	bmi.w	801cca2 <_svfiprintf_r+0x2a>
 801ce38:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ce3a:	b01d      	add	sp, #116	; 0x74
 801ce3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ce40:	ab03      	add	r3, sp, #12
 801ce42:	9300      	str	r3, [sp, #0]
 801ce44:	4622      	mov	r2, r4
 801ce46:	4b07      	ldr	r3, [pc, #28]	; (801ce64 <_svfiprintf_r+0x1ec>)
 801ce48:	a904      	add	r1, sp, #16
 801ce4a:	4640      	mov	r0, r8
 801ce4c:	f7fe f846 	bl	801aedc <_printf_i>
 801ce50:	e7ea      	b.n	801ce28 <_svfiprintf_r+0x1b0>
 801ce52:	bf00      	nop
 801ce54:	080209d4 	.word	0x080209d4
 801ce58:	080209da 	.word	0x080209da
 801ce5c:	080209de 	.word	0x080209de
 801ce60:	0801a999 	.word	0x0801a999
 801ce64:	0801cbc5 	.word	0x0801cbc5

0801ce68 <__sfputc_r>:
 801ce68:	6893      	ldr	r3, [r2, #8]
 801ce6a:	3b01      	subs	r3, #1
 801ce6c:	2b00      	cmp	r3, #0
 801ce6e:	b410      	push	{r4}
 801ce70:	6093      	str	r3, [r2, #8]
 801ce72:	da08      	bge.n	801ce86 <__sfputc_r+0x1e>
 801ce74:	6994      	ldr	r4, [r2, #24]
 801ce76:	42a3      	cmp	r3, r4
 801ce78:	db01      	blt.n	801ce7e <__sfputc_r+0x16>
 801ce7a:	290a      	cmp	r1, #10
 801ce7c:	d103      	bne.n	801ce86 <__sfputc_r+0x1e>
 801ce7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ce82:	f7fe ba0d 	b.w	801b2a0 <__swbuf_r>
 801ce86:	6813      	ldr	r3, [r2, #0]
 801ce88:	1c58      	adds	r0, r3, #1
 801ce8a:	6010      	str	r0, [r2, #0]
 801ce8c:	7019      	strb	r1, [r3, #0]
 801ce8e:	4608      	mov	r0, r1
 801ce90:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ce94:	4770      	bx	lr

0801ce96 <__sfputs_r>:
 801ce96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ce98:	4606      	mov	r6, r0
 801ce9a:	460f      	mov	r7, r1
 801ce9c:	4614      	mov	r4, r2
 801ce9e:	18d5      	adds	r5, r2, r3
 801cea0:	42ac      	cmp	r4, r5
 801cea2:	d101      	bne.n	801cea8 <__sfputs_r+0x12>
 801cea4:	2000      	movs	r0, #0
 801cea6:	e007      	b.n	801ceb8 <__sfputs_r+0x22>
 801cea8:	463a      	mov	r2, r7
 801ceaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ceae:	4630      	mov	r0, r6
 801ceb0:	f7ff ffda 	bl	801ce68 <__sfputc_r>
 801ceb4:	1c43      	adds	r3, r0, #1
 801ceb6:	d1f3      	bne.n	801cea0 <__sfputs_r+0xa>
 801ceb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801cebc <_vfiprintf_r>:
 801cebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cec0:	460c      	mov	r4, r1
 801cec2:	b09d      	sub	sp, #116	; 0x74
 801cec4:	4617      	mov	r7, r2
 801cec6:	461d      	mov	r5, r3
 801cec8:	4606      	mov	r6, r0
 801ceca:	b118      	cbz	r0, 801ced4 <_vfiprintf_r+0x18>
 801cecc:	6983      	ldr	r3, [r0, #24]
 801cece:	b90b      	cbnz	r3, 801ced4 <_vfiprintf_r+0x18>
 801ced0:	f7ff f9e2 	bl	801c298 <__sinit>
 801ced4:	4b7c      	ldr	r3, [pc, #496]	; (801d0c8 <_vfiprintf_r+0x20c>)
 801ced6:	429c      	cmp	r4, r3
 801ced8:	d158      	bne.n	801cf8c <_vfiprintf_r+0xd0>
 801ceda:	6874      	ldr	r4, [r6, #4]
 801cedc:	89a3      	ldrh	r3, [r4, #12]
 801cede:	0718      	lsls	r0, r3, #28
 801cee0:	d55e      	bpl.n	801cfa0 <_vfiprintf_r+0xe4>
 801cee2:	6923      	ldr	r3, [r4, #16]
 801cee4:	2b00      	cmp	r3, #0
 801cee6:	d05b      	beq.n	801cfa0 <_vfiprintf_r+0xe4>
 801cee8:	2300      	movs	r3, #0
 801ceea:	9309      	str	r3, [sp, #36]	; 0x24
 801ceec:	2320      	movs	r3, #32
 801ceee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801cef2:	2330      	movs	r3, #48	; 0x30
 801cef4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801cef8:	9503      	str	r5, [sp, #12]
 801cefa:	f04f 0b01 	mov.w	fp, #1
 801cefe:	46b8      	mov	r8, r7
 801cf00:	4645      	mov	r5, r8
 801cf02:	f815 3b01 	ldrb.w	r3, [r5], #1
 801cf06:	b10b      	cbz	r3, 801cf0c <_vfiprintf_r+0x50>
 801cf08:	2b25      	cmp	r3, #37	; 0x25
 801cf0a:	d154      	bne.n	801cfb6 <_vfiprintf_r+0xfa>
 801cf0c:	ebb8 0a07 	subs.w	sl, r8, r7
 801cf10:	d00b      	beq.n	801cf2a <_vfiprintf_r+0x6e>
 801cf12:	4653      	mov	r3, sl
 801cf14:	463a      	mov	r2, r7
 801cf16:	4621      	mov	r1, r4
 801cf18:	4630      	mov	r0, r6
 801cf1a:	f7ff ffbc 	bl	801ce96 <__sfputs_r>
 801cf1e:	3001      	adds	r0, #1
 801cf20:	f000 80c2 	beq.w	801d0a8 <_vfiprintf_r+0x1ec>
 801cf24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cf26:	4453      	add	r3, sl
 801cf28:	9309      	str	r3, [sp, #36]	; 0x24
 801cf2a:	f898 3000 	ldrb.w	r3, [r8]
 801cf2e:	2b00      	cmp	r3, #0
 801cf30:	f000 80ba 	beq.w	801d0a8 <_vfiprintf_r+0x1ec>
 801cf34:	2300      	movs	r3, #0
 801cf36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801cf3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801cf3e:	9304      	str	r3, [sp, #16]
 801cf40:	9307      	str	r3, [sp, #28]
 801cf42:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801cf46:	931a      	str	r3, [sp, #104]	; 0x68
 801cf48:	46a8      	mov	r8, r5
 801cf4a:	2205      	movs	r2, #5
 801cf4c:	f818 1b01 	ldrb.w	r1, [r8], #1
 801cf50:	485e      	ldr	r0, [pc, #376]	; (801d0cc <_vfiprintf_r+0x210>)
 801cf52:	f7e3 f9c5 	bl	80002e0 <memchr>
 801cf56:	9b04      	ldr	r3, [sp, #16]
 801cf58:	bb78      	cbnz	r0, 801cfba <_vfiprintf_r+0xfe>
 801cf5a:	06d9      	lsls	r1, r3, #27
 801cf5c:	bf44      	itt	mi
 801cf5e:	2220      	movmi	r2, #32
 801cf60:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801cf64:	071a      	lsls	r2, r3, #28
 801cf66:	bf44      	itt	mi
 801cf68:	222b      	movmi	r2, #43	; 0x2b
 801cf6a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801cf6e:	782a      	ldrb	r2, [r5, #0]
 801cf70:	2a2a      	cmp	r2, #42	; 0x2a
 801cf72:	d02a      	beq.n	801cfca <_vfiprintf_r+0x10e>
 801cf74:	9a07      	ldr	r2, [sp, #28]
 801cf76:	46a8      	mov	r8, r5
 801cf78:	2000      	movs	r0, #0
 801cf7a:	250a      	movs	r5, #10
 801cf7c:	4641      	mov	r1, r8
 801cf7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 801cf82:	3b30      	subs	r3, #48	; 0x30
 801cf84:	2b09      	cmp	r3, #9
 801cf86:	d969      	bls.n	801d05c <_vfiprintf_r+0x1a0>
 801cf88:	b360      	cbz	r0, 801cfe4 <_vfiprintf_r+0x128>
 801cf8a:	e024      	b.n	801cfd6 <_vfiprintf_r+0x11a>
 801cf8c:	4b50      	ldr	r3, [pc, #320]	; (801d0d0 <_vfiprintf_r+0x214>)
 801cf8e:	429c      	cmp	r4, r3
 801cf90:	d101      	bne.n	801cf96 <_vfiprintf_r+0xda>
 801cf92:	68b4      	ldr	r4, [r6, #8]
 801cf94:	e7a2      	b.n	801cedc <_vfiprintf_r+0x20>
 801cf96:	4b4f      	ldr	r3, [pc, #316]	; (801d0d4 <_vfiprintf_r+0x218>)
 801cf98:	429c      	cmp	r4, r3
 801cf9a:	bf08      	it	eq
 801cf9c:	68f4      	ldreq	r4, [r6, #12]
 801cf9e:	e79d      	b.n	801cedc <_vfiprintf_r+0x20>
 801cfa0:	4621      	mov	r1, r4
 801cfa2:	4630      	mov	r0, r6
 801cfa4:	f7fe f9dc 	bl	801b360 <__swsetup_r>
 801cfa8:	2800      	cmp	r0, #0
 801cfaa:	d09d      	beq.n	801cee8 <_vfiprintf_r+0x2c>
 801cfac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801cfb0:	b01d      	add	sp, #116	; 0x74
 801cfb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cfb6:	46a8      	mov	r8, r5
 801cfb8:	e7a2      	b.n	801cf00 <_vfiprintf_r+0x44>
 801cfba:	4a44      	ldr	r2, [pc, #272]	; (801d0cc <_vfiprintf_r+0x210>)
 801cfbc:	1a80      	subs	r0, r0, r2
 801cfbe:	fa0b f000 	lsl.w	r0, fp, r0
 801cfc2:	4318      	orrs	r0, r3
 801cfc4:	9004      	str	r0, [sp, #16]
 801cfc6:	4645      	mov	r5, r8
 801cfc8:	e7be      	b.n	801cf48 <_vfiprintf_r+0x8c>
 801cfca:	9a03      	ldr	r2, [sp, #12]
 801cfcc:	1d11      	adds	r1, r2, #4
 801cfce:	6812      	ldr	r2, [r2, #0]
 801cfd0:	9103      	str	r1, [sp, #12]
 801cfd2:	2a00      	cmp	r2, #0
 801cfd4:	db01      	blt.n	801cfda <_vfiprintf_r+0x11e>
 801cfd6:	9207      	str	r2, [sp, #28]
 801cfd8:	e004      	b.n	801cfe4 <_vfiprintf_r+0x128>
 801cfda:	4252      	negs	r2, r2
 801cfdc:	f043 0302 	orr.w	r3, r3, #2
 801cfe0:	9207      	str	r2, [sp, #28]
 801cfe2:	9304      	str	r3, [sp, #16]
 801cfe4:	f898 3000 	ldrb.w	r3, [r8]
 801cfe8:	2b2e      	cmp	r3, #46	; 0x2e
 801cfea:	d10e      	bne.n	801d00a <_vfiprintf_r+0x14e>
 801cfec:	f898 3001 	ldrb.w	r3, [r8, #1]
 801cff0:	2b2a      	cmp	r3, #42	; 0x2a
 801cff2:	d138      	bne.n	801d066 <_vfiprintf_r+0x1aa>
 801cff4:	9b03      	ldr	r3, [sp, #12]
 801cff6:	1d1a      	adds	r2, r3, #4
 801cff8:	681b      	ldr	r3, [r3, #0]
 801cffa:	9203      	str	r2, [sp, #12]
 801cffc:	2b00      	cmp	r3, #0
 801cffe:	bfb8      	it	lt
 801d000:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801d004:	f108 0802 	add.w	r8, r8, #2
 801d008:	9305      	str	r3, [sp, #20]
 801d00a:	4d33      	ldr	r5, [pc, #204]	; (801d0d8 <_vfiprintf_r+0x21c>)
 801d00c:	f898 1000 	ldrb.w	r1, [r8]
 801d010:	2203      	movs	r2, #3
 801d012:	4628      	mov	r0, r5
 801d014:	f7e3 f964 	bl	80002e0 <memchr>
 801d018:	b140      	cbz	r0, 801d02c <_vfiprintf_r+0x170>
 801d01a:	2340      	movs	r3, #64	; 0x40
 801d01c:	1b40      	subs	r0, r0, r5
 801d01e:	fa03 f000 	lsl.w	r0, r3, r0
 801d022:	9b04      	ldr	r3, [sp, #16]
 801d024:	4303      	orrs	r3, r0
 801d026:	f108 0801 	add.w	r8, r8, #1
 801d02a:	9304      	str	r3, [sp, #16]
 801d02c:	f898 1000 	ldrb.w	r1, [r8]
 801d030:	482a      	ldr	r0, [pc, #168]	; (801d0dc <_vfiprintf_r+0x220>)
 801d032:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801d036:	2206      	movs	r2, #6
 801d038:	f108 0701 	add.w	r7, r8, #1
 801d03c:	f7e3 f950 	bl	80002e0 <memchr>
 801d040:	2800      	cmp	r0, #0
 801d042:	d037      	beq.n	801d0b4 <_vfiprintf_r+0x1f8>
 801d044:	4b26      	ldr	r3, [pc, #152]	; (801d0e0 <_vfiprintf_r+0x224>)
 801d046:	bb1b      	cbnz	r3, 801d090 <_vfiprintf_r+0x1d4>
 801d048:	9b03      	ldr	r3, [sp, #12]
 801d04a:	3307      	adds	r3, #7
 801d04c:	f023 0307 	bic.w	r3, r3, #7
 801d050:	3308      	adds	r3, #8
 801d052:	9303      	str	r3, [sp, #12]
 801d054:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d056:	444b      	add	r3, r9
 801d058:	9309      	str	r3, [sp, #36]	; 0x24
 801d05a:	e750      	b.n	801cefe <_vfiprintf_r+0x42>
 801d05c:	fb05 3202 	mla	r2, r5, r2, r3
 801d060:	2001      	movs	r0, #1
 801d062:	4688      	mov	r8, r1
 801d064:	e78a      	b.n	801cf7c <_vfiprintf_r+0xc0>
 801d066:	2300      	movs	r3, #0
 801d068:	f108 0801 	add.w	r8, r8, #1
 801d06c:	9305      	str	r3, [sp, #20]
 801d06e:	4619      	mov	r1, r3
 801d070:	250a      	movs	r5, #10
 801d072:	4640      	mov	r0, r8
 801d074:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d078:	3a30      	subs	r2, #48	; 0x30
 801d07a:	2a09      	cmp	r2, #9
 801d07c:	d903      	bls.n	801d086 <_vfiprintf_r+0x1ca>
 801d07e:	2b00      	cmp	r3, #0
 801d080:	d0c3      	beq.n	801d00a <_vfiprintf_r+0x14e>
 801d082:	9105      	str	r1, [sp, #20]
 801d084:	e7c1      	b.n	801d00a <_vfiprintf_r+0x14e>
 801d086:	fb05 2101 	mla	r1, r5, r1, r2
 801d08a:	2301      	movs	r3, #1
 801d08c:	4680      	mov	r8, r0
 801d08e:	e7f0      	b.n	801d072 <_vfiprintf_r+0x1b6>
 801d090:	ab03      	add	r3, sp, #12
 801d092:	9300      	str	r3, [sp, #0]
 801d094:	4622      	mov	r2, r4
 801d096:	4b13      	ldr	r3, [pc, #76]	; (801d0e4 <_vfiprintf_r+0x228>)
 801d098:	a904      	add	r1, sp, #16
 801d09a:	4630      	mov	r0, r6
 801d09c:	f7fd fc7c 	bl	801a998 <_printf_float>
 801d0a0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 801d0a4:	4681      	mov	r9, r0
 801d0a6:	d1d5      	bne.n	801d054 <_vfiprintf_r+0x198>
 801d0a8:	89a3      	ldrh	r3, [r4, #12]
 801d0aa:	065b      	lsls	r3, r3, #25
 801d0ac:	f53f af7e 	bmi.w	801cfac <_vfiprintf_r+0xf0>
 801d0b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d0b2:	e77d      	b.n	801cfb0 <_vfiprintf_r+0xf4>
 801d0b4:	ab03      	add	r3, sp, #12
 801d0b6:	9300      	str	r3, [sp, #0]
 801d0b8:	4622      	mov	r2, r4
 801d0ba:	4b0a      	ldr	r3, [pc, #40]	; (801d0e4 <_vfiprintf_r+0x228>)
 801d0bc:	a904      	add	r1, sp, #16
 801d0be:	4630      	mov	r0, r6
 801d0c0:	f7fd ff0c 	bl	801aedc <_printf_i>
 801d0c4:	e7ec      	b.n	801d0a0 <_vfiprintf_r+0x1e4>
 801d0c6:	bf00      	nop
 801d0c8:	08020894 	.word	0x08020894
 801d0cc:	080209d4 	.word	0x080209d4
 801d0d0:	080208b4 	.word	0x080208b4
 801d0d4:	08020874 	.word	0x08020874
 801d0d8:	080209da 	.word	0x080209da
 801d0dc:	080209de 	.word	0x080209de
 801d0e0:	0801a999 	.word	0x0801a999
 801d0e4:	0801ce97 	.word	0x0801ce97

0801d0e8 <_sbrk_r>:
 801d0e8:	b538      	push	{r3, r4, r5, lr}
 801d0ea:	4c06      	ldr	r4, [pc, #24]	; (801d104 <_sbrk_r+0x1c>)
 801d0ec:	2300      	movs	r3, #0
 801d0ee:	4605      	mov	r5, r0
 801d0f0:	4608      	mov	r0, r1
 801d0f2:	6023      	str	r3, [r4, #0]
 801d0f4:	f7e4 f888 	bl	8001208 <_sbrk>
 801d0f8:	1c43      	adds	r3, r0, #1
 801d0fa:	d102      	bne.n	801d102 <_sbrk_r+0x1a>
 801d0fc:	6823      	ldr	r3, [r4, #0]
 801d0fe:	b103      	cbz	r3, 801d102 <_sbrk_r+0x1a>
 801d100:	602b      	str	r3, [r5, #0]
 801d102:	bd38      	pop	{r3, r4, r5, pc}
 801d104:	2400ce5c 	.word	0x2400ce5c

0801d108 <__sread>:
 801d108:	b510      	push	{r4, lr}
 801d10a:	460c      	mov	r4, r1
 801d10c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d110:	f000 f8bc 	bl	801d28c <_read_r>
 801d114:	2800      	cmp	r0, #0
 801d116:	bfab      	itete	ge
 801d118:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801d11a:	89a3      	ldrhlt	r3, [r4, #12]
 801d11c:	181b      	addge	r3, r3, r0
 801d11e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801d122:	bfac      	ite	ge
 801d124:	6563      	strge	r3, [r4, #84]	; 0x54
 801d126:	81a3      	strhlt	r3, [r4, #12]
 801d128:	bd10      	pop	{r4, pc}

0801d12a <__swrite>:
 801d12a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d12e:	461f      	mov	r7, r3
 801d130:	898b      	ldrh	r3, [r1, #12]
 801d132:	05db      	lsls	r3, r3, #23
 801d134:	4605      	mov	r5, r0
 801d136:	460c      	mov	r4, r1
 801d138:	4616      	mov	r6, r2
 801d13a:	d505      	bpl.n	801d148 <__swrite+0x1e>
 801d13c:	2302      	movs	r3, #2
 801d13e:	2200      	movs	r2, #0
 801d140:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d144:	f000 f868 	bl	801d218 <_lseek_r>
 801d148:	89a3      	ldrh	r3, [r4, #12]
 801d14a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d14e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801d152:	81a3      	strh	r3, [r4, #12]
 801d154:	4632      	mov	r2, r6
 801d156:	463b      	mov	r3, r7
 801d158:	4628      	mov	r0, r5
 801d15a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d15e:	f000 b817 	b.w	801d190 <_write_r>

0801d162 <__sseek>:
 801d162:	b510      	push	{r4, lr}
 801d164:	460c      	mov	r4, r1
 801d166:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d16a:	f000 f855 	bl	801d218 <_lseek_r>
 801d16e:	1c43      	adds	r3, r0, #1
 801d170:	89a3      	ldrh	r3, [r4, #12]
 801d172:	bf15      	itete	ne
 801d174:	6560      	strne	r0, [r4, #84]	; 0x54
 801d176:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801d17a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801d17e:	81a3      	strheq	r3, [r4, #12]
 801d180:	bf18      	it	ne
 801d182:	81a3      	strhne	r3, [r4, #12]
 801d184:	bd10      	pop	{r4, pc}

0801d186 <__sclose>:
 801d186:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d18a:	f000 b813 	b.w	801d1b4 <_close_r>
	...

0801d190 <_write_r>:
 801d190:	b538      	push	{r3, r4, r5, lr}
 801d192:	4c07      	ldr	r4, [pc, #28]	; (801d1b0 <_write_r+0x20>)
 801d194:	4605      	mov	r5, r0
 801d196:	4608      	mov	r0, r1
 801d198:	4611      	mov	r1, r2
 801d19a:	2200      	movs	r2, #0
 801d19c:	6022      	str	r2, [r4, #0]
 801d19e:	461a      	mov	r2, r3
 801d1a0:	f7e3 ffe1 	bl	8001166 <_write>
 801d1a4:	1c43      	adds	r3, r0, #1
 801d1a6:	d102      	bne.n	801d1ae <_write_r+0x1e>
 801d1a8:	6823      	ldr	r3, [r4, #0]
 801d1aa:	b103      	cbz	r3, 801d1ae <_write_r+0x1e>
 801d1ac:	602b      	str	r3, [r5, #0]
 801d1ae:	bd38      	pop	{r3, r4, r5, pc}
 801d1b0:	2400ce5c 	.word	0x2400ce5c

0801d1b4 <_close_r>:
 801d1b4:	b538      	push	{r3, r4, r5, lr}
 801d1b6:	4c06      	ldr	r4, [pc, #24]	; (801d1d0 <_close_r+0x1c>)
 801d1b8:	2300      	movs	r3, #0
 801d1ba:	4605      	mov	r5, r0
 801d1bc:	4608      	mov	r0, r1
 801d1be:	6023      	str	r3, [r4, #0]
 801d1c0:	f7e3 ffed 	bl	800119e <_close>
 801d1c4:	1c43      	adds	r3, r0, #1
 801d1c6:	d102      	bne.n	801d1ce <_close_r+0x1a>
 801d1c8:	6823      	ldr	r3, [r4, #0]
 801d1ca:	b103      	cbz	r3, 801d1ce <_close_r+0x1a>
 801d1cc:	602b      	str	r3, [r5, #0]
 801d1ce:	bd38      	pop	{r3, r4, r5, pc}
 801d1d0:	2400ce5c 	.word	0x2400ce5c

0801d1d4 <_fstat_r>:
 801d1d4:	b538      	push	{r3, r4, r5, lr}
 801d1d6:	4c07      	ldr	r4, [pc, #28]	; (801d1f4 <_fstat_r+0x20>)
 801d1d8:	2300      	movs	r3, #0
 801d1da:	4605      	mov	r5, r0
 801d1dc:	4608      	mov	r0, r1
 801d1de:	4611      	mov	r1, r2
 801d1e0:	6023      	str	r3, [r4, #0]
 801d1e2:	f7e3 ffe8 	bl	80011b6 <_fstat>
 801d1e6:	1c43      	adds	r3, r0, #1
 801d1e8:	d102      	bne.n	801d1f0 <_fstat_r+0x1c>
 801d1ea:	6823      	ldr	r3, [r4, #0]
 801d1ec:	b103      	cbz	r3, 801d1f0 <_fstat_r+0x1c>
 801d1ee:	602b      	str	r3, [r5, #0]
 801d1f0:	bd38      	pop	{r3, r4, r5, pc}
 801d1f2:	bf00      	nop
 801d1f4:	2400ce5c 	.word	0x2400ce5c

0801d1f8 <_isatty_r>:
 801d1f8:	b538      	push	{r3, r4, r5, lr}
 801d1fa:	4c06      	ldr	r4, [pc, #24]	; (801d214 <_isatty_r+0x1c>)
 801d1fc:	2300      	movs	r3, #0
 801d1fe:	4605      	mov	r5, r0
 801d200:	4608      	mov	r0, r1
 801d202:	6023      	str	r3, [r4, #0]
 801d204:	f7e3 ffe7 	bl	80011d6 <_isatty>
 801d208:	1c43      	adds	r3, r0, #1
 801d20a:	d102      	bne.n	801d212 <_isatty_r+0x1a>
 801d20c:	6823      	ldr	r3, [r4, #0]
 801d20e:	b103      	cbz	r3, 801d212 <_isatty_r+0x1a>
 801d210:	602b      	str	r3, [r5, #0]
 801d212:	bd38      	pop	{r3, r4, r5, pc}
 801d214:	2400ce5c 	.word	0x2400ce5c

0801d218 <_lseek_r>:
 801d218:	b538      	push	{r3, r4, r5, lr}
 801d21a:	4c07      	ldr	r4, [pc, #28]	; (801d238 <_lseek_r+0x20>)
 801d21c:	4605      	mov	r5, r0
 801d21e:	4608      	mov	r0, r1
 801d220:	4611      	mov	r1, r2
 801d222:	2200      	movs	r2, #0
 801d224:	6022      	str	r2, [r4, #0]
 801d226:	461a      	mov	r2, r3
 801d228:	f7e3 ffe0 	bl	80011ec <_lseek>
 801d22c:	1c43      	adds	r3, r0, #1
 801d22e:	d102      	bne.n	801d236 <_lseek_r+0x1e>
 801d230:	6823      	ldr	r3, [r4, #0]
 801d232:	b103      	cbz	r3, 801d236 <_lseek_r+0x1e>
 801d234:	602b      	str	r3, [r5, #0]
 801d236:	bd38      	pop	{r3, r4, r5, pc}
 801d238:	2400ce5c 	.word	0x2400ce5c

0801d23c <__malloc_lock>:
 801d23c:	4770      	bx	lr

0801d23e <__malloc_unlock>:
 801d23e:	4770      	bx	lr

0801d240 <_realloc_r>:
 801d240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d242:	4607      	mov	r7, r0
 801d244:	4614      	mov	r4, r2
 801d246:	460e      	mov	r6, r1
 801d248:	b921      	cbnz	r1, 801d254 <_realloc_r+0x14>
 801d24a:	4611      	mov	r1, r2
 801d24c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801d250:	f7ff bc5e 	b.w	801cb10 <_malloc_r>
 801d254:	b922      	cbnz	r2, 801d260 <_realloc_r+0x20>
 801d256:	f7ff fc0d 	bl	801ca74 <_free_r>
 801d25a:	4625      	mov	r5, r4
 801d25c:	4628      	mov	r0, r5
 801d25e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d260:	f000 f826 	bl	801d2b0 <_malloc_usable_size_r>
 801d264:	42a0      	cmp	r0, r4
 801d266:	d20f      	bcs.n	801d288 <_realloc_r+0x48>
 801d268:	4621      	mov	r1, r4
 801d26a:	4638      	mov	r0, r7
 801d26c:	f7ff fc50 	bl	801cb10 <_malloc_r>
 801d270:	4605      	mov	r5, r0
 801d272:	2800      	cmp	r0, #0
 801d274:	d0f2      	beq.n	801d25c <_realloc_r+0x1c>
 801d276:	4631      	mov	r1, r6
 801d278:	4622      	mov	r2, r4
 801d27a:	f7fd fadc 	bl	801a836 <memcpy>
 801d27e:	4631      	mov	r1, r6
 801d280:	4638      	mov	r0, r7
 801d282:	f7ff fbf7 	bl	801ca74 <_free_r>
 801d286:	e7e9      	b.n	801d25c <_realloc_r+0x1c>
 801d288:	4635      	mov	r5, r6
 801d28a:	e7e7      	b.n	801d25c <_realloc_r+0x1c>

0801d28c <_read_r>:
 801d28c:	b538      	push	{r3, r4, r5, lr}
 801d28e:	4c07      	ldr	r4, [pc, #28]	; (801d2ac <_read_r+0x20>)
 801d290:	4605      	mov	r5, r0
 801d292:	4608      	mov	r0, r1
 801d294:	4611      	mov	r1, r2
 801d296:	2200      	movs	r2, #0
 801d298:	6022      	str	r2, [r4, #0]
 801d29a:	461a      	mov	r2, r3
 801d29c:	f7e3 ff46 	bl	800112c <_read>
 801d2a0:	1c43      	adds	r3, r0, #1
 801d2a2:	d102      	bne.n	801d2aa <_read_r+0x1e>
 801d2a4:	6823      	ldr	r3, [r4, #0]
 801d2a6:	b103      	cbz	r3, 801d2aa <_read_r+0x1e>
 801d2a8:	602b      	str	r3, [r5, #0]
 801d2aa:	bd38      	pop	{r3, r4, r5, pc}
 801d2ac:	2400ce5c 	.word	0x2400ce5c

0801d2b0 <_malloc_usable_size_r>:
 801d2b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d2b4:	1f18      	subs	r0, r3, #4
 801d2b6:	2b00      	cmp	r3, #0
 801d2b8:	bfbc      	itt	lt
 801d2ba:	580b      	ldrlt	r3, [r1, r0]
 801d2bc:	18c0      	addlt	r0, r0, r3
 801d2be:	4770      	bx	lr

0801d2c0 <_init>:
 801d2c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d2c2:	bf00      	nop
 801d2c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d2c6:	bc08      	pop	{r3}
 801d2c8:	469e      	mov	lr, r3
 801d2ca:	4770      	bx	lr

0801d2cc <_fini>:
 801d2cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d2ce:	bf00      	nop
 801d2d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d2d2:	bc08      	pop	{r3}
 801d2d4:	469e      	mov	lr, r3
 801d2d6:	4770      	bx	lr
