
XploreAvionics_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00022e88  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004770  08023128  08023128  00033128  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08027898  08027898  00037898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   0000000c  080278a0  080278a0  000378a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000008  080278ac  080278ac  000378ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000210  24000000  080278b4  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00048c90  24000210  08027ac4  00040210  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24048ea0  08027ac4  00048ea0  2**0
                  ALLOC
  9 .lwip_sec     000419d0  30000000  08027ac4  00050000  2**2
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  00040210  2**0
                  CONTENTS, READONLY
 11 .debug_info   000a8fac  00000000  00000000  0004023e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00010812  00000000  00000000  000e91ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00003aa0  00000000  00000000  000f9a00  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00003790  00000000  00000000  000fd4a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  0005c580  00000000  00000000  00100c30  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00054b2a  00000000  00000000  0015d1b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    001cc695  00000000  00000000  001b1cda  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  0037e36f  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00011830  00000000  00000000  0037e3ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000210 	.word	0x24000210
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08023110 	.word	0x08023110

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000214 	.word	0x24000214
 80002dc:	08023110 	.word	0x08023110

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strcmp>:
 8000380:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000384:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000388:	2a01      	cmp	r2, #1
 800038a:	bf28      	it	cs
 800038c:	429a      	cmpcs	r2, r3
 800038e:	d0f7      	beq.n	8000380 <strcmp>
 8000390:	1ad0      	subs	r0, r2, r3
 8000392:	4770      	bx	lr

08000394 <strlen>:
 8000394:	4603      	mov	r3, r0
 8000396:	f813 2b01 	ldrb.w	r2, [r3], #1
 800039a:	2a00      	cmp	r2, #0
 800039c:	d1fb      	bne.n	8000396 <strlen+0x2>
 800039e:	1a18      	subs	r0, r3, r0
 80003a0:	3801      	subs	r0, #1
 80003a2:	4770      	bx	lr

080003a4 <__aeabi_uldivmod>:
 80003a4:	b953      	cbnz	r3, 80003bc <__aeabi_uldivmod+0x18>
 80003a6:	b94a      	cbnz	r2, 80003bc <__aeabi_uldivmod+0x18>
 80003a8:	2900      	cmp	r1, #0
 80003aa:	bf08      	it	eq
 80003ac:	2800      	cmpeq	r0, #0
 80003ae:	bf1c      	itt	ne
 80003b0:	f04f 31ff 	movne.w	r1, #4294967295
 80003b4:	f04f 30ff 	movne.w	r0, #4294967295
 80003b8:	f000 b972 	b.w	80006a0 <__aeabi_idiv0>
 80003bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80003c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003c4:	f000 f806 	bl	80003d4 <__udivmoddi4>
 80003c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003d0:	b004      	add	sp, #16
 80003d2:	4770      	bx	lr

080003d4 <__udivmoddi4>:
 80003d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003d8:	9e08      	ldr	r6, [sp, #32]
 80003da:	4604      	mov	r4, r0
 80003dc:	4688      	mov	r8, r1
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d14b      	bne.n	800047a <__udivmoddi4+0xa6>
 80003e2:	428a      	cmp	r2, r1
 80003e4:	4615      	mov	r5, r2
 80003e6:	d967      	bls.n	80004b8 <__udivmoddi4+0xe4>
 80003e8:	fab2 f282 	clz	r2, r2
 80003ec:	b14a      	cbz	r2, 8000402 <__udivmoddi4+0x2e>
 80003ee:	f1c2 0720 	rsb	r7, r2, #32
 80003f2:	fa01 f302 	lsl.w	r3, r1, r2
 80003f6:	fa20 f707 	lsr.w	r7, r0, r7
 80003fa:	4095      	lsls	r5, r2
 80003fc:	ea47 0803 	orr.w	r8, r7, r3
 8000400:	4094      	lsls	r4, r2
 8000402:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000406:	0c23      	lsrs	r3, r4, #16
 8000408:	fbb8 f7fe 	udiv	r7, r8, lr
 800040c:	fa1f fc85 	uxth.w	ip, r5
 8000410:	fb0e 8817 	mls	r8, lr, r7, r8
 8000414:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000418:	fb07 f10c 	mul.w	r1, r7, ip
 800041c:	4299      	cmp	r1, r3
 800041e:	d909      	bls.n	8000434 <__udivmoddi4+0x60>
 8000420:	18eb      	adds	r3, r5, r3
 8000422:	f107 30ff 	add.w	r0, r7, #4294967295
 8000426:	f080 811b 	bcs.w	8000660 <__udivmoddi4+0x28c>
 800042a:	4299      	cmp	r1, r3
 800042c:	f240 8118 	bls.w	8000660 <__udivmoddi4+0x28c>
 8000430:	3f02      	subs	r7, #2
 8000432:	442b      	add	r3, r5
 8000434:	1a5b      	subs	r3, r3, r1
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb3 f0fe 	udiv	r0, r3, lr
 800043c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000440:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000444:	fb00 fc0c 	mul.w	ip, r0, ip
 8000448:	45a4      	cmp	ip, r4
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x8c>
 800044c:	192c      	adds	r4, r5, r4
 800044e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000452:	f080 8107 	bcs.w	8000664 <__udivmoddi4+0x290>
 8000456:	45a4      	cmp	ip, r4
 8000458:	f240 8104 	bls.w	8000664 <__udivmoddi4+0x290>
 800045c:	3802      	subs	r0, #2
 800045e:	442c      	add	r4, r5
 8000460:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000464:	eba4 040c 	sub.w	r4, r4, ip
 8000468:	2700      	movs	r7, #0
 800046a:	b11e      	cbz	r6, 8000474 <__udivmoddi4+0xa0>
 800046c:	40d4      	lsrs	r4, r2
 800046e:	2300      	movs	r3, #0
 8000470:	e9c6 4300 	strd	r4, r3, [r6]
 8000474:	4639      	mov	r1, r7
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	428b      	cmp	r3, r1
 800047c:	d909      	bls.n	8000492 <__udivmoddi4+0xbe>
 800047e:	2e00      	cmp	r6, #0
 8000480:	f000 80eb 	beq.w	800065a <__udivmoddi4+0x286>
 8000484:	2700      	movs	r7, #0
 8000486:	e9c6 0100 	strd	r0, r1, [r6]
 800048a:	4638      	mov	r0, r7
 800048c:	4639      	mov	r1, r7
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	fab3 f783 	clz	r7, r3
 8000496:	2f00      	cmp	r7, #0
 8000498:	d147      	bne.n	800052a <__udivmoddi4+0x156>
 800049a:	428b      	cmp	r3, r1
 800049c:	d302      	bcc.n	80004a4 <__udivmoddi4+0xd0>
 800049e:	4282      	cmp	r2, r0
 80004a0:	f200 80fa 	bhi.w	8000698 <__udivmoddi4+0x2c4>
 80004a4:	1a84      	subs	r4, r0, r2
 80004a6:	eb61 0303 	sbc.w	r3, r1, r3
 80004aa:	2001      	movs	r0, #1
 80004ac:	4698      	mov	r8, r3
 80004ae:	2e00      	cmp	r6, #0
 80004b0:	d0e0      	beq.n	8000474 <__udivmoddi4+0xa0>
 80004b2:	e9c6 4800 	strd	r4, r8, [r6]
 80004b6:	e7dd      	b.n	8000474 <__udivmoddi4+0xa0>
 80004b8:	b902      	cbnz	r2, 80004bc <__udivmoddi4+0xe8>
 80004ba:	deff      	udf	#255	; 0xff
 80004bc:	fab2 f282 	clz	r2, r2
 80004c0:	2a00      	cmp	r2, #0
 80004c2:	f040 808f 	bne.w	80005e4 <__udivmoddi4+0x210>
 80004c6:	1b49      	subs	r1, r1, r5
 80004c8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004cc:	fa1f f885 	uxth.w	r8, r5
 80004d0:	2701      	movs	r7, #1
 80004d2:	fbb1 fcfe 	udiv	ip, r1, lr
 80004d6:	0c23      	lsrs	r3, r4, #16
 80004d8:	fb0e 111c 	mls	r1, lr, ip, r1
 80004dc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e0:	fb08 f10c 	mul.w	r1, r8, ip
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d907      	bls.n	80004f8 <__udivmoddi4+0x124>
 80004e8:	18eb      	adds	r3, r5, r3
 80004ea:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ee:	d202      	bcs.n	80004f6 <__udivmoddi4+0x122>
 80004f0:	4299      	cmp	r1, r3
 80004f2:	f200 80cd 	bhi.w	8000690 <__udivmoddi4+0x2bc>
 80004f6:	4684      	mov	ip, r0
 80004f8:	1a59      	subs	r1, r3, r1
 80004fa:	b2a3      	uxth	r3, r4
 80004fc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000500:	fb0e 1410 	mls	r4, lr, r0, r1
 8000504:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000508:	fb08 f800 	mul.w	r8, r8, r0
 800050c:	45a0      	cmp	r8, r4
 800050e:	d907      	bls.n	8000520 <__udivmoddi4+0x14c>
 8000510:	192c      	adds	r4, r5, r4
 8000512:	f100 33ff 	add.w	r3, r0, #4294967295
 8000516:	d202      	bcs.n	800051e <__udivmoddi4+0x14a>
 8000518:	45a0      	cmp	r8, r4
 800051a:	f200 80b6 	bhi.w	800068a <__udivmoddi4+0x2b6>
 800051e:	4618      	mov	r0, r3
 8000520:	eba4 0408 	sub.w	r4, r4, r8
 8000524:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000528:	e79f      	b.n	800046a <__udivmoddi4+0x96>
 800052a:	f1c7 0c20 	rsb	ip, r7, #32
 800052e:	40bb      	lsls	r3, r7
 8000530:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000534:	ea4e 0e03 	orr.w	lr, lr, r3
 8000538:	fa01 f407 	lsl.w	r4, r1, r7
 800053c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000540:	fa21 f30c 	lsr.w	r3, r1, ip
 8000544:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000548:	4325      	orrs	r5, r4
 800054a:	fbb3 f9f8 	udiv	r9, r3, r8
 800054e:	0c2c      	lsrs	r4, r5, #16
 8000550:	fb08 3319 	mls	r3, r8, r9, r3
 8000554:	fa1f fa8e 	uxth.w	sl, lr
 8000558:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800055c:	fb09 f40a 	mul.w	r4, r9, sl
 8000560:	429c      	cmp	r4, r3
 8000562:	fa02 f207 	lsl.w	r2, r2, r7
 8000566:	fa00 f107 	lsl.w	r1, r0, r7
 800056a:	d90b      	bls.n	8000584 <__udivmoddi4+0x1b0>
 800056c:	eb1e 0303 	adds.w	r3, lr, r3
 8000570:	f109 30ff 	add.w	r0, r9, #4294967295
 8000574:	f080 8087 	bcs.w	8000686 <__udivmoddi4+0x2b2>
 8000578:	429c      	cmp	r4, r3
 800057a:	f240 8084 	bls.w	8000686 <__udivmoddi4+0x2b2>
 800057e:	f1a9 0902 	sub.w	r9, r9, #2
 8000582:	4473      	add	r3, lr
 8000584:	1b1b      	subs	r3, r3, r4
 8000586:	b2ad      	uxth	r5, r5
 8000588:	fbb3 f0f8 	udiv	r0, r3, r8
 800058c:	fb08 3310 	mls	r3, r8, r0, r3
 8000590:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000594:	fb00 fa0a 	mul.w	sl, r0, sl
 8000598:	45a2      	cmp	sl, r4
 800059a:	d908      	bls.n	80005ae <__udivmoddi4+0x1da>
 800059c:	eb1e 0404 	adds.w	r4, lr, r4
 80005a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80005a4:	d26b      	bcs.n	800067e <__udivmoddi4+0x2aa>
 80005a6:	45a2      	cmp	sl, r4
 80005a8:	d969      	bls.n	800067e <__udivmoddi4+0x2aa>
 80005aa:	3802      	subs	r0, #2
 80005ac:	4474      	add	r4, lr
 80005ae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80005b2:	fba0 8902 	umull	r8, r9, r0, r2
 80005b6:	eba4 040a 	sub.w	r4, r4, sl
 80005ba:	454c      	cmp	r4, r9
 80005bc:	46c2      	mov	sl, r8
 80005be:	464b      	mov	r3, r9
 80005c0:	d354      	bcc.n	800066c <__udivmoddi4+0x298>
 80005c2:	d051      	beq.n	8000668 <__udivmoddi4+0x294>
 80005c4:	2e00      	cmp	r6, #0
 80005c6:	d069      	beq.n	800069c <__udivmoddi4+0x2c8>
 80005c8:	ebb1 050a 	subs.w	r5, r1, sl
 80005cc:	eb64 0403 	sbc.w	r4, r4, r3
 80005d0:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005d4:	40fd      	lsrs	r5, r7
 80005d6:	40fc      	lsrs	r4, r7
 80005d8:	ea4c 0505 	orr.w	r5, ip, r5
 80005dc:	e9c6 5400 	strd	r5, r4, [r6]
 80005e0:	2700      	movs	r7, #0
 80005e2:	e747      	b.n	8000474 <__udivmoddi4+0xa0>
 80005e4:	f1c2 0320 	rsb	r3, r2, #32
 80005e8:	fa20 f703 	lsr.w	r7, r0, r3
 80005ec:	4095      	lsls	r5, r2
 80005ee:	fa01 f002 	lsl.w	r0, r1, r2
 80005f2:	fa21 f303 	lsr.w	r3, r1, r3
 80005f6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005fa:	4338      	orrs	r0, r7
 80005fc:	0c01      	lsrs	r1, r0, #16
 80005fe:	fbb3 f7fe 	udiv	r7, r3, lr
 8000602:	fa1f f885 	uxth.w	r8, r5
 8000606:	fb0e 3317 	mls	r3, lr, r7, r3
 800060a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800060e:	fb07 f308 	mul.w	r3, r7, r8
 8000612:	428b      	cmp	r3, r1
 8000614:	fa04 f402 	lsl.w	r4, r4, r2
 8000618:	d907      	bls.n	800062a <__udivmoddi4+0x256>
 800061a:	1869      	adds	r1, r5, r1
 800061c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000620:	d22f      	bcs.n	8000682 <__udivmoddi4+0x2ae>
 8000622:	428b      	cmp	r3, r1
 8000624:	d92d      	bls.n	8000682 <__udivmoddi4+0x2ae>
 8000626:	3f02      	subs	r7, #2
 8000628:	4429      	add	r1, r5
 800062a:	1acb      	subs	r3, r1, r3
 800062c:	b281      	uxth	r1, r0
 800062e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000632:	fb0e 3310 	mls	r3, lr, r0, r3
 8000636:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800063a:	fb00 f308 	mul.w	r3, r0, r8
 800063e:	428b      	cmp	r3, r1
 8000640:	d907      	bls.n	8000652 <__udivmoddi4+0x27e>
 8000642:	1869      	adds	r1, r5, r1
 8000644:	f100 3cff 	add.w	ip, r0, #4294967295
 8000648:	d217      	bcs.n	800067a <__udivmoddi4+0x2a6>
 800064a:	428b      	cmp	r3, r1
 800064c:	d915      	bls.n	800067a <__udivmoddi4+0x2a6>
 800064e:	3802      	subs	r0, #2
 8000650:	4429      	add	r1, r5
 8000652:	1ac9      	subs	r1, r1, r3
 8000654:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000658:	e73b      	b.n	80004d2 <__udivmoddi4+0xfe>
 800065a:	4637      	mov	r7, r6
 800065c:	4630      	mov	r0, r6
 800065e:	e709      	b.n	8000474 <__udivmoddi4+0xa0>
 8000660:	4607      	mov	r7, r0
 8000662:	e6e7      	b.n	8000434 <__udivmoddi4+0x60>
 8000664:	4618      	mov	r0, r3
 8000666:	e6fb      	b.n	8000460 <__udivmoddi4+0x8c>
 8000668:	4541      	cmp	r1, r8
 800066a:	d2ab      	bcs.n	80005c4 <__udivmoddi4+0x1f0>
 800066c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000670:	eb69 020e 	sbc.w	r2, r9, lr
 8000674:	3801      	subs	r0, #1
 8000676:	4613      	mov	r3, r2
 8000678:	e7a4      	b.n	80005c4 <__udivmoddi4+0x1f0>
 800067a:	4660      	mov	r0, ip
 800067c:	e7e9      	b.n	8000652 <__udivmoddi4+0x27e>
 800067e:	4618      	mov	r0, r3
 8000680:	e795      	b.n	80005ae <__udivmoddi4+0x1da>
 8000682:	4667      	mov	r7, ip
 8000684:	e7d1      	b.n	800062a <__udivmoddi4+0x256>
 8000686:	4681      	mov	r9, r0
 8000688:	e77c      	b.n	8000584 <__udivmoddi4+0x1b0>
 800068a:	3802      	subs	r0, #2
 800068c:	442c      	add	r4, r5
 800068e:	e747      	b.n	8000520 <__udivmoddi4+0x14c>
 8000690:	f1ac 0c02 	sub.w	ip, ip, #2
 8000694:	442b      	add	r3, r5
 8000696:	e72f      	b.n	80004f8 <__udivmoddi4+0x124>
 8000698:	4638      	mov	r0, r7
 800069a:	e708      	b.n	80004ae <__udivmoddi4+0xda>
 800069c:	4637      	mov	r7, r6
 800069e:	e6e9      	b.n	8000474 <__udivmoddi4+0xa0>

080006a0 <__aeabi_idiv0>:
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop

080006a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80006a8:	4b3f      	ldr	r3, [pc, #252]	; (80007a8 <SystemInit+0x104>)
 80006aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006ae:	4a3e      	ldr	r2, [pc, #248]	; (80007a8 <SystemInit+0x104>)
 80006b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006b8:	4b3b      	ldr	r3, [pc, #236]	; (80007a8 <SystemInit+0x104>)
 80006ba:	691b      	ldr	r3, [r3, #16]
 80006bc:	4a3a      	ldr	r2, [pc, #232]	; (80007a8 <SystemInit+0x104>)
 80006be:	f043 0310 	orr.w	r3, r3, #16
 80006c2:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006c4:	4b39      	ldr	r3, [pc, #228]	; (80007ac <SystemInit+0x108>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f003 030f 	and.w	r3, r3, #15
 80006cc:	2b06      	cmp	r3, #6
 80006ce:	d807      	bhi.n	80006e0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006d0:	4b36      	ldr	r3, [pc, #216]	; (80007ac <SystemInit+0x108>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	f023 030f 	bic.w	r3, r3, #15
 80006d8:	4a34      	ldr	r2, [pc, #208]	; (80007ac <SystemInit+0x108>)
 80006da:	f043 0307 	orr.w	r3, r3, #7
 80006de:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006e0:	4b33      	ldr	r3, [pc, #204]	; (80007b0 <SystemInit+0x10c>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4a32      	ldr	r2, [pc, #200]	; (80007b0 <SystemInit+0x10c>)
 80006e6:	f043 0301 	orr.w	r3, r3, #1
 80006ea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006ec:	4b30      	ldr	r3, [pc, #192]	; (80007b0 <SystemInit+0x10c>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006f2:	4b2f      	ldr	r3, [pc, #188]	; (80007b0 <SystemInit+0x10c>)
 80006f4:	681a      	ldr	r2, [r3, #0]
 80006f6:	492e      	ldr	r1, [pc, #184]	; (80007b0 <SystemInit+0x10c>)
 80006f8:	4b2e      	ldr	r3, [pc, #184]	; (80007b4 <SystemInit+0x110>)
 80006fa:	4013      	ands	r3, r2
 80006fc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006fe:	4b2b      	ldr	r3, [pc, #172]	; (80007ac <SystemInit+0x108>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	f003 030f 	and.w	r3, r3, #15
 8000706:	2b07      	cmp	r3, #7
 8000708:	d907      	bls.n	800071a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800070a:	4b28      	ldr	r3, [pc, #160]	; (80007ac <SystemInit+0x108>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	f023 030f 	bic.w	r3, r3, #15
 8000712:	4a26      	ldr	r2, [pc, #152]	; (80007ac <SystemInit+0x108>)
 8000714:	f043 0307 	orr.w	r3, r3, #7
 8000718:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800071a:	4b25      	ldr	r3, [pc, #148]	; (80007b0 <SystemInit+0x10c>)
 800071c:	2200      	movs	r2, #0
 800071e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000720:	4b23      	ldr	r3, [pc, #140]	; (80007b0 <SystemInit+0x10c>)
 8000722:	2200      	movs	r2, #0
 8000724:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000726:	4b22      	ldr	r3, [pc, #136]	; (80007b0 <SystemInit+0x10c>)
 8000728:	2200      	movs	r2, #0
 800072a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800072c:	4b20      	ldr	r3, [pc, #128]	; (80007b0 <SystemInit+0x10c>)
 800072e:	4a22      	ldr	r2, [pc, #136]	; (80007b8 <SystemInit+0x114>)
 8000730:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000732:	4b1f      	ldr	r3, [pc, #124]	; (80007b0 <SystemInit+0x10c>)
 8000734:	4a21      	ldr	r2, [pc, #132]	; (80007bc <SystemInit+0x118>)
 8000736:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000738:	4b1d      	ldr	r3, [pc, #116]	; (80007b0 <SystemInit+0x10c>)
 800073a:	4a21      	ldr	r2, [pc, #132]	; (80007c0 <SystemInit+0x11c>)
 800073c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800073e:	4b1c      	ldr	r3, [pc, #112]	; (80007b0 <SystemInit+0x10c>)
 8000740:	2200      	movs	r2, #0
 8000742:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000744:	4b1a      	ldr	r3, [pc, #104]	; (80007b0 <SystemInit+0x10c>)
 8000746:	4a1e      	ldr	r2, [pc, #120]	; (80007c0 <SystemInit+0x11c>)
 8000748:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800074a:	4b19      	ldr	r3, [pc, #100]	; (80007b0 <SystemInit+0x10c>)
 800074c:	2200      	movs	r2, #0
 800074e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000750:	4b17      	ldr	r3, [pc, #92]	; (80007b0 <SystemInit+0x10c>)
 8000752:	4a1b      	ldr	r2, [pc, #108]	; (80007c0 <SystemInit+0x11c>)
 8000754:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000756:	4b16      	ldr	r3, [pc, #88]	; (80007b0 <SystemInit+0x10c>)
 8000758:	2200      	movs	r2, #0
 800075a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800075c:	4b14      	ldr	r3, [pc, #80]	; (80007b0 <SystemInit+0x10c>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4a13      	ldr	r2, [pc, #76]	; (80007b0 <SystemInit+0x10c>)
 8000762:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000766:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000768:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <SystemInit+0x10c>)
 800076a:	2200      	movs	r2, #0
 800076c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800076e:	4b15      	ldr	r3, [pc, #84]	; (80007c4 <SystemInit+0x120>)
 8000770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000772:	4a14      	ldr	r2, [pc, #80]	; (80007c4 <SystemInit+0x120>)
 8000774:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000778:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800077a:	4b13      	ldr	r3, [pc, #76]	; (80007c8 <SystemInit+0x124>)
 800077c:	681a      	ldr	r2, [r3, #0]
 800077e:	4b13      	ldr	r3, [pc, #76]	; (80007cc <SystemInit+0x128>)
 8000780:	4013      	ands	r3, r2
 8000782:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000786:	d202      	bcs.n	800078e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000788:	4b11      	ldr	r3, [pc, #68]	; (80007d0 <SystemInit+0x12c>)
 800078a:	2201      	movs	r2, #1
 800078c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800078e:	4b11      	ldr	r3, [pc, #68]	; (80007d4 <SystemInit+0x130>)
 8000790:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000794:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000796:	4b04      	ldr	r3, [pc, #16]	; (80007a8 <SystemInit+0x104>)
 8000798:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800079c:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800079e:	bf00      	nop
 80007a0:	46bd      	mov	sp, r7
 80007a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a6:	4770      	bx	lr
 80007a8:	e000ed00 	.word	0xe000ed00
 80007ac:	52002000 	.word	0x52002000
 80007b0:	58024400 	.word	0x58024400
 80007b4:	eaf6ed7f 	.word	0xeaf6ed7f
 80007b8:	02020200 	.word	0x02020200
 80007bc:	01ff0000 	.word	0x01ff0000
 80007c0:	01010280 	.word	0x01010280
 80007c4:	580000c0 	.word	0x580000c0
 80007c8:	5c001000 	.word	0x5c001000
 80007cc:	ffff0000 	.word	0xffff0000
 80007d0:	51008108 	.word	0x51008108
 80007d4:	52004000 	.word	0x52004000

080007d8 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 80007dc:	4b0d      	ldr	r3, [pc, #52]	; (8000814 <MX_CRC_Init+0x3c>)
 80007de:	4a0e      	ldr	r2, [pc, #56]	; (8000818 <MX_CRC_Init+0x40>)
 80007e0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80007e2:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <MX_CRC_Init+0x3c>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80007e8:	4b0a      	ldr	r3, [pc, #40]	; (8000814 <MX_CRC_Init+0x3c>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80007ee:	4b09      	ldr	r3, [pc, #36]	; (8000814 <MX_CRC_Init+0x3c>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80007f4:	4b07      	ldr	r3, [pc, #28]	; (8000814 <MX_CRC_Init+0x3c>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80007fa:	4b06      	ldr	r3, [pc, #24]	; (8000814 <MX_CRC_Init+0x3c>)
 80007fc:	2201      	movs	r2, #1
 80007fe:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000800:	4804      	ldr	r0, [pc, #16]	; (8000814 <MX_CRC_Init+0x3c>)
 8000802:	f001 fd5b 	bl	80022bc <HAL_CRC_Init>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 800080c:	f000 fc4e 	bl	80010ac <Error_Handler>
  }

}
 8000810:	bf00      	nop
 8000812:	bd80      	pop	{r7, pc}
 8000814:	24045468 	.word	0x24045468
 8000818:	58024c00 	.word	0x58024c00

0800081c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 800081c:	b480      	push	{r7}
 800081e:	b085      	sub	sp, #20
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a0b      	ldr	r2, [pc, #44]	; (8000858 <HAL_CRC_MspInit+0x3c>)
 800082a:	4293      	cmp	r3, r2
 800082c:	d10e      	bne.n	800084c <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800082e:	4b0b      	ldr	r3, [pc, #44]	; (800085c <HAL_CRC_MspInit+0x40>)
 8000830:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000834:	4a09      	ldr	r2, [pc, #36]	; (800085c <HAL_CRC_MspInit+0x40>)
 8000836:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800083a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800083e:	4b07      	ldr	r3, [pc, #28]	; (800085c <HAL_CRC_MspInit+0x40>)
 8000840:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000844:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000848:	60fb      	str	r3, [r7, #12]
 800084a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800084c:	bf00      	nop
 800084e:	3714      	adds	r7, #20
 8000850:	46bd      	mov	sp, r7
 8000852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000856:	4770      	bx	lr
 8000858:	58024c00 	.word	0x58024c00
 800085c:	58024400 	.word	0x58024400

08000860 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000866:	4b29      	ldr	r3, [pc, #164]	; (800090c <MX_DMA_Init+0xac>)
 8000868:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800086c:	4a27      	ldr	r2, [pc, #156]	; (800090c <MX_DMA_Init+0xac>)
 800086e:	f043 0301 	orr.w	r3, r3, #1
 8000872:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000876:	4b25      	ldr	r3, [pc, #148]	; (800090c <MX_DMA_Init+0xac>)
 8000878:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800087c:	f003 0301 	and.w	r3, r3, #1
 8000880:	607b      	str	r3, [r7, #4]
 8000882:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000884:	4b21      	ldr	r3, [pc, #132]	; (800090c <MX_DMA_Init+0xac>)
 8000886:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800088a:	4a20      	ldr	r2, [pc, #128]	; (800090c <MX_DMA_Init+0xac>)
 800088c:	f043 0302 	orr.w	r3, r3, #2
 8000890:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000894:	4b1d      	ldr	r3, [pc, #116]	; (800090c <MX_DMA_Init+0xac>)
 8000896:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800089a:	f003 0302 	and.w	r3, r3, #2
 800089e:	603b      	str	r3, [r7, #0]
 80008a0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80008a2:	2200      	movs	r2, #0
 80008a4:	2105      	movs	r1, #5
 80008a6:	2038      	movs	r0, #56	; 0x38
 80008a8:	f001 fc54 	bl	8002154 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80008ac:	2038      	movs	r0, #56	; 0x38
 80008ae:	f001 fc6b 	bl	8002188 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 80008b2:	2200      	movs	r2, #0
 80008b4:	2105      	movs	r1, #5
 80008b6:	2039      	movs	r0, #57	; 0x39
 80008b8:	f001 fc4c 	bl	8002154 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80008bc:	2039      	movs	r0, #57	; 0x39
 80008be:	f001 fc63 	bl	8002188 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 80008c2:	2200      	movs	r2, #0
 80008c4:	2105      	movs	r1, #5
 80008c6:	203c      	movs	r0, #60	; 0x3c
 80008c8:	f001 fc44 	bl	8002154 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 80008cc:	203c      	movs	r0, #60	; 0x3c
 80008ce:	f001 fc5b 	bl	8002188 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 5, 0);
 80008d2:	2200      	movs	r2, #0
 80008d4:	2105      	movs	r1, #5
 80008d6:	2044      	movs	r0, #68	; 0x44
 80008d8:	f001 fc3c 	bl	8002154 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 80008dc:	2044      	movs	r0, #68	; 0x44
 80008de:	f001 fc53 	bl	8002188 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 80008e2:	2200      	movs	r2, #0
 80008e4:	2105      	movs	r1, #5
 80008e6:	2045      	movs	r0, #69	; 0x45
 80008e8:	f001 fc34 	bl	8002154 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80008ec:	2045      	movs	r0, #69	; 0x45
 80008ee:	f001 fc4b 	bl	8002188 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 80008f2:	2200      	movs	r2, #0
 80008f4:	2105      	movs	r1, #5
 80008f6:	2046      	movs	r0, #70	; 0x46
 80008f8:	f001 fc2c 	bl	8002154 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80008fc:	2046      	movs	r0, #70	; 0x46
 80008fe:	f001 fc43 	bl	8002188 <HAL_NVIC_EnableIRQ>

}
 8000902:	bf00      	nop
 8000904:	3708      	adds	r7, #8
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	58024400 	.word	0x58024400

08000910 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000910:	b480      	push	{r7}
 8000912:	b085      	sub	sp, #20
 8000914:	af00      	add	r7, sp, #0
 8000916:	60f8      	str	r0, [r7, #12]
 8000918:	60b9      	str	r1, [r7, #8]
 800091a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	4a07      	ldr	r2, [pc, #28]	; (800093c <vApplicationGetIdleTaskMemory+0x2c>)
 8000920:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000922:	68bb      	ldr	r3, [r7, #8]
 8000924:	4a06      	ldr	r2, [pc, #24]	; (8000940 <vApplicationGetIdleTaskMemory+0x30>)
 8000926:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	2280      	movs	r2, #128	; 0x80
 800092c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800092e:	bf00      	nop
 8000930:	3714      	adds	r7, #20
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop
 800093c:	2400022c 	.word	0x2400022c
 8000940:	24000280 	.word	0x24000280

08000944 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000944:	b5b0      	push	{r4, r5, r7, lr}
 8000946:	b088      	sub	sp, #32
 8000948:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of watchdog */
  osThreadDef(watchdog, watchdogTask, osPriorityNormal, 0, 512);
 800094a:	4b0b      	ldr	r3, [pc, #44]	; (8000978 <MX_FREERTOS_Init+0x34>)
 800094c:	1d3c      	adds	r4, r7, #4
 800094e:	461d      	mov	r5, r3
 8000950:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000952:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000954:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000958:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  watchdogHandle = osThreadCreate(osThread(watchdog), NULL);
 800095c:	1d3b      	adds	r3, r7, #4
 800095e:	2100      	movs	r1, #0
 8000960:	4618      	mov	r0, r3
 8000962:	f00a f908 	bl	800ab76 <osThreadCreate>
 8000966:	4602      	mov	r2, r0
 8000968:	4b04      	ldr	r3, [pc, #16]	; (800097c <MX_FREERTOS_Init+0x38>)
 800096a:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  initCortexM7();
 800096c:	f01e ff0e 	bl	801f78c <initCortexM7>
  /* USER CODE END RTOS_THREADS */

}
 8000970:	bf00      	nop
 8000972:	3720      	adds	r7, #32
 8000974:	46bd      	mov	sp, r7
 8000976:	bdb0      	pop	{r4, r5, r7, pc}
 8000978:	08023134 	.word	0x08023134
 800097c:	2404548c 	.word	0x2404548c

08000980 <watchdogTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_watchdogTask */
void watchdogTask(void const * argument)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  /* USER CODE BEGIN watchdogTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000988:	2001      	movs	r0, #1
 800098a:	f00a f940 	bl	800ac0e <osDelay>
 800098e:	e7fb      	b.n	8000988 <watchdogTask+0x8>

08000990 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 8000990:	b480      	push	{r7}
 8000992:	b087      	sub	sp, #28
 8000994:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000996:	4b30      	ldr	r3, [pc, #192]	; (8000a58 <MX_GPIO_Init+0xc8>)
 8000998:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800099c:	4a2e      	ldr	r2, [pc, #184]	; (8000a58 <MX_GPIO_Init+0xc8>)
 800099e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009a6:	4b2c      	ldr	r3, [pc, #176]	; (8000a58 <MX_GPIO_Init+0xc8>)
 80009a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009b0:	617b      	str	r3, [r7, #20]
 80009b2:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009b4:	4b28      	ldr	r3, [pc, #160]	; (8000a58 <MX_GPIO_Init+0xc8>)
 80009b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ba:	4a27      	ldr	r2, [pc, #156]	; (8000a58 <MX_GPIO_Init+0xc8>)
 80009bc:	f043 0304 	orr.w	r3, r3, #4
 80009c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009c4:	4b24      	ldr	r3, [pc, #144]	; (8000a58 <MX_GPIO_Init+0xc8>)
 80009c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ca:	f003 0304 	and.w	r3, r3, #4
 80009ce:	613b      	str	r3, [r7, #16]
 80009d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d2:	4b21      	ldr	r3, [pc, #132]	; (8000a58 <MX_GPIO_Init+0xc8>)
 80009d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d8:	4a1f      	ldr	r2, [pc, #124]	; (8000a58 <MX_GPIO_Init+0xc8>)
 80009da:	f043 0301 	orr.w	r3, r3, #1
 80009de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009e2:	4b1d      	ldr	r3, [pc, #116]	; (8000a58 <MX_GPIO_Init+0xc8>)
 80009e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e8:	f003 0301 	and.w	r3, r3, #1
 80009ec:	60fb      	str	r3, [r7, #12]
 80009ee:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f0:	4b19      	ldr	r3, [pc, #100]	; (8000a58 <MX_GPIO_Init+0xc8>)
 80009f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009f6:	4a18      	ldr	r2, [pc, #96]	; (8000a58 <MX_GPIO_Init+0xc8>)
 80009f8:	f043 0302 	orr.w	r3, r3, #2
 80009fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a00:	4b15      	ldr	r3, [pc, #84]	; (8000a58 <MX_GPIO_Init+0xc8>)
 8000a02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a06:	f003 0302 	and.w	r3, r3, #2
 8000a0a:	60bb      	str	r3, [r7, #8]
 8000a0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a0e:	4b12      	ldr	r3, [pc, #72]	; (8000a58 <MX_GPIO_Init+0xc8>)
 8000a10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a14:	4a10      	ldr	r2, [pc, #64]	; (8000a58 <MX_GPIO_Init+0xc8>)
 8000a16:	f043 0308 	orr.w	r3, r3, #8
 8000a1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a1e:	4b0e      	ldr	r3, [pc, #56]	; (8000a58 <MX_GPIO_Init+0xc8>)
 8000a20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a24:	f003 0308 	and.w	r3, r3, #8
 8000a28:	607b      	str	r3, [r7, #4]
 8000a2a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a2c:	4b0a      	ldr	r3, [pc, #40]	; (8000a58 <MX_GPIO_Init+0xc8>)
 8000a2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a32:	4a09      	ldr	r2, [pc, #36]	; (8000a58 <MX_GPIO_Init+0xc8>)
 8000a34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a3c:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <MX_GPIO_Init+0xc8>)
 8000a3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a46:	603b      	str	r3, [r7, #0]
 8000a48:	683b      	ldr	r3, [r7, #0]

}
 8000a4a:	bf00      	nop
 8000a4c:	371c      	adds	r7, #28
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	58024400 	.word	0x58024400

08000a5c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000a60:	4b1c      	ldr	r3, [pc, #112]	; (8000ad4 <MX_I2C1_Init+0x78>)
 8000a62:	4a1d      	ldr	r2, [pc, #116]	; (8000ad8 <MX_I2C1_Init+0x7c>)
 8000a64:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00401242;
 8000a66:	4b1b      	ldr	r3, [pc, #108]	; (8000ad4 <MX_I2C1_Init+0x78>)
 8000a68:	4a1c      	ldr	r2, [pc, #112]	; (8000adc <MX_I2C1_Init+0x80>)
 8000a6a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a6c:	4b19      	ldr	r3, [pc, #100]	; (8000ad4 <MX_I2C1_Init+0x78>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a72:	4b18      	ldr	r3, [pc, #96]	; (8000ad4 <MX_I2C1_Init+0x78>)
 8000a74:	2201      	movs	r2, #1
 8000a76:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a78:	4b16      	ldr	r3, [pc, #88]	; (8000ad4 <MX_I2C1_Init+0x78>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a7e:	4b15      	ldr	r3, [pc, #84]	; (8000ad4 <MX_I2C1_Init+0x78>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a84:	4b13      	ldr	r3, [pc, #76]	; (8000ad4 <MX_I2C1_Init+0x78>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a8a:	4b12      	ldr	r3, [pc, #72]	; (8000ad4 <MX_I2C1_Init+0x78>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a90:	4b10      	ldr	r3, [pc, #64]	; (8000ad4 <MX_I2C1_Init+0x78>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a96:	480f      	ldr	r0, [pc, #60]	; (8000ad4 <MX_I2C1_Init+0x78>)
 8000a98:	f005 fa64 	bl	8005f64 <HAL_I2C_Init>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000aa2:	f000 fb03 	bl	80010ac <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	480a      	ldr	r0, [pc, #40]	; (8000ad4 <MX_I2C1_Init+0x78>)
 8000aaa:	f005 faeb 	bl	8006084 <HAL_I2CEx_ConfigAnalogFilter>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ab4:	f000 fafa 	bl	80010ac <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ab8:	2100      	movs	r1, #0
 8000aba:	4806      	ldr	r0, [pc, #24]	; (8000ad4 <MX_I2C1_Init+0x78>)
 8000abc:	f005 fb2d 	bl	800611a <HAL_I2CEx_ConfigDigitalFilter>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000ac6:	f000 faf1 	bl	80010ac <Error_Handler>
  }
  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 8000aca:	2001      	movs	r0, #1
 8000acc:	f005 fb72 	bl	80061b4 <HAL_I2CEx_EnableFastModePlus>

}
 8000ad0:	bf00      	nop
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	240454dc 	.word	0x240454dc
 8000ad8:	40005400 	.word	0x40005400
 8000adc:	00401242 	.word	0x00401242

08000ae0 <HAL_I2C_MspInit>:
  }

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b08e      	sub	sp, #56	; 0x38
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	605a      	str	r2, [r3, #4]
 8000af2:	609a      	str	r2, [r3, #8]
 8000af4:	60da      	str	r2, [r3, #12]
 8000af6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a5f      	ldr	r2, [pc, #380]	; (8000c7c <HAL_I2C_MspInit+0x19c>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d12e      	bne.n	8000b60 <HAL_I2C_MspInit+0x80>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b02:	4b5f      	ldr	r3, [pc, #380]	; (8000c80 <HAL_I2C_MspInit+0x1a0>)
 8000b04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b08:	4a5d      	ldr	r2, [pc, #372]	; (8000c80 <HAL_I2C_MspInit+0x1a0>)
 8000b0a:	f043 0302 	orr.w	r3, r3, #2
 8000b0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b12:	4b5b      	ldr	r3, [pc, #364]	; (8000c80 <HAL_I2C_MspInit+0x1a0>)
 8000b14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b18:	f003 0302 	and.w	r3, r3, #2
 8000b1c:	623b      	str	r3, [r7, #32]
 8000b1e:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b20:	23c0      	movs	r3, #192	; 0xc0
 8000b22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b24:	2312      	movs	r3, #18
 8000b26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b30:	2304      	movs	r3, #4
 8000b32:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4852      	ldr	r0, [pc, #328]	; (8000c84 <HAL_I2C_MspInit+0x1a4>)
 8000b3c:	f004 fffc 	bl	8005b38 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b40:	4b4f      	ldr	r3, [pc, #316]	; (8000c80 <HAL_I2C_MspInit+0x1a0>)
 8000b42:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000b46:	4a4e      	ldr	r2, [pc, #312]	; (8000c80 <HAL_I2C_MspInit+0x1a0>)
 8000b48:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b4c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000b50:	4b4b      	ldr	r3, [pc, #300]	; (8000c80 <HAL_I2C_MspInit+0x1a0>)
 8000b52:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000b56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b5a:	61fb      	str	r3, [r7, #28]
 8000b5c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000b5e:	e088      	b.n	8000c72 <HAL_I2C_MspInit+0x192>
  else if(i2cHandle->Instance==I2C2)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a48      	ldr	r2, [pc, #288]	; (8000c88 <HAL_I2C_MspInit+0x1a8>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d12f      	bne.n	8000bca <HAL_I2C_MspInit+0xea>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b6a:	4b45      	ldr	r3, [pc, #276]	; (8000c80 <HAL_I2C_MspInit+0x1a0>)
 8000b6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b70:	4a43      	ldr	r2, [pc, #268]	; (8000c80 <HAL_I2C_MspInit+0x1a0>)
 8000b72:	f043 0302 	orr.w	r3, r3, #2
 8000b76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b7a:	4b41      	ldr	r3, [pc, #260]	; (8000c80 <HAL_I2C_MspInit+0x1a0>)
 8000b7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b80:	f003 0302 	and.w	r3, r3, #2
 8000b84:	61bb      	str	r3, [r7, #24]
 8000b86:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000b88:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000b8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b8e:	2312      	movs	r3, #18
 8000b90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b92:	2300      	movs	r3, #0
 8000b94:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b96:	2300      	movs	r3, #0
 8000b98:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000b9a:	2304      	movs	r3, #4
 8000b9c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4837      	ldr	r0, [pc, #220]	; (8000c84 <HAL_I2C_MspInit+0x1a4>)
 8000ba6:	f004 ffc7 	bl	8005b38 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000baa:	4b35      	ldr	r3, [pc, #212]	; (8000c80 <HAL_I2C_MspInit+0x1a0>)
 8000bac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000bb0:	4a33      	ldr	r2, [pc, #204]	; (8000c80 <HAL_I2C_MspInit+0x1a0>)
 8000bb2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000bb6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000bba:	4b31      	ldr	r3, [pc, #196]	; (8000c80 <HAL_I2C_MspInit+0x1a0>)
 8000bbc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000bc0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000bc4:	617b      	str	r3, [r7, #20]
 8000bc6:	697b      	ldr	r3, [r7, #20]
}
 8000bc8:	e053      	b.n	8000c72 <HAL_I2C_MspInit+0x192>
  else if(i2cHandle->Instance==I2C3)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4a2f      	ldr	r2, [pc, #188]	; (8000c8c <HAL_I2C_MspInit+0x1ac>)
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d14e      	bne.n	8000c72 <HAL_I2C_MspInit+0x192>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bd4:	4b2a      	ldr	r3, [pc, #168]	; (8000c80 <HAL_I2C_MspInit+0x1a0>)
 8000bd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bda:	4a29      	ldr	r2, [pc, #164]	; (8000c80 <HAL_I2C_MspInit+0x1a0>)
 8000bdc:	f043 0304 	orr.w	r3, r3, #4
 8000be0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000be4:	4b26      	ldr	r3, [pc, #152]	; (8000c80 <HAL_I2C_MspInit+0x1a0>)
 8000be6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bea:	f003 0304 	and.w	r3, r3, #4
 8000bee:	613b      	str	r3, [r7, #16]
 8000bf0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf2:	4b23      	ldr	r3, [pc, #140]	; (8000c80 <HAL_I2C_MspInit+0x1a0>)
 8000bf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf8:	4a21      	ldr	r2, [pc, #132]	; (8000c80 <HAL_I2C_MspInit+0x1a0>)
 8000bfa:	f043 0301 	orr.w	r3, r3, #1
 8000bfe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c02:	4b1f      	ldr	r3, [pc, #124]	; (8000c80 <HAL_I2C_MspInit+0x1a0>)
 8000c04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c08:	f003 0301 	and.w	r3, r3, #1
 8000c0c:	60fb      	str	r3, [r7, #12]
 8000c0e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c16:	2312      	movs	r3, #18
 8000c18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000c22:	2304      	movs	r3, #4
 8000c24:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4818      	ldr	r0, [pc, #96]	; (8000c90 <HAL_I2C_MspInit+0x1b0>)
 8000c2e:	f004 ff83 	bl	8005b38 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000c32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c38:	2312      	movs	r3, #18
 8000c3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c40:	2300      	movs	r3, #0
 8000c42:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000c44:	2304      	movs	r3, #4
 8000c46:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4811      	ldr	r0, [pc, #68]	; (8000c94 <HAL_I2C_MspInit+0x1b4>)
 8000c50:	f004 ff72 	bl	8005b38 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000c54:	4b0a      	ldr	r3, [pc, #40]	; (8000c80 <HAL_I2C_MspInit+0x1a0>)
 8000c56:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c5a:	4a09      	ldr	r2, [pc, #36]	; (8000c80 <HAL_I2C_MspInit+0x1a0>)
 8000c5c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000c60:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c64:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <HAL_I2C_MspInit+0x1a0>)
 8000c66:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c6a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000c6e:	60bb      	str	r3, [r7, #8]
 8000c70:	68bb      	ldr	r3, [r7, #8]
}
 8000c72:	bf00      	nop
 8000c74:	3738      	adds	r7, #56	; 0x38
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40005400 	.word	0x40005400
 8000c80:	58024400 	.word	0x58024400
 8000c84:	58020400 	.word	0x58020400
 8000c88:	40005800 	.word	0x40005800
 8000c8c:	40005c00 	.word	0x40005c00
 8000c90:	58020800 	.word	0x58020800
 8000c94:	58020000 	.word	0x58020000

08000c98 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000c9c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000ca0:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000ca4:	4b0b      	ldr	r3, [pc, #44]	; (8000cd4 <SCB_EnableICache+0x3c>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000cac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000cb0:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000cb4:	4b07      	ldr	r3, [pc, #28]	; (8000cd4 <SCB_EnableICache+0x3c>)
 8000cb6:	695b      	ldr	r3, [r3, #20]
 8000cb8:	4a06      	ldr	r2, [pc, #24]	; (8000cd4 <SCB_EnableICache+0x3c>)
 8000cba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cbe:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000cc0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000cc4:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 8000cc8:	bf00      	nop
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	e000ed00 	.word	0xe000ed00

08000cd8 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b085      	sub	sp, #20
 8000cdc:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000cde:	4b1d      	ldr	r3, [pc, #116]	; (8000d54 <SCB_EnableDCache+0x7c>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000ce6:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000cea:	4b1a      	ldr	r3, [pc, #104]	; (8000d54 <SCB_EnableDCache+0x7c>)
 8000cec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000cf0:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	0b5b      	lsrs	r3, r3, #13
 8000cf6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000cfa:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	08db      	lsrs	r3, r3, #3
 8000d00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000d04:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	015a      	lsls	r2, r3, #5
 8000d0a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000d0e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000d10:	68ba      	ldr	r2, [r7, #8]
 8000d12:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000d14:	490f      	ldr	r1, [pc, #60]	; (8000d54 <SCB_EnableDCache+0x7c>)
 8000d16:	4313      	orrs	r3, r2
 8000d18:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	1e5a      	subs	r2, r3, #1
 8000d20:	60ba      	str	r2, [r7, #8]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d1ef      	bne.n	8000d06 <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	1e5a      	subs	r2, r3, #1
 8000d2a:	60fa      	str	r2, [r7, #12]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d1e5      	bne.n	8000cfc <SCB_EnableDCache+0x24>
 8000d30:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000d34:	4b07      	ldr	r3, [pc, #28]	; (8000d54 <SCB_EnableDCache+0x7c>)
 8000d36:	695b      	ldr	r3, [r3, #20]
 8000d38:	4a06      	ldr	r2, [pc, #24]	; (8000d54 <SCB_EnableDCache+0x7c>)
 8000d3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d3e:	6153      	str	r3, [r2, #20]
 8000d40:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000d44:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 8000d48:	bf00      	nop
 8000d4a:	3714      	adds	r7, #20
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr
 8000d54:	e000ed00 	.word	0xe000ed00

08000d58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000d5e:	f000 f92f 	bl	8000fc0 <MPU_Config>

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000d62:	f7ff ff99 	bl	8000c98 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000d66:	f7ff ffb7 	bl	8000cd8 <SCB_EnableDCache>

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000d6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d6e:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000d70:	bf00      	nop
 8000d72:	4b29      	ldr	r3, [pc, #164]	; (8000e18 <main+0xc0>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d004      	beq.n	8000d88 <main+0x30>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	1e5a      	subs	r2, r3, #1
 8000d82:	607a      	str	r2, [r7, #4]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	dcf4      	bgt.n	8000d72 <main+0x1a>
  if ( timeout < 0 )
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	da01      	bge.n	8000d92 <main+0x3a>
  {
  Error_Handler();
 8000d8e:	f000 f98d 	bl	80010ac <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d92:	f001 f8ab 	bl	8001eec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d96:	f000 f841 	bl	8000e1c <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000d9a:	4b1f      	ldr	r3, [pc, #124]	; (8000e18 <main+0xc0>)
 8000d9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000da0:	4a1d      	ldr	r2, [pc, #116]	; (8000e18 <main+0xc0>)
 8000da2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000da6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000daa:	4b1b      	ldr	r3, [pc, #108]	; (8000e18 <main+0xc0>)
 8000dac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000db0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000db4:	603b      	str	r3, [r7, #0]
 8000db6:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000db8:	2000      	movs	r0, #0
 8000dba:	f005 f88f 	bl	8005edc <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	2000      	movs	r0, #0
 8000dc2:	f005 f8bb 	bl	8005f3c <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000dc6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dca:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000dcc:	bf00      	nop
 8000dce:	4b12      	ldr	r3, [pc, #72]	; (8000e18 <main+0xc0>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d104      	bne.n	8000de4 <main+0x8c>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	1e5a      	subs	r2, r3, #1
 8000dde:	607a      	str	r2, [r7, #4]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	dcf4      	bgt.n	8000dce <main+0x76>
if ( timeout < 0 )
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	da01      	bge.n	8000dee <main+0x96>
{
Error_Handler();
 8000dea:	f000 f95f 	bl	80010ac <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dee:	f7ff fdcf 	bl	8000990 <MX_GPIO_Init>
  MX_DMA_Init();
 8000df2:	f7ff fd35 	bl	8000860 <MX_DMA_Init>
  MX_CRC_Init();
 8000df6:	f7ff fcef 	bl	80007d8 <MX_CRC_Init>
  MX_USART1_UART_Init();
 8000dfa:	f000 fb57 	bl	80014ac <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000dfe:	f000 fba1 	bl	8001544 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000e02:	f000 fbeb 	bl	80015dc <MX_USART3_UART_Init>
  //MX_IWDG1_Init();
  MX_USART6_UART_Init();
 8000e06:	f000 fc35 	bl	8001674 <MX_USART6_UART_Init>
  MX_RTC_Init();
 8000e0a:	f000 f953 	bl	80010b4 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000e0e:	f7ff fd99 	bl	8000944 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000e12:	f009 fe99 	bl	800ab48 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e16:	e7fe      	b.n	8000e16 <main+0xbe>
 8000e18:	58024400 	.word	0x58024400

08000e1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b0cc      	sub	sp, #304	; 0x130
 8000e20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e22:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000e26:	224c      	movs	r2, #76	; 0x4c
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f01f fc4f 	bl	80206ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e30:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000e34:	2220      	movs	r2, #32
 8000e36:	2100      	movs	r1, #0
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f01f fc48 	bl	80206ce <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e3e:	f107 0308 	add.w	r3, r7, #8
 8000e42:	4618      	mov	r0, r3
 8000e44:	23bc      	movs	r3, #188	; 0xbc
 8000e46:	461a      	mov	r2, r3
 8000e48:	2100      	movs	r1, #0
 8000e4a:	f01f fc40 	bl	80206ce <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000e4e:	2004      	movs	r0, #4
 8000e50:	f005 f9e4 	bl	800621c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e54:	1d3b      	adds	r3, r7, #4
 8000e56:	2200      	movs	r2, #0
 8000e58:	601a      	str	r2, [r3, #0]
 8000e5a:	4b56      	ldr	r3, [pc, #344]	; (8000fb4 <SystemClock_Config+0x198>)
 8000e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e5e:	4a55      	ldr	r2, [pc, #340]	; (8000fb4 <SystemClock_Config+0x198>)
 8000e60:	f023 0301 	bic.w	r3, r3, #1
 8000e64:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000e66:	4b53      	ldr	r3, [pc, #332]	; (8000fb4 <SystemClock_Config+0x198>)
 8000e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e6a:	f003 0201 	and.w	r2, r3, #1
 8000e6e:	1d3b      	adds	r3, r7, #4
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	4b51      	ldr	r3, [pc, #324]	; (8000fb8 <SystemClock_Config+0x19c>)
 8000e74:	699b      	ldr	r3, [r3, #24]
 8000e76:	4a50      	ldr	r2, [pc, #320]	; (8000fb8 <SystemClock_Config+0x19c>)
 8000e78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e7c:	6193      	str	r3, [r2, #24]
 8000e7e:	4b4e      	ldr	r3, [pc, #312]	; (8000fb8 <SystemClock_Config+0x19c>)
 8000e80:	699b      	ldr	r3, [r3, #24]
 8000e82:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000e86:	1d3b      	adds	r3, r7, #4
 8000e88:	601a      	str	r2, [r3, #0]
 8000e8a:	1d3b      	adds	r3, r7, #4
 8000e8c:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000e8e:	bf00      	nop
 8000e90:	4b49      	ldr	r3, [pc, #292]	; (8000fb8 <SystemClock_Config+0x19c>)
 8000e92:	699b      	ldr	r3, [r3, #24]
 8000e94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e9c:	d1f8      	bne.n	8000e90 <SystemClock_Config+0x74>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8000e9e:	230b      	movs	r3, #11
 8000ea0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ea4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000ea8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000eac:	2301      	movs	r3, #1
 8000eae:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000eb2:	2340      	movs	r3, #64	; 0x40
 8000eb4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000eca:	2302      	movs	r3, #2
 8000ecc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000ed0:	2340      	movs	r3, #64	; 0x40
 8000ed2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000edc:	2302      	movs	r3, #2
 8000ede:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000ee8:	230c      	movs	r3, #12
 8000eea:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000efa:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000efe:	4618      	mov	r0, r3
 8000f00:	f005 f9e6 	bl	80062d0 <HAL_RCC_OscConfig>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000f0a:	f000 f8cf 	bl	80010ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f0e:	233f      	movs	r3, #63	; 0x3f
 8000f10:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f14:	2303      	movs	r3, #3
 8000f16:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000f20:	2308      	movs	r3, #8
 8000f22:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000f26:	2340      	movs	r3, #64	; 0x40
 8000f28:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000f2c:	2340      	movs	r3, #64	; 0x40
 8000f2e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000f32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f36:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000f3a:	2340      	movs	r3, #64	; 0x40
 8000f3c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f40:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000f44:	2102      	movs	r1, #2
 8000f46:	4618      	mov	r0, r3
 8000f48:	f005 fdd2 	bl	8006af0 <HAL_RCC_ClockConfig>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <SystemClock_Config+0x13a>
  {
    Error_Handler();
 8000f52:	f000 f8ab 	bl	80010ac <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART3
 8000f56:	f107 0308 	add.w	r3, r7, #8
 8000f5a:	4a18      	ldr	r2, [pc, #96]	; (8000fbc <SystemClock_Config+0x1a0>)
 8000f5c:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART6
                              |RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_SPI4
                              |RCC_PERIPHCLK_SPI3|RCC_PERIPHCLK_SPI1
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_I2C3
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000f5e:	f107 0308 	add.w	r3, r7, #8
 8000f62:	2200      	movs	r2, #0
 8000f64:	65da      	str	r2, [r3, #92]	; 0x5c
  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8000f66:	f107 0308 	add.w	r3, r7, #8
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	661a      	str	r2, [r3, #96]	; 0x60
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_HSI;
 8000f6e:	f107 0308 	add.w	r3, r7, #8
 8000f72:	2203      	movs	r2, #3
 8000f74:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_HSI;
 8000f76:	f107 0308 	add.w	r3, r7, #8
 8000f7a:	2218      	movs	r2, #24
 8000f7c:	679a      	str	r2, [r3, #120]	; 0x78
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000f7e:	f107 0308 	add.w	r3, r7, #8
 8000f82:	2200      	movs	r2, #0
 8000f84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000f88:	f107 0308 	add.w	r3, r7, #8
 8000f8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f90:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f94:	f107 0308 	add.w	r3, r7, #8
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f006 f96f 	bl	800727c <HAL_RCCEx_PeriphCLKConfig>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <SystemClock_Config+0x18c>
  {
    Error_Handler();
 8000fa4:	f000 f882 	bl	80010ac <Error_Handler>
  }
}
 8000fa8:	bf00      	nop
 8000faa:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	58000400 	.word	0x58000400
 8000fb8:	58024800 	.word	0x58024800
 8000fbc:	0040300b 	.word	0x0040300b

08000fc0 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000fc6:	463b      	mov	r3, r7
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	605a      	str	r2, [r3, #4]
 8000fce:	609a      	str	r2, [r3, #8]
 8000fd0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000fd2:	f001 f8e7 	bl	80021a4 <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 8000fde:	4b28      	ldr	r3, [pc, #160]	; (8001080 <MPU_Config+0xc0>)
 8000fe0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 8000fe2:	230e      	movs	r3, #14
 8000fe4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000fea:	2301      	movs	r3, #1
 8000fec:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000fee:	2303      	movs	r3, #3
 8000ff0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000ffe:	2300      	movs	r3, #0
 8001000:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001002:	463b      	mov	r3, r7
 8001004:	4618      	mov	r0, r3
 8001006:	f001 f901 	bl	800220c <HAL_MPU_ConfigRegion>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800100a:	2301      	movs	r3, #1
 800100c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 800100e:	2301      	movs	r3, #1
 8001010:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 8001012:	4b1b      	ldr	r3, [pc, #108]	; (8001080 <MPU_Config+0xc0>)
 8001014:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 8001016:	2307      	movs	r3, #7
 8001018:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 800101a:	2300      	movs	r3, #0
 800101c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800101e:	2300      	movs	r3, #0
 8001020:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001022:	2303      	movs	r3, #3
 8001024:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001026:	2301      	movs	r3, #1
 8001028:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800102a:	2301      	movs	r3, #1
 800102c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800102e:	2300      	movs	r3, #0
 8001030:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8001032:	2301      	movs	r3, #1
 8001034:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001036:	463b      	mov	r3, r7
 8001038:	4618      	mov	r0, r3
 800103a:	f001 f8e7 	bl	800220c <HAL_MPU_ConfigRegion>

  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800103e:	2301      	movs	r3, #1
 8001040:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8001042:	2302      	movs	r3, #2
 8001044:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x38001000;
 8001046:	4b0f      	ldr	r3, [pc, #60]	; (8001084 <MPU_Config+0xc4>)
 8001048:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_1KB;
 800104a:	2309      	movs	r3, #9
 800104c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 800104e:	2300      	movs	r3, #0
 8001050:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001052:	2300      	movs	r3, #0
 8001054:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001056:	2303      	movs	r3, #3
 8001058:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800105a:	2301      	movs	r3, #1
 800105c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800105e:	2301      	movs	r3, #1
 8001060:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001062:	2300      	movs	r3, #0
 8001064:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001066:	2300      	movs	r3, #0
 8001068:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800106a:	463b      	mov	r3, r7
 800106c:	4618      	mov	r0, r3
 800106e:	f001 f8cd 	bl	800220c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001072:	2004      	movs	r0, #4
 8001074:	f001 f8ac 	bl	80021d0 <HAL_MPU_Enable>

}
 8001078:	bf00      	nop
 800107a:	3710      	adds	r7, #16
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	30040000 	.word	0x30040000
 8001084:	38001000 	.word	0x38001000

08001088 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a04      	ldr	r2, [pc, #16]	; (80010a8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d101      	bne.n	800109e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800109a:	f000 ff63 	bl	8001f64 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40001400 	.word	0x40001400

080010ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80010b0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010b2:	e7fe      	b.n	80010b2 <Error_Handler+0x6>

080010b4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80010b8:	4b10      	ldr	r3, [pc, #64]	; (80010fc <MX_RTC_Init+0x48>)
 80010ba:	4a11      	ldr	r2, [pc, #68]	; (8001100 <MX_RTC_Init+0x4c>)
 80010bc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80010be:	4b0f      	ldr	r3, [pc, #60]	; (80010fc <MX_RTC_Init+0x48>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80010c4:	4b0d      	ldr	r3, [pc, #52]	; (80010fc <MX_RTC_Init+0x48>)
 80010c6:	227f      	movs	r2, #127	; 0x7f
 80010c8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80010ca:	4b0c      	ldr	r3, [pc, #48]	; (80010fc <MX_RTC_Init+0x48>)
 80010cc:	22ff      	movs	r2, #255	; 0xff
 80010ce:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80010d0:	4b0a      	ldr	r3, [pc, #40]	; (80010fc <MX_RTC_Init+0x48>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80010d6:	4b09      	ldr	r3, [pc, #36]	; (80010fc <MX_RTC_Init+0x48>)
 80010d8:	2200      	movs	r2, #0
 80010da:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80010dc:	4b07      	ldr	r3, [pc, #28]	; (80010fc <MX_RTC_Init+0x48>)
 80010de:	2200      	movs	r2, #0
 80010e0:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80010e2:	4b06      	ldr	r3, [pc, #24]	; (80010fc <MX_RTC_Init+0x48>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80010e8:	4804      	ldr	r0, [pc, #16]	; (80010fc <MX_RTC_Init+0x48>)
 80010ea:	f007 fbc7 	bl	800887c <HAL_RTC_Init>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 80010f4:	f7ff ffda 	bl	80010ac <Error_Handler>
  }

}
 80010f8:	bf00      	nop
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	24045584 	.word	0x24045584
 8001100:	58004000 	.word	0x58004000

08001104 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a07      	ldr	r2, [pc, #28]	; (8001130 <HAL_RTC_MspInit+0x2c>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d105      	bne.n	8001122 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001116:	4b07      	ldr	r3, [pc, #28]	; (8001134 <HAL_RTC_MspInit+0x30>)
 8001118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800111a:	4a06      	ldr	r2, [pc, #24]	; (8001134 <HAL_RTC_MspInit+0x30>)
 800111c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001120:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001122:	bf00      	nop
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	58004000 	.word	0x58004000
 8001134:	58024400 	.word	0x58024400

08001138 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800113e:	4b0c      	ldr	r3, [pc, #48]	; (8001170 <HAL_MspInit+0x38>)
 8001140:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001144:	4a0a      	ldr	r2, [pc, #40]	; (8001170 <HAL_MspInit+0x38>)
 8001146:	f043 0302 	orr.w	r3, r3, #2
 800114a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800114e:	4b08      	ldr	r3, [pc, #32]	; (8001170 <HAL_MspInit+0x38>)
 8001150:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001154:	f003 0302 	and.w	r3, r3, #2
 8001158:	607b      	str	r3, [r7, #4]
 800115a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800115c:	2200      	movs	r2, #0
 800115e:	210f      	movs	r1, #15
 8001160:	f06f 0001 	mvn.w	r0, #1
 8001164:	f000 fff6 	bl	8002154 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001168:	bf00      	nop
 800116a:	3708      	adds	r7, #8
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	58024400 	.word	0x58024400

08001174 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b090      	sub	sp, #64	; 0x40
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM7 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2b0f      	cmp	r3, #15
 8001180:	d827      	bhi.n	80011d2 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0U);
 8001182:	2200      	movs	r2, #0
 8001184:	6879      	ldr	r1, [r7, #4]
 8001186:	2037      	movs	r0, #55	; 0x37
 8001188:	f000 ffe4 	bl	8002154 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800118c:	2037      	movs	r0, #55	; 0x37
 800118e:	f000 fffb 	bl	8002188 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8001192:	4a29      	ldr	r2, [pc, #164]	; (8001238 <HAL_InitTick+0xc4>)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001198:	4b28      	ldr	r3, [pc, #160]	; (800123c <HAL_InitTick+0xc8>)
 800119a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800119e:	4a27      	ldr	r2, [pc, #156]	; (800123c <HAL_InitTick+0xc8>)
 80011a0:	f043 0320 	orr.w	r3, r3, #32
 80011a4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80011a8:	4b24      	ldr	r3, [pc, #144]	; (800123c <HAL_InitTick+0xc8>)
 80011aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80011ae:	f003 0320 	and.w	r3, r3, #32
 80011b2:	60fb      	str	r3, [r7, #12]
 80011b4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80011b6:	f107 0210 	add.w	r2, r7, #16
 80011ba:	f107 0314 	add.w	r3, r7, #20
 80011be:	4611      	mov	r1, r2
 80011c0:	4618      	mov	r0, r3
 80011c2:	f006 f819 	bl	80071f8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80011c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011c8:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80011ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d106      	bne.n	80011de <HAL_InitTick+0x6a>
 80011d0:	e001      	b.n	80011d6 <HAL_InitTick+0x62>
    return HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
 80011d4:	e02b      	b.n	800122e <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80011d6:	f005 ffe3 	bl	80071a0 <HAL_RCC_GetPCLK1Freq>
 80011da:	63f8      	str	r0, [r7, #60]	; 0x3c
 80011dc:	e004      	b.n	80011e8 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80011de:	f005 ffdf 	bl	80071a0 <HAL_RCC_GetPCLK1Freq>
 80011e2:	4603      	mov	r3, r0
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80011e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011ea:	4a15      	ldr	r2, [pc, #84]	; (8001240 <HAL_InitTick+0xcc>)
 80011ec:	fba2 2303 	umull	r2, r3, r2, r3
 80011f0:	0c9b      	lsrs	r3, r3, #18
 80011f2:	3b01      	subs	r3, #1
 80011f4:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 80011f6:	4b13      	ldr	r3, [pc, #76]	; (8001244 <HAL_InitTick+0xd0>)
 80011f8:	4a13      	ldr	r2, [pc, #76]	; (8001248 <HAL_InitTick+0xd4>)
 80011fa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 80011fc:	4b11      	ldr	r3, [pc, #68]	; (8001244 <HAL_InitTick+0xd0>)
 80011fe:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001202:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8001204:	4a0f      	ldr	r2, [pc, #60]	; (8001244 <HAL_InitTick+0xd0>)
 8001206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001208:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 800120a:	4b0e      	ldr	r3, [pc, #56]	; (8001244 <HAL_InitTick+0xd0>)
 800120c:	2200      	movs	r2, #0
 800120e:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001210:	4b0c      	ldr	r3, [pc, #48]	; (8001244 <HAL_InitTick+0xd0>)
 8001212:	2200      	movs	r2, #0
 8001214:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8001216:	480b      	ldr	r0, [pc, #44]	; (8001244 <HAL_InitTick+0xd0>)
 8001218:	f007 fc3c 	bl	8008a94 <HAL_TIM_Base_Init>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d104      	bne.n	800122c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8001222:	4808      	ldr	r0, [pc, #32]	; (8001244 <HAL_InitTick+0xd0>)
 8001224:	f007 fc98 	bl	8008b58 <HAL_TIM_Base_Start_IT>
 8001228:	4603      	mov	r3, r0
 800122a:	e000      	b.n	800122e <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 800122c:	2301      	movs	r3, #1
}
 800122e:	4618      	mov	r0, r3
 8001230:	3740      	adds	r7, #64	; 0x40
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	24000008 	.word	0x24000008
 800123c:	58024400 	.word	0x58024400
 8001240:	431bde83 	.word	0x431bde83
 8001244:	240455a8 	.word	0x240455a8
 8001248:	40001400 	.word	0x40001400

0800124c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001250:	e7fe      	b.n	8001250 <NMI_Handler+0x4>

08001252 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001252:	b480      	push	{r7}
 8001254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001256:	e7fe      	b.n	8001256 <HardFault_Handler+0x4>

08001258 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800125c:	e7fe      	b.n	800125c <MemManage_Handler+0x4>

0800125e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800125e:	b480      	push	{r7}
 8001260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001262:	e7fe      	b.n	8001262 <BusFault_Handler+0x4>

08001264 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001268:	e7fe      	b.n	8001268 <UsageFault_Handler+0x4>

0800126a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800126a:	b480      	push	{r7}
 800126c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800126e:	bf00      	nop
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr

08001278 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800127c:	4802      	ldr	r0, [pc, #8]	; (8001288 <TIM7_IRQHandler+0x10>)
 800127e:	f007 fca1 	bl	8008bc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001282:	bf00      	nop
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	240455a8 	.word	0x240455a8

0800128c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001290:	4802      	ldr	r0, [pc, #8]	; (800129c <DMA2_Stream0_IRQHandler+0x10>)
 8001292:	f001 fc59 	bl	8002b48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001296:	bf00      	nop
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	24045950 	.word	0x24045950

080012a0 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80012a4:	4802      	ldr	r0, [pc, #8]	; (80012b0 <DMA2_Stream1_IRQHandler+0x10>)
 80012a6:	f001 fc4f 	bl	8002b48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	24045860 	.word	0x24045860

080012b4 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80012b8:	4802      	ldr	r0, [pc, #8]	; (80012c4 <DMA2_Stream4_IRQHandler+0x10>)
 80012ba:	f001 fc45 	bl	8002b48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 80012be:	bf00      	nop
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	240455f4 	.word	0x240455f4

080012c8 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80012cc:	4802      	ldr	r0, [pc, #8]	; (80012d8 <ETH_IRQHandler+0x10>)
 80012ce:	f003 fa7b 	bl	80047c8 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80012d2:	bf00      	nop
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	24045cd4 	.word	0x24045cd4

080012dc <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80012e0:	4802      	ldr	r0, [pc, #8]	; (80012ec <DMA2_Stream5_IRQHandler+0x10>)
 80012e2:	f001 fc31 	bl	8002b48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	240459c8 	.word	0x240459c8

080012f0 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 80012f4:	4802      	ldr	r0, [pc, #8]	; (8001300 <DMA2_Stream6_IRQHandler+0x10>)
 80012f6:	f001 fc27 	bl	8002b48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80012fa:	bf00      	nop
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	2404566c 	.word	0x2404566c

08001304 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8001308:	4802      	ldr	r0, [pc, #8]	; (8001314 <DMA2_Stream7_IRQHandler+0x10>)
 800130a:	f001 fc1d 	bl	8002b48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800130e:	bf00      	nop
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	240458d8 	.word	0x240458d8

08001318 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
	return 1;
 800131c:	2301      	movs	r3, #1
}
 800131e:	4618      	mov	r0, r3
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr

08001328 <_kill>:

int _kill(int pid, int sig)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001332:	4b05      	ldr	r3, [pc, #20]	; (8001348 <_kill+0x20>)
 8001334:	2216      	movs	r2, #22
 8001336:	601a      	str	r2, [r3, #0]
	return -1;
 8001338:	f04f 33ff 	mov.w	r3, #4294967295
}
 800133c:	4618      	mov	r0, r3
 800133e:	370c      	adds	r7, #12
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr
 8001348:	24048e74 	.word	0x24048e74

0800134c <_exit>:

void _exit (int status)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001354:	f04f 31ff 	mov.w	r1, #4294967295
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f7ff ffe5 	bl	8001328 <_kill>
	while (1) {}		/* Make sure we hang here */
 800135e:	e7fe      	b.n	800135e <_exit+0x12>

08001360 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b086      	sub	sp, #24
 8001364:	af00      	add	r7, sp, #0
 8001366:	60f8      	str	r0, [r7, #12]
 8001368:	60b9      	str	r1, [r7, #8]
 800136a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800136c:	2300      	movs	r3, #0
 800136e:	617b      	str	r3, [r7, #20]
 8001370:	e00a      	b.n	8001388 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001372:	f3af 8000 	nop.w
 8001376:	4601      	mov	r1, r0
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	1c5a      	adds	r2, r3, #1
 800137c:	60ba      	str	r2, [r7, #8]
 800137e:	b2ca      	uxtb	r2, r1
 8001380:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	3301      	adds	r3, #1
 8001386:	617b      	str	r3, [r7, #20]
 8001388:	697a      	ldr	r2, [r7, #20]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	429a      	cmp	r2, r3
 800138e:	dbf0      	blt.n	8001372 <_read+0x12>
	}

return len;
 8001390:	687b      	ldr	r3, [r7, #4]
}
 8001392:	4618      	mov	r0, r3
 8001394:	3718      	adds	r7, #24
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800139a:	b580      	push	{r7, lr}
 800139c:	b086      	sub	sp, #24
 800139e:	af00      	add	r7, sp, #0
 80013a0:	60f8      	str	r0, [r7, #12]
 80013a2:	60b9      	str	r1, [r7, #8]
 80013a4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013a6:	2300      	movs	r3, #0
 80013a8:	617b      	str	r3, [r7, #20]
 80013aa:	e009      	b.n	80013c0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	1c5a      	adds	r2, r3, #1
 80013b0:	60ba      	str	r2, [r7, #8]
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	4618      	mov	r0, r3
 80013b6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	3301      	adds	r3, #1
 80013be:	617b      	str	r3, [r7, #20]
 80013c0:	697a      	ldr	r2, [r7, #20]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	dbf1      	blt.n	80013ac <_write+0x12>
	}
	return len;
 80013c8:	687b      	ldr	r3, [r7, #4]
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3718      	adds	r7, #24
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <_close>:

int _close(int file)
{
 80013d2:	b480      	push	{r7}
 80013d4:	b083      	sub	sp, #12
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
	return -1;
 80013da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013de:	4618      	mov	r0, r3
 80013e0:	370c      	adds	r7, #12
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr

080013ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013ea:	b480      	push	{r7}
 80013ec:	b083      	sub	sp, #12
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
 80013f2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013fa:	605a      	str	r2, [r3, #4]
	return 0;
 80013fc:	2300      	movs	r3, #0
}
 80013fe:	4618      	mov	r0, r3
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr

0800140a <_isatty>:

int _isatty(int file)
{
 800140a:	b480      	push	{r7}
 800140c:	b083      	sub	sp, #12
 800140e:	af00      	add	r7, sp, #0
 8001410:	6078      	str	r0, [r7, #4]
	return 1;
 8001412:	2301      	movs	r3, #1
}
 8001414:	4618      	mov	r0, r3
 8001416:	370c      	adds	r7, #12
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr

08001420 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001420:	b480      	push	{r7}
 8001422:	b085      	sub	sp, #20
 8001424:	af00      	add	r7, sp, #0
 8001426:	60f8      	str	r0, [r7, #12]
 8001428:	60b9      	str	r1, [r7, #8]
 800142a:	607a      	str	r2, [r7, #4]
	return 0;
 800142c:	2300      	movs	r3, #0
}
 800142e:	4618      	mov	r0, r3
 8001430:	3714      	adds	r7, #20
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
	...

0800143c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800143c:	b480      	push	{r7}
 800143e:	b087      	sub	sp, #28
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001444:	4a14      	ldr	r2, [pc, #80]	; (8001498 <_sbrk+0x5c>)
 8001446:	4b15      	ldr	r3, [pc, #84]	; (800149c <_sbrk+0x60>)
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001450:	4b13      	ldr	r3, [pc, #76]	; (80014a0 <_sbrk+0x64>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d102      	bne.n	800145e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001458:	4b11      	ldr	r3, [pc, #68]	; (80014a0 <_sbrk+0x64>)
 800145a:	4a12      	ldr	r2, [pc, #72]	; (80014a4 <_sbrk+0x68>)
 800145c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800145e:	4b10      	ldr	r3, [pc, #64]	; (80014a0 <_sbrk+0x64>)
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4413      	add	r3, r2
 8001466:	693a      	ldr	r2, [r7, #16]
 8001468:	429a      	cmp	r2, r3
 800146a:	d205      	bcs.n	8001478 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 800146c:	4b0e      	ldr	r3, [pc, #56]	; (80014a8 <_sbrk+0x6c>)
 800146e:	220c      	movs	r2, #12
 8001470:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001472:	f04f 33ff 	mov.w	r3, #4294967295
 8001476:	e009      	b.n	800148c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001478:	4b09      	ldr	r3, [pc, #36]	; (80014a0 <_sbrk+0x64>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800147e:	4b08      	ldr	r3, [pc, #32]	; (80014a0 <_sbrk+0x64>)
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4413      	add	r3, r2
 8001486:	4a06      	ldr	r2, [pc, #24]	; (80014a0 <_sbrk+0x64>)
 8001488:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800148a:	68fb      	ldr	r3, [r7, #12]
}
 800148c:	4618      	mov	r0, r3
 800148e:	371c      	adds	r7, #28
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr
 8001498:	24080000 	.word	0x24080000
 800149c:	00000400 	.word	0x00000400
 80014a0:	24000480 	.word	0x24000480
 80014a4:	24048ea0 	.word	0x24048ea0
 80014a8:	24048e74 	.word	0x24048e74

080014ac <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart6_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80014b0:	4b22      	ldr	r3, [pc, #136]	; (800153c <MX_USART1_UART_Init+0x90>)
 80014b2:	4a23      	ldr	r2, [pc, #140]	; (8001540 <MX_USART1_UART_Init+0x94>)
 80014b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80014b6:	4b21      	ldr	r3, [pc, #132]	; (800153c <MX_USART1_UART_Init+0x90>)
 80014b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014be:	4b1f      	ldr	r3, [pc, #124]	; (800153c <MX_USART1_UART_Init+0x90>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014c4:	4b1d      	ldr	r3, [pc, #116]	; (800153c <MX_USART1_UART_Init+0x90>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014ca:	4b1c      	ldr	r3, [pc, #112]	; (800153c <MX_USART1_UART_Init+0x90>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014d0:	4b1a      	ldr	r3, [pc, #104]	; (800153c <MX_USART1_UART_Init+0x90>)
 80014d2:	220c      	movs	r2, #12
 80014d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014d6:	4b19      	ldr	r3, [pc, #100]	; (800153c <MX_USART1_UART_Init+0x90>)
 80014d8:	2200      	movs	r2, #0
 80014da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014dc:	4b17      	ldr	r3, [pc, #92]	; (800153c <MX_USART1_UART_Init+0x90>)
 80014de:	2200      	movs	r2, #0
 80014e0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014e2:	4b16      	ldr	r3, [pc, #88]	; (800153c <MX_USART1_UART_Init+0x90>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80014e8:	4b14      	ldr	r3, [pc, #80]	; (800153c <MX_USART1_UART_Init+0x90>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014ee:	4b13      	ldr	r3, [pc, #76]	; (800153c <MX_USART1_UART_Init+0x90>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014f4:	4811      	ldr	r0, [pc, #68]	; (800153c <MX_USART1_UART_Init+0x90>)
 80014f6:	f007 fd65 	bl	8008fc4 <HAL_UART_Init>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001500:	f7ff fdd4 	bl	80010ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001504:	2100      	movs	r1, #0
 8001506:	480d      	ldr	r0, [pc, #52]	; (800153c <MX_USART1_UART_Init+0x90>)
 8001508:	f008 fd95 	bl	800a036 <HAL_UARTEx_SetTxFifoThreshold>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001512:	f7ff fdcb 	bl	80010ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001516:	2100      	movs	r1, #0
 8001518:	4808      	ldr	r0, [pc, #32]	; (800153c <MX_USART1_UART_Init+0x90>)
 800151a:	f008 fdca 	bl	800a0b2 <HAL_UARTEx_SetRxFifoThreshold>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001524:	f7ff fdc2 	bl	80010ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001528:	4804      	ldr	r0, [pc, #16]	; (800153c <MX_USART1_UART_Init+0x90>)
 800152a:	f008 fd4b 	bl	8009fc4 <HAL_UARTEx_DisableFifoMode>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001534:	f7ff fdba 	bl	80010ac <Error_Handler>
  }

}
 8001538:	bf00      	nop
 800153a:	bd80      	pop	{r7, pc}
 800153c:	24045a40 	.word	0x24045a40
 8001540:	40011000 	.word	0x40011000

08001544 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001548:	4b22      	ldr	r3, [pc, #136]	; (80015d4 <MX_USART2_UART_Init+0x90>)
 800154a:	4a23      	ldr	r2, [pc, #140]	; (80015d8 <MX_USART2_UART_Init+0x94>)
 800154c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800154e:	4b21      	ldr	r3, [pc, #132]	; (80015d4 <MX_USART2_UART_Init+0x90>)
 8001550:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001554:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001556:	4b1f      	ldr	r3, [pc, #124]	; (80015d4 <MX_USART2_UART_Init+0x90>)
 8001558:	2200      	movs	r2, #0
 800155a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800155c:	4b1d      	ldr	r3, [pc, #116]	; (80015d4 <MX_USART2_UART_Init+0x90>)
 800155e:	2200      	movs	r2, #0
 8001560:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001562:	4b1c      	ldr	r3, [pc, #112]	; (80015d4 <MX_USART2_UART_Init+0x90>)
 8001564:	2200      	movs	r2, #0
 8001566:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001568:	4b1a      	ldr	r3, [pc, #104]	; (80015d4 <MX_USART2_UART_Init+0x90>)
 800156a:	220c      	movs	r2, #12
 800156c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800156e:	4b19      	ldr	r3, [pc, #100]	; (80015d4 <MX_USART2_UART_Init+0x90>)
 8001570:	2200      	movs	r2, #0
 8001572:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001574:	4b17      	ldr	r3, [pc, #92]	; (80015d4 <MX_USART2_UART_Init+0x90>)
 8001576:	2200      	movs	r2, #0
 8001578:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800157a:	4b16      	ldr	r3, [pc, #88]	; (80015d4 <MX_USART2_UART_Init+0x90>)
 800157c:	2200      	movs	r2, #0
 800157e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001580:	4b14      	ldr	r3, [pc, #80]	; (80015d4 <MX_USART2_UART_Init+0x90>)
 8001582:	2200      	movs	r2, #0
 8001584:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001586:	4b13      	ldr	r3, [pc, #76]	; (80015d4 <MX_USART2_UART_Init+0x90>)
 8001588:	2200      	movs	r2, #0
 800158a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800158c:	4811      	ldr	r0, [pc, #68]	; (80015d4 <MX_USART2_UART_Init+0x90>)
 800158e:	f007 fd19 	bl	8008fc4 <HAL_UART_Init>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001598:	f7ff fd88 	bl	80010ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800159c:	2100      	movs	r1, #0
 800159e:	480d      	ldr	r0, [pc, #52]	; (80015d4 <MX_USART2_UART_Init+0x90>)
 80015a0:	f008 fd49 	bl	800a036 <HAL_UARTEx_SetTxFifoThreshold>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80015aa:	f7ff fd7f 	bl	80010ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015ae:	2100      	movs	r1, #0
 80015b0:	4808      	ldr	r0, [pc, #32]	; (80015d4 <MX_USART2_UART_Init+0x90>)
 80015b2:	f008 fd7e 	bl	800a0b2 <HAL_UARTEx_SetRxFifoThreshold>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80015bc:	f7ff fd76 	bl	80010ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80015c0:	4804      	ldr	r0, [pc, #16]	; (80015d4 <MX_USART2_UART_Init+0x90>)
 80015c2:	f008 fcff 	bl	8009fc4 <HAL_UARTEx_DisableFifoMode>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80015cc:	f7ff fd6e 	bl	80010ac <Error_Handler>
  }

}
 80015d0:	bf00      	nop
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	24045b58 	.word	0x24045b58
 80015d8:	40004400 	.word	0x40004400

080015dc <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80015e0:	4b22      	ldr	r3, [pc, #136]	; (800166c <MX_USART3_UART_Init+0x90>)
 80015e2:	4a23      	ldr	r2, [pc, #140]	; (8001670 <MX_USART3_UART_Init+0x94>)
 80015e4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80015e6:	4b21      	ldr	r3, [pc, #132]	; (800166c <MX_USART3_UART_Init+0x90>)
 80015e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015ec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80015ee:	4b1f      	ldr	r3, [pc, #124]	; (800166c <MX_USART3_UART_Init+0x90>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80015f4:	4b1d      	ldr	r3, [pc, #116]	; (800166c <MX_USART3_UART_Init+0x90>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80015fa:	4b1c      	ldr	r3, [pc, #112]	; (800166c <MX_USART3_UART_Init+0x90>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001600:	4b1a      	ldr	r3, [pc, #104]	; (800166c <MX_USART3_UART_Init+0x90>)
 8001602:	220c      	movs	r2, #12
 8001604:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001606:	4b19      	ldr	r3, [pc, #100]	; (800166c <MX_USART3_UART_Init+0x90>)
 8001608:	2200      	movs	r2, #0
 800160a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800160c:	4b17      	ldr	r3, [pc, #92]	; (800166c <MX_USART3_UART_Init+0x90>)
 800160e:	2200      	movs	r2, #0
 8001610:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001612:	4b16      	ldr	r3, [pc, #88]	; (800166c <MX_USART3_UART_Init+0x90>)
 8001614:	2200      	movs	r2, #0
 8001616:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001618:	4b14      	ldr	r3, [pc, #80]	; (800166c <MX_USART3_UART_Init+0x90>)
 800161a:	2200      	movs	r2, #0
 800161c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800161e:	4b13      	ldr	r3, [pc, #76]	; (800166c <MX_USART3_UART_Init+0x90>)
 8001620:	2200      	movs	r2, #0
 8001622:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001624:	4811      	ldr	r0, [pc, #68]	; (800166c <MX_USART3_UART_Init+0x90>)
 8001626:	f007 fccd 	bl	8008fc4 <HAL_UART_Init>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001630:	f7ff fd3c 	bl	80010ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001634:	2100      	movs	r1, #0
 8001636:	480d      	ldr	r0, [pc, #52]	; (800166c <MX_USART3_UART_Init+0x90>)
 8001638:	f008 fcfd 	bl	800a036 <HAL_UARTEx_SetTxFifoThreshold>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001642:	f7ff fd33 	bl	80010ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001646:	2100      	movs	r1, #0
 8001648:	4808      	ldr	r0, [pc, #32]	; (800166c <MX_USART3_UART_Init+0x90>)
 800164a:	f008 fd32 	bl	800a0b2 <HAL_UARTEx_SetRxFifoThreshold>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001654:	f7ff fd2a 	bl	80010ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001658:	4804      	ldr	r0, [pc, #16]	; (800166c <MX_USART3_UART_Init+0x90>)
 800165a:	f008 fcb3 	bl	8009fc4 <HAL_UARTEx_DisableFifoMode>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001664:	f7ff fd22 	bl	80010ac <Error_Handler>
  }

}
 8001668:	bf00      	nop
 800166a:	bd80      	pop	{r7, pc}
 800166c:	2404575c 	.word	0x2404575c
 8001670:	40004800 	.word	0x40004800

08001674 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0

  huart6.Instance = USART6;
 8001678:	4b22      	ldr	r3, [pc, #136]	; (8001704 <MX_USART6_UART_Init+0x90>)
 800167a:	4a23      	ldr	r2, [pc, #140]	; (8001708 <MX_USART6_UART_Init+0x94>)
 800167c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800167e:	4b21      	ldr	r3, [pc, #132]	; (8001704 <MX_USART6_UART_Init+0x90>)
 8001680:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001684:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001686:	4b1f      	ldr	r3, [pc, #124]	; (8001704 <MX_USART6_UART_Init+0x90>)
 8001688:	2200      	movs	r2, #0
 800168a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800168c:	4b1d      	ldr	r3, [pc, #116]	; (8001704 <MX_USART6_UART_Init+0x90>)
 800168e:	2200      	movs	r2, #0
 8001690:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001692:	4b1c      	ldr	r3, [pc, #112]	; (8001704 <MX_USART6_UART_Init+0x90>)
 8001694:	2200      	movs	r2, #0
 8001696:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001698:	4b1a      	ldr	r3, [pc, #104]	; (8001704 <MX_USART6_UART_Init+0x90>)
 800169a:	220c      	movs	r2, #12
 800169c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800169e:	4b19      	ldr	r3, [pc, #100]	; (8001704 <MX_USART6_UART_Init+0x90>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80016a4:	4b17      	ldr	r3, [pc, #92]	; (8001704 <MX_USART6_UART_Init+0x90>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016aa:	4b16      	ldr	r3, [pc, #88]	; (8001704 <MX_USART6_UART_Init+0x90>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016b0:	4b14      	ldr	r3, [pc, #80]	; (8001704 <MX_USART6_UART_Init+0x90>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016b6:	4b13      	ldr	r3, [pc, #76]	; (8001704 <MX_USART6_UART_Init+0x90>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80016bc:	4811      	ldr	r0, [pc, #68]	; (8001704 <MX_USART6_UART_Init+0x90>)
 80016be:	f007 fc81 	bl	8008fc4 <HAL_UART_Init>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 80016c8:	f7ff fcf0 	bl	80010ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016cc:	2100      	movs	r1, #0
 80016ce:	480d      	ldr	r0, [pc, #52]	; (8001704 <MX_USART6_UART_Init+0x90>)
 80016d0:	f008 fcb1 	bl	800a036 <HAL_UARTEx_SetTxFifoThreshold>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 80016da:	f7ff fce7 	bl	80010ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016de:	2100      	movs	r1, #0
 80016e0:	4808      	ldr	r0, [pc, #32]	; (8001704 <MX_USART6_UART_Init+0x90>)
 80016e2:	f008 fce6 	bl	800a0b2 <HAL_UARTEx_SetRxFifoThreshold>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 80016ec:	f7ff fcde 	bl	80010ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 80016f0:	4804      	ldr	r0, [pc, #16]	; (8001704 <MX_USART6_UART_Init+0x90>)
 80016f2:	f008 fc67 	bl	8009fc4 <HAL_UARTEx_DisableFifoMode>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 80016fc:	f7ff fcd6 	bl	80010ac <Error_Handler>
  }

}
 8001700:	bf00      	nop
 8001702:	bd80      	pop	{r7, pc}
 8001704:	24045acc 	.word	0x24045acc
 8001708:	40011400 	.word	0x40011400

0800170c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b08e      	sub	sp, #56	; 0x38
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001714:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	605a      	str	r2, [r3, #4]
 800171e:	609a      	str	r2, [r3, #8]
 8001720:	60da      	str	r2, [r3, #12]
 8001722:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a90      	ldr	r2, [pc, #576]	; (800196c <HAL_UART_MspInit+0x260>)
 800172a:	4293      	cmp	r3, r2
 800172c:	f040 808c 	bne.w	8001848 <HAL_UART_MspInit+0x13c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001730:	4b8f      	ldr	r3, [pc, #572]	; (8001970 <HAL_UART_MspInit+0x264>)
 8001732:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001736:	4a8e      	ldr	r2, [pc, #568]	; (8001970 <HAL_UART_MspInit+0x264>)
 8001738:	f043 0310 	orr.w	r3, r3, #16
 800173c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001740:	4b8b      	ldr	r3, [pc, #556]	; (8001970 <HAL_UART_MspInit+0x264>)
 8001742:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001746:	f003 0310 	and.w	r3, r3, #16
 800174a:	623b      	str	r3, [r7, #32]
 800174c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800174e:	4b88      	ldr	r3, [pc, #544]	; (8001970 <HAL_UART_MspInit+0x264>)
 8001750:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001754:	4a86      	ldr	r2, [pc, #536]	; (8001970 <HAL_UART_MspInit+0x264>)
 8001756:	f043 0301 	orr.w	r3, r3, #1
 800175a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800175e:	4b84      	ldr	r3, [pc, #528]	; (8001970 <HAL_UART_MspInit+0x264>)
 8001760:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001764:	f003 0301 	and.w	r3, r3, #1
 8001768:	61fb      	str	r3, [r7, #28]
 800176a:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800176c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001770:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001772:	2302      	movs	r3, #2
 8001774:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001776:	2300      	movs	r3, #0
 8001778:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177a:	2300      	movs	r3, #0
 800177c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800177e:	2307      	movs	r3, #7
 8001780:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001782:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001786:	4619      	mov	r1, r3
 8001788:	487a      	ldr	r0, [pc, #488]	; (8001974 <HAL_UART_MspInit+0x268>)
 800178a:	f004 f9d5 	bl	8005b38 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream0;
 800178e:	4b7a      	ldr	r3, [pc, #488]	; (8001978 <HAL_UART_MspInit+0x26c>)
 8001790:	4a7a      	ldr	r2, [pc, #488]	; (800197c <HAL_UART_MspInit+0x270>)
 8001792:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001794:	4b78      	ldr	r3, [pc, #480]	; (8001978 <HAL_UART_MspInit+0x26c>)
 8001796:	2229      	movs	r2, #41	; 0x29
 8001798:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800179a:	4b77      	ldr	r3, [pc, #476]	; (8001978 <HAL_UART_MspInit+0x26c>)
 800179c:	2200      	movs	r2, #0
 800179e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017a0:	4b75      	ldr	r3, [pc, #468]	; (8001978 <HAL_UART_MspInit+0x26c>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80017a6:	4b74      	ldr	r3, [pc, #464]	; (8001978 <HAL_UART_MspInit+0x26c>)
 80017a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017ac:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017ae:	4b72      	ldr	r3, [pc, #456]	; (8001978 <HAL_UART_MspInit+0x26c>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017b4:	4b70      	ldr	r3, [pc, #448]	; (8001978 <HAL_UART_MspInit+0x26c>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80017ba:	4b6f      	ldr	r3, [pc, #444]	; (8001978 <HAL_UART_MspInit+0x26c>)
 80017bc:	2200      	movs	r2, #0
 80017be:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80017c0:	4b6d      	ldr	r3, [pc, #436]	; (8001978 <HAL_UART_MspInit+0x26c>)
 80017c2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80017c6:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017c8:	4b6b      	ldr	r3, [pc, #428]	; (8001978 <HAL_UART_MspInit+0x26c>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80017ce:	486a      	ldr	r0, [pc, #424]	; (8001978 <HAL_UART_MspInit+0x26c>)
 80017d0:	f000 fe5e 	bl	8002490 <HAL_DMA_Init>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <HAL_UART_MspInit+0xd2>
    {
      Error_Handler();
 80017da:	f7ff fc67 	bl	80010ac <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4a65      	ldr	r2, [pc, #404]	; (8001978 <HAL_UART_MspInit+0x26c>)
 80017e2:	679a      	str	r2, [r3, #120]	; 0x78
 80017e4:	4a64      	ldr	r2, [pc, #400]	; (8001978 <HAL_UART_MspInit+0x26c>)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream1;
 80017ea:	4b65      	ldr	r3, [pc, #404]	; (8001980 <HAL_UART_MspInit+0x274>)
 80017ec:	4a65      	ldr	r2, [pc, #404]	; (8001984 <HAL_UART_MspInit+0x278>)
 80017ee:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80017f0:	4b63      	ldr	r3, [pc, #396]	; (8001980 <HAL_UART_MspInit+0x274>)
 80017f2:	222a      	movs	r2, #42	; 0x2a
 80017f4:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017f6:	4b62      	ldr	r3, [pc, #392]	; (8001980 <HAL_UART_MspInit+0x274>)
 80017f8:	2240      	movs	r2, #64	; 0x40
 80017fa:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017fc:	4b60      	ldr	r3, [pc, #384]	; (8001980 <HAL_UART_MspInit+0x274>)
 80017fe:	2200      	movs	r2, #0
 8001800:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001802:	4b5f      	ldr	r3, [pc, #380]	; (8001980 <HAL_UART_MspInit+0x274>)
 8001804:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001808:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800180a:	4b5d      	ldr	r3, [pc, #372]	; (8001980 <HAL_UART_MspInit+0x274>)
 800180c:	2200      	movs	r2, #0
 800180e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001810:	4b5b      	ldr	r3, [pc, #364]	; (8001980 <HAL_UART_MspInit+0x274>)
 8001812:	2200      	movs	r2, #0
 8001814:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001816:	4b5a      	ldr	r3, [pc, #360]	; (8001980 <HAL_UART_MspInit+0x274>)
 8001818:	2200      	movs	r2, #0
 800181a:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800181c:	4b58      	ldr	r3, [pc, #352]	; (8001980 <HAL_UART_MspInit+0x274>)
 800181e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001822:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001824:	4b56      	ldr	r3, [pc, #344]	; (8001980 <HAL_UART_MspInit+0x274>)
 8001826:	2200      	movs	r2, #0
 8001828:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800182a:	4855      	ldr	r0, [pc, #340]	; (8001980 <HAL_UART_MspInit+0x274>)
 800182c:	f000 fe30 	bl	8002490 <HAL_DMA_Init>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8001836:	f7ff fc39 	bl	80010ac <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4a50      	ldr	r2, [pc, #320]	; (8001980 <HAL_UART_MspInit+0x274>)
 800183e:	675a      	str	r2, [r3, #116]	; 0x74
 8001840:	4a4f      	ldr	r2, [pc, #316]	; (8001980 <HAL_UART_MspInit+0x274>)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8001846:	e1aa      	b.n	8001b9e <HAL_UART_MspInit+0x492>
  else if(uartHandle->Instance==USART2)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a4e      	ldr	r2, [pc, #312]	; (8001988 <HAL_UART_MspInit+0x27c>)
 800184e:	4293      	cmp	r3, r2
 8001850:	f040 80a6 	bne.w	80019a0 <HAL_UART_MspInit+0x294>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001854:	4b46      	ldr	r3, [pc, #280]	; (8001970 <HAL_UART_MspInit+0x264>)
 8001856:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800185a:	4a45      	ldr	r2, [pc, #276]	; (8001970 <HAL_UART_MspInit+0x264>)
 800185c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001860:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001864:	4b42      	ldr	r3, [pc, #264]	; (8001970 <HAL_UART_MspInit+0x264>)
 8001866:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800186a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800186e:	61bb      	str	r3, [r7, #24]
 8001870:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001872:	4b3f      	ldr	r3, [pc, #252]	; (8001970 <HAL_UART_MspInit+0x264>)
 8001874:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001878:	4a3d      	ldr	r2, [pc, #244]	; (8001970 <HAL_UART_MspInit+0x264>)
 800187a:	f043 0308 	orr.w	r3, r3, #8
 800187e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001882:	4b3b      	ldr	r3, [pc, #236]	; (8001970 <HAL_UART_MspInit+0x264>)
 8001884:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001888:	f003 0308 	and.w	r3, r3, #8
 800188c:	617b      	str	r3, [r7, #20]
 800188e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001890:	2360      	movs	r3, #96	; 0x60
 8001892:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001894:	2302      	movs	r3, #2
 8001896:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001898:	2300      	movs	r3, #0
 800189a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800189c:	2300      	movs	r3, #0
 800189e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018a0:	2307      	movs	r3, #7
 80018a2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018a8:	4619      	mov	r1, r3
 80018aa:	4838      	ldr	r0, [pc, #224]	; (800198c <HAL_UART_MspInit+0x280>)
 80018ac:	f004 f944 	bl	8005b38 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA2_Stream4;
 80018b0:	4b37      	ldr	r3, [pc, #220]	; (8001990 <HAL_UART_MspInit+0x284>)
 80018b2:	4a38      	ldr	r2, [pc, #224]	; (8001994 <HAL_UART_MspInit+0x288>)
 80018b4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80018b6:	4b36      	ldr	r3, [pc, #216]	; (8001990 <HAL_UART_MspInit+0x284>)
 80018b8:	222b      	movs	r2, #43	; 0x2b
 80018ba:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018bc:	4b34      	ldr	r3, [pc, #208]	; (8001990 <HAL_UART_MspInit+0x284>)
 80018be:	2200      	movs	r2, #0
 80018c0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018c2:	4b33      	ldr	r3, [pc, #204]	; (8001990 <HAL_UART_MspInit+0x284>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80018c8:	4b31      	ldr	r3, [pc, #196]	; (8001990 <HAL_UART_MspInit+0x284>)
 80018ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018ce:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018d0:	4b2f      	ldr	r3, [pc, #188]	; (8001990 <HAL_UART_MspInit+0x284>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018d6:	4b2e      	ldr	r3, [pc, #184]	; (8001990 <HAL_UART_MspInit+0x284>)
 80018d8:	2200      	movs	r2, #0
 80018da:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80018dc:	4b2c      	ldr	r3, [pc, #176]	; (8001990 <HAL_UART_MspInit+0x284>)
 80018de:	2200      	movs	r2, #0
 80018e0:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80018e2:	4b2b      	ldr	r3, [pc, #172]	; (8001990 <HAL_UART_MspInit+0x284>)
 80018e4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80018e8:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018ea:	4b29      	ldr	r3, [pc, #164]	; (8001990 <HAL_UART_MspInit+0x284>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80018f0:	4827      	ldr	r0, [pc, #156]	; (8001990 <HAL_UART_MspInit+0x284>)
 80018f2:	f000 fdcd 	bl	8002490 <HAL_DMA_Init>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <HAL_UART_MspInit+0x1f4>
      Error_Handler();
 80018fc:	f7ff fbd6 	bl	80010ac <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	4a23      	ldr	r2, [pc, #140]	; (8001990 <HAL_UART_MspInit+0x284>)
 8001904:	679a      	str	r2, [r3, #120]	; 0x78
 8001906:	4a22      	ldr	r2, [pc, #136]	; (8001990 <HAL_UART_MspInit+0x284>)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA2_Stream5;
 800190c:	4b22      	ldr	r3, [pc, #136]	; (8001998 <HAL_UART_MspInit+0x28c>)
 800190e:	4a23      	ldr	r2, [pc, #140]	; (800199c <HAL_UART_MspInit+0x290>)
 8001910:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8001912:	4b21      	ldr	r3, [pc, #132]	; (8001998 <HAL_UART_MspInit+0x28c>)
 8001914:	222c      	movs	r2, #44	; 0x2c
 8001916:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001918:	4b1f      	ldr	r3, [pc, #124]	; (8001998 <HAL_UART_MspInit+0x28c>)
 800191a:	2240      	movs	r2, #64	; 0x40
 800191c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800191e:	4b1e      	ldr	r3, [pc, #120]	; (8001998 <HAL_UART_MspInit+0x28c>)
 8001920:	2200      	movs	r2, #0
 8001922:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001924:	4b1c      	ldr	r3, [pc, #112]	; (8001998 <HAL_UART_MspInit+0x28c>)
 8001926:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800192a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800192c:	4b1a      	ldr	r3, [pc, #104]	; (8001998 <HAL_UART_MspInit+0x28c>)
 800192e:	2200      	movs	r2, #0
 8001930:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001932:	4b19      	ldr	r3, [pc, #100]	; (8001998 <HAL_UART_MspInit+0x28c>)
 8001934:	2200      	movs	r2, #0
 8001936:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001938:	4b17      	ldr	r3, [pc, #92]	; (8001998 <HAL_UART_MspInit+0x28c>)
 800193a:	2200      	movs	r2, #0
 800193c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800193e:	4b16      	ldr	r3, [pc, #88]	; (8001998 <HAL_UART_MspInit+0x28c>)
 8001940:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001944:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001946:	4b14      	ldr	r3, [pc, #80]	; (8001998 <HAL_UART_MspInit+0x28c>)
 8001948:	2200      	movs	r2, #0
 800194a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800194c:	4812      	ldr	r0, [pc, #72]	; (8001998 <HAL_UART_MspInit+0x28c>)
 800194e:	f000 fd9f 	bl	8002490 <HAL_DMA_Init>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <HAL_UART_MspInit+0x250>
      Error_Handler();
 8001958:	f7ff fba8 	bl	80010ac <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	4a0e      	ldr	r2, [pc, #56]	; (8001998 <HAL_UART_MspInit+0x28c>)
 8001960:	675a      	str	r2, [r3, #116]	; 0x74
 8001962:	4a0d      	ldr	r2, [pc, #52]	; (8001998 <HAL_UART_MspInit+0x28c>)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001968:	e119      	b.n	8001b9e <HAL_UART_MspInit+0x492>
 800196a:	bf00      	nop
 800196c:	40011000 	.word	0x40011000
 8001970:	58024400 	.word	0x58024400
 8001974:	58020000 	.word	0x58020000
 8001978:	24045950 	.word	0x24045950
 800197c:	40020410 	.word	0x40020410
 8001980:	24045860 	.word	0x24045860
 8001984:	40020428 	.word	0x40020428
 8001988:	40004400 	.word	0x40004400
 800198c:	58020c00 	.word	0x58020c00
 8001990:	240455f4 	.word	0x240455f4
 8001994:	40020470 	.word	0x40020470
 8001998:	240459c8 	.word	0x240459c8
 800199c:	40020488 	.word	0x40020488
  else if(uartHandle->Instance==USART3)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a80      	ldr	r2, [pc, #512]	; (8001ba8 <HAL_UART_MspInit+0x49c>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d16b      	bne.n	8001a82 <HAL_UART_MspInit+0x376>
    __HAL_RCC_USART3_CLK_ENABLE();
 80019aa:	4b80      	ldr	r3, [pc, #512]	; (8001bac <HAL_UART_MspInit+0x4a0>)
 80019ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80019b0:	4a7e      	ldr	r2, [pc, #504]	; (8001bac <HAL_UART_MspInit+0x4a0>)
 80019b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019b6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80019ba:	4b7c      	ldr	r3, [pc, #496]	; (8001bac <HAL_UART_MspInit+0x4a0>)
 80019bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80019c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019c4:	613b      	str	r3, [r7, #16]
 80019c6:	693b      	ldr	r3, [r7, #16]
    hdma_usart3_rx.Instance = DMA2_Stream2;
 80019c8:	4b79      	ldr	r3, [pc, #484]	; (8001bb0 <HAL_UART_MspInit+0x4a4>)
 80019ca:	4a7a      	ldr	r2, [pc, #488]	; (8001bb4 <HAL_UART_MspInit+0x4a8>)
 80019cc:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80019ce:	4b78      	ldr	r3, [pc, #480]	; (8001bb0 <HAL_UART_MspInit+0x4a4>)
 80019d0:	222d      	movs	r2, #45	; 0x2d
 80019d2:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019d4:	4b76      	ldr	r3, [pc, #472]	; (8001bb0 <HAL_UART_MspInit+0x4a4>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019da:	4b75      	ldr	r3, [pc, #468]	; (8001bb0 <HAL_UART_MspInit+0x4a4>)
 80019dc:	2200      	movs	r2, #0
 80019de:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80019e0:	4b73      	ldr	r3, [pc, #460]	; (8001bb0 <HAL_UART_MspInit+0x4a4>)
 80019e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019e6:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019e8:	4b71      	ldr	r3, [pc, #452]	; (8001bb0 <HAL_UART_MspInit+0x4a4>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019ee:	4b70      	ldr	r3, [pc, #448]	; (8001bb0 <HAL_UART_MspInit+0x4a4>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80019f4:	4b6e      	ldr	r3, [pc, #440]	; (8001bb0 <HAL_UART_MspInit+0x4a4>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80019fa:	4b6d      	ldr	r3, [pc, #436]	; (8001bb0 <HAL_UART_MspInit+0x4a4>)
 80019fc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a00:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a02:	4b6b      	ldr	r3, [pc, #428]	; (8001bb0 <HAL_UART_MspInit+0x4a4>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001a08:	4869      	ldr	r0, [pc, #420]	; (8001bb0 <HAL_UART_MspInit+0x4a4>)
 8001a0a:	f000 fd41 	bl	8002490 <HAL_DMA_Init>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <HAL_UART_MspInit+0x30c>
      Error_Handler();
 8001a14:	f7ff fb4a 	bl	80010ac <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	4a65      	ldr	r2, [pc, #404]	; (8001bb0 <HAL_UART_MspInit+0x4a4>)
 8001a1c:	679a      	str	r2, [r3, #120]	; 0x78
 8001a1e:	4a64      	ldr	r2, [pc, #400]	; (8001bb0 <HAL_UART_MspInit+0x4a4>)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA2_Stream3;
 8001a24:	4b64      	ldr	r3, [pc, #400]	; (8001bb8 <HAL_UART_MspInit+0x4ac>)
 8001a26:	4a65      	ldr	r2, [pc, #404]	; (8001bbc <HAL_UART_MspInit+0x4b0>)
 8001a28:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8001a2a:	4b63      	ldr	r3, [pc, #396]	; (8001bb8 <HAL_UART_MspInit+0x4ac>)
 8001a2c:	222e      	movs	r2, #46	; 0x2e
 8001a2e:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a30:	4b61      	ldr	r3, [pc, #388]	; (8001bb8 <HAL_UART_MspInit+0x4ac>)
 8001a32:	2240      	movs	r2, #64	; 0x40
 8001a34:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a36:	4b60      	ldr	r3, [pc, #384]	; (8001bb8 <HAL_UART_MspInit+0x4ac>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a3c:	4b5e      	ldr	r3, [pc, #376]	; (8001bb8 <HAL_UART_MspInit+0x4ac>)
 8001a3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a42:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a44:	4b5c      	ldr	r3, [pc, #368]	; (8001bb8 <HAL_UART_MspInit+0x4ac>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a4a:	4b5b      	ldr	r3, [pc, #364]	; (8001bb8 <HAL_UART_MspInit+0x4ac>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001a50:	4b59      	ldr	r3, [pc, #356]	; (8001bb8 <HAL_UART_MspInit+0x4ac>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001a56:	4b58      	ldr	r3, [pc, #352]	; (8001bb8 <HAL_UART_MspInit+0x4ac>)
 8001a58:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a5c:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a5e:	4b56      	ldr	r3, [pc, #344]	; (8001bb8 <HAL_UART_MspInit+0x4ac>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001a64:	4854      	ldr	r0, [pc, #336]	; (8001bb8 <HAL_UART_MspInit+0x4ac>)
 8001a66:	f000 fd13 	bl	8002490 <HAL_DMA_Init>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <HAL_UART_MspInit+0x368>
      Error_Handler();
 8001a70:	f7ff fb1c 	bl	80010ac <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	4a50      	ldr	r2, [pc, #320]	; (8001bb8 <HAL_UART_MspInit+0x4ac>)
 8001a78:	675a      	str	r2, [r3, #116]	; 0x74
 8001a7a:	4a4f      	ldr	r2, [pc, #316]	; (8001bb8 <HAL_UART_MspInit+0x4ac>)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001a80:	e08d      	b.n	8001b9e <HAL_UART_MspInit+0x492>
  else if(uartHandle->Instance==USART6)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a4e      	ldr	r2, [pc, #312]	; (8001bc0 <HAL_UART_MspInit+0x4b4>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	f040 8088 	bne.w	8001b9e <HAL_UART_MspInit+0x492>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001a8e:	4b47      	ldr	r3, [pc, #284]	; (8001bac <HAL_UART_MspInit+0x4a0>)
 8001a90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a94:	4a45      	ldr	r2, [pc, #276]	; (8001bac <HAL_UART_MspInit+0x4a0>)
 8001a96:	f043 0320 	orr.w	r3, r3, #32
 8001a9a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001a9e:	4b43      	ldr	r3, [pc, #268]	; (8001bac <HAL_UART_MspInit+0x4a0>)
 8001aa0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001aa4:	f003 0320 	and.w	r3, r3, #32
 8001aa8:	60fb      	str	r3, [r7, #12]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aac:	4b3f      	ldr	r3, [pc, #252]	; (8001bac <HAL_UART_MspInit+0x4a0>)
 8001aae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ab2:	4a3e      	ldr	r2, [pc, #248]	; (8001bac <HAL_UART_MspInit+0x4a0>)
 8001ab4:	f043 0304 	orr.w	r3, r3, #4
 8001ab8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001abc:	4b3b      	ldr	r3, [pc, #236]	; (8001bac <HAL_UART_MspInit+0x4a0>)
 8001abe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ac2:	f003 0304 	and.w	r3, r3, #4
 8001ac6:	60bb      	str	r3, [r7, #8]
 8001ac8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001aca:	23c0      	movs	r3, #192	; 0xc0
 8001acc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ace:	2302      	movs	r3, #2
 8001ad0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8001ada:	2307      	movs	r3, #7
 8001adc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ade:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	4837      	ldr	r0, [pc, #220]	; (8001bc4 <HAL_UART_MspInit+0x4b8>)
 8001ae6:	f004 f827 	bl	8005b38 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream6;
 8001aea:	4b37      	ldr	r3, [pc, #220]	; (8001bc8 <HAL_UART_MspInit+0x4bc>)
 8001aec:	4a37      	ldr	r2, [pc, #220]	; (8001bcc <HAL_UART_MspInit+0x4c0>)
 8001aee:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Request = DMA_REQUEST_USART6_RX;
 8001af0:	4b35      	ldr	r3, [pc, #212]	; (8001bc8 <HAL_UART_MspInit+0x4bc>)
 8001af2:	2247      	movs	r2, #71	; 0x47
 8001af4:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001af6:	4b34      	ldr	r3, [pc, #208]	; (8001bc8 <HAL_UART_MspInit+0x4bc>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001afc:	4b32      	ldr	r3, [pc, #200]	; (8001bc8 <HAL_UART_MspInit+0x4bc>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b02:	4b31      	ldr	r3, [pc, #196]	; (8001bc8 <HAL_UART_MspInit+0x4bc>)
 8001b04:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b08:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b0a:	4b2f      	ldr	r3, [pc, #188]	; (8001bc8 <HAL_UART_MspInit+0x4bc>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b10:	4b2d      	ldr	r3, [pc, #180]	; (8001bc8 <HAL_UART_MspInit+0x4bc>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8001b16:	4b2c      	ldr	r3, [pc, #176]	; (8001bc8 <HAL_UART_MspInit+0x4bc>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b1c:	4b2a      	ldr	r3, [pc, #168]	; (8001bc8 <HAL_UART_MspInit+0x4bc>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b22:	4b29      	ldr	r3, [pc, #164]	; (8001bc8 <HAL_UART_MspInit+0x4bc>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8001b28:	4827      	ldr	r0, [pc, #156]	; (8001bc8 <HAL_UART_MspInit+0x4bc>)
 8001b2a:	f000 fcb1 	bl	8002490 <HAL_DMA_Init>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <HAL_UART_MspInit+0x42c>
      Error_Handler();
 8001b34:	f7ff faba 	bl	80010ac <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	4a23      	ldr	r2, [pc, #140]	; (8001bc8 <HAL_UART_MspInit+0x4bc>)
 8001b3c:	679a      	str	r2, [r3, #120]	; 0x78
 8001b3e:	4a22      	ldr	r2, [pc, #136]	; (8001bc8 <HAL_UART_MspInit+0x4bc>)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream7;
 8001b44:	4b22      	ldr	r3, [pc, #136]	; (8001bd0 <HAL_UART_MspInit+0x4c4>)
 8001b46:	4a23      	ldr	r2, [pc, #140]	; (8001bd4 <HAL_UART_MspInit+0x4c8>)
 8001b48:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Request = DMA_REQUEST_USART6_TX;
 8001b4a:	4b21      	ldr	r3, [pc, #132]	; (8001bd0 <HAL_UART_MspInit+0x4c4>)
 8001b4c:	2248      	movs	r2, #72	; 0x48
 8001b4e:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b50:	4b1f      	ldr	r3, [pc, #124]	; (8001bd0 <HAL_UART_MspInit+0x4c4>)
 8001b52:	2240      	movs	r2, #64	; 0x40
 8001b54:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b56:	4b1e      	ldr	r3, [pc, #120]	; (8001bd0 <HAL_UART_MspInit+0x4c4>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b5c:	4b1c      	ldr	r3, [pc, #112]	; (8001bd0 <HAL_UART_MspInit+0x4c4>)
 8001b5e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b62:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b64:	4b1a      	ldr	r3, [pc, #104]	; (8001bd0 <HAL_UART_MspInit+0x4c4>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b6a:	4b19      	ldr	r3, [pc, #100]	; (8001bd0 <HAL_UART_MspInit+0x4c4>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8001b70:	4b17      	ldr	r3, [pc, #92]	; (8001bd0 <HAL_UART_MspInit+0x4c4>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001b76:	4b16      	ldr	r3, [pc, #88]	; (8001bd0 <HAL_UART_MspInit+0x4c4>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b7c:	4b14      	ldr	r3, [pc, #80]	; (8001bd0 <HAL_UART_MspInit+0x4c4>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8001b82:	4813      	ldr	r0, [pc, #76]	; (8001bd0 <HAL_UART_MspInit+0x4c4>)
 8001b84:	f000 fc84 	bl	8002490 <HAL_DMA_Init>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <HAL_UART_MspInit+0x486>
      Error_Handler();
 8001b8e:	f7ff fa8d 	bl	80010ac <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a0e      	ldr	r2, [pc, #56]	; (8001bd0 <HAL_UART_MspInit+0x4c4>)
 8001b96:	675a      	str	r2, [r3, #116]	; 0x74
 8001b98:	4a0d      	ldr	r2, [pc, #52]	; (8001bd0 <HAL_UART_MspInit+0x4c4>)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001b9e:	bf00      	nop
 8001ba0:	3738      	adds	r7, #56	; 0x38
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	40004800 	.word	0x40004800
 8001bac:	58024400 	.word	0x58024400
 8001bb0:	240456e4 	.word	0x240456e4
 8001bb4:	40020440 	.word	0x40020440
 8001bb8:	240457e8 	.word	0x240457e8
 8001bbc:	40020458 	.word	0x40020458
 8001bc0:	40011400 	.word	0x40011400
 8001bc4:	58020800 	.word	0x58020800
 8001bc8:	2404566c 	.word	0x2404566c
 8001bcc:	400204a0 	.word	0x400204a0
 8001bd0:	240458d8 	.word	0x240458d8
 8001bd4:	400204b8 	.word	0x400204b8

08001bd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   sp, =_estack      /* set stack pointer */
 8001bd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c10 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001bdc:	f7fe fd62 	bl	80006a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001be0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001be2:	e003      	b.n	8001bec <LoopCopyDataInit>

08001be4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001be4:	4b0b      	ldr	r3, [pc, #44]	; (8001c14 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8001be6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001be8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001bea:	3104      	adds	r1, #4

08001bec <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001bec:	480a      	ldr	r0, [pc, #40]	; (8001c18 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8001bee:	4b0b      	ldr	r3, [pc, #44]	; (8001c1c <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8001bf0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001bf2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001bf4:	d3f6      	bcc.n	8001be4 <CopyDataInit>
  ldr  r2, =_sbss
 8001bf6:	4a0a      	ldr	r2, [pc, #40]	; (8001c20 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8001bf8:	e002      	b.n	8001c00 <LoopFillZerobss>

08001bfa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001bfa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001bfc:	f842 3b04 	str.w	r3, [r2], #4

08001c00 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001c00:	4b08      	ldr	r3, [pc, #32]	; (8001c24 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8001c02:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001c04:	d3f9      	bcc.n	8001bfa <FillZerobss>
   
/* Call static constructors */
    bl __libc_init_array
 8001c06:	f01e fceb 	bl	80205e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c0a:	f7ff f8a5 	bl	8000d58 <main>
  bx  lr    
 8001c0e:	4770      	bx	lr
   ldr   sp, =_estack      /* set stack pointer */
 8001c10:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8001c14:	080278b4 	.word	0x080278b4
  ldr  r0, =_sdata
 8001c18:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8001c1c:	24000210 	.word	0x24000210
  ldr  r2, =_sbss
 8001c20:	24000210 	.word	0x24000210
  ldr  r3, = _ebss
 8001c24:	24048ea0 	.word	0x24048ea0

08001c28 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c28:	e7fe      	b.n	8001c28 <ADC3_IRQHandler>

08001c2a <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	b083      	sub	sp, #12
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
 8001c32:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d00b      	beq.n	8001c52 <LAN8742_RegisterBusIO+0x28>
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	68db      	ldr	r3, [r3, #12]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d007      	beq.n	8001c52 <LAN8742_RegisterBusIO+0x28>
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d003      	beq.n	8001c52 <LAN8742_RegisterBusIO+0x28>
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	691b      	ldr	r3, [r3, #16]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d102      	bne.n	8001c58 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001c52:	f04f 33ff 	mov.w	r3, #4294967295
 8001c56:	e014      	b.n	8001c82 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	685a      	ldr	r2, [r3, #4]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	68da      	ldr	r2, [r3, #12]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	689a      	ldr	r2, [r3, #8]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	691a      	ldr	r2, [r3, #16]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8001c80:	2300      	movs	r3, #0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr

08001c8e <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	b086      	sub	sp, #24
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8001c96:	2300      	movs	r3, #0
 8001c98:	60fb      	str	r3, [r7, #12]
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	60bb      	str	r3, [r7, #8]
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d17c      	bne.n	8001da8 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d002      	beq.n	8001cbc <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2220      	movs	r2, #32
 8001cc0:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	617b      	str	r3, [r7, #20]
 8001cc6:	e01c      	b.n	8001d02 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	695b      	ldr	r3, [r3, #20]
 8001ccc:	f107 0208 	add.w	r2, r7, #8
 8001cd0:	2112      	movs	r1, #18
 8001cd2:	6978      	ldr	r0, [r7, #20]
 8001cd4:	4798      	blx	r3
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	da03      	bge.n	8001ce4 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8001cdc:	f06f 0304 	mvn.w	r3, #4
 8001ce0:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8001ce2:	e00b      	b.n	8001cfc <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	f003 031f 	and.w	r3, r3, #31
 8001cea:	697a      	ldr	r2, [r7, #20]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d105      	bne.n	8001cfc <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	697a      	ldr	r2, [r7, #20]
 8001cf4:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	613b      	str	r3, [r7, #16]
         break;
 8001cfa:	e005      	b.n	8001d08 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	3301      	adds	r3, #1
 8001d00:	617b      	str	r3, [r7, #20]
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	2b1f      	cmp	r3, #31
 8001d06:	d9df      	bls.n	8001cc8 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	2b1f      	cmp	r3, #31
 8001d0e:	d902      	bls.n	8001d16 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001d10:	f06f 0302 	mvn.w	r3, #2
 8001d14:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d145      	bne.n	8001da8 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	691b      	ldr	r3, [r3, #16]
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	6810      	ldr	r0, [r2, #0]
 8001d24:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001d28:	2100      	movs	r1, #0
 8001d2a:	4798      	blx	r3
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	db37      	blt.n	8001da2 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	695b      	ldr	r3, [r3, #20]
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	6810      	ldr	r0, [r2, #0]
 8001d3a:	f107 0208 	add.w	r2, r7, #8
 8001d3e:	2100      	movs	r1, #0
 8001d40:	4798      	blx	r3
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	db28      	blt.n	8001d9a <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	699b      	ldr	r3, [r3, #24]
 8001d4c:	4798      	blx	r3
 8001d4e:	4603      	mov	r3, r0
 8001d50:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001d52:	e01c      	b.n	8001d8e <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	699b      	ldr	r3, [r3, #24]
 8001d58:	4798      	blx	r3
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001d66:	d80e      	bhi.n	8001d86 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	695b      	ldr	r3, [r3, #20]
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	6810      	ldr	r0, [r2, #0]
 8001d70:	f107 0208 	add.w	r2, r7, #8
 8001d74:	2100      	movs	r1, #0
 8001d76:	4798      	blx	r3
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	da07      	bge.n	8001d8e <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8001d7e:	f06f 0304 	mvn.w	r3, #4
 8001d82:	613b      	str	r3, [r7, #16]
                 break;
 8001d84:	e010      	b.n	8001da8 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8001d86:	f06f 0301 	mvn.w	r3, #1
 8001d8a:	613b      	str	r3, [r7, #16]
               break;
 8001d8c:	e00c      	b.n	8001da8 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d1dd      	bne.n	8001d54 <LAN8742_Init+0xc6>
 8001d98:	e006      	b.n	8001da8 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8001d9a:	f06f 0304 	mvn.w	r3, #4
 8001d9e:	613b      	str	r3, [r7, #16]
 8001da0:	e002      	b.n	8001da8 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8001da2:	f06f 0303 	mvn.w	r3, #3
 8001da6:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d112      	bne.n	8001dd4 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	699b      	ldr	r3, [r3, #24]
 8001db2:	4798      	blx	r3
 8001db4:	4603      	mov	r3, r0
 8001db6:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001db8:	bf00      	nop
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	699b      	ldr	r3, [r3, #24]
 8001dbe:	4798      	blx	r3
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001dcc:	d9f5      	bls.n	8001dba <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8001dd4:	693b      	ldr	r3, [r7, #16]
 }
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3718      	adds	r7, #24
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001dde:	b580      	push	{r7, lr}
 8001de0:	b084      	sub	sp, #16
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001de6:	2300      	movs	r3, #0
 8001de8:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	695b      	ldr	r3, [r3, #20]
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	6810      	ldr	r0, [r2, #0]
 8001df2:	f107 020c 	add.w	r2, r7, #12
 8001df6:	2101      	movs	r1, #1
 8001df8:	4798      	blx	r3
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	da02      	bge.n	8001e06 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001e00:	f06f 0304 	mvn.w	r3, #4
 8001e04:	e06e      	b.n	8001ee4 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	695b      	ldr	r3, [r3, #20]
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	6810      	ldr	r0, [r2, #0]
 8001e0e:	f107 020c 	add.w	r2, r7, #12
 8001e12:	2101      	movs	r1, #1
 8001e14:	4798      	blx	r3
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	da02      	bge.n	8001e22 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001e1c:	f06f 0304 	mvn.w	r3, #4
 8001e20:	e060      	b.n	8001ee4 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	f003 0304 	and.w	r3, r3, #4
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d101      	bne.n	8001e30 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e059      	b.n	8001ee4 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	695b      	ldr	r3, [r3, #20]
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	6810      	ldr	r0, [r2, #0]
 8001e38:	f107 020c 	add.w	r2, r7, #12
 8001e3c:	2100      	movs	r1, #0
 8001e3e:	4798      	blx	r3
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	da02      	bge.n	8001e4c <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001e46:	f06f 0304 	mvn.w	r3, #4
 8001e4a:	e04b      	b.n	8001ee4 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d11b      	bne.n	8001e8e <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d006      	beq.n	8001e6e <LAN8742_GetLinkState+0x90>
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d001      	beq.n	8001e6e <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	e03a      	b.n	8001ee4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d001      	beq.n	8001e7c <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	e033      	b.n	8001ee4 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001e86:	2304      	movs	r3, #4
 8001e88:	e02c      	b.n	8001ee4 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001e8a:	2305      	movs	r3, #5
 8001e8c:	e02a      	b.n	8001ee4 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	695b      	ldr	r3, [r3, #20]
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	6810      	ldr	r0, [r2, #0]
 8001e96:	f107 020c 	add.w	r2, r7, #12
 8001e9a:	211f      	movs	r1, #31
 8001e9c:	4798      	blx	r3
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	da02      	bge.n	8001eaa <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001ea4:	f06f 0304 	mvn.w	r3, #4
 8001ea8:	e01c      	b.n	8001ee4 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d101      	bne.n	8001eb8 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001eb4:	2306      	movs	r3, #6
 8001eb6:	e015      	b.n	8001ee4 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	f003 031c 	and.w	r3, r3, #28
 8001ebe:	2b18      	cmp	r3, #24
 8001ec0:	d101      	bne.n	8001ec6 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	e00e      	b.n	8001ee4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	f003 031c 	and.w	r3, r3, #28
 8001ecc:	2b08      	cmp	r3, #8
 8001ece:	d101      	bne.n	8001ed4 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	e007      	b.n	8001ee4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	f003 031c 	and.w	r3, r3, #28
 8001eda:	2b14      	cmp	r3, #20
 8001edc:	d101      	bne.n	8001ee2 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001ede:	2304      	movs	r3, #4
 8001ee0:	e000      	b.n	8001ee4 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001ee2:	2305      	movs	r3, #5
    }				
  }
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3710      	adds	r7, #16
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}

08001eec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ef2:	2003      	movs	r0, #3
 8001ef4:	f000 f923 	bl	800213e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001ef8:	f004 ffb0 	bl	8006e5c <HAL_RCC_GetSysClockFreq>
 8001efc:	4601      	mov	r1, r0
 8001efe:	4b15      	ldr	r3, [pc, #84]	; (8001f54 <HAL_Init+0x68>)
 8001f00:	699b      	ldr	r3, [r3, #24]
 8001f02:	0a1b      	lsrs	r3, r3, #8
 8001f04:	f003 030f 	and.w	r3, r3, #15
 8001f08:	4a13      	ldr	r2, [pc, #76]	; (8001f58 <HAL_Init+0x6c>)
 8001f0a:	5cd3      	ldrb	r3, [r2, r3]
 8001f0c:	f003 031f 	and.w	r3, r3, #31
 8001f10:	fa21 f303 	lsr.w	r3, r1, r3
 8001f14:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001f16:	4b0f      	ldr	r3, [pc, #60]	; (8001f54 <HAL_Init+0x68>)
 8001f18:	699b      	ldr	r3, [r3, #24]
 8001f1a:	f003 030f 	and.w	r3, r3, #15
 8001f1e:	4a0e      	ldr	r2, [pc, #56]	; (8001f58 <HAL_Init+0x6c>)
 8001f20:	5cd3      	ldrb	r3, [r2, r3]
 8001f22:	f003 031f 	and.w	r3, r3, #31
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	fa22 f303 	lsr.w	r3, r2, r3
 8001f2c:	4a0b      	ldr	r2, [pc, #44]	; (8001f5c <HAL_Init+0x70>)
 8001f2e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001f30:	4a0b      	ldr	r2, [pc, #44]	; (8001f60 <HAL_Init+0x74>)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f36:	2000      	movs	r0, #0
 8001f38:	f7ff f91c 	bl	8001174 <HAL_InitTick>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e002      	b.n	8001f4c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001f46:	f7ff f8f7 	bl	8001138 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f4a:	2300      	movs	r3, #0
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3708      	adds	r7, #8
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	58024400 	.word	0x58024400
 8001f58:	08026eb0 	.word	0x08026eb0
 8001f5c:	24000004 	.word	0x24000004
 8001f60:	24000000 	.word	0x24000000

08001f64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f68:	4b06      	ldr	r3, [pc, #24]	; (8001f84 <HAL_IncTick+0x20>)
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	4b06      	ldr	r3, [pc, #24]	; (8001f88 <HAL_IncTick+0x24>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4413      	add	r3, r2
 8001f74:	4a04      	ldr	r2, [pc, #16]	; (8001f88 <HAL_IncTick+0x24>)
 8001f76:	6013      	str	r3, [r2, #0]
}
 8001f78:	bf00      	nop
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	2400000c 	.word	0x2400000c
 8001f88:	24045be4 	.word	0x24045be4

08001f8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f90:	4b03      	ldr	r3, [pc, #12]	; (8001fa0 <HAL_GetTick+0x14>)
 8001f92:	681b      	ldr	r3, [r3, #0]
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	24045be4 	.word	0x24045be4

08001fa4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001fa8:	4b03      	ldr	r3, [pc, #12]	; (8001fb8 <HAL_GetREVID+0x14>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	0c1b      	lsrs	r3, r3, #16
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr
 8001fb8:	5c001000 	.word	0x5c001000

08001fbc <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001fc4:	4b06      	ldr	r3, [pc, #24]	; (8001fe0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001fcc:	4904      	ldr	r1, [pc, #16]	; (8001fe0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	604b      	str	r3, [r1, #4]
}
 8001fd4:	bf00      	nop
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr
 8001fe0:	58000400 	.word	0x58000400

08001fe4 <__NVIC_SetPriorityGrouping>:
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b085      	sub	sp, #20
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f003 0307 	and.w	r3, r3, #7
 8001ff2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ff4:	4b0b      	ldr	r3, [pc, #44]	; (8002024 <__NVIC_SetPriorityGrouping+0x40>)
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ffa:	68ba      	ldr	r2, [r7, #8]
 8001ffc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002000:	4013      	ands	r3, r2
 8002002:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800200c:	4b06      	ldr	r3, [pc, #24]	; (8002028 <__NVIC_SetPriorityGrouping+0x44>)
 800200e:	4313      	orrs	r3, r2
 8002010:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002012:	4a04      	ldr	r2, [pc, #16]	; (8002024 <__NVIC_SetPriorityGrouping+0x40>)
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	60d3      	str	r3, [r2, #12]
}
 8002018:	bf00      	nop
 800201a:	3714      	adds	r7, #20
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr
 8002024:	e000ed00 	.word	0xe000ed00
 8002028:	05fa0000 	.word	0x05fa0000

0800202c <__NVIC_GetPriorityGrouping>:
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002030:	4b04      	ldr	r3, [pc, #16]	; (8002044 <__NVIC_GetPriorityGrouping+0x18>)
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	0a1b      	lsrs	r3, r3, #8
 8002036:	f003 0307 	and.w	r3, r3, #7
}
 800203a:	4618      	mov	r0, r3
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr
 8002044:	e000ed00 	.word	0xe000ed00

08002048 <__NVIC_EnableIRQ>:
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	4603      	mov	r3, r0
 8002050:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002052:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002056:	2b00      	cmp	r3, #0
 8002058:	db0b      	blt.n	8002072 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800205a:	88fb      	ldrh	r3, [r7, #6]
 800205c:	f003 021f 	and.w	r2, r3, #31
 8002060:	4907      	ldr	r1, [pc, #28]	; (8002080 <__NVIC_EnableIRQ+0x38>)
 8002062:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002066:	095b      	lsrs	r3, r3, #5
 8002068:	2001      	movs	r0, #1
 800206a:	fa00 f202 	lsl.w	r2, r0, r2
 800206e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002072:	bf00      	nop
 8002074:	370c      	adds	r7, #12
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	e000e100 	.word	0xe000e100

08002084 <__NVIC_SetPriority>:
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	4603      	mov	r3, r0
 800208c:	6039      	str	r1, [r7, #0]
 800208e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002090:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002094:	2b00      	cmp	r3, #0
 8002096:	db0a      	blt.n	80020ae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	b2da      	uxtb	r2, r3
 800209c:	490c      	ldr	r1, [pc, #48]	; (80020d0 <__NVIC_SetPriority+0x4c>)
 800209e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020a2:	0112      	lsls	r2, r2, #4
 80020a4:	b2d2      	uxtb	r2, r2
 80020a6:	440b      	add	r3, r1
 80020a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80020ac:	e00a      	b.n	80020c4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	b2da      	uxtb	r2, r3
 80020b2:	4908      	ldr	r1, [pc, #32]	; (80020d4 <__NVIC_SetPriority+0x50>)
 80020b4:	88fb      	ldrh	r3, [r7, #6]
 80020b6:	f003 030f 	and.w	r3, r3, #15
 80020ba:	3b04      	subs	r3, #4
 80020bc:	0112      	lsls	r2, r2, #4
 80020be:	b2d2      	uxtb	r2, r2
 80020c0:	440b      	add	r3, r1
 80020c2:	761a      	strb	r2, [r3, #24]
}
 80020c4:	bf00      	nop
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr
 80020d0:	e000e100 	.word	0xe000e100
 80020d4:	e000ed00 	.word	0xe000ed00

080020d8 <NVIC_EncodePriority>:
{
 80020d8:	b480      	push	{r7}
 80020da:	b089      	sub	sp, #36	; 0x24
 80020dc:	af00      	add	r7, sp, #0
 80020de:	60f8      	str	r0, [r7, #12]
 80020e0:	60b9      	str	r1, [r7, #8]
 80020e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	f003 0307 	and.w	r3, r3, #7
 80020ea:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	f1c3 0307 	rsb	r3, r3, #7
 80020f2:	2b04      	cmp	r3, #4
 80020f4:	bf28      	it	cs
 80020f6:	2304      	movcs	r3, #4
 80020f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	3304      	adds	r3, #4
 80020fe:	2b06      	cmp	r3, #6
 8002100:	d902      	bls.n	8002108 <NVIC_EncodePriority+0x30>
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	3b03      	subs	r3, #3
 8002106:	e000      	b.n	800210a <NVIC_EncodePriority+0x32>
 8002108:	2300      	movs	r3, #0
 800210a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800210c:	f04f 32ff 	mov.w	r2, #4294967295
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	fa02 f303 	lsl.w	r3, r2, r3
 8002116:	43da      	mvns	r2, r3
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	401a      	ands	r2, r3
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002120:	f04f 31ff 	mov.w	r1, #4294967295
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	fa01 f303 	lsl.w	r3, r1, r3
 800212a:	43d9      	mvns	r1, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002130:	4313      	orrs	r3, r2
}
 8002132:	4618      	mov	r0, r3
 8002134:	3724      	adds	r7, #36	; 0x24
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr

0800213e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800213e:	b580      	push	{r7, lr}
 8002140:	b082      	sub	sp, #8
 8002142:	af00      	add	r7, sp, #0
 8002144:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f7ff ff4c 	bl	8001fe4 <__NVIC_SetPriorityGrouping>
}
 800214c:	bf00      	nop
 800214e:	3708      	adds	r7, #8
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}

08002154 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b086      	sub	sp, #24
 8002158:	af00      	add	r7, sp, #0
 800215a:	4603      	mov	r3, r0
 800215c:	60b9      	str	r1, [r7, #8]
 800215e:	607a      	str	r2, [r7, #4]
 8002160:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002162:	f7ff ff63 	bl	800202c <__NVIC_GetPriorityGrouping>
 8002166:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	68b9      	ldr	r1, [r7, #8]
 800216c:	6978      	ldr	r0, [r7, #20]
 800216e:	f7ff ffb3 	bl	80020d8 <NVIC_EncodePriority>
 8002172:	4602      	mov	r2, r0
 8002174:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002178:	4611      	mov	r1, r2
 800217a:	4618      	mov	r0, r3
 800217c:	f7ff ff82 	bl	8002084 <__NVIC_SetPriority>
}
 8002180:	bf00      	nop
 8002182:	3718      	adds	r7, #24
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}

08002188 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	4603      	mov	r3, r0
 8002190:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002192:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002196:	4618      	mov	r0, r3
 8002198:	f7ff ff56 	bl	8002048 <__NVIC_EnableIRQ>
}
 800219c:	bf00      	nop
 800219e:	3708      	adds	r7, #8
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}

080021a4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80021a8:	f3bf 8f5f 	dmb	sy
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80021ac:	4b06      	ldr	r3, [pc, #24]	; (80021c8 <HAL_MPU_Disable+0x24>)
 80021ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b0:	4a05      	ldr	r2, [pc, #20]	; (80021c8 <HAL_MPU_Disable+0x24>)
 80021b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021b6:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80021b8:	4b04      	ldr	r3, [pc, #16]	; (80021cc <HAL_MPU_Disable+0x28>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	605a      	str	r2, [r3, #4]
}
 80021be:	bf00      	nop
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr
 80021c8:	e000ed00 	.word	0xe000ed00
 80021cc:	e000ed90 	.word	0xe000ed90

080021d0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80021d8:	4a0a      	ldr	r2, [pc, #40]	; (8002204 <HAL_MPU_Enable+0x34>)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f043 0301 	orr.w	r3, r3, #1
 80021e0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80021e2:	4b09      	ldr	r3, [pc, #36]	; (8002208 <HAL_MPU_Enable+0x38>)
 80021e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e6:	4a08      	ldr	r2, [pc, #32]	; (8002208 <HAL_MPU_Enable+0x38>)
 80021e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021ec:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80021ee:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80021f2:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80021f6:	bf00      	nop
 80021f8:	370c      	adds	r7, #12
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	e000ed90 	.word	0xe000ed90
 8002208:	e000ed00 	.word	0xe000ed00

0800220c <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	785a      	ldrb	r2, [r3, #1]
 8002218:	4b1d      	ldr	r3, [pc, #116]	; (8002290 <HAL_MPU_ConfigRegion+0x84>)
 800221a:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d029      	beq.n	8002278 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8002224:	4a1a      	ldr	r2, [pc, #104]	; (8002290 <HAL_MPU_ConfigRegion+0x84>)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	7b1b      	ldrb	r3, [r3, #12]
 8002230:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	7adb      	ldrb	r3, [r3, #11]
 8002236:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002238:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	7a9b      	ldrb	r3, [r3, #10]
 800223e:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002240:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	7b5b      	ldrb	r3, [r3, #13]
 8002246:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002248:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	7b9b      	ldrb	r3, [r3, #14]
 800224e:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002250:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	7bdb      	ldrb	r3, [r3, #15]
 8002256:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002258:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	7a5b      	ldrb	r3, [r3, #9]
 800225e:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002260:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	7a1b      	ldrb	r3, [r3, #8]
 8002266:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002268:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	7812      	ldrb	r2, [r2, #0]
 800226e:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002270:	4a07      	ldr	r2, [pc, #28]	; (8002290 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002272:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002274:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8002276:	e005      	b.n	8002284 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8002278:	4b05      	ldr	r3, [pc, #20]	; (8002290 <HAL_MPU_ConfigRegion+0x84>)
 800227a:	2200      	movs	r2, #0
 800227c:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 800227e:	4b04      	ldr	r3, [pc, #16]	; (8002290 <HAL_MPU_ConfigRegion+0x84>)
 8002280:	2200      	movs	r2, #0
 8002282:	611a      	str	r2, [r3, #16]
}
 8002284:	bf00      	nop
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr
 8002290:	e000ed90 	.word	0xe000ed90

08002294 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8002298:	4b07      	ldr	r3, [pc, #28]	; (80022b8 <HAL_GetCurrentCPUID+0x24>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	091b      	lsrs	r3, r3, #4
 800229e:	f003 030f 	and.w	r3, r3, #15
 80022a2:	2b07      	cmp	r3, #7
 80022a4:	d101      	bne.n	80022aa <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 80022a6:	2303      	movs	r3, #3
 80022a8:	e000      	b.n	80022ac <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 80022aa:	2301      	movs	r3, #1
  }
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	e000ed00 	.word	0xe000ed00

080022bc <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d101      	bne.n	80022ce <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e054      	b.n	8002378 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	7f5b      	ldrb	r3, [r3, #29]
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d105      	bne.n	80022e4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2200      	movs	r2, #0
 80022dc:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f7fe fa9c 	bl	800081c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2202      	movs	r2, #2
 80022e8:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	791b      	ldrb	r3, [r3, #4]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d10c      	bne.n	800230c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a22      	ldr	r2, [pc, #136]	; (8002380 <HAL_CRC_Init+0xc4>)
 80022f8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	689a      	ldr	r2, [r3, #8]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f022 0218 	bic.w	r2, r2, #24
 8002308:	609a      	str	r2, [r3, #8]
 800230a:	e00c      	b.n	8002326 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6899      	ldr	r1, [r3, #8]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	461a      	mov	r2, r3
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f000 f834 	bl	8002384 <HAL_CRCEx_Polynomial_Set>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d001      	beq.n	8002326 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e028      	b.n	8002378 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	795b      	ldrb	r3, [r3, #5]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d105      	bne.n	800233a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f04f 32ff 	mov.w	r2, #4294967295
 8002336:	611a      	str	r2, [r3, #16]
 8002338:	e004      	b.n	8002344 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	6912      	ldr	r2, [r2, #16]
 8002342:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	695a      	ldr	r2, [r3, #20]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	430a      	orrs	r2, r1
 8002358:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	699a      	ldr	r2, [r3, #24]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	430a      	orrs	r2, r1
 800236e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2201      	movs	r2, #1
 8002374:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002376:	2300      	movs	r3, #0
}
 8002378:	4618      	mov	r0, r3
 800237a:	3708      	adds	r7, #8
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	04c11db7 	.word	0x04c11db7

08002384 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002384:	b480      	push	{r7}
 8002386:	b087      	sub	sp, #28
 8002388:	af00      	add	r7, sp, #0
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002390:	2300      	movs	r3, #0
 8002392:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002394:	231f      	movs	r3, #31
 8002396:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002398:	bf00      	nop
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	1e5a      	subs	r2, r3, #1
 800239e:	613a      	str	r2, [r7, #16]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d009      	beq.n	80023b8 <HAL_CRCEx_Polynomial_Set+0x34>
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	f003 031f 	and.w	r3, r3, #31
 80023aa:	68ba      	ldr	r2, [r7, #8]
 80023ac:	fa22 f303 	lsr.w	r3, r2, r3
 80023b0:	f003 0301 	and.w	r3, r3, #1
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d0f0      	beq.n	800239a <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2b18      	cmp	r3, #24
 80023bc:	d846      	bhi.n	800244c <HAL_CRCEx_Polynomial_Set+0xc8>
 80023be:	a201      	add	r2, pc, #4	; (adr r2, 80023c4 <HAL_CRCEx_Polynomial_Set+0x40>)
 80023c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023c4:	08002453 	.word	0x08002453
 80023c8:	0800244d 	.word	0x0800244d
 80023cc:	0800244d 	.word	0x0800244d
 80023d0:	0800244d 	.word	0x0800244d
 80023d4:	0800244d 	.word	0x0800244d
 80023d8:	0800244d 	.word	0x0800244d
 80023dc:	0800244d 	.word	0x0800244d
 80023e0:	0800244d 	.word	0x0800244d
 80023e4:	08002441 	.word	0x08002441
 80023e8:	0800244d 	.word	0x0800244d
 80023ec:	0800244d 	.word	0x0800244d
 80023f0:	0800244d 	.word	0x0800244d
 80023f4:	0800244d 	.word	0x0800244d
 80023f8:	0800244d 	.word	0x0800244d
 80023fc:	0800244d 	.word	0x0800244d
 8002400:	0800244d 	.word	0x0800244d
 8002404:	08002435 	.word	0x08002435
 8002408:	0800244d 	.word	0x0800244d
 800240c:	0800244d 	.word	0x0800244d
 8002410:	0800244d 	.word	0x0800244d
 8002414:	0800244d 	.word	0x0800244d
 8002418:	0800244d 	.word	0x0800244d
 800241c:	0800244d 	.word	0x0800244d
 8002420:	0800244d 	.word	0x0800244d
 8002424:	08002429 	.word	0x08002429
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	2b06      	cmp	r3, #6
 800242c:	d913      	bls.n	8002456 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002432:	e010      	b.n	8002456 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	2b07      	cmp	r3, #7
 8002438:	d90f      	bls.n	800245a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800243e:	e00c      	b.n	800245a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	2b0f      	cmp	r3, #15
 8002444:	d90b      	bls.n	800245e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800244a:	e008      	b.n	800245e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	75fb      	strb	r3, [r7, #23]
      break;
 8002450:	e006      	b.n	8002460 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002452:	bf00      	nop
 8002454:	e004      	b.n	8002460 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002456:	bf00      	nop
 8002458:	e002      	b.n	8002460 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800245a:	bf00      	nop
 800245c:	e000      	b.n	8002460 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800245e:	bf00      	nop
  }
  if (status == HAL_OK)
 8002460:	7dfb      	ldrb	r3, [r7, #23]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d10d      	bne.n	8002482 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	68ba      	ldr	r2, [r7, #8]
 800246c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f023 0118 	bic.w	r1, r3, #24
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	430a      	orrs	r2, r1
 8002480:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8002482:	7dfb      	ldrb	r3, [r7, #23]
}
 8002484:	4618      	mov	r0, r3
 8002486:	371c      	adds	r7, #28
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b086      	sub	sp, #24
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002498:	f7ff fd78 	bl	8001f8c <HAL_GetTick>
 800249c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d101      	bne.n	80024a8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e316      	b.n	8002ad6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a66      	ldr	r2, [pc, #408]	; (8002648 <HAL_DMA_Init+0x1b8>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d04a      	beq.n	8002548 <HAL_DMA_Init+0xb8>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a65      	ldr	r2, [pc, #404]	; (800264c <HAL_DMA_Init+0x1bc>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d045      	beq.n	8002548 <HAL_DMA_Init+0xb8>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a63      	ldr	r2, [pc, #396]	; (8002650 <HAL_DMA_Init+0x1c0>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d040      	beq.n	8002548 <HAL_DMA_Init+0xb8>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a62      	ldr	r2, [pc, #392]	; (8002654 <HAL_DMA_Init+0x1c4>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d03b      	beq.n	8002548 <HAL_DMA_Init+0xb8>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a60      	ldr	r2, [pc, #384]	; (8002658 <HAL_DMA_Init+0x1c8>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d036      	beq.n	8002548 <HAL_DMA_Init+0xb8>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a5f      	ldr	r2, [pc, #380]	; (800265c <HAL_DMA_Init+0x1cc>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d031      	beq.n	8002548 <HAL_DMA_Init+0xb8>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a5d      	ldr	r2, [pc, #372]	; (8002660 <HAL_DMA_Init+0x1d0>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d02c      	beq.n	8002548 <HAL_DMA_Init+0xb8>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a5c      	ldr	r2, [pc, #368]	; (8002664 <HAL_DMA_Init+0x1d4>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d027      	beq.n	8002548 <HAL_DMA_Init+0xb8>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a5a      	ldr	r2, [pc, #360]	; (8002668 <HAL_DMA_Init+0x1d8>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d022      	beq.n	8002548 <HAL_DMA_Init+0xb8>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a59      	ldr	r2, [pc, #356]	; (800266c <HAL_DMA_Init+0x1dc>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d01d      	beq.n	8002548 <HAL_DMA_Init+0xb8>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a57      	ldr	r2, [pc, #348]	; (8002670 <HAL_DMA_Init+0x1e0>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d018      	beq.n	8002548 <HAL_DMA_Init+0xb8>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a56      	ldr	r2, [pc, #344]	; (8002674 <HAL_DMA_Init+0x1e4>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d013      	beq.n	8002548 <HAL_DMA_Init+0xb8>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a54      	ldr	r2, [pc, #336]	; (8002678 <HAL_DMA_Init+0x1e8>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d00e      	beq.n	8002548 <HAL_DMA_Init+0xb8>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a53      	ldr	r2, [pc, #332]	; (800267c <HAL_DMA_Init+0x1ec>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d009      	beq.n	8002548 <HAL_DMA_Init+0xb8>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a51      	ldr	r2, [pc, #324]	; (8002680 <HAL_DMA_Init+0x1f0>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d004      	beq.n	8002548 <HAL_DMA_Init+0xb8>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a50      	ldr	r2, [pc, #320]	; (8002684 <HAL_DMA_Init+0x1f4>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d101      	bne.n	800254c <HAL_DMA_Init+0xbc>
 8002548:	2301      	movs	r3, #1
 800254a:	e000      	b.n	800254e <HAL_DMA_Init+0xbe>
 800254c:	2300      	movs	r3, #0
 800254e:	2b00      	cmp	r3, #0
 8002550:	f000 813b 	beq.w	80027ca <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2202      	movs	r2, #2
 8002560:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a37      	ldr	r2, [pc, #220]	; (8002648 <HAL_DMA_Init+0x1b8>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d04a      	beq.n	8002604 <HAL_DMA_Init+0x174>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a36      	ldr	r2, [pc, #216]	; (800264c <HAL_DMA_Init+0x1bc>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d045      	beq.n	8002604 <HAL_DMA_Init+0x174>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a34      	ldr	r2, [pc, #208]	; (8002650 <HAL_DMA_Init+0x1c0>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d040      	beq.n	8002604 <HAL_DMA_Init+0x174>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a33      	ldr	r2, [pc, #204]	; (8002654 <HAL_DMA_Init+0x1c4>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d03b      	beq.n	8002604 <HAL_DMA_Init+0x174>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a31      	ldr	r2, [pc, #196]	; (8002658 <HAL_DMA_Init+0x1c8>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d036      	beq.n	8002604 <HAL_DMA_Init+0x174>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a30      	ldr	r2, [pc, #192]	; (800265c <HAL_DMA_Init+0x1cc>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d031      	beq.n	8002604 <HAL_DMA_Init+0x174>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a2e      	ldr	r2, [pc, #184]	; (8002660 <HAL_DMA_Init+0x1d0>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d02c      	beq.n	8002604 <HAL_DMA_Init+0x174>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a2d      	ldr	r2, [pc, #180]	; (8002664 <HAL_DMA_Init+0x1d4>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d027      	beq.n	8002604 <HAL_DMA_Init+0x174>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a2b      	ldr	r2, [pc, #172]	; (8002668 <HAL_DMA_Init+0x1d8>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d022      	beq.n	8002604 <HAL_DMA_Init+0x174>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a2a      	ldr	r2, [pc, #168]	; (800266c <HAL_DMA_Init+0x1dc>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d01d      	beq.n	8002604 <HAL_DMA_Init+0x174>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a28      	ldr	r2, [pc, #160]	; (8002670 <HAL_DMA_Init+0x1e0>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d018      	beq.n	8002604 <HAL_DMA_Init+0x174>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a27      	ldr	r2, [pc, #156]	; (8002674 <HAL_DMA_Init+0x1e4>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d013      	beq.n	8002604 <HAL_DMA_Init+0x174>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a25      	ldr	r2, [pc, #148]	; (8002678 <HAL_DMA_Init+0x1e8>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d00e      	beq.n	8002604 <HAL_DMA_Init+0x174>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a24      	ldr	r2, [pc, #144]	; (800267c <HAL_DMA_Init+0x1ec>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d009      	beq.n	8002604 <HAL_DMA_Init+0x174>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a22      	ldr	r2, [pc, #136]	; (8002680 <HAL_DMA_Init+0x1f0>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d004      	beq.n	8002604 <HAL_DMA_Init+0x174>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a21      	ldr	r2, [pc, #132]	; (8002684 <HAL_DMA_Init+0x1f4>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d108      	bne.n	8002616 <HAL_DMA_Init+0x186>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f022 0201 	bic.w	r2, r2, #1
 8002612:	601a      	str	r2, [r3, #0]
 8002614:	e007      	b.n	8002626 <HAL_DMA_Init+0x196>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f022 0201 	bic.w	r2, r2, #1
 8002624:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002626:	e02f      	b.n	8002688 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002628:	f7ff fcb0 	bl	8001f8c <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	2b05      	cmp	r3, #5
 8002634:	d928      	bls.n	8002688 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2220      	movs	r2, #32
 800263a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2203      	movs	r2, #3
 8002640:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e246      	b.n	8002ad6 <HAL_DMA_Init+0x646>
 8002648:	40020010 	.word	0x40020010
 800264c:	40020028 	.word	0x40020028
 8002650:	40020040 	.word	0x40020040
 8002654:	40020058 	.word	0x40020058
 8002658:	40020070 	.word	0x40020070
 800265c:	40020088 	.word	0x40020088
 8002660:	400200a0 	.word	0x400200a0
 8002664:	400200b8 	.word	0x400200b8
 8002668:	40020410 	.word	0x40020410
 800266c:	40020428 	.word	0x40020428
 8002670:	40020440 	.word	0x40020440
 8002674:	40020458 	.word	0x40020458
 8002678:	40020470 	.word	0x40020470
 800267c:	40020488 	.word	0x40020488
 8002680:	400204a0 	.word	0x400204a0
 8002684:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0301 	and.w	r3, r3, #1
 8002692:	2b00      	cmp	r3, #0
 8002694:	d1c8      	bne.n	8002628 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800269e:	697a      	ldr	r2, [r7, #20]
 80026a0:	4b83      	ldr	r3, [pc, #524]	; (80028b0 <HAL_DMA_Init+0x420>)
 80026a2:	4013      	ands	r3, r2
 80026a4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80026ae:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	691b      	ldr	r3, [r3, #16]
 80026b4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026ba:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	699b      	ldr	r3, [r3, #24]
 80026c0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026c6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6a1b      	ldr	r3, [r3, #32]
 80026cc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80026ce:	697a      	ldr	r2, [r7, #20]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d8:	2b04      	cmp	r3, #4
 80026da:	d107      	bne.n	80026ec <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e4:	4313      	orrs	r3, r2
 80026e6:	697a      	ldr	r2, [r7, #20]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80026ec:	4b71      	ldr	r3, [pc, #452]	; (80028b4 <HAL_DMA_Init+0x424>)
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	4b71      	ldr	r3, [pc, #452]	; (80028b8 <HAL_DMA_Init+0x428>)
 80026f2:	4013      	ands	r3, r2
 80026f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026f8:	d328      	bcc.n	800274c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	2b28      	cmp	r3, #40	; 0x28
 8002700:	d903      	bls.n	800270a <HAL_DMA_Init+0x27a>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	2b2e      	cmp	r3, #46	; 0x2e
 8002708:	d917      	bls.n	800273a <HAL_DMA_Init+0x2aa>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	2b3e      	cmp	r3, #62	; 0x3e
 8002710:	d903      	bls.n	800271a <HAL_DMA_Init+0x28a>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	2b42      	cmp	r3, #66	; 0x42
 8002718:	d90f      	bls.n	800273a <HAL_DMA_Init+0x2aa>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	2b46      	cmp	r3, #70	; 0x46
 8002720:	d903      	bls.n	800272a <HAL_DMA_Init+0x29a>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	2b48      	cmp	r3, #72	; 0x48
 8002728:	d907      	bls.n	800273a <HAL_DMA_Init+0x2aa>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	2b4e      	cmp	r3, #78	; 0x4e
 8002730:	d905      	bls.n	800273e <HAL_DMA_Init+0x2ae>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	2b52      	cmp	r3, #82	; 0x52
 8002738:	d801      	bhi.n	800273e <HAL_DMA_Init+0x2ae>
 800273a:	2301      	movs	r3, #1
 800273c:	e000      	b.n	8002740 <HAL_DMA_Init+0x2b0>
 800273e:	2300      	movs	r3, #0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d003      	beq.n	800274c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800274a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	697a      	ldr	r2, [r7, #20]
 8002752:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	695b      	ldr	r3, [r3, #20]
 800275a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	f023 0307 	bic.w	r3, r3, #7
 8002762:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002768:	697a      	ldr	r2, [r7, #20]
 800276a:	4313      	orrs	r3, r2
 800276c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002772:	2b04      	cmp	r3, #4
 8002774:	d117      	bne.n	80027a6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800277a:	697a      	ldr	r2, [r7, #20]
 800277c:	4313      	orrs	r3, r2
 800277e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002784:	2b00      	cmp	r3, #0
 8002786:	d00e      	beq.n	80027a6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f001 f9b9 	bl	8003b00 <DMA_CheckFifoParam>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d008      	beq.n	80027a6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2240      	movs	r2, #64	; 0x40
 8002798:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2201      	movs	r2, #1
 800279e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e197      	b.n	8002ad6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	697a      	ldr	r2, [r7, #20]
 80027ac:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f001 f8f4 	bl	800399c <DMA_CalcBaseAndBitshift>
 80027b4:	4603      	mov	r3, r0
 80027b6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027bc:	f003 031f 	and.w	r3, r3, #31
 80027c0:	223f      	movs	r2, #63	; 0x3f
 80027c2:	409a      	lsls	r2, r3
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	609a      	str	r2, [r3, #8]
 80027c8:	e0cd      	b.n	8002966 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a3b      	ldr	r2, [pc, #236]	; (80028bc <HAL_DMA_Init+0x42c>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d022      	beq.n	800281a <HAL_DMA_Init+0x38a>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a39      	ldr	r2, [pc, #228]	; (80028c0 <HAL_DMA_Init+0x430>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d01d      	beq.n	800281a <HAL_DMA_Init+0x38a>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a38      	ldr	r2, [pc, #224]	; (80028c4 <HAL_DMA_Init+0x434>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d018      	beq.n	800281a <HAL_DMA_Init+0x38a>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a36      	ldr	r2, [pc, #216]	; (80028c8 <HAL_DMA_Init+0x438>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d013      	beq.n	800281a <HAL_DMA_Init+0x38a>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a35      	ldr	r2, [pc, #212]	; (80028cc <HAL_DMA_Init+0x43c>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d00e      	beq.n	800281a <HAL_DMA_Init+0x38a>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a33      	ldr	r2, [pc, #204]	; (80028d0 <HAL_DMA_Init+0x440>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d009      	beq.n	800281a <HAL_DMA_Init+0x38a>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a32      	ldr	r2, [pc, #200]	; (80028d4 <HAL_DMA_Init+0x444>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d004      	beq.n	800281a <HAL_DMA_Init+0x38a>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a30      	ldr	r2, [pc, #192]	; (80028d8 <HAL_DMA_Init+0x448>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d101      	bne.n	800281e <HAL_DMA_Init+0x38e>
 800281a:	2301      	movs	r3, #1
 800281c:	e000      	b.n	8002820 <HAL_DMA_Init+0x390>
 800281e:	2300      	movs	r3, #0
 8002820:	2b00      	cmp	r3, #0
 8002822:	f000 8097 	beq.w	8002954 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a24      	ldr	r2, [pc, #144]	; (80028bc <HAL_DMA_Init+0x42c>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d021      	beq.n	8002874 <HAL_DMA_Init+0x3e4>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a22      	ldr	r2, [pc, #136]	; (80028c0 <HAL_DMA_Init+0x430>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d01c      	beq.n	8002874 <HAL_DMA_Init+0x3e4>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a21      	ldr	r2, [pc, #132]	; (80028c4 <HAL_DMA_Init+0x434>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d017      	beq.n	8002874 <HAL_DMA_Init+0x3e4>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a1f      	ldr	r2, [pc, #124]	; (80028c8 <HAL_DMA_Init+0x438>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d012      	beq.n	8002874 <HAL_DMA_Init+0x3e4>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a1e      	ldr	r2, [pc, #120]	; (80028cc <HAL_DMA_Init+0x43c>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d00d      	beq.n	8002874 <HAL_DMA_Init+0x3e4>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a1c      	ldr	r2, [pc, #112]	; (80028d0 <HAL_DMA_Init+0x440>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d008      	beq.n	8002874 <HAL_DMA_Init+0x3e4>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a1b      	ldr	r2, [pc, #108]	; (80028d4 <HAL_DMA_Init+0x444>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d003      	beq.n	8002874 <HAL_DMA_Init+0x3e4>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a19      	ldr	r2, [pc, #100]	; (80028d8 <HAL_DMA_Init+0x448>)
 8002872:	4293      	cmp	r3, r2
 8002874:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2202      	movs	r2, #2
 8002882:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800288e:	697a      	ldr	r2, [r7, #20]
 8002890:	4b12      	ldr	r3, [pc, #72]	; (80028dc <HAL_DMA_Init+0x44c>)
 8002892:	4013      	ands	r3, r2
 8002894:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	2b40      	cmp	r3, #64	; 0x40
 800289c:	d020      	beq.n	80028e0 <HAL_DMA_Init+0x450>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	2b80      	cmp	r3, #128	; 0x80
 80028a4:	d102      	bne.n	80028ac <HAL_DMA_Init+0x41c>
 80028a6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80028aa:	e01a      	b.n	80028e2 <HAL_DMA_Init+0x452>
 80028ac:	2300      	movs	r3, #0
 80028ae:	e018      	b.n	80028e2 <HAL_DMA_Init+0x452>
 80028b0:	fe10803f 	.word	0xfe10803f
 80028b4:	5c001000 	.word	0x5c001000
 80028b8:	ffff0000 	.word	0xffff0000
 80028bc:	58025408 	.word	0x58025408
 80028c0:	5802541c 	.word	0x5802541c
 80028c4:	58025430 	.word	0x58025430
 80028c8:	58025444 	.word	0x58025444
 80028cc:	58025458 	.word	0x58025458
 80028d0:	5802546c 	.word	0x5802546c
 80028d4:	58025480 	.word	0x58025480
 80028d8:	58025494 	.word	0x58025494
 80028dc:	fffe000f 	.word	0xfffe000f
 80028e0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	68d2      	ldr	r2, [r2, #12]
 80028e6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80028e8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80028f0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	695b      	ldr	r3, [r3, #20]
 80028f6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80028f8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	699b      	ldr	r3, [r3, #24]
 80028fe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002900:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	69db      	ldr	r3, [r3, #28]
 8002906:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002908:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6a1b      	ldr	r3, [r3, #32]
 800290e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002910:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002912:	697a      	ldr	r2, [r7, #20]
 8002914:	4313      	orrs	r3, r2
 8002916:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	697a      	ldr	r2, [r7, #20]
 800291e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	461a      	mov	r2, r3
 8002926:	4b6e      	ldr	r3, [pc, #440]	; (8002ae0 <HAL_DMA_Init+0x650>)
 8002928:	4413      	add	r3, r2
 800292a:	4a6e      	ldr	r2, [pc, #440]	; (8002ae4 <HAL_DMA_Init+0x654>)
 800292c:	fba2 2303 	umull	r2, r3, r2, r3
 8002930:	091b      	lsrs	r3, r3, #4
 8002932:	009a      	lsls	r2, r3, #2
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f001 f82f 	bl	800399c <DMA_CalcBaseAndBitshift>
 800293e:	4603      	mov	r3, r0
 8002940:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002946:	f003 031f 	and.w	r3, r3, #31
 800294a:	2201      	movs	r2, #1
 800294c:	409a      	lsls	r2, r3
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	605a      	str	r2, [r3, #4]
 8002952:	e008      	b.n	8002966 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2240      	movs	r2, #64	; 0x40
 8002958:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2203      	movs	r2, #3
 800295e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e0b7      	b.n	8002ad6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a5f      	ldr	r2, [pc, #380]	; (8002ae8 <HAL_DMA_Init+0x658>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d072      	beq.n	8002a56 <HAL_DMA_Init+0x5c6>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a5d      	ldr	r2, [pc, #372]	; (8002aec <HAL_DMA_Init+0x65c>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d06d      	beq.n	8002a56 <HAL_DMA_Init+0x5c6>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a5c      	ldr	r2, [pc, #368]	; (8002af0 <HAL_DMA_Init+0x660>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d068      	beq.n	8002a56 <HAL_DMA_Init+0x5c6>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a5a      	ldr	r2, [pc, #360]	; (8002af4 <HAL_DMA_Init+0x664>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d063      	beq.n	8002a56 <HAL_DMA_Init+0x5c6>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a59      	ldr	r2, [pc, #356]	; (8002af8 <HAL_DMA_Init+0x668>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d05e      	beq.n	8002a56 <HAL_DMA_Init+0x5c6>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a57      	ldr	r2, [pc, #348]	; (8002afc <HAL_DMA_Init+0x66c>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d059      	beq.n	8002a56 <HAL_DMA_Init+0x5c6>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a56      	ldr	r2, [pc, #344]	; (8002b00 <HAL_DMA_Init+0x670>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d054      	beq.n	8002a56 <HAL_DMA_Init+0x5c6>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a54      	ldr	r2, [pc, #336]	; (8002b04 <HAL_DMA_Init+0x674>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d04f      	beq.n	8002a56 <HAL_DMA_Init+0x5c6>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a53      	ldr	r2, [pc, #332]	; (8002b08 <HAL_DMA_Init+0x678>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d04a      	beq.n	8002a56 <HAL_DMA_Init+0x5c6>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a51      	ldr	r2, [pc, #324]	; (8002b0c <HAL_DMA_Init+0x67c>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d045      	beq.n	8002a56 <HAL_DMA_Init+0x5c6>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a50      	ldr	r2, [pc, #320]	; (8002b10 <HAL_DMA_Init+0x680>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d040      	beq.n	8002a56 <HAL_DMA_Init+0x5c6>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a4e      	ldr	r2, [pc, #312]	; (8002b14 <HAL_DMA_Init+0x684>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d03b      	beq.n	8002a56 <HAL_DMA_Init+0x5c6>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a4d      	ldr	r2, [pc, #308]	; (8002b18 <HAL_DMA_Init+0x688>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d036      	beq.n	8002a56 <HAL_DMA_Init+0x5c6>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a4b      	ldr	r2, [pc, #300]	; (8002b1c <HAL_DMA_Init+0x68c>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d031      	beq.n	8002a56 <HAL_DMA_Init+0x5c6>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a4a      	ldr	r2, [pc, #296]	; (8002b20 <HAL_DMA_Init+0x690>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d02c      	beq.n	8002a56 <HAL_DMA_Init+0x5c6>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a48      	ldr	r2, [pc, #288]	; (8002b24 <HAL_DMA_Init+0x694>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d027      	beq.n	8002a56 <HAL_DMA_Init+0x5c6>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a47      	ldr	r2, [pc, #284]	; (8002b28 <HAL_DMA_Init+0x698>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d022      	beq.n	8002a56 <HAL_DMA_Init+0x5c6>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a45      	ldr	r2, [pc, #276]	; (8002b2c <HAL_DMA_Init+0x69c>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d01d      	beq.n	8002a56 <HAL_DMA_Init+0x5c6>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a44      	ldr	r2, [pc, #272]	; (8002b30 <HAL_DMA_Init+0x6a0>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d018      	beq.n	8002a56 <HAL_DMA_Init+0x5c6>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a42      	ldr	r2, [pc, #264]	; (8002b34 <HAL_DMA_Init+0x6a4>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d013      	beq.n	8002a56 <HAL_DMA_Init+0x5c6>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a41      	ldr	r2, [pc, #260]	; (8002b38 <HAL_DMA_Init+0x6a8>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d00e      	beq.n	8002a56 <HAL_DMA_Init+0x5c6>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a3f      	ldr	r2, [pc, #252]	; (8002b3c <HAL_DMA_Init+0x6ac>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d009      	beq.n	8002a56 <HAL_DMA_Init+0x5c6>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a3e      	ldr	r2, [pc, #248]	; (8002b40 <HAL_DMA_Init+0x6b0>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d004      	beq.n	8002a56 <HAL_DMA_Init+0x5c6>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a3c      	ldr	r2, [pc, #240]	; (8002b44 <HAL_DMA_Init+0x6b4>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d101      	bne.n	8002a5a <HAL_DMA_Init+0x5ca>
 8002a56:	2301      	movs	r3, #1
 8002a58:	e000      	b.n	8002a5c <HAL_DMA_Init+0x5cc>
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d032      	beq.n	8002ac6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f001 f8c9 	bl	8003bf8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	2b80      	cmp	r3, #128	; 0x80
 8002a6c:	d102      	bne.n	8002a74 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685a      	ldr	r2, [r3, #4]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a7c:	b2d2      	uxtb	r2, r2
 8002a7e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002a88:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d010      	beq.n	8002ab4 <HAL_DMA_Init+0x624>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	2b08      	cmp	r3, #8
 8002a98:	d80c      	bhi.n	8002ab4 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f001 f946 	bl	8003d2c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002ab0:	605a      	str	r2, [r3, #4]
 8002ab2:	e008      	b.n	8002ac6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002ad4:	2300      	movs	r3, #0
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3718      	adds	r7, #24
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	a7fdabf8 	.word	0xa7fdabf8
 8002ae4:	cccccccd 	.word	0xcccccccd
 8002ae8:	40020010 	.word	0x40020010
 8002aec:	40020028 	.word	0x40020028
 8002af0:	40020040 	.word	0x40020040
 8002af4:	40020058 	.word	0x40020058
 8002af8:	40020070 	.word	0x40020070
 8002afc:	40020088 	.word	0x40020088
 8002b00:	400200a0 	.word	0x400200a0
 8002b04:	400200b8 	.word	0x400200b8
 8002b08:	40020410 	.word	0x40020410
 8002b0c:	40020428 	.word	0x40020428
 8002b10:	40020440 	.word	0x40020440
 8002b14:	40020458 	.word	0x40020458
 8002b18:	40020470 	.word	0x40020470
 8002b1c:	40020488 	.word	0x40020488
 8002b20:	400204a0 	.word	0x400204a0
 8002b24:	400204b8 	.word	0x400204b8
 8002b28:	58025408 	.word	0x58025408
 8002b2c:	5802541c 	.word	0x5802541c
 8002b30:	58025430 	.word	0x58025430
 8002b34:	58025444 	.word	0x58025444
 8002b38:	58025458 	.word	0x58025458
 8002b3c:	5802546c 	.word	0x5802546c
 8002b40:	58025480 	.word	0x58025480
 8002b44:	58025494 	.word	0x58025494

08002b48 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b08a      	sub	sp, #40	; 0x28
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002b50:	2300      	movs	r3, #0
 8002b52:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002b54:	4b67      	ldr	r3, [pc, #412]	; (8002cf4 <HAL_DMA_IRQHandler+0x1ac>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a67      	ldr	r2, [pc, #412]	; (8002cf8 <HAL_DMA_IRQHandler+0x1b0>)
 8002b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b5e:	0a9b      	lsrs	r3, r3, #10
 8002b60:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b66:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b6c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002b6e:	6a3b      	ldr	r3, [r7, #32]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a5f      	ldr	r2, [pc, #380]	; (8002cfc <HAL_DMA_IRQHandler+0x1b4>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d04a      	beq.n	8002c1a <HAL_DMA_IRQHandler+0xd2>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a5d      	ldr	r2, [pc, #372]	; (8002d00 <HAL_DMA_IRQHandler+0x1b8>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d045      	beq.n	8002c1a <HAL_DMA_IRQHandler+0xd2>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a5c      	ldr	r2, [pc, #368]	; (8002d04 <HAL_DMA_IRQHandler+0x1bc>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d040      	beq.n	8002c1a <HAL_DMA_IRQHandler+0xd2>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a5a      	ldr	r2, [pc, #360]	; (8002d08 <HAL_DMA_IRQHandler+0x1c0>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d03b      	beq.n	8002c1a <HAL_DMA_IRQHandler+0xd2>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a59      	ldr	r2, [pc, #356]	; (8002d0c <HAL_DMA_IRQHandler+0x1c4>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d036      	beq.n	8002c1a <HAL_DMA_IRQHandler+0xd2>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a57      	ldr	r2, [pc, #348]	; (8002d10 <HAL_DMA_IRQHandler+0x1c8>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d031      	beq.n	8002c1a <HAL_DMA_IRQHandler+0xd2>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a56      	ldr	r2, [pc, #344]	; (8002d14 <HAL_DMA_IRQHandler+0x1cc>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d02c      	beq.n	8002c1a <HAL_DMA_IRQHandler+0xd2>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a54      	ldr	r2, [pc, #336]	; (8002d18 <HAL_DMA_IRQHandler+0x1d0>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d027      	beq.n	8002c1a <HAL_DMA_IRQHandler+0xd2>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a53      	ldr	r2, [pc, #332]	; (8002d1c <HAL_DMA_IRQHandler+0x1d4>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d022      	beq.n	8002c1a <HAL_DMA_IRQHandler+0xd2>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a51      	ldr	r2, [pc, #324]	; (8002d20 <HAL_DMA_IRQHandler+0x1d8>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d01d      	beq.n	8002c1a <HAL_DMA_IRQHandler+0xd2>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a50      	ldr	r2, [pc, #320]	; (8002d24 <HAL_DMA_IRQHandler+0x1dc>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d018      	beq.n	8002c1a <HAL_DMA_IRQHandler+0xd2>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a4e      	ldr	r2, [pc, #312]	; (8002d28 <HAL_DMA_IRQHandler+0x1e0>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d013      	beq.n	8002c1a <HAL_DMA_IRQHandler+0xd2>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a4d      	ldr	r2, [pc, #308]	; (8002d2c <HAL_DMA_IRQHandler+0x1e4>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d00e      	beq.n	8002c1a <HAL_DMA_IRQHandler+0xd2>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a4b      	ldr	r2, [pc, #300]	; (8002d30 <HAL_DMA_IRQHandler+0x1e8>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d009      	beq.n	8002c1a <HAL_DMA_IRQHandler+0xd2>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a4a      	ldr	r2, [pc, #296]	; (8002d34 <HAL_DMA_IRQHandler+0x1ec>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d004      	beq.n	8002c1a <HAL_DMA_IRQHandler+0xd2>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a48      	ldr	r2, [pc, #288]	; (8002d38 <HAL_DMA_IRQHandler+0x1f0>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d101      	bne.n	8002c1e <HAL_DMA_IRQHandler+0xd6>
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e000      	b.n	8002c20 <HAL_DMA_IRQHandler+0xd8>
 8002c1e:	2300      	movs	r3, #0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	f000 842b 	beq.w	800347c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c2a:	f003 031f 	and.w	r3, r3, #31
 8002c2e:	2208      	movs	r2, #8
 8002c30:	409a      	lsls	r2, r3
 8002c32:	69bb      	ldr	r3, [r7, #24]
 8002c34:	4013      	ands	r3, r2
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	f000 80a2 	beq.w	8002d80 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a2e      	ldr	r2, [pc, #184]	; (8002cfc <HAL_DMA_IRQHandler+0x1b4>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d04a      	beq.n	8002cdc <HAL_DMA_IRQHandler+0x194>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a2d      	ldr	r2, [pc, #180]	; (8002d00 <HAL_DMA_IRQHandler+0x1b8>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d045      	beq.n	8002cdc <HAL_DMA_IRQHandler+0x194>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a2b      	ldr	r2, [pc, #172]	; (8002d04 <HAL_DMA_IRQHandler+0x1bc>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d040      	beq.n	8002cdc <HAL_DMA_IRQHandler+0x194>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a2a      	ldr	r2, [pc, #168]	; (8002d08 <HAL_DMA_IRQHandler+0x1c0>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d03b      	beq.n	8002cdc <HAL_DMA_IRQHandler+0x194>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a28      	ldr	r2, [pc, #160]	; (8002d0c <HAL_DMA_IRQHandler+0x1c4>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d036      	beq.n	8002cdc <HAL_DMA_IRQHandler+0x194>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a27      	ldr	r2, [pc, #156]	; (8002d10 <HAL_DMA_IRQHandler+0x1c8>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d031      	beq.n	8002cdc <HAL_DMA_IRQHandler+0x194>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a25      	ldr	r2, [pc, #148]	; (8002d14 <HAL_DMA_IRQHandler+0x1cc>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d02c      	beq.n	8002cdc <HAL_DMA_IRQHandler+0x194>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a24      	ldr	r2, [pc, #144]	; (8002d18 <HAL_DMA_IRQHandler+0x1d0>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d027      	beq.n	8002cdc <HAL_DMA_IRQHandler+0x194>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a22      	ldr	r2, [pc, #136]	; (8002d1c <HAL_DMA_IRQHandler+0x1d4>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d022      	beq.n	8002cdc <HAL_DMA_IRQHandler+0x194>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a21      	ldr	r2, [pc, #132]	; (8002d20 <HAL_DMA_IRQHandler+0x1d8>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d01d      	beq.n	8002cdc <HAL_DMA_IRQHandler+0x194>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a1f      	ldr	r2, [pc, #124]	; (8002d24 <HAL_DMA_IRQHandler+0x1dc>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d018      	beq.n	8002cdc <HAL_DMA_IRQHandler+0x194>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a1e      	ldr	r2, [pc, #120]	; (8002d28 <HAL_DMA_IRQHandler+0x1e0>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d013      	beq.n	8002cdc <HAL_DMA_IRQHandler+0x194>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a1c      	ldr	r2, [pc, #112]	; (8002d2c <HAL_DMA_IRQHandler+0x1e4>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d00e      	beq.n	8002cdc <HAL_DMA_IRQHandler+0x194>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a1b      	ldr	r2, [pc, #108]	; (8002d30 <HAL_DMA_IRQHandler+0x1e8>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d009      	beq.n	8002cdc <HAL_DMA_IRQHandler+0x194>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a19      	ldr	r2, [pc, #100]	; (8002d34 <HAL_DMA_IRQHandler+0x1ec>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d004      	beq.n	8002cdc <HAL_DMA_IRQHandler+0x194>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a18      	ldr	r2, [pc, #96]	; (8002d38 <HAL_DMA_IRQHandler+0x1f0>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d12f      	bne.n	8002d3c <HAL_DMA_IRQHandler+0x1f4>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0304 	and.w	r3, r3, #4
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	bf14      	ite	ne
 8002cea:	2301      	movne	r3, #1
 8002cec:	2300      	moveq	r3, #0
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	e02e      	b.n	8002d50 <HAL_DMA_IRQHandler+0x208>
 8002cf2:	bf00      	nop
 8002cf4:	24000000 	.word	0x24000000
 8002cf8:	1b4e81b5 	.word	0x1b4e81b5
 8002cfc:	40020010 	.word	0x40020010
 8002d00:	40020028 	.word	0x40020028
 8002d04:	40020040 	.word	0x40020040
 8002d08:	40020058 	.word	0x40020058
 8002d0c:	40020070 	.word	0x40020070
 8002d10:	40020088 	.word	0x40020088
 8002d14:	400200a0 	.word	0x400200a0
 8002d18:	400200b8 	.word	0x400200b8
 8002d1c:	40020410 	.word	0x40020410
 8002d20:	40020428 	.word	0x40020428
 8002d24:	40020440 	.word	0x40020440
 8002d28:	40020458 	.word	0x40020458
 8002d2c:	40020470 	.word	0x40020470
 8002d30:	40020488 	.word	0x40020488
 8002d34:	400204a0 	.word	0x400204a0
 8002d38:	400204b8 	.word	0x400204b8
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0308 	and.w	r3, r3, #8
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	bf14      	ite	ne
 8002d4a:	2301      	movne	r3, #1
 8002d4c:	2300      	moveq	r3, #0
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d015      	beq.n	8002d80 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f022 0204 	bic.w	r2, r2, #4
 8002d62:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d68:	f003 031f 	and.w	r3, r3, #31
 8002d6c:	2208      	movs	r2, #8
 8002d6e:	409a      	lsls	r2, r3
 8002d70:	6a3b      	ldr	r3, [r7, #32]
 8002d72:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d78:	f043 0201 	orr.w	r2, r3, #1
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d84:	f003 031f 	and.w	r3, r3, #31
 8002d88:	69ba      	ldr	r2, [r7, #24]
 8002d8a:	fa22 f303 	lsr.w	r3, r2, r3
 8002d8e:	f003 0301 	and.w	r3, r3, #1
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d06e      	beq.n	8002e74 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a69      	ldr	r2, [pc, #420]	; (8002f40 <HAL_DMA_IRQHandler+0x3f8>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d04a      	beq.n	8002e36 <HAL_DMA_IRQHandler+0x2ee>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a67      	ldr	r2, [pc, #412]	; (8002f44 <HAL_DMA_IRQHandler+0x3fc>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d045      	beq.n	8002e36 <HAL_DMA_IRQHandler+0x2ee>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a66      	ldr	r2, [pc, #408]	; (8002f48 <HAL_DMA_IRQHandler+0x400>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d040      	beq.n	8002e36 <HAL_DMA_IRQHandler+0x2ee>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a64      	ldr	r2, [pc, #400]	; (8002f4c <HAL_DMA_IRQHandler+0x404>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d03b      	beq.n	8002e36 <HAL_DMA_IRQHandler+0x2ee>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a63      	ldr	r2, [pc, #396]	; (8002f50 <HAL_DMA_IRQHandler+0x408>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d036      	beq.n	8002e36 <HAL_DMA_IRQHandler+0x2ee>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a61      	ldr	r2, [pc, #388]	; (8002f54 <HAL_DMA_IRQHandler+0x40c>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d031      	beq.n	8002e36 <HAL_DMA_IRQHandler+0x2ee>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a60      	ldr	r2, [pc, #384]	; (8002f58 <HAL_DMA_IRQHandler+0x410>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d02c      	beq.n	8002e36 <HAL_DMA_IRQHandler+0x2ee>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a5e      	ldr	r2, [pc, #376]	; (8002f5c <HAL_DMA_IRQHandler+0x414>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d027      	beq.n	8002e36 <HAL_DMA_IRQHandler+0x2ee>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a5d      	ldr	r2, [pc, #372]	; (8002f60 <HAL_DMA_IRQHandler+0x418>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d022      	beq.n	8002e36 <HAL_DMA_IRQHandler+0x2ee>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a5b      	ldr	r2, [pc, #364]	; (8002f64 <HAL_DMA_IRQHandler+0x41c>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d01d      	beq.n	8002e36 <HAL_DMA_IRQHandler+0x2ee>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a5a      	ldr	r2, [pc, #360]	; (8002f68 <HAL_DMA_IRQHandler+0x420>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d018      	beq.n	8002e36 <HAL_DMA_IRQHandler+0x2ee>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a58      	ldr	r2, [pc, #352]	; (8002f6c <HAL_DMA_IRQHandler+0x424>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d013      	beq.n	8002e36 <HAL_DMA_IRQHandler+0x2ee>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a57      	ldr	r2, [pc, #348]	; (8002f70 <HAL_DMA_IRQHandler+0x428>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d00e      	beq.n	8002e36 <HAL_DMA_IRQHandler+0x2ee>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a55      	ldr	r2, [pc, #340]	; (8002f74 <HAL_DMA_IRQHandler+0x42c>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d009      	beq.n	8002e36 <HAL_DMA_IRQHandler+0x2ee>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a54      	ldr	r2, [pc, #336]	; (8002f78 <HAL_DMA_IRQHandler+0x430>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d004      	beq.n	8002e36 <HAL_DMA_IRQHandler+0x2ee>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a52      	ldr	r2, [pc, #328]	; (8002f7c <HAL_DMA_IRQHandler+0x434>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d10a      	bne.n	8002e4c <HAL_DMA_IRQHandler+0x304>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	695b      	ldr	r3, [r3, #20]
 8002e3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	bf14      	ite	ne
 8002e44:	2301      	movne	r3, #1
 8002e46:	2300      	moveq	r3, #0
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	e003      	b.n	8002e54 <HAL_DMA_IRQHandler+0x30c>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	2300      	movs	r3, #0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d00d      	beq.n	8002e74 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e5c:	f003 031f 	and.w	r3, r3, #31
 8002e60:	2201      	movs	r2, #1
 8002e62:	409a      	lsls	r2, r3
 8002e64:	6a3b      	ldr	r3, [r7, #32]
 8002e66:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e6c:	f043 0202 	orr.w	r2, r3, #2
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e78:	f003 031f 	and.w	r3, r3, #31
 8002e7c:	2204      	movs	r2, #4
 8002e7e:	409a      	lsls	r2, r3
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	4013      	ands	r3, r2
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	f000 808f 	beq.w	8002fa8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a2c      	ldr	r2, [pc, #176]	; (8002f40 <HAL_DMA_IRQHandler+0x3f8>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d04a      	beq.n	8002f2a <HAL_DMA_IRQHandler+0x3e2>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a2a      	ldr	r2, [pc, #168]	; (8002f44 <HAL_DMA_IRQHandler+0x3fc>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d045      	beq.n	8002f2a <HAL_DMA_IRQHandler+0x3e2>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a29      	ldr	r2, [pc, #164]	; (8002f48 <HAL_DMA_IRQHandler+0x400>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d040      	beq.n	8002f2a <HAL_DMA_IRQHandler+0x3e2>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a27      	ldr	r2, [pc, #156]	; (8002f4c <HAL_DMA_IRQHandler+0x404>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d03b      	beq.n	8002f2a <HAL_DMA_IRQHandler+0x3e2>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a26      	ldr	r2, [pc, #152]	; (8002f50 <HAL_DMA_IRQHandler+0x408>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d036      	beq.n	8002f2a <HAL_DMA_IRQHandler+0x3e2>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a24      	ldr	r2, [pc, #144]	; (8002f54 <HAL_DMA_IRQHandler+0x40c>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d031      	beq.n	8002f2a <HAL_DMA_IRQHandler+0x3e2>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a23      	ldr	r2, [pc, #140]	; (8002f58 <HAL_DMA_IRQHandler+0x410>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d02c      	beq.n	8002f2a <HAL_DMA_IRQHandler+0x3e2>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a21      	ldr	r2, [pc, #132]	; (8002f5c <HAL_DMA_IRQHandler+0x414>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d027      	beq.n	8002f2a <HAL_DMA_IRQHandler+0x3e2>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a20      	ldr	r2, [pc, #128]	; (8002f60 <HAL_DMA_IRQHandler+0x418>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d022      	beq.n	8002f2a <HAL_DMA_IRQHandler+0x3e2>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a1e      	ldr	r2, [pc, #120]	; (8002f64 <HAL_DMA_IRQHandler+0x41c>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d01d      	beq.n	8002f2a <HAL_DMA_IRQHandler+0x3e2>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a1d      	ldr	r2, [pc, #116]	; (8002f68 <HAL_DMA_IRQHandler+0x420>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d018      	beq.n	8002f2a <HAL_DMA_IRQHandler+0x3e2>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a1b      	ldr	r2, [pc, #108]	; (8002f6c <HAL_DMA_IRQHandler+0x424>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d013      	beq.n	8002f2a <HAL_DMA_IRQHandler+0x3e2>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a1a      	ldr	r2, [pc, #104]	; (8002f70 <HAL_DMA_IRQHandler+0x428>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d00e      	beq.n	8002f2a <HAL_DMA_IRQHandler+0x3e2>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a18      	ldr	r2, [pc, #96]	; (8002f74 <HAL_DMA_IRQHandler+0x42c>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d009      	beq.n	8002f2a <HAL_DMA_IRQHandler+0x3e2>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a17      	ldr	r2, [pc, #92]	; (8002f78 <HAL_DMA_IRQHandler+0x430>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d004      	beq.n	8002f2a <HAL_DMA_IRQHandler+0x3e2>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a15      	ldr	r2, [pc, #84]	; (8002f7c <HAL_DMA_IRQHandler+0x434>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d12a      	bne.n	8002f80 <HAL_DMA_IRQHandler+0x438>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0302 	and.w	r3, r3, #2
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	bf14      	ite	ne
 8002f38:	2301      	movne	r3, #1
 8002f3a:	2300      	moveq	r3, #0
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	e023      	b.n	8002f88 <HAL_DMA_IRQHandler+0x440>
 8002f40:	40020010 	.word	0x40020010
 8002f44:	40020028 	.word	0x40020028
 8002f48:	40020040 	.word	0x40020040
 8002f4c:	40020058 	.word	0x40020058
 8002f50:	40020070 	.word	0x40020070
 8002f54:	40020088 	.word	0x40020088
 8002f58:	400200a0 	.word	0x400200a0
 8002f5c:	400200b8 	.word	0x400200b8
 8002f60:	40020410 	.word	0x40020410
 8002f64:	40020428 	.word	0x40020428
 8002f68:	40020440 	.word	0x40020440
 8002f6c:	40020458 	.word	0x40020458
 8002f70:	40020470 	.word	0x40020470
 8002f74:	40020488 	.word	0x40020488
 8002f78:	400204a0 	.word	0x400204a0
 8002f7c:	400204b8 	.word	0x400204b8
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	2300      	movs	r3, #0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d00d      	beq.n	8002fa8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f90:	f003 031f 	and.w	r3, r3, #31
 8002f94:	2204      	movs	r2, #4
 8002f96:	409a      	lsls	r2, r3
 8002f98:	6a3b      	ldr	r3, [r7, #32]
 8002f9a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fa0:	f043 0204 	orr.w	r2, r3, #4
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fac:	f003 031f 	and.w	r3, r3, #31
 8002fb0:	2210      	movs	r2, #16
 8002fb2:	409a      	lsls	r2, r3
 8002fb4:	69bb      	ldr	r3, [r7, #24]
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	f000 80a6 	beq.w	800310a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a85      	ldr	r2, [pc, #532]	; (80031d8 <HAL_DMA_IRQHandler+0x690>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d04a      	beq.n	800305e <HAL_DMA_IRQHandler+0x516>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a83      	ldr	r2, [pc, #524]	; (80031dc <HAL_DMA_IRQHandler+0x694>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d045      	beq.n	800305e <HAL_DMA_IRQHandler+0x516>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a82      	ldr	r2, [pc, #520]	; (80031e0 <HAL_DMA_IRQHandler+0x698>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d040      	beq.n	800305e <HAL_DMA_IRQHandler+0x516>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a80      	ldr	r2, [pc, #512]	; (80031e4 <HAL_DMA_IRQHandler+0x69c>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d03b      	beq.n	800305e <HAL_DMA_IRQHandler+0x516>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a7f      	ldr	r2, [pc, #508]	; (80031e8 <HAL_DMA_IRQHandler+0x6a0>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d036      	beq.n	800305e <HAL_DMA_IRQHandler+0x516>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a7d      	ldr	r2, [pc, #500]	; (80031ec <HAL_DMA_IRQHandler+0x6a4>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d031      	beq.n	800305e <HAL_DMA_IRQHandler+0x516>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a7c      	ldr	r2, [pc, #496]	; (80031f0 <HAL_DMA_IRQHandler+0x6a8>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d02c      	beq.n	800305e <HAL_DMA_IRQHandler+0x516>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a7a      	ldr	r2, [pc, #488]	; (80031f4 <HAL_DMA_IRQHandler+0x6ac>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d027      	beq.n	800305e <HAL_DMA_IRQHandler+0x516>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a79      	ldr	r2, [pc, #484]	; (80031f8 <HAL_DMA_IRQHandler+0x6b0>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d022      	beq.n	800305e <HAL_DMA_IRQHandler+0x516>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a77      	ldr	r2, [pc, #476]	; (80031fc <HAL_DMA_IRQHandler+0x6b4>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d01d      	beq.n	800305e <HAL_DMA_IRQHandler+0x516>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a76      	ldr	r2, [pc, #472]	; (8003200 <HAL_DMA_IRQHandler+0x6b8>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d018      	beq.n	800305e <HAL_DMA_IRQHandler+0x516>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a74      	ldr	r2, [pc, #464]	; (8003204 <HAL_DMA_IRQHandler+0x6bc>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d013      	beq.n	800305e <HAL_DMA_IRQHandler+0x516>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a73      	ldr	r2, [pc, #460]	; (8003208 <HAL_DMA_IRQHandler+0x6c0>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d00e      	beq.n	800305e <HAL_DMA_IRQHandler+0x516>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a71      	ldr	r2, [pc, #452]	; (800320c <HAL_DMA_IRQHandler+0x6c4>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d009      	beq.n	800305e <HAL_DMA_IRQHandler+0x516>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a70      	ldr	r2, [pc, #448]	; (8003210 <HAL_DMA_IRQHandler+0x6c8>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d004      	beq.n	800305e <HAL_DMA_IRQHandler+0x516>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a6e      	ldr	r2, [pc, #440]	; (8003214 <HAL_DMA_IRQHandler+0x6cc>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d10a      	bne.n	8003074 <HAL_DMA_IRQHandler+0x52c>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0308 	and.w	r3, r3, #8
 8003068:	2b00      	cmp	r3, #0
 800306a:	bf14      	ite	ne
 800306c:	2301      	movne	r3, #1
 800306e:	2300      	moveq	r3, #0
 8003070:	b2db      	uxtb	r3, r3
 8003072:	e009      	b.n	8003088 <HAL_DMA_IRQHandler+0x540>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0304 	and.w	r3, r3, #4
 800307e:	2b00      	cmp	r3, #0
 8003080:	bf14      	ite	ne
 8003082:	2301      	movne	r3, #1
 8003084:	2300      	moveq	r3, #0
 8003086:	b2db      	uxtb	r3, r3
 8003088:	2b00      	cmp	r3, #0
 800308a:	d03e      	beq.n	800310a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003090:	f003 031f 	and.w	r3, r3, #31
 8003094:	2210      	movs	r2, #16
 8003096:	409a      	lsls	r2, r3
 8003098:	6a3b      	ldr	r3, [r7, #32]
 800309a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d018      	beq.n	80030dc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d108      	bne.n	80030ca <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d024      	beq.n	800310a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	4798      	blx	r3
 80030c8:	e01f      	b.n	800310a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d01b      	beq.n	800310a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	4798      	blx	r3
 80030da:	e016      	b.n	800310a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d107      	bne.n	80030fa <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f022 0208 	bic.w	r2, r2, #8
 80030f8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d003      	beq.n	800310a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800310e:	f003 031f 	and.w	r3, r3, #31
 8003112:	2220      	movs	r2, #32
 8003114:	409a      	lsls	r2, r3
 8003116:	69bb      	ldr	r3, [r7, #24]
 8003118:	4013      	ands	r3, r2
 800311a:	2b00      	cmp	r3, #0
 800311c:	f000 8110 	beq.w	8003340 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a2c      	ldr	r2, [pc, #176]	; (80031d8 <HAL_DMA_IRQHandler+0x690>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d04a      	beq.n	80031c0 <HAL_DMA_IRQHandler+0x678>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a2b      	ldr	r2, [pc, #172]	; (80031dc <HAL_DMA_IRQHandler+0x694>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d045      	beq.n	80031c0 <HAL_DMA_IRQHandler+0x678>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a29      	ldr	r2, [pc, #164]	; (80031e0 <HAL_DMA_IRQHandler+0x698>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d040      	beq.n	80031c0 <HAL_DMA_IRQHandler+0x678>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a28      	ldr	r2, [pc, #160]	; (80031e4 <HAL_DMA_IRQHandler+0x69c>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d03b      	beq.n	80031c0 <HAL_DMA_IRQHandler+0x678>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a26      	ldr	r2, [pc, #152]	; (80031e8 <HAL_DMA_IRQHandler+0x6a0>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d036      	beq.n	80031c0 <HAL_DMA_IRQHandler+0x678>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a25      	ldr	r2, [pc, #148]	; (80031ec <HAL_DMA_IRQHandler+0x6a4>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d031      	beq.n	80031c0 <HAL_DMA_IRQHandler+0x678>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a23      	ldr	r2, [pc, #140]	; (80031f0 <HAL_DMA_IRQHandler+0x6a8>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d02c      	beq.n	80031c0 <HAL_DMA_IRQHandler+0x678>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a22      	ldr	r2, [pc, #136]	; (80031f4 <HAL_DMA_IRQHandler+0x6ac>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d027      	beq.n	80031c0 <HAL_DMA_IRQHandler+0x678>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a20      	ldr	r2, [pc, #128]	; (80031f8 <HAL_DMA_IRQHandler+0x6b0>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d022      	beq.n	80031c0 <HAL_DMA_IRQHandler+0x678>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a1f      	ldr	r2, [pc, #124]	; (80031fc <HAL_DMA_IRQHandler+0x6b4>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d01d      	beq.n	80031c0 <HAL_DMA_IRQHandler+0x678>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a1d      	ldr	r2, [pc, #116]	; (8003200 <HAL_DMA_IRQHandler+0x6b8>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d018      	beq.n	80031c0 <HAL_DMA_IRQHandler+0x678>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a1c      	ldr	r2, [pc, #112]	; (8003204 <HAL_DMA_IRQHandler+0x6bc>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d013      	beq.n	80031c0 <HAL_DMA_IRQHandler+0x678>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a1a      	ldr	r2, [pc, #104]	; (8003208 <HAL_DMA_IRQHandler+0x6c0>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d00e      	beq.n	80031c0 <HAL_DMA_IRQHandler+0x678>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a19      	ldr	r2, [pc, #100]	; (800320c <HAL_DMA_IRQHandler+0x6c4>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d009      	beq.n	80031c0 <HAL_DMA_IRQHandler+0x678>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a17      	ldr	r2, [pc, #92]	; (8003210 <HAL_DMA_IRQHandler+0x6c8>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d004      	beq.n	80031c0 <HAL_DMA_IRQHandler+0x678>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a16      	ldr	r2, [pc, #88]	; (8003214 <HAL_DMA_IRQHandler+0x6cc>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d12b      	bne.n	8003218 <HAL_DMA_IRQHandler+0x6d0>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0310 	and.w	r3, r3, #16
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	bf14      	ite	ne
 80031ce:	2301      	movne	r3, #1
 80031d0:	2300      	moveq	r3, #0
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	e02a      	b.n	800322c <HAL_DMA_IRQHandler+0x6e4>
 80031d6:	bf00      	nop
 80031d8:	40020010 	.word	0x40020010
 80031dc:	40020028 	.word	0x40020028
 80031e0:	40020040 	.word	0x40020040
 80031e4:	40020058 	.word	0x40020058
 80031e8:	40020070 	.word	0x40020070
 80031ec:	40020088 	.word	0x40020088
 80031f0:	400200a0 	.word	0x400200a0
 80031f4:	400200b8 	.word	0x400200b8
 80031f8:	40020410 	.word	0x40020410
 80031fc:	40020428 	.word	0x40020428
 8003200:	40020440 	.word	0x40020440
 8003204:	40020458 	.word	0x40020458
 8003208:	40020470 	.word	0x40020470
 800320c:	40020488 	.word	0x40020488
 8003210:	400204a0 	.word	0x400204a0
 8003214:	400204b8 	.word	0x400204b8
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0302 	and.w	r3, r3, #2
 8003222:	2b00      	cmp	r3, #0
 8003224:	bf14      	ite	ne
 8003226:	2301      	movne	r3, #1
 8003228:	2300      	moveq	r3, #0
 800322a:	b2db      	uxtb	r3, r3
 800322c:	2b00      	cmp	r3, #0
 800322e:	f000 8087 	beq.w	8003340 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003236:	f003 031f 	and.w	r3, r3, #31
 800323a:	2220      	movs	r2, #32
 800323c:	409a      	lsls	r2, r3
 800323e:	6a3b      	ldr	r3, [r7, #32]
 8003240:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003248:	b2db      	uxtb	r3, r3
 800324a:	2b04      	cmp	r3, #4
 800324c:	d139      	bne.n	80032c2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f022 0216 	bic.w	r2, r2, #22
 800325c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	695a      	ldr	r2, [r3, #20]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800326c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003272:	2b00      	cmp	r3, #0
 8003274:	d103      	bne.n	800327e <HAL_DMA_IRQHandler+0x736>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800327a:	2b00      	cmp	r3, #0
 800327c:	d007      	beq.n	800328e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f022 0208 	bic.w	r2, r2, #8
 800328c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003292:	f003 031f 	and.w	r3, r3, #31
 8003296:	223f      	movs	r2, #63	; 0x3f
 8003298:	409a      	lsls	r2, r3
 800329a:	6a3b      	ldr	r3, [r7, #32]
 800329c:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2201      	movs	r2, #1
 80032aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	f000 834a 	beq.w	800394c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	4798      	blx	r3
          }
          return;
 80032c0:	e344      	b.n	800394c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d018      	beq.n	8003302 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d108      	bne.n	80032f0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d02c      	beq.n	8003340 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	4798      	blx	r3
 80032ee:	e027      	b.n	8003340 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d023      	beq.n	8003340 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	4798      	blx	r3
 8003300:	e01e      	b.n	8003340 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800330c:	2b00      	cmp	r3, #0
 800330e:	d10f      	bne.n	8003330 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f022 0210 	bic.w	r2, r2, #16
 800331e:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2201      	movs	r2, #1
 800332c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003334:	2b00      	cmp	r3, #0
 8003336:	d003      	beq.n	8003340 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003344:	2b00      	cmp	r3, #0
 8003346:	f000 8306 	beq.w	8003956 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800334e:	f003 0301 	and.w	r3, r3, #1
 8003352:	2b00      	cmp	r3, #0
 8003354:	f000 8088 	beq.w	8003468 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2204      	movs	r2, #4
 800335c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a7a      	ldr	r2, [pc, #488]	; (8003550 <HAL_DMA_IRQHandler+0xa08>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d04a      	beq.n	8003400 <HAL_DMA_IRQHandler+0x8b8>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a79      	ldr	r2, [pc, #484]	; (8003554 <HAL_DMA_IRQHandler+0xa0c>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d045      	beq.n	8003400 <HAL_DMA_IRQHandler+0x8b8>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a77      	ldr	r2, [pc, #476]	; (8003558 <HAL_DMA_IRQHandler+0xa10>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d040      	beq.n	8003400 <HAL_DMA_IRQHandler+0x8b8>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a76      	ldr	r2, [pc, #472]	; (800355c <HAL_DMA_IRQHandler+0xa14>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d03b      	beq.n	8003400 <HAL_DMA_IRQHandler+0x8b8>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a74      	ldr	r2, [pc, #464]	; (8003560 <HAL_DMA_IRQHandler+0xa18>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d036      	beq.n	8003400 <HAL_DMA_IRQHandler+0x8b8>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a73      	ldr	r2, [pc, #460]	; (8003564 <HAL_DMA_IRQHandler+0xa1c>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d031      	beq.n	8003400 <HAL_DMA_IRQHandler+0x8b8>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a71      	ldr	r2, [pc, #452]	; (8003568 <HAL_DMA_IRQHandler+0xa20>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d02c      	beq.n	8003400 <HAL_DMA_IRQHandler+0x8b8>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a70      	ldr	r2, [pc, #448]	; (800356c <HAL_DMA_IRQHandler+0xa24>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d027      	beq.n	8003400 <HAL_DMA_IRQHandler+0x8b8>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a6e      	ldr	r2, [pc, #440]	; (8003570 <HAL_DMA_IRQHandler+0xa28>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d022      	beq.n	8003400 <HAL_DMA_IRQHandler+0x8b8>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a6d      	ldr	r2, [pc, #436]	; (8003574 <HAL_DMA_IRQHandler+0xa2c>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d01d      	beq.n	8003400 <HAL_DMA_IRQHandler+0x8b8>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a6b      	ldr	r2, [pc, #428]	; (8003578 <HAL_DMA_IRQHandler+0xa30>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d018      	beq.n	8003400 <HAL_DMA_IRQHandler+0x8b8>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a6a      	ldr	r2, [pc, #424]	; (800357c <HAL_DMA_IRQHandler+0xa34>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d013      	beq.n	8003400 <HAL_DMA_IRQHandler+0x8b8>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a68      	ldr	r2, [pc, #416]	; (8003580 <HAL_DMA_IRQHandler+0xa38>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d00e      	beq.n	8003400 <HAL_DMA_IRQHandler+0x8b8>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a67      	ldr	r2, [pc, #412]	; (8003584 <HAL_DMA_IRQHandler+0xa3c>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d009      	beq.n	8003400 <HAL_DMA_IRQHandler+0x8b8>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a65      	ldr	r2, [pc, #404]	; (8003588 <HAL_DMA_IRQHandler+0xa40>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d004      	beq.n	8003400 <HAL_DMA_IRQHandler+0x8b8>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a64      	ldr	r2, [pc, #400]	; (800358c <HAL_DMA_IRQHandler+0xa44>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d108      	bne.n	8003412 <HAL_DMA_IRQHandler+0x8ca>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f022 0201 	bic.w	r2, r2, #1
 800340e:	601a      	str	r2, [r3, #0]
 8003410:	e007      	b.n	8003422 <HAL_DMA_IRQHandler+0x8da>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f022 0201 	bic.w	r2, r2, #1
 8003420:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	3301      	adds	r3, #1
 8003426:	60fb      	str	r3, [r7, #12]
 8003428:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800342a:	429a      	cmp	r2, r3
 800342c:	d307      	bcc.n	800343e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0301 	and.w	r3, r3, #1
 8003438:	2b00      	cmp	r3, #0
 800343a:	d1f2      	bne.n	8003422 <HAL_DMA_IRQHandler+0x8da>
 800343c:	e000      	b.n	8003440 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800343e:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2200      	movs	r2, #0
 8003444:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0301 	and.w	r3, r3, #1
 8003452:	2b00      	cmp	r3, #0
 8003454:	d004      	beq.n	8003460 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2203      	movs	r2, #3
 800345a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800345e:	e003      	b.n	8003468 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800346c:	2b00      	cmp	r3, #0
 800346e:	f000 8272 	beq.w	8003956 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	4798      	blx	r3
 800347a:	e26c      	b.n	8003956 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a43      	ldr	r2, [pc, #268]	; (8003590 <HAL_DMA_IRQHandler+0xa48>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d022      	beq.n	80034cc <HAL_DMA_IRQHandler+0x984>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a42      	ldr	r2, [pc, #264]	; (8003594 <HAL_DMA_IRQHandler+0xa4c>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d01d      	beq.n	80034cc <HAL_DMA_IRQHandler+0x984>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a40      	ldr	r2, [pc, #256]	; (8003598 <HAL_DMA_IRQHandler+0xa50>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d018      	beq.n	80034cc <HAL_DMA_IRQHandler+0x984>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a3f      	ldr	r2, [pc, #252]	; (800359c <HAL_DMA_IRQHandler+0xa54>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d013      	beq.n	80034cc <HAL_DMA_IRQHandler+0x984>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a3d      	ldr	r2, [pc, #244]	; (80035a0 <HAL_DMA_IRQHandler+0xa58>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d00e      	beq.n	80034cc <HAL_DMA_IRQHandler+0x984>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a3c      	ldr	r2, [pc, #240]	; (80035a4 <HAL_DMA_IRQHandler+0xa5c>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d009      	beq.n	80034cc <HAL_DMA_IRQHandler+0x984>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a3a      	ldr	r2, [pc, #232]	; (80035a8 <HAL_DMA_IRQHandler+0xa60>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d004      	beq.n	80034cc <HAL_DMA_IRQHandler+0x984>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a39      	ldr	r2, [pc, #228]	; (80035ac <HAL_DMA_IRQHandler+0xa64>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d101      	bne.n	80034d0 <HAL_DMA_IRQHandler+0x988>
 80034cc:	2301      	movs	r3, #1
 80034ce:	e000      	b.n	80034d2 <HAL_DMA_IRQHandler+0x98a>
 80034d0:	2300      	movs	r3, #0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	f000 823f 	beq.w	8003956 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034e4:	f003 031f 	and.w	r3, r3, #31
 80034e8:	2204      	movs	r2, #4
 80034ea:	409a      	lsls	r2, r3
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	4013      	ands	r3, r2
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	f000 80cd 	beq.w	8003690 <HAL_DMA_IRQHandler+0xb48>
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	f003 0304 	and.w	r3, r3, #4
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	f000 80c7 	beq.w	8003690 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003506:	f003 031f 	and.w	r3, r3, #31
 800350a:	2204      	movs	r2, #4
 800350c:	409a      	lsls	r2, r3
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003518:	2b00      	cmp	r3, #0
 800351a:	d049      	beq.n	80035b0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d109      	bne.n	800353a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800352a:	2b00      	cmp	r3, #0
 800352c:	f000 8210 	beq.w	8003950 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003538:	e20a      	b.n	8003950 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353e:	2b00      	cmp	r3, #0
 8003540:	f000 8206 	beq.w	8003950 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800354c:	e200      	b.n	8003950 <HAL_DMA_IRQHandler+0xe08>
 800354e:	bf00      	nop
 8003550:	40020010 	.word	0x40020010
 8003554:	40020028 	.word	0x40020028
 8003558:	40020040 	.word	0x40020040
 800355c:	40020058 	.word	0x40020058
 8003560:	40020070 	.word	0x40020070
 8003564:	40020088 	.word	0x40020088
 8003568:	400200a0 	.word	0x400200a0
 800356c:	400200b8 	.word	0x400200b8
 8003570:	40020410 	.word	0x40020410
 8003574:	40020428 	.word	0x40020428
 8003578:	40020440 	.word	0x40020440
 800357c:	40020458 	.word	0x40020458
 8003580:	40020470 	.word	0x40020470
 8003584:	40020488 	.word	0x40020488
 8003588:	400204a0 	.word	0x400204a0
 800358c:	400204b8 	.word	0x400204b8
 8003590:	58025408 	.word	0x58025408
 8003594:	5802541c 	.word	0x5802541c
 8003598:	58025430 	.word	0x58025430
 800359c:	58025444 	.word	0x58025444
 80035a0:	58025458 	.word	0x58025458
 80035a4:	5802546c 	.word	0x5802546c
 80035a8:	58025480 	.word	0x58025480
 80035ac:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	f003 0320 	and.w	r3, r3, #32
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d160      	bne.n	800367c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a8c      	ldr	r2, [pc, #560]	; (80037f0 <HAL_DMA_IRQHandler+0xca8>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d04a      	beq.n	800365a <HAL_DMA_IRQHandler+0xb12>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a8a      	ldr	r2, [pc, #552]	; (80037f4 <HAL_DMA_IRQHandler+0xcac>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d045      	beq.n	800365a <HAL_DMA_IRQHandler+0xb12>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a89      	ldr	r2, [pc, #548]	; (80037f8 <HAL_DMA_IRQHandler+0xcb0>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d040      	beq.n	800365a <HAL_DMA_IRQHandler+0xb12>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a87      	ldr	r2, [pc, #540]	; (80037fc <HAL_DMA_IRQHandler+0xcb4>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d03b      	beq.n	800365a <HAL_DMA_IRQHandler+0xb12>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a86      	ldr	r2, [pc, #536]	; (8003800 <HAL_DMA_IRQHandler+0xcb8>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d036      	beq.n	800365a <HAL_DMA_IRQHandler+0xb12>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a84      	ldr	r2, [pc, #528]	; (8003804 <HAL_DMA_IRQHandler+0xcbc>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d031      	beq.n	800365a <HAL_DMA_IRQHandler+0xb12>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a83      	ldr	r2, [pc, #524]	; (8003808 <HAL_DMA_IRQHandler+0xcc0>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d02c      	beq.n	800365a <HAL_DMA_IRQHandler+0xb12>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a81      	ldr	r2, [pc, #516]	; (800380c <HAL_DMA_IRQHandler+0xcc4>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d027      	beq.n	800365a <HAL_DMA_IRQHandler+0xb12>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a80      	ldr	r2, [pc, #512]	; (8003810 <HAL_DMA_IRQHandler+0xcc8>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d022      	beq.n	800365a <HAL_DMA_IRQHandler+0xb12>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a7e      	ldr	r2, [pc, #504]	; (8003814 <HAL_DMA_IRQHandler+0xccc>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d01d      	beq.n	800365a <HAL_DMA_IRQHandler+0xb12>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a7d      	ldr	r2, [pc, #500]	; (8003818 <HAL_DMA_IRQHandler+0xcd0>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d018      	beq.n	800365a <HAL_DMA_IRQHandler+0xb12>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a7b      	ldr	r2, [pc, #492]	; (800381c <HAL_DMA_IRQHandler+0xcd4>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d013      	beq.n	800365a <HAL_DMA_IRQHandler+0xb12>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a7a      	ldr	r2, [pc, #488]	; (8003820 <HAL_DMA_IRQHandler+0xcd8>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d00e      	beq.n	800365a <HAL_DMA_IRQHandler+0xb12>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a78      	ldr	r2, [pc, #480]	; (8003824 <HAL_DMA_IRQHandler+0xcdc>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d009      	beq.n	800365a <HAL_DMA_IRQHandler+0xb12>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a77      	ldr	r2, [pc, #476]	; (8003828 <HAL_DMA_IRQHandler+0xce0>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d004      	beq.n	800365a <HAL_DMA_IRQHandler+0xb12>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a75      	ldr	r2, [pc, #468]	; (800382c <HAL_DMA_IRQHandler+0xce4>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d108      	bne.n	800366c <HAL_DMA_IRQHandler+0xb24>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f022 0208 	bic.w	r2, r2, #8
 8003668:	601a      	str	r2, [r3, #0]
 800366a:	e007      	b.n	800367c <HAL_DMA_IRQHandler+0xb34>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f022 0204 	bic.w	r2, r2, #4
 800367a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003680:	2b00      	cmp	r3, #0
 8003682:	f000 8165 	beq.w	8003950 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800368e:	e15f      	b.n	8003950 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003694:	f003 031f 	and.w	r3, r3, #31
 8003698:	2202      	movs	r2, #2
 800369a:	409a      	lsls	r2, r3
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	4013      	ands	r3, r2
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	f000 80c5 	beq.w	8003830 <HAL_DMA_IRQHandler+0xce8>
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	f003 0302 	and.w	r3, r3, #2
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	f000 80bf 	beq.w	8003830 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036b6:	f003 031f 	and.w	r3, r3, #31
 80036ba:	2202      	movs	r2, #2
 80036bc:	409a      	lsls	r2, r3
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d018      	beq.n	80036fe <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d109      	bne.n	80036ea <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036da:	2b00      	cmp	r3, #0
 80036dc:	f000 813a 	beq.w	8003954 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80036e8:	e134      	b.n	8003954 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	f000 8130 	beq.w	8003954 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80036fc:	e12a      	b.n	8003954 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	f003 0320 	and.w	r3, r3, #32
 8003704:	2b00      	cmp	r3, #0
 8003706:	d168      	bne.n	80037da <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a38      	ldr	r2, [pc, #224]	; (80037f0 <HAL_DMA_IRQHandler+0xca8>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d04a      	beq.n	80037a8 <HAL_DMA_IRQHandler+0xc60>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a37      	ldr	r2, [pc, #220]	; (80037f4 <HAL_DMA_IRQHandler+0xcac>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d045      	beq.n	80037a8 <HAL_DMA_IRQHandler+0xc60>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a35      	ldr	r2, [pc, #212]	; (80037f8 <HAL_DMA_IRQHandler+0xcb0>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d040      	beq.n	80037a8 <HAL_DMA_IRQHandler+0xc60>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a34      	ldr	r2, [pc, #208]	; (80037fc <HAL_DMA_IRQHandler+0xcb4>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d03b      	beq.n	80037a8 <HAL_DMA_IRQHandler+0xc60>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a32      	ldr	r2, [pc, #200]	; (8003800 <HAL_DMA_IRQHandler+0xcb8>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d036      	beq.n	80037a8 <HAL_DMA_IRQHandler+0xc60>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a31      	ldr	r2, [pc, #196]	; (8003804 <HAL_DMA_IRQHandler+0xcbc>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d031      	beq.n	80037a8 <HAL_DMA_IRQHandler+0xc60>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a2f      	ldr	r2, [pc, #188]	; (8003808 <HAL_DMA_IRQHandler+0xcc0>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d02c      	beq.n	80037a8 <HAL_DMA_IRQHandler+0xc60>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a2e      	ldr	r2, [pc, #184]	; (800380c <HAL_DMA_IRQHandler+0xcc4>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d027      	beq.n	80037a8 <HAL_DMA_IRQHandler+0xc60>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a2c      	ldr	r2, [pc, #176]	; (8003810 <HAL_DMA_IRQHandler+0xcc8>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d022      	beq.n	80037a8 <HAL_DMA_IRQHandler+0xc60>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a2b      	ldr	r2, [pc, #172]	; (8003814 <HAL_DMA_IRQHandler+0xccc>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d01d      	beq.n	80037a8 <HAL_DMA_IRQHandler+0xc60>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a29      	ldr	r2, [pc, #164]	; (8003818 <HAL_DMA_IRQHandler+0xcd0>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d018      	beq.n	80037a8 <HAL_DMA_IRQHandler+0xc60>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a28      	ldr	r2, [pc, #160]	; (800381c <HAL_DMA_IRQHandler+0xcd4>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d013      	beq.n	80037a8 <HAL_DMA_IRQHandler+0xc60>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a26      	ldr	r2, [pc, #152]	; (8003820 <HAL_DMA_IRQHandler+0xcd8>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d00e      	beq.n	80037a8 <HAL_DMA_IRQHandler+0xc60>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a25      	ldr	r2, [pc, #148]	; (8003824 <HAL_DMA_IRQHandler+0xcdc>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d009      	beq.n	80037a8 <HAL_DMA_IRQHandler+0xc60>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a23      	ldr	r2, [pc, #140]	; (8003828 <HAL_DMA_IRQHandler+0xce0>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d004      	beq.n	80037a8 <HAL_DMA_IRQHandler+0xc60>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a22      	ldr	r2, [pc, #136]	; (800382c <HAL_DMA_IRQHandler+0xce4>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d108      	bne.n	80037ba <HAL_DMA_IRQHandler+0xc72>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f022 0214 	bic.w	r2, r2, #20
 80037b6:	601a      	str	r2, [r3, #0]
 80037b8:	e007      	b.n	80037ca <HAL_DMA_IRQHandler+0xc82>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f022 020a 	bic.w	r2, r2, #10
 80037c8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2201      	movs	r2, #1
 80037d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037de:	2b00      	cmp	r3, #0
 80037e0:	f000 80b8 	beq.w	8003954 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80037ec:	e0b2      	b.n	8003954 <HAL_DMA_IRQHandler+0xe0c>
 80037ee:	bf00      	nop
 80037f0:	40020010 	.word	0x40020010
 80037f4:	40020028 	.word	0x40020028
 80037f8:	40020040 	.word	0x40020040
 80037fc:	40020058 	.word	0x40020058
 8003800:	40020070 	.word	0x40020070
 8003804:	40020088 	.word	0x40020088
 8003808:	400200a0 	.word	0x400200a0
 800380c:	400200b8 	.word	0x400200b8
 8003810:	40020410 	.word	0x40020410
 8003814:	40020428 	.word	0x40020428
 8003818:	40020440 	.word	0x40020440
 800381c:	40020458 	.word	0x40020458
 8003820:	40020470 	.word	0x40020470
 8003824:	40020488 	.word	0x40020488
 8003828:	400204a0 	.word	0x400204a0
 800382c:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003834:	f003 031f 	and.w	r3, r3, #31
 8003838:	2208      	movs	r2, #8
 800383a:	409a      	lsls	r2, r3
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	4013      	ands	r3, r2
 8003840:	2b00      	cmp	r3, #0
 8003842:	f000 8088 	beq.w	8003956 <HAL_DMA_IRQHandler+0xe0e>
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	f003 0308 	and.w	r3, r3, #8
 800384c:	2b00      	cmp	r3, #0
 800384e:	f000 8082 	beq.w	8003956 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a41      	ldr	r2, [pc, #260]	; (800395c <HAL_DMA_IRQHandler+0xe14>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d04a      	beq.n	80038f2 <HAL_DMA_IRQHandler+0xdaa>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a3f      	ldr	r2, [pc, #252]	; (8003960 <HAL_DMA_IRQHandler+0xe18>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d045      	beq.n	80038f2 <HAL_DMA_IRQHandler+0xdaa>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a3e      	ldr	r2, [pc, #248]	; (8003964 <HAL_DMA_IRQHandler+0xe1c>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d040      	beq.n	80038f2 <HAL_DMA_IRQHandler+0xdaa>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a3c      	ldr	r2, [pc, #240]	; (8003968 <HAL_DMA_IRQHandler+0xe20>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d03b      	beq.n	80038f2 <HAL_DMA_IRQHandler+0xdaa>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a3b      	ldr	r2, [pc, #236]	; (800396c <HAL_DMA_IRQHandler+0xe24>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d036      	beq.n	80038f2 <HAL_DMA_IRQHandler+0xdaa>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a39      	ldr	r2, [pc, #228]	; (8003970 <HAL_DMA_IRQHandler+0xe28>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d031      	beq.n	80038f2 <HAL_DMA_IRQHandler+0xdaa>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a38      	ldr	r2, [pc, #224]	; (8003974 <HAL_DMA_IRQHandler+0xe2c>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d02c      	beq.n	80038f2 <HAL_DMA_IRQHandler+0xdaa>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a36      	ldr	r2, [pc, #216]	; (8003978 <HAL_DMA_IRQHandler+0xe30>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d027      	beq.n	80038f2 <HAL_DMA_IRQHandler+0xdaa>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a35      	ldr	r2, [pc, #212]	; (800397c <HAL_DMA_IRQHandler+0xe34>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d022      	beq.n	80038f2 <HAL_DMA_IRQHandler+0xdaa>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a33      	ldr	r2, [pc, #204]	; (8003980 <HAL_DMA_IRQHandler+0xe38>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d01d      	beq.n	80038f2 <HAL_DMA_IRQHandler+0xdaa>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a32      	ldr	r2, [pc, #200]	; (8003984 <HAL_DMA_IRQHandler+0xe3c>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d018      	beq.n	80038f2 <HAL_DMA_IRQHandler+0xdaa>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a30      	ldr	r2, [pc, #192]	; (8003988 <HAL_DMA_IRQHandler+0xe40>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d013      	beq.n	80038f2 <HAL_DMA_IRQHandler+0xdaa>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a2f      	ldr	r2, [pc, #188]	; (800398c <HAL_DMA_IRQHandler+0xe44>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d00e      	beq.n	80038f2 <HAL_DMA_IRQHandler+0xdaa>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a2d      	ldr	r2, [pc, #180]	; (8003990 <HAL_DMA_IRQHandler+0xe48>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d009      	beq.n	80038f2 <HAL_DMA_IRQHandler+0xdaa>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a2c      	ldr	r2, [pc, #176]	; (8003994 <HAL_DMA_IRQHandler+0xe4c>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d004      	beq.n	80038f2 <HAL_DMA_IRQHandler+0xdaa>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a2a      	ldr	r2, [pc, #168]	; (8003998 <HAL_DMA_IRQHandler+0xe50>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d108      	bne.n	8003904 <HAL_DMA_IRQHandler+0xdbc>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f022 021c 	bic.w	r2, r2, #28
 8003900:	601a      	str	r2, [r3, #0]
 8003902:	e007      	b.n	8003914 <HAL_DMA_IRQHandler+0xdcc>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f022 020e 	bic.w	r2, r2, #14
 8003912:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003918:	f003 031f 	and.w	r3, r3, #31
 800391c:	2201      	movs	r2, #1
 800391e:	409a      	lsls	r2, r3
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2201      	movs	r2, #1
 8003928:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2201      	movs	r2, #1
 8003936:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800393e:	2b00      	cmp	r3, #0
 8003940:	d009      	beq.n	8003956 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	4798      	blx	r3
 800394a:	e004      	b.n	8003956 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800394c:	bf00      	nop
 800394e:	e002      	b.n	8003956 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003950:	bf00      	nop
 8003952:	e000      	b.n	8003956 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003954:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003956:	3728      	adds	r7, #40	; 0x28
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}
 800395c:	40020010 	.word	0x40020010
 8003960:	40020028 	.word	0x40020028
 8003964:	40020040 	.word	0x40020040
 8003968:	40020058 	.word	0x40020058
 800396c:	40020070 	.word	0x40020070
 8003970:	40020088 	.word	0x40020088
 8003974:	400200a0 	.word	0x400200a0
 8003978:	400200b8 	.word	0x400200b8
 800397c:	40020410 	.word	0x40020410
 8003980:	40020428 	.word	0x40020428
 8003984:	40020440 	.word	0x40020440
 8003988:	40020458 	.word	0x40020458
 800398c:	40020470 	.word	0x40020470
 8003990:	40020488 	.word	0x40020488
 8003994:	400204a0 	.word	0x400204a0
 8003998:	400204b8 	.word	0x400204b8

0800399c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800399c:	b480      	push	{r7}
 800399e:	b085      	sub	sp, #20
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a42      	ldr	r2, [pc, #264]	; (8003ab4 <DMA_CalcBaseAndBitshift+0x118>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d04a      	beq.n	8003a44 <DMA_CalcBaseAndBitshift+0xa8>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a41      	ldr	r2, [pc, #260]	; (8003ab8 <DMA_CalcBaseAndBitshift+0x11c>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d045      	beq.n	8003a44 <DMA_CalcBaseAndBitshift+0xa8>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a3f      	ldr	r2, [pc, #252]	; (8003abc <DMA_CalcBaseAndBitshift+0x120>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d040      	beq.n	8003a44 <DMA_CalcBaseAndBitshift+0xa8>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a3e      	ldr	r2, [pc, #248]	; (8003ac0 <DMA_CalcBaseAndBitshift+0x124>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d03b      	beq.n	8003a44 <DMA_CalcBaseAndBitshift+0xa8>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a3c      	ldr	r2, [pc, #240]	; (8003ac4 <DMA_CalcBaseAndBitshift+0x128>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d036      	beq.n	8003a44 <DMA_CalcBaseAndBitshift+0xa8>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a3b      	ldr	r2, [pc, #236]	; (8003ac8 <DMA_CalcBaseAndBitshift+0x12c>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d031      	beq.n	8003a44 <DMA_CalcBaseAndBitshift+0xa8>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a39      	ldr	r2, [pc, #228]	; (8003acc <DMA_CalcBaseAndBitshift+0x130>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d02c      	beq.n	8003a44 <DMA_CalcBaseAndBitshift+0xa8>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a38      	ldr	r2, [pc, #224]	; (8003ad0 <DMA_CalcBaseAndBitshift+0x134>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d027      	beq.n	8003a44 <DMA_CalcBaseAndBitshift+0xa8>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a36      	ldr	r2, [pc, #216]	; (8003ad4 <DMA_CalcBaseAndBitshift+0x138>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d022      	beq.n	8003a44 <DMA_CalcBaseAndBitshift+0xa8>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a35      	ldr	r2, [pc, #212]	; (8003ad8 <DMA_CalcBaseAndBitshift+0x13c>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d01d      	beq.n	8003a44 <DMA_CalcBaseAndBitshift+0xa8>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a33      	ldr	r2, [pc, #204]	; (8003adc <DMA_CalcBaseAndBitshift+0x140>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d018      	beq.n	8003a44 <DMA_CalcBaseAndBitshift+0xa8>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a32      	ldr	r2, [pc, #200]	; (8003ae0 <DMA_CalcBaseAndBitshift+0x144>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d013      	beq.n	8003a44 <DMA_CalcBaseAndBitshift+0xa8>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a30      	ldr	r2, [pc, #192]	; (8003ae4 <DMA_CalcBaseAndBitshift+0x148>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d00e      	beq.n	8003a44 <DMA_CalcBaseAndBitshift+0xa8>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a2f      	ldr	r2, [pc, #188]	; (8003ae8 <DMA_CalcBaseAndBitshift+0x14c>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d009      	beq.n	8003a44 <DMA_CalcBaseAndBitshift+0xa8>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a2d      	ldr	r2, [pc, #180]	; (8003aec <DMA_CalcBaseAndBitshift+0x150>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d004      	beq.n	8003a44 <DMA_CalcBaseAndBitshift+0xa8>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a2c      	ldr	r2, [pc, #176]	; (8003af0 <DMA_CalcBaseAndBitshift+0x154>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d101      	bne.n	8003a48 <DMA_CalcBaseAndBitshift+0xac>
 8003a44:	2301      	movs	r3, #1
 8003a46:	e000      	b.n	8003a4a <DMA_CalcBaseAndBitshift+0xae>
 8003a48:	2300      	movs	r3, #0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d024      	beq.n	8003a98 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	3b10      	subs	r3, #16
 8003a56:	4a27      	ldr	r2, [pc, #156]	; (8003af4 <DMA_CalcBaseAndBitshift+0x158>)
 8003a58:	fba2 2303 	umull	r2, r3, r2, r3
 8003a5c:	091b      	lsrs	r3, r3, #4
 8003a5e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f003 0307 	and.w	r3, r3, #7
 8003a66:	4a24      	ldr	r2, [pc, #144]	; (8003af8 <DMA_CalcBaseAndBitshift+0x15c>)
 8003a68:	5cd3      	ldrb	r3, [r2, r3]
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2b03      	cmp	r3, #3
 8003a74:	d908      	bls.n	8003a88 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	4b1f      	ldr	r3, [pc, #124]	; (8003afc <DMA_CalcBaseAndBitshift+0x160>)
 8003a7e:	4013      	ands	r3, r2
 8003a80:	1d1a      	adds	r2, r3, #4
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	659a      	str	r2, [r3, #88]	; 0x58
 8003a86:	e00d      	b.n	8003aa4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	4b1b      	ldr	r3, [pc, #108]	; (8003afc <DMA_CalcBaseAndBitshift+0x160>)
 8003a90:	4013      	ands	r3, r2
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	6593      	str	r3, [r2, #88]	; 0x58
 8003a96:	e005      	b.n	8003aa4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3714      	adds	r7, #20
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr
 8003ab4:	40020010 	.word	0x40020010
 8003ab8:	40020028 	.word	0x40020028
 8003abc:	40020040 	.word	0x40020040
 8003ac0:	40020058 	.word	0x40020058
 8003ac4:	40020070 	.word	0x40020070
 8003ac8:	40020088 	.word	0x40020088
 8003acc:	400200a0 	.word	0x400200a0
 8003ad0:	400200b8 	.word	0x400200b8
 8003ad4:	40020410 	.word	0x40020410
 8003ad8:	40020428 	.word	0x40020428
 8003adc:	40020440 	.word	0x40020440
 8003ae0:	40020458 	.word	0x40020458
 8003ae4:	40020470 	.word	0x40020470
 8003ae8:	40020488 	.word	0x40020488
 8003aec:	400204a0 	.word	0x400204a0
 8003af0:	400204b8 	.word	0x400204b8
 8003af4:	aaaaaaab 	.word	0xaaaaaaab
 8003af8:	08026ec0 	.word	0x08026ec0
 8003afc:	fffffc00 	.word	0xfffffc00

08003b00 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b085      	sub	sp, #20
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	699b      	ldr	r3, [r3, #24]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d120      	bne.n	8003b56 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b18:	2b03      	cmp	r3, #3
 8003b1a:	d858      	bhi.n	8003bce <DMA_CheckFifoParam+0xce>
 8003b1c:	a201      	add	r2, pc, #4	; (adr r2, 8003b24 <DMA_CheckFifoParam+0x24>)
 8003b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b22:	bf00      	nop
 8003b24:	08003b35 	.word	0x08003b35
 8003b28:	08003b47 	.word	0x08003b47
 8003b2c:	08003b35 	.word	0x08003b35
 8003b30:	08003bcf 	.word	0x08003bcf
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d048      	beq.n	8003bd2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003b44:	e045      	b.n	8003bd2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b4a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003b4e:	d142      	bne.n	8003bd6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003b54:	e03f      	b.n	8003bd6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	699b      	ldr	r3, [r3, #24]
 8003b5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b5e:	d123      	bne.n	8003ba8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b64:	2b03      	cmp	r3, #3
 8003b66:	d838      	bhi.n	8003bda <DMA_CheckFifoParam+0xda>
 8003b68:	a201      	add	r2, pc, #4	; (adr r2, 8003b70 <DMA_CheckFifoParam+0x70>)
 8003b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b6e:	bf00      	nop
 8003b70:	08003b81 	.word	0x08003b81
 8003b74:	08003b87 	.word	0x08003b87
 8003b78:	08003b81 	.word	0x08003b81
 8003b7c:	08003b99 	.word	0x08003b99
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	73fb      	strb	r3, [r7, #15]
        break;
 8003b84:	e030      	b.n	8003be8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d025      	beq.n	8003bde <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003b96:	e022      	b.n	8003bde <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b9c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003ba0:	d11f      	bne.n	8003be2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003ba6:	e01c      	b.n	8003be2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bac:	2b02      	cmp	r3, #2
 8003bae:	d902      	bls.n	8003bb6 <DMA_CheckFifoParam+0xb6>
 8003bb0:	2b03      	cmp	r3, #3
 8003bb2:	d003      	beq.n	8003bbc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003bb4:	e018      	b.n	8003be8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	73fb      	strb	r3, [r7, #15]
        break;
 8003bba:	e015      	b.n	8003be8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d00e      	beq.n	8003be6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	73fb      	strb	r3, [r7, #15]
    break;
 8003bcc:	e00b      	b.n	8003be6 <DMA_CheckFifoParam+0xe6>
        break;
 8003bce:	bf00      	nop
 8003bd0:	e00a      	b.n	8003be8 <DMA_CheckFifoParam+0xe8>
        break;
 8003bd2:	bf00      	nop
 8003bd4:	e008      	b.n	8003be8 <DMA_CheckFifoParam+0xe8>
        break;
 8003bd6:	bf00      	nop
 8003bd8:	e006      	b.n	8003be8 <DMA_CheckFifoParam+0xe8>
        break;
 8003bda:	bf00      	nop
 8003bdc:	e004      	b.n	8003be8 <DMA_CheckFifoParam+0xe8>
        break;
 8003bde:	bf00      	nop
 8003be0:	e002      	b.n	8003be8 <DMA_CheckFifoParam+0xe8>
        break;
 8003be2:	bf00      	nop
 8003be4:	e000      	b.n	8003be8 <DMA_CheckFifoParam+0xe8>
    break;
 8003be6:	bf00      	nop
    }
  }

  return status;
 8003be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3714      	adds	r7, #20
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr
 8003bf6:	bf00      	nop

08003bf8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b085      	sub	sp, #20
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a38      	ldr	r2, [pc, #224]	; (8003cec <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d022      	beq.n	8003c56 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a36      	ldr	r2, [pc, #216]	; (8003cf0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d01d      	beq.n	8003c56 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a35      	ldr	r2, [pc, #212]	; (8003cf4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d018      	beq.n	8003c56 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a33      	ldr	r2, [pc, #204]	; (8003cf8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d013      	beq.n	8003c56 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a32      	ldr	r2, [pc, #200]	; (8003cfc <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d00e      	beq.n	8003c56 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a30      	ldr	r2, [pc, #192]	; (8003d00 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d009      	beq.n	8003c56 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a2f      	ldr	r2, [pc, #188]	; (8003d04 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d004      	beq.n	8003c56 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a2d      	ldr	r2, [pc, #180]	; (8003d08 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d101      	bne.n	8003c5a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003c56:	2301      	movs	r3, #1
 8003c58:	e000      	b.n	8003c5c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d01a      	beq.n	8003c96 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	3b08      	subs	r3, #8
 8003c68:	4a28      	ldr	r2, [pc, #160]	; (8003d0c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c6e:	091b      	lsrs	r3, r3, #4
 8003c70:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003c72:	68fa      	ldr	r2, [r7, #12]
 8003c74:	4b26      	ldr	r3, [pc, #152]	; (8003d10 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003c76:	4413      	add	r3, r2
 8003c78:	009b      	lsls	r3, r3, #2
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	4a24      	ldr	r2, [pc, #144]	; (8003d14 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003c84:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	f003 031f 	and.w	r3, r3, #31
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	409a      	lsls	r2, r3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003c94:	e024      	b.n	8003ce0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	3b10      	subs	r3, #16
 8003c9e:	4a1e      	ldr	r2, [pc, #120]	; (8003d18 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003ca0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ca4:	091b      	lsrs	r3, r3, #4
 8003ca6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	4a1c      	ldr	r2, [pc, #112]	; (8003d1c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d806      	bhi.n	8003cbe <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	4a1b      	ldr	r2, [pc, #108]	; (8003d20 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d902      	bls.n	8003cbe <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	3308      	adds	r3, #8
 8003cbc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003cbe:	68fa      	ldr	r2, [r7, #12]
 8003cc0:	4b18      	ldr	r3, [pc, #96]	; (8003d24 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003cc2:	4413      	add	r3, r2
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	4a16      	ldr	r2, [pc, #88]	; (8003d28 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003cd0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	f003 031f 	and.w	r3, r3, #31
 8003cd8:	2201      	movs	r2, #1
 8003cda:	409a      	lsls	r2, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003ce0:	bf00      	nop
 8003ce2:	3714      	adds	r7, #20
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr
 8003cec:	58025408 	.word	0x58025408
 8003cf0:	5802541c 	.word	0x5802541c
 8003cf4:	58025430 	.word	0x58025430
 8003cf8:	58025444 	.word	0x58025444
 8003cfc:	58025458 	.word	0x58025458
 8003d00:	5802546c 	.word	0x5802546c
 8003d04:	58025480 	.word	0x58025480
 8003d08:	58025494 	.word	0x58025494
 8003d0c:	cccccccd 	.word	0xcccccccd
 8003d10:	16009600 	.word	0x16009600
 8003d14:	58025880 	.word	0x58025880
 8003d18:	aaaaaaab 	.word	0xaaaaaaab
 8003d1c:	400204b8 	.word	0x400204b8
 8003d20:	4002040f 	.word	0x4002040f
 8003d24:	10008200 	.word	0x10008200
 8003d28:	40020880 	.word	0x40020880

08003d2c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b085      	sub	sp, #20
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d04a      	beq.n	8003dd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2b08      	cmp	r3, #8
 8003d46:	d847      	bhi.n	8003dd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a25      	ldr	r2, [pc, #148]	; (8003de4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d022      	beq.n	8003d98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a24      	ldr	r2, [pc, #144]	; (8003de8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d01d      	beq.n	8003d98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a22      	ldr	r2, [pc, #136]	; (8003dec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d018      	beq.n	8003d98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a21      	ldr	r2, [pc, #132]	; (8003df0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d013      	beq.n	8003d98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a1f      	ldr	r2, [pc, #124]	; (8003df4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d00e      	beq.n	8003d98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a1e      	ldr	r2, [pc, #120]	; (8003df8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d009      	beq.n	8003d98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a1c      	ldr	r2, [pc, #112]	; (8003dfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d004      	beq.n	8003d98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a1b      	ldr	r2, [pc, #108]	; (8003e00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d101      	bne.n	8003d9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e000      	b.n	8003d9e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d00a      	beq.n	8003db8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003da2:	68fa      	ldr	r2, [r7, #12]
 8003da4:	4b17      	ldr	r3, [pc, #92]	; (8003e04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003da6:	4413      	add	r3, r2
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	461a      	mov	r2, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	4a15      	ldr	r2, [pc, #84]	; (8003e08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003db4:	671a      	str	r2, [r3, #112]	; 0x70
 8003db6:	e009      	b.n	8003dcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003db8:	68fa      	ldr	r2, [r7, #12]
 8003dba:	4b14      	ldr	r3, [pc, #80]	; (8003e0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003dbc:	4413      	add	r3, r2
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4a11      	ldr	r2, [pc, #68]	; (8003e10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003dca:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	3b01      	subs	r3, #1
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	409a      	lsls	r2, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8003dd8:	bf00      	nop
 8003dda:	3714      	adds	r7, #20
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr
 8003de4:	58025408 	.word	0x58025408
 8003de8:	5802541c 	.word	0x5802541c
 8003dec:	58025430 	.word	0x58025430
 8003df0:	58025444 	.word	0x58025444
 8003df4:	58025458 	.word	0x58025458
 8003df8:	5802546c 	.word	0x5802546c
 8003dfc:	58025480 	.word	0x58025480
 8003e00:	58025494 	.word	0x58025494
 8003e04:	1600963f 	.word	0x1600963f
 8003e08:	58025940 	.word	0x58025940
 8003e0c:	1000823f 	.word	0x1000823f
 8003e10:	40020940 	.word	0x40020940

08003e14 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b084      	sub	sp, #16
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d101      	bne.n	8003e26 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e0c6      	b.n	8003fb4 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d102      	bne.n	8003e34 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f006 fa10 	bl	800a254 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2223      	movs	r2, #35	; 0x23
 8003e38:	655a      	str	r2, [r3, #84]	; 0x54

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e3a:	4b60      	ldr	r3, [pc, #384]	; (8003fbc <HAL_ETH_Init+0x1a8>)
 8003e3c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003e40:	4a5e      	ldr	r2, [pc, #376]	; (8003fbc <HAL_ETH_Init+0x1a8>)
 8003e42:	f043 0302 	orr.w	r3, r3, #2
 8003e46:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003e4a:	4b5c      	ldr	r3, [pc, #368]	; (8003fbc <HAL_ETH_Init+0x1a8>)
 8003e4c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003e50:	f003 0302 	and.w	r3, r3, #2
 8003e54:	60bb      	str	r3, [r7, #8]
 8003e56:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	7a1b      	ldrb	r3, [r3, #8]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d103      	bne.n	8003e68 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8003e60:	2000      	movs	r0, #0
 8003e62:	f7fe f8ab 	bl	8001fbc <HAL_SYSCFG_ETHInterfaceSelect>
 8003e66:	e003      	b.n	8003e70 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8003e68:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8003e6c:	f7fe f8a6 	bl	8001fbc <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f042 0201 	orr.w	r2, r2, #1
 8003e82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e86:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e88:	f7fe f880 	bl	8001f8c <HAL_GetTick>
 8003e8c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003e8e:	e00f      	b.n	8003eb0 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8003e90:	f7fe f87c 	bl	8001f8c <HAL_GetTick>
 8003e94:	4602      	mov	r2, r0
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003e9e:	d907      	bls.n	8003eb0 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2204      	movs	r2, #4
 8003ea4:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	22e0      	movs	r2, #224	; 0xe0
 8003eaa:	655a      	str	r2, [r3, #84]	; 0x54
      /* Return Error */
      return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e081      	b.n	8003fb4 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 0301 	and.w	r3, r3, #1
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d1e6      	bne.n	8003e90 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f001 fae8 	bl	8005498 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8003ec8:	f003 f93a 	bl	8007140 <HAL_RCC_GetHCLKFreq>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	4b3c      	ldr	r3, [pc, #240]	; (8003fc0 <HAL_ETH_Init+0x1ac>)
 8003ed0:	fba3 2302 	umull	r2, r3, r3, r2
 8003ed4:	0c9a      	lsrs	r2, r3, #18
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	3a01      	subs	r2, #1
 8003edc:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f001 fa3b 	bl	800535c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8003efc:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8003f00:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	695b      	ldr	r3, [r3, #20]
 8003f06:	f003 0303 	and.w	r3, r3, #3
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d007      	beq.n	8003f1e <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2201      	movs	r2, #1
 8003f12:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	22e0      	movs	r2, #224	; 0xe0
 8003f18:	655a      	str	r2, [r3, #84]	; 0x54
    /* Return Error */
    return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e04a      	b.n	8003fb4 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	f241 1308 	movw	r3, #4360	; 0x1108
 8003f26:	4413      	add	r3, r2
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	4b26      	ldr	r3, [pc, #152]	; (8003fc4 <HAL_ETH_Init+0x1b0>)
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	6952      	ldr	r2, [r2, #20]
 8003f32:	0052      	lsls	r2, r2, #1
 8003f34:	6879      	ldr	r1, [r7, #4]
 8003f36:	6809      	ldr	r1, [r1, #0]
 8003f38:	431a      	orrs	r2, r3
 8003f3a:	f241 1308 	movw	r3, #4360	; 0x1108
 8003f3e:	440b      	add	r3, r1
 8003f40:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f001 fb00 	bl	8005548 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f001 fb44 	bl	80055d6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	3305      	adds	r3, #5
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	021a      	lsls	r2, r3, #8
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	3304      	adds	r3, #4
 8003f5e:	781b      	ldrb	r3, [r3, #0]
 8003f60:	4619      	mov	r1, r3
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	430a      	orrs	r2, r1
 8003f68:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	3303      	adds	r3, #3
 8003f72:	781b      	ldrb	r3, [r3, #0]
 8003f74:	061a      	lsls	r2, r3, #24
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	3302      	adds	r3, #2
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	041b      	lsls	r3, r3, #16
 8003f80:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	3301      	adds	r3, #1
 8003f88:	781b      	ldrb	r3, [r3, #0]
 8003f8a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003f8c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003f9a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003f9c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	65da      	str	r2, [r3, #92]	; 0x5c
  heth->gState = HAL_ETH_STATE_READY;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2210      	movs	r2, #16
 8003faa:	655a      	str	r2, [r3, #84]	; 0x54
  heth->RxState = HAL_ETH_STATE_READY;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2210      	movs	r2, #16
 8003fb0:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8003fb2:	2300      	movs	r3, #0
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3710      	adds	r7, #16
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	58024400 	.word	0x58024400
 8003fc0:	431bde83 	.word	0x431bde83
 8003fc4:	ffff8001 	.word	0xffff8001

08003fc8 <HAL_ETH_DescAssignMemory>:
  * @param  pBuffer1: address of buffer 1
  * @param  pBuffer2: address of buffer 2 if available
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DescAssignMemory(ETH_HandleTypeDef *heth, uint32_t Index, uint8_t *pBuffer1, uint8_t *pBuffer2)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b087      	sub	sp, #28
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	60f8      	str	r0, [r7, #12]
 8003fd0:	60b9      	str	r1, [r7, #8]
 8003fd2:	607a      	str	r2, [r7, #4]
 8003fd4:	603b      	str	r3, [r7, #0]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[Index];
 8003fd6:	68fa      	ldr	r2, [r7, #12]
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	330a      	adds	r3, #10
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	4413      	add	r3, r2
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	617b      	str	r3, [r7, #20]

  if((pBuffer1 == NULL) || (Index >= (uint32_t)ETH_RX_DESC_CNT))
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d002      	beq.n	8003ff0 <HAL_ETH_DescAssignMemory+0x28>
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	2b03      	cmp	r3, #3
 8003fee:	d904      	bls.n	8003ffa <HAL_ETH_DescAssignMemory+0x32>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Return Error */
    return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e021      	b.n	800403e <HAL_ETH_DescAssignMemory+0x76>
  }

  /* write buffer address to RDES0 */
  WRITE_REG(dmarxdesc->DESC0, (uint32_t)pBuffer1);
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	601a      	str	r2, [r3, #0]
  /* store buffer address */
  WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)pBuffer1);
 8004000:	687a      	ldr	r2, [r7, #4]
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	611a      	str	r2, [r3, #16]
  /* set buffer address valid bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	60da      	str	r2, [r3, #12]

  if(pBuffer2 != NULL)
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d00b      	beq.n	8004030 <HAL_ETH_DescAssignMemory+0x68>
  {
    /* write buffer 2 address to RDES1 */
    WRITE_REG(dmarxdesc->DESC2, (uint32_t)pBuffer2);
 8004018:	683a      	ldr	r2, [r7, #0]
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	609a      	str	r2, [r3, #8]
     /* store buffer 2 address */
    WRITE_REG(dmarxdesc->BackupAddr1, (uint32_t)pBuffer2);
 800401e:	683a      	ldr	r2, [r7, #0]
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	615a      	str	r2, [r3, #20]
    /* set buffer 2 address valid bit to RDES3 */
    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	60da      	str	r2, [r3, #12]
  }
  /* set OWN bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800403c:	2300      	movs	r3, #0
}
 800403e:	4618      	mov	r0, r3
 8004040:	371c      	adds	r7, #28
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr

0800404a <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 800404a:	b480      	push	{r7}
 800404c:	b085      	sub	sp, #20
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
  uint32_t descindex;

  ETH_DMADescTypeDef *dmarxdesc;

  if(heth->gState == HAL_ETH_STATE_READY)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004056:	2b10      	cmp	r3, #16
 8004058:	d174      	bne.n	8004144 <HAL_ETH_Start_IT+0xfa>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2223      	movs	r2, #35	; 0x23
 800405e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set IOC bit to all Rx descriptors */
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8004060:	2300      	movs	r3, #0
 8004062:	60fb      	str	r3, [r7, #12]
 8004064:	e00f      	b.n	8004086 <HAL_ETH_Start_IT+0x3c>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	330a      	adds	r3, #10
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	4413      	add	r3, r2
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	60bb      	str	r3, [r7, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	60da      	str	r2, [r3, #12]
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	3301      	adds	r3, #1
 8004084:	60fb      	str	r3, [r7, #12]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2b03      	cmp	r3, #3
 800408a:	d9ec      	bls.n	8004066 <HAL_ETH_Start_IT+0x1c>
    }

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f042 0202 	orr.w	r2, r2, #2
 80040a0:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f042 0201 	orr.w	r2, r2, #1
 80040b0:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f042 0201 	orr.w	r2, r2, #1
 80040c2:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	f241 1304 	movw	r3, #4356	; 0x1104
 80040ce:	4413      	add	r3, r2
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	6811      	ldr	r1, [r2, #0]
 80040d6:	f043 0201 	orr.w	r2, r3, #1
 80040da:	f241 1304 	movw	r3, #4356	; 0x1104
 80040de:	440b      	add	r3, r1
 80040e0:	601a      	str	r2, [r3, #0]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	f241 1308 	movw	r3, #4360	; 0x1108
 80040ea:	4413      	add	r3, r2
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	6811      	ldr	r1, [r2, #0]
 80040f2:	f043 0201 	orr.w	r2, r3, #1
 80040f6:	f241 1308 	movw	r3, #4360	; 0x1108
 80040fa:	440b      	add	r3, r1
 80040fc:	601a      	str	r2, [r3, #0]

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f442 7281 	orr.w	r2, r2, #258	; 0x102
 8004110:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8004114:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	f241 1334 	movw	r3, #4404	; 0x1134
 800411e:	4413      	add	r3, r2
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	6811      	ldr	r1, [r2, #0]
 8004126:	f24d 0241 	movw	r2, #53313	; 0xd041
 800412a:	431a      	orrs	r2, r3
 800412c:	f241 1334 	movw	r3, #4404	; 0x1134
 8004130:	440b      	add	r3, r1
 8004132:	601a      	str	r2, [r3, #0]
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE));

    heth->gState = HAL_ETH_STATE_READY;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2210      	movs	r2, #16
 8004138:	655a      	str	r2, [r3, #84]	; 0x54
    heth->RxState = HAL_ETH_STATE_BUSY_RX;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2222      	movs	r2, #34	; 0x22
 800413e:	659a      	str	r2, [r3, #88]	; 0x58

    return HAL_OK;
 8004140:	2300      	movs	r3, #0
 8004142:	e000      	b.n	8004146 <HAL_ETH_Start_IT+0xfc>
  }
  else
  {
    return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
  }
}
 8004146:	4618      	mov	r0, r3
 8004148:	3714      	adds	r7, #20
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr
	...

08004154 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8004154:	b480      	push	{r7}
 8004156:	b085      	sub	sp, #20
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if(heth->gState != HAL_ETH_STATE_RESET)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004160:	2b00      	cmp	r3, #0
 8004162:	d067      	beq.n	8004234 <HAL_ETH_Stop_IT+0xe0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2223      	movs	r2, #35	; 0x23
 8004168:	655a      	str	r2, [r3, #84]	; 0x54
    /* Disable intrrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	f241 1334 	movw	r3, #4404	; 0x1134
 8004172:	4413      	add	r3, r2
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	6811      	ldr	r1, [r2, #0]
 800417a:	4a32      	ldr	r2, [pc, #200]	; (8004244 <HAL_ETH_Stop_IT+0xf0>)
 800417c:	401a      	ands	r2, r3
 800417e:	f241 1334 	movw	r3, #4404	; 0x1134
 8004182:	440b      	add	r3, r1
 8004184:	601a      	str	r2, [r3, #0]
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	f241 1304 	movw	r3, #4356	; 0x1104
 800418e:	4413      	add	r3, r2
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	6811      	ldr	r1, [r2, #0]
 8004196:	f023 0201 	bic.w	r2, r3, #1
 800419a:	f241 1304 	movw	r3, #4356	; 0x1104
 800419e:	440b      	add	r3, r1
 80041a0:	601a      	str	r2, [r3, #0]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	f241 1308 	movw	r3, #4360	; 0x1108
 80041aa:	4413      	add	r3, r2
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	6811      	ldr	r1, [r2, #0]
 80041b2:	f023 0201 	bic.w	r2, r3, #1
 80041b6:	f241 1308 	movw	r3, #4360	; 0x1108
 80041ba:	440b      	add	r3, r1
 80041bc:	601a      	str	r2, [r3, #0]

    /* Disable the MAC reception */
    CLEAR_BIT( heth->Instance->MACCR, ETH_MACCR_RE);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f022 0201 	bic.w	r2, r2, #1
 80041cc:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f042 0201 	orr.w	r2, r2, #1
 80041de:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f022 0202 	bic.w	r2, r2, #2
 80041f0:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80041f2:	2300      	movs	r3, #0
 80041f4:	60fb      	str	r3, [r7, #12]
 80041f6:	e00f      	b.n	8004218 <HAL_ETH_Stop_IT+0xc4>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	330a      	adds	r3, #10
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	4413      	add	r3, r2
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	68db      	ldr	r3, [r3, #12]
 800420a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	60da      	str	r2, [r3, #12]
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	3301      	adds	r3, #1
 8004216:	60fb      	str	r3, [r7, #12]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2b03      	cmp	r3, #3
 800421c:	d9ec      	bls.n	80041f8 <HAL_ETH_Stop_IT+0xa4>
    }

    heth->RxDescList.ItMode = 0U;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	64da      	str	r2, [r3, #76]	; 0x4c

    heth->gState = HAL_ETH_STATE_READY;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2210      	movs	r2, #16
 8004228:	655a      	str	r2, [r3, #84]	; 0x54
    heth->RxState = HAL_ETH_STATE_READY;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2210      	movs	r2, #16
 800422e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Return function status */
    return HAL_OK;
 8004230:	2300      	movs	r3, #0
 8004232:	e000      	b.n	8004236 <HAL_ETH_Stop_IT+0xe2>
  }
  else
  {
    return HAL_ERROR;
 8004234:	2301      	movs	r3, #1
  }
}
 8004236:	4618      	mov	r0, r3
 8004238:	3714      	adds	r7, #20
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr
 8004242:	bf00      	nop
 8004244:	ffff2fbe 	.word	0xffff2fbe

08004248 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b086      	sub	sp, #24
 800424c:	af00      	add	r7, sp, #0
 800424e:	60f8      	str	r0, [r7, #12]
 8004250:	60b9      	str	r1, [r7, #8]
 8004252:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  const ETH_DMADescTypeDef *dmatxdesc;

  if(pTxConfig == NULL)
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d107      	bne.n	800426a <HAL_ETH_Transmit+0x22>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800425e:	f043 0201 	orr.w	r2, r3, #1
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	65da      	str	r2, [r3, #92]	; 0x5c
    return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e073      	b.n	8004352 <HAL_ETH_Transmit+0x10a>
  }

  if(heth->gState == HAL_ETH_STATE_READY)
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800426e:	2b10      	cmp	r3, #16
 8004270:	d16e      	bne.n	8004350 <HAL_ETH_Transmit+0x108>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8004272:	2200      	movs	r2, #0
 8004274:	68b9      	ldr	r1, [r7, #8]
 8004276:	68f8      	ldr	r0, [r7, #12]
 8004278:	f001 fa0a 	bl	8005690 <ETH_Prepare_Tx_Descriptors>
 800427c:	4603      	mov	r3, r0
 800427e:	2b00      	cmp	r3, #0
 8004280:	d007      	beq.n	8004292 <HAL_ETH_Transmit+0x4a>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004286:	f043 0202 	orr.w	r2, r3, #2
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e05f      	b.n	8004352 <HAL_ETH_Transmit+0x10a>
    }

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	3206      	adds	r2, #6
 800429a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800429e:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042a4:	1c5a      	adds	r2, r3, #1
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	629a      	str	r2, [r3, #40]	; 0x28
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ae:	2b03      	cmp	r3, #3
 80042b0:	d904      	bls.n	80042bc <HAL_ETH_Transmit+0x74>
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042b6:	1f1a      	subs	r2, r3, #4
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	68fa      	ldr	r2, [r7, #12]
 80042c6:	3106      	adds	r1, #6
 80042c8:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80042cc:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 80042d0:	601a      	str	r2, [r3, #0]

    tickstart = HAL_GetTick();
 80042d2:	f7fd fe5b 	bl	8001f8c <HAL_GetTick>
 80042d6:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occured */
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 80042d8:	e034      	b.n	8004344 <HAL_ETH_Transmit+0xfc>
    {
      if((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d011      	beq.n	8004310 <HAL_ETH_Transmit+0xc8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042f0:	f043 0208 	orr.w	r2, r3, #8
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	65da      	str	r2, [r3, #92]	; 0x5c
        heth->DMAErrorCode = heth->Instance->DMACSR;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	661a      	str	r2, [r3, #96]	; 0x60
        /* Set ETH HAL State to Ready */
        heth->gState = HAL_ETH_STATE_ERROR;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	22e0      	movs	r2, #224	; 0xe0
 800430a:	655a      	str	r2, [r3, #84]	; 0x54
        /* Return function status */
        return HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e020      	b.n	8004352 <HAL_ETH_Transmit+0x10a>
      }

      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004316:	d015      	beq.n	8004344 <HAL_ETH_Transmit+0xfc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout) || (Timeout == 0U))
 8004318:	f7fd fe38 	bl	8001f8c <HAL_GetTick>
 800431c:	4602      	mov	r2, r0
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	429a      	cmp	r2, r3
 8004326:	d302      	bcc.n	800432e <HAL_ETH_Transmit+0xe6>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d10a      	bne.n	8004344 <HAL_ETH_Transmit+0xfc>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004332:	f043 0204 	orr.w	r2, r3, #4
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	65da      	str	r2, [r3, #92]	; 0x5c
          heth->gState = HAL_ETH_STATE_ERROR;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	22e0      	movs	r2, #224	; 0xe0
 800433e:	655a      	str	r2, [r3, #84]	; 0x54
          return HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	e006      	b.n	8004352 <HAL_ETH_Transmit+0x10a>
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	2b00      	cmp	r3, #0
 800434a:	dbc6      	blt.n	80042da <HAL_ETH_Transmit+0x92>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 800434c:	2300      	movs	r3, #0
 800434e:	e000      	b.n	8004352 <HAL_ETH_Transmit+0x10a>
  }
  else
  {
    return HAL_ERROR;
 8004350:	2301      	movs	r3, #1
  }
}
 8004352:	4618      	mov	r0, r3
 8004354:	3718      	adds	r7, #24
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}

0800435a <HAL_ETH_IsRxDataAvailable>:
  *         the configuration information for ETHERNET module
  * @retval  1: A Packet is received
  *          0: no Packet received
  */
uint8_t HAL_ETH_IsRxDataAvailable(ETH_HandleTypeDef *heth)
{
 800435a:	b480      	push	{r7}
 800435c:	b089      	sub	sp, #36	; 0x24
 800435e:	af00      	add	r7, sp, #0
 8004360:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	332c      	adds	r3, #44	; 0x2c
 8004366:	60bb      	str	r3, [r7, #8]
  uint32_t descidx = dmarxdesclist->CurRxDesc;
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	691b      	ldr	r3, [r3, #16]
 800436c:	61fb      	str	r3, [r7, #28]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	69fa      	ldr	r2, [r7, #28]
 8004372:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004376:	61bb      	str	r3, [r7, #24]
  uint32_t descscancnt = 0;
 8004378:	2300      	movs	r3, #0
 800437a:	617b      	str	r3, [r7, #20]
  uint32_t appdesccnt = 0, firstappdescidx = 0;
 800437c:	2300      	movs	r3, #0
 800437e:	613b      	str	r3, [r7, #16]
 8004380:	2300      	movs	r3, #0
 8004382:	60fb      	str	r3, [r7, #12]

  if(dmarxdesclist->AppDescNbr != 0U)
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	699b      	ldr	r3, [r3, #24]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d06b      	beq.n	8004464 <HAL_ETH_IsRxDataAvailable+0x10a>
  {
    /* data already received by not yet processed*/
    return 0;
 800438c:	2300      	movs	r3, #0
 800438e:	e0ce      	b.n	800452e <HAL_ETH_IsRxDataAvailable+0x1d4>
  }

  /* Check if descriptor is not owned by DMA */
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
  {
    descscancnt++;
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	3301      	adds	r3, #1
 8004394:	617b      	str	r3, [r7, #20]

    /* Check if last descriptor */
    if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8004396:	69bb      	ldr	r3, [r7, #24]
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d036      	beq.n	8004410 <HAL_ETH_IsRxDataAvailable+0xb6>
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	3301      	adds	r3, #1
 80043a6:	613b      	str	r3, [r7, #16]

      if(appdesccnt == 1U)
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d101      	bne.n	80043b2 <HAL_ETH_IsRxDataAvailable+0x58>
      {
        WRITE_REG(firstappdescidx, descidx);
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	60fb      	str	r3, [r7, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	3301      	adds	r3, #1
 80043b6:	61fb      	str	r3, [r7, #28]
 80043b8:	69fb      	ldr	r3, [r7, #28]
 80043ba:	2b03      	cmp	r3, #3
 80043bc:	d902      	bls.n	80043c4 <HAL_ETH_IsRxDataAvailable+0x6a>
 80043be:	69fb      	ldr	r3, [r7, #28]
 80043c0:	3b04      	subs	r3, #4
 80043c2:	61fb      	str	r3, [r7, #28]

      /* Check for Context descriptor */
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	69fa      	ldr	r2, [r7, #28]
 80043c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043cc:	61bb      	str	r3, [r7, #24]

      if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_OWN)  == (uint32_t)RESET)
 80043ce:	69bb      	ldr	r3, [r7, #24]
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	db11      	blt.n	80043fa <HAL_ETH_IsRxDataAvailable+0xa0>
      {
        if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 80043d6:	69bb      	ldr	r3, [r7, #24]
 80043d8:	68db      	ldr	r3, [r3, #12]
 80043da:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d00b      	beq.n	80043fa <HAL_ETH_IsRxDataAvailable+0xa0>
        {
          /* Increment the number of descriptors to be passed to the application */
          dmarxdesclist->AppContextDesc = 1;
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	2201      	movs	r2, #1
 80043e6:	61da      	str	r2, [r3, #28]
          /* Increment current rx descriptor index */
          INCR_RX_DESC_INDEX(descidx, 1U);
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	3301      	adds	r3, #1
 80043ec:	61fb      	str	r3, [r7, #28]
 80043ee:	69fb      	ldr	r3, [r7, #28]
 80043f0:	2b03      	cmp	r3, #3
 80043f2:	d902      	bls.n	80043fa <HAL_ETH_IsRxDataAvailable+0xa0>
 80043f4:	69fb      	ldr	r3, [r7, #28]
 80043f6:	3b04      	subs	r3, #4
 80043f8:	61fb      	str	r3, [r7, #28]
        }
      }
      /* Fill information to Rx descriptors list */
      dmarxdesclist->CurRxDesc = descidx;
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	69fa      	ldr	r2, [r7, #28]
 80043fe:	611a      	str	r2, [r3, #16]
      dmarxdesclist->FirstAppDesc = firstappdescidx;
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	68fa      	ldr	r2, [r7, #12]
 8004404:	615a      	str	r2, [r3, #20]
      dmarxdesclist->AppDescNbr = appdesccnt;
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	693a      	ldr	r2, [r7, #16]
 800440a:	619a      	str	r2, [r3, #24]

      /* Return function status */
      return 1;
 800440c:	2301      	movs	r3, #1
 800440e:	e08e      	b.n	800452e <HAL_ETH_IsRxDataAvailable+0x1d4>
    }
    /* Check if first descriptor */
    else if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8004410:	69bb      	ldr	r3, [r7, #24]
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004418:	2b00      	cmp	r3, #0
 800441a:	d012      	beq.n	8004442 <HAL_ETH_IsRxDataAvailable+0xe8>
    {
      WRITE_REG(firstappdescidx, descidx);
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	60fb      	str	r3, [r7, #12]
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt = 1U;
 8004420:	2301      	movs	r3, #1
 8004422:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8004424:	69fb      	ldr	r3, [r7, #28]
 8004426:	3301      	adds	r3, #1
 8004428:	61fb      	str	r3, [r7, #28]
 800442a:	69fb      	ldr	r3, [r7, #28]
 800442c:	2b03      	cmp	r3, #3
 800442e:	d902      	bls.n	8004436 <HAL_ETH_IsRxDataAvailable+0xdc>
 8004430:	69fb      	ldr	r3, [r7, #28]
 8004432:	3b04      	subs	r3, #4
 8004434:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	69fa      	ldr	r2, [r7, #28]
 800443a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800443e:	61bb      	str	r3, [r7, #24]
 8004440:	e010      	b.n	8004464 <HAL_ETH_IsRxDataAvailable+0x10a>
    }
    /* It should be an intermediate descriptor */
    else
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	3301      	adds	r3, #1
 8004446:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	3301      	adds	r3, #1
 800444c:	61fb      	str	r3, [r7, #28]
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	2b03      	cmp	r3, #3
 8004452:	d902      	bls.n	800445a <HAL_ETH_IsRxDataAvailable+0x100>
 8004454:	69fb      	ldr	r3, [r7, #28]
 8004456:	3b04      	subs	r3, #4
 8004458:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	69fa      	ldr	r2, [r7, #28]
 800445e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004462:	61bb      	str	r3, [r7, #24]
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	2b00      	cmp	r3, #0
 800446a:	db02      	blt.n	8004472 <HAL_ETH_IsRxDataAvailable+0x118>
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	2b03      	cmp	r3, #3
 8004470:	d98e      	bls.n	8004390 <HAL_ETH_IsRxDataAvailable+0x36>
    }
  }

  /* Build Descriptors if an incomplete Packet is received */
  if(appdesccnt > 0U)
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d056      	beq.n	8004526 <HAL_ETH_IsRxDataAvailable+0x1cc>
  {
    dmarxdesclist->CurRxDesc = descidx;
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	69fa      	ldr	r2, [r7, #28]
 800447c:	611a      	str	r2, [r3, #16]
    dmarxdesclist->FirstAppDesc = firstappdescidx;
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	68fa      	ldr	r2, [r7, #12]
 8004482:	615a      	str	r2, [r3, #20]
    descidx = firstappdescidx;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	61fb      	str	r3, [r7, #28]
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	69fa      	ldr	r2, [r7, #28]
 800448c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004490:	61bb      	str	r3, [r7, #24]

    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 8004492:	2300      	movs	r3, #0
 8004494:	617b      	str	r3, [r7, #20]
 8004496:	e03b      	b.n	8004510 <HAL_ETH_IsRxDataAvailable+0x1b6>
    {
      WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 8004498:	69bb      	ldr	r3, [r7, #24]
 800449a:	691a      	ldr	r2, [r3, #16]
 800449c:	69bb      	ldr	r3, [r7, #24]
 800449e:	601a      	str	r2, [r3, #0]
      WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 80044a0:	69bb      	ldr	r3, [r7, #24]
 80044a2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80044a6:	60da      	str	r2, [r3, #12]

      if (READ_REG(dmarxdesc->BackupAddr1) != ((uint32_t)RESET))
 80044a8:	69bb      	ldr	r3, [r7, #24]
 80044aa:	695b      	ldr	r3, [r3, #20]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d009      	beq.n	80044c4 <HAL_ETH_IsRxDataAvailable+0x16a>
      {
        WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 80044b0:	69bb      	ldr	r3, [r7, #24]
 80044b2:	695a      	ldr	r2, [r3, #20]
 80044b4:	69bb      	ldr	r3, [r7, #24]
 80044b6:	609a      	str	r2, [r3, #8]
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 80044b8:	69bb      	ldr	r3, [r7, #24]
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80044c0:	69bb      	ldr	r3, [r7, #24]
 80044c2:	60da      	str	r2, [r3, #12]
      }

      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 80044c4:	69bb      	ldr	r3, [r7, #24]
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80044cc:	69bb      	ldr	r3, [r7, #24]
 80044ce:	60da      	str	r2, [r3, #12]

      if(dmarxdesclist->ItMode != ((uint32_t)RESET))
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	6a1b      	ldr	r3, [r3, #32]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d005      	beq.n	80044e4 <HAL_ETH_IsRxDataAvailable+0x18a>
      {
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 80044d8:	69bb      	ldr	r3, [r7, #24]
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80044e0:	69bb      	ldr	r3, [r7, #24]
 80044e2:	60da      	str	r2, [r3, #12]
      }
      if(descscancnt < (appdesccnt - 1U))
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	3b01      	subs	r3, #1
 80044e8:	697a      	ldr	r2, [r7, #20]
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d20d      	bcs.n	800450a <HAL_ETH_IsRxDataAvailable+0x1b0>
      {
        /* Increment rx descriptor index */
        INCR_RX_DESC_INDEX(descidx, 1U);
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	3301      	adds	r3, #1
 80044f2:	61fb      	str	r3, [r7, #28]
 80044f4:	69fb      	ldr	r3, [r7, #28]
 80044f6:	2b03      	cmp	r3, #3
 80044f8:	d902      	bls.n	8004500 <HAL_ETH_IsRxDataAvailable+0x1a6>
 80044fa:	69fb      	ldr	r3, [r7, #28]
 80044fc:	3b04      	subs	r3, #4
 80044fe:	61fb      	str	r3, [r7, #28]
        /* Get descriptor address */
        dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	69fa      	ldr	r2, [r7, #28]
 8004504:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004508:	61bb      	str	r3, [r7, #24]
    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	3301      	adds	r3, #1
 800450e:	617b      	str	r3, [r7, #20]
 8004510:	697a      	ldr	r2, [r7, #20]
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	429a      	cmp	r2, r3
 8004516:	d3bf      	bcc.n	8004498 <HAL_ETH_IsRxDataAvailable+0x13e>
      }
    }

    /* Set the Tail pointer address to the last rx descriptor hold by the app */
    WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6819      	ldr	r1, [r3, #0]
 800451c:	69ba      	ldr	r2, [r7, #24]
 800451e:	f241 1328 	movw	r3, #4392	; 0x1128
 8004522:	440b      	add	r3, r1
 8004524:	601a      	str	r2, [r3, #0]
  }

  /* Fill information to Rx descriptors list: No received Packet */
  dmarxdesclist->AppDescNbr = 0U;
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	2200      	movs	r2, #0
 800452a:	619a      	str	r2, [r3, #24]

  return 0;
 800452c:	2300      	movs	r3, #0
}
 800452e:	4618      	mov	r0, r3
 8004530:	3724      	adds	r7, #36	; 0x24
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr

0800453a <HAL_ETH_GetRxDataBuffer>:
  *         the configuration information for ETHERNET module
  * @param  RxBuffer: Pointer to a ETH_BufferTypeDef structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataBuffer(ETH_HandleTypeDef *heth, ETH_BufferTypeDef *RxBuffer)
{
 800453a:	b580      	push	{r7, lr}
 800453c:	b08a      	sub	sp, #40	; 0x28
 800453e:	af00      	add	r7, sp, #0
 8004540:	6078      	str	r0, [r7, #4]
 8004542:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	332c      	adds	r3, #44	; 0x2c
 8004548:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	695b      	ldr	r3, [r3, #20]
 800454e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t index, accumulatedlen = 0, lastdesclen;
 8004550:	2300      	movs	r3, #0
 8004552:	61fb      	str	r3, [r7, #28]
  __IO const ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004558:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800455c:	61bb      	str	r3, [r7, #24]
  ETH_BufferTypeDef *rxbuff = RxBuffer;
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	617b      	str	r3, [r7, #20]

  if(rxbuff == NULL)
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d104      	bne.n	8004572 <HAL_ETH_GetRxDataBuffer+0x38>
  {
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	65da      	str	r2, [r3, #92]	; 0x5c
    return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e07d      	b.n	800466e <HAL_ETH_GetRxDataBuffer+0x134>
  }

  if(dmarxdesclist->AppDescNbr == 0U)
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	699b      	ldr	r3, [r3, #24]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d10f      	bne.n	800459a <HAL_ETH_GetRxDataBuffer+0x60>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f7ff feed 	bl	800435a <HAL_ETH_IsRxDataAvailable>
 8004580:	4603      	mov	r3, r0
 8004582:	2b00      	cmp	r3, #0
 8004584:	d101      	bne.n	800458a <HAL_ETH_GetRxDataBuffer+0x50>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e071      	b.n	800466e <HAL_ETH_GetRxDataBuffer+0x134>
    }
    else
    {
      descidx = dmarxdesclist->FirstAppDesc;
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	695b      	ldr	r3, [r3, #20]
 800458e:	627b      	str	r3, [r7, #36]	; 0x24
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004594:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004598:	61bb      	str	r3, [r7, #24]
    }
  }

  /* Get intermediate descriptors buffers: in case of the Packet is splitted into multi descriptors */
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 800459a:	2300      	movs	r3, #0
 800459c:	623b      	str	r3, [r7, #32]
 800459e:	e031      	b.n	8004604 <HAL_ETH_GetRxDataBuffer+0xca>
  {
    /* Get Address and length of the first buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	691b      	ldr	r3, [r3, #16]
 80045a4:	461a      	mov	r2, r3
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	601a      	str	r2, [r3, #0]
    rxbuff->len =  heth->Init.RxBuffLen;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	695a      	ldr	r2, [r3, #20]
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	605a      	str	r2, [r3, #4]

    /* Check if the second buffer address of this descriptor is valid */
    if(dmarxdesc->BackupAddr1 != 0U)
 80045b2:	69bb      	ldr	r3, [r7, #24]
 80045b4:	695b      	ldr	r3, [r3, #20]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d00b      	beq.n	80045d2 <HAL_ETH_GetRxDataBuffer+0x98>
    {
      /* Point to next buffer */
      rxbuff = rxbuff->next;
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	617b      	str	r3, [r7, #20]
      /* Get Address and length of the second buffer address */
      rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 80045c0:	69bb      	ldr	r3, [r7, #24]
 80045c2:	695b      	ldr	r3, [r3, #20]
 80045c4:	461a      	mov	r2, r3
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	601a      	str	r2, [r3, #0]
      rxbuff->len =  heth->Init.RxBuffLen;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	695a      	ldr	r2, [r3, #20]
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	605a      	str	r2, [r3, #4]
    {
      /* Nothing to do here */
    }

    /* get total length until this descriptor */
    accumulatedlen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 80045d2:	69bb      	ldr	r3, [r7, #24]
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80045da:	61fb      	str	r3, [r7, #28]

    /* Increment to next descriptor */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80045dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045de:	3301      	adds	r3, #1
 80045e0:	627b      	str	r3, [r7, #36]	; 0x24
 80045e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e4:	2b03      	cmp	r3, #3
 80045e6:	d902      	bls.n	80045ee <HAL_ETH_GetRxDataBuffer+0xb4>
 80045e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ea:	3b04      	subs	r3, #4
 80045ec:	627b      	str	r3, [r7, #36]	; 0x24
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045f6:	61bb      	str	r3, [r7, #24]

    /* Point to next buffer */
    rxbuff = rxbuff->next;
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	617b      	str	r3, [r7, #20]
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 80045fe:	6a3b      	ldr	r3, [r7, #32]
 8004600:	3301      	adds	r3, #1
 8004602:	623b      	str	r3, [r7, #32]
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	699b      	ldr	r3, [r3, #24]
 8004608:	3b01      	subs	r3, #1
 800460a:	6a3a      	ldr	r2, [r7, #32]
 800460c:	429a      	cmp	r2, r3
 800460e:	d3c7      	bcc.n	80045a0 <HAL_ETH_GetRxDataBuffer+0x66>
  }

  /* last descriptor data length */
  lastdesclen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - accumulatedlen;
 8004610:	69bb      	ldr	r3, [r7, #24]
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8004618:	69fb      	ldr	r3, [r7, #28]
 800461a:	1ad3      	subs	r3, r2, r3
 800461c:	60fb      	str	r3, [r7, #12]

  /* Get Address of the first buffer address */
  rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 800461e:	69bb      	ldr	r3, [r7, #24]
 8004620:	691b      	ldr	r3, [r3, #16]
 8004622:	461a      	mov	r2, r3
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	601a      	str	r2, [r3, #0]

  /* data is in only one buffer */
  if(lastdesclen <= heth->Init.RxBuffLen)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	695b      	ldr	r3, [r3, #20]
 800462c:	68fa      	ldr	r2, [r7, #12]
 800462e:	429a      	cmp	r2, r3
 8004630:	d803      	bhi.n	800463a <HAL_ETH_GetRxDataBuffer+0x100>
  {
    rxbuff->len = lastdesclen;
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	68fa      	ldr	r2, [r7, #12]
 8004636:	605a      	str	r2, [r3, #4]
 8004638:	e018      	b.n	800466c <HAL_ETH_GetRxDataBuffer+0x132>
  }
  /* data is in two buffers */
  else if(dmarxdesc->BackupAddr1 != 0U)
 800463a:	69bb      	ldr	r3, [r7, #24]
 800463c:	695b      	ldr	r3, [r3, #20]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d012      	beq.n	8004668 <HAL_ETH_GetRxDataBuffer+0x12e>
  {
    /* Get the Length of the first buffer address */
    rxbuff->len = heth->Init.RxBuffLen;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	695a      	ldr	r2, [r3, #20]
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	605a      	str	r2, [r3, #4]
    /* Point to next buffer */
    rxbuff = rxbuff->next;
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	617b      	str	r3, [r7, #20]
    /* Get the Address the Length of the second buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 8004650:	69bb      	ldr	r3, [r7, #24]
 8004652:	695b      	ldr	r3, [r3, #20]
 8004654:	461a      	mov	r2, r3
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	601a      	str	r2, [r3, #0]
    rxbuff->len =  lastdesclen - (heth->Init.RxBuffLen);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	695b      	ldr	r3, [r3, #20]
 800465e:	68fa      	ldr	r2, [r7, #12]
 8004660:	1ad2      	subs	r2, r2, r3
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	605a      	str	r2, [r3, #4]
 8004666:	e001      	b.n	800466c <HAL_ETH_GetRxDataBuffer+0x132>
  }
  else /* Buffer 2 not valid*/
  {
    return HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e000      	b.n	800466e <HAL_ETH_GetRxDataBuffer+0x134>
  }

  return HAL_OK;
 800466c:	2300      	movs	r3, #0
}
 800466e:	4618      	mov	r0, r3
 8004670:	3728      	adds	r7, #40	; 0x28
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}

08004676 <HAL_ETH_GetRxDataLength>:
  *         the configuration information for ETHERNET module
  * @param  Length: parameter to hold Rx packet length
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataLength(ETH_HandleTypeDef *heth, uint32_t *Length)
{
 8004676:	b580      	push	{r7, lr}
 8004678:	b086      	sub	sp, #24
 800467a:	af00      	add	r7, sp, #0
 800467c:	6078      	str	r0, [r7, #4]
 800467e:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	332c      	adds	r3, #44	; 0x2c
 8004684:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	695b      	ldr	r3, [r3, #20]
 800468a:	617b      	str	r3, [r7, #20]
  __IO const ETH_DMADescTypeDef *dmarxdesc;

  if(dmarxdesclist->AppDescNbr == 0U)
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	699b      	ldr	r3, [r3, #24]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d107      	bne.n	80046a4 <HAL_ETH_GetRxDataLength+0x2e>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f7ff fe60 	bl	800435a <HAL_ETH_IsRxDataAvailable>
 800469a:	4603      	mov	r3, r0
 800469c:	2b00      	cmp	r3, #0
 800469e:	d101      	bne.n	80046a4 <HAL_ETH_GetRxDataLength+0x2e>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	e017      	b.n	80046d4 <HAL_ETH_GetRxDataLength+0x5e>
    }
  }

  /* Get index of last descriptor */
  INCR_RX_DESC_INDEX(descidx, (dmarxdesclist->AppDescNbr - 1U));
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	699a      	ldr	r2, [r3, #24]
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	4413      	add	r3, r2
 80046ac:	3b01      	subs	r3, #1
 80046ae:	617b      	str	r3, [r7, #20]
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	2b03      	cmp	r3, #3
 80046b4:	d902      	bls.n	80046bc <HAL_ETH_GetRxDataLength+0x46>
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	3b04      	subs	r3, #4
 80046ba:	617b      	str	r3, [r7, #20]
  /* Point to last descriptor */
  dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	697a      	ldr	r2, [r7, #20]
 80046c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046c4:	60fb      	str	r3, [r7, #12]

  *Length = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80046d2:	2300      	movs	r3, #0
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	3718      	adds	r7, #24
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}

080046dc <HAL_ETH_BuildRxDescriptors>:
* @param  heth: pointer to a ETH_HandleTypeDef structure that contains
*         the configuration information for ETHERNET module
* @retval HAL status.
*/
HAL_StatusTypeDef HAL_ETH_BuildRxDescriptors(ETH_HandleTypeDef *heth)
{
 80046dc:	b480      	push	{r7}
 80046de:	b089      	sub	sp, #36	; 0x24
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	332c      	adds	r3, #44	; 0x2c
 80046e8:	60fb      	str	r3, [r7, #12]
  uint32_t descindex = dmarxdesclist->FirstAppDesc;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	695b      	ldr	r3, [r3, #20]
 80046ee:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	69fa      	ldr	r2, [r7, #28]
 80046f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046f8:	61bb      	str	r3, [r7, #24]
  uint32_t totalappdescnbr = dmarxdesclist->AppDescNbr;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	699b      	ldr	r3, [r3, #24]
 80046fe:	617b      	str	r3, [r7, #20]
  uint32_t descscan;

  if(dmarxdesclist->AppDescNbr == 0U)
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	699b      	ldr	r3, [r3, #24]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d101      	bne.n	800470c <HAL_ETH_BuildRxDescriptors+0x30>
  {
    /* No Rx descriptors to build */
    return HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	e057      	b.n	80047bc <HAL_ETH_BuildRxDescriptors+0xe0>
  }

  if(dmarxdesclist->AppContextDesc != 0U)
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	69db      	ldr	r3, [r3, #28]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d002      	beq.n	800471a <HAL_ETH_BuildRxDescriptors+0x3e>
  {
    /* A context descriptor is available */
    totalappdescnbr += 1U;
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	3301      	adds	r3, #1
 8004718:	617b      	str	r3, [r7, #20]
  }

  for(descscan =0; descscan < totalappdescnbr; descscan++)
 800471a:	2300      	movs	r3, #0
 800471c:	613b      	str	r3, [r7, #16]
 800471e:	e03b      	b.n	8004798 <HAL_ETH_BuildRxDescriptors+0xbc>
  {
    WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 8004720:	69bb      	ldr	r3, [r7, #24]
 8004722:	691a      	ldr	r2, [r3, #16]
 8004724:	69bb      	ldr	r3, [r7, #24]
 8004726:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8004728:	69bb      	ldr	r3, [r7, #24]
 800472a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800472e:	60da      	str	r2, [r3, #12]

    if (READ_REG(dmarxdesc->BackupAddr1) != 0U)
 8004730:	69bb      	ldr	r3, [r7, #24]
 8004732:	695b      	ldr	r3, [r3, #20]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d009      	beq.n	800474c <HAL_ETH_BuildRxDescriptors+0x70>
    {
      WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 8004738:	69bb      	ldr	r3, [r7, #24]
 800473a:	695a      	ldr	r2, [r3, #20]
 800473c:	69bb      	ldr	r3, [r7, #24]
 800473e:	609a      	str	r2, [r3, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8004740:	69bb      	ldr	r3, [r7, #24]
 8004742:	68db      	ldr	r3, [r3, #12]
 8004744:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004748:	69bb      	ldr	r3, [r7, #24]
 800474a:	60da      	str	r2, [r3, #12]
    }

    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 800474c:	69bb      	ldr	r3, [r7, #24]
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004754:	69bb      	ldr	r3, [r7, #24]
 8004756:	60da      	str	r2, [r3, #12]

    if(dmarxdesclist->ItMode != 0U)
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	6a1b      	ldr	r3, [r3, #32]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d005      	beq.n	800476c <HAL_ETH_BuildRxDescriptors+0x90>
    {
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8004760:	69bb      	ldr	r3, [r7, #24]
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004768:	69bb      	ldr	r3, [r7, #24]
 800476a:	60da      	str	r2, [r3, #12]
    }

    if(descscan < (totalappdescnbr - 1U))
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	3b01      	subs	r3, #1
 8004770:	693a      	ldr	r2, [r7, #16]
 8004772:	429a      	cmp	r2, r3
 8004774:	d20d      	bcs.n	8004792 <HAL_ETH_BuildRxDescriptors+0xb6>
    {
      /* Increment rx descriptor index */
      INCR_RX_DESC_INDEX(descindex, 1U);
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	3301      	adds	r3, #1
 800477a:	61fb      	str	r3, [r7, #28]
 800477c:	69fb      	ldr	r3, [r7, #28]
 800477e:	2b03      	cmp	r3, #3
 8004780:	d902      	bls.n	8004788 <HAL_ETH_BuildRxDescriptors+0xac>
 8004782:	69fb      	ldr	r3, [r7, #28]
 8004784:	3b04      	subs	r3, #4
 8004786:	61fb      	str	r3, [r7, #28]
      /* Get descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	69fa      	ldr	r2, [r7, #28]
 800478c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004790:	61bb      	str	r3, [r7, #24]
  for(descscan =0; descscan < totalappdescnbr; descscan++)
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	3301      	adds	r3, #1
 8004796:	613b      	str	r3, [r7, #16]
 8004798:	693a      	ldr	r2, [r7, #16]
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	429a      	cmp	r2, r3
 800479e:	d3bf      	bcc.n	8004720 <HAL_ETH_BuildRxDescriptors+0x44>
    }
  }

  /* Set the Tail pointer address to the last rx descriptor hold by the app */
  WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6819      	ldr	r1, [r3, #0]
 80047a4:	69ba      	ldr	r2, [r7, #24]
 80047a6:	f241 1328 	movw	r3, #4392	; 0x1128
 80047aa:	440b      	add	r3, r1
 80047ac:	601a      	str	r2, [r3, #0]

  /* reset the Application desc number */
  WRITE_REG(dmarxdesclist->AppDescNbr, 0);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2200      	movs	r2, #0
 80047b2:	619a      	str	r2, [r3, #24]

  /*  reset the application context descriptor */
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	649a      	str	r2, [r3, #72]	; 0x48

  return HAL_OK;
 80047ba:	2300      	movs	r3, #0
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3724      	adds	r7, #36	; 0x24
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr

080047c8 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b082      	sub	sp, #8
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047de:	2b40      	cmp	r3, #64	; 0x40
 80047e0:	d113      	bne.n	800480a <HAL_ETH_IRQHandler+0x42>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	f241 1334 	movw	r3, #4404	; 0x1134
 80047ea:	4413      	add	r3, r2
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047f2:	2b40      	cmp	r3, #64	; 0x40
 80047f4:	d109      	bne.n	800480a <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f005 fe02 	bl	800a400 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8004804:	f248 0240 	movw	r2, #32832	; 0x8040
 8004808:	601a      	str	r2, [r3, #0]
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0301 	and.w	r3, r3, #1
 8004818:	2b01      	cmp	r3, #1
 800481a:	d113      	bne.n	8004844 <HAL_ETH_IRQHandler+0x7c>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	f241 1334 	movw	r3, #4404	; 0x1134
 8004824:	4413      	add	r3, r2
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 0301 	and.w	r3, r3, #1
 800482c:	2b01      	cmp	r3, #1
 800482e:	d109      	bne.n	8004844 <HAL_ETH_IRQHandler+0x7c>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
        /*Call registered Transmit complete callback*/
        heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	f000 f8c7 	bl	80049c4 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800483e:	f248 0201 	movw	r2, #32769	; 0x8001
 8004842:	601a      	str	r2, [r3, #0]
    }
  }


  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004852:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004856:	d149      	bne.n	80048ec <HAL_ETH_IRQHandler+0x124>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	f241 1334 	movw	r3, #4404	; 0x1134
 8004860:	4413      	add	r3, r2
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004868:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800486c:	d13e      	bne.n	80048ec <HAL_ETH_IRQHandler+0x124>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004872:	f043 0208 	orr.w	r2, r3, #8
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	65da      	str	r2, [r3, #92]	; 0x5c

      /* if fatal bus error occured */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004888:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800488c:	d11b      	bne.n	80048c6 <HAL_ETH_IRQHandler+0xfe>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	f241 1302 	movw	r3, #4354	; 0x1102
 800489c:	4013      	ands	r3, r2
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	6613      	str	r3, [r2, #96]	; 0x60

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	f241 1334 	movw	r3, #4404	; 0x1134
 80048aa:	4413      	add	r3, r2
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	6811      	ldr	r1, [r2, #0]
 80048b2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80048b6:	f241 1334 	movw	r3, #4404	; 0x1134
 80048ba:	440b      	add	r3, r1
 80048bc:	601a      	str	r2, [r3, #0]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	22e0      	movs	r2, #224	; 0xe0
 80048c2:	655a      	str	r2, [r3, #84]	; 0x54
 80048c4:	e00f      	b.n	80048e6 <HAL_ETH_IRQHandler+0x11e>
      }
      else
      {
        /* Get DMA error status  */
       heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	661a      	str	r2, [r3, #96]	; 0x60
                                                       ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80048e0:	f44f 42cd 	mov.w	r2, #26240	; 0x6680
 80048e4:	601a      	str	r2, [r3, #0]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered DMA Error callback*/
      heth->DMAErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_DMAErrorCallback(heth);
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f000 f876 	bl	80049d8 <HAL_ETH_DMAErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  if(__HAL_ETH_MAC_GET_IT(heth, (ETH_MACIER_RXSTSIE | ETH_MACIER_TXSTSIE)))
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80048f4:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 80048f8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80048fc:	d10e      	bne.n	800491c <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	665a      	str	r2, [r3, #100]	; 0x64

    heth->gState = HAL_ETH_STATE_ERROR;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	22e0      	movs	r2, #224	; 0xe0
 800490e:	655a      	str	r2, [r3, #84]	; 0x54
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered MAC Error callback*/
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet MAC Error callback */
    HAL_ETH_MACErrorCallback(heth);
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f000 f86b 	bl	80049ec <HAL_ETH_MACErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACErrorCode = (uint32_t)(0x0U);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* ETH PMT IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004924:	f003 0310 	and.w	r3, r3, #16
 8004928:	2b10      	cmp	r3, #16
 800492a:	d10d      	bne.n	8004948 <HAL_ETH_IRQHandler+0x180>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004934:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f000 f85f 	bl	8004a00 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* ETH EEE IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004950:	f003 0320 	and.w	r3, r3, #32
 8004954:	2b20      	cmp	r3, #32
 8004956:	d10d      	bne.n	8004974 <HAL_ETH_IRQHandler+0x1ac>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004960:	f003 020f 	and.w	r2, r3, #15
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f000 f853 	bl	8004a14 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	66da      	str	r2, [r3, #108]	; 0x6c
  }

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 8004974:	f7fd fc8e 	bl	8002294 <HAL_GetCurrentCPUID>
 8004978:	4603      	mov	r3, r0
 800497a:	2b03      	cmp	r3, #3
 800497c:	d10d      	bne.n	800499a <HAL_ETH_IRQHandler+0x1d2>
  {
    /* check ETH WAKEUP exti flag */
    if(__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 800497e:	4b0f      	ldr	r3, [pc, #60]	; (80049bc <HAL_ETH_IRQHandler+0x1f4>)
 8004980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004982:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d014      	beq.n	80049b4 <HAL_ETH_IRQHandler+0x1ec>
    {
      /* Clear ETH WAKEUP Exti pending bit */
      __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 800498a:	4b0c      	ldr	r3, [pc, #48]	; (80049bc <HAL_ETH_IRQHandler+0x1f4>)
 800498c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8004990:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered WakeUp callback*/
      heth->WakeUpCallback(heth);
#else
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f000 f848 	bl	8004a28 <HAL_ETH_WakeUpCallback>
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
#endif
  }
#endif
}
 8004998:	e00c      	b.n	80049b4 <HAL_ETH_IRQHandler+0x1ec>
    if(__HAL_ETH_WAKEUP_EXTID2_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 800499a:	4b09      	ldr	r3, [pc, #36]	; (80049c0 <HAL_ETH_IRQHandler+0x1f8>)
 800499c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800499e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d006      	beq.n	80049b4 <HAL_ETH_IRQHandler+0x1ec>
      __HAL_ETH_WAKEUP_EXTID2_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80049a6:	4b06      	ldr	r3, [pc, #24]	; (80049c0 <HAL_ETH_IRQHandler+0x1f8>)
 80049a8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80049ac:	629a      	str	r2, [r3, #40]	; 0x28
      HAL_ETH_WakeUpCallback(heth);
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f000 f83a 	bl	8004a28 <HAL_ETH_WakeUpCallback>
}
 80049b4:	bf00      	nop
 80049b6:	3708      	adds	r7, #8
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}
 80049bc:	58000080 	.word	0x58000080
 80049c0:	580000c0 	.word	0x580000c0

080049c4 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b083      	sub	sp, #12
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 80049cc:	bf00      	nop
 80049ce:	370c      	adds	r7, #12
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr

080049d8 <HAL_ETH_DMAErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_DMAErrorCallback(ETH_HandleTypeDef *heth)
{
 80049d8:	b480      	push	{r7}
 80049da:	b083      	sub	sp, #12
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_DMAErrorCallback could be implemented in the user file
  */
}
 80049e0:	bf00      	nop
 80049e2:	370c      	adds	r7, #12
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr

080049ec <HAL_ETH_MACErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_MACErrorCallback(ETH_HandleTypeDef *heth)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b083      	sub	sp, #12
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_MACErrorCallback could be implemented in the user file
  */
}
 80049f4:	bf00      	nop
 80049f6:	370c      	adds	r7, #12
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr

08004a00 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b083      	sub	sp, #12
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8004a08:	bf00      	nop
 8004a0a:	370c      	adds	r7, #12
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr

08004a14 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 8004a1c:	bf00      	nop
 8004a1e:	370c      	adds	r7, #12
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr

08004a28 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8004a30:	bf00      	nop
 8004a32:	370c      	adds	r7, #12
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr

08004a3c <HAL_ETH_ReadPHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t *pRegValue)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b086      	sub	sp, #24
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	60f8      	str	r0, [r7, #12]
 8004a44:	60b9      	str	r1, [r7, #8]
 8004a46:	607a      	str	r2, [r7, #4]
 8004a48:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004a52:	f003 0301 	and.w	r3, r3, #1
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d001      	beq.n	8004a5e <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e03e      	b.n	8004adc <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004a66:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	055b      	lsls	r3, r3, #21
 8004a72:	4313      	orrs	r3, r2
 8004a74:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	041b      	lsls	r3, r3, #16
 8004a80:	4313      	orrs	r3, r2
 8004a82:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	f043 030c 	orr.w	r3, r3, #12
 8004a8a:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	f043 0301 	orr.w	r3, r3, #1
 8004a92:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	697a      	ldr	r2, [r7, #20]
 8004a9a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 8004a9e:	f7fd fa75 	bl	8001f8c <HAL_GetTick>
 8004aa2:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8004aa4:	e009      	b.n	8004aba <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 8004aa6:	f7fd fa71 	bl	8001f8c <HAL_GetTick>
 8004aaa:	4602      	mov	r2, r0
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	1ad3      	subs	r3, r2, r3
 8004ab0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ab4:	d901      	bls.n	8004aba <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e010      	b.n	8004adc <HAL_ETH_ReadPHYRegister+0xa0>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004ac2:	f003 0301 	and.w	r3, r3, #1
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d1ed      	bne.n	8004aa6 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004ada:	2300      	movs	r3, #0
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	3718      	adds	r7, #24
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}

08004ae4 <HAL_ETH_WritePHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t RegValue)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b086      	sub	sp, #24
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	60f8      	str	r0, [r7, #12]
 8004aec:	60b9      	str	r1, [r7, #8]
 8004aee:	607a      	str	r2, [r7, #4]
 8004af0:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004afa:	f003 0301 	and.w	r3, r3, #1
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d001      	beq.n	8004b06 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	e03c      	b.n	8004b80 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004b0e:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	055b      	lsls	r3, r3, #21
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	041b      	lsls	r3, r3, #16
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	f023 030c 	bic.w	r3, r3, #12
 8004b32:	f043 0304 	orr.w	r3, r3, #4
 8004b36:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	f043 0301 	orr.w	r3, r3, #1
 8004b3e:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	b29a      	uxth	r2, r3
 8004b44:	4b10      	ldr	r3, [pc, #64]	; (8004b88 <HAL_ETH_WritePHYRegister+0xa4>)
 8004b46:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8004b4a:	4a0f      	ldr	r2, [pc, #60]	; (8004b88 <HAL_ETH_WritePHYRegister+0xa4>)
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 8004b52:	f7fd fa1b 	bl	8001f8c <HAL_GetTick>
 8004b56:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8004b58:	e009      	b.n	8004b6e <HAL_ETH_WritePHYRegister+0x8a>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 8004b5a:	f7fd fa17 	bl	8001f8c <HAL_GetTick>
 8004b5e:	4602      	mov	r2, r0
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	1ad3      	subs	r3, r2, r3
 8004b64:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b68:	d901      	bls.n	8004b6e <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e008      	b.n	8004b80 <HAL_ETH_WritePHYRegister+0x9c>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004b76:	f003 0301 	and.w	r3, r3, #1
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d1ed      	bne.n	8004b5a <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8004b7e:	2300      	movs	r3, #0
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3718      	adds	r7, #24
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}
 8004b88:	40028000 	.word	0x40028000

08004b8c <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b083      	sub	sp, #12
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d101      	bne.n	8004ba0 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e1c3      	b.n	8004f28 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 020c 	and.w	r2, r3, #12
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC)>> 4) > 0U) ? ENABLE : DISABLE;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f003 0310 	and.w	r3, r3, #16
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	bf14      	ite	ne
 8004bbc:	2301      	movne	r3, #1
 8004bbe:	2300      	moveq	r3, #0
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	bf0c      	ite	eq
 8004be6:	2301      	moveq	r3, #1
 8004be8:	2300      	movne	r3, #0
 8004bea:	b2db      	uxtb	r3, r3
 8004bec:	461a      	mov	r2, r3
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U) ? ENABLE : DISABLE;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	bf14      	ite	ne
 8004c02:	2301      	movne	r3, #1
 8004c04:	2300      	moveq	r3, #0
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	461a      	mov	r2, r3
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	bf0c      	ite	eq
 8004c1c:	2301      	moveq	r3, #1
 8004c1e:	2300      	movne	r3, #0
 8004c20:	b2db      	uxtb	r3, r3
 8004c22:	461a      	mov	r2, r3
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	bf14      	ite	ne
 8004c36:	2301      	movne	r3, #1
 8004c38:	2300      	moveq	r3, #0
 8004c3a:	b2db      	uxtb	r3, r3
 8004c3c:	461a      	mov	r2, r3
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	bf14      	ite	ne
 8004c50:	2301      	movne	r3, #1
 8004c52:	2300      	moveq	r3, #0
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	461a      	mov	r2, r3
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	bf14      	ite	ne
 8004c86:	2301      	movne	r3, #1
 8004c88:	2300      	moveq	r3, #0
 8004c8a:	b2db      	uxtb	r3, r3
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >>17) == 0U) ? ENABLE : DISABLE;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	bf0c      	ite	eq
 8004ca0:	2301      	moveq	r3, #1
 8004ca2:	2300      	movne	r3, #0
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	461a      	mov	r2, r3
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >>19) == 0U) ? ENABLE : DISABLE;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	bf0c      	ite	eq
 8004cba:	2301      	moveq	r3, #1
 8004cbc:	2300      	movne	r3, #0
 8004cbe:	b2db      	uxtb	r3, r3
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	bf14      	ite	ne
 8004cd4:	2301      	movne	r3, #1
 8004cd6:	2300      	moveq	r3, #0
 8004cd8:	b2db      	uxtb	r3, r3
 8004cda:	461a      	mov	r2, r3
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	bf14      	ite	ne
 8004cee:	2301      	movne	r3, #1
 8004cf0:	2300      	moveq	r3, #0
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	bf14      	ite	ne
 8004d08:	2301      	movne	r3, #1
 8004d0a:	2300      	moveq	r3, #0
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	461a      	mov	r2, r3
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	bf14      	ite	ne
 8004d22:	2301      	movne	r3, #1
 8004d24:	2300      	moveq	r3, #0
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	461a      	mov	r2, r3
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	bf14      	ite	ne
 8004d4a:	2301      	movne	r3, #1
 8004d4c:	2300      	moveq	r3, #0
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	461a      	mov	r2, r3
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	bf0c      	ite	eq
 8004d80:	2301      	moveq	r3, #1
 8004d82:	2300      	movne	r3, #0
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	461a      	mov	r2, r3
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	bf14      	ite	ne
 8004d9c:	2301      	movne	r3, #1
 8004d9e:	2300      	moveq	r3, #0
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	461a      	mov	r2, r3
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	bf14      	ite	ne
 8004db8:	2301      	movne	r3, #1
 8004dba:	2300      	moveq	r3, #0
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	461a      	mov	r2, r3
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U) ? ENABLE : DISABLE;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	bf14      	ite	ne
 8004dd4:	2301      	movne	r3, #1
 8004dd6:	2300      	moveq	r3, #0
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	461a      	mov	r2, r3
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	0e5b      	lsrs	r3, r3, #25
 8004dea:	f003 021f 	and.w	r2, r3, #31
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	68db      	ldr	r3, [r3, #12]
 8004df8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	bf14      	ite	ne
 8004e00:	2301      	movne	r3, #1
 8004e02:	2300      	moveq	r3, #0
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	461a      	mov	r2, r3
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	f003 020f 	and.w	r2, r3, #15
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e22:	f003 0302 	and.w	r3, r3, #2
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	bf14      	ite	ne
 8004e2a:	2301      	movne	r3, #1
 8004e2c:	2300      	moveq	r3, #0
 8004e2e:	b2db      	uxtb	r3, r3
 8004e30:	461a      	mov	r2, r3
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	bf0c      	ite	eq
 8004e46:	2301      	moveq	r3, #1
 8004e48:	2300      	movne	r3, #0
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	461a      	mov	r2, r3
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e5a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e68:	0c1b      	lsrs	r3, r3, #16
 8004e6a:	b29a      	uxth	r2, r3
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e78:	f003 0301 	and.w	r3, r3, #1
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	bf14      	ite	ne
 8004e80:	2301      	movne	r3, #1
 8004e82:	2300      	moveq	r3, #0
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	461a      	mov	r2, r3
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U) ? ENABLE : DISABLE;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e96:	f003 0302 	and.w	r3, r3, #2
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	bf14      	ite	ne
 8004e9e:	2301      	movne	r3, #1
 8004ea0:	2300      	moveq	r3, #0
 8004ea2:	b2db      	uxtb	r3, r3
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8004eb4:	f003 0272 	and.w	r2, r3, #114	; 0x72
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8004ec4:	f003 0223 	and.w	r2, r3, #35	; 0x23
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8004ed4:	f003 0308 	and.w	r3, r3, #8
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	bf14      	ite	ne
 8004edc:	2301      	movne	r3, #1
 8004ede:	2300      	moveq	r3, #0
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8004ef2:	f003 0310 	and.w	r3, r3, #16
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	bf14      	ite	ne
 8004efa:	2301      	movne	r3, #1
 8004efc:	2300      	moveq	r3, #0
 8004efe:	b2db      	uxtb	r3, r3
 8004f00:	461a      	mov	r2, r3
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8004f10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	bf0c      	ite	eq
 8004f18:	2301      	moveq	r3, #1
 8004f1a:	2300      	movne	r3, #0
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	461a      	mov	r2, r3
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8004f26:	2300      	movs	r3, #0
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	370c      	adds	r7, #12
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr

08004f34 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b082      	sub	sp, #8
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	6039      	str	r1, [r7, #0]
  if(macconf == NULL)
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d101      	bne.n	8004f48 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	e00a      	b.n	8004f5e <HAL_ETH_SetMACConfig+0x2a>
  }

  if(heth->RxState == HAL_ETH_STATE_READY)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f4c:	2b10      	cmp	r3, #16
 8004f4e:	d105      	bne.n	8004f5c <HAL_ETH_SetMACConfig+0x28>
  {
    ETH_SetMACConfig(heth, macconf);
 8004f50:	6839      	ldr	r1, [r7, #0]
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f000 f860 	bl	8005018 <ETH_SetMACConfig>

    return HAL_OK;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	e000      	b.n	8004f5e <HAL_ETH_SetMACConfig+0x2a>
  }
  else
  {
    return HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
  }
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3708      	adds	r7, #8
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
	...

08004f68 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b084      	sub	sp, #16
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004f78:	60fb      	str	r3, [r7, #12]

	/* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004f80:	60fb      	str	r3, [r7, #12]

	/* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004f82:	f002 f8dd 	bl	8007140 <HAL_RCC_GetHCLKFreq>
 8004f86:	60b8      	str	r0, [r7, #8]

	/* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	4a1e      	ldr	r2, [pc, #120]	; (8005004 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d908      	bls.n	8004fa2 <HAL_ETH_SetMDIOClockRange+0x3a>
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	4a1d      	ldr	r2, [pc, #116]	; (8005008 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d804      	bhi.n	8004fa2 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004f9e:	60fb      	str	r3, [r7, #12]
 8004fa0:	e027      	b.n	8004ff2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	4a18      	ldr	r2, [pc, #96]	; (8005008 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d908      	bls.n	8004fbc <HAL_ETH_SetMDIOClockRange+0x54>
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	4a17      	ldr	r2, [pc, #92]	; (800500c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d804      	bhi.n	8004fbc <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004fb8:	60fb      	str	r3, [r7, #12]
 8004fba:	e01a      	b.n	8004ff2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	4a13      	ldr	r2, [pc, #76]	; (800500c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d903      	bls.n	8004fcc <HAL_ETH_SetMDIOClockRange+0x64>
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	4a12      	ldr	r2, [pc, #72]	; (8005010 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d911      	bls.n	8004ff0 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	4a10      	ldr	r2, [pc, #64]	; (8005010 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d908      	bls.n	8004fe6 <HAL_ETH_SetMDIOClockRange+0x7e>
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	4a0f      	ldr	r2, [pc, #60]	; (8005014 <HAL_ETH_SetMDIOClockRange+0xac>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d804      	bhi.n	8004fe6 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fe2:	60fb      	str	r3, [r7, #12]
 8004fe4:	e005      	b.n	8004ff2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004fec:	60fb      	str	r3, [r7, #12]
 8004fee:	e000      	b.n	8004ff2 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8004ff0:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	68fa      	ldr	r2, [r7, #12]
 8004ff8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8004ffc:	bf00      	nop
 8004ffe:	3710      	adds	r7, #16
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}
 8005004:	01312cff 	.word	0x01312cff
 8005008:	02160ebf 	.word	0x02160ebf
 800500c:	039386ff 	.word	0x039386ff
 8005010:	05f5e0ff 	.word	0x05f5e0ff
 8005014:	08f0d17f 	.word	0x08f0d17f

08005018 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8005018:	b480      	push	{r7}
 800501a:	b085      	sub	sp, #20
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 800502a:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	791b      	ldrb	r3, [r3, #4]
 8005030:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8005032:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	7b1b      	ldrb	r3, [r3, #12]
 8005038:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 800503a:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	7b5b      	ldrb	r3, [r3, #13]
 8005040:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8005042:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	7b9b      	ldrb	r3, [r3, #14]
 8005048:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 800504a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	7bdb      	ldrb	r3, [r3, #15]
 8005050:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8005052:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8005054:	683a      	ldr	r2, [r7, #0]
 8005056:	7c12      	ldrb	r2, [r2, #16]
 8005058:	2a00      	cmp	r2, #0
 800505a:	d102      	bne.n	8005062 <ETH_SetMACConfig+0x4a>
 800505c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8005060:	e000      	b.n	8005064 <ETH_SetMACConfig+0x4c>
 8005062:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8005064:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8005066:	683a      	ldr	r2, [r7, #0]
 8005068:	7c52      	ldrb	r2, [r2, #17]
 800506a:	2a00      	cmp	r2, #0
 800506c:	d102      	bne.n	8005074 <ETH_SetMACConfig+0x5c>
 800506e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005072:	e000      	b.n	8005076 <ETH_SetMACConfig+0x5e>
 8005074:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8005076:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	7c9b      	ldrb	r3, [r3, #18]
 800507c:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800507e:	431a      	orrs	r2, r3
                                macconf->Speed |
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8005084:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 800508a:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	7f1b      	ldrb	r3, [r3, #28]
 8005090:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8005092:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	7f5b      	ldrb	r3, [r3, #29]
 8005098:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 800509a:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 800509c:	683a      	ldr	r2, [r7, #0]
 800509e:	7f92      	ldrb	r2, [r2, #30]
 80050a0:	2a00      	cmp	r2, #0
 80050a2:	d102      	bne.n	80050aa <ETH_SetMACConfig+0x92>
 80050a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80050a8:	e000      	b.n	80050ac <ETH_SetMACConfig+0x94>
 80050aa:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80050ac:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	7fdb      	ldrb	r3, [r3, #31]
 80050b2:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80050b4:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80050b6:	683a      	ldr	r2, [r7, #0]
 80050b8:	f892 2020 	ldrb.w	r2, [r2, #32]
 80050bc:	2a00      	cmp	r2, #0
 80050be:	d102      	bne.n	80050c6 <ETH_SetMACConfig+0xae>
 80050c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80050c4:	e000      	b.n	80050c8 <ETH_SetMACConfig+0xb0>
 80050c6:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80050c8:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80050ce:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80050d6:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 80050d8:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 80050de:	4313      	orrs	r3, r2
 80050e0:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	4b56      	ldr	r3, [pc, #344]	; (8005244 <ETH_SetMACConfig+0x22c>)
 80050ea:	4013      	ands	r3, r2
 80050ec:	687a      	ldr	r2, [r7, #4]
 80050ee:	6812      	ldr	r2, [r2, #0]
 80050f0:	68f9      	ldr	r1, [r7, #12]
 80050f2:	430b      	orrs	r3, r1
 80050f4:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050fa:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005102:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8005104:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800510c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 800510e:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005116:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8005118:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 800511a:	683a      	ldr	r2, [r7, #0]
 800511c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8005120:	2a00      	cmp	r2, #0
 8005122:	d102      	bne.n	800512a <ETH_SetMACConfig+0x112>
 8005124:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005128:	e000      	b.n	800512c <ETH_SetMACConfig+0x114>
 800512a:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 800512c:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8005132:	4313      	orrs	r3, r2
 8005134:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	685a      	ldr	r2, [r3, #4]
 800513c:	4b42      	ldr	r3, [pc, #264]	; (8005248 <ETH_SetMACConfig+0x230>)
 800513e:	4013      	ands	r3, r2
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	6812      	ldr	r2, [r2, #0]
 8005144:	68f9      	ldr	r1, [r7, #12]
 8005146:	430b      	orrs	r3, r1
 8005148:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005150:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8005156:	4313      	orrs	r3, r2
 8005158:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	68da      	ldr	r2, [r3, #12]
 8005160:	4b3a      	ldr	r3, [pc, #232]	; (800524c <ETH_SetMACConfig+0x234>)
 8005162:	4013      	ands	r3, r2
 8005164:	687a      	ldr	r2, [r7, #4]
 8005166:	6812      	ldr	r2, [r2, #0]
 8005168:	68f9      	ldr	r1, [r7, #12]
 800516a:	430b      	orrs	r3, r1
 800516c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005174:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800517a:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 800517c:	683a      	ldr	r2, [r7, #0]
 800517e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8005182:	2a00      	cmp	r2, #0
 8005184:	d101      	bne.n	800518a <ETH_SetMACConfig+0x172>
 8005186:	2280      	movs	r2, #128	; 0x80
 8005188:	e000      	b.n	800518c <ETH_SetMACConfig+0x174>
 800518a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800518c:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005192:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005194:	4313      	orrs	r3, r2
 8005196:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800519e:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80051a2:	4013      	ands	r3, r2
 80051a4:	687a      	ldr	r2, [r7, #4]
 80051a6:	6812      	ldr	r2, [r2, #0]
 80051a8:	68f9      	ldr	r1, [r7, #12]
 80051aa:	430b      	orrs	r3, r1
 80051ac:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80051b4:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80051bc:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80051be:	4313      	orrs	r3, r2
 80051c0:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051ca:	f023 0103 	bic.w	r1, r3, #3
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	68fa      	ldr	r2, [r7, #12]
 80051d4:	430a      	orrs	r2, r1
 80051d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80051e2:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	430a      	orrs	r2, r1
 80051f0:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80051f8:	683a      	ldr	r2, [r7, #0]
 80051fa:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80051fe:	2a00      	cmp	r2, #0
 8005200:	d101      	bne.n	8005206 <ETH_SetMACConfig+0x1ee>
 8005202:	2240      	movs	r2, #64	; 0x40
 8005204:	e000      	b.n	8005208 <ETH_SetMACConfig+0x1f0>
 8005206:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8005208:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8005210:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8005212:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800521a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 800521c:	4313      	orrs	r3, r2
 800521e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8005228:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	68fa      	ldr	r2, [r7, #12]
 8005232:	430a      	orrs	r2, r1
 8005234:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8005238:	bf00      	nop
 800523a:	3714      	adds	r7, #20
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr
 8005244:	00048083 	.word	0x00048083
 8005248:	c0f88000 	.word	0xc0f88000
 800524c:	fffffef0 	.word	0xfffffef0

08005250 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8005250:	b480      	push	{r7}
 8005252:	b085      	sub	sp, #20
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
 8005258:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	4b38      	ldr	r3, [pc, #224]	; (8005348 <ETH_SetDMAConfig+0xf8>)
 8005266:	4013      	ands	r3, r2
 8005268:	683a      	ldr	r2, [r7, #0]
 800526a:	6812      	ldr	r2, [r2, #0]
 800526c:	6879      	ldr	r1, [r7, #4]
 800526e:	6809      	ldr	r1, [r1, #0]
 8005270:	431a      	orrs	r2, r3
 8005272:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8005276:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	791b      	ldrb	r3, [r3, #4]
 800527c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005282:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	7b1b      	ldrb	r3, [r3, #12]
 8005288:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800528a:	4313      	orrs	r3, r2
 800528c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	f241 0304 	movw	r3, #4100	; 0x1004
 8005296:	4413      	add	r3, r2
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	4b2c      	ldr	r3, [pc, #176]	; (800534c <ETH_SetDMAConfig+0xfc>)
 800529c:	4013      	ands	r3, r2
 800529e:	687a      	ldr	r2, [r7, #4]
 80052a0:	6811      	ldr	r1, [r2, #0]
 80052a2:	68fa      	ldr	r2, [r7, #12]
 80052a4:	431a      	orrs	r2, r3
 80052a6:	f241 0304 	movw	r3, #4100	; 0x1004
 80052aa:	440b      	add	r3, r1
 80052ac:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	7b5b      	ldrb	r3, [r3, #13]
 80052b2:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80052b8:	4313      	orrs	r3, r2
 80052ba:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	4b22      	ldr	r3, [pc, #136]	; (8005350 <ETH_SetDMAConfig+0x100>)
 80052c8:	4013      	ands	r3, r2
 80052ca:	687a      	ldr	r2, [r7, #4]
 80052cc:	6811      	ldr	r1, [r2, #0]
 80052ce:	68fa      	ldr	r2, [r7, #12]
 80052d0:	431a      	orrs	r2, r3
 80052d2:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 80052d6:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	7d1b      	ldrb	r3, [r3, #20]
 80052e0:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80052e2:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	7f5b      	ldrb	r3, [r3, #29]
 80052e8:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80052ea:	4313      	orrs	r3, r2
 80052ec:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	f241 1304 	movw	r3, #4356	; 0x1104
 80052f6:	4413      	add	r3, r2
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	4b16      	ldr	r3, [pc, #88]	; (8005354 <ETH_SetDMAConfig+0x104>)
 80052fc:	4013      	ands	r3, r2
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	6811      	ldr	r1, [r2, #0]
 8005302:	68fa      	ldr	r2, [r7, #12]
 8005304:	431a      	orrs	r2, r3
 8005306:	f241 1304 	movw	r3, #4356	; 0x1104
 800530a:	440b      	add	r3, r1
 800530c:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	7f1b      	ldrb	r3, [r3, #28]
 8005312:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005318:	4313      	orrs	r3, r2
 800531a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	f241 1308 	movw	r3, #4360	; 0x1108
 8005324:	4413      	add	r3, r2
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	4b0b      	ldr	r3, [pc, #44]	; (8005358 <ETH_SetDMAConfig+0x108>)
 800532a:	4013      	ands	r3, r2
 800532c:	687a      	ldr	r2, [r7, #4]
 800532e:	6811      	ldr	r1, [r2, #0]
 8005330:	68fa      	ldr	r2, [r7, #12]
 8005332:	431a      	orrs	r2, r3
 8005334:	f241 1308 	movw	r3, #4360	; 0x1108
 8005338:	440b      	add	r3, r1
 800533a:	601a      	str	r2, [r3, #0]
}
 800533c:	bf00      	nop
 800533e:	3714      	adds	r7, #20
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr
 8005348:	ffff87fd 	.word	0xffff87fd
 800534c:	ffff2ffe 	.word	0xffff2ffe
 8005350:	fffec000 	.word	0xfffec000
 8005354:	ffc0efef 	.word	0xffc0efef
 8005358:	7fc0ffff 	.word	0x7fc0ffff

0800535c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b0a4      	sub	sp, #144	; 0x90
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8005364:	2301      	movs	r3, #1
 8005366:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800536a:	2300      	movs	r3, #0
 800536c:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800536e:	2300      	movs	r3, #0
 8005370:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8005374:	2300      	movs	r3, #0
 8005376:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800537a:	2301      	movs	r3, #1
 800537c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8005380:	2301      	movs	r3, #1
 8005382:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8005386:	2301      	movs	r3, #1
 8005388:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800538c:	2300      	movs	r3, #0
 800538e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8005392:	2301      	movs	r3, #1
 8005394:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8005398:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800539c:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800539e:	2300      	movs	r3, #0
 80053a0:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80053a4:	2300      	movs	r3, #0
 80053a6:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80053a8:	2300      	movs	r3, #0
 80053aa:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80053ae:	2300      	movs	r3, #0
 80053b0:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80053b4:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80053b8:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80053ba:	2300      	movs	r3, #0
 80053bc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80053c0:	2300      	movs	r3, #0
 80053c2:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80053c4:	2301      	movs	r3, #1
 80053c6:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80053ca:	2300      	movs	r3, #0
 80053cc:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80053d0:	2300      	movs	r3, #0
 80053d2:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80053d6:	2300      	movs	r3, #0
 80053d8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80053da:	2300      	movs	r3, #0
 80053dc:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80053de:	2300      	movs	r3, #0
 80053e0:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80053e2:	2300      	movs	r3, #0
 80053e4:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80053e8:	2300      	movs	r3, #0
 80053ea:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80053ee:	2301      	movs	r3, #1
 80053f0:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80053f4:	2320      	movs	r3, #32
 80053f6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80053fa:	2301      	movs	r3, #1
 80053fc:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8005400:	2300      	movs	r3, #0
 8005402:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8005406:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800540a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800540c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005410:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8005412:	2300      	movs	r3, #0
 8005414:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8005418:	2302      	movs	r3, #2
 800541a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800541e:	2300      	movs	r3, #0
 8005420:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8005424:	2300      	movs	r3, #0
 8005426:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800542a:	2300      	movs	r3, #0
 800542c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8005430:	2301      	movs	r3, #1
 8005432:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8005436:	2300      	movs	r3, #0
 8005438:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800543a:	2301      	movs	r3, #1
 800543c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8005440:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005444:	4619      	mov	r1, r3
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f7ff fde6 	bl	8005018 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800544c:	2301      	movs	r3, #1
 800544e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8005450:	2301      	movs	r3, #1
 8005452:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8005454:	2300      	movs	r3, #0
 8005456:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8005458:	2300      	movs	r3, #0
 800545a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800545e:	2300      	movs	r3, #0
 8005460:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8005462:	2300      	movs	r3, #0
 8005464:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8005466:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800546a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800546c:	2300      	movs	r3, #0
 800546e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005470:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005474:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8005476:	2300      	movs	r3, #0
 8005478:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 800547c:	f44f 7306 	mov.w	r3, #536	; 0x218
 8005480:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8005482:	f107 0308 	add.w	r3, r7, #8
 8005486:	4619      	mov	r1, r3
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f7ff fee1 	bl	8005250 <ETH_SetDMAConfig>
}
 800548e:	bf00      	nop
 8005490:	3790      	adds	r7, #144	; 0x90
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}
	...

08005498 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b084      	sub	sp, #16
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80054a8:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80054b0:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80054b2:	f001 fe45 	bl	8007140 <HAL_RCC_GetHCLKFreq>
 80054b6:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	4a1e      	ldr	r2, [pc, #120]	; (8005534 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d908      	bls.n	80054d2 <ETH_MAC_MDIO_ClkConfig+0x3a>
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	4a1d      	ldr	r2, [pc, #116]	; (8005538 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d804      	bhi.n	80054d2 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80054ce:	60fb      	str	r3, [r7, #12]
 80054d0:	e027      	b.n	8005522 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	4a18      	ldr	r2, [pc, #96]	; (8005538 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d908      	bls.n	80054ec <ETH_MAC_MDIO_ClkConfig+0x54>
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	4a17      	ldr	r2, [pc, #92]	; (800553c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d804      	bhi.n	80054ec <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80054e8:	60fb      	str	r3, [r7, #12]
 80054ea:	e01a      	b.n	8005522 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	4a13      	ldr	r2, [pc, #76]	; (800553c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d903      	bls.n	80054fc <ETH_MAC_MDIO_ClkConfig+0x64>
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	4a12      	ldr	r2, [pc, #72]	; (8005540 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d911      	bls.n	8005520 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	4a10      	ldr	r2, [pc, #64]	; (8005540 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d908      	bls.n	8005516 <ETH_MAC_MDIO_ClkConfig+0x7e>
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	4a0f      	ldr	r2, [pc, #60]	; (8005544 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d804      	bhi.n	8005516 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005512:	60fb      	str	r3, [r7, #12]
 8005514:	e005      	b.n	8005522 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800551c:	60fb      	str	r3, [r7, #12]
 800551e:	e000      	b.n	8005522 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8005520:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	68fa      	ldr	r2, [r7, #12]
 8005528:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 800552c:	bf00      	nop
 800552e:	3710      	adds	r7, #16
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}
 8005534:	01312cff 	.word	0x01312cff
 8005538:	02160ebf 	.word	0x02160ebf
 800553c:	039386ff 	.word	0x039386ff
 8005540:	05f5e0ff 	.word	0x05f5e0ff
 8005544:	08f0d17f 	.word	0x08f0d17f

08005548 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8005548:	b480      	push	{r7}
 800554a:	b085      	sub	sp, #20
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005550:	2300      	movs	r3, #0
 8005552:	60fb      	str	r3, [r7, #12]
 8005554:	e01d      	b.n	8005592 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	68d9      	ldr	r1, [r3, #12]
 800555a:	68fa      	ldr	r2, [r7, #12]
 800555c:	4613      	mov	r3, r2
 800555e:	005b      	lsls	r3, r3, #1
 8005560:	4413      	add	r3, r2
 8005562:	00db      	lsls	r3, r3, #3
 8005564:	440b      	add	r3, r1
 8005566:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	2200      	movs	r2, #0
 800556c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	2200      	movs	r2, #0
 8005572:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	2200      	movs	r2, #0
 8005578:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	2200      	movs	r2, #0
 800557e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8005580:	68b9      	ldr	r1, [r7, #8]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	68fa      	ldr	r2, [r7, #12]
 8005586:	3206      	adds	r2, #6
 8005588:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	3301      	adds	r3, #1
 8005590:	60fb      	str	r3, [r7, #12]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2b03      	cmp	r3, #3
 8005596:	d9de      	bls.n	8005556 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2200      	movs	r2, #0
 800559c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681a      	ldr	r2, [r3, #0]
 80055a2:	f241 132c 	movw	r3, #4396	; 0x112c
 80055a6:	4413      	add	r3, r2
 80055a8:	2203      	movs	r2, #3
 80055aa:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	68d9      	ldr	r1, [r3, #12]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	f241 1314 	movw	r3, #4372	; 0x1114
 80055b8:	4413      	add	r3, r2
 80055ba:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	68da      	ldr	r2, [r3, #12]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 80055c8:	601a      	str	r2, [r3, #0]
}
 80055ca:	bf00      	nop
 80055cc:	3714      	adds	r7, #20
 80055ce:	46bd      	mov	sp, r7
 80055d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d4:	4770      	bx	lr

080055d6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80055d6:	b480      	push	{r7}
 80055d8:	b085      	sub	sp, #20
 80055da:	af00      	add	r7, sp, #0
 80055dc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80055de:	2300      	movs	r3, #0
 80055e0:	60fb      	str	r3, [r7, #12]
 80055e2:	e024      	b.n	800562e <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6919      	ldr	r1, [r3, #16]
 80055e8:	68fa      	ldr	r2, [r7, #12]
 80055ea:	4613      	mov	r3, r2
 80055ec:	005b      	lsls	r3, r3, #1
 80055ee:	4413      	add	r3, r2
 80055f0:	00db      	lsls	r3, r3, #3
 80055f2:	440b      	add	r3, r1
 80055f4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	2200      	movs	r2, #0
 80055fa:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	2200      	movs	r2, #0
 8005600:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	2200      	movs	r2, #0
 8005606:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	2200      	movs	r2, #0
 800560c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	2200      	movs	r2, #0
 8005612:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	2200      	movs	r2, #0
 8005618:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors adresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800561a:	68ba      	ldr	r2, [r7, #8]
 800561c:	6879      	ldr	r1, [r7, #4]
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	330a      	adds	r3, #10
 8005622:	009b      	lsls	r3, r3, #2
 8005624:	440b      	add	r3, r1
 8005626:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	3301      	adds	r3, #1
 800562c:	60fb      	str	r3, [r7, #12]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2b03      	cmp	r3, #3
 8005632:	d9d7      	bls.n	80055e4 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2200      	movs	r2, #0
 8005638:	63da      	str	r2, [r3, #60]	; 0x3c
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2200      	movs	r2, #0
 8005644:	645a      	str	r2, [r3, #68]	; 0x44
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2200      	movs	r2, #0
 800564a:	64da      	str	r2, [r3, #76]	; 0x4c
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	f241 1330 	movw	r3, #4400	; 0x1130
 800565a:	4413      	add	r3, r2
 800565c:	2203      	movs	r2, #3
 800565e:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6919      	ldr	r1, [r3, #16]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681a      	ldr	r2, [r3, #0]
 8005668:	f241 131c 	movw	r3, #4380	; 0x111c
 800566c:	4413      	add	r3, r2
 800566e:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	691b      	ldr	r3, [r3, #16]
 8005674:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	f241 1328 	movw	r3, #4392	; 0x1128
 8005680:	4413      	add	r3, r2
 8005682:	6019      	str	r1, [r3, #0]
}
 8005684:	bf00      	nop
 8005686:	3714      	adds	r7, #20
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr

08005690 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8005690:	b480      	push	{r7}
 8005692:	b08d      	sub	sp, #52	; 0x34
 8005694:	af00      	add	r7, sp, #0
 8005696:	60f8      	str	r0, [r7, #12]
 8005698:	60b9      	str	r1, [r7, #8]
 800569a:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	3318      	adds	r3, #24
 80056a0:	61bb      	str	r3, [r7, #24]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80056a2:	69bb      	ldr	r3, [r7, #24]
 80056a4:	691b      	ldr	r3, [r3, #16]
 80056a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80056a8:	69bb      	ldr	r3, [r7, #24]
 80056aa:	691b      	ldr	r3, [r3, #16]
 80056ac:	617b      	str	r3, [r7, #20]
  uint32_t descnbr = 0, idx;
 80056ae:	2300      	movs	r3, #0
 80056b0:	62bb      	str	r3, [r7, #40]	; 0x28
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80056b2:	69bb      	ldr	r3, [r7, #24]
 80056b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056ba:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	61fb      	str	r3, [r7, #28]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 80056c2:	6a3b      	ldr	r3, [r7, #32]
 80056c4:	68db      	ldr	r3, [r3, #12]
 80056c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80056ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056ce:	d101      	bne.n	80056d4 <ETH_Prepare_Tx_Descriptors+0x44>
  {
    return HAL_ETH_ERROR_BUSY;
 80056d0:	2302      	movs	r3, #2
 80056d2:	e223      	b.n	8005b1c <ETH_Prepare_Tx_Descriptors+0x48c>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f003 0304 	and.w	r3, r3, #4
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d044      	beq.n	800576a <ETH_Prepare_Tx_Descriptors+0xda>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 80056e0:	6a3b      	ldr	r3, [r7, #32]
 80056e2:	68da      	ldr	r2, [r3, #12]
 80056e4:	4b72      	ldr	r3, [pc, #456]	; (80058b0 <ETH_Prepare_Tx_Descriptors+0x220>)
 80056e6:	4013      	ands	r3, r2
 80056e8:	68ba      	ldr	r2, [r7, #8]
 80056ea:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80056ec:	431a      	orrs	r2, r3
 80056ee:	6a3b      	ldr	r3, [r7, #32]
 80056f0:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 80056f2:	6a3b      	ldr	r3, [r7, #32]
 80056f4:	68db      	ldr	r3, [r3, #12]
 80056f6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80056fa:	6a3b      	ldr	r3, [r7, #32]
 80056fc:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800570c:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != 0U)
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f003 0308 	and.w	r3, r3, #8
 8005716:	2b00      	cmp	r3, #0
 8005718:	d027      	beq.n	800576a <ETH_Prepare_Tx_Descriptors+0xda>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 800571a:	6a3b      	ldr	r3, [r7, #32]
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	b29a      	uxth	r2, r3
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005724:	041b      	lsls	r3, r3, #16
 8005726:	431a      	orrs	r2, r3
 8005728:	6a3b      	ldr	r3, [r7, #32]
 800572a:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 800572c:	6a3b      	ldr	r3, [r7, #32]
 800572e:	68db      	ldr	r3, [r3, #12]
 8005730:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005734:	6a3b      	ldr	r3, [r7, #32]
 8005736:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8005738:	6a3b      	ldr	r3, [r7, #32]
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005744:	431a      	orrs	r2, r3
 8005746:	6a3b      	ldr	r3, [r7, #32]
 8005748:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005758:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005768:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segementation is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f003 0310 	and.w	r3, r3, #16
 8005772:	2b00      	cmp	r3, #0
 8005774:	d00e      	beq.n	8005794 <ETH_Prepare_Tx_Descriptors+0x104>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8005776:	6a3b      	ldr	r3, [r7, #32]
 8005778:	689a      	ldr	r2, [r3, #8]
 800577a:	4b4e      	ldr	r3, [pc, #312]	; (80058b4 <ETH_Prepare_Tx_Descriptors+0x224>)
 800577c:	4013      	ands	r3, r2
 800577e:	68ba      	ldr	r2, [r7, #8]
 8005780:	6992      	ldr	r2, [r2, #24]
 8005782:	431a      	orrs	r2, r3
 8005784:	6a3b      	ldr	r3, [r7, #32]
 8005786:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8005788:	6a3b      	ldr	r3, [r7, #32]
 800578a:	68db      	ldr	r3, [r3, #12]
 800578c:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005790:	6a3b      	ldr	r3, [r7, #32]
 8005792:	60da      	str	r2, [r3, #12]
  }

  if((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)|| (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U))
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f003 0304 	and.w	r3, r3, #4
 800579c:	2b00      	cmp	r3, #0
 800579e:	d105      	bne.n	80057ac <ETH_Prepare_Tx_Descriptors+0x11c>
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f003 0310 	and.w	r3, r3, #16
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d030      	beq.n	800580e <ETH_Prepare_Tx_Descriptors+0x17e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 80057ac:	6a3b      	ldr	r3, [r7, #32]
 80057ae:	68db      	ldr	r3, [r3, #12]
 80057b0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80057b4:	6a3b      	ldr	r3, [r7, #32]
 80057b6:	60da      	str	r2, [r3, #12]
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80057b8:	6a3b      	ldr	r3, [r7, #32]
 80057ba:	68db      	ldr	r3, [r3, #12]
 80057bc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80057c0:	6a3b      	ldr	r3, [r7, #32]
 80057c2:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80057c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057c6:	3301      	adds	r3, #1
 80057c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057cc:	2b03      	cmp	r3, #3
 80057ce:	d902      	bls.n	80057d6 <ETH_Prepare_Tx_Descriptors+0x146>
 80057d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057d2:	3b04      	subs	r3, #4
 80057d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80057d6:	69bb      	ldr	r3, [r7, #24]
 80057d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057de:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 80057e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057e2:	3301      	adds	r3, #1
 80057e4:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 80057e6:	6a3b      	ldr	r3, [r7, #32]
 80057e8:	68db      	ldr	r3, [r3, #12]
 80057ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80057ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057f2:	d10c      	bne.n	800580e <ETH_Prepare_Tx_Descriptors+0x17e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 80057f4:	69bb      	ldr	r3, [r7, #24]
 80057f6:	697a      	ldr	r2, [r7, #20]
 80057f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057fc:	623b      	str	r3, [r7, #32]
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80057fe:	6a3b      	ldr	r3, [r7, #32]
 8005800:	68db      	ldr	r3, [r3, #12]
 8005802:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005806:	6a3b      	ldr	r3, [r7, #32]
 8005808:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 800580a:	2302      	movs	r3, #2
 800580c:	e186      	b.n	8005b1c <ETH_Prepare_Tx_Descriptors+0x48c>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 800580e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005810:	3301      	adds	r3, #1
 8005812:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8005814:	69fb      	ldr	r3, [r7, #28]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	461a      	mov	r2, r3
 800581a:	6a3b      	ldr	r3, [r7, #32]
 800581c:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 800581e:	6a3b      	ldr	r3, [r7, #32]
 8005820:	689a      	ldr	r2, [r3, #8]
 8005822:	4b24      	ldr	r3, [pc, #144]	; (80058b4 <ETH_Prepare_Tx_Descriptors+0x224>)
 8005824:	4013      	ands	r3, r2
 8005826:	69fa      	ldr	r2, [r7, #28]
 8005828:	6852      	ldr	r2, [r2, #4]
 800582a:	431a      	orrs	r2, r3
 800582c:	6a3b      	ldr	r3, [r7, #32]
 800582e:	609a      	str	r2, [r3, #8]

  if(txbuffer->next != NULL)
 8005830:	69fb      	ldr	r3, [r7, #28]
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d012      	beq.n	800585e <ETH_Prepare_Tx_Descriptors+0x1ce>
  {
    txbuffer = txbuffer->next;
 8005838:	69fb      	ldr	r3, [r7, #28]
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 800583e:	69fb      	ldr	r3, [r7, #28]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	461a      	mov	r2, r3
 8005844:	6a3b      	ldr	r3, [r7, #32]
 8005846:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8005848:	6a3b      	ldr	r3, [r7, #32]
 800584a:	689a      	ldr	r2, [r3, #8]
 800584c:	4b1a      	ldr	r3, [pc, #104]	; (80058b8 <ETH_Prepare_Tx_Descriptors+0x228>)
 800584e:	4013      	ands	r3, r2
 8005850:	69fa      	ldr	r2, [r7, #28]
 8005852:	6852      	ldr	r2, [r2, #4]
 8005854:	0412      	lsls	r2, r2, #16
 8005856:	431a      	orrs	r2, r3
 8005858:	6a3b      	ldr	r3, [r7, #32]
 800585a:	609a      	str	r2, [r3, #8]
 800585c:	e008      	b.n	8005870 <ETH_Prepare_Tx_Descriptors+0x1e0>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800585e:	6a3b      	ldr	r3, [r7, #32]
 8005860:	2200      	movs	r2, #0
 8005862:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8005864:	6a3b      	ldr	r3, [r7, #32]
 8005866:	689a      	ldr	r2, [r3, #8]
 8005868:	4b13      	ldr	r3, [pc, #76]	; (80058b8 <ETH_Prepare_Tx_Descriptors+0x228>)
 800586a:	4013      	ands	r3, r2
 800586c:	6a3a      	ldr	r2, [r7, #32]
 800586e:	6093      	str	r3, [r2, #8]
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f003 0310 	and.w	r3, r3, #16
 8005878:	2b00      	cmp	r3, #0
 800587a:	d021      	beq.n	80058c0 <ETH_Prepare_Tx_Descriptors+0x230>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 800587c:	6a3b      	ldr	r3, [r7, #32]
 800587e:	68db      	ldr	r3, [r3, #12]
 8005880:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	6a1b      	ldr	r3, [r3, #32]
 8005888:	04db      	lsls	r3, r3, #19
 800588a:	431a      	orrs	r2, r3
 800588c:	6a3b      	ldr	r3, [r7, #32]
 800588e:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8005890:	6a3b      	ldr	r3, [r7, #32]
 8005892:	68da      	ldr	r2, [r3, #12]
 8005894:	4b09      	ldr	r3, [pc, #36]	; (80058bc <ETH_Prepare_Tx_Descriptors+0x22c>)
 8005896:	4013      	ands	r3, r2
 8005898:	68ba      	ldr	r2, [r7, #8]
 800589a:	69d2      	ldr	r2, [r2, #28]
 800589c:	431a      	orrs	r2, r3
 800589e:	6a3b      	ldr	r3, [r7, #32]
 80058a0:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 80058a2:	6a3b      	ldr	r3, [r7, #32]
 80058a4:	68db      	ldr	r3, [r3, #12]
 80058a6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80058aa:	6a3b      	ldr	r3, [r7, #32]
 80058ac:	60da      	str	r2, [r3, #12]
 80058ae:	e02e      	b.n	800590e <ETH_Prepare_Tx_Descriptors+0x27e>
 80058b0:	ffff0000 	.word	0xffff0000
 80058b4:	ffffc000 	.word	0xffffc000
 80058b8:	c000ffff 	.word	0xc000ffff
 80058bc:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 80058c0:	6a3b      	ldr	r3, [r7, #32]
 80058c2:	68da      	ldr	r2, [r3, #12]
 80058c4:	4b98      	ldr	r3, [pc, #608]	; (8005b28 <ETH_Prepare_Tx_Descriptors+0x498>)
 80058c6:	4013      	ands	r3, r2
 80058c8:	68ba      	ldr	r2, [r7, #8]
 80058ca:	6852      	ldr	r2, [r2, #4]
 80058cc:	431a      	orrs	r2, r3
 80058ce:	6a3b      	ldr	r3, [r7, #32]
 80058d0:	60da      	str	r2, [r3, #12]

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f003 0301 	and.w	r3, r3, #1
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d008      	beq.n	80058f0 <ETH_Prepare_Tx_Descriptors+0x260>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 80058de:	6a3b      	ldr	r3, [r7, #32]
 80058e0:	68db      	ldr	r3, [r3, #12]
 80058e2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	695b      	ldr	r3, [r3, #20]
 80058ea:	431a      	orrs	r2, r3
 80058ec:	6a3b      	ldr	r3, [r7, #32]
 80058ee:	60da      	str	r2, [r3, #12]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f003 0320 	and.w	r3, r3, #32
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d008      	beq.n	800590e <ETH_Prepare_Tx_Descriptors+0x27e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 80058fc:	6a3b      	ldr	r3, [r7, #32]
 80058fe:	68db      	ldr	r3, [r3, #12]
 8005900:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	691b      	ldr	r3, [r3, #16]
 8005908:	431a      	orrs	r2, r3
 800590a:	6a3b      	ldr	r3, [r7, #32]
 800590c:	60da      	str	r2, [r3, #12]
    }
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f003 0304 	and.w	r3, r3, #4
 8005916:	2b00      	cmp	r3, #0
 8005918:	d008      	beq.n	800592c <ETH_Prepare_Tx_Descriptors+0x29c>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 800591a:	6a3b      	ldr	r3, [r7, #32]
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005926:	431a      	orrs	r2, r3
 8005928:	6a3b      	ldr	r3, [r7, #32]
 800592a:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 800592c:	6a3b      	ldr	r3, [r7, #32]
 800592e:	68db      	ldr	r3, [r3, #12]
 8005930:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005934:	6a3b      	ldr	r3, [r7, #32]
 8005936:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8005938:	6a3b      	ldr	r3, [r7, #32]
 800593a:	68db      	ldr	r3, [r3, #12]
 800593c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005940:	6a3b      	ldr	r3, [r7, #32]
 8005942:	60da      	str	r2, [r3, #12]
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8005944:	6a3b      	ldr	r3, [r7, #32]
 8005946:	68db      	ldr	r3, [r3, #12]
 8005948:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800594c:	6a3b      	ldr	r3, [r7, #32]
 800594e:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != 0U)
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f003 0302 	and.w	r3, r3, #2
 8005958:	2b00      	cmp	r3, #0
 800595a:	f000 80c0 	beq.w	8005ade <ETH_Prepare_Tx_Descriptors+0x44e>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 800595e:	6a3b      	ldr	r3, [r7, #32]
 8005960:	68db      	ldr	r3, [r3, #12]
 8005962:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	68db      	ldr	r3, [r3, #12]
 800596a:	431a      	orrs	r2, r3
 800596c:	6a3b      	ldr	r3, [r7, #32]
 800596e:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is splitted into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8005970:	e0b5      	b.n	8005ade <ETH_Prepare_Tx_Descriptors+0x44e>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8005972:	6a3b      	ldr	r3, [r7, #32]
 8005974:	68db      	ldr	r3, [r3, #12]
 8005976:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800597a:	6a3b      	ldr	r3, [r7, #32]
 800597c:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800597e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005980:	3301      	adds	r3, #1
 8005982:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005986:	2b03      	cmp	r3, #3
 8005988:	d902      	bls.n	8005990 <ETH_Prepare_Tx_Descriptors+0x300>
 800598a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800598c:	3b04      	subs	r3, #4
 800598e:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005990:	69bb      	ldr	r3, [r7, #24]
 8005992:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005994:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005998:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 800599a:	6a3b      	ldr	r3, [r7, #32]
 800599c:	68db      	ldr	r3, [r3, #12]
 800599e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80059a2:	6a3b      	ldr	r3, [r7, #32]
 80059a4:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 80059a6:	6a3b      	ldr	r3, [r7, #32]
 80059a8:	68db      	ldr	r3, [r3, #12]
 80059aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059b2:	d126      	bne.n	8005a02 <ETH_Prepare_Tx_Descriptors+0x372>
    {
      descidx = firstdescidx;
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80059b8:	69bb      	ldr	r3, [r7, #24]
 80059ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059c0:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for(idx = 0; idx < descnbr; idx ++)
 80059c2:	2300      	movs	r3, #0
 80059c4:	627b      	str	r3, [r7, #36]	; 0x24
 80059c6:	e016      	b.n	80059f6 <ETH_Prepare_Tx_Descriptors+0x366>
      {
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80059c8:	6a3b      	ldr	r3, [r7, #32]
 80059ca:	68db      	ldr	r3, [r3, #12]
 80059cc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80059d0:	6a3b      	ldr	r3, [r7, #32]
 80059d2:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80059d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059d6:	3301      	adds	r3, #1
 80059d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059dc:	2b03      	cmp	r3, #3
 80059de:	d902      	bls.n	80059e6 <ETH_Prepare_Tx_Descriptors+0x356>
 80059e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059e2:	3b04      	subs	r3, #4
 80059e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80059e6:	69bb      	ldr	r3, [r7, #24]
 80059e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059ee:	623b      	str	r3, [r7, #32]
      for(idx = 0; idx < descnbr; idx ++)
 80059f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f2:	3301      	adds	r3, #1
 80059f4:	627b      	str	r3, [r7, #36]	; 0x24
 80059f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d3e4      	bcc.n	80059c8 <ETH_Prepare_Tx_Descriptors+0x338>
      }

      return HAL_ETH_ERROR_BUSY;
 80059fe:	2302      	movs	r3, #2
 8005a00:	e08c      	b.n	8005b1c <ETH_Prepare_Tx_Descriptors+0x48c>
    }

    descnbr += 1U;
 8005a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a04:	3301      	adds	r3, #1
 8005a06:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8005a08:	69fb      	ldr	r3, [r7, #28]
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8005a0e:	69fb      	ldr	r3, [r7, #28]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	461a      	mov	r2, r3
 8005a14:	6a3b      	ldr	r3, [r7, #32]
 8005a16:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8005a18:	6a3b      	ldr	r3, [r7, #32]
 8005a1a:	689a      	ldr	r2, [r3, #8]
 8005a1c:	4b43      	ldr	r3, [pc, #268]	; (8005b2c <ETH_Prepare_Tx_Descriptors+0x49c>)
 8005a1e:	4013      	ands	r3, r2
 8005a20:	69fa      	ldr	r2, [r7, #28]
 8005a22:	6852      	ldr	r2, [r2, #4]
 8005a24:	431a      	orrs	r2, r3
 8005a26:	6a3b      	ldr	r3, [r7, #32]
 8005a28:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8005a2a:	69fb      	ldr	r3, [r7, #28]
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d012      	beq.n	8005a58 <ETH_Prepare_Tx_Descriptors+0x3c8>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8005a32:	69fb      	ldr	r3, [r7, #28]
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8005a38:	69fb      	ldr	r3, [r7, #28]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	461a      	mov	r2, r3
 8005a3e:	6a3b      	ldr	r3, [r7, #32]
 8005a40:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8005a42:	6a3b      	ldr	r3, [r7, #32]
 8005a44:	689a      	ldr	r2, [r3, #8]
 8005a46:	4b3a      	ldr	r3, [pc, #232]	; (8005b30 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 8005a48:	4013      	ands	r3, r2
 8005a4a:	69fa      	ldr	r2, [r7, #28]
 8005a4c:	6852      	ldr	r2, [r2, #4]
 8005a4e:	0412      	lsls	r2, r2, #16
 8005a50:	431a      	orrs	r2, r3
 8005a52:	6a3b      	ldr	r3, [r7, #32]
 8005a54:	609a      	str	r2, [r3, #8]
 8005a56:	e008      	b.n	8005a6a <ETH_Prepare_Tx_Descriptors+0x3da>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8005a58:	6a3b      	ldr	r3, [r7, #32]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8005a5e:	6a3b      	ldr	r3, [r7, #32]
 8005a60:	689a      	ldr	r2, [r3, #8]
 8005a62:	4b33      	ldr	r3, [pc, #204]	; (8005b30 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 8005a64:	4013      	ands	r3, r2
 8005a66:	6a3a      	ldr	r2, [r7, #32]
 8005a68:	6093      	str	r3, [r2, #8]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f003 0310 	and.w	r3, r3, #16
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d00f      	beq.n	8005a96 <ETH_Prepare_Tx_Descriptors+0x406>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8005a76:	6a3b      	ldr	r3, [r7, #32]
 8005a78:	68da      	ldr	r2, [r3, #12]
 8005a7a:	4b2e      	ldr	r3, [pc, #184]	; (8005b34 <ETH_Prepare_Tx_Descriptors+0x4a4>)
 8005a7c:	4013      	ands	r3, r2
 8005a7e:	68ba      	ldr	r2, [r7, #8]
 8005a80:	69d2      	ldr	r2, [r2, #28]
 8005a82:	431a      	orrs	r2, r3
 8005a84:	6a3b      	ldr	r3, [r7, #32]
 8005a86:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8005a88:	6a3b      	ldr	r3, [r7, #32]
 8005a8a:	68db      	ldr	r3, [r3, #12]
 8005a8c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005a90:	6a3b      	ldr	r3, [r7, #32]
 8005a92:	60da      	str	r2, [r3, #12]
 8005a94:	e017      	b.n	8005ac6 <ETH_Prepare_Tx_Descriptors+0x436>
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8005a96:	6a3b      	ldr	r3, [r7, #32]
 8005a98:	68da      	ldr	r2, [r3, #12]
 8005a9a:	4b23      	ldr	r3, [pc, #140]	; (8005b28 <ETH_Prepare_Tx_Descriptors+0x498>)
 8005a9c:	4013      	ands	r3, r2
 8005a9e:	68ba      	ldr	r2, [r7, #8]
 8005aa0:	6852      	ldr	r2, [r2, #4]
 8005aa2:	431a      	orrs	r2, r3
 8005aa4:	6a3b      	ldr	r3, [r7, #32]
 8005aa6:	60da      	str	r2, [r3, #12]

      if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f003 0301 	and.w	r3, r3, #1
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d008      	beq.n	8005ac6 <ETH_Prepare_Tx_Descriptors+0x436>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8005ab4:	6a3b      	ldr	r3, [r7, #32]
 8005ab6:	68db      	ldr	r3, [r3, #12]
 8005ab8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	695b      	ldr	r3, [r3, #20]
 8005ac0:	431a      	orrs	r2, r3
 8005ac2:	6a3b      	ldr	r3, [r7, #32]
 8005ac4:	60da      	str	r2, [r3, #12]
      }
    }

    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8005ac6:	6a3b      	ldr	r3, [r7, #32]
 8005ac8:	68db      	ldr	r3, [r3, #12]
 8005aca:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005ace:	6a3b      	ldr	r3, [r7, #32]
 8005ad0:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8005ad2:	6a3b      	ldr	r3, [r7, #32]
 8005ad4:	68db      	ldr	r3, [r3, #12]
 8005ad6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005ada:	6a3b      	ldr	r3, [r7, #32]
 8005adc:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8005ade:	69fb      	ldr	r3, [r7, #28]
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	f47f af45 	bne.w	8005972 <ETH_Prepare_Tx_Descriptors+0x2e2>
  }

  if(ItMode != ((uint32_t)RESET))
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d006      	beq.n	8005afc <ETH_Prepare_Tx_Descriptors+0x46c>
  {
    /* Set Interrupt on completition bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8005aee:	6a3b      	ldr	r3, [r7, #32]
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005af6:	6a3b      	ldr	r3, [r7, #32]
 8005af8:	609a      	str	r2, [r3, #8]
 8005afa:	e005      	b.n	8005b08 <ETH_Prepare_Tx_Descriptors+0x478>
  }
  else
  {
    /* Clear Interrupt on completition bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8005afc:	6a3b      	ldr	r3, [r7, #32]
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005b04:	6a3b      	ldr	r3, [r7, #32]
 8005b06:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8005b08:	6a3b      	ldr	r3, [r7, #32]
 8005b0a:	68db      	ldr	r3, [r3, #12]
 8005b0c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005b10:	6a3b      	ldr	r3, [r7, #32]
 8005b12:	60da      	str	r2, [r3, #12]

  dmatxdesclist->CurTxDesc = descidx;
 8005b14:	69bb      	ldr	r3, [r7, #24]
 8005b16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b18:	611a      	str	r2, [r3, #16]

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8005b1a:	2300      	movs	r3, #0
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	3734      	adds	r7, #52	; 0x34
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	4770      	bx	lr
 8005b28:	ffff8000 	.word	0xffff8000
 8005b2c:	ffffc000 	.word	0xffffc000
 8005b30:	c000ffff 	.word	0xc000ffff
 8005b34:	fffc0000 	.word	0xfffc0000

08005b38 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b089      	sub	sp, #36	; 0x24
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
 8005b40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005b42:	2300      	movs	r3, #0
 8005b44:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005b46:	4b89      	ldr	r3, [pc, #548]	; (8005d6c <HAL_GPIO_Init+0x234>)
 8005b48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005b4a:	e194      	b.n	8005e76 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	2101      	movs	r1, #1
 8005b52:	69fb      	ldr	r3, [r7, #28]
 8005b54:	fa01 f303 	lsl.w	r3, r1, r3
 8005b58:	4013      	ands	r3, r2
 8005b5a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	f000 8186 	beq.w	8005e70 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d00b      	beq.n	8005b84 <HAL_GPIO_Init+0x4c>
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	2b02      	cmp	r3, #2
 8005b72:	d007      	beq.n	8005b84 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005b78:	2b11      	cmp	r3, #17
 8005b7a:	d003      	beq.n	8005b84 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	2b12      	cmp	r3, #18
 8005b82:	d130      	bne.n	8005be6 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005b8a:	69fb      	ldr	r3, [r7, #28]
 8005b8c:	005b      	lsls	r3, r3, #1
 8005b8e:	2203      	movs	r2, #3
 8005b90:	fa02 f303 	lsl.w	r3, r2, r3
 8005b94:	43db      	mvns	r3, r3
 8005b96:	69ba      	ldr	r2, [r7, #24]
 8005b98:	4013      	ands	r3, r2
 8005b9a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	68da      	ldr	r2, [r3, #12]
 8005ba0:	69fb      	ldr	r3, [r7, #28]
 8005ba2:	005b      	lsls	r3, r3, #1
 8005ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ba8:	69ba      	ldr	r2, [r7, #24]
 8005baa:	4313      	orrs	r3, r2
 8005bac:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	69ba      	ldr	r2, [r7, #24]
 8005bb2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005bba:	2201      	movs	r2, #1
 8005bbc:	69fb      	ldr	r3, [r7, #28]
 8005bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8005bc2:	43db      	mvns	r3, r3
 8005bc4:	69ba      	ldr	r2, [r7, #24]
 8005bc6:	4013      	ands	r3, r2
 8005bc8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	091b      	lsrs	r3, r3, #4
 8005bd0:	f003 0201 	and.w	r2, r3, #1
 8005bd4:	69fb      	ldr	r3, [r7, #28]
 8005bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8005bda:	69ba      	ldr	r2, [r7, #24]
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	69ba      	ldr	r2, [r7, #24]
 8005be4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	68db      	ldr	r3, [r3, #12]
 8005bea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005bec:	69fb      	ldr	r3, [r7, #28]
 8005bee:	005b      	lsls	r3, r3, #1
 8005bf0:	2203      	movs	r2, #3
 8005bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8005bf6:	43db      	mvns	r3, r3
 8005bf8:	69ba      	ldr	r2, [r7, #24]
 8005bfa:	4013      	ands	r3, r2
 8005bfc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	689a      	ldr	r2, [r3, #8]
 8005c02:	69fb      	ldr	r3, [r7, #28]
 8005c04:	005b      	lsls	r3, r3, #1
 8005c06:	fa02 f303 	lsl.w	r3, r2, r3
 8005c0a:	69ba      	ldr	r2, [r7, #24]
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	69ba      	ldr	r2, [r7, #24]
 8005c14:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	2b02      	cmp	r3, #2
 8005c1c:	d003      	beq.n	8005c26 <HAL_GPIO_Init+0xee>
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	2b12      	cmp	r3, #18
 8005c24:	d123      	bne.n	8005c6e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005c26:	69fb      	ldr	r3, [r7, #28]
 8005c28:	08da      	lsrs	r2, r3, #3
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	3208      	adds	r2, #8
 8005c2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005c34:	69fb      	ldr	r3, [r7, #28]
 8005c36:	f003 0307 	and.w	r3, r3, #7
 8005c3a:	009b      	lsls	r3, r3, #2
 8005c3c:	220f      	movs	r2, #15
 8005c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c42:	43db      	mvns	r3, r3
 8005c44:	69ba      	ldr	r2, [r7, #24]
 8005c46:	4013      	ands	r3, r2
 8005c48:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	691a      	ldr	r2, [r3, #16]
 8005c4e:	69fb      	ldr	r3, [r7, #28]
 8005c50:	f003 0307 	and.w	r3, r3, #7
 8005c54:	009b      	lsls	r3, r3, #2
 8005c56:	fa02 f303 	lsl.w	r3, r2, r3
 8005c5a:	69ba      	ldr	r2, [r7, #24]
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005c60:	69fb      	ldr	r3, [r7, #28]
 8005c62:	08da      	lsrs	r2, r3, #3
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	3208      	adds	r2, #8
 8005c68:	69b9      	ldr	r1, [r7, #24]
 8005c6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005c74:	69fb      	ldr	r3, [r7, #28]
 8005c76:	005b      	lsls	r3, r3, #1
 8005c78:	2203      	movs	r2, #3
 8005c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c7e:	43db      	mvns	r3, r3
 8005c80:	69ba      	ldr	r2, [r7, #24]
 8005c82:	4013      	ands	r3, r2
 8005c84:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	f003 0203 	and.w	r2, r3, #3
 8005c8e:	69fb      	ldr	r3, [r7, #28]
 8005c90:	005b      	lsls	r3, r3, #1
 8005c92:	fa02 f303 	lsl.w	r3, r2, r3
 8005c96:	69ba      	ldr	r2, [r7, #24]
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	69ba      	ldr	r2, [r7, #24]
 8005ca0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	f000 80e0 	beq.w	8005e70 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005cb0:	4b2f      	ldr	r3, [pc, #188]	; (8005d70 <HAL_GPIO_Init+0x238>)
 8005cb2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005cb6:	4a2e      	ldr	r2, [pc, #184]	; (8005d70 <HAL_GPIO_Init+0x238>)
 8005cb8:	f043 0302 	orr.w	r3, r3, #2
 8005cbc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005cc0:	4b2b      	ldr	r3, [pc, #172]	; (8005d70 <HAL_GPIO_Init+0x238>)
 8005cc2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005cc6:	f003 0302 	and.w	r3, r3, #2
 8005cca:	60fb      	str	r3, [r7, #12]
 8005ccc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005cce:	4a29      	ldr	r2, [pc, #164]	; (8005d74 <HAL_GPIO_Init+0x23c>)
 8005cd0:	69fb      	ldr	r3, [r7, #28]
 8005cd2:	089b      	lsrs	r3, r3, #2
 8005cd4:	3302      	adds	r3, #2
 8005cd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005cdc:	69fb      	ldr	r3, [r7, #28]
 8005cde:	f003 0303 	and.w	r3, r3, #3
 8005ce2:	009b      	lsls	r3, r3, #2
 8005ce4:	220f      	movs	r2, #15
 8005ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8005cea:	43db      	mvns	r3, r3
 8005cec:	69ba      	ldr	r2, [r7, #24]
 8005cee:	4013      	ands	r3, r2
 8005cf0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	4a20      	ldr	r2, [pc, #128]	; (8005d78 <HAL_GPIO_Init+0x240>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d052      	beq.n	8005da0 <HAL_GPIO_Init+0x268>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	4a1f      	ldr	r2, [pc, #124]	; (8005d7c <HAL_GPIO_Init+0x244>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d031      	beq.n	8005d66 <HAL_GPIO_Init+0x22e>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	4a1e      	ldr	r2, [pc, #120]	; (8005d80 <HAL_GPIO_Init+0x248>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d02b      	beq.n	8005d62 <HAL_GPIO_Init+0x22a>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	4a1d      	ldr	r2, [pc, #116]	; (8005d84 <HAL_GPIO_Init+0x24c>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d025      	beq.n	8005d5e <HAL_GPIO_Init+0x226>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	4a1c      	ldr	r2, [pc, #112]	; (8005d88 <HAL_GPIO_Init+0x250>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d01f      	beq.n	8005d5a <HAL_GPIO_Init+0x222>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	4a1b      	ldr	r2, [pc, #108]	; (8005d8c <HAL_GPIO_Init+0x254>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d019      	beq.n	8005d56 <HAL_GPIO_Init+0x21e>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	4a1a      	ldr	r2, [pc, #104]	; (8005d90 <HAL_GPIO_Init+0x258>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d013      	beq.n	8005d52 <HAL_GPIO_Init+0x21a>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	4a19      	ldr	r2, [pc, #100]	; (8005d94 <HAL_GPIO_Init+0x25c>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d00d      	beq.n	8005d4e <HAL_GPIO_Init+0x216>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	4a18      	ldr	r2, [pc, #96]	; (8005d98 <HAL_GPIO_Init+0x260>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d007      	beq.n	8005d4a <HAL_GPIO_Init+0x212>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	4a17      	ldr	r2, [pc, #92]	; (8005d9c <HAL_GPIO_Init+0x264>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d101      	bne.n	8005d46 <HAL_GPIO_Init+0x20e>
 8005d42:	2309      	movs	r3, #9
 8005d44:	e02d      	b.n	8005da2 <HAL_GPIO_Init+0x26a>
 8005d46:	230a      	movs	r3, #10
 8005d48:	e02b      	b.n	8005da2 <HAL_GPIO_Init+0x26a>
 8005d4a:	2308      	movs	r3, #8
 8005d4c:	e029      	b.n	8005da2 <HAL_GPIO_Init+0x26a>
 8005d4e:	2307      	movs	r3, #7
 8005d50:	e027      	b.n	8005da2 <HAL_GPIO_Init+0x26a>
 8005d52:	2306      	movs	r3, #6
 8005d54:	e025      	b.n	8005da2 <HAL_GPIO_Init+0x26a>
 8005d56:	2305      	movs	r3, #5
 8005d58:	e023      	b.n	8005da2 <HAL_GPIO_Init+0x26a>
 8005d5a:	2304      	movs	r3, #4
 8005d5c:	e021      	b.n	8005da2 <HAL_GPIO_Init+0x26a>
 8005d5e:	2303      	movs	r3, #3
 8005d60:	e01f      	b.n	8005da2 <HAL_GPIO_Init+0x26a>
 8005d62:	2302      	movs	r3, #2
 8005d64:	e01d      	b.n	8005da2 <HAL_GPIO_Init+0x26a>
 8005d66:	2301      	movs	r3, #1
 8005d68:	e01b      	b.n	8005da2 <HAL_GPIO_Init+0x26a>
 8005d6a:	bf00      	nop
 8005d6c:	58000080 	.word	0x58000080
 8005d70:	58024400 	.word	0x58024400
 8005d74:	58000400 	.word	0x58000400
 8005d78:	58020000 	.word	0x58020000
 8005d7c:	58020400 	.word	0x58020400
 8005d80:	58020800 	.word	0x58020800
 8005d84:	58020c00 	.word	0x58020c00
 8005d88:	58021000 	.word	0x58021000
 8005d8c:	58021400 	.word	0x58021400
 8005d90:	58021800 	.word	0x58021800
 8005d94:	58021c00 	.word	0x58021c00
 8005d98:	58022000 	.word	0x58022000
 8005d9c:	58022400 	.word	0x58022400
 8005da0:	2300      	movs	r3, #0
 8005da2:	69fa      	ldr	r2, [r7, #28]
 8005da4:	f002 0203 	and.w	r2, r2, #3
 8005da8:	0092      	lsls	r2, r2, #2
 8005daa:	4093      	lsls	r3, r2
 8005dac:	69ba      	ldr	r2, [r7, #24]
 8005dae:	4313      	orrs	r3, r2
 8005db0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005db2:	4938      	ldr	r1, [pc, #224]	; (8005e94 <HAL_GPIO_Init+0x35c>)
 8005db4:	69fb      	ldr	r3, [r7, #28]
 8005db6:	089b      	lsrs	r3, r3, #2
 8005db8:	3302      	adds	r3, #2
 8005dba:	69ba      	ldr	r2, [r7, #24]
 8005dbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	43db      	mvns	r3, r3
 8005dca:	69ba      	ldr	r2, [r7, #24]
 8005dcc:	4013      	ands	r3, r2
 8005dce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d003      	beq.n	8005de4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005ddc:	69ba      	ldr	r2, [r7, #24]
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	4313      	orrs	r3, r2
 8005de2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	69ba      	ldr	r2, [r7, #24]
 8005de8:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	43db      	mvns	r3, r3
 8005df4:	69ba      	ldr	r2, [r7, #24]
 8005df6:	4013      	ands	r3, r2
 8005df8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d003      	beq.n	8005e0e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005e06:	69ba      	ldr	r2, [r7, #24]
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	69ba      	ldr	r2, [r7, #24]
 8005e12:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005e14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	43db      	mvns	r3, r3
 8005e20:	69ba      	ldr	r2, [r7, #24]
 8005e22:	4013      	ands	r3, r2
 8005e24:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d003      	beq.n	8005e3a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8005e32:	69ba      	ldr	r2, [r7, #24]
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	4313      	orrs	r3, r2
 8005e38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005e3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e3e:	69bb      	ldr	r3, [r7, #24]
 8005e40:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005e42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	43db      	mvns	r3, r3
 8005e4e:	69ba      	ldr	r2, [r7, #24]
 8005e50:	4013      	ands	r3, r2
 8005e52:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d003      	beq.n	8005e68 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8005e60:	69ba      	ldr	r2, [r7, #24]
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	4313      	orrs	r3, r2
 8005e66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005e68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e6c:	69bb      	ldr	r3, [r7, #24]
 8005e6e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8005e70:	69fb      	ldr	r3, [r7, #28]
 8005e72:	3301      	adds	r3, #1
 8005e74:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	681a      	ldr	r2, [r3, #0]
 8005e7a:	69fb      	ldr	r3, [r7, #28]
 8005e7c:	fa22 f303 	lsr.w	r3, r2, r3
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	f47f ae63 	bne.w	8005b4c <HAL_GPIO_Init+0x14>
  }
}
 8005e86:	bf00      	nop
 8005e88:	3724      	adds	r7, #36	; 0x24
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr
 8005e92:	bf00      	nop
 8005e94:	58000400 	.word	0x58000400

08005e98 <HAL_HSEM_Take>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_HSEM_Take(uint32_t SemID, uint32_t ProcessID)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b083      	sub	sp, #12
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
 8005ea0:	6039      	str	r1, [r7, #0]
    /*take success when MasterID and ProcessID match and take bit set*/
    return HAL_OK;
  }
#else
  /* First step  write R register with MasterID, processID and take bit=1*/
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK);
 8005ea2:	490c      	ldr	r1, [pc, #48]	; (8005ed4 <HAL_HSEM_Take+0x3c>)
 8005ea4:	683a      	ldr	r2, [r7, #0]
 8005ea6:	4b0c      	ldr	r3, [pc, #48]	; (8005ed8 <HAL_HSEM_Take+0x40>)
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	687a      	ldr	r2, [r7, #4]
 8005eac:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  /* second step : read the R register . Take achieved if MasterID and processID match and take bit set to 1 */
  if (HSEM->R[SemID] == (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK))
 8005eb0:	4a08      	ldr	r2, [pc, #32]	; (8005ed4 <HAL_HSEM_Take+0x3c>)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005eb8:	6839      	ldr	r1, [r7, #0]
 8005eba:	4b07      	ldr	r3, [pc, #28]	; (8005ed8 <HAL_HSEM_Take+0x40>)
 8005ebc:	430b      	orrs	r3, r1
 8005ebe:	429a      	cmp	r2, r3
 8005ec0:	d101      	bne.n	8005ec6 <HAL_HSEM_Take+0x2e>
  {
    /*take success when MasterID and ProcessID match and take bit set*/
    return HAL_OK;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	e000      	b.n	8005ec8 <HAL_HSEM_Take+0x30>
  }
#endif

  /* Semaphore take fails*/
  return HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	370c      	adds	r7, #12
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr
 8005ed4:	58026400 	.word	0x58026400
 8005ed8:	80000300 	.word	0x80000300

08005edc <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b083      	sub	sp, #12
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8005ee4:	4a08      	ldr	r2, [pc, #32]	; (8005f08 <HAL_HSEM_FastTake+0x2c>)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	3320      	adds	r3, #32
 8005eea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005eee:	4a07      	ldr	r2, [pc, #28]	; (8005f0c <HAL_HSEM_FastTake+0x30>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d101      	bne.n	8005ef8 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	e000      	b.n	8005efa <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8005ef8:	2301      	movs	r3, #1
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	370c      	adds	r7, #12
 8005efe:	46bd      	mov	sp, r7
 8005f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f04:	4770      	bx	lr
 8005f06:	bf00      	nop
 8005f08:	58026400 	.word	0x58026400
 8005f0c:	80000300 	.word	0x80000300

08005f10 <HAL_HSEM_IsSemTaken>:
  * @brief  Check semaphore state Taken or not.
  * @param  SemID: semaphore ID
  * @retval HAL HSEM state
  */
uint32_t HAL_HSEM_IsSemTaken(uint32_t SemID)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b083      	sub	sp, #12
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  return (((HSEM->R[SemID] & HSEM_R_LOCK) != 0U) ? 1UL : 0UL);
 8005f18:	4a07      	ldr	r2, [pc, #28]	; (8005f38 <HAL_HSEM_IsSemTaken+0x28>)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	da01      	bge.n	8005f28 <HAL_HSEM_IsSemTaken+0x18>
 8005f24:	2301      	movs	r3, #1
 8005f26:	e000      	b.n	8005f2a <HAL_HSEM_IsSemTaken+0x1a>
 8005f28:	2300      	movs	r3, #0
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	370c      	adds	r7, #12
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f34:	4770      	bx	lr
 8005f36:	bf00      	nop
 8005f38:	58026400 	.word	0x58026400

08005f3c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b083      	sub	sp, #12
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
 8005f44:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8005f46:	4906      	ldr	r1, [pc, #24]	; (8005f60 <HAL_HSEM_Release+0x24>)
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8005f54:	bf00      	nop
 8005f56:	370c      	adds	r7, #12
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr
 8005f60:	58026400 	.word	0x58026400

08005f64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b082      	sub	sp, #8
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d101      	bne.n	8005f76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	e07f      	b.n	8006076 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f7c:	b2db      	uxtb	r3, r3
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d106      	bne.n	8005f90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2200      	movs	r2, #0
 8005f86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f7fa fda8 	bl	8000ae0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2224      	movs	r2, #36	; 0x24
 8005f94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	681a      	ldr	r2, [r3, #0]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f022 0201 	bic.w	r2, r2, #1
 8005fa6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	685a      	ldr	r2, [r3, #4]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005fb4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	689a      	ldr	r2, [r3, #8]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005fc4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	68db      	ldr	r3, [r3, #12]
 8005fca:	2b01      	cmp	r3, #1
 8005fcc:	d107      	bne.n	8005fde <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	689a      	ldr	r2, [r3, #8]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005fda:	609a      	str	r2, [r3, #8]
 8005fdc:	e006      	b.n	8005fec <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	689a      	ldr	r2, [r3, #8]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005fea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	68db      	ldr	r3, [r3, #12]
 8005ff0:	2b02      	cmp	r3, #2
 8005ff2:	d104      	bne.n	8005ffe <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ffc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	6859      	ldr	r1, [r3, #4]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681a      	ldr	r2, [r3, #0]
 8006008:	4b1d      	ldr	r3, [pc, #116]	; (8006080 <HAL_I2C_Init+0x11c>)
 800600a:	430b      	orrs	r3, r1
 800600c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	68da      	ldr	r2, [r3, #12]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800601c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	691a      	ldr	r2, [r3, #16]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	695b      	ldr	r3, [r3, #20]
 8006026:	ea42 0103 	orr.w	r1, r2, r3
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	699b      	ldr	r3, [r3, #24]
 800602e:	021a      	lsls	r2, r3, #8
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	430a      	orrs	r2, r1
 8006036:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	69d9      	ldr	r1, [r3, #28]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6a1a      	ldr	r2, [r3, #32]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	430a      	orrs	r2, r1
 8006046:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f042 0201 	orr.w	r2, r2, #1
 8006056:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2200      	movs	r2, #0
 800605c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2220      	movs	r2, #32
 8006062:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2200      	movs	r2, #0
 800606a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2200      	movs	r2, #0
 8006070:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006074:	2300      	movs	r3, #0
}
 8006076:	4618      	mov	r0, r3
 8006078:	3708      	adds	r7, #8
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}
 800607e:	bf00      	nop
 8006080:	02008000 	.word	0x02008000

08006084 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006084:	b480      	push	{r7}
 8006086:	b083      	sub	sp, #12
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
 800608c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006094:	b2db      	uxtb	r3, r3
 8006096:	2b20      	cmp	r3, #32
 8006098:	d138      	bne.n	800610c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	d101      	bne.n	80060a8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80060a4:	2302      	movs	r3, #2
 80060a6:	e032      	b.n	800610e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2201      	movs	r2, #1
 80060ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2224      	movs	r2, #36	; 0x24
 80060b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	681a      	ldr	r2, [r3, #0]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f022 0201 	bic.w	r2, r2, #1
 80060c6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	681a      	ldr	r2, [r3, #0]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80060d6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	6819      	ldr	r1, [r3, #0]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	683a      	ldr	r2, [r7, #0]
 80060e4:	430a      	orrs	r2, r1
 80060e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	681a      	ldr	r2, [r3, #0]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f042 0201 	orr.w	r2, r2, #1
 80060f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2220      	movs	r2, #32
 80060fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2200      	movs	r2, #0
 8006104:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006108:	2300      	movs	r3, #0
 800610a:	e000      	b.n	800610e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800610c:	2302      	movs	r3, #2
  }
}
 800610e:	4618      	mov	r0, r3
 8006110:	370c      	adds	r7, #12
 8006112:	46bd      	mov	sp, r7
 8006114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006118:	4770      	bx	lr

0800611a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800611a:	b480      	push	{r7}
 800611c:	b085      	sub	sp, #20
 800611e:	af00      	add	r7, sp, #0
 8006120:	6078      	str	r0, [r7, #4]
 8006122:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800612a:	b2db      	uxtb	r3, r3
 800612c:	2b20      	cmp	r3, #32
 800612e:	d139      	bne.n	80061a4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006136:	2b01      	cmp	r3, #1
 8006138:	d101      	bne.n	800613e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800613a:	2302      	movs	r3, #2
 800613c:	e033      	b.n	80061a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2201      	movs	r2, #1
 8006142:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2224      	movs	r2, #36	; 0x24
 800614a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f022 0201 	bic.w	r2, r2, #1
 800615c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800616c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	021b      	lsls	r3, r3, #8
 8006172:	68fa      	ldr	r2, [r7, #12]
 8006174:	4313      	orrs	r3, r2
 8006176:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	68fa      	ldr	r2, [r7, #12]
 800617e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	681a      	ldr	r2, [r3, #0]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f042 0201 	orr.w	r2, r2, #1
 800618e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2220      	movs	r2, #32
 8006194:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2200      	movs	r2, #0
 800619c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80061a0:	2300      	movs	r3, #0
 80061a2:	e000      	b.n	80061a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80061a4:	2302      	movs	r3, #2
  }
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3714      	adds	r7, #20
 80061aa:	46bd      	mov	sp, r7
 80061ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b0:	4770      	bx	lr
	...

080061b4 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b085      	sub	sp, #20
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80061bc:	4b0d      	ldr	r3, [pc, #52]	; (80061f4 <HAL_I2CEx_EnableFastModePlus+0x40>)
 80061be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80061c2:	4a0c      	ldr	r2, [pc, #48]	; (80061f4 <HAL_I2CEx_EnableFastModePlus+0x40>)
 80061c4:	f043 0302 	orr.w	r3, r3, #2
 80061c8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80061cc:	4b09      	ldr	r3, [pc, #36]	; (80061f4 <HAL_I2CEx_EnableFastModePlus+0x40>)
 80061ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80061d2:	f003 0302 	and.w	r3, r3, #2
 80061d6:	60fb      	str	r3, [r7, #12]
 80061d8:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 80061da:	4b07      	ldr	r3, [pc, #28]	; (80061f8 <HAL_I2CEx_EnableFastModePlus+0x44>)
 80061dc:	685a      	ldr	r2, [r3, #4]
 80061de:	4906      	ldr	r1, [pc, #24]	; (80061f8 <HAL_I2CEx_EnableFastModePlus+0x44>)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	4313      	orrs	r3, r2
 80061e4:	604b      	str	r3, [r1, #4]
}
 80061e6:	bf00      	nop
 80061e8:	3714      	adds	r7, #20
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr
 80061f2:	bf00      	nop
 80061f4:	58024400 	.word	0x58024400
 80061f8:	58000400 	.word	0x58000400

080061fc <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b083      	sub	sp, #12
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800620c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800620e:	2300      	movs	r3, #0
}
 8006210:	4618      	mov	r0, r3
 8006212:	370c      	adds	r7, #12
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr

0800621c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b084      	sub	sp, #16
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8006224:	4b29      	ldr	r3, [pc, #164]	; (80062cc <HAL_PWREx_ConfigSupply+0xb0>)
 8006226:	68db      	ldr	r3, [r3, #12]
 8006228:	f003 0307 	and.w	r3, r3, #7
 800622c:	2b06      	cmp	r3, #6
 800622e:	d00a      	beq.n	8006246 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006230:	4b26      	ldr	r3, [pc, #152]	; (80062cc <HAL_PWREx_ConfigSupply+0xb0>)
 8006232:	68db      	ldr	r3, [r3, #12]
 8006234:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006238:	687a      	ldr	r2, [r7, #4]
 800623a:	429a      	cmp	r2, r3
 800623c:	d001      	beq.n	8006242 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800623e:	2301      	movs	r3, #1
 8006240:	e040      	b.n	80062c4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006242:	2300      	movs	r3, #0
 8006244:	e03e      	b.n	80062c4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006246:	4b21      	ldr	r3, [pc, #132]	; (80062cc <HAL_PWREx_ConfigSupply+0xb0>)
 8006248:	68db      	ldr	r3, [r3, #12]
 800624a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800624e:	491f      	ldr	r1, [pc, #124]	; (80062cc <HAL_PWREx_ConfigSupply+0xb0>)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	4313      	orrs	r3, r2
 8006254:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006256:	f7fb fe99 	bl	8001f8c <HAL_GetTick>
 800625a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800625c:	e009      	b.n	8006272 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800625e:	f7fb fe95 	bl	8001f8c <HAL_GetTick>
 8006262:	4602      	mov	r2, r0
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	1ad3      	subs	r3, r2, r3
 8006268:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800626c:	d901      	bls.n	8006272 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800626e:	2301      	movs	r3, #1
 8006270:	e028      	b.n	80062c4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006272:	4b16      	ldr	r3, [pc, #88]	; (80062cc <HAL_PWREx_ConfigSupply+0xb0>)
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800627a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800627e:	d1ee      	bne.n	800625e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2b1e      	cmp	r3, #30
 8006284:	d008      	beq.n	8006298 <HAL_PWREx_ConfigSupply+0x7c>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2b2e      	cmp	r3, #46	; 0x2e
 800628a:	d005      	beq.n	8006298 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2b1d      	cmp	r3, #29
 8006290:	d002      	beq.n	8006298 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2b2d      	cmp	r3, #45	; 0x2d
 8006296:	d114      	bne.n	80062c2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8006298:	f7fb fe78 	bl	8001f8c <HAL_GetTick>
 800629c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800629e:	e009      	b.n	80062b4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80062a0:	f7fb fe74 	bl	8001f8c <HAL_GetTick>
 80062a4:	4602      	mov	r2, r0
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	1ad3      	subs	r3, r2, r3
 80062aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80062ae:	d901      	bls.n	80062b4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80062b0:	2301      	movs	r3, #1
 80062b2:	e007      	b.n	80062c4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80062b4:	4b05      	ldr	r3, [pc, #20]	; (80062cc <HAL_PWREx_ConfigSupply+0xb0>)
 80062b6:	68db      	ldr	r3, [r3, #12]
 80062b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062c0:	d1ee      	bne.n	80062a0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80062c2:	2300      	movs	r3, #0
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3710      	adds	r7, #16
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}
 80062cc:	58024800 	.word	0x58024800

080062d0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b08c      	sub	sp, #48	; 0x30
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d101      	bne.n	80062e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80062de:	2301      	movs	r3, #1
 80062e0:	e3ff      	b.n	8006ae2 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f003 0301 	and.w	r3, r3, #1
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	f000 8087 	beq.w	80063fe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80062f0:	4b99      	ldr	r3, [pc, #612]	; (8006558 <HAL_RCC_OscConfig+0x288>)
 80062f2:	691b      	ldr	r3, [r3, #16]
 80062f4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80062f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80062fa:	4b97      	ldr	r3, [pc, #604]	; (8006558 <HAL_RCC_OscConfig+0x288>)
 80062fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062fe:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006302:	2b10      	cmp	r3, #16
 8006304:	d007      	beq.n	8006316 <HAL_RCC_OscConfig+0x46>
 8006306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006308:	2b18      	cmp	r3, #24
 800630a:	d110      	bne.n	800632e <HAL_RCC_OscConfig+0x5e>
 800630c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800630e:	f003 0303 	and.w	r3, r3, #3
 8006312:	2b02      	cmp	r3, #2
 8006314:	d10b      	bne.n	800632e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006316:	4b90      	ldr	r3, [pc, #576]	; (8006558 <HAL_RCC_OscConfig+0x288>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800631e:	2b00      	cmp	r3, #0
 8006320:	d06c      	beq.n	80063fc <HAL_RCC_OscConfig+0x12c>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d168      	bne.n	80063fc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	e3d9      	b.n	8006ae2 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006336:	d106      	bne.n	8006346 <HAL_RCC_OscConfig+0x76>
 8006338:	4b87      	ldr	r3, [pc, #540]	; (8006558 <HAL_RCC_OscConfig+0x288>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a86      	ldr	r2, [pc, #536]	; (8006558 <HAL_RCC_OscConfig+0x288>)
 800633e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006342:	6013      	str	r3, [r2, #0]
 8006344:	e02e      	b.n	80063a4 <HAL_RCC_OscConfig+0xd4>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d10c      	bne.n	8006368 <HAL_RCC_OscConfig+0x98>
 800634e:	4b82      	ldr	r3, [pc, #520]	; (8006558 <HAL_RCC_OscConfig+0x288>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a81      	ldr	r2, [pc, #516]	; (8006558 <HAL_RCC_OscConfig+0x288>)
 8006354:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006358:	6013      	str	r3, [r2, #0]
 800635a:	4b7f      	ldr	r3, [pc, #508]	; (8006558 <HAL_RCC_OscConfig+0x288>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a7e      	ldr	r2, [pc, #504]	; (8006558 <HAL_RCC_OscConfig+0x288>)
 8006360:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006364:	6013      	str	r3, [r2, #0]
 8006366:	e01d      	b.n	80063a4 <HAL_RCC_OscConfig+0xd4>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006370:	d10c      	bne.n	800638c <HAL_RCC_OscConfig+0xbc>
 8006372:	4b79      	ldr	r3, [pc, #484]	; (8006558 <HAL_RCC_OscConfig+0x288>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a78      	ldr	r2, [pc, #480]	; (8006558 <HAL_RCC_OscConfig+0x288>)
 8006378:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800637c:	6013      	str	r3, [r2, #0]
 800637e:	4b76      	ldr	r3, [pc, #472]	; (8006558 <HAL_RCC_OscConfig+0x288>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a75      	ldr	r2, [pc, #468]	; (8006558 <HAL_RCC_OscConfig+0x288>)
 8006384:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006388:	6013      	str	r3, [r2, #0]
 800638a:	e00b      	b.n	80063a4 <HAL_RCC_OscConfig+0xd4>
 800638c:	4b72      	ldr	r3, [pc, #456]	; (8006558 <HAL_RCC_OscConfig+0x288>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a71      	ldr	r2, [pc, #452]	; (8006558 <HAL_RCC_OscConfig+0x288>)
 8006392:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006396:	6013      	str	r3, [r2, #0]
 8006398:	4b6f      	ldr	r3, [pc, #444]	; (8006558 <HAL_RCC_OscConfig+0x288>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a6e      	ldr	r2, [pc, #440]	; (8006558 <HAL_RCC_OscConfig+0x288>)
 800639e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80063a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d013      	beq.n	80063d4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063ac:	f7fb fdee 	bl	8001f8c <HAL_GetTick>
 80063b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80063b2:	e008      	b.n	80063c6 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80063b4:	f7fb fdea 	bl	8001f8c <HAL_GetTick>
 80063b8:	4602      	mov	r2, r0
 80063ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063bc:	1ad3      	subs	r3, r2, r3
 80063be:	2b64      	cmp	r3, #100	; 0x64
 80063c0:	d901      	bls.n	80063c6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80063c2:	2303      	movs	r3, #3
 80063c4:	e38d      	b.n	8006ae2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80063c6:	4b64      	ldr	r3, [pc, #400]	; (8006558 <HAL_RCC_OscConfig+0x288>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d0f0      	beq.n	80063b4 <HAL_RCC_OscConfig+0xe4>
 80063d2:	e014      	b.n	80063fe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063d4:	f7fb fdda 	bl	8001f8c <HAL_GetTick>
 80063d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80063da:	e008      	b.n	80063ee <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80063dc:	f7fb fdd6 	bl	8001f8c <HAL_GetTick>
 80063e0:	4602      	mov	r2, r0
 80063e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e4:	1ad3      	subs	r3, r2, r3
 80063e6:	2b64      	cmp	r3, #100	; 0x64
 80063e8:	d901      	bls.n	80063ee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80063ea:	2303      	movs	r3, #3
 80063ec:	e379      	b.n	8006ae2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80063ee:	4b5a      	ldr	r3, [pc, #360]	; (8006558 <HAL_RCC_OscConfig+0x288>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d1f0      	bne.n	80063dc <HAL_RCC_OscConfig+0x10c>
 80063fa:	e000      	b.n	80063fe <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f003 0302 	and.w	r3, r3, #2
 8006406:	2b00      	cmp	r3, #0
 8006408:	f000 80ae 	beq.w	8006568 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800640c:	4b52      	ldr	r3, [pc, #328]	; (8006558 <HAL_RCC_OscConfig+0x288>)
 800640e:	691b      	ldr	r3, [r3, #16]
 8006410:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006414:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006416:	4b50      	ldr	r3, [pc, #320]	; (8006558 <HAL_RCC_OscConfig+0x288>)
 8006418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800641a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800641c:	6a3b      	ldr	r3, [r7, #32]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d007      	beq.n	8006432 <HAL_RCC_OscConfig+0x162>
 8006422:	6a3b      	ldr	r3, [r7, #32]
 8006424:	2b18      	cmp	r3, #24
 8006426:	d13a      	bne.n	800649e <HAL_RCC_OscConfig+0x1ce>
 8006428:	69fb      	ldr	r3, [r7, #28]
 800642a:	f003 0303 	and.w	r3, r3, #3
 800642e:	2b00      	cmp	r3, #0
 8006430:	d135      	bne.n	800649e <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006432:	4b49      	ldr	r3, [pc, #292]	; (8006558 <HAL_RCC_OscConfig+0x288>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f003 0304 	and.w	r3, r3, #4
 800643a:	2b00      	cmp	r3, #0
 800643c:	d005      	beq.n	800644a <HAL_RCC_OscConfig+0x17a>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	68db      	ldr	r3, [r3, #12]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d101      	bne.n	800644a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	e34b      	b.n	8006ae2 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800644a:	f7fb fdab 	bl	8001fa4 <HAL_GetREVID>
 800644e:	4602      	mov	r2, r0
 8006450:	f241 0303 	movw	r3, #4099	; 0x1003
 8006454:	429a      	cmp	r2, r3
 8006456:	d817      	bhi.n	8006488 <HAL_RCC_OscConfig+0x1b8>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	691b      	ldr	r3, [r3, #16]
 800645c:	2b40      	cmp	r3, #64	; 0x40
 800645e:	d108      	bne.n	8006472 <HAL_RCC_OscConfig+0x1a2>
 8006460:	4b3d      	ldr	r3, [pc, #244]	; (8006558 <HAL_RCC_OscConfig+0x288>)
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006468:	4a3b      	ldr	r2, [pc, #236]	; (8006558 <HAL_RCC_OscConfig+0x288>)
 800646a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800646e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006470:	e07a      	b.n	8006568 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006472:	4b39      	ldr	r3, [pc, #228]	; (8006558 <HAL_RCC_OscConfig+0x288>)
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	691b      	ldr	r3, [r3, #16]
 800647e:	031b      	lsls	r3, r3, #12
 8006480:	4935      	ldr	r1, [pc, #212]	; (8006558 <HAL_RCC_OscConfig+0x288>)
 8006482:	4313      	orrs	r3, r2
 8006484:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006486:	e06f      	b.n	8006568 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006488:	4b33      	ldr	r3, [pc, #204]	; (8006558 <HAL_RCC_OscConfig+0x288>)
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	691b      	ldr	r3, [r3, #16]
 8006494:	061b      	lsls	r3, r3, #24
 8006496:	4930      	ldr	r1, [pc, #192]	; (8006558 <HAL_RCC_OscConfig+0x288>)
 8006498:	4313      	orrs	r3, r2
 800649a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800649c:	e064      	b.n	8006568 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	68db      	ldr	r3, [r3, #12]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d045      	beq.n	8006532 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80064a6:	4b2c      	ldr	r3, [pc, #176]	; (8006558 <HAL_RCC_OscConfig+0x288>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f023 0219 	bic.w	r2, r3, #25
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	68db      	ldr	r3, [r3, #12]
 80064b2:	4929      	ldr	r1, [pc, #164]	; (8006558 <HAL_RCC_OscConfig+0x288>)
 80064b4:	4313      	orrs	r3, r2
 80064b6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064b8:	f7fb fd68 	bl	8001f8c <HAL_GetTick>
 80064bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80064be:	e008      	b.n	80064d2 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80064c0:	f7fb fd64 	bl	8001f8c <HAL_GetTick>
 80064c4:	4602      	mov	r2, r0
 80064c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c8:	1ad3      	subs	r3, r2, r3
 80064ca:	2b02      	cmp	r3, #2
 80064cc:	d901      	bls.n	80064d2 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80064ce:	2303      	movs	r3, #3
 80064d0:	e307      	b.n	8006ae2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80064d2:	4b21      	ldr	r3, [pc, #132]	; (8006558 <HAL_RCC_OscConfig+0x288>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f003 0304 	and.w	r3, r3, #4
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d0f0      	beq.n	80064c0 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064de:	f7fb fd61 	bl	8001fa4 <HAL_GetREVID>
 80064e2:	4602      	mov	r2, r0
 80064e4:	f241 0303 	movw	r3, #4099	; 0x1003
 80064e8:	429a      	cmp	r2, r3
 80064ea:	d817      	bhi.n	800651c <HAL_RCC_OscConfig+0x24c>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	691b      	ldr	r3, [r3, #16]
 80064f0:	2b40      	cmp	r3, #64	; 0x40
 80064f2:	d108      	bne.n	8006506 <HAL_RCC_OscConfig+0x236>
 80064f4:	4b18      	ldr	r3, [pc, #96]	; (8006558 <HAL_RCC_OscConfig+0x288>)
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80064fc:	4a16      	ldr	r2, [pc, #88]	; (8006558 <HAL_RCC_OscConfig+0x288>)
 80064fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006502:	6053      	str	r3, [r2, #4]
 8006504:	e030      	b.n	8006568 <HAL_RCC_OscConfig+0x298>
 8006506:	4b14      	ldr	r3, [pc, #80]	; (8006558 <HAL_RCC_OscConfig+0x288>)
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	691b      	ldr	r3, [r3, #16]
 8006512:	031b      	lsls	r3, r3, #12
 8006514:	4910      	ldr	r1, [pc, #64]	; (8006558 <HAL_RCC_OscConfig+0x288>)
 8006516:	4313      	orrs	r3, r2
 8006518:	604b      	str	r3, [r1, #4]
 800651a:	e025      	b.n	8006568 <HAL_RCC_OscConfig+0x298>
 800651c:	4b0e      	ldr	r3, [pc, #56]	; (8006558 <HAL_RCC_OscConfig+0x288>)
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	691b      	ldr	r3, [r3, #16]
 8006528:	061b      	lsls	r3, r3, #24
 800652a:	490b      	ldr	r1, [pc, #44]	; (8006558 <HAL_RCC_OscConfig+0x288>)
 800652c:	4313      	orrs	r3, r2
 800652e:	604b      	str	r3, [r1, #4]
 8006530:	e01a      	b.n	8006568 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006532:	4b09      	ldr	r3, [pc, #36]	; (8006558 <HAL_RCC_OscConfig+0x288>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a08      	ldr	r2, [pc, #32]	; (8006558 <HAL_RCC_OscConfig+0x288>)
 8006538:	f023 0301 	bic.w	r3, r3, #1
 800653c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800653e:	f7fb fd25 	bl	8001f8c <HAL_GetTick>
 8006542:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006544:	e00a      	b.n	800655c <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006546:	f7fb fd21 	bl	8001f8c <HAL_GetTick>
 800654a:	4602      	mov	r2, r0
 800654c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800654e:	1ad3      	subs	r3, r2, r3
 8006550:	2b02      	cmp	r3, #2
 8006552:	d903      	bls.n	800655c <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8006554:	2303      	movs	r3, #3
 8006556:	e2c4      	b.n	8006ae2 <HAL_RCC_OscConfig+0x812>
 8006558:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800655c:	4ba4      	ldr	r3, [pc, #656]	; (80067f0 <HAL_RCC_OscConfig+0x520>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f003 0304 	and.w	r3, r3, #4
 8006564:	2b00      	cmp	r3, #0
 8006566:	d1ee      	bne.n	8006546 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f003 0310 	and.w	r3, r3, #16
 8006570:	2b00      	cmp	r3, #0
 8006572:	f000 80a9 	beq.w	80066c8 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006576:	4b9e      	ldr	r3, [pc, #632]	; (80067f0 <HAL_RCC_OscConfig+0x520>)
 8006578:	691b      	ldr	r3, [r3, #16]
 800657a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800657e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006580:	4b9b      	ldr	r3, [pc, #620]	; (80067f0 <HAL_RCC_OscConfig+0x520>)
 8006582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006584:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006586:	69bb      	ldr	r3, [r7, #24]
 8006588:	2b08      	cmp	r3, #8
 800658a:	d007      	beq.n	800659c <HAL_RCC_OscConfig+0x2cc>
 800658c:	69bb      	ldr	r3, [r7, #24]
 800658e:	2b18      	cmp	r3, #24
 8006590:	d13a      	bne.n	8006608 <HAL_RCC_OscConfig+0x338>
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	f003 0303 	and.w	r3, r3, #3
 8006598:	2b01      	cmp	r3, #1
 800659a:	d135      	bne.n	8006608 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800659c:	4b94      	ldr	r3, [pc, #592]	; (80067f0 <HAL_RCC_OscConfig+0x520>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d005      	beq.n	80065b4 <HAL_RCC_OscConfig+0x2e4>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	69db      	ldr	r3, [r3, #28]
 80065ac:	2b80      	cmp	r3, #128	; 0x80
 80065ae:	d001      	beq.n	80065b4 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80065b0:	2301      	movs	r3, #1
 80065b2:	e296      	b.n	8006ae2 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80065b4:	f7fb fcf6 	bl	8001fa4 <HAL_GetREVID>
 80065b8:	4602      	mov	r2, r0
 80065ba:	f241 0303 	movw	r3, #4099	; 0x1003
 80065be:	429a      	cmp	r2, r3
 80065c0:	d817      	bhi.n	80065f2 <HAL_RCC_OscConfig+0x322>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6a1b      	ldr	r3, [r3, #32]
 80065c6:	2b20      	cmp	r3, #32
 80065c8:	d108      	bne.n	80065dc <HAL_RCC_OscConfig+0x30c>
 80065ca:	4b89      	ldr	r3, [pc, #548]	; (80067f0 <HAL_RCC_OscConfig+0x520>)
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80065d2:	4a87      	ldr	r2, [pc, #540]	; (80067f0 <HAL_RCC_OscConfig+0x520>)
 80065d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80065d8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80065da:	e075      	b.n	80066c8 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80065dc:	4b84      	ldr	r3, [pc, #528]	; (80067f0 <HAL_RCC_OscConfig+0x520>)
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6a1b      	ldr	r3, [r3, #32]
 80065e8:	069b      	lsls	r3, r3, #26
 80065ea:	4981      	ldr	r1, [pc, #516]	; (80067f0 <HAL_RCC_OscConfig+0x520>)
 80065ec:	4313      	orrs	r3, r2
 80065ee:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80065f0:	e06a      	b.n	80066c8 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80065f2:	4b7f      	ldr	r3, [pc, #508]	; (80067f0 <HAL_RCC_OscConfig+0x520>)
 80065f4:	68db      	ldr	r3, [r3, #12]
 80065f6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6a1b      	ldr	r3, [r3, #32]
 80065fe:	061b      	lsls	r3, r3, #24
 8006600:	497b      	ldr	r1, [pc, #492]	; (80067f0 <HAL_RCC_OscConfig+0x520>)
 8006602:	4313      	orrs	r3, r2
 8006604:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006606:	e05f      	b.n	80066c8 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	69db      	ldr	r3, [r3, #28]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d042      	beq.n	8006696 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006610:	4b77      	ldr	r3, [pc, #476]	; (80067f0 <HAL_RCC_OscConfig+0x520>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a76      	ldr	r2, [pc, #472]	; (80067f0 <HAL_RCC_OscConfig+0x520>)
 8006616:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800661a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800661c:	f7fb fcb6 	bl	8001f8c <HAL_GetTick>
 8006620:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006622:	e008      	b.n	8006636 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006624:	f7fb fcb2 	bl	8001f8c <HAL_GetTick>
 8006628:	4602      	mov	r2, r0
 800662a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800662c:	1ad3      	subs	r3, r2, r3
 800662e:	2b02      	cmp	r3, #2
 8006630:	d901      	bls.n	8006636 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8006632:	2303      	movs	r3, #3
 8006634:	e255      	b.n	8006ae2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006636:	4b6e      	ldr	r3, [pc, #440]	; (80067f0 <HAL_RCC_OscConfig+0x520>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800663e:	2b00      	cmp	r3, #0
 8006640:	d0f0      	beq.n	8006624 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006642:	f7fb fcaf 	bl	8001fa4 <HAL_GetREVID>
 8006646:	4602      	mov	r2, r0
 8006648:	f241 0303 	movw	r3, #4099	; 0x1003
 800664c:	429a      	cmp	r2, r3
 800664e:	d817      	bhi.n	8006680 <HAL_RCC_OscConfig+0x3b0>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6a1b      	ldr	r3, [r3, #32]
 8006654:	2b20      	cmp	r3, #32
 8006656:	d108      	bne.n	800666a <HAL_RCC_OscConfig+0x39a>
 8006658:	4b65      	ldr	r3, [pc, #404]	; (80067f0 <HAL_RCC_OscConfig+0x520>)
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006660:	4a63      	ldr	r2, [pc, #396]	; (80067f0 <HAL_RCC_OscConfig+0x520>)
 8006662:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006666:	6053      	str	r3, [r2, #4]
 8006668:	e02e      	b.n	80066c8 <HAL_RCC_OscConfig+0x3f8>
 800666a:	4b61      	ldr	r3, [pc, #388]	; (80067f0 <HAL_RCC_OscConfig+0x520>)
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6a1b      	ldr	r3, [r3, #32]
 8006676:	069b      	lsls	r3, r3, #26
 8006678:	495d      	ldr	r1, [pc, #372]	; (80067f0 <HAL_RCC_OscConfig+0x520>)
 800667a:	4313      	orrs	r3, r2
 800667c:	604b      	str	r3, [r1, #4]
 800667e:	e023      	b.n	80066c8 <HAL_RCC_OscConfig+0x3f8>
 8006680:	4b5b      	ldr	r3, [pc, #364]	; (80067f0 <HAL_RCC_OscConfig+0x520>)
 8006682:	68db      	ldr	r3, [r3, #12]
 8006684:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6a1b      	ldr	r3, [r3, #32]
 800668c:	061b      	lsls	r3, r3, #24
 800668e:	4958      	ldr	r1, [pc, #352]	; (80067f0 <HAL_RCC_OscConfig+0x520>)
 8006690:	4313      	orrs	r3, r2
 8006692:	60cb      	str	r3, [r1, #12]
 8006694:	e018      	b.n	80066c8 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006696:	4b56      	ldr	r3, [pc, #344]	; (80067f0 <HAL_RCC_OscConfig+0x520>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a55      	ldr	r2, [pc, #340]	; (80067f0 <HAL_RCC_OscConfig+0x520>)
 800669c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80066a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066a2:	f7fb fc73 	bl	8001f8c <HAL_GetTick>
 80066a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80066a8:	e008      	b.n	80066bc <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80066aa:	f7fb fc6f 	bl	8001f8c <HAL_GetTick>
 80066ae:	4602      	mov	r2, r0
 80066b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b2:	1ad3      	subs	r3, r2, r3
 80066b4:	2b02      	cmp	r3, #2
 80066b6:	d901      	bls.n	80066bc <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 80066b8:	2303      	movs	r3, #3
 80066ba:	e212      	b.n	8006ae2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80066bc:	4b4c      	ldr	r3, [pc, #304]	; (80067f0 <HAL_RCC_OscConfig+0x520>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d1f0      	bne.n	80066aa <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f003 0308 	and.w	r3, r3, #8
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d036      	beq.n	8006742 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	695b      	ldr	r3, [r3, #20]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d019      	beq.n	8006710 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80066dc:	4b44      	ldr	r3, [pc, #272]	; (80067f0 <HAL_RCC_OscConfig+0x520>)
 80066de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066e0:	4a43      	ldr	r2, [pc, #268]	; (80067f0 <HAL_RCC_OscConfig+0x520>)
 80066e2:	f043 0301 	orr.w	r3, r3, #1
 80066e6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066e8:	f7fb fc50 	bl	8001f8c <HAL_GetTick>
 80066ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80066ee:	e008      	b.n	8006702 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80066f0:	f7fb fc4c 	bl	8001f8c <HAL_GetTick>
 80066f4:	4602      	mov	r2, r0
 80066f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f8:	1ad3      	subs	r3, r2, r3
 80066fa:	2b02      	cmp	r3, #2
 80066fc:	d901      	bls.n	8006702 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80066fe:	2303      	movs	r3, #3
 8006700:	e1ef      	b.n	8006ae2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006702:	4b3b      	ldr	r3, [pc, #236]	; (80067f0 <HAL_RCC_OscConfig+0x520>)
 8006704:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006706:	f003 0302 	and.w	r3, r3, #2
 800670a:	2b00      	cmp	r3, #0
 800670c:	d0f0      	beq.n	80066f0 <HAL_RCC_OscConfig+0x420>
 800670e:	e018      	b.n	8006742 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006710:	4b37      	ldr	r3, [pc, #220]	; (80067f0 <HAL_RCC_OscConfig+0x520>)
 8006712:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006714:	4a36      	ldr	r2, [pc, #216]	; (80067f0 <HAL_RCC_OscConfig+0x520>)
 8006716:	f023 0301 	bic.w	r3, r3, #1
 800671a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800671c:	f7fb fc36 	bl	8001f8c <HAL_GetTick>
 8006720:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006722:	e008      	b.n	8006736 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006724:	f7fb fc32 	bl	8001f8c <HAL_GetTick>
 8006728:	4602      	mov	r2, r0
 800672a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800672c:	1ad3      	subs	r3, r2, r3
 800672e:	2b02      	cmp	r3, #2
 8006730:	d901      	bls.n	8006736 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8006732:	2303      	movs	r3, #3
 8006734:	e1d5      	b.n	8006ae2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006736:	4b2e      	ldr	r3, [pc, #184]	; (80067f0 <HAL_RCC_OscConfig+0x520>)
 8006738:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800673a:	f003 0302 	and.w	r3, r3, #2
 800673e:	2b00      	cmp	r3, #0
 8006740:	d1f0      	bne.n	8006724 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f003 0320 	and.w	r3, r3, #32
 800674a:	2b00      	cmp	r3, #0
 800674c:	d036      	beq.n	80067bc <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	699b      	ldr	r3, [r3, #24]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d019      	beq.n	800678a <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006756:	4b26      	ldr	r3, [pc, #152]	; (80067f0 <HAL_RCC_OscConfig+0x520>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a25      	ldr	r2, [pc, #148]	; (80067f0 <HAL_RCC_OscConfig+0x520>)
 800675c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006760:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006762:	f7fb fc13 	bl	8001f8c <HAL_GetTick>
 8006766:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006768:	e008      	b.n	800677c <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800676a:	f7fb fc0f 	bl	8001f8c <HAL_GetTick>
 800676e:	4602      	mov	r2, r0
 8006770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006772:	1ad3      	subs	r3, r2, r3
 8006774:	2b02      	cmp	r3, #2
 8006776:	d901      	bls.n	800677c <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8006778:	2303      	movs	r3, #3
 800677a:	e1b2      	b.n	8006ae2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800677c:	4b1c      	ldr	r3, [pc, #112]	; (80067f0 <HAL_RCC_OscConfig+0x520>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006784:	2b00      	cmp	r3, #0
 8006786:	d0f0      	beq.n	800676a <HAL_RCC_OscConfig+0x49a>
 8006788:	e018      	b.n	80067bc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800678a:	4b19      	ldr	r3, [pc, #100]	; (80067f0 <HAL_RCC_OscConfig+0x520>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a18      	ldr	r2, [pc, #96]	; (80067f0 <HAL_RCC_OscConfig+0x520>)
 8006790:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006794:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006796:	f7fb fbf9 	bl	8001f8c <HAL_GetTick>
 800679a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800679c:	e008      	b.n	80067b0 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800679e:	f7fb fbf5 	bl	8001f8c <HAL_GetTick>
 80067a2:	4602      	mov	r2, r0
 80067a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a6:	1ad3      	subs	r3, r2, r3
 80067a8:	2b02      	cmp	r3, #2
 80067aa:	d901      	bls.n	80067b0 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 80067ac:	2303      	movs	r3, #3
 80067ae:	e198      	b.n	8006ae2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80067b0:	4b0f      	ldr	r3, [pc, #60]	; (80067f0 <HAL_RCC_OscConfig+0x520>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d1f0      	bne.n	800679e <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f003 0304 	and.w	r3, r3, #4
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	f000 8085 	beq.w	80068d4 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80067ca:	4b0a      	ldr	r3, [pc, #40]	; (80067f4 <HAL_RCC_OscConfig+0x524>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a09      	ldr	r2, [pc, #36]	; (80067f4 <HAL_RCC_OscConfig+0x524>)
 80067d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067d4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80067d6:	f7fb fbd9 	bl	8001f8c <HAL_GetTick>
 80067da:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80067dc:	e00c      	b.n	80067f8 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80067de:	f7fb fbd5 	bl	8001f8c <HAL_GetTick>
 80067e2:	4602      	mov	r2, r0
 80067e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e6:	1ad3      	subs	r3, r2, r3
 80067e8:	2b64      	cmp	r3, #100	; 0x64
 80067ea:	d905      	bls.n	80067f8 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80067ec:	2303      	movs	r3, #3
 80067ee:	e178      	b.n	8006ae2 <HAL_RCC_OscConfig+0x812>
 80067f0:	58024400 	.word	0x58024400
 80067f4:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80067f8:	4b96      	ldr	r3, [pc, #600]	; (8006a54 <HAL_RCC_OscConfig+0x784>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006800:	2b00      	cmp	r3, #0
 8006802:	d0ec      	beq.n	80067de <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	689b      	ldr	r3, [r3, #8]
 8006808:	2b01      	cmp	r3, #1
 800680a:	d106      	bne.n	800681a <HAL_RCC_OscConfig+0x54a>
 800680c:	4b92      	ldr	r3, [pc, #584]	; (8006a58 <HAL_RCC_OscConfig+0x788>)
 800680e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006810:	4a91      	ldr	r2, [pc, #580]	; (8006a58 <HAL_RCC_OscConfig+0x788>)
 8006812:	f043 0301 	orr.w	r3, r3, #1
 8006816:	6713      	str	r3, [r2, #112]	; 0x70
 8006818:	e02d      	b.n	8006876 <HAL_RCC_OscConfig+0x5a6>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	689b      	ldr	r3, [r3, #8]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d10c      	bne.n	800683c <HAL_RCC_OscConfig+0x56c>
 8006822:	4b8d      	ldr	r3, [pc, #564]	; (8006a58 <HAL_RCC_OscConfig+0x788>)
 8006824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006826:	4a8c      	ldr	r2, [pc, #560]	; (8006a58 <HAL_RCC_OscConfig+0x788>)
 8006828:	f023 0301 	bic.w	r3, r3, #1
 800682c:	6713      	str	r3, [r2, #112]	; 0x70
 800682e:	4b8a      	ldr	r3, [pc, #552]	; (8006a58 <HAL_RCC_OscConfig+0x788>)
 8006830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006832:	4a89      	ldr	r2, [pc, #548]	; (8006a58 <HAL_RCC_OscConfig+0x788>)
 8006834:	f023 0304 	bic.w	r3, r3, #4
 8006838:	6713      	str	r3, [r2, #112]	; 0x70
 800683a:	e01c      	b.n	8006876 <HAL_RCC_OscConfig+0x5a6>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	689b      	ldr	r3, [r3, #8]
 8006840:	2b05      	cmp	r3, #5
 8006842:	d10c      	bne.n	800685e <HAL_RCC_OscConfig+0x58e>
 8006844:	4b84      	ldr	r3, [pc, #528]	; (8006a58 <HAL_RCC_OscConfig+0x788>)
 8006846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006848:	4a83      	ldr	r2, [pc, #524]	; (8006a58 <HAL_RCC_OscConfig+0x788>)
 800684a:	f043 0304 	orr.w	r3, r3, #4
 800684e:	6713      	str	r3, [r2, #112]	; 0x70
 8006850:	4b81      	ldr	r3, [pc, #516]	; (8006a58 <HAL_RCC_OscConfig+0x788>)
 8006852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006854:	4a80      	ldr	r2, [pc, #512]	; (8006a58 <HAL_RCC_OscConfig+0x788>)
 8006856:	f043 0301 	orr.w	r3, r3, #1
 800685a:	6713      	str	r3, [r2, #112]	; 0x70
 800685c:	e00b      	b.n	8006876 <HAL_RCC_OscConfig+0x5a6>
 800685e:	4b7e      	ldr	r3, [pc, #504]	; (8006a58 <HAL_RCC_OscConfig+0x788>)
 8006860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006862:	4a7d      	ldr	r2, [pc, #500]	; (8006a58 <HAL_RCC_OscConfig+0x788>)
 8006864:	f023 0301 	bic.w	r3, r3, #1
 8006868:	6713      	str	r3, [r2, #112]	; 0x70
 800686a:	4b7b      	ldr	r3, [pc, #492]	; (8006a58 <HAL_RCC_OscConfig+0x788>)
 800686c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800686e:	4a7a      	ldr	r2, [pc, #488]	; (8006a58 <HAL_RCC_OscConfig+0x788>)
 8006870:	f023 0304 	bic.w	r3, r3, #4
 8006874:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	689b      	ldr	r3, [r3, #8]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d015      	beq.n	80068aa <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800687e:	f7fb fb85 	bl	8001f8c <HAL_GetTick>
 8006882:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006884:	e00a      	b.n	800689c <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006886:	f7fb fb81 	bl	8001f8c <HAL_GetTick>
 800688a:	4602      	mov	r2, r0
 800688c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800688e:	1ad3      	subs	r3, r2, r3
 8006890:	f241 3288 	movw	r2, #5000	; 0x1388
 8006894:	4293      	cmp	r3, r2
 8006896:	d901      	bls.n	800689c <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8006898:	2303      	movs	r3, #3
 800689a:	e122      	b.n	8006ae2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800689c:	4b6e      	ldr	r3, [pc, #440]	; (8006a58 <HAL_RCC_OscConfig+0x788>)
 800689e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068a0:	f003 0302 	and.w	r3, r3, #2
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d0ee      	beq.n	8006886 <HAL_RCC_OscConfig+0x5b6>
 80068a8:	e014      	b.n	80068d4 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068aa:	f7fb fb6f 	bl	8001f8c <HAL_GetTick>
 80068ae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80068b0:	e00a      	b.n	80068c8 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80068b2:	f7fb fb6b 	bl	8001f8c <HAL_GetTick>
 80068b6:	4602      	mov	r2, r0
 80068b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ba:	1ad3      	subs	r3, r2, r3
 80068bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d901      	bls.n	80068c8 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 80068c4:	2303      	movs	r3, #3
 80068c6:	e10c      	b.n	8006ae2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80068c8:	4b63      	ldr	r3, [pc, #396]	; (8006a58 <HAL_RCC_OscConfig+0x788>)
 80068ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068cc:	f003 0302 	and.w	r3, r3, #2
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d1ee      	bne.n	80068b2 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068d8:	2b00      	cmp	r3, #0
 80068da:	f000 8101 	beq.w	8006ae0 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80068de:	4b5e      	ldr	r3, [pc, #376]	; (8006a58 <HAL_RCC_OscConfig+0x788>)
 80068e0:	691b      	ldr	r3, [r3, #16]
 80068e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80068e6:	2b18      	cmp	r3, #24
 80068e8:	f000 80bc 	beq.w	8006a64 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f0:	2b02      	cmp	r3, #2
 80068f2:	f040 8095 	bne.w	8006a20 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068f6:	4b58      	ldr	r3, [pc, #352]	; (8006a58 <HAL_RCC_OscConfig+0x788>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a57      	ldr	r2, [pc, #348]	; (8006a58 <HAL_RCC_OscConfig+0x788>)
 80068fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006900:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006902:	f7fb fb43 	bl	8001f8c <HAL_GetTick>
 8006906:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006908:	e008      	b.n	800691c <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800690a:	f7fb fb3f 	bl	8001f8c <HAL_GetTick>
 800690e:	4602      	mov	r2, r0
 8006910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006912:	1ad3      	subs	r3, r2, r3
 8006914:	2b02      	cmp	r3, #2
 8006916:	d901      	bls.n	800691c <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8006918:	2303      	movs	r3, #3
 800691a:	e0e2      	b.n	8006ae2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800691c:	4b4e      	ldr	r3, [pc, #312]	; (8006a58 <HAL_RCC_OscConfig+0x788>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006924:	2b00      	cmp	r3, #0
 8006926:	d1f0      	bne.n	800690a <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006928:	4b4b      	ldr	r3, [pc, #300]	; (8006a58 <HAL_RCC_OscConfig+0x788>)
 800692a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800692c:	4b4b      	ldr	r3, [pc, #300]	; (8006a5c <HAL_RCC_OscConfig+0x78c>)
 800692e:	4013      	ands	r3, r2
 8006930:	687a      	ldr	r2, [r7, #4]
 8006932:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006934:	687a      	ldr	r2, [r7, #4]
 8006936:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006938:	0112      	lsls	r2, r2, #4
 800693a:	430a      	orrs	r2, r1
 800693c:	4946      	ldr	r1, [pc, #280]	; (8006a58 <HAL_RCC_OscConfig+0x788>)
 800693e:	4313      	orrs	r3, r2
 8006940:	628b      	str	r3, [r1, #40]	; 0x28
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006946:	3b01      	subs	r3, #1
 8006948:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006950:	3b01      	subs	r3, #1
 8006952:	025b      	lsls	r3, r3, #9
 8006954:	b29b      	uxth	r3, r3
 8006956:	431a      	orrs	r2, r3
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800695c:	3b01      	subs	r3, #1
 800695e:	041b      	lsls	r3, r3, #16
 8006960:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006964:	431a      	orrs	r2, r3
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800696a:	3b01      	subs	r3, #1
 800696c:	061b      	lsls	r3, r3, #24
 800696e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006972:	4939      	ldr	r1, [pc, #228]	; (8006a58 <HAL_RCC_OscConfig+0x788>)
 8006974:	4313      	orrs	r3, r2
 8006976:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006978:	4b37      	ldr	r3, [pc, #220]	; (8006a58 <HAL_RCC_OscConfig+0x788>)
 800697a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800697c:	4a36      	ldr	r2, [pc, #216]	; (8006a58 <HAL_RCC_OscConfig+0x788>)
 800697e:	f023 0301 	bic.w	r3, r3, #1
 8006982:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006984:	4b34      	ldr	r3, [pc, #208]	; (8006a58 <HAL_RCC_OscConfig+0x788>)
 8006986:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006988:	4b35      	ldr	r3, [pc, #212]	; (8006a60 <HAL_RCC_OscConfig+0x790>)
 800698a:	4013      	ands	r3, r2
 800698c:	687a      	ldr	r2, [r7, #4]
 800698e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006990:	00d2      	lsls	r2, r2, #3
 8006992:	4931      	ldr	r1, [pc, #196]	; (8006a58 <HAL_RCC_OscConfig+0x788>)
 8006994:	4313      	orrs	r3, r2
 8006996:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006998:	4b2f      	ldr	r3, [pc, #188]	; (8006a58 <HAL_RCC_OscConfig+0x788>)
 800699a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800699c:	f023 020c 	bic.w	r2, r3, #12
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069a4:	492c      	ldr	r1, [pc, #176]	; (8006a58 <HAL_RCC_OscConfig+0x788>)
 80069a6:	4313      	orrs	r3, r2
 80069a8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80069aa:	4b2b      	ldr	r3, [pc, #172]	; (8006a58 <HAL_RCC_OscConfig+0x788>)
 80069ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069ae:	f023 0202 	bic.w	r2, r3, #2
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069b6:	4928      	ldr	r1, [pc, #160]	; (8006a58 <HAL_RCC_OscConfig+0x788>)
 80069b8:	4313      	orrs	r3, r2
 80069ba:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80069bc:	4b26      	ldr	r3, [pc, #152]	; (8006a58 <HAL_RCC_OscConfig+0x788>)
 80069be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069c0:	4a25      	ldr	r2, [pc, #148]	; (8006a58 <HAL_RCC_OscConfig+0x788>)
 80069c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069c8:	4b23      	ldr	r3, [pc, #140]	; (8006a58 <HAL_RCC_OscConfig+0x788>)
 80069ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069cc:	4a22      	ldr	r2, [pc, #136]	; (8006a58 <HAL_RCC_OscConfig+0x788>)
 80069ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80069d4:	4b20      	ldr	r3, [pc, #128]	; (8006a58 <HAL_RCC_OscConfig+0x788>)
 80069d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069d8:	4a1f      	ldr	r2, [pc, #124]	; (8006a58 <HAL_RCC_OscConfig+0x788>)
 80069da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80069de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80069e0:	4b1d      	ldr	r3, [pc, #116]	; (8006a58 <HAL_RCC_OscConfig+0x788>)
 80069e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069e4:	4a1c      	ldr	r2, [pc, #112]	; (8006a58 <HAL_RCC_OscConfig+0x788>)
 80069e6:	f043 0301 	orr.w	r3, r3, #1
 80069ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80069ec:	4b1a      	ldr	r3, [pc, #104]	; (8006a58 <HAL_RCC_OscConfig+0x788>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a19      	ldr	r2, [pc, #100]	; (8006a58 <HAL_RCC_OscConfig+0x788>)
 80069f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80069f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069f8:	f7fb fac8 	bl	8001f8c <HAL_GetTick>
 80069fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80069fe:	e008      	b.n	8006a12 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a00:	f7fb fac4 	bl	8001f8c <HAL_GetTick>
 8006a04:	4602      	mov	r2, r0
 8006a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a08:	1ad3      	subs	r3, r2, r3
 8006a0a:	2b02      	cmp	r3, #2
 8006a0c:	d901      	bls.n	8006a12 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8006a0e:	2303      	movs	r3, #3
 8006a10:	e067      	b.n	8006ae2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006a12:	4b11      	ldr	r3, [pc, #68]	; (8006a58 <HAL_RCC_OscConfig+0x788>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d0f0      	beq.n	8006a00 <HAL_RCC_OscConfig+0x730>
 8006a1e:	e05f      	b.n	8006ae0 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a20:	4b0d      	ldr	r3, [pc, #52]	; (8006a58 <HAL_RCC_OscConfig+0x788>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a0c      	ldr	r2, [pc, #48]	; (8006a58 <HAL_RCC_OscConfig+0x788>)
 8006a26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a2c:	f7fb faae 	bl	8001f8c <HAL_GetTick>
 8006a30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006a32:	e008      	b.n	8006a46 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a34:	f7fb faaa 	bl	8001f8c <HAL_GetTick>
 8006a38:	4602      	mov	r2, r0
 8006a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a3c:	1ad3      	subs	r3, r2, r3
 8006a3e:	2b02      	cmp	r3, #2
 8006a40:	d901      	bls.n	8006a46 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8006a42:	2303      	movs	r3, #3
 8006a44:	e04d      	b.n	8006ae2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006a46:	4b04      	ldr	r3, [pc, #16]	; (8006a58 <HAL_RCC_OscConfig+0x788>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d1f0      	bne.n	8006a34 <HAL_RCC_OscConfig+0x764>
 8006a52:	e045      	b.n	8006ae0 <HAL_RCC_OscConfig+0x810>
 8006a54:	58024800 	.word	0x58024800
 8006a58:	58024400 	.word	0x58024400
 8006a5c:	fffffc0c 	.word	0xfffffc0c
 8006a60:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006a64:	4b21      	ldr	r3, [pc, #132]	; (8006aec <HAL_RCC_OscConfig+0x81c>)
 8006a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a68:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006a6a:	4b20      	ldr	r3, [pc, #128]	; (8006aec <HAL_RCC_OscConfig+0x81c>)
 8006a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a6e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	d031      	beq.n	8006adc <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	f003 0203 	and.w	r2, r3, #3
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a82:	429a      	cmp	r2, r3
 8006a84:	d12a      	bne.n	8006adc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	091b      	lsrs	r3, r3, #4
 8006a8a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d122      	bne.n	8006adc <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aa0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006aa2:	429a      	cmp	r2, r3
 8006aa4:	d11a      	bne.n	8006adc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	0a5b      	lsrs	r3, r3, #9
 8006aaa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ab2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	d111      	bne.n	8006adc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	0c1b      	lsrs	r3, r3, #16
 8006abc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ac4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006ac6:	429a      	cmp	r2, r3
 8006ac8:	d108      	bne.n	8006adc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	0e1b      	lsrs	r3, r3, #24
 8006ace:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ad6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006ad8:	429a      	cmp	r2, r3
 8006ada:	d001      	beq.n	8006ae0 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8006adc:	2301      	movs	r3, #1
 8006ade:	e000      	b.n	8006ae2 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8006ae0:	2300      	movs	r3, #0
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3730      	adds	r7, #48	; 0x30
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}
 8006aea:	bf00      	nop
 8006aec:	58024400 	.word	0x58024400

08006af0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b086      	sub	sp, #24
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
 8006af8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d101      	bne.n	8006b04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006b00:	2301      	movs	r3, #1
 8006b02:	e19c      	b.n	8006e3e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006b04:	4b8a      	ldr	r3, [pc, #552]	; (8006d30 <HAL_RCC_ClockConfig+0x240>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f003 030f 	and.w	r3, r3, #15
 8006b0c:	683a      	ldr	r2, [r7, #0]
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	d910      	bls.n	8006b34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b12:	4b87      	ldr	r3, [pc, #540]	; (8006d30 <HAL_RCC_ClockConfig+0x240>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f023 020f 	bic.w	r2, r3, #15
 8006b1a:	4985      	ldr	r1, [pc, #532]	; (8006d30 <HAL_RCC_ClockConfig+0x240>)
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b22:	4b83      	ldr	r3, [pc, #524]	; (8006d30 <HAL_RCC_ClockConfig+0x240>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f003 030f 	and.w	r3, r3, #15
 8006b2a:	683a      	ldr	r2, [r7, #0]
 8006b2c:	429a      	cmp	r2, r3
 8006b2e:	d001      	beq.n	8006b34 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006b30:	2301      	movs	r3, #1
 8006b32:	e184      	b.n	8006e3e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f003 0304 	and.w	r3, r3, #4
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d010      	beq.n	8006b62 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	691a      	ldr	r2, [r3, #16]
 8006b44:	4b7b      	ldr	r3, [pc, #492]	; (8006d34 <HAL_RCC_ClockConfig+0x244>)
 8006b46:	699b      	ldr	r3, [r3, #24]
 8006b48:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	d908      	bls.n	8006b62 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006b50:	4b78      	ldr	r3, [pc, #480]	; (8006d34 <HAL_RCC_ClockConfig+0x244>)
 8006b52:	699b      	ldr	r3, [r3, #24]
 8006b54:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	691b      	ldr	r3, [r3, #16]
 8006b5c:	4975      	ldr	r1, [pc, #468]	; (8006d34 <HAL_RCC_ClockConfig+0x244>)
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f003 0308 	and.w	r3, r3, #8
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d010      	beq.n	8006b90 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	695a      	ldr	r2, [r3, #20]
 8006b72:	4b70      	ldr	r3, [pc, #448]	; (8006d34 <HAL_RCC_ClockConfig+0x244>)
 8006b74:	69db      	ldr	r3, [r3, #28]
 8006b76:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	d908      	bls.n	8006b90 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006b7e:	4b6d      	ldr	r3, [pc, #436]	; (8006d34 <HAL_RCC_ClockConfig+0x244>)
 8006b80:	69db      	ldr	r3, [r3, #28]
 8006b82:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	695b      	ldr	r3, [r3, #20]
 8006b8a:	496a      	ldr	r1, [pc, #424]	; (8006d34 <HAL_RCC_ClockConfig+0x244>)
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f003 0310 	and.w	r3, r3, #16
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d010      	beq.n	8006bbe <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	699a      	ldr	r2, [r3, #24]
 8006ba0:	4b64      	ldr	r3, [pc, #400]	; (8006d34 <HAL_RCC_ClockConfig+0x244>)
 8006ba2:	69db      	ldr	r3, [r3, #28]
 8006ba4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006ba8:	429a      	cmp	r2, r3
 8006baa:	d908      	bls.n	8006bbe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006bac:	4b61      	ldr	r3, [pc, #388]	; (8006d34 <HAL_RCC_ClockConfig+0x244>)
 8006bae:	69db      	ldr	r3, [r3, #28]
 8006bb0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	699b      	ldr	r3, [r3, #24]
 8006bb8:	495e      	ldr	r1, [pc, #376]	; (8006d34 <HAL_RCC_ClockConfig+0x244>)
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f003 0320 	and.w	r3, r3, #32
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d010      	beq.n	8006bec <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	69da      	ldr	r2, [r3, #28]
 8006bce:	4b59      	ldr	r3, [pc, #356]	; (8006d34 <HAL_RCC_ClockConfig+0x244>)
 8006bd0:	6a1b      	ldr	r3, [r3, #32]
 8006bd2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006bd6:	429a      	cmp	r2, r3
 8006bd8:	d908      	bls.n	8006bec <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006bda:	4b56      	ldr	r3, [pc, #344]	; (8006d34 <HAL_RCC_ClockConfig+0x244>)
 8006bdc:	6a1b      	ldr	r3, [r3, #32]
 8006bde:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	69db      	ldr	r3, [r3, #28]
 8006be6:	4953      	ldr	r1, [pc, #332]	; (8006d34 <HAL_RCC_ClockConfig+0x244>)
 8006be8:	4313      	orrs	r3, r2
 8006bea:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f003 0302 	and.w	r3, r3, #2
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d010      	beq.n	8006c1a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	68da      	ldr	r2, [r3, #12]
 8006bfc:	4b4d      	ldr	r3, [pc, #308]	; (8006d34 <HAL_RCC_ClockConfig+0x244>)
 8006bfe:	699b      	ldr	r3, [r3, #24]
 8006c00:	f003 030f 	and.w	r3, r3, #15
 8006c04:	429a      	cmp	r2, r3
 8006c06:	d908      	bls.n	8006c1a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c08:	4b4a      	ldr	r3, [pc, #296]	; (8006d34 <HAL_RCC_ClockConfig+0x244>)
 8006c0a:	699b      	ldr	r3, [r3, #24]
 8006c0c:	f023 020f 	bic.w	r2, r3, #15
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	68db      	ldr	r3, [r3, #12]
 8006c14:	4947      	ldr	r1, [pc, #284]	; (8006d34 <HAL_RCC_ClockConfig+0x244>)
 8006c16:	4313      	orrs	r3, r2
 8006c18:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f003 0301 	and.w	r3, r3, #1
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d055      	beq.n	8006cd2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006c26:	4b43      	ldr	r3, [pc, #268]	; (8006d34 <HAL_RCC_ClockConfig+0x244>)
 8006c28:	699b      	ldr	r3, [r3, #24]
 8006c2a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	689b      	ldr	r3, [r3, #8]
 8006c32:	4940      	ldr	r1, [pc, #256]	; (8006d34 <HAL_RCC_ClockConfig+0x244>)
 8006c34:	4313      	orrs	r3, r2
 8006c36:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	685b      	ldr	r3, [r3, #4]
 8006c3c:	2b02      	cmp	r3, #2
 8006c3e:	d107      	bne.n	8006c50 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006c40:	4b3c      	ldr	r3, [pc, #240]	; (8006d34 <HAL_RCC_ClockConfig+0x244>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d121      	bne.n	8006c90 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	e0f6      	b.n	8006e3e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	685b      	ldr	r3, [r3, #4]
 8006c54:	2b03      	cmp	r3, #3
 8006c56:	d107      	bne.n	8006c68 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006c58:	4b36      	ldr	r3, [pc, #216]	; (8006d34 <HAL_RCC_ClockConfig+0x244>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d115      	bne.n	8006c90 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006c64:	2301      	movs	r3, #1
 8006c66:	e0ea      	b.n	8006e3e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	2b01      	cmp	r3, #1
 8006c6e:	d107      	bne.n	8006c80 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006c70:	4b30      	ldr	r3, [pc, #192]	; (8006d34 <HAL_RCC_ClockConfig+0x244>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d109      	bne.n	8006c90 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	e0de      	b.n	8006e3e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006c80:	4b2c      	ldr	r3, [pc, #176]	; (8006d34 <HAL_RCC_ClockConfig+0x244>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f003 0304 	and.w	r3, r3, #4
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d101      	bne.n	8006c90 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	e0d6      	b.n	8006e3e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006c90:	4b28      	ldr	r3, [pc, #160]	; (8006d34 <HAL_RCC_ClockConfig+0x244>)
 8006c92:	691b      	ldr	r3, [r3, #16]
 8006c94:	f023 0207 	bic.w	r2, r3, #7
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	4925      	ldr	r1, [pc, #148]	; (8006d34 <HAL_RCC_ClockConfig+0x244>)
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ca2:	f7fb f973 	bl	8001f8c <HAL_GetTick>
 8006ca6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ca8:	e00a      	b.n	8006cc0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006caa:	f7fb f96f 	bl	8001f8c <HAL_GetTick>
 8006cae:	4602      	mov	r2, r0
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	1ad3      	subs	r3, r2, r3
 8006cb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d901      	bls.n	8006cc0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006cbc:	2303      	movs	r3, #3
 8006cbe:	e0be      	b.n	8006e3e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006cc0:	4b1c      	ldr	r3, [pc, #112]	; (8006d34 <HAL_RCC_ClockConfig+0x244>)
 8006cc2:	691b      	ldr	r3, [r3, #16]
 8006cc4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	00db      	lsls	r3, r3, #3
 8006cce:	429a      	cmp	r2, r3
 8006cd0:	d1eb      	bne.n	8006caa <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f003 0302 	and.w	r3, r3, #2
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d010      	beq.n	8006d00 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	68da      	ldr	r2, [r3, #12]
 8006ce2:	4b14      	ldr	r3, [pc, #80]	; (8006d34 <HAL_RCC_ClockConfig+0x244>)
 8006ce4:	699b      	ldr	r3, [r3, #24]
 8006ce6:	f003 030f 	and.w	r3, r3, #15
 8006cea:	429a      	cmp	r2, r3
 8006cec:	d208      	bcs.n	8006d00 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006cee:	4b11      	ldr	r3, [pc, #68]	; (8006d34 <HAL_RCC_ClockConfig+0x244>)
 8006cf0:	699b      	ldr	r3, [r3, #24]
 8006cf2:	f023 020f 	bic.w	r2, r3, #15
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	68db      	ldr	r3, [r3, #12]
 8006cfa:	490e      	ldr	r1, [pc, #56]	; (8006d34 <HAL_RCC_ClockConfig+0x244>)
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006d00:	4b0b      	ldr	r3, [pc, #44]	; (8006d30 <HAL_RCC_ClockConfig+0x240>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f003 030f 	and.w	r3, r3, #15
 8006d08:	683a      	ldr	r2, [r7, #0]
 8006d0a:	429a      	cmp	r2, r3
 8006d0c:	d214      	bcs.n	8006d38 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d0e:	4b08      	ldr	r3, [pc, #32]	; (8006d30 <HAL_RCC_ClockConfig+0x240>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f023 020f 	bic.w	r2, r3, #15
 8006d16:	4906      	ldr	r1, [pc, #24]	; (8006d30 <HAL_RCC_ClockConfig+0x240>)
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d1e:	4b04      	ldr	r3, [pc, #16]	; (8006d30 <HAL_RCC_ClockConfig+0x240>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f003 030f 	and.w	r3, r3, #15
 8006d26:	683a      	ldr	r2, [r7, #0]
 8006d28:	429a      	cmp	r2, r3
 8006d2a:	d005      	beq.n	8006d38 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	e086      	b.n	8006e3e <HAL_RCC_ClockConfig+0x34e>
 8006d30:	52002000 	.word	0x52002000
 8006d34:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f003 0304 	and.w	r3, r3, #4
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d010      	beq.n	8006d66 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	691a      	ldr	r2, [r3, #16]
 8006d48:	4b3f      	ldr	r3, [pc, #252]	; (8006e48 <HAL_RCC_ClockConfig+0x358>)
 8006d4a:	699b      	ldr	r3, [r3, #24]
 8006d4c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006d50:	429a      	cmp	r2, r3
 8006d52:	d208      	bcs.n	8006d66 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006d54:	4b3c      	ldr	r3, [pc, #240]	; (8006e48 <HAL_RCC_ClockConfig+0x358>)
 8006d56:	699b      	ldr	r3, [r3, #24]
 8006d58:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	691b      	ldr	r3, [r3, #16]
 8006d60:	4939      	ldr	r1, [pc, #228]	; (8006e48 <HAL_RCC_ClockConfig+0x358>)
 8006d62:	4313      	orrs	r3, r2
 8006d64:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f003 0308 	and.w	r3, r3, #8
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d010      	beq.n	8006d94 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	695a      	ldr	r2, [r3, #20]
 8006d76:	4b34      	ldr	r3, [pc, #208]	; (8006e48 <HAL_RCC_ClockConfig+0x358>)
 8006d78:	69db      	ldr	r3, [r3, #28]
 8006d7a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006d7e:	429a      	cmp	r2, r3
 8006d80:	d208      	bcs.n	8006d94 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006d82:	4b31      	ldr	r3, [pc, #196]	; (8006e48 <HAL_RCC_ClockConfig+0x358>)
 8006d84:	69db      	ldr	r3, [r3, #28]
 8006d86:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	695b      	ldr	r3, [r3, #20]
 8006d8e:	492e      	ldr	r1, [pc, #184]	; (8006e48 <HAL_RCC_ClockConfig+0x358>)
 8006d90:	4313      	orrs	r3, r2
 8006d92:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f003 0310 	and.w	r3, r3, #16
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d010      	beq.n	8006dc2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	699a      	ldr	r2, [r3, #24]
 8006da4:	4b28      	ldr	r3, [pc, #160]	; (8006e48 <HAL_RCC_ClockConfig+0x358>)
 8006da6:	69db      	ldr	r3, [r3, #28]
 8006da8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006dac:	429a      	cmp	r2, r3
 8006dae:	d208      	bcs.n	8006dc2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006db0:	4b25      	ldr	r3, [pc, #148]	; (8006e48 <HAL_RCC_ClockConfig+0x358>)
 8006db2:	69db      	ldr	r3, [r3, #28]
 8006db4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	699b      	ldr	r3, [r3, #24]
 8006dbc:	4922      	ldr	r1, [pc, #136]	; (8006e48 <HAL_RCC_ClockConfig+0x358>)
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f003 0320 	and.w	r3, r3, #32
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d010      	beq.n	8006df0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	69da      	ldr	r2, [r3, #28]
 8006dd2:	4b1d      	ldr	r3, [pc, #116]	; (8006e48 <HAL_RCC_ClockConfig+0x358>)
 8006dd4:	6a1b      	ldr	r3, [r3, #32]
 8006dd6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006dda:	429a      	cmp	r2, r3
 8006ddc:	d208      	bcs.n	8006df0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006dde:	4b1a      	ldr	r3, [pc, #104]	; (8006e48 <HAL_RCC_ClockConfig+0x358>)
 8006de0:	6a1b      	ldr	r3, [r3, #32]
 8006de2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	69db      	ldr	r3, [r3, #28]
 8006dea:	4917      	ldr	r1, [pc, #92]	; (8006e48 <HAL_RCC_ClockConfig+0x358>)
 8006dec:	4313      	orrs	r3, r2
 8006dee:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006df0:	f000 f834 	bl	8006e5c <HAL_RCC_GetSysClockFreq>
 8006df4:	4601      	mov	r1, r0
 8006df6:	4b14      	ldr	r3, [pc, #80]	; (8006e48 <HAL_RCC_ClockConfig+0x358>)
 8006df8:	699b      	ldr	r3, [r3, #24]
 8006dfa:	0a1b      	lsrs	r3, r3, #8
 8006dfc:	f003 030f 	and.w	r3, r3, #15
 8006e00:	4a12      	ldr	r2, [pc, #72]	; (8006e4c <HAL_RCC_ClockConfig+0x35c>)
 8006e02:	5cd3      	ldrb	r3, [r2, r3]
 8006e04:	f003 031f 	and.w	r3, r3, #31
 8006e08:	fa21 f303 	lsr.w	r3, r1, r3
 8006e0c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006e0e:	4b0e      	ldr	r3, [pc, #56]	; (8006e48 <HAL_RCC_ClockConfig+0x358>)
 8006e10:	699b      	ldr	r3, [r3, #24]
 8006e12:	f003 030f 	and.w	r3, r3, #15
 8006e16:	4a0d      	ldr	r2, [pc, #52]	; (8006e4c <HAL_RCC_ClockConfig+0x35c>)
 8006e18:	5cd3      	ldrb	r3, [r2, r3]
 8006e1a:	f003 031f 	and.w	r3, r3, #31
 8006e1e:	693a      	ldr	r2, [r7, #16]
 8006e20:	fa22 f303 	lsr.w	r3, r2, r3
 8006e24:	4a0a      	ldr	r2, [pc, #40]	; (8006e50 <HAL_RCC_ClockConfig+0x360>)
 8006e26:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006e28:	4a0a      	ldr	r2, [pc, #40]	; (8006e54 <HAL_RCC_ClockConfig+0x364>)
 8006e2a:	693b      	ldr	r3, [r7, #16]
 8006e2c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8006e2e:	4b0a      	ldr	r3, [pc, #40]	; (8006e58 <HAL_RCC_ClockConfig+0x368>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4618      	mov	r0, r3
 8006e34:	f7fa f99e 	bl	8001174 <HAL_InitTick>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006e3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	3718      	adds	r7, #24
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}
 8006e46:	bf00      	nop
 8006e48:	58024400 	.word	0x58024400
 8006e4c:	08026eb0 	.word	0x08026eb0
 8006e50:	24000004 	.word	0x24000004
 8006e54:	24000000 	.word	0x24000000
 8006e58:	24000008 	.word	0x24000008

08006e5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b089      	sub	sp, #36	; 0x24
 8006e60:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006e62:	4baf      	ldr	r3, [pc, #700]	; (8007120 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006e64:	691b      	ldr	r3, [r3, #16]
 8006e66:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006e6a:	2b18      	cmp	r3, #24
 8006e6c:	f200 814e 	bhi.w	800710c <HAL_RCC_GetSysClockFreq+0x2b0>
 8006e70:	a201      	add	r2, pc, #4	; (adr r2, 8006e78 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e76:	bf00      	nop
 8006e78:	08006edd 	.word	0x08006edd
 8006e7c:	0800710d 	.word	0x0800710d
 8006e80:	0800710d 	.word	0x0800710d
 8006e84:	0800710d 	.word	0x0800710d
 8006e88:	0800710d 	.word	0x0800710d
 8006e8c:	0800710d 	.word	0x0800710d
 8006e90:	0800710d 	.word	0x0800710d
 8006e94:	0800710d 	.word	0x0800710d
 8006e98:	08006f03 	.word	0x08006f03
 8006e9c:	0800710d 	.word	0x0800710d
 8006ea0:	0800710d 	.word	0x0800710d
 8006ea4:	0800710d 	.word	0x0800710d
 8006ea8:	0800710d 	.word	0x0800710d
 8006eac:	0800710d 	.word	0x0800710d
 8006eb0:	0800710d 	.word	0x0800710d
 8006eb4:	0800710d 	.word	0x0800710d
 8006eb8:	08006f09 	.word	0x08006f09
 8006ebc:	0800710d 	.word	0x0800710d
 8006ec0:	0800710d 	.word	0x0800710d
 8006ec4:	0800710d 	.word	0x0800710d
 8006ec8:	0800710d 	.word	0x0800710d
 8006ecc:	0800710d 	.word	0x0800710d
 8006ed0:	0800710d 	.word	0x0800710d
 8006ed4:	0800710d 	.word	0x0800710d
 8006ed8:	08006f0f 	.word	0x08006f0f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006edc:	4b90      	ldr	r3, [pc, #576]	; (8007120 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f003 0320 	and.w	r3, r3, #32
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d009      	beq.n	8006efc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006ee8:	4b8d      	ldr	r3, [pc, #564]	; (8007120 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	08db      	lsrs	r3, r3, #3
 8006eee:	f003 0303 	and.w	r3, r3, #3
 8006ef2:	4a8c      	ldr	r2, [pc, #560]	; (8007124 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006ef4:	fa22 f303 	lsr.w	r3, r2, r3
 8006ef8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8006efa:	e10a      	b.n	8007112 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006efc:	4b89      	ldr	r3, [pc, #548]	; (8007124 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006efe:	61bb      	str	r3, [r7, #24]
    break;
 8006f00:	e107      	b.n	8007112 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006f02:	4b89      	ldr	r3, [pc, #548]	; (8007128 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8006f04:	61bb      	str	r3, [r7, #24]
    break;
 8006f06:	e104      	b.n	8007112 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006f08:	4b88      	ldr	r3, [pc, #544]	; (800712c <HAL_RCC_GetSysClockFreq+0x2d0>)
 8006f0a:	61bb      	str	r3, [r7, #24]
    break;
 8006f0c:	e101      	b.n	8007112 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006f0e:	4b84      	ldr	r3, [pc, #528]	; (8007120 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f12:	f003 0303 	and.w	r3, r3, #3
 8006f16:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006f18:	4b81      	ldr	r3, [pc, #516]	; (8007120 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f1c:	091b      	lsrs	r3, r3, #4
 8006f1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f22:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006f24:	4b7e      	ldr	r3, [pc, #504]	; (8007120 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f28:	f003 0301 	and.w	r3, r3, #1
 8006f2c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006f2e:	4b7c      	ldr	r3, [pc, #496]	; (8007120 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006f30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f32:	08db      	lsrs	r3, r3, #3
 8006f34:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006f38:	68fa      	ldr	r2, [r7, #12]
 8006f3a:	fb02 f303 	mul.w	r3, r2, r3
 8006f3e:	ee07 3a90 	vmov	s15, r3
 8006f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f46:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006f4a:	693b      	ldr	r3, [r7, #16]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	f000 80da 	beq.w	8007106 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	2b01      	cmp	r3, #1
 8006f56:	d05a      	beq.n	800700e <HAL_RCC_GetSysClockFreq+0x1b2>
 8006f58:	2b01      	cmp	r3, #1
 8006f5a:	d302      	bcc.n	8006f62 <HAL_RCC_GetSysClockFreq+0x106>
 8006f5c:	2b02      	cmp	r3, #2
 8006f5e:	d078      	beq.n	8007052 <HAL_RCC_GetSysClockFreq+0x1f6>
 8006f60:	e099      	b.n	8007096 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006f62:	4b6f      	ldr	r3, [pc, #444]	; (8007120 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f003 0320 	and.w	r3, r3, #32
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d02d      	beq.n	8006fca <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006f6e:	4b6c      	ldr	r3, [pc, #432]	; (8007120 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	08db      	lsrs	r3, r3, #3
 8006f74:	f003 0303 	and.w	r3, r3, #3
 8006f78:	4a6a      	ldr	r2, [pc, #424]	; (8007124 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006f7a:	fa22 f303 	lsr.w	r3, r2, r3
 8006f7e:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	ee07 3a90 	vmov	s15, r3
 8006f86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	ee07 3a90 	vmov	s15, r3
 8006f90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f98:	4b61      	ldr	r3, [pc, #388]	; (8007120 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fa0:	ee07 3a90 	vmov	s15, r3
 8006fa4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fa8:	ed97 6a02 	vldr	s12, [r7, #8]
 8006fac:	eddf 5a60 	vldr	s11, [pc, #384]	; 8007130 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006fb0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fb4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fb8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006fbc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fc4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006fc8:	e087      	b.n	80070da <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	ee07 3a90 	vmov	s15, r3
 8006fd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fd4:	eddf 6a57 	vldr	s13, [pc, #348]	; 8007134 <HAL_RCC_GetSysClockFreq+0x2d8>
 8006fd8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fdc:	4b50      	ldr	r3, [pc, #320]	; (8007120 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fe0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fe4:	ee07 3a90 	vmov	s15, r3
 8006fe8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fec:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ff0:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8007130 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006ff4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ff8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ffc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007000:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007004:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007008:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800700c:	e065      	b.n	80070da <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	ee07 3a90 	vmov	s15, r3
 8007014:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007018:	eddf 6a47 	vldr	s13, [pc, #284]	; 8007138 <HAL_RCC_GetSysClockFreq+0x2dc>
 800701c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007020:	4b3f      	ldr	r3, [pc, #252]	; (8007120 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007024:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007028:	ee07 3a90 	vmov	s15, r3
 800702c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007030:	ed97 6a02 	vldr	s12, [r7, #8]
 8007034:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8007130 <HAL_RCC_GetSysClockFreq+0x2d4>
 8007038:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800703c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007040:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007044:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007048:	ee67 7a27 	vmul.f32	s15, s14, s15
 800704c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007050:	e043      	b.n	80070da <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	ee07 3a90 	vmov	s15, r3
 8007058:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800705c:	eddf 6a37 	vldr	s13, [pc, #220]	; 800713c <HAL_RCC_GetSysClockFreq+0x2e0>
 8007060:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007064:	4b2e      	ldr	r3, [pc, #184]	; (8007120 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007068:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800706c:	ee07 3a90 	vmov	s15, r3
 8007070:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007074:	ed97 6a02 	vldr	s12, [r7, #8]
 8007078:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8007130 <HAL_RCC_GetSysClockFreq+0x2d4>
 800707c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007080:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007084:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007088:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800708c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007090:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007094:	e021      	b.n	80070da <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	ee07 3a90 	vmov	s15, r3
 800709c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070a0:	eddf 6a25 	vldr	s13, [pc, #148]	; 8007138 <HAL_RCC_GetSysClockFreq+0x2dc>
 80070a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070a8:	4b1d      	ldr	r3, [pc, #116]	; (8007120 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80070aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070b0:	ee07 3a90 	vmov	s15, r3
 80070b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070b8:	ed97 6a02 	vldr	s12, [r7, #8]
 80070bc:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8007130 <HAL_RCC_GetSysClockFreq+0x2d4>
 80070c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070d4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80070d8:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80070da:	4b11      	ldr	r3, [pc, #68]	; (8007120 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80070dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070de:	0a5b      	lsrs	r3, r3, #9
 80070e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070e4:	3301      	adds	r3, #1
 80070e6:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	ee07 3a90 	vmov	s15, r3
 80070ee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80070f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80070f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80070fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070fe:	ee17 3a90 	vmov	r3, s15
 8007102:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8007104:	e005      	b.n	8007112 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8007106:	2300      	movs	r3, #0
 8007108:	61bb      	str	r3, [r7, #24]
    break;
 800710a:	e002      	b.n	8007112 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 800710c:	4b06      	ldr	r3, [pc, #24]	; (8007128 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800710e:	61bb      	str	r3, [r7, #24]
    break;
 8007110:	bf00      	nop
  }

  return sysclockfreq;
 8007112:	69bb      	ldr	r3, [r7, #24]
}
 8007114:	4618      	mov	r0, r3
 8007116:	3724      	adds	r7, #36	; 0x24
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr
 8007120:	58024400 	.word	0x58024400
 8007124:	03d09000 	.word	0x03d09000
 8007128:	003d0900 	.word	0x003d0900
 800712c:	017d7840 	.word	0x017d7840
 8007130:	46000000 	.word	0x46000000
 8007134:	4c742400 	.word	0x4c742400
 8007138:	4a742400 	.word	0x4a742400
 800713c:	4bbebc20 	.word	0x4bbebc20

08007140 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b082      	sub	sp, #8
 8007144:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007146:	f7ff fe89 	bl	8006e5c <HAL_RCC_GetSysClockFreq>
 800714a:	4601      	mov	r1, r0
 800714c:	4b10      	ldr	r3, [pc, #64]	; (8007190 <HAL_RCC_GetHCLKFreq+0x50>)
 800714e:	699b      	ldr	r3, [r3, #24]
 8007150:	0a1b      	lsrs	r3, r3, #8
 8007152:	f003 030f 	and.w	r3, r3, #15
 8007156:	4a0f      	ldr	r2, [pc, #60]	; (8007194 <HAL_RCC_GetHCLKFreq+0x54>)
 8007158:	5cd3      	ldrb	r3, [r2, r3]
 800715a:	f003 031f 	and.w	r3, r3, #31
 800715e:	fa21 f303 	lsr.w	r3, r1, r3
 8007162:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007164:	4b0a      	ldr	r3, [pc, #40]	; (8007190 <HAL_RCC_GetHCLKFreq+0x50>)
 8007166:	699b      	ldr	r3, [r3, #24]
 8007168:	f003 030f 	and.w	r3, r3, #15
 800716c:	4a09      	ldr	r2, [pc, #36]	; (8007194 <HAL_RCC_GetHCLKFreq+0x54>)
 800716e:	5cd3      	ldrb	r3, [r2, r3]
 8007170:	f003 031f 	and.w	r3, r3, #31
 8007174:	687a      	ldr	r2, [r7, #4]
 8007176:	fa22 f303 	lsr.w	r3, r2, r3
 800717a:	4a07      	ldr	r2, [pc, #28]	; (8007198 <HAL_RCC_GetHCLKFreq+0x58>)
 800717c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800717e:	4a07      	ldr	r2, [pc, #28]	; (800719c <HAL_RCC_GetHCLKFreq+0x5c>)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007184:	4b04      	ldr	r3, [pc, #16]	; (8007198 <HAL_RCC_GetHCLKFreq+0x58>)
 8007186:	681b      	ldr	r3, [r3, #0]
}
 8007188:	4618      	mov	r0, r3
 800718a:	3708      	adds	r7, #8
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}
 8007190:	58024400 	.word	0x58024400
 8007194:	08026eb0 	.word	0x08026eb0
 8007198:	24000004 	.word	0x24000004
 800719c:	24000000 	.word	0x24000000

080071a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80071a4:	f7ff ffcc 	bl	8007140 <HAL_RCC_GetHCLKFreq>
 80071a8:	4601      	mov	r1, r0
 80071aa:	4b06      	ldr	r3, [pc, #24]	; (80071c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80071ac:	69db      	ldr	r3, [r3, #28]
 80071ae:	091b      	lsrs	r3, r3, #4
 80071b0:	f003 0307 	and.w	r3, r3, #7
 80071b4:	4a04      	ldr	r2, [pc, #16]	; (80071c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80071b6:	5cd3      	ldrb	r3, [r2, r3]
 80071b8:	f003 031f 	and.w	r3, r3, #31
 80071bc:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80071c0:	4618      	mov	r0, r3
 80071c2:	bd80      	pop	{r7, pc}
 80071c4:	58024400 	.word	0x58024400
 80071c8:	08026eb0 	.word	0x08026eb0

080071cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80071d0:	f7ff ffb6 	bl	8007140 <HAL_RCC_GetHCLKFreq>
 80071d4:	4601      	mov	r1, r0
 80071d6:	4b06      	ldr	r3, [pc, #24]	; (80071f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80071d8:	69db      	ldr	r3, [r3, #28]
 80071da:	0a1b      	lsrs	r3, r3, #8
 80071dc:	f003 0307 	and.w	r3, r3, #7
 80071e0:	4a04      	ldr	r2, [pc, #16]	; (80071f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80071e2:	5cd3      	ldrb	r3, [r2, r3]
 80071e4:	f003 031f 	and.w	r3, r3, #31
 80071e8:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	bd80      	pop	{r7, pc}
 80071f0:	58024400 	.word	0x58024400
 80071f4:	08026eb0 	.word	0x08026eb0

080071f8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b083      	sub	sp, #12
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
 8007200:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	223f      	movs	r2, #63	; 0x3f
 8007206:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007208:	4b1a      	ldr	r3, [pc, #104]	; (8007274 <HAL_RCC_GetClockConfig+0x7c>)
 800720a:	691b      	ldr	r3, [r3, #16]
 800720c:	f003 0207 	and.w	r2, r3, #7
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8007214:	4b17      	ldr	r3, [pc, #92]	; (8007274 <HAL_RCC_GetClockConfig+0x7c>)
 8007216:	699b      	ldr	r3, [r3, #24]
 8007218:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8007220:	4b14      	ldr	r3, [pc, #80]	; (8007274 <HAL_RCC_GetClockConfig+0x7c>)
 8007222:	699b      	ldr	r3, [r3, #24]
 8007224:	f003 020f 	and.w	r2, r3, #15
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800722c:	4b11      	ldr	r3, [pc, #68]	; (8007274 <HAL_RCC_GetClockConfig+0x7c>)
 800722e:	699b      	ldr	r3, [r3, #24]
 8007230:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8007238:	4b0e      	ldr	r3, [pc, #56]	; (8007274 <HAL_RCC_GetClockConfig+0x7c>)
 800723a:	69db      	ldr	r3, [r3, #28]
 800723c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8007244:	4b0b      	ldr	r3, [pc, #44]	; (8007274 <HAL_RCC_GetClockConfig+0x7c>)
 8007246:	69db      	ldr	r3, [r3, #28]
 8007248:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8007250:	4b08      	ldr	r3, [pc, #32]	; (8007274 <HAL_RCC_GetClockConfig+0x7c>)
 8007252:	6a1b      	ldr	r3, [r3, #32]
 8007254:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800725c:	4b06      	ldr	r3, [pc, #24]	; (8007278 <HAL_RCC_GetClockConfig+0x80>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f003 020f 	and.w	r2, r3, #15
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	601a      	str	r2, [r3, #0]
}
 8007268:	bf00      	nop
 800726a:	370c      	adds	r7, #12
 800726c:	46bd      	mov	sp, r7
 800726e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007272:	4770      	bx	lr
 8007274:	58024400 	.word	0x58024400
 8007278:	52002000 	.word	0x52002000

0800727c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b086      	sub	sp, #24
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007284:	2300      	movs	r3, #0
 8007286:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007288:	2300      	movs	r3, #0
 800728a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007294:	2b00      	cmp	r3, #0
 8007296:	d03d      	beq.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800729c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80072a0:	d013      	beq.n	80072ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80072a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80072a6:	d802      	bhi.n	80072ae <HAL_RCCEx_PeriphCLKConfig+0x32>
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d007      	beq.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0x40>
 80072ac:	e01f      	b.n	80072ee <HAL_RCCEx_PeriphCLKConfig+0x72>
 80072ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80072b2:	d013      	beq.n	80072dc <HAL_RCCEx_PeriphCLKConfig+0x60>
 80072b4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80072b8:	d01c      	beq.n	80072f4 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80072ba:	e018      	b.n	80072ee <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072bc:	4baf      	ldr	r3, [pc, #700]	; (800757c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80072be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072c0:	4aae      	ldr	r2, [pc, #696]	; (800757c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80072c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80072c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80072c8:	e015      	b.n	80072f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	3304      	adds	r3, #4
 80072ce:	2102      	movs	r1, #2
 80072d0:	4618      	mov	r0, r3
 80072d2:	f001 f96f 	bl	80085b4 <RCCEx_PLL2_Config>
 80072d6:	4603      	mov	r3, r0
 80072d8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80072da:	e00c      	b.n	80072f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	3324      	adds	r3, #36	; 0x24
 80072e0:	2102      	movs	r1, #2
 80072e2:	4618      	mov	r0, r3
 80072e4:	f001 fa18 	bl	8008718 <RCCEx_PLL3_Config>
 80072e8:	4603      	mov	r3, r0
 80072ea:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80072ec:	e003      	b.n	80072f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80072ee:	2301      	movs	r3, #1
 80072f0:	75fb      	strb	r3, [r7, #23]
      break;
 80072f2:	e000      	b.n	80072f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80072f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80072f6:	7dfb      	ldrb	r3, [r7, #23]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d109      	bne.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80072fc:	4b9f      	ldr	r3, [pc, #636]	; (800757c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80072fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007300:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007308:	499c      	ldr	r1, [pc, #624]	; (800757c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800730a:	4313      	orrs	r3, r2
 800730c:	650b      	str	r3, [r1, #80]	; 0x50
 800730e:	e001      	b.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007310:	7dfb      	ldrb	r3, [r7, #23]
 8007312:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800731c:	2b00      	cmp	r3, #0
 800731e:	d03d      	beq.n	800739c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007324:	2b04      	cmp	r3, #4
 8007326:	d826      	bhi.n	8007376 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8007328:	a201      	add	r2, pc, #4	; (adr r2, 8007330 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 800732a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800732e:	bf00      	nop
 8007330:	08007345 	.word	0x08007345
 8007334:	08007353 	.word	0x08007353
 8007338:	08007365 	.word	0x08007365
 800733c:	0800737d 	.word	0x0800737d
 8007340:	0800737d 	.word	0x0800737d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007344:	4b8d      	ldr	r3, [pc, #564]	; (800757c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007348:	4a8c      	ldr	r2, [pc, #560]	; (800757c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800734a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800734e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007350:	e015      	b.n	800737e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	3304      	adds	r3, #4
 8007356:	2100      	movs	r1, #0
 8007358:	4618      	mov	r0, r3
 800735a:	f001 f92b 	bl	80085b4 <RCCEx_PLL2_Config>
 800735e:	4603      	mov	r3, r0
 8007360:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007362:	e00c      	b.n	800737e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	3324      	adds	r3, #36	; 0x24
 8007368:	2100      	movs	r1, #0
 800736a:	4618      	mov	r0, r3
 800736c:	f001 f9d4 	bl	8008718 <RCCEx_PLL3_Config>
 8007370:	4603      	mov	r3, r0
 8007372:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007374:	e003      	b.n	800737e <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007376:	2301      	movs	r3, #1
 8007378:	75fb      	strb	r3, [r7, #23]
      break;
 800737a:	e000      	b.n	800737e <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 800737c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800737e:	7dfb      	ldrb	r3, [r7, #23]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d109      	bne.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007384:	4b7d      	ldr	r3, [pc, #500]	; (800757c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007386:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007388:	f023 0207 	bic.w	r2, r3, #7
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007390:	497a      	ldr	r1, [pc, #488]	; (800757c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007392:	4313      	orrs	r3, r2
 8007394:	650b      	str	r3, [r1, #80]	; 0x50
 8007396:	e001      	b.n	800739c <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007398:	7dfb      	ldrb	r3, [r7, #23]
 800739a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d03e      	beq.n	8007426 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073ac:	2b80      	cmp	r3, #128	; 0x80
 80073ae:	d01c      	beq.n	80073ea <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80073b0:	2b80      	cmp	r3, #128	; 0x80
 80073b2:	d804      	bhi.n	80073be <HAL_RCCEx_PeriphCLKConfig+0x142>
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d008      	beq.n	80073ca <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80073b8:	2b40      	cmp	r3, #64	; 0x40
 80073ba:	d00d      	beq.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80073bc:	e01e      	b.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0x180>
 80073be:	2bc0      	cmp	r3, #192	; 0xc0
 80073c0:	d01f      	beq.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0x186>
 80073c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073c6:	d01e      	beq.n	8007406 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80073c8:	e018      	b.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073ca:	4b6c      	ldr	r3, [pc, #432]	; (800757c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80073cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ce:	4a6b      	ldr	r2, [pc, #428]	; (800757c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80073d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80073d4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80073d6:	e017      	b.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	3304      	adds	r3, #4
 80073dc:	2100      	movs	r1, #0
 80073de:	4618      	mov	r0, r3
 80073e0:	f001 f8e8 	bl	80085b4 <RCCEx_PLL2_Config>
 80073e4:	4603      	mov	r3, r0
 80073e6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80073e8:	e00e      	b.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	3324      	adds	r3, #36	; 0x24
 80073ee:	2100      	movs	r1, #0
 80073f0:	4618      	mov	r0, r3
 80073f2:	f001 f991 	bl	8008718 <RCCEx_PLL3_Config>
 80073f6:	4603      	mov	r3, r0
 80073f8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80073fa:	e005      	b.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80073fc:	2301      	movs	r3, #1
 80073fe:	75fb      	strb	r3, [r7, #23]
      break;
 8007400:	e002      	b.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8007402:	bf00      	nop
 8007404:	e000      	b.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8007406:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007408:	7dfb      	ldrb	r3, [r7, #23]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d109      	bne.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800740e:	4b5b      	ldr	r3, [pc, #364]	; (800757c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007410:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007412:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800741a:	4958      	ldr	r1, [pc, #352]	; (800757c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800741c:	4313      	orrs	r3, r2
 800741e:	650b      	str	r3, [r1, #80]	; 0x50
 8007420:	e001      	b.n	8007426 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007422:	7dfb      	ldrb	r3, [r7, #23]
 8007424:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800742e:	2b00      	cmp	r3, #0
 8007430:	d044      	beq.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007438:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800743c:	d01f      	beq.n	800747e <HAL_RCCEx_PeriphCLKConfig+0x202>
 800743e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007442:	d805      	bhi.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8007444:	2b00      	cmp	r3, #0
 8007446:	d00a      	beq.n	800745e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007448:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800744c:	d00e      	beq.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 800744e:	e01f      	b.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8007450:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007454:	d01f      	beq.n	8007496 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8007456:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800745a:	d01e      	beq.n	800749a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800745c:	e018      	b.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800745e:	4b47      	ldr	r3, [pc, #284]	; (800757c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007462:	4a46      	ldr	r2, [pc, #280]	; (800757c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007464:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007468:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800746a:	e017      	b.n	800749c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	3304      	adds	r3, #4
 8007470:	2100      	movs	r1, #0
 8007472:	4618      	mov	r0, r3
 8007474:	f001 f89e 	bl	80085b4 <RCCEx_PLL2_Config>
 8007478:	4603      	mov	r3, r0
 800747a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800747c:	e00e      	b.n	800749c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	3324      	adds	r3, #36	; 0x24
 8007482:	2100      	movs	r1, #0
 8007484:	4618      	mov	r0, r3
 8007486:	f001 f947 	bl	8008718 <RCCEx_PLL3_Config>
 800748a:	4603      	mov	r3, r0
 800748c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800748e:	e005      	b.n	800749c <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007490:	2301      	movs	r3, #1
 8007492:	75fb      	strb	r3, [r7, #23]
      break;
 8007494:	e002      	b.n	800749c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8007496:	bf00      	nop
 8007498:	e000      	b.n	800749c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800749a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800749c:	7dfb      	ldrb	r3, [r7, #23]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d10a      	bne.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80074a2:	4b36      	ldr	r3, [pc, #216]	; (800757c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80074a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074a6:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80074b0:	4932      	ldr	r1, [pc, #200]	; (800757c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80074b2:	4313      	orrs	r3, r2
 80074b4:	658b      	str	r3, [r1, #88]	; 0x58
 80074b6:	e001      	b.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074b8:	7dfb      	ldrb	r3, [r7, #23]
 80074ba:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d044      	beq.n	8007552 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80074ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80074d2:	d01f      	beq.n	8007514 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80074d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80074d8:	d805      	bhi.n	80074e6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d00a      	beq.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0x278>
 80074de:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80074e2:	d00e      	beq.n	8007502 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80074e4:	e01f      	b.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 80074e6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80074ea:	d01f      	beq.n	800752c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80074ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80074f0:	d01e      	beq.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80074f2:	e018      	b.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074f4:	4b21      	ldr	r3, [pc, #132]	; (800757c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80074f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074f8:	4a20      	ldr	r2, [pc, #128]	; (800757c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80074fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80074fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007500:	e017      	b.n	8007532 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	3304      	adds	r3, #4
 8007506:	2100      	movs	r1, #0
 8007508:	4618      	mov	r0, r3
 800750a:	f001 f853 	bl	80085b4 <RCCEx_PLL2_Config>
 800750e:	4603      	mov	r3, r0
 8007510:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007512:	e00e      	b.n	8007532 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	3324      	adds	r3, #36	; 0x24
 8007518:	2100      	movs	r1, #0
 800751a:	4618      	mov	r0, r3
 800751c:	f001 f8fc 	bl	8008718 <RCCEx_PLL3_Config>
 8007520:	4603      	mov	r3, r0
 8007522:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007524:	e005      	b.n	8007532 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007526:	2301      	movs	r3, #1
 8007528:	75fb      	strb	r3, [r7, #23]
      break;
 800752a:	e002      	b.n	8007532 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 800752c:	bf00      	nop
 800752e:	e000      	b.n	8007532 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8007530:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007532:	7dfb      	ldrb	r3, [r7, #23]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d10a      	bne.n	800754e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007538:	4b10      	ldr	r3, [pc, #64]	; (800757c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800753a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800753c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007546:	490d      	ldr	r1, [pc, #52]	; (800757c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007548:	4313      	orrs	r3, r2
 800754a:	658b      	str	r3, [r1, #88]	; 0x58
 800754c:	e001      	b.n	8007552 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800754e:	7dfb      	ldrb	r3, [r7, #23]
 8007550:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800755a:	2b00      	cmp	r3, #0
 800755c:	d035      	beq.n	80075ca <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007562:	2b10      	cmp	r3, #16
 8007564:	d00c      	beq.n	8007580 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8007566:	2b10      	cmp	r3, #16
 8007568:	d802      	bhi.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 800756a:	2b00      	cmp	r3, #0
 800756c:	d01b      	beq.n	80075a6 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 800756e:	e017      	b.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8007570:	2b20      	cmp	r3, #32
 8007572:	d00c      	beq.n	800758e <HAL_RCCEx_PeriphCLKConfig+0x312>
 8007574:	2b30      	cmp	r3, #48	; 0x30
 8007576:	d018      	beq.n	80075aa <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8007578:	e012      	b.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0x324>
 800757a:	bf00      	nop
 800757c:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007580:	4baf      	ldr	r3, [pc, #700]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007584:	4aae      	ldr	r2, [pc, #696]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007586:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800758a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800758c:	e00e      	b.n	80075ac <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	3304      	adds	r3, #4
 8007592:	2102      	movs	r1, #2
 8007594:	4618      	mov	r0, r3
 8007596:	f001 f80d 	bl	80085b4 <RCCEx_PLL2_Config>
 800759a:	4603      	mov	r3, r0
 800759c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800759e:	e005      	b.n	80075ac <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80075a0:	2301      	movs	r3, #1
 80075a2:	75fb      	strb	r3, [r7, #23]
      break;
 80075a4:	e002      	b.n	80075ac <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80075a6:	bf00      	nop
 80075a8:	e000      	b.n	80075ac <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80075aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80075ac:	7dfb      	ldrb	r3, [r7, #23]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d109      	bne.n	80075c6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80075b2:	4ba3      	ldr	r3, [pc, #652]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80075b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075b6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075be:	49a0      	ldr	r1, [pc, #640]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80075c0:	4313      	orrs	r3, r2
 80075c2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80075c4:	e001      	b.n	80075ca <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075c6:	7dfb      	ldrb	r3, [r7, #23]
 80075c8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d042      	beq.n	800765c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075de:	d01f      	beq.n	8007620 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 80075e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075e4:	d805      	bhi.n	80075f2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d00a      	beq.n	8007600 <HAL_RCCEx_PeriphCLKConfig+0x384>
 80075ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075ee:	d00e      	beq.n	800760e <HAL_RCCEx_PeriphCLKConfig+0x392>
 80075f0:	e01f      	b.n	8007632 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 80075f2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80075f6:	d01f      	beq.n	8007638 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80075f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80075fc:	d01e      	beq.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80075fe:	e018      	b.n	8007632 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007600:	4b8f      	ldr	r3, [pc, #572]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007604:	4a8e      	ldr	r2, [pc, #568]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007606:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800760a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800760c:	e017      	b.n	800763e <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	3304      	adds	r3, #4
 8007612:	2100      	movs	r1, #0
 8007614:	4618      	mov	r0, r3
 8007616:	f000 ffcd 	bl	80085b4 <RCCEx_PLL2_Config>
 800761a:	4603      	mov	r3, r0
 800761c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800761e:	e00e      	b.n	800763e <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	3324      	adds	r3, #36	; 0x24
 8007624:	2100      	movs	r1, #0
 8007626:	4618      	mov	r0, r3
 8007628:	f001 f876 	bl	8008718 <RCCEx_PLL3_Config>
 800762c:	4603      	mov	r3, r0
 800762e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007630:	e005      	b.n	800763e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007632:	2301      	movs	r3, #1
 8007634:	75fb      	strb	r3, [r7, #23]
      break;
 8007636:	e002      	b.n	800763e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8007638:	bf00      	nop
 800763a:	e000      	b.n	800763e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 800763c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800763e:	7dfb      	ldrb	r3, [r7, #23]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d109      	bne.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007644:	4b7e      	ldr	r3, [pc, #504]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007646:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007648:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007650:	497b      	ldr	r1, [pc, #492]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007652:	4313      	orrs	r3, r2
 8007654:	650b      	str	r3, [r1, #80]	; 0x50
 8007656:	e001      	b.n	800765c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007658:	7dfb      	ldrb	r3, [r7, #23]
 800765a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007664:	2b00      	cmp	r3, #0
 8007666:	d042      	beq.n	80076ee <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800766c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007670:	d01b      	beq.n	80076aa <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8007672:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007676:	d805      	bhi.n	8007684 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8007678:	2b00      	cmp	r3, #0
 800767a:	d022      	beq.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0x446>
 800767c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007680:	d00a      	beq.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8007682:	e01b      	b.n	80076bc <HAL_RCCEx_PeriphCLKConfig+0x440>
 8007684:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007688:	d01d      	beq.n	80076c6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 800768a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800768e:	d01c      	beq.n	80076ca <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8007690:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007694:	d01b      	beq.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0x452>
 8007696:	e011      	b.n	80076bc <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	3304      	adds	r3, #4
 800769c:	2101      	movs	r1, #1
 800769e:	4618      	mov	r0, r3
 80076a0:	f000 ff88 	bl	80085b4 <RCCEx_PLL2_Config>
 80076a4:	4603      	mov	r3, r0
 80076a6:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80076a8:	e012      	b.n	80076d0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	3324      	adds	r3, #36	; 0x24
 80076ae:	2101      	movs	r1, #1
 80076b0:	4618      	mov	r0, r3
 80076b2:	f001 f831 	bl	8008718 <RCCEx_PLL3_Config>
 80076b6:	4603      	mov	r3, r0
 80076b8:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80076ba:	e009      	b.n	80076d0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80076bc:	2301      	movs	r3, #1
 80076be:	75fb      	strb	r3, [r7, #23]
      break;
 80076c0:	e006      	b.n	80076d0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80076c2:	bf00      	nop
 80076c4:	e004      	b.n	80076d0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80076c6:	bf00      	nop
 80076c8:	e002      	b.n	80076d0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80076ca:	bf00      	nop
 80076cc:	e000      	b.n	80076d0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80076ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80076d0:	7dfb      	ldrb	r3, [r7, #23]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d109      	bne.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80076d6:	4b5a      	ldr	r3, [pc, #360]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80076d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076da:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076e2:	4957      	ldr	r1, [pc, #348]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80076e4:	4313      	orrs	r3, r2
 80076e6:	650b      	str	r3, [r1, #80]	; 0x50
 80076e8:	e001      	b.n	80076ee <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076ea:	7dfb      	ldrb	r3, [r7, #23]
 80076ec:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d044      	beq.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007700:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007704:	d01b      	beq.n	800773e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8007706:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800770a:	d805      	bhi.n	8007718 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 800770c:	2b00      	cmp	r3, #0
 800770e:	d022      	beq.n	8007756 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8007710:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007714:	d00a      	beq.n	800772c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8007716:	e01b      	b.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8007718:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800771c:	d01d      	beq.n	800775a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800771e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007722:	d01c      	beq.n	800775e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8007724:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007728:	d01b      	beq.n	8007762 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800772a:	e011      	b.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	3304      	adds	r3, #4
 8007730:	2101      	movs	r1, #1
 8007732:	4618      	mov	r0, r3
 8007734:	f000 ff3e 	bl	80085b4 <RCCEx_PLL2_Config>
 8007738:	4603      	mov	r3, r0
 800773a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800773c:	e012      	b.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	3324      	adds	r3, #36	; 0x24
 8007742:	2101      	movs	r1, #1
 8007744:	4618      	mov	r0, r3
 8007746:	f000 ffe7 	bl	8008718 <RCCEx_PLL3_Config>
 800774a:	4603      	mov	r3, r0
 800774c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800774e:	e009      	b.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8007750:	2301      	movs	r3, #1
 8007752:	75fb      	strb	r3, [r7, #23]
      break;
 8007754:	e006      	b.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8007756:	bf00      	nop
 8007758:	e004      	b.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800775a:	bf00      	nop
 800775c:	e002      	b.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800775e:	bf00      	nop
 8007760:	e000      	b.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8007762:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007764:	7dfb      	ldrb	r3, [r7, #23]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d10a      	bne.n	8007780 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800776a:	4b35      	ldr	r3, [pc, #212]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800776c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800776e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007778:	4931      	ldr	r1, [pc, #196]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800777a:	4313      	orrs	r3, r2
 800777c:	658b      	str	r3, [r1, #88]	; 0x58
 800777e:	e001      	b.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007780:	7dfb      	ldrb	r3, [r7, #23]
 8007782:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800778c:	2b00      	cmp	r3, #0
 800778e:	d02d      	beq.n	80077ec <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007794:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007798:	d005      	beq.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800779a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800779e:	d009      	beq.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0x538>
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d013      	beq.n	80077cc <HAL_RCCEx_PeriphCLKConfig+0x550>
 80077a4:	e00f      	b.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077a6:	4b26      	ldr	r3, [pc, #152]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80077a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077aa:	4a25      	ldr	r2, [pc, #148]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80077ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80077b0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80077b2:	e00c      	b.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	3304      	adds	r3, #4
 80077b8:	2101      	movs	r1, #1
 80077ba:	4618      	mov	r0, r3
 80077bc:	f000 fefa 	bl	80085b4 <RCCEx_PLL2_Config>
 80077c0:	4603      	mov	r3, r0
 80077c2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80077c4:	e003      	b.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80077c6:	2301      	movs	r3, #1
 80077c8:	75fb      	strb	r3, [r7, #23]
      break;
 80077ca:	e000      	b.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 80077cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80077ce:	7dfb      	ldrb	r3, [r7, #23]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d109      	bne.n	80077e8 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80077d4:	4b1a      	ldr	r3, [pc, #104]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80077d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077d8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077e0:	4917      	ldr	r1, [pc, #92]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80077e2:	4313      	orrs	r3, r2
 80077e4:	650b      	str	r3, [r1, #80]	; 0x50
 80077e6:	e001      	b.n	80077ec <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077e8:	7dfb      	ldrb	r3, [r7, #23]
 80077ea:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d035      	beq.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077fc:	2b03      	cmp	r3, #3
 80077fe:	d81b      	bhi.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8007800:	a201      	add	r2, pc, #4	; (adr r2, 8007808 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8007802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007806:	bf00      	nop
 8007808:	08007845 	.word	0x08007845
 800780c:	08007819 	.word	0x08007819
 8007810:	08007827 	.word	0x08007827
 8007814:	08007845 	.word	0x08007845
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007818:	4b09      	ldr	r3, [pc, #36]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800781a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800781c:	4a08      	ldr	r2, [pc, #32]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800781e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007822:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007824:	e00f      	b.n	8007846 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	3304      	adds	r3, #4
 800782a:	2102      	movs	r1, #2
 800782c:	4618      	mov	r0, r3
 800782e:	f000 fec1 	bl	80085b4 <RCCEx_PLL2_Config>
 8007832:	4603      	mov	r3, r0
 8007834:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007836:	e006      	b.n	8007846 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007838:	2301      	movs	r3, #1
 800783a:	75fb      	strb	r3, [r7, #23]
      break;
 800783c:	e003      	b.n	8007846 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 800783e:	bf00      	nop
 8007840:	58024400 	.word	0x58024400
      break;
 8007844:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007846:	7dfb      	ldrb	r3, [r7, #23]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d109      	bne.n	8007860 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800784c:	4bba      	ldr	r3, [pc, #744]	; (8007b38 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800784e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007850:	f023 0203 	bic.w	r2, r3, #3
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007858:	49b7      	ldr	r1, [pc, #732]	; (8007b38 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800785a:	4313      	orrs	r3, r2
 800785c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800785e:	e001      	b.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007860:	7dfb      	ldrb	r3, [r7, #23]
 8007862:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800786c:	2b00      	cmp	r3, #0
 800786e:	f000 8086 	beq.w	800797e <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007872:	4bb2      	ldr	r3, [pc, #712]	; (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	4ab1      	ldr	r2, [pc, #708]	; (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8007878:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800787c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800787e:	f7fa fb85 	bl	8001f8c <HAL_GetTick>
 8007882:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007884:	e009      	b.n	800789a <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007886:	f7fa fb81 	bl	8001f8c <HAL_GetTick>
 800788a:	4602      	mov	r2, r0
 800788c:	693b      	ldr	r3, [r7, #16]
 800788e:	1ad3      	subs	r3, r2, r3
 8007890:	2b64      	cmp	r3, #100	; 0x64
 8007892:	d902      	bls.n	800789a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8007894:	2303      	movs	r3, #3
 8007896:	75fb      	strb	r3, [r7, #23]
        break;
 8007898:	e005      	b.n	80078a6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800789a:	4ba8      	ldr	r3, [pc, #672]	; (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d0ef      	beq.n	8007886 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 80078a6:	7dfb      	ldrb	r3, [r7, #23]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d166      	bne.n	800797a <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80078ac:	4ba2      	ldr	r3, [pc, #648]	; (8007b38 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80078ae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80078b6:	4053      	eors	r3, r2
 80078b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d013      	beq.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80078c0:	4b9d      	ldr	r3, [pc, #628]	; (8007b38 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80078c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078c8:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80078ca:	4b9b      	ldr	r3, [pc, #620]	; (8007b38 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80078cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078ce:	4a9a      	ldr	r2, [pc, #616]	; (8007b38 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80078d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80078d4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80078d6:	4b98      	ldr	r3, [pc, #608]	; (8007b38 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80078d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078da:	4a97      	ldr	r2, [pc, #604]	; (8007b38 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80078dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80078e0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80078e2:	4a95      	ldr	r2, [pc, #596]	; (8007b38 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80078ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078f2:	d115      	bne.n	8007920 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078f4:	f7fa fb4a 	bl	8001f8c <HAL_GetTick>
 80078f8:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80078fa:	e00b      	b.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80078fc:	f7fa fb46 	bl	8001f8c <HAL_GetTick>
 8007900:	4602      	mov	r2, r0
 8007902:	693b      	ldr	r3, [r7, #16]
 8007904:	1ad3      	subs	r3, r2, r3
 8007906:	f241 3288 	movw	r2, #5000	; 0x1388
 800790a:	4293      	cmp	r3, r2
 800790c:	d902      	bls.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 800790e:	2303      	movs	r3, #3
 8007910:	75fb      	strb	r3, [r7, #23]
            break;
 8007912:	e005      	b.n	8007920 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007914:	4b88      	ldr	r3, [pc, #544]	; (8007b38 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007918:	f003 0302 	and.w	r3, r3, #2
 800791c:	2b00      	cmp	r3, #0
 800791e:	d0ed      	beq.n	80078fc <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8007920:	7dfb      	ldrb	r3, [r7, #23]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d126      	bne.n	8007974 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800792c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007930:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007934:	d10d      	bne.n	8007952 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8007936:	4b80      	ldr	r3, [pc, #512]	; (8007b38 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007938:	691b      	ldr	r3, [r3, #16]
 800793a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007944:	0919      	lsrs	r1, r3, #4
 8007946:	4b7e      	ldr	r3, [pc, #504]	; (8007b40 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8007948:	400b      	ands	r3, r1
 800794a:	497b      	ldr	r1, [pc, #492]	; (8007b38 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800794c:	4313      	orrs	r3, r2
 800794e:	610b      	str	r3, [r1, #16]
 8007950:	e005      	b.n	800795e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8007952:	4b79      	ldr	r3, [pc, #484]	; (8007b38 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007954:	691b      	ldr	r3, [r3, #16]
 8007956:	4a78      	ldr	r2, [pc, #480]	; (8007b38 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007958:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800795c:	6113      	str	r3, [r2, #16]
 800795e:	4b76      	ldr	r3, [pc, #472]	; (8007b38 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007960:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007968:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800796c:	4972      	ldr	r1, [pc, #456]	; (8007b38 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800796e:	4313      	orrs	r3, r2
 8007970:	670b      	str	r3, [r1, #112]	; 0x70
 8007972:	e004      	b.n	800797e <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007974:	7dfb      	ldrb	r3, [r7, #23]
 8007976:	75bb      	strb	r3, [r7, #22]
 8007978:	e001      	b.n	800797e <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800797a:	7dfb      	ldrb	r3, [r7, #23]
 800797c:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f003 0301 	and.w	r3, r3, #1
 8007986:	2b00      	cmp	r3, #0
 8007988:	d07d      	beq.n	8007a86 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800798e:	2b28      	cmp	r3, #40	; 0x28
 8007990:	d866      	bhi.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8007992:	a201      	add	r2, pc, #4	; (adr r2, 8007998 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8007994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007998:	08007a67 	.word	0x08007a67
 800799c:	08007a61 	.word	0x08007a61
 80079a0:	08007a61 	.word	0x08007a61
 80079a4:	08007a61 	.word	0x08007a61
 80079a8:	08007a61 	.word	0x08007a61
 80079ac:	08007a61 	.word	0x08007a61
 80079b0:	08007a61 	.word	0x08007a61
 80079b4:	08007a61 	.word	0x08007a61
 80079b8:	08007a3d 	.word	0x08007a3d
 80079bc:	08007a61 	.word	0x08007a61
 80079c0:	08007a61 	.word	0x08007a61
 80079c4:	08007a61 	.word	0x08007a61
 80079c8:	08007a61 	.word	0x08007a61
 80079cc:	08007a61 	.word	0x08007a61
 80079d0:	08007a61 	.word	0x08007a61
 80079d4:	08007a61 	.word	0x08007a61
 80079d8:	08007a4f 	.word	0x08007a4f
 80079dc:	08007a61 	.word	0x08007a61
 80079e0:	08007a61 	.word	0x08007a61
 80079e4:	08007a61 	.word	0x08007a61
 80079e8:	08007a61 	.word	0x08007a61
 80079ec:	08007a61 	.word	0x08007a61
 80079f0:	08007a61 	.word	0x08007a61
 80079f4:	08007a61 	.word	0x08007a61
 80079f8:	08007a67 	.word	0x08007a67
 80079fc:	08007a61 	.word	0x08007a61
 8007a00:	08007a61 	.word	0x08007a61
 8007a04:	08007a61 	.word	0x08007a61
 8007a08:	08007a61 	.word	0x08007a61
 8007a0c:	08007a61 	.word	0x08007a61
 8007a10:	08007a61 	.word	0x08007a61
 8007a14:	08007a61 	.word	0x08007a61
 8007a18:	08007a67 	.word	0x08007a67
 8007a1c:	08007a61 	.word	0x08007a61
 8007a20:	08007a61 	.word	0x08007a61
 8007a24:	08007a61 	.word	0x08007a61
 8007a28:	08007a61 	.word	0x08007a61
 8007a2c:	08007a61 	.word	0x08007a61
 8007a30:	08007a61 	.word	0x08007a61
 8007a34:	08007a61 	.word	0x08007a61
 8007a38:	08007a67 	.word	0x08007a67
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	3304      	adds	r3, #4
 8007a40:	2101      	movs	r1, #1
 8007a42:	4618      	mov	r0, r3
 8007a44:	f000 fdb6 	bl	80085b4 <RCCEx_PLL2_Config>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007a4c:	e00c      	b.n	8007a68 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	3324      	adds	r3, #36	; 0x24
 8007a52:	2101      	movs	r1, #1
 8007a54:	4618      	mov	r0, r3
 8007a56:	f000 fe5f 	bl	8008718 <RCCEx_PLL3_Config>
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007a5e:	e003      	b.n	8007a68 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007a60:	2301      	movs	r3, #1
 8007a62:	75fb      	strb	r3, [r7, #23]
      break;
 8007a64:	e000      	b.n	8007a68 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8007a66:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a68:	7dfb      	ldrb	r3, [r7, #23]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d109      	bne.n	8007a82 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007a6e:	4b32      	ldr	r3, [pc, #200]	; (8007b38 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a72:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007a7a:	492f      	ldr	r1, [pc, #188]	; (8007b38 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007a7c:	4313      	orrs	r3, r2
 8007a7e:	654b      	str	r3, [r1, #84]	; 0x54
 8007a80:	e001      	b.n	8007a86 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a82:	7dfb      	ldrb	r3, [r7, #23]
 8007a84:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f003 0302 	and.w	r3, r3, #2
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d037      	beq.n	8007b02 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a96:	2b05      	cmp	r3, #5
 8007a98:	d820      	bhi.n	8007adc <HAL_RCCEx_PeriphCLKConfig+0x860>
 8007a9a:	a201      	add	r2, pc, #4	; (adr r2, 8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8007a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aa0:	08007ae3 	.word	0x08007ae3
 8007aa4:	08007ab9 	.word	0x08007ab9
 8007aa8:	08007acb 	.word	0x08007acb
 8007aac:	08007ae3 	.word	0x08007ae3
 8007ab0:	08007ae3 	.word	0x08007ae3
 8007ab4:	08007ae3 	.word	0x08007ae3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	3304      	adds	r3, #4
 8007abc:	2101      	movs	r1, #1
 8007abe:	4618      	mov	r0, r3
 8007ac0:	f000 fd78 	bl	80085b4 <RCCEx_PLL2_Config>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007ac8:	e00c      	b.n	8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	3324      	adds	r3, #36	; 0x24
 8007ace:	2101      	movs	r1, #1
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f000 fe21 	bl	8008718 <RCCEx_PLL3_Config>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007ada:	e003      	b.n	8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007adc:	2301      	movs	r3, #1
 8007ade:	75fb      	strb	r3, [r7, #23]
      break;
 8007ae0:	e000      	b.n	8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8007ae2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ae4:	7dfb      	ldrb	r3, [r7, #23]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d109      	bne.n	8007afe <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007aea:	4b13      	ldr	r3, [pc, #76]	; (8007b38 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007aee:	f023 0207 	bic.w	r2, r3, #7
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007af6:	4910      	ldr	r1, [pc, #64]	; (8007b38 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007af8:	4313      	orrs	r3, r2
 8007afa:	654b      	str	r3, [r1, #84]	; 0x54
 8007afc:	e001      	b.n	8007b02 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007afe:	7dfb      	ldrb	r3, [r7, #23]
 8007b00:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f003 0304 	and.w	r3, r3, #4
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d040      	beq.n	8007b90 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b14:	2b05      	cmp	r3, #5
 8007b16:	d827      	bhi.n	8007b68 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8007b18:	a201      	add	r2, pc, #4	; (adr r2, 8007b20 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8007b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b1e:	bf00      	nop
 8007b20:	08007b6f 	.word	0x08007b6f
 8007b24:	08007b45 	.word	0x08007b45
 8007b28:	08007b57 	.word	0x08007b57
 8007b2c:	08007b6f 	.word	0x08007b6f
 8007b30:	08007b6f 	.word	0x08007b6f
 8007b34:	08007b6f 	.word	0x08007b6f
 8007b38:	58024400 	.word	0x58024400
 8007b3c:	58024800 	.word	0x58024800
 8007b40:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	3304      	adds	r3, #4
 8007b48:	2101      	movs	r1, #1
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	f000 fd32 	bl	80085b4 <RCCEx_PLL2_Config>
 8007b50:	4603      	mov	r3, r0
 8007b52:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007b54:	e00c      	b.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	3324      	adds	r3, #36	; 0x24
 8007b5a:	2101      	movs	r1, #1
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	f000 fddb 	bl	8008718 <RCCEx_PLL3_Config>
 8007b62:	4603      	mov	r3, r0
 8007b64:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007b66:	e003      	b.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b68:	2301      	movs	r3, #1
 8007b6a:	75fb      	strb	r3, [r7, #23]
      break;
 8007b6c:	e000      	b.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8007b6e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b70:	7dfb      	ldrb	r3, [r7, #23]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d10a      	bne.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007b76:	4bb2      	ldr	r3, [pc, #712]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b7a:	f023 0207 	bic.w	r2, r3, #7
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b84:	49ae      	ldr	r1, [pc, #696]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007b86:	4313      	orrs	r3, r2
 8007b88:	658b      	str	r3, [r1, #88]	; 0x58
 8007b8a:	e001      	b.n	8007b90 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b8c:	7dfb      	ldrb	r3, [r7, #23]
 8007b8e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f003 0320 	and.w	r3, r3, #32
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d044      	beq.n	8007c26 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ba2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ba6:	d01b      	beq.n	8007be0 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8007ba8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007bac:	d805      	bhi.n	8007bba <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d022      	beq.n	8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8007bb2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007bb6:	d00a      	beq.n	8007bce <HAL_RCCEx_PeriphCLKConfig+0x952>
 8007bb8:	e01b      	b.n	8007bf2 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8007bba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bbe:	d01d      	beq.n	8007bfc <HAL_RCCEx_PeriphCLKConfig+0x980>
 8007bc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007bc4:	d01c      	beq.n	8007c00 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8007bc6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007bca:	d01b      	beq.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8007bcc:	e011      	b.n	8007bf2 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	3304      	adds	r3, #4
 8007bd2:	2100      	movs	r1, #0
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	f000 fced 	bl	80085b4 <RCCEx_PLL2_Config>
 8007bda:	4603      	mov	r3, r0
 8007bdc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007bde:	e012      	b.n	8007c06 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	3324      	adds	r3, #36	; 0x24
 8007be4:	2102      	movs	r1, #2
 8007be6:	4618      	mov	r0, r3
 8007be8:	f000 fd96 	bl	8008718 <RCCEx_PLL3_Config>
 8007bec:	4603      	mov	r3, r0
 8007bee:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007bf0:	e009      	b.n	8007c06 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	75fb      	strb	r3, [r7, #23]
      break;
 8007bf6:	e006      	b.n	8007c06 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007bf8:	bf00      	nop
 8007bfa:	e004      	b.n	8007c06 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007bfc:	bf00      	nop
 8007bfe:	e002      	b.n	8007c06 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007c00:	bf00      	nop
 8007c02:	e000      	b.n	8007c06 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007c04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c06:	7dfb      	ldrb	r3, [r7, #23]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d10a      	bne.n	8007c22 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007c0c:	4b8c      	ldr	r3, [pc, #560]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007c0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c10:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c1a:	4989      	ldr	r1, [pc, #548]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007c1c:	4313      	orrs	r3, r2
 8007c1e:	654b      	str	r3, [r1, #84]	; 0x54
 8007c20:	e001      	b.n	8007c26 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c22:	7dfb      	ldrb	r3, [r7, #23]
 8007c24:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d044      	beq.n	8007cbc <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007c38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c3c:	d01b      	beq.n	8007c76 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8007c3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c42:	d805      	bhi.n	8007c50 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d022      	beq.n	8007c8e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8007c48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c4c:	d00a      	beq.n	8007c64 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8007c4e:	e01b      	b.n	8007c88 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8007c50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c54:	d01d      	beq.n	8007c92 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8007c56:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007c5a:	d01c      	beq.n	8007c96 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8007c5c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007c60:	d01b      	beq.n	8007c9a <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8007c62:	e011      	b.n	8007c88 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	3304      	adds	r3, #4
 8007c68:	2100      	movs	r1, #0
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f000 fca2 	bl	80085b4 <RCCEx_PLL2_Config>
 8007c70:	4603      	mov	r3, r0
 8007c72:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007c74:	e012      	b.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	3324      	adds	r3, #36	; 0x24
 8007c7a:	2102      	movs	r1, #2
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	f000 fd4b 	bl	8008718 <RCCEx_PLL3_Config>
 8007c82:	4603      	mov	r3, r0
 8007c84:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007c86:	e009      	b.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c88:	2301      	movs	r3, #1
 8007c8a:	75fb      	strb	r3, [r7, #23]
      break;
 8007c8c:	e006      	b.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007c8e:	bf00      	nop
 8007c90:	e004      	b.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007c92:	bf00      	nop
 8007c94:	e002      	b.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007c96:	bf00      	nop
 8007c98:	e000      	b.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007c9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c9c:	7dfb      	ldrb	r3, [r7, #23]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d10a      	bne.n	8007cb8 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007ca2:	4b67      	ldr	r3, [pc, #412]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ca6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007cb0:	4963      	ldr	r1, [pc, #396]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007cb2:	4313      	orrs	r3, r2
 8007cb4:	658b      	str	r3, [r1, #88]	; 0x58
 8007cb6:	e001      	b.n	8007cbc <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cb8:	7dfb      	ldrb	r3, [r7, #23]
 8007cba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d044      	beq.n	8007d52 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007cce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007cd2:	d01b      	beq.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8007cd4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007cd8:	d805      	bhi.n	8007ce6 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d022      	beq.n	8007d24 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8007cde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ce2:	d00a      	beq.n	8007cfa <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8007ce4:	e01b      	b.n	8007d1e <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8007ce6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007cea:	d01d      	beq.n	8007d28 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8007cec:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007cf0:	d01c      	beq.n	8007d2c <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8007cf2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007cf6:	d01b      	beq.n	8007d30 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8007cf8:	e011      	b.n	8007d1e <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	3304      	adds	r3, #4
 8007cfe:	2100      	movs	r1, #0
 8007d00:	4618      	mov	r0, r3
 8007d02:	f000 fc57 	bl	80085b4 <RCCEx_PLL2_Config>
 8007d06:	4603      	mov	r3, r0
 8007d08:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007d0a:	e012      	b.n	8007d32 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	3324      	adds	r3, #36	; 0x24
 8007d10:	2102      	movs	r1, #2
 8007d12:	4618      	mov	r0, r3
 8007d14:	f000 fd00 	bl	8008718 <RCCEx_PLL3_Config>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007d1c:	e009      	b.n	8007d32 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d1e:	2301      	movs	r3, #1
 8007d20:	75fb      	strb	r3, [r7, #23]
      break;
 8007d22:	e006      	b.n	8007d32 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007d24:	bf00      	nop
 8007d26:	e004      	b.n	8007d32 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007d28:	bf00      	nop
 8007d2a:	e002      	b.n	8007d32 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007d2c:	bf00      	nop
 8007d2e:	e000      	b.n	8007d32 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007d30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d32:	7dfb      	ldrb	r3, [r7, #23]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d10a      	bne.n	8007d4e <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007d38:	4b41      	ldr	r3, [pc, #260]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d3c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007d46:	493e      	ldr	r1, [pc, #248]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007d48:	4313      	orrs	r3, r2
 8007d4a:	658b      	str	r3, [r1, #88]	; 0x58
 8007d4c:	e001      	b.n	8007d52 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d4e:	7dfb      	ldrb	r3, [r7, #23]
 8007d50:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f003 0308 	and.w	r3, r3, #8
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d01a      	beq.n	8007d94 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d68:	d10a      	bne.n	8007d80 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	3324      	adds	r3, #36	; 0x24
 8007d6e:	2102      	movs	r1, #2
 8007d70:	4618      	mov	r0, r3
 8007d72:	f000 fcd1 	bl	8008718 <RCCEx_PLL3_Config>
 8007d76:	4603      	mov	r3, r0
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d001      	beq.n	8007d80 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007d80:	4b2f      	ldr	r3, [pc, #188]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007d82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d84:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d8e:	492c      	ldr	r1, [pc, #176]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007d90:	4313      	orrs	r3, r2
 8007d92:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f003 0310 	and.w	r3, r3, #16
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d01a      	beq.n	8007dd6 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007da6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007daa:	d10a      	bne.n	8007dc2 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	3324      	adds	r3, #36	; 0x24
 8007db0:	2102      	movs	r1, #2
 8007db2:	4618      	mov	r0, r3
 8007db4:	f000 fcb0 	bl	8008718 <RCCEx_PLL3_Config>
 8007db8:	4603      	mov	r3, r0
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d001      	beq.n	8007dc2 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007dc2:	4b1f      	ldr	r3, [pc, #124]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007dc6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007dd0:	491b      	ldr	r1, [pc, #108]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007dd2:	4313      	orrs	r3, r2
 8007dd4:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d032      	beq.n	8007e48 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007de8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007dec:	d00d      	beq.n	8007e0a <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8007dee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007df2:	d016      	beq.n	8007e22 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d111      	bne.n	8007e1c <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	3304      	adds	r3, #4
 8007dfc:	2100      	movs	r1, #0
 8007dfe:	4618      	mov	r0, r3
 8007e00:	f000 fbd8 	bl	80085b4 <RCCEx_PLL2_Config>
 8007e04:	4603      	mov	r3, r0
 8007e06:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007e08:	e00c      	b.n	8007e24 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	3324      	adds	r3, #36	; 0x24
 8007e0e:	2102      	movs	r1, #2
 8007e10:	4618      	mov	r0, r3
 8007e12:	f000 fc81 	bl	8008718 <RCCEx_PLL3_Config>
 8007e16:	4603      	mov	r3, r0
 8007e18:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007e1a:	e003      	b.n	8007e24 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	75fb      	strb	r3, [r7, #23]
      break;
 8007e20:	e000      	b.n	8007e24 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8007e22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e24:	7dfb      	ldrb	r3, [r7, #23]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d10c      	bne.n	8007e44 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007e2a:	4b05      	ldr	r3, [pc, #20]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e2e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007e38:	4901      	ldr	r1, [pc, #4]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007e3a:	4313      	orrs	r3, r2
 8007e3c:	658b      	str	r3, [r1, #88]	; 0x58
 8007e3e:	e003      	b.n	8007e48 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8007e40:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e44:	7dfb      	ldrb	r3, [r7, #23]
 8007e46:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d02f      	beq.n	8007eb4 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e5a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007e5e:	d00c      	beq.n	8007e7a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8007e60:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007e64:	d015      	beq.n	8007e92 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8007e66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e6a:	d10f      	bne.n	8007e8c <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e6c:	4b79      	ldr	r3, [pc, #484]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e70:	4a78      	ldr	r2, [pc, #480]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007e72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e76:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007e78:	e00c      	b.n	8007e94 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	3324      	adds	r3, #36	; 0x24
 8007e7e:	2101      	movs	r1, #1
 8007e80:	4618      	mov	r0, r3
 8007e82:	f000 fc49 	bl	8008718 <RCCEx_PLL3_Config>
 8007e86:	4603      	mov	r3, r0
 8007e88:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8007e8a:	e003      	b.n	8007e94 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	75fb      	strb	r3, [r7, #23]
      break;
 8007e90:	e000      	b.n	8007e94 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8007e92:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e94:	7dfb      	ldrb	r3, [r7, #23]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d10a      	bne.n	8007eb0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007e9a:	4b6e      	ldr	r3, [pc, #440]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e9e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ea8:	496a      	ldr	r1, [pc, #424]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007eaa:	4313      	orrs	r3, r2
 8007eac:	654b      	str	r3, [r1, #84]	; 0x54
 8007eae:	e001      	b.n	8007eb4 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007eb0:	7dfb      	ldrb	r3, [r7, #23]
 8007eb2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d029      	beq.n	8007f14 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d003      	beq.n	8007ed0 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8007ec8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ecc:	d007      	beq.n	8007ede <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8007ece:	e00f      	b.n	8007ef0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ed0:	4b60      	ldr	r3, [pc, #384]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ed4:	4a5f      	ldr	r2, [pc, #380]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007ed6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007eda:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007edc:	e00b      	b.n	8007ef6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	3304      	adds	r3, #4
 8007ee2:	2102      	movs	r1, #2
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	f000 fb65 	bl	80085b4 <RCCEx_PLL2_Config>
 8007eea:	4603      	mov	r3, r0
 8007eec:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007eee:	e002      	b.n	8007ef6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	75fb      	strb	r3, [r7, #23]
      break;
 8007ef4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ef6:	7dfb      	ldrb	r3, [r7, #23]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d109      	bne.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007efc:	4b55      	ldr	r3, [pc, #340]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007efe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f00:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f08:	4952      	ldr	r1, [pc, #328]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007f0a:	4313      	orrs	r3, r2
 8007f0c:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007f0e:	e001      	b.n	8007f14 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f10:	7dfb      	ldrb	r3, [r7, #23]
 8007f12:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d00a      	beq.n	8007f36 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	3324      	adds	r3, #36	; 0x24
 8007f24:	2102      	movs	r1, #2
 8007f26:	4618      	mov	r0, r3
 8007f28:	f000 fbf6 	bl	8008718 <RCCEx_PLL3_Config>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d001      	beq.n	8007f36 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8007f32:	2301      	movs	r3, #1
 8007f34:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d02f      	beq.n	8007fa2 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f4a:	d00c      	beq.n	8007f66 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007f4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f50:	d802      	bhi.n	8007f58 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d011      	beq.n	8007f7a <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8007f56:	e00d      	b.n	8007f74 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8007f58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f5c:	d00f      	beq.n	8007f7e <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8007f5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f62:	d00e      	beq.n	8007f82 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8007f64:	e006      	b.n	8007f74 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f66:	4b3b      	ldr	r3, [pc, #236]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f6a:	4a3a      	ldr	r2, [pc, #232]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007f6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f70:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007f72:	e007      	b.n	8007f84 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007f74:	2301      	movs	r3, #1
 8007f76:	75fb      	strb	r3, [r7, #23]
      break;
 8007f78:	e004      	b.n	8007f84 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8007f7a:	bf00      	nop
 8007f7c:	e002      	b.n	8007f84 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8007f7e:	bf00      	nop
 8007f80:	e000      	b.n	8007f84 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8007f82:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f84:	7dfb      	ldrb	r3, [r7, #23]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d109      	bne.n	8007f9e <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007f8a:	4b32      	ldr	r3, [pc, #200]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f8e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f96:	492f      	ldr	r1, [pc, #188]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007f98:	4313      	orrs	r3, r2
 8007f9a:	654b      	str	r3, [r1, #84]	; 0x54
 8007f9c:	e001      	b.n	8007fa2 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f9e:	7dfb      	ldrb	r3, [r7, #23]
 8007fa0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d008      	beq.n	8007fc0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007fae:	4b29      	ldr	r3, [pc, #164]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007fb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fb2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fba:	4926      	ldr	r1, [pc, #152]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007fbc:	4313      	orrs	r3, r2
 8007fbe:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d009      	beq.n	8007fe0 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007fcc:	4b21      	ldr	r3, [pc, #132]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007fce:	691b      	ldr	r3, [r3, #16]
 8007fd0:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007fda:	491e      	ldr	r1, [pc, #120]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007fdc:	4313      	orrs	r3, r2
 8007fde:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d008      	beq.n	8007ffe <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007fec:	4b19      	ldr	r3, [pc, #100]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007fee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ff0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ff8:	4916      	ldr	r1, [pc, #88]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007ffa:	4313      	orrs	r3, r2
 8007ffc:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008006:	2b00      	cmp	r3, #0
 8008008:	d00d      	beq.n	8008026 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800800a:	4b12      	ldr	r3, [pc, #72]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800800c:	691b      	ldr	r3, [r3, #16]
 800800e:	4a11      	ldr	r2, [pc, #68]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008010:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008014:	6113      	str	r3, [r2, #16]
 8008016:	4b0f      	ldr	r3, [pc, #60]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008018:	691a      	ldr	r2, [r3, #16]
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008020:	490c      	ldr	r1, [pc, #48]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008022:	4313      	orrs	r3, r2
 8008024:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	2b00      	cmp	r3, #0
 800802c:	da08      	bge.n	8008040 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800802e:	4b09      	ldr	r3, [pc, #36]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008032:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800803a:	4906      	ldr	r1, [pc, #24]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800803c:	4313      	orrs	r3, r2
 800803e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8008040:	7dbb      	ldrb	r3, [r7, #22]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d101      	bne.n	800804a <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 8008046:	2300      	movs	r3, #0
 8008048:	e000      	b.n	800804c <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 800804a:	2301      	movs	r3, #1
}
 800804c:	4618      	mov	r0, r3
 800804e:	3718      	adds	r7, #24
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}
 8008054:	58024400 	.word	0x58024400

08008058 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800805c:	f7ff f870 	bl	8007140 <HAL_RCC_GetHCLKFreq>
 8008060:	4601      	mov	r1, r0
 8008062:	4b06      	ldr	r3, [pc, #24]	; (800807c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008064:	6a1b      	ldr	r3, [r3, #32]
 8008066:	091b      	lsrs	r3, r3, #4
 8008068:	f003 0307 	and.w	r3, r3, #7
 800806c:	4a04      	ldr	r2, [pc, #16]	; (8008080 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800806e:	5cd3      	ldrb	r3, [r2, r3]
 8008070:	f003 031f 	and.w	r3, r3, #31
 8008074:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008078:	4618      	mov	r0, r3
 800807a:	bd80      	pop	{r7, pc}
 800807c:	58024400 	.word	0x58024400
 8008080:	08026eb0 	.word	0x08026eb0

08008084 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8008084:	b480      	push	{r7}
 8008086:	b089      	sub	sp, #36	; 0x24
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800808c:	4b9d      	ldr	r3, [pc, #628]	; (8008304 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800808e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008090:	f003 0303 	and.w	r3, r3, #3
 8008094:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8008096:	4b9b      	ldr	r3, [pc, #620]	; (8008304 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800809a:	0b1b      	lsrs	r3, r3, #12
 800809c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80080a0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80080a2:	4b98      	ldr	r3, [pc, #608]	; (8008304 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80080a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080a6:	091b      	lsrs	r3, r3, #4
 80080a8:	f003 0301 	and.w	r3, r3, #1
 80080ac:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80080ae:	4b95      	ldr	r3, [pc, #596]	; (8008304 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80080b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080b2:	08db      	lsrs	r3, r3, #3
 80080b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80080b8:	693a      	ldr	r2, [r7, #16]
 80080ba:	fb02 f303 	mul.w	r3, r2, r3
 80080be:	ee07 3a90 	vmov	s15, r3
 80080c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080c6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	f000 810a 	beq.w	80082e6 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 80080d2:	69bb      	ldr	r3, [r7, #24]
 80080d4:	2b01      	cmp	r3, #1
 80080d6:	d05a      	beq.n	800818e <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 80080d8:	2b01      	cmp	r3, #1
 80080da:	d302      	bcc.n	80080e2 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 80080dc:	2b02      	cmp	r3, #2
 80080de:	d078      	beq.n	80081d2 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 80080e0:	e099      	b.n	8008216 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80080e2:	4b88      	ldr	r3, [pc, #544]	; (8008304 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f003 0320 	and.w	r3, r3, #32
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d02d      	beq.n	800814a <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80080ee:	4b85      	ldr	r3, [pc, #532]	; (8008304 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	08db      	lsrs	r3, r3, #3
 80080f4:	f003 0303 	and.w	r3, r3, #3
 80080f8:	4a83      	ldr	r2, [pc, #524]	; (8008308 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 80080fa:	fa22 f303 	lsr.w	r3, r2, r3
 80080fe:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	ee07 3a90 	vmov	s15, r3
 8008106:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800810a:	697b      	ldr	r3, [r7, #20]
 800810c:	ee07 3a90 	vmov	s15, r3
 8008110:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008114:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008118:	4b7a      	ldr	r3, [pc, #488]	; (8008304 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800811a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800811c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008120:	ee07 3a90 	vmov	s15, r3
 8008124:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008128:	ed97 6a03 	vldr	s12, [r7, #12]
 800812c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800830c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8008130:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008134:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008138:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800813c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008140:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008144:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008148:	e087      	b.n	800825a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800814a:	697b      	ldr	r3, [r7, #20]
 800814c:	ee07 3a90 	vmov	s15, r3
 8008150:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008154:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008310 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8008158:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800815c:	4b69      	ldr	r3, [pc, #420]	; (8008304 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800815e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008160:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008164:	ee07 3a90 	vmov	s15, r3
 8008168:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800816c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008170:	eddf 5a66 	vldr	s11, [pc, #408]	; 800830c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8008174:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008178:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800817c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008180:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008184:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008188:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800818c:	e065      	b.n	800825a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800818e:	697b      	ldr	r3, [r7, #20]
 8008190:	ee07 3a90 	vmov	s15, r3
 8008194:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008198:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008314 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800819c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081a0:	4b58      	ldr	r3, [pc, #352]	; (8008304 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80081a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081a8:	ee07 3a90 	vmov	s15, r3
 80081ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081b0:	ed97 6a03 	vldr	s12, [r7, #12]
 80081b4:	eddf 5a55 	vldr	s11, [pc, #340]	; 800830c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80081b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80081c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081cc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80081d0:	e043      	b.n	800825a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80081d2:	697b      	ldr	r3, [r7, #20]
 80081d4:	ee07 3a90 	vmov	s15, r3
 80081d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081dc:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008318 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 80081e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081e4:	4b47      	ldr	r3, [pc, #284]	; (8008304 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80081e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081ec:	ee07 3a90 	vmov	s15, r3
 80081f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081f4:	ed97 6a03 	vldr	s12, [r7, #12]
 80081f8:	eddf 5a44 	vldr	s11, [pc, #272]	; 800830c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80081fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008200:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008204:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008208:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800820c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008210:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008214:	e021      	b.n	800825a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008216:	697b      	ldr	r3, [r7, #20]
 8008218:	ee07 3a90 	vmov	s15, r3
 800821c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008220:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8008314 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8008224:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008228:	4b36      	ldr	r3, [pc, #216]	; (8008304 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800822a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800822c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008230:	ee07 3a90 	vmov	s15, r3
 8008234:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008238:	ed97 6a03 	vldr	s12, [r7, #12]
 800823c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800830c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8008240:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008244:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008248:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800824c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008250:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008254:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008258:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800825a:	4b2a      	ldr	r3, [pc, #168]	; (8008304 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800825c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800825e:	0a5b      	lsrs	r3, r3, #9
 8008260:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008264:	ee07 3a90 	vmov	s15, r3
 8008268:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800826c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008270:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008274:	edd7 6a07 	vldr	s13, [r7, #28]
 8008278:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800827c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008280:	ee17 2a90 	vmov	r2, s15
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8008288:	4b1e      	ldr	r3, [pc, #120]	; (8008304 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800828a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800828c:	0c1b      	lsrs	r3, r3, #16
 800828e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008292:	ee07 3a90 	vmov	s15, r3
 8008296:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800829a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800829e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80082a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80082a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80082aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80082ae:	ee17 2a90 	vmov	r2, s15
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80082b6:	4b13      	ldr	r3, [pc, #76]	; (8008304 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80082b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082ba:	0e1b      	lsrs	r3, r3, #24
 80082bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082c0:	ee07 3a90 	vmov	s15, r3
 80082c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80082cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80082d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80082d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80082d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80082dc:	ee17 2a90 	vmov	r2, s15
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80082e4:	e008      	b.n	80082f8 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2200      	movs	r2, #0
 80082ea:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2200      	movs	r2, #0
 80082f0:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2200      	movs	r2, #0
 80082f6:	609a      	str	r2, [r3, #8]
}
 80082f8:	bf00      	nop
 80082fa:	3724      	adds	r7, #36	; 0x24
 80082fc:	46bd      	mov	sp, r7
 80082fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008302:	4770      	bx	lr
 8008304:	58024400 	.word	0x58024400
 8008308:	03d09000 	.word	0x03d09000
 800830c:	46000000 	.word	0x46000000
 8008310:	4c742400 	.word	0x4c742400
 8008314:	4a742400 	.word	0x4a742400
 8008318:	4bbebc20 	.word	0x4bbebc20

0800831c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800831c:	b480      	push	{r7}
 800831e:	b089      	sub	sp, #36	; 0x24
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008324:	4b9d      	ldr	r3, [pc, #628]	; (800859c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008328:	f003 0303 	and.w	r3, r3, #3
 800832c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800832e:	4b9b      	ldr	r3, [pc, #620]	; (800859c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008332:	0d1b      	lsrs	r3, r3, #20
 8008334:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008338:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800833a:	4b98      	ldr	r3, [pc, #608]	; (800859c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800833c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800833e:	0a1b      	lsrs	r3, r3, #8
 8008340:	f003 0301 	and.w	r3, r3, #1
 8008344:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8008346:	4b95      	ldr	r3, [pc, #596]	; (800859c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800834a:	08db      	lsrs	r3, r3, #3
 800834c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008350:	693a      	ldr	r2, [r7, #16]
 8008352:	fb02 f303 	mul.w	r3, r2, r3
 8008356:	ee07 3a90 	vmov	s15, r3
 800835a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800835e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008362:	697b      	ldr	r3, [r7, #20]
 8008364:	2b00      	cmp	r3, #0
 8008366:	f000 810a 	beq.w	800857e <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 800836a:	69bb      	ldr	r3, [r7, #24]
 800836c:	2b01      	cmp	r3, #1
 800836e:	d05a      	beq.n	8008426 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8008370:	2b01      	cmp	r3, #1
 8008372:	d302      	bcc.n	800837a <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8008374:	2b02      	cmp	r3, #2
 8008376:	d078      	beq.n	800846a <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8008378:	e099      	b.n	80084ae <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800837a:	4b88      	ldr	r3, [pc, #544]	; (800859c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f003 0320 	and.w	r3, r3, #32
 8008382:	2b00      	cmp	r3, #0
 8008384:	d02d      	beq.n	80083e2 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008386:	4b85      	ldr	r3, [pc, #532]	; (800859c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	08db      	lsrs	r3, r3, #3
 800838c:	f003 0303 	and.w	r3, r3, #3
 8008390:	4a83      	ldr	r2, [pc, #524]	; (80085a0 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8008392:	fa22 f303 	lsr.w	r3, r2, r3
 8008396:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	ee07 3a90 	vmov	s15, r3
 800839e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	ee07 3a90 	vmov	s15, r3
 80083a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083b0:	4b7a      	ldr	r3, [pc, #488]	; (800859c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80083b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083b8:	ee07 3a90 	vmov	s15, r3
 80083bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083c0:	ed97 6a03 	vldr	s12, [r7, #12]
 80083c4:	eddf 5a77 	vldr	s11, [pc, #476]	; 80085a4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80083c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083dc:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80083e0:	e087      	b.n	80084f2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80083e2:	697b      	ldr	r3, [r7, #20]
 80083e4:	ee07 3a90 	vmov	s15, r3
 80083e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083ec:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80085a8 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 80083f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083f4:	4b69      	ldr	r3, [pc, #420]	; (800859c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80083f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083fc:	ee07 3a90 	vmov	s15, r3
 8008400:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008404:	ed97 6a03 	vldr	s12, [r7, #12]
 8008408:	eddf 5a66 	vldr	s11, [pc, #408]	; 80085a4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800840c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008410:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008414:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008418:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800841c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008420:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008424:	e065      	b.n	80084f2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008426:	697b      	ldr	r3, [r7, #20]
 8008428:	ee07 3a90 	vmov	s15, r3
 800842c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008430:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80085ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8008434:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008438:	4b58      	ldr	r3, [pc, #352]	; (800859c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800843a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800843c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008440:	ee07 3a90 	vmov	s15, r3
 8008444:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008448:	ed97 6a03 	vldr	s12, [r7, #12]
 800844c:	eddf 5a55 	vldr	s11, [pc, #340]	; 80085a4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008450:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008454:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008458:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800845c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008460:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008464:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008468:	e043      	b.n	80084f2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800846a:	697b      	ldr	r3, [r7, #20]
 800846c:	ee07 3a90 	vmov	s15, r3
 8008470:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008474:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80085b0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8008478:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800847c:	4b47      	ldr	r3, [pc, #284]	; (800859c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800847e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008480:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008484:	ee07 3a90 	vmov	s15, r3
 8008488:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800848c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008490:	eddf 5a44 	vldr	s11, [pc, #272]	; 80085a4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008494:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008498:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800849c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80084a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084a8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80084ac:	e021      	b.n	80084f2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80084ae:	697b      	ldr	r3, [r7, #20]
 80084b0:	ee07 3a90 	vmov	s15, r3
 80084b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084b8:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80085ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80084bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084c0:	4b36      	ldr	r3, [pc, #216]	; (800859c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80084c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084c8:	ee07 3a90 	vmov	s15, r3
 80084cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084d0:	ed97 6a03 	vldr	s12, [r7, #12]
 80084d4:	eddf 5a33 	vldr	s11, [pc, #204]	; 80085a4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80084d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80084e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084ec:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80084f0:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80084f2:	4b2a      	ldr	r3, [pc, #168]	; (800859c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80084f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084f6:	0a5b      	lsrs	r3, r3, #9
 80084f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084fc:	ee07 3a90 	vmov	s15, r3
 8008500:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008504:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008508:	ee37 7a87 	vadd.f32	s14, s15, s14
 800850c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008510:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008514:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008518:	ee17 2a90 	vmov	r2, s15
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8008520:	4b1e      	ldr	r3, [pc, #120]	; (800859c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008524:	0c1b      	lsrs	r3, r3, #16
 8008526:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800852a:	ee07 3a90 	vmov	s15, r3
 800852e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008532:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008536:	ee37 7a87 	vadd.f32	s14, s15, s14
 800853a:	edd7 6a07 	vldr	s13, [r7, #28]
 800853e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008542:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008546:	ee17 2a90 	vmov	r2, s15
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800854e:	4b13      	ldr	r3, [pc, #76]	; (800859c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008552:	0e1b      	lsrs	r3, r3, #24
 8008554:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008558:	ee07 3a90 	vmov	s15, r3
 800855c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008560:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008564:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008568:	edd7 6a07 	vldr	s13, [r7, #28]
 800856c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008570:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008574:	ee17 2a90 	vmov	r2, s15
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800857c:	e008      	b.n	8008590 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2200      	movs	r2, #0
 8008582:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2200      	movs	r2, #0
 8008588:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2200      	movs	r2, #0
 800858e:	609a      	str	r2, [r3, #8]
}
 8008590:	bf00      	nop
 8008592:	3724      	adds	r7, #36	; 0x24
 8008594:	46bd      	mov	sp, r7
 8008596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859a:	4770      	bx	lr
 800859c:	58024400 	.word	0x58024400
 80085a0:	03d09000 	.word	0x03d09000
 80085a4:	46000000 	.word	0x46000000
 80085a8:	4c742400 	.word	0x4c742400
 80085ac:	4a742400 	.word	0x4a742400
 80085b0:	4bbebc20 	.word	0x4bbebc20

080085b4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b084      	sub	sp, #16
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
 80085bc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80085be:	2300      	movs	r3, #0
 80085c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80085c2:	4b53      	ldr	r3, [pc, #332]	; (8008710 <RCCEx_PLL2_Config+0x15c>)
 80085c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085c6:	f003 0303 	and.w	r3, r3, #3
 80085ca:	2b03      	cmp	r3, #3
 80085cc:	d101      	bne.n	80085d2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80085ce:	2301      	movs	r3, #1
 80085d0:	e099      	b.n	8008706 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80085d2:	4b4f      	ldr	r3, [pc, #316]	; (8008710 <RCCEx_PLL2_Config+0x15c>)
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	4a4e      	ldr	r2, [pc, #312]	; (8008710 <RCCEx_PLL2_Config+0x15c>)
 80085d8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80085dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80085de:	f7f9 fcd5 	bl	8001f8c <HAL_GetTick>
 80085e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80085e4:	e008      	b.n	80085f8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80085e6:	f7f9 fcd1 	bl	8001f8c <HAL_GetTick>
 80085ea:	4602      	mov	r2, r0
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	1ad3      	subs	r3, r2, r3
 80085f0:	2b02      	cmp	r3, #2
 80085f2:	d901      	bls.n	80085f8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80085f4:	2303      	movs	r3, #3
 80085f6:	e086      	b.n	8008706 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80085f8:	4b45      	ldr	r3, [pc, #276]	; (8008710 <RCCEx_PLL2_Config+0x15c>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008600:	2b00      	cmp	r3, #0
 8008602:	d1f0      	bne.n	80085e6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008604:	4b42      	ldr	r3, [pc, #264]	; (8008710 <RCCEx_PLL2_Config+0x15c>)
 8008606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008608:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	031b      	lsls	r3, r3, #12
 8008612:	493f      	ldr	r1, [pc, #252]	; (8008710 <RCCEx_PLL2_Config+0x15c>)
 8008614:	4313      	orrs	r3, r2
 8008616:	628b      	str	r3, [r1, #40]	; 0x28
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	685b      	ldr	r3, [r3, #4]
 800861c:	3b01      	subs	r3, #1
 800861e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	689b      	ldr	r3, [r3, #8]
 8008626:	3b01      	subs	r3, #1
 8008628:	025b      	lsls	r3, r3, #9
 800862a:	b29b      	uxth	r3, r3
 800862c:	431a      	orrs	r2, r3
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	68db      	ldr	r3, [r3, #12]
 8008632:	3b01      	subs	r3, #1
 8008634:	041b      	lsls	r3, r3, #16
 8008636:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800863a:	431a      	orrs	r2, r3
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	691b      	ldr	r3, [r3, #16]
 8008640:	3b01      	subs	r3, #1
 8008642:	061b      	lsls	r3, r3, #24
 8008644:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008648:	4931      	ldr	r1, [pc, #196]	; (8008710 <RCCEx_PLL2_Config+0x15c>)
 800864a:	4313      	orrs	r3, r2
 800864c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800864e:	4b30      	ldr	r3, [pc, #192]	; (8008710 <RCCEx_PLL2_Config+0x15c>)
 8008650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008652:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	695b      	ldr	r3, [r3, #20]
 800865a:	492d      	ldr	r1, [pc, #180]	; (8008710 <RCCEx_PLL2_Config+0x15c>)
 800865c:	4313      	orrs	r3, r2
 800865e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008660:	4b2b      	ldr	r3, [pc, #172]	; (8008710 <RCCEx_PLL2_Config+0x15c>)
 8008662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008664:	f023 0220 	bic.w	r2, r3, #32
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	699b      	ldr	r3, [r3, #24]
 800866c:	4928      	ldr	r1, [pc, #160]	; (8008710 <RCCEx_PLL2_Config+0x15c>)
 800866e:	4313      	orrs	r3, r2
 8008670:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008672:	4b27      	ldr	r3, [pc, #156]	; (8008710 <RCCEx_PLL2_Config+0x15c>)
 8008674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008676:	4a26      	ldr	r2, [pc, #152]	; (8008710 <RCCEx_PLL2_Config+0x15c>)
 8008678:	f023 0310 	bic.w	r3, r3, #16
 800867c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800867e:	4b24      	ldr	r3, [pc, #144]	; (8008710 <RCCEx_PLL2_Config+0x15c>)
 8008680:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008682:	4b24      	ldr	r3, [pc, #144]	; (8008714 <RCCEx_PLL2_Config+0x160>)
 8008684:	4013      	ands	r3, r2
 8008686:	687a      	ldr	r2, [r7, #4]
 8008688:	69d2      	ldr	r2, [r2, #28]
 800868a:	00d2      	lsls	r2, r2, #3
 800868c:	4920      	ldr	r1, [pc, #128]	; (8008710 <RCCEx_PLL2_Config+0x15c>)
 800868e:	4313      	orrs	r3, r2
 8008690:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008692:	4b1f      	ldr	r3, [pc, #124]	; (8008710 <RCCEx_PLL2_Config+0x15c>)
 8008694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008696:	4a1e      	ldr	r2, [pc, #120]	; (8008710 <RCCEx_PLL2_Config+0x15c>)
 8008698:	f043 0310 	orr.w	r3, r3, #16
 800869c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d106      	bne.n	80086b2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80086a4:	4b1a      	ldr	r3, [pc, #104]	; (8008710 <RCCEx_PLL2_Config+0x15c>)
 80086a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086a8:	4a19      	ldr	r2, [pc, #100]	; (8008710 <RCCEx_PLL2_Config+0x15c>)
 80086aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80086ae:	62d3      	str	r3, [r2, #44]	; 0x2c
 80086b0:	e00f      	b.n	80086d2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	2b01      	cmp	r3, #1
 80086b6:	d106      	bne.n	80086c6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80086b8:	4b15      	ldr	r3, [pc, #84]	; (8008710 <RCCEx_PLL2_Config+0x15c>)
 80086ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086bc:	4a14      	ldr	r2, [pc, #80]	; (8008710 <RCCEx_PLL2_Config+0x15c>)
 80086be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80086c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80086c4:	e005      	b.n	80086d2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80086c6:	4b12      	ldr	r3, [pc, #72]	; (8008710 <RCCEx_PLL2_Config+0x15c>)
 80086c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086ca:	4a11      	ldr	r2, [pc, #68]	; (8008710 <RCCEx_PLL2_Config+0x15c>)
 80086cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80086d0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80086d2:	4b0f      	ldr	r3, [pc, #60]	; (8008710 <RCCEx_PLL2_Config+0x15c>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	4a0e      	ldr	r2, [pc, #56]	; (8008710 <RCCEx_PLL2_Config+0x15c>)
 80086d8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80086dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80086de:	f7f9 fc55 	bl	8001f8c <HAL_GetTick>
 80086e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80086e4:	e008      	b.n	80086f8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80086e6:	f7f9 fc51 	bl	8001f8c <HAL_GetTick>
 80086ea:	4602      	mov	r2, r0
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	1ad3      	subs	r3, r2, r3
 80086f0:	2b02      	cmp	r3, #2
 80086f2:	d901      	bls.n	80086f8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80086f4:	2303      	movs	r3, #3
 80086f6:	e006      	b.n	8008706 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80086f8:	4b05      	ldr	r3, [pc, #20]	; (8008710 <RCCEx_PLL2_Config+0x15c>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008700:	2b00      	cmp	r3, #0
 8008702:	d0f0      	beq.n	80086e6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008704:	7bfb      	ldrb	r3, [r7, #15]
}
 8008706:	4618      	mov	r0, r3
 8008708:	3710      	adds	r7, #16
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}
 800870e:	bf00      	nop
 8008710:	58024400 	.word	0x58024400
 8008714:	ffff0007 	.word	0xffff0007

08008718 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b084      	sub	sp, #16
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
 8008720:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008722:	2300      	movs	r3, #0
 8008724:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008726:	4b53      	ldr	r3, [pc, #332]	; (8008874 <RCCEx_PLL3_Config+0x15c>)
 8008728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800872a:	f003 0303 	and.w	r3, r3, #3
 800872e:	2b03      	cmp	r3, #3
 8008730:	d101      	bne.n	8008736 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008732:	2301      	movs	r3, #1
 8008734:	e099      	b.n	800886a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008736:	4b4f      	ldr	r3, [pc, #316]	; (8008874 <RCCEx_PLL3_Config+0x15c>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	4a4e      	ldr	r2, [pc, #312]	; (8008874 <RCCEx_PLL3_Config+0x15c>)
 800873c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008740:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008742:	f7f9 fc23 	bl	8001f8c <HAL_GetTick>
 8008746:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008748:	e008      	b.n	800875c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800874a:	f7f9 fc1f 	bl	8001f8c <HAL_GetTick>
 800874e:	4602      	mov	r2, r0
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	1ad3      	subs	r3, r2, r3
 8008754:	2b02      	cmp	r3, #2
 8008756:	d901      	bls.n	800875c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008758:	2303      	movs	r3, #3
 800875a:	e086      	b.n	800886a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800875c:	4b45      	ldr	r3, [pc, #276]	; (8008874 <RCCEx_PLL3_Config+0x15c>)
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008764:	2b00      	cmp	r3, #0
 8008766:	d1f0      	bne.n	800874a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008768:	4b42      	ldr	r3, [pc, #264]	; (8008874 <RCCEx_PLL3_Config+0x15c>)
 800876a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800876c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	051b      	lsls	r3, r3, #20
 8008776:	493f      	ldr	r1, [pc, #252]	; (8008874 <RCCEx_PLL3_Config+0x15c>)
 8008778:	4313      	orrs	r3, r2
 800877a:	628b      	str	r3, [r1, #40]	; 0x28
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	685b      	ldr	r3, [r3, #4]
 8008780:	3b01      	subs	r3, #1
 8008782:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	689b      	ldr	r3, [r3, #8]
 800878a:	3b01      	subs	r3, #1
 800878c:	025b      	lsls	r3, r3, #9
 800878e:	b29b      	uxth	r3, r3
 8008790:	431a      	orrs	r2, r3
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	68db      	ldr	r3, [r3, #12]
 8008796:	3b01      	subs	r3, #1
 8008798:	041b      	lsls	r3, r3, #16
 800879a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800879e:	431a      	orrs	r2, r3
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	691b      	ldr	r3, [r3, #16]
 80087a4:	3b01      	subs	r3, #1
 80087a6:	061b      	lsls	r3, r3, #24
 80087a8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80087ac:	4931      	ldr	r1, [pc, #196]	; (8008874 <RCCEx_PLL3_Config+0x15c>)
 80087ae:	4313      	orrs	r3, r2
 80087b0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80087b2:	4b30      	ldr	r3, [pc, #192]	; (8008874 <RCCEx_PLL3_Config+0x15c>)
 80087b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087b6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	695b      	ldr	r3, [r3, #20]
 80087be:	492d      	ldr	r1, [pc, #180]	; (8008874 <RCCEx_PLL3_Config+0x15c>)
 80087c0:	4313      	orrs	r3, r2
 80087c2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80087c4:	4b2b      	ldr	r3, [pc, #172]	; (8008874 <RCCEx_PLL3_Config+0x15c>)
 80087c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087c8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	699b      	ldr	r3, [r3, #24]
 80087d0:	4928      	ldr	r1, [pc, #160]	; (8008874 <RCCEx_PLL3_Config+0x15c>)
 80087d2:	4313      	orrs	r3, r2
 80087d4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80087d6:	4b27      	ldr	r3, [pc, #156]	; (8008874 <RCCEx_PLL3_Config+0x15c>)
 80087d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087da:	4a26      	ldr	r2, [pc, #152]	; (8008874 <RCCEx_PLL3_Config+0x15c>)
 80087dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80087e0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80087e2:	4b24      	ldr	r3, [pc, #144]	; (8008874 <RCCEx_PLL3_Config+0x15c>)
 80087e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80087e6:	4b24      	ldr	r3, [pc, #144]	; (8008878 <RCCEx_PLL3_Config+0x160>)
 80087e8:	4013      	ands	r3, r2
 80087ea:	687a      	ldr	r2, [r7, #4]
 80087ec:	69d2      	ldr	r2, [r2, #28]
 80087ee:	00d2      	lsls	r2, r2, #3
 80087f0:	4920      	ldr	r1, [pc, #128]	; (8008874 <RCCEx_PLL3_Config+0x15c>)
 80087f2:	4313      	orrs	r3, r2
 80087f4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80087f6:	4b1f      	ldr	r3, [pc, #124]	; (8008874 <RCCEx_PLL3_Config+0x15c>)
 80087f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087fa:	4a1e      	ldr	r2, [pc, #120]	; (8008874 <RCCEx_PLL3_Config+0x15c>)
 80087fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008800:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d106      	bne.n	8008816 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008808:	4b1a      	ldr	r3, [pc, #104]	; (8008874 <RCCEx_PLL3_Config+0x15c>)
 800880a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800880c:	4a19      	ldr	r2, [pc, #100]	; (8008874 <RCCEx_PLL3_Config+0x15c>)
 800880e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008812:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008814:	e00f      	b.n	8008836 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	2b01      	cmp	r3, #1
 800881a:	d106      	bne.n	800882a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800881c:	4b15      	ldr	r3, [pc, #84]	; (8008874 <RCCEx_PLL3_Config+0x15c>)
 800881e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008820:	4a14      	ldr	r2, [pc, #80]	; (8008874 <RCCEx_PLL3_Config+0x15c>)
 8008822:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008826:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008828:	e005      	b.n	8008836 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800882a:	4b12      	ldr	r3, [pc, #72]	; (8008874 <RCCEx_PLL3_Config+0x15c>)
 800882c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800882e:	4a11      	ldr	r2, [pc, #68]	; (8008874 <RCCEx_PLL3_Config+0x15c>)
 8008830:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008834:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008836:	4b0f      	ldr	r3, [pc, #60]	; (8008874 <RCCEx_PLL3_Config+0x15c>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	4a0e      	ldr	r2, [pc, #56]	; (8008874 <RCCEx_PLL3_Config+0x15c>)
 800883c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008840:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008842:	f7f9 fba3 	bl	8001f8c <HAL_GetTick>
 8008846:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008848:	e008      	b.n	800885c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800884a:	f7f9 fb9f 	bl	8001f8c <HAL_GetTick>
 800884e:	4602      	mov	r2, r0
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	1ad3      	subs	r3, r2, r3
 8008854:	2b02      	cmp	r3, #2
 8008856:	d901      	bls.n	800885c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008858:	2303      	movs	r3, #3
 800885a:	e006      	b.n	800886a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800885c:	4b05      	ldr	r3, [pc, #20]	; (8008874 <RCCEx_PLL3_Config+0x15c>)
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008864:	2b00      	cmp	r3, #0
 8008866:	d0f0      	beq.n	800884a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008868:	7bfb      	ldrb	r3, [r7, #15]
}
 800886a:	4618      	mov	r0, r3
 800886c:	3710      	adds	r7, #16
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}
 8008872:	bf00      	nop
 8008874:	58024400 	.word	0x58024400
 8008878:	ffff0007 	.word	0xffff0007

0800887c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b084      	sub	sp, #16
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008884:	2301      	movs	r3, #1
 8008886:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d067      	beq.n	800895e <HAL_RTC_Init+0xe2>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008894:	b2db      	uxtb	r3, r3
 8008896:	2b00      	cmp	r3, #0
 8008898:	d106      	bne.n	80088a8 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	2200      	movs	r2, #0
 800889e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f7f8 fc2e 	bl	8001104 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2202      	movs	r2, #2
 80088ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	22ca      	movs	r2, #202	; 0xca
 80088b6:	625a      	str	r2, [r3, #36]	; 0x24
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	2253      	movs	r2, #83	; 0x53
 80088be:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80088c0:	6878      	ldr	r0, [r7, #4]
 80088c2:	f000 f879 	bl	80089b8 <RTC_EnterInitMode>
 80088c6:	4603      	mov	r3, r0
 80088c8:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 80088ca:	7bfb      	ldrb	r3, [r7, #15]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d13b      	bne.n	8008948 <HAL_RTC_Init+0xcc>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	6899      	ldr	r1, [r3, #8]
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681a      	ldr	r2, [r3, #0]
 80088da:	4b23      	ldr	r3, [pc, #140]	; (8008968 <HAL_RTC_Init+0xec>)
 80088dc:	400b      	ands	r3, r1
 80088de:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	6899      	ldr	r1, [r3, #8]
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	685a      	ldr	r2, [r3, #4]
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	691b      	ldr	r3, [r3, #16]
 80088ee:	431a      	orrs	r2, r3
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	699b      	ldr	r3, [r3, #24]
 80088f4:	431a      	orrs	r2, r3
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	430a      	orrs	r2, r1
 80088fc:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	689b      	ldr	r3, [r3, #8]
 8008902:	0419      	lsls	r1, r3, #16
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	68da      	ldr	r2, [r3, #12]
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	430a      	orrs	r2, r1
 800890e:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	f000 f881 	bl	8008a18 <RTC_ExitInitMode>
 8008916:	4603      	mov	r3, r0
 8008918:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 800891a:	7bfb      	ldrb	r3, [r7, #15]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d113      	bne.n	8008948 <HAL_RTC_Init+0xcc>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f022 0203 	bic.w	r2, r2, #3
 800892e:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	69da      	ldr	r2, [r3, #28]
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	695b      	ldr	r3, [r3, #20]
 800893e:	431a      	orrs	r2, r3
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	430a      	orrs	r2, r1
 8008946:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	22ff      	movs	r2, #255	; 0xff
 800894e:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8008950:	7bfb      	ldrb	r3, [r7, #15]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d103      	bne.n	800895e <HAL_RTC_Init+0xe2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2201      	movs	r2, #1
 800895a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800895e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008960:	4618      	mov	r0, r3
 8008962:	3710      	adds	r7, #16
 8008964:	46bd      	mov	sp, r7
 8008966:	bd80      	pop	{r7, pc}
 8008968:	ff8fffbf 	.word	0xff8fffbf

0800896c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b084      	sub	sp, #16
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	68da      	ldr	r2, [r3, #12]
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008982:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 8008984:	f7f9 fb02 	bl	8001f8c <HAL_GetTick>
 8008988:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800898a:	e009      	b.n	80089a0 <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800898c:	f7f9 fafe 	bl	8001f8c <HAL_GetTick>
 8008990:	4602      	mov	r2, r0
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	1ad3      	subs	r3, r2, r3
 8008996:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800899a:	d901      	bls.n	80089a0 <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 800899c:	2303      	movs	r3, #3
 800899e:	e007      	b.n	80089b0 <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	68db      	ldr	r3, [r3, #12]
 80089a6:	f003 0320 	and.w	r3, r3, #32
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d0ee      	beq.n	800898c <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 80089ae:	2300      	movs	r3, #0
}
 80089b0:	4618      	mov	r0, r3
 80089b2:	3710      	adds	r7, #16
 80089b4:	46bd      	mov	sp, r7
 80089b6:	bd80      	pop	{r7, pc}

080089b8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b084      	sub	sp, #16
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80089c0:	2300      	movs	r3, #0
 80089c2:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	68db      	ldr	r3, [r3, #12]
 80089ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d11d      	bne.n	8008a0e <RTC_EnterInitMode+0x56>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f04f 32ff 	mov.w	r2, #4294967295
 80089da:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80089dc:	f7f9 fad6 	bl	8001f8c <HAL_GetTick>
 80089e0:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80089e2:	e00d      	b.n	8008a00 <RTC_EnterInitMode+0x48>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80089e4:	f7f9 fad2 	bl	8001f8c <HAL_GetTick>
 80089e8:	4602      	mov	r2, r0
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	1ad3      	subs	r3, r2, r3
 80089ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80089f2:	d905      	bls.n	8008a00 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80089f4:	2303      	movs	r3, #3
 80089f6:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2203      	movs	r2, #3
 80089fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	68db      	ldr	r3, [r3, #12]
 8008a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d0ea      	beq.n	80089e4 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 8008a0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a10:	4618      	mov	r0, r3
 8008a12:	3710      	adds	r7, #16
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bd80      	pop	{r7, pc}

08008a18 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b084      	sub	sp, #16
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008a20:	2300      	movs	r3, #0
 8008a22:	73fb      	strb	r3, [r7, #15]
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);

#elif defined(RTC_ISR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 8008a24:	4b1a      	ldr	r3, [pc, #104]	; (8008a90 <RTC_ExitInitMode+0x78>)
 8008a26:	68db      	ldr	r3, [r3, #12]
 8008a28:	4a19      	ldr	r2, [pc, #100]	; (8008a90 <RTC_ExitInitMode+0x78>)
 8008a2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a2e:	60d3      	str	r3, [r2, #12]

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8008a30:	4b17      	ldr	r3, [pc, #92]	; (8008a90 <RTC_ExitInitMode+0x78>)
 8008a32:	689b      	ldr	r3, [r3, #8]
 8008a34:	f003 0320 	and.w	r3, r3, #32
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d10c      	bne.n	8008a56 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008a3c:	6878      	ldr	r0, [r7, #4]
 8008a3e:	f7ff ff95 	bl	800896c <HAL_RTC_WaitForSynchro>
 8008a42:	4603      	mov	r3, r0
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d01e      	beq.n	8008a86 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2203      	movs	r2, #3
 8008a4c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8008a50:	2303      	movs	r3, #3
 8008a52:	73fb      	strb	r3, [r7, #15]
 8008a54:	e017      	b.n	8008a86 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008a56:	4b0e      	ldr	r3, [pc, #56]	; (8008a90 <RTC_ExitInitMode+0x78>)
 8008a58:	689b      	ldr	r3, [r3, #8]
 8008a5a:	4a0d      	ldr	r2, [pc, #52]	; (8008a90 <RTC_ExitInitMode+0x78>)
 8008a5c:	f023 0320 	bic.w	r3, r3, #32
 8008a60:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	f7ff ff82 	bl	800896c <HAL_RTC_WaitForSynchro>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d005      	beq.n	8008a7a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2203      	movs	r2, #3
 8008a72:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8008a76:	2303      	movs	r3, #3
 8008a78:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008a7a:	4b05      	ldr	r3, [pc, #20]	; (8008a90 <RTC_ExitInitMode+0x78>)
 8008a7c:	689b      	ldr	r3, [r3, #8]
 8008a7e:	4a04      	ldr	r2, [pc, #16]	; (8008a90 <RTC_ExitInitMode+0x78>)
 8008a80:	f043 0320 	orr.w	r3, r3, #32
 8008a84:	6093      	str	r3, [r2, #8]
  }

  return status;
 8008a86:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a88:	4618      	mov	r0, r3
 8008a8a:	3710      	adds	r7, #16
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bd80      	pop	{r7, pc}
 8008a90:	58004000 	.word	0x58004000

08008a94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b082      	sub	sp, #8
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d101      	bne.n	8008aa6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	e049      	b.n	8008b3a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008aac:	b2db      	uxtb	r3, r3
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d106      	bne.n	8008ac0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	f000 f841 	bl	8008b42 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2202      	movs	r2, #2
 8008ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681a      	ldr	r2, [r3, #0]
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	3304      	adds	r3, #4
 8008ad0:	4619      	mov	r1, r3
 8008ad2:	4610      	mov	r0, r2
 8008ad4:	f000 f9be 	bl	8008e54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2201      	movs	r2, #1
 8008adc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2201      	movs	r2, #1
 8008ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2201      	movs	r2, #1
 8008aec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2201      	movs	r2, #1
 8008af4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2201      	movs	r2, #1
 8008afc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2201      	movs	r2, #1
 8008b04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2201      	movs	r2, #1
 8008b0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2201      	movs	r2, #1
 8008b14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2201      	movs	r2, #1
 8008b1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2201      	movs	r2, #1
 8008b24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2201      	movs	r2, #1
 8008b2c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2201      	movs	r2, #1
 8008b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008b38:	2300      	movs	r3, #0
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	3708      	adds	r7, #8
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}

08008b42 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008b42:	b480      	push	{r7}
 8008b44:	b083      	sub	sp, #12
 8008b46:	af00      	add	r7, sp, #0
 8008b48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008b4a:	bf00      	nop
 8008b4c:	370c      	adds	r7, #12
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b54:	4770      	bx	lr
	...

08008b58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008b58:	b480      	push	{r7}
 8008b5a:	b085      	sub	sp, #20
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b66:	b2db      	uxtb	r3, r3
 8008b68:	2b01      	cmp	r3, #1
 8008b6a:	d001      	beq.n	8008b70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008b6c:	2301      	movs	r3, #1
 8008b6e:	e021      	b.n	8008bb4 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2202      	movs	r2, #2
 8008b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	68da      	ldr	r2, [r3, #12]
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	f042 0201 	orr.w	r2, r2, #1
 8008b86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	689a      	ldr	r2, [r3, #8]
 8008b8e:	4b0c      	ldr	r3, [pc, #48]	; (8008bc0 <HAL_TIM_Base_Start_IT+0x68>)
 8008b90:	4013      	ands	r3, r2
 8008b92:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	2b06      	cmp	r3, #6
 8008b98:	d00b      	beq.n	8008bb2 <HAL_TIM_Base_Start_IT+0x5a>
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ba0:	d007      	beq.n	8008bb2 <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	681a      	ldr	r2, [r3, #0]
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f042 0201 	orr.w	r2, r2, #1
 8008bb0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008bb2:	2300      	movs	r3, #0
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	3714      	adds	r7, #20
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbe:	4770      	bx	lr
 8008bc0:	00010007 	.word	0x00010007

08008bc4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b082      	sub	sp, #8
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	691b      	ldr	r3, [r3, #16]
 8008bd2:	f003 0302 	and.w	r3, r3, #2
 8008bd6:	2b02      	cmp	r3, #2
 8008bd8:	d122      	bne.n	8008c20 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	68db      	ldr	r3, [r3, #12]
 8008be0:	f003 0302 	and.w	r3, r3, #2
 8008be4:	2b02      	cmp	r3, #2
 8008be6:	d11b      	bne.n	8008c20 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f06f 0202 	mvn.w	r2, #2
 8008bf0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2201      	movs	r2, #1
 8008bf6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	699b      	ldr	r3, [r3, #24]
 8008bfe:	f003 0303 	and.w	r3, r3, #3
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d003      	beq.n	8008c0e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f000 f905 	bl	8008e16 <HAL_TIM_IC_CaptureCallback>
 8008c0c:	e005      	b.n	8008c1a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f000 f8f7 	bl	8008e02 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c14:	6878      	ldr	r0, [r7, #4]
 8008c16:	f000 f908 	bl	8008e2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	691b      	ldr	r3, [r3, #16]
 8008c26:	f003 0304 	and.w	r3, r3, #4
 8008c2a:	2b04      	cmp	r3, #4
 8008c2c:	d122      	bne.n	8008c74 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	68db      	ldr	r3, [r3, #12]
 8008c34:	f003 0304 	and.w	r3, r3, #4
 8008c38:	2b04      	cmp	r3, #4
 8008c3a:	d11b      	bne.n	8008c74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	f06f 0204 	mvn.w	r2, #4
 8008c44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2202      	movs	r2, #2
 8008c4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	699b      	ldr	r3, [r3, #24]
 8008c52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d003      	beq.n	8008c62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f000 f8db 	bl	8008e16 <HAL_TIM_IC_CaptureCallback>
 8008c60:	e005      	b.n	8008c6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	f000 f8cd 	bl	8008e02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f000 f8de 	bl	8008e2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	2200      	movs	r2, #0
 8008c72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	691b      	ldr	r3, [r3, #16]
 8008c7a:	f003 0308 	and.w	r3, r3, #8
 8008c7e:	2b08      	cmp	r3, #8
 8008c80:	d122      	bne.n	8008cc8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	68db      	ldr	r3, [r3, #12]
 8008c88:	f003 0308 	and.w	r3, r3, #8
 8008c8c:	2b08      	cmp	r3, #8
 8008c8e:	d11b      	bne.n	8008cc8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f06f 0208 	mvn.w	r2, #8
 8008c98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2204      	movs	r2, #4
 8008c9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	69db      	ldr	r3, [r3, #28]
 8008ca6:	f003 0303 	and.w	r3, r3, #3
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d003      	beq.n	8008cb6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008cae:	6878      	ldr	r0, [r7, #4]
 8008cb0:	f000 f8b1 	bl	8008e16 <HAL_TIM_IC_CaptureCallback>
 8008cb4:	e005      	b.n	8008cc2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	f000 f8a3 	bl	8008e02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	f000 f8b4 	bl	8008e2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	691b      	ldr	r3, [r3, #16]
 8008cce:	f003 0310 	and.w	r3, r3, #16
 8008cd2:	2b10      	cmp	r3, #16
 8008cd4:	d122      	bne.n	8008d1c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	68db      	ldr	r3, [r3, #12]
 8008cdc:	f003 0310 	and.w	r3, r3, #16
 8008ce0:	2b10      	cmp	r3, #16
 8008ce2:	d11b      	bne.n	8008d1c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f06f 0210 	mvn.w	r2, #16
 8008cec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2208      	movs	r2, #8
 8008cf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	69db      	ldr	r3, [r3, #28]
 8008cfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d003      	beq.n	8008d0a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	f000 f887 	bl	8008e16 <HAL_TIM_IC_CaptureCallback>
 8008d08:	e005      	b.n	8008d16 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f000 f879 	bl	8008e02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	f000 f88a 	bl	8008e2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2200      	movs	r2, #0
 8008d1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	691b      	ldr	r3, [r3, #16]
 8008d22:	f003 0301 	and.w	r3, r3, #1
 8008d26:	2b01      	cmp	r3, #1
 8008d28:	d10e      	bne.n	8008d48 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	68db      	ldr	r3, [r3, #12]
 8008d30:	f003 0301 	and.w	r3, r3, #1
 8008d34:	2b01      	cmp	r3, #1
 8008d36:	d107      	bne.n	8008d48 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	f06f 0201 	mvn.w	r2, #1
 8008d40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008d42:	6878      	ldr	r0, [r7, #4]
 8008d44:	f7f8 f9a0 	bl	8001088 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	691b      	ldr	r3, [r3, #16]
 8008d4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d52:	2b80      	cmp	r3, #128	; 0x80
 8008d54:	d10e      	bne.n	8008d74 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	68db      	ldr	r3, [r3, #12]
 8008d5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d60:	2b80      	cmp	r3, #128	; 0x80
 8008d62:	d107      	bne.n	8008d74 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008d6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	f000 f914 	bl	8008f9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	691b      	ldr	r3, [r3, #16]
 8008d7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d82:	d10e      	bne.n	8008da2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	68db      	ldr	r3, [r3, #12]
 8008d8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d8e:	2b80      	cmp	r3, #128	; 0x80
 8008d90:	d107      	bne.n	8008da2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008d9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008d9c:	6878      	ldr	r0, [r7, #4]
 8008d9e:	f000 f907 	bl	8008fb0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	691b      	ldr	r3, [r3, #16]
 8008da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dac:	2b40      	cmp	r3, #64	; 0x40
 8008dae:	d10e      	bne.n	8008dce <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	68db      	ldr	r3, [r3, #12]
 8008db6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dba:	2b40      	cmp	r3, #64	; 0x40
 8008dbc:	d107      	bne.n	8008dce <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008dc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f000 f838 	bl	8008e3e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	691b      	ldr	r3, [r3, #16]
 8008dd4:	f003 0320 	and.w	r3, r3, #32
 8008dd8:	2b20      	cmp	r3, #32
 8008dda:	d10e      	bne.n	8008dfa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	68db      	ldr	r3, [r3, #12]
 8008de2:	f003 0320 	and.w	r3, r3, #32
 8008de6:	2b20      	cmp	r3, #32
 8008de8:	d107      	bne.n	8008dfa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f06f 0220 	mvn.w	r2, #32
 8008df2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008df4:	6878      	ldr	r0, [r7, #4]
 8008df6:	f000 f8c7 	bl	8008f88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008dfa:	bf00      	nop
 8008dfc:	3708      	adds	r7, #8
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bd80      	pop	{r7, pc}

08008e02 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008e02:	b480      	push	{r7}
 8008e04:	b083      	sub	sp, #12
 8008e06:	af00      	add	r7, sp, #0
 8008e08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008e0a:	bf00      	nop
 8008e0c:	370c      	adds	r7, #12
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e14:	4770      	bx	lr

08008e16 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008e16:	b480      	push	{r7}
 8008e18:	b083      	sub	sp, #12
 8008e1a:	af00      	add	r7, sp, #0
 8008e1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008e1e:	bf00      	nop
 8008e20:	370c      	adds	r7, #12
 8008e22:	46bd      	mov	sp, r7
 8008e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e28:	4770      	bx	lr

08008e2a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008e2a:	b480      	push	{r7}
 8008e2c:	b083      	sub	sp, #12
 8008e2e:	af00      	add	r7, sp, #0
 8008e30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008e32:	bf00      	nop
 8008e34:	370c      	adds	r7, #12
 8008e36:	46bd      	mov	sp, r7
 8008e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3c:	4770      	bx	lr

08008e3e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008e3e:	b480      	push	{r7}
 8008e40:	b083      	sub	sp, #12
 8008e42:	af00      	add	r7, sp, #0
 8008e44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008e46:	bf00      	nop
 8008e48:	370c      	adds	r7, #12
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e50:	4770      	bx	lr
	...

08008e54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008e54:	b480      	push	{r7}
 8008e56:	b085      	sub	sp, #20
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
 8008e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	4a40      	ldr	r2, [pc, #256]	; (8008f68 <TIM_Base_SetConfig+0x114>)
 8008e68:	4293      	cmp	r3, r2
 8008e6a:	d013      	beq.n	8008e94 <TIM_Base_SetConfig+0x40>
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e72:	d00f      	beq.n	8008e94 <TIM_Base_SetConfig+0x40>
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	4a3d      	ldr	r2, [pc, #244]	; (8008f6c <TIM_Base_SetConfig+0x118>)
 8008e78:	4293      	cmp	r3, r2
 8008e7a:	d00b      	beq.n	8008e94 <TIM_Base_SetConfig+0x40>
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	4a3c      	ldr	r2, [pc, #240]	; (8008f70 <TIM_Base_SetConfig+0x11c>)
 8008e80:	4293      	cmp	r3, r2
 8008e82:	d007      	beq.n	8008e94 <TIM_Base_SetConfig+0x40>
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	4a3b      	ldr	r2, [pc, #236]	; (8008f74 <TIM_Base_SetConfig+0x120>)
 8008e88:	4293      	cmp	r3, r2
 8008e8a:	d003      	beq.n	8008e94 <TIM_Base_SetConfig+0x40>
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	4a3a      	ldr	r2, [pc, #232]	; (8008f78 <TIM_Base_SetConfig+0x124>)
 8008e90:	4293      	cmp	r3, r2
 8008e92:	d108      	bne.n	8008ea6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	685b      	ldr	r3, [r3, #4]
 8008ea0:	68fa      	ldr	r2, [r7, #12]
 8008ea2:	4313      	orrs	r3, r2
 8008ea4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	4a2f      	ldr	r2, [pc, #188]	; (8008f68 <TIM_Base_SetConfig+0x114>)
 8008eaa:	4293      	cmp	r3, r2
 8008eac:	d01f      	beq.n	8008eee <TIM_Base_SetConfig+0x9a>
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008eb4:	d01b      	beq.n	8008eee <TIM_Base_SetConfig+0x9a>
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	4a2c      	ldr	r2, [pc, #176]	; (8008f6c <TIM_Base_SetConfig+0x118>)
 8008eba:	4293      	cmp	r3, r2
 8008ebc:	d017      	beq.n	8008eee <TIM_Base_SetConfig+0x9a>
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	4a2b      	ldr	r2, [pc, #172]	; (8008f70 <TIM_Base_SetConfig+0x11c>)
 8008ec2:	4293      	cmp	r3, r2
 8008ec4:	d013      	beq.n	8008eee <TIM_Base_SetConfig+0x9a>
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	4a2a      	ldr	r2, [pc, #168]	; (8008f74 <TIM_Base_SetConfig+0x120>)
 8008eca:	4293      	cmp	r3, r2
 8008ecc:	d00f      	beq.n	8008eee <TIM_Base_SetConfig+0x9a>
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	4a29      	ldr	r2, [pc, #164]	; (8008f78 <TIM_Base_SetConfig+0x124>)
 8008ed2:	4293      	cmp	r3, r2
 8008ed4:	d00b      	beq.n	8008eee <TIM_Base_SetConfig+0x9a>
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	4a28      	ldr	r2, [pc, #160]	; (8008f7c <TIM_Base_SetConfig+0x128>)
 8008eda:	4293      	cmp	r3, r2
 8008edc:	d007      	beq.n	8008eee <TIM_Base_SetConfig+0x9a>
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	4a27      	ldr	r2, [pc, #156]	; (8008f80 <TIM_Base_SetConfig+0x12c>)
 8008ee2:	4293      	cmp	r3, r2
 8008ee4:	d003      	beq.n	8008eee <TIM_Base_SetConfig+0x9a>
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	4a26      	ldr	r2, [pc, #152]	; (8008f84 <TIM_Base_SetConfig+0x130>)
 8008eea:	4293      	cmp	r3, r2
 8008eec:	d108      	bne.n	8008f00 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ef4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	68db      	ldr	r3, [r3, #12]
 8008efa:	68fa      	ldr	r2, [r7, #12]
 8008efc:	4313      	orrs	r3, r2
 8008efe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	695b      	ldr	r3, [r3, #20]
 8008f0a:	4313      	orrs	r3, r2
 8008f0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	68fa      	ldr	r2, [r7, #12]
 8008f12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	689a      	ldr	r2, [r3, #8]
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	681a      	ldr	r2, [r3, #0]
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	4a10      	ldr	r2, [pc, #64]	; (8008f68 <TIM_Base_SetConfig+0x114>)
 8008f28:	4293      	cmp	r3, r2
 8008f2a:	d00f      	beq.n	8008f4c <TIM_Base_SetConfig+0xf8>
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	4a12      	ldr	r2, [pc, #72]	; (8008f78 <TIM_Base_SetConfig+0x124>)
 8008f30:	4293      	cmp	r3, r2
 8008f32:	d00b      	beq.n	8008f4c <TIM_Base_SetConfig+0xf8>
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	4a11      	ldr	r2, [pc, #68]	; (8008f7c <TIM_Base_SetConfig+0x128>)
 8008f38:	4293      	cmp	r3, r2
 8008f3a:	d007      	beq.n	8008f4c <TIM_Base_SetConfig+0xf8>
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	4a10      	ldr	r2, [pc, #64]	; (8008f80 <TIM_Base_SetConfig+0x12c>)
 8008f40:	4293      	cmp	r3, r2
 8008f42:	d003      	beq.n	8008f4c <TIM_Base_SetConfig+0xf8>
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	4a0f      	ldr	r2, [pc, #60]	; (8008f84 <TIM_Base_SetConfig+0x130>)
 8008f48:	4293      	cmp	r3, r2
 8008f4a:	d103      	bne.n	8008f54 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	691a      	ldr	r2, [r3, #16]
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2201      	movs	r2, #1
 8008f58:	615a      	str	r2, [r3, #20]
}
 8008f5a:	bf00      	nop
 8008f5c:	3714      	adds	r7, #20
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f64:	4770      	bx	lr
 8008f66:	bf00      	nop
 8008f68:	40010000 	.word	0x40010000
 8008f6c:	40000400 	.word	0x40000400
 8008f70:	40000800 	.word	0x40000800
 8008f74:	40000c00 	.word	0x40000c00
 8008f78:	40010400 	.word	0x40010400
 8008f7c:	40014000 	.word	0x40014000
 8008f80:	40014400 	.word	0x40014400
 8008f84:	40014800 	.word	0x40014800

08008f88 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008f88:	b480      	push	{r7}
 8008f8a:	b083      	sub	sp, #12
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008f90:	bf00      	nop
 8008f92:	370c      	adds	r7, #12
 8008f94:	46bd      	mov	sp, r7
 8008f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9a:	4770      	bx	lr

08008f9c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008f9c:	b480      	push	{r7}
 8008f9e:	b083      	sub	sp, #12
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008fa4:	bf00      	nop
 8008fa6:	370c      	adds	r7, #12
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fae:	4770      	bx	lr

08008fb0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	b083      	sub	sp, #12
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008fb8:	bf00      	nop
 8008fba:	370c      	adds	r7, #12
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc2:	4770      	bx	lr

08008fc4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b082      	sub	sp, #8
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d101      	bne.n	8008fd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	e042      	b.n	800905c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d106      	bne.n	8008fee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008fe8:	6878      	ldr	r0, [r7, #4]
 8008fea:	f7f8 fb8f 	bl	800170c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	2224      	movs	r2, #36	; 0x24
 8008ff2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	681a      	ldr	r2, [r3, #0]
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f022 0201 	bic.w	r2, r2, #1
 8009004:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	f000 f8c2 	bl	8009190 <UART_SetConfig>
 800900c:	4603      	mov	r3, r0
 800900e:	2b01      	cmp	r3, #1
 8009010:	d101      	bne.n	8009016 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009012:	2301      	movs	r3, #1
 8009014:	e022      	b.n	800905c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800901a:	2b00      	cmp	r3, #0
 800901c:	d002      	beq.n	8009024 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f000 fe66 	bl	8009cf0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	685a      	ldr	r2, [r3, #4]
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009032:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	689a      	ldr	r2, [r3, #8]
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009042:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	681a      	ldr	r2, [r3, #0]
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f042 0201 	orr.w	r2, r2, #1
 8009052:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f000 feed 	bl	8009e34 <UART_CheckIdleState>
 800905a:	4603      	mov	r3, r0
}
 800905c:	4618      	mov	r0, r3
 800905e:	3708      	adds	r7, #8
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}

08009064 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b08a      	sub	sp, #40	; 0x28
 8009068:	af02      	add	r7, sp, #8
 800906a:	60f8      	str	r0, [r7, #12]
 800906c:	60b9      	str	r1, [r7, #8]
 800906e:	603b      	str	r3, [r7, #0]
 8009070:	4613      	mov	r3, r2
 8009072:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800907a:	2b20      	cmp	r3, #32
 800907c:	f040 8083 	bne.w	8009186 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8009080:	68bb      	ldr	r3, [r7, #8]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d002      	beq.n	800908c <HAL_UART_Transmit+0x28>
 8009086:	88fb      	ldrh	r3, [r7, #6]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d101      	bne.n	8009090 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800908c:	2301      	movs	r3, #1
 800908e:	e07b      	b.n	8009188 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009096:	2b01      	cmp	r3, #1
 8009098:	d101      	bne.n	800909e <HAL_UART_Transmit+0x3a>
 800909a:	2302      	movs	r3, #2
 800909c:	e074      	b.n	8009188 <HAL_UART_Transmit+0x124>
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	2201      	movs	r2, #1
 80090a2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	2200      	movs	r2, #0
 80090aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	2221      	movs	r2, #33	; 0x21
 80090b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80090b6:	f7f8 ff69 	bl	8001f8c <HAL_GetTick>
 80090ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	88fa      	ldrh	r2, [r7, #6]
 80090c0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	88fa      	ldrh	r2, [r7, #6]
 80090c8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	689b      	ldr	r3, [r3, #8]
 80090d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090d4:	d108      	bne.n	80090e8 <HAL_UART_Transmit+0x84>
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	691b      	ldr	r3, [r3, #16]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d104      	bne.n	80090e8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80090de:	2300      	movs	r3, #0
 80090e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80090e2:	68bb      	ldr	r3, [r7, #8]
 80090e4:	61bb      	str	r3, [r7, #24]
 80090e6:	e003      	b.n	80090f0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80090e8:	68bb      	ldr	r3, [r7, #8]
 80090ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80090ec:	2300      	movs	r3, #0
 80090ee:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	2200      	movs	r2, #0
 80090f4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 80090f8:	e02c      	b.n	8009154 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	9300      	str	r3, [sp, #0]
 80090fe:	697b      	ldr	r3, [r7, #20]
 8009100:	2200      	movs	r2, #0
 8009102:	2180      	movs	r1, #128	; 0x80
 8009104:	68f8      	ldr	r0, [r7, #12]
 8009106:	f000 fedd 	bl	8009ec4 <UART_WaitOnFlagUntilTimeout>
 800910a:	4603      	mov	r3, r0
 800910c:	2b00      	cmp	r3, #0
 800910e:	d001      	beq.n	8009114 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8009110:	2303      	movs	r3, #3
 8009112:	e039      	b.n	8009188 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8009114:	69fb      	ldr	r3, [r7, #28]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d10b      	bne.n	8009132 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800911a:	69bb      	ldr	r3, [r7, #24]
 800911c:	881b      	ldrh	r3, [r3, #0]
 800911e:	461a      	mov	r2, r3
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009128:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800912a:	69bb      	ldr	r3, [r7, #24]
 800912c:	3302      	adds	r3, #2
 800912e:	61bb      	str	r3, [r7, #24]
 8009130:	e007      	b.n	8009142 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009132:	69fb      	ldr	r3, [r7, #28]
 8009134:	781a      	ldrb	r2, [r3, #0]
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800913c:	69fb      	ldr	r3, [r7, #28]
 800913e:	3301      	adds	r3, #1
 8009140:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009148:	b29b      	uxth	r3, r3
 800914a:	3b01      	subs	r3, #1
 800914c:	b29a      	uxth	r2, r3
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800915a:	b29b      	uxth	r3, r3
 800915c:	2b00      	cmp	r3, #0
 800915e:	d1cc      	bne.n	80090fa <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	9300      	str	r3, [sp, #0]
 8009164:	697b      	ldr	r3, [r7, #20]
 8009166:	2200      	movs	r2, #0
 8009168:	2140      	movs	r1, #64	; 0x40
 800916a:	68f8      	ldr	r0, [r7, #12]
 800916c:	f000 feaa 	bl	8009ec4 <UART_WaitOnFlagUntilTimeout>
 8009170:	4603      	mov	r3, r0
 8009172:	2b00      	cmp	r3, #0
 8009174:	d001      	beq.n	800917a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8009176:	2303      	movs	r3, #3
 8009178:	e006      	b.n	8009188 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	2220      	movs	r2, #32
 800917e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8009182:	2300      	movs	r3, #0
 8009184:	e000      	b.n	8009188 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8009186:	2302      	movs	r3, #2
  }
}
 8009188:	4618      	mov	r0, r3
 800918a:	3720      	adds	r7, #32
 800918c:	46bd      	mov	sp, r7
 800918e:	bd80      	pop	{r7, pc}

08009190 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009190:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8009194:	b08e      	sub	sp, #56	; 0x38
 8009196:	af00      	add	r7, sp, #0
 8009198:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800919a:	2300      	movs	r3, #0
 800919c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	689a      	ldr	r2, [r3, #8]
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	691b      	ldr	r3, [r3, #16]
 80091a8:	431a      	orrs	r2, r3
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	695b      	ldr	r3, [r3, #20]
 80091ae:	431a      	orrs	r2, r3
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	69db      	ldr	r3, [r3, #28]
 80091b4:	4313      	orrs	r3, r2
 80091b6:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80091bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80091be:	4313      	orrs	r3, r2
 80091c0:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	681a      	ldr	r2, [r3, #0]
 80091c8:	4bc1      	ldr	r3, [pc, #772]	; (80094d0 <UART_SetConfig+0x340>)
 80091ca:	4013      	ands	r3, r2
 80091cc:	687a      	ldr	r2, [r7, #4]
 80091ce:	6812      	ldr	r2, [r2, #0]
 80091d0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80091d2:	430b      	orrs	r3, r1
 80091d4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	685b      	ldr	r3, [r3, #4]
 80091dc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	68da      	ldr	r2, [r3, #12]
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	430a      	orrs	r2, r1
 80091ea:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	699b      	ldr	r3, [r3, #24]
 80091f0:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	4ab7      	ldr	r2, [pc, #732]	; (80094d4 <UART_SetConfig+0x344>)
 80091f8:	4293      	cmp	r3, r2
 80091fa:	d004      	beq.n	8009206 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	6a1b      	ldr	r3, [r3, #32]
 8009200:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009202:	4313      	orrs	r3, r2
 8009204:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	689a      	ldr	r2, [r3, #8]
 800920c:	4bb2      	ldr	r3, [pc, #712]	; (80094d8 <UART_SetConfig+0x348>)
 800920e:	4013      	ands	r3, r2
 8009210:	687a      	ldr	r2, [r7, #4]
 8009212:	6812      	ldr	r2, [r2, #0]
 8009214:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009216:	430b      	orrs	r3, r1
 8009218:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009220:	f023 010f 	bic.w	r1, r3, #15
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	430a      	orrs	r2, r1
 800922e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	4aa9      	ldr	r2, [pc, #676]	; (80094dc <UART_SetConfig+0x34c>)
 8009236:	4293      	cmp	r3, r2
 8009238:	d177      	bne.n	800932a <UART_SetConfig+0x19a>
 800923a:	4ba9      	ldr	r3, [pc, #676]	; (80094e0 <UART_SetConfig+0x350>)
 800923c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800923e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009242:	2b28      	cmp	r3, #40	; 0x28
 8009244:	d86c      	bhi.n	8009320 <UART_SetConfig+0x190>
 8009246:	a201      	add	r2, pc, #4	; (adr r2, 800924c <UART_SetConfig+0xbc>)
 8009248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800924c:	080092f1 	.word	0x080092f1
 8009250:	08009321 	.word	0x08009321
 8009254:	08009321 	.word	0x08009321
 8009258:	08009321 	.word	0x08009321
 800925c:	08009321 	.word	0x08009321
 8009260:	08009321 	.word	0x08009321
 8009264:	08009321 	.word	0x08009321
 8009268:	08009321 	.word	0x08009321
 800926c:	080092f9 	.word	0x080092f9
 8009270:	08009321 	.word	0x08009321
 8009274:	08009321 	.word	0x08009321
 8009278:	08009321 	.word	0x08009321
 800927c:	08009321 	.word	0x08009321
 8009280:	08009321 	.word	0x08009321
 8009284:	08009321 	.word	0x08009321
 8009288:	08009321 	.word	0x08009321
 800928c:	08009301 	.word	0x08009301
 8009290:	08009321 	.word	0x08009321
 8009294:	08009321 	.word	0x08009321
 8009298:	08009321 	.word	0x08009321
 800929c:	08009321 	.word	0x08009321
 80092a0:	08009321 	.word	0x08009321
 80092a4:	08009321 	.word	0x08009321
 80092a8:	08009321 	.word	0x08009321
 80092ac:	08009309 	.word	0x08009309
 80092b0:	08009321 	.word	0x08009321
 80092b4:	08009321 	.word	0x08009321
 80092b8:	08009321 	.word	0x08009321
 80092bc:	08009321 	.word	0x08009321
 80092c0:	08009321 	.word	0x08009321
 80092c4:	08009321 	.word	0x08009321
 80092c8:	08009321 	.word	0x08009321
 80092cc:	08009311 	.word	0x08009311
 80092d0:	08009321 	.word	0x08009321
 80092d4:	08009321 	.word	0x08009321
 80092d8:	08009321 	.word	0x08009321
 80092dc:	08009321 	.word	0x08009321
 80092e0:	08009321 	.word	0x08009321
 80092e4:	08009321 	.word	0x08009321
 80092e8:	08009321 	.word	0x08009321
 80092ec:	08009319 	.word	0x08009319
 80092f0:	2301      	movs	r3, #1
 80092f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092f6:	e233      	b.n	8009760 <UART_SetConfig+0x5d0>
 80092f8:	2304      	movs	r3, #4
 80092fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092fe:	e22f      	b.n	8009760 <UART_SetConfig+0x5d0>
 8009300:	2308      	movs	r3, #8
 8009302:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009306:	e22b      	b.n	8009760 <UART_SetConfig+0x5d0>
 8009308:	2310      	movs	r3, #16
 800930a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800930e:	e227      	b.n	8009760 <UART_SetConfig+0x5d0>
 8009310:	2320      	movs	r3, #32
 8009312:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009316:	e223      	b.n	8009760 <UART_SetConfig+0x5d0>
 8009318:	2340      	movs	r3, #64	; 0x40
 800931a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800931e:	e21f      	b.n	8009760 <UART_SetConfig+0x5d0>
 8009320:	2380      	movs	r3, #128	; 0x80
 8009322:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009326:	bf00      	nop
 8009328:	e21a      	b.n	8009760 <UART_SetConfig+0x5d0>
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	4a6d      	ldr	r2, [pc, #436]	; (80094e4 <UART_SetConfig+0x354>)
 8009330:	4293      	cmp	r3, r2
 8009332:	d132      	bne.n	800939a <UART_SetConfig+0x20a>
 8009334:	4b6a      	ldr	r3, [pc, #424]	; (80094e0 <UART_SetConfig+0x350>)
 8009336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009338:	f003 0307 	and.w	r3, r3, #7
 800933c:	2b05      	cmp	r3, #5
 800933e:	d827      	bhi.n	8009390 <UART_SetConfig+0x200>
 8009340:	a201      	add	r2, pc, #4	; (adr r2, 8009348 <UART_SetConfig+0x1b8>)
 8009342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009346:	bf00      	nop
 8009348:	08009361 	.word	0x08009361
 800934c:	08009369 	.word	0x08009369
 8009350:	08009371 	.word	0x08009371
 8009354:	08009379 	.word	0x08009379
 8009358:	08009381 	.word	0x08009381
 800935c:	08009389 	.word	0x08009389
 8009360:	2300      	movs	r3, #0
 8009362:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009366:	e1fb      	b.n	8009760 <UART_SetConfig+0x5d0>
 8009368:	2304      	movs	r3, #4
 800936a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800936e:	e1f7      	b.n	8009760 <UART_SetConfig+0x5d0>
 8009370:	2308      	movs	r3, #8
 8009372:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009376:	e1f3      	b.n	8009760 <UART_SetConfig+0x5d0>
 8009378:	2310      	movs	r3, #16
 800937a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800937e:	e1ef      	b.n	8009760 <UART_SetConfig+0x5d0>
 8009380:	2320      	movs	r3, #32
 8009382:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009386:	e1eb      	b.n	8009760 <UART_SetConfig+0x5d0>
 8009388:	2340      	movs	r3, #64	; 0x40
 800938a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800938e:	e1e7      	b.n	8009760 <UART_SetConfig+0x5d0>
 8009390:	2380      	movs	r3, #128	; 0x80
 8009392:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009396:	bf00      	nop
 8009398:	e1e2      	b.n	8009760 <UART_SetConfig+0x5d0>
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	4a52      	ldr	r2, [pc, #328]	; (80094e8 <UART_SetConfig+0x358>)
 80093a0:	4293      	cmp	r3, r2
 80093a2:	d132      	bne.n	800940a <UART_SetConfig+0x27a>
 80093a4:	4b4e      	ldr	r3, [pc, #312]	; (80094e0 <UART_SetConfig+0x350>)
 80093a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093a8:	f003 0307 	and.w	r3, r3, #7
 80093ac:	2b05      	cmp	r3, #5
 80093ae:	d827      	bhi.n	8009400 <UART_SetConfig+0x270>
 80093b0:	a201      	add	r2, pc, #4	; (adr r2, 80093b8 <UART_SetConfig+0x228>)
 80093b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093b6:	bf00      	nop
 80093b8:	080093d1 	.word	0x080093d1
 80093bc:	080093d9 	.word	0x080093d9
 80093c0:	080093e1 	.word	0x080093e1
 80093c4:	080093e9 	.word	0x080093e9
 80093c8:	080093f1 	.word	0x080093f1
 80093cc:	080093f9 	.word	0x080093f9
 80093d0:	2300      	movs	r3, #0
 80093d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093d6:	e1c3      	b.n	8009760 <UART_SetConfig+0x5d0>
 80093d8:	2304      	movs	r3, #4
 80093da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093de:	e1bf      	b.n	8009760 <UART_SetConfig+0x5d0>
 80093e0:	2308      	movs	r3, #8
 80093e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093e6:	e1bb      	b.n	8009760 <UART_SetConfig+0x5d0>
 80093e8:	2310      	movs	r3, #16
 80093ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093ee:	e1b7      	b.n	8009760 <UART_SetConfig+0x5d0>
 80093f0:	2320      	movs	r3, #32
 80093f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093f6:	e1b3      	b.n	8009760 <UART_SetConfig+0x5d0>
 80093f8:	2340      	movs	r3, #64	; 0x40
 80093fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093fe:	e1af      	b.n	8009760 <UART_SetConfig+0x5d0>
 8009400:	2380      	movs	r3, #128	; 0x80
 8009402:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009406:	bf00      	nop
 8009408:	e1aa      	b.n	8009760 <UART_SetConfig+0x5d0>
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	4a37      	ldr	r2, [pc, #220]	; (80094ec <UART_SetConfig+0x35c>)
 8009410:	4293      	cmp	r3, r2
 8009412:	d132      	bne.n	800947a <UART_SetConfig+0x2ea>
 8009414:	4b32      	ldr	r3, [pc, #200]	; (80094e0 <UART_SetConfig+0x350>)
 8009416:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009418:	f003 0307 	and.w	r3, r3, #7
 800941c:	2b05      	cmp	r3, #5
 800941e:	d827      	bhi.n	8009470 <UART_SetConfig+0x2e0>
 8009420:	a201      	add	r2, pc, #4	; (adr r2, 8009428 <UART_SetConfig+0x298>)
 8009422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009426:	bf00      	nop
 8009428:	08009441 	.word	0x08009441
 800942c:	08009449 	.word	0x08009449
 8009430:	08009451 	.word	0x08009451
 8009434:	08009459 	.word	0x08009459
 8009438:	08009461 	.word	0x08009461
 800943c:	08009469 	.word	0x08009469
 8009440:	2300      	movs	r3, #0
 8009442:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009446:	e18b      	b.n	8009760 <UART_SetConfig+0x5d0>
 8009448:	2304      	movs	r3, #4
 800944a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800944e:	e187      	b.n	8009760 <UART_SetConfig+0x5d0>
 8009450:	2308      	movs	r3, #8
 8009452:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009456:	e183      	b.n	8009760 <UART_SetConfig+0x5d0>
 8009458:	2310      	movs	r3, #16
 800945a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800945e:	e17f      	b.n	8009760 <UART_SetConfig+0x5d0>
 8009460:	2320      	movs	r3, #32
 8009462:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009466:	e17b      	b.n	8009760 <UART_SetConfig+0x5d0>
 8009468:	2340      	movs	r3, #64	; 0x40
 800946a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800946e:	e177      	b.n	8009760 <UART_SetConfig+0x5d0>
 8009470:	2380      	movs	r3, #128	; 0x80
 8009472:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009476:	bf00      	nop
 8009478:	e172      	b.n	8009760 <UART_SetConfig+0x5d0>
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	4a1c      	ldr	r2, [pc, #112]	; (80094f0 <UART_SetConfig+0x360>)
 8009480:	4293      	cmp	r3, r2
 8009482:	d144      	bne.n	800950e <UART_SetConfig+0x37e>
 8009484:	4b16      	ldr	r3, [pc, #88]	; (80094e0 <UART_SetConfig+0x350>)
 8009486:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009488:	f003 0307 	and.w	r3, r3, #7
 800948c:	2b05      	cmp	r3, #5
 800948e:	d839      	bhi.n	8009504 <UART_SetConfig+0x374>
 8009490:	a201      	add	r2, pc, #4	; (adr r2, 8009498 <UART_SetConfig+0x308>)
 8009492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009496:	bf00      	nop
 8009498:	080094b1 	.word	0x080094b1
 800949c:	080094b9 	.word	0x080094b9
 80094a0:	080094c1 	.word	0x080094c1
 80094a4:	080094c9 	.word	0x080094c9
 80094a8:	080094f5 	.word	0x080094f5
 80094ac:	080094fd 	.word	0x080094fd
 80094b0:	2300      	movs	r3, #0
 80094b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094b6:	e153      	b.n	8009760 <UART_SetConfig+0x5d0>
 80094b8:	2304      	movs	r3, #4
 80094ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094be:	e14f      	b.n	8009760 <UART_SetConfig+0x5d0>
 80094c0:	2308      	movs	r3, #8
 80094c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094c6:	e14b      	b.n	8009760 <UART_SetConfig+0x5d0>
 80094c8:	2310      	movs	r3, #16
 80094ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094ce:	e147      	b.n	8009760 <UART_SetConfig+0x5d0>
 80094d0:	cfff69f3 	.word	0xcfff69f3
 80094d4:	58000c00 	.word	0x58000c00
 80094d8:	11fff4ff 	.word	0x11fff4ff
 80094dc:	40011000 	.word	0x40011000
 80094e0:	58024400 	.word	0x58024400
 80094e4:	40004400 	.word	0x40004400
 80094e8:	40004800 	.word	0x40004800
 80094ec:	40004c00 	.word	0x40004c00
 80094f0:	40005000 	.word	0x40005000
 80094f4:	2320      	movs	r3, #32
 80094f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094fa:	e131      	b.n	8009760 <UART_SetConfig+0x5d0>
 80094fc:	2340      	movs	r3, #64	; 0x40
 80094fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009502:	e12d      	b.n	8009760 <UART_SetConfig+0x5d0>
 8009504:	2380      	movs	r3, #128	; 0x80
 8009506:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800950a:	bf00      	nop
 800950c:	e128      	b.n	8009760 <UART_SetConfig+0x5d0>
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	4ab6      	ldr	r2, [pc, #728]	; (80097ec <UART_SetConfig+0x65c>)
 8009514:	4293      	cmp	r3, r2
 8009516:	d178      	bne.n	800960a <UART_SetConfig+0x47a>
 8009518:	4bb5      	ldr	r3, [pc, #724]	; (80097f0 <UART_SetConfig+0x660>)
 800951a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800951c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009520:	2b28      	cmp	r3, #40	; 0x28
 8009522:	d86d      	bhi.n	8009600 <UART_SetConfig+0x470>
 8009524:	a201      	add	r2, pc, #4	; (adr r2, 800952c <UART_SetConfig+0x39c>)
 8009526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800952a:	bf00      	nop
 800952c:	080095d1 	.word	0x080095d1
 8009530:	08009601 	.word	0x08009601
 8009534:	08009601 	.word	0x08009601
 8009538:	08009601 	.word	0x08009601
 800953c:	08009601 	.word	0x08009601
 8009540:	08009601 	.word	0x08009601
 8009544:	08009601 	.word	0x08009601
 8009548:	08009601 	.word	0x08009601
 800954c:	080095d9 	.word	0x080095d9
 8009550:	08009601 	.word	0x08009601
 8009554:	08009601 	.word	0x08009601
 8009558:	08009601 	.word	0x08009601
 800955c:	08009601 	.word	0x08009601
 8009560:	08009601 	.word	0x08009601
 8009564:	08009601 	.word	0x08009601
 8009568:	08009601 	.word	0x08009601
 800956c:	080095e1 	.word	0x080095e1
 8009570:	08009601 	.word	0x08009601
 8009574:	08009601 	.word	0x08009601
 8009578:	08009601 	.word	0x08009601
 800957c:	08009601 	.word	0x08009601
 8009580:	08009601 	.word	0x08009601
 8009584:	08009601 	.word	0x08009601
 8009588:	08009601 	.word	0x08009601
 800958c:	080095e9 	.word	0x080095e9
 8009590:	08009601 	.word	0x08009601
 8009594:	08009601 	.word	0x08009601
 8009598:	08009601 	.word	0x08009601
 800959c:	08009601 	.word	0x08009601
 80095a0:	08009601 	.word	0x08009601
 80095a4:	08009601 	.word	0x08009601
 80095a8:	08009601 	.word	0x08009601
 80095ac:	080095f1 	.word	0x080095f1
 80095b0:	08009601 	.word	0x08009601
 80095b4:	08009601 	.word	0x08009601
 80095b8:	08009601 	.word	0x08009601
 80095bc:	08009601 	.word	0x08009601
 80095c0:	08009601 	.word	0x08009601
 80095c4:	08009601 	.word	0x08009601
 80095c8:	08009601 	.word	0x08009601
 80095cc:	080095f9 	.word	0x080095f9
 80095d0:	2301      	movs	r3, #1
 80095d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095d6:	e0c3      	b.n	8009760 <UART_SetConfig+0x5d0>
 80095d8:	2304      	movs	r3, #4
 80095da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095de:	e0bf      	b.n	8009760 <UART_SetConfig+0x5d0>
 80095e0:	2308      	movs	r3, #8
 80095e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095e6:	e0bb      	b.n	8009760 <UART_SetConfig+0x5d0>
 80095e8:	2310      	movs	r3, #16
 80095ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095ee:	e0b7      	b.n	8009760 <UART_SetConfig+0x5d0>
 80095f0:	2320      	movs	r3, #32
 80095f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095f6:	e0b3      	b.n	8009760 <UART_SetConfig+0x5d0>
 80095f8:	2340      	movs	r3, #64	; 0x40
 80095fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095fe:	e0af      	b.n	8009760 <UART_SetConfig+0x5d0>
 8009600:	2380      	movs	r3, #128	; 0x80
 8009602:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009606:	bf00      	nop
 8009608:	e0aa      	b.n	8009760 <UART_SetConfig+0x5d0>
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	4a79      	ldr	r2, [pc, #484]	; (80097f4 <UART_SetConfig+0x664>)
 8009610:	4293      	cmp	r3, r2
 8009612:	d132      	bne.n	800967a <UART_SetConfig+0x4ea>
 8009614:	4b76      	ldr	r3, [pc, #472]	; (80097f0 <UART_SetConfig+0x660>)
 8009616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009618:	f003 0307 	and.w	r3, r3, #7
 800961c:	2b05      	cmp	r3, #5
 800961e:	d827      	bhi.n	8009670 <UART_SetConfig+0x4e0>
 8009620:	a201      	add	r2, pc, #4	; (adr r2, 8009628 <UART_SetConfig+0x498>)
 8009622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009626:	bf00      	nop
 8009628:	08009641 	.word	0x08009641
 800962c:	08009649 	.word	0x08009649
 8009630:	08009651 	.word	0x08009651
 8009634:	08009659 	.word	0x08009659
 8009638:	08009661 	.word	0x08009661
 800963c:	08009669 	.word	0x08009669
 8009640:	2300      	movs	r3, #0
 8009642:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009646:	e08b      	b.n	8009760 <UART_SetConfig+0x5d0>
 8009648:	2304      	movs	r3, #4
 800964a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800964e:	e087      	b.n	8009760 <UART_SetConfig+0x5d0>
 8009650:	2308      	movs	r3, #8
 8009652:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009656:	e083      	b.n	8009760 <UART_SetConfig+0x5d0>
 8009658:	2310      	movs	r3, #16
 800965a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800965e:	e07f      	b.n	8009760 <UART_SetConfig+0x5d0>
 8009660:	2320      	movs	r3, #32
 8009662:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009666:	e07b      	b.n	8009760 <UART_SetConfig+0x5d0>
 8009668:	2340      	movs	r3, #64	; 0x40
 800966a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800966e:	e077      	b.n	8009760 <UART_SetConfig+0x5d0>
 8009670:	2380      	movs	r3, #128	; 0x80
 8009672:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009676:	bf00      	nop
 8009678:	e072      	b.n	8009760 <UART_SetConfig+0x5d0>
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	4a5e      	ldr	r2, [pc, #376]	; (80097f8 <UART_SetConfig+0x668>)
 8009680:	4293      	cmp	r3, r2
 8009682:	d132      	bne.n	80096ea <UART_SetConfig+0x55a>
 8009684:	4b5a      	ldr	r3, [pc, #360]	; (80097f0 <UART_SetConfig+0x660>)
 8009686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009688:	f003 0307 	and.w	r3, r3, #7
 800968c:	2b05      	cmp	r3, #5
 800968e:	d827      	bhi.n	80096e0 <UART_SetConfig+0x550>
 8009690:	a201      	add	r2, pc, #4	; (adr r2, 8009698 <UART_SetConfig+0x508>)
 8009692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009696:	bf00      	nop
 8009698:	080096b1 	.word	0x080096b1
 800969c:	080096b9 	.word	0x080096b9
 80096a0:	080096c1 	.word	0x080096c1
 80096a4:	080096c9 	.word	0x080096c9
 80096a8:	080096d1 	.word	0x080096d1
 80096ac:	080096d9 	.word	0x080096d9
 80096b0:	2300      	movs	r3, #0
 80096b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096b6:	e053      	b.n	8009760 <UART_SetConfig+0x5d0>
 80096b8:	2304      	movs	r3, #4
 80096ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096be:	e04f      	b.n	8009760 <UART_SetConfig+0x5d0>
 80096c0:	2308      	movs	r3, #8
 80096c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096c6:	e04b      	b.n	8009760 <UART_SetConfig+0x5d0>
 80096c8:	2310      	movs	r3, #16
 80096ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096ce:	e047      	b.n	8009760 <UART_SetConfig+0x5d0>
 80096d0:	2320      	movs	r3, #32
 80096d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096d6:	e043      	b.n	8009760 <UART_SetConfig+0x5d0>
 80096d8:	2340      	movs	r3, #64	; 0x40
 80096da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096de:	e03f      	b.n	8009760 <UART_SetConfig+0x5d0>
 80096e0:	2380      	movs	r3, #128	; 0x80
 80096e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096e6:	bf00      	nop
 80096e8:	e03a      	b.n	8009760 <UART_SetConfig+0x5d0>
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	4a43      	ldr	r2, [pc, #268]	; (80097fc <UART_SetConfig+0x66c>)
 80096f0:	4293      	cmp	r3, r2
 80096f2:	d132      	bne.n	800975a <UART_SetConfig+0x5ca>
 80096f4:	4b3e      	ldr	r3, [pc, #248]	; (80097f0 <UART_SetConfig+0x660>)
 80096f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096f8:	f003 0307 	and.w	r3, r3, #7
 80096fc:	2b05      	cmp	r3, #5
 80096fe:	d827      	bhi.n	8009750 <UART_SetConfig+0x5c0>
 8009700:	a201      	add	r2, pc, #4	; (adr r2, 8009708 <UART_SetConfig+0x578>)
 8009702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009706:	bf00      	nop
 8009708:	08009721 	.word	0x08009721
 800970c:	08009729 	.word	0x08009729
 8009710:	08009731 	.word	0x08009731
 8009714:	08009739 	.word	0x08009739
 8009718:	08009741 	.word	0x08009741
 800971c:	08009749 	.word	0x08009749
 8009720:	2302      	movs	r3, #2
 8009722:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009726:	e01b      	b.n	8009760 <UART_SetConfig+0x5d0>
 8009728:	2304      	movs	r3, #4
 800972a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800972e:	e017      	b.n	8009760 <UART_SetConfig+0x5d0>
 8009730:	2308      	movs	r3, #8
 8009732:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009736:	e013      	b.n	8009760 <UART_SetConfig+0x5d0>
 8009738:	2310      	movs	r3, #16
 800973a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800973e:	e00f      	b.n	8009760 <UART_SetConfig+0x5d0>
 8009740:	2320      	movs	r3, #32
 8009742:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009746:	e00b      	b.n	8009760 <UART_SetConfig+0x5d0>
 8009748:	2340      	movs	r3, #64	; 0x40
 800974a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800974e:	e007      	b.n	8009760 <UART_SetConfig+0x5d0>
 8009750:	2380      	movs	r3, #128	; 0x80
 8009752:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009756:	bf00      	nop
 8009758:	e002      	b.n	8009760 <UART_SetConfig+0x5d0>
 800975a:	2380      	movs	r3, #128	; 0x80
 800975c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	4a25      	ldr	r2, [pc, #148]	; (80097fc <UART_SetConfig+0x66c>)
 8009766:	4293      	cmp	r3, r2
 8009768:	f040 80b8 	bne.w	80098dc <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800976c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009770:	2b08      	cmp	r3, #8
 8009772:	d019      	beq.n	80097a8 <UART_SetConfig+0x618>
 8009774:	2b08      	cmp	r3, #8
 8009776:	dc04      	bgt.n	8009782 <UART_SetConfig+0x5f2>
 8009778:	2b02      	cmp	r3, #2
 800977a:	d009      	beq.n	8009790 <UART_SetConfig+0x600>
 800977c:	2b04      	cmp	r3, #4
 800977e:	d00b      	beq.n	8009798 <UART_SetConfig+0x608>
 8009780:	e042      	b.n	8009808 <UART_SetConfig+0x678>
 8009782:	2b20      	cmp	r3, #32
 8009784:	d02b      	beq.n	80097de <UART_SetConfig+0x64e>
 8009786:	2b40      	cmp	r3, #64	; 0x40
 8009788:	d02c      	beq.n	80097e4 <UART_SetConfig+0x654>
 800978a:	2b10      	cmp	r3, #16
 800978c:	d014      	beq.n	80097b8 <UART_SetConfig+0x628>
 800978e:	e03b      	b.n	8009808 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009790:	f7fe fc62 	bl	8008058 <HAL_RCCEx_GetD3PCLK1Freq>
 8009794:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009796:	e03d      	b.n	8009814 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009798:	f107 0314 	add.w	r3, r7, #20
 800979c:	4618      	mov	r0, r3
 800979e:	f7fe fc71 	bl	8008084 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80097a2:	69bb      	ldr	r3, [r7, #24]
 80097a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80097a6:	e035      	b.n	8009814 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80097a8:	f107 0308 	add.w	r3, r7, #8
 80097ac:	4618      	mov	r0, r3
 80097ae:	f7fe fdb5 	bl	800831c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80097b6:	e02d      	b.n	8009814 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80097b8:	4b0d      	ldr	r3, [pc, #52]	; (80097f0 <UART_SetConfig+0x660>)
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	f003 0320 	and.w	r3, r3, #32
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d009      	beq.n	80097d8 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80097c4:	4b0a      	ldr	r3, [pc, #40]	; (80097f0 <UART_SetConfig+0x660>)
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	08db      	lsrs	r3, r3, #3
 80097ca:	f003 0303 	and.w	r3, r3, #3
 80097ce:	4a0c      	ldr	r2, [pc, #48]	; (8009800 <UART_SetConfig+0x670>)
 80097d0:	fa22 f303 	lsr.w	r3, r2, r3
 80097d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80097d6:	e01d      	b.n	8009814 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 80097d8:	4b09      	ldr	r3, [pc, #36]	; (8009800 <UART_SetConfig+0x670>)
 80097da:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80097dc:	e01a      	b.n	8009814 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80097de:	4b09      	ldr	r3, [pc, #36]	; (8009804 <UART_SetConfig+0x674>)
 80097e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80097e2:	e017      	b.n	8009814 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80097e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80097e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80097ea:	e013      	b.n	8009814 <UART_SetConfig+0x684>
 80097ec:	40011400 	.word	0x40011400
 80097f0:	58024400 	.word	0x58024400
 80097f4:	40007800 	.word	0x40007800
 80097f8:	40007c00 	.word	0x40007c00
 80097fc:	58000c00 	.word	0x58000c00
 8009800:	03d09000 	.word	0x03d09000
 8009804:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8009808:	2300      	movs	r3, #0
 800980a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800980c:	2301      	movs	r3, #1
 800980e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009812:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009816:	2b00      	cmp	r3, #0
 8009818:	f000 824d 	beq.w	8009cb6 <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009820:	4aad      	ldr	r2, [pc, #692]	; (8009ad8 <UART_SetConfig+0x948>)
 8009822:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009826:	461a      	mov	r2, r3
 8009828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800982a:	fbb3 f3f2 	udiv	r3, r3, r2
 800982e:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	685a      	ldr	r2, [r3, #4]
 8009834:	4613      	mov	r3, r2
 8009836:	005b      	lsls	r3, r3, #1
 8009838:	4413      	add	r3, r2
 800983a:	6a3a      	ldr	r2, [r7, #32]
 800983c:	429a      	cmp	r2, r3
 800983e:	d305      	bcc.n	800984c <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	685b      	ldr	r3, [r3, #4]
 8009844:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009846:	6a3a      	ldr	r2, [r7, #32]
 8009848:	429a      	cmp	r2, r3
 800984a:	d903      	bls.n	8009854 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 800984c:	2301      	movs	r3, #1
 800984e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009852:	e230      	b.n	8009cb6 <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009856:	4618      	mov	r0, r3
 8009858:	f04f 0100 	mov.w	r1, #0
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009860:	4a9d      	ldr	r2, [pc, #628]	; (8009ad8 <UART_SetConfig+0x948>)
 8009862:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009866:	b29b      	uxth	r3, r3
 8009868:	f04f 0400 	mov.w	r4, #0
 800986c:	461a      	mov	r2, r3
 800986e:	4623      	mov	r3, r4
 8009870:	f7f6 fd98 	bl	80003a4 <__aeabi_uldivmod>
 8009874:	4603      	mov	r3, r0
 8009876:	460c      	mov	r4, r1
 8009878:	4619      	mov	r1, r3
 800987a:	4622      	mov	r2, r4
 800987c:	f04f 0300 	mov.w	r3, #0
 8009880:	f04f 0400 	mov.w	r4, #0
 8009884:	0214      	lsls	r4, r2, #8
 8009886:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800988a:	020b      	lsls	r3, r1, #8
 800988c:	687a      	ldr	r2, [r7, #4]
 800988e:	6852      	ldr	r2, [r2, #4]
 8009890:	0852      	lsrs	r2, r2, #1
 8009892:	4611      	mov	r1, r2
 8009894:	f04f 0200 	mov.w	r2, #0
 8009898:	eb13 0b01 	adds.w	fp, r3, r1
 800989c:	eb44 0c02 	adc.w	ip, r4, r2
 80098a0:	4658      	mov	r0, fp
 80098a2:	4661      	mov	r1, ip
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	685b      	ldr	r3, [r3, #4]
 80098a8:	f04f 0400 	mov.w	r4, #0
 80098ac:	461a      	mov	r2, r3
 80098ae:	4623      	mov	r3, r4
 80098b0:	f7f6 fd78 	bl	80003a4 <__aeabi_uldivmod>
 80098b4:	4603      	mov	r3, r0
 80098b6:	460c      	mov	r4, r1
 80098b8:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80098ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80098c0:	d308      	bcc.n	80098d4 <UART_SetConfig+0x744>
 80098c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80098c8:	d204      	bcs.n	80098d4 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80098d0:	60da      	str	r2, [r3, #12]
 80098d2:	e1f0      	b.n	8009cb6 <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 80098d4:	2301      	movs	r3, #1
 80098d6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80098da:	e1ec      	b.n	8009cb6 <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	69db      	ldr	r3, [r3, #28]
 80098e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80098e4:	f040 8100 	bne.w	8009ae8 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 80098e8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80098ec:	2b40      	cmp	r3, #64	; 0x40
 80098ee:	f200 80b7 	bhi.w	8009a60 <UART_SetConfig+0x8d0>
 80098f2:	a201      	add	r2, pc, #4	; (adr r2, 80098f8 <UART_SetConfig+0x768>)
 80098f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098f8:	080099fd 	.word	0x080099fd
 80098fc:	08009a05 	.word	0x08009a05
 8009900:	08009a61 	.word	0x08009a61
 8009904:	08009a61 	.word	0x08009a61
 8009908:	08009a0d 	.word	0x08009a0d
 800990c:	08009a61 	.word	0x08009a61
 8009910:	08009a61 	.word	0x08009a61
 8009914:	08009a61 	.word	0x08009a61
 8009918:	08009a1d 	.word	0x08009a1d
 800991c:	08009a61 	.word	0x08009a61
 8009920:	08009a61 	.word	0x08009a61
 8009924:	08009a61 	.word	0x08009a61
 8009928:	08009a61 	.word	0x08009a61
 800992c:	08009a61 	.word	0x08009a61
 8009930:	08009a61 	.word	0x08009a61
 8009934:	08009a61 	.word	0x08009a61
 8009938:	08009a2d 	.word	0x08009a2d
 800993c:	08009a61 	.word	0x08009a61
 8009940:	08009a61 	.word	0x08009a61
 8009944:	08009a61 	.word	0x08009a61
 8009948:	08009a61 	.word	0x08009a61
 800994c:	08009a61 	.word	0x08009a61
 8009950:	08009a61 	.word	0x08009a61
 8009954:	08009a61 	.word	0x08009a61
 8009958:	08009a61 	.word	0x08009a61
 800995c:	08009a61 	.word	0x08009a61
 8009960:	08009a61 	.word	0x08009a61
 8009964:	08009a61 	.word	0x08009a61
 8009968:	08009a61 	.word	0x08009a61
 800996c:	08009a61 	.word	0x08009a61
 8009970:	08009a61 	.word	0x08009a61
 8009974:	08009a61 	.word	0x08009a61
 8009978:	08009a53 	.word	0x08009a53
 800997c:	08009a61 	.word	0x08009a61
 8009980:	08009a61 	.word	0x08009a61
 8009984:	08009a61 	.word	0x08009a61
 8009988:	08009a61 	.word	0x08009a61
 800998c:	08009a61 	.word	0x08009a61
 8009990:	08009a61 	.word	0x08009a61
 8009994:	08009a61 	.word	0x08009a61
 8009998:	08009a61 	.word	0x08009a61
 800999c:	08009a61 	.word	0x08009a61
 80099a0:	08009a61 	.word	0x08009a61
 80099a4:	08009a61 	.word	0x08009a61
 80099a8:	08009a61 	.word	0x08009a61
 80099ac:	08009a61 	.word	0x08009a61
 80099b0:	08009a61 	.word	0x08009a61
 80099b4:	08009a61 	.word	0x08009a61
 80099b8:	08009a61 	.word	0x08009a61
 80099bc:	08009a61 	.word	0x08009a61
 80099c0:	08009a61 	.word	0x08009a61
 80099c4:	08009a61 	.word	0x08009a61
 80099c8:	08009a61 	.word	0x08009a61
 80099cc:	08009a61 	.word	0x08009a61
 80099d0:	08009a61 	.word	0x08009a61
 80099d4:	08009a61 	.word	0x08009a61
 80099d8:	08009a61 	.word	0x08009a61
 80099dc:	08009a61 	.word	0x08009a61
 80099e0:	08009a61 	.word	0x08009a61
 80099e4:	08009a61 	.word	0x08009a61
 80099e8:	08009a61 	.word	0x08009a61
 80099ec:	08009a61 	.word	0x08009a61
 80099f0:	08009a61 	.word	0x08009a61
 80099f4:	08009a61 	.word	0x08009a61
 80099f8:	08009a59 	.word	0x08009a59
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80099fc:	f7fd fbd0 	bl	80071a0 <HAL_RCC_GetPCLK1Freq>
 8009a00:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009a02:	e033      	b.n	8009a6c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009a04:	f7fd fbe2 	bl	80071cc <HAL_RCC_GetPCLK2Freq>
 8009a08:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009a0a:	e02f      	b.n	8009a6c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a0c:	f107 0314 	add.w	r3, r7, #20
 8009a10:	4618      	mov	r0, r3
 8009a12:	f7fe fb37 	bl	8008084 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009a16:	69bb      	ldr	r3, [r7, #24]
 8009a18:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009a1a:	e027      	b.n	8009a6c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009a1c:	f107 0308 	add.w	r3, r7, #8
 8009a20:	4618      	mov	r0, r3
 8009a22:	f7fe fc7b 	bl	800831c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009a2a:	e01f      	b.n	8009a6c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009a2c:	4b2b      	ldr	r3, [pc, #172]	; (8009adc <UART_SetConfig+0x94c>)
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	f003 0320 	and.w	r3, r3, #32
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d009      	beq.n	8009a4c <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009a38:	4b28      	ldr	r3, [pc, #160]	; (8009adc <UART_SetConfig+0x94c>)
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	08db      	lsrs	r3, r3, #3
 8009a3e:	f003 0303 	and.w	r3, r3, #3
 8009a42:	4a27      	ldr	r2, [pc, #156]	; (8009ae0 <UART_SetConfig+0x950>)
 8009a44:	fa22 f303 	lsr.w	r3, r2, r3
 8009a48:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009a4a:	e00f      	b.n	8009a6c <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 8009a4c:	4b24      	ldr	r3, [pc, #144]	; (8009ae0 <UART_SetConfig+0x950>)
 8009a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009a50:	e00c      	b.n	8009a6c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009a52:	4b24      	ldr	r3, [pc, #144]	; (8009ae4 <UART_SetConfig+0x954>)
 8009a54:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009a56:	e009      	b.n	8009a6c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009a58:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009a5e:	e005      	b.n	8009a6c <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 8009a60:	2300      	movs	r3, #0
 8009a62:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009a64:	2301      	movs	r3, #1
 8009a66:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009a6a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	f000 8121 	beq.w	8009cb6 <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a78:	4a17      	ldr	r2, [pc, #92]	; (8009ad8 <UART_SetConfig+0x948>)
 8009a7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009a7e:	461a      	mov	r2, r3
 8009a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a82:	fbb3 f3f2 	udiv	r3, r3, r2
 8009a86:	005a      	lsls	r2, r3, #1
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	685b      	ldr	r3, [r3, #4]
 8009a8c:	085b      	lsrs	r3, r3, #1
 8009a8e:	441a      	add	r2, r3
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	685b      	ldr	r3, [r3, #4]
 8009a94:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a98:	b29b      	uxth	r3, r3
 8009a9a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a9e:	2b0f      	cmp	r3, #15
 8009aa0:	d916      	bls.n	8009ad0 <UART_SetConfig+0x940>
 8009aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009aa8:	d212      	bcs.n	8009ad0 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aac:	b29b      	uxth	r3, r3
 8009aae:	f023 030f 	bic.w	r3, r3, #15
 8009ab2:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ab6:	085b      	lsrs	r3, r3, #1
 8009ab8:	b29b      	uxth	r3, r3
 8009aba:	f003 0307 	and.w	r3, r3, #7
 8009abe:	b29a      	uxth	r2, r3
 8009ac0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009ac2:	4313      	orrs	r3, r2
 8009ac4:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009acc:	60da      	str	r2, [r3, #12]
 8009ace:	e0f2      	b.n	8009cb6 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8009ad0:	2301      	movs	r3, #1
 8009ad2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009ad6:	e0ee      	b.n	8009cb6 <UART_SetConfig+0xb26>
 8009ad8:	08026ec8 	.word	0x08026ec8
 8009adc:	58024400 	.word	0x58024400
 8009ae0:	03d09000 	.word	0x03d09000
 8009ae4:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 8009ae8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009aec:	2b40      	cmp	r3, #64	; 0x40
 8009aee:	f200 80b7 	bhi.w	8009c60 <UART_SetConfig+0xad0>
 8009af2:	a201      	add	r2, pc, #4	; (adr r2, 8009af8 <UART_SetConfig+0x968>)
 8009af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009af8:	08009bfd 	.word	0x08009bfd
 8009afc:	08009c05 	.word	0x08009c05
 8009b00:	08009c61 	.word	0x08009c61
 8009b04:	08009c61 	.word	0x08009c61
 8009b08:	08009c0d 	.word	0x08009c0d
 8009b0c:	08009c61 	.word	0x08009c61
 8009b10:	08009c61 	.word	0x08009c61
 8009b14:	08009c61 	.word	0x08009c61
 8009b18:	08009c1d 	.word	0x08009c1d
 8009b1c:	08009c61 	.word	0x08009c61
 8009b20:	08009c61 	.word	0x08009c61
 8009b24:	08009c61 	.word	0x08009c61
 8009b28:	08009c61 	.word	0x08009c61
 8009b2c:	08009c61 	.word	0x08009c61
 8009b30:	08009c61 	.word	0x08009c61
 8009b34:	08009c61 	.word	0x08009c61
 8009b38:	08009c2d 	.word	0x08009c2d
 8009b3c:	08009c61 	.word	0x08009c61
 8009b40:	08009c61 	.word	0x08009c61
 8009b44:	08009c61 	.word	0x08009c61
 8009b48:	08009c61 	.word	0x08009c61
 8009b4c:	08009c61 	.word	0x08009c61
 8009b50:	08009c61 	.word	0x08009c61
 8009b54:	08009c61 	.word	0x08009c61
 8009b58:	08009c61 	.word	0x08009c61
 8009b5c:	08009c61 	.word	0x08009c61
 8009b60:	08009c61 	.word	0x08009c61
 8009b64:	08009c61 	.word	0x08009c61
 8009b68:	08009c61 	.word	0x08009c61
 8009b6c:	08009c61 	.word	0x08009c61
 8009b70:	08009c61 	.word	0x08009c61
 8009b74:	08009c61 	.word	0x08009c61
 8009b78:	08009c53 	.word	0x08009c53
 8009b7c:	08009c61 	.word	0x08009c61
 8009b80:	08009c61 	.word	0x08009c61
 8009b84:	08009c61 	.word	0x08009c61
 8009b88:	08009c61 	.word	0x08009c61
 8009b8c:	08009c61 	.word	0x08009c61
 8009b90:	08009c61 	.word	0x08009c61
 8009b94:	08009c61 	.word	0x08009c61
 8009b98:	08009c61 	.word	0x08009c61
 8009b9c:	08009c61 	.word	0x08009c61
 8009ba0:	08009c61 	.word	0x08009c61
 8009ba4:	08009c61 	.word	0x08009c61
 8009ba8:	08009c61 	.word	0x08009c61
 8009bac:	08009c61 	.word	0x08009c61
 8009bb0:	08009c61 	.word	0x08009c61
 8009bb4:	08009c61 	.word	0x08009c61
 8009bb8:	08009c61 	.word	0x08009c61
 8009bbc:	08009c61 	.word	0x08009c61
 8009bc0:	08009c61 	.word	0x08009c61
 8009bc4:	08009c61 	.word	0x08009c61
 8009bc8:	08009c61 	.word	0x08009c61
 8009bcc:	08009c61 	.word	0x08009c61
 8009bd0:	08009c61 	.word	0x08009c61
 8009bd4:	08009c61 	.word	0x08009c61
 8009bd8:	08009c61 	.word	0x08009c61
 8009bdc:	08009c61 	.word	0x08009c61
 8009be0:	08009c61 	.word	0x08009c61
 8009be4:	08009c61 	.word	0x08009c61
 8009be8:	08009c61 	.word	0x08009c61
 8009bec:	08009c61 	.word	0x08009c61
 8009bf0:	08009c61 	.word	0x08009c61
 8009bf4:	08009c61 	.word	0x08009c61
 8009bf8:	08009c59 	.word	0x08009c59
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009bfc:	f7fd fad0 	bl	80071a0 <HAL_RCC_GetPCLK1Freq>
 8009c00:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009c02:	e033      	b.n	8009c6c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009c04:	f7fd fae2 	bl	80071cc <HAL_RCC_GetPCLK2Freq>
 8009c08:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009c0a:	e02f      	b.n	8009c6c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c0c:	f107 0314 	add.w	r3, r7, #20
 8009c10:	4618      	mov	r0, r3
 8009c12:	f7fe fa37 	bl	8008084 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009c16:	69bb      	ldr	r3, [r7, #24]
 8009c18:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009c1a:	e027      	b.n	8009c6c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009c1c:	f107 0308 	add.w	r3, r7, #8
 8009c20:	4618      	mov	r0, r3
 8009c22:	f7fe fb7b 	bl	800831c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009c2a:	e01f      	b.n	8009c6c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009c2c:	4b2c      	ldr	r3, [pc, #176]	; (8009ce0 <UART_SetConfig+0xb50>)
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	f003 0320 	and.w	r3, r3, #32
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d009      	beq.n	8009c4c <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009c38:	4b29      	ldr	r3, [pc, #164]	; (8009ce0 <UART_SetConfig+0xb50>)
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	08db      	lsrs	r3, r3, #3
 8009c3e:	f003 0303 	and.w	r3, r3, #3
 8009c42:	4a28      	ldr	r2, [pc, #160]	; (8009ce4 <UART_SetConfig+0xb54>)
 8009c44:	fa22 f303 	lsr.w	r3, r2, r3
 8009c48:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009c4a:	e00f      	b.n	8009c6c <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 8009c4c:	4b25      	ldr	r3, [pc, #148]	; (8009ce4 <UART_SetConfig+0xb54>)
 8009c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009c50:	e00c      	b.n	8009c6c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009c52:	4b25      	ldr	r3, [pc, #148]	; (8009ce8 <UART_SetConfig+0xb58>)
 8009c54:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009c56:	e009      	b.n	8009c6c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009c58:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009c5e:	e005      	b.n	8009c6c <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 8009c60:	2300      	movs	r3, #0
 8009c62:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009c64:	2301      	movs	r3, #1
 8009c66:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009c6a:	bf00      	nop
    }

    if (pclk != 0U)
 8009c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d021      	beq.n	8009cb6 <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c76:	4a1d      	ldr	r2, [pc, #116]	; (8009cec <UART_SetConfig+0xb5c>)
 8009c78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c7c:	461a      	mov	r2, r3
 8009c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c80:	fbb3 f2f2 	udiv	r2, r3, r2
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	685b      	ldr	r3, [r3, #4]
 8009c88:	085b      	lsrs	r3, r3, #1
 8009c8a:	441a      	add	r2, r3
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	685b      	ldr	r3, [r3, #4]
 8009c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c94:	b29b      	uxth	r3, r3
 8009c96:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c9a:	2b0f      	cmp	r3, #15
 8009c9c:	d908      	bls.n	8009cb0 <UART_SetConfig+0xb20>
 8009c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ca0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ca4:	d204      	bcs.n	8009cb0 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009cac:	60da      	str	r2, [r3, #12]
 8009cae:	e002      	b.n	8009cb6 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8009cb0:	2301      	movs	r3, #1
 8009cb2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	2201      	movs	r2, #1
 8009cba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	2201      	movs	r2, #1
 8009cc2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	2200      	movs	r2, #0
 8009cca:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2200      	movs	r2, #0
 8009cd0:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8009cd2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	3738      	adds	r7, #56	; 0x38
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8009ce0:	58024400 	.word	0x58024400
 8009ce4:	03d09000 	.word	0x03d09000
 8009ce8:	003d0900 	.word	0x003d0900
 8009cec:	08026ec8 	.word	0x08026ec8

08009cf0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009cf0:	b480      	push	{r7}
 8009cf2:	b083      	sub	sp, #12
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cfc:	f003 0301 	and.w	r3, r3, #1
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d00a      	beq.n	8009d1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	685b      	ldr	r3, [r3, #4]
 8009d0a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	430a      	orrs	r2, r1
 8009d18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d1e:	f003 0302 	and.w	r3, r3, #2
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d00a      	beq.n	8009d3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	685b      	ldr	r3, [r3, #4]
 8009d2c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	430a      	orrs	r2, r1
 8009d3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d40:	f003 0304 	and.w	r3, r3, #4
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d00a      	beq.n	8009d5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	685b      	ldr	r3, [r3, #4]
 8009d4e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	430a      	orrs	r2, r1
 8009d5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d62:	f003 0308 	and.w	r3, r3, #8
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d00a      	beq.n	8009d80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	685b      	ldr	r3, [r3, #4]
 8009d70:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	430a      	orrs	r2, r1
 8009d7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d84:	f003 0310 	and.w	r3, r3, #16
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d00a      	beq.n	8009da2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	689b      	ldr	r3, [r3, #8]
 8009d92:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	430a      	orrs	r2, r1
 8009da0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009da6:	f003 0320 	and.w	r3, r3, #32
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d00a      	beq.n	8009dc4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	689b      	ldr	r3, [r3, #8]
 8009db4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	430a      	orrs	r2, r1
 8009dc2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d01a      	beq.n	8009e06 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	685b      	ldr	r3, [r3, #4]
 8009dd6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	430a      	orrs	r2, r1
 8009de4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009dea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009dee:	d10a      	bne.n	8009e06 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	685b      	ldr	r3, [r3, #4]
 8009df6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	430a      	orrs	r2, r1
 8009e04:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d00a      	beq.n	8009e28 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	685b      	ldr	r3, [r3, #4]
 8009e18:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	430a      	orrs	r2, r1
 8009e26:	605a      	str	r2, [r3, #4]
  }
}
 8009e28:	bf00      	nop
 8009e2a:	370c      	adds	r7, #12
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e32:	4770      	bx	lr

08009e34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b086      	sub	sp, #24
 8009e38:	af02      	add	r7, sp, #8
 8009e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2200      	movs	r2, #0
 8009e40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8009e44:	f7f8 f8a2 	bl	8001f8c <HAL_GetTick>
 8009e48:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	f003 0308 	and.w	r3, r3, #8
 8009e54:	2b08      	cmp	r3, #8
 8009e56:	d10e      	bne.n	8009e76 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009e58:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009e5c:	9300      	str	r3, [sp, #0]
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	2200      	movs	r2, #0
 8009e62:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009e66:	6878      	ldr	r0, [r7, #4]
 8009e68:	f000 f82c 	bl	8009ec4 <UART_WaitOnFlagUntilTimeout>
 8009e6c:	4603      	mov	r3, r0
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d001      	beq.n	8009e76 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009e72:	2303      	movs	r3, #3
 8009e74:	e022      	b.n	8009ebc <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	f003 0304 	and.w	r3, r3, #4
 8009e80:	2b04      	cmp	r3, #4
 8009e82:	d10e      	bne.n	8009ea2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009e84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009e88:	9300      	str	r3, [sp, #0]
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009e92:	6878      	ldr	r0, [r7, #4]
 8009e94:	f000 f816 	bl	8009ec4 <UART_WaitOnFlagUntilTimeout>
 8009e98:	4603      	mov	r3, r0
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d001      	beq.n	8009ea2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009e9e:	2303      	movs	r3, #3
 8009ea0:	e00c      	b.n	8009ebc <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	2220      	movs	r2, #32
 8009ea6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	2220      	movs	r2, #32
 8009eae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009eba:	2300      	movs	r3, #0
}
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	3710      	adds	r7, #16
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	bd80      	pop	{r7, pc}

08009ec4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b084      	sub	sp, #16
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	60f8      	str	r0, [r7, #12]
 8009ecc:	60b9      	str	r1, [r7, #8]
 8009ece:	603b      	str	r3, [r7, #0]
 8009ed0:	4613      	mov	r3, r2
 8009ed2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009ed4:	e062      	b.n	8009f9c <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009ed6:	69bb      	ldr	r3, [r7, #24]
 8009ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009edc:	d05e      	beq.n	8009f9c <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009ede:	f7f8 f855 	bl	8001f8c <HAL_GetTick>
 8009ee2:	4602      	mov	r2, r0
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	1ad3      	subs	r3, r2, r3
 8009ee8:	69ba      	ldr	r2, [r7, #24]
 8009eea:	429a      	cmp	r2, r3
 8009eec:	d302      	bcc.n	8009ef4 <UART_WaitOnFlagUntilTimeout+0x30>
 8009eee:	69bb      	ldr	r3, [r7, #24]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d11d      	bne.n	8009f30 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	681a      	ldr	r2, [r3, #0]
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009f02:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	689a      	ldr	r2, [r3, #8]
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	f022 0201 	bic.w	r2, r2, #1
 8009f12:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	2220      	movs	r2, #32
 8009f18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	2220      	movs	r2, #32
 8009f20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	2200      	movs	r2, #0
 8009f28:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8009f2c:	2303      	movs	r3, #3
 8009f2e:	e045      	b.n	8009fbc <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	f003 0304 	and.w	r3, r3, #4
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d02e      	beq.n	8009f9c <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	69db      	ldr	r3, [r3, #28]
 8009f44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009f48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009f4c:	d126      	bne.n	8009f9c <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009f56:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	681a      	ldr	r2, [r3, #0]
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009f66:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	689a      	ldr	r2, [r3, #8]
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	f022 0201 	bic.w	r2, r2, #1
 8009f76:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	2220      	movs	r2, #32
 8009f7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	2220      	movs	r2, #32
 8009f84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	2220      	movs	r2, #32
 8009f8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	2200      	movs	r2, #0
 8009f94:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8009f98:	2303      	movs	r3, #3
 8009f9a:	e00f      	b.n	8009fbc <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	69da      	ldr	r2, [r3, #28]
 8009fa2:	68bb      	ldr	r3, [r7, #8]
 8009fa4:	4013      	ands	r3, r2
 8009fa6:	68ba      	ldr	r2, [r7, #8]
 8009fa8:	429a      	cmp	r2, r3
 8009faa:	bf0c      	ite	eq
 8009fac:	2301      	moveq	r3, #1
 8009fae:	2300      	movne	r3, #0
 8009fb0:	b2db      	uxtb	r3, r3
 8009fb2:	461a      	mov	r2, r3
 8009fb4:	79fb      	ldrb	r3, [r7, #7]
 8009fb6:	429a      	cmp	r2, r3
 8009fb8:	d08d      	beq.n	8009ed6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009fba:	2300      	movs	r3, #0
}
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	3710      	adds	r7, #16
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	bd80      	pop	{r7, pc}

08009fc4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009fc4:	b480      	push	{r7}
 8009fc6:	b085      	sub	sp, #20
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009fd2:	2b01      	cmp	r3, #1
 8009fd4:	d101      	bne.n	8009fda <HAL_UARTEx_DisableFifoMode+0x16>
 8009fd6:	2302      	movs	r3, #2
 8009fd8:	e027      	b.n	800a02a <HAL_UARTEx_DisableFifoMode+0x66>
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	2201      	movs	r2, #1
 8009fde:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	2224      	movs	r2, #36	; 0x24
 8009fe6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	681a      	ldr	r2, [r3, #0]
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	f022 0201 	bic.w	r2, r2, #1
 800a000:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a008:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	2200      	movs	r2, #0
 800a00e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	68fa      	ldr	r2, [r7, #12]
 800a016:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	2220      	movs	r2, #32
 800a01c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	2200      	movs	r2, #0
 800a024:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a028:	2300      	movs	r3, #0
}
 800a02a:	4618      	mov	r0, r3
 800a02c:	3714      	adds	r7, #20
 800a02e:	46bd      	mov	sp, r7
 800a030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a034:	4770      	bx	lr

0800a036 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a036:	b580      	push	{r7, lr}
 800a038:	b084      	sub	sp, #16
 800a03a:	af00      	add	r7, sp, #0
 800a03c:	6078      	str	r0, [r7, #4]
 800a03e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a046:	2b01      	cmp	r3, #1
 800a048:	d101      	bne.n	800a04e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a04a:	2302      	movs	r3, #2
 800a04c:	e02d      	b.n	800a0aa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	2201      	movs	r2, #1
 800a052:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	2224      	movs	r2, #36	; 0x24
 800a05a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	681a      	ldr	r2, [r3, #0]
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	f022 0201 	bic.w	r2, r2, #1
 800a074:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	689b      	ldr	r3, [r3, #8]
 800a07c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	683a      	ldr	r2, [r7, #0]
 800a086:	430a      	orrs	r2, r1
 800a088:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a08a:	6878      	ldr	r0, [r7, #4]
 800a08c:	f000 f850 	bl	800a130 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	68fa      	ldr	r2, [r7, #12]
 800a096:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	2220      	movs	r2, #32
 800a09c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a0a8:	2300      	movs	r3, #0
}
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	3710      	adds	r7, #16
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	bd80      	pop	{r7, pc}

0800a0b2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a0b2:	b580      	push	{r7, lr}
 800a0b4:	b084      	sub	sp, #16
 800a0b6:	af00      	add	r7, sp, #0
 800a0b8:	6078      	str	r0, [r7, #4]
 800a0ba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a0c2:	2b01      	cmp	r3, #1
 800a0c4:	d101      	bne.n	800a0ca <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a0c6:	2302      	movs	r3, #2
 800a0c8:	e02d      	b.n	800a126 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	2201      	movs	r2, #1
 800a0ce:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	2224      	movs	r2, #36	; 0x24
 800a0d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	681a      	ldr	r2, [r3, #0]
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	f022 0201 	bic.w	r2, r2, #1
 800a0f0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	689b      	ldr	r3, [r3, #8]
 800a0f8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	683a      	ldr	r2, [r7, #0]
 800a102:	430a      	orrs	r2, r1
 800a104:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a106:	6878      	ldr	r0, [r7, #4]
 800a108:	f000 f812 	bl	800a130 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	68fa      	ldr	r2, [r7, #12]
 800a112:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	2220      	movs	r2, #32
 800a118:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	2200      	movs	r2, #0
 800a120:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a124:	2300      	movs	r3, #0
}
 800a126:	4618      	mov	r0, r3
 800a128:	3710      	adds	r7, #16
 800a12a:	46bd      	mov	sp, r7
 800a12c:	bd80      	pop	{r7, pc}
	...

0800a130 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a130:	b480      	push	{r7}
 800a132:	b089      	sub	sp, #36	; 0x24
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800a138:	4a2f      	ldr	r2, [pc, #188]	; (800a1f8 <UARTEx_SetNbDataToProcess+0xc8>)
 800a13a:	f107 0314 	add.w	r3, r7, #20
 800a13e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a142:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800a146:	4a2d      	ldr	r2, [pc, #180]	; (800a1fc <UARTEx_SetNbDataToProcess+0xcc>)
 800a148:	f107 030c 	add.w	r3, r7, #12
 800a14c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a150:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d108      	bne.n	800a16e <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	2201      	movs	r2, #1
 800a160:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2201      	movs	r2, #1
 800a168:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a16c:	e03d      	b.n	800a1ea <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a16e:	2310      	movs	r3, #16
 800a170:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a172:	2310      	movs	r3, #16
 800a174:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	689b      	ldr	r3, [r3, #8]
 800a17c:	0e5b      	lsrs	r3, r3, #25
 800a17e:	b2db      	uxtb	r3, r3
 800a180:	f003 0307 	and.w	r3, r3, #7
 800a184:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	689b      	ldr	r3, [r3, #8]
 800a18c:	0f5b      	lsrs	r3, r3, #29
 800a18e:	b2db      	uxtb	r3, r3
 800a190:	f003 0307 	and.w	r3, r3, #7
 800a194:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800a196:	7fbb      	ldrb	r3, [r7, #30]
 800a198:	7f3a      	ldrb	r2, [r7, #28]
 800a19a:	f107 0120 	add.w	r1, r7, #32
 800a19e:	440a      	add	r2, r1
 800a1a0:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800a1a4:	fb02 f303 	mul.w	r3, r2, r3
 800a1a8:	7f3a      	ldrb	r2, [r7, #28]
 800a1aa:	f107 0120 	add.w	r1, r7, #32
 800a1ae:	440a      	add	r2, r1
 800a1b0:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800a1b4:	fb93 f3f2 	sdiv	r3, r3, r2
 800a1b8:	b29a      	uxth	r2, r3
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800a1c0:	7ffb      	ldrb	r3, [r7, #31]
 800a1c2:	7f7a      	ldrb	r2, [r7, #29]
 800a1c4:	f107 0120 	add.w	r1, r7, #32
 800a1c8:	440a      	add	r2, r1
 800a1ca:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800a1ce:	fb02 f303 	mul.w	r3, r2, r3
 800a1d2:	7f7a      	ldrb	r2, [r7, #29]
 800a1d4:	f107 0120 	add.w	r1, r7, #32
 800a1d8:	440a      	add	r2, r1
 800a1da:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800a1de:	fb93 f3f2 	sdiv	r3, r3, r2
 800a1e2:	b29a      	uxth	r2, r3
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a1ea:	bf00      	nop
 800a1ec:	3724      	adds	r7, #36	; 0x24
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f4:	4770      	bx	lr
 800a1f6:	bf00      	nop
 800a1f8:	08023150 	.word	0x08023150
 800a1fc:	08023158 	.word	0x08023158

0800a200 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 800a200:	b480      	push	{r7}
 800a202:	b087      	sub	sp, #28
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
 800a208:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 800a20a:	683b      	ldr	r3, [r7, #0]
 800a20c:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800a212:	2320      	movs	r3, #32
 800a214:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800a216:	f3bf 8f4f 	dsb	sy

    __DSB();

    while (op_size > 0) {
 800a21a:	e00b      	b.n	800a234 <SCB_InvalidateDCache_by_Addr+0x34>
      SCB->DCIMVAC = op_addr;
 800a21c:	4a0c      	ldr	r2, [pc, #48]	; (800a250 <SCB_InvalidateDCache_by_Addr+0x50>)
 800a21e:	693b      	ldr	r3, [r7, #16]
 800a220:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	693a      	ldr	r2, [r7, #16]
 800a228:	4413      	add	r3, r2
 800a22a:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 800a22c:	697a      	ldr	r2, [r7, #20]
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	1ad3      	subs	r3, r2, r3
 800a232:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800a234:	697b      	ldr	r3, [r7, #20]
 800a236:	2b00      	cmp	r3, #0
 800a238:	dcf0      	bgt.n	800a21c <SCB_InvalidateDCache_by_Addr+0x1c>
 800a23a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800a23e:	f3bf 8f6f 	isb	sy
    }

    __DSB();
    __ISB();
  #endif
}
 800a242:	bf00      	nop
 800a244:	371c      	adds	r7, #28
 800a246:	46bd      	mov	sp, r7
 800a248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24c:	4770      	bx	lr
 800a24e:	bf00      	nop
 800a250:	e000ed00 	.word	0xe000ed00

0800a254 <HAL_ETH_MspInit>:
/* Private functions ---------------------------------------------------------*/
void pbuf_free_custom(struct pbuf *p);
void Error_Handler(void);

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b08e      	sub	sp, #56	; 0x38
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a25c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a260:	2200      	movs	r2, #0
 800a262:	601a      	str	r2, [r3, #0]
 800a264:	605a      	str	r2, [r3, #4]
 800a266:	609a      	str	r2, [r3, #8]
 800a268:	60da      	str	r2, [r3, #12]
 800a26a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	4a5d      	ldr	r2, [pc, #372]	; (800a3e8 <HAL_ETH_MspInit+0x194>)
 800a272:	4293      	cmp	r3, r2
 800a274:	f040 80b3 	bne.w	800a3de <HAL_ETH_MspInit+0x18a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800a278:	4b5c      	ldr	r3, [pc, #368]	; (800a3ec <HAL_ETH_MspInit+0x198>)
 800a27a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a27e:	4a5b      	ldr	r2, [pc, #364]	; (800a3ec <HAL_ETH_MspInit+0x198>)
 800a280:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a284:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800a288:	4b58      	ldr	r3, [pc, #352]	; (800a3ec <HAL_ETH_MspInit+0x198>)
 800a28a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a28e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a292:	623b      	str	r3, [r7, #32]
 800a294:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800a296:	4b55      	ldr	r3, [pc, #340]	; (800a3ec <HAL_ETH_MspInit+0x198>)
 800a298:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a29c:	4a53      	ldr	r2, [pc, #332]	; (800a3ec <HAL_ETH_MspInit+0x198>)
 800a29e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a2a2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800a2a6:	4b51      	ldr	r3, [pc, #324]	; (800a3ec <HAL_ETH_MspInit+0x198>)
 800a2a8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a2ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a2b0:	61fb      	str	r3, [r7, #28]
 800a2b2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800a2b4:	4b4d      	ldr	r3, [pc, #308]	; (800a3ec <HAL_ETH_MspInit+0x198>)
 800a2b6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a2ba:	4a4c      	ldr	r2, [pc, #304]	; (800a3ec <HAL_ETH_MspInit+0x198>)
 800a2bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a2c0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800a2c4:	4b49      	ldr	r3, [pc, #292]	; (800a3ec <HAL_ETH_MspInit+0x198>)
 800a2c6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a2ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a2ce:	61bb      	str	r3, [r7, #24]
 800a2d0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a2d2:	4b46      	ldr	r3, [pc, #280]	; (800a3ec <HAL_ETH_MspInit+0x198>)
 800a2d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a2d8:	4a44      	ldr	r2, [pc, #272]	; (800a3ec <HAL_ETH_MspInit+0x198>)
 800a2da:	f043 0304 	orr.w	r3, r3, #4
 800a2de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a2e2:	4b42      	ldr	r3, [pc, #264]	; (800a3ec <HAL_ETH_MspInit+0x198>)
 800a2e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a2e8:	f003 0304 	and.w	r3, r3, #4
 800a2ec:	617b      	str	r3, [r7, #20]
 800a2ee:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a2f0:	4b3e      	ldr	r3, [pc, #248]	; (800a3ec <HAL_ETH_MspInit+0x198>)
 800a2f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a2f6:	4a3d      	ldr	r2, [pc, #244]	; (800a3ec <HAL_ETH_MspInit+0x198>)
 800a2f8:	f043 0301 	orr.w	r3, r3, #1
 800a2fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a300:	4b3a      	ldr	r3, [pc, #232]	; (800a3ec <HAL_ETH_MspInit+0x198>)
 800a302:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a306:	f003 0301 	and.w	r3, r3, #1
 800a30a:	613b      	str	r3, [r7, #16]
 800a30c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a30e:	4b37      	ldr	r3, [pc, #220]	; (800a3ec <HAL_ETH_MspInit+0x198>)
 800a310:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a314:	4a35      	ldr	r2, [pc, #212]	; (800a3ec <HAL_ETH_MspInit+0x198>)
 800a316:	f043 0302 	orr.w	r3, r3, #2
 800a31a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a31e:	4b33      	ldr	r3, [pc, #204]	; (800a3ec <HAL_ETH_MspInit+0x198>)
 800a320:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a324:	f003 0302 	and.w	r3, r3, #2
 800a328:	60fb      	str	r3, [r7, #12]
 800a32a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800a32c:	4b2f      	ldr	r3, [pc, #188]	; (800a3ec <HAL_ETH_MspInit+0x198>)
 800a32e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a332:	4a2e      	ldr	r2, [pc, #184]	; (800a3ec <HAL_ETH_MspInit+0x198>)
 800a334:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a338:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a33c:	4b2b      	ldr	r3, [pc, #172]	; (800a3ec <HAL_ETH_MspInit+0x198>)
 800a33e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a342:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a346:	60bb      	str	r3, [r7, #8]
 800a348:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800a34a:	2332      	movs	r3, #50	; 0x32
 800a34c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a34e:	2302      	movs	r3, #2
 800a350:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a352:	2300      	movs	r3, #0
 800a354:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a356:	2303      	movs	r3, #3
 800a358:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a35a:	230b      	movs	r3, #11
 800a35c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a35e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a362:	4619      	mov	r1, r3
 800a364:	4822      	ldr	r0, [pc, #136]	; (800a3f0 <HAL_ETH_MspInit+0x19c>)
 800a366:	f7fb fbe7 	bl	8005b38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800a36a:	2386      	movs	r3, #134	; 0x86
 800a36c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a36e:	2302      	movs	r3, #2
 800a370:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a372:	2300      	movs	r3, #0
 800a374:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a376:	2303      	movs	r3, #3
 800a378:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a37a:	230b      	movs	r3, #11
 800a37c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a37e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a382:	4619      	mov	r1, r3
 800a384:	481b      	ldr	r0, [pc, #108]	; (800a3f4 <HAL_ETH_MspInit+0x1a0>)
 800a386:	f7fb fbd7 	bl	8005b38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800a38a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a38e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a390:	2302      	movs	r3, #2
 800a392:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a394:	2300      	movs	r3, #0
 800a396:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a398:	2303      	movs	r3, #3
 800a39a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a39c:	230b      	movs	r3, #11
 800a39e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a3a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a3a4:	4619      	mov	r1, r3
 800a3a6:	4814      	ldr	r0, [pc, #80]	; (800a3f8 <HAL_ETH_MspInit+0x1a4>)
 800a3a8:	f7fb fbc6 	bl	8005b38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800a3ac:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a3b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a3b2:	2302      	movs	r3, #2
 800a3b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a3ba:	2303      	movs	r3, #3
 800a3bc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a3be:	230b      	movs	r3, #11
 800a3c0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800a3c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a3c6:	4619      	mov	r1, r3
 800a3c8:	480c      	ldr	r0, [pc, #48]	; (800a3fc <HAL_ETH_MspInit+0x1a8>)
 800a3ca:	f7fb fbb5 	bl	8005b38 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 7, 0);
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	2107      	movs	r1, #7
 800a3d2:	203d      	movs	r0, #61	; 0x3d
 800a3d4:	f7f7 febe 	bl	8002154 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800a3d8:	203d      	movs	r0, #61	; 0x3d
 800a3da:	f7f7 fed5 	bl	8002188 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800a3de:	bf00      	nop
 800a3e0:	3738      	adds	r7, #56	; 0x38
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	bd80      	pop	{r7, pc}
 800a3e6:	bf00      	nop
 800a3e8:	40028000 	.word	0x40028000
 800a3ec:	58024400 	.word	0x58024400
 800a3f0:	58020800 	.word	0x58020800
 800a3f4:	58020000 	.word	0x58020000
 800a3f8:	58020400 	.word	0x58020400
 800a3fc:	58021800 	.word	0x58021800

0800a400 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 800a400:	b580      	push	{r7, lr}
 800a402:	b082      	sub	sp, #8
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 800a408:	4b04      	ldr	r3, [pc, #16]	; (800a41c <HAL_ETH_RxCpltCallback+0x1c>)
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	4618      	mov	r0, r3
 800a40e:	f000 fd31 	bl	800ae74 <osSemaphoreRelease>
}
 800a412:	bf00      	nop
 800a414:	3708      	adds	r7, #8
 800a416:	46bd      	mov	sp, r7
 800a418:	bd80      	pop	{r7, pc}
 800a41a:	bf00      	nop
 800a41c:	24000484 	.word	0x24000484

0800a420 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800a420:	b5b0      	push	{r4, r5, r7, lr}
 800a422:	b0ac      	sub	sp, #176	; 0xb0
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800a428:	2300      	movs	r3, #0
 800a42a:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
  uint32_t idx = 0;
 800a42e:	2300      	movs	r3, #0
 800a430:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  ETH_MACConfigTypeDef MACConf;
  int32_t PHYLinkState;
  uint32_t duplex, speed = 0;
 800a434:	2300      	movs	r3, #0
 800a436:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800a43a:	4b91      	ldr	r3, [pc, #580]	; (800a680 <low_level_init+0x260>)
 800a43c:	4a91      	ldr	r2, [pc, #580]	; (800a684 <low_level_init+0x264>)
 800a43e:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800a440:	2300      	movs	r3, #0
 800a442:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 800a446:	2380      	movs	r3, #128	; 0x80
 800a448:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 800a44c:	23e1      	movs	r3, #225	; 0xe1
 800a44e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 800a452:	2300      	movs	r3, #0
 800a454:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 800a458:	2300      	movs	r3, #0
 800a45a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 800a45e:	2300      	movs	r3, #0
 800a460:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 800a464:	4a86      	ldr	r2, [pc, #536]	; (800a680 <low_level_init+0x260>)
 800a466:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a46a:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800a46c:	4b84      	ldr	r3, [pc, #528]	; (800a680 <low_level_init+0x260>)
 800a46e:	2201      	movs	r2, #1
 800a470:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800a472:	4b83      	ldr	r3, [pc, #524]	; (800a680 <low_level_init+0x260>)
 800a474:	4a84      	ldr	r2, [pc, #528]	; (800a688 <low_level_init+0x268>)
 800a476:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800a478:	4b81      	ldr	r3, [pc, #516]	; (800a680 <low_level_init+0x260>)
 800a47a:	4a84      	ldr	r2, [pc, #528]	; (800a68c <low_level_init+0x26c>)
 800a47c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800a47e:	4b80      	ldr	r3, [pc, #512]	; (800a680 <low_level_init+0x260>)
 800a480:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800a484:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800a486:	487e      	ldr	r0, [pc, #504]	; (800a680 <low_level_init+0x260>)
 800a488:	f7f9 fcc4 	bl	8003e14 <HAL_ETH_Init>
 800a48c:	4603      	mov	r3, r0
 800a48e:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800a492:	2234      	movs	r2, #52	; 0x34
 800a494:	2100      	movs	r1, #0
 800a496:	487e      	ldr	r0, [pc, #504]	; (800a690 <low_level_init+0x270>)
 800a498:	f016 f919 	bl	80206ce <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800a49c:	4b7c      	ldr	r3, [pc, #496]	; (800a690 <low_level_init+0x270>)
 800a49e:	2221      	movs	r2, #33	; 0x21
 800a4a0:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800a4a2:	4b7b      	ldr	r3, [pc, #492]	; (800a690 <low_level_init+0x270>)
 800a4a4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800a4a8:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800a4aa:	4b79      	ldr	r3, [pc, #484]	; (800a690 <low_level_init+0x270>)
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800a4b0:	4878      	ldr	r0, [pc, #480]	; (800a694 <low_level_init+0x274>)
 800a4b2:	f008 fd55 	bl	8012f60 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	2206      	movs	r2, #6
 800a4ba:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800a4be:	4b70      	ldr	r3, [pc, #448]	; (800a680 <low_level_init+0x260>)
 800a4c0:	685b      	ldr	r3, [r3, #4]
 800a4c2:	781a      	ldrb	r2, [r3, #0]
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800a4ca:	4b6d      	ldr	r3, [pc, #436]	; (800a680 <low_level_init+0x260>)
 800a4cc:	685b      	ldr	r3, [r3, #4]
 800a4ce:	785a      	ldrb	r2, [r3, #1]
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800a4d6:	4b6a      	ldr	r3, [pc, #424]	; (800a680 <low_level_init+0x260>)
 800a4d8:	685b      	ldr	r3, [r3, #4]
 800a4da:	789a      	ldrb	r2, [r3, #2]
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800a4e2:	4b67      	ldr	r3, [pc, #412]	; (800a680 <low_level_init+0x260>)
 800a4e4:	685b      	ldr	r3, [r3, #4]
 800a4e6:	78da      	ldrb	r2, [r3, #3]
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800a4ee:	4b64      	ldr	r3, [pc, #400]	; (800a680 <low_level_init+0x260>)
 800a4f0:	685b      	ldr	r3, [r3, #4]
 800a4f2:	791a      	ldrb	r2, [r3, #4]
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800a4fa:	4b61      	ldr	r3, [pc, #388]	; (800a680 <low_level_init+0x260>)
 800a4fc:	685b      	ldr	r3, [r3, #4]
 800a4fe:	795a      	ldrb	r2, [r3, #5]
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800a50c:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a514:	f043 030a 	orr.w	r3, r3, #10
 800a518:	b2da      	uxtb	r2, r3
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 800a520:	2300      	movs	r3, #0
 800a522:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a526:	e012      	b.n	800a54e <low_level_init+0x12e>
  {
    HAL_ETH_DescAssignMemory(&heth, idx, Rx_Buff[idx], NULL);
 800a528:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a52c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800a530:	fb02 f303 	mul.w	r3, r2, r3
 800a534:	4a58      	ldr	r2, [pc, #352]	; (800a698 <low_level_init+0x278>)
 800a536:	441a      	add	r2, r3
 800a538:	2300      	movs	r3, #0
 800a53a:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 800a53e:	4850      	ldr	r0, [pc, #320]	; (800a680 <low_level_init+0x260>)
 800a540:	f7f9 fd42 	bl	8003fc8 <HAL_ETH_DescAssignMemory>
  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 800a544:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a548:	3301      	adds	r3, #1
 800a54a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a54e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a552:	2b03      	cmp	r3, #3
 800a554:	d9e8      	bls.n	800a528 <low_level_init+0x108>
  }

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 800a556:	2300      	movs	r3, #0
 800a558:	62bb      	str	r3, [r7, #40]	; 0x28
 800a55a:	2300      	movs	r3, #0
 800a55c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(SEM) , 1 );
 800a55e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a562:	2101      	movs	r1, #1
 800a564:	4618      	mov	r0, r3
 800a566:	f000 fc03 	bl	800ad70 <osSemaphoreCreate>
 800a56a:	4602      	mov	r2, r0
 800a56c:	4b4b      	ldr	r3, [pc, #300]	; (800a69c <low_level_init+0x27c>)
 800a56e:	601a      	str	r2, [r3, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800a570:	4b4b      	ldr	r3, [pc, #300]	; (800a6a0 <low_level_init+0x280>)
 800a572:	f107 040c 	add.w	r4, r7, #12
 800a576:	461d      	mov	r5, r3
 800a578:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a57a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a57c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a580:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 800a584:	f107 030c 	add.w	r3, r7, #12
 800a588:	6879      	ldr	r1, [r7, #4]
 800a58a:	4618      	mov	r0, r3
 800a58c:	f000 faf3 	bl	800ab76 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800a590:	4944      	ldr	r1, [pc, #272]	; (800a6a4 <low_level_init+0x284>)
 800a592:	4845      	ldr	r0, [pc, #276]	; (800a6a8 <low_level_init+0x288>)
 800a594:	f7f7 fb49 	bl	8001c2a <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800a598:	4843      	ldr	r0, [pc, #268]	; (800a6a8 <low_level_init+0x288>)
 800a59a:	f7f7 fb78 	bl	8001c8e <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800a59e:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d165      	bne.n	800a672 <low_level_init+0x252>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800a5a6:	4840      	ldr	r0, [pc, #256]	; (800a6a8 <low_level_init+0x288>)
 800a5a8:	f7f7 fc19 	bl	8001dde <LAN8742_GetLinkState>
 800a5ac:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800a5b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a5b4:	2b01      	cmp	r3, #1
 800a5b6:	dc06      	bgt.n	800a5c6 <low_level_init+0x1a6>
    {
      netif_set_link_down(netif);
 800a5b8:	6878      	ldr	r0, [r7, #4]
 800a5ba:	f009 f93d 	bl	8013838 <netif_set_link_down>
      netif_set_down(netif);
 800a5be:	6878      	ldr	r0, [r7, #4]
 800a5c0:	f009 f8d4 	bl	801376c <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800a5c4:	e057      	b.n	800a676 <low_level_init+0x256>
      switch (PHYLinkState)
 800a5c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a5ca:	3b02      	subs	r3, #2
 800a5cc:	2b03      	cmp	r3, #3
 800a5ce:	d82b      	bhi.n	800a628 <low_level_init+0x208>
 800a5d0:	a201      	add	r2, pc, #4	; (adr r2, 800a5d8 <low_level_init+0x1b8>)
 800a5d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5d6:	bf00      	nop
 800a5d8:	0800a5e9 	.word	0x0800a5e9
 800a5dc:	0800a5fb 	.word	0x0800a5fb
 800a5e0:	0800a60b 	.word	0x0800a60b
 800a5e4:	0800a61b 	.word	0x0800a61b
        duplex = ETH_FULLDUPLEX_MODE;
 800a5e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a5ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 800a5f0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a5f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800a5f8:	e01f      	b.n	800a63a <low_level_init+0x21a>
        duplex = ETH_HALFDUPLEX_MODE;
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 800a600:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a604:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800a608:	e017      	b.n	800a63a <low_level_init+0x21a>
        duplex = ETH_FULLDUPLEX_MODE;
 800a60a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a60e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_10M;
 800a612:	2300      	movs	r3, #0
 800a614:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800a618:	e00f      	b.n	800a63a <low_level_init+0x21a>
        duplex = ETH_HALFDUPLEX_MODE;
 800a61a:	2300      	movs	r3, #0
 800a61c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_10M;
 800a620:	2300      	movs	r3, #0
 800a622:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800a626:	e008      	b.n	800a63a <low_level_init+0x21a>
        duplex = ETH_FULLDUPLEX_MODE;
 800a628:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a62c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 800a630:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a634:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800a638:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 800a63a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a63e:	4619      	mov	r1, r3
 800a640:	480f      	ldr	r0, [pc, #60]	; (800a680 <low_level_init+0x260>)
 800a642:	f7fa faa3 	bl	8004b8c <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800a646:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a64a:	653b      	str	r3, [r7, #80]	; 0x50
    MACConf.Speed = speed;
 800a64c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a650:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800a652:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a656:	4619      	mov	r1, r3
 800a658:	4809      	ldr	r0, [pc, #36]	; (800a680 <low_level_init+0x260>)
 800a65a:	f7fa fc6b 	bl	8004f34 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 800a65e:	4808      	ldr	r0, [pc, #32]	; (800a680 <low_level_init+0x260>)
 800a660:	f7f9 fcf3 	bl	800404a <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800a664:	6878      	ldr	r0, [r7, #4]
 800a666:	f009 f815 	bl	8013694 <netif_set_up>
    netif_set_link_up(netif);
 800a66a:	6878      	ldr	r0, [r7, #4]
 800a66c:	f009 f8b0 	bl	80137d0 <netif_set_link_up>
}
 800a670:	e001      	b.n	800a676 <low_level_init+0x256>
    Error_Handler();
 800a672:	f7f6 fd1b 	bl	80010ac <Error_Handler>
}
 800a676:	bf00      	nop
 800a678:	37b0      	adds	r7, #176	; 0xb0
 800a67a:	46bd      	mov	sp, r7
 800a67c:	bdb0      	pop	{r4, r5, r7, pc}
 800a67e:	bf00      	nop
 800a680:	24045cd4 	.word	0x24045cd4
 800a684:	40028000 	.word	0x40028000
 800a688:	30040060 	.word	0x30040060
 800a68c:	30040000 	.word	0x30040000
 800a690:	24045d44 	.word	0x24045d44
 800a694:	08026ee0 	.word	0x08026ee0
 800a698:	30040200 	.word	0x30040200
 800a69c:	24000484 	.word	0x24000484
 800a6a0:	08023168 	.word	0x08023168
 800a6a4:	24000010 	.word	0x24000010
 800a6a8:	24045cb4 	.word	0x24045cb4

0800a6ac <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	b092      	sub	sp, #72	; 0x48
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
 800a6b4:	6039      	str	r1, [r7, #0]
  uint32_t i=0;
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q;
  err_t errval = ERR_OK;
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800a6c0:	f107 030c 	add.w	r3, r7, #12
 800a6c4:	2230      	movs	r2, #48	; 0x30
 800a6c6:	2100      	movs	r1, #0
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	f016 f800 	bl	80206ce <memset>

  for(q = p; q != NULL; q = q->next)
 800a6ce:	683b      	ldr	r3, [r7, #0]
 800a6d0:	643b      	str	r3, [r7, #64]	; 0x40
 800a6d2:	e049      	b.n	800a768 <low_level_output+0xbc>
  {
    if(i >= ETH_TX_DESC_CNT)
 800a6d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a6d6:	2b03      	cmp	r3, #3
 800a6d8:	d902      	bls.n	800a6e0 <low_level_output+0x34>
      return ERR_IF;
 800a6da:	f06f 030b 	mvn.w	r3, #11
 800a6de:	e056      	b.n	800a78e <low_level_output+0xe2>

    Txbuffer[i].buffer = q->payload;
 800a6e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a6e2:	6859      	ldr	r1, [r3, #4]
 800a6e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a6e6:	4613      	mov	r3, r2
 800a6e8:	005b      	lsls	r3, r3, #1
 800a6ea:	4413      	add	r3, r2
 800a6ec:	009b      	lsls	r3, r3, #2
 800a6ee:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a6f2:	4413      	add	r3, r2
 800a6f4:	3b3c      	subs	r3, #60	; 0x3c
 800a6f6:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800a6f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a6fa:	895b      	ldrh	r3, [r3, #10]
 800a6fc:	4619      	mov	r1, r3
 800a6fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a700:	4613      	mov	r3, r2
 800a702:	005b      	lsls	r3, r3, #1
 800a704:	4413      	add	r3, r2
 800a706:	009b      	lsls	r3, r3, #2
 800a708:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a70c:	4413      	add	r3, r2
 800a70e:	3b38      	subs	r3, #56	; 0x38
 800a710:	6019      	str	r1, [r3, #0]

    if(i>0)
 800a712:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a714:	2b00      	cmp	r3, #0
 800a716:	d012      	beq.n	800a73e <low_level_output+0x92>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800a718:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a71a:	1e5a      	subs	r2, r3, #1
 800a71c:	f107 000c 	add.w	r0, r7, #12
 800a720:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a722:	460b      	mov	r3, r1
 800a724:	005b      	lsls	r3, r3, #1
 800a726:	440b      	add	r3, r1
 800a728:	009b      	lsls	r3, r3, #2
 800a72a:	18c1      	adds	r1, r0, r3
 800a72c:	4613      	mov	r3, r2
 800a72e:	005b      	lsls	r3, r3, #1
 800a730:	4413      	add	r3, r2
 800a732:	009b      	lsls	r3, r3, #2
 800a734:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a738:	4413      	add	r3, r2
 800a73a:	3b34      	subs	r3, #52	; 0x34
 800a73c:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800a73e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d10a      	bne.n	800a75c <low_level_output+0xb0>
    {
      Txbuffer[i].next = NULL;
 800a746:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a748:	4613      	mov	r3, r2
 800a74a:	005b      	lsls	r3, r3, #1
 800a74c:	4413      	add	r3, r2
 800a74e:	009b      	lsls	r3, r3, #2
 800a750:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a754:	4413      	add	r3, r2
 800a756:	3b34      	subs	r3, #52	; 0x34
 800a758:	2200      	movs	r2, #0
 800a75a:	601a      	str	r2, [r3, #0]
    }

    i++;
 800a75c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a75e:	3301      	adds	r3, #1
 800a760:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800a762:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	643b      	str	r3, [r7, #64]	; 0x40
 800a768:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d1b2      	bne.n	800a6d4 <low_level_output+0x28>
  }

  TxConfig.Length =  p->tot_len;
 800a76e:	683b      	ldr	r3, [r7, #0]
 800a770:	891b      	ldrh	r3, [r3, #8]
 800a772:	461a      	mov	r2, r3
 800a774:	4b08      	ldr	r3, [pc, #32]	; (800a798 <low_level_output+0xec>)
 800a776:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800a778:	4a07      	ldr	r2, [pc, #28]	; (800a798 <low_level_output+0xec>)
 800a77a:	f107 030c 	add.w	r3, r7, #12
 800a77e:	6093      	str	r3, [r2, #8]

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800a780:	2214      	movs	r2, #20
 800a782:	4905      	ldr	r1, [pc, #20]	; (800a798 <low_level_output+0xec>)
 800a784:	4805      	ldr	r0, [pc, #20]	; (800a79c <low_level_output+0xf0>)
 800a786:	f7f9 fd5f 	bl	8004248 <HAL_ETH_Transmit>

  return errval;
 800a78a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800a78e:	4618      	mov	r0, r3
 800a790:	3748      	adds	r7, #72	; 0x48
 800a792:	46bd      	mov	sp, r7
 800a794:	bd80      	pop	{r7, pc}
 800a796:	bf00      	nop
 800a798:	24045d44 	.word	0x24045d44
 800a79c:	24045cd4 	.word	0x24045cd4

0800a7a0 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b094      	sub	sp, #80	; 0x50
 800a7a4:	af02      	add	r7, sp, #8
 800a7a6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	647b      	str	r3, [r7, #68]	; 0x44
  ETH_BufferTypeDef RxBuff[ETH_RX_DESC_CNT];
  uint32_t framelength = 0, i = 0;
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	60bb      	str	r3, [r7, #8]
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	643b      	str	r3, [r7, #64]	; 0x40
  struct pbuf_custom* custom_pbuf;

  memset(RxBuff, 0 , ETH_RX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800a7b4:	f107 030c 	add.w	r3, r7, #12
 800a7b8:	2230      	movs	r2, #48	; 0x30
 800a7ba:	2100      	movs	r1, #0
 800a7bc:	4618      	mov	r0, r3
 800a7be:	f015 ff86 	bl	80206ce <memset>

  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	643b      	str	r3, [r7, #64]	; 0x40
 800a7c6:	e015      	b.n	800a7f4 <low_level_input+0x54>
  {
    RxBuff[i].next=&RxBuff[i+1];
 800a7c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a7ca:	1c5a      	adds	r2, r3, #1
 800a7cc:	f107 010c 	add.w	r1, r7, #12
 800a7d0:	4613      	mov	r3, r2
 800a7d2:	005b      	lsls	r3, r3, #1
 800a7d4:	4413      	add	r3, r2
 800a7d6:	009b      	lsls	r3, r3, #2
 800a7d8:	4419      	add	r1, r3
 800a7da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a7dc:	4613      	mov	r3, r2
 800a7de:	005b      	lsls	r3, r3, #1
 800a7e0:	4413      	add	r3, r2
 800a7e2:	009b      	lsls	r3, r3, #2
 800a7e4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a7e8:	4413      	add	r3, r2
 800a7ea:	3b34      	subs	r3, #52	; 0x34
 800a7ec:	6019      	str	r1, [r3, #0]
  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 800a7ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a7f0:	3301      	adds	r3, #1
 800a7f2:	643b      	str	r3, [r7, #64]	; 0x40
 800a7f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a7f6:	2b02      	cmp	r3, #2
 800a7f8:	d9e6      	bls.n	800a7c8 <low_level_input+0x28>
  }

  if (HAL_ETH_GetRxDataBuffer(&heth, RxBuff) == HAL_OK)
 800a7fa:	f107 030c 	add.w	r3, r7, #12
 800a7fe:	4619      	mov	r1, r3
 800a800:	4818      	ldr	r0, [pc, #96]	; (800a864 <low_level_input+0xc4>)
 800a802:	f7f9 fe9a 	bl	800453a <HAL_ETH_GetRxDataBuffer>
 800a806:	4603      	mov	r3, r0
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d125      	bne.n	800a858 <low_level_input+0xb8>
  {
    HAL_ETH_GetRxDataLength(&heth, &framelength);
 800a80c:	f107 0308 	add.w	r3, r7, #8
 800a810:	4619      	mov	r1, r3
 800a812:	4814      	ldr	r0, [pc, #80]	; (800a864 <low_level_input+0xc4>)
 800a814:	f7f9 ff2f 	bl	8004676 <HAL_ETH_GetRxDataLength>

    /* Build Rx descriptor to be ready for next data reception */
    HAL_ETH_BuildRxDescriptors(&heth);
 800a818:	4812      	ldr	r0, [pc, #72]	; (800a864 <low_level_input+0xc4>)
 800a81a:	f7f9 ff5f 	bl	80046dc <HAL_ETH_BuildRxDescriptors>

#if !defined(DUAL_CORE) || defined(CORE_CM7)
    /* Invalidate data cache for ETH Rx Buffers */
    SCB_InvalidateDCache_by_Addr((uint32_t *)RxBuff->buffer, framelength);
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	68ba      	ldr	r2, [r7, #8]
 800a822:	4611      	mov	r1, r2
 800a824:	4618      	mov	r0, r3
 800a826:	f7ff fceb 	bl	800a200 <SCB_InvalidateDCache_by_Addr>
#endif

    custom_pbuf  = (struct pbuf_custom*)LWIP_MEMPOOL_ALLOC(RX_POOL);
 800a82a:	480f      	ldr	r0, [pc, #60]	; (800a868 <low_level_input+0xc8>)
 800a82c:	f008 fc14 	bl	8013058 <memp_malloc_pool>
 800a830:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(custom_pbuf != NULL)
 800a832:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a834:	2b00      	cmp	r3, #0
 800a836:	d00f      	beq.n	800a858 <low_level_input+0xb8>
    {
      custom_pbuf->custom_free_function = pbuf_free_custom;
 800a838:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a83a:	4a0c      	ldr	r2, [pc, #48]	; (800a86c <low_level_input+0xcc>)
 800a83c:	611a      	str	r2, [r3, #16]
      p = pbuf_alloced_custom(PBUF_RAW, framelength, PBUF_REF, custom_pbuf, RxBuff->buffer, framelength);
 800a83e:	68bb      	ldr	r3, [r7, #8]
 800a840:	b299      	uxth	r1, r3
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	68ba      	ldr	r2, [r7, #8]
 800a846:	b292      	uxth	r2, r2
 800a848:	9201      	str	r2, [sp, #4]
 800a84a:	9300      	str	r3, [sp, #0]
 800a84c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a84e:	2241      	movs	r2, #65	; 0x41
 800a850:	2000      	movs	r0, #0
 800a852:	f009 fa11 	bl	8013c78 <pbuf_alloced_custom>
 800a856:	6478      	str	r0, [r7, #68]	; 0x44
    }
  }

  return p;
 800a858:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800a85a:	4618      	mov	r0, r3
 800a85c:	3748      	adds	r7, #72	; 0x48
 800a85e:	46bd      	mov	sp, r7
 800a860:	bd80      	pop	{r7, pc}
 800a862:	bf00      	nop
 800a864:	24045cd4 	.word	0x24045cd4
 800a868:	08026ee0 	.word	0x08026ee0
 800a86c:	0800a91d 	.word	0x0800a91d

0800a870 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 800a870:	b580      	push	{r7, lr}
 800a872:	b084      	sub	sp, #16
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800a87c:	4b0f      	ldr	r3, [pc, #60]	; (800a8bc <ethernetif_input+0x4c>)
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	f04f 31ff 	mov.w	r1, #4294967295
 800a884:	4618      	mov	r0, r3
 800a886:	f000 faa7 	bl	800add8 <osSemaphoreWait>
 800a88a:	4603      	mov	r3, r0
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d1f5      	bne.n	800a87c <ethernetif_input+0xc>
    {
      do
      {
        p = low_level_input( netif );
 800a890:	68f8      	ldr	r0, [r7, #12]
 800a892:	f7ff ff85 	bl	800a7a0 <low_level_input>
 800a896:	60b8      	str	r0, [r7, #8]
        if (p != NULL)
 800a898:	68bb      	ldr	r3, [r7, #8]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d00a      	beq.n	800a8b4 <ethernetif_input+0x44>
        {
          if (netif->input( p, netif) != ERR_OK )
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	691b      	ldr	r3, [r3, #16]
 800a8a2:	68f9      	ldr	r1, [r7, #12]
 800a8a4:	68b8      	ldr	r0, [r7, #8]
 800a8a6:	4798      	blx	r3
 800a8a8:	4603      	mov	r3, r0
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d002      	beq.n	800a8b4 <ethernetif_input+0x44>
          {
            pbuf_free(p);
 800a8ae:	68b8      	ldr	r0, [r7, #8]
 800a8b0:	f009 fbce 	bl	8014050 <pbuf_free>
          }
        }
      } while(p!=NULL);
 800a8b4:	68bb      	ldr	r3, [r7, #8]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d1ea      	bne.n	800a890 <ethernetif_input+0x20>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800a8ba:	e7df      	b.n	800a87c <ethernetif_input+0xc>
 800a8bc:	24000484 	.word	0x24000484

0800a8c0 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b082      	sub	sp, #8
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d106      	bne.n	800a8dc <ethernetif_init+0x1c>
 800a8ce:	4b0e      	ldr	r3, [pc, #56]	; (800a908 <ethernetif_init+0x48>)
 800a8d0:	f44f 7212 	mov.w	r2, #584	; 0x248
 800a8d4:	490d      	ldr	r1, [pc, #52]	; (800a90c <ethernetif_init+0x4c>)
 800a8d6:	480e      	ldr	r0, [pc, #56]	; (800a910 <ethernetif_init+0x50>)
 800a8d8:	f016 fb3a 	bl	8020f50 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2273      	movs	r2, #115	; 0x73
 800a8e0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2274      	movs	r2, #116	; 0x74
 800a8e8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	4a09      	ldr	r2, [pc, #36]	; (800a914 <ethernetif_init+0x54>)
 800a8f0:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	4a08      	ldr	r2, [pc, #32]	; (800a918 <ethernetif_init+0x58>)
 800a8f6:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800a8f8:	6878      	ldr	r0, [r7, #4]
 800a8fa:	f7ff fd91 	bl	800a420 <low_level_init>

  return ERR_OK;
 800a8fe:	2300      	movs	r3, #0
}
 800a900:	4618      	mov	r0, r3
 800a902:	3708      	adds	r7, #8
 800a904:	46bd      	mov	sp, r7
 800a906:	bd80      	pop	{r7, pc}
 800a908:	08023184 	.word	0x08023184
 800a90c:	080231a0 	.word	0x080231a0
 800a910:	080231b0 	.word	0x080231b0
 800a914:	0801062d 	.word	0x0801062d
 800a918:	0800a6ad 	.word	0x0800a6ad

0800a91c <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b084      	sub	sp, #16
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	60fb      	str	r3, [r7, #12]

  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800a928:	68f9      	ldr	r1, [r7, #12]
 800a92a:	4803      	ldr	r0, [pc, #12]	; (800a938 <pbuf_free_custom+0x1c>)
 800a92c:	f008 fc08 	bl	8013140 <memp_free_pool>
}
 800a930:	bf00      	nop
 800a932:	3710      	adds	r7, #16
 800a934:	46bd      	mov	sp, r7
 800a936:	bd80      	pop	{r7, pc}
 800a938:	08026ee0 	.word	0x08026ee0

0800a93c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800a940:	f7f7 fb24 	bl	8001f8c <HAL_GetTick>
 800a944:	4603      	mov	r3, r0
}
 800a946:	4618      	mov	r0, r3
 800a948:	bd80      	pop	{r7, pc}
	...

0800a94c <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800a94c:	b580      	push	{r7, lr}
 800a94e:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800a950:	4802      	ldr	r0, [pc, #8]	; (800a95c <ETH_PHY_IO_Init+0x10>)
 800a952:	f7fa fb09 	bl	8004f68 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800a956:	2300      	movs	r3, #0
}
 800a958:	4618      	mov	r0, r3
 800a95a:	bd80      	pop	{r7, pc}
 800a95c:	24045cd4 	.word	0x24045cd4

0800a960 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800a960:	b480      	push	{r7}
 800a962:	af00      	add	r7, sp, #0
  return 0;
 800a964:	2300      	movs	r3, #0
}
 800a966:	4618      	mov	r0, r3
 800a968:	46bd      	mov	sp, r7
 800a96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96e:	4770      	bx	lr

0800a970 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b084      	sub	sp, #16
 800a974:	af00      	add	r7, sp, #0
 800a976:	60f8      	str	r0, [r7, #12]
 800a978:	60b9      	str	r1, [r7, #8]
 800a97a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	68ba      	ldr	r2, [r7, #8]
 800a980:	68f9      	ldr	r1, [r7, #12]
 800a982:	4807      	ldr	r0, [pc, #28]	; (800a9a0 <ETH_PHY_IO_ReadReg+0x30>)
 800a984:	f7fa f85a 	bl	8004a3c <HAL_ETH_ReadPHYRegister>
 800a988:	4603      	mov	r3, r0
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d002      	beq.n	800a994 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800a98e:	f04f 33ff 	mov.w	r3, #4294967295
 800a992:	e000      	b.n	800a996 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800a994:	2300      	movs	r3, #0
}
 800a996:	4618      	mov	r0, r3
 800a998:	3710      	adds	r7, #16
 800a99a:	46bd      	mov	sp, r7
 800a99c:	bd80      	pop	{r7, pc}
 800a99e:	bf00      	nop
 800a9a0:	24045cd4 	.word	0x24045cd4

0800a9a4 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800a9a4:	b580      	push	{r7, lr}
 800a9a6:	b084      	sub	sp, #16
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	60f8      	str	r0, [r7, #12]
 800a9ac:	60b9      	str	r1, [r7, #8]
 800a9ae:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	68ba      	ldr	r2, [r7, #8]
 800a9b4:	68f9      	ldr	r1, [r7, #12]
 800a9b6:	4807      	ldr	r0, [pc, #28]	; (800a9d4 <ETH_PHY_IO_WriteReg+0x30>)
 800a9b8:	f7fa f894 	bl	8004ae4 <HAL_ETH_WritePHYRegister>
 800a9bc:	4603      	mov	r3, r0
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d002      	beq.n	800a9c8 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800a9c2:	f04f 33ff 	mov.w	r3, #4294967295
 800a9c6:	e000      	b.n	800a9ca <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800a9c8:	2300      	movs	r3, #0
}
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	3710      	adds	r7, #16
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	bd80      	pop	{r7, pc}
 800a9d2:	bf00      	nop
 800a9d4:	24045cd4 	.word	0x24045cd4

0800a9d8 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800a9dc:	f7f7 fad6 	bl	8001f8c <HAL_GetTick>
 800a9e0:	4603      	mov	r3, r0
}
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	bd80      	pop	{r7, pc}
	...

0800a9e8 <ethernet_link_thread>:
  * @param  argument: netif
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 800a9e8:	b580      	push	{r7, lr}
 800a9ea:	b0a0      	sub	sp, #128	; 0x80
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf;
  uint32_t PHYLinkState;
  uint32_t linkchanged = 0, speed = 0, duplex =0;
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	67bb      	str	r3, [r7, #120]	; 0x78
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	673b      	str	r3, [r7, #112]	; 0x70

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800aa00:	483a      	ldr	r0, [pc, #232]	; (800aaec <ethernet_link_thread+0x104>)
 800aa02:	f7f7 f9ec 	bl	8001dde <LAN8742_GetLinkState>
 800aa06:	4603      	mov	r3, r0
 800aa08:	66fb      	str	r3, [r7, #108]	; 0x6c

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800aa0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800aa0c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800aa10:	089b      	lsrs	r3, r3, #2
 800aa12:	f003 0301 	and.w	r3, r3, #1
 800aa16:	b2db      	uxtb	r3, r3
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d00c      	beq.n	800aa36 <ethernet_link_thread+0x4e>
 800aa1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa1e:	2b01      	cmp	r3, #1
 800aa20:	d809      	bhi.n	800aa36 <ethernet_link_thread+0x4e>
  {
    HAL_ETH_Stop_IT(&heth);
 800aa22:	4833      	ldr	r0, [pc, #204]	; (800aaf0 <ethernet_link_thread+0x108>)
 800aa24:	f7f9 fb96 	bl	8004154 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800aa28:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800aa2a:	f008 fe9f 	bl	801376c <netif_set_down>
    netif_set_link_down(netif);
 800aa2e:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800aa30:	f008 ff02 	bl	8013838 <netif_set_link_down>
 800aa34:	e055      	b.n	800aae2 <ethernet_link_thread+0xfa>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800aa36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800aa38:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800aa3c:	f003 0304 	and.w	r3, r3, #4
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d14e      	bne.n	800aae2 <ethernet_link_thread+0xfa>
 800aa44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa46:	2b01      	cmp	r3, #1
 800aa48:	d94b      	bls.n	800aae2 <ethernet_link_thread+0xfa>
  {
    switch (PHYLinkState)
 800aa4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa4c:	3b02      	subs	r3, #2
 800aa4e:	2b03      	cmp	r3, #3
 800aa50:	d82a      	bhi.n	800aaa8 <ethernet_link_thread+0xc0>
 800aa52:	a201      	add	r2, pc, #4	; (adr r2, 800aa58 <ethernet_link_thread+0x70>)
 800aa54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa58:	0800aa69 	.word	0x0800aa69
 800aa5c:	0800aa7b 	.word	0x0800aa7b
 800aa60:	0800aa8b 	.word	0x0800aa8b
 800aa64:	0800aa9b 	.word	0x0800aa9b
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800aa68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800aa6c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800aa6e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800aa72:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800aa74:	2301      	movs	r3, #1
 800aa76:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800aa78:	e017      	b.n	800aaaa <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800aa7e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800aa82:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800aa84:	2301      	movs	r3, #1
 800aa86:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800aa88:	e00f      	b.n	800aaaa <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800aa8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800aa8e:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800aa90:	2300      	movs	r3, #0
 800aa92:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800aa94:	2301      	movs	r3, #1
 800aa96:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800aa98:	e007      	b.n	800aaaa <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800aaa2:	2301      	movs	r3, #1
 800aaa4:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800aaa6:	e000      	b.n	800aaaa <ethernet_link_thread+0xc2>
    default:
      break;
 800aaa8:	bf00      	nop
    }

    if(linkchanged)
 800aaaa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d018      	beq.n	800aae2 <ethernet_link_thread+0xfa>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800aab0:	f107 0308 	add.w	r3, r7, #8
 800aab4:	4619      	mov	r1, r3
 800aab6:	480e      	ldr	r0, [pc, #56]	; (800aaf0 <ethernet_link_thread+0x108>)
 800aab8:	f7fa f868 	bl	8004b8c <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800aabc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aabe:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 800aac0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aac2:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800aac4:	f107 0308 	add.w	r3, r7, #8
 800aac8:	4619      	mov	r1, r3
 800aaca:	4809      	ldr	r0, [pc, #36]	; (800aaf0 <ethernet_link_thread+0x108>)
 800aacc:	f7fa fa32 	bl	8004f34 <HAL_ETH_SetMACConfig>

      HAL_ETH_Start_IT(&heth);
 800aad0:	4807      	ldr	r0, [pc, #28]	; (800aaf0 <ethernet_link_thread+0x108>)
 800aad2:	f7f9 faba 	bl	800404a <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800aad6:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800aad8:	f008 fddc 	bl	8013694 <netif_set_up>
      netif_set_link_up(netif);
 800aadc:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800aade:	f008 fe77 	bl	80137d0 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800aae2:	2064      	movs	r0, #100	; 0x64
 800aae4:	f000 f893 	bl	800ac0e <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800aae8:	e78a      	b.n	800aa00 <ethernet_link_thread+0x18>
 800aaea:	bf00      	nop
 800aaec:	24045cb4 	.word	0x24045cb4
 800aaf0:	24045cd4 	.word	0x24045cd4

0800aaf4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800aaf4:	b480      	push	{r7}
 800aaf6:	b085      	sub	sp, #20
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	4603      	mov	r3, r0
 800aafc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800aafe:	2300      	movs	r3, #0
 800ab00:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800ab02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ab06:	2b84      	cmp	r3, #132	; 0x84
 800ab08:	d005      	beq.n	800ab16 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800ab0a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	4413      	add	r3, r2
 800ab12:	3303      	adds	r3, #3
 800ab14:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800ab16:	68fb      	ldr	r3, [r7, #12]
}
 800ab18:	4618      	mov	r0, r3
 800ab1a:	3714      	adds	r7, #20
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab22:	4770      	bx	lr

0800ab24 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800ab24:	b480      	push	{r7}
 800ab26:	b083      	sub	sp, #12
 800ab28:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ab2a:	f3ef 8305 	mrs	r3, IPSR
 800ab2e:	607b      	str	r3, [r7, #4]
  return(result);
 800ab30:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	bf14      	ite	ne
 800ab36:	2301      	movne	r3, #1
 800ab38:	2300      	moveq	r3, #0
 800ab3a:	b2db      	uxtb	r3, r3
}
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	370c      	adds	r7, #12
 800ab40:	46bd      	mov	sp, r7
 800ab42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab46:	4770      	bx	lr

0800ab48 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800ab4c:	f002 f922 	bl	800cd94 <vTaskStartScheduler>
  
  return osOK;
 800ab50:	2300      	movs	r3, #0
}
 800ab52:	4618      	mov	r0, r3
 800ab54:	bd80      	pop	{r7, pc}

0800ab56 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800ab56:	b580      	push	{r7, lr}
 800ab58:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800ab5a:	f7ff ffe3 	bl	800ab24 <inHandlerMode>
 800ab5e:	4603      	mov	r3, r0
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d003      	beq.n	800ab6c <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800ab64:	f002 fa2e 	bl	800cfc4 <xTaskGetTickCountFromISR>
 800ab68:	4603      	mov	r3, r0
 800ab6a:	e002      	b.n	800ab72 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800ab6c:	f002 fa1a 	bl	800cfa4 <xTaskGetTickCount>
 800ab70:	4603      	mov	r3, r0
  }
}
 800ab72:	4618      	mov	r0, r3
 800ab74:	bd80      	pop	{r7, pc}

0800ab76 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800ab76:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab78:	b089      	sub	sp, #36	; 0x24
 800ab7a:	af04      	add	r7, sp, #16
 800ab7c:	6078      	str	r0, [r7, #4]
 800ab7e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	695b      	ldr	r3, [r3, #20]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d020      	beq.n	800abca <osThreadCreate+0x54>
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	699b      	ldr	r3, [r3, #24]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d01c      	beq.n	800abca <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	685c      	ldr	r4, [r3, #4]
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681d      	ldr	r5, [r3, #0]
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	691e      	ldr	r6, [r3, #16]
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800aba2:	4618      	mov	r0, r3
 800aba4:	f7ff ffa6 	bl	800aaf4 <makeFreeRtosPriority>
 800aba8:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	695b      	ldr	r3, [r3, #20]
 800abae:	687a      	ldr	r2, [r7, #4]
 800abb0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800abb2:	9202      	str	r2, [sp, #8]
 800abb4:	9301      	str	r3, [sp, #4]
 800abb6:	9100      	str	r1, [sp, #0]
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	4632      	mov	r2, r6
 800abbc:	4629      	mov	r1, r5
 800abbe:	4620      	mov	r0, r4
 800abc0:	f001 ff24 	bl	800ca0c <xTaskCreateStatic>
 800abc4:	4603      	mov	r3, r0
 800abc6:	60fb      	str	r3, [r7, #12]
 800abc8:	e01c      	b.n	800ac04 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	685c      	ldr	r4, [r3, #4]
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800abd6:	b29e      	uxth	r6, r3
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800abde:	4618      	mov	r0, r3
 800abe0:	f7ff ff88 	bl	800aaf4 <makeFreeRtosPriority>
 800abe4:	4602      	mov	r2, r0
 800abe6:	f107 030c 	add.w	r3, r7, #12
 800abea:	9301      	str	r3, [sp, #4]
 800abec:	9200      	str	r2, [sp, #0]
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	4632      	mov	r2, r6
 800abf2:	4629      	mov	r1, r5
 800abf4:	4620      	mov	r0, r4
 800abf6:	f001 ff63 	bl	800cac0 <xTaskCreate>
 800abfa:	4603      	mov	r3, r0
 800abfc:	2b01      	cmp	r3, #1
 800abfe:	d001      	beq.n	800ac04 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800ac00:	2300      	movs	r3, #0
 800ac02:	e000      	b.n	800ac06 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800ac04:	68fb      	ldr	r3, [r7, #12]
}
 800ac06:	4618      	mov	r0, r3
 800ac08:	3714      	adds	r7, #20
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ac0e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800ac0e:	b580      	push	{r7, lr}
 800ac10:	b084      	sub	sp, #16
 800ac12:	af00      	add	r7, sp, #0
 800ac14:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d001      	beq.n	800ac24 <osDelay+0x16>
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	e000      	b.n	800ac26 <osDelay+0x18>
 800ac24:	2301      	movs	r3, #1
 800ac26:	4618      	mov	r0, r3
 800ac28:	f002 f880 	bl	800cd2c <vTaskDelay>
  
  return osOK;
 800ac2c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800ac2e:	4618      	mov	r0, r3
 800ac30:	3710      	adds	r7, #16
 800ac32:	46bd      	mov	sp, r7
 800ac34:	bd80      	pop	{r7, pc}

0800ac36 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800ac36:	b580      	push	{r7, lr}
 800ac38:	b082      	sub	sp, #8
 800ac3a:	af00      	add	r7, sp, #0
 800ac3c:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	685b      	ldr	r3, [r3, #4]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d007      	beq.n	800ac56 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	685b      	ldr	r3, [r3, #4]
 800ac4a:	4619      	mov	r1, r3
 800ac4c:	2001      	movs	r0, #1
 800ac4e:	f001 f89a 	bl	800bd86 <xQueueCreateMutexStatic>
 800ac52:	4603      	mov	r3, r0
 800ac54:	e003      	b.n	800ac5e <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800ac56:	2001      	movs	r0, #1
 800ac58:	f001 f87d 	bl	800bd56 <xQueueCreateMutex>
 800ac5c:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800ac5e:	4618      	mov	r0, r3
 800ac60:	3708      	adds	r7, #8
 800ac62:	46bd      	mov	sp, r7
 800ac64:	bd80      	pop	{r7, pc}
	...

0800ac68 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	b084      	sub	sp, #16
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
 800ac70:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800ac72:	2300      	movs	r3, #0
 800ac74:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d101      	bne.n	800ac80 <osMutexWait+0x18>
    return osErrorParameter;
 800ac7c:	2380      	movs	r3, #128	; 0x80
 800ac7e:	e03a      	b.n	800acf6 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800ac80:	2300      	movs	r3, #0
 800ac82:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800ac84:	683b      	ldr	r3, [r7, #0]
 800ac86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac8a:	d103      	bne.n	800ac94 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800ac8c:	f04f 33ff 	mov.w	r3, #4294967295
 800ac90:	60fb      	str	r3, [r7, #12]
 800ac92:	e009      	b.n	800aca8 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800ac94:	683b      	ldr	r3, [r7, #0]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d006      	beq.n	800aca8 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800ac9a:	683b      	ldr	r3, [r7, #0]
 800ac9c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d101      	bne.n	800aca8 <osMutexWait+0x40>
      ticks = 1;
 800aca4:	2301      	movs	r3, #1
 800aca6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800aca8:	f7ff ff3c 	bl	800ab24 <inHandlerMode>
 800acac:	4603      	mov	r3, r0
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d017      	beq.n	800ace2 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800acb2:	f107 0308 	add.w	r3, r7, #8
 800acb6:	461a      	mov	r2, r3
 800acb8:	2100      	movs	r1, #0
 800acba:	6878      	ldr	r0, [r7, #4]
 800acbc:	f001 fc7a 	bl	800c5b4 <xQueueReceiveFromISR>
 800acc0:	4603      	mov	r3, r0
 800acc2:	2b01      	cmp	r3, #1
 800acc4:	d001      	beq.n	800acca <osMutexWait+0x62>
      return osErrorOS;
 800acc6:	23ff      	movs	r3, #255	; 0xff
 800acc8:	e015      	b.n	800acf6 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800acca:	68bb      	ldr	r3, [r7, #8]
 800accc:	2b00      	cmp	r3, #0
 800acce:	d011      	beq.n	800acf4 <osMutexWait+0x8c>
 800acd0:	4b0b      	ldr	r3, [pc, #44]	; (800ad00 <osMutexWait+0x98>)
 800acd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800acd6:	601a      	str	r2, [r3, #0]
 800acd8:	f3bf 8f4f 	dsb	sy
 800acdc:	f3bf 8f6f 	isb	sy
 800ace0:	e008      	b.n	800acf4 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800ace2:	68f9      	ldr	r1, [r7, #12]
 800ace4:	6878      	ldr	r0, [r7, #4]
 800ace6:	f001 fb5d 	bl	800c3a4 <xQueueSemaphoreTake>
 800acea:	4603      	mov	r3, r0
 800acec:	2b01      	cmp	r3, #1
 800acee:	d001      	beq.n	800acf4 <osMutexWait+0x8c>
    return osErrorOS;
 800acf0:	23ff      	movs	r3, #255	; 0xff
 800acf2:	e000      	b.n	800acf6 <osMutexWait+0x8e>
  }
  
  return osOK;
 800acf4:	2300      	movs	r3, #0
}
 800acf6:	4618      	mov	r0, r3
 800acf8:	3710      	adds	r7, #16
 800acfa:	46bd      	mov	sp, r7
 800acfc:	bd80      	pop	{r7, pc}
 800acfe:	bf00      	nop
 800ad00:	e000ed04 	.word	0xe000ed04

0800ad04 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b084      	sub	sp, #16
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800ad10:	2300      	movs	r3, #0
 800ad12:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800ad14:	f7ff ff06 	bl	800ab24 <inHandlerMode>
 800ad18:	4603      	mov	r3, r0
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d016      	beq.n	800ad4c <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800ad1e:	f107 0308 	add.w	r3, r7, #8
 800ad22:	4619      	mov	r1, r3
 800ad24:	6878      	ldr	r0, [r7, #4]
 800ad26:	f001 f9d7 	bl	800c0d8 <xQueueGiveFromISR>
 800ad2a:	4603      	mov	r3, r0
 800ad2c:	2b01      	cmp	r3, #1
 800ad2e:	d001      	beq.n	800ad34 <osMutexRelease+0x30>
      return osErrorOS;
 800ad30:	23ff      	movs	r3, #255	; 0xff
 800ad32:	e017      	b.n	800ad64 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ad34:	68bb      	ldr	r3, [r7, #8]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d013      	beq.n	800ad62 <osMutexRelease+0x5e>
 800ad3a:	4b0c      	ldr	r3, [pc, #48]	; (800ad6c <osMutexRelease+0x68>)
 800ad3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad40:	601a      	str	r2, [r3, #0]
 800ad42:	f3bf 8f4f 	dsb	sy
 800ad46:	f3bf 8f6f 	isb	sy
 800ad4a:	e00a      	b.n	800ad62 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	2200      	movs	r2, #0
 800ad50:	2100      	movs	r1, #0
 800ad52:	6878      	ldr	r0, [r7, #4]
 800ad54:	f001 f832 	bl	800bdbc <xQueueGenericSend>
 800ad58:	4603      	mov	r3, r0
 800ad5a:	2b01      	cmp	r3, #1
 800ad5c:	d001      	beq.n	800ad62 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800ad5e:	23ff      	movs	r3, #255	; 0xff
 800ad60:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800ad62:	68fb      	ldr	r3, [r7, #12]
}
 800ad64:	4618      	mov	r0, r3
 800ad66:	3710      	adds	r7, #16
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	bd80      	pop	{r7, pc}
 800ad6c:	e000ed04 	.word	0xe000ed04

0800ad70 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b086      	sub	sp, #24
 800ad74:	af02      	add	r7, sp, #8
 800ad76:	6078      	str	r0, [r7, #4]
 800ad78:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	685b      	ldr	r3, [r3, #4]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d010      	beq.n	800ada4 <osSemaphoreCreate+0x34>
    if (count == 1) {
 800ad82:	683b      	ldr	r3, [r7, #0]
 800ad84:	2b01      	cmp	r3, #1
 800ad86:	d10b      	bne.n	800ada0 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	685a      	ldr	r2, [r3, #4]
 800ad8c:	2303      	movs	r3, #3
 800ad8e:	9300      	str	r3, [sp, #0]
 800ad90:	4613      	mov	r3, r2
 800ad92:	2200      	movs	r2, #0
 800ad94:	2100      	movs	r1, #0
 800ad96:	2001      	movs	r0, #1
 800ad98:	f000 fef2 	bl	800bb80 <xQueueGenericCreateStatic>
 800ad9c:	4603      	mov	r3, r0
 800ad9e:	e016      	b.n	800adce <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800ada0:	2300      	movs	r3, #0
 800ada2:	e014      	b.n	800adce <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 800ada4:	683b      	ldr	r3, [r7, #0]
 800ada6:	2b01      	cmp	r3, #1
 800ada8:	d110      	bne.n	800adcc <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 800adaa:	2203      	movs	r2, #3
 800adac:	2100      	movs	r1, #0
 800adae:	2001      	movs	r0, #1
 800adb0:	f000 ff59 	bl	800bc66 <xQueueGenericCreate>
 800adb4:	60f8      	str	r0, [r7, #12]
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d005      	beq.n	800adc8 <osSemaphoreCreate+0x58>
 800adbc:	2300      	movs	r3, #0
 800adbe:	2200      	movs	r2, #0
 800adc0:	2100      	movs	r1, #0
 800adc2:	68f8      	ldr	r0, [r7, #12]
 800adc4:	f000 fffa 	bl	800bdbc <xQueueGenericSend>
      return sema;
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	e000      	b.n	800adce <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800adcc:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800adce:	4618      	mov	r0, r3
 800add0:	3710      	adds	r7, #16
 800add2:	46bd      	mov	sp, r7
 800add4:	bd80      	pop	{r7, pc}
	...

0800add8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800add8:	b580      	push	{r7, lr}
 800adda:	b084      	sub	sp, #16
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
 800ade0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800ade2:	2300      	movs	r3, #0
 800ade4:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d101      	bne.n	800adf0 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800adec:	2380      	movs	r3, #128	; 0x80
 800adee:	e03a      	b.n	800ae66 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800adf0:	2300      	movs	r3, #0
 800adf2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800adf4:	683b      	ldr	r3, [r7, #0]
 800adf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adfa:	d103      	bne.n	800ae04 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800adfc:	f04f 33ff 	mov.w	r3, #4294967295
 800ae00:	60fb      	str	r3, [r7, #12]
 800ae02:	e009      	b.n	800ae18 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800ae04:	683b      	ldr	r3, [r7, #0]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d006      	beq.n	800ae18 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800ae0a:	683b      	ldr	r3, [r7, #0]
 800ae0c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d101      	bne.n	800ae18 <osSemaphoreWait+0x40>
      ticks = 1;
 800ae14:	2301      	movs	r3, #1
 800ae16:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800ae18:	f7ff fe84 	bl	800ab24 <inHandlerMode>
 800ae1c:	4603      	mov	r3, r0
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d017      	beq.n	800ae52 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800ae22:	f107 0308 	add.w	r3, r7, #8
 800ae26:	461a      	mov	r2, r3
 800ae28:	2100      	movs	r1, #0
 800ae2a:	6878      	ldr	r0, [r7, #4]
 800ae2c:	f001 fbc2 	bl	800c5b4 <xQueueReceiveFromISR>
 800ae30:	4603      	mov	r3, r0
 800ae32:	2b01      	cmp	r3, #1
 800ae34:	d001      	beq.n	800ae3a <osSemaphoreWait+0x62>
      return osErrorOS;
 800ae36:	23ff      	movs	r3, #255	; 0xff
 800ae38:	e015      	b.n	800ae66 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800ae3a:	68bb      	ldr	r3, [r7, #8]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d011      	beq.n	800ae64 <osSemaphoreWait+0x8c>
 800ae40:	4b0b      	ldr	r3, [pc, #44]	; (800ae70 <osSemaphoreWait+0x98>)
 800ae42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae46:	601a      	str	r2, [r3, #0]
 800ae48:	f3bf 8f4f 	dsb	sy
 800ae4c:	f3bf 8f6f 	isb	sy
 800ae50:	e008      	b.n	800ae64 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800ae52:	68f9      	ldr	r1, [r7, #12]
 800ae54:	6878      	ldr	r0, [r7, #4]
 800ae56:	f001 faa5 	bl	800c3a4 <xQueueSemaphoreTake>
 800ae5a:	4603      	mov	r3, r0
 800ae5c:	2b01      	cmp	r3, #1
 800ae5e:	d001      	beq.n	800ae64 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800ae60:	23ff      	movs	r3, #255	; 0xff
 800ae62:	e000      	b.n	800ae66 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800ae64:	2300      	movs	r3, #0
}
 800ae66:	4618      	mov	r0, r3
 800ae68:	3710      	adds	r7, #16
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	bd80      	pop	{r7, pc}
 800ae6e:	bf00      	nop
 800ae70:	e000ed04 	.word	0xe000ed04

0800ae74 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b084      	sub	sp, #16
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800ae80:	2300      	movs	r3, #0
 800ae82:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800ae84:	f7ff fe4e 	bl	800ab24 <inHandlerMode>
 800ae88:	4603      	mov	r3, r0
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d016      	beq.n	800aebc <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800ae8e:	f107 0308 	add.w	r3, r7, #8
 800ae92:	4619      	mov	r1, r3
 800ae94:	6878      	ldr	r0, [r7, #4]
 800ae96:	f001 f91f 	bl	800c0d8 <xQueueGiveFromISR>
 800ae9a:	4603      	mov	r3, r0
 800ae9c:	2b01      	cmp	r3, #1
 800ae9e:	d001      	beq.n	800aea4 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800aea0:	23ff      	movs	r3, #255	; 0xff
 800aea2:	e017      	b.n	800aed4 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800aea4:	68bb      	ldr	r3, [r7, #8]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d013      	beq.n	800aed2 <osSemaphoreRelease+0x5e>
 800aeaa:	4b0c      	ldr	r3, [pc, #48]	; (800aedc <osSemaphoreRelease+0x68>)
 800aeac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aeb0:	601a      	str	r2, [r3, #0]
 800aeb2:	f3bf 8f4f 	dsb	sy
 800aeb6:	f3bf 8f6f 	isb	sy
 800aeba:	e00a      	b.n	800aed2 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800aebc:	2300      	movs	r3, #0
 800aebe:	2200      	movs	r2, #0
 800aec0:	2100      	movs	r1, #0
 800aec2:	6878      	ldr	r0, [r7, #4]
 800aec4:	f000 ff7a 	bl	800bdbc <xQueueGenericSend>
 800aec8:	4603      	mov	r3, r0
 800aeca:	2b01      	cmp	r3, #1
 800aecc:	d001      	beq.n	800aed2 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800aece:	23ff      	movs	r3, #255	; 0xff
 800aed0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800aed2:	68fb      	ldr	r3, [r7, #12]
}
 800aed4:	4618      	mov	r0, r3
 800aed6:	3710      	adds	r7, #16
 800aed8:	46bd      	mov	sp, r7
 800aeda:	bd80      	pop	{r7, pc}
 800aedc:	e000ed04 	.word	0xe000ed04

0800aee0 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b082      	sub	sp, #8
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800aee8:	f7ff fe1c 	bl	800ab24 <inHandlerMode>
 800aeec:	4603      	mov	r3, r0
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d001      	beq.n	800aef6 <osSemaphoreDelete+0x16>
    return osErrorISR;
 800aef2:	2382      	movs	r3, #130	; 0x82
 800aef4:	e003      	b.n	800aefe <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800aef6:	6878      	ldr	r0, [r7, #4]
 800aef8:	f001 fc13 	bl	800c722 <vQueueDelete>

  return osOK; 
 800aefc:	2300      	movs	r3, #0
}
 800aefe:	4618      	mov	r0, r3
 800af00:	3708      	adds	r7, #8
 800af02:	46bd      	mov	sp, r7
 800af04:	bd80      	pop	{r7, pc}

0800af06 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800af06:	b590      	push	{r4, r7, lr}
 800af08:	b085      	sub	sp, #20
 800af0a:	af02      	add	r7, sp, #8
 800af0c:	6078      	str	r0, [r7, #4]
 800af0e:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	689b      	ldr	r3, [r3, #8]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d012      	beq.n	800af3e <osMessageCreate+0x38>
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	68db      	ldr	r3, [r3, #12]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d00e      	beq.n	800af3e <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	6818      	ldr	r0, [r3, #0]
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	6859      	ldr	r1, [r3, #4]
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	689a      	ldr	r2, [r3, #8]
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	68dc      	ldr	r4, [r3, #12]
 800af30:	2300      	movs	r3, #0
 800af32:	9300      	str	r3, [sp, #0]
 800af34:	4623      	mov	r3, r4
 800af36:	f000 fe23 	bl	800bb80 <xQueueGenericCreateStatic>
 800af3a:	4603      	mov	r3, r0
 800af3c:	e008      	b.n	800af50 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	6818      	ldr	r0, [r3, #0]
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	685b      	ldr	r3, [r3, #4]
 800af46:	2200      	movs	r2, #0
 800af48:	4619      	mov	r1, r3
 800af4a:	f000 fe8c 	bl	800bc66 <xQueueGenericCreate>
 800af4e:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800af50:	4618      	mov	r0, r3
 800af52:	370c      	adds	r7, #12
 800af54:	46bd      	mov	sp, r7
 800af56:	bd90      	pop	{r4, r7, pc}

0800af58 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800af58:	b580      	push	{r7, lr}
 800af5a:	b086      	sub	sp, #24
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	60f8      	str	r0, [r7, #12]
 800af60:	60b9      	str	r1, [r7, #8]
 800af62:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800af64:	2300      	movs	r3, #0
 800af66:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800af6c:	697b      	ldr	r3, [r7, #20]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d101      	bne.n	800af76 <osMessagePut+0x1e>
    ticks = 1;
 800af72:	2301      	movs	r3, #1
 800af74:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800af76:	f7ff fdd5 	bl	800ab24 <inHandlerMode>
 800af7a:	4603      	mov	r3, r0
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d018      	beq.n	800afb2 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800af80:	f107 0210 	add.w	r2, r7, #16
 800af84:	f107 0108 	add.w	r1, r7, #8
 800af88:	2300      	movs	r3, #0
 800af8a:	68f8      	ldr	r0, [r7, #12]
 800af8c:	f001 f810 	bl	800bfb0 <xQueueGenericSendFromISR>
 800af90:	4603      	mov	r3, r0
 800af92:	2b01      	cmp	r3, #1
 800af94:	d001      	beq.n	800af9a <osMessagePut+0x42>
      return osErrorOS;
 800af96:	23ff      	movs	r3, #255	; 0xff
 800af98:	e018      	b.n	800afcc <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800af9a:	693b      	ldr	r3, [r7, #16]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d014      	beq.n	800afca <osMessagePut+0x72>
 800afa0:	4b0c      	ldr	r3, [pc, #48]	; (800afd4 <osMessagePut+0x7c>)
 800afa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800afa6:	601a      	str	r2, [r3, #0]
 800afa8:	f3bf 8f4f 	dsb	sy
 800afac:	f3bf 8f6f 	isb	sy
 800afb0:	e00b      	b.n	800afca <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800afb2:	f107 0108 	add.w	r1, r7, #8
 800afb6:	2300      	movs	r3, #0
 800afb8:	697a      	ldr	r2, [r7, #20]
 800afba:	68f8      	ldr	r0, [r7, #12]
 800afbc:	f000 fefe 	bl	800bdbc <xQueueGenericSend>
 800afc0:	4603      	mov	r3, r0
 800afc2:	2b01      	cmp	r3, #1
 800afc4:	d001      	beq.n	800afca <osMessagePut+0x72>
      return osErrorOS;
 800afc6:	23ff      	movs	r3, #255	; 0xff
 800afc8:	e000      	b.n	800afcc <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800afca:	2300      	movs	r3, #0
}
 800afcc:	4618      	mov	r0, r3
 800afce:	3718      	adds	r7, #24
 800afd0:	46bd      	mov	sp, r7
 800afd2:	bd80      	pop	{r7, pc}
 800afd4:	e000ed04 	.word	0xe000ed04

0800afd8 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800afd8:	b590      	push	{r4, r7, lr}
 800afda:	b08b      	sub	sp, #44	; 0x2c
 800afdc:	af00      	add	r7, sp, #0
 800afde:	60f8      	str	r0, [r7, #12]
 800afe0:	60b9      	str	r1, [r7, #8]
 800afe2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800afe4:	68bb      	ldr	r3, [r7, #8]
 800afe6:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800afe8:	2300      	movs	r3, #0
 800afea:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800afec:	68bb      	ldr	r3, [r7, #8]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d10a      	bne.n	800b008 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800aff2:	2380      	movs	r3, #128	; 0x80
 800aff4:	617b      	str	r3, [r7, #20]
    return event;
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	461c      	mov	r4, r3
 800affa:	f107 0314 	add.w	r3, r7, #20
 800affe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b002:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b006:	e054      	b.n	800b0b2 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800b008:	2300      	movs	r3, #0
 800b00a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800b00c:	2300      	movs	r3, #0
 800b00e:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b016:	d103      	bne.n	800b020 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800b018:	f04f 33ff 	mov.w	r3, #4294967295
 800b01c:	627b      	str	r3, [r7, #36]	; 0x24
 800b01e:	e009      	b.n	800b034 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d006      	beq.n	800b034 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800b02a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d101      	bne.n	800b034 <osMessageGet+0x5c>
      ticks = 1;
 800b030:	2301      	movs	r3, #1
 800b032:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800b034:	f7ff fd76 	bl	800ab24 <inHandlerMode>
 800b038:	4603      	mov	r3, r0
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d01c      	beq.n	800b078 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800b03e:	f107 0220 	add.w	r2, r7, #32
 800b042:	f107 0314 	add.w	r3, r7, #20
 800b046:	3304      	adds	r3, #4
 800b048:	4619      	mov	r1, r3
 800b04a:	68b8      	ldr	r0, [r7, #8]
 800b04c:	f001 fab2 	bl	800c5b4 <xQueueReceiveFromISR>
 800b050:	4603      	mov	r3, r0
 800b052:	2b01      	cmp	r3, #1
 800b054:	d102      	bne.n	800b05c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800b056:	2310      	movs	r3, #16
 800b058:	617b      	str	r3, [r7, #20]
 800b05a:	e001      	b.n	800b060 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800b05c:	2300      	movs	r3, #0
 800b05e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b060:	6a3b      	ldr	r3, [r7, #32]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d01d      	beq.n	800b0a2 <osMessageGet+0xca>
 800b066:	4b15      	ldr	r3, [pc, #84]	; (800b0bc <osMessageGet+0xe4>)
 800b068:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b06c:	601a      	str	r2, [r3, #0]
 800b06e:	f3bf 8f4f 	dsb	sy
 800b072:	f3bf 8f6f 	isb	sy
 800b076:	e014      	b.n	800b0a2 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800b078:	f107 0314 	add.w	r3, r7, #20
 800b07c:	3304      	adds	r3, #4
 800b07e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b080:	4619      	mov	r1, r3
 800b082:	68b8      	ldr	r0, [r7, #8]
 800b084:	f001 f8b2 	bl	800c1ec <xQueueReceive>
 800b088:	4603      	mov	r3, r0
 800b08a:	2b01      	cmp	r3, #1
 800b08c:	d102      	bne.n	800b094 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800b08e:	2310      	movs	r3, #16
 800b090:	617b      	str	r3, [r7, #20]
 800b092:	e006      	b.n	800b0a2 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800b094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b096:	2b00      	cmp	r3, #0
 800b098:	d101      	bne.n	800b09e <osMessageGet+0xc6>
 800b09a:	2300      	movs	r3, #0
 800b09c:	e000      	b.n	800b0a0 <osMessageGet+0xc8>
 800b09e:	2340      	movs	r3, #64	; 0x40
 800b0a0:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	461c      	mov	r4, r3
 800b0a6:	f107 0314 	add.w	r3, r7, #20
 800b0aa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b0ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800b0b2:	68f8      	ldr	r0, [r7, #12]
 800b0b4:	372c      	adds	r7, #44	; 0x2c
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	bd90      	pop	{r4, r7, pc}
 800b0ba:	bf00      	nop
 800b0bc:	e000ed04 	.word	0xe000ed04

0800b0c0 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b082      	sub	sp, #8
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800b0c8:	f7ff fd2c 	bl	800ab24 <inHandlerMode>
 800b0cc:	4603      	mov	r3, r0
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d004      	beq.n	800b0dc <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 800b0d2:	6878      	ldr	r0, [r7, #4]
 800b0d4:	f001 fb08 	bl	800c6e8 <uxQueueMessagesWaitingFromISR>
 800b0d8:	4603      	mov	r3, r0
 800b0da:	e003      	b.n	800b0e4 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 800b0dc:	6878      	ldr	r0, [r7, #4]
 800b0de:	f001 fae6 	bl	800c6ae <uxQueueMessagesWaiting>
 800b0e2:	4603      	mov	r3, r0
  }
}
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	3708      	adds	r7, #8
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	bd80      	pop	{r7, pc}

0800b0ec <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b082      	sub	sp, #8
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800b0f4:	f7ff fd16 	bl	800ab24 <inHandlerMode>
 800b0f8:	4603      	mov	r3, r0
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d001      	beq.n	800b102 <osMessageDelete+0x16>
    return osErrorISR;
 800b0fe:	2382      	movs	r3, #130	; 0x82
 800b100:	e003      	b.n	800b10a <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 800b102:	6878      	ldr	r0, [r7, #4]
 800b104:	f001 fb0d 	bl	800c722 <vQueueDelete>

  return osOK; 
 800b108:	2300      	movs	r3, #0
}
 800b10a:	4618      	mov	r0, r3
 800b10c:	3708      	adds	r7, #8
 800b10e:	46bd      	mov	sp, r7
 800b110:	bd80      	pop	{r7, pc}
	...

0800b114 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b114:	b580      	push	{r7, lr}
 800b116:	b08a      	sub	sp, #40	; 0x28
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b11c:	2300      	movs	r3, #0
 800b11e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b120:	f001 fe96 	bl	800ce50 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b124:	4b57      	ldr	r3, [pc, #348]	; (800b284 <pvPortMalloc+0x170>)
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d101      	bne.n	800b130 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b12c:	f000 f90c 	bl	800b348 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b130:	4b55      	ldr	r3, [pc, #340]	; (800b288 <pvPortMalloc+0x174>)
 800b132:	681a      	ldr	r2, [r3, #0]
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	4013      	ands	r3, r2
 800b138:	2b00      	cmp	r3, #0
 800b13a:	f040 808c 	bne.w	800b256 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	2b00      	cmp	r3, #0
 800b142:	d01c      	beq.n	800b17e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800b144:	2208      	movs	r2, #8
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	4413      	add	r3, r2
 800b14a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	f003 0307 	and.w	r3, r3, #7
 800b152:	2b00      	cmp	r3, #0
 800b154:	d013      	beq.n	800b17e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	f023 0307 	bic.w	r3, r3, #7
 800b15c:	3308      	adds	r3, #8
 800b15e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	f003 0307 	and.w	r3, r3, #7
 800b166:	2b00      	cmp	r3, #0
 800b168:	d009      	beq.n	800b17e <pvPortMalloc+0x6a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b16a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b16e:	f383 8811 	msr	BASEPRI, r3
 800b172:	f3bf 8f6f 	isb	sy
 800b176:	f3bf 8f4f 	dsb	sy
 800b17a:	617b      	str	r3, [r7, #20]
 800b17c:	e7fe      	b.n	800b17c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d068      	beq.n	800b256 <pvPortMalloc+0x142>
 800b184:	4b41      	ldr	r3, [pc, #260]	; (800b28c <pvPortMalloc+0x178>)
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	687a      	ldr	r2, [r7, #4]
 800b18a:	429a      	cmp	r2, r3
 800b18c:	d863      	bhi.n	800b256 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b18e:	4b40      	ldr	r3, [pc, #256]	; (800b290 <pvPortMalloc+0x17c>)
 800b190:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b192:	4b3f      	ldr	r3, [pc, #252]	; (800b290 <pvPortMalloc+0x17c>)
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b198:	e004      	b.n	800b1a4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800b19a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b19c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b19e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b1a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1a6:	685b      	ldr	r3, [r3, #4]
 800b1a8:	687a      	ldr	r2, [r7, #4]
 800b1aa:	429a      	cmp	r2, r3
 800b1ac:	d903      	bls.n	800b1b6 <pvPortMalloc+0xa2>
 800b1ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d1f1      	bne.n	800b19a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b1b6:	4b33      	ldr	r3, [pc, #204]	; (800b284 <pvPortMalloc+0x170>)
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1bc:	429a      	cmp	r2, r3
 800b1be:	d04a      	beq.n	800b256 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b1c0:	6a3b      	ldr	r3, [r7, #32]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	2208      	movs	r2, #8
 800b1c6:	4413      	add	r3, r2
 800b1c8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b1ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1cc:	681a      	ldr	r2, [r3, #0]
 800b1ce:	6a3b      	ldr	r3, [r7, #32]
 800b1d0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b1d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1d4:	685a      	ldr	r2, [r3, #4]
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	1ad2      	subs	r2, r2, r3
 800b1da:	2308      	movs	r3, #8
 800b1dc:	005b      	lsls	r3, r3, #1
 800b1de:	429a      	cmp	r2, r3
 800b1e0:	d91e      	bls.n	800b220 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b1e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	4413      	add	r3, r2
 800b1e8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b1ea:	69bb      	ldr	r3, [r7, #24]
 800b1ec:	f003 0307 	and.w	r3, r3, #7
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d009      	beq.n	800b208 <pvPortMalloc+0xf4>
 800b1f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1f8:	f383 8811 	msr	BASEPRI, r3
 800b1fc:	f3bf 8f6f 	isb	sy
 800b200:	f3bf 8f4f 	dsb	sy
 800b204:	613b      	str	r3, [r7, #16]
 800b206:	e7fe      	b.n	800b206 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b20a:	685a      	ldr	r2, [r3, #4]
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	1ad2      	subs	r2, r2, r3
 800b210:	69bb      	ldr	r3, [r7, #24]
 800b212:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b216:	687a      	ldr	r2, [r7, #4]
 800b218:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b21a:	69b8      	ldr	r0, [r7, #24]
 800b21c:	f000 f8f6 	bl	800b40c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b220:	4b1a      	ldr	r3, [pc, #104]	; (800b28c <pvPortMalloc+0x178>)
 800b222:	681a      	ldr	r2, [r3, #0]
 800b224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b226:	685b      	ldr	r3, [r3, #4]
 800b228:	1ad3      	subs	r3, r2, r3
 800b22a:	4a18      	ldr	r2, [pc, #96]	; (800b28c <pvPortMalloc+0x178>)
 800b22c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b22e:	4b17      	ldr	r3, [pc, #92]	; (800b28c <pvPortMalloc+0x178>)
 800b230:	681a      	ldr	r2, [r3, #0]
 800b232:	4b18      	ldr	r3, [pc, #96]	; (800b294 <pvPortMalloc+0x180>)
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	429a      	cmp	r2, r3
 800b238:	d203      	bcs.n	800b242 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b23a:	4b14      	ldr	r3, [pc, #80]	; (800b28c <pvPortMalloc+0x178>)
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	4a15      	ldr	r2, [pc, #84]	; (800b294 <pvPortMalloc+0x180>)
 800b240:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b244:	685a      	ldr	r2, [r3, #4]
 800b246:	4b10      	ldr	r3, [pc, #64]	; (800b288 <pvPortMalloc+0x174>)
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	431a      	orrs	r2, r3
 800b24c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b24e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b252:	2200      	movs	r2, #0
 800b254:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b256:	f001 fe09 	bl	800ce6c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b25a:	69fb      	ldr	r3, [r7, #28]
 800b25c:	f003 0307 	and.w	r3, r3, #7
 800b260:	2b00      	cmp	r3, #0
 800b262:	d009      	beq.n	800b278 <pvPortMalloc+0x164>
 800b264:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b268:	f383 8811 	msr	BASEPRI, r3
 800b26c:	f3bf 8f6f 	isb	sy
 800b270:	f3bf 8f4f 	dsb	sy
 800b274:	60fb      	str	r3, [r7, #12]
 800b276:	e7fe      	b.n	800b276 <pvPortMalloc+0x162>
	return pvReturn;
 800b278:	69fb      	ldr	r3, [r7, #28]
}
 800b27a:	4618      	mov	r0, r3
 800b27c:	3728      	adds	r7, #40	; 0x28
 800b27e:	46bd      	mov	sp, r7
 800b280:	bd80      	pop	{r7, pc}
 800b282:	bf00      	nop
 800b284:	24040494 	.word	0x24040494
 800b288:	240404a0 	.word	0x240404a0
 800b28c:	24040498 	.word	0x24040498
 800b290:	2404048c 	.word	0x2404048c
 800b294:	2404049c 	.word	0x2404049c

0800b298 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b298:	b580      	push	{r7, lr}
 800b29a:	b086      	sub	sp, #24
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d046      	beq.n	800b338 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b2aa:	2308      	movs	r3, #8
 800b2ac:	425b      	negs	r3, r3
 800b2ae:	697a      	ldr	r2, [r7, #20]
 800b2b0:	4413      	add	r3, r2
 800b2b2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b2b4:	697b      	ldr	r3, [r7, #20]
 800b2b6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b2b8:	693b      	ldr	r3, [r7, #16]
 800b2ba:	685a      	ldr	r2, [r3, #4]
 800b2bc:	4b20      	ldr	r3, [pc, #128]	; (800b340 <vPortFree+0xa8>)
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	4013      	ands	r3, r2
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d109      	bne.n	800b2da <vPortFree+0x42>
 800b2c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2ca:	f383 8811 	msr	BASEPRI, r3
 800b2ce:	f3bf 8f6f 	isb	sy
 800b2d2:	f3bf 8f4f 	dsb	sy
 800b2d6:	60fb      	str	r3, [r7, #12]
 800b2d8:	e7fe      	b.n	800b2d8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b2da:	693b      	ldr	r3, [r7, #16]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d009      	beq.n	800b2f6 <vPortFree+0x5e>
 800b2e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2e6:	f383 8811 	msr	BASEPRI, r3
 800b2ea:	f3bf 8f6f 	isb	sy
 800b2ee:	f3bf 8f4f 	dsb	sy
 800b2f2:	60bb      	str	r3, [r7, #8]
 800b2f4:	e7fe      	b.n	800b2f4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b2f6:	693b      	ldr	r3, [r7, #16]
 800b2f8:	685a      	ldr	r2, [r3, #4]
 800b2fa:	4b11      	ldr	r3, [pc, #68]	; (800b340 <vPortFree+0xa8>)
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	4013      	ands	r3, r2
 800b300:	2b00      	cmp	r3, #0
 800b302:	d019      	beq.n	800b338 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b304:	693b      	ldr	r3, [r7, #16]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d115      	bne.n	800b338 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b30c:	693b      	ldr	r3, [r7, #16]
 800b30e:	685a      	ldr	r2, [r3, #4]
 800b310:	4b0b      	ldr	r3, [pc, #44]	; (800b340 <vPortFree+0xa8>)
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	43db      	mvns	r3, r3
 800b316:	401a      	ands	r2, r3
 800b318:	693b      	ldr	r3, [r7, #16]
 800b31a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b31c:	f001 fd98 	bl	800ce50 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b320:	693b      	ldr	r3, [r7, #16]
 800b322:	685a      	ldr	r2, [r3, #4]
 800b324:	4b07      	ldr	r3, [pc, #28]	; (800b344 <vPortFree+0xac>)
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	4413      	add	r3, r2
 800b32a:	4a06      	ldr	r2, [pc, #24]	; (800b344 <vPortFree+0xac>)
 800b32c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b32e:	6938      	ldr	r0, [r7, #16]
 800b330:	f000 f86c 	bl	800b40c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b334:	f001 fd9a 	bl	800ce6c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b338:	bf00      	nop
 800b33a:	3718      	adds	r7, #24
 800b33c:	46bd      	mov	sp, r7
 800b33e:	bd80      	pop	{r7, pc}
 800b340:	240404a0 	.word	0x240404a0
 800b344:	24040498 	.word	0x24040498

0800b348 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b348:	b480      	push	{r7}
 800b34a:	b085      	sub	sp, #20
 800b34c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b34e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b352:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b354:	4b27      	ldr	r3, [pc, #156]	; (800b3f4 <prvHeapInit+0xac>)
 800b356:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	f003 0307 	and.w	r3, r3, #7
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d00c      	beq.n	800b37c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	3307      	adds	r3, #7
 800b366:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	f023 0307 	bic.w	r3, r3, #7
 800b36e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b370:	68ba      	ldr	r2, [r7, #8]
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	1ad3      	subs	r3, r2, r3
 800b376:	4a1f      	ldr	r2, [pc, #124]	; (800b3f4 <prvHeapInit+0xac>)
 800b378:	4413      	add	r3, r2
 800b37a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b380:	4a1d      	ldr	r2, [pc, #116]	; (800b3f8 <prvHeapInit+0xb0>)
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b386:	4b1c      	ldr	r3, [pc, #112]	; (800b3f8 <prvHeapInit+0xb0>)
 800b388:	2200      	movs	r2, #0
 800b38a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	68ba      	ldr	r2, [r7, #8]
 800b390:	4413      	add	r3, r2
 800b392:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b394:	2208      	movs	r2, #8
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	1a9b      	subs	r3, r3, r2
 800b39a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	f023 0307 	bic.w	r3, r3, #7
 800b3a2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	4a15      	ldr	r2, [pc, #84]	; (800b3fc <prvHeapInit+0xb4>)
 800b3a8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b3aa:	4b14      	ldr	r3, [pc, #80]	; (800b3fc <prvHeapInit+0xb4>)
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	2200      	movs	r2, #0
 800b3b0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b3b2:	4b12      	ldr	r3, [pc, #72]	; (800b3fc <prvHeapInit+0xb4>)
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b3be:	683b      	ldr	r3, [r7, #0]
 800b3c0:	68fa      	ldr	r2, [r7, #12]
 800b3c2:	1ad2      	subs	r2, r2, r3
 800b3c4:	683b      	ldr	r3, [r7, #0]
 800b3c6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b3c8:	4b0c      	ldr	r3, [pc, #48]	; (800b3fc <prvHeapInit+0xb4>)
 800b3ca:	681a      	ldr	r2, [r3, #0]
 800b3cc:	683b      	ldr	r3, [r7, #0]
 800b3ce:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b3d0:	683b      	ldr	r3, [r7, #0]
 800b3d2:	685b      	ldr	r3, [r3, #4]
 800b3d4:	4a0a      	ldr	r2, [pc, #40]	; (800b400 <prvHeapInit+0xb8>)
 800b3d6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b3d8:	683b      	ldr	r3, [r7, #0]
 800b3da:	685b      	ldr	r3, [r3, #4]
 800b3dc:	4a09      	ldr	r2, [pc, #36]	; (800b404 <prvHeapInit+0xbc>)
 800b3de:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b3e0:	4b09      	ldr	r3, [pc, #36]	; (800b408 <prvHeapInit+0xc0>)
 800b3e2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b3e6:	601a      	str	r2, [r3, #0]
}
 800b3e8:	bf00      	nop
 800b3ea:	3714      	adds	r7, #20
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f2:	4770      	bx	lr
 800b3f4:	2400048c 	.word	0x2400048c
 800b3f8:	2404048c 	.word	0x2404048c
 800b3fc:	24040494 	.word	0x24040494
 800b400:	2404049c 	.word	0x2404049c
 800b404:	24040498 	.word	0x24040498
 800b408:	240404a0 	.word	0x240404a0

0800b40c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b40c:	b480      	push	{r7}
 800b40e:	b085      	sub	sp, #20
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b414:	4b28      	ldr	r3, [pc, #160]	; (800b4b8 <prvInsertBlockIntoFreeList+0xac>)
 800b416:	60fb      	str	r3, [r7, #12]
 800b418:	e002      	b.n	800b420 <prvInsertBlockIntoFreeList+0x14>
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	60fb      	str	r3, [r7, #12]
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	687a      	ldr	r2, [r7, #4]
 800b426:	429a      	cmp	r2, r3
 800b428:	d8f7      	bhi.n	800b41a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	685b      	ldr	r3, [r3, #4]
 800b432:	68ba      	ldr	r2, [r7, #8]
 800b434:	4413      	add	r3, r2
 800b436:	687a      	ldr	r2, [r7, #4]
 800b438:	429a      	cmp	r2, r3
 800b43a:	d108      	bne.n	800b44e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	685a      	ldr	r2, [r3, #4]
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	685b      	ldr	r3, [r3, #4]
 800b444:	441a      	add	r2, r3
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	685b      	ldr	r3, [r3, #4]
 800b456:	68ba      	ldr	r2, [r7, #8]
 800b458:	441a      	add	r2, r3
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	429a      	cmp	r2, r3
 800b460:	d118      	bne.n	800b494 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	681a      	ldr	r2, [r3, #0]
 800b466:	4b15      	ldr	r3, [pc, #84]	; (800b4bc <prvInsertBlockIntoFreeList+0xb0>)
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	429a      	cmp	r2, r3
 800b46c:	d00d      	beq.n	800b48a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	685a      	ldr	r2, [r3, #4]
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	685b      	ldr	r3, [r3, #4]
 800b478:	441a      	add	r2, r3
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	681a      	ldr	r2, [r3, #0]
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	601a      	str	r2, [r3, #0]
 800b488:	e008      	b.n	800b49c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b48a:	4b0c      	ldr	r3, [pc, #48]	; (800b4bc <prvInsertBlockIntoFreeList+0xb0>)
 800b48c:	681a      	ldr	r2, [r3, #0]
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	601a      	str	r2, [r3, #0]
 800b492:	e003      	b.n	800b49c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	681a      	ldr	r2, [r3, #0]
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b49c:	68fa      	ldr	r2, [r7, #12]
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	429a      	cmp	r2, r3
 800b4a2:	d002      	beq.n	800b4aa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	687a      	ldr	r2, [r7, #4]
 800b4a8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b4aa:	bf00      	nop
 800b4ac:	3714      	adds	r7, #20
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b4:	4770      	bx	lr
 800b4b6:	bf00      	nop
 800b4b8:	2404048c 	.word	0x2404048c
 800b4bc:	24040494 	.word	0x24040494

0800b4c0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b4c0:	b480      	push	{r7}
 800b4c2:	b083      	sub	sp, #12
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	f103 0208 	add.w	r2, r3, #8
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	f04f 32ff 	mov.w	r2, #4294967295
 800b4d8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	f103 0208 	add.w	r2, r3, #8
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	f103 0208 	add.w	r2, r3, #8
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	2200      	movs	r2, #0
 800b4f2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b4f4:	bf00      	nop
 800b4f6:	370c      	adds	r7, #12
 800b4f8:	46bd      	mov	sp, r7
 800b4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fe:	4770      	bx	lr

0800b500 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b500:	b480      	push	{r7}
 800b502:	b083      	sub	sp, #12
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	2200      	movs	r2, #0
 800b50c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b50e:	bf00      	nop
 800b510:	370c      	adds	r7, #12
 800b512:	46bd      	mov	sp, r7
 800b514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b518:	4770      	bx	lr

0800b51a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b51a:	b480      	push	{r7}
 800b51c:	b085      	sub	sp, #20
 800b51e:	af00      	add	r7, sp, #0
 800b520:	6078      	str	r0, [r7, #4]
 800b522:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	685b      	ldr	r3, [r3, #4]
 800b528:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b52a:	683b      	ldr	r3, [r7, #0]
 800b52c:	68fa      	ldr	r2, [r7, #12]
 800b52e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	689a      	ldr	r2, [r3, #8]
 800b534:	683b      	ldr	r3, [r7, #0]
 800b536:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	689b      	ldr	r3, [r3, #8]
 800b53c:	683a      	ldr	r2, [r7, #0]
 800b53e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	683a      	ldr	r2, [r7, #0]
 800b544:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b546:	683b      	ldr	r3, [r7, #0]
 800b548:	687a      	ldr	r2, [r7, #4]
 800b54a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	1c5a      	adds	r2, r3, #1
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	601a      	str	r2, [r3, #0]
}
 800b556:	bf00      	nop
 800b558:	3714      	adds	r7, #20
 800b55a:	46bd      	mov	sp, r7
 800b55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b560:	4770      	bx	lr

0800b562 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b562:	b480      	push	{r7}
 800b564:	b085      	sub	sp, #20
 800b566:	af00      	add	r7, sp, #0
 800b568:	6078      	str	r0, [r7, #4]
 800b56a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b56c:	683b      	ldr	r3, [r7, #0]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b572:	68bb      	ldr	r3, [r7, #8]
 800b574:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b578:	d103      	bne.n	800b582 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	691b      	ldr	r3, [r3, #16]
 800b57e:	60fb      	str	r3, [r7, #12]
 800b580:	e00c      	b.n	800b59c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	3308      	adds	r3, #8
 800b586:	60fb      	str	r3, [r7, #12]
 800b588:	e002      	b.n	800b590 <vListInsert+0x2e>
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	685b      	ldr	r3, [r3, #4]
 800b58e:	60fb      	str	r3, [r7, #12]
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	685b      	ldr	r3, [r3, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	68ba      	ldr	r2, [r7, #8]
 800b598:	429a      	cmp	r2, r3
 800b59a:	d2f6      	bcs.n	800b58a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	685a      	ldr	r2, [r3, #4]
 800b5a0:	683b      	ldr	r3, [r7, #0]
 800b5a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b5a4:	683b      	ldr	r3, [r7, #0]
 800b5a6:	685b      	ldr	r3, [r3, #4]
 800b5a8:	683a      	ldr	r2, [r7, #0]
 800b5aa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b5ac:	683b      	ldr	r3, [r7, #0]
 800b5ae:	68fa      	ldr	r2, [r7, #12]
 800b5b0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	683a      	ldr	r2, [r7, #0]
 800b5b6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b5b8:	683b      	ldr	r3, [r7, #0]
 800b5ba:	687a      	ldr	r2, [r7, #4]
 800b5bc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	1c5a      	adds	r2, r3, #1
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	601a      	str	r2, [r3, #0]
}
 800b5c8:	bf00      	nop
 800b5ca:	3714      	adds	r7, #20
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d2:	4770      	bx	lr

0800b5d4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b5d4:	b480      	push	{r7}
 800b5d6:	b085      	sub	sp, #20
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	691b      	ldr	r3, [r3, #16]
 800b5e0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	685b      	ldr	r3, [r3, #4]
 800b5e6:	687a      	ldr	r2, [r7, #4]
 800b5e8:	6892      	ldr	r2, [r2, #8]
 800b5ea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	689b      	ldr	r3, [r3, #8]
 800b5f0:	687a      	ldr	r2, [r7, #4]
 800b5f2:	6852      	ldr	r2, [r2, #4]
 800b5f4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	685b      	ldr	r3, [r3, #4]
 800b5fa:	687a      	ldr	r2, [r7, #4]
 800b5fc:	429a      	cmp	r2, r3
 800b5fe:	d103      	bne.n	800b608 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	689a      	ldr	r2, [r3, #8]
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	2200      	movs	r2, #0
 800b60c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	1e5a      	subs	r2, r3, #1
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	681b      	ldr	r3, [r3, #0]
}
 800b61c:	4618      	mov	r0, r3
 800b61e:	3714      	adds	r7, #20
 800b620:	46bd      	mov	sp, r7
 800b622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b626:	4770      	bx	lr

0800b628 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b628:	b480      	push	{r7}
 800b62a:	b085      	sub	sp, #20
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	60f8      	str	r0, [r7, #12]
 800b630:	60b9      	str	r1, [r7, #8]
 800b632:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	3b04      	subs	r3, #4
 800b638:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b640:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	3b04      	subs	r3, #4
 800b646:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b648:	68bb      	ldr	r3, [r7, #8]
 800b64a:	f023 0201 	bic.w	r2, r3, #1
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	3b04      	subs	r3, #4
 800b656:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b658:	4a0c      	ldr	r2, [pc, #48]	; (800b68c <pxPortInitialiseStack+0x64>)
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	3b14      	subs	r3, #20
 800b662:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b664:	687a      	ldr	r2, [r7, #4]
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	3b04      	subs	r3, #4
 800b66e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	f06f 0202 	mvn.w	r2, #2
 800b676:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	3b20      	subs	r3, #32
 800b67c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b67e:	68fb      	ldr	r3, [r7, #12]
}
 800b680:	4618      	mov	r0, r3
 800b682:	3714      	adds	r7, #20
 800b684:	46bd      	mov	sp, r7
 800b686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68a:	4770      	bx	lr
 800b68c:	0800b691 	.word	0x0800b691

0800b690 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b690:	b480      	push	{r7}
 800b692:	b085      	sub	sp, #20
 800b694:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b696:	2300      	movs	r3, #0
 800b698:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b69a:	4b11      	ldr	r3, [pc, #68]	; (800b6e0 <prvTaskExitError+0x50>)
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6a2:	d009      	beq.n	800b6b8 <prvTaskExitError+0x28>
 800b6a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6a8:	f383 8811 	msr	BASEPRI, r3
 800b6ac:	f3bf 8f6f 	isb	sy
 800b6b0:	f3bf 8f4f 	dsb	sy
 800b6b4:	60fb      	str	r3, [r7, #12]
 800b6b6:	e7fe      	b.n	800b6b6 <prvTaskExitError+0x26>
 800b6b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6bc:	f383 8811 	msr	BASEPRI, r3
 800b6c0:	f3bf 8f6f 	isb	sy
 800b6c4:	f3bf 8f4f 	dsb	sy
 800b6c8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b6ca:	bf00      	nop
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d0fc      	beq.n	800b6cc <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b6d2:	bf00      	nop
 800b6d4:	3714      	adds	r7, #20
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6dc:	4770      	bx	lr
 800b6de:	bf00      	nop
 800b6e0:	24000024 	.word	0x24000024
	...

0800b6f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b6f0:	4b07      	ldr	r3, [pc, #28]	; (800b710 <pxCurrentTCBConst2>)
 800b6f2:	6819      	ldr	r1, [r3, #0]
 800b6f4:	6808      	ldr	r0, [r1, #0]
 800b6f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6fa:	f380 8809 	msr	PSP, r0
 800b6fe:	f3bf 8f6f 	isb	sy
 800b702:	f04f 0000 	mov.w	r0, #0
 800b706:	f380 8811 	msr	BASEPRI, r0
 800b70a:	4770      	bx	lr
 800b70c:	f3af 8000 	nop.w

0800b710 <pxCurrentTCBConst2>:
 800b710:	240404ac 	.word	0x240404ac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b714:	bf00      	nop
 800b716:	bf00      	nop

0800b718 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b718:	4808      	ldr	r0, [pc, #32]	; (800b73c <prvPortStartFirstTask+0x24>)
 800b71a:	6800      	ldr	r0, [r0, #0]
 800b71c:	6800      	ldr	r0, [r0, #0]
 800b71e:	f380 8808 	msr	MSP, r0
 800b722:	f04f 0000 	mov.w	r0, #0
 800b726:	f380 8814 	msr	CONTROL, r0
 800b72a:	b662      	cpsie	i
 800b72c:	b661      	cpsie	f
 800b72e:	f3bf 8f4f 	dsb	sy
 800b732:	f3bf 8f6f 	isb	sy
 800b736:	df00      	svc	0
 800b738:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b73a:	bf00      	nop
 800b73c:	e000ed08 	.word	0xe000ed08

0800b740 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b740:	b580      	push	{r7, lr}
 800b742:	b086      	sub	sp, #24
 800b744:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b746:	4b44      	ldr	r3, [pc, #272]	; (800b858 <xPortStartScheduler+0x118>)
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	4a44      	ldr	r2, [pc, #272]	; (800b85c <xPortStartScheduler+0x11c>)
 800b74c:	4293      	cmp	r3, r2
 800b74e:	d109      	bne.n	800b764 <xPortStartScheduler+0x24>
 800b750:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b754:	f383 8811 	msr	BASEPRI, r3
 800b758:	f3bf 8f6f 	isb	sy
 800b75c:	f3bf 8f4f 	dsb	sy
 800b760:	613b      	str	r3, [r7, #16]
 800b762:	e7fe      	b.n	800b762 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b764:	4b3c      	ldr	r3, [pc, #240]	; (800b858 <xPortStartScheduler+0x118>)
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	4a3d      	ldr	r2, [pc, #244]	; (800b860 <xPortStartScheduler+0x120>)
 800b76a:	4293      	cmp	r3, r2
 800b76c:	d109      	bne.n	800b782 <xPortStartScheduler+0x42>
 800b76e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b772:	f383 8811 	msr	BASEPRI, r3
 800b776:	f3bf 8f6f 	isb	sy
 800b77a:	f3bf 8f4f 	dsb	sy
 800b77e:	60fb      	str	r3, [r7, #12]
 800b780:	e7fe      	b.n	800b780 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b782:	4b38      	ldr	r3, [pc, #224]	; (800b864 <xPortStartScheduler+0x124>)
 800b784:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b786:	697b      	ldr	r3, [r7, #20]
 800b788:	781b      	ldrb	r3, [r3, #0]
 800b78a:	b2db      	uxtb	r3, r3
 800b78c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b78e:	697b      	ldr	r3, [r7, #20]
 800b790:	22ff      	movs	r2, #255	; 0xff
 800b792:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b794:	697b      	ldr	r3, [r7, #20]
 800b796:	781b      	ldrb	r3, [r3, #0]
 800b798:	b2db      	uxtb	r3, r3
 800b79a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b79c:	78fb      	ldrb	r3, [r7, #3]
 800b79e:	b2db      	uxtb	r3, r3
 800b7a0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b7a4:	b2da      	uxtb	r2, r3
 800b7a6:	4b30      	ldr	r3, [pc, #192]	; (800b868 <xPortStartScheduler+0x128>)
 800b7a8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b7aa:	4b30      	ldr	r3, [pc, #192]	; (800b86c <xPortStartScheduler+0x12c>)
 800b7ac:	2207      	movs	r2, #7
 800b7ae:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b7b0:	e009      	b.n	800b7c6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800b7b2:	4b2e      	ldr	r3, [pc, #184]	; (800b86c <xPortStartScheduler+0x12c>)
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	3b01      	subs	r3, #1
 800b7b8:	4a2c      	ldr	r2, [pc, #176]	; (800b86c <xPortStartScheduler+0x12c>)
 800b7ba:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b7bc:	78fb      	ldrb	r3, [r7, #3]
 800b7be:	b2db      	uxtb	r3, r3
 800b7c0:	005b      	lsls	r3, r3, #1
 800b7c2:	b2db      	uxtb	r3, r3
 800b7c4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b7c6:	78fb      	ldrb	r3, [r7, #3]
 800b7c8:	b2db      	uxtb	r3, r3
 800b7ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b7ce:	2b80      	cmp	r3, #128	; 0x80
 800b7d0:	d0ef      	beq.n	800b7b2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b7d2:	4b26      	ldr	r3, [pc, #152]	; (800b86c <xPortStartScheduler+0x12c>)
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	f1c3 0307 	rsb	r3, r3, #7
 800b7da:	2b04      	cmp	r3, #4
 800b7dc:	d009      	beq.n	800b7f2 <xPortStartScheduler+0xb2>
 800b7de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7e2:	f383 8811 	msr	BASEPRI, r3
 800b7e6:	f3bf 8f6f 	isb	sy
 800b7ea:	f3bf 8f4f 	dsb	sy
 800b7ee:	60bb      	str	r3, [r7, #8]
 800b7f0:	e7fe      	b.n	800b7f0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b7f2:	4b1e      	ldr	r3, [pc, #120]	; (800b86c <xPortStartScheduler+0x12c>)
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	021b      	lsls	r3, r3, #8
 800b7f8:	4a1c      	ldr	r2, [pc, #112]	; (800b86c <xPortStartScheduler+0x12c>)
 800b7fa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b7fc:	4b1b      	ldr	r3, [pc, #108]	; (800b86c <xPortStartScheduler+0x12c>)
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b804:	4a19      	ldr	r2, [pc, #100]	; (800b86c <xPortStartScheduler+0x12c>)
 800b806:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	b2da      	uxtb	r2, r3
 800b80c:	697b      	ldr	r3, [r7, #20]
 800b80e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b810:	4b17      	ldr	r3, [pc, #92]	; (800b870 <xPortStartScheduler+0x130>)
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	4a16      	ldr	r2, [pc, #88]	; (800b870 <xPortStartScheduler+0x130>)
 800b816:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b81a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b81c:	4b14      	ldr	r3, [pc, #80]	; (800b870 <xPortStartScheduler+0x130>)
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	4a13      	ldr	r2, [pc, #76]	; (800b870 <xPortStartScheduler+0x130>)
 800b822:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b826:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b828:	f000 f8d6 	bl	800b9d8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b82c:	4b11      	ldr	r3, [pc, #68]	; (800b874 <xPortStartScheduler+0x134>)
 800b82e:	2200      	movs	r2, #0
 800b830:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b832:	f000 f8f5 	bl	800ba20 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b836:	4b10      	ldr	r3, [pc, #64]	; (800b878 <xPortStartScheduler+0x138>)
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	4a0f      	ldr	r2, [pc, #60]	; (800b878 <xPortStartScheduler+0x138>)
 800b83c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b840:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b842:	f7ff ff69 	bl	800b718 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b846:	f001 fc87 	bl	800d158 <vTaskSwitchContext>
	prvTaskExitError();
 800b84a:	f7ff ff21 	bl	800b690 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b84e:	2300      	movs	r3, #0
}
 800b850:	4618      	mov	r0, r3
 800b852:	3718      	adds	r7, #24
 800b854:	46bd      	mov	sp, r7
 800b856:	bd80      	pop	{r7, pc}
 800b858:	e000ed00 	.word	0xe000ed00
 800b85c:	410fc271 	.word	0x410fc271
 800b860:	410fc270 	.word	0x410fc270
 800b864:	e000e400 	.word	0xe000e400
 800b868:	240404a4 	.word	0x240404a4
 800b86c:	240404a8 	.word	0x240404a8
 800b870:	e000ed20 	.word	0xe000ed20
 800b874:	24000024 	.word	0x24000024
 800b878:	e000ef34 	.word	0xe000ef34

0800b87c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b87c:	b480      	push	{r7}
 800b87e:	b083      	sub	sp, #12
 800b880:	af00      	add	r7, sp, #0
 800b882:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b886:	f383 8811 	msr	BASEPRI, r3
 800b88a:	f3bf 8f6f 	isb	sy
 800b88e:	f3bf 8f4f 	dsb	sy
 800b892:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b894:	4b0e      	ldr	r3, [pc, #56]	; (800b8d0 <vPortEnterCritical+0x54>)
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	3301      	adds	r3, #1
 800b89a:	4a0d      	ldr	r2, [pc, #52]	; (800b8d0 <vPortEnterCritical+0x54>)
 800b89c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b89e:	4b0c      	ldr	r3, [pc, #48]	; (800b8d0 <vPortEnterCritical+0x54>)
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	2b01      	cmp	r3, #1
 800b8a4:	d10e      	bne.n	800b8c4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b8a6:	4b0b      	ldr	r3, [pc, #44]	; (800b8d4 <vPortEnterCritical+0x58>)
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	b2db      	uxtb	r3, r3
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d009      	beq.n	800b8c4 <vPortEnterCritical+0x48>
 800b8b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8b4:	f383 8811 	msr	BASEPRI, r3
 800b8b8:	f3bf 8f6f 	isb	sy
 800b8bc:	f3bf 8f4f 	dsb	sy
 800b8c0:	603b      	str	r3, [r7, #0]
 800b8c2:	e7fe      	b.n	800b8c2 <vPortEnterCritical+0x46>
	}
}
 800b8c4:	bf00      	nop
 800b8c6:	370c      	adds	r7, #12
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ce:	4770      	bx	lr
 800b8d0:	24000024 	.word	0x24000024
 800b8d4:	e000ed04 	.word	0xe000ed04

0800b8d8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b8d8:	b480      	push	{r7}
 800b8da:	b083      	sub	sp, #12
 800b8dc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b8de:	4b11      	ldr	r3, [pc, #68]	; (800b924 <vPortExitCritical+0x4c>)
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d109      	bne.n	800b8fa <vPortExitCritical+0x22>
 800b8e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8ea:	f383 8811 	msr	BASEPRI, r3
 800b8ee:	f3bf 8f6f 	isb	sy
 800b8f2:	f3bf 8f4f 	dsb	sy
 800b8f6:	607b      	str	r3, [r7, #4]
 800b8f8:	e7fe      	b.n	800b8f8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800b8fa:	4b0a      	ldr	r3, [pc, #40]	; (800b924 <vPortExitCritical+0x4c>)
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	3b01      	subs	r3, #1
 800b900:	4a08      	ldr	r2, [pc, #32]	; (800b924 <vPortExitCritical+0x4c>)
 800b902:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b904:	4b07      	ldr	r3, [pc, #28]	; (800b924 <vPortExitCritical+0x4c>)
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d104      	bne.n	800b916 <vPortExitCritical+0x3e>
 800b90c:	2300      	movs	r3, #0
 800b90e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b910:	683b      	ldr	r3, [r7, #0]
 800b912:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800b916:	bf00      	nop
 800b918:	370c      	adds	r7, #12
 800b91a:	46bd      	mov	sp, r7
 800b91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b920:	4770      	bx	lr
 800b922:	bf00      	nop
 800b924:	24000024 	.word	0x24000024
	...

0800b930 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b930:	f3ef 8009 	mrs	r0, PSP
 800b934:	f3bf 8f6f 	isb	sy
 800b938:	4b15      	ldr	r3, [pc, #84]	; (800b990 <pxCurrentTCBConst>)
 800b93a:	681a      	ldr	r2, [r3, #0]
 800b93c:	f01e 0f10 	tst.w	lr, #16
 800b940:	bf08      	it	eq
 800b942:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b946:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b94a:	6010      	str	r0, [r2, #0]
 800b94c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b950:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b954:	f380 8811 	msr	BASEPRI, r0
 800b958:	f3bf 8f4f 	dsb	sy
 800b95c:	f3bf 8f6f 	isb	sy
 800b960:	f001 fbfa 	bl	800d158 <vTaskSwitchContext>
 800b964:	f04f 0000 	mov.w	r0, #0
 800b968:	f380 8811 	msr	BASEPRI, r0
 800b96c:	bc09      	pop	{r0, r3}
 800b96e:	6819      	ldr	r1, [r3, #0]
 800b970:	6808      	ldr	r0, [r1, #0]
 800b972:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b976:	f01e 0f10 	tst.w	lr, #16
 800b97a:	bf08      	it	eq
 800b97c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b980:	f380 8809 	msr	PSP, r0
 800b984:	f3bf 8f6f 	isb	sy
 800b988:	4770      	bx	lr
 800b98a:	bf00      	nop
 800b98c:	f3af 8000 	nop.w

0800b990 <pxCurrentTCBConst>:
 800b990:	240404ac 	.word	0x240404ac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b994:	bf00      	nop
 800b996:	bf00      	nop

0800b998 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b998:	b580      	push	{r7, lr}
 800b99a:	b082      	sub	sp, #8
 800b99c:	af00      	add	r7, sp, #0
	__asm volatile
 800b99e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9a2:	f383 8811 	msr	BASEPRI, r3
 800b9a6:	f3bf 8f6f 	isb	sy
 800b9aa:	f3bf 8f4f 	dsb	sy
 800b9ae:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b9b0:	f001 fb1a 	bl	800cfe8 <xTaskIncrementTick>
 800b9b4:	4603      	mov	r3, r0
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d003      	beq.n	800b9c2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b9ba:	4b06      	ldr	r3, [pc, #24]	; (800b9d4 <SysTick_Handler+0x3c>)
 800b9bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b9c0:	601a      	str	r2, [r3, #0]
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b9c6:	683b      	ldr	r3, [r7, #0]
 800b9c8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800b9cc:	bf00      	nop
 800b9ce:	3708      	adds	r7, #8
 800b9d0:	46bd      	mov	sp, r7
 800b9d2:	bd80      	pop	{r7, pc}
 800b9d4:	e000ed04 	.word	0xe000ed04

0800b9d8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b9d8:	b480      	push	{r7}
 800b9da:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b9dc:	4b0b      	ldr	r3, [pc, #44]	; (800ba0c <vPortSetupTimerInterrupt+0x34>)
 800b9de:	2200      	movs	r2, #0
 800b9e0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b9e2:	4b0b      	ldr	r3, [pc, #44]	; (800ba10 <vPortSetupTimerInterrupt+0x38>)
 800b9e4:	2200      	movs	r2, #0
 800b9e6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b9e8:	4b0a      	ldr	r3, [pc, #40]	; (800ba14 <vPortSetupTimerInterrupt+0x3c>)
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	4a0a      	ldr	r2, [pc, #40]	; (800ba18 <vPortSetupTimerInterrupt+0x40>)
 800b9ee:	fba2 2303 	umull	r2, r3, r2, r3
 800b9f2:	099b      	lsrs	r3, r3, #6
 800b9f4:	4a09      	ldr	r2, [pc, #36]	; (800ba1c <vPortSetupTimerInterrupt+0x44>)
 800b9f6:	3b01      	subs	r3, #1
 800b9f8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b9fa:	4b04      	ldr	r3, [pc, #16]	; (800ba0c <vPortSetupTimerInterrupt+0x34>)
 800b9fc:	2207      	movs	r2, #7
 800b9fe:	601a      	str	r2, [r3, #0]
}
 800ba00:	bf00      	nop
 800ba02:	46bd      	mov	sp, r7
 800ba04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba08:	4770      	bx	lr
 800ba0a:	bf00      	nop
 800ba0c:	e000e010 	.word	0xe000e010
 800ba10:	e000e018 	.word	0xe000e018
 800ba14:	24000000 	.word	0x24000000
 800ba18:	10624dd3 	.word	0x10624dd3
 800ba1c:	e000e014 	.word	0xe000e014

0800ba20 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ba20:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ba30 <vPortEnableVFP+0x10>
 800ba24:	6801      	ldr	r1, [r0, #0]
 800ba26:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ba2a:	6001      	str	r1, [r0, #0]
 800ba2c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ba2e:	bf00      	nop
 800ba30:	e000ed88 	.word	0xe000ed88

0800ba34 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ba34:	b480      	push	{r7}
 800ba36:	b085      	sub	sp, #20
 800ba38:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ba3a:	f3ef 8305 	mrs	r3, IPSR
 800ba3e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	2b0f      	cmp	r3, #15
 800ba44:	d913      	bls.n	800ba6e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ba46:	4a16      	ldr	r2, [pc, #88]	; (800baa0 <vPortValidateInterruptPriority+0x6c>)
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	4413      	add	r3, r2
 800ba4c:	781b      	ldrb	r3, [r3, #0]
 800ba4e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ba50:	4b14      	ldr	r3, [pc, #80]	; (800baa4 <vPortValidateInterruptPriority+0x70>)
 800ba52:	781b      	ldrb	r3, [r3, #0]
 800ba54:	7afa      	ldrb	r2, [r7, #11]
 800ba56:	429a      	cmp	r2, r3
 800ba58:	d209      	bcs.n	800ba6e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800ba5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba5e:	f383 8811 	msr	BASEPRI, r3
 800ba62:	f3bf 8f6f 	isb	sy
 800ba66:	f3bf 8f4f 	dsb	sy
 800ba6a:	607b      	str	r3, [r7, #4]
 800ba6c:	e7fe      	b.n	800ba6c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ba6e:	4b0e      	ldr	r3, [pc, #56]	; (800baa8 <vPortValidateInterruptPriority+0x74>)
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ba76:	4b0d      	ldr	r3, [pc, #52]	; (800baac <vPortValidateInterruptPriority+0x78>)
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	429a      	cmp	r2, r3
 800ba7c:	d909      	bls.n	800ba92 <vPortValidateInterruptPriority+0x5e>
 800ba7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba82:	f383 8811 	msr	BASEPRI, r3
 800ba86:	f3bf 8f6f 	isb	sy
 800ba8a:	f3bf 8f4f 	dsb	sy
 800ba8e:	603b      	str	r3, [r7, #0]
 800ba90:	e7fe      	b.n	800ba90 <vPortValidateInterruptPriority+0x5c>
	}
 800ba92:	bf00      	nop
 800ba94:	3714      	adds	r7, #20
 800ba96:	46bd      	mov	sp, r7
 800ba98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba9c:	4770      	bx	lr
 800ba9e:	bf00      	nop
 800baa0:	e000e3f0 	.word	0xe000e3f0
 800baa4:	240404a4 	.word	0x240404a4
 800baa8:	e000ed0c 	.word	0xe000ed0c
 800baac:	240404a8 	.word	0x240404a8

0800bab0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800bab0:	b580      	push	{r7, lr}
 800bab2:	b084      	sub	sp, #16
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	6078      	str	r0, [r7, #4]
 800bab8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d109      	bne.n	800bad8 <xQueueGenericReset+0x28>
 800bac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bac8:	f383 8811 	msr	BASEPRI, r3
 800bacc:	f3bf 8f6f 	isb	sy
 800bad0:	f3bf 8f4f 	dsb	sy
 800bad4:	60bb      	str	r3, [r7, #8]
 800bad6:	e7fe      	b.n	800bad6 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800bad8:	f7ff fed0 	bl	800b87c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	681a      	ldr	r2, [r3, #0]
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bae4:	68f9      	ldr	r1, [r7, #12]
 800bae6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bae8:	fb01 f303 	mul.w	r3, r1, r3
 800baec:	441a      	add	r2, r3
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	2200      	movs	r2, #0
 800baf6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	681a      	ldr	r2, [r3, #0]
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	681a      	ldr	r2, [r3, #0]
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb08:	3b01      	subs	r3, #1
 800bb0a:	68f9      	ldr	r1, [r7, #12]
 800bb0c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bb0e:	fb01 f303 	mul.w	r3, r1, r3
 800bb12:	441a      	add	r2, r3
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	22ff      	movs	r2, #255	; 0xff
 800bb1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	22ff      	movs	r2, #255	; 0xff
 800bb24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800bb28:	683b      	ldr	r3, [r7, #0]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d114      	bne.n	800bb58 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	691b      	ldr	r3, [r3, #16]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d01a      	beq.n	800bb6c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	3310      	adds	r3, #16
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	f001 fb9a 	bl	800d274 <xTaskRemoveFromEventList>
 800bb40:	4603      	mov	r3, r0
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d012      	beq.n	800bb6c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800bb46:	4b0d      	ldr	r3, [pc, #52]	; (800bb7c <xQueueGenericReset+0xcc>)
 800bb48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb4c:	601a      	str	r2, [r3, #0]
 800bb4e:	f3bf 8f4f 	dsb	sy
 800bb52:	f3bf 8f6f 	isb	sy
 800bb56:	e009      	b.n	800bb6c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	3310      	adds	r3, #16
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	f7ff fcaf 	bl	800b4c0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	3324      	adds	r3, #36	; 0x24
 800bb66:	4618      	mov	r0, r3
 800bb68:	f7ff fcaa 	bl	800b4c0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800bb6c:	f7ff feb4 	bl	800b8d8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800bb70:	2301      	movs	r3, #1
}
 800bb72:	4618      	mov	r0, r3
 800bb74:	3710      	adds	r7, #16
 800bb76:	46bd      	mov	sp, r7
 800bb78:	bd80      	pop	{r7, pc}
 800bb7a:	bf00      	nop
 800bb7c:	e000ed04 	.word	0xe000ed04

0800bb80 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800bb80:	b580      	push	{r7, lr}
 800bb82:	b08e      	sub	sp, #56	; 0x38
 800bb84:	af02      	add	r7, sp, #8
 800bb86:	60f8      	str	r0, [r7, #12]
 800bb88:	60b9      	str	r1, [r7, #8]
 800bb8a:	607a      	str	r2, [r7, #4]
 800bb8c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d109      	bne.n	800bba8 <xQueueGenericCreateStatic+0x28>
 800bb94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb98:	f383 8811 	msr	BASEPRI, r3
 800bb9c:	f3bf 8f6f 	isb	sy
 800bba0:	f3bf 8f4f 	dsb	sy
 800bba4:	62bb      	str	r3, [r7, #40]	; 0x28
 800bba6:	e7fe      	b.n	800bba6 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800bba8:	683b      	ldr	r3, [r7, #0]
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d109      	bne.n	800bbc2 <xQueueGenericCreateStatic+0x42>
 800bbae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbb2:	f383 8811 	msr	BASEPRI, r3
 800bbb6:	f3bf 8f6f 	isb	sy
 800bbba:	f3bf 8f4f 	dsb	sy
 800bbbe:	627b      	str	r3, [r7, #36]	; 0x24
 800bbc0:	e7fe      	b.n	800bbc0 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d002      	beq.n	800bbce <xQueueGenericCreateStatic+0x4e>
 800bbc8:	68bb      	ldr	r3, [r7, #8]
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d001      	beq.n	800bbd2 <xQueueGenericCreateStatic+0x52>
 800bbce:	2301      	movs	r3, #1
 800bbd0:	e000      	b.n	800bbd4 <xQueueGenericCreateStatic+0x54>
 800bbd2:	2300      	movs	r3, #0
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d109      	bne.n	800bbec <xQueueGenericCreateStatic+0x6c>
 800bbd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbdc:	f383 8811 	msr	BASEPRI, r3
 800bbe0:	f3bf 8f6f 	isb	sy
 800bbe4:	f3bf 8f4f 	dsb	sy
 800bbe8:	623b      	str	r3, [r7, #32]
 800bbea:	e7fe      	b.n	800bbea <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d102      	bne.n	800bbf8 <xQueueGenericCreateStatic+0x78>
 800bbf2:	68bb      	ldr	r3, [r7, #8]
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d101      	bne.n	800bbfc <xQueueGenericCreateStatic+0x7c>
 800bbf8:	2301      	movs	r3, #1
 800bbfa:	e000      	b.n	800bbfe <xQueueGenericCreateStatic+0x7e>
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d109      	bne.n	800bc16 <xQueueGenericCreateStatic+0x96>
 800bc02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc06:	f383 8811 	msr	BASEPRI, r3
 800bc0a:	f3bf 8f6f 	isb	sy
 800bc0e:	f3bf 8f4f 	dsb	sy
 800bc12:	61fb      	str	r3, [r7, #28]
 800bc14:	e7fe      	b.n	800bc14 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800bc16:	2348      	movs	r3, #72	; 0x48
 800bc18:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800bc1a:	697b      	ldr	r3, [r7, #20]
 800bc1c:	2b48      	cmp	r3, #72	; 0x48
 800bc1e:	d009      	beq.n	800bc34 <xQueueGenericCreateStatic+0xb4>
 800bc20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc24:	f383 8811 	msr	BASEPRI, r3
 800bc28:	f3bf 8f6f 	isb	sy
 800bc2c:	f3bf 8f4f 	dsb	sy
 800bc30:	61bb      	str	r3, [r7, #24]
 800bc32:	e7fe      	b.n	800bc32 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800bc34:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bc36:	683b      	ldr	r3, [r7, #0]
 800bc38:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800bc3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d00d      	beq.n	800bc5c <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bc40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc42:	2201      	movs	r2, #1
 800bc44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bc48:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800bc4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc4e:	9300      	str	r3, [sp, #0]
 800bc50:	4613      	mov	r3, r2
 800bc52:	687a      	ldr	r2, [r7, #4]
 800bc54:	68b9      	ldr	r1, [r7, #8]
 800bc56:	68f8      	ldr	r0, [r7, #12]
 800bc58:	f000 f844 	bl	800bce4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bc5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800bc5e:	4618      	mov	r0, r3
 800bc60:	3730      	adds	r7, #48	; 0x30
 800bc62:	46bd      	mov	sp, r7
 800bc64:	bd80      	pop	{r7, pc}

0800bc66 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800bc66:	b580      	push	{r7, lr}
 800bc68:	b08a      	sub	sp, #40	; 0x28
 800bc6a:	af02      	add	r7, sp, #8
 800bc6c:	60f8      	str	r0, [r7, #12]
 800bc6e:	60b9      	str	r1, [r7, #8]
 800bc70:	4613      	mov	r3, r2
 800bc72:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d109      	bne.n	800bc8e <xQueueGenericCreate+0x28>
 800bc7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc7e:	f383 8811 	msr	BASEPRI, r3
 800bc82:	f3bf 8f6f 	isb	sy
 800bc86:	f3bf 8f4f 	dsb	sy
 800bc8a:	613b      	str	r3, [r7, #16]
 800bc8c:	e7fe      	b.n	800bc8c <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800bc8e:	68bb      	ldr	r3, [r7, #8]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d102      	bne.n	800bc9a <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800bc94:	2300      	movs	r3, #0
 800bc96:	61fb      	str	r3, [r7, #28]
 800bc98:	e004      	b.n	800bca4 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	68ba      	ldr	r2, [r7, #8]
 800bc9e:	fb02 f303 	mul.w	r3, r2, r3
 800bca2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800bca4:	69fb      	ldr	r3, [r7, #28]
 800bca6:	3348      	adds	r3, #72	; 0x48
 800bca8:	4618      	mov	r0, r3
 800bcaa:	f7ff fa33 	bl	800b114 <pvPortMalloc>
 800bcae:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800bcb0:	69bb      	ldr	r3, [r7, #24]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d011      	beq.n	800bcda <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800bcb6:	69bb      	ldr	r3, [r7, #24]
 800bcb8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bcba:	697b      	ldr	r3, [r7, #20]
 800bcbc:	3348      	adds	r3, #72	; 0x48
 800bcbe:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800bcc0:	69bb      	ldr	r3, [r7, #24]
 800bcc2:	2200      	movs	r2, #0
 800bcc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bcc8:	79fa      	ldrb	r2, [r7, #7]
 800bcca:	69bb      	ldr	r3, [r7, #24]
 800bccc:	9300      	str	r3, [sp, #0]
 800bcce:	4613      	mov	r3, r2
 800bcd0:	697a      	ldr	r2, [r7, #20]
 800bcd2:	68b9      	ldr	r1, [r7, #8]
 800bcd4:	68f8      	ldr	r0, [r7, #12]
 800bcd6:	f000 f805 	bl	800bce4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bcda:	69bb      	ldr	r3, [r7, #24]
	}
 800bcdc:	4618      	mov	r0, r3
 800bcde:	3720      	adds	r7, #32
 800bce0:	46bd      	mov	sp, r7
 800bce2:	bd80      	pop	{r7, pc}

0800bce4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800bce4:	b580      	push	{r7, lr}
 800bce6:	b084      	sub	sp, #16
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	60f8      	str	r0, [r7, #12]
 800bcec:	60b9      	str	r1, [r7, #8]
 800bcee:	607a      	str	r2, [r7, #4]
 800bcf0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800bcf2:	68bb      	ldr	r3, [r7, #8]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d103      	bne.n	800bd00 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bcf8:	69bb      	ldr	r3, [r7, #24]
 800bcfa:	69ba      	ldr	r2, [r7, #24]
 800bcfc:	601a      	str	r2, [r3, #0]
 800bcfe:	e002      	b.n	800bd06 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800bd00:	69bb      	ldr	r3, [r7, #24]
 800bd02:	687a      	ldr	r2, [r7, #4]
 800bd04:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800bd06:	69bb      	ldr	r3, [r7, #24]
 800bd08:	68fa      	ldr	r2, [r7, #12]
 800bd0a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800bd0c:	69bb      	ldr	r3, [r7, #24]
 800bd0e:	68ba      	ldr	r2, [r7, #8]
 800bd10:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bd12:	2101      	movs	r1, #1
 800bd14:	69b8      	ldr	r0, [r7, #24]
 800bd16:	f7ff fecb 	bl	800bab0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800bd1a:	bf00      	nop
 800bd1c:	3710      	adds	r7, #16
 800bd1e:	46bd      	mov	sp, r7
 800bd20:	bd80      	pop	{r7, pc}

0800bd22 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800bd22:	b580      	push	{r7, lr}
 800bd24:	b082      	sub	sp, #8
 800bd26:	af00      	add	r7, sp, #0
 800bd28:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d00e      	beq.n	800bd4e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	2200      	movs	r2, #0
 800bd34:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	2200      	movs	r2, #0
 800bd3a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	2200      	movs	r2, #0
 800bd40:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800bd42:	2300      	movs	r3, #0
 800bd44:	2200      	movs	r2, #0
 800bd46:	2100      	movs	r1, #0
 800bd48:	6878      	ldr	r0, [r7, #4]
 800bd4a:	f000 f837 	bl	800bdbc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800bd4e:	bf00      	nop
 800bd50:	3708      	adds	r7, #8
 800bd52:	46bd      	mov	sp, r7
 800bd54:	bd80      	pop	{r7, pc}

0800bd56 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800bd56:	b580      	push	{r7, lr}
 800bd58:	b086      	sub	sp, #24
 800bd5a:	af00      	add	r7, sp, #0
 800bd5c:	4603      	mov	r3, r0
 800bd5e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800bd60:	2301      	movs	r3, #1
 800bd62:	617b      	str	r3, [r7, #20]
 800bd64:	2300      	movs	r3, #0
 800bd66:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800bd68:	79fb      	ldrb	r3, [r7, #7]
 800bd6a:	461a      	mov	r2, r3
 800bd6c:	6939      	ldr	r1, [r7, #16]
 800bd6e:	6978      	ldr	r0, [r7, #20]
 800bd70:	f7ff ff79 	bl	800bc66 <xQueueGenericCreate>
 800bd74:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800bd76:	68f8      	ldr	r0, [r7, #12]
 800bd78:	f7ff ffd3 	bl	800bd22 <prvInitialiseMutex>

		return xNewQueue;
 800bd7c:	68fb      	ldr	r3, [r7, #12]
	}
 800bd7e:	4618      	mov	r0, r3
 800bd80:	3718      	adds	r7, #24
 800bd82:	46bd      	mov	sp, r7
 800bd84:	bd80      	pop	{r7, pc}

0800bd86 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800bd86:	b580      	push	{r7, lr}
 800bd88:	b088      	sub	sp, #32
 800bd8a:	af02      	add	r7, sp, #8
 800bd8c:	4603      	mov	r3, r0
 800bd8e:	6039      	str	r1, [r7, #0]
 800bd90:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800bd92:	2301      	movs	r3, #1
 800bd94:	617b      	str	r3, [r7, #20]
 800bd96:	2300      	movs	r3, #0
 800bd98:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800bd9a:	79fb      	ldrb	r3, [r7, #7]
 800bd9c:	9300      	str	r3, [sp, #0]
 800bd9e:	683b      	ldr	r3, [r7, #0]
 800bda0:	2200      	movs	r2, #0
 800bda2:	6939      	ldr	r1, [r7, #16]
 800bda4:	6978      	ldr	r0, [r7, #20]
 800bda6:	f7ff feeb 	bl	800bb80 <xQueueGenericCreateStatic>
 800bdaa:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800bdac:	68f8      	ldr	r0, [r7, #12]
 800bdae:	f7ff ffb8 	bl	800bd22 <prvInitialiseMutex>

		return xNewQueue;
 800bdb2:	68fb      	ldr	r3, [r7, #12]
	}
 800bdb4:	4618      	mov	r0, r3
 800bdb6:	3718      	adds	r7, #24
 800bdb8:	46bd      	mov	sp, r7
 800bdba:	bd80      	pop	{r7, pc}

0800bdbc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800bdbc:	b580      	push	{r7, lr}
 800bdbe:	b08e      	sub	sp, #56	; 0x38
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	60f8      	str	r0, [r7, #12]
 800bdc4:	60b9      	str	r1, [r7, #8]
 800bdc6:	607a      	str	r2, [r7, #4]
 800bdc8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800bdca:	2300      	movs	r3, #0
 800bdcc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bdd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d109      	bne.n	800bdec <xQueueGenericSend+0x30>
 800bdd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bddc:	f383 8811 	msr	BASEPRI, r3
 800bde0:	f3bf 8f6f 	isb	sy
 800bde4:	f3bf 8f4f 	dsb	sy
 800bde8:	62bb      	str	r3, [r7, #40]	; 0x28
 800bdea:	e7fe      	b.n	800bdea <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bdec:	68bb      	ldr	r3, [r7, #8]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d103      	bne.n	800bdfa <xQueueGenericSend+0x3e>
 800bdf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d101      	bne.n	800bdfe <xQueueGenericSend+0x42>
 800bdfa:	2301      	movs	r3, #1
 800bdfc:	e000      	b.n	800be00 <xQueueGenericSend+0x44>
 800bdfe:	2300      	movs	r3, #0
 800be00:	2b00      	cmp	r3, #0
 800be02:	d109      	bne.n	800be18 <xQueueGenericSend+0x5c>
 800be04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be08:	f383 8811 	msr	BASEPRI, r3
 800be0c:	f3bf 8f6f 	isb	sy
 800be10:	f3bf 8f4f 	dsb	sy
 800be14:	627b      	str	r3, [r7, #36]	; 0x24
 800be16:	e7fe      	b.n	800be16 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800be18:	683b      	ldr	r3, [r7, #0]
 800be1a:	2b02      	cmp	r3, #2
 800be1c:	d103      	bne.n	800be26 <xQueueGenericSend+0x6a>
 800be1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be22:	2b01      	cmp	r3, #1
 800be24:	d101      	bne.n	800be2a <xQueueGenericSend+0x6e>
 800be26:	2301      	movs	r3, #1
 800be28:	e000      	b.n	800be2c <xQueueGenericSend+0x70>
 800be2a:	2300      	movs	r3, #0
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d109      	bne.n	800be44 <xQueueGenericSend+0x88>
 800be30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be34:	f383 8811 	msr	BASEPRI, r3
 800be38:	f3bf 8f6f 	isb	sy
 800be3c:	f3bf 8f4f 	dsb	sy
 800be40:	623b      	str	r3, [r7, #32]
 800be42:	e7fe      	b.n	800be42 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800be44:	f001 fbcc 	bl	800d5e0 <xTaskGetSchedulerState>
 800be48:	4603      	mov	r3, r0
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d102      	bne.n	800be54 <xQueueGenericSend+0x98>
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	2b00      	cmp	r3, #0
 800be52:	d101      	bne.n	800be58 <xQueueGenericSend+0x9c>
 800be54:	2301      	movs	r3, #1
 800be56:	e000      	b.n	800be5a <xQueueGenericSend+0x9e>
 800be58:	2300      	movs	r3, #0
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d109      	bne.n	800be72 <xQueueGenericSend+0xb6>
 800be5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be62:	f383 8811 	msr	BASEPRI, r3
 800be66:	f3bf 8f6f 	isb	sy
 800be6a:	f3bf 8f4f 	dsb	sy
 800be6e:	61fb      	str	r3, [r7, #28]
 800be70:	e7fe      	b.n	800be70 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800be72:	f7ff fd03 	bl	800b87c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800be76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800be7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be7e:	429a      	cmp	r2, r3
 800be80:	d302      	bcc.n	800be88 <xQueueGenericSend+0xcc>
 800be82:	683b      	ldr	r3, [r7, #0]
 800be84:	2b02      	cmp	r3, #2
 800be86:	d129      	bne.n	800bedc <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800be88:	683a      	ldr	r2, [r7, #0]
 800be8a:	68b9      	ldr	r1, [r7, #8]
 800be8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800be8e:	f000 fc82 	bl	800c796 <prvCopyDataToQueue>
 800be92:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800be94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d010      	beq.n	800bebe <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800be9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be9e:	3324      	adds	r3, #36	; 0x24
 800bea0:	4618      	mov	r0, r3
 800bea2:	f001 f9e7 	bl	800d274 <xTaskRemoveFromEventList>
 800bea6:	4603      	mov	r3, r0
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d013      	beq.n	800bed4 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800beac:	4b3f      	ldr	r3, [pc, #252]	; (800bfac <xQueueGenericSend+0x1f0>)
 800beae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800beb2:	601a      	str	r2, [r3, #0]
 800beb4:	f3bf 8f4f 	dsb	sy
 800beb8:	f3bf 8f6f 	isb	sy
 800bebc:	e00a      	b.n	800bed4 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800bebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d007      	beq.n	800bed4 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800bec4:	4b39      	ldr	r3, [pc, #228]	; (800bfac <xQueueGenericSend+0x1f0>)
 800bec6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800beca:	601a      	str	r2, [r3, #0]
 800becc:	f3bf 8f4f 	dsb	sy
 800bed0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bed4:	f7ff fd00 	bl	800b8d8 <vPortExitCritical>
				return pdPASS;
 800bed8:	2301      	movs	r3, #1
 800beda:	e063      	b.n	800bfa4 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d103      	bne.n	800beea <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bee2:	f7ff fcf9 	bl	800b8d8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800bee6:	2300      	movs	r3, #0
 800bee8:	e05c      	b.n	800bfa4 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800beea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800beec:	2b00      	cmp	r3, #0
 800beee:	d106      	bne.n	800befe <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bef0:	f107 0314 	add.w	r3, r7, #20
 800bef4:	4618      	mov	r0, r3
 800bef6:	f001 fa1f 	bl	800d338 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800befa:	2301      	movs	r3, #1
 800befc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800befe:	f7ff fceb 	bl	800b8d8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bf02:	f000 ffa5 	bl	800ce50 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bf06:	f7ff fcb9 	bl	800b87c <vPortEnterCritical>
 800bf0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bf10:	b25b      	sxtb	r3, r3
 800bf12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf16:	d103      	bne.n	800bf20 <xQueueGenericSend+0x164>
 800bf18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf1a:	2200      	movs	r2, #0
 800bf1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bf20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bf26:	b25b      	sxtb	r3, r3
 800bf28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf2c:	d103      	bne.n	800bf36 <xQueueGenericSend+0x17a>
 800bf2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf30:	2200      	movs	r2, #0
 800bf32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bf36:	f7ff fccf 	bl	800b8d8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bf3a:	1d3a      	adds	r2, r7, #4
 800bf3c:	f107 0314 	add.w	r3, r7, #20
 800bf40:	4611      	mov	r1, r2
 800bf42:	4618      	mov	r0, r3
 800bf44:	f001 fa0e 	bl	800d364 <xTaskCheckForTimeOut>
 800bf48:	4603      	mov	r3, r0
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d124      	bne.n	800bf98 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800bf4e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bf50:	f000 fd19 	bl	800c986 <prvIsQueueFull>
 800bf54:	4603      	mov	r3, r0
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d018      	beq.n	800bf8c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bf5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf5c:	3310      	adds	r3, #16
 800bf5e:	687a      	ldr	r2, [r7, #4]
 800bf60:	4611      	mov	r1, r2
 800bf62:	4618      	mov	r0, r3
 800bf64:	f001 f962 	bl	800d22c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800bf68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bf6a:	f000 fca4 	bl	800c8b6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800bf6e:	f000 ff7d 	bl	800ce6c <xTaskResumeAll>
 800bf72:	4603      	mov	r3, r0
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	f47f af7c 	bne.w	800be72 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800bf7a:	4b0c      	ldr	r3, [pc, #48]	; (800bfac <xQueueGenericSend+0x1f0>)
 800bf7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf80:	601a      	str	r2, [r3, #0]
 800bf82:	f3bf 8f4f 	dsb	sy
 800bf86:	f3bf 8f6f 	isb	sy
 800bf8a:	e772      	b.n	800be72 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800bf8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bf8e:	f000 fc92 	bl	800c8b6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bf92:	f000 ff6b 	bl	800ce6c <xTaskResumeAll>
 800bf96:	e76c      	b.n	800be72 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800bf98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bf9a:	f000 fc8c 	bl	800c8b6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bf9e:	f000 ff65 	bl	800ce6c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800bfa2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	3738      	adds	r7, #56	; 0x38
 800bfa8:	46bd      	mov	sp, r7
 800bfaa:	bd80      	pop	{r7, pc}
 800bfac:	e000ed04 	.word	0xe000ed04

0800bfb0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800bfb0:	b580      	push	{r7, lr}
 800bfb2:	b08e      	sub	sp, #56	; 0x38
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	60f8      	str	r0, [r7, #12]
 800bfb8:	60b9      	str	r1, [r7, #8]
 800bfba:	607a      	str	r2, [r7, #4]
 800bfbc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bfc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d109      	bne.n	800bfdc <xQueueGenericSendFromISR+0x2c>
 800bfc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfcc:	f383 8811 	msr	BASEPRI, r3
 800bfd0:	f3bf 8f6f 	isb	sy
 800bfd4:	f3bf 8f4f 	dsb	sy
 800bfd8:	627b      	str	r3, [r7, #36]	; 0x24
 800bfda:	e7fe      	b.n	800bfda <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bfdc:	68bb      	ldr	r3, [r7, #8]
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d103      	bne.n	800bfea <xQueueGenericSendFromISR+0x3a>
 800bfe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d101      	bne.n	800bfee <xQueueGenericSendFromISR+0x3e>
 800bfea:	2301      	movs	r3, #1
 800bfec:	e000      	b.n	800bff0 <xQueueGenericSendFromISR+0x40>
 800bfee:	2300      	movs	r3, #0
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d109      	bne.n	800c008 <xQueueGenericSendFromISR+0x58>
 800bff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bff8:	f383 8811 	msr	BASEPRI, r3
 800bffc:	f3bf 8f6f 	isb	sy
 800c000:	f3bf 8f4f 	dsb	sy
 800c004:	623b      	str	r3, [r7, #32]
 800c006:	e7fe      	b.n	800c006 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c008:	683b      	ldr	r3, [r7, #0]
 800c00a:	2b02      	cmp	r3, #2
 800c00c:	d103      	bne.n	800c016 <xQueueGenericSendFromISR+0x66>
 800c00e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c010:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c012:	2b01      	cmp	r3, #1
 800c014:	d101      	bne.n	800c01a <xQueueGenericSendFromISR+0x6a>
 800c016:	2301      	movs	r3, #1
 800c018:	e000      	b.n	800c01c <xQueueGenericSendFromISR+0x6c>
 800c01a:	2300      	movs	r3, #0
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d109      	bne.n	800c034 <xQueueGenericSendFromISR+0x84>
 800c020:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c024:	f383 8811 	msr	BASEPRI, r3
 800c028:	f3bf 8f6f 	isb	sy
 800c02c:	f3bf 8f4f 	dsb	sy
 800c030:	61fb      	str	r3, [r7, #28]
 800c032:	e7fe      	b.n	800c032 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c034:	f7ff fcfe 	bl	800ba34 <vPortValidateInterruptPriority>
	__asm volatile
 800c038:	f3ef 8211 	mrs	r2, BASEPRI
 800c03c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c040:	f383 8811 	msr	BASEPRI, r3
 800c044:	f3bf 8f6f 	isb	sy
 800c048:	f3bf 8f4f 	dsb	sy
 800c04c:	61ba      	str	r2, [r7, #24]
 800c04e:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c050:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c052:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c056:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c05a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c05c:	429a      	cmp	r2, r3
 800c05e:	d302      	bcc.n	800c066 <xQueueGenericSendFromISR+0xb6>
 800c060:	683b      	ldr	r3, [r7, #0]
 800c062:	2b02      	cmp	r3, #2
 800c064:	d12c      	bne.n	800c0c0 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c068:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c06c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c070:	683a      	ldr	r2, [r7, #0]
 800c072:	68b9      	ldr	r1, [r7, #8]
 800c074:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c076:	f000 fb8e 	bl	800c796 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c07a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800c07e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c082:	d112      	bne.n	800c0aa <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d016      	beq.n	800c0ba <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c08c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c08e:	3324      	adds	r3, #36	; 0x24
 800c090:	4618      	mov	r0, r3
 800c092:	f001 f8ef 	bl	800d274 <xTaskRemoveFromEventList>
 800c096:	4603      	mov	r3, r0
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d00e      	beq.n	800c0ba <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d00b      	beq.n	800c0ba <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	2201      	movs	r2, #1
 800c0a6:	601a      	str	r2, [r3, #0]
 800c0a8:	e007      	b.n	800c0ba <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c0aa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c0ae:	3301      	adds	r3, #1
 800c0b0:	b2db      	uxtb	r3, r3
 800c0b2:	b25a      	sxtb	r2, r3
 800c0b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c0ba:	2301      	movs	r3, #1
 800c0bc:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800c0be:	e001      	b.n	800c0c4 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c0c0:	2300      	movs	r3, #0
 800c0c2:	637b      	str	r3, [r7, #52]	; 0x34
 800c0c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0c6:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c0c8:	693b      	ldr	r3, [r7, #16]
 800c0ca:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c0ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	3738      	adds	r7, #56	; 0x38
 800c0d4:	46bd      	mov	sp, r7
 800c0d6:	bd80      	pop	{r7, pc}

0800c0d8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c0d8:	b580      	push	{r7, lr}
 800c0da:	b08e      	sub	sp, #56	; 0x38
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	6078      	str	r0, [r7, #4]
 800c0e0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800c0e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d109      	bne.n	800c100 <xQueueGiveFromISR+0x28>
	__asm volatile
 800c0ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0f0:	f383 8811 	msr	BASEPRI, r3
 800c0f4:	f3bf 8f6f 	isb	sy
 800c0f8:	f3bf 8f4f 	dsb	sy
 800c0fc:	623b      	str	r3, [r7, #32]
 800c0fe:	e7fe      	b.n	800c0fe <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c104:	2b00      	cmp	r3, #0
 800c106:	d009      	beq.n	800c11c <xQueueGiveFromISR+0x44>
 800c108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c10c:	f383 8811 	msr	BASEPRI, r3
 800c110:	f3bf 8f6f 	isb	sy
 800c114:	f3bf 8f4f 	dsb	sy
 800c118:	61fb      	str	r3, [r7, #28]
 800c11a:	e7fe      	b.n	800c11a <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c11c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	2b00      	cmp	r3, #0
 800c122:	d103      	bne.n	800c12c <xQueueGiveFromISR+0x54>
 800c124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c126:	689b      	ldr	r3, [r3, #8]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d101      	bne.n	800c130 <xQueueGiveFromISR+0x58>
 800c12c:	2301      	movs	r3, #1
 800c12e:	e000      	b.n	800c132 <xQueueGiveFromISR+0x5a>
 800c130:	2300      	movs	r3, #0
 800c132:	2b00      	cmp	r3, #0
 800c134:	d109      	bne.n	800c14a <xQueueGiveFromISR+0x72>
 800c136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c13a:	f383 8811 	msr	BASEPRI, r3
 800c13e:	f3bf 8f6f 	isb	sy
 800c142:	f3bf 8f4f 	dsb	sy
 800c146:	61bb      	str	r3, [r7, #24]
 800c148:	e7fe      	b.n	800c148 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c14a:	f7ff fc73 	bl	800ba34 <vPortValidateInterruptPriority>
	__asm volatile
 800c14e:	f3ef 8211 	mrs	r2, BASEPRI
 800c152:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c156:	f383 8811 	msr	BASEPRI, r3
 800c15a:	f3bf 8f6f 	isb	sy
 800c15e:	f3bf 8f4f 	dsb	sy
 800c162:	617a      	str	r2, [r7, #20]
 800c164:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800c166:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c168:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c16a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c16c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c16e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800c170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c172:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c174:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c176:	429a      	cmp	r2, r3
 800c178:	d22b      	bcs.n	800c1d2 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c17a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c17c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c180:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c186:	1c5a      	adds	r2, r3, #1
 800c188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c18a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c18c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c190:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c194:	d112      	bne.n	800c1bc <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d016      	beq.n	800c1cc <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c19e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1a0:	3324      	adds	r3, #36	; 0x24
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	f001 f866 	bl	800d274 <xTaskRemoveFromEventList>
 800c1a8:	4603      	mov	r3, r0
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d00e      	beq.n	800c1cc <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c1ae:	683b      	ldr	r3, [r7, #0]
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d00b      	beq.n	800c1cc <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c1b4:	683b      	ldr	r3, [r7, #0]
 800c1b6:	2201      	movs	r2, #1
 800c1b8:	601a      	str	r2, [r3, #0]
 800c1ba:	e007      	b.n	800c1cc <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c1bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c1c0:	3301      	adds	r3, #1
 800c1c2:	b2db      	uxtb	r3, r3
 800c1c4:	b25a      	sxtb	r2, r3
 800c1c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c1cc:	2301      	movs	r3, #1
 800c1ce:	637b      	str	r3, [r7, #52]	; 0x34
 800c1d0:	e001      	b.n	800c1d6 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	637b      	str	r3, [r7, #52]	; 0x34
 800c1d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1d8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c1e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	3738      	adds	r7, #56	; 0x38
 800c1e6:	46bd      	mov	sp, r7
 800c1e8:	bd80      	pop	{r7, pc}
	...

0800c1ec <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c1ec:	b580      	push	{r7, lr}
 800c1ee:	b08c      	sub	sp, #48	; 0x30
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	60f8      	str	r0, [r7, #12]
 800c1f4:	60b9      	str	r1, [r7, #8]
 800c1f6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c202:	2b00      	cmp	r3, #0
 800c204:	d109      	bne.n	800c21a <xQueueReceive+0x2e>
	__asm volatile
 800c206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c20a:	f383 8811 	msr	BASEPRI, r3
 800c20e:	f3bf 8f6f 	isb	sy
 800c212:	f3bf 8f4f 	dsb	sy
 800c216:	623b      	str	r3, [r7, #32]
 800c218:	e7fe      	b.n	800c218 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c21a:	68bb      	ldr	r3, [r7, #8]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d103      	bne.n	800c228 <xQueueReceive+0x3c>
 800c220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c224:	2b00      	cmp	r3, #0
 800c226:	d101      	bne.n	800c22c <xQueueReceive+0x40>
 800c228:	2301      	movs	r3, #1
 800c22a:	e000      	b.n	800c22e <xQueueReceive+0x42>
 800c22c:	2300      	movs	r3, #0
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d109      	bne.n	800c246 <xQueueReceive+0x5a>
 800c232:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c236:	f383 8811 	msr	BASEPRI, r3
 800c23a:	f3bf 8f6f 	isb	sy
 800c23e:	f3bf 8f4f 	dsb	sy
 800c242:	61fb      	str	r3, [r7, #28]
 800c244:	e7fe      	b.n	800c244 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c246:	f001 f9cb 	bl	800d5e0 <xTaskGetSchedulerState>
 800c24a:	4603      	mov	r3, r0
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d102      	bne.n	800c256 <xQueueReceive+0x6a>
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	2b00      	cmp	r3, #0
 800c254:	d101      	bne.n	800c25a <xQueueReceive+0x6e>
 800c256:	2301      	movs	r3, #1
 800c258:	e000      	b.n	800c25c <xQueueReceive+0x70>
 800c25a:	2300      	movs	r3, #0
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d109      	bne.n	800c274 <xQueueReceive+0x88>
 800c260:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c264:	f383 8811 	msr	BASEPRI, r3
 800c268:	f3bf 8f6f 	isb	sy
 800c26c:	f3bf 8f4f 	dsb	sy
 800c270:	61bb      	str	r3, [r7, #24]
 800c272:	e7fe      	b.n	800c272 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c274:	f7ff fb02 	bl	800b87c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c27a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c27c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c27e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c280:	2b00      	cmp	r3, #0
 800c282:	d01f      	beq.n	800c2c4 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c284:	68b9      	ldr	r1, [r7, #8]
 800c286:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c288:	f000 faef 	bl	800c86a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c28c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c28e:	1e5a      	subs	r2, r3, #1
 800c290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c292:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c296:	691b      	ldr	r3, [r3, #16]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d00f      	beq.n	800c2bc <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c29c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c29e:	3310      	adds	r3, #16
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	f000 ffe7 	bl	800d274 <xTaskRemoveFromEventList>
 800c2a6:	4603      	mov	r3, r0
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d007      	beq.n	800c2bc <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c2ac:	4b3c      	ldr	r3, [pc, #240]	; (800c3a0 <xQueueReceive+0x1b4>)
 800c2ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c2b2:	601a      	str	r2, [r3, #0]
 800c2b4:	f3bf 8f4f 	dsb	sy
 800c2b8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c2bc:	f7ff fb0c 	bl	800b8d8 <vPortExitCritical>
				return pdPASS;
 800c2c0:	2301      	movs	r3, #1
 800c2c2:	e069      	b.n	800c398 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d103      	bne.n	800c2d2 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c2ca:	f7ff fb05 	bl	800b8d8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	e062      	b.n	800c398 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c2d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d106      	bne.n	800c2e6 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c2d8:	f107 0310 	add.w	r3, r7, #16
 800c2dc:	4618      	mov	r0, r3
 800c2de:	f001 f82b 	bl	800d338 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c2e2:	2301      	movs	r3, #1
 800c2e4:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c2e6:	f7ff faf7 	bl	800b8d8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c2ea:	f000 fdb1 	bl	800ce50 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c2ee:	f7ff fac5 	bl	800b87c <vPortEnterCritical>
 800c2f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c2f8:	b25b      	sxtb	r3, r3
 800c2fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2fe:	d103      	bne.n	800c308 <xQueueReceive+0x11c>
 800c300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c302:	2200      	movs	r2, #0
 800c304:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c30a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c30e:	b25b      	sxtb	r3, r3
 800c310:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c314:	d103      	bne.n	800c31e <xQueueReceive+0x132>
 800c316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c318:	2200      	movs	r2, #0
 800c31a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c31e:	f7ff fadb 	bl	800b8d8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c322:	1d3a      	adds	r2, r7, #4
 800c324:	f107 0310 	add.w	r3, r7, #16
 800c328:	4611      	mov	r1, r2
 800c32a:	4618      	mov	r0, r3
 800c32c:	f001 f81a 	bl	800d364 <xTaskCheckForTimeOut>
 800c330:	4603      	mov	r3, r0
 800c332:	2b00      	cmp	r3, #0
 800c334:	d123      	bne.n	800c37e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c336:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c338:	f000 fb0f 	bl	800c95a <prvIsQueueEmpty>
 800c33c:	4603      	mov	r3, r0
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d017      	beq.n	800c372 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c344:	3324      	adds	r3, #36	; 0x24
 800c346:	687a      	ldr	r2, [r7, #4]
 800c348:	4611      	mov	r1, r2
 800c34a:	4618      	mov	r0, r3
 800c34c:	f000 ff6e 	bl	800d22c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c350:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c352:	f000 fab0 	bl	800c8b6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c356:	f000 fd89 	bl	800ce6c <xTaskResumeAll>
 800c35a:	4603      	mov	r3, r0
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d189      	bne.n	800c274 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800c360:	4b0f      	ldr	r3, [pc, #60]	; (800c3a0 <xQueueReceive+0x1b4>)
 800c362:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c366:	601a      	str	r2, [r3, #0]
 800c368:	f3bf 8f4f 	dsb	sy
 800c36c:	f3bf 8f6f 	isb	sy
 800c370:	e780      	b.n	800c274 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c372:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c374:	f000 fa9f 	bl	800c8b6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c378:	f000 fd78 	bl	800ce6c <xTaskResumeAll>
 800c37c:	e77a      	b.n	800c274 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c37e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c380:	f000 fa99 	bl	800c8b6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c384:	f000 fd72 	bl	800ce6c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c388:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c38a:	f000 fae6 	bl	800c95a <prvIsQueueEmpty>
 800c38e:	4603      	mov	r3, r0
 800c390:	2b00      	cmp	r3, #0
 800c392:	f43f af6f 	beq.w	800c274 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c396:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c398:	4618      	mov	r0, r3
 800c39a:	3730      	adds	r7, #48	; 0x30
 800c39c:	46bd      	mov	sp, r7
 800c39e:	bd80      	pop	{r7, pc}
 800c3a0:	e000ed04 	.word	0xe000ed04

0800c3a4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c3a4:	b580      	push	{r7, lr}
 800c3a6:	b08e      	sub	sp, #56	; 0x38
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	6078      	str	r0, [r7, #4]
 800c3ac:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c3b6:	2300      	movs	r3, #0
 800c3b8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c3ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d109      	bne.n	800c3d4 <xQueueSemaphoreTake+0x30>
 800c3c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3c4:	f383 8811 	msr	BASEPRI, r3
 800c3c8:	f3bf 8f6f 	isb	sy
 800c3cc:	f3bf 8f4f 	dsb	sy
 800c3d0:	623b      	str	r3, [r7, #32]
 800c3d2:	e7fe      	b.n	800c3d2 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c3d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d009      	beq.n	800c3f0 <xQueueSemaphoreTake+0x4c>
 800c3dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3e0:	f383 8811 	msr	BASEPRI, r3
 800c3e4:	f3bf 8f6f 	isb	sy
 800c3e8:	f3bf 8f4f 	dsb	sy
 800c3ec:	61fb      	str	r3, [r7, #28]
 800c3ee:	e7fe      	b.n	800c3ee <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c3f0:	f001 f8f6 	bl	800d5e0 <xTaskGetSchedulerState>
 800c3f4:	4603      	mov	r3, r0
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d102      	bne.n	800c400 <xQueueSemaphoreTake+0x5c>
 800c3fa:	683b      	ldr	r3, [r7, #0]
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d101      	bne.n	800c404 <xQueueSemaphoreTake+0x60>
 800c400:	2301      	movs	r3, #1
 800c402:	e000      	b.n	800c406 <xQueueSemaphoreTake+0x62>
 800c404:	2300      	movs	r3, #0
 800c406:	2b00      	cmp	r3, #0
 800c408:	d109      	bne.n	800c41e <xQueueSemaphoreTake+0x7a>
 800c40a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c40e:	f383 8811 	msr	BASEPRI, r3
 800c412:	f3bf 8f6f 	isb	sy
 800c416:	f3bf 8f4f 	dsb	sy
 800c41a:	61bb      	str	r3, [r7, #24]
 800c41c:	e7fe      	b.n	800c41c <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c41e:	f7ff fa2d 	bl	800b87c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c426:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d024      	beq.n	800c478 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c42e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c430:	1e5a      	subs	r2, r3, #1
 800c432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c434:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d104      	bne.n	800c448 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c43e:	f001 fa89 	bl	800d954 <pvTaskIncrementMutexHeldCount>
 800c442:	4602      	mov	r2, r0
 800c444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c446:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c44a:	691b      	ldr	r3, [r3, #16]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d00f      	beq.n	800c470 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c452:	3310      	adds	r3, #16
 800c454:	4618      	mov	r0, r3
 800c456:	f000 ff0d 	bl	800d274 <xTaskRemoveFromEventList>
 800c45a:	4603      	mov	r3, r0
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d007      	beq.n	800c470 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c460:	4b53      	ldr	r3, [pc, #332]	; (800c5b0 <xQueueSemaphoreTake+0x20c>)
 800c462:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c466:	601a      	str	r2, [r3, #0]
 800c468:	f3bf 8f4f 	dsb	sy
 800c46c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c470:	f7ff fa32 	bl	800b8d8 <vPortExitCritical>
				return pdPASS;
 800c474:	2301      	movs	r3, #1
 800c476:	e096      	b.n	800c5a6 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c478:	683b      	ldr	r3, [r7, #0]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d110      	bne.n	800c4a0 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c47e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c480:	2b00      	cmp	r3, #0
 800c482:	d009      	beq.n	800c498 <xQueueSemaphoreTake+0xf4>
 800c484:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c488:	f383 8811 	msr	BASEPRI, r3
 800c48c:	f3bf 8f6f 	isb	sy
 800c490:	f3bf 8f4f 	dsb	sy
 800c494:	617b      	str	r3, [r7, #20]
 800c496:	e7fe      	b.n	800c496 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c498:	f7ff fa1e 	bl	800b8d8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c49c:	2300      	movs	r3, #0
 800c49e:	e082      	b.n	800c5a6 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c4a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d106      	bne.n	800c4b4 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c4a6:	f107 030c 	add.w	r3, r7, #12
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	f000 ff44 	bl	800d338 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c4b0:	2301      	movs	r3, #1
 800c4b2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c4b4:	f7ff fa10 	bl	800b8d8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c4b8:	f000 fcca 	bl	800ce50 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c4bc:	f7ff f9de 	bl	800b87c <vPortEnterCritical>
 800c4c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c4c6:	b25b      	sxtb	r3, r3
 800c4c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4cc:	d103      	bne.n	800c4d6 <xQueueSemaphoreTake+0x132>
 800c4ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4d0:	2200      	movs	r2, #0
 800c4d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c4d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c4dc:	b25b      	sxtb	r3, r3
 800c4de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4e2:	d103      	bne.n	800c4ec <xQueueSemaphoreTake+0x148>
 800c4e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4e6:	2200      	movs	r2, #0
 800c4e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c4ec:	f7ff f9f4 	bl	800b8d8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c4f0:	463a      	mov	r2, r7
 800c4f2:	f107 030c 	add.w	r3, r7, #12
 800c4f6:	4611      	mov	r1, r2
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	f000 ff33 	bl	800d364 <xTaskCheckForTimeOut>
 800c4fe:	4603      	mov	r3, r0
 800c500:	2b00      	cmp	r3, #0
 800c502:	d132      	bne.n	800c56a <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c504:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c506:	f000 fa28 	bl	800c95a <prvIsQueueEmpty>
 800c50a:	4603      	mov	r3, r0
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d026      	beq.n	800c55e <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	2b00      	cmp	r3, #0
 800c516:	d109      	bne.n	800c52c <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 800c518:	f7ff f9b0 	bl	800b87c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c51c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c51e:	689b      	ldr	r3, [r3, #8]
 800c520:	4618      	mov	r0, r3
 800c522:	f001 f87b 	bl	800d61c <xTaskPriorityInherit>
 800c526:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800c528:	f7ff f9d6 	bl	800b8d8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c52c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c52e:	3324      	adds	r3, #36	; 0x24
 800c530:	683a      	ldr	r2, [r7, #0]
 800c532:	4611      	mov	r1, r2
 800c534:	4618      	mov	r0, r3
 800c536:	f000 fe79 	bl	800d22c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c53a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c53c:	f000 f9bb 	bl	800c8b6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c540:	f000 fc94 	bl	800ce6c <xTaskResumeAll>
 800c544:	4603      	mov	r3, r0
 800c546:	2b00      	cmp	r3, #0
 800c548:	f47f af69 	bne.w	800c41e <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 800c54c:	4b18      	ldr	r3, [pc, #96]	; (800c5b0 <xQueueSemaphoreTake+0x20c>)
 800c54e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c552:	601a      	str	r2, [r3, #0]
 800c554:	f3bf 8f4f 	dsb	sy
 800c558:	f3bf 8f6f 	isb	sy
 800c55c:	e75f      	b.n	800c41e <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c55e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c560:	f000 f9a9 	bl	800c8b6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c564:	f000 fc82 	bl	800ce6c <xTaskResumeAll>
 800c568:	e759      	b.n	800c41e <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c56a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c56c:	f000 f9a3 	bl	800c8b6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c570:	f000 fc7c 	bl	800ce6c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c574:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c576:	f000 f9f0 	bl	800c95a <prvIsQueueEmpty>
 800c57a:	4603      	mov	r3, r0
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	f43f af4e 	beq.w	800c41e <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c584:	2b00      	cmp	r3, #0
 800c586:	d00d      	beq.n	800c5a4 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 800c588:	f7ff f978 	bl	800b87c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c58c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c58e:	f000 f8ea 	bl	800c766 <prvGetDisinheritPriorityAfterTimeout>
 800c592:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c596:	689b      	ldr	r3, [r3, #8]
 800c598:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c59a:	4618      	mov	r0, r3
 800c59c:	f001 f942 	bl	800d824 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c5a0:	f7ff f99a 	bl	800b8d8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c5a4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	3738      	adds	r7, #56	; 0x38
 800c5aa:	46bd      	mov	sp, r7
 800c5ac:	bd80      	pop	{r7, pc}
 800c5ae:	bf00      	nop
 800c5b0:	e000ed04 	.word	0xe000ed04

0800c5b4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c5b4:	b580      	push	{r7, lr}
 800c5b6:	b08e      	sub	sp, #56	; 0x38
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	60f8      	str	r0, [r7, #12]
 800c5bc:	60b9      	str	r1, [r7, #8]
 800c5be:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c5c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d109      	bne.n	800c5de <xQueueReceiveFromISR+0x2a>
 800c5ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5ce:	f383 8811 	msr	BASEPRI, r3
 800c5d2:	f3bf 8f6f 	isb	sy
 800c5d6:	f3bf 8f4f 	dsb	sy
 800c5da:	623b      	str	r3, [r7, #32]
 800c5dc:	e7fe      	b.n	800c5dc <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c5de:	68bb      	ldr	r3, [r7, #8]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d103      	bne.n	800c5ec <xQueueReceiveFromISR+0x38>
 800c5e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d101      	bne.n	800c5f0 <xQueueReceiveFromISR+0x3c>
 800c5ec:	2301      	movs	r3, #1
 800c5ee:	e000      	b.n	800c5f2 <xQueueReceiveFromISR+0x3e>
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d109      	bne.n	800c60a <xQueueReceiveFromISR+0x56>
 800c5f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5fa:	f383 8811 	msr	BASEPRI, r3
 800c5fe:	f3bf 8f6f 	isb	sy
 800c602:	f3bf 8f4f 	dsb	sy
 800c606:	61fb      	str	r3, [r7, #28]
 800c608:	e7fe      	b.n	800c608 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c60a:	f7ff fa13 	bl	800ba34 <vPortValidateInterruptPriority>
	__asm volatile
 800c60e:	f3ef 8211 	mrs	r2, BASEPRI
 800c612:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c616:	f383 8811 	msr	BASEPRI, r3
 800c61a:	f3bf 8f6f 	isb	sy
 800c61e:	f3bf 8f4f 	dsb	sy
 800c622:	61ba      	str	r2, [r7, #24]
 800c624:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c626:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c628:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c62a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c62c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c62e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c632:	2b00      	cmp	r3, #0
 800c634:	d02f      	beq.n	800c696 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c638:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c63c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c640:	68b9      	ldr	r1, [r7, #8]
 800c642:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c644:	f000 f911 	bl	800c86a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c64a:	1e5a      	subs	r2, r3, #1
 800c64c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c64e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c650:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c654:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c658:	d112      	bne.n	800c680 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c65a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c65c:	691b      	ldr	r3, [r3, #16]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d016      	beq.n	800c690 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c664:	3310      	adds	r3, #16
 800c666:	4618      	mov	r0, r3
 800c668:	f000 fe04 	bl	800d274 <xTaskRemoveFromEventList>
 800c66c:	4603      	mov	r3, r0
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d00e      	beq.n	800c690 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	2b00      	cmp	r3, #0
 800c676:	d00b      	beq.n	800c690 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	2201      	movs	r2, #1
 800c67c:	601a      	str	r2, [r3, #0]
 800c67e:	e007      	b.n	800c690 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c680:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c684:	3301      	adds	r3, #1
 800c686:	b2db      	uxtb	r3, r3
 800c688:	b25a      	sxtb	r2, r3
 800c68a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c68c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800c690:	2301      	movs	r3, #1
 800c692:	637b      	str	r3, [r7, #52]	; 0x34
 800c694:	e001      	b.n	800c69a <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800c696:	2300      	movs	r3, #0
 800c698:	637b      	str	r3, [r7, #52]	; 0x34
 800c69a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c69c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c69e:	693b      	ldr	r3, [r7, #16]
 800c6a0:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c6a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	3738      	adds	r7, #56	; 0x38
 800c6aa:	46bd      	mov	sp, r7
 800c6ac:	bd80      	pop	{r7, pc}

0800c6ae <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800c6ae:	b580      	push	{r7, lr}
 800c6b0:	b084      	sub	sp, #16
 800c6b2:	af00      	add	r7, sp, #0
 800c6b4:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d109      	bne.n	800c6d0 <uxQueueMessagesWaiting+0x22>
	__asm volatile
 800c6bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6c0:	f383 8811 	msr	BASEPRI, r3
 800c6c4:	f3bf 8f6f 	isb	sy
 800c6c8:	f3bf 8f4f 	dsb	sy
 800c6cc:	60bb      	str	r3, [r7, #8]
 800c6ce:	e7fe      	b.n	800c6ce <uxQueueMessagesWaiting+0x20>

	taskENTER_CRITICAL();
 800c6d0:	f7ff f8d4 	bl	800b87c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6d8:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800c6da:	f7ff f8fd 	bl	800b8d8 <vPortExitCritical>

	return uxReturn;
 800c6de:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800c6e0:	4618      	mov	r0, r3
 800c6e2:	3710      	adds	r7, #16
 800c6e4:	46bd      	mov	sp, r7
 800c6e6:	bd80      	pop	{r7, pc}

0800c6e8 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800c6e8:	b480      	push	{r7}
 800c6ea:	b087      	sub	sp, #28
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800c6f4:	697b      	ldr	r3, [r7, #20]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d109      	bne.n	800c70e <uxQueueMessagesWaitingFromISR+0x26>
 800c6fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6fe:	f383 8811 	msr	BASEPRI, r3
 800c702:	f3bf 8f6f 	isb	sy
 800c706:	f3bf 8f4f 	dsb	sy
 800c70a:	60fb      	str	r3, [r7, #12]
 800c70c:	e7fe      	b.n	800c70c <uxQueueMessagesWaitingFromISR+0x24>
	uxReturn = pxQueue->uxMessagesWaiting;
 800c70e:	697b      	ldr	r3, [r7, #20]
 800c710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c712:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800c714:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800c716:	4618      	mov	r0, r3
 800c718:	371c      	adds	r7, #28
 800c71a:	46bd      	mov	sp, r7
 800c71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c720:	4770      	bx	lr

0800c722 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800c722:	b580      	push	{r7, lr}
 800c724:	b084      	sub	sp, #16
 800c726:	af00      	add	r7, sp, #0
 800c728:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	2b00      	cmp	r3, #0
 800c732:	d109      	bne.n	800c748 <vQueueDelete+0x26>
 800c734:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c738:	f383 8811 	msr	BASEPRI, r3
 800c73c:	f3bf 8f6f 	isb	sy
 800c740:	f3bf 8f4f 	dsb	sy
 800c744:	60bb      	str	r3, [r7, #8]
 800c746:	e7fe      	b.n	800c746 <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800c748:	68f8      	ldr	r0, [r7, #12]
 800c74a:	f000 f935 	bl	800c9b8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c754:	2b00      	cmp	r3, #0
 800c756:	d102      	bne.n	800c75e <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 800c758:	68f8      	ldr	r0, [r7, #12]
 800c75a:	f7fe fd9d 	bl	800b298 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800c75e:	bf00      	nop
 800c760:	3710      	adds	r7, #16
 800c762:	46bd      	mov	sp, r7
 800c764:	bd80      	pop	{r7, pc}

0800c766 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c766:	b480      	push	{r7}
 800c768:	b085      	sub	sp, #20
 800c76a:	af00      	add	r7, sp, #0
 800c76c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c772:	2b00      	cmp	r3, #0
 800c774:	d006      	beq.n	800c784 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	f1c3 0307 	rsb	r3, r3, #7
 800c780:	60fb      	str	r3, [r7, #12]
 800c782:	e001      	b.n	800c788 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c784:	2300      	movs	r3, #0
 800c786:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c788:	68fb      	ldr	r3, [r7, #12]
	}
 800c78a:	4618      	mov	r0, r3
 800c78c:	3714      	adds	r7, #20
 800c78e:	46bd      	mov	sp, r7
 800c790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c794:	4770      	bx	lr

0800c796 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c796:	b580      	push	{r7, lr}
 800c798:	b086      	sub	sp, #24
 800c79a:	af00      	add	r7, sp, #0
 800c79c:	60f8      	str	r0, [r7, #12]
 800c79e:	60b9      	str	r1, [r7, #8]
 800c7a0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c7a2:	2300      	movs	r3, #0
 800c7a4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7aa:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d10d      	bne.n	800c7d0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d14d      	bne.n	800c858 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	689b      	ldr	r3, [r3, #8]
 800c7c0:	4618      	mov	r0, r3
 800c7c2:	f000 ffab 	bl	800d71c <xTaskPriorityDisinherit>
 800c7c6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	2200      	movs	r2, #0
 800c7cc:	609a      	str	r2, [r3, #8]
 800c7ce:	e043      	b.n	800c858 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d119      	bne.n	800c80a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	6858      	ldr	r0, [r3, #4]
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7de:	461a      	mov	r2, r3
 800c7e0:	68b9      	ldr	r1, [r7, #8]
 800c7e2:	f013 ff50 	bl	8020686 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	685a      	ldr	r2, [r3, #4]
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7ee:	441a      	add	r2, r3
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	685a      	ldr	r2, [r3, #4]
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	689b      	ldr	r3, [r3, #8]
 800c7fc:	429a      	cmp	r2, r3
 800c7fe:	d32b      	bcc.n	800c858 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	681a      	ldr	r2, [r3, #0]
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	605a      	str	r2, [r3, #4]
 800c808:	e026      	b.n	800c858 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	68d8      	ldr	r0, [r3, #12]
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c812:	461a      	mov	r2, r3
 800c814:	68b9      	ldr	r1, [r7, #8]
 800c816:	f013 ff36 	bl	8020686 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	68da      	ldr	r2, [r3, #12]
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c822:	425b      	negs	r3, r3
 800c824:	441a      	add	r2, r3
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	68da      	ldr	r2, [r3, #12]
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	429a      	cmp	r2, r3
 800c834:	d207      	bcs.n	800c846 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	689a      	ldr	r2, [r3, #8]
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c83e:	425b      	negs	r3, r3
 800c840:	441a      	add	r2, r3
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	2b02      	cmp	r3, #2
 800c84a:	d105      	bne.n	800c858 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c84c:	693b      	ldr	r3, [r7, #16]
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d002      	beq.n	800c858 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c852:	693b      	ldr	r3, [r7, #16]
 800c854:	3b01      	subs	r3, #1
 800c856:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c858:	693b      	ldr	r3, [r7, #16]
 800c85a:	1c5a      	adds	r2, r3, #1
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c860:	697b      	ldr	r3, [r7, #20]
}
 800c862:	4618      	mov	r0, r3
 800c864:	3718      	adds	r7, #24
 800c866:	46bd      	mov	sp, r7
 800c868:	bd80      	pop	{r7, pc}

0800c86a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c86a:	b580      	push	{r7, lr}
 800c86c:	b082      	sub	sp, #8
 800c86e:	af00      	add	r7, sp, #0
 800c870:	6078      	str	r0, [r7, #4]
 800c872:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d018      	beq.n	800c8ae <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	68da      	ldr	r2, [r3, #12]
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c884:	441a      	add	r2, r3
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	68da      	ldr	r2, [r3, #12]
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	689b      	ldr	r3, [r3, #8]
 800c892:	429a      	cmp	r2, r3
 800c894:	d303      	bcc.n	800c89e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	681a      	ldr	r2, [r3, #0]
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	68d9      	ldr	r1, [r3, #12]
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8a6:	461a      	mov	r2, r3
 800c8a8:	6838      	ldr	r0, [r7, #0]
 800c8aa:	f013 feec 	bl	8020686 <memcpy>
	}
}
 800c8ae:	bf00      	nop
 800c8b0:	3708      	adds	r7, #8
 800c8b2:	46bd      	mov	sp, r7
 800c8b4:	bd80      	pop	{r7, pc}

0800c8b6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c8b6:	b580      	push	{r7, lr}
 800c8b8:	b084      	sub	sp, #16
 800c8ba:	af00      	add	r7, sp, #0
 800c8bc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c8be:	f7fe ffdd 	bl	800b87c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c8c8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c8ca:	e011      	b.n	800c8f0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d012      	beq.n	800c8fa <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	3324      	adds	r3, #36	; 0x24
 800c8d8:	4618      	mov	r0, r3
 800c8da:	f000 fccb 	bl	800d274 <xTaskRemoveFromEventList>
 800c8de:	4603      	mov	r3, r0
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d001      	beq.n	800c8e8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c8e4:	f000 fd9e 	bl	800d424 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c8e8:	7bfb      	ldrb	r3, [r7, #15]
 800c8ea:	3b01      	subs	r3, #1
 800c8ec:	b2db      	uxtb	r3, r3
 800c8ee:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c8f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	dce9      	bgt.n	800c8cc <prvUnlockQueue+0x16>
 800c8f8:	e000      	b.n	800c8fc <prvUnlockQueue+0x46>
					break;
 800c8fa:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	22ff      	movs	r2, #255	; 0xff
 800c900:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c904:	f7fe ffe8 	bl	800b8d8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c908:	f7fe ffb8 	bl	800b87c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c912:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c914:	e011      	b.n	800c93a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	691b      	ldr	r3, [r3, #16]
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d012      	beq.n	800c944 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	3310      	adds	r3, #16
 800c922:	4618      	mov	r0, r3
 800c924:	f000 fca6 	bl	800d274 <xTaskRemoveFromEventList>
 800c928:	4603      	mov	r3, r0
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d001      	beq.n	800c932 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c92e:	f000 fd79 	bl	800d424 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c932:	7bbb      	ldrb	r3, [r7, #14]
 800c934:	3b01      	subs	r3, #1
 800c936:	b2db      	uxtb	r3, r3
 800c938:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c93a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	dce9      	bgt.n	800c916 <prvUnlockQueue+0x60>
 800c942:	e000      	b.n	800c946 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c944:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	22ff      	movs	r2, #255	; 0xff
 800c94a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c94e:	f7fe ffc3 	bl	800b8d8 <vPortExitCritical>
}
 800c952:	bf00      	nop
 800c954:	3710      	adds	r7, #16
 800c956:	46bd      	mov	sp, r7
 800c958:	bd80      	pop	{r7, pc}

0800c95a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c95a:	b580      	push	{r7, lr}
 800c95c:	b084      	sub	sp, #16
 800c95e:	af00      	add	r7, sp, #0
 800c960:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c962:	f7fe ff8b 	bl	800b87c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d102      	bne.n	800c974 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c96e:	2301      	movs	r3, #1
 800c970:	60fb      	str	r3, [r7, #12]
 800c972:	e001      	b.n	800c978 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c974:	2300      	movs	r3, #0
 800c976:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c978:	f7fe ffae 	bl	800b8d8 <vPortExitCritical>

	return xReturn;
 800c97c:	68fb      	ldr	r3, [r7, #12]
}
 800c97e:	4618      	mov	r0, r3
 800c980:	3710      	adds	r7, #16
 800c982:	46bd      	mov	sp, r7
 800c984:	bd80      	pop	{r7, pc}

0800c986 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c986:	b580      	push	{r7, lr}
 800c988:	b084      	sub	sp, #16
 800c98a:	af00      	add	r7, sp, #0
 800c98c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c98e:	f7fe ff75 	bl	800b87c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c99a:	429a      	cmp	r2, r3
 800c99c:	d102      	bne.n	800c9a4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c99e:	2301      	movs	r3, #1
 800c9a0:	60fb      	str	r3, [r7, #12]
 800c9a2:	e001      	b.n	800c9a8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c9a4:	2300      	movs	r3, #0
 800c9a6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c9a8:	f7fe ff96 	bl	800b8d8 <vPortExitCritical>

	return xReturn;
 800c9ac:	68fb      	ldr	r3, [r7, #12]
}
 800c9ae:	4618      	mov	r0, r3
 800c9b0:	3710      	adds	r7, #16
 800c9b2:	46bd      	mov	sp, r7
 800c9b4:	bd80      	pop	{r7, pc}
	...

0800c9b8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800c9b8:	b480      	push	{r7}
 800c9ba:	b085      	sub	sp, #20
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c9c0:	2300      	movs	r3, #0
 800c9c2:	60fb      	str	r3, [r7, #12]
 800c9c4:	e016      	b.n	800c9f4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800c9c6:	4a10      	ldr	r2, [pc, #64]	; (800ca08 <vQueueUnregisterQueue+0x50>)
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	00db      	lsls	r3, r3, #3
 800c9cc:	4413      	add	r3, r2
 800c9ce:	685b      	ldr	r3, [r3, #4]
 800c9d0:	687a      	ldr	r2, [r7, #4]
 800c9d2:	429a      	cmp	r2, r3
 800c9d4:	d10b      	bne.n	800c9ee <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800c9d6:	4a0c      	ldr	r2, [pc, #48]	; (800ca08 <vQueueUnregisterQueue+0x50>)
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	2100      	movs	r1, #0
 800c9dc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800c9e0:	4a09      	ldr	r2, [pc, #36]	; (800ca08 <vQueueUnregisterQueue+0x50>)
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	00db      	lsls	r3, r3, #3
 800c9e6:	4413      	add	r3, r2
 800c9e8:	2200      	movs	r2, #0
 800c9ea:	605a      	str	r2, [r3, #4]
				break;
 800c9ec:	e005      	b.n	800c9fa <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	3301      	adds	r3, #1
 800c9f2:	60fb      	str	r3, [r7, #12]
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	2b07      	cmp	r3, #7
 800c9f8:	d9e5      	bls.n	800c9c6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800c9fa:	bf00      	nop
 800c9fc:	3714      	adds	r7, #20
 800c9fe:	46bd      	mov	sp, r7
 800ca00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca04:	4770      	bx	lr
 800ca06:	bf00      	nop
 800ca08:	24045d78 	.word	0x24045d78

0800ca0c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ca0c:	b580      	push	{r7, lr}
 800ca0e:	b08e      	sub	sp, #56	; 0x38
 800ca10:	af04      	add	r7, sp, #16
 800ca12:	60f8      	str	r0, [r7, #12]
 800ca14:	60b9      	str	r1, [r7, #8]
 800ca16:	607a      	str	r2, [r7, #4]
 800ca18:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ca1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d109      	bne.n	800ca34 <xTaskCreateStatic+0x28>
 800ca20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca24:	f383 8811 	msr	BASEPRI, r3
 800ca28:	f3bf 8f6f 	isb	sy
 800ca2c:	f3bf 8f4f 	dsb	sy
 800ca30:	623b      	str	r3, [r7, #32]
 800ca32:	e7fe      	b.n	800ca32 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800ca34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d109      	bne.n	800ca4e <xTaskCreateStatic+0x42>
 800ca3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca3e:	f383 8811 	msr	BASEPRI, r3
 800ca42:	f3bf 8f6f 	isb	sy
 800ca46:	f3bf 8f4f 	dsb	sy
 800ca4a:	61fb      	str	r3, [r7, #28]
 800ca4c:	e7fe      	b.n	800ca4c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ca4e:	2354      	movs	r3, #84	; 0x54
 800ca50:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ca52:	693b      	ldr	r3, [r7, #16]
 800ca54:	2b54      	cmp	r3, #84	; 0x54
 800ca56:	d009      	beq.n	800ca6c <xTaskCreateStatic+0x60>
 800ca58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca5c:	f383 8811 	msr	BASEPRI, r3
 800ca60:	f3bf 8f6f 	isb	sy
 800ca64:	f3bf 8f4f 	dsb	sy
 800ca68:	61bb      	str	r3, [r7, #24]
 800ca6a:	e7fe      	b.n	800ca6a <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ca6c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ca6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d01e      	beq.n	800cab2 <xTaskCreateStatic+0xa6>
 800ca74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d01b      	beq.n	800cab2 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ca7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca7c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ca7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ca82:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ca84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca86:	2202      	movs	r2, #2
 800ca88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ca8c:	2300      	movs	r3, #0
 800ca8e:	9303      	str	r3, [sp, #12]
 800ca90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca92:	9302      	str	r3, [sp, #8]
 800ca94:	f107 0314 	add.w	r3, r7, #20
 800ca98:	9301      	str	r3, [sp, #4]
 800ca9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca9c:	9300      	str	r3, [sp, #0]
 800ca9e:	683b      	ldr	r3, [r7, #0]
 800caa0:	687a      	ldr	r2, [r7, #4]
 800caa2:	68b9      	ldr	r1, [r7, #8]
 800caa4:	68f8      	ldr	r0, [r7, #12]
 800caa6:	f000 f850 	bl	800cb4a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800caaa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800caac:	f000 f8d4 	bl	800cc58 <prvAddNewTaskToReadyList>
 800cab0:	e001      	b.n	800cab6 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800cab2:	2300      	movs	r3, #0
 800cab4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800cab6:	697b      	ldr	r3, [r7, #20]
	}
 800cab8:	4618      	mov	r0, r3
 800caba:	3728      	adds	r7, #40	; 0x28
 800cabc:	46bd      	mov	sp, r7
 800cabe:	bd80      	pop	{r7, pc}

0800cac0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800cac0:	b580      	push	{r7, lr}
 800cac2:	b08c      	sub	sp, #48	; 0x30
 800cac4:	af04      	add	r7, sp, #16
 800cac6:	60f8      	str	r0, [r7, #12]
 800cac8:	60b9      	str	r1, [r7, #8]
 800caca:	603b      	str	r3, [r7, #0]
 800cacc:	4613      	mov	r3, r2
 800cace:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800cad0:	88fb      	ldrh	r3, [r7, #6]
 800cad2:	009b      	lsls	r3, r3, #2
 800cad4:	4618      	mov	r0, r3
 800cad6:	f7fe fb1d 	bl	800b114 <pvPortMalloc>
 800cada:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800cadc:	697b      	ldr	r3, [r7, #20]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d00e      	beq.n	800cb00 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800cae2:	2054      	movs	r0, #84	; 0x54
 800cae4:	f7fe fb16 	bl	800b114 <pvPortMalloc>
 800cae8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800caea:	69fb      	ldr	r3, [r7, #28]
 800caec:	2b00      	cmp	r3, #0
 800caee:	d003      	beq.n	800caf8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800caf0:	69fb      	ldr	r3, [r7, #28]
 800caf2:	697a      	ldr	r2, [r7, #20]
 800caf4:	631a      	str	r2, [r3, #48]	; 0x30
 800caf6:	e005      	b.n	800cb04 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800caf8:	6978      	ldr	r0, [r7, #20]
 800cafa:	f7fe fbcd 	bl	800b298 <vPortFree>
 800cafe:	e001      	b.n	800cb04 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800cb00:	2300      	movs	r3, #0
 800cb02:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800cb04:	69fb      	ldr	r3, [r7, #28]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d017      	beq.n	800cb3a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800cb0a:	69fb      	ldr	r3, [r7, #28]
 800cb0c:	2200      	movs	r2, #0
 800cb0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800cb12:	88fa      	ldrh	r2, [r7, #6]
 800cb14:	2300      	movs	r3, #0
 800cb16:	9303      	str	r3, [sp, #12]
 800cb18:	69fb      	ldr	r3, [r7, #28]
 800cb1a:	9302      	str	r3, [sp, #8]
 800cb1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb1e:	9301      	str	r3, [sp, #4]
 800cb20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb22:	9300      	str	r3, [sp, #0]
 800cb24:	683b      	ldr	r3, [r7, #0]
 800cb26:	68b9      	ldr	r1, [r7, #8]
 800cb28:	68f8      	ldr	r0, [r7, #12]
 800cb2a:	f000 f80e 	bl	800cb4a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cb2e:	69f8      	ldr	r0, [r7, #28]
 800cb30:	f000 f892 	bl	800cc58 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800cb34:	2301      	movs	r3, #1
 800cb36:	61bb      	str	r3, [r7, #24]
 800cb38:	e002      	b.n	800cb40 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800cb3a:	f04f 33ff 	mov.w	r3, #4294967295
 800cb3e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800cb40:	69bb      	ldr	r3, [r7, #24]
	}
 800cb42:	4618      	mov	r0, r3
 800cb44:	3720      	adds	r7, #32
 800cb46:	46bd      	mov	sp, r7
 800cb48:	bd80      	pop	{r7, pc}

0800cb4a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800cb4a:	b580      	push	{r7, lr}
 800cb4c:	b088      	sub	sp, #32
 800cb4e:	af00      	add	r7, sp, #0
 800cb50:	60f8      	str	r0, [r7, #12]
 800cb52:	60b9      	str	r1, [r7, #8]
 800cb54:	607a      	str	r2, [r7, #4]
 800cb56:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800cb58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cb5c:	6879      	ldr	r1, [r7, #4]
 800cb5e:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800cb62:	440b      	add	r3, r1
 800cb64:	009b      	lsls	r3, r3, #2
 800cb66:	4413      	add	r3, r2
 800cb68:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800cb6a:	69bb      	ldr	r3, [r7, #24]
 800cb6c:	f023 0307 	bic.w	r3, r3, #7
 800cb70:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800cb72:	69bb      	ldr	r3, [r7, #24]
 800cb74:	f003 0307 	and.w	r3, r3, #7
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d009      	beq.n	800cb90 <prvInitialiseNewTask+0x46>
 800cb7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb80:	f383 8811 	msr	BASEPRI, r3
 800cb84:	f3bf 8f6f 	isb	sy
 800cb88:	f3bf 8f4f 	dsb	sy
 800cb8c:	617b      	str	r3, [r7, #20]
 800cb8e:	e7fe      	b.n	800cb8e <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800cb90:	68bb      	ldr	r3, [r7, #8]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d01f      	beq.n	800cbd6 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cb96:	2300      	movs	r3, #0
 800cb98:	61fb      	str	r3, [r7, #28]
 800cb9a:	e012      	b.n	800cbc2 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cb9c:	68ba      	ldr	r2, [r7, #8]
 800cb9e:	69fb      	ldr	r3, [r7, #28]
 800cba0:	4413      	add	r3, r2
 800cba2:	7819      	ldrb	r1, [r3, #0]
 800cba4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cba6:	69fb      	ldr	r3, [r7, #28]
 800cba8:	4413      	add	r3, r2
 800cbaa:	3334      	adds	r3, #52	; 0x34
 800cbac:	460a      	mov	r2, r1
 800cbae:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800cbb0:	68ba      	ldr	r2, [r7, #8]
 800cbb2:	69fb      	ldr	r3, [r7, #28]
 800cbb4:	4413      	add	r3, r2
 800cbb6:	781b      	ldrb	r3, [r3, #0]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d006      	beq.n	800cbca <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cbbc:	69fb      	ldr	r3, [r7, #28]
 800cbbe:	3301      	adds	r3, #1
 800cbc0:	61fb      	str	r3, [r7, #28]
 800cbc2:	69fb      	ldr	r3, [r7, #28]
 800cbc4:	2b0f      	cmp	r3, #15
 800cbc6:	d9e9      	bls.n	800cb9c <prvInitialiseNewTask+0x52>
 800cbc8:	e000      	b.n	800cbcc <prvInitialiseNewTask+0x82>
			{
				break;
 800cbca:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800cbcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbce:	2200      	movs	r2, #0
 800cbd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800cbd4:	e003      	b.n	800cbde <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800cbd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbd8:	2200      	movs	r2, #0
 800cbda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800cbde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbe0:	2b06      	cmp	r3, #6
 800cbe2:	d901      	bls.n	800cbe8 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800cbe4:	2306      	movs	r3, #6
 800cbe6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800cbe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cbec:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800cbee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbf0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cbf2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800cbf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbf6:	2200      	movs	r2, #0
 800cbf8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cbfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbfc:	3304      	adds	r3, #4
 800cbfe:	4618      	mov	r0, r3
 800cc00:	f7fe fc7e 	bl	800b500 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800cc04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc06:	3318      	adds	r3, #24
 800cc08:	4618      	mov	r0, r3
 800cc0a:	f7fe fc79 	bl	800b500 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800cc0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cc12:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cc14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc16:	f1c3 0207 	rsb	r2, r3, #7
 800cc1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc1c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800cc1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cc22:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800cc24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc26:	2200      	movs	r2, #0
 800cc28:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cc2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc2c:	2200      	movs	r2, #0
 800cc2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cc32:	683a      	ldr	r2, [r7, #0]
 800cc34:	68f9      	ldr	r1, [r7, #12]
 800cc36:	69b8      	ldr	r0, [r7, #24]
 800cc38:	f7fe fcf6 	bl	800b628 <pxPortInitialiseStack>
 800cc3c:	4602      	mov	r2, r0
 800cc3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc40:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800cc42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d002      	beq.n	800cc4e <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cc48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cc4c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cc4e:	bf00      	nop
 800cc50:	3720      	adds	r7, #32
 800cc52:	46bd      	mov	sp, r7
 800cc54:	bd80      	pop	{r7, pc}
	...

0800cc58 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800cc58:	b580      	push	{r7, lr}
 800cc5a:	b082      	sub	sp, #8
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800cc60:	f7fe fe0c 	bl	800b87c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800cc64:	4b2a      	ldr	r3, [pc, #168]	; (800cd10 <prvAddNewTaskToReadyList+0xb8>)
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	3301      	adds	r3, #1
 800cc6a:	4a29      	ldr	r2, [pc, #164]	; (800cd10 <prvAddNewTaskToReadyList+0xb8>)
 800cc6c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800cc6e:	4b29      	ldr	r3, [pc, #164]	; (800cd14 <prvAddNewTaskToReadyList+0xbc>)
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d109      	bne.n	800cc8a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800cc76:	4a27      	ldr	r2, [pc, #156]	; (800cd14 <prvAddNewTaskToReadyList+0xbc>)
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cc7c:	4b24      	ldr	r3, [pc, #144]	; (800cd10 <prvAddNewTaskToReadyList+0xb8>)
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	2b01      	cmp	r3, #1
 800cc82:	d110      	bne.n	800cca6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800cc84:	f000 fbf2 	bl	800d46c <prvInitialiseTaskLists>
 800cc88:	e00d      	b.n	800cca6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800cc8a:	4b23      	ldr	r3, [pc, #140]	; (800cd18 <prvAddNewTaskToReadyList+0xc0>)
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d109      	bne.n	800cca6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800cc92:	4b20      	ldr	r3, [pc, #128]	; (800cd14 <prvAddNewTaskToReadyList+0xbc>)
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc9c:	429a      	cmp	r2, r3
 800cc9e:	d802      	bhi.n	800cca6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800cca0:	4a1c      	ldr	r2, [pc, #112]	; (800cd14 <prvAddNewTaskToReadyList+0xbc>)
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800cca6:	4b1d      	ldr	r3, [pc, #116]	; (800cd1c <prvAddNewTaskToReadyList+0xc4>)
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	3301      	adds	r3, #1
 800ccac:	4a1b      	ldr	r2, [pc, #108]	; (800cd1c <prvAddNewTaskToReadyList+0xc4>)
 800ccae:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccb4:	2201      	movs	r2, #1
 800ccb6:	409a      	lsls	r2, r3
 800ccb8:	4b19      	ldr	r3, [pc, #100]	; (800cd20 <prvAddNewTaskToReadyList+0xc8>)
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	4313      	orrs	r3, r2
 800ccbe:	4a18      	ldr	r2, [pc, #96]	; (800cd20 <prvAddNewTaskToReadyList+0xc8>)
 800ccc0:	6013      	str	r3, [r2, #0]
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccc6:	4613      	mov	r3, r2
 800ccc8:	009b      	lsls	r3, r3, #2
 800ccca:	4413      	add	r3, r2
 800cccc:	009b      	lsls	r3, r3, #2
 800ccce:	4a15      	ldr	r2, [pc, #84]	; (800cd24 <prvAddNewTaskToReadyList+0xcc>)
 800ccd0:	441a      	add	r2, r3
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	3304      	adds	r3, #4
 800ccd6:	4619      	mov	r1, r3
 800ccd8:	4610      	mov	r0, r2
 800ccda:	f7fe fc1e 	bl	800b51a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ccde:	f7fe fdfb 	bl	800b8d8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800cce2:	4b0d      	ldr	r3, [pc, #52]	; (800cd18 <prvAddNewTaskToReadyList+0xc0>)
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d00e      	beq.n	800cd08 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ccea:	4b0a      	ldr	r3, [pc, #40]	; (800cd14 <prvAddNewTaskToReadyList+0xbc>)
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccf4:	429a      	cmp	r2, r3
 800ccf6:	d207      	bcs.n	800cd08 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ccf8:	4b0b      	ldr	r3, [pc, #44]	; (800cd28 <prvAddNewTaskToReadyList+0xd0>)
 800ccfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ccfe:	601a      	str	r2, [r3, #0]
 800cd00:	f3bf 8f4f 	dsb	sy
 800cd04:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cd08:	bf00      	nop
 800cd0a:	3708      	adds	r7, #8
 800cd0c:	46bd      	mov	sp, r7
 800cd0e:	bd80      	pop	{r7, pc}
 800cd10:	240405ac 	.word	0x240405ac
 800cd14:	240404ac 	.word	0x240404ac
 800cd18:	240405b8 	.word	0x240405b8
 800cd1c:	240405c8 	.word	0x240405c8
 800cd20:	240405b4 	.word	0x240405b4
 800cd24:	240404b0 	.word	0x240404b0
 800cd28:	e000ed04 	.word	0xe000ed04

0800cd2c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800cd2c:	b580      	push	{r7, lr}
 800cd2e:	b084      	sub	sp, #16
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800cd34:	2300      	movs	r3, #0
 800cd36:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d016      	beq.n	800cd6c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800cd3e:	4b13      	ldr	r3, [pc, #76]	; (800cd8c <vTaskDelay+0x60>)
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d009      	beq.n	800cd5a <vTaskDelay+0x2e>
 800cd46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd4a:	f383 8811 	msr	BASEPRI, r3
 800cd4e:	f3bf 8f6f 	isb	sy
 800cd52:	f3bf 8f4f 	dsb	sy
 800cd56:	60bb      	str	r3, [r7, #8]
 800cd58:	e7fe      	b.n	800cd58 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800cd5a:	f000 f879 	bl	800ce50 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800cd5e:	2100      	movs	r1, #0
 800cd60:	6878      	ldr	r0, [r7, #4]
 800cd62:	f000 fe0b 	bl	800d97c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800cd66:	f000 f881 	bl	800ce6c <xTaskResumeAll>
 800cd6a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d107      	bne.n	800cd82 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800cd72:	4b07      	ldr	r3, [pc, #28]	; (800cd90 <vTaskDelay+0x64>)
 800cd74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd78:	601a      	str	r2, [r3, #0]
 800cd7a:	f3bf 8f4f 	dsb	sy
 800cd7e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cd82:	bf00      	nop
 800cd84:	3710      	adds	r7, #16
 800cd86:	46bd      	mov	sp, r7
 800cd88:	bd80      	pop	{r7, pc}
 800cd8a:	bf00      	nop
 800cd8c:	240405d4 	.word	0x240405d4
 800cd90:	e000ed04 	.word	0xe000ed04

0800cd94 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800cd94:	b580      	push	{r7, lr}
 800cd96:	b08a      	sub	sp, #40	; 0x28
 800cd98:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800cd9a:	2300      	movs	r3, #0
 800cd9c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800cd9e:	2300      	movs	r3, #0
 800cda0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800cda2:	463a      	mov	r2, r7
 800cda4:	1d39      	adds	r1, r7, #4
 800cda6:	f107 0308 	add.w	r3, r7, #8
 800cdaa:	4618      	mov	r0, r3
 800cdac:	f7f3 fdb0 	bl	8000910 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800cdb0:	6839      	ldr	r1, [r7, #0]
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	68ba      	ldr	r2, [r7, #8]
 800cdb6:	9202      	str	r2, [sp, #8]
 800cdb8:	9301      	str	r3, [sp, #4]
 800cdba:	2300      	movs	r3, #0
 800cdbc:	9300      	str	r3, [sp, #0]
 800cdbe:	2300      	movs	r3, #0
 800cdc0:	460a      	mov	r2, r1
 800cdc2:	491d      	ldr	r1, [pc, #116]	; (800ce38 <vTaskStartScheduler+0xa4>)
 800cdc4:	481d      	ldr	r0, [pc, #116]	; (800ce3c <vTaskStartScheduler+0xa8>)
 800cdc6:	f7ff fe21 	bl	800ca0c <xTaskCreateStatic>
 800cdca:	4602      	mov	r2, r0
 800cdcc:	4b1c      	ldr	r3, [pc, #112]	; (800ce40 <vTaskStartScheduler+0xac>)
 800cdce:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800cdd0:	4b1b      	ldr	r3, [pc, #108]	; (800ce40 <vTaskStartScheduler+0xac>)
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d002      	beq.n	800cdde <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800cdd8:	2301      	movs	r3, #1
 800cdda:	617b      	str	r3, [r7, #20]
 800cddc:	e001      	b.n	800cde2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800cdde:	2300      	movs	r3, #0
 800cde0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800cde2:	697b      	ldr	r3, [r7, #20]
 800cde4:	2b01      	cmp	r3, #1
 800cde6:	d115      	bne.n	800ce14 <vTaskStartScheduler+0x80>
 800cde8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdec:	f383 8811 	msr	BASEPRI, r3
 800cdf0:	f3bf 8f6f 	isb	sy
 800cdf4:	f3bf 8f4f 	dsb	sy
 800cdf8:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800cdfa:	4b12      	ldr	r3, [pc, #72]	; (800ce44 <vTaskStartScheduler+0xb0>)
 800cdfc:	f04f 32ff 	mov.w	r2, #4294967295
 800ce00:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ce02:	4b11      	ldr	r3, [pc, #68]	; (800ce48 <vTaskStartScheduler+0xb4>)
 800ce04:	2201      	movs	r2, #1
 800ce06:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ce08:	4b10      	ldr	r3, [pc, #64]	; (800ce4c <vTaskStartScheduler+0xb8>)
 800ce0a:	2200      	movs	r2, #0
 800ce0c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ce0e:	f7fe fc97 	bl	800b740 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ce12:	e00d      	b.n	800ce30 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ce14:	697b      	ldr	r3, [r7, #20]
 800ce16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce1a:	d109      	bne.n	800ce30 <vTaskStartScheduler+0x9c>
 800ce1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce20:	f383 8811 	msr	BASEPRI, r3
 800ce24:	f3bf 8f6f 	isb	sy
 800ce28:	f3bf 8f4f 	dsb	sy
 800ce2c:	60fb      	str	r3, [r7, #12]
 800ce2e:	e7fe      	b.n	800ce2e <vTaskStartScheduler+0x9a>
}
 800ce30:	bf00      	nop
 800ce32:	3718      	adds	r7, #24
 800ce34:	46bd      	mov	sp, r7
 800ce36:	bd80      	pop	{r7, pc}
 800ce38:	080231d8 	.word	0x080231d8
 800ce3c:	0800d43d 	.word	0x0800d43d
 800ce40:	240405d0 	.word	0x240405d0
 800ce44:	240405cc 	.word	0x240405cc
 800ce48:	240405b8 	.word	0x240405b8
 800ce4c:	240405b0 	.word	0x240405b0

0800ce50 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ce50:	b480      	push	{r7}
 800ce52:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800ce54:	4b04      	ldr	r3, [pc, #16]	; (800ce68 <vTaskSuspendAll+0x18>)
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	3301      	adds	r3, #1
 800ce5a:	4a03      	ldr	r2, [pc, #12]	; (800ce68 <vTaskSuspendAll+0x18>)
 800ce5c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800ce5e:	bf00      	nop
 800ce60:	46bd      	mov	sp, r7
 800ce62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce66:	4770      	bx	lr
 800ce68:	240405d4 	.word	0x240405d4

0800ce6c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ce6c:	b580      	push	{r7, lr}
 800ce6e:	b084      	sub	sp, #16
 800ce70:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ce72:	2300      	movs	r3, #0
 800ce74:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ce76:	2300      	movs	r3, #0
 800ce78:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ce7a:	4b41      	ldr	r3, [pc, #260]	; (800cf80 <xTaskResumeAll+0x114>)
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d109      	bne.n	800ce96 <xTaskResumeAll+0x2a>
 800ce82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce86:	f383 8811 	msr	BASEPRI, r3
 800ce8a:	f3bf 8f6f 	isb	sy
 800ce8e:	f3bf 8f4f 	dsb	sy
 800ce92:	603b      	str	r3, [r7, #0]
 800ce94:	e7fe      	b.n	800ce94 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ce96:	f7fe fcf1 	bl	800b87c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ce9a:	4b39      	ldr	r3, [pc, #228]	; (800cf80 <xTaskResumeAll+0x114>)
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	3b01      	subs	r3, #1
 800cea0:	4a37      	ldr	r2, [pc, #220]	; (800cf80 <xTaskResumeAll+0x114>)
 800cea2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cea4:	4b36      	ldr	r3, [pc, #216]	; (800cf80 <xTaskResumeAll+0x114>)
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d161      	bne.n	800cf70 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ceac:	4b35      	ldr	r3, [pc, #212]	; (800cf84 <xTaskResumeAll+0x118>)
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d05d      	beq.n	800cf70 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ceb4:	e02e      	b.n	800cf14 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ceb6:	4b34      	ldr	r3, [pc, #208]	; (800cf88 <xTaskResumeAll+0x11c>)
 800ceb8:	68db      	ldr	r3, [r3, #12]
 800ceba:	68db      	ldr	r3, [r3, #12]
 800cebc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	3318      	adds	r3, #24
 800cec2:	4618      	mov	r0, r3
 800cec4:	f7fe fb86 	bl	800b5d4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	3304      	adds	r3, #4
 800cecc:	4618      	mov	r0, r3
 800cece:	f7fe fb81 	bl	800b5d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ced6:	2201      	movs	r2, #1
 800ced8:	409a      	lsls	r2, r3
 800ceda:	4b2c      	ldr	r3, [pc, #176]	; (800cf8c <xTaskResumeAll+0x120>)
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	4313      	orrs	r3, r2
 800cee0:	4a2a      	ldr	r2, [pc, #168]	; (800cf8c <xTaskResumeAll+0x120>)
 800cee2:	6013      	str	r3, [r2, #0]
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cee8:	4613      	mov	r3, r2
 800ceea:	009b      	lsls	r3, r3, #2
 800ceec:	4413      	add	r3, r2
 800ceee:	009b      	lsls	r3, r3, #2
 800cef0:	4a27      	ldr	r2, [pc, #156]	; (800cf90 <xTaskResumeAll+0x124>)
 800cef2:	441a      	add	r2, r3
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	3304      	adds	r3, #4
 800cef8:	4619      	mov	r1, r3
 800cefa:	4610      	mov	r0, r2
 800cefc:	f7fe fb0d 	bl	800b51a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf04:	4b23      	ldr	r3, [pc, #140]	; (800cf94 <xTaskResumeAll+0x128>)
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf0a:	429a      	cmp	r2, r3
 800cf0c:	d302      	bcc.n	800cf14 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800cf0e:	4b22      	ldr	r3, [pc, #136]	; (800cf98 <xTaskResumeAll+0x12c>)
 800cf10:	2201      	movs	r2, #1
 800cf12:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cf14:	4b1c      	ldr	r3, [pc, #112]	; (800cf88 <xTaskResumeAll+0x11c>)
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d1cc      	bne.n	800ceb6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d001      	beq.n	800cf26 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800cf22:	f000 fb3d 	bl	800d5a0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800cf26:	4b1d      	ldr	r3, [pc, #116]	; (800cf9c <xTaskResumeAll+0x130>)
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d010      	beq.n	800cf54 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800cf32:	f000 f859 	bl	800cfe8 <xTaskIncrementTick>
 800cf36:	4603      	mov	r3, r0
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d002      	beq.n	800cf42 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800cf3c:	4b16      	ldr	r3, [pc, #88]	; (800cf98 <xTaskResumeAll+0x12c>)
 800cf3e:	2201      	movs	r2, #1
 800cf40:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	3b01      	subs	r3, #1
 800cf46:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d1f1      	bne.n	800cf32 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800cf4e:	4b13      	ldr	r3, [pc, #76]	; (800cf9c <xTaskResumeAll+0x130>)
 800cf50:	2200      	movs	r2, #0
 800cf52:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800cf54:	4b10      	ldr	r3, [pc, #64]	; (800cf98 <xTaskResumeAll+0x12c>)
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d009      	beq.n	800cf70 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800cf5c:	2301      	movs	r3, #1
 800cf5e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800cf60:	4b0f      	ldr	r3, [pc, #60]	; (800cfa0 <xTaskResumeAll+0x134>)
 800cf62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf66:	601a      	str	r2, [r3, #0]
 800cf68:	f3bf 8f4f 	dsb	sy
 800cf6c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cf70:	f7fe fcb2 	bl	800b8d8 <vPortExitCritical>

	return xAlreadyYielded;
 800cf74:	68bb      	ldr	r3, [r7, #8]
}
 800cf76:	4618      	mov	r0, r3
 800cf78:	3710      	adds	r7, #16
 800cf7a:	46bd      	mov	sp, r7
 800cf7c:	bd80      	pop	{r7, pc}
 800cf7e:	bf00      	nop
 800cf80:	240405d4 	.word	0x240405d4
 800cf84:	240405ac 	.word	0x240405ac
 800cf88:	2404056c 	.word	0x2404056c
 800cf8c:	240405b4 	.word	0x240405b4
 800cf90:	240404b0 	.word	0x240404b0
 800cf94:	240404ac 	.word	0x240404ac
 800cf98:	240405c0 	.word	0x240405c0
 800cf9c:	240405bc 	.word	0x240405bc
 800cfa0:	e000ed04 	.word	0xe000ed04

0800cfa4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800cfa4:	b480      	push	{r7}
 800cfa6:	b083      	sub	sp, #12
 800cfa8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800cfaa:	4b05      	ldr	r3, [pc, #20]	; (800cfc0 <xTaskGetTickCount+0x1c>)
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800cfb0:	687b      	ldr	r3, [r7, #4]
}
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	370c      	adds	r7, #12
 800cfb6:	46bd      	mov	sp, r7
 800cfb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfbc:	4770      	bx	lr
 800cfbe:	bf00      	nop
 800cfc0:	240405b0 	.word	0x240405b0

0800cfc4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800cfc4:	b580      	push	{r7, lr}
 800cfc6:	b082      	sub	sp, #8
 800cfc8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cfca:	f7fe fd33 	bl	800ba34 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800cfce:	2300      	movs	r3, #0
 800cfd0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800cfd2:	4b04      	ldr	r3, [pc, #16]	; (800cfe4 <xTaskGetTickCountFromISR+0x20>)
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cfd8:	683b      	ldr	r3, [r7, #0]
}
 800cfda:	4618      	mov	r0, r3
 800cfdc:	3708      	adds	r7, #8
 800cfde:	46bd      	mov	sp, r7
 800cfe0:	bd80      	pop	{r7, pc}
 800cfe2:	bf00      	nop
 800cfe4:	240405b0 	.word	0x240405b0

0800cfe8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800cfe8:	b580      	push	{r7, lr}
 800cfea:	b086      	sub	sp, #24
 800cfec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800cfee:	2300      	movs	r3, #0
 800cff0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cff2:	4b4e      	ldr	r3, [pc, #312]	; (800d12c <xTaskIncrementTick+0x144>)
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	f040 8087 	bne.w	800d10a <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800cffc:	4b4c      	ldr	r3, [pc, #304]	; (800d130 <xTaskIncrementTick+0x148>)
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	3301      	adds	r3, #1
 800d002:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d004:	4a4a      	ldr	r2, [pc, #296]	; (800d130 <xTaskIncrementTick+0x148>)
 800d006:	693b      	ldr	r3, [r7, #16]
 800d008:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d00a:	693b      	ldr	r3, [r7, #16]
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d11f      	bne.n	800d050 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800d010:	4b48      	ldr	r3, [pc, #288]	; (800d134 <xTaskIncrementTick+0x14c>)
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	2b00      	cmp	r3, #0
 800d018:	d009      	beq.n	800d02e <xTaskIncrementTick+0x46>
 800d01a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d01e:	f383 8811 	msr	BASEPRI, r3
 800d022:	f3bf 8f6f 	isb	sy
 800d026:	f3bf 8f4f 	dsb	sy
 800d02a:	603b      	str	r3, [r7, #0]
 800d02c:	e7fe      	b.n	800d02c <xTaskIncrementTick+0x44>
 800d02e:	4b41      	ldr	r3, [pc, #260]	; (800d134 <xTaskIncrementTick+0x14c>)
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	60fb      	str	r3, [r7, #12]
 800d034:	4b40      	ldr	r3, [pc, #256]	; (800d138 <xTaskIncrementTick+0x150>)
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	4a3e      	ldr	r2, [pc, #248]	; (800d134 <xTaskIncrementTick+0x14c>)
 800d03a:	6013      	str	r3, [r2, #0]
 800d03c:	4a3e      	ldr	r2, [pc, #248]	; (800d138 <xTaskIncrementTick+0x150>)
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	6013      	str	r3, [r2, #0]
 800d042:	4b3e      	ldr	r3, [pc, #248]	; (800d13c <xTaskIncrementTick+0x154>)
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	3301      	adds	r3, #1
 800d048:	4a3c      	ldr	r2, [pc, #240]	; (800d13c <xTaskIncrementTick+0x154>)
 800d04a:	6013      	str	r3, [r2, #0]
 800d04c:	f000 faa8 	bl	800d5a0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d050:	4b3b      	ldr	r3, [pc, #236]	; (800d140 <xTaskIncrementTick+0x158>)
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	693a      	ldr	r2, [r7, #16]
 800d056:	429a      	cmp	r2, r3
 800d058:	d348      	bcc.n	800d0ec <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d05a:	4b36      	ldr	r3, [pc, #216]	; (800d134 <xTaskIncrementTick+0x14c>)
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	2b00      	cmp	r3, #0
 800d062:	d104      	bne.n	800d06e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d064:	4b36      	ldr	r3, [pc, #216]	; (800d140 <xTaskIncrementTick+0x158>)
 800d066:	f04f 32ff 	mov.w	r2, #4294967295
 800d06a:	601a      	str	r2, [r3, #0]
					break;
 800d06c:	e03e      	b.n	800d0ec <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d06e:	4b31      	ldr	r3, [pc, #196]	; (800d134 <xTaskIncrementTick+0x14c>)
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	68db      	ldr	r3, [r3, #12]
 800d074:	68db      	ldr	r3, [r3, #12]
 800d076:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d078:	68bb      	ldr	r3, [r7, #8]
 800d07a:	685b      	ldr	r3, [r3, #4]
 800d07c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d07e:	693a      	ldr	r2, [r7, #16]
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	429a      	cmp	r2, r3
 800d084:	d203      	bcs.n	800d08e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d086:	4a2e      	ldr	r2, [pc, #184]	; (800d140 <xTaskIncrementTick+0x158>)
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d08c:	e02e      	b.n	800d0ec <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d08e:	68bb      	ldr	r3, [r7, #8]
 800d090:	3304      	adds	r3, #4
 800d092:	4618      	mov	r0, r3
 800d094:	f7fe fa9e 	bl	800b5d4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d098:	68bb      	ldr	r3, [r7, #8]
 800d09a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d004      	beq.n	800d0aa <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d0a0:	68bb      	ldr	r3, [r7, #8]
 800d0a2:	3318      	adds	r3, #24
 800d0a4:	4618      	mov	r0, r3
 800d0a6:	f7fe fa95 	bl	800b5d4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d0aa:	68bb      	ldr	r3, [r7, #8]
 800d0ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0ae:	2201      	movs	r2, #1
 800d0b0:	409a      	lsls	r2, r3
 800d0b2:	4b24      	ldr	r3, [pc, #144]	; (800d144 <xTaskIncrementTick+0x15c>)
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	4313      	orrs	r3, r2
 800d0b8:	4a22      	ldr	r2, [pc, #136]	; (800d144 <xTaskIncrementTick+0x15c>)
 800d0ba:	6013      	str	r3, [r2, #0]
 800d0bc:	68bb      	ldr	r3, [r7, #8]
 800d0be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0c0:	4613      	mov	r3, r2
 800d0c2:	009b      	lsls	r3, r3, #2
 800d0c4:	4413      	add	r3, r2
 800d0c6:	009b      	lsls	r3, r3, #2
 800d0c8:	4a1f      	ldr	r2, [pc, #124]	; (800d148 <xTaskIncrementTick+0x160>)
 800d0ca:	441a      	add	r2, r3
 800d0cc:	68bb      	ldr	r3, [r7, #8]
 800d0ce:	3304      	adds	r3, #4
 800d0d0:	4619      	mov	r1, r3
 800d0d2:	4610      	mov	r0, r2
 800d0d4:	f7fe fa21 	bl	800b51a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d0d8:	68bb      	ldr	r3, [r7, #8]
 800d0da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0dc:	4b1b      	ldr	r3, [pc, #108]	; (800d14c <xTaskIncrementTick+0x164>)
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0e2:	429a      	cmp	r2, r3
 800d0e4:	d3b9      	bcc.n	800d05a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800d0e6:	2301      	movs	r3, #1
 800d0e8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d0ea:	e7b6      	b.n	800d05a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d0ec:	4b17      	ldr	r3, [pc, #92]	; (800d14c <xTaskIncrementTick+0x164>)
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0f2:	4915      	ldr	r1, [pc, #84]	; (800d148 <xTaskIncrementTick+0x160>)
 800d0f4:	4613      	mov	r3, r2
 800d0f6:	009b      	lsls	r3, r3, #2
 800d0f8:	4413      	add	r3, r2
 800d0fa:	009b      	lsls	r3, r3, #2
 800d0fc:	440b      	add	r3, r1
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	2b01      	cmp	r3, #1
 800d102:	d907      	bls.n	800d114 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 800d104:	2301      	movs	r3, #1
 800d106:	617b      	str	r3, [r7, #20]
 800d108:	e004      	b.n	800d114 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800d10a:	4b11      	ldr	r3, [pc, #68]	; (800d150 <xTaskIncrementTick+0x168>)
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	3301      	adds	r3, #1
 800d110:	4a0f      	ldr	r2, [pc, #60]	; (800d150 <xTaskIncrementTick+0x168>)
 800d112:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800d114:	4b0f      	ldr	r3, [pc, #60]	; (800d154 <xTaskIncrementTick+0x16c>)
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d001      	beq.n	800d120 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 800d11c:	2301      	movs	r3, #1
 800d11e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800d120:	697b      	ldr	r3, [r7, #20]
}
 800d122:	4618      	mov	r0, r3
 800d124:	3718      	adds	r7, #24
 800d126:	46bd      	mov	sp, r7
 800d128:	bd80      	pop	{r7, pc}
 800d12a:	bf00      	nop
 800d12c:	240405d4 	.word	0x240405d4
 800d130:	240405b0 	.word	0x240405b0
 800d134:	24040564 	.word	0x24040564
 800d138:	24040568 	.word	0x24040568
 800d13c:	240405c4 	.word	0x240405c4
 800d140:	240405cc 	.word	0x240405cc
 800d144:	240405b4 	.word	0x240405b4
 800d148:	240404b0 	.word	0x240404b0
 800d14c:	240404ac 	.word	0x240404ac
 800d150:	240405bc 	.word	0x240405bc
 800d154:	240405c0 	.word	0x240405c0

0800d158 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d158:	b580      	push	{r7, lr}
 800d15a:	b086      	sub	sp, #24
 800d15c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d15e:	4b2e      	ldr	r3, [pc, #184]	; (800d218 <vTaskSwitchContext+0xc0>)
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	2b00      	cmp	r3, #0
 800d164:	d003      	beq.n	800d16e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d166:	4b2d      	ldr	r3, [pc, #180]	; (800d21c <vTaskSwitchContext+0xc4>)
 800d168:	2201      	movs	r2, #1
 800d16a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d16c:	e04f      	b.n	800d20e <vTaskSwitchContext+0xb6>
		xYieldPending = pdFALSE;
 800d16e:	4b2b      	ldr	r3, [pc, #172]	; (800d21c <vTaskSwitchContext+0xc4>)
 800d170:	2200      	movs	r2, #0
 800d172:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800d174:	4b2a      	ldr	r3, [pc, #168]	; (800d220 <vTaskSwitchContext+0xc8>)
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	681a      	ldr	r2, [r3, #0]
 800d17a:	4b29      	ldr	r3, [pc, #164]	; (800d220 <vTaskSwitchContext+0xc8>)
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d180:	429a      	cmp	r2, r3
 800d182:	d808      	bhi.n	800d196 <vTaskSwitchContext+0x3e>
 800d184:	4b26      	ldr	r3, [pc, #152]	; (800d220 <vTaskSwitchContext+0xc8>)
 800d186:	681a      	ldr	r2, [r3, #0]
 800d188:	4b25      	ldr	r3, [pc, #148]	; (800d220 <vTaskSwitchContext+0xc8>)
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	3334      	adds	r3, #52	; 0x34
 800d18e:	4619      	mov	r1, r3
 800d190:	4610      	mov	r0, r2
 800d192:	f012 fb5b 	bl	801f84c <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d196:	4b23      	ldr	r3, [pc, #140]	; (800d224 <vTaskSwitchContext+0xcc>)
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	fab3 f383 	clz	r3, r3
 800d1a2:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800d1a4:	7afb      	ldrb	r3, [r7, #11]
 800d1a6:	f1c3 031f 	rsb	r3, r3, #31
 800d1aa:	617b      	str	r3, [r7, #20]
 800d1ac:	491e      	ldr	r1, [pc, #120]	; (800d228 <vTaskSwitchContext+0xd0>)
 800d1ae:	697a      	ldr	r2, [r7, #20]
 800d1b0:	4613      	mov	r3, r2
 800d1b2:	009b      	lsls	r3, r3, #2
 800d1b4:	4413      	add	r3, r2
 800d1b6:	009b      	lsls	r3, r3, #2
 800d1b8:	440b      	add	r3, r1
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d109      	bne.n	800d1d4 <vTaskSwitchContext+0x7c>
	__asm volatile
 800d1c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1c4:	f383 8811 	msr	BASEPRI, r3
 800d1c8:	f3bf 8f6f 	isb	sy
 800d1cc:	f3bf 8f4f 	dsb	sy
 800d1d0:	607b      	str	r3, [r7, #4]
 800d1d2:	e7fe      	b.n	800d1d2 <vTaskSwitchContext+0x7a>
 800d1d4:	697a      	ldr	r2, [r7, #20]
 800d1d6:	4613      	mov	r3, r2
 800d1d8:	009b      	lsls	r3, r3, #2
 800d1da:	4413      	add	r3, r2
 800d1dc:	009b      	lsls	r3, r3, #2
 800d1de:	4a12      	ldr	r2, [pc, #72]	; (800d228 <vTaskSwitchContext+0xd0>)
 800d1e0:	4413      	add	r3, r2
 800d1e2:	613b      	str	r3, [r7, #16]
 800d1e4:	693b      	ldr	r3, [r7, #16]
 800d1e6:	685b      	ldr	r3, [r3, #4]
 800d1e8:	685a      	ldr	r2, [r3, #4]
 800d1ea:	693b      	ldr	r3, [r7, #16]
 800d1ec:	605a      	str	r2, [r3, #4]
 800d1ee:	693b      	ldr	r3, [r7, #16]
 800d1f0:	685a      	ldr	r2, [r3, #4]
 800d1f2:	693b      	ldr	r3, [r7, #16]
 800d1f4:	3308      	adds	r3, #8
 800d1f6:	429a      	cmp	r2, r3
 800d1f8:	d104      	bne.n	800d204 <vTaskSwitchContext+0xac>
 800d1fa:	693b      	ldr	r3, [r7, #16]
 800d1fc:	685b      	ldr	r3, [r3, #4]
 800d1fe:	685a      	ldr	r2, [r3, #4]
 800d200:	693b      	ldr	r3, [r7, #16]
 800d202:	605a      	str	r2, [r3, #4]
 800d204:	693b      	ldr	r3, [r7, #16]
 800d206:	685b      	ldr	r3, [r3, #4]
 800d208:	68db      	ldr	r3, [r3, #12]
 800d20a:	4a05      	ldr	r2, [pc, #20]	; (800d220 <vTaskSwitchContext+0xc8>)
 800d20c:	6013      	str	r3, [r2, #0]
}
 800d20e:	bf00      	nop
 800d210:	3718      	adds	r7, #24
 800d212:	46bd      	mov	sp, r7
 800d214:	bd80      	pop	{r7, pc}
 800d216:	bf00      	nop
 800d218:	240405d4 	.word	0x240405d4
 800d21c:	240405c0 	.word	0x240405c0
 800d220:	240404ac 	.word	0x240404ac
 800d224:	240405b4 	.word	0x240405b4
 800d228:	240404b0 	.word	0x240404b0

0800d22c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d22c:	b580      	push	{r7, lr}
 800d22e:	b084      	sub	sp, #16
 800d230:	af00      	add	r7, sp, #0
 800d232:	6078      	str	r0, [r7, #4]
 800d234:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d109      	bne.n	800d250 <vTaskPlaceOnEventList+0x24>
 800d23c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d240:	f383 8811 	msr	BASEPRI, r3
 800d244:	f3bf 8f6f 	isb	sy
 800d248:	f3bf 8f4f 	dsb	sy
 800d24c:	60fb      	str	r3, [r7, #12]
 800d24e:	e7fe      	b.n	800d24e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d250:	4b07      	ldr	r3, [pc, #28]	; (800d270 <vTaskPlaceOnEventList+0x44>)
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	3318      	adds	r3, #24
 800d256:	4619      	mov	r1, r3
 800d258:	6878      	ldr	r0, [r7, #4]
 800d25a:	f7fe f982 	bl	800b562 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d25e:	2101      	movs	r1, #1
 800d260:	6838      	ldr	r0, [r7, #0]
 800d262:	f000 fb8b 	bl	800d97c <prvAddCurrentTaskToDelayedList>
}
 800d266:	bf00      	nop
 800d268:	3710      	adds	r7, #16
 800d26a:	46bd      	mov	sp, r7
 800d26c:	bd80      	pop	{r7, pc}
 800d26e:	bf00      	nop
 800d270:	240404ac 	.word	0x240404ac

0800d274 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d274:	b580      	push	{r7, lr}
 800d276:	b086      	sub	sp, #24
 800d278:	af00      	add	r7, sp, #0
 800d27a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	68db      	ldr	r3, [r3, #12]
 800d280:	68db      	ldr	r3, [r3, #12]
 800d282:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d284:	693b      	ldr	r3, [r7, #16]
 800d286:	2b00      	cmp	r3, #0
 800d288:	d109      	bne.n	800d29e <xTaskRemoveFromEventList+0x2a>
 800d28a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d28e:	f383 8811 	msr	BASEPRI, r3
 800d292:	f3bf 8f6f 	isb	sy
 800d296:	f3bf 8f4f 	dsb	sy
 800d29a:	60fb      	str	r3, [r7, #12]
 800d29c:	e7fe      	b.n	800d29c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d29e:	693b      	ldr	r3, [r7, #16]
 800d2a0:	3318      	adds	r3, #24
 800d2a2:	4618      	mov	r0, r3
 800d2a4:	f7fe f996 	bl	800b5d4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d2a8:	4b1d      	ldr	r3, [pc, #116]	; (800d320 <xTaskRemoveFromEventList+0xac>)
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d11c      	bne.n	800d2ea <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d2b0:	693b      	ldr	r3, [r7, #16]
 800d2b2:	3304      	adds	r3, #4
 800d2b4:	4618      	mov	r0, r3
 800d2b6:	f7fe f98d 	bl	800b5d4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d2ba:	693b      	ldr	r3, [r7, #16]
 800d2bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2be:	2201      	movs	r2, #1
 800d2c0:	409a      	lsls	r2, r3
 800d2c2:	4b18      	ldr	r3, [pc, #96]	; (800d324 <xTaskRemoveFromEventList+0xb0>)
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	4313      	orrs	r3, r2
 800d2c8:	4a16      	ldr	r2, [pc, #88]	; (800d324 <xTaskRemoveFromEventList+0xb0>)
 800d2ca:	6013      	str	r3, [r2, #0]
 800d2cc:	693b      	ldr	r3, [r7, #16]
 800d2ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2d0:	4613      	mov	r3, r2
 800d2d2:	009b      	lsls	r3, r3, #2
 800d2d4:	4413      	add	r3, r2
 800d2d6:	009b      	lsls	r3, r3, #2
 800d2d8:	4a13      	ldr	r2, [pc, #76]	; (800d328 <xTaskRemoveFromEventList+0xb4>)
 800d2da:	441a      	add	r2, r3
 800d2dc:	693b      	ldr	r3, [r7, #16]
 800d2de:	3304      	adds	r3, #4
 800d2e0:	4619      	mov	r1, r3
 800d2e2:	4610      	mov	r0, r2
 800d2e4:	f7fe f919 	bl	800b51a <vListInsertEnd>
 800d2e8:	e005      	b.n	800d2f6 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d2ea:	693b      	ldr	r3, [r7, #16]
 800d2ec:	3318      	adds	r3, #24
 800d2ee:	4619      	mov	r1, r3
 800d2f0:	480e      	ldr	r0, [pc, #56]	; (800d32c <xTaskRemoveFromEventList+0xb8>)
 800d2f2:	f7fe f912 	bl	800b51a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d2f6:	693b      	ldr	r3, [r7, #16]
 800d2f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2fa:	4b0d      	ldr	r3, [pc, #52]	; (800d330 <xTaskRemoveFromEventList+0xbc>)
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d300:	429a      	cmp	r2, r3
 800d302:	d905      	bls.n	800d310 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d304:	2301      	movs	r3, #1
 800d306:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d308:	4b0a      	ldr	r3, [pc, #40]	; (800d334 <xTaskRemoveFromEventList+0xc0>)
 800d30a:	2201      	movs	r2, #1
 800d30c:	601a      	str	r2, [r3, #0]
 800d30e:	e001      	b.n	800d314 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800d310:	2300      	movs	r3, #0
 800d312:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d314:	697b      	ldr	r3, [r7, #20]
}
 800d316:	4618      	mov	r0, r3
 800d318:	3718      	adds	r7, #24
 800d31a:	46bd      	mov	sp, r7
 800d31c:	bd80      	pop	{r7, pc}
 800d31e:	bf00      	nop
 800d320:	240405d4 	.word	0x240405d4
 800d324:	240405b4 	.word	0x240405b4
 800d328:	240404b0 	.word	0x240404b0
 800d32c:	2404056c 	.word	0x2404056c
 800d330:	240404ac 	.word	0x240404ac
 800d334:	240405c0 	.word	0x240405c0

0800d338 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d338:	b480      	push	{r7}
 800d33a:	b083      	sub	sp, #12
 800d33c:	af00      	add	r7, sp, #0
 800d33e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d340:	4b06      	ldr	r3, [pc, #24]	; (800d35c <vTaskInternalSetTimeOutState+0x24>)
 800d342:	681a      	ldr	r2, [r3, #0]
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d348:	4b05      	ldr	r3, [pc, #20]	; (800d360 <vTaskInternalSetTimeOutState+0x28>)
 800d34a:	681a      	ldr	r2, [r3, #0]
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	605a      	str	r2, [r3, #4]
}
 800d350:	bf00      	nop
 800d352:	370c      	adds	r7, #12
 800d354:	46bd      	mov	sp, r7
 800d356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d35a:	4770      	bx	lr
 800d35c:	240405c4 	.word	0x240405c4
 800d360:	240405b0 	.word	0x240405b0

0800d364 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d364:	b580      	push	{r7, lr}
 800d366:	b088      	sub	sp, #32
 800d368:	af00      	add	r7, sp, #0
 800d36a:	6078      	str	r0, [r7, #4]
 800d36c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	2b00      	cmp	r3, #0
 800d372:	d109      	bne.n	800d388 <xTaskCheckForTimeOut+0x24>
 800d374:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d378:	f383 8811 	msr	BASEPRI, r3
 800d37c:	f3bf 8f6f 	isb	sy
 800d380:	f3bf 8f4f 	dsb	sy
 800d384:	613b      	str	r3, [r7, #16]
 800d386:	e7fe      	b.n	800d386 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800d388:	683b      	ldr	r3, [r7, #0]
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d109      	bne.n	800d3a2 <xTaskCheckForTimeOut+0x3e>
 800d38e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d392:	f383 8811 	msr	BASEPRI, r3
 800d396:	f3bf 8f6f 	isb	sy
 800d39a:	f3bf 8f4f 	dsb	sy
 800d39e:	60fb      	str	r3, [r7, #12]
 800d3a0:	e7fe      	b.n	800d3a0 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800d3a2:	f7fe fa6b 	bl	800b87c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d3a6:	4b1d      	ldr	r3, [pc, #116]	; (800d41c <xTaskCheckForTimeOut+0xb8>)
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	685b      	ldr	r3, [r3, #4]
 800d3b0:	69ba      	ldr	r2, [r7, #24]
 800d3b2:	1ad3      	subs	r3, r2, r3
 800d3b4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d3b6:	683b      	ldr	r3, [r7, #0]
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3be:	d102      	bne.n	800d3c6 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d3c0:	2300      	movs	r3, #0
 800d3c2:	61fb      	str	r3, [r7, #28]
 800d3c4:	e023      	b.n	800d40e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	681a      	ldr	r2, [r3, #0]
 800d3ca:	4b15      	ldr	r3, [pc, #84]	; (800d420 <xTaskCheckForTimeOut+0xbc>)
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	429a      	cmp	r2, r3
 800d3d0:	d007      	beq.n	800d3e2 <xTaskCheckForTimeOut+0x7e>
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	685b      	ldr	r3, [r3, #4]
 800d3d6:	69ba      	ldr	r2, [r7, #24]
 800d3d8:	429a      	cmp	r2, r3
 800d3da:	d302      	bcc.n	800d3e2 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d3dc:	2301      	movs	r3, #1
 800d3de:	61fb      	str	r3, [r7, #28]
 800d3e0:	e015      	b.n	800d40e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d3e2:	683b      	ldr	r3, [r7, #0]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	697a      	ldr	r2, [r7, #20]
 800d3e8:	429a      	cmp	r2, r3
 800d3ea:	d20b      	bcs.n	800d404 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d3ec:	683b      	ldr	r3, [r7, #0]
 800d3ee:	681a      	ldr	r2, [r3, #0]
 800d3f0:	697b      	ldr	r3, [r7, #20]
 800d3f2:	1ad2      	subs	r2, r2, r3
 800d3f4:	683b      	ldr	r3, [r7, #0]
 800d3f6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d3f8:	6878      	ldr	r0, [r7, #4]
 800d3fa:	f7ff ff9d 	bl	800d338 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d3fe:	2300      	movs	r3, #0
 800d400:	61fb      	str	r3, [r7, #28]
 800d402:	e004      	b.n	800d40e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800d404:	683b      	ldr	r3, [r7, #0]
 800d406:	2200      	movs	r2, #0
 800d408:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d40a:	2301      	movs	r3, #1
 800d40c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d40e:	f7fe fa63 	bl	800b8d8 <vPortExitCritical>

	return xReturn;
 800d412:	69fb      	ldr	r3, [r7, #28]
}
 800d414:	4618      	mov	r0, r3
 800d416:	3720      	adds	r7, #32
 800d418:	46bd      	mov	sp, r7
 800d41a:	bd80      	pop	{r7, pc}
 800d41c:	240405b0 	.word	0x240405b0
 800d420:	240405c4 	.word	0x240405c4

0800d424 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d424:	b480      	push	{r7}
 800d426:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d428:	4b03      	ldr	r3, [pc, #12]	; (800d438 <vTaskMissedYield+0x14>)
 800d42a:	2201      	movs	r2, #1
 800d42c:	601a      	str	r2, [r3, #0]
}
 800d42e:	bf00      	nop
 800d430:	46bd      	mov	sp, r7
 800d432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d436:	4770      	bx	lr
 800d438:	240405c0 	.word	0x240405c0

0800d43c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d43c:	b580      	push	{r7, lr}
 800d43e:	b082      	sub	sp, #8
 800d440:	af00      	add	r7, sp, #0
 800d442:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d444:	f000 f852 	bl	800d4ec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d448:	4b06      	ldr	r3, [pc, #24]	; (800d464 <prvIdleTask+0x28>)
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	2b01      	cmp	r3, #1
 800d44e:	d9f9      	bls.n	800d444 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d450:	4b05      	ldr	r3, [pc, #20]	; (800d468 <prvIdleTask+0x2c>)
 800d452:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d456:	601a      	str	r2, [r3, #0]
 800d458:	f3bf 8f4f 	dsb	sy
 800d45c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d460:	e7f0      	b.n	800d444 <prvIdleTask+0x8>
 800d462:	bf00      	nop
 800d464:	240404b0 	.word	0x240404b0
 800d468:	e000ed04 	.word	0xe000ed04

0800d46c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d46c:	b580      	push	{r7, lr}
 800d46e:	b082      	sub	sp, #8
 800d470:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d472:	2300      	movs	r3, #0
 800d474:	607b      	str	r3, [r7, #4]
 800d476:	e00c      	b.n	800d492 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d478:	687a      	ldr	r2, [r7, #4]
 800d47a:	4613      	mov	r3, r2
 800d47c:	009b      	lsls	r3, r3, #2
 800d47e:	4413      	add	r3, r2
 800d480:	009b      	lsls	r3, r3, #2
 800d482:	4a12      	ldr	r2, [pc, #72]	; (800d4cc <prvInitialiseTaskLists+0x60>)
 800d484:	4413      	add	r3, r2
 800d486:	4618      	mov	r0, r3
 800d488:	f7fe f81a 	bl	800b4c0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	3301      	adds	r3, #1
 800d490:	607b      	str	r3, [r7, #4]
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	2b06      	cmp	r3, #6
 800d496:	d9ef      	bls.n	800d478 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d498:	480d      	ldr	r0, [pc, #52]	; (800d4d0 <prvInitialiseTaskLists+0x64>)
 800d49a:	f7fe f811 	bl	800b4c0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d49e:	480d      	ldr	r0, [pc, #52]	; (800d4d4 <prvInitialiseTaskLists+0x68>)
 800d4a0:	f7fe f80e 	bl	800b4c0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d4a4:	480c      	ldr	r0, [pc, #48]	; (800d4d8 <prvInitialiseTaskLists+0x6c>)
 800d4a6:	f7fe f80b 	bl	800b4c0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d4aa:	480c      	ldr	r0, [pc, #48]	; (800d4dc <prvInitialiseTaskLists+0x70>)
 800d4ac:	f7fe f808 	bl	800b4c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d4b0:	480b      	ldr	r0, [pc, #44]	; (800d4e0 <prvInitialiseTaskLists+0x74>)
 800d4b2:	f7fe f805 	bl	800b4c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d4b6:	4b0b      	ldr	r3, [pc, #44]	; (800d4e4 <prvInitialiseTaskLists+0x78>)
 800d4b8:	4a05      	ldr	r2, [pc, #20]	; (800d4d0 <prvInitialiseTaskLists+0x64>)
 800d4ba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d4bc:	4b0a      	ldr	r3, [pc, #40]	; (800d4e8 <prvInitialiseTaskLists+0x7c>)
 800d4be:	4a05      	ldr	r2, [pc, #20]	; (800d4d4 <prvInitialiseTaskLists+0x68>)
 800d4c0:	601a      	str	r2, [r3, #0]
}
 800d4c2:	bf00      	nop
 800d4c4:	3708      	adds	r7, #8
 800d4c6:	46bd      	mov	sp, r7
 800d4c8:	bd80      	pop	{r7, pc}
 800d4ca:	bf00      	nop
 800d4cc:	240404b0 	.word	0x240404b0
 800d4d0:	2404053c 	.word	0x2404053c
 800d4d4:	24040550 	.word	0x24040550
 800d4d8:	2404056c 	.word	0x2404056c
 800d4dc:	24040580 	.word	0x24040580
 800d4e0:	24040598 	.word	0x24040598
 800d4e4:	24040564 	.word	0x24040564
 800d4e8:	24040568 	.word	0x24040568

0800d4ec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d4ec:	b580      	push	{r7, lr}
 800d4ee:	b082      	sub	sp, #8
 800d4f0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d4f2:	e019      	b.n	800d528 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d4f4:	f7fe f9c2 	bl	800b87c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d4f8:	4b0f      	ldr	r3, [pc, #60]	; (800d538 <prvCheckTasksWaitingTermination+0x4c>)
 800d4fa:	68db      	ldr	r3, [r3, #12]
 800d4fc:	68db      	ldr	r3, [r3, #12]
 800d4fe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	3304      	adds	r3, #4
 800d504:	4618      	mov	r0, r3
 800d506:	f7fe f865 	bl	800b5d4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d50a:	4b0c      	ldr	r3, [pc, #48]	; (800d53c <prvCheckTasksWaitingTermination+0x50>)
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	3b01      	subs	r3, #1
 800d510:	4a0a      	ldr	r2, [pc, #40]	; (800d53c <prvCheckTasksWaitingTermination+0x50>)
 800d512:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d514:	4b0a      	ldr	r3, [pc, #40]	; (800d540 <prvCheckTasksWaitingTermination+0x54>)
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	3b01      	subs	r3, #1
 800d51a:	4a09      	ldr	r2, [pc, #36]	; (800d540 <prvCheckTasksWaitingTermination+0x54>)
 800d51c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d51e:	f7fe f9db 	bl	800b8d8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d522:	6878      	ldr	r0, [r7, #4]
 800d524:	f000 f80e 	bl	800d544 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d528:	4b05      	ldr	r3, [pc, #20]	; (800d540 <prvCheckTasksWaitingTermination+0x54>)
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d1e1      	bne.n	800d4f4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d530:	bf00      	nop
 800d532:	3708      	adds	r7, #8
 800d534:	46bd      	mov	sp, r7
 800d536:	bd80      	pop	{r7, pc}
 800d538:	24040580 	.word	0x24040580
 800d53c:	240405ac 	.word	0x240405ac
 800d540:	24040594 	.word	0x24040594

0800d544 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d544:	b580      	push	{r7, lr}
 800d546:	b084      	sub	sp, #16
 800d548:	af00      	add	r7, sp, #0
 800d54a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d552:	2b00      	cmp	r3, #0
 800d554:	d108      	bne.n	800d568 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d55a:	4618      	mov	r0, r3
 800d55c:	f7fd fe9c 	bl	800b298 <vPortFree>
				vPortFree( pxTCB );
 800d560:	6878      	ldr	r0, [r7, #4]
 800d562:	f7fd fe99 	bl	800b298 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d566:	e017      	b.n	800d598 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d56e:	2b01      	cmp	r3, #1
 800d570:	d103      	bne.n	800d57a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800d572:	6878      	ldr	r0, [r7, #4]
 800d574:	f7fd fe90 	bl	800b298 <vPortFree>
	}
 800d578:	e00e      	b.n	800d598 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d580:	2b02      	cmp	r3, #2
 800d582:	d009      	beq.n	800d598 <prvDeleteTCB+0x54>
 800d584:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d588:	f383 8811 	msr	BASEPRI, r3
 800d58c:	f3bf 8f6f 	isb	sy
 800d590:	f3bf 8f4f 	dsb	sy
 800d594:	60fb      	str	r3, [r7, #12]
 800d596:	e7fe      	b.n	800d596 <prvDeleteTCB+0x52>
	}
 800d598:	bf00      	nop
 800d59a:	3710      	adds	r7, #16
 800d59c:	46bd      	mov	sp, r7
 800d59e:	bd80      	pop	{r7, pc}

0800d5a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d5a0:	b480      	push	{r7}
 800d5a2:	b083      	sub	sp, #12
 800d5a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d5a6:	4b0c      	ldr	r3, [pc, #48]	; (800d5d8 <prvResetNextTaskUnblockTime+0x38>)
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d104      	bne.n	800d5ba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d5b0:	4b0a      	ldr	r3, [pc, #40]	; (800d5dc <prvResetNextTaskUnblockTime+0x3c>)
 800d5b2:	f04f 32ff 	mov.w	r2, #4294967295
 800d5b6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d5b8:	e008      	b.n	800d5cc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d5ba:	4b07      	ldr	r3, [pc, #28]	; (800d5d8 <prvResetNextTaskUnblockTime+0x38>)
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	68db      	ldr	r3, [r3, #12]
 800d5c0:	68db      	ldr	r3, [r3, #12]
 800d5c2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	685b      	ldr	r3, [r3, #4]
 800d5c8:	4a04      	ldr	r2, [pc, #16]	; (800d5dc <prvResetNextTaskUnblockTime+0x3c>)
 800d5ca:	6013      	str	r3, [r2, #0]
}
 800d5cc:	bf00      	nop
 800d5ce:	370c      	adds	r7, #12
 800d5d0:	46bd      	mov	sp, r7
 800d5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d6:	4770      	bx	lr
 800d5d8:	24040564 	.word	0x24040564
 800d5dc:	240405cc 	.word	0x240405cc

0800d5e0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d5e0:	b480      	push	{r7}
 800d5e2:	b083      	sub	sp, #12
 800d5e4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d5e6:	4b0b      	ldr	r3, [pc, #44]	; (800d614 <xTaskGetSchedulerState+0x34>)
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d102      	bne.n	800d5f4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d5ee:	2301      	movs	r3, #1
 800d5f0:	607b      	str	r3, [r7, #4]
 800d5f2:	e008      	b.n	800d606 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d5f4:	4b08      	ldr	r3, [pc, #32]	; (800d618 <xTaskGetSchedulerState+0x38>)
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d102      	bne.n	800d602 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d5fc:	2302      	movs	r3, #2
 800d5fe:	607b      	str	r3, [r7, #4]
 800d600:	e001      	b.n	800d606 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d602:	2300      	movs	r3, #0
 800d604:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d606:	687b      	ldr	r3, [r7, #4]
	}
 800d608:	4618      	mov	r0, r3
 800d60a:	370c      	adds	r7, #12
 800d60c:	46bd      	mov	sp, r7
 800d60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d612:	4770      	bx	lr
 800d614:	240405b8 	.word	0x240405b8
 800d618:	240405d4 	.word	0x240405d4

0800d61c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d61c:	b580      	push	{r7, lr}
 800d61e:	b084      	sub	sp, #16
 800d620:	af00      	add	r7, sp, #0
 800d622:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d628:	2300      	movs	r3, #0
 800d62a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d069      	beq.n	800d706 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d632:	68bb      	ldr	r3, [r7, #8]
 800d634:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d636:	4b36      	ldr	r3, [pc, #216]	; (800d710 <xTaskPriorityInherit+0xf4>)
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d63c:	429a      	cmp	r2, r3
 800d63e:	d259      	bcs.n	800d6f4 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d640:	68bb      	ldr	r3, [r7, #8]
 800d642:	699b      	ldr	r3, [r3, #24]
 800d644:	2b00      	cmp	r3, #0
 800d646:	db06      	blt.n	800d656 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d648:	4b31      	ldr	r3, [pc, #196]	; (800d710 <xTaskPriorityInherit+0xf4>)
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d64e:	f1c3 0207 	rsb	r2, r3, #7
 800d652:	68bb      	ldr	r3, [r7, #8]
 800d654:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d656:	68bb      	ldr	r3, [r7, #8]
 800d658:	6959      	ldr	r1, [r3, #20]
 800d65a:	68bb      	ldr	r3, [r7, #8]
 800d65c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d65e:	4613      	mov	r3, r2
 800d660:	009b      	lsls	r3, r3, #2
 800d662:	4413      	add	r3, r2
 800d664:	009b      	lsls	r3, r3, #2
 800d666:	4a2b      	ldr	r2, [pc, #172]	; (800d714 <xTaskPriorityInherit+0xf8>)
 800d668:	4413      	add	r3, r2
 800d66a:	4299      	cmp	r1, r3
 800d66c:	d13a      	bne.n	800d6e4 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d66e:	68bb      	ldr	r3, [r7, #8]
 800d670:	3304      	adds	r3, #4
 800d672:	4618      	mov	r0, r3
 800d674:	f7fd ffae 	bl	800b5d4 <uxListRemove>
 800d678:	4603      	mov	r3, r0
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d115      	bne.n	800d6aa <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800d67e:	68bb      	ldr	r3, [r7, #8]
 800d680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d682:	4924      	ldr	r1, [pc, #144]	; (800d714 <xTaskPriorityInherit+0xf8>)
 800d684:	4613      	mov	r3, r2
 800d686:	009b      	lsls	r3, r3, #2
 800d688:	4413      	add	r3, r2
 800d68a:	009b      	lsls	r3, r3, #2
 800d68c:	440b      	add	r3, r1
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	2b00      	cmp	r3, #0
 800d692:	d10a      	bne.n	800d6aa <xTaskPriorityInherit+0x8e>
 800d694:	68bb      	ldr	r3, [r7, #8]
 800d696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d698:	2201      	movs	r2, #1
 800d69a:	fa02 f303 	lsl.w	r3, r2, r3
 800d69e:	43da      	mvns	r2, r3
 800d6a0:	4b1d      	ldr	r3, [pc, #116]	; (800d718 <xTaskPriorityInherit+0xfc>)
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	4013      	ands	r3, r2
 800d6a6:	4a1c      	ldr	r2, [pc, #112]	; (800d718 <xTaskPriorityInherit+0xfc>)
 800d6a8:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d6aa:	4b19      	ldr	r3, [pc, #100]	; (800d710 <xTaskPriorityInherit+0xf4>)
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6b0:	68bb      	ldr	r3, [r7, #8]
 800d6b2:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d6b4:	68bb      	ldr	r3, [r7, #8]
 800d6b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6b8:	2201      	movs	r2, #1
 800d6ba:	409a      	lsls	r2, r3
 800d6bc:	4b16      	ldr	r3, [pc, #88]	; (800d718 <xTaskPriorityInherit+0xfc>)
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	4313      	orrs	r3, r2
 800d6c2:	4a15      	ldr	r2, [pc, #84]	; (800d718 <xTaskPriorityInherit+0xfc>)
 800d6c4:	6013      	str	r3, [r2, #0]
 800d6c6:	68bb      	ldr	r3, [r7, #8]
 800d6c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6ca:	4613      	mov	r3, r2
 800d6cc:	009b      	lsls	r3, r3, #2
 800d6ce:	4413      	add	r3, r2
 800d6d0:	009b      	lsls	r3, r3, #2
 800d6d2:	4a10      	ldr	r2, [pc, #64]	; (800d714 <xTaskPriorityInherit+0xf8>)
 800d6d4:	441a      	add	r2, r3
 800d6d6:	68bb      	ldr	r3, [r7, #8]
 800d6d8:	3304      	adds	r3, #4
 800d6da:	4619      	mov	r1, r3
 800d6dc:	4610      	mov	r0, r2
 800d6de:	f7fd ff1c 	bl	800b51a <vListInsertEnd>
 800d6e2:	e004      	b.n	800d6ee <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d6e4:	4b0a      	ldr	r3, [pc, #40]	; (800d710 <xTaskPriorityInherit+0xf4>)
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6ea:	68bb      	ldr	r3, [r7, #8]
 800d6ec:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d6ee:	2301      	movs	r3, #1
 800d6f0:	60fb      	str	r3, [r7, #12]
 800d6f2:	e008      	b.n	800d706 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d6f4:	68bb      	ldr	r3, [r7, #8]
 800d6f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d6f8:	4b05      	ldr	r3, [pc, #20]	; (800d710 <xTaskPriorityInherit+0xf4>)
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6fe:	429a      	cmp	r2, r3
 800d700:	d201      	bcs.n	800d706 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d702:	2301      	movs	r3, #1
 800d704:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d706:	68fb      	ldr	r3, [r7, #12]
	}
 800d708:	4618      	mov	r0, r3
 800d70a:	3710      	adds	r7, #16
 800d70c:	46bd      	mov	sp, r7
 800d70e:	bd80      	pop	{r7, pc}
 800d710:	240404ac 	.word	0x240404ac
 800d714:	240404b0 	.word	0x240404b0
 800d718:	240405b4 	.word	0x240405b4

0800d71c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d71c:	b580      	push	{r7, lr}
 800d71e:	b086      	sub	sp, #24
 800d720:	af00      	add	r7, sp, #0
 800d722:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d728:	2300      	movs	r3, #0
 800d72a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d06c      	beq.n	800d80c <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d732:	4b39      	ldr	r3, [pc, #228]	; (800d818 <xTaskPriorityDisinherit+0xfc>)
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	693a      	ldr	r2, [r7, #16]
 800d738:	429a      	cmp	r2, r3
 800d73a:	d009      	beq.n	800d750 <xTaskPriorityDisinherit+0x34>
 800d73c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d740:	f383 8811 	msr	BASEPRI, r3
 800d744:	f3bf 8f6f 	isb	sy
 800d748:	f3bf 8f4f 	dsb	sy
 800d74c:	60fb      	str	r3, [r7, #12]
 800d74e:	e7fe      	b.n	800d74e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800d750:	693b      	ldr	r3, [r7, #16]
 800d752:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d754:	2b00      	cmp	r3, #0
 800d756:	d109      	bne.n	800d76c <xTaskPriorityDisinherit+0x50>
 800d758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d75c:	f383 8811 	msr	BASEPRI, r3
 800d760:	f3bf 8f6f 	isb	sy
 800d764:	f3bf 8f4f 	dsb	sy
 800d768:	60bb      	str	r3, [r7, #8]
 800d76a:	e7fe      	b.n	800d76a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800d76c:	693b      	ldr	r3, [r7, #16]
 800d76e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d770:	1e5a      	subs	r2, r3, #1
 800d772:	693b      	ldr	r3, [r7, #16]
 800d774:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d776:	693b      	ldr	r3, [r7, #16]
 800d778:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d77a:	693b      	ldr	r3, [r7, #16]
 800d77c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d77e:	429a      	cmp	r2, r3
 800d780:	d044      	beq.n	800d80c <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d782:	693b      	ldr	r3, [r7, #16]
 800d784:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d786:	2b00      	cmp	r3, #0
 800d788:	d140      	bne.n	800d80c <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d78a:	693b      	ldr	r3, [r7, #16]
 800d78c:	3304      	adds	r3, #4
 800d78e:	4618      	mov	r0, r3
 800d790:	f7fd ff20 	bl	800b5d4 <uxListRemove>
 800d794:	4603      	mov	r3, r0
 800d796:	2b00      	cmp	r3, #0
 800d798:	d115      	bne.n	800d7c6 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d79a:	693b      	ldr	r3, [r7, #16]
 800d79c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d79e:	491f      	ldr	r1, [pc, #124]	; (800d81c <xTaskPriorityDisinherit+0x100>)
 800d7a0:	4613      	mov	r3, r2
 800d7a2:	009b      	lsls	r3, r3, #2
 800d7a4:	4413      	add	r3, r2
 800d7a6:	009b      	lsls	r3, r3, #2
 800d7a8:	440b      	add	r3, r1
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d10a      	bne.n	800d7c6 <xTaskPriorityDisinherit+0xaa>
 800d7b0:	693b      	ldr	r3, [r7, #16]
 800d7b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7b4:	2201      	movs	r2, #1
 800d7b6:	fa02 f303 	lsl.w	r3, r2, r3
 800d7ba:	43da      	mvns	r2, r3
 800d7bc:	4b18      	ldr	r3, [pc, #96]	; (800d820 <xTaskPriorityDisinherit+0x104>)
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	4013      	ands	r3, r2
 800d7c2:	4a17      	ldr	r2, [pc, #92]	; (800d820 <xTaskPriorityDisinherit+0x104>)
 800d7c4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d7c6:	693b      	ldr	r3, [r7, #16]
 800d7c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d7ca:	693b      	ldr	r3, [r7, #16]
 800d7cc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d7ce:	693b      	ldr	r3, [r7, #16]
 800d7d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7d2:	f1c3 0207 	rsb	r2, r3, #7
 800d7d6:	693b      	ldr	r3, [r7, #16]
 800d7d8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d7da:	693b      	ldr	r3, [r7, #16]
 800d7dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7de:	2201      	movs	r2, #1
 800d7e0:	409a      	lsls	r2, r3
 800d7e2:	4b0f      	ldr	r3, [pc, #60]	; (800d820 <xTaskPriorityDisinherit+0x104>)
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	4313      	orrs	r3, r2
 800d7e8:	4a0d      	ldr	r2, [pc, #52]	; (800d820 <xTaskPriorityDisinherit+0x104>)
 800d7ea:	6013      	str	r3, [r2, #0]
 800d7ec:	693b      	ldr	r3, [r7, #16]
 800d7ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7f0:	4613      	mov	r3, r2
 800d7f2:	009b      	lsls	r3, r3, #2
 800d7f4:	4413      	add	r3, r2
 800d7f6:	009b      	lsls	r3, r3, #2
 800d7f8:	4a08      	ldr	r2, [pc, #32]	; (800d81c <xTaskPriorityDisinherit+0x100>)
 800d7fa:	441a      	add	r2, r3
 800d7fc:	693b      	ldr	r3, [r7, #16]
 800d7fe:	3304      	adds	r3, #4
 800d800:	4619      	mov	r1, r3
 800d802:	4610      	mov	r0, r2
 800d804:	f7fd fe89 	bl	800b51a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d808:	2301      	movs	r3, #1
 800d80a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d80c:	697b      	ldr	r3, [r7, #20]
	}
 800d80e:	4618      	mov	r0, r3
 800d810:	3718      	adds	r7, #24
 800d812:	46bd      	mov	sp, r7
 800d814:	bd80      	pop	{r7, pc}
 800d816:	bf00      	nop
 800d818:	240404ac 	.word	0x240404ac
 800d81c:	240404b0 	.word	0x240404b0
 800d820:	240405b4 	.word	0x240405b4

0800d824 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d824:	b580      	push	{r7, lr}
 800d826:	b088      	sub	sp, #32
 800d828:	af00      	add	r7, sp, #0
 800d82a:	6078      	str	r0, [r7, #4]
 800d82c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d832:	2301      	movs	r3, #1
 800d834:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	2b00      	cmp	r3, #0
 800d83a:	f000 8081 	beq.w	800d940 <vTaskPriorityDisinheritAfterTimeout+0x11c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d83e:	69bb      	ldr	r3, [r7, #24]
 800d840:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d842:	2b00      	cmp	r3, #0
 800d844:	d109      	bne.n	800d85a <vTaskPriorityDisinheritAfterTimeout+0x36>
 800d846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d84a:	f383 8811 	msr	BASEPRI, r3
 800d84e:	f3bf 8f6f 	isb	sy
 800d852:	f3bf 8f4f 	dsb	sy
 800d856:	60fb      	str	r3, [r7, #12]
 800d858:	e7fe      	b.n	800d858 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d85a:	69bb      	ldr	r3, [r7, #24]
 800d85c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d85e:	683a      	ldr	r2, [r7, #0]
 800d860:	429a      	cmp	r2, r3
 800d862:	d902      	bls.n	800d86a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d864:	683b      	ldr	r3, [r7, #0]
 800d866:	61fb      	str	r3, [r7, #28]
 800d868:	e002      	b.n	800d870 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d86a:	69bb      	ldr	r3, [r7, #24]
 800d86c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d86e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d870:	69bb      	ldr	r3, [r7, #24]
 800d872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d874:	69fa      	ldr	r2, [r7, #28]
 800d876:	429a      	cmp	r2, r3
 800d878:	d062      	beq.n	800d940 <vTaskPriorityDisinheritAfterTimeout+0x11c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d87a:	69bb      	ldr	r3, [r7, #24]
 800d87c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d87e:	697a      	ldr	r2, [r7, #20]
 800d880:	429a      	cmp	r2, r3
 800d882:	d15d      	bne.n	800d940 <vTaskPriorityDisinheritAfterTimeout+0x11c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d884:	4b30      	ldr	r3, [pc, #192]	; (800d948 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	69ba      	ldr	r2, [r7, #24]
 800d88a:	429a      	cmp	r2, r3
 800d88c:	d109      	bne.n	800d8a2 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 800d88e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d892:	f383 8811 	msr	BASEPRI, r3
 800d896:	f3bf 8f6f 	isb	sy
 800d89a:	f3bf 8f4f 	dsb	sy
 800d89e:	60bb      	str	r3, [r7, #8]
 800d8a0:	e7fe      	b.n	800d8a0 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d8a2:	69bb      	ldr	r3, [r7, #24]
 800d8a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8a6:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d8a8:	69bb      	ldr	r3, [r7, #24]
 800d8aa:	69fa      	ldr	r2, [r7, #28]
 800d8ac:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d8ae:	69bb      	ldr	r3, [r7, #24]
 800d8b0:	699b      	ldr	r3, [r3, #24]
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	db04      	blt.n	800d8c0 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d8b6:	69fb      	ldr	r3, [r7, #28]
 800d8b8:	f1c3 0207 	rsb	r2, r3, #7
 800d8bc:	69bb      	ldr	r3, [r7, #24]
 800d8be:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d8c0:	69bb      	ldr	r3, [r7, #24]
 800d8c2:	6959      	ldr	r1, [r3, #20]
 800d8c4:	693a      	ldr	r2, [r7, #16]
 800d8c6:	4613      	mov	r3, r2
 800d8c8:	009b      	lsls	r3, r3, #2
 800d8ca:	4413      	add	r3, r2
 800d8cc:	009b      	lsls	r3, r3, #2
 800d8ce:	4a1f      	ldr	r2, [pc, #124]	; (800d94c <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800d8d0:	4413      	add	r3, r2
 800d8d2:	4299      	cmp	r1, r3
 800d8d4:	d134      	bne.n	800d940 <vTaskPriorityDisinheritAfterTimeout+0x11c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d8d6:	69bb      	ldr	r3, [r7, #24]
 800d8d8:	3304      	adds	r3, #4
 800d8da:	4618      	mov	r0, r3
 800d8dc:	f7fd fe7a 	bl	800b5d4 <uxListRemove>
 800d8e0:	4603      	mov	r3, r0
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d115      	bne.n	800d912 <vTaskPriorityDisinheritAfterTimeout+0xee>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d8e6:	69bb      	ldr	r3, [r7, #24]
 800d8e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8ea:	4918      	ldr	r1, [pc, #96]	; (800d94c <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800d8ec:	4613      	mov	r3, r2
 800d8ee:	009b      	lsls	r3, r3, #2
 800d8f0:	4413      	add	r3, r2
 800d8f2:	009b      	lsls	r3, r3, #2
 800d8f4:	440b      	add	r3, r1
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d10a      	bne.n	800d912 <vTaskPriorityDisinheritAfterTimeout+0xee>
 800d8fc:	69bb      	ldr	r3, [r7, #24]
 800d8fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d900:	2201      	movs	r2, #1
 800d902:	fa02 f303 	lsl.w	r3, r2, r3
 800d906:	43da      	mvns	r2, r3
 800d908:	4b11      	ldr	r3, [pc, #68]	; (800d950 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	4013      	ands	r3, r2
 800d90e:	4a10      	ldr	r2, [pc, #64]	; (800d950 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800d910:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d912:	69bb      	ldr	r3, [r7, #24]
 800d914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d916:	2201      	movs	r2, #1
 800d918:	409a      	lsls	r2, r3
 800d91a:	4b0d      	ldr	r3, [pc, #52]	; (800d950 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	4313      	orrs	r3, r2
 800d920:	4a0b      	ldr	r2, [pc, #44]	; (800d950 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800d922:	6013      	str	r3, [r2, #0]
 800d924:	69bb      	ldr	r3, [r7, #24]
 800d926:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d928:	4613      	mov	r3, r2
 800d92a:	009b      	lsls	r3, r3, #2
 800d92c:	4413      	add	r3, r2
 800d92e:	009b      	lsls	r3, r3, #2
 800d930:	4a06      	ldr	r2, [pc, #24]	; (800d94c <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800d932:	441a      	add	r2, r3
 800d934:	69bb      	ldr	r3, [r7, #24]
 800d936:	3304      	adds	r3, #4
 800d938:	4619      	mov	r1, r3
 800d93a:	4610      	mov	r0, r2
 800d93c:	f7fd fded 	bl	800b51a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d940:	bf00      	nop
 800d942:	3720      	adds	r7, #32
 800d944:	46bd      	mov	sp, r7
 800d946:	bd80      	pop	{r7, pc}
 800d948:	240404ac 	.word	0x240404ac
 800d94c:	240404b0 	.word	0x240404b0
 800d950:	240405b4 	.word	0x240405b4

0800d954 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d954:	b480      	push	{r7}
 800d956:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d958:	4b07      	ldr	r3, [pc, #28]	; (800d978 <pvTaskIncrementMutexHeldCount+0x24>)
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d004      	beq.n	800d96a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d960:	4b05      	ldr	r3, [pc, #20]	; (800d978 <pvTaskIncrementMutexHeldCount+0x24>)
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d966:	3201      	adds	r2, #1
 800d968:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800d96a:	4b03      	ldr	r3, [pc, #12]	; (800d978 <pvTaskIncrementMutexHeldCount+0x24>)
 800d96c:	681b      	ldr	r3, [r3, #0]
	}
 800d96e:	4618      	mov	r0, r3
 800d970:	46bd      	mov	sp, r7
 800d972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d976:	4770      	bx	lr
 800d978:	240404ac 	.word	0x240404ac

0800d97c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d97c:	b580      	push	{r7, lr}
 800d97e:	b084      	sub	sp, #16
 800d980:	af00      	add	r7, sp, #0
 800d982:	6078      	str	r0, [r7, #4]
 800d984:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d986:	4b29      	ldr	r3, [pc, #164]	; (800da2c <prvAddCurrentTaskToDelayedList+0xb0>)
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d98c:	4b28      	ldr	r3, [pc, #160]	; (800da30 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	3304      	adds	r3, #4
 800d992:	4618      	mov	r0, r3
 800d994:	f7fd fe1e 	bl	800b5d4 <uxListRemove>
 800d998:	4603      	mov	r3, r0
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d10b      	bne.n	800d9b6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800d99e:	4b24      	ldr	r3, [pc, #144]	; (800da30 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9a4:	2201      	movs	r2, #1
 800d9a6:	fa02 f303 	lsl.w	r3, r2, r3
 800d9aa:	43da      	mvns	r2, r3
 800d9ac:	4b21      	ldr	r3, [pc, #132]	; (800da34 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	4013      	ands	r3, r2
 800d9b2:	4a20      	ldr	r2, [pc, #128]	; (800da34 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d9b4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9bc:	d10a      	bne.n	800d9d4 <prvAddCurrentTaskToDelayedList+0x58>
 800d9be:	683b      	ldr	r3, [r7, #0]
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d007      	beq.n	800d9d4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d9c4:	4b1a      	ldr	r3, [pc, #104]	; (800da30 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	3304      	adds	r3, #4
 800d9ca:	4619      	mov	r1, r3
 800d9cc:	481a      	ldr	r0, [pc, #104]	; (800da38 <prvAddCurrentTaskToDelayedList+0xbc>)
 800d9ce:	f7fd fda4 	bl	800b51a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d9d2:	e026      	b.n	800da22 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d9d4:	68fa      	ldr	r2, [r7, #12]
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	4413      	add	r3, r2
 800d9da:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d9dc:	4b14      	ldr	r3, [pc, #80]	; (800da30 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	68ba      	ldr	r2, [r7, #8]
 800d9e2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d9e4:	68ba      	ldr	r2, [r7, #8]
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	429a      	cmp	r2, r3
 800d9ea:	d209      	bcs.n	800da00 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d9ec:	4b13      	ldr	r3, [pc, #76]	; (800da3c <prvAddCurrentTaskToDelayedList+0xc0>)
 800d9ee:	681a      	ldr	r2, [r3, #0]
 800d9f0:	4b0f      	ldr	r3, [pc, #60]	; (800da30 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	3304      	adds	r3, #4
 800d9f6:	4619      	mov	r1, r3
 800d9f8:	4610      	mov	r0, r2
 800d9fa:	f7fd fdb2 	bl	800b562 <vListInsert>
}
 800d9fe:	e010      	b.n	800da22 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800da00:	4b0f      	ldr	r3, [pc, #60]	; (800da40 <prvAddCurrentTaskToDelayedList+0xc4>)
 800da02:	681a      	ldr	r2, [r3, #0]
 800da04:	4b0a      	ldr	r3, [pc, #40]	; (800da30 <prvAddCurrentTaskToDelayedList+0xb4>)
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	3304      	adds	r3, #4
 800da0a:	4619      	mov	r1, r3
 800da0c:	4610      	mov	r0, r2
 800da0e:	f7fd fda8 	bl	800b562 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800da12:	4b0c      	ldr	r3, [pc, #48]	; (800da44 <prvAddCurrentTaskToDelayedList+0xc8>)
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	68ba      	ldr	r2, [r7, #8]
 800da18:	429a      	cmp	r2, r3
 800da1a:	d202      	bcs.n	800da22 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800da1c:	4a09      	ldr	r2, [pc, #36]	; (800da44 <prvAddCurrentTaskToDelayedList+0xc8>)
 800da1e:	68bb      	ldr	r3, [r7, #8]
 800da20:	6013      	str	r3, [r2, #0]
}
 800da22:	bf00      	nop
 800da24:	3710      	adds	r7, #16
 800da26:	46bd      	mov	sp, r7
 800da28:	bd80      	pop	{r7, pc}
 800da2a:	bf00      	nop
 800da2c:	240405b0 	.word	0x240405b0
 800da30:	240404ac 	.word	0x240404ac
 800da34:	240405b4 	.word	0x240405b4
 800da38:	24040598 	.word	0x24040598
 800da3c:	24040568 	.word	0x24040568
 800da40:	24040564 	.word	0x24040564
 800da44:	240405cc 	.word	0x240405cc

0800da48 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800da48:	b580      	push	{r7, lr}
 800da4a:	b084      	sub	sp, #16
 800da4c:	af00      	add	r7, sp, #0
 800da4e:	6078      	str	r0, [r7, #4]
 800da50:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800da52:	683b      	ldr	r3, [r7, #0]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	330c      	adds	r3, #12
 800da58:	461a      	mov	r2, r3
 800da5a:	6839      	ldr	r1, [r7, #0]
 800da5c:	6878      	ldr	r0, [r7, #4]
 800da5e:	f00e f9c7 	bl	801bdf0 <tcpip_send_msg_wait_sem>
 800da62:	4603      	mov	r3, r0
 800da64:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800da66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d103      	bne.n	800da76 <netconn_apimsg+0x2e>
    return apimsg->err;
 800da6e:	683b      	ldr	r3, [r7, #0]
 800da70:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800da74:	e001      	b.n	800da7a <netconn_apimsg+0x32>
  }
  return err;
 800da76:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800da7a:	4618      	mov	r0, r3
 800da7c:	3710      	adds	r7, #16
 800da7e:	46bd      	mov	sp, r7
 800da80:	bd80      	pop	{r7, pc}
	...

0800da84 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800da84:	b580      	push	{r7, lr}
 800da86:	b08c      	sub	sp, #48	; 0x30
 800da88:	af00      	add	r7, sp, #0
 800da8a:	4603      	mov	r3, r0
 800da8c:	603a      	str	r2, [r7, #0]
 800da8e:	71fb      	strb	r3, [r7, #7]
 800da90:	460b      	mov	r3, r1
 800da92:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800da94:	79fb      	ldrb	r3, [r7, #7]
 800da96:	6839      	ldr	r1, [r7, #0]
 800da98:	4618      	mov	r0, r3
 800da9a:	f001 f855 	bl	800eb48 <netconn_alloc>
 800da9e:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 800daa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d054      	beq.n	800db50 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800daa6:	79bb      	ldrb	r3, [r7, #6]
 800daa8:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800daaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daac:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800daae:	f107 0308 	add.w	r3, r7, #8
 800dab2:	4619      	mov	r1, r3
 800dab4:	4829      	ldr	r0, [pc, #164]	; (800db5c <netconn_new_with_proto_and_callback+0xd8>)
 800dab6:	f7ff ffc7 	bl	800da48 <netconn_apimsg>
 800daba:	4603      	mov	r3, r0
 800dabc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 800dac0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d043      	beq.n	800db50 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800dac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daca:	685b      	ldr	r3, [r3, #4]
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d005      	beq.n	800dadc <netconn_new_with_proto_and_callback+0x58>
 800dad0:	4b23      	ldr	r3, [pc, #140]	; (800db60 <netconn_new_with_proto_and_callback+0xdc>)
 800dad2:	22a3      	movs	r2, #163	; 0xa3
 800dad4:	4923      	ldr	r1, [pc, #140]	; (800db64 <netconn_new_with_proto_and_callback+0xe0>)
 800dad6:	4824      	ldr	r0, [pc, #144]	; (800db68 <netconn_new_with_proto_and_callback+0xe4>)
 800dad8:	f013 fa3a 	bl	8020f50 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800dadc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dade:	3310      	adds	r3, #16
 800dae0:	4618      	mov	r0, r3
 800dae2:	f007 fee0 	bl	80158a6 <sys_mbox_valid>
 800dae6:	4603      	mov	r3, r0
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d105      	bne.n	800daf8 <netconn_new_with_proto_and_callback+0x74>
 800daec:	4b1c      	ldr	r3, [pc, #112]	; (800db60 <netconn_new_with_proto_and_callback+0xdc>)
 800daee:	22a4      	movs	r2, #164	; 0xa4
 800daf0:	491e      	ldr	r1, [pc, #120]	; (800db6c <netconn_new_with_proto_and_callback+0xe8>)
 800daf2:	481d      	ldr	r0, [pc, #116]	; (800db68 <netconn_new_with_proto_and_callback+0xe4>)
 800daf4:	f013 fa2c 	bl	8020f50 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800daf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dafa:	3314      	adds	r3, #20
 800dafc:	4618      	mov	r0, r3
 800dafe:	f007 fed2 	bl	80158a6 <sys_mbox_valid>
 800db02:	4603      	mov	r3, r0
 800db04:	2b00      	cmp	r3, #0
 800db06:	d005      	beq.n	800db14 <netconn_new_with_proto_and_callback+0x90>
 800db08:	4b15      	ldr	r3, [pc, #84]	; (800db60 <netconn_new_with_proto_and_callback+0xdc>)
 800db0a:	22a6      	movs	r2, #166	; 0xa6
 800db0c:	4918      	ldr	r1, [pc, #96]	; (800db70 <netconn_new_with_proto_and_callback+0xec>)
 800db0e:	4816      	ldr	r0, [pc, #88]	; (800db68 <netconn_new_with_proto_and_callback+0xe4>)
 800db10:	f013 fa1e 	bl	8020f50 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800db14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db16:	330c      	adds	r3, #12
 800db18:	4618      	mov	r0, r3
 800db1a:	f007 ff55 	bl	80159c8 <sys_sem_valid>
 800db1e:	4603      	mov	r3, r0
 800db20:	2b00      	cmp	r3, #0
 800db22:	d105      	bne.n	800db30 <netconn_new_with_proto_and_callback+0xac>
 800db24:	4b0e      	ldr	r3, [pc, #56]	; (800db60 <netconn_new_with_proto_and_callback+0xdc>)
 800db26:	22a9      	movs	r2, #169	; 0xa9
 800db28:	4912      	ldr	r1, [pc, #72]	; (800db74 <netconn_new_with_proto_and_callback+0xf0>)
 800db2a:	480f      	ldr	r0, [pc, #60]	; (800db68 <netconn_new_with_proto_and_callback+0xe4>)
 800db2c:	f013 fa10 	bl	8020f50 <iprintf>
      sys_sem_free(&conn->op_completed);
 800db30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db32:	330c      	adds	r3, #12
 800db34:	4618      	mov	r0, r3
 800db36:	f007 ff3a 	bl	80159ae <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800db3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db3c:	3310      	adds	r3, #16
 800db3e:	4618      	mov	r0, r3
 800db40:	f007 fe2a 	bl	8015798 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800db44:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800db46:	2007      	movs	r0, #7
 800db48:	f005 fb1e 	bl	8013188 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800db4c:	2300      	movs	r3, #0
 800db4e:	e000      	b.n	800db52 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800db50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800db52:	4618      	mov	r0, r3
 800db54:	3730      	adds	r7, #48	; 0x30
 800db56:	46bd      	mov	sp, r7
 800db58:	bd80      	pop	{r7, pc}
 800db5a:	bf00      	nop
 800db5c:	0800eb1d 	.word	0x0800eb1d
 800db60:	080231e0 	.word	0x080231e0
 800db64:	08023234 	.word	0x08023234
 800db68:	08023258 	.word	0x08023258
 800db6c:	08023280 	.word	0x08023280
 800db70:	08023298 	.word	0x08023298
 800db74:	080232bc 	.word	0x080232bc

0800db78 <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800db78:	b580      	push	{r7, lr}
 800db7a:	b08c      	sub	sp, #48	; 0x30
 800db7c:	af00      	add	r7, sp, #0
 800db7e:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	2b00      	cmp	r3, #0
 800db84:	d101      	bne.n	800db8a <netconn_prepare_delete+0x12>
    return ERR_OK;
 800db86:	2300      	movs	r3, #0
 800db88:	e014      	b.n	800dbb4 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800db8e:	2329      	movs	r3, #41	; 0x29
 800db90:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800db92:	f107 030c 	add.w	r3, r7, #12
 800db96:	4619      	mov	r1, r3
 800db98:	4808      	ldr	r0, [pc, #32]	; (800dbbc <netconn_prepare_delete+0x44>)
 800db9a:	f7ff ff55 	bl	800da48 <netconn_apimsg>
 800db9e:	4603      	mov	r3, r0
 800dba0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800dba4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d002      	beq.n	800dbb2 <netconn_prepare_delete+0x3a>
    return err;
 800dbac:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800dbb0:	e000      	b.n	800dbb4 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 800dbb2:	2300      	movs	r3, #0
}
 800dbb4:	4618      	mov	r0, r3
 800dbb6:	3730      	adds	r7, #48	; 0x30
 800dbb8:	46bd      	mov	sp, r7
 800dbba:	bd80      	pop	{r7, pc}
 800dbbc:	0800f081 	.word	0x0800f081

0800dbc0 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800dbc0:	b580      	push	{r7, lr}
 800dbc2:	b084      	sub	sp, #16
 800dbc4:	af00      	add	r7, sp, #0
 800dbc6:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d101      	bne.n	800dbd2 <netconn_delete+0x12>
    return ERR_OK;
 800dbce:	2300      	movs	r3, #0
 800dbd0:	e00d      	b.n	800dbee <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 800dbd2:	6878      	ldr	r0, [r7, #4]
 800dbd4:	f7ff ffd0 	bl	800db78 <netconn_prepare_delete>
 800dbd8:	4603      	mov	r3, r0
 800dbda:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 800dbdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d102      	bne.n	800dbea <netconn_delete+0x2a>
    netconn_free(conn);
 800dbe4:	6878      	ldr	r0, [r7, #4]
 800dbe6:	f001 f81d 	bl	800ec24 <netconn_free>
  }
  return err;
 800dbea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dbee:	4618      	mov	r0, r3
 800dbf0:	3710      	adds	r7, #16
 800dbf2:	46bd      	mov	sp, r7
 800dbf4:	bd80      	pop	{r7, pc}
	...

0800dbf8 <netconn_getaddr>:
 * @return ERR_CONN for invalid connections
 *         ERR_OK if the information was retrieved
 */
err_t
netconn_getaddr(struct netconn *conn, ip_addr_t *addr, u16_t *port, u8_t local)
{
 800dbf8:	b580      	push	{r7, lr}
 800dbfa:	b08e      	sub	sp, #56	; 0x38
 800dbfc:	af00      	add	r7, sp, #0
 800dbfe:	60f8      	str	r0, [r7, #12]
 800dc00:	60b9      	str	r1, [r7, #8]
 800dc02:	607a      	str	r2, [r7, #4]
 800dc04:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_getaddr: invalid conn", (conn != NULL), return ERR_ARG;);
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d109      	bne.n	800dc20 <netconn_getaddr+0x28>
 800dc0c:	4b1d      	ldr	r3, [pc, #116]	; (800dc84 <netconn_getaddr+0x8c>)
 800dc0e:	f44f 7289 	mov.w	r2, #274	; 0x112
 800dc12:	491d      	ldr	r1, [pc, #116]	; (800dc88 <netconn_getaddr+0x90>)
 800dc14:	481d      	ldr	r0, [pc, #116]	; (800dc8c <netconn_getaddr+0x94>)
 800dc16:	f013 f99b 	bl	8020f50 <iprintf>
 800dc1a:	f06f 030f 	mvn.w	r3, #15
 800dc1e:	e02d      	b.n	800dc7c <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid addr", (addr != NULL), return ERR_ARG;);
 800dc20:	68bb      	ldr	r3, [r7, #8]
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d109      	bne.n	800dc3a <netconn_getaddr+0x42>
 800dc26:	4b17      	ldr	r3, [pc, #92]	; (800dc84 <netconn_getaddr+0x8c>)
 800dc28:	f240 1213 	movw	r2, #275	; 0x113
 800dc2c:	4918      	ldr	r1, [pc, #96]	; (800dc90 <netconn_getaddr+0x98>)
 800dc2e:	4817      	ldr	r0, [pc, #92]	; (800dc8c <netconn_getaddr+0x94>)
 800dc30:	f013 f98e 	bl	8020f50 <iprintf>
 800dc34:	f06f 030f 	mvn.w	r3, #15
 800dc38:	e020      	b.n	800dc7c <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid port", (port != NULL), return ERR_ARG;);
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d109      	bne.n	800dc54 <netconn_getaddr+0x5c>
 800dc40:	4b10      	ldr	r3, [pc, #64]	; (800dc84 <netconn_getaddr+0x8c>)
 800dc42:	f44f 728a 	mov.w	r2, #276	; 0x114
 800dc46:	4913      	ldr	r1, [pc, #76]	; (800dc94 <netconn_getaddr+0x9c>)
 800dc48:	4810      	ldr	r0, [pc, #64]	; (800dc8c <netconn_getaddr+0x94>)
 800dc4a:	f013 f981 	bl	8020f50 <iprintf>
 800dc4e:	f06f 030f 	mvn.w	r3, #15
 800dc52:	e013      	b.n	800dc7c <netconn_getaddr+0x84>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.ad.local = local;
 800dc58:	78fb      	ldrb	r3, [r7, #3]
 800dc5a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
#if LWIP_MPU_COMPATIBLE
  err = netconn_apimsg(lwip_netconn_do_getaddr, &API_MSG_VAR_REF(msg));
  *addr = msg->msg.ad.ipaddr;
  *port = msg->msg.ad.port;
#else /* LWIP_MPU_COMPATIBLE */
  msg.msg.ad.ipaddr = addr;
 800dc5e:	68bb      	ldr	r3, [r7, #8]
 800dc60:	61fb      	str	r3, [r7, #28]
  msg.msg.ad.port = port;
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	623b      	str	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_getaddr, &msg);
 800dc66:	f107 0314 	add.w	r3, r7, #20
 800dc6a:	4619      	mov	r1, r3
 800dc6c:	480a      	ldr	r0, [pc, #40]	; (800dc98 <netconn_getaddr+0xa0>)
 800dc6e:	f7ff feeb 	bl	800da48 <netconn_apimsg>
 800dc72:	4603      	mov	r3, r0
 800dc74:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif /* LWIP_MPU_COMPATIBLE */
  API_MSG_VAR_FREE(msg);

  return err;
 800dc78:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800dc7c:	4618      	mov	r0, r3
 800dc7e:	3738      	adds	r7, #56	; 0x38
 800dc80:	46bd      	mov	sp, r7
 800dc82:	bd80      	pop	{r7, pc}
 800dc84:	080231e0 	.word	0x080231e0
 800dc88:	080232d8 	.word	0x080232d8
 800dc8c:	08023258 	.word	0x08023258
 800dc90:	080232f8 	.word	0x080232f8
 800dc94:	08023318 	.word	0x08023318
 800dc98:	0800fad9 	.word	0x0800fad9

0800dc9c <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800dc9c:	b580      	push	{r7, lr}
 800dc9e:	b08e      	sub	sp, #56	; 0x38
 800dca0:	af00      	add	r7, sp, #0
 800dca2:	60f8      	str	r0, [r7, #12]
 800dca4:	60b9      	str	r1, [r7, #8]
 800dca6:	4613      	mov	r3, r2
 800dca8:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d109      	bne.n	800dcc4 <netconn_connect+0x28>
 800dcb0:	4b11      	ldr	r3, [pc, #68]	; (800dcf8 <netconn_connect+0x5c>)
 800dcb2:	f44f 72bf 	mov.w	r2, #382	; 0x17e
 800dcb6:	4911      	ldr	r1, [pc, #68]	; (800dcfc <netconn_connect+0x60>)
 800dcb8:	4811      	ldr	r0, [pc, #68]	; (800dd00 <netconn_connect+0x64>)
 800dcba:	f013 f949 	bl	8020f50 <iprintf>
 800dcbe:	f06f 030f 	mvn.w	r3, #15
 800dcc2:	e015      	b.n	800dcf0 <netconn_connect+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800dcc4:	68bb      	ldr	r3, [r7, #8]
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d101      	bne.n	800dcce <netconn_connect+0x32>
    addr = IP4_ADDR_ANY;
 800dcca:	4b0e      	ldr	r3, [pc, #56]	; (800dd04 <netconn_connect+0x68>)
 800dccc:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800dcd2:	68bb      	ldr	r3, [r7, #8]
 800dcd4:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800dcd6:	88fb      	ldrh	r3, [r7, #6]
 800dcd8:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
 800dcda:	f107 0314 	add.w	r3, r7, #20
 800dcde:	4619      	mov	r1, r3
 800dce0:	4809      	ldr	r0, [pc, #36]	; (800dd08 <netconn_connect+0x6c>)
 800dce2:	f7ff feb1 	bl	800da48 <netconn_apimsg>
 800dce6:	4603      	mov	r3, r0
 800dce8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800dcec:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	3738      	adds	r7, #56	; 0x38
 800dcf4:	46bd      	mov	sp, r7
 800dcf6:	bd80      	pop	{r7, pc}
 800dcf8:	080231e0 	.word	0x080231e0
 800dcfc:	08023374 	.word	0x08023374
 800dd00:	08023258 	.word	0x08023258
 800dd04:	08026f44 	.word	0x08026f44
 800dd08:	0800f369 	.word	0x0800f369

0800dd0c <netconn_disconnect>:
 * @param conn the netconn to disconnect
 * @return See @ref err_t
 */
err_t
netconn_disconnect(struct netconn *conn)
{
 800dd0c:	b580      	push	{r7, lr}
 800dd0e:	b08c      	sub	sp, #48	; 0x30
 800dd10:	af00      	add	r7, sp, #0
 800dd12:	6078      	str	r0, [r7, #4]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_disconnect: invalid conn", (conn != NULL), return ERR_ARG;);
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d109      	bne.n	800dd2e <netconn_disconnect+0x22>
 800dd1a:	4b0d      	ldr	r3, [pc, #52]	; (800dd50 <netconn_disconnect+0x44>)
 800dd1c:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800dd20:	490c      	ldr	r1, [pc, #48]	; (800dd54 <netconn_disconnect+0x48>)
 800dd22:	480d      	ldr	r0, [pc, #52]	; (800dd58 <netconn_disconnect+0x4c>)
 800dd24:	f013 f914 	bl	8020f50 <iprintf>
 800dd28:	f06f 030f 	mvn.w	r3, #15
 800dd2c:	e00c      	b.n	800dd48 <netconn_disconnect+0x3c>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	60fb      	str	r3, [r7, #12]
  err = netconn_apimsg(lwip_netconn_do_disconnect, &API_MSG_VAR_REF(msg));
 800dd32:	f107 030c 	add.w	r3, r7, #12
 800dd36:	4619      	mov	r1, r3
 800dd38:	4808      	ldr	r0, [pc, #32]	; (800dd5c <netconn_disconnect+0x50>)
 800dd3a:	f7ff fe85 	bl	800da48 <netconn_apimsg>
 800dd3e:	4603      	mov	r3, r0
 800dd40:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800dd44:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800dd48:	4618      	mov	r0, r3
 800dd4a:	3730      	adds	r7, #48	; 0x30
 800dd4c:	46bd      	mov	sp, r7
 800dd4e:	bd80      	pop	{r7, pc}
 800dd50:	080231e0 	.word	0x080231e0
 800dd54:	08023394 	.word	0x08023394
 800dd58:	08023258 	.word	0x08023258
 800dd5c:	0800f4e5 	.word	0x0800f4e5

0800dd60 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800dd60:	b580      	push	{r7, lr}
 800dd62:	b088      	sub	sp, #32
 800dd64:	af00      	add	r7, sp, #0
 800dd66:	60f8      	str	r0, [r7, #12]
 800dd68:	60b9      	str	r1, [r7, #8]
 800dd6a:	4613      	mov	r3, r2
 800dd6c:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800dd6e:	2300      	movs	r3, #0
 800dd70:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800dd72:	68bb      	ldr	r3, [r7, #8]
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d109      	bne.n	800dd8c <netconn_recv_data+0x2c>
 800dd78:	4b58      	ldr	r3, [pc, #352]	; (800dedc <netconn_recv_data+0x17c>)
 800dd7a:	f44f 7212 	mov.w	r2, #584	; 0x248
 800dd7e:	4958      	ldr	r1, [pc, #352]	; (800dee0 <netconn_recv_data+0x180>)
 800dd80:	4858      	ldr	r0, [pc, #352]	; (800dee4 <netconn_recv_data+0x184>)
 800dd82:	f013 f8e5 	bl	8020f50 <iprintf>
 800dd86:	f06f 030f 	mvn.w	r3, #15
 800dd8a:	e0a2      	b.n	800ded2 <netconn_recv_data+0x172>
  *new_buf = NULL;
 800dd8c:	68bb      	ldr	r3, [r7, #8]
 800dd8e:	2200      	movs	r2, #0
 800dd90:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d109      	bne.n	800ddac <netconn_recv_data+0x4c>
 800dd98:	4b50      	ldr	r3, [pc, #320]	; (800dedc <netconn_recv_data+0x17c>)
 800dd9a:	f240 224a 	movw	r2, #586	; 0x24a
 800dd9e:	4952      	ldr	r1, [pc, #328]	; (800dee8 <netconn_recv_data+0x188>)
 800dda0:	4850      	ldr	r0, [pc, #320]	; (800dee4 <netconn_recv_data+0x184>)
 800dda2:	f013 f8d5 	bl	8020f50 <iprintf>
 800dda6:	f06f 030f 	mvn.w	r3, #15
 800ddaa:	e092      	b.n	800ded2 <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	3310      	adds	r3, #16
 800ddb0:	4618      	mov	r0, r3
 800ddb2:	f007 fd78 	bl	80158a6 <sys_mbox_valid>
 800ddb6:	4603      	mov	r3, r0
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d10e      	bne.n	800ddda <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 800ddbc:	68f8      	ldr	r0, [r7, #12]
 800ddbe:	f000 fb01 	bl	800e3c4 <netconn_err>
 800ddc2:	4603      	mov	r3, r0
 800ddc4:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 800ddc6:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d002      	beq.n	800ddd4 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800ddce:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800ddd2:	e07e      	b.n	800ded2 <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 800ddd4:	f06f 030a 	mvn.w	r3, #10
 800ddd8:	e07b      	b.n	800ded2 <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	7f1b      	ldrb	r3, [r3, #28]
 800ddde:	f003 0302 	and.w	r3, r3, #2
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d10f      	bne.n	800de06 <netconn_recv_data+0xa6>
 800dde6:	79fb      	ldrb	r3, [r7, #7]
 800dde8:	f003 0304 	and.w	r3, r3, #4
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d10a      	bne.n	800de06 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	7f1b      	ldrb	r3, [r3, #28]
 800ddf4:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d104      	bne.n	800de06 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800de02:	2b00      	cmp	r3, #0
 800de04:	d023      	beq.n	800de4e <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	3310      	adds	r3, #16
 800de0a:	f107 0218 	add.w	r2, r7, #24
 800de0e:	4611      	mov	r1, r2
 800de10:	4618      	mov	r0, r3
 800de12:	f007 fd2c 	bl	801586e <sys_arch_mbox_tryfetch>
 800de16:	4603      	mov	r3, r0
 800de18:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de1c:	d11f      	bne.n	800de5e <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800de1e:	68f8      	ldr	r0, [r7, #12]
 800de20:	f000 fad0 	bl	800e3c4 <netconn_err>
 800de24:	4603      	mov	r3, r0
 800de26:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 800de28:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d002      	beq.n	800de36 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800de30:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800de34:	e04d      	b.n	800ded2 <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	7f1b      	ldrb	r3, [r3, #28]
 800de3a:	f003 0301 	and.w	r3, r3, #1
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d002      	beq.n	800de48 <netconn_recv_data+0xe8>
        return ERR_CONN;
 800de42:	f06f 030a 	mvn.w	r3, #10
 800de46:	e044      	b.n	800ded2 <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 800de48:	f06f 0306 	mvn.w	r3, #6
 800de4c:	e041      	b.n	800ded2 <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	3310      	adds	r3, #16
 800de52:	f107 0118 	add.w	r1, r7, #24
 800de56:	2200      	movs	r2, #0
 800de58:	4618      	mov	r0, r3
 800de5a:	f007 fcc9 	bl	80157f0 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	781b      	ldrb	r3, [r3, #0]
 800de62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800de66:	2b10      	cmp	r3, #16
 800de68:	d117      	bne.n	800de9a <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800de6a:	69bb      	ldr	r3, [r7, #24]
 800de6c:	f107 0217 	add.w	r2, r7, #23
 800de70:	4611      	mov	r1, r2
 800de72:	4618      	mov	r0, r3
 800de74:	f000 faf4 	bl	800e460 <lwip_netconn_is_err_msg>
 800de78:	4603      	mov	r3, r0
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d009      	beq.n	800de92 <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800de7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800de82:	f113 0f0f 	cmn.w	r3, #15
 800de86:	d101      	bne.n	800de8c <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 800de88:	2300      	movs	r3, #0
 800de8a:	e022      	b.n	800ded2 <netconn_recv_data+0x172>
      }
      return err;
 800de8c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800de90:	e01f      	b.n	800ded2 <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800de92:	69bb      	ldr	r3, [r7, #24]
 800de94:	891b      	ldrh	r3, [r3, #8]
 800de96:	83fb      	strh	r3, [r7, #30]
 800de98:	e00d      	b.n	800deb6 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800de9a:	69bb      	ldr	r3, [r7, #24]
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d106      	bne.n	800deae <netconn_recv_data+0x14e>
 800dea0:	4b0e      	ldr	r3, [pc, #56]	; (800dedc <netconn_recv_data+0x17c>)
 800dea2:	f240 2291 	movw	r2, #657	; 0x291
 800dea6:	4911      	ldr	r1, [pc, #68]	; (800deec <netconn_recv_data+0x18c>)
 800dea8:	480e      	ldr	r0, [pc, #56]	; (800dee4 <netconn_recv_data+0x184>)
 800deaa:	f013 f851 	bl	8020f50 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800deae:	69bb      	ldr	r3, [r7, #24]
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	891b      	ldrh	r3, [r3, #8]
 800deb4:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800deba:	2b00      	cmp	r3, #0
 800debc:	d005      	beq.n	800deca <netconn_recv_data+0x16a>
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dec2:	8bfa      	ldrh	r2, [r7, #30]
 800dec4:	2101      	movs	r1, #1
 800dec6:	68f8      	ldr	r0, [r7, #12]
 800dec8:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800deca:	69ba      	ldr	r2, [r7, #24]
 800decc:	68bb      	ldr	r3, [r7, #8]
 800dece:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800ded0:	2300      	movs	r3, #0
}
 800ded2:	4618      	mov	r0, r3
 800ded4:	3720      	adds	r7, #32
 800ded6:	46bd      	mov	sp, r7
 800ded8:	bd80      	pop	{r7, pc}
 800deda:	bf00      	nop
 800dedc:	080231e0 	.word	0x080231e0
 800dee0:	08023418 	.word	0x08023418
 800dee4:	08023258 	.word	0x08023258
 800dee8:	08023438 	.word	0x08023438
 800deec:	08023454 	.word	0x08023454

0800def0 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800def0:	b580      	push	{r7, lr}
 800def2:	b084      	sub	sp, #16
 800def4:	af00      	add	r7, sp, #0
 800def6:	60f8      	str	r0, [r7, #12]
 800def8:	60b9      	str	r1, [r7, #8]
 800defa:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	2b00      	cmp	r3, #0
 800df00:	d005      	beq.n	800df0e <netconn_tcp_recvd_msg+0x1e>
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	781b      	ldrb	r3, [r3, #0]
 800df06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800df0a:	2b10      	cmp	r3, #16
 800df0c:	d009      	beq.n	800df22 <netconn_tcp_recvd_msg+0x32>
 800df0e:	4b0c      	ldr	r3, [pc, #48]	; (800df40 <netconn_tcp_recvd_msg+0x50>)
 800df10:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800df14:	490b      	ldr	r1, [pc, #44]	; (800df44 <netconn_tcp_recvd_msg+0x54>)
 800df16:	480c      	ldr	r0, [pc, #48]	; (800df48 <netconn_tcp_recvd_msg+0x58>)
 800df18:	f013 f81a 	bl	8020f50 <iprintf>
 800df1c:	f06f 030f 	mvn.w	r3, #15
 800df20:	e00a      	b.n	800df38 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	68fa      	ldr	r2, [r7, #12]
 800df26:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	68ba      	ldr	r2, [r7, #8]
 800df2c:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800df2e:	6879      	ldr	r1, [r7, #4]
 800df30:	4806      	ldr	r0, [pc, #24]	; (800df4c <netconn_tcp_recvd_msg+0x5c>)
 800df32:	f7ff fd89 	bl	800da48 <netconn_apimsg>
 800df36:	4603      	mov	r3, r0
}
 800df38:	4618      	mov	r0, r3
 800df3a:	3710      	adds	r7, #16
 800df3c:	46bd      	mov	sp, r7
 800df3e:	bd80      	pop	{r7, pc}
 800df40:	080231e0 	.word	0x080231e0
 800df44:	08023460 	.word	0x08023460
 800df48:	08023258 	.word	0x08023258
 800df4c:	0800f5bd 	.word	0x0800f5bd

0800df50 <netconn_tcp_recvd>:

err_t
netconn_tcp_recvd(struct netconn *conn, size_t len)
{
 800df50:	b580      	push	{r7, lr}
 800df52:	b08c      	sub	sp, #48	; 0x30
 800df54:	af00      	add	r7, sp, #0
 800df56:	6078      	str	r0, [r7, #4]
 800df58:	6039      	str	r1, [r7, #0]
  err_t err;
  API_MSG_VAR_DECLARE(msg);
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d005      	beq.n	800df6c <netconn_tcp_recvd+0x1c>
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	781b      	ldrb	r3, [r3, #0]
 800df64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800df68:	2b10      	cmp	r3, #16
 800df6a:	d009      	beq.n	800df80 <netconn_tcp_recvd+0x30>
 800df6c:	4b0c      	ldr	r3, [pc, #48]	; (800dfa0 <netconn_tcp_recvd+0x50>)
 800df6e:	f240 22b6 	movw	r2, #694	; 0x2b6
 800df72:	490c      	ldr	r1, [pc, #48]	; (800dfa4 <netconn_tcp_recvd+0x54>)
 800df74:	480c      	ldr	r0, [pc, #48]	; (800dfa8 <netconn_tcp_recvd+0x58>)
 800df76:	f012 ffeb 	bl	8020f50 <iprintf>
 800df7a:	f06f 030f 	mvn.w	r3, #15
 800df7e:	e00b      	b.n	800df98 <netconn_tcp_recvd+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  API_MSG_VAR_ALLOC(msg);
  err = netconn_tcp_recvd_msg(conn, len, &API_VAR_REF(msg));
 800df80:	f107 030c 	add.w	r3, r7, #12
 800df84:	461a      	mov	r2, r3
 800df86:	6839      	ldr	r1, [r7, #0]
 800df88:	6878      	ldr	r0, [r7, #4]
 800df8a:	f7ff ffb1 	bl	800def0 <netconn_tcp_recvd_msg>
 800df8e:	4603      	mov	r3, r0
 800df90:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);
  return err;
 800df94:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800df98:	4618      	mov	r0, r3
 800df9a:	3730      	adds	r7, #48	; 0x30
 800df9c:	46bd      	mov	sp, r7
 800df9e:	bd80      	pop	{r7, pc}
 800dfa0:	080231e0 	.word	0x080231e0
 800dfa4:	08023460 	.word	0x08023460
 800dfa8:	08023258 	.word	0x08023258

0800dfac <netconn_recv_data_tcp>:

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800dfac:	b580      	push	{r7, lr}
 800dfae:	b090      	sub	sp, #64	; 0x40
 800dfb0:	af00      	add	r7, sp, #0
 800dfb2:	60f8      	str	r0, [r7, #12]
 800dfb4:	60b9      	str	r1, [r7, #8]
 800dfb6:	4613      	mov	r3, r2
 800dfb8:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	3310      	adds	r3, #16
 800dfbe:	4618      	mov	r0, r3
 800dfc0:	f007 fc71 	bl	80158a6 <sys_mbox_valid>
 800dfc4:	4603      	mov	r3, r0
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d102      	bne.n	800dfd0 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800dfca:	f06f 030a 	mvn.w	r3, #10
 800dfce:	e06d      	b.n	800e0ac <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	7f1b      	ldrb	r3, [r3, #28]
 800dfd4:	b25b      	sxtb	r3, r3
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	da07      	bge.n	800dfea <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	7f1b      	ldrb	r3, [r3, #28]
 800dfde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dfe2:	b2da      	uxtb	r2, r3
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 800dfe8:	e039      	b.n	800e05e <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800dfea:	79fb      	ldrb	r3, [r7, #7]
 800dfec:	461a      	mov	r2, r3
 800dfee:	68b9      	ldr	r1, [r7, #8]
 800dff0:	68f8      	ldr	r0, [r7, #12]
 800dff2:	f7ff feb5 	bl	800dd60 <netconn_recv_data>
 800dff6:	4603      	mov	r3, r0
 800dff8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 800dffc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e000:	2b00      	cmp	r3, #0
 800e002:	d002      	beq.n	800e00a <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 800e004:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e008:	e050      	b.n	800e0ac <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800e00a:	68bb      	ldr	r3, [r7, #8]
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800e010:	79fb      	ldrb	r3, [r7, #7]
 800e012:	f003 0308 	and.w	r3, r3, #8
 800e016:	2b00      	cmp	r3, #0
 800e018:	d10e      	bne.n	800e038 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800e01a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d002      	beq.n	800e026 <netconn_recv_data_tcp+0x7a>
 800e020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e022:	891b      	ldrh	r3, [r3, #8]
 800e024:	e000      	b.n	800e028 <netconn_recv_data_tcp+0x7c>
 800e026:	2301      	movs	r3, #1
 800e028:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800e02a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e02c:	f107 0214 	add.w	r2, r7, #20
 800e030:	4619      	mov	r1, r3
 800e032:	68f8      	ldr	r0, [r7, #12]
 800e034:	f7ff ff5c 	bl	800def0 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 800e038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d134      	bne.n	800e0a8 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800e03e:	79fb      	ldrb	r3, [r7, #7]
 800e040:	f003 0310 	and.w	r3, r3, #16
 800e044:	2b00      	cmp	r3, #0
 800e046:	d009      	beq.n	800e05c <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	7f1b      	ldrb	r3, [r3, #28]
 800e04c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e050:	b2da      	uxtb	r2, r3
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 800e056:	f06f 0306 	mvn.w	r3, #6
 800e05a:	e027      	b.n	800e0ac <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800e05c:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e062:	2b00      	cmp	r3, #0
 800e064:	d005      	beq.n	800e072 <netconn_recv_data_tcp+0xc6>
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e06a:	2200      	movs	r2, #0
 800e06c:	2101      	movs	r1, #1
 800e06e:	68f8      	ldr	r0, [r7, #12]
 800e070:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	685b      	ldr	r3, [r3, #4]
 800e076:	2b00      	cmp	r3, #0
 800e078:	d10f      	bne.n	800e09a <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800e07a:	68f8      	ldr	r0, [r7, #12]
 800e07c:	f000 f9a2 	bl	800e3c4 <netconn_err>
 800e080:	4603      	mov	r3, r0
 800e082:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 800e086:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d002      	beq.n	800e094 <netconn_recv_data_tcp+0xe8>
          return err;
 800e08e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e092:	e00b      	b.n	800e0ac <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 800e094:	f06f 030d 	mvn.w	r3, #13
 800e098:	e008      	b.n	800e0ac <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800e09a:	2101      	movs	r1, #1
 800e09c:	68f8      	ldr	r0, [r7, #12]
 800e09e:	f000 f961 	bl	800e364 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800e0a2:	f06f 030e 	mvn.w	r3, #14
 800e0a6:	e001      	b.n	800e0ac <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 800e0a8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800e0ac:	4618      	mov	r0, r3
 800e0ae:	3740      	adds	r7, #64	; 0x40
 800e0b0:	46bd      	mov	sp, r7
 800e0b2:	bd80      	pop	{r7, pc}

0800e0b4 <netconn_recv_tcp_pbuf_flags>:
 *                memory error or another error, @see netconn_recv_data)
 *         ERR_ARG if conn is not a TCP netconn
 */
err_t
netconn_recv_tcp_pbuf_flags(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800e0b4:	b580      	push	{r7, lr}
 800e0b6:	b084      	sub	sp, #16
 800e0b8:	af00      	add	r7, sp, #0
 800e0ba:	60f8      	str	r0, [r7, #12]
 800e0bc:	60b9      	str	r1, [r7, #8]
 800e0be:	4613      	mov	r3, r2
 800e0c0:	71fb      	strb	r3, [r7, #7]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d005      	beq.n	800e0d4 <netconn_recv_tcp_pbuf_flags+0x20>
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	781b      	ldrb	r3, [r3, #0]
 800e0cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e0d0:	2b10      	cmp	r3, #16
 800e0d2:	d009      	beq.n	800e0e8 <netconn_recv_tcp_pbuf_flags+0x34>
 800e0d4:	4b0a      	ldr	r3, [pc, #40]	; (800e100 <netconn_recv_tcp_pbuf_flags+0x4c>)
 800e0d6:	f240 3226 	movw	r2, #806	; 0x326
 800e0da:	490a      	ldr	r1, [pc, #40]	; (800e104 <netconn_recv_tcp_pbuf_flags+0x50>)
 800e0dc:	480a      	ldr	r0, [pc, #40]	; (800e108 <netconn_recv_tcp_pbuf_flags+0x54>)
 800e0de:	f012 ff37 	bl	8020f50 <iprintf>
 800e0e2:	f06f 030f 	mvn.w	r3, #15
 800e0e6:	e006      	b.n	800e0f6 <netconn_recv_tcp_pbuf_flags+0x42>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data_tcp(conn, new_buf, apiflags);
 800e0e8:	79fb      	ldrb	r3, [r7, #7]
 800e0ea:	461a      	mov	r2, r3
 800e0ec:	68b9      	ldr	r1, [r7, #8]
 800e0ee:	68f8      	ldr	r0, [r7, #12]
 800e0f0:	f7ff ff5c 	bl	800dfac <netconn_recv_data_tcp>
 800e0f4:	4603      	mov	r3, r0
}
 800e0f6:	4618      	mov	r0, r3
 800e0f8:	3710      	adds	r7, #16
 800e0fa:	46bd      	mov	sp, r7
 800e0fc:	bd80      	pop	{r7, pc}
 800e0fe:	bf00      	nop
 800e100:	080231e0 	.word	0x080231e0
 800e104:	08023460 	.word	0x08023460
 800e108:	08023258 	.word	0x08023258

0800e10c <netconn_recv_udp_raw_netbuf_flags>:
 *                memory error or another error)
 *         ERR_ARG if conn is not a UDP/RAW netconn
 */
err_t
netconn_recv_udp_raw_netbuf_flags(struct netconn *conn, struct netbuf **new_buf, u8_t apiflags)
{
 800e10c:	b580      	push	{r7, lr}
 800e10e:	b084      	sub	sp, #16
 800e110:	af00      	add	r7, sp, #0
 800e112:	60f8      	str	r0, [r7, #12]
 800e114:	60b9      	str	r1, [r7, #8]
 800e116:	4613      	mov	r3, r2
 800e118:	71fb      	strb	r3, [r7, #7]
  LWIP_ERROR("netconn_recv_udp_raw_netbuf: invalid conn", (conn != NULL) &&
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d005      	beq.n	800e12c <netconn_recv_udp_raw_netbuf_flags+0x20>
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	781b      	ldrb	r3, [r3, #0]
 800e124:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e128:	2b10      	cmp	r3, #16
 800e12a:	d109      	bne.n	800e140 <netconn_recv_udp_raw_netbuf_flags+0x34>
 800e12c:	4b0a      	ldr	r3, [pc, #40]	; (800e158 <netconn_recv_udp_raw_netbuf_flags+0x4c>)
 800e12e:	f240 324d 	movw	r2, #845	; 0x34d
 800e132:	490a      	ldr	r1, [pc, #40]	; (800e15c <netconn_recv_udp_raw_netbuf_flags+0x50>)
 800e134:	480a      	ldr	r0, [pc, #40]	; (800e160 <netconn_recv_udp_raw_netbuf_flags+0x54>)
 800e136:	f012 ff0b 	bl	8020f50 <iprintf>
 800e13a:	f06f 030f 	mvn.w	r3, #15
 800e13e:	e006      	b.n	800e14e <netconn_recv_udp_raw_netbuf_flags+0x42>
             NETCONNTYPE_GROUP(netconn_type(conn)) != NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data(conn, (void **)new_buf, apiflags);
 800e140:	79fb      	ldrb	r3, [r7, #7]
 800e142:	461a      	mov	r2, r3
 800e144:	68b9      	ldr	r1, [r7, #8]
 800e146:	68f8      	ldr	r0, [r7, #12]
 800e148:	f7ff fe0a 	bl	800dd60 <netconn_recv_data>
 800e14c:	4603      	mov	r3, r0
}
 800e14e:	4618      	mov	r0, r3
 800e150:	3710      	adds	r7, #16
 800e152:	46bd      	mov	sp, r7
 800e154:	bd80      	pop	{r7, pc}
 800e156:	bf00      	nop
 800e158:	080231e0 	.word	0x080231e0
 800e15c:	08023484 	.word	0x08023484
 800e160:	08023258 	.word	0x08023258

0800e164 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 800e164:	b580      	push	{r7, lr}
 800e166:	b08c      	sub	sp, #48	; 0x30
 800e168:	af00      	add	r7, sp, #0
 800e16a:	6078      	str	r0, [r7, #4]
 800e16c:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	2b00      	cmp	r3, #0
 800e172:	d109      	bne.n	800e188 <netconn_send+0x24>
 800e174:	4b0e      	ldr	r3, [pc, #56]	; (800e1b0 <netconn_send+0x4c>)
 800e176:	f240 32b2 	movw	r2, #946	; 0x3b2
 800e17a:	490e      	ldr	r1, [pc, #56]	; (800e1b4 <netconn_send+0x50>)
 800e17c:	480e      	ldr	r0, [pc, #56]	; (800e1b8 <netconn_send+0x54>)
 800e17e:	f012 fee7 	bl	8020f50 <iprintf>
 800e182:	f06f 030f 	mvn.w	r3, #15
 800e186:	e00e      	b.n	800e1a6 <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 800e18c:	683b      	ldr	r3, [r7, #0]
 800e18e:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 800e190:	f107 030c 	add.w	r3, r7, #12
 800e194:	4619      	mov	r1, r3
 800e196:	4809      	ldr	r0, [pc, #36]	; (800e1bc <netconn_send+0x58>)
 800e198:	f7ff fc56 	bl	800da48 <netconn_apimsg>
 800e19c:	4603      	mov	r3, r0
 800e19e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800e1a2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800e1a6:	4618      	mov	r0, r3
 800e1a8:	3730      	adds	r7, #48	; 0x30
 800e1aa:	46bd      	mov	sp, r7
 800e1ac:	bd80      	pop	{r7, pc}
 800e1ae:	bf00      	nop
 800e1b0:	080231e0 	.word	0x080231e0
 800e1b4:	080234bc 	.word	0x080234bc
 800e1b8:	08023258 	.word	0x08023258
 800e1bc:	0800f521 	.word	0x0800f521

0800e1c0 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 800e1c0:	b580      	push	{r7, lr}
 800e1c2:	b088      	sub	sp, #32
 800e1c4:	af02      	add	r7, sp, #8
 800e1c6:	60f8      	str	r0, [r7, #12]
 800e1c8:	60b9      	str	r1, [r7, #8]
 800e1ca:	607a      	str	r2, [r7, #4]
 800e1cc:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 800e1ce:	68bb      	ldr	r3, [r7, #8]
 800e1d0:	613b      	str	r3, [r7, #16]
  vector.len = size;
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800e1d6:	78fa      	ldrb	r2, [r7, #3]
 800e1d8:	f107 0110 	add.w	r1, r7, #16
 800e1dc:	6a3b      	ldr	r3, [r7, #32]
 800e1de:	9300      	str	r3, [sp, #0]
 800e1e0:	4613      	mov	r3, r2
 800e1e2:	2201      	movs	r2, #1
 800e1e4:	68f8      	ldr	r0, [r7, #12]
 800e1e6:	f000 f805 	bl	800e1f4 <netconn_write_vectors_partly>
 800e1ea:	4603      	mov	r3, r0
}
 800e1ec:	4618      	mov	r0, r3
 800e1ee:	3718      	adds	r7, #24
 800e1f0:	46bd      	mov	sp, r7
 800e1f2:	bd80      	pop	{r7, pc}

0800e1f4 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 800e1f4:	b580      	push	{r7, lr}
 800e1f6:	b092      	sub	sp, #72	; 0x48
 800e1f8:	af00      	add	r7, sp, #0
 800e1fa:	60f8      	str	r0, [r7, #12]
 800e1fc:	60b9      	str	r1, [r7, #8]
 800e1fe:	4611      	mov	r1, r2
 800e200:	461a      	mov	r2, r3
 800e202:	460b      	mov	r3, r1
 800e204:	80fb      	strh	r3, [r7, #6]
 800e206:	4613      	mov	r3, r2
 800e208:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d109      	bne.n	800e224 <netconn_write_vectors_partly+0x30>
 800e210:	4b4e      	ldr	r3, [pc, #312]	; (800e34c <netconn_write_vectors_partly+0x158>)
 800e212:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800e216:	494e      	ldr	r1, [pc, #312]	; (800e350 <netconn_write_vectors_partly+0x15c>)
 800e218:	484e      	ldr	r0, [pc, #312]	; (800e354 <netconn_write_vectors_partly+0x160>)
 800e21a:	f012 fe99 	bl	8020f50 <iprintf>
 800e21e:	f06f 030f 	mvn.w	r3, #15
 800e222:	e08e      	b.n	800e342 <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	781b      	ldrb	r3, [r3, #0]
 800e228:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e22c:	2b10      	cmp	r3, #16
 800e22e:	d009      	beq.n	800e244 <netconn_write_vectors_partly+0x50>
 800e230:	4b46      	ldr	r3, [pc, #280]	; (800e34c <netconn_write_vectors_partly+0x158>)
 800e232:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800e236:	4948      	ldr	r1, [pc, #288]	; (800e358 <netconn_write_vectors_partly+0x164>)
 800e238:	4846      	ldr	r0, [pc, #280]	; (800e354 <netconn_write_vectors_partly+0x160>)
 800e23a:	f012 fe89 	bl	8020f50 <iprintf>
 800e23e:	f06f 0305 	mvn.w	r3, #5
 800e242:	e07e      	b.n	800e342 <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	7f1b      	ldrb	r3, [r3, #28]
 800e248:	f003 0302 	and.w	r3, r3, #2
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d104      	bne.n	800e25a <netconn_write_vectors_partly+0x66>
 800e250:	797b      	ldrb	r3, [r7, #5]
 800e252:	f003 0304 	and.w	r3, r3, #4
 800e256:	2b00      	cmp	r3, #0
 800e258:	d001      	beq.n	800e25e <netconn_write_vectors_partly+0x6a>
 800e25a:	2301      	movs	r3, #1
 800e25c:	e000      	b.n	800e260 <netconn_write_vectors_partly+0x6c>
 800e25e:	2300      	movs	r3, #0
 800e260:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800e264:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d005      	beq.n	800e278 <netconn_write_vectors_partly+0x84>
 800e26c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d102      	bne.n	800e278 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800e272:	f06f 0305 	mvn.w	r3, #5
 800e276:	e064      	b.n	800e342 <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 800e278:	2300      	movs	r3, #0
 800e27a:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 800e27c:	2300      	movs	r3, #0
 800e27e:	643b      	str	r3, [r7, #64]	; 0x40
 800e280:	e015      	b.n	800e2ae <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 800e282:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e284:	00db      	lsls	r3, r3, #3
 800e286:	68ba      	ldr	r2, [r7, #8]
 800e288:	4413      	add	r3, r2
 800e28a:	685b      	ldr	r3, [r3, #4]
 800e28c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e28e:	4413      	add	r3, r2
 800e290:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 800e292:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e294:	00db      	lsls	r3, r3, #3
 800e296:	68ba      	ldr	r2, [r7, #8]
 800e298:	4413      	add	r3, r2
 800e29a:	685b      	ldr	r3, [r3, #4]
 800e29c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e29e:	429a      	cmp	r2, r3
 800e2a0:	d202      	bcs.n	800e2a8 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 800e2a2:	f06f 0305 	mvn.w	r3, #5
 800e2a6:	e04c      	b.n	800e342 <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 800e2a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e2aa:	3301      	adds	r3, #1
 800e2ac:	643b      	str	r3, [r7, #64]	; 0x40
 800e2ae:	88fb      	ldrh	r3, [r7, #6]
 800e2b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e2b2:	429a      	cmp	r2, r3
 800e2b4:	dbe5      	blt.n	800e282 <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 800e2b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d101      	bne.n	800e2c0 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 800e2bc:	2300      	movs	r3, #0
 800e2be:	e040      	b.n	800e342 <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 800e2c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	da0a      	bge.n	800e2dc <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 800e2c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d102      	bne.n	800e2d2 <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 800e2cc:	f06f 0305 	mvn.w	r3, #5
 800e2d0:	e037      	b.n	800e342 <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 800e2d2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800e2d6:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 800e2d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2da:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 800e2e0:	68bb      	ldr	r3, [r7, #8]
 800e2e2:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 800e2e4:	88fb      	ldrh	r3, [r7, #6]
 800e2e6:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 800e2e8:	2300      	movs	r3, #0
 800e2ea:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800e2ec:	797b      	ldrb	r3, [r7, #5]
 800e2ee:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800e2f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e2f4:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 800e2f6:	2300      	movs	r3, #0
 800e2f8:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800e2fa:	f107 0314 	add.w	r3, r7, #20
 800e2fe:	4619      	mov	r1, r3
 800e300:	4816      	ldr	r0, [pc, #88]	; (800e35c <netconn_write_vectors_partly+0x168>)
 800e302:	f7ff fba1 	bl	800da48 <netconn_apimsg>
 800e306:	4603      	mov	r3, r0
 800e308:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 800e30c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800e310:	2b00      	cmp	r3, #0
 800e312:	d114      	bne.n	800e33e <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 800e314:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e316:	2b00      	cmp	r3, #0
 800e318:	d002      	beq.n	800e320 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 800e31a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e31c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e31e:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 800e320:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e324:	2b00      	cmp	r3, #0
 800e326:	d10a      	bne.n	800e33e <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 800e328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e32a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e32c:	429a      	cmp	r2, r3
 800e32e:	d006      	beq.n	800e33e <netconn_write_vectors_partly+0x14a>
 800e330:	4b06      	ldr	r3, [pc, #24]	; (800e34c <netconn_write_vectors_partly+0x158>)
 800e332:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800e336:	490a      	ldr	r1, [pc, #40]	; (800e360 <netconn_write_vectors_partly+0x16c>)
 800e338:	4806      	ldr	r0, [pc, #24]	; (800e354 <netconn_write_vectors_partly+0x160>)
 800e33a:	f012 fe09 	bl	8020f50 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 800e33e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800e342:	4618      	mov	r0, r3
 800e344:	3748      	adds	r7, #72	; 0x48
 800e346:	46bd      	mov	sp, r7
 800e348:	bd80      	pop	{r7, pc}
 800e34a:	bf00      	nop
 800e34c:	080231e0 	.word	0x080231e0
 800e350:	080234d8 	.word	0x080234d8
 800e354:	08023258 	.word	0x08023258
 800e358:	080234f4 	.word	0x080234f4
 800e35c:	0800f9c1 	.word	0x0800f9c1
 800e360:	08023518 	.word	0x08023518

0800e364 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800e364:	b580      	push	{r7, lr}
 800e366:	b08c      	sub	sp, #48	; 0x30
 800e368:	af00      	add	r7, sp, #0
 800e36a:	6078      	str	r0, [r7, #4]
 800e36c:	460b      	mov	r3, r1
 800e36e:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	2b00      	cmp	r3, #0
 800e374:	d109      	bne.n	800e38a <netconn_close_shutdown+0x26>
 800e376:	4b0f      	ldr	r3, [pc, #60]	; (800e3b4 <netconn_close_shutdown+0x50>)
 800e378:	f240 4247 	movw	r2, #1095	; 0x447
 800e37c:	490e      	ldr	r1, [pc, #56]	; (800e3b8 <netconn_close_shutdown+0x54>)
 800e37e:	480f      	ldr	r0, [pc, #60]	; (800e3bc <netconn_close_shutdown+0x58>)
 800e380:	f012 fde6 	bl	8020f50 <iprintf>
 800e384:	f06f 030f 	mvn.w	r3, #15
 800e388:	e010      	b.n	800e3ac <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800e38e:	78fb      	ldrb	r3, [r7, #3]
 800e390:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800e392:	2329      	movs	r3, #41	; 0x29
 800e394:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800e396:	f107 030c 	add.w	r3, r7, #12
 800e39a:	4619      	mov	r1, r3
 800e39c:	4808      	ldr	r0, [pc, #32]	; (800e3c0 <netconn_close_shutdown+0x5c>)
 800e39e:	f7ff fb53 	bl	800da48 <netconn_apimsg>
 800e3a2:	4603      	mov	r3, r0
 800e3a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800e3a8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800e3ac:	4618      	mov	r0, r3
 800e3ae:	3730      	adds	r7, #48	; 0x30
 800e3b0:	46bd      	mov	sp, r7
 800e3b2:	bd80      	pop	{r7, pc}
 800e3b4:	080231e0 	.word	0x080231e0
 800e3b8:	0802353c 	.word	0x0802353c
 800e3bc:	08023258 	.word	0x08023258
 800e3c0:	0800fbe5 	.word	0x0800fbe5

0800e3c4 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800e3c4:	b580      	push	{r7, lr}
 800e3c6:	b084      	sub	sp, #16
 800e3c8:	af00      	add	r7, sp, #0
 800e3ca:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d101      	bne.n	800e3d6 <netconn_err+0x12>
    return ERR_OK;
 800e3d2:	2300      	movs	r3, #0
 800e3d4:	e00d      	b.n	800e3f2 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 800e3d6:	f007 fb81 	bl	8015adc <sys_arch_protect>
 800e3da:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	7a1b      	ldrb	r3, [r3, #8]
 800e3e0:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	2200      	movs	r2, #0
 800e3e6:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800e3e8:	68f8      	ldr	r0, [r7, #12]
 800e3ea:	f007 fb85 	bl	8015af8 <sys_arch_unprotect>
  return err;
 800e3ee:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800e3f2:	4618      	mov	r0, r3
 800e3f4:	3710      	adds	r7, #16
 800e3f6:	46bd      	mov	sp, r7
 800e3f8:	bd80      	pop	{r7, pc}
	...

0800e3fc <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800e3fc:	b580      	push	{r7, lr}
 800e3fe:	b082      	sub	sp, #8
 800e400:	af00      	add	r7, sp, #0
 800e402:	4603      	mov	r3, r0
 800e404:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800e406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e40a:	f113 0f0e 	cmn.w	r3, #14
 800e40e:	d008      	beq.n	800e422 <lwip_netconn_err_to_msg+0x26>
 800e410:	f113 0f0d 	cmn.w	r3, #13
 800e414:	d003      	beq.n	800e41e <lwip_netconn_err_to_msg+0x22>
 800e416:	f113 0f0f 	cmn.w	r3, #15
 800e41a:	d004      	beq.n	800e426 <lwip_netconn_err_to_msg+0x2a>
 800e41c:	e005      	b.n	800e42a <lwip_netconn_err_to_msg+0x2e>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800e41e:	4b0a      	ldr	r3, [pc, #40]	; (800e448 <lwip_netconn_err_to_msg+0x4c>)
 800e420:	e00e      	b.n	800e440 <lwip_netconn_err_to_msg+0x44>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800e422:	4b0a      	ldr	r3, [pc, #40]	; (800e44c <lwip_netconn_err_to_msg+0x50>)
 800e424:	e00c      	b.n	800e440 <lwip_netconn_err_to_msg+0x44>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800e426:	4b0a      	ldr	r3, [pc, #40]	; (800e450 <lwip_netconn_err_to_msg+0x54>)
 800e428:	e00a      	b.n	800e440 <lwip_netconn_err_to_msg+0x44>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800e42a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d005      	beq.n	800e43e <lwip_netconn_err_to_msg+0x42>
 800e432:	4b08      	ldr	r3, [pc, #32]	; (800e454 <lwip_netconn_err_to_msg+0x58>)
 800e434:	227d      	movs	r2, #125	; 0x7d
 800e436:	4908      	ldr	r1, [pc, #32]	; (800e458 <lwip_netconn_err_to_msg+0x5c>)
 800e438:	4808      	ldr	r0, [pc, #32]	; (800e45c <lwip_netconn_err_to_msg+0x60>)
 800e43a:	f012 fd89 	bl	8020f50 <iprintf>
      return NULL;
 800e43e:	2300      	movs	r3, #0
  }
}
 800e440:	4618      	mov	r0, r3
 800e442:	3708      	adds	r7, #8
 800e444:	46bd      	mov	sp, r7
 800e446:	bd80      	pop	{r7, pc}
 800e448:	08026eec 	.word	0x08026eec
 800e44c:	08026eed 	.word	0x08026eed
 800e450:	08026eee 	.word	0x08026eee
 800e454:	08023558 	.word	0x08023558
 800e458:	080235ac 	.word	0x080235ac
 800e45c:	080235bc 	.word	0x080235bc

0800e460 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800e460:	b580      	push	{r7, lr}
 800e462:	b082      	sub	sp, #8
 800e464:	af00      	add	r7, sp, #0
 800e466:	6078      	str	r0, [r7, #4]
 800e468:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800e46a:	683b      	ldr	r3, [r7, #0]
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d105      	bne.n	800e47c <lwip_netconn_is_err_msg+0x1c>
 800e470:	4b12      	ldr	r3, [pc, #72]	; (800e4bc <lwip_netconn_is_err_msg+0x5c>)
 800e472:	2285      	movs	r2, #133	; 0x85
 800e474:	4912      	ldr	r1, [pc, #72]	; (800e4c0 <lwip_netconn_is_err_msg+0x60>)
 800e476:	4813      	ldr	r0, [pc, #76]	; (800e4c4 <lwip_netconn_is_err_msg+0x64>)
 800e478:	f012 fd6a 	bl	8020f50 <iprintf>

  if (msg == &netconn_aborted) {
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	4a12      	ldr	r2, [pc, #72]	; (800e4c8 <lwip_netconn_is_err_msg+0x68>)
 800e480:	4293      	cmp	r3, r2
 800e482:	d104      	bne.n	800e48e <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800e484:	683b      	ldr	r3, [r7, #0]
 800e486:	22f3      	movs	r2, #243	; 0xf3
 800e488:	701a      	strb	r2, [r3, #0]
    return 1;
 800e48a:	2301      	movs	r3, #1
 800e48c:	e012      	b.n	800e4b4 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	4a0e      	ldr	r2, [pc, #56]	; (800e4cc <lwip_netconn_is_err_msg+0x6c>)
 800e492:	4293      	cmp	r3, r2
 800e494:	d104      	bne.n	800e4a0 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800e496:	683b      	ldr	r3, [r7, #0]
 800e498:	22f2      	movs	r2, #242	; 0xf2
 800e49a:	701a      	strb	r2, [r3, #0]
    return 1;
 800e49c:	2301      	movs	r3, #1
 800e49e:	e009      	b.n	800e4b4 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	4a0b      	ldr	r2, [pc, #44]	; (800e4d0 <lwip_netconn_is_err_msg+0x70>)
 800e4a4:	4293      	cmp	r3, r2
 800e4a6:	d104      	bne.n	800e4b2 <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800e4a8:	683b      	ldr	r3, [r7, #0]
 800e4aa:	22f1      	movs	r2, #241	; 0xf1
 800e4ac:	701a      	strb	r2, [r3, #0]
    return 1;
 800e4ae:	2301      	movs	r3, #1
 800e4b0:	e000      	b.n	800e4b4 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800e4b2:	2300      	movs	r3, #0
}
 800e4b4:	4618      	mov	r0, r3
 800e4b6:	3708      	adds	r7, #8
 800e4b8:	46bd      	mov	sp, r7
 800e4ba:	bd80      	pop	{r7, pc}
 800e4bc:	08023558 	.word	0x08023558
 800e4c0:	080235e4 	.word	0x080235e4
 800e4c4:	080235bc 	.word	0x080235bc
 800e4c8:	08026eec 	.word	0x08026eec
 800e4cc:	08026eed 	.word	0x08026eed
 800e4d0:	08026eee 	.word	0x08026eee

0800e4d4 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800e4d4:	b580      	push	{r7, lr}
 800e4d6:	b088      	sub	sp, #32
 800e4d8:	af00      	add	r7, sp, #0
 800e4da:	60f8      	str	r0, [r7, #12]
 800e4dc:	60b9      	str	r1, [r7, #8]
 800e4de:	607a      	str	r2, [r7, #4]
 800e4e0:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800e4e2:	68bb      	ldr	r3, [r7, #8]
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d105      	bne.n	800e4f4 <recv_udp+0x20>
 800e4e8:	4b34      	ldr	r3, [pc, #208]	; (800e5bc <recv_udp+0xe8>)
 800e4ea:	22e5      	movs	r2, #229	; 0xe5
 800e4ec:	4934      	ldr	r1, [pc, #208]	; (800e5c0 <recv_udp+0xec>)
 800e4ee:	4835      	ldr	r0, [pc, #212]	; (800e5c4 <recv_udp+0xf0>)
 800e4f0:	f012 fd2e 	bl	8020f50 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d105      	bne.n	800e506 <recv_udp+0x32>
 800e4fa:	4b30      	ldr	r3, [pc, #192]	; (800e5bc <recv_udp+0xe8>)
 800e4fc:	22e6      	movs	r2, #230	; 0xe6
 800e4fe:	4932      	ldr	r1, [pc, #200]	; (800e5c8 <recv_udp+0xf4>)
 800e500:	4830      	ldr	r0, [pc, #192]	; (800e5c4 <recv_udp+0xf0>)
 800e502:	f012 fd25 	bl	8020f50 <iprintf>
  conn = (struct netconn *)arg;
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800e50a:	69fb      	ldr	r3, [r7, #28]
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d103      	bne.n	800e518 <recv_udp+0x44>
    pbuf_free(p);
 800e510:	6878      	ldr	r0, [r7, #4]
 800e512:	f005 fd9d 	bl	8014050 <pbuf_free>
    return;
 800e516:	e04d      	b.n	800e5b4 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800e518:	69fb      	ldr	r3, [r7, #28]
 800e51a:	685b      	ldr	r3, [r3, #4]
 800e51c:	68ba      	ldr	r2, [r7, #8]
 800e51e:	429a      	cmp	r2, r3
 800e520:	d005      	beq.n	800e52e <recv_udp+0x5a>
 800e522:	4b26      	ldr	r3, [pc, #152]	; (800e5bc <recv_udp+0xe8>)
 800e524:	22ee      	movs	r2, #238	; 0xee
 800e526:	4929      	ldr	r1, [pc, #164]	; (800e5cc <recv_udp+0xf8>)
 800e528:	4826      	ldr	r0, [pc, #152]	; (800e5c4 <recv_udp+0xf0>)
 800e52a:	f012 fd11 	bl	8020f50 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800e52e:	69fb      	ldr	r3, [r7, #28]
 800e530:	3310      	adds	r3, #16
 800e532:	4618      	mov	r0, r3
 800e534:	f007 f9b7 	bl	80158a6 <sys_mbox_valid>
 800e538:	4603      	mov	r3, r0
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d103      	bne.n	800e546 <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800e53e:	6878      	ldr	r0, [r7, #4]
 800e540:	f005 fd86 	bl	8014050 <pbuf_free>
    return;
 800e544:	e036      	b.n	800e5b4 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800e546:	2006      	movs	r0, #6
 800e548:	f004 fda8 	bl	801309c <memp_malloc>
 800e54c:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800e54e:	69bb      	ldr	r3, [r7, #24]
 800e550:	2b00      	cmp	r3, #0
 800e552:	d103      	bne.n	800e55c <recv_udp+0x88>
    pbuf_free(p);
 800e554:	6878      	ldr	r0, [r7, #4]
 800e556:	f005 fd7b 	bl	8014050 <pbuf_free>
    return;
 800e55a:	e02b      	b.n	800e5b4 <recv_udp+0xe0>
  } else {
    buf->p = p;
 800e55c:	69bb      	ldr	r3, [r7, #24]
 800e55e:	687a      	ldr	r2, [r7, #4]
 800e560:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800e562:	69bb      	ldr	r3, [r7, #24]
 800e564:	687a      	ldr	r2, [r7, #4]
 800e566:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800e568:	683b      	ldr	r3, [r7, #0]
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d002      	beq.n	800e574 <recv_udp+0xa0>
 800e56e:	683b      	ldr	r3, [r7, #0]
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	e000      	b.n	800e576 <recv_udp+0xa2>
 800e574:	2300      	movs	r3, #0
 800e576:	69ba      	ldr	r2, [r7, #24]
 800e578:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800e57a:	69bb      	ldr	r3, [r7, #24]
 800e57c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e57e:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	891b      	ldrh	r3, [r3, #8]
 800e584:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800e586:	69fb      	ldr	r3, [r7, #28]
 800e588:	3310      	adds	r3, #16
 800e58a:	69b9      	ldr	r1, [r7, #24]
 800e58c:	4618      	mov	r0, r3
 800e58e:	f007 f915 	bl	80157bc <sys_mbox_trypost>
 800e592:	4603      	mov	r3, r0
 800e594:	2b00      	cmp	r3, #0
 800e596:	d003      	beq.n	800e5a0 <recv_udp+0xcc>
    netbuf_delete(buf);
 800e598:	69b8      	ldr	r0, [r7, #24]
 800e59a:	f004 fe1f 	bl	80131dc <netbuf_delete>
    return;
 800e59e:	e009      	b.n	800e5b4 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800e5a0:	69fb      	ldr	r3, [r7, #28]
 800e5a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d005      	beq.n	800e5b4 <recv_udp+0xe0>
 800e5a8:	69fb      	ldr	r3, [r7, #28]
 800e5aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5ac:	8afa      	ldrh	r2, [r7, #22]
 800e5ae:	2100      	movs	r1, #0
 800e5b0:	69f8      	ldr	r0, [r7, #28]
 800e5b2:	4798      	blx	r3
  }
}
 800e5b4:	3720      	adds	r7, #32
 800e5b6:	46bd      	mov	sp, r7
 800e5b8:	bd80      	pop	{r7, pc}
 800e5ba:	bf00      	nop
 800e5bc:	08023558 	.word	0x08023558
 800e5c0:	080235f0 	.word	0x080235f0
 800e5c4:	080235bc 	.word	0x080235bc
 800e5c8:	08023614 	.word	0x08023614
 800e5cc:	08023634 	.word	0x08023634

0800e5d0 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800e5d0:	b580      	push	{r7, lr}
 800e5d2:	b088      	sub	sp, #32
 800e5d4:	af00      	add	r7, sp, #0
 800e5d6:	60f8      	str	r0, [r7, #12]
 800e5d8:	60b9      	str	r1, [r7, #8]
 800e5da:	607a      	str	r2, [r7, #4]
 800e5dc:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800e5de:	68bb      	ldr	r3, [r7, #8]
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d106      	bne.n	800e5f2 <recv_tcp+0x22>
 800e5e4:	4b36      	ldr	r3, [pc, #216]	; (800e6c0 <recv_tcp+0xf0>)
 800e5e6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800e5ea:	4936      	ldr	r1, [pc, #216]	; (800e6c4 <recv_tcp+0xf4>)
 800e5ec:	4836      	ldr	r0, [pc, #216]	; (800e6c8 <recv_tcp+0xf8>)
 800e5ee:	f012 fcaf 	bl	8020f50 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d106      	bne.n	800e606 <recv_tcp+0x36>
 800e5f8:	4b31      	ldr	r3, [pc, #196]	; (800e6c0 <recv_tcp+0xf0>)
 800e5fa:	f240 122d 	movw	r2, #301	; 0x12d
 800e5fe:	4933      	ldr	r1, [pc, #204]	; (800e6cc <recv_tcp+0xfc>)
 800e600:	4831      	ldr	r0, [pc, #196]	; (800e6c8 <recv_tcp+0xf8>)
 800e602:	f012 fca5 	bl	8020f50 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800e606:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d006      	beq.n	800e61c <recv_tcp+0x4c>
 800e60e:	4b2c      	ldr	r3, [pc, #176]	; (800e6c0 <recv_tcp+0xf0>)
 800e610:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800e614:	492e      	ldr	r1, [pc, #184]	; (800e6d0 <recv_tcp+0x100>)
 800e616:	482c      	ldr	r0, [pc, #176]	; (800e6c8 <recv_tcp+0xf8>)
 800e618:	f012 fc9a 	bl	8020f50 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800e620:	697b      	ldr	r3, [r7, #20]
 800e622:	2b00      	cmp	r3, #0
 800e624:	d102      	bne.n	800e62c <recv_tcp+0x5c>
    return ERR_VAL;
 800e626:	f06f 0305 	mvn.w	r3, #5
 800e62a:	e045      	b.n	800e6b8 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800e62c:	697b      	ldr	r3, [r7, #20]
 800e62e:	685b      	ldr	r3, [r3, #4]
 800e630:	68ba      	ldr	r2, [r7, #8]
 800e632:	429a      	cmp	r2, r3
 800e634:	d006      	beq.n	800e644 <recv_tcp+0x74>
 800e636:	4b22      	ldr	r3, [pc, #136]	; (800e6c0 <recv_tcp+0xf0>)
 800e638:	f240 1235 	movw	r2, #309	; 0x135
 800e63c:	4925      	ldr	r1, [pc, #148]	; (800e6d4 <recv_tcp+0x104>)
 800e63e:	4822      	ldr	r0, [pc, #136]	; (800e6c8 <recv_tcp+0xf8>)
 800e640:	f012 fc86 	bl	8020f50 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800e644:	697b      	ldr	r3, [r7, #20]
 800e646:	3310      	adds	r3, #16
 800e648:	4618      	mov	r0, r3
 800e64a:	f007 f92c 	bl	80158a6 <sys_mbox_valid>
 800e64e:	4603      	mov	r3, r0
 800e650:	2b00      	cmp	r3, #0
 800e652:	d10d      	bne.n	800e670 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	2b00      	cmp	r3, #0
 800e658:	d008      	beq.n	800e66c <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	891b      	ldrh	r3, [r3, #8]
 800e65e:	4619      	mov	r1, r3
 800e660:	68b8      	ldr	r0, [r7, #8]
 800e662:	f007 fe0b 	bl	801627c <tcp_recved>
      pbuf_free(p);
 800e666:	6878      	ldr	r0, [r7, #4]
 800e668:	f005 fcf2 	bl	8014050 <pbuf_free>
    }
    return ERR_OK;
 800e66c:	2300      	movs	r3, #0
 800e66e:	e023      	b.n	800e6b8 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	2b00      	cmp	r3, #0
 800e674:	d005      	beq.n	800e682 <recv_tcp+0xb2>
    msg = p;
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	891b      	ldrh	r3, [r3, #8]
 800e67e:	83fb      	strh	r3, [r7, #30]
 800e680:	e003      	b.n	800e68a <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800e682:	4b15      	ldr	r3, [pc, #84]	; (800e6d8 <recv_tcp+0x108>)
 800e684:	61bb      	str	r3, [r7, #24]
    len = 0;
 800e686:	2300      	movs	r3, #0
 800e688:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800e68a:	697b      	ldr	r3, [r7, #20]
 800e68c:	3310      	adds	r3, #16
 800e68e:	69b9      	ldr	r1, [r7, #24]
 800e690:	4618      	mov	r0, r3
 800e692:	f007 f893 	bl	80157bc <sys_mbox_trypost>
 800e696:	4603      	mov	r3, r0
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d002      	beq.n	800e6a2 <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800e69c:	f04f 33ff 	mov.w	r3, #4294967295
 800e6a0:	e00a      	b.n	800e6b8 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800e6a2:	697b      	ldr	r3, [r7, #20]
 800e6a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d005      	beq.n	800e6b6 <recv_tcp+0xe6>
 800e6aa:	697b      	ldr	r3, [r7, #20]
 800e6ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6ae:	8bfa      	ldrh	r2, [r7, #30]
 800e6b0:	2100      	movs	r1, #0
 800e6b2:	6978      	ldr	r0, [r7, #20]
 800e6b4:	4798      	blx	r3
  }

  return ERR_OK;
 800e6b6:	2300      	movs	r3, #0
}
 800e6b8:	4618      	mov	r0, r3
 800e6ba:	3720      	adds	r7, #32
 800e6bc:	46bd      	mov	sp, r7
 800e6be:	bd80      	pop	{r7, pc}
 800e6c0:	08023558 	.word	0x08023558
 800e6c4:	08023654 	.word	0x08023654
 800e6c8:	080235bc 	.word	0x080235bc
 800e6cc:	08023678 	.word	0x08023678
 800e6d0:	08023698 	.word	0x08023698
 800e6d4:	080236b0 	.word	0x080236b0
 800e6d8:	08026eee 	.word	0x08026eee

0800e6dc <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800e6dc:	b580      	push	{r7, lr}
 800e6de:	b084      	sub	sp, #16
 800e6e0:	af00      	add	r7, sp, #0
 800e6e2:	6078      	str	r0, [r7, #4]
 800e6e4:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d106      	bne.n	800e6fe <poll_tcp+0x22>
 800e6f0:	4b29      	ldr	r3, [pc, #164]	; (800e798 <poll_tcp+0xbc>)
 800e6f2:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800e6f6:	4929      	ldr	r1, [pc, #164]	; (800e79c <poll_tcp+0xc0>)
 800e6f8:	4829      	ldr	r0, [pc, #164]	; (800e7a0 <poll_tcp+0xc4>)
 800e6fa:	f012 fc29 	bl	8020f50 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	785b      	ldrb	r3, [r3, #1]
 800e702:	2b01      	cmp	r3, #1
 800e704:	d104      	bne.n	800e710 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800e706:	2101      	movs	r1, #1
 800e708:	68f8      	ldr	r0, [r7, #12]
 800e70a:	f000 ff8d 	bl	800f628 <lwip_netconn_do_writemore>
 800e70e:	e016      	b.n	800e73e <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	785b      	ldrb	r3, [r3, #1]
 800e714:	2b04      	cmp	r3, #4
 800e716:	d112      	bne.n	800e73e <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	6a1b      	ldr	r3, [r3, #32]
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d00a      	beq.n	800e736 <poll_tcp+0x5a>
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	6a1b      	ldr	r3, [r3, #32]
 800e724:	7a5b      	ldrb	r3, [r3, #9]
 800e726:	2b00      	cmp	r3, #0
 800e728:	d005      	beq.n	800e736 <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	6a1b      	ldr	r3, [r3, #32]
 800e72e:	7a5a      	ldrb	r2, [r3, #9]
 800e730:	3a01      	subs	r2, #1
 800e732:	b2d2      	uxtb	r2, r2
 800e734:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800e736:	2101      	movs	r1, #1
 800e738:	68f8      	ldr	r0, [r7, #12]
 800e73a:	f000 fb3b 	bl	800edb4 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	7f1b      	ldrb	r3, [r3, #28]
 800e742:	f003 0310 	and.w	r3, r3, #16
 800e746:	2b00      	cmp	r3, #0
 800e748:	d021      	beq.n	800e78e <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	685b      	ldr	r3, [r3, #4]
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d01d      	beq.n	800e78e <poll_tcp+0xb2>
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	685b      	ldr	r3, [r3, #4]
 800e756:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800e75a:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800e75e:	d316      	bcc.n	800e78e <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	685b      	ldr	r3, [r3, #4]
 800e764:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800e768:	2b04      	cmp	r3, #4
 800e76a:	d810      	bhi.n	800e78e <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	7f1b      	ldrb	r3, [r3, #28]
 800e770:	f023 0310 	bic.w	r3, r3, #16
 800e774:	b2da      	uxtb	r2, r3
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d005      	beq.n	800e78e <poll_tcp+0xb2>
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e786:	2200      	movs	r2, #0
 800e788:	2102      	movs	r1, #2
 800e78a:	68f8      	ldr	r0, [r7, #12]
 800e78c:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800e78e:	2300      	movs	r3, #0
}
 800e790:	4618      	mov	r0, r3
 800e792:	3710      	adds	r7, #16
 800e794:	46bd      	mov	sp, r7
 800e796:	bd80      	pop	{r7, pc}
 800e798:	08023558 	.word	0x08023558
 800e79c:	080236d0 	.word	0x080236d0
 800e7a0:	080235bc 	.word	0x080235bc

0800e7a4 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800e7a4:	b580      	push	{r7, lr}
 800e7a6:	b086      	sub	sp, #24
 800e7a8:	af00      	add	r7, sp, #0
 800e7aa:	60f8      	str	r0, [r7, #12]
 800e7ac:	60b9      	str	r1, [r7, #8]
 800e7ae:	4613      	mov	r3, r2
 800e7b0:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800e7b6:	697b      	ldr	r3, [r7, #20]
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d106      	bne.n	800e7ca <sent_tcp+0x26>
 800e7bc:	4b20      	ldr	r3, [pc, #128]	; (800e840 <sent_tcp+0x9c>)
 800e7be:	f240 1293 	movw	r2, #403	; 0x193
 800e7c2:	4920      	ldr	r1, [pc, #128]	; (800e844 <sent_tcp+0xa0>)
 800e7c4:	4820      	ldr	r0, [pc, #128]	; (800e848 <sent_tcp+0xa4>)
 800e7c6:	f012 fbc3 	bl	8020f50 <iprintf>

  if (conn) {
 800e7ca:	697b      	ldr	r3, [r7, #20]
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d032      	beq.n	800e836 <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 800e7d0:	697b      	ldr	r3, [r7, #20]
 800e7d2:	785b      	ldrb	r3, [r3, #1]
 800e7d4:	2b01      	cmp	r3, #1
 800e7d6:	d104      	bne.n	800e7e2 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800e7d8:	2101      	movs	r1, #1
 800e7da:	6978      	ldr	r0, [r7, #20]
 800e7dc:	f000 ff24 	bl	800f628 <lwip_netconn_do_writemore>
 800e7e0:	e007      	b.n	800e7f2 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800e7e2:	697b      	ldr	r3, [r7, #20]
 800e7e4:	785b      	ldrb	r3, [r3, #1]
 800e7e6:	2b04      	cmp	r3, #4
 800e7e8:	d103      	bne.n	800e7f2 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800e7ea:	2101      	movs	r1, #1
 800e7ec:	6978      	ldr	r0, [r7, #20]
 800e7ee:	f000 fae1 	bl	800edb4 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800e7f2:	697b      	ldr	r3, [r7, #20]
 800e7f4:	685b      	ldr	r3, [r3, #4]
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d01d      	beq.n	800e836 <sent_tcp+0x92>
 800e7fa:	697b      	ldr	r3, [r7, #20]
 800e7fc:	685b      	ldr	r3, [r3, #4]
 800e7fe:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800e802:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800e806:	d316      	bcc.n	800e836 <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800e808:	697b      	ldr	r3, [r7, #20]
 800e80a:	685b      	ldr	r3, [r3, #4]
 800e80c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800e810:	2b04      	cmp	r3, #4
 800e812:	d810      	bhi.n	800e836 <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800e814:	697b      	ldr	r3, [r7, #20]
 800e816:	7f1b      	ldrb	r3, [r3, #28]
 800e818:	f023 0310 	bic.w	r3, r3, #16
 800e81c:	b2da      	uxtb	r2, r3
 800e81e:	697b      	ldr	r3, [r7, #20]
 800e820:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800e822:	697b      	ldr	r3, [r7, #20]
 800e824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e826:	2b00      	cmp	r3, #0
 800e828:	d005      	beq.n	800e836 <sent_tcp+0x92>
 800e82a:	697b      	ldr	r3, [r7, #20]
 800e82c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e82e:	88fa      	ldrh	r2, [r7, #6]
 800e830:	2102      	movs	r1, #2
 800e832:	6978      	ldr	r0, [r7, #20]
 800e834:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800e836:	2300      	movs	r3, #0
}
 800e838:	4618      	mov	r0, r3
 800e83a:	3718      	adds	r7, #24
 800e83c:	46bd      	mov	sp, r7
 800e83e:	bd80      	pop	{r7, pc}
 800e840:	08023558 	.word	0x08023558
 800e844:	080236d0 	.word	0x080236d0
 800e848:	080235bc 	.word	0x080235bc

0800e84c <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800e84c:	b580      	push	{r7, lr}
 800e84e:	b088      	sub	sp, #32
 800e850:	af00      	add	r7, sp, #0
 800e852:	6078      	str	r0, [r7, #4]
 800e854:	460b      	mov	r3, r1
 800e856:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800e85c:	69fb      	ldr	r3, [r7, #28]
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d106      	bne.n	800e870 <err_tcp+0x24>
 800e862:	4b5f      	ldr	r3, [pc, #380]	; (800e9e0 <err_tcp+0x194>)
 800e864:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800e868:	495e      	ldr	r1, [pc, #376]	; (800e9e4 <err_tcp+0x198>)
 800e86a:	485f      	ldr	r0, [pc, #380]	; (800e9e8 <err_tcp+0x19c>)
 800e86c:	f012 fb70 	bl	8020f50 <iprintf>

  SYS_ARCH_PROTECT(lev);
 800e870:	f007 f934 	bl	8015adc <sys_arch_protect>
 800e874:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800e876:	69fb      	ldr	r3, [r7, #28]
 800e878:	2200      	movs	r2, #0
 800e87a:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800e87c:	69fb      	ldr	r3, [r7, #28]
 800e87e:	78fa      	ldrb	r2, [r7, #3]
 800e880:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800e882:	69fb      	ldr	r3, [r7, #28]
 800e884:	7f1b      	ldrb	r3, [r3, #28]
 800e886:	f043 0301 	orr.w	r3, r3, #1
 800e88a:	b2da      	uxtb	r2, r3
 800e88c:	69fb      	ldr	r3, [r7, #28]
 800e88e:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800e890:	69fb      	ldr	r3, [r7, #28]
 800e892:	785b      	ldrb	r3, [r3, #1]
 800e894:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800e896:	69fb      	ldr	r3, [r7, #28]
 800e898:	2200      	movs	r2, #0
 800e89a:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800e89c:	69b8      	ldr	r0, [r7, #24]
 800e89e:	f007 f92b 	bl	8015af8 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800e8a2:	69fb      	ldr	r3, [r7, #28]
 800e8a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d005      	beq.n	800e8b6 <err_tcp+0x6a>
 800e8aa:	69fb      	ldr	r3, [r7, #28]
 800e8ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8ae:	2200      	movs	r2, #0
 800e8b0:	2104      	movs	r1, #4
 800e8b2:	69f8      	ldr	r0, [r7, #28]
 800e8b4:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800e8b6:	69fb      	ldr	r3, [r7, #28]
 800e8b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d005      	beq.n	800e8ca <err_tcp+0x7e>
 800e8be:	69fb      	ldr	r3, [r7, #28]
 800e8c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8c2:	2200      	movs	r2, #0
 800e8c4:	2100      	movs	r1, #0
 800e8c6:	69f8      	ldr	r0, [r7, #28]
 800e8c8:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800e8ca:	69fb      	ldr	r3, [r7, #28]
 800e8cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d005      	beq.n	800e8de <err_tcp+0x92>
 800e8d2:	69fb      	ldr	r3, [r7, #28]
 800e8d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8d6:	2200      	movs	r2, #0
 800e8d8:	2102      	movs	r1, #2
 800e8da:	69f8      	ldr	r0, [r7, #28]
 800e8dc:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800e8de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e8e2:	4618      	mov	r0, r3
 800e8e4:	f7ff fd8a 	bl	800e3fc <lwip_netconn_err_to_msg>
 800e8e8:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800e8ea:	69fb      	ldr	r3, [r7, #28]
 800e8ec:	3310      	adds	r3, #16
 800e8ee:	4618      	mov	r0, r3
 800e8f0:	f006 ffd9 	bl	80158a6 <sys_mbox_valid>
 800e8f4:	4603      	mov	r3, r0
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d005      	beq.n	800e906 <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800e8fa:	69fb      	ldr	r3, [r7, #28]
 800e8fc:	3310      	adds	r3, #16
 800e8fe:	6939      	ldr	r1, [r7, #16]
 800e900:	4618      	mov	r0, r3
 800e902:	f006 ff5b 	bl	80157bc <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800e906:	69fb      	ldr	r3, [r7, #28]
 800e908:	3314      	adds	r3, #20
 800e90a:	4618      	mov	r0, r3
 800e90c:	f006 ffcb 	bl	80158a6 <sys_mbox_valid>
 800e910:	4603      	mov	r3, r0
 800e912:	2b00      	cmp	r3, #0
 800e914:	d005      	beq.n	800e922 <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800e916:	69fb      	ldr	r3, [r7, #28]
 800e918:	3314      	adds	r3, #20
 800e91a:	6939      	ldr	r1, [r7, #16]
 800e91c:	4618      	mov	r0, r3
 800e91e:	f006 ff4d 	bl	80157bc <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800e922:	7dfb      	ldrb	r3, [r7, #23]
 800e924:	2b01      	cmp	r3, #1
 800e926:	d005      	beq.n	800e934 <err_tcp+0xe8>
 800e928:	7dfb      	ldrb	r3, [r7, #23]
 800e92a:	2b04      	cmp	r3, #4
 800e92c:	d002      	beq.n	800e934 <err_tcp+0xe8>
 800e92e:	7dfb      	ldrb	r3, [r7, #23]
 800e930:	2b03      	cmp	r3, #3
 800e932:	d143      	bne.n	800e9bc <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800e934:	69fb      	ldr	r3, [r7, #28]
 800e936:	7f1b      	ldrb	r3, [r3, #28]
 800e938:	f003 0304 	and.w	r3, r3, #4
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	bf14      	ite	ne
 800e940:	2301      	movne	r3, #1
 800e942:	2300      	moveq	r3, #0
 800e944:	b2db      	uxtb	r3, r3
 800e946:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800e948:	69fb      	ldr	r3, [r7, #28]
 800e94a:	7f1b      	ldrb	r3, [r3, #28]
 800e94c:	f023 0304 	bic.w	r3, r3, #4
 800e950:	b2da      	uxtb	r2, r3
 800e952:	69fb      	ldr	r3, [r7, #28]
 800e954:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d13b      	bne.n	800e9d4 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800e95c:	69fb      	ldr	r3, [r7, #28]
 800e95e:	6a1b      	ldr	r3, [r3, #32]
 800e960:	2b00      	cmp	r3, #0
 800e962:	d106      	bne.n	800e972 <err_tcp+0x126>
 800e964:	4b1e      	ldr	r3, [pc, #120]	; (800e9e0 <err_tcp+0x194>)
 800e966:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800e96a:	4920      	ldr	r1, [pc, #128]	; (800e9ec <err_tcp+0x1a0>)
 800e96c:	481e      	ldr	r0, [pc, #120]	; (800e9e8 <err_tcp+0x19c>)
 800e96e:	f012 faef 	bl	8020f50 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800e972:	7dfb      	ldrb	r3, [r7, #23]
 800e974:	2b04      	cmp	r3, #4
 800e976:	d104      	bne.n	800e982 <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800e978:	69fb      	ldr	r3, [r7, #28]
 800e97a:	6a1b      	ldr	r3, [r3, #32]
 800e97c:	2200      	movs	r2, #0
 800e97e:	711a      	strb	r2, [r3, #4]
 800e980:	e003      	b.n	800e98a <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800e982:	69fb      	ldr	r3, [r7, #28]
 800e984:	6a1b      	ldr	r3, [r3, #32]
 800e986:	78fa      	ldrb	r2, [r7, #3]
 800e988:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800e98a:	69fb      	ldr	r3, [r7, #28]
 800e98c:	6a1b      	ldr	r3, [r3, #32]
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	330c      	adds	r3, #12
 800e992:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800e994:	68b8      	ldr	r0, [r7, #8]
 800e996:	f007 f817 	bl	80159c8 <sys_sem_valid>
 800e99a:	4603      	mov	r3, r0
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d106      	bne.n	800e9ae <err_tcp+0x162>
 800e9a0:	4b0f      	ldr	r3, [pc, #60]	; (800e9e0 <err_tcp+0x194>)
 800e9a2:	f240 12ef 	movw	r2, #495	; 0x1ef
 800e9a6:	4912      	ldr	r1, [pc, #72]	; (800e9f0 <err_tcp+0x1a4>)
 800e9a8:	480f      	ldr	r0, [pc, #60]	; (800e9e8 <err_tcp+0x19c>)
 800e9aa:	f012 fad1 	bl	8020f50 <iprintf>
      conn->current_msg = NULL;
 800e9ae:	69fb      	ldr	r3, [r7, #28]
 800e9b0:	2200      	movs	r2, #0
 800e9b2:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800e9b4:	68b8      	ldr	r0, [r7, #8]
 800e9b6:	f006 ffed 	bl	8015994 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800e9ba:	e00b      	b.n	800e9d4 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800e9bc:	69fb      	ldr	r3, [r7, #28]
 800e9be:	6a1b      	ldr	r3, [r3, #32]
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d008      	beq.n	800e9d6 <err_tcp+0x18a>
 800e9c4:	4b06      	ldr	r3, [pc, #24]	; (800e9e0 <err_tcp+0x194>)
 800e9c6:	f240 12f7 	movw	r2, #503	; 0x1f7
 800e9ca:	490a      	ldr	r1, [pc, #40]	; (800e9f4 <err_tcp+0x1a8>)
 800e9cc:	4806      	ldr	r0, [pc, #24]	; (800e9e8 <err_tcp+0x19c>)
 800e9ce:	f012 fabf 	bl	8020f50 <iprintf>
  }
}
 800e9d2:	e000      	b.n	800e9d6 <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800e9d4:	bf00      	nop
}
 800e9d6:	bf00      	nop
 800e9d8:	3720      	adds	r7, #32
 800e9da:	46bd      	mov	sp, r7
 800e9dc:	bd80      	pop	{r7, pc}
 800e9de:	bf00      	nop
 800e9e0:	08023558 	.word	0x08023558
 800e9e4:	080236d0 	.word	0x080236d0
 800e9e8:	080235bc 	.word	0x080235bc
 800e9ec:	080236e0 	.word	0x080236e0
 800e9f0:	080236fc 	.word	0x080236fc
 800e9f4:	08023718 	.word	0x08023718

0800e9f8 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800e9f8:	b580      	push	{r7, lr}
 800e9fa:	b084      	sub	sp, #16
 800e9fc:	af00      	add	r7, sp, #0
 800e9fe:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	685b      	ldr	r3, [r3, #4]
 800ea04:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800ea06:	6879      	ldr	r1, [r7, #4]
 800ea08:	68f8      	ldr	r0, [r7, #12]
 800ea0a:	f008 fc11 	bl	8017230 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800ea0e:	490a      	ldr	r1, [pc, #40]	; (800ea38 <setup_tcp+0x40>)
 800ea10:	68f8      	ldr	r0, [r7, #12]
 800ea12:	f008 fc1f 	bl	8017254 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800ea16:	4909      	ldr	r1, [pc, #36]	; (800ea3c <setup_tcp+0x44>)
 800ea18:	68f8      	ldr	r0, [r7, #12]
 800ea1a:	f008 fc3d 	bl	8017298 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800ea1e:	2202      	movs	r2, #2
 800ea20:	4907      	ldr	r1, [pc, #28]	; (800ea40 <setup_tcp+0x48>)
 800ea22:	68f8      	ldr	r0, [r7, #12]
 800ea24:	f008 fc94 	bl	8017350 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800ea28:	4906      	ldr	r1, [pc, #24]	; (800ea44 <setup_tcp+0x4c>)
 800ea2a:	68f8      	ldr	r0, [r7, #12]
 800ea2c:	f008 fc56 	bl	80172dc <tcp_err>
}
 800ea30:	bf00      	nop
 800ea32:	3710      	adds	r7, #16
 800ea34:	46bd      	mov	sp, r7
 800ea36:	bd80      	pop	{r7, pc}
 800ea38:	0800e5d1 	.word	0x0800e5d1
 800ea3c:	0800e7a5 	.word	0x0800e7a5
 800ea40:	0800e6dd 	.word	0x0800e6dd
 800ea44:	0800e84d 	.word	0x0800e84d

0800ea48 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800ea48:	b590      	push	{r4, r7, lr}
 800ea4a:	b085      	sub	sp, #20
 800ea4c:	af00      	add	r7, sp, #0
 800ea4e:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800ea50:	2300      	movs	r3, #0
 800ea52:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	685b      	ldr	r3, [r3, #4]
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d006      	beq.n	800ea6c <pcb_new+0x24>
 800ea5e:	4b2b      	ldr	r3, [pc, #172]	; (800eb0c <pcb_new+0xc4>)
 800ea60:	f240 2265 	movw	r2, #613	; 0x265
 800ea64:	492a      	ldr	r1, [pc, #168]	; (800eb10 <pcb_new+0xc8>)
 800ea66:	482b      	ldr	r0, [pc, #172]	; (800eb14 <pcb_new+0xcc>)
 800ea68:	f012 fa72 	bl	8020f50 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	781b      	ldrb	r3, [r3, #0]
 800ea72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ea76:	2b10      	cmp	r3, #16
 800ea78:	d022      	beq.n	800eac0 <pcb_new+0x78>
 800ea7a:	2b20      	cmp	r3, #32
 800ea7c:	d133      	bne.n	800eae6 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	681c      	ldr	r4, [r3, #0]
 800ea82:	7bfb      	ldrb	r3, [r7, #15]
 800ea84:	4618      	mov	r0, r3
 800ea86:	f00e f8f2 	bl	801cc6e <udp_new_ip_type>
 800ea8a:	4603      	mov	r3, r0
 800ea8c:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	685b      	ldr	r3, [r3, #4]
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d02a      	beq.n	800eaee <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	781b      	ldrb	r3, [r3, #0]
 800ea9e:	2b22      	cmp	r3, #34	; 0x22
 800eaa0:	d104      	bne.n	800eaac <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	685b      	ldr	r3, [r3, #4]
 800eaa8:	2201      	movs	r2, #1
 800eaaa:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	6858      	ldr	r0, [r3, #4]
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	461a      	mov	r2, r3
 800eab8:	4917      	ldr	r1, [pc, #92]	; (800eb18 <pcb_new+0xd0>)
 800eaba:	f00e f85f 	bl	801cb7c <udp_recv>
      }
      break;
 800eabe:	e016      	b.n	800eaee <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	681c      	ldr	r4, [r3, #0]
 800eac4:	7bfb      	ldrb	r3, [r7, #15]
 800eac6:	4618      	mov	r0, r3
 800eac8:	f008 fba4 	bl	8017214 <tcp_new_ip_type>
 800eacc:	4603      	mov	r3, r0
 800eace:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	681b      	ldr	r3, [r3, #0]
 800ead4:	685b      	ldr	r3, [r3, #4]
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d00b      	beq.n	800eaf2 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	4618      	mov	r0, r3
 800eae0:	f7ff ff8a 	bl	800e9f8 <setup_tcp>
      }
      break;
 800eae4:	e005      	b.n	800eaf2 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	22fa      	movs	r2, #250	; 0xfa
 800eaea:	711a      	strb	r2, [r3, #4]
      return;
 800eaec:	e00a      	b.n	800eb04 <pcb_new+0xbc>
      break;
 800eaee:	bf00      	nop
 800eaf0:	e000      	b.n	800eaf4 <pcb_new+0xac>
      break;
 800eaf2:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	685b      	ldr	r3, [r3, #4]
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d102      	bne.n	800eb04 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	22ff      	movs	r2, #255	; 0xff
 800eb02:	711a      	strb	r2, [r3, #4]
  }
}
 800eb04:	3714      	adds	r7, #20
 800eb06:	46bd      	mov	sp, r7
 800eb08:	bd90      	pop	{r4, r7, pc}
 800eb0a:	bf00      	nop
 800eb0c:	08023558 	.word	0x08023558
 800eb10:	0802375c 	.word	0x0802375c
 800eb14:	080235bc 	.word	0x080235bc
 800eb18:	0800e4d5 	.word	0x0800e4d5

0800eb1c <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800eb1c:	b580      	push	{r7, lr}
 800eb1e:	b084      	sub	sp, #16
 800eb20:	af00      	add	r7, sp, #0
 800eb22:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	2200      	movs	r2, #0
 800eb2c:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	685b      	ldr	r3, [r3, #4]
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d102      	bne.n	800eb3e <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800eb38:	68f8      	ldr	r0, [r7, #12]
 800eb3a:	f7ff ff85 	bl	800ea48 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800eb3e:	bf00      	nop
 800eb40:	3710      	adds	r7, #16
 800eb42:	46bd      	mov	sp, r7
 800eb44:	bd80      	pop	{r7, pc}
	...

0800eb48 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800eb48:	b580      	push	{r7, lr}
 800eb4a:	b086      	sub	sp, #24
 800eb4c:	af00      	add	r7, sp, #0
 800eb4e:	4603      	mov	r3, r0
 800eb50:	6039      	str	r1, [r7, #0]
 800eb52:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800eb54:	2300      	movs	r3, #0
 800eb56:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800eb58:	2007      	movs	r0, #7
 800eb5a:	f004 fa9f 	bl	801309c <memp_malloc>
 800eb5e:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d101      	bne.n	800eb6a <netconn_alloc+0x22>
    return NULL;
 800eb66:	2300      	movs	r3, #0
 800eb68:	e052      	b.n	800ec10 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	2200      	movs	r2, #0
 800eb6e:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	79fa      	ldrb	r2, [r7, #7]
 800eb74:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	2200      	movs	r2, #0
 800eb7a:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800eb7c:	79fb      	ldrb	r3, [r7, #7]
 800eb7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800eb82:	2b10      	cmp	r3, #16
 800eb84:	d004      	beq.n	800eb90 <netconn_alloc+0x48>
 800eb86:	2b20      	cmp	r3, #32
 800eb88:	d105      	bne.n	800eb96 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800eb8a:	2306      	movs	r3, #6
 800eb8c:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800eb8e:	e00a      	b.n	800eba6 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800eb90:	2306      	movs	r3, #6
 800eb92:	617b      	str	r3, [r7, #20]
      break;
 800eb94:	e007      	b.n	800eba6 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800eb96:	4b20      	ldr	r3, [pc, #128]	; (800ec18 <netconn_alloc+0xd0>)
 800eb98:	f240 22e5 	movw	r2, #741	; 0x2e5
 800eb9c:	491f      	ldr	r1, [pc, #124]	; (800ec1c <netconn_alloc+0xd4>)
 800eb9e:	4820      	ldr	r0, [pc, #128]	; (800ec20 <netconn_alloc+0xd8>)
 800eba0:	f012 f9d6 	bl	8020f50 <iprintf>
      goto free_and_return;
 800eba4:	e02f      	b.n	800ec06 <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	3310      	adds	r3, #16
 800ebaa:	6979      	ldr	r1, [r7, #20]
 800ebac:	4618      	mov	r0, r3
 800ebae:	f006 fdd1 	bl	8015754 <sys_mbox_new>
 800ebb2:	4603      	mov	r3, r0
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d125      	bne.n	800ec04 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	330c      	adds	r3, #12
 800ebbc:	2100      	movs	r1, #0
 800ebbe:	4618      	mov	r0, r3
 800ebc0:	f006 fe8f 	bl	80158e2 <sys_sem_new>
 800ebc4:	4603      	mov	r3, r0
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d005      	beq.n	800ebd6 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	3310      	adds	r3, #16
 800ebce:	4618      	mov	r0, r3
 800ebd0:	f006 fde2 	bl	8015798 <sys_mbox_free>
    goto free_and_return;
 800ebd4:	e017      	b.n	800ec06 <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	3314      	adds	r3, #20
 800ebda:	4618      	mov	r0, r3
 800ebdc:	f006 fe74 	bl	80158c8 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	2200      	movs	r2, #0
 800ebe4:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	f04f 32ff 	mov.w	r2, #4294967295
 800ebec:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	683a      	ldr	r2, [r7, #0]
 800ebf2:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	2200      	movs	r2, #0
 800ebf8:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	7cfa      	ldrb	r2, [r7, #19]
 800ebfe:	771a      	strb	r2, [r3, #28]
  return conn;
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	e005      	b.n	800ec10 <netconn_alloc+0xc8>
    goto free_and_return;
 800ec04:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800ec06:	68f9      	ldr	r1, [r7, #12]
 800ec08:	2007      	movs	r0, #7
 800ec0a:	f004 fabd 	bl	8013188 <memp_free>
  return NULL;
 800ec0e:	2300      	movs	r3, #0
}
 800ec10:	4618      	mov	r0, r3
 800ec12:	3718      	adds	r7, #24
 800ec14:	46bd      	mov	sp, r7
 800ec16:	bd80      	pop	{r7, pc}
 800ec18:	08023558 	.word	0x08023558
 800ec1c:	0802377c 	.word	0x0802377c
 800ec20:	080235bc 	.word	0x080235bc

0800ec24 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800ec24:	b580      	push	{r7, lr}
 800ec26:	b082      	sub	sp, #8
 800ec28:	af00      	add	r7, sp, #0
 800ec2a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	685b      	ldr	r3, [r3, #4]
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d006      	beq.n	800ec42 <netconn_free+0x1e>
 800ec34:	4b1b      	ldr	r3, [pc, #108]	; (800eca4 <netconn_free+0x80>)
 800ec36:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800ec3a:	491b      	ldr	r1, [pc, #108]	; (800eca8 <netconn_free+0x84>)
 800ec3c:	481b      	ldr	r0, [pc, #108]	; (800ecac <netconn_free+0x88>)
 800ec3e:	f012 f987 	bl	8020f50 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	3310      	adds	r3, #16
 800ec46:	4618      	mov	r0, r3
 800ec48:	f006 fe2d 	bl	80158a6 <sys_mbox_valid>
 800ec4c:	4603      	mov	r3, r0
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d006      	beq.n	800ec60 <netconn_free+0x3c>
 800ec52:	4b14      	ldr	r3, [pc, #80]	; (800eca4 <netconn_free+0x80>)
 800ec54:	f44f 7249 	mov.w	r2, #804	; 0x324
 800ec58:	4915      	ldr	r1, [pc, #84]	; (800ecb0 <netconn_free+0x8c>)
 800ec5a:	4814      	ldr	r0, [pc, #80]	; (800ecac <netconn_free+0x88>)
 800ec5c:	f012 f978 	bl	8020f50 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	3314      	adds	r3, #20
 800ec64:	4618      	mov	r0, r3
 800ec66:	f006 fe1e 	bl	80158a6 <sys_mbox_valid>
 800ec6a:	4603      	mov	r3, r0
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d006      	beq.n	800ec7e <netconn_free+0x5a>
 800ec70:	4b0c      	ldr	r3, [pc, #48]	; (800eca4 <netconn_free+0x80>)
 800ec72:	f240 3227 	movw	r2, #807	; 0x327
 800ec76:	490f      	ldr	r1, [pc, #60]	; (800ecb4 <netconn_free+0x90>)
 800ec78:	480c      	ldr	r0, [pc, #48]	; (800ecac <netconn_free+0x88>)
 800ec7a:	f012 f969 	bl	8020f50 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	330c      	adds	r3, #12
 800ec82:	4618      	mov	r0, r3
 800ec84:	f006 fe93 	bl	80159ae <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	330c      	adds	r3, #12
 800ec8c:	4618      	mov	r0, r3
 800ec8e:	f006 feac 	bl	80159ea <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800ec92:	6879      	ldr	r1, [r7, #4]
 800ec94:	2007      	movs	r0, #7
 800ec96:	f004 fa77 	bl	8013188 <memp_free>
}
 800ec9a:	bf00      	nop
 800ec9c:	3708      	adds	r7, #8
 800ec9e:	46bd      	mov	sp, r7
 800eca0:	bd80      	pop	{r7, pc}
 800eca2:	bf00      	nop
 800eca4:	08023558 	.word	0x08023558
 800eca8:	080237a4 	.word	0x080237a4
 800ecac:	080235bc 	.word	0x080235bc
 800ecb0:	080237d4 	.word	0x080237d4
 800ecb4:	08023810 	.word	0x08023810

0800ecb8 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800ecb8:	b580      	push	{r7, lr}
 800ecba:	b086      	sub	sp, #24
 800ecbc:	af00      	add	r7, sp, #0
 800ecbe:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	3310      	adds	r3, #16
 800ecc4:	4618      	mov	r0, r3
 800ecc6:	f006 fdee 	bl	80158a6 <sys_mbox_valid>
 800ecca:	4603      	mov	r3, r0
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d02f      	beq.n	800ed30 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800ecd0:	e018      	b.n	800ed04 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	781b      	ldrb	r3, [r3, #0]
 800ecd6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ecda:	2b10      	cmp	r3, #16
 800ecdc:	d10e      	bne.n	800ecfc <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800ecde:	693b      	ldr	r3, [r7, #16]
 800ece0:	f107 020f 	add.w	r2, r7, #15
 800ece4:	4611      	mov	r1, r2
 800ece6:	4618      	mov	r0, r3
 800ece8:	f7ff fbba 	bl	800e460 <lwip_netconn_is_err_msg>
 800ecec:	4603      	mov	r3, r0
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d108      	bne.n	800ed04 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800ecf2:	693b      	ldr	r3, [r7, #16]
 800ecf4:	4618      	mov	r0, r3
 800ecf6:	f005 f9ab 	bl	8014050 <pbuf_free>
 800ecfa:	e003      	b.n	800ed04 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800ecfc:	693b      	ldr	r3, [r7, #16]
 800ecfe:	4618      	mov	r0, r3
 800ed00:	f004 fa6c 	bl	80131dc <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	3310      	adds	r3, #16
 800ed08:	f107 0210 	add.w	r2, r7, #16
 800ed0c:	4611      	mov	r1, r2
 800ed0e:	4618      	mov	r0, r3
 800ed10:	f006 fdad 	bl	801586e <sys_arch_mbox_tryfetch>
 800ed14:	4603      	mov	r3, r0
 800ed16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed1a:	d1da      	bne.n	800ecd2 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	3310      	adds	r3, #16
 800ed20:	4618      	mov	r0, r3
 800ed22:	f006 fd39 	bl	8015798 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	3310      	adds	r3, #16
 800ed2a:	4618      	mov	r0, r3
 800ed2c:	f006 fdcc 	bl	80158c8 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	3314      	adds	r3, #20
 800ed34:	4618      	mov	r0, r3
 800ed36:	f006 fdb6 	bl	80158a6 <sys_mbox_valid>
 800ed3a:	4603      	mov	r3, r0
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d034      	beq.n	800edaa <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800ed40:	e01d      	b.n	800ed7e <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800ed42:	693b      	ldr	r3, [r7, #16]
 800ed44:	f107 020e 	add.w	r2, r7, #14
 800ed48:	4611      	mov	r1, r2
 800ed4a:	4618      	mov	r0, r3
 800ed4c:	f7ff fb88 	bl	800e460 <lwip_netconn_is_err_msg>
 800ed50:	4603      	mov	r3, r0
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d113      	bne.n	800ed7e <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800ed56:	693b      	ldr	r3, [r7, #16]
 800ed58:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800ed5a:	6978      	ldr	r0, [r7, #20]
 800ed5c:	f7ff ffac 	bl	800ecb8 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800ed60:	697b      	ldr	r3, [r7, #20]
 800ed62:	685b      	ldr	r3, [r3, #4]
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d007      	beq.n	800ed78 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800ed68:	697b      	ldr	r3, [r7, #20]
 800ed6a:	685b      	ldr	r3, [r3, #4]
 800ed6c:	4618      	mov	r0, r3
 800ed6e:	f007 fa1f 	bl	80161b0 <tcp_abort>
            newconn->pcb.tcp = NULL;
 800ed72:	697b      	ldr	r3, [r7, #20]
 800ed74:	2200      	movs	r2, #0
 800ed76:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800ed78:	6978      	ldr	r0, [r7, #20]
 800ed7a:	f7ff ff53 	bl	800ec24 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	3314      	adds	r3, #20
 800ed82:	f107 0210 	add.w	r2, r7, #16
 800ed86:	4611      	mov	r1, r2
 800ed88:	4618      	mov	r0, r3
 800ed8a:	f006 fd70 	bl	801586e <sys_arch_mbox_tryfetch>
 800ed8e:	4603      	mov	r3, r0
 800ed90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed94:	d1d5      	bne.n	800ed42 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	3314      	adds	r3, #20
 800ed9a:	4618      	mov	r0, r3
 800ed9c:	f006 fcfc 	bl	8015798 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	3314      	adds	r3, #20
 800eda4:	4618      	mov	r0, r3
 800eda6:	f006 fd8f 	bl	80158c8 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800edaa:	bf00      	nop
 800edac:	3718      	adds	r7, #24
 800edae:	46bd      	mov	sp, r7
 800edb0:	bd80      	pop	{r7, pc}
	...

0800edb4 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800edb4:	b580      	push	{r7, lr}
 800edb6:	b086      	sub	sp, #24
 800edb8:	af00      	add	r7, sp, #0
 800edba:	6078      	str	r0, [r7, #4]
 800edbc:	460b      	mov	r3, r1
 800edbe:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800edc0:	2300      	movs	r3, #0
 800edc2:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d106      	bne.n	800edd8 <lwip_netconn_do_close_internal+0x24>
 800edca:	4ba1      	ldr	r3, [pc, #644]	; (800f050 <lwip_netconn_do_close_internal+0x29c>)
 800edcc:	f240 32a2 	movw	r2, #930	; 0x3a2
 800edd0:	49a0      	ldr	r1, [pc, #640]	; (800f054 <lwip_netconn_do_close_internal+0x2a0>)
 800edd2:	48a1      	ldr	r0, [pc, #644]	; (800f058 <lwip_netconn_do_close_internal+0x2a4>)
 800edd4:	f012 f8bc 	bl	8020f50 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	781b      	ldrb	r3, [r3, #0]
 800eddc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ede0:	2b10      	cmp	r3, #16
 800ede2:	d006      	beq.n	800edf2 <lwip_netconn_do_close_internal+0x3e>
 800ede4:	4b9a      	ldr	r3, [pc, #616]	; (800f050 <lwip_netconn_do_close_internal+0x29c>)
 800ede6:	f240 32a3 	movw	r2, #931	; 0x3a3
 800edea:	499c      	ldr	r1, [pc, #624]	; (800f05c <lwip_netconn_do_close_internal+0x2a8>)
 800edec:	489a      	ldr	r0, [pc, #616]	; (800f058 <lwip_netconn_do_close_internal+0x2a4>)
 800edee:	f012 f8af 	bl	8020f50 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	785b      	ldrb	r3, [r3, #1]
 800edf6:	2b04      	cmp	r3, #4
 800edf8:	d006      	beq.n	800ee08 <lwip_netconn_do_close_internal+0x54>
 800edfa:	4b95      	ldr	r3, [pc, #596]	; (800f050 <lwip_netconn_do_close_internal+0x29c>)
 800edfc:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 800ee00:	4997      	ldr	r1, [pc, #604]	; (800f060 <lwip_netconn_do_close_internal+0x2ac>)
 800ee02:	4895      	ldr	r0, [pc, #596]	; (800f058 <lwip_netconn_do_close_internal+0x2a4>)
 800ee04:	f012 f8a4 	bl	8020f50 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	685b      	ldr	r3, [r3, #4]
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d106      	bne.n	800ee1e <lwip_netconn_do_close_internal+0x6a>
 800ee10:	4b8f      	ldr	r3, [pc, #572]	; (800f050 <lwip_netconn_do_close_internal+0x29c>)
 800ee12:	f240 32a5 	movw	r2, #933	; 0x3a5
 800ee16:	4993      	ldr	r1, [pc, #588]	; (800f064 <lwip_netconn_do_close_internal+0x2b0>)
 800ee18:	488f      	ldr	r0, [pc, #572]	; (800f058 <lwip_netconn_do_close_internal+0x2a4>)
 800ee1a:	f012 f899 	bl	8020f50 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	6a1b      	ldr	r3, [r3, #32]
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d106      	bne.n	800ee34 <lwip_netconn_do_close_internal+0x80>
 800ee26:	4b8a      	ldr	r3, [pc, #552]	; (800f050 <lwip_netconn_do_close_internal+0x29c>)
 800ee28:	f240 32a6 	movw	r2, #934	; 0x3a6
 800ee2c:	498e      	ldr	r1, [pc, #568]	; (800f068 <lwip_netconn_do_close_internal+0x2b4>)
 800ee2e:	488a      	ldr	r0, [pc, #552]	; (800f058 <lwip_netconn_do_close_internal+0x2a4>)
 800ee30:	f012 f88e 	bl	8020f50 <iprintf>

  tpcb = conn->pcb.tcp;
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	685b      	ldr	r3, [r3, #4]
 800ee38:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	6a1b      	ldr	r3, [r3, #32]
 800ee3e:	7a1b      	ldrb	r3, [r3, #8]
 800ee40:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800ee42:	7bfb      	ldrb	r3, [r7, #15]
 800ee44:	f003 0301 	and.w	r3, r3, #1
 800ee48:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800ee4a:	7bfb      	ldrb	r3, [r7, #15]
 800ee4c:	f003 0302 	and.w	r3, r3, #2
 800ee50:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800ee52:	7bfb      	ldrb	r3, [r7, #15]
 800ee54:	2b03      	cmp	r3, #3
 800ee56:	d102      	bne.n	800ee5e <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800ee58:	2301      	movs	r3, #1
 800ee5a:	75bb      	strb	r3, [r7, #22]
 800ee5c:	e01f      	b.n	800ee9e <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800ee5e:	7bbb      	ldrb	r3, [r7, #14]
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d00e      	beq.n	800ee82 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800ee64:	693b      	ldr	r3, [r7, #16]
 800ee66:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800ee68:	2b05      	cmp	r3, #5
 800ee6a:	d007      	beq.n	800ee7c <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800ee6c:	693b      	ldr	r3, [r7, #16]
 800ee6e:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800ee70:	2b06      	cmp	r3, #6
 800ee72:	d003      	beq.n	800ee7c <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800ee74:	693b      	ldr	r3, [r7, #16]
 800ee76:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800ee78:	2b08      	cmp	r3, #8
 800ee7a:	d102      	bne.n	800ee82 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800ee7c:	2301      	movs	r3, #1
 800ee7e:	75bb      	strb	r3, [r7, #22]
 800ee80:	e00d      	b.n	800ee9e <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800ee82:	7b7b      	ldrb	r3, [r7, #13]
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d008      	beq.n	800ee9a <lwip_netconn_do_close_internal+0xe6>
 800ee88:	693b      	ldr	r3, [r7, #16]
 800ee8a:	8b5b      	ldrh	r3, [r3, #26]
 800ee8c:	f003 0310 	and.w	r3, r3, #16
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d002      	beq.n	800ee9a <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800ee94:	2301      	movs	r3, #1
 800ee96:	75bb      	strb	r3, [r7, #22]
 800ee98:	e001      	b.n	800ee9e <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800ee9a:	2300      	movs	r3, #0
 800ee9c:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800ee9e:	7dbb      	ldrb	r3, [r7, #22]
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d003      	beq.n	800eeac <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800eea4:	2100      	movs	r1, #0
 800eea6:	6938      	ldr	r0, [r7, #16]
 800eea8:	f008 f9c2 	bl	8017230 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800eeac:	693b      	ldr	r3, [r7, #16]
 800eeae:	7d1b      	ldrb	r3, [r3, #20]
 800eeb0:	2b01      	cmp	r3, #1
 800eeb2:	d104      	bne.n	800eebe <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800eeb4:	2100      	movs	r1, #0
 800eeb6:	6938      	ldr	r0, [r7, #16]
 800eeb8:	f008 fa32 	bl	8017320 <tcp_accept>
 800eebc:	e01d      	b.n	800eefa <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800eebe:	7bbb      	ldrb	r3, [r7, #14]
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d007      	beq.n	800eed4 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800eec4:	2100      	movs	r1, #0
 800eec6:	6938      	ldr	r0, [r7, #16]
 800eec8:	f008 f9c4 	bl	8017254 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800eecc:	2100      	movs	r1, #0
 800eece:	6938      	ldr	r0, [r7, #16]
 800eed0:	f008 fa26 	bl	8017320 <tcp_accept>
    }
    if (shut_tx) {
 800eed4:	7b7b      	ldrb	r3, [r7, #13]
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d003      	beq.n	800eee2 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800eeda:	2100      	movs	r1, #0
 800eedc:	6938      	ldr	r0, [r7, #16]
 800eede:	f008 f9db 	bl	8017298 <tcp_sent>
    }
    if (shut_close) {
 800eee2:	7dbb      	ldrb	r3, [r7, #22]
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d008      	beq.n	800eefa <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800eee8:	2200      	movs	r2, #0
 800eeea:	2100      	movs	r1, #0
 800eeec:	6938      	ldr	r0, [r7, #16]
 800eeee:	f008 fa2f 	bl	8017350 <tcp_poll>
      tcp_err(tpcb, NULL);
 800eef2:	2100      	movs	r1, #0
 800eef4:	6938      	ldr	r0, [r7, #16]
 800eef6:	f008 f9f1 	bl	80172dc <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800eefa:	7dbb      	ldrb	r3, [r7, #22]
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d005      	beq.n	800ef0c <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800ef00:	6938      	ldr	r0, [r7, #16]
 800ef02:	f007 f811 	bl	8015f28 <tcp_close>
 800ef06:	4603      	mov	r3, r0
 800ef08:	75fb      	strb	r3, [r7, #23]
 800ef0a:	e007      	b.n	800ef1c <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800ef0c:	7bbb      	ldrb	r3, [r7, #14]
 800ef0e:	7b7a      	ldrb	r2, [r7, #13]
 800ef10:	4619      	mov	r1, r3
 800ef12:	6938      	ldr	r0, [r7, #16]
 800ef14:	f007 f834 	bl	8015f80 <tcp_shutdown>
 800ef18:	4603      	mov	r3, r0
 800ef1a:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800ef1c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d102      	bne.n	800ef2a <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800ef24:	2301      	movs	r3, #1
 800ef26:	757b      	strb	r3, [r7, #21]
 800ef28:	e016      	b.n	800ef58 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800ef2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ef2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef32:	d10f      	bne.n	800ef54 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	6a1b      	ldr	r3, [r3, #32]
 800ef38:	7a5b      	ldrb	r3, [r3, #9]
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d10c      	bne.n	800ef58 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800ef3e:	2301      	movs	r3, #1
 800ef40:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800ef42:	7dbb      	ldrb	r3, [r7, #22]
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d007      	beq.n	800ef58 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800ef48:	6938      	ldr	r0, [r7, #16]
 800ef4a:	f007 f931 	bl	80161b0 <tcp_abort>
          err = ERR_OK;
 800ef4e:	2300      	movs	r3, #0
 800ef50:	75fb      	strb	r3, [r7, #23]
 800ef52:	e001      	b.n	800ef58 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800ef54:	2301      	movs	r3, #1
 800ef56:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800ef58:	7d7b      	ldrb	r3, [r7, #21]
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d044      	beq.n	800efe8 <lwip_netconn_do_close_internal+0x234>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	6a1b      	ldr	r3, [r3, #32]
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	330c      	adds	r3, #12
 800ef66:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	6a1b      	ldr	r3, [r3, #32]
 800ef6c:	7dfa      	ldrb	r2, [r7, #23]
 800ef6e:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	2200      	movs	r2, #0
 800ef74:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	2200      	movs	r2, #0
 800ef7a:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800ef7c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d129      	bne.n	800efd8 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800ef84:	7dbb      	ldrb	r3, [r7, #22]
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d00c      	beq.n	800efa4 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	2200      	movs	r2, #0
 800ef8e:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d005      	beq.n	800efa4 <lwip_netconn_do_close_internal+0x1f0>
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef9c:	2200      	movs	r2, #0
 800ef9e:	2104      	movs	r1, #4
 800efa0:	6878      	ldr	r0, [r7, #4]
 800efa2:	4798      	blx	r3
      }
      if (shut_rx) {
 800efa4:	7bbb      	ldrb	r3, [r7, #14]
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d009      	beq.n	800efbe <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d005      	beq.n	800efbe <lwip_netconn_do_close_internal+0x20a>
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efb6:	2200      	movs	r2, #0
 800efb8:	2100      	movs	r1, #0
 800efba:	6878      	ldr	r0, [r7, #4]
 800efbc:	4798      	blx	r3
      }
      if (shut_tx) {
 800efbe:	7b7b      	ldrb	r3, [r7, #13]
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	d009      	beq.n	800efd8 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d005      	beq.n	800efd8 <lwip_netconn_do_close_internal+0x224>
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efd0:	2200      	movs	r2, #0
 800efd2:	2102      	movs	r1, #2
 800efd4:	6878      	ldr	r0, [r7, #4]
 800efd6:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800efd8:	78fb      	ldrb	r3, [r7, #3]
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d002      	beq.n	800efe4 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800efde:	68b8      	ldr	r0, [r7, #8]
 800efe0:	f006 fcd8 	bl	8015994 <sys_sem_signal>
    }
    return ERR_OK;
 800efe4:	2300      	movs	r3, #0
 800efe6:	e02e      	b.n	800f046 <lwip_netconn_do_close_internal+0x292>
  }
  if (!close_finished) {
 800efe8:	7d7b      	ldrb	r3, [r7, #21]
 800efea:	2b00      	cmp	r3, #0
 800efec:	d11e      	bne.n	800f02c <lwip_netconn_do_close_internal+0x278>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800efee:	693b      	ldr	r3, [r7, #16]
 800eff0:	7d1b      	ldrb	r3, [r3, #20]
 800eff2:	2b01      	cmp	r3, #1
 800eff4:	d106      	bne.n	800f004 <lwip_netconn_do_close_internal+0x250>
 800eff6:	4b16      	ldr	r3, [pc, #88]	; (800f050 <lwip_netconn_do_close_internal+0x29c>)
 800eff8:	f240 4241 	movw	r2, #1089	; 0x441
 800effc:	491b      	ldr	r1, [pc, #108]	; (800f06c <lwip_netconn_do_close_internal+0x2b8>)
 800effe:	4816      	ldr	r0, [pc, #88]	; (800f058 <lwip_netconn_do_close_internal+0x2a4>)
 800f000:	f011 ffa6 	bl	8020f50 <iprintf>
    if (shut_tx) {
 800f004:	7b7b      	ldrb	r3, [r7, #13]
 800f006:	2b00      	cmp	r3, #0
 800f008:	d003      	beq.n	800f012 <lwip_netconn_do_close_internal+0x25e>
      tcp_sent(tpcb, sent_tcp);
 800f00a:	4919      	ldr	r1, [pc, #100]	; (800f070 <lwip_netconn_do_close_internal+0x2bc>)
 800f00c:	6938      	ldr	r0, [r7, #16]
 800f00e:	f008 f943 	bl	8017298 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800f012:	2201      	movs	r2, #1
 800f014:	4917      	ldr	r1, [pc, #92]	; (800f074 <lwip_netconn_do_close_internal+0x2c0>)
 800f016:	6938      	ldr	r0, [r7, #16]
 800f018:	f008 f99a 	bl	8017350 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800f01c:	4916      	ldr	r1, [pc, #88]	; (800f078 <lwip_netconn_do_close_internal+0x2c4>)
 800f01e:	6938      	ldr	r0, [r7, #16]
 800f020:	f008 f95c 	bl	80172dc <tcp_err>
    tcp_arg(tpcb, conn);
 800f024:	6879      	ldr	r1, [r7, #4]
 800f026:	6938      	ldr	r0, [r7, #16]
 800f028:	f008 f902 	bl	8017230 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800f02c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f030:	2b00      	cmp	r3, #0
 800f032:	d106      	bne.n	800f042 <lwip_netconn_do_close_internal+0x28e>
 800f034:	4b06      	ldr	r3, [pc, #24]	; (800f050 <lwip_netconn_do_close_internal+0x29c>)
 800f036:	f240 424d 	movw	r2, #1101	; 0x44d
 800f03a:	4910      	ldr	r1, [pc, #64]	; (800f07c <lwip_netconn_do_close_internal+0x2c8>)
 800f03c:	4806      	ldr	r0, [pc, #24]	; (800f058 <lwip_netconn_do_close_internal+0x2a4>)
 800f03e:	f011 ff87 	bl	8020f50 <iprintf>
  return err;
 800f042:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f046:	4618      	mov	r0, r3
 800f048:	3718      	adds	r7, #24
 800f04a:	46bd      	mov	sp, r7
 800f04c:	bd80      	pop	{r7, pc}
 800f04e:	bf00      	nop
 800f050:	08023558 	.word	0x08023558
 800f054:	0802384c 	.word	0x0802384c
 800f058:	080235bc 	.word	0x080235bc
 800f05c:	0802385c 	.word	0x0802385c
 800f060:	0802387c 	.word	0x0802387c
 800f064:	080238a0 	.word	0x080238a0
 800f068:	080236e0 	.word	0x080236e0
 800f06c:	080238b4 	.word	0x080238b4
 800f070:	0800e7a5 	.word	0x0800e7a5
 800f074:	0800e6dd 	.word	0x0800e6dd
 800f078:	0800e84d 	.word	0x0800e84d
 800f07c:	080238d8 	.word	0x080238d8

0800f080 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800f080:	b580      	push	{r7, lr}
 800f082:	b084      	sub	sp, #16
 800f084:	af00      	add	r7, sp, #0
 800f086:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	785b      	ldrb	r3, [r3, #1]
 800f092:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800f094:	7afb      	ldrb	r3, [r7, #11]
 800f096:	2b00      	cmp	r3, #0
 800f098:	d00d      	beq.n	800f0b6 <lwip_netconn_do_delconn+0x36>
 800f09a:	68fb      	ldr	r3, [r7, #12]
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	781b      	ldrb	r3, [r3, #0]
 800f0a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f0a4:	2b10      	cmp	r3, #16
 800f0a6:	d006      	beq.n	800f0b6 <lwip_netconn_do_delconn+0x36>
 800f0a8:	4b60      	ldr	r3, [pc, #384]	; (800f22c <lwip_netconn_do_delconn+0x1ac>)
 800f0aa:	f240 425f 	movw	r2, #1119	; 0x45f
 800f0ae:	4960      	ldr	r1, [pc, #384]	; (800f230 <lwip_netconn_do_delconn+0x1b0>)
 800f0b0:	4860      	ldr	r0, [pc, #384]	; (800f234 <lwip_netconn_do_delconn+0x1b4>)
 800f0b2:	f011 ff4d 	bl	8020f50 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800f0b6:	7afb      	ldrb	r3, [r7, #11]
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d005      	beq.n	800f0c8 <lwip_netconn_do_delconn+0x48>
 800f0bc:	7afb      	ldrb	r3, [r7, #11]
 800f0be:	2b02      	cmp	r3, #2
 800f0c0:	d002      	beq.n	800f0c8 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800f0c2:	7afb      	ldrb	r3, [r7, #11]
 800f0c4:	2b03      	cmp	r3, #3
 800f0c6:	d109      	bne.n	800f0dc <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800f0c8:	7afb      	ldrb	r3, [r7, #11]
 800f0ca:	2b03      	cmp	r3, #3
 800f0cc:	d10a      	bne.n	800f0e4 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800f0ce:	68fb      	ldr	r3, [r7, #12]
 800f0d0:	681b      	ldr	r3, [r3, #0]
 800f0d2:	7f1b      	ldrb	r3, [r3, #28]
 800f0d4:	f003 0304 	and.w	r3, r3, #4
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d103      	bne.n	800f0e4 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	22fb      	movs	r2, #251	; 0xfb
 800f0e0:	711a      	strb	r2, [r3, #4]
 800f0e2:	e097      	b.n	800f214 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800f0e4:	7afb      	ldrb	r3, [r7, #11]
 800f0e6:	2b03      	cmp	r3, #3
 800f0e8:	d10d      	bne.n	800f106 <lwip_netconn_do_delconn+0x86>
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	7f1b      	ldrb	r3, [r3, #28]
 800f0f0:	f003 0304 	and.w	r3, r3, #4
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d106      	bne.n	800f106 <lwip_netconn_do_delconn+0x86>
 800f0f8:	4b4c      	ldr	r3, [pc, #304]	; (800f22c <lwip_netconn_do_delconn+0x1ac>)
 800f0fa:	f240 427b 	movw	r2, #1147	; 0x47b
 800f0fe:	494e      	ldr	r1, [pc, #312]	; (800f238 <lwip_netconn_do_delconn+0x1b8>)
 800f100:	484c      	ldr	r0, [pc, #304]	; (800f234 <lwip_netconn_do_delconn+0x1b4>)
 800f102:	f011 ff25 	bl	8020f50 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	2200      	movs	r2, #0
 800f10a:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800f10c:	68fb      	ldr	r3, [r7, #12]
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	4618      	mov	r0, r3
 800f112:	f7ff fdd1 	bl	800ecb8 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	685b      	ldr	r3, [r3, #4]
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d05f      	beq.n	800f1e0 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	781b      	ldrb	r3, [r3, #0]
 800f126:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f12a:	2b10      	cmp	r3, #16
 800f12c:	d00e      	beq.n	800f14c <lwip_netconn_do_delconn+0xcc>
 800f12e:	2b20      	cmp	r3, #32
 800f130:	d000      	beq.n	800f134 <lwip_netconn_do_delconn+0xb4>
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
#endif /* LWIP_TCP */
        default:
          break;
 800f132:	e051      	b.n	800f1d8 <lwip_netconn_do_delconn+0x158>
          msg->conn->pcb.udp->recv_arg = NULL;
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	685b      	ldr	r3, [r3, #4]
 800f13a:	2200      	movs	r2, #0
 800f13c:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800f13e:	68fb      	ldr	r3, [r7, #12]
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	685b      	ldr	r3, [r3, #4]
 800f144:	4618      	mov	r0, r3
 800f146:	f00d fd39 	bl	801cbbc <udp_remove>
          break;
 800f14a:	e045      	b.n	800f1d8 <lwip_netconn_do_delconn+0x158>
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800f14c:	68fb      	ldr	r3, [r7, #12]
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	6a1b      	ldr	r3, [r3, #32]
 800f152:	2b00      	cmp	r3, #0
 800f154:	d006      	beq.n	800f164 <lwip_netconn_do_delconn+0xe4>
 800f156:	4b35      	ldr	r3, [pc, #212]	; (800f22c <lwip_netconn_do_delconn+0x1ac>)
 800f158:	f240 4294 	movw	r2, #1172	; 0x494
 800f15c:	4937      	ldr	r1, [pc, #220]	; (800f23c <lwip_netconn_do_delconn+0x1bc>)
 800f15e:	4835      	ldr	r0, [pc, #212]	; (800f234 <lwip_netconn_do_delconn+0x1b4>)
 800f160:	f011 fef6 	bl	8020f50 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800f164:	68fb      	ldr	r3, [r7, #12]
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	2204      	movs	r2, #4
 800f16a:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800f16c:	68fb      	ldr	r3, [r7, #12]
 800f16e:	2203      	movs	r2, #3
 800f170:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	68fa      	ldr	r2, [r7, #12]
 800f178:	621a      	str	r2, [r3, #32]
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	2100      	movs	r1, #0
 800f180:	4618      	mov	r0, r3
 800f182:	f7ff fe17 	bl	800edb4 <lwip_netconn_do_close_internal>
 800f186:	4603      	mov	r3, r0
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d04a      	beq.n	800f222 <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	785b      	ldrb	r3, [r3, #1]
 800f192:	2b04      	cmp	r3, #4
 800f194:	d006      	beq.n	800f1a4 <lwip_netconn_do_delconn+0x124>
 800f196:	4b25      	ldr	r3, [pc, #148]	; (800f22c <lwip_netconn_do_delconn+0x1ac>)
 800f198:	f240 429a 	movw	r2, #1178	; 0x49a
 800f19c:	4928      	ldr	r1, [pc, #160]	; (800f240 <lwip_netconn_do_delconn+0x1c0>)
 800f19e:	4825      	ldr	r0, [pc, #148]	; (800f234 <lwip_netconn_do_delconn+0x1b4>)
 800f1a0:	f011 fed6 	bl	8020f50 <iprintf>
            UNLOCK_TCPIP_CORE();
 800f1a4:	4827      	ldr	r0, [pc, #156]	; (800f244 <lwip_netconn_do_delconn+0x1c4>)
 800f1a6:	f006 fc66 	bl	8015a76 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	330c      	adds	r3, #12
 800f1b0:	2100      	movs	r1, #0
 800f1b2:	4618      	mov	r0, r3
 800f1b4:	f006 fbbd 	bl	8015932 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800f1b8:	4822      	ldr	r0, [pc, #136]	; (800f244 <lwip_netconn_do_delconn+0x1c4>)
 800f1ba:	f006 fc4d 	bl	8015a58 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	785b      	ldrb	r3, [r3, #1]
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d02c      	beq.n	800f222 <lwip_netconn_do_delconn+0x1a2>
 800f1c8:	4b18      	ldr	r3, [pc, #96]	; (800f22c <lwip_netconn_do_delconn+0x1ac>)
 800f1ca:	f240 429e 	movw	r2, #1182	; 0x49e
 800f1ce:	491c      	ldr	r1, [pc, #112]	; (800f240 <lwip_netconn_do_delconn+0x1c0>)
 800f1d0:	4818      	ldr	r0, [pc, #96]	; (800f234 <lwip_netconn_do_delconn+0x1b4>)
 800f1d2:	f011 febd 	bl	8020f50 <iprintf>
          return;
 800f1d6:	e024      	b.n	800f222 <lwip_netconn_do_delconn+0x1a2>
      }
      msg->conn->pcb.tcp = NULL;
 800f1d8:	68fb      	ldr	r3, [r7, #12]
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	2200      	movs	r2, #0
 800f1de:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d007      	beq.n	800f1fa <lwip_netconn_do_delconn+0x17a>
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1f0:	68fa      	ldr	r2, [r7, #12]
 800f1f2:	6810      	ldr	r0, [r2, #0]
 800f1f4:	2200      	movs	r2, #0
 800f1f6:	2100      	movs	r1, #0
 800f1f8:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800f1fa:	68fb      	ldr	r3, [r7, #12]
 800f1fc:	681b      	ldr	r3, [r3, #0]
 800f1fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f200:	2b00      	cmp	r3, #0
 800f202:	d007      	beq.n	800f214 <lwip_netconn_do_delconn+0x194>
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f20a:	68fa      	ldr	r2, [r7, #12]
 800f20c:	6810      	ldr	r0, [r2, #0]
 800f20e:	2200      	movs	r2, #0
 800f210:	2102      	movs	r1, #2
 800f212:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	330c      	adds	r3, #12
 800f21a:	4618      	mov	r0, r3
 800f21c:	f006 fbd4 	bl	80159c8 <sys_sem_valid>
 800f220:	e000      	b.n	800f224 <lwip_netconn_do_delconn+0x1a4>
          return;
 800f222:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800f224:	3710      	adds	r7, #16
 800f226:	46bd      	mov	sp, r7
 800f228:	bd80      	pop	{r7, pc}
 800f22a:	bf00      	nop
 800f22c:	08023558 	.word	0x08023558
 800f230:	080238e8 	.word	0x080238e8
 800f234:	080235bc 	.word	0x080235bc
 800f238:	080238fc 	.word	0x080238fc
 800f23c:	0802391c 	.word	0x0802391c
 800f240:	08023938 	.word	0x08023938
 800f244:	24048e98 	.word	0x24048e98

0800f248 <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800f248:	b580      	push	{r7, lr}
 800f24a:	b088      	sub	sp, #32
 800f24c:	af00      	add	r7, sp, #0
 800f24e:	60f8      	str	r0, [r7, #12]
 800f250:	60b9      	str	r1, [r7, #8]
 800f252:	4613      	mov	r3, r2
 800f254:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int was_blocking;
  sys_sem_t *op_completed_sem = NULL;
 800f256:	2300      	movs	r3, #0
 800f258:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 800f25e:	69bb      	ldr	r3, [r7, #24]
 800f260:	2b00      	cmp	r3, #0
 800f262:	d102      	bne.n	800f26a <lwip_netconn_do_connected+0x22>
    return ERR_VAL;
 800f264:	f06f 0305 	mvn.w	r3, #5
 800f268:	e070      	b.n	800f34c <lwip_netconn_do_connected+0x104>
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
 800f26a:	69bb      	ldr	r3, [r7, #24]
 800f26c:	785b      	ldrb	r3, [r3, #1]
 800f26e:	2b03      	cmp	r3, #3
 800f270:	d006      	beq.n	800f280 <lwip_netconn_do_connected+0x38>
 800f272:	4b38      	ldr	r3, [pc, #224]	; (800f354 <lwip_netconn_do_connected+0x10c>)
 800f274:	f240 5223 	movw	r2, #1315	; 0x523
 800f278:	4937      	ldr	r1, [pc, #220]	; (800f358 <lwip_netconn_do_connected+0x110>)
 800f27a:	4838      	ldr	r0, [pc, #224]	; (800f35c <lwip_netconn_do_connected+0x114>)
 800f27c:	f011 fe68 	bl	8020f50 <iprintf>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 800f280:	69bb      	ldr	r3, [r7, #24]
 800f282:	6a1b      	ldr	r3, [r3, #32]
 800f284:	2b00      	cmp	r3, #0
 800f286:	d10c      	bne.n	800f2a2 <lwip_netconn_do_connected+0x5a>
 800f288:	69bb      	ldr	r3, [r7, #24]
 800f28a:	7f1b      	ldrb	r3, [r3, #28]
 800f28c:	f003 0304 	and.w	r3, r3, #4
 800f290:	2b00      	cmp	r3, #0
 800f292:	d106      	bne.n	800f2a2 <lwip_netconn_do_connected+0x5a>
 800f294:	4b2f      	ldr	r3, [pc, #188]	; (800f354 <lwip_netconn_do_connected+0x10c>)
 800f296:	f240 5225 	movw	r2, #1317	; 0x525
 800f29a:	4931      	ldr	r1, [pc, #196]	; (800f360 <lwip_netconn_do_connected+0x118>)
 800f29c:	482f      	ldr	r0, [pc, #188]	; (800f35c <lwip_netconn_do_connected+0x114>)
 800f29e:	f011 fe57 	bl	8020f50 <iprintf>
              (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
 800f2a2:	69bb      	ldr	r3, [r7, #24]
 800f2a4:	6a1b      	ldr	r3, [r3, #32]
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d008      	beq.n	800f2bc <lwip_netconn_do_connected+0x74>
    conn->current_msg->err = err;
 800f2aa:	69bb      	ldr	r3, [r7, #24]
 800f2ac:	6a1b      	ldr	r3, [r3, #32]
 800f2ae:	79fa      	ldrb	r2, [r7, #7]
 800f2b0:	711a      	strb	r2, [r3, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800f2b2:	69bb      	ldr	r3, [r7, #24]
 800f2b4:	6a1b      	ldr	r3, [r3, #32]
 800f2b6:	681b      	ldr	r3, [r3, #0]
 800f2b8:	330c      	adds	r3, #12
 800f2ba:	61fb      	str	r3, [r7, #28]
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 800f2bc:	69bb      	ldr	r3, [r7, #24]
 800f2be:	781b      	ldrb	r3, [r3, #0]
 800f2c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f2c4:	2b10      	cmp	r3, #16
 800f2c6:	d106      	bne.n	800f2d6 <lwip_netconn_do_connected+0x8e>
 800f2c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d102      	bne.n	800f2d6 <lwip_netconn_do_connected+0x8e>
    setup_tcp(conn);
 800f2d0:	69b8      	ldr	r0, [r7, #24]
 800f2d2:	f7ff fb91 	bl	800e9f8 <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 800f2d6:	69bb      	ldr	r3, [r7, #24]
 800f2d8:	7f1b      	ldrb	r3, [r3, #28]
 800f2da:	f003 0304 	and.w	r3, r3, #4
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	bf0c      	ite	eq
 800f2e2:	2301      	moveq	r3, #1
 800f2e4:	2300      	movne	r3, #0
 800f2e6:	b2db      	uxtb	r3, r3
 800f2e8:	617b      	str	r3, [r7, #20]
  SET_NONBLOCKING_CONNECT(conn, 0);
 800f2ea:	69bb      	ldr	r3, [r7, #24]
 800f2ec:	7f1b      	ldrb	r3, [r3, #28]
 800f2ee:	f023 0304 	bic.w	r3, r3, #4
 800f2f2:	b2da      	uxtb	r2, r3
 800f2f4:	69bb      	ldr	r3, [r7, #24]
 800f2f6:	771a      	strb	r2, [r3, #28]
  LWIP_ASSERT("blocking connect state error",
 800f2f8:	697b      	ldr	r3, [r7, #20]
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d002      	beq.n	800f304 <lwip_netconn_do_connected+0xbc>
 800f2fe:	69fb      	ldr	r3, [r7, #28]
 800f300:	2b00      	cmp	r3, #0
 800f302:	d10c      	bne.n	800f31e <lwip_netconn_do_connected+0xd6>
 800f304:	697b      	ldr	r3, [r7, #20]
 800f306:	2b00      	cmp	r3, #0
 800f308:	d102      	bne.n	800f310 <lwip_netconn_do_connected+0xc8>
 800f30a:	69fb      	ldr	r3, [r7, #28]
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d006      	beq.n	800f31e <lwip_netconn_do_connected+0xd6>
 800f310:	4b10      	ldr	r3, [pc, #64]	; (800f354 <lwip_netconn_do_connected+0x10c>)
 800f312:	f240 5232 	movw	r2, #1330	; 0x532
 800f316:	4913      	ldr	r1, [pc, #76]	; (800f364 <lwip_netconn_do_connected+0x11c>)
 800f318:	4810      	ldr	r0, [pc, #64]	; (800f35c <lwip_netconn_do_connected+0x114>)
 800f31a:	f011 fe19 	bl	8020f50 <iprintf>
              (was_blocking && op_completed_sem != NULL) ||
              (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
 800f31e:	69bb      	ldr	r3, [r7, #24]
 800f320:	2200      	movs	r2, #0
 800f322:	621a      	str	r2, [r3, #32]
  conn->state = NETCONN_NONE;
 800f324:	69bb      	ldr	r3, [r7, #24]
 800f326:	2200      	movs	r2, #0
 800f328:	705a      	strb	r2, [r3, #1]
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800f32a:	69bb      	ldr	r3, [r7, #24]
 800f32c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d005      	beq.n	800f33e <lwip_netconn_do_connected+0xf6>
 800f332:	69bb      	ldr	r3, [r7, #24]
 800f334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f336:	2200      	movs	r2, #0
 800f338:	2102      	movs	r1, #2
 800f33a:	69b8      	ldr	r0, [r7, #24]
 800f33c:	4798      	blx	r3

  if (was_blocking) {
 800f33e:	697b      	ldr	r3, [r7, #20]
 800f340:	2b00      	cmp	r3, #0
 800f342:	d002      	beq.n	800f34a <lwip_netconn_do_connected+0x102>
    sys_sem_signal(op_completed_sem);
 800f344:	69f8      	ldr	r0, [r7, #28]
 800f346:	f006 fb25 	bl	8015994 <sys_sem_signal>
  }
  return ERR_OK;
 800f34a:	2300      	movs	r3, #0
}
 800f34c:	4618      	mov	r0, r3
 800f34e:	3720      	adds	r7, #32
 800f350:	46bd      	mov	sp, r7
 800f352:	bd80      	pop	{r7, pc}
 800f354:	08023558 	.word	0x08023558
 800f358:	08023940 	.word	0x08023940
 800f35c:	080235bc 	.word	0x080235bc
 800f360:	08023960 	.word	0x08023960
 800f364:	080239a0 	.word	0x080239a0

0800f368 <lwip_netconn_do_connect>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to connect to
 */
void
lwip_netconn_do_connect(void *m)
{
 800f368:	b580      	push	{r7, lr}
 800f36a:	b086      	sub	sp, #24
 800f36c:	af00      	add	r7, sp, #0
 800f36e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	613b      	str	r3, [r7, #16]
  err_t err;

  if (msg->conn->pcb.tcp == NULL) {
 800f374:	693b      	ldr	r3, [r7, #16]
 800f376:	681b      	ldr	r3, [r3, #0]
 800f378:	685b      	ldr	r3, [r3, #4]
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d102      	bne.n	800f384 <lwip_netconn_do_connect+0x1c>
    /* This may happen when calling netconn_connect() a second time */
    err = ERR_CLSD;
 800f37e:	23f1      	movs	r3, #241	; 0xf1
 800f380:	75fb      	strb	r3, [r7, #23]
 800f382:	e09b      	b.n	800f4bc <lwip_netconn_do_connect+0x154>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800f384:	693b      	ldr	r3, [r7, #16]
 800f386:	681b      	ldr	r3, [r3, #0]
 800f388:	781b      	ldrb	r3, [r3, #0]
 800f38a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f38e:	2b10      	cmp	r3, #16
 800f390:	d00f      	beq.n	800f3b2 <lwip_netconn_do_connect+0x4a>
 800f392:	2b20      	cmp	r3, #32
 800f394:	f040 8087 	bne.w	800f4a6 <lwip_netconn_do_connect+0x13e>
        err = raw_connect(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_connect(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800f398:	693b      	ldr	r3, [r7, #16]
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	6858      	ldr	r0, [r3, #4]
 800f39e:	693b      	ldr	r3, [r7, #16]
 800f3a0:	6899      	ldr	r1, [r3, #8]
 800f3a2:	693b      	ldr	r3, [r7, #16]
 800f3a4:	899b      	ldrh	r3, [r3, #12]
 800f3a6:	461a      	mov	r2, r3
 800f3a8:	f00d fb52 	bl	801ca50 <udp_connect>
 800f3ac:	4603      	mov	r3, r0
 800f3ae:	75fb      	strb	r3, [r7, #23]
        break;
 800f3b0:	e084      	b.n	800f4bc <lwip_netconn_do_connect+0x154>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        /* Prevent connect while doing any other action. */
        if (msg->conn->state == NETCONN_CONNECT) {
 800f3b2:	693b      	ldr	r3, [r7, #16]
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	785b      	ldrb	r3, [r3, #1]
 800f3b8:	2b03      	cmp	r3, #3
 800f3ba:	d102      	bne.n	800f3c2 <lwip_netconn_do_connect+0x5a>
          err = ERR_ALREADY;
 800f3bc:	23f7      	movs	r3, #247	; 0xf7
 800f3be:	75fb      	strb	r3, [r7, #23]
#endif /* LWIP_TCPIP_CORE_LOCKING */
              return;
            }
          }
        }
        break;
 800f3c0:	e07b      	b.n	800f4ba <lwip_netconn_do_connect+0x152>
        } else if (msg->conn->state != NETCONN_NONE) {
 800f3c2:	693b      	ldr	r3, [r7, #16]
 800f3c4:	681b      	ldr	r3, [r3, #0]
 800f3c6:	785b      	ldrb	r3, [r3, #1]
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d002      	beq.n	800f3d2 <lwip_netconn_do_connect+0x6a>
          err = ERR_ISCONN;
 800f3cc:	23f6      	movs	r3, #246	; 0xf6
 800f3ce:	75fb      	strb	r3, [r7, #23]
        break;
 800f3d0:	e073      	b.n	800f4ba <lwip_netconn_do_connect+0x152>
          setup_tcp(msg->conn);
 800f3d2:	693b      	ldr	r3, [r7, #16]
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	4618      	mov	r0, r3
 800f3d8:	f7ff fb0e 	bl	800e9f8 <setup_tcp>
          err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
 800f3dc:	693b      	ldr	r3, [r7, #16]
 800f3de:	681b      	ldr	r3, [r3, #0]
 800f3e0:	6858      	ldr	r0, [r3, #4]
 800f3e2:	693b      	ldr	r3, [r7, #16]
 800f3e4:	6899      	ldr	r1, [r3, #8]
 800f3e6:	693b      	ldr	r3, [r7, #16]
 800f3e8:	899a      	ldrh	r2, [r3, #12]
 800f3ea:	4b38      	ldr	r3, [pc, #224]	; (800f4cc <lwip_netconn_do_connect+0x164>)
 800f3ec:	f006 ffdc 	bl	80163a8 <tcp_connect>
 800f3f0:	4603      	mov	r3, r0
 800f3f2:	75fb      	strb	r3, [r7, #23]
          if (err == ERR_OK) {
 800f3f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d15e      	bne.n	800f4ba <lwip_netconn_do_connect+0x152>
            u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 800f3fc:	693b      	ldr	r3, [r7, #16]
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	7f1b      	ldrb	r3, [r3, #28]
 800f402:	f003 0302 	and.w	r3, r3, #2
 800f406:	2b00      	cmp	r3, #0
 800f408:	bf14      	ite	ne
 800f40a:	2301      	movne	r3, #1
 800f40c:	2300      	moveq	r3, #0
 800f40e:	b2db      	uxtb	r3, r3
 800f410:	73fb      	strb	r3, [r7, #15]
            msg->conn->state = NETCONN_CONNECT;
 800f412:	693b      	ldr	r3, [r7, #16]
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	2203      	movs	r2, #3
 800f418:	705a      	strb	r2, [r3, #1]
            SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 800f41a:	7bfb      	ldrb	r3, [r7, #15]
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d009      	beq.n	800f434 <lwip_netconn_do_connect+0xcc>
 800f420:	693b      	ldr	r3, [r7, #16]
 800f422:	681b      	ldr	r3, [r3, #0]
 800f424:	7f1a      	ldrb	r2, [r3, #28]
 800f426:	693b      	ldr	r3, [r7, #16]
 800f428:	681b      	ldr	r3, [r3, #0]
 800f42a:	f042 0204 	orr.w	r2, r2, #4
 800f42e:	b2d2      	uxtb	r2, r2
 800f430:	771a      	strb	r2, [r3, #28]
 800f432:	e008      	b.n	800f446 <lwip_netconn_do_connect+0xde>
 800f434:	693b      	ldr	r3, [r7, #16]
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	7f1a      	ldrb	r2, [r3, #28]
 800f43a:	693b      	ldr	r3, [r7, #16]
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	f022 0204 	bic.w	r2, r2, #4
 800f442:	b2d2      	uxtb	r2, r2
 800f444:	771a      	strb	r2, [r3, #28]
            if (non_blocking) {
 800f446:	7bfb      	ldrb	r3, [r7, #15]
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d002      	beq.n	800f452 <lwip_netconn_do_connect+0xea>
              err = ERR_INPROGRESS;
 800f44c:	23fb      	movs	r3, #251	; 0xfb
 800f44e:	75fb      	strb	r3, [r7, #23]
        break;
 800f450:	e033      	b.n	800f4ba <lwip_netconn_do_connect+0x152>
              msg->conn->current_msg = msg;
 800f452:	693b      	ldr	r3, [r7, #16]
 800f454:	681b      	ldr	r3, [r3, #0]
 800f456:	693a      	ldr	r2, [r7, #16]
 800f458:	621a      	str	r2, [r3, #32]
              LWIP_ASSERT("state!", msg->conn->state == NETCONN_CONNECT);
 800f45a:	693b      	ldr	r3, [r7, #16]
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	785b      	ldrb	r3, [r3, #1]
 800f460:	2b03      	cmp	r3, #3
 800f462:	d006      	beq.n	800f472 <lwip_netconn_do_connect+0x10a>
 800f464:	4b1a      	ldr	r3, [pc, #104]	; (800f4d0 <lwip_netconn_do_connect+0x168>)
 800f466:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 800f46a:	491a      	ldr	r1, [pc, #104]	; (800f4d4 <lwip_netconn_do_connect+0x16c>)
 800f46c:	481a      	ldr	r0, [pc, #104]	; (800f4d8 <lwip_netconn_do_connect+0x170>)
 800f46e:	f011 fd6f 	bl	8020f50 <iprintf>
              UNLOCK_TCPIP_CORE();
 800f472:	481a      	ldr	r0, [pc, #104]	; (800f4dc <lwip_netconn_do_connect+0x174>)
 800f474:	f006 faff 	bl	8015a76 <sys_mutex_unlock>
              sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800f478:	693b      	ldr	r3, [r7, #16]
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	330c      	adds	r3, #12
 800f47e:	2100      	movs	r1, #0
 800f480:	4618      	mov	r0, r3
 800f482:	f006 fa56 	bl	8015932 <sys_arch_sem_wait>
              LOCK_TCPIP_CORE();
 800f486:	4815      	ldr	r0, [pc, #84]	; (800f4dc <lwip_netconn_do_connect+0x174>)
 800f488:	f006 fae6 	bl	8015a58 <sys_mutex_lock>
              LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
 800f48c:	693b      	ldr	r3, [r7, #16]
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	785b      	ldrb	r3, [r3, #1]
 800f492:	2b03      	cmp	r3, #3
 800f494:	d116      	bne.n	800f4c4 <lwip_netconn_do_connect+0x15c>
 800f496:	4b0e      	ldr	r3, [pc, #56]	; (800f4d0 <lwip_netconn_do_connect+0x168>)
 800f498:	f240 5274 	movw	r2, #1396	; 0x574
 800f49c:	490d      	ldr	r1, [pc, #52]	; (800f4d4 <lwip_netconn_do_connect+0x16c>)
 800f49e:	480e      	ldr	r0, [pc, #56]	; (800f4d8 <lwip_netconn_do_connect+0x170>)
 800f4a0:	f011 fd56 	bl	8020f50 <iprintf>
              return;
 800f4a4:	e00e      	b.n	800f4c4 <lwip_netconn_do_connect+0x15c>
#endif /* LWIP_TCP */
      default:
        LWIP_ERROR("Invalid netconn type", 0, do {
 800f4a6:	4b0a      	ldr	r3, [pc, #40]	; (800f4d0 <lwip_netconn_do_connect+0x168>)
 800f4a8:	f240 527f 	movw	r2, #1407	; 0x57f
 800f4ac:	490c      	ldr	r1, [pc, #48]	; (800f4e0 <lwip_netconn_do_connect+0x178>)
 800f4ae:	480a      	ldr	r0, [pc, #40]	; (800f4d8 <lwip_netconn_do_connect+0x170>)
 800f4b0:	f011 fd4e 	bl	8020f50 <iprintf>
 800f4b4:	23fa      	movs	r3, #250	; 0xfa
 800f4b6:	75fb      	strb	r3, [r7, #23]
          err = ERR_VAL;
        } while (0));
        break;
 800f4b8:	e000      	b.n	800f4bc <lwip_netconn_do_connect+0x154>
        break;
 800f4ba:	bf00      	nop
    }
  }
  msg->err = err;
 800f4bc:	693b      	ldr	r3, [r7, #16]
 800f4be:	7dfa      	ldrb	r2, [r7, #23]
 800f4c0:	711a      	strb	r2, [r3, #4]
 800f4c2:	e000      	b.n	800f4c6 <lwip_netconn_do_connect+0x15e>
              return;
 800f4c4:	bf00      	nop
  /* For all other protocols, netconn_connect() calls netconn_apimsg(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
}
 800f4c6:	3718      	adds	r7, #24
 800f4c8:	46bd      	mov	sp, r7
 800f4ca:	bd80      	pop	{r7, pc}
 800f4cc:	0800f249 	.word	0x0800f249
 800f4d0:	08023558 	.word	0x08023558
 800f4d4:	08023938 	.word	0x08023938
 800f4d8:	080235bc 	.word	0x080235bc
 800f4dc:	24048e98 	.word	0x24048e98
 800f4e0:	080239c0 	.word	0x080239c0

0800f4e4 <lwip_netconn_do_disconnect>:
 *
 * @param m the api_msg pointing to the connection to disconnect
 */
void
lwip_netconn_do_disconnect(void *m)
{
 800f4e4:	b580      	push	{r7, lr}
 800f4e6:	b084      	sub	sp, #16
 800f4e8:	af00      	add	r7, sp, #0
 800f4ea:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	60fb      	str	r3, [r7, #12]

#if LWIP_UDP
  if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_UDP) {
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	781b      	ldrb	r3, [r3, #0]
 800f4f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f4fa:	2b20      	cmp	r3, #32
 800f4fc:	d109      	bne.n	800f512 <lwip_netconn_do_disconnect+0x2e>
    udp_disconnect(msg->conn->pcb.udp);
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	681b      	ldr	r3, [r3, #0]
 800f502:	685b      	ldr	r3, [r3, #4]
 800f504:	4618      	mov	r0, r3
 800f506:	f00d fb11 	bl	801cb2c <udp_disconnect>
    msg->err = ERR_OK;
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	2200      	movs	r2, #0
 800f50e:	711a      	strb	r2, [r3, #4]
#endif /* LWIP_UDP */
  {
    msg->err = ERR_VAL;
  }
  TCPIP_APIMSG_ACK(msg);
}
 800f510:	e002      	b.n	800f518 <lwip_netconn_do_disconnect+0x34>
    msg->err = ERR_VAL;
 800f512:	68fb      	ldr	r3, [r7, #12]
 800f514:	22fa      	movs	r2, #250	; 0xfa
 800f516:	711a      	strb	r2, [r3, #4]
}
 800f518:	bf00      	nop
 800f51a:	3710      	adds	r7, #16
 800f51c:	46bd      	mov	sp, r7
 800f51e:	bd80      	pop	{r7, pc}

0800f520 <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 800f520:	b580      	push	{r7, lr}
 800f522:	b084      	sub	sp, #16
 800f524:	af00      	add	r7, sp, #0
 800f526:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800f52c:	68bb      	ldr	r3, [r7, #8]
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	4618      	mov	r0, r3
 800f532:	f7fe ff47 	bl	800e3c4 <netconn_err>
 800f536:	4603      	mov	r3, r0
 800f538:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800f53a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d135      	bne.n	800f5ae <lwip_netconn_do_send+0x8e>
    if (msg->conn->pcb.tcp != NULL) {
 800f542:	68bb      	ldr	r3, [r7, #8]
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	685b      	ldr	r3, [r3, #4]
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d02e      	beq.n	800f5aa <lwip_netconn_do_send+0x8a>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800f54c:	68bb      	ldr	r3, [r7, #8]
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	781b      	ldrb	r3, [r3, #0]
 800f552:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f556:	2b20      	cmp	r3, #32
 800f558:	d123      	bne.n	800f5a2 <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 800f55a:	68bb      	ldr	r3, [r7, #8]
 800f55c:	689b      	ldr	r3, [r3, #8]
 800f55e:	689b      	ldr	r3, [r3, #8]
 800f560:	2b00      	cmp	r3, #0
 800f562:	d10c      	bne.n	800f57e <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 800f564:	68bb      	ldr	r3, [r7, #8]
 800f566:	681b      	ldr	r3, [r3, #0]
 800f568:	685a      	ldr	r2, [r3, #4]
 800f56a:	68bb      	ldr	r3, [r7, #8]
 800f56c:	689b      	ldr	r3, [r3, #8]
 800f56e:	681b      	ldr	r3, [r3, #0]
 800f570:	4619      	mov	r1, r3
 800f572:	4610      	mov	r0, r2
 800f574:	f00c fffa 	bl	801c56c <udp_send>
 800f578:	4603      	mov	r3, r0
 800f57a:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 800f57c:	e017      	b.n	800f5ae <lwip_netconn_do_send+0x8e>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 800f57e:	68bb      	ldr	r3, [r7, #8]
 800f580:	681b      	ldr	r3, [r3, #0]
 800f582:	6858      	ldr	r0, [r3, #4]
 800f584:	68bb      	ldr	r3, [r7, #8]
 800f586:	689b      	ldr	r3, [r3, #8]
 800f588:	6819      	ldr	r1, [r3, #0]
 800f58a:	68bb      	ldr	r3, [r7, #8]
 800f58c:	689b      	ldr	r3, [r3, #8]
 800f58e:	f103 0208 	add.w	r2, r3, #8
 800f592:	68bb      	ldr	r3, [r7, #8]
 800f594:	689b      	ldr	r3, [r3, #8]
 800f596:	899b      	ldrh	r3, [r3, #12]
 800f598:	f00d f81c 	bl	801c5d4 <udp_sendto>
 800f59c:	4603      	mov	r3, r0
 800f59e:	73fb      	strb	r3, [r7, #15]
          break;
 800f5a0:	e005      	b.n	800f5ae <lwip_netconn_do_send+0x8e>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 800f5a2:	23f5      	movs	r3, #245	; 0xf5
 800f5a4:	73fb      	strb	r3, [r7, #15]
          break;
 800f5a6:	bf00      	nop
 800f5a8:	e001      	b.n	800f5ae <lwip_netconn_do_send+0x8e>
      }
    } else {
      err = ERR_CONN;
 800f5aa:	23f5      	movs	r3, #245	; 0xf5
 800f5ac:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 800f5ae:	68bb      	ldr	r3, [r7, #8]
 800f5b0:	7bfa      	ldrb	r2, [r7, #15]
 800f5b2:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800f5b4:	bf00      	nop
 800f5b6:	3710      	adds	r7, #16
 800f5b8:	46bd      	mov	sp, r7
 800f5ba:	bd80      	pop	{r7, pc}

0800f5bc <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800f5bc:	b580      	push	{r7, lr}
 800f5be:	b086      	sub	sp, #24
 800f5c0:	af00      	add	r7, sp, #0
 800f5c2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800f5c8:	693b      	ldr	r3, [r7, #16]
 800f5ca:	2200      	movs	r2, #0
 800f5cc:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800f5ce:	693b      	ldr	r3, [r7, #16]
 800f5d0:	681b      	ldr	r3, [r3, #0]
 800f5d2:	685b      	ldr	r3, [r3, #4]
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d022      	beq.n	800f61e <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800f5d8:	693b      	ldr	r3, [r7, #16]
 800f5da:	681b      	ldr	r3, [r3, #0]
 800f5dc:	781b      	ldrb	r3, [r3, #0]
 800f5de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f5e2:	2b10      	cmp	r3, #16
 800f5e4:	d11b      	bne.n	800f61e <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800f5e6:	693b      	ldr	r3, [r7, #16]
 800f5e8:	689b      	ldr	r3, [r3, #8]
 800f5ea:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800f5ec:	697b      	ldr	r3, [r7, #20]
 800f5ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f5f2:	d202      	bcs.n	800f5fa <lwip_netconn_do_recv+0x3e>
 800f5f4:	697b      	ldr	r3, [r7, #20]
 800f5f6:	b29b      	uxth	r3, r3
 800f5f8:	e001      	b.n	800f5fe <lwip_netconn_do_recv+0x42>
 800f5fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f5fe:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800f600:	693b      	ldr	r3, [r7, #16]
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	685b      	ldr	r3, [r3, #4]
 800f606:	89fa      	ldrh	r2, [r7, #14]
 800f608:	4611      	mov	r1, r2
 800f60a:	4618      	mov	r0, r3
 800f60c:	f006 fe36 	bl	801627c <tcp_recved>
        remaining -= recved;
 800f610:	89fb      	ldrh	r3, [r7, #14]
 800f612:	697a      	ldr	r2, [r7, #20]
 800f614:	1ad3      	subs	r3, r2, r3
 800f616:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800f618:	697b      	ldr	r3, [r7, #20]
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	d1e6      	bne.n	800f5ec <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800f61e:	bf00      	nop
 800f620:	3718      	adds	r7, #24
 800f622:	46bd      	mov	sp, r7
 800f624:	bd80      	pop	{r7, pc}
	...

0800f628 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800f628:	b580      	push	{r7, lr}
 800f62a:	b088      	sub	sp, #32
 800f62c:	af00      	add	r7, sp, #0
 800f62e:	6078      	str	r0, [r7, #4]
 800f630:	460b      	mov	r3, r1
 800f632:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800f634:	2300      	movs	r3, #0
 800f636:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d106      	bne.n	800f64c <lwip_netconn_do_writemore+0x24>
 800f63e:	4b96      	ldr	r3, [pc, #600]	; (800f898 <lwip_netconn_do_writemore+0x270>)
 800f640:	f240 6273 	movw	r2, #1651	; 0x673
 800f644:	4995      	ldr	r1, [pc, #596]	; (800f89c <lwip_netconn_do_writemore+0x274>)
 800f646:	4896      	ldr	r0, [pc, #600]	; (800f8a0 <lwip_netconn_do_writemore+0x278>)
 800f648:	f011 fc82 	bl	8020f50 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	785b      	ldrb	r3, [r3, #1]
 800f650:	2b01      	cmp	r3, #1
 800f652:	d006      	beq.n	800f662 <lwip_netconn_do_writemore+0x3a>
 800f654:	4b90      	ldr	r3, [pc, #576]	; (800f898 <lwip_netconn_do_writemore+0x270>)
 800f656:	f240 6274 	movw	r2, #1652	; 0x674
 800f65a:	4992      	ldr	r1, [pc, #584]	; (800f8a4 <lwip_netconn_do_writemore+0x27c>)
 800f65c:	4890      	ldr	r0, [pc, #576]	; (800f8a0 <lwip_netconn_do_writemore+0x278>)
 800f65e:	f011 fc77 	bl	8020f50 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	6a1b      	ldr	r3, [r3, #32]
 800f666:	2b00      	cmp	r3, #0
 800f668:	d106      	bne.n	800f678 <lwip_netconn_do_writemore+0x50>
 800f66a:	4b8b      	ldr	r3, [pc, #556]	; (800f898 <lwip_netconn_do_writemore+0x270>)
 800f66c:	f240 6275 	movw	r2, #1653	; 0x675
 800f670:	498d      	ldr	r1, [pc, #564]	; (800f8a8 <lwip_netconn_do_writemore+0x280>)
 800f672:	488b      	ldr	r0, [pc, #556]	; (800f8a0 <lwip_netconn_do_writemore+0x278>)
 800f674:	f011 fc6c 	bl	8020f50 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	685b      	ldr	r3, [r3, #4]
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d106      	bne.n	800f68e <lwip_netconn_do_writemore+0x66>
 800f680:	4b85      	ldr	r3, [pc, #532]	; (800f898 <lwip_netconn_do_writemore+0x270>)
 800f682:	f240 6276 	movw	r2, #1654	; 0x676
 800f686:	4989      	ldr	r1, [pc, #548]	; (800f8ac <lwip_netconn_do_writemore+0x284>)
 800f688:	4885      	ldr	r0, [pc, #532]	; (800f8a0 <lwip_netconn_do_writemore+0x278>)
 800f68a:	f011 fc61 	bl	8020f50 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	6a1b      	ldr	r3, [r3, #32]
 800f692:	699a      	ldr	r2, [r3, #24]
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	6a1b      	ldr	r3, [r3, #32]
 800f698:	695b      	ldr	r3, [r3, #20]
 800f69a:	429a      	cmp	r2, r3
 800f69c:	d306      	bcc.n	800f6ac <lwip_netconn_do_writemore+0x84>
 800f69e:	4b7e      	ldr	r3, [pc, #504]	; (800f898 <lwip_netconn_do_writemore+0x270>)
 800f6a0:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 800f6a4:	4982      	ldr	r1, [pc, #520]	; (800f8b0 <lwip_netconn_do_writemore+0x288>)
 800f6a6:	487e      	ldr	r0, [pc, #504]	; (800f8a0 <lwip_netconn_do_writemore+0x278>)
 800f6a8:	f011 fc52 	bl	8020f50 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	6a1b      	ldr	r3, [r3, #32]
 800f6b0:	899b      	ldrh	r3, [r3, #12]
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d106      	bne.n	800f6c4 <lwip_netconn_do_writemore+0x9c>
 800f6b6:	4b78      	ldr	r3, [pc, #480]	; (800f898 <lwip_netconn_do_writemore+0x270>)
 800f6b8:	f240 6279 	movw	r2, #1657	; 0x679
 800f6bc:	497d      	ldr	r1, [pc, #500]	; (800f8b4 <lwip_netconn_do_writemore+0x28c>)
 800f6be:	4878      	ldr	r0, [pc, #480]	; (800f8a0 <lwip_netconn_do_writemore+0x278>)
 800f6c0:	f011 fc46 	bl	8020f50 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	6a1b      	ldr	r3, [r3, #32]
 800f6c8:	7f1b      	ldrb	r3, [r3, #28]
 800f6ca:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	7f1b      	ldrb	r3, [r3, #28]
 800f6d0:	f003 0302 	and.w	r3, r3, #2
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d104      	bne.n	800f6e2 <lwip_netconn_do_writemore+0xba>
 800f6d8:	7ebb      	ldrb	r3, [r7, #26]
 800f6da:	f003 0304 	and.w	r3, r3, #4
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d001      	beq.n	800f6e6 <lwip_netconn_do_writemore+0xbe>
 800f6e2:	2301      	movs	r3, #1
 800f6e4:	e000      	b.n	800f6e8 <lwip_netconn_do_writemore+0xc0>
 800f6e6:	2300      	movs	r3, #0
 800f6e8:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	6a1b      	ldr	r3, [r3, #32]
 800f6ee:	689b      	ldr	r3, [r3, #8]
 800f6f0:	681a      	ldr	r2, [r3, #0]
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	6a1b      	ldr	r3, [r3, #32]
 800f6f6:	691b      	ldr	r3, [r3, #16]
 800f6f8:	4413      	add	r3, r2
 800f6fa:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	6a1b      	ldr	r3, [r3, #32]
 800f700:	689b      	ldr	r3, [r3, #8]
 800f702:	685a      	ldr	r2, [r3, #4]
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	6a1b      	ldr	r3, [r3, #32]
 800f708:	691b      	ldr	r3, [r3, #16]
 800f70a:	1ad3      	subs	r3, r2, r3
 800f70c:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800f70e:	693b      	ldr	r3, [r7, #16]
 800f710:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f714:	d307      	bcc.n	800f726 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800f716:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f71a:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800f71c:	7ebb      	ldrb	r3, [r7, #26]
 800f71e:	f043 0302 	orr.w	r3, r3, #2
 800f722:	76bb      	strb	r3, [r7, #26]
 800f724:	e001      	b.n	800f72a <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800f726:	693b      	ldr	r3, [r7, #16]
 800f728:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	685b      	ldr	r3, [r3, #4]
 800f72e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800f732:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800f734:	89fa      	ldrh	r2, [r7, #14]
 800f736:	8bbb      	ldrh	r3, [r7, #28]
 800f738:	429a      	cmp	r2, r3
 800f73a:	d216      	bcs.n	800f76a <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800f73c:	89fb      	ldrh	r3, [r7, #14]
 800f73e:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800f740:	7e3b      	ldrb	r3, [r7, #24]
 800f742:	2b00      	cmp	r3, #0
 800f744:	d00d      	beq.n	800f762 <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800f746:	8bbb      	ldrh	r3, [r7, #28]
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d10e      	bne.n	800f76a <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	6a1b      	ldr	r3, [r3, #32]
 800f750:	699b      	ldr	r3, [r3, #24]
 800f752:	2b00      	cmp	r3, #0
 800f754:	d102      	bne.n	800f75c <lwip_netconn_do_writemore+0x134>
 800f756:	f06f 0306 	mvn.w	r3, #6
 800f75a:	e000      	b.n	800f75e <lwip_netconn_do_writemore+0x136>
 800f75c:	2300      	movs	r3, #0
 800f75e:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800f760:	e07d      	b.n	800f85e <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800f762:	7ebb      	ldrb	r3, [r7, #26]
 800f764:	f043 0302 	orr.w	r3, r3, #2
 800f768:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	6a1b      	ldr	r3, [r3, #32]
 800f76e:	691a      	ldr	r2, [r3, #16]
 800f770:	8bbb      	ldrh	r3, [r7, #28]
 800f772:	441a      	add	r2, r3
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	6a1b      	ldr	r3, [r3, #32]
 800f778:	689b      	ldr	r3, [r3, #8]
 800f77a:	685b      	ldr	r3, [r3, #4]
 800f77c:	429a      	cmp	r2, r3
 800f77e:	d906      	bls.n	800f78e <lwip_netconn_do_writemore+0x166>
 800f780:	4b45      	ldr	r3, [pc, #276]	; (800f898 <lwip_netconn_do_writemore+0x270>)
 800f782:	f240 62a4 	movw	r2, #1700	; 0x6a4
 800f786:	494c      	ldr	r1, [pc, #304]	; (800f8b8 <lwip_netconn_do_writemore+0x290>)
 800f788:	4845      	ldr	r0, [pc, #276]	; (800f8a0 <lwip_netconn_do_writemore+0x278>)
 800f78a:	f011 fbe1 	bl	8020f50 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800f78e:	8bbb      	ldrh	r3, [r7, #28]
 800f790:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f794:	4293      	cmp	r3, r2
 800f796:	d103      	bne.n	800f7a0 <lwip_netconn_do_writemore+0x178>
 800f798:	693b      	ldr	r3, [r7, #16]
 800f79a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f79e:	d209      	bcs.n	800f7b4 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800f7a0:	693b      	ldr	r3, [r7, #16]
 800f7a2:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800f7a4:	8bba      	ldrh	r2, [r7, #28]
 800f7a6:	429a      	cmp	r2, r3
 800f7a8:	d10b      	bne.n	800f7c2 <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	6a1b      	ldr	r3, [r3, #32]
 800f7ae:	899b      	ldrh	r3, [r3, #12]
 800f7b0:	2b01      	cmp	r3, #1
 800f7b2:	d906      	bls.n	800f7c2 <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800f7b4:	2301      	movs	r3, #1
 800f7b6:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800f7b8:	7ebb      	ldrb	r3, [r7, #26]
 800f7ba:	f043 0302 	orr.w	r3, r3, #2
 800f7be:	76bb      	strb	r3, [r7, #26]
 800f7c0:	e001      	b.n	800f7c6 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800f7c2:	2300      	movs	r3, #0
 800f7c4:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	6858      	ldr	r0, [r3, #4]
 800f7ca:	7ebb      	ldrb	r3, [r7, #26]
 800f7cc:	8bba      	ldrh	r2, [r7, #28]
 800f7ce:	6979      	ldr	r1, [r7, #20]
 800f7d0:	f00a fc6a 	bl	801a0a8 <tcp_write>
 800f7d4:	4603      	mov	r3, r0
 800f7d6:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800f7d8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d12c      	bne.n	800f83a <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	6a1b      	ldr	r3, [r3, #32]
 800f7e4:	6999      	ldr	r1, [r3, #24]
 800f7e6:	8bba      	ldrh	r2, [r7, #28]
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	6a1b      	ldr	r3, [r3, #32]
 800f7ec:	440a      	add	r2, r1
 800f7ee:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	6a1b      	ldr	r3, [r3, #32]
 800f7f4:	6919      	ldr	r1, [r3, #16]
 800f7f6:	8bba      	ldrh	r2, [r7, #28]
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	6a1b      	ldr	r3, [r3, #32]
 800f7fc:	440a      	add	r2, r1
 800f7fe:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	6a1b      	ldr	r3, [r3, #32]
 800f804:	691a      	ldr	r2, [r3, #16]
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	6a1b      	ldr	r3, [r3, #32]
 800f80a:	689b      	ldr	r3, [r3, #8]
 800f80c:	685b      	ldr	r3, [r3, #4]
 800f80e:	429a      	cmp	r2, r3
 800f810:	d113      	bne.n	800f83a <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	6a1b      	ldr	r3, [r3, #32]
 800f816:	899a      	ldrh	r2, [r3, #12]
 800f818:	3a01      	subs	r2, #1
 800f81a:	b292      	uxth	r2, r2
 800f81c:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	6a1b      	ldr	r3, [r3, #32]
 800f822:	899b      	ldrh	r3, [r3, #12]
 800f824:	2b00      	cmp	r3, #0
 800f826:	d008      	beq.n	800f83a <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	6a1b      	ldr	r3, [r3, #32]
 800f82c:	689a      	ldr	r2, [r3, #8]
 800f82e:	3208      	adds	r2, #8
 800f830:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	6a1b      	ldr	r3, [r3, #32]
 800f836:	2200      	movs	r2, #0
 800f838:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800f83a:	7e7b      	ldrb	r3, [r7, #25]
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d004      	beq.n	800f84a <lwip_netconn_do_writemore+0x222>
 800f840:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f844:	2b00      	cmp	r3, #0
 800f846:	f43f af50 	beq.w	800f6ea <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800f84a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d004      	beq.n	800f85c <lwip_netconn_do_writemore+0x234>
 800f852:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f85a:	d146      	bne.n	800f8ea <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800f85c:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800f85e:	7e3b      	ldrb	r3, [r7, #24]
 800f860:	2b00      	cmp	r3, #0
 800f862:	d02b      	beq.n	800f8bc <lwip_netconn_do_writemore+0x294>
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	6a1b      	ldr	r3, [r3, #32]
 800f868:	699a      	ldr	r2, [r3, #24]
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	6a1b      	ldr	r3, [r3, #32]
 800f86e:	695b      	ldr	r3, [r3, #20]
 800f870:	429a      	cmp	r2, r3
 800f872:	d223      	bcs.n	800f8bc <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d005      	beq.n	800f888 <lwip_netconn_do_writemore+0x260>
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f880:	2200      	movs	r2, #0
 800f882:	2103      	movs	r1, #3
 800f884:	6878      	ldr	r0, [r7, #4]
 800f886:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	7f1b      	ldrb	r3, [r3, #28]
 800f88c:	f043 0310 	orr.w	r3, r3, #16
 800f890:	b2da      	uxtb	r2, r3
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	771a      	strb	r2, [r3, #28]
 800f896:	e028      	b.n	800f8ea <lwip_netconn_do_writemore+0x2c2>
 800f898:	08023558 	.word	0x08023558
 800f89c:	080236d0 	.word	0x080236d0
 800f8a0:	080235bc 	.word	0x080235bc
 800f8a4:	080239d8 	.word	0x080239d8
 800f8a8:	080236e0 	.word	0x080236e0
 800f8ac:	080239f8 	.word	0x080239f8
 800f8b0:	08023a10 	.word	0x08023a10
 800f8b4:	08023a50 	.word	0x08023a50
 800f8b8:	08023a78 	.word	0x08023a78
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	685b      	ldr	r3, [r3, #4]
 800f8c0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800f8c4:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800f8c8:	d305      	bcc.n	800f8d6 <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	685b      	ldr	r3, [r3, #4]
 800f8ce:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800f8d2:	2b04      	cmp	r3, #4
 800f8d4:	d909      	bls.n	800f8ea <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d005      	beq.n	800f8ea <lwip_netconn_do_writemore+0x2c2>
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8e2:	2200      	movs	r2, #0
 800f8e4:	2103      	movs	r1, #3
 800f8e6:	6878      	ldr	r0, [r7, #4]
 800f8e8:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800f8ea:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	d11d      	bne.n	800f92e <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	6a1b      	ldr	r3, [r3, #32]
 800f8f6:	699a      	ldr	r2, [r3, #24]
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	6a1b      	ldr	r3, [r3, #32]
 800f8fc:	695b      	ldr	r3, [r3, #20]
 800f8fe:	429a      	cmp	r2, r3
 800f900:	d002      	beq.n	800f908 <lwip_netconn_do_writemore+0x2e0>
 800f902:	7e3b      	ldrb	r3, [r7, #24]
 800f904:	2b00      	cmp	r3, #0
 800f906:	d001      	beq.n	800f90c <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800f908:	2301      	movs	r3, #1
 800f90a:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	685b      	ldr	r3, [r3, #4]
 800f910:	4618      	mov	r0, r3
 800f912:	f00b f9b5 	bl	801ac80 <tcp_output>
 800f916:	4603      	mov	r3, r0
 800f918:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800f91a:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800f91e:	f113 0f04 	cmn.w	r3, #4
 800f922:	d12c      	bne.n	800f97e <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800f924:	7b3b      	ldrb	r3, [r7, #12]
 800f926:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800f928:	2301      	movs	r3, #1
 800f92a:	76fb      	strb	r3, [r7, #27]
 800f92c:	e027      	b.n	800f97e <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800f92e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f932:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f936:	d120      	bne.n	800f97a <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	685b      	ldr	r3, [r3, #4]
 800f93c:	4618      	mov	r0, r3
 800f93e:	f00b f99f 	bl	801ac80 <tcp_output>
 800f942:	4603      	mov	r3, r0
 800f944:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800f946:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800f94a:	f113 0f04 	cmn.w	r3, #4
 800f94e:	d104      	bne.n	800f95a <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800f950:	7b7b      	ldrb	r3, [r7, #13]
 800f952:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800f954:	2301      	movs	r3, #1
 800f956:	76fb      	strb	r3, [r7, #27]
 800f958:	e011      	b.n	800f97e <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800f95a:	7e3b      	ldrb	r3, [r7, #24]
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d00e      	beq.n	800f97e <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	6a1b      	ldr	r3, [r3, #32]
 800f964:	699b      	ldr	r3, [r3, #24]
 800f966:	2b00      	cmp	r3, #0
 800f968:	d102      	bne.n	800f970 <lwip_netconn_do_writemore+0x348>
 800f96a:	f06f 0306 	mvn.w	r3, #6
 800f96e:	e000      	b.n	800f972 <lwip_netconn_do_writemore+0x34a>
 800f970:	2300      	movs	r3, #0
 800f972:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800f974:	2301      	movs	r3, #1
 800f976:	76fb      	strb	r3, [r7, #27]
 800f978:	e001      	b.n	800f97e <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800f97a:	2301      	movs	r3, #1
 800f97c:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800f97e:	7efb      	ldrb	r3, [r7, #27]
 800f980:	2b00      	cmp	r3, #0
 800f982:	d015      	beq.n	800f9b0 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	6a1b      	ldr	r3, [r3, #32]
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	330c      	adds	r3, #12
 800f98c:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	6a1b      	ldr	r3, [r3, #32]
 800f992:	7ffa      	ldrb	r2, [r7, #31]
 800f994:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	2200      	movs	r2, #0
 800f99a:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	2200      	movs	r2, #0
 800f9a0:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800f9a2:	78fb      	ldrb	r3, [r7, #3]
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d006      	beq.n	800f9b6 <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800f9a8:	68b8      	ldr	r0, [r7, #8]
 800f9aa:	f005 fff3 	bl	8015994 <sys_sem_signal>
 800f9ae:	e002      	b.n	800f9b6 <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800f9b0:	f04f 33ff 	mov.w	r3, #4294967295
 800f9b4:	e000      	b.n	800f9b8 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800f9b6:	2300      	movs	r3, #0
}
 800f9b8:	4618      	mov	r0, r3
 800f9ba:	3720      	adds	r7, #32
 800f9bc:	46bd      	mov	sp, r7
 800f9be:	bd80      	pop	{r7, pc}

0800f9c0 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800f9c0:	b580      	push	{r7, lr}
 800f9c2:	b084      	sub	sp, #16
 800f9c4:	af00      	add	r7, sp, #0
 800f9c6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800f9cc:	68bb      	ldr	r3, [r7, #8]
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	4618      	mov	r0, r3
 800f9d2:	f7fe fcf7 	bl	800e3c4 <netconn_err>
 800f9d6:	4603      	mov	r3, r0
 800f9d8:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800f9da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d166      	bne.n	800fab0 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800f9e2:	68bb      	ldr	r3, [r7, #8]
 800f9e4:	681b      	ldr	r3, [r3, #0]
 800f9e6:	781b      	ldrb	r3, [r3, #0]
 800f9e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f9ec:	2b10      	cmp	r3, #16
 800f9ee:	d15d      	bne.n	800faac <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800f9f0:	68bb      	ldr	r3, [r7, #8]
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	785b      	ldrb	r3, [r3, #1]
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	d002      	beq.n	800fa00 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800f9fa:	23fb      	movs	r3, #251	; 0xfb
 800f9fc:	73fb      	strb	r3, [r7, #15]
 800f9fe:	e057      	b.n	800fab0 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800fa00:	68bb      	ldr	r3, [r7, #8]
 800fa02:	681b      	ldr	r3, [r3, #0]
 800fa04:	685b      	ldr	r3, [r3, #4]
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d04d      	beq.n	800faa6 <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800fa0a:	68bb      	ldr	r3, [r7, #8]
 800fa0c:	681b      	ldr	r3, [r3, #0]
 800fa0e:	2201      	movs	r2, #1
 800fa10:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800fa12:	68bb      	ldr	r3, [r7, #8]
 800fa14:	681b      	ldr	r3, [r3, #0]
 800fa16:	6a1b      	ldr	r3, [r3, #32]
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d006      	beq.n	800fa2a <lwip_netconn_do_write+0x6a>
 800fa1c:	4b28      	ldr	r3, [pc, #160]	; (800fac0 <lwip_netconn_do_write+0x100>)
 800fa1e:	f240 7223 	movw	r2, #1827	; 0x723
 800fa22:	4928      	ldr	r1, [pc, #160]	; (800fac4 <lwip_netconn_do_write+0x104>)
 800fa24:	4828      	ldr	r0, [pc, #160]	; (800fac8 <lwip_netconn_do_write+0x108>)
 800fa26:	f011 fa93 	bl	8020f50 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800fa2a:	68bb      	ldr	r3, [r7, #8]
 800fa2c:	695b      	ldr	r3, [r3, #20]
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	d106      	bne.n	800fa40 <lwip_netconn_do_write+0x80>
 800fa32:	4b23      	ldr	r3, [pc, #140]	; (800fac0 <lwip_netconn_do_write+0x100>)
 800fa34:	f240 7224 	movw	r2, #1828	; 0x724
 800fa38:	4924      	ldr	r1, [pc, #144]	; (800facc <lwip_netconn_do_write+0x10c>)
 800fa3a:	4823      	ldr	r0, [pc, #140]	; (800fac8 <lwip_netconn_do_write+0x108>)
 800fa3c:	f011 fa88 	bl	8020f50 <iprintf>
        msg->conn->current_msg = msg;
 800fa40:	68bb      	ldr	r3, [r7, #8]
 800fa42:	681b      	ldr	r3, [r3, #0]
 800fa44:	68ba      	ldr	r2, [r7, #8]
 800fa46:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800fa48:	68bb      	ldr	r3, [r7, #8]
 800fa4a:	681b      	ldr	r3, [r3, #0]
 800fa4c:	2100      	movs	r1, #0
 800fa4e:	4618      	mov	r0, r3
 800fa50:	f7ff fdea 	bl	800f628 <lwip_netconn_do_writemore>
 800fa54:	4603      	mov	r3, r0
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d02e      	beq.n	800fab8 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800fa5a:	68bb      	ldr	r3, [r7, #8]
 800fa5c:	681b      	ldr	r3, [r3, #0]
 800fa5e:	785b      	ldrb	r3, [r3, #1]
 800fa60:	2b01      	cmp	r3, #1
 800fa62:	d006      	beq.n	800fa72 <lwip_netconn_do_write+0xb2>
 800fa64:	4b16      	ldr	r3, [pc, #88]	; (800fac0 <lwip_netconn_do_write+0x100>)
 800fa66:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800fa6a:	4919      	ldr	r1, [pc, #100]	; (800fad0 <lwip_netconn_do_write+0x110>)
 800fa6c:	4816      	ldr	r0, [pc, #88]	; (800fac8 <lwip_netconn_do_write+0x108>)
 800fa6e:	f011 fa6f 	bl	8020f50 <iprintf>
          UNLOCK_TCPIP_CORE();
 800fa72:	4818      	ldr	r0, [pc, #96]	; (800fad4 <lwip_netconn_do_write+0x114>)
 800fa74:	f005 ffff 	bl	8015a76 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800fa78:	68bb      	ldr	r3, [r7, #8]
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	330c      	adds	r3, #12
 800fa7e:	2100      	movs	r1, #0
 800fa80:	4618      	mov	r0, r3
 800fa82:	f005 ff56 	bl	8015932 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800fa86:	4813      	ldr	r0, [pc, #76]	; (800fad4 <lwip_netconn_do_write+0x114>)
 800fa88:	f005 ffe6 	bl	8015a58 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800fa8c:	68bb      	ldr	r3, [r7, #8]
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	785b      	ldrb	r3, [r3, #1]
 800fa92:	2b01      	cmp	r3, #1
 800fa94:	d110      	bne.n	800fab8 <lwip_netconn_do_write+0xf8>
 800fa96:	4b0a      	ldr	r3, [pc, #40]	; (800fac0 <lwip_netconn_do_write+0x100>)
 800fa98:	f240 722c 	movw	r2, #1836	; 0x72c
 800fa9c:	490c      	ldr	r1, [pc, #48]	; (800fad0 <lwip_netconn_do_write+0x110>)
 800fa9e:	480a      	ldr	r0, [pc, #40]	; (800fac8 <lwip_netconn_do_write+0x108>)
 800faa0:	f011 fa56 	bl	8020f50 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800faa4:	e008      	b.n	800fab8 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 800faa6:	23f5      	movs	r3, #245	; 0xf5
 800faa8:	73fb      	strb	r3, [r7, #15]
 800faaa:	e001      	b.n	800fab0 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800faac:	23fa      	movs	r3, #250	; 0xfa
 800faae:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800fab0:	68bb      	ldr	r3, [r7, #8]
 800fab2:	7bfa      	ldrb	r2, [r7, #15]
 800fab4:	711a      	strb	r2, [r3, #4]
 800fab6:	e000      	b.n	800faba <lwip_netconn_do_write+0xfa>
        return;
 800fab8:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800faba:	3710      	adds	r7, #16
 800fabc:	46bd      	mov	sp, r7
 800fabe:	bd80      	pop	{r7, pc}
 800fac0:	08023558 	.word	0x08023558
 800fac4:	0802391c 	.word	0x0802391c
 800fac8:	080235bc 	.word	0x080235bc
 800facc:	08023aa4 	.word	0x08023aa4
 800fad0:	08023938 	.word	0x08023938
 800fad4:	24048e98 	.word	0x24048e98

0800fad8 <lwip_netconn_do_getaddr>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_getaddr(void *m)
{
 800fad8:	b580      	push	{r7, lr}
 800fada:	b084      	sub	sp, #16
 800fadc:	af00      	add	r7, sp, #0
 800fade:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	60fb      	str	r3, [r7, #12]

  if (msg->conn->pcb.ip != NULL) {
 800fae4:	68fb      	ldr	r3, [r7, #12]
 800fae6:	681b      	ldr	r3, [r3, #0]
 800fae8:	685b      	ldr	r3, [r3, #4]
 800faea:	2b00      	cmp	r3, #0
 800faec:	d06c      	beq.n	800fbc8 <lwip_netconn_do_getaddr+0xf0>
    if (msg->msg.ad.local) {
 800faee:	68fb      	ldr	r3, [r7, #12]
 800faf0:	7c1b      	ldrb	r3, [r3, #16]
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	d007      	beq.n	800fb06 <lwip_netconn_do_getaddr+0x2e>
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 800faf6:	68fb      	ldr	r3, [r7, #12]
 800faf8:	681b      	ldr	r3, [r3, #0]
 800fafa:	685a      	ldr	r2, [r3, #4]
 800fafc:	68fb      	ldr	r3, [r7, #12]
 800fafe:	689b      	ldr	r3, [r3, #8]
 800fb00:	6812      	ldr	r2, [r2, #0]
 800fb02:	601a      	str	r2, [r3, #0]
 800fb04:	e006      	b.n	800fb14 <lwip_netconn_do_getaddr+0x3c>
                   msg->conn->pcb.ip->local_ip);
    } else {
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 800fb06:	68fb      	ldr	r3, [r7, #12]
 800fb08:	681b      	ldr	r3, [r3, #0]
 800fb0a:	685a      	ldr	r2, [r3, #4]
 800fb0c:	68fb      	ldr	r3, [r7, #12]
 800fb0e:	689b      	ldr	r3, [r3, #8]
 800fb10:	6852      	ldr	r2, [r2, #4]
 800fb12:	601a      	str	r2, [r3, #0]
                   msg->conn->pcb.ip->remote_ip);
    }

    msg->err = ERR_OK;
 800fb14:	68fb      	ldr	r3, [r7, #12]
 800fb16:	2200      	movs	r2, #0
 800fb18:	711a      	strb	r2, [r3, #4]
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800fb1a:	68fb      	ldr	r3, [r7, #12]
 800fb1c:	681b      	ldr	r3, [r3, #0]
 800fb1e:	781b      	ldrb	r3, [r3, #0]
 800fb20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fb24:	2b10      	cmp	r3, #16
 800fb26:	d021      	beq.n	800fb6c <lwip_netconn_do_getaddr+0x94>
 800fb28:	2b20      	cmp	r3, #32
 800fb2a:	d144      	bne.n	800fbb6 <lwip_netconn_do_getaddr+0xde>
        }
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        if (msg->msg.ad.local) {
 800fb2c:	68fb      	ldr	r3, [r7, #12]
 800fb2e:	7c1b      	ldrb	r3, [r3, #16]
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d007      	beq.n	800fb44 <lwip_netconn_do_getaddr+0x6c>
          API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->local_port;
 800fb34:	68fb      	ldr	r3, [r7, #12]
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	685a      	ldr	r2, [r3, #4]
 800fb3a:	68fb      	ldr	r3, [r7, #12]
 800fb3c:	68db      	ldr	r3, [r3, #12]
 800fb3e:	8a52      	ldrh	r2, [r2, #18]
 800fb40:	801a      	strh	r2, [r3, #0]
            msg->err = ERR_CONN;
          } else {
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
          }
        }
        break;
 800fb42:	e044      	b.n	800fbce <lwip_netconn_do_getaddr+0xf6>
          if ((msg->conn->pcb.udp->flags & UDP_FLAGS_CONNECTED) == 0) {
 800fb44:	68fb      	ldr	r3, [r7, #12]
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	685b      	ldr	r3, [r3, #4]
 800fb4a:	7c1b      	ldrb	r3, [r3, #16]
 800fb4c:	f003 0304 	and.w	r3, r3, #4
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d103      	bne.n	800fb5c <lwip_netconn_do_getaddr+0x84>
            msg->err = ERR_CONN;
 800fb54:	68fb      	ldr	r3, [r7, #12]
 800fb56:	22f5      	movs	r2, #245	; 0xf5
 800fb58:	711a      	strb	r2, [r3, #4]
        break;
 800fb5a:	e038      	b.n	800fbce <lwip_netconn_do_getaddr+0xf6>
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
 800fb5c:	68fb      	ldr	r3, [r7, #12]
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	685a      	ldr	r2, [r3, #4]
 800fb62:	68fb      	ldr	r3, [r7, #12]
 800fb64:	68db      	ldr	r3, [r3, #12]
 800fb66:	8a92      	ldrh	r2, [r2, #20]
 800fb68:	801a      	strh	r2, [r3, #0]
        break;
 800fb6a:	e030      	b.n	800fbce <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        if ((msg->msg.ad.local == 0) &&
 800fb6c:	68fb      	ldr	r3, [r7, #12]
 800fb6e:	7c1b      	ldrb	r3, [r3, #16]
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d10f      	bne.n	800fb94 <lwip_netconn_do_getaddr+0xbc>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 800fb74:	68fb      	ldr	r3, [r7, #12]
 800fb76:	681b      	ldr	r3, [r3, #0]
 800fb78:	685b      	ldr	r3, [r3, #4]
 800fb7a:	7d1b      	ldrb	r3, [r3, #20]
        if ((msg->msg.ad.local == 0) &&
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	d005      	beq.n	800fb8c <lwip_netconn_do_getaddr+0xb4>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 800fb80:	68fb      	ldr	r3, [r7, #12]
 800fb82:	681b      	ldr	r3, [r3, #0]
 800fb84:	685b      	ldr	r3, [r3, #4]
 800fb86:	7d1b      	ldrb	r3, [r3, #20]
 800fb88:	2b01      	cmp	r3, #1
 800fb8a:	d103      	bne.n	800fb94 <lwip_netconn_do_getaddr+0xbc>
          /* pcb is not connected and remote name is requested */
          msg->err = ERR_CONN;
 800fb8c:	68fb      	ldr	r3, [r7, #12]
 800fb8e:	22f5      	movs	r2, #245	; 0xf5
 800fb90:	711a      	strb	r2, [r3, #4]
        } else {
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
        }
        break;
 800fb92:	e01c      	b.n	800fbce <lwip_netconn_do_getaddr+0xf6>
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
 800fb94:	68fb      	ldr	r3, [r7, #12]
 800fb96:	7c1b      	ldrb	r3, [r3, #16]
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d004      	beq.n	800fba6 <lwip_netconn_do_getaddr+0xce>
 800fb9c:	68fb      	ldr	r3, [r7, #12]
 800fb9e:	681b      	ldr	r3, [r3, #0]
 800fba0:	685b      	ldr	r3, [r3, #4]
 800fba2:	8adb      	ldrh	r3, [r3, #22]
 800fba4:	e003      	b.n	800fbae <lwip_netconn_do_getaddr+0xd6>
 800fba6:	68fb      	ldr	r3, [r7, #12]
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	685b      	ldr	r3, [r3, #4]
 800fbac:	8b1b      	ldrh	r3, [r3, #24]
 800fbae:	68fa      	ldr	r2, [r7, #12]
 800fbb0:	68d2      	ldr	r2, [r2, #12]
 800fbb2:	8013      	strh	r3, [r2, #0]
        break;
 800fbb4:	e00b      	b.n	800fbce <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_TCP */
      default:
        LWIP_ASSERT("invalid netconn_type", 0);
 800fbb6:	4b08      	ldr	r3, [pc, #32]	; (800fbd8 <lwip_netconn_do_getaddr+0x100>)
 800fbb8:	f240 727d 	movw	r2, #1917	; 0x77d
 800fbbc:	4907      	ldr	r1, [pc, #28]	; (800fbdc <lwip_netconn_do_getaddr+0x104>)
 800fbbe:	4808      	ldr	r0, [pc, #32]	; (800fbe0 <lwip_netconn_do_getaddr+0x108>)
 800fbc0:	f011 f9c6 	bl	8020f50 <iprintf>
        break;
 800fbc4:	bf00      	nop
 800fbc6:	e002      	b.n	800fbce <lwip_netconn_do_getaddr+0xf6>
    }
  } else {
    msg->err = ERR_CONN;
 800fbc8:	68fb      	ldr	r3, [r7, #12]
 800fbca:	22f5      	movs	r2, #245	; 0xf5
 800fbcc:	711a      	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
}
 800fbce:	bf00      	nop
 800fbd0:	3710      	adds	r7, #16
 800fbd2:	46bd      	mov	sp, r7
 800fbd4:	bd80      	pop	{r7, pc}
 800fbd6:	bf00      	nop
 800fbd8:	08023558 	.word	0x08023558
 800fbdc:	08023ab8 	.word	0x08023ab8
 800fbe0:	080235bc 	.word	0x080235bc

0800fbe4 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800fbe4:	b580      	push	{r7, lr}
 800fbe6:	b084      	sub	sp, #16
 800fbe8:	af00      	add	r7, sp, #0
 800fbea:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800fbf0:	68fb      	ldr	r3, [r7, #12]
 800fbf2:	681b      	ldr	r3, [r3, #0]
 800fbf4:	785b      	ldrb	r3, [r3, #1]
 800fbf6:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800fbf8:	68fb      	ldr	r3, [r7, #12]
 800fbfa:	681b      	ldr	r3, [r3, #0]
 800fbfc:	685b      	ldr	r3, [r3, #4]
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d069      	beq.n	800fcd6 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800fc02:	68fb      	ldr	r3, [r7, #12]
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	781b      	ldrb	r3, [r3, #0]
 800fc08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800fc0c:	2b10      	cmp	r3, #16
 800fc0e:	d162      	bne.n	800fcd6 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800fc10:	68fb      	ldr	r3, [r7, #12]
 800fc12:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800fc14:	2b03      	cmp	r3, #3
 800fc16:	d002      	beq.n	800fc1e <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800fc18:	7afb      	ldrb	r3, [r7, #11]
 800fc1a:	2b02      	cmp	r3, #2
 800fc1c:	d05b      	beq.n	800fcd6 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800fc1e:	7afb      	ldrb	r3, [r7, #11]
 800fc20:	2b03      	cmp	r3, #3
 800fc22:	d103      	bne.n	800fc2c <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800fc24:	68fb      	ldr	r3, [r7, #12]
 800fc26:	22f5      	movs	r2, #245	; 0xf5
 800fc28:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800fc2a:	e059      	b.n	800fce0 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800fc2c:	7afb      	ldrb	r3, [r7, #11]
 800fc2e:	2b01      	cmp	r3, #1
 800fc30:	d103      	bne.n	800fc3a <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800fc32:	68fb      	ldr	r3, [r7, #12]
 800fc34:	22fb      	movs	r2, #251	; 0xfb
 800fc36:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800fc38:	e052      	b.n	800fce0 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800fc3a:	68fb      	ldr	r3, [r7, #12]
 800fc3c:	7a1b      	ldrb	r3, [r3, #8]
 800fc3e:	f003 0301 	and.w	r3, r3, #1
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d004      	beq.n	800fc50 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	4618      	mov	r0, r3
 800fc4c:	f7ff f834 	bl	800ecb8 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800fc50:	68fb      	ldr	r3, [r7, #12]
 800fc52:	681b      	ldr	r3, [r3, #0]
 800fc54:	6a1b      	ldr	r3, [r3, #32]
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d006      	beq.n	800fc68 <lwip_netconn_do_close+0x84>
 800fc5a:	4b23      	ldr	r3, [pc, #140]	; (800fce8 <lwip_netconn_do_close+0x104>)
 800fc5c:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800fc60:	4922      	ldr	r1, [pc, #136]	; (800fcec <lwip_netconn_do_close+0x108>)
 800fc62:	4823      	ldr	r0, [pc, #140]	; (800fcf0 <lwip_netconn_do_close+0x10c>)
 800fc64:	f011 f974 	bl	8020f50 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	2204      	movs	r2, #4
 800fc6e:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800fc70:	68fb      	ldr	r3, [r7, #12]
 800fc72:	681b      	ldr	r3, [r3, #0]
 800fc74:	68fa      	ldr	r2, [r7, #12]
 800fc76:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800fc78:	68fb      	ldr	r3, [r7, #12]
 800fc7a:	681b      	ldr	r3, [r3, #0]
 800fc7c:	2100      	movs	r1, #0
 800fc7e:	4618      	mov	r0, r3
 800fc80:	f7ff f898 	bl	800edb4 <lwip_netconn_do_close_internal>
 800fc84:	4603      	mov	r3, r0
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d029      	beq.n	800fcde <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800fc8a:	68fb      	ldr	r3, [r7, #12]
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	785b      	ldrb	r3, [r3, #1]
 800fc90:	2b04      	cmp	r3, #4
 800fc92:	d006      	beq.n	800fca2 <lwip_netconn_do_close+0xbe>
 800fc94:	4b14      	ldr	r3, [pc, #80]	; (800fce8 <lwip_netconn_do_close+0x104>)
 800fc96:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800fc9a:	4916      	ldr	r1, [pc, #88]	; (800fcf4 <lwip_netconn_do_close+0x110>)
 800fc9c:	4814      	ldr	r0, [pc, #80]	; (800fcf0 <lwip_netconn_do_close+0x10c>)
 800fc9e:	f011 f957 	bl	8020f50 <iprintf>
        UNLOCK_TCPIP_CORE();
 800fca2:	4815      	ldr	r0, [pc, #84]	; (800fcf8 <lwip_netconn_do_close+0x114>)
 800fca4:	f005 fee7 	bl	8015a76 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800fca8:	68fb      	ldr	r3, [r7, #12]
 800fcaa:	681b      	ldr	r3, [r3, #0]
 800fcac:	330c      	adds	r3, #12
 800fcae:	2100      	movs	r1, #0
 800fcb0:	4618      	mov	r0, r3
 800fcb2:	f005 fe3e 	bl	8015932 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800fcb6:	4810      	ldr	r0, [pc, #64]	; (800fcf8 <lwip_netconn_do_close+0x114>)
 800fcb8:	f005 fece 	bl	8015a58 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800fcbc:	68fb      	ldr	r3, [r7, #12]
 800fcbe:	681b      	ldr	r3, [r3, #0]
 800fcc0:	785b      	ldrb	r3, [r3, #1]
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	d00b      	beq.n	800fcde <lwip_netconn_do_close+0xfa>
 800fcc6:	4b08      	ldr	r3, [pc, #32]	; (800fce8 <lwip_netconn_do_close+0x104>)
 800fcc8:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800fccc:	4909      	ldr	r1, [pc, #36]	; (800fcf4 <lwip_netconn_do_close+0x110>)
 800fcce:	4808      	ldr	r0, [pc, #32]	; (800fcf0 <lwip_netconn_do_close+0x10c>)
 800fcd0:	f011 f93e 	bl	8020f50 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800fcd4:	e003      	b.n	800fcde <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800fcd6:	68fb      	ldr	r3, [r7, #12]
 800fcd8:	22f5      	movs	r2, #245	; 0xf5
 800fcda:	711a      	strb	r2, [r3, #4]
 800fcdc:	e000      	b.n	800fce0 <lwip_netconn_do_close+0xfc>
      return;
 800fcde:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800fce0:	3710      	adds	r7, #16
 800fce2:	46bd      	mov	sp, r7
 800fce4:	bd80      	pop	{r7, pc}
 800fce6:	bf00      	nop
 800fce8:	08023558 	.word	0x08023558
 800fcec:	0802391c 	.word	0x0802391c
 800fcf0:	080235bc 	.word	0x080235bc
 800fcf4:	08023938 	.word	0x08023938
 800fcf8:	24048e98 	.word	0x24048e98

0800fcfc <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800fcfc:	b480      	push	{r7}
 800fcfe:	b083      	sub	sp, #12
 800fd00:	af00      	add	r7, sp, #0
 800fd02:	4603      	mov	r3, r0
 800fd04:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800fd06:	88fb      	ldrh	r3, [r7, #6]
 800fd08:	021b      	lsls	r3, r3, #8
 800fd0a:	b21a      	sxth	r2, r3
 800fd0c:	88fb      	ldrh	r3, [r7, #6]
 800fd0e:	0a1b      	lsrs	r3, r3, #8
 800fd10:	b29b      	uxth	r3, r3
 800fd12:	b21b      	sxth	r3, r3
 800fd14:	4313      	orrs	r3, r2
 800fd16:	b21b      	sxth	r3, r3
 800fd18:	b29b      	uxth	r3, r3
}
 800fd1a:	4618      	mov	r0, r3
 800fd1c:	370c      	adds	r7, #12
 800fd1e:	46bd      	mov	sp, r7
 800fd20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd24:	4770      	bx	lr

0800fd26 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800fd26:	b480      	push	{r7}
 800fd28:	b083      	sub	sp, #12
 800fd2a:	af00      	add	r7, sp, #0
 800fd2c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	061a      	lsls	r2, r3, #24
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	021b      	lsls	r3, r3, #8
 800fd36:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800fd3a:	431a      	orrs	r2, r3
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	0a1b      	lsrs	r3, r3, #8
 800fd40:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800fd44:	431a      	orrs	r2, r3
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	0e1b      	lsrs	r3, r3, #24
 800fd4a:	4313      	orrs	r3, r2
}
 800fd4c:	4618      	mov	r0, r3
 800fd4e:	370c      	adds	r7, #12
 800fd50:	46bd      	mov	sp, r7
 800fd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd56:	4770      	bx	lr

0800fd58 <err_to_errno>:
  EIO            /* ERR_ARG        -16     Illegal argument.        */
};

int
err_to_errno(err_t err)
{
 800fd58:	b480      	push	{r7}
 800fd5a:	b083      	sub	sp, #12
 800fd5c:	af00      	add	r7, sp, #0
 800fd5e:	4603      	mov	r3, r0
 800fd60:	71fb      	strb	r3, [r7, #7]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_to_errno_table))) {
 800fd62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	dc04      	bgt.n	800fd74 <err_to_errno+0x1c>
 800fd6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fd6e:	425b      	negs	r3, r3
 800fd70:	2b10      	cmp	r3, #16
 800fd72:	dd01      	ble.n	800fd78 <err_to_errno+0x20>
    return EIO;
 800fd74:	2305      	movs	r3, #5
 800fd76:	e005      	b.n	800fd84 <err_to_errno+0x2c>
  }
  return err_to_errno_table[-err];
 800fd78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fd7c:	425b      	negs	r3, r3
 800fd7e:	4a04      	ldr	r2, [pc, #16]	; (800fd90 <err_to_errno+0x38>)
 800fd80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800fd84:	4618      	mov	r0, r3
 800fd86:	370c      	adds	r7, #12
 800fd88:	46bd      	mov	sp, r7
 800fd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd8e:	4770      	bx	lr
 800fd90:	08026ef0 	.word	0x08026ef0

0800fd94 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800fd94:	b580      	push	{r7, lr}
 800fd96:	b082      	sub	sp, #8
 800fd98:	af00      	add	r7, sp, #0
 800fd9a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800fd9c:	4915      	ldr	r1, [pc, #84]	; (800fdf4 <etharp_free_entry+0x60>)
 800fd9e:	687a      	ldr	r2, [r7, #4]
 800fda0:	4613      	mov	r3, r2
 800fda2:	005b      	lsls	r3, r3, #1
 800fda4:	4413      	add	r3, r2
 800fda6:	00db      	lsls	r3, r3, #3
 800fda8:	440b      	add	r3, r1
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d013      	beq.n	800fdd8 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800fdb0:	4910      	ldr	r1, [pc, #64]	; (800fdf4 <etharp_free_entry+0x60>)
 800fdb2:	687a      	ldr	r2, [r7, #4]
 800fdb4:	4613      	mov	r3, r2
 800fdb6:	005b      	lsls	r3, r3, #1
 800fdb8:	4413      	add	r3, r2
 800fdba:	00db      	lsls	r3, r3, #3
 800fdbc:	440b      	add	r3, r1
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	4618      	mov	r0, r3
 800fdc2:	f004 f945 	bl	8014050 <pbuf_free>
    arp_table[i].q = NULL;
 800fdc6:	490b      	ldr	r1, [pc, #44]	; (800fdf4 <etharp_free_entry+0x60>)
 800fdc8:	687a      	ldr	r2, [r7, #4]
 800fdca:	4613      	mov	r3, r2
 800fdcc:	005b      	lsls	r3, r3, #1
 800fdce:	4413      	add	r3, r2
 800fdd0:	00db      	lsls	r3, r3, #3
 800fdd2:	440b      	add	r3, r1
 800fdd4:	2200      	movs	r2, #0
 800fdd6:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800fdd8:	4906      	ldr	r1, [pc, #24]	; (800fdf4 <etharp_free_entry+0x60>)
 800fdda:	687a      	ldr	r2, [r7, #4]
 800fddc:	4613      	mov	r3, r2
 800fdde:	005b      	lsls	r3, r3, #1
 800fde0:	4413      	add	r3, r2
 800fde2:	00db      	lsls	r3, r3, #3
 800fde4:	440b      	add	r3, r1
 800fde6:	3314      	adds	r3, #20
 800fde8:	2200      	movs	r2, #0
 800fdea:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800fdec:	bf00      	nop
 800fdee:	3708      	adds	r7, #8
 800fdf0:	46bd      	mov	sp, r7
 800fdf2:	bd80      	pop	{r7, pc}
 800fdf4:	240405d8 	.word	0x240405d8

0800fdf8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800fdf8:	b580      	push	{r7, lr}
 800fdfa:	b082      	sub	sp, #8
 800fdfc:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800fdfe:	2300      	movs	r3, #0
 800fe00:	607b      	str	r3, [r7, #4]
 800fe02:	e096      	b.n	800ff32 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800fe04:	494f      	ldr	r1, [pc, #316]	; (800ff44 <etharp_tmr+0x14c>)
 800fe06:	687a      	ldr	r2, [r7, #4]
 800fe08:	4613      	mov	r3, r2
 800fe0a:	005b      	lsls	r3, r3, #1
 800fe0c:	4413      	add	r3, r2
 800fe0e:	00db      	lsls	r3, r3, #3
 800fe10:	440b      	add	r3, r1
 800fe12:	3314      	adds	r3, #20
 800fe14:	781b      	ldrb	r3, [r3, #0]
 800fe16:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800fe18:	78fb      	ldrb	r3, [r7, #3]
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	f000 8086 	beq.w	800ff2c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800fe20:	4948      	ldr	r1, [pc, #288]	; (800ff44 <etharp_tmr+0x14c>)
 800fe22:	687a      	ldr	r2, [r7, #4]
 800fe24:	4613      	mov	r3, r2
 800fe26:	005b      	lsls	r3, r3, #1
 800fe28:	4413      	add	r3, r2
 800fe2a:	00db      	lsls	r3, r3, #3
 800fe2c:	440b      	add	r3, r1
 800fe2e:	3312      	adds	r3, #18
 800fe30:	881b      	ldrh	r3, [r3, #0]
 800fe32:	3301      	adds	r3, #1
 800fe34:	b298      	uxth	r0, r3
 800fe36:	4943      	ldr	r1, [pc, #268]	; (800ff44 <etharp_tmr+0x14c>)
 800fe38:	687a      	ldr	r2, [r7, #4]
 800fe3a:	4613      	mov	r3, r2
 800fe3c:	005b      	lsls	r3, r3, #1
 800fe3e:	4413      	add	r3, r2
 800fe40:	00db      	lsls	r3, r3, #3
 800fe42:	440b      	add	r3, r1
 800fe44:	3312      	adds	r3, #18
 800fe46:	4602      	mov	r2, r0
 800fe48:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800fe4a:	493e      	ldr	r1, [pc, #248]	; (800ff44 <etharp_tmr+0x14c>)
 800fe4c:	687a      	ldr	r2, [r7, #4]
 800fe4e:	4613      	mov	r3, r2
 800fe50:	005b      	lsls	r3, r3, #1
 800fe52:	4413      	add	r3, r2
 800fe54:	00db      	lsls	r3, r3, #3
 800fe56:	440b      	add	r3, r1
 800fe58:	3312      	adds	r3, #18
 800fe5a:	881b      	ldrh	r3, [r3, #0]
 800fe5c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800fe60:	d215      	bcs.n	800fe8e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800fe62:	4938      	ldr	r1, [pc, #224]	; (800ff44 <etharp_tmr+0x14c>)
 800fe64:	687a      	ldr	r2, [r7, #4]
 800fe66:	4613      	mov	r3, r2
 800fe68:	005b      	lsls	r3, r3, #1
 800fe6a:	4413      	add	r3, r2
 800fe6c:	00db      	lsls	r3, r3, #3
 800fe6e:	440b      	add	r3, r1
 800fe70:	3314      	adds	r3, #20
 800fe72:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800fe74:	2b01      	cmp	r3, #1
 800fe76:	d10e      	bne.n	800fe96 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800fe78:	4932      	ldr	r1, [pc, #200]	; (800ff44 <etharp_tmr+0x14c>)
 800fe7a:	687a      	ldr	r2, [r7, #4]
 800fe7c:	4613      	mov	r3, r2
 800fe7e:	005b      	lsls	r3, r3, #1
 800fe80:	4413      	add	r3, r2
 800fe82:	00db      	lsls	r3, r3, #3
 800fe84:	440b      	add	r3, r1
 800fe86:	3312      	adds	r3, #18
 800fe88:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800fe8a:	2b04      	cmp	r3, #4
 800fe8c:	d903      	bls.n	800fe96 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800fe8e:	6878      	ldr	r0, [r7, #4]
 800fe90:	f7ff ff80 	bl	800fd94 <etharp_free_entry>
 800fe94:	e04a      	b.n	800ff2c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800fe96:	492b      	ldr	r1, [pc, #172]	; (800ff44 <etharp_tmr+0x14c>)
 800fe98:	687a      	ldr	r2, [r7, #4]
 800fe9a:	4613      	mov	r3, r2
 800fe9c:	005b      	lsls	r3, r3, #1
 800fe9e:	4413      	add	r3, r2
 800fea0:	00db      	lsls	r3, r3, #3
 800fea2:	440b      	add	r3, r1
 800fea4:	3314      	adds	r3, #20
 800fea6:	781b      	ldrb	r3, [r3, #0]
 800fea8:	2b03      	cmp	r3, #3
 800feaa:	d10a      	bne.n	800fec2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800feac:	4925      	ldr	r1, [pc, #148]	; (800ff44 <etharp_tmr+0x14c>)
 800feae:	687a      	ldr	r2, [r7, #4]
 800feb0:	4613      	mov	r3, r2
 800feb2:	005b      	lsls	r3, r3, #1
 800feb4:	4413      	add	r3, r2
 800feb6:	00db      	lsls	r3, r3, #3
 800feb8:	440b      	add	r3, r1
 800feba:	3314      	adds	r3, #20
 800febc:	2204      	movs	r2, #4
 800febe:	701a      	strb	r2, [r3, #0]
 800fec0:	e034      	b.n	800ff2c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800fec2:	4920      	ldr	r1, [pc, #128]	; (800ff44 <etharp_tmr+0x14c>)
 800fec4:	687a      	ldr	r2, [r7, #4]
 800fec6:	4613      	mov	r3, r2
 800fec8:	005b      	lsls	r3, r3, #1
 800feca:	4413      	add	r3, r2
 800fecc:	00db      	lsls	r3, r3, #3
 800fece:	440b      	add	r3, r1
 800fed0:	3314      	adds	r3, #20
 800fed2:	781b      	ldrb	r3, [r3, #0]
 800fed4:	2b04      	cmp	r3, #4
 800fed6:	d10a      	bne.n	800feee <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800fed8:	491a      	ldr	r1, [pc, #104]	; (800ff44 <etharp_tmr+0x14c>)
 800feda:	687a      	ldr	r2, [r7, #4]
 800fedc:	4613      	mov	r3, r2
 800fede:	005b      	lsls	r3, r3, #1
 800fee0:	4413      	add	r3, r2
 800fee2:	00db      	lsls	r3, r3, #3
 800fee4:	440b      	add	r3, r1
 800fee6:	3314      	adds	r3, #20
 800fee8:	2202      	movs	r2, #2
 800feea:	701a      	strb	r2, [r3, #0]
 800feec:	e01e      	b.n	800ff2c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800feee:	4915      	ldr	r1, [pc, #84]	; (800ff44 <etharp_tmr+0x14c>)
 800fef0:	687a      	ldr	r2, [r7, #4]
 800fef2:	4613      	mov	r3, r2
 800fef4:	005b      	lsls	r3, r3, #1
 800fef6:	4413      	add	r3, r2
 800fef8:	00db      	lsls	r3, r3, #3
 800fefa:	440b      	add	r3, r1
 800fefc:	3314      	adds	r3, #20
 800fefe:	781b      	ldrb	r3, [r3, #0]
 800ff00:	2b01      	cmp	r3, #1
 800ff02:	d113      	bne.n	800ff2c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800ff04:	490f      	ldr	r1, [pc, #60]	; (800ff44 <etharp_tmr+0x14c>)
 800ff06:	687a      	ldr	r2, [r7, #4]
 800ff08:	4613      	mov	r3, r2
 800ff0a:	005b      	lsls	r3, r3, #1
 800ff0c:	4413      	add	r3, r2
 800ff0e:	00db      	lsls	r3, r3, #3
 800ff10:	440b      	add	r3, r1
 800ff12:	3308      	adds	r3, #8
 800ff14:	6818      	ldr	r0, [r3, #0]
 800ff16:	687a      	ldr	r2, [r7, #4]
 800ff18:	4613      	mov	r3, r2
 800ff1a:	005b      	lsls	r3, r3, #1
 800ff1c:	4413      	add	r3, r2
 800ff1e:	00db      	lsls	r3, r3, #3
 800ff20:	4a08      	ldr	r2, [pc, #32]	; (800ff44 <etharp_tmr+0x14c>)
 800ff22:	4413      	add	r3, r2
 800ff24:	3304      	adds	r3, #4
 800ff26:	4619      	mov	r1, r3
 800ff28:	f000 fe6e 	bl	8010c08 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	3301      	adds	r3, #1
 800ff30:	607b      	str	r3, [r7, #4]
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	2b09      	cmp	r3, #9
 800ff36:	f77f af65 	ble.w	800fe04 <etharp_tmr+0xc>
      }
    }
  }
}
 800ff3a:	bf00      	nop
 800ff3c:	3708      	adds	r7, #8
 800ff3e:	46bd      	mov	sp, r7
 800ff40:	bd80      	pop	{r7, pc}
 800ff42:	bf00      	nop
 800ff44:	240405d8 	.word	0x240405d8

0800ff48 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800ff48:	b580      	push	{r7, lr}
 800ff4a:	b08a      	sub	sp, #40	; 0x28
 800ff4c:	af00      	add	r7, sp, #0
 800ff4e:	60f8      	str	r0, [r7, #12]
 800ff50:	460b      	mov	r3, r1
 800ff52:	607a      	str	r2, [r7, #4]
 800ff54:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800ff56:	230a      	movs	r3, #10
 800ff58:	84fb      	strh	r3, [r7, #38]	; 0x26
 800ff5a:	230a      	movs	r3, #10
 800ff5c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800ff5e:	230a      	movs	r3, #10
 800ff60:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800ff62:	2300      	movs	r3, #0
 800ff64:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800ff66:	230a      	movs	r3, #10
 800ff68:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800ff6a:	2300      	movs	r3, #0
 800ff6c:	83bb      	strh	r3, [r7, #28]
 800ff6e:	2300      	movs	r3, #0
 800ff70:	837b      	strh	r3, [r7, #26]
 800ff72:	2300      	movs	r3, #0
 800ff74:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ff76:	2300      	movs	r3, #0
 800ff78:	843b      	strh	r3, [r7, #32]
 800ff7a:	e0ae      	b.n	80100da <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800ff7c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ff80:	49a6      	ldr	r1, [pc, #664]	; (801021c <etharp_find_entry+0x2d4>)
 800ff82:	4613      	mov	r3, r2
 800ff84:	005b      	lsls	r3, r3, #1
 800ff86:	4413      	add	r3, r2
 800ff88:	00db      	lsls	r3, r3, #3
 800ff8a:	440b      	add	r3, r1
 800ff8c:	3314      	adds	r3, #20
 800ff8e:	781b      	ldrb	r3, [r3, #0]
 800ff90:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800ff92:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800ff96:	2b0a      	cmp	r3, #10
 800ff98:	d105      	bne.n	800ffa6 <etharp_find_entry+0x5e>
 800ff9a:	7dfb      	ldrb	r3, [r7, #23]
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d102      	bne.n	800ffa6 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800ffa0:	8c3b      	ldrh	r3, [r7, #32]
 800ffa2:	847b      	strh	r3, [r7, #34]	; 0x22
 800ffa4:	e095      	b.n	80100d2 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800ffa6:	7dfb      	ldrb	r3, [r7, #23]
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	f000 8092 	beq.w	80100d2 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800ffae:	7dfb      	ldrb	r3, [r7, #23]
 800ffb0:	2b01      	cmp	r3, #1
 800ffb2:	d009      	beq.n	800ffc8 <etharp_find_entry+0x80>
 800ffb4:	7dfb      	ldrb	r3, [r7, #23]
 800ffb6:	2b01      	cmp	r3, #1
 800ffb8:	d806      	bhi.n	800ffc8 <etharp_find_entry+0x80>
 800ffba:	4b99      	ldr	r3, [pc, #612]	; (8010220 <etharp_find_entry+0x2d8>)
 800ffbc:	f44f 7292 	mov.w	r2, #292	; 0x124
 800ffc0:	4998      	ldr	r1, [pc, #608]	; (8010224 <etharp_find_entry+0x2dc>)
 800ffc2:	4899      	ldr	r0, [pc, #612]	; (8010228 <etharp_find_entry+0x2e0>)
 800ffc4:	f010 ffc4 	bl	8020f50 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800ffc8:	68fb      	ldr	r3, [r7, #12]
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	d020      	beq.n	8010010 <etharp_find_entry+0xc8>
 800ffce:	68fb      	ldr	r3, [r7, #12]
 800ffd0:	6819      	ldr	r1, [r3, #0]
 800ffd2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ffd6:	4891      	ldr	r0, [pc, #580]	; (801021c <etharp_find_entry+0x2d4>)
 800ffd8:	4613      	mov	r3, r2
 800ffda:	005b      	lsls	r3, r3, #1
 800ffdc:	4413      	add	r3, r2
 800ffde:	00db      	lsls	r3, r3, #3
 800ffe0:	4403      	add	r3, r0
 800ffe2:	3304      	adds	r3, #4
 800ffe4:	681b      	ldr	r3, [r3, #0]
 800ffe6:	4299      	cmp	r1, r3
 800ffe8:	d112      	bne.n	8010010 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d00c      	beq.n	801000a <etharp_find_entry+0xc2>
 800fff0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fff4:	4989      	ldr	r1, [pc, #548]	; (801021c <etharp_find_entry+0x2d4>)
 800fff6:	4613      	mov	r3, r2
 800fff8:	005b      	lsls	r3, r3, #1
 800fffa:	4413      	add	r3, r2
 800fffc:	00db      	lsls	r3, r3, #3
 800fffe:	440b      	add	r3, r1
 8010000:	3308      	adds	r3, #8
 8010002:	681b      	ldr	r3, [r3, #0]
 8010004:	687a      	ldr	r2, [r7, #4]
 8010006:	429a      	cmp	r2, r3
 8010008:	d102      	bne.n	8010010 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801000a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801000e:	e100      	b.n	8010212 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8010010:	7dfb      	ldrb	r3, [r7, #23]
 8010012:	2b01      	cmp	r3, #1
 8010014:	d140      	bne.n	8010098 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8010016:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801001a:	4980      	ldr	r1, [pc, #512]	; (801021c <etharp_find_entry+0x2d4>)
 801001c:	4613      	mov	r3, r2
 801001e:	005b      	lsls	r3, r3, #1
 8010020:	4413      	add	r3, r2
 8010022:	00db      	lsls	r3, r3, #3
 8010024:	440b      	add	r3, r1
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	2b00      	cmp	r3, #0
 801002a:	d01a      	beq.n	8010062 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801002c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010030:	497a      	ldr	r1, [pc, #488]	; (801021c <etharp_find_entry+0x2d4>)
 8010032:	4613      	mov	r3, r2
 8010034:	005b      	lsls	r3, r3, #1
 8010036:	4413      	add	r3, r2
 8010038:	00db      	lsls	r3, r3, #3
 801003a:	440b      	add	r3, r1
 801003c:	3312      	adds	r3, #18
 801003e:	881b      	ldrh	r3, [r3, #0]
 8010040:	8bba      	ldrh	r2, [r7, #28]
 8010042:	429a      	cmp	r2, r3
 8010044:	d845      	bhi.n	80100d2 <etharp_find_entry+0x18a>
            old_queue = i;
 8010046:	8c3b      	ldrh	r3, [r7, #32]
 8010048:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801004a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801004e:	4973      	ldr	r1, [pc, #460]	; (801021c <etharp_find_entry+0x2d4>)
 8010050:	4613      	mov	r3, r2
 8010052:	005b      	lsls	r3, r3, #1
 8010054:	4413      	add	r3, r2
 8010056:	00db      	lsls	r3, r3, #3
 8010058:	440b      	add	r3, r1
 801005a:	3312      	adds	r3, #18
 801005c:	881b      	ldrh	r3, [r3, #0]
 801005e:	83bb      	strh	r3, [r7, #28]
 8010060:	e037      	b.n	80100d2 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8010062:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010066:	496d      	ldr	r1, [pc, #436]	; (801021c <etharp_find_entry+0x2d4>)
 8010068:	4613      	mov	r3, r2
 801006a:	005b      	lsls	r3, r3, #1
 801006c:	4413      	add	r3, r2
 801006e:	00db      	lsls	r3, r3, #3
 8010070:	440b      	add	r3, r1
 8010072:	3312      	adds	r3, #18
 8010074:	881b      	ldrh	r3, [r3, #0]
 8010076:	8b7a      	ldrh	r2, [r7, #26]
 8010078:	429a      	cmp	r2, r3
 801007a:	d82a      	bhi.n	80100d2 <etharp_find_entry+0x18a>
            old_pending = i;
 801007c:	8c3b      	ldrh	r3, [r7, #32]
 801007e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8010080:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010084:	4965      	ldr	r1, [pc, #404]	; (801021c <etharp_find_entry+0x2d4>)
 8010086:	4613      	mov	r3, r2
 8010088:	005b      	lsls	r3, r3, #1
 801008a:	4413      	add	r3, r2
 801008c:	00db      	lsls	r3, r3, #3
 801008e:	440b      	add	r3, r1
 8010090:	3312      	adds	r3, #18
 8010092:	881b      	ldrh	r3, [r3, #0]
 8010094:	837b      	strh	r3, [r7, #26]
 8010096:	e01c      	b.n	80100d2 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8010098:	7dfb      	ldrb	r3, [r7, #23]
 801009a:	2b01      	cmp	r3, #1
 801009c:	d919      	bls.n	80100d2 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801009e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80100a2:	495e      	ldr	r1, [pc, #376]	; (801021c <etharp_find_entry+0x2d4>)
 80100a4:	4613      	mov	r3, r2
 80100a6:	005b      	lsls	r3, r3, #1
 80100a8:	4413      	add	r3, r2
 80100aa:	00db      	lsls	r3, r3, #3
 80100ac:	440b      	add	r3, r1
 80100ae:	3312      	adds	r3, #18
 80100b0:	881b      	ldrh	r3, [r3, #0]
 80100b2:	8b3a      	ldrh	r2, [r7, #24]
 80100b4:	429a      	cmp	r2, r3
 80100b6:	d80c      	bhi.n	80100d2 <etharp_find_entry+0x18a>
            old_stable = i;
 80100b8:	8c3b      	ldrh	r3, [r7, #32]
 80100ba:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 80100bc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80100c0:	4956      	ldr	r1, [pc, #344]	; (801021c <etharp_find_entry+0x2d4>)
 80100c2:	4613      	mov	r3, r2
 80100c4:	005b      	lsls	r3, r3, #1
 80100c6:	4413      	add	r3, r2
 80100c8:	00db      	lsls	r3, r3, #3
 80100ca:	440b      	add	r3, r1
 80100cc:	3312      	adds	r3, #18
 80100ce:	881b      	ldrh	r3, [r3, #0]
 80100d0:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80100d2:	8c3b      	ldrh	r3, [r7, #32]
 80100d4:	3301      	adds	r3, #1
 80100d6:	b29b      	uxth	r3, r3
 80100d8:	843b      	strh	r3, [r7, #32]
 80100da:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80100de:	2b09      	cmp	r3, #9
 80100e0:	f77f af4c 	ble.w	800ff7c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80100e4:	7afb      	ldrb	r3, [r7, #11]
 80100e6:	f003 0302 	and.w	r3, r3, #2
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	d108      	bne.n	8010100 <etharp_find_entry+0x1b8>
 80100ee:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80100f2:	2b0a      	cmp	r3, #10
 80100f4:	d107      	bne.n	8010106 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80100f6:	7afb      	ldrb	r3, [r7, #11]
 80100f8:	f003 0301 	and.w	r3, r3, #1
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d102      	bne.n	8010106 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8010100:	f04f 33ff 	mov.w	r3, #4294967295
 8010104:	e085      	b.n	8010212 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8010106:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801010a:	2b09      	cmp	r3, #9
 801010c:	dc02      	bgt.n	8010114 <etharp_find_entry+0x1cc>
    i = empty;
 801010e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010110:	843b      	strh	r3, [r7, #32]
 8010112:	e039      	b.n	8010188 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8010114:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8010118:	2b09      	cmp	r3, #9
 801011a:	dc14      	bgt.n	8010146 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801011c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801011e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8010120:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010124:	493d      	ldr	r1, [pc, #244]	; (801021c <etharp_find_entry+0x2d4>)
 8010126:	4613      	mov	r3, r2
 8010128:	005b      	lsls	r3, r3, #1
 801012a:	4413      	add	r3, r2
 801012c:	00db      	lsls	r3, r3, #3
 801012e:	440b      	add	r3, r1
 8010130:	681b      	ldr	r3, [r3, #0]
 8010132:	2b00      	cmp	r3, #0
 8010134:	d018      	beq.n	8010168 <etharp_find_entry+0x220>
 8010136:	4b3a      	ldr	r3, [pc, #232]	; (8010220 <etharp_find_entry+0x2d8>)
 8010138:	f240 126d 	movw	r2, #365	; 0x16d
 801013c:	493b      	ldr	r1, [pc, #236]	; (801022c <etharp_find_entry+0x2e4>)
 801013e:	483a      	ldr	r0, [pc, #232]	; (8010228 <etharp_find_entry+0x2e0>)
 8010140:	f010 ff06 	bl	8020f50 <iprintf>
 8010144:	e010      	b.n	8010168 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8010146:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801014a:	2b09      	cmp	r3, #9
 801014c:	dc02      	bgt.n	8010154 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801014e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010150:	843b      	strh	r3, [r7, #32]
 8010152:	e009      	b.n	8010168 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8010154:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8010158:	2b09      	cmp	r3, #9
 801015a:	dc02      	bgt.n	8010162 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801015c:	8bfb      	ldrh	r3, [r7, #30]
 801015e:	843b      	strh	r3, [r7, #32]
 8010160:	e002      	b.n	8010168 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8010162:	f04f 33ff 	mov.w	r3, #4294967295
 8010166:	e054      	b.n	8010212 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8010168:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801016c:	2b09      	cmp	r3, #9
 801016e:	dd06      	ble.n	801017e <etharp_find_entry+0x236>
 8010170:	4b2b      	ldr	r3, [pc, #172]	; (8010220 <etharp_find_entry+0x2d8>)
 8010172:	f240 127f 	movw	r2, #383	; 0x17f
 8010176:	492e      	ldr	r1, [pc, #184]	; (8010230 <etharp_find_entry+0x2e8>)
 8010178:	482b      	ldr	r0, [pc, #172]	; (8010228 <etharp_find_entry+0x2e0>)
 801017a:	f010 fee9 	bl	8020f50 <iprintf>
    etharp_free_entry(i);
 801017e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010182:	4618      	mov	r0, r3
 8010184:	f7ff fe06 	bl	800fd94 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8010188:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801018c:	2b09      	cmp	r3, #9
 801018e:	dd06      	ble.n	801019e <etharp_find_entry+0x256>
 8010190:	4b23      	ldr	r3, [pc, #140]	; (8010220 <etharp_find_entry+0x2d8>)
 8010192:	f240 1283 	movw	r2, #387	; 0x183
 8010196:	4926      	ldr	r1, [pc, #152]	; (8010230 <etharp_find_entry+0x2e8>)
 8010198:	4823      	ldr	r0, [pc, #140]	; (8010228 <etharp_find_entry+0x2e0>)
 801019a:	f010 fed9 	bl	8020f50 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801019e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80101a2:	491e      	ldr	r1, [pc, #120]	; (801021c <etharp_find_entry+0x2d4>)
 80101a4:	4613      	mov	r3, r2
 80101a6:	005b      	lsls	r3, r3, #1
 80101a8:	4413      	add	r3, r2
 80101aa:	00db      	lsls	r3, r3, #3
 80101ac:	440b      	add	r3, r1
 80101ae:	3314      	adds	r3, #20
 80101b0:	781b      	ldrb	r3, [r3, #0]
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d006      	beq.n	80101c4 <etharp_find_entry+0x27c>
 80101b6:	4b1a      	ldr	r3, [pc, #104]	; (8010220 <etharp_find_entry+0x2d8>)
 80101b8:	f240 1285 	movw	r2, #389	; 0x185
 80101bc:	491d      	ldr	r1, [pc, #116]	; (8010234 <etharp_find_entry+0x2ec>)
 80101be:	481a      	ldr	r0, [pc, #104]	; (8010228 <etharp_find_entry+0x2e0>)
 80101c0:	f010 fec6 	bl	8020f50 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80101c4:	68fb      	ldr	r3, [r7, #12]
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	d00b      	beq.n	80101e2 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80101ca:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80101ce:	68fb      	ldr	r3, [r7, #12]
 80101d0:	6819      	ldr	r1, [r3, #0]
 80101d2:	4812      	ldr	r0, [pc, #72]	; (801021c <etharp_find_entry+0x2d4>)
 80101d4:	4613      	mov	r3, r2
 80101d6:	005b      	lsls	r3, r3, #1
 80101d8:	4413      	add	r3, r2
 80101da:	00db      	lsls	r3, r3, #3
 80101dc:	4403      	add	r3, r0
 80101de:	3304      	adds	r3, #4
 80101e0:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80101e2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80101e6:	490d      	ldr	r1, [pc, #52]	; (801021c <etharp_find_entry+0x2d4>)
 80101e8:	4613      	mov	r3, r2
 80101ea:	005b      	lsls	r3, r3, #1
 80101ec:	4413      	add	r3, r2
 80101ee:	00db      	lsls	r3, r3, #3
 80101f0:	440b      	add	r3, r1
 80101f2:	3312      	adds	r3, #18
 80101f4:	2200      	movs	r2, #0
 80101f6:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80101f8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80101fc:	4907      	ldr	r1, [pc, #28]	; (801021c <etharp_find_entry+0x2d4>)
 80101fe:	4613      	mov	r3, r2
 8010200:	005b      	lsls	r3, r3, #1
 8010202:	4413      	add	r3, r2
 8010204:	00db      	lsls	r3, r3, #3
 8010206:	440b      	add	r3, r1
 8010208:	3308      	adds	r3, #8
 801020a:	687a      	ldr	r2, [r7, #4]
 801020c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801020e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8010212:	4618      	mov	r0, r3
 8010214:	3728      	adds	r7, #40	; 0x28
 8010216:	46bd      	mov	sp, r7
 8010218:	bd80      	pop	{r7, pc}
 801021a:	bf00      	nop
 801021c:	240405d8 	.word	0x240405d8
 8010220:	08023ad0 	.word	0x08023ad0
 8010224:	08023b28 	.word	0x08023b28
 8010228:	08023b68 	.word	0x08023b68
 801022c:	08023b90 	.word	0x08023b90
 8010230:	08023ba8 	.word	0x08023ba8
 8010234:	08023bbc 	.word	0x08023bbc

08010238 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8010238:	b580      	push	{r7, lr}
 801023a:	b088      	sub	sp, #32
 801023c:	af02      	add	r7, sp, #8
 801023e:	60f8      	str	r0, [r7, #12]
 8010240:	60b9      	str	r1, [r7, #8]
 8010242:	607a      	str	r2, [r7, #4]
 8010244:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8010246:	68fb      	ldr	r3, [r7, #12]
 8010248:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801024c:	2b06      	cmp	r3, #6
 801024e:	d006      	beq.n	801025e <etharp_update_arp_entry+0x26>
 8010250:	4b48      	ldr	r3, [pc, #288]	; (8010374 <etharp_update_arp_entry+0x13c>)
 8010252:	f240 12a9 	movw	r2, #425	; 0x1a9
 8010256:	4948      	ldr	r1, [pc, #288]	; (8010378 <etharp_update_arp_entry+0x140>)
 8010258:	4848      	ldr	r0, [pc, #288]	; (801037c <etharp_update_arp_entry+0x144>)
 801025a:	f010 fe79 	bl	8020f50 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801025e:	68bb      	ldr	r3, [r7, #8]
 8010260:	2b00      	cmp	r3, #0
 8010262:	d012      	beq.n	801028a <etharp_update_arp_entry+0x52>
 8010264:	68bb      	ldr	r3, [r7, #8]
 8010266:	681b      	ldr	r3, [r3, #0]
 8010268:	2b00      	cmp	r3, #0
 801026a:	d00e      	beq.n	801028a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801026c:	68bb      	ldr	r3, [r7, #8]
 801026e:	681b      	ldr	r3, [r3, #0]
 8010270:	68f9      	ldr	r1, [r7, #12]
 8010272:	4618      	mov	r0, r3
 8010274:	f001 facc 	bl	8011810 <ip4_addr_isbroadcast_u32>
 8010278:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801027a:	2b00      	cmp	r3, #0
 801027c:	d105      	bne.n	801028a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801027e:	68bb      	ldr	r3, [r7, #8]
 8010280:	681b      	ldr	r3, [r3, #0]
 8010282:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8010286:	2be0      	cmp	r3, #224	; 0xe0
 8010288:	d102      	bne.n	8010290 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801028a:	f06f 030f 	mvn.w	r3, #15
 801028e:	e06c      	b.n	801036a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8010290:	78fb      	ldrb	r3, [r7, #3]
 8010292:	68fa      	ldr	r2, [r7, #12]
 8010294:	4619      	mov	r1, r3
 8010296:	68b8      	ldr	r0, [r7, #8]
 8010298:	f7ff fe56 	bl	800ff48 <etharp_find_entry>
 801029c:	4603      	mov	r3, r0
 801029e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80102a0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	da02      	bge.n	80102ae <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80102a8:	8afb      	ldrh	r3, [r7, #22]
 80102aa:	b25b      	sxtb	r3, r3
 80102ac:	e05d      	b.n	801036a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80102ae:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80102b2:	4933      	ldr	r1, [pc, #204]	; (8010380 <etharp_update_arp_entry+0x148>)
 80102b4:	4613      	mov	r3, r2
 80102b6:	005b      	lsls	r3, r3, #1
 80102b8:	4413      	add	r3, r2
 80102ba:	00db      	lsls	r3, r3, #3
 80102bc:	440b      	add	r3, r1
 80102be:	3314      	adds	r3, #20
 80102c0:	2202      	movs	r2, #2
 80102c2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80102c4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80102c8:	492d      	ldr	r1, [pc, #180]	; (8010380 <etharp_update_arp_entry+0x148>)
 80102ca:	4613      	mov	r3, r2
 80102cc:	005b      	lsls	r3, r3, #1
 80102ce:	4413      	add	r3, r2
 80102d0:	00db      	lsls	r3, r3, #3
 80102d2:	440b      	add	r3, r1
 80102d4:	3308      	adds	r3, #8
 80102d6:	68fa      	ldr	r2, [r7, #12]
 80102d8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80102da:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80102de:	4613      	mov	r3, r2
 80102e0:	005b      	lsls	r3, r3, #1
 80102e2:	4413      	add	r3, r2
 80102e4:	00db      	lsls	r3, r3, #3
 80102e6:	3308      	adds	r3, #8
 80102e8:	4a25      	ldr	r2, [pc, #148]	; (8010380 <etharp_update_arp_entry+0x148>)
 80102ea:	4413      	add	r3, r2
 80102ec:	3304      	adds	r3, #4
 80102ee:	2206      	movs	r2, #6
 80102f0:	6879      	ldr	r1, [r7, #4]
 80102f2:	4618      	mov	r0, r3
 80102f4:	f010 f9c7 	bl	8020686 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80102f8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80102fc:	4920      	ldr	r1, [pc, #128]	; (8010380 <etharp_update_arp_entry+0x148>)
 80102fe:	4613      	mov	r3, r2
 8010300:	005b      	lsls	r3, r3, #1
 8010302:	4413      	add	r3, r2
 8010304:	00db      	lsls	r3, r3, #3
 8010306:	440b      	add	r3, r1
 8010308:	3312      	adds	r3, #18
 801030a:	2200      	movs	r2, #0
 801030c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801030e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010312:	491b      	ldr	r1, [pc, #108]	; (8010380 <etharp_update_arp_entry+0x148>)
 8010314:	4613      	mov	r3, r2
 8010316:	005b      	lsls	r3, r3, #1
 8010318:	4413      	add	r3, r2
 801031a:	00db      	lsls	r3, r3, #3
 801031c:	440b      	add	r3, r1
 801031e:	681b      	ldr	r3, [r3, #0]
 8010320:	2b00      	cmp	r3, #0
 8010322:	d021      	beq.n	8010368 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8010324:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010328:	4915      	ldr	r1, [pc, #84]	; (8010380 <etharp_update_arp_entry+0x148>)
 801032a:	4613      	mov	r3, r2
 801032c:	005b      	lsls	r3, r3, #1
 801032e:	4413      	add	r3, r2
 8010330:	00db      	lsls	r3, r3, #3
 8010332:	440b      	add	r3, r1
 8010334:	681b      	ldr	r3, [r3, #0]
 8010336:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8010338:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801033c:	4910      	ldr	r1, [pc, #64]	; (8010380 <etharp_update_arp_entry+0x148>)
 801033e:	4613      	mov	r3, r2
 8010340:	005b      	lsls	r3, r3, #1
 8010342:	4413      	add	r3, r2
 8010344:	00db      	lsls	r3, r3, #3
 8010346:	440b      	add	r3, r1
 8010348:	2200      	movs	r2, #0
 801034a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801034c:	68fb      	ldr	r3, [r7, #12]
 801034e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8010352:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010356:	9300      	str	r3, [sp, #0]
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	6939      	ldr	r1, [r7, #16]
 801035c:	68f8      	ldr	r0, [r7, #12]
 801035e:	f000 fcf3 	bl	8010d48 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8010362:	6938      	ldr	r0, [r7, #16]
 8010364:	f003 fe74 	bl	8014050 <pbuf_free>
  }
  return ERR_OK;
 8010368:	2300      	movs	r3, #0
}
 801036a:	4618      	mov	r0, r3
 801036c:	3718      	adds	r7, #24
 801036e:	46bd      	mov	sp, r7
 8010370:	bd80      	pop	{r7, pc}
 8010372:	bf00      	nop
 8010374:	08023ad0 	.word	0x08023ad0
 8010378:	08023be8 	.word	0x08023be8
 801037c:	08023b68 	.word	0x08023b68
 8010380:	240405d8 	.word	0x240405d8

08010384 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8010384:	b580      	push	{r7, lr}
 8010386:	b084      	sub	sp, #16
 8010388:	af00      	add	r7, sp, #0
 801038a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801038c:	2300      	movs	r3, #0
 801038e:	60fb      	str	r3, [r7, #12]
 8010390:	e01e      	b.n	80103d0 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8010392:	4913      	ldr	r1, [pc, #76]	; (80103e0 <etharp_cleanup_netif+0x5c>)
 8010394:	68fa      	ldr	r2, [r7, #12]
 8010396:	4613      	mov	r3, r2
 8010398:	005b      	lsls	r3, r3, #1
 801039a:	4413      	add	r3, r2
 801039c:	00db      	lsls	r3, r3, #3
 801039e:	440b      	add	r3, r1
 80103a0:	3314      	adds	r3, #20
 80103a2:	781b      	ldrb	r3, [r3, #0]
 80103a4:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80103a6:	7afb      	ldrb	r3, [r7, #11]
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d00e      	beq.n	80103ca <etharp_cleanup_netif+0x46>
 80103ac:	490c      	ldr	r1, [pc, #48]	; (80103e0 <etharp_cleanup_netif+0x5c>)
 80103ae:	68fa      	ldr	r2, [r7, #12]
 80103b0:	4613      	mov	r3, r2
 80103b2:	005b      	lsls	r3, r3, #1
 80103b4:	4413      	add	r3, r2
 80103b6:	00db      	lsls	r3, r3, #3
 80103b8:	440b      	add	r3, r1
 80103ba:	3308      	adds	r3, #8
 80103bc:	681b      	ldr	r3, [r3, #0]
 80103be:	687a      	ldr	r2, [r7, #4]
 80103c0:	429a      	cmp	r2, r3
 80103c2:	d102      	bne.n	80103ca <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80103c4:	68f8      	ldr	r0, [r7, #12]
 80103c6:	f7ff fce5 	bl	800fd94 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80103ca:	68fb      	ldr	r3, [r7, #12]
 80103cc:	3301      	adds	r3, #1
 80103ce:	60fb      	str	r3, [r7, #12]
 80103d0:	68fb      	ldr	r3, [r7, #12]
 80103d2:	2b09      	cmp	r3, #9
 80103d4:	dddd      	ble.n	8010392 <etharp_cleanup_netif+0xe>
    }
  }
}
 80103d6:	bf00      	nop
 80103d8:	3710      	adds	r7, #16
 80103da:	46bd      	mov	sp, r7
 80103dc:	bd80      	pop	{r7, pc}
 80103de:	bf00      	nop
 80103e0:	240405d8 	.word	0x240405d8

080103e4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80103e4:	b5b0      	push	{r4, r5, r7, lr}
 80103e6:	b08a      	sub	sp, #40	; 0x28
 80103e8:	af04      	add	r7, sp, #16
 80103ea:	6078      	str	r0, [r7, #4]
 80103ec:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80103ee:	683b      	ldr	r3, [r7, #0]
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	d107      	bne.n	8010404 <etharp_input+0x20>
 80103f4:	4b3d      	ldr	r3, [pc, #244]	; (80104ec <etharp_input+0x108>)
 80103f6:	f240 228a 	movw	r2, #650	; 0x28a
 80103fa:	493d      	ldr	r1, [pc, #244]	; (80104f0 <etharp_input+0x10c>)
 80103fc:	483d      	ldr	r0, [pc, #244]	; (80104f4 <etharp_input+0x110>)
 80103fe:	f010 fda7 	bl	8020f50 <iprintf>
 8010402:	e06f      	b.n	80104e4 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	685b      	ldr	r3, [r3, #4]
 8010408:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801040a:	693b      	ldr	r3, [r7, #16]
 801040c:	881b      	ldrh	r3, [r3, #0]
 801040e:	b29b      	uxth	r3, r3
 8010410:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010414:	d10c      	bne.n	8010430 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8010416:	693b      	ldr	r3, [r7, #16]
 8010418:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801041a:	2b06      	cmp	r3, #6
 801041c:	d108      	bne.n	8010430 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801041e:	693b      	ldr	r3, [r7, #16]
 8010420:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8010422:	2b04      	cmp	r3, #4
 8010424:	d104      	bne.n	8010430 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8010426:	693b      	ldr	r3, [r7, #16]
 8010428:	885b      	ldrh	r3, [r3, #2]
 801042a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801042c:	2b08      	cmp	r3, #8
 801042e:	d003      	beq.n	8010438 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8010430:	6878      	ldr	r0, [r7, #4]
 8010432:	f003 fe0d 	bl	8014050 <pbuf_free>
    return;
 8010436:	e055      	b.n	80104e4 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8010438:	693b      	ldr	r3, [r7, #16]
 801043a:	330e      	adds	r3, #14
 801043c:	681b      	ldr	r3, [r3, #0]
 801043e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8010440:	693b      	ldr	r3, [r7, #16]
 8010442:	3318      	adds	r3, #24
 8010444:	681b      	ldr	r3, [r3, #0]
 8010446:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8010448:	683b      	ldr	r3, [r7, #0]
 801044a:	3304      	adds	r3, #4
 801044c:	681b      	ldr	r3, [r3, #0]
 801044e:	2b00      	cmp	r3, #0
 8010450:	d102      	bne.n	8010458 <etharp_input+0x74>
    for_us = 0;
 8010452:	2300      	movs	r3, #0
 8010454:	75fb      	strb	r3, [r7, #23]
 8010456:	e009      	b.n	801046c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8010458:	68ba      	ldr	r2, [r7, #8]
 801045a:	683b      	ldr	r3, [r7, #0]
 801045c:	3304      	adds	r3, #4
 801045e:	681b      	ldr	r3, [r3, #0]
 8010460:	429a      	cmp	r2, r3
 8010462:	bf0c      	ite	eq
 8010464:	2301      	moveq	r3, #1
 8010466:	2300      	movne	r3, #0
 8010468:	b2db      	uxtb	r3, r3
 801046a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801046c:	693b      	ldr	r3, [r7, #16]
 801046e:	f103 0208 	add.w	r2, r3, #8
 8010472:	7dfb      	ldrb	r3, [r7, #23]
 8010474:	2b00      	cmp	r3, #0
 8010476:	d001      	beq.n	801047c <etharp_input+0x98>
 8010478:	2301      	movs	r3, #1
 801047a:	e000      	b.n	801047e <etharp_input+0x9a>
 801047c:	2302      	movs	r3, #2
 801047e:	f107 010c 	add.w	r1, r7, #12
 8010482:	6838      	ldr	r0, [r7, #0]
 8010484:	f7ff fed8 	bl	8010238 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8010488:	693b      	ldr	r3, [r7, #16]
 801048a:	88db      	ldrh	r3, [r3, #6]
 801048c:	b29b      	uxth	r3, r3
 801048e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010492:	d003      	beq.n	801049c <etharp_input+0xb8>
 8010494:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010498:	d01e      	beq.n	80104d8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801049a:	e020      	b.n	80104de <etharp_input+0xfa>
      if (for_us) {
 801049c:	7dfb      	ldrb	r3, [r7, #23]
 801049e:	2b00      	cmp	r3, #0
 80104a0:	d01c      	beq.n	80104dc <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80104a2:	683b      	ldr	r3, [r7, #0]
 80104a4:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80104a8:	693b      	ldr	r3, [r7, #16]
 80104aa:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80104ae:	683b      	ldr	r3, [r7, #0]
 80104b0:	f103 0526 	add.w	r5, r3, #38	; 0x26
 80104b4:	683b      	ldr	r3, [r7, #0]
 80104b6:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80104b8:	693a      	ldr	r2, [r7, #16]
 80104ba:	3208      	adds	r2, #8
        etharp_raw(netif,
 80104bc:	2102      	movs	r1, #2
 80104be:	9103      	str	r1, [sp, #12]
 80104c0:	f107 010c 	add.w	r1, r7, #12
 80104c4:	9102      	str	r1, [sp, #8]
 80104c6:	9201      	str	r2, [sp, #4]
 80104c8:	9300      	str	r3, [sp, #0]
 80104ca:	462b      	mov	r3, r5
 80104cc:	4622      	mov	r2, r4
 80104ce:	4601      	mov	r1, r0
 80104d0:	6838      	ldr	r0, [r7, #0]
 80104d2:	f000 faeb 	bl	8010aac <etharp_raw>
      break;
 80104d6:	e001      	b.n	80104dc <etharp_input+0xf8>
      break;
 80104d8:	bf00      	nop
 80104da:	e000      	b.n	80104de <etharp_input+0xfa>
      break;
 80104dc:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80104de:	6878      	ldr	r0, [r7, #4]
 80104e0:	f003 fdb6 	bl	8014050 <pbuf_free>
}
 80104e4:	3718      	adds	r7, #24
 80104e6:	46bd      	mov	sp, r7
 80104e8:	bdb0      	pop	{r4, r5, r7, pc}
 80104ea:	bf00      	nop
 80104ec:	08023ad0 	.word	0x08023ad0
 80104f0:	08023c40 	.word	0x08023c40
 80104f4:	08023b68 	.word	0x08023b68

080104f8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80104f8:	b580      	push	{r7, lr}
 80104fa:	b086      	sub	sp, #24
 80104fc:	af02      	add	r7, sp, #8
 80104fe:	60f8      	str	r0, [r7, #12]
 8010500:	60b9      	str	r1, [r7, #8]
 8010502:	4613      	mov	r3, r2
 8010504:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8010506:	79fa      	ldrb	r2, [r7, #7]
 8010508:	4944      	ldr	r1, [pc, #272]	; (801061c <etharp_output_to_arp_index+0x124>)
 801050a:	4613      	mov	r3, r2
 801050c:	005b      	lsls	r3, r3, #1
 801050e:	4413      	add	r3, r2
 8010510:	00db      	lsls	r3, r3, #3
 8010512:	440b      	add	r3, r1
 8010514:	3314      	adds	r3, #20
 8010516:	781b      	ldrb	r3, [r3, #0]
 8010518:	2b01      	cmp	r3, #1
 801051a:	d806      	bhi.n	801052a <etharp_output_to_arp_index+0x32>
 801051c:	4b40      	ldr	r3, [pc, #256]	; (8010620 <etharp_output_to_arp_index+0x128>)
 801051e:	f240 22ef 	movw	r2, #751	; 0x2ef
 8010522:	4940      	ldr	r1, [pc, #256]	; (8010624 <etharp_output_to_arp_index+0x12c>)
 8010524:	4840      	ldr	r0, [pc, #256]	; (8010628 <etharp_output_to_arp_index+0x130>)
 8010526:	f010 fd13 	bl	8020f50 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801052a:	79fa      	ldrb	r2, [r7, #7]
 801052c:	493b      	ldr	r1, [pc, #236]	; (801061c <etharp_output_to_arp_index+0x124>)
 801052e:	4613      	mov	r3, r2
 8010530:	005b      	lsls	r3, r3, #1
 8010532:	4413      	add	r3, r2
 8010534:	00db      	lsls	r3, r3, #3
 8010536:	440b      	add	r3, r1
 8010538:	3314      	adds	r3, #20
 801053a:	781b      	ldrb	r3, [r3, #0]
 801053c:	2b02      	cmp	r3, #2
 801053e:	d153      	bne.n	80105e8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8010540:	79fa      	ldrb	r2, [r7, #7]
 8010542:	4936      	ldr	r1, [pc, #216]	; (801061c <etharp_output_to_arp_index+0x124>)
 8010544:	4613      	mov	r3, r2
 8010546:	005b      	lsls	r3, r3, #1
 8010548:	4413      	add	r3, r2
 801054a:	00db      	lsls	r3, r3, #3
 801054c:	440b      	add	r3, r1
 801054e:	3312      	adds	r3, #18
 8010550:	881b      	ldrh	r3, [r3, #0]
 8010552:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8010556:	d919      	bls.n	801058c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8010558:	79fa      	ldrb	r2, [r7, #7]
 801055a:	4613      	mov	r3, r2
 801055c:	005b      	lsls	r3, r3, #1
 801055e:	4413      	add	r3, r2
 8010560:	00db      	lsls	r3, r3, #3
 8010562:	4a2e      	ldr	r2, [pc, #184]	; (801061c <etharp_output_to_arp_index+0x124>)
 8010564:	4413      	add	r3, r2
 8010566:	3304      	adds	r3, #4
 8010568:	4619      	mov	r1, r3
 801056a:	68f8      	ldr	r0, [r7, #12]
 801056c:	f000 fb4c 	bl	8010c08 <etharp_request>
 8010570:	4603      	mov	r3, r0
 8010572:	2b00      	cmp	r3, #0
 8010574:	d138      	bne.n	80105e8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8010576:	79fa      	ldrb	r2, [r7, #7]
 8010578:	4928      	ldr	r1, [pc, #160]	; (801061c <etharp_output_to_arp_index+0x124>)
 801057a:	4613      	mov	r3, r2
 801057c:	005b      	lsls	r3, r3, #1
 801057e:	4413      	add	r3, r2
 8010580:	00db      	lsls	r3, r3, #3
 8010582:	440b      	add	r3, r1
 8010584:	3314      	adds	r3, #20
 8010586:	2203      	movs	r2, #3
 8010588:	701a      	strb	r2, [r3, #0]
 801058a:	e02d      	b.n	80105e8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801058c:	79fa      	ldrb	r2, [r7, #7]
 801058e:	4923      	ldr	r1, [pc, #140]	; (801061c <etharp_output_to_arp_index+0x124>)
 8010590:	4613      	mov	r3, r2
 8010592:	005b      	lsls	r3, r3, #1
 8010594:	4413      	add	r3, r2
 8010596:	00db      	lsls	r3, r3, #3
 8010598:	440b      	add	r3, r1
 801059a:	3312      	adds	r3, #18
 801059c:	881b      	ldrh	r3, [r3, #0]
 801059e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80105a2:	d321      	bcc.n	80105e8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80105a4:	79fa      	ldrb	r2, [r7, #7]
 80105a6:	4613      	mov	r3, r2
 80105a8:	005b      	lsls	r3, r3, #1
 80105aa:	4413      	add	r3, r2
 80105ac:	00db      	lsls	r3, r3, #3
 80105ae:	4a1b      	ldr	r2, [pc, #108]	; (801061c <etharp_output_to_arp_index+0x124>)
 80105b0:	4413      	add	r3, r2
 80105b2:	1d19      	adds	r1, r3, #4
 80105b4:	79fa      	ldrb	r2, [r7, #7]
 80105b6:	4613      	mov	r3, r2
 80105b8:	005b      	lsls	r3, r3, #1
 80105ba:	4413      	add	r3, r2
 80105bc:	00db      	lsls	r3, r3, #3
 80105be:	3308      	adds	r3, #8
 80105c0:	4a16      	ldr	r2, [pc, #88]	; (801061c <etharp_output_to_arp_index+0x124>)
 80105c2:	4413      	add	r3, r2
 80105c4:	3304      	adds	r3, #4
 80105c6:	461a      	mov	r2, r3
 80105c8:	68f8      	ldr	r0, [r7, #12]
 80105ca:	f000 fafb 	bl	8010bc4 <etharp_request_dst>
 80105ce:	4603      	mov	r3, r0
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	d109      	bne.n	80105e8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80105d4:	79fa      	ldrb	r2, [r7, #7]
 80105d6:	4911      	ldr	r1, [pc, #68]	; (801061c <etharp_output_to_arp_index+0x124>)
 80105d8:	4613      	mov	r3, r2
 80105da:	005b      	lsls	r3, r3, #1
 80105dc:	4413      	add	r3, r2
 80105de:	00db      	lsls	r3, r3, #3
 80105e0:	440b      	add	r3, r1
 80105e2:	3314      	adds	r3, #20
 80105e4:	2203      	movs	r2, #3
 80105e6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80105e8:	68fb      	ldr	r3, [r7, #12]
 80105ea:	f103 0126 	add.w	r1, r3, #38	; 0x26
 80105ee:	79fa      	ldrb	r2, [r7, #7]
 80105f0:	4613      	mov	r3, r2
 80105f2:	005b      	lsls	r3, r3, #1
 80105f4:	4413      	add	r3, r2
 80105f6:	00db      	lsls	r3, r3, #3
 80105f8:	3308      	adds	r3, #8
 80105fa:	4a08      	ldr	r2, [pc, #32]	; (801061c <etharp_output_to_arp_index+0x124>)
 80105fc:	4413      	add	r3, r2
 80105fe:	1d1a      	adds	r2, r3, #4
 8010600:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010604:	9300      	str	r3, [sp, #0]
 8010606:	4613      	mov	r3, r2
 8010608:	460a      	mov	r2, r1
 801060a:	68b9      	ldr	r1, [r7, #8]
 801060c:	68f8      	ldr	r0, [r7, #12]
 801060e:	f000 fb9b 	bl	8010d48 <ethernet_output>
 8010612:	4603      	mov	r3, r0
}
 8010614:	4618      	mov	r0, r3
 8010616:	3710      	adds	r7, #16
 8010618:	46bd      	mov	sp, r7
 801061a:	bd80      	pop	{r7, pc}
 801061c:	240405d8 	.word	0x240405d8
 8010620:	08023ad0 	.word	0x08023ad0
 8010624:	08023c60 	.word	0x08023c60
 8010628:	08023b68 	.word	0x08023b68

0801062c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801062c:	b580      	push	{r7, lr}
 801062e:	b08a      	sub	sp, #40	; 0x28
 8010630:	af02      	add	r7, sp, #8
 8010632:	60f8      	str	r0, [r7, #12]
 8010634:	60b9      	str	r1, [r7, #8]
 8010636:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801063c:	68fb      	ldr	r3, [r7, #12]
 801063e:	2b00      	cmp	r3, #0
 8010640:	d106      	bne.n	8010650 <etharp_output+0x24>
 8010642:	4b73      	ldr	r3, [pc, #460]	; (8010810 <etharp_output+0x1e4>)
 8010644:	f240 321e 	movw	r2, #798	; 0x31e
 8010648:	4972      	ldr	r1, [pc, #456]	; (8010814 <etharp_output+0x1e8>)
 801064a:	4873      	ldr	r0, [pc, #460]	; (8010818 <etharp_output+0x1ec>)
 801064c:	f010 fc80 	bl	8020f50 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8010650:	68bb      	ldr	r3, [r7, #8]
 8010652:	2b00      	cmp	r3, #0
 8010654:	d106      	bne.n	8010664 <etharp_output+0x38>
 8010656:	4b6e      	ldr	r3, [pc, #440]	; (8010810 <etharp_output+0x1e4>)
 8010658:	f240 321f 	movw	r2, #799	; 0x31f
 801065c:	496f      	ldr	r1, [pc, #444]	; (801081c <etharp_output+0x1f0>)
 801065e:	486e      	ldr	r0, [pc, #440]	; (8010818 <etharp_output+0x1ec>)
 8010660:	f010 fc76 	bl	8020f50 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	2b00      	cmp	r3, #0
 8010668:	d106      	bne.n	8010678 <etharp_output+0x4c>
 801066a:	4b69      	ldr	r3, [pc, #420]	; (8010810 <etharp_output+0x1e4>)
 801066c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8010670:	496b      	ldr	r1, [pc, #428]	; (8010820 <etharp_output+0x1f4>)
 8010672:	4869      	ldr	r0, [pc, #420]	; (8010818 <etharp_output+0x1ec>)
 8010674:	f010 fc6c 	bl	8020f50 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	681b      	ldr	r3, [r3, #0]
 801067c:	68f9      	ldr	r1, [r7, #12]
 801067e:	4618      	mov	r0, r3
 8010680:	f001 f8c6 	bl	8011810 <ip4_addr_isbroadcast_u32>
 8010684:	4603      	mov	r3, r0
 8010686:	2b00      	cmp	r3, #0
 8010688:	d002      	beq.n	8010690 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801068a:	4b66      	ldr	r3, [pc, #408]	; (8010824 <etharp_output+0x1f8>)
 801068c:	61fb      	str	r3, [r7, #28]
 801068e:	e0af      	b.n	80107f0 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	681b      	ldr	r3, [r3, #0]
 8010694:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010698:	2be0      	cmp	r3, #224	; 0xe0
 801069a:	d118      	bne.n	80106ce <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801069c:	2301      	movs	r3, #1
 801069e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80106a0:	2300      	movs	r3, #0
 80106a2:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80106a4:	235e      	movs	r3, #94	; 0x5e
 80106a6:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	3301      	adds	r3, #1
 80106ac:	781b      	ldrb	r3, [r3, #0]
 80106ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80106b2:	b2db      	uxtb	r3, r3
 80106b4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	3302      	adds	r3, #2
 80106ba:	781b      	ldrb	r3, [r3, #0]
 80106bc:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	3303      	adds	r3, #3
 80106c2:	781b      	ldrb	r3, [r3, #0]
 80106c4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80106c6:	f107 0310 	add.w	r3, r7, #16
 80106ca:	61fb      	str	r3, [r7, #28]
 80106cc:	e090      	b.n	80107f0 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	681a      	ldr	r2, [r3, #0]
 80106d2:	68fb      	ldr	r3, [r7, #12]
 80106d4:	3304      	adds	r3, #4
 80106d6:	681b      	ldr	r3, [r3, #0]
 80106d8:	405a      	eors	r2, r3
 80106da:	68fb      	ldr	r3, [r7, #12]
 80106dc:	3308      	adds	r3, #8
 80106de:	681b      	ldr	r3, [r3, #0]
 80106e0:	4013      	ands	r3, r2
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d012      	beq.n	801070c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	681b      	ldr	r3, [r3, #0]
 80106ea:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80106ec:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80106f0:	4293      	cmp	r3, r2
 80106f2:	d00b      	beq.n	801070c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80106f4:	68fb      	ldr	r3, [r7, #12]
 80106f6:	330c      	adds	r3, #12
 80106f8:	681b      	ldr	r3, [r3, #0]
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	d003      	beq.n	8010706 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80106fe:	68fb      	ldr	r3, [r7, #12]
 8010700:	330c      	adds	r3, #12
 8010702:	61bb      	str	r3, [r7, #24]
 8010704:	e002      	b.n	801070c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8010706:	f06f 0303 	mvn.w	r3, #3
 801070a:	e07d      	b.n	8010808 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801070c:	4b46      	ldr	r3, [pc, #280]	; (8010828 <etharp_output+0x1fc>)
 801070e:	781b      	ldrb	r3, [r3, #0]
 8010710:	4619      	mov	r1, r3
 8010712:	4a46      	ldr	r2, [pc, #280]	; (801082c <etharp_output+0x200>)
 8010714:	460b      	mov	r3, r1
 8010716:	005b      	lsls	r3, r3, #1
 8010718:	440b      	add	r3, r1
 801071a:	00db      	lsls	r3, r3, #3
 801071c:	4413      	add	r3, r2
 801071e:	3314      	adds	r3, #20
 8010720:	781b      	ldrb	r3, [r3, #0]
 8010722:	2b01      	cmp	r3, #1
 8010724:	d925      	bls.n	8010772 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8010726:	4b40      	ldr	r3, [pc, #256]	; (8010828 <etharp_output+0x1fc>)
 8010728:	781b      	ldrb	r3, [r3, #0]
 801072a:	4619      	mov	r1, r3
 801072c:	4a3f      	ldr	r2, [pc, #252]	; (801082c <etharp_output+0x200>)
 801072e:	460b      	mov	r3, r1
 8010730:	005b      	lsls	r3, r3, #1
 8010732:	440b      	add	r3, r1
 8010734:	00db      	lsls	r3, r3, #3
 8010736:	4413      	add	r3, r2
 8010738:	3308      	adds	r3, #8
 801073a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801073c:	68fa      	ldr	r2, [r7, #12]
 801073e:	429a      	cmp	r2, r3
 8010740:	d117      	bne.n	8010772 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8010742:	69bb      	ldr	r3, [r7, #24]
 8010744:	681a      	ldr	r2, [r3, #0]
 8010746:	4b38      	ldr	r3, [pc, #224]	; (8010828 <etharp_output+0x1fc>)
 8010748:	781b      	ldrb	r3, [r3, #0]
 801074a:	4618      	mov	r0, r3
 801074c:	4937      	ldr	r1, [pc, #220]	; (801082c <etharp_output+0x200>)
 801074e:	4603      	mov	r3, r0
 8010750:	005b      	lsls	r3, r3, #1
 8010752:	4403      	add	r3, r0
 8010754:	00db      	lsls	r3, r3, #3
 8010756:	440b      	add	r3, r1
 8010758:	3304      	adds	r3, #4
 801075a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801075c:	429a      	cmp	r2, r3
 801075e:	d108      	bne.n	8010772 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8010760:	4b31      	ldr	r3, [pc, #196]	; (8010828 <etharp_output+0x1fc>)
 8010762:	781b      	ldrb	r3, [r3, #0]
 8010764:	461a      	mov	r2, r3
 8010766:	68b9      	ldr	r1, [r7, #8]
 8010768:	68f8      	ldr	r0, [r7, #12]
 801076a:	f7ff fec5 	bl	80104f8 <etharp_output_to_arp_index>
 801076e:	4603      	mov	r3, r0
 8010770:	e04a      	b.n	8010808 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8010772:	2300      	movs	r3, #0
 8010774:	75fb      	strb	r3, [r7, #23]
 8010776:	e031      	b.n	80107dc <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8010778:	7dfa      	ldrb	r2, [r7, #23]
 801077a:	492c      	ldr	r1, [pc, #176]	; (801082c <etharp_output+0x200>)
 801077c:	4613      	mov	r3, r2
 801077e:	005b      	lsls	r3, r3, #1
 8010780:	4413      	add	r3, r2
 8010782:	00db      	lsls	r3, r3, #3
 8010784:	440b      	add	r3, r1
 8010786:	3314      	adds	r3, #20
 8010788:	781b      	ldrb	r3, [r3, #0]
 801078a:	2b01      	cmp	r3, #1
 801078c:	d923      	bls.n	80107d6 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801078e:	7dfa      	ldrb	r2, [r7, #23]
 8010790:	4926      	ldr	r1, [pc, #152]	; (801082c <etharp_output+0x200>)
 8010792:	4613      	mov	r3, r2
 8010794:	005b      	lsls	r3, r3, #1
 8010796:	4413      	add	r3, r2
 8010798:	00db      	lsls	r3, r3, #3
 801079a:	440b      	add	r3, r1
 801079c:	3308      	adds	r3, #8
 801079e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80107a0:	68fa      	ldr	r2, [r7, #12]
 80107a2:	429a      	cmp	r2, r3
 80107a4:	d117      	bne.n	80107d6 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80107a6:	69bb      	ldr	r3, [r7, #24]
 80107a8:	6819      	ldr	r1, [r3, #0]
 80107aa:	7dfa      	ldrb	r2, [r7, #23]
 80107ac:	481f      	ldr	r0, [pc, #124]	; (801082c <etharp_output+0x200>)
 80107ae:	4613      	mov	r3, r2
 80107b0:	005b      	lsls	r3, r3, #1
 80107b2:	4413      	add	r3, r2
 80107b4:	00db      	lsls	r3, r3, #3
 80107b6:	4403      	add	r3, r0
 80107b8:	3304      	adds	r3, #4
 80107ba:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80107bc:	4299      	cmp	r1, r3
 80107be:	d10a      	bne.n	80107d6 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80107c0:	4a19      	ldr	r2, [pc, #100]	; (8010828 <etharp_output+0x1fc>)
 80107c2:	7dfb      	ldrb	r3, [r7, #23]
 80107c4:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80107c6:	7dfb      	ldrb	r3, [r7, #23]
 80107c8:	461a      	mov	r2, r3
 80107ca:	68b9      	ldr	r1, [r7, #8]
 80107cc:	68f8      	ldr	r0, [r7, #12]
 80107ce:	f7ff fe93 	bl	80104f8 <etharp_output_to_arp_index>
 80107d2:	4603      	mov	r3, r0
 80107d4:	e018      	b.n	8010808 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80107d6:	7dfb      	ldrb	r3, [r7, #23]
 80107d8:	3301      	adds	r3, #1
 80107da:	75fb      	strb	r3, [r7, #23]
 80107dc:	7dfb      	ldrb	r3, [r7, #23]
 80107de:	2b09      	cmp	r3, #9
 80107e0:	d9ca      	bls.n	8010778 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80107e2:	68ba      	ldr	r2, [r7, #8]
 80107e4:	69b9      	ldr	r1, [r7, #24]
 80107e6:	68f8      	ldr	r0, [r7, #12]
 80107e8:	f000 f822 	bl	8010830 <etharp_query>
 80107ec:	4603      	mov	r3, r0
 80107ee:	e00b      	b.n	8010808 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80107f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80107fa:	9300      	str	r3, [sp, #0]
 80107fc:	69fb      	ldr	r3, [r7, #28]
 80107fe:	68b9      	ldr	r1, [r7, #8]
 8010800:	68f8      	ldr	r0, [r7, #12]
 8010802:	f000 faa1 	bl	8010d48 <ethernet_output>
 8010806:	4603      	mov	r3, r0
}
 8010808:	4618      	mov	r0, r3
 801080a:	3720      	adds	r7, #32
 801080c:	46bd      	mov	sp, r7
 801080e:	bd80      	pop	{r7, pc}
 8010810:	08023ad0 	.word	0x08023ad0
 8010814:	08023c40 	.word	0x08023c40
 8010818:	08023b68 	.word	0x08023b68
 801081c:	08023c90 	.word	0x08023c90
 8010820:	08023c30 	.word	0x08023c30
 8010824:	08026f34 	.word	0x08026f34
 8010828:	240406c8 	.word	0x240406c8
 801082c:	240405d8 	.word	0x240405d8

08010830 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8010830:	b580      	push	{r7, lr}
 8010832:	b08c      	sub	sp, #48	; 0x30
 8010834:	af02      	add	r7, sp, #8
 8010836:	60f8      	str	r0, [r7, #12]
 8010838:	60b9      	str	r1, [r7, #8]
 801083a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801083c:	68fb      	ldr	r3, [r7, #12]
 801083e:	3326      	adds	r3, #38	; 0x26
 8010840:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8010842:	23ff      	movs	r3, #255	; 0xff
 8010844:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8010848:	2300      	movs	r3, #0
 801084a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801084c:	68bb      	ldr	r3, [r7, #8]
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	68f9      	ldr	r1, [r7, #12]
 8010852:	4618      	mov	r0, r3
 8010854:	f000 ffdc 	bl	8011810 <ip4_addr_isbroadcast_u32>
 8010858:	4603      	mov	r3, r0
 801085a:	2b00      	cmp	r3, #0
 801085c:	d10c      	bne.n	8010878 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801085e:	68bb      	ldr	r3, [r7, #8]
 8010860:	681b      	ldr	r3, [r3, #0]
 8010862:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8010866:	2be0      	cmp	r3, #224	; 0xe0
 8010868:	d006      	beq.n	8010878 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801086a:	68bb      	ldr	r3, [r7, #8]
 801086c:	2b00      	cmp	r3, #0
 801086e:	d003      	beq.n	8010878 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8010870:	68bb      	ldr	r3, [r7, #8]
 8010872:	681b      	ldr	r3, [r3, #0]
 8010874:	2b00      	cmp	r3, #0
 8010876:	d102      	bne.n	801087e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8010878:	f06f 030f 	mvn.w	r3, #15
 801087c:	e102      	b.n	8010a84 <etharp_query+0x254>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801087e:	68fa      	ldr	r2, [r7, #12]
 8010880:	2101      	movs	r1, #1
 8010882:	68b8      	ldr	r0, [r7, #8]
 8010884:	f7ff fb60 	bl	800ff48 <etharp_find_entry>
 8010888:	4603      	mov	r3, r0
 801088a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801088c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010890:	2b00      	cmp	r3, #0
 8010892:	da02      	bge.n	801089a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8010894:	8a7b      	ldrh	r3, [r7, #18]
 8010896:	b25b      	sxtb	r3, r3
 8010898:	e0f4      	b.n	8010a84 <etharp_query+0x254>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801089a:	8a7b      	ldrh	r3, [r7, #18]
 801089c:	2b7e      	cmp	r3, #126	; 0x7e
 801089e:	d906      	bls.n	80108ae <etharp_query+0x7e>
 80108a0:	4b7a      	ldr	r3, [pc, #488]	; (8010a8c <etharp_query+0x25c>)
 80108a2:	f240 32c1 	movw	r2, #961	; 0x3c1
 80108a6:	497a      	ldr	r1, [pc, #488]	; (8010a90 <etharp_query+0x260>)
 80108a8:	487a      	ldr	r0, [pc, #488]	; (8010a94 <etharp_query+0x264>)
 80108aa:	f010 fb51 	bl	8020f50 <iprintf>
  i = (netif_addr_idx_t)i_err;
 80108ae:	8a7b      	ldrh	r3, [r7, #18]
 80108b0:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80108b2:	7c7a      	ldrb	r2, [r7, #17]
 80108b4:	4978      	ldr	r1, [pc, #480]	; (8010a98 <etharp_query+0x268>)
 80108b6:	4613      	mov	r3, r2
 80108b8:	005b      	lsls	r3, r3, #1
 80108ba:	4413      	add	r3, r2
 80108bc:	00db      	lsls	r3, r3, #3
 80108be:	440b      	add	r3, r1
 80108c0:	3314      	adds	r3, #20
 80108c2:	781b      	ldrb	r3, [r3, #0]
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d115      	bne.n	80108f4 <etharp_query+0xc4>
    is_new_entry = 1;
 80108c8:	2301      	movs	r3, #1
 80108ca:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80108cc:	7c7a      	ldrb	r2, [r7, #17]
 80108ce:	4972      	ldr	r1, [pc, #456]	; (8010a98 <etharp_query+0x268>)
 80108d0:	4613      	mov	r3, r2
 80108d2:	005b      	lsls	r3, r3, #1
 80108d4:	4413      	add	r3, r2
 80108d6:	00db      	lsls	r3, r3, #3
 80108d8:	440b      	add	r3, r1
 80108da:	3314      	adds	r3, #20
 80108dc:	2201      	movs	r2, #1
 80108de:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80108e0:	7c7a      	ldrb	r2, [r7, #17]
 80108e2:	496d      	ldr	r1, [pc, #436]	; (8010a98 <etharp_query+0x268>)
 80108e4:	4613      	mov	r3, r2
 80108e6:	005b      	lsls	r3, r3, #1
 80108e8:	4413      	add	r3, r2
 80108ea:	00db      	lsls	r3, r3, #3
 80108ec:	440b      	add	r3, r1
 80108ee:	3308      	adds	r3, #8
 80108f0:	68fa      	ldr	r2, [r7, #12]
 80108f2:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80108f4:	7c7a      	ldrb	r2, [r7, #17]
 80108f6:	4968      	ldr	r1, [pc, #416]	; (8010a98 <etharp_query+0x268>)
 80108f8:	4613      	mov	r3, r2
 80108fa:	005b      	lsls	r3, r3, #1
 80108fc:	4413      	add	r3, r2
 80108fe:	00db      	lsls	r3, r3, #3
 8010900:	440b      	add	r3, r1
 8010902:	3314      	adds	r3, #20
 8010904:	781b      	ldrb	r3, [r3, #0]
 8010906:	2b01      	cmp	r3, #1
 8010908:	d011      	beq.n	801092e <etharp_query+0xfe>
 801090a:	7c7a      	ldrb	r2, [r7, #17]
 801090c:	4962      	ldr	r1, [pc, #392]	; (8010a98 <etharp_query+0x268>)
 801090e:	4613      	mov	r3, r2
 8010910:	005b      	lsls	r3, r3, #1
 8010912:	4413      	add	r3, r2
 8010914:	00db      	lsls	r3, r3, #3
 8010916:	440b      	add	r3, r1
 8010918:	3314      	adds	r3, #20
 801091a:	781b      	ldrb	r3, [r3, #0]
 801091c:	2b01      	cmp	r3, #1
 801091e:	d806      	bhi.n	801092e <etharp_query+0xfe>
 8010920:	4b5a      	ldr	r3, [pc, #360]	; (8010a8c <etharp_query+0x25c>)
 8010922:	f240 32cf 	movw	r2, #975	; 0x3cf
 8010926:	495d      	ldr	r1, [pc, #372]	; (8010a9c <etharp_query+0x26c>)
 8010928:	485a      	ldr	r0, [pc, #360]	; (8010a94 <etharp_query+0x264>)
 801092a:	f010 fb11 	bl	8020f50 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801092e:	6a3b      	ldr	r3, [r7, #32]
 8010930:	2b00      	cmp	r3, #0
 8010932:	d102      	bne.n	801093a <etharp_query+0x10a>
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	2b00      	cmp	r3, #0
 8010938:	d10c      	bne.n	8010954 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801093a:	68b9      	ldr	r1, [r7, #8]
 801093c:	68f8      	ldr	r0, [r7, #12]
 801093e:	f000 f963 	bl	8010c08 <etharp_request>
 8010942:	4603      	mov	r3, r0
 8010944:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	2b00      	cmp	r3, #0
 801094c:	d102      	bne.n	8010954 <etharp_query+0x124>
      return result;
 801094e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010952:	e097      	b.n	8010a84 <etharp_query+0x254>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	2b00      	cmp	r3, #0
 8010958:	d106      	bne.n	8010968 <etharp_query+0x138>
 801095a:	4b4c      	ldr	r3, [pc, #304]	; (8010a8c <etharp_query+0x25c>)
 801095c:	f240 32e1 	movw	r2, #993	; 0x3e1
 8010960:	494f      	ldr	r1, [pc, #316]	; (8010aa0 <etharp_query+0x270>)
 8010962:	484c      	ldr	r0, [pc, #304]	; (8010a94 <etharp_query+0x264>)
 8010964:	f010 faf4 	bl	8020f50 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8010968:	7c7a      	ldrb	r2, [r7, #17]
 801096a:	494b      	ldr	r1, [pc, #300]	; (8010a98 <etharp_query+0x268>)
 801096c:	4613      	mov	r3, r2
 801096e:	005b      	lsls	r3, r3, #1
 8010970:	4413      	add	r3, r2
 8010972:	00db      	lsls	r3, r3, #3
 8010974:	440b      	add	r3, r1
 8010976:	3314      	adds	r3, #20
 8010978:	781b      	ldrb	r3, [r3, #0]
 801097a:	2b01      	cmp	r3, #1
 801097c:	d918      	bls.n	80109b0 <etharp_query+0x180>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801097e:	4a49      	ldr	r2, [pc, #292]	; (8010aa4 <etharp_query+0x274>)
 8010980:	7c7b      	ldrb	r3, [r7, #17]
 8010982:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8010984:	7c7a      	ldrb	r2, [r7, #17]
 8010986:	4613      	mov	r3, r2
 8010988:	005b      	lsls	r3, r3, #1
 801098a:	4413      	add	r3, r2
 801098c:	00db      	lsls	r3, r3, #3
 801098e:	3308      	adds	r3, #8
 8010990:	4a41      	ldr	r2, [pc, #260]	; (8010a98 <etharp_query+0x268>)
 8010992:	4413      	add	r3, r2
 8010994:	1d1a      	adds	r2, r3, #4
 8010996:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801099a:	9300      	str	r3, [sp, #0]
 801099c:	4613      	mov	r3, r2
 801099e:	697a      	ldr	r2, [r7, #20]
 80109a0:	6879      	ldr	r1, [r7, #4]
 80109a2:	68f8      	ldr	r0, [r7, #12]
 80109a4:	f000 f9d0 	bl	8010d48 <ethernet_output>
 80109a8:	4603      	mov	r3, r0
 80109aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80109ae:	e067      	b.n	8010a80 <etharp_query+0x250>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80109b0:	7c7a      	ldrb	r2, [r7, #17]
 80109b2:	4939      	ldr	r1, [pc, #228]	; (8010a98 <etharp_query+0x268>)
 80109b4:	4613      	mov	r3, r2
 80109b6:	005b      	lsls	r3, r3, #1
 80109b8:	4413      	add	r3, r2
 80109ba:	00db      	lsls	r3, r3, #3
 80109bc:	440b      	add	r3, r1
 80109be:	3314      	adds	r3, #20
 80109c0:	781b      	ldrb	r3, [r3, #0]
 80109c2:	2b01      	cmp	r3, #1
 80109c4:	d15c      	bne.n	8010a80 <etharp_query+0x250>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80109c6:	2300      	movs	r3, #0
 80109c8:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	61fb      	str	r3, [r7, #28]
    while (p) {
 80109ce:	e01c      	b.n	8010a0a <etharp_query+0x1da>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80109d0:	69fb      	ldr	r3, [r7, #28]
 80109d2:	895a      	ldrh	r2, [r3, #10]
 80109d4:	69fb      	ldr	r3, [r7, #28]
 80109d6:	891b      	ldrh	r3, [r3, #8]
 80109d8:	429a      	cmp	r2, r3
 80109da:	d10a      	bne.n	80109f2 <etharp_query+0x1c2>
 80109dc:	69fb      	ldr	r3, [r7, #28]
 80109de:	681b      	ldr	r3, [r3, #0]
 80109e0:	2b00      	cmp	r3, #0
 80109e2:	d006      	beq.n	80109f2 <etharp_query+0x1c2>
 80109e4:	4b29      	ldr	r3, [pc, #164]	; (8010a8c <etharp_query+0x25c>)
 80109e6:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80109ea:	492f      	ldr	r1, [pc, #188]	; (8010aa8 <etharp_query+0x278>)
 80109ec:	4829      	ldr	r0, [pc, #164]	; (8010a94 <etharp_query+0x264>)
 80109ee:	f010 faaf 	bl	8020f50 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80109f2:	69fb      	ldr	r3, [r7, #28]
 80109f4:	7b1b      	ldrb	r3, [r3, #12]
 80109f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	d002      	beq.n	8010a04 <etharp_query+0x1d4>
        copy_needed = 1;
 80109fe:	2301      	movs	r3, #1
 8010a00:	61bb      	str	r3, [r7, #24]
        break;
 8010a02:	e005      	b.n	8010a10 <etharp_query+0x1e0>
      }
      p = p->next;
 8010a04:	69fb      	ldr	r3, [r7, #28]
 8010a06:	681b      	ldr	r3, [r3, #0]
 8010a08:	61fb      	str	r3, [r7, #28]
    while (p) {
 8010a0a:	69fb      	ldr	r3, [r7, #28]
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	d1df      	bne.n	80109d0 <etharp_query+0x1a0>
    }
    if (copy_needed) {
 8010a10:	69bb      	ldr	r3, [r7, #24]
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	d007      	beq.n	8010a26 <etharp_query+0x1f6>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8010a16:	687a      	ldr	r2, [r7, #4]
 8010a18:	f44f 7120 	mov.w	r1, #640	; 0x280
 8010a1c:	200e      	movs	r0, #14
 8010a1e:	f003 fd8f 	bl	8014540 <pbuf_clone>
 8010a22:	61f8      	str	r0, [r7, #28]
 8010a24:	e004      	b.n	8010a30 <etharp_query+0x200>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8010a2a:	69f8      	ldr	r0, [r7, #28]
 8010a2c:	f003 fbb6 	bl	801419c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8010a30:	69fb      	ldr	r3, [r7, #28]
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d021      	beq.n	8010a7a <etharp_query+0x24a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8010a36:	7c7a      	ldrb	r2, [r7, #17]
 8010a38:	4917      	ldr	r1, [pc, #92]	; (8010a98 <etharp_query+0x268>)
 8010a3a:	4613      	mov	r3, r2
 8010a3c:	005b      	lsls	r3, r3, #1
 8010a3e:	4413      	add	r3, r2
 8010a40:	00db      	lsls	r3, r3, #3
 8010a42:	440b      	add	r3, r1
 8010a44:	681b      	ldr	r3, [r3, #0]
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	d00a      	beq.n	8010a60 <etharp_query+0x230>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8010a4a:	7c7a      	ldrb	r2, [r7, #17]
 8010a4c:	4912      	ldr	r1, [pc, #72]	; (8010a98 <etharp_query+0x268>)
 8010a4e:	4613      	mov	r3, r2
 8010a50:	005b      	lsls	r3, r3, #1
 8010a52:	4413      	add	r3, r2
 8010a54:	00db      	lsls	r3, r3, #3
 8010a56:	440b      	add	r3, r1
 8010a58:	681b      	ldr	r3, [r3, #0]
 8010a5a:	4618      	mov	r0, r3
 8010a5c:	f003 faf8 	bl	8014050 <pbuf_free>
      }
      arp_table[i].q = p;
 8010a60:	7c7a      	ldrb	r2, [r7, #17]
 8010a62:	490d      	ldr	r1, [pc, #52]	; (8010a98 <etharp_query+0x268>)
 8010a64:	4613      	mov	r3, r2
 8010a66:	005b      	lsls	r3, r3, #1
 8010a68:	4413      	add	r3, r2
 8010a6a:	00db      	lsls	r3, r3, #3
 8010a6c:	440b      	add	r3, r1
 8010a6e:	69fa      	ldr	r2, [r7, #28]
 8010a70:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8010a72:	2300      	movs	r3, #0
 8010a74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010a78:	e002      	b.n	8010a80 <etharp_query+0x250>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8010a7a:	23ff      	movs	r3, #255	; 0xff
 8010a7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8010a80:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8010a84:	4618      	mov	r0, r3
 8010a86:	3728      	adds	r7, #40	; 0x28
 8010a88:	46bd      	mov	sp, r7
 8010a8a:	bd80      	pop	{r7, pc}
 8010a8c:	08023ad0 	.word	0x08023ad0
 8010a90:	08023c9c 	.word	0x08023c9c
 8010a94:	08023b68 	.word	0x08023b68
 8010a98:	240405d8 	.word	0x240405d8
 8010a9c:	08023cac 	.word	0x08023cac
 8010aa0:	08023c90 	.word	0x08023c90
 8010aa4:	240406c8 	.word	0x240406c8
 8010aa8:	08023cd4 	.word	0x08023cd4

08010aac <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8010aac:	b580      	push	{r7, lr}
 8010aae:	b08a      	sub	sp, #40	; 0x28
 8010ab0:	af02      	add	r7, sp, #8
 8010ab2:	60f8      	str	r0, [r7, #12]
 8010ab4:	60b9      	str	r1, [r7, #8]
 8010ab6:	607a      	str	r2, [r7, #4]
 8010ab8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8010aba:	2300      	movs	r3, #0
 8010abc:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8010abe:	68fb      	ldr	r3, [r7, #12]
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	d106      	bne.n	8010ad2 <etharp_raw+0x26>
 8010ac4:	4b3a      	ldr	r3, [pc, #232]	; (8010bb0 <etharp_raw+0x104>)
 8010ac6:	f240 4257 	movw	r2, #1111	; 0x457
 8010aca:	493a      	ldr	r1, [pc, #232]	; (8010bb4 <etharp_raw+0x108>)
 8010acc:	483a      	ldr	r0, [pc, #232]	; (8010bb8 <etharp_raw+0x10c>)
 8010ace:	f010 fa3f 	bl	8020f50 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8010ad2:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010ad6:	211c      	movs	r1, #28
 8010ad8:	200e      	movs	r0, #14
 8010ada:	f002 ffa7 	bl	8013a2c <pbuf_alloc>
 8010ade:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8010ae0:	69bb      	ldr	r3, [r7, #24]
 8010ae2:	2b00      	cmp	r3, #0
 8010ae4:	d102      	bne.n	8010aec <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8010ae6:	f04f 33ff 	mov.w	r3, #4294967295
 8010aea:	e05d      	b.n	8010ba8 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8010aec:	69bb      	ldr	r3, [r7, #24]
 8010aee:	895b      	ldrh	r3, [r3, #10]
 8010af0:	2b1b      	cmp	r3, #27
 8010af2:	d806      	bhi.n	8010b02 <etharp_raw+0x56>
 8010af4:	4b2e      	ldr	r3, [pc, #184]	; (8010bb0 <etharp_raw+0x104>)
 8010af6:	f240 4263 	movw	r2, #1123	; 0x463
 8010afa:	4930      	ldr	r1, [pc, #192]	; (8010bbc <etharp_raw+0x110>)
 8010afc:	482e      	ldr	r0, [pc, #184]	; (8010bb8 <etharp_raw+0x10c>)
 8010afe:	f010 fa27 	bl	8020f50 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8010b02:	69bb      	ldr	r3, [r7, #24]
 8010b04:	685b      	ldr	r3, [r3, #4]
 8010b06:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8010b08:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8010b0a:	4618      	mov	r0, r3
 8010b0c:	f7ff f8f6 	bl	800fcfc <lwip_htons>
 8010b10:	4603      	mov	r3, r0
 8010b12:	461a      	mov	r2, r3
 8010b14:	697b      	ldr	r3, [r7, #20]
 8010b16:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8010b18:	68fb      	ldr	r3, [r7, #12]
 8010b1a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010b1e:	2b06      	cmp	r3, #6
 8010b20:	d006      	beq.n	8010b30 <etharp_raw+0x84>
 8010b22:	4b23      	ldr	r3, [pc, #140]	; (8010bb0 <etharp_raw+0x104>)
 8010b24:	f240 426a 	movw	r2, #1130	; 0x46a
 8010b28:	4925      	ldr	r1, [pc, #148]	; (8010bc0 <etharp_raw+0x114>)
 8010b2a:	4823      	ldr	r0, [pc, #140]	; (8010bb8 <etharp_raw+0x10c>)
 8010b2c:	f010 fa10 	bl	8020f50 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8010b30:	697b      	ldr	r3, [r7, #20]
 8010b32:	3308      	adds	r3, #8
 8010b34:	2206      	movs	r2, #6
 8010b36:	6839      	ldr	r1, [r7, #0]
 8010b38:	4618      	mov	r0, r3
 8010b3a:	f00f fda4 	bl	8020686 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8010b3e:	697b      	ldr	r3, [r7, #20]
 8010b40:	3312      	adds	r3, #18
 8010b42:	2206      	movs	r2, #6
 8010b44:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010b46:	4618      	mov	r0, r3
 8010b48:	f00f fd9d 	bl	8020686 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8010b4c:	697b      	ldr	r3, [r7, #20]
 8010b4e:	330e      	adds	r3, #14
 8010b50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010b52:	6812      	ldr	r2, [r2, #0]
 8010b54:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8010b56:	697b      	ldr	r3, [r7, #20]
 8010b58:	3318      	adds	r3, #24
 8010b5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010b5c:	6812      	ldr	r2, [r2, #0]
 8010b5e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8010b60:	697b      	ldr	r3, [r7, #20]
 8010b62:	2200      	movs	r2, #0
 8010b64:	701a      	strb	r2, [r3, #0]
 8010b66:	2200      	movs	r2, #0
 8010b68:	f042 0201 	orr.w	r2, r2, #1
 8010b6c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8010b6e:	697b      	ldr	r3, [r7, #20]
 8010b70:	2200      	movs	r2, #0
 8010b72:	f042 0208 	orr.w	r2, r2, #8
 8010b76:	709a      	strb	r2, [r3, #2]
 8010b78:	2200      	movs	r2, #0
 8010b7a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8010b7c:	697b      	ldr	r3, [r7, #20]
 8010b7e:	2206      	movs	r2, #6
 8010b80:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8010b82:	697b      	ldr	r3, [r7, #20]
 8010b84:	2204      	movs	r2, #4
 8010b86:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8010b88:	f640 0306 	movw	r3, #2054	; 0x806
 8010b8c:	9300      	str	r3, [sp, #0]
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	68ba      	ldr	r2, [r7, #8]
 8010b92:	69b9      	ldr	r1, [r7, #24]
 8010b94:	68f8      	ldr	r0, [r7, #12]
 8010b96:	f000 f8d7 	bl	8010d48 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8010b9a:	69b8      	ldr	r0, [r7, #24]
 8010b9c:	f003 fa58 	bl	8014050 <pbuf_free>
  p = NULL;
 8010ba0:	2300      	movs	r3, #0
 8010ba2:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8010ba4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8010ba8:	4618      	mov	r0, r3
 8010baa:	3720      	adds	r7, #32
 8010bac:	46bd      	mov	sp, r7
 8010bae:	bd80      	pop	{r7, pc}
 8010bb0:	08023ad0 	.word	0x08023ad0
 8010bb4:	08023c40 	.word	0x08023c40
 8010bb8:	08023b68 	.word	0x08023b68
 8010bbc:	08023cf0 	.word	0x08023cf0
 8010bc0:	08023d24 	.word	0x08023d24

08010bc4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8010bc4:	b580      	push	{r7, lr}
 8010bc6:	b088      	sub	sp, #32
 8010bc8:	af04      	add	r7, sp, #16
 8010bca:	60f8      	str	r0, [r7, #12]
 8010bcc:	60b9      	str	r1, [r7, #8]
 8010bce:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8010bd0:	68fb      	ldr	r3, [r7, #12]
 8010bd2:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8010bd6:	68fb      	ldr	r3, [r7, #12]
 8010bd8:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8010bdc:	68fb      	ldr	r3, [r7, #12]
 8010bde:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8010be0:	2201      	movs	r2, #1
 8010be2:	9203      	str	r2, [sp, #12]
 8010be4:	68ba      	ldr	r2, [r7, #8]
 8010be6:	9202      	str	r2, [sp, #8]
 8010be8:	4a06      	ldr	r2, [pc, #24]	; (8010c04 <etharp_request_dst+0x40>)
 8010bea:	9201      	str	r2, [sp, #4]
 8010bec:	9300      	str	r3, [sp, #0]
 8010bee:	4603      	mov	r3, r0
 8010bf0:	687a      	ldr	r2, [r7, #4]
 8010bf2:	68f8      	ldr	r0, [r7, #12]
 8010bf4:	f7ff ff5a 	bl	8010aac <etharp_raw>
 8010bf8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8010bfa:	4618      	mov	r0, r3
 8010bfc:	3710      	adds	r7, #16
 8010bfe:	46bd      	mov	sp, r7
 8010c00:	bd80      	pop	{r7, pc}
 8010c02:	bf00      	nop
 8010c04:	08026f3c 	.word	0x08026f3c

08010c08 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8010c08:	b580      	push	{r7, lr}
 8010c0a:	b082      	sub	sp, #8
 8010c0c:	af00      	add	r7, sp, #0
 8010c0e:	6078      	str	r0, [r7, #4]
 8010c10:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8010c12:	4a05      	ldr	r2, [pc, #20]	; (8010c28 <etharp_request+0x20>)
 8010c14:	6839      	ldr	r1, [r7, #0]
 8010c16:	6878      	ldr	r0, [r7, #4]
 8010c18:	f7ff ffd4 	bl	8010bc4 <etharp_request_dst>
 8010c1c:	4603      	mov	r3, r0
}
 8010c1e:	4618      	mov	r0, r3
 8010c20:	3708      	adds	r7, #8
 8010c22:	46bd      	mov	sp, r7
 8010c24:	bd80      	pop	{r7, pc}
 8010c26:	bf00      	nop
 8010c28:	08026f34 	.word	0x08026f34

08010c2c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8010c2c:	b580      	push	{r7, lr}
 8010c2e:	b086      	sub	sp, #24
 8010c30:	af00      	add	r7, sp, #0
 8010c32:	6078      	str	r0, [r7, #4]
 8010c34:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8010c36:	230e      	movs	r3, #14
 8010c38:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	895b      	ldrh	r3, [r3, #10]
 8010c3e:	2b0e      	cmp	r3, #14
 8010c40:	d96e      	bls.n	8010d20 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	7bdb      	ldrb	r3, [r3, #15]
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	d106      	bne.n	8010c58 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8010c4a:	683b      	ldr	r3, [r7, #0]
 8010c4c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010c50:	3301      	adds	r3, #1
 8010c52:	b2da      	uxtb	r2, r3
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	685b      	ldr	r3, [r3, #4]
 8010c5c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8010c5e:	693b      	ldr	r3, [r7, #16]
 8010c60:	7b1a      	ldrb	r2, [r3, #12]
 8010c62:	7b5b      	ldrb	r3, [r3, #13]
 8010c64:	021b      	lsls	r3, r3, #8
 8010c66:	4313      	orrs	r3, r2
 8010c68:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8010c6a:	693b      	ldr	r3, [r7, #16]
 8010c6c:	781b      	ldrb	r3, [r3, #0]
 8010c6e:	f003 0301 	and.w	r3, r3, #1
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	d023      	beq.n	8010cbe <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8010c76:	693b      	ldr	r3, [r7, #16]
 8010c78:	781b      	ldrb	r3, [r3, #0]
 8010c7a:	2b01      	cmp	r3, #1
 8010c7c:	d10f      	bne.n	8010c9e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8010c7e:	693b      	ldr	r3, [r7, #16]
 8010c80:	785b      	ldrb	r3, [r3, #1]
 8010c82:	2b00      	cmp	r3, #0
 8010c84:	d11b      	bne.n	8010cbe <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8010c86:	693b      	ldr	r3, [r7, #16]
 8010c88:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8010c8a:	2b5e      	cmp	r3, #94	; 0x5e
 8010c8c:	d117      	bne.n	8010cbe <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	7b5b      	ldrb	r3, [r3, #13]
 8010c92:	f043 0310 	orr.w	r3, r3, #16
 8010c96:	b2da      	uxtb	r2, r3
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	735a      	strb	r2, [r3, #13]
 8010c9c:	e00f      	b.n	8010cbe <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8010c9e:	693b      	ldr	r3, [r7, #16]
 8010ca0:	2206      	movs	r2, #6
 8010ca2:	4928      	ldr	r1, [pc, #160]	; (8010d44 <ethernet_input+0x118>)
 8010ca4:	4618      	mov	r0, r3
 8010ca6:	f00f fcdf 	bl	8020668 <memcmp>
 8010caa:	4603      	mov	r3, r0
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	d106      	bne.n	8010cbe <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	7b5b      	ldrb	r3, [r3, #13]
 8010cb4:	f043 0308 	orr.w	r3, r3, #8
 8010cb8:	b2da      	uxtb	r2, r3
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8010cbe:	89fb      	ldrh	r3, [r7, #14]
 8010cc0:	2b08      	cmp	r3, #8
 8010cc2:	d003      	beq.n	8010ccc <ethernet_input+0xa0>
 8010cc4:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8010cc8:	d014      	beq.n	8010cf4 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8010cca:	e032      	b.n	8010d32 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8010ccc:	683b      	ldr	r3, [r7, #0]
 8010cce:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010cd2:	f003 0308 	and.w	r3, r3, #8
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	d024      	beq.n	8010d24 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8010cda:	8afb      	ldrh	r3, [r7, #22]
 8010cdc:	4619      	mov	r1, r3
 8010cde:	6878      	ldr	r0, [r7, #4]
 8010ce0:	f003 f8fe 	bl	8013ee0 <pbuf_remove_header>
 8010ce4:	4603      	mov	r3, r0
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	d11e      	bne.n	8010d28 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8010cea:	6839      	ldr	r1, [r7, #0]
 8010cec:	6878      	ldr	r0, [r7, #4]
 8010cee:	f000 fb95 	bl	801141c <ip4_input>
      break;
 8010cf2:	e013      	b.n	8010d1c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8010cf4:	683b      	ldr	r3, [r7, #0]
 8010cf6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010cfa:	f003 0308 	and.w	r3, r3, #8
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	d014      	beq.n	8010d2c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8010d02:	8afb      	ldrh	r3, [r7, #22]
 8010d04:	4619      	mov	r1, r3
 8010d06:	6878      	ldr	r0, [r7, #4]
 8010d08:	f003 f8ea 	bl	8013ee0 <pbuf_remove_header>
 8010d0c:	4603      	mov	r3, r0
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	d10e      	bne.n	8010d30 <ethernet_input+0x104>
        etharp_input(p, netif);
 8010d12:	6839      	ldr	r1, [r7, #0]
 8010d14:	6878      	ldr	r0, [r7, #4]
 8010d16:	f7ff fb65 	bl	80103e4 <etharp_input>
      break;
 8010d1a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8010d1c:	2300      	movs	r3, #0
 8010d1e:	e00c      	b.n	8010d3a <ethernet_input+0x10e>
    goto free_and_return;
 8010d20:	bf00      	nop
 8010d22:	e006      	b.n	8010d32 <ethernet_input+0x106>
        goto free_and_return;
 8010d24:	bf00      	nop
 8010d26:	e004      	b.n	8010d32 <ethernet_input+0x106>
        goto free_and_return;
 8010d28:	bf00      	nop
 8010d2a:	e002      	b.n	8010d32 <ethernet_input+0x106>
        goto free_and_return;
 8010d2c:	bf00      	nop
 8010d2e:	e000      	b.n	8010d32 <ethernet_input+0x106>
        goto free_and_return;
 8010d30:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8010d32:	6878      	ldr	r0, [r7, #4]
 8010d34:	f003 f98c 	bl	8014050 <pbuf_free>
  return ERR_OK;
 8010d38:	2300      	movs	r3, #0
}
 8010d3a:	4618      	mov	r0, r3
 8010d3c:	3718      	adds	r7, #24
 8010d3e:	46bd      	mov	sp, r7
 8010d40:	bd80      	pop	{r7, pc}
 8010d42:	bf00      	nop
 8010d44:	08026f34 	.word	0x08026f34

08010d48 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8010d48:	b580      	push	{r7, lr}
 8010d4a:	b086      	sub	sp, #24
 8010d4c:	af00      	add	r7, sp, #0
 8010d4e:	60f8      	str	r0, [r7, #12]
 8010d50:	60b9      	str	r1, [r7, #8]
 8010d52:	607a      	str	r2, [r7, #4]
 8010d54:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8010d56:	8c3b      	ldrh	r3, [r7, #32]
 8010d58:	4618      	mov	r0, r3
 8010d5a:	f7fe ffcf 	bl	800fcfc <lwip_htons>
 8010d5e:	4603      	mov	r3, r0
 8010d60:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8010d62:	210e      	movs	r1, #14
 8010d64:	68b8      	ldr	r0, [r7, #8]
 8010d66:	f003 f8ab 	bl	8013ec0 <pbuf_add_header>
 8010d6a:	4603      	mov	r3, r0
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	d125      	bne.n	8010dbc <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8010d70:	68bb      	ldr	r3, [r7, #8]
 8010d72:	685b      	ldr	r3, [r3, #4]
 8010d74:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8010d76:	693b      	ldr	r3, [r7, #16]
 8010d78:	8afa      	ldrh	r2, [r7, #22]
 8010d7a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8010d7c:	693b      	ldr	r3, [r7, #16]
 8010d7e:	2206      	movs	r2, #6
 8010d80:	6839      	ldr	r1, [r7, #0]
 8010d82:	4618      	mov	r0, r3
 8010d84:	f00f fc7f 	bl	8020686 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8010d88:	693b      	ldr	r3, [r7, #16]
 8010d8a:	3306      	adds	r3, #6
 8010d8c:	2206      	movs	r2, #6
 8010d8e:	6879      	ldr	r1, [r7, #4]
 8010d90:	4618      	mov	r0, r3
 8010d92:	f00f fc78 	bl	8020686 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8010d96:	68fb      	ldr	r3, [r7, #12]
 8010d98:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010d9c:	2b06      	cmp	r3, #6
 8010d9e:	d006      	beq.n	8010dae <ethernet_output+0x66>
 8010da0:	4b0a      	ldr	r3, [pc, #40]	; (8010dcc <ethernet_output+0x84>)
 8010da2:	f240 1233 	movw	r2, #307	; 0x133
 8010da6:	490a      	ldr	r1, [pc, #40]	; (8010dd0 <ethernet_output+0x88>)
 8010da8:	480a      	ldr	r0, [pc, #40]	; (8010dd4 <ethernet_output+0x8c>)
 8010daa:	f010 f8d1 	bl	8020f50 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8010dae:	68fb      	ldr	r3, [r7, #12]
 8010db0:	699b      	ldr	r3, [r3, #24]
 8010db2:	68b9      	ldr	r1, [r7, #8]
 8010db4:	68f8      	ldr	r0, [r7, #12]
 8010db6:	4798      	blx	r3
 8010db8:	4603      	mov	r3, r0
 8010dba:	e002      	b.n	8010dc2 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8010dbc:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8010dbe:	f06f 0301 	mvn.w	r3, #1
}
 8010dc2:	4618      	mov	r0, r3
 8010dc4:	3718      	adds	r7, #24
 8010dc6:	46bd      	mov	sp, r7
 8010dc8:	bd80      	pop	{r7, pc}
 8010dca:	bf00      	nop
 8010dcc:	08023d68 	.word	0x08023d68
 8010dd0:	08023dbc 	.word	0x08023dbc
 8010dd4:	08023df0 	.word	0x08023df0

08010dd8 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8010dd8:	b580      	push	{r7, lr}
 8010dda:	b08e      	sub	sp, #56	; 0x38
 8010ddc:	af04      	add	r7, sp, #16
 8010dde:	6078      	str	r0, [r7, #4]
 8010de0:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8010de2:	4b87      	ldr	r3, [pc, #540]	; (8011000 <icmp_input+0x228>)
 8010de4:	689b      	ldr	r3, [r3, #8]
 8010de6:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8010de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dea:	781b      	ldrb	r3, [r3, #0]
 8010dec:	f003 030f 	and.w	r3, r3, #15
 8010df0:	b2db      	uxtb	r3, r3
 8010df2:	009b      	lsls	r3, r3, #2
 8010df4:	b2db      	uxtb	r3, r3
 8010df6:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8010df8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010dfa:	2b13      	cmp	r3, #19
 8010dfc:	f240 80e8 	bls.w	8010fd0 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	895b      	ldrh	r3, [r3, #10]
 8010e04:	2b03      	cmp	r3, #3
 8010e06:	f240 80e5 	bls.w	8010fd4 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	685b      	ldr	r3, [r3, #4]
 8010e0e:	781b      	ldrb	r3, [r3, #0]
 8010e10:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8010e14:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	f000 80d2 	beq.w	8010fc2 <icmp_input+0x1ea>
 8010e1e:	2b08      	cmp	r3, #8
 8010e20:	f040 80d2 	bne.w	8010fc8 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8010e24:	4b77      	ldr	r3, [pc, #476]	; (8011004 <icmp_input+0x22c>)
 8010e26:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8010e28:	4b75      	ldr	r3, [pc, #468]	; (8011000 <icmp_input+0x228>)
 8010e2a:	695b      	ldr	r3, [r3, #20]
 8010e2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010e30:	2be0      	cmp	r3, #224	; 0xe0
 8010e32:	f000 80d6 	beq.w	8010fe2 <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8010e36:	4b72      	ldr	r3, [pc, #456]	; (8011000 <icmp_input+0x228>)
 8010e38:	695a      	ldr	r2, [r3, #20]
 8010e3a:	4b71      	ldr	r3, [pc, #452]	; (8011000 <icmp_input+0x228>)
 8010e3c:	681b      	ldr	r3, [r3, #0]
 8010e3e:	4619      	mov	r1, r3
 8010e40:	4610      	mov	r0, r2
 8010e42:	f000 fce5 	bl	8011810 <ip4_addr_isbroadcast_u32>
 8010e46:	4603      	mov	r3, r0
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	f040 80cc 	bne.w	8010fe6 <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	891b      	ldrh	r3, [r3, #8]
 8010e52:	2b07      	cmp	r3, #7
 8010e54:	f240 80c0 	bls.w	8010fd8 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8010e58:	6878      	ldr	r0, [r7, #4]
 8010e5a:	f000 f9e0 	bl	801121e <inet_chksum_pbuf>
 8010e5e:	4603      	mov	r3, r0
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	d003      	beq.n	8010e6c <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8010e64:	6878      	ldr	r0, [r7, #4]
 8010e66:	f003 f8f3 	bl	8014050 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8010e6a:	e0c5      	b.n	8010ff8 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8010e6c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010e6e:	330e      	adds	r3, #14
 8010e70:	4619      	mov	r1, r3
 8010e72:	6878      	ldr	r0, [r7, #4]
 8010e74:	f003 f824 	bl	8013ec0 <pbuf_add_header>
 8010e78:	4603      	mov	r3, r0
 8010e7a:	2b00      	cmp	r3, #0
 8010e7c:	d04b      	beq.n	8010f16 <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	891a      	ldrh	r2, [r3, #8]
 8010e82:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010e84:	4413      	add	r3, r2
 8010e86:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	891b      	ldrh	r3, [r3, #8]
 8010e8c:	8b7a      	ldrh	r2, [r7, #26]
 8010e8e:	429a      	cmp	r2, r3
 8010e90:	f0c0 80ab 	bcc.w	8010fea <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8010e94:	8b7b      	ldrh	r3, [r7, #26]
 8010e96:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010e9a:	4619      	mov	r1, r3
 8010e9c:	200e      	movs	r0, #14
 8010e9e:	f002 fdc5 	bl	8013a2c <pbuf_alloc>
 8010ea2:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8010ea4:	697b      	ldr	r3, [r7, #20]
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	f000 80a1 	beq.w	8010fee <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8010eac:	697b      	ldr	r3, [r7, #20]
 8010eae:	895b      	ldrh	r3, [r3, #10]
 8010eb0:	461a      	mov	r2, r3
 8010eb2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010eb4:	3308      	adds	r3, #8
 8010eb6:	429a      	cmp	r2, r3
 8010eb8:	d203      	bcs.n	8010ec2 <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8010eba:	6978      	ldr	r0, [r7, #20]
 8010ebc:	f003 f8c8 	bl	8014050 <pbuf_free>
          goto icmperr;
 8010ec0:	e096      	b.n	8010ff0 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8010ec2:	697b      	ldr	r3, [r7, #20]
 8010ec4:	685b      	ldr	r3, [r3, #4]
 8010ec6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010ec8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010eca:	4618      	mov	r0, r3
 8010ecc:	f00f fbdb 	bl	8020686 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8010ed0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010ed2:	4619      	mov	r1, r3
 8010ed4:	6978      	ldr	r0, [r7, #20]
 8010ed6:	f003 f803 	bl	8013ee0 <pbuf_remove_header>
 8010eda:	4603      	mov	r3, r0
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d009      	beq.n	8010ef4 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8010ee0:	4b49      	ldr	r3, [pc, #292]	; (8011008 <icmp_input+0x230>)
 8010ee2:	22b6      	movs	r2, #182	; 0xb6
 8010ee4:	4949      	ldr	r1, [pc, #292]	; (801100c <icmp_input+0x234>)
 8010ee6:	484a      	ldr	r0, [pc, #296]	; (8011010 <icmp_input+0x238>)
 8010ee8:	f010 f832 	bl	8020f50 <iprintf>
          pbuf_free(r);
 8010eec:	6978      	ldr	r0, [r7, #20]
 8010eee:	f003 f8af 	bl	8014050 <pbuf_free>
          goto icmperr;
 8010ef2:	e07d      	b.n	8010ff0 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8010ef4:	6879      	ldr	r1, [r7, #4]
 8010ef6:	6978      	ldr	r0, [r7, #20]
 8010ef8:	f003 f9de 	bl	80142b8 <pbuf_copy>
 8010efc:	4603      	mov	r3, r0
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	d003      	beq.n	8010f0a <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8010f02:	6978      	ldr	r0, [r7, #20]
 8010f04:	f003 f8a4 	bl	8014050 <pbuf_free>
          goto icmperr;
 8010f08:	e072      	b.n	8010ff0 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 8010f0a:	6878      	ldr	r0, [r7, #4]
 8010f0c:	f003 f8a0 	bl	8014050 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8010f10:	697b      	ldr	r3, [r7, #20]
 8010f12:	607b      	str	r3, [r7, #4]
 8010f14:	e00f      	b.n	8010f36 <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8010f16:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010f18:	330e      	adds	r3, #14
 8010f1a:	4619      	mov	r1, r3
 8010f1c:	6878      	ldr	r0, [r7, #4]
 8010f1e:	f002 ffdf 	bl	8013ee0 <pbuf_remove_header>
 8010f22:	4603      	mov	r3, r0
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	d006      	beq.n	8010f36 <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8010f28:	4b37      	ldr	r3, [pc, #220]	; (8011008 <icmp_input+0x230>)
 8010f2a:	22c7      	movs	r2, #199	; 0xc7
 8010f2c:	4939      	ldr	r1, [pc, #228]	; (8011014 <icmp_input+0x23c>)
 8010f2e:	4838      	ldr	r0, [pc, #224]	; (8011010 <icmp_input+0x238>)
 8010f30:	f010 f80e 	bl	8020f50 <iprintf>
          goto icmperr;
 8010f34:	e05c      	b.n	8010ff0 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	685b      	ldr	r3, [r3, #4]
 8010f3a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8010f3c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010f3e:	4619      	mov	r1, r3
 8010f40:	6878      	ldr	r0, [r7, #4]
 8010f42:	f002 ffbd 	bl	8013ec0 <pbuf_add_header>
 8010f46:	4603      	mov	r3, r0
 8010f48:	2b00      	cmp	r3, #0
 8010f4a:	d13c      	bne.n	8010fc6 <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	685b      	ldr	r3, [r3, #4]
 8010f50:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8010f52:	69fb      	ldr	r3, [r7, #28]
 8010f54:	681a      	ldr	r2, [r3, #0]
 8010f56:	68fb      	ldr	r3, [r7, #12]
 8010f58:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8010f5a:	4b29      	ldr	r3, [pc, #164]	; (8011000 <icmp_input+0x228>)
 8010f5c:	691a      	ldr	r2, [r3, #16]
 8010f5e:	68fb      	ldr	r3, [r7, #12]
 8010f60:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8010f62:	693b      	ldr	r3, [r7, #16]
 8010f64:	2200      	movs	r2, #0
 8010f66:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8010f68:	693b      	ldr	r3, [r7, #16]
 8010f6a:	885b      	ldrh	r3, [r3, #2]
 8010f6c:	b29b      	uxth	r3, r3
 8010f6e:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8010f72:	4293      	cmp	r3, r2
 8010f74:	d907      	bls.n	8010f86 <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8010f76:	693b      	ldr	r3, [r7, #16]
 8010f78:	885b      	ldrh	r3, [r3, #2]
 8010f7a:	b29b      	uxth	r3, r3
 8010f7c:	3309      	adds	r3, #9
 8010f7e:	b29a      	uxth	r2, r3
 8010f80:	693b      	ldr	r3, [r7, #16]
 8010f82:	805a      	strh	r2, [r3, #2]
 8010f84:	e006      	b.n	8010f94 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8010f86:	693b      	ldr	r3, [r7, #16]
 8010f88:	885b      	ldrh	r3, [r3, #2]
 8010f8a:	b29b      	uxth	r3, r3
 8010f8c:	3308      	adds	r3, #8
 8010f8e:	b29a      	uxth	r2, r3
 8010f90:	693b      	ldr	r3, [r7, #16]
 8010f92:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8010f94:	68fb      	ldr	r3, [r7, #12]
 8010f96:	22ff      	movs	r2, #255	; 0xff
 8010f98:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8010f9a:	68fb      	ldr	r3, [r7, #12]
 8010f9c:	2200      	movs	r2, #0
 8010f9e:	729a      	strb	r2, [r3, #10]
 8010fa0:	2200      	movs	r2, #0
 8010fa2:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8010fa4:	683b      	ldr	r3, [r7, #0]
 8010fa6:	9302      	str	r3, [sp, #8]
 8010fa8:	2301      	movs	r3, #1
 8010faa:	9301      	str	r3, [sp, #4]
 8010fac:	2300      	movs	r3, #0
 8010fae:	9300      	str	r3, [sp, #0]
 8010fb0:	23ff      	movs	r3, #255	; 0xff
 8010fb2:	2200      	movs	r2, #0
 8010fb4:	69f9      	ldr	r1, [r7, #28]
 8010fb6:	6878      	ldr	r0, [r7, #4]
 8010fb8:	f000 fb52 	bl	8011660 <ip4_output_if>
 8010fbc:	4603      	mov	r3, r0
 8010fbe:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8010fc0:	e001      	b.n	8010fc6 <icmp_input+0x1ee>
      break;
 8010fc2:	bf00      	nop
 8010fc4:	e000      	b.n	8010fc8 <icmp_input+0x1f0>
      break;
 8010fc6:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8010fc8:	6878      	ldr	r0, [r7, #4]
 8010fca:	f003 f841 	bl	8014050 <pbuf_free>
  return;
 8010fce:	e013      	b.n	8010ff8 <icmp_input+0x220>
    goto lenerr;
 8010fd0:	bf00      	nop
 8010fd2:	e002      	b.n	8010fda <icmp_input+0x202>
    goto lenerr;
 8010fd4:	bf00      	nop
 8010fd6:	e000      	b.n	8010fda <icmp_input+0x202>
        goto lenerr;
 8010fd8:	bf00      	nop
lenerr:
  pbuf_free(p);
 8010fda:	6878      	ldr	r0, [r7, #4]
 8010fdc:	f003 f838 	bl	8014050 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8010fe0:	e00a      	b.n	8010ff8 <icmp_input+0x220>
        goto icmperr;
 8010fe2:	bf00      	nop
 8010fe4:	e004      	b.n	8010ff0 <icmp_input+0x218>
        goto icmperr;
 8010fe6:	bf00      	nop
 8010fe8:	e002      	b.n	8010ff0 <icmp_input+0x218>
          goto icmperr;
 8010fea:	bf00      	nop
 8010fec:	e000      	b.n	8010ff0 <icmp_input+0x218>
          goto icmperr;
 8010fee:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8010ff0:	6878      	ldr	r0, [r7, #4]
 8010ff2:	f003 f82d 	bl	8014050 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8010ff6:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8010ff8:	3728      	adds	r7, #40	; 0x28
 8010ffa:	46bd      	mov	sp, r7
 8010ffc:	bd80      	pop	{r7, pc}
 8010ffe:	bf00      	nop
 8011000:	24045db8 	.word	0x24045db8
 8011004:	24045dcc 	.word	0x24045dcc
 8011008:	08023e18 	.word	0x08023e18
 801100c:	08023e6c 	.word	0x08023e6c
 8011010:	08023ea4 	.word	0x08023ea4
 8011014:	08023ecc 	.word	0x08023ecc

08011018 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8011018:	b580      	push	{r7, lr}
 801101a:	b082      	sub	sp, #8
 801101c:	af00      	add	r7, sp, #0
 801101e:	6078      	str	r0, [r7, #4]
 8011020:	460b      	mov	r3, r1
 8011022:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8011024:	78fb      	ldrb	r3, [r7, #3]
 8011026:	461a      	mov	r2, r3
 8011028:	2103      	movs	r1, #3
 801102a:	6878      	ldr	r0, [r7, #4]
 801102c:	f000 f814 	bl	8011058 <icmp_send_response>
}
 8011030:	bf00      	nop
 8011032:	3708      	adds	r7, #8
 8011034:	46bd      	mov	sp, r7
 8011036:	bd80      	pop	{r7, pc}

08011038 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8011038:	b580      	push	{r7, lr}
 801103a:	b082      	sub	sp, #8
 801103c:	af00      	add	r7, sp, #0
 801103e:	6078      	str	r0, [r7, #4]
 8011040:	460b      	mov	r3, r1
 8011042:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8011044:	78fb      	ldrb	r3, [r7, #3]
 8011046:	461a      	mov	r2, r3
 8011048:	210b      	movs	r1, #11
 801104a:	6878      	ldr	r0, [r7, #4]
 801104c:	f000 f804 	bl	8011058 <icmp_send_response>
}
 8011050:	bf00      	nop
 8011052:	3708      	adds	r7, #8
 8011054:	46bd      	mov	sp, r7
 8011056:	bd80      	pop	{r7, pc}

08011058 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8011058:	b580      	push	{r7, lr}
 801105a:	b08c      	sub	sp, #48	; 0x30
 801105c:	af04      	add	r7, sp, #16
 801105e:	6078      	str	r0, [r7, #4]
 8011060:	460b      	mov	r3, r1
 8011062:	70fb      	strb	r3, [r7, #3]
 8011064:	4613      	mov	r3, r2
 8011066:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8011068:	f44f 7220 	mov.w	r2, #640	; 0x280
 801106c:	2124      	movs	r1, #36	; 0x24
 801106e:	2022      	movs	r0, #34	; 0x22
 8011070:	f002 fcdc 	bl	8013a2c <pbuf_alloc>
 8011074:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8011076:	69fb      	ldr	r3, [r7, #28]
 8011078:	2b00      	cmp	r3, #0
 801107a:	d056      	beq.n	801112a <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801107c:	69fb      	ldr	r3, [r7, #28]
 801107e:	895b      	ldrh	r3, [r3, #10]
 8011080:	2b23      	cmp	r3, #35	; 0x23
 8011082:	d806      	bhi.n	8011092 <icmp_send_response+0x3a>
 8011084:	4b2b      	ldr	r3, [pc, #172]	; (8011134 <icmp_send_response+0xdc>)
 8011086:	f240 1269 	movw	r2, #361	; 0x169
 801108a:	492b      	ldr	r1, [pc, #172]	; (8011138 <icmp_send_response+0xe0>)
 801108c:	482b      	ldr	r0, [pc, #172]	; (801113c <icmp_send_response+0xe4>)
 801108e:	f00f ff5f 	bl	8020f50 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	685b      	ldr	r3, [r3, #4]
 8011096:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8011098:	69fb      	ldr	r3, [r7, #28]
 801109a:	685b      	ldr	r3, [r3, #4]
 801109c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801109e:	697b      	ldr	r3, [r7, #20]
 80110a0:	78fa      	ldrb	r2, [r7, #3]
 80110a2:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80110a4:	697b      	ldr	r3, [r7, #20]
 80110a6:	78ba      	ldrb	r2, [r7, #2]
 80110a8:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80110aa:	697b      	ldr	r3, [r7, #20]
 80110ac:	2200      	movs	r2, #0
 80110ae:	711a      	strb	r2, [r3, #4]
 80110b0:	2200      	movs	r2, #0
 80110b2:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80110b4:	697b      	ldr	r3, [r7, #20]
 80110b6:	2200      	movs	r2, #0
 80110b8:	719a      	strb	r2, [r3, #6]
 80110ba:	2200      	movs	r2, #0
 80110bc:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80110be:	69fb      	ldr	r3, [r7, #28]
 80110c0:	685b      	ldr	r3, [r3, #4]
 80110c2:	f103 0008 	add.w	r0, r3, #8
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	685b      	ldr	r3, [r3, #4]
 80110ca:	221c      	movs	r2, #28
 80110cc:	4619      	mov	r1, r3
 80110ce:	f00f fada 	bl	8020686 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80110d2:	69bb      	ldr	r3, [r7, #24]
 80110d4:	68db      	ldr	r3, [r3, #12]
 80110d6:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80110d8:	f107 030c 	add.w	r3, r7, #12
 80110dc:	4618      	mov	r0, r3
 80110de:	f000 f903 	bl	80112e8 <ip4_route>
 80110e2:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80110e4:	693b      	ldr	r3, [r7, #16]
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	d01b      	beq.n	8011122 <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80110ea:	697b      	ldr	r3, [r7, #20]
 80110ec:	2200      	movs	r2, #0
 80110ee:	709a      	strb	r2, [r3, #2]
 80110f0:	2200      	movs	r2, #0
 80110f2:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 80110f4:	69fb      	ldr	r3, [r7, #28]
 80110f6:	895b      	ldrh	r3, [r3, #10]
 80110f8:	4619      	mov	r1, r3
 80110fa:	6978      	ldr	r0, [r7, #20]
 80110fc:	f000 f87d 	bl	80111fa <inet_chksum>
 8011100:	4603      	mov	r3, r0
 8011102:	461a      	mov	r2, r3
 8011104:	697b      	ldr	r3, [r7, #20]
 8011106:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8011108:	f107 020c 	add.w	r2, r7, #12
 801110c:	693b      	ldr	r3, [r7, #16]
 801110e:	9302      	str	r3, [sp, #8]
 8011110:	2301      	movs	r3, #1
 8011112:	9301      	str	r3, [sp, #4]
 8011114:	2300      	movs	r3, #0
 8011116:	9300      	str	r3, [sp, #0]
 8011118:	23ff      	movs	r3, #255	; 0xff
 801111a:	2100      	movs	r1, #0
 801111c:	69f8      	ldr	r0, [r7, #28]
 801111e:	f000 fa9f 	bl	8011660 <ip4_output_if>
  }
  pbuf_free(q);
 8011122:	69f8      	ldr	r0, [r7, #28]
 8011124:	f002 ff94 	bl	8014050 <pbuf_free>
 8011128:	e000      	b.n	801112c <icmp_send_response+0xd4>
    return;
 801112a:	bf00      	nop
}
 801112c:	3720      	adds	r7, #32
 801112e:	46bd      	mov	sp, r7
 8011130:	bd80      	pop	{r7, pc}
 8011132:	bf00      	nop
 8011134:	08023e18 	.word	0x08023e18
 8011138:	08023f00 	.word	0x08023f00
 801113c:	08023ea4 	.word	0x08023ea4

08011140 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 8011140:	b480      	push	{r7}
 8011142:	b089      	sub	sp, #36	; 0x24
 8011144:	af00      	add	r7, sp, #0
 8011146:	6078      	str	r0, [r7, #4]
 8011148:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 801114e:	2300      	movs	r3, #0
 8011150:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 8011152:	2300      	movs	r3, #0
 8011154:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 8011156:	69fb      	ldr	r3, [r7, #28]
 8011158:	f003 0301 	and.w	r3, r3, #1
 801115c:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 801115e:	693b      	ldr	r3, [r7, #16]
 8011160:	2b00      	cmp	r3, #0
 8011162:	d00d      	beq.n	8011180 <lwip_standard_chksum+0x40>
 8011164:	683b      	ldr	r3, [r7, #0]
 8011166:	2b00      	cmp	r3, #0
 8011168:	dd0a      	ble.n	8011180 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 801116a:	69fa      	ldr	r2, [r7, #28]
 801116c:	1c53      	adds	r3, r2, #1
 801116e:	61fb      	str	r3, [r7, #28]
 8011170:	f107 030e 	add.w	r3, r7, #14
 8011174:	3301      	adds	r3, #1
 8011176:	7812      	ldrb	r2, [r2, #0]
 8011178:	701a      	strb	r2, [r3, #0]
    len--;
 801117a:	683b      	ldr	r3, [r7, #0]
 801117c:	3b01      	subs	r3, #1
 801117e:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 8011180:	69fb      	ldr	r3, [r7, #28]
 8011182:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 8011184:	e00a      	b.n	801119c <lwip_standard_chksum+0x5c>
    sum += *ps++;
 8011186:	69bb      	ldr	r3, [r7, #24]
 8011188:	1c9a      	adds	r2, r3, #2
 801118a:	61ba      	str	r2, [r7, #24]
 801118c:	881b      	ldrh	r3, [r3, #0]
 801118e:	461a      	mov	r2, r3
 8011190:	697b      	ldr	r3, [r7, #20]
 8011192:	4413      	add	r3, r2
 8011194:	617b      	str	r3, [r7, #20]
    len -= 2;
 8011196:	683b      	ldr	r3, [r7, #0]
 8011198:	3b02      	subs	r3, #2
 801119a:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 801119c:	683b      	ldr	r3, [r7, #0]
 801119e:	2b01      	cmp	r3, #1
 80111a0:	dcf1      	bgt.n	8011186 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 80111a2:	683b      	ldr	r3, [r7, #0]
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	dd04      	ble.n	80111b2 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 80111a8:	f107 030e 	add.w	r3, r7, #14
 80111ac:	69ba      	ldr	r2, [r7, #24]
 80111ae:	7812      	ldrb	r2, [r2, #0]
 80111b0:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 80111b2:	89fb      	ldrh	r3, [r7, #14]
 80111b4:	461a      	mov	r2, r3
 80111b6:	697b      	ldr	r3, [r7, #20]
 80111b8:	4413      	add	r3, r2
 80111ba:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 80111bc:	697b      	ldr	r3, [r7, #20]
 80111be:	0c1a      	lsrs	r2, r3, #16
 80111c0:	697b      	ldr	r3, [r7, #20]
 80111c2:	b29b      	uxth	r3, r3
 80111c4:	4413      	add	r3, r2
 80111c6:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 80111c8:	697b      	ldr	r3, [r7, #20]
 80111ca:	0c1a      	lsrs	r2, r3, #16
 80111cc:	697b      	ldr	r3, [r7, #20]
 80111ce:	b29b      	uxth	r3, r3
 80111d0:	4413      	add	r3, r2
 80111d2:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 80111d4:	693b      	ldr	r3, [r7, #16]
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	d007      	beq.n	80111ea <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 80111da:	697b      	ldr	r3, [r7, #20]
 80111dc:	021b      	lsls	r3, r3, #8
 80111de:	b29a      	uxth	r2, r3
 80111e0:	697b      	ldr	r3, [r7, #20]
 80111e2:	0a1b      	lsrs	r3, r3, #8
 80111e4:	b2db      	uxtb	r3, r3
 80111e6:	4313      	orrs	r3, r2
 80111e8:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 80111ea:	697b      	ldr	r3, [r7, #20]
 80111ec:	b29b      	uxth	r3, r3
}
 80111ee:	4618      	mov	r0, r3
 80111f0:	3724      	adds	r7, #36	; 0x24
 80111f2:	46bd      	mov	sp, r7
 80111f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111f8:	4770      	bx	lr

080111fa <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 80111fa:	b580      	push	{r7, lr}
 80111fc:	b082      	sub	sp, #8
 80111fe:	af00      	add	r7, sp, #0
 8011200:	6078      	str	r0, [r7, #4]
 8011202:	460b      	mov	r3, r1
 8011204:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 8011206:	887b      	ldrh	r3, [r7, #2]
 8011208:	4619      	mov	r1, r3
 801120a:	6878      	ldr	r0, [r7, #4]
 801120c:	f7ff ff98 	bl	8011140 <lwip_standard_chksum>
 8011210:	4603      	mov	r3, r0
 8011212:	43db      	mvns	r3, r3
 8011214:	b29b      	uxth	r3, r3
}
 8011216:	4618      	mov	r0, r3
 8011218:	3708      	adds	r7, #8
 801121a:	46bd      	mov	sp, r7
 801121c:	bd80      	pop	{r7, pc}

0801121e <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 801121e:	b580      	push	{r7, lr}
 8011220:	b086      	sub	sp, #24
 8011222:	af00      	add	r7, sp, #0
 8011224:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 8011226:	2300      	movs	r3, #0
 8011228:	60fb      	str	r3, [r7, #12]

  acc = 0;
 801122a:	2300      	movs	r3, #0
 801122c:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	613b      	str	r3, [r7, #16]
 8011232:	e02b      	b.n	801128c <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 8011234:	693b      	ldr	r3, [r7, #16]
 8011236:	685a      	ldr	r2, [r3, #4]
 8011238:	693b      	ldr	r3, [r7, #16]
 801123a:	895b      	ldrh	r3, [r3, #10]
 801123c:	4619      	mov	r1, r3
 801123e:	4610      	mov	r0, r2
 8011240:	f7ff ff7e 	bl	8011140 <lwip_standard_chksum>
 8011244:	4603      	mov	r3, r0
 8011246:	461a      	mov	r2, r3
 8011248:	697b      	ldr	r3, [r7, #20]
 801124a:	4413      	add	r3, r2
 801124c:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 801124e:	697b      	ldr	r3, [r7, #20]
 8011250:	0c1a      	lsrs	r2, r3, #16
 8011252:	697b      	ldr	r3, [r7, #20]
 8011254:	b29b      	uxth	r3, r3
 8011256:	4413      	add	r3, r2
 8011258:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 801125a:	693b      	ldr	r3, [r7, #16]
 801125c:	895b      	ldrh	r3, [r3, #10]
 801125e:	f003 0301 	and.w	r3, r3, #1
 8011262:	b29b      	uxth	r3, r3
 8011264:	2b00      	cmp	r3, #0
 8011266:	d00e      	beq.n	8011286 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 8011268:	68fb      	ldr	r3, [r7, #12]
 801126a:	2b00      	cmp	r3, #0
 801126c:	bf0c      	ite	eq
 801126e:	2301      	moveq	r3, #1
 8011270:	2300      	movne	r3, #0
 8011272:	b2db      	uxtb	r3, r3
 8011274:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 8011276:	697b      	ldr	r3, [r7, #20]
 8011278:	021b      	lsls	r3, r3, #8
 801127a:	b29a      	uxth	r2, r3
 801127c:	697b      	ldr	r3, [r7, #20]
 801127e:	0a1b      	lsrs	r3, r3, #8
 8011280:	b2db      	uxtb	r3, r3
 8011282:	4313      	orrs	r3, r2
 8011284:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8011286:	693b      	ldr	r3, [r7, #16]
 8011288:	681b      	ldr	r3, [r3, #0]
 801128a:	613b      	str	r3, [r7, #16]
 801128c:	693b      	ldr	r3, [r7, #16]
 801128e:	2b00      	cmp	r3, #0
 8011290:	d1d0      	bne.n	8011234 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 8011292:	68fb      	ldr	r3, [r7, #12]
 8011294:	2b00      	cmp	r3, #0
 8011296:	d007      	beq.n	80112a8 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 8011298:	697b      	ldr	r3, [r7, #20]
 801129a:	021b      	lsls	r3, r3, #8
 801129c:	b29a      	uxth	r2, r3
 801129e:	697b      	ldr	r3, [r7, #20]
 80112a0:	0a1b      	lsrs	r3, r3, #8
 80112a2:	b2db      	uxtb	r3, r3
 80112a4:	4313      	orrs	r3, r2
 80112a6:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 80112a8:	697b      	ldr	r3, [r7, #20]
 80112aa:	b29b      	uxth	r3, r3
 80112ac:	43db      	mvns	r3, r3
 80112ae:	b29b      	uxth	r3, r3
}
 80112b0:	4618      	mov	r0, r3
 80112b2:	3718      	adds	r7, #24
 80112b4:	46bd      	mov	sp, r7
 80112b6:	bd80      	pop	{r7, pc}

080112b8 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80112b8:	b580      	push	{r7, lr}
 80112ba:	b082      	sub	sp, #8
 80112bc:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80112be:	2300      	movs	r3, #0
 80112c0:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 80112c2:	f004 fb9f 	bl	8015a04 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 80112c6:	f001 fb15 	bl	80128f4 <mem_init>
  memp_init();
 80112ca:	f001 fe79 	bl	8012fc0 <memp_init>
  pbuf_init();
  netif_init();
 80112ce:	f002 f817 	bl	8013300 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80112d2:	f00a ff89 	bl	801c1e8 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80112d6:	f004 fc1f 	bl	8015b18 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80112da:	f00a fecd 	bl	801c078 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80112de:	bf00      	nop
 80112e0:	3708      	adds	r7, #8
 80112e2:	46bd      	mov	sp, r7
 80112e4:	bd80      	pop	{r7, pc}
	...

080112e8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80112e8:	b480      	push	{r7}
 80112ea:	b085      	sub	sp, #20
 80112ec:	af00      	add	r7, sp, #0
 80112ee:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80112f0:	4b33      	ldr	r3, [pc, #204]	; (80113c0 <ip4_route+0xd8>)
 80112f2:	681b      	ldr	r3, [r3, #0]
 80112f4:	60fb      	str	r3, [r7, #12]
 80112f6:	e036      	b.n	8011366 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80112f8:	68fb      	ldr	r3, [r7, #12]
 80112fa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80112fe:	f003 0301 	and.w	r3, r3, #1
 8011302:	b2db      	uxtb	r3, r3
 8011304:	2b00      	cmp	r3, #0
 8011306:	d02b      	beq.n	8011360 <ip4_route+0x78>
 8011308:	68fb      	ldr	r3, [r7, #12]
 801130a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801130e:	089b      	lsrs	r3, r3, #2
 8011310:	f003 0301 	and.w	r3, r3, #1
 8011314:	b2db      	uxtb	r3, r3
 8011316:	2b00      	cmp	r3, #0
 8011318:	d022      	beq.n	8011360 <ip4_route+0x78>
 801131a:	68fb      	ldr	r3, [r7, #12]
 801131c:	3304      	adds	r3, #4
 801131e:	681b      	ldr	r3, [r3, #0]
 8011320:	2b00      	cmp	r3, #0
 8011322:	d01d      	beq.n	8011360 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	681a      	ldr	r2, [r3, #0]
 8011328:	68fb      	ldr	r3, [r7, #12]
 801132a:	3304      	adds	r3, #4
 801132c:	681b      	ldr	r3, [r3, #0]
 801132e:	405a      	eors	r2, r3
 8011330:	68fb      	ldr	r3, [r7, #12]
 8011332:	3308      	adds	r3, #8
 8011334:	681b      	ldr	r3, [r3, #0]
 8011336:	4013      	ands	r3, r2
 8011338:	2b00      	cmp	r3, #0
 801133a:	d101      	bne.n	8011340 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801133c:	68fb      	ldr	r3, [r7, #12]
 801133e:	e038      	b.n	80113b2 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8011340:	68fb      	ldr	r3, [r7, #12]
 8011342:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011346:	f003 0302 	and.w	r3, r3, #2
 801134a:	2b00      	cmp	r3, #0
 801134c:	d108      	bne.n	8011360 <ip4_route+0x78>
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	681a      	ldr	r2, [r3, #0]
 8011352:	68fb      	ldr	r3, [r7, #12]
 8011354:	330c      	adds	r3, #12
 8011356:	681b      	ldr	r3, [r3, #0]
 8011358:	429a      	cmp	r2, r3
 801135a:	d101      	bne.n	8011360 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801135c:	68fb      	ldr	r3, [r7, #12]
 801135e:	e028      	b.n	80113b2 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8011360:	68fb      	ldr	r3, [r7, #12]
 8011362:	681b      	ldr	r3, [r3, #0]
 8011364:	60fb      	str	r3, [r7, #12]
 8011366:	68fb      	ldr	r3, [r7, #12]
 8011368:	2b00      	cmp	r3, #0
 801136a:	d1c5      	bne.n	80112f8 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801136c:	4b15      	ldr	r3, [pc, #84]	; (80113c4 <ip4_route+0xdc>)
 801136e:	681b      	ldr	r3, [r3, #0]
 8011370:	2b00      	cmp	r3, #0
 8011372:	d01a      	beq.n	80113aa <ip4_route+0xc2>
 8011374:	4b13      	ldr	r3, [pc, #76]	; (80113c4 <ip4_route+0xdc>)
 8011376:	681b      	ldr	r3, [r3, #0]
 8011378:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801137c:	f003 0301 	and.w	r3, r3, #1
 8011380:	2b00      	cmp	r3, #0
 8011382:	d012      	beq.n	80113aa <ip4_route+0xc2>
 8011384:	4b0f      	ldr	r3, [pc, #60]	; (80113c4 <ip4_route+0xdc>)
 8011386:	681b      	ldr	r3, [r3, #0]
 8011388:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801138c:	f003 0304 	and.w	r3, r3, #4
 8011390:	2b00      	cmp	r3, #0
 8011392:	d00a      	beq.n	80113aa <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8011394:	4b0b      	ldr	r3, [pc, #44]	; (80113c4 <ip4_route+0xdc>)
 8011396:	681b      	ldr	r3, [r3, #0]
 8011398:	3304      	adds	r3, #4
 801139a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801139c:	2b00      	cmp	r3, #0
 801139e:	d004      	beq.n	80113aa <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	681b      	ldr	r3, [r3, #0]
 80113a4:	b2db      	uxtb	r3, r3
 80113a6:	2b7f      	cmp	r3, #127	; 0x7f
 80113a8:	d101      	bne.n	80113ae <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80113aa:	2300      	movs	r3, #0
 80113ac:	e001      	b.n	80113b2 <ip4_route+0xca>
  }

  return netif_default;
 80113ae:	4b05      	ldr	r3, [pc, #20]	; (80113c4 <ip4_route+0xdc>)
 80113b0:	681b      	ldr	r3, [r3, #0]
}
 80113b2:	4618      	mov	r0, r3
 80113b4:	3714      	adds	r7, #20
 80113b6:	46bd      	mov	sp, r7
 80113b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113bc:	4770      	bx	lr
 80113be:	bf00      	nop
 80113c0:	24048e68 	.word	0x24048e68
 80113c4:	24048e6c 	.word	0x24048e6c

080113c8 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80113c8:	b580      	push	{r7, lr}
 80113ca:	b082      	sub	sp, #8
 80113cc:	af00      	add	r7, sp, #0
 80113ce:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80113d6:	f003 0301 	and.w	r3, r3, #1
 80113da:	b2db      	uxtb	r3, r3
 80113dc:	2b00      	cmp	r3, #0
 80113de:	d016      	beq.n	801140e <ip4_input_accept+0x46>
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	3304      	adds	r3, #4
 80113e4:	681b      	ldr	r3, [r3, #0]
 80113e6:	2b00      	cmp	r3, #0
 80113e8:	d011      	beq.n	801140e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80113ea:	4b0b      	ldr	r3, [pc, #44]	; (8011418 <ip4_input_accept+0x50>)
 80113ec:	695a      	ldr	r2, [r3, #20]
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	3304      	adds	r3, #4
 80113f2:	681b      	ldr	r3, [r3, #0]
 80113f4:	429a      	cmp	r2, r3
 80113f6:	d008      	beq.n	801140a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80113f8:	4b07      	ldr	r3, [pc, #28]	; (8011418 <ip4_input_accept+0x50>)
 80113fa:	695b      	ldr	r3, [r3, #20]
 80113fc:	6879      	ldr	r1, [r7, #4]
 80113fe:	4618      	mov	r0, r3
 8011400:	f000 fa06 	bl	8011810 <ip4_addr_isbroadcast_u32>
 8011404:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8011406:	2b00      	cmp	r3, #0
 8011408:	d001      	beq.n	801140e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801140a:	2301      	movs	r3, #1
 801140c:	e000      	b.n	8011410 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801140e:	2300      	movs	r3, #0
}
 8011410:	4618      	mov	r0, r3
 8011412:	3708      	adds	r7, #8
 8011414:	46bd      	mov	sp, r7
 8011416:	bd80      	pop	{r7, pc}
 8011418:	24045db8 	.word	0x24045db8

0801141c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801141c:	b580      	push	{r7, lr}
 801141e:	b086      	sub	sp, #24
 8011420:	af00      	add	r7, sp, #0
 8011422:	6078      	str	r0, [r7, #4]
 8011424:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	685b      	ldr	r3, [r3, #4]
 801142a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 801142c:	697b      	ldr	r3, [r7, #20]
 801142e:	781b      	ldrb	r3, [r3, #0]
 8011430:	091b      	lsrs	r3, r3, #4
 8011432:	b2db      	uxtb	r3, r3
 8011434:	2b04      	cmp	r3, #4
 8011436:	d004      	beq.n	8011442 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8011438:	6878      	ldr	r0, [r7, #4]
 801143a:	f002 fe09 	bl	8014050 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801143e:	2300      	movs	r3, #0
 8011440:	e105      	b.n	801164e <ip4_input+0x232>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8011442:	697b      	ldr	r3, [r7, #20]
 8011444:	781b      	ldrb	r3, [r3, #0]
 8011446:	f003 030f 	and.w	r3, r3, #15
 801144a:	b2db      	uxtb	r3, r3
 801144c:	009b      	lsls	r3, r3, #2
 801144e:	b2db      	uxtb	r3, r3
 8011450:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8011452:	697b      	ldr	r3, [r7, #20]
 8011454:	885b      	ldrh	r3, [r3, #2]
 8011456:	b29b      	uxth	r3, r3
 8011458:	4618      	mov	r0, r3
 801145a:	f7fe fc4f 	bl	800fcfc <lwip_htons>
 801145e:	4603      	mov	r3, r0
 8011460:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	891b      	ldrh	r3, [r3, #8]
 8011466:	89ba      	ldrh	r2, [r7, #12]
 8011468:	429a      	cmp	r2, r3
 801146a:	d204      	bcs.n	8011476 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 801146c:	89bb      	ldrh	r3, [r7, #12]
 801146e:	4619      	mov	r1, r3
 8011470:	6878      	ldr	r0, [r7, #4]
 8011472:	f002 fc35 	bl	8013ce0 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	895b      	ldrh	r3, [r3, #10]
 801147a:	89fa      	ldrh	r2, [r7, #14]
 801147c:	429a      	cmp	r2, r3
 801147e:	d807      	bhi.n	8011490 <ip4_input+0x74>
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	891b      	ldrh	r3, [r3, #8]
 8011484:	89ba      	ldrh	r2, [r7, #12]
 8011486:	429a      	cmp	r2, r3
 8011488:	d802      	bhi.n	8011490 <ip4_input+0x74>
 801148a:	89fb      	ldrh	r3, [r7, #14]
 801148c:	2b13      	cmp	r3, #19
 801148e:	d804      	bhi.n	801149a <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8011490:	6878      	ldr	r0, [r7, #4]
 8011492:	f002 fddd 	bl	8014050 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8011496:	2300      	movs	r3, #0
 8011498:	e0d9      	b.n	801164e <ip4_input+0x232>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801149a:	697b      	ldr	r3, [r7, #20]
 801149c:	691b      	ldr	r3, [r3, #16]
 801149e:	4a6e      	ldr	r2, [pc, #440]	; (8011658 <ip4_input+0x23c>)
 80114a0:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80114a2:	697b      	ldr	r3, [r7, #20]
 80114a4:	68db      	ldr	r3, [r3, #12]
 80114a6:	4a6c      	ldr	r2, [pc, #432]	; (8011658 <ip4_input+0x23c>)
 80114a8:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80114aa:	4b6b      	ldr	r3, [pc, #428]	; (8011658 <ip4_input+0x23c>)
 80114ac:	695b      	ldr	r3, [r3, #20]
 80114ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80114b2:	2be0      	cmp	r3, #224	; 0xe0
 80114b4:	d112      	bne.n	80114dc <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80114b6:	683b      	ldr	r3, [r7, #0]
 80114b8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80114bc:	f003 0301 	and.w	r3, r3, #1
 80114c0:	b2db      	uxtb	r3, r3
 80114c2:	2b00      	cmp	r3, #0
 80114c4:	d007      	beq.n	80114d6 <ip4_input+0xba>
 80114c6:	683b      	ldr	r3, [r7, #0]
 80114c8:	3304      	adds	r3, #4
 80114ca:	681b      	ldr	r3, [r3, #0]
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	d002      	beq.n	80114d6 <ip4_input+0xba>
      netif = inp;
 80114d0:	683b      	ldr	r3, [r7, #0]
 80114d2:	613b      	str	r3, [r7, #16]
 80114d4:	e02a      	b.n	801152c <ip4_input+0x110>
    } else {
      netif = NULL;
 80114d6:	2300      	movs	r3, #0
 80114d8:	613b      	str	r3, [r7, #16]
 80114da:	e027      	b.n	801152c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80114dc:	6838      	ldr	r0, [r7, #0]
 80114de:	f7ff ff73 	bl	80113c8 <ip4_input_accept>
 80114e2:	4603      	mov	r3, r0
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	d002      	beq.n	80114ee <ip4_input+0xd2>
      netif = inp;
 80114e8:	683b      	ldr	r3, [r7, #0]
 80114ea:	613b      	str	r3, [r7, #16]
 80114ec:	e01e      	b.n	801152c <ip4_input+0x110>
    } else {
      netif = NULL;
 80114ee:	2300      	movs	r3, #0
 80114f0:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80114f2:	4b59      	ldr	r3, [pc, #356]	; (8011658 <ip4_input+0x23c>)
 80114f4:	695b      	ldr	r3, [r3, #20]
 80114f6:	b2db      	uxtb	r3, r3
 80114f8:	2b7f      	cmp	r3, #127	; 0x7f
 80114fa:	d017      	beq.n	801152c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80114fc:	4b57      	ldr	r3, [pc, #348]	; (801165c <ip4_input+0x240>)
 80114fe:	681b      	ldr	r3, [r3, #0]
 8011500:	613b      	str	r3, [r7, #16]
 8011502:	e00e      	b.n	8011522 <ip4_input+0x106>
          if (netif == inp) {
 8011504:	693a      	ldr	r2, [r7, #16]
 8011506:	683b      	ldr	r3, [r7, #0]
 8011508:	429a      	cmp	r2, r3
 801150a:	d006      	beq.n	801151a <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801150c:	6938      	ldr	r0, [r7, #16]
 801150e:	f7ff ff5b 	bl	80113c8 <ip4_input_accept>
 8011512:	4603      	mov	r3, r0
 8011514:	2b00      	cmp	r3, #0
 8011516:	d108      	bne.n	801152a <ip4_input+0x10e>
 8011518:	e000      	b.n	801151c <ip4_input+0x100>
            continue;
 801151a:	bf00      	nop
        NETIF_FOREACH(netif) {
 801151c:	693b      	ldr	r3, [r7, #16]
 801151e:	681b      	ldr	r3, [r3, #0]
 8011520:	613b      	str	r3, [r7, #16]
 8011522:	693b      	ldr	r3, [r7, #16]
 8011524:	2b00      	cmp	r3, #0
 8011526:	d1ed      	bne.n	8011504 <ip4_input+0xe8>
 8011528:	e000      	b.n	801152c <ip4_input+0x110>
            break;
 801152a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801152c:	4b4a      	ldr	r3, [pc, #296]	; (8011658 <ip4_input+0x23c>)
 801152e:	691b      	ldr	r3, [r3, #16]
 8011530:	6839      	ldr	r1, [r7, #0]
 8011532:	4618      	mov	r0, r3
 8011534:	f000 f96c 	bl	8011810 <ip4_addr_isbroadcast_u32>
 8011538:	4603      	mov	r3, r0
 801153a:	2b00      	cmp	r3, #0
 801153c:	d105      	bne.n	801154a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801153e:	4b46      	ldr	r3, [pc, #280]	; (8011658 <ip4_input+0x23c>)
 8011540:	691b      	ldr	r3, [r3, #16]
 8011542:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8011546:	2be0      	cmp	r3, #224	; 0xe0
 8011548:	d104      	bne.n	8011554 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801154a:	6878      	ldr	r0, [r7, #4]
 801154c:	f002 fd80 	bl	8014050 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8011550:	2300      	movs	r3, #0
 8011552:	e07c      	b.n	801164e <ip4_input+0x232>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8011554:	693b      	ldr	r3, [r7, #16]
 8011556:	2b00      	cmp	r3, #0
 8011558:	d104      	bne.n	8011564 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801155a:	6878      	ldr	r0, [r7, #4]
 801155c:	f002 fd78 	bl	8014050 <pbuf_free>
    return ERR_OK;
 8011560:	2300      	movs	r3, #0
 8011562:	e074      	b.n	801164e <ip4_input+0x232>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8011564:	697b      	ldr	r3, [r7, #20]
 8011566:	88db      	ldrh	r3, [r3, #6]
 8011568:	b29b      	uxth	r3, r3
 801156a:	461a      	mov	r2, r3
 801156c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8011570:	4013      	ands	r3, r2
 8011572:	2b00      	cmp	r3, #0
 8011574:	d00b      	beq.n	801158e <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8011576:	6878      	ldr	r0, [r7, #4]
 8011578:	f000 fdc2 	bl	8012100 <ip4_reass>
 801157c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	2b00      	cmp	r3, #0
 8011582:	d101      	bne.n	8011588 <ip4_input+0x16c>
      return ERR_OK;
 8011584:	2300      	movs	r3, #0
 8011586:	e062      	b.n	801164e <ip4_input+0x232>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	685b      	ldr	r3, [r3, #4]
 801158c:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801158e:	4a32      	ldr	r2, [pc, #200]	; (8011658 <ip4_input+0x23c>)
 8011590:	693b      	ldr	r3, [r7, #16]
 8011592:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8011594:	4a30      	ldr	r2, [pc, #192]	; (8011658 <ip4_input+0x23c>)
 8011596:	683b      	ldr	r3, [r7, #0]
 8011598:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801159a:	4a2f      	ldr	r2, [pc, #188]	; (8011658 <ip4_input+0x23c>)
 801159c:	697b      	ldr	r3, [r7, #20]
 801159e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80115a0:	697b      	ldr	r3, [r7, #20]
 80115a2:	781b      	ldrb	r3, [r3, #0]
 80115a4:	f003 030f 	and.w	r3, r3, #15
 80115a8:	b2db      	uxtb	r3, r3
 80115aa:	009b      	lsls	r3, r3, #2
 80115ac:	b2db      	uxtb	r3, r3
 80115ae:	b29a      	uxth	r2, r3
 80115b0:	4b29      	ldr	r3, [pc, #164]	; (8011658 <ip4_input+0x23c>)
 80115b2:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80115b4:	89fb      	ldrh	r3, [r7, #14]
 80115b6:	4619      	mov	r1, r3
 80115b8:	6878      	ldr	r0, [r7, #4]
 80115ba:	f002 fc91 	bl	8013ee0 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80115be:	697b      	ldr	r3, [r7, #20]
 80115c0:	7a5b      	ldrb	r3, [r3, #9]
 80115c2:	2b06      	cmp	r3, #6
 80115c4:	d009      	beq.n	80115da <ip4_input+0x1be>
 80115c6:	2b11      	cmp	r3, #17
 80115c8:	d002      	beq.n	80115d0 <ip4_input+0x1b4>
 80115ca:	2b01      	cmp	r3, #1
 80115cc:	d00a      	beq.n	80115e4 <ip4_input+0x1c8>
 80115ce:	e00e      	b.n	80115ee <ip4_input+0x1d2>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80115d0:	6839      	ldr	r1, [r7, #0]
 80115d2:	6878      	ldr	r0, [r7, #4]
 80115d4:	f00a feb6 	bl	801c344 <udp_input>
        break;
 80115d8:	e026      	b.n	8011628 <ip4_input+0x20c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80115da:	6839      	ldr	r1, [r7, #0]
 80115dc:	6878      	ldr	r0, [r7, #4]
 80115de:	f006 f8af 	bl	8017740 <tcp_input>
        break;
 80115e2:	e021      	b.n	8011628 <ip4_input+0x20c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80115e4:	6839      	ldr	r1, [r7, #0]
 80115e6:	6878      	ldr	r0, [r7, #4]
 80115e8:	f7ff fbf6 	bl	8010dd8 <icmp_input>
        break;
 80115ec:	e01c      	b.n	8011628 <ip4_input+0x20c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80115ee:	4b1a      	ldr	r3, [pc, #104]	; (8011658 <ip4_input+0x23c>)
 80115f0:	695b      	ldr	r3, [r3, #20]
 80115f2:	6939      	ldr	r1, [r7, #16]
 80115f4:	4618      	mov	r0, r3
 80115f6:	f000 f90b 	bl	8011810 <ip4_addr_isbroadcast_u32>
 80115fa:	4603      	mov	r3, r0
 80115fc:	2b00      	cmp	r3, #0
 80115fe:	d10f      	bne.n	8011620 <ip4_input+0x204>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011600:	4b15      	ldr	r3, [pc, #84]	; (8011658 <ip4_input+0x23c>)
 8011602:	695b      	ldr	r3, [r3, #20]
 8011604:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8011608:	2be0      	cmp	r3, #224	; 0xe0
 801160a:	d009      	beq.n	8011620 <ip4_input+0x204>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801160c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8011610:	4619      	mov	r1, r3
 8011612:	6878      	ldr	r0, [r7, #4]
 8011614:	f002 fcd7 	bl	8013fc6 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8011618:	2102      	movs	r1, #2
 801161a:	6878      	ldr	r0, [r7, #4]
 801161c:	f7ff fcfc 	bl	8011018 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8011620:	6878      	ldr	r0, [r7, #4]
 8011622:	f002 fd15 	bl	8014050 <pbuf_free>
        break;
 8011626:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8011628:	4b0b      	ldr	r3, [pc, #44]	; (8011658 <ip4_input+0x23c>)
 801162a:	2200      	movs	r2, #0
 801162c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801162e:	4b0a      	ldr	r3, [pc, #40]	; (8011658 <ip4_input+0x23c>)
 8011630:	2200      	movs	r2, #0
 8011632:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8011634:	4b08      	ldr	r3, [pc, #32]	; (8011658 <ip4_input+0x23c>)
 8011636:	2200      	movs	r2, #0
 8011638:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801163a:	4b07      	ldr	r3, [pc, #28]	; (8011658 <ip4_input+0x23c>)
 801163c:	2200      	movs	r2, #0
 801163e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8011640:	4b05      	ldr	r3, [pc, #20]	; (8011658 <ip4_input+0x23c>)
 8011642:	2200      	movs	r2, #0
 8011644:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8011646:	4b04      	ldr	r3, [pc, #16]	; (8011658 <ip4_input+0x23c>)
 8011648:	2200      	movs	r2, #0
 801164a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801164c:	2300      	movs	r3, #0
}
 801164e:	4618      	mov	r0, r3
 8011650:	3718      	adds	r7, #24
 8011652:	46bd      	mov	sp, r7
 8011654:	bd80      	pop	{r7, pc}
 8011656:	bf00      	nop
 8011658:	24045db8 	.word	0x24045db8
 801165c:	24048e68 	.word	0x24048e68

08011660 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8011660:	b580      	push	{r7, lr}
 8011662:	b08a      	sub	sp, #40	; 0x28
 8011664:	af04      	add	r7, sp, #16
 8011666:	60f8      	str	r0, [r7, #12]
 8011668:	60b9      	str	r1, [r7, #8]
 801166a:	607a      	str	r2, [r7, #4]
 801166c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801166e:	68bb      	ldr	r3, [r7, #8]
 8011670:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	2b00      	cmp	r3, #0
 8011676:	d009      	beq.n	801168c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8011678:	68bb      	ldr	r3, [r7, #8]
 801167a:	2b00      	cmp	r3, #0
 801167c:	d003      	beq.n	8011686 <ip4_output_if+0x26>
 801167e:	68bb      	ldr	r3, [r7, #8]
 8011680:	681b      	ldr	r3, [r3, #0]
 8011682:	2b00      	cmp	r3, #0
 8011684:	d102      	bne.n	801168c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8011686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011688:	3304      	adds	r3, #4
 801168a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801168c:	78fa      	ldrb	r2, [r7, #3]
 801168e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011690:	9302      	str	r3, [sp, #8]
 8011692:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011696:	9301      	str	r3, [sp, #4]
 8011698:	f897 3020 	ldrb.w	r3, [r7, #32]
 801169c:	9300      	str	r3, [sp, #0]
 801169e:	4613      	mov	r3, r2
 80116a0:	687a      	ldr	r2, [r7, #4]
 80116a2:	6979      	ldr	r1, [r7, #20]
 80116a4:	68f8      	ldr	r0, [r7, #12]
 80116a6:	f000 f805 	bl	80116b4 <ip4_output_if_src>
 80116aa:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80116ac:	4618      	mov	r0, r3
 80116ae:	3718      	adds	r7, #24
 80116b0:	46bd      	mov	sp, r7
 80116b2:	bd80      	pop	{r7, pc}

080116b4 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80116b4:	b580      	push	{r7, lr}
 80116b6:	b088      	sub	sp, #32
 80116b8:	af00      	add	r7, sp, #0
 80116ba:	60f8      	str	r0, [r7, #12]
 80116bc:	60b9      	str	r1, [r7, #8]
 80116be:	607a      	str	r2, [r7, #4]
 80116c0:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80116c2:	68fb      	ldr	r3, [r7, #12]
 80116c4:	7b9b      	ldrb	r3, [r3, #14]
 80116c6:	2b01      	cmp	r3, #1
 80116c8:	d006      	beq.n	80116d8 <ip4_output_if_src+0x24>
 80116ca:	4b4b      	ldr	r3, [pc, #300]	; (80117f8 <ip4_output_if_src+0x144>)
 80116cc:	f44f 7255 	mov.w	r2, #852	; 0x354
 80116d0:	494a      	ldr	r1, [pc, #296]	; (80117fc <ip4_output_if_src+0x148>)
 80116d2:	484b      	ldr	r0, [pc, #300]	; (8011800 <ip4_output_if_src+0x14c>)
 80116d4:	f00f fc3c 	bl	8020f50 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	2b00      	cmp	r3, #0
 80116dc:	d060      	beq.n	80117a0 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80116de:	2314      	movs	r3, #20
 80116e0:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80116e2:	2114      	movs	r1, #20
 80116e4:	68f8      	ldr	r0, [r7, #12]
 80116e6:	f002 fbeb 	bl	8013ec0 <pbuf_add_header>
 80116ea:	4603      	mov	r3, r0
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	d002      	beq.n	80116f6 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80116f0:	f06f 0301 	mvn.w	r3, #1
 80116f4:	e07c      	b.n	80117f0 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80116f6:	68fb      	ldr	r3, [r7, #12]
 80116f8:	685b      	ldr	r3, [r3, #4]
 80116fa:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80116fc:	68fb      	ldr	r3, [r7, #12]
 80116fe:	895b      	ldrh	r3, [r3, #10]
 8011700:	2b13      	cmp	r3, #19
 8011702:	d806      	bhi.n	8011712 <ip4_output_if_src+0x5e>
 8011704:	4b3c      	ldr	r3, [pc, #240]	; (80117f8 <ip4_output_if_src+0x144>)
 8011706:	f240 3289 	movw	r2, #905	; 0x389
 801170a:	493e      	ldr	r1, [pc, #248]	; (8011804 <ip4_output_if_src+0x150>)
 801170c:	483c      	ldr	r0, [pc, #240]	; (8011800 <ip4_output_if_src+0x14c>)
 801170e:	f00f fc1f 	bl	8020f50 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8011712:	69fb      	ldr	r3, [r7, #28]
 8011714:	78fa      	ldrb	r2, [r7, #3]
 8011716:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8011718:	69fb      	ldr	r3, [r7, #28]
 801171a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801171e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	681a      	ldr	r2, [r3, #0]
 8011724:	69fb      	ldr	r3, [r7, #28]
 8011726:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8011728:	8b7b      	ldrh	r3, [r7, #26]
 801172a:	089b      	lsrs	r3, r3, #2
 801172c:	b29b      	uxth	r3, r3
 801172e:	b2db      	uxtb	r3, r3
 8011730:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011734:	b2da      	uxtb	r2, r3
 8011736:	69fb      	ldr	r3, [r7, #28]
 8011738:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801173a:	69fb      	ldr	r3, [r7, #28]
 801173c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8011740:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8011742:	68fb      	ldr	r3, [r7, #12]
 8011744:	891b      	ldrh	r3, [r3, #8]
 8011746:	4618      	mov	r0, r3
 8011748:	f7fe fad8 	bl	800fcfc <lwip_htons>
 801174c:	4603      	mov	r3, r0
 801174e:	461a      	mov	r2, r3
 8011750:	69fb      	ldr	r3, [r7, #28]
 8011752:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8011754:	69fb      	ldr	r3, [r7, #28]
 8011756:	2200      	movs	r2, #0
 8011758:	719a      	strb	r2, [r3, #6]
 801175a:	2200      	movs	r2, #0
 801175c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801175e:	4b2a      	ldr	r3, [pc, #168]	; (8011808 <ip4_output_if_src+0x154>)
 8011760:	881b      	ldrh	r3, [r3, #0]
 8011762:	4618      	mov	r0, r3
 8011764:	f7fe faca 	bl	800fcfc <lwip_htons>
 8011768:	4603      	mov	r3, r0
 801176a:	461a      	mov	r2, r3
 801176c:	69fb      	ldr	r3, [r7, #28]
 801176e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8011770:	4b25      	ldr	r3, [pc, #148]	; (8011808 <ip4_output_if_src+0x154>)
 8011772:	881b      	ldrh	r3, [r3, #0]
 8011774:	3301      	adds	r3, #1
 8011776:	b29a      	uxth	r2, r3
 8011778:	4b23      	ldr	r3, [pc, #140]	; (8011808 <ip4_output_if_src+0x154>)
 801177a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801177c:	68bb      	ldr	r3, [r7, #8]
 801177e:	2b00      	cmp	r3, #0
 8011780:	d104      	bne.n	801178c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8011782:	4b22      	ldr	r3, [pc, #136]	; (801180c <ip4_output_if_src+0x158>)
 8011784:	681a      	ldr	r2, [r3, #0]
 8011786:	69fb      	ldr	r3, [r7, #28]
 8011788:	60da      	str	r2, [r3, #12]
 801178a:	e003      	b.n	8011794 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801178c:	68bb      	ldr	r3, [r7, #8]
 801178e:	681a      	ldr	r2, [r3, #0]
 8011790:	69fb      	ldr	r3, [r7, #28]
 8011792:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8011794:	69fb      	ldr	r3, [r7, #28]
 8011796:	2200      	movs	r2, #0
 8011798:	729a      	strb	r2, [r3, #10]
 801179a:	2200      	movs	r2, #0
 801179c:	72da      	strb	r2, [r3, #11]
 801179e:	e00f      	b.n	80117c0 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80117a0:	68fb      	ldr	r3, [r7, #12]
 80117a2:	895b      	ldrh	r3, [r3, #10]
 80117a4:	2b13      	cmp	r3, #19
 80117a6:	d802      	bhi.n	80117ae <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80117a8:	f06f 0301 	mvn.w	r3, #1
 80117ac:	e020      	b.n	80117f0 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80117ae:	68fb      	ldr	r3, [r7, #12]
 80117b0:	685b      	ldr	r3, [r3, #4]
 80117b2:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80117b4:	69fb      	ldr	r3, [r7, #28]
 80117b6:	691b      	ldr	r3, [r3, #16]
 80117b8:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80117ba:	f107 0314 	add.w	r3, r7, #20
 80117be:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80117c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117c2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	d00c      	beq.n	80117e2 <ip4_output_if_src+0x12e>
 80117c8:	68fb      	ldr	r3, [r7, #12]
 80117ca:	891a      	ldrh	r2, [r3, #8]
 80117cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117ce:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80117d0:	429a      	cmp	r2, r3
 80117d2:	d906      	bls.n	80117e2 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80117d4:	687a      	ldr	r2, [r7, #4]
 80117d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80117d8:	68f8      	ldr	r0, [r7, #12]
 80117da:	f000 fe7d 	bl	80124d8 <ip4_frag>
 80117de:	4603      	mov	r3, r0
 80117e0:	e006      	b.n	80117f0 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80117e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117e4:	695b      	ldr	r3, [r3, #20]
 80117e6:	687a      	ldr	r2, [r7, #4]
 80117e8:	68f9      	ldr	r1, [r7, #12]
 80117ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80117ec:	4798      	blx	r3
 80117ee:	4603      	mov	r3, r0
}
 80117f0:	4618      	mov	r0, r3
 80117f2:	3720      	adds	r7, #32
 80117f4:	46bd      	mov	sp, r7
 80117f6:	bd80      	pop	{r7, pc}
 80117f8:	08023f2c 	.word	0x08023f2c
 80117fc:	08023f80 	.word	0x08023f80
 8011800:	08023f8c 	.word	0x08023f8c
 8011804:	08023fb4 	.word	0x08023fb4
 8011808:	240406ca 	.word	0x240406ca
 801180c:	08026f44 	.word	0x08026f44

08011810 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8011810:	b480      	push	{r7}
 8011812:	b085      	sub	sp, #20
 8011814:	af00      	add	r7, sp, #0
 8011816:	6078      	str	r0, [r7, #4]
 8011818:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011824:	d002      	beq.n	801182c <ip4_addr_isbroadcast_u32+0x1c>
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	2b00      	cmp	r3, #0
 801182a:	d101      	bne.n	8011830 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801182c:	2301      	movs	r3, #1
 801182e:	e02a      	b.n	8011886 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8011830:	683b      	ldr	r3, [r7, #0]
 8011832:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011836:	f003 0302 	and.w	r3, r3, #2
 801183a:	2b00      	cmp	r3, #0
 801183c:	d101      	bne.n	8011842 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801183e:	2300      	movs	r3, #0
 8011840:	e021      	b.n	8011886 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8011842:	683b      	ldr	r3, [r7, #0]
 8011844:	3304      	adds	r3, #4
 8011846:	681b      	ldr	r3, [r3, #0]
 8011848:	687a      	ldr	r2, [r7, #4]
 801184a:	429a      	cmp	r2, r3
 801184c:	d101      	bne.n	8011852 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801184e:	2300      	movs	r3, #0
 8011850:	e019      	b.n	8011886 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8011852:	68fa      	ldr	r2, [r7, #12]
 8011854:	683b      	ldr	r3, [r7, #0]
 8011856:	3304      	adds	r3, #4
 8011858:	681b      	ldr	r3, [r3, #0]
 801185a:	405a      	eors	r2, r3
 801185c:	683b      	ldr	r3, [r7, #0]
 801185e:	3308      	adds	r3, #8
 8011860:	681b      	ldr	r3, [r3, #0]
 8011862:	4013      	ands	r3, r2
 8011864:	2b00      	cmp	r3, #0
 8011866:	d10d      	bne.n	8011884 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8011868:	683b      	ldr	r3, [r7, #0]
 801186a:	3308      	adds	r3, #8
 801186c:	681b      	ldr	r3, [r3, #0]
 801186e:	43da      	mvns	r2, r3
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8011874:	683b      	ldr	r3, [r7, #0]
 8011876:	3308      	adds	r3, #8
 8011878:	681b      	ldr	r3, [r3, #0]
 801187a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801187c:	429a      	cmp	r2, r3
 801187e:	d101      	bne.n	8011884 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8011880:	2301      	movs	r3, #1
 8011882:	e000      	b.n	8011886 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8011884:	2300      	movs	r3, #0
  }
}
 8011886:	4618      	mov	r0, r3
 8011888:	3714      	adds	r7, #20
 801188a:	46bd      	mov	sp, r7
 801188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011890:	4770      	bx	lr
	...

08011894 <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 8011894:	b5b0      	push	{r4, r5, r7, lr}
 8011896:	b08a      	sub	sp, #40	; 0x28
 8011898:	af00      	add	r7, sp, #0
 801189a:	6078      	str	r0, [r7, #4]
 801189c:	6039      	str	r1, [r7, #0]
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
 801189e:	f107 030c 	add.w	r3, r7, #12
 80118a2:	61fb      	str	r3, [r7, #28]

  c = *cp;
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	781b      	ldrb	r3, [r3, #0]
 80118a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!lwip_isdigit(c)) {
 80118ac:	f00e febc 	bl	8020628 <__locale_ctype_ptr>
 80118b0:	4602      	mov	r2, r0
 80118b2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80118b6:	3301      	adds	r3, #1
 80118b8:	4413      	add	r3, r2
 80118ba:	781b      	ldrb	r3, [r3, #0]
 80118bc:	f003 0304 	and.w	r3, r3, #4
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	d101      	bne.n	80118c8 <ip4addr_aton+0x34>
      return 0;
 80118c4:	2300      	movs	r3, #0
 80118c6:	e10d      	b.n	8011ae4 <ip4addr_aton+0x250>
    }
    val = 0;
 80118c8:	2300      	movs	r3, #0
 80118ca:	627b      	str	r3, [r7, #36]	; 0x24
    base = 10;
 80118cc:	230a      	movs	r3, #10
 80118ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (c == '0') {
 80118d2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80118d6:	2b30      	cmp	r3, #48	; 0x30
 80118d8:	d11c      	bne.n	8011914 <ip4addr_aton+0x80>
      c = *++cp;
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	3301      	adds	r3, #1
 80118de:	607b      	str	r3, [r7, #4]
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	781b      	ldrb	r3, [r3, #0]
 80118e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (c == 'x' || c == 'X') {
 80118e8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80118ec:	2b78      	cmp	r3, #120	; 0x78
 80118ee:	d003      	beq.n	80118f8 <ip4addr_aton+0x64>
 80118f0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80118f4:	2b58      	cmp	r3, #88	; 0x58
 80118f6:	d10a      	bne.n	801190e <ip4addr_aton+0x7a>
        base = 16;
 80118f8:	2310      	movs	r3, #16
 80118fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        c = *++cp;
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	3301      	adds	r3, #1
 8011902:	607b      	str	r3, [r7, #4]
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	781b      	ldrb	r3, [r3, #0]
 8011908:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 801190c:	e002      	b.n	8011914 <ip4addr_aton+0x80>
      } else {
        base = 8;
 801190e:	2308      	movs	r3, #8
 8011910:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      }
    }
    for (;;) {
      if (lwip_isdigit(c)) {
 8011914:	f00e fe88 	bl	8020628 <__locale_ctype_ptr>
 8011918:	4602      	mov	r2, r0
 801191a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801191e:	3301      	adds	r3, #1
 8011920:	4413      	add	r3, r2
 8011922:	781b      	ldrb	r3, [r3, #0]
 8011924:	f003 0304 	and.w	r3, r3, #4
 8011928:	2b00      	cmp	r3, #0
 801192a:	d011      	beq.n	8011950 <ip4addr_aton+0xbc>
        val = (val * base) + (u32_t)(c - '0');
 801192c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8011930:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011932:	fb02 f203 	mul.w	r2, r2, r3
 8011936:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801193a:	4413      	add	r3, r2
 801193c:	3b30      	subs	r3, #48	; 0x30
 801193e:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	3301      	adds	r3, #1
 8011944:	607b      	str	r3, [r7, #4]
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	781b      	ldrb	r3, [r3, #0]
 801194a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 801194e:	e7e1      	b.n	8011914 <ip4addr_aton+0x80>
      } else if (base == 16 && lwip_isxdigit(c)) {
 8011950:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8011954:	2b10      	cmp	r3, #16
 8011956:	d12b      	bne.n	80119b0 <ip4addr_aton+0x11c>
 8011958:	f00e fe66 	bl	8020628 <__locale_ctype_ptr>
 801195c:	4602      	mov	r2, r0
 801195e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011962:	3301      	adds	r3, #1
 8011964:	4413      	add	r3, r2
 8011966:	781b      	ldrb	r3, [r3, #0]
 8011968:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801196c:	2b00      	cmp	r3, #0
 801196e:	d01f      	beq.n	80119b0 <ip4addr_aton+0x11c>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 8011970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011972:	011c      	lsls	r4, r3, #4
 8011974:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011978:	f103 050a 	add.w	r5, r3, #10
 801197c:	f00e fe54 	bl	8020628 <__locale_ctype_ptr>
 8011980:	4602      	mov	r2, r0
 8011982:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011986:	3301      	adds	r3, #1
 8011988:	4413      	add	r3, r2
 801198a:	781b      	ldrb	r3, [r3, #0]
 801198c:	f003 0303 	and.w	r3, r3, #3
 8011990:	2b02      	cmp	r3, #2
 8011992:	d101      	bne.n	8011998 <ip4addr_aton+0x104>
 8011994:	2361      	movs	r3, #97	; 0x61
 8011996:	e000      	b.n	801199a <ip4addr_aton+0x106>
 8011998:	2341      	movs	r3, #65	; 0x41
 801199a:	1aeb      	subs	r3, r5, r3
 801199c:	4323      	orrs	r3, r4
 801199e:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	3301      	adds	r3, #1
 80119a4:	607b      	str	r3, [r7, #4]
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	781b      	ldrb	r3, [r3, #0]
 80119aa:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (lwip_isdigit(c)) {
 80119ae:	e7b1      	b.n	8011914 <ip4addr_aton+0x80>
      } else {
        break;
      }
    }
    if (c == '.') {
 80119b0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80119b4:	2b2e      	cmp	r3, #46	; 0x2e
 80119b6:	d114      	bne.n	80119e2 <ip4addr_aton+0x14e>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 80119b8:	f107 030c 	add.w	r3, r7, #12
 80119bc:	330c      	adds	r3, #12
 80119be:	69fa      	ldr	r2, [r7, #28]
 80119c0:	429a      	cmp	r2, r3
 80119c2:	d301      	bcc.n	80119c8 <ip4addr_aton+0x134>
        return 0;
 80119c4:	2300      	movs	r3, #0
 80119c6:	e08d      	b.n	8011ae4 <ip4addr_aton+0x250>
      }
      *pp++ = val;
 80119c8:	69fb      	ldr	r3, [r7, #28]
 80119ca:	1d1a      	adds	r2, r3, #4
 80119cc:	61fa      	str	r2, [r7, #28]
 80119ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80119d0:	601a      	str	r2, [r3, #0]
      c = *++cp;
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	3301      	adds	r3, #1
 80119d6:	607b      	str	r3, [r7, #4]
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	781b      	ldrb	r3, [r3, #0]
 80119dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (!lwip_isdigit(c)) {
 80119e0:	e764      	b.n	80118ac <ip4addr_aton+0x18>
    } else {
      break;
 80119e2:	bf00      	nop
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !lwip_isspace(c)) {
 80119e4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80119e8:	2b00      	cmp	r3, #0
 80119ea:	d00d      	beq.n	8011a08 <ip4addr_aton+0x174>
 80119ec:	f00e fe1c 	bl	8020628 <__locale_ctype_ptr>
 80119f0:	4602      	mov	r2, r0
 80119f2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80119f6:	3301      	adds	r3, #1
 80119f8:	4413      	add	r3, r2
 80119fa:	781b      	ldrb	r3, [r3, #0]
 80119fc:	f003 0308 	and.w	r3, r3, #8
 8011a00:	2b00      	cmp	r3, #0
 8011a02:	d101      	bne.n	8011a08 <ip4addr_aton+0x174>
    return 0;
 8011a04:	2300      	movs	r3, #0
 8011a06:	e06d      	b.n	8011ae4 <ip4addr_aton+0x250>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 8011a08:	69fa      	ldr	r2, [r7, #28]
 8011a0a:	f107 030c 	add.w	r3, r7, #12
 8011a0e:	1ad3      	subs	r3, r2, r3
 8011a10:	109b      	asrs	r3, r3, #2
 8011a12:	3301      	adds	r3, #1
 8011a14:	2b04      	cmp	r3, #4
 8011a16:	d853      	bhi.n	8011ac0 <ip4addr_aton+0x22c>
 8011a18:	a201      	add	r2, pc, #4	; (adr r2, 8011a20 <ip4addr_aton+0x18c>)
 8011a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011a1e:	bf00      	nop
 8011a20:	08011a35 	.word	0x08011a35
 8011a24:	08011acf 	.word	0x08011acf
 8011a28:	08011a39 	.word	0x08011a39
 8011a2c:	08011a5b 	.word	0x08011a5b
 8011a30:	08011a89 	.word	0x08011a89

    case 0:
      return 0;       /* initial nondigit */
 8011a34:	2300      	movs	r3, #0
 8011a36:	e055      	b.n	8011ae4 <ip4addr_aton+0x250>

    case 1:             /* a -- 32 bits */
      break;

    case 2:             /* a.b -- 8.24 bits */
      if (val > 0xffffffUL) {
 8011a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a3a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8011a3e:	d301      	bcc.n	8011a44 <ip4addr_aton+0x1b0>
        return 0;
 8011a40:	2300      	movs	r3, #0
 8011a42:	e04f      	b.n	8011ae4 <ip4addr_aton+0x250>
      }
      if (parts[0] > 0xff) {
 8011a44:	68fb      	ldr	r3, [r7, #12]
 8011a46:	2bff      	cmp	r3, #255	; 0xff
 8011a48:	d901      	bls.n	8011a4e <ip4addr_aton+0x1ba>
        return 0;
 8011a4a:	2300      	movs	r3, #0
 8011a4c:	e04a      	b.n	8011ae4 <ip4addr_aton+0x250>
      }
      val |= parts[0] << 24;
 8011a4e:	68fb      	ldr	r3, [r7, #12]
 8011a50:	061b      	lsls	r3, r3, #24
 8011a52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011a54:	4313      	orrs	r3, r2
 8011a56:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8011a58:	e03a      	b.n	8011ad0 <ip4addr_aton+0x23c>

    case 3:             /* a.b.c -- 8.8.16 bits */
      if (val > 0xffff) {
 8011a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011a60:	d301      	bcc.n	8011a66 <ip4addr_aton+0x1d2>
        return 0;
 8011a62:	2300      	movs	r3, #0
 8011a64:	e03e      	b.n	8011ae4 <ip4addr_aton+0x250>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 8011a66:	68fb      	ldr	r3, [r7, #12]
 8011a68:	2bff      	cmp	r3, #255	; 0xff
 8011a6a:	d802      	bhi.n	8011a72 <ip4addr_aton+0x1de>
 8011a6c:	693b      	ldr	r3, [r7, #16]
 8011a6e:	2bff      	cmp	r3, #255	; 0xff
 8011a70:	d901      	bls.n	8011a76 <ip4addr_aton+0x1e2>
        return 0;
 8011a72:	2300      	movs	r3, #0
 8011a74:	e036      	b.n	8011ae4 <ip4addr_aton+0x250>
      }
      val |= (parts[0] << 24) | (parts[1] << 16);
 8011a76:	68fb      	ldr	r3, [r7, #12]
 8011a78:	061a      	lsls	r2, r3, #24
 8011a7a:	693b      	ldr	r3, [r7, #16]
 8011a7c:	041b      	lsls	r3, r3, #16
 8011a7e:	4313      	orrs	r3, r2
 8011a80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011a82:	4313      	orrs	r3, r2
 8011a84:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8011a86:	e023      	b.n	8011ad0 <ip4addr_aton+0x23c>

    case 4:             /* a.b.c.d -- 8.8.8.8 bits */
      if (val > 0xff) {
 8011a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a8a:	2bff      	cmp	r3, #255	; 0xff
 8011a8c:	d901      	bls.n	8011a92 <ip4addr_aton+0x1fe>
        return 0;
 8011a8e:	2300      	movs	r3, #0
 8011a90:	e028      	b.n	8011ae4 <ip4addr_aton+0x250>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 8011a92:	68fb      	ldr	r3, [r7, #12]
 8011a94:	2bff      	cmp	r3, #255	; 0xff
 8011a96:	d805      	bhi.n	8011aa4 <ip4addr_aton+0x210>
 8011a98:	693b      	ldr	r3, [r7, #16]
 8011a9a:	2bff      	cmp	r3, #255	; 0xff
 8011a9c:	d802      	bhi.n	8011aa4 <ip4addr_aton+0x210>
 8011a9e:	697b      	ldr	r3, [r7, #20]
 8011aa0:	2bff      	cmp	r3, #255	; 0xff
 8011aa2:	d901      	bls.n	8011aa8 <ip4addr_aton+0x214>
        return 0;
 8011aa4:	2300      	movs	r3, #0
 8011aa6:	e01d      	b.n	8011ae4 <ip4addr_aton+0x250>
      }
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 8011aa8:	68fb      	ldr	r3, [r7, #12]
 8011aaa:	061a      	lsls	r2, r3, #24
 8011aac:	693b      	ldr	r3, [r7, #16]
 8011aae:	041b      	lsls	r3, r3, #16
 8011ab0:	431a      	orrs	r2, r3
 8011ab2:	697b      	ldr	r3, [r7, #20]
 8011ab4:	021b      	lsls	r3, r3, #8
 8011ab6:	4313      	orrs	r3, r2
 8011ab8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011aba:	4313      	orrs	r3, r2
 8011abc:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8011abe:	e007      	b.n	8011ad0 <ip4addr_aton+0x23c>
    default:
      LWIP_ASSERT("unhandled", 0);
 8011ac0:	4b0a      	ldr	r3, [pc, #40]	; (8011aec <ip4addr_aton+0x258>)
 8011ac2:	22f9      	movs	r2, #249	; 0xf9
 8011ac4:	490a      	ldr	r1, [pc, #40]	; (8011af0 <ip4addr_aton+0x25c>)
 8011ac6:	480b      	ldr	r0, [pc, #44]	; (8011af4 <ip4addr_aton+0x260>)
 8011ac8:	f00f fa42 	bl	8020f50 <iprintf>
      break;
 8011acc:	e000      	b.n	8011ad0 <ip4addr_aton+0x23c>
      break;
 8011ace:	bf00      	nop
  }
  if (addr) {
 8011ad0:	683b      	ldr	r3, [r7, #0]
 8011ad2:	2b00      	cmp	r3, #0
 8011ad4:	d005      	beq.n	8011ae2 <ip4addr_aton+0x24e>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 8011ad6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011ad8:	f7fe f925 	bl	800fd26 <lwip_htonl>
 8011adc:	4602      	mov	r2, r0
 8011ade:	683b      	ldr	r3, [r7, #0]
 8011ae0:	601a      	str	r2, [r3, #0]
  }
  return 1;
 8011ae2:	2301      	movs	r3, #1
}
 8011ae4:	4618      	mov	r0, r3
 8011ae6:	3728      	adds	r7, #40	; 0x28
 8011ae8:	46bd      	mov	sp, r7
 8011aea:	bdb0      	pop	{r4, r5, r7, pc}
 8011aec:	08023fe4 	.word	0x08023fe4
 8011af0:	0802403c 	.word	0x0802403c
 8011af4:	08024048 	.word	0x08024048

08011af8 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8011af8:	b580      	push	{r7, lr}
 8011afa:	b084      	sub	sp, #16
 8011afc:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8011afe:	2300      	movs	r3, #0
 8011b00:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8011b02:	4b12      	ldr	r3, [pc, #72]	; (8011b4c <ip_reass_tmr+0x54>)
 8011b04:	681b      	ldr	r3, [r3, #0]
 8011b06:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8011b08:	e018      	b.n	8011b3c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8011b0a:	68fb      	ldr	r3, [r7, #12]
 8011b0c:	7fdb      	ldrb	r3, [r3, #31]
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	d00b      	beq.n	8011b2a <ip_reass_tmr+0x32>
      r->timer--;
 8011b12:	68fb      	ldr	r3, [r7, #12]
 8011b14:	7fdb      	ldrb	r3, [r3, #31]
 8011b16:	3b01      	subs	r3, #1
 8011b18:	b2da      	uxtb	r2, r3
 8011b1a:	68fb      	ldr	r3, [r7, #12]
 8011b1c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8011b1e:	68fb      	ldr	r3, [r7, #12]
 8011b20:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8011b22:	68fb      	ldr	r3, [r7, #12]
 8011b24:	681b      	ldr	r3, [r3, #0]
 8011b26:	60fb      	str	r3, [r7, #12]
 8011b28:	e008      	b.n	8011b3c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8011b2a:	68fb      	ldr	r3, [r7, #12]
 8011b2c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8011b2e:	68fb      	ldr	r3, [r7, #12]
 8011b30:	681b      	ldr	r3, [r3, #0]
 8011b32:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8011b34:	68b9      	ldr	r1, [r7, #8]
 8011b36:	6878      	ldr	r0, [r7, #4]
 8011b38:	f000 f80a 	bl	8011b50 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8011b3c:	68fb      	ldr	r3, [r7, #12]
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	d1e3      	bne.n	8011b0a <ip_reass_tmr+0x12>
    }
  }
}
 8011b42:	bf00      	nop
 8011b44:	3710      	adds	r7, #16
 8011b46:	46bd      	mov	sp, r7
 8011b48:	bd80      	pop	{r7, pc}
 8011b4a:	bf00      	nop
 8011b4c:	240406cc 	.word	0x240406cc

08011b50 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8011b50:	b580      	push	{r7, lr}
 8011b52:	b088      	sub	sp, #32
 8011b54:	af00      	add	r7, sp, #0
 8011b56:	6078      	str	r0, [r7, #4]
 8011b58:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8011b5a:	2300      	movs	r3, #0
 8011b5c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8011b5e:	683a      	ldr	r2, [r7, #0]
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	429a      	cmp	r2, r3
 8011b64:	d105      	bne.n	8011b72 <ip_reass_free_complete_datagram+0x22>
 8011b66:	4b45      	ldr	r3, [pc, #276]	; (8011c7c <ip_reass_free_complete_datagram+0x12c>)
 8011b68:	22ab      	movs	r2, #171	; 0xab
 8011b6a:	4945      	ldr	r1, [pc, #276]	; (8011c80 <ip_reass_free_complete_datagram+0x130>)
 8011b6c:	4845      	ldr	r0, [pc, #276]	; (8011c84 <ip_reass_free_complete_datagram+0x134>)
 8011b6e:	f00f f9ef 	bl	8020f50 <iprintf>
  if (prev != NULL) {
 8011b72:	683b      	ldr	r3, [r7, #0]
 8011b74:	2b00      	cmp	r3, #0
 8011b76:	d00a      	beq.n	8011b8e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8011b78:	683b      	ldr	r3, [r7, #0]
 8011b7a:	681b      	ldr	r3, [r3, #0]
 8011b7c:	687a      	ldr	r2, [r7, #4]
 8011b7e:	429a      	cmp	r2, r3
 8011b80:	d005      	beq.n	8011b8e <ip_reass_free_complete_datagram+0x3e>
 8011b82:	4b3e      	ldr	r3, [pc, #248]	; (8011c7c <ip_reass_free_complete_datagram+0x12c>)
 8011b84:	22ad      	movs	r2, #173	; 0xad
 8011b86:	4940      	ldr	r1, [pc, #256]	; (8011c88 <ip_reass_free_complete_datagram+0x138>)
 8011b88:	483e      	ldr	r0, [pc, #248]	; (8011c84 <ip_reass_free_complete_datagram+0x134>)
 8011b8a:	f00f f9e1 	bl	8020f50 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	685b      	ldr	r3, [r3, #4]
 8011b92:	685b      	ldr	r3, [r3, #4]
 8011b94:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8011b96:	697b      	ldr	r3, [r7, #20]
 8011b98:	889b      	ldrh	r3, [r3, #4]
 8011b9a:	b29b      	uxth	r3, r3
 8011b9c:	2b00      	cmp	r3, #0
 8011b9e:	d12a      	bne.n	8011bf6 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	685b      	ldr	r3, [r3, #4]
 8011ba4:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8011ba6:	697b      	ldr	r3, [r7, #20]
 8011ba8:	681a      	ldr	r2, [r3, #0]
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8011bae:	69bb      	ldr	r3, [r7, #24]
 8011bb0:	6858      	ldr	r0, [r3, #4]
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	3308      	adds	r3, #8
 8011bb6:	2214      	movs	r2, #20
 8011bb8:	4619      	mov	r1, r3
 8011bba:	f00e fd64 	bl	8020686 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8011bbe:	2101      	movs	r1, #1
 8011bc0:	69b8      	ldr	r0, [r7, #24]
 8011bc2:	f7ff fa39 	bl	8011038 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8011bc6:	69b8      	ldr	r0, [r7, #24]
 8011bc8:	f002 fad0 	bl	801416c <pbuf_clen>
 8011bcc:	4603      	mov	r3, r0
 8011bce:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8011bd0:	8bfa      	ldrh	r2, [r7, #30]
 8011bd2:	8a7b      	ldrh	r3, [r7, #18]
 8011bd4:	4413      	add	r3, r2
 8011bd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011bda:	db05      	blt.n	8011be8 <ip_reass_free_complete_datagram+0x98>
 8011bdc:	4b27      	ldr	r3, [pc, #156]	; (8011c7c <ip_reass_free_complete_datagram+0x12c>)
 8011bde:	22bc      	movs	r2, #188	; 0xbc
 8011be0:	492a      	ldr	r1, [pc, #168]	; (8011c8c <ip_reass_free_complete_datagram+0x13c>)
 8011be2:	4828      	ldr	r0, [pc, #160]	; (8011c84 <ip_reass_free_complete_datagram+0x134>)
 8011be4:	f00f f9b4 	bl	8020f50 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8011be8:	8bfa      	ldrh	r2, [r7, #30]
 8011bea:	8a7b      	ldrh	r3, [r7, #18]
 8011bec:	4413      	add	r3, r2
 8011bee:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8011bf0:	69b8      	ldr	r0, [r7, #24]
 8011bf2:	f002 fa2d 	bl	8014050 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	685b      	ldr	r3, [r3, #4]
 8011bfa:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8011bfc:	e01f      	b.n	8011c3e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8011bfe:	69bb      	ldr	r3, [r7, #24]
 8011c00:	685b      	ldr	r3, [r3, #4]
 8011c02:	617b      	str	r3, [r7, #20]
    pcur = p;
 8011c04:	69bb      	ldr	r3, [r7, #24]
 8011c06:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8011c08:	697b      	ldr	r3, [r7, #20]
 8011c0a:	681b      	ldr	r3, [r3, #0]
 8011c0c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8011c0e:	68f8      	ldr	r0, [r7, #12]
 8011c10:	f002 faac 	bl	801416c <pbuf_clen>
 8011c14:	4603      	mov	r3, r0
 8011c16:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8011c18:	8bfa      	ldrh	r2, [r7, #30]
 8011c1a:	8a7b      	ldrh	r3, [r7, #18]
 8011c1c:	4413      	add	r3, r2
 8011c1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011c22:	db05      	blt.n	8011c30 <ip_reass_free_complete_datagram+0xe0>
 8011c24:	4b15      	ldr	r3, [pc, #84]	; (8011c7c <ip_reass_free_complete_datagram+0x12c>)
 8011c26:	22cc      	movs	r2, #204	; 0xcc
 8011c28:	4918      	ldr	r1, [pc, #96]	; (8011c8c <ip_reass_free_complete_datagram+0x13c>)
 8011c2a:	4816      	ldr	r0, [pc, #88]	; (8011c84 <ip_reass_free_complete_datagram+0x134>)
 8011c2c:	f00f f990 	bl	8020f50 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8011c30:	8bfa      	ldrh	r2, [r7, #30]
 8011c32:	8a7b      	ldrh	r3, [r7, #18]
 8011c34:	4413      	add	r3, r2
 8011c36:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8011c38:	68f8      	ldr	r0, [r7, #12]
 8011c3a:	f002 fa09 	bl	8014050 <pbuf_free>
  while (p != NULL) {
 8011c3e:	69bb      	ldr	r3, [r7, #24]
 8011c40:	2b00      	cmp	r3, #0
 8011c42:	d1dc      	bne.n	8011bfe <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8011c44:	6839      	ldr	r1, [r7, #0]
 8011c46:	6878      	ldr	r0, [r7, #4]
 8011c48:	f000 f8c2 	bl	8011dd0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8011c4c:	4b10      	ldr	r3, [pc, #64]	; (8011c90 <ip_reass_free_complete_datagram+0x140>)
 8011c4e:	881b      	ldrh	r3, [r3, #0]
 8011c50:	8bfa      	ldrh	r2, [r7, #30]
 8011c52:	429a      	cmp	r2, r3
 8011c54:	d905      	bls.n	8011c62 <ip_reass_free_complete_datagram+0x112>
 8011c56:	4b09      	ldr	r3, [pc, #36]	; (8011c7c <ip_reass_free_complete_datagram+0x12c>)
 8011c58:	22d2      	movs	r2, #210	; 0xd2
 8011c5a:	490e      	ldr	r1, [pc, #56]	; (8011c94 <ip_reass_free_complete_datagram+0x144>)
 8011c5c:	4809      	ldr	r0, [pc, #36]	; (8011c84 <ip_reass_free_complete_datagram+0x134>)
 8011c5e:	f00f f977 	bl	8020f50 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8011c62:	4b0b      	ldr	r3, [pc, #44]	; (8011c90 <ip_reass_free_complete_datagram+0x140>)
 8011c64:	881a      	ldrh	r2, [r3, #0]
 8011c66:	8bfb      	ldrh	r3, [r7, #30]
 8011c68:	1ad3      	subs	r3, r2, r3
 8011c6a:	b29a      	uxth	r2, r3
 8011c6c:	4b08      	ldr	r3, [pc, #32]	; (8011c90 <ip_reass_free_complete_datagram+0x140>)
 8011c6e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8011c70:	8bfb      	ldrh	r3, [r7, #30]
}
 8011c72:	4618      	mov	r0, r3
 8011c74:	3720      	adds	r7, #32
 8011c76:	46bd      	mov	sp, r7
 8011c78:	bd80      	pop	{r7, pc}
 8011c7a:	bf00      	nop
 8011c7c:	08024070 	.word	0x08024070
 8011c80:	080240c8 	.word	0x080240c8
 8011c84:	080240d4 	.word	0x080240d4
 8011c88:	080240fc 	.word	0x080240fc
 8011c8c:	08024110 	.word	0x08024110
 8011c90:	240406d0 	.word	0x240406d0
 8011c94:	08024130 	.word	0x08024130

08011c98 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8011c98:	b580      	push	{r7, lr}
 8011c9a:	b08a      	sub	sp, #40	; 0x28
 8011c9c:	af00      	add	r7, sp, #0
 8011c9e:	6078      	str	r0, [r7, #4]
 8011ca0:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8011ca2:	2300      	movs	r3, #0
 8011ca4:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8011ca6:	2300      	movs	r3, #0
 8011ca8:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8011caa:	2300      	movs	r3, #0
 8011cac:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8011cae:	2300      	movs	r3, #0
 8011cb0:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8011cb2:	2300      	movs	r3, #0
 8011cb4:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8011cb6:	4b28      	ldr	r3, [pc, #160]	; (8011d58 <ip_reass_remove_oldest_datagram+0xc0>)
 8011cb8:	681b      	ldr	r3, [r3, #0]
 8011cba:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8011cbc:	e030      	b.n	8011d20 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8011cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cc0:	695a      	ldr	r2, [r3, #20]
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	68db      	ldr	r3, [r3, #12]
 8011cc6:	429a      	cmp	r2, r3
 8011cc8:	d10c      	bne.n	8011ce4 <ip_reass_remove_oldest_datagram+0x4c>
 8011cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ccc:	699a      	ldr	r2, [r3, #24]
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	691b      	ldr	r3, [r3, #16]
 8011cd2:	429a      	cmp	r2, r3
 8011cd4:	d106      	bne.n	8011ce4 <ip_reass_remove_oldest_datagram+0x4c>
 8011cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cd8:	899a      	ldrh	r2, [r3, #12]
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	889b      	ldrh	r3, [r3, #4]
 8011cde:	b29b      	uxth	r3, r3
 8011ce0:	429a      	cmp	r2, r3
 8011ce2:	d014      	beq.n	8011d0e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8011ce4:	693b      	ldr	r3, [r7, #16]
 8011ce6:	3301      	adds	r3, #1
 8011ce8:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8011cea:	6a3b      	ldr	r3, [r7, #32]
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	d104      	bne.n	8011cfa <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8011cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cf2:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8011cf4:	69fb      	ldr	r3, [r7, #28]
 8011cf6:	61bb      	str	r3, [r7, #24]
 8011cf8:	e009      	b.n	8011d0e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8011cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cfc:	7fda      	ldrb	r2, [r3, #31]
 8011cfe:	6a3b      	ldr	r3, [r7, #32]
 8011d00:	7fdb      	ldrb	r3, [r3, #31]
 8011d02:	429a      	cmp	r2, r3
 8011d04:	d803      	bhi.n	8011d0e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8011d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d08:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8011d0a:	69fb      	ldr	r3, [r7, #28]
 8011d0c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8011d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d10:	681b      	ldr	r3, [r3, #0]
 8011d12:	2b00      	cmp	r3, #0
 8011d14:	d001      	beq.n	8011d1a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8011d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d18:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8011d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d1c:	681b      	ldr	r3, [r3, #0]
 8011d1e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8011d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d22:	2b00      	cmp	r3, #0
 8011d24:	d1cb      	bne.n	8011cbe <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8011d26:	6a3b      	ldr	r3, [r7, #32]
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	d008      	beq.n	8011d3e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8011d2c:	69b9      	ldr	r1, [r7, #24]
 8011d2e:	6a38      	ldr	r0, [r7, #32]
 8011d30:	f7ff ff0e 	bl	8011b50 <ip_reass_free_complete_datagram>
 8011d34:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8011d36:	697a      	ldr	r2, [r7, #20]
 8011d38:	68fb      	ldr	r3, [r7, #12]
 8011d3a:	4413      	add	r3, r2
 8011d3c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8011d3e:	697a      	ldr	r2, [r7, #20]
 8011d40:	683b      	ldr	r3, [r7, #0]
 8011d42:	429a      	cmp	r2, r3
 8011d44:	da02      	bge.n	8011d4c <ip_reass_remove_oldest_datagram+0xb4>
 8011d46:	693b      	ldr	r3, [r7, #16]
 8011d48:	2b01      	cmp	r3, #1
 8011d4a:	dcac      	bgt.n	8011ca6 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8011d4c:	697b      	ldr	r3, [r7, #20]
}
 8011d4e:	4618      	mov	r0, r3
 8011d50:	3728      	adds	r7, #40	; 0x28
 8011d52:	46bd      	mov	sp, r7
 8011d54:	bd80      	pop	{r7, pc}
 8011d56:	bf00      	nop
 8011d58:	240406cc 	.word	0x240406cc

08011d5c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8011d5c:	b580      	push	{r7, lr}
 8011d5e:	b084      	sub	sp, #16
 8011d60:	af00      	add	r7, sp, #0
 8011d62:	6078      	str	r0, [r7, #4]
 8011d64:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8011d66:	2004      	movs	r0, #4
 8011d68:	f001 f998 	bl	801309c <memp_malloc>
 8011d6c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8011d6e:	68fb      	ldr	r3, [r7, #12]
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	d110      	bne.n	8011d96 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8011d74:	6839      	ldr	r1, [r7, #0]
 8011d76:	6878      	ldr	r0, [r7, #4]
 8011d78:	f7ff ff8e 	bl	8011c98 <ip_reass_remove_oldest_datagram>
 8011d7c:	4602      	mov	r2, r0
 8011d7e:	683b      	ldr	r3, [r7, #0]
 8011d80:	4293      	cmp	r3, r2
 8011d82:	dc03      	bgt.n	8011d8c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8011d84:	2004      	movs	r0, #4
 8011d86:	f001 f989 	bl	801309c <memp_malloc>
 8011d8a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8011d8c:	68fb      	ldr	r3, [r7, #12]
 8011d8e:	2b00      	cmp	r3, #0
 8011d90:	d101      	bne.n	8011d96 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8011d92:	2300      	movs	r3, #0
 8011d94:	e016      	b.n	8011dc4 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8011d96:	2220      	movs	r2, #32
 8011d98:	2100      	movs	r1, #0
 8011d9a:	68f8      	ldr	r0, [r7, #12]
 8011d9c:	f00e fc97 	bl	80206ce <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8011da0:	68fb      	ldr	r3, [r7, #12]
 8011da2:	220f      	movs	r2, #15
 8011da4:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8011da6:	4b09      	ldr	r3, [pc, #36]	; (8011dcc <ip_reass_enqueue_new_datagram+0x70>)
 8011da8:	681a      	ldr	r2, [r3, #0]
 8011daa:	68fb      	ldr	r3, [r7, #12]
 8011dac:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8011dae:	4a07      	ldr	r2, [pc, #28]	; (8011dcc <ip_reass_enqueue_new_datagram+0x70>)
 8011db0:	68fb      	ldr	r3, [r7, #12]
 8011db2:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8011db4:	68fb      	ldr	r3, [r7, #12]
 8011db6:	3308      	adds	r3, #8
 8011db8:	2214      	movs	r2, #20
 8011dba:	6879      	ldr	r1, [r7, #4]
 8011dbc:	4618      	mov	r0, r3
 8011dbe:	f00e fc62 	bl	8020686 <memcpy>
  return ipr;
 8011dc2:	68fb      	ldr	r3, [r7, #12]
}
 8011dc4:	4618      	mov	r0, r3
 8011dc6:	3710      	adds	r7, #16
 8011dc8:	46bd      	mov	sp, r7
 8011dca:	bd80      	pop	{r7, pc}
 8011dcc:	240406cc 	.word	0x240406cc

08011dd0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8011dd0:	b580      	push	{r7, lr}
 8011dd2:	b082      	sub	sp, #8
 8011dd4:	af00      	add	r7, sp, #0
 8011dd6:	6078      	str	r0, [r7, #4]
 8011dd8:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8011dda:	4b10      	ldr	r3, [pc, #64]	; (8011e1c <ip_reass_dequeue_datagram+0x4c>)
 8011ddc:	681b      	ldr	r3, [r3, #0]
 8011dde:	687a      	ldr	r2, [r7, #4]
 8011de0:	429a      	cmp	r2, r3
 8011de2:	d104      	bne.n	8011dee <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	681b      	ldr	r3, [r3, #0]
 8011de8:	4a0c      	ldr	r2, [pc, #48]	; (8011e1c <ip_reass_dequeue_datagram+0x4c>)
 8011dea:	6013      	str	r3, [r2, #0]
 8011dec:	e00d      	b.n	8011e0a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8011dee:	683b      	ldr	r3, [r7, #0]
 8011df0:	2b00      	cmp	r3, #0
 8011df2:	d106      	bne.n	8011e02 <ip_reass_dequeue_datagram+0x32>
 8011df4:	4b0a      	ldr	r3, [pc, #40]	; (8011e20 <ip_reass_dequeue_datagram+0x50>)
 8011df6:	f240 1245 	movw	r2, #325	; 0x145
 8011dfa:	490a      	ldr	r1, [pc, #40]	; (8011e24 <ip_reass_dequeue_datagram+0x54>)
 8011dfc:	480a      	ldr	r0, [pc, #40]	; (8011e28 <ip_reass_dequeue_datagram+0x58>)
 8011dfe:	f00f f8a7 	bl	8020f50 <iprintf>
    prev->next = ipr->next;
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	681a      	ldr	r2, [r3, #0]
 8011e06:	683b      	ldr	r3, [r7, #0]
 8011e08:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8011e0a:	6879      	ldr	r1, [r7, #4]
 8011e0c:	2004      	movs	r0, #4
 8011e0e:	f001 f9bb 	bl	8013188 <memp_free>
}
 8011e12:	bf00      	nop
 8011e14:	3708      	adds	r7, #8
 8011e16:	46bd      	mov	sp, r7
 8011e18:	bd80      	pop	{r7, pc}
 8011e1a:	bf00      	nop
 8011e1c:	240406cc 	.word	0x240406cc
 8011e20:	08024070 	.word	0x08024070
 8011e24:	08024154 	.word	0x08024154
 8011e28:	080240d4 	.word	0x080240d4

08011e2c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8011e2c:	b580      	push	{r7, lr}
 8011e2e:	b08c      	sub	sp, #48	; 0x30
 8011e30:	af00      	add	r7, sp, #0
 8011e32:	60f8      	str	r0, [r7, #12]
 8011e34:	60b9      	str	r1, [r7, #8]
 8011e36:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8011e38:	2300      	movs	r3, #0
 8011e3a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8011e3c:	2301      	movs	r3, #1
 8011e3e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8011e40:	68bb      	ldr	r3, [r7, #8]
 8011e42:	685b      	ldr	r3, [r3, #4]
 8011e44:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8011e46:	69fb      	ldr	r3, [r7, #28]
 8011e48:	885b      	ldrh	r3, [r3, #2]
 8011e4a:	b29b      	uxth	r3, r3
 8011e4c:	4618      	mov	r0, r3
 8011e4e:	f7fd ff55 	bl	800fcfc <lwip_htons>
 8011e52:	4603      	mov	r3, r0
 8011e54:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8011e56:	69fb      	ldr	r3, [r7, #28]
 8011e58:	781b      	ldrb	r3, [r3, #0]
 8011e5a:	f003 030f 	and.w	r3, r3, #15
 8011e5e:	b2db      	uxtb	r3, r3
 8011e60:	009b      	lsls	r3, r3, #2
 8011e62:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8011e64:	7e7b      	ldrb	r3, [r7, #25]
 8011e66:	b29b      	uxth	r3, r3
 8011e68:	8b7a      	ldrh	r2, [r7, #26]
 8011e6a:	429a      	cmp	r2, r3
 8011e6c:	d202      	bcs.n	8011e74 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8011e72:	e135      	b.n	80120e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8011e74:	7e7b      	ldrb	r3, [r7, #25]
 8011e76:	b29b      	uxth	r3, r3
 8011e78:	8b7a      	ldrh	r2, [r7, #26]
 8011e7a:	1ad3      	subs	r3, r2, r3
 8011e7c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8011e7e:	69fb      	ldr	r3, [r7, #28]
 8011e80:	88db      	ldrh	r3, [r3, #6]
 8011e82:	b29b      	uxth	r3, r3
 8011e84:	4618      	mov	r0, r3
 8011e86:	f7fd ff39 	bl	800fcfc <lwip_htons>
 8011e8a:	4603      	mov	r3, r0
 8011e8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011e90:	b29b      	uxth	r3, r3
 8011e92:	00db      	lsls	r3, r3, #3
 8011e94:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8011e96:	68bb      	ldr	r3, [r7, #8]
 8011e98:	685b      	ldr	r3, [r3, #4]
 8011e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8011e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e9e:	2200      	movs	r2, #0
 8011ea0:	701a      	strb	r2, [r3, #0]
 8011ea2:	2200      	movs	r2, #0
 8011ea4:	705a      	strb	r2, [r3, #1]
 8011ea6:	2200      	movs	r2, #0
 8011ea8:	709a      	strb	r2, [r3, #2]
 8011eaa:	2200      	movs	r2, #0
 8011eac:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8011eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011eb0:	8afa      	ldrh	r2, [r7, #22]
 8011eb2:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8011eb4:	8afa      	ldrh	r2, [r7, #22]
 8011eb6:	8b7b      	ldrh	r3, [r7, #26]
 8011eb8:	4413      	add	r3, r2
 8011eba:	b29a      	uxth	r2, r3
 8011ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ebe:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8011ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ec2:	88db      	ldrh	r3, [r3, #6]
 8011ec4:	b29b      	uxth	r3, r3
 8011ec6:	8afa      	ldrh	r2, [r7, #22]
 8011ec8:	429a      	cmp	r2, r3
 8011eca:	d902      	bls.n	8011ed2 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011ecc:	f04f 33ff 	mov.w	r3, #4294967295
 8011ed0:	e106      	b.n	80120e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8011ed2:	68fb      	ldr	r3, [r7, #12]
 8011ed4:	685b      	ldr	r3, [r3, #4]
 8011ed6:	627b      	str	r3, [r7, #36]	; 0x24
 8011ed8:	e068      	b.n	8011fac <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8011eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011edc:	685b      	ldr	r3, [r3, #4]
 8011ede:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8011ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ee2:	889b      	ldrh	r3, [r3, #4]
 8011ee4:	b29a      	uxth	r2, r3
 8011ee6:	693b      	ldr	r3, [r7, #16]
 8011ee8:	889b      	ldrh	r3, [r3, #4]
 8011eea:	b29b      	uxth	r3, r3
 8011eec:	429a      	cmp	r2, r3
 8011eee:	d235      	bcs.n	8011f5c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8011ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ef2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011ef4:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8011ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ef8:	2b00      	cmp	r3, #0
 8011efa:	d020      	beq.n	8011f3e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8011efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011efe:	889b      	ldrh	r3, [r3, #4]
 8011f00:	b29a      	uxth	r2, r3
 8011f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f04:	88db      	ldrh	r3, [r3, #6]
 8011f06:	b29b      	uxth	r3, r3
 8011f08:	429a      	cmp	r2, r3
 8011f0a:	d307      	bcc.n	8011f1c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8011f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f0e:	88db      	ldrh	r3, [r3, #6]
 8011f10:	b29a      	uxth	r2, r3
 8011f12:	693b      	ldr	r3, [r7, #16]
 8011f14:	889b      	ldrh	r3, [r3, #4]
 8011f16:	b29b      	uxth	r3, r3
 8011f18:	429a      	cmp	r2, r3
 8011f1a:	d902      	bls.n	8011f22 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011f1c:	f04f 33ff 	mov.w	r3, #4294967295
 8011f20:	e0de      	b.n	80120e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8011f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f24:	68ba      	ldr	r2, [r7, #8]
 8011f26:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8011f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f2a:	88db      	ldrh	r3, [r3, #6]
 8011f2c:	b29a      	uxth	r2, r3
 8011f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f30:	889b      	ldrh	r3, [r3, #4]
 8011f32:	b29b      	uxth	r3, r3
 8011f34:	429a      	cmp	r2, r3
 8011f36:	d03d      	beq.n	8011fb4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8011f38:	2300      	movs	r3, #0
 8011f3a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8011f3c:	e03a      	b.n	8011fb4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8011f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f40:	88db      	ldrh	r3, [r3, #6]
 8011f42:	b29a      	uxth	r2, r3
 8011f44:	693b      	ldr	r3, [r7, #16]
 8011f46:	889b      	ldrh	r3, [r3, #4]
 8011f48:	b29b      	uxth	r3, r3
 8011f4a:	429a      	cmp	r2, r3
 8011f4c:	d902      	bls.n	8011f54 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011f4e:	f04f 33ff 	mov.w	r3, #4294967295
 8011f52:	e0c5      	b.n	80120e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8011f54:	68fb      	ldr	r3, [r7, #12]
 8011f56:	68ba      	ldr	r2, [r7, #8]
 8011f58:	605a      	str	r2, [r3, #4]
      break;
 8011f5a:	e02b      	b.n	8011fb4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8011f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f5e:	889b      	ldrh	r3, [r3, #4]
 8011f60:	b29a      	uxth	r2, r3
 8011f62:	693b      	ldr	r3, [r7, #16]
 8011f64:	889b      	ldrh	r3, [r3, #4]
 8011f66:	b29b      	uxth	r3, r3
 8011f68:	429a      	cmp	r2, r3
 8011f6a:	d102      	bne.n	8011f72 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011f6c:	f04f 33ff 	mov.w	r3, #4294967295
 8011f70:	e0b6      	b.n	80120e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8011f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f74:	889b      	ldrh	r3, [r3, #4]
 8011f76:	b29a      	uxth	r2, r3
 8011f78:	693b      	ldr	r3, [r7, #16]
 8011f7a:	88db      	ldrh	r3, [r3, #6]
 8011f7c:	b29b      	uxth	r3, r3
 8011f7e:	429a      	cmp	r2, r3
 8011f80:	d202      	bcs.n	8011f88 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011f82:	f04f 33ff 	mov.w	r3, #4294967295
 8011f86:	e0ab      	b.n	80120e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8011f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f8a:	2b00      	cmp	r3, #0
 8011f8c:	d009      	beq.n	8011fa2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8011f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f90:	88db      	ldrh	r3, [r3, #6]
 8011f92:	b29a      	uxth	r2, r3
 8011f94:	693b      	ldr	r3, [r7, #16]
 8011f96:	889b      	ldrh	r3, [r3, #4]
 8011f98:	b29b      	uxth	r3, r3
 8011f9a:	429a      	cmp	r2, r3
 8011f9c:	d001      	beq.n	8011fa2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8011f9e:	2300      	movs	r3, #0
 8011fa0:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8011fa2:	693b      	ldr	r3, [r7, #16]
 8011fa4:	681b      	ldr	r3, [r3, #0]
 8011fa6:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8011fa8:	693b      	ldr	r3, [r7, #16]
 8011faa:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8011fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	d193      	bne.n	8011eda <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8011fb2:	e000      	b.n	8011fb6 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8011fb4:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8011fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	d12d      	bne.n	8012018 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8011fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fbe:	2b00      	cmp	r3, #0
 8011fc0:	d01c      	beq.n	8011ffc <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8011fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fc4:	88db      	ldrh	r3, [r3, #6]
 8011fc6:	b29a      	uxth	r2, r3
 8011fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fca:	889b      	ldrh	r3, [r3, #4]
 8011fcc:	b29b      	uxth	r3, r3
 8011fce:	429a      	cmp	r2, r3
 8011fd0:	d906      	bls.n	8011fe0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8011fd2:	4b45      	ldr	r3, [pc, #276]	; (80120e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011fd4:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8011fd8:	4944      	ldr	r1, [pc, #272]	; (80120ec <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8011fda:	4845      	ldr	r0, [pc, #276]	; (80120f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011fdc:	f00e ffb8 	bl	8020f50 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8011fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fe2:	68ba      	ldr	r2, [r7, #8]
 8011fe4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8011fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fe8:	88db      	ldrh	r3, [r3, #6]
 8011fea:	b29a      	uxth	r2, r3
 8011fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fee:	889b      	ldrh	r3, [r3, #4]
 8011ff0:	b29b      	uxth	r3, r3
 8011ff2:	429a      	cmp	r2, r3
 8011ff4:	d010      	beq.n	8012018 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8011ff6:	2300      	movs	r3, #0
 8011ff8:	623b      	str	r3, [r7, #32]
 8011ffa:	e00d      	b.n	8012018 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8011ffc:	68fb      	ldr	r3, [r7, #12]
 8011ffe:	685b      	ldr	r3, [r3, #4]
 8012000:	2b00      	cmp	r3, #0
 8012002:	d006      	beq.n	8012012 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8012004:	4b38      	ldr	r3, [pc, #224]	; (80120e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012006:	f240 12bf 	movw	r2, #447	; 0x1bf
 801200a:	493a      	ldr	r1, [pc, #232]	; (80120f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801200c:	4838      	ldr	r0, [pc, #224]	; (80120f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801200e:	f00e ff9f 	bl	8020f50 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8012012:	68fb      	ldr	r3, [r7, #12]
 8012014:	68ba      	ldr	r2, [r7, #8]
 8012016:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	2b00      	cmp	r3, #0
 801201c:	d105      	bne.n	801202a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801201e:	68fb      	ldr	r3, [r7, #12]
 8012020:	7f9b      	ldrb	r3, [r3, #30]
 8012022:	f003 0301 	and.w	r3, r3, #1
 8012026:	2b00      	cmp	r3, #0
 8012028:	d059      	beq.n	80120de <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801202a:	6a3b      	ldr	r3, [r7, #32]
 801202c:	2b00      	cmp	r3, #0
 801202e:	d04f      	beq.n	80120d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8012030:	68fb      	ldr	r3, [r7, #12]
 8012032:	685b      	ldr	r3, [r3, #4]
 8012034:	2b00      	cmp	r3, #0
 8012036:	d006      	beq.n	8012046 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8012038:	68fb      	ldr	r3, [r7, #12]
 801203a:	685b      	ldr	r3, [r3, #4]
 801203c:	685b      	ldr	r3, [r3, #4]
 801203e:	889b      	ldrh	r3, [r3, #4]
 8012040:	b29b      	uxth	r3, r3
 8012042:	2b00      	cmp	r3, #0
 8012044:	d002      	beq.n	801204c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8012046:	2300      	movs	r3, #0
 8012048:	623b      	str	r3, [r7, #32]
 801204a:	e041      	b.n	80120d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801204c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801204e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8012050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012052:	681b      	ldr	r3, [r3, #0]
 8012054:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8012056:	e012      	b.n	801207e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8012058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801205a:	685b      	ldr	r3, [r3, #4]
 801205c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801205e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012060:	88db      	ldrh	r3, [r3, #6]
 8012062:	b29a      	uxth	r2, r3
 8012064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012066:	889b      	ldrh	r3, [r3, #4]
 8012068:	b29b      	uxth	r3, r3
 801206a:	429a      	cmp	r2, r3
 801206c:	d002      	beq.n	8012074 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801206e:	2300      	movs	r3, #0
 8012070:	623b      	str	r3, [r7, #32]
            break;
 8012072:	e007      	b.n	8012084 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8012074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012076:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8012078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801207a:	681b      	ldr	r3, [r3, #0]
 801207c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801207e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012080:	2b00      	cmp	r3, #0
 8012082:	d1e9      	bne.n	8012058 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8012084:	6a3b      	ldr	r3, [r7, #32]
 8012086:	2b00      	cmp	r3, #0
 8012088:	d022      	beq.n	80120d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801208a:	68fb      	ldr	r3, [r7, #12]
 801208c:	685b      	ldr	r3, [r3, #4]
 801208e:	2b00      	cmp	r3, #0
 8012090:	d106      	bne.n	80120a0 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8012092:	4b15      	ldr	r3, [pc, #84]	; (80120e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012094:	f240 12df 	movw	r2, #479	; 0x1df
 8012098:	4917      	ldr	r1, [pc, #92]	; (80120f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801209a:	4815      	ldr	r0, [pc, #84]	; (80120f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801209c:	f00e ff58 	bl	8020f50 <iprintf>
          LWIP_ASSERT("sanity check",
 80120a0:	68fb      	ldr	r3, [r7, #12]
 80120a2:	685b      	ldr	r3, [r3, #4]
 80120a4:	685b      	ldr	r3, [r3, #4]
 80120a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80120a8:	429a      	cmp	r2, r3
 80120aa:	d106      	bne.n	80120ba <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80120ac:	4b0e      	ldr	r3, [pc, #56]	; (80120e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80120ae:	f240 12e1 	movw	r2, #481	; 0x1e1
 80120b2:	4911      	ldr	r1, [pc, #68]	; (80120f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80120b4:	480e      	ldr	r0, [pc, #56]	; (80120f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80120b6:	f00e ff4b 	bl	8020f50 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80120ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120bc:	681b      	ldr	r3, [r3, #0]
 80120be:	2b00      	cmp	r3, #0
 80120c0:	d006      	beq.n	80120d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80120c2:	4b09      	ldr	r3, [pc, #36]	; (80120e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80120c4:	f240 12e3 	movw	r2, #483	; 0x1e3
 80120c8:	490c      	ldr	r1, [pc, #48]	; (80120fc <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80120ca:	4809      	ldr	r0, [pc, #36]	; (80120f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80120cc:	f00e ff40 	bl	8020f50 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80120d0:	6a3b      	ldr	r3, [r7, #32]
 80120d2:	2b00      	cmp	r3, #0
 80120d4:	bf14      	ite	ne
 80120d6:	2301      	movne	r3, #1
 80120d8:	2300      	moveq	r3, #0
 80120da:	b2db      	uxtb	r3, r3
 80120dc:	e000      	b.n	80120e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80120de:	2300      	movs	r3, #0
}
 80120e0:	4618      	mov	r0, r3
 80120e2:	3730      	adds	r7, #48	; 0x30
 80120e4:	46bd      	mov	sp, r7
 80120e6:	bd80      	pop	{r7, pc}
 80120e8:	08024070 	.word	0x08024070
 80120ec:	08024170 	.word	0x08024170
 80120f0:	080240d4 	.word	0x080240d4
 80120f4:	08024190 	.word	0x08024190
 80120f8:	080241c8 	.word	0x080241c8
 80120fc:	080241d8 	.word	0x080241d8

08012100 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8012100:	b580      	push	{r7, lr}
 8012102:	b08e      	sub	sp, #56	; 0x38
 8012104:	af00      	add	r7, sp, #0
 8012106:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	685b      	ldr	r3, [r3, #4]
 801210c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801210e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012110:	781b      	ldrb	r3, [r3, #0]
 8012112:	f003 030f 	and.w	r3, r3, #15
 8012116:	b2db      	uxtb	r3, r3
 8012118:	009b      	lsls	r3, r3, #2
 801211a:	b2db      	uxtb	r3, r3
 801211c:	2b14      	cmp	r3, #20
 801211e:	f040 8167 	bne.w	80123f0 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8012122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012124:	88db      	ldrh	r3, [r3, #6]
 8012126:	b29b      	uxth	r3, r3
 8012128:	4618      	mov	r0, r3
 801212a:	f7fd fde7 	bl	800fcfc <lwip_htons>
 801212e:	4603      	mov	r3, r0
 8012130:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012134:	b29b      	uxth	r3, r3
 8012136:	00db      	lsls	r3, r3, #3
 8012138:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801213a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801213c:	885b      	ldrh	r3, [r3, #2]
 801213e:	b29b      	uxth	r3, r3
 8012140:	4618      	mov	r0, r3
 8012142:	f7fd fddb 	bl	800fcfc <lwip_htons>
 8012146:	4603      	mov	r3, r0
 8012148:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801214a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801214c:	781b      	ldrb	r3, [r3, #0]
 801214e:	f003 030f 	and.w	r3, r3, #15
 8012152:	b2db      	uxtb	r3, r3
 8012154:	009b      	lsls	r3, r3, #2
 8012156:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801215a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801215e:	b29b      	uxth	r3, r3
 8012160:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012162:	429a      	cmp	r2, r3
 8012164:	f0c0 8146 	bcc.w	80123f4 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8012168:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801216c:	b29b      	uxth	r3, r3
 801216e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012170:	1ad3      	subs	r3, r2, r3
 8012172:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8012174:	6878      	ldr	r0, [r7, #4]
 8012176:	f001 fff9 	bl	801416c <pbuf_clen>
 801217a:	4603      	mov	r3, r0
 801217c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801217e:	4ba3      	ldr	r3, [pc, #652]	; (801240c <ip4_reass+0x30c>)
 8012180:	881b      	ldrh	r3, [r3, #0]
 8012182:	461a      	mov	r2, r3
 8012184:	8c3b      	ldrh	r3, [r7, #32]
 8012186:	4413      	add	r3, r2
 8012188:	2b0a      	cmp	r3, #10
 801218a:	dd10      	ble.n	80121ae <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801218c:	8c3b      	ldrh	r3, [r7, #32]
 801218e:	4619      	mov	r1, r3
 8012190:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012192:	f7ff fd81 	bl	8011c98 <ip_reass_remove_oldest_datagram>
 8012196:	4603      	mov	r3, r0
 8012198:	2b00      	cmp	r3, #0
 801219a:	f000 812d 	beq.w	80123f8 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801219e:	4b9b      	ldr	r3, [pc, #620]	; (801240c <ip4_reass+0x30c>)
 80121a0:	881b      	ldrh	r3, [r3, #0]
 80121a2:	461a      	mov	r2, r3
 80121a4:	8c3b      	ldrh	r3, [r7, #32]
 80121a6:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80121a8:	2b0a      	cmp	r3, #10
 80121aa:	f300 8125 	bgt.w	80123f8 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80121ae:	4b98      	ldr	r3, [pc, #608]	; (8012410 <ip4_reass+0x310>)
 80121b0:	681b      	ldr	r3, [r3, #0]
 80121b2:	633b      	str	r3, [r7, #48]	; 0x30
 80121b4:	e015      	b.n	80121e2 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80121b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121b8:	695a      	ldr	r2, [r3, #20]
 80121ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121bc:	68db      	ldr	r3, [r3, #12]
 80121be:	429a      	cmp	r2, r3
 80121c0:	d10c      	bne.n	80121dc <ip4_reass+0xdc>
 80121c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121c4:	699a      	ldr	r2, [r3, #24]
 80121c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121c8:	691b      	ldr	r3, [r3, #16]
 80121ca:	429a      	cmp	r2, r3
 80121cc:	d106      	bne.n	80121dc <ip4_reass+0xdc>
 80121ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121d0:	899a      	ldrh	r2, [r3, #12]
 80121d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121d4:	889b      	ldrh	r3, [r3, #4]
 80121d6:	b29b      	uxth	r3, r3
 80121d8:	429a      	cmp	r2, r3
 80121da:	d006      	beq.n	80121ea <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80121dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121de:	681b      	ldr	r3, [r3, #0]
 80121e0:	633b      	str	r3, [r7, #48]	; 0x30
 80121e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121e4:	2b00      	cmp	r3, #0
 80121e6:	d1e6      	bne.n	80121b6 <ip4_reass+0xb6>
 80121e8:	e000      	b.n	80121ec <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80121ea:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80121ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121ee:	2b00      	cmp	r3, #0
 80121f0:	d109      	bne.n	8012206 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80121f2:	8c3b      	ldrh	r3, [r7, #32]
 80121f4:	4619      	mov	r1, r3
 80121f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80121f8:	f7ff fdb0 	bl	8011d5c <ip_reass_enqueue_new_datagram>
 80121fc:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80121fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012200:	2b00      	cmp	r3, #0
 8012202:	d11c      	bne.n	801223e <ip4_reass+0x13e>
      goto nullreturn;
 8012204:	e0f9      	b.n	80123fa <ip4_reass+0x2fa>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8012206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012208:	88db      	ldrh	r3, [r3, #6]
 801220a:	b29b      	uxth	r3, r3
 801220c:	4618      	mov	r0, r3
 801220e:	f7fd fd75 	bl	800fcfc <lwip_htons>
 8012212:	4603      	mov	r3, r0
 8012214:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012218:	2b00      	cmp	r3, #0
 801221a:	d110      	bne.n	801223e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801221c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801221e:	89db      	ldrh	r3, [r3, #14]
 8012220:	4618      	mov	r0, r3
 8012222:	f7fd fd6b 	bl	800fcfc <lwip_htons>
 8012226:	4603      	mov	r3, r0
 8012228:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801222c:	2b00      	cmp	r3, #0
 801222e:	d006      	beq.n	801223e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8012230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012232:	3308      	adds	r3, #8
 8012234:	2214      	movs	r2, #20
 8012236:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012238:	4618      	mov	r0, r3
 801223a:	f00e fa24 	bl	8020686 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801223e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012240:	88db      	ldrh	r3, [r3, #6]
 8012242:	b29b      	uxth	r3, r3
 8012244:	f003 0320 	and.w	r3, r3, #32
 8012248:	2b00      	cmp	r3, #0
 801224a:	bf0c      	ite	eq
 801224c:	2301      	moveq	r3, #1
 801224e:	2300      	movne	r3, #0
 8012250:	b2db      	uxtb	r3, r3
 8012252:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8012254:	69fb      	ldr	r3, [r7, #28]
 8012256:	2b00      	cmp	r3, #0
 8012258:	d00e      	beq.n	8012278 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801225a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801225c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801225e:	4413      	add	r3, r2
 8012260:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8012262:	8b7a      	ldrh	r2, [r7, #26]
 8012264:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012266:	429a      	cmp	r2, r3
 8012268:	f0c0 80a0 	bcc.w	80123ac <ip4_reass+0x2ac>
 801226c:	8b7b      	ldrh	r3, [r7, #26]
 801226e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8012272:	4293      	cmp	r3, r2
 8012274:	f200 809a 	bhi.w	80123ac <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8012278:	69fa      	ldr	r2, [r7, #28]
 801227a:	6879      	ldr	r1, [r7, #4]
 801227c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801227e:	f7ff fdd5 	bl	8011e2c <ip_reass_chain_frag_into_datagram_and_validate>
 8012282:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8012284:	697b      	ldr	r3, [r7, #20]
 8012286:	f1b3 3fff 	cmp.w	r3, #4294967295
 801228a:	f000 8091 	beq.w	80123b0 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801228e:	4b5f      	ldr	r3, [pc, #380]	; (801240c <ip4_reass+0x30c>)
 8012290:	881a      	ldrh	r2, [r3, #0]
 8012292:	8c3b      	ldrh	r3, [r7, #32]
 8012294:	4413      	add	r3, r2
 8012296:	b29a      	uxth	r2, r3
 8012298:	4b5c      	ldr	r3, [pc, #368]	; (801240c <ip4_reass+0x30c>)
 801229a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801229c:	69fb      	ldr	r3, [r7, #28]
 801229e:	2b00      	cmp	r3, #0
 80122a0:	d00d      	beq.n	80122be <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80122a2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80122a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80122a6:	4413      	add	r3, r2
 80122a8:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80122aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122ac:	8a7a      	ldrh	r2, [r7, #18]
 80122ae:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80122b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122b2:	7f9b      	ldrb	r3, [r3, #30]
 80122b4:	f043 0301 	orr.w	r3, r3, #1
 80122b8:	b2da      	uxtb	r2, r3
 80122ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122bc:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80122be:	697b      	ldr	r3, [r7, #20]
 80122c0:	2b01      	cmp	r3, #1
 80122c2:	d171      	bne.n	80123a8 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80122c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122c6:	8b9b      	ldrh	r3, [r3, #28]
 80122c8:	3314      	adds	r3, #20
 80122ca:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80122cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122ce:	685b      	ldr	r3, [r3, #4]
 80122d0:	685b      	ldr	r3, [r3, #4]
 80122d2:	681b      	ldr	r3, [r3, #0]
 80122d4:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80122d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122d8:	685b      	ldr	r3, [r3, #4]
 80122da:	685b      	ldr	r3, [r3, #4]
 80122dc:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80122de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122e0:	3308      	adds	r3, #8
 80122e2:	2214      	movs	r2, #20
 80122e4:	4619      	mov	r1, r3
 80122e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80122e8:	f00e f9cd 	bl	8020686 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80122ec:	8a3b      	ldrh	r3, [r7, #16]
 80122ee:	4618      	mov	r0, r3
 80122f0:	f7fd fd04 	bl	800fcfc <lwip_htons>
 80122f4:	4603      	mov	r3, r0
 80122f6:	461a      	mov	r2, r3
 80122f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122fa:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80122fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122fe:	2200      	movs	r2, #0
 8012300:	719a      	strb	r2, [r3, #6]
 8012302:	2200      	movs	r2, #0
 8012304:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8012306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012308:	2200      	movs	r2, #0
 801230a:	729a      	strb	r2, [r3, #10]
 801230c:	2200      	movs	r2, #0
 801230e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8012310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012312:	685b      	ldr	r3, [r3, #4]
 8012314:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8012316:	e00d      	b.n	8012334 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8012318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801231a:	685b      	ldr	r3, [r3, #4]
 801231c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801231e:	2114      	movs	r1, #20
 8012320:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8012322:	f001 fddd 	bl	8013ee0 <pbuf_remove_header>
      pbuf_cat(p, r);
 8012326:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8012328:	6878      	ldr	r0, [r7, #4]
 801232a:	f001 ff5f 	bl	80141ec <pbuf_cat>
      r = iprh->next_pbuf;
 801232e:	68fb      	ldr	r3, [r7, #12]
 8012330:	681b      	ldr	r3, [r3, #0]
 8012332:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8012334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012336:	2b00      	cmp	r3, #0
 8012338:	d1ee      	bne.n	8012318 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801233a:	4b35      	ldr	r3, [pc, #212]	; (8012410 <ip4_reass+0x310>)
 801233c:	681b      	ldr	r3, [r3, #0]
 801233e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012340:	429a      	cmp	r2, r3
 8012342:	d102      	bne.n	801234a <ip4_reass+0x24a>
      ipr_prev = NULL;
 8012344:	2300      	movs	r3, #0
 8012346:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012348:	e010      	b.n	801236c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801234a:	4b31      	ldr	r3, [pc, #196]	; (8012410 <ip4_reass+0x310>)
 801234c:	681b      	ldr	r3, [r3, #0]
 801234e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012350:	e007      	b.n	8012362 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8012352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012354:	681b      	ldr	r3, [r3, #0]
 8012356:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012358:	429a      	cmp	r2, r3
 801235a:	d006      	beq.n	801236a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801235c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801235e:	681b      	ldr	r3, [r3, #0]
 8012360:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012364:	2b00      	cmp	r3, #0
 8012366:	d1f4      	bne.n	8012352 <ip4_reass+0x252>
 8012368:	e000      	b.n	801236c <ip4_reass+0x26c>
          break;
 801236a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801236c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801236e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012370:	f7ff fd2e 	bl	8011dd0 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8012374:	6878      	ldr	r0, [r7, #4]
 8012376:	f001 fef9 	bl	801416c <pbuf_clen>
 801237a:	4603      	mov	r3, r0
 801237c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801237e:	4b23      	ldr	r3, [pc, #140]	; (801240c <ip4_reass+0x30c>)
 8012380:	881b      	ldrh	r3, [r3, #0]
 8012382:	8c3a      	ldrh	r2, [r7, #32]
 8012384:	429a      	cmp	r2, r3
 8012386:	d906      	bls.n	8012396 <ip4_reass+0x296>
 8012388:	4b22      	ldr	r3, [pc, #136]	; (8012414 <ip4_reass+0x314>)
 801238a:	f240 229b 	movw	r2, #667	; 0x29b
 801238e:	4922      	ldr	r1, [pc, #136]	; (8012418 <ip4_reass+0x318>)
 8012390:	4822      	ldr	r0, [pc, #136]	; (801241c <ip4_reass+0x31c>)
 8012392:	f00e fddd 	bl	8020f50 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8012396:	4b1d      	ldr	r3, [pc, #116]	; (801240c <ip4_reass+0x30c>)
 8012398:	881a      	ldrh	r2, [r3, #0]
 801239a:	8c3b      	ldrh	r3, [r7, #32]
 801239c:	1ad3      	subs	r3, r2, r3
 801239e:	b29a      	uxth	r2, r3
 80123a0:	4b1a      	ldr	r3, [pc, #104]	; (801240c <ip4_reass+0x30c>)
 80123a2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	e02c      	b.n	8012402 <ip4_reass+0x302>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80123a8:	2300      	movs	r3, #0
 80123aa:	e02a      	b.n	8012402 <ip4_reass+0x302>

nullreturn_ipr:
 80123ac:	bf00      	nop
 80123ae:	e000      	b.n	80123b2 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 80123b0:	bf00      	nop
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80123b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123b4:	2b00      	cmp	r3, #0
 80123b6:	d106      	bne.n	80123c6 <ip4_reass+0x2c6>
 80123b8:	4b16      	ldr	r3, [pc, #88]	; (8012414 <ip4_reass+0x314>)
 80123ba:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80123be:	4918      	ldr	r1, [pc, #96]	; (8012420 <ip4_reass+0x320>)
 80123c0:	4816      	ldr	r0, [pc, #88]	; (801241c <ip4_reass+0x31c>)
 80123c2:	f00e fdc5 	bl	8020f50 <iprintf>
  if (ipr->p == NULL) {
 80123c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123c8:	685b      	ldr	r3, [r3, #4]
 80123ca:	2b00      	cmp	r3, #0
 80123cc:	d114      	bne.n	80123f8 <ip4_reass+0x2f8>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80123ce:	4b10      	ldr	r3, [pc, #64]	; (8012410 <ip4_reass+0x310>)
 80123d0:	681b      	ldr	r3, [r3, #0]
 80123d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80123d4:	429a      	cmp	r2, r3
 80123d6:	d006      	beq.n	80123e6 <ip4_reass+0x2e6>
 80123d8:	4b0e      	ldr	r3, [pc, #56]	; (8012414 <ip4_reass+0x314>)
 80123da:	f240 22ab 	movw	r2, #683	; 0x2ab
 80123de:	4911      	ldr	r1, [pc, #68]	; (8012424 <ip4_reass+0x324>)
 80123e0:	480e      	ldr	r0, [pc, #56]	; (801241c <ip4_reass+0x31c>)
 80123e2:	f00e fdb5 	bl	8020f50 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80123e6:	2100      	movs	r1, #0
 80123e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80123ea:	f7ff fcf1 	bl	8011dd0 <ip_reass_dequeue_datagram>
 80123ee:	e004      	b.n	80123fa <ip4_reass+0x2fa>
    goto nullreturn;
 80123f0:	bf00      	nop
 80123f2:	e002      	b.n	80123fa <ip4_reass+0x2fa>
    goto nullreturn;
 80123f4:	bf00      	nop
 80123f6:	e000      	b.n	80123fa <ip4_reass+0x2fa>
  }

nullreturn:
 80123f8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80123fa:	6878      	ldr	r0, [r7, #4]
 80123fc:	f001 fe28 	bl	8014050 <pbuf_free>
  return NULL;
 8012400:	2300      	movs	r3, #0
}
 8012402:	4618      	mov	r0, r3
 8012404:	3738      	adds	r7, #56	; 0x38
 8012406:	46bd      	mov	sp, r7
 8012408:	bd80      	pop	{r7, pc}
 801240a:	bf00      	nop
 801240c:	240406d0 	.word	0x240406d0
 8012410:	240406cc 	.word	0x240406cc
 8012414:	08024070 	.word	0x08024070
 8012418:	080241fc 	.word	0x080241fc
 801241c:	080240d4 	.word	0x080240d4
 8012420:	08024218 	.word	0x08024218
 8012424:	08024224 	.word	0x08024224

08012428 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8012428:	b580      	push	{r7, lr}
 801242a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801242c:	2005      	movs	r0, #5
 801242e:	f000 fe35 	bl	801309c <memp_malloc>
 8012432:	4603      	mov	r3, r0
}
 8012434:	4618      	mov	r0, r3
 8012436:	bd80      	pop	{r7, pc}

08012438 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8012438:	b580      	push	{r7, lr}
 801243a:	b082      	sub	sp, #8
 801243c:	af00      	add	r7, sp, #0
 801243e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	2b00      	cmp	r3, #0
 8012444:	d106      	bne.n	8012454 <ip_frag_free_pbuf_custom_ref+0x1c>
 8012446:	4b07      	ldr	r3, [pc, #28]	; (8012464 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8012448:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801244c:	4906      	ldr	r1, [pc, #24]	; (8012468 <ip_frag_free_pbuf_custom_ref+0x30>)
 801244e:	4807      	ldr	r0, [pc, #28]	; (801246c <ip_frag_free_pbuf_custom_ref+0x34>)
 8012450:	f00e fd7e 	bl	8020f50 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8012454:	6879      	ldr	r1, [r7, #4]
 8012456:	2005      	movs	r0, #5
 8012458:	f000 fe96 	bl	8013188 <memp_free>
}
 801245c:	bf00      	nop
 801245e:	3708      	adds	r7, #8
 8012460:	46bd      	mov	sp, r7
 8012462:	bd80      	pop	{r7, pc}
 8012464:	08024070 	.word	0x08024070
 8012468:	08024244 	.word	0x08024244
 801246c:	080240d4 	.word	0x080240d4

08012470 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8012470:	b580      	push	{r7, lr}
 8012472:	b084      	sub	sp, #16
 8012474:	af00      	add	r7, sp, #0
 8012476:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801247c:	68fb      	ldr	r3, [r7, #12]
 801247e:	2b00      	cmp	r3, #0
 8012480:	d106      	bne.n	8012490 <ipfrag_free_pbuf_custom+0x20>
 8012482:	4b11      	ldr	r3, [pc, #68]	; (80124c8 <ipfrag_free_pbuf_custom+0x58>)
 8012484:	f240 22ce 	movw	r2, #718	; 0x2ce
 8012488:	4910      	ldr	r1, [pc, #64]	; (80124cc <ipfrag_free_pbuf_custom+0x5c>)
 801248a:	4811      	ldr	r0, [pc, #68]	; (80124d0 <ipfrag_free_pbuf_custom+0x60>)
 801248c:	f00e fd60 	bl	8020f50 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8012490:	68fa      	ldr	r2, [r7, #12]
 8012492:	687b      	ldr	r3, [r7, #4]
 8012494:	429a      	cmp	r2, r3
 8012496:	d006      	beq.n	80124a6 <ipfrag_free_pbuf_custom+0x36>
 8012498:	4b0b      	ldr	r3, [pc, #44]	; (80124c8 <ipfrag_free_pbuf_custom+0x58>)
 801249a:	f240 22cf 	movw	r2, #719	; 0x2cf
 801249e:	490d      	ldr	r1, [pc, #52]	; (80124d4 <ipfrag_free_pbuf_custom+0x64>)
 80124a0:	480b      	ldr	r0, [pc, #44]	; (80124d0 <ipfrag_free_pbuf_custom+0x60>)
 80124a2:	f00e fd55 	bl	8020f50 <iprintf>
  if (pcr->original != NULL) {
 80124a6:	68fb      	ldr	r3, [r7, #12]
 80124a8:	695b      	ldr	r3, [r3, #20]
 80124aa:	2b00      	cmp	r3, #0
 80124ac:	d004      	beq.n	80124b8 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80124ae:	68fb      	ldr	r3, [r7, #12]
 80124b0:	695b      	ldr	r3, [r3, #20]
 80124b2:	4618      	mov	r0, r3
 80124b4:	f001 fdcc 	bl	8014050 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80124b8:	68f8      	ldr	r0, [r7, #12]
 80124ba:	f7ff ffbd 	bl	8012438 <ip_frag_free_pbuf_custom_ref>
}
 80124be:	bf00      	nop
 80124c0:	3710      	adds	r7, #16
 80124c2:	46bd      	mov	sp, r7
 80124c4:	bd80      	pop	{r7, pc}
 80124c6:	bf00      	nop
 80124c8:	08024070 	.word	0x08024070
 80124cc:	08024250 	.word	0x08024250
 80124d0:	080240d4 	.word	0x080240d4
 80124d4:	0802425c 	.word	0x0802425c

080124d8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80124d8:	b580      	push	{r7, lr}
 80124da:	b094      	sub	sp, #80	; 0x50
 80124dc:	af02      	add	r7, sp, #8
 80124de:	60f8      	str	r0, [r7, #12]
 80124e0:	60b9      	str	r1, [r7, #8]
 80124e2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80124e4:	2300      	movs	r3, #0
 80124e6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80124ea:	68bb      	ldr	r3, [r7, #8]
 80124ec:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80124ee:	3b14      	subs	r3, #20
 80124f0:	2b00      	cmp	r3, #0
 80124f2:	da00      	bge.n	80124f6 <ip4_frag+0x1e>
 80124f4:	3307      	adds	r3, #7
 80124f6:	10db      	asrs	r3, r3, #3
 80124f8:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80124fa:	2314      	movs	r3, #20
 80124fc:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80124fe:	68fb      	ldr	r3, [r7, #12]
 8012500:	685b      	ldr	r3, [r3, #4]
 8012502:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8012504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012506:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8012508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801250a:	781b      	ldrb	r3, [r3, #0]
 801250c:	f003 030f 	and.w	r3, r3, #15
 8012510:	b2db      	uxtb	r3, r3
 8012512:	009b      	lsls	r3, r3, #2
 8012514:	b2db      	uxtb	r3, r3
 8012516:	2b14      	cmp	r3, #20
 8012518:	d002      	beq.n	8012520 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801251a:	f06f 0305 	mvn.w	r3, #5
 801251e:	e10f      	b.n	8012740 <ip4_frag+0x268>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8012520:	68fb      	ldr	r3, [r7, #12]
 8012522:	895b      	ldrh	r3, [r3, #10]
 8012524:	2b13      	cmp	r3, #19
 8012526:	d809      	bhi.n	801253c <ip4_frag+0x64>
 8012528:	4b87      	ldr	r3, [pc, #540]	; (8012748 <ip4_frag+0x270>)
 801252a:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801252e:	4987      	ldr	r1, [pc, #540]	; (801274c <ip4_frag+0x274>)
 8012530:	4887      	ldr	r0, [pc, #540]	; (8012750 <ip4_frag+0x278>)
 8012532:	f00e fd0d 	bl	8020f50 <iprintf>
 8012536:	f06f 0305 	mvn.w	r3, #5
 801253a:	e101      	b.n	8012740 <ip4_frag+0x268>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801253c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801253e:	88db      	ldrh	r3, [r3, #6]
 8012540:	b29b      	uxth	r3, r3
 8012542:	4618      	mov	r0, r3
 8012544:	f7fd fbda 	bl	800fcfc <lwip_htons>
 8012548:	4603      	mov	r3, r0
 801254a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801254c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801254e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012552:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8012556:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012558:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801255c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801255e:	68fb      	ldr	r3, [r7, #12]
 8012560:	891b      	ldrh	r3, [r3, #8]
 8012562:	3b14      	subs	r3, #20
 8012564:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8012568:	e0e0      	b.n	801272c <ip4_frag+0x254>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801256a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801256c:	00db      	lsls	r3, r3, #3
 801256e:	b29b      	uxth	r3, r3
 8012570:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012574:	4293      	cmp	r3, r2
 8012576:	bf28      	it	cs
 8012578:	4613      	movcs	r3, r2
 801257a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801257c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012580:	2114      	movs	r1, #20
 8012582:	200e      	movs	r0, #14
 8012584:	f001 fa52 	bl	8013a2c <pbuf_alloc>
 8012588:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801258a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801258c:	2b00      	cmp	r3, #0
 801258e:	f000 80d4 	beq.w	801273a <ip4_frag+0x262>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8012592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012594:	895b      	ldrh	r3, [r3, #10]
 8012596:	2b13      	cmp	r3, #19
 8012598:	d806      	bhi.n	80125a8 <ip4_frag+0xd0>
 801259a:	4b6b      	ldr	r3, [pc, #428]	; (8012748 <ip4_frag+0x270>)
 801259c:	f240 3225 	movw	r2, #805	; 0x325
 80125a0:	496c      	ldr	r1, [pc, #432]	; (8012754 <ip4_frag+0x27c>)
 80125a2:	486b      	ldr	r0, [pc, #428]	; (8012750 <ip4_frag+0x278>)
 80125a4:	f00e fcd4 	bl	8020f50 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80125a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125aa:	685b      	ldr	r3, [r3, #4]
 80125ac:	2214      	movs	r2, #20
 80125ae:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80125b0:	4618      	mov	r0, r3
 80125b2:	f00e f868 	bl	8020686 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80125b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125b8:	685b      	ldr	r3, [r3, #4]
 80125ba:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 80125bc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80125be:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 80125c2:	e064      	b.n	801268e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80125c4:	68fb      	ldr	r3, [r7, #12]
 80125c6:	895a      	ldrh	r2, [r3, #10]
 80125c8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80125ca:	1ad3      	subs	r3, r2, r3
 80125cc:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80125ce:	68fb      	ldr	r3, [r7, #12]
 80125d0:	895b      	ldrh	r3, [r3, #10]
 80125d2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80125d4:	429a      	cmp	r2, r3
 80125d6:	d906      	bls.n	80125e6 <ip4_frag+0x10e>
 80125d8:	4b5b      	ldr	r3, [pc, #364]	; (8012748 <ip4_frag+0x270>)
 80125da:	f240 322d 	movw	r2, #813	; 0x32d
 80125de:	495e      	ldr	r1, [pc, #376]	; (8012758 <ip4_frag+0x280>)
 80125e0:	485b      	ldr	r0, [pc, #364]	; (8012750 <ip4_frag+0x278>)
 80125e2:	f00e fcb5 	bl	8020f50 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80125e6:	8bfa      	ldrh	r2, [r7, #30]
 80125e8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80125ec:	4293      	cmp	r3, r2
 80125ee:	bf28      	it	cs
 80125f0:	4613      	movcs	r3, r2
 80125f2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80125f6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80125fa:	2b00      	cmp	r3, #0
 80125fc:	d105      	bne.n	801260a <ip4_frag+0x132>
        poff = 0;
 80125fe:	2300      	movs	r3, #0
 8012600:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8012602:	68fb      	ldr	r3, [r7, #12]
 8012604:	681b      	ldr	r3, [r3, #0]
 8012606:	60fb      	str	r3, [r7, #12]
        continue;
 8012608:	e041      	b.n	801268e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801260a:	f7ff ff0d 	bl	8012428 <ip_frag_alloc_pbuf_custom_ref>
 801260e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8012610:	69bb      	ldr	r3, [r7, #24]
 8012612:	2b00      	cmp	r3, #0
 8012614:	d103      	bne.n	801261e <ip4_frag+0x146>
        pbuf_free(rambuf);
 8012616:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012618:	f001 fd1a 	bl	8014050 <pbuf_free>
        goto memerr;
 801261c:	e08e      	b.n	801273c <ip4_frag+0x264>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801261e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8012620:	68fb      	ldr	r3, [r7, #12]
 8012622:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8012624:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012626:	4413      	add	r3, r2
 8012628:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801262c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8012630:	9201      	str	r2, [sp, #4]
 8012632:	9300      	str	r3, [sp, #0]
 8012634:	4603      	mov	r3, r0
 8012636:	2241      	movs	r2, #65	; 0x41
 8012638:	2000      	movs	r0, #0
 801263a:	f001 fb1d 	bl	8013c78 <pbuf_alloced_custom>
 801263e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8012640:	697b      	ldr	r3, [r7, #20]
 8012642:	2b00      	cmp	r3, #0
 8012644:	d106      	bne.n	8012654 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8012646:	69b8      	ldr	r0, [r7, #24]
 8012648:	f7ff fef6 	bl	8012438 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801264c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801264e:	f001 fcff 	bl	8014050 <pbuf_free>
        goto memerr;
 8012652:	e073      	b.n	801273c <ip4_frag+0x264>
      }
      pbuf_ref(p);
 8012654:	68f8      	ldr	r0, [r7, #12]
 8012656:	f001 fda1 	bl	801419c <pbuf_ref>
      pcr->original = p;
 801265a:	69bb      	ldr	r3, [r7, #24]
 801265c:	68fa      	ldr	r2, [r7, #12]
 801265e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8012660:	69bb      	ldr	r3, [r7, #24]
 8012662:	4a3e      	ldr	r2, [pc, #248]	; (801275c <ip4_frag+0x284>)
 8012664:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8012666:	6979      	ldr	r1, [r7, #20]
 8012668:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801266a:	f001 fdbf 	bl	80141ec <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801266e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8012672:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8012676:	1ad3      	subs	r3, r2, r3
 8012678:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801267c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8012680:	2b00      	cmp	r3, #0
 8012682:	d004      	beq.n	801268e <ip4_frag+0x1b6>
        poff = 0;
 8012684:	2300      	movs	r3, #0
 8012686:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8012688:	68fb      	ldr	r3, [r7, #12]
 801268a:	681b      	ldr	r3, [r3, #0]
 801268c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801268e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8012692:	2b00      	cmp	r3, #0
 8012694:	d196      	bne.n	80125c4 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8012696:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8012698:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801269c:	4413      	add	r3, r2
 801269e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80126a0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80126a4:	68bb      	ldr	r3, [r7, #8]
 80126a6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80126a8:	3b14      	subs	r3, #20
 80126aa:	429a      	cmp	r2, r3
 80126ac:	bfd4      	ite	le
 80126ae:	2301      	movle	r3, #1
 80126b0:	2300      	movgt	r3, #0
 80126b2:	b2db      	uxtb	r3, r3
 80126b4:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80126b6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80126ba:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80126be:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 80126c0:	6a3b      	ldr	r3, [r7, #32]
 80126c2:	2b00      	cmp	r3, #0
 80126c4:	d002      	beq.n	80126cc <ip4_frag+0x1f4>
 80126c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126c8:	2b00      	cmp	r3, #0
 80126ca:	d003      	beq.n	80126d4 <ip4_frag+0x1fc>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80126cc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80126ce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80126d2:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80126d4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80126d6:	4618      	mov	r0, r3
 80126d8:	f7fd fb10 	bl	800fcfc <lwip_htons>
 80126dc:	4603      	mov	r3, r0
 80126de:	461a      	mov	r2, r3
 80126e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126e2:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80126e4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80126e6:	3314      	adds	r3, #20
 80126e8:	b29b      	uxth	r3, r3
 80126ea:	4618      	mov	r0, r3
 80126ec:	f7fd fb06 	bl	800fcfc <lwip_htons>
 80126f0:	4603      	mov	r3, r0
 80126f2:	461a      	mov	r2, r3
 80126f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126f6:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80126f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126fa:	2200      	movs	r2, #0
 80126fc:	729a      	strb	r2, [r3, #10]
 80126fe:	2200      	movs	r2, #0
 8012700:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8012702:	68bb      	ldr	r3, [r7, #8]
 8012704:	695b      	ldr	r3, [r3, #20]
 8012706:	687a      	ldr	r2, [r7, #4]
 8012708:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801270a:	68b8      	ldr	r0, [r7, #8]
 801270c:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801270e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012710:	f001 fc9e 	bl	8014050 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8012714:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012718:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801271a:	1ad3      	subs	r3, r2, r3
 801271c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8012720:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8012724:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012726:	4413      	add	r3, r2
 8012728:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801272c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012730:	2b00      	cmp	r3, #0
 8012732:	f47f af1a 	bne.w	801256a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8012736:	2300      	movs	r3, #0
 8012738:	e002      	b.n	8012740 <ip4_frag+0x268>
      goto memerr;
 801273a:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801273c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012740:	4618      	mov	r0, r3
 8012742:	3748      	adds	r7, #72	; 0x48
 8012744:	46bd      	mov	sp, r7
 8012746:	bd80      	pop	{r7, pc}
 8012748:	08024070 	.word	0x08024070
 801274c:	08024268 	.word	0x08024268
 8012750:	080240d4 	.word	0x080240d4
 8012754:	08024284 	.word	0x08024284
 8012758:	080242a4 	.word	0x080242a4
 801275c:	08012471 	.word	0x08012471

08012760 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8012760:	b480      	push	{r7}
 8012762:	b083      	sub	sp, #12
 8012764:	af00      	add	r7, sp, #0
 8012766:	4603      	mov	r3, r0
 8012768:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 801276a:	4b05      	ldr	r3, [pc, #20]	; (8012780 <ptr_to_mem+0x20>)
 801276c:	681a      	ldr	r2, [r3, #0]
 801276e:	88fb      	ldrh	r3, [r7, #6]
 8012770:	4413      	add	r3, r2
}
 8012772:	4618      	mov	r0, r3
 8012774:	370c      	adds	r7, #12
 8012776:	46bd      	mov	sp, r7
 8012778:	f85d 7b04 	ldr.w	r7, [sp], #4
 801277c:	4770      	bx	lr
 801277e:	bf00      	nop
 8012780:	240406d4 	.word	0x240406d4

08012784 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8012784:	b480      	push	{r7}
 8012786:	b083      	sub	sp, #12
 8012788:	af00      	add	r7, sp, #0
 801278a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	4a05      	ldr	r2, [pc, #20]	; (80127a4 <mem_to_ptr+0x20>)
 8012790:	6812      	ldr	r2, [r2, #0]
 8012792:	1a9b      	subs	r3, r3, r2
 8012794:	b29b      	uxth	r3, r3
}
 8012796:	4618      	mov	r0, r3
 8012798:	370c      	adds	r7, #12
 801279a:	46bd      	mov	sp, r7
 801279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127a0:	4770      	bx	lr
 80127a2:	bf00      	nop
 80127a4:	240406d4 	.word	0x240406d4

080127a8 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80127a8:	b590      	push	{r4, r7, lr}
 80127aa:	b085      	sub	sp, #20
 80127ac:	af00      	add	r7, sp, #0
 80127ae:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80127b0:	4b47      	ldr	r3, [pc, #284]	; (80128d0 <plug_holes+0x128>)
 80127b2:	681b      	ldr	r3, [r3, #0]
 80127b4:	687a      	ldr	r2, [r7, #4]
 80127b6:	429a      	cmp	r2, r3
 80127b8:	d206      	bcs.n	80127c8 <plug_holes+0x20>
 80127ba:	4b46      	ldr	r3, [pc, #280]	; (80128d4 <plug_holes+0x12c>)
 80127bc:	f240 12df 	movw	r2, #479	; 0x1df
 80127c0:	4945      	ldr	r1, [pc, #276]	; (80128d8 <plug_holes+0x130>)
 80127c2:	4846      	ldr	r0, [pc, #280]	; (80128dc <plug_holes+0x134>)
 80127c4:	f00e fbc4 	bl	8020f50 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80127c8:	4b45      	ldr	r3, [pc, #276]	; (80128e0 <plug_holes+0x138>)
 80127ca:	681b      	ldr	r3, [r3, #0]
 80127cc:	687a      	ldr	r2, [r7, #4]
 80127ce:	429a      	cmp	r2, r3
 80127d0:	d306      	bcc.n	80127e0 <plug_holes+0x38>
 80127d2:	4b40      	ldr	r3, [pc, #256]	; (80128d4 <plug_holes+0x12c>)
 80127d4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80127d8:	4942      	ldr	r1, [pc, #264]	; (80128e4 <plug_holes+0x13c>)
 80127da:	4840      	ldr	r0, [pc, #256]	; (80128dc <plug_holes+0x134>)
 80127dc:	f00e fbb8 	bl	8020f50 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80127e0:	687b      	ldr	r3, [r7, #4]
 80127e2:	791b      	ldrb	r3, [r3, #4]
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	d006      	beq.n	80127f6 <plug_holes+0x4e>
 80127e8:	4b3a      	ldr	r3, [pc, #232]	; (80128d4 <plug_holes+0x12c>)
 80127ea:	f240 12e1 	movw	r2, #481	; 0x1e1
 80127ee:	493e      	ldr	r1, [pc, #248]	; (80128e8 <plug_holes+0x140>)
 80127f0:	483a      	ldr	r0, [pc, #232]	; (80128dc <plug_holes+0x134>)
 80127f2:	f00e fbad 	bl	8020f50 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	881b      	ldrh	r3, [r3, #0]
 80127fa:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 80127fe:	4293      	cmp	r3, r2
 8012800:	d906      	bls.n	8012810 <plug_holes+0x68>
 8012802:	4b34      	ldr	r3, [pc, #208]	; (80128d4 <plug_holes+0x12c>)
 8012804:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8012808:	4938      	ldr	r1, [pc, #224]	; (80128ec <plug_holes+0x144>)
 801280a:	4834      	ldr	r0, [pc, #208]	; (80128dc <plug_holes+0x134>)
 801280c:	f00e fba0 	bl	8020f50 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8012810:	687b      	ldr	r3, [r7, #4]
 8012812:	881b      	ldrh	r3, [r3, #0]
 8012814:	4618      	mov	r0, r3
 8012816:	f7ff ffa3 	bl	8012760 <ptr_to_mem>
 801281a:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 801281c:	687a      	ldr	r2, [r7, #4]
 801281e:	68fb      	ldr	r3, [r7, #12]
 8012820:	429a      	cmp	r2, r3
 8012822:	d025      	beq.n	8012870 <plug_holes+0xc8>
 8012824:	68fb      	ldr	r3, [r7, #12]
 8012826:	791b      	ldrb	r3, [r3, #4]
 8012828:	2b00      	cmp	r3, #0
 801282a:	d121      	bne.n	8012870 <plug_holes+0xc8>
 801282c:	4b2c      	ldr	r3, [pc, #176]	; (80128e0 <plug_holes+0x138>)
 801282e:	681b      	ldr	r3, [r3, #0]
 8012830:	68fa      	ldr	r2, [r7, #12]
 8012832:	429a      	cmp	r2, r3
 8012834:	d01c      	beq.n	8012870 <plug_holes+0xc8>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8012836:	4b2e      	ldr	r3, [pc, #184]	; (80128f0 <plug_holes+0x148>)
 8012838:	681b      	ldr	r3, [r3, #0]
 801283a:	68fa      	ldr	r2, [r7, #12]
 801283c:	429a      	cmp	r2, r3
 801283e:	d102      	bne.n	8012846 <plug_holes+0x9e>
      lfree = mem;
 8012840:	4a2b      	ldr	r2, [pc, #172]	; (80128f0 <plug_holes+0x148>)
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8012846:	68fb      	ldr	r3, [r7, #12]
 8012848:	881a      	ldrh	r2, [r3, #0]
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 801284e:	68fb      	ldr	r3, [r7, #12]
 8012850:	881b      	ldrh	r3, [r3, #0]
 8012852:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8012856:	4293      	cmp	r3, r2
 8012858:	d00a      	beq.n	8012870 <plug_holes+0xc8>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 801285a:	68fb      	ldr	r3, [r7, #12]
 801285c:	881b      	ldrh	r3, [r3, #0]
 801285e:	4618      	mov	r0, r3
 8012860:	f7ff ff7e 	bl	8012760 <ptr_to_mem>
 8012864:	4604      	mov	r4, r0
 8012866:	6878      	ldr	r0, [r7, #4]
 8012868:	f7ff ff8c 	bl	8012784 <mem_to_ptr>
 801286c:	4603      	mov	r3, r0
 801286e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	885b      	ldrh	r3, [r3, #2]
 8012874:	4618      	mov	r0, r3
 8012876:	f7ff ff73 	bl	8012760 <ptr_to_mem>
 801287a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 801287c:	68ba      	ldr	r2, [r7, #8]
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	429a      	cmp	r2, r3
 8012882:	d020      	beq.n	80128c6 <plug_holes+0x11e>
 8012884:	68bb      	ldr	r3, [r7, #8]
 8012886:	791b      	ldrb	r3, [r3, #4]
 8012888:	2b00      	cmp	r3, #0
 801288a:	d11c      	bne.n	80128c6 <plug_holes+0x11e>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 801288c:	4b18      	ldr	r3, [pc, #96]	; (80128f0 <plug_holes+0x148>)
 801288e:	681b      	ldr	r3, [r3, #0]
 8012890:	687a      	ldr	r2, [r7, #4]
 8012892:	429a      	cmp	r2, r3
 8012894:	d102      	bne.n	801289c <plug_holes+0xf4>
      lfree = pmem;
 8012896:	4a16      	ldr	r2, [pc, #88]	; (80128f0 <plug_holes+0x148>)
 8012898:	68bb      	ldr	r3, [r7, #8]
 801289a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	881a      	ldrh	r2, [r3, #0]
 80128a0:	68bb      	ldr	r3, [r7, #8]
 80128a2:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	881b      	ldrh	r3, [r3, #0]
 80128a8:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 80128ac:	4293      	cmp	r3, r2
 80128ae:	d00a      	beq.n	80128c6 <plug_holes+0x11e>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	881b      	ldrh	r3, [r3, #0]
 80128b4:	4618      	mov	r0, r3
 80128b6:	f7ff ff53 	bl	8012760 <ptr_to_mem>
 80128ba:	4604      	mov	r4, r0
 80128bc:	68b8      	ldr	r0, [r7, #8]
 80128be:	f7ff ff61 	bl	8012784 <mem_to_ptr>
 80128c2:	4603      	mov	r3, r0
 80128c4:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80128c6:	bf00      	nop
 80128c8:	3714      	adds	r7, #20
 80128ca:	46bd      	mov	sp, r7
 80128cc:	bd90      	pop	{r4, r7, pc}
 80128ce:	bf00      	nop
 80128d0:	240406d4 	.word	0x240406d4
 80128d4:	080242b4 	.word	0x080242b4
 80128d8:	08024304 	.word	0x08024304
 80128dc:	0802431c 	.word	0x0802431c
 80128e0:	240406d8 	.word	0x240406d8
 80128e4:	08024344 	.word	0x08024344
 80128e8:	08024360 	.word	0x08024360
 80128ec:	0802437c 	.word	0x0802437c
 80128f0:	240406e0 	.word	0x240406e0

080128f4 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80128f4:	b580      	push	{r7, lr}
 80128f6:	b082      	sub	sp, #8
 80128f8:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80128fa:	4b1d      	ldr	r3, [pc, #116]	; (8012970 <mem_init+0x7c>)
 80128fc:	4a1d      	ldr	r2, [pc, #116]	; (8012974 <mem_init+0x80>)
 80128fe:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8012900:	4b1b      	ldr	r3, [pc, #108]	; (8012970 <mem_init+0x7c>)
 8012902:	681b      	ldr	r3, [r3, #0]
 8012904:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 801290c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	2200      	movs	r2, #0
 8012912:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	2200      	movs	r2, #0
 8012918:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 801291a:	f643 70e8 	movw	r0, #16360	; 0x3fe8
 801291e:	f7ff ff1f 	bl	8012760 <ptr_to_mem>
 8012922:	4602      	mov	r2, r0
 8012924:	4b14      	ldr	r3, [pc, #80]	; (8012978 <mem_init+0x84>)
 8012926:	601a      	str	r2, [r3, #0]
  ram_end->used = 1;
 8012928:	4b13      	ldr	r3, [pc, #76]	; (8012978 <mem_init+0x84>)
 801292a:	681b      	ldr	r3, [r3, #0]
 801292c:	2201      	movs	r2, #1
 801292e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8012930:	4b11      	ldr	r3, [pc, #68]	; (8012978 <mem_init+0x84>)
 8012932:	681b      	ldr	r3, [r3, #0]
 8012934:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8012938:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 801293a:	4b0f      	ldr	r3, [pc, #60]	; (8012978 <mem_init+0x84>)
 801293c:	681b      	ldr	r3, [r3, #0]
 801293e:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8012942:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8012944:	4b0a      	ldr	r3, [pc, #40]	; (8012970 <mem_init+0x7c>)
 8012946:	681b      	ldr	r3, [r3, #0]
 8012948:	4a0c      	ldr	r2, [pc, #48]	; (801297c <mem_init+0x88>)
 801294a:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 801294c:	480c      	ldr	r0, [pc, #48]	; (8012980 <mem_init+0x8c>)
 801294e:	f003 f867 	bl	8015a20 <sys_mutex_new>
 8012952:	4603      	mov	r3, r0
 8012954:	2b00      	cmp	r3, #0
 8012956:	d006      	beq.n	8012966 <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8012958:	4b0a      	ldr	r3, [pc, #40]	; (8012984 <mem_init+0x90>)
 801295a:	f240 221f 	movw	r2, #543	; 0x21f
 801295e:	490a      	ldr	r1, [pc, #40]	; (8012988 <mem_init+0x94>)
 8012960:	480a      	ldr	r0, [pc, #40]	; (801298c <mem_init+0x98>)
 8012962:	f00e faf5 	bl	8020f50 <iprintf>
  }
}
 8012966:	bf00      	nop
 8012968:	3708      	adds	r7, #8
 801296a:	46bd      	mov	sp, r7
 801296c:	bd80      	pop	{r7, pc}
 801296e:	bf00      	nop
 8012970:	240406d4 	.word	0x240406d4
 8012974:	30044000 	.word	0x30044000
 8012978:	240406d8 	.word	0x240406d8
 801297c:	240406e0 	.word	0x240406e0
 8012980:	240406dc 	.word	0x240406dc
 8012984:	080242b4 	.word	0x080242b4
 8012988:	080243a8 	.word	0x080243a8
 801298c:	0802431c 	.word	0x0802431c

08012990 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8012990:	b580      	push	{r7, lr}
 8012992:	b086      	sub	sp, #24
 8012994:	af00      	add	r7, sp, #0
 8012996:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8012998:	6878      	ldr	r0, [r7, #4]
 801299a:	f7ff fef3 	bl	8012784 <mem_to_ptr>
 801299e:	4603      	mov	r3, r0
 80129a0:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	881b      	ldrh	r3, [r3, #0]
 80129a6:	4618      	mov	r0, r3
 80129a8:	f7ff feda 	bl	8012760 <ptr_to_mem>
 80129ac:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	885b      	ldrh	r3, [r3, #2]
 80129b2:	4618      	mov	r0, r3
 80129b4:	f7ff fed4 	bl	8012760 <ptr_to_mem>
 80129b8:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	881b      	ldrh	r3, [r3, #0]
 80129be:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 80129c2:	4293      	cmp	r3, r2
 80129c4:	d819      	bhi.n	80129fa <mem_link_valid+0x6a>
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	885b      	ldrh	r3, [r3, #2]
 80129ca:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 80129ce:	4293      	cmp	r3, r2
 80129d0:	d813      	bhi.n	80129fa <mem_link_valid+0x6a>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80129d6:	8afa      	ldrh	r2, [r7, #22]
 80129d8:	429a      	cmp	r2, r3
 80129da:	d004      	beq.n	80129e6 <mem_link_valid+0x56>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80129dc:	68fb      	ldr	r3, [r7, #12]
 80129de:	881b      	ldrh	r3, [r3, #0]
 80129e0:	8afa      	ldrh	r2, [r7, #22]
 80129e2:	429a      	cmp	r2, r3
 80129e4:	d109      	bne.n	80129fa <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80129e6:	4b08      	ldr	r3, [pc, #32]	; (8012a08 <mem_link_valid+0x78>)
 80129e8:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80129ea:	693a      	ldr	r2, [r7, #16]
 80129ec:	429a      	cmp	r2, r3
 80129ee:	d006      	beq.n	80129fe <mem_link_valid+0x6e>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80129f0:	693b      	ldr	r3, [r7, #16]
 80129f2:	885b      	ldrh	r3, [r3, #2]
 80129f4:	8afa      	ldrh	r2, [r7, #22]
 80129f6:	429a      	cmp	r2, r3
 80129f8:	d001      	beq.n	80129fe <mem_link_valid+0x6e>
    return 0;
 80129fa:	2300      	movs	r3, #0
 80129fc:	e000      	b.n	8012a00 <mem_link_valid+0x70>
  }
  return 1;
 80129fe:	2301      	movs	r3, #1
}
 8012a00:	4618      	mov	r0, r3
 8012a02:	3718      	adds	r7, #24
 8012a04:	46bd      	mov	sp, r7
 8012a06:	bd80      	pop	{r7, pc}
 8012a08:	240406d8 	.word	0x240406d8

08012a0c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8012a0c:	b580      	push	{r7, lr}
 8012a0e:	b088      	sub	sp, #32
 8012a10:	af00      	add	r7, sp, #0
 8012a12:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	2b00      	cmp	r3, #0
 8012a18:	d070      	beq.n	8012afc <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	f003 0303 	and.w	r3, r3, #3
 8012a20:	2b00      	cmp	r3, #0
 8012a22:	d00d      	beq.n	8012a40 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8012a24:	4b37      	ldr	r3, [pc, #220]	; (8012b04 <mem_free+0xf8>)
 8012a26:	f240 2273 	movw	r2, #627	; 0x273
 8012a2a:	4937      	ldr	r1, [pc, #220]	; (8012b08 <mem_free+0xfc>)
 8012a2c:	4837      	ldr	r0, [pc, #220]	; (8012b0c <mem_free+0x100>)
 8012a2e:	f00e fa8f 	bl	8020f50 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8012a32:	f003 f853 	bl	8015adc <sys_arch_protect>
 8012a36:	60f8      	str	r0, [r7, #12]
 8012a38:	68f8      	ldr	r0, [r7, #12]
 8012a3a:	f003 f85d 	bl	8015af8 <sys_arch_unprotect>
    return;
 8012a3e:	e05e      	b.n	8012afe <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	3b08      	subs	r3, #8
 8012a44:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8012a46:	4b32      	ldr	r3, [pc, #200]	; (8012b10 <mem_free+0x104>)
 8012a48:	681b      	ldr	r3, [r3, #0]
 8012a4a:	69fa      	ldr	r2, [r7, #28]
 8012a4c:	429a      	cmp	r2, r3
 8012a4e:	d306      	bcc.n	8012a5e <mem_free+0x52>
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	f103 020c 	add.w	r2, r3, #12
 8012a56:	4b2f      	ldr	r3, [pc, #188]	; (8012b14 <mem_free+0x108>)
 8012a58:	681b      	ldr	r3, [r3, #0]
 8012a5a:	429a      	cmp	r2, r3
 8012a5c:	d90d      	bls.n	8012a7a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8012a5e:	4b29      	ldr	r3, [pc, #164]	; (8012b04 <mem_free+0xf8>)
 8012a60:	f240 227f 	movw	r2, #639	; 0x27f
 8012a64:	492c      	ldr	r1, [pc, #176]	; (8012b18 <mem_free+0x10c>)
 8012a66:	4829      	ldr	r0, [pc, #164]	; (8012b0c <mem_free+0x100>)
 8012a68:	f00e fa72 	bl	8020f50 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8012a6c:	f003 f836 	bl	8015adc <sys_arch_protect>
 8012a70:	6138      	str	r0, [r7, #16]
 8012a72:	6938      	ldr	r0, [r7, #16]
 8012a74:	f003 f840 	bl	8015af8 <sys_arch_unprotect>
    return;
 8012a78:	e041      	b.n	8012afe <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8012a7a:	4828      	ldr	r0, [pc, #160]	; (8012b1c <mem_free+0x110>)
 8012a7c:	f002 ffec 	bl	8015a58 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8012a80:	69fb      	ldr	r3, [r7, #28]
 8012a82:	791b      	ldrb	r3, [r3, #4]
 8012a84:	2b00      	cmp	r3, #0
 8012a86:	d110      	bne.n	8012aaa <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8012a88:	4b1e      	ldr	r3, [pc, #120]	; (8012b04 <mem_free+0xf8>)
 8012a8a:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8012a8e:	4924      	ldr	r1, [pc, #144]	; (8012b20 <mem_free+0x114>)
 8012a90:	481e      	ldr	r0, [pc, #120]	; (8012b0c <mem_free+0x100>)
 8012a92:	f00e fa5d 	bl	8020f50 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8012a96:	4821      	ldr	r0, [pc, #132]	; (8012b1c <mem_free+0x110>)
 8012a98:	f002 ffed 	bl	8015a76 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8012a9c:	f003 f81e 	bl	8015adc <sys_arch_protect>
 8012aa0:	6178      	str	r0, [r7, #20]
 8012aa2:	6978      	ldr	r0, [r7, #20]
 8012aa4:	f003 f828 	bl	8015af8 <sys_arch_unprotect>
    return;
 8012aa8:	e029      	b.n	8012afe <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8012aaa:	69f8      	ldr	r0, [r7, #28]
 8012aac:	f7ff ff70 	bl	8012990 <mem_link_valid>
 8012ab0:	4603      	mov	r3, r0
 8012ab2:	2b00      	cmp	r3, #0
 8012ab4:	d110      	bne.n	8012ad8 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8012ab6:	4b13      	ldr	r3, [pc, #76]	; (8012b04 <mem_free+0xf8>)
 8012ab8:	f240 2295 	movw	r2, #661	; 0x295
 8012abc:	4919      	ldr	r1, [pc, #100]	; (8012b24 <mem_free+0x118>)
 8012abe:	4813      	ldr	r0, [pc, #76]	; (8012b0c <mem_free+0x100>)
 8012ac0:	f00e fa46 	bl	8020f50 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8012ac4:	4815      	ldr	r0, [pc, #84]	; (8012b1c <mem_free+0x110>)
 8012ac6:	f002 ffd6 	bl	8015a76 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8012aca:	f003 f807 	bl	8015adc <sys_arch_protect>
 8012ace:	61b8      	str	r0, [r7, #24]
 8012ad0:	69b8      	ldr	r0, [r7, #24]
 8012ad2:	f003 f811 	bl	8015af8 <sys_arch_unprotect>
    return;
 8012ad6:	e012      	b.n	8012afe <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8012ad8:	69fb      	ldr	r3, [r7, #28]
 8012ada:	2200      	movs	r2, #0
 8012adc:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8012ade:	4b12      	ldr	r3, [pc, #72]	; (8012b28 <mem_free+0x11c>)
 8012ae0:	681b      	ldr	r3, [r3, #0]
 8012ae2:	69fa      	ldr	r2, [r7, #28]
 8012ae4:	429a      	cmp	r2, r3
 8012ae6:	d202      	bcs.n	8012aee <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8012ae8:	4a0f      	ldr	r2, [pc, #60]	; (8012b28 <mem_free+0x11c>)
 8012aea:	69fb      	ldr	r3, [r7, #28]
 8012aec:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8012aee:	69f8      	ldr	r0, [r7, #28]
 8012af0:	f7ff fe5a 	bl	80127a8 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8012af4:	4809      	ldr	r0, [pc, #36]	; (8012b1c <mem_free+0x110>)
 8012af6:	f002 ffbe 	bl	8015a76 <sys_mutex_unlock>
 8012afa:	e000      	b.n	8012afe <mem_free+0xf2>
    return;
 8012afc:	bf00      	nop
}
 8012afe:	3720      	adds	r7, #32
 8012b00:	46bd      	mov	sp, r7
 8012b02:	bd80      	pop	{r7, pc}
 8012b04:	080242b4 	.word	0x080242b4
 8012b08:	080243c4 	.word	0x080243c4
 8012b0c:	0802431c 	.word	0x0802431c
 8012b10:	240406d4 	.word	0x240406d4
 8012b14:	240406d8 	.word	0x240406d8
 8012b18:	080243e8 	.word	0x080243e8
 8012b1c:	240406dc 	.word	0x240406dc
 8012b20:	08024404 	.word	0x08024404
 8012b24:	0802442c 	.word	0x0802442c
 8012b28:	240406e0 	.word	0x240406e0

08012b2c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8012b2c:	b580      	push	{r7, lr}
 8012b2e:	b088      	sub	sp, #32
 8012b30:	af00      	add	r7, sp, #0
 8012b32:	6078      	str	r0, [r7, #4]
 8012b34:	460b      	mov	r3, r1
 8012b36:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8012b38:	887b      	ldrh	r3, [r7, #2]
 8012b3a:	3303      	adds	r3, #3
 8012b3c:	b29b      	uxth	r3, r3
 8012b3e:	f023 0303 	bic.w	r3, r3, #3
 8012b42:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8012b44:	8bfb      	ldrh	r3, [r7, #30]
 8012b46:	2b0b      	cmp	r3, #11
 8012b48:	d801      	bhi.n	8012b4e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8012b4a:	230c      	movs	r3, #12
 8012b4c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8012b4e:	8bfb      	ldrh	r3, [r7, #30]
 8012b50:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8012b54:	4293      	cmp	r3, r2
 8012b56:	d803      	bhi.n	8012b60 <mem_trim+0x34>
 8012b58:	8bfa      	ldrh	r2, [r7, #30]
 8012b5a:	887b      	ldrh	r3, [r7, #2]
 8012b5c:	429a      	cmp	r2, r3
 8012b5e:	d201      	bcs.n	8012b64 <mem_trim+0x38>
    return NULL;
 8012b60:	2300      	movs	r3, #0
 8012b62:	e0dc      	b.n	8012d1e <mem_trim+0x1f2>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8012b64:	4b70      	ldr	r3, [pc, #448]	; (8012d28 <mem_trim+0x1fc>)
 8012b66:	681b      	ldr	r3, [r3, #0]
 8012b68:	687a      	ldr	r2, [r7, #4]
 8012b6a:	429a      	cmp	r2, r3
 8012b6c:	d304      	bcc.n	8012b78 <mem_trim+0x4c>
 8012b6e:	4b6f      	ldr	r3, [pc, #444]	; (8012d2c <mem_trim+0x200>)
 8012b70:	681b      	ldr	r3, [r3, #0]
 8012b72:	687a      	ldr	r2, [r7, #4]
 8012b74:	429a      	cmp	r2, r3
 8012b76:	d306      	bcc.n	8012b86 <mem_trim+0x5a>
 8012b78:	4b6d      	ldr	r3, [pc, #436]	; (8012d30 <mem_trim+0x204>)
 8012b7a:	f240 22d2 	movw	r2, #722	; 0x2d2
 8012b7e:	496d      	ldr	r1, [pc, #436]	; (8012d34 <mem_trim+0x208>)
 8012b80:	486d      	ldr	r0, [pc, #436]	; (8012d38 <mem_trim+0x20c>)
 8012b82:	f00e f9e5 	bl	8020f50 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8012b86:	4b68      	ldr	r3, [pc, #416]	; (8012d28 <mem_trim+0x1fc>)
 8012b88:	681b      	ldr	r3, [r3, #0]
 8012b8a:	687a      	ldr	r2, [r7, #4]
 8012b8c:	429a      	cmp	r2, r3
 8012b8e:	d304      	bcc.n	8012b9a <mem_trim+0x6e>
 8012b90:	4b66      	ldr	r3, [pc, #408]	; (8012d2c <mem_trim+0x200>)
 8012b92:	681b      	ldr	r3, [r3, #0]
 8012b94:	687a      	ldr	r2, [r7, #4]
 8012b96:	429a      	cmp	r2, r3
 8012b98:	d307      	bcc.n	8012baa <mem_trim+0x7e>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8012b9a:	f002 ff9f 	bl	8015adc <sys_arch_protect>
 8012b9e:	60b8      	str	r0, [r7, #8]
 8012ba0:	68b8      	ldr	r0, [r7, #8]
 8012ba2:	f002 ffa9 	bl	8015af8 <sys_arch_unprotect>
    return rmem;
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	e0b9      	b.n	8012d1e <mem_trim+0x1f2>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	3b08      	subs	r3, #8
 8012bae:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8012bb0:	69b8      	ldr	r0, [r7, #24]
 8012bb2:	f7ff fde7 	bl	8012784 <mem_to_ptr>
 8012bb6:	4603      	mov	r3, r0
 8012bb8:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8012bba:	69bb      	ldr	r3, [r7, #24]
 8012bbc:	881a      	ldrh	r2, [r3, #0]
 8012bbe:	8afb      	ldrh	r3, [r7, #22]
 8012bc0:	1ad3      	subs	r3, r2, r3
 8012bc2:	b29b      	uxth	r3, r3
 8012bc4:	3b08      	subs	r3, #8
 8012bc6:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8012bc8:	8bfa      	ldrh	r2, [r7, #30]
 8012bca:	8abb      	ldrh	r3, [r7, #20]
 8012bcc:	429a      	cmp	r2, r3
 8012bce:	d906      	bls.n	8012bde <mem_trim+0xb2>
 8012bd0:	4b57      	ldr	r3, [pc, #348]	; (8012d30 <mem_trim+0x204>)
 8012bd2:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8012bd6:	4959      	ldr	r1, [pc, #356]	; (8012d3c <mem_trim+0x210>)
 8012bd8:	4857      	ldr	r0, [pc, #348]	; (8012d38 <mem_trim+0x20c>)
 8012bda:	f00e f9b9 	bl	8020f50 <iprintf>
  if (newsize > size) {
 8012bde:	8bfa      	ldrh	r2, [r7, #30]
 8012be0:	8abb      	ldrh	r3, [r7, #20]
 8012be2:	429a      	cmp	r2, r3
 8012be4:	d901      	bls.n	8012bea <mem_trim+0xbe>
    /* not supported */
    return NULL;
 8012be6:	2300      	movs	r3, #0
 8012be8:	e099      	b.n	8012d1e <mem_trim+0x1f2>
  }
  if (newsize == size) {
 8012bea:	8bfa      	ldrh	r2, [r7, #30]
 8012bec:	8abb      	ldrh	r3, [r7, #20]
 8012bee:	429a      	cmp	r2, r3
 8012bf0:	d101      	bne.n	8012bf6 <mem_trim+0xca>
    /* No change in size, simply return */
    return rmem;
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	e093      	b.n	8012d1e <mem_trim+0x1f2>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8012bf6:	4852      	ldr	r0, [pc, #328]	; (8012d40 <mem_trim+0x214>)
 8012bf8:	f002 ff2e 	bl	8015a58 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8012bfc:	69bb      	ldr	r3, [r7, #24]
 8012bfe:	881b      	ldrh	r3, [r3, #0]
 8012c00:	4618      	mov	r0, r3
 8012c02:	f7ff fdad 	bl	8012760 <ptr_to_mem>
 8012c06:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8012c08:	693b      	ldr	r3, [r7, #16]
 8012c0a:	791b      	ldrb	r3, [r3, #4]
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	d141      	bne.n	8012c94 <mem_trim+0x168>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8012c10:	69bb      	ldr	r3, [r7, #24]
 8012c12:	881b      	ldrh	r3, [r3, #0]
 8012c14:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8012c18:	4293      	cmp	r3, r2
 8012c1a:	d106      	bne.n	8012c2a <mem_trim+0xfe>
 8012c1c:	4b44      	ldr	r3, [pc, #272]	; (8012d30 <mem_trim+0x204>)
 8012c1e:	f240 22f5 	movw	r2, #757	; 0x2f5
 8012c22:	4948      	ldr	r1, [pc, #288]	; (8012d44 <mem_trim+0x218>)
 8012c24:	4844      	ldr	r0, [pc, #272]	; (8012d38 <mem_trim+0x20c>)
 8012c26:	f00e f993 	bl	8020f50 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8012c2a:	693b      	ldr	r3, [r7, #16]
 8012c2c:	881b      	ldrh	r3, [r3, #0]
 8012c2e:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8012c30:	8afa      	ldrh	r2, [r7, #22]
 8012c32:	8bfb      	ldrh	r3, [r7, #30]
 8012c34:	4413      	add	r3, r2
 8012c36:	b29b      	uxth	r3, r3
 8012c38:	3308      	adds	r3, #8
 8012c3a:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8012c3c:	4b42      	ldr	r3, [pc, #264]	; (8012d48 <mem_trim+0x21c>)
 8012c3e:	681b      	ldr	r3, [r3, #0]
 8012c40:	693a      	ldr	r2, [r7, #16]
 8012c42:	429a      	cmp	r2, r3
 8012c44:	d106      	bne.n	8012c54 <mem_trim+0x128>
      lfree = ptr_to_mem(ptr2);
 8012c46:	89fb      	ldrh	r3, [r7, #14]
 8012c48:	4618      	mov	r0, r3
 8012c4a:	f7ff fd89 	bl	8012760 <ptr_to_mem>
 8012c4e:	4602      	mov	r2, r0
 8012c50:	4b3d      	ldr	r3, [pc, #244]	; (8012d48 <mem_trim+0x21c>)
 8012c52:	601a      	str	r2, [r3, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8012c54:	89fb      	ldrh	r3, [r7, #14]
 8012c56:	4618      	mov	r0, r3
 8012c58:	f7ff fd82 	bl	8012760 <ptr_to_mem>
 8012c5c:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8012c5e:	693b      	ldr	r3, [r7, #16]
 8012c60:	2200      	movs	r2, #0
 8012c62:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8012c64:	693b      	ldr	r3, [r7, #16]
 8012c66:	89ba      	ldrh	r2, [r7, #12]
 8012c68:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8012c6a:	693b      	ldr	r3, [r7, #16]
 8012c6c:	8afa      	ldrh	r2, [r7, #22]
 8012c6e:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8012c70:	69bb      	ldr	r3, [r7, #24]
 8012c72:	89fa      	ldrh	r2, [r7, #14]
 8012c74:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8012c76:	693b      	ldr	r3, [r7, #16]
 8012c78:	881b      	ldrh	r3, [r3, #0]
 8012c7a:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8012c7e:	4293      	cmp	r3, r2
 8012c80:	d049      	beq.n	8012d16 <mem_trim+0x1ea>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8012c82:	693b      	ldr	r3, [r7, #16]
 8012c84:	881b      	ldrh	r3, [r3, #0]
 8012c86:	4618      	mov	r0, r3
 8012c88:	f7ff fd6a 	bl	8012760 <ptr_to_mem>
 8012c8c:	4602      	mov	r2, r0
 8012c8e:	89fb      	ldrh	r3, [r7, #14]
 8012c90:	8053      	strh	r3, [r2, #2]
 8012c92:	e040      	b.n	8012d16 <mem_trim+0x1ea>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8012c94:	8bfb      	ldrh	r3, [r7, #30]
 8012c96:	f103 0214 	add.w	r2, r3, #20
 8012c9a:	8abb      	ldrh	r3, [r7, #20]
 8012c9c:	429a      	cmp	r2, r3
 8012c9e:	d83a      	bhi.n	8012d16 <mem_trim+0x1ea>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8012ca0:	8afa      	ldrh	r2, [r7, #22]
 8012ca2:	8bfb      	ldrh	r3, [r7, #30]
 8012ca4:	4413      	add	r3, r2
 8012ca6:	b29b      	uxth	r3, r3
 8012ca8:	3308      	adds	r3, #8
 8012caa:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8012cac:	69bb      	ldr	r3, [r7, #24]
 8012cae:	881b      	ldrh	r3, [r3, #0]
 8012cb0:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8012cb4:	4293      	cmp	r3, r2
 8012cb6:	d106      	bne.n	8012cc6 <mem_trim+0x19a>
 8012cb8:	4b1d      	ldr	r3, [pc, #116]	; (8012d30 <mem_trim+0x204>)
 8012cba:	f240 3216 	movw	r2, #790	; 0x316
 8012cbe:	4921      	ldr	r1, [pc, #132]	; (8012d44 <mem_trim+0x218>)
 8012cc0:	481d      	ldr	r0, [pc, #116]	; (8012d38 <mem_trim+0x20c>)
 8012cc2:	f00e f945 	bl	8020f50 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8012cc6:	89fb      	ldrh	r3, [r7, #14]
 8012cc8:	4618      	mov	r0, r3
 8012cca:	f7ff fd49 	bl	8012760 <ptr_to_mem>
 8012cce:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8012cd0:	4b1d      	ldr	r3, [pc, #116]	; (8012d48 <mem_trim+0x21c>)
 8012cd2:	681b      	ldr	r3, [r3, #0]
 8012cd4:	693a      	ldr	r2, [r7, #16]
 8012cd6:	429a      	cmp	r2, r3
 8012cd8:	d202      	bcs.n	8012ce0 <mem_trim+0x1b4>
      lfree = mem2;
 8012cda:	4a1b      	ldr	r2, [pc, #108]	; (8012d48 <mem_trim+0x21c>)
 8012cdc:	693b      	ldr	r3, [r7, #16]
 8012cde:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8012ce0:	693b      	ldr	r3, [r7, #16]
 8012ce2:	2200      	movs	r2, #0
 8012ce4:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8012ce6:	69bb      	ldr	r3, [r7, #24]
 8012ce8:	881a      	ldrh	r2, [r3, #0]
 8012cea:	693b      	ldr	r3, [r7, #16]
 8012cec:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8012cee:	693b      	ldr	r3, [r7, #16]
 8012cf0:	8afa      	ldrh	r2, [r7, #22]
 8012cf2:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8012cf4:	69bb      	ldr	r3, [r7, #24]
 8012cf6:	89fa      	ldrh	r2, [r7, #14]
 8012cf8:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8012cfa:	693b      	ldr	r3, [r7, #16]
 8012cfc:	881b      	ldrh	r3, [r3, #0]
 8012cfe:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8012d02:	4293      	cmp	r3, r2
 8012d04:	d007      	beq.n	8012d16 <mem_trim+0x1ea>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8012d06:	693b      	ldr	r3, [r7, #16]
 8012d08:	881b      	ldrh	r3, [r3, #0]
 8012d0a:	4618      	mov	r0, r3
 8012d0c:	f7ff fd28 	bl	8012760 <ptr_to_mem>
 8012d10:	4602      	mov	r2, r0
 8012d12:	89fb      	ldrh	r3, [r7, #14]
 8012d14:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8012d16:	480a      	ldr	r0, [pc, #40]	; (8012d40 <mem_trim+0x214>)
 8012d18:	f002 fead 	bl	8015a76 <sys_mutex_unlock>
  return rmem;
 8012d1c:	687b      	ldr	r3, [r7, #4]
}
 8012d1e:	4618      	mov	r0, r3
 8012d20:	3720      	adds	r7, #32
 8012d22:	46bd      	mov	sp, r7
 8012d24:	bd80      	pop	{r7, pc}
 8012d26:	bf00      	nop
 8012d28:	240406d4 	.word	0x240406d4
 8012d2c:	240406d8 	.word	0x240406d8
 8012d30:	080242b4 	.word	0x080242b4
 8012d34:	08024460 	.word	0x08024460
 8012d38:	0802431c 	.word	0x0802431c
 8012d3c:	08024478 	.word	0x08024478
 8012d40:	240406dc 	.word	0x240406dc
 8012d44:	08024498 	.word	0x08024498
 8012d48:	240406e0 	.word	0x240406e0

08012d4c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8012d4c:	b580      	push	{r7, lr}
 8012d4e:	b088      	sub	sp, #32
 8012d50:	af00      	add	r7, sp, #0
 8012d52:	4603      	mov	r3, r0
 8012d54:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8012d56:	88fb      	ldrh	r3, [r7, #6]
 8012d58:	2b00      	cmp	r3, #0
 8012d5a:	d101      	bne.n	8012d60 <mem_malloc+0x14>
    return NULL;
 8012d5c:	2300      	movs	r3, #0
 8012d5e:	e0e6      	b.n	8012f2e <mem_malloc+0x1e2>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8012d60:	88fb      	ldrh	r3, [r7, #6]
 8012d62:	3303      	adds	r3, #3
 8012d64:	b29b      	uxth	r3, r3
 8012d66:	f023 0303 	bic.w	r3, r3, #3
 8012d6a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8012d6c:	8bbb      	ldrh	r3, [r7, #28]
 8012d6e:	2b0b      	cmp	r3, #11
 8012d70:	d801      	bhi.n	8012d76 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8012d72:	230c      	movs	r3, #12
 8012d74:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8012d76:	8bbb      	ldrh	r3, [r7, #28]
 8012d78:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8012d7c:	4293      	cmp	r3, r2
 8012d7e:	d803      	bhi.n	8012d88 <mem_malloc+0x3c>
 8012d80:	8bba      	ldrh	r2, [r7, #28]
 8012d82:	88fb      	ldrh	r3, [r7, #6]
 8012d84:	429a      	cmp	r2, r3
 8012d86:	d201      	bcs.n	8012d8c <mem_malloc+0x40>
    return NULL;
 8012d88:	2300      	movs	r3, #0
 8012d8a:	e0d0      	b.n	8012f2e <mem_malloc+0x1e2>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8012d8c:	486a      	ldr	r0, [pc, #424]	; (8012f38 <mem_malloc+0x1ec>)
 8012d8e:	f002 fe63 	bl	8015a58 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8012d92:	4b6a      	ldr	r3, [pc, #424]	; (8012f3c <mem_malloc+0x1f0>)
 8012d94:	681b      	ldr	r3, [r3, #0]
 8012d96:	4618      	mov	r0, r3
 8012d98:	f7ff fcf4 	bl	8012784 <mem_to_ptr>
 8012d9c:	4603      	mov	r3, r0
 8012d9e:	83fb      	strh	r3, [r7, #30]
 8012da0:	e0b9      	b.n	8012f16 <mem_malloc+0x1ca>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8012da2:	8bfb      	ldrh	r3, [r7, #30]
 8012da4:	4618      	mov	r0, r3
 8012da6:	f7ff fcdb 	bl	8012760 <ptr_to_mem>
 8012daa:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8012dac:	697b      	ldr	r3, [r7, #20]
 8012dae:	791b      	ldrb	r3, [r3, #4]
 8012db0:	2b00      	cmp	r3, #0
 8012db2:	f040 80a9 	bne.w	8012f08 <mem_malloc+0x1bc>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8012db6:	697b      	ldr	r3, [r7, #20]
 8012db8:	881b      	ldrh	r3, [r3, #0]
 8012dba:	461a      	mov	r2, r3
 8012dbc:	8bfb      	ldrh	r3, [r7, #30]
 8012dbe:	1ad3      	subs	r3, r2, r3
 8012dc0:	f1a3 0208 	sub.w	r2, r3, #8
 8012dc4:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8012dc6:	429a      	cmp	r2, r3
 8012dc8:	f0c0 809e 	bcc.w	8012f08 <mem_malloc+0x1bc>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8012dcc:	697b      	ldr	r3, [r7, #20]
 8012dce:	881b      	ldrh	r3, [r3, #0]
 8012dd0:	461a      	mov	r2, r3
 8012dd2:	8bfb      	ldrh	r3, [r7, #30]
 8012dd4:	1ad3      	subs	r3, r2, r3
 8012dd6:	f1a3 0208 	sub.w	r2, r3, #8
 8012dda:	8bbb      	ldrh	r3, [r7, #28]
 8012ddc:	3314      	adds	r3, #20
 8012dde:	429a      	cmp	r2, r3
 8012de0:	d335      	bcc.n	8012e4e <mem_malloc+0x102>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8012de2:	8bfa      	ldrh	r2, [r7, #30]
 8012de4:	8bbb      	ldrh	r3, [r7, #28]
 8012de6:	4413      	add	r3, r2
 8012de8:	b29b      	uxth	r3, r3
 8012dea:	3308      	adds	r3, #8
 8012dec:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8012dee:	8a7b      	ldrh	r3, [r7, #18]
 8012df0:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8012df4:	4293      	cmp	r3, r2
 8012df6:	d106      	bne.n	8012e06 <mem_malloc+0xba>
 8012df8:	4b51      	ldr	r3, [pc, #324]	; (8012f40 <mem_malloc+0x1f4>)
 8012dfa:	f240 3287 	movw	r2, #903	; 0x387
 8012dfe:	4951      	ldr	r1, [pc, #324]	; (8012f44 <mem_malloc+0x1f8>)
 8012e00:	4851      	ldr	r0, [pc, #324]	; (8012f48 <mem_malloc+0x1fc>)
 8012e02:	f00e f8a5 	bl	8020f50 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8012e06:	8a7b      	ldrh	r3, [r7, #18]
 8012e08:	4618      	mov	r0, r3
 8012e0a:	f7ff fca9 	bl	8012760 <ptr_to_mem>
 8012e0e:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8012e10:	68fb      	ldr	r3, [r7, #12]
 8012e12:	2200      	movs	r2, #0
 8012e14:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8012e16:	697b      	ldr	r3, [r7, #20]
 8012e18:	881a      	ldrh	r2, [r3, #0]
 8012e1a:	68fb      	ldr	r3, [r7, #12]
 8012e1c:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8012e1e:	68fb      	ldr	r3, [r7, #12]
 8012e20:	8bfa      	ldrh	r2, [r7, #30]
 8012e22:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8012e24:	697b      	ldr	r3, [r7, #20]
 8012e26:	8a7a      	ldrh	r2, [r7, #18]
 8012e28:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8012e2a:	697b      	ldr	r3, [r7, #20]
 8012e2c:	2201      	movs	r2, #1
 8012e2e:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8012e30:	68fb      	ldr	r3, [r7, #12]
 8012e32:	881b      	ldrh	r3, [r3, #0]
 8012e34:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8012e38:	4293      	cmp	r3, r2
 8012e3a:	d00b      	beq.n	8012e54 <mem_malloc+0x108>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8012e3c:	68fb      	ldr	r3, [r7, #12]
 8012e3e:	881b      	ldrh	r3, [r3, #0]
 8012e40:	4618      	mov	r0, r3
 8012e42:	f7ff fc8d 	bl	8012760 <ptr_to_mem>
 8012e46:	4602      	mov	r2, r0
 8012e48:	8a7b      	ldrh	r3, [r7, #18]
 8012e4a:	8053      	strh	r3, [r2, #2]
 8012e4c:	e002      	b.n	8012e54 <mem_malloc+0x108>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8012e4e:	697b      	ldr	r3, [r7, #20]
 8012e50:	2201      	movs	r2, #1
 8012e52:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8012e54:	4b39      	ldr	r3, [pc, #228]	; (8012f3c <mem_malloc+0x1f0>)
 8012e56:	681b      	ldr	r3, [r3, #0]
 8012e58:	697a      	ldr	r2, [r7, #20]
 8012e5a:	429a      	cmp	r2, r3
 8012e5c:	d127      	bne.n	8012eae <mem_malloc+0x162>
          struct mem *cur = lfree;
 8012e5e:	4b37      	ldr	r3, [pc, #220]	; (8012f3c <mem_malloc+0x1f0>)
 8012e60:	681b      	ldr	r3, [r3, #0]
 8012e62:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8012e64:	e005      	b.n	8012e72 <mem_malloc+0x126>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8012e66:	69bb      	ldr	r3, [r7, #24]
 8012e68:	881b      	ldrh	r3, [r3, #0]
 8012e6a:	4618      	mov	r0, r3
 8012e6c:	f7ff fc78 	bl	8012760 <ptr_to_mem>
 8012e70:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8012e72:	69bb      	ldr	r3, [r7, #24]
 8012e74:	791b      	ldrb	r3, [r3, #4]
 8012e76:	2b00      	cmp	r3, #0
 8012e78:	d004      	beq.n	8012e84 <mem_malloc+0x138>
 8012e7a:	4b34      	ldr	r3, [pc, #208]	; (8012f4c <mem_malloc+0x200>)
 8012e7c:	681b      	ldr	r3, [r3, #0]
 8012e7e:	69ba      	ldr	r2, [r7, #24]
 8012e80:	429a      	cmp	r2, r3
 8012e82:	d1f0      	bne.n	8012e66 <mem_malloc+0x11a>
          }
          lfree = cur;
 8012e84:	4a2d      	ldr	r2, [pc, #180]	; (8012f3c <mem_malloc+0x1f0>)
 8012e86:	69bb      	ldr	r3, [r7, #24]
 8012e88:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8012e8a:	4b2c      	ldr	r3, [pc, #176]	; (8012f3c <mem_malloc+0x1f0>)
 8012e8c:	681a      	ldr	r2, [r3, #0]
 8012e8e:	4b2f      	ldr	r3, [pc, #188]	; (8012f4c <mem_malloc+0x200>)
 8012e90:	681b      	ldr	r3, [r3, #0]
 8012e92:	429a      	cmp	r2, r3
 8012e94:	d00b      	beq.n	8012eae <mem_malloc+0x162>
 8012e96:	4b29      	ldr	r3, [pc, #164]	; (8012f3c <mem_malloc+0x1f0>)
 8012e98:	681b      	ldr	r3, [r3, #0]
 8012e9a:	791b      	ldrb	r3, [r3, #4]
 8012e9c:	2b00      	cmp	r3, #0
 8012e9e:	d006      	beq.n	8012eae <mem_malloc+0x162>
 8012ea0:	4b27      	ldr	r3, [pc, #156]	; (8012f40 <mem_malloc+0x1f4>)
 8012ea2:	f240 32b5 	movw	r2, #949	; 0x3b5
 8012ea6:	492a      	ldr	r1, [pc, #168]	; (8012f50 <mem_malloc+0x204>)
 8012ea8:	4827      	ldr	r0, [pc, #156]	; (8012f48 <mem_malloc+0x1fc>)
 8012eaa:	f00e f851 	bl	8020f50 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8012eae:	4822      	ldr	r0, [pc, #136]	; (8012f38 <mem_malloc+0x1ec>)
 8012eb0:	f002 fde1 	bl	8015a76 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8012eb4:	8bba      	ldrh	r2, [r7, #28]
 8012eb6:	697b      	ldr	r3, [r7, #20]
 8012eb8:	4413      	add	r3, r2
 8012eba:	3308      	adds	r3, #8
 8012ebc:	4a23      	ldr	r2, [pc, #140]	; (8012f4c <mem_malloc+0x200>)
 8012ebe:	6812      	ldr	r2, [r2, #0]
 8012ec0:	4293      	cmp	r3, r2
 8012ec2:	d906      	bls.n	8012ed2 <mem_malloc+0x186>
 8012ec4:	4b1e      	ldr	r3, [pc, #120]	; (8012f40 <mem_malloc+0x1f4>)
 8012ec6:	f240 32ba 	movw	r2, #954	; 0x3ba
 8012eca:	4922      	ldr	r1, [pc, #136]	; (8012f54 <mem_malloc+0x208>)
 8012ecc:	481e      	ldr	r0, [pc, #120]	; (8012f48 <mem_malloc+0x1fc>)
 8012ece:	f00e f83f 	bl	8020f50 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8012ed2:	697b      	ldr	r3, [r7, #20]
 8012ed4:	f003 0303 	and.w	r3, r3, #3
 8012ed8:	2b00      	cmp	r3, #0
 8012eda:	d006      	beq.n	8012eea <mem_malloc+0x19e>
 8012edc:	4b18      	ldr	r3, [pc, #96]	; (8012f40 <mem_malloc+0x1f4>)
 8012ede:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 8012ee2:	491d      	ldr	r1, [pc, #116]	; (8012f58 <mem_malloc+0x20c>)
 8012ee4:	4818      	ldr	r0, [pc, #96]	; (8012f48 <mem_malloc+0x1fc>)
 8012ee6:	f00e f833 	bl	8020f50 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8012eea:	697b      	ldr	r3, [r7, #20]
 8012eec:	f003 0303 	and.w	r3, r3, #3
 8012ef0:	2b00      	cmp	r3, #0
 8012ef2:	d006      	beq.n	8012f02 <mem_malloc+0x1b6>
 8012ef4:	4b12      	ldr	r3, [pc, #72]	; (8012f40 <mem_malloc+0x1f4>)
 8012ef6:	f240 32be 	movw	r2, #958	; 0x3be
 8012efa:	4918      	ldr	r1, [pc, #96]	; (8012f5c <mem_malloc+0x210>)
 8012efc:	4812      	ldr	r0, [pc, #72]	; (8012f48 <mem_malloc+0x1fc>)
 8012efe:	f00e f827 	bl	8020f50 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8012f02:	697b      	ldr	r3, [r7, #20]
 8012f04:	3308      	adds	r3, #8
 8012f06:	e012      	b.n	8012f2e <mem_malloc+0x1e2>
         ptr = ptr_to_mem(ptr)->next) {
 8012f08:	8bfb      	ldrh	r3, [r7, #30]
 8012f0a:	4618      	mov	r0, r3
 8012f0c:	f7ff fc28 	bl	8012760 <ptr_to_mem>
 8012f10:	4603      	mov	r3, r0
 8012f12:	881b      	ldrh	r3, [r3, #0]
 8012f14:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8012f16:	8bfa      	ldrh	r2, [r7, #30]
 8012f18:	8bb9      	ldrh	r1, [r7, #28]
 8012f1a:	f643 73e8 	movw	r3, #16360	; 0x3fe8
 8012f1e:	1a5b      	subs	r3, r3, r1
 8012f20:	429a      	cmp	r2, r3
 8012f22:	f4ff af3e 	bcc.w	8012da2 <mem_malloc+0x56>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8012f26:	4804      	ldr	r0, [pc, #16]	; (8012f38 <mem_malloc+0x1ec>)
 8012f28:	f002 fda5 	bl	8015a76 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8012f2c:	2300      	movs	r3, #0
}
 8012f2e:	4618      	mov	r0, r3
 8012f30:	3720      	adds	r7, #32
 8012f32:	46bd      	mov	sp, r7
 8012f34:	bd80      	pop	{r7, pc}
 8012f36:	bf00      	nop
 8012f38:	240406dc 	.word	0x240406dc
 8012f3c:	240406e0 	.word	0x240406e0
 8012f40:	080242b4 	.word	0x080242b4
 8012f44:	08024498 	.word	0x08024498
 8012f48:	0802431c 	.word	0x0802431c
 8012f4c:	240406d8 	.word	0x240406d8
 8012f50:	080244ac 	.word	0x080244ac
 8012f54:	080244c8 	.word	0x080244c8
 8012f58:	080244f8 	.word	0x080244f8
 8012f5c:	08024528 	.word	0x08024528

08012f60 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8012f60:	b480      	push	{r7}
 8012f62:	b085      	sub	sp, #20
 8012f64:	af00      	add	r7, sp, #0
 8012f66:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8012f68:	687b      	ldr	r3, [r7, #4]
 8012f6a:	689b      	ldr	r3, [r3, #8]
 8012f6c:	2200      	movs	r2, #0
 8012f6e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	685b      	ldr	r3, [r3, #4]
 8012f74:	3303      	adds	r3, #3
 8012f76:	f023 0303 	bic.w	r3, r3, #3
 8012f7a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8012f7c:	2300      	movs	r3, #0
 8012f7e:	60fb      	str	r3, [r7, #12]
 8012f80:	e011      	b.n	8012fa6 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	689b      	ldr	r3, [r3, #8]
 8012f86:	681a      	ldr	r2, [r3, #0]
 8012f88:	68bb      	ldr	r3, [r7, #8]
 8012f8a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8012f8c:	687b      	ldr	r3, [r7, #4]
 8012f8e:	689b      	ldr	r3, [r3, #8]
 8012f90:	68ba      	ldr	r2, [r7, #8]
 8012f92:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8012f94:	687b      	ldr	r3, [r7, #4]
 8012f96:	881b      	ldrh	r3, [r3, #0]
 8012f98:	461a      	mov	r2, r3
 8012f9a:	68bb      	ldr	r3, [r7, #8]
 8012f9c:	4413      	add	r3, r2
 8012f9e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8012fa0:	68fb      	ldr	r3, [r7, #12]
 8012fa2:	3301      	adds	r3, #1
 8012fa4:	60fb      	str	r3, [r7, #12]
 8012fa6:	687b      	ldr	r3, [r7, #4]
 8012fa8:	885b      	ldrh	r3, [r3, #2]
 8012faa:	461a      	mov	r2, r3
 8012fac:	68fb      	ldr	r3, [r7, #12]
 8012fae:	4293      	cmp	r3, r2
 8012fb0:	dbe7      	blt.n	8012f82 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8012fb2:	bf00      	nop
 8012fb4:	3714      	adds	r7, #20
 8012fb6:	46bd      	mov	sp, r7
 8012fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fbc:	4770      	bx	lr
	...

08012fc0 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8012fc0:	b580      	push	{r7, lr}
 8012fc2:	b082      	sub	sp, #8
 8012fc4:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8012fc6:	2300      	movs	r3, #0
 8012fc8:	80fb      	strh	r3, [r7, #6]
 8012fca:	e009      	b.n	8012fe0 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8012fcc:	88fb      	ldrh	r3, [r7, #6]
 8012fce:	4a08      	ldr	r2, [pc, #32]	; (8012ff0 <memp_init+0x30>)
 8012fd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012fd4:	4618      	mov	r0, r3
 8012fd6:	f7ff ffc3 	bl	8012f60 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8012fda:	88fb      	ldrh	r3, [r7, #6]
 8012fdc:	3301      	adds	r3, #1
 8012fde:	80fb      	strh	r3, [r7, #6]
 8012fe0:	88fb      	ldrh	r3, [r7, #6]
 8012fe2:	2b0c      	cmp	r3, #12
 8012fe4:	d9f2      	bls.n	8012fcc <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8012fe6:	bf00      	nop
 8012fe8:	3708      	adds	r7, #8
 8012fea:	46bd      	mov	sp, r7
 8012fec:	bd80      	pop	{r7, pc}
 8012fee:	bf00      	nop
 8012ff0:	08026fe4 	.word	0x08026fe4

08012ff4 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8012ff4:	b580      	push	{r7, lr}
 8012ff6:	b084      	sub	sp, #16
 8012ff8:	af00      	add	r7, sp, #0
 8012ffa:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8012ffc:	f002 fd6e 	bl	8015adc <sys_arch_protect>
 8013000:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8013002:	687b      	ldr	r3, [r7, #4]
 8013004:	689b      	ldr	r3, [r3, #8]
 8013006:	681b      	ldr	r3, [r3, #0]
 8013008:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 801300a:	68bb      	ldr	r3, [r7, #8]
 801300c:	2b00      	cmp	r3, #0
 801300e:	d015      	beq.n	801303c <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	689b      	ldr	r3, [r3, #8]
 8013014:	68ba      	ldr	r2, [r7, #8]
 8013016:	6812      	ldr	r2, [r2, #0]
 8013018:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 801301a:	68bb      	ldr	r3, [r7, #8]
 801301c:	f003 0303 	and.w	r3, r3, #3
 8013020:	2b00      	cmp	r3, #0
 8013022:	d006      	beq.n	8013032 <do_memp_malloc_pool+0x3e>
 8013024:	4b09      	ldr	r3, [pc, #36]	; (801304c <do_memp_malloc_pool+0x58>)
 8013026:	f240 1219 	movw	r2, #281	; 0x119
 801302a:	4909      	ldr	r1, [pc, #36]	; (8013050 <do_memp_malloc_pool+0x5c>)
 801302c:	4809      	ldr	r0, [pc, #36]	; (8013054 <do_memp_malloc_pool+0x60>)
 801302e:	f00d ff8f 	bl	8020f50 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8013032:	68f8      	ldr	r0, [r7, #12]
 8013034:	f002 fd60 	bl	8015af8 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8013038:	68bb      	ldr	r3, [r7, #8]
 801303a:	e003      	b.n	8013044 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 801303c:	68f8      	ldr	r0, [r7, #12]
 801303e:	f002 fd5b 	bl	8015af8 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8013042:	2300      	movs	r3, #0
}
 8013044:	4618      	mov	r0, r3
 8013046:	3710      	adds	r7, #16
 8013048:	46bd      	mov	sp, r7
 801304a:	bd80      	pop	{r7, pc}
 801304c:	0802454c 	.word	0x0802454c
 8013050:	0802459c 	.word	0x0802459c
 8013054:	080245c0 	.word	0x080245c0

08013058 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8013058:	b580      	push	{r7, lr}
 801305a:	b082      	sub	sp, #8
 801305c:	af00      	add	r7, sp, #0
 801305e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	2b00      	cmp	r3, #0
 8013064:	d106      	bne.n	8013074 <memp_malloc_pool+0x1c>
 8013066:	4b0a      	ldr	r3, [pc, #40]	; (8013090 <memp_malloc_pool+0x38>)
 8013068:	f44f 729e 	mov.w	r2, #316	; 0x13c
 801306c:	4909      	ldr	r1, [pc, #36]	; (8013094 <memp_malloc_pool+0x3c>)
 801306e:	480a      	ldr	r0, [pc, #40]	; (8013098 <memp_malloc_pool+0x40>)
 8013070:	f00d ff6e 	bl	8020f50 <iprintf>
  if (desc == NULL) {
 8013074:	687b      	ldr	r3, [r7, #4]
 8013076:	2b00      	cmp	r3, #0
 8013078:	d101      	bne.n	801307e <memp_malloc_pool+0x26>
    return NULL;
 801307a:	2300      	movs	r3, #0
 801307c:	e003      	b.n	8013086 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 801307e:	6878      	ldr	r0, [r7, #4]
 8013080:	f7ff ffb8 	bl	8012ff4 <do_memp_malloc_pool>
 8013084:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8013086:	4618      	mov	r0, r3
 8013088:	3708      	adds	r7, #8
 801308a:	46bd      	mov	sp, r7
 801308c:	bd80      	pop	{r7, pc}
 801308e:	bf00      	nop
 8013090:	0802454c 	.word	0x0802454c
 8013094:	080245e8 	.word	0x080245e8
 8013098:	080245c0 	.word	0x080245c0

0801309c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 801309c:	b580      	push	{r7, lr}
 801309e:	b084      	sub	sp, #16
 80130a0:	af00      	add	r7, sp, #0
 80130a2:	4603      	mov	r3, r0
 80130a4:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80130a6:	79fb      	ldrb	r3, [r7, #7]
 80130a8:	2b0c      	cmp	r3, #12
 80130aa:	d908      	bls.n	80130be <memp_malloc+0x22>
 80130ac:	4b0a      	ldr	r3, [pc, #40]	; (80130d8 <memp_malloc+0x3c>)
 80130ae:	f240 1257 	movw	r2, #343	; 0x157
 80130b2:	490a      	ldr	r1, [pc, #40]	; (80130dc <memp_malloc+0x40>)
 80130b4:	480a      	ldr	r0, [pc, #40]	; (80130e0 <memp_malloc+0x44>)
 80130b6:	f00d ff4b 	bl	8020f50 <iprintf>
 80130ba:	2300      	movs	r3, #0
 80130bc:	e008      	b.n	80130d0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80130be:	79fb      	ldrb	r3, [r7, #7]
 80130c0:	4a08      	ldr	r2, [pc, #32]	; (80130e4 <memp_malloc+0x48>)
 80130c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80130c6:	4618      	mov	r0, r3
 80130c8:	f7ff ff94 	bl	8012ff4 <do_memp_malloc_pool>
 80130cc:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80130ce:	68fb      	ldr	r3, [r7, #12]
}
 80130d0:	4618      	mov	r0, r3
 80130d2:	3710      	adds	r7, #16
 80130d4:	46bd      	mov	sp, r7
 80130d6:	bd80      	pop	{r7, pc}
 80130d8:	0802454c 	.word	0x0802454c
 80130dc:	080245fc 	.word	0x080245fc
 80130e0:	080245c0 	.word	0x080245c0
 80130e4:	08026fe4 	.word	0x08026fe4

080130e8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80130e8:	b580      	push	{r7, lr}
 80130ea:	b084      	sub	sp, #16
 80130ec:	af00      	add	r7, sp, #0
 80130ee:	6078      	str	r0, [r7, #4]
 80130f0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80130f2:	683b      	ldr	r3, [r7, #0]
 80130f4:	f003 0303 	and.w	r3, r3, #3
 80130f8:	2b00      	cmp	r3, #0
 80130fa:	d006      	beq.n	801310a <do_memp_free_pool+0x22>
 80130fc:	4b0d      	ldr	r3, [pc, #52]	; (8013134 <do_memp_free_pool+0x4c>)
 80130fe:	f240 126d 	movw	r2, #365	; 0x16d
 8013102:	490d      	ldr	r1, [pc, #52]	; (8013138 <do_memp_free_pool+0x50>)
 8013104:	480d      	ldr	r0, [pc, #52]	; (801313c <do_memp_free_pool+0x54>)
 8013106:	f00d ff23 	bl	8020f50 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 801310a:	683b      	ldr	r3, [r7, #0]
 801310c:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 801310e:	f002 fce5 	bl	8015adc <sys_arch_protect>
 8013112:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8013114:	687b      	ldr	r3, [r7, #4]
 8013116:	689b      	ldr	r3, [r3, #8]
 8013118:	681a      	ldr	r2, [r3, #0]
 801311a:	68fb      	ldr	r3, [r7, #12]
 801311c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 801311e:	687b      	ldr	r3, [r7, #4]
 8013120:	689b      	ldr	r3, [r3, #8]
 8013122:	68fa      	ldr	r2, [r7, #12]
 8013124:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8013126:	68b8      	ldr	r0, [r7, #8]
 8013128:	f002 fce6 	bl	8015af8 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 801312c:	bf00      	nop
 801312e:	3710      	adds	r7, #16
 8013130:	46bd      	mov	sp, r7
 8013132:	bd80      	pop	{r7, pc}
 8013134:	0802454c 	.word	0x0802454c
 8013138:	0802461c 	.word	0x0802461c
 801313c:	080245c0 	.word	0x080245c0

08013140 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8013140:	b580      	push	{r7, lr}
 8013142:	b082      	sub	sp, #8
 8013144:	af00      	add	r7, sp, #0
 8013146:	6078      	str	r0, [r7, #4]
 8013148:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	2b00      	cmp	r3, #0
 801314e:	d106      	bne.n	801315e <memp_free_pool+0x1e>
 8013150:	4b0a      	ldr	r3, [pc, #40]	; (801317c <memp_free_pool+0x3c>)
 8013152:	f240 1295 	movw	r2, #405	; 0x195
 8013156:	490a      	ldr	r1, [pc, #40]	; (8013180 <memp_free_pool+0x40>)
 8013158:	480a      	ldr	r0, [pc, #40]	; (8013184 <memp_free_pool+0x44>)
 801315a:	f00d fef9 	bl	8020f50 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 801315e:	687b      	ldr	r3, [r7, #4]
 8013160:	2b00      	cmp	r3, #0
 8013162:	d007      	beq.n	8013174 <memp_free_pool+0x34>
 8013164:	683b      	ldr	r3, [r7, #0]
 8013166:	2b00      	cmp	r3, #0
 8013168:	d004      	beq.n	8013174 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 801316a:	6839      	ldr	r1, [r7, #0]
 801316c:	6878      	ldr	r0, [r7, #4]
 801316e:	f7ff ffbb 	bl	80130e8 <do_memp_free_pool>
 8013172:	e000      	b.n	8013176 <memp_free_pool+0x36>
    return;
 8013174:	bf00      	nop
}
 8013176:	3708      	adds	r7, #8
 8013178:	46bd      	mov	sp, r7
 801317a:	bd80      	pop	{r7, pc}
 801317c:	0802454c 	.word	0x0802454c
 8013180:	080245e8 	.word	0x080245e8
 8013184:	080245c0 	.word	0x080245c0

08013188 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8013188:	b580      	push	{r7, lr}
 801318a:	b082      	sub	sp, #8
 801318c:	af00      	add	r7, sp, #0
 801318e:	4603      	mov	r3, r0
 8013190:	6039      	str	r1, [r7, #0]
 8013192:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8013194:	79fb      	ldrb	r3, [r7, #7]
 8013196:	2b0c      	cmp	r3, #12
 8013198:	d907      	bls.n	80131aa <memp_free+0x22>
 801319a:	4b0c      	ldr	r3, [pc, #48]	; (80131cc <memp_free+0x44>)
 801319c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80131a0:	490b      	ldr	r1, [pc, #44]	; (80131d0 <memp_free+0x48>)
 80131a2:	480c      	ldr	r0, [pc, #48]	; (80131d4 <memp_free+0x4c>)
 80131a4:	f00d fed4 	bl	8020f50 <iprintf>
 80131a8:	e00c      	b.n	80131c4 <memp_free+0x3c>

  if (mem == NULL) {
 80131aa:	683b      	ldr	r3, [r7, #0]
 80131ac:	2b00      	cmp	r3, #0
 80131ae:	d008      	beq.n	80131c2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80131b0:	79fb      	ldrb	r3, [r7, #7]
 80131b2:	4a09      	ldr	r2, [pc, #36]	; (80131d8 <memp_free+0x50>)
 80131b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80131b8:	6839      	ldr	r1, [r7, #0]
 80131ba:	4618      	mov	r0, r3
 80131bc:	f7ff ff94 	bl	80130e8 <do_memp_free_pool>
 80131c0:	e000      	b.n	80131c4 <memp_free+0x3c>
    return;
 80131c2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80131c4:	3708      	adds	r7, #8
 80131c6:	46bd      	mov	sp, r7
 80131c8:	bd80      	pop	{r7, pc}
 80131ca:	bf00      	nop
 80131cc:	0802454c 	.word	0x0802454c
 80131d0:	0802463c 	.word	0x0802463c
 80131d4:	080245c0 	.word	0x080245c0
 80131d8:	08026fe4 	.word	0x08026fe4

080131dc <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 80131dc:	b580      	push	{r7, lr}
 80131de:	b082      	sub	sp, #8
 80131e0:	af00      	add	r7, sp, #0
 80131e2:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	2b00      	cmp	r3, #0
 80131e8:	d013      	beq.n	8013212 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 80131ea:	687b      	ldr	r3, [r7, #4]
 80131ec:	681b      	ldr	r3, [r3, #0]
 80131ee:	2b00      	cmp	r3, #0
 80131f0:	d00b      	beq.n	801320a <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 80131f2:	687b      	ldr	r3, [r7, #4]
 80131f4:	681b      	ldr	r3, [r3, #0]
 80131f6:	4618      	mov	r0, r3
 80131f8:	f000 ff2a 	bl	8014050 <pbuf_free>
      buf->p = buf->ptr = NULL;
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	2200      	movs	r2, #0
 8013200:	605a      	str	r2, [r3, #4]
 8013202:	687b      	ldr	r3, [r7, #4]
 8013204:	685a      	ldr	r2, [r3, #4]
 8013206:	687b      	ldr	r3, [r7, #4]
 8013208:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 801320a:	6879      	ldr	r1, [r7, #4]
 801320c:	2006      	movs	r0, #6
 801320e:	f7ff ffbb 	bl	8013188 <memp_free>
  }
}
 8013212:	bf00      	nop
 8013214:	3708      	adds	r7, #8
 8013216:	46bd      	mov	sp, r7
 8013218:	bd80      	pop	{r7, pc}
	...

0801321c <netbuf_free>:
 *
 * @param buf pointer to the netbuf which contains the packet buffer to free
 */
void
netbuf_free(struct netbuf *buf)
{
 801321c:	b580      	push	{r7, lr}
 801321e:	b082      	sub	sp, #8
 8013220:	af00      	add	r7, sp, #0
 8013222:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
 8013224:	687b      	ldr	r3, [r7, #4]
 8013226:	2b00      	cmp	r3, #0
 8013228:	d106      	bne.n	8013238 <netbuf_free+0x1c>
 801322a:	4b0d      	ldr	r3, [pc, #52]	; (8013260 <netbuf_free+0x44>)
 801322c:	2281      	movs	r2, #129	; 0x81
 801322e:	490d      	ldr	r1, [pc, #52]	; (8013264 <netbuf_free+0x48>)
 8013230:	480d      	ldr	r0, [pc, #52]	; (8013268 <netbuf_free+0x4c>)
 8013232:	f00d fe8d 	bl	8020f50 <iprintf>
 8013236:	e00f      	b.n	8013258 <netbuf_free+0x3c>
  if (buf->p != NULL) {
 8013238:	687b      	ldr	r3, [r7, #4]
 801323a:	681b      	ldr	r3, [r3, #0]
 801323c:	2b00      	cmp	r3, #0
 801323e:	d004      	beq.n	801324a <netbuf_free+0x2e>
    pbuf_free(buf->p);
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	681b      	ldr	r3, [r3, #0]
 8013244:	4618      	mov	r0, r3
 8013246:	f000 ff03 	bl	8014050 <pbuf_free>
  }
  buf->p = buf->ptr = NULL;
 801324a:	687b      	ldr	r3, [r7, #4]
 801324c:	2200      	movs	r2, #0
 801324e:	605a      	str	r2, [r3, #4]
 8013250:	687b      	ldr	r3, [r7, #4]
 8013252:	685a      	ldr	r2, [r3, #4]
 8013254:	687b      	ldr	r3, [r7, #4]
 8013256:	601a      	str	r2, [r3, #0]
#if LWIP_CHECKSUM_ON_COPY
  buf->flags = 0;
  buf->toport_chksum = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
}
 8013258:	3708      	adds	r7, #8
 801325a:	46bd      	mov	sp, r7
 801325c:	bd80      	pop	{r7, pc}
 801325e:	bf00      	nop
 8013260:	08024658 	.word	0x08024658
 8013264:	08024710 	.word	0x08024710
 8013268:	080246c4 	.word	0x080246c4

0801326c <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 801326c:	b580      	push	{r7, lr}
 801326e:	b084      	sub	sp, #16
 8013270:	af00      	add	r7, sp, #0
 8013272:	60f8      	str	r0, [r7, #12]
 8013274:	60b9      	str	r1, [r7, #8]
 8013276:	4613      	mov	r3, r2
 8013278:	80fb      	strh	r3, [r7, #6]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 801327a:	68fb      	ldr	r3, [r7, #12]
 801327c:	2b00      	cmp	r3, #0
 801327e:	d108      	bne.n	8013292 <netbuf_ref+0x26>
 8013280:	4b1c      	ldr	r3, [pc, #112]	; (80132f4 <netbuf_ref+0x88>)
 8013282:	2299      	movs	r2, #153	; 0x99
 8013284:	491c      	ldr	r1, [pc, #112]	; (80132f8 <netbuf_ref+0x8c>)
 8013286:	481d      	ldr	r0, [pc, #116]	; (80132fc <netbuf_ref+0x90>)
 8013288:	f00d fe62 	bl	8020f50 <iprintf>
 801328c:	f06f 030f 	mvn.w	r3, #15
 8013290:	e02b      	b.n	80132ea <netbuf_ref+0x7e>
  if (buf->p != NULL) {
 8013292:	68fb      	ldr	r3, [r7, #12]
 8013294:	681b      	ldr	r3, [r3, #0]
 8013296:	2b00      	cmp	r3, #0
 8013298:	d004      	beq.n	80132a4 <netbuf_ref+0x38>
    pbuf_free(buf->p);
 801329a:	68fb      	ldr	r3, [r7, #12]
 801329c:	681b      	ldr	r3, [r3, #0]
 801329e:	4618      	mov	r0, r3
 80132a0:	f000 fed6 	bl	8014050 <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 80132a4:	2241      	movs	r2, #65	; 0x41
 80132a6:	2100      	movs	r1, #0
 80132a8:	2036      	movs	r0, #54	; 0x36
 80132aa:	f000 fbbf 	bl	8013a2c <pbuf_alloc>
 80132ae:	4602      	mov	r2, r0
 80132b0:	68fb      	ldr	r3, [r7, #12]
 80132b2:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 80132b4:	68fb      	ldr	r3, [r7, #12]
 80132b6:	681b      	ldr	r3, [r3, #0]
 80132b8:	2b00      	cmp	r3, #0
 80132ba:	d105      	bne.n	80132c8 <netbuf_ref+0x5c>
    buf->ptr = NULL;
 80132bc:	68fb      	ldr	r3, [r7, #12]
 80132be:	2200      	movs	r2, #0
 80132c0:	605a      	str	r2, [r3, #4]
    return ERR_MEM;
 80132c2:	f04f 33ff 	mov.w	r3, #4294967295
 80132c6:	e010      	b.n	80132ea <netbuf_ref+0x7e>
  }
  ((struct pbuf_rom *)buf->p)->payload = dataptr;
 80132c8:	68fb      	ldr	r3, [r7, #12]
 80132ca:	681b      	ldr	r3, [r3, #0]
 80132cc:	68ba      	ldr	r2, [r7, #8]
 80132ce:	605a      	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
 80132d0:	68fb      	ldr	r3, [r7, #12]
 80132d2:	681b      	ldr	r3, [r3, #0]
 80132d4:	88fa      	ldrh	r2, [r7, #6]
 80132d6:	811a      	strh	r2, [r3, #8]
 80132d8:	68fa      	ldr	r2, [r7, #12]
 80132da:	6812      	ldr	r2, [r2, #0]
 80132dc:	891b      	ldrh	r3, [r3, #8]
 80132de:	8153      	strh	r3, [r2, #10]
  buf->ptr = buf->p;
 80132e0:	68fb      	ldr	r3, [r7, #12]
 80132e2:	681a      	ldr	r2, [r3, #0]
 80132e4:	68fb      	ldr	r3, [r7, #12]
 80132e6:	605a      	str	r2, [r3, #4]
  return ERR_OK;
 80132e8:	2300      	movs	r3, #0
}
 80132ea:	4618      	mov	r0, r3
 80132ec:	3710      	adds	r7, #16
 80132ee:	46bd      	mov	sp, r7
 80132f0:	bd80      	pop	{r7, pc}
 80132f2:	bf00      	nop
 80132f4:	08024658 	.word	0x08024658
 80132f8:	0802472c 	.word	0x0802472c
 80132fc:	080246c4 	.word	0x080246c4

08013300 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8013300:	b480      	push	{r7}
 8013302:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8013304:	bf00      	nop
 8013306:	46bd      	mov	sp, r7
 8013308:	f85d 7b04 	ldr.w	r7, [sp], #4
 801330c:	4770      	bx	lr
	...

08013310 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8013310:	b580      	push	{r7, lr}
 8013312:	b086      	sub	sp, #24
 8013314:	af00      	add	r7, sp, #0
 8013316:	60f8      	str	r0, [r7, #12]
 8013318:	60b9      	str	r1, [r7, #8]
 801331a:	607a      	str	r2, [r7, #4]
 801331c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 801331e:	68fb      	ldr	r3, [r7, #12]
 8013320:	2b00      	cmp	r3, #0
 8013322:	d108      	bne.n	8013336 <netif_add+0x26>
 8013324:	4b57      	ldr	r3, [pc, #348]	; (8013484 <netif_add+0x174>)
 8013326:	f240 1227 	movw	r2, #295	; 0x127
 801332a:	4957      	ldr	r1, [pc, #348]	; (8013488 <netif_add+0x178>)
 801332c:	4857      	ldr	r0, [pc, #348]	; (801348c <netif_add+0x17c>)
 801332e:	f00d fe0f 	bl	8020f50 <iprintf>
 8013332:	2300      	movs	r3, #0
 8013334:	e0a2      	b.n	801347c <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8013336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013338:	2b00      	cmp	r3, #0
 801333a:	d108      	bne.n	801334e <netif_add+0x3e>
 801333c:	4b51      	ldr	r3, [pc, #324]	; (8013484 <netif_add+0x174>)
 801333e:	f44f 7294 	mov.w	r2, #296	; 0x128
 8013342:	4953      	ldr	r1, [pc, #332]	; (8013490 <netif_add+0x180>)
 8013344:	4851      	ldr	r0, [pc, #324]	; (801348c <netif_add+0x17c>)
 8013346:	f00d fe03 	bl	8020f50 <iprintf>
 801334a:	2300      	movs	r3, #0
 801334c:	e096      	b.n	801347c <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 801334e:	68bb      	ldr	r3, [r7, #8]
 8013350:	2b00      	cmp	r3, #0
 8013352:	d101      	bne.n	8013358 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8013354:	4b4f      	ldr	r3, [pc, #316]	; (8013494 <netif_add+0x184>)
 8013356:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8013358:	687b      	ldr	r3, [r7, #4]
 801335a:	2b00      	cmp	r3, #0
 801335c:	d101      	bne.n	8013362 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 801335e:	4b4d      	ldr	r3, [pc, #308]	; (8013494 <netif_add+0x184>)
 8013360:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8013362:	683b      	ldr	r3, [r7, #0]
 8013364:	2b00      	cmp	r3, #0
 8013366:	d101      	bne.n	801336c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8013368:	4b4a      	ldr	r3, [pc, #296]	; (8013494 <netif_add+0x184>)
 801336a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 801336c:	68fb      	ldr	r3, [r7, #12]
 801336e:	2200      	movs	r2, #0
 8013370:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8013372:	68fb      	ldr	r3, [r7, #12]
 8013374:	2200      	movs	r2, #0
 8013376:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8013378:	68fb      	ldr	r3, [r7, #12]
 801337a:	2200      	movs	r2, #0
 801337c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 801337e:	68fb      	ldr	r3, [r7, #12]
 8013380:	4a45      	ldr	r2, [pc, #276]	; (8013498 <netif_add+0x188>)
 8013382:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8013384:	68fb      	ldr	r3, [r7, #12]
 8013386:	2200      	movs	r2, #0
 8013388:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 801338a:	68fb      	ldr	r3, [r7, #12]
 801338c:	2200      	movs	r2, #0
 801338e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8013392:	68fb      	ldr	r3, [r7, #12]
 8013394:	2200      	movs	r2, #0
 8013396:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8013398:	68fb      	ldr	r3, [r7, #12]
 801339a:	6a3a      	ldr	r2, [r7, #32]
 801339c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 801339e:	4b3f      	ldr	r3, [pc, #252]	; (801349c <netif_add+0x18c>)
 80133a0:	781a      	ldrb	r2, [r3, #0]
 80133a2:	68fb      	ldr	r3, [r7, #12]
 80133a4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 80133a8:	68fb      	ldr	r3, [r7, #12]
 80133aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80133ac:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80133ae:	683b      	ldr	r3, [r7, #0]
 80133b0:	687a      	ldr	r2, [r7, #4]
 80133b2:	68b9      	ldr	r1, [r7, #8]
 80133b4:	68f8      	ldr	r0, [r7, #12]
 80133b6:	f000 f913 	bl	80135e0 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80133ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133bc:	68f8      	ldr	r0, [r7, #12]
 80133be:	4798      	blx	r3
 80133c0:	4603      	mov	r3, r0
 80133c2:	2b00      	cmp	r3, #0
 80133c4:	d001      	beq.n	80133ca <netif_add+0xba>
    return NULL;
 80133c6:	2300      	movs	r3, #0
 80133c8:	e058      	b.n	801347c <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80133ca:	68fb      	ldr	r3, [r7, #12]
 80133cc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80133d0:	2bff      	cmp	r3, #255	; 0xff
 80133d2:	d103      	bne.n	80133dc <netif_add+0xcc>
        netif->num = 0;
 80133d4:	68fb      	ldr	r3, [r7, #12]
 80133d6:	2200      	movs	r2, #0
 80133d8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 80133dc:	2300      	movs	r3, #0
 80133de:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80133e0:	4b2f      	ldr	r3, [pc, #188]	; (80134a0 <netif_add+0x190>)
 80133e2:	681b      	ldr	r3, [r3, #0]
 80133e4:	617b      	str	r3, [r7, #20]
 80133e6:	e02b      	b.n	8013440 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80133e8:	697a      	ldr	r2, [r7, #20]
 80133ea:	68fb      	ldr	r3, [r7, #12]
 80133ec:	429a      	cmp	r2, r3
 80133ee:	d106      	bne.n	80133fe <netif_add+0xee>
 80133f0:	4b24      	ldr	r3, [pc, #144]	; (8013484 <netif_add+0x174>)
 80133f2:	f240 128b 	movw	r2, #395	; 0x18b
 80133f6:	492b      	ldr	r1, [pc, #172]	; (80134a4 <netif_add+0x194>)
 80133f8:	4824      	ldr	r0, [pc, #144]	; (801348c <netif_add+0x17c>)
 80133fa:	f00d fda9 	bl	8020f50 <iprintf>
        num_netifs++;
 80133fe:	693b      	ldr	r3, [r7, #16]
 8013400:	3301      	adds	r3, #1
 8013402:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8013404:	693b      	ldr	r3, [r7, #16]
 8013406:	2bff      	cmp	r3, #255	; 0xff
 8013408:	dd06      	ble.n	8013418 <netif_add+0x108>
 801340a:	4b1e      	ldr	r3, [pc, #120]	; (8013484 <netif_add+0x174>)
 801340c:	f240 128d 	movw	r2, #397	; 0x18d
 8013410:	4925      	ldr	r1, [pc, #148]	; (80134a8 <netif_add+0x198>)
 8013412:	481e      	ldr	r0, [pc, #120]	; (801348c <netif_add+0x17c>)
 8013414:	f00d fd9c 	bl	8020f50 <iprintf>
        if (netif2->num == netif->num) {
 8013418:	697b      	ldr	r3, [r7, #20]
 801341a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 801341e:	68fb      	ldr	r3, [r7, #12]
 8013420:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013424:	429a      	cmp	r2, r3
 8013426:	d108      	bne.n	801343a <netif_add+0x12a>
          netif->num++;
 8013428:	68fb      	ldr	r3, [r7, #12]
 801342a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801342e:	3301      	adds	r3, #1
 8013430:	b2da      	uxtb	r2, r3
 8013432:	68fb      	ldr	r3, [r7, #12]
 8013434:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8013438:	e005      	b.n	8013446 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801343a:	697b      	ldr	r3, [r7, #20]
 801343c:	681b      	ldr	r3, [r3, #0]
 801343e:	617b      	str	r3, [r7, #20]
 8013440:	697b      	ldr	r3, [r7, #20]
 8013442:	2b00      	cmp	r3, #0
 8013444:	d1d0      	bne.n	80133e8 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8013446:	697b      	ldr	r3, [r7, #20]
 8013448:	2b00      	cmp	r3, #0
 801344a:	d1be      	bne.n	80133ca <netif_add+0xba>
  }
  if (netif->num == 254) {
 801344c:	68fb      	ldr	r3, [r7, #12]
 801344e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013452:	2bfe      	cmp	r3, #254	; 0xfe
 8013454:	d103      	bne.n	801345e <netif_add+0x14e>
    netif_num = 0;
 8013456:	4b11      	ldr	r3, [pc, #68]	; (801349c <netif_add+0x18c>)
 8013458:	2200      	movs	r2, #0
 801345a:	701a      	strb	r2, [r3, #0]
 801345c:	e006      	b.n	801346c <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 801345e:	68fb      	ldr	r3, [r7, #12]
 8013460:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013464:	3301      	adds	r3, #1
 8013466:	b2da      	uxtb	r2, r3
 8013468:	4b0c      	ldr	r3, [pc, #48]	; (801349c <netif_add+0x18c>)
 801346a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 801346c:	4b0c      	ldr	r3, [pc, #48]	; (80134a0 <netif_add+0x190>)
 801346e:	681a      	ldr	r2, [r3, #0]
 8013470:	68fb      	ldr	r3, [r7, #12]
 8013472:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8013474:	4a0a      	ldr	r2, [pc, #40]	; (80134a0 <netif_add+0x190>)
 8013476:	68fb      	ldr	r3, [r7, #12]
 8013478:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 801347a:	68fb      	ldr	r3, [r7, #12]
}
 801347c:	4618      	mov	r0, r3
 801347e:	3718      	adds	r7, #24
 8013480:	46bd      	mov	sp, r7
 8013482:	bd80      	pop	{r7, pc}
 8013484:	0802480c 	.word	0x0802480c
 8013488:	080248bc 	.word	0x080248bc
 801348c:	08024878 	.word	0x08024878
 8013490:	080248d8 	.word	0x080248d8
 8013494:	08026f44 	.word	0x08026f44
 8013498:	080138bb 	.word	0x080138bb
 801349c:	24040718 	.word	0x24040718
 80134a0:	24048e68 	.word	0x24048e68
 80134a4:	080248fc 	.word	0x080248fc
 80134a8:	08024910 	.word	0x08024910

080134ac <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80134ac:	b580      	push	{r7, lr}
 80134ae:	b082      	sub	sp, #8
 80134b0:	af00      	add	r7, sp, #0
 80134b2:	6078      	str	r0, [r7, #4]
 80134b4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80134b6:	6839      	ldr	r1, [r7, #0]
 80134b8:	6878      	ldr	r0, [r7, #4]
 80134ba:	f004 f8ef 	bl	801769c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80134be:	6839      	ldr	r1, [r7, #0]
 80134c0:	6878      	ldr	r0, [r7, #4]
 80134c2:	f009 fbe1 	bl	801cc88 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80134c6:	bf00      	nop
 80134c8:	3708      	adds	r7, #8
 80134ca:	46bd      	mov	sp, r7
 80134cc:	bd80      	pop	{r7, pc}
	...

080134d0 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80134d0:	b580      	push	{r7, lr}
 80134d2:	b086      	sub	sp, #24
 80134d4:	af00      	add	r7, sp, #0
 80134d6:	60f8      	str	r0, [r7, #12]
 80134d8:	60b9      	str	r1, [r7, #8]
 80134da:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80134dc:	68bb      	ldr	r3, [r7, #8]
 80134de:	2b00      	cmp	r3, #0
 80134e0:	d106      	bne.n	80134f0 <netif_do_set_ipaddr+0x20>
 80134e2:	4b1d      	ldr	r3, [pc, #116]	; (8013558 <netif_do_set_ipaddr+0x88>)
 80134e4:	f240 12cb 	movw	r2, #459	; 0x1cb
 80134e8:	491c      	ldr	r1, [pc, #112]	; (801355c <netif_do_set_ipaddr+0x8c>)
 80134ea:	481d      	ldr	r0, [pc, #116]	; (8013560 <netif_do_set_ipaddr+0x90>)
 80134ec:	f00d fd30 	bl	8020f50 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	2b00      	cmp	r3, #0
 80134f4:	d106      	bne.n	8013504 <netif_do_set_ipaddr+0x34>
 80134f6:	4b18      	ldr	r3, [pc, #96]	; (8013558 <netif_do_set_ipaddr+0x88>)
 80134f8:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 80134fc:	4917      	ldr	r1, [pc, #92]	; (801355c <netif_do_set_ipaddr+0x8c>)
 80134fe:	4818      	ldr	r0, [pc, #96]	; (8013560 <netif_do_set_ipaddr+0x90>)
 8013500:	f00d fd26 	bl	8020f50 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8013504:	68bb      	ldr	r3, [r7, #8]
 8013506:	681a      	ldr	r2, [r3, #0]
 8013508:	68fb      	ldr	r3, [r7, #12]
 801350a:	3304      	adds	r3, #4
 801350c:	681b      	ldr	r3, [r3, #0]
 801350e:	429a      	cmp	r2, r3
 8013510:	d01c      	beq.n	801354c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8013512:	68bb      	ldr	r3, [r7, #8]
 8013514:	681b      	ldr	r3, [r3, #0]
 8013516:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8013518:	68fb      	ldr	r3, [r7, #12]
 801351a:	3304      	adds	r3, #4
 801351c:	681a      	ldr	r2, [r3, #0]
 801351e:	687b      	ldr	r3, [r7, #4]
 8013520:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8013522:	f107 0314 	add.w	r3, r7, #20
 8013526:	4619      	mov	r1, r3
 8013528:	6878      	ldr	r0, [r7, #4]
 801352a:	f7ff ffbf 	bl	80134ac <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 801352e:	68bb      	ldr	r3, [r7, #8]
 8013530:	2b00      	cmp	r3, #0
 8013532:	d002      	beq.n	801353a <netif_do_set_ipaddr+0x6a>
 8013534:	68bb      	ldr	r3, [r7, #8]
 8013536:	681b      	ldr	r3, [r3, #0]
 8013538:	e000      	b.n	801353c <netif_do_set_ipaddr+0x6c>
 801353a:	2300      	movs	r3, #0
 801353c:	68fa      	ldr	r2, [r7, #12]
 801353e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8013540:	2101      	movs	r1, #1
 8013542:	68f8      	ldr	r0, [r7, #12]
 8013544:	f000 f8d2 	bl	80136ec <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8013548:	2301      	movs	r3, #1
 801354a:	e000      	b.n	801354e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 801354c:	2300      	movs	r3, #0
}
 801354e:	4618      	mov	r0, r3
 8013550:	3718      	adds	r7, #24
 8013552:	46bd      	mov	sp, r7
 8013554:	bd80      	pop	{r7, pc}
 8013556:	bf00      	nop
 8013558:	0802480c 	.word	0x0802480c
 801355c:	08024940 	.word	0x08024940
 8013560:	08024878 	.word	0x08024878

08013564 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8013564:	b480      	push	{r7}
 8013566:	b085      	sub	sp, #20
 8013568:	af00      	add	r7, sp, #0
 801356a:	60f8      	str	r0, [r7, #12]
 801356c:	60b9      	str	r1, [r7, #8]
 801356e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8013570:	68bb      	ldr	r3, [r7, #8]
 8013572:	681a      	ldr	r2, [r3, #0]
 8013574:	68fb      	ldr	r3, [r7, #12]
 8013576:	3308      	adds	r3, #8
 8013578:	681b      	ldr	r3, [r3, #0]
 801357a:	429a      	cmp	r2, r3
 801357c:	d00a      	beq.n	8013594 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 801357e:	68bb      	ldr	r3, [r7, #8]
 8013580:	2b00      	cmp	r3, #0
 8013582:	d002      	beq.n	801358a <netif_do_set_netmask+0x26>
 8013584:	68bb      	ldr	r3, [r7, #8]
 8013586:	681b      	ldr	r3, [r3, #0]
 8013588:	e000      	b.n	801358c <netif_do_set_netmask+0x28>
 801358a:	2300      	movs	r3, #0
 801358c:	68fa      	ldr	r2, [r7, #12]
 801358e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8013590:	2301      	movs	r3, #1
 8013592:	e000      	b.n	8013596 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8013594:	2300      	movs	r3, #0
}
 8013596:	4618      	mov	r0, r3
 8013598:	3714      	adds	r7, #20
 801359a:	46bd      	mov	sp, r7
 801359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135a0:	4770      	bx	lr

080135a2 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80135a2:	b480      	push	{r7}
 80135a4:	b085      	sub	sp, #20
 80135a6:	af00      	add	r7, sp, #0
 80135a8:	60f8      	str	r0, [r7, #12]
 80135aa:	60b9      	str	r1, [r7, #8]
 80135ac:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80135ae:	68bb      	ldr	r3, [r7, #8]
 80135b0:	681a      	ldr	r2, [r3, #0]
 80135b2:	68fb      	ldr	r3, [r7, #12]
 80135b4:	330c      	adds	r3, #12
 80135b6:	681b      	ldr	r3, [r3, #0]
 80135b8:	429a      	cmp	r2, r3
 80135ba:	d00a      	beq.n	80135d2 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80135bc:	68bb      	ldr	r3, [r7, #8]
 80135be:	2b00      	cmp	r3, #0
 80135c0:	d002      	beq.n	80135c8 <netif_do_set_gw+0x26>
 80135c2:	68bb      	ldr	r3, [r7, #8]
 80135c4:	681b      	ldr	r3, [r3, #0]
 80135c6:	e000      	b.n	80135ca <netif_do_set_gw+0x28>
 80135c8:	2300      	movs	r3, #0
 80135ca:	68fa      	ldr	r2, [r7, #12]
 80135cc:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80135ce:	2301      	movs	r3, #1
 80135d0:	e000      	b.n	80135d4 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80135d2:	2300      	movs	r3, #0
}
 80135d4:	4618      	mov	r0, r3
 80135d6:	3714      	adds	r7, #20
 80135d8:	46bd      	mov	sp, r7
 80135da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135de:	4770      	bx	lr

080135e0 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80135e0:	b580      	push	{r7, lr}
 80135e2:	b088      	sub	sp, #32
 80135e4:	af00      	add	r7, sp, #0
 80135e6:	60f8      	str	r0, [r7, #12]
 80135e8:	60b9      	str	r1, [r7, #8]
 80135ea:	607a      	str	r2, [r7, #4]
 80135ec:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80135ee:	2300      	movs	r3, #0
 80135f0:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80135f2:	2300      	movs	r3, #0
 80135f4:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80135f6:	68bb      	ldr	r3, [r7, #8]
 80135f8:	2b00      	cmp	r3, #0
 80135fa:	d101      	bne.n	8013600 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80135fc:	4b1c      	ldr	r3, [pc, #112]	; (8013670 <netif_set_addr+0x90>)
 80135fe:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8013600:	687b      	ldr	r3, [r7, #4]
 8013602:	2b00      	cmp	r3, #0
 8013604:	d101      	bne.n	801360a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8013606:	4b1a      	ldr	r3, [pc, #104]	; (8013670 <netif_set_addr+0x90>)
 8013608:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801360a:	683b      	ldr	r3, [r7, #0]
 801360c:	2b00      	cmp	r3, #0
 801360e:	d101      	bne.n	8013614 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8013610:	4b17      	ldr	r3, [pc, #92]	; (8013670 <netif_set_addr+0x90>)
 8013612:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8013614:	68bb      	ldr	r3, [r7, #8]
 8013616:	2b00      	cmp	r3, #0
 8013618:	d003      	beq.n	8013622 <netif_set_addr+0x42>
 801361a:	68bb      	ldr	r3, [r7, #8]
 801361c:	681b      	ldr	r3, [r3, #0]
 801361e:	2b00      	cmp	r3, #0
 8013620:	d101      	bne.n	8013626 <netif_set_addr+0x46>
 8013622:	2301      	movs	r3, #1
 8013624:	e000      	b.n	8013628 <netif_set_addr+0x48>
 8013626:	2300      	movs	r3, #0
 8013628:	617b      	str	r3, [r7, #20]
  if (remove) {
 801362a:	697b      	ldr	r3, [r7, #20]
 801362c:	2b00      	cmp	r3, #0
 801362e:	d006      	beq.n	801363e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8013630:	f107 0310 	add.w	r3, r7, #16
 8013634:	461a      	mov	r2, r3
 8013636:	68b9      	ldr	r1, [r7, #8]
 8013638:	68f8      	ldr	r0, [r7, #12]
 801363a:	f7ff ff49 	bl	80134d0 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 801363e:	69fa      	ldr	r2, [r7, #28]
 8013640:	6879      	ldr	r1, [r7, #4]
 8013642:	68f8      	ldr	r0, [r7, #12]
 8013644:	f7ff ff8e 	bl	8013564 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8013648:	69ba      	ldr	r2, [r7, #24]
 801364a:	6839      	ldr	r1, [r7, #0]
 801364c:	68f8      	ldr	r0, [r7, #12]
 801364e:	f7ff ffa8 	bl	80135a2 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8013652:	697b      	ldr	r3, [r7, #20]
 8013654:	2b00      	cmp	r3, #0
 8013656:	d106      	bne.n	8013666 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8013658:	f107 0310 	add.w	r3, r7, #16
 801365c:	461a      	mov	r2, r3
 801365e:	68b9      	ldr	r1, [r7, #8]
 8013660:	68f8      	ldr	r0, [r7, #12]
 8013662:	f7ff ff35 	bl	80134d0 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8013666:	bf00      	nop
 8013668:	3720      	adds	r7, #32
 801366a:	46bd      	mov	sp, r7
 801366c:	bd80      	pop	{r7, pc}
 801366e:	bf00      	nop
 8013670:	08026f44 	.word	0x08026f44

08013674 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8013674:	b480      	push	{r7}
 8013676:	b083      	sub	sp, #12
 8013678:	af00      	add	r7, sp, #0
 801367a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 801367c:	4a04      	ldr	r2, [pc, #16]	; (8013690 <netif_set_default+0x1c>)
 801367e:	687b      	ldr	r3, [r7, #4]
 8013680:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8013682:	bf00      	nop
 8013684:	370c      	adds	r7, #12
 8013686:	46bd      	mov	sp, r7
 8013688:	f85d 7b04 	ldr.w	r7, [sp], #4
 801368c:	4770      	bx	lr
 801368e:	bf00      	nop
 8013690:	24048e6c 	.word	0x24048e6c

08013694 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8013694:	b580      	push	{r7, lr}
 8013696:	b082      	sub	sp, #8
 8013698:	af00      	add	r7, sp, #0
 801369a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	2b00      	cmp	r3, #0
 80136a0:	d107      	bne.n	80136b2 <netif_set_up+0x1e>
 80136a2:	4b0f      	ldr	r3, [pc, #60]	; (80136e0 <netif_set_up+0x4c>)
 80136a4:	f44f 7254 	mov.w	r2, #848	; 0x350
 80136a8:	490e      	ldr	r1, [pc, #56]	; (80136e4 <netif_set_up+0x50>)
 80136aa:	480f      	ldr	r0, [pc, #60]	; (80136e8 <netif_set_up+0x54>)
 80136ac:	f00d fc50 	bl	8020f50 <iprintf>
 80136b0:	e013      	b.n	80136da <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80136b2:	687b      	ldr	r3, [r7, #4]
 80136b4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80136b8:	f003 0301 	and.w	r3, r3, #1
 80136bc:	2b00      	cmp	r3, #0
 80136be:	d10c      	bne.n	80136da <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80136c6:	f043 0301 	orr.w	r3, r3, #1
 80136ca:	b2da      	uxtb	r2, r3
 80136cc:	687b      	ldr	r3, [r7, #4]
 80136ce:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80136d2:	2103      	movs	r1, #3
 80136d4:	6878      	ldr	r0, [r7, #4]
 80136d6:	f000 f809 	bl	80136ec <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80136da:	3708      	adds	r7, #8
 80136dc:	46bd      	mov	sp, r7
 80136de:	bd80      	pop	{r7, pc}
 80136e0:	0802480c 	.word	0x0802480c
 80136e4:	080249b0 	.word	0x080249b0
 80136e8:	08024878 	.word	0x08024878

080136ec <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80136ec:	b580      	push	{r7, lr}
 80136ee:	b082      	sub	sp, #8
 80136f0:	af00      	add	r7, sp, #0
 80136f2:	6078      	str	r0, [r7, #4]
 80136f4:	460b      	mov	r3, r1
 80136f6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80136f8:	687b      	ldr	r3, [r7, #4]
 80136fa:	2b00      	cmp	r3, #0
 80136fc:	d106      	bne.n	801370c <netif_issue_reports+0x20>
 80136fe:	4b18      	ldr	r3, [pc, #96]	; (8013760 <netif_issue_reports+0x74>)
 8013700:	f240 326d 	movw	r2, #877	; 0x36d
 8013704:	4917      	ldr	r1, [pc, #92]	; (8013764 <netif_issue_reports+0x78>)
 8013706:	4818      	ldr	r0, [pc, #96]	; (8013768 <netif_issue_reports+0x7c>)
 8013708:	f00d fc22 	bl	8020f50 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013712:	f003 0304 	and.w	r3, r3, #4
 8013716:	2b00      	cmp	r3, #0
 8013718:	d01e      	beq.n	8013758 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 801371a:	687b      	ldr	r3, [r7, #4]
 801371c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013720:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8013724:	2b00      	cmp	r3, #0
 8013726:	d017      	beq.n	8013758 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8013728:	78fb      	ldrb	r3, [r7, #3]
 801372a:	f003 0301 	and.w	r3, r3, #1
 801372e:	2b00      	cmp	r3, #0
 8013730:	d013      	beq.n	801375a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	3304      	adds	r3, #4
 8013736:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8013738:	2b00      	cmp	r3, #0
 801373a:	d00e      	beq.n	801375a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 801373c:	687b      	ldr	r3, [r7, #4]
 801373e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013742:	f003 0308 	and.w	r3, r3, #8
 8013746:	2b00      	cmp	r3, #0
 8013748:	d007      	beq.n	801375a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 801374a:	687b      	ldr	r3, [r7, #4]
 801374c:	3304      	adds	r3, #4
 801374e:	4619      	mov	r1, r3
 8013750:	6878      	ldr	r0, [r7, #4]
 8013752:	f7fd fa59 	bl	8010c08 <etharp_request>
 8013756:	e000      	b.n	801375a <netif_issue_reports+0x6e>
    return;
 8013758:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 801375a:	3708      	adds	r7, #8
 801375c:	46bd      	mov	sp, r7
 801375e:	bd80      	pop	{r7, pc}
 8013760:	0802480c 	.word	0x0802480c
 8013764:	080249cc 	.word	0x080249cc
 8013768:	08024878 	.word	0x08024878

0801376c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 801376c:	b580      	push	{r7, lr}
 801376e:	b082      	sub	sp, #8
 8013770:	af00      	add	r7, sp, #0
 8013772:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8013774:	687b      	ldr	r3, [r7, #4]
 8013776:	2b00      	cmp	r3, #0
 8013778:	d107      	bne.n	801378a <netif_set_down+0x1e>
 801377a:	4b12      	ldr	r3, [pc, #72]	; (80137c4 <netif_set_down+0x58>)
 801377c:	f240 329b 	movw	r2, #923	; 0x39b
 8013780:	4911      	ldr	r1, [pc, #68]	; (80137c8 <netif_set_down+0x5c>)
 8013782:	4812      	ldr	r0, [pc, #72]	; (80137cc <netif_set_down+0x60>)
 8013784:	f00d fbe4 	bl	8020f50 <iprintf>
 8013788:	e019      	b.n	80137be <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 801378a:	687b      	ldr	r3, [r7, #4]
 801378c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013790:	f003 0301 	and.w	r3, r3, #1
 8013794:	2b00      	cmp	r3, #0
 8013796:	d012      	beq.n	80137be <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801379e:	f023 0301 	bic.w	r3, r3, #1
 80137a2:	b2da      	uxtb	r2, r3
 80137a4:	687b      	ldr	r3, [r7, #4]
 80137a6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80137aa:	687b      	ldr	r3, [r7, #4]
 80137ac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80137b0:	f003 0308 	and.w	r3, r3, #8
 80137b4:	2b00      	cmp	r3, #0
 80137b6:	d002      	beq.n	80137be <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80137b8:	6878      	ldr	r0, [r7, #4]
 80137ba:	f7fc fde3 	bl	8010384 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80137be:	3708      	adds	r7, #8
 80137c0:	46bd      	mov	sp, r7
 80137c2:	bd80      	pop	{r7, pc}
 80137c4:	0802480c 	.word	0x0802480c
 80137c8:	080249f0 	.word	0x080249f0
 80137cc:	08024878 	.word	0x08024878

080137d0 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 80137d0:	b580      	push	{r7, lr}
 80137d2:	b082      	sub	sp, #8
 80137d4:	af00      	add	r7, sp, #0
 80137d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80137d8:	687b      	ldr	r3, [r7, #4]
 80137da:	2b00      	cmp	r3, #0
 80137dc:	d107      	bne.n	80137ee <netif_set_link_up+0x1e>
 80137de:	4b13      	ldr	r3, [pc, #76]	; (801382c <netif_set_link_up+0x5c>)
 80137e0:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 80137e4:	4912      	ldr	r1, [pc, #72]	; (8013830 <netif_set_link_up+0x60>)
 80137e6:	4813      	ldr	r0, [pc, #76]	; (8013834 <netif_set_link_up+0x64>)
 80137e8:	f00d fbb2 	bl	8020f50 <iprintf>
 80137ec:	e01b      	b.n	8013826 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80137ee:	687b      	ldr	r3, [r7, #4]
 80137f0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80137f4:	f003 0304 	and.w	r3, r3, #4
 80137f8:	2b00      	cmp	r3, #0
 80137fa:	d114      	bne.n	8013826 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80137fc:	687b      	ldr	r3, [r7, #4]
 80137fe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013802:	f043 0304 	orr.w	r3, r3, #4
 8013806:	b2da      	uxtb	r2, r3
 8013808:	687b      	ldr	r3, [r7, #4]
 801380a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801380e:	2103      	movs	r1, #3
 8013810:	6878      	ldr	r0, [r7, #4]
 8013812:	f7ff ff6b 	bl	80136ec <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8013816:	687b      	ldr	r3, [r7, #4]
 8013818:	69db      	ldr	r3, [r3, #28]
 801381a:	2b00      	cmp	r3, #0
 801381c:	d003      	beq.n	8013826 <netif_set_link_up+0x56>
 801381e:	687b      	ldr	r3, [r7, #4]
 8013820:	69db      	ldr	r3, [r3, #28]
 8013822:	6878      	ldr	r0, [r7, #4]
 8013824:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8013826:	3708      	adds	r7, #8
 8013828:	46bd      	mov	sp, r7
 801382a:	bd80      	pop	{r7, pc}
 801382c:	0802480c 	.word	0x0802480c
 8013830:	08024a10 	.word	0x08024a10
 8013834:	08024878 	.word	0x08024878

08013838 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8013838:	b580      	push	{r7, lr}
 801383a:	b082      	sub	sp, #8
 801383c:	af00      	add	r7, sp, #0
 801383e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8013840:	687b      	ldr	r3, [r7, #4]
 8013842:	2b00      	cmp	r3, #0
 8013844:	d107      	bne.n	8013856 <netif_set_link_down+0x1e>
 8013846:	4b11      	ldr	r3, [pc, #68]	; (801388c <netif_set_link_down+0x54>)
 8013848:	f240 4206 	movw	r2, #1030	; 0x406
 801384c:	4910      	ldr	r1, [pc, #64]	; (8013890 <netif_set_link_down+0x58>)
 801384e:	4811      	ldr	r0, [pc, #68]	; (8013894 <netif_set_link_down+0x5c>)
 8013850:	f00d fb7e 	bl	8020f50 <iprintf>
 8013854:	e017      	b.n	8013886 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8013856:	687b      	ldr	r3, [r7, #4]
 8013858:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801385c:	f003 0304 	and.w	r3, r3, #4
 8013860:	2b00      	cmp	r3, #0
 8013862:	d010      	beq.n	8013886 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801386a:	f023 0304 	bic.w	r3, r3, #4
 801386e:	b2da      	uxtb	r2, r3
 8013870:	687b      	ldr	r3, [r7, #4]
 8013872:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8013876:	687b      	ldr	r3, [r7, #4]
 8013878:	69db      	ldr	r3, [r3, #28]
 801387a:	2b00      	cmp	r3, #0
 801387c:	d003      	beq.n	8013886 <netif_set_link_down+0x4e>
 801387e:	687b      	ldr	r3, [r7, #4]
 8013880:	69db      	ldr	r3, [r3, #28]
 8013882:	6878      	ldr	r0, [r7, #4]
 8013884:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8013886:	3708      	adds	r7, #8
 8013888:	46bd      	mov	sp, r7
 801388a:	bd80      	pop	{r7, pc}
 801388c:	0802480c 	.word	0x0802480c
 8013890:	08024a34 	.word	0x08024a34
 8013894:	08024878 	.word	0x08024878

08013898 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8013898:	b480      	push	{r7}
 801389a:	b083      	sub	sp, #12
 801389c:	af00      	add	r7, sp, #0
 801389e:	6078      	str	r0, [r7, #4]
 80138a0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 80138a2:	687b      	ldr	r3, [r7, #4]
 80138a4:	2b00      	cmp	r3, #0
 80138a6:	d002      	beq.n	80138ae <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	683a      	ldr	r2, [r7, #0]
 80138ac:	61da      	str	r2, [r3, #28]
  }
}
 80138ae:	bf00      	nop
 80138b0:	370c      	adds	r7, #12
 80138b2:	46bd      	mov	sp, r7
 80138b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138b8:	4770      	bx	lr

080138ba <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80138ba:	b480      	push	{r7}
 80138bc:	b085      	sub	sp, #20
 80138be:	af00      	add	r7, sp, #0
 80138c0:	60f8      	str	r0, [r7, #12]
 80138c2:	60b9      	str	r1, [r7, #8]
 80138c4:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80138c6:	f06f 030b 	mvn.w	r3, #11
}
 80138ca:	4618      	mov	r0, r3
 80138cc:	3714      	adds	r7, #20
 80138ce:	46bd      	mov	sp, r7
 80138d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138d4:	4770      	bx	lr
	...

080138d8 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80138d8:	b480      	push	{r7}
 80138da:	b085      	sub	sp, #20
 80138dc:	af00      	add	r7, sp, #0
 80138de:	4603      	mov	r3, r0
 80138e0:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80138e2:	79fb      	ldrb	r3, [r7, #7]
 80138e4:	2b00      	cmp	r3, #0
 80138e6:	d013      	beq.n	8013910 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80138e8:	4b0d      	ldr	r3, [pc, #52]	; (8013920 <netif_get_by_index+0x48>)
 80138ea:	681b      	ldr	r3, [r3, #0]
 80138ec:	60fb      	str	r3, [r7, #12]
 80138ee:	e00c      	b.n	801390a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80138f0:	68fb      	ldr	r3, [r7, #12]
 80138f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80138f6:	3301      	adds	r3, #1
 80138f8:	b2db      	uxtb	r3, r3
 80138fa:	79fa      	ldrb	r2, [r7, #7]
 80138fc:	429a      	cmp	r2, r3
 80138fe:	d101      	bne.n	8013904 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8013900:	68fb      	ldr	r3, [r7, #12]
 8013902:	e006      	b.n	8013912 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8013904:	68fb      	ldr	r3, [r7, #12]
 8013906:	681b      	ldr	r3, [r3, #0]
 8013908:	60fb      	str	r3, [r7, #12]
 801390a:	68fb      	ldr	r3, [r7, #12]
 801390c:	2b00      	cmp	r3, #0
 801390e:	d1ef      	bne.n	80138f0 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8013910:	2300      	movs	r3, #0
}
 8013912:	4618      	mov	r0, r3
 8013914:	3714      	adds	r7, #20
 8013916:	46bd      	mov	sp, r7
 8013918:	f85d 7b04 	ldr.w	r7, [sp], #4
 801391c:	4770      	bx	lr
 801391e:	bf00      	nop
 8013920:	24048e68 	.word	0x24048e68

08013924 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8013924:	b580      	push	{r7, lr}
 8013926:	b082      	sub	sp, #8
 8013928:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 801392a:	f002 f8d7 	bl	8015adc <sys_arch_protect>
 801392e:	6038      	str	r0, [r7, #0]
 8013930:	4b0d      	ldr	r3, [pc, #52]	; (8013968 <pbuf_free_ooseq+0x44>)
 8013932:	2200      	movs	r2, #0
 8013934:	701a      	strb	r2, [r3, #0]
 8013936:	6838      	ldr	r0, [r7, #0]
 8013938:	f002 f8de 	bl	8015af8 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 801393c:	4b0b      	ldr	r3, [pc, #44]	; (801396c <pbuf_free_ooseq+0x48>)
 801393e:	681b      	ldr	r3, [r3, #0]
 8013940:	607b      	str	r3, [r7, #4]
 8013942:	e00a      	b.n	801395a <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8013944:	687b      	ldr	r3, [r7, #4]
 8013946:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013948:	2b00      	cmp	r3, #0
 801394a:	d003      	beq.n	8013954 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 801394c:	6878      	ldr	r0, [r7, #4]
 801394e:	f003 fee3 	bl	8017718 <tcp_free_ooseq>
      return;
 8013952:	e005      	b.n	8013960 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8013954:	687b      	ldr	r3, [r7, #4]
 8013956:	68db      	ldr	r3, [r3, #12]
 8013958:	607b      	str	r3, [r7, #4]
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	2b00      	cmp	r3, #0
 801395e:	d1f1      	bne.n	8013944 <pbuf_free_ooseq+0x20>
    }
  }
}
 8013960:	3708      	adds	r7, #8
 8013962:	46bd      	mov	sp, r7
 8013964:	bd80      	pop	{r7, pc}
 8013966:	bf00      	nop
 8013968:	24048e70 	.word	0x24048e70
 801396c:	24048e80 	.word	0x24048e80

08013970 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8013970:	b580      	push	{r7, lr}
 8013972:	b082      	sub	sp, #8
 8013974:	af00      	add	r7, sp, #0
 8013976:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8013978:	f7ff ffd4 	bl	8013924 <pbuf_free_ooseq>
}
 801397c:	bf00      	nop
 801397e:	3708      	adds	r7, #8
 8013980:	46bd      	mov	sp, r7
 8013982:	bd80      	pop	{r7, pc}

08013984 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8013984:	b580      	push	{r7, lr}
 8013986:	b082      	sub	sp, #8
 8013988:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 801398a:	f002 f8a7 	bl	8015adc <sys_arch_protect>
 801398e:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8013990:	4b0f      	ldr	r3, [pc, #60]	; (80139d0 <pbuf_pool_is_empty+0x4c>)
 8013992:	781b      	ldrb	r3, [r3, #0]
 8013994:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8013996:	4b0e      	ldr	r3, [pc, #56]	; (80139d0 <pbuf_pool_is_empty+0x4c>)
 8013998:	2201      	movs	r2, #1
 801399a:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 801399c:	6878      	ldr	r0, [r7, #4]
 801399e:	f002 f8ab 	bl	8015af8 <sys_arch_unprotect>

  if (!queued) {
 80139a2:	78fb      	ldrb	r3, [r7, #3]
 80139a4:	2b00      	cmp	r3, #0
 80139a6:	d10f      	bne.n	80139c8 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 80139a8:	2100      	movs	r1, #0
 80139aa:	480a      	ldr	r0, [pc, #40]	; (80139d4 <pbuf_pool_is_empty+0x50>)
 80139ac:	f008 f9e0 	bl	801bd70 <tcpip_try_callback>
 80139b0:	4603      	mov	r3, r0
 80139b2:	2b00      	cmp	r3, #0
 80139b4:	d008      	beq.n	80139c8 <pbuf_pool_is_empty+0x44>
 80139b6:	f002 f891 	bl	8015adc <sys_arch_protect>
 80139ba:	6078      	str	r0, [r7, #4]
 80139bc:	4b04      	ldr	r3, [pc, #16]	; (80139d0 <pbuf_pool_is_empty+0x4c>)
 80139be:	2200      	movs	r2, #0
 80139c0:	701a      	strb	r2, [r3, #0]
 80139c2:	6878      	ldr	r0, [r7, #4]
 80139c4:	f002 f898 	bl	8015af8 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80139c8:	bf00      	nop
 80139ca:	3708      	adds	r7, #8
 80139cc:	46bd      	mov	sp, r7
 80139ce:	bd80      	pop	{r7, pc}
 80139d0:	24048e70 	.word	0x24048e70
 80139d4:	08013971 	.word	0x08013971

080139d8 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80139d8:	b480      	push	{r7}
 80139da:	b085      	sub	sp, #20
 80139dc:	af00      	add	r7, sp, #0
 80139de:	60f8      	str	r0, [r7, #12]
 80139e0:	60b9      	str	r1, [r7, #8]
 80139e2:	4611      	mov	r1, r2
 80139e4:	461a      	mov	r2, r3
 80139e6:	460b      	mov	r3, r1
 80139e8:	80fb      	strh	r3, [r7, #6]
 80139ea:	4613      	mov	r3, r2
 80139ec:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80139ee:	68fb      	ldr	r3, [r7, #12]
 80139f0:	2200      	movs	r2, #0
 80139f2:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80139f4:	68fb      	ldr	r3, [r7, #12]
 80139f6:	68ba      	ldr	r2, [r7, #8]
 80139f8:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80139fa:	68fb      	ldr	r3, [r7, #12]
 80139fc:	88fa      	ldrh	r2, [r7, #6]
 80139fe:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8013a00:	68fb      	ldr	r3, [r7, #12]
 8013a02:	88ba      	ldrh	r2, [r7, #4]
 8013a04:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8013a06:	8b3b      	ldrh	r3, [r7, #24]
 8013a08:	b2da      	uxtb	r2, r3
 8013a0a:	68fb      	ldr	r3, [r7, #12]
 8013a0c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8013a0e:	68fb      	ldr	r3, [r7, #12]
 8013a10:	7f3a      	ldrb	r2, [r7, #28]
 8013a12:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8013a14:	68fb      	ldr	r3, [r7, #12]
 8013a16:	2201      	movs	r2, #1
 8013a18:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8013a1a:	68fb      	ldr	r3, [r7, #12]
 8013a1c:	2200      	movs	r2, #0
 8013a1e:	73da      	strb	r2, [r3, #15]
}
 8013a20:	bf00      	nop
 8013a22:	3714      	adds	r7, #20
 8013a24:	46bd      	mov	sp, r7
 8013a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a2a:	4770      	bx	lr

08013a2c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8013a2c:	b580      	push	{r7, lr}
 8013a2e:	b08c      	sub	sp, #48	; 0x30
 8013a30:	af02      	add	r7, sp, #8
 8013a32:	4603      	mov	r3, r0
 8013a34:	71fb      	strb	r3, [r7, #7]
 8013a36:	460b      	mov	r3, r1
 8013a38:	80bb      	strh	r3, [r7, #4]
 8013a3a:	4613      	mov	r3, r2
 8013a3c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8013a3e:	79fb      	ldrb	r3, [r7, #7]
 8013a40:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8013a42:	887b      	ldrh	r3, [r7, #2]
 8013a44:	2b41      	cmp	r3, #65	; 0x41
 8013a46:	d00b      	beq.n	8013a60 <pbuf_alloc+0x34>
 8013a48:	2b41      	cmp	r3, #65	; 0x41
 8013a4a:	dc02      	bgt.n	8013a52 <pbuf_alloc+0x26>
 8013a4c:	2b01      	cmp	r3, #1
 8013a4e:	d007      	beq.n	8013a60 <pbuf_alloc+0x34>
 8013a50:	e0c2      	b.n	8013bd8 <pbuf_alloc+0x1ac>
 8013a52:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8013a56:	d00b      	beq.n	8013a70 <pbuf_alloc+0x44>
 8013a58:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8013a5c:	d070      	beq.n	8013b40 <pbuf_alloc+0x114>
 8013a5e:	e0bb      	b.n	8013bd8 <pbuf_alloc+0x1ac>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8013a60:	887a      	ldrh	r2, [r7, #2]
 8013a62:	88bb      	ldrh	r3, [r7, #4]
 8013a64:	4619      	mov	r1, r3
 8013a66:	2000      	movs	r0, #0
 8013a68:	f000 f8d2 	bl	8013c10 <pbuf_alloc_reference>
 8013a6c:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8013a6e:	e0bd      	b.n	8013bec <pbuf_alloc+0x1c0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8013a70:	2300      	movs	r3, #0
 8013a72:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8013a74:	2300      	movs	r3, #0
 8013a76:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8013a78:	88bb      	ldrh	r3, [r7, #4]
 8013a7a:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8013a7c:	200c      	movs	r0, #12
 8013a7e:	f7ff fb0d 	bl	801309c <memp_malloc>
 8013a82:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8013a84:	693b      	ldr	r3, [r7, #16]
 8013a86:	2b00      	cmp	r3, #0
 8013a88:	d109      	bne.n	8013a9e <pbuf_alloc+0x72>
          PBUF_POOL_IS_EMPTY();
 8013a8a:	f7ff ff7b 	bl	8013984 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8013a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a90:	2b00      	cmp	r3, #0
 8013a92:	d002      	beq.n	8013a9a <pbuf_alloc+0x6e>
            pbuf_free(p);
 8013a94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013a96:	f000 fadb 	bl	8014050 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8013a9a:	2300      	movs	r3, #0
 8013a9c:	e0a7      	b.n	8013bee <pbuf_alloc+0x1c2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8013a9e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013aa0:	3303      	adds	r3, #3
 8013aa2:	b29b      	uxth	r3, r3
 8013aa4:	f023 0303 	bic.w	r3, r3, #3
 8013aa8:	b29b      	uxth	r3, r3
 8013aaa:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8013aae:	b29b      	uxth	r3, r3
 8013ab0:	8b7a      	ldrh	r2, [r7, #26]
 8013ab2:	4293      	cmp	r3, r2
 8013ab4:	bf28      	it	cs
 8013ab6:	4613      	movcs	r3, r2
 8013ab8:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8013aba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013abc:	3310      	adds	r3, #16
 8013abe:	693a      	ldr	r2, [r7, #16]
 8013ac0:	4413      	add	r3, r2
 8013ac2:	3303      	adds	r3, #3
 8013ac4:	f023 0303 	bic.w	r3, r3, #3
 8013ac8:	4618      	mov	r0, r3
 8013aca:	89f9      	ldrh	r1, [r7, #14]
 8013acc:	8b7a      	ldrh	r2, [r7, #26]
 8013ace:	2300      	movs	r3, #0
 8013ad0:	9301      	str	r3, [sp, #4]
 8013ad2:	887b      	ldrh	r3, [r7, #2]
 8013ad4:	9300      	str	r3, [sp, #0]
 8013ad6:	460b      	mov	r3, r1
 8013ad8:	4601      	mov	r1, r0
 8013ada:	6938      	ldr	r0, [r7, #16]
 8013adc:	f7ff ff7c 	bl	80139d8 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8013ae0:	693b      	ldr	r3, [r7, #16]
 8013ae2:	685b      	ldr	r3, [r3, #4]
 8013ae4:	f003 0303 	and.w	r3, r3, #3
 8013ae8:	2b00      	cmp	r3, #0
 8013aea:	d006      	beq.n	8013afa <pbuf_alloc+0xce>
 8013aec:	4b42      	ldr	r3, [pc, #264]	; (8013bf8 <pbuf_alloc+0x1cc>)
 8013aee:	f240 1201 	movw	r2, #257	; 0x101
 8013af2:	4942      	ldr	r1, [pc, #264]	; (8013bfc <pbuf_alloc+0x1d0>)
 8013af4:	4842      	ldr	r0, [pc, #264]	; (8013c00 <pbuf_alloc+0x1d4>)
 8013af6:	f00d fa2b 	bl	8020f50 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8013afa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013afc:	3303      	adds	r3, #3
 8013afe:	f023 0303 	bic.w	r3, r3, #3
 8013b02:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8013b06:	d106      	bne.n	8013b16 <pbuf_alloc+0xea>
 8013b08:	4b3b      	ldr	r3, [pc, #236]	; (8013bf8 <pbuf_alloc+0x1cc>)
 8013b0a:	f240 1203 	movw	r2, #259	; 0x103
 8013b0e:	493d      	ldr	r1, [pc, #244]	; (8013c04 <pbuf_alloc+0x1d8>)
 8013b10:	483b      	ldr	r0, [pc, #236]	; (8013c00 <pbuf_alloc+0x1d4>)
 8013b12:	f00d fa1d 	bl	8020f50 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8013b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b18:	2b00      	cmp	r3, #0
 8013b1a:	d102      	bne.n	8013b22 <pbuf_alloc+0xf6>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8013b1c:	693b      	ldr	r3, [r7, #16]
 8013b1e:	627b      	str	r3, [r7, #36]	; 0x24
 8013b20:	e002      	b.n	8013b28 <pbuf_alloc+0xfc>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8013b22:	69fb      	ldr	r3, [r7, #28]
 8013b24:	693a      	ldr	r2, [r7, #16]
 8013b26:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8013b28:	693b      	ldr	r3, [r7, #16]
 8013b2a:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8013b2c:	8b7a      	ldrh	r2, [r7, #26]
 8013b2e:	89fb      	ldrh	r3, [r7, #14]
 8013b30:	1ad3      	subs	r3, r2, r3
 8013b32:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8013b34:	2300      	movs	r3, #0
 8013b36:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8013b38:	8b7b      	ldrh	r3, [r7, #26]
 8013b3a:	2b00      	cmp	r3, #0
 8013b3c:	d19e      	bne.n	8013a7c <pbuf_alloc+0x50>
      break;
 8013b3e:	e055      	b.n	8013bec <pbuf_alloc+0x1c0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8013b40:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013b42:	3303      	adds	r3, #3
 8013b44:	b29b      	uxth	r3, r3
 8013b46:	f023 0303 	bic.w	r3, r3, #3
 8013b4a:	b29a      	uxth	r2, r3
 8013b4c:	88bb      	ldrh	r3, [r7, #4]
 8013b4e:	3303      	adds	r3, #3
 8013b50:	b29b      	uxth	r3, r3
 8013b52:	f023 0303 	bic.w	r3, r3, #3
 8013b56:	b29b      	uxth	r3, r3
 8013b58:	4413      	add	r3, r2
 8013b5a:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8013b5c:	8b3b      	ldrh	r3, [r7, #24]
 8013b5e:	3310      	adds	r3, #16
 8013b60:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8013b62:	8b3a      	ldrh	r2, [r7, #24]
 8013b64:	88bb      	ldrh	r3, [r7, #4]
 8013b66:	3303      	adds	r3, #3
 8013b68:	f023 0303 	bic.w	r3, r3, #3
 8013b6c:	429a      	cmp	r2, r3
 8013b6e:	d306      	bcc.n	8013b7e <pbuf_alloc+0x152>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8013b70:	8afa      	ldrh	r2, [r7, #22]
 8013b72:	88bb      	ldrh	r3, [r7, #4]
 8013b74:	3303      	adds	r3, #3
 8013b76:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8013b7a:	429a      	cmp	r2, r3
 8013b7c:	d201      	bcs.n	8013b82 <pbuf_alloc+0x156>
        return NULL;
 8013b7e:	2300      	movs	r3, #0
 8013b80:	e035      	b.n	8013bee <pbuf_alloc+0x1c2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8013b82:	8afb      	ldrh	r3, [r7, #22]
 8013b84:	4618      	mov	r0, r3
 8013b86:	f7ff f8e1 	bl	8012d4c <mem_malloc>
 8013b8a:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8013b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b8e:	2b00      	cmp	r3, #0
 8013b90:	d101      	bne.n	8013b96 <pbuf_alloc+0x16a>
        return NULL;
 8013b92:	2300      	movs	r3, #0
 8013b94:	e02b      	b.n	8013bee <pbuf_alloc+0x1c2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8013b96:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013b98:	3310      	adds	r3, #16
 8013b9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013b9c:	4413      	add	r3, r2
 8013b9e:	3303      	adds	r3, #3
 8013ba0:	f023 0303 	bic.w	r3, r3, #3
 8013ba4:	4618      	mov	r0, r3
 8013ba6:	88b9      	ldrh	r1, [r7, #4]
 8013ba8:	88ba      	ldrh	r2, [r7, #4]
 8013baa:	2300      	movs	r3, #0
 8013bac:	9301      	str	r3, [sp, #4]
 8013bae:	887b      	ldrh	r3, [r7, #2]
 8013bb0:	9300      	str	r3, [sp, #0]
 8013bb2:	460b      	mov	r3, r1
 8013bb4:	4601      	mov	r1, r0
 8013bb6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013bb8:	f7ff ff0e 	bl	80139d8 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8013bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bbe:	685b      	ldr	r3, [r3, #4]
 8013bc0:	f003 0303 	and.w	r3, r3, #3
 8013bc4:	2b00      	cmp	r3, #0
 8013bc6:	d010      	beq.n	8013bea <pbuf_alloc+0x1be>
 8013bc8:	4b0b      	ldr	r3, [pc, #44]	; (8013bf8 <pbuf_alloc+0x1cc>)
 8013bca:	f240 1223 	movw	r2, #291	; 0x123
 8013bce:	490e      	ldr	r1, [pc, #56]	; (8013c08 <pbuf_alloc+0x1dc>)
 8013bd0:	480b      	ldr	r0, [pc, #44]	; (8013c00 <pbuf_alloc+0x1d4>)
 8013bd2:	f00d f9bd 	bl	8020f50 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8013bd6:	e008      	b.n	8013bea <pbuf_alloc+0x1be>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8013bd8:	4b07      	ldr	r3, [pc, #28]	; (8013bf8 <pbuf_alloc+0x1cc>)
 8013bda:	f240 1227 	movw	r2, #295	; 0x127
 8013bde:	490b      	ldr	r1, [pc, #44]	; (8013c0c <pbuf_alloc+0x1e0>)
 8013be0:	4807      	ldr	r0, [pc, #28]	; (8013c00 <pbuf_alloc+0x1d4>)
 8013be2:	f00d f9b5 	bl	8020f50 <iprintf>
      return NULL;
 8013be6:	2300      	movs	r3, #0
 8013be8:	e001      	b.n	8013bee <pbuf_alloc+0x1c2>
      break;
 8013bea:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8013bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013bee:	4618      	mov	r0, r3
 8013bf0:	3728      	adds	r7, #40	; 0x28
 8013bf2:	46bd      	mov	sp, r7
 8013bf4:	bd80      	pop	{r7, pc}
 8013bf6:	bf00      	nop
 8013bf8:	08024a58 	.word	0x08024a58
 8013bfc:	08024aa8 	.word	0x08024aa8
 8013c00:	08024ad8 	.word	0x08024ad8
 8013c04:	08024b00 	.word	0x08024b00
 8013c08:	08024b34 	.word	0x08024b34
 8013c0c:	08024b60 	.word	0x08024b60

08013c10 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8013c10:	b580      	push	{r7, lr}
 8013c12:	b086      	sub	sp, #24
 8013c14:	af02      	add	r7, sp, #8
 8013c16:	6078      	str	r0, [r7, #4]
 8013c18:	460b      	mov	r3, r1
 8013c1a:	807b      	strh	r3, [r7, #2]
 8013c1c:	4613      	mov	r3, r2
 8013c1e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8013c20:	883b      	ldrh	r3, [r7, #0]
 8013c22:	2b41      	cmp	r3, #65	; 0x41
 8013c24:	d009      	beq.n	8013c3a <pbuf_alloc_reference+0x2a>
 8013c26:	883b      	ldrh	r3, [r7, #0]
 8013c28:	2b01      	cmp	r3, #1
 8013c2a:	d006      	beq.n	8013c3a <pbuf_alloc_reference+0x2a>
 8013c2c:	4b0f      	ldr	r3, [pc, #60]	; (8013c6c <pbuf_alloc_reference+0x5c>)
 8013c2e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8013c32:	490f      	ldr	r1, [pc, #60]	; (8013c70 <pbuf_alloc_reference+0x60>)
 8013c34:	480f      	ldr	r0, [pc, #60]	; (8013c74 <pbuf_alloc_reference+0x64>)
 8013c36:	f00d f98b 	bl	8020f50 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8013c3a:	200b      	movs	r0, #11
 8013c3c:	f7ff fa2e 	bl	801309c <memp_malloc>
 8013c40:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8013c42:	68fb      	ldr	r3, [r7, #12]
 8013c44:	2b00      	cmp	r3, #0
 8013c46:	d101      	bne.n	8013c4c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8013c48:	2300      	movs	r3, #0
 8013c4a:	e00b      	b.n	8013c64 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8013c4c:	8879      	ldrh	r1, [r7, #2]
 8013c4e:	887a      	ldrh	r2, [r7, #2]
 8013c50:	2300      	movs	r3, #0
 8013c52:	9301      	str	r3, [sp, #4]
 8013c54:	883b      	ldrh	r3, [r7, #0]
 8013c56:	9300      	str	r3, [sp, #0]
 8013c58:	460b      	mov	r3, r1
 8013c5a:	6879      	ldr	r1, [r7, #4]
 8013c5c:	68f8      	ldr	r0, [r7, #12]
 8013c5e:	f7ff febb 	bl	80139d8 <pbuf_init_alloced_pbuf>
  return p;
 8013c62:	68fb      	ldr	r3, [r7, #12]
}
 8013c64:	4618      	mov	r0, r3
 8013c66:	3710      	adds	r7, #16
 8013c68:	46bd      	mov	sp, r7
 8013c6a:	bd80      	pop	{r7, pc}
 8013c6c:	08024a58 	.word	0x08024a58
 8013c70:	08024b7c 	.word	0x08024b7c
 8013c74:	08024ad8 	.word	0x08024ad8

08013c78 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8013c78:	b580      	push	{r7, lr}
 8013c7a:	b088      	sub	sp, #32
 8013c7c:	af02      	add	r7, sp, #8
 8013c7e:	607b      	str	r3, [r7, #4]
 8013c80:	4603      	mov	r3, r0
 8013c82:	73fb      	strb	r3, [r7, #15]
 8013c84:	460b      	mov	r3, r1
 8013c86:	81bb      	strh	r3, [r7, #12]
 8013c88:	4613      	mov	r3, r2
 8013c8a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8013c8c:	7bfb      	ldrb	r3, [r7, #15]
 8013c8e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8013c90:	8a7b      	ldrh	r3, [r7, #18]
 8013c92:	3303      	adds	r3, #3
 8013c94:	f023 0203 	bic.w	r2, r3, #3
 8013c98:	89bb      	ldrh	r3, [r7, #12]
 8013c9a:	441a      	add	r2, r3
 8013c9c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013c9e:	429a      	cmp	r2, r3
 8013ca0:	d901      	bls.n	8013ca6 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8013ca2:	2300      	movs	r3, #0
 8013ca4:	e018      	b.n	8013cd8 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8013ca6:	6a3b      	ldr	r3, [r7, #32]
 8013ca8:	2b00      	cmp	r3, #0
 8013caa:	d007      	beq.n	8013cbc <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8013cac:	8a7b      	ldrh	r3, [r7, #18]
 8013cae:	3303      	adds	r3, #3
 8013cb0:	f023 0303 	bic.w	r3, r3, #3
 8013cb4:	6a3a      	ldr	r2, [r7, #32]
 8013cb6:	4413      	add	r3, r2
 8013cb8:	617b      	str	r3, [r7, #20]
 8013cba:	e001      	b.n	8013cc0 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8013cbc:	2300      	movs	r3, #0
 8013cbe:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8013cc0:	6878      	ldr	r0, [r7, #4]
 8013cc2:	89b9      	ldrh	r1, [r7, #12]
 8013cc4:	89ba      	ldrh	r2, [r7, #12]
 8013cc6:	2302      	movs	r3, #2
 8013cc8:	9301      	str	r3, [sp, #4]
 8013cca:	897b      	ldrh	r3, [r7, #10]
 8013ccc:	9300      	str	r3, [sp, #0]
 8013cce:	460b      	mov	r3, r1
 8013cd0:	6979      	ldr	r1, [r7, #20]
 8013cd2:	f7ff fe81 	bl	80139d8 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8013cd6:	687b      	ldr	r3, [r7, #4]
}
 8013cd8:	4618      	mov	r0, r3
 8013cda:	3718      	adds	r7, #24
 8013cdc:	46bd      	mov	sp, r7
 8013cde:	bd80      	pop	{r7, pc}

08013ce0 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8013ce0:	b580      	push	{r7, lr}
 8013ce2:	b084      	sub	sp, #16
 8013ce4:	af00      	add	r7, sp, #0
 8013ce6:	6078      	str	r0, [r7, #4]
 8013ce8:	460b      	mov	r3, r1
 8013cea:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8013cec:	687b      	ldr	r3, [r7, #4]
 8013cee:	2b00      	cmp	r3, #0
 8013cf0:	d106      	bne.n	8013d00 <pbuf_realloc+0x20>
 8013cf2:	4b3a      	ldr	r3, [pc, #232]	; (8013ddc <pbuf_realloc+0xfc>)
 8013cf4:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8013cf8:	4939      	ldr	r1, [pc, #228]	; (8013de0 <pbuf_realloc+0x100>)
 8013cfa:	483a      	ldr	r0, [pc, #232]	; (8013de4 <pbuf_realloc+0x104>)
 8013cfc:	f00d f928 	bl	8020f50 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	891b      	ldrh	r3, [r3, #8]
 8013d04:	887a      	ldrh	r2, [r7, #2]
 8013d06:	429a      	cmp	r2, r3
 8013d08:	d264      	bcs.n	8013dd4 <pbuf_realloc+0xf4>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	891a      	ldrh	r2, [r3, #8]
 8013d0e:	887b      	ldrh	r3, [r7, #2]
 8013d10:	1ad3      	subs	r3, r2, r3
 8013d12:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8013d14:	887b      	ldrh	r3, [r7, #2]
 8013d16:	817b      	strh	r3, [r7, #10]
  q = p;
 8013d18:	687b      	ldr	r3, [r7, #4]
 8013d1a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8013d1c:	e018      	b.n	8013d50 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8013d1e:	68fb      	ldr	r3, [r7, #12]
 8013d20:	895b      	ldrh	r3, [r3, #10]
 8013d22:	897a      	ldrh	r2, [r7, #10]
 8013d24:	1ad3      	subs	r3, r2, r3
 8013d26:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8013d28:	68fb      	ldr	r3, [r7, #12]
 8013d2a:	891a      	ldrh	r2, [r3, #8]
 8013d2c:	893b      	ldrh	r3, [r7, #8]
 8013d2e:	1ad3      	subs	r3, r2, r3
 8013d30:	b29a      	uxth	r2, r3
 8013d32:	68fb      	ldr	r3, [r7, #12]
 8013d34:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8013d36:	68fb      	ldr	r3, [r7, #12]
 8013d38:	681b      	ldr	r3, [r3, #0]
 8013d3a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8013d3c:	68fb      	ldr	r3, [r7, #12]
 8013d3e:	2b00      	cmp	r3, #0
 8013d40:	d106      	bne.n	8013d50 <pbuf_realloc+0x70>
 8013d42:	4b26      	ldr	r3, [pc, #152]	; (8013ddc <pbuf_realloc+0xfc>)
 8013d44:	f240 12af 	movw	r2, #431	; 0x1af
 8013d48:	4927      	ldr	r1, [pc, #156]	; (8013de8 <pbuf_realloc+0x108>)
 8013d4a:	4826      	ldr	r0, [pc, #152]	; (8013de4 <pbuf_realloc+0x104>)
 8013d4c:	f00d f900 	bl	8020f50 <iprintf>
  while (rem_len > q->len) {
 8013d50:	68fb      	ldr	r3, [r7, #12]
 8013d52:	895b      	ldrh	r3, [r3, #10]
 8013d54:	897a      	ldrh	r2, [r7, #10]
 8013d56:	429a      	cmp	r2, r3
 8013d58:	d8e1      	bhi.n	8013d1e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8013d5a:	68fb      	ldr	r3, [r7, #12]
 8013d5c:	7b1b      	ldrb	r3, [r3, #12]
 8013d5e:	f003 030f 	and.w	r3, r3, #15
 8013d62:	2b00      	cmp	r3, #0
 8013d64:	d122      	bne.n	8013dac <pbuf_realloc+0xcc>
 8013d66:	68fb      	ldr	r3, [r7, #12]
 8013d68:	895b      	ldrh	r3, [r3, #10]
 8013d6a:	897a      	ldrh	r2, [r7, #10]
 8013d6c:	429a      	cmp	r2, r3
 8013d6e:	d01d      	beq.n	8013dac <pbuf_realloc+0xcc>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8013d70:	68fb      	ldr	r3, [r7, #12]
 8013d72:	7b5b      	ldrb	r3, [r3, #13]
 8013d74:	f003 0302 	and.w	r3, r3, #2
 8013d78:	2b00      	cmp	r3, #0
 8013d7a:	d117      	bne.n	8013dac <pbuf_realloc+0xcc>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8013d7c:	68fb      	ldr	r3, [r7, #12]
 8013d7e:	685b      	ldr	r3, [r3, #4]
 8013d80:	461a      	mov	r2, r3
 8013d82:	68fb      	ldr	r3, [r7, #12]
 8013d84:	1ad3      	subs	r3, r2, r3
 8013d86:	b29a      	uxth	r2, r3
 8013d88:	897b      	ldrh	r3, [r7, #10]
 8013d8a:	4413      	add	r3, r2
 8013d8c:	b29b      	uxth	r3, r3
 8013d8e:	4619      	mov	r1, r3
 8013d90:	68f8      	ldr	r0, [r7, #12]
 8013d92:	f7fe fecb 	bl	8012b2c <mem_trim>
 8013d96:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8013d98:	68fb      	ldr	r3, [r7, #12]
 8013d9a:	2b00      	cmp	r3, #0
 8013d9c:	d106      	bne.n	8013dac <pbuf_realloc+0xcc>
 8013d9e:	4b0f      	ldr	r3, [pc, #60]	; (8013ddc <pbuf_realloc+0xfc>)
 8013da0:	f240 12bd 	movw	r2, #445	; 0x1bd
 8013da4:	4911      	ldr	r1, [pc, #68]	; (8013dec <pbuf_realloc+0x10c>)
 8013da6:	480f      	ldr	r0, [pc, #60]	; (8013de4 <pbuf_realloc+0x104>)
 8013da8:	f00d f8d2 	bl	8020f50 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8013dac:	68fb      	ldr	r3, [r7, #12]
 8013dae:	897a      	ldrh	r2, [r7, #10]
 8013db0:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8013db2:	68fb      	ldr	r3, [r7, #12]
 8013db4:	895a      	ldrh	r2, [r3, #10]
 8013db6:	68fb      	ldr	r3, [r7, #12]
 8013db8:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8013dba:	68fb      	ldr	r3, [r7, #12]
 8013dbc:	681b      	ldr	r3, [r3, #0]
 8013dbe:	2b00      	cmp	r3, #0
 8013dc0:	d004      	beq.n	8013dcc <pbuf_realloc+0xec>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8013dc2:	68fb      	ldr	r3, [r7, #12]
 8013dc4:	681b      	ldr	r3, [r3, #0]
 8013dc6:	4618      	mov	r0, r3
 8013dc8:	f000 f942 	bl	8014050 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8013dcc:	68fb      	ldr	r3, [r7, #12]
 8013dce:	2200      	movs	r2, #0
 8013dd0:	601a      	str	r2, [r3, #0]
 8013dd2:	e000      	b.n	8013dd6 <pbuf_realloc+0xf6>
    return;
 8013dd4:	bf00      	nop

}
 8013dd6:	3710      	adds	r7, #16
 8013dd8:	46bd      	mov	sp, r7
 8013dda:	bd80      	pop	{r7, pc}
 8013ddc:	08024a58 	.word	0x08024a58
 8013de0:	08024b90 	.word	0x08024b90
 8013de4:	08024ad8 	.word	0x08024ad8
 8013de8:	08024ba8 	.word	0x08024ba8
 8013dec:	08024bc0 	.word	0x08024bc0

08013df0 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8013df0:	b580      	push	{r7, lr}
 8013df2:	b086      	sub	sp, #24
 8013df4:	af00      	add	r7, sp, #0
 8013df6:	60f8      	str	r0, [r7, #12]
 8013df8:	60b9      	str	r1, [r7, #8]
 8013dfa:	4613      	mov	r3, r2
 8013dfc:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8013dfe:	68fb      	ldr	r3, [r7, #12]
 8013e00:	2b00      	cmp	r3, #0
 8013e02:	d106      	bne.n	8013e12 <pbuf_add_header_impl+0x22>
 8013e04:	4b2b      	ldr	r3, [pc, #172]	; (8013eb4 <pbuf_add_header_impl+0xc4>)
 8013e06:	f240 12df 	movw	r2, #479	; 0x1df
 8013e0a:	492b      	ldr	r1, [pc, #172]	; (8013eb8 <pbuf_add_header_impl+0xc8>)
 8013e0c:	482b      	ldr	r0, [pc, #172]	; (8013ebc <pbuf_add_header_impl+0xcc>)
 8013e0e:	f00d f89f 	bl	8020f50 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8013e12:	68fb      	ldr	r3, [r7, #12]
 8013e14:	2b00      	cmp	r3, #0
 8013e16:	d003      	beq.n	8013e20 <pbuf_add_header_impl+0x30>
 8013e18:	68bb      	ldr	r3, [r7, #8]
 8013e1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013e1e:	d301      	bcc.n	8013e24 <pbuf_add_header_impl+0x34>
    return 1;
 8013e20:	2301      	movs	r3, #1
 8013e22:	e043      	b.n	8013eac <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8013e24:	68bb      	ldr	r3, [r7, #8]
 8013e26:	2b00      	cmp	r3, #0
 8013e28:	d101      	bne.n	8013e2e <pbuf_add_header_impl+0x3e>
    return 0;
 8013e2a:	2300      	movs	r3, #0
 8013e2c:	e03e      	b.n	8013eac <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8013e2e:	68bb      	ldr	r3, [r7, #8]
 8013e30:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8013e32:	68fb      	ldr	r3, [r7, #12]
 8013e34:	891a      	ldrh	r2, [r3, #8]
 8013e36:	8a7b      	ldrh	r3, [r7, #18]
 8013e38:	4413      	add	r3, r2
 8013e3a:	b29b      	uxth	r3, r3
 8013e3c:	8a7a      	ldrh	r2, [r7, #18]
 8013e3e:	429a      	cmp	r2, r3
 8013e40:	d901      	bls.n	8013e46 <pbuf_add_header_impl+0x56>
    return 1;
 8013e42:	2301      	movs	r3, #1
 8013e44:	e032      	b.n	8013eac <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8013e46:	68fb      	ldr	r3, [r7, #12]
 8013e48:	7b1b      	ldrb	r3, [r3, #12]
 8013e4a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8013e4c:	8a3b      	ldrh	r3, [r7, #16]
 8013e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013e52:	2b00      	cmp	r3, #0
 8013e54:	d00c      	beq.n	8013e70 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8013e56:	68fb      	ldr	r3, [r7, #12]
 8013e58:	685a      	ldr	r2, [r3, #4]
 8013e5a:	68bb      	ldr	r3, [r7, #8]
 8013e5c:	425b      	negs	r3, r3
 8013e5e:	4413      	add	r3, r2
 8013e60:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8013e62:	68fb      	ldr	r3, [r7, #12]
 8013e64:	3310      	adds	r3, #16
 8013e66:	697a      	ldr	r2, [r7, #20]
 8013e68:	429a      	cmp	r2, r3
 8013e6a:	d20d      	bcs.n	8013e88 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8013e6c:	2301      	movs	r3, #1
 8013e6e:	e01d      	b.n	8013eac <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8013e70:	79fb      	ldrb	r3, [r7, #7]
 8013e72:	2b00      	cmp	r3, #0
 8013e74:	d006      	beq.n	8013e84 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8013e76:	68fb      	ldr	r3, [r7, #12]
 8013e78:	685a      	ldr	r2, [r3, #4]
 8013e7a:	68bb      	ldr	r3, [r7, #8]
 8013e7c:	425b      	negs	r3, r3
 8013e7e:	4413      	add	r3, r2
 8013e80:	617b      	str	r3, [r7, #20]
 8013e82:	e001      	b.n	8013e88 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8013e84:	2301      	movs	r3, #1
 8013e86:	e011      	b.n	8013eac <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8013e88:	68fb      	ldr	r3, [r7, #12]
 8013e8a:	697a      	ldr	r2, [r7, #20]
 8013e8c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8013e8e:	68fb      	ldr	r3, [r7, #12]
 8013e90:	895a      	ldrh	r2, [r3, #10]
 8013e92:	8a7b      	ldrh	r3, [r7, #18]
 8013e94:	4413      	add	r3, r2
 8013e96:	b29a      	uxth	r2, r3
 8013e98:	68fb      	ldr	r3, [r7, #12]
 8013e9a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8013e9c:	68fb      	ldr	r3, [r7, #12]
 8013e9e:	891a      	ldrh	r2, [r3, #8]
 8013ea0:	8a7b      	ldrh	r3, [r7, #18]
 8013ea2:	4413      	add	r3, r2
 8013ea4:	b29a      	uxth	r2, r3
 8013ea6:	68fb      	ldr	r3, [r7, #12]
 8013ea8:	811a      	strh	r2, [r3, #8]


  return 0;
 8013eaa:	2300      	movs	r3, #0
}
 8013eac:	4618      	mov	r0, r3
 8013eae:	3718      	adds	r7, #24
 8013eb0:	46bd      	mov	sp, r7
 8013eb2:	bd80      	pop	{r7, pc}
 8013eb4:	08024a58 	.word	0x08024a58
 8013eb8:	08024bdc 	.word	0x08024bdc
 8013ebc:	08024ad8 	.word	0x08024ad8

08013ec0 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8013ec0:	b580      	push	{r7, lr}
 8013ec2:	b082      	sub	sp, #8
 8013ec4:	af00      	add	r7, sp, #0
 8013ec6:	6078      	str	r0, [r7, #4]
 8013ec8:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8013eca:	2200      	movs	r2, #0
 8013ecc:	6839      	ldr	r1, [r7, #0]
 8013ece:	6878      	ldr	r0, [r7, #4]
 8013ed0:	f7ff ff8e 	bl	8013df0 <pbuf_add_header_impl>
 8013ed4:	4603      	mov	r3, r0
}
 8013ed6:	4618      	mov	r0, r3
 8013ed8:	3708      	adds	r7, #8
 8013eda:	46bd      	mov	sp, r7
 8013edc:	bd80      	pop	{r7, pc}
	...

08013ee0 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8013ee0:	b580      	push	{r7, lr}
 8013ee2:	b084      	sub	sp, #16
 8013ee4:	af00      	add	r7, sp, #0
 8013ee6:	6078      	str	r0, [r7, #4]
 8013ee8:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8013eea:	687b      	ldr	r3, [r7, #4]
 8013eec:	2b00      	cmp	r3, #0
 8013eee:	d106      	bne.n	8013efe <pbuf_remove_header+0x1e>
 8013ef0:	4b20      	ldr	r3, [pc, #128]	; (8013f74 <pbuf_remove_header+0x94>)
 8013ef2:	f240 224b 	movw	r2, #587	; 0x24b
 8013ef6:	4920      	ldr	r1, [pc, #128]	; (8013f78 <pbuf_remove_header+0x98>)
 8013ef8:	4820      	ldr	r0, [pc, #128]	; (8013f7c <pbuf_remove_header+0x9c>)
 8013efa:	f00d f829 	bl	8020f50 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8013efe:	687b      	ldr	r3, [r7, #4]
 8013f00:	2b00      	cmp	r3, #0
 8013f02:	d003      	beq.n	8013f0c <pbuf_remove_header+0x2c>
 8013f04:	683b      	ldr	r3, [r7, #0]
 8013f06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013f0a:	d301      	bcc.n	8013f10 <pbuf_remove_header+0x30>
    return 1;
 8013f0c:	2301      	movs	r3, #1
 8013f0e:	e02c      	b.n	8013f6a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8013f10:	683b      	ldr	r3, [r7, #0]
 8013f12:	2b00      	cmp	r3, #0
 8013f14:	d101      	bne.n	8013f1a <pbuf_remove_header+0x3a>
    return 0;
 8013f16:	2300      	movs	r3, #0
 8013f18:	e027      	b.n	8013f6a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8013f1a:	683b      	ldr	r3, [r7, #0]
 8013f1c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	895b      	ldrh	r3, [r3, #10]
 8013f22:	89fa      	ldrh	r2, [r7, #14]
 8013f24:	429a      	cmp	r2, r3
 8013f26:	d908      	bls.n	8013f3a <pbuf_remove_header+0x5a>
 8013f28:	4b12      	ldr	r3, [pc, #72]	; (8013f74 <pbuf_remove_header+0x94>)
 8013f2a:	f240 2255 	movw	r2, #597	; 0x255
 8013f2e:	4914      	ldr	r1, [pc, #80]	; (8013f80 <pbuf_remove_header+0xa0>)
 8013f30:	4812      	ldr	r0, [pc, #72]	; (8013f7c <pbuf_remove_header+0x9c>)
 8013f32:	f00d f80d 	bl	8020f50 <iprintf>
 8013f36:	2301      	movs	r3, #1
 8013f38:	e017      	b.n	8013f6a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8013f3a:	687b      	ldr	r3, [r7, #4]
 8013f3c:	685b      	ldr	r3, [r3, #4]
 8013f3e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8013f40:	687b      	ldr	r3, [r7, #4]
 8013f42:	685a      	ldr	r2, [r3, #4]
 8013f44:	683b      	ldr	r3, [r7, #0]
 8013f46:	441a      	add	r2, r3
 8013f48:	687b      	ldr	r3, [r7, #4]
 8013f4a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8013f4c:	687b      	ldr	r3, [r7, #4]
 8013f4e:	895a      	ldrh	r2, [r3, #10]
 8013f50:	89fb      	ldrh	r3, [r7, #14]
 8013f52:	1ad3      	subs	r3, r2, r3
 8013f54:	b29a      	uxth	r2, r3
 8013f56:	687b      	ldr	r3, [r7, #4]
 8013f58:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8013f5a:	687b      	ldr	r3, [r7, #4]
 8013f5c:	891a      	ldrh	r2, [r3, #8]
 8013f5e:	89fb      	ldrh	r3, [r7, #14]
 8013f60:	1ad3      	subs	r3, r2, r3
 8013f62:	b29a      	uxth	r2, r3
 8013f64:	687b      	ldr	r3, [r7, #4]
 8013f66:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8013f68:	2300      	movs	r3, #0
}
 8013f6a:	4618      	mov	r0, r3
 8013f6c:	3710      	adds	r7, #16
 8013f6e:	46bd      	mov	sp, r7
 8013f70:	bd80      	pop	{r7, pc}
 8013f72:	bf00      	nop
 8013f74:	08024a58 	.word	0x08024a58
 8013f78:	08024bdc 	.word	0x08024bdc
 8013f7c:	08024ad8 	.word	0x08024ad8
 8013f80:	08024be8 	.word	0x08024be8

08013f84 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8013f84:	b580      	push	{r7, lr}
 8013f86:	b082      	sub	sp, #8
 8013f88:	af00      	add	r7, sp, #0
 8013f8a:	6078      	str	r0, [r7, #4]
 8013f8c:	460b      	mov	r3, r1
 8013f8e:	807b      	strh	r3, [r7, #2]
 8013f90:	4613      	mov	r3, r2
 8013f92:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8013f94:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8013f98:	2b00      	cmp	r3, #0
 8013f9a:	da08      	bge.n	8013fae <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8013f9c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8013fa0:	425b      	negs	r3, r3
 8013fa2:	4619      	mov	r1, r3
 8013fa4:	6878      	ldr	r0, [r7, #4]
 8013fa6:	f7ff ff9b 	bl	8013ee0 <pbuf_remove_header>
 8013faa:	4603      	mov	r3, r0
 8013fac:	e007      	b.n	8013fbe <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8013fae:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8013fb2:	787a      	ldrb	r2, [r7, #1]
 8013fb4:	4619      	mov	r1, r3
 8013fb6:	6878      	ldr	r0, [r7, #4]
 8013fb8:	f7ff ff1a 	bl	8013df0 <pbuf_add_header_impl>
 8013fbc:	4603      	mov	r3, r0
  }
}
 8013fbe:	4618      	mov	r0, r3
 8013fc0:	3708      	adds	r7, #8
 8013fc2:	46bd      	mov	sp, r7
 8013fc4:	bd80      	pop	{r7, pc}

08013fc6 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8013fc6:	b580      	push	{r7, lr}
 8013fc8:	b082      	sub	sp, #8
 8013fca:	af00      	add	r7, sp, #0
 8013fcc:	6078      	str	r0, [r7, #4]
 8013fce:	460b      	mov	r3, r1
 8013fd0:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8013fd2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8013fd6:	2201      	movs	r2, #1
 8013fd8:	4619      	mov	r1, r3
 8013fda:	6878      	ldr	r0, [r7, #4]
 8013fdc:	f7ff ffd2 	bl	8013f84 <pbuf_header_impl>
 8013fe0:	4603      	mov	r3, r0
}
 8013fe2:	4618      	mov	r0, r3
 8013fe4:	3708      	adds	r7, #8
 8013fe6:	46bd      	mov	sp, r7
 8013fe8:	bd80      	pop	{r7, pc}

08013fea <pbuf_free_header>:
 *                   takes an u16_t not s16_t!
 * @return the new head pbuf
 */
struct pbuf *
pbuf_free_header(struct pbuf *q, u16_t size)
{
 8013fea:	b580      	push	{r7, lr}
 8013fec:	b086      	sub	sp, #24
 8013fee:	af00      	add	r7, sp, #0
 8013ff0:	6078      	str	r0, [r7, #4]
 8013ff2:	460b      	mov	r3, r1
 8013ff4:	807b      	strh	r3, [r7, #2]
  struct pbuf *p = q;
 8013ff6:	687b      	ldr	r3, [r7, #4]
 8013ff8:	617b      	str	r3, [r7, #20]
  u16_t free_left = size;
 8013ffa:	887b      	ldrh	r3, [r7, #2]
 8013ffc:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 8013ffe:	e01c      	b.n	801403a <pbuf_free_header+0x50>
    if (free_left >= p->len) {
 8014000:	697b      	ldr	r3, [r7, #20]
 8014002:	895b      	ldrh	r3, [r3, #10]
 8014004:	8a7a      	ldrh	r2, [r7, #18]
 8014006:	429a      	cmp	r2, r3
 8014008:	d310      	bcc.n	801402c <pbuf_free_header+0x42>
      struct pbuf *f = p;
 801400a:	697b      	ldr	r3, [r7, #20]
 801400c:	60fb      	str	r3, [r7, #12]
      free_left = (u16_t)(free_left - p->len);
 801400e:	697b      	ldr	r3, [r7, #20]
 8014010:	895b      	ldrh	r3, [r3, #10]
 8014012:	8a7a      	ldrh	r2, [r7, #18]
 8014014:	1ad3      	subs	r3, r2, r3
 8014016:	827b      	strh	r3, [r7, #18]
      p = p->next;
 8014018:	697b      	ldr	r3, [r7, #20]
 801401a:	681b      	ldr	r3, [r3, #0]
 801401c:	617b      	str	r3, [r7, #20]
      f->next = 0;
 801401e:	68fb      	ldr	r3, [r7, #12]
 8014020:	2200      	movs	r2, #0
 8014022:	601a      	str	r2, [r3, #0]
      pbuf_free(f);
 8014024:	68f8      	ldr	r0, [r7, #12]
 8014026:	f000 f813 	bl	8014050 <pbuf_free>
 801402a:	e006      	b.n	801403a <pbuf_free_header+0x50>
    } else {
      pbuf_remove_header(p, free_left);
 801402c:	8a7b      	ldrh	r3, [r7, #18]
 801402e:	4619      	mov	r1, r3
 8014030:	6978      	ldr	r0, [r7, #20]
 8014032:	f7ff ff55 	bl	8013ee0 <pbuf_remove_header>
      free_left = 0;
 8014036:	2300      	movs	r3, #0
 8014038:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 801403a:	8a7b      	ldrh	r3, [r7, #18]
 801403c:	2b00      	cmp	r3, #0
 801403e:	d002      	beq.n	8014046 <pbuf_free_header+0x5c>
 8014040:	697b      	ldr	r3, [r7, #20]
 8014042:	2b00      	cmp	r3, #0
 8014044:	d1dc      	bne.n	8014000 <pbuf_free_header+0x16>
    }
  }
  return p;
 8014046:	697b      	ldr	r3, [r7, #20]
}
 8014048:	4618      	mov	r0, r3
 801404a:	3718      	adds	r7, #24
 801404c:	46bd      	mov	sp, r7
 801404e:	bd80      	pop	{r7, pc}

08014050 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8014050:	b580      	push	{r7, lr}
 8014052:	b088      	sub	sp, #32
 8014054:	af00      	add	r7, sp, #0
 8014056:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8014058:	687b      	ldr	r3, [r7, #4]
 801405a:	2b00      	cmp	r3, #0
 801405c:	d10b      	bne.n	8014076 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 801405e:	687b      	ldr	r3, [r7, #4]
 8014060:	2b00      	cmp	r3, #0
 8014062:	d106      	bne.n	8014072 <pbuf_free+0x22>
 8014064:	4b3b      	ldr	r3, [pc, #236]	; (8014154 <pbuf_free+0x104>)
 8014066:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 801406a:	493b      	ldr	r1, [pc, #236]	; (8014158 <pbuf_free+0x108>)
 801406c:	483b      	ldr	r0, [pc, #236]	; (801415c <pbuf_free+0x10c>)
 801406e:	f00c ff6f 	bl	8020f50 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8014072:	2300      	movs	r3, #0
 8014074:	e069      	b.n	801414a <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8014076:	2300      	movs	r3, #0
 8014078:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 801407a:	e062      	b.n	8014142 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 801407c:	f001 fd2e 	bl	8015adc <sys_arch_protect>
 8014080:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8014082:	687b      	ldr	r3, [r7, #4]
 8014084:	7b9b      	ldrb	r3, [r3, #14]
 8014086:	2b00      	cmp	r3, #0
 8014088:	d106      	bne.n	8014098 <pbuf_free+0x48>
 801408a:	4b32      	ldr	r3, [pc, #200]	; (8014154 <pbuf_free+0x104>)
 801408c:	f240 22f1 	movw	r2, #753	; 0x2f1
 8014090:	4933      	ldr	r1, [pc, #204]	; (8014160 <pbuf_free+0x110>)
 8014092:	4832      	ldr	r0, [pc, #200]	; (801415c <pbuf_free+0x10c>)
 8014094:	f00c ff5c 	bl	8020f50 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8014098:	687b      	ldr	r3, [r7, #4]
 801409a:	7b9b      	ldrb	r3, [r3, #14]
 801409c:	3b01      	subs	r3, #1
 801409e:	b2da      	uxtb	r2, r3
 80140a0:	687b      	ldr	r3, [r7, #4]
 80140a2:	739a      	strb	r2, [r3, #14]
 80140a4:	687b      	ldr	r3, [r7, #4]
 80140a6:	7b9b      	ldrb	r3, [r3, #14]
 80140a8:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 80140aa:	69b8      	ldr	r0, [r7, #24]
 80140ac:	f001 fd24 	bl	8015af8 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80140b0:	7dfb      	ldrb	r3, [r7, #23]
 80140b2:	2b00      	cmp	r3, #0
 80140b4:	d143      	bne.n	801413e <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80140b6:	687b      	ldr	r3, [r7, #4]
 80140b8:	681b      	ldr	r3, [r3, #0]
 80140ba:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	7b1b      	ldrb	r3, [r3, #12]
 80140c0:	f003 030f 	and.w	r3, r3, #15
 80140c4:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80140c6:	687b      	ldr	r3, [r7, #4]
 80140c8:	7b5b      	ldrb	r3, [r3, #13]
 80140ca:	f003 0302 	and.w	r3, r3, #2
 80140ce:	2b00      	cmp	r3, #0
 80140d0:	d011      	beq.n	80140f6 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80140d2:	687b      	ldr	r3, [r7, #4]
 80140d4:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80140d6:	68bb      	ldr	r3, [r7, #8]
 80140d8:	691b      	ldr	r3, [r3, #16]
 80140da:	2b00      	cmp	r3, #0
 80140dc:	d106      	bne.n	80140ec <pbuf_free+0x9c>
 80140de:	4b1d      	ldr	r3, [pc, #116]	; (8014154 <pbuf_free+0x104>)
 80140e0:	f240 22ff 	movw	r2, #767	; 0x2ff
 80140e4:	491f      	ldr	r1, [pc, #124]	; (8014164 <pbuf_free+0x114>)
 80140e6:	481d      	ldr	r0, [pc, #116]	; (801415c <pbuf_free+0x10c>)
 80140e8:	f00c ff32 	bl	8020f50 <iprintf>
        pc->custom_free_function(p);
 80140ec:	68bb      	ldr	r3, [r7, #8]
 80140ee:	691b      	ldr	r3, [r3, #16]
 80140f0:	6878      	ldr	r0, [r7, #4]
 80140f2:	4798      	blx	r3
 80140f4:	e01d      	b.n	8014132 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80140f6:	7bfb      	ldrb	r3, [r7, #15]
 80140f8:	2b02      	cmp	r3, #2
 80140fa:	d104      	bne.n	8014106 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 80140fc:	6879      	ldr	r1, [r7, #4]
 80140fe:	200c      	movs	r0, #12
 8014100:	f7ff f842 	bl	8013188 <memp_free>
 8014104:	e015      	b.n	8014132 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8014106:	7bfb      	ldrb	r3, [r7, #15]
 8014108:	2b01      	cmp	r3, #1
 801410a:	d104      	bne.n	8014116 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 801410c:	6879      	ldr	r1, [r7, #4]
 801410e:	200b      	movs	r0, #11
 8014110:	f7ff f83a 	bl	8013188 <memp_free>
 8014114:	e00d      	b.n	8014132 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8014116:	7bfb      	ldrb	r3, [r7, #15]
 8014118:	2b00      	cmp	r3, #0
 801411a:	d103      	bne.n	8014124 <pbuf_free+0xd4>
          mem_free(p);
 801411c:	6878      	ldr	r0, [r7, #4]
 801411e:	f7fe fc75 	bl	8012a0c <mem_free>
 8014122:	e006      	b.n	8014132 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8014124:	4b0b      	ldr	r3, [pc, #44]	; (8014154 <pbuf_free+0x104>)
 8014126:	f240 320f 	movw	r2, #783	; 0x30f
 801412a:	490f      	ldr	r1, [pc, #60]	; (8014168 <pbuf_free+0x118>)
 801412c:	480b      	ldr	r0, [pc, #44]	; (801415c <pbuf_free+0x10c>)
 801412e:	f00c ff0f 	bl	8020f50 <iprintf>
        }
      }
      count++;
 8014132:	7ffb      	ldrb	r3, [r7, #31]
 8014134:	3301      	adds	r3, #1
 8014136:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8014138:	693b      	ldr	r3, [r7, #16]
 801413a:	607b      	str	r3, [r7, #4]
 801413c:	e001      	b.n	8014142 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 801413e:	2300      	movs	r3, #0
 8014140:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8014142:	687b      	ldr	r3, [r7, #4]
 8014144:	2b00      	cmp	r3, #0
 8014146:	d199      	bne.n	801407c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8014148:	7ffb      	ldrb	r3, [r7, #31]
}
 801414a:	4618      	mov	r0, r3
 801414c:	3720      	adds	r7, #32
 801414e:	46bd      	mov	sp, r7
 8014150:	bd80      	pop	{r7, pc}
 8014152:	bf00      	nop
 8014154:	08024a58 	.word	0x08024a58
 8014158:	08024bdc 	.word	0x08024bdc
 801415c:	08024ad8 	.word	0x08024ad8
 8014160:	08024c08 	.word	0x08024c08
 8014164:	08024c20 	.word	0x08024c20
 8014168:	08024c44 	.word	0x08024c44

0801416c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 801416c:	b480      	push	{r7}
 801416e:	b085      	sub	sp, #20
 8014170:	af00      	add	r7, sp, #0
 8014172:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8014174:	2300      	movs	r3, #0
 8014176:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8014178:	e005      	b.n	8014186 <pbuf_clen+0x1a>
    ++len;
 801417a:	89fb      	ldrh	r3, [r7, #14]
 801417c:	3301      	adds	r3, #1
 801417e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8014180:	687b      	ldr	r3, [r7, #4]
 8014182:	681b      	ldr	r3, [r3, #0]
 8014184:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8014186:	687b      	ldr	r3, [r7, #4]
 8014188:	2b00      	cmp	r3, #0
 801418a:	d1f6      	bne.n	801417a <pbuf_clen+0xe>
  }
  return len;
 801418c:	89fb      	ldrh	r3, [r7, #14]
}
 801418e:	4618      	mov	r0, r3
 8014190:	3714      	adds	r7, #20
 8014192:	46bd      	mov	sp, r7
 8014194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014198:	4770      	bx	lr
	...

0801419c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 801419c:	b580      	push	{r7, lr}
 801419e:	b084      	sub	sp, #16
 80141a0:	af00      	add	r7, sp, #0
 80141a2:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	2b00      	cmp	r3, #0
 80141a8:	d016      	beq.n	80141d8 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80141aa:	f001 fc97 	bl	8015adc <sys_arch_protect>
 80141ae:	60f8      	str	r0, [r7, #12]
 80141b0:	687b      	ldr	r3, [r7, #4]
 80141b2:	7b9b      	ldrb	r3, [r3, #14]
 80141b4:	3301      	adds	r3, #1
 80141b6:	b2da      	uxtb	r2, r3
 80141b8:	687b      	ldr	r3, [r7, #4]
 80141ba:	739a      	strb	r2, [r3, #14]
 80141bc:	68f8      	ldr	r0, [r7, #12]
 80141be:	f001 fc9b 	bl	8015af8 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80141c2:	687b      	ldr	r3, [r7, #4]
 80141c4:	7b9b      	ldrb	r3, [r3, #14]
 80141c6:	2b00      	cmp	r3, #0
 80141c8:	d106      	bne.n	80141d8 <pbuf_ref+0x3c>
 80141ca:	4b05      	ldr	r3, [pc, #20]	; (80141e0 <pbuf_ref+0x44>)
 80141cc:	f240 3242 	movw	r2, #834	; 0x342
 80141d0:	4904      	ldr	r1, [pc, #16]	; (80141e4 <pbuf_ref+0x48>)
 80141d2:	4805      	ldr	r0, [pc, #20]	; (80141e8 <pbuf_ref+0x4c>)
 80141d4:	f00c febc 	bl	8020f50 <iprintf>
  }
}
 80141d8:	bf00      	nop
 80141da:	3710      	adds	r7, #16
 80141dc:	46bd      	mov	sp, r7
 80141de:	bd80      	pop	{r7, pc}
 80141e0:	08024a58 	.word	0x08024a58
 80141e4:	08024c58 	.word	0x08024c58
 80141e8:	08024ad8 	.word	0x08024ad8

080141ec <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80141ec:	b580      	push	{r7, lr}
 80141ee:	b084      	sub	sp, #16
 80141f0:	af00      	add	r7, sp, #0
 80141f2:	6078      	str	r0, [r7, #4]
 80141f4:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80141f6:	687b      	ldr	r3, [r7, #4]
 80141f8:	2b00      	cmp	r3, #0
 80141fa:	d002      	beq.n	8014202 <pbuf_cat+0x16>
 80141fc:	683b      	ldr	r3, [r7, #0]
 80141fe:	2b00      	cmp	r3, #0
 8014200:	d107      	bne.n	8014212 <pbuf_cat+0x26>
 8014202:	4b20      	ldr	r3, [pc, #128]	; (8014284 <pbuf_cat+0x98>)
 8014204:	f240 325a 	movw	r2, #858	; 0x35a
 8014208:	491f      	ldr	r1, [pc, #124]	; (8014288 <pbuf_cat+0x9c>)
 801420a:	4820      	ldr	r0, [pc, #128]	; (801428c <pbuf_cat+0xa0>)
 801420c:	f00c fea0 	bl	8020f50 <iprintf>
 8014210:	e034      	b.n	801427c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8014212:	687b      	ldr	r3, [r7, #4]
 8014214:	60fb      	str	r3, [r7, #12]
 8014216:	e00a      	b.n	801422e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8014218:	68fb      	ldr	r3, [r7, #12]
 801421a:	891a      	ldrh	r2, [r3, #8]
 801421c:	683b      	ldr	r3, [r7, #0]
 801421e:	891b      	ldrh	r3, [r3, #8]
 8014220:	4413      	add	r3, r2
 8014222:	b29a      	uxth	r2, r3
 8014224:	68fb      	ldr	r3, [r7, #12]
 8014226:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8014228:	68fb      	ldr	r3, [r7, #12]
 801422a:	681b      	ldr	r3, [r3, #0]
 801422c:	60fb      	str	r3, [r7, #12]
 801422e:	68fb      	ldr	r3, [r7, #12]
 8014230:	681b      	ldr	r3, [r3, #0]
 8014232:	2b00      	cmp	r3, #0
 8014234:	d1f0      	bne.n	8014218 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8014236:	68fb      	ldr	r3, [r7, #12]
 8014238:	891a      	ldrh	r2, [r3, #8]
 801423a:	68fb      	ldr	r3, [r7, #12]
 801423c:	895b      	ldrh	r3, [r3, #10]
 801423e:	429a      	cmp	r2, r3
 8014240:	d006      	beq.n	8014250 <pbuf_cat+0x64>
 8014242:	4b10      	ldr	r3, [pc, #64]	; (8014284 <pbuf_cat+0x98>)
 8014244:	f240 3262 	movw	r2, #866	; 0x362
 8014248:	4911      	ldr	r1, [pc, #68]	; (8014290 <pbuf_cat+0xa4>)
 801424a:	4810      	ldr	r0, [pc, #64]	; (801428c <pbuf_cat+0xa0>)
 801424c:	f00c fe80 	bl	8020f50 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8014250:	68fb      	ldr	r3, [r7, #12]
 8014252:	681b      	ldr	r3, [r3, #0]
 8014254:	2b00      	cmp	r3, #0
 8014256:	d006      	beq.n	8014266 <pbuf_cat+0x7a>
 8014258:	4b0a      	ldr	r3, [pc, #40]	; (8014284 <pbuf_cat+0x98>)
 801425a:	f240 3263 	movw	r2, #867	; 0x363
 801425e:	490d      	ldr	r1, [pc, #52]	; (8014294 <pbuf_cat+0xa8>)
 8014260:	480a      	ldr	r0, [pc, #40]	; (801428c <pbuf_cat+0xa0>)
 8014262:	f00c fe75 	bl	8020f50 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8014266:	68fb      	ldr	r3, [r7, #12]
 8014268:	891a      	ldrh	r2, [r3, #8]
 801426a:	683b      	ldr	r3, [r7, #0]
 801426c:	891b      	ldrh	r3, [r3, #8]
 801426e:	4413      	add	r3, r2
 8014270:	b29a      	uxth	r2, r3
 8014272:	68fb      	ldr	r3, [r7, #12]
 8014274:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8014276:	68fb      	ldr	r3, [r7, #12]
 8014278:	683a      	ldr	r2, [r7, #0]
 801427a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 801427c:	3710      	adds	r7, #16
 801427e:	46bd      	mov	sp, r7
 8014280:	bd80      	pop	{r7, pc}
 8014282:	bf00      	nop
 8014284:	08024a58 	.word	0x08024a58
 8014288:	08024c6c 	.word	0x08024c6c
 801428c:	08024ad8 	.word	0x08024ad8
 8014290:	08024ca4 	.word	0x08024ca4
 8014294:	08024cd4 	.word	0x08024cd4

08014298 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8014298:	b580      	push	{r7, lr}
 801429a:	b082      	sub	sp, #8
 801429c:	af00      	add	r7, sp, #0
 801429e:	6078      	str	r0, [r7, #4]
 80142a0:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 80142a2:	6839      	ldr	r1, [r7, #0]
 80142a4:	6878      	ldr	r0, [r7, #4]
 80142a6:	f7ff ffa1 	bl	80141ec <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 80142aa:	6838      	ldr	r0, [r7, #0]
 80142ac:	f7ff ff76 	bl	801419c <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 80142b0:	bf00      	nop
 80142b2:	3708      	adds	r7, #8
 80142b4:	46bd      	mov	sp, r7
 80142b6:	bd80      	pop	{r7, pc}

080142b8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80142b8:	b580      	push	{r7, lr}
 80142ba:	b086      	sub	sp, #24
 80142bc:	af00      	add	r7, sp, #0
 80142be:	6078      	str	r0, [r7, #4]
 80142c0:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80142c2:	2300      	movs	r3, #0
 80142c4:	617b      	str	r3, [r7, #20]
 80142c6:	2300      	movs	r3, #0
 80142c8:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80142ca:	687b      	ldr	r3, [r7, #4]
 80142cc:	2b00      	cmp	r3, #0
 80142ce:	d008      	beq.n	80142e2 <pbuf_copy+0x2a>
 80142d0:	683b      	ldr	r3, [r7, #0]
 80142d2:	2b00      	cmp	r3, #0
 80142d4:	d005      	beq.n	80142e2 <pbuf_copy+0x2a>
 80142d6:	687b      	ldr	r3, [r7, #4]
 80142d8:	891a      	ldrh	r2, [r3, #8]
 80142da:	683b      	ldr	r3, [r7, #0]
 80142dc:	891b      	ldrh	r3, [r3, #8]
 80142de:	429a      	cmp	r2, r3
 80142e0:	d209      	bcs.n	80142f6 <pbuf_copy+0x3e>
 80142e2:	4b57      	ldr	r3, [pc, #348]	; (8014440 <pbuf_copy+0x188>)
 80142e4:	f240 32ca 	movw	r2, #970	; 0x3ca
 80142e8:	4956      	ldr	r1, [pc, #344]	; (8014444 <pbuf_copy+0x18c>)
 80142ea:	4857      	ldr	r0, [pc, #348]	; (8014448 <pbuf_copy+0x190>)
 80142ec:	f00c fe30 	bl	8020f50 <iprintf>
 80142f0:	f06f 030f 	mvn.w	r3, #15
 80142f4:	e09f      	b.n	8014436 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80142f6:	687b      	ldr	r3, [r7, #4]
 80142f8:	895b      	ldrh	r3, [r3, #10]
 80142fa:	461a      	mov	r2, r3
 80142fc:	697b      	ldr	r3, [r7, #20]
 80142fe:	1ad2      	subs	r2, r2, r3
 8014300:	683b      	ldr	r3, [r7, #0]
 8014302:	895b      	ldrh	r3, [r3, #10]
 8014304:	4619      	mov	r1, r3
 8014306:	693b      	ldr	r3, [r7, #16]
 8014308:	1acb      	subs	r3, r1, r3
 801430a:	429a      	cmp	r2, r3
 801430c:	d306      	bcc.n	801431c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 801430e:	683b      	ldr	r3, [r7, #0]
 8014310:	895b      	ldrh	r3, [r3, #10]
 8014312:	461a      	mov	r2, r3
 8014314:	693b      	ldr	r3, [r7, #16]
 8014316:	1ad3      	subs	r3, r2, r3
 8014318:	60fb      	str	r3, [r7, #12]
 801431a:	e005      	b.n	8014328 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 801431c:	687b      	ldr	r3, [r7, #4]
 801431e:	895b      	ldrh	r3, [r3, #10]
 8014320:	461a      	mov	r2, r3
 8014322:	697b      	ldr	r3, [r7, #20]
 8014324:	1ad3      	subs	r3, r2, r3
 8014326:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8014328:	687b      	ldr	r3, [r7, #4]
 801432a:	685a      	ldr	r2, [r3, #4]
 801432c:	697b      	ldr	r3, [r7, #20]
 801432e:	18d0      	adds	r0, r2, r3
 8014330:	683b      	ldr	r3, [r7, #0]
 8014332:	685a      	ldr	r2, [r3, #4]
 8014334:	693b      	ldr	r3, [r7, #16]
 8014336:	4413      	add	r3, r2
 8014338:	68fa      	ldr	r2, [r7, #12]
 801433a:	4619      	mov	r1, r3
 801433c:	f00c f9a3 	bl	8020686 <memcpy>
    offset_to += len;
 8014340:	697a      	ldr	r2, [r7, #20]
 8014342:	68fb      	ldr	r3, [r7, #12]
 8014344:	4413      	add	r3, r2
 8014346:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8014348:	693a      	ldr	r2, [r7, #16]
 801434a:	68fb      	ldr	r3, [r7, #12]
 801434c:	4413      	add	r3, r2
 801434e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8014350:	687b      	ldr	r3, [r7, #4]
 8014352:	895b      	ldrh	r3, [r3, #10]
 8014354:	461a      	mov	r2, r3
 8014356:	697b      	ldr	r3, [r7, #20]
 8014358:	4293      	cmp	r3, r2
 801435a:	d906      	bls.n	801436a <pbuf_copy+0xb2>
 801435c:	4b38      	ldr	r3, [pc, #224]	; (8014440 <pbuf_copy+0x188>)
 801435e:	f240 32d9 	movw	r2, #985	; 0x3d9
 8014362:	493a      	ldr	r1, [pc, #232]	; (801444c <pbuf_copy+0x194>)
 8014364:	4838      	ldr	r0, [pc, #224]	; (8014448 <pbuf_copy+0x190>)
 8014366:	f00c fdf3 	bl	8020f50 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 801436a:	683b      	ldr	r3, [r7, #0]
 801436c:	895b      	ldrh	r3, [r3, #10]
 801436e:	461a      	mov	r2, r3
 8014370:	693b      	ldr	r3, [r7, #16]
 8014372:	4293      	cmp	r3, r2
 8014374:	d906      	bls.n	8014384 <pbuf_copy+0xcc>
 8014376:	4b32      	ldr	r3, [pc, #200]	; (8014440 <pbuf_copy+0x188>)
 8014378:	f240 32da 	movw	r2, #986	; 0x3da
 801437c:	4934      	ldr	r1, [pc, #208]	; (8014450 <pbuf_copy+0x198>)
 801437e:	4832      	ldr	r0, [pc, #200]	; (8014448 <pbuf_copy+0x190>)
 8014380:	f00c fde6 	bl	8020f50 <iprintf>
    if (offset_from >= p_from->len) {
 8014384:	683b      	ldr	r3, [r7, #0]
 8014386:	895b      	ldrh	r3, [r3, #10]
 8014388:	461a      	mov	r2, r3
 801438a:	693b      	ldr	r3, [r7, #16]
 801438c:	4293      	cmp	r3, r2
 801438e:	d304      	bcc.n	801439a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8014390:	2300      	movs	r3, #0
 8014392:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8014394:	683b      	ldr	r3, [r7, #0]
 8014396:	681b      	ldr	r3, [r3, #0]
 8014398:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 801439a:	687b      	ldr	r3, [r7, #4]
 801439c:	895b      	ldrh	r3, [r3, #10]
 801439e:	461a      	mov	r2, r3
 80143a0:	697b      	ldr	r3, [r7, #20]
 80143a2:	4293      	cmp	r3, r2
 80143a4:	d114      	bne.n	80143d0 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80143a6:	2300      	movs	r3, #0
 80143a8:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80143aa:	687b      	ldr	r3, [r7, #4]
 80143ac:	681b      	ldr	r3, [r3, #0]
 80143ae:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	2b00      	cmp	r3, #0
 80143b4:	d10c      	bne.n	80143d0 <pbuf_copy+0x118>
 80143b6:	683b      	ldr	r3, [r7, #0]
 80143b8:	2b00      	cmp	r3, #0
 80143ba:	d009      	beq.n	80143d0 <pbuf_copy+0x118>
 80143bc:	4b20      	ldr	r3, [pc, #128]	; (8014440 <pbuf_copy+0x188>)
 80143be:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 80143c2:	4924      	ldr	r1, [pc, #144]	; (8014454 <pbuf_copy+0x19c>)
 80143c4:	4820      	ldr	r0, [pc, #128]	; (8014448 <pbuf_copy+0x190>)
 80143c6:	f00c fdc3 	bl	8020f50 <iprintf>
 80143ca:	f06f 030f 	mvn.w	r3, #15
 80143ce:	e032      	b.n	8014436 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80143d0:	683b      	ldr	r3, [r7, #0]
 80143d2:	2b00      	cmp	r3, #0
 80143d4:	d013      	beq.n	80143fe <pbuf_copy+0x146>
 80143d6:	683b      	ldr	r3, [r7, #0]
 80143d8:	895a      	ldrh	r2, [r3, #10]
 80143da:	683b      	ldr	r3, [r7, #0]
 80143dc:	891b      	ldrh	r3, [r3, #8]
 80143de:	429a      	cmp	r2, r3
 80143e0:	d10d      	bne.n	80143fe <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80143e2:	683b      	ldr	r3, [r7, #0]
 80143e4:	681b      	ldr	r3, [r3, #0]
 80143e6:	2b00      	cmp	r3, #0
 80143e8:	d009      	beq.n	80143fe <pbuf_copy+0x146>
 80143ea:	4b15      	ldr	r3, [pc, #84]	; (8014440 <pbuf_copy+0x188>)
 80143ec:	f240 32ea 	movw	r2, #1002	; 0x3ea
 80143f0:	4919      	ldr	r1, [pc, #100]	; (8014458 <pbuf_copy+0x1a0>)
 80143f2:	4815      	ldr	r0, [pc, #84]	; (8014448 <pbuf_copy+0x190>)
 80143f4:	f00c fdac 	bl	8020f50 <iprintf>
 80143f8:	f06f 0305 	mvn.w	r3, #5
 80143fc:	e01b      	b.n	8014436 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80143fe:	687b      	ldr	r3, [r7, #4]
 8014400:	2b00      	cmp	r3, #0
 8014402:	d013      	beq.n	801442c <pbuf_copy+0x174>
 8014404:	687b      	ldr	r3, [r7, #4]
 8014406:	895a      	ldrh	r2, [r3, #10]
 8014408:	687b      	ldr	r3, [r7, #4]
 801440a:	891b      	ldrh	r3, [r3, #8]
 801440c:	429a      	cmp	r2, r3
 801440e:	d10d      	bne.n	801442c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8014410:	687b      	ldr	r3, [r7, #4]
 8014412:	681b      	ldr	r3, [r3, #0]
 8014414:	2b00      	cmp	r3, #0
 8014416:	d009      	beq.n	801442c <pbuf_copy+0x174>
 8014418:	4b09      	ldr	r3, [pc, #36]	; (8014440 <pbuf_copy+0x188>)
 801441a:	f240 32ef 	movw	r2, #1007	; 0x3ef
 801441e:	490e      	ldr	r1, [pc, #56]	; (8014458 <pbuf_copy+0x1a0>)
 8014420:	4809      	ldr	r0, [pc, #36]	; (8014448 <pbuf_copy+0x190>)
 8014422:	f00c fd95 	bl	8020f50 <iprintf>
 8014426:	f06f 0305 	mvn.w	r3, #5
 801442a:	e004      	b.n	8014436 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 801442c:	683b      	ldr	r3, [r7, #0]
 801442e:	2b00      	cmp	r3, #0
 8014430:	f47f af61 	bne.w	80142f6 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8014434:	2300      	movs	r3, #0
}
 8014436:	4618      	mov	r0, r3
 8014438:	3718      	adds	r7, #24
 801443a:	46bd      	mov	sp, r7
 801443c:	bd80      	pop	{r7, pc}
 801443e:	bf00      	nop
 8014440:	08024a58 	.word	0x08024a58
 8014444:	08024d20 	.word	0x08024d20
 8014448:	08024ad8 	.word	0x08024ad8
 801444c:	08024d50 	.word	0x08024d50
 8014450:	08024d68 	.word	0x08024d68
 8014454:	08024d84 	.word	0x08024d84
 8014458:	08024d94 	.word	0x08024d94

0801445c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 801445c:	b580      	push	{r7, lr}
 801445e:	b088      	sub	sp, #32
 8014460:	af00      	add	r7, sp, #0
 8014462:	60f8      	str	r0, [r7, #12]
 8014464:	60b9      	str	r1, [r7, #8]
 8014466:	4611      	mov	r1, r2
 8014468:	461a      	mov	r2, r3
 801446a:	460b      	mov	r3, r1
 801446c:	80fb      	strh	r3, [r7, #6]
 801446e:	4613      	mov	r3, r2
 8014470:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8014472:	2300      	movs	r3, #0
 8014474:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8014476:	2300      	movs	r3, #0
 8014478:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 801447a:	68fb      	ldr	r3, [r7, #12]
 801447c:	2b00      	cmp	r3, #0
 801447e:	d108      	bne.n	8014492 <pbuf_copy_partial+0x36>
 8014480:	4b2b      	ldr	r3, [pc, #172]	; (8014530 <pbuf_copy_partial+0xd4>)
 8014482:	f240 420a 	movw	r2, #1034	; 0x40a
 8014486:	492b      	ldr	r1, [pc, #172]	; (8014534 <pbuf_copy_partial+0xd8>)
 8014488:	482b      	ldr	r0, [pc, #172]	; (8014538 <pbuf_copy_partial+0xdc>)
 801448a:	f00c fd61 	bl	8020f50 <iprintf>
 801448e:	2300      	movs	r3, #0
 8014490:	e04a      	b.n	8014528 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8014492:	68bb      	ldr	r3, [r7, #8]
 8014494:	2b00      	cmp	r3, #0
 8014496:	d108      	bne.n	80144aa <pbuf_copy_partial+0x4e>
 8014498:	4b25      	ldr	r3, [pc, #148]	; (8014530 <pbuf_copy_partial+0xd4>)
 801449a:	f240 420b 	movw	r2, #1035	; 0x40b
 801449e:	4927      	ldr	r1, [pc, #156]	; (801453c <pbuf_copy_partial+0xe0>)
 80144a0:	4825      	ldr	r0, [pc, #148]	; (8014538 <pbuf_copy_partial+0xdc>)
 80144a2:	f00c fd55 	bl	8020f50 <iprintf>
 80144a6:	2300      	movs	r3, #0
 80144a8:	e03e      	b.n	8014528 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80144aa:	68fb      	ldr	r3, [r7, #12]
 80144ac:	61fb      	str	r3, [r7, #28]
 80144ae:	e034      	b.n	801451a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80144b0:	88bb      	ldrh	r3, [r7, #4]
 80144b2:	2b00      	cmp	r3, #0
 80144b4:	d00a      	beq.n	80144cc <pbuf_copy_partial+0x70>
 80144b6:	69fb      	ldr	r3, [r7, #28]
 80144b8:	895b      	ldrh	r3, [r3, #10]
 80144ba:	88ba      	ldrh	r2, [r7, #4]
 80144bc:	429a      	cmp	r2, r3
 80144be:	d305      	bcc.n	80144cc <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80144c0:	69fb      	ldr	r3, [r7, #28]
 80144c2:	895b      	ldrh	r3, [r3, #10]
 80144c4:	88ba      	ldrh	r2, [r7, #4]
 80144c6:	1ad3      	subs	r3, r2, r3
 80144c8:	80bb      	strh	r3, [r7, #4]
 80144ca:	e023      	b.n	8014514 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80144cc:	69fb      	ldr	r3, [r7, #28]
 80144ce:	895a      	ldrh	r2, [r3, #10]
 80144d0:	88bb      	ldrh	r3, [r7, #4]
 80144d2:	1ad3      	subs	r3, r2, r3
 80144d4:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80144d6:	8b3a      	ldrh	r2, [r7, #24]
 80144d8:	88fb      	ldrh	r3, [r7, #6]
 80144da:	429a      	cmp	r2, r3
 80144dc:	d901      	bls.n	80144e2 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80144de:	88fb      	ldrh	r3, [r7, #6]
 80144e0:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80144e2:	8b7b      	ldrh	r3, [r7, #26]
 80144e4:	68ba      	ldr	r2, [r7, #8]
 80144e6:	18d0      	adds	r0, r2, r3
 80144e8:	69fb      	ldr	r3, [r7, #28]
 80144ea:	685a      	ldr	r2, [r3, #4]
 80144ec:	88bb      	ldrh	r3, [r7, #4]
 80144ee:	4413      	add	r3, r2
 80144f0:	8b3a      	ldrh	r2, [r7, #24]
 80144f2:	4619      	mov	r1, r3
 80144f4:	f00c f8c7 	bl	8020686 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80144f8:	8afa      	ldrh	r2, [r7, #22]
 80144fa:	8b3b      	ldrh	r3, [r7, #24]
 80144fc:	4413      	add	r3, r2
 80144fe:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8014500:	8b7a      	ldrh	r2, [r7, #26]
 8014502:	8b3b      	ldrh	r3, [r7, #24]
 8014504:	4413      	add	r3, r2
 8014506:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8014508:	88fa      	ldrh	r2, [r7, #6]
 801450a:	8b3b      	ldrh	r3, [r7, #24]
 801450c:	1ad3      	subs	r3, r2, r3
 801450e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8014510:	2300      	movs	r3, #0
 8014512:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8014514:	69fb      	ldr	r3, [r7, #28]
 8014516:	681b      	ldr	r3, [r3, #0]
 8014518:	61fb      	str	r3, [r7, #28]
 801451a:	88fb      	ldrh	r3, [r7, #6]
 801451c:	2b00      	cmp	r3, #0
 801451e:	d002      	beq.n	8014526 <pbuf_copy_partial+0xca>
 8014520:	69fb      	ldr	r3, [r7, #28]
 8014522:	2b00      	cmp	r3, #0
 8014524:	d1c4      	bne.n	80144b0 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8014526:	8afb      	ldrh	r3, [r7, #22]
}
 8014528:	4618      	mov	r0, r3
 801452a:	3720      	adds	r7, #32
 801452c:	46bd      	mov	sp, r7
 801452e:	bd80      	pop	{r7, pc}
 8014530:	08024a58 	.word	0x08024a58
 8014534:	08024dc0 	.word	0x08024dc0
 8014538:	08024ad8 	.word	0x08024ad8
 801453c:	08024de0 	.word	0x08024de0

08014540 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8014540:	b580      	push	{r7, lr}
 8014542:	b084      	sub	sp, #16
 8014544:	af00      	add	r7, sp, #0
 8014546:	4603      	mov	r3, r0
 8014548:	603a      	str	r2, [r7, #0]
 801454a:	71fb      	strb	r3, [r7, #7]
 801454c:	460b      	mov	r3, r1
 801454e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8014550:	683b      	ldr	r3, [r7, #0]
 8014552:	8919      	ldrh	r1, [r3, #8]
 8014554:	88ba      	ldrh	r2, [r7, #4]
 8014556:	79fb      	ldrb	r3, [r7, #7]
 8014558:	4618      	mov	r0, r3
 801455a:	f7ff fa67 	bl	8013a2c <pbuf_alloc>
 801455e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8014560:	68fb      	ldr	r3, [r7, #12]
 8014562:	2b00      	cmp	r3, #0
 8014564:	d101      	bne.n	801456a <pbuf_clone+0x2a>
    return NULL;
 8014566:	2300      	movs	r3, #0
 8014568:	e011      	b.n	801458e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 801456a:	6839      	ldr	r1, [r7, #0]
 801456c:	68f8      	ldr	r0, [r7, #12]
 801456e:	f7ff fea3 	bl	80142b8 <pbuf_copy>
 8014572:	4603      	mov	r3, r0
 8014574:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8014576:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801457a:	2b00      	cmp	r3, #0
 801457c:	d006      	beq.n	801458c <pbuf_clone+0x4c>
 801457e:	4b06      	ldr	r3, [pc, #24]	; (8014598 <pbuf_clone+0x58>)
 8014580:	f240 5224 	movw	r2, #1316	; 0x524
 8014584:	4905      	ldr	r1, [pc, #20]	; (801459c <pbuf_clone+0x5c>)
 8014586:	4806      	ldr	r0, [pc, #24]	; (80145a0 <pbuf_clone+0x60>)
 8014588:	f00c fce2 	bl	8020f50 <iprintf>
  return q;
 801458c:	68fb      	ldr	r3, [r7, #12]
}
 801458e:	4618      	mov	r0, r3
 8014590:	3710      	adds	r7, #16
 8014592:	46bd      	mov	sp, r7
 8014594:	bd80      	pop	{r7, pc}
 8014596:	bf00      	nop
 8014598:	08024a58 	.word	0x08024a58
 801459c:	08024eec 	.word	0x08024eec
 80145a0:	08024ad8 	.word	0x08024ad8

080145a4 <tryget_socket_unconn_nouse>:
#endif /* LWIP_NETCONN_FULLDUPLEX */

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn_nouse(int fd)
{
 80145a4:	b480      	push	{r7}
 80145a6:	b085      	sub	sp, #20
 80145a8:	af00      	add	r7, sp, #0
 80145aa:	6078      	str	r0, [r7, #4]
  int s = fd - LWIP_SOCKET_OFFSET;
 80145ac:	687b      	ldr	r3, [r7, #4]
 80145ae:	60fb      	str	r3, [r7, #12]
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 80145b0:	68fb      	ldr	r3, [r7, #12]
 80145b2:	2b00      	cmp	r3, #0
 80145b4:	db02      	blt.n	80145bc <tryget_socket_unconn_nouse+0x18>
 80145b6:	68fb      	ldr	r3, [r7, #12]
 80145b8:	2b03      	cmp	r3, #3
 80145ba:	dd01      	ble.n	80145c0 <tryget_socket_unconn_nouse+0x1c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("tryget_socket_unconn(%d): invalid\n", fd));
    return NULL;
 80145bc:	2300      	movs	r3, #0
 80145be:	e003      	b.n	80145c8 <tryget_socket_unconn_nouse+0x24>
  }
  return &sockets[s];
 80145c0:	68fb      	ldr	r3, [r7, #12]
 80145c2:	011b      	lsls	r3, r3, #4
 80145c4:	4a03      	ldr	r2, [pc, #12]	; (80145d4 <tryget_socket_unconn_nouse+0x30>)
 80145c6:	4413      	add	r3, r2
}
 80145c8:	4618      	mov	r0, r3
 80145ca:	3714      	adds	r7, #20
 80145cc:	46bd      	mov	sp, r7
 80145ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145d2:	4770      	bx	lr
 80145d4:	2404071c 	.word	0x2404071c

080145d8 <tryget_socket_unconn>:
}

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn(int fd)
{
 80145d8:	b580      	push	{r7, lr}
 80145da:	b084      	sub	sp, #16
 80145dc:	af00      	add	r7, sp, #0
 80145de:	6078      	str	r0, [r7, #4]
  struct lwip_sock *ret = tryget_socket_unconn_nouse(fd);
 80145e0:	6878      	ldr	r0, [r7, #4]
 80145e2:	f7ff ffdf 	bl	80145a4 <tryget_socket_unconn_nouse>
 80145e6:	60f8      	str	r0, [r7, #12]
  if (ret != NULL) {
    if (!sock_inc_used(ret)) {
      return NULL;
    }
  }
  return ret;
 80145e8:	68fb      	ldr	r3, [r7, #12]
}
 80145ea:	4618      	mov	r0, r3
 80145ec:	3710      	adds	r7, #16
 80145ee:	46bd      	mov	sp, r7
 80145f0:	bd80      	pop	{r7, pc}

080145f2 <tryget_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
tryget_socket(int fd)
{
 80145f2:	b580      	push	{r7, lr}
 80145f4:	b084      	sub	sp, #16
 80145f6:	af00      	add	r7, sp, #0
 80145f8:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket_unconn(fd);
 80145fa:	6878      	ldr	r0, [r7, #4]
 80145fc:	f7ff ffec 	bl	80145d8 <tryget_socket_unconn>
 8014600:	60f8      	str	r0, [r7, #12]
  if (sock != NULL) {
 8014602:	68fb      	ldr	r3, [r7, #12]
 8014604:	2b00      	cmp	r3, #0
 8014606:	d005      	beq.n	8014614 <tryget_socket+0x22>
    if (sock->conn) {
 8014608:	68fb      	ldr	r3, [r7, #12]
 801460a:	681b      	ldr	r3, [r3, #0]
 801460c:	2b00      	cmp	r3, #0
 801460e:	d001      	beq.n	8014614 <tryget_socket+0x22>
      return sock;
 8014610:	68fb      	ldr	r3, [r7, #12]
 8014612:	e000      	b.n	8014616 <tryget_socket+0x24>
    }
    done_socket(sock);
  }
  return NULL;
 8014614:	2300      	movs	r3, #0
}
 8014616:	4618      	mov	r0, r3
 8014618:	3710      	adds	r7, #16
 801461a:	46bd      	mov	sp, r7
 801461c:	bd80      	pop	{r7, pc}
	...

08014620 <get_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
get_socket(int fd)
{
 8014620:	b580      	push	{r7, lr}
 8014622:	b084      	sub	sp, #16
 8014624:	af00      	add	r7, sp, #0
 8014626:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket(fd);
 8014628:	6878      	ldr	r0, [r7, #4]
 801462a:	f7ff ffe2 	bl	80145f2 <tryget_socket>
 801462e:	60f8      	str	r0, [r7, #12]
  if (!sock) {
 8014630:	68fb      	ldr	r3, [r7, #12]
 8014632:	2b00      	cmp	r3, #0
 8014634:	d104      	bne.n	8014640 <get_socket+0x20>
    if ((fd < LWIP_SOCKET_OFFSET) || (fd >= (LWIP_SOCKET_OFFSET + NUM_SOCKETS))) {
      LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): invalid\n", fd));
    }
    set_errno(EBADF);
 8014636:	4b05      	ldr	r3, [pc, #20]	; (801464c <get_socket+0x2c>)
 8014638:	2209      	movs	r2, #9
 801463a:	601a      	str	r2, [r3, #0]
    return NULL;
 801463c:	2300      	movs	r3, #0
 801463e:	e000      	b.n	8014642 <get_socket+0x22>
  }
  return sock;
 8014640:	68fb      	ldr	r3, [r7, #12]
}
 8014642:	4618      	mov	r0, r3
 8014644:	3710      	adds	r7, #16
 8014646:	46bd      	mov	sp, r7
 8014648:	bd80      	pop	{r7, pc}
 801464a:	bf00      	nop
 801464c:	24048e74 	.word	0x24048e74

08014650 <alloc_socket>:
 *                 0 if socket has been created by socket()
 * @return the index of the new socket; -1 on error
 */
static int
alloc_socket(struct netconn *newconn, int accepted)
{
 8014650:	b580      	push	{r7, lr}
 8014652:	b084      	sub	sp, #16
 8014654:	af00      	add	r7, sp, #0
 8014656:	6078      	str	r0, [r7, #4]
 8014658:	6039      	str	r1, [r7, #0]
  int i;
  SYS_ARCH_DECL_PROTECT(lev);
  LWIP_UNUSED_ARG(accepted);

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
 801465a:	2300      	movs	r3, #0
 801465c:	60fb      	str	r3, [r7, #12]
 801465e:	e052      	b.n	8014706 <alloc_socket+0xb6>
    /* Protect socket array */
    SYS_ARCH_PROTECT(lev);
 8014660:	f001 fa3c 	bl	8015adc <sys_arch_protect>
 8014664:	60b8      	str	r0, [r7, #8]
    if (!sockets[i].conn) {
 8014666:	4a2c      	ldr	r2, [pc, #176]	; (8014718 <alloc_socket+0xc8>)
 8014668:	68fb      	ldr	r3, [r7, #12]
 801466a:	011b      	lsls	r3, r3, #4
 801466c:	4413      	add	r3, r2
 801466e:	681b      	ldr	r3, [r3, #0]
 8014670:	2b00      	cmp	r3, #0
 8014672:	d142      	bne.n	80146fa <alloc_socket+0xaa>
        continue;
      }
      sockets[i].fd_used    = 1;
      sockets[i].fd_free_pending = 0;
#endif
      sockets[i].conn       = newconn;
 8014674:	4a28      	ldr	r2, [pc, #160]	; (8014718 <alloc_socket+0xc8>)
 8014676:	68fb      	ldr	r3, [r7, #12]
 8014678:	011b      	lsls	r3, r3, #4
 801467a:	4413      	add	r3, r2
 801467c:	687a      	ldr	r2, [r7, #4]
 801467e:	601a      	str	r2, [r3, #0]
      /* The socket is not yet known to anyone, so no need to protect
         after having marked it as used. */
      SYS_ARCH_UNPROTECT(lev);
 8014680:	68b8      	ldr	r0, [r7, #8]
 8014682:	f001 fa39 	bl	8015af8 <sys_arch_unprotect>
      sockets[i].lastdata.pbuf = NULL;
 8014686:	4a24      	ldr	r2, [pc, #144]	; (8014718 <alloc_socket+0xc8>)
 8014688:	68fb      	ldr	r3, [r7, #12]
 801468a:	011b      	lsls	r3, r3, #4
 801468c:	4413      	add	r3, r2
 801468e:	3304      	adds	r3, #4
 8014690:	2200      	movs	r2, #0
 8014692:	601a      	str	r2, [r3, #0]
#if LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL
      LWIP_ASSERT("sockets[i].select_waiting == 0", sockets[i].select_waiting == 0);
 8014694:	4a20      	ldr	r2, [pc, #128]	; (8014718 <alloc_socket+0xc8>)
 8014696:	68fb      	ldr	r3, [r7, #12]
 8014698:	011b      	lsls	r3, r3, #4
 801469a:	4413      	add	r3, r2
 801469c:	330e      	adds	r3, #14
 801469e:	781b      	ldrb	r3, [r3, #0]
 80146a0:	2b00      	cmp	r3, #0
 80146a2:	d006      	beq.n	80146b2 <alloc_socket+0x62>
 80146a4:	4b1d      	ldr	r3, [pc, #116]	; (801471c <alloc_socket+0xcc>)
 80146a6:	f240 220e 	movw	r2, #526	; 0x20e
 80146aa:	491d      	ldr	r1, [pc, #116]	; (8014720 <alloc_socket+0xd0>)
 80146ac:	481d      	ldr	r0, [pc, #116]	; (8014724 <alloc_socket+0xd4>)
 80146ae:	f00c fc4f 	bl	8020f50 <iprintf>
      sockets[i].rcvevent   = 0;
 80146b2:	4a19      	ldr	r2, [pc, #100]	; (8014718 <alloc_socket+0xc8>)
 80146b4:	68fb      	ldr	r3, [r7, #12]
 80146b6:	011b      	lsls	r3, r3, #4
 80146b8:	4413      	add	r3, r2
 80146ba:	3308      	adds	r3, #8
 80146bc:	2200      	movs	r2, #0
 80146be:	801a      	strh	r2, [r3, #0]
      /* TCP sendbuf is empty, but the socket is not yet writable until connected
       * (unless it has been created by accept()). */
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 80146c0:	687b      	ldr	r3, [r7, #4]
 80146c2:	781b      	ldrb	r3, [r3, #0]
 80146c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80146c8:	2b10      	cmp	r3, #16
 80146ca:	d102      	bne.n	80146d2 <alloc_socket+0x82>
 80146cc:	683b      	ldr	r3, [r7, #0]
 80146ce:	2b00      	cmp	r3, #0
 80146d0:	d001      	beq.n	80146d6 <alloc_socket+0x86>
 80146d2:	2301      	movs	r3, #1
 80146d4:	e000      	b.n	80146d8 <alloc_socket+0x88>
 80146d6:	2300      	movs	r3, #0
 80146d8:	b299      	uxth	r1, r3
 80146da:	4a0f      	ldr	r2, [pc, #60]	; (8014718 <alloc_socket+0xc8>)
 80146dc:	68fb      	ldr	r3, [r7, #12]
 80146de:	011b      	lsls	r3, r3, #4
 80146e0:	4413      	add	r3, r2
 80146e2:	330a      	adds	r3, #10
 80146e4:	460a      	mov	r2, r1
 80146e6:	801a      	strh	r2, [r3, #0]
      sockets[i].errevent   = 0;
 80146e8:	4a0b      	ldr	r2, [pc, #44]	; (8014718 <alloc_socket+0xc8>)
 80146ea:	68fb      	ldr	r3, [r7, #12]
 80146ec:	011b      	lsls	r3, r3, #4
 80146ee:	4413      	add	r3, r2
 80146f0:	330c      	adds	r3, #12
 80146f2:	2200      	movs	r2, #0
 80146f4:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL */
      return i + LWIP_SOCKET_OFFSET;
 80146f6:	68fb      	ldr	r3, [r7, #12]
 80146f8:	e00a      	b.n	8014710 <alloc_socket+0xc0>
    }
    SYS_ARCH_UNPROTECT(lev);
 80146fa:	68b8      	ldr	r0, [r7, #8]
 80146fc:	f001 f9fc 	bl	8015af8 <sys_arch_unprotect>
  for (i = 0; i < NUM_SOCKETS; ++i) {
 8014700:	68fb      	ldr	r3, [r7, #12]
 8014702:	3301      	adds	r3, #1
 8014704:	60fb      	str	r3, [r7, #12]
 8014706:	68fb      	ldr	r3, [r7, #12]
 8014708:	2b03      	cmp	r3, #3
 801470a:	dda9      	ble.n	8014660 <alloc_socket+0x10>
  }
  return -1;
 801470c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014710:	4618      	mov	r0, r3
 8014712:	3710      	adds	r7, #16
 8014714:	46bd      	mov	sp, r7
 8014716:	bd80      	pop	{r7, pc}
 8014718:	2404071c 	.word	0x2404071c
 801471c:	08024f00 	.word	0x08024f00
 8014720:	08024f54 	.word	0x08024f54
 8014724:	08024f74 	.word	0x08024f74

08014728 <free_socket_locked>:
 * @param lastdata lastdata is stored here, must be freed externally
 */
static int
free_socket_locked(struct lwip_sock *sock, int is_tcp, struct netconn **conn,
                   union lwip_sock_lastdata *lastdata)
{
 8014728:	b480      	push	{r7}
 801472a:	b085      	sub	sp, #20
 801472c:	af00      	add	r7, sp, #0
 801472e:	60f8      	str	r0, [r7, #12]
 8014730:	60b9      	str	r1, [r7, #8]
 8014732:	607a      	str	r2, [r7, #4]
 8014734:	603b      	str	r3, [r7, #0]
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  LWIP_UNUSED_ARG(is_tcp);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  *lastdata = sock->lastdata;
 8014736:	683b      	ldr	r3, [r7, #0]
 8014738:	68fa      	ldr	r2, [r7, #12]
 801473a:	6852      	ldr	r2, [r2, #4]
 801473c:	601a      	str	r2, [r3, #0]
  sock->lastdata.pbuf = NULL;
 801473e:	68fb      	ldr	r3, [r7, #12]
 8014740:	2200      	movs	r2, #0
 8014742:	605a      	str	r2, [r3, #4]
  *conn = sock->conn;
 8014744:	68fb      	ldr	r3, [r7, #12]
 8014746:	681a      	ldr	r2, [r3, #0]
 8014748:	687b      	ldr	r3, [r7, #4]
 801474a:	601a      	str	r2, [r3, #0]
  sock->conn = NULL;
 801474c:	68fb      	ldr	r3, [r7, #12]
 801474e:	2200      	movs	r2, #0
 8014750:	601a      	str	r2, [r3, #0]
  return 1;
 8014752:	2301      	movs	r3, #1
}
 8014754:	4618      	mov	r0, r3
 8014756:	3714      	adds	r7, #20
 8014758:	46bd      	mov	sp, r7
 801475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801475e:	4770      	bx	lr

08014760 <free_socket_free_elements>:

/** Free a socket's leftover members.
 */
static void
free_socket_free_elements(int is_tcp, struct netconn *conn, union lwip_sock_lastdata *lastdata)
{
 8014760:	b580      	push	{r7, lr}
 8014762:	b084      	sub	sp, #16
 8014764:	af00      	add	r7, sp, #0
 8014766:	60f8      	str	r0, [r7, #12]
 8014768:	60b9      	str	r1, [r7, #8]
 801476a:	607a      	str	r2, [r7, #4]
  if (lastdata->pbuf != NULL) {
 801476c:	687b      	ldr	r3, [r7, #4]
 801476e:	681b      	ldr	r3, [r3, #0]
 8014770:	2b00      	cmp	r3, #0
 8014772:	d00d      	beq.n	8014790 <free_socket_free_elements+0x30>
    if (is_tcp) {
 8014774:	68fb      	ldr	r3, [r7, #12]
 8014776:	2b00      	cmp	r3, #0
 8014778:	d005      	beq.n	8014786 <free_socket_free_elements+0x26>
      pbuf_free(lastdata->pbuf);
 801477a:	687b      	ldr	r3, [r7, #4]
 801477c:	681b      	ldr	r3, [r3, #0]
 801477e:	4618      	mov	r0, r3
 8014780:	f7ff fc66 	bl	8014050 <pbuf_free>
 8014784:	e004      	b.n	8014790 <free_socket_free_elements+0x30>
    } else {
      netbuf_delete(lastdata->netbuf);
 8014786:	687b      	ldr	r3, [r7, #4]
 8014788:	681b      	ldr	r3, [r3, #0]
 801478a:	4618      	mov	r0, r3
 801478c:	f7fe fd26 	bl	80131dc <netbuf_delete>
    }
  }
  if (conn != NULL) {
 8014790:	68bb      	ldr	r3, [r7, #8]
 8014792:	2b00      	cmp	r3, #0
 8014794:	d002      	beq.n	801479c <free_socket_free_elements+0x3c>
    /* netconn_prepare_delete() has already been called, here we only free the conn */
    netconn_delete(conn);
 8014796:	68b8      	ldr	r0, [r7, #8]
 8014798:	f7f9 fa12 	bl	800dbc0 <netconn_delete>
  }
}
 801479c:	bf00      	nop
 801479e:	3710      	adds	r7, #16
 80147a0:	46bd      	mov	sp, r7
 80147a2:	bd80      	pop	{r7, pc}

080147a4 <free_socket>:
 * @param sock the socket to free
 * @param is_tcp != 0 for TCP sockets, used to free lastdata
 */
static void
free_socket(struct lwip_sock *sock, int is_tcp)
{
 80147a4:	b580      	push	{r7, lr}
 80147a6:	b086      	sub	sp, #24
 80147a8:	af00      	add	r7, sp, #0
 80147aa:	6078      	str	r0, [r7, #4]
 80147ac:	6039      	str	r1, [r7, #0]
  struct netconn *conn;
  union lwip_sock_lastdata lastdata;
  SYS_ARCH_DECL_PROTECT(lev);

  /* Protect socket array */
  SYS_ARCH_PROTECT(lev);
 80147ae:	f001 f995 	bl	8015adc <sys_arch_protect>
 80147b2:	6178      	str	r0, [r7, #20]

  freed = free_socket_locked(sock, is_tcp, &conn, &lastdata);
 80147b4:	f107 0308 	add.w	r3, r7, #8
 80147b8:	f107 020c 	add.w	r2, r7, #12
 80147bc:	6839      	ldr	r1, [r7, #0]
 80147be:	6878      	ldr	r0, [r7, #4]
 80147c0:	f7ff ffb2 	bl	8014728 <free_socket_locked>
 80147c4:	6138      	str	r0, [r7, #16]
  SYS_ARCH_UNPROTECT(lev);
 80147c6:	6978      	ldr	r0, [r7, #20]
 80147c8:	f001 f996 	bl	8015af8 <sys_arch_unprotect>
  /* don't use 'sock' after this line, as another task might have allocated it */

  if (freed) {
 80147cc:	693b      	ldr	r3, [r7, #16]
 80147ce:	2b00      	cmp	r3, #0
 80147d0:	d006      	beq.n	80147e0 <free_socket+0x3c>
    free_socket_free_elements(is_tcp, conn, &lastdata);
 80147d2:	68fb      	ldr	r3, [r7, #12]
 80147d4:	f107 0208 	add.w	r2, r7, #8
 80147d8:	4619      	mov	r1, r3
 80147da:	6838      	ldr	r0, [r7, #0]
 80147dc:	f7ff ffc0 	bl	8014760 <free_socket_free_elements>
  }
}
 80147e0:	bf00      	nop
 80147e2:	3718      	adds	r7, #24
 80147e4:	46bd      	mov	sp, r7
 80147e6:	bd80      	pop	{r7, pc}

080147e8 <lwip_close>:
  return 0;
}

int
lwip_close(int s)
{
 80147e8:	b580      	push	{r7, lr}
 80147ea:	b086      	sub	sp, #24
 80147ec:	af00      	add	r7, sp, #0
 80147ee:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock;
  int is_tcp = 0;
 80147f0:	2300      	movs	r3, #0
 80147f2:	617b      	str	r3, [r7, #20]
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_close(%d)\n", s));

  sock = get_socket(s);
 80147f4:	6878      	ldr	r0, [r7, #4]
 80147f6:	f7ff ff13 	bl	8014620 <get_socket>
 80147fa:	6138      	str	r0, [r7, #16]
  if (!sock) {
 80147fc:	693b      	ldr	r3, [r7, #16]
 80147fe:	2b00      	cmp	r3, #0
 8014800:	d102      	bne.n	8014808 <lwip_close+0x20>
    return -1;
 8014802:	f04f 33ff 	mov.w	r3, #4294967295
 8014806:	e039      	b.n	801487c <lwip_close+0x94>
  }

  if (sock->conn != NULL) {
 8014808:	693b      	ldr	r3, [r7, #16]
 801480a:	681b      	ldr	r3, [r3, #0]
 801480c:	2b00      	cmp	r3, #0
 801480e:	d00b      	beq.n	8014828 <lwip_close+0x40>
    is_tcp = NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP;
 8014810:	693b      	ldr	r3, [r7, #16]
 8014812:	681b      	ldr	r3, [r3, #0]
 8014814:	781b      	ldrb	r3, [r3, #0]
 8014816:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801481a:	2b10      	cmp	r3, #16
 801481c:	bf0c      	ite	eq
 801481e:	2301      	moveq	r3, #1
 8014820:	2300      	movne	r3, #0
 8014822:	b2db      	uxtb	r3, r3
 8014824:	617b      	str	r3, [r7, #20]
 8014826:	e00a      	b.n	801483e <lwip_close+0x56>
  } else {
    LWIP_ASSERT("sock->lastdata == NULL", sock->lastdata.pbuf == NULL);
 8014828:	693b      	ldr	r3, [r7, #16]
 801482a:	685b      	ldr	r3, [r3, #4]
 801482c:	2b00      	cmp	r3, #0
 801482e:	d006      	beq.n	801483e <lwip_close+0x56>
 8014830:	4b14      	ldr	r3, [pc, #80]	; (8014884 <lwip_close+0x9c>)
 8014832:	f44f 7245 	mov.w	r2, #788	; 0x314
 8014836:	4914      	ldr	r1, [pc, #80]	; (8014888 <lwip_close+0xa0>)
 8014838:	4814      	ldr	r0, [pc, #80]	; (801488c <lwip_close+0xa4>)
 801483a:	f00c fb89 	bl	8020f50 <iprintf>
#if LWIP_IPV6_MLD
  /* drop all possibly joined MLD6 memberships */
  lwip_socket_drop_registered_mld6_memberships(s);
#endif /* LWIP_IPV6_MLD */

  err = netconn_prepare_delete(sock->conn);
 801483e:	693b      	ldr	r3, [r7, #16]
 8014840:	681b      	ldr	r3, [r3, #0]
 8014842:	4618      	mov	r0, r3
 8014844:	f7f9 f998 	bl	800db78 <netconn_prepare_delete>
 8014848:	4603      	mov	r3, r0
 801484a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801484c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014850:	2b00      	cmp	r3, #0
 8014852:	d00e      	beq.n	8014872 <lwip_close+0x8a>
    sock_set_errno(sock, err_to_errno(err));
 8014854:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014858:	4618      	mov	r0, r3
 801485a:	f7fb fa7d 	bl	800fd58 <err_to_errno>
 801485e:	60b8      	str	r0, [r7, #8]
 8014860:	68bb      	ldr	r3, [r7, #8]
 8014862:	2b00      	cmp	r3, #0
 8014864:	d002      	beq.n	801486c <lwip_close+0x84>
 8014866:	4a0a      	ldr	r2, [pc, #40]	; (8014890 <lwip_close+0xa8>)
 8014868:	68bb      	ldr	r3, [r7, #8]
 801486a:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 801486c:	f04f 33ff 	mov.w	r3, #4294967295
 8014870:	e004      	b.n	801487c <lwip_close+0x94>
  }

  free_socket(sock, is_tcp);
 8014872:	6979      	ldr	r1, [r7, #20]
 8014874:	6938      	ldr	r0, [r7, #16]
 8014876:	f7ff ff95 	bl	80147a4 <free_socket>
  set_errno(0);
  return 0;
 801487a:	2300      	movs	r3, #0
}
 801487c:	4618      	mov	r0, r3
 801487e:	3718      	adds	r7, #24
 8014880:	46bd      	mov	sp, r7
 8014882:	bd80      	pop	{r7, pc}
 8014884:	08024f00 	.word	0x08024f00
 8014888:	08024fe0 	.word	0x08024fe0
 801488c:	08024f74 	.word	0x08024f74
 8014890:	24048e74 	.word	0x24048e74

08014894 <lwip_connect>:

int
lwip_connect(int s, const struct sockaddr *name, socklen_t namelen)
{
 8014894:	b580      	push	{r7, lr}
 8014896:	b08c      	sub	sp, #48	; 0x30
 8014898:	af00      	add	r7, sp, #0
 801489a:	60f8      	str	r0, [r7, #12]
 801489c:	60b9      	str	r1, [r7, #8]
 801489e:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock;
  err_t err;

  sock = get_socket(s);
 80148a0:	68f8      	ldr	r0, [r7, #12]
 80148a2:	f7ff febd 	bl	8014620 <get_socket>
 80148a6:	62b8      	str	r0, [r7, #40]	; 0x28
  if (!sock) {
 80148a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148aa:	2b00      	cmp	r3, #0
 80148ac:	d102      	bne.n	80148b4 <lwip_connect+0x20>
    return -1;
 80148ae:	f04f 33ff 	mov.w	r3, #4294967295
 80148b2:	e062      	b.n	801497a <lwip_connect+0xe6>
    done_socket(sock);
    return -1;
  }

  LWIP_UNUSED_ARG(namelen);
  if (name->sa_family == AF_UNSPEC) {
 80148b4:	68bb      	ldr	r3, [r7, #8]
 80148b6:	785b      	ldrb	r3, [r3, #1]
 80148b8:	2b00      	cmp	r3, #0
 80148ba:	d108      	bne.n	80148ce <lwip_connect+0x3a>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d, AF_UNSPEC)\n", s));
    err = netconn_disconnect(sock->conn);
 80148bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148be:	681b      	ldr	r3, [r3, #0]
 80148c0:	4618      	mov	r0, r3
 80148c2:	f7f9 fa23 	bl	800dd0c <netconn_disconnect>
 80148c6:	4603      	mov	r3, r0
 80148c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80148cc:	e039      	b.n	8014942 <lwip_connect+0xae>
  } else {
    ip_addr_t remote_addr;
    u16_t remote_port;

    /* check size, family and alignment of 'name' */
    LWIP_ERROR("lwip_connect: invalid address", IS_SOCK_ADDR_LEN_VALID(namelen) &&
 80148ce:	687b      	ldr	r3, [r7, #4]
 80148d0:	2b10      	cmp	r3, #16
 80148d2:	d10c      	bne.n	80148ee <lwip_connect+0x5a>
 80148d4:	68bb      	ldr	r3, [r7, #8]
 80148d6:	785b      	ldrb	r3, [r3, #1]
 80148d8:	2b00      	cmp	r3, #0
 80148da:	d003      	beq.n	80148e4 <lwip_connect+0x50>
 80148dc:	68bb      	ldr	r3, [r7, #8]
 80148de:	785b      	ldrb	r3, [r3, #1]
 80148e0:	2b02      	cmp	r3, #2
 80148e2:	d104      	bne.n	80148ee <lwip_connect+0x5a>
 80148e4:	68bb      	ldr	r3, [r7, #8]
 80148e6:	f003 0303 	and.w	r3, r3, #3
 80148ea:	2b00      	cmp	r3, #0
 80148ec:	d014      	beq.n	8014918 <lwip_connect+0x84>
 80148ee:	4b25      	ldr	r3, [pc, #148]	; (8014984 <lwip_connect+0xf0>)
 80148f0:	f240 3249 	movw	r2, #841	; 0x349
 80148f4:	4924      	ldr	r1, [pc, #144]	; (8014988 <lwip_connect+0xf4>)
 80148f6:	4825      	ldr	r0, [pc, #148]	; (801498c <lwip_connect+0xf8>)
 80148f8:	f00c fb2a 	bl	8020f50 <iprintf>
 80148fc:	f06f 000f 	mvn.w	r0, #15
 8014900:	f7fb fa2a 	bl	800fd58 <err_to_errno>
 8014904:	6238      	str	r0, [r7, #32]
 8014906:	6a3b      	ldr	r3, [r7, #32]
 8014908:	2b00      	cmp	r3, #0
 801490a:	d002      	beq.n	8014912 <lwip_connect+0x7e>
 801490c:	4a20      	ldr	r2, [pc, #128]	; (8014990 <lwip_connect+0xfc>)
 801490e:	6a3b      	ldr	r3, [r7, #32]
 8014910:	6013      	str	r3, [r2, #0]
 8014912:	f04f 33ff 	mov.w	r3, #4294967295
 8014916:	e030      	b.n	801497a <lwip_connect+0xe6>
               IS_SOCK_ADDR_TYPE_VALID_OR_UNSPEC(name) && IS_SOCK_ADDR_ALIGNED(name),
               sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);

    SOCKADDR_TO_IPADDR_PORT(name, &remote_addr, remote_port);
 8014918:	68bb      	ldr	r3, [r7, #8]
 801491a:	685b      	ldr	r3, [r3, #4]
 801491c:	617b      	str	r3, [r7, #20]
 801491e:	68bb      	ldr	r3, [r7, #8]
 8014920:	885b      	ldrh	r3, [r3, #2]
 8014922:	4618      	mov	r0, r3
 8014924:	f7fb f9ea 	bl	800fcfc <lwip_htons>
 8014928:	4603      	mov	r3, r0
 801492a:	84fb      	strh	r3, [r7, #38]	; 0x26
      unmap_ipv4_mapped_ipv6(ip_2_ip4(&remote_addr), ip_2_ip6(&remote_addr));
      IP_SET_TYPE_VAL(remote_addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    err = netconn_connect(sock->conn, &remote_addr, remote_port);
 801492c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801492e:	681b      	ldr	r3, [r3, #0]
 8014930:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8014932:	f107 0114 	add.w	r1, r7, #20
 8014936:	4618      	mov	r0, r3
 8014938:	f7f9 f9b0 	bl	800dc9c <netconn_connect>
 801493c:	4603      	mov	r3, r0
 801493e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  if (err != ERR_OK) {
 8014942:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8014946:	2b00      	cmp	r3, #0
 8014948:	d00e      	beq.n	8014968 <lwip_connect+0xd4>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
 801494a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 801494e:	4618      	mov	r0, r3
 8014950:	f7fb fa02 	bl	800fd58 <err_to_errno>
 8014954:	61b8      	str	r0, [r7, #24]
 8014956:	69bb      	ldr	r3, [r7, #24]
 8014958:	2b00      	cmp	r3, #0
 801495a:	d002      	beq.n	8014962 <lwip_connect+0xce>
 801495c:	4a0c      	ldr	r2, [pc, #48]	; (8014990 <lwip_connect+0xfc>)
 801495e:	69bb      	ldr	r3, [r7, #24]
 8014960:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 8014962:	f04f 33ff 	mov.w	r3, #4294967295
 8014966:	e008      	b.n	801497a <lwip_connect+0xe6>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
 8014968:	2300      	movs	r3, #0
 801496a:	61fb      	str	r3, [r7, #28]
 801496c:	69fb      	ldr	r3, [r7, #28]
 801496e:	2b00      	cmp	r3, #0
 8014970:	d002      	beq.n	8014978 <lwip_connect+0xe4>
 8014972:	4a07      	ldr	r2, [pc, #28]	; (8014990 <lwip_connect+0xfc>)
 8014974:	69fb      	ldr	r3, [r7, #28]
 8014976:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return 0;
 8014978:	2300      	movs	r3, #0
}
 801497a:	4618      	mov	r0, r3
 801497c:	3730      	adds	r7, #48	; 0x30
 801497e:	46bd      	mov	sp, r7
 8014980:	bd80      	pop	{r7, pc}
 8014982:	bf00      	nop
 8014984:	08024f00 	.word	0x08024f00
 8014988:	08024ff8 	.word	0x08024ff8
 801498c:	08024f74 	.word	0x08024f74
 8014990:	24048e74 	.word	0x24048e74

08014994 <lwip_recv_tcp>:
 * until "len" bytes are received or we're otherwise done.
 * Keeps sock->lastdata for peeking or partly copying.
 */
static ssize_t
lwip_recv_tcp(struct lwip_sock *sock, void *mem, size_t len, int flags)
{
 8014994:	b580      	push	{r7, lr}
 8014996:	b08c      	sub	sp, #48	; 0x30
 8014998:	af00      	add	r7, sp, #0
 801499a:	60f8      	str	r0, [r7, #12]
 801499c:	60b9      	str	r1, [r7, #8]
 801499e:	607a      	str	r2, [r7, #4]
 80149a0:	603b      	str	r3, [r7, #0]
  u8_t apiflags = NETCONN_NOAUTORCVD;
 80149a2:	2308      	movs	r3, #8
 80149a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  ssize_t recvd = 0;
 80149a8:	2300      	movs	r3, #0
 80149aa:	62bb      	str	r3, [r7, #40]	; 0x28
  ssize_t recv_left = (len <= SSIZE_MAX) ? (ssize_t)len : SSIZE_MAX;
 80149ac:	687b      	ldr	r3, [r7, #4]
 80149ae:	2b00      	cmp	r3, #0
 80149b0:	db01      	blt.n	80149b6 <lwip_recv_tcp+0x22>
 80149b2:	687b      	ldr	r3, [r7, #4]
 80149b4:	e001      	b.n	80149ba <lwip_recv_tcp+0x26>
 80149b6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80149ba:	627b      	str	r3, [r7, #36]	; 0x24

  LWIP_ASSERT("no socket given", sock != NULL);
 80149bc:	68fb      	ldr	r3, [r7, #12]
 80149be:	2b00      	cmp	r3, #0
 80149c0:	d106      	bne.n	80149d0 <lwip_recv_tcp+0x3c>
 80149c2:	4b74      	ldr	r3, [pc, #464]	; (8014b94 <lwip_recv_tcp+0x200>)
 80149c4:	f240 329e 	movw	r2, #926	; 0x39e
 80149c8:	4973      	ldr	r1, [pc, #460]	; (8014b98 <lwip_recv_tcp+0x204>)
 80149ca:	4874      	ldr	r0, [pc, #464]	; (8014b9c <lwip_recv_tcp+0x208>)
 80149cc:	f00c fac0 	bl	8020f50 <iprintf>
  LWIP_ASSERT("this should be checked internally", NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP);
 80149d0:	68fb      	ldr	r3, [r7, #12]
 80149d2:	681b      	ldr	r3, [r3, #0]
 80149d4:	781b      	ldrb	r3, [r3, #0]
 80149d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80149da:	2b10      	cmp	r3, #16
 80149dc:	d006      	beq.n	80149ec <lwip_recv_tcp+0x58>
 80149de:	4b6d      	ldr	r3, [pc, #436]	; (8014b94 <lwip_recv_tcp+0x200>)
 80149e0:	f240 329f 	movw	r2, #927	; 0x39f
 80149e4:	496e      	ldr	r1, [pc, #440]	; (8014ba0 <lwip_recv_tcp+0x20c>)
 80149e6:	486d      	ldr	r0, [pc, #436]	; (8014b9c <lwip_recv_tcp+0x208>)
 80149e8:	f00c fab2 	bl	8020f50 <iprintf>

  if (flags & MSG_DONTWAIT) {
 80149ec:	683b      	ldr	r3, [r7, #0]
 80149ee:	f003 0308 	and.w	r3, r3, #8
 80149f2:	2b00      	cmp	r3, #0
 80149f4:	d005      	beq.n	8014a02 <lwip_recv_tcp+0x6e>
    apiflags |= NETCONN_DONTBLOCK;
 80149f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80149fa:	f043 0304 	orr.w	r3, r3, #4
 80149fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    err_t err;
    u16_t copylen;

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: top while sock->lastdata=%p\n", (void *)sock->lastdata.pbuf));
    /* Check if there is data left from the last recv operation. */
    if (sock->lastdata.pbuf) {
 8014a02:	68fb      	ldr	r3, [r7, #12]
 8014a04:	685b      	ldr	r3, [r3, #4]
 8014a06:	2b00      	cmp	r3, #0
 8014a08:	d003      	beq.n	8014a12 <lwip_recv_tcp+0x7e>
      p = sock->lastdata.pbuf;
 8014a0a:	68fb      	ldr	r3, [r7, #12]
 8014a0c:	685b      	ldr	r3, [r3, #4]
 8014a0e:	617b      	str	r3, [r7, #20]
 8014a10:	e036      	b.n	8014a80 <lwip_recv_tcp+0xec>
    } else {
      /* No data was left from the previous operation, so we try to get
         some from the network. */
      err = netconn_recv_tcp_pbuf_flags(sock->conn, &p, apiflags);
 8014a12:	68fb      	ldr	r3, [r7, #12]
 8014a14:	681b      	ldr	r3, [r3, #0]
 8014a16:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8014a1a:	f107 0114 	add.w	r1, r7, #20
 8014a1e:	4618      	mov	r0, r3
 8014a20:	f7f9 fb48 	bl	800e0b4 <netconn_recv_tcp_pbuf_flags>
 8014a24:	4603      	mov	r3, r0
 8014a26:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: netconn_recv err=%d, pbuf=%p\n",
                                  err, (void *)p));

      if (err != ERR_OK) {
 8014a2a:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8014a2e:	2b00      	cmp	r3, #0
 8014a30:	d019      	beq.n	8014a66 <lwip_recv_tcp+0xd2>
        if (recvd > 0) {
 8014a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a34:	2b00      	cmp	r3, #0
 8014a36:	f300 808d 	bgt.w	8014b54 <lwip_recv_tcp+0x1c0>
          goto lwip_recv_tcp_done;
        }
        /* We should really do some error checking here. */
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: p == NULL, error is \"%s\"!\n",
                                    lwip_strerr(err)));
        sock_set_errno(sock, err_to_errno(err));
 8014a3a:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8014a3e:	4618      	mov	r0, r3
 8014a40:	f7fb f98a 	bl	800fd58 <err_to_errno>
 8014a44:	61f8      	str	r0, [r7, #28]
 8014a46:	69fb      	ldr	r3, [r7, #28]
 8014a48:	2b00      	cmp	r3, #0
 8014a4a:	d002      	beq.n	8014a52 <lwip_recv_tcp+0xbe>
 8014a4c:	4a55      	ldr	r2, [pc, #340]	; (8014ba4 <lwip_recv_tcp+0x210>)
 8014a4e:	69fb      	ldr	r3, [r7, #28]
 8014a50:	6013      	str	r3, [r2, #0]
        if (err == ERR_CLSD) {
 8014a52:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8014a56:	f113 0f0f 	cmn.w	r3, #15
 8014a5a:	d101      	bne.n	8014a60 <lwip_recv_tcp+0xcc>
          return 0;
 8014a5c:	2300      	movs	r3, #0
 8014a5e:	e094      	b.n	8014b8a <lwip_recv_tcp+0x1f6>
        } else {
          return -1;
 8014a60:	f04f 33ff 	mov.w	r3, #4294967295
 8014a64:	e091      	b.n	8014b8a <lwip_recv_tcp+0x1f6>
        }
      }
      LWIP_ASSERT("p != NULL", p != NULL);
 8014a66:	697b      	ldr	r3, [r7, #20]
 8014a68:	2b00      	cmp	r3, #0
 8014a6a:	d106      	bne.n	8014a7a <lwip_recv_tcp+0xe6>
 8014a6c:	4b49      	ldr	r3, [pc, #292]	; (8014b94 <lwip_recv_tcp+0x200>)
 8014a6e:	f240 32c5 	movw	r2, #965	; 0x3c5
 8014a72:	494d      	ldr	r1, [pc, #308]	; (8014ba8 <lwip_recv_tcp+0x214>)
 8014a74:	4849      	ldr	r0, [pc, #292]	; (8014b9c <lwip_recv_tcp+0x208>)
 8014a76:	f00c fa6b 	bl	8020f50 <iprintf>
      sock->lastdata.pbuf = p;
 8014a7a:	697a      	ldr	r2, [r7, #20]
 8014a7c:	68fb      	ldr	r3, [r7, #12]
 8014a7e:	605a      	str	r2, [r3, #4]
    }

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: buflen=%"U16_F" recv_left=%d off=%d\n",
                                p->tot_len, (int)recv_left, (int)recvd));

    if (recv_left > p->tot_len) {
 8014a80:	697b      	ldr	r3, [r7, #20]
 8014a82:	891b      	ldrh	r3, [r3, #8]
 8014a84:	461a      	mov	r2, r3
 8014a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a88:	4293      	cmp	r3, r2
 8014a8a:	dd03      	ble.n	8014a94 <lwip_recv_tcp+0x100>
      copylen = p->tot_len;
 8014a8c:	697b      	ldr	r3, [r7, #20]
 8014a8e:	891b      	ldrh	r3, [r3, #8]
 8014a90:	847b      	strh	r3, [r7, #34]	; 0x22
 8014a92:	e001      	b.n	8014a98 <lwip_recv_tcp+0x104>
    } else {
      copylen = (u16_t)recv_left;
 8014a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a96:	847b      	strh	r3, [r7, #34]	; 0x22
    }
    if (recvd + copylen < recvd) {
 8014a98:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8014a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a9c:	4413      	add	r3, r2
 8014a9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014aa0:	429a      	cmp	r2, r3
 8014aa2:	dd03      	ble.n	8014aac <lwip_recv_tcp+0x118>
      /* overflow */
      copylen = (u16_t)(SSIZE_MAX - recvd);
 8014aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014aa6:	b29b      	uxth	r3, r3
 8014aa8:	43db      	mvns	r3, r3
 8014aaa:	847b      	strh	r3, [r7, #34]	; 0x22
    }

    /* copy the contents of the received buffer into
    the supplied memory pointer mem */
    pbuf_copy_partial(p, (u8_t *)mem + recvd, copylen, 0);
 8014aac:	6978      	ldr	r0, [r7, #20]
 8014aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ab0:	68ba      	ldr	r2, [r7, #8]
 8014ab2:	18d1      	adds	r1, r2, r3
 8014ab4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8014ab6:	2300      	movs	r3, #0
 8014ab8:	f7ff fcd0 	bl	801445c <pbuf_copy_partial>

    recvd += copylen;
 8014abc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014abe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014ac0:	4413      	add	r3, r2
 8014ac2:	62bb      	str	r3, [r7, #40]	; 0x28

    /* TCP combines multiple pbufs for one recv */
    LWIP_ASSERT("invalid copylen, len would underflow", recv_left >= copylen);
 8014ac4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014ac6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014ac8:	429a      	cmp	r2, r3
 8014aca:	da06      	bge.n	8014ada <lwip_recv_tcp+0x146>
 8014acc:	4b31      	ldr	r3, [pc, #196]	; (8014b94 <lwip_recv_tcp+0x200>)
 8014ace:	f240 32dd 	movw	r2, #989	; 0x3dd
 8014ad2:	4936      	ldr	r1, [pc, #216]	; (8014bac <lwip_recv_tcp+0x218>)
 8014ad4:	4831      	ldr	r0, [pc, #196]	; (8014b9c <lwip_recv_tcp+0x208>)
 8014ad6:	f00c fa3b 	bl	8020f50 <iprintf>
    recv_left -= copylen;
 8014ada:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014adc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014ade:	1ad3      	subs	r3, r2, r3
 8014ae0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Unless we peek the incoming message... */
    if ((flags & MSG_PEEK) == 0) {
 8014ae2:	683b      	ldr	r3, [r7, #0]
 8014ae4:	f003 0301 	and.w	r3, r3, #1
 8014ae8:	2b00      	cmp	r3, #0
 8014aea:	d123      	bne.n	8014b34 <lwip_recv_tcp+0x1a0>
      /* ... check if there is data left in the pbuf */
      LWIP_ASSERT("invalid copylen", p->tot_len >= copylen);
 8014aec:	697b      	ldr	r3, [r7, #20]
 8014aee:	891b      	ldrh	r3, [r3, #8]
 8014af0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8014af2:	429a      	cmp	r2, r3
 8014af4:	d906      	bls.n	8014b04 <lwip_recv_tcp+0x170>
 8014af6:	4b27      	ldr	r3, [pc, #156]	; (8014b94 <lwip_recv_tcp+0x200>)
 8014af8:	f240 32e3 	movw	r2, #995	; 0x3e3
 8014afc:	492c      	ldr	r1, [pc, #176]	; (8014bb0 <lwip_recv_tcp+0x21c>)
 8014afe:	4827      	ldr	r0, [pc, #156]	; (8014b9c <lwip_recv_tcp+0x208>)
 8014b00:	f00c fa26 	bl	8020f50 <iprintf>
      if (p->tot_len - copylen > 0) {
 8014b04:	697b      	ldr	r3, [r7, #20]
 8014b06:	891b      	ldrh	r3, [r3, #8]
 8014b08:	461a      	mov	r2, r3
 8014b0a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014b0c:	1ad3      	subs	r3, r2, r3
 8014b0e:	2b00      	cmp	r3, #0
 8014b10:	dd09      	ble.n	8014b26 <lwip_recv_tcp+0x192>
        /* If so, it should be saved in the sock structure for the next recv call.
           We store the pbuf but hide/free the consumed data: */
        sock->lastdata.pbuf = pbuf_free_header(p, copylen);
 8014b12:	697b      	ldr	r3, [r7, #20]
 8014b14:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8014b16:	4611      	mov	r1, r2
 8014b18:	4618      	mov	r0, r3
 8014b1a:	f7ff fa66 	bl	8013fea <pbuf_free_header>
 8014b1e:	4602      	mov	r2, r0
 8014b20:	68fb      	ldr	r3, [r7, #12]
 8014b22:	605a      	str	r2, [r3, #4]
 8014b24:	e006      	b.n	8014b34 <lwip_recv_tcp+0x1a0>
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: lastdata now pbuf=%p\n", (void *)sock->lastdata.pbuf));
      } else {
        sock->lastdata.pbuf = NULL;
 8014b26:	68fb      	ldr	r3, [r7, #12]
 8014b28:	2200      	movs	r2, #0
 8014b2a:	605a      	str	r2, [r3, #4]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: deleting pbuf=%p\n", (void *)p));
        pbuf_free(p);
 8014b2c:	697b      	ldr	r3, [r7, #20]
 8014b2e:	4618      	mov	r0, r3
 8014b30:	f7ff fa8e 	bl	8014050 <pbuf_free>
      }
    }
    /* once we have some data to return, only add more if we don't need to wait */
    apiflags |= NETCONN_DONTBLOCK | NETCONN_NOFIN;
 8014b34:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014b38:	f043 0314 	orr.w	r3, r3, #20
 8014b3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    /* @todo: do we need to support peeking more than one pbuf? */
  } while ((recv_left > 0) && !(flags & MSG_PEEK));
 8014b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b42:	2b00      	cmp	r3, #0
 8014b44:	dd08      	ble.n	8014b58 <lwip_recv_tcp+0x1c4>
 8014b46:	683b      	ldr	r3, [r7, #0]
 8014b48:	f003 0301 	and.w	r3, r3, #1
 8014b4c:	2b00      	cmp	r3, #0
 8014b4e:	f43f af58 	beq.w	8014a02 <lwip_recv_tcp+0x6e>
lwip_recv_tcp_done:
 8014b52:	e001      	b.n	8014b58 <lwip_recv_tcp+0x1c4>
          goto lwip_recv_tcp_done;
 8014b54:	bf00      	nop
 8014b56:	e000      	b.n	8014b5a <lwip_recv_tcp+0x1c6>
lwip_recv_tcp_done:
 8014b58:	bf00      	nop
  if ((recvd > 0) && !(flags & MSG_PEEK)) {
 8014b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b5c:	2b00      	cmp	r3, #0
 8014b5e:	dd0b      	ble.n	8014b78 <lwip_recv_tcp+0x1e4>
 8014b60:	683b      	ldr	r3, [r7, #0]
 8014b62:	f003 0301 	and.w	r3, r3, #1
 8014b66:	2b00      	cmp	r3, #0
 8014b68:	d106      	bne.n	8014b78 <lwip_recv_tcp+0x1e4>
    /* ensure window update after copying all data */
    netconn_tcp_recvd(sock->conn, (size_t)recvd);
 8014b6a:	68fb      	ldr	r3, [r7, #12]
 8014b6c:	681b      	ldr	r3, [r3, #0]
 8014b6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014b70:	4611      	mov	r1, r2
 8014b72:	4618      	mov	r0, r3
 8014b74:	f7f9 f9ec 	bl	800df50 <netconn_tcp_recvd>
  }
  sock_set_errno(sock, 0);
 8014b78:	2300      	movs	r3, #0
 8014b7a:	61bb      	str	r3, [r7, #24]
 8014b7c:	69bb      	ldr	r3, [r7, #24]
 8014b7e:	2b00      	cmp	r3, #0
 8014b80:	d002      	beq.n	8014b88 <lwip_recv_tcp+0x1f4>
 8014b82:	4a08      	ldr	r2, [pc, #32]	; (8014ba4 <lwip_recv_tcp+0x210>)
 8014b84:	69bb      	ldr	r3, [r7, #24]
 8014b86:	6013      	str	r3, [r2, #0]
  return recvd;
 8014b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8014b8a:	4618      	mov	r0, r3
 8014b8c:	3730      	adds	r7, #48	; 0x30
 8014b8e:	46bd      	mov	sp, r7
 8014b90:	bd80      	pop	{r7, pc}
 8014b92:	bf00      	nop
 8014b94:	08024f00 	.word	0x08024f00
 8014b98:	08025018 	.word	0x08025018
 8014b9c:	08024f74 	.word	0x08024f74
 8014ba0:	08025028 	.word	0x08025028
 8014ba4:	24048e74 	.word	0x24048e74
 8014ba8:	0802504c 	.word	0x0802504c
 8014bac:	08025058 	.word	0x08025058
 8014bb0:	08025080 	.word	0x08025080

08014bb4 <lwip_sock_make_addr>:

/* Convert a netbuf's address data to struct sockaddr */
static int
lwip_sock_make_addr(struct netconn *conn, ip_addr_t *fromaddr, u16_t port,
                    struct sockaddr *from, socklen_t *fromlen)
{
 8014bb4:	b590      	push	{r4, r7, lr}
 8014bb6:	b08b      	sub	sp, #44	; 0x2c
 8014bb8:	af00      	add	r7, sp, #0
 8014bba:	60f8      	str	r0, [r7, #12]
 8014bbc:	60b9      	str	r1, [r7, #8]
 8014bbe:	603b      	str	r3, [r7, #0]
 8014bc0:	4613      	mov	r3, r2
 8014bc2:	80fb      	strh	r3, [r7, #6]
  int truncated = 0;
 8014bc4:	2300      	movs	r3, #0
 8014bc6:	627b      	str	r3, [r7, #36]	; 0x24
  union sockaddr_aligned saddr;

  LWIP_UNUSED_ARG(conn);

  LWIP_ASSERT("fromaddr != NULL", fromaddr != NULL);
 8014bc8:	68bb      	ldr	r3, [r7, #8]
 8014bca:	2b00      	cmp	r3, #0
 8014bcc:	d106      	bne.n	8014bdc <lwip_sock_make_addr+0x28>
 8014bce:	4b2b      	ldr	r3, [pc, #172]	; (8014c7c <lwip_sock_make_addr+0xc8>)
 8014bd0:	f240 4207 	movw	r2, #1031	; 0x407
 8014bd4:	492a      	ldr	r1, [pc, #168]	; (8014c80 <lwip_sock_make_addr+0xcc>)
 8014bd6:	482b      	ldr	r0, [pc, #172]	; (8014c84 <lwip_sock_make_addr+0xd0>)
 8014bd8:	f00c f9ba 	bl	8020f50 <iprintf>
  LWIP_ASSERT("from != NULL", from != NULL);
 8014bdc:	683b      	ldr	r3, [r7, #0]
 8014bde:	2b00      	cmp	r3, #0
 8014be0:	d106      	bne.n	8014bf0 <lwip_sock_make_addr+0x3c>
 8014be2:	4b26      	ldr	r3, [pc, #152]	; (8014c7c <lwip_sock_make_addr+0xc8>)
 8014be4:	f44f 6281 	mov.w	r2, #1032	; 0x408
 8014be8:	4927      	ldr	r1, [pc, #156]	; (8014c88 <lwip_sock_make_addr+0xd4>)
 8014bea:	4826      	ldr	r0, [pc, #152]	; (8014c84 <lwip_sock_make_addr+0xd0>)
 8014bec:	f00c f9b0 	bl	8020f50 <iprintf>
  LWIP_ASSERT("fromlen != NULL", fromlen != NULL);
 8014bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014bf2:	2b00      	cmp	r3, #0
 8014bf4:	d106      	bne.n	8014c04 <lwip_sock_make_addr+0x50>
 8014bf6:	4b21      	ldr	r3, [pc, #132]	; (8014c7c <lwip_sock_make_addr+0xc8>)
 8014bf8:	f240 4209 	movw	r2, #1033	; 0x409
 8014bfc:	4923      	ldr	r1, [pc, #140]	; (8014c8c <lwip_sock_make_addr+0xd8>)
 8014bfe:	4821      	ldr	r0, [pc, #132]	; (8014c84 <lwip_sock_make_addr+0xd0>)
 8014c00:	f00c f9a6 	bl	8020f50 <iprintf>
    ip4_2_ipv4_mapped_ipv6(ip_2_ip6(fromaddr), ip_2_ip4(fromaddr));
    IP_SET_TYPE(fromaddr, IPADDR_TYPE_V6);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  IPADDR_PORT_TO_SOCKADDR(&saddr, fromaddr, port);
 8014c04:	f107 0314 	add.w	r3, r7, #20
 8014c08:	2210      	movs	r2, #16
 8014c0a:	701a      	strb	r2, [r3, #0]
 8014c0c:	f107 0314 	add.w	r3, r7, #20
 8014c10:	2202      	movs	r2, #2
 8014c12:	705a      	strb	r2, [r3, #1]
 8014c14:	f107 0414 	add.w	r4, r7, #20
 8014c18:	88fb      	ldrh	r3, [r7, #6]
 8014c1a:	4618      	mov	r0, r3
 8014c1c:	f7fb f86e 	bl	800fcfc <lwip_htons>
 8014c20:	4603      	mov	r3, r0
 8014c22:	8063      	strh	r3, [r4, #2]
 8014c24:	f107 0314 	add.w	r3, r7, #20
 8014c28:	68ba      	ldr	r2, [r7, #8]
 8014c2a:	6812      	ldr	r2, [r2, #0]
 8014c2c:	605a      	str	r2, [r3, #4]
 8014c2e:	f107 0314 	add.w	r3, r7, #20
 8014c32:	3308      	adds	r3, #8
 8014c34:	2208      	movs	r2, #8
 8014c36:	2100      	movs	r1, #0
 8014c38:	4618      	mov	r0, r3
 8014c3a:	f00b fd48 	bl	80206ce <memset>
  if (*fromlen < saddr.sa.sa_len) {
 8014c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c40:	681b      	ldr	r3, [r3, #0]
 8014c42:	7d3a      	ldrb	r2, [r7, #20]
 8014c44:	4293      	cmp	r3, r2
 8014c46:	d202      	bcs.n	8014c4e <lwip_sock_make_addr+0x9a>
    truncated = 1;
 8014c48:	2301      	movs	r3, #1
 8014c4a:	627b      	str	r3, [r7, #36]	; 0x24
 8014c4c:	e008      	b.n	8014c60 <lwip_sock_make_addr+0xac>
  } else if (*fromlen > saddr.sa.sa_len) {
 8014c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c50:	681b      	ldr	r3, [r3, #0]
 8014c52:	7d3a      	ldrb	r2, [r7, #20]
 8014c54:	4293      	cmp	r3, r2
 8014c56:	d903      	bls.n	8014c60 <lwip_sock_make_addr+0xac>
    *fromlen = saddr.sa.sa_len;
 8014c58:	7d3b      	ldrb	r3, [r7, #20]
 8014c5a:	461a      	mov	r2, r3
 8014c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c5e:	601a      	str	r2, [r3, #0]
  }
  MEMCPY(from, &saddr, *fromlen);
 8014c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c62:	681a      	ldr	r2, [r3, #0]
 8014c64:	f107 0314 	add.w	r3, r7, #20
 8014c68:	4619      	mov	r1, r3
 8014c6a:	6838      	ldr	r0, [r7, #0]
 8014c6c:	f00b fd0b 	bl	8020686 <memcpy>
  return truncated;
 8014c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8014c72:	4618      	mov	r0, r3
 8014c74:	372c      	adds	r7, #44	; 0x2c
 8014c76:	46bd      	mov	sp, r7
 8014c78:	bd90      	pop	{r4, r7, pc}
 8014c7a:	bf00      	nop
 8014c7c:	08024f00 	.word	0x08024f00
 8014c80:	08025090 	.word	0x08025090
 8014c84:	08024f74 	.word	0x08024f74
 8014c88:	080250a4 	.word	0x080250a4
 8014c8c:	080250b4 	.word	0x080250b4

08014c90 <lwip_recv_tcp_from>:

#if LWIP_TCP
/* Helper function to get a tcp socket's remote address info */
static int
lwip_recv_tcp_from(struct lwip_sock *sock, struct sockaddr *from, socklen_t *fromlen, const char *dbg_fn, int dbg_s, ssize_t dbg_ret)
{
 8014c90:	b580      	push	{r7, lr}
 8014c92:	b088      	sub	sp, #32
 8014c94:	af02      	add	r7, sp, #8
 8014c96:	60f8      	str	r0, [r7, #12]
 8014c98:	60b9      	str	r1, [r7, #8]
 8014c9a:	607a      	str	r2, [r7, #4]
 8014c9c:	603b      	str	r3, [r7, #0]
  if (sock == NULL) {
 8014c9e:	68fb      	ldr	r3, [r7, #12]
 8014ca0:	2b00      	cmp	r3, #0
 8014ca2:	d101      	bne.n	8014ca8 <lwip_recv_tcp_from+0x18>
    return 0;
 8014ca4:	2300      	movs	r3, #0
 8014ca6:	e021      	b.n	8014cec <lwip_recv_tcp_from+0x5c>
  LWIP_UNUSED_ARG(dbg_fn);
  LWIP_UNUSED_ARG(dbg_s);
  LWIP_UNUSED_ARG(dbg_ret);

#if !SOCKETS_DEBUG
  if (from && fromlen)
 8014ca8:	68bb      	ldr	r3, [r7, #8]
 8014caa:	2b00      	cmp	r3, #0
 8014cac:	d01d      	beq.n	8014cea <lwip_recv_tcp_from+0x5a>
 8014cae:	687b      	ldr	r3, [r7, #4]
 8014cb0:	2b00      	cmp	r3, #0
 8014cb2:	d01a      	beq.n	8014cea <lwip_recv_tcp_from+0x5a>
#endif /* !SOCKETS_DEBUG */
  {
    /* get remote addr/port from tcp_pcb */
    u16_t port;
    ip_addr_t tmpaddr;
    netconn_getaddr(sock->conn, &tmpaddr, &port, 0);
 8014cb4:	68fb      	ldr	r3, [r7, #12]
 8014cb6:	6818      	ldr	r0, [r3, #0]
 8014cb8:	f107 0216 	add.w	r2, r7, #22
 8014cbc:	f107 0110 	add.w	r1, r7, #16
 8014cc0:	2300      	movs	r3, #0
 8014cc2:	f7f8 ff99 	bl	800dbf8 <netconn_getaddr>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("%s(%d):  addr=", dbg_fn, dbg_s));
    ip_addr_debug_print_val(SOCKETS_DEBUG, tmpaddr);
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", port, (int)dbg_ret));
    if (from && fromlen) {
 8014cc6:	68bb      	ldr	r3, [r7, #8]
 8014cc8:	2b00      	cmp	r3, #0
 8014cca:	d00e      	beq.n	8014cea <lwip_recv_tcp_from+0x5a>
 8014ccc:	687b      	ldr	r3, [r7, #4]
 8014cce:	2b00      	cmp	r3, #0
 8014cd0:	d00b      	beq.n	8014cea <lwip_recv_tcp_from+0x5a>
      return lwip_sock_make_addr(sock->conn, &tmpaddr, port, from, fromlen);
 8014cd2:	68fb      	ldr	r3, [r7, #12]
 8014cd4:	6818      	ldr	r0, [r3, #0]
 8014cd6:	8afa      	ldrh	r2, [r7, #22]
 8014cd8:	f107 0110 	add.w	r1, r7, #16
 8014cdc:	687b      	ldr	r3, [r7, #4]
 8014cde:	9300      	str	r3, [sp, #0]
 8014ce0:	68bb      	ldr	r3, [r7, #8]
 8014ce2:	f7ff ff67 	bl	8014bb4 <lwip_sock_make_addr>
 8014ce6:	4603      	mov	r3, r0
 8014ce8:	e000      	b.n	8014cec <lwip_recv_tcp_from+0x5c>
    }
  }
  return 0;
 8014cea:	2300      	movs	r3, #0
}
 8014cec:	4618      	mov	r0, r3
 8014cee:	3718      	adds	r7, #24
 8014cf0:	46bd      	mov	sp, r7
 8014cf2:	bd80      	pop	{r7, pc}

08014cf4 <lwip_recvfrom_udp_raw>:
/* Helper function to receive a netbuf from a udp or raw netconn.
 * Keeps sock->lastdata for peeking.
 */
static err_t
lwip_recvfrom_udp_raw(struct lwip_sock *sock, int flags, struct msghdr *msg, u16_t *datagram_len, int dbg_s)
{
 8014cf4:	b590      	push	{r4, r7, lr}
 8014cf6:	b08d      	sub	sp, #52	; 0x34
 8014cf8:	af02      	add	r7, sp, #8
 8014cfa:	60f8      	str	r0, [r7, #12]
 8014cfc:	60b9      	str	r1, [r7, #8]
 8014cfe:	607a      	str	r2, [r7, #4]
 8014d00:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t buflen, copylen, copied;
  int i;

  LWIP_UNUSED_ARG(dbg_s);
  LWIP_ERROR("lwip_recvfrom_udp_raw: invalid arguments", (msg->msg_iov != NULL) || (msg->msg_iovlen <= 0), return ERR_ARG;);
 8014d02:	687b      	ldr	r3, [r7, #4]
 8014d04:	689b      	ldr	r3, [r3, #8]
 8014d06:	2b00      	cmp	r3, #0
 8014d08:	d10d      	bne.n	8014d26 <lwip_recvfrom_udp_raw+0x32>
 8014d0a:	687b      	ldr	r3, [r7, #4]
 8014d0c:	68db      	ldr	r3, [r3, #12]
 8014d0e:	2b00      	cmp	r3, #0
 8014d10:	dd09      	ble.n	8014d26 <lwip_recvfrom_udp_raw+0x32>
 8014d12:	4b5e      	ldr	r3, [pc, #376]	; (8014e8c <lwip_recvfrom_udp_raw+0x198>)
 8014d14:	f240 4249 	movw	r2, #1097	; 0x449
 8014d18:	495d      	ldr	r1, [pc, #372]	; (8014e90 <lwip_recvfrom_udp_raw+0x19c>)
 8014d1a:	485e      	ldr	r0, [pc, #376]	; (8014e94 <lwip_recvfrom_udp_raw+0x1a0>)
 8014d1c:	f00c f918 	bl	8020f50 <iprintf>
 8014d20:	f06f 030f 	mvn.w	r3, #15
 8014d24:	e0ad      	b.n	8014e82 <lwip_recvfrom_udp_raw+0x18e>

  if (flags & MSG_DONTWAIT) {
 8014d26:	68bb      	ldr	r3, [r7, #8]
 8014d28:	f003 0308 	and.w	r3, r3, #8
 8014d2c:	2b00      	cmp	r3, #0
 8014d2e:	d003      	beq.n	8014d38 <lwip_recvfrom_udp_raw+0x44>
    apiflags = NETCONN_DONTBLOCK;
 8014d30:	2304      	movs	r3, #4
 8014d32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014d36:	e002      	b.n	8014d3e <lwip_recvfrom_udp_raw+0x4a>
  } else {
    apiflags = 0;
 8014d38:	2300      	movs	r3, #0
 8014d3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: top sock->lastdata=%p\n", (void *)sock->lastdata.netbuf));
  /* Check if there is data left from the last recv operation. */
  buf = sock->lastdata.netbuf;
 8014d3e:	68fb      	ldr	r3, [r7, #12]
 8014d40:	685b      	ldr	r3, [r3, #4]
 8014d42:	613b      	str	r3, [r7, #16]
  if (buf == NULL) {
 8014d44:	693b      	ldr	r3, [r7, #16]
 8014d46:	2b00      	cmp	r3, #0
 8014d48:	d11e      	bne.n	8014d88 <lwip_recvfrom_udp_raw+0x94>
    /* No data was left from the previous operation, so we try to get
        some from the network. */
    err = netconn_recv_udp_raw_netbuf_flags(sock->conn, &buf, apiflags);
 8014d4a:	68fb      	ldr	r3, [r7, #12]
 8014d4c:	681b      	ldr	r3, [r3, #0]
 8014d4e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8014d52:	f107 0110 	add.w	r1, r7, #16
 8014d56:	4618      	mov	r0, r3
 8014d58:	f7f9 f9d8 	bl	800e10c <netconn_recv_udp_raw_netbuf_flags>
 8014d5c:	4603      	mov	r3, r0
 8014d5e:	76fb      	strb	r3, [r7, #27]
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: netconn_recv err=%d, netbuf=%p\n",
                                err, (void *)buf));

    if (err != ERR_OK) {
 8014d60:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8014d64:	2b00      	cmp	r3, #0
 8014d66:	d002      	beq.n	8014d6e <lwip_recvfrom_udp_raw+0x7a>
      return err;
 8014d68:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8014d6c:	e089      	b.n	8014e82 <lwip_recvfrom_udp_raw+0x18e>
    }
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8014d6e:	693b      	ldr	r3, [r7, #16]
 8014d70:	2b00      	cmp	r3, #0
 8014d72:	d106      	bne.n	8014d82 <lwip_recvfrom_udp_raw+0x8e>
 8014d74:	4b45      	ldr	r3, [pc, #276]	; (8014e8c <lwip_recvfrom_udp_raw+0x198>)
 8014d76:	f240 425e 	movw	r2, #1118	; 0x45e
 8014d7a:	4947      	ldr	r1, [pc, #284]	; (8014e98 <lwip_recvfrom_udp_raw+0x1a4>)
 8014d7c:	4845      	ldr	r0, [pc, #276]	; (8014e94 <lwip_recvfrom_udp_raw+0x1a0>)
 8014d7e:	f00c f8e7 	bl	8020f50 <iprintf>
    sock->lastdata.netbuf = buf;
 8014d82:	693a      	ldr	r2, [r7, #16]
 8014d84:	68fb      	ldr	r3, [r7, #12]
 8014d86:	605a      	str	r2, [r3, #4]
  }
  buflen = buf->p->tot_len;
 8014d88:	693b      	ldr	r3, [r7, #16]
 8014d8a:	681b      	ldr	r3, [r3, #0]
 8014d8c:	891b      	ldrh	r3, [r3, #8]
 8014d8e:	833b      	strh	r3, [r7, #24]
  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw: buflen=%"U16_F"\n", buflen));

  copied = 0;
 8014d90:	2300      	movs	r3, #0
 8014d92:	847b      	strh	r3, [r7, #34]	; 0x22
  /* copy the pbuf payload into the iovs */
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 8014d94:	2300      	movs	r3, #0
 8014d96:	61fb      	str	r3, [r7, #28]
 8014d98:	e029      	b.n	8014dee <lwip_recvfrom_udp_raw+0xfa>
    u16_t len_left = (u16_t)(buflen - copied);
 8014d9a:	8b3a      	ldrh	r2, [r7, #24]
 8014d9c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014d9e:	1ad3      	subs	r3, r2, r3
 8014da0:	82fb      	strh	r3, [r7, #22]
    if (msg->msg_iov[i].iov_len > len_left) {
 8014da2:	687b      	ldr	r3, [r7, #4]
 8014da4:	689a      	ldr	r2, [r3, #8]
 8014da6:	69fb      	ldr	r3, [r7, #28]
 8014da8:	00db      	lsls	r3, r3, #3
 8014daa:	4413      	add	r3, r2
 8014dac:	685a      	ldr	r2, [r3, #4]
 8014dae:	8afb      	ldrh	r3, [r7, #22]
 8014db0:	429a      	cmp	r2, r3
 8014db2:	d902      	bls.n	8014dba <lwip_recvfrom_udp_raw+0xc6>
      copylen = len_left;
 8014db4:	8afb      	ldrh	r3, [r7, #22]
 8014db6:	84bb      	strh	r3, [r7, #36]	; 0x24
 8014db8:	e006      	b.n	8014dc8 <lwip_recvfrom_udp_raw+0xd4>
    } else {
      copylen = (u16_t)msg->msg_iov[i].iov_len;
 8014dba:	687b      	ldr	r3, [r7, #4]
 8014dbc:	689a      	ldr	r2, [r3, #8]
 8014dbe:	69fb      	ldr	r3, [r7, #28]
 8014dc0:	00db      	lsls	r3, r3, #3
 8014dc2:	4413      	add	r3, r2
 8014dc4:	685b      	ldr	r3, [r3, #4]
 8014dc6:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* copy the contents of the received buffer into
        the supplied memory buffer */
    pbuf_copy_partial(buf->p, (u8_t *)msg->msg_iov[i].iov_base, copylen, copied);
 8014dc8:	693b      	ldr	r3, [r7, #16]
 8014dca:	6818      	ldr	r0, [r3, #0]
 8014dcc:	687b      	ldr	r3, [r7, #4]
 8014dce:	689a      	ldr	r2, [r3, #8]
 8014dd0:	69fb      	ldr	r3, [r7, #28]
 8014dd2:	00db      	lsls	r3, r3, #3
 8014dd4:	4413      	add	r3, r2
 8014dd6:	6819      	ldr	r1, [r3, #0]
 8014dd8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014dda:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014ddc:	f7ff fb3e 	bl	801445c <pbuf_copy_partial>
    copied = (u16_t)(copied + copylen);
 8014de0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8014de2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014de4:	4413      	add	r3, r2
 8014de6:	847b      	strh	r3, [r7, #34]	; 0x22
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 8014de8:	69fb      	ldr	r3, [r7, #28]
 8014dea:	3301      	adds	r3, #1
 8014dec:	61fb      	str	r3, [r7, #28]
 8014dee:	687b      	ldr	r3, [r7, #4]
 8014df0:	68db      	ldr	r3, [r3, #12]
 8014df2:	69fa      	ldr	r2, [r7, #28]
 8014df4:	429a      	cmp	r2, r3
 8014df6:	da03      	bge.n	8014e00 <lwip_recvfrom_udp_raw+0x10c>
 8014df8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8014dfa:	8b3b      	ldrh	r3, [r7, #24]
 8014dfc:	429a      	cmp	r2, r3
 8014dfe:	d3cc      	bcc.n	8014d9a <lwip_recvfrom_udp_raw+0xa6>
  }

  /* Check to see from where the data was.*/
#if !SOCKETS_DEBUG
  if (msg->msg_name && msg->msg_namelen)
 8014e00:	687b      	ldr	r3, [r7, #4]
 8014e02:	681b      	ldr	r3, [r3, #0]
 8014e04:	2b00      	cmp	r3, #0
 8014e06:	d01a      	beq.n	8014e3e <lwip_recvfrom_udp_raw+0x14a>
 8014e08:	687b      	ldr	r3, [r7, #4]
 8014e0a:	685b      	ldr	r3, [r3, #4]
 8014e0c:	2b00      	cmp	r3, #0
 8014e0e:	d016      	beq.n	8014e3e <lwip_recvfrom_udp_raw+0x14a>
#endif /* !SOCKETS_DEBUG */
  {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw(%d):  addr=", dbg_s));
    ip_addr_debug_print_val(SOCKETS_DEBUG, *netbuf_fromaddr(buf));
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", netbuf_fromport(buf), copied));
    if (msg->msg_name && msg->msg_namelen) {
 8014e10:	687b      	ldr	r3, [r7, #4]
 8014e12:	681b      	ldr	r3, [r3, #0]
 8014e14:	2b00      	cmp	r3, #0
 8014e16:	d012      	beq.n	8014e3e <lwip_recvfrom_udp_raw+0x14a>
 8014e18:	687b      	ldr	r3, [r7, #4]
 8014e1a:	685b      	ldr	r3, [r3, #4]
 8014e1c:	2b00      	cmp	r3, #0
 8014e1e:	d00e      	beq.n	8014e3e <lwip_recvfrom_udp_raw+0x14a>
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 8014e20:	68fb      	ldr	r3, [r7, #12]
 8014e22:	6818      	ldr	r0, [r3, #0]
 8014e24:	693b      	ldr	r3, [r7, #16]
 8014e26:	f103 0108 	add.w	r1, r3, #8
 8014e2a:	693b      	ldr	r3, [r7, #16]
 8014e2c:	899a      	ldrh	r2, [r3, #12]
                          (struct sockaddr *)msg->msg_name, &msg->msg_namelen);
 8014e2e:	687b      	ldr	r3, [r7, #4]
 8014e30:	681c      	ldr	r4, [r3, #0]
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 8014e32:	687b      	ldr	r3, [r7, #4]
 8014e34:	3304      	adds	r3, #4
 8014e36:	9300      	str	r3, [sp, #0]
 8014e38:	4623      	mov	r3, r4
 8014e3a:	f7ff febb 	bl	8014bb4 <lwip_sock_make_addr>
    }
  }

  /* Initialize flag output */
  msg->msg_flags = 0;
 8014e3e:	687b      	ldr	r3, [r7, #4]
 8014e40:	2200      	movs	r2, #0
 8014e42:	619a      	str	r2, [r3, #24]

  if (msg->msg_control) {
 8014e44:	687b      	ldr	r3, [r7, #4]
 8014e46:	691b      	ldr	r3, [r3, #16]
 8014e48:	2b00      	cmp	r3, #0
 8014e4a:	d007      	beq.n	8014e5c <lwip_recvfrom_udp_raw+0x168>
    u8_t wrote_msg = 0;
 8014e4c:	2300      	movs	r3, #0
 8014e4e:	757b      	strb	r3, [r7, #21]
#endif /* LWIP_IPV4 */
      }
    }
#endif /* LWIP_NETBUF_RECVINFO */

    if (!wrote_msg) {
 8014e50:	7d7b      	ldrb	r3, [r7, #21]
 8014e52:	2b00      	cmp	r3, #0
 8014e54:	d102      	bne.n	8014e5c <lwip_recvfrom_udp_raw+0x168>
      msg->msg_controllen = 0;
 8014e56:	687b      	ldr	r3, [r7, #4]
 8014e58:	2200      	movs	r2, #0
 8014e5a:	615a      	str	r2, [r3, #20]
    }
  }

  /* If we don't peek the incoming message: zero lastdata pointer and free the netbuf */
  if ((flags & MSG_PEEK) == 0) {
 8014e5c:	68bb      	ldr	r3, [r7, #8]
 8014e5e:	f003 0301 	and.w	r3, r3, #1
 8014e62:	2b00      	cmp	r3, #0
 8014e64:	d106      	bne.n	8014e74 <lwip_recvfrom_udp_raw+0x180>
    sock->lastdata.netbuf = NULL;
 8014e66:	68fb      	ldr	r3, [r7, #12]
 8014e68:	2200      	movs	r2, #0
 8014e6a:	605a      	str	r2, [r3, #4]
    netbuf_delete(buf);
 8014e6c:	693b      	ldr	r3, [r7, #16]
 8014e6e:	4618      	mov	r0, r3
 8014e70:	f7fe f9b4 	bl	80131dc <netbuf_delete>
  }
  if (datagram_len) {
 8014e74:	683b      	ldr	r3, [r7, #0]
 8014e76:	2b00      	cmp	r3, #0
 8014e78:	d002      	beq.n	8014e80 <lwip_recvfrom_udp_raw+0x18c>
    *datagram_len = buflen;
 8014e7a:	683b      	ldr	r3, [r7, #0]
 8014e7c:	8b3a      	ldrh	r2, [r7, #24]
 8014e7e:	801a      	strh	r2, [r3, #0]
  }
  return ERR_OK;
 8014e80:	2300      	movs	r3, #0
}
 8014e82:	4618      	mov	r0, r3
 8014e84:	372c      	adds	r7, #44	; 0x2c
 8014e86:	46bd      	mov	sp, r7
 8014e88:	bd90      	pop	{r4, r7, pc}
 8014e8a:	bf00      	nop
 8014e8c:	08024f00 	.word	0x08024f00
 8014e90:	080250c4 	.word	0x080250c4
 8014e94:	08024f74 	.word	0x08024f74
 8014e98:	080250f0 	.word	0x080250f0

08014e9c <lwip_recvfrom>:

ssize_t
lwip_recvfrom(int s, void *mem, size_t len, int flags,
              struct sockaddr *from, socklen_t *fromlen)
{
 8014e9c:	b580      	push	{r7, lr}
 8014e9e:	b096      	sub	sp, #88	; 0x58
 8014ea0:	af02      	add	r7, sp, #8
 8014ea2:	60f8      	str	r0, [r7, #12]
 8014ea4:	60b9      	str	r1, [r7, #8]
 8014ea6:	607a      	str	r2, [r7, #4]
 8014ea8:	603b      	str	r3, [r7, #0]
  struct lwip_sock *sock;
  ssize_t ret;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d, %p, %"SZT_F", 0x%x, ..)\n", s, mem, len, flags));
  sock = get_socket(s);
 8014eaa:	68f8      	ldr	r0, [r7, #12]
 8014eac:	f7ff fbb8 	bl	8014620 <get_socket>
 8014eb0:	64f8      	str	r0, [r7, #76]	; 0x4c
  if (!sock) {
 8014eb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014eb4:	2b00      	cmp	r3, #0
 8014eb6:	d102      	bne.n	8014ebe <lwip_recvfrom+0x22>
    return -1;
 8014eb8:	f04f 33ff 	mov.w	r3, #4294967295
 8014ebc:	e077      	b.n	8014fae <lwip_recvfrom+0x112>
  }
#if LWIP_TCP
  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 8014ebe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014ec0:	681b      	ldr	r3, [r3, #0]
 8014ec2:	781b      	ldrb	r3, [r3, #0]
 8014ec4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014ec8:	2b10      	cmp	r3, #16
 8014eca:	d112      	bne.n	8014ef2 <lwip_recvfrom+0x56>
    ret = lwip_recv_tcp(sock, mem, len, flags);
 8014ecc:	683b      	ldr	r3, [r7, #0]
 8014ece:	687a      	ldr	r2, [r7, #4]
 8014ed0:	68b9      	ldr	r1, [r7, #8]
 8014ed2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8014ed4:	f7ff fd5e 	bl	8014994 <lwip_recv_tcp>
 8014ed8:	6478      	str	r0, [r7, #68]	; 0x44
    lwip_recv_tcp_from(sock, from, fromlen, "lwip_recvfrom", s, ret);
 8014eda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014edc:	9301      	str	r3, [sp, #4]
 8014ede:	68fb      	ldr	r3, [r7, #12]
 8014ee0:	9300      	str	r3, [sp, #0]
 8014ee2:	4b35      	ldr	r3, [pc, #212]	; (8014fb8 <lwip_recvfrom+0x11c>)
 8014ee4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8014ee6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8014ee8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8014eea:	f7ff fed1 	bl	8014c90 <lwip_recv_tcp_from>
    done_socket(sock);
    return ret;
 8014eee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014ef0:	e05d      	b.n	8014fae <lwip_recvfrom+0x112>
  } else
#endif
  {
    u16_t datagram_len = 0;
 8014ef2:	2300      	movs	r3, #0
 8014ef4:	877b      	strh	r3, [r7, #58]	; 0x3a
    struct iovec vec;
    struct msghdr msg;
    err_t err;
    vec.iov_base = mem;
 8014ef6:	68bb      	ldr	r3, [r7, #8]
 8014ef8:	633b      	str	r3, [r7, #48]	; 0x30
    vec.iov_len = len;
 8014efa:	687b      	ldr	r3, [r7, #4]
 8014efc:	637b      	str	r3, [r7, #52]	; 0x34
    msg.msg_control = NULL;
 8014efe:	2300      	movs	r3, #0
 8014f00:	627b      	str	r3, [r7, #36]	; 0x24
    msg.msg_controllen = 0;
 8014f02:	2300      	movs	r3, #0
 8014f04:	62bb      	str	r3, [r7, #40]	; 0x28
    msg.msg_flags = 0;
 8014f06:	2300      	movs	r3, #0
 8014f08:	62fb      	str	r3, [r7, #44]	; 0x2c
    msg.msg_iov = &vec;
 8014f0a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8014f0e:	61fb      	str	r3, [r7, #28]
    msg.msg_iovlen = 1;
 8014f10:	2301      	movs	r3, #1
 8014f12:	623b      	str	r3, [r7, #32]
    msg.msg_name = from;
 8014f14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014f16:	617b      	str	r3, [r7, #20]
    msg.msg_namelen = (fromlen ? *fromlen : 0);
 8014f18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014f1a:	2b00      	cmp	r3, #0
 8014f1c:	d002      	beq.n	8014f24 <lwip_recvfrom+0x88>
 8014f1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014f20:	681b      	ldr	r3, [r3, #0]
 8014f22:	e000      	b.n	8014f26 <lwip_recvfrom+0x8a>
 8014f24:	2300      	movs	r3, #0
 8014f26:	61bb      	str	r3, [r7, #24]
    err = lwip_recvfrom_udp_raw(sock, flags, &msg, &datagram_len, s);
 8014f28:	f107 013a 	add.w	r1, r7, #58	; 0x3a
 8014f2c:	f107 0214 	add.w	r2, r7, #20
 8014f30:	68fb      	ldr	r3, [r7, #12]
 8014f32:	9300      	str	r3, [sp, #0]
 8014f34:	460b      	mov	r3, r1
 8014f36:	6839      	ldr	r1, [r7, #0]
 8014f38:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8014f3a:	f7ff fedb 	bl	8014cf4 <lwip_recvfrom_udp_raw>
 8014f3e:	4603      	mov	r3, r0
 8014f40:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    if (err != ERR_OK) {
 8014f44:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 8014f48:	2b00      	cmp	r3, #0
 8014f4a:	d00e      	beq.n	8014f6a <lwip_recvfrom+0xce>
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom[UDP/RAW](%d): buf == NULL, error is \"%s\"!\n",
                                  s, lwip_strerr(err)));
      sock_set_errno(sock, err_to_errno(err));
 8014f4c:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 8014f50:	4618      	mov	r0, r3
 8014f52:	f7fa ff01 	bl	800fd58 <err_to_errno>
 8014f56:	63f8      	str	r0, [r7, #60]	; 0x3c
 8014f58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014f5a:	2b00      	cmp	r3, #0
 8014f5c:	d002      	beq.n	8014f64 <lwip_recvfrom+0xc8>
 8014f5e:	4a17      	ldr	r2, [pc, #92]	; (8014fbc <lwip_recvfrom+0x120>)
 8014f60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014f62:	6013      	str	r3, [r2, #0]
      done_socket(sock);
      return -1;
 8014f64:	f04f 33ff 	mov.w	r3, #4294967295
 8014f68:	e021      	b.n	8014fae <lwip_recvfrom+0x112>
    }
    ret = (ssize_t)LWIP_MIN(LWIP_MIN(len, datagram_len), SSIZE_MAX);
 8014f6a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014f6c:	461a      	mov	r2, r3
 8014f6e:	687b      	ldr	r3, [r7, #4]
 8014f70:	4293      	cmp	r3, r2
 8014f72:	bf28      	it	cs
 8014f74:	4613      	movcs	r3, r2
 8014f76:	4a12      	ldr	r2, [pc, #72]	; (8014fc0 <lwip_recvfrom+0x124>)
 8014f78:	4293      	cmp	r3, r2
 8014f7a:	d806      	bhi.n	8014f8a <lwip_recvfrom+0xee>
 8014f7c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014f7e:	461a      	mov	r2, r3
 8014f80:	687b      	ldr	r3, [r7, #4]
 8014f82:	4293      	cmp	r3, r2
 8014f84:	bf28      	it	cs
 8014f86:	4613      	movcs	r3, r2
 8014f88:	e001      	b.n	8014f8e <lwip_recvfrom+0xf2>
 8014f8a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8014f8e:	647b      	str	r3, [r7, #68]	; 0x44
    if (fromlen) {
 8014f90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014f92:	2b00      	cmp	r3, #0
 8014f94:	d002      	beq.n	8014f9c <lwip_recvfrom+0x100>
      *fromlen = msg.msg_namelen;
 8014f96:	69ba      	ldr	r2, [r7, #24]
 8014f98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014f9a:	601a      	str	r2, [r3, #0]
    }
  }

  sock_set_errno(sock, 0);
 8014f9c:	2300      	movs	r3, #0
 8014f9e:	643b      	str	r3, [r7, #64]	; 0x40
 8014fa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014fa2:	2b00      	cmp	r3, #0
 8014fa4:	d002      	beq.n	8014fac <lwip_recvfrom+0x110>
 8014fa6:	4a05      	ldr	r2, [pc, #20]	; (8014fbc <lwip_recvfrom+0x120>)
 8014fa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014faa:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return ret;
 8014fac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8014fae:	4618      	mov	r0, r3
 8014fb0:	3750      	adds	r7, #80	; 0x50
 8014fb2:	46bd      	mov	sp, r7
 8014fb4:	bd80      	pop	{r7, pc}
 8014fb6:	bf00      	nop
 8014fb8:	080250fc 	.word	0x080250fc
 8014fbc:	24048e74 	.word	0x24048e74
 8014fc0:	7ffffffe 	.word	0x7ffffffe

08014fc4 <lwip_recv>:
  return lwip_recvmsg(s, &msg, 0);
}

ssize_t
lwip_recv(int s, void *mem, size_t len, int flags)
{
 8014fc4:	b580      	push	{r7, lr}
 8014fc6:	b086      	sub	sp, #24
 8014fc8:	af02      	add	r7, sp, #8
 8014fca:	60f8      	str	r0, [r7, #12]
 8014fcc:	60b9      	str	r1, [r7, #8]
 8014fce:	607a      	str	r2, [r7, #4]
 8014fd0:	603b      	str	r3, [r7, #0]
  return lwip_recvfrom(s, mem, len, flags, NULL, NULL);
 8014fd2:	2300      	movs	r3, #0
 8014fd4:	9301      	str	r3, [sp, #4]
 8014fd6:	2300      	movs	r3, #0
 8014fd8:	9300      	str	r3, [sp, #0]
 8014fda:	683b      	ldr	r3, [r7, #0]
 8014fdc:	687a      	ldr	r2, [r7, #4]
 8014fde:	68b9      	ldr	r1, [r7, #8]
 8014fe0:	68f8      	ldr	r0, [r7, #12]
 8014fe2:	f7ff ff5b 	bl	8014e9c <lwip_recvfrom>
 8014fe6:	4603      	mov	r3, r0
}
 8014fe8:	4618      	mov	r0, r3
 8014fea:	3710      	adds	r7, #16
 8014fec:	46bd      	mov	sp, r7
 8014fee:	bd80      	pop	{r7, pc}

08014ff0 <lwip_send>:
#endif /* LWIP_UDP || LWIP_RAW */
}

ssize_t
lwip_send(int s, const void *data, size_t size, int flags)
{
 8014ff0:	b580      	push	{r7, lr}
 8014ff2:	b08a      	sub	sp, #40	; 0x28
 8014ff4:	af02      	add	r7, sp, #8
 8014ff6:	60f8      	str	r0, [r7, #12]
 8014ff8:	60b9      	str	r1, [r7, #8]
 8014ffa:	607a      	str	r2, [r7, #4]
 8014ffc:	603b      	str	r3, [r7, #0]
  size_t written;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d, data=%p, size=%"SZT_F", flags=0x%x)\n",
                              s, data, size, flags));

  sock = get_socket(s);
 8014ffe:	68f8      	ldr	r0, [r7, #12]
 8015000:	f7ff fb0e 	bl	8014620 <get_socket>
 8015004:	61f8      	str	r0, [r7, #28]
  if (!sock) {
 8015006:	69fb      	ldr	r3, [r7, #28]
 8015008:	2b00      	cmp	r3, #0
 801500a:	d102      	bne.n	8015012 <lwip_send+0x22>
    return -1;
 801500c:	f04f 33ff 	mov.w	r3, #4294967295
 8015010:	e046      	b.n	80150a0 <lwip_send+0xb0>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 8015012:	69fb      	ldr	r3, [r7, #28]
 8015014:	681b      	ldr	r3, [r3, #0]
 8015016:	781b      	ldrb	r3, [r3, #0]
 8015018:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801501c:	2b10      	cmp	r3, #16
 801501e:	d00b      	beq.n	8015038 <lwip_send+0x48>
#if (LWIP_UDP || LWIP_RAW)
    done_socket(sock);
    return lwip_sendto(s, data, size, flags, NULL, 0);
 8015020:	2300      	movs	r3, #0
 8015022:	9301      	str	r3, [sp, #4]
 8015024:	2300      	movs	r3, #0
 8015026:	9300      	str	r3, [sp, #0]
 8015028:	683b      	ldr	r3, [r7, #0]
 801502a:	687a      	ldr	r2, [r7, #4]
 801502c:	68b9      	ldr	r1, [r7, #8]
 801502e:	68f8      	ldr	r0, [r7, #12]
 8015030:	f000 f83c 	bl	80150ac <lwip_sendto>
 8015034:	4603      	mov	r3, r0
 8015036:	e033      	b.n	80150a0 <lwip_send+0xb0>
    return -1;
#endif /* (LWIP_UDP || LWIP_RAW) */
  }

  write_flags = (u8_t)(NETCONN_COPY |
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 8015038:	683b      	ldr	r3, [r7, #0]
 801503a:	f003 0310 	and.w	r3, r3, #16
  write_flags = (u8_t)(NETCONN_COPY |
 801503e:	2b00      	cmp	r3, #0
 8015040:	d001      	beq.n	8015046 <lwip_send+0x56>
 8015042:	2203      	movs	r2, #3
 8015044:	e000      	b.n	8015048 <lwip_send+0x58>
 8015046:	2201      	movs	r2, #1
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 8015048:	683b      	ldr	r3, [r7, #0]
 801504a:	105b      	asrs	r3, r3, #1
 801504c:	b25b      	sxtb	r3, r3
 801504e:	f003 0304 	and.w	r3, r3, #4
 8015052:	b25b      	sxtb	r3, r3
 8015054:	4313      	orrs	r3, r2
 8015056:	b25b      	sxtb	r3, r3
  write_flags = (u8_t)(NETCONN_COPY |
 8015058:	76fb      	strb	r3, [r7, #27]
                       ((flags & MSG_DONTWAIT) ? NETCONN_DONTBLOCK : 0));
  written = 0;
 801505a:	2300      	movs	r3, #0
 801505c:	613b      	str	r3, [r7, #16]
  err = netconn_write_partly(sock->conn, data, size, write_flags, &written);
 801505e:	69fb      	ldr	r3, [r7, #28]
 8015060:	6818      	ldr	r0, [r3, #0]
 8015062:	7efa      	ldrb	r2, [r7, #27]
 8015064:	f107 0310 	add.w	r3, r7, #16
 8015068:	9300      	str	r3, [sp, #0]
 801506a:	4613      	mov	r3, r2
 801506c:	687a      	ldr	r2, [r7, #4]
 801506e:	68b9      	ldr	r1, [r7, #8]
 8015070:	f7f9 f8a6 	bl	800e1c0 <netconn_write_partly>
 8015074:	4603      	mov	r3, r0
 8015076:	76bb      	strb	r3, [r7, #26]

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d) err=%d written=%"SZT_F"\n", s, err, written));
  sock_set_errno(sock, err_to_errno(err));
 8015078:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801507c:	4618      	mov	r0, r3
 801507e:	f7fa fe6b 	bl	800fd58 <err_to_errno>
 8015082:	6178      	str	r0, [r7, #20]
 8015084:	697b      	ldr	r3, [r7, #20]
 8015086:	2b00      	cmp	r3, #0
 8015088:	d002      	beq.n	8015090 <lwip_send+0xa0>
 801508a:	4a07      	ldr	r2, [pc, #28]	; (80150a8 <lwip_send+0xb8>)
 801508c:	697b      	ldr	r3, [r7, #20]
 801508e:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  /* casting 'written' to ssize_t is OK here since the netconn API limits it to SSIZE_MAX */
  return (err == ERR_OK ? (ssize_t)written : -1);
 8015090:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8015094:	2b00      	cmp	r3, #0
 8015096:	d101      	bne.n	801509c <lwip_send+0xac>
 8015098:	693b      	ldr	r3, [r7, #16]
 801509a:	e001      	b.n	80150a0 <lwip_send+0xb0>
 801509c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80150a0:	4618      	mov	r0, r3
 80150a2:	3720      	adds	r7, #32
 80150a4:	46bd      	mov	sp, r7
 80150a6:	bd80      	pop	{r7, pc}
 80150a8:	24048e74 	.word	0x24048e74

080150ac <lwip_sendto>:
}

ssize_t
lwip_sendto(int s, const void *data, size_t size, int flags,
            const struct sockaddr *to, socklen_t tolen)
{
 80150ac:	b580      	push	{r7, lr}
 80150ae:	b08e      	sub	sp, #56	; 0x38
 80150b0:	af00      	add	r7, sp, #0
 80150b2:	60f8      	str	r0, [r7, #12]
 80150b4:	60b9      	str	r1, [r7, #8]
 80150b6:	607a      	str	r2, [r7, #4]
 80150b8:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t short_size;
  u16_t remote_port;
  struct netbuf buf;

  sock = get_socket(s);
 80150ba:	68f8      	ldr	r0, [r7, #12]
 80150bc:	f7ff fab0 	bl	8014620 <get_socket>
 80150c0:	6338      	str	r0, [r7, #48]	; 0x30
  if (!sock) {
 80150c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150c4:	2b00      	cmp	r3, #0
 80150c6:	d102      	bne.n	80150ce <lwip_sendto+0x22>
    return -1;
 80150c8:	f04f 33ff 	mov.w	r3, #4294967295
 80150cc:	e093      	b.n	80151f6 <lwip_sendto+0x14a>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 80150ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150d0:	681b      	ldr	r3, [r3, #0]
 80150d2:	781b      	ldrb	r3, [r3, #0]
 80150d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80150d8:	2b10      	cmp	r3, #16
 80150da:	d107      	bne.n	80150ec <lwip_sendto+0x40>
#if LWIP_TCP
    done_socket(sock);
    return lwip_send(s, data, size, flags);
 80150dc:	683b      	ldr	r3, [r7, #0]
 80150de:	687a      	ldr	r2, [r7, #4]
 80150e0:	68b9      	ldr	r1, [r7, #8]
 80150e2:	68f8      	ldr	r0, [r7, #12]
 80150e4:	f7ff ff84 	bl	8014ff0 <lwip_send>
 80150e8:	4603      	mov	r3, r0
 80150ea:	e084      	b.n	80151f6 <lwip_sendto+0x14a>
    done_socket(sock);
    return -1;
#endif /* LWIP_TCP */
  }

  if (size > LWIP_MIN(0xFFFF, SSIZE_MAX)) {
 80150ec:	687b      	ldr	r3, [r7, #4]
 80150ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80150f2:	d30a      	bcc.n	801510a <lwip_sendto+0x5e>
    /* cannot fit into one datagram (at least for us) */
    sock_set_errno(sock, EMSGSIZE);
 80150f4:	235a      	movs	r3, #90	; 0x5a
 80150f6:	623b      	str	r3, [r7, #32]
 80150f8:	6a3b      	ldr	r3, [r7, #32]
 80150fa:	2b00      	cmp	r3, #0
 80150fc:	d002      	beq.n	8015104 <lwip_sendto+0x58>
 80150fe:	4a40      	ldr	r2, [pc, #256]	; (8015200 <lwip_sendto+0x154>)
 8015100:	6a3b      	ldr	r3, [r7, #32]
 8015102:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 8015104:	f04f 33ff 	mov.w	r3, #4294967295
 8015108:	e075      	b.n	80151f6 <lwip_sendto+0x14a>
  }
  short_size = (u16_t)size;
 801510a:	687b      	ldr	r3, [r7, #4]
 801510c:	85fb      	strh	r3, [r7, #46]	; 0x2e
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 801510e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015110:	2b00      	cmp	r3, #0
 8015112:	d102      	bne.n	801511a <lwip_sendto+0x6e>
 8015114:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015116:	2b00      	cmp	r3, #0
 8015118:	d023      	beq.n	8015162 <lwip_sendto+0xb6>
 801511a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801511c:	2b10      	cmp	r3, #16
 801511e:	d10b      	bne.n	8015138 <lwip_sendto+0x8c>
 8015120:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015122:	2b00      	cmp	r3, #0
 8015124:	d008      	beq.n	8015138 <lwip_sendto+0x8c>
 8015126:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015128:	785b      	ldrb	r3, [r3, #1]
 801512a:	2b02      	cmp	r3, #2
 801512c:	d104      	bne.n	8015138 <lwip_sendto+0x8c>
 801512e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015130:	f003 0303 	and.w	r3, r3, #3
 8015134:	2b00      	cmp	r3, #0
 8015136:	d014      	beq.n	8015162 <lwip_sendto+0xb6>
 8015138:	4b32      	ldr	r3, [pc, #200]	; (8015204 <lwip_sendto+0x158>)
 801513a:	f240 6255 	movw	r2, #1621	; 0x655
 801513e:	4932      	ldr	r1, [pc, #200]	; (8015208 <lwip_sendto+0x15c>)
 8015140:	4832      	ldr	r0, [pc, #200]	; (801520c <lwip_sendto+0x160>)
 8015142:	f00b ff05 	bl	8020f50 <iprintf>
 8015146:	f06f 000f 	mvn.w	r0, #15
 801514a:	f7fa fe05 	bl	800fd58 <err_to_errno>
 801514e:	62b8      	str	r0, [r7, #40]	; 0x28
 8015150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015152:	2b00      	cmp	r3, #0
 8015154:	d002      	beq.n	801515c <lwip_sendto+0xb0>
 8015156:	4a2a      	ldr	r2, [pc, #168]	; (8015200 <lwip_sendto+0x154>)
 8015158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801515a:	6013      	str	r3, [r2, #0]
 801515c:	f04f 33ff 	mov.w	r3, #4294967295
 8015160:	e049      	b.n	80151f6 <lwip_sendto+0x14a>
              ((to != NULL) && (IS_SOCK_ADDR_TYPE_VALID(to) && IS_SOCK_ADDR_ALIGNED(to))))),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(tolen);

  /* initialize a buffer */
  buf.p = buf.ptr = NULL;
 8015162:	2300      	movs	r3, #0
 8015164:	617b      	str	r3, [r7, #20]
 8015166:	697b      	ldr	r3, [r7, #20]
 8015168:	613b      	str	r3, [r7, #16]
#if LWIP_CHECKSUM_ON_COPY
  buf.flags = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
  if (to) {
 801516a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801516c:	2b00      	cmp	r3, #0
 801516e:	d00a      	beq.n	8015186 <lwip_sendto+0xda>
    SOCKADDR_TO_IPADDR_PORT(to, &buf.addr, remote_port);
 8015170:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015172:	685b      	ldr	r3, [r3, #4]
 8015174:	61bb      	str	r3, [r7, #24]
 8015176:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015178:	885b      	ldrh	r3, [r3, #2]
 801517a:	4618      	mov	r0, r3
 801517c:	f7fa fdbe 	bl	800fcfc <lwip_htons>
 8015180:	4603      	mov	r3, r0
 8015182:	86bb      	strh	r3, [r7, #52]	; 0x34
 8015184:	e003      	b.n	801518e <lwip_sendto+0xe2>
  } else {
    remote_port = 0;
 8015186:	2300      	movs	r3, #0
 8015188:	86bb      	strh	r3, [r7, #52]	; 0x34
    ip_addr_set_any(NETCONNTYPE_ISIPV6(netconn_type(sock->conn)), &buf.addr);
 801518a:	2300      	movs	r3, #0
 801518c:	61bb      	str	r3, [r7, #24]
  }
  netbuf_fromport(&buf) = remote_port;
 801518e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8015190:	83bb      	strh	r3, [r7, #28]
      MEMCPY(buf.p->payload, data, short_size);
    }
    err = ERR_OK;
  }
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  err = netbuf_ref(&buf, data, short_size);
 8015192:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8015194:	f107 0310 	add.w	r3, r7, #16
 8015198:	68b9      	ldr	r1, [r7, #8]
 801519a:	4618      	mov	r0, r3
 801519c:	f7fe f866 	bl	801326c <netbuf_ref>
 80151a0:	4603      	mov	r3, r0
 80151a2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (err == ERR_OK) {
 80151a6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80151aa:	2b00      	cmp	r3, #0
 80151ac:	d10a      	bne.n	80151c4 <lwip_sendto+0x118>
      IP_SET_TYPE_VAL(buf.addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    /* send the data */
    err = netconn_send(sock->conn, &buf);
 80151ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151b0:	681b      	ldr	r3, [r3, #0]
 80151b2:	f107 0210 	add.w	r2, r7, #16
 80151b6:	4611      	mov	r1, r2
 80151b8:	4618      	mov	r0, r3
 80151ba:	f7f8 ffd3 	bl	800e164 <netconn_send>
 80151be:	4603      	mov	r3, r0
 80151c0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }

  /* deallocated the buffer */
  netbuf_free(&buf);
 80151c4:	f107 0310 	add.w	r3, r7, #16
 80151c8:	4618      	mov	r0, r3
 80151ca:	f7fe f827 	bl	801321c <netbuf_free>

  sock_set_errno(sock, err_to_errno(err));
 80151ce:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80151d2:	4618      	mov	r0, r3
 80151d4:	f7fa fdc0 	bl	800fd58 <err_to_errno>
 80151d8:	6278      	str	r0, [r7, #36]	; 0x24
 80151da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151dc:	2b00      	cmp	r3, #0
 80151de:	d002      	beq.n	80151e6 <lwip_sendto+0x13a>
 80151e0:	4a07      	ldr	r2, [pc, #28]	; (8015200 <lwip_sendto+0x154>)
 80151e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151e4:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return (err == ERR_OK ? short_size : -1);
 80151e6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80151ea:	2b00      	cmp	r3, #0
 80151ec:	d101      	bne.n	80151f2 <lwip_sendto+0x146>
 80151ee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80151f0:	e001      	b.n	80151f6 <lwip_sendto+0x14a>
 80151f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80151f6:	4618      	mov	r0, r3
 80151f8:	3738      	adds	r7, #56	; 0x38
 80151fa:	46bd      	mov	sp, r7
 80151fc:	bd80      	pop	{r7, pc}
 80151fe:	bf00      	nop
 8015200:	24048e74 	.word	0x24048e74
 8015204:	08024f00 	.word	0x08024f00
 8015208:	08025200 	.word	0x08025200
 801520c:	08024f74 	.word	0x08024f74

08015210 <lwip_socket>:

int
lwip_socket(int domain, int type, int protocol)
{
 8015210:	b580      	push	{r7, lr}
 8015212:	b086      	sub	sp, #24
 8015214:	af00      	add	r7, sp, #0
 8015216:	60f8      	str	r0, [r7, #12]
 8015218:	60b9      	str	r1, [r7, #8]
 801521a:	607a      	str	r2, [r7, #4]
  int i;

  LWIP_UNUSED_ARG(domain); /* @todo: check this */

  /* create a netconn */
  switch (type) {
 801521c:	68bb      	ldr	r3, [r7, #8]
 801521e:	2b02      	cmp	r3, #2
 8015220:	d00d      	beq.n	801523e <lwip_socket+0x2e>
 8015222:	2b03      	cmp	r3, #3
 8015224:	d002      	beq.n	801522c <lwip_socket+0x1c>
 8015226:	2b01      	cmp	r3, #1
 8015228:	d016      	beq.n	8015258 <lwip_socket+0x48>
 801522a:	e01c      	b.n	8015266 <lwip_socket+0x56>
    case SOCK_RAW:
      conn = netconn_new_with_proto_and_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_RAW),
 801522c:	687b      	ldr	r3, [r7, #4]
 801522e:	b2db      	uxtb	r3, r3
 8015230:	4a21      	ldr	r2, [pc, #132]	; (80152b8 <lwip_socket+0xa8>)
 8015232:	4619      	mov	r1, r3
 8015234:	2040      	movs	r0, #64	; 0x40
 8015236:	f7f8 fc25 	bl	800da84 <netconn_new_with_proto_and_callback>
 801523a:	6178      	str	r0, [r7, #20]
             (u8_t)protocol, DEFAULT_SOCKET_EVENTCB);
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_RAW, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 801523c:	e019      	b.n	8015272 <lwip_socket+0x62>
    case SOCK_DGRAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain,
 801523e:	687b      	ldr	r3, [r7, #4]
 8015240:	2b88      	cmp	r3, #136	; 0x88
 8015242:	d101      	bne.n	8015248 <lwip_socket+0x38>
 8015244:	2321      	movs	r3, #33	; 0x21
 8015246:	e000      	b.n	801524a <lwip_socket+0x3a>
 8015248:	2320      	movs	r3, #32
 801524a:	4a1b      	ldr	r2, [pc, #108]	; (80152b8 <lwip_socket+0xa8>)
 801524c:	2100      	movs	r1, #0
 801524e:	4618      	mov	r0, r3
 8015250:	f7f8 fc18 	bl	800da84 <netconn_new_with_proto_and_callback>
 8015254:	6178      	str	r0, [r7, #20]
      if (conn) {
        /* netconn layer enables pktinfo by default, sockets default to off */
        conn->flags &= ~NETCONN_FLAG_PKTINFO;
      }
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 8015256:	e00c      	b.n	8015272 <lwip_socket+0x62>
    case SOCK_STREAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_TCP), DEFAULT_SOCKET_EVENTCB);
 8015258:	4a17      	ldr	r2, [pc, #92]	; (80152b8 <lwip_socket+0xa8>)
 801525a:	2100      	movs	r1, #0
 801525c:	2010      	movs	r0, #16
 801525e:	f7f8 fc11 	bl	800da84 <netconn_new_with_proto_and_callback>
 8015262:	6178      	str	r0, [r7, #20]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_STREAM, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 8015264:	e005      	b.n	8015272 <lwip_socket+0x62>
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%d, %d/UNKNOWN, %d) = -1\n",
                                  domain, type, protocol));
      set_errno(EINVAL);
 8015266:	4b15      	ldr	r3, [pc, #84]	; (80152bc <lwip_socket+0xac>)
 8015268:	2216      	movs	r2, #22
 801526a:	601a      	str	r2, [r3, #0]
      return -1;
 801526c:	f04f 33ff 	mov.w	r3, #4294967295
 8015270:	e01e      	b.n	80152b0 <lwip_socket+0xa0>
  }

  if (!conn) {
 8015272:	697b      	ldr	r3, [r7, #20]
 8015274:	2b00      	cmp	r3, #0
 8015276:	d105      	bne.n	8015284 <lwip_socket+0x74>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("-1 / ENOBUFS (could not create netconn)\n"));
    set_errno(ENOBUFS);
 8015278:	4b10      	ldr	r3, [pc, #64]	; (80152bc <lwip_socket+0xac>)
 801527a:	2269      	movs	r2, #105	; 0x69
 801527c:	601a      	str	r2, [r3, #0]
    return -1;
 801527e:	f04f 33ff 	mov.w	r3, #4294967295
 8015282:	e015      	b.n	80152b0 <lwip_socket+0xa0>
  }

  i = alloc_socket(conn, 0);
 8015284:	2100      	movs	r1, #0
 8015286:	6978      	ldr	r0, [r7, #20]
 8015288:	f7ff f9e2 	bl	8014650 <alloc_socket>
 801528c:	6138      	str	r0, [r7, #16]

  if (i == -1) {
 801528e:	693b      	ldr	r3, [r7, #16]
 8015290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015294:	d108      	bne.n	80152a8 <lwip_socket+0x98>
    netconn_delete(conn);
 8015296:	6978      	ldr	r0, [r7, #20]
 8015298:	f7f8 fc92 	bl	800dbc0 <netconn_delete>
    set_errno(ENFILE);
 801529c:	4b07      	ldr	r3, [pc, #28]	; (80152bc <lwip_socket+0xac>)
 801529e:	2217      	movs	r2, #23
 80152a0:	601a      	str	r2, [r3, #0]
    return -1;
 80152a2:	f04f 33ff 	mov.w	r3, #4294967295
 80152a6:	e003      	b.n	80152b0 <lwip_socket+0xa0>
  }
  conn->socket = i;
 80152a8:	697b      	ldr	r3, [r7, #20]
 80152aa:	693a      	ldr	r2, [r7, #16]
 80152ac:	619a      	str	r2, [r3, #24]
  done_socket(&sockets[i - LWIP_SOCKET_OFFSET]);
  LWIP_DEBUGF(SOCKETS_DEBUG, ("%d\n", i));
  set_errno(0);
  return i;
 80152ae:	693b      	ldr	r3, [r7, #16]
}
 80152b0:	4618      	mov	r0, r3
 80152b2:	3718      	adds	r7, #24
 80152b4:	46bd      	mov	sp, r7
 80152b6:	bd80      	pop	{r7, pc}
 80152b8:	08015349 	.word	0x08015349
 80152bc:	24048e74 	.word	0x24048e74

080152c0 <lwip_poll_should_wake>:
 * Check whether event_callback should wake up a thread waiting in
 * lwip_poll.
 */
static int
lwip_poll_should_wake(const struct lwip_select_cb *scb, int fd, int has_recvevent, int has_sendevent, int has_errevent)
{
 80152c0:	b480      	push	{r7}
 80152c2:	b087      	sub	sp, #28
 80152c4:	af00      	add	r7, sp, #0
 80152c6:	60f8      	str	r0, [r7, #12]
 80152c8:	60b9      	str	r1, [r7, #8]
 80152ca:	607a      	str	r2, [r7, #4]
 80152cc:	603b      	str	r3, [r7, #0]
  nfds_t fdi;
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 80152ce:	2300      	movs	r3, #0
 80152d0:	617b      	str	r3, [r7, #20]
 80152d2:	e02c      	b.n	801532e <lwip_poll_should_wake+0x6e>
    const struct pollfd *pollfd = &scb->poll_fds[fdi];
 80152d4:	68fb      	ldr	r3, [r7, #12]
 80152d6:	695a      	ldr	r2, [r3, #20]
 80152d8:	697b      	ldr	r3, [r7, #20]
 80152da:	00db      	lsls	r3, r3, #3
 80152dc:	4413      	add	r3, r2
 80152de:	613b      	str	r3, [r7, #16]
    if (pollfd->fd == fd) {
 80152e0:	693b      	ldr	r3, [r7, #16]
 80152e2:	681b      	ldr	r3, [r3, #0]
 80152e4:	68ba      	ldr	r2, [r7, #8]
 80152e6:	429a      	cmp	r2, r3
 80152e8:	d11e      	bne.n	8015328 <lwip_poll_should_wake+0x68>
      /* Do not update pollfd->revents right here;
         that would be a data race because lwip_pollscan
         accesses revents without protecting. */
      if (has_recvevent && (pollfd->events & POLLIN) != 0) {
 80152ea:	687b      	ldr	r3, [r7, #4]
 80152ec:	2b00      	cmp	r3, #0
 80152ee:	d009      	beq.n	8015304 <lwip_poll_should_wake+0x44>
 80152f0:	693b      	ldr	r3, [r7, #16]
 80152f2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80152f6:	b29b      	uxth	r3, r3
 80152f8:	f003 0301 	and.w	r3, r3, #1
 80152fc:	2b00      	cmp	r3, #0
 80152fe:	d001      	beq.n	8015304 <lwip_poll_should_wake+0x44>
        return 1;
 8015300:	2301      	movs	r3, #1
 8015302:	e01a      	b.n	801533a <lwip_poll_should_wake+0x7a>
      }
      if (has_sendevent && (pollfd->events & POLLOUT) != 0) {
 8015304:	683b      	ldr	r3, [r7, #0]
 8015306:	2b00      	cmp	r3, #0
 8015308:	d009      	beq.n	801531e <lwip_poll_should_wake+0x5e>
 801530a:	693b      	ldr	r3, [r7, #16]
 801530c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015310:	b29b      	uxth	r3, r3
 8015312:	f003 0302 	and.w	r3, r3, #2
 8015316:	2b00      	cmp	r3, #0
 8015318:	d001      	beq.n	801531e <lwip_poll_should_wake+0x5e>
        return 1;
 801531a:	2301      	movs	r3, #1
 801531c:	e00d      	b.n	801533a <lwip_poll_should_wake+0x7a>
      }
      if (has_errevent) {
 801531e:	6a3b      	ldr	r3, [r7, #32]
 8015320:	2b00      	cmp	r3, #0
 8015322:	d001      	beq.n	8015328 <lwip_poll_should_wake+0x68>
        /* POLLERR is output only. */
        return 1;
 8015324:	2301      	movs	r3, #1
 8015326:	e008      	b.n	801533a <lwip_poll_should_wake+0x7a>
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 8015328:	697b      	ldr	r3, [r7, #20]
 801532a:	3301      	adds	r3, #1
 801532c:	617b      	str	r3, [r7, #20]
 801532e:	68fb      	ldr	r3, [r7, #12]
 8015330:	699b      	ldr	r3, [r3, #24]
 8015332:	697a      	ldr	r2, [r7, #20]
 8015334:	429a      	cmp	r2, r3
 8015336:	d3cd      	bcc.n	80152d4 <lwip_poll_should_wake+0x14>
      }
    }
  }
  return 0;
 8015338:	2300      	movs	r3, #0
}
 801533a:	4618      	mov	r0, r3
 801533c:	371c      	adds	r7, #28
 801533e:	46bd      	mov	sp, r7
 8015340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015344:	4770      	bx	lr
	...

08015348 <event_callback>:
 *   NETCONN_EVT_ERROR
 * This requirement will be asserted in select_check_waiters()
 */
static void
event_callback(struct netconn *conn, enum netconn_evt evt, u16_t len)
{
 8015348:	b580      	push	{r7, lr}
 801534a:	b08a      	sub	sp, #40	; 0x28
 801534c:	af00      	add	r7, sp, #0
 801534e:	6078      	str	r0, [r7, #4]
 8015350:	460b      	mov	r3, r1
 8015352:	70fb      	strb	r3, [r7, #3]
 8015354:	4613      	mov	r3, r2
 8015356:	803b      	strh	r3, [r7, #0]
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_UNUSED_ARG(len);

  /* Get socket */
  if (conn) {
 8015358:	687b      	ldr	r3, [r7, #4]
 801535a:	2b00      	cmp	r3, #0
 801535c:	f000 80a4 	beq.w	80154a8 <event_callback+0x160>
    s = conn->socket;
 8015360:	687b      	ldr	r3, [r7, #4]
 8015362:	699b      	ldr	r3, [r3, #24]
 8015364:	627b      	str	r3, [r7, #36]	; 0x24
    if (s < 0) {
 8015366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015368:	2b00      	cmp	r3, #0
 801536a:	da18      	bge.n	801539e <event_callback+0x56>
      /* Data comes in right away after an accept, even though
       * the server task might not have created a new socket yet.
       * Just count down (or up) if that's the case and we
       * will use the data later. Note that only receive events
       * can happen before the new socket is set up. */
      SYS_ARCH_PROTECT(lev);
 801536c:	f000 fbb6 	bl	8015adc <sys_arch_protect>
 8015370:	61f8      	str	r0, [r7, #28]
      if (conn->socket < 0) {
 8015372:	687b      	ldr	r3, [r7, #4]
 8015374:	699b      	ldr	r3, [r3, #24]
 8015376:	2b00      	cmp	r3, #0
 8015378:	da0b      	bge.n	8015392 <event_callback+0x4a>
        if (evt == NETCONN_EVT_RCVPLUS) {
 801537a:	78fb      	ldrb	r3, [r7, #3]
 801537c:	2b00      	cmp	r3, #0
 801537e:	d104      	bne.n	801538a <event_callback+0x42>
          /* conn->socket is -1 on initialization
             lwip_accept adjusts sock->recvevent if conn->socket < -1 */
          conn->socket--;
 8015380:	687b      	ldr	r3, [r7, #4]
 8015382:	699b      	ldr	r3, [r3, #24]
 8015384:	1e5a      	subs	r2, r3, #1
 8015386:	687b      	ldr	r3, [r7, #4]
 8015388:	619a      	str	r2, [r3, #24]
        }
        SYS_ARCH_UNPROTECT(lev);
 801538a:	69f8      	ldr	r0, [r7, #28]
 801538c:	f000 fbb4 	bl	8015af8 <sys_arch_unprotect>
        return;
 8015390:	e08d      	b.n	80154ae <event_callback+0x166>
      }
      s = conn->socket;
 8015392:	687b      	ldr	r3, [r7, #4]
 8015394:	699b      	ldr	r3, [r3, #24]
 8015396:	627b      	str	r3, [r7, #36]	; 0x24
      SYS_ARCH_UNPROTECT(lev);
 8015398:	69f8      	ldr	r0, [r7, #28]
 801539a:	f000 fbad 	bl	8015af8 <sys_arch_unprotect>
    }

    sock = get_socket(s);
 801539e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80153a0:	f7ff f93e 	bl	8014620 <get_socket>
 80153a4:	61b8      	str	r0, [r7, #24]
    if (!sock) {
 80153a6:	69bb      	ldr	r3, [r7, #24]
 80153a8:	2b00      	cmp	r3, #0
 80153aa:	d07f      	beq.n	80154ac <event_callback+0x164>
    }
  } else {
    return;
  }

  check_waiters = 1;
 80153ac:	2301      	movs	r3, #1
 80153ae:	623b      	str	r3, [r7, #32]
  SYS_ARCH_PROTECT(lev);
 80153b0:	f000 fb94 	bl	8015adc <sys_arch_protect>
 80153b4:	61f8      	str	r0, [r7, #28]
  /* Set event as required */
  switch (evt) {
 80153b6:	78fb      	ldrb	r3, [r7, #3]
 80153b8:	2b04      	cmp	r3, #4
 80153ba:	d83e      	bhi.n	801543a <event_callback+0xf2>
 80153bc:	a201      	add	r2, pc, #4	; (adr r2, 80153c4 <event_callback+0x7c>)
 80153be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80153c2:	bf00      	nop
 80153c4:	080153d9 	.word	0x080153d9
 80153c8:	080153fb 	.word	0x080153fb
 80153cc:	08015413 	.word	0x08015413
 80153d0:	08015427 	.word	0x08015427
 80153d4:	08015433 	.word	0x08015433
    case NETCONN_EVT_RCVPLUS:
      sock->rcvevent++;
 80153d8:	69bb      	ldr	r3, [r7, #24]
 80153da:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80153de:	b29b      	uxth	r3, r3
 80153e0:	3301      	adds	r3, #1
 80153e2:	b29b      	uxth	r3, r3
 80153e4:	b21a      	sxth	r2, r3
 80153e6:	69bb      	ldr	r3, [r7, #24]
 80153e8:	811a      	strh	r2, [r3, #8]
      if (sock->rcvevent > 1) {
 80153ea:	69bb      	ldr	r3, [r7, #24]
 80153ec:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80153f0:	2b01      	cmp	r3, #1
 80153f2:	dd2a      	ble.n	801544a <event_callback+0x102>
        check_waiters = 0;
 80153f4:	2300      	movs	r3, #0
 80153f6:	623b      	str	r3, [r7, #32]
      }
      break;
 80153f8:	e027      	b.n	801544a <event_callback+0x102>
    case NETCONN_EVT_RCVMINUS:
      sock->rcvevent--;
 80153fa:	69bb      	ldr	r3, [r7, #24]
 80153fc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8015400:	b29b      	uxth	r3, r3
 8015402:	3b01      	subs	r3, #1
 8015404:	b29b      	uxth	r3, r3
 8015406:	b21a      	sxth	r2, r3
 8015408:	69bb      	ldr	r3, [r7, #24]
 801540a:	811a      	strh	r2, [r3, #8]
      check_waiters = 0;
 801540c:	2300      	movs	r3, #0
 801540e:	623b      	str	r3, [r7, #32]
      break;
 8015410:	e01c      	b.n	801544c <event_callback+0x104>
    case NETCONN_EVT_SENDPLUS:
      if (sock->sendevent) {
 8015412:	69bb      	ldr	r3, [r7, #24]
 8015414:	895b      	ldrh	r3, [r3, #10]
 8015416:	2b00      	cmp	r3, #0
 8015418:	d001      	beq.n	801541e <event_callback+0xd6>
        check_waiters = 0;
 801541a:	2300      	movs	r3, #0
 801541c:	623b      	str	r3, [r7, #32]
      }
      sock->sendevent = 1;
 801541e:	69bb      	ldr	r3, [r7, #24]
 8015420:	2201      	movs	r2, #1
 8015422:	815a      	strh	r2, [r3, #10]
      break;
 8015424:	e012      	b.n	801544c <event_callback+0x104>
    case NETCONN_EVT_SENDMINUS:
      sock->sendevent = 0;
 8015426:	69bb      	ldr	r3, [r7, #24]
 8015428:	2200      	movs	r2, #0
 801542a:	815a      	strh	r2, [r3, #10]
      check_waiters = 0;
 801542c:	2300      	movs	r3, #0
 801542e:	623b      	str	r3, [r7, #32]
      break;
 8015430:	e00c      	b.n	801544c <event_callback+0x104>
    case NETCONN_EVT_ERROR:
      sock->errevent = 1;
 8015432:	69bb      	ldr	r3, [r7, #24]
 8015434:	2201      	movs	r2, #1
 8015436:	819a      	strh	r2, [r3, #12]
      break;
 8015438:	e008      	b.n	801544c <event_callback+0x104>
    default:
      LWIP_ASSERT("unknown event", 0);
 801543a:	4b1e      	ldr	r3, [pc, #120]	; (80154b4 <event_callback+0x16c>)
 801543c:	f44f 621f 	mov.w	r2, #2544	; 0x9f0
 8015440:	491d      	ldr	r1, [pc, #116]	; (80154b8 <event_callback+0x170>)
 8015442:	481e      	ldr	r0, [pc, #120]	; (80154bc <event_callback+0x174>)
 8015444:	f00b fd84 	bl	8020f50 <iprintf>
      break;
 8015448:	e000      	b.n	801544c <event_callback+0x104>
      break;
 801544a:	bf00      	nop
  }

  if (sock->select_waiting && check_waiters) {
 801544c:	69bb      	ldr	r3, [r7, #24]
 801544e:	7b9b      	ldrb	r3, [r3, #14]
 8015450:	2b00      	cmp	r3, #0
 8015452:	d025      	beq.n	80154a0 <event_callback+0x158>
 8015454:	6a3b      	ldr	r3, [r7, #32]
 8015456:	2b00      	cmp	r3, #0
 8015458:	d022      	beq.n	80154a0 <event_callback+0x158>
    /* Save which events are active */
    int has_recvevent, has_sendevent, has_errevent;
    has_recvevent = sock->rcvevent > 0;
 801545a:	69bb      	ldr	r3, [r7, #24]
 801545c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8015460:	2b00      	cmp	r3, #0
 8015462:	bfcc      	ite	gt
 8015464:	2301      	movgt	r3, #1
 8015466:	2300      	movle	r3, #0
 8015468:	b2db      	uxtb	r3, r3
 801546a:	617b      	str	r3, [r7, #20]
    has_sendevent = sock->sendevent != 0;
 801546c:	69bb      	ldr	r3, [r7, #24]
 801546e:	895b      	ldrh	r3, [r3, #10]
 8015470:	2b00      	cmp	r3, #0
 8015472:	bf14      	ite	ne
 8015474:	2301      	movne	r3, #1
 8015476:	2300      	moveq	r3, #0
 8015478:	b2db      	uxtb	r3, r3
 801547a:	613b      	str	r3, [r7, #16]
    has_errevent = sock->errevent != 0;
 801547c:	69bb      	ldr	r3, [r7, #24]
 801547e:	899b      	ldrh	r3, [r3, #12]
 8015480:	2b00      	cmp	r3, #0
 8015482:	bf14      	ite	ne
 8015484:	2301      	movne	r3, #1
 8015486:	2300      	moveq	r3, #0
 8015488:	b2db      	uxtb	r3, r3
 801548a:	60fb      	str	r3, [r7, #12]
    SYS_ARCH_UNPROTECT(lev);
 801548c:	69f8      	ldr	r0, [r7, #28]
 801548e:	f000 fb33 	bl	8015af8 <sys_arch_unprotect>
    /* Check any select calls waiting on this socket */
    select_check_waiters(s, has_recvevent, has_sendevent, has_errevent);
 8015492:	68fb      	ldr	r3, [r7, #12]
 8015494:	693a      	ldr	r2, [r7, #16]
 8015496:	6979      	ldr	r1, [r7, #20]
 8015498:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801549a:	f000 f811 	bl	80154c0 <select_check_waiters>
  if (sock->select_waiting && check_waiters) {
 801549e:	e006      	b.n	80154ae <event_callback+0x166>
  } else {
    SYS_ARCH_UNPROTECT(lev);
 80154a0:	69f8      	ldr	r0, [r7, #28]
 80154a2:	f000 fb29 	bl	8015af8 <sys_arch_unprotect>
 80154a6:	e002      	b.n	80154ae <event_callback+0x166>
    return;
 80154a8:	bf00      	nop
 80154aa:	e000      	b.n	80154ae <event_callback+0x166>
      return;
 80154ac:	bf00      	nop
  }
  done_socket(sock);
}
 80154ae:	3728      	adds	r7, #40	; 0x28
 80154b0:	46bd      	mov	sp, r7
 80154b2:	bd80      	pop	{r7, pc}
 80154b4:	08024f00 	.word	0x08024f00
 80154b8:	0802529c 	.word	0x0802529c
 80154bc:	08024f74 	.word	0x08024f74

080154c0 <select_check_waiters>:
 * of the loop, thus creating a possibility where a thread could modify the
 * select_cb_list during our UNPROTECT/PROTECT. We use a generational counter to
 * detect this change and restart the list walk. The list is expected to be small
 */
static void select_check_waiters(int s, int has_recvevent, int has_sendevent, int has_errevent)
{
 80154c0:	b580      	push	{r7, lr}
 80154c2:	b088      	sub	sp, #32
 80154c4:	af02      	add	r7, sp, #8
 80154c6:	60f8      	str	r0, [r7, #12]
 80154c8:	60b9      	str	r1, [r7, #8]
 80154ca:	607a      	str	r2, [r7, #4]
 80154cc:	603b      	str	r3, [r7, #0]
  SYS_ARCH_PROTECT(lev);
again:
  /* remember the state of select_cb_list to detect changes */
  last_select_cb_ctr = select_cb_ctr;
#endif /* !LWIP_TCPIP_CORE_LOCKING */
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 80154ce:	4b3d      	ldr	r3, [pc, #244]	; (80155c4 <select_check_waiters+0x104>)
 80154d0:	681b      	ldr	r3, [r3, #0]
 80154d2:	617b      	str	r3, [r7, #20]
 80154d4:	e06f      	b.n	80155b6 <select_check_waiters+0xf6>
    if (scb->sem_signalled == 0) {
 80154d6:	697b      	ldr	r3, [r7, #20]
 80154d8:	69db      	ldr	r3, [r3, #28]
 80154da:	2b00      	cmp	r3, #0
 80154dc:	d168      	bne.n	80155b0 <select_check_waiters+0xf0>
      /* semaphore not signalled yet */
      int do_signal = 0;
 80154de:	2300      	movs	r3, #0
 80154e0:	613b      	str	r3, [r7, #16]
#if LWIP_SOCKET_POLL
      if (scb->poll_fds != NULL) {
 80154e2:	697b      	ldr	r3, [r7, #20]
 80154e4:	695b      	ldr	r3, [r3, #20]
 80154e6:	2b00      	cmp	r3, #0
 80154e8:	d009      	beq.n	80154fe <select_check_waiters+0x3e>
        do_signal = lwip_poll_should_wake(scb, s, has_recvevent, has_sendevent, has_errevent);
 80154ea:	683b      	ldr	r3, [r7, #0]
 80154ec:	9300      	str	r3, [sp, #0]
 80154ee:	687b      	ldr	r3, [r7, #4]
 80154f0:	68ba      	ldr	r2, [r7, #8]
 80154f2:	68f9      	ldr	r1, [r7, #12]
 80154f4:	6978      	ldr	r0, [r7, #20]
 80154f6:	f7ff fee3 	bl	80152c0 <lwip_poll_should_wake>
 80154fa:	6138      	str	r0, [r7, #16]
 80154fc:	e04d      	b.n	801559a <select_check_waiters+0xda>
      else
#endif /* LWIP_SOCKET_SELECT && LWIP_SOCKET_POLL */
#if LWIP_SOCKET_SELECT
      {
        /* Test this select call for our socket */
        if (has_recvevent) {
 80154fe:	68bb      	ldr	r3, [r7, #8]
 8015500:	2b00      	cmp	r3, #0
 8015502:	d014      	beq.n	801552e <select_check_waiters+0x6e>
          if (scb->readset && FD_ISSET(s, scb->readset)) {
 8015504:	697b      	ldr	r3, [r7, #20]
 8015506:	689b      	ldr	r3, [r3, #8]
 8015508:	2b00      	cmp	r3, #0
 801550a:	d010      	beq.n	801552e <select_check_waiters+0x6e>
 801550c:	697b      	ldr	r3, [r7, #20]
 801550e:	689b      	ldr	r3, [r3, #8]
 8015510:	68fa      	ldr	r2, [r7, #12]
 8015512:	0952      	lsrs	r2, r2, #5
 8015514:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015518:	68fa      	ldr	r2, [r7, #12]
 801551a:	f002 021f 	and.w	r2, r2, #31
 801551e:	2101      	movs	r1, #1
 8015520:	fa01 f202 	lsl.w	r2, r1, r2
 8015524:	4013      	ands	r3, r2
 8015526:	2b00      	cmp	r3, #0
 8015528:	d001      	beq.n	801552e <select_check_waiters+0x6e>
            do_signal = 1;
 801552a:	2301      	movs	r3, #1
 801552c:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_sendevent) {
 801552e:	687b      	ldr	r3, [r7, #4]
 8015530:	2b00      	cmp	r3, #0
 8015532:	d017      	beq.n	8015564 <select_check_waiters+0xa4>
          if (!do_signal && scb->writeset && FD_ISSET(s, scb->writeset)) {
 8015534:	693b      	ldr	r3, [r7, #16]
 8015536:	2b00      	cmp	r3, #0
 8015538:	d114      	bne.n	8015564 <select_check_waiters+0xa4>
 801553a:	697b      	ldr	r3, [r7, #20]
 801553c:	68db      	ldr	r3, [r3, #12]
 801553e:	2b00      	cmp	r3, #0
 8015540:	d010      	beq.n	8015564 <select_check_waiters+0xa4>
 8015542:	697b      	ldr	r3, [r7, #20]
 8015544:	68db      	ldr	r3, [r3, #12]
 8015546:	68fa      	ldr	r2, [r7, #12]
 8015548:	0952      	lsrs	r2, r2, #5
 801554a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801554e:	68fa      	ldr	r2, [r7, #12]
 8015550:	f002 021f 	and.w	r2, r2, #31
 8015554:	2101      	movs	r1, #1
 8015556:	fa01 f202 	lsl.w	r2, r1, r2
 801555a:	4013      	ands	r3, r2
 801555c:	2b00      	cmp	r3, #0
 801555e:	d001      	beq.n	8015564 <select_check_waiters+0xa4>
            do_signal = 1;
 8015560:	2301      	movs	r3, #1
 8015562:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_errevent) {
 8015564:	683b      	ldr	r3, [r7, #0]
 8015566:	2b00      	cmp	r3, #0
 8015568:	d017      	beq.n	801559a <select_check_waiters+0xda>
          if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
 801556a:	693b      	ldr	r3, [r7, #16]
 801556c:	2b00      	cmp	r3, #0
 801556e:	d114      	bne.n	801559a <select_check_waiters+0xda>
 8015570:	697b      	ldr	r3, [r7, #20]
 8015572:	691b      	ldr	r3, [r3, #16]
 8015574:	2b00      	cmp	r3, #0
 8015576:	d010      	beq.n	801559a <select_check_waiters+0xda>
 8015578:	697b      	ldr	r3, [r7, #20]
 801557a:	691b      	ldr	r3, [r3, #16]
 801557c:	68fa      	ldr	r2, [r7, #12]
 801557e:	0952      	lsrs	r2, r2, #5
 8015580:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015584:	68fa      	ldr	r2, [r7, #12]
 8015586:	f002 021f 	and.w	r2, r2, #31
 801558a:	2101      	movs	r1, #1
 801558c:	fa01 f202 	lsl.w	r2, r1, r2
 8015590:	4013      	ands	r3, r2
 8015592:	2b00      	cmp	r3, #0
 8015594:	d001      	beq.n	801559a <select_check_waiters+0xda>
            do_signal = 1;
 8015596:	2301      	movs	r3, #1
 8015598:	613b      	str	r3, [r7, #16]
          }
        }
      }
#endif /* LWIP_SOCKET_SELECT */
      if (do_signal) {
 801559a:	693b      	ldr	r3, [r7, #16]
 801559c:	2b00      	cmp	r3, #0
 801559e:	d007      	beq.n	80155b0 <select_check_waiters+0xf0>
        scb->sem_signalled = 1;
 80155a0:	697b      	ldr	r3, [r7, #20]
 80155a2:	2201      	movs	r2, #1
 80155a4:	61da      	str	r2, [r3, #28]
        /* For !LWIP_TCPIP_CORE_LOCKING, we don't call SYS_ARCH_UNPROTECT() before signaling
           the semaphore, as this might lead to the select thread taking itself off the list,
           invalidating the semaphore. */
        sys_sem_signal(SELECT_SEM_PTR(scb->sem));
 80155a6:	697b      	ldr	r3, [r7, #20]
 80155a8:	3320      	adds	r3, #32
 80155aa:	4618      	mov	r0, r3
 80155ac:	f000 f9f2 	bl	8015994 <sys_sem_signal>
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 80155b0:	697b      	ldr	r3, [r7, #20]
 80155b2:	681b      	ldr	r3, [r3, #0]
 80155b4:	617b      	str	r3, [r7, #20]
 80155b6:	697b      	ldr	r3, [r7, #20]
 80155b8:	2b00      	cmp	r3, #0
 80155ba:	d18c      	bne.n	80154d6 <select_check_waiters+0x16>
    /* remember the state of select_cb_list to detect changes */
    last_select_cb_ctr = select_cb_ctr;
  }
  SYS_ARCH_UNPROTECT(lev);
#endif
}
 80155bc:	bf00      	nop
 80155be:	3718      	adds	r7, #24
 80155c0:	46bd      	mov	sp, r7
 80155c2:	bd80      	pop	{r7, pc}
 80155c4:	2404075c 	.word	0x2404075c

080155c8 <lwip_fcntl>:
 * The flag O_NONBLOCK and access modes are supported for F_GETFL, only
 * the flag O_NONBLOCK is implemented for F_SETFL.
 */
int
lwip_fcntl(int s, int cmd, int val)
{
 80155c8:	b580      	push	{r7, lr}
 80155ca:	b08c      	sub	sp, #48	; 0x30
 80155cc:	af00      	add	r7, sp, #0
 80155ce:	60f8      	str	r0, [r7, #12]
 80155d0:	60b9      	str	r1, [r7, #8]
 80155d2:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock = get_socket(s);
 80155d4:	68f8      	ldr	r0, [r7, #12]
 80155d6:	f7ff f823 	bl	8014620 <get_socket>
 80155da:	6278      	str	r0, [r7, #36]	; 0x24
  int ret = -1;
 80155dc:	f04f 33ff 	mov.w	r3, #4294967295
 80155e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  int op_mode = 0;
 80155e2:	2300      	movs	r3, #0
 80155e4:	62bb      	str	r3, [r7, #40]	; 0x28

  if (!sock) {
 80155e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155e8:	2b00      	cmp	r3, #0
 80155ea:	d102      	bne.n	80155f2 <lwip_fcntl+0x2a>
    return -1;
 80155ec:	f04f 33ff 	mov.w	r3, #4294967295
 80155f0:	e08a      	b.n	8015708 <lwip_fcntl+0x140>
  }

  switch (cmd) {
 80155f2:	68bb      	ldr	r3, [r7, #8]
 80155f4:	2b03      	cmp	r3, #3
 80155f6:	d002      	beq.n	80155fe <lwip_fcntl+0x36>
 80155f8:	2b04      	cmp	r3, #4
 80155fa:	d043      	beq.n	8015684 <lwip_fcntl+0xbc>
 80155fc:	e077      	b.n	80156ee <lwip_fcntl+0x126>
    case F_GETFL:
      ret = netconn_is_nonblocking(sock->conn) ? O_NONBLOCK : 0;
 80155fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015600:	681b      	ldr	r3, [r3, #0]
 8015602:	7f1b      	ldrb	r3, [r3, #28]
 8015604:	105b      	asrs	r3, r3, #1
 8015606:	f003 0301 	and.w	r3, r3, #1
 801560a:	62fb      	str	r3, [r7, #44]	; 0x2c
      sock_set_errno(sock, 0);
 801560c:	2300      	movs	r3, #0
 801560e:	61bb      	str	r3, [r7, #24]
 8015610:	69bb      	ldr	r3, [r7, #24]
 8015612:	2b00      	cmp	r3, #0
 8015614:	d002      	beq.n	801561c <lwip_fcntl+0x54>
 8015616:	4a3e      	ldr	r2, [pc, #248]	; (8015710 <lwip_fcntl+0x148>)
 8015618:	69bb      	ldr	r3, [r7, #24]
 801561a:	6013      	str	r3, [r2, #0]

      if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 801561c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801561e:	681b      	ldr	r3, [r3, #0]
 8015620:	781b      	ldrb	r3, [r3, #0]
 8015622:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015626:	2b10      	cmp	r3, #16
 8015628:	d123      	bne.n	8015672 <lwip_fcntl+0xaa>
#if LWIP_TCPIP_CORE_LOCKING
        LOCK_TCPIP_CORE();
 801562a:	483a      	ldr	r0, [pc, #232]	; (8015714 <lwip_fcntl+0x14c>)
 801562c:	f000 fa14 	bl	8015a58 <sys_mutex_lock>
        /* the proper thing to do here would be to get into the tcpip_thread,
           but locking should be OK as well since we only *read* some flags */
        SYS_ARCH_PROTECT(lev);
#endif
#if LWIP_TCP
        if (sock->conn->pcb.tcp) {
 8015630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015632:	681b      	ldr	r3, [r3, #0]
 8015634:	685b      	ldr	r3, [r3, #4]
 8015636:	2b00      	cmp	r3, #0
 8015638:	d017      	beq.n	801566a <lwip_fcntl+0xa2>
          if (!(sock->conn->pcb.tcp->flags & TF_RXCLOSED)) {
 801563a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801563c:	681b      	ldr	r3, [r3, #0]
 801563e:	685b      	ldr	r3, [r3, #4]
 8015640:	8b5b      	ldrh	r3, [r3, #26]
 8015642:	f003 0310 	and.w	r3, r3, #16
 8015646:	2b00      	cmp	r3, #0
 8015648:	d103      	bne.n	8015652 <lwip_fcntl+0x8a>
            op_mode |= O_RDONLY;
 801564a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801564c:	f043 0302 	orr.w	r3, r3, #2
 8015650:	62bb      	str	r3, [r7, #40]	; 0x28
          }
          if (!(sock->conn->pcb.tcp->flags & TF_FIN)) {
 8015652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015654:	681b      	ldr	r3, [r3, #0]
 8015656:	685b      	ldr	r3, [r3, #4]
 8015658:	8b5b      	ldrh	r3, [r3, #26]
 801565a:	f003 0320 	and.w	r3, r3, #32
 801565e:	2b00      	cmp	r3, #0
 8015660:	d103      	bne.n	801566a <lwip_fcntl+0xa2>
            op_mode |= O_WRONLY;
 8015662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015664:	f043 0304 	orr.w	r3, r3, #4
 8015668:	62bb      	str	r3, [r7, #40]	; 0x28
          }
        }
#endif
#if LWIP_TCPIP_CORE_LOCKING
        UNLOCK_TCPIP_CORE();
 801566a:	482a      	ldr	r0, [pc, #168]	; (8015714 <lwip_fcntl+0x14c>)
 801566c:	f000 fa03 	bl	8015a76 <sys_mutex_unlock>
 8015670:	e003      	b.n	801567a <lwip_fcntl+0xb2>
#else
        SYS_ARCH_UNPROTECT(lev);
#endif
      } else {
        op_mode |= O_RDWR;
 8015672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015674:	f043 0306 	orr.w	r3, r3, #6
 8015678:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* ensure O_RDWR for (O_RDONLY|O_WRONLY) != O_RDWR cases */
      ret |= (op_mode == (O_RDONLY | O_WRONLY)) ? O_RDWR : op_mode;
 801567a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801567c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801567e:	4313      	orrs	r3, r2
 8015680:	62fb      	str	r3, [r7, #44]	; 0x2c

      break;
 8015682:	e040      	b.n	8015706 <lwip_fcntl+0x13e>
    case F_SETFL:
      /* Bits corresponding to the file access mode and the file creation flags [..] that are set in arg shall be ignored */
      val &= ~(O_RDONLY | O_WRONLY | O_RDWR);
 8015684:	687b      	ldr	r3, [r7, #4]
 8015686:	f023 0306 	bic.w	r3, r3, #6
 801568a:	607b      	str	r3, [r7, #4]
      if ((val & ~O_NONBLOCK) == 0) {
 801568c:	687b      	ldr	r3, [r7, #4]
 801568e:	f023 0301 	bic.w	r3, r3, #1
 8015692:	2b00      	cmp	r3, #0
 8015694:	d122      	bne.n	80156dc <lwip_fcntl+0x114>
        /* only O_NONBLOCK, all other bits are zero */
        netconn_set_nonblocking(sock->conn, val & O_NONBLOCK);
 8015696:	687b      	ldr	r3, [r7, #4]
 8015698:	f003 0301 	and.w	r3, r3, #1
 801569c:	2b00      	cmp	r3, #0
 801569e:	d009      	beq.n	80156b4 <lwip_fcntl+0xec>
 80156a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156a2:	681b      	ldr	r3, [r3, #0]
 80156a4:	7f1a      	ldrb	r2, [r3, #28]
 80156a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156a8:	681b      	ldr	r3, [r3, #0]
 80156aa:	f042 0202 	orr.w	r2, r2, #2
 80156ae:	b2d2      	uxtb	r2, r2
 80156b0:	771a      	strb	r2, [r3, #28]
 80156b2:	e008      	b.n	80156c6 <lwip_fcntl+0xfe>
 80156b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156b6:	681b      	ldr	r3, [r3, #0]
 80156b8:	7f1a      	ldrb	r2, [r3, #28]
 80156ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156bc:	681b      	ldr	r3, [r3, #0]
 80156be:	f022 0202 	bic.w	r2, r2, #2
 80156c2:	b2d2      	uxtb	r2, r2
 80156c4:	771a      	strb	r2, [r3, #28]
        ret = 0;
 80156c6:	2300      	movs	r3, #0
 80156c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        sock_set_errno(sock, 0);
 80156ca:	2300      	movs	r3, #0
 80156cc:	61fb      	str	r3, [r7, #28]
 80156ce:	69fb      	ldr	r3, [r7, #28]
 80156d0:	2b00      	cmp	r3, #0
 80156d2:	d015      	beq.n	8015700 <lwip_fcntl+0x138>
 80156d4:	4a0e      	ldr	r2, [pc, #56]	; (8015710 <lwip_fcntl+0x148>)
 80156d6:	69fb      	ldr	r3, [r7, #28]
 80156d8:	6013      	str	r3, [r2, #0]
      } else {
        sock_set_errno(sock, ENOSYS); /* not yet implemented */
      }
      break;
 80156da:	e011      	b.n	8015700 <lwip_fcntl+0x138>
        sock_set_errno(sock, ENOSYS); /* not yet implemented */
 80156dc:	2326      	movs	r3, #38	; 0x26
 80156de:	623b      	str	r3, [r7, #32]
 80156e0:	6a3b      	ldr	r3, [r7, #32]
 80156e2:	2b00      	cmp	r3, #0
 80156e4:	d00c      	beq.n	8015700 <lwip_fcntl+0x138>
 80156e6:	4a0a      	ldr	r2, [pc, #40]	; (8015710 <lwip_fcntl+0x148>)
 80156e8:	6a3b      	ldr	r3, [r7, #32]
 80156ea:	6013      	str	r3, [r2, #0]
      break;
 80156ec:	e008      	b.n	8015700 <lwip_fcntl+0x138>
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_fcntl(%d, UNIMPL: %d, %d)\n", s, cmd, val));
      sock_set_errno(sock, ENOSYS); /* not yet implemented */
 80156ee:	2326      	movs	r3, #38	; 0x26
 80156f0:	617b      	str	r3, [r7, #20]
 80156f2:	697b      	ldr	r3, [r7, #20]
 80156f4:	2b00      	cmp	r3, #0
 80156f6:	d005      	beq.n	8015704 <lwip_fcntl+0x13c>
 80156f8:	4a05      	ldr	r2, [pc, #20]	; (8015710 <lwip_fcntl+0x148>)
 80156fa:	697b      	ldr	r3, [r7, #20]
 80156fc:	6013      	str	r3, [r2, #0]
      break;
 80156fe:	e001      	b.n	8015704 <lwip_fcntl+0x13c>
      break;
 8015700:	bf00      	nop
 8015702:	e000      	b.n	8015706 <lwip_fcntl+0x13e>
      break;
 8015704:	bf00      	nop
  }
  done_socket(sock);
  return ret;
 8015706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8015708:	4618      	mov	r0, r3
 801570a:	3730      	adds	r7, #48	; 0x30
 801570c:	46bd      	mov	sp, r7
 801570e:	bd80      	pop	{r7, pc}
 8015710:	24048e74 	.word	0x24048e74
 8015714:	24048e98 	.word	0x24048e98

08015718 <lwip_inet_pton>:
  return ret;
}

int
lwip_inet_pton(int af, const char *src, void *dst)
{
 8015718:	b580      	push	{r7, lr}
 801571a:	b086      	sub	sp, #24
 801571c:	af00      	add	r7, sp, #0
 801571e:	60f8      	str	r0, [r7, #12]
 8015720:	60b9      	str	r1, [r7, #8]
 8015722:	607a      	str	r2, [r7, #4]
  int err;
  switch (af) {
 8015724:	68fb      	ldr	r3, [r7, #12]
 8015726:	2b02      	cmp	r3, #2
 8015728:	d105      	bne.n	8015736 <lwip_inet_pton+0x1e>
#if LWIP_IPV4
    case AF_INET:
      err = ip4addr_aton(src, (ip4_addr_t *)dst);
 801572a:	6879      	ldr	r1, [r7, #4]
 801572c:	68b8      	ldr	r0, [r7, #8]
 801572e:	f7fc f8b1 	bl	8011894 <ip4addr_aton>
 8015732:	6178      	str	r0, [r7, #20]
      break;
 8015734:	e006      	b.n	8015744 <lwip_inet_pton+0x2c>
      }
      break;
    }
#endif
    default:
      err = -1;
 8015736:	f04f 33ff 	mov.w	r3, #4294967295
 801573a:	617b      	str	r3, [r7, #20]
      set_errno(EAFNOSUPPORT);
 801573c:	4b04      	ldr	r3, [pc, #16]	; (8015750 <lwip_inet_pton+0x38>)
 801573e:	2261      	movs	r2, #97	; 0x61
 8015740:	601a      	str	r2, [r3, #0]
      break;
 8015742:	bf00      	nop
  }
  return err;
 8015744:	697b      	ldr	r3, [r7, #20]
}
 8015746:	4618      	mov	r0, r3
 8015748:	3718      	adds	r7, #24
 801574a:	46bd      	mov	sp, r7
 801574c:	bd80      	pop	{r7, pc}
 801574e:	bf00      	nop
 8015750:	24048e74 	.word	0x24048e74

08015754 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8015754:	b580      	push	{r7, lr}
 8015756:	b086      	sub	sp, #24
 8015758:	af00      	add	r7, sp, #0
 801575a:	6078      	str	r0, [r7, #4]
 801575c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801575e:	683b      	ldr	r3, [r7, #0]
 8015760:	60bb      	str	r3, [r7, #8]
 8015762:	2304      	movs	r3, #4
 8015764:	60fb      	str	r3, [r7, #12]
 8015766:	2300      	movs	r3, #0
 8015768:	613b      	str	r3, [r7, #16]
 801576a:	2300      	movs	r3, #0
 801576c:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801576e:	f107 0308 	add.w	r3, r7, #8
 8015772:	2100      	movs	r1, #0
 8015774:	4618      	mov	r0, r3
 8015776:	f7f5 fbc6 	bl	800af06 <osMessageCreate>
 801577a:	4602      	mov	r2, r0
 801577c:	687b      	ldr	r3, [r7, #4]
 801577e:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8015780:	687b      	ldr	r3, [r7, #4]
 8015782:	681b      	ldr	r3, [r3, #0]
 8015784:	2b00      	cmp	r3, #0
 8015786:	d102      	bne.n	801578e <sys_mbox_new+0x3a>
    return ERR_MEM;
 8015788:	f04f 33ff 	mov.w	r3, #4294967295
 801578c:	e000      	b.n	8015790 <sys_mbox_new+0x3c>

  return ERR_OK;
 801578e:	2300      	movs	r3, #0
}
 8015790:	4618      	mov	r0, r3
 8015792:	3718      	adds	r7, #24
 8015794:	46bd      	mov	sp, r7
 8015796:	bd80      	pop	{r7, pc}

08015798 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8015798:	b580      	push	{r7, lr}
 801579a:	b082      	sub	sp, #8
 801579c:	af00      	add	r7, sp, #0
 801579e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 80157a0:	687b      	ldr	r3, [r7, #4]
 80157a2:	681b      	ldr	r3, [r3, #0]
 80157a4:	4618      	mov	r0, r3
 80157a6:	f7f5 fc8b 	bl	800b0c0 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 80157aa:	687b      	ldr	r3, [r7, #4]
 80157ac:	681b      	ldr	r3, [r3, #0]
 80157ae:	4618      	mov	r0, r3
 80157b0:	f7f5 fc9c 	bl	800b0ec <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 80157b4:	bf00      	nop
 80157b6:	3708      	adds	r7, #8
 80157b8:	46bd      	mov	sp, r7
 80157ba:	bd80      	pop	{r7, pc}

080157bc <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 80157bc:	b580      	push	{r7, lr}
 80157be:	b084      	sub	sp, #16
 80157c0:	af00      	add	r7, sp, #0
 80157c2:	6078      	str	r0, [r7, #4]
 80157c4:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 80157c6:	687b      	ldr	r3, [r7, #4]
 80157c8:	681b      	ldr	r3, [r3, #0]
 80157ca:	6839      	ldr	r1, [r7, #0]
 80157cc:	2200      	movs	r2, #0
 80157ce:	4618      	mov	r0, r3
 80157d0:	f7f5 fbc2 	bl	800af58 <osMessagePut>
 80157d4:	4603      	mov	r3, r0
 80157d6:	2b00      	cmp	r3, #0
 80157d8:	d102      	bne.n	80157e0 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 80157da:	2300      	movs	r3, #0
 80157dc:	73fb      	strb	r3, [r7, #15]
 80157de:	e001      	b.n	80157e4 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 80157e0:	23ff      	movs	r3, #255	; 0xff
 80157e2:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 80157e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80157e8:	4618      	mov	r0, r3
 80157ea:	3710      	adds	r7, #16
 80157ec:	46bd      	mov	sp, r7
 80157ee:	bd80      	pop	{r7, pc}

080157f0 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 80157f0:	b580      	push	{r7, lr}
 80157f2:	b08c      	sub	sp, #48	; 0x30
 80157f4:	af00      	add	r7, sp, #0
 80157f6:	61f8      	str	r0, [r7, #28]
 80157f8:	61b9      	str	r1, [r7, #24]
 80157fa:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 80157fc:	f7f5 f9ab 	bl	800ab56 <osKernelSysTick>
 8015800:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8015802:	697b      	ldr	r3, [r7, #20]
 8015804:	2b00      	cmp	r3, #0
 8015806:	d017      	beq.n	8015838 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8015808:	69fb      	ldr	r3, [r7, #28]
 801580a:	6819      	ldr	r1, [r3, #0]
 801580c:	f107 0320 	add.w	r3, r7, #32
 8015810:	697a      	ldr	r2, [r7, #20]
 8015812:	4618      	mov	r0, r3
 8015814:	f7f5 fbe0 	bl	800afd8 <osMessageGet>

    if(event.status == osEventMessage)
 8015818:	6a3b      	ldr	r3, [r7, #32]
 801581a:	2b10      	cmp	r3, #16
 801581c:	d109      	bne.n	8015832 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801581e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015820:	461a      	mov	r2, r3
 8015822:	69bb      	ldr	r3, [r7, #24]
 8015824:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8015826:	f7f5 f996 	bl	800ab56 <osKernelSysTick>
 801582a:	4602      	mov	r2, r0
 801582c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801582e:	1ad3      	subs	r3, r2, r3
 8015830:	e019      	b.n	8015866 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8015832:	f04f 33ff 	mov.w	r3, #4294967295
 8015836:	e016      	b.n	8015866 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8015838:	69fb      	ldr	r3, [r7, #28]
 801583a:	6819      	ldr	r1, [r3, #0]
 801583c:	463b      	mov	r3, r7
 801583e:	f04f 32ff 	mov.w	r2, #4294967295
 8015842:	4618      	mov	r0, r3
 8015844:	f7f5 fbc8 	bl	800afd8 <osMessageGet>
 8015848:	f107 0320 	add.w	r3, r7, #32
 801584c:	463a      	mov	r2, r7
 801584e:	ca07      	ldmia	r2, {r0, r1, r2}
 8015850:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8015854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015856:	461a      	mov	r2, r3
 8015858:	69bb      	ldr	r3, [r7, #24]
 801585a:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 801585c:	f7f5 f97b 	bl	800ab56 <osKernelSysTick>
 8015860:	4602      	mov	r2, r0
 8015862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015864:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8015866:	4618      	mov	r0, r3
 8015868:	3730      	adds	r7, #48	; 0x30
 801586a:	46bd      	mov	sp, r7
 801586c:	bd80      	pop	{r7, pc}

0801586e <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801586e:	b580      	push	{r7, lr}
 8015870:	b086      	sub	sp, #24
 8015872:	af00      	add	r7, sp, #0
 8015874:	6078      	str	r0, [r7, #4]
 8015876:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 8015878:	687b      	ldr	r3, [r7, #4]
 801587a:	6819      	ldr	r1, [r3, #0]
 801587c:	f107 030c 	add.w	r3, r7, #12
 8015880:	2200      	movs	r2, #0
 8015882:	4618      	mov	r0, r3
 8015884:	f7f5 fba8 	bl	800afd8 <osMessageGet>

  if(event.status == osEventMessage)
 8015888:	68fb      	ldr	r3, [r7, #12]
 801588a:	2b10      	cmp	r3, #16
 801588c:	d105      	bne.n	801589a <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 801588e:	693b      	ldr	r3, [r7, #16]
 8015890:	461a      	mov	r2, r3
 8015892:	683b      	ldr	r3, [r7, #0]
 8015894:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 8015896:	2300      	movs	r3, #0
 8015898:	e001      	b.n	801589e <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801589a:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 801589e:	4618      	mov	r0, r3
 80158a0:	3718      	adds	r7, #24
 80158a2:	46bd      	mov	sp, r7
 80158a4:	bd80      	pop	{r7, pc}

080158a6 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 80158a6:	b480      	push	{r7}
 80158a8:	b083      	sub	sp, #12
 80158aa:	af00      	add	r7, sp, #0
 80158ac:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 80158ae:	687b      	ldr	r3, [r7, #4]
 80158b0:	681b      	ldr	r3, [r3, #0]
 80158b2:	2b00      	cmp	r3, #0
 80158b4:	d101      	bne.n	80158ba <sys_mbox_valid+0x14>
    return 0;
 80158b6:	2300      	movs	r3, #0
 80158b8:	e000      	b.n	80158bc <sys_mbox_valid+0x16>
  else
    return 1;
 80158ba:	2301      	movs	r3, #1
}
 80158bc:	4618      	mov	r0, r3
 80158be:	370c      	adds	r7, #12
 80158c0:	46bd      	mov	sp, r7
 80158c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158c6:	4770      	bx	lr

080158c8 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 80158c8:	b480      	push	{r7}
 80158ca:	b083      	sub	sp, #12
 80158cc:	af00      	add	r7, sp, #0
 80158ce:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 80158d0:	687b      	ldr	r3, [r7, #4]
 80158d2:	2200      	movs	r2, #0
 80158d4:	601a      	str	r2, [r3, #0]
}
 80158d6:	bf00      	nop
 80158d8:	370c      	adds	r7, #12
 80158da:	46bd      	mov	sp, r7
 80158dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158e0:	4770      	bx	lr

080158e2 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 80158e2:	b580      	push	{r7, lr}
 80158e4:	b084      	sub	sp, #16
 80158e6:	af00      	add	r7, sp, #0
 80158e8:	6078      	str	r0, [r7, #4]
 80158ea:	460b      	mov	r3, r1
 80158ec:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 80158ee:	2300      	movs	r3, #0
 80158f0:	60bb      	str	r3, [r7, #8]
 80158f2:	2300      	movs	r3, #0
 80158f4:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 80158f6:	f107 0308 	add.w	r3, r7, #8
 80158fa:	2101      	movs	r1, #1
 80158fc:	4618      	mov	r0, r3
 80158fe:	f7f5 fa37 	bl	800ad70 <osSemaphoreCreate>
 8015902:	4602      	mov	r2, r0
 8015904:	687b      	ldr	r3, [r7, #4]
 8015906:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 8015908:	687b      	ldr	r3, [r7, #4]
 801590a:	681b      	ldr	r3, [r3, #0]
 801590c:	2b00      	cmp	r3, #0
 801590e:	d102      	bne.n	8015916 <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8015910:	f04f 33ff 	mov.w	r3, #4294967295
 8015914:	e009      	b.n	801592a <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 8015916:	78fb      	ldrb	r3, [r7, #3]
 8015918:	2b00      	cmp	r3, #0
 801591a:	d105      	bne.n	8015928 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 801591c:	687b      	ldr	r3, [r7, #4]
 801591e:	681b      	ldr	r3, [r3, #0]
 8015920:	2100      	movs	r1, #0
 8015922:	4618      	mov	r0, r3
 8015924:	f7f5 fa58 	bl	800add8 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8015928:	2300      	movs	r3, #0
}
 801592a:	4618      	mov	r0, r3
 801592c:	3710      	adds	r7, #16
 801592e:	46bd      	mov	sp, r7
 8015930:	bd80      	pop	{r7, pc}

08015932 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8015932:	b580      	push	{r7, lr}
 8015934:	b084      	sub	sp, #16
 8015936:	af00      	add	r7, sp, #0
 8015938:	6078      	str	r0, [r7, #4]
 801593a:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 801593c:	f7f5 f90b 	bl	800ab56 <osKernelSysTick>
 8015940:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8015942:	683b      	ldr	r3, [r7, #0]
 8015944:	2b00      	cmp	r3, #0
 8015946:	d011      	beq.n	801596c <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 8015948:	687b      	ldr	r3, [r7, #4]
 801594a:	681b      	ldr	r3, [r3, #0]
 801594c:	6839      	ldr	r1, [r7, #0]
 801594e:	4618      	mov	r0, r3
 8015950:	f7f5 fa42 	bl	800add8 <osSemaphoreWait>
 8015954:	4603      	mov	r3, r0
 8015956:	2b00      	cmp	r3, #0
 8015958:	d105      	bne.n	8015966 <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 801595a:	f7f5 f8fc 	bl	800ab56 <osKernelSysTick>
 801595e:	4602      	mov	r2, r0
 8015960:	68fb      	ldr	r3, [r7, #12]
 8015962:	1ad3      	subs	r3, r2, r3
 8015964:	e012      	b.n	801598c <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8015966:	f04f 33ff 	mov.w	r3, #4294967295
 801596a:	e00f      	b.n	801598c <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 801596c:	bf00      	nop
 801596e:	687b      	ldr	r3, [r7, #4]
 8015970:	681b      	ldr	r3, [r3, #0]
 8015972:	f04f 31ff 	mov.w	r1, #4294967295
 8015976:	4618      	mov	r0, r3
 8015978:	f7f5 fa2e 	bl	800add8 <osSemaphoreWait>
 801597c:	4603      	mov	r3, r0
 801597e:	2b00      	cmp	r3, #0
 8015980:	d1f5      	bne.n	801596e <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 8015982:	f7f5 f8e8 	bl	800ab56 <osKernelSysTick>
 8015986:	4602      	mov	r2, r0
 8015988:	68fb      	ldr	r3, [r7, #12]
 801598a:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801598c:	4618      	mov	r0, r3
 801598e:	3710      	adds	r7, #16
 8015990:	46bd      	mov	sp, r7
 8015992:	bd80      	pop	{r7, pc}

08015994 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8015994:	b580      	push	{r7, lr}
 8015996:	b082      	sub	sp, #8
 8015998:	af00      	add	r7, sp, #0
 801599a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 801599c:	687b      	ldr	r3, [r7, #4]
 801599e:	681b      	ldr	r3, [r3, #0]
 80159a0:	4618      	mov	r0, r3
 80159a2:	f7f5 fa67 	bl	800ae74 <osSemaphoreRelease>
}
 80159a6:	bf00      	nop
 80159a8:	3708      	adds	r7, #8
 80159aa:	46bd      	mov	sp, r7
 80159ac:	bd80      	pop	{r7, pc}

080159ae <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 80159ae:	b580      	push	{r7, lr}
 80159b0:	b082      	sub	sp, #8
 80159b2:	af00      	add	r7, sp, #0
 80159b4:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 80159b6:	687b      	ldr	r3, [r7, #4]
 80159b8:	681b      	ldr	r3, [r3, #0]
 80159ba:	4618      	mov	r0, r3
 80159bc:	f7f5 fa90 	bl	800aee0 <osSemaphoreDelete>
}
 80159c0:	bf00      	nop
 80159c2:	3708      	adds	r7, #8
 80159c4:	46bd      	mov	sp, r7
 80159c6:	bd80      	pop	{r7, pc}

080159c8 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 80159c8:	b480      	push	{r7}
 80159ca:	b083      	sub	sp, #12
 80159cc:	af00      	add	r7, sp, #0
 80159ce:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 80159d0:	687b      	ldr	r3, [r7, #4]
 80159d2:	681b      	ldr	r3, [r3, #0]
 80159d4:	2b00      	cmp	r3, #0
 80159d6:	d101      	bne.n	80159dc <sys_sem_valid+0x14>
    return 0;
 80159d8:	2300      	movs	r3, #0
 80159da:	e000      	b.n	80159de <sys_sem_valid+0x16>
  else
    return 1;
 80159dc:	2301      	movs	r3, #1
}
 80159de:	4618      	mov	r0, r3
 80159e0:	370c      	adds	r7, #12
 80159e2:	46bd      	mov	sp, r7
 80159e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159e8:	4770      	bx	lr

080159ea <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 80159ea:	b480      	push	{r7}
 80159ec:	b083      	sub	sp, #12
 80159ee:	af00      	add	r7, sp, #0
 80159f0:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 80159f2:	687b      	ldr	r3, [r7, #4]
 80159f4:	2200      	movs	r2, #0
 80159f6:	601a      	str	r2, [r3, #0]
}
 80159f8:	bf00      	nop
 80159fa:	370c      	adds	r7, #12
 80159fc:	46bd      	mov	sp, r7
 80159fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a02:	4770      	bx	lr

08015a04 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8015a04:	b580      	push	{r7, lr}
 8015a06:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8015a08:	4803      	ldr	r0, [pc, #12]	; (8015a18 <sys_init+0x14>)
 8015a0a:	f7f5 f914 	bl	800ac36 <osMutexCreate>
 8015a0e:	4602      	mov	r2, r0
 8015a10:	4b02      	ldr	r3, [pc, #8]	; (8015a1c <sys_init+0x18>)
 8015a12:	601a      	str	r2, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8015a14:	bf00      	nop
 8015a16:	bd80      	pop	{r7, pc}
 8015a18:	08027018 	.word	0x08027018
 8015a1c:	24048e78 	.word	0x24048e78

08015a20 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8015a20:	b580      	push	{r7, lr}
 8015a22:	b084      	sub	sp, #16
 8015a24:	af00      	add	r7, sp, #0
 8015a26:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8015a28:	2300      	movs	r3, #0
 8015a2a:	60bb      	str	r3, [r7, #8]
 8015a2c:	2300      	movs	r3, #0
 8015a2e:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8015a30:	f107 0308 	add.w	r3, r7, #8
 8015a34:	4618      	mov	r0, r3
 8015a36:	f7f5 f8fe 	bl	800ac36 <osMutexCreate>
 8015a3a:	4602      	mov	r2, r0
 8015a3c:	687b      	ldr	r3, [r7, #4]
 8015a3e:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8015a40:	687b      	ldr	r3, [r7, #4]
 8015a42:	681b      	ldr	r3, [r3, #0]
 8015a44:	2b00      	cmp	r3, #0
 8015a46:	d102      	bne.n	8015a4e <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8015a48:	f04f 33ff 	mov.w	r3, #4294967295
 8015a4c:	e000      	b.n	8015a50 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8015a4e:	2300      	movs	r3, #0
}
 8015a50:	4618      	mov	r0, r3
 8015a52:	3710      	adds	r7, #16
 8015a54:	46bd      	mov	sp, r7
 8015a56:	bd80      	pop	{r7, pc}

08015a58 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8015a58:	b580      	push	{r7, lr}
 8015a5a:	b082      	sub	sp, #8
 8015a5c:	af00      	add	r7, sp, #0
 8015a5e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8015a60:	687b      	ldr	r3, [r7, #4]
 8015a62:	681b      	ldr	r3, [r3, #0]
 8015a64:	f04f 31ff 	mov.w	r1, #4294967295
 8015a68:	4618      	mov	r0, r3
 8015a6a:	f7f5 f8fd 	bl	800ac68 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8015a6e:	bf00      	nop
 8015a70:	3708      	adds	r7, #8
 8015a72:	46bd      	mov	sp, r7
 8015a74:	bd80      	pop	{r7, pc}

08015a76 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8015a76:	b580      	push	{r7, lr}
 8015a78:	b082      	sub	sp, #8
 8015a7a:	af00      	add	r7, sp, #0
 8015a7c:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8015a7e:	687b      	ldr	r3, [r7, #4]
 8015a80:	681b      	ldr	r3, [r3, #0]
 8015a82:	4618      	mov	r0, r3
 8015a84:	f7f5 f93e 	bl	800ad04 <osMutexRelease>
}
 8015a88:	bf00      	nop
 8015a8a:	3708      	adds	r7, #8
 8015a8c:	46bd      	mov	sp, r7
 8015a8e:	bd80      	pop	{r7, pc}

08015a90 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8015a90:	b580      	push	{r7, lr}
 8015a92:	b08c      	sub	sp, #48	; 0x30
 8015a94:	af00      	add	r7, sp, #0
 8015a96:	60f8      	str	r0, [r7, #12]
 8015a98:	60b9      	str	r1, [r7, #8]
 8015a9a:	607a      	str	r2, [r7, #4]
 8015a9c:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8015a9e:	f107 0314 	add.w	r3, r7, #20
 8015aa2:	2200      	movs	r2, #0
 8015aa4:	601a      	str	r2, [r3, #0]
 8015aa6:	605a      	str	r2, [r3, #4]
 8015aa8:	609a      	str	r2, [r3, #8]
 8015aaa:	60da      	str	r2, [r3, #12]
 8015aac:	611a      	str	r2, [r3, #16]
 8015aae:	615a      	str	r2, [r3, #20]
 8015ab0:	619a      	str	r2, [r3, #24]
 8015ab2:	68fb      	ldr	r3, [r7, #12]
 8015ab4:	617b      	str	r3, [r7, #20]
 8015ab6:	68bb      	ldr	r3, [r7, #8]
 8015ab8:	61bb      	str	r3, [r7, #24]
 8015aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015abc:	b21b      	sxth	r3, r3
 8015abe:	83bb      	strh	r3, [r7, #28]
 8015ac0:	683b      	ldr	r3, [r7, #0]
 8015ac2:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8015ac4:	f107 0314 	add.w	r3, r7, #20
 8015ac8:	6879      	ldr	r1, [r7, #4]
 8015aca:	4618      	mov	r0, r3
 8015acc:	f7f5 f853 	bl	800ab76 <osThreadCreate>
 8015ad0:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8015ad2:	4618      	mov	r0, r3
 8015ad4:	3730      	adds	r7, #48	; 0x30
 8015ad6:	46bd      	mov	sp, r7
 8015ad8:	bd80      	pop	{r7, pc}
	...

08015adc <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8015adc:	b580      	push	{r7, lr}
 8015ade:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8015ae0:	4b04      	ldr	r3, [pc, #16]	; (8015af4 <sys_arch_protect+0x18>)
 8015ae2:	681b      	ldr	r3, [r3, #0]
 8015ae4:	f04f 31ff 	mov.w	r1, #4294967295
 8015ae8:	4618      	mov	r0, r3
 8015aea:	f7f5 f8bd 	bl	800ac68 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8015aee:	2301      	movs	r3, #1
}
 8015af0:	4618      	mov	r0, r3
 8015af2:	bd80      	pop	{r7, pc}
 8015af4:	24048e78 	.word	0x24048e78

08015af8 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8015af8:	b580      	push	{r7, lr}
 8015afa:	b082      	sub	sp, #8
 8015afc:	af00      	add	r7, sp, #0
 8015afe:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8015b00:	4b04      	ldr	r3, [pc, #16]	; (8015b14 <sys_arch_unprotect+0x1c>)
 8015b02:	681b      	ldr	r3, [r3, #0]
 8015b04:	4618      	mov	r0, r3
 8015b06:	f7f5 f8fd 	bl	800ad04 <osMutexRelease>
}
 8015b0a:	bf00      	nop
 8015b0c:	3708      	adds	r7, #8
 8015b0e:	46bd      	mov	sp, r7
 8015b10:	bd80      	pop	{r7, pc}
 8015b12:	bf00      	nop
 8015b14:	24048e78 	.word	0x24048e78

08015b18 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8015b18:	b580      	push	{r7, lr}
 8015b1a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8015b1c:	f00b fa30 	bl	8020f80 <rand>
 8015b20:	4603      	mov	r3, r0
 8015b22:	b29b      	uxth	r3, r3
 8015b24:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8015b28:	b29b      	uxth	r3, r3
 8015b2a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8015b2e:	b29a      	uxth	r2, r3
 8015b30:	4b01      	ldr	r3, [pc, #4]	; (8015b38 <tcp_init+0x20>)
 8015b32:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8015b34:	bf00      	nop
 8015b36:	bd80      	pop	{r7, pc}
 8015b38:	24000028 	.word	0x24000028

08015b3c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8015b3c:	b580      	push	{r7, lr}
 8015b3e:	b082      	sub	sp, #8
 8015b40:	af00      	add	r7, sp, #0
 8015b42:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8015b44:	687b      	ldr	r3, [r7, #4]
 8015b46:	7d1b      	ldrb	r3, [r3, #20]
 8015b48:	2b01      	cmp	r3, #1
 8015b4a:	d105      	bne.n	8015b58 <tcp_free+0x1c>
 8015b4c:	4b06      	ldr	r3, [pc, #24]	; (8015b68 <tcp_free+0x2c>)
 8015b4e:	22d4      	movs	r2, #212	; 0xd4
 8015b50:	4906      	ldr	r1, [pc, #24]	; (8015b6c <tcp_free+0x30>)
 8015b52:	4807      	ldr	r0, [pc, #28]	; (8015b70 <tcp_free+0x34>)
 8015b54:	f00b f9fc 	bl	8020f50 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8015b58:	6879      	ldr	r1, [r7, #4]
 8015b5a:	2001      	movs	r0, #1
 8015b5c:	f7fd fb14 	bl	8013188 <memp_free>
}
 8015b60:	bf00      	nop
 8015b62:	3708      	adds	r7, #8
 8015b64:	46bd      	mov	sp, r7
 8015b66:	bd80      	pop	{r7, pc}
 8015b68:	08025368 	.word	0x08025368
 8015b6c:	080253b8 	.word	0x080253b8
 8015b70:	080253cc 	.word	0x080253cc

08015b74 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8015b74:	b580      	push	{r7, lr}
 8015b76:	b082      	sub	sp, #8
 8015b78:	af00      	add	r7, sp, #0
 8015b7a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8015b7c:	687b      	ldr	r3, [r7, #4]
 8015b7e:	7d1b      	ldrb	r3, [r3, #20]
 8015b80:	2b01      	cmp	r3, #1
 8015b82:	d105      	bne.n	8015b90 <tcp_free_listen+0x1c>
 8015b84:	4b06      	ldr	r3, [pc, #24]	; (8015ba0 <tcp_free_listen+0x2c>)
 8015b86:	22df      	movs	r2, #223	; 0xdf
 8015b88:	4906      	ldr	r1, [pc, #24]	; (8015ba4 <tcp_free_listen+0x30>)
 8015b8a:	4807      	ldr	r0, [pc, #28]	; (8015ba8 <tcp_free_listen+0x34>)
 8015b8c:	f00b f9e0 	bl	8020f50 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8015b90:	6879      	ldr	r1, [r7, #4]
 8015b92:	2002      	movs	r0, #2
 8015b94:	f7fd faf8 	bl	8013188 <memp_free>
}
 8015b98:	bf00      	nop
 8015b9a:	3708      	adds	r7, #8
 8015b9c:	46bd      	mov	sp, r7
 8015b9e:	bd80      	pop	{r7, pc}
 8015ba0:	08025368 	.word	0x08025368
 8015ba4:	080253f4 	.word	0x080253f4
 8015ba8:	080253cc 	.word	0x080253cc

08015bac <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8015bac:	b580      	push	{r7, lr}
 8015bae:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8015bb0:	f001 f850 	bl	8016c54 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8015bb4:	4b07      	ldr	r3, [pc, #28]	; (8015bd4 <tcp_tmr+0x28>)
 8015bb6:	781b      	ldrb	r3, [r3, #0]
 8015bb8:	3301      	adds	r3, #1
 8015bba:	b2da      	uxtb	r2, r3
 8015bbc:	4b05      	ldr	r3, [pc, #20]	; (8015bd4 <tcp_tmr+0x28>)
 8015bbe:	701a      	strb	r2, [r3, #0]
 8015bc0:	4b04      	ldr	r3, [pc, #16]	; (8015bd4 <tcp_tmr+0x28>)
 8015bc2:	781b      	ldrb	r3, [r3, #0]
 8015bc4:	f003 0301 	and.w	r3, r3, #1
 8015bc8:	2b00      	cmp	r3, #0
 8015bca:	d001      	beq.n	8015bd0 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8015bcc:	f000 fd04 	bl	80165d8 <tcp_slowtmr>
  }
}
 8015bd0:	bf00      	nop
 8015bd2:	bd80      	pop	{r7, pc}
 8015bd4:	24040760 	.word	0x24040760

08015bd8 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8015bd8:	b580      	push	{r7, lr}
 8015bda:	b084      	sub	sp, #16
 8015bdc:	af00      	add	r7, sp, #0
 8015bde:	6078      	str	r0, [r7, #4]
 8015be0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8015be2:	683b      	ldr	r3, [r7, #0]
 8015be4:	2b00      	cmp	r3, #0
 8015be6:	d105      	bne.n	8015bf4 <tcp_remove_listener+0x1c>
 8015be8:	4b0d      	ldr	r3, [pc, #52]	; (8015c20 <tcp_remove_listener+0x48>)
 8015bea:	22ff      	movs	r2, #255	; 0xff
 8015bec:	490d      	ldr	r1, [pc, #52]	; (8015c24 <tcp_remove_listener+0x4c>)
 8015bee:	480e      	ldr	r0, [pc, #56]	; (8015c28 <tcp_remove_listener+0x50>)
 8015bf0:	f00b f9ae 	bl	8020f50 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8015bf4:	687b      	ldr	r3, [r7, #4]
 8015bf6:	60fb      	str	r3, [r7, #12]
 8015bf8:	e00a      	b.n	8015c10 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8015bfa:	68fb      	ldr	r3, [r7, #12]
 8015bfc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015bfe:	683a      	ldr	r2, [r7, #0]
 8015c00:	429a      	cmp	r2, r3
 8015c02:	d102      	bne.n	8015c0a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8015c04:	68fb      	ldr	r3, [r7, #12]
 8015c06:	2200      	movs	r2, #0
 8015c08:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8015c0a:	68fb      	ldr	r3, [r7, #12]
 8015c0c:	68db      	ldr	r3, [r3, #12]
 8015c0e:	60fb      	str	r3, [r7, #12]
 8015c10:	68fb      	ldr	r3, [r7, #12]
 8015c12:	2b00      	cmp	r3, #0
 8015c14:	d1f1      	bne.n	8015bfa <tcp_remove_listener+0x22>
    }
  }
}
 8015c16:	bf00      	nop
 8015c18:	3710      	adds	r7, #16
 8015c1a:	46bd      	mov	sp, r7
 8015c1c:	bd80      	pop	{r7, pc}
 8015c1e:	bf00      	nop
 8015c20:	08025368 	.word	0x08025368
 8015c24:	08025410 	.word	0x08025410
 8015c28:	080253cc 	.word	0x080253cc

08015c2c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8015c2c:	b580      	push	{r7, lr}
 8015c2e:	b084      	sub	sp, #16
 8015c30:	af00      	add	r7, sp, #0
 8015c32:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8015c34:	687b      	ldr	r3, [r7, #4]
 8015c36:	2b00      	cmp	r3, #0
 8015c38:	d106      	bne.n	8015c48 <tcp_listen_closed+0x1c>
 8015c3a:	4b14      	ldr	r3, [pc, #80]	; (8015c8c <tcp_listen_closed+0x60>)
 8015c3c:	f240 1211 	movw	r2, #273	; 0x111
 8015c40:	4913      	ldr	r1, [pc, #76]	; (8015c90 <tcp_listen_closed+0x64>)
 8015c42:	4814      	ldr	r0, [pc, #80]	; (8015c94 <tcp_listen_closed+0x68>)
 8015c44:	f00b f984 	bl	8020f50 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8015c48:	687b      	ldr	r3, [r7, #4]
 8015c4a:	7d1b      	ldrb	r3, [r3, #20]
 8015c4c:	2b01      	cmp	r3, #1
 8015c4e:	d006      	beq.n	8015c5e <tcp_listen_closed+0x32>
 8015c50:	4b0e      	ldr	r3, [pc, #56]	; (8015c8c <tcp_listen_closed+0x60>)
 8015c52:	f44f 7289 	mov.w	r2, #274	; 0x112
 8015c56:	4910      	ldr	r1, [pc, #64]	; (8015c98 <tcp_listen_closed+0x6c>)
 8015c58:	480e      	ldr	r0, [pc, #56]	; (8015c94 <tcp_listen_closed+0x68>)
 8015c5a:	f00b f979 	bl	8020f50 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8015c5e:	2301      	movs	r3, #1
 8015c60:	60fb      	str	r3, [r7, #12]
 8015c62:	e00b      	b.n	8015c7c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8015c64:	4a0d      	ldr	r2, [pc, #52]	; (8015c9c <tcp_listen_closed+0x70>)
 8015c66:	68fb      	ldr	r3, [r7, #12]
 8015c68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015c6c:	681b      	ldr	r3, [r3, #0]
 8015c6e:	6879      	ldr	r1, [r7, #4]
 8015c70:	4618      	mov	r0, r3
 8015c72:	f7ff ffb1 	bl	8015bd8 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8015c76:	68fb      	ldr	r3, [r7, #12]
 8015c78:	3301      	adds	r3, #1
 8015c7a:	60fb      	str	r3, [r7, #12]
 8015c7c:	68fb      	ldr	r3, [r7, #12]
 8015c7e:	2b03      	cmp	r3, #3
 8015c80:	d9f0      	bls.n	8015c64 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8015c82:	bf00      	nop
 8015c84:	3710      	adds	r7, #16
 8015c86:	46bd      	mov	sp, r7
 8015c88:	bd80      	pop	{r7, pc}
 8015c8a:	bf00      	nop
 8015c8c:	08025368 	.word	0x08025368
 8015c90:	08025438 	.word	0x08025438
 8015c94:	080253cc 	.word	0x080253cc
 8015c98:	08025444 	.word	0x08025444
 8015c9c:	08027038 	.word	0x08027038

08015ca0 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8015ca0:	b5b0      	push	{r4, r5, r7, lr}
 8015ca2:	b088      	sub	sp, #32
 8015ca4:	af04      	add	r7, sp, #16
 8015ca6:	6078      	str	r0, [r7, #4]
 8015ca8:	460b      	mov	r3, r1
 8015caa:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8015cac:	687b      	ldr	r3, [r7, #4]
 8015cae:	2b00      	cmp	r3, #0
 8015cb0:	d106      	bne.n	8015cc0 <tcp_close_shutdown+0x20>
 8015cb2:	4b61      	ldr	r3, [pc, #388]	; (8015e38 <tcp_close_shutdown+0x198>)
 8015cb4:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8015cb8:	4960      	ldr	r1, [pc, #384]	; (8015e3c <tcp_close_shutdown+0x19c>)
 8015cba:	4861      	ldr	r0, [pc, #388]	; (8015e40 <tcp_close_shutdown+0x1a0>)
 8015cbc:	f00b f948 	bl	8020f50 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8015cc0:	78fb      	ldrb	r3, [r7, #3]
 8015cc2:	2b00      	cmp	r3, #0
 8015cc4:	d066      	beq.n	8015d94 <tcp_close_shutdown+0xf4>
 8015cc6:	687b      	ldr	r3, [r7, #4]
 8015cc8:	7d1b      	ldrb	r3, [r3, #20]
 8015cca:	2b04      	cmp	r3, #4
 8015ccc:	d003      	beq.n	8015cd6 <tcp_close_shutdown+0x36>
 8015cce:	687b      	ldr	r3, [r7, #4]
 8015cd0:	7d1b      	ldrb	r3, [r3, #20]
 8015cd2:	2b07      	cmp	r3, #7
 8015cd4:	d15e      	bne.n	8015d94 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8015cd6:	687b      	ldr	r3, [r7, #4]
 8015cd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015cda:	2b00      	cmp	r3, #0
 8015cdc:	d104      	bne.n	8015ce8 <tcp_close_shutdown+0x48>
 8015cde:	687b      	ldr	r3, [r7, #4]
 8015ce0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015ce2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8015ce6:	d055      	beq.n	8015d94 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8015ce8:	687b      	ldr	r3, [r7, #4]
 8015cea:	8b5b      	ldrh	r3, [r3, #26]
 8015cec:	f003 0310 	and.w	r3, r3, #16
 8015cf0:	2b00      	cmp	r3, #0
 8015cf2:	d106      	bne.n	8015d02 <tcp_close_shutdown+0x62>
 8015cf4:	4b50      	ldr	r3, [pc, #320]	; (8015e38 <tcp_close_shutdown+0x198>)
 8015cf6:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8015cfa:	4952      	ldr	r1, [pc, #328]	; (8015e44 <tcp_close_shutdown+0x1a4>)
 8015cfc:	4850      	ldr	r0, [pc, #320]	; (8015e40 <tcp_close_shutdown+0x1a0>)
 8015cfe:	f00b f927 	bl	8020f50 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8015d02:	687b      	ldr	r3, [r7, #4]
 8015d04:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8015d06:	687b      	ldr	r3, [r7, #4]
 8015d08:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8015d0a:	687d      	ldr	r5, [r7, #4]
 8015d0c:	687b      	ldr	r3, [r7, #4]
 8015d0e:	3304      	adds	r3, #4
 8015d10:	687a      	ldr	r2, [r7, #4]
 8015d12:	8ad2      	ldrh	r2, [r2, #22]
 8015d14:	6879      	ldr	r1, [r7, #4]
 8015d16:	8b09      	ldrh	r1, [r1, #24]
 8015d18:	9102      	str	r1, [sp, #8]
 8015d1a:	9201      	str	r2, [sp, #4]
 8015d1c:	9300      	str	r3, [sp, #0]
 8015d1e:	462b      	mov	r3, r5
 8015d20:	4622      	mov	r2, r4
 8015d22:	4601      	mov	r1, r0
 8015d24:	6878      	ldr	r0, [r7, #4]
 8015d26:	f005 fd71 	bl	801b80c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8015d2a:	6878      	ldr	r0, [r7, #4]
 8015d2c:	f001 fb40 	bl	80173b0 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8015d30:	4b45      	ldr	r3, [pc, #276]	; (8015e48 <tcp_close_shutdown+0x1a8>)
 8015d32:	681b      	ldr	r3, [r3, #0]
 8015d34:	687a      	ldr	r2, [r7, #4]
 8015d36:	429a      	cmp	r2, r3
 8015d38:	d105      	bne.n	8015d46 <tcp_close_shutdown+0xa6>
 8015d3a:	4b43      	ldr	r3, [pc, #268]	; (8015e48 <tcp_close_shutdown+0x1a8>)
 8015d3c:	681b      	ldr	r3, [r3, #0]
 8015d3e:	68db      	ldr	r3, [r3, #12]
 8015d40:	4a41      	ldr	r2, [pc, #260]	; (8015e48 <tcp_close_shutdown+0x1a8>)
 8015d42:	6013      	str	r3, [r2, #0]
 8015d44:	e013      	b.n	8015d6e <tcp_close_shutdown+0xce>
 8015d46:	4b40      	ldr	r3, [pc, #256]	; (8015e48 <tcp_close_shutdown+0x1a8>)
 8015d48:	681b      	ldr	r3, [r3, #0]
 8015d4a:	60fb      	str	r3, [r7, #12]
 8015d4c:	e00c      	b.n	8015d68 <tcp_close_shutdown+0xc8>
 8015d4e:	68fb      	ldr	r3, [r7, #12]
 8015d50:	68db      	ldr	r3, [r3, #12]
 8015d52:	687a      	ldr	r2, [r7, #4]
 8015d54:	429a      	cmp	r2, r3
 8015d56:	d104      	bne.n	8015d62 <tcp_close_shutdown+0xc2>
 8015d58:	687b      	ldr	r3, [r7, #4]
 8015d5a:	68da      	ldr	r2, [r3, #12]
 8015d5c:	68fb      	ldr	r3, [r7, #12]
 8015d5e:	60da      	str	r2, [r3, #12]
 8015d60:	e005      	b.n	8015d6e <tcp_close_shutdown+0xce>
 8015d62:	68fb      	ldr	r3, [r7, #12]
 8015d64:	68db      	ldr	r3, [r3, #12]
 8015d66:	60fb      	str	r3, [r7, #12]
 8015d68:	68fb      	ldr	r3, [r7, #12]
 8015d6a:	2b00      	cmp	r3, #0
 8015d6c:	d1ef      	bne.n	8015d4e <tcp_close_shutdown+0xae>
 8015d6e:	687b      	ldr	r3, [r7, #4]
 8015d70:	2200      	movs	r2, #0
 8015d72:	60da      	str	r2, [r3, #12]
 8015d74:	4b35      	ldr	r3, [pc, #212]	; (8015e4c <tcp_close_shutdown+0x1ac>)
 8015d76:	2201      	movs	r2, #1
 8015d78:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8015d7a:	4b35      	ldr	r3, [pc, #212]	; (8015e50 <tcp_close_shutdown+0x1b0>)
 8015d7c:	681b      	ldr	r3, [r3, #0]
 8015d7e:	687a      	ldr	r2, [r7, #4]
 8015d80:	429a      	cmp	r2, r3
 8015d82:	d102      	bne.n	8015d8a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8015d84:	f003 ffd2 	bl	8019d2c <tcp_trigger_input_pcb_close>
 8015d88:	e002      	b.n	8015d90 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8015d8a:	6878      	ldr	r0, [r7, #4]
 8015d8c:	f7ff fed6 	bl	8015b3c <tcp_free>
      }
      return ERR_OK;
 8015d90:	2300      	movs	r3, #0
 8015d92:	e04d      	b.n	8015e30 <tcp_close_shutdown+0x190>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8015d94:	687b      	ldr	r3, [r7, #4]
 8015d96:	7d1b      	ldrb	r3, [r3, #20]
 8015d98:	2b01      	cmp	r3, #1
 8015d9a:	d02d      	beq.n	8015df8 <tcp_close_shutdown+0x158>
 8015d9c:	2b02      	cmp	r3, #2
 8015d9e:	d036      	beq.n	8015e0e <tcp_close_shutdown+0x16e>
 8015da0:	2b00      	cmp	r3, #0
 8015da2:	d13f      	bne.n	8015e24 <tcp_close_shutdown+0x184>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8015da4:	687b      	ldr	r3, [r7, #4]
 8015da6:	8adb      	ldrh	r3, [r3, #22]
 8015da8:	2b00      	cmp	r3, #0
 8015daa:	d021      	beq.n	8015df0 <tcp_close_shutdown+0x150>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8015dac:	4b29      	ldr	r3, [pc, #164]	; (8015e54 <tcp_close_shutdown+0x1b4>)
 8015dae:	681b      	ldr	r3, [r3, #0]
 8015db0:	687a      	ldr	r2, [r7, #4]
 8015db2:	429a      	cmp	r2, r3
 8015db4:	d105      	bne.n	8015dc2 <tcp_close_shutdown+0x122>
 8015db6:	4b27      	ldr	r3, [pc, #156]	; (8015e54 <tcp_close_shutdown+0x1b4>)
 8015db8:	681b      	ldr	r3, [r3, #0]
 8015dba:	68db      	ldr	r3, [r3, #12]
 8015dbc:	4a25      	ldr	r2, [pc, #148]	; (8015e54 <tcp_close_shutdown+0x1b4>)
 8015dbe:	6013      	str	r3, [r2, #0]
 8015dc0:	e013      	b.n	8015dea <tcp_close_shutdown+0x14a>
 8015dc2:	4b24      	ldr	r3, [pc, #144]	; (8015e54 <tcp_close_shutdown+0x1b4>)
 8015dc4:	681b      	ldr	r3, [r3, #0]
 8015dc6:	60bb      	str	r3, [r7, #8]
 8015dc8:	e00c      	b.n	8015de4 <tcp_close_shutdown+0x144>
 8015dca:	68bb      	ldr	r3, [r7, #8]
 8015dcc:	68db      	ldr	r3, [r3, #12]
 8015dce:	687a      	ldr	r2, [r7, #4]
 8015dd0:	429a      	cmp	r2, r3
 8015dd2:	d104      	bne.n	8015dde <tcp_close_shutdown+0x13e>
 8015dd4:	687b      	ldr	r3, [r7, #4]
 8015dd6:	68da      	ldr	r2, [r3, #12]
 8015dd8:	68bb      	ldr	r3, [r7, #8]
 8015dda:	60da      	str	r2, [r3, #12]
 8015ddc:	e005      	b.n	8015dea <tcp_close_shutdown+0x14a>
 8015dde:	68bb      	ldr	r3, [r7, #8]
 8015de0:	68db      	ldr	r3, [r3, #12]
 8015de2:	60bb      	str	r3, [r7, #8]
 8015de4:	68bb      	ldr	r3, [r7, #8]
 8015de6:	2b00      	cmp	r3, #0
 8015de8:	d1ef      	bne.n	8015dca <tcp_close_shutdown+0x12a>
 8015dea:	687b      	ldr	r3, [r7, #4]
 8015dec:	2200      	movs	r2, #0
 8015dee:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8015df0:	6878      	ldr	r0, [r7, #4]
 8015df2:	f7ff fea3 	bl	8015b3c <tcp_free>
      break;
 8015df6:	e01a      	b.n	8015e2e <tcp_close_shutdown+0x18e>
    case LISTEN:
      tcp_listen_closed(pcb);
 8015df8:	6878      	ldr	r0, [r7, #4]
 8015dfa:	f7ff ff17 	bl	8015c2c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8015dfe:	6879      	ldr	r1, [r7, #4]
 8015e00:	4815      	ldr	r0, [pc, #84]	; (8015e58 <tcp_close_shutdown+0x1b8>)
 8015e02:	f001 fb25 	bl	8017450 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8015e06:	6878      	ldr	r0, [r7, #4]
 8015e08:	f7ff feb4 	bl	8015b74 <tcp_free_listen>
      break;
 8015e0c:	e00f      	b.n	8015e2e <tcp_close_shutdown+0x18e>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8015e0e:	6879      	ldr	r1, [r7, #4]
 8015e10:	480d      	ldr	r0, [pc, #52]	; (8015e48 <tcp_close_shutdown+0x1a8>)
 8015e12:	f001 fb1d 	bl	8017450 <tcp_pcb_remove>
 8015e16:	4b0d      	ldr	r3, [pc, #52]	; (8015e4c <tcp_close_shutdown+0x1ac>)
 8015e18:	2201      	movs	r2, #1
 8015e1a:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8015e1c:	6878      	ldr	r0, [r7, #4]
 8015e1e:	f7ff fe8d 	bl	8015b3c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8015e22:	e004      	b.n	8015e2e <tcp_close_shutdown+0x18e>
    default:
      return tcp_close_shutdown_fin(pcb);
 8015e24:	6878      	ldr	r0, [r7, #4]
 8015e26:	f000 f819 	bl	8015e5c <tcp_close_shutdown_fin>
 8015e2a:	4603      	mov	r3, r0
 8015e2c:	e000      	b.n	8015e30 <tcp_close_shutdown+0x190>
  }
  return ERR_OK;
 8015e2e:	2300      	movs	r3, #0
}
 8015e30:	4618      	mov	r0, r3
 8015e32:	3710      	adds	r7, #16
 8015e34:	46bd      	mov	sp, r7
 8015e36:	bdb0      	pop	{r4, r5, r7, pc}
 8015e38:	08025368 	.word	0x08025368
 8015e3c:	0802545c 	.word	0x0802545c
 8015e40:	080253cc 	.word	0x080253cc
 8015e44:	0802547c 	.word	0x0802547c
 8015e48:	24048e80 	.word	0x24048e80
 8015e4c:	24048e7c 	.word	0x24048e7c
 8015e50:	24048e94 	.word	0x24048e94
 8015e54:	24048e8c 	.word	0x24048e8c
 8015e58:	24048e88 	.word	0x24048e88

08015e5c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8015e5c:	b580      	push	{r7, lr}
 8015e5e:	b084      	sub	sp, #16
 8015e60:	af00      	add	r7, sp, #0
 8015e62:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8015e64:	687b      	ldr	r3, [r7, #4]
 8015e66:	2b00      	cmp	r3, #0
 8015e68:	d106      	bne.n	8015e78 <tcp_close_shutdown_fin+0x1c>
 8015e6a:	4b2c      	ldr	r3, [pc, #176]	; (8015f1c <tcp_close_shutdown_fin+0xc0>)
 8015e6c:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8015e70:	492b      	ldr	r1, [pc, #172]	; (8015f20 <tcp_close_shutdown_fin+0xc4>)
 8015e72:	482c      	ldr	r0, [pc, #176]	; (8015f24 <tcp_close_shutdown_fin+0xc8>)
 8015e74:	f00b f86c 	bl	8020f50 <iprintf>

  switch (pcb->state) {
 8015e78:	687b      	ldr	r3, [r7, #4]
 8015e7a:	7d1b      	ldrb	r3, [r3, #20]
 8015e7c:	2b04      	cmp	r3, #4
 8015e7e:	d010      	beq.n	8015ea2 <tcp_close_shutdown_fin+0x46>
 8015e80:	2b07      	cmp	r3, #7
 8015e82:	d01b      	beq.n	8015ebc <tcp_close_shutdown_fin+0x60>
 8015e84:	2b03      	cmp	r3, #3
 8015e86:	d126      	bne.n	8015ed6 <tcp_close_shutdown_fin+0x7a>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8015e88:	6878      	ldr	r0, [r7, #4]
 8015e8a:	f004 fdbb 	bl	801aa04 <tcp_send_fin>
 8015e8e:	4603      	mov	r3, r0
 8015e90:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8015e92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015e96:	2b00      	cmp	r3, #0
 8015e98:	d11f      	bne.n	8015eda <tcp_close_shutdown_fin+0x7e>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8015e9a:	687b      	ldr	r3, [r7, #4]
 8015e9c:	2205      	movs	r2, #5
 8015e9e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8015ea0:	e01b      	b.n	8015eda <tcp_close_shutdown_fin+0x7e>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8015ea2:	6878      	ldr	r0, [r7, #4]
 8015ea4:	f004 fdae 	bl	801aa04 <tcp_send_fin>
 8015ea8:	4603      	mov	r3, r0
 8015eaa:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8015eac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015eb0:	2b00      	cmp	r3, #0
 8015eb2:	d114      	bne.n	8015ede <tcp_close_shutdown_fin+0x82>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8015eb4:	687b      	ldr	r3, [r7, #4]
 8015eb6:	2205      	movs	r2, #5
 8015eb8:	751a      	strb	r2, [r3, #20]
      }
      break;
 8015eba:	e010      	b.n	8015ede <tcp_close_shutdown_fin+0x82>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8015ebc:	6878      	ldr	r0, [r7, #4]
 8015ebe:	f004 fda1 	bl	801aa04 <tcp_send_fin>
 8015ec2:	4603      	mov	r3, r0
 8015ec4:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8015ec6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015eca:	2b00      	cmp	r3, #0
 8015ecc:	d109      	bne.n	8015ee2 <tcp_close_shutdown_fin+0x86>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8015ece:	687b      	ldr	r3, [r7, #4]
 8015ed0:	2209      	movs	r2, #9
 8015ed2:	751a      	strb	r2, [r3, #20]
      }
      break;
 8015ed4:	e005      	b.n	8015ee2 <tcp_close_shutdown_fin+0x86>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8015ed6:	2300      	movs	r3, #0
 8015ed8:	e01c      	b.n	8015f14 <tcp_close_shutdown_fin+0xb8>
      break;
 8015eda:	bf00      	nop
 8015edc:	e002      	b.n	8015ee4 <tcp_close_shutdown_fin+0x88>
      break;
 8015ede:	bf00      	nop
 8015ee0:	e000      	b.n	8015ee4 <tcp_close_shutdown_fin+0x88>
      break;
 8015ee2:	bf00      	nop
  }

  if (err == ERR_OK) {
 8015ee4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015ee8:	2b00      	cmp	r3, #0
 8015eea:	d103      	bne.n	8015ef4 <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8015eec:	6878      	ldr	r0, [r7, #4]
 8015eee:	f004 fec7 	bl	801ac80 <tcp_output>
 8015ef2:	e00d      	b.n	8015f10 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 8015ef4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015efc:	d108      	bne.n	8015f10 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8015efe:	687b      	ldr	r3, [r7, #4]
 8015f00:	8b5b      	ldrh	r3, [r3, #26]
 8015f02:	f043 0308 	orr.w	r3, r3, #8
 8015f06:	b29a      	uxth	r2, r3
 8015f08:	687b      	ldr	r3, [r7, #4]
 8015f0a:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8015f0c:	2300      	movs	r3, #0
 8015f0e:	e001      	b.n	8015f14 <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 8015f10:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015f14:	4618      	mov	r0, r3
 8015f16:	3710      	adds	r7, #16
 8015f18:	46bd      	mov	sp, r7
 8015f1a:	bd80      	pop	{r7, pc}
 8015f1c:	08025368 	.word	0x08025368
 8015f20:	08025438 	.word	0x08025438
 8015f24:	080253cc 	.word	0x080253cc

08015f28 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8015f28:	b580      	push	{r7, lr}
 8015f2a:	b082      	sub	sp, #8
 8015f2c:	af00      	add	r7, sp, #0
 8015f2e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8015f30:	687b      	ldr	r3, [r7, #4]
 8015f32:	2b00      	cmp	r3, #0
 8015f34:	d109      	bne.n	8015f4a <tcp_close+0x22>
 8015f36:	4b0f      	ldr	r3, [pc, #60]	; (8015f74 <tcp_close+0x4c>)
 8015f38:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8015f3c:	490e      	ldr	r1, [pc, #56]	; (8015f78 <tcp_close+0x50>)
 8015f3e:	480f      	ldr	r0, [pc, #60]	; (8015f7c <tcp_close+0x54>)
 8015f40:	f00b f806 	bl	8020f50 <iprintf>
 8015f44:	f06f 030f 	mvn.w	r3, #15
 8015f48:	e00f      	b.n	8015f6a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8015f4a:	687b      	ldr	r3, [r7, #4]
 8015f4c:	7d1b      	ldrb	r3, [r3, #20]
 8015f4e:	2b01      	cmp	r3, #1
 8015f50:	d006      	beq.n	8015f60 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8015f52:	687b      	ldr	r3, [r7, #4]
 8015f54:	8b5b      	ldrh	r3, [r3, #26]
 8015f56:	f043 0310 	orr.w	r3, r3, #16
 8015f5a:	b29a      	uxth	r2, r3
 8015f5c:	687b      	ldr	r3, [r7, #4]
 8015f5e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8015f60:	2101      	movs	r1, #1
 8015f62:	6878      	ldr	r0, [r7, #4]
 8015f64:	f7ff fe9c 	bl	8015ca0 <tcp_close_shutdown>
 8015f68:	4603      	mov	r3, r0
}
 8015f6a:	4618      	mov	r0, r3
 8015f6c:	3708      	adds	r7, #8
 8015f6e:	46bd      	mov	sp, r7
 8015f70:	bd80      	pop	{r7, pc}
 8015f72:	bf00      	nop
 8015f74:	08025368 	.word	0x08025368
 8015f78:	08025498 	.word	0x08025498
 8015f7c:	080253cc 	.word	0x080253cc

08015f80 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 8015f80:	b580      	push	{r7, lr}
 8015f82:	b084      	sub	sp, #16
 8015f84:	af00      	add	r7, sp, #0
 8015f86:	60f8      	str	r0, [r7, #12]
 8015f88:	60b9      	str	r1, [r7, #8]
 8015f8a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 8015f8c:	68fb      	ldr	r3, [r7, #12]
 8015f8e:	2b00      	cmp	r3, #0
 8015f90:	d109      	bne.n	8015fa6 <tcp_shutdown+0x26>
 8015f92:	4b25      	ldr	r3, [pc, #148]	; (8016028 <tcp_shutdown+0xa8>)
 8015f94:	f240 2207 	movw	r2, #519	; 0x207
 8015f98:	4924      	ldr	r1, [pc, #144]	; (801602c <tcp_shutdown+0xac>)
 8015f9a:	4825      	ldr	r0, [pc, #148]	; (8016030 <tcp_shutdown+0xb0>)
 8015f9c:	f00a ffd8 	bl	8020f50 <iprintf>
 8015fa0:	f06f 030f 	mvn.w	r3, #15
 8015fa4:	e03c      	b.n	8016020 <tcp_shutdown+0xa0>

  if (pcb->state == LISTEN) {
 8015fa6:	68fb      	ldr	r3, [r7, #12]
 8015fa8:	7d1b      	ldrb	r3, [r3, #20]
 8015faa:	2b01      	cmp	r3, #1
 8015fac:	d102      	bne.n	8015fb4 <tcp_shutdown+0x34>
    return ERR_CONN;
 8015fae:	f06f 030a 	mvn.w	r3, #10
 8015fb2:	e035      	b.n	8016020 <tcp_shutdown+0xa0>
  }
  if (shut_rx) {
 8015fb4:	68bb      	ldr	r3, [r7, #8]
 8015fb6:	2b00      	cmp	r3, #0
 8015fb8:	d01b      	beq.n	8015ff2 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8015fba:	68fb      	ldr	r3, [r7, #12]
 8015fbc:	8b5b      	ldrh	r3, [r3, #26]
 8015fbe:	f043 0310 	orr.w	r3, r3, #16
 8015fc2:	b29a      	uxth	r2, r3
 8015fc4:	68fb      	ldr	r3, [r7, #12]
 8015fc6:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 8015fc8:	687b      	ldr	r3, [r7, #4]
 8015fca:	2b00      	cmp	r3, #0
 8015fcc:	d005      	beq.n	8015fda <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 8015fce:	2101      	movs	r1, #1
 8015fd0:	68f8      	ldr	r0, [r7, #12]
 8015fd2:	f7ff fe65 	bl	8015ca0 <tcp_close_shutdown>
 8015fd6:	4603      	mov	r3, r0
 8015fd8:	e022      	b.n	8016020 <tcp_shutdown+0xa0>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 8015fda:	68fb      	ldr	r3, [r7, #12]
 8015fdc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015fde:	2b00      	cmp	r3, #0
 8015fe0:	d007      	beq.n	8015ff2 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 8015fe2:	68fb      	ldr	r3, [r7, #12]
 8015fe4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015fe6:	4618      	mov	r0, r3
 8015fe8:	f7fe f832 	bl	8014050 <pbuf_free>
      pcb->refused_data = NULL;
 8015fec:	68fb      	ldr	r3, [r7, #12]
 8015fee:	2200      	movs	r2, #0
 8015ff0:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 8015ff2:	687b      	ldr	r3, [r7, #4]
 8015ff4:	2b00      	cmp	r3, #0
 8015ff6:	d012      	beq.n	801601e <tcp_shutdown+0x9e>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 8015ff8:	68fb      	ldr	r3, [r7, #12]
 8015ffa:	7d1b      	ldrb	r3, [r3, #20]
 8015ffc:	2b03      	cmp	r3, #3
 8015ffe:	db0b      	blt.n	8016018 <tcp_shutdown+0x98>
 8016000:	2b04      	cmp	r3, #4
 8016002:	dd01      	ble.n	8016008 <tcp_shutdown+0x88>
 8016004:	2b07      	cmp	r3, #7
 8016006:	d107      	bne.n	8016018 <tcp_shutdown+0x98>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 8016008:	68bb      	ldr	r3, [r7, #8]
 801600a:	b2db      	uxtb	r3, r3
 801600c:	4619      	mov	r1, r3
 801600e:	68f8      	ldr	r0, [r7, #12]
 8016010:	f7ff fe46 	bl	8015ca0 <tcp_close_shutdown>
 8016014:	4603      	mov	r3, r0
 8016016:	e003      	b.n	8016020 <tcp_shutdown+0xa0>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 8016018:	f06f 030a 	mvn.w	r3, #10
 801601c:	e000      	b.n	8016020 <tcp_shutdown+0xa0>
    }
  }
  return ERR_OK;
 801601e:	2300      	movs	r3, #0
}
 8016020:	4618      	mov	r0, r3
 8016022:	3710      	adds	r7, #16
 8016024:	46bd      	mov	sp, r7
 8016026:	bd80      	pop	{r7, pc}
 8016028:	08025368 	.word	0x08025368
 801602c:	080254b0 	.word	0x080254b0
 8016030:	080253cc 	.word	0x080253cc

08016034 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8016034:	b580      	push	{r7, lr}
 8016036:	b08e      	sub	sp, #56	; 0x38
 8016038:	af04      	add	r7, sp, #16
 801603a:	6078      	str	r0, [r7, #4]
 801603c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 801603e:	687b      	ldr	r3, [r7, #4]
 8016040:	2b00      	cmp	r3, #0
 8016042:	d107      	bne.n	8016054 <tcp_abandon+0x20>
 8016044:	4b52      	ldr	r3, [pc, #328]	; (8016190 <tcp_abandon+0x15c>)
 8016046:	f240 223d 	movw	r2, #573	; 0x23d
 801604a:	4952      	ldr	r1, [pc, #328]	; (8016194 <tcp_abandon+0x160>)
 801604c:	4852      	ldr	r0, [pc, #328]	; (8016198 <tcp_abandon+0x164>)
 801604e:	f00a ff7f 	bl	8020f50 <iprintf>
 8016052:	e099      	b.n	8016188 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8016054:	687b      	ldr	r3, [r7, #4]
 8016056:	7d1b      	ldrb	r3, [r3, #20]
 8016058:	2b01      	cmp	r3, #1
 801605a:	d106      	bne.n	801606a <tcp_abandon+0x36>
 801605c:	4b4c      	ldr	r3, [pc, #304]	; (8016190 <tcp_abandon+0x15c>)
 801605e:	f240 2241 	movw	r2, #577	; 0x241
 8016062:	494e      	ldr	r1, [pc, #312]	; (801619c <tcp_abandon+0x168>)
 8016064:	484c      	ldr	r0, [pc, #304]	; (8016198 <tcp_abandon+0x164>)
 8016066:	f00a ff73 	bl	8020f50 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 801606a:	687b      	ldr	r3, [r7, #4]
 801606c:	7d1b      	ldrb	r3, [r3, #20]
 801606e:	2b0a      	cmp	r3, #10
 8016070:	d107      	bne.n	8016082 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8016072:	6879      	ldr	r1, [r7, #4]
 8016074:	484a      	ldr	r0, [pc, #296]	; (80161a0 <tcp_abandon+0x16c>)
 8016076:	f001 f9eb 	bl	8017450 <tcp_pcb_remove>
    tcp_free(pcb);
 801607a:	6878      	ldr	r0, [r7, #4]
 801607c:	f7ff fd5e 	bl	8015b3c <tcp_free>
 8016080:	e082      	b.n	8016188 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8016082:	2300      	movs	r3, #0
 8016084:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8016086:	2300      	movs	r3, #0
 8016088:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 801608a:	687b      	ldr	r3, [r7, #4]
 801608c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801608e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8016090:	687b      	ldr	r3, [r7, #4]
 8016092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016094:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8016096:	687b      	ldr	r3, [r7, #4]
 8016098:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801609c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 801609e:	687b      	ldr	r3, [r7, #4]
 80160a0:	691b      	ldr	r3, [r3, #16]
 80160a2:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80160a4:	687b      	ldr	r3, [r7, #4]
 80160a6:	7d1b      	ldrb	r3, [r3, #20]
 80160a8:	2b00      	cmp	r3, #0
 80160aa:	d126      	bne.n	80160fa <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 80160ac:	687b      	ldr	r3, [r7, #4]
 80160ae:	8adb      	ldrh	r3, [r3, #22]
 80160b0:	2b00      	cmp	r3, #0
 80160b2:	d02e      	beq.n	8016112 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80160b4:	4b3b      	ldr	r3, [pc, #236]	; (80161a4 <tcp_abandon+0x170>)
 80160b6:	681b      	ldr	r3, [r3, #0]
 80160b8:	687a      	ldr	r2, [r7, #4]
 80160ba:	429a      	cmp	r2, r3
 80160bc:	d105      	bne.n	80160ca <tcp_abandon+0x96>
 80160be:	4b39      	ldr	r3, [pc, #228]	; (80161a4 <tcp_abandon+0x170>)
 80160c0:	681b      	ldr	r3, [r3, #0]
 80160c2:	68db      	ldr	r3, [r3, #12]
 80160c4:	4a37      	ldr	r2, [pc, #220]	; (80161a4 <tcp_abandon+0x170>)
 80160c6:	6013      	str	r3, [r2, #0]
 80160c8:	e013      	b.n	80160f2 <tcp_abandon+0xbe>
 80160ca:	4b36      	ldr	r3, [pc, #216]	; (80161a4 <tcp_abandon+0x170>)
 80160cc:	681b      	ldr	r3, [r3, #0]
 80160ce:	61fb      	str	r3, [r7, #28]
 80160d0:	e00c      	b.n	80160ec <tcp_abandon+0xb8>
 80160d2:	69fb      	ldr	r3, [r7, #28]
 80160d4:	68db      	ldr	r3, [r3, #12]
 80160d6:	687a      	ldr	r2, [r7, #4]
 80160d8:	429a      	cmp	r2, r3
 80160da:	d104      	bne.n	80160e6 <tcp_abandon+0xb2>
 80160dc:	687b      	ldr	r3, [r7, #4]
 80160de:	68da      	ldr	r2, [r3, #12]
 80160e0:	69fb      	ldr	r3, [r7, #28]
 80160e2:	60da      	str	r2, [r3, #12]
 80160e4:	e005      	b.n	80160f2 <tcp_abandon+0xbe>
 80160e6:	69fb      	ldr	r3, [r7, #28]
 80160e8:	68db      	ldr	r3, [r3, #12]
 80160ea:	61fb      	str	r3, [r7, #28]
 80160ec:	69fb      	ldr	r3, [r7, #28]
 80160ee:	2b00      	cmp	r3, #0
 80160f0:	d1ef      	bne.n	80160d2 <tcp_abandon+0x9e>
 80160f2:	687b      	ldr	r3, [r7, #4]
 80160f4:	2200      	movs	r2, #0
 80160f6:	60da      	str	r2, [r3, #12]
 80160f8:	e00b      	b.n	8016112 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80160fa:	683b      	ldr	r3, [r7, #0]
 80160fc:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 80160fe:	687b      	ldr	r3, [r7, #4]
 8016100:	8adb      	ldrh	r3, [r3, #22]
 8016102:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8016104:	6879      	ldr	r1, [r7, #4]
 8016106:	4828      	ldr	r0, [pc, #160]	; (80161a8 <tcp_abandon+0x174>)
 8016108:	f001 f9a2 	bl	8017450 <tcp_pcb_remove>
 801610c:	4b27      	ldr	r3, [pc, #156]	; (80161ac <tcp_abandon+0x178>)
 801610e:	2201      	movs	r2, #1
 8016110:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8016112:	687b      	ldr	r3, [r7, #4]
 8016114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016116:	2b00      	cmp	r3, #0
 8016118:	d004      	beq.n	8016124 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 801611a:	687b      	ldr	r3, [r7, #4]
 801611c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801611e:	4618      	mov	r0, r3
 8016120:	f000 fe78 	bl	8016e14 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8016124:	687b      	ldr	r3, [r7, #4]
 8016126:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016128:	2b00      	cmp	r3, #0
 801612a:	d004      	beq.n	8016136 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 801612c:	687b      	ldr	r3, [r7, #4]
 801612e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016130:	4618      	mov	r0, r3
 8016132:	f000 fe6f 	bl	8016e14 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8016136:	687b      	ldr	r3, [r7, #4]
 8016138:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801613a:	2b00      	cmp	r3, #0
 801613c:	d004      	beq.n	8016148 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 801613e:	687b      	ldr	r3, [r7, #4]
 8016140:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016142:	4618      	mov	r0, r3
 8016144:	f000 fe66 	bl	8016e14 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8016148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801614a:	2b00      	cmp	r3, #0
 801614c:	d00e      	beq.n	801616c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 801614e:	6879      	ldr	r1, [r7, #4]
 8016150:	687b      	ldr	r3, [r7, #4]
 8016152:	3304      	adds	r3, #4
 8016154:	687a      	ldr	r2, [r7, #4]
 8016156:	8b12      	ldrh	r2, [r2, #24]
 8016158:	9202      	str	r2, [sp, #8]
 801615a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801615c:	9201      	str	r2, [sp, #4]
 801615e:	9300      	str	r3, [sp, #0]
 8016160:	460b      	mov	r3, r1
 8016162:	697a      	ldr	r2, [r7, #20]
 8016164:	69b9      	ldr	r1, [r7, #24]
 8016166:	6878      	ldr	r0, [r7, #4]
 8016168:	f005 fb50 	bl	801b80c <tcp_rst>
    }
    last_state = pcb->state;
 801616c:	687b      	ldr	r3, [r7, #4]
 801616e:	7d1b      	ldrb	r3, [r3, #20]
 8016170:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8016172:	6878      	ldr	r0, [r7, #4]
 8016174:	f7ff fce2 	bl	8015b3c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8016178:	693b      	ldr	r3, [r7, #16]
 801617a:	2b00      	cmp	r3, #0
 801617c:	d004      	beq.n	8016188 <tcp_abandon+0x154>
 801617e:	693b      	ldr	r3, [r7, #16]
 8016180:	f06f 010c 	mvn.w	r1, #12
 8016184:	68f8      	ldr	r0, [r7, #12]
 8016186:	4798      	blx	r3
  }
}
 8016188:	3728      	adds	r7, #40	; 0x28
 801618a:	46bd      	mov	sp, r7
 801618c:	bd80      	pop	{r7, pc}
 801618e:	bf00      	nop
 8016190:	08025368 	.word	0x08025368
 8016194:	080254cc 	.word	0x080254cc
 8016198:	080253cc 	.word	0x080253cc
 801619c:	080254e8 	.word	0x080254e8
 80161a0:	24048e90 	.word	0x24048e90
 80161a4:	24048e8c 	.word	0x24048e8c
 80161a8:	24048e80 	.word	0x24048e80
 80161ac:	24048e7c 	.word	0x24048e7c

080161b0 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80161b0:	b580      	push	{r7, lr}
 80161b2:	b082      	sub	sp, #8
 80161b4:	af00      	add	r7, sp, #0
 80161b6:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80161b8:	2101      	movs	r1, #1
 80161ba:	6878      	ldr	r0, [r7, #4]
 80161bc:	f7ff ff3a 	bl	8016034 <tcp_abandon>
}
 80161c0:	bf00      	nop
 80161c2:	3708      	adds	r7, #8
 80161c4:	46bd      	mov	sp, r7
 80161c6:	bd80      	pop	{r7, pc}

080161c8 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80161c8:	b580      	push	{r7, lr}
 80161ca:	b084      	sub	sp, #16
 80161cc:	af00      	add	r7, sp, #0
 80161ce:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80161d0:	687b      	ldr	r3, [r7, #4]
 80161d2:	2b00      	cmp	r3, #0
 80161d4:	d106      	bne.n	80161e4 <tcp_update_rcv_ann_wnd+0x1c>
 80161d6:	4b25      	ldr	r3, [pc, #148]	; (801626c <tcp_update_rcv_ann_wnd+0xa4>)
 80161d8:	f240 32a6 	movw	r2, #934	; 0x3a6
 80161dc:	4924      	ldr	r1, [pc, #144]	; (8016270 <tcp_update_rcv_ann_wnd+0xa8>)
 80161de:	4825      	ldr	r0, [pc, #148]	; (8016274 <tcp_update_rcv_ann_wnd+0xac>)
 80161e0:	f00a feb6 	bl	8020f50 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80161e4:	687b      	ldr	r3, [r7, #4]
 80161e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80161e8:	687a      	ldr	r2, [r7, #4]
 80161ea:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80161ec:	4413      	add	r3, r2
 80161ee:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80161f0:	687b      	ldr	r3, [r7, #4]
 80161f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80161f4:	687a      	ldr	r2, [r7, #4]
 80161f6:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 80161f8:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 80161fc:	bf28      	it	cs
 80161fe:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8016202:	b292      	uxth	r2, r2
 8016204:	4413      	add	r3, r2
 8016206:	68fa      	ldr	r2, [r7, #12]
 8016208:	1ad3      	subs	r3, r2, r3
 801620a:	2b00      	cmp	r3, #0
 801620c:	db08      	blt.n	8016220 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 801620e:	687b      	ldr	r3, [r7, #4]
 8016210:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8016212:	687b      	ldr	r3, [r7, #4]
 8016214:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8016216:	687b      	ldr	r3, [r7, #4]
 8016218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801621a:	68fa      	ldr	r2, [r7, #12]
 801621c:	1ad3      	subs	r3, r2, r3
 801621e:	e020      	b.n	8016262 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8016220:	687b      	ldr	r3, [r7, #4]
 8016222:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016224:	687b      	ldr	r3, [r7, #4]
 8016226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016228:	1ad3      	subs	r3, r2, r3
 801622a:	2b00      	cmp	r3, #0
 801622c:	dd03      	ble.n	8016236 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 801622e:	687b      	ldr	r3, [r7, #4]
 8016230:	2200      	movs	r2, #0
 8016232:	855a      	strh	r2, [r3, #42]	; 0x2a
 8016234:	e014      	b.n	8016260 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8016236:	687b      	ldr	r3, [r7, #4]
 8016238:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801623a:	687b      	ldr	r3, [r7, #4]
 801623c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801623e:	1ad3      	subs	r3, r2, r3
 8016240:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8016242:	68bb      	ldr	r3, [r7, #8]
 8016244:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016248:	d306      	bcc.n	8016258 <tcp_update_rcv_ann_wnd+0x90>
 801624a:	4b08      	ldr	r3, [pc, #32]	; (801626c <tcp_update_rcv_ann_wnd+0xa4>)
 801624c:	f240 32b6 	movw	r2, #950	; 0x3b6
 8016250:	4909      	ldr	r1, [pc, #36]	; (8016278 <tcp_update_rcv_ann_wnd+0xb0>)
 8016252:	4808      	ldr	r0, [pc, #32]	; (8016274 <tcp_update_rcv_ann_wnd+0xac>)
 8016254:	f00a fe7c 	bl	8020f50 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8016258:	68bb      	ldr	r3, [r7, #8]
 801625a:	b29a      	uxth	r2, r3
 801625c:	687b      	ldr	r3, [r7, #4]
 801625e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8016260:	2300      	movs	r3, #0
  }
}
 8016262:	4618      	mov	r0, r3
 8016264:	3710      	adds	r7, #16
 8016266:	46bd      	mov	sp, r7
 8016268:	bd80      	pop	{r7, pc}
 801626a:	bf00      	nop
 801626c:	08025368 	.word	0x08025368
 8016270:	080255e4 	.word	0x080255e4
 8016274:	080253cc 	.word	0x080253cc
 8016278:	08025608 	.word	0x08025608

0801627c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 801627c:	b580      	push	{r7, lr}
 801627e:	b084      	sub	sp, #16
 8016280:	af00      	add	r7, sp, #0
 8016282:	6078      	str	r0, [r7, #4]
 8016284:	460b      	mov	r3, r1
 8016286:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8016288:	687b      	ldr	r3, [r7, #4]
 801628a:	2b00      	cmp	r3, #0
 801628c:	d107      	bne.n	801629e <tcp_recved+0x22>
 801628e:	4b1f      	ldr	r3, [pc, #124]	; (801630c <tcp_recved+0x90>)
 8016290:	f240 32cf 	movw	r2, #975	; 0x3cf
 8016294:	491e      	ldr	r1, [pc, #120]	; (8016310 <tcp_recved+0x94>)
 8016296:	481f      	ldr	r0, [pc, #124]	; (8016314 <tcp_recved+0x98>)
 8016298:	f00a fe5a 	bl	8020f50 <iprintf>
 801629c:	e032      	b.n	8016304 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 801629e:	687b      	ldr	r3, [r7, #4]
 80162a0:	7d1b      	ldrb	r3, [r3, #20]
 80162a2:	2b01      	cmp	r3, #1
 80162a4:	d106      	bne.n	80162b4 <tcp_recved+0x38>
 80162a6:	4b19      	ldr	r3, [pc, #100]	; (801630c <tcp_recved+0x90>)
 80162a8:	f240 32d3 	movw	r2, #979	; 0x3d3
 80162ac:	491a      	ldr	r1, [pc, #104]	; (8016318 <tcp_recved+0x9c>)
 80162ae:	4819      	ldr	r0, [pc, #100]	; (8016314 <tcp_recved+0x98>)
 80162b0:	f00a fe4e 	bl	8020f50 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80162b4:	687b      	ldr	r3, [r7, #4]
 80162b6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80162b8:	887b      	ldrh	r3, [r7, #2]
 80162ba:	4413      	add	r3, r2
 80162bc:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80162be:	89fb      	ldrh	r3, [r7, #14]
 80162c0:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80162c4:	d804      	bhi.n	80162d0 <tcp_recved+0x54>
 80162c6:	687b      	ldr	r3, [r7, #4]
 80162c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80162ca:	89fa      	ldrh	r2, [r7, #14]
 80162cc:	429a      	cmp	r2, r3
 80162ce:	d204      	bcs.n	80162da <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80162d0:	687b      	ldr	r3, [r7, #4]
 80162d2:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80162d6:	851a      	strh	r2, [r3, #40]	; 0x28
 80162d8:	e002      	b.n	80162e0 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80162da:	687b      	ldr	r3, [r7, #4]
 80162dc:	89fa      	ldrh	r2, [r7, #14]
 80162de:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80162e0:	6878      	ldr	r0, [r7, #4]
 80162e2:	f7ff ff71 	bl	80161c8 <tcp_update_rcv_ann_wnd>
 80162e6:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80162e8:	68bb      	ldr	r3, [r7, #8]
 80162ea:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80162ee:	d309      	bcc.n	8016304 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 80162f0:	687b      	ldr	r3, [r7, #4]
 80162f2:	8b5b      	ldrh	r3, [r3, #26]
 80162f4:	f043 0302 	orr.w	r3, r3, #2
 80162f8:	b29a      	uxth	r2, r3
 80162fa:	687b      	ldr	r3, [r7, #4]
 80162fc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80162fe:	6878      	ldr	r0, [r7, #4]
 8016300:	f004 fcbe 	bl	801ac80 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8016304:	3710      	adds	r7, #16
 8016306:	46bd      	mov	sp, r7
 8016308:	bd80      	pop	{r7, pc}
 801630a:	bf00      	nop
 801630c:	08025368 	.word	0x08025368
 8016310:	08025624 	.word	0x08025624
 8016314:	080253cc 	.word	0x080253cc
 8016318:	0802563c 	.word	0x0802563c

0801631c <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 801631c:	b480      	push	{r7}
 801631e:	b083      	sub	sp, #12
 8016320:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8016322:	2300      	movs	r3, #0
 8016324:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8016326:	4b1e      	ldr	r3, [pc, #120]	; (80163a0 <tcp_new_port+0x84>)
 8016328:	881b      	ldrh	r3, [r3, #0]
 801632a:	3301      	adds	r3, #1
 801632c:	b29a      	uxth	r2, r3
 801632e:	4b1c      	ldr	r3, [pc, #112]	; (80163a0 <tcp_new_port+0x84>)
 8016330:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8016332:	4b1b      	ldr	r3, [pc, #108]	; (80163a0 <tcp_new_port+0x84>)
 8016334:	881b      	ldrh	r3, [r3, #0]
 8016336:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801633a:	4293      	cmp	r3, r2
 801633c:	d103      	bne.n	8016346 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 801633e:	4b18      	ldr	r3, [pc, #96]	; (80163a0 <tcp_new_port+0x84>)
 8016340:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8016344:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8016346:	2300      	movs	r3, #0
 8016348:	71fb      	strb	r3, [r7, #7]
 801634a:	e01e      	b.n	801638a <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 801634c:	79fb      	ldrb	r3, [r7, #7]
 801634e:	4a15      	ldr	r2, [pc, #84]	; (80163a4 <tcp_new_port+0x88>)
 8016350:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016354:	681b      	ldr	r3, [r3, #0]
 8016356:	603b      	str	r3, [r7, #0]
 8016358:	e011      	b.n	801637e <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 801635a:	683b      	ldr	r3, [r7, #0]
 801635c:	8ada      	ldrh	r2, [r3, #22]
 801635e:	4b10      	ldr	r3, [pc, #64]	; (80163a0 <tcp_new_port+0x84>)
 8016360:	881b      	ldrh	r3, [r3, #0]
 8016362:	429a      	cmp	r2, r3
 8016364:	d108      	bne.n	8016378 <tcp_new_port+0x5c>
        n++;
 8016366:	88bb      	ldrh	r3, [r7, #4]
 8016368:	3301      	adds	r3, #1
 801636a:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 801636c:	88bb      	ldrh	r3, [r7, #4]
 801636e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8016372:	d3d8      	bcc.n	8016326 <tcp_new_port+0xa>
          return 0;
 8016374:	2300      	movs	r3, #0
 8016376:	e00d      	b.n	8016394 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8016378:	683b      	ldr	r3, [r7, #0]
 801637a:	68db      	ldr	r3, [r3, #12]
 801637c:	603b      	str	r3, [r7, #0]
 801637e:	683b      	ldr	r3, [r7, #0]
 8016380:	2b00      	cmp	r3, #0
 8016382:	d1ea      	bne.n	801635a <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8016384:	79fb      	ldrb	r3, [r7, #7]
 8016386:	3301      	adds	r3, #1
 8016388:	71fb      	strb	r3, [r7, #7]
 801638a:	79fb      	ldrb	r3, [r7, #7]
 801638c:	2b03      	cmp	r3, #3
 801638e:	d9dd      	bls.n	801634c <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8016390:	4b03      	ldr	r3, [pc, #12]	; (80163a0 <tcp_new_port+0x84>)
 8016392:	881b      	ldrh	r3, [r3, #0]
}
 8016394:	4618      	mov	r0, r3
 8016396:	370c      	adds	r7, #12
 8016398:	46bd      	mov	sp, r7
 801639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801639e:	4770      	bx	lr
 80163a0:	24000028 	.word	0x24000028
 80163a4:	08027038 	.word	0x08027038

080163a8 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 80163a8:	b580      	push	{r7, lr}
 80163aa:	b08a      	sub	sp, #40	; 0x28
 80163ac:	af00      	add	r7, sp, #0
 80163ae:	60f8      	str	r0, [r7, #12]
 80163b0:	60b9      	str	r1, [r7, #8]
 80163b2:	603b      	str	r3, [r7, #0]
 80163b4:	4613      	mov	r3, r2
 80163b6:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 80163b8:	2300      	movs	r3, #0
 80163ba:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 80163bc:	68fb      	ldr	r3, [r7, #12]
 80163be:	2b00      	cmp	r3, #0
 80163c0:	d109      	bne.n	80163d6 <tcp_connect+0x2e>
 80163c2:	4b7d      	ldr	r3, [pc, #500]	; (80165b8 <tcp_connect+0x210>)
 80163c4:	f240 4235 	movw	r2, #1077	; 0x435
 80163c8:	497c      	ldr	r1, [pc, #496]	; (80165bc <tcp_connect+0x214>)
 80163ca:	487d      	ldr	r0, [pc, #500]	; (80165c0 <tcp_connect+0x218>)
 80163cc:	f00a fdc0 	bl	8020f50 <iprintf>
 80163d0:	f06f 030f 	mvn.w	r3, #15
 80163d4:	e0ec      	b.n	80165b0 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 80163d6:	68bb      	ldr	r3, [r7, #8]
 80163d8:	2b00      	cmp	r3, #0
 80163da:	d109      	bne.n	80163f0 <tcp_connect+0x48>
 80163dc:	4b76      	ldr	r3, [pc, #472]	; (80165b8 <tcp_connect+0x210>)
 80163de:	f240 4236 	movw	r2, #1078	; 0x436
 80163e2:	4978      	ldr	r1, [pc, #480]	; (80165c4 <tcp_connect+0x21c>)
 80163e4:	4876      	ldr	r0, [pc, #472]	; (80165c0 <tcp_connect+0x218>)
 80163e6:	f00a fdb3 	bl	8020f50 <iprintf>
 80163ea:	f06f 030f 	mvn.w	r3, #15
 80163ee:	e0df      	b.n	80165b0 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 80163f0:	68fb      	ldr	r3, [r7, #12]
 80163f2:	7d1b      	ldrb	r3, [r3, #20]
 80163f4:	2b00      	cmp	r3, #0
 80163f6:	d009      	beq.n	801640c <tcp_connect+0x64>
 80163f8:	4b6f      	ldr	r3, [pc, #444]	; (80165b8 <tcp_connect+0x210>)
 80163fa:	f44f 6287 	mov.w	r2, #1080	; 0x438
 80163fe:	4972      	ldr	r1, [pc, #456]	; (80165c8 <tcp_connect+0x220>)
 8016400:	486f      	ldr	r0, [pc, #444]	; (80165c0 <tcp_connect+0x218>)
 8016402:	f00a fda5 	bl	8020f50 <iprintf>
 8016406:	f06f 0309 	mvn.w	r3, #9
 801640a:	e0d1      	b.n	80165b0 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 801640c:	68bb      	ldr	r3, [r7, #8]
 801640e:	2b00      	cmp	r3, #0
 8016410:	d002      	beq.n	8016418 <tcp_connect+0x70>
 8016412:	68bb      	ldr	r3, [r7, #8]
 8016414:	681b      	ldr	r3, [r3, #0]
 8016416:	e000      	b.n	801641a <tcp_connect+0x72>
 8016418:	2300      	movs	r3, #0
 801641a:	68fa      	ldr	r2, [r7, #12]
 801641c:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 801641e:	68fb      	ldr	r3, [r7, #12]
 8016420:	88fa      	ldrh	r2, [r7, #6]
 8016422:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8016424:	68fb      	ldr	r3, [r7, #12]
 8016426:	7a1b      	ldrb	r3, [r3, #8]
 8016428:	2b00      	cmp	r3, #0
 801642a:	d006      	beq.n	801643a <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 801642c:	68fb      	ldr	r3, [r7, #12]
 801642e:	7a1b      	ldrb	r3, [r3, #8]
 8016430:	4618      	mov	r0, r3
 8016432:	f7fd fa51 	bl	80138d8 <netif_get_by_index>
 8016436:	6278      	str	r0, [r7, #36]	; 0x24
 8016438:	e005      	b.n	8016446 <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 801643a:	68fb      	ldr	r3, [r7, #12]
 801643c:	3304      	adds	r3, #4
 801643e:	4618      	mov	r0, r3
 8016440:	f7fa ff52 	bl	80112e8 <ip4_route>
 8016444:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 8016446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016448:	2b00      	cmp	r3, #0
 801644a:	d102      	bne.n	8016452 <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 801644c:	f06f 0303 	mvn.w	r3, #3
 8016450:	e0ae      	b.n	80165b0 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 8016452:	68fb      	ldr	r3, [r7, #12]
 8016454:	2b00      	cmp	r3, #0
 8016456:	d003      	beq.n	8016460 <tcp_connect+0xb8>
 8016458:	68fb      	ldr	r3, [r7, #12]
 801645a:	681b      	ldr	r3, [r3, #0]
 801645c:	2b00      	cmp	r3, #0
 801645e:	d111      	bne.n	8016484 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 8016460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016462:	2b00      	cmp	r3, #0
 8016464:	d002      	beq.n	801646c <tcp_connect+0xc4>
 8016466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016468:	3304      	adds	r3, #4
 801646a:	e000      	b.n	801646e <tcp_connect+0xc6>
 801646c:	2300      	movs	r3, #0
 801646e:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 8016470:	69fb      	ldr	r3, [r7, #28]
 8016472:	2b00      	cmp	r3, #0
 8016474:	d102      	bne.n	801647c <tcp_connect+0xd4>
      return ERR_RTE;
 8016476:	f06f 0303 	mvn.w	r3, #3
 801647a:	e099      	b.n	80165b0 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801647c:	69fb      	ldr	r3, [r7, #28]
 801647e:	681a      	ldr	r2, [r3, #0]
 8016480:	68fb      	ldr	r3, [r7, #12]
 8016482:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 8016484:	68fb      	ldr	r3, [r7, #12]
 8016486:	8adb      	ldrh	r3, [r3, #22]
 8016488:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 801648a:	68fb      	ldr	r3, [r7, #12]
 801648c:	8adb      	ldrh	r3, [r3, #22]
 801648e:	2b00      	cmp	r3, #0
 8016490:	d10c      	bne.n	80164ac <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 8016492:	f7ff ff43 	bl	801631c <tcp_new_port>
 8016496:	4603      	mov	r3, r0
 8016498:	461a      	mov	r2, r3
 801649a:	68fb      	ldr	r3, [r7, #12]
 801649c:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 801649e:	68fb      	ldr	r3, [r7, #12]
 80164a0:	8adb      	ldrh	r3, [r3, #22]
 80164a2:	2b00      	cmp	r3, #0
 80164a4:	d102      	bne.n	80164ac <tcp_connect+0x104>
      return ERR_BUF;
 80164a6:	f06f 0301 	mvn.w	r3, #1
 80164aa:	e081      	b.n	80165b0 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 80164ac:	68f8      	ldr	r0, [r7, #12]
 80164ae:	f001 f863 	bl	8017578 <tcp_next_iss>
 80164b2:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 80164b4:	68fb      	ldr	r3, [r7, #12]
 80164b6:	2200      	movs	r2, #0
 80164b8:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 80164ba:	68fb      	ldr	r3, [r7, #12]
 80164bc:	697a      	ldr	r2, [r7, #20]
 80164be:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 80164c0:	697b      	ldr	r3, [r7, #20]
 80164c2:	1e5a      	subs	r2, r3, #1
 80164c4:	68fb      	ldr	r3, [r7, #12]
 80164c6:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 80164c8:	697b      	ldr	r3, [r7, #20]
 80164ca:	1e5a      	subs	r2, r3, #1
 80164cc:	68fb      	ldr	r3, [r7, #12]
 80164ce:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 80164d0:	697b      	ldr	r3, [r7, #20]
 80164d2:	1e5a      	subs	r2, r3, #1
 80164d4:	68fb      	ldr	r3, [r7, #12]
 80164d6:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80164d8:	68fb      	ldr	r3, [r7, #12]
 80164da:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80164de:	855a      	strh	r2, [r3, #42]	; 0x2a
 80164e0:	68fb      	ldr	r3, [r7, #12]
 80164e2:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80164e4:	68fb      	ldr	r3, [r7, #12]
 80164e6:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80164e8:	68fb      	ldr	r3, [r7, #12]
 80164ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80164ec:	68fb      	ldr	r3, [r7, #12]
 80164ee:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 80164f0:	68fb      	ldr	r3, [r7, #12]
 80164f2:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80164f6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 80164fa:	68fb      	ldr	r3, [r7, #12]
 80164fc:	f44f 7206 	mov.w	r2, #536	; 0x218
 8016500:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 8016502:	68fb      	ldr	r3, [r7, #12]
 8016504:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 8016506:	68fb      	ldr	r3, [r7, #12]
 8016508:	3304      	adds	r3, #4
 801650a:	461a      	mov	r2, r3
 801650c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801650e:	f001 f859 	bl	80175c4 <tcp_eff_send_mss_netif>
 8016512:	4603      	mov	r3, r0
 8016514:	461a      	mov	r2, r3
 8016516:	68fb      	ldr	r3, [r7, #12]
 8016518:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 801651a:	68fb      	ldr	r3, [r7, #12]
 801651c:	2201      	movs	r2, #1
 801651e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 8016522:	68fb      	ldr	r3, [r7, #12]
 8016524:	683a      	ldr	r2, [r7, #0]
 8016526:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 801652a:	2102      	movs	r1, #2
 801652c:	68f8      	ldr	r0, [r7, #12]
 801652e:	f004 fab9 	bl	801aaa4 <tcp_enqueue_flags>
 8016532:	4603      	mov	r3, r0
 8016534:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 8016536:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801653a:	2b00      	cmp	r3, #0
 801653c:	d136      	bne.n	80165ac <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 801653e:	68fb      	ldr	r3, [r7, #12]
 8016540:	2202      	movs	r2, #2
 8016542:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 8016544:	8b7b      	ldrh	r3, [r7, #26]
 8016546:	2b00      	cmp	r3, #0
 8016548:	d021      	beq.n	801658e <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 801654a:	4b20      	ldr	r3, [pc, #128]	; (80165cc <tcp_connect+0x224>)
 801654c:	681b      	ldr	r3, [r3, #0]
 801654e:	68fa      	ldr	r2, [r7, #12]
 8016550:	429a      	cmp	r2, r3
 8016552:	d105      	bne.n	8016560 <tcp_connect+0x1b8>
 8016554:	4b1d      	ldr	r3, [pc, #116]	; (80165cc <tcp_connect+0x224>)
 8016556:	681b      	ldr	r3, [r3, #0]
 8016558:	68db      	ldr	r3, [r3, #12]
 801655a:	4a1c      	ldr	r2, [pc, #112]	; (80165cc <tcp_connect+0x224>)
 801655c:	6013      	str	r3, [r2, #0]
 801655e:	e013      	b.n	8016588 <tcp_connect+0x1e0>
 8016560:	4b1a      	ldr	r3, [pc, #104]	; (80165cc <tcp_connect+0x224>)
 8016562:	681b      	ldr	r3, [r3, #0]
 8016564:	623b      	str	r3, [r7, #32]
 8016566:	e00c      	b.n	8016582 <tcp_connect+0x1da>
 8016568:	6a3b      	ldr	r3, [r7, #32]
 801656a:	68db      	ldr	r3, [r3, #12]
 801656c:	68fa      	ldr	r2, [r7, #12]
 801656e:	429a      	cmp	r2, r3
 8016570:	d104      	bne.n	801657c <tcp_connect+0x1d4>
 8016572:	68fb      	ldr	r3, [r7, #12]
 8016574:	68da      	ldr	r2, [r3, #12]
 8016576:	6a3b      	ldr	r3, [r7, #32]
 8016578:	60da      	str	r2, [r3, #12]
 801657a:	e005      	b.n	8016588 <tcp_connect+0x1e0>
 801657c:	6a3b      	ldr	r3, [r7, #32]
 801657e:	68db      	ldr	r3, [r3, #12]
 8016580:	623b      	str	r3, [r7, #32]
 8016582:	6a3b      	ldr	r3, [r7, #32]
 8016584:	2b00      	cmp	r3, #0
 8016586:	d1ef      	bne.n	8016568 <tcp_connect+0x1c0>
 8016588:	68fb      	ldr	r3, [r7, #12]
 801658a:	2200      	movs	r2, #0
 801658c:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 801658e:	4b10      	ldr	r3, [pc, #64]	; (80165d0 <tcp_connect+0x228>)
 8016590:	681a      	ldr	r2, [r3, #0]
 8016592:	68fb      	ldr	r3, [r7, #12]
 8016594:	60da      	str	r2, [r3, #12]
 8016596:	4a0e      	ldr	r2, [pc, #56]	; (80165d0 <tcp_connect+0x228>)
 8016598:	68fb      	ldr	r3, [r7, #12]
 801659a:	6013      	str	r3, [r2, #0]
 801659c:	f005 fcac 	bl	801bef8 <tcp_timer_needed>
 80165a0:	4b0c      	ldr	r3, [pc, #48]	; (80165d4 <tcp_connect+0x22c>)
 80165a2:	2201      	movs	r2, #1
 80165a4:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 80165a6:	68f8      	ldr	r0, [r7, #12]
 80165a8:	f004 fb6a 	bl	801ac80 <tcp_output>
  }
  return ret;
 80165ac:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 80165b0:	4618      	mov	r0, r3
 80165b2:	3728      	adds	r7, #40	; 0x28
 80165b4:	46bd      	mov	sp, r7
 80165b6:	bd80      	pop	{r7, pc}
 80165b8:	08025368 	.word	0x08025368
 80165bc:	08025664 	.word	0x08025664
 80165c0:	080253cc 	.word	0x080253cc
 80165c4:	08025680 	.word	0x08025680
 80165c8:	0802569c 	.word	0x0802569c
 80165cc:	24048e8c 	.word	0x24048e8c
 80165d0:	24048e80 	.word	0x24048e80
 80165d4:	24048e7c 	.word	0x24048e7c

080165d8 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80165d8:	b5b0      	push	{r4, r5, r7, lr}
 80165da:	b090      	sub	sp, #64	; 0x40
 80165dc:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80165de:	2300      	movs	r3, #0
 80165e0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 80165e4:	4b94      	ldr	r3, [pc, #592]	; (8016838 <tcp_slowtmr+0x260>)
 80165e6:	681b      	ldr	r3, [r3, #0]
 80165e8:	3301      	adds	r3, #1
 80165ea:	4a93      	ldr	r2, [pc, #588]	; (8016838 <tcp_slowtmr+0x260>)
 80165ec:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80165ee:	4b93      	ldr	r3, [pc, #588]	; (801683c <tcp_slowtmr+0x264>)
 80165f0:	781b      	ldrb	r3, [r3, #0]
 80165f2:	3301      	adds	r3, #1
 80165f4:	b2da      	uxtb	r2, r3
 80165f6:	4b91      	ldr	r3, [pc, #580]	; (801683c <tcp_slowtmr+0x264>)
 80165f8:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 80165fa:	2300      	movs	r3, #0
 80165fc:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 80165fe:	4b90      	ldr	r3, [pc, #576]	; (8016840 <tcp_slowtmr+0x268>)
 8016600:	681b      	ldr	r3, [r3, #0]
 8016602:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8016604:	e29d      	b.n	8016b42 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8016606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016608:	7d1b      	ldrb	r3, [r3, #20]
 801660a:	2b00      	cmp	r3, #0
 801660c:	d106      	bne.n	801661c <tcp_slowtmr+0x44>
 801660e:	4b8d      	ldr	r3, [pc, #564]	; (8016844 <tcp_slowtmr+0x26c>)
 8016610:	f240 42be 	movw	r2, #1214	; 0x4be
 8016614:	498c      	ldr	r1, [pc, #560]	; (8016848 <tcp_slowtmr+0x270>)
 8016616:	488d      	ldr	r0, [pc, #564]	; (801684c <tcp_slowtmr+0x274>)
 8016618:	f00a fc9a 	bl	8020f50 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 801661c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801661e:	7d1b      	ldrb	r3, [r3, #20]
 8016620:	2b01      	cmp	r3, #1
 8016622:	d106      	bne.n	8016632 <tcp_slowtmr+0x5a>
 8016624:	4b87      	ldr	r3, [pc, #540]	; (8016844 <tcp_slowtmr+0x26c>)
 8016626:	f240 42bf 	movw	r2, #1215	; 0x4bf
 801662a:	4989      	ldr	r1, [pc, #548]	; (8016850 <tcp_slowtmr+0x278>)
 801662c:	4887      	ldr	r0, [pc, #540]	; (801684c <tcp_slowtmr+0x274>)
 801662e:	f00a fc8f 	bl	8020f50 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8016632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016634:	7d1b      	ldrb	r3, [r3, #20]
 8016636:	2b0a      	cmp	r3, #10
 8016638:	d106      	bne.n	8016648 <tcp_slowtmr+0x70>
 801663a:	4b82      	ldr	r3, [pc, #520]	; (8016844 <tcp_slowtmr+0x26c>)
 801663c:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8016640:	4984      	ldr	r1, [pc, #528]	; (8016854 <tcp_slowtmr+0x27c>)
 8016642:	4882      	ldr	r0, [pc, #520]	; (801684c <tcp_slowtmr+0x274>)
 8016644:	f00a fc84 	bl	8020f50 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8016648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801664a:	7f9a      	ldrb	r2, [r3, #30]
 801664c:	4b7b      	ldr	r3, [pc, #492]	; (801683c <tcp_slowtmr+0x264>)
 801664e:	781b      	ldrb	r3, [r3, #0]
 8016650:	429a      	cmp	r2, r3
 8016652:	d105      	bne.n	8016660 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8016654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016656:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8016658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801665a:	68db      	ldr	r3, [r3, #12]
 801665c:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 801665e:	e270      	b.n	8016b42 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8016660:	4b76      	ldr	r3, [pc, #472]	; (801683c <tcp_slowtmr+0x264>)
 8016662:	781a      	ldrb	r2, [r3, #0]
 8016664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016666:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8016668:	2300      	movs	r3, #0
 801666a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 801666e:	2300      	movs	r3, #0
 8016670:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8016674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016676:	7d1b      	ldrb	r3, [r3, #20]
 8016678:	2b02      	cmp	r3, #2
 801667a:	d10a      	bne.n	8016692 <tcp_slowtmr+0xba>
 801667c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801667e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016682:	2b05      	cmp	r3, #5
 8016684:	d905      	bls.n	8016692 <tcp_slowtmr+0xba>
      ++pcb_remove;
 8016686:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801668a:	3301      	adds	r3, #1
 801668c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016690:	e11e      	b.n	80168d0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8016692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016694:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016698:	2b0b      	cmp	r3, #11
 801669a:	d905      	bls.n	80166a8 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 801669c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80166a0:	3301      	adds	r3, #1
 80166a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80166a6:	e113      	b.n	80168d0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 80166a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80166aa:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80166ae:	2b00      	cmp	r3, #0
 80166b0:	d075      	beq.n	801679e <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80166b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80166b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80166b6:	2b00      	cmp	r3, #0
 80166b8:	d006      	beq.n	80166c8 <tcp_slowtmr+0xf0>
 80166ba:	4b62      	ldr	r3, [pc, #392]	; (8016844 <tcp_slowtmr+0x26c>)
 80166bc:	f240 42d4 	movw	r2, #1236	; 0x4d4
 80166c0:	4965      	ldr	r1, [pc, #404]	; (8016858 <tcp_slowtmr+0x280>)
 80166c2:	4862      	ldr	r0, [pc, #392]	; (801684c <tcp_slowtmr+0x274>)
 80166c4:	f00a fc44 	bl	8020f50 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80166c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80166ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80166cc:	2b00      	cmp	r3, #0
 80166ce:	d106      	bne.n	80166de <tcp_slowtmr+0x106>
 80166d0:	4b5c      	ldr	r3, [pc, #368]	; (8016844 <tcp_slowtmr+0x26c>)
 80166d2:	f240 42d5 	movw	r2, #1237	; 0x4d5
 80166d6:	4961      	ldr	r1, [pc, #388]	; (801685c <tcp_slowtmr+0x284>)
 80166d8:	485c      	ldr	r0, [pc, #368]	; (801684c <tcp_slowtmr+0x274>)
 80166da:	f00a fc39 	bl	8020f50 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80166de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80166e0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80166e4:	2b0b      	cmp	r3, #11
 80166e6:	d905      	bls.n	80166f4 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 80166e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80166ec:	3301      	adds	r3, #1
 80166ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80166f2:	e0ed      	b.n	80168d0 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80166f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80166f6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80166fa:	3b01      	subs	r3, #1
 80166fc:	4a58      	ldr	r2, [pc, #352]	; (8016860 <tcp_slowtmr+0x288>)
 80166fe:	5cd3      	ldrb	r3, [r2, r3]
 8016700:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8016702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016704:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8016708:	7c7a      	ldrb	r2, [r7, #17]
 801670a:	429a      	cmp	r2, r3
 801670c:	d907      	bls.n	801671e <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 801670e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016710:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8016714:	3301      	adds	r3, #1
 8016716:	b2da      	uxtb	r2, r3
 8016718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801671a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 801671e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016720:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8016724:	7c7a      	ldrb	r2, [r7, #17]
 8016726:	429a      	cmp	r2, r3
 8016728:	f200 80d2 	bhi.w	80168d0 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 801672c:	2301      	movs	r3, #1
 801672e:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8016730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016732:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016736:	2b00      	cmp	r3, #0
 8016738:	d108      	bne.n	801674c <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 801673a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801673c:	f005 f95a 	bl	801b9f4 <tcp_zero_window_probe>
 8016740:	4603      	mov	r3, r0
 8016742:	2b00      	cmp	r3, #0
 8016744:	d014      	beq.n	8016770 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8016746:	2300      	movs	r3, #0
 8016748:	623b      	str	r3, [r7, #32]
 801674a:	e011      	b.n	8016770 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 801674c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801674e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016752:	4619      	mov	r1, r3
 8016754:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016756:	f004 f80d 	bl	801a774 <tcp_split_unsent_seg>
 801675a:	4603      	mov	r3, r0
 801675c:	2b00      	cmp	r3, #0
 801675e:	d107      	bne.n	8016770 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8016760:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016762:	f004 fa8d 	bl	801ac80 <tcp_output>
 8016766:	4603      	mov	r3, r0
 8016768:	2b00      	cmp	r3, #0
 801676a:	d101      	bne.n	8016770 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 801676c:	2300      	movs	r3, #0
 801676e:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8016770:	6a3b      	ldr	r3, [r7, #32]
 8016772:	2b00      	cmp	r3, #0
 8016774:	f000 80ac 	beq.w	80168d0 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8016778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801677a:	2200      	movs	r2, #0
 801677c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8016780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016782:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8016786:	2b06      	cmp	r3, #6
 8016788:	f200 80a2 	bhi.w	80168d0 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 801678c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801678e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8016792:	3301      	adds	r3, #1
 8016794:	b2da      	uxtb	r2, r3
 8016796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016798:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 801679c:	e098      	b.n	80168d0 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 801679e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80167a0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80167a4:	2b00      	cmp	r3, #0
 80167a6:	db0f      	blt.n	80167c8 <tcp_slowtmr+0x1f0>
 80167a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80167aa:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80167ae:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80167b2:	4293      	cmp	r3, r2
 80167b4:	d008      	beq.n	80167c8 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 80167b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80167b8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80167bc:	b29b      	uxth	r3, r3
 80167be:	3301      	adds	r3, #1
 80167c0:	b29b      	uxth	r3, r3
 80167c2:	b21a      	sxth	r2, r3
 80167c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80167c6:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 80167c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80167ca:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 80167ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80167d0:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80167d4:	429a      	cmp	r2, r3
 80167d6:	db7b      	blt.n	80168d0 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80167d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80167da:	f004 fd49 	bl	801b270 <tcp_rexmit_rto_prepare>
 80167de:	4603      	mov	r3, r0
 80167e0:	2b00      	cmp	r3, #0
 80167e2:	d007      	beq.n	80167f4 <tcp_slowtmr+0x21c>
 80167e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80167e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80167e8:	2b00      	cmp	r3, #0
 80167ea:	d171      	bne.n	80168d0 <tcp_slowtmr+0x2f8>
 80167ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80167ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80167f0:	2b00      	cmp	r3, #0
 80167f2:	d06d      	beq.n	80168d0 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 80167f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80167f6:	7d1b      	ldrb	r3, [r3, #20]
 80167f8:	2b02      	cmp	r3, #2
 80167fa:	d03a      	beq.n	8016872 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80167fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80167fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016802:	2b0c      	cmp	r3, #12
 8016804:	bf28      	it	cs
 8016806:	230c      	movcs	r3, #12
 8016808:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 801680a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801680c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8016810:	10db      	asrs	r3, r3, #3
 8016812:	b21b      	sxth	r3, r3
 8016814:	461a      	mov	r2, r3
 8016816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016818:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801681c:	4413      	add	r3, r2
 801681e:	7efa      	ldrb	r2, [r7, #27]
 8016820:	4910      	ldr	r1, [pc, #64]	; (8016864 <tcp_slowtmr+0x28c>)
 8016822:	5c8a      	ldrb	r2, [r1, r2]
 8016824:	4093      	lsls	r3, r2
 8016826:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8016828:	697b      	ldr	r3, [r7, #20]
 801682a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 801682e:	4293      	cmp	r3, r2
 8016830:	dc1a      	bgt.n	8016868 <tcp_slowtmr+0x290>
 8016832:	697b      	ldr	r3, [r7, #20]
 8016834:	b21a      	sxth	r2, r3
 8016836:	e019      	b.n	801686c <tcp_slowtmr+0x294>
 8016838:	24048e84 	.word	0x24048e84
 801683c:	24040761 	.word	0x24040761
 8016840:	24048e80 	.word	0x24048e80
 8016844:	08025368 	.word	0x08025368
 8016848:	080256cc 	.word	0x080256cc
 801684c:	080253cc 	.word	0x080253cc
 8016850:	080256f8 	.word	0x080256f8
 8016854:	08025724 	.word	0x08025724
 8016858:	08025754 	.word	0x08025754
 801685c:	08025788 	.word	0x08025788
 8016860:	08027030 	.word	0x08027030
 8016864:	08027020 	.word	0x08027020
 8016868:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801686c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801686e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8016872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016874:	2200      	movs	r2, #0
 8016876:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8016878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801687a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801687e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016880:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8016884:	4293      	cmp	r3, r2
 8016886:	bf28      	it	cs
 8016888:	4613      	movcs	r3, r2
 801688a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 801688c:	8a7b      	ldrh	r3, [r7, #18]
 801688e:	085b      	lsrs	r3, r3, #1
 8016890:	b29a      	uxth	r2, r3
 8016892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016894:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8016898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801689a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801689e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80168a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80168a2:	005b      	lsls	r3, r3, #1
 80168a4:	b29b      	uxth	r3, r3
 80168a6:	429a      	cmp	r2, r3
 80168a8:	d206      	bcs.n	80168b8 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80168aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80168ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80168ae:	005b      	lsls	r3, r3, #1
 80168b0:	b29a      	uxth	r2, r3
 80168b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80168b4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 80168b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80168ba:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80168bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80168be:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 80168c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80168c4:	2200      	movs	r2, #0
 80168c6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 80168ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80168cc:	f004 fd40 	bl	801b350 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 80168d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80168d2:	7d1b      	ldrb	r3, [r3, #20]
 80168d4:	2b06      	cmp	r3, #6
 80168d6:	d111      	bne.n	80168fc <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 80168d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80168da:	8b5b      	ldrh	r3, [r3, #26]
 80168dc:	f003 0310 	and.w	r3, r3, #16
 80168e0:	2b00      	cmp	r3, #0
 80168e2:	d00b      	beq.n	80168fc <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80168e4:	4b9c      	ldr	r3, [pc, #624]	; (8016b58 <tcp_slowtmr+0x580>)
 80168e6:	681a      	ldr	r2, [r3, #0]
 80168e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80168ea:	6a1b      	ldr	r3, [r3, #32]
 80168ec:	1ad3      	subs	r3, r2, r3
 80168ee:	2b28      	cmp	r3, #40	; 0x28
 80168f0:	d904      	bls.n	80168fc <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 80168f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80168f6:	3301      	adds	r3, #1
 80168f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80168fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80168fe:	7a5b      	ldrb	r3, [r3, #9]
 8016900:	f003 0308 	and.w	r3, r3, #8
 8016904:	2b00      	cmp	r3, #0
 8016906:	d04a      	beq.n	801699e <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8016908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801690a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801690c:	2b04      	cmp	r3, #4
 801690e:	d003      	beq.n	8016918 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8016910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016912:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8016914:	2b07      	cmp	r3, #7
 8016916:	d142      	bne.n	801699e <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8016918:	4b8f      	ldr	r3, [pc, #572]	; (8016b58 <tcp_slowtmr+0x580>)
 801691a:	681a      	ldr	r2, [r3, #0]
 801691c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801691e:	6a1b      	ldr	r3, [r3, #32]
 8016920:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8016922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016924:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8016928:	4b8c      	ldr	r3, [pc, #560]	; (8016b5c <tcp_slowtmr+0x584>)
 801692a:	440b      	add	r3, r1
 801692c:	498c      	ldr	r1, [pc, #560]	; (8016b60 <tcp_slowtmr+0x588>)
 801692e:	fba1 1303 	umull	r1, r3, r1, r3
 8016932:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8016934:	429a      	cmp	r2, r3
 8016936:	d90a      	bls.n	801694e <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8016938:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801693c:	3301      	adds	r3, #1
 801693e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8016942:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016946:	3301      	adds	r3, #1
 8016948:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801694c:	e027      	b.n	801699e <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801694e:	4b82      	ldr	r3, [pc, #520]	; (8016b58 <tcp_slowtmr+0x580>)
 8016950:	681a      	ldr	r2, [r3, #0]
 8016952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016954:	6a1b      	ldr	r3, [r3, #32]
 8016956:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8016958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801695a:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 801695e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016960:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8016964:	4618      	mov	r0, r3
 8016966:	4b7f      	ldr	r3, [pc, #508]	; (8016b64 <tcp_slowtmr+0x58c>)
 8016968:	fb03 f300 	mul.w	r3, r3, r0
 801696c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 801696e:	497c      	ldr	r1, [pc, #496]	; (8016b60 <tcp_slowtmr+0x588>)
 8016970:	fba1 1303 	umull	r1, r3, r1, r3
 8016974:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8016976:	429a      	cmp	r2, r3
 8016978:	d911      	bls.n	801699e <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 801697a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801697c:	f004 fffa 	bl	801b974 <tcp_keepalive>
 8016980:	4603      	mov	r3, r0
 8016982:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8016986:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 801698a:	2b00      	cmp	r3, #0
 801698c:	d107      	bne.n	801699e <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 801698e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016990:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8016994:	3301      	adds	r3, #1
 8016996:	b2da      	uxtb	r2, r3
 8016998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801699a:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 801699e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80169a2:	2b00      	cmp	r3, #0
 80169a4:	d011      	beq.n	80169ca <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80169a6:	4b6c      	ldr	r3, [pc, #432]	; (8016b58 <tcp_slowtmr+0x580>)
 80169a8:	681a      	ldr	r2, [r3, #0]
 80169aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169ac:	6a1b      	ldr	r3, [r3, #32]
 80169ae:	1ad2      	subs	r2, r2, r3
 80169b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169b2:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80169b6:	4619      	mov	r1, r3
 80169b8:	460b      	mov	r3, r1
 80169ba:	005b      	lsls	r3, r3, #1
 80169bc:	440b      	add	r3, r1
 80169be:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80169c0:	429a      	cmp	r2, r3
 80169c2:	d302      	bcc.n	80169ca <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 80169c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80169c6:	f000 fea7 	bl	8017718 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 80169ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169cc:	7d1b      	ldrb	r3, [r3, #20]
 80169ce:	2b03      	cmp	r3, #3
 80169d0:	d10b      	bne.n	80169ea <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80169d2:	4b61      	ldr	r3, [pc, #388]	; (8016b58 <tcp_slowtmr+0x580>)
 80169d4:	681a      	ldr	r2, [r3, #0]
 80169d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169d8:	6a1b      	ldr	r3, [r3, #32]
 80169da:	1ad3      	subs	r3, r2, r3
 80169dc:	2b28      	cmp	r3, #40	; 0x28
 80169de:	d904      	bls.n	80169ea <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 80169e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80169e4:	3301      	adds	r3, #1
 80169e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 80169ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169ec:	7d1b      	ldrb	r3, [r3, #20]
 80169ee:	2b09      	cmp	r3, #9
 80169f0:	d10b      	bne.n	8016a0a <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80169f2:	4b59      	ldr	r3, [pc, #356]	; (8016b58 <tcp_slowtmr+0x580>)
 80169f4:	681a      	ldr	r2, [r3, #0]
 80169f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169f8:	6a1b      	ldr	r3, [r3, #32]
 80169fa:	1ad3      	subs	r3, r2, r3
 80169fc:	2bf0      	cmp	r3, #240	; 0xf0
 80169fe:	d904      	bls.n	8016a0a <tcp_slowtmr+0x432>
        ++pcb_remove;
 8016a00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016a04:	3301      	adds	r3, #1
 8016a06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8016a0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016a0e:	2b00      	cmp	r3, #0
 8016a10:	d060      	beq.n	8016ad4 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8016a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016a18:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8016a1a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016a1c:	f000 fcc8 	bl	80173b0 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8016a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a22:	2b00      	cmp	r3, #0
 8016a24:	d010      	beq.n	8016a48 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8016a26:	4b50      	ldr	r3, [pc, #320]	; (8016b68 <tcp_slowtmr+0x590>)
 8016a28:	681b      	ldr	r3, [r3, #0]
 8016a2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016a2c:	429a      	cmp	r2, r3
 8016a2e:	d106      	bne.n	8016a3e <tcp_slowtmr+0x466>
 8016a30:	4b4e      	ldr	r3, [pc, #312]	; (8016b6c <tcp_slowtmr+0x594>)
 8016a32:	f240 526d 	movw	r2, #1389	; 0x56d
 8016a36:	494e      	ldr	r1, [pc, #312]	; (8016b70 <tcp_slowtmr+0x598>)
 8016a38:	484e      	ldr	r0, [pc, #312]	; (8016b74 <tcp_slowtmr+0x59c>)
 8016a3a:	f00a fa89 	bl	8020f50 <iprintf>
        prev->next = pcb->next;
 8016a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a40:	68da      	ldr	r2, [r3, #12]
 8016a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a44:	60da      	str	r2, [r3, #12]
 8016a46:	e00f      	b.n	8016a68 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8016a48:	4b47      	ldr	r3, [pc, #284]	; (8016b68 <tcp_slowtmr+0x590>)
 8016a4a:	681b      	ldr	r3, [r3, #0]
 8016a4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016a4e:	429a      	cmp	r2, r3
 8016a50:	d006      	beq.n	8016a60 <tcp_slowtmr+0x488>
 8016a52:	4b46      	ldr	r3, [pc, #280]	; (8016b6c <tcp_slowtmr+0x594>)
 8016a54:	f240 5271 	movw	r2, #1393	; 0x571
 8016a58:	4947      	ldr	r1, [pc, #284]	; (8016b78 <tcp_slowtmr+0x5a0>)
 8016a5a:	4846      	ldr	r0, [pc, #280]	; (8016b74 <tcp_slowtmr+0x59c>)
 8016a5c:	f00a fa78 	bl	8020f50 <iprintf>
        tcp_active_pcbs = pcb->next;
 8016a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a62:	68db      	ldr	r3, [r3, #12]
 8016a64:	4a40      	ldr	r2, [pc, #256]	; (8016b68 <tcp_slowtmr+0x590>)
 8016a66:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8016a68:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016a6c:	2b00      	cmp	r3, #0
 8016a6e:	d013      	beq.n	8016a98 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8016a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a72:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8016a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a76:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8016a78:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8016a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a7c:	3304      	adds	r3, #4
 8016a7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016a80:	8ad2      	ldrh	r2, [r2, #22]
 8016a82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016a84:	8b09      	ldrh	r1, [r1, #24]
 8016a86:	9102      	str	r1, [sp, #8]
 8016a88:	9201      	str	r2, [sp, #4]
 8016a8a:	9300      	str	r3, [sp, #0]
 8016a8c:	462b      	mov	r3, r5
 8016a8e:	4622      	mov	r2, r4
 8016a90:	4601      	mov	r1, r0
 8016a92:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016a94:	f004 feba 	bl	801b80c <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8016a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a9a:	691b      	ldr	r3, [r3, #16]
 8016a9c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8016a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016aa0:	7d1b      	ldrb	r3, [r3, #20]
 8016aa2:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8016aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016aa6:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8016aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016aaa:	68db      	ldr	r3, [r3, #12]
 8016aac:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8016aae:	6838      	ldr	r0, [r7, #0]
 8016ab0:	f7ff f844 	bl	8015b3c <tcp_free>

      tcp_active_pcbs_changed = 0;
 8016ab4:	4b31      	ldr	r3, [pc, #196]	; (8016b7c <tcp_slowtmr+0x5a4>)
 8016ab6:	2200      	movs	r2, #0
 8016ab8:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8016aba:	68fb      	ldr	r3, [r7, #12]
 8016abc:	2b00      	cmp	r3, #0
 8016abe:	d004      	beq.n	8016aca <tcp_slowtmr+0x4f2>
 8016ac0:	68fb      	ldr	r3, [r7, #12]
 8016ac2:	f06f 010c 	mvn.w	r1, #12
 8016ac6:	68b8      	ldr	r0, [r7, #8]
 8016ac8:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8016aca:	4b2c      	ldr	r3, [pc, #176]	; (8016b7c <tcp_slowtmr+0x5a4>)
 8016acc:	781b      	ldrb	r3, [r3, #0]
 8016ace:	2b00      	cmp	r3, #0
 8016ad0:	d037      	beq.n	8016b42 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 8016ad2:	e592      	b.n	80165fa <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8016ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ad6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8016ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ada:	68db      	ldr	r3, [r3, #12]
 8016adc:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8016ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ae0:	7f1b      	ldrb	r3, [r3, #28]
 8016ae2:	3301      	adds	r3, #1
 8016ae4:	b2da      	uxtb	r2, r3
 8016ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ae8:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8016aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016aec:	7f1a      	ldrb	r2, [r3, #28]
 8016aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016af0:	7f5b      	ldrb	r3, [r3, #29]
 8016af2:	429a      	cmp	r2, r3
 8016af4:	d325      	bcc.n	8016b42 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 8016af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016af8:	2200      	movs	r2, #0
 8016afa:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8016afc:	4b1f      	ldr	r3, [pc, #124]	; (8016b7c <tcp_slowtmr+0x5a4>)
 8016afe:	2200      	movs	r2, #0
 8016b00:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8016b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016b08:	2b00      	cmp	r3, #0
 8016b0a:	d00b      	beq.n	8016b24 <tcp_slowtmr+0x54c>
 8016b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016b12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016b14:	6912      	ldr	r2, [r2, #16]
 8016b16:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016b18:	4610      	mov	r0, r2
 8016b1a:	4798      	blx	r3
 8016b1c:	4603      	mov	r3, r0
 8016b1e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8016b22:	e002      	b.n	8016b2a <tcp_slowtmr+0x552>
 8016b24:	2300      	movs	r3, #0
 8016b26:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8016b2a:	4b14      	ldr	r3, [pc, #80]	; (8016b7c <tcp_slowtmr+0x5a4>)
 8016b2c:	781b      	ldrb	r3, [r3, #0]
 8016b2e:	2b00      	cmp	r3, #0
 8016b30:	d000      	beq.n	8016b34 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 8016b32:	e562      	b.n	80165fa <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8016b34:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8016b38:	2b00      	cmp	r3, #0
 8016b3a:	d102      	bne.n	8016b42 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8016b3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016b3e:	f004 f89f 	bl	801ac80 <tcp_output>
  while (pcb != NULL) {
 8016b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b44:	2b00      	cmp	r3, #0
 8016b46:	f47f ad5e 	bne.w	8016606 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8016b4a:	2300      	movs	r3, #0
 8016b4c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8016b4e:	4b0c      	ldr	r3, [pc, #48]	; (8016b80 <tcp_slowtmr+0x5a8>)
 8016b50:	681b      	ldr	r3, [r3, #0]
 8016b52:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8016b54:	e069      	b.n	8016c2a <tcp_slowtmr+0x652>
 8016b56:	bf00      	nop
 8016b58:	24048e84 	.word	0x24048e84
 8016b5c:	000a4cb8 	.word	0x000a4cb8
 8016b60:	10624dd3 	.word	0x10624dd3
 8016b64:	000124f8 	.word	0x000124f8
 8016b68:	24048e80 	.word	0x24048e80
 8016b6c:	08025368 	.word	0x08025368
 8016b70:	080257c0 	.word	0x080257c0
 8016b74:	080253cc 	.word	0x080253cc
 8016b78:	080257ec 	.word	0x080257ec
 8016b7c:	24048e7c 	.word	0x24048e7c
 8016b80:	24048e90 	.word	0x24048e90
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8016b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b86:	7d1b      	ldrb	r3, [r3, #20]
 8016b88:	2b0a      	cmp	r3, #10
 8016b8a:	d006      	beq.n	8016b9a <tcp_slowtmr+0x5c2>
 8016b8c:	4b2a      	ldr	r3, [pc, #168]	; (8016c38 <tcp_slowtmr+0x660>)
 8016b8e:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8016b92:	492a      	ldr	r1, [pc, #168]	; (8016c3c <tcp_slowtmr+0x664>)
 8016b94:	482a      	ldr	r0, [pc, #168]	; (8016c40 <tcp_slowtmr+0x668>)
 8016b96:	f00a f9db 	bl	8020f50 <iprintf>
    pcb_remove = 0;
 8016b9a:	2300      	movs	r3, #0
 8016b9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8016ba0:	4b28      	ldr	r3, [pc, #160]	; (8016c44 <tcp_slowtmr+0x66c>)
 8016ba2:	681a      	ldr	r2, [r3, #0]
 8016ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ba6:	6a1b      	ldr	r3, [r3, #32]
 8016ba8:	1ad3      	subs	r3, r2, r3
 8016baa:	2bf0      	cmp	r3, #240	; 0xf0
 8016bac:	d904      	bls.n	8016bb8 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8016bae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016bb2:	3301      	adds	r3, #1
 8016bb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8016bb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016bbc:	2b00      	cmp	r3, #0
 8016bbe:	d02f      	beq.n	8016c20 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8016bc0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016bc2:	f000 fbf5 	bl	80173b0 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8016bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016bc8:	2b00      	cmp	r3, #0
 8016bca:	d010      	beq.n	8016bee <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8016bcc:	4b1e      	ldr	r3, [pc, #120]	; (8016c48 <tcp_slowtmr+0x670>)
 8016bce:	681b      	ldr	r3, [r3, #0]
 8016bd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016bd2:	429a      	cmp	r2, r3
 8016bd4:	d106      	bne.n	8016be4 <tcp_slowtmr+0x60c>
 8016bd6:	4b18      	ldr	r3, [pc, #96]	; (8016c38 <tcp_slowtmr+0x660>)
 8016bd8:	f240 52af 	movw	r2, #1455	; 0x5af
 8016bdc:	491b      	ldr	r1, [pc, #108]	; (8016c4c <tcp_slowtmr+0x674>)
 8016bde:	4818      	ldr	r0, [pc, #96]	; (8016c40 <tcp_slowtmr+0x668>)
 8016be0:	f00a f9b6 	bl	8020f50 <iprintf>
        prev->next = pcb->next;
 8016be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016be6:	68da      	ldr	r2, [r3, #12]
 8016be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016bea:	60da      	str	r2, [r3, #12]
 8016bec:	e00f      	b.n	8016c0e <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8016bee:	4b16      	ldr	r3, [pc, #88]	; (8016c48 <tcp_slowtmr+0x670>)
 8016bf0:	681b      	ldr	r3, [r3, #0]
 8016bf2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016bf4:	429a      	cmp	r2, r3
 8016bf6:	d006      	beq.n	8016c06 <tcp_slowtmr+0x62e>
 8016bf8:	4b0f      	ldr	r3, [pc, #60]	; (8016c38 <tcp_slowtmr+0x660>)
 8016bfa:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8016bfe:	4914      	ldr	r1, [pc, #80]	; (8016c50 <tcp_slowtmr+0x678>)
 8016c00:	480f      	ldr	r0, [pc, #60]	; (8016c40 <tcp_slowtmr+0x668>)
 8016c02:	f00a f9a5 	bl	8020f50 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8016c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c08:	68db      	ldr	r3, [r3, #12]
 8016c0a:	4a0f      	ldr	r2, [pc, #60]	; (8016c48 <tcp_slowtmr+0x670>)
 8016c0c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8016c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c10:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8016c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c14:	68db      	ldr	r3, [r3, #12]
 8016c16:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8016c18:	69f8      	ldr	r0, [r7, #28]
 8016c1a:	f7fe ff8f 	bl	8015b3c <tcp_free>
 8016c1e:	e004      	b.n	8016c2a <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8016c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c22:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8016c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c26:	68db      	ldr	r3, [r3, #12]
 8016c28:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8016c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c2c:	2b00      	cmp	r3, #0
 8016c2e:	d1a9      	bne.n	8016b84 <tcp_slowtmr+0x5ac>
    }
  }
}
 8016c30:	bf00      	nop
 8016c32:	3730      	adds	r7, #48	; 0x30
 8016c34:	46bd      	mov	sp, r7
 8016c36:	bdb0      	pop	{r4, r5, r7, pc}
 8016c38:	08025368 	.word	0x08025368
 8016c3c:	08025818 	.word	0x08025818
 8016c40:	080253cc 	.word	0x080253cc
 8016c44:	24048e84 	.word	0x24048e84
 8016c48:	24048e90 	.word	0x24048e90
 8016c4c:	08025848 	.word	0x08025848
 8016c50:	08025870 	.word	0x08025870

08016c54 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8016c54:	b580      	push	{r7, lr}
 8016c56:	b082      	sub	sp, #8
 8016c58:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8016c5a:	4b2d      	ldr	r3, [pc, #180]	; (8016d10 <tcp_fasttmr+0xbc>)
 8016c5c:	781b      	ldrb	r3, [r3, #0]
 8016c5e:	3301      	adds	r3, #1
 8016c60:	b2da      	uxtb	r2, r3
 8016c62:	4b2b      	ldr	r3, [pc, #172]	; (8016d10 <tcp_fasttmr+0xbc>)
 8016c64:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8016c66:	4b2b      	ldr	r3, [pc, #172]	; (8016d14 <tcp_fasttmr+0xc0>)
 8016c68:	681b      	ldr	r3, [r3, #0]
 8016c6a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8016c6c:	e048      	b.n	8016d00 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8016c6e:	687b      	ldr	r3, [r7, #4]
 8016c70:	7f9a      	ldrb	r2, [r3, #30]
 8016c72:	4b27      	ldr	r3, [pc, #156]	; (8016d10 <tcp_fasttmr+0xbc>)
 8016c74:	781b      	ldrb	r3, [r3, #0]
 8016c76:	429a      	cmp	r2, r3
 8016c78:	d03f      	beq.n	8016cfa <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8016c7a:	4b25      	ldr	r3, [pc, #148]	; (8016d10 <tcp_fasttmr+0xbc>)
 8016c7c:	781a      	ldrb	r2, [r3, #0]
 8016c7e:	687b      	ldr	r3, [r7, #4]
 8016c80:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8016c82:	687b      	ldr	r3, [r7, #4]
 8016c84:	8b5b      	ldrh	r3, [r3, #26]
 8016c86:	f003 0301 	and.w	r3, r3, #1
 8016c8a:	2b00      	cmp	r3, #0
 8016c8c:	d010      	beq.n	8016cb0 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8016c8e:	687b      	ldr	r3, [r7, #4]
 8016c90:	8b5b      	ldrh	r3, [r3, #26]
 8016c92:	f043 0302 	orr.w	r3, r3, #2
 8016c96:	b29a      	uxth	r2, r3
 8016c98:	687b      	ldr	r3, [r7, #4]
 8016c9a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8016c9c:	6878      	ldr	r0, [r7, #4]
 8016c9e:	f003 ffef 	bl	801ac80 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8016ca2:	687b      	ldr	r3, [r7, #4]
 8016ca4:	8b5b      	ldrh	r3, [r3, #26]
 8016ca6:	f023 0303 	bic.w	r3, r3, #3
 8016caa:	b29a      	uxth	r2, r3
 8016cac:	687b      	ldr	r3, [r7, #4]
 8016cae:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8016cb0:	687b      	ldr	r3, [r7, #4]
 8016cb2:	8b5b      	ldrh	r3, [r3, #26]
 8016cb4:	f003 0308 	and.w	r3, r3, #8
 8016cb8:	2b00      	cmp	r3, #0
 8016cba:	d009      	beq.n	8016cd0 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8016cbc:	687b      	ldr	r3, [r7, #4]
 8016cbe:	8b5b      	ldrh	r3, [r3, #26]
 8016cc0:	f023 0308 	bic.w	r3, r3, #8
 8016cc4:	b29a      	uxth	r2, r3
 8016cc6:	687b      	ldr	r3, [r7, #4]
 8016cc8:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8016cca:	6878      	ldr	r0, [r7, #4]
 8016ccc:	f7ff f8c6 	bl	8015e5c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8016cd0:	687b      	ldr	r3, [r7, #4]
 8016cd2:	68db      	ldr	r3, [r3, #12]
 8016cd4:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8016cd6:	687b      	ldr	r3, [r7, #4]
 8016cd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016cda:	2b00      	cmp	r3, #0
 8016cdc:	d00a      	beq.n	8016cf4 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8016cde:	4b0e      	ldr	r3, [pc, #56]	; (8016d18 <tcp_fasttmr+0xc4>)
 8016ce0:	2200      	movs	r2, #0
 8016ce2:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8016ce4:	6878      	ldr	r0, [r7, #4]
 8016ce6:	f000 f819 	bl	8016d1c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8016cea:	4b0b      	ldr	r3, [pc, #44]	; (8016d18 <tcp_fasttmr+0xc4>)
 8016cec:	781b      	ldrb	r3, [r3, #0]
 8016cee:	2b00      	cmp	r3, #0
 8016cf0:	d000      	beq.n	8016cf4 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8016cf2:	e7b8      	b.n	8016c66 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8016cf4:	683b      	ldr	r3, [r7, #0]
 8016cf6:	607b      	str	r3, [r7, #4]
 8016cf8:	e002      	b.n	8016d00 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8016cfa:	687b      	ldr	r3, [r7, #4]
 8016cfc:	68db      	ldr	r3, [r3, #12]
 8016cfe:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8016d00:	687b      	ldr	r3, [r7, #4]
 8016d02:	2b00      	cmp	r3, #0
 8016d04:	d1b3      	bne.n	8016c6e <tcp_fasttmr+0x1a>
    }
  }
}
 8016d06:	bf00      	nop
 8016d08:	3708      	adds	r7, #8
 8016d0a:	46bd      	mov	sp, r7
 8016d0c:	bd80      	pop	{r7, pc}
 8016d0e:	bf00      	nop
 8016d10:	24040761 	.word	0x24040761
 8016d14:	24048e80 	.word	0x24048e80
 8016d18:	24048e7c 	.word	0x24048e7c

08016d1c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8016d1c:	b590      	push	{r4, r7, lr}
 8016d1e:	b085      	sub	sp, #20
 8016d20:	af00      	add	r7, sp, #0
 8016d22:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8016d24:	687b      	ldr	r3, [r7, #4]
 8016d26:	2b00      	cmp	r3, #0
 8016d28:	d109      	bne.n	8016d3e <tcp_process_refused_data+0x22>
 8016d2a:	4b37      	ldr	r3, [pc, #220]	; (8016e08 <tcp_process_refused_data+0xec>)
 8016d2c:	f240 6209 	movw	r2, #1545	; 0x609
 8016d30:	4936      	ldr	r1, [pc, #216]	; (8016e0c <tcp_process_refused_data+0xf0>)
 8016d32:	4837      	ldr	r0, [pc, #220]	; (8016e10 <tcp_process_refused_data+0xf4>)
 8016d34:	f00a f90c 	bl	8020f50 <iprintf>
 8016d38:	f06f 030f 	mvn.w	r3, #15
 8016d3c:	e060      	b.n	8016e00 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8016d3e:	687b      	ldr	r3, [r7, #4]
 8016d40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016d42:	7b5b      	ldrb	r3, [r3, #13]
 8016d44:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8016d46:	687b      	ldr	r3, [r7, #4]
 8016d48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016d4a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8016d4c:	687b      	ldr	r3, [r7, #4]
 8016d4e:	2200      	movs	r2, #0
 8016d50:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8016d52:	687b      	ldr	r3, [r7, #4]
 8016d54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8016d58:	2b00      	cmp	r3, #0
 8016d5a:	d00b      	beq.n	8016d74 <tcp_process_refused_data+0x58>
 8016d5c:	687b      	ldr	r3, [r7, #4]
 8016d5e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8016d62:	687b      	ldr	r3, [r7, #4]
 8016d64:	6918      	ldr	r0, [r3, #16]
 8016d66:	2300      	movs	r3, #0
 8016d68:	68ba      	ldr	r2, [r7, #8]
 8016d6a:	6879      	ldr	r1, [r7, #4]
 8016d6c:	47a0      	blx	r4
 8016d6e:	4603      	mov	r3, r0
 8016d70:	73fb      	strb	r3, [r7, #15]
 8016d72:	e007      	b.n	8016d84 <tcp_process_refused_data+0x68>
 8016d74:	2300      	movs	r3, #0
 8016d76:	68ba      	ldr	r2, [r7, #8]
 8016d78:	6879      	ldr	r1, [r7, #4]
 8016d7a:	2000      	movs	r0, #0
 8016d7c:	f000 f8a2 	bl	8016ec4 <tcp_recv_null>
 8016d80:	4603      	mov	r3, r0
 8016d82:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8016d84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016d88:	2b00      	cmp	r3, #0
 8016d8a:	d12a      	bne.n	8016de2 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8016d8c:	7bbb      	ldrb	r3, [r7, #14]
 8016d8e:	f003 0320 	and.w	r3, r3, #32
 8016d92:	2b00      	cmp	r3, #0
 8016d94:	d033      	beq.n	8016dfe <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8016d96:	687b      	ldr	r3, [r7, #4]
 8016d98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016d9a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8016d9e:	d005      	beq.n	8016dac <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8016da0:	687b      	ldr	r3, [r7, #4]
 8016da2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016da4:	3301      	adds	r3, #1
 8016da6:	b29a      	uxth	r2, r3
 8016da8:	687b      	ldr	r3, [r7, #4]
 8016daa:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8016dac:	687b      	ldr	r3, [r7, #4]
 8016dae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8016db2:	2b00      	cmp	r3, #0
 8016db4:	d00b      	beq.n	8016dce <tcp_process_refused_data+0xb2>
 8016db6:	687b      	ldr	r3, [r7, #4]
 8016db8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8016dbc:	687b      	ldr	r3, [r7, #4]
 8016dbe:	6918      	ldr	r0, [r3, #16]
 8016dc0:	2300      	movs	r3, #0
 8016dc2:	2200      	movs	r2, #0
 8016dc4:	6879      	ldr	r1, [r7, #4]
 8016dc6:	47a0      	blx	r4
 8016dc8:	4603      	mov	r3, r0
 8016dca:	73fb      	strb	r3, [r7, #15]
 8016dcc:	e001      	b.n	8016dd2 <tcp_process_refused_data+0xb6>
 8016dce:	2300      	movs	r3, #0
 8016dd0:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8016dd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016dd6:	f113 0f0d 	cmn.w	r3, #13
 8016dda:	d110      	bne.n	8016dfe <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8016ddc:	f06f 030c 	mvn.w	r3, #12
 8016de0:	e00e      	b.n	8016e00 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8016de2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016de6:	f113 0f0d 	cmn.w	r3, #13
 8016dea:	d102      	bne.n	8016df2 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8016dec:	f06f 030c 	mvn.w	r3, #12
 8016df0:	e006      	b.n	8016e00 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8016df2:	687b      	ldr	r3, [r7, #4]
 8016df4:	68ba      	ldr	r2, [r7, #8]
 8016df6:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8016df8:	f06f 0304 	mvn.w	r3, #4
 8016dfc:	e000      	b.n	8016e00 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8016dfe:	2300      	movs	r3, #0
}
 8016e00:	4618      	mov	r0, r3
 8016e02:	3714      	adds	r7, #20
 8016e04:	46bd      	mov	sp, r7
 8016e06:	bd90      	pop	{r4, r7, pc}
 8016e08:	08025368 	.word	0x08025368
 8016e0c:	08025898 	.word	0x08025898
 8016e10:	080253cc 	.word	0x080253cc

08016e14 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8016e14:	b580      	push	{r7, lr}
 8016e16:	b084      	sub	sp, #16
 8016e18:	af00      	add	r7, sp, #0
 8016e1a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8016e1c:	e007      	b.n	8016e2e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8016e1e:	687b      	ldr	r3, [r7, #4]
 8016e20:	681b      	ldr	r3, [r3, #0]
 8016e22:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8016e24:	6878      	ldr	r0, [r7, #4]
 8016e26:	f000 f809 	bl	8016e3c <tcp_seg_free>
    seg = next;
 8016e2a:	68fb      	ldr	r3, [r7, #12]
 8016e2c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8016e2e:	687b      	ldr	r3, [r7, #4]
 8016e30:	2b00      	cmp	r3, #0
 8016e32:	d1f4      	bne.n	8016e1e <tcp_segs_free+0xa>
  }
}
 8016e34:	bf00      	nop
 8016e36:	3710      	adds	r7, #16
 8016e38:	46bd      	mov	sp, r7
 8016e3a:	bd80      	pop	{r7, pc}

08016e3c <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8016e3c:	b580      	push	{r7, lr}
 8016e3e:	b082      	sub	sp, #8
 8016e40:	af00      	add	r7, sp, #0
 8016e42:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8016e44:	687b      	ldr	r3, [r7, #4]
 8016e46:	2b00      	cmp	r3, #0
 8016e48:	d00c      	beq.n	8016e64 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8016e4a:	687b      	ldr	r3, [r7, #4]
 8016e4c:	685b      	ldr	r3, [r3, #4]
 8016e4e:	2b00      	cmp	r3, #0
 8016e50:	d004      	beq.n	8016e5c <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8016e52:	687b      	ldr	r3, [r7, #4]
 8016e54:	685b      	ldr	r3, [r3, #4]
 8016e56:	4618      	mov	r0, r3
 8016e58:	f7fd f8fa 	bl	8014050 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8016e5c:	6879      	ldr	r1, [r7, #4]
 8016e5e:	2003      	movs	r0, #3
 8016e60:	f7fc f992 	bl	8013188 <memp_free>
  }
}
 8016e64:	bf00      	nop
 8016e66:	3708      	adds	r7, #8
 8016e68:	46bd      	mov	sp, r7
 8016e6a:	bd80      	pop	{r7, pc}

08016e6c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8016e6c:	b580      	push	{r7, lr}
 8016e6e:	b084      	sub	sp, #16
 8016e70:	af00      	add	r7, sp, #0
 8016e72:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8016e74:	687b      	ldr	r3, [r7, #4]
 8016e76:	2b00      	cmp	r3, #0
 8016e78:	d106      	bne.n	8016e88 <tcp_seg_copy+0x1c>
 8016e7a:	4b0f      	ldr	r3, [pc, #60]	; (8016eb8 <tcp_seg_copy+0x4c>)
 8016e7c:	f240 6282 	movw	r2, #1666	; 0x682
 8016e80:	490e      	ldr	r1, [pc, #56]	; (8016ebc <tcp_seg_copy+0x50>)
 8016e82:	480f      	ldr	r0, [pc, #60]	; (8016ec0 <tcp_seg_copy+0x54>)
 8016e84:	f00a f864 	bl	8020f50 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8016e88:	2003      	movs	r0, #3
 8016e8a:	f7fc f907 	bl	801309c <memp_malloc>
 8016e8e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8016e90:	68fb      	ldr	r3, [r7, #12]
 8016e92:	2b00      	cmp	r3, #0
 8016e94:	d101      	bne.n	8016e9a <tcp_seg_copy+0x2e>
    return NULL;
 8016e96:	2300      	movs	r3, #0
 8016e98:	e00a      	b.n	8016eb0 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8016e9a:	2210      	movs	r2, #16
 8016e9c:	6879      	ldr	r1, [r7, #4]
 8016e9e:	68f8      	ldr	r0, [r7, #12]
 8016ea0:	f009 fbf1 	bl	8020686 <memcpy>
  pbuf_ref(cseg->p);
 8016ea4:	68fb      	ldr	r3, [r7, #12]
 8016ea6:	685b      	ldr	r3, [r3, #4]
 8016ea8:	4618      	mov	r0, r3
 8016eaa:	f7fd f977 	bl	801419c <pbuf_ref>
  return cseg;
 8016eae:	68fb      	ldr	r3, [r7, #12]
}
 8016eb0:	4618      	mov	r0, r3
 8016eb2:	3710      	adds	r7, #16
 8016eb4:	46bd      	mov	sp, r7
 8016eb6:	bd80      	pop	{r7, pc}
 8016eb8:	08025368 	.word	0x08025368
 8016ebc:	080258dc 	.word	0x080258dc
 8016ec0:	080253cc 	.word	0x080253cc

08016ec4 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8016ec4:	b580      	push	{r7, lr}
 8016ec6:	b084      	sub	sp, #16
 8016ec8:	af00      	add	r7, sp, #0
 8016eca:	60f8      	str	r0, [r7, #12]
 8016ecc:	60b9      	str	r1, [r7, #8]
 8016ece:	607a      	str	r2, [r7, #4]
 8016ed0:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8016ed2:	68bb      	ldr	r3, [r7, #8]
 8016ed4:	2b00      	cmp	r3, #0
 8016ed6:	d109      	bne.n	8016eec <tcp_recv_null+0x28>
 8016ed8:	4b12      	ldr	r3, [pc, #72]	; (8016f24 <tcp_recv_null+0x60>)
 8016eda:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8016ede:	4912      	ldr	r1, [pc, #72]	; (8016f28 <tcp_recv_null+0x64>)
 8016ee0:	4812      	ldr	r0, [pc, #72]	; (8016f2c <tcp_recv_null+0x68>)
 8016ee2:	f00a f835 	bl	8020f50 <iprintf>
 8016ee6:	f06f 030f 	mvn.w	r3, #15
 8016eea:	e016      	b.n	8016f1a <tcp_recv_null+0x56>

  if (p != NULL) {
 8016eec:	687b      	ldr	r3, [r7, #4]
 8016eee:	2b00      	cmp	r3, #0
 8016ef0:	d009      	beq.n	8016f06 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8016ef2:	687b      	ldr	r3, [r7, #4]
 8016ef4:	891b      	ldrh	r3, [r3, #8]
 8016ef6:	4619      	mov	r1, r3
 8016ef8:	68b8      	ldr	r0, [r7, #8]
 8016efa:	f7ff f9bf 	bl	801627c <tcp_recved>
    pbuf_free(p);
 8016efe:	6878      	ldr	r0, [r7, #4]
 8016f00:	f7fd f8a6 	bl	8014050 <pbuf_free>
 8016f04:	e008      	b.n	8016f18 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8016f06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016f0a:	2b00      	cmp	r3, #0
 8016f0c:	d104      	bne.n	8016f18 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8016f0e:	68b8      	ldr	r0, [r7, #8]
 8016f10:	f7ff f80a 	bl	8015f28 <tcp_close>
 8016f14:	4603      	mov	r3, r0
 8016f16:	e000      	b.n	8016f1a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8016f18:	2300      	movs	r3, #0
}
 8016f1a:	4618      	mov	r0, r3
 8016f1c:	3710      	adds	r7, #16
 8016f1e:	46bd      	mov	sp, r7
 8016f20:	bd80      	pop	{r7, pc}
 8016f22:	bf00      	nop
 8016f24:	08025368 	.word	0x08025368
 8016f28:	080258f8 	.word	0x080258f8
 8016f2c:	080253cc 	.word	0x080253cc

08016f30 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8016f30:	b580      	push	{r7, lr}
 8016f32:	b086      	sub	sp, #24
 8016f34:	af00      	add	r7, sp, #0
 8016f36:	4603      	mov	r3, r0
 8016f38:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8016f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016f3e:	2b00      	cmp	r3, #0
 8016f40:	db01      	blt.n	8016f46 <tcp_kill_prio+0x16>
 8016f42:	79fb      	ldrb	r3, [r7, #7]
 8016f44:	e000      	b.n	8016f48 <tcp_kill_prio+0x18>
 8016f46:	237f      	movs	r3, #127	; 0x7f
 8016f48:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8016f4a:	7afb      	ldrb	r3, [r7, #11]
 8016f4c:	2b00      	cmp	r3, #0
 8016f4e:	d034      	beq.n	8016fba <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8016f50:	7afb      	ldrb	r3, [r7, #11]
 8016f52:	3b01      	subs	r3, #1
 8016f54:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8016f56:	2300      	movs	r3, #0
 8016f58:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8016f5a:	2300      	movs	r3, #0
 8016f5c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8016f5e:	4b19      	ldr	r3, [pc, #100]	; (8016fc4 <tcp_kill_prio+0x94>)
 8016f60:	681b      	ldr	r3, [r3, #0]
 8016f62:	617b      	str	r3, [r7, #20]
 8016f64:	e01f      	b.n	8016fa6 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8016f66:	697b      	ldr	r3, [r7, #20]
 8016f68:	7d5b      	ldrb	r3, [r3, #21]
 8016f6a:	7afa      	ldrb	r2, [r7, #11]
 8016f6c:	429a      	cmp	r2, r3
 8016f6e:	d80c      	bhi.n	8016f8a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8016f70:	697b      	ldr	r3, [r7, #20]
 8016f72:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8016f74:	7afa      	ldrb	r2, [r7, #11]
 8016f76:	429a      	cmp	r2, r3
 8016f78:	d112      	bne.n	8016fa0 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8016f7a:	4b13      	ldr	r3, [pc, #76]	; (8016fc8 <tcp_kill_prio+0x98>)
 8016f7c:	681a      	ldr	r2, [r3, #0]
 8016f7e:	697b      	ldr	r3, [r7, #20]
 8016f80:	6a1b      	ldr	r3, [r3, #32]
 8016f82:	1ad3      	subs	r3, r2, r3
 8016f84:	68fa      	ldr	r2, [r7, #12]
 8016f86:	429a      	cmp	r2, r3
 8016f88:	d80a      	bhi.n	8016fa0 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8016f8a:	4b0f      	ldr	r3, [pc, #60]	; (8016fc8 <tcp_kill_prio+0x98>)
 8016f8c:	681a      	ldr	r2, [r3, #0]
 8016f8e:	697b      	ldr	r3, [r7, #20]
 8016f90:	6a1b      	ldr	r3, [r3, #32]
 8016f92:	1ad3      	subs	r3, r2, r3
 8016f94:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8016f96:	697b      	ldr	r3, [r7, #20]
 8016f98:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8016f9a:	697b      	ldr	r3, [r7, #20]
 8016f9c:	7d5b      	ldrb	r3, [r3, #21]
 8016f9e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8016fa0:	697b      	ldr	r3, [r7, #20]
 8016fa2:	68db      	ldr	r3, [r3, #12]
 8016fa4:	617b      	str	r3, [r7, #20]
 8016fa6:	697b      	ldr	r3, [r7, #20]
 8016fa8:	2b00      	cmp	r3, #0
 8016faa:	d1dc      	bne.n	8016f66 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8016fac:	693b      	ldr	r3, [r7, #16]
 8016fae:	2b00      	cmp	r3, #0
 8016fb0:	d004      	beq.n	8016fbc <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8016fb2:	6938      	ldr	r0, [r7, #16]
 8016fb4:	f7ff f8fc 	bl	80161b0 <tcp_abort>
 8016fb8:	e000      	b.n	8016fbc <tcp_kill_prio+0x8c>
    return;
 8016fba:	bf00      	nop
  }
}
 8016fbc:	3718      	adds	r7, #24
 8016fbe:	46bd      	mov	sp, r7
 8016fc0:	bd80      	pop	{r7, pc}
 8016fc2:	bf00      	nop
 8016fc4:	24048e80 	.word	0x24048e80
 8016fc8:	24048e84 	.word	0x24048e84

08016fcc <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8016fcc:	b580      	push	{r7, lr}
 8016fce:	b086      	sub	sp, #24
 8016fd0:	af00      	add	r7, sp, #0
 8016fd2:	4603      	mov	r3, r0
 8016fd4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8016fd6:	79fb      	ldrb	r3, [r7, #7]
 8016fd8:	2b08      	cmp	r3, #8
 8016fda:	d009      	beq.n	8016ff0 <tcp_kill_state+0x24>
 8016fdc:	79fb      	ldrb	r3, [r7, #7]
 8016fde:	2b09      	cmp	r3, #9
 8016fe0:	d006      	beq.n	8016ff0 <tcp_kill_state+0x24>
 8016fe2:	4b1a      	ldr	r3, [pc, #104]	; (801704c <tcp_kill_state+0x80>)
 8016fe4:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8016fe8:	4919      	ldr	r1, [pc, #100]	; (8017050 <tcp_kill_state+0x84>)
 8016fea:	481a      	ldr	r0, [pc, #104]	; (8017054 <tcp_kill_state+0x88>)
 8016fec:	f009 ffb0 	bl	8020f50 <iprintf>

  inactivity = 0;
 8016ff0:	2300      	movs	r3, #0
 8016ff2:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8016ff4:	2300      	movs	r3, #0
 8016ff6:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8016ff8:	4b17      	ldr	r3, [pc, #92]	; (8017058 <tcp_kill_state+0x8c>)
 8016ffa:	681b      	ldr	r3, [r3, #0]
 8016ffc:	617b      	str	r3, [r7, #20]
 8016ffe:	e017      	b.n	8017030 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8017000:	697b      	ldr	r3, [r7, #20]
 8017002:	7d1b      	ldrb	r3, [r3, #20]
 8017004:	79fa      	ldrb	r2, [r7, #7]
 8017006:	429a      	cmp	r2, r3
 8017008:	d10f      	bne.n	801702a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801700a:	4b14      	ldr	r3, [pc, #80]	; (801705c <tcp_kill_state+0x90>)
 801700c:	681a      	ldr	r2, [r3, #0]
 801700e:	697b      	ldr	r3, [r7, #20]
 8017010:	6a1b      	ldr	r3, [r3, #32]
 8017012:	1ad3      	subs	r3, r2, r3
 8017014:	68fa      	ldr	r2, [r7, #12]
 8017016:	429a      	cmp	r2, r3
 8017018:	d807      	bhi.n	801702a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 801701a:	4b10      	ldr	r3, [pc, #64]	; (801705c <tcp_kill_state+0x90>)
 801701c:	681a      	ldr	r2, [r3, #0]
 801701e:	697b      	ldr	r3, [r7, #20]
 8017020:	6a1b      	ldr	r3, [r3, #32]
 8017022:	1ad3      	subs	r3, r2, r3
 8017024:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8017026:	697b      	ldr	r3, [r7, #20]
 8017028:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801702a:	697b      	ldr	r3, [r7, #20]
 801702c:	68db      	ldr	r3, [r3, #12]
 801702e:	617b      	str	r3, [r7, #20]
 8017030:	697b      	ldr	r3, [r7, #20]
 8017032:	2b00      	cmp	r3, #0
 8017034:	d1e4      	bne.n	8017000 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8017036:	693b      	ldr	r3, [r7, #16]
 8017038:	2b00      	cmp	r3, #0
 801703a:	d003      	beq.n	8017044 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 801703c:	2100      	movs	r1, #0
 801703e:	6938      	ldr	r0, [r7, #16]
 8017040:	f7fe fff8 	bl	8016034 <tcp_abandon>
  }
}
 8017044:	bf00      	nop
 8017046:	3718      	adds	r7, #24
 8017048:	46bd      	mov	sp, r7
 801704a:	bd80      	pop	{r7, pc}
 801704c:	08025368 	.word	0x08025368
 8017050:	08025914 	.word	0x08025914
 8017054:	080253cc 	.word	0x080253cc
 8017058:	24048e80 	.word	0x24048e80
 801705c:	24048e84 	.word	0x24048e84

08017060 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8017060:	b580      	push	{r7, lr}
 8017062:	b084      	sub	sp, #16
 8017064:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8017066:	2300      	movs	r3, #0
 8017068:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 801706a:	2300      	movs	r3, #0
 801706c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801706e:	4b12      	ldr	r3, [pc, #72]	; (80170b8 <tcp_kill_timewait+0x58>)
 8017070:	681b      	ldr	r3, [r3, #0]
 8017072:	60fb      	str	r3, [r7, #12]
 8017074:	e012      	b.n	801709c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8017076:	4b11      	ldr	r3, [pc, #68]	; (80170bc <tcp_kill_timewait+0x5c>)
 8017078:	681a      	ldr	r2, [r3, #0]
 801707a:	68fb      	ldr	r3, [r7, #12]
 801707c:	6a1b      	ldr	r3, [r3, #32]
 801707e:	1ad3      	subs	r3, r2, r3
 8017080:	687a      	ldr	r2, [r7, #4]
 8017082:	429a      	cmp	r2, r3
 8017084:	d807      	bhi.n	8017096 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8017086:	4b0d      	ldr	r3, [pc, #52]	; (80170bc <tcp_kill_timewait+0x5c>)
 8017088:	681a      	ldr	r2, [r3, #0]
 801708a:	68fb      	ldr	r3, [r7, #12]
 801708c:	6a1b      	ldr	r3, [r3, #32]
 801708e:	1ad3      	subs	r3, r2, r3
 8017090:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8017092:	68fb      	ldr	r3, [r7, #12]
 8017094:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8017096:	68fb      	ldr	r3, [r7, #12]
 8017098:	68db      	ldr	r3, [r3, #12]
 801709a:	60fb      	str	r3, [r7, #12]
 801709c:	68fb      	ldr	r3, [r7, #12]
 801709e:	2b00      	cmp	r3, #0
 80170a0:	d1e9      	bne.n	8017076 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80170a2:	68bb      	ldr	r3, [r7, #8]
 80170a4:	2b00      	cmp	r3, #0
 80170a6:	d002      	beq.n	80170ae <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80170a8:	68b8      	ldr	r0, [r7, #8]
 80170aa:	f7ff f881 	bl	80161b0 <tcp_abort>
  }
}
 80170ae:	bf00      	nop
 80170b0:	3710      	adds	r7, #16
 80170b2:	46bd      	mov	sp, r7
 80170b4:	bd80      	pop	{r7, pc}
 80170b6:	bf00      	nop
 80170b8:	24048e90 	.word	0x24048e90
 80170bc:	24048e84 	.word	0x24048e84

080170c0 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80170c0:	b580      	push	{r7, lr}
 80170c2:	b082      	sub	sp, #8
 80170c4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80170c6:	4b10      	ldr	r3, [pc, #64]	; (8017108 <tcp_handle_closepend+0x48>)
 80170c8:	681b      	ldr	r3, [r3, #0]
 80170ca:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80170cc:	e014      	b.n	80170f8 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80170ce:	687b      	ldr	r3, [r7, #4]
 80170d0:	68db      	ldr	r3, [r3, #12]
 80170d2:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80170d4:	687b      	ldr	r3, [r7, #4]
 80170d6:	8b5b      	ldrh	r3, [r3, #26]
 80170d8:	f003 0308 	and.w	r3, r3, #8
 80170dc:	2b00      	cmp	r3, #0
 80170de:	d009      	beq.n	80170f4 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80170e0:	687b      	ldr	r3, [r7, #4]
 80170e2:	8b5b      	ldrh	r3, [r3, #26]
 80170e4:	f023 0308 	bic.w	r3, r3, #8
 80170e8:	b29a      	uxth	r2, r3
 80170ea:	687b      	ldr	r3, [r7, #4]
 80170ec:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80170ee:	6878      	ldr	r0, [r7, #4]
 80170f0:	f7fe feb4 	bl	8015e5c <tcp_close_shutdown_fin>
    }
    pcb = next;
 80170f4:	683b      	ldr	r3, [r7, #0]
 80170f6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80170f8:	687b      	ldr	r3, [r7, #4]
 80170fa:	2b00      	cmp	r3, #0
 80170fc:	d1e7      	bne.n	80170ce <tcp_handle_closepend+0xe>
  }
}
 80170fe:	bf00      	nop
 8017100:	3708      	adds	r7, #8
 8017102:	46bd      	mov	sp, r7
 8017104:	bd80      	pop	{r7, pc}
 8017106:	bf00      	nop
 8017108:	24048e80 	.word	0x24048e80

0801710c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 801710c:	b580      	push	{r7, lr}
 801710e:	b084      	sub	sp, #16
 8017110:	af00      	add	r7, sp, #0
 8017112:	4603      	mov	r3, r0
 8017114:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8017116:	2001      	movs	r0, #1
 8017118:	f7fb ffc0 	bl	801309c <memp_malloc>
 801711c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 801711e:	68fb      	ldr	r3, [r7, #12]
 8017120:	2b00      	cmp	r3, #0
 8017122:	d126      	bne.n	8017172 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8017124:	f7ff ffcc 	bl	80170c0 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8017128:	f7ff ff9a 	bl	8017060 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801712c:	2001      	movs	r0, #1
 801712e:	f7fb ffb5 	bl	801309c <memp_malloc>
 8017132:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8017134:	68fb      	ldr	r3, [r7, #12]
 8017136:	2b00      	cmp	r3, #0
 8017138:	d11b      	bne.n	8017172 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 801713a:	2009      	movs	r0, #9
 801713c:	f7ff ff46 	bl	8016fcc <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8017140:	2001      	movs	r0, #1
 8017142:	f7fb ffab 	bl	801309c <memp_malloc>
 8017146:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8017148:	68fb      	ldr	r3, [r7, #12]
 801714a:	2b00      	cmp	r3, #0
 801714c:	d111      	bne.n	8017172 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 801714e:	2008      	movs	r0, #8
 8017150:	f7ff ff3c 	bl	8016fcc <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8017154:	2001      	movs	r0, #1
 8017156:	f7fb ffa1 	bl	801309c <memp_malloc>
 801715a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 801715c:	68fb      	ldr	r3, [r7, #12]
 801715e:	2b00      	cmp	r3, #0
 8017160:	d107      	bne.n	8017172 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8017162:	79fb      	ldrb	r3, [r7, #7]
 8017164:	4618      	mov	r0, r3
 8017166:	f7ff fee3 	bl	8016f30 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801716a:	2001      	movs	r0, #1
 801716c:	f7fb ff96 	bl	801309c <memp_malloc>
 8017170:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8017172:	68fb      	ldr	r3, [r7, #12]
 8017174:	2b00      	cmp	r3, #0
 8017176:	d03f      	beq.n	80171f8 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8017178:	229c      	movs	r2, #156	; 0x9c
 801717a:	2100      	movs	r1, #0
 801717c:	68f8      	ldr	r0, [r7, #12]
 801717e:	f009 faa6 	bl	80206ce <memset>
    pcb->prio = prio;
 8017182:	68fb      	ldr	r3, [r7, #12]
 8017184:	79fa      	ldrb	r2, [r7, #7]
 8017186:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8017188:	68fb      	ldr	r3, [r7, #12]
 801718a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 801718e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8017192:	68fb      	ldr	r3, [r7, #12]
 8017194:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8017198:	855a      	strh	r2, [r3, #42]	; 0x2a
 801719a:	68fb      	ldr	r3, [r7, #12]
 801719c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801719e:	68fb      	ldr	r3, [r7, #12]
 80171a0:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 80171a2:	68fb      	ldr	r3, [r7, #12]
 80171a4:	22ff      	movs	r2, #255	; 0xff
 80171a6:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80171a8:	68fb      	ldr	r3, [r7, #12]
 80171aa:	f44f 7206 	mov.w	r2, #536	; 0x218
 80171ae:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80171b0:	68fb      	ldr	r3, [r7, #12]
 80171b2:	2206      	movs	r2, #6
 80171b4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80171b8:	68fb      	ldr	r3, [r7, #12]
 80171ba:	2206      	movs	r2, #6
 80171bc:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 80171be:	68fb      	ldr	r3, [r7, #12]
 80171c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80171c4:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 80171c6:	68fb      	ldr	r3, [r7, #12]
 80171c8:	2201      	movs	r2, #1
 80171ca:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 80171ce:	4b0d      	ldr	r3, [pc, #52]	; (8017204 <tcp_alloc+0xf8>)
 80171d0:	681a      	ldr	r2, [r3, #0]
 80171d2:	68fb      	ldr	r3, [r7, #12]
 80171d4:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80171d6:	4b0c      	ldr	r3, [pc, #48]	; (8017208 <tcp_alloc+0xfc>)
 80171d8:	781a      	ldrb	r2, [r3, #0]
 80171da:	68fb      	ldr	r3, [r7, #12]
 80171dc:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80171de:	68fb      	ldr	r3, [r7, #12]
 80171e0:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80171e4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80171e8:	68fb      	ldr	r3, [r7, #12]
 80171ea:	4a08      	ldr	r2, [pc, #32]	; (801720c <tcp_alloc+0x100>)
 80171ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80171f0:	68fb      	ldr	r3, [r7, #12]
 80171f2:	4a07      	ldr	r2, [pc, #28]	; (8017210 <tcp_alloc+0x104>)
 80171f4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80171f8:	68fb      	ldr	r3, [r7, #12]
}
 80171fa:	4618      	mov	r0, r3
 80171fc:	3710      	adds	r7, #16
 80171fe:	46bd      	mov	sp, r7
 8017200:	bd80      	pop	{r7, pc}
 8017202:	bf00      	nop
 8017204:	24048e84 	.word	0x24048e84
 8017208:	24040761 	.word	0x24040761
 801720c:	08016ec5 	.word	0x08016ec5
 8017210:	006ddd00 	.word	0x006ddd00

08017214 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8017214:	b580      	push	{r7, lr}
 8017216:	b084      	sub	sp, #16
 8017218:	af00      	add	r7, sp, #0
 801721a:	4603      	mov	r3, r0
 801721c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 801721e:	2040      	movs	r0, #64	; 0x40
 8017220:	f7ff ff74 	bl	801710c <tcp_alloc>
 8017224:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8017226:	68fb      	ldr	r3, [r7, #12]
}
 8017228:	4618      	mov	r0, r3
 801722a:	3710      	adds	r7, #16
 801722c:	46bd      	mov	sp, r7
 801722e:	bd80      	pop	{r7, pc}

08017230 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8017230:	b480      	push	{r7}
 8017232:	b083      	sub	sp, #12
 8017234:	af00      	add	r7, sp, #0
 8017236:	6078      	str	r0, [r7, #4]
 8017238:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 801723a:	687b      	ldr	r3, [r7, #4]
 801723c:	2b00      	cmp	r3, #0
 801723e:	d002      	beq.n	8017246 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8017240:	687b      	ldr	r3, [r7, #4]
 8017242:	683a      	ldr	r2, [r7, #0]
 8017244:	611a      	str	r2, [r3, #16]
  }
}
 8017246:	bf00      	nop
 8017248:	370c      	adds	r7, #12
 801724a:	46bd      	mov	sp, r7
 801724c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017250:	4770      	bx	lr
	...

08017254 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8017254:	b580      	push	{r7, lr}
 8017256:	b082      	sub	sp, #8
 8017258:	af00      	add	r7, sp, #0
 801725a:	6078      	str	r0, [r7, #4]
 801725c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801725e:	687b      	ldr	r3, [r7, #4]
 8017260:	2b00      	cmp	r3, #0
 8017262:	d00e      	beq.n	8017282 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8017264:	687b      	ldr	r3, [r7, #4]
 8017266:	7d1b      	ldrb	r3, [r3, #20]
 8017268:	2b01      	cmp	r3, #1
 801726a:	d106      	bne.n	801727a <tcp_recv+0x26>
 801726c:	4b07      	ldr	r3, [pc, #28]	; (801728c <tcp_recv+0x38>)
 801726e:	f240 72df 	movw	r2, #2015	; 0x7df
 8017272:	4907      	ldr	r1, [pc, #28]	; (8017290 <tcp_recv+0x3c>)
 8017274:	4807      	ldr	r0, [pc, #28]	; (8017294 <tcp_recv+0x40>)
 8017276:	f009 fe6b 	bl	8020f50 <iprintf>
    pcb->recv = recv;
 801727a:	687b      	ldr	r3, [r7, #4]
 801727c:	683a      	ldr	r2, [r7, #0]
 801727e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8017282:	bf00      	nop
 8017284:	3708      	adds	r7, #8
 8017286:	46bd      	mov	sp, r7
 8017288:	bd80      	pop	{r7, pc}
 801728a:	bf00      	nop
 801728c:	08025368 	.word	0x08025368
 8017290:	08025924 	.word	0x08025924
 8017294:	080253cc 	.word	0x080253cc

08017298 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8017298:	b580      	push	{r7, lr}
 801729a:	b082      	sub	sp, #8
 801729c:	af00      	add	r7, sp, #0
 801729e:	6078      	str	r0, [r7, #4]
 80172a0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80172a2:	687b      	ldr	r3, [r7, #4]
 80172a4:	2b00      	cmp	r3, #0
 80172a6:	d00e      	beq.n	80172c6 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 80172a8:	687b      	ldr	r3, [r7, #4]
 80172aa:	7d1b      	ldrb	r3, [r3, #20]
 80172ac:	2b01      	cmp	r3, #1
 80172ae:	d106      	bne.n	80172be <tcp_sent+0x26>
 80172b0:	4b07      	ldr	r3, [pc, #28]	; (80172d0 <tcp_sent+0x38>)
 80172b2:	f240 72f3 	movw	r2, #2035	; 0x7f3
 80172b6:	4907      	ldr	r1, [pc, #28]	; (80172d4 <tcp_sent+0x3c>)
 80172b8:	4807      	ldr	r0, [pc, #28]	; (80172d8 <tcp_sent+0x40>)
 80172ba:	f009 fe49 	bl	8020f50 <iprintf>
    pcb->sent = sent;
 80172be:	687b      	ldr	r3, [r7, #4]
 80172c0:	683a      	ldr	r2, [r7, #0]
 80172c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 80172c6:	bf00      	nop
 80172c8:	3708      	adds	r7, #8
 80172ca:	46bd      	mov	sp, r7
 80172cc:	bd80      	pop	{r7, pc}
 80172ce:	bf00      	nop
 80172d0:	08025368 	.word	0x08025368
 80172d4:	0802594c 	.word	0x0802594c
 80172d8:	080253cc 	.word	0x080253cc

080172dc <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 80172dc:	b580      	push	{r7, lr}
 80172de:	b082      	sub	sp, #8
 80172e0:	af00      	add	r7, sp, #0
 80172e2:	6078      	str	r0, [r7, #4]
 80172e4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80172e6:	687b      	ldr	r3, [r7, #4]
 80172e8:	2b00      	cmp	r3, #0
 80172ea:	d00e      	beq.n	801730a <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 80172ec:	687b      	ldr	r3, [r7, #4]
 80172ee:	7d1b      	ldrb	r3, [r3, #20]
 80172f0:	2b01      	cmp	r3, #1
 80172f2:	d106      	bne.n	8017302 <tcp_err+0x26>
 80172f4:	4b07      	ldr	r3, [pc, #28]	; (8017314 <tcp_err+0x38>)
 80172f6:	f640 020d 	movw	r2, #2061	; 0x80d
 80172fa:	4907      	ldr	r1, [pc, #28]	; (8017318 <tcp_err+0x3c>)
 80172fc:	4807      	ldr	r0, [pc, #28]	; (801731c <tcp_err+0x40>)
 80172fe:	f009 fe27 	bl	8020f50 <iprintf>
    pcb->errf = err;
 8017302:	687b      	ldr	r3, [r7, #4]
 8017304:	683a      	ldr	r2, [r7, #0]
 8017306:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 801730a:	bf00      	nop
 801730c:	3708      	adds	r7, #8
 801730e:	46bd      	mov	sp, r7
 8017310:	bd80      	pop	{r7, pc}
 8017312:	bf00      	nop
 8017314:	08025368 	.word	0x08025368
 8017318:	08025974 	.word	0x08025974
 801731c:	080253cc 	.word	0x080253cc

08017320 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8017320:	b480      	push	{r7}
 8017322:	b085      	sub	sp, #20
 8017324:	af00      	add	r7, sp, #0
 8017326:	6078      	str	r0, [r7, #4]
 8017328:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 801732a:	687b      	ldr	r3, [r7, #4]
 801732c:	2b00      	cmp	r3, #0
 801732e:	d008      	beq.n	8017342 <tcp_accept+0x22>
 8017330:	687b      	ldr	r3, [r7, #4]
 8017332:	7d1b      	ldrb	r3, [r3, #20]
 8017334:	2b01      	cmp	r3, #1
 8017336:	d104      	bne.n	8017342 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8017338:	687b      	ldr	r3, [r7, #4]
 801733a:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 801733c:	68fb      	ldr	r3, [r7, #12]
 801733e:	683a      	ldr	r2, [r7, #0]
 8017340:	619a      	str	r2, [r3, #24]
  }
}
 8017342:	bf00      	nop
 8017344:	3714      	adds	r7, #20
 8017346:	46bd      	mov	sp, r7
 8017348:	f85d 7b04 	ldr.w	r7, [sp], #4
 801734c:	4770      	bx	lr
	...

08017350 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8017350:	b580      	push	{r7, lr}
 8017352:	b084      	sub	sp, #16
 8017354:	af00      	add	r7, sp, #0
 8017356:	60f8      	str	r0, [r7, #12]
 8017358:	60b9      	str	r1, [r7, #8]
 801735a:	4613      	mov	r3, r2
 801735c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 801735e:	68fb      	ldr	r3, [r7, #12]
 8017360:	2b00      	cmp	r3, #0
 8017362:	d107      	bne.n	8017374 <tcp_poll+0x24>
 8017364:	4b0e      	ldr	r3, [pc, #56]	; (80173a0 <tcp_poll+0x50>)
 8017366:	f640 023d 	movw	r2, #2109	; 0x83d
 801736a:	490e      	ldr	r1, [pc, #56]	; (80173a4 <tcp_poll+0x54>)
 801736c:	480e      	ldr	r0, [pc, #56]	; (80173a8 <tcp_poll+0x58>)
 801736e:	f009 fdef 	bl	8020f50 <iprintf>
 8017372:	e011      	b.n	8017398 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8017374:	68fb      	ldr	r3, [r7, #12]
 8017376:	7d1b      	ldrb	r3, [r3, #20]
 8017378:	2b01      	cmp	r3, #1
 801737a:	d106      	bne.n	801738a <tcp_poll+0x3a>
 801737c:	4b08      	ldr	r3, [pc, #32]	; (80173a0 <tcp_poll+0x50>)
 801737e:	f640 023e 	movw	r2, #2110	; 0x83e
 8017382:	490a      	ldr	r1, [pc, #40]	; (80173ac <tcp_poll+0x5c>)
 8017384:	4808      	ldr	r0, [pc, #32]	; (80173a8 <tcp_poll+0x58>)
 8017386:	f009 fde3 	bl	8020f50 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 801738a:	68fb      	ldr	r3, [r7, #12]
 801738c:	68ba      	ldr	r2, [r7, #8]
 801738e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8017392:	68fb      	ldr	r3, [r7, #12]
 8017394:	79fa      	ldrb	r2, [r7, #7]
 8017396:	775a      	strb	r2, [r3, #29]
}
 8017398:	3710      	adds	r7, #16
 801739a:	46bd      	mov	sp, r7
 801739c:	bd80      	pop	{r7, pc}
 801739e:	bf00      	nop
 80173a0:	08025368 	.word	0x08025368
 80173a4:	0802599c 	.word	0x0802599c
 80173a8:	080253cc 	.word	0x080253cc
 80173ac:	080259b4 	.word	0x080259b4

080173b0 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80173b0:	b580      	push	{r7, lr}
 80173b2:	b082      	sub	sp, #8
 80173b4:	af00      	add	r7, sp, #0
 80173b6:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80173b8:	687b      	ldr	r3, [r7, #4]
 80173ba:	2b00      	cmp	r3, #0
 80173bc:	d107      	bne.n	80173ce <tcp_pcb_purge+0x1e>
 80173be:	4b21      	ldr	r3, [pc, #132]	; (8017444 <tcp_pcb_purge+0x94>)
 80173c0:	f640 0251 	movw	r2, #2129	; 0x851
 80173c4:	4920      	ldr	r1, [pc, #128]	; (8017448 <tcp_pcb_purge+0x98>)
 80173c6:	4821      	ldr	r0, [pc, #132]	; (801744c <tcp_pcb_purge+0x9c>)
 80173c8:	f009 fdc2 	bl	8020f50 <iprintf>
 80173cc:	e037      	b.n	801743e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80173ce:	687b      	ldr	r3, [r7, #4]
 80173d0:	7d1b      	ldrb	r3, [r3, #20]
 80173d2:	2b00      	cmp	r3, #0
 80173d4:	d033      	beq.n	801743e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80173d6:	687b      	ldr	r3, [r7, #4]
 80173d8:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80173da:	2b0a      	cmp	r3, #10
 80173dc:	d02f      	beq.n	801743e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80173de:	687b      	ldr	r3, [r7, #4]
 80173e0:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80173e2:	2b01      	cmp	r3, #1
 80173e4:	d02b      	beq.n	801743e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80173e6:	687b      	ldr	r3, [r7, #4]
 80173e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80173ea:	2b00      	cmp	r3, #0
 80173ec:	d007      	beq.n	80173fe <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80173ee:	687b      	ldr	r3, [r7, #4]
 80173f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80173f2:	4618      	mov	r0, r3
 80173f4:	f7fc fe2c 	bl	8014050 <pbuf_free>
      pcb->refused_data = NULL;
 80173f8:	687b      	ldr	r3, [r7, #4]
 80173fa:	2200      	movs	r2, #0
 80173fc:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80173fe:	687b      	ldr	r3, [r7, #4]
 8017400:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017402:	2b00      	cmp	r3, #0
 8017404:	d002      	beq.n	801740c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8017406:	6878      	ldr	r0, [r7, #4]
 8017408:	f000 f986 	bl	8017718 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 801740c:	687b      	ldr	r3, [r7, #4]
 801740e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017412:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8017414:	687b      	ldr	r3, [r7, #4]
 8017416:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017418:	4618      	mov	r0, r3
 801741a:	f7ff fcfb 	bl	8016e14 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801741e:	687b      	ldr	r3, [r7, #4]
 8017420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017422:	4618      	mov	r0, r3
 8017424:	f7ff fcf6 	bl	8016e14 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8017428:	687b      	ldr	r3, [r7, #4]
 801742a:	2200      	movs	r2, #0
 801742c:	66da      	str	r2, [r3, #108]	; 0x6c
 801742e:	687b      	ldr	r3, [r7, #4]
 8017430:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8017432:	687b      	ldr	r3, [r7, #4]
 8017434:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8017436:	687b      	ldr	r3, [r7, #4]
 8017438:	2200      	movs	r2, #0
 801743a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 801743e:	3708      	adds	r7, #8
 8017440:	46bd      	mov	sp, r7
 8017442:	bd80      	pop	{r7, pc}
 8017444:	08025368 	.word	0x08025368
 8017448:	080259d4 	.word	0x080259d4
 801744c:	080253cc 	.word	0x080253cc

08017450 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8017450:	b580      	push	{r7, lr}
 8017452:	b084      	sub	sp, #16
 8017454:	af00      	add	r7, sp, #0
 8017456:	6078      	str	r0, [r7, #4]
 8017458:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 801745a:	683b      	ldr	r3, [r7, #0]
 801745c:	2b00      	cmp	r3, #0
 801745e:	d106      	bne.n	801746e <tcp_pcb_remove+0x1e>
 8017460:	4b3e      	ldr	r3, [pc, #248]	; (801755c <tcp_pcb_remove+0x10c>)
 8017462:	f640 0283 	movw	r2, #2179	; 0x883
 8017466:	493e      	ldr	r1, [pc, #248]	; (8017560 <tcp_pcb_remove+0x110>)
 8017468:	483e      	ldr	r0, [pc, #248]	; (8017564 <tcp_pcb_remove+0x114>)
 801746a:	f009 fd71 	bl	8020f50 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801746e:	687b      	ldr	r3, [r7, #4]
 8017470:	2b00      	cmp	r3, #0
 8017472:	d106      	bne.n	8017482 <tcp_pcb_remove+0x32>
 8017474:	4b39      	ldr	r3, [pc, #228]	; (801755c <tcp_pcb_remove+0x10c>)
 8017476:	f640 0284 	movw	r2, #2180	; 0x884
 801747a:	493b      	ldr	r1, [pc, #236]	; (8017568 <tcp_pcb_remove+0x118>)
 801747c:	4839      	ldr	r0, [pc, #228]	; (8017564 <tcp_pcb_remove+0x114>)
 801747e:	f009 fd67 	bl	8020f50 <iprintf>

  TCP_RMV(pcblist, pcb);
 8017482:	687b      	ldr	r3, [r7, #4]
 8017484:	681b      	ldr	r3, [r3, #0]
 8017486:	683a      	ldr	r2, [r7, #0]
 8017488:	429a      	cmp	r2, r3
 801748a:	d105      	bne.n	8017498 <tcp_pcb_remove+0x48>
 801748c:	687b      	ldr	r3, [r7, #4]
 801748e:	681b      	ldr	r3, [r3, #0]
 8017490:	68da      	ldr	r2, [r3, #12]
 8017492:	687b      	ldr	r3, [r7, #4]
 8017494:	601a      	str	r2, [r3, #0]
 8017496:	e013      	b.n	80174c0 <tcp_pcb_remove+0x70>
 8017498:	687b      	ldr	r3, [r7, #4]
 801749a:	681b      	ldr	r3, [r3, #0]
 801749c:	60fb      	str	r3, [r7, #12]
 801749e:	e00c      	b.n	80174ba <tcp_pcb_remove+0x6a>
 80174a0:	68fb      	ldr	r3, [r7, #12]
 80174a2:	68db      	ldr	r3, [r3, #12]
 80174a4:	683a      	ldr	r2, [r7, #0]
 80174a6:	429a      	cmp	r2, r3
 80174a8:	d104      	bne.n	80174b4 <tcp_pcb_remove+0x64>
 80174aa:	683b      	ldr	r3, [r7, #0]
 80174ac:	68da      	ldr	r2, [r3, #12]
 80174ae:	68fb      	ldr	r3, [r7, #12]
 80174b0:	60da      	str	r2, [r3, #12]
 80174b2:	e005      	b.n	80174c0 <tcp_pcb_remove+0x70>
 80174b4:	68fb      	ldr	r3, [r7, #12]
 80174b6:	68db      	ldr	r3, [r3, #12]
 80174b8:	60fb      	str	r3, [r7, #12]
 80174ba:	68fb      	ldr	r3, [r7, #12]
 80174bc:	2b00      	cmp	r3, #0
 80174be:	d1ef      	bne.n	80174a0 <tcp_pcb_remove+0x50>
 80174c0:	683b      	ldr	r3, [r7, #0]
 80174c2:	2200      	movs	r2, #0
 80174c4:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80174c6:	6838      	ldr	r0, [r7, #0]
 80174c8:	f7ff ff72 	bl	80173b0 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80174cc:	683b      	ldr	r3, [r7, #0]
 80174ce:	7d1b      	ldrb	r3, [r3, #20]
 80174d0:	2b0a      	cmp	r3, #10
 80174d2:	d013      	beq.n	80174fc <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80174d4:	683b      	ldr	r3, [r7, #0]
 80174d6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80174d8:	2b01      	cmp	r3, #1
 80174da:	d00f      	beq.n	80174fc <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80174dc:	683b      	ldr	r3, [r7, #0]
 80174de:	8b5b      	ldrh	r3, [r3, #26]
 80174e0:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80174e4:	2b00      	cmp	r3, #0
 80174e6:	d009      	beq.n	80174fc <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80174e8:	683b      	ldr	r3, [r7, #0]
 80174ea:	8b5b      	ldrh	r3, [r3, #26]
 80174ec:	f043 0302 	orr.w	r3, r3, #2
 80174f0:	b29a      	uxth	r2, r3
 80174f2:	683b      	ldr	r3, [r7, #0]
 80174f4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80174f6:	6838      	ldr	r0, [r7, #0]
 80174f8:	f003 fbc2 	bl	801ac80 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80174fc:	683b      	ldr	r3, [r7, #0]
 80174fe:	7d1b      	ldrb	r3, [r3, #20]
 8017500:	2b01      	cmp	r3, #1
 8017502:	d020      	beq.n	8017546 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8017504:	683b      	ldr	r3, [r7, #0]
 8017506:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017508:	2b00      	cmp	r3, #0
 801750a:	d006      	beq.n	801751a <tcp_pcb_remove+0xca>
 801750c:	4b13      	ldr	r3, [pc, #76]	; (801755c <tcp_pcb_remove+0x10c>)
 801750e:	f640 0293 	movw	r2, #2195	; 0x893
 8017512:	4916      	ldr	r1, [pc, #88]	; (801756c <tcp_pcb_remove+0x11c>)
 8017514:	4813      	ldr	r0, [pc, #76]	; (8017564 <tcp_pcb_remove+0x114>)
 8017516:	f009 fd1b 	bl	8020f50 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801751a:	683b      	ldr	r3, [r7, #0]
 801751c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801751e:	2b00      	cmp	r3, #0
 8017520:	d006      	beq.n	8017530 <tcp_pcb_remove+0xe0>
 8017522:	4b0e      	ldr	r3, [pc, #56]	; (801755c <tcp_pcb_remove+0x10c>)
 8017524:	f640 0294 	movw	r2, #2196	; 0x894
 8017528:	4911      	ldr	r1, [pc, #68]	; (8017570 <tcp_pcb_remove+0x120>)
 801752a:	480e      	ldr	r0, [pc, #56]	; (8017564 <tcp_pcb_remove+0x114>)
 801752c:	f009 fd10 	bl	8020f50 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8017530:	683b      	ldr	r3, [r7, #0]
 8017532:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017534:	2b00      	cmp	r3, #0
 8017536:	d006      	beq.n	8017546 <tcp_pcb_remove+0xf6>
 8017538:	4b08      	ldr	r3, [pc, #32]	; (801755c <tcp_pcb_remove+0x10c>)
 801753a:	f640 0296 	movw	r2, #2198	; 0x896
 801753e:	490d      	ldr	r1, [pc, #52]	; (8017574 <tcp_pcb_remove+0x124>)
 8017540:	4808      	ldr	r0, [pc, #32]	; (8017564 <tcp_pcb_remove+0x114>)
 8017542:	f009 fd05 	bl	8020f50 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8017546:	683b      	ldr	r3, [r7, #0]
 8017548:	2200      	movs	r2, #0
 801754a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 801754c:	683b      	ldr	r3, [r7, #0]
 801754e:	2200      	movs	r2, #0
 8017550:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8017552:	bf00      	nop
 8017554:	3710      	adds	r7, #16
 8017556:	46bd      	mov	sp, r7
 8017558:	bd80      	pop	{r7, pc}
 801755a:	bf00      	nop
 801755c:	08025368 	.word	0x08025368
 8017560:	080259f0 	.word	0x080259f0
 8017564:	080253cc 	.word	0x080253cc
 8017568:	08025a0c 	.word	0x08025a0c
 801756c:	08025a2c 	.word	0x08025a2c
 8017570:	08025a44 	.word	0x08025a44
 8017574:	08025a60 	.word	0x08025a60

08017578 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8017578:	b580      	push	{r7, lr}
 801757a:	b082      	sub	sp, #8
 801757c:	af00      	add	r7, sp, #0
 801757e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8017580:	687b      	ldr	r3, [r7, #4]
 8017582:	2b00      	cmp	r3, #0
 8017584:	d106      	bne.n	8017594 <tcp_next_iss+0x1c>
 8017586:	4b0a      	ldr	r3, [pc, #40]	; (80175b0 <tcp_next_iss+0x38>)
 8017588:	f640 02af 	movw	r2, #2223	; 0x8af
 801758c:	4909      	ldr	r1, [pc, #36]	; (80175b4 <tcp_next_iss+0x3c>)
 801758e:	480a      	ldr	r0, [pc, #40]	; (80175b8 <tcp_next_iss+0x40>)
 8017590:	f009 fcde 	bl	8020f50 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8017594:	4b09      	ldr	r3, [pc, #36]	; (80175bc <tcp_next_iss+0x44>)
 8017596:	681a      	ldr	r2, [r3, #0]
 8017598:	4b09      	ldr	r3, [pc, #36]	; (80175c0 <tcp_next_iss+0x48>)
 801759a:	681b      	ldr	r3, [r3, #0]
 801759c:	4413      	add	r3, r2
 801759e:	4a07      	ldr	r2, [pc, #28]	; (80175bc <tcp_next_iss+0x44>)
 80175a0:	6013      	str	r3, [r2, #0]
  return iss;
 80175a2:	4b06      	ldr	r3, [pc, #24]	; (80175bc <tcp_next_iss+0x44>)
 80175a4:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80175a6:	4618      	mov	r0, r3
 80175a8:	3708      	adds	r7, #8
 80175aa:	46bd      	mov	sp, r7
 80175ac:	bd80      	pop	{r7, pc}
 80175ae:	bf00      	nop
 80175b0:	08025368 	.word	0x08025368
 80175b4:	08025a78 	.word	0x08025a78
 80175b8:	080253cc 	.word	0x080253cc
 80175bc:	2400002c 	.word	0x2400002c
 80175c0:	24048e84 	.word	0x24048e84

080175c4 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80175c4:	b580      	push	{r7, lr}
 80175c6:	b086      	sub	sp, #24
 80175c8:	af00      	add	r7, sp, #0
 80175ca:	4603      	mov	r3, r0
 80175cc:	60b9      	str	r1, [r7, #8]
 80175ce:	607a      	str	r2, [r7, #4]
 80175d0:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80175d2:	687b      	ldr	r3, [r7, #4]
 80175d4:	2b00      	cmp	r3, #0
 80175d6:	d106      	bne.n	80175e6 <tcp_eff_send_mss_netif+0x22>
 80175d8:	4b14      	ldr	r3, [pc, #80]	; (801762c <tcp_eff_send_mss_netif+0x68>)
 80175da:	f640 02c5 	movw	r2, #2245	; 0x8c5
 80175de:	4914      	ldr	r1, [pc, #80]	; (8017630 <tcp_eff_send_mss_netif+0x6c>)
 80175e0:	4814      	ldr	r0, [pc, #80]	; (8017634 <tcp_eff_send_mss_netif+0x70>)
 80175e2:	f009 fcb5 	bl	8020f50 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80175e6:	68bb      	ldr	r3, [r7, #8]
 80175e8:	2b00      	cmp	r3, #0
 80175ea:	d101      	bne.n	80175f0 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80175ec:	89fb      	ldrh	r3, [r7, #14]
 80175ee:	e019      	b.n	8017624 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80175f0:	68bb      	ldr	r3, [r7, #8]
 80175f2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80175f4:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80175f6:	8afb      	ldrh	r3, [r7, #22]
 80175f8:	2b00      	cmp	r3, #0
 80175fa:	d012      	beq.n	8017622 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80175fc:	2328      	movs	r3, #40	; 0x28
 80175fe:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8017600:	8afa      	ldrh	r2, [r7, #22]
 8017602:	8abb      	ldrh	r3, [r7, #20]
 8017604:	429a      	cmp	r2, r3
 8017606:	d904      	bls.n	8017612 <tcp_eff_send_mss_netif+0x4e>
 8017608:	8afa      	ldrh	r2, [r7, #22]
 801760a:	8abb      	ldrh	r3, [r7, #20]
 801760c:	1ad3      	subs	r3, r2, r3
 801760e:	b29b      	uxth	r3, r3
 8017610:	e000      	b.n	8017614 <tcp_eff_send_mss_netif+0x50>
 8017612:	2300      	movs	r3, #0
 8017614:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8017616:	8a7a      	ldrh	r2, [r7, #18]
 8017618:	89fb      	ldrh	r3, [r7, #14]
 801761a:	4293      	cmp	r3, r2
 801761c:	bf28      	it	cs
 801761e:	4613      	movcs	r3, r2
 8017620:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8017622:	89fb      	ldrh	r3, [r7, #14]
}
 8017624:	4618      	mov	r0, r3
 8017626:	3718      	adds	r7, #24
 8017628:	46bd      	mov	sp, r7
 801762a:	bd80      	pop	{r7, pc}
 801762c:	08025368 	.word	0x08025368
 8017630:	08025a94 	.word	0x08025a94
 8017634:	080253cc 	.word	0x080253cc

08017638 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8017638:	b580      	push	{r7, lr}
 801763a:	b084      	sub	sp, #16
 801763c:	af00      	add	r7, sp, #0
 801763e:	6078      	str	r0, [r7, #4]
 8017640:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8017642:	683b      	ldr	r3, [r7, #0]
 8017644:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8017646:	687b      	ldr	r3, [r7, #4]
 8017648:	2b00      	cmp	r3, #0
 801764a:	d119      	bne.n	8017680 <tcp_netif_ip_addr_changed_pcblist+0x48>
 801764c:	4b10      	ldr	r3, [pc, #64]	; (8017690 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 801764e:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8017652:	4910      	ldr	r1, [pc, #64]	; (8017694 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8017654:	4810      	ldr	r0, [pc, #64]	; (8017698 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8017656:	f009 fc7b 	bl	8020f50 <iprintf>

  while (pcb != NULL) {
 801765a:	e011      	b.n	8017680 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 801765c:	68fb      	ldr	r3, [r7, #12]
 801765e:	681a      	ldr	r2, [r3, #0]
 8017660:	687b      	ldr	r3, [r7, #4]
 8017662:	681b      	ldr	r3, [r3, #0]
 8017664:	429a      	cmp	r2, r3
 8017666:	d108      	bne.n	801767a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8017668:	68fb      	ldr	r3, [r7, #12]
 801766a:	68db      	ldr	r3, [r3, #12]
 801766c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 801766e:	68f8      	ldr	r0, [r7, #12]
 8017670:	f7fe fd9e 	bl	80161b0 <tcp_abort>
      pcb = next;
 8017674:	68bb      	ldr	r3, [r7, #8]
 8017676:	60fb      	str	r3, [r7, #12]
 8017678:	e002      	b.n	8017680 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 801767a:	68fb      	ldr	r3, [r7, #12]
 801767c:	68db      	ldr	r3, [r3, #12]
 801767e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8017680:	68fb      	ldr	r3, [r7, #12]
 8017682:	2b00      	cmp	r3, #0
 8017684:	d1ea      	bne.n	801765c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8017686:	bf00      	nop
 8017688:	3710      	adds	r7, #16
 801768a:	46bd      	mov	sp, r7
 801768c:	bd80      	pop	{r7, pc}
 801768e:	bf00      	nop
 8017690:	08025368 	.word	0x08025368
 8017694:	08025abc 	.word	0x08025abc
 8017698:	080253cc 	.word	0x080253cc

0801769c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801769c:	b580      	push	{r7, lr}
 801769e:	b084      	sub	sp, #16
 80176a0:	af00      	add	r7, sp, #0
 80176a2:	6078      	str	r0, [r7, #4]
 80176a4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80176a6:	687b      	ldr	r3, [r7, #4]
 80176a8:	2b00      	cmp	r3, #0
 80176aa:	d02a      	beq.n	8017702 <tcp_netif_ip_addr_changed+0x66>
 80176ac:	687b      	ldr	r3, [r7, #4]
 80176ae:	681b      	ldr	r3, [r3, #0]
 80176b0:	2b00      	cmp	r3, #0
 80176b2:	d026      	beq.n	8017702 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80176b4:	4b15      	ldr	r3, [pc, #84]	; (801770c <tcp_netif_ip_addr_changed+0x70>)
 80176b6:	681b      	ldr	r3, [r3, #0]
 80176b8:	4619      	mov	r1, r3
 80176ba:	6878      	ldr	r0, [r7, #4]
 80176bc:	f7ff ffbc 	bl	8017638 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80176c0:	4b13      	ldr	r3, [pc, #76]	; (8017710 <tcp_netif_ip_addr_changed+0x74>)
 80176c2:	681b      	ldr	r3, [r3, #0]
 80176c4:	4619      	mov	r1, r3
 80176c6:	6878      	ldr	r0, [r7, #4]
 80176c8:	f7ff ffb6 	bl	8017638 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80176cc:	683b      	ldr	r3, [r7, #0]
 80176ce:	2b00      	cmp	r3, #0
 80176d0:	d017      	beq.n	8017702 <tcp_netif_ip_addr_changed+0x66>
 80176d2:	683b      	ldr	r3, [r7, #0]
 80176d4:	681b      	ldr	r3, [r3, #0]
 80176d6:	2b00      	cmp	r3, #0
 80176d8:	d013      	beq.n	8017702 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80176da:	4b0e      	ldr	r3, [pc, #56]	; (8017714 <tcp_netif_ip_addr_changed+0x78>)
 80176dc:	681b      	ldr	r3, [r3, #0]
 80176de:	60fb      	str	r3, [r7, #12]
 80176e0:	e00c      	b.n	80176fc <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80176e2:	68fb      	ldr	r3, [r7, #12]
 80176e4:	681a      	ldr	r2, [r3, #0]
 80176e6:	687b      	ldr	r3, [r7, #4]
 80176e8:	681b      	ldr	r3, [r3, #0]
 80176ea:	429a      	cmp	r2, r3
 80176ec:	d103      	bne.n	80176f6 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80176ee:	683b      	ldr	r3, [r7, #0]
 80176f0:	681a      	ldr	r2, [r3, #0]
 80176f2:	68fb      	ldr	r3, [r7, #12]
 80176f4:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80176f6:	68fb      	ldr	r3, [r7, #12]
 80176f8:	68db      	ldr	r3, [r3, #12]
 80176fa:	60fb      	str	r3, [r7, #12]
 80176fc:	68fb      	ldr	r3, [r7, #12]
 80176fe:	2b00      	cmp	r3, #0
 8017700:	d1ef      	bne.n	80176e2 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8017702:	bf00      	nop
 8017704:	3710      	adds	r7, #16
 8017706:	46bd      	mov	sp, r7
 8017708:	bd80      	pop	{r7, pc}
 801770a:	bf00      	nop
 801770c:	24048e80 	.word	0x24048e80
 8017710:	24048e8c 	.word	0x24048e8c
 8017714:	24048e88 	.word	0x24048e88

08017718 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8017718:	b580      	push	{r7, lr}
 801771a:	b082      	sub	sp, #8
 801771c:	af00      	add	r7, sp, #0
 801771e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8017720:	687b      	ldr	r3, [r7, #4]
 8017722:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017724:	2b00      	cmp	r3, #0
 8017726:	d007      	beq.n	8017738 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8017728:	687b      	ldr	r3, [r7, #4]
 801772a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801772c:	4618      	mov	r0, r3
 801772e:	f7ff fb71 	bl	8016e14 <tcp_segs_free>
    pcb->ooseq = NULL;
 8017732:	687b      	ldr	r3, [r7, #4]
 8017734:	2200      	movs	r2, #0
 8017736:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8017738:	bf00      	nop
 801773a:	3708      	adds	r7, #8
 801773c:	46bd      	mov	sp, r7
 801773e:	bd80      	pop	{r7, pc}

08017740 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8017740:	b590      	push	{r4, r7, lr}
 8017742:	b08d      	sub	sp, #52	; 0x34
 8017744:	af04      	add	r7, sp, #16
 8017746:	6078      	str	r0, [r7, #4]
 8017748:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801774a:	687b      	ldr	r3, [r7, #4]
 801774c:	2b00      	cmp	r3, #0
 801774e:	d105      	bne.n	801775c <tcp_input+0x1c>
 8017750:	4b9b      	ldr	r3, [pc, #620]	; (80179c0 <tcp_input+0x280>)
 8017752:	2283      	movs	r2, #131	; 0x83
 8017754:	499b      	ldr	r1, [pc, #620]	; (80179c4 <tcp_input+0x284>)
 8017756:	489c      	ldr	r0, [pc, #624]	; (80179c8 <tcp_input+0x288>)
 8017758:	f009 fbfa 	bl	8020f50 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 801775c:	687b      	ldr	r3, [r7, #4]
 801775e:	685b      	ldr	r3, [r3, #4]
 8017760:	4a9a      	ldr	r2, [pc, #616]	; (80179cc <tcp_input+0x28c>)
 8017762:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8017764:	687b      	ldr	r3, [r7, #4]
 8017766:	895b      	ldrh	r3, [r3, #10]
 8017768:	2b13      	cmp	r3, #19
 801776a:	f240 83c4 	bls.w	8017ef6 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801776e:	4b98      	ldr	r3, [pc, #608]	; (80179d0 <tcp_input+0x290>)
 8017770:	695a      	ldr	r2, [r3, #20]
 8017772:	4b97      	ldr	r3, [pc, #604]	; (80179d0 <tcp_input+0x290>)
 8017774:	681b      	ldr	r3, [r3, #0]
 8017776:	4619      	mov	r1, r3
 8017778:	4610      	mov	r0, r2
 801777a:	f7fa f849 	bl	8011810 <ip4_addr_isbroadcast_u32>
 801777e:	4603      	mov	r3, r0
 8017780:	2b00      	cmp	r3, #0
 8017782:	f040 83ba 	bne.w	8017efa <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8017786:	4b92      	ldr	r3, [pc, #584]	; (80179d0 <tcp_input+0x290>)
 8017788:	695b      	ldr	r3, [r3, #20]
 801778a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801778e:	2be0      	cmp	r3, #224	; 0xe0
 8017790:	f000 83b3 	beq.w	8017efa <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8017794:	4b8d      	ldr	r3, [pc, #564]	; (80179cc <tcp_input+0x28c>)
 8017796:	681b      	ldr	r3, [r3, #0]
 8017798:	899b      	ldrh	r3, [r3, #12]
 801779a:	b29b      	uxth	r3, r3
 801779c:	4618      	mov	r0, r3
 801779e:	f7f8 faad 	bl	800fcfc <lwip_htons>
 80177a2:	4603      	mov	r3, r0
 80177a4:	0b1b      	lsrs	r3, r3, #12
 80177a6:	b29b      	uxth	r3, r3
 80177a8:	b2db      	uxtb	r3, r3
 80177aa:	009b      	lsls	r3, r3, #2
 80177ac:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80177ae:	7cbb      	ldrb	r3, [r7, #18]
 80177b0:	2b13      	cmp	r3, #19
 80177b2:	f240 83a2 	bls.w	8017efa <tcp_input+0x7ba>
 80177b6:	7cbb      	ldrb	r3, [r7, #18]
 80177b8:	b29a      	uxth	r2, r3
 80177ba:	687b      	ldr	r3, [r7, #4]
 80177bc:	891b      	ldrh	r3, [r3, #8]
 80177be:	429a      	cmp	r2, r3
 80177c0:	f200 839b 	bhi.w	8017efa <tcp_input+0x7ba>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80177c4:	7cbb      	ldrb	r3, [r7, #18]
 80177c6:	b29b      	uxth	r3, r3
 80177c8:	3b14      	subs	r3, #20
 80177ca:	b29a      	uxth	r2, r3
 80177cc:	4b81      	ldr	r3, [pc, #516]	; (80179d4 <tcp_input+0x294>)
 80177ce:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80177d0:	4b81      	ldr	r3, [pc, #516]	; (80179d8 <tcp_input+0x298>)
 80177d2:	2200      	movs	r2, #0
 80177d4:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80177d6:	687b      	ldr	r3, [r7, #4]
 80177d8:	895a      	ldrh	r2, [r3, #10]
 80177da:	7cbb      	ldrb	r3, [r7, #18]
 80177dc:	b29b      	uxth	r3, r3
 80177de:	429a      	cmp	r2, r3
 80177e0:	d309      	bcc.n	80177f6 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80177e2:	4b7c      	ldr	r3, [pc, #496]	; (80179d4 <tcp_input+0x294>)
 80177e4:	881a      	ldrh	r2, [r3, #0]
 80177e6:	4b7d      	ldr	r3, [pc, #500]	; (80179dc <tcp_input+0x29c>)
 80177e8:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80177ea:	7cbb      	ldrb	r3, [r7, #18]
 80177ec:	4619      	mov	r1, r3
 80177ee:	6878      	ldr	r0, [r7, #4]
 80177f0:	f7fc fb76 	bl	8013ee0 <pbuf_remove_header>
 80177f4:	e04e      	b.n	8017894 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80177f6:	687b      	ldr	r3, [r7, #4]
 80177f8:	681b      	ldr	r3, [r3, #0]
 80177fa:	2b00      	cmp	r3, #0
 80177fc:	d105      	bne.n	801780a <tcp_input+0xca>
 80177fe:	4b70      	ldr	r3, [pc, #448]	; (80179c0 <tcp_input+0x280>)
 8017800:	22c2      	movs	r2, #194	; 0xc2
 8017802:	4977      	ldr	r1, [pc, #476]	; (80179e0 <tcp_input+0x2a0>)
 8017804:	4870      	ldr	r0, [pc, #448]	; (80179c8 <tcp_input+0x288>)
 8017806:	f009 fba3 	bl	8020f50 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 801780a:	2114      	movs	r1, #20
 801780c:	6878      	ldr	r0, [r7, #4]
 801780e:	f7fc fb67 	bl	8013ee0 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8017812:	687b      	ldr	r3, [r7, #4]
 8017814:	895a      	ldrh	r2, [r3, #10]
 8017816:	4b71      	ldr	r3, [pc, #452]	; (80179dc <tcp_input+0x29c>)
 8017818:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801781a:	4b6e      	ldr	r3, [pc, #440]	; (80179d4 <tcp_input+0x294>)
 801781c:	881a      	ldrh	r2, [r3, #0]
 801781e:	4b6f      	ldr	r3, [pc, #444]	; (80179dc <tcp_input+0x29c>)
 8017820:	881b      	ldrh	r3, [r3, #0]
 8017822:	1ad3      	subs	r3, r2, r3
 8017824:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8017826:	4b6d      	ldr	r3, [pc, #436]	; (80179dc <tcp_input+0x29c>)
 8017828:	881b      	ldrh	r3, [r3, #0]
 801782a:	4619      	mov	r1, r3
 801782c:	6878      	ldr	r0, [r7, #4]
 801782e:	f7fc fb57 	bl	8013ee0 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8017832:	687b      	ldr	r3, [r7, #4]
 8017834:	681b      	ldr	r3, [r3, #0]
 8017836:	895b      	ldrh	r3, [r3, #10]
 8017838:	8a3a      	ldrh	r2, [r7, #16]
 801783a:	429a      	cmp	r2, r3
 801783c:	f200 835f 	bhi.w	8017efe <tcp_input+0x7be>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8017840:	687b      	ldr	r3, [r7, #4]
 8017842:	681b      	ldr	r3, [r3, #0]
 8017844:	685b      	ldr	r3, [r3, #4]
 8017846:	4a64      	ldr	r2, [pc, #400]	; (80179d8 <tcp_input+0x298>)
 8017848:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 801784a:	687b      	ldr	r3, [r7, #4]
 801784c:	681b      	ldr	r3, [r3, #0]
 801784e:	8a3a      	ldrh	r2, [r7, #16]
 8017850:	4611      	mov	r1, r2
 8017852:	4618      	mov	r0, r3
 8017854:	f7fc fb44 	bl	8013ee0 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8017858:	687b      	ldr	r3, [r7, #4]
 801785a:	891a      	ldrh	r2, [r3, #8]
 801785c:	8a3b      	ldrh	r3, [r7, #16]
 801785e:	1ad3      	subs	r3, r2, r3
 8017860:	b29a      	uxth	r2, r3
 8017862:	687b      	ldr	r3, [r7, #4]
 8017864:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8017866:	687b      	ldr	r3, [r7, #4]
 8017868:	895b      	ldrh	r3, [r3, #10]
 801786a:	2b00      	cmp	r3, #0
 801786c:	d005      	beq.n	801787a <tcp_input+0x13a>
 801786e:	4b54      	ldr	r3, [pc, #336]	; (80179c0 <tcp_input+0x280>)
 8017870:	22df      	movs	r2, #223	; 0xdf
 8017872:	495c      	ldr	r1, [pc, #368]	; (80179e4 <tcp_input+0x2a4>)
 8017874:	4854      	ldr	r0, [pc, #336]	; (80179c8 <tcp_input+0x288>)
 8017876:	f009 fb6b 	bl	8020f50 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801787a:	687b      	ldr	r3, [r7, #4]
 801787c:	891a      	ldrh	r2, [r3, #8]
 801787e:	687b      	ldr	r3, [r7, #4]
 8017880:	681b      	ldr	r3, [r3, #0]
 8017882:	891b      	ldrh	r3, [r3, #8]
 8017884:	429a      	cmp	r2, r3
 8017886:	d005      	beq.n	8017894 <tcp_input+0x154>
 8017888:	4b4d      	ldr	r3, [pc, #308]	; (80179c0 <tcp_input+0x280>)
 801788a:	22e0      	movs	r2, #224	; 0xe0
 801788c:	4956      	ldr	r1, [pc, #344]	; (80179e8 <tcp_input+0x2a8>)
 801788e:	484e      	ldr	r0, [pc, #312]	; (80179c8 <tcp_input+0x288>)
 8017890:	f009 fb5e 	bl	8020f50 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8017894:	4b4d      	ldr	r3, [pc, #308]	; (80179cc <tcp_input+0x28c>)
 8017896:	681b      	ldr	r3, [r3, #0]
 8017898:	881b      	ldrh	r3, [r3, #0]
 801789a:	b29a      	uxth	r2, r3
 801789c:	4b4b      	ldr	r3, [pc, #300]	; (80179cc <tcp_input+0x28c>)
 801789e:	681c      	ldr	r4, [r3, #0]
 80178a0:	4610      	mov	r0, r2
 80178a2:	f7f8 fa2b 	bl	800fcfc <lwip_htons>
 80178a6:	4603      	mov	r3, r0
 80178a8:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80178aa:	4b48      	ldr	r3, [pc, #288]	; (80179cc <tcp_input+0x28c>)
 80178ac:	681b      	ldr	r3, [r3, #0]
 80178ae:	885b      	ldrh	r3, [r3, #2]
 80178b0:	b29a      	uxth	r2, r3
 80178b2:	4b46      	ldr	r3, [pc, #280]	; (80179cc <tcp_input+0x28c>)
 80178b4:	681c      	ldr	r4, [r3, #0]
 80178b6:	4610      	mov	r0, r2
 80178b8:	f7f8 fa20 	bl	800fcfc <lwip_htons>
 80178bc:	4603      	mov	r3, r0
 80178be:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80178c0:	4b42      	ldr	r3, [pc, #264]	; (80179cc <tcp_input+0x28c>)
 80178c2:	681b      	ldr	r3, [r3, #0]
 80178c4:	685a      	ldr	r2, [r3, #4]
 80178c6:	4b41      	ldr	r3, [pc, #260]	; (80179cc <tcp_input+0x28c>)
 80178c8:	681c      	ldr	r4, [r3, #0]
 80178ca:	4610      	mov	r0, r2
 80178cc:	f7f8 fa2b 	bl	800fd26 <lwip_htonl>
 80178d0:	4603      	mov	r3, r0
 80178d2:	6063      	str	r3, [r4, #4]
 80178d4:	6863      	ldr	r3, [r4, #4]
 80178d6:	4a45      	ldr	r2, [pc, #276]	; (80179ec <tcp_input+0x2ac>)
 80178d8:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80178da:	4b3c      	ldr	r3, [pc, #240]	; (80179cc <tcp_input+0x28c>)
 80178dc:	681b      	ldr	r3, [r3, #0]
 80178de:	689a      	ldr	r2, [r3, #8]
 80178e0:	4b3a      	ldr	r3, [pc, #232]	; (80179cc <tcp_input+0x28c>)
 80178e2:	681c      	ldr	r4, [r3, #0]
 80178e4:	4610      	mov	r0, r2
 80178e6:	f7f8 fa1e 	bl	800fd26 <lwip_htonl>
 80178ea:	4603      	mov	r3, r0
 80178ec:	60a3      	str	r3, [r4, #8]
 80178ee:	68a3      	ldr	r3, [r4, #8]
 80178f0:	4a3f      	ldr	r2, [pc, #252]	; (80179f0 <tcp_input+0x2b0>)
 80178f2:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80178f4:	4b35      	ldr	r3, [pc, #212]	; (80179cc <tcp_input+0x28c>)
 80178f6:	681b      	ldr	r3, [r3, #0]
 80178f8:	89db      	ldrh	r3, [r3, #14]
 80178fa:	b29a      	uxth	r2, r3
 80178fc:	4b33      	ldr	r3, [pc, #204]	; (80179cc <tcp_input+0x28c>)
 80178fe:	681c      	ldr	r4, [r3, #0]
 8017900:	4610      	mov	r0, r2
 8017902:	f7f8 f9fb 	bl	800fcfc <lwip_htons>
 8017906:	4603      	mov	r3, r0
 8017908:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 801790a:	4b30      	ldr	r3, [pc, #192]	; (80179cc <tcp_input+0x28c>)
 801790c:	681b      	ldr	r3, [r3, #0]
 801790e:	899b      	ldrh	r3, [r3, #12]
 8017910:	b29b      	uxth	r3, r3
 8017912:	4618      	mov	r0, r3
 8017914:	f7f8 f9f2 	bl	800fcfc <lwip_htons>
 8017918:	4603      	mov	r3, r0
 801791a:	b2db      	uxtb	r3, r3
 801791c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017920:	b2da      	uxtb	r2, r3
 8017922:	4b34      	ldr	r3, [pc, #208]	; (80179f4 <tcp_input+0x2b4>)
 8017924:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8017926:	687b      	ldr	r3, [r7, #4]
 8017928:	891a      	ldrh	r2, [r3, #8]
 801792a:	4b33      	ldr	r3, [pc, #204]	; (80179f8 <tcp_input+0x2b8>)
 801792c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 801792e:	4b31      	ldr	r3, [pc, #196]	; (80179f4 <tcp_input+0x2b4>)
 8017930:	781b      	ldrb	r3, [r3, #0]
 8017932:	f003 0303 	and.w	r3, r3, #3
 8017936:	2b00      	cmp	r3, #0
 8017938:	d00c      	beq.n	8017954 <tcp_input+0x214>
    tcplen++;
 801793a:	4b2f      	ldr	r3, [pc, #188]	; (80179f8 <tcp_input+0x2b8>)
 801793c:	881b      	ldrh	r3, [r3, #0]
 801793e:	3301      	adds	r3, #1
 8017940:	b29a      	uxth	r2, r3
 8017942:	4b2d      	ldr	r3, [pc, #180]	; (80179f8 <tcp_input+0x2b8>)
 8017944:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8017946:	687b      	ldr	r3, [r7, #4]
 8017948:	891a      	ldrh	r2, [r3, #8]
 801794a:	4b2b      	ldr	r3, [pc, #172]	; (80179f8 <tcp_input+0x2b8>)
 801794c:	881b      	ldrh	r3, [r3, #0]
 801794e:	429a      	cmp	r2, r3
 8017950:	f200 82d7 	bhi.w	8017f02 <tcp_input+0x7c2>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8017954:	2300      	movs	r3, #0
 8017956:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8017958:	4b28      	ldr	r3, [pc, #160]	; (80179fc <tcp_input+0x2bc>)
 801795a:	681b      	ldr	r3, [r3, #0]
 801795c:	61fb      	str	r3, [r7, #28]
 801795e:	e09d      	b.n	8017a9c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8017960:	69fb      	ldr	r3, [r7, #28]
 8017962:	7d1b      	ldrb	r3, [r3, #20]
 8017964:	2b00      	cmp	r3, #0
 8017966:	d105      	bne.n	8017974 <tcp_input+0x234>
 8017968:	4b15      	ldr	r3, [pc, #84]	; (80179c0 <tcp_input+0x280>)
 801796a:	22fb      	movs	r2, #251	; 0xfb
 801796c:	4924      	ldr	r1, [pc, #144]	; (8017a00 <tcp_input+0x2c0>)
 801796e:	4816      	ldr	r0, [pc, #88]	; (80179c8 <tcp_input+0x288>)
 8017970:	f009 faee 	bl	8020f50 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8017974:	69fb      	ldr	r3, [r7, #28]
 8017976:	7d1b      	ldrb	r3, [r3, #20]
 8017978:	2b0a      	cmp	r3, #10
 801797a:	d105      	bne.n	8017988 <tcp_input+0x248>
 801797c:	4b10      	ldr	r3, [pc, #64]	; (80179c0 <tcp_input+0x280>)
 801797e:	22fc      	movs	r2, #252	; 0xfc
 8017980:	4920      	ldr	r1, [pc, #128]	; (8017a04 <tcp_input+0x2c4>)
 8017982:	4811      	ldr	r0, [pc, #68]	; (80179c8 <tcp_input+0x288>)
 8017984:	f009 fae4 	bl	8020f50 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8017988:	69fb      	ldr	r3, [r7, #28]
 801798a:	7d1b      	ldrb	r3, [r3, #20]
 801798c:	2b01      	cmp	r3, #1
 801798e:	d105      	bne.n	801799c <tcp_input+0x25c>
 8017990:	4b0b      	ldr	r3, [pc, #44]	; (80179c0 <tcp_input+0x280>)
 8017992:	22fd      	movs	r2, #253	; 0xfd
 8017994:	491c      	ldr	r1, [pc, #112]	; (8017a08 <tcp_input+0x2c8>)
 8017996:	480c      	ldr	r0, [pc, #48]	; (80179c8 <tcp_input+0x288>)
 8017998:	f009 fada 	bl	8020f50 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801799c:	69fb      	ldr	r3, [r7, #28]
 801799e:	7a1b      	ldrb	r3, [r3, #8]
 80179a0:	2b00      	cmp	r3, #0
 80179a2:	d033      	beq.n	8017a0c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80179a4:	69fb      	ldr	r3, [r7, #28]
 80179a6:	7a1a      	ldrb	r2, [r3, #8]
 80179a8:	4b09      	ldr	r3, [pc, #36]	; (80179d0 <tcp_input+0x290>)
 80179aa:	685b      	ldr	r3, [r3, #4]
 80179ac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80179b0:	3301      	adds	r3, #1
 80179b2:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80179b4:	429a      	cmp	r2, r3
 80179b6:	d029      	beq.n	8017a0c <tcp_input+0x2cc>
      prev = pcb;
 80179b8:	69fb      	ldr	r3, [r7, #28]
 80179ba:	61bb      	str	r3, [r7, #24]
      continue;
 80179bc:	e06b      	b.n	8017a96 <tcp_input+0x356>
 80179be:	bf00      	nop
 80179c0:	08025af0 	.word	0x08025af0
 80179c4:	08025b44 	.word	0x08025b44
 80179c8:	08025b5c 	.word	0x08025b5c
 80179cc:	24040774 	.word	0x24040774
 80179d0:	24045db8 	.word	0x24045db8
 80179d4:	24040778 	.word	0x24040778
 80179d8:	2404077c 	.word	0x2404077c
 80179dc:	2404077a 	.word	0x2404077a
 80179e0:	08025b84 	.word	0x08025b84
 80179e4:	08025b94 	.word	0x08025b94
 80179e8:	08025ba0 	.word	0x08025ba0
 80179ec:	24040784 	.word	0x24040784
 80179f0:	24040788 	.word	0x24040788
 80179f4:	24040790 	.word	0x24040790
 80179f8:	2404078e 	.word	0x2404078e
 80179fc:	24048e80 	.word	0x24048e80
 8017a00:	08025bc0 	.word	0x08025bc0
 8017a04:	08025be8 	.word	0x08025be8
 8017a08:	08025c14 	.word	0x08025c14
    }

    if (pcb->remote_port == tcphdr->src &&
 8017a0c:	69fb      	ldr	r3, [r7, #28]
 8017a0e:	8b1a      	ldrh	r2, [r3, #24]
 8017a10:	4b94      	ldr	r3, [pc, #592]	; (8017c64 <tcp_input+0x524>)
 8017a12:	681b      	ldr	r3, [r3, #0]
 8017a14:	881b      	ldrh	r3, [r3, #0]
 8017a16:	b29b      	uxth	r3, r3
 8017a18:	429a      	cmp	r2, r3
 8017a1a:	d13a      	bne.n	8017a92 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8017a1c:	69fb      	ldr	r3, [r7, #28]
 8017a1e:	8ada      	ldrh	r2, [r3, #22]
 8017a20:	4b90      	ldr	r3, [pc, #576]	; (8017c64 <tcp_input+0x524>)
 8017a22:	681b      	ldr	r3, [r3, #0]
 8017a24:	885b      	ldrh	r3, [r3, #2]
 8017a26:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8017a28:	429a      	cmp	r2, r3
 8017a2a:	d132      	bne.n	8017a92 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8017a2c:	69fb      	ldr	r3, [r7, #28]
 8017a2e:	685a      	ldr	r2, [r3, #4]
 8017a30:	4b8d      	ldr	r3, [pc, #564]	; (8017c68 <tcp_input+0x528>)
 8017a32:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8017a34:	429a      	cmp	r2, r3
 8017a36:	d12c      	bne.n	8017a92 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8017a38:	69fb      	ldr	r3, [r7, #28]
 8017a3a:	681a      	ldr	r2, [r3, #0]
 8017a3c:	4b8a      	ldr	r3, [pc, #552]	; (8017c68 <tcp_input+0x528>)
 8017a3e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8017a40:	429a      	cmp	r2, r3
 8017a42:	d126      	bne.n	8017a92 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8017a44:	69fb      	ldr	r3, [r7, #28]
 8017a46:	68db      	ldr	r3, [r3, #12]
 8017a48:	69fa      	ldr	r2, [r7, #28]
 8017a4a:	429a      	cmp	r2, r3
 8017a4c:	d106      	bne.n	8017a5c <tcp_input+0x31c>
 8017a4e:	4b87      	ldr	r3, [pc, #540]	; (8017c6c <tcp_input+0x52c>)
 8017a50:	f240 120d 	movw	r2, #269	; 0x10d
 8017a54:	4986      	ldr	r1, [pc, #536]	; (8017c70 <tcp_input+0x530>)
 8017a56:	4887      	ldr	r0, [pc, #540]	; (8017c74 <tcp_input+0x534>)
 8017a58:	f009 fa7a 	bl	8020f50 <iprintf>
      if (prev != NULL) {
 8017a5c:	69bb      	ldr	r3, [r7, #24]
 8017a5e:	2b00      	cmp	r3, #0
 8017a60:	d00a      	beq.n	8017a78 <tcp_input+0x338>
        prev->next = pcb->next;
 8017a62:	69fb      	ldr	r3, [r7, #28]
 8017a64:	68da      	ldr	r2, [r3, #12]
 8017a66:	69bb      	ldr	r3, [r7, #24]
 8017a68:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8017a6a:	4b83      	ldr	r3, [pc, #524]	; (8017c78 <tcp_input+0x538>)
 8017a6c:	681a      	ldr	r2, [r3, #0]
 8017a6e:	69fb      	ldr	r3, [r7, #28]
 8017a70:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8017a72:	4a81      	ldr	r2, [pc, #516]	; (8017c78 <tcp_input+0x538>)
 8017a74:	69fb      	ldr	r3, [r7, #28]
 8017a76:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8017a78:	69fb      	ldr	r3, [r7, #28]
 8017a7a:	68db      	ldr	r3, [r3, #12]
 8017a7c:	69fa      	ldr	r2, [r7, #28]
 8017a7e:	429a      	cmp	r2, r3
 8017a80:	d111      	bne.n	8017aa6 <tcp_input+0x366>
 8017a82:	4b7a      	ldr	r3, [pc, #488]	; (8017c6c <tcp_input+0x52c>)
 8017a84:	f240 1215 	movw	r2, #277	; 0x115
 8017a88:	497c      	ldr	r1, [pc, #496]	; (8017c7c <tcp_input+0x53c>)
 8017a8a:	487a      	ldr	r0, [pc, #488]	; (8017c74 <tcp_input+0x534>)
 8017a8c:	f009 fa60 	bl	8020f50 <iprintf>
      break;
 8017a90:	e009      	b.n	8017aa6 <tcp_input+0x366>
    }
    prev = pcb;
 8017a92:	69fb      	ldr	r3, [r7, #28]
 8017a94:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8017a96:	69fb      	ldr	r3, [r7, #28]
 8017a98:	68db      	ldr	r3, [r3, #12]
 8017a9a:	61fb      	str	r3, [r7, #28]
 8017a9c:	69fb      	ldr	r3, [r7, #28]
 8017a9e:	2b00      	cmp	r3, #0
 8017aa0:	f47f af5e 	bne.w	8017960 <tcp_input+0x220>
 8017aa4:	e000      	b.n	8017aa8 <tcp_input+0x368>
      break;
 8017aa6:	bf00      	nop
  }

  if (pcb == NULL) {
 8017aa8:	69fb      	ldr	r3, [r7, #28]
 8017aaa:	2b00      	cmp	r3, #0
 8017aac:	f040 8095 	bne.w	8017bda <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8017ab0:	4b73      	ldr	r3, [pc, #460]	; (8017c80 <tcp_input+0x540>)
 8017ab2:	681b      	ldr	r3, [r3, #0]
 8017ab4:	61fb      	str	r3, [r7, #28]
 8017ab6:	e03f      	b.n	8017b38 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8017ab8:	69fb      	ldr	r3, [r7, #28]
 8017aba:	7d1b      	ldrb	r3, [r3, #20]
 8017abc:	2b0a      	cmp	r3, #10
 8017abe:	d006      	beq.n	8017ace <tcp_input+0x38e>
 8017ac0:	4b6a      	ldr	r3, [pc, #424]	; (8017c6c <tcp_input+0x52c>)
 8017ac2:	f240 121f 	movw	r2, #287	; 0x11f
 8017ac6:	496f      	ldr	r1, [pc, #444]	; (8017c84 <tcp_input+0x544>)
 8017ac8:	486a      	ldr	r0, [pc, #424]	; (8017c74 <tcp_input+0x534>)
 8017aca:	f009 fa41 	bl	8020f50 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017ace:	69fb      	ldr	r3, [r7, #28]
 8017ad0:	7a1b      	ldrb	r3, [r3, #8]
 8017ad2:	2b00      	cmp	r3, #0
 8017ad4:	d009      	beq.n	8017aea <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8017ad6:	69fb      	ldr	r3, [r7, #28]
 8017ad8:	7a1a      	ldrb	r2, [r3, #8]
 8017ada:	4b63      	ldr	r3, [pc, #396]	; (8017c68 <tcp_input+0x528>)
 8017adc:	685b      	ldr	r3, [r3, #4]
 8017ade:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017ae2:	3301      	adds	r3, #1
 8017ae4:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017ae6:	429a      	cmp	r2, r3
 8017ae8:	d122      	bne.n	8017b30 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8017aea:	69fb      	ldr	r3, [r7, #28]
 8017aec:	8b1a      	ldrh	r2, [r3, #24]
 8017aee:	4b5d      	ldr	r3, [pc, #372]	; (8017c64 <tcp_input+0x524>)
 8017af0:	681b      	ldr	r3, [r3, #0]
 8017af2:	881b      	ldrh	r3, [r3, #0]
 8017af4:	b29b      	uxth	r3, r3
 8017af6:	429a      	cmp	r2, r3
 8017af8:	d11b      	bne.n	8017b32 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8017afa:	69fb      	ldr	r3, [r7, #28]
 8017afc:	8ada      	ldrh	r2, [r3, #22]
 8017afe:	4b59      	ldr	r3, [pc, #356]	; (8017c64 <tcp_input+0x524>)
 8017b00:	681b      	ldr	r3, [r3, #0]
 8017b02:	885b      	ldrh	r3, [r3, #2]
 8017b04:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8017b06:	429a      	cmp	r2, r3
 8017b08:	d113      	bne.n	8017b32 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8017b0a:	69fb      	ldr	r3, [r7, #28]
 8017b0c:	685a      	ldr	r2, [r3, #4]
 8017b0e:	4b56      	ldr	r3, [pc, #344]	; (8017c68 <tcp_input+0x528>)
 8017b10:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8017b12:	429a      	cmp	r2, r3
 8017b14:	d10d      	bne.n	8017b32 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8017b16:	69fb      	ldr	r3, [r7, #28]
 8017b18:	681a      	ldr	r2, [r3, #0]
 8017b1a:	4b53      	ldr	r3, [pc, #332]	; (8017c68 <tcp_input+0x528>)
 8017b1c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8017b1e:	429a      	cmp	r2, r3
 8017b20:	d107      	bne.n	8017b32 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8017b22:	69f8      	ldr	r0, [r7, #28]
 8017b24:	f000 fb52 	bl	80181cc <tcp_timewait_input>
        }
        pbuf_free(p);
 8017b28:	6878      	ldr	r0, [r7, #4]
 8017b2a:	f7fc fa91 	bl	8014050 <pbuf_free>
        return;
 8017b2e:	e1ee      	b.n	8017f0e <tcp_input+0x7ce>
        continue;
 8017b30:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8017b32:	69fb      	ldr	r3, [r7, #28]
 8017b34:	68db      	ldr	r3, [r3, #12]
 8017b36:	61fb      	str	r3, [r7, #28]
 8017b38:	69fb      	ldr	r3, [r7, #28]
 8017b3a:	2b00      	cmp	r3, #0
 8017b3c:	d1bc      	bne.n	8017ab8 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8017b3e:	2300      	movs	r3, #0
 8017b40:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8017b42:	4b51      	ldr	r3, [pc, #324]	; (8017c88 <tcp_input+0x548>)
 8017b44:	681b      	ldr	r3, [r3, #0]
 8017b46:	617b      	str	r3, [r7, #20]
 8017b48:	e02a      	b.n	8017ba0 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8017b4a:	697b      	ldr	r3, [r7, #20]
 8017b4c:	7a1b      	ldrb	r3, [r3, #8]
 8017b4e:	2b00      	cmp	r3, #0
 8017b50:	d00c      	beq.n	8017b6c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8017b52:	697b      	ldr	r3, [r7, #20]
 8017b54:	7a1a      	ldrb	r2, [r3, #8]
 8017b56:	4b44      	ldr	r3, [pc, #272]	; (8017c68 <tcp_input+0x528>)
 8017b58:	685b      	ldr	r3, [r3, #4]
 8017b5a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017b5e:	3301      	adds	r3, #1
 8017b60:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8017b62:	429a      	cmp	r2, r3
 8017b64:	d002      	beq.n	8017b6c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8017b66:	697b      	ldr	r3, [r7, #20]
 8017b68:	61bb      	str	r3, [r7, #24]
        continue;
 8017b6a:	e016      	b.n	8017b9a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8017b6c:	697b      	ldr	r3, [r7, #20]
 8017b6e:	8ada      	ldrh	r2, [r3, #22]
 8017b70:	4b3c      	ldr	r3, [pc, #240]	; (8017c64 <tcp_input+0x524>)
 8017b72:	681b      	ldr	r3, [r3, #0]
 8017b74:	885b      	ldrh	r3, [r3, #2]
 8017b76:	b29b      	uxth	r3, r3
 8017b78:	429a      	cmp	r2, r3
 8017b7a:	d10c      	bne.n	8017b96 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8017b7c:	697b      	ldr	r3, [r7, #20]
 8017b7e:	681a      	ldr	r2, [r3, #0]
 8017b80:	4b39      	ldr	r3, [pc, #228]	; (8017c68 <tcp_input+0x528>)
 8017b82:	695b      	ldr	r3, [r3, #20]
 8017b84:	429a      	cmp	r2, r3
 8017b86:	d00f      	beq.n	8017ba8 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8017b88:	697b      	ldr	r3, [r7, #20]
 8017b8a:	2b00      	cmp	r3, #0
 8017b8c:	d00d      	beq.n	8017baa <tcp_input+0x46a>
 8017b8e:	697b      	ldr	r3, [r7, #20]
 8017b90:	681b      	ldr	r3, [r3, #0]
 8017b92:	2b00      	cmp	r3, #0
 8017b94:	d009      	beq.n	8017baa <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8017b96:	697b      	ldr	r3, [r7, #20]
 8017b98:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8017b9a:	697b      	ldr	r3, [r7, #20]
 8017b9c:	68db      	ldr	r3, [r3, #12]
 8017b9e:	617b      	str	r3, [r7, #20]
 8017ba0:	697b      	ldr	r3, [r7, #20]
 8017ba2:	2b00      	cmp	r3, #0
 8017ba4:	d1d1      	bne.n	8017b4a <tcp_input+0x40a>
 8017ba6:	e000      	b.n	8017baa <tcp_input+0x46a>
            break;
 8017ba8:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8017baa:	697b      	ldr	r3, [r7, #20]
 8017bac:	2b00      	cmp	r3, #0
 8017bae:	d014      	beq.n	8017bda <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8017bb0:	69bb      	ldr	r3, [r7, #24]
 8017bb2:	2b00      	cmp	r3, #0
 8017bb4:	d00a      	beq.n	8017bcc <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8017bb6:	697b      	ldr	r3, [r7, #20]
 8017bb8:	68da      	ldr	r2, [r3, #12]
 8017bba:	69bb      	ldr	r3, [r7, #24]
 8017bbc:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8017bbe:	4b32      	ldr	r3, [pc, #200]	; (8017c88 <tcp_input+0x548>)
 8017bc0:	681a      	ldr	r2, [r3, #0]
 8017bc2:	697b      	ldr	r3, [r7, #20]
 8017bc4:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8017bc6:	4a30      	ldr	r2, [pc, #192]	; (8017c88 <tcp_input+0x548>)
 8017bc8:	697b      	ldr	r3, [r7, #20]
 8017bca:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8017bcc:	6978      	ldr	r0, [r7, #20]
 8017bce:	f000 f9ff 	bl	8017fd0 <tcp_listen_input>
      }
      pbuf_free(p);
 8017bd2:	6878      	ldr	r0, [r7, #4]
 8017bd4:	f7fc fa3c 	bl	8014050 <pbuf_free>
      return;
 8017bd8:	e199      	b.n	8017f0e <tcp_input+0x7ce>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8017bda:	69fb      	ldr	r3, [r7, #28]
 8017bdc:	2b00      	cmp	r3, #0
 8017bde:	f000 8160 	beq.w	8017ea2 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8017be2:	4b2a      	ldr	r3, [pc, #168]	; (8017c8c <tcp_input+0x54c>)
 8017be4:	2200      	movs	r2, #0
 8017be6:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8017be8:	687b      	ldr	r3, [r7, #4]
 8017bea:	891a      	ldrh	r2, [r3, #8]
 8017bec:	4b27      	ldr	r3, [pc, #156]	; (8017c8c <tcp_input+0x54c>)
 8017bee:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8017bf0:	4a26      	ldr	r2, [pc, #152]	; (8017c8c <tcp_input+0x54c>)
 8017bf2:	687b      	ldr	r3, [r7, #4]
 8017bf4:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8017bf6:	4b1b      	ldr	r3, [pc, #108]	; (8017c64 <tcp_input+0x524>)
 8017bf8:	681b      	ldr	r3, [r3, #0]
 8017bfa:	4a24      	ldr	r2, [pc, #144]	; (8017c8c <tcp_input+0x54c>)
 8017bfc:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8017bfe:	4b24      	ldr	r3, [pc, #144]	; (8017c90 <tcp_input+0x550>)
 8017c00:	2200      	movs	r2, #0
 8017c02:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8017c04:	4b23      	ldr	r3, [pc, #140]	; (8017c94 <tcp_input+0x554>)
 8017c06:	2200      	movs	r2, #0
 8017c08:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8017c0a:	4b23      	ldr	r3, [pc, #140]	; (8017c98 <tcp_input+0x558>)
 8017c0c:	2200      	movs	r2, #0
 8017c0e:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8017c10:	4b22      	ldr	r3, [pc, #136]	; (8017c9c <tcp_input+0x55c>)
 8017c12:	781b      	ldrb	r3, [r3, #0]
 8017c14:	f003 0308 	and.w	r3, r3, #8
 8017c18:	2b00      	cmp	r3, #0
 8017c1a:	d006      	beq.n	8017c2a <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8017c1c:	687b      	ldr	r3, [r7, #4]
 8017c1e:	7b5b      	ldrb	r3, [r3, #13]
 8017c20:	f043 0301 	orr.w	r3, r3, #1
 8017c24:	b2da      	uxtb	r2, r3
 8017c26:	687b      	ldr	r3, [r7, #4]
 8017c28:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8017c2a:	69fb      	ldr	r3, [r7, #28]
 8017c2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017c2e:	2b00      	cmp	r3, #0
 8017c30:	d038      	beq.n	8017ca4 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8017c32:	69f8      	ldr	r0, [r7, #28]
 8017c34:	f7ff f872 	bl	8016d1c <tcp_process_refused_data>
 8017c38:	4603      	mov	r3, r0
 8017c3a:	f113 0f0d 	cmn.w	r3, #13
 8017c3e:	d007      	beq.n	8017c50 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8017c40:	69fb      	ldr	r3, [r7, #28]
 8017c42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8017c44:	2b00      	cmp	r3, #0
 8017c46:	d02d      	beq.n	8017ca4 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8017c48:	4b15      	ldr	r3, [pc, #84]	; (8017ca0 <tcp_input+0x560>)
 8017c4a:	881b      	ldrh	r3, [r3, #0]
 8017c4c:	2b00      	cmp	r3, #0
 8017c4e:	d029      	beq.n	8017ca4 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8017c50:	69fb      	ldr	r3, [r7, #28]
 8017c52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017c54:	2b00      	cmp	r3, #0
 8017c56:	f040 8104 	bne.w	8017e62 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8017c5a:	69f8      	ldr	r0, [r7, #28]
 8017c5c:	f003 fe28 	bl	801b8b0 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8017c60:	e0ff      	b.n	8017e62 <tcp_input+0x722>
 8017c62:	bf00      	nop
 8017c64:	24040774 	.word	0x24040774
 8017c68:	24045db8 	.word	0x24045db8
 8017c6c:	08025af0 	.word	0x08025af0
 8017c70:	08025c3c 	.word	0x08025c3c
 8017c74:	08025b5c 	.word	0x08025b5c
 8017c78:	24048e80 	.word	0x24048e80
 8017c7c:	08025c68 	.word	0x08025c68
 8017c80:	24048e90 	.word	0x24048e90
 8017c84:	08025c94 	.word	0x08025c94
 8017c88:	24048e88 	.word	0x24048e88
 8017c8c:	24040764 	.word	0x24040764
 8017c90:	24040794 	.word	0x24040794
 8017c94:	24040791 	.word	0x24040791
 8017c98:	2404078c 	.word	0x2404078c
 8017c9c:	24040790 	.word	0x24040790
 8017ca0:	2404078e 	.word	0x2404078e
      }
    }
    tcp_input_pcb = pcb;
 8017ca4:	4a9b      	ldr	r2, [pc, #620]	; (8017f14 <tcp_input+0x7d4>)
 8017ca6:	69fb      	ldr	r3, [r7, #28]
 8017ca8:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8017caa:	69f8      	ldr	r0, [r7, #28]
 8017cac:	f000 fb0a 	bl	80182c4 <tcp_process>
 8017cb0:	4603      	mov	r3, r0
 8017cb2:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8017cb4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017cb8:	f113 0f0d 	cmn.w	r3, #13
 8017cbc:	f000 80d3 	beq.w	8017e66 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 8017cc0:	4b95      	ldr	r3, [pc, #596]	; (8017f18 <tcp_input+0x7d8>)
 8017cc2:	781b      	ldrb	r3, [r3, #0]
 8017cc4:	f003 0308 	and.w	r3, r3, #8
 8017cc8:	2b00      	cmp	r3, #0
 8017cca:	d015      	beq.n	8017cf8 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8017ccc:	69fb      	ldr	r3, [r7, #28]
 8017cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017cd2:	2b00      	cmp	r3, #0
 8017cd4:	d008      	beq.n	8017ce8 <tcp_input+0x5a8>
 8017cd6:	69fb      	ldr	r3, [r7, #28]
 8017cd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017cdc:	69fa      	ldr	r2, [r7, #28]
 8017cde:	6912      	ldr	r2, [r2, #16]
 8017ce0:	f06f 010d 	mvn.w	r1, #13
 8017ce4:	4610      	mov	r0, r2
 8017ce6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8017ce8:	69f9      	ldr	r1, [r7, #28]
 8017cea:	488c      	ldr	r0, [pc, #560]	; (8017f1c <tcp_input+0x7dc>)
 8017cec:	f7ff fbb0 	bl	8017450 <tcp_pcb_remove>
        tcp_free(pcb);
 8017cf0:	69f8      	ldr	r0, [r7, #28]
 8017cf2:	f7fd ff23 	bl	8015b3c <tcp_free>
 8017cf6:	e0c1      	b.n	8017e7c <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 8017cf8:	2300      	movs	r3, #0
 8017cfa:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8017cfc:	4b88      	ldr	r3, [pc, #544]	; (8017f20 <tcp_input+0x7e0>)
 8017cfe:	881b      	ldrh	r3, [r3, #0]
 8017d00:	2b00      	cmp	r3, #0
 8017d02:	d01d      	beq.n	8017d40 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8017d04:	4b86      	ldr	r3, [pc, #536]	; (8017f20 <tcp_input+0x7e0>)
 8017d06:	881b      	ldrh	r3, [r3, #0]
 8017d08:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8017d0a:	69fb      	ldr	r3, [r7, #28]
 8017d0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8017d10:	2b00      	cmp	r3, #0
 8017d12:	d00a      	beq.n	8017d2a <tcp_input+0x5ea>
 8017d14:	69fb      	ldr	r3, [r7, #28]
 8017d16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8017d1a:	69fa      	ldr	r2, [r7, #28]
 8017d1c:	6910      	ldr	r0, [r2, #16]
 8017d1e:	89fa      	ldrh	r2, [r7, #14]
 8017d20:	69f9      	ldr	r1, [r7, #28]
 8017d22:	4798      	blx	r3
 8017d24:	4603      	mov	r3, r0
 8017d26:	74fb      	strb	r3, [r7, #19]
 8017d28:	e001      	b.n	8017d2e <tcp_input+0x5ee>
 8017d2a:	2300      	movs	r3, #0
 8017d2c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8017d2e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017d32:	f113 0f0d 	cmn.w	r3, #13
 8017d36:	f000 8098 	beq.w	8017e6a <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 8017d3a:	4b79      	ldr	r3, [pc, #484]	; (8017f20 <tcp_input+0x7e0>)
 8017d3c:	2200      	movs	r2, #0
 8017d3e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8017d40:	69f8      	ldr	r0, [r7, #28]
 8017d42:	f000 f905 	bl	8017f50 <tcp_input_delayed_close>
 8017d46:	4603      	mov	r3, r0
 8017d48:	2b00      	cmp	r3, #0
 8017d4a:	f040 8090 	bne.w	8017e6e <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8017d4e:	4b75      	ldr	r3, [pc, #468]	; (8017f24 <tcp_input+0x7e4>)
 8017d50:	681b      	ldr	r3, [r3, #0]
 8017d52:	2b00      	cmp	r3, #0
 8017d54:	d041      	beq.n	8017dda <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8017d56:	69fb      	ldr	r3, [r7, #28]
 8017d58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017d5a:	2b00      	cmp	r3, #0
 8017d5c:	d006      	beq.n	8017d6c <tcp_input+0x62c>
 8017d5e:	4b72      	ldr	r3, [pc, #456]	; (8017f28 <tcp_input+0x7e8>)
 8017d60:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8017d64:	4971      	ldr	r1, [pc, #452]	; (8017f2c <tcp_input+0x7ec>)
 8017d66:	4872      	ldr	r0, [pc, #456]	; (8017f30 <tcp_input+0x7f0>)
 8017d68:	f009 f8f2 	bl	8020f50 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8017d6c:	69fb      	ldr	r3, [r7, #28]
 8017d6e:	8b5b      	ldrh	r3, [r3, #26]
 8017d70:	f003 0310 	and.w	r3, r3, #16
 8017d74:	2b00      	cmp	r3, #0
 8017d76:	d008      	beq.n	8017d8a <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8017d78:	4b6a      	ldr	r3, [pc, #424]	; (8017f24 <tcp_input+0x7e4>)
 8017d7a:	681b      	ldr	r3, [r3, #0]
 8017d7c:	4618      	mov	r0, r3
 8017d7e:	f7fc f967 	bl	8014050 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8017d82:	69f8      	ldr	r0, [r7, #28]
 8017d84:	f7fe fa14 	bl	80161b0 <tcp_abort>
            goto aborted;
 8017d88:	e078      	b.n	8017e7c <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8017d8a:	69fb      	ldr	r3, [r7, #28]
 8017d8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8017d90:	2b00      	cmp	r3, #0
 8017d92:	d00c      	beq.n	8017dae <tcp_input+0x66e>
 8017d94:	69fb      	ldr	r3, [r7, #28]
 8017d96:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8017d9a:	69fb      	ldr	r3, [r7, #28]
 8017d9c:	6918      	ldr	r0, [r3, #16]
 8017d9e:	4b61      	ldr	r3, [pc, #388]	; (8017f24 <tcp_input+0x7e4>)
 8017da0:	681a      	ldr	r2, [r3, #0]
 8017da2:	2300      	movs	r3, #0
 8017da4:	69f9      	ldr	r1, [r7, #28]
 8017da6:	47a0      	blx	r4
 8017da8:	4603      	mov	r3, r0
 8017daa:	74fb      	strb	r3, [r7, #19]
 8017dac:	e008      	b.n	8017dc0 <tcp_input+0x680>
 8017dae:	4b5d      	ldr	r3, [pc, #372]	; (8017f24 <tcp_input+0x7e4>)
 8017db0:	681a      	ldr	r2, [r3, #0]
 8017db2:	2300      	movs	r3, #0
 8017db4:	69f9      	ldr	r1, [r7, #28]
 8017db6:	2000      	movs	r0, #0
 8017db8:	f7ff f884 	bl	8016ec4 <tcp_recv_null>
 8017dbc:	4603      	mov	r3, r0
 8017dbe:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8017dc0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017dc4:	f113 0f0d 	cmn.w	r3, #13
 8017dc8:	d053      	beq.n	8017e72 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8017dca:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017dce:	2b00      	cmp	r3, #0
 8017dd0:	d003      	beq.n	8017dda <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8017dd2:	4b54      	ldr	r3, [pc, #336]	; (8017f24 <tcp_input+0x7e4>)
 8017dd4:	681a      	ldr	r2, [r3, #0]
 8017dd6:	69fb      	ldr	r3, [r7, #28]
 8017dd8:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8017dda:	4b4f      	ldr	r3, [pc, #316]	; (8017f18 <tcp_input+0x7d8>)
 8017ddc:	781b      	ldrb	r3, [r3, #0]
 8017dde:	f003 0320 	and.w	r3, r3, #32
 8017de2:	2b00      	cmp	r3, #0
 8017de4:	d030      	beq.n	8017e48 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 8017de6:	69fb      	ldr	r3, [r7, #28]
 8017de8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017dea:	2b00      	cmp	r3, #0
 8017dec:	d009      	beq.n	8017e02 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8017dee:	69fb      	ldr	r3, [r7, #28]
 8017df0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017df2:	7b5a      	ldrb	r2, [r3, #13]
 8017df4:	69fb      	ldr	r3, [r7, #28]
 8017df6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017df8:	f042 0220 	orr.w	r2, r2, #32
 8017dfc:	b2d2      	uxtb	r2, r2
 8017dfe:	735a      	strb	r2, [r3, #13]
 8017e00:	e022      	b.n	8017e48 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8017e02:	69fb      	ldr	r3, [r7, #28]
 8017e04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017e06:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8017e0a:	d005      	beq.n	8017e18 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8017e0c:	69fb      	ldr	r3, [r7, #28]
 8017e0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017e10:	3301      	adds	r3, #1
 8017e12:	b29a      	uxth	r2, r3
 8017e14:	69fb      	ldr	r3, [r7, #28]
 8017e16:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8017e18:	69fb      	ldr	r3, [r7, #28]
 8017e1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8017e1e:	2b00      	cmp	r3, #0
 8017e20:	d00b      	beq.n	8017e3a <tcp_input+0x6fa>
 8017e22:	69fb      	ldr	r3, [r7, #28]
 8017e24:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8017e28:	69fb      	ldr	r3, [r7, #28]
 8017e2a:	6918      	ldr	r0, [r3, #16]
 8017e2c:	2300      	movs	r3, #0
 8017e2e:	2200      	movs	r2, #0
 8017e30:	69f9      	ldr	r1, [r7, #28]
 8017e32:	47a0      	blx	r4
 8017e34:	4603      	mov	r3, r0
 8017e36:	74fb      	strb	r3, [r7, #19]
 8017e38:	e001      	b.n	8017e3e <tcp_input+0x6fe>
 8017e3a:	2300      	movs	r3, #0
 8017e3c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8017e3e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017e42:	f113 0f0d 	cmn.w	r3, #13
 8017e46:	d016      	beq.n	8017e76 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8017e48:	4b32      	ldr	r3, [pc, #200]	; (8017f14 <tcp_input+0x7d4>)
 8017e4a:	2200      	movs	r2, #0
 8017e4c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8017e4e:	69f8      	ldr	r0, [r7, #28]
 8017e50:	f000 f87e 	bl	8017f50 <tcp_input_delayed_close>
 8017e54:	4603      	mov	r3, r0
 8017e56:	2b00      	cmp	r3, #0
 8017e58:	d10f      	bne.n	8017e7a <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8017e5a:	69f8      	ldr	r0, [r7, #28]
 8017e5c:	f002 ff10 	bl	801ac80 <tcp_output>
 8017e60:	e00c      	b.n	8017e7c <tcp_input+0x73c>
        goto aborted;
 8017e62:	bf00      	nop
 8017e64:	e00a      	b.n	8017e7c <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8017e66:	bf00      	nop
 8017e68:	e008      	b.n	8017e7c <tcp_input+0x73c>
              goto aborted;
 8017e6a:	bf00      	nop
 8017e6c:	e006      	b.n	8017e7c <tcp_input+0x73c>
          goto aborted;
 8017e6e:	bf00      	nop
 8017e70:	e004      	b.n	8017e7c <tcp_input+0x73c>
            goto aborted;
 8017e72:	bf00      	nop
 8017e74:	e002      	b.n	8017e7c <tcp_input+0x73c>
              goto aborted;
 8017e76:	bf00      	nop
 8017e78:	e000      	b.n	8017e7c <tcp_input+0x73c>
          goto aborted;
 8017e7a:	bf00      	nop
    tcp_input_pcb = NULL;
 8017e7c:	4b25      	ldr	r3, [pc, #148]	; (8017f14 <tcp_input+0x7d4>)
 8017e7e:	2200      	movs	r2, #0
 8017e80:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8017e82:	4b28      	ldr	r3, [pc, #160]	; (8017f24 <tcp_input+0x7e4>)
 8017e84:	2200      	movs	r2, #0
 8017e86:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8017e88:	4b2a      	ldr	r3, [pc, #168]	; (8017f34 <tcp_input+0x7f4>)
 8017e8a:	685b      	ldr	r3, [r3, #4]
 8017e8c:	2b00      	cmp	r3, #0
 8017e8e:	d03d      	beq.n	8017f0c <tcp_input+0x7cc>
      pbuf_free(inseg.p);
 8017e90:	4b28      	ldr	r3, [pc, #160]	; (8017f34 <tcp_input+0x7f4>)
 8017e92:	685b      	ldr	r3, [r3, #4]
 8017e94:	4618      	mov	r0, r3
 8017e96:	f7fc f8db 	bl	8014050 <pbuf_free>
      inseg.p = NULL;
 8017e9a:	4b26      	ldr	r3, [pc, #152]	; (8017f34 <tcp_input+0x7f4>)
 8017e9c:	2200      	movs	r2, #0
 8017e9e:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8017ea0:	e034      	b.n	8017f0c <tcp_input+0x7cc>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8017ea2:	4b25      	ldr	r3, [pc, #148]	; (8017f38 <tcp_input+0x7f8>)
 8017ea4:	681b      	ldr	r3, [r3, #0]
 8017ea6:	899b      	ldrh	r3, [r3, #12]
 8017ea8:	b29b      	uxth	r3, r3
 8017eaa:	4618      	mov	r0, r3
 8017eac:	f7f7 ff26 	bl	800fcfc <lwip_htons>
 8017eb0:	4603      	mov	r3, r0
 8017eb2:	b2db      	uxtb	r3, r3
 8017eb4:	f003 0304 	and.w	r3, r3, #4
 8017eb8:	2b00      	cmp	r3, #0
 8017eba:	d118      	bne.n	8017eee <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017ebc:	4b1f      	ldr	r3, [pc, #124]	; (8017f3c <tcp_input+0x7fc>)
 8017ebe:	6819      	ldr	r1, [r3, #0]
 8017ec0:	4b1f      	ldr	r3, [pc, #124]	; (8017f40 <tcp_input+0x800>)
 8017ec2:	881b      	ldrh	r3, [r3, #0]
 8017ec4:	461a      	mov	r2, r3
 8017ec6:	4b1f      	ldr	r3, [pc, #124]	; (8017f44 <tcp_input+0x804>)
 8017ec8:	681b      	ldr	r3, [r3, #0]
 8017eca:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017ecc:	4b1a      	ldr	r3, [pc, #104]	; (8017f38 <tcp_input+0x7f8>)
 8017ece:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017ed0:	885b      	ldrh	r3, [r3, #2]
 8017ed2:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017ed4:	4a18      	ldr	r2, [pc, #96]	; (8017f38 <tcp_input+0x7f8>)
 8017ed6:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017ed8:	8812      	ldrh	r2, [r2, #0]
 8017eda:	b292      	uxth	r2, r2
 8017edc:	9202      	str	r2, [sp, #8]
 8017ede:	9301      	str	r3, [sp, #4]
 8017ee0:	4b19      	ldr	r3, [pc, #100]	; (8017f48 <tcp_input+0x808>)
 8017ee2:	9300      	str	r3, [sp, #0]
 8017ee4:	4b19      	ldr	r3, [pc, #100]	; (8017f4c <tcp_input+0x80c>)
 8017ee6:	4602      	mov	r2, r0
 8017ee8:	2000      	movs	r0, #0
 8017eea:	f003 fc8f 	bl	801b80c <tcp_rst>
    pbuf_free(p);
 8017eee:	6878      	ldr	r0, [r7, #4]
 8017ef0:	f7fc f8ae 	bl	8014050 <pbuf_free>
  return;
 8017ef4:	e00a      	b.n	8017f0c <tcp_input+0x7cc>
    goto dropped;
 8017ef6:	bf00      	nop
 8017ef8:	e004      	b.n	8017f04 <tcp_input+0x7c4>
dropped:
 8017efa:	bf00      	nop
 8017efc:	e002      	b.n	8017f04 <tcp_input+0x7c4>
      goto dropped;
 8017efe:	bf00      	nop
 8017f00:	e000      	b.n	8017f04 <tcp_input+0x7c4>
      goto dropped;
 8017f02:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8017f04:	6878      	ldr	r0, [r7, #4]
 8017f06:	f7fc f8a3 	bl	8014050 <pbuf_free>
 8017f0a:	e000      	b.n	8017f0e <tcp_input+0x7ce>
  return;
 8017f0c:	bf00      	nop
}
 8017f0e:	3724      	adds	r7, #36	; 0x24
 8017f10:	46bd      	mov	sp, r7
 8017f12:	bd90      	pop	{r4, r7, pc}
 8017f14:	24048e94 	.word	0x24048e94
 8017f18:	24040791 	.word	0x24040791
 8017f1c:	24048e80 	.word	0x24048e80
 8017f20:	2404078c 	.word	0x2404078c
 8017f24:	24040794 	.word	0x24040794
 8017f28:	08025af0 	.word	0x08025af0
 8017f2c:	08025cc4 	.word	0x08025cc4
 8017f30:	08025b5c 	.word	0x08025b5c
 8017f34:	24040764 	.word	0x24040764
 8017f38:	24040774 	.word	0x24040774
 8017f3c:	24040788 	.word	0x24040788
 8017f40:	2404078e 	.word	0x2404078e
 8017f44:	24040784 	.word	0x24040784
 8017f48:	24045dc8 	.word	0x24045dc8
 8017f4c:	24045dcc 	.word	0x24045dcc

08017f50 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8017f50:	b580      	push	{r7, lr}
 8017f52:	b082      	sub	sp, #8
 8017f54:	af00      	add	r7, sp, #0
 8017f56:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8017f58:	687b      	ldr	r3, [r7, #4]
 8017f5a:	2b00      	cmp	r3, #0
 8017f5c:	d106      	bne.n	8017f6c <tcp_input_delayed_close+0x1c>
 8017f5e:	4b17      	ldr	r3, [pc, #92]	; (8017fbc <tcp_input_delayed_close+0x6c>)
 8017f60:	f240 225a 	movw	r2, #602	; 0x25a
 8017f64:	4916      	ldr	r1, [pc, #88]	; (8017fc0 <tcp_input_delayed_close+0x70>)
 8017f66:	4817      	ldr	r0, [pc, #92]	; (8017fc4 <tcp_input_delayed_close+0x74>)
 8017f68:	f008 fff2 	bl	8020f50 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8017f6c:	4b16      	ldr	r3, [pc, #88]	; (8017fc8 <tcp_input_delayed_close+0x78>)
 8017f6e:	781b      	ldrb	r3, [r3, #0]
 8017f70:	f003 0310 	and.w	r3, r3, #16
 8017f74:	2b00      	cmp	r3, #0
 8017f76:	d01c      	beq.n	8017fb2 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8017f78:	687b      	ldr	r3, [r7, #4]
 8017f7a:	8b5b      	ldrh	r3, [r3, #26]
 8017f7c:	f003 0310 	and.w	r3, r3, #16
 8017f80:	2b00      	cmp	r3, #0
 8017f82:	d10d      	bne.n	8017fa0 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8017f84:	687b      	ldr	r3, [r7, #4]
 8017f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017f8a:	2b00      	cmp	r3, #0
 8017f8c:	d008      	beq.n	8017fa0 <tcp_input_delayed_close+0x50>
 8017f8e:	687b      	ldr	r3, [r7, #4]
 8017f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017f94:	687a      	ldr	r2, [r7, #4]
 8017f96:	6912      	ldr	r2, [r2, #16]
 8017f98:	f06f 010e 	mvn.w	r1, #14
 8017f9c:	4610      	mov	r0, r2
 8017f9e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8017fa0:	6879      	ldr	r1, [r7, #4]
 8017fa2:	480a      	ldr	r0, [pc, #40]	; (8017fcc <tcp_input_delayed_close+0x7c>)
 8017fa4:	f7ff fa54 	bl	8017450 <tcp_pcb_remove>
    tcp_free(pcb);
 8017fa8:	6878      	ldr	r0, [r7, #4]
 8017faa:	f7fd fdc7 	bl	8015b3c <tcp_free>
    return 1;
 8017fae:	2301      	movs	r3, #1
 8017fb0:	e000      	b.n	8017fb4 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8017fb2:	2300      	movs	r3, #0
}
 8017fb4:	4618      	mov	r0, r3
 8017fb6:	3708      	adds	r7, #8
 8017fb8:	46bd      	mov	sp, r7
 8017fba:	bd80      	pop	{r7, pc}
 8017fbc:	08025af0 	.word	0x08025af0
 8017fc0:	08025ce0 	.word	0x08025ce0
 8017fc4:	08025b5c 	.word	0x08025b5c
 8017fc8:	24040791 	.word	0x24040791
 8017fcc:	24048e80 	.word	0x24048e80

08017fd0 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8017fd0:	b590      	push	{r4, r7, lr}
 8017fd2:	b08b      	sub	sp, #44	; 0x2c
 8017fd4:	af04      	add	r7, sp, #16
 8017fd6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8017fd8:	4b6f      	ldr	r3, [pc, #444]	; (8018198 <tcp_listen_input+0x1c8>)
 8017fda:	781b      	ldrb	r3, [r3, #0]
 8017fdc:	f003 0304 	and.w	r3, r3, #4
 8017fe0:	2b00      	cmp	r3, #0
 8017fe2:	f040 80d3 	bne.w	801818c <tcp_listen_input+0x1bc>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8017fe6:	687b      	ldr	r3, [r7, #4]
 8017fe8:	2b00      	cmp	r3, #0
 8017fea:	d106      	bne.n	8017ffa <tcp_listen_input+0x2a>
 8017fec:	4b6b      	ldr	r3, [pc, #428]	; (801819c <tcp_listen_input+0x1cc>)
 8017fee:	f240 2281 	movw	r2, #641	; 0x281
 8017ff2:	496b      	ldr	r1, [pc, #428]	; (80181a0 <tcp_listen_input+0x1d0>)
 8017ff4:	486b      	ldr	r0, [pc, #428]	; (80181a4 <tcp_listen_input+0x1d4>)
 8017ff6:	f008 ffab 	bl	8020f50 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8017ffa:	4b67      	ldr	r3, [pc, #412]	; (8018198 <tcp_listen_input+0x1c8>)
 8017ffc:	781b      	ldrb	r3, [r3, #0]
 8017ffe:	f003 0310 	and.w	r3, r3, #16
 8018002:	2b00      	cmp	r3, #0
 8018004:	d019      	beq.n	801803a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018006:	4b68      	ldr	r3, [pc, #416]	; (80181a8 <tcp_listen_input+0x1d8>)
 8018008:	6819      	ldr	r1, [r3, #0]
 801800a:	4b68      	ldr	r3, [pc, #416]	; (80181ac <tcp_listen_input+0x1dc>)
 801800c:	881b      	ldrh	r3, [r3, #0]
 801800e:	461a      	mov	r2, r3
 8018010:	4b67      	ldr	r3, [pc, #412]	; (80181b0 <tcp_listen_input+0x1e0>)
 8018012:	681b      	ldr	r3, [r3, #0]
 8018014:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018016:	4b67      	ldr	r3, [pc, #412]	; (80181b4 <tcp_listen_input+0x1e4>)
 8018018:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801801a:	885b      	ldrh	r3, [r3, #2]
 801801c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801801e:	4a65      	ldr	r2, [pc, #404]	; (80181b4 <tcp_listen_input+0x1e4>)
 8018020:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018022:	8812      	ldrh	r2, [r2, #0]
 8018024:	b292      	uxth	r2, r2
 8018026:	9202      	str	r2, [sp, #8]
 8018028:	9301      	str	r3, [sp, #4]
 801802a:	4b63      	ldr	r3, [pc, #396]	; (80181b8 <tcp_listen_input+0x1e8>)
 801802c:	9300      	str	r3, [sp, #0]
 801802e:	4b63      	ldr	r3, [pc, #396]	; (80181bc <tcp_listen_input+0x1ec>)
 8018030:	4602      	mov	r2, r0
 8018032:	6878      	ldr	r0, [r7, #4]
 8018034:	f003 fbea 	bl	801b80c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8018038:	e0aa      	b.n	8018190 <tcp_listen_input+0x1c0>
  } else if (flags & TCP_SYN) {
 801803a:	4b57      	ldr	r3, [pc, #348]	; (8018198 <tcp_listen_input+0x1c8>)
 801803c:	781b      	ldrb	r3, [r3, #0]
 801803e:	f003 0302 	and.w	r3, r3, #2
 8018042:	2b00      	cmp	r3, #0
 8018044:	f000 80a4 	beq.w	8018190 <tcp_listen_input+0x1c0>
    npcb = tcp_alloc(pcb->prio);
 8018048:	687b      	ldr	r3, [r7, #4]
 801804a:	7d5b      	ldrb	r3, [r3, #21]
 801804c:	4618      	mov	r0, r3
 801804e:	f7ff f85d 	bl	801710c <tcp_alloc>
 8018052:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8018054:	697b      	ldr	r3, [r7, #20]
 8018056:	2b00      	cmp	r3, #0
 8018058:	d111      	bne.n	801807e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801805a:	687b      	ldr	r3, [r7, #4]
 801805c:	699b      	ldr	r3, [r3, #24]
 801805e:	2b00      	cmp	r3, #0
 8018060:	d00a      	beq.n	8018078 <tcp_listen_input+0xa8>
 8018062:	687b      	ldr	r3, [r7, #4]
 8018064:	699b      	ldr	r3, [r3, #24]
 8018066:	687a      	ldr	r2, [r7, #4]
 8018068:	6910      	ldr	r0, [r2, #16]
 801806a:	f04f 32ff 	mov.w	r2, #4294967295
 801806e:	2100      	movs	r1, #0
 8018070:	4798      	blx	r3
 8018072:	4603      	mov	r3, r0
 8018074:	73bb      	strb	r3, [r7, #14]
      return;
 8018076:	e08c      	b.n	8018192 <tcp_listen_input+0x1c2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8018078:	23f0      	movs	r3, #240	; 0xf0
 801807a:	73bb      	strb	r3, [r7, #14]
      return;
 801807c:	e089      	b.n	8018192 <tcp_listen_input+0x1c2>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801807e:	4b50      	ldr	r3, [pc, #320]	; (80181c0 <tcp_listen_input+0x1f0>)
 8018080:	695a      	ldr	r2, [r3, #20]
 8018082:	697b      	ldr	r3, [r7, #20]
 8018084:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8018086:	4b4e      	ldr	r3, [pc, #312]	; (80181c0 <tcp_listen_input+0x1f0>)
 8018088:	691a      	ldr	r2, [r3, #16]
 801808a:	697b      	ldr	r3, [r7, #20]
 801808c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801808e:	687b      	ldr	r3, [r7, #4]
 8018090:	8ada      	ldrh	r2, [r3, #22]
 8018092:	697b      	ldr	r3, [r7, #20]
 8018094:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8018096:	4b47      	ldr	r3, [pc, #284]	; (80181b4 <tcp_listen_input+0x1e4>)
 8018098:	681b      	ldr	r3, [r3, #0]
 801809a:	881b      	ldrh	r3, [r3, #0]
 801809c:	b29a      	uxth	r2, r3
 801809e:	697b      	ldr	r3, [r7, #20]
 80180a0:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80180a2:	697b      	ldr	r3, [r7, #20]
 80180a4:	2203      	movs	r2, #3
 80180a6:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80180a8:	4b41      	ldr	r3, [pc, #260]	; (80181b0 <tcp_listen_input+0x1e0>)
 80180aa:	681b      	ldr	r3, [r3, #0]
 80180ac:	1c5a      	adds	r2, r3, #1
 80180ae:	697b      	ldr	r3, [r7, #20]
 80180b0:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80180b2:	697b      	ldr	r3, [r7, #20]
 80180b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80180b6:	697b      	ldr	r3, [r7, #20]
 80180b8:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80180ba:	6978      	ldr	r0, [r7, #20]
 80180bc:	f7ff fa5c 	bl	8017578 <tcp_next_iss>
 80180c0:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80180c2:	697b      	ldr	r3, [r7, #20]
 80180c4:	693a      	ldr	r2, [r7, #16]
 80180c6:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 80180c8:	697b      	ldr	r3, [r7, #20]
 80180ca:	693a      	ldr	r2, [r7, #16]
 80180cc:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 80180ce:	697b      	ldr	r3, [r7, #20]
 80180d0:	693a      	ldr	r2, [r7, #16]
 80180d2:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 80180d4:	697b      	ldr	r3, [r7, #20]
 80180d6:	693a      	ldr	r2, [r7, #16]
 80180d8:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80180da:	4b35      	ldr	r3, [pc, #212]	; (80181b0 <tcp_listen_input+0x1e0>)
 80180dc:	681b      	ldr	r3, [r3, #0]
 80180de:	1e5a      	subs	r2, r3, #1
 80180e0:	697b      	ldr	r3, [r7, #20]
 80180e2:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 80180e4:	687b      	ldr	r3, [r7, #4]
 80180e6:	691a      	ldr	r2, [r3, #16]
 80180e8:	697b      	ldr	r3, [r7, #20]
 80180ea:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80180ec:	697b      	ldr	r3, [r7, #20]
 80180ee:	687a      	ldr	r2, [r7, #4]
 80180f0:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80180f2:	687b      	ldr	r3, [r7, #4]
 80180f4:	7a5b      	ldrb	r3, [r3, #9]
 80180f6:	f003 030c 	and.w	r3, r3, #12
 80180fa:	b2da      	uxtb	r2, r3
 80180fc:	697b      	ldr	r3, [r7, #20]
 80180fe:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8018100:	687b      	ldr	r3, [r7, #4]
 8018102:	7a1a      	ldrb	r2, [r3, #8]
 8018104:	697b      	ldr	r3, [r7, #20]
 8018106:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8018108:	4b2e      	ldr	r3, [pc, #184]	; (80181c4 <tcp_listen_input+0x1f4>)
 801810a:	681a      	ldr	r2, [r3, #0]
 801810c:	697b      	ldr	r3, [r7, #20]
 801810e:	60da      	str	r2, [r3, #12]
 8018110:	4a2c      	ldr	r2, [pc, #176]	; (80181c4 <tcp_listen_input+0x1f4>)
 8018112:	697b      	ldr	r3, [r7, #20]
 8018114:	6013      	str	r3, [r2, #0]
 8018116:	f003 feef 	bl	801bef8 <tcp_timer_needed>
 801811a:	4b2b      	ldr	r3, [pc, #172]	; (80181c8 <tcp_listen_input+0x1f8>)
 801811c:	2201      	movs	r2, #1
 801811e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8018120:	6978      	ldr	r0, [r7, #20]
 8018122:	f001 fd8f 	bl	8019c44 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8018126:	4b23      	ldr	r3, [pc, #140]	; (80181b4 <tcp_listen_input+0x1e4>)
 8018128:	681b      	ldr	r3, [r3, #0]
 801812a:	89db      	ldrh	r3, [r3, #14]
 801812c:	b29a      	uxth	r2, r3
 801812e:	697b      	ldr	r3, [r7, #20]
 8018130:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8018134:	697b      	ldr	r3, [r7, #20]
 8018136:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801813a:	697b      	ldr	r3, [r7, #20]
 801813c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8018140:	697b      	ldr	r3, [r7, #20]
 8018142:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8018144:	697b      	ldr	r3, [r7, #20]
 8018146:	3304      	adds	r3, #4
 8018148:	4618      	mov	r0, r3
 801814a:	f7f9 f8cd 	bl	80112e8 <ip4_route>
 801814e:	4601      	mov	r1, r0
 8018150:	697b      	ldr	r3, [r7, #20]
 8018152:	3304      	adds	r3, #4
 8018154:	461a      	mov	r2, r3
 8018156:	4620      	mov	r0, r4
 8018158:	f7ff fa34 	bl	80175c4 <tcp_eff_send_mss_netif>
 801815c:	4603      	mov	r3, r0
 801815e:	461a      	mov	r2, r3
 8018160:	697b      	ldr	r3, [r7, #20]
 8018162:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8018164:	2112      	movs	r1, #18
 8018166:	6978      	ldr	r0, [r7, #20]
 8018168:	f002 fc9c 	bl	801aaa4 <tcp_enqueue_flags>
 801816c:	4603      	mov	r3, r0
 801816e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8018170:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018174:	2b00      	cmp	r3, #0
 8018176:	d004      	beq.n	8018182 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8018178:	2100      	movs	r1, #0
 801817a:	6978      	ldr	r0, [r7, #20]
 801817c:	f7fd ff5a 	bl	8016034 <tcp_abandon>
      return;
 8018180:	e007      	b.n	8018192 <tcp_listen_input+0x1c2>
    tcp_output(npcb);
 8018182:	6978      	ldr	r0, [r7, #20]
 8018184:	f002 fd7c 	bl	801ac80 <tcp_output>
  return;
 8018188:	bf00      	nop
 801818a:	e001      	b.n	8018190 <tcp_listen_input+0x1c0>
    return;
 801818c:	bf00      	nop
 801818e:	e000      	b.n	8018192 <tcp_listen_input+0x1c2>
  return;
 8018190:	bf00      	nop
}
 8018192:	371c      	adds	r7, #28
 8018194:	46bd      	mov	sp, r7
 8018196:	bd90      	pop	{r4, r7, pc}
 8018198:	24040790 	.word	0x24040790
 801819c:	08025af0 	.word	0x08025af0
 80181a0:	08025d08 	.word	0x08025d08
 80181a4:	08025b5c 	.word	0x08025b5c
 80181a8:	24040788 	.word	0x24040788
 80181ac:	2404078e 	.word	0x2404078e
 80181b0:	24040784 	.word	0x24040784
 80181b4:	24040774 	.word	0x24040774
 80181b8:	24045dc8 	.word	0x24045dc8
 80181bc:	24045dcc 	.word	0x24045dcc
 80181c0:	24045db8 	.word	0x24045db8
 80181c4:	24048e80 	.word	0x24048e80
 80181c8:	24048e7c 	.word	0x24048e7c

080181cc <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80181cc:	b580      	push	{r7, lr}
 80181ce:	b086      	sub	sp, #24
 80181d0:	af04      	add	r7, sp, #16
 80181d2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80181d4:	4b30      	ldr	r3, [pc, #192]	; (8018298 <tcp_timewait_input+0xcc>)
 80181d6:	781b      	ldrb	r3, [r3, #0]
 80181d8:	f003 0304 	and.w	r3, r3, #4
 80181dc:	2b00      	cmp	r3, #0
 80181de:	d154      	bne.n	801828a <tcp_timewait_input+0xbe>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80181e0:	687b      	ldr	r3, [r7, #4]
 80181e2:	2b00      	cmp	r3, #0
 80181e4:	d106      	bne.n	80181f4 <tcp_timewait_input+0x28>
 80181e6:	4b2d      	ldr	r3, [pc, #180]	; (801829c <tcp_timewait_input+0xd0>)
 80181e8:	f240 22ee 	movw	r2, #750	; 0x2ee
 80181ec:	492c      	ldr	r1, [pc, #176]	; (80182a0 <tcp_timewait_input+0xd4>)
 80181ee:	482d      	ldr	r0, [pc, #180]	; (80182a4 <tcp_timewait_input+0xd8>)
 80181f0:	f008 feae 	bl	8020f50 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80181f4:	4b28      	ldr	r3, [pc, #160]	; (8018298 <tcp_timewait_input+0xcc>)
 80181f6:	781b      	ldrb	r3, [r3, #0]
 80181f8:	f003 0302 	and.w	r3, r3, #2
 80181fc:	2b00      	cmp	r3, #0
 80181fe:	d02a      	beq.n	8018256 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8018200:	4b29      	ldr	r3, [pc, #164]	; (80182a8 <tcp_timewait_input+0xdc>)
 8018202:	681a      	ldr	r2, [r3, #0]
 8018204:	687b      	ldr	r3, [r7, #4]
 8018206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018208:	1ad3      	subs	r3, r2, r3
 801820a:	2b00      	cmp	r3, #0
 801820c:	db2d      	blt.n	801826a <tcp_timewait_input+0x9e>
 801820e:	4b26      	ldr	r3, [pc, #152]	; (80182a8 <tcp_timewait_input+0xdc>)
 8018210:	681a      	ldr	r2, [r3, #0]
 8018212:	687b      	ldr	r3, [r7, #4]
 8018214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018216:	6879      	ldr	r1, [r7, #4]
 8018218:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801821a:	440b      	add	r3, r1
 801821c:	1ad3      	subs	r3, r2, r3
 801821e:	2b00      	cmp	r3, #0
 8018220:	dc23      	bgt.n	801826a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018222:	4b22      	ldr	r3, [pc, #136]	; (80182ac <tcp_timewait_input+0xe0>)
 8018224:	6819      	ldr	r1, [r3, #0]
 8018226:	4b22      	ldr	r3, [pc, #136]	; (80182b0 <tcp_timewait_input+0xe4>)
 8018228:	881b      	ldrh	r3, [r3, #0]
 801822a:	461a      	mov	r2, r3
 801822c:	4b1e      	ldr	r3, [pc, #120]	; (80182a8 <tcp_timewait_input+0xdc>)
 801822e:	681b      	ldr	r3, [r3, #0]
 8018230:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018232:	4b20      	ldr	r3, [pc, #128]	; (80182b4 <tcp_timewait_input+0xe8>)
 8018234:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018236:	885b      	ldrh	r3, [r3, #2]
 8018238:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801823a:	4a1e      	ldr	r2, [pc, #120]	; (80182b4 <tcp_timewait_input+0xe8>)
 801823c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801823e:	8812      	ldrh	r2, [r2, #0]
 8018240:	b292      	uxth	r2, r2
 8018242:	9202      	str	r2, [sp, #8]
 8018244:	9301      	str	r3, [sp, #4]
 8018246:	4b1c      	ldr	r3, [pc, #112]	; (80182b8 <tcp_timewait_input+0xec>)
 8018248:	9300      	str	r3, [sp, #0]
 801824a:	4b1c      	ldr	r3, [pc, #112]	; (80182bc <tcp_timewait_input+0xf0>)
 801824c:	4602      	mov	r2, r0
 801824e:	6878      	ldr	r0, [r7, #4]
 8018250:	f003 fadc 	bl	801b80c <tcp_rst>
      return;
 8018254:	e01c      	b.n	8018290 <tcp_timewait_input+0xc4>
    }
  } else if (flags & TCP_FIN) {
 8018256:	4b10      	ldr	r3, [pc, #64]	; (8018298 <tcp_timewait_input+0xcc>)
 8018258:	781b      	ldrb	r3, [r3, #0]
 801825a:	f003 0301 	and.w	r3, r3, #1
 801825e:	2b00      	cmp	r3, #0
 8018260:	d003      	beq.n	801826a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8018262:	4b17      	ldr	r3, [pc, #92]	; (80182c0 <tcp_timewait_input+0xf4>)
 8018264:	681a      	ldr	r2, [r3, #0]
 8018266:	687b      	ldr	r3, [r7, #4]
 8018268:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801826a:	4b11      	ldr	r3, [pc, #68]	; (80182b0 <tcp_timewait_input+0xe4>)
 801826c:	881b      	ldrh	r3, [r3, #0]
 801826e:	2b00      	cmp	r3, #0
 8018270:	d00d      	beq.n	801828e <tcp_timewait_input+0xc2>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8018272:	687b      	ldr	r3, [r7, #4]
 8018274:	8b5b      	ldrh	r3, [r3, #26]
 8018276:	f043 0302 	orr.w	r3, r3, #2
 801827a:	b29a      	uxth	r2, r3
 801827c:	687b      	ldr	r3, [r7, #4]
 801827e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8018280:	6878      	ldr	r0, [r7, #4]
 8018282:	f002 fcfd 	bl	801ac80 <tcp_output>
  }
  return;
 8018286:	bf00      	nop
 8018288:	e001      	b.n	801828e <tcp_timewait_input+0xc2>
    return;
 801828a:	bf00      	nop
 801828c:	e000      	b.n	8018290 <tcp_timewait_input+0xc4>
  return;
 801828e:	bf00      	nop
}
 8018290:	3708      	adds	r7, #8
 8018292:	46bd      	mov	sp, r7
 8018294:	bd80      	pop	{r7, pc}
 8018296:	bf00      	nop
 8018298:	24040790 	.word	0x24040790
 801829c:	08025af0 	.word	0x08025af0
 80182a0:	08025d28 	.word	0x08025d28
 80182a4:	08025b5c 	.word	0x08025b5c
 80182a8:	24040784 	.word	0x24040784
 80182ac:	24040788 	.word	0x24040788
 80182b0:	2404078e 	.word	0x2404078e
 80182b4:	24040774 	.word	0x24040774
 80182b8:	24045dc8 	.word	0x24045dc8
 80182bc:	24045dcc 	.word	0x24045dcc
 80182c0:	24048e84 	.word	0x24048e84

080182c4 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80182c4:	b590      	push	{r4, r7, lr}
 80182c6:	b08d      	sub	sp, #52	; 0x34
 80182c8:	af04      	add	r7, sp, #16
 80182ca:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80182cc:	2300      	movs	r3, #0
 80182ce:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80182d0:	2300      	movs	r3, #0
 80182d2:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80182d4:	687b      	ldr	r3, [r7, #4]
 80182d6:	2b00      	cmp	r3, #0
 80182d8:	d106      	bne.n	80182e8 <tcp_process+0x24>
 80182da:	4ba5      	ldr	r3, [pc, #660]	; (8018570 <tcp_process+0x2ac>)
 80182dc:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80182e0:	49a4      	ldr	r1, [pc, #656]	; (8018574 <tcp_process+0x2b0>)
 80182e2:	48a5      	ldr	r0, [pc, #660]	; (8018578 <tcp_process+0x2b4>)
 80182e4:	f008 fe34 	bl	8020f50 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80182e8:	4ba4      	ldr	r3, [pc, #656]	; (801857c <tcp_process+0x2b8>)
 80182ea:	781b      	ldrb	r3, [r3, #0]
 80182ec:	f003 0304 	and.w	r3, r3, #4
 80182f0:	2b00      	cmp	r3, #0
 80182f2:	d04e      	beq.n	8018392 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80182f4:	687b      	ldr	r3, [r7, #4]
 80182f6:	7d1b      	ldrb	r3, [r3, #20]
 80182f8:	2b02      	cmp	r3, #2
 80182fa:	d108      	bne.n	801830e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80182fc:	687b      	ldr	r3, [r7, #4]
 80182fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018300:	4b9f      	ldr	r3, [pc, #636]	; (8018580 <tcp_process+0x2bc>)
 8018302:	681b      	ldr	r3, [r3, #0]
 8018304:	429a      	cmp	r2, r3
 8018306:	d123      	bne.n	8018350 <tcp_process+0x8c>
        acceptable = 1;
 8018308:	2301      	movs	r3, #1
 801830a:	76fb      	strb	r3, [r7, #27]
 801830c:	e020      	b.n	8018350 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801830e:	687b      	ldr	r3, [r7, #4]
 8018310:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018312:	4b9c      	ldr	r3, [pc, #624]	; (8018584 <tcp_process+0x2c0>)
 8018314:	681b      	ldr	r3, [r3, #0]
 8018316:	429a      	cmp	r2, r3
 8018318:	d102      	bne.n	8018320 <tcp_process+0x5c>
        acceptable = 1;
 801831a:	2301      	movs	r3, #1
 801831c:	76fb      	strb	r3, [r7, #27]
 801831e:	e017      	b.n	8018350 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8018320:	4b98      	ldr	r3, [pc, #608]	; (8018584 <tcp_process+0x2c0>)
 8018322:	681a      	ldr	r2, [r3, #0]
 8018324:	687b      	ldr	r3, [r7, #4]
 8018326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018328:	1ad3      	subs	r3, r2, r3
 801832a:	2b00      	cmp	r3, #0
 801832c:	db10      	blt.n	8018350 <tcp_process+0x8c>
 801832e:	4b95      	ldr	r3, [pc, #596]	; (8018584 <tcp_process+0x2c0>)
 8018330:	681a      	ldr	r2, [r3, #0]
 8018332:	687b      	ldr	r3, [r7, #4]
 8018334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018336:	6879      	ldr	r1, [r7, #4]
 8018338:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801833a:	440b      	add	r3, r1
 801833c:	1ad3      	subs	r3, r2, r3
 801833e:	2b00      	cmp	r3, #0
 8018340:	dc06      	bgt.n	8018350 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8018342:	687b      	ldr	r3, [r7, #4]
 8018344:	8b5b      	ldrh	r3, [r3, #26]
 8018346:	f043 0302 	orr.w	r3, r3, #2
 801834a:	b29a      	uxth	r2, r3
 801834c:	687b      	ldr	r3, [r7, #4]
 801834e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8018350:	7efb      	ldrb	r3, [r7, #27]
 8018352:	2b00      	cmp	r3, #0
 8018354:	d01b      	beq.n	801838e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8018356:	687b      	ldr	r3, [r7, #4]
 8018358:	7d1b      	ldrb	r3, [r3, #20]
 801835a:	2b00      	cmp	r3, #0
 801835c:	d106      	bne.n	801836c <tcp_process+0xa8>
 801835e:	4b84      	ldr	r3, [pc, #528]	; (8018570 <tcp_process+0x2ac>)
 8018360:	f44f 724e 	mov.w	r2, #824	; 0x338
 8018364:	4988      	ldr	r1, [pc, #544]	; (8018588 <tcp_process+0x2c4>)
 8018366:	4884      	ldr	r0, [pc, #528]	; (8018578 <tcp_process+0x2b4>)
 8018368:	f008 fdf2 	bl	8020f50 <iprintf>
      recv_flags |= TF_RESET;
 801836c:	4b87      	ldr	r3, [pc, #540]	; (801858c <tcp_process+0x2c8>)
 801836e:	781b      	ldrb	r3, [r3, #0]
 8018370:	f043 0308 	orr.w	r3, r3, #8
 8018374:	b2da      	uxtb	r2, r3
 8018376:	4b85      	ldr	r3, [pc, #532]	; (801858c <tcp_process+0x2c8>)
 8018378:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801837a:	687b      	ldr	r3, [r7, #4]
 801837c:	8b5b      	ldrh	r3, [r3, #26]
 801837e:	f023 0301 	bic.w	r3, r3, #1
 8018382:	b29a      	uxth	r2, r3
 8018384:	687b      	ldr	r3, [r7, #4]
 8018386:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8018388:	f06f 030d 	mvn.w	r3, #13
 801838c:	e37a      	b.n	8018a84 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801838e:	2300      	movs	r3, #0
 8018390:	e378      	b.n	8018a84 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8018392:	4b7a      	ldr	r3, [pc, #488]	; (801857c <tcp_process+0x2b8>)
 8018394:	781b      	ldrb	r3, [r3, #0]
 8018396:	f003 0302 	and.w	r3, r3, #2
 801839a:	2b00      	cmp	r3, #0
 801839c:	d010      	beq.n	80183c0 <tcp_process+0xfc>
 801839e:	687b      	ldr	r3, [r7, #4]
 80183a0:	7d1b      	ldrb	r3, [r3, #20]
 80183a2:	2b02      	cmp	r3, #2
 80183a4:	d00c      	beq.n	80183c0 <tcp_process+0xfc>
 80183a6:	687b      	ldr	r3, [r7, #4]
 80183a8:	7d1b      	ldrb	r3, [r3, #20]
 80183aa:	2b03      	cmp	r3, #3
 80183ac:	d008      	beq.n	80183c0 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80183ae:	687b      	ldr	r3, [r7, #4]
 80183b0:	8b5b      	ldrh	r3, [r3, #26]
 80183b2:	f043 0302 	orr.w	r3, r3, #2
 80183b6:	b29a      	uxth	r2, r3
 80183b8:	687b      	ldr	r3, [r7, #4]
 80183ba:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80183bc:	2300      	movs	r3, #0
 80183be:	e361      	b.n	8018a84 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80183c0:	687b      	ldr	r3, [r7, #4]
 80183c2:	8b5b      	ldrh	r3, [r3, #26]
 80183c4:	f003 0310 	and.w	r3, r3, #16
 80183c8:	2b00      	cmp	r3, #0
 80183ca:	d103      	bne.n	80183d4 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80183cc:	4b70      	ldr	r3, [pc, #448]	; (8018590 <tcp_process+0x2cc>)
 80183ce:	681a      	ldr	r2, [r3, #0]
 80183d0:	687b      	ldr	r3, [r7, #4]
 80183d2:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80183d4:	687b      	ldr	r3, [r7, #4]
 80183d6:	2200      	movs	r2, #0
 80183d8:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 80183dc:	687b      	ldr	r3, [r7, #4]
 80183de:	2200      	movs	r2, #0
 80183e0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 80183e4:	6878      	ldr	r0, [r7, #4]
 80183e6:	f001 fc2d 	bl	8019c44 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80183ea:	687b      	ldr	r3, [r7, #4]
 80183ec:	7d1b      	ldrb	r3, [r3, #20]
 80183ee:	3b02      	subs	r3, #2
 80183f0:	2b07      	cmp	r3, #7
 80183f2:	f200 8337 	bhi.w	8018a64 <tcp_process+0x7a0>
 80183f6:	a201      	add	r2, pc, #4	; (adr r2, 80183fc <tcp_process+0x138>)
 80183f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80183fc:	0801841d 	.word	0x0801841d
 8018400:	0801864d 	.word	0x0801864d
 8018404:	080187c5 	.word	0x080187c5
 8018408:	080187ef 	.word	0x080187ef
 801840c:	08018913 	.word	0x08018913
 8018410:	080187c5 	.word	0x080187c5
 8018414:	0801899f 	.word	0x0801899f
 8018418:	08018a2f 	.word	0x08018a2f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 801841c:	4b57      	ldr	r3, [pc, #348]	; (801857c <tcp_process+0x2b8>)
 801841e:	781b      	ldrb	r3, [r3, #0]
 8018420:	f003 0310 	and.w	r3, r3, #16
 8018424:	2b00      	cmp	r3, #0
 8018426:	f000 80e4 	beq.w	80185f2 <tcp_process+0x32e>
 801842a:	4b54      	ldr	r3, [pc, #336]	; (801857c <tcp_process+0x2b8>)
 801842c:	781b      	ldrb	r3, [r3, #0]
 801842e:	f003 0302 	and.w	r3, r3, #2
 8018432:	2b00      	cmp	r3, #0
 8018434:	f000 80dd 	beq.w	80185f2 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8018438:	687b      	ldr	r3, [r7, #4]
 801843a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801843c:	1c5a      	adds	r2, r3, #1
 801843e:	4b50      	ldr	r3, [pc, #320]	; (8018580 <tcp_process+0x2bc>)
 8018440:	681b      	ldr	r3, [r3, #0]
 8018442:	429a      	cmp	r2, r3
 8018444:	f040 80d5 	bne.w	80185f2 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8018448:	4b4e      	ldr	r3, [pc, #312]	; (8018584 <tcp_process+0x2c0>)
 801844a:	681b      	ldr	r3, [r3, #0]
 801844c:	1c5a      	adds	r2, r3, #1
 801844e:	687b      	ldr	r3, [r7, #4]
 8018450:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8018452:	687b      	ldr	r3, [r7, #4]
 8018454:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018456:	687b      	ldr	r3, [r7, #4]
 8018458:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 801845a:	4b49      	ldr	r3, [pc, #292]	; (8018580 <tcp_process+0x2bc>)
 801845c:	681a      	ldr	r2, [r3, #0]
 801845e:	687b      	ldr	r3, [r7, #4]
 8018460:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8018462:	4b4c      	ldr	r3, [pc, #304]	; (8018594 <tcp_process+0x2d0>)
 8018464:	681b      	ldr	r3, [r3, #0]
 8018466:	89db      	ldrh	r3, [r3, #14]
 8018468:	b29a      	uxth	r2, r3
 801846a:	687b      	ldr	r3, [r7, #4]
 801846c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8018470:	687b      	ldr	r3, [r7, #4]
 8018472:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8018476:	687b      	ldr	r3, [r7, #4]
 8018478:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801847c:	4b41      	ldr	r3, [pc, #260]	; (8018584 <tcp_process+0x2c0>)
 801847e:	681b      	ldr	r3, [r3, #0]
 8018480:	1e5a      	subs	r2, r3, #1
 8018482:	687b      	ldr	r3, [r7, #4]
 8018484:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8018486:	687b      	ldr	r3, [r7, #4]
 8018488:	2204      	movs	r2, #4
 801848a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801848c:	687b      	ldr	r3, [r7, #4]
 801848e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8018490:	687b      	ldr	r3, [r7, #4]
 8018492:	3304      	adds	r3, #4
 8018494:	4618      	mov	r0, r3
 8018496:	f7f8 ff27 	bl	80112e8 <ip4_route>
 801849a:	4601      	mov	r1, r0
 801849c:	687b      	ldr	r3, [r7, #4]
 801849e:	3304      	adds	r3, #4
 80184a0:	461a      	mov	r2, r3
 80184a2:	4620      	mov	r0, r4
 80184a4:	f7ff f88e 	bl	80175c4 <tcp_eff_send_mss_netif>
 80184a8:	4603      	mov	r3, r0
 80184aa:	461a      	mov	r2, r3
 80184ac:	687b      	ldr	r3, [r7, #4]
 80184ae:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80184b0:	687b      	ldr	r3, [r7, #4]
 80184b2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80184b4:	009a      	lsls	r2, r3, #2
 80184b6:	687b      	ldr	r3, [r7, #4]
 80184b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80184ba:	005b      	lsls	r3, r3, #1
 80184bc:	f241 111c 	movw	r1, #4380	; 0x111c
 80184c0:	428b      	cmp	r3, r1
 80184c2:	bf38      	it	cc
 80184c4:	460b      	movcc	r3, r1
 80184c6:	429a      	cmp	r2, r3
 80184c8:	d204      	bcs.n	80184d4 <tcp_process+0x210>
 80184ca:	687b      	ldr	r3, [r7, #4]
 80184cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80184ce:	009b      	lsls	r3, r3, #2
 80184d0:	b29b      	uxth	r3, r3
 80184d2:	e00d      	b.n	80184f0 <tcp_process+0x22c>
 80184d4:	687b      	ldr	r3, [r7, #4]
 80184d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80184d8:	005b      	lsls	r3, r3, #1
 80184da:	f241 121c 	movw	r2, #4380	; 0x111c
 80184de:	4293      	cmp	r3, r2
 80184e0:	d904      	bls.n	80184ec <tcp_process+0x228>
 80184e2:	687b      	ldr	r3, [r7, #4]
 80184e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80184e6:	005b      	lsls	r3, r3, #1
 80184e8:	b29b      	uxth	r3, r3
 80184ea:	e001      	b.n	80184f0 <tcp_process+0x22c>
 80184ec:	f241 131c 	movw	r3, #4380	; 0x111c
 80184f0:	687a      	ldr	r2, [r7, #4]
 80184f2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80184f6:	687b      	ldr	r3, [r7, #4]
 80184f8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80184fc:	2b00      	cmp	r3, #0
 80184fe:	d106      	bne.n	801850e <tcp_process+0x24a>
 8018500:	4b1b      	ldr	r3, [pc, #108]	; (8018570 <tcp_process+0x2ac>)
 8018502:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8018506:	4924      	ldr	r1, [pc, #144]	; (8018598 <tcp_process+0x2d4>)
 8018508:	481b      	ldr	r0, [pc, #108]	; (8018578 <tcp_process+0x2b4>)
 801850a:	f008 fd21 	bl	8020f50 <iprintf>
        --pcb->snd_queuelen;
 801850e:	687b      	ldr	r3, [r7, #4]
 8018510:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018514:	3b01      	subs	r3, #1
 8018516:	b29a      	uxth	r2, r3
 8018518:	687b      	ldr	r3, [r7, #4]
 801851a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801851e:	687b      	ldr	r3, [r7, #4]
 8018520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018522:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8018524:	69fb      	ldr	r3, [r7, #28]
 8018526:	2b00      	cmp	r3, #0
 8018528:	d111      	bne.n	801854e <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 801852a:	687b      	ldr	r3, [r7, #4]
 801852c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801852e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8018530:	69fb      	ldr	r3, [r7, #28]
 8018532:	2b00      	cmp	r3, #0
 8018534:	d106      	bne.n	8018544 <tcp_process+0x280>
 8018536:	4b0e      	ldr	r3, [pc, #56]	; (8018570 <tcp_process+0x2ac>)
 8018538:	f44f 725d 	mov.w	r2, #884	; 0x374
 801853c:	4917      	ldr	r1, [pc, #92]	; (801859c <tcp_process+0x2d8>)
 801853e:	480e      	ldr	r0, [pc, #56]	; (8018578 <tcp_process+0x2b4>)
 8018540:	f008 fd06 	bl	8020f50 <iprintf>
          pcb->unsent = rseg->next;
 8018544:	69fb      	ldr	r3, [r7, #28]
 8018546:	681a      	ldr	r2, [r3, #0]
 8018548:	687b      	ldr	r3, [r7, #4]
 801854a:	66da      	str	r2, [r3, #108]	; 0x6c
 801854c:	e003      	b.n	8018556 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 801854e:	69fb      	ldr	r3, [r7, #28]
 8018550:	681a      	ldr	r2, [r3, #0]
 8018552:	687b      	ldr	r3, [r7, #4]
 8018554:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8018556:	69f8      	ldr	r0, [r7, #28]
 8018558:	f7fe fc70 	bl	8016e3c <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 801855c:	687b      	ldr	r3, [r7, #4]
 801855e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018560:	2b00      	cmp	r3, #0
 8018562:	d11d      	bne.n	80185a0 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8018564:	687b      	ldr	r3, [r7, #4]
 8018566:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801856a:	861a      	strh	r2, [r3, #48]	; 0x30
 801856c:	e01f      	b.n	80185ae <tcp_process+0x2ea>
 801856e:	bf00      	nop
 8018570:	08025af0 	.word	0x08025af0
 8018574:	08025d48 	.word	0x08025d48
 8018578:	08025b5c 	.word	0x08025b5c
 801857c:	24040790 	.word	0x24040790
 8018580:	24040788 	.word	0x24040788
 8018584:	24040784 	.word	0x24040784
 8018588:	08025d64 	.word	0x08025d64
 801858c:	24040791 	.word	0x24040791
 8018590:	24048e84 	.word	0x24048e84
 8018594:	24040774 	.word	0x24040774
 8018598:	08025d84 	.word	0x08025d84
 801859c:	08025d9c 	.word	0x08025d9c
        } else {
          pcb->rtime = 0;
 80185a0:	687b      	ldr	r3, [r7, #4]
 80185a2:	2200      	movs	r2, #0
 80185a4:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 80185a6:	687b      	ldr	r3, [r7, #4]
 80185a8:	2200      	movs	r2, #0
 80185aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80185ae:	687b      	ldr	r3, [r7, #4]
 80185b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80185b4:	2b00      	cmp	r3, #0
 80185b6:	d00a      	beq.n	80185ce <tcp_process+0x30a>
 80185b8:	687b      	ldr	r3, [r7, #4]
 80185ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80185be:	687a      	ldr	r2, [r7, #4]
 80185c0:	6910      	ldr	r0, [r2, #16]
 80185c2:	2200      	movs	r2, #0
 80185c4:	6879      	ldr	r1, [r7, #4]
 80185c6:	4798      	blx	r3
 80185c8:	4603      	mov	r3, r0
 80185ca:	76bb      	strb	r3, [r7, #26]
 80185cc:	e001      	b.n	80185d2 <tcp_process+0x30e>
 80185ce:	2300      	movs	r3, #0
 80185d0:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80185d2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80185d6:	f113 0f0d 	cmn.w	r3, #13
 80185da:	d102      	bne.n	80185e2 <tcp_process+0x31e>
          return ERR_ABRT;
 80185dc:	f06f 030c 	mvn.w	r3, #12
 80185e0:	e250      	b.n	8018a84 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80185e2:	687b      	ldr	r3, [r7, #4]
 80185e4:	8b5b      	ldrh	r3, [r3, #26]
 80185e6:	f043 0302 	orr.w	r3, r3, #2
 80185ea:	b29a      	uxth	r2, r3
 80185ec:	687b      	ldr	r3, [r7, #4]
 80185ee:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80185f0:	e23a      	b.n	8018a68 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80185f2:	4b9d      	ldr	r3, [pc, #628]	; (8018868 <tcp_process+0x5a4>)
 80185f4:	781b      	ldrb	r3, [r3, #0]
 80185f6:	f003 0310 	and.w	r3, r3, #16
 80185fa:	2b00      	cmp	r3, #0
 80185fc:	f000 8234 	beq.w	8018a68 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018600:	4b9a      	ldr	r3, [pc, #616]	; (801886c <tcp_process+0x5a8>)
 8018602:	6819      	ldr	r1, [r3, #0]
 8018604:	4b9a      	ldr	r3, [pc, #616]	; (8018870 <tcp_process+0x5ac>)
 8018606:	881b      	ldrh	r3, [r3, #0]
 8018608:	461a      	mov	r2, r3
 801860a:	4b9a      	ldr	r3, [pc, #616]	; (8018874 <tcp_process+0x5b0>)
 801860c:	681b      	ldr	r3, [r3, #0]
 801860e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018610:	4b99      	ldr	r3, [pc, #612]	; (8018878 <tcp_process+0x5b4>)
 8018612:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018614:	885b      	ldrh	r3, [r3, #2]
 8018616:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018618:	4a97      	ldr	r2, [pc, #604]	; (8018878 <tcp_process+0x5b4>)
 801861a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801861c:	8812      	ldrh	r2, [r2, #0]
 801861e:	b292      	uxth	r2, r2
 8018620:	9202      	str	r2, [sp, #8]
 8018622:	9301      	str	r3, [sp, #4]
 8018624:	4b95      	ldr	r3, [pc, #596]	; (801887c <tcp_process+0x5b8>)
 8018626:	9300      	str	r3, [sp, #0]
 8018628:	4b95      	ldr	r3, [pc, #596]	; (8018880 <tcp_process+0x5bc>)
 801862a:	4602      	mov	r2, r0
 801862c:	6878      	ldr	r0, [r7, #4]
 801862e:	f003 f8ed 	bl	801b80c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8018632:	687b      	ldr	r3, [r7, #4]
 8018634:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8018638:	2b05      	cmp	r3, #5
 801863a:	f200 8215 	bhi.w	8018a68 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801863e:	687b      	ldr	r3, [r7, #4]
 8018640:	2200      	movs	r2, #0
 8018642:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8018644:	6878      	ldr	r0, [r7, #4]
 8018646:	f002 feab 	bl	801b3a0 <tcp_rexmit_rto>
      break;
 801864a:	e20d      	b.n	8018a68 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 801864c:	4b86      	ldr	r3, [pc, #536]	; (8018868 <tcp_process+0x5a4>)
 801864e:	781b      	ldrb	r3, [r3, #0]
 8018650:	f003 0310 	and.w	r3, r3, #16
 8018654:	2b00      	cmp	r3, #0
 8018656:	f000 80a1 	beq.w	801879c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801865a:	4b84      	ldr	r3, [pc, #528]	; (801886c <tcp_process+0x5a8>)
 801865c:	681a      	ldr	r2, [r3, #0]
 801865e:	687b      	ldr	r3, [r7, #4]
 8018660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018662:	1ad3      	subs	r3, r2, r3
 8018664:	3b01      	subs	r3, #1
 8018666:	2b00      	cmp	r3, #0
 8018668:	db7e      	blt.n	8018768 <tcp_process+0x4a4>
 801866a:	4b80      	ldr	r3, [pc, #512]	; (801886c <tcp_process+0x5a8>)
 801866c:	681a      	ldr	r2, [r3, #0]
 801866e:	687b      	ldr	r3, [r7, #4]
 8018670:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018672:	1ad3      	subs	r3, r2, r3
 8018674:	2b00      	cmp	r3, #0
 8018676:	dc77      	bgt.n	8018768 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8018678:	687b      	ldr	r3, [r7, #4]
 801867a:	2204      	movs	r2, #4
 801867c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801867e:	687b      	ldr	r3, [r7, #4]
 8018680:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8018682:	2b00      	cmp	r3, #0
 8018684:	d102      	bne.n	801868c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8018686:	23fa      	movs	r3, #250	; 0xfa
 8018688:	76bb      	strb	r3, [r7, #26]
 801868a:	e01d      	b.n	80186c8 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 801868c:	687b      	ldr	r3, [r7, #4]
 801868e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8018690:	699b      	ldr	r3, [r3, #24]
 8018692:	2b00      	cmp	r3, #0
 8018694:	d106      	bne.n	80186a4 <tcp_process+0x3e0>
 8018696:	4b7b      	ldr	r3, [pc, #492]	; (8018884 <tcp_process+0x5c0>)
 8018698:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 801869c:	497a      	ldr	r1, [pc, #488]	; (8018888 <tcp_process+0x5c4>)
 801869e:	487b      	ldr	r0, [pc, #492]	; (801888c <tcp_process+0x5c8>)
 80186a0:	f008 fc56 	bl	8020f50 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80186a4:	687b      	ldr	r3, [r7, #4]
 80186a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80186a8:	699b      	ldr	r3, [r3, #24]
 80186aa:	2b00      	cmp	r3, #0
 80186ac:	d00a      	beq.n	80186c4 <tcp_process+0x400>
 80186ae:	687b      	ldr	r3, [r7, #4]
 80186b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80186b2:	699b      	ldr	r3, [r3, #24]
 80186b4:	687a      	ldr	r2, [r7, #4]
 80186b6:	6910      	ldr	r0, [r2, #16]
 80186b8:	2200      	movs	r2, #0
 80186ba:	6879      	ldr	r1, [r7, #4]
 80186bc:	4798      	blx	r3
 80186be:	4603      	mov	r3, r0
 80186c0:	76bb      	strb	r3, [r7, #26]
 80186c2:	e001      	b.n	80186c8 <tcp_process+0x404>
 80186c4:	23f0      	movs	r3, #240	; 0xf0
 80186c6:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80186c8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80186cc:	2b00      	cmp	r3, #0
 80186ce:	d00a      	beq.n	80186e6 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80186d0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80186d4:	f113 0f0d 	cmn.w	r3, #13
 80186d8:	d002      	beq.n	80186e0 <tcp_process+0x41c>
              tcp_abort(pcb);
 80186da:	6878      	ldr	r0, [r7, #4]
 80186dc:	f7fd fd68 	bl	80161b0 <tcp_abort>
            }
            return ERR_ABRT;
 80186e0:	f06f 030c 	mvn.w	r3, #12
 80186e4:	e1ce      	b.n	8018a84 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80186e6:	6878      	ldr	r0, [r7, #4]
 80186e8:	f000 fae0 	bl	8018cac <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80186ec:	4b68      	ldr	r3, [pc, #416]	; (8018890 <tcp_process+0x5cc>)
 80186ee:	881b      	ldrh	r3, [r3, #0]
 80186f0:	2b00      	cmp	r3, #0
 80186f2:	d005      	beq.n	8018700 <tcp_process+0x43c>
            recv_acked--;
 80186f4:	4b66      	ldr	r3, [pc, #408]	; (8018890 <tcp_process+0x5cc>)
 80186f6:	881b      	ldrh	r3, [r3, #0]
 80186f8:	3b01      	subs	r3, #1
 80186fa:	b29a      	uxth	r2, r3
 80186fc:	4b64      	ldr	r3, [pc, #400]	; (8018890 <tcp_process+0x5cc>)
 80186fe:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8018700:	687b      	ldr	r3, [r7, #4]
 8018702:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018704:	009a      	lsls	r2, r3, #2
 8018706:	687b      	ldr	r3, [r7, #4]
 8018708:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801870a:	005b      	lsls	r3, r3, #1
 801870c:	f241 111c 	movw	r1, #4380	; 0x111c
 8018710:	428b      	cmp	r3, r1
 8018712:	bf38      	it	cc
 8018714:	460b      	movcc	r3, r1
 8018716:	429a      	cmp	r2, r3
 8018718:	d204      	bcs.n	8018724 <tcp_process+0x460>
 801871a:	687b      	ldr	r3, [r7, #4]
 801871c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801871e:	009b      	lsls	r3, r3, #2
 8018720:	b29b      	uxth	r3, r3
 8018722:	e00d      	b.n	8018740 <tcp_process+0x47c>
 8018724:	687b      	ldr	r3, [r7, #4]
 8018726:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018728:	005b      	lsls	r3, r3, #1
 801872a:	f241 121c 	movw	r2, #4380	; 0x111c
 801872e:	4293      	cmp	r3, r2
 8018730:	d904      	bls.n	801873c <tcp_process+0x478>
 8018732:	687b      	ldr	r3, [r7, #4]
 8018734:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018736:	005b      	lsls	r3, r3, #1
 8018738:	b29b      	uxth	r3, r3
 801873a:	e001      	b.n	8018740 <tcp_process+0x47c>
 801873c:	f241 131c 	movw	r3, #4380	; 0x111c
 8018740:	687a      	ldr	r2, [r7, #4]
 8018742:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8018746:	4b53      	ldr	r3, [pc, #332]	; (8018894 <tcp_process+0x5d0>)
 8018748:	781b      	ldrb	r3, [r3, #0]
 801874a:	f003 0320 	and.w	r3, r3, #32
 801874e:	2b00      	cmp	r3, #0
 8018750:	d037      	beq.n	80187c2 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8018752:	687b      	ldr	r3, [r7, #4]
 8018754:	8b5b      	ldrh	r3, [r3, #26]
 8018756:	f043 0302 	orr.w	r3, r3, #2
 801875a:	b29a      	uxth	r2, r3
 801875c:	687b      	ldr	r3, [r7, #4]
 801875e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8018760:	687b      	ldr	r3, [r7, #4]
 8018762:	2207      	movs	r2, #7
 8018764:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8018766:	e02c      	b.n	80187c2 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018768:	4b40      	ldr	r3, [pc, #256]	; (801886c <tcp_process+0x5a8>)
 801876a:	6819      	ldr	r1, [r3, #0]
 801876c:	4b40      	ldr	r3, [pc, #256]	; (8018870 <tcp_process+0x5ac>)
 801876e:	881b      	ldrh	r3, [r3, #0]
 8018770:	461a      	mov	r2, r3
 8018772:	4b40      	ldr	r3, [pc, #256]	; (8018874 <tcp_process+0x5b0>)
 8018774:	681b      	ldr	r3, [r3, #0]
 8018776:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018778:	4b3f      	ldr	r3, [pc, #252]	; (8018878 <tcp_process+0x5b4>)
 801877a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801877c:	885b      	ldrh	r3, [r3, #2]
 801877e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018780:	4a3d      	ldr	r2, [pc, #244]	; (8018878 <tcp_process+0x5b4>)
 8018782:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018784:	8812      	ldrh	r2, [r2, #0]
 8018786:	b292      	uxth	r2, r2
 8018788:	9202      	str	r2, [sp, #8]
 801878a:	9301      	str	r3, [sp, #4]
 801878c:	4b3b      	ldr	r3, [pc, #236]	; (801887c <tcp_process+0x5b8>)
 801878e:	9300      	str	r3, [sp, #0]
 8018790:	4b3b      	ldr	r3, [pc, #236]	; (8018880 <tcp_process+0x5bc>)
 8018792:	4602      	mov	r2, r0
 8018794:	6878      	ldr	r0, [r7, #4]
 8018796:	f003 f839 	bl	801b80c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801879a:	e167      	b.n	8018a6c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801879c:	4b32      	ldr	r3, [pc, #200]	; (8018868 <tcp_process+0x5a4>)
 801879e:	781b      	ldrb	r3, [r3, #0]
 80187a0:	f003 0302 	and.w	r3, r3, #2
 80187a4:	2b00      	cmp	r3, #0
 80187a6:	f000 8161 	beq.w	8018a6c <tcp_process+0x7a8>
 80187aa:	687b      	ldr	r3, [r7, #4]
 80187ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80187ae:	1e5a      	subs	r2, r3, #1
 80187b0:	4b30      	ldr	r3, [pc, #192]	; (8018874 <tcp_process+0x5b0>)
 80187b2:	681b      	ldr	r3, [r3, #0]
 80187b4:	429a      	cmp	r2, r3
 80187b6:	f040 8159 	bne.w	8018a6c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80187ba:	6878      	ldr	r0, [r7, #4]
 80187bc:	f002 fe12 	bl	801b3e4 <tcp_rexmit>
      break;
 80187c0:	e154      	b.n	8018a6c <tcp_process+0x7a8>
 80187c2:	e153      	b.n	8018a6c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80187c4:	6878      	ldr	r0, [r7, #4]
 80187c6:	f000 fa71 	bl	8018cac <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80187ca:	4b32      	ldr	r3, [pc, #200]	; (8018894 <tcp_process+0x5d0>)
 80187cc:	781b      	ldrb	r3, [r3, #0]
 80187ce:	f003 0320 	and.w	r3, r3, #32
 80187d2:	2b00      	cmp	r3, #0
 80187d4:	f000 814c 	beq.w	8018a70 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80187d8:	687b      	ldr	r3, [r7, #4]
 80187da:	8b5b      	ldrh	r3, [r3, #26]
 80187dc:	f043 0302 	orr.w	r3, r3, #2
 80187e0:	b29a      	uxth	r2, r3
 80187e2:	687b      	ldr	r3, [r7, #4]
 80187e4:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80187e6:	687b      	ldr	r3, [r7, #4]
 80187e8:	2207      	movs	r2, #7
 80187ea:	751a      	strb	r2, [r3, #20]
      }
      break;
 80187ec:	e140      	b.n	8018a70 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80187ee:	6878      	ldr	r0, [r7, #4]
 80187f0:	f000 fa5c 	bl	8018cac <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80187f4:	4b27      	ldr	r3, [pc, #156]	; (8018894 <tcp_process+0x5d0>)
 80187f6:	781b      	ldrb	r3, [r3, #0]
 80187f8:	f003 0320 	and.w	r3, r3, #32
 80187fc:	2b00      	cmp	r3, #0
 80187fe:	d071      	beq.n	80188e4 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8018800:	4b19      	ldr	r3, [pc, #100]	; (8018868 <tcp_process+0x5a4>)
 8018802:	781b      	ldrb	r3, [r3, #0]
 8018804:	f003 0310 	and.w	r3, r3, #16
 8018808:	2b00      	cmp	r3, #0
 801880a:	d060      	beq.n	80188ce <tcp_process+0x60a>
 801880c:	687b      	ldr	r3, [r7, #4]
 801880e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018810:	4b16      	ldr	r3, [pc, #88]	; (801886c <tcp_process+0x5a8>)
 8018812:	681b      	ldr	r3, [r3, #0]
 8018814:	429a      	cmp	r2, r3
 8018816:	d15a      	bne.n	80188ce <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8018818:	687b      	ldr	r3, [r7, #4]
 801881a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801881c:	2b00      	cmp	r3, #0
 801881e:	d156      	bne.n	80188ce <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8018820:	687b      	ldr	r3, [r7, #4]
 8018822:	8b5b      	ldrh	r3, [r3, #26]
 8018824:	f043 0302 	orr.w	r3, r3, #2
 8018828:	b29a      	uxth	r2, r3
 801882a:	687b      	ldr	r3, [r7, #4]
 801882c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801882e:	6878      	ldr	r0, [r7, #4]
 8018830:	f7fe fdbe 	bl	80173b0 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8018834:	4b18      	ldr	r3, [pc, #96]	; (8018898 <tcp_process+0x5d4>)
 8018836:	681b      	ldr	r3, [r3, #0]
 8018838:	687a      	ldr	r2, [r7, #4]
 801883a:	429a      	cmp	r2, r3
 801883c:	d105      	bne.n	801884a <tcp_process+0x586>
 801883e:	4b16      	ldr	r3, [pc, #88]	; (8018898 <tcp_process+0x5d4>)
 8018840:	681b      	ldr	r3, [r3, #0]
 8018842:	68db      	ldr	r3, [r3, #12]
 8018844:	4a14      	ldr	r2, [pc, #80]	; (8018898 <tcp_process+0x5d4>)
 8018846:	6013      	str	r3, [r2, #0]
 8018848:	e02e      	b.n	80188a8 <tcp_process+0x5e4>
 801884a:	4b13      	ldr	r3, [pc, #76]	; (8018898 <tcp_process+0x5d4>)
 801884c:	681b      	ldr	r3, [r3, #0]
 801884e:	617b      	str	r3, [r7, #20]
 8018850:	e027      	b.n	80188a2 <tcp_process+0x5de>
 8018852:	697b      	ldr	r3, [r7, #20]
 8018854:	68db      	ldr	r3, [r3, #12]
 8018856:	687a      	ldr	r2, [r7, #4]
 8018858:	429a      	cmp	r2, r3
 801885a:	d11f      	bne.n	801889c <tcp_process+0x5d8>
 801885c:	687b      	ldr	r3, [r7, #4]
 801885e:	68da      	ldr	r2, [r3, #12]
 8018860:	697b      	ldr	r3, [r7, #20]
 8018862:	60da      	str	r2, [r3, #12]
 8018864:	e020      	b.n	80188a8 <tcp_process+0x5e4>
 8018866:	bf00      	nop
 8018868:	24040790 	.word	0x24040790
 801886c:	24040788 	.word	0x24040788
 8018870:	2404078e 	.word	0x2404078e
 8018874:	24040784 	.word	0x24040784
 8018878:	24040774 	.word	0x24040774
 801887c:	24045dc8 	.word	0x24045dc8
 8018880:	24045dcc 	.word	0x24045dcc
 8018884:	08025af0 	.word	0x08025af0
 8018888:	08025db0 	.word	0x08025db0
 801888c:	08025b5c 	.word	0x08025b5c
 8018890:	2404078c 	.word	0x2404078c
 8018894:	24040791 	.word	0x24040791
 8018898:	24048e80 	.word	0x24048e80
 801889c:	697b      	ldr	r3, [r7, #20]
 801889e:	68db      	ldr	r3, [r3, #12]
 80188a0:	617b      	str	r3, [r7, #20]
 80188a2:	697b      	ldr	r3, [r7, #20]
 80188a4:	2b00      	cmp	r3, #0
 80188a6:	d1d4      	bne.n	8018852 <tcp_process+0x58e>
 80188a8:	687b      	ldr	r3, [r7, #4]
 80188aa:	2200      	movs	r2, #0
 80188ac:	60da      	str	r2, [r3, #12]
 80188ae:	4b77      	ldr	r3, [pc, #476]	; (8018a8c <tcp_process+0x7c8>)
 80188b0:	2201      	movs	r2, #1
 80188b2:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80188b4:	687b      	ldr	r3, [r7, #4]
 80188b6:	220a      	movs	r2, #10
 80188b8:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80188ba:	4b75      	ldr	r3, [pc, #468]	; (8018a90 <tcp_process+0x7cc>)
 80188bc:	681a      	ldr	r2, [r3, #0]
 80188be:	687b      	ldr	r3, [r7, #4]
 80188c0:	60da      	str	r2, [r3, #12]
 80188c2:	4a73      	ldr	r2, [pc, #460]	; (8018a90 <tcp_process+0x7cc>)
 80188c4:	687b      	ldr	r3, [r7, #4]
 80188c6:	6013      	str	r3, [r2, #0]
 80188c8:	f003 fb16 	bl	801bef8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80188cc:	e0d2      	b.n	8018a74 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80188ce:	687b      	ldr	r3, [r7, #4]
 80188d0:	8b5b      	ldrh	r3, [r3, #26]
 80188d2:	f043 0302 	orr.w	r3, r3, #2
 80188d6:	b29a      	uxth	r2, r3
 80188d8:	687b      	ldr	r3, [r7, #4]
 80188da:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80188dc:	687b      	ldr	r3, [r7, #4]
 80188de:	2208      	movs	r2, #8
 80188e0:	751a      	strb	r2, [r3, #20]
      break;
 80188e2:	e0c7      	b.n	8018a74 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80188e4:	4b6b      	ldr	r3, [pc, #428]	; (8018a94 <tcp_process+0x7d0>)
 80188e6:	781b      	ldrb	r3, [r3, #0]
 80188e8:	f003 0310 	and.w	r3, r3, #16
 80188ec:	2b00      	cmp	r3, #0
 80188ee:	f000 80c1 	beq.w	8018a74 <tcp_process+0x7b0>
 80188f2:	687b      	ldr	r3, [r7, #4]
 80188f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80188f6:	4b68      	ldr	r3, [pc, #416]	; (8018a98 <tcp_process+0x7d4>)
 80188f8:	681b      	ldr	r3, [r3, #0]
 80188fa:	429a      	cmp	r2, r3
 80188fc:	f040 80ba 	bne.w	8018a74 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8018900:	687b      	ldr	r3, [r7, #4]
 8018902:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8018904:	2b00      	cmp	r3, #0
 8018906:	f040 80b5 	bne.w	8018a74 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801890a:	687b      	ldr	r3, [r7, #4]
 801890c:	2206      	movs	r2, #6
 801890e:	751a      	strb	r2, [r3, #20]
      break;
 8018910:	e0b0      	b.n	8018a74 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8018912:	6878      	ldr	r0, [r7, #4]
 8018914:	f000 f9ca 	bl	8018cac <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8018918:	4b60      	ldr	r3, [pc, #384]	; (8018a9c <tcp_process+0x7d8>)
 801891a:	781b      	ldrb	r3, [r3, #0]
 801891c:	f003 0320 	and.w	r3, r3, #32
 8018920:	2b00      	cmp	r3, #0
 8018922:	f000 80a9 	beq.w	8018a78 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8018926:	687b      	ldr	r3, [r7, #4]
 8018928:	8b5b      	ldrh	r3, [r3, #26]
 801892a:	f043 0302 	orr.w	r3, r3, #2
 801892e:	b29a      	uxth	r2, r3
 8018930:	687b      	ldr	r3, [r7, #4]
 8018932:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8018934:	6878      	ldr	r0, [r7, #4]
 8018936:	f7fe fd3b 	bl	80173b0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801893a:	4b59      	ldr	r3, [pc, #356]	; (8018aa0 <tcp_process+0x7dc>)
 801893c:	681b      	ldr	r3, [r3, #0]
 801893e:	687a      	ldr	r2, [r7, #4]
 8018940:	429a      	cmp	r2, r3
 8018942:	d105      	bne.n	8018950 <tcp_process+0x68c>
 8018944:	4b56      	ldr	r3, [pc, #344]	; (8018aa0 <tcp_process+0x7dc>)
 8018946:	681b      	ldr	r3, [r3, #0]
 8018948:	68db      	ldr	r3, [r3, #12]
 801894a:	4a55      	ldr	r2, [pc, #340]	; (8018aa0 <tcp_process+0x7dc>)
 801894c:	6013      	str	r3, [r2, #0]
 801894e:	e013      	b.n	8018978 <tcp_process+0x6b4>
 8018950:	4b53      	ldr	r3, [pc, #332]	; (8018aa0 <tcp_process+0x7dc>)
 8018952:	681b      	ldr	r3, [r3, #0]
 8018954:	613b      	str	r3, [r7, #16]
 8018956:	e00c      	b.n	8018972 <tcp_process+0x6ae>
 8018958:	693b      	ldr	r3, [r7, #16]
 801895a:	68db      	ldr	r3, [r3, #12]
 801895c:	687a      	ldr	r2, [r7, #4]
 801895e:	429a      	cmp	r2, r3
 8018960:	d104      	bne.n	801896c <tcp_process+0x6a8>
 8018962:	687b      	ldr	r3, [r7, #4]
 8018964:	68da      	ldr	r2, [r3, #12]
 8018966:	693b      	ldr	r3, [r7, #16]
 8018968:	60da      	str	r2, [r3, #12]
 801896a:	e005      	b.n	8018978 <tcp_process+0x6b4>
 801896c:	693b      	ldr	r3, [r7, #16]
 801896e:	68db      	ldr	r3, [r3, #12]
 8018970:	613b      	str	r3, [r7, #16]
 8018972:	693b      	ldr	r3, [r7, #16]
 8018974:	2b00      	cmp	r3, #0
 8018976:	d1ef      	bne.n	8018958 <tcp_process+0x694>
 8018978:	687b      	ldr	r3, [r7, #4]
 801897a:	2200      	movs	r2, #0
 801897c:	60da      	str	r2, [r3, #12]
 801897e:	4b43      	ldr	r3, [pc, #268]	; (8018a8c <tcp_process+0x7c8>)
 8018980:	2201      	movs	r2, #1
 8018982:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8018984:	687b      	ldr	r3, [r7, #4]
 8018986:	220a      	movs	r2, #10
 8018988:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801898a:	4b41      	ldr	r3, [pc, #260]	; (8018a90 <tcp_process+0x7cc>)
 801898c:	681a      	ldr	r2, [r3, #0]
 801898e:	687b      	ldr	r3, [r7, #4]
 8018990:	60da      	str	r2, [r3, #12]
 8018992:	4a3f      	ldr	r2, [pc, #252]	; (8018a90 <tcp_process+0x7cc>)
 8018994:	687b      	ldr	r3, [r7, #4]
 8018996:	6013      	str	r3, [r2, #0]
 8018998:	f003 faae 	bl	801bef8 <tcp_timer_needed>
      }
      break;
 801899c:	e06c      	b.n	8018a78 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801899e:	6878      	ldr	r0, [r7, #4]
 80189a0:	f000 f984 	bl	8018cac <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80189a4:	4b3b      	ldr	r3, [pc, #236]	; (8018a94 <tcp_process+0x7d0>)
 80189a6:	781b      	ldrb	r3, [r3, #0]
 80189a8:	f003 0310 	and.w	r3, r3, #16
 80189ac:	2b00      	cmp	r3, #0
 80189ae:	d065      	beq.n	8018a7c <tcp_process+0x7b8>
 80189b0:	687b      	ldr	r3, [r7, #4]
 80189b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80189b4:	4b38      	ldr	r3, [pc, #224]	; (8018a98 <tcp_process+0x7d4>)
 80189b6:	681b      	ldr	r3, [r3, #0]
 80189b8:	429a      	cmp	r2, r3
 80189ba:	d15f      	bne.n	8018a7c <tcp_process+0x7b8>
 80189bc:	687b      	ldr	r3, [r7, #4]
 80189be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80189c0:	2b00      	cmp	r3, #0
 80189c2:	d15b      	bne.n	8018a7c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80189c4:	6878      	ldr	r0, [r7, #4]
 80189c6:	f7fe fcf3 	bl	80173b0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80189ca:	4b35      	ldr	r3, [pc, #212]	; (8018aa0 <tcp_process+0x7dc>)
 80189cc:	681b      	ldr	r3, [r3, #0]
 80189ce:	687a      	ldr	r2, [r7, #4]
 80189d0:	429a      	cmp	r2, r3
 80189d2:	d105      	bne.n	80189e0 <tcp_process+0x71c>
 80189d4:	4b32      	ldr	r3, [pc, #200]	; (8018aa0 <tcp_process+0x7dc>)
 80189d6:	681b      	ldr	r3, [r3, #0]
 80189d8:	68db      	ldr	r3, [r3, #12]
 80189da:	4a31      	ldr	r2, [pc, #196]	; (8018aa0 <tcp_process+0x7dc>)
 80189dc:	6013      	str	r3, [r2, #0]
 80189de:	e013      	b.n	8018a08 <tcp_process+0x744>
 80189e0:	4b2f      	ldr	r3, [pc, #188]	; (8018aa0 <tcp_process+0x7dc>)
 80189e2:	681b      	ldr	r3, [r3, #0]
 80189e4:	60fb      	str	r3, [r7, #12]
 80189e6:	e00c      	b.n	8018a02 <tcp_process+0x73e>
 80189e8:	68fb      	ldr	r3, [r7, #12]
 80189ea:	68db      	ldr	r3, [r3, #12]
 80189ec:	687a      	ldr	r2, [r7, #4]
 80189ee:	429a      	cmp	r2, r3
 80189f0:	d104      	bne.n	80189fc <tcp_process+0x738>
 80189f2:	687b      	ldr	r3, [r7, #4]
 80189f4:	68da      	ldr	r2, [r3, #12]
 80189f6:	68fb      	ldr	r3, [r7, #12]
 80189f8:	60da      	str	r2, [r3, #12]
 80189fa:	e005      	b.n	8018a08 <tcp_process+0x744>
 80189fc:	68fb      	ldr	r3, [r7, #12]
 80189fe:	68db      	ldr	r3, [r3, #12]
 8018a00:	60fb      	str	r3, [r7, #12]
 8018a02:	68fb      	ldr	r3, [r7, #12]
 8018a04:	2b00      	cmp	r3, #0
 8018a06:	d1ef      	bne.n	80189e8 <tcp_process+0x724>
 8018a08:	687b      	ldr	r3, [r7, #4]
 8018a0a:	2200      	movs	r2, #0
 8018a0c:	60da      	str	r2, [r3, #12]
 8018a0e:	4b1f      	ldr	r3, [pc, #124]	; (8018a8c <tcp_process+0x7c8>)
 8018a10:	2201      	movs	r2, #1
 8018a12:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8018a14:	687b      	ldr	r3, [r7, #4]
 8018a16:	220a      	movs	r2, #10
 8018a18:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8018a1a:	4b1d      	ldr	r3, [pc, #116]	; (8018a90 <tcp_process+0x7cc>)
 8018a1c:	681a      	ldr	r2, [r3, #0]
 8018a1e:	687b      	ldr	r3, [r7, #4]
 8018a20:	60da      	str	r2, [r3, #12]
 8018a22:	4a1b      	ldr	r2, [pc, #108]	; (8018a90 <tcp_process+0x7cc>)
 8018a24:	687b      	ldr	r3, [r7, #4]
 8018a26:	6013      	str	r3, [r2, #0]
 8018a28:	f003 fa66 	bl	801bef8 <tcp_timer_needed>
      }
      break;
 8018a2c:	e026      	b.n	8018a7c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8018a2e:	6878      	ldr	r0, [r7, #4]
 8018a30:	f000 f93c 	bl	8018cac <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8018a34:	4b17      	ldr	r3, [pc, #92]	; (8018a94 <tcp_process+0x7d0>)
 8018a36:	781b      	ldrb	r3, [r3, #0]
 8018a38:	f003 0310 	and.w	r3, r3, #16
 8018a3c:	2b00      	cmp	r3, #0
 8018a3e:	d01f      	beq.n	8018a80 <tcp_process+0x7bc>
 8018a40:	687b      	ldr	r3, [r7, #4]
 8018a42:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018a44:	4b14      	ldr	r3, [pc, #80]	; (8018a98 <tcp_process+0x7d4>)
 8018a46:	681b      	ldr	r3, [r3, #0]
 8018a48:	429a      	cmp	r2, r3
 8018a4a:	d119      	bne.n	8018a80 <tcp_process+0x7bc>
 8018a4c:	687b      	ldr	r3, [r7, #4]
 8018a4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018a50:	2b00      	cmp	r3, #0
 8018a52:	d115      	bne.n	8018a80 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8018a54:	4b11      	ldr	r3, [pc, #68]	; (8018a9c <tcp_process+0x7d8>)
 8018a56:	781b      	ldrb	r3, [r3, #0]
 8018a58:	f043 0310 	orr.w	r3, r3, #16
 8018a5c:	b2da      	uxtb	r2, r3
 8018a5e:	4b0f      	ldr	r3, [pc, #60]	; (8018a9c <tcp_process+0x7d8>)
 8018a60:	701a      	strb	r2, [r3, #0]
      }
      break;
 8018a62:	e00d      	b.n	8018a80 <tcp_process+0x7bc>
    default:
      break;
 8018a64:	bf00      	nop
 8018a66:	e00c      	b.n	8018a82 <tcp_process+0x7be>
      break;
 8018a68:	bf00      	nop
 8018a6a:	e00a      	b.n	8018a82 <tcp_process+0x7be>
      break;
 8018a6c:	bf00      	nop
 8018a6e:	e008      	b.n	8018a82 <tcp_process+0x7be>
      break;
 8018a70:	bf00      	nop
 8018a72:	e006      	b.n	8018a82 <tcp_process+0x7be>
      break;
 8018a74:	bf00      	nop
 8018a76:	e004      	b.n	8018a82 <tcp_process+0x7be>
      break;
 8018a78:	bf00      	nop
 8018a7a:	e002      	b.n	8018a82 <tcp_process+0x7be>
      break;
 8018a7c:	bf00      	nop
 8018a7e:	e000      	b.n	8018a82 <tcp_process+0x7be>
      break;
 8018a80:	bf00      	nop
  }
  return ERR_OK;
 8018a82:	2300      	movs	r3, #0
}
 8018a84:	4618      	mov	r0, r3
 8018a86:	3724      	adds	r7, #36	; 0x24
 8018a88:	46bd      	mov	sp, r7
 8018a8a:	bd90      	pop	{r4, r7, pc}
 8018a8c:	24048e7c 	.word	0x24048e7c
 8018a90:	24048e90 	.word	0x24048e90
 8018a94:	24040790 	.word	0x24040790
 8018a98:	24040788 	.word	0x24040788
 8018a9c:	24040791 	.word	0x24040791
 8018aa0:	24048e80 	.word	0x24048e80

08018aa4 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8018aa4:	b590      	push	{r4, r7, lr}
 8018aa6:	b085      	sub	sp, #20
 8018aa8:	af00      	add	r7, sp, #0
 8018aaa:	6078      	str	r0, [r7, #4]
 8018aac:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8018aae:	687b      	ldr	r3, [r7, #4]
 8018ab0:	2b00      	cmp	r3, #0
 8018ab2:	d106      	bne.n	8018ac2 <tcp_oos_insert_segment+0x1e>
 8018ab4:	4b3b      	ldr	r3, [pc, #236]	; (8018ba4 <tcp_oos_insert_segment+0x100>)
 8018ab6:	f240 421f 	movw	r2, #1055	; 0x41f
 8018aba:	493b      	ldr	r1, [pc, #236]	; (8018ba8 <tcp_oos_insert_segment+0x104>)
 8018abc:	483b      	ldr	r0, [pc, #236]	; (8018bac <tcp_oos_insert_segment+0x108>)
 8018abe:	f008 fa47 	bl	8020f50 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8018ac2:	687b      	ldr	r3, [r7, #4]
 8018ac4:	68db      	ldr	r3, [r3, #12]
 8018ac6:	899b      	ldrh	r3, [r3, #12]
 8018ac8:	b29b      	uxth	r3, r3
 8018aca:	4618      	mov	r0, r3
 8018acc:	f7f7 f916 	bl	800fcfc <lwip_htons>
 8018ad0:	4603      	mov	r3, r0
 8018ad2:	b2db      	uxtb	r3, r3
 8018ad4:	f003 0301 	and.w	r3, r3, #1
 8018ad8:	2b00      	cmp	r3, #0
 8018ada:	d028      	beq.n	8018b2e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8018adc:	6838      	ldr	r0, [r7, #0]
 8018ade:	f7fe f999 	bl	8016e14 <tcp_segs_free>
    next = NULL;
 8018ae2:	2300      	movs	r3, #0
 8018ae4:	603b      	str	r3, [r7, #0]
 8018ae6:	e056      	b.n	8018b96 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8018ae8:	683b      	ldr	r3, [r7, #0]
 8018aea:	68db      	ldr	r3, [r3, #12]
 8018aec:	899b      	ldrh	r3, [r3, #12]
 8018aee:	b29b      	uxth	r3, r3
 8018af0:	4618      	mov	r0, r3
 8018af2:	f7f7 f903 	bl	800fcfc <lwip_htons>
 8018af6:	4603      	mov	r3, r0
 8018af8:	b2db      	uxtb	r3, r3
 8018afa:	f003 0301 	and.w	r3, r3, #1
 8018afe:	2b00      	cmp	r3, #0
 8018b00:	d00d      	beq.n	8018b1e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8018b02:	687b      	ldr	r3, [r7, #4]
 8018b04:	68db      	ldr	r3, [r3, #12]
 8018b06:	899b      	ldrh	r3, [r3, #12]
 8018b08:	b29c      	uxth	r4, r3
 8018b0a:	2001      	movs	r0, #1
 8018b0c:	f7f7 f8f6 	bl	800fcfc <lwip_htons>
 8018b10:	4603      	mov	r3, r0
 8018b12:	461a      	mov	r2, r3
 8018b14:	687b      	ldr	r3, [r7, #4]
 8018b16:	68db      	ldr	r3, [r3, #12]
 8018b18:	4322      	orrs	r2, r4
 8018b1a:	b292      	uxth	r2, r2
 8018b1c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8018b1e:	683b      	ldr	r3, [r7, #0]
 8018b20:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8018b22:	683b      	ldr	r3, [r7, #0]
 8018b24:	681b      	ldr	r3, [r3, #0]
 8018b26:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8018b28:	68f8      	ldr	r0, [r7, #12]
 8018b2a:	f7fe f987 	bl	8016e3c <tcp_seg_free>
    while (next &&
 8018b2e:	683b      	ldr	r3, [r7, #0]
 8018b30:	2b00      	cmp	r3, #0
 8018b32:	d00e      	beq.n	8018b52 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8018b34:	687b      	ldr	r3, [r7, #4]
 8018b36:	891b      	ldrh	r3, [r3, #8]
 8018b38:	461a      	mov	r2, r3
 8018b3a:	4b1d      	ldr	r3, [pc, #116]	; (8018bb0 <tcp_oos_insert_segment+0x10c>)
 8018b3c:	681b      	ldr	r3, [r3, #0]
 8018b3e:	441a      	add	r2, r3
 8018b40:	683b      	ldr	r3, [r7, #0]
 8018b42:	68db      	ldr	r3, [r3, #12]
 8018b44:	685b      	ldr	r3, [r3, #4]
 8018b46:	6839      	ldr	r1, [r7, #0]
 8018b48:	8909      	ldrh	r1, [r1, #8]
 8018b4a:	440b      	add	r3, r1
 8018b4c:	1ad3      	subs	r3, r2, r3
    while (next &&
 8018b4e:	2b00      	cmp	r3, #0
 8018b50:	daca      	bge.n	8018ae8 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8018b52:	683b      	ldr	r3, [r7, #0]
 8018b54:	2b00      	cmp	r3, #0
 8018b56:	d01e      	beq.n	8018b96 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8018b58:	687b      	ldr	r3, [r7, #4]
 8018b5a:	891b      	ldrh	r3, [r3, #8]
 8018b5c:	461a      	mov	r2, r3
 8018b5e:	4b14      	ldr	r3, [pc, #80]	; (8018bb0 <tcp_oos_insert_segment+0x10c>)
 8018b60:	681b      	ldr	r3, [r3, #0]
 8018b62:	441a      	add	r2, r3
 8018b64:	683b      	ldr	r3, [r7, #0]
 8018b66:	68db      	ldr	r3, [r3, #12]
 8018b68:	685b      	ldr	r3, [r3, #4]
 8018b6a:	1ad3      	subs	r3, r2, r3
    if (next &&
 8018b6c:	2b00      	cmp	r3, #0
 8018b6e:	dd12      	ble.n	8018b96 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8018b70:	683b      	ldr	r3, [r7, #0]
 8018b72:	68db      	ldr	r3, [r3, #12]
 8018b74:	685b      	ldr	r3, [r3, #4]
 8018b76:	b29a      	uxth	r2, r3
 8018b78:	4b0d      	ldr	r3, [pc, #52]	; (8018bb0 <tcp_oos_insert_segment+0x10c>)
 8018b7a:	681b      	ldr	r3, [r3, #0]
 8018b7c:	b29b      	uxth	r3, r3
 8018b7e:	1ad3      	subs	r3, r2, r3
 8018b80:	b29a      	uxth	r2, r3
 8018b82:	687b      	ldr	r3, [r7, #4]
 8018b84:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8018b86:	687b      	ldr	r3, [r7, #4]
 8018b88:	685a      	ldr	r2, [r3, #4]
 8018b8a:	687b      	ldr	r3, [r7, #4]
 8018b8c:	891b      	ldrh	r3, [r3, #8]
 8018b8e:	4619      	mov	r1, r3
 8018b90:	4610      	mov	r0, r2
 8018b92:	f7fb f8a5 	bl	8013ce0 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8018b96:	687b      	ldr	r3, [r7, #4]
 8018b98:	683a      	ldr	r2, [r7, #0]
 8018b9a:	601a      	str	r2, [r3, #0]
}
 8018b9c:	bf00      	nop
 8018b9e:	3714      	adds	r7, #20
 8018ba0:	46bd      	mov	sp, r7
 8018ba2:	bd90      	pop	{r4, r7, pc}
 8018ba4:	08025af0 	.word	0x08025af0
 8018ba8:	08025dd0 	.word	0x08025dd0
 8018bac:	08025b5c 	.word	0x08025b5c
 8018bb0:	24040784 	.word	0x24040784

08018bb4 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8018bb4:	b5b0      	push	{r4, r5, r7, lr}
 8018bb6:	b086      	sub	sp, #24
 8018bb8:	af00      	add	r7, sp, #0
 8018bba:	60f8      	str	r0, [r7, #12]
 8018bbc:	60b9      	str	r1, [r7, #8]
 8018bbe:	607a      	str	r2, [r7, #4]
 8018bc0:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8018bc2:	e03e      	b.n	8018c42 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8018bc4:	68bb      	ldr	r3, [r7, #8]
 8018bc6:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8018bc8:	68bb      	ldr	r3, [r7, #8]
 8018bca:	681b      	ldr	r3, [r3, #0]
 8018bcc:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8018bce:	697b      	ldr	r3, [r7, #20]
 8018bd0:	685b      	ldr	r3, [r3, #4]
 8018bd2:	4618      	mov	r0, r3
 8018bd4:	f7fb faca 	bl	801416c <pbuf_clen>
 8018bd8:	4603      	mov	r3, r0
 8018bda:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8018bdc:	68fb      	ldr	r3, [r7, #12]
 8018bde:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018be2:	8a7a      	ldrh	r2, [r7, #18]
 8018be4:	429a      	cmp	r2, r3
 8018be6:	d906      	bls.n	8018bf6 <tcp_free_acked_segments+0x42>
 8018be8:	4b2a      	ldr	r3, [pc, #168]	; (8018c94 <tcp_free_acked_segments+0xe0>)
 8018bea:	f240 4257 	movw	r2, #1111	; 0x457
 8018bee:	492a      	ldr	r1, [pc, #168]	; (8018c98 <tcp_free_acked_segments+0xe4>)
 8018bf0:	482a      	ldr	r0, [pc, #168]	; (8018c9c <tcp_free_acked_segments+0xe8>)
 8018bf2:	f008 f9ad 	bl	8020f50 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8018bf6:	68fb      	ldr	r3, [r7, #12]
 8018bf8:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8018bfc:	8a7b      	ldrh	r3, [r7, #18]
 8018bfe:	1ad3      	subs	r3, r2, r3
 8018c00:	b29a      	uxth	r2, r3
 8018c02:	68fb      	ldr	r3, [r7, #12]
 8018c04:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8018c08:	697b      	ldr	r3, [r7, #20]
 8018c0a:	891a      	ldrh	r2, [r3, #8]
 8018c0c:	4b24      	ldr	r3, [pc, #144]	; (8018ca0 <tcp_free_acked_segments+0xec>)
 8018c0e:	881b      	ldrh	r3, [r3, #0]
 8018c10:	4413      	add	r3, r2
 8018c12:	b29a      	uxth	r2, r3
 8018c14:	4b22      	ldr	r3, [pc, #136]	; (8018ca0 <tcp_free_acked_segments+0xec>)
 8018c16:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8018c18:	6978      	ldr	r0, [r7, #20]
 8018c1a:	f7fe f90f 	bl	8016e3c <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8018c1e:	68fb      	ldr	r3, [r7, #12]
 8018c20:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018c24:	2b00      	cmp	r3, #0
 8018c26:	d00c      	beq.n	8018c42 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8018c28:	68bb      	ldr	r3, [r7, #8]
 8018c2a:	2b00      	cmp	r3, #0
 8018c2c:	d109      	bne.n	8018c42 <tcp_free_acked_segments+0x8e>
 8018c2e:	683b      	ldr	r3, [r7, #0]
 8018c30:	2b00      	cmp	r3, #0
 8018c32:	d106      	bne.n	8018c42 <tcp_free_acked_segments+0x8e>
 8018c34:	4b17      	ldr	r3, [pc, #92]	; (8018c94 <tcp_free_acked_segments+0xe0>)
 8018c36:	f240 4262 	movw	r2, #1122	; 0x462
 8018c3a:	491a      	ldr	r1, [pc, #104]	; (8018ca4 <tcp_free_acked_segments+0xf0>)
 8018c3c:	4817      	ldr	r0, [pc, #92]	; (8018c9c <tcp_free_acked_segments+0xe8>)
 8018c3e:	f008 f987 	bl	8020f50 <iprintf>
  while (seg_list != NULL &&
 8018c42:	68bb      	ldr	r3, [r7, #8]
 8018c44:	2b00      	cmp	r3, #0
 8018c46:	d020      	beq.n	8018c8a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8018c48:	68bb      	ldr	r3, [r7, #8]
 8018c4a:	68db      	ldr	r3, [r3, #12]
 8018c4c:	685b      	ldr	r3, [r3, #4]
 8018c4e:	4618      	mov	r0, r3
 8018c50:	f7f7 f869 	bl	800fd26 <lwip_htonl>
 8018c54:	4604      	mov	r4, r0
 8018c56:	68bb      	ldr	r3, [r7, #8]
 8018c58:	891b      	ldrh	r3, [r3, #8]
 8018c5a:	461d      	mov	r5, r3
 8018c5c:	68bb      	ldr	r3, [r7, #8]
 8018c5e:	68db      	ldr	r3, [r3, #12]
 8018c60:	899b      	ldrh	r3, [r3, #12]
 8018c62:	b29b      	uxth	r3, r3
 8018c64:	4618      	mov	r0, r3
 8018c66:	f7f7 f849 	bl	800fcfc <lwip_htons>
 8018c6a:	4603      	mov	r3, r0
 8018c6c:	b2db      	uxtb	r3, r3
 8018c6e:	f003 0303 	and.w	r3, r3, #3
 8018c72:	2b00      	cmp	r3, #0
 8018c74:	d001      	beq.n	8018c7a <tcp_free_acked_segments+0xc6>
 8018c76:	2301      	movs	r3, #1
 8018c78:	e000      	b.n	8018c7c <tcp_free_acked_segments+0xc8>
 8018c7a:	2300      	movs	r3, #0
 8018c7c:	442b      	add	r3, r5
 8018c7e:	18e2      	adds	r2, r4, r3
 8018c80:	4b09      	ldr	r3, [pc, #36]	; (8018ca8 <tcp_free_acked_segments+0xf4>)
 8018c82:	681b      	ldr	r3, [r3, #0]
 8018c84:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8018c86:	2b00      	cmp	r3, #0
 8018c88:	dd9c      	ble.n	8018bc4 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8018c8a:	68bb      	ldr	r3, [r7, #8]
}
 8018c8c:	4618      	mov	r0, r3
 8018c8e:	3718      	adds	r7, #24
 8018c90:	46bd      	mov	sp, r7
 8018c92:	bdb0      	pop	{r4, r5, r7, pc}
 8018c94:	08025af0 	.word	0x08025af0
 8018c98:	08025df8 	.word	0x08025df8
 8018c9c:	08025b5c 	.word	0x08025b5c
 8018ca0:	2404078c 	.word	0x2404078c
 8018ca4:	08025e20 	.word	0x08025e20
 8018ca8:	24040788 	.word	0x24040788

08018cac <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8018cac:	b5b0      	push	{r4, r5, r7, lr}
 8018cae:	b094      	sub	sp, #80	; 0x50
 8018cb0:	af00      	add	r7, sp, #0
 8018cb2:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8018cb4:	2300      	movs	r3, #0
 8018cb6:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8018cb8:	687b      	ldr	r3, [r7, #4]
 8018cba:	2b00      	cmp	r3, #0
 8018cbc:	d106      	bne.n	8018ccc <tcp_receive+0x20>
 8018cbe:	4ba6      	ldr	r3, [pc, #664]	; (8018f58 <tcp_receive+0x2ac>)
 8018cc0:	f240 427b 	movw	r2, #1147	; 0x47b
 8018cc4:	49a5      	ldr	r1, [pc, #660]	; (8018f5c <tcp_receive+0x2b0>)
 8018cc6:	48a6      	ldr	r0, [pc, #664]	; (8018f60 <tcp_receive+0x2b4>)
 8018cc8:	f008 f942 	bl	8020f50 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8018ccc:	687b      	ldr	r3, [r7, #4]
 8018cce:	7d1b      	ldrb	r3, [r3, #20]
 8018cd0:	2b03      	cmp	r3, #3
 8018cd2:	d806      	bhi.n	8018ce2 <tcp_receive+0x36>
 8018cd4:	4ba0      	ldr	r3, [pc, #640]	; (8018f58 <tcp_receive+0x2ac>)
 8018cd6:	f240 427c 	movw	r2, #1148	; 0x47c
 8018cda:	49a2      	ldr	r1, [pc, #648]	; (8018f64 <tcp_receive+0x2b8>)
 8018cdc:	48a0      	ldr	r0, [pc, #640]	; (8018f60 <tcp_receive+0x2b4>)
 8018cde:	f008 f937 	bl	8020f50 <iprintf>

  if (flags & TCP_ACK) {
 8018ce2:	4ba1      	ldr	r3, [pc, #644]	; (8018f68 <tcp_receive+0x2bc>)
 8018ce4:	781b      	ldrb	r3, [r3, #0]
 8018ce6:	f003 0310 	and.w	r3, r3, #16
 8018cea:	2b00      	cmp	r3, #0
 8018cec:	f000 8263 	beq.w	80191b6 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8018cf0:	687b      	ldr	r3, [r7, #4]
 8018cf2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8018cf6:	461a      	mov	r2, r3
 8018cf8:	687b      	ldr	r3, [r7, #4]
 8018cfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018cfc:	4413      	add	r3, r2
 8018cfe:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8018d00:	687b      	ldr	r3, [r7, #4]
 8018d02:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8018d04:	4b99      	ldr	r3, [pc, #612]	; (8018f6c <tcp_receive+0x2c0>)
 8018d06:	681b      	ldr	r3, [r3, #0]
 8018d08:	1ad3      	subs	r3, r2, r3
 8018d0a:	2b00      	cmp	r3, #0
 8018d0c:	db1b      	blt.n	8018d46 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8018d0e:	687b      	ldr	r3, [r7, #4]
 8018d10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8018d12:	4b96      	ldr	r3, [pc, #600]	; (8018f6c <tcp_receive+0x2c0>)
 8018d14:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8018d16:	429a      	cmp	r2, r3
 8018d18:	d106      	bne.n	8018d28 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8018d1a:	687b      	ldr	r3, [r7, #4]
 8018d1c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8018d1e:	4b94      	ldr	r3, [pc, #592]	; (8018f70 <tcp_receive+0x2c4>)
 8018d20:	681b      	ldr	r3, [r3, #0]
 8018d22:	1ad3      	subs	r3, r2, r3
 8018d24:	2b00      	cmp	r3, #0
 8018d26:	db0e      	blt.n	8018d46 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8018d28:	687b      	ldr	r3, [r7, #4]
 8018d2a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8018d2c:	4b90      	ldr	r3, [pc, #576]	; (8018f70 <tcp_receive+0x2c4>)
 8018d2e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8018d30:	429a      	cmp	r2, r3
 8018d32:	d125      	bne.n	8018d80 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8018d34:	4b8f      	ldr	r3, [pc, #572]	; (8018f74 <tcp_receive+0x2c8>)
 8018d36:	681b      	ldr	r3, [r3, #0]
 8018d38:	89db      	ldrh	r3, [r3, #14]
 8018d3a:	b29a      	uxth	r2, r3
 8018d3c:	687b      	ldr	r3, [r7, #4]
 8018d3e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8018d42:	429a      	cmp	r2, r3
 8018d44:	d91c      	bls.n	8018d80 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8018d46:	4b8b      	ldr	r3, [pc, #556]	; (8018f74 <tcp_receive+0x2c8>)
 8018d48:	681b      	ldr	r3, [r3, #0]
 8018d4a:	89db      	ldrh	r3, [r3, #14]
 8018d4c:	b29a      	uxth	r2, r3
 8018d4e:	687b      	ldr	r3, [r7, #4]
 8018d50:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8018d54:	687b      	ldr	r3, [r7, #4]
 8018d56:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8018d5a:	687b      	ldr	r3, [r7, #4]
 8018d5c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8018d60:	429a      	cmp	r2, r3
 8018d62:	d205      	bcs.n	8018d70 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8018d64:	687b      	ldr	r3, [r7, #4]
 8018d66:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8018d6a:	687b      	ldr	r3, [r7, #4]
 8018d6c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8018d70:	4b7e      	ldr	r3, [pc, #504]	; (8018f6c <tcp_receive+0x2c0>)
 8018d72:	681a      	ldr	r2, [r3, #0]
 8018d74:	687b      	ldr	r3, [r7, #4]
 8018d76:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8018d78:	4b7d      	ldr	r3, [pc, #500]	; (8018f70 <tcp_receive+0x2c4>)
 8018d7a:	681a      	ldr	r2, [r3, #0]
 8018d7c:	687b      	ldr	r3, [r7, #4]
 8018d7e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8018d80:	4b7b      	ldr	r3, [pc, #492]	; (8018f70 <tcp_receive+0x2c4>)
 8018d82:	681a      	ldr	r2, [r3, #0]
 8018d84:	687b      	ldr	r3, [r7, #4]
 8018d86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018d88:	1ad3      	subs	r3, r2, r3
 8018d8a:	2b00      	cmp	r3, #0
 8018d8c:	dc58      	bgt.n	8018e40 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8018d8e:	4b7a      	ldr	r3, [pc, #488]	; (8018f78 <tcp_receive+0x2cc>)
 8018d90:	881b      	ldrh	r3, [r3, #0]
 8018d92:	2b00      	cmp	r3, #0
 8018d94:	d14b      	bne.n	8018e2e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8018d96:	687b      	ldr	r3, [r7, #4]
 8018d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018d9a:	687a      	ldr	r2, [r7, #4]
 8018d9c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8018da0:	4413      	add	r3, r2
 8018da2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018da4:	429a      	cmp	r2, r3
 8018da6:	d142      	bne.n	8018e2e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8018da8:	687b      	ldr	r3, [r7, #4]
 8018daa:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8018dae:	2b00      	cmp	r3, #0
 8018db0:	db3d      	blt.n	8018e2e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8018db2:	687b      	ldr	r3, [r7, #4]
 8018db4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8018db6:	4b6e      	ldr	r3, [pc, #440]	; (8018f70 <tcp_receive+0x2c4>)
 8018db8:	681b      	ldr	r3, [r3, #0]
 8018dba:	429a      	cmp	r2, r3
 8018dbc:	d137      	bne.n	8018e2e <tcp_receive+0x182>
              found_dupack = 1;
 8018dbe:	2301      	movs	r3, #1
 8018dc0:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8018dc2:	687b      	ldr	r3, [r7, #4]
 8018dc4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8018dc8:	2bff      	cmp	r3, #255	; 0xff
 8018dca:	d007      	beq.n	8018ddc <tcp_receive+0x130>
                ++pcb->dupacks;
 8018dcc:	687b      	ldr	r3, [r7, #4]
 8018dce:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8018dd2:	3301      	adds	r3, #1
 8018dd4:	b2da      	uxtb	r2, r3
 8018dd6:	687b      	ldr	r3, [r7, #4]
 8018dd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8018ddc:	687b      	ldr	r3, [r7, #4]
 8018dde:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8018de2:	2b03      	cmp	r3, #3
 8018de4:	d91b      	bls.n	8018e1e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8018de6:	687b      	ldr	r3, [r7, #4]
 8018de8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8018dec:	687b      	ldr	r3, [r7, #4]
 8018dee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018df0:	4413      	add	r3, r2
 8018df2:	b29a      	uxth	r2, r3
 8018df4:	687b      	ldr	r3, [r7, #4]
 8018df6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8018dfa:	429a      	cmp	r2, r3
 8018dfc:	d30a      	bcc.n	8018e14 <tcp_receive+0x168>
 8018dfe:	687b      	ldr	r3, [r7, #4]
 8018e00:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8018e04:	687b      	ldr	r3, [r7, #4]
 8018e06:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018e08:	4413      	add	r3, r2
 8018e0a:	b29a      	uxth	r2, r3
 8018e0c:	687b      	ldr	r3, [r7, #4]
 8018e0e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8018e12:	e004      	b.n	8018e1e <tcp_receive+0x172>
 8018e14:	687b      	ldr	r3, [r7, #4]
 8018e16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018e1a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8018e1e:	687b      	ldr	r3, [r7, #4]
 8018e20:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8018e24:	2b02      	cmp	r3, #2
 8018e26:	d902      	bls.n	8018e2e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8018e28:	6878      	ldr	r0, [r7, #4]
 8018e2a:	f002 fb47 	bl	801b4bc <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8018e2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018e30:	2b00      	cmp	r3, #0
 8018e32:	f040 8160 	bne.w	80190f6 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 8018e36:	687b      	ldr	r3, [r7, #4]
 8018e38:	2200      	movs	r2, #0
 8018e3a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8018e3e:	e15a      	b.n	80190f6 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8018e40:	4b4b      	ldr	r3, [pc, #300]	; (8018f70 <tcp_receive+0x2c4>)
 8018e42:	681a      	ldr	r2, [r3, #0]
 8018e44:	687b      	ldr	r3, [r7, #4]
 8018e46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018e48:	1ad3      	subs	r3, r2, r3
 8018e4a:	3b01      	subs	r3, #1
 8018e4c:	2b00      	cmp	r3, #0
 8018e4e:	f2c0 814d 	blt.w	80190ec <tcp_receive+0x440>
 8018e52:	4b47      	ldr	r3, [pc, #284]	; (8018f70 <tcp_receive+0x2c4>)
 8018e54:	681a      	ldr	r2, [r3, #0]
 8018e56:	687b      	ldr	r3, [r7, #4]
 8018e58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018e5a:	1ad3      	subs	r3, r2, r3
 8018e5c:	2b00      	cmp	r3, #0
 8018e5e:	f300 8145 	bgt.w	80190ec <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8018e62:	687b      	ldr	r3, [r7, #4]
 8018e64:	8b5b      	ldrh	r3, [r3, #26]
 8018e66:	f003 0304 	and.w	r3, r3, #4
 8018e6a:	2b00      	cmp	r3, #0
 8018e6c:	d010      	beq.n	8018e90 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8018e6e:	687b      	ldr	r3, [r7, #4]
 8018e70:	8b5b      	ldrh	r3, [r3, #26]
 8018e72:	f023 0304 	bic.w	r3, r3, #4
 8018e76:	b29a      	uxth	r2, r3
 8018e78:	687b      	ldr	r3, [r7, #4]
 8018e7a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8018e7c:	687b      	ldr	r3, [r7, #4]
 8018e7e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8018e82:	687b      	ldr	r3, [r7, #4]
 8018e84:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8018e88:	687b      	ldr	r3, [r7, #4]
 8018e8a:	2200      	movs	r2, #0
 8018e8c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8018e90:	687b      	ldr	r3, [r7, #4]
 8018e92:	2200      	movs	r2, #0
 8018e94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8018e98:	687b      	ldr	r3, [r7, #4]
 8018e9a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8018e9e:	10db      	asrs	r3, r3, #3
 8018ea0:	b21b      	sxth	r3, r3
 8018ea2:	b29a      	uxth	r2, r3
 8018ea4:	687b      	ldr	r3, [r7, #4]
 8018ea6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8018eaa:	b29b      	uxth	r3, r3
 8018eac:	4413      	add	r3, r2
 8018eae:	b29b      	uxth	r3, r3
 8018eb0:	b21a      	sxth	r2, r3
 8018eb2:	687b      	ldr	r3, [r7, #4]
 8018eb4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8018eb8:	4b2d      	ldr	r3, [pc, #180]	; (8018f70 <tcp_receive+0x2c4>)
 8018eba:	681b      	ldr	r3, [r3, #0]
 8018ebc:	b29a      	uxth	r2, r3
 8018ebe:	687b      	ldr	r3, [r7, #4]
 8018ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018ec2:	b29b      	uxth	r3, r3
 8018ec4:	1ad3      	subs	r3, r2, r3
 8018ec6:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8018ec8:	687b      	ldr	r3, [r7, #4]
 8018eca:	2200      	movs	r2, #0
 8018ecc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8018ed0:	4b27      	ldr	r3, [pc, #156]	; (8018f70 <tcp_receive+0x2c4>)
 8018ed2:	681a      	ldr	r2, [r3, #0]
 8018ed4:	687b      	ldr	r3, [r7, #4]
 8018ed6:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8018ed8:	687b      	ldr	r3, [r7, #4]
 8018eda:	7d1b      	ldrb	r3, [r3, #20]
 8018edc:	2b03      	cmp	r3, #3
 8018ede:	f240 8096 	bls.w	801900e <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8018ee2:	687b      	ldr	r3, [r7, #4]
 8018ee4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8018ee8:	687b      	ldr	r3, [r7, #4]
 8018eea:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8018eee:	429a      	cmp	r2, r3
 8018ef0:	d244      	bcs.n	8018f7c <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8018ef2:	687b      	ldr	r3, [r7, #4]
 8018ef4:	8b5b      	ldrh	r3, [r3, #26]
 8018ef6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8018efa:	2b00      	cmp	r3, #0
 8018efc:	d001      	beq.n	8018f02 <tcp_receive+0x256>
 8018efe:	2301      	movs	r3, #1
 8018f00:	e000      	b.n	8018f04 <tcp_receive+0x258>
 8018f02:	2302      	movs	r3, #2
 8018f04:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8018f08:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8018f0c:	b29a      	uxth	r2, r3
 8018f0e:	687b      	ldr	r3, [r7, #4]
 8018f10:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018f12:	fb12 f303 	smulbb	r3, r2, r3
 8018f16:	b29b      	uxth	r3, r3
 8018f18:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8018f1a:	4293      	cmp	r3, r2
 8018f1c:	bf28      	it	cs
 8018f1e:	4613      	movcs	r3, r2
 8018f20:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8018f22:	687b      	ldr	r3, [r7, #4]
 8018f24:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8018f28:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018f2a:	4413      	add	r3, r2
 8018f2c:	b29a      	uxth	r2, r3
 8018f2e:	687b      	ldr	r3, [r7, #4]
 8018f30:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8018f34:	429a      	cmp	r2, r3
 8018f36:	d309      	bcc.n	8018f4c <tcp_receive+0x2a0>
 8018f38:	687b      	ldr	r3, [r7, #4]
 8018f3a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8018f3e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018f40:	4413      	add	r3, r2
 8018f42:	b29a      	uxth	r2, r3
 8018f44:	687b      	ldr	r3, [r7, #4]
 8018f46:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8018f4a:	e060      	b.n	801900e <tcp_receive+0x362>
 8018f4c:	687b      	ldr	r3, [r7, #4]
 8018f4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018f52:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8018f56:	e05a      	b.n	801900e <tcp_receive+0x362>
 8018f58:	08025af0 	.word	0x08025af0
 8018f5c:	08025e40 	.word	0x08025e40
 8018f60:	08025b5c 	.word	0x08025b5c
 8018f64:	08025e5c 	.word	0x08025e5c
 8018f68:	24040790 	.word	0x24040790
 8018f6c:	24040784 	.word	0x24040784
 8018f70:	24040788 	.word	0x24040788
 8018f74:	24040774 	.word	0x24040774
 8018f78:	2404078e 	.word	0x2404078e
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8018f7c:	687b      	ldr	r3, [r7, #4]
 8018f7e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8018f82:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8018f84:	4413      	add	r3, r2
 8018f86:	b29a      	uxth	r2, r3
 8018f88:	687b      	ldr	r3, [r7, #4]
 8018f8a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8018f8e:	429a      	cmp	r2, r3
 8018f90:	d309      	bcc.n	8018fa6 <tcp_receive+0x2fa>
 8018f92:	687b      	ldr	r3, [r7, #4]
 8018f94:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8018f98:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8018f9a:	4413      	add	r3, r2
 8018f9c:	b29a      	uxth	r2, r3
 8018f9e:	687b      	ldr	r3, [r7, #4]
 8018fa0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8018fa4:	e004      	b.n	8018fb0 <tcp_receive+0x304>
 8018fa6:	687b      	ldr	r3, [r7, #4]
 8018fa8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018fac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8018fb0:	687b      	ldr	r3, [r7, #4]
 8018fb2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8018fb6:	687b      	ldr	r3, [r7, #4]
 8018fb8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8018fbc:	429a      	cmp	r2, r3
 8018fbe:	d326      	bcc.n	801900e <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8018fc0:	687b      	ldr	r3, [r7, #4]
 8018fc2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8018fc6:	687b      	ldr	r3, [r7, #4]
 8018fc8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8018fcc:	1ad3      	subs	r3, r2, r3
 8018fce:	b29a      	uxth	r2, r3
 8018fd0:	687b      	ldr	r3, [r7, #4]
 8018fd2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8018fd6:	687b      	ldr	r3, [r7, #4]
 8018fd8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8018fdc:	687b      	ldr	r3, [r7, #4]
 8018fde:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018fe0:	4413      	add	r3, r2
 8018fe2:	b29a      	uxth	r2, r3
 8018fe4:	687b      	ldr	r3, [r7, #4]
 8018fe6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8018fea:	429a      	cmp	r2, r3
 8018fec:	d30a      	bcc.n	8019004 <tcp_receive+0x358>
 8018fee:	687b      	ldr	r3, [r7, #4]
 8018ff0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8018ff4:	687b      	ldr	r3, [r7, #4]
 8018ff6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018ff8:	4413      	add	r3, r2
 8018ffa:	b29a      	uxth	r2, r3
 8018ffc:	687b      	ldr	r3, [r7, #4]
 8018ffe:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8019002:	e004      	b.n	801900e <tcp_receive+0x362>
 8019004:	687b      	ldr	r3, [r7, #4]
 8019006:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801900a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801900e:	687b      	ldr	r3, [r7, #4]
 8019010:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8019012:	687b      	ldr	r3, [r7, #4]
 8019014:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019016:	4a98      	ldr	r2, [pc, #608]	; (8019278 <tcp_receive+0x5cc>)
 8019018:	6878      	ldr	r0, [r7, #4]
 801901a:	f7ff fdcb 	bl	8018bb4 <tcp_free_acked_segments>
 801901e:	4602      	mov	r2, r0
 8019020:	687b      	ldr	r3, [r7, #4]
 8019022:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8019024:	687b      	ldr	r3, [r7, #4]
 8019026:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8019028:	687b      	ldr	r3, [r7, #4]
 801902a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801902c:	4a93      	ldr	r2, [pc, #588]	; (801927c <tcp_receive+0x5d0>)
 801902e:	6878      	ldr	r0, [r7, #4]
 8019030:	f7ff fdc0 	bl	8018bb4 <tcp_free_acked_segments>
 8019034:	4602      	mov	r2, r0
 8019036:	687b      	ldr	r3, [r7, #4]
 8019038:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801903a:	687b      	ldr	r3, [r7, #4]
 801903c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801903e:	2b00      	cmp	r3, #0
 8019040:	d104      	bne.n	801904c <tcp_receive+0x3a0>
        pcb->rtime = -1;
 8019042:	687b      	ldr	r3, [r7, #4]
 8019044:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019048:	861a      	strh	r2, [r3, #48]	; 0x30
 801904a:	e002      	b.n	8019052 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 801904c:	687b      	ldr	r3, [r7, #4]
 801904e:	2200      	movs	r2, #0
 8019050:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8019052:	687b      	ldr	r3, [r7, #4]
 8019054:	2200      	movs	r2, #0
 8019056:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8019058:	687b      	ldr	r3, [r7, #4]
 801905a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801905c:	2b00      	cmp	r3, #0
 801905e:	d103      	bne.n	8019068 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8019060:	687b      	ldr	r3, [r7, #4]
 8019062:	2200      	movs	r2, #0
 8019064:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8019068:	687b      	ldr	r3, [r7, #4]
 801906a:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801906e:	4b84      	ldr	r3, [pc, #528]	; (8019280 <tcp_receive+0x5d4>)
 8019070:	881b      	ldrh	r3, [r3, #0]
 8019072:	4413      	add	r3, r2
 8019074:	b29a      	uxth	r2, r3
 8019076:	687b      	ldr	r3, [r7, #4]
 8019078:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 801907c:	687b      	ldr	r3, [r7, #4]
 801907e:	8b5b      	ldrh	r3, [r3, #26]
 8019080:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8019084:	2b00      	cmp	r3, #0
 8019086:	d035      	beq.n	80190f4 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8019088:	687b      	ldr	r3, [r7, #4]
 801908a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801908c:	2b00      	cmp	r3, #0
 801908e:	d118      	bne.n	80190c2 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8019090:	687b      	ldr	r3, [r7, #4]
 8019092:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019094:	2b00      	cmp	r3, #0
 8019096:	d00c      	beq.n	80190b2 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8019098:	687b      	ldr	r3, [r7, #4]
 801909a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801909c:	687b      	ldr	r3, [r7, #4]
 801909e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80190a0:	68db      	ldr	r3, [r3, #12]
 80190a2:	685b      	ldr	r3, [r3, #4]
 80190a4:	4618      	mov	r0, r3
 80190a6:	f7f6 fe3e 	bl	800fd26 <lwip_htonl>
 80190aa:	4603      	mov	r3, r0
 80190ac:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80190ae:	2b00      	cmp	r3, #0
 80190b0:	dc20      	bgt.n	80190f4 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 80190b2:	687b      	ldr	r3, [r7, #4]
 80190b4:	8b5b      	ldrh	r3, [r3, #26]
 80190b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80190ba:	b29a      	uxth	r2, r3
 80190bc:	687b      	ldr	r3, [r7, #4]
 80190be:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80190c0:	e018      	b.n	80190f4 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80190c2:	687b      	ldr	r3, [r7, #4]
 80190c4:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80190c6:	687b      	ldr	r3, [r7, #4]
 80190c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80190ca:	68db      	ldr	r3, [r3, #12]
 80190cc:	685b      	ldr	r3, [r3, #4]
 80190ce:	4618      	mov	r0, r3
 80190d0:	f7f6 fe29 	bl	800fd26 <lwip_htonl>
 80190d4:	4603      	mov	r3, r0
 80190d6:	1ae3      	subs	r3, r4, r3
 80190d8:	2b00      	cmp	r3, #0
 80190da:	dc0b      	bgt.n	80190f4 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 80190dc:	687b      	ldr	r3, [r7, #4]
 80190de:	8b5b      	ldrh	r3, [r3, #26]
 80190e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80190e4:	b29a      	uxth	r2, r3
 80190e6:	687b      	ldr	r3, [r7, #4]
 80190e8:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80190ea:	e003      	b.n	80190f4 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80190ec:	6878      	ldr	r0, [r7, #4]
 80190ee:	f002 fbdf 	bl	801b8b0 <tcp_send_empty_ack>
 80190f2:	e000      	b.n	80190f6 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80190f4:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80190f6:	687b      	ldr	r3, [r7, #4]
 80190f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80190fa:	2b00      	cmp	r3, #0
 80190fc:	d05b      	beq.n	80191b6 <tcp_receive+0x50a>
 80190fe:	687b      	ldr	r3, [r7, #4]
 8019100:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8019102:	4b60      	ldr	r3, [pc, #384]	; (8019284 <tcp_receive+0x5d8>)
 8019104:	681b      	ldr	r3, [r3, #0]
 8019106:	1ad3      	subs	r3, r2, r3
 8019108:	2b00      	cmp	r3, #0
 801910a:	da54      	bge.n	80191b6 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801910c:	4b5e      	ldr	r3, [pc, #376]	; (8019288 <tcp_receive+0x5dc>)
 801910e:	681b      	ldr	r3, [r3, #0]
 8019110:	b29a      	uxth	r2, r3
 8019112:	687b      	ldr	r3, [r7, #4]
 8019114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019116:	b29b      	uxth	r3, r3
 8019118:	1ad3      	subs	r3, r2, r3
 801911a:	b29b      	uxth	r3, r3
 801911c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8019120:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8019124:	687b      	ldr	r3, [r7, #4]
 8019126:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801912a:	10db      	asrs	r3, r3, #3
 801912c:	b21b      	sxth	r3, r3
 801912e:	b29b      	uxth	r3, r3
 8019130:	1ad3      	subs	r3, r2, r3
 8019132:	b29b      	uxth	r3, r3
 8019134:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8019138:	687b      	ldr	r3, [r7, #4]
 801913a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801913e:	b29a      	uxth	r2, r3
 8019140:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8019144:	4413      	add	r3, r2
 8019146:	b29b      	uxth	r3, r3
 8019148:	b21a      	sxth	r2, r3
 801914a:	687b      	ldr	r3, [r7, #4]
 801914c:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 801914e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8019152:	2b00      	cmp	r3, #0
 8019154:	da05      	bge.n	8019162 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8019156:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801915a:	425b      	negs	r3, r3
 801915c:	b29b      	uxth	r3, r3
 801915e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8019162:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8019166:	687b      	ldr	r3, [r7, #4]
 8019168:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801916c:	109b      	asrs	r3, r3, #2
 801916e:	b21b      	sxth	r3, r3
 8019170:	b29b      	uxth	r3, r3
 8019172:	1ad3      	subs	r3, r2, r3
 8019174:	b29b      	uxth	r3, r3
 8019176:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 801917a:	687b      	ldr	r3, [r7, #4]
 801917c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8019180:	b29a      	uxth	r2, r3
 8019182:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8019186:	4413      	add	r3, r2
 8019188:	b29b      	uxth	r3, r3
 801918a:	b21a      	sxth	r2, r3
 801918c:	687b      	ldr	r3, [r7, #4]
 801918e:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8019190:	687b      	ldr	r3, [r7, #4]
 8019192:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8019196:	10db      	asrs	r3, r3, #3
 8019198:	b21b      	sxth	r3, r3
 801919a:	b29a      	uxth	r2, r3
 801919c:	687b      	ldr	r3, [r7, #4]
 801919e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80191a2:	b29b      	uxth	r3, r3
 80191a4:	4413      	add	r3, r2
 80191a6:	b29b      	uxth	r3, r3
 80191a8:	b21a      	sxth	r2, r3
 80191aa:	687b      	ldr	r3, [r7, #4]
 80191ac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80191b0:	687b      	ldr	r3, [r7, #4]
 80191b2:	2200      	movs	r2, #0
 80191b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80191b6:	4b35      	ldr	r3, [pc, #212]	; (801928c <tcp_receive+0x5e0>)
 80191b8:	881b      	ldrh	r3, [r3, #0]
 80191ba:	2b00      	cmp	r3, #0
 80191bc:	f000 84e1 	beq.w	8019b82 <tcp_receive+0xed6>
 80191c0:	687b      	ldr	r3, [r7, #4]
 80191c2:	7d1b      	ldrb	r3, [r3, #20]
 80191c4:	2b06      	cmp	r3, #6
 80191c6:	f200 84dc 	bhi.w	8019b82 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80191ca:	687b      	ldr	r3, [r7, #4]
 80191cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80191ce:	4b30      	ldr	r3, [pc, #192]	; (8019290 <tcp_receive+0x5e4>)
 80191d0:	681b      	ldr	r3, [r3, #0]
 80191d2:	1ad3      	subs	r3, r2, r3
 80191d4:	3b01      	subs	r3, #1
 80191d6:	2b00      	cmp	r3, #0
 80191d8:	f2c0 808e 	blt.w	80192f8 <tcp_receive+0x64c>
 80191dc:	687b      	ldr	r3, [r7, #4]
 80191de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80191e0:	4b2a      	ldr	r3, [pc, #168]	; (801928c <tcp_receive+0x5e0>)
 80191e2:	881b      	ldrh	r3, [r3, #0]
 80191e4:	4619      	mov	r1, r3
 80191e6:	4b2a      	ldr	r3, [pc, #168]	; (8019290 <tcp_receive+0x5e4>)
 80191e8:	681b      	ldr	r3, [r3, #0]
 80191ea:	440b      	add	r3, r1
 80191ec:	1ad3      	subs	r3, r2, r3
 80191ee:	3301      	adds	r3, #1
 80191f0:	2b00      	cmp	r3, #0
 80191f2:	f300 8081 	bgt.w	80192f8 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80191f6:	4b27      	ldr	r3, [pc, #156]	; (8019294 <tcp_receive+0x5e8>)
 80191f8:	685b      	ldr	r3, [r3, #4]
 80191fa:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80191fc:	687b      	ldr	r3, [r7, #4]
 80191fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8019200:	4b23      	ldr	r3, [pc, #140]	; (8019290 <tcp_receive+0x5e4>)
 8019202:	681b      	ldr	r3, [r3, #0]
 8019204:	1ad3      	subs	r3, r2, r3
 8019206:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8019208:	4b22      	ldr	r3, [pc, #136]	; (8019294 <tcp_receive+0x5e8>)
 801920a:	685b      	ldr	r3, [r3, #4]
 801920c:	2b00      	cmp	r3, #0
 801920e:	d106      	bne.n	801921e <tcp_receive+0x572>
 8019210:	4b21      	ldr	r3, [pc, #132]	; (8019298 <tcp_receive+0x5ec>)
 8019212:	f240 5294 	movw	r2, #1428	; 0x594
 8019216:	4921      	ldr	r1, [pc, #132]	; (801929c <tcp_receive+0x5f0>)
 8019218:	4821      	ldr	r0, [pc, #132]	; (80192a0 <tcp_receive+0x5f4>)
 801921a:	f007 fe99 	bl	8020f50 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801921e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019220:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8019224:	4293      	cmp	r3, r2
 8019226:	d906      	bls.n	8019236 <tcp_receive+0x58a>
 8019228:	4b1b      	ldr	r3, [pc, #108]	; (8019298 <tcp_receive+0x5ec>)
 801922a:	f240 5295 	movw	r2, #1429	; 0x595
 801922e:	491d      	ldr	r1, [pc, #116]	; (80192a4 <tcp_receive+0x5f8>)
 8019230:	481b      	ldr	r0, [pc, #108]	; (80192a0 <tcp_receive+0x5f4>)
 8019232:	f007 fe8d 	bl	8020f50 <iprintf>
      off = (u16_t)off32;
 8019236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019238:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801923c:	4b15      	ldr	r3, [pc, #84]	; (8019294 <tcp_receive+0x5e8>)
 801923e:	685b      	ldr	r3, [r3, #4]
 8019240:	891b      	ldrh	r3, [r3, #8]
 8019242:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8019246:	429a      	cmp	r2, r3
 8019248:	d906      	bls.n	8019258 <tcp_receive+0x5ac>
 801924a:	4b13      	ldr	r3, [pc, #76]	; (8019298 <tcp_receive+0x5ec>)
 801924c:	f240 5297 	movw	r2, #1431	; 0x597
 8019250:	4915      	ldr	r1, [pc, #84]	; (80192a8 <tcp_receive+0x5fc>)
 8019252:	4813      	ldr	r0, [pc, #76]	; (80192a0 <tcp_receive+0x5f4>)
 8019254:	f007 fe7c 	bl	8020f50 <iprintf>
      inseg.len -= off;
 8019258:	4b0e      	ldr	r3, [pc, #56]	; (8019294 <tcp_receive+0x5e8>)
 801925a:	891a      	ldrh	r2, [r3, #8]
 801925c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8019260:	1ad3      	subs	r3, r2, r3
 8019262:	b29a      	uxth	r2, r3
 8019264:	4b0b      	ldr	r3, [pc, #44]	; (8019294 <tcp_receive+0x5e8>)
 8019266:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8019268:	4b0a      	ldr	r3, [pc, #40]	; (8019294 <tcp_receive+0x5e8>)
 801926a:	685b      	ldr	r3, [r3, #4]
 801926c:	891a      	ldrh	r2, [r3, #8]
 801926e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8019272:	1ad3      	subs	r3, r2, r3
 8019274:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8019276:	e029      	b.n	80192cc <tcp_receive+0x620>
 8019278:	08025e78 	.word	0x08025e78
 801927c:	08025e80 	.word	0x08025e80
 8019280:	2404078c 	.word	0x2404078c
 8019284:	24040788 	.word	0x24040788
 8019288:	24048e84 	.word	0x24048e84
 801928c:	2404078e 	.word	0x2404078e
 8019290:	24040784 	.word	0x24040784
 8019294:	24040764 	.word	0x24040764
 8019298:	08025af0 	.word	0x08025af0
 801929c:	08025e88 	.word	0x08025e88
 80192a0:	08025b5c 	.word	0x08025b5c
 80192a4:	08025e98 	.word	0x08025e98
 80192a8:	08025ea8 	.word	0x08025ea8
        off -= p->len;
 80192ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80192ae:	895b      	ldrh	r3, [r3, #10]
 80192b0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80192b4:	1ad3      	subs	r3, r2, r3
 80192b6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80192ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80192bc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80192be:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80192c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80192c2:	2200      	movs	r2, #0
 80192c4:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80192c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80192c8:	681b      	ldr	r3, [r3, #0]
 80192ca:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 80192cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80192ce:	895b      	ldrh	r3, [r3, #10]
 80192d0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80192d4:	429a      	cmp	r2, r3
 80192d6:	d8e9      	bhi.n	80192ac <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80192d8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80192dc:	4619      	mov	r1, r3
 80192de:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80192e0:	f7fa fdfe 	bl	8013ee0 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80192e4:	687b      	ldr	r3, [r7, #4]
 80192e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80192e8:	4a91      	ldr	r2, [pc, #580]	; (8019530 <tcp_receive+0x884>)
 80192ea:	6013      	str	r3, [r2, #0]
 80192ec:	4b91      	ldr	r3, [pc, #580]	; (8019534 <tcp_receive+0x888>)
 80192ee:	68db      	ldr	r3, [r3, #12]
 80192f0:	4a8f      	ldr	r2, [pc, #572]	; (8019530 <tcp_receive+0x884>)
 80192f2:	6812      	ldr	r2, [r2, #0]
 80192f4:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80192f6:	e00d      	b.n	8019314 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80192f8:	4b8d      	ldr	r3, [pc, #564]	; (8019530 <tcp_receive+0x884>)
 80192fa:	681a      	ldr	r2, [r3, #0]
 80192fc:	687b      	ldr	r3, [r7, #4]
 80192fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019300:	1ad3      	subs	r3, r2, r3
 8019302:	2b00      	cmp	r3, #0
 8019304:	da06      	bge.n	8019314 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8019306:	687b      	ldr	r3, [r7, #4]
 8019308:	8b5b      	ldrh	r3, [r3, #26]
 801930a:	f043 0302 	orr.w	r3, r3, #2
 801930e:	b29a      	uxth	r2, r3
 8019310:	687b      	ldr	r3, [r7, #4]
 8019312:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8019314:	4b86      	ldr	r3, [pc, #536]	; (8019530 <tcp_receive+0x884>)
 8019316:	681a      	ldr	r2, [r3, #0]
 8019318:	687b      	ldr	r3, [r7, #4]
 801931a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801931c:	1ad3      	subs	r3, r2, r3
 801931e:	2b00      	cmp	r3, #0
 8019320:	f2c0 842a 	blt.w	8019b78 <tcp_receive+0xecc>
 8019324:	4b82      	ldr	r3, [pc, #520]	; (8019530 <tcp_receive+0x884>)
 8019326:	681a      	ldr	r2, [r3, #0]
 8019328:	687b      	ldr	r3, [r7, #4]
 801932a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801932c:	6879      	ldr	r1, [r7, #4]
 801932e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8019330:	440b      	add	r3, r1
 8019332:	1ad3      	subs	r3, r2, r3
 8019334:	3301      	adds	r3, #1
 8019336:	2b00      	cmp	r3, #0
 8019338:	f300 841e 	bgt.w	8019b78 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 801933c:	687b      	ldr	r3, [r7, #4]
 801933e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8019340:	4b7b      	ldr	r3, [pc, #492]	; (8019530 <tcp_receive+0x884>)
 8019342:	681b      	ldr	r3, [r3, #0]
 8019344:	429a      	cmp	r2, r3
 8019346:	f040 829a 	bne.w	801987e <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801934a:	4b7a      	ldr	r3, [pc, #488]	; (8019534 <tcp_receive+0x888>)
 801934c:	891c      	ldrh	r4, [r3, #8]
 801934e:	4b79      	ldr	r3, [pc, #484]	; (8019534 <tcp_receive+0x888>)
 8019350:	68db      	ldr	r3, [r3, #12]
 8019352:	899b      	ldrh	r3, [r3, #12]
 8019354:	b29b      	uxth	r3, r3
 8019356:	4618      	mov	r0, r3
 8019358:	f7f6 fcd0 	bl	800fcfc <lwip_htons>
 801935c:	4603      	mov	r3, r0
 801935e:	b2db      	uxtb	r3, r3
 8019360:	f003 0303 	and.w	r3, r3, #3
 8019364:	2b00      	cmp	r3, #0
 8019366:	d001      	beq.n	801936c <tcp_receive+0x6c0>
 8019368:	2301      	movs	r3, #1
 801936a:	e000      	b.n	801936e <tcp_receive+0x6c2>
 801936c:	2300      	movs	r3, #0
 801936e:	4423      	add	r3, r4
 8019370:	b29a      	uxth	r2, r3
 8019372:	4b71      	ldr	r3, [pc, #452]	; (8019538 <tcp_receive+0x88c>)
 8019374:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8019376:	687b      	ldr	r3, [r7, #4]
 8019378:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801937a:	4b6f      	ldr	r3, [pc, #444]	; (8019538 <tcp_receive+0x88c>)
 801937c:	881b      	ldrh	r3, [r3, #0]
 801937e:	429a      	cmp	r2, r3
 8019380:	d275      	bcs.n	801946e <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8019382:	4b6c      	ldr	r3, [pc, #432]	; (8019534 <tcp_receive+0x888>)
 8019384:	68db      	ldr	r3, [r3, #12]
 8019386:	899b      	ldrh	r3, [r3, #12]
 8019388:	b29b      	uxth	r3, r3
 801938a:	4618      	mov	r0, r3
 801938c:	f7f6 fcb6 	bl	800fcfc <lwip_htons>
 8019390:	4603      	mov	r3, r0
 8019392:	b2db      	uxtb	r3, r3
 8019394:	f003 0301 	and.w	r3, r3, #1
 8019398:	2b00      	cmp	r3, #0
 801939a:	d01f      	beq.n	80193dc <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801939c:	4b65      	ldr	r3, [pc, #404]	; (8019534 <tcp_receive+0x888>)
 801939e:	68db      	ldr	r3, [r3, #12]
 80193a0:	899b      	ldrh	r3, [r3, #12]
 80193a2:	b29b      	uxth	r3, r3
 80193a4:	b21b      	sxth	r3, r3
 80193a6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80193aa:	b21c      	sxth	r4, r3
 80193ac:	4b61      	ldr	r3, [pc, #388]	; (8019534 <tcp_receive+0x888>)
 80193ae:	68db      	ldr	r3, [r3, #12]
 80193b0:	899b      	ldrh	r3, [r3, #12]
 80193b2:	b29b      	uxth	r3, r3
 80193b4:	4618      	mov	r0, r3
 80193b6:	f7f6 fca1 	bl	800fcfc <lwip_htons>
 80193ba:	4603      	mov	r3, r0
 80193bc:	b2db      	uxtb	r3, r3
 80193be:	b29b      	uxth	r3, r3
 80193c0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80193c4:	b29b      	uxth	r3, r3
 80193c6:	4618      	mov	r0, r3
 80193c8:	f7f6 fc98 	bl	800fcfc <lwip_htons>
 80193cc:	4603      	mov	r3, r0
 80193ce:	b21b      	sxth	r3, r3
 80193d0:	4323      	orrs	r3, r4
 80193d2:	b21a      	sxth	r2, r3
 80193d4:	4b57      	ldr	r3, [pc, #348]	; (8019534 <tcp_receive+0x888>)
 80193d6:	68db      	ldr	r3, [r3, #12]
 80193d8:	b292      	uxth	r2, r2
 80193da:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80193dc:	687b      	ldr	r3, [r7, #4]
 80193de:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80193e0:	4b54      	ldr	r3, [pc, #336]	; (8019534 <tcp_receive+0x888>)
 80193e2:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80193e4:	4b53      	ldr	r3, [pc, #332]	; (8019534 <tcp_receive+0x888>)
 80193e6:	68db      	ldr	r3, [r3, #12]
 80193e8:	899b      	ldrh	r3, [r3, #12]
 80193ea:	b29b      	uxth	r3, r3
 80193ec:	4618      	mov	r0, r3
 80193ee:	f7f6 fc85 	bl	800fcfc <lwip_htons>
 80193f2:	4603      	mov	r3, r0
 80193f4:	b2db      	uxtb	r3, r3
 80193f6:	f003 0302 	and.w	r3, r3, #2
 80193fa:	2b00      	cmp	r3, #0
 80193fc:	d005      	beq.n	801940a <tcp_receive+0x75e>
            inseg.len -= 1;
 80193fe:	4b4d      	ldr	r3, [pc, #308]	; (8019534 <tcp_receive+0x888>)
 8019400:	891b      	ldrh	r3, [r3, #8]
 8019402:	3b01      	subs	r3, #1
 8019404:	b29a      	uxth	r2, r3
 8019406:	4b4b      	ldr	r3, [pc, #300]	; (8019534 <tcp_receive+0x888>)
 8019408:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 801940a:	4b4a      	ldr	r3, [pc, #296]	; (8019534 <tcp_receive+0x888>)
 801940c:	685a      	ldr	r2, [r3, #4]
 801940e:	4b49      	ldr	r3, [pc, #292]	; (8019534 <tcp_receive+0x888>)
 8019410:	891b      	ldrh	r3, [r3, #8]
 8019412:	4619      	mov	r1, r3
 8019414:	4610      	mov	r0, r2
 8019416:	f7fa fc63 	bl	8013ce0 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801941a:	4b46      	ldr	r3, [pc, #280]	; (8019534 <tcp_receive+0x888>)
 801941c:	891c      	ldrh	r4, [r3, #8]
 801941e:	4b45      	ldr	r3, [pc, #276]	; (8019534 <tcp_receive+0x888>)
 8019420:	68db      	ldr	r3, [r3, #12]
 8019422:	899b      	ldrh	r3, [r3, #12]
 8019424:	b29b      	uxth	r3, r3
 8019426:	4618      	mov	r0, r3
 8019428:	f7f6 fc68 	bl	800fcfc <lwip_htons>
 801942c:	4603      	mov	r3, r0
 801942e:	b2db      	uxtb	r3, r3
 8019430:	f003 0303 	and.w	r3, r3, #3
 8019434:	2b00      	cmp	r3, #0
 8019436:	d001      	beq.n	801943c <tcp_receive+0x790>
 8019438:	2301      	movs	r3, #1
 801943a:	e000      	b.n	801943e <tcp_receive+0x792>
 801943c:	2300      	movs	r3, #0
 801943e:	4423      	add	r3, r4
 8019440:	b29a      	uxth	r2, r3
 8019442:	4b3d      	ldr	r3, [pc, #244]	; (8019538 <tcp_receive+0x88c>)
 8019444:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8019446:	4b3c      	ldr	r3, [pc, #240]	; (8019538 <tcp_receive+0x88c>)
 8019448:	881b      	ldrh	r3, [r3, #0]
 801944a:	461a      	mov	r2, r3
 801944c:	4b38      	ldr	r3, [pc, #224]	; (8019530 <tcp_receive+0x884>)
 801944e:	681b      	ldr	r3, [r3, #0]
 8019450:	441a      	add	r2, r3
 8019452:	687b      	ldr	r3, [r7, #4]
 8019454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019456:	6879      	ldr	r1, [r7, #4]
 8019458:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801945a:	440b      	add	r3, r1
 801945c:	429a      	cmp	r2, r3
 801945e:	d006      	beq.n	801946e <tcp_receive+0x7c2>
 8019460:	4b36      	ldr	r3, [pc, #216]	; (801953c <tcp_receive+0x890>)
 8019462:	f240 52cc 	movw	r2, #1484	; 0x5cc
 8019466:	4936      	ldr	r1, [pc, #216]	; (8019540 <tcp_receive+0x894>)
 8019468:	4836      	ldr	r0, [pc, #216]	; (8019544 <tcp_receive+0x898>)
 801946a:	f007 fd71 	bl	8020f50 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801946e:	687b      	ldr	r3, [r7, #4]
 8019470:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019472:	2b00      	cmp	r3, #0
 8019474:	f000 80e7 	beq.w	8019646 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8019478:	4b2e      	ldr	r3, [pc, #184]	; (8019534 <tcp_receive+0x888>)
 801947a:	68db      	ldr	r3, [r3, #12]
 801947c:	899b      	ldrh	r3, [r3, #12]
 801947e:	b29b      	uxth	r3, r3
 8019480:	4618      	mov	r0, r3
 8019482:	f7f6 fc3b 	bl	800fcfc <lwip_htons>
 8019486:	4603      	mov	r3, r0
 8019488:	b2db      	uxtb	r3, r3
 801948a:	f003 0301 	and.w	r3, r3, #1
 801948e:	2b00      	cmp	r3, #0
 8019490:	d010      	beq.n	80194b4 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8019492:	e00a      	b.n	80194aa <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8019494:	687b      	ldr	r3, [r7, #4]
 8019496:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019498:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 801949a:	687b      	ldr	r3, [r7, #4]
 801949c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801949e:	681a      	ldr	r2, [r3, #0]
 80194a0:	687b      	ldr	r3, [r7, #4]
 80194a2:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 80194a4:	68f8      	ldr	r0, [r7, #12]
 80194a6:	f7fd fcc9 	bl	8016e3c <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80194aa:	687b      	ldr	r3, [r7, #4]
 80194ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80194ae:	2b00      	cmp	r3, #0
 80194b0:	d1f0      	bne.n	8019494 <tcp_receive+0x7e8>
 80194b2:	e0c8      	b.n	8019646 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80194b4:	687b      	ldr	r3, [r7, #4]
 80194b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80194b8:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80194ba:	e052      	b.n	8019562 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80194bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80194be:	68db      	ldr	r3, [r3, #12]
 80194c0:	899b      	ldrh	r3, [r3, #12]
 80194c2:	b29b      	uxth	r3, r3
 80194c4:	4618      	mov	r0, r3
 80194c6:	f7f6 fc19 	bl	800fcfc <lwip_htons>
 80194ca:	4603      	mov	r3, r0
 80194cc:	b2db      	uxtb	r3, r3
 80194ce:	f003 0301 	and.w	r3, r3, #1
 80194d2:	2b00      	cmp	r3, #0
 80194d4:	d03d      	beq.n	8019552 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80194d6:	4b17      	ldr	r3, [pc, #92]	; (8019534 <tcp_receive+0x888>)
 80194d8:	68db      	ldr	r3, [r3, #12]
 80194da:	899b      	ldrh	r3, [r3, #12]
 80194dc:	b29b      	uxth	r3, r3
 80194de:	4618      	mov	r0, r3
 80194e0:	f7f6 fc0c 	bl	800fcfc <lwip_htons>
 80194e4:	4603      	mov	r3, r0
 80194e6:	b2db      	uxtb	r3, r3
 80194e8:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80194ec:	2b00      	cmp	r3, #0
 80194ee:	d130      	bne.n	8019552 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80194f0:	4b10      	ldr	r3, [pc, #64]	; (8019534 <tcp_receive+0x888>)
 80194f2:	68db      	ldr	r3, [r3, #12]
 80194f4:	899b      	ldrh	r3, [r3, #12]
 80194f6:	b29c      	uxth	r4, r3
 80194f8:	2001      	movs	r0, #1
 80194fa:	f7f6 fbff 	bl	800fcfc <lwip_htons>
 80194fe:	4603      	mov	r3, r0
 8019500:	461a      	mov	r2, r3
 8019502:	4b0c      	ldr	r3, [pc, #48]	; (8019534 <tcp_receive+0x888>)
 8019504:	68db      	ldr	r3, [r3, #12]
 8019506:	4322      	orrs	r2, r4
 8019508:	b292      	uxth	r2, r2
 801950a:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801950c:	4b09      	ldr	r3, [pc, #36]	; (8019534 <tcp_receive+0x888>)
 801950e:	891c      	ldrh	r4, [r3, #8]
 8019510:	4b08      	ldr	r3, [pc, #32]	; (8019534 <tcp_receive+0x888>)
 8019512:	68db      	ldr	r3, [r3, #12]
 8019514:	899b      	ldrh	r3, [r3, #12]
 8019516:	b29b      	uxth	r3, r3
 8019518:	4618      	mov	r0, r3
 801951a:	f7f6 fbef 	bl	800fcfc <lwip_htons>
 801951e:	4603      	mov	r3, r0
 8019520:	b2db      	uxtb	r3, r3
 8019522:	f003 0303 	and.w	r3, r3, #3
 8019526:	2b00      	cmp	r3, #0
 8019528:	d00e      	beq.n	8019548 <tcp_receive+0x89c>
 801952a:	2301      	movs	r3, #1
 801952c:	e00d      	b.n	801954a <tcp_receive+0x89e>
 801952e:	bf00      	nop
 8019530:	24040784 	.word	0x24040784
 8019534:	24040764 	.word	0x24040764
 8019538:	2404078e 	.word	0x2404078e
 801953c:	08025af0 	.word	0x08025af0
 8019540:	08025eb8 	.word	0x08025eb8
 8019544:	08025b5c 	.word	0x08025b5c
 8019548:	2300      	movs	r3, #0
 801954a:	4423      	add	r3, r4
 801954c:	b29a      	uxth	r2, r3
 801954e:	4b98      	ldr	r3, [pc, #608]	; (80197b0 <tcp_receive+0xb04>)
 8019550:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8019552:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019554:	613b      	str	r3, [r7, #16]
              next = next->next;
 8019556:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019558:	681b      	ldr	r3, [r3, #0]
 801955a:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 801955c:	6938      	ldr	r0, [r7, #16]
 801955e:	f7fd fc6d 	bl	8016e3c <tcp_seg_free>
            while (next &&
 8019562:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019564:	2b00      	cmp	r3, #0
 8019566:	d00e      	beq.n	8019586 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8019568:	4b91      	ldr	r3, [pc, #580]	; (80197b0 <tcp_receive+0xb04>)
 801956a:	881b      	ldrh	r3, [r3, #0]
 801956c:	461a      	mov	r2, r3
 801956e:	4b91      	ldr	r3, [pc, #580]	; (80197b4 <tcp_receive+0xb08>)
 8019570:	681b      	ldr	r3, [r3, #0]
 8019572:	441a      	add	r2, r3
 8019574:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019576:	68db      	ldr	r3, [r3, #12]
 8019578:	685b      	ldr	r3, [r3, #4]
 801957a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801957c:	8909      	ldrh	r1, [r1, #8]
 801957e:	440b      	add	r3, r1
 8019580:	1ad3      	subs	r3, r2, r3
            while (next &&
 8019582:	2b00      	cmp	r3, #0
 8019584:	da9a      	bge.n	80194bc <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8019586:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019588:	2b00      	cmp	r3, #0
 801958a:	d059      	beq.n	8019640 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 801958c:	4b88      	ldr	r3, [pc, #544]	; (80197b0 <tcp_receive+0xb04>)
 801958e:	881b      	ldrh	r3, [r3, #0]
 8019590:	461a      	mov	r2, r3
 8019592:	4b88      	ldr	r3, [pc, #544]	; (80197b4 <tcp_receive+0xb08>)
 8019594:	681b      	ldr	r3, [r3, #0]
 8019596:	441a      	add	r2, r3
 8019598:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801959a:	68db      	ldr	r3, [r3, #12]
 801959c:	685b      	ldr	r3, [r3, #4]
 801959e:	1ad3      	subs	r3, r2, r3
            if (next &&
 80195a0:	2b00      	cmp	r3, #0
 80195a2:	dd4d      	ble.n	8019640 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80195a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80195a6:	68db      	ldr	r3, [r3, #12]
 80195a8:	685b      	ldr	r3, [r3, #4]
 80195aa:	b29a      	uxth	r2, r3
 80195ac:	4b81      	ldr	r3, [pc, #516]	; (80197b4 <tcp_receive+0xb08>)
 80195ae:	681b      	ldr	r3, [r3, #0]
 80195b0:	b29b      	uxth	r3, r3
 80195b2:	1ad3      	subs	r3, r2, r3
 80195b4:	b29a      	uxth	r2, r3
 80195b6:	4b80      	ldr	r3, [pc, #512]	; (80197b8 <tcp_receive+0xb0c>)
 80195b8:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80195ba:	4b7f      	ldr	r3, [pc, #508]	; (80197b8 <tcp_receive+0xb0c>)
 80195bc:	68db      	ldr	r3, [r3, #12]
 80195be:	899b      	ldrh	r3, [r3, #12]
 80195c0:	b29b      	uxth	r3, r3
 80195c2:	4618      	mov	r0, r3
 80195c4:	f7f6 fb9a 	bl	800fcfc <lwip_htons>
 80195c8:	4603      	mov	r3, r0
 80195ca:	b2db      	uxtb	r3, r3
 80195cc:	f003 0302 	and.w	r3, r3, #2
 80195d0:	2b00      	cmp	r3, #0
 80195d2:	d005      	beq.n	80195e0 <tcp_receive+0x934>
                inseg.len -= 1;
 80195d4:	4b78      	ldr	r3, [pc, #480]	; (80197b8 <tcp_receive+0xb0c>)
 80195d6:	891b      	ldrh	r3, [r3, #8]
 80195d8:	3b01      	subs	r3, #1
 80195da:	b29a      	uxth	r2, r3
 80195dc:	4b76      	ldr	r3, [pc, #472]	; (80197b8 <tcp_receive+0xb0c>)
 80195de:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80195e0:	4b75      	ldr	r3, [pc, #468]	; (80197b8 <tcp_receive+0xb0c>)
 80195e2:	685a      	ldr	r2, [r3, #4]
 80195e4:	4b74      	ldr	r3, [pc, #464]	; (80197b8 <tcp_receive+0xb0c>)
 80195e6:	891b      	ldrh	r3, [r3, #8]
 80195e8:	4619      	mov	r1, r3
 80195ea:	4610      	mov	r0, r2
 80195ec:	f7fa fb78 	bl	8013ce0 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80195f0:	4b71      	ldr	r3, [pc, #452]	; (80197b8 <tcp_receive+0xb0c>)
 80195f2:	891c      	ldrh	r4, [r3, #8]
 80195f4:	4b70      	ldr	r3, [pc, #448]	; (80197b8 <tcp_receive+0xb0c>)
 80195f6:	68db      	ldr	r3, [r3, #12]
 80195f8:	899b      	ldrh	r3, [r3, #12]
 80195fa:	b29b      	uxth	r3, r3
 80195fc:	4618      	mov	r0, r3
 80195fe:	f7f6 fb7d 	bl	800fcfc <lwip_htons>
 8019602:	4603      	mov	r3, r0
 8019604:	b2db      	uxtb	r3, r3
 8019606:	f003 0303 	and.w	r3, r3, #3
 801960a:	2b00      	cmp	r3, #0
 801960c:	d001      	beq.n	8019612 <tcp_receive+0x966>
 801960e:	2301      	movs	r3, #1
 8019610:	e000      	b.n	8019614 <tcp_receive+0x968>
 8019612:	2300      	movs	r3, #0
 8019614:	4423      	add	r3, r4
 8019616:	b29a      	uxth	r2, r3
 8019618:	4b65      	ldr	r3, [pc, #404]	; (80197b0 <tcp_receive+0xb04>)
 801961a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801961c:	4b64      	ldr	r3, [pc, #400]	; (80197b0 <tcp_receive+0xb04>)
 801961e:	881b      	ldrh	r3, [r3, #0]
 8019620:	461a      	mov	r2, r3
 8019622:	4b64      	ldr	r3, [pc, #400]	; (80197b4 <tcp_receive+0xb08>)
 8019624:	681b      	ldr	r3, [r3, #0]
 8019626:	441a      	add	r2, r3
 8019628:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801962a:	68db      	ldr	r3, [r3, #12]
 801962c:	685b      	ldr	r3, [r3, #4]
 801962e:	429a      	cmp	r2, r3
 8019630:	d006      	beq.n	8019640 <tcp_receive+0x994>
 8019632:	4b62      	ldr	r3, [pc, #392]	; (80197bc <tcp_receive+0xb10>)
 8019634:	f240 52fd 	movw	r2, #1533	; 0x5fd
 8019638:	4961      	ldr	r1, [pc, #388]	; (80197c0 <tcp_receive+0xb14>)
 801963a:	4862      	ldr	r0, [pc, #392]	; (80197c4 <tcp_receive+0xb18>)
 801963c:	f007 fc88 	bl	8020f50 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8019640:	687b      	ldr	r3, [r7, #4]
 8019642:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8019644:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8019646:	4b5a      	ldr	r3, [pc, #360]	; (80197b0 <tcp_receive+0xb04>)
 8019648:	881b      	ldrh	r3, [r3, #0]
 801964a:	461a      	mov	r2, r3
 801964c:	4b59      	ldr	r3, [pc, #356]	; (80197b4 <tcp_receive+0xb08>)
 801964e:	681b      	ldr	r3, [r3, #0]
 8019650:	441a      	add	r2, r3
 8019652:	687b      	ldr	r3, [r7, #4]
 8019654:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8019656:	687b      	ldr	r3, [r7, #4]
 8019658:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801965a:	4b55      	ldr	r3, [pc, #340]	; (80197b0 <tcp_receive+0xb04>)
 801965c:	881b      	ldrh	r3, [r3, #0]
 801965e:	429a      	cmp	r2, r3
 8019660:	d206      	bcs.n	8019670 <tcp_receive+0x9c4>
 8019662:	4b56      	ldr	r3, [pc, #344]	; (80197bc <tcp_receive+0xb10>)
 8019664:	f240 6207 	movw	r2, #1543	; 0x607
 8019668:	4957      	ldr	r1, [pc, #348]	; (80197c8 <tcp_receive+0xb1c>)
 801966a:	4856      	ldr	r0, [pc, #344]	; (80197c4 <tcp_receive+0xb18>)
 801966c:	f007 fc70 	bl	8020f50 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8019670:	687b      	ldr	r3, [r7, #4]
 8019672:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8019674:	4b4e      	ldr	r3, [pc, #312]	; (80197b0 <tcp_receive+0xb04>)
 8019676:	881b      	ldrh	r3, [r3, #0]
 8019678:	1ad3      	subs	r3, r2, r3
 801967a:	b29a      	uxth	r2, r3
 801967c:	687b      	ldr	r3, [r7, #4]
 801967e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8019680:	6878      	ldr	r0, [r7, #4]
 8019682:	f7fc fda1 	bl	80161c8 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8019686:	4b4c      	ldr	r3, [pc, #304]	; (80197b8 <tcp_receive+0xb0c>)
 8019688:	685b      	ldr	r3, [r3, #4]
 801968a:	891b      	ldrh	r3, [r3, #8]
 801968c:	2b00      	cmp	r3, #0
 801968e:	d006      	beq.n	801969e <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8019690:	4b49      	ldr	r3, [pc, #292]	; (80197b8 <tcp_receive+0xb0c>)
 8019692:	685b      	ldr	r3, [r3, #4]
 8019694:	4a4d      	ldr	r2, [pc, #308]	; (80197cc <tcp_receive+0xb20>)
 8019696:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8019698:	4b47      	ldr	r3, [pc, #284]	; (80197b8 <tcp_receive+0xb0c>)
 801969a:	2200      	movs	r2, #0
 801969c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801969e:	4b46      	ldr	r3, [pc, #280]	; (80197b8 <tcp_receive+0xb0c>)
 80196a0:	68db      	ldr	r3, [r3, #12]
 80196a2:	899b      	ldrh	r3, [r3, #12]
 80196a4:	b29b      	uxth	r3, r3
 80196a6:	4618      	mov	r0, r3
 80196a8:	f7f6 fb28 	bl	800fcfc <lwip_htons>
 80196ac:	4603      	mov	r3, r0
 80196ae:	b2db      	uxtb	r3, r3
 80196b0:	f003 0301 	and.w	r3, r3, #1
 80196b4:	2b00      	cmp	r3, #0
 80196b6:	f000 80b8 	beq.w	801982a <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80196ba:	4b45      	ldr	r3, [pc, #276]	; (80197d0 <tcp_receive+0xb24>)
 80196bc:	781b      	ldrb	r3, [r3, #0]
 80196be:	f043 0320 	orr.w	r3, r3, #32
 80196c2:	b2da      	uxtb	r2, r3
 80196c4:	4b42      	ldr	r3, [pc, #264]	; (80197d0 <tcp_receive+0xb24>)
 80196c6:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80196c8:	e0af      	b.n	801982a <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80196ca:	687b      	ldr	r3, [r7, #4]
 80196cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80196ce:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80196d0:	687b      	ldr	r3, [r7, #4]
 80196d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80196d4:	68db      	ldr	r3, [r3, #12]
 80196d6:	685b      	ldr	r3, [r3, #4]
 80196d8:	4a36      	ldr	r2, [pc, #216]	; (80197b4 <tcp_receive+0xb08>)
 80196da:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80196dc:	68bb      	ldr	r3, [r7, #8]
 80196de:	891b      	ldrh	r3, [r3, #8]
 80196e0:	461c      	mov	r4, r3
 80196e2:	68bb      	ldr	r3, [r7, #8]
 80196e4:	68db      	ldr	r3, [r3, #12]
 80196e6:	899b      	ldrh	r3, [r3, #12]
 80196e8:	b29b      	uxth	r3, r3
 80196ea:	4618      	mov	r0, r3
 80196ec:	f7f6 fb06 	bl	800fcfc <lwip_htons>
 80196f0:	4603      	mov	r3, r0
 80196f2:	b2db      	uxtb	r3, r3
 80196f4:	f003 0303 	and.w	r3, r3, #3
 80196f8:	2b00      	cmp	r3, #0
 80196fa:	d001      	beq.n	8019700 <tcp_receive+0xa54>
 80196fc:	2301      	movs	r3, #1
 80196fe:	e000      	b.n	8019702 <tcp_receive+0xa56>
 8019700:	2300      	movs	r3, #0
 8019702:	191a      	adds	r2, r3, r4
 8019704:	687b      	ldr	r3, [r7, #4]
 8019706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019708:	441a      	add	r2, r3
 801970a:	687b      	ldr	r3, [r7, #4]
 801970c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801970e:	687b      	ldr	r3, [r7, #4]
 8019710:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019712:	461c      	mov	r4, r3
 8019714:	68bb      	ldr	r3, [r7, #8]
 8019716:	891b      	ldrh	r3, [r3, #8]
 8019718:	461d      	mov	r5, r3
 801971a:	68bb      	ldr	r3, [r7, #8]
 801971c:	68db      	ldr	r3, [r3, #12]
 801971e:	899b      	ldrh	r3, [r3, #12]
 8019720:	b29b      	uxth	r3, r3
 8019722:	4618      	mov	r0, r3
 8019724:	f7f6 faea 	bl	800fcfc <lwip_htons>
 8019728:	4603      	mov	r3, r0
 801972a:	b2db      	uxtb	r3, r3
 801972c:	f003 0303 	and.w	r3, r3, #3
 8019730:	2b00      	cmp	r3, #0
 8019732:	d001      	beq.n	8019738 <tcp_receive+0xa8c>
 8019734:	2301      	movs	r3, #1
 8019736:	e000      	b.n	801973a <tcp_receive+0xa8e>
 8019738:	2300      	movs	r3, #0
 801973a:	442b      	add	r3, r5
 801973c:	429c      	cmp	r4, r3
 801973e:	d206      	bcs.n	801974e <tcp_receive+0xaa2>
 8019740:	4b1e      	ldr	r3, [pc, #120]	; (80197bc <tcp_receive+0xb10>)
 8019742:	f240 622c 	movw	r2, #1580	; 0x62c
 8019746:	4923      	ldr	r1, [pc, #140]	; (80197d4 <tcp_receive+0xb28>)
 8019748:	481e      	ldr	r0, [pc, #120]	; (80197c4 <tcp_receive+0xb18>)
 801974a:	f007 fc01 	bl	8020f50 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801974e:	68bb      	ldr	r3, [r7, #8]
 8019750:	891b      	ldrh	r3, [r3, #8]
 8019752:	461c      	mov	r4, r3
 8019754:	68bb      	ldr	r3, [r7, #8]
 8019756:	68db      	ldr	r3, [r3, #12]
 8019758:	899b      	ldrh	r3, [r3, #12]
 801975a:	b29b      	uxth	r3, r3
 801975c:	4618      	mov	r0, r3
 801975e:	f7f6 facd 	bl	800fcfc <lwip_htons>
 8019762:	4603      	mov	r3, r0
 8019764:	b2db      	uxtb	r3, r3
 8019766:	f003 0303 	and.w	r3, r3, #3
 801976a:	2b00      	cmp	r3, #0
 801976c:	d001      	beq.n	8019772 <tcp_receive+0xac6>
 801976e:	2301      	movs	r3, #1
 8019770:	e000      	b.n	8019774 <tcp_receive+0xac8>
 8019772:	2300      	movs	r3, #0
 8019774:	1919      	adds	r1, r3, r4
 8019776:	687b      	ldr	r3, [r7, #4]
 8019778:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801977a:	b28b      	uxth	r3, r1
 801977c:	1ad3      	subs	r3, r2, r3
 801977e:	b29a      	uxth	r2, r3
 8019780:	687b      	ldr	r3, [r7, #4]
 8019782:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8019784:	6878      	ldr	r0, [r7, #4]
 8019786:	f7fc fd1f 	bl	80161c8 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801978a:	68bb      	ldr	r3, [r7, #8]
 801978c:	685b      	ldr	r3, [r3, #4]
 801978e:	891b      	ldrh	r3, [r3, #8]
 8019790:	2b00      	cmp	r3, #0
 8019792:	d028      	beq.n	80197e6 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8019794:	4b0d      	ldr	r3, [pc, #52]	; (80197cc <tcp_receive+0xb20>)
 8019796:	681b      	ldr	r3, [r3, #0]
 8019798:	2b00      	cmp	r3, #0
 801979a:	d01d      	beq.n	80197d8 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 801979c:	4b0b      	ldr	r3, [pc, #44]	; (80197cc <tcp_receive+0xb20>)
 801979e:	681a      	ldr	r2, [r3, #0]
 80197a0:	68bb      	ldr	r3, [r7, #8]
 80197a2:	685b      	ldr	r3, [r3, #4]
 80197a4:	4619      	mov	r1, r3
 80197a6:	4610      	mov	r0, r2
 80197a8:	f7fa fd20 	bl	80141ec <pbuf_cat>
 80197ac:	e018      	b.n	80197e0 <tcp_receive+0xb34>
 80197ae:	bf00      	nop
 80197b0:	2404078e 	.word	0x2404078e
 80197b4:	24040784 	.word	0x24040784
 80197b8:	24040764 	.word	0x24040764
 80197bc:	08025af0 	.word	0x08025af0
 80197c0:	08025ef0 	.word	0x08025ef0
 80197c4:	08025b5c 	.word	0x08025b5c
 80197c8:	08025f2c 	.word	0x08025f2c
 80197cc:	24040794 	.word	0x24040794
 80197d0:	24040791 	.word	0x24040791
 80197d4:	08025f4c 	.word	0x08025f4c
            } else {
              recv_data = cseg->p;
 80197d8:	68bb      	ldr	r3, [r7, #8]
 80197da:	685b      	ldr	r3, [r3, #4]
 80197dc:	4a70      	ldr	r2, [pc, #448]	; (80199a0 <tcp_receive+0xcf4>)
 80197de:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80197e0:	68bb      	ldr	r3, [r7, #8]
 80197e2:	2200      	movs	r2, #0
 80197e4:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80197e6:	68bb      	ldr	r3, [r7, #8]
 80197e8:	68db      	ldr	r3, [r3, #12]
 80197ea:	899b      	ldrh	r3, [r3, #12]
 80197ec:	b29b      	uxth	r3, r3
 80197ee:	4618      	mov	r0, r3
 80197f0:	f7f6 fa84 	bl	800fcfc <lwip_htons>
 80197f4:	4603      	mov	r3, r0
 80197f6:	b2db      	uxtb	r3, r3
 80197f8:	f003 0301 	and.w	r3, r3, #1
 80197fc:	2b00      	cmp	r3, #0
 80197fe:	d00d      	beq.n	801981c <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8019800:	4b68      	ldr	r3, [pc, #416]	; (80199a4 <tcp_receive+0xcf8>)
 8019802:	781b      	ldrb	r3, [r3, #0]
 8019804:	f043 0320 	orr.w	r3, r3, #32
 8019808:	b2da      	uxtb	r2, r3
 801980a:	4b66      	ldr	r3, [pc, #408]	; (80199a4 <tcp_receive+0xcf8>)
 801980c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801980e:	687b      	ldr	r3, [r7, #4]
 8019810:	7d1b      	ldrb	r3, [r3, #20]
 8019812:	2b04      	cmp	r3, #4
 8019814:	d102      	bne.n	801981c <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8019816:	687b      	ldr	r3, [r7, #4]
 8019818:	2207      	movs	r2, #7
 801981a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 801981c:	68bb      	ldr	r3, [r7, #8]
 801981e:	681a      	ldr	r2, [r3, #0]
 8019820:	687b      	ldr	r3, [r7, #4]
 8019822:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8019824:	68b8      	ldr	r0, [r7, #8]
 8019826:	f7fd fb09 	bl	8016e3c <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801982a:	687b      	ldr	r3, [r7, #4]
 801982c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801982e:	2b00      	cmp	r3, #0
 8019830:	d008      	beq.n	8019844 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8019832:	687b      	ldr	r3, [r7, #4]
 8019834:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019836:	68db      	ldr	r3, [r3, #12]
 8019838:	685a      	ldr	r2, [r3, #4]
 801983a:	687b      	ldr	r3, [r7, #4]
 801983c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 801983e:	429a      	cmp	r2, r3
 8019840:	f43f af43 	beq.w	80196ca <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8019844:	687b      	ldr	r3, [r7, #4]
 8019846:	8b5b      	ldrh	r3, [r3, #26]
 8019848:	f003 0301 	and.w	r3, r3, #1
 801984c:	2b00      	cmp	r3, #0
 801984e:	d00e      	beq.n	801986e <tcp_receive+0xbc2>
 8019850:	687b      	ldr	r3, [r7, #4]
 8019852:	8b5b      	ldrh	r3, [r3, #26]
 8019854:	f023 0301 	bic.w	r3, r3, #1
 8019858:	b29a      	uxth	r2, r3
 801985a:	687b      	ldr	r3, [r7, #4]
 801985c:	835a      	strh	r2, [r3, #26]
 801985e:	687b      	ldr	r3, [r7, #4]
 8019860:	8b5b      	ldrh	r3, [r3, #26]
 8019862:	f043 0302 	orr.w	r3, r3, #2
 8019866:	b29a      	uxth	r2, r3
 8019868:	687b      	ldr	r3, [r7, #4]
 801986a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801986c:	e188      	b.n	8019b80 <tcp_receive+0xed4>
        tcp_ack(pcb);
 801986e:	687b      	ldr	r3, [r7, #4]
 8019870:	8b5b      	ldrh	r3, [r3, #26]
 8019872:	f043 0301 	orr.w	r3, r3, #1
 8019876:	b29a      	uxth	r2, r3
 8019878:	687b      	ldr	r3, [r7, #4]
 801987a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801987c:	e180      	b.n	8019b80 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801987e:	687b      	ldr	r3, [r7, #4]
 8019880:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019882:	2b00      	cmp	r3, #0
 8019884:	d106      	bne.n	8019894 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8019886:	4848      	ldr	r0, [pc, #288]	; (80199a8 <tcp_receive+0xcfc>)
 8019888:	f7fd faf0 	bl	8016e6c <tcp_seg_copy>
 801988c:	4602      	mov	r2, r0
 801988e:	687b      	ldr	r3, [r7, #4]
 8019890:	675a      	str	r2, [r3, #116]	; 0x74
 8019892:	e16d      	b.n	8019b70 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8019894:	2300      	movs	r3, #0
 8019896:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8019898:	687b      	ldr	r3, [r7, #4]
 801989a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801989c:	63bb      	str	r3, [r7, #56]	; 0x38
 801989e:	e157      	b.n	8019b50 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 80198a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80198a2:	68db      	ldr	r3, [r3, #12]
 80198a4:	685a      	ldr	r2, [r3, #4]
 80198a6:	4b41      	ldr	r3, [pc, #260]	; (80199ac <tcp_receive+0xd00>)
 80198a8:	681b      	ldr	r3, [r3, #0]
 80198aa:	429a      	cmp	r2, r3
 80198ac:	d11d      	bne.n	80198ea <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80198ae:	4b3e      	ldr	r3, [pc, #248]	; (80199a8 <tcp_receive+0xcfc>)
 80198b0:	891a      	ldrh	r2, [r3, #8]
 80198b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80198b4:	891b      	ldrh	r3, [r3, #8]
 80198b6:	429a      	cmp	r2, r3
 80198b8:	f240 814f 	bls.w	8019b5a <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80198bc:	483a      	ldr	r0, [pc, #232]	; (80199a8 <tcp_receive+0xcfc>)
 80198be:	f7fd fad5 	bl	8016e6c <tcp_seg_copy>
 80198c2:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80198c4:	697b      	ldr	r3, [r7, #20]
 80198c6:	2b00      	cmp	r3, #0
 80198c8:	f000 8149 	beq.w	8019b5e <tcp_receive+0xeb2>
                  if (prev != NULL) {
 80198cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80198ce:	2b00      	cmp	r3, #0
 80198d0:	d003      	beq.n	80198da <tcp_receive+0xc2e>
                    prev->next = cseg;
 80198d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80198d4:	697a      	ldr	r2, [r7, #20]
 80198d6:	601a      	str	r2, [r3, #0]
 80198d8:	e002      	b.n	80198e0 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 80198da:	687b      	ldr	r3, [r7, #4]
 80198dc:	697a      	ldr	r2, [r7, #20]
 80198de:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80198e0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80198e2:	6978      	ldr	r0, [r7, #20]
 80198e4:	f7ff f8de 	bl	8018aa4 <tcp_oos_insert_segment>
                }
                break;
 80198e8:	e139      	b.n	8019b5e <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80198ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80198ec:	2b00      	cmp	r3, #0
 80198ee:	d117      	bne.n	8019920 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80198f0:	4b2e      	ldr	r3, [pc, #184]	; (80199ac <tcp_receive+0xd00>)
 80198f2:	681a      	ldr	r2, [r3, #0]
 80198f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80198f6:	68db      	ldr	r3, [r3, #12]
 80198f8:	685b      	ldr	r3, [r3, #4]
 80198fa:	1ad3      	subs	r3, r2, r3
 80198fc:	2b00      	cmp	r3, #0
 80198fe:	da57      	bge.n	80199b0 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8019900:	4829      	ldr	r0, [pc, #164]	; (80199a8 <tcp_receive+0xcfc>)
 8019902:	f7fd fab3 	bl	8016e6c <tcp_seg_copy>
 8019906:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8019908:	69bb      	ldr	r3, [r7, #24]
 801990a:	2b00      	cmp	r3, #0
 801990c:	f000 8129 	beq.w	8019b62 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8019910:	687b      	ldr	r3, [r7, #4]
 8019912:	69ba      	ldr	r2, [r7, #24]
 8019914:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8019916:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8019918:	69b8      	ldr	r0, [r7, #24]
 801991a:	f7ff f8c3 	bl	8018aa4 <tcp_oos_insert_segment>
                  }
                  break;
 801991e:	e120      	b.n	8019b62 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8019920:	4b22      	ldr	r3, [pc, #136]	; (80199ac <tcp_receive+0xd00>)
 8019922:	681a      	ldr	r2, [r3, #0]
 8019924:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019926:	68db      	ldr	r3, [r3, #12]
 8019928:	685b      	ldr	r3, [r3, #4]
 801992a:	1ad3      	subs	r3, r2, r3
 801992c:	3b01      	subs	r3, #1
 801992e:	2b00      	cmp	r3, #0
 8019930:	db3e      	blt.n	80199b0 <tcp_receive+0xd04>
 8019932:	4b1e      	ldr	r3, [pc, #120]	; (80199ac <tcp_receive+0xd00>)
 8019934:	681a      	ldr	r2, [r3, #0]
 8019936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019938:	68db      	ldr	r3, [r3, #12]
 801993a:	685b      	ldr	r3, [r3, #4]
 801993c:	1ad3      	subs	r3, r2, r3
 801993e:	3301      	adds	r3, #1
 8019940:	2b00      	cmp	r3, #0
 8019942:	dc35      	bgt.n	80199b0 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8019944:	4818      	ldr	r0, [pc, #96]	; (80199a8 <tcp_receive+0xcfc>)
 8019946:	f7fd fa91 	bl	8016e6c <tcp_seg_copy>
 801994a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 801994c:	69fb      	ldr	r3, [r7, #28]
 801994e:	2b00      	cmp	r3, #0
 8019950:	f000 8109 	beq.w	8019b66 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8019954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019956:	68db      	ldr	r3, [r3, #12]
 8019958:	685b      	ldr	r3, [r3, #4]
 801995a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801995c:	8912      	ldrh	r2, [r2, #8]
 801995e:	441a      	add	r2, r3
 8019960:	4b12      	ldr	r3, [pc, #72]	; (80199ac <tcp_receive+0xd00>)
 8019962:	681b      	ldr	r3, [r3, #0]
 8019964:	1ad3      	subs	r3, r2, r3
 8019966:	2b00      	cmp	r3, #0
 8019968:	dd12      	ble.n	8019990 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801996a:	4b10      	ldr	r3, [pc, #64]	; (80199ac <tcp_receive+0xd00>)
 801996c:	681b      	ldr	r3, [r3, #0]
 801996e:	b29a      	uxth	r2, r3
 8019970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019972:	68db      	ldr	r3, [r3, #12]
 8019974:	685b      	ldr	r3, [r3, #4]
 8019976:	b29b      	uxth	r3, r3
 8019978:	1ad3      	subs	r3, r2, r3
 801997a:	b29a      	uxth	r2, r3
 801997c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801997e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8019980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019982:	685a      	ldr	r2, [r3, #4]
 8019984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019986:	891b      	ldrh	r3, [r3, #8]
 8019988:	4619      	mov	r1, r3
 801998a:	4610      	mov	r0, r2
 801998c:	f7fa f9a8 	bl	8013ce0 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8019990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019992:	69fa      	ldr	r2, [r7, #28]
 8019994:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8019996:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8019998:	69f8      	ldr	r0, [r7, #28]
 801999a:	f7ff f883 	bl	8018aa4 <tcp_oos_insert_segment>
                  }
                  break;
 801999e:	e0e2      	b.n	8019b66 <tcp_receive+0xeba>
 80199a0:	24040794 	.word	0x24040794
 80199a4:	24040791 	.word	0x24040791
 80199a8:	24040764 	.word	0x24040764
 80199ac:	24040784 	.word	0x24040784
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80199b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80199b2:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80199b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80199b6:	681b      	ldr	r3, [r3, #0]
 80199b8:	2b00      	cmp	r3, #0
 80199ba:	f040 80c6 	bne.w	8019b4a <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80199be:	4b80      	ldr	r3, [pc, #512]	; (8019bc0 <tcp_receive+0xf14>)
 80199c0:	681a      	ldr	r2, [r3, #0]
 80199c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80199c4:	68db      	ldr	r3, [r3, #12]
 80199c6:	685b      	ldr	r3, [r3, #4]
 80199c8:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80199ca:	2b00      	cmp	r3, #0
 80199cc:	f340 80bd 	ble.w	8019b4a <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80199d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80199d2:	68db      	ldr	r3, [r3, #12]
 80199d4:	899b      	ldrh	r3, [r3, #12]
 80199d6:	b29b      	uxth	r3, r3
 80199d8:	4618      	mov	r0, r3
 80199da:	f7f6 f98f 	bl	800fcfc <lwip_htons>
 80199de:	4603      	mov	r3, r0
 80199e0:	b2db      	uxtb	r3, r3
 80199e2:	f003 0301 	and.w	r3, r3, #1
 80199e6:	2b00      	cmp	r3, #0
 80199e8:	f040 80bf 	bne.w	8019b6a <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80199ec:	4875      	ldr	r0, [pc, #468]	; (8019bc4 <tcp_receive+0xf18>)
 80199ee:	f7fd fa3d 	bl	8016e6c <tcp_seg_copy>
 80199f2:	4602      	mov	r2, r0
 80199f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80199f6:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80199f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80199fa:	681b      	ldr	r3, [r3, #0]
 80199fc:	2b00      	cmp	r3, #0
 80199fe:	f000 80b6 	beq.w	8019b6e <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8019a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019a04:	68db      	ldr	r3, [r3, #12]
 8019a06:	685b      	ldr	r3, [r3, #4]
 8019a08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019a0a:	8912      	ldrh	r2, [r2, #8]
 8019a0c:	441a      	add	r2, r3
 8019a0e:	4b6c      	ldr	r3, [pc, #432]	; (8019bc0 <tcp_receive+0xf14>)
 8019a10:	681b      	ldr	r3, [r3, #0]
 8019a12:	1ad3      	subs	r3, r2, r3
 8019a14:	2b00      	cmp	r3, #0
 8019a16:	dd12      	ble.n	8019a3e <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8019a18:	4b69      	ldr	r3, [pc, #420]	; (8019bc0 <tcp_receive+0xf14>)
 8019a1a:	681b      	ldr	r3, [r3, #0]
 8019a1c:	b29a      	uxth	r2, r3
 8019a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019a20:	68db      	ldr	r3, [r3, #12]
 8019a22:	685b      	ldr	r3, [r3, #4]
 8019a24:	b29b      	uxth	r3, r3
 8019a26:	1ad3      	subs	r3, r2, r3
 8019a28:	b29a      	uxth	r2, r3
 8019a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019a2c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8019a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019a30:	685a      	ldr	r2, [r3, #4]
 8019a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019a34:	891b      	ldrh	r3, [r3, #8]
 8019a36:	4619      	mov	r1, r3
 8019a38:	4610      	mov	r0, r2
 8019a3a:	f7fa f951 	bl	8013ce0 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8019a3e:	4b62      	ldr	r3, [pc, #392]	; (8019bc8 <tcp_receive+0xf1c>)
 8019a40:	881b      	ldrh	r3, [r3, #0]
 8019a42:	461a      	mov	r2, r3
 8019a44:	4b5e      	ldr	r3, [pc, #376]	; (8019bc0 <tcp_receive+0xf14>)
 8019a46:	681b      	ldr	r3, [r3, #0]
 8019a48:	441a      	add	r2, r3
 8019a4a:	687b      	ldr	r3, [r7, #4]
 8019a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019a4e:	6879      	ldr	r1, [r7, #4]
 8019a50:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8019a52:	440b      	add	r3, r1
 8019a54:	1ad3      	subs	r3, r2, r3
 8019a56:	2b00      	cmp	r3, #0
 8019a58:	f340 8089 	ble.w	8019b6e <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8019a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019a5e:	681b      	ldr	r3, [r3, #0]
 8019a60:	68db      	ldr	r3, [r3, #12]
 8019a62:	899b      	ldrh	r3, [r3, #12]
 8019a64:	b29b      	uxth	r3, r3
 8019a66:	4618      	mov	r0, r3
 8019a68:	f7f6 f948 	bl	800fcfc <lwip_htons>
 8019a6c:	4603      	mov	r3, r0
 8019a6e:	b2db      	uxtb	r3, r3
 8019a70:	f003 0301 	and.w	r3, r3, #1
 8019a74:	2b00      	cmp	r3, #0
 8019a76:	d022      	beq.n	8019abe <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8019a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019a7a:	681b      	ldr	r3, [r3, #0]
 8019a7c:	68db      	ldr	r3, [r3, #12]
 8019a7e:	899b      	ldrh	r3, [r3, #12]
 8019a80:	b29b      	uxth	r3, r3
 8019a82:	b21b      	sxth	r3, r3
 8019a84:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8019a88:	b21c      	sxth	r4, r3
 8019a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019a8c:	681b      	ldr	r3, [r3, #0]
 8019a8e:	68db      	ldr	r3, [r3, #12]
 8019a90:	899b      	ldrh	r3, [r3, #12]
 8019a92:	b29b      	uxth	r3, r3
 8019a94:	4618      	mov	r0, r3
 8019a96:	f7f6 f931 	bl	800fcfc <lwip_htons>
 8019a9a:	4603      	mov	r3, r0
 8019a9c:	b2db      	uxtb	r3, r3
 8019a9e:	b29b      	uxth	r3, r3
 8019aa0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8019aa4:	b29b      	uxth	r3, r3
 8019aa6:	4618      	mov	r0, r3
 8019aa8:	f7f6 f928 	bl	800fcfc <lwip_htons>
 8019aac:	4603      	mov	r3, r0
 8019aae:	b21b      	sxth	r3, r3
 8019ab0:	4323      	orrs	r3, r4
 8019ab2:	b21a      	sxth	r2, r3
 8019ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019ab6:	681b      	ldr	r3, [r3, #0]
 8019ab8:	68db      	ldr	r3, [r3, #12]
 8019aba:	b292      	uxth	r2, r2
 8019abc:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8019abe:	687b      	ldr	r3, [r7, #4]
 8019ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019ac2:	b29a      	uxth	r2, r3
 8019ac4:	687b      	ldr	r3, [r7, #4]
 8019ac6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019ac8:	4413      	add	r3, r2
 8019aca:	b299      	uxth	r1, r3
 8019acc:	4b3c      	ldr	r3, [pc, #240]	; (8019bc0 <tcp_receive+0xf14>)
 8019ace:	681b      	ldr	r3, [r3, #0]
 8019ad0:	b29a      	uxth	r2, r3
 8019ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019ad4:	681b      	ldr	r3, [r3, #0]
 8019ad6:	1a8a      	subs	r2, r1, r2
 8019ad8:	b292      	uxth	r2, r2
 8019ada:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8019adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019ade:	681b      	ldr	r3, [r3, #0]
 8019ae0:	685a      	ldr	r2, [r3, #4]
 8019ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019ae4:	681b      	ldr	r3, [r3, #0]
 8019ae6:	891b      	ldrh	r3, [r3, #8]
 8019ae8:	4619      	mov	r1, r3
 8019aea:	4610      	mov	r0, r2
 8019aec:	f7fa f8f8 	bl	8013ce0 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8019af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019af2:	681b      	ldr	r3, [r3, #0]
 8019af4:	891c      	ldrh	r4, [r3, #8]
 8019af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019af8:	681b      	ldr	r3, [r3, #0]
 8019afa:	68db      	ldr	r3, [r3, #12]
 8019afc:	899b      	ldrh	r3, [r3, #12]
 8019afe:	b29b      	uxth	r3, r3
 8019b00:	4618      	mov	r0, r3
 8019b02:	f7f6 f8fb 	bl	800fcfc <lwip_htons>
 8019b06:	4603      	mov	r3, r0
 8019b08:	b2db      	uxtb	r3, r3
 8019b0a:	f003 0303 	and.w	r3, r3, #3
 8019b0e:	2b00      	cmp	r3, #0
 8019b10:	d001      	beq.n	8019b16 <tcp_receive+0xe6a>
 8019b12:	2301      	movs	r3, #1
 8019b14:	e000      	b.n	8019b18 <tcp_receive+0xe6c>
 8019b16:	2300      	movs	r3, #0
 8019b18:	4423      	add	r3, r4
 8019b1a:	b29a      	uxth	r2, r3
 8019b1c:	4b2a      	ldr	r3, [pc, #168]	; (8019bc8 <tcp_receive+0xf1c>)
 8019b1e:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8019b20:	4b29      	ldr	r3, [pc, #164]	; (8019bc8 <tcp_receive+0xf1c>)
 8019b22:	881b      	ldrh	r3, [r3, #0]
 8019b24:	461a      	mov	r2, r3
 8019b26:	4b26      	ldr	r3, [pc, #152]	; (8019bc0 <tcp_receive+0xf14>)
 8019b28:	681b      	ldr	r3, [r3, #0]
 8019b2a:	441a      	add	r2, r3
 8019b2c:	687b      	ldr	r3, [r7, #4]
 8019b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019b30:	6879      	ldr	r1, [r7, #4]
 8019b32:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8019b34:	440b      	add	r3, r1
 8019b36:	429a      	cmp	r2, r3
 8019b38:	d019      	beq.n	8019b6e <tcp_receive+0xec2>
 8019b3a:	4b24      	ldr	r3, [pc, #144]	; (8019bcc <tcp_receive+0xf20>)
 8019b3c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8019b40:	4923      	ldr	r1, [pc, #140]	; (8019bd0 <tcp_receive+0xf24>)
 8019b42:	4824      	ldr	r0, [pc, #144]	; (8019bd4 <tcp_receive+0xf28>)
 8019b44:	f007 fa04 	bl	8020f50 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8019b48:	e011      	b.n	8019b6e <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8019b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019b4c:	681b      	ldr	r3, [r3, #0]
 8019b4e:	63bb      	str	r3, [r7, #56]	; 0x38
 8019b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019b52:	2b00      	cmp	r3, #0
 8019b54:	f47f aea4 	bne.w	80198a0 <tcp_receive+0xbf4>
 8019b58:	e00a      	b.n	8019b70 <tcp_receive+0xec4>
                break;
 8019b5a:	bf00      	nop
 8019b5c:	e008      	b.n	8019b70 <tcp_receive+0xec4>
                break;
 8019b5e:	bf00      	nop
 8019b60:	e006      	b.n	8019b70 <tcp_receive+0xec4>
                  break;
 8019b62:	bf00      	nop
 8019b64:	e004      	b.n	8019b70 <tcp_receive+0xec4>
                  break;
 8019b66:	bf00      	nop
 8019b68:	e002      	b.n	8019b70 <tcp_receive+0xec4>
                  break;
 8019b6a:	bf00      	nop
 8019b6c:	e000      	b.n	8019b70 <tcp_receive+0xec4>
                break;
 8019b6e:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8019b70:	6878      	ldr	r0, [r7, #4]
 8019b72:	f001 fe9d 	bl	801b8b0 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8019b76:	e003      	b.n	8019b80 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8019b78:	6878      	ldr	r0, [r7, #4]
 8019b7a:	f001 fe99 	bl	801b8b0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8019b7e:	e01a      	b.n	8019bb6 <tcp_receive+0xf0a>
 8019b80:	e019      	b.n	8019bb6 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8019b82:	4b0f      	ldr	r3, [pc, #60]	; (8019bc0 <tcp_receive+0xf14>)
 8019b84:	681a      	ldr	r2, [r3, #0]
 8019b86:	687b      	ldr	r3, [r7, #4]
 8019b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019b8a:	1ad3      	subs	r3, r2, r3
 8019b8c:	2b00      	cmp	r3, #0
 8019b8e:	db0a      	blt.n	8019ba6 <tcp_receive+0xefa>
 8019b90:	4b0b      	ldr	r3, [pc, #44]	; (8019bc0 <tcp_receive+0xf14>)
 8019b92:	681a      	ldr	r2, [r3, #0]
 8019b94:	687b      	ldr	r3, [r7, #4]
 8019b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019b98:	6879      	ldr	r1, [r7, #4]
 8019b9a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8019b9c:	440b      	add	r3, r1
 8019b9e:	1ad3      	subs	r3, r2, r3
 8019ba0:	3301      	adds	r3, #1
 8019ba2:	2b00      	cmp	r3, #0
 8019ba4:	dd07      	ble.n	8019bb6 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 8019ba6:	687b      	ldr	r3, [r7, #4]
 8019ba8:	8b5b      	ldrh	r3, [r3, #26]
 8019baa:	f043 0302 	orr.w	r3, r3, #2
 8019bae:	b29a      	uxth	r2, r3
 8019bb0:	687b      	ldr	r3, [r7, #4]
 8019bb2:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8019bb4:	e7ff      	b.n	8019bb6 <tcp_receive+0xf0a>
 8019bb6:	bf00      	nop
 8019bb8:	3750      	adds	r7, #80	; 0x50
 8019bba:	46bd      	mov	sp, r7
 8019bbc:	bdb0      	pop	{r4, r5, r7, pc}
 8019bbe:	bf00      	nop
 8019bc0:	24040784 	.word	0x24040784
 8019bc4:	24040764 	.word	0x24040764
 8019bc8:	2404078e 	.word	0x2404078e
 8019bcc:	08025af0 	.word	0x08025af0
 8019bd0:	08025eb8 	.word	0x08025eb8
 8019bd4:	08025b5c 	.word	0x08025b5c

08019bd8 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8019bd8:	b480      	push	{r7}
 8019bda:	b083      	sub	sp, #12
 8019bdc:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8019bde:	4b15      	ldr	r3, [pc, #84]	; (8019c34 <tcp_get_next_optbyte+0x5c>)
 8019be0:	881b      	ldrh	r3, [r3, #0]
 8019be2:	1c5a      	adds	r2, r3, #1
 8019be4:	b291      	uxth	r1, r2
 8019be6:	4a13      	ldr	r2, [pc, #76]	; (8019c34 <tcp_get_next_optbyte+0x5c>)
 8019be8:	8011      	strh	r1, [r2, #0]
 8019bea:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8019bec:	4b12      	ldr	r3, [pc, #72]	; (8019c38 <tcp_get_next_optbyte+0x60>)
 8019bee:	681b      	ldr	r3, [r3, #0]
 8019bf0:	2b00      	cmp	r3, #0
 8019bf2:	d004      	beq.n	8019bfe <tcp_get_next_optbyte+0x26>
 8019bf4:	4b11      	ldr	r3, [pc, #68]	; (8019c3c <tcp_get_next_optbyte+0x64>)
 8019bf6:	881b      	ldrh	r3, [r3, #0]
 8019bf8:	88fa      	ldrh	r2, [r7, #6]
 8019bfa:	429a      	cmp	r2, r3
 8019bfc:	d208      	bcs.n	8019c10 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8019bfe:	4b10      	ldr	r3, [pc, #64]	; (8019c40 <tcp_get_next_optbyte+0x68>)
 8019c00:	681b      	ldr	r3, [r3, #0]
 8019c02:	3314      	adds	r3, #20
 8019c04:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8019c06:	88fb      	ldrh	r3, [r7, #6]
 8019c08:	683a      	ldr	r2, [r7, #0]
 8019c0a:	4413      	add	r3, r2
 8019c0c:	781b      	ldrb	r3, [r3, #0]
 8019c0e:	e00b      	b.n	8019c28 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8019c10:	88fb      	ldrh	r3, [r7, #6]
 8019c12:	b2da      	uxtb	r2, r3
 8019c14:	4b09      	ldr	r3, [pc, #36]	; (8019c3c <tcp_get_next_optbyte+0x64>)
 8019c16:	881b      	ldrh	r3, [r3, #0]
 8019c18:	b2db      	uxtb	r3, r3
 8019c1a:	1ad3      	subs	r3, r2, r3
 8019c1c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8019c1e:	4b06      	ldr	r3, [pc, #24]	; (8019c38 <tcp_get_next_optbyte+0x60>)
 8019c20:	681a      	ldr	r2, [r3, #0]
 8019c22:	797b      	ldrb	r3, [r7, #5]
 8019c24:	4413      	add	r3, r2
 8019c26:	781b      	ldrb	r3, [r3, #0]
  }
}
 8019c28:	4618      	mov	r0, r3
 8019c2a:	370c      	adds	r7, #12
 8019c2c:	46bd      	mov	sp, r7
 8019c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c32:	4770      	bx	lr
 8019c34:	24040780 	.word	0x24040780
 8019c38:	2404077c 	.word	0x2404077c
 8019c3c:	2404077a 	.word	0x2404077a
 8019c40:	24040774 	.word	0x24040774

08019c44 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8019c44:	b580      	push	{r7, lr}
 8019c46:	b084      	sub	sp, #16
 8019c48:	af00      	add	r7, sp, #0
 8019c4a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8019c4c:	687b      	ldr	r3, [r7, #4]
 8019c4e:	2b00      	cmp	r3, #0
 8019c50:	d106      	bne.n	8019c60 <tcp_parseopt+0x1c>
 8019c52:	4b31      	ldr	r3, [pc, #196]	; (8019d18 <tcp_parseopt+0xd4>)
 8019c54:	f240 727d 	movw	r2, #1917	; 0x77d
 8019c58:	4930      	ldr	r1, [pc, #192]	; (8019d1c <tcp_parseopt+0xd8>)
 8019c5a:	4831      	ldr	r0, [pc, #196]	; (8019d20 <tcp_parseopt+0xdc>)
 8019c5c:	f007 f978 	bl	8020f50 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8019c60:	4b30      	ldr	r3, [pc, #192]	; (8019d24 <tcp_parseopt+0xe0>)
 8019c62:	881b      	ldrh	r3, [r3, #0]
 8019c64:	2b00      	cmp	r3, #0
 8019c66:	d053      	beq.n	8019d10 <tcp_parseopt+0xcc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8019c68:	4b2f      	ldr	r3, [pc, #188]	; (8019d28 <tcp_parseopt+0xe4>)
 8019c6a:	2200      	movs	r2, #0
 8019c6c:	801a      	strh	r2, [r3, #0]
 8019c6e:	e043      	b.n	8019cf8 <tcp_parseopt+0xb4>
      u8_t opt = tcp_get_next_optbyte();
 8019c70:	f7ff ffb2 	bl	8019bd8 <tcp_get_next_optbyte>
 8019c74:	4603      	mov	r3, r0
 8019c76:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8019c78:	7bfb      	ldrb	r3, [r7, #15]
 8019c7a:	2b01      	cmp	r3, #1
 8019c7c:	d03c      	beq.n	8019cf8 <tcp_parseopt+0xb4>
 8019c7e:	2b02      	cmp	r3, #2
 8019c80:	d002      	beq.n	8019c88 <tcp_parseopt+0x44>
 8019c82:	2b00      	cmp	r3, #0
 8019c84:	d03f      	beq.n	8019d06 <tcp_parseopt+0xc2>
 8019c86:	e026      	b.n	8019cd6 <tcp_parseopt+0x92>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8019c88:	f7ff ffa6 	bl	8019bd8 <tcp_get_next_optbyte>
 8019c8c:	4603      	mov	r3, r0
 8019c8e:	2b04      	cmp	r3, #4
 8019c90:	d13b      	bne.n	8019d0a <tcp_parseopt+0xc6>
 8019c92:	4b25      	ldr	r3, [pc, #148]	; (8019d28 <tcp_parseopt+0xe4>)
 8019c94:	881b      	ldrh	r3, [r3, #0]
 8019c96:	3302      	adds	r3, #2
 8019c98:	4a22      	ldr	r2, [pc, #136]	; (8019d24 <tcp_parseopt+0xe0>)
 8019c9a:	8812      	ldrh	r2, [r2, #0]
 8019c9c:	4293      	cmp	r3, r2
 8019c9e:	dc34      	bgt.n	8019d0a <tcp_parseopt+0xc6>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8019ca0:	f7ff ff9a 	bl	8019bd8 <tcp_get_next_optbyte>
 8019ca4:	4603      	mov	r3, r0
 8019ca6:	b29b      	uxth	r3, r3
 8019ca8:	021b      	lsls	r3, r3, #8
 8019caa:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8019cac:	f7ff ff94 	bl	8019bd8 <tcp_get_next_optbyte>
 8019cb0:	4603      	mov	r3, r0
 8019cb2:	b29a      	uxth	r2, r3
 8019cb4:	89bb      	ldrh	r3, [r7, #12]
 8019cb6:	4313      	orrs	r3, r2
 8019cb8:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8019cba:	89bb      	ldrh	r3, [r7, #12]
 8019cbc:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8019cc0:	d804      	bhi.n	8019ccc <tcp_parseopt+0x88>
 8019cc2:	89bb      	ldrh	r3, [r7, #12]
 8019cc4:	2b00      	cmp	r3, #0
 8019cc6:	d001      	beq.n	8019ccc <tcp_parseopt+0x88>
 8019cc8:	89ba      	ldrh	r2, [r7, #12]
 8019cca:	e001      	b.n	8019cd0 <tcp_parseopt+0x8c>
 8019ccc:	f44f 7206 	mov.w	r2, #536	; 0x218
 8019cd0:	687b      	ldr	r3, [r7, #4]
 8019cd2:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8019cd4:	e010      	b.n	8019cf8 <tcp_parseopt+0xb4>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8019cd6:	f7ff ff7f 	bl	8019bd8 <tcp_get_next_optbyte>
 8019cda:	4603      	mov	r3, r0
 8019cdc:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8019cde:	7afb      	ldrb	r3, [r7, #11]
 8019ce0:	2b01      	cmp	r3, #1
 8019ce2:	d914      	bls.n	8019d0e <tcp_parseopt+0xca>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8019ce4:	7afb      	ldrb	r3, [r7, #11]
 8019ce6:	b29a      	uxth	r2, r3
 8019ce8:	4b0f      	ldr	r3, [pc, #60]	; (8019d28 <tcp_parseopt+0xe4>)
 8019cea:	881b      	ldrh	r3, [r3, #0]
 8019cec:	4413      	add	r3, r2
 8019cee:	b29b      	uxth	r3, r3
 8019cf0:	3b02      	subs	r3, #2
 8019cf2:	b29a      	uxth	r2, r3
 8019cf4:	4b0c      	ldr	r3, [pc, #48]	; (8019d28 <tcp_parseopt+0xe4>)
 8019cf6:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8019cf8:	4b0b      	ldr	r3, [pc, #44]	; (8019d28 <tcp_parseopt+0xe4>)
 8019cfa:	881a      	ldrh	r2, [r3, #0]
 8019cfc:	4b09      	ldr	r3, [pc, #36]	; (8019d24 <tcp_parseopt+0xe0>)
 8019cfe:	881b      	ldrh	r3, [r3, #0]
 8019d00:	429a      	cmp	r2, r3
 8019d02:	d3b5      	bcc.n	8019c70 <tcp_parseopt+0x2c>
 8019d04:	e004      	b.n	8019d10 <tcp_parseopt+0xcc>
          return;
 8019d06:	bf00      	nop
 8019d08:	e002      	b.n	8019d10 <tcp_parseopt+0xcc>
            return;
 8019d0a:	bf00      	nop
 8019d0c:	e000      	b.n	8019d10 <tcp_parseopt+0xcc>
            return;
 8019d0e:	bf00      	nop
      }
    }
  }
}
 8019d10:	3710      	adds	r7, #16
 8019d12:	46bd      	mov	sp, r7
 8019d14:	bd80      	pop	{r7, pc}
 8019d16:	bf00      	nop
 8019d18:	08025af0 	.word	0x08025af0
 8019d1c:	08025f74 	.word	0x08025f74
 8019d20:	08025b5c 	.word	0x08025b5c
 8019d24:	24040778 	.word	0x24040778
 8019d28:	24040780 	.word	0x24040780

08019d2c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8019d2c:	b480      	push	{r7}
 8019d2e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8019d30:	4b05      	ldr	r3, [pc, #20]	; (8019d48 <tcp_trigger_input_pcb_close+0x1c>)
 8019d32:	781b      	ldrb	r3, [r3, #0]
 8019d34:	f043 0310 	orr.w	r3, r3, #16
 8019d38:	b2da      	uxtb	r2, r3
 8019d3a:	4b03      	ldr	r3, [pc, #12]	; (8019d48 <tcp_trigger_input_pcb_close+0x1c>)
 8019d3c:	701a      	strb	r2, [r3, #0]
}
 8019d3e:	bf00      	nop
 8019d40:	46bd      	mov	sp, r7
 8019d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d46:	4770      	bx	lr
 8019d48:	24040791 	.word	0x24040791

08019d4c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8019d4c:	b580      	push	{r7, lr}
 8019d4e:	b084      	sub	sp, #16
 8019d50:	af00      	add	r7, sp, #0
 8019d52:	60f8      	str	r0, [r7, #12]
 8019d54:	60b9      	str	r1, [r7, #8]
 8019d56:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8019d58:	68fb      	ldr	r3, [r7, #12]
 8019d5a:	2b00      	cmp	r3, #0
 8019d5c:	d00a      	beq.n	8019d74 <tcp_route+0x28>
 8019d5e:	68fb      	ldr	r3, [r7, #12]
 8019d60:	7a1b      	ldrb	r3, [r3, #8]
 8019d62:	2b00      	cmp	r3, #0
 8019d64:	d006      	beq.n	8019d74 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8019d66:	68fb      	ldr	r3, [r7, #12]
 8019d68:	7a1b      	ldrb	r3, [r3, #8]
 8019d6a:	4618      	mov	r0, r3
 8019d6c:	f7f9 fdb4 	bl	80138d8 <netif_get_by_index>
 8019d70:	4603      	mov	r3, r0
 8019d72:	e003      	b.n	8019d7c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8019d74:	6878      	ldr	r0, [r7, #4]
 8019d76:	f7f7 fab7 	bl	80112e8 <ip4_route>
 8019d7a:	4603      	mov	r3, r0
  }
}
 8019d7c:	4618      	mov	r0, r3
 8019d7e:	3710      	adds	r7, #16
 8019d80:	46bd      	mov	sp, r7
 8019d82:	bd80      	pop	{r7, pc}

08019d84 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8019d84:	b590      	push	{r4, r7, lr}
 8019d86:	b087      	sub	sp, #28
 8019d88:	af00      	add	r7, sp, #0
 8019d8a:	60f8      	str	r0, [r7, #12]
 8019d8c:	60b9      	str	r1, [r7, #8]
 8019d8e:	603b      	str	r3, [r7, #0]
 8019d90:	4613      	mov	r3, r2
 8019d92:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8019d94:	68fb      	ldr	r3, [r7, #12]
 8019d96:	2b00      	cmp	r3, #0
 8019d98:	d105      	bne.n	8019da6 <tcp_create_segment+0x22>
 8019d9a:	4b44      	ldr	r3, [pc, #272]	; (8019eac <tcp_create_segment+0x128>)
 8019d9c:	22a3      	movs	r2, #163	; 0xa3
 8019d9e:	4944      	ldr	r1, [pc, #272]	; (8019eb0 <tcp_create_segment+0x12c>)
 8019da0:	4844      	ldr	r0, [pc, #272]	; (8019eb4 <tcp_create_segment+0x130>)
 8019da2:	f007 f8d5 	bl	8020f50 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8019da6:	68bb      	ldr	r3, [r7, #8]
 8019da8:	2b00      	cmp	r3, #0
 8019daa:	d105      	bne.n	8019db8 <tcp_create_segment+0x34>
 8019dac:	4b3f      	ldr	r3, [pc, #252]	; (8019eac <tcp_create_segment+0x128>)
 8019dae:	22a4      	movs	r2, #164	; 0xa4
 8019db0:	4941      	ldr	r1, [pc, #260]	; (8019eb8 <tcp_create_segment+0x134>)
 8019db2:	4840      	ldr	r0, [pc, #256]	; (8019eb4 <tcp_create_segment+0x130>)
 8019db4:	f007 f8cc 	bl	8020f50 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8019db8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8019dbc:	009b      	lsls	r3, r3, #2
 8019dbe:	b2db      	uxtb	r3, r3
 8019dc0:	f003 0304 	and.w	r3, r3, #4
 8019dc4:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8019dc6:	2003      	movs	r0, #3
 8019dc8:	f7f9 f968 	bl	801309c <memp_malloc>
 8019dcc:	6138      	str	r0, [r7, #16]
 8019dce:	693b      	ldr	r3, [r7, #16]
 8019dd0:	2b00      	cmp	r3, #0
 8019dd2:	d104      	bne.n	8019dde <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8019dd4:	68b8      	ldr	r0, [r7, #8]
 8019dd6:	f7fa f93b 	bl	8014050 <pbuf_free>
    return NULL;
 8019dda:	2300      	movs	r3, #0
 8019ddc:	e061      	b.n	8019ea2 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8019dde:	693b      	ldr	r3, [r7, #16]
 8019de0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8019de4:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8019de6:	693b      	ldr	r3, [r7, #16]
 8019de8:	2200      	movs	r2, #0
 8019dea:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8019dec:	693b      	ldr	r3, [r7, #16]
 8019dee:	68ba      	ldr	r2, [r7, #8]
 8019df0:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8019df2:	68bb      	ldr	r3, [r7, #8]
 8019df4:	891a      	ldrh	r2, [r3, #8]
 8019df6:	7dfb      	ldrb	r3, [r7, #23]
 8019df8:	b29b      	uxth	r3, r3
 8019dfa:	429a      	cmp	r2, r3
 8019dfc:	d205      	bcs.n	8019e0a <tcp_create_segment+0x86>
 8019dfe:	4b2b      	ldr	r3, [pc, #172]	; (8019eac <tcp_create_segment+0x128>)
 8019e00:	22b0      	movs	r2, #176	; 0xb0
 8019e02:	492e      	ldr	r1, [pc, #184]	; (8019ebc <tcp_create_segment+0x138>)
 8019e04:	482b      	ldr	r0, [pc, #172]	; (8019eb4 <tcp_create_segment+0x130>)
 8019e06:	f007 f8a3 	bl	8020f50 <iprintf>
  seg->len = p->tot_len - optlen;
 8019e0a:	68bb      	ldr	r3, [r7, #8]
 8019e0c:	891a      	ldrh	r2, [r3, #8]
 8019e0e:	7dfb      	ldrb	r3, [r7, #23]
 8019e10:	b29b      	uxth	r3, r3
 8019e12:	1ad3      	subs	r3, r2, r3
 8019e14:	b29a      	uxth	r2, r3
 8019e16:	693b      	ldr	r3, [r7, #16]
 8019e18:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8019e1a:	2114      	movs	r1, #20
 8019e1c:	68b8      	ldr	r0, [r7, #8]
 8019e1e:	f7fa f84f 	bl	8013ec0 <pbuf_add_header>
 8019e22:	4603      	mov	r3, r0
 8019e24:	2b00      	cmp	r3, #0
 8019e26:	d004      	beq.n	8019e32 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8019e28:	6938      	ldr	r0, [r7, #16]
 8019e2a:	f7fd f807 	bl	8016e3c <tcp_seg_free>
    return NULL;
 8019e2e:	2300      	movs	r3, #0
 8019e30:	e037      	b.n	8019ea2 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8019e32:	693b      	ldr	r3, [r7, #16]
 8019e34:	685b      	ldr	r3, [r3, #4]
 8019e36:	685a      	ldr	r2, [r3, #4]
 8019e38:	693b      	ldr	r3, [r7, #16]
 8019e3a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8019e3c:	68fb      	ldr	r3, [r7, #12]
 8019e3e:	8ada      	ldrh	r2, [r3, #22]
 8019e40:	693b      	ldr	r3, [r7, #16]
 8019e42:	68dc      	ldr	r4, [r3, #12]
 8019e44:	4610      	mov	r0, r2
 8019e46:	f7f5 ff59 	bl	800fcfc <lwip_htons>
 8019e4a:	4603      	mov	r3, r0
 8019e4c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8019e4e:	68fb      	ldr	r3, [r7, #12]
 8019e50:	8b1a      	ldrh	r2, [r3, #24]
 8019e52:	693b      	ldr	r3, [r7, #16]
 8019e54:	68dc      	ldr	r4, [r3, #12]
 8019e56:	4610      	mov	r0, r2
 8019e58:	f7f5 ff50 	bl	800fcfc <lwip_htons>
 8019e5c:	4603      	mov	r3, r0
 8019e5e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8019e60:	693b      	ldr	r3, [r7, #16]
 8019e62:	68dc      	ldr	r4, [r3, #12]
 8019e64:	6838      	ldr	r0, [r7, #0]
 8019e66:	f7f5 ff5e 	bl	800fd26 <lwip_htonl>
 8019e6a:	4603      	mov	r3, r0
 8019e6c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8019e6e:	7dfb      	ldrb	r3, [r7, #23]
 8019e70:	089b      	lsrs	r3, r3, #2
 8019e72:	b2db      	uxtb	r3, r3
 8019e74:	b29b      	uxth	r3, r3
 8019e76:	3305      	adds	r3, #5
 8019e78:	b29b      	uxth	r3, r3
 8019e7a:	031b      	lsls	r3, r3, #12
 8019e7c:	b29a      	uxth	r2, r3
 8019e7e:	79fb      	ldrb	r3, [r7, #7]
 8019e80:	b29b      	uxth	r3, r3
 8019e82:	4313      	orrs	r3, r2
 8019e84:	b29a      	uxth	r2, r3
 8019e86:	693b      	ldr	r3, [r7, #16]
 8019e88:	68dc      	ldr	r4, [r3, #12]
 8019e8a:	4610      	mov	r0, r2
 8019e8c:	f7f5 ff36 	bl	800fcfc <lwip_htons>
 8019e90:	4603      	mov	r3, r0
 8019e92:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8019e94:	693b      	ldr	r3, [r7, #16]
 8019e96:	68db      	ldr	r3, [r3, #12]
 8019e98:	2200      	movs	r2, #0
 8019e9a:	749a      	strb	r2, [r3, #18]
 8019e9c:	2200      	movs	r2, #0
 8019e9e:	74da      	strb	r2, [r3, #19]
  return seg;
 8019ea0:	693b      	ldr	r3, [r7, #16]
}
 8019ea2:	4618      	mov	r0, r3
 8019ea4:	371c      	adds	r7, #28
 8019ea6:	46bd      	mov	sp, r7
 8019ea8:	bd90      	pop	{r4, r7, pc}
 8019eaa:	bf00      	nop
 8019eac:	08025f90 	.word	0x08025f90
 8019eb0:	08025fe4 	.word	0x08025fe4
 8019eb4:	08026004 	.word	0x08026004
 8019eb8:	0802602c 	.word	0x0802602c
 8019ebc:	08026050 	.word	0x08026050

08019ec0 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8019ec0:	b580      	push	{r7, lr}
 8019ec2:	b086      	sub	sp, #24
 8019ec4:	af00      	add	r7, sp, #0
 8019ec6:	607b      	str	r3, [r7, #4]
 8019ec8:	4603      	mov	r3, r0
 8019eca:	73fb      	strb	r3, [r7, #15]
 8019ecc:	460b      	mov	r3, r1
 8019ece:	81bb      	strh	r3, [r7, #12]
 8019ed0:	4613      	mov	r3, r2
 8019ed2:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8019ed4:	89bb      	ldrh	r3, [r7, #12]
 8019ed6:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8019ed8:	687b      	ldr	r3, [r7, #4]
 8019eda:	2b00      	cmp	r3, #0
 8019edc:	d105      	bne.n	8019eea <tcp_pbuf_prealloc+0x2a>
 8019ede:	4b30      	ldr	r3, [pc, #192]	; (8019fa0 <tcp_pbuf_prealloc+0xe0>)
 8019ee0:	22e8      	movs	r2, #232	; 0xe8
 8019ee2:	4930      	ldr	r1, [pc, #192]	; (8019fa4 <tcp_pbuf_prealloc+0xe4>)
 8019ee4:	4830      	ldr	r0, [pc, #192]	; (8019fa8 <tcp_pbuf_prealloc+0xe8>)
 8019ee6:	f007 f833 	bl	8020f50 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8019eea:	6a3b      	ldr	r3, [r7, #32]
 8019eec:	2b00      	cmp	r3, #0
 8019eee:	d105      	bne.n	8019efc <tcp_pbuf_prealloc+0x3c>
 8019ef0:	4b2b      	ldr	r3, [pc, #172]	; (8019fa0 <tcp_pbuf_prealloc+0xe0>)
 8019ef2:	22e9      	movs	r2, #233	; 0xe9
 8019ef4:	492d      	ldr	r1, [pc, #180]	; (8019fac <tcp_pbuf_prealloc+0xec>)
 8019ef6:	482c      	ldr	r0, [pc, #176]	; (8019fa8 <tcp_pbuf_prealloc+0xe8>)
 8019ef8:	f007 f82a 	bl	8020f50 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8019efc:	89ba      	ldrh	r2, [r7, #12]
 8019efe:	897b      	ldrh	r3, [r7, #10]
 8019f00:	429a      	cmp	r2, r3
 8019f02:	d221      	bcs.n	8019f48 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8019f04:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8019f08:	f003 0302 	and.w	r3, r3, #2
 8019f0c:	2b00      	cmp	r3, #0
 8019f0e:	d111      	bne.n	8019f34 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8019f10:	6a3b      	ldr	r3, [r7, #32]
 8019f12:	8b5b      	ldrh	r3, [r3, #26]
 8019f14:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8019f18:	2b00      	cmp	r3, #0
 8019f1a:	d115      	bne.n	8019f48 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8019f1c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8019f20:	2b00      	cmp	r3, #0
 8019f22:	d007      	beq.n	8019f34 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8019f24:	6a3b      	ldr	r3, [r7, #32]
 8019f26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8019f28:	2b00      	cmp	r3, #0
 8019f2a:	d103      	bne.n	8019f34 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8019f2c:	6a3b      	ldr	r3, [r7, #32]
 8019f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8019f30:	2b00      	cmp	r3, #0
 8019f32:	d009      	beq.n	8019f48 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8019f34:	89bb      	ldrh	r3, [r7, #12]
 8019f36:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8019f3a:	f023 0203 	bic.w	r2, r3, #3
 8019f3e:	897b      	ldrh	r3, [r7, #10]
 8019f40:	4293      	cmp	r3, r2
 8019f42:	bf28      	it	cs
 8019f44:	4613      	movcs	r3, r2
 8019f46:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8019f48:	8af9      	ldrh	r1, [r7, #22]
 8019f4a:	7bfb      	ldrb	r3, [r7, #15]
 8019f4c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019f50:	4618      	mov	r0, r3
 8019f52:	f7f9 fd6b 	bl	8013a2c <pbuf_alloc>
 8019f56:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8019f58:	693b      	ldr	r3, [r7, #16]
 8019f5a:	2b00      	cmp	r3, #0
 8019f5c:	d101      	bne.n	8019f62 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8019f5e:	2300      	movs	r3, #0
 8019f60:	e019      	b.n	8019f96 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8019f62:	693b      	ldr	r3, [r7, #16]
 8019f64:	681b      	ldr	r3, [r3, #0]
 8019f66:	2b00      	cmp	r3, #0
 8019f68:	d006      	beq.n	8019f78 <tcp_pbuf_prealloc+0xb8>
 8019f6a:	4b0d      	ldr	r3, [pc, #52]	; (8019fa0 <tcp_pbuf_prealloc+0xe0>)
 8019f6c:	f240 120b 	movw	r2, #267	; 0x10b
 8019f70:	490f      	ldr	r1, [pc, #60]	; (8019fb0 <tcp_pbuf_prealloc+0xf0>)
 8019f72:	480d      	ldr	r0, [pc, #52]	; (8019fa8 <tcp_pbuf_prealloc+0xe8>)
 8019f74:	f006 ffec 	bl	8020f50 <iprintf>
  *oversize = p->len - length;
 8019f78:	693b      	ldr	r3, [r7, #16]
 8019f7a:	895a      	ldrh	r2, [r3, #10]
 8019f7c:	89bb      	ldrh	r3, [r7, #12]
 8019f7e:	1ad3      	subs	r3, r2, r3
 8019f80:	b29a      	uxth	r2, r3
 8019f82:	687b      	ldr	r3, [r7, #4]
 8019f84:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8019f86:	693b      	ldr	r3, [r7, #16]
 8019f88:	89ba      	ldrh	r2, [r7, #12]
 8019f8a:	811a      	strh	r2, [r3, #8]
 8019f8c:	693b      	ldr	r3, [r7, #16]
 8019f8e:	891a      	ldrh	r2, [r3, #8]
 8019f90:	693b      	ldr	r3, [r7, #16]
 8019f92:	815a      	strh	r2, [r3, #10]
  return p;
 8019f94:	693b      	ldr	r3, [r7, #16]
}
 8019f96:	4618      	mov	r0, r3
 8019f98:	3718      	adds	r7, #24
 8019f9a:	46bd      	mov	sp, r7
 8019f9c:	bd80      	pop	{r7, pc}
 8019f9e:	bf00      	nop
 8019fa0:	08025f90 	.word	0x08025f90
 8019fa4:	08026068 	.word	0x08026068
 8019fa8:	08026004 	.word	0x08026004
 8019fac:	0802608c 	.word	0x0802608c
 8019fb0:	080260ac 	.word	0x080260ac

08019fb4 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8019fb4:	b580      	push	{r7, lr}
 8019fb6:	b082      	sub	sp, #8
 8019fb8:	af00      	add	r7, sp, #0
 8019fba:	6078      	str	r0, [r7, #4]
 8019fbc:	460b      	mov	r3, r1
 8019fbe:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8019fc0:	687b      	ldr	r3, [r7, #4]
 8019fc2:	2b00      	cmp	r3, #0
 8019fc4:	d106      	bne.n	8019fd4 <tcp_write_checks+0x20>
 8019fc6:	4b33      	ldr	r3, [pc, #204]	; (801a094 <tcp_write_checks+0xe0>)
 8019fc8:	f240 1233 	movw	r2, #307	; 0x133
 8019fcc:	4932      	ldr	r1, [pc, #200]	; (801a098 <tcp_write_checks+0xe4>)
 8019fce:	4833      	ldr	r0, [pc, #204]	; (801a09c <tcp_write_checks+0xe8>)
 8019fd0:	f006 ffbe 	bl	8020f50 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8019fd4:	687b      	ldr	r3, [r7, #4]
 8019fd6:	7d1b      	ldrb	r3, [r3, #20]
 8019fd8:	2b04      	cmp	r3, #4
 8019fda:	d00e      	beq.n	8019ffa <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8019fdc:	687b      	ldr	r3, [r7, #4]
 8019fde:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8019fe0:	2b07      	cmp	r3, #7
 8019fe2:	d00a      	beq.n	8019ffa <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8019fe4:	687b      	ldr	r3, [r7, #4]
 8019fe6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8019fe8:	2b02      	cmp	r3, #2
 8019fea:	d006      	beq.n	8019ffa <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8019fec:	687b      	ldr	r3, [r7, #4]
 8019fee:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8019ff0:	2b03      	cmp	r3, #3
 8019ff2:	d002      	beq.n	8019ffa <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8019ff4:	f06f 030a 	mvn.w	r3, #10
 8019ff8:	e048      	b.n	801a08c <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8019ffa:	887b      	ldrh	r3, [r7, #2]
 8019ffc:	2b00      	cmp	r3, #0
 8019ffe:	d101      	bne.n	801a004 <tcp_write_checks+0x50>
    return ERR_OK;
 801a000:	2300      	movs	r3, #0
 801a002:	e043      	b.n	801a08c <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 801a004:	687b      	ldr	r3, [r7, #4]
 801a006:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801a00a:	887a      	ldrh	r2, [r7, #2]
 801a00c:	429a      	cmp	r2, r3
 801a00e:	d909      	bls.n	801a024 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a010:	687b      	ldr	r3, [r7, #4]
 801a012:	8b5b      	ldrh	r3, [r3, #26]
 801a014:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a018:	b29a      	uxth	r2, r3
 801a01a:	687b      	ldr	r3, [r7, #4]
 801a01c:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801a01e:	f04f 33ff 	mov.w	r3, #4294967295
 801a022:	e033      	b.n	801a08c <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 801a024:	687b      	ldr	r3, [r7, #4]
 801a026:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801a02a:	2b08      	cmp	r3, #8
 801a02c:	d909      	bls.n	801a042 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a02e:	687b      	ldr	r3, [r7, #4]
 801a030:	8b5b      	ldrh	r3, [r3, #26]
 801a032:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a036:	b29a      	uxth	r2, r3
 801a038:	687b      	ldr	r3, [r7, #4]
 801a03a:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801a03c:	f04f 33ff 	mov.w	r3, #4294967295
 801a040:	e024      	b.n	801a08c <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 801a042:	687b      	ldr	r3, [r7, #4]
 801a044:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801a048:	2b00      	cmp	r3, #0
 801a04a:	d00f      	beq.n	801a06c <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801a04c:	687b      	ldr	r3, [r7, #4]
 801a04e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a050:	2b00      	cmp	r3, #0
 801a052:	d11a      	bne.n	801a08a <tcp_write_checks+0xd6>
 801a054:	687b      	ldr	r3, [r7, #4]
 801a056:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a058:	2b00      	cmp	r3, #0
 801a05a:	d116      	bne.n	801a08a <tcp_write_checks+0xd6>
 801a05c:	4b0d      	ldr	r3, [pc, #52]	; (801a094 <tcp_write_checks+0xe0>)
 801a05e:	f44f 72ab 	mov.w	r2, #342	; 0x156
 801a062:	490f      	ldr	r1, [pc, #60]	; (801a0a0 <tcp_write_checks+0xec>)
 801a064:	480d      	ldr	r0, [pc, #52]	; (801a09c <tcp_write_checks+0xe8>)
 801a066:	f006 ff73 	bl	8020f50 <iprintf>
 801a06a:	e00e      	b.n	801a08a <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801a06c:	687b      	ldr	r3, [r7, #4]
 801a06e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a070:	2b00      	cmp	r3, #0
 801a072:	d103      	bne.n	801a07c <tcp_write_checks+0xc8>
 801a074:	687b      	ldr	r3, [r7, #4]
 801a076:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a078:	2b00      	cmp	r3, #0
 801a07a:	d006      	beq.n	801a08a <tcp_write_checks+0xd6>
 801a07c:	4b05      	ldr	r3, [pc, #20]	; (801a094 <tcp_write_checks+0xe0>)
 801a07e:	f240 1259 	movw	r2, #345	; 0x159
 801a082:	4908      	ldr	r1, [pc, #32]	; (801a0a4 <tcp_write_checks+0xf0>)
 801a084:	4805      	ldr	r0, [pc, #20]	; (801a09c <tcp_write_checks+0xe8>)
 801a086:	f006 ff63 	bl	8020f50 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801a08a:	2300      	movs	r3, #0
}
 801a08c:	4618      	mov	r0, r3
 801a08e:	3708      	adds	r7, #8
 801a090:	46bd      	mov	sp, r7
 801a092:	bd80      	pop	{r7, pc}
 801a094:	08025f90 	.word	0x08025f90
 801a098:	080260c0 	.word	0x080260c0
 801a09c:	08026004 	.word	0x08026004
 801a0a0:	080260e0 	.word	0x080260e0
 801a0a4:	0802611c 	.word	0x0802611c

0801a0a8 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 801a0a8:	b590      	push	{r4, r7, lr}
 801a0aa:	b09b      	sub	sp, #108	; 0x6c
 801a0ac:	af04      	add	r7, sp, #16
 801a0ae:	60f8      	str	r0, [r7, #12]
 801a0b0:	60b9      	str	r1, [r7, #8]
 801a0b2:	4611      	mov	r1, r2
 801a0b4:	461a      	mov	r2, r3
 801a0b6:	460b      	mov	r3, r1
 801a0b8:	80fb      	strh	r3, [r7, #6]
 801a0ba:	4613      	mov	r3, r2
 801a0bc:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801a0be:	2300      	movs	r3, #0
 801a0c0:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801a0c2:	2300      	movs	r3, #0
 801a0c4:	653b      	str	r3, [r7, #80]	; 0x50
 801a0c6:	2300      	movs	r3, #0
 801a0c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 801a0ca:	2300      	movs	r3, #0
 801a0cc:	64bb      	str	r3, [r7, #72]	; 0x48
 801a0ce:	2300      	movs	r3, #0
 801a0d0:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 801a0d2:	2300      	movs	r3, #0
 801a0d4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 801a0d8:	2300      	movs	r3, #0
 801a0da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801a0de:	2300      	movs	r3, #0
 801a0e0:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 801a0e2:	2300      	movs	r3, #0
 801a0e4:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 801a0e6:	2300      	movs	r3, #0
 801a0e8:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801a0ea:	68fb      	ldr	r3, [r7, #12]
 801a0ec:	2b00      	cmp	r3, #0
 801a0ee:	d109      	bne.n	801a104 <tcp_write+0x5c>
 801a0f0:	4ba5      	ldr	r3, [pc, #660]	; (801a388 <tcp_write+0x2e0>)
 801a0f2:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 801a0f6:	49a5      	ldr	r1, [pc, #660]	; (801a38c <tcp_write+0x2e4>)
 801a0f8:	48a5      	ldr	r0, [pc, #660]	; (801a390 <tcp_write+0x2e8>)
 801a0fa:	f006 ff29 	bl	8020f50 <iprintf>
 801a0fe:	f06f 030f 	mvn.w	r3, #15
 801a102:	e32c      	b.n	801a75e <tcp_write+0x6b6>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 801a104:	68fb      	ldr	r3, [r7, #12]
 801a106:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801a10a:	085b      	lsrs	r3, r3, #1
 801a10c:	b29a      	uxth	r2, r3
 801a10e:	68fb      	ldr	r3, [r7, #12]
 801a110:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a112:	4293      	cmp	r3, r2
 801a114:	bf28      	it	cs
 801a116:	4613      	movcs	r3, r2
 801a118:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801a11a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a11c:	2b00      	cmp	r3, #0
 801a11e:	d102      	bne.n	801a126 <tcp_write+0x7e>
 801a120:	68fb      	ldr	r3, [r7, #12]
 801a122:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a124:	e000      	b.n	801a128 <tcp_write+0x80>
 801a126:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a128:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801a12a:	68bb      	ldr	r3, [r7, #8]
 801a12c:	2b00      	cmp	r3, #0
 801a12e:	d109      	bne.n	801a144 <tcp_write+0x9c>
 801a130:	4b95      	ldr	r3, [pc, #596]	; (801a388 <tcp_write+0x2e0>)
 801a132:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 801a136:	4997      	ldr	r1, [pc, #604]	; (801a394 <tcp_write+0x2ec>)
 801a138:	4895      	ldr	r0, [pc, #596]	; (801a390 <tcp_write+0x2e8>)
 801a13a:	f006 ff09 	bl	8020f50 <iprintf>
 801a13e:	f06f 030f 	mvn.w	r3, #15
 801a142:	e30c      	b.n	801a75e <tcp_write+0x6b6>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 801a144:	88fb      	ldrh	r3, [r7, #6]
 801a146:	4619      	mov	r1, r3
 801a148:	68f8      	ldr	r0, [r7, #12]
 801a14a:	f7ff ff33 	bl	8019fb4 <tcp_write_checks>
 801a14e:	4603      	mov	r3, r0
 801a150:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 801a154:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801a158:	2b00      	cmp	r3, #0
 801a15a:	d002      	beq.n	801a162 <tcp_write+0xba>
    return err;
 801a15c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801a160:	e2fd      	b.n	801a75e <tcp_write+0x6b6>
  }
  queuelen = pcb->snd_queuelen;
 801a162:	68fb      	ldr	r3, [r7, #12]
 801a164:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801a168:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801a16c:	2300      	movs	r3, #0
 801a16e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 801a172:	68fb      	ldr	r3, [r7, #12]
 801a174:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a176:	2b00      	cmp	r3, #0
 801a178:	f000 80f7 	beq.w	801a36a <tcp_write+0x2c2>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801a17c:	68fb      	ldr	r3, [r7, #12]
 801a17e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a180:	653b      	str	r3, [r7, #80]	; 0x50
 801a182:	e002      	b.n	801a18a <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 801a184:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a186:	681b      	ldr	r3, [r3, #0]
 801a188:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801a18a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a18c:	681b      	ldr	r3, [r3, #0]
 801a18e:	2b00      	cmp	r3, #0
 801a190:	d1f8      	bne.n	801a184 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801a192:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a194:	7a9b      	ldrb	r3, [r3, #10]
 801a196:	009b      	lsls	r3, r3, #2
 801a198:	b29b      	uxth	r3, r3
 801a19a:	f003 0304 	and.w	r3, r3, #4
 801a19e:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801a1a0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801a1a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a1a4:	891b      	ldrh	r3, [r3, #8]
 801a1a6:	4619      	mov	r1, r3
 801a1a8:	8c3b      	ldrh	r3, [r7, #32]
 801a1aa:	440b      	add	r3, r1
 801a1ac:	429a      	cmp	r2, r3
 801a1ae:	da06      	bge.n	801a1be <tcp_write+0x116>
 801a1b0:	4b75      	ldr	r3, [pc, #468]	; (801a388 <tcp_write+0x2e0>)
 801a1b2:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801a1b6:	4978      	ldr	r1, [pc, #480]	; (801a398 <tcp_write+0x2f0>)
 801a1b8:	4875      	ldr	r0, [pc, #468]	; (801a390 <tcp_write+0x2e8>)
 801a1ba:	f006 fec9 	bl	8020f50 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801a1be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a1c0:	891a      	ldrh	r2, [r3, #8]
 801a1c2:	8c3b      	ldrh	r3, [r7, #32]
 801a1c4:	4413      	add	r3, r2
 801a1c6:	b29b      	uxth	r3, r3
 801a1c8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801a1ca:	1ad3      	subs	r3, r2, r3
 801a1cc:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801a1ce:	68fb      	ldr	r3, [r7, #12]
 801a1d0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801a1d4:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 801a1d6:	8a7b      	ldrh	r3, [r7, #18]
 801a1d8:	2b00      	cmp	r3, #0
 801a1da:	d027      	beq.n	801a22c <tcp_write+0x184>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801a1dc:	8a7b      	ldrh	r3, [r7, #18]
 801a1de:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801a1e0:	429a      	cmp	r2, r3
 801a1e2:	d206      	bcs.n	801a1f2 <tcp_write+0x14a>
 801a1e4:	4b68      	ldr	r3, [pc, #416]	; (801a388 <tcp_write+0x2e0>)
 801a1e6:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801a1ea:	496c      	ldr	r1, [pc, #432]	; (801a39c <tcp_write+0x2f4>)
 801a1ec:	4868      	ldr	r0, [pc, #416]	; (801a390 <tcp_write+0x2e8>)
 801a1ee:	f006 feaf 	bl	8020f50 <iprintf>
      seg = last_unsent;
 801a1f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a1f4:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801a1f6:	8a7b      	ldrh	r3, [r7, #18]
 801a1f8:	88fa      	ldrh	r2, [r7, #6]
 801a1fa:	429a      	cmp	r2, r3
 801a1fc:	d901      	bls.n	801a202 <tcp_write+0x15a>
 801a1fe:	8a7b      	ldrh	r3, [r7, #18]
 801a200:	e000      	b.n	801a204 <tcp_write+0x15c>
 801a202:	88fb      	ldrh	r3, [r7, #6]
 801a204:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801a206:	4293      	cmp	r3, r2
 801a208:	bfa8      	it	ge
 801a20a:	4613      	movge	r3, r2
 801a20c:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 801a20e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801a212:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801a214:	4413      	add	r3, r2
 801a216:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 801a21a:	8a7a      	ldrh	r2, [r7, #18]
 801a21c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801a21e:	1ad3      	subs	r3, r2, r3
 801a220:	b29b      	uxth	r3, r3
 801a222:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 801a224:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801a226:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801a228:	1ad3      	subs	r3, r2, r3
 801a22a:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801a22c:	8a7b      	ldrh	r3, [r7, #18]
 801a22e:	2b00      	cmp	r3, #0
 801a230:	d00b      	beq.n	801a24a <tcp_write+0x1a2>
 801a232:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801a236:	88fb      	ldrh	r3, [r7, #6]
 801a238:	429a      	cmp	r2, r3
 801a23a:	d006      	beq.n	801a24a <tcp_write+0x1a2>
 801a23c:	4b52      	ldr	r3, [pc, #328]	; (801a388 <tcp_write+0x2e0>)
 801a23e:	f44f 7200 	mov.w	r2, #512	; 0x200
 801a242:	4957      	ldr	r1, [pc, #348]	; (801a3a0 <tcp_write+0x2f8>)
 801a244:	4852      	ldr	r0, [pc, #328]	; (801a390 <tcp_write+0x2e8>)
 801a246:	f006 fe83 	bl	8020f50 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801a24a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801a24e:	88fb      	ldrh	r3, [r7, #6]
 801a250:	429a      	cmp	r2, r3
 801a252:	f080 8168 	bcs.w	801a526 <tcp_write+0x47e>
 801a256:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801a258:	2b00      	cmp	r3, #0
 801a25a:	f000 8164 	beq.w	801a526 <tcp_write+0x47e>
 801a25e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a260:	891b      	ldrh	r3, [r3, #8]
 801a262:	2b00      	cmp	r3, #0
 801a264:	f000 815f 	beq.w	801a526 <tcp_write+0x47e>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801a268:	88fa      	ldrh	r2, [r7, #6]
 801a26a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a26e:	1ad2      	subs	r2, r2, r3
 801a270:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801a272:	4293      	cmp	r3, r2
 801a274:	bfa8      	it	ge
 801a276:	4613      	movge	r3, r2
 801a278:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 801a27a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a27c:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801a27e:	797b      	ldrb	r3, [r7, #5]
 801a280:	f003 0301 	and.w	r3, r3, #1
 801a284:	2b00      	cmp	r3, #0
 801a286:	d027      	beq.n	801a2d8 <tcp_write+0x230>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801a288:	f107 0012 	add.w	r0, r7, #18
 801a28c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801a28e:	8bf9      	ldrh	r1, [r7, #30]
 801a290:	2301      	movs	r3, #1
 801a292:	9302      	str	r3, [sp, #8]
 801a294:	797b      	ldrb	r3, [r7, #5]
 801a296:	9301      	str	r3, [sp, #4]
 801a298:	68fb      	ldr	r3, [r7, #12]
 801a29a:	9300      	str	r3, [sp, #0]
 801a29c:	4603      	mov	r3, r0
 801a29e:	2000      	movs	r0, #0
 801a2a0:	f7ff fe0e 	bl	8019ec0 <tcp_pbuf_prealloc>
 801a2a4:	6578      	str	r0, [r7, #84]	; 0x54
 801a2a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a2a8:	2b00      	cmp	r3, #0
 801a2aa:	f000 8226 	beq.w	801a6fa <tcp_write+0x652>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801a2ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a2b0:	6858      	ldr	r0, [r3, #4]
 801a2b2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a2b6:	68ba      	ldr	r2, [r7, #8]
 801a2b8:	4413      	add	r3, r2
 801a2ba:	8bfa      	ldrh	r2, [r7, #30]
 801a2bc:	4619      	mov	r1, r3
 801a2be:	f006 f9e2 	bl	8020686 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 801a2c2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801a2c4:	f7f9 ff52 	bl	801416c <pbuf_clen>
 801a2c8:	4603      	mov	r3, r0
 801a2ca:	461a      	mov	r2, r3
 801a2cc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801a2d0:	4413      	add	r3, r2
 801a2d2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 801a2d6:	e041      	b.n	801a35c <tcp_write+0x2b4>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801a2d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a2da:	685b      	ldr	r3, [r3, #4]
 801a2dc:	637b      	str	r3, [r7, #52]	; 0x34
 801a2de:	e002      	b.n	801a2e6 <tcp_write+0x23e>
 801a2e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a2e2:	681b      	ldr	r3, [r3, #0]
 801a2e4:	637b      	str	r3, [r7, #52]	; 0x34
 801a2e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a2e8:	681b      	ldr	r3, [r3, #0]
 801a2ea:	2b00      	cmp	r3, #0
 801a2ec:	d1f8      	bne.n	801a2e0 <tcp_write+0x238>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801a2ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a2f0:	7b1b      	ldrb	r3, [r3, #12]
 801a2f2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801a2f6:	2b00      	cmp	r3, #0
 801a2f8:	d115      	bne.n	801a326 <tcp_write+0x27e>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801a2fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a2fc:	685b      	ldr	r3, [r3, #4]
 801a2fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801a300:	8952      	ldrh	r2, [r2, #10]
 801a302:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801a304:	68ba      	ldr	r2, [r7, #8]
 801a306:	429a      	cmp	r2, r3
 801a308:	d10d      	bne.n	801a326 <tcp_write+0x27e>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801a30a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a30e:	2b00      	cmp	r3, #0
 801a310:	d006      	beq.n	801a320 <tcp_write+0x278>
 801a312:	4b1d      	ldr	r3, [pc, #116]	; (801a388 <tcp_write+0x2e0>)
 801a314:	f240 2231 	movw	r2, #561	; 0x231
 801a318:	4922      	ldr	r1, [pc, #136]	; (801a3a4 <tcp_write+0x2fc>)
 801a31a:	481d      	ldr	r0, [pc, #116]	; (801a390 <tcp_write+0x2e8>)
 801a31c:	f006 fe18 	bl	8020f50 <iprintf>
          extendlen = seglen;
 801a320:	8bfb      	ldrh	r3, [r7, #30]
 801a322:	87bb      	strh	r3, [r7, #60]	; 0x3c
 801a324:	e01a      	b.n	801a35c <tcp_write+0x2b4>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801a326:	8bfb      	ldrh	r3, [r7, #30]
 801a328:	2201      	movs	r2, #1
 801a32a:	4619      	mov	r1, r3
 801a32c:	2000      	movs	r0, #0
 801a32e:	f7f9 fb7d 	bl	8013a2c <pbuf_alloc>
 801a332:	6578      	str	r0, [r7, #84]	; 0x54
 801a334:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a336:	2b00      	cmp	r3, #0
 801a338:	f000 81e1 	beq.w	801a6fe <tcp_write+0x656>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801a33c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a340:	68ba      	ldr	r2, [r7, #8]
 801a342:	441a      	add	r2, r3
 801a344:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a346:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801a348:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801a34a:	f7f9 ff0f 	bl	801416c <pbuf_clen>
 801a34e:	4603      	mov	r3, r0
 801a350:	461a      	mov	r2, r3
 801a352:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801a356:	4413      	add	r3, r2
 801a358:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801a35c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801a360:	8bfb      	ldrh	r3, [r7, #30]
 801a362:	4413      	add	r3, r2
 801a364:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 801a368:	e0dd      	b.n	801a526 <tcp_write+0x47e>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801a36a:	68fb      	ldr	r3, [r7, #12]
 801a36c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801a370:	2b00      	cmp	r3, #0
 801a372:	f000 80d8 	beq.w	801a526 <tcp_write+0x47e>
 801a376:	4b04      	ldr	r3, [pc, #16]	; (801a388 <tcp_write+0x2e0>)
 801a378:	f240 224b 	movw	r2, #587	; 0x24b
 801a37c:	490a      	ldr	r1, [pc, #40]	; (801a3a8 <tcp_write+0x300>)
 801a37e:	4804      	ldr	r0, [pc, #16]	; (801a390 <tcp_write+0x2e8>)
 801a380:	f006 fde6 	bl	8020f50 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801a384:	e0cf      	b.n	801a526 <tcp_write+0x47e>
 801a386:	bf00      	nop
 801a388:	08025f90 	.word	0x08025f90
 801a38c:	08026150 	.word	0x08026150
 801a390:	08026004 	.word	0x08026004
 801a394:	08026168 	.word	0x08026168
 801a398:	0802619c 	.word	0x0802619c
 801a39c:	080261b4 	.word	0x080261b4
 801a3a0:	080261d4 	.word	0x080261d4
 801a3a4:	080261f4 	.word	0x080261f4
 801a3a8:	08026220 	.word	0x08026220
    struct pbuf *p;
    u16_t left = len - pos;
 801a3ac:	88fa      	ldrh	r2, [r7, #6]
 801a3ae:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a3b2:	1ad3      	subs	r3, r2, r3
 801a3b4:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801a3b6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801a3ba:	b29b      	uxth	r3, r3
 801a3bc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801a3be:	1ad3      	subs	r3, r2, r3
 801a3c0:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801a3c2:	8b7a      	ldrh	r2, [r7, #26]
 801a3c4:	8bbb      	ldrh	r3, [r7, #28]
 801a3c6:	4293      	cmp	r3, r2
 801a3c8:	bf28      	it	cs
 801a3ca:	4613      	movcs	r3, r2
 801a3cc:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801a3ce:	797b      	ldrb	r3, [r7, #5]
 801a3d0:	f003 0301 	and.w	r3, r3, #1
 801a3d4:	2b00      	cmp	r3, #0
 801a3d6:	d036      	beq.n	801a446 <tcp_write+0x39e>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801a3d8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801a3dc:	b29a      	uxth	r2, r3
 801a3de:	8b3b      	ldrh	r3, [r7, #24]
 801a3e0:	4413      	add	r3, r2
 801a3e2:	b299      	uxth	r1, r3
 801a3e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a3e6:	2b00      	cmp	r3, #0
 801a3e8:	bf0c      	ite	eq
 801a3ea:	2301      	moveq	r3, #1
 801a3ec:	2300      	movne	r3, #0
 801a3ee:	b2db      	uxtb	r3, r3
 801a3f0:	f107 0012 	add.w	r0, r7, #18
 801a3f4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801a3f6:	9302      	str	r3, [sp, #8]
 801a3f8:	797b      	ldrb	r3, [r7, #5]
 801a3fa:	9301      	str	r3, [sp, #4]
 801a3fc:	68fb      	ldr	r3, [r7, #12]
 801a3fe:	9300      	str	r3, [sp, #0]
 801a400:	4603      	mov	r3, r0
 801a402:	2036      	movs	r0, #54	; 0x36
 801a404:	f7ff fd5c 	bl	8019ec0 <tcp_pbuf_prealloc>
 801a408:	6338      	str	r0, [r7, #48]	; 0x30
 801a40a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a40c:	2b00      	cmp	r3, #0
 801a40e:	f000 8178 	beq.w	801a702 <tcp_write+0x65a>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801a412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a414:	895b      	ldrh	r3, [r3, #10]
 801a416:	8b3a      	ldrh	r2, [r7, #24]
 801a418:	429a      	cmp	r2, r3
 801a41a:	d906      	bls.n	801a42a <tcp_write+0x382>
 801a41c:	4b8c      	ldr	r3, [pc, #560]	; (801a650 <tcp_write+0x5a8>)
 801a41e:	f240 2267 	movw	r2, #615	; 0x267
 801a422:	498c      	ldr	r1, [pc, #560]	; (801a654 <tcp_write+0x5ac>)
 801a424:	488c      	ldr	r0, [pc, #560]	; (801a658 <tcp_write+0x5b0>)
 801a426:	f006 fd93 	bl	8020f50 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801a42a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a42c:	685a      	ldr	r2, [r3, #4]
 801a42e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801a432:	18d0      	adds	r0, r2, r3
 801a434:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a438:	68ba      	ldr	r2, [r7, #8]
 801a43a:	4413      	add	r3, r2
 801a43c:	8b3a      	ldrh	r2, [r7, #24]
 801a43e:	4619      	mov	r1, r3
 801a440:	f006 f921 	bl	8020686 <memcpy>
 801a444:	e02f      	b.n	801a4a6 <tcp_write+0x3fe>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801a446:	8a7b      	ldrh	r3, [r7, #18]
 801a448:	2b00      	cmp	r3, #0
 801a44a:	d006      	beq.n	801a45a <tcp_write+0x3b2>
 801a44c:	4b80      	ldr	r3, [pc, #512]	; (801a650 <tcp_write+0x5a8>)
 801a44e:	f240 2271 	movw	r2, #625	; 0x271
 801a452:	4982      	ldr	r1, [pc, #520]	; (801a65c <tcp_write+0x5b4>)
 801a454:	4880      	ldr	r0, [pc, #512]	; (801a658 <tcp_write+0x5b0>)
 801a456:	f006 fd7b 	bl	8020f50 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801a45a:	8b3b      	ldrh	r3, [r7, #24]
 801a45c:	2201      	movs	r2, #1
 801a45e:	4619      	mov	r1, r3
 801a460:	2036      	movs	r0, #54	; 0x36
 801a462:	f7f9 fae3 	bl	8013a2c <pbuf_alloc>
 801a466:	6178      	str	r0, [r7, #20]
 801a468:	697b      	ldr	r3, [r7, #20]
 801a46a:	2b00      	cmp	r3, #0
 801a46c:	f000 814b 	beq.w	801a706 <tcp_write+0x65e>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801a470:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a474:	68ba      	ldr	r2, [r7, #8]
 801a476:	441a      	add	r2, r3
 801a478:	697b      	ldr	r3, [r7, #20]
 801a47a:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801a47c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801a480:	b29b      	uxth	r3, r3
 801a482:	f44f 7220 	mov.w	r2, #640	; 0x280
 801a486:	4619      	mov	r1, r3
 801a488:	2036      	movs	r0, #54	; 0x36
 801a48a:	f7f9 facf 	bl	8013a2c <pbuf_alloc>
 801a48e:	6338      	str	r0, [r7, #48]	; 0x30
 801a490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a492:	2b00      	cmp	r3, #0
 801a494:	d103      	bne.n	801a49e <tcp_write+0x3f6>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801a496:	6978      	ldr	r0, [r7, #20]
 801a498:	f7f9 fdda 	bl	8014050 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 801a49c:	e136      	b.n	801a70c <tcp_write+0x664>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801a49e:	6979      	ldr	r1, [r7, #20]
 801a4a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a4a2:	f7f9 fea3 	bl	80141ec <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801a4a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a4a8:	f7f9 fe60 	bl	801416c <pbuf_clen>
 801a4ac:	4603      	mov	r3, r0
 801a4ae:	461a      	mov	r2, r3
 801a4b0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801a4b4:	4413      	add	r3, r2
 801a4b6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801a4ba:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801a4be:	2b09      	cmp	r3, #9
 801a4c0:	d903      	bls.n	801a4ca <tcp_write+0x422>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801a4c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a4c4:	f7f9 fdc4 	bl	8014050 <pbuf_free>
      goto memerr;
 801a4c8:	e120      	b.n	801a70c <tcp_write+0x664>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801a4ca:	68fb      	ldr	r3, [r7, #12]
 801a4cc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801a4ce:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a4d2:	441a      	add	r2, r3
 801a4d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a4d8:	9300      	str	r3, [sp, #0]
 801a4da:	4613      	mov	r3, r2
 801a4dc:	2200      	movs	r2, #0
 801a4de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801a4e0:	68f8      	ldr	r0, [r7, #12]
 801a4e2:	f7ff fc4f 	bl	8019d84 <tcp_create_segment>
 801a4e6:	64f8      	str	r0, [r7, #76]	; 0x4c
 801a4e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a4ea:	2b00      	cmp	r3, #0
 801a4ec:	f000 810d 	beq.w	801a70a <tcp_write+0x662>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801a4f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a4f2:	2b00      	cmp	r3, #0
 801a4f4:	d102      	bne.n	801a4fc <tcp_write+0x454>
      queue = seg;
 801a4f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a4f8:	647b      	str	r3, [r7, #68]	; 0x44
 801a4fa:	e00c      	b.n	801a516 <tcp_write+0x46e>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801a4fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a4fe:	2b00      	cmp	r3, #0
 801a500:	d106      	bne.n	801a510 <tcp_write+0x468>
 801a502:	4b53      	ldr	r3, [pc, #332]	; (801a650 <tcp_write+0x5a8>)
 801a504:	f240 22ab 	movw	r2, #683	; 0x2ab
 801a508:	4955      	ldr	r1, [pc, #340]	; (801a660 <tcp_write+0x5b8>)
 801a50a:	4853      	ldr	r0, [pc, #332]	; (801a658 <tcp_write+0x5b0>)
 801a50c:	f006 fd20 	bl	8020f50 <iprintf>
      prev_seg->next = seg;
 801a510:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a512:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801a514:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801a516:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a518:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801a51a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801a51e:	8b3b      	ldrh	r3, [r7, #24]
 801a520:	4413      	add	r3, r2
 801a522:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 801a526:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801a52a:	88fb      	ldrh	r3, [r7, #6]
 801a52c:	429a      	cmp	r2, r3
 801a52e:	f4ff af3d 	bcc.w	801a3ac <tcp_write+0x304>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801a532:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801a534:	2b00      	cmp	r3, #0
 801a536:	d02c      	beq.n	801a592 <tcp_write+0x4ea>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 801a538:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a53a:	685b      	ldr	r3, [r3, #4]
 801a53c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a53e:	e01e      	b.n	801a57e <tcp_write+0x4d6>
      p->tot_len += oversize_used;
 801a540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a542:	891a      	ldrh	r2, [r3, #8]
 801a544:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801a546:	4413      	add	r3, r2
 801a548:	b29a      	uxth	r2, r3
 801a54a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a54c:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801a54e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a550:	681b      	ldr	r3, [r3, #0]
 801a552:	2b00      	cmp	r3, #0
 801a554:	d110      	bne.n	801a578 <tcp_write+0x4d0>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801a556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a558:	685b      	ldr	r3, [r3, #4]
 801a55a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a55c:	8952      	ldrh	r2, [r2, #10]
 801a55e:	4413      	add	r3, r2
 801a560:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801a562:	68b9      	ldr	r1, [r7, #8]
 801a564:	4618      	mov	r0, r3
 801a566:	f006 f88e 	bl	8020686 <memcpy>
        p->len += oversize_used;
 801a56a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a56c:	895a      	ldrh	r2, [r3, #10]
 801a56e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801a570:	4413      	add	r3, r2
 801a572:	b29a      	uxth	r2, r3
 801a574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a576:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801a578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a57a:	681b      	ldr	r3, [r3, #0]
 801a57c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a57e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a580:	2b00      	cmp	r3, #0
 801a582:	d1dd      	bne.n	801a540 <tcp_write+0x498>
      }
    }
    last_unsent->len += oversize_used;
 801a584:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a586:	891a      	ldrh	r2, [r3, #8]
 801a588:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801a58a:	4413      	add	r3, r2
 801a58c:	b29a      	uxth	r2, r3
 801a58e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a590:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801a592:	8a7a      	ldrh	r2, [r7, #18]
 801a594:	68fb      	ldr	r3, [r7, #12]
 801a596:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801a59a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a59c:	2b00      	cmp	r3, #0
 801a59e:	d018      	beq.n	801a5d2 <tcp_write+0x52a>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801a5a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a5a2:	2b00      	cmp	r3, #0
 801a5a4:	d106      	bne.n	801a5b4 <tcp_write+0x50c>
 801a5a6:	4b2a      	ldr	r3, [pc, #168]	; (801a650 <tcp_write+0x5a8>)
 801a5a8:	f240 22e1 	movw	r2, #737	; 0x2e1
 801a5ac:	492d      	ldr	r1, [pc, #180]	; (801a664 <tcp_write+0x5bc>)
 801a5ae:	482a      	ldr	r0, [pc, #168]	; (801a658 <tcp_write+0x5b0>)
 801a5b0:	f006 fcce 	bl	8020f50 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 801a5b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a5b6:	685b      	ldr	r3, [r3, #4]
 801a5b8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801a5ba:	4618      	mov	r0, r3
 801a5bc:	f7f9 fe16 	bl	80141ec <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801a5c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a5c2:	891a      	ldrh	r2, [r3, #8]
 801a5c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a5c6:	891b      	ldrh	r3, [r3, #8]
 801a5c8:	4413      	add	r3, r2
 801a5ca:	b29a      	uxth	r2, r3
 801a5cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a5ce:	811a      	strh	r2, [r3, #8]
 801a5d0:	e037      	b.n	801a642 <tcp_write+0x59a>
  } else if (extendlen > 0) {
 801a5d2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a5d4:	2b00      	cmp	r3, #0
 801a5d6:	d034      	beq.n	801a642 <tcp_write+0x59a>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801a5d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a5da:	2b00      	cmp	r3, #0
 801a5dc:	d003      	beq.n	801a5e6 <tcp_write+0x53e>
 801a5de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a5e0:	685b      	ldr	r3, [r3, #4]
 801a5e2:	2b00      	cmp	r3, #0
 801a5e4:	d106      	bne.n	801a5f4 <tcp_write+0x54c>
 801a5e6:	4b1a      	ldr	r3, [pc, #104]	; (801a650 <tcp_write+0x5a8>)
 801a5e8:	f240 22e7 	movw	r2, #743	; 0x2e7
 801a5ec:	491e      	ldr	r1, [pc, #120]	; (801a668 <tcp_write+0x5c0>)
 801a5ee:	481a      	ldr	r0, [pc, #104]	; (801a658 <tcp_write+0x5b0>)
 801a5f0:	f006 fcae 	bl	8020f50 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801a5f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a5f6:	685b      	ldr	r3, [r3, #4]
 801a5f8:	62bb      	str	r3, [r7, #40]	; 0x28
 801a5fa:	e009      	b.n	801a610 <tcp_write+0x568>
      p->tot_len += extendlen;
 801a5fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a5fe:	891a      	ldrh	r2, [r3, #8]
 801a600:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a602:	4413      	add	r3, r2
 801a604:	b29a      	uxth	r2, r3
 801a606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a608:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801a60a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a60c:	681b      	ldr	r3, [r3, #0]
 801a60e:	62bb      	str	r3, [r7, #40]	; 0x28
 801a610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a612:	681b      	ldr	r3, [r3, #0]
 801a614:	2b00      	cmp	r3, #0
 801a616:	d1f1      	bne.n	801a5fc <tcp_write+0x554>
    }
    p->tot_len += extendlen;
 801a618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a61a:	891a      	ldrh	r2, [r3, #8]
 801a61c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a61e:	4413      	add	r3, r2
 801a620:	b29a      	uxth	r2, r3
 801a622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a624:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801a626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a628:	895a      	ldrh	r2, [r3, #10]
 801a62a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a62c:	4413      	add	r3, r2
 801a62e:	b29a      	uxth	r2, r3
 801a630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a632:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 801a634:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a636:	891a      	ldrh	r2, [r3, #8]
 801a638:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a63a:	4413      	add	r3, r2
 801a63c:	b29a      	uxth	r2, r3
 801a63e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a640:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801a642:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a644:	2b00      	cmp	r3, #0
 801a646:	d111      	bne.n	801a66c <tcp_write+0x5c4>
    pcb->unsent = queue;
 801a648:	68fb      	ldr	r3, [r7, #12]
 801a64a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801a64c:	66da      	str	r2, [r3, #108]	; 0x6c
 801a64e:	e010      	b.n	801a672 <tcp_write+0x5ca>
 801a650:	08025f90 	.word	0x08025f90
 801a654:	08026250 	.word	0x08026250
 801a658:	08026004 	.word	0x08026004
 801a65c:	08026290 	.word	0x08026290
 801a660:	080262a0 	.word	0x080262a0
 801a664:	080262b4 	.word	0x080262b4
 801a668:	080262ec 	.word	0x080262ec
  } else {
    last_unsent->next = queue;
 801a66c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a66e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801a670:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801a672:	68fb      	ldr	r3, [r7, #12]
 801a674:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801a676:	88fb      	ldrh	r3, [r7, #6]
 801a678:	441a      	add	r2, r3
 801a67a:	68fb      	ldr	r3, [r7, #12]
 801a67c:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 801a67e:	68fb      	ldr	r3, [r7, #12]
 801a680:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801a684:	88fb      	ldrh	r3, [r7, #6]
 801a686:	1ad3      	subs	r3, r2, r3
 801a688:	b29a      	uxth	r2, r3
 801a68a:	68fb      	ldr	r3, [r7, #12]
 801a68c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 801a690:	68fb      	ldr	r3, [r7, #12]
 801a692:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801a696:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801a69a:	68fb      	ldr	r3, [r7, #12]
 801a69c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801a6a0:	2b00      	cmp	r3, #0
 801a6a2:	d00e      	beq.n	801a6c2 <tcp_write+0x61a>
    LWIP_ASSERT("tcp_write: valid queue length",
 801a6a4:	68fb      	ldr	r3, [r7, #12]
 801a6a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a6a8:	2b00      	cmp	r3, #0
 801a6aa:	d10a      	bne.n	801a6c2 <tcp_write+0x61a>
 801a6ac:	68fb      	ldr	r3, [r7, #12]
 801a6ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a6b0:	2b00      	cmp	r3, #0
 801a6b2:	d106      	bne.n	801a6c2 <tcp_write+0x61a>
 801a6b4:	4b2c      	ldr	r3, [pc, #176]	; (801a768 <tcp_write+0x6c0>)
 801a6b6:	f240 3213 	movw	r2, #787	; 0x313
 801a6ba:	492c      	ldr	r1, [pc, #176]	; (801a76c <tcp_write+0x6c4>)
 801a6bc:	482c      	ldr	r0, [pc, #176]	; (801a770 <tcp_write+0x6c8>)
 801a6be:	f006 fc47 	bl	8020f50 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801a6c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a6c4:	2b00      	cmp	r3, #0
 801a6c6:	d016      	beq.n	801a6f6 <tcp_write+0x64e>
 801a6c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a6ca:	68db      	ldr	r3, [r3, #12]
 801a6cc:	2b00      	cmp	r3, #0
 801a6ce:	d012      	beq.n	801a6f6 <tcp_write+0x64e>
 801a6d0:	797b      	ldrb	r3, [r7, #5]
 801a6d2:	f003 0302 	and.w	r3, r3, #2
 801a6d6:	2b00      	cmp	r3, #0
 801a6d8:	d10d      	bne.n	801a6f6 <tcp_write+0x64e>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801a6da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a6dc:	68db      	ldr	r3, [r3, #12]
 801a6de:	899b      	ldrh	r3, [r3, #12]
 801a6e0:	b29c      	uxth	r4, r3
 801a6e2:	2008      	movs	r0, #8
 801a6e4:	f7f5 fb0a 	bl	800fcfc <lwip_htons>
 801a6e8:	4603      	mov	r3, r0
 801a6ea:	461a      	mov	r2, r3
 801a6ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a6ee:	68db      	ldr	r3, [r3, #12]
 801a6f0:	4322      	orrs	r2, r4
 801a6f2:	b292      	uxth	r2, r2
 801a6f4:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801a6f6:	2300      	movs	r3, #0
 801a6f8:	e031      	b.n	801a75e <tcp_write+0x6b6>
          goto memerr;
 801a6fa:	bf00      	nop
 801a6fc:	e006      	b.n	801a70c <tcp_write+0x664>
            goto memerr;
 801a6fe:	bf00      	nop
 801a700:	e004      	b.n	801a70c <tcp_write+0x664>
        goto memerr;
 801a702:	bf00      	nop
 801a704:	e002      	b.n	801a70c <tcp_write+0x664>
        goto memerr;
 801a706:	bf00      	nop
 801a708:	e000      	b.n	801a70c <tcp_write+0x664>
      goto memerr;
 801a70a:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a70c:	68fb      	ldr	r3, [r7, #12]
 801a70e:	8b5b      	ldrh	r3, [r3, #26]
 801a710:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a714:	b29a      	uxth	r2, r3
 801a716:	68fb      	ldr	r3, [r7, #12]
 801a718:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801a71a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a71c:	2b00      	cmp	r3, #0
 801a71e:	d002      	beq.n	801a726 <tcp_write+0x67e>
    pbuf_free(concat_p);
 801a720:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801a722:	f7f9 fc95 	bl	8014050 <pbuf_free>
  }
  if (queue != NULL) {
 801a726:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a728:	2b00      	cmp	r3, #0
 801a72a:	d002      	beq.n	801a732 <tcp_write+0x68a>
    tcp_segs_free(queue);
 801a72c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801a72e:	f7fc fb71 	bl	8016e14 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801a732:	68fb      	ldr	r3, [r7, #12]
 801a734:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801a738:	2b00      	cmp	r3, #0
 801a73a:	d00e      	beq.n	801a75a <tcp_write+0x6b2>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801a73c:	68fb      	ldr	r3, [r7, #12]
 801a73e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a740:	2b00      	cmp	r3, #0
 801a742:	d10a      	bne.n	801a75a <tcp_write+0x6b2>
 801a744:	68fb      	ldr	r3, [r7, #12]
 801a746:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a748:	2b00      	cmp	r3, #0
 801a74a:	d106      	bne.n	801a75a <tcp_write+0x6b2>
 801a74c:	4b06      	ldr	r3, [pc, #24]	; (801a768 <tcp_write+0x6c0>)
 801a74e:	f44f 724a 	mov.w	r2, #808	; 0x328
 801a752:	4906      	ldr	r1, [pc, #24]	; (801a76c <tcp_write+0x6c4>)
 801a754:	4806      	ldr	r0, [pc, #24]	; (801a770 <tcp_write+0x6c8>)
 801a756:	f006 fbfb 	bl	8020f50 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801a75a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801a75e:	4618      	mov	r0, r3
 801a760:	375c      	adds	r7, #92	; 0x5c
 801a762:	46bd      	mov	sp, r7
 801a764:	bd90      	pop	{r4, r7, pc}
 801a766:	bf00      	nop
 801a768:	08025f90 	.word	0x08025f90
 801a76c:	08026324 	.word	0x08026324
 801a770:	08026004 	.word	0x08026004

0801a774 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801a774:	b590      	push	{r4, r7, lr}
 801a776:	b08b      	sub	sp, #44	; 0x2c
 801a778:	af02      	add	r7, sp, #8
 801a77a:	6078      	str	r0, [r7, #4]
 801a77c:	460b      	mov	r3, r1
 801a77e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801a780:	2300      	movs	r3, #0
 801a782:	61fb      	str	r3, [r7, #28]
 801a784:	2300      	movs	r3, #0
 801a786:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801a788:	2300      	movs	r3, #0
 801a78a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801a78c:	687b      	ldr	r3, [r7, #4]
 801a78e:	2b00      	cmp	r3, #0
 801a790:	d106      	bne.n	801a7a0 <tcp_split_unsent_seg+0x2c>
 801a792:	4b95      	ldr	r3, [pc, #596]	; (801a9e8 <tcp_split_unsent_seg+0x274>)
 801a794:	f240 324b 	movw	r2, #843	; 0x34b
 801a798:	4994      	ldr	r1, [pc, #592]	; (801a9ec <tcp_split_unsent_seg+0x278>)
 801a79a:	4895      	ldr	r0, [pc, #596]	; (801a9f0 <tcp_split_unsent_seg+0x27c>)
 801a79c:	f006 fbd8 	bl	8020f50 <iprintf>

  useg = pcb->unsent;
 801a7a0:	687b      	ldr	r3, [r7, #4]
 801a7a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a7a4:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801a7a6:	697b      	ldr	r3, [r7, #20]
 801a7a8:	2b00      	cmp	r3, #0
 801a7aa:	d102      	bne.n	801a7b2 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801a7ac:	f04f 33ff 	mov.w	r3, #4294967295
 801a7b0:	e116      	b.n	801a9e0 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801a7b2:	887b      	ldrh	r3, [r7, #2]
 801a7b4:	2b00      	cmp	r3, #0
 801a7b6:	d109      	bne.n	801a7cc <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801a7b8:	4b8b      	ldr	r3, [pc, #556]	; (801a9e8 <tcp_split_unsent_seg+0x274>)
 801a7ba:	f240 3253 	movw	r2, #851	; 0x353
 801a7be:	498d      	ldr	r1, [pc, #564]	; (801a9f4 <tcp_split_unsent_seg+0x280>)
 801a7c0:	488b      	ldr	r0, [pc, #556]	; (801a9f0 <tcp_split_unsent_seg+0x27c>)
 801a7c2:	f006 fbc5 	bl	8020f50 <iprintf>
    return ERR_VAL;
 801a7c6:	f06f 0305 	mvn.w	r3, #5
 801a7ca:	e109      	b.n	801a9e0 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 801a7cc:	697b      	ldr	r3, [r7, #20]
 801a7ce:	891b      	ldrh	r3, [r3, #8]
 801a7d0:	887a      	ldrh	r2, [r7, #2]
 801a7d2:	429a      	cmp	r2, r3
 801a7d4:	d301      	bcc.n	801a7da <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801a7d6:	2300      	movs	r3, #0
 801a7d8:	e102      	b.n	801a9e0 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801a7da:	687b      	ldr	r3, [r7, #4]
 801a7dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a7de:	887a      	ldrh	r2, [r7, #2]
 801a7e0:	429a      	cmp	r2, r3
 801a7e2:	d906      	bls.n	801a7f2 <tcp_split_unsent_seg+0x7e>
 801a7e4:	4b80      	ldr	r3, [pc, #512]	; (801a9e8 <tcp_split_unsent_seg+0x274>)
 801a7e6:	f240 325b 	movw	r2, #859	; 0x35b
 801a7ea:	4983      	ldr	r1, [pc, #524]	; (801a9f8 <tcp_split_unsent_seg+0x284>)
 801a7ec:	4880      	ldr	r0, [pc, #512]	; (801a9f0 <tcp_split_unsent_seg+0x27c>)
 801a7ee:	f006 fbaf 	bl	8020f50 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801a7f2:	697b      	ldr	r3, [r7, #20]
 801a7f4:	891b      	ldrh	r3, [r3, #8]
 801a7f6:	2b00      	cmp	r3, #0
 801a7f8:	d106      	bne.n	801a808 <tcp_split_unsent_seg+0x94>
 801a7fa:	4b7b      	ldr	r3, [pc, #492]	; (801a9e8 <tcp_split_unsent_seg+0x274>)
 801a7fc:	f44f 7257 	mov.w	r2, #860	; 0x35c
 801a800:	497e      	ldr	r1, [pc, #504]	; (801a9fc <tcp_split_unsent_seg+0x288>)
 801a802:	487b      	ldr	r0, [pc, #492]	; (801a9f0 <tcp_split_unsent_seg+0x27c>)
 801a804:	f006 fba4 	bl	8020f50 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801a808:	697b      	ldr	r3, [r7, #20]
 801a80a:	7a9b      	ldrb	r3, [r3, #10]
 801a80c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801a80e:	7bfb      	ldrb	r3, [r7, #15]
 801a810:	009b      	lsls	r3, r3, #2
 801a812:	b2db      	uxtb	r3, r3
 801a814:	f003 0304 	and.w	r3, r3, #4
 801a818:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801a81a:	697b      	ldr	r3, [r7, #20]
 801a81c:	891a      	ldrh	r2, [r3, #8]
 801a81e:	887b      	ldrh	r3, [r7, #2]
 801a820:	1ad3      	subs	r3, r2, r3
 801a822:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801a824:	7bbb      	ldrb	r3, [r7, #14]
 801a826:	b29a      	uxth	r2, r3
 801a828:	89bb      	ldrh	r3, [r7, #12]
 801a82a:	4413      	add	r3, r2
 801a82c:	b29b      	uxth	r3, r3
 801a82e:	f44f 7220 	mov.w	r2, #640	; 0x280
 801a832:	4619      	mov	r1, r3
 801a834:	2036      	movs	r0, #54	; 0x36
 801a836:	f7f9 f8f9 	bl	8013a2c <pbuf_alloc>
 801a83a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801a83c:	693b      	ldr	r3, [r7, #16]
 801a83e:	2b00      	cmp	r3, #0
 801a840:	f000 80b7 	beq.w	801a9b2 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 801a844:	697b      	ldr	r3, [r7, #20]
 801a846:	685b      	ldr	r3, [r3, #4]
 801a848:	891a      	ldrh	r2, [r3, #8]
 801a84a:	697b      	ldr	r3, [r7, #20]
 801a84c:	891b      	ldrh	r3, [r3, #8]
 801a84e:	1ad3      	subs	r3, r2, r3
 801a850:	b29a      	uxth	r2, r3
 801a852:	887b      	ldrh	r3, [r7, #2]
 801a854:	4413      	add	r3, r2
 801a856:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801a858:	697b      	ldr	r3, [r7, #20]
 801a85a:	6858      	ldr	r0, [r3, #4]
 801a85c:	693b      	ldr	r3, [r7, #16]
 801a85e:	685a      	ldr	r2, [r3, #4]
 801a860:	7bbb      	ldrb	r3, [r7, #14]
 801a862:	18d1      	adds	r1, r2, r3
 801a864:	897b      	ldrh	r3, [r7, #10]
 801a866:	89ba      	ldrh	r2, [r7, #12]
 801a868:	f7f9 fdf8 	bl	801445c <pbuf_copy_partial>
 801a86c:	4603      	mov	r3, r0
 801a86e:	461a      	mov	r2, r3
 801a870:	89bb      	ldrh	r3, [r7, #12]
 801a872:	4293      	cmp	r3, r2
 801a874:	f040 809f 	bne.w	801a9b6 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801a878:	697b      	ldr	r3, [r7, #20]
 801a87a:	68db      	ldr	r3, [r3, #12]
 801a87c:	899b      	ldrh	r3, [r3, #12]
 801a87e:	b29b      	uxth	r3, r3
 801a880:	4618      	mov	r0, r3
 801a882:	f7f5 fa3b 	bl	800fcfc <lwip_htons>
 801a886:	4603      	mov	r3, r0
 801a888:	b2db      	uxtb	r3, r3
 801a88a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a88e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801a890:	2300      	movs	r3, #0
 801a892:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 801a894:	7efb      	ldrb	r3, [r7, #27]
 801a896:	f003 0308 	and.w	r3, r3, #8
 801a89a:	2b00      	cmp	r3, #0
 801a89c:	d007      	beq.n	801a8ae <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801a89e:	7efb      	ldrb	r3, [r7, #27]
 801a8a0:	f023 0308 	bic.w	r3, r3, #8
 801a8a4:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801a8a6:	7ebb      	ldrb	r3, [r7, #26]
 801a8a8:	f043 0308 	orr.w	r3, r3, #8
 801a8ac:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801a8ae:	7efb      	ldrb	r3, [r7, #27]
 801a8b0:	f003 0301 	and.w	r3, r3, #1
 801a8b4:	2b00      	cmp	r3, #0
 801a8b6:	d007      	beq.n	801a8c8 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 801a8b8:	7efb      	ldrb	r3, [r7, #27]
 801a8ba:	f023 0301 	bic.w	r3, r3, #1
 801a8be:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801a8c0:	7ebb      	ldrb	r3, [r7, #26]
 801a8c2:	f043 0301 	orr.w	r3, r3, #1
 801a8c6:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801a8c8:	697b      	ldr	r3, [r7, #20]
 801a8ca:	68db      	ldr	r3, [r3, #12]
 801a8cc:	685b      	ldr	r3, [r3, #4]
 801a8ce:	4618      	mov	r0, r3
 801a8d0:	f7f5 fa29 	bl	800fd26 <lwip_htonl>
 801a8d4:	4602      	mov	r2, r0
 801a8d6:	887b      	ldrh	r3, [r7, #2]
 801a8d8:	18d1      	adds	r1, r2, r3
 801a8da:	7eba      	ldrb	r2, [r7, #26]
 801a8dc:	7bfb      	ldrb	r3, [r7, #15]
 801a8de:	9300      	str	r3, [sp, #0]
 801a8e0:	460b      	mov	r3, r1
 801a8e2:	6939      	ldr	r1, [r7, #16]
 801a8e4:	6878      	ldr	r0, [r7, #4]
 801a8e6:	f7ff fa4d 	bl	8019d84 <tcp_create_segment>
 801a8ea:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 801a8ec:	69fb      	ldr	r3, [r7, #28]
 801a8ee:	2b00      	cmp	r3, #0
 801a8f0:	d063      	beq.n	801a9ba <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801a8f2:	697b      	ldr	r3, [r7, #20]
 801a8f4:	685b      	ldr	r3, [r3, #4]
 801a8f6:	4618      	mov	r0, r3
 801a8f8:	f7f9 fc38 	bl	801416c <pbuf_clen>
 801a8fc:	4603      	mov	r3, r0
 801a8fe:	461a      	mov	r2, r3
 801a900:	687b      	ldr	r3, [r7, #4]
 801a902:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801a906:	1a9b      	subs	r3, r3, r2
 801a908:	b29a      	uxth	r2, r3
 801a90a:	687b      	ldr	r3, [r7, #4]
 801a90c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801a910:	697b      	ldr	r3, [r7, #20]
 801a912:	6858      	ldr	r0, [r3, #4]
 801a914:	697b      	ldr	r3, [r7, #20]
 801a916:	685b      	ldr	r3, [r3, #4]
 801a918:	891a      	ldrh	r2, [r3, #8]
 801a91a:	89bb      	ldrh	r3, [r7, #12]
 801a91c:	1ad3      	subs	r3, r2, r3
 801a91e:	b29b      	uxth	r3, r3
 801a920:	4619      	mov	r1, r3
 801a922:	f7f9 f9dd 	bl	8013ce0 <pbuf_realloc>
  useg->len -= remainder;
 801a926:	697b      	ldr	r3, [r7, #20]
 801a928:	891a      	ldrh	r2, [r3, #8]
 801a92a:	89bb      	ldrh	r3, [r7, #12]
 801a92c:	1ad3      	subs	r3, r2, r3
 801a92e:	b29a      	uxth	r2, r3
 801a930:	697b      	ldr	r3, [r7, #20]
 801a932:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801a934:	697b      	ldr	r3, [r7, #20]
 801a936:	68db      	ldr	r3, [r3, #12]
 801a938:	899b      	ldrh	r3, [r3, #12]
 801a93a:	b29c      	uxth	r4, r3
 801a93c:	7efb      	ldrb	r3, [r7, #27]
 801a93e:	b29b      	uxth	r3, r3
 801a940:	4618      	mov	r0, r3
 801a942:	f7f5 f9db 	bl	800fcfc <lwip_htons>
 801a946:	4603      	mov	r3, r0
 801a948:	461a      	mov	r2, r3
 801a94a:	697b      	ldr	r3, [r7, #20]
 801a94c:	68db      	ldr	r3, [r3, #12]
 801a94e:	4322      	orrs	r2, r4
 801a950:	b292      	uxth	r2, r2
 801a952:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801a954:	697b      	ldr	r3, [r7, #20]
 801a956:	685b      	ldr	r3, [r3, #4]
 801a958:	4618      	mov	r0, r3
 801a95a:	f7f9 fc07 	bl	801416c <pbuf_clen>
 801a95e:	4603      	mov	r3, r0
 801a960:	461a      	mov	r2, r3
 801a962:	687b      	ldr	r3, [r7, #4]
 801a964:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801a968:	4413      	add	r3, r2
 801a96a:	b29a      	uxth	r2, r3
 801a96c:	687b      	ldr	r3, [r7, #4]
 801a96e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801a972:	69fb      	ldr	r3, [r7, #28]
 801a974:	685b      	ldr	r3, [r3, #4]
 801a976:	4618      	mov	r0, r3
 801a978:	f7f9 fbf8 	bl	801416c <pbuf_clen>
 801a97c:	4603      	mov	r3, r0
 801a97e:	461a      	mov	r2, r3
 801a980:	687b      	ldr	r3, [r7, #4]
 801a982:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801a986:	4413      	add	r3, r2
 801a988:	b29a      	uxth	r2, r3
 801a98a:	687b      	ldr	r3, [r7, #4]
 801a98c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801a990:	697b      	ldr	r3, [r7, #20]
 801a992:	681a      	ldr	r2, [r3, #0]
 801a994:	69fb      	ldr	r3, [r7, #28]
 801a996:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801a998:	697b      	ldr	r3, [r7, #20]
 801a99a:	69fa      	ldr	r2, [r7, #28]
 801a99c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801a99e:	69fb      	ldr	r3, [r7, #28]
 801a9a0:	681b      	ldr	r3, [r3, #0]
 801a9a2:	2b00      	cmp	r3, #0
 801a9a4:	d103      	bne.n	801a9ae <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801a9a6:	687b      	ldr	r3, [r7, #4]
 801a9a8:	2200      	movs	r2, #0
 801a9aa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801a9ae:	2300      	movs	r3, #0
 801a9b0:	e016      	b.n	801a9e0 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801a9b2:	bf00      	nop
 801a9b4:	e002      	b.n	801a9bc <tcp_split_unsent_seg+0x248>
    goto memerr;
 801a9b6:	bf00      	nop
 801a9b8:	e000      	b.n	801a9bc <tcp_split_unsent_seg+0x248>
    goto memerr;
 801a9ba:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801a9bc:	69fb      	ldr	r3, [r7, #28]
 801a9be:	2b00      	cmp	r3, #0
 801a9c0:	d006      	beq.n	801a9d0 <tcp_split_unsent_seg+0x25c>
 801a9c2:	4b09      	ldr	r3, [pc, #36]	; (801a9e8 <tcp_split_unsent_seg+0x274>)
 801a9c4:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 801a9c8:	490d      	ldr	r1, [pc, #52]	; (801aa00 <tcp_split_unsent_seg+0x28c>)
 801a9ca:	4809      	ldr	r0, [pc, #36]	; (801a9f0 <tcp_split_unsent_seg+0x27c>)
 801a9cc:	f006 fac0 	bl	8020f50 <iprintf>
  if (p != NULL) {
 801a9d0:	693b      	ldr	r3, [r7, #16]
 801a9d2:	2b00      	cmp	r3, #0
 801a9d4:	d002      	beq.n	801a9dc <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801a9d6:	6938      	ldr	r0, [r7, #16]
 801a9d8:	f7f9 fb3a 	bl	8014050 <pbuf_free>
  }

  return ERR_MEM;
 801a9dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 801a9e0:	4618      	mov	r0, r3
 801a9e2:	3724      	adds	r7, #36	; 0x24
 801a9e4:	46bd      	mov	sp, r7
 801a9e6:	bd90      	pop	{r4, r7, pc}
 801a9e8:	08025f90 	.word	0x08025f90
 801a9ec:	08026344 	.word	0x08026344
 801a9f0:	08026004 	.word	0x08026004
 801a9f4:	08026368 	.word	0x08026368
 801a9f8:	0802638c 	.word	0x0802638c
 801a9fc:	0802639c 	.word	0x0802639c
 801aa00:	080263ac 	.word	0x080263ac

0801aa04 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801aa04:	b590      	push	{r4, r7, lr}
 801aa06:	b085      	sub	sp, #20
 801aa08:	af00      	add	r7, sp, #0
 801aa0a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801aa0c:	687b      	ldr	r3, [r7, #4]
 801aa0e:	2b00      	cmp	r3, #0
 801aa10:	d106      	bne.n	801aa20 <tcp_send_fin+0x1c>
 801aa12:	4b21      	ldr	r3, [pc, #132]	; (801aa98 <tcp_send_fin+0x94>)
 801aa14:	f240 32eb 	movw	r2, #1003	; 0x3eb
 801aa18:	4920      	ldr	r1, [pc, #128]	; (801aa9c <tcp_send_fin+0x98>)
 801aa1a:	4821      	ldr	r0, [pc, #132]	; (801aaa0 <tcp_send_fin+0x9c>)
 801aa1c:	f006 fa98 	bl	8020f50 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801aa20:	687b      	ldr	r3, [r7, #4]
 801aa22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801aa24:	2b00      	cmp	r3, #0
 801aa26:	d02e      	beq.n	801aa86 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801aa28:	687b      	ldr	r3, [r7, #4]
 801aa2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801aa2c:	60fb      	str	r3, [r7, #12]
 801aa2e:	e002      	b.n	801aa36 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801aa30:	68fb      	ldr	r3, [r7, #12]
 801aa32:	681b      	ldr	r3, [r3, #0]
 801aa34:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801aa36:	68fb      	ldr	r3, [r7, #12]
 801aa38:	681b      	ldr	r3, [r3, #0]
 801aa3a:	2b00      	cmp	r3, #0
 801aa3c:	d1f8      	bne.n	801aa30 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801aa3e:	68fb      	ldr	r3, [r7, #12]
 801aa40:	68db      	ldr	r3, [r3, #12]
 801aa42:	899b      	ldrh	r3, [r3, #12]
 801aa44:	b29b      	uxth	r3, r3
 801aa46:	4618      	mov	r0, r3
 801aa48:	f7f5 f958 	bl	800fcfc <lwip_htons>
 801aa4c:	4603      	mov	r3, r0
 801aa4e:	b2db      	uxtb	r3, r3
 801aa50:	f003 0307 	and.w	r3, r3, #7
 801aa54:	2b00      	cmp	r3, #0
 801aa56:	d116      	bne.n	801aa86 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801aa58:	68fb      	ldr	r3, [r7, #12]
 801aa5a:	68db      	ldr	r3, [r3, #12]
 801aa5c:	899b      	ldrh	r3, [r3, #12]
 801aa5e:	b29c      	uxth	r4, r3
 801aa60:	2001      	movs	r0, #1
 801aa62:	f7f5 f94b 	bl	800fcfc <lwip_htons>
 801aa66:	4603      	mov	r3, r0
 801aa68:	461a      	mov	r2, r3
 801aa6a:	68fb      	ldr	r3, [r7, #12]
 801aa6c:	68db      	ldr	r3, [r3, #12]
 801aa6e:	4322      	orrs	r2, r4
 801aa70:	b292      	uxth	r2, r2
 801aa72:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801aa74:	687b      	ldr	r3, [r7, #4]
 801aa76:	8b5b      	ldrh	r3, [r3, #26]
 801aa78:	f043 0320 	orr.w	r3, r3, #32
 801aa7c:	b29a      	uxth	r2, r3
 801aa7e:	687b      	ldr	r3, [r7, #4]
 801aa80:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801aa82:	2300      	movs	r3, #0
 801aa84:	e004      	b.n	801aa90 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801aa86:	2101      	movs	r1, #1
 801aa88:	6878      	ldr	r0, [r7, #4]
 801aa8a:	f000 f80b 	bl	801aaa4 <tcp_enqueue_flags>
 801aa8e:	4603      	mov	r3, r0
}
 801aa90:	4618      	mov	r0, r3
 801aa92:	3714      	adds	r7, #20
 801aa94:	46bd      	mov	sp, r7
 801aa96:	bd90      	pop	{r4, r7, pc}
 801aa98:	08025f90 	.word	0x08025f90
 801aa9c:	080263b8 	.word	0x080263b8
 801aaa0:	08026004 	.word	0x08026004

0801aaa4 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801aaa4:	b580      	push	{r7, lr}
 801aaa6:	b08a      	sub	sp, #40	; 0x28
 801aaa8:	af02      	add	r7, sp, #8
 801aaaa:	6078      	str	r0, [r7, #4]
 801aaac:	460b      	mov	r3, r1
 801aaae:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801aab0:	2300      	movs	r3, #0
 801aab2:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 801aab4:	2300      	movs	r3, #0
 801aab6:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801aab8:	78fb      	ldrb	r3, [r7, #3]
 801aaba:	f003 0303 	and.w	r3, r3, #3
 801aabe:	2b00      	cmp	r3, #0
 801aac0:	d106      	bne.n	801aad0 <tcp_enqueue_flags+0x2c>
 801aac2:	4b67      	ldr	r3, [pc, #412]	; (801ac60 <tcp_enqueue_flags+0x1bc>)
 801aac4:	f240 4212 	movw	r2, #1042	; 0x412
 801aac8:	4966      	ldr	r1, [pc, #408]	; (801ac64 <tcp_enqueue_flags+0x1c0>)
 801aaca:	4867      	ldr	r0, [pc, #412]	; (801ac68 <tcp_enqueue_flags+0x1c4>)
 801aacc:	f006 fa40 	bl	8020f50 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801aad0:	687b      	ldr	r3, [r7, #4]
 801aad2:	2b00      	cmp	r3, #0
 801aad4:	d106      	bne.n	801aae4 <tcp_enqueue_flags+0x40>
 801aad6:	4b62      	ldr	r3, [pc, #392]	; (801ac60 <tcp_enqueue_flags+0x1bc>)
 801aad8:	f240 4213 	movw	r2, #1043	; 0x413
 801aadc:	4963      	ldr	r1, [pc, #396]	; (801ac6c <tcp_enqueue_flags+0x1c8>)
 801aade:	4862      	ldr	r0, [pc, #392]	; (801ac68 <tcp_enqueue_flags+0x1c4>)
 801aae0:	f006 fa36 	bl	8020f50 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801aae4:	78fb      	ldrb	r3, [r7, #3]
 801aae6:	f003 0302 	and.w	r3, r3, #2
 801aaea:	2b00      	cmp	r3, #0
 801aaec:	d001      	beq.n	801aaf2 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801aaee:	2301      	movs	r3, #1
 801aaf0:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801aaf2:	7ffb      	ldrb	r3, [r7, #31]
 801aaf4:	009b      	lsls	r3, r3, #2
 801aaf6:	b2db      	uxtb	r3, r3
 801aaf8:	f003 0304 	and.w	r3, r3, #4
 801aafc:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801aafe:	7dfb      	ldrb	r3, [r7, #23]
 801ab00:	b29b      	uxth	r3, r3
 801ab02:	f44f 7220 	mov.w	r2, #640	; 0x280
 801ab06:	4619      	mov	r1, r3
 801ab08:	2036      	movs	r0, #54	; 0x36
 801ab0a:	f7f8 ff8f 	bl	8013a2c <pbuf_alloc>
 801ab0e:	6138      	str	r0, [r7, #16]
 801ab10:	693b      	ldr	r3, [r7, #16]
 801ab12:	2b00      	cmp	r3, #0
 801ab14:	d109      	bne.n	801ab2a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801ab16:	687b      	ldr	r3, [r7, #4]
 801ab18:	8b5b      	ldrh	r3, [r3, #26]
 801ab1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ab1e:	b29a      	uxth	r2, r3
 801ab20:	687b      	ldr	r3, [r7, #4]
 801ab22:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801ab24:	f04f 33ff 	mov.w	r3, #4294967295
 801ab28:	e095      	b.n	801ac56 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801ab2a:	693b      	ldr	r3, [r7, #16]
 801ab2c:	895a      	ldrh	r2, [r3, #10]
 801ab2e:	7dfb      	ldrb	r3, [r7, #23]
 801ab30:	b29b      	uxth	r3, r3
 801ab32:	429a      	cmp	r2, r3
 801ab34:	d206      	bcs.n	801ab44 <tcp_enqueue_flags+0xa0>
 801ab36:	4b4a      	ldr	r3, [pc, #296]	; (801ac60 <tcp_enqueue_flags+0x1bc>)
 801ab38:	f240 423a 	movw	r2, #1082	; 0x43a
 801ab3c:	494c      	ldr	r1, [pc, #304]	; (801ac70 <tcp_enqueue_flags+0x1cc>)
 801ab3e:	484a      	ldr	r0, [pc, #296]	; (801ac68 <tcp_enqueue_flags+0x1c4>)
 801ab40:	f006 fa06 	bl	8020f50 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801ab44:	687b      	ldr	r3, [r7, #4]
 801ab46:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 801ab48:	78fa      	ldrb	r2, [r7, #3]
 801ab4a:	7ffb      	ldrb	r3, [r7, #31]
 801ab4c:	9300      	str	r3, [sp, #0]
 801ab4e:	460b      	mov	r3, r1
 801ab50:	6939      	ldr	r1, [r7, #16]
 801ab52:	6878      	ldr	r0, [r7, #4]
 801ab54:	f7ff f916 	bl	8019d84 <tcp_create_segment>
 801ab58:	60f8      	str	r0, [r7, #12]
 801ab5a:	68fb      	ldr	r3, [r7, #12]
 801ab5c:	2b00      	cmp	r3, #0
 801ab5e:	d109      	bne.n	801ab74 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801ab60:	687b      	ldr	r3, [r7, #4]
 801ab62:	8b5b      	ldrh	r3, [r3, #26]
 801ab64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ab68:	b29a      	uxth	r2, r3
 801ab6a:	687b      	ldr	r3, [r7, #4]
 801ab6c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801ab6e:	f04f 33ff 	mov.w	r3, #4294967295
 801ab72:	e070      	b.n	801ac56 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801ab74:	68fb      	ldr	r3, [r7, #12]
 801ab76:	68db      	ldr	r3, [r3, #12]
 801ab78:	f003 0303 	and.w	r3, r3, #3
 801ab7c:	2b00      	cmp	r3, #0
 801ab7e:	d006      	beq.n	801ab8e <tcp_enqueue_flags+0xea>
 801ab80:	4b37      	ldr	r3, [pc, #220]	; (801ac60 <tcp_enqueue_flags+0x1bc>)
 801ab82:	f240 4242 	movw	r2, #1090	; 0x442
 801ab86:	493b      	ldr	r1, [pc, #236]	; (801ac74 <tcp_enqueue_flags+0x1d0>)
 801ab88:	4837      	ldr	r0, [pc, #220]	; (801ac68 <tcp_enqueue_flags+0x1c4>)
 801ab8a:	f006 f9e1 	bl	8020f50 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801ab8e:	68fb      	ldr	r3, [r7, #12]
 801ab90:	891b      	ldrh	r3, [r3, #8]
 801ab92:	2b00      	cmp	r3, #0
 801ab94:	d006      	beq.n	801aba4 <tcp_enqueue_flags+0x100>
 801ab96:	4b32      	ldr	r3, [pc, #200]	; (801ac60 <tcp_enqueue_flags+0x1bc>)
 801ab98:	f240 4243 	movw	r2, #1091	; 0x443
 801ab9c:	4936      	ldr	r1, [pc, #216]	; (801ac78 <tcp_enqueue_flags+0x1d4>)
 801ab9e:	4832      	ldr	r0, [pc, #200]	; (801ac68 <tcp_enqueue_flags+0x1c4>)
 801aba0:	f006 f9d6 	bl	8020f50 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801aba4:	687b      	ldr	r3, [r7, #4]
 801aba6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801aba8:	2b00      	cmp	r3, #0
 801abaa:	d103      	bne.n	801abb4 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 801abac:	687b      	ldr	r3, [r7, #4]
 801abae:	68fa      	ldr	r2, [r7, #12]
 801abb0:	66da      	str	r2, [r3, #108]	; 0x6c
 801abb2:	e00d      	b.n	801abd0 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801abb4:	687b      	ldr	r3, [r7, #4]
 801abb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801abb8:	61bb      	str	r3, [r7, #24]
 801abba:	e002      	b.n	801abc2 <tcp_enqueue_flags+0x11e>
 801abbc:	69bb      	ldr	r3, [r7, #24]
 801abbe:	681b      	ldr	r3, [r3, #0]
 801abc0:	61bb      	str	r3, [r7, #24]
 801abc2:	69bb      	ldr	r3, [r7, #24]
 801abc4:	681b      	ldr	r3, [r3, #0]
 801abc6:	2b00      	cmp	r3, #0
 801abc8:	d1f8      	bne.n	801abbc <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801abca:	69bb      	ldr	r3, [r7, #24]
 801abcc:	68fa      	ldr	r2, [r7, #12]
 801abce:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801abd0:	687b      	ldr	r3, [r7, #4]
 801abd2:	2200      	movs	r2, #0
 801abd4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801abd8:	78fb      	ldrb	r3, [r7, #3]
 801abda:	f003 0302 	and.w	r3, r3, #2
 801abde:	2b00      	cmp	r3, #0
 801abe0:	d104      	bne.n	801abec <tcp_enqueue_flags+0x148>
 801abe2:	78fb      	ldrb	r3, [r7, #3]
 801abe4:	f003 0301 	and.w	r3, r3, #1
 801abe8:	2b00      	cmp	r3, #0
 801abea:	d004      	beq.n	801abf6 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 801abec:	687b      	ldr	r3, [r7, #4]
 801abee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801abf0:	1c5a      	adds	r2, r3, #1
 801abf2:	687b      	ldr	r3, [r7, #4]
 801abf4:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801abf6:	78fb      	ldrb	r3, [r7, #3]
 801abf8:	f003 0301 	and.w	r3, r3, #1
 801abfc:	2b00      	cmp	r3, #0
 801abfe:	d006      	beq.n	801ac0e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801ac00:	687b      	ldr	r3, [r7, #4]
 801ac02:	8b5b      	ldrh	r3, [r3, #26]
 801ac04:	f043 0320 	orr.w	r3, r3, #32
 801ac08:	b29a      	uxth	r2, r3
 801ac0a:	687b      	ldr	r3, [r7, #4]
 801ac0c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801ac0e:	68fb      	ldr	r3, [r7, #12]
 801ac10:	685b      	ldr	r3, [r3, #4]
 801ac12:	4618      	mov	r0, r3
 801ac14:	f7f9 faaa 	bl	801416c <pbuf_clen>
 801ac18:	4603      	mov	r3, r0
 801ac1a:	461a      	mov	r2, r3
 801ac1c:	687b      	ldr	r3, [r7, #4]
 801ac1e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801ac22:	4413      	add	r3, r2
 801ac24:	b29a      	uxth	r2, r3
 801ac26:	687b      	ldr	r3, [r7, #4]
 801ac28:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801ac2c:	687b      	ldr	r3, [r7, #4]
 801ac2e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801ac32:	2b00      	cmp	r3, #0
 801ac34:	d00e      	beq.n	801ac54 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801ac36:	687b      	ldr	r3, [r7, #4]
 801ac38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ac3a:	2b00      	cmp	r3, #0
 801ac3c:	d10a      	bne.n	801ac54 <tcp_enqueue_flags+0x1b0>
 801ac3e:	687b      	ldr	r3, [r7, #4]
 801ac40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ac42:	2b00      	cmp	r3, #0
 801ac44:	d106      	bne.n	801ac54 <tcp_enqueue_flags+0x1b0>
 801ac46:	4b06      	ldr	r3, [pc, #24]	; (801ac60 <tcp_enqueue_flags+0x1bc>)
 801ac48:	f240 4266 	movw	r2, #1126	; 0x466
 801ac4c:	490b      	ldr	r1, [pc, #44]	; (801ac7c <tcp_enqueue_flags+0x1d8>)
 801ac4e:	4806      	ldr	r0, [pc, #24]	; (801ac68 <tcp_enqueue_flags+0x1c4>)
 801ac50:	f006 f97e 	bl	8020f50 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801ac54:	2300      	movs	r3, #0
}
 801ac56:	4618      	mov	r0, r3
 801ac58:	3720      	adds	r7, #32
 801ac5a:	46bd      	mov	sp, r7
 801ac5c:	bd80      	pop	{r7, pc}
 801ac5e:	bf00      	nop
 801ac60:	08025f90 	.word	0x08025f90
 801ac64:	080263d4 	.word	0x080263d4
 801ac68:	08026004 	.word	0x08026004
 801ac6c:	0802642c 	.word	0x0802642c
 801ac70:	0802644c 	.word	0x0802644c
 801ac74:	08026488 	.word	0x08026488
 801ac78:	080264a0 	.word	0x080264a0
 801ac7c:	080264cc 	.word	0x080264cc

0801ac80 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801ac80:	b5b0      	push	{r4, r5, r7, lr}
 801ac82:	b08a      	sub	sp, #40	; 0x28
 801ac84:	af00      	add	r7, sp, #0
 801ac86:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801ac88:	687b      	ldr	r3, [r7, #4]
 801ac8a:	2b00      	cmp	r3, #0
 801ac8c:	d106      	bne.n	801ac9c <tcp_output+0x1c>
 801ac8e:	4ba0      	ldr	r3, [pc, #640]	; (801af10 <tcp_output+0x290>)
 801ac90:	f240 42e1 	movw	r2, #1249	; 0x4e1
 801ac94:	499f      	ldr	r1, [pc, #636]	; (801af14 <tcp_output+0x294>)
 801ac96:	48a0      	ldr	r0, [pc, #640]	; (801af18 <tcp_output+0x298>)
 801ac98:	f006 f95a 	bl	8020f50 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801ac9c:	687b      	ldr	r3, [r7, #4]
 801ac9e:	7d1b      	ldrb	r3, [r3, #20]
 801aca0:	2b01      	cmp	r3, #1
 801aca2:	d106      	bne.n	801acb2 <tcp_output+0x32>
 801aca4:	4b9a      	ldr	r3, [pc, #616]	; (801af10 <tcp_output+0x290>)
 801aca6:	f240 42e4 	movw	r2, #1252	; 0x4e4
 801acaa:	499c      	ldr	r1, [pc, #624]	; (801af1c <tcp_output+0x29c>)
 801acac:	489a      	ldr	r0, [pc, #616]	; (801af18 <tcp_output+0x298>)
 801acae:	f006 f94f 	bl	8020f50 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801acb2:	4b9b      	ldr	r3, [pc, #620]	; (801af20 <tcp_output+0x2a0>)
 801acb4:	681b      	ldr	r3, [r3, #0]
 801acb6:	687a      	ldr	r2, [r7, #4]
 801acb8:	429a      	cmp	r2, r3
 801acba:	d101      	bne.n	801acc0 <tcp_output+0x40>
    return ERR_OK;
 801acbc:	2300      	movs	r3, #0
 801acbe:	e1d2      	b.n	801b066 <tcp_output+0x3e6>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801acc0:	687b      	ldr	r3, [r7, #4]
 801acc2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801acc6:	687b      	ldr	r3, [r7, #4]
 801acc8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801accc:	429a      	cmp	r2, r3
 801acce:	d203      	bcs.n	801acd8 <tcp_output+0x58>
 801acd0:	687b      	ldr	r3, [r7, #4]
 801acd2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801acd6:	e002      	b.n	801acde <tcp_output+0x5e>
 801acd8:	687b      	ldr	r3, [r7, #4]
 801acda:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801acde:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801ace0:	687b      	ldr	r3, [r7, #4]
 801ace2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ace4:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 801ace6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ace8:	2b00      	cmp	r3, #0
 801acea:	d10b      	bne.n	801ad04 <tcp_output+0x84>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801acec:	687b      	ldr	r3, [r7, #4]
 801acee:	8b5b      	ldrh	r3, [r3, #26]
 801acf0:	f003 0302 	and.w	r3, r3, #2
 801acf4:	2b00      	cmp	r3, #0
 801acf6:	f000 81a9 	beq.w	801b04c <tcp_output+0x3cc>
      return tcp_send_empty_ack(pcb);
 801acfa:	6878      	ldr	r0, [r7, #4]
 801acfc:	f000 fdd8 	bl	801b8b0 <tcp_send_empty_ack>
 801ad00:	4603      	mov	r3, r0
 801ad02:	e1b0      	b.n	801b066 <tcp_output+0x3e6>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801ad04:	6879      	ldr	r1, [r7, #4]
 801ad06:	687b      	ldr	r3, [r7, #4]
 801ad08:	3304      	adds	r3, #4
 801ad0a:	461a      	mov	r2, r3
 801ad0c:	6878      	ldr	r0, [r7, #4]
 801ad0e:	f7ff f81d 	bl	8019d4c <tcp_route>
 801ad12:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801ad14:	697b      	ldr	r3, [r7, #20]
 801ad16:	2b00      	cmp	r3, #0
 801ad18:	d102      	bne.n	801ad20 <tcp_output+0xa0>
    return ERR_RTE;
 801ad1a:	f06f 0303 	mvn.w	r3, #3
 801ad1e:	e1a2      	b.n	801b066 <tcp_output+0x3e6>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801ad20:	687b      	ldr	r3, [r7, #4]
 801ad22:	2b00      	cmp	r3, #0
 801ad24:	d003      	beq.n	801ad2e <tcp_output+0xae>
 801ad26:	687b      	ldr	r3, [r7, #4]
 801ad28:	681b      	ldr	r3, [r3, #0]
 801ad2a:	2b00      	cmp	r3, #0
 801ad2c:	d111      	bne.n	801ad52 <tcp_output+0xd2>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801ad2e:	697b      	ldr	r3, [r7, #20]
 801ad30:	2b00      	cmp	r3, #0
 801ad32:	d002      	beq.n	801ad3a <tcp_output+0xba>
 801ad34:	697b      	ldr	r3, [r7, #20]
 801ad36:	3304      	adds	r3, #4
 801ad38:	e000      	b.n	801ad3c <tcp_output+0xbc>
 801ad3a:	2300      	movs	r3, #0
 801ad3c:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801ad3e:	693b      	ldr	r3, [r7, #16]
 801ad40:	2b00      	cmp	r3, #0
 801ad42:	d102      	bne.n	801ad4a <tcp_output+0xca>
      return ERR_RTE;
 801ad44:	f06f 0303 	mvn.w	r3, #3
 801ad48:	e18d      	b.n	801b066 <tcp_output+0x3e6>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801ad4a:	693b      	ldr	r3, [r7, #16]
 801ad4c:	681a      	ldr	r2, [r3, #0]
 801ad4e:	687b      	ldr	r3, [r7, #4]
 801ad50:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801ad52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad54:	68db      	ldr	r3, [r3, #12]
 801ad56:	685b      	ldr	r3, [r3, #4]
 801ad58:	4618      	mov	r0, r3
 801ad5a:	f7f4 ffe4 	bl	800fd26 <lwip_htonl>
 801ad5e:	4602      	mov	r2, r0
 801ad60:	687b      	ldr	r3, [r7, #4]
 801ad62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ad64:	1ad3      	subs	r3, r2, r3
 801ad66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ad68:	8912      	ldrh	r2, [r2, #8]
 801ad6a:	4413      	add	r3, r2
 801ad6c:	69ba      	ldr	r2, [r7, #24]
 801ad6e:	429a      	cmp	r2, r3
 801ad70:	d227      	bcs.n	801adc2 <tcp_output+0x142>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801ad72:	687b      	ldr	r3, [r7, #4]
 801ad74:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801ad78:	461a      	mov	r2, r3
 801ad7a:	69bb      	ldr	r3, [r7, #24]
 801ad7c:	4293      	cmp	r3, r2
 801ad7e:	d114      	bne.n	801adaa <tcp_output+0x12a>
 801ad80:	687b      	ldr	r3, [r7, #4]
 801ad82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ad84:	2b00      	cmp	r3, #0
 801ad86:	d110      	bne.n	801adaa <tcp_output+0x12a>
 801ad88:	687b      	ldr	r3, [r7, #4]
 801ad8a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801ad8e:	2b00      	cmp	r3, #0
 801ad90:	d10b      	bne.n	801adaa <tcp_output+0x12a>
      pcb->persist_cnt = 0;
 801ad92:	687b      	ldr	r3, [r7, #4]
 801ad94:	2200      	movs	r2, #0
 801ad96:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 801ad9a:	687b      	ldr	r3, [r7, #4]
 801ad9c:	2201      	movs	r2, #1
 801ad9e:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 801ada2:	687b      	ldr	r3, [r7, #4]
 801ada4:	2200      	movs	r2, #0
 801ada6:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801adaa:	687b      	ldr	r3, [r7, #4]
 801adac:	8b5b      	ldrh	r3, [r3, #26]
 801adae:	f003 0302 	and.w	r3, r3, #2
 801adb2:	2b00      	cmp	r3, #0
 801adb4:	f000 814c 	beq.w	801b050 <tcp_output+0x3d0>
      return tcp_send_empty_ack(pcb);
 801adb8:	6878      	ldr	r0, [r7, #4]
 801adba:	f000 fd79 	bl	801b8b0 <tcp_send_empty_ack>
 801adbe:	4603      	mov	r3, r0
 801adc0:	e151      	b.n	801b066 <tcp_output+0x3e6>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 801adc2:	687b      	ldr	r3, [r7, #4]
 801adc4:	2200      	movs	r2, #0
 801adc6:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801adca:	687b      	ldr	r3, [r7, #4]
 801adcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801adce:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801add0:	6a3b      	ldr	r3, [r7, #32]
 801add2:	2b00      	cmp	r3, #0
 801add4:	f000 811b 	beq.w	801b00e <tcp_output+0x38e>
    for (; useg->next != NULL; useg = useg->next);
 801add8:	e002      	b.n	801ade0 <tcp_output+0x160>
 801adda:	6a3b      	ldr	r3, [r7, #32]
 801addc:	681b      	ldr	r3, [r3, #0]
 801adde:	623b      	str	r3, [r7, #32]
 801ade0:	6a3b      	ldr	r3, [r7, #32]
 801ade2:	681b      	ldr	r3, [r3, #0]
 801ade4:	2b00      	cmp	r3, #0
 801ade6:	d1f8      	bne.n	801adda <tcp_output+0x15a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801ade8:	e111      	b.n	801b00e <tcp_output+0x38e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801adea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801adec:	68db      	ldr	r3, [r3, #12]
 801adee:	899b      	ldrh	r3, [r3, #12]
 801adf0:	b29b      	uxth	r3, r3
 801adf2:	4618      	mov	r0, r3
 801adf4:	f7f4 ff82 	bl	800fcfc <lwip_htons>
 801adf8:	4603      	mov	r3, r0
 801adfa:	b2db      	uxtb	r3, r3
 801adfc:	f003 0304 	and.w	r3, r3, #4
 801ae00:	2b00      	cmp	r3, #0
 801ae02:	d006      	beq.n	801ae12 <tcp_output+0x192>
 801ae04:	4b42      	ldr	r3, [pc, #264]	; (801af10 <tcp_output+0x290>)
 801ae06:	f240 5237 	movw	r2, #1335	; 0x537
 801ae0a:	4946      	ldr	r1, [pc, #280]	; (801af24 <tcp_output+0x2a4>)
 801ae0c:	4842      	ldr	r0, [pc, #264]	; (801af18 <tcp_output+0x298>)
 801ae0e:	f006 f89f 	bl	8020f50 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801ae12:	687b      	ldr	r3, [r7, #4]
 801ae14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ae16:	2b00      	cmp	r3, #0
 801ae18:	d01f      	beq.n	801ae5a <tcp_output+0x1da>
 801ae1a:	687b      	ldr	r3, [r7, #4]
 801ae1c:	8b5b      	ldrh	r3, [r3, #26]
 801ae1e:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801ae22:	2b00      	cmp	r3, #0
 801ae24:	d119      	bne.n	801ae5a <tcp_output+0x1da>
 801ae26:	687b      	ldr	r3, [r7, #4]
 801ae28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ae2a:	2b00      	cmp	r3, #0
 801ae2c:	d00b      	beq.n	801ae46 <tcp_output+0x1c6>
 801ae2e:	687b      	ldr	r3, [r7, #4]
 801ae30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ae32:	681b      	ldr	r3, [r3, #0]
 801ae34:	2b00      	cmp	r3, #0
 801ae36:	d110      	bne.n	801ae5a <tcp_output+0x1da>
 801ae38:	687b      	ldr	r3, [r7, #4]
 801ae3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ae3c:	891a      	ldrh	r2, [r3, #8]
 801ae3e:	687b      	ldr	r3, [r7, #4]
 801ae40:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801ae42:	429a      	cmp	r2, r3
 801ae44:	d209      	bcs.n	801ae5a <tcp_output+0x1da>
 801ae46:	687b      	ldr	r3, [r7, #4]
 801ae48:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801ae4c:	2b00      	cmp	r3, #0
 801ae4e:	d004      	beq.n	801ae5a <tcp_output+0x1da>
 801ae50:	687b      	ldr	r3, [r7, #4]
 801ae52:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801ae56:	2b08      	cmp	r3, #8
 801ae58:	d901      	bls.n	801ae5e <tcp_output+0x1de>
 801ae5a:	2301      	movs	r3, #1
 801ae5c:	e000      	b.n	801ae60 <tcp_output+0x1e0>
 801ae5e:	2300      	movs	r3, #0
 801ae60:	2b00      	cmp	r3, #0
 801ae62:	d106      	bne.n	801ae72 <tcp_output+0x1f2>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801ae64:	687b      	ldr	r3, [r7, #4]
 801ae66:	8b5b      	ldrh	r3, [r3, #26]
 801ae68:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801ae6c:	2b00      	cmp	r3, #0
 801ae6e:	f000 80e3 	beq.w	801b038 <tcp_output+0x3b8>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801ae72:	687b      	ldr	r3, [r7, #4]
 801ae74:	7d1b      	ldrb	r3, [r3, #20]
 801ae76:	2b02      	cmp	r3, #2
 801ae78:	d00d      	beq.n	801ae96 <tcp_output+0x216>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801ae7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ae7c:	68db      	ldr	r3, [r3, #12]
 801ae7e:	899b      	ldrh	r3, [r3, #12]
 801ae80:	b29c      	uxth	r4, r3
 801ae82:	2010      	movs	r0, #16
 801ae84:	f7f4 ff3a 	bl	800fcfc <lwip_htons>
 801ae88:	4603      	mov	r3, r0
 801ae8a:	461a      	mov	r2, r3
 801ae8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ae8e:	68db      	ldr	r3, [r3, #12]
 801ae90:	4322      	orrs	r2, r4
 801ae92:	b292      	uxth	r2, r2
 801ae94:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801ae96:	697a      	ldr	r2, [r7, #20]
 801ae98:	6879      	ldr	r1, [r7, #4]
 801ae9a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ae9c:	f000 f908 	bl	801b0b0 <tcp_output_segment>
 801aea0:	4603      	mov	r3, r0
 801aea2:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801aea4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801aea8:	2b00      	cmp	r3, #0
 801aeaa:	d009      	beq.n	801aec0 <tcp_output+0x240>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801aeac:	687b      	ldr	r3, [r7, #4]
 801aeae:	8b5b      	ldrh	r3, [r3, #26]
 801aeb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801aeb4:	b29a      	uxth	r2, r3
 801aeb6:	687b      	ldr	r3, [r7, #4]
 801aeb8:	835a      	strh	r2, [r3, #26]
      return err;
 801aeba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801aebe:	e0d2      	b.n	801b066 <tcp_output+0x3e6>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801aec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aec2:	681a      	ldr	r2, [r3, #0]
 801aec4:	687b      	ldr	r3, [r7, #4]
 801aec6:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801aec8:	687b      	ldr	r3, [r7, #4]
 801aeca:	7d1b      	ldrb	r3, [r3, #20]
 801aecc:	2b02      	cmp	r3, #2
 801aece:	d006      	beq.n	801aede <tcp_output+0x25e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801aed0:	687b      	ldr	r3, [r7, #4]
 801aed2:	8b5b      	ldrh	r3, [r3, #26]
 801aed4:	f023 0303 	bic.w	r3, r3, #3
 801aed8:	b29a      	uxth	r2, r3
 801aeda:	687b      	ldr	r3, [r7, #4]
 801aedc:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801aede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aee0:	68db      	ldr	r3, [r3, #12]
 801aee2:	685b      	ldr	r3, [r3, #4]
 801aee4:	4618      	mov	r0, r3
 801aee6:	f7f4 ff1e 	bl	800fd26 <lwip_htonl>
 801aeea:	4604      	mov	r4, r0
 801aeec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aeee:	891b      	ldrh	r3, [r3, #8]
 801aef0:	461d      	mov	r5, r3
 801aef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aef4:	68db      	ldr	r3, [r3, #12]
 801aef6:	899b      	ldrh	r3, [r3, #12]
 801aef8:	b29b      	uxth	r3, r3
 801aefa:	4618      	mov	r0, r3
 801aefc:	f7f4 fefe 	bl	800fcfc <lwip_htons>
 801af00:	4603      	mov	r3, r0
 801af02:	b2db      	uxtb	r3, r3
 801af04:	f003 0303 	and.w	r3, r3, #3
 801af08:	2b00      	cmp	r3, #0
 801af0a:	d00d      	beq.n	801af28 <tcp_output+0x2a8>
 801af0c:	2301      	movs	r3, #1
 801af0e:	e00c      	b.n	801af2a <tcp_output+0x2aa>
 801af10:	08025f90 	.word	0x08025f90
 801af14:	080264f4 	.word	0x080264f4
 801af18:	08026004 	.word	0x08026004
 801af1c:	0802650c 	.word	0x0802650c
 801af20:	24048e94 	.word	0x24048e94
 801af24:	08026534 	.word	0x08026534
 801af28:	2300      	movs	r3, #0
 801af2a:	442b      	add	r3, r5
 801af2c:	4423      	add	r3, r4
 801af2e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801af30:	687b      	ldr	r3, [r7, #4]
 801af32:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801af34:	68bb      	ldr	r3, [r7, #8]
 801af36:	1ad3      	subs	r3, r2, r3
 801af38:	2b00      	cmp	r3, #0
 801af3a:	da02      	bge.n	801af42 <tcp_output+0x2c2>
      pcb->snd_nxt = snd_nxt;
 801af3c:	687b      	ldr	r3, [r7, #4]
 801af3e:	68ba      	ldr	r2, [r7, #8]
 801af40:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801af42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801af44:	891b      	ldrh	r3, [r3, #8]
 801af46:	461c      	mov	r4, r3
 801af48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801af4a:	68db      	ldr	r3, [r3, #12]
 801af4c:	899b      	ldrh	r3, [r3, #12]
 801af4e:	b29b      	uxth	r3, r3
 801af50:	4618      	mov	r0, r3
 801af52:	f7f4 fed3 	bl	800fcfc <lwip_htons>
 801af56:	4603      	mov	r3, r0
 801af58:	b2db      	uxtb	r3, r3
 801af5a:	f003 0303 	and.w	r3, r3, #3
 801af5e:	2b00      	cmp	r3, #0
 801af60:	d001      	beq.n	801af66 <tcp_output+0x2e6>
 801af62:	2301      	movs	r3, #1
 801af64:	e000      	b.n	801af68 <tcp_output+0x2e8>
 801af66:	2300      	movs	r3, #0
 801af68:	4423      	add	r3, r4
 801af6a:	2b00      	cmp	r3, #0
 801af6c:	d049      	beq.n	801b002 <tcp_output+0x382>
      seg->next = NULL;
 801af6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801af70:	2200      	movs	r2, #0
 801af72:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801af74:	687b      	ldr	r3, [r7, #4]
 801af76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801af78:	2b00      	cmp	r3, #0
 801af7a:	d105      	bne.n	801af88 <tcp_output+0x308>
        pcb->unacked = seg;
 801af7c:	687b      	ldr	r3, [r7, #4]
 801af7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801af80:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 801af82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801af84:	623b      	str	r3, [r7, #32]
 801af86:	e03f      	b.n	801b008 <tcp_output+0x388>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801af88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801af8a:	68db      	ldr	r3, [r3, #12]
 801af8c:	685b      	ldr	r3, [r3, #4]
 801af8e:	4618      	mov	r0, r3
 801af90:	f7f4 fec9 	bl	800fd26 <lwip_htonl>
 801af94:	4604      	mov	r4, r0
 801af96:	6a3b      	ldr	r3, [r7, #32]
 801af98:	68db      	ldr	r3, [r3, #12]
 801af9a:	685b      	ldr	r3, [r3, #4]
 801af9c:	4618      	mov	r0, r3
 801af9e:	f7f4 fec2 	bl	800fd26 <lwip_htonl>
 801afa2:	4603      	mov	r3, r0
 801afa4:	1ae3      	subs	r3, r4, r3
 801afa6:	2b00      	cmp	r3, #0
 801afa8:	da24      	bge.n	801aff4 <tcp_output+0x374>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801afaa:	687b      	ldr	r3, [r7, #4]
 801afac:	3370      	adds	r3, #112	; 0x70
 801afae:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801afb0:	e002      	b.n	801afb8 <tcp_output+0x338>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801afb2:	69fb      	ldr	r3, [r7, #28]
 801afb4:	681b      	ldr	r3, [r3, #0]
 801afb6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801afb8:	69fb      	ldr	r3, [r7, #28]
 801afba:	681b      	ldr	r3, [r3, #0]
 801afbc:	2b00      	cmp	r3, #0
 801afbe:	d011      	beq.n	801afe4 <tcp_output+0x364>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801afc0:	69fb      	ldr	r3, [r7, #28]
 801afc2:	681b      	ldr	r3, [r3, #0]
 801afc4:	68db      	ldr	r3, [r3, #12]
 801afc6:	685b      	ldr	r3, [r3, #4]
 801afc8:	4618      	mov	r0, r3
 801afca:	f7f4 feac 	bl	800fd26 <lwip_htonl>
 801afce:	4604      	mov	r4, r0
 801afd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801afd2:	68db      	ldr	r3, [r3, #12]
 801afd4:	685b      	ldr	r3, [r3, #4]
 801afd6:	4618      	mov	r0, r3
 801afd8:	f7f4 fea5 	bl	800fd26 <lwip_htonl>
 801afdc:	4603      	mov	r3, r0
 801afde:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801afe0:	2b00      	cmp	r3, #0
 801afe2:	dbe6      	blt.n	801afb2 <tcp_output+0x332>
          }
          seg->next = (*cur_seg);
 801afe4:	69fb      	ldr	r3, [r7, #28]
 801afe6:	681a      	ldr	r2, [r3, #0]
 801afe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801afea:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801afec:	69fb      	ldr	r3, [r7, #28]
 801afee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801aff0:	601a      	str	r2, [r3, #0]
 801aff2:	e009      	b.n	801b008 <tcp_output+0x388>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801aff4:	6a3b      	ldr	r3, [r7, #32]
 801aff6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801aff8:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801affa:	6a3b      	ldr	r3, [r7, #32]
 801affc:	681b      	ldr	r3, [r3, #0]
 801affe:	623b      	str	r3, [r7, #32]
 801b000:	e002      	b.n	801b008 <tcp_output+0x388>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801b002:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b004:	f7fb ff1a 	bl	8016e3c <tcp_seg_free>
    }
    seg = pcb->unsent;
 801b008:	687b      	ldr	r3, [r7, #4]
 801b00a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b00c:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801b00e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b010:	2b00      	cmp	r3, #0
 801b012:	d012      	beq.n	801b03a <tcp_output+0x3ba>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801b014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b016:	68db      	ldr	r3, [r3, #12]
 801b018:	685b      	ldr	r3, [r3, #4]
 801b01a:	4618      	mov	r0, r3
 801b01c:	f7f4 fe83 	bl	800fd26 <lwip_htonl>
 801b020:	4602      	mov	r2, r0
 801b022:	687b      	ldr	r3, [r7, #4]
 801b024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b026:	1ad3      	subs	r3, r2, r3
 801b028:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b02a:	8912      	ldrh	r2, [r2, #8]
 801b02c:	4413      	add	r3, r2
  while (seg != NULL &&
 801b02e:	69ba      	ldr	r2, [r7, #24]
 801b030:	429a      	cmp	r2, r3
 801b032:	f4bf aeda 	bcs.w	801adea <tcp_output+0x16a>
 801b036:	e000      	b.n	801b03a <tcp_output+0x3ba>
      break;
 801b038:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801b03a:	687b      	ldr	r3, [r7, #4]
 801b03c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b03e:	2b00      	cmp	r3, #0
 801b040:	d108      	bne.n	801b054 <tcp_output+0x3d4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801b042:	687b      	ldr	r3, [r7, #4]
 801b044:	2200      	movs	r2, #0
 801b046:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801b04a:	e004      	b.n	801b056 <tcp_output+0x3d6>
    goto output_done;
 801b04c:	bf00      	nop
 801b04e:	e002      	b.n	801b056 <tcp_output+0x3d6>
    goto output_done;
 801b050:	bf00      	nop
 801b052:	e000      	b.n	801b056 <tcp_output+0x3d6>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801b054:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801b056:	687b      	ldr	r3, [r7, #4]
 801b058:	8b5b      	ldrh	r3, [r3, #26]
 801b05a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801b05e:	b29a      	uxth	r2, r3
 801b060:	687b      	ldr	r3, [r7, #4]
 801b062:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801b064:	2300      	movs	r3, #0
}
 801b066:	4618      	mov	r0, r3
 801b068:	3728      	adds	r7, #40	; 0x28
 801b06a:	46bd      	mov	sp, r7
 801b06c:	bdb0      	pop	{r4, r5, r7, pc}
 801b06e:	bf00      	nop

0801b070 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801b070:	b580      	push	{r7, lr}
 801b072:	b082      	sub	sp, #8
 801b074:	af00      	add	r7, sp, #0
 801b076:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801b078:	687b      	ldr	r3, [r7, #4]
 801b07a:	2b00      	cmp	r3, #0
 801b07c:	d106      	bne.n	801b08c <tcp_output_segment_busy+0x1c>
 801b07e:	4b09      	ldr	r3, [pc, #36]	; (801b0a4 <tcp_output_segment_busy+0x34>)
 801b080:	f240 529a 	movw	r2, #1434	; 0x59a
 801b084:	4908      	ldr	r1, [pc, #32]	; (801b0a8 <tcp_output_segment_busy+0x38>)
 801b086:	4809      	ldr	r0, [pc, #36]	; (801b0ac <tcp_output_segment_busy+0x3c>)
 801b088:	f005 ff62 	bl	8020f50 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801b08c:	687b      	ldr	r3, [r7, #4]
 801b08e:	685b      	ldr	r3, [r3, #4]
 801b090:	7b9b      	ldrb	r3, [r3, #14]
 801b092:	2b01      	cmp	r3, #1
 801b094:	d001      	beq.n	801b09a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801b096:	2301      	movs	r3, #1
 801b098:	e000      	b.n	801b09c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801b09a:	2300      	movs	r3, #0
}
 801b09c:	4618      	mov	r0, r3
 801b09e:	3708      	adds	r7, #8
 801b0a0:	46bd      	mov	sp, r7
 801b0a2:	bd80      	pop	{r7, pc}
 801b0a4:	08025f90 	.word	0x08025f90
 801b0a8:	0802654c 	.word	0x0802654c
 801b0ac:	08026004 	.word	0x08026004

0801b0b0 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801b0b0:	b5b0      	push	{r4, r5, r7, lr}
 801b0b2:	b08c      	sub	sp, #48	; 0x30
 801b0b4:	af04      	add	r7, sp, #16
 801b0b6:	60f8      	str	r0, [r7, #12]
 801b0b8:	60b9      	str	r1, [r7, #8]
 801b0ba:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801b0bc:	68fb      	ldr	r3, [r7, #12]
 801b0be:	2b00      	cmp	r3, #0
 801b0c0:	d106      	bne.n	801b0d0 <tcp_output_segment+0x20>
 801b0c2:	4b64      	ldr	r3, [pc, #400]	; (801b254 <tcp_output_segment+0x1a4>)
 801b0c4:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 801b0c8:	4963      	ldr	r1, [pc, #396]	; (801b258 <tcp_output_segment+0x1a8>)
 801b0ca:	4864      	ldr	r0, [pc, #400]	; (801b25c <tcp_output_segment+0x1ac>)
 801b0cc:	f005 ff40 	bl	8020f50 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801b0d0:	68bb      	ldr	r3, [r7, #8]
 801b0d2:	2b00      	cmp	r3, #0
 801b0d4:	d106      	bne.n	801b0e4 <tcp_output_segment+0x34>
 801b0d6:	4b5f      	ldr	r3, [pc, #380]	; (801b254 <tcp_output_segment+0x1a4>)
 801b0d8:	f240 52b9 	movw	r2, #1465	; 0x5b9
 801b0dc:	4960      	ldr	r1, [pc, #384]	; (801b260 <tcp_output_segment+0x1b0>)
 801b0de:	485f      	ldr	r0, [pc, #380]	; (801b25c <tcp_output_segment+0x1ac>)
 801b0e0:	f005 ff36 	bl	8020f50 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801b0e4:	687b      	ldr	r3, [r7, #4]
 801b0e6:	2b00      	cmp	r3, #0
 801b0e8:	d106      	bne.n	801b0f8 <tcp_output_segment+0x48>
 801b0ea:	4b5a      	ldr	r3, [pc, #360]	; (801b254 <tcp_output_segment+0x1a4>)
 801b0ec:	f240 52ba 	movw	r2, #1466	; 0x5ba
 801b0f0:	495c      	ldr	r1, [pc, #368]	; (801b264 <tcp_output_segment+0x1b4>)
 801b0f2:	485a      	ldr	r0, [pc, #360]	; (801b25c <tcp_output_segment+0x1ac>)
 801b0f4:	f005 ff2c 	bl	8020f50 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801b0f8:	68f8      	ldr	r0, [r7, #12]
 801b0fa:	f7ff ffb9 	bl	801b070 <tcp_output_segment_busy>
 801b0fe:	4603      	mov	r3, r0
 801b100:	2b00      	cmp	r3, #0
 801b102:	d001      	beq.n	801b108 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801b104:	2300      	movs	r3, #0
 801b106:	e0a0      	b.n	801b24a <tcp_output_segment+0x19a>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801b108:	68bb      	ldr	r3, [r7, #8]
 801b10a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801b10c:	68fb      	ldr	r3, [r7, #12]
 801b10e:	68dc      	ldr	r4, [r3, #12]
 801b110:	4610      	mov	r0, r2
 801b112:	f7f4 fe08 	bl	800fd26 <lwip_htonl>
 801b116:	4603      	mov	r3, r0
 801b118:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801b11a:	68bb      	ldr	r3, [r7, #8]
 801b11c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801b11e:	68fb      	ldr	r3, [r7, #12]
 801b120:	68dc      	ldr	r4, [r3, #12]
 801b122:	4610      	mov	r0, r2
 801b124:	f7f4 fdea 	bl	800fcfc <lwip_htons>
 801b128:	4603      	mov	r3, r0
 801b12a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801b12c:	68bb      	ldr	r3, [r7, #8]
 801b12e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b130:	68ba      	ldr	r2, [r7, #8]
 801b132:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801b134:	441a      	add	r2, r3
 801b136:	68bb      	ldr	r3, [r7, #8]
 801b138:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801b13a:	68fb      	ldr	r3, [r7, #12]
 801b13c:	68db      	ldr	r3, [r3, #12]
 801b13e:	3314      	adds	r3, #20
 801b140:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801b142:	68fb      	ldr	r3, [r7, #12]
 801b144:	7a9b      	ldrb	r3, [r3, #10]
 801b146:	f003 0301 	and.w	r3, r3, #1
 801b14a:	2b00      	cmp	r3, #0
 801b14c:	d015      	beq.n	801b17a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801b14e:	68bb      	ldr	r3, [r7, #8]
 801b150:	3304      	adds	r3, #4
 801b152:	461a      	mov	r2, r3
 801b154:	6879      	ldr	r1, [r7, #4]
 801b156:	f44f 7006 	mov.w	r0, #536	; 0x218
 801b15a:	f7fc fa33 	bl	80175c4 <tcp_eff_send_mss_netif>
 801b15e:	4603      	mov	r3, r0
 801b160:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801b162:	8b7b      	ldrh	r3, [r7, #26]
 801b164:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 801b168:	4618      	mov	r0, r3
 801b16a:	f7f4 fddc 	bl	800fd26 <lwip_htonl>
 801b16e:	4602      	mov	r2, r0
 801b170:	69fb      	ldr	r3, [r7, #28]
 801b172:	601a      	str	r2, [r3, #0]
    opts += 1;
 801b174:	69fb      	ldr	r3, [r7, #28]
 801b176:	3304      	adds	r3, #4
 801b178:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801b17a:	68bb      	ldr	r3, [r7, #8]
 801b17c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801b180:	2b00      	cmp	r3, #0
 801b182:	da02      	bge.n	801b18a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801b184:	68bb      	ldr	r3, [r7, #8]
 801b186:	2200      	movs	r2, #0
 801b188:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801b18a:	68bb      	ldr	r3, [r7, #8]
 801b18c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b18e:	2b00      	cmp	r3, #0
 801b190:	d10c      	bne.n	801b1ac <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801b192:	4b35      	ldr	r3, [pc, #212]	; (801b268 <tcp_output_segment+0x1b8>)
 801b194:	681a      	ldr	r2, [r3, #0]
 801b196:	68bb      	ldr	r3, [r7, #8]
 801b198:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801b19a:	68fb      	ldr	r3, [r7, #12]
 801b19c:	68db      	ldr	r3, [r3, #12]
 801b19e:	685b      	ldr	r3, [r3, #4]
 801b1a0:	4618      	mov	r0, r3
 801b1a2:	f7f4 fdc0 	bl	800fd26 <lwip_htonl>
 801b1a6:	4602      	mov	r2, r0
 801b1a8:	68bb      	ldr	r3, [r7, #8]
 801b1aa:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801b1ac:	68fb      	ldr	r3, [r7, #12]
 801b1ae:	68db      	ldr	r3, [r3, #12]
 801b1b0:	461a      	mov	r2, r3
 801b1b2:	68fb      	ldr	r3, [r7, #12]
 801b1b4:	685b      	ldr	r3, [r3, #4]
 801b1b6:	685b      	ldr	r3, [r3, #4]
 801b1b8:	1ad3      	subs	r3, r2, r3
 801b1ba:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801b1bc:	68fb      	ldr	r3, [r7, #12]
 801b1be:	685b      	ldr	r3, [r3, #4]
 801b1c0:	8959      	ldrh	r1, [r3, #10]
 801b1c2:	68fb      	ldr	r3, [r7, #12]
 801b1c4:	685b      	ldr	r3, [r3, #4]
 801b1c6:	8b3a      	ldrh	r2, [r7, #24]
 801b1c8:	1a8a      	subs	r2, r1, r2
 801b1ca:	b292      	uxth	r2, r2
 801b1cc:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801b1ce:	68fb      	ldr	r3, [r7, #12]
 801b1d0:	685b      	ldr	r3, [r3, #4]
 801b1d2:	8919      	ldrh	r1, [r3, #8]
 801b1d4:	68fb      	ldr	r3, [r7, #12]
 801b1d6:	685b      	ldr	r3, [r3, #4]
 801b1d8:	8b3a      	ldrh	r2, [r7, #24]
 801b1da:	1a8a      	subs	r2, r1, r2
 801b1dc:	b292      	uxth	r2, r2
 801b1de:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801b1e0:	68fb      	ldr	r3, [r7, #12]
 801b1e2:	685b      	ldr	r3, [r3, #4]
 801b1e4:	68fa      	ldr	r2, [r7, #12]
 801b1e6:	68d2      	ldr	r2, [r2, #12]
 801b1e8:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801b1ea:	68fb      	ldr	r3, [r7, #12]
 801b1ec:	68db      	ldr	r3, [r3, #12]
 801b1ee:	2200      	movs	r2, #0
 801b1f0:	741a      	strb	r2, [r3, #16]
 801b1f2:	2200      	movs	r2, #0
 801b1f4:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801b1f6:	68fb      	ldr	r3, [r7, #12]
 801b1f8:	68db      	ldr	r3, [r3, #12]
 801b1fa:	f103 0214 	add.w	r2, r3, #20
 801b1fe:	68fb      	ldr	r3, [r7, #12]
 801b200:	7a9b      	ldrb	r3, [r3, #10]
 801b202:	009b      	lsls	r3, r3, #2
 801b204:	f003 0304 	and.w	r3, r3, #4
 801b208:	4413      	add	r3, r2
 801b20a:	69fa      	ldr	r2, [r7, #28]
 801b20c:	429a      	cmp	r2, r3
 801b20e:	d006      	beq.n	801b21e <tcp_output_segment+0x16e>
 801b210:	4b10      	ldr	r3, [pc, #64]	; (801b254 <tcp_output_segment+0x1a4>)
 801b212:	f240 621c 	movw	r2, #1564	; 0x61c
 801b216:	4915      	ldr	r1, [pc, #84]	; (801b26c <tcp_output_segment+0x1bc>)
 801b218:	4810      	ldr	r0, [pc, #64]	; (801b25c <tcp_output_segment+0x1ac>)
 801b21a:	f005 fe99 	bl	8020f50 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801b21e:	68fb      	ldr	r3, [r7, #12]
 801b220:	6858      	ldr	r0, [r3, #4]
 801b222:	68b9      	ldr	r1, [r7, #8]
 801b224:	68bb      	ldr	r3, [r7, #8]
 801b226:	1d1c      	adds	r4, r3, #4
 801b228:	68bb      	ldr	r3, [r7, #8]
 801b22a:	7add      	ldrb	r5, [r3, #11]
 801b22c:	68bb      	ldr	r3, [r7, #8]
 801b22e:	7a9b      	ldrb	r3, [r3, #10]
 801b230:	687a      	ldr	r2, [r7, #4]
 801b232:	9202      	str	r2, [sp, #8]
 801b234:	2206      	movs	r2, #6
 801b236:	9201      	str	r2, [sp, #4]
 801b238:	9300      	str	r3, [sp, #0]
 801b23a:	462b      	mov	r3, r5
 801b23c:	4622      	mov	r2, r4
 801b23e:	f7f6 fa0f 	bl	8011660 <ip4_output_if>
 801b242:	4603      	mov	r3, r0
 801b244:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801b246:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801b24a:	4618      	mov	r0, r3
 801b24c:	3720      	adds	r7, #32
 801b24e:	46bd      	mov	sp, r7
 801b250:	bdb0      	pop	{r4, r5, r7, pc}
 801b252:	bf00      	nop
 801b254:	08025f90 	.word	0x08025f90
 801b258:	08026574 	.word	0x08026574
 801b25c:	08026004 	.word	0x08026004
 801b260:	08026594 	.word	0x08026594
 801b264:	080265b4 	.word	0x080265b4
 801b268:	24048e84 	.word	0x24048e84
 801b26c:	080265d8 	.word	0x080265d8

0801b270 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801b270:	b5b0      	push	{r4, r5, r7, lr}
 801b272:	b084      	sub	sp, #16
 801b274:	af00      	add	r7, sp, #0
 801b276:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801b278:	687b      	ldr	r3, [r7, #4]
 801b27a:	2b00      	cmp	r3, #0
 801b27c:	d106      	bne.n	801b28c <tcp_rexmit_rto_prepare+0x1c>
 801b27e:	4b31      	ldr	r3, [pc, #196]	; (801b344 <tcp_rexmit_rto_prepare+0xd4>)
 801b280:	f240 6263 	movw	r2, #1635	; 0x663
 801b284:	4930      	ldr	r1, [pc, #192]	; (801b348 <tcp_rexmit_rto_prepare+0xd8>)
 801b286:	4831      	ldr	r0, [pc, #196]	; (801b34c <tcp_rexmit_rto_prepare+0xdc>)
 801b288:	f005 fe62 	bl	8020f50 <iprintf>

  if (pcb->unacked == NULL) {
 801b28c:	687b      	ldr	r3, [r7, #4]
 801b28e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b290:	2b00      	cmp	r3, #0
 801b292:	d102      	bne.n	801b29a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801b294:	f06f 0305 	mvn.w	r3, #5
 801b298:	e050      	b.n	801b33c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801b29a:	687b      	ldr	r3, [r7, #4]
 801b29c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b29e:	60fb      	str	r3, [r7, #12]
 801b2a0:	e00b      	b.n	801b2ba <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801b2a2:	68f8      	ldr	r0, [r7, #12]
 801b2a4:	f7ff fee4 	bl	801b070 <tcp_output_segment_busy>
 801b2a8:	4603      	mov	r3, r0
 801b2aa:	2b00      	cmp	r3, #0
 801b2ac:	d002      	beq.n	801b2b4 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801b2ae:	f06f 0305 	mvn.w	r3, #5
 801b2b2:	e043      	b.n	801b33c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801b2b4:	68fb      	ldr	r3, [r7, #12]
 801b2b6:	681b      	ldr	r3, [r3, #0]
 801b2b8:	60fb      	str	r3, [r7, #12]
 801b2ba:	68fb      	ldr	r3, [r7, #12]
 801b2bc:	681b      	ldr	r3, [r3, #0]
 801b2be:	2b00      	cmp	r3, #0
 801b2c0:	d1ef      	bne.n	801b2a2 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801b2c2:	68f8      	ldr	r0, [r7, #12]
 801b2c4:	f7ff fed4 	bl	801b070 <tcp_output_segment_busy>
 801b2c8:	4603      	mov	r3, r0
 801b2ca:	2b00      	cmp	r3, #0
 801b2cc:	d002      	beq.n	801b2d4 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801b2ce:	f06f 0305 	mvn.w	r3, #5
 801b2d2:	e033      	b.n	801b33c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801b2d4:	687b      	ldr	r3, [r7, #4]
 801b2d6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801b2d8:	68fb      	ldr	r3, [r7, #12]
 801b2da:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801b2dc:	687b      	ldr	r3, [r7, #4]
 801b2de:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801b2e0:	687b      	ldr	r3, [r7, #4]
 801b2e2:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801b2e4:	687b      	ldr	r3, [r7, #4]
 801b2e6:	2200      	movs	r2, #0
 801b2e8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801b2ea:	687b      	ldr	r3, [r7, #4]
 801b2ec:	8b5b      	ldrh	r3, [r3, #26]
 801b2ee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801b2f2:	b29a      	uxth	r2, r3
 801b2f4:	687b      	ldr	r3, [r7, #4]
 801b2f6:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801b2f8:	68fb      	ldr	r3, [r7, #12]
 801b2fa:	68db      	ldr	r3, [r3, #12]
 801b2fc:	685b      	ldr	r3, [r3, #4]
 801b2fe:	4618      	mov	r0, r3
 801b300:	f7f4 fd11 	bl	800fd26 <lwip_htonl>
 801b304:	4604      	mov	r4, r0
 801b306:	68fb      	ldr	r3, [r7, #12]
 801b308:	891b      	ldrh	r3, [r3, #8]
 801b30a:	461d      	mov	r5, r3
 801b30c:	68fb      	ldr	r3, [r7, #12]
 801b30e:	68db      	ldr	r3, [r3, #12]
 801b310:	899b      	ldrh	r3, [r3, #12]
 801b312:	b29b      	uxth	r3, r3
 801b314:	4618      	mov	r0, r3
 801b316:	f7f4 fcf1 	bl	800fcfc <lwip_htons>
 801b31a:	4603      	mov	r3, r0
 801b31c:	b2db      	uxtb	r3, r3
 801b31e:	f003 0303 	and.w	r3, r3, #3
 801b322:	2b00      	cmp	r3, #0
 801b324:	d001      	beq.n	801b32a <tcp_rexmit_rto_prepare+0xba>
 801b326:	2301      	movs	r3, #1
 801b328:	e000      	b.n	801b32c <tcp_rexmit_rto_prepare+0xbc>
 801b32a:	2300      	movs	r3, #0
 801b32c:	442b      	add	r3, r5
 801b32e:	18e2      	adds	r2, r4, r3
 801b330:	687b      	ldr	r3, [r7, #4]
 801b332:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801b334:	687b      	ldr	r3, [r7, #4]
 801b336:	2200      	movs	r2, #0
 801b338:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801b33a:	2300      	movs	r3, #0
}
 801b33c:	4618      	mov	r0, r3
 801b33e:	3710      	adds	r7, #16
 801b340:	46bd      	mov	sp, r7
 801b342:	bdb0      	pop	{r4, r5, r7, pc}
 801b344:	08025f90 	.word	0x08025f90
 801b348:	080265ec 	.word	0x080265ec
 801b34c:	08026004 	.word	0x08026004

0801b350 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801b350:	b580      	push	{r7, lr}
 801b352:	b082      	sub	sp, #8
 801b354:	af00      	add	r7, sp, #0
 801b356:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801b358:	687b      	ldr	r3, [r7, #4]
 801b35a:	2b00      	cmp	r3, #0
 801b35c:	d106      	bne.n	801b36c <tcp_rexmit_rto_commit+0x1c>
 801b35e:	4b0d      	ldr	r3, [pc, #52]	; (801b394 <tcp_rexmit_rto_commit+0x44>)
 801b360:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801b364:	490c      	ldr	r1, [pc, #48]	; (801b398 <tcp_rexmit_rto_commit+0x48>)
 801b366:	480d      	ldr	r0, [pc, #52]	; (801b39c <tcp_rexmit_rto_commit+0x4c>)
 801b368:	f005 fdf2 	bl	8020f50 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801b36c:	687b      	ldr	r3, [r7, #4]
 801b36e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801b372:	2bff      	cmp	r3, #255	; 0xff
 801b374:	d007      	beq.n	801b386 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801b376:	687b      	ldr	r3, [r7, #4]
 801b378:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801b37c:	3301      	adds	r3, #1
 801b37e:	b2da      	uxtb	r2, r3
 801b380:	687b      	ldr	r3, [r7, #4]
 801b382:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801b386:	6878      	ldr	r0, [r7, #4]
 801b388:	f7ff fc7a 	bl	801ac80 <tcp_output>
}
 801b38c:	bf00      	nop
 801b38e:	3708      	adds	r7, #8
 801b390:	46bd      	mov	sp, r7
 801b392:	bd80      	pop	{r7, pc}
 801b394:	08025f90 	.word	0x08025f90
 801b398:	08026610 	.word	0x08026610
 801b39c:	08026004 	.word	0x08026004

0801b3a0 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801b3a0:	b580      	push	{r7, lr}
 801b3a2:	b082      	sub	sp, #8
 801b3a4:	af00      	add	r7, sp, #0
 801b3a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801b3a8:	687b      	ldr	r3, [r7, #4]
 801b3aa:	2b00      	cmp	r3, #0
 801b3ac:	d106      	bne.n	801b3bc <tcp_rexmit_rto+0x1c>
 801b3ae:	4b0a      	ldr	r3, [pc, #40]	; (801b3d8 <tcp_rexmit_rto+0x38>)
 801b3b0:	f240 62ad 	movw	r2, #1709	; 0x6ad
 801b3b4:	4909      	ldr	r1, [pc, #36]	; (801b3dc <tcp_rexmit_rto+0x3c>)
 801b3b6:	480a      	ldr	r0, [pc, #40]	; (801b3e0 <tcp_rexmit_rto+0x40>)
 801b3b8:	f005 fdca 	bl	8020f50 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801b3bc:	6878      	ldr	r0, [r7, #4]
 801b3be:	f7ff ff57 	bl	801b270 <tcp_rexmit_rto_prepare>
 801b3c2:	4603      	mov	r3, r0
 801b3c4:	2b00      	cmp	r3, #0
 801b3c6:	d102      	bne.n	801b3ce <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801b3c8:	6878      	ldr	r0, [r7, #4]
 801b3ca:	f7ff ffc1 	bl	801b350 <tcp_rexmit_rto_commit>
  }
}
 801b3ce:	bf00      	nop
 801b3d0:	3708      	adds	r7, #8
 801b3d2:	46bd      	mov	sp, r7
 801b3d4:	bd80      	pop	{r7, pc}
 801b3d6:	bf00      	nop
 801b3d8:	08025f90 	.word	0x08025f90
 801b3dc:	08026634 	.word	0x08026634
 801b3e0:	08026004 	.word	0x08026004

0801b3e4 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801b3e4:	b590      	push	{r4, r7, lr}
 801b3e6:	b085      	sub	sp, #20
 801b3e8:	af00      	add	r7, sp, #0
 801b3ea:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801b3ec:	687b      	ldr	r3, [r7, #4]
 801b3ee:	2b00      	cmp	r3, #0
 801b3f0:	d106      	bne.n	801b400 <tcp_rexmit+0x1c>
 801b3f2:	4b2f      	ldr	r3, [pc, #188]	; (801b4b0 <tcp_rexmit+0xcc>)
 801b3f4:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801b3f8:	492e      	ldr	r1, [pc, #184]	; (801b4b4 <tcp_rexmit+0xd0>)
 801b3fa:	482f      	ldr	r0, [pc, #188]	; (801b4b8 <tcp_rexmit+0xd4>)
 801b3fc:	f005 fda8 	bl	8020f50 <iprintf>

  if (pcb->unacked == NULL) {
 801b400:	687b      	ldr	r3, [r7, #4]
 801b402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b404:	2b00      	cmp	r3, #0
 801b406:	d102      	bne.n	801b40e <tcp_rexmit+0x2a>
    return ERR_VAL;
 801b408:	f06f 0305 	mvn.w	r3, #5
 801b40c:	e04c      	b.n	801b4a8 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801b40e:	687b      	ldr	r3, [r7, #4]
 801b410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b412:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801b414:	68b8      	ldr	r0, [r7, #8]
 801b416:	f7ff fe2b 	bl	801b070 <tcp_output_segment_busy>
 801b41a:	4603      	mov	r3, r0
 801b41c:	2b00      	cmp	r3, #0
 801b41e:	d002      	beq.n	801b426 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801b420:	f06f 0305 	mvn.w	r3, #5
 801b424:	e040      	b.n	801b4a8 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801b426:	68bb      	ldr	r3, [r7, #8]
 801b428:	681a      	ldr	r2, [r3, #0]
 801b42a:	687b      	ldr	r3, [r7, #4]
 801b42c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801b42e:	687b      	ldr	r3, [r7, #4]
 801b430:	336c      	adds	r3, #108	; 0x6c
 801b432:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801b434:	e002      	b.n	801b43c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801b436:	68fb      	ldr	r3, [r7, #12]
 801b438:	681b      	ldr	r3, [r3, #0]
 801b43a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801b43c:	68fb      	ldr	r3, [r7, #12]
 801b43e:	681b      	ldr	r3, [r3, #0]
 801b440:	2b00      	cmp	r3, #0
 801b442:	d011      	beq.n	801b468 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801b444:	68fb      	ldr	r3, [r7, #12]
 801b446:	681b      	ldr	r3, [r3, #0]
 801b448:	68db      	ldr	r3, [r3, #12]
 801b44a:	685b      	ldr	r3, [r3, #4]
 801b44c:	4618      	mov	r0, r3
 801b44e:	f7f4 fc6a 	bl	800fd26 <lwip_htonl>
 801b452:	4604      	mov	r4, r0
 801b454:	68bb      	ldr	r3, [r7, #8]
 801b456:	68db      	ldr	r3, [r3, #12]
 801b458:	685b      	ldr	r3, [r3, #4]
 801b45a:	4618      	mov	r0, r3
 801b45c:	f7f4 fc63 	bl	800fd26 <lwip_htonl>
 801b460:	4603      	mov	r3, r0
 801b462:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801b464:	2b00      	cmp	r3, #0
 801b466:	dbe6      	blt.n	801b436 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801b468:	68fb      	ldr	r3, [r7, #12]
 801b46a:	681a      	ldr	r2, [r3, #0]
 801b46c:	68bb      	ldr	r3, [r7, #8]
 801b46e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801b470:	68fb      	ldr	r3, [r7, #12]
 801b472:	68ba      	ldr	r2, [r7, #8]
 801b474:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801b476:	68bb      	ldr	r3, [r7, #8]
 801b478:	681b      	ldr	r3, [r3, #0]
 801b47a:	2b00      	cmp	r3, #0
 801b47c:	d103      	bne.n	801b486 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801b47e:	687b      	ldr	r3, [r7, #4]
 801b480:	2200      	movs	r2, #0
 801b482:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801b486:	687b      	ldr	r3, [r7, #4]
 801b488:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801b48c:	2bff      	cmp	r3, #255	; 0xff
 801b48e:	d007      	beq.n	801b4a0 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801b490:	687b      	ldr	r3, [r7, #4]
 801b492:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801b496:	3301      	adds	r3, #1
 801b498:	b2da      	uxtb	r2, r3
 801b49a:	687b      	ldr	r3, [r7, #4]
 801b49c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801b4a0:	687b      	ldr	r3, [r7, #4]
 801b4a2:	2200      	movs	r2, #0
 801b4a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801b4a6:	2300      	movs	r3, #0
}
 801b4a8:	4618      	mov	r0, r3
 801b4aa:	3714      	adds	r7, #20
 801b4ac:	46bd      	mov	sp, r7
 801b4ae:	bd90      	pop	{r4, r7, pc}
 801b4b0:	08025f90 	.word	0x08025f90
 801b4b4:	08026650 	.word	0x08026650
 801b4b8:	08026004 	.word	0x08026004

0801b4bc <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801b4bc:	b580      	push	{r7, lr}
 801b4be:	b082      	sub	sp, #8
 801b4c0:	af00      	add	r7, sp, #0
 801b4c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801b4c4:	687b      	ldr	r3, [r7, #4]
 801b4c6:	2b00      	cmp	r3, #0
 801b4c8:	d106      	bne.n	801b4d8 <tcp_rexmit_fast+0x1c>
 801b4ca:	4b2f      	ldr	r3, [pc, #188]	; (801b588 <tcp_rexmit_fast+0xcc>)
 801b4cc:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801b4d0:	492e      	ldr	r1, [pc, #184]	; (801b58c <tcp_rexmit_fast+0xd0>)
 801b4d2:	482f      	ldr	r0, [pc, #188]	; (801b590 <tcp_rexmit_fast+0xd4>)
 801b4d4:	f005 fd3c 	bl	8020f50 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801b4d8:	687b      	ldr	r3, [r7, #4]
 801b4da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b4dc:	2b00      	cmp	r3, #0
 801b4de:	d04f      	beq.n	801b580 <tcp_rexmit_fast+0xc4>
 801b4e0:	687b      	ldr	r3, [r7, #4]
 801b4e2:	8b5b      	ldrh	r3, [r3, #26]
 801b4e4:	f003 0304 	and.w	r3, r3, #4
 801b4e8:	2b00      	cmp	r3, #0
 801b4ea:	d149      	bne.n	801b580 <tcp_rexmit_fast+0xc4>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801b4ec:	6878      	ldr	r0, [r7, #4]
 801b4ee:	f7ff ff79 	bl	801b3e4 <tcp_rexmit>
 801b4f2:	4603      	mov	r3, r0
 801b4f4:	2b00      	cmp	r3, #0
 801b4f6:	d143      	bne.n	801b580 <tcp_rexmit_fast+0xc4>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801b4f8:	687b      	ldr	r3, [r7, #4]
 801b4fa:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801b4fe:	687b      	ldr	r3, [r7, #4]
 801b500:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801b504:	429a      	cmp	r2, r3
 801b506:	d208      	bcs.n	801b51a <tcp_rexmit_fast+0x5e>
 801b508:	687b      	ldr	r3, [r7, #4]
 801b50a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801b50e:	2b00      	cmp	r3, #0
 801b510:	da00      	bge.n	801b514 <tcp_rexmit_fast+0x58>
 801b512:	3301      	adds	r3, #1
 801b514:	105b      	asrs	r3, r3, #1
 801b516:	b29b      	uxth	r3, r3
 801b518:	e007      	b.n	801b52a <tcp_rexmit_fast+0x6e>
 801b51a:	687b      	ldr	r3, [r7, #4]
 801b51c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801b520:	2b00      	cmp	r3, #0
 801b522:	da00      	bge.n	801b526 <tcp_rexmit_fast+0x6a>
 801b524:	3301      	adds	r3, #1
 801b526:	105b      	asrs	r3, r3, #1
 801b528:	b29b      	uxth	r3, r3
 801b52a:	687a      	ldr	r2, [r7, #4]
 801b52c:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801b530:	687b      	ldr	r3, [r7, #4]
 801b532:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801b536:	461a      	mov	r2, r3
 801b538:	687b      	ldr	r3, [r7, #4]
 801b53a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b53c:	005b      	lsls	r3, r3, #1
 801b53e:	429a      	cmp	r2, r3
 801b540:	d206      	bcs.n	801b550 <tcp_rexmit_fast+0x94>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801b542:	687b      	ldr	r3, [r7, #4]
 801b544:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b546:	005b      	lsls	r3, r3, #1
 801b548:	b29a      	uxth	r2, r3
 801b54a:	687b      	ldr	r3, [r7, #4]
 801b54c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801b550:	687b      	ldr	r3, [r7, #4]
 801b552:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801b556:	687b      	ldr	r3, [r7, #4]
 801b558:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b55a:	4619      	mov	r1, r3
 801b55c:	0049      	lsls	r1, r1, #1
 801b55e:	440b      	add	r3, r1
 801b560:	b29b      	uxth	r3, r3
 801b562:	4413      	add	r3, r2
 801b564:	b29a      	uxth	r2, r3
 801b566:	687b      	ldr	r3, [r7, #4]
 801b568:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801b56c:	687b      	ldr	r3, [r7, #4]
 801b56e:	8b5b      	ldrh	r3, [r3, #26]
 801b570:	f043 0304 	orr.w	r3, r3, #4
 801b574:	b29a      	uxth	r2, r3
 801b576:	687b      	ldr	r3, [r7, #4]
 801b578:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801b57a:	687b      	ldr	r3, [r7, #4]
 801b57c:	2200      	movs	r2, #0
 801b57e:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801b580:	bf00      	nop
 801b582:	3708      	adds	r7, #8
 801b584:	46bd      	mov	sp, r7
 801b586:	bd80      	pop	{r7, pc}
 801b588:	08025f90 	.word	0x08025f90
 801b58c:	08026668 	.word	0x08026668
 801b590:	08026004 	.word	0x08026004

0801b594 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801b594:	b580      	push	{r7, lr}
 801b596:	b086      	sub	sp, #24
 801b598:	af00      	add	r7, sp, #0
 801b59a:	60f8      	str	r0, [r7, #12]
 801b59c:	607b      	str	r3, [r7, #4]
 801b59e:	460b      	mov	r3, r1
 801b5a0:	817b      	strh	r3, [r7, #10]
 801b5a2:	4613      	mov	r3, r2
 801b5a4:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801b5a6:	897a      	ldrh	r2, [r7, #10]
 801b5a8:	893b      	ldrh	r3, [r7, #8]
 801b5aa:	4413      	add	r3, r2
 801b5ac:	b29b      	uxth	r3, r3
 801b5ae:	3314      	adds	r3, #20
 801b5b0:	b29b      	uxth	r3, r3
 801b5b2:	f44f 7220 	mov.w	r2, #640	; 0x280
 801b5b6:	4619      	mov	r1, r3
 801b5b8:	2022      	movs	r0, #34	; 0x22
 801b5ba:	f7f8 fa37 	bl	8013a2c <pbuf_alloc>
 801b5be:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801b5c0:	697b      	ldr	r3, [r7, #20]
 801b5c2:	2b00      	cmp	r3, #0
 801b5c4:	d04e      	beq.n	801b664 <tcp_output_alloc_header_common+0xd0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801b5c6:	697b      	ldr	r3, [r7, #20]
 801b5c8:	895b      	ldrh	r3, [r3, #10]
 801b5ca:	461a      	mov	r2, r3
 801b5cc:	897b      	ldrh	r3, [r7, #10]
 801b5ce:	3314      	adds	r3, #20
 801b5d0:	429a      	cmp	r2, r3
 801b5d2:	da06      	bge.n	801b5e2 <tcp_output_alloc_header_common+0x4e>
 801b5d4:	4b26      	ldr	r3, [pc, #152]	; (801b670 <tcp_output_alloc_header_common+0xdc>)
 801b5d6:	f240 7224 	movw	r2, #1828	; 0x724
 801b5da:	4926      	ldr	r1, [pc, #152]	; (801b674 <tcp_output_alloc_header_common+0xe0>)
 801b5dc:	4826      	ldr	r0, [pc, #152]	; (801b678 <tcp_output_alloc_header_common+0xe4>)
 801b5de:	f005 fcb7 	bl	8020f50 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801b5e2:	697b      	ldr	r3, [r7, #20]
 801b5e4:	685b      	ldr	r3, [r3, #4]
 801b5e6:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801b5e8:	8c3b      	ldrh	r3, [r7, #32]
 801b5ea:	4618      	mov	r0, r3
 801b5ec:	f7f4 fb86 	bl	800fcfc <lwip_htons>
 801b5f0:	4603      	mov	r3, r0
 801b5f2:	461a      	mov	r2, r3
 801b5f4:	693b      	ldr	r3, [r7, #16]
 801b5f6:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801b5f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b5fa:	4618      	mov	r0, r3
 801b5fc:	f7f4 fb7e 	bl	800fcfc <lwip_htons>
 801b600:	4603      	mov	r3, r0
 801b602:	461a      	mov	r2, r3
 801b604:	693b      	ldr	r3, [r7, #16]
 801b606:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801b608:	693b      	ldr	r3, [r7, #16]
 801b60a:	687a      	ldr	r2, [r7, #4]
 801b60c:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801b60e:	68f8      	ldr	r0, [r7, #12]
 801b610:	f7f4 fb89 	bl	800fd26 <lwip_htonl>
 801b614:	4602      	mov	r2, r0
 801b616:	693b      	ldr	r3, [r7, #16]
 801b618:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801b61a:	897b      	ldrh	r3, [r7, #10]
 801b61c:	089b      	lsrs	r3, r3, #2
 801b61e:	b29b      	uxth	r3, r3
 801b620:	3305      	adds	r3, #5
 801b622:	b29b      	uxth	r3, r3
 801b624:	031b      	lsls	r3, r3, #12
 801b626:	b29a      	uxth	r2, r3
 801b628:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801b62c:	b29b      	uxth	r3, r3
 801b62e:	4313      	orrs	r3, r2
 801b630:	b29b      	uxth	r3, r3
 801b632:	4618      	mov	r0, r3
 801b634:	f7f4 fb62 	bl	800fcfc <lwip_htons>
 801b638:	4603      	mov	r3, r0
 801b63a:	461a      	mov	r2, r3
 801b63c:	693b      	ldr	r3, [r7, #16]
 801b63e:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801b640:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801b642:	4618      	mov	r0, r3
 801b644:	f7f4 fb5a 	bl	800fcfc <lwip_htons>
 801b648:	4603      	mov	r3, r0
 801b64a:	461a      	mov	r2, r3
 801b64c:	693b      	ldr	r3, [r7, #16]
 801b64e:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801b650:	693b      	ldr	r3, [r7, #16]
 801b652:	2200      	movs	r2, #0
 801b654:	741a      	strb	r2, [r3, #16]
 801b656:	2200      	movs	r2, #0
 801b658:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801b65a:	693b      	ldr	r3, [r7, #16]
 801b65c:	2200      	movs	r2, #0
 801b65e:	749a      	strb	r2, [r3, #18]
 801b660:	2200      	movs	r2, #0
 801b662:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801b664:	697b      	ldr	r3, [r7, #20]
}
 801b666:	4618      	mov	r0, r3
 801b668:	3718      	adds	r7, #24
 801b66a:	46bd      	mov	sp, r7
 801b66c:	bd80      	pop	{r7, pc}
 801b66e:	bf00      	nop
 801b670:	08025f90 	.word	0x08025f90
 801b674:	08026688 	.word	0x08026688
 801b678:	08026004 	.word	0x08026004

0801b67c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801b67c:	b5b0      	push	{r4, r5, r7, lr}
 801b67e:	b08a      	sub	sp, #40	; 0x28
 801b680:	af04      	add	r7, sp, #16
 801b682:	60f8      	str	r0, [r7, #12]
 801b684:	607b      	str	r3, [r7, #4]
 801b686:	460b      	mov	r3, r1
 801b688:	817b      	strh	r3, [r7, #10]
 801b68a:	4613      	mov	r3, r2
 801b68c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801b68e:	68fb      	ldr	r3, [r7, #12]
 801b690:	2b00      	cmp	r3, #0
 801b692:	d106      	bne.n	801b6a2 <tcp_output_alloc_header+0x26>
 801b694:	4b15      	ldr	r3, [pc, #84]	; (801b6ec <tcp_output_alloc_header+0x70>)
 801b696:	f240 7242 	movw	r2, #1858	; 0x742
 801b69a:	4915      	ldr	r1, [pc, #84]	; (801b6f0 <tcp_output_alloc_header+0x74>)
 801b69c:	4815      	ldr	r0, [pc, #84]	; (801b6f4 <tcp_output_alloc_header+0x78>)
 801b69e:	f005 fc57 	bl	8020f50 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801b6a2:	68fb      	ldr	r3, [r7, #12]
 801b6a4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801b6a6:	68fb      	ldr	r3, [r7, #12]
 801b6a8:	8adb      	ldrh	r3, [r3, #22]
 801b6aa:	68fa      	ldr	r2, [r7, #12]
 801b6ac:	8b12      	ldrh	r2, [r2, #24]
 801b6ae:	68f9      	ldr	r1, [r7, #12]
 801b6b0:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801b6b2:	893d      	ldrh	r5, [r7, #8]
 801b6b4:	897c      	ldrh	r4, [r7, #10]
 801b6b6:	9103      	str	r1, [sp, #12]
 801b6b8:	2110      	movs	r1, #16
 801b6ba:	9102      	str	r1, [sp, #8]
 801b6bc:	9201      	str	r2, [sp, #4]
 801b6be:	9300      	str	r3, [sp, #0]
 801b6c0:	687b      	ldr	r3, [r7, #4]
 801b6c2:	462a      	mov	r2, r5
 801b6c4:	4621      	mov	r1, r4
 801b6c6:	f7ff ff65 	bl	801b594 <tcp_output_alloc_header_common>
 801b6ca:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801b6cc:	697b      	ldr	r3, [r7, #20]
 801b6ce:	2b00      	cmp	r3, #0
 801b6d0:	d006      	beq.n	801b6e0 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801b6d2:	68fb      	ldr	r3, [r7, #12]
 801b6d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b6d6:	68fa      	ldr	r2, [r7, #12]
 801b6d8:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801b6da:	441a      	add	r2, r3
 801b6dc:	68fb      	ldr	r3, [r7, #12]
 801b6de:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801b6e0:	697b      	ldr	r3, [r7, #20]
}
 801b6e2:	4618      	mov	r0, r3
 801b6e4:	3718      	adds	r7, #24
 801b6e6:	46bd      	mov	sp, r7
 801b6e8:	bdb0      	pop	{r4, r5, r7, pc}
 801b6ea:	bf00      	nop
 801b6ec:	08025f90 	.word	0x08025f90
 801b6f0:	080266b8 	.word	0x080266b8
 801b6f4:	08026004 	.word	0x08026004

0801b6f8 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801b6f8:	b580      	push	{r7, lr}
 801b6fa:	b088      	sub	sp, #32
 801b6fc:	af00      	add	r7, sp, #0
 801b6fe:	60f8      	str	r0, [r7, #12]
 801b700:	60b9      	str	r1, [r7, #8]
 801b702:	4611      	mov	r1, r2
 801b704:	461a      	mov	r2, r3
 801b706:	460b      	mov	r3, r1
 801b708:	71fb      	strb	r3, [r7, #7]
 801b70a:	4613      	mov	r3, r2
 801b70c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801b70e:	2300      	movs	r3, #0
 801b710:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801b712:	68bb      	ldr	r3, [r7, #8]
 801b714:	2b00      	cmp	r3, #0
 801b716:	d106      	bne.n	801b726 <tcp_output_fill_options+0x2e>
 801b718:	4b13      	ldr	r3, [pc, #76]	; (801b768 <tcp_output_fill_options+0x70>)
 801b71a:	f240 7256 	movw	r2, #1878	; 0x756
 801b71e:	4913      	ldr	r1, [pc, #76]	; (801b76c <tcp_output_fill_options+0x74>)
 801b720:	4813      	ldr	r0, [pc, #76]	; (801b770 <tcp_output_fill_options+0x78>)
 801b722:	f005 fc15 	bl	8020f50 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801b726:	68bb      	ldr	r3, [r7, #8]
 801b728:	685b      	ldr	r3, [r3, #4]
 801b72a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801b72c:	69bb      	ldr	r3, [r7, #24]
 801b72e:	3314      	adds	r3, #20
 801b730:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801b732:	69bb      	ldr	r3, [r7, #24]
 801b734:	f103 0214 	add.w	r2, r3, #20
 801b738:	8bfb      	ldrh	r3, [r7, #30]
 801b73a:	009b      	lsls	r3, r3, #2
 801b73c:	4619      	mov	r1, r3
 801b73e:	79fb      	ldrb	r3, [r7, #7]
 801b740:	009b      	lsls	r3, r3, #2
 801b742:	f003 0304 	and.w	r3, r3, #4
 801b746:	440b      	add	r3, r1
 801b748:	4413      	add	r3, r2
 801b74a:	697a      	ldr	r2, [r7, #20]
 801b74c:	429a      	cmp	r2, r3
 801b74e:	d006      	beq.n	801b75e <tcp_output_fill_options+0x66>
 801b750:	4b05      	ldr	r3, [pc, #20]	; (801b768 <tcp_output_fill_options+0x70>)
 801b752:	f240 7275 	movw	r2, #1909	; 0x775
 801b756:	4907      	ldr	r1, [pc, #28]	; (801b774 <tcp_output_fill_options+0x7c>)
 801b758:	4805      	ldr	r0, [pc, #20]	; (801b770 <tcp_output_fill_options+0x78>)
 801b75a:	f005 fbf9 	bl	8020f50 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801b75e:	bf00      	nop
 801b760:	3720      	adds	r7, #32
 801b762:	46bd      	mov	sp, r7
 801b764:	bd80      	pop	{r7, pc}
 801b766:	bf00      	nop
 801b768:	08025f90 	.word	0x08025f90
 801b76c:	080266e0 	.word	0x080266e0
 801b770:	08026004 	.word	0x08026004
 801b774:	080265d8 	.word	0x080265d8

0801b778 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801b778:	b580      	push	{r7, lr}
 801b77a:	b08a      	sub	sp, #40	; 0x28
 801b77c:	af04      	add	r7, sp, #16
 801b77e:	60f8      	str	r0, [r7, #12]
 801b780:	60b9      	str	r1, [r7, #8]
 801b782:	607a      	str	r2, [r7, #4]
 801b784:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801b786:	68bb      	ldr	r3, [r7, #8]
 801b788:	2b00      	cmp	r3, #0
 801b78a:	d106      	bne.n	801b79a <tcp_output_control_segment+0x22>
 801b78c:	4b1c      	ldr	r3, [pc, #112]	; (801b800 <tcp_output_control_segment+0x88>)
 801b78e:	f240 7287 	movw	r2, #1927	; 0x787
 801b792:	491c      	ldr	r1, [pc, #112]	; (801b804 <tcp_output_control_segment+0x8c>)
 801b794:	481c      	ldr	r0, [pc, #112]	; (801b808 <tcp_output_control_segment+0x90>)
 801b796:	f005 fbdb 	bl	8020f50 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801b79a:	683a      	ldr	r2, [r7, #0]
 801b79c:	6879      	ldr	r1, [r7, #4]
 801b79e:	68f8      	ldr	r0, [r7, #12]
 801b7a0:	f7fe fad4 	bl	8019d4c <tcp_route>
 801b7a4:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801b7a6:	693b      	ldr	r3, [r7, #16]
 801b7a8:	2b00      	cmp	r3, #0
 801b7aa:	d102      	bne.n	801b7b2 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801b7ac:	23fc      	movs	r3, #252	; 0xfc
 801b7ae:	75fb      	strb	r3, [r7, #23]
 801b7b0:	e01c      	b.n	801b7ec <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801b7b2:	68fb      	ldr	r3, [r7, #12]
 801b7b4:	2b00      	cmp	r3, #0
 801b7b6:	d006      	beq.n	801b7c6 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801b7b8:	68fb      	ldr	r3, [r7, #12]
 801b7ba:	7adb      	ldrb	r3, [r3, #11]
 801b7bc:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801b7be:	68fb      	ldr	r3, [r7, #12]
 801b7c0:	7a9b      	ldrb	r3, [r3, #10]
 801b7c2:	757b      	strb	r3, [r7, #21]
 801b7c4:	e003      	b.n	801b7ce <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801b7c6:	23ff      	movs	r3, #255	; 0xff
 801b7c8:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801b7ca:	2300      	movs	r3, #0
 801b7cc:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801b7ce:	7dba      	ldrb	r2, [r7, #22]
 801b7d0:	693b      	ldr	r3, [r7, #16]
 801b7d2:	9302      	str	r3, [sp, #8]
 801b7d4:	2306      	movs	r3, #6
 801b7d6:	9301      	str	r3, [sp, #4]
 801b7d8:	7d7b      	ldrb	r3, [r7, #21]
 801b7da:	9300      	str	r3, [sp, #0]
 801b7dc:	4613      	mov	r3, r2
 801b7de:	683a      	ldr	r2, [r7, #0]
 801b7e0:	6879      	ldr	r1, [r7, #4]
 801b7e2:	68b8      	ldr	r0, [r7, #8]
 801b7e4:	f7f5 ff3c 	bl	8011660 <ip4_output_if>
 801b7e8:	4603      	mov	r3, r0
 801b7ea:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801b7ec:	68b8      	ldr	r0, [r7, #8]
 801b7ee:	f7f8 fc2f 	bl	8014050 <pbuf_free>
  return err;
 801b7f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801b7f6:	4618      	mov	r0, r3
 801b7f8:	3718      	adds	r7, #24
 801b7fa:	46bd      	mov	sp, r7
 801b7fc:	bd80      	pop	{r7, pc}
 801b7fe:	bf00      	nop
 801b800:	08025f90 	.word	0x08025f90
 801b804:	08026708 	.word	0x08026708
 801b808:	08026004 	.word	0x08026004

0801b80c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801b80c:	b590      	push	{r4, r7, lr}
 801b80e:	b08b      	sub	sp, #44	; 0x2c
 801b810:	af04      	add	r7, sp, #16
 801b812:	60f8      	str	r0, [r7, #12]
 801b814:	60b9      	str	r1, [r7, #8]
 801b816:	607a      	str	r2, [r7, #4]
 801b818:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801b81a:	683b      	ldr	r3, [r7, #0]
 801b81c:	2b00      	cmp	r3, #0
 801b81e:	d106      	bne.n	801b82e <tcp_rst+0x22>
 801b820:	4b1f      	ldr	r3, [pc, #124]	; (801b8a0 <tcp_rst+0x94>)
 801b822:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801b826:	491f      	ldr	r1, [pc, #124]	; (801b8a4 <tcp_rst+0x98>)
 801b828:	481f      	ldr	r0, [pc, #124]	; (801b8a8 <tcp_rst+0x9c>)
 801b82a:	f005 fb91 	bl	8020f50 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801b82e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b830:	2b00      	cmp	r3, #0
 801b832:	d106      	bne.n	801b842 <tcp_rst+0x36>
 801b834:	4b1a      	ldr	r3, [pc, #104]	; (801b8a0 <tcp_rst+0x94>)
 801b836:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801b83a:	491c      	ldr	r1, [pc, #112]	; (801b8ac <tcp_rst+0xa0>)
 801b83c:	481a      	ldr	r0, [pc, #104]	; (801b8a8 <tcp_rst+0x9c>)
 801b83e:	f005 fb87 	bl	8020f50 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801b842:	2300      	movs	r3, #0
 801b844:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801b846:	f246 0308 	movw	r3, #24584	; 0x6008
 801b84a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801b84c:	7dfb      	ldrb	r3, [r7, #23]
 801b84e:	b29c      	uxth	r4, r3
 801b850:	68b8      	ldr	r0, [r7, #8]
 801b852:	f7f4 fa68 	bl	800fd26 <lwip_htonl>
 801b856:	4602      	mov	r2, r0
 801b858:	8abb      	ldrh	r3, [r7, #20]
 801b85a:	9303      	str	r3, [sp, #12]
 801b85c:	2314      	movs	r3, #20
 801b85e:	9302      	str	r3, [sp, #8]
 801b860:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801b862:	9301      	str	r3, [sp, #4]
 801b864:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801b866:	9300      	str	r3, [sp, #0]
 801b868:	4613      	mov	r3, r2
 801b86a:	2200      	movs	r2, #0
 801b86c:	4621      	mov	r1, r4
 801b86e:	6878      	ldr	r0, [r7, #4]
 801b870:	f7ff fe90 	bl	801b594 <tcp_output_alloc_header_common>
 801b874:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801b876:	693b      	ldr	r3, [r7, #16]
 801b878:	2b00      	cmp	r3, #0
 801b87a:	d00c      	beq.n	801b896 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801b87c:	7dfb      	ldrb	r3, [r7, #23]
 801b87e:	2200      	movs	r2, #0
 801b880:	6939      	ldr	r1, [r7, #16]
 801b882:	68f8      	ldr	r0, [r7, #12]
 801b884:	f7ff ff38 	bl	801b6f8 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801b888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b88a:	683a      	ldr	r2, [r7, #0]
 801b88c:	6939      	ldr	r1, [r7, #16]
 801b88e:	68f8      	ldr	r0, [r7, #12]
 801b890:	f7ff ff72 	bl	801b778 <tcp_output_control_segment>
 801b894:	e000      	b.n	801b898 <tcp_rst+0x8c>
    return;
 801b896:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801b898:	371c      	adds	r7, #28
 801b89a:	46bd      	mov	sp, r7
 801b89c:	bd90      	pop	{r4, r7, pc}
 801b89e:	bf00      	nop
 801b8a0:	08025f90 	.word	0x08025f90
 801b8a4:	08026734 	.word	0x08026734
 801b8a8:	08026004 	.word	0x08026004
 801b8ac:	08026750 	.word	0x08026750

0801b8b0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801b8b0:	b590      	push	{r4, r7, lr}
 801b8b2:	b087      	sub	sp, #28
 801b8b4:	af00      	add	r7, sp, #0
 801b8b6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801b8b8:	2300      	movs	r3, #0
 801b8ba:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801b8bc:	2300      	movs	r3, #0
 801b8be:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801b8c0:	687b      	ldr	r3, [r7, #4]
 801b8c2:	2b00      	cmp	r3, #0
 801b8c4:	d106      	bne.n	801b8d4 <tcp_send_empty_ack+0x24>
 801b8c6:	4b28      	ldr	r3, [pc, #160]	; (801b968 <tcp_send_empty_ack+0xb8>)
 801b8c8:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801b8cc:	4927      	ldr	r1, [pc, #156]	; (801b96c <tcp_send_empty_ack+0xbc>)
 801b8ce:	4828      	ldr	r0, [pc, #160]	; (801b970 <tcp_send_empty_ack+0xc0>)
 801b8d0:	f005 fb3e 	bl	8020f50 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801b8d4:	7dfb      	ldrb	r3, [r7, #23]
 801b8d6:	009b      	lsls	r3, r3, #2
 801b8d8:	b2db      	uxtb	r3, r3
 801b8da:	f003 0304 	and.w	r3, r3, #4
 801b8de:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801b8e0:	7d7b      	ldrb	r3, [r7, #21]
 801b8e2:	b29c      	uxth	r4, r3
 801b8e4:	687b      	ldr	r3, [r7, #4]
 801b8e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b8e8:	4618      	mov	r0, r3
 801b8ea:	f7f4 fa1c 	bl	800fd26 <lwip_htonl>
 801b8ee:	4603      	mov	r3, r0
 801b8f0:	2200      	movs	r2, #0
 801b8f2:	4621      	mov	r1, r4
 801b8f4:	6878      	ldr	r0, [r7, #4]
 801b8f6:	f7ff fec1 	bl	801b67c <tcp_output_alloc_header>
 801b8fa:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801b8fc:	693b      	ldr	r3, [r7, #16]
 801b8fe:	2b00      	cmp	r3, #0
 801b900:	d109      	bne.n	801b916 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801b902:	687b      	ldr	r3, [r7, #4]
 801b904:	8b5b      	ldrh	r3, [r3, #26]
 801b906:	f043 0303 	orr.w	r3, r3, #3
 801b90a:	b29a      	uxth	r2, r3
 801b90c:	687b      	ldr	r3, [r7, #4]
 801b90e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801b910:	f06f 0301 	mvn.w	r3, #1
 801b914:	e023      	b.n	801b95e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801b916:	7dbb      	ldrb	r3, [r7, #22]
 801b918:	7dfa      	ldrb	r2, [r7, #23]
 801b91a:	6939      	ldr	r1, [r7, #16]
 801b91c:	6878      	ldr	r0, [r7, #4]
 801b91e:	f7ff feeb 	bl	801b6f8 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801b922:	687a      	ldr	r2, [r7, #4]
 801b924:	687b      	ldr	r3, [r7, #4]
 801b926:	3304      	adds	r3, #4
 801b928:	6939      	ldr	r1, [r7, #16]
 801b92a:	6878      	ldr	r0, [r7, #4]
 801b92c:	f7ff ff24 	bl	801b778 <tcp_output_control_segment>
 801b930:	4603      	mov	r3, r0
 801b932:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801b934:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b938:	2b00      	cmp	r3, #0
 801b93a:	d007      	beq.n	801b94c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801b93c:	687b      	ldr	r3, [r7, #4]
 801b93e:	8b5b      	ldrh	r3, [r3, #26]
 801b940:	f043 0303 	orr.w	r3, r3, #3
 801b944:	b29a      	uxth	r2, r3
 801b946:	687b      	ldr	r3, [r7, #4]
 801b948:	835a      	strh	r2, [r3, #26]
 801b94a:	e006      	b.n	801b95a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801b94c:	687b      	ldr	r3, [r7, #4]
 801b94e:	8b5b      	ldrh	r3, [r3, #26]
 801b950:	f023 0303 	bic.w	r3, r3, #3
 801b954:	b29a      	uxth	r2, r3
 801b956:	687b      	ldr	r3, [r7, #4]
 801b958:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801b95a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801b95e:	4618      	mov	r0, r3
 801b960:	371c      	adds	r7, #28
 801b962:	46bd      	mov	sp, r7
 801b964:	bd90      	pop	{r4, r7, pc}
 801b966:	bf00      	nop
 801b968:	08025f90 	.word	0x08025f90
 801b96c:	0802676c 	.word	0x0802676c
 801b970:	08026004 	.word	0x08026004

0801b974 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801b974:	b590      	push	{r4, r7, lr}
 801b976:	b087      	sub	sp, #28
 801b978:	af00      	add	r7, sp, #0
 801b97a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801b97c:	2300      	movs	r3, #0
 801b97e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801b980:	687b      	ldr	r3, [r7, #4]
 801b982:	2b00      	cmp	r3, #0
 801b984:	d106      	bne.n	801b994 <tcp_keepalive+0x20>
 801b986:	4b18      	ldr	r3, [pc, #96]	; (801b9e8 <tcp_keepalive+0x74>)
 801b988:	f640 0224 	movw	r2, #2084	; 0x824
 801b98c:	4917      	ldr	r1, [pc, #92]	; (801b9ec <tcp_keepalive+0x78>)
 801b98e:	4818      	ldr	r0, [pc, #96]	; (801b9f0 <tcp_keepalive+0x7c>)
 801b990:	f005 fade 	bl	8020f50 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801b994:	7dfb      	ldrb	r3, [r7, #23]
 801b996:	b29c      	uxth	r4, r3
 801b998:	687b      	ldr	r3, [r7, #4]
 801b99a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b99c:	3b01      	subs	r3, #1
 801b99e:	4618      	mov	r0, r3
 801b9a0:	f7f4 f9c1 	bl	800fd26 <lwip_htonl>
 801b9a4:	4603      	mov	r3, r0
 801b9a6:	2200      	movs	r2, #0
 801b9a8:	4621      	mov	r1, r4
 801b9aa:	6878      	ldr	r0, [r7, #4]
 801b9ac:	f7ff fe66 	bl	801b67c <tcp_output_alloc_header>
 801b9b0:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801b9b2:	693b      	ldr	r3, [r7, #16]
 801b9b4:	2b00      	cmp	r3, #0
 801b9b6:	d102      	bne.n	801b9be <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801b9b8:	f04f 33ff 	mov.w	r3, #4294967295
 801b9bc:	e010      	b.n	801b9e0 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801b9be:	7dfb      	ldrb	r3, [r7, #23]
 801b9c0:	2200      	movs	r2, #0
 801b9c2:	6939      	ldr	r1, [r7, #16]
 801b9c4:	6878      	ldr	r0, [r7, #4]
 801b9c6:	f7ff fe97 	bl	801b6f8 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801b9ca:	687a      	ldr	r2, [r7, #4]
 801b9cc:	687b      	ldr	r3, [r7, #4]
 801b9ce:	3304      	adds	r3, #4
 801b9d0:	6939      	ldr	r1, [r7, #16]
 801b9d2:	6878      	ldr	r0, [r7, #4]
 801b9d4:	f7ff fed0 	bl	801b778 <tcp_output_control_segment>
 801b9d8:	4603      	mov	r3, r0
 801b9da:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801b9dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801b9e0:	4618      	mov	r0, r3
 801b9e2:	371c      	adds	r7, #28
 801b9e4:	46bd      	mov	sp, r7
 801b9e6:	bd90      	pop	{r4, r7, pc}
 801b9e8:	08025f90 	.word	0x08025f90
 801b9ec:	0802678c 	.word	0x0802678c
 801b9f0:	08026004 	.word	0x08026004

0801b9f4 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801b9f4:	b590      	push	{r4, r7, lr}
 801b9f6:	b08b      	sub	sp, #44	; 0x2c
 801b9f8:	af00      	add	r7, sp, #0
 801b9fa:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801b9fc:	2300      	movs	r3, #0
 801b9fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801ba02:	687b      	ldr	r3, [r7, #4]
 801ba04:	2b00      	cmp	r3, #0
 801ba06:	d106      	bne.n	801ba16 <tcp_zero_window_probe+0x22>
 801ba08:	4b4c      	ldr	r3, [pc, #304]	; (801bb3c <tcp_zero_window_probe+0x148>)
 801ba0a:	f640 024f 	movw	r2, #2127	; 0x84f
 801ba0e:	494c      	ldr	r1, [pc, #304]	; (801bb40 <tcp_zero_window_probe+0x14c>)
 801ba10:	484c      	ldr	r0, [pc, #304]	; (801bb44 <tcp_zero_window_probe+0x150>)
 801ba12:	f005 fa9d 	bl	8020f50 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801ba16:	687b      	ldr	r3, [r7, #4]
 801ba18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ba1a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801ba1c:	6a3b      	ldr	r3, [r7, #32]
 801ba1e:	2b00      	cmp	r3, #0
 801ba20:	d101      	bne.n	801ba26 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801ba22:	2300      	movs	r3, #0
 801ba24:	e086      	b.n	801bb34 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801ba26:	687b      	ldr	r3, [r7, #4]
 801ba28:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801ba2c:	2bff      	cmp	r3, #255	; 0xff
 801ba2e:	d007      	beq.n	801ba40 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801ba30:	687b      	ldr	r3, [r7, #4]
 801ba32:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801ba36:	3301      	adds	r3, #1
 801ba38:	b2da      	uxtb	r2, r3
 801ba3a:	687b      	ldr	r3, [r7, #4]
 801ba3c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801ba40:	6a3b      	ldr	r3, [r7, #32]
 801ba42:	68db      	ldr	r3, [r3, #12]
 801ba44:	899b      	ldrh	r3, [r3, #12]
 801ba46:	b29b      	uxth	r3, r3
 801ba48:	4618      	mov	r0, r3
 801ba4a:	f7f4 f957 	bl	800fcfc <lwip_htons>
 801ba4e:	4603      	mov	r3, r0
 801ba50:	b2db      	uxtb	r3, r3
 801ba52:	f003 0301 	and.w	r3, r3, #1
 801ba56:	2b00      	cmp	r3, #0
 801ba58:	d005      	beq.n	801ba66 <tcp_zero_window_probe+0x72>
 801ba5a:	6a3b      	ldr	r3, [r7, #32]
 801ba5c:	891b      	ldrh	r3, [r3, #8]
 801ba5e:	2b00      	cmp	r3, #0
 801ba60:	d101      	bne.n	801ba66 <tcp_zero_window_probe+0x72>
 801ba62:	2301      	movs	r3, #1
 801ba64:	e000      	b.n	801ba68 <tcp_zero_window_probe+0x74>
 801ba66:	2300      	movs	r3, #0
 801ba68:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801ba6a:	7ffb      	ldrb	r3, [r7, #31]
 801ba6c:	2b00      	cmp	r3, #0
 801ba6e:	bf0c      	ite	eq
 801ba70:	2301      	moveq	r3, #1
 801ba72:	2300      	movne	r3, #0
 801ba74:	b2db      	uxtb	r3, r3
 801ba76:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801ba78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ba7c:	b299      	uxth	r1, r3
 801ba7e:	6a3b      	ldr	r3, [r7, #32]
 801ba80:	68db      	ldr	r3, [r3, #12]
 801ba82:	685b      	ldr	r3, [r3, #4]
 801ba84:	8bba      	ldrh	r2, [r7, #28]
 801ba86:	6878      	ldr	r0, [r7, #4]
 801ba88:	f7ff fdf8 	bl	801b67c <tcp_output_alloc_header>
 801ba8c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801ba8e:	69bb      	ldr	r3, [r7, #24]
 801ba90:	2b00      	cmp	r3, #0
 801ba92:	d102      	bne.n	801ba9a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801ba94:	f04f 33ff 	mov.w	r3, #4294967295
 801ba98:	e04c      	b.n	801bb34 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801ba9a:	69bb      	ldr	r3, [r7, #24]
 801ba9c:	685b      	ldr	r3, [r3, #4]
 801ba9e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801baa0:	7ffb      	ldrb	r3, [r7, #31]
 801baa2:	2b00      	cmp	r3, #0
 801baa4:	d011      	beq.n	801baca <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801baa6:	697b      	ldr	r3, [r7, #20]
 801baa8:	899b      	ldrh	r3, [r3, #12]
 801baaa:	b29b      	uxth	r3, r3
 801baac:	b21b      	sxth	r3, r3
 801baae:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801bab2:	b21c      	sxth	r4, r3
 801bab4:	2011      	movs	r0, #17
 801bab6:	f7f4 f921 	bl	800fcfc <lwip_htons>
 801baba:	4603      	mov	r3, r0
 801babc:	b21b      	sxth	r3, r3
 801babe:	4323      	orrs	r3, r4
 801bac0:	b21b      	sxth	r3, r3
 801bac2:	b29a      	uxth	r2, r3
 801bac4:	697b      	ldr	r3, [r7, #20]
 801bac6:	819a      	strh	r2, [r3, #12]
 801bac8:	e010      	b.n	801baec <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801baca:	69bb      	ldr	r3, [r7, #24]
 801bacc:	685b      	ldr	r3, [r3, #4]
 801bace:	3314      	adds	r3, #20
 801bad0:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801bad2:	6a3b      	ldr	r3, [r7, #32]
 801bad4:	6858      	ldr	r0, [r3, #4]
 801bad6:	6a3b      	ldr	r3, [r7, #32]
 801bad8:	685b      	ldr	r3, [r3, #4]
 801bada:	891a      	ldrh	r2, [r3, #8]
 801badc:	6a3b      	ldr	r3, [r7, #32]
 801bade:	891b      	ldrh	r3, [r3, #8]
 801bae0:	1ad3      	subs	r3, r2, r3
 801bae2:	b29b      	uxth	r3, r3
 801bae4:	2201      	movs	r2, #1
 801bae6:	6939      	ldr	r1, [r7, #16]
 801bae8:	f7f8 fcb8 	bl	801445c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801baec:	6a3b      	ldr	r3, [r7, #32]
 801baee:	68db      	ldr	r3, [r3, #12]
 801baf0:	685b      	ldr	r3, [r3, #4]
 801baf2:	4618      	mov	r0, r3
 801baf4:	f7f4 f917 	bl	800fd26 <lwip_htonl>
 801baf8:	4603      	mov	r3, r0
 801bafa:	3301      	adds	r3, #1
 801bafc:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801bafe:	687b      	ldr	r3, [r7, #4]
 801bb00:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801bb02:	68fb      	ldr	r3, [r7, #12]
 801bb04:	1ad3      	subs	r3, r2, r3
 801bb06:	2b00      	cmp	r3, #0
 801bb08:	da02      	bge.n	801bb10 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801bb0a:	687b      	ldr	r3, [r7, #4]
 801bb0c:	68fa      	ldr	r2, [r7, #12]
 801bb0e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801bb10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801bb14:	2200      	movs	r2, #0
 801bb16:	69b9      	ldr	r1, [r7, #24]
 801bb18:	6878      	ldr	r0, [r7, #4]
 801bb1a:	f7ff fded 	bl	801b6f8 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801bb1e:	687a      	ldr	r2, [r7, #4]
 801bb20:	687b      	ldr	r3, [r7, #4]
 801bb22:	3304      	adds	r3, #4
 801bb24:	69b9      	ldr	r1, [r7, #24]
 801bb26:	6878      	ldr	r0, [r7, #4]
 801bb28:	f7ff fe26 	bl	801b778 <tcp_output_control_segment>
 801bb2c:	4603      	mov	r3, r0
 801bb2e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801bb30:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801bb34:	4618      	mov	r0, r3
 801bb36:	372c      	adds	r7, #44	; 0x2c
 801bb38:	46bd      	mov	sp, r7
 801bb3a:	bd90      	pop	{r4, r7, pc}
 801bb3c:	08025f90 	.word	0x08025f90
 801bb40:	080267a8 	.word	0x080267a8
 801bb44:	08026004 	.word	0x08026004

0801bb48 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 801bb48:	b580      	push	{r7, lr}
 801bb4a:	b084      	sub	sp, #16
 801bb4c:	af00      	add	r7, sp, #0
 801bb4e:	6078      	str	r0, [r7, #4]
 801bb50:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 801bb52:	f000 fb11 	bl	801c178 <sys_timeouts_sleeptime>
 801bb56:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 801bb58:	68fb      	ldr	r3, [r7, #12]
 801bb5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bb5e:	d10b      	bne.n	801bb78 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 801bb60:	4813      	ldr	r0, [pc, #76]	; (801bbb0 <tcpip_timeouts_mbox_fetch+0x68>)
 801bb62:	f7f9 ff88 	bl	8015a76 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 801bb66:	2200      	movs	r2, #0
 801bb68:	6839      	ldr	r1, [r7, #0]
 801bb6a:	6878      	ldr	r0, [r7, #4]
 801bb6c:	f7f9 fe40 	bl	80157f0 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 801bb70:	480f      	ldr	r0, [pc, #60]	; (801bbb0 <tcpip_timeouts_mbox_fetch+0x68>)
 801bb72:	f7f9 ff71 	bl	8015a58 <sys_mutex_lock>
    return;
 801bb76:	e018      	b.n	801bbaa <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 801bb78:	68fb      	ldr	r3, [r7, #12]
 801bb7a:	2b00      	cmp	r3, #0
 801bb7c:	d102      	bne.n	801bb84 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 801bb7e:	f000 fac1 	bl	801c104 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 801bb82:	e7e6      	b.n	801bb52 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 801bb84:	480a      	ldr	r0, [pc, #40]	; (801bbb0 <tcpip_timeouts_mbox_fetch+0x68>)
 801bb86:	f7f9 ff76 	bl	8015a76 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 801bb8a:	68fa      	ldr	r2, [r7, #12]
 801bb8c:	6839      	ldr	r1, [r7, #0]
 801bb8e:	6878      	ldr	r0, [r7, #4]
 801bb90:	f7f9 fe2e 	bl	80157f0 <sys_arch_mbox_fetch>
 801bb94:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 801bb96:	4806      	ldr	r0, [pc, #24]	; (801bbb0 <tcpip_timeouts_mbox_fetch+0x68>)
 801bb98:	f7f9 ff5e 	bl	8015a58 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 801bb9c:	68bb      	ldr	r3, [r7, #8]
 801bb9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bba2:	d102      	bne.n	801bbaa <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 801bba4:	f000 faae 	bl	801c104 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 801bba8:	e7d3      	b.n	801bb52 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 801bbaa:	3710      	adds	r7, #16
 801bbac:	46bd      	mov	sp, r7
 801bbae:	bd80      	pop	{r7, pc}
 801bbb0:	24048e98 	.word	0x24048e98

0801bbb4 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 801bbb4:	b580      	push	{r7, lr}
 801bbb6:	b084      	sub	sp, #16
 801bbb8:	af00      	add	r7, sp, #0
 801bbba:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 801bbbc:	4810      	ldr	r0, [pc, #64]	; (801bc00 <tcpip_thread+0x4c>)
 801bbbe:	f7f9 ff4b 	bl	8015a58 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 801bbc2:	4b10      	ldr	r3, [pc, #64]	; (801bc04 <tcpip_thread+0x50>)
 801bbc4:	681b      	ldr	r3, [r3, #0]
 801bbc6:	2b00      	cmp	r3, #0
 801bbc8:	d005      	beq.n	801bbd6 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 801bbca:	4b0e      	ldr	r3, [pc, #56]	; (801bc04 <tcpip_thread+0x50>)
 801bbcc:	681b      	ldr	r3, [r3, #0]
 801bbce:	4a0e      	ldr	r2, [pc, #56]	; (801bc08 <tcpip_thread+0x54>)
 801bbd0:	6812      	ldr	r2, [r2, #0]
 801bbd2:	4610      	mov	r0, r2
 801bbd4:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 801bbd6:	f107 030c 	add.w	r3, r7, #12
 801bbda:	4619      	mov	r1, r3
 801bbdc:	480b      	ldr	r0, [pc, #44]	; (801bc0c <tcpip_thread+0x58>)
 801bbde:	f7ff ffb3 	bl	801bb48 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 801bbe2:	68fb      	ldr	r3, [r7, #12]
 801bbe4:	2b00      	cmp	r3, #0
 801bbe6:	d106      	bne.n	801bbf6 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 801bbe8:	4b09      	ldr	r3, [pc, #36]	; (801bc10 <tcpip_thread+0x5c>)
 801bbea:	2291      	movs	r2, #145	; 0x91
 801bbec:	4909      	ldr	r1, [pc, #36]	; (801bc14 <tcpip_thread+0x60>)
 801bbee:	480a      	ldr	r0, [pc, #40]	; (801bc18 <tcpip_thread+0x64>)
 801bbf0:	f005 f9ae 	bl	8020f50 <iprintf>
      continue;
 801bbf4:	e003      	b.n	801bbfe <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 801bbf6:	68fb      	ldr	r3, [r7, #12]
 801bbf8:	4618      	mov	r0, r3
 801bbfa:	f000 f80f 	bl	801bc1c <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 801bbfe:	e7ea      	b.n	801bbd6 <tcpip_thread+0x22>
 801bc00:	24048e98 	.word	0x24048e98
 801bc04:	24040798 	.word	0x24040798
 801bc08:	2404079c 	.word	0x2404079c
 801bc0c:	240407a0 	.word	0x240407a0
 801bc10:	080267cc 	.word	0x080267cc
 801bc14:	0802681c 	.word	0x0802681c
 801bc18:	0802683c 	.word	0x0802683c

0801bc1c <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 801bc1c:	b580      	push	{r7, lr}
 801bc1e:	b082      	sub	sp, #8
 801bc20:	af00      	add	r7, sp, #0
 801bc22:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 801bc24:	687b      	ldr	r3, [r7, #4]
 801bc26:	781b      	ldrb	r3, [r3, #0]
 801bc28:	2b01      	cmp	r3, #1
 801bc2a:	d018      	beq.n	801bc5e <tcpip_thread_handle_msg+0x42>
 801bc2c:	2b02      	cmp	r3, #2
 801bc2e:	d021      	beq.n	801bc74 <tcpip_thread_handle_msg+0x58>
 801bc30:	2b00      	cmp	r3, #0
 801bc32:	d126      	bne.n	801bc82 <tcpip_thread_handle_msg+0x66>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 801bc34:	687b      	ldr	r3, [r7, #4]
 801bc36:	68db      	ldr	r3, [r3, #12]
 801bc38:	687a      	ldr	r2, [r7, #4]
 801bc3a:	6850      	ldr	r0, [r2, #4]
 801bc3c:	687a      	ldr	r2, [r7, #4]
 801bc3e:	6892      	ldr	r2, [r2, #8]
 801bc40:	4611      	mov	r1, r2
 801bc42:	4798      	blx	r3
 801bc44:	4603      	mov	r3, r0
 801bc46:	2b00      	cmp	r3, #0
 801bc48:	d004      	beq.n	801bc54 <tcpip_thread_handle_msg+0x38>
        pbuf_free(msg->msg.inp.p);
 801bc4a:	687b      	ldr	r3, [r7, #4]
 801bc4c:	685b      	ldr	r3, [r3, #4]
 801bc4e:	4618      	mov	r0, r3
 801bc50:	f7f8 f9fe 	bl	8014050 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 801bc54:	6879      	ldr	r1, [r7, #4]
 801bc56:	2009      	movs	r0, #9
 801bc58:	f7f7 fa96 	bl	8013188 <memp_free>
      break;
 801bc5c:	e018      	b.n	801bc90 <tcpip_thread_handle_msg+0x74>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 801bc5e:	687b      	ldr	r3, [r7, #4]
 801bc60:	685b      	ldr	r3, [r3, #4]
 801bc62:	687a      	ldr	r2, [r7, #4]
 801bc64:	6892      	ldr	r2, [r2, #8]
 801bc66:	4610      	mov	r0, r2
 801bc68:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 801bc6a:	6879      	ldr	r1, [r7, #4]
 801bc6c:	2008      	movs	r0, #8
 801bc6e:	f7f7 fa8b 	bl	8013188 <memp_free>
      break;
 801bc72:	e00d      	b.n	801bc90 <tcpip_thread_handle_msg+0x74>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 801bc74:	687b      	ldr	r3, [r7, #4]
 801bc76:	685b      	ldr	r3, [r3, #4]
 801bc78:	687a      	ldr	r2, [r7, #4]
 801bc7a:	6892      	ldr	r2, [r2, #8]
 801bc7c:	4610      	mov	r0, r2
 801bc7e:	4798      	blx	r3
      break;
 801bc80:	e006      	b.n	801bc90 <tcpip_thread_handle_msg+0x74>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 801bc82:	4b05      	ldr	r3, [pc, #20]	; (801bc98 <tcpip_thread_handle_msg+0x7c>)
 801bc84:	22cf      	movs	r2, #207	; 0xcf
 801bc86:	4905      	ldr	r1, [pc, #20]	; (801bc9c <tcpip_thread_handle_msg+0x80>)
 801bc88:	4805      	ldr	r0, [pc, #20]	; (801bca0 <tcpip_thread_handle_msg+0x84>)
 801bc8a:	f005 f961 	bl	8020f50 <iprintf>
      break;
 801bc8e:	bf00      	nop
  }
}
 801bc90:	bf00      	nop
 801bc92:	3708      	adds	r7, #8
 801bc94:	46bd      	mov	sp, r7
 801bc96:	bd80      	pop	{r7, pc}
 801bc98:	080267cc 	.word	0x080267cc
 801bc9c:	0802681c 	.word	0x0802681c
 801bca0:	0802683c 	.word	0x0802683c

0801bca4 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 801bca4:	b580      	push	{r7, lr}
 801bca6:	b086      	sub	sp, #24
 801bca8:	af00      	add	r7, sp, #0
 801bcaa:	60f8      	str	r0, [r7, #12]
 801bcac:	60b9      	str	r1, [r7, #8]
 801bcae:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 801bcb0:	481a      	ldr	r0, [pc, #104]	; (801bd1c <tcpip_inpkt+0x78>)
 801bcb2:	f7f9 fdf8 	bl	80158a6 <sys_mbox_valid>
 801bcb6:	4603      	mov	r3, r0
 801bcb8:	2b00      	cmp	r3, #0
 801bcba:	d105      	bne.n	801bcc8 <tcpip_inpkt+0x24>
 801bcbc:	4b18      	ldr	r3, [pc, #96]	; (801bd20 <tcpip_inpkt+0x7c>)
 801bcbe:	22fc      	movs	r2, #252	; 0xfc
 801bcc0:	4918      	ldr	r1, [pc, #96]	; (801bd24 <tcpip_inpkt+0x80>)
 801bcc2:	4819      	ldr	r0, [pc, #100]	; (801bd28 <tcpip_inpkt+0x84>)
 801bcc4:	f005 f944 	bl	8020f50 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 801bcc8:	2009      	movs	r0, #9
 801bcca:	f7f7 f9e7 	bl	801309c <memp_malloc>
 801bcce:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 801bcd0:	697b      	ldr	r3, [r7, #20]
 801bcd2:	2b00      	cmp	r3, #0
 801bcd4:	d102      	bne.n	801bcdc <tcpip_inpkt+0x38>
    return ERR_MEM;
 801bcd6:	f04f 33ff 	mov.w	r3, #4294967295
 801bcda:	e01a      	b.n	801bd12 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 801bcdc:	697b      	ldr	r3, [r7, #20]
 801bcde:	2200      	movs	r2, #0
 801bce0:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 801bce2:	697b      	ldr	r3, [r7, #20]
 801bce4:	68fa      	ldr	r2, [r7, #12]
 801bce6:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 801bce8:	697b      	ldr	r3, [r7, #20]
 801bcea:	68ba      	ldr	r2, [r7, #8]
 801bcec:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 801bcee:	697b      	ldr	r3, [r7, #20]
 801bcf0:	687a      	ldr	r2, [r7, #4]
 801bcf2:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 801bcf4:	6979      	ldr	r1, [r7, #20]
 801bcf6:	4809      	ldr	r0, [pc, #36]	; (801bd1c <tcpip_inpkt+0x78>)
 801bcf8:	f7f9 fd60 	bl	80157bc <sys_mbox_trypost>
 801bcfc:	4603      	mov	r3, r0
 801bcfe:	2b00      	cmp	r3, #0
 801bd00:	d006      	beq.n	801bd10 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 801bd02:	6979      	ldr	r1, [r7, #20]
 801bd04:	2009      	movs	r0, #9
 801bd06:	f7f7 fa3f 	bl	8013188 <memp_free>
    return ERR_MEM;
 801bd0a:	f04f 33ff 	mov.w	r3, #4294967295
 801bd0e:	e000      	b.n	801bd12 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 801bd10:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 801bd12:	4618      	mov	r0, r3
 801bd14:	3718      	adds	r7, #24
 801bd16:	46bd      	mov	sp, r7
 801bd18:	bd80      	pop	{r7, pc}
 801bd1a:	bf00      	nop
 801bd1c:	240407a0 	.word	0x240407a0
 801bd20:	080267cc 	.word	0x080267cc
 801bd24:	08026864 	.word	0x08026864
 801bd28:	0802683c 	.word	0x0802683c

0801bd2c <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 801bd2c:	b580      	push	{r7, lr}
 801bd2e:	b082      	sub	sp, #8
 801bd30:	af00      	add	r7, sp, #0
 801bd32:	6078      	str	r0, [r7, #4]
 801bd34:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 801bd36:	683b      	ldr	r3, [r7, #0]
 801bd38:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801bd3c:	f003 0318 	and.w	r3, r3, #24
 801bd40:	2b00      	cmp	r3, #0
 801bd42:	d006      	beq.n	801bd52 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 801bd44:	4a08      	ldr	r2, [pc, #32]	; (801bd68 <tcpip_input+0x3c>)
 801bd46:	6839      	ldr	r1, [r7, #0]
 801bd48:	6878      	ldr	r0, [r7, #4]
 801bd4a:	f7ff ffab 	bl	801bca4 <tcpip_inpkt>
 801bd4e:	4603      	mov	r3, r0
 801bd50:	e005      	b.n	801bd5e <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 801bd52:	4a06      	ldr	r2, [pc, #24]	; (801bd6c <tcpip_input+0x40>)
 801bd54:	6839      	ldr	r1, [r7, #0]
 801bd56:	6878      	ldr	r0, [r7, #4]
 801bd58:	f7ff ffa4 	bl	801bca4 <tcpip_inpkt>
 801bd5c:	4603      	mov	r3, r0
}
 801bd5e:	4618      	mov	r0, r3
 801bd60:	3708      	adds	r7, #8
 801bd62:	46bd      	mov	sp, r7
 801bd64:	bd80      	pop	{r7, pc}
 801bd66:	bf00      	nop
 801bd68:	08010c2d 	.word	0x08010c2d
 801bd6c:	0801141d 	.word	0x0801141d

0801bd70 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 801bd70:	b580      	push	{r7, lr}
 801bd72:	b084      	sub	sp, #16
 801bd74:	af00      	add	r7, sp, #0
 801bd76:	6078      	str	r0, [r7, #4]
 801bd78:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 801bd7a:	4819      	ldr	r0, [pc, #100]	; (801bde0 <tcpip_try_callback+0x70>)
 801bd7c:	f7f9 fd93 	bl	80158a6 <sys_mbox_valid>
 801bd80:	4603      	mov	r3, r0
 801bd82:	2b00      	cmp	r3, #0
 801bd84:	d106      	bne.n	801bd94 <tcpip_try_callback+0x24>
 801bd86:	4b17      	ldr	r3, [pc, #92]	; (801bde4 <tcpip_try_callback+0x74>)
 801bd88:	f240 125d 	movw	r2, #349	; 0x15d
 801bd8c:	4916      	ldr	r1, [pc, #88]	; (801bde8 <tcpip_try_callback+0x78>)
 801bd8e:	4817      	ldr	r0, [pc, #92]	; (801bdec <tcpip_try_callback+0x7c>)
 801bd90:	f005 f8de 	bl	8020f50 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 801bd94:	2008      	movs	r0, #8
 801bd96:	f7f7 f981 	bl	801309c <memp_malloc>
 801bd9a:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 801bd9c:	68fb      	ldr	r3, [r7, #12]
 801bd9e:	2b00      	cmp	r3, #0
 801bda0:	d102      	bne.n	801bda8 <tcpip_try_callback+0x38>
    return ERR_MEM;
 801bda2:	f04f 33ff 	mov.w	r3, #4294967295
 801bda6:	e017      	b.n	801bdd8 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 801bda8:	68fb      	ldr	r3, [r7, #12]
 801bdaa:	2201      	movs	r2, #1
 801bdac:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 801bdae:	68fb      	ldr	r3, [r7, #12]
 801bdb0:	687a      	ldr	r2, [r7, #4]
 801bdb2:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 801bdb4:	68fb      	ldr	r3, [r7, #12]
 801bdb6:	683a      	ldr	r2, [r7, #0]
 801bdb8:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 801bdba:	68f9      	ldr	r1, [r7, #12]
 801bdbc:	4808      	ldr	r0, [pc, #32]	; (801bde0 <tcpip_try_callback+0x70>)
 801bdbe:	f7f9 fcfd 	bl	80157bc <sys_mbox_trypost>
 801bdc2:	4603      	mov	r3, r0
 801bdc4:	2b00      	cmp	r3, #0
 801bdc6:	d006      	beq.n	801bdd6 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 801bdc8:	68f9      	ldr	r1, [r7, #12]
 801bdca:	2008      	movs	r0, #8
 801bdcc:	f7f7 f9dc 	bl	8013188 <memp_free>
    return ERR_MEM;
 801bdd0:	f04f 33ff 	mov.w	r3, #4294967295
 801bdd4:	e000      	b.n	801bdd8 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 801bdd6:	2300      	movs	r3, #0
}
 801bdd8:	4618      	mov	r0, r3
 801bdda:	3710      	adds	r7, #16
 801bddc:	46bd      	mov	sp, r7
 801bdde:	bd80      	pop	{r7, pc}
 801bde0:	240407a0 	.word	0x240407a0
 801bde4:	080267cc 	.word	0x080267cc
 801bde8:	08026864 	.word	0x08026864
 801bdec:	0802683c 	.word	0x0802683c

0801bdf0 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 801bdf0:	b580      	push	{r7, lr}
 801bdf2:	b084      	sub	sp, #16
 801bdf4:	af00      	add	r7, sp, #0
 801bdf6:	60f8      	str	r0, [r7, #12]
 801bdf8:	60b9      	str	r1, [r7, #8]
 801bdfa:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 801bdfc:	4806      	ldr	r0, [pc, #24]	; (801be18 <tcpip_send_msg_wait_sem+0x28>)
 801bdfe:	f7f9 fe2b 	bl	8015a58 <sys_mutex_lock>
  fn(apimsg);
 801be02:	68fb      	ldr	r3, [r7, #12]
 801be04:	68b8      	ldr	r0, [r7, #8]
 801be06:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 801be08:	4803      	ldr	r0, [pc, #12]	; (801be18 <tcpip_send_msg_wait_sem+0x28>)
 801be0a:	f7f9 fe34 	bl	8015a76 <sys_mutex_unlock>
  return ERR_OK;
 801be0e:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 801be10:	4618      	mov	r0, r3
 801be12:	3710      	adds	r7, #16
 801be14:	46bd      	mov	sp, r7
 801be16:	bd80      	pop	{r7, pc}
 801be18:	24048e98 	.word	0x24048e98

0801be1c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 801be1c:	b580      	push	{r7, lr}
 801be1e:	b084      	sub	sp, #16
 801be20:	af02      	add	r7, sp, #8
 801be22:	6078      	str	r0, [r7, #4]
 801be24:	6039      	str	r1, [r7, #0]
  lwip_init();
 801be26:	f7f5 fa47 	bl	80112b8 <lwip_init>

  tcpip_init_done = initfunc;
 801be2a:	4a17      	ldr	r2, [pc, #92]	; (801be88 <tcpip_init+0x6c>)
 801be2c:	687b      	ldr	r3, [r7, #4]
 801be2e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 801be30:	4a16      	ldr	r2, [pc, #88]	; (801be8c <tcpip_init+0x70>)
 801be32:	683b      	ldr	r3, [r7, #0]
 801be34:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 801be36:	2106      	movs	r1, #6
 801be38:	4815      	ldr	r0, [pc, #84]	; (801be90 <tcpip_init+0x74>)
 801be3a:	f7f9 fc8b 	bl	8015754 <sys_mbox_new>
 801be3e:	4603      	mov	r3, r0
 801be40:	2b00      	cmp	r3, #0
 801be42:	d006      	beq.n	801be52 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 801be44:	4b13      	ldr	r3, [pc, #76]	; (801be94 <tcpip_init+0x78>)
 801be46:	f240 2261 	movw	r2, #609	; 0x261
 801be4a:	4913      	ldr	r1, [pc, #76]	; (801be98 <tcpip_init+0x7c>)
 801be4c:	4813      	ldr	r0, [pc, #76]	; (801be9c <tcpip_init+0x80>)
 801be4e:	f005 f87f 	bl	8020f50 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 801be52:	4813      	ldr	r0, [pc, #76]	; (801bea0 <tcpip_init+0x84>)
 801be54:	f7f9 fde4 	bl	8015a20 <sys_mutex_new>
 801be58:	4603      	mov	r3, r0
 801be5a:	2b00      	cmp	r3, #0
 801be5c:	d006      	beq.n	801be6c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 801be5e:	4b0d      	ldr	r3, [pc, #52]	; (801be94 <tcpip_init+0x78>)
 801be60:	f240 2265 	movw	r2, #613	; 0x265
 801be64:	490f      	ldr	r1, [pc, #60]	; (801bea4 <tcpip_init+0x88>)
 801be66:	480d      	ldr	r0, [pc, #52]	; (801be9c <tcpip_init+0x80>)
 801be68:	f005 f872 	bl	8020f50 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 801be6c:	2300      	movs	r3, #0
 801be6e:	9300      	str	r3, [sp, #0]
 801be70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801be74:	2200      	movs	r2, #0
 801be76:	490c      	ldr	r1, [pc, #48]	; (801bea8 <tcpip_init+0x8c>)
 801be78:	480c      	ldr	r0, [pc, #48]	; (801beac <tcpip_init+0x90>)
 801be7a:	f7f9 fe09 	bl	8015a90 <sys_thread_new>
}
 801be7e:	bf00      	nop
 801be80:	3708      	adds	r7, #8
 801be82:	46bd      	mov	sp, r7
 801be84:	bd80      	pop	{r7, pc}
 801be86:	bf00      	nop
 801be88:	24040798 	.word	0x24040798
 801be8c:	2404079c 	.word	0x2404079c
 801be90:	240407a0 	.word	0x240407a0
 801be94:	080267cc 	.word	0x080267cc
 801be98:	08026874 	.word	0x08026874
 801be9c:	0802683c 	.word	0x0802683c
 801bea0:	24048e98 	.word	0x24048e98
 801bea4:	08026898 	.word	0x08026898
 801bea8:	0801bbb5 	.word	0x0801bbb5
 801beac:	080268bc 	.word	0x080268bc

0801beb0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801beb0:	b580      	push	{r7, lr}
 801beb2:	b082      	sub	sp, #8
 801beb4:	af00      	add	r7, sp, #0
 801beb6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801beb8:	f7f9 fe78 	bl	8015bac <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801bebc:	4b0a      	ldr	r3, [pc, #40]	; (801bee8 <tcpip_tcp_timer+0x38>)
 801bebe:	681b      	ldr	r3, [r3, #0]
 801bec0:	2b00      	cmp	r3, #0
 801bec2:	d103      	bne.n	801becc <tcpip_tcp_timer+0x1c>
 801bec4:	4b09      	ldr	r3, [pc, #36]	; (801beec <tcpip_tcp_timer+0x3c>)
 801bec6:	681b      	ldr	r3, [r3, #0]
 801bec8:	2b00      	cmp	r3, #0
 801beca:	d005      	beq.n	801bed8 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801becc:	2200      	movs	r2, #0
 801bece:	4908      	ldr	r1, [pc, #32]	; (801bef0 <tcpip_tcp_timer+0x40>)
 801bed0:	20fa      	movs	r0, #250	; 0xfa
 801bed2:	f000 f8f1 	bl	801c0b8 <sys_timeout>
 801bed6:	e002      	b.n	801bede <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801bed8:	4b06      	ldr	r3, [pc, #24]	; (801bef4 <tcpip_tcp_timer+0x44>)
 801beda:	2200      	movs	r2, #0
 801bedc:	601a      	str	r2, [r3, #0]
  }
}
 801bede:	bf00      	nop
 801bee0:	3708      	adds	r7, #8
 801bee2:	46bd      	mov	sp, r7
 801bee4:	bd80      	pop	{r7, pc}
 801bee6:	bf00      	nop
 801bee8:	24048e80 	.word	0x24048e80
 801beec:	24048e90 	.word	0x24048e90
 801bef0:	0801beb1 	.word	0x0801beb1
 801bef4:	240407ac 	.word	0x240407ac

0801bef8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801bef8:	b580      	push	{r7, lr}
 801befa:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801befc:	4b0a      	ldr	r3, [pc, #40]	; (801bf28 <tcp_timer_needed+0x30>)
 801befe:	681b      	ldr	r3, [r3, #0]
 801bf00:	2b00      	cmp	r3, #0
 801bf02:	d10f      	bne.n	801bf24 <tcp_timer_needed+0x2c>
 801bf04:	4b09      	ldr	r3, [pc, #36]	; (801bf2c <tcp_timer_needed+0x34>)
 801bf06:	681b      	ldr	r3, [r3, #0]
 801bf08:	2b00      	cmp	r3, #0
 801bf0a:	d103      	bne.n	801bf14 <tcp_timer_needed+0x1c>
 801bf0c:	4b08      	ldr	r3, [pc, #32]	; (801bf30 <tcp_timer_needed+0x38>)
 801bf0e:	681b      	ldr	r3, [r3, #0]
 801bf10:	2b00      	cmp	r3, #0
 801bf12:	d007      	beq.n	801bf24 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801bf14:	4b04      	ldr	r3, [pc, #16]	; (801bf28 <tcp_timer_needed+0x30>)
 801bf16:	2201      	movs	r2, #1
 801bf18:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801bf1a:	2200      	movs	r2, #0
 801bf1c:	4905      	ldr	r1, [pc, #20]	; (801bf34 <tcp_timer_needed+0x3c>)
 801bf1e:	20fa      	movs	r0, #250	; 0xfa
 801bf20:	f000 f8ca 	bl	801c0b8 <sys_timeout>
  }
}
 801bf24:	bf00      	nop
 801bf26:	bd80      	pop	{r7, pc}
 801bf28:	240407ac 	.word	0x240407ac
 801bf2c:	24048e80 	.word	0x24048e80
 801bf30:	24048e90 	.word	0x24048e90
 801bf34:	0801beb1 	.word	0x0801beb1

0801bf38 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801bf38:	b580      	push	{r7, lr}
 801bf3a:	b086      	sub	sp, #24
 801bf3c:	af00      	add	r7, sp, #0
 801bf3e:	60f8      	str	r0, [r7, #12]
 801bf40:	60b9      	str	r1, [r7, #8]
 801bf42:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801bf44:	200a      	movs	r0, #10
 801bf46:	f7f7 f8a9 	bl	801309c <memp_malloc>
 801bf4a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801bf4c:	693b      	ldr	r3, [r7, #16]
 801bf4e:	2b00      	cmp	r3, #0
 801bf50:	d109      	bne.n	801bf66 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801bf52:	693b      	ldr	r3, [r7, #16]
 801bf54:	2b00      	cmp	r3, #0
 801bf56:	d151      	bne.n	801bffc <sys_timeout_abs+0xc4>
 801bf58:	4b2a      	ldr	r3, [pc, #168]	; (801c004 <sys_timeout_abs+0xcc>)
 801bf5a:	22be      	movs	r2, #190	; 0xbe
 801bf5c:	492a      	ldr	r1, [pc, #168]	; (801c008 <sys_timeout_abs+0xd0>)
 801bf5e:	482b      	ldr	r0, [pc, #172]	; (801c00c <sys_timeout_abs+0xd4>)
 801bf60:	f004 fff6 	bl	8020f50 <iprintf>
    return;
 801bf64:	e04a      	b.n	801bffc <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801bf66:	693b      	ldr	r3, [r7, #16]
 801bf68:	2200      	movs	r2, #0
 801bf6a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801bf6c:	693b      	ldr	r3, [r7, #16]
 801bf6e:	68ba      	ldr	r2, [r7, #8]
 801bf70:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801bf72:	693b      	ldr	r3, [r7, #16]
 801bf74:	687a      	ldr	r2, [r7, #4]
 801bf76:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801bf78:	693b      	ldr	r3, [r7, #16]
 801bf7a:	68fa      	ldr	r2, [r7, #12]
 801bf7c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801bf7e:	4b24      	ldr	r3, [pc, #144]	; (801c010 <sys_timeout_abs+0xd8>)
 801bf80:	681b      	ldr	r3, [r3, #0]
 801bf82:	2b00      	cmp	r3, #0
 801bf84:	d103      	bne.n	801bf8e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801bf86:	4a22      	ldr	r2, [pc, #136]	; (801c010 <sys_timeout_abs+0xd8>)
 801bf88:	693b      	ldr	r3, [r7, #16]
 801bf8a:	6013      	str	r3, [r2, #0]
    return;
 801bf8c:	e037      	b.n	801bffe <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801bf8e:	693b      	ldr	r3, [r7, #16]
 801bf90:	685a      	ldr	r2, [r3, #4]
 801bf92:	4b1f      	ldr	r3, [pc, #124]	; (801c010 <sys_timeout_abs+0xd8>)
 801bf94:	681b      	ldr	r3, [r3, #0]
 801bf96:	685b      	ldr	r3, [r3, #4]
 801bf98:	1ad3      	subs	r3, r2, r3
 801bf9a:	0fdb      	lsrs	r3, r3, #31
 801bf9c:	f003 0301 	and.w	r3, r3, #1
 801bfa0:	b2db      	uxtb	r3, r3
 801bfa2:	2b00      	cmp	r3, #0
 801bfa4:	d007      	beq.n	801bfb6 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801bfa6:	4b1a      	ldr	r3, [pc, #104]	; (801c010 <sys_timeout_abs+0xd8>)
 801bfa8:	681a      	ldr	r2, [r3, #0]
 801bfaa:	693b      	ldr	r3, [r7, #16]
 801bfac:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801bfae:	4a18      	ldr	r2, [pc, #96]	; (801c010 <sys_timeout_abs+0xd8>)
 801bfb0:	693b      	ldr	r3, [r7, #16]
 801bfb2:	6013      	str	r3, [r2, #0]
 801bfb4:	e023      	b.n	801bffe <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801bfb6:	4b16      	ldr	r3, [pc, #88]	; (801c010 <sys_timeout_abs+0xd8>)
 801bfb8:	681b      	ldr	r3, [r3, #0]
 801bfba:	617b      	str	r3, [r7, #20]
 801bfbc:	e01a      	b.n	801bff4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801bfbe:	697b      	ldr	r3, [r7, #20]
 801bfc0:	681b      	ldr	r3, [r3, #0]
 801bfc2:	2b00      	cmp	r3, #0
 801bfc4:	d00b      	beq.n	801bfde <sys_timeout_abs+0xa6>
 801bfc6:	693b      	ldr	r3, [r7, #16]
 801bfc8:	685a      	ldr	r2, [r3, #4]
 801bfca:	697b      	ldr	r3, [r7, #20]
 801bfcc:	681b      	ldr	r3, [r3, #0]
 801bfce:	685b      	ldr	r3, [r3, #4]
 801bfd0:	1ad3      	subs	r3, r2, r3
 801bfd2:	0fdb      	lsrs	r3, r3, #31
 801bfd4:	f003 0301 	and.w	r3, r3, #1
 801bfd8:	b2db      	uxtb	r3, r3
 801bfda:	2b00      	cmp	r3, #0
 801bfdc:	d007      	beq.n	801bfee <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801bfde:	697b      	ldr	r3, [r7, #20]
 801bfe0:	681a      	ldr	r2, [r3, #0]
 801bfe2:	693b      	ldr	r3, [r7, #16]
 801bfe4:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801bfe6:	697b      	ldr	r3, [r7, #20]
 801bfe8:	693a      	ldr	r2, [r7, #16]
 801bfea:	601a      	str	r2, [r3, #0]
        break;
 801bfec:	e007      	b.n	801bffe <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801bfee:	697b      	ldr	r3, [r7, #20]
 801bff0:	681b      	ldr	r3, [r3, #0]
 801bff2:	617b      	str	r3, [r7, #20]
 801bff4:	697b      	ldr	r3, [r7, #20]
 801bff6:	2b00      	cmp	r3, #0
 801bff8:	d1e1      	bne.n	801bfbe <sys_timeout_abs+0x86>
 801bffa:	e000      	b.n	801bffe <sys_timeout_abs+0xc6>
    return;
 801bffc:	bf00      	nop
      }
    }
  }
}
 801bffe:	3718      	adds	r7, #24
 801c000:	46bd      	mov	sp, r7
 801c002:	bd80      	pop	{r7, pc}
 801c004:	080268cc 	.word	0x080268cc
 801c008:	08026920 	.word	0x08026920
 801c00c:	08026960 	.word	0x08026960
 801c010:	240407a4 	.word	0x240407a4

0801c014 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801c014:	b580      	push	{r7, lr}
 801c016:	b086      	sub	sp, #24
 801c018:	af00      	add	r7, sp, #0
 801c01a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801c01c:	687b      	ldr	r3, [r7, #4]
 801c01e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801c020:	697b      	ldr	r3, [r7, #20]
 801c022:	685b      	ldr	r3, [r3, #4]
 801c024:	4798      	blx	r3

  now = sys_now();
 801c026:	f7ee fc89 	bl	800a93c <sys_now>
 801c02a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801c02c:	697b      	ldr	r3, [r7, #20]
 801c02e:	681a      	ldr	r2, [r3, #0]
 801c030:	4b0f      	ldr	r3, [pc, #60]	; (801c070 <lwip_cyclic_timer+0x5c>)
 801c032:	681b      	ldr	r3, [r3, #0]
 801c034:	4413      	add	r3, r2
 801c036:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801c038:	68fa      	ldr	r2, [r7, #12]
 801c03a:	693b      	ldr	r3, [r7, #16]
 801c03c:	1ad3      	subs	r3, r2, r3
 801c03e:	0fdb      	lsrs	r3, r3, #31
 801c040:	f003 0301 	and.w	r3, r3, #1
 801c044:	b2db      	uxtb	r3, r3
 801c046:	2b00      	cmp	r3, #0
 801c048:	d009      	beq.n	801c05e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801c04a:	697b      	ldr	r3, [r7, #20]
 801c04c:	681a      	ldr	r2, [r3, #0]
 801c04e:	693b      	ldr	r3, [r7, #16]
 801c050:	4413      	add	r3, r2
 801c052:	687a      	ldr	r2, [r7, #4]
 801c054:	4907      	ldr	r1, [pc, #28]	; (801c074 <lwip_cyclic_timer+0x60>)
 801c056:	4618      	mov	r0, r3
 801c058:	f7ff ff6e 	bl	801bf38 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801c05c:	e004      	b.n	801c068 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801c05e:	687a      	ldr	r2, [r7, #4]
 801c060:	4904      	ldr	r1, [pc, #16]	; (801c074 <lwip_cyclic_timer+0x60>)
 801c062:	68f8      	ldr	r0, [r7, #12]
 801c064:	f7ff ff68 	bl	801bf38 <sys_timeout_abs>
}
 801c068:	bf00      	nop
 801c06a:	3718      	adds	r7, #24
 801c06c:	46bd      	mov	sp, r7
 801c06e:	bd80      	pop	{r7, pc}
 801c070:	240407a8 	.word	0x240407a8
 801c074:	0801c015 	.word	0x0801c015

0801c078 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801c078:	b580      	push	{r7, lr}
 801c07a:	b082      	sub	sp, #8
 801c07c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801c07e:	2301      	movs	r3, #1
 801c080:	607b      	str	r3, [r7, #4]
 801c082:	e00e      	b.n	801c0a2 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801c084:	4a0a      	ldr	r2, [pc, #40]	; (801c0b0 <sys_timeouts_init+0x38>)
 801c086:	687b      	ldr	r3, [r7, #4]
 801c088:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801c08c:	687b      	ldr	r3, [r7, #4]
 801c08e:	00db      	lsls	r3, r3, #3
 801c090:	4a07      	ldr	r2, [pc, #28]	; (801c0b0 <sys_timeouts_init+0x38>)
 801c092:	4413      	add	r3, r2
 801c094:	461a      	mov	r2, r3
 801c096:	4907      	ldr	r1, [pc, #28]	; (801c0b4 <sys_timeouts_init+0x3c>)
 801c098:	f000 f80e 	bl	801c0b8 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801c09c:	687b      	ldr	r3, [r7, #4]
 801c09e:	3301      	adds	r3, #1
 801c0a0:	607b      	str	r3, [r7, #4]
 801c0a2:	687b      	ldr	r3, [r7, #4]
 801c0a4:	2b02      	cmp	r3, #2
 801c0a6:	d9ed      	bls.n	801c084 <sys_timeouts_init+0xc>
  }
}
 801c0a8:	bf00      	nop
 801c0aa:	3708      	adds	r7, #8
 801c0ac:	46bd      	mov	sp, r7
 801c0ae:	bd80      	pop	{r7, pc}
 801c0b0:	08027048 	.word	0x08027048
 801c0b4:	0801c015 	.word	0x0801c015

0801c0b8 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801c0b8:	b580      	push	{r7, lr}
 801c0ba:	b086      	sub	sp, #24
 801c0bc:	af00      	add	r7, sp, #0
 801c0be:	60f8      	str	r0, [r7, #12]
 801c0c0:	60b9      	str	r1, [r7, #8]
 801c0c2:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801c0c4:	68fb      	ldr	r3, [r7, #12]
 801c0c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801c0ca:	d306      	bcc.n	801c0da <sys_timeout+0x22>
 801c0cc:	4b0a      	ldr	r3, [pc, #40]	; (801c0f8 <sys_timeout+0x40>)
 801c0ce:	f240 1229 	movw	r2, #297	; 0x129
 801c0d2:	490a      	ldr	r1, [pc, #40]	; (801c0fc <sys_timeout+0x44>)
 801c0d4:	480a      	ldr	r0, [pc, #40]	; (801c100 <sys_timeout+0x48>)
 801c0d6:	f004 ff3b 	bl	8020f50 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801c0da:	f7ee fc2f 	bl	800a93c <sys_now>
 801c0de:	4602      	mov	r2, r0
 801c0e0:	68fb      	ldr	r3, [r7, #12]
 801c0e2:	4413      	add	r3, r2
 801c0e4:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801c0e6:	687a      	ldr	r2, [r7, #4]
 801c0e8:	68b9      	ldr	r1, [r7, #8]
 801c0ea:	6978      	ldr	r0, [r7, #20]
 801c0ec:	f7ff ff24 	bl	801bf38 <sys_timeout_abs>
#endif
}
 801c0f0:	bf00      	nop
 801c0f2:	3718      	adds	r7, #24
 801c0f4:	46bd      	mov	sp, r7
 801c0f6:	bd80      	pop	{r7, pc}
 801c0f8:	080268cc 	.word	0x080268cc
 801c0fc:	08026988 	.word	0x08026988
 801c100:	08026960 	.word	0x08026960

0801c104 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801c104:	b580      	push	{r7, lr}
 801c106:	b084      	sub	sp, #16
 801c108:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801c10a:	f7ee fc17 	bl	800a93c <sys_now>
 801c10e:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801c110:	4b17      	ldr	r3, [pc, #92]	; (801c170 <sys_check_timeouts+0x6c>)
 801c112:	681b      	ldr	r3, [r3, #0]
 801c114:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801c116:	68bb      	ldr	r3, [r7, #8]
 801c118:	2b00      	cmp	r3, #0
 801c11a:	d022      	beq.n	801c162 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801c11c:	68bb      	ldr	r3, [r7, #8]
 801c11e:	685b      	ldr	r3, [r3, #4]
 801c120:	68fa      	ldr	r2, [r7, #12]
 801c122:	1ad3      	subs	r3, r2, r3
 801c124:	0fdb      	lsrs	r3, r3, #31
 801c126:	f003 0301 	and.w	r3, r3, #1
 801c12a:	b2db      	uxtb	r3, r3
 801c12c:	2b00      	cmp	r3, #0
 801c12e:	d11a      	bne.n	801c166 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801c130:	68bb      	ldr	r3, [r7, #8]
 801c132:	681b      	ldr	r3, [r3, #0]
 801c134:	4a0e      	ldr	r2, [pc, #56]	; (801c170 <sys_check_timeouts+0x6c>)
 801c136:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801c138:	68bb      	ldr	r3, [r7, #8]
 801c13a:	689b      	ldr	r3, [r3, #8]
 801c13c:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801c13e:	68bb      	ldr	r3, [r7, #8]
 801c140:	68db      	ldr	r3, [r3, #12]
 801c142:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801c144:	68bb      	ldr	r3, [r7, #8]
 801c146:	685b      	ldr	r3, [r3, #4]
 801c148:	4a0a      	ldr	r2, [pc, #40]	; (801c174 <sys_check_timeouts+0x70>)
 801c14a:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801c14c:	68b9      	ldr	r1, [r7, #8]
 801c14e:	200a      	movs	r0, #10
 801c150:	f7f7 f81a 	bl	8013188 <memp_free>
    if (handler != NULL) {
 801c154:	687b      	ldr	r3, [r7, #4]
 801c156:	2b00      	cmp	r3, #0
 801c158:	d0da      	beq.n	801c110 <sys_check_timeouts+0xc>
      handler(arg);
 801c15a:	687b      	ldr	r3, [r7, #4]
 801c15c:	6838      	ldr	r0, [r7, #0]
 801c15e:	4798      	blx	r3
  do {
 801c160:	e7d6      	b.n	801c110 <sys_check_timeouts+0xc>
      return;
 801c162:	bf00      	nop
 801c164:	e000      	b.n	801c168 <sys_check_timeouts+0x64>
      return;
 801c166:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801c168:	3710      	adds	r7, #16
 801c16a:	46bd      	mov	sp, r7
 801c16c:	bd80      	pop	{r7, pc}
 801c16e:	bf00      	nop
 801c170:	240407a4 	.word	0x240407a4
 801c174:	240407a8 	.word	0x240407a8

0801c178 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801c178:	b580      	push	{r7, lr}
 801c17a:	b082      	sub	sp, #8
 801c17c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801c17e:	4b16      	ldr	r3, [pc, #88]	; (801c1d8 <sys_timeouts_sleeptime+0x60>)
 801c180:	681b      	ldr	r3, [r3, #0]
 801c182:	2b00      	cmp	r3, #0
 801c184:	d102      	bne.n	801c18c <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801c186:	f04f 33ff 	mov.w	r3, #4294967295
 801c18a:	e020      	b.n	801c1ce <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801c18c:	f7ee fbd6 	bl	800a93c <sys_now>
 801c190:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801c192:	4b11      	ldr	r3, [pc, #68]	; (801c1d8 <sys_timeouts_sleeptime+0x60>)
 801c194:	681b      	ldr	r3, [r3, #0]
 801c196:	685a      	ldr	r2, [r3, #4]
 801c198:	687b      	ldr	r3, [r7, #4]
 801c19a:	1ad3      	subs	r3, r2, r3
 801c19c:	0fdb      	lsrs	r3, r3, #31
 801c19e:	f003 0301 	and.w	r3, r3, #1
 801c1a2:	b2db      	uxtb	r3, r3
 801c1a4:	2b00      	cmp	r3, #0
 801c1a6:	d001      	beq.n	801c1ac <sys_timeouts_sleeptime+0x34>
    return 0;
 801c1a8:	2300      	movs	r3, #0
 801c1aa:	e010      	b.n	801c1ce <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801c1ac:	4b0a      	ldr	r3, [pc, #40]	; (801c1d8 <sys_timeouts_sleeptime+0x60>)
 801c1ae:	681b      	ldr	r3, [r3, #0]
 801c1b0:	685a      	ldr	r2, [r3, #4]
 801c1b2:	687b      	ldr	r3, [r7, #4]
 801c1b4:	1ad3      	subs	r3, r2, r3
 801c1b6:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801c1b8:	683b      	ldr	r3, [r7, #0]
 801c1ba:	2b00      	cmp	r3, #0
 801c1bc:	da06      	bge.n	801c1cc <sys_timeouts_sleeptime+0x54>
 801c1be:	4b07      	ldr	r3, [pc, #28]	; (801c1dc <sys_timeouts_sleeptime+0x64>)
 801c1c0:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 801c1c4:	4906      	ldr	r1, [pc, #24]	; (801c1e0 <sys_timeouts_sleeptime+0x68>)
 801c1c6:	4807      	ldr	r0, [pc, #28]	; (801c1e4 <sys_timeouts_sleeptime+0x6c>)
 801c1c8:	f004 fec2 	bl	8020f50 <iprintf>
    return ret;
 801c1cc:	683b      	ldr	r3, [r7, #0]
  }
}
 801c1ce:	4618      	mov	r0, r3
 801c1d0:	3708      	adds	r7, #8
 801c1d2:	46bd      	mov	sp, r7
 801c1d4:	bd80      	pop	{r7, pc}
 801c1d6:	bf00      	nop
 801c1d8:	240407a4 	.word	0x240407a4
 801c1dc:	080268cc 	.word	0x080268cc
 801c1e0:	080269c0 	.word	0x080269c0
 801c1e4:	08026960 	.word	0x08026960

0801c1e8 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801c1e8:	b580      	push	{r7, lr}
 801c1ea:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801c1ec:	f004 fec8 	bl	8020f80 <rand>
 801c1f0:	4603      	mov	r3, r0
 801c1f2:	b29b      	uxth	r3, r3
 801c1f4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801c1f8:	b29b      	uxth	r3, r3
 801c1fa:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801c1fe:	b29a      	uxth	r2, r3
 801c200:	4b01      	ldr	r3, [pc, #4]	; (801c208 <udp_init+0x20>)
 801c202:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801c204:	bf00      	nop
 801c206:	bd80      	pop	{r7, pc}
 801c208:	24000030 	.word	0x24000030

0801c20c <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801c20c:	b480      	push	{r7}
 801c20e:	b083      	sub	sp, #12
 801c210:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801c212:	2300      	movs	r3, #0
 801c214:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801c216:	4b17      	ldr	r3, [pc, #92]	; (801c274 <udp_new_port+0x68>)
 801c218:	881b      	ldrh	r3, [r3, #0]
 801c21a:	1c5a      	adds	r2, r3, #1
 801c21c:	b291      	uxth	r1, r2
 801c21e:	4a15      	ldr	r2, [pc, #84]	; (801c274 <udp_new_port+0x68>)
 801c220:	8011      	strh	r1, [r2, #0]
 801c222:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801c226:	4293      	cmp	r3, r2
 801c228:	d103      	bne.n	801c232 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801c22a:	4b12      	ldr	r3, [pc, #72]	; (801c274 <udp_new_port+0x68>)
 801c22c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801c230:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801c232:	4b11      	ldr	r3, [pc, #68]	; (801c278 <udp_new_port+0x6c>)
 801c234:	681b      	ldr	r3, [r3, #0]
 801c236:	603b      	str	r3, [r7, #0]
 801c238:	e011      	b.n	801c25e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801c23a:	683b      	ldr	r3, [r7, #0]
 801c23c:	8a5a      	ldrh	r2, [r3, #18]
 801c23e:	4b0d      	ldr	r3, [pc, #52]	; (801c274 <udp_new_port+0x68>)
 801c240:	881b      	ldrh	r3, [r3, #0]
 801c242:	429a      	cmp	r2, r3
 801c244:	d108      	bne.n	801c258 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801c246:	88fb      	ldrh	r3, [r7, #6]
 801c248:	3301      	adds	r3, #1
 801c24a:	80fb      	strh	r3, [r7, #6]
 801c24c:	88fb      	ldrh	r3, [r7, #6]
 801c24e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801c252:	d3e0      	bcc.n	801c216 <udp_new_port+0xa>
        return 0;
 801c254:	2300      	movs	r3, #0
 801c256:	e007      	b.n	801c268 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801c258:	683b      	ldr	r3, [r7, #0]
 801c25a:	68db      	ldr	r3, [r3, #12]
 801c25c:	603b      	str	r3, [r7, #0]
 801c25e:	683b      	ldr	r3, [r7, #0]
 801c260:	2b00      	cmp	r3, #0
 801c262:	d1ea      	bne.n	801c23a <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801c264:	4b03      	ldr	r3, [pc, #12]	; (801c274 <udp_new_port+0x68>)
 801c266:	881b      	ldrh	r3, [r3, #0]
}
 801c268:	4618      	mov	r0, r3
 801c26a:	370c      	adds	r7, #12
 801c26c:	46bd      	mov	sp, r7
 801c26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c272:	4770      	bx	lr
 801c274:	24000030 	.word	0x24000030
 801c278:	24048e9c 	.word	0x24048e9c

0801c27c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801c27c:	b580      	push	{r7, lr}
 801c27e:	b084      	sub	sp, #16
 801c280:	af00      	add	r7, sp, #0
 801c282:	60f8      	str	r0, [r7, #12]
 801c284:	60b9      	str	r1, [r7, #8]
 801c286:	4613      	mov	r3, r2
 801c288:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801c28a:	68fb      	ldr	r3, [r7, #12]
 801c28c:	2b00      	cmp	r3, #0
 801c28e:	d105      	bne.n	801c29c <udp_input_local_match+0x20>
 801c290:	4b27      	ldr	r3, [pc, #156]	; (801c330 <udp_input_local_match+0xb4>)
 801c292:	2287      	movs	r2, #135	; 0x87
 801c294:	4927      	ldr	r1, [pc, #156]	; (801c334 <udp_input_local_match+0xb8>)
 801c296:	4828      	ldr	r0, [pc, #160]	; (801c338 <udp_input_local_match+0xbc>)
 801c298:	f004 fe5a 	bl	8020f50 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801c29c:	68bb      	ldr	r3, [r7, #8]
 801c29e:	2b00      	cmp	r3, #0
 801c2a0:	d105      	bne.n	801c2ae <udp_input_local_match+0x32>
 801c2a2:	4b23      	ldr	r3, [pc, #140]	; (801c330 <udp_input_local_match+0xb4>)
 801c2a4:	2288      	movs	r2, #136	; 0x88
 801c2a6:	4925      	ldr	r1, [pc, #148]	; (801c33c <udp_input_local_match+0xc0>)
 801c2a8:	4823      	ldr	r0, [pc, #140]	; (801c338 <udp_input_local_match+0xbc>)
 801c2aa:	f004 fe51 	bl	8020f50 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801c2ae:	68fb      	ldr	r3, [r7, #12]
 801c2b0:	7a1b      	ldrb	r3, [r3, #8]
 801c2b2:	2b00      	cmp	r3, #0
 801c2b4:	d00b      	beq.n	801c2ce <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801c2b6:	68fb      	ldr	r3, [r7, #12]
 801c2b8:	7a1a      	ldrb	r2, [r3, #8]
 801c2ba:	4b21      	ldr	r3, [pc, #132]	; (801c340 <udp_input_local_match+0xc4>)
 801c2bc:	685b      	ldr	r3, [r3, #4]
 801c2be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801c2c2:	3301      	adds	r3, #1
 801c2c4:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801c2c6:	429a      	cmp	r2, r3
 801c2c8:	d001      	beq.n	801c2ce <udp_input_local_match+0x52>
    return 0;
 801c2ca:	2300      	movs	r3, #0
 801c2cc:	e02b      	b.n	801c326 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801c2ce:	79fb      	ldrb	r3, [r7, #7]
 801c2d0:	2b00      	cmp	r3, #0
 801c2d2:	d018      	beq.n	801c306 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801c2d4:	68fb      	ldr	r3, [r7, #12]
 801c2d6:	2b00      	cmp	r3, #0
 801c2d8:	d013      	beq.n	801c302 <udp_input_local_match+0x86>
 801c2da:	68fb      	ldr	r3, [r7, #12]
 801c2dc:	681b      	ldr	r3, [r3, #0]
 801c2de:	2b00      	cmp	r3, #0
 801c2e0:	d00f      	beq.n	801c302 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801c2e2:	4b17      	ldr	r3, [pc, #92]	; (801c340 <udp_input_local_match+0xc4>)
 801c2e4:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801c2e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c2ea:	d00a      	beq.n	801c302 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801c2ec:	68fb      	ldr	r3, [r7, #12]
 801c2ee:	681a      	ldr	r2, [r3, #0]
 801c2f0:	4b13      	ldr	r3, [pc, #76]	; (801c340 <udp_input_local_match+0xc4>)
 801c2f2:	695b      	ldr	r3, [r3, #20]
 801c2f4:	405a      	eors	r2, r3
 801c2f6:	68bb      	ldr	r3, [r7, #8]
 801c2f8:	3308      	adds	r3, #8
 801c2fa:	681b      	ldr	r3, [r3, #0]
 801c2fc:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801c2fe:	2b00      	cmp	r3, #0
 801c300:	d110      	bne.n	801c324 <udp_input_local_match+0xa8>
          return 1;
 801c302:	2301      	movs	r3, #1
 801c304:	e00f      	b.n	801c326 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801c306:	68fb      	ldr	r3, [r7, #12]
 801c308:	2b00      	cmp	r3, #0
 801c30a:	d009      	beq.n	801c320 <udp_input_local_match+0xa4>
 801c30c:	68fb      	ldr	r3, [r7, #12]
 801c30e:	681b      	ldr	r3, [r3, #0]
 801c310:	2b00      	cmp	r3, #0
 801c312:	d005      	beq.n	801c320 <udp_input_local_match+0xa4>
 801c314:	68fb      	ldr	r3, [r7, #12]
 801c316:	681a      	ldr	r2, [r3, #0]
 801c318:	4b09      	ldr	r3, [pc, #36]	; (801c340 <udp_input_local_match+0xc4>)
 801c31a:	695b      	ldr	r3, [r3, #20]
 801c31c:	429a      	cmp	r2, r3
 801c31e:	d101      	bne.n	801c324 <udp_input_local_match+0xa8>
        return 1;
 801c320:	2301      	movs	r3, #1
 801c322:	e000      	b.n	801c326 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801c324:	2300      	movs	r3, #0
}
 801c326:	4618      	mov	r0, r3
 801c328:	3710      	adds	r7, #16
 801c32a:	46bd      	mov	sp, r7
 801c32c:	bd80      	pop	{r7, pc}
 801c32e:	bf00      	nop
 801c330:	080269d4 	.word	0x080269d4
 801c334:	08026a24 	.word	0x08026a24
 801c338:	08026a48 	.word	0x08026a48
 801c33c:	08026a70 	.word	0x08026a70
 801c340:	24045db8 	.word	0x24045db8

0801c344 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801c344:	b590      	push	{r4, r7, lr}
 801c346:	b08d      	sub	sp, #52	; 0x34
 801c348:	af02      	add	r7, sp, #8
 801c34a:	6078      	str	r0, [r7, #4]
 801c34c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801c34e:	2300      	movs	r3, #0
 801c350:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801c352:	687b      	ldr	r3, [r7, #4]
 801c354:	2b00      	cmp	r3, #0
 801c356:	d105      	bne.n	801c364 <udp_input+0x20>
 801c358:	4b7c      	ldr	r3, [pc, #496]	; (801c54c <udp_input+0x208>)
 801c35a:	22cf      	movs	r2, #207	; 0xcf
 801c35c:	497c      	ldr	r1, [pc, #496]	; (801c550 <udp_input+0x20c>)
 801c35e:	487d      	ldr	r0, [pc, #500]	; (801c554 <udp_input+0x210>)
 801c360:	f004 fdf6 	bl	8020f50 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801c364:	683b      	ldr	r3, [r7, #0]
 801c366:	2b00      	cmp	r3, #0
 801c368:	d105      	bne.n	801c376 <udp_input+0x32>
 801c36a:	4b78      	ldr	r3, [pc, #480]	; (801c54c <udp_input+0x208>)
 801c36c:	22d0      	movs	r2, #208	; 0xd0
 801c36e:	497a      	ldr	r1, [pc, #488]	; (801c558 <udp_input+0x214>)
 801c370:	4878      	ldr	r0, [pc, #480]	; (801c554 <udp_input+0x210>)
 801c372:	f004 fded 	bl	8020f50 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801c376:	687b      	ldr	r3, [r7, #4]
 801c378:	895b      	ldrh	r3, [r3, #10]
 801c37a:	2b07      	cmp	r3, #7
 801c37c:	d803      	bhi.n	801c386 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801c37e:	6878      	ldr	r0, [r7, #4]
 801c380:	f7f7 fe66 	bl	8014050 <pbuf_free>
    goto end;
 801c384:	e0de      	b.n	801c544 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801c386:	687b      	ldr	r3, [r7, #4]
 801c388:	685b      	ldr	r3, [r3, #4]
 801c38a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801c38c:	4b73      	ldr	r3, [pc, #460]	; (801c55c <udp_input+0x218>)
 801c38e:	695a      	ldr	r2, [r3, #20]
 801c390:	4b72      	ldr	r3, [pc, #456]	; (801c55c <udp_input+0x218>)
 801c392:	681b      	ldr	r3, [r3, #0]
 801c394:	4619      	mov	r1, r3
 801c396:	4610      	mov	r0, r2
 801c398:	f7f5 fa3a 	bl	8011810 <ip4_addr_isbroadcast_u32>
 801c39c:	4603      	mov	r3, r0
 801c39e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801c3a0:	697b      	ldr	r3, [r7, #20]
 801c3a2:	881b      	ldrh	r3, [r3, #0]
 801c3a4:	b29b      	uxth	r3, r3
 801c3a6:	4618      	mov	r0, r3
 801c3a8:	f7f3 fca8 	bl	800fcfc <lwip_htons>
 801c3ac:	4603      	mov	r3, r0
 801c3ae:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801c3b0:	697b      	ldr	r3, [r7, #20]
 801c3b2:	885b      	ldrh	r3, [r3, #2]
 801c3b4:	b29b      	uxth	r3, r3
 801c3b6:	4618      	mov	r0, r3
 801c3b8:	f7f3 fca0 	bl	800fcfc <lwip_htons>
 801c3bc:	4603      	mov	r3, r0
 801c3be:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801c3c0:	2300      	movs	r3, #0
 801c3c2:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 801c3c4:	2300      	movs	r3, #0
 801c3c6:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801c3c8:	2300      	movs	r3, #0
 801c3ca:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801c3cc:	4b64      	ldr	r3, [pc, #400]	; (801c560 <udp_input+0x21c>)
 801c3ce:	681b      	ldr	r3, [r3, #0]
 801c3d0:	627b      	str	r3, [r7, #36]	; 0x24
 801c3d2:	e054      	b.n	801c47e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801c3d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c3d6:	8a5b      	ldrh	r3, [r3, #18]
 801c3d8:	89fa      	ldrh	r2, [r7, #14]
 801c3da:	429a      	cmp	r2, r3
 801c3dc:	d14a      	bne.n	801c474 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801c3de:	7cfb      	ldrb	r3, [r7, #19]
 801c3e0:	461a      	mov	r2, r3
 801c3e2:	6839      	ldr	r1, [r7, #0]
 801c3e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801c3e6:	f7ff ff49 	bl	801c27c <udp_input_local_match>
 801c3ea:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801c3ec:	2b00      	cmp	r3, #0
 801c3ee:	d041      	beq.n	801c474 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801c3f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c3f2:	7c1b      	ldrb	r3, [r3, #16]
 801c3f4:	f003 0304 	and.w	r3, r3, #4
 801c3f8:	2b00      	cmp	r3, #0
 801c3fa:	d11d      	bne.n	801c438 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801c3fc:	69fb      	ldr	r3, [r7, #28]
 801c3fe:	2b00      	cmp	r3, #0
 801c400:	d102      	bne.n	801c408 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801c402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c404:	61fb      	str	r3, [r7, #28]
 801c406:	e017      	b.n	801c438 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801c408:	7cfb      	ldrb	r3, [r7, #19]
 801c40a:	2b00      	cmp	r3, #0
 801c40c:	d014      	beq.n	801c438 <udp_input+0xf4>
 801c40e:	4b53      	ldr	r3, [pc, #332]	; (801c55c <udp_input+0x218>)
 801c410:	695b      	ldr	r3, [r3, #20]
 801c412:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c416:	d10f      	bne.n	801c438 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801c418:	69fb      	ldr	r3, [r7, #28]
 801c41a:	681a      	ldr	r2, [r3, #0]
 801c41c:	683b      	ldr	r3, [r7, #0]
 801c41e:	3304      	adds	r3, #4
 801c420:	681b      	ldr	r3, [r3, #0]
 801c422:	429a      	cmp	r2, r3
 801c424:	d008      	beq.n	801c438 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801c426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c428:	681a      	ldr	r2, [r3, #0]
 801c42a:	683b      	ldr	r3, [r7, #0]
 801c42c:	3304      	adds	r3, #4
 801c42e:	681b      	ldr	r3, [r3, #0]
 801c430:	429a      	cmp	r2, r3
 801c432:	d101      	bne.n	801c438 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801c434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c436:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801c438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c43a:	8a9b      	ldrh	r3, [r3, #20]
 801c43c:	8a3a      	ldrh	r2, [r7, #16]
 801c43e:	429a      	cmp	r2, r3
 801c440:	d118      	bne.n	801c474 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801c442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c444:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801c446:	2b00      	cmp	r3, #0
 801c448:	d005      	beq.n	801c456 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801c44a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c44c:	685a      	ldr	r2, [r3, #4]
 801c44e:	4b43      	ldr	r3, [pc, #268]	; (801c55c <udp_input+0x218>)
 801c450:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801c452:	429a      	cmp	r2, r3
 801c454:	d10e      	bne.n	801c474 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801c456:	6a3b      	ldr	r3, [r7, #32]
 801c458:	2b00      	cmp	r3, #0
 801c45a:	d014      	beq.n	801c486 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801c45c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c45e:	68da      	ldr	r2, [r3, #12]
 801c460:	6a3b      	ldr	r3, [r7, #32]
 801c462:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801c464:	4b3e      	ldr	r3, [pc, #248]	; (801c560 <udp_input+0x21c>)
 801c466:	681a      	ldr	r2, [r3, #0]
 801c468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c46a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801c46c:	4a3c      	ldr	r2, [pc, #240]	; (801c560 <udp_input+0x21c>)
 801c46e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c470:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801c472:	e008      	b.n	801c486 <udp_input+0x142>
      }
    }

    prev = pcb;
 801c474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c476:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801c478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c47a:	68db      	ldr	r3, [r3, #12]
 801c47c:	627b      	str	r3, [r7, #36]	; 0x24
 801c47e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c480:	2b00      	cmp	r3, #0
 801c482:	d1a7      	bne.n	801c3d4 <udp_input+0x90>
 801c484:	e000      	b.n	801c488 <udp_input+0x144>
        break;
 801c486:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801c488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c48a:	2b00      	cmp	r3, #0
 801c48c:	d101      	bne.n	801c492 <udp_input+0x14e>
    pcb = uncon_pcb;
 801c48e:	69fb      	ldr	r3, [r7, #28]
 801c490:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801c492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c494:	2b00      	cmp	r3, #0
 801c496:	d002      	beq.n	801c49e <udp_input+0x15a>
    for_us = 1;
 801c498:	2301      	movs	r3, #1
 801c49a:	76fb      	strb	r3, [r7, #27]
 801c49c:	e00a      	b.n	801c4b4 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801c49e:	683b      	ldr	r3, [r7, #0]
 801c4a0:	3304      	adds	r3, #4
 801c4a2:	681a      	ldr	r2, [r3, #0]
 801c4a4:	4b2d      	ldr	r3, [pc, #180]	; (801c55c <udp_input+0x218>)
 801c4a6:	695b      	ldr	r3, [r3, #20]
 801c4a8:	429a      	cmp	r2, r3
 801c4aa:	bf0c      	ite	eq
 801c4ac:	2301      	moveq	r3, #1
 801c4ae:	2300      	movne	r3, #0
 801c4b0:	b2db      	uxtb	r3, r3
 801c4b2:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801c4b4:	7efb      	ldrb	r3, [r7, #27]
 801c4b6:	2b00      	cmp	r3, #0
 801c4b8:	d041      	beq.n	801c53e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801c4ba:	2108      	movs	r1, #8
 801c4bc:	6878      	ldr	r0, [r7, #4]
 801c4be:	f7f7 fd0f 	bl	8013ee0 <pbuf_remove_header>
 801c4c2:	4603      	mov	r3, r0
 801c4c4:	2b00      	cmp	r3, #0
 801c4c6:	d00a      	beq.n	801c4de <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801c4c8:	4b20      	ldr	r3, [pc, #128]	; (801c54c <udp_input+0x208>)
 801c4ca:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801c4ce:	4925      	ldr	r1, [pc, #148]	; (801c564 <udp_input+0x220>)
 801c4d0:	4820      	ldr	r0, [pc, #128]	; (801c554 <udp_input+0x210>)
 801c4d2:	f004 fd3d 	bl	8020f50 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801c4d6:	6878      	ldr	r0, [r7, #4]
 801c4d8:	f7f7 fdba 	bl	8014050 <pbuf_free>
      goto end;
 801c4dc:	e032      	b.n	801c544 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801c4de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c4e0:	2b00      	cmp	r3, #0
 801c4e2:	d012      	beq.n	801c50a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801c4e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c4e6:	699b      	ldr	r3, [r3, #24]
 801c4e8:	2b00      	cmp	r3, #0
 801c4ea:	d00a      	beq.n	801c502 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801c4ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c4ee:	699c      	ldr	r4, [r3, #24]
 801c4f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c4f2:	69d8      	ldr	r0, [r3, #28]
 801c4f4:	8a3b      	ldrh	r3, [r7, #16]
 801c4f6:	9300      	str	r3, [sp, #0]
 801c4f8:	4b1b      	ldr	r3, [pc, #108]	; (801c568 <udp_input+0x224>)
 801c4fa:	687a      	ldr	r2, [r7, #4]
 801c4fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801c4fe:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801c500:	e021      	b.n	801c546 <udp_input+0x202>
        pbuf_free(p);
 801c502:	6878      	ldr	r0, [r7, #4]
 801c504:	f7f7 fda4 	bl	8014050 <pbuf_free>
        goto end;
 801c508:	e01c      	b.n	801c544 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801c50a:	7cfb      	ldrb	r3, [r7, #19]
 801c50c:	2b00      	cmp	r3, #0
 801c50e:	d112      	bne.n	801c536 <udp_input+0x1f2>
 801c510:	4b12      	ldr	r3, [pc, #72]	; (801c55c <udp_input+0x218>)
 801c512:	695b      	ldr	r3, [r3, #20]
 801c514:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801c518:	2be0      	cmp	r3, #224	; 0xe0
 801c51a:	d00c      	beq.n	801c536 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801c51c:	4b0f      	ldr	r3, [pc, #60]	; (801c55c <udp_input+0x218>)
 801c51e:	899b      	ldrh	r3, [r3, #12]
 801c520:	3308      	adds	r3, #8
 801c522:	b29b      	uxth	r3, r3
 801c524:	b21b      	sxth	r3, r3
 801c526:	4619      	mov	r1, r3
 801c528:	6878      	ldr	r0, [r7, #4]
 801c52a:	f7f7 fd4c 	bl	8013fc6 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801c52e:	2103      	movs	r1, #3
 801c530:	6878      	ldr	r0, [r7, #4]
 801c532:	f7f4 fd71 	bl	8011018 <icmp_dest_unreach>
      pbuf_free(p);
 801c536:	6878      	ldr	r0, [r7, #4]
 801c538:	f7f7 fd8a 	bl	8014050 <pbuf_free>
  return;
 801c53c:	e003      	b.n	801c546 <udp_input+0x202>
    pbuf_free(p);
 801c53e:	6878      	ldr	r0, [r7, #4]
 801c540:	f7f7 fd86 	bl	8014050 <pbuf_free>
  return;
 801c544:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801c546:	372c      	adds	r7, #44	; 0x2c
 801c548:	46bd      	mov	sp, r7
 801c54a:	bd90      	pop	{r4, r7, pc}
 801c54c:	080269d4 	.word	0x080269d4
 801c550:	08026a98 	.word	0x08026a98
 801c554:	08026a48 	.word	0x08026a48
 801c558:	08026ab0 	.word	0x08026ab0
 801c55c:	24045db8 	.word	0x24045db8
 801c560:	24048e9c 	.word	0x24048e9c
 801c564:	08026acc 	.word	0x08026acc
 801c568:	24045dc8 	.word	0x24045dc8

0801c56c <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 801c56c:	b580      	push	{r7, lr}
 801c56e:	b082      	sub	sp, #8
 801c570:	af00      	add	r7, sp, #0
 801c572:	6078      	str	r0, [r7, #4]
 801c574:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 801c576:	687b      	ldr	r3, [r7, #4]
 801c578:	2b00      	cmp	r3, #0
 801c57a:	d109      	bne.n	801c590 <udp_send+0x24>
 801c57c:	4b11      	ldr	r3, [pc, #68]	; (801c5c4 <udp_send+0x58>)
 801c57e:	f240 12d5 	movw	r2, #469	; 0x1d5
 801c582:	4911      	ldr	r1, [pc, #68]	; (801c5c8 <udp_send+0x5c>)
 801c584:	4811      	ldr	r0, [pc, #68]	; (801c5cc <udp_send+0x60>)
 801c586:	f004 fce3 	bl	8020f50 <iprintf>
 801c58a:	f06f 030f 	mvn.w	r3, #15
 801c58e:	e015      	b.n	801c5bc <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 801c590:	683b      	ldr	r3, [r7, #0]
 801c592:	2b00      	cmp	r3, #0
 801c594:	d109      	bne.n	801c5aa <udp_send+0x3e>
 801c596:	4b0b      	ldr	r3, [pc, #44]	; (801c5c4 <udp_send+0x58>)
 801c598:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 801c59c:	490c      	ldr	r1, [pc, #48]	; (801c5d0 <udp_send+0x64>)
 801c59e:	480b      	ldr	r0, [pc, #44]	; (801c5cc <udp_send+0x60>)
 801c5a0:	f004 fcd6 	bl	8020f50 <iprintf>
 801c5a4:	f06f 030f 	mvn.w	r3, #15
 801c5a8:	e008      	b.n	801c5bc <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 801c5aa:	687b      	ldr	r3, [r7, #4]
 801c5ac:	1d1a      	adds	r2, r3, #4
 801c5ae:	687b      	ldr	r3, [r7, #4]
 801c5b0:	8a9b      	ldrh	r3, [r3, #20]
 801c5b2:	6839      	ldr	r1, [r7, #0]
 801c5b4:	6878      	ldr	r0, [r7, #4]
 801c5b6:	f000 f80d 	bl	801c5d4 <udp_sendto>
 801c5ba:	4603      	mov	r3, r0
}
 801c5bc:	4618      	mov	r0, r3
 801c5be:	3708      	adds	r7, #8
 801c5c0:	46bd      	mov	sp, r7
 801c5c2:	bd80      	pop	{r7, pc}
 801c5c4:	080269d4 	.word	0x080269d4
 801c5c8:	08026ae8 	.word	0x08026ae8
 801c5cc:	08026a48 	.word	0x08026a48
 801c5d0:	08026b00 	.word	0x08026b00

0801c5d4 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 801c5d4:	b580      	push	{r7, lr}
 801c5d6:	b088      	sub	sp, #32
 801c5d8:	af02      	add	r7, sp, #8
 801c5da:	60f8      	str	r0, [r7, #12]
 801c5dc:	60b9      	str	r1, [r7, #8]
 801c5de:	607a      	str	r2, [r7, #4]
 801c5e0:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 801c5e2:	68fb      	ldr	r3, [r7, #12]
 801c5e4:	2b00      	cmp	r3, #0
 801c5e6:	d109      	bne.n	801c5fc <udp_sendto+0x28>
 801c5e8:	4b23      	ldr	r3, [pc, #140]	; (801c678 <udp_sendto+0xa4>)
 801c5ea:	f44f 7206 	mov.w	r2, #536	; 0x218
 801c5ee:	4923      	ldr	r1, [pc, #140]	; (801c67c <udp_sendto+0xa8>)
 801c5f0:	4823      	ldr	r0, [pc, #140]	; (801c680 <udp_sendto+0xac>)
 801c5f2:	f004 fcad 	bl	8020f50 <iprintf>
 801c5f6:	f06f 030f 	mvn.w	r3, #15
 801c5fa:	e038      	b.n	801c66e <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 801c5fc:	68bb      	ldr	r3, [r7, #8]
 801c5fe:	2b00      	cmp	r3, #0
 801c600:	d109      	bne.n	801c616 <udp_sendto+0x42>
 801c602:	4b1d      	ldr	r3, [pc, #116]	; (801c678 <udp_sendto+0xa4>)
 801c604:	f240 2219 	movw	r2, #537	; 0x219
 801c608:	491e      	ldr	r1, [pc, #120]	; (801c684 <udp_sendto+0xb0>)
 801c60a:	481d      	ldr	r0, [pc, #116]	; (801c680 <udp_sendto+0xac>)
 801c60c:	f004 fca0 	bl	8020f50 <iprintf>
 801c610:	f06f 030f 	mvn.w	r3, #15
 801c614:	e02b      	b.n	801c66e <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801c616:	687b      	ldr	r3, [r7, #4]
 801c618:	2b00      	cmp	r3, #0
 801c61a:	d109      	bne.n	801c630 <udp_sendto+0x5c>
 801c61c:	4b16      	ldr	r3, [pc, #88]	; (801c678 <udp_sendto+0xa4>)
 801c61e:	f240 221a 	movw	r2, #538	; 0x21a
 801c622:	4919      	ldr	r1, [pc, #100]	; (801c688 <udp_sendto+0xb4>)
 801c624:	4816      	ldr	r0, [pc, #88]	; (801c680 <udp_sendto+0xac>)
 801c626:	f004 fc93 	bl	8020f50 <iprintf>
 801c62a:	f06f 030f 	mvn.w	r3, #15
 801c62e:	e01e      	b.n	801c66e <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801c630:	68fb      	ldr	r3, [r7, #12]
 801c632:	7a1b      	ldrb	r3, [r3, #8]
 801c634:	2b00      	cmp	r3, #0
 801c636:	d006      	beq.n	801c646 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 801c638:	68fb      	ldr	r3, [r7, #12]
 801c63a:	7a1b      	ldrb	r3, [r3, #8]
 801c63c:	4618      	mov	r0, r3
 801c63e:	f7f7 f94b 	bl	80138d8 <netif_get_by_index>
 801c642:	6178      	str	r0, [r7, #20]
 801c644:	e003      	b.n	801c64e <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 801c646:	6878      	ldr	r0, [r7, #4]
 801c648:	f7f4 fe4e 	bl	80112e8 <ip4_route>
 801c64c:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 801c64e:	697b      	ldr	r3, [r7, #20]
 801c650:	2b00      	cmp	r3, #0
 801c652:	d102      	bne.n	801c65a <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 801c654:	f06f 0303 	mvn.w	r3, #3
 801c658:	e009      	b.n	801c66e <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801c65a:	887a      	ldrh	r2, [r7, #2]
 801c65c:	697b      	ldr	r3, [r7, #20]
 801c65e:	9300      	str	r3, [sp, #0]
 801c660:	4613      	mov	r3, r2
 801c662:	687a      	ldr	r2, [r7, #4]
 801c664:	68b9      	ldr	r1, [r7, #8]
 801c666:	68f8      	ldr	r0, [r7, #12]
 801c668:	f000 f810 	bl	801c68c <udp_sendto_if>
 801c66c:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801c66e:	4618      	mov	r0, r3
 801c670:	3718      	adds	r7, #24
 801c672:	46bd      	mov	sp, r7
 801c674:	bd80      	pop	{r7, pc}
 801c676:	bf00      	nop
 801c678:	080269d4 	.word	0x080269d4
 801c67c:	08026b18 	.word	0x08026b18
 801c680:	08026a48 	.word	0x08026a48
 801c684:	08026b30 	.word	0x08026b30
 801c688:	08026b4c 	.word	0x08026b4c

0801c68c <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801c68c:	b580      	push	{r7, lr}
 801c68e:	b088      	sub	sp, #32
 801c690:	af02      	add	r7, sp, #8
 801c692:	60f8      	str	r0, [r7, #12]
 801c694:	60b9      	str	r1, [r7, #8]
 801c696:	607a      	str	r2, [r7, #4]
 801c698:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801c69a:	68fb      	ldr	r3, [r7, #12]
 801c69c:	2b00      	cmp	r3, #0
 801c69e:	d109      	bne.n	801c6b4 <udp_sendto_if+0x28>
 801c6a0:	4b2e      	ldr	r3, [pc, #184]	; (801c75c <udp_sendto_if+0xd0>)
 801c6a2:	f44f 7220 	mov.w	r2, #640	; 0x280
 801c6a6:	492e      	ldr	r1, [pc, #184]	; (801c760 <udp_sendto_if+0xd4>)
 801c6a8:	482e      	ldr	r0, [pc, #184]	; (801c764 <udp_sendto_if+0xd8>)
 801c6aa:	f004 fc51 	bl	8020f50 <iprintf>
 801c6ae:	f06f 030f 	mvn.w	r3, #15
 801c6b2:	e04f      	b.n	801c754 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801c6b4:	68bb      	ldr	r3, [r7, #8]
 801c6b6:	2b00      	cmp	r3, #0
 801c6b8:	d109      	bne.n	801c6ce <udp_sendto_if+0x42>
 801c6ba:	4b28      	ldr	r3, [pc, #160]	; (801c75c <udp_sendto_if+0xd0>)
 801c6bc:	f240 2281 	movw	r2, #641	; 0x281
 801c6c0:	4929      	ldr	r1, [pc, #164]	; (801c768 <udp_sendto_if+0xdc>)
 801c6c2:	4828      	ldr	r0, [pc, #160]	; (801c764 <udp_sendto_if+0xd8>)
 801c6c4:	f004 fc44 	bl	8020f50 <iprintf>
 801c6c8:	f06f 030f 	mvn.w	r3, #15
 801c6cc:	e042      	b.n	801c754 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801c6ce:	687b      	ldr	r3, [r7, #4]
 801c6d0:	2b00      	cmp	r3, #0
 801c6d2:	d109      	bne.n	801c6e8 <udp_sendto_if+0x5c>
 801c6d4:	4b21      	ldr	r3, [pc, #132]	; (801c75c <udp_sendto_if+0xd0>)
 801c6d6:	f240 2282 	movw	r2, #642	; 0x282
 801c6da:	4924      	ldr	r1, [pc, #144]	; (801c76c <udp_sendto_if+0xe0>)
 801c6dc:	4821      	ldr	r0, [pc, #132]	; (801c764 <udp_sendto_if+0xd8>)
 801c6de:	f004 fc37 	bl	8020f50 <iprintf>
 801c6e2:	f06f 030f 	mvn.w	r3, #15
 801c6e6:	e035      	b.n	801c754 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801c6e8:	6a3b      	ldr	r3, [r7, #32]
 801c6ea:	2b00      	cmp	r3, #0
 801c6ec:	d109      	bne.n	801c702 <udp_sendto_if+0x76>
 801c6ee:	4b1b      	ldr	r3, [pc, #108]	; (801c75c <udp_sendto_if+0xd0>)
 801c6f0:	f240 2283 	movw	r2, #643	; 0x283
 801c6f4:	491e      	ldr	r1, [pc, #120]	; (801c770 <udp_sendto_if+0xe4>)
 801c6f6:	481b      	ldr	r0, [pc, #108]	; (801c764 <udp_sendto_if+0xd8>)
 801c6f8:	f004 fc2a 	bl	8020f50 <iprintf>
 801c6fc:	f06f 030f 	mvn.w	r3, #15
 801c700:	e028      	b.n	801c754 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801c702:	68fb      	ldr	r3, [r7, #12]
 801c704:	2b00      	cmp	r3, #0
 801c706:	d009      	beq.n	801c71c <udp_sendto_if+0x90>
 801c708:	68fb      	ldr	r3, [r7, #12]
 801c70a:	681b      	ldr	r3, [r3, #0]
 801c70c:	2b00      	cmp	r3, #0
 801c70e:	d005      	beq.n	801c71c <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801c710:	68fb      	ldr	r3, [r7, #12]
 801c712:	681b      	ldr	r3, [r3, #0]
 801c714:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801c718:	2be0      	cmp	r3, #224	; 0xe0
 801c71a:	d103      	bne.n	801c724 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 801c71c:	6a3b      	ldr	r3, [r7, #32]
 801c71e:	3304      	adds	r3, #4
 801c720:	617b      	str	r3, [r7, #20]
 801c722:	e00b      	b.n	801c73c <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801c724:	68fb      	ldr	r3, [r7, #12]
 801c726:	681a      	ldr	r2, [r3, #0]
 801c728:	6a3b      	ldr	r3, [r7, #32]
 801c72a:	3304      	adds	r3, #4
 801c72c:	681b      	ldr	r3, [r3, #0]
 801c72e:	429a      	cmp	r2, r3
 801c730:	d002      	beq.n	801c738 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801c732:	f06f 0303 	mvn.w	r3, #3
 801c736:	e00d      	b.n	801c754 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 801c738:	68fb      	ldr	r3, [r7, #12]
 801c73a:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801c73c:	887a      	ldrh	r2, [r7, #2]
 801c73e:	697b      	ldr	r3, [r7, #20]
 801c740:	9301      	str	r3, [sp, #4]
 801c742:	6a3b      	ldr	r3, [r7, #32]
 801c744:	9300      	str	r3, [sp, #0]
 801c746:	4613      	mov	r3, r2
 801c748:	687a      	ldr	r2, [r7, #4]
 801c74a:	68b9      	ldr	r1, [r7, #8]
 801c74c:	68f8      	ldr	r0, [r7, #12]
 801c74e:	f000 f811 	bl	801c774 <udp_sendto_if_src>
 801c752:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801c754:	4618      	mov	r0, r3
 801c756:	3718      	adds	r7, #24
 801c758:	46bd      	mov	sp, r7
 801c75a:	bd80      	pop	{r7, pc}
 801c75c:	080269d4 	.word	0x080269d4
 801c760:	08026b68 	.word	0x08026b68
 801c764:	08026a48 	.word	0x08026a48
 801c768:	08026b84 	.word	0x08026b84
 801c76c:	08026ba0 	.word	0x08026ba0
 801c770:	08026bc0 	.word	0x08026bc0

0801c774 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 801c774:	b580      	push	{r7, lr}
 801c776:	b08c      	sub	sp, #48	; 0x30
 801c778:	af04      	add	r7, sp, #16
 801c77a:	60f8      	str	r0, [r7, #12]
 801c77c:	60b9      	str	r1, [r7, #8]
 801c77e:	607a      	str	r2, [r7, #4]
 801c780:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801c782:	68fb      	ldr	r3, [r7, #12]
 801c784:	2b00      	cmp	r3, #0
 801c786:	d109      	bne.n	801c79c <udp_sendto_if_src+0x28>
 801c788:	4b65      	ldr	r3, [pc, #404]	; (801c920 <udp_sendto_if_src+0x1ac>)
 801c78a:	f240 22d1 	movw	r2, #721	; 0x2d1
 801c78e:	4965      	ldr	r1, [pc, #404]	; (801c924 <udp_sendto_if_src+0x1b0>)
 801c790:	4865      	ldr	r0, [pc, #404]	; (801c928 <udp_sendto_if_src+0x1b4>)
 801c792:	f004 fbdd 	bl	8020f50 <iprintf>
 801c796:	f06f 030f 	mvn.w	r3, #15
 801c79a:	e0bc      	b.n	801c916 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801c79c:	68bb      	ldr	r3, [r7, #8]
 801c79e:	2b00      	cmp	r3, #0
 801c7a0:	d109      	bne.n	801c7b6 <udp_sendto_if_src+0x42>
 801c7a2:	4b5f      	ldr	r3, [pc, #380]	; (801c920 <udp_sendto_if_src+0x1ac>)
 801c7a4:	f240 22d2 	movw	r2, #722	; 0x2d2
 801c7a8:	4960      	ldr	r1, [pc, #384]	; (801c92c <udp_sendto_if_src+0x1b8>)
 801c7aa:	485f      	ldr	r0, [pc, #380]	; (801c928 <udp_sendto_if_src+0x1b4>)
 801c7ac:	f004 fbd0 	bl	8020f50 <iprintf>
 801c7b0:	f06f 030f 	mvn.w	r3, #15
 801c7b4:	e0af      	b.n	801c916 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801c7b6:	687b      	ldr	r3, [r7, #4]
 801c7b8:	2b00      	cmp	r3, #0
 801c7ba:	d109      	bne.n	801c7d0 <udp_sendto_if_src+0x5c>
 801c7bc:	4b58      	ldr	r3, [pc, #352]	; (801c920 <udp_sendto_if_src+0x1ac>)
 801c7be:	f240 22d3 	movw	r2, #723	; 0x2d3
 801c7c2:	495b      	ldr	r1, [pc, #364]	; (801c930 <udp_sendto_if_src+0x1bc>)
 801c7c4:	4858      	ldr	r0, [pc, #352]	; (801c928 <udp_sendto_if_src+0x1b4>)
 801c7c6:	f004 fbc3 	bl	8020f50 <iprintf>
 801c7ca:	f06f 030f 	mvn.w	r3, #15
 801c7ce:	e0a2      	b.n	801c916 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801c7d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c7d2:	2b00      	cmp	r3, #0
 801c7d4:	d109      	bne.n	801c7ea <udp_sendto_if_src+0x76>
 801c7d6:	4b52      	ldr	r3, [pc, #328]	; (801c920 <udp_sendto_if_src+0x1ac>)
 801c7d8:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 801c7dc:	4955      	ldr	r1, [pc, #340]	; (801c934 <udp_sendto_if_src+0x1c0>)
 801c7de:	4852      	ldr	r0, [pc, #328]	; (801c928 <udp_sendto_if_src+0x1b4>)
 801c7e0:	f004 fbb6 	bl	8020f50 <iprintf>
 801c7e4:	f06f 030f 	mvn.w	r3, #15
 801c7e8:	e095      	b.n	801c916 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801c7ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c7ec:	2b00      	cmp	r3, #0
 801c7ee:	d109      	bne.n	801c804 <udp_sendto_if_src+0x90>
 801c7f0:	4b4b      	ldr	r3, [pc, #300]	; (801c920 <udp_sendto_if_src+0x1ac>)
 801c7f2:	f240 22d5 	movw	r2, #725	; 0x2d5
 801c7f6:	4950      	ldr	r1, [pc, #320]	; (801c938 <udp_sendto_if_src+0x1c4>)
 801c7f8:	484b      	ldr	r0, [pc, #300]	; (801c928 <udp_sendto_if_src+0x1b4>)
 801c7fa:	f004 fba9 	bl	8020f50 <iprintf>
 801c7fe:	f06f 030f 	mvn.w	r3, #15
 801c802:	e088      	b.n	801c916 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 801c804:	68fb      	ldr	r3, [r7, #12]
 801c806:	8a5b      	ldrh	r3, [r3, #18]
 801c808:	2b00      	cmp	r3, #0
 801c80a:	d10f      	bne.n	801c82c <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801c80c:	68f9      	ldr	r1, [r7, #12]
 801c80e:	68fb      	ldr	r3, [r7, #12]
 801c810:	8a5b      	ldrh	r3, [r3, #18]
 801c812:	461a      	mov	r2, r3
 801c814:	68f8      	ldr	r0, [r7, #12]
 801c816:	f000 f893 	bl	801c940 <udp_bind>
 801c81a:	4603      	mov	r3, r0
 801c81c:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801c81e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801c822:	2b00      	cmp	r3, #0
 801c824:	d002      	beq.n	801c82c <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801c826:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801c82a:	e074      	b.n	801c916 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 801c82c:	68bb      	ldr	r3, [r7, #8]
 801c82e:	891b      	ldrh	r3, [r3, #8]
 801c830:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 801c834:	4293      	cmp	r3, r2
 801c836:	d902      	bls.n	801c83e <udp_sendto_if_src+0xca>
    return ERR_MEM;
 801c838:	f04f 33ff 	mov.w	r3, #4294967295
 801c83c:	e06b      	b.n	801c916 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801c83e:	2108      	movs	r1, #8
 801c840:	68b8      	ldr	r0, [r7, #8]
 801c842:	f7f7 fb3d 	bl	8013ec0 <pbuf_add_header>
 801c846:	4603      	mov	r3, r0
 801c848:	2b00      	cmp	r3, #0
 801c84a:	d015      	beq.n	801c878 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801c84c:	f44f 7220 	mov.w	r2, #640	; 0x280
 801c850:	2108      	movs	r1, #8
 801c852:	2022      	movs	r0, #34	; 0x22
 801c854:	f7f7 f8ea 	bl	8013a2c <pbuf_alloc>
 801c858:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801c85a:	69fb      	ldr	r3, [r7, #28]
 801c85c:	2b00      	cmp	r3, #0
 801c85e:	d102      	bne.n	801c866 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 801c860:	f04f 33ff 	mov.w	r3, #4294967295
 801c864:	e057      	b.n	801c916 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801c866:	68bb      	ldr	r3, [r7, #8]
 801c868:	891b      	ldrh	r3, [r3, #8]
 801c86a:	2b00      	cmp	r3, #0
 801c86c:	d006      	beq.n	801c87c <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801c86e:	68b9      	ldr	r1, [r7, #8]
 801c870:	69f8      	ldr	r0, [r7, #28]
 801c872:	f7f7 fd11 	bl	8014298 <pbuf_chain>
 801c876:	e001      	b.n	801c87c <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801c878:	68bb      	ldr	r3, [r7, #8]
 801c87a:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801c87c:	69fb      	ldr	r3, [r7, #28]
 801c87e:	895b      	ldrh	r3, [r3, #10]
 801c880:	2b07      	cmp	r3, #7
 801c882:	d806      	bhi.n	801c892 <udp_sendto_if_src+0x11e>
 801c884:	4b26      	ldr	r3, [pc, #152]	; (801c920 <udp_sendto_if_src+0x1ac>)
 801c886:	f240 320e 	movw	r2, #782	; 0x30e
 801c88a:	492c      	ldr	r1, [pc, #176]	; (801c93c <udp_sendto_if_src+0x1c8>)
 801c88c:	4826      	ldr	r0, [pc, #152]	; (801c928 <udp_sendto_if_src+0x1b4>)
 801c88e:	f004 fb5f 	bl	8020f50 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801c892:	69fb      	ldr	r3, [r7, #28]
 801c894:	685b      	ldr	r3, [r3, #4]
 801c896:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801c898:	68fb      	ldr	r3, [r7, #12]
 801c89a:	8a5b      	ldrh	r3, [r3, #18]
 801c89c:	4618      	mov	r0, r3
 801c89e:	f7f3 fa2d 	bl	800fcfc <lwip_htons>
 801c8a2:	4603      	mov	r3, r0
 801c8a4:	461a      	mov	r2, r3
 801c8a6:	697b      	ldr	r3, [r7, #20]
 801c8a8:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801c8aa:	887b      	ldrh	r3, [r7, #2]
 801c8ac:	4618      	mov	r0, r3
 801c8ae:	f7f3 fa25 	bl	800fcfc <lwip_htons>
 801c8b2:	4603      	mov	r3, r0
 801c8b4:	461a      	mov	r2, r3
 801c8b6:	697b      	ldr	r3, [r7, #20]
 801c8b8:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801c8ba:	697b      	ldr	r3, [r7, #20]
 801c8bc:	2200      	movs	r2, #0
 801c8be:	719a      	strb	r2, [r3, #6]
 801c8c0:	2200      	movs	r2, #0
 801c8c2:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 801c8c4:	69fb      	ldr	r3, [r7, #28]
 801c8c6:	891b      	ldrh	r3, [r3, #8]
 801c8c8:	4618      	mov	r0, r3
 801c8ca:	f7f3 fa17 	bl	800fcfc <lwip_htons>
 801c8ce:	4603      	mov	r3, r0
 801c8d0:	461a      	mov	r2, r3
 801c8d2:	697b      	ldr	r3, [r7, #20]
 801c8d4:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801c8d6:	2311      	movs	r3, #17
 801c8d8:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801c8da:	68fb      	ldr	r3, [r7, #12]
 801c8dc:	7adb      	ldrb	r3, [r3, #11]
 801c8de:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801c8e0:	68fb      	ldr	r3, [r7, #12]
 801c8e2:	7a9b      	ldrb	r3, [r3, #10]
 801c8e4:	7cb9      	ldrb	r1, [r7, #18]
 801c8e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801c8e8:	9202      	str	r2, [sp, #8]
 801c8ea:	7cfa      	ldrb	r2, [r7, #19]
 801c8ec:	9201      	str	r2, [sp, #4]
 801c8ee:	9300      	str	r3, [sp, #0]
 801c8f0:	460b      	mov	r3, r1
 801c8f2:	687a      	ldr	r2, [r7, #4]
 801c8f4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801c8f6:	69f8      	ldr	r0, [r7, #28]
 801c8f8:	f7f4 fedc 	bl	80116b4 <ip4_output_if_src>
 801c8fc:	4603      	mov	r3, r0
 801c8fe:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 801c900:	69fa      	ldr	r2, [r7, #28]
 801c902:	68bb      	ldr	r3, [r7, #8]
 801c904:	429a      	cmp	r2, r3
 801c906:	d004      	beq.n	801c912 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 801c908:	69f8      	ldr	r0, [r7, #28]
 801c90a:	f7f7 fba1 	bl	8014050 <pbuf_free>
    q = NULL;
 801c90e:	2300      	movs	r3, #0
 801c910:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801c912:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801c916:	4618      	mov	r0, r3
 801c918:	3720      	adds	r7, #32
 801c91a:	46bd      	mov	sp, r7
 801c91c:	bd80      	pop	{r7, pc}
 801c91e:	bf00      	nop
 801c920:	080269d4 	.word	0x080269d4
 801c924:	08026be0 	.word	0x08026be0
 801c928:	08026a48 	.word	0x08026a48
 801c92c:	08026c00 	.word	0x08026c00
 801c930:	08026c20 	.word	0x08026c20
 801c934:	08026c44 	.word	0x08026c44
 801c938:	08026c68 	.word	0x08026c68
 801c93c:	08026c8c 	.word	0x08026c8c

0801c940 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801c940:	b580      	push	{r7, lr}
 801c942:	b086      	sub	sp, #24
 801c944:	af00      	add	r7, sp, #0
 801c946:	60f8      	str	r0, [r7, #12]
 801c948:	60b9      	str	r1, [r7, #8]
 801c94a:	4613      	mov	r3, r2
 801c94c:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801c94e:	68bb      	ldr	r3, [r7, #8]
 801c950:	2b00      	cmp	r3, #0
 801c952:	d101      	bne.n	801c958 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801c954:	4b39      	ldr	r3, [pc, #228]	; (801ca3c <udp_bind+0xfc>)
 801c956:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801c958:	68fb      	ldr	r3, [r7, #12]
 801c95a:	2b00      	cmp	r3, #0
 801c95c:	d109      	bne.n	801c972 <udp_bind+0x32>
 801c95e:	4b38      	ldr	r3, [pc, #224]	; (801ca40 <udp_bind+0x100>)
 801c960:	f240 32b7 	movw	r2, #951	; 0x3b7
 801c964:	4937      	ldr	r1, [pc, #220]	; (801ca44 <udp_bind+0x104>)
 801c966:	4838      	ldr	r0, [pc, #224]	; (801ca48 <udp_bind+0x108>)
 801c968:	f004 faf2 	bl	8020f50 <iprintf>
 801c96c:	f06f 030f 	mvn.w	r3, #15
 801c970:	e060      	b.n	801ca34 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801c972:	2300      	movs	r3, #0
 801c974:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801c976:	4b35      	ldr	r3, [pc, #212]	; (801ca4c <udp_bind+0x10c>)
 801c978:	681b      	ldr	r3, [r3, #0]
 801c97a:	617b      	str	r3, [r7, #20]
 801c97c:	e009      	b.n	801c992 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801c97e:	68fa      	ldr	r2, [r7, #12]
 801c980:	697b      	ldr	r3, [r7, #20]
 801c982:	429a      	cmp	r2, r3
 801c984:	d102      	bne.n	801c98c <udp_bind+0x4c>
      rebind = 1;
 801c986:	2301      	movs	r3, #1
 801c988:	74fb      	strb	r3, [r7, #19]
      break;
 801c98a:	e005      	b.n	801c998 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801c98c:	697b      	ldr	r3, [r7, #20]
 801c98e:	68db      	ldr	r3, [r3, #12]
 801c990:	617b      	str	r3, [r7, #20]
 801c992:	697b      	ldr	r3, [r7, #20]
 801c994:	2b00      	cmp	r3, #0
 801c996:	d1f2      	bne.n	801c97e <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801c998:	88fb      	ldrh	r3, [r7, #6]
 801c99a:	2b00      	cmp	r3, #0
 801c99c:	d109      	bne.n	801c9b2 <udp_bind+0x72>
    port = udp_new_port();
 801c99e:	f7ff fc35 	bl	801c20c <udp_new_port>
 801c9a2:	4603      	mov	r3, r0
 801c9a4:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801c9a6:	88fb      	ldrh	r3, [r7, #6]
 801c9a8:	2b00      	cmp	r3, #0
 801c9aa:	d12c      	bne.n	801ca06 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801c9ac:	f06f 0307 	mvn.w	r3, #7
 801c9b0:	e040      	b.n	801ca34 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801c9b2:	4b26      	ldr	r3, [pc, #152]	; (801ca4c <udp_bind+0x10c>)
 801c9b4:	681b      	ldr	r3, [r3, #0]
 801c9b6:	617b      	str	r3, [r7, #20]
 801c9b8:	e022      	b.n	801ca00 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801c9ba:	68fa      	ldr	r2, [r7, #12]
 801c9bc:	697b      	ldr	r3, [r7, #20]
 801c9be:	429a      	cmp	r2, r3
 801c9c0:	d01b      	beq.n	801c9fa <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801c9c2:	697b      	ldr	r3, [r7, #20]
 801c9c4:	8a5b      	ldrh	r3, [r3, #18]
 801c9c6:	88fa      	ldrh	r2, [r7, #6]
 801c9c8:	429a      	cmp	r2, r3
 801c9ca:	d116      	bne.n	801c9fa <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801c9cc:	697b      	ldr	r3, [r7, #20]
 801c9ce:	681a      	ldr	r2, [r3, #0]
 801c9d0:	68bb      	ldr	r3, [r7, #8]
 801c9d2:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801c9d4:	429a      	cmp	r2, r3
 801c9d6:	d00d      	beq.n	801c9f4 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801c9d8:	68bb      	ldr	r3, [r7, #8]
 801c9da:	2b00      	cmp	r3, #0
 801c9dc:	d00a      	beq.n	801c9f4 <udp_bind+0xb4>
 801c9de:	68bb      	ldr	r3, [r7, #8]
 801c9e0:	681b      	ldr	r3, [r3, #0]
 801c9e2:	2b00      	cmp	r3, #0
 801c9e4:	d006      	beq.n	801c9f4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801c9e6:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801c9e8:	2b00      	cmp	r3, #0
 801c9ea:	d003      	beq.n	801c9f4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801c9ec:	697b      	ldr	r3, [r7, #20]
 801c9ee:	681b      	ldr	r3, [r3, #0]
 801c9f0:	2b00      	cmp	r3, #0
 801c9f2:	d102      	bne.n	801c9fa <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801c9f4:	f06f 0307 	mvn.w	r3, #7
 801c9f8:	e01c      	b.n	801ca34 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801c9fa:	697b      	ldr	r3, [r7, #20]
 801c9fc:	68db      	ldr	r3, [r3, #12]
 801c9fe:	617b      	str	r3, [r7, #20]
 801ca00:	697b      	ldr	r3, [r7, #20]
 801ca02:	2b00      	cmp	r3, #0
 801ca04:	d1d9      	bne.n	801c9ba <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801ca06:	68bb      	ldr	r3, [r7, #8]
 801ca08:	2b00      	cmp	r3, #0
 801ca0a:	d002      	beq.n	801ca12 <udp_bind+0xd2>
 801ca0c:	68bb      	ldr	r3, [r7, #8]
 801ca0e:	681b      	ldr	r3, [r3, #0]
 801ca10:	e000      	b.n	801ca14 <udp_bind+0xd4>
 801ca12:	2300      	movs	r3, #0
 801ca14:	68fa      	ldr	r2, [r7, #12]
 801ca16:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801ca18:	68fb      	ldr	r3, [r7, #12]
 801ca1a:	88fa      	ldrh	r2, [r7, #6]
 801ca1c:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801ca1e:	7cfb      	ldrb	r3, [r7, #19]
 801ca20:	2b00      	cmp	r3, #0
 801ca22:	d106      	bne.n	801ca32 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801ca24:	4b09      	ldr	r3, [pc, #36]	; (801ca4c <udp_bind+0x10c>)
 801ca26:	681a      	ldr	r2, [r3, #0]
 801ca28:	68fb      	ldr	r3, [r7, #12]
 801ca2a:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801ca2c:	4a07      	ldr	r2, [pc, #28]	; (801ca4c <udp_bind+0x10c>)
 801ca2e:	68fb      	ldr	r3, [r7, #12]
 801ca30:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801ca32:	2300      	movs	r3, #0
}
 801ca34:	4618      	mov	r0, r3
 801ca36:	3718      	adds	r7, #24
 801ca38:	46bd      	mov	sp, r7
 801ca3a:	bd80      	pop	{r7, pc}
 801ca3c:	08026f44 	.word	0x08026f44
 801ca40:	080269d4 	.word	0x080269d4
 801ca44:	08026cbc 	.word	0x08026cbc
 801ca48:	08026a48 	.word	0x08026a48
 801ca4c:	24048e9c 	.word	0x24048e9c

0801ca50 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801ca50:	b580      	push	{r7, lr}
 801ca52:	b086      	sub	sp, #24
 801ca54:	af00      	add	r7, sp, #0
 801ca56:	60f8      	str	r0, [r7, #12]
 801ca58:	60b9      	str	r1, [r7, #8]
 801ca5a:	4613      	mov	r3, r2
 801ca5c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801ca5e:	68fb      	ldr	r3, [r7, #12]
 801ca60:	2b00      	cmp	r3, #0
 801ca62:	d109      	bne.n	801ca78 <udp_connect+0x28>
 801ca64:	4b2c      	ldr	r3, [pc, #176]	; (801cb18 <udp_connect+0xc8>)
 801ca66:	f240 4235 	movw	r2, #1077	; 0x435
 801ca6a:	492c      	ldr	r1, [pc, #176]	; (801cb1c <udp_connect+0xcc>)
 801ca6c:	482c      	ldr	r0, [pc, #176]	; (801cb20 <udp_connect+0xd0>)
 801ca6e:	f004 fa6f 	bl	8020f50 <iprintf>
 801ca72:	f06f 030f 	mvn.w	r3, #15
 801ca76:	e04b      	b.n	801cb10 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801ca78:	68bb      	ldr	r3, [r7, #8]
 801ca7a:	2b00      	cmp	r3, #0
 801ca7c:	d109      	bne.n	801ca92 <udp_connect+0x42>
 801ca7e:	4b26      	ldr	r3, [pc, #152]	; (801cb18 <udp_connect+0xc8>)
 801ca80:	f240 4236 	movw	r2, #1078	; 0x436
 801ca84:	4927      	ldr	r1, [pc, #156]	; (801cb24 <udp_connect+0xd4>)
 801ca86:	4826      	ldr	r0, [pc, #152]	; (801cb20 <udp_connect+0xd0>)
 801ca88:	f004 fa62 	bl	8020f50 <iprintf>
 801ca8c:	f06f 030f 	mvn.w	r3, #15
 801ca90:	e03e      	b.n	801cb10 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 801ca92:	68fb      	ldr	r3, [r7, #12]
 801ca94:	8a5b      	ldrh	r3, [r3, #18]
 801ca96:	2b00      	cmp	r3, #0
 801ca98:	d10f      	bne.n	801caba <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801ca9a:	68f9      	ldr	r1, [r7, #12]
 801ca9c:	68fb      	ldr	r3, [r7, #12]
 801ca9e:	8a5b      	ldrh	r3, [r3, #18]
 801caa0:	461a      	mov	r2, r3
 801caa2:	68f8      	ldr	r0, [r7, #12]
 801caa4:	f7ff ff4c 	bl	801c940 <udp_bind>
 801caa8:	4603      	mov	r3, r0
 801caaa:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 801caac:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801cab0:	2b00      	cmp	r3, #0
 801cab2:	d002      	beq.n	801caba <udp_connect+0x6a>
      return err;
 801cab4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801cab8:	e02a      	b.n	801cb10 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801caba:	68bb      	ldr	r3, [r7, #8]
 801cabc:	2b00      	cmp	r3, #0
 801cabe:	d002      	beq.n	801cac6 <udp_connect+0x76>
 801cac0:	68bb      	ldr	r3, [r7, #8]
 801cac2:	681b      	ldr	r3, [r3, #0]
 801cac4:	e000      	b.n	801cac8 <udp_connect+0x78>
 801cac6:	2300      	movs	r3, #0
 801cac8:	68fa      	ldr	r2, [r7, #12]
 801caca:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 801cacc:	68fb      	ldr	r3, [r7, #12]
 801cace:	88fa      	ldrh	r2, [r7, #6]
 801cad0:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801cad2:	68fb      	ldr	r3, [r7, #12]
 801cad4:	7c1b      	ldrb	r3, [r3, #16]
 801cad6:	f043 0304 	orr.w	r3, r3, #4
 801cada:	b2da      	uxtb	r2, r3
 801cadc:	68fb      	ldr	r3, [r7, #12]
 801cade:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801cae0:	4b11      	ldr	r3, [pc, #68]	; (801cb28 <udp_connect+0xd8>)
 801cae2:	681b      	ldr	r3, [r3, #0]
 801cae4:	617b      	str	r3, [r7, #20]
 801cae6:	e008      	b.n	801cafa <udp_connect+0xaa>
    if (pcb == ipcb) {
 801cae8:	68fa      	ldr	r2, [r7, #12]
 801caea:	697b      	ldr	r3, [r7, #20]
 801caec:	429a      	cmp	r2, r3
 801caee:	d101      	bne.n	801caf4 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 801caf0:	2300      	movs	r3, #0
 801caf2:	e00d      	b.n	801cb10 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801caf4:	697b      	ldr	r3, [r7, #20]
 801caf6:	68db      	ldr	r3, [r3, #12]
 801caf8:	617b      	str	r3, [r7, #20]
 801cafa:	697b      	ldr	r3, [r7, #20]
 801cafc:	2b00      	cmp	r3, #0
 801cafe:	d1f3      	bne.n	801cae8 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 801cb00:	4b09      	ldr	r3, [pc, #36]	; (801cb28 <udp_connect+0xd8>)
 801cb02:	681a      	ldr	r2, [r3, #0]
 801cb04:	68fb      	ldr	r3, [r7, #12]
 801cb06:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 801cb08:	4a07      	ldr	r2, [pc, #28]	; (801cb28 <udp_connect+0xd8>)
 801cb0a:	68fb      	ldr	r3, [r7, #12]
 801cb0c:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801cb0e:	2300      	movs	r3, #0
}
 801cb10:	4618      	mov	r0, r3
 801cb12:	3718      	adds	r7, #24
 801cb14:	46bd      	mov	sp, r7
 801cb16:	bd80      	pop	{r7, pc}
 801cb18:	080269d4 	.word	0x080269d4
 801cb1c:	08026cd4 	.word	0x08026cd4
 801cb20:	08026a48 	.word	0x08026a48
 801cb24:	08026cf0 	.word	0x08026cf0
 801cb28:	24048e9c 	.word	0x24048e9c

0801cb2c <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 801cb2c:	b580      	push	{r7, lr}
 801cb2e:	b082      	sub	sp, #8
 801cb30:	af00      	add	r7, sp, #0
 801cb32:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 801cb34:	687b      	ldr	r3, [r7, #4]
 801cb36:	2b00      	cmp	r3, #0
 801cb38:	d107      	bne.n	801cb4a <udp_disconnect+0x1e>
 801cb3a:	4b0d      	ldr	r3, [pc, #52]	; (801cb70 <udp_disconnect+0x44>)
 801cb3c:	f240 426a 	movw	r2, #1130	; 0x46a
 801cb40:	490c      	ldr	r1, [pc, #48]	; (801cb74 <udp_disconnect+0x48>)
 801cb42:	480d      	ldr	r0, [pc, #52]	; (801cb78 <udp_disconnect+0x4c>)
 801cb44:	f004 fa04 	bl	8020f50 <iprintf>
 801cb48:	e00f      	b.n	801cb6a <udp_disconnect+0x3e>
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 801cb4a:	687b      	ldr	r3, [r7, #4]
 801cb4c:	2200      	movs	r2, #0
 801cb4e:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 801cb50:	687b      	ldr	r3, [r7, #4]
 801cb52:	2200      	movs	r2, #0
 801cb54:	829a      	strh	r2, [r3, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 801cb56:	687b      	ldr	r3, [r7, #4]
 801cb58:	2200      	movs	r2, #0
 801cb5a:	721a      	strb	r2, [r3, #8]
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 801cb5c:	687b      	ldr	r3, [r7, #4]
 801cb5e:	7c1b      	ldrb	r3, [r3, #16]
 801cb60:	f023 0304 	bic.w	r3, r3, #4
 801cb64:	b2da      	uxtb	r2, r3
 801cb66:	687b      	ldr	r3, [r7, #4]
 801cb68:	741a      	strb	r2, [r3, #16]
}
 801cb6a:	3708      	adds	r7, #8
 801cb6c:	46bd      	mov	sp, r7
 801cb6e:	bd80      	pop	{r7, pc}
 801cb70:	080269d4 	.word	0x080269d4
 801cb74:	08026d0c 	.word	0x08026d0c
 801cb78:	08026a48 	.word	0x08026a48

0801cb7c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801cb7c:	b580      	push	{r7, lr}
 801cb7e:	b084      	sub	sp, #16
 801cb80:	af00      	add	r7, sp, #0
 801cb82:	60f8      	str	r0, [r7, #12]
 801cb84:	60b9      	str	r1, [r7, #8]
 801cb86:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801cb88:	68fb      	ldr	r3, [r7, #12]
 801cb8a:	2b00      	cmp	r3, #0
 801cb8c:	d107      	bne.n	801cb9e <udp_recv+0x22>
 801cb8e:	4b08      	ldr	r3, [pc, #32]	; (801cbb0 <udp_recv+0x34>)
 801cb90:	f240 428a 	movw	r2, #1162	; 0x48a
 801cb94:	4907      	ldr	r1, [pc, #28]	; (801cbb4 <udp_recv+0x38>)
 801cb96:	4808      	ldr	r0, [pc, #32]	; (801cbb8 <udp_recv+0x3c>)
 801cb98:	f004 f9da 	bl	8020f50 <iprintf>
 801cb9c:	e005      	b.n	801cbaa <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801cb9e:	68fb      	ldr	r3, [r7, #12]
 801cba0:	68ba      	ldr	r2, [r7, #8]
 801cba2:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801cba4:	68fb      	ldr	r3, [r7, #12]
 801cba6:	687a      	ldr	r2, [r7, #4]
 801cba8:	61da      	str	r2, [r3, #28]
}
 801cbaa:	3710      	adds	r7, #16
 801cbac:	46bd      	mov	sp, r7
 801cbae:	bd80      	pop	{r7, pc}
 801cbb0:	080269d4 	.word	0x080269d4
 801cbb4:	08026d28 	.word	0x08026d28
 801cbb8:	08026a48 	.word	0x08026a48

0801cbbc <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801cbbc:	b580      	push	{r7, lr}
 801cbbe:	b084      	sub	sp, #16
 801cbc0:	af00      	add	r7, sp, #0
 801cbc2:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801cbc4:	687b      	ldr	r3, [r7, #4]
 801cbc6:	2b00      	cmp	r3, #0
 801cbc8:	d107      	bne.n	801cbda <udp_remove+0x1e>
 801cbca:	4b19      	ldr	r3, [pc, #100]	; (801cc30 <udp_remove+0x74>)
 801cbcc:	f240 42a1 	movw	r2, #1185	; 0x4a1
 801cbd0:	4918      	ldr	r1, [pc, #96]	; (801cc34 <udp_remove+0x78>)
 801cbd2:	4819      	ldr	r0, [pc, #100]	; (801cc38 <udp_remove+0x7c>)
 801cbd4:	f004 f9bc 	bl	8020f50 <iprintf>
 801cbd8:	e026      	b.n	801cc28 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801cbda:	4b18      	ldr	r3, [pc, #96]	; (801cc3c <udp_remove+0x80>)
 801cbdc:	681b      	ldr	r3, [r3, #0]
 801cbde:	687a      	ldr	r2, [r7, #4]
 801cbe0:	429a      	cmp	r2, r3
 801cbe2:	d105      	bne.n	801cbf0 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801cbe4:	4b15      	ldr	r3, [pc, #84]	; (801cc3c <udp_remove+0x80>)
 801cbe6:	681b      	ldr	r3, [r3, #0]
 801cbe8:	68db      	ldr	r3, [r3, #12]
 801cbea:	4a14      	ldr	r2, [pc, #80]	; (801cc3c <udp_remove+0x80>)
 801cbec:	6013      	str	r3, [r2, #0]
 801cbee:	e017      	b.n	801cc20 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801cbf0:	4b12      	ldr	r3, [pc, #72]	; (801cc3c <udp_remove+0x80>)
 801cbf2:	681b      	ldr	r3, [r3, #0]
 801cbf4:	60fb      	str	r3, [r7, #12]
 801cbf6:	e010      	b.n	801cc1a <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801cbf8:	68fb      	ldr	r3, [r7, #12]
 801cbfa:	68db      	ldr	r3, [r3, #12]
 801cbfc:	2b00      	cmp	r3, #0
 801cbfe:	d009      	beq.n	801cc14 <udp_remove+0x58>
 801cc00:	68fb      	ldr	r3, [r7, #12]
 801cc02:	68db      	ldr	r3, [r3, #12]
 801cc04:	687a      	ldr	r2, [r7, #4]
 801cc06:	429a      	cmp	r2, r3
 801cc08:	d104      	bne.n	801cc14 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801cc0a:	687b      	ldr	r3, [r7, #4]
 801cc0c:	68da      	ldr	r2, [r3, #12]
 801cc0e:	68fb      	ldr	r3, [r7, #12]
 801cc10:	60da      	str	r2, [r3, #12]
        break;
 801cc12:	e005      	b.n	801cc20 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801cc14:	68fb      	ldr	r3, [r7, #12]
 801cc16:	68db      	ldr	r3, [r3, #12]
 801cc18:	60fb      	str	r3, [r7, #12]
 801cc1a:	68fb      	ldr	r3, [r7, #12]
 801cc1c:	2b00      	cmp	r3, #0
 801cc1e:	d1eb      	bne.n	801cbf8 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801cc20:	6879      	ldr	r1, [r7, #4]
 801cc22:	2000      	movs	r0, #0
 801cc24:	f7f6 fab0 	bl	8013188 <memp_free>
}
 801cc28:	3710      	adds	r7, #16
 801cc2a:	46bd      	mov	sp, r7
 801cc2c:	bd80      	pop	{r7, pc}
 801cc2e:	bf00      	nop
 801cc30:	080269d4 	.word	0x080269d4
 801cc34:	08026d40 	.word	0x08026d40
 801cc38:	08026a48 	.word	0x08026a48
 801cc3c:	24048e9c 	.word	0x24048e9c

0801cc40 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801cc40:	b580      	push	{r7, lr}
 801cc42:	b082      	sub	sp, #8
 801cc44:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801cc46:	2000      	movs	r0, #0
 801cc48:	f7f6 fa28 	bl	801309c <memp_malloc>
 801cc4c:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801cc4e:	687b      	ldr	r3, [r7, #4]
 801cc50:	2b00      	cmp	r3, #0
 801cc52:	d007      	beq.n	801cc64 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801cc54:	2220      	movs	r2, #32
 801cc56:	2100      	movs	r1, #0
 801cc58:	6878      	ldr	r0, [r7, #4]
 801cc5a:	f003 fd38 	bl	80206ce <memset>
    pcb->ttl = UDP_TTL;
 801cc5e:	687b      	ldr	r3, [r7, #4]
 801cc60:	22ff      	movs	r2, #255	; 0xff
 801cc62:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801cc64:	687b      	ldr	r3, [r7, #4]
}
 801cc66:	4618      	mov	r0, r3
 801cc68:	3708      	adds	r7, #8
 801cc6a:	46bd      	mov	sp, r7
 801cc6c:	bd80      	pop	{r7, pc}

0801cc6e <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801cc6e:	b580      	push	{r7, lr}
 801cc70:	b084      	sub	sp, #16
 801cc72:	af00      	add	r7, sp, #0
 801cc74:	4603      	mov	r3, r0
 801cc76:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 801cc78:	f7ff ffe2 	bl	801cc40 <udp_new>
 801cc7c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801cc7e:	68fb      	ldr	r3, [r7, #12]
}
 801cc80:	4618      	mov	r0, r3
 801cc82:	3710      	adds	r7, #16
 801cc84:	46bd      	mov	sp, r7
 801cc86:	bd80      	pop	{r7, pc}

0801cc88 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801cc88:	b480      	push	{r7}
 801cc8a:	b085      	sub	sp, #20
 801cc8c:	af00      	add	r7, sp, #0
 801cc8e:	6078      	str	r0, [r7, #4]
 801cc90:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801cc92:	687b      	ldr	r3, [r7, #4]
 801cc94:	2b00      	cmp	r3, #0
 801cc96:	d01e      	beq.n	801ccd6 <udp_netif_ip_addr_changed+0x4e>
 801cc98:	687b      	ldr	r3, [r7, #4]
 801cc9a:	681b      	ldr	r3, [r3, #0]
 801cc9c:	2b00      	cmp	r3, #0
 801cc9e:	d01a      	beq.n	801ccd6 <udp_netif_ip_addr_changed+0x4e>
 801cca0:	683b      	ldr	r3, [r7, #0]
 801cca2:	2b00      	cmp	r3, #0
 801cca4:	d017      	beq.n	801ccd6 <udp_netif_ip_addr_changed+0x4e>
 801cca6:	683b      	ldr	r3, [r7, #0]
 801cca8:	681b      	ldr	r3, [r3, #0]
 801ccaa:	2b00      	cmp	r3, #0
 801ccac:	d013      	beq.n	801ccd6 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801ccae:	4b0d      	ldr	r3, [pc, #52]	; (801cce4 <udp_netif_ip_addr_changed+0x5c>)
 801ccb0:	681b      	ldr	r3, [r3, #0]
 801ccb2:	60fb      	str	r3, [r7, #12]
 801ccb4:	e00c      	b.n	801ccd0 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801ccb6:	68fb      	ldr	r3, [r7, #12]
 801ccb8:	681a      	ldr	r2, [r3, #0]
 801ccba:	687b      	ldr	r3, [r7, #4]
 801ccbc:	681b      	ldr	r3, [r3, #0]
 801ccbe:	429a      	cmp	r2, r3
 801ccc0:	d103      	bne.n	801ccca <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801ccc2:	683b      	ldr	r3, [r7, #0]
 801ccc4:	681a      	ldr	r2, [r3, #0]
 801ccc6:	68fb      	ldr	r3, [r7, #12]
 801ccc8:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801ccca:	68fb      	ldr	r3, [r7, #12]
 801cccc:	68db      	ldr	r3, [r3, #12]
 801ccce:	60fb      	str	r3, [r7, #12]
 801ccd0:	68fb      	ldr	r3, [r7, #12]
 801ccd2:	2b00      	cmp	r3, #0
 801ccd4:	d1ef      	bne.n	801ccb6 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801ccd6:	bf00      	nop
 801ccd8:	3714      	adds	r7, #20
 801ccda:	46bd      	mov	sp, r7
 801ccdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cce0:	4770      	bx	lr
 801cce2:	bf00      	nop
 801cce4:	24048e9c 	.word	0x24048e9c

0801cce8 <_ZN7ConsoleC1EP20__UART_HandleTypeDef>:



osSemaphoreDef(console_sem);

Console::Console(UART_HandleTypeDef* uart) : console_uart(uart) {
 801cce8:	b580      	push	{r7, lr}
 801ccea:	b082      	sub	sp, #8
 801ccec:	af00      	add	r7, sp, #0
 801ccee:	6078      	str	r0, [r7, #4]
 801ccf0:	6039      	str	r1, [r7, #0]
 801ccf2:	687b      	ldr	r3, [r7, #4]
 801ccf4:	683a      	ldr	r2, [r7, #0]
 801ccf6:	601a      	str	r2, [r3, #0]
	console_uart = uart;
 801ccf8:	687b      	ldr	r3, [r7, #4]
 801ccfa:	683a      	ldr	r2, [r7, #0]
 801ccfc:	601a      	str	r2, [r3, #0]
	console_semaphore = osSemaphoreCreate(osSemaphore(console_sem), 3);
 801ccfe:	2103      	movs	r1, #3
 801cd00:	4805      	ldr	r0, [pc, #20]	; (801cd18 <_ZN7ConsoleC1EP20__UART_HandleTypeDef+0x30>)
 801cd02:	f7ee f835 	bl	800ad70 <osSemaphoreCreate>
 801cd06:	4602      	mov	r2, r0
 801cd08:	687b      	ldr	r3, [r7, #4]
 801cd0a:	605a      	str	r2, [r3, #4]
}
 801cd0c:	687b      	ldr	r3, [r7, #4]
 801cd0e:	4618      	mov	r0, r3
 801cd10:	3708      	adds	r7, #8
 801cd12:	46bd      	mov	sp, r7
 801cd14:	bd80      	pop	{r7, pc}
 801cd16:	bf00      	nop
 801cd18:	08027060 	.word	0x08027060

0801cd1c <_ZN7Console8transmitEPhm>:

void Console::unlock() {
	osSemaphoreRelease(console_semaphore);
}

void Console::transmit(uint8_t* buffer, uint32_t length) {
 801cd1c:	b580      	push	{r7, lr}
 801cd1e:	b084      	sub	sp, #16
 801cd20:	af00      	add	r7, sp, #0
 801cd22:	60f8      	str	r0, [r7, #12]
 801cd24:	60b9      	str	r1, [r7, #8]
 801cd26:	607a      	str	r2, [r7, #4]
	while(HAL_HSEM_IsSemTaken(HARDWARE_SEMAPHORE));
 801cd28:	2002      	movs	r0, #2
 801cd2a:	f7e9 f8f1 	bl	8005f10 <HAL_HSEM_IsSemTaken>
 801cd2e:	4603      	mov	r3, r0
 801cd30:	2b00      	cmp	r3, #0
 801cd32:	bf14      	ite	ne
 801cd34:	2301      	movne	r3, #1
 801cd36:	2300      	moveq	r3, #0
 801cd38:	b2db      	uxtb	r3, r3
 801cd3a:	2b00      	cmp	r3, #0
 801cd3c:	d000      	beq.n	801cd40 <_ZN7Console8transmitEPhm+0x24>
 801cd3e:	e7f3      	b.n	801cd28 <_ZN7Console8transmitEPhm+0xc>

	HAL_HSEM_Take(HARDWARE_SEMAPHORE, 2);
 801cd40:	2102      	movs	r1, #2
 801cd42:	2002      	movs	r0, #2
 801cd44:	f7e9 f8a8 	bl	8005e98 <HAL_HSEM_Take>
	HAL_UART_Transmit(console_uart, buffer, length, 0xFFFFFF);
 801cd48:	68fb      	ldr	r3, [r7, #12]
 801cd4a:	6818      	ldr	r0, [r3, #0]
 801cd4c:	687b      	ldr	r3, [r7, #4]
 801cd4e:	b29a      	uxth	r2, r3
 801cd50:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801cd54:	68b9      	ldr	r1, [r7, #8]
 801cd56:	f7ec f985 	bl	8009064 <HAL_UART_Transmit>
	HAL_HSEM_Release(HARDWARE_SEMAPHORE, 2);
 801cd5a:	2102      	movs	r1, #2
 801cd5c:	2002      	movs	r0, #2
 801cd5e:	f7e9 f8ed 	bl	8005f3c <HAL_HSEM_Release>
}
 801cd62:	bf00      	nop
 801cd64:	3710      	adds	r7, #16
 801cd66:	46bd      	mov	sp, r7
 801cd68:	bd80      	pop	{r7, pc}

0801cd6a <_ZN7Console5printEPKc>:

void Console::print(const char* buffer) {
 801cd6a:	b580      	push	{r7, lr}
 801cd6c:	b082      	sub	sp, #8
 801cd6e:	af00      	add	r7, sp, #0
 801cd70:	6078      	str	r0, [r7, #4]
 801cd72:	6039      	str	r1, [r7, #0]
	transmit((uint8_t*) buffer, strlen(buffer));
 801cd74:	6838      	ldr	r0, [r7, #0]
 801cd76:	f7e3 fb0d 	bl	8000394 <strlen>
 801cd7a:	4603      	mov	r3, r0
 801cd7c:	461a      	mov	r2, r3
 801cd7e:	6839      	ldr	r1, [r7, #0]
 801cd80:	6878      	ldr	r0, [r7, #4]
 801cd82:	f7ff ffcb 	bl	801cd1c <_ZN7Console8transmitEPhm>
}
 801cd86:	bf00      	nop
 801cd88:	3708      	adds	r7, #8
 801cd8a:	46bd      	mov	sp, r7
 801cd8c:	bd80      	pop	{r7, pc}

0801cd8e <_ZN7Console6printfEPKcz>:

void Console::printf(const char *format, ...) {
 801cd8e:	b40e      	push	{r1, r2, r3}
 801cd90:	b580      	push	{r7, lr}
 801cd92:	b085      	sub	sp, #20
 801cd94:	af00      	add	r7, sp, #0
 801cd96:	6078      	str	r0, [r7, #4]
	va_list args;
	va_start(args, format);
 801cd98:	f107 0320 	add.w	r3, r7, #32
 801cd9c:	60fb      	str	r3, [r7, #12]

	if(vsprintf(buffer, format, args) > 0) {
 801cd9e:	687b      	ldr	r3, [r7, #4]
 801cda0:	3308      	adds	r3, #8
 801cda2:	68fa      	ldr	r2, [r7, #12]
 801cda4:	69f9      	ldr	r1, [r7, #28]
 801cda6:	4618      	mov	r0, r3
 801cda8:	f004 f998 	bl	80210dc <vsiprintf>
 801cdac:	4603      	mov	r3, r0
 801cdae:	2b00      	cmp	r3, #0
 801cdb0:	bfcc      	ite	gt
 801cdb2:	2301      	movgt	r3, #1
 801cdb4:	2300      	movle	r3, #0
 801cdb6:	b2db      	uxtb	r3, r3
 801cdb8:	2b00      	cmp	r3, #0
 801cdba:	d005      	beq.n	801cdc8 <_ZN7Console6printfEPKcz+0x3a>
		print(buffer);
 801cdbc:	687b      	ldr	r3, [r7, #4]
 801cdbe:	3308      	adds	r3, #8
 801cdc0:	4619      	mov	r1, r3
 801cdc2:	6878      	ldr	r0, [r7, #4]
 801cdc4:	f7ff ffd1 	bl	801cd6a <_ZN7Console5printEPKc>
	}

	va_end(args);
}
 801cdc8:	bf00      	nop
 801cdca:	3714      	adds	r7, #20
 801cdcc:	46bd      	mov	sp, r7
 801cdce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801cdd2:	b003      	add	sp, #12
 801cdd4:	4770      	bx	lr
	...

0801cdd8 <_Z41__static_initialization_and_destruction_0ii>:


Console console(&huart3);
Monitor monitor;
Profiler profiler;
Terminal terminal;
 801cdd8:	b580      	push	{r7, lr}
 801cdda:	b082      	sub	sp, #8
 801cddc:	af00      	add	r7, sp, #0
 801cdde:	6078      	str	r0, [r7, #4]
 801cde0:	6039      	str	r1, [r7, #0]
 801cde2:	687b      	ldr	r3, [r7, #4]
 801cde4:	2b01      	cmp	r3, #1
 801cde6:	d108      	bne.n	801cdfa <_Z41__static_initialization_and_destruction_0ii+0x22>
 801cde8:	683b      	ldr	r3, [r7, #0]
 801cdea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801cdee:	4293      	cmp	r3, r2
 801cdf0:	d103      	bne.n	801cdfa <_Z41__static_initialization_and_destruction_0ii+0x22>
Console console(&huart3);
 801cdf2:	4904      	ldr	r1, [pc, #16]	; (801ce04 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 801cdf4:	4804      	ldr	r0, [pc, #16]	; (801ce08 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 801cdf6:	f7ff ff77 	bl	801cce8 <_ZN7ConsoleC1EP20__UART_HandleTypeDef>
Terminal terminal;
 801cdfa:	bf00      	nop
 801cdfc:	3708      	adds	r7, #8
 801cdfe:	46bd      	mov	sp, r7
 801ce00:	bd80      	pop	{r7, pc}
 801ce02:	bf00      	nop
 801ce04:	2404575c 	.word	0x2404575c
 801ce08:	240407b0 	.word	0x240407b0

0801ce0c <_GLOBAL__sub_I_console>:
 801ce0c:	b580      	push	{r7, lr}
 801ce0e:	af00      	add	r7, sp, #0
 801ce10:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801ce14:	2001      	movs	r0, #1
 801ce16:	f7ff ffdf 	bl	801cdd8 <_Z41__static_initialization_and_destruction_0ii>
 801ce1a:	bd80      	pop	{r7, pc}

0801ce1c <_Znwj>:

#include "Operators.h"

#include "cmsis_os.h"

void * operator new(size_t size) {
 801ce1c:	b580      	push	{r7, lr}
 801ce1e:	b082      	sub	sp, #8
 801ce20:	af00      	add	r7, sp, #0
 801ce22:	6078      	str	r0, [r7, #4]
    return pvPortMalloc(size);
 801ce24:	6878      	ldr	r0, [r7, #4]
 801ce26:	f7ee f975 	bl	800b114 <pvPortMalloc>
 801ce2a:	4603      	mov	r3, r0
}
 801ce2c:	4618      	mov	r0, r3
 801ce2e:	3708      	adds	r7, #8
 801ce30:	46bd      	mov	sp, r7
 801ce32:	bd80      	pop	{r7, pc}

0801ce34 <_ZdlPv>:

void * operator new[](size_t size) {
    return pvPortMalloc(size);
}

void operator delete(void* ptr) {
 801ce34:	b580      	push	{r7, lr}
 801ce36:	b082      	sub	sp, #8
 801ce38:	af00      	add	r7, sp, #0
 801ce3a:	6078      	str	r0, [r7, #4]
    vPortFree(ptr);
 801ce3c:	6878      	ldr	r0, [r7, #4]
 801ce3e:	f7ee fa2b 	bl	800b298 <vPortFree>
}
 801ce42:	bf00      	nop
 801ce44:	3708      	adds	r7, #8
 801ce46:	46bd      	mov	sp, r7
 801ce48:	bd80      	pop	{r7, pc}

0801ce4a <_ZNSt14_Function_baseC1Ev>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 801ce4a:	b480      	push	{r7}
 801ce4c:	b083      	sub	sp, #12
 801ce4e:	af00      	add	r7, sp, #0
 801ce50:	6078      	str	r0, [r7, #4]
 801ce52:	687b      	ldr	r3, [r7, #4]
 801ce54:	2200      	movs	r2, #0
 801ce56:	609a      	str	r2, [r3, #8]
 801ce58:	687b      	ldr	r3, [r7, #4]
 801ce5a:	4618      	mov	r0, r3
 801ce5c:	370c      	adds	r7, #12
 801ce5e:	46bd      	mov	sp, r7
 801ce60:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ce64:	4770      	bx	lr

0801ce66 <_ZNSt14_Function_baseD1Ev>:

    ~_Function_base()
 801ce66:	b580      	push	{r7, lr}
 801ce68:	b082      	sub	sp, #8
 801ce6a:	af00      	add	r7, sp, #0
 801ce6c:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 801ce6e:	687b      	ldr	r3, [r7, #4]
 801ce70:	689b      	ldr	r3, [r3, #8]
 801ce72:	2b00      	cmp	r3, #0
 801ce74:	d005      	beq.n	801ce82 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 801ce76:	687b      	ldr	r3, [r7, #4]
 801ce78:	689b      	ldr	r3, [r3, #8]
 801ce7a:	6878      	ldr	r0, [r7, #4]
 801ce7c:	6879      	ldr	r1, [r7, #4]
 801ce7e:	2203      	movs	r2, #3
 801ce80:	4798      	blx	r3
    }
 801ce82:	687b      	ldr	r3, [r7, #4]
 801ce84:	4618      	mov	r0, r3
 801ce86:	3708      	adds	r7, #8
 801ce88:	46bd      	mov	sp, r7
 801ce8a:	bd80      	pop	{r7, pc}

0801ce8c <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 801ce8c:	b480      	push	{r7}
 801ce8e:	b083      	sub	sp, #12
 801ce90:	af00      	add	r7, sp, #0
 801ce92:	6078      	str	r0, [r7, #4]
 801ce94:	687b      	ldr	r3, [r7, #4]
 801ce96:	689b      	ldr	r3, [r3, #8]
 801ce98:	2b00      	cmp	r3, #0
 801ce9a:	bf0c      	ite	eq
 801ce9c:	2301      	moveq	r3, #1
 801ce9e:	2300      	movne	r3, #0
 801cea0:	b2db      	uxtb	r3, r3
 801cea2:	4618      	mov	r0, r3
 801cea4:	370c      	adds	r7, #12
 801cea6:	46bd      	mov	sp, r7
 801cea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ceac:	4770      	bx	lr
	...

0801ceb0 <_ZN8IODriverD1Ev>:
#include <functional>


class IODriver {
public:
	virtual ~IODriver() {}
 801ceb0:	b480      	push	{r7}
 801ceb2:	b083      	sub	sp, #12
 801ceb4:	af00      	add	r7, sp, #0
 801ceb6:	6078      	str	r0, [r7, #4]
 801ceb8:	4a04      	ldr	r2, [pc, #16]	; (801cecc <_ZN8IODriverD1Ev+0x1c>)
 801ceba:	687b      	ldr	r3, [r7, #4]
 801cebc:	601a      	str	r2, [r3, #0]
 801cebe:	687b      	ldr	r3, [r7, #4]
 801cec0:	4618      	mov	r0, r3
 801cec2:	370c      	adds	r7, #12
 801cec4:	46bd      	mov	sp, r7
 801cec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ceca:	4770      	bx	lr
 801cecc:	08027098 	.word	0x08027098

0801ced0 <_ZN8IODriverD0Ev>:
 801ced0:	b580      	push	{r7, lr}
 801ced2:	b082      	sub	sp, #8
 801ced4:	af00      	add	r7, sp, #0
 801ced6:	6078      	str	r0, [r7, #4]
 801ced8:	6878      	ldr	r0, [r7, #4]
 801ceda:	f7ff ffe9 	bl	801ceb0 <_ZN8IODriverD1Ev>
 801cede:	2104      	movs	r1, #4
 801cee0:	6878      	ldr	r0, [r7, #4]
 801cee2:	f003 f96c 	bl	80201be <_ZdlPvj>
 801cee6:	687b      	ldr	r3, [r7, #4]
 801cee8:	4618      	mov	r0, r3
 801ceea:	3708      	adds	r7, #8
 801ceec:	46bd      	mov	sp, r7
 801ceee:	bd80      	pop	{r7, pc}

0801cef0 <_ZNSt8functionIFvhPhmEED1Ev>:
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 801cef0:	b580      	push	{r7, lr}
 801cef2:	b082      	sub	sp, #8
 801cef4:	af00      	add	r7, sp, #0
 801cef6:	6078      	str	r0, [r7, #4]
 801cef8:	687b      	ldr	r3, [r7, #4]
 801cefa:	4618      	mov	r0, r3
 801cefc:	f7ff ffb3 	bl	801ce66 <_ZNSt14_Function_baseD1Ev>
 801cf00:	687b      	ldr	r3, [r7, #4]
 801cf02:	4618      	mov	r0, r3
 801cf04:	3708      	adds	r7, #8
 801cf06:	46bd      	mov	sp, r7
 801cf08:	bd80      	pop	{r7, pc}
	...

0801cf0c <_ZN8IODriverC1Ev>:
class IODriver {
 801cf0c:	b480      	push	{r7}
 801cf0e:	b083      	sub	sp, #12
 801cf10:	af00      	add	r7, sp, #0
 801cf12:	6078      	str	r0, [r7, #4]
 801cf14:	4a04      	ldr	r2, [pc, #16]	; (801cf28 <_ZN8IODriverC1Ev+0x1c>)
 801cf16:	687b      	ldr	r3, [r7, #4]
 801cf18:	601a      	str	r2, [r3, #0]
 801cf1a:	687b      	ldr	r3, [r7, #4]
 801cf1c:	4618      	mov	r0, r3
 801cf1e:	370c      	adds	r7, #12
 801cf20:	46bd      	mov	sp, r7
 801cf22:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cf26:	4770      	bx	lr
 801cf28:	08027098 	.word	0x08027098

0801cf2c <_ZN16BufferedIODriverC1EPVhS1_j>:
#include <cstring>

#ifdef BUILD_WITH_BUFFERED_IO


BufferedIODriver::BufferedIODriver(volatile uint8_t* bufferStorage, volatile uint8_t* bufferControl, size_t length) : bufferStorage(bufferStorage), bufferControl(bufferControl), bufferLength(length), readIndex(0), receiverFunc(nullptr) {
 801cf2c:	b580      	push	{r7, lr}
 801cf2e:	b084      	sub	sp, #16
 801cf30:	af00      	add	r7, sp, #0
 801cf32:	60f8      	str	r0, [r7, #12]
 801cf34:	60b9      	str	r1, [r7, #8]
 801cf36:	607a      	str	r2, [r7, #4]
 801cf38:	603b      	str	r3, [r7, #0]
 801cf3a:	68fb      	ldr	r3, [r7, #12]
 801cf3c:	4618      	mov	r0, r3
 801cf3e:	f7ff ffe5 	bl	801cf0c <_ZN8IODriverC1Ev>
 801cf42:	4a11      	ldr	r2, [pc, #68]	; (801cf88 <_ZN16BufferedIODriverC1EPVhS1_j+0x5c>)
 801cf44:	68fb      	ldr	r3, [r7, #12]
 801cf46:	601a      	str	r2, [r3, #0]
 801cf48:	68fb      	ldr	r3, [r7, #12]
 801cf4a:	68ba      	ldr	r2, [r7, #8]
 801cf4c:	609a      	str	r2, [r3, #8]
 801cf4e:	68fb      	ldr	r3, [r7, #12]
 801cf50:	687a      	ldr	r2, [r7, #4]
 801cf52:	60da      	str	r2, [r3, #12]
 801cf54:	68fb      	ldr	r3, [r7, #12]
 801cf56:	683a      	ldr	r2, [r7, #0]
 801cf58:	611a      	str	r2, [r3, #16]
 801cf5a:	68fb      	ldr	r3, [r7, #12]
 801cf5c:	2200      	movs	r2, #0
 801cf5e:	829a      	strh	r2, [r3, #20]
 801cf60:	68fb      	ldr	r3, [r7, #12]
 801cf62:	3318      	adds	r3, #24
 801cf64:	2100      	movs	r1, #0
 801cf66:	4618      	mov	r0, r3
 801cf68:	f000 f8fd 	bl	801d166 <_ZNSt8functionIFvhPhmEEC1EDn>
	semaphore = xSemaphoreCreateMutex();
 801cf6c:	2001      	movs	r0, #1
 801cf6e:	f7ee fef2 	bl	800bd56 <xQueueCreateMutex>
 801cf72:	4602      	mov	r2, r0
 801cf74:	68fb      	ldr	r3, [r7, #12]
 801cf76:	605a      	str	r2, [r3, #4]
	*bufferControl = 0;
 801cf78:	687b      	ldr	r3, [r7, #4]
 801cf7a:	2200      	movs	r2, #0
 801cf7c:	701a      	strb	r2, [r3, #0]
}
 801cf7e:	68fb      	ldr	r3, [r7, #12]
 801cf80:	4618      	mov	r0, r3
 801cf82:	3710      	adds	r7, #16
 801cf84:	46bd      	mov	sp, r7
 801cf86:	bd80      	pop	{r7, pc}
 801cf88:	08027080 	.word	0x08027080

0801cf8c <_ZN16BufferedIODriver7receiveERKSt8functionIFvhPhmEE>:

void BufferedIODriver::receive(const std::function<void (uint8_t sender_id, uint8_t* buffer, uint32_t length)> &receiver) {
 801cf8c:	b580      	push	{r7, lr}
 801cf8e:	b082      	sub	sp, #8
 801cf90:	af00      	add	r7, sp, #0
 801cf92:	6078      	str	r0, [r7, #4]
 801cf94:	6039      	str	r1, [r7, #0]
	receiverFunc = receiver;
 801cf96:	687b      	ldr	r3, [r7, #4]
 801cf98:	3318      	adds	r3, #24
 801cf9a:	6839      	ldr	r1, [r7, #0]
 801cf9c:	4618      	mov	r0, r3
 801cf9e:	f000 f8f0 	bl	801d182 <_ZNSt8functionIFvhPhmEEaSERKS2_>
}
 801cfa2:	bf00      	nop
 801cfa4:	3708      	adds	r7, #8
 801cfa6:	46bd      	mov	sp, r7
 801cfa8:	bd80      	pop	{r7, pc}

0801cfaa <_ZN16BufferedIODriver8transmitEPhm>:
/*
 * Writes data to a buffer shared between Cortex-M4 and Cortex-M7
 * Any thread can call this function
 * Assumes there is no overrun
 */
void BufferedIODriver::transmit(uint8_t* data, uint32_t length) {
 801cfaa:	b580      	push	{r7, lr}
 801cfac:	b088      	sub	sp, #32
 801cfae:	af00      	add	r7, sp, #0
 801cfb0:	60f8      	str	r0, [r7, #12]
 801cfb2:	60b9      	str	r1, [r7, #8]
 801cfb4:	607a      	str	r2, [r7, #4]
	if(xSemaphoreTake(semaphore, portMAX_DELAY) == pdTRUE) {
 801cfb6:	68fb      	ldr	r3, [r7, #12]
 801cfb8:	685b      	ldr	r3, [r3, #4]
 801cfba:	f04f 31ff 	mov.w	r1, #4294967295
 801cfbe:	4618      	mov	r0, r3
 801cfc0:	f7ef f9f0 	bl	800c3a4 <xQueueSemaphoreTake>
 801cfc4:	4603      	mov	r3, r0
 801cfc6:	2b01      	cmp	r3, #1
 801cfc8:	bf0c      	ite	eq
 801cfca:	2301      	moveq	r3, #1
 801cfcc:	2300      	movne	r3, #0
 801cfce:	b2db      	uxtb	r3, r3
 801cfd0:	2b00      	cmp	r3, #0
 801cfd2:	d056      	beq.n	801d082 <_ZN16BufferedIODriver8transmitEPhm+0xd8>
		while(HAL_HSEM_Take(1, 1) != HAL_OK);
 801cfd4:	2101      	movs	r1, #1
 801cfd6:	2001      	movs	r0, #1
 801cfd8:	f7e8 ff5e 	bl	8005e98 <HAL_HSEM_Take>
 801cfdc:	4603      	mov	r3, r0
 801cfde:	2b00      	cmp	r3, #0
 801cfe0:	bf14      	ite	ne
 801cfe2:	2301      	movne	r3, #1
 801cfe4:	2300      	moveq	r3, #0
 801cfe6:	b2db      	uxtb	r3, r3
 801cfe8:	2b00      	cmp	r3, #0
 801cfea:	d000      	beq.n	801cfee <_ZN16BufferedIODriver8transmitEPhm+0x44>
 801cfec:	e7f2      	b.n	801cfd4 <_ZN16BufferedIODriver8transmitEPhm+0x2a>

		uint8_t writeIndex = *bufferControl;
 801cfee:	68fb      	ldr	r3, [r7, #12]
 801cff0:	68db      	ldr	r3, [r3, #12]
 801cff2:	781b      	ldrb	r3, [r3, #0]
 801cff4:	77fb      	strb	r3, [r7, #31]
		uint8_t* buffer = (uint8_t*) bufferStorage;
 801cff6:	68fb      	ldr	r3, [r7, #12]
 801cff8:	689b      	ldr	r3, [r3, #8]
 801cffa:	61bb      	str	r3, [r7, #24]

		if(writeIndex + length < bufferLength) {
 801cffc:	7ffa      	ldrb	r2, [r7, #31]
 801cffe:	687b      	ldr	r3, [r7, #4]
 801d000:	441a      	add	r2, r3
 801d002:	68fb      	ldr	r3, [r7, #12]
 801d004:	691b      	ldr	r3, [r3, #16]
 801d006:	429a      	cmp	r2, r3
 801d008:	d20d      	bcs.n	801d026 <_ZN16BufferedIODriver8transmitEPhm+0x7c>
			memcpy(buffer + writeIndex, data, length);
 801d00a:	7ffb      	ldrb	r3, [r7, #31]
 801d00c:	69ba      	ldr	r2, [r7, #24]
 801d00e:	4413      	add	r3, r2
 801d010:	687a      	ldr	r2, [r7, #4]
 801d012:	68b9      	ldr	r1, [r7, #8]
 801d014:	4618      	mov	r0, r3
 801d016:	f003 fb36 	bl	8020686 <memcpy>
			writeIndex += length;
 801d01a:	687b      	ldr	r3, [r7, #4]
 801d01c:	b2da      	uxtb	r2, r3
 801d01e:	7ffb      	ldrb	r3, [r7, #31]
 801d020:	4413      	add	r3, r2
 801d022:	77fb      	strb	r3, [r7, #31]
 801d024:	e01e      	b.n	801d064 <_ZN16BufferedIODriver8transmitEPhm+0xba>
		} else {
			uint16_t firstSize = bufferLength - writeIndex;
 801d026:	68fb      	ldr	r3, [r7, #12]
 801d028:	691b      	ldr	r3, [r3, #16]
 801d02a:	b29a      	uxth	r2, r3
 801d02c:	7ffb      	ldrb	r3, [r7, #31]
 801d02e:	b29b      	uxth	r3, r3
 801d030:	1ad3      	subs	r3, r2, r3
 801d032:	82fb      	strh	r3, [r7, #22]
			memcpy(buffer + writeIndex, data, firstSize);
 801d034:	7ffb      	ldrb	r3, [r7, #31]
 801d036:	69ba      	ldr	r2, [r7, #24]
 801d038:	4413      	add	r3, r2
 801d03a:	8afa      	ldrh	r2, [r7, #22]
 801d03c:	68b9      	ldr	r1, [r7, #8]
 801d03e:	4618      	mov	r0, r3
 801d040:	f003 fb21 	bl	8020686 <memcpy>
			memcpy(buffer, data + firstSize, length - firstSize);
 801d044:	8afb      	ldrh	r3, [r7, #22]
 801d046:	68ba      	ldr	r2, [r7, #8]
 801d048:	18d1      	adds	r1, r2, r3
 801d04a:	8afb      	ldrh	r3, [r7, #22]
 801d04c:	687a      	ldr	r2, [r7, #4]
 801d04e:	1ad3      	subs	r3, r2, r3
 801d050:	461a      	mov	r2, r3
 801d052:	69b8      	ldr	r0, [r7, #24]
 801d054:	f003 fb17 	bl	8020686 <memcpy>
			writeIndex = length - firstSize;
 801d058:	687b      	ldr	r3, [r7, #4]
 801d05a:	b2da      	uxtb	r2, r3
 801d05c:	8afb      	ldrh	r3, [r7, #22]
 801d05e:	b2db      	uxtb	r3, r3
 801d060:	1ad3      	subs	r3, r2, r3
 801d062:	77fb      	strb	r3, [r7, #31]
		}

		*bufferControl = writeIndex;
 801d064:	68fb      	ldr	r3, [r7, #12]
 801d066:	68db      	ldr	r3, [r3, #12]
 801d068:	7ffa      	ldrb	r2, [r7, #31]
 801d06a:	701a      	strb	r2, [r3, #0]

		HAL_HSEM_Release(1, 1);
 801d06c:	2101      	movs	r1, #1
 801d06e:	2001      	movs	r0, #1
 801d070:	f7e8 ff64 	bl	8005f3c <HAL_HSEM_Release>
		xSemaphoreGive(semaphore);
 801d074:	68fb      	ldr	r3, [r7, #12]
 801d076:	6858      	ldr	r0, [r3, #4]
 801d078:	2300      	movs	r3, #0
 801d07a:	2200      	movs	r2, #0
 801d07c:	2100      	movs	r1, #0
 801d07e:	f7ee fe9d 	bl	800bdbc <xQueueGenericSend>
	}
}
 801d082:	bf00      	nop
 801d084:	3720      	adds	r7, #32
 801d086:	46bd      	mov	sp, r7
 801d088:	bd80      	pop	{r7, pc}

0801d08a <_ZN16BufferedIODriver5flushEP8IODriver>:
/*
 * Passes the buffered data to the real IODriver
 * The flush function must be called from the thread designed to transmit the data
 */

void BufferedIODriver::flush(IODriver* driver) {
 801d08a:	b580      	push	{r7, lr}
 801d08c:	b086      	sub	sp, #24
 801d08e:	af00      	add	r7, sp, #0
 801d090:	6078      	str	r0, [r7, #4]
 801d092:	6039      	str	r1, [r7, #0]
	uint8_t writeIndex = *bufferControl; // Atomic operation
 801d094:	687b      	ldr	r3, [r7, #4]
 801d096:	68db      	ldr	r3, [r3, #12]
 801d098:	781b      	ldrb	r3, [r3, #0]
 801d09a:	75fb      	strb	r3, [r7, #23]
	uint8_t* buffer = (uint8_t*) bufferStorage;
 801d09c:	687b      	ldr	r3, [r7, #4]
 801d09e:	689b      	ldr	r3, [r3, #8]
 801d0a0:	613b      	str	r3, [r7, #16]

	if(readIndex < writeIndex) {
 801d0a2:	687b      	ldr	r3, [r7, #4]
 801d0a4:	8a9a      	ldrh	r2, [r3, #20]
 801d0a6:	7dfb      	ldrb	r3, [r7, #23]
 801d0a8:	b29b      	uxth	r3, r3
 801d0aa:	429a      	cmp	r2, r3
 801d0ac:	d210      	bcs.n	801d0d0 <_ZN16BufferedIODriver5flushEP8IODriver+0x46>
		driver->transmit(buffer + readIndex, writeIndex - readIndex);
 801d0ae:	683b      	ldr	r3, [r7, #0]
 801d0b0:	681b      	ldr	r3, [r3, #0]
 801d0b2:	330c      	adds	r3, #12
 801d0b4:	681b      	ldr	r3, [r3, #0]
 801d0b6:	687a      	ldr	r2, [r7, #4]
 801d0b8:	8a92      	ldrh	r2, [r2, #20]
 801d0ba:	4611      	mov	r1, r2
 801d0bc:	693a      	ldr	r2, [r7, #16]
 801d0be:	1850      	adds	r0, r2, r1
 801d0c0:	7dfa      	ldrb	r2, [r7, #23]
 801d0c2:	6879      	ldr	r1, [r7, #4]
 801d0c4:	8a89      	ldrh	r1, [r1, #20]
 801d0c6:	1a52      	subs	r2, r2, r1
 801d0c8:	4601      	mov	r1, r0
 801d0ca:	6838      	ldr	r0, [r7, #0]
 801d0cc:	4798      	blx	r3
 801d0ce:	e020      	b.n	801d112 <_ZN16BufferedIODriver5flushEP8IODriver+0x88>
	} else if(readIndex > writeIndex) {
 801d0d0:	687b      	ldr	r3, [r7, #4]
 801d0d2:	8a9a      	ldrh	r2, [r3, #20]
 801d0d4:	7dfb      	ldrb	r3, [r7, #23]
 801d0d6:	b29b      	uxth	r3, r3
 801d0d8:	429a      	cmp	r2, r3
 801d0da:	d91a      	bls.n	801d112 <_ZN16BufferedIODriver5flushEP8IODriver+0x88>
		uint16_t firstSize = bufferLength - readIndex;
 801d0dc:	687b      	ldr	r3, [r7, #4]
 801d0de:	691b      	ldr	r3, [r3, #16]
 801d0e0:	b29a      	uxth	r2, r3
 801d0e2:	687b      	ldr	r3, [r7, #4]
 801d0e4:	8a9b      	ldrh	r3, [r3, #20]
 801d0e6:	1ad3      	subs	r3, r2, r3
 801d0e8:	81fb      	strh	r3, [r7, #14]
		driver->transmit(buffer + readIndex, firstSize);
 801d0ea:	683b      	ldr	r3, [r7, #0]
 801d0ec:	681b      	ldr	r3, [r3, #0]
 801d0ee:	330c      	adds	r3, #12
 801d0f0:	681b      	ldr	r3, [r3, #0]
 801d0f2:	687a      	ldr	r2, [r7, #4]
 801d0f4:	8a92      	ldrh	r2, [r2, #20]
 801d0f6:	4611      	mov	r1, r2
 801d0f8:	693a      	ldr	r2, [r7, #16]
 801d0fa:	4411      	add	r1, r2
 801d0fc:	89fa      	ldrh	r2, [r7, #14]
 801d0fe:	6838      	ldr	r0, [r7, #0]
 801d100:	4798      	blx	r3
		driver->transmit(buffer, writeIndex);
 801d102:	683b      	ldr	r3, [r7, #0]
 801d104:	681b      	ldr	r3, [r3, #0]
 801d106:	330c      	adds	r3, #12
 801d108:	681b      	ldr	r3, [r3, #0]
 801d10a:	7dfa      	ldrb	r2, [r7, #23]
 801d10c:	6939      	ldr	r1, [r7, #16]
 801d10e:	6838      	ldr	r0, [r7, #0]
 801d110:	4798      	blx	r3
	}

	readIndex = writeIndex;
 801d112:	7dfb      	ldrb	r3, [r7, #23]
 801d114:	b29a      	uxth	r2, r3
 801d116:	687b      	ldr	r3, [r7, #4]
 801d118:	829a      	strh	r2, [r3, #20]
}
 801d11a:	bf00      	nop
 801d11c:	3718      	adds	r7, #24
 801d11e:	46bd      	mov	sp, r7
 801d120:	bd80      	pop	{r7, pc}

0801d122 <_ZNSt8functionIFvhPhmEEC1ERKS2_>:
    function(_Functor) -> function<_Signature>;
#endif

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 801d122:	b580      	push	{r7, lr}
 801d124:	b082      	sub	sp, #8
 801d126:	af00      	add	r7, sp, #0
 801d128:	6078      	str	r0, [r7, #4]
 801d12a:	6039      	str	r1, [r7, #0]
    function(const function& __x)
    : _Function_base()
 801d12c:	687b      	ldr	r3, [r7, #4]
 801d12e:	4618      	mov	r0, r3
 801d130:	f7ff fe8b 	bl	801ce4a <_ZNSt14_Function_baseC1Ev>
    {
      if (static_cast<bool>(__x))
 801d134:	6838      	ldr	r0, [r7, #0]
 801d136:	f000 f83f 	bl	801d1b8 <_ZNKSt8functionIFvhPhmEEcvbEv>
 801d13a:	4603      	mov	r3, r0
 801d13c:	2b00      	cmp	r3, #0
 801d13e:	d00d      	beq.n	801d15c <_ZNSt8functionIFvhPhmEEC1ERKS2_+0x3a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 801d140:	683b      	ldr	r3, [r7, #0]
 801d142:	689b      	ldr	r3, [r3, #8]
 801d144:	6878      	ldr	r0, [r7, #4]
 801d146:	6839      	ldr	r1, [r7, #0]
 801d148:	2202      	movs	r2, #2
 801d14a:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 801d14c:	683b      	ldr	r3, [r7, #0]
 801d14e:	68da      	ldr	r2, [r3, #12]
 801d150:	687b      	ldr	r3, [r7, #4]
 801d152:	60da      	str	r2, [r3, #12]
	  _M_manager = __x._M_manager;
 801d154:	683b      	ldr	r3, [r7, #0]
 801d156:	689a      	ldr	r2, [r3, #8]
 801d158:	687b      	ldr	r3, [r7, #4]
 801d15a:	609a      	str	r2, [r3, #8]
	}
    }
 801d15c:	687b      	ldr	r3, [r7, #4]
 801d15e:	4618      	mov	r0, r3
 801d160:	3708      	adds	r7, #8
 801d162:	46bd      	mov	sp, r7
 801d164:	bd80      	pop	{r7, pc}

0801d166 <_ZNSt8functionIFvhPhmEEC1EDn>:
      function(nullptr_t) noexcept
 801d166:	b580      	push	{r7, lr}
 801d168:	b082      	sub	sp, #8
 801d16a:	af00      	add	r7, sp, #0
 801d16c:	6078      	str	r0, [r7, #4]
 801d16e:	6039      	str	r1, [r7, #0]
      : _Function_base() { }
 801d170:	687b      	ldr	r3, [r7, #4]
 801d172:	4618      	mov	r0, r3
 801d174:	f7ff fe69 	bl	801ce4a <_ZNSt14_Function_baseC1Ev>
 801d178:	687b      	ldr	r3, [r7, #4]
 801d17a:	4618      	mov	r0, r3
 801d17c:	3708      	adds	r7, #8
 801d17e:	46bd      	mov	sp, r7
 801d180:	bd80      	pop	{r7, pc}

0801d182 <_ZNSt8functionIFvhPhmEEaSERKS2_>:
      operator=(const function& __x)
 801d182:	b580      	push	{r7, lr}
 801d184:	b086      	sub	sp, #24
 801d186:	af00      	add	r7, sp, #0
 801d188:	6078      	str	r0, [r7, #4]
 801d18a:	6039      	str	r1, [r7, #0]
	function(__x).swap(*this);
 801d18c:	f107 0308 	add.w	r3, r7, #8
 801d190:	6839      	ldr	r1, [r7, #0]
 801d192:	4618      	mov	r0, r3
 801d194:	f7ff ffc5 	bl	801d122 <_ZNSt8functionIFvhPhmEEC1ERKS2_>
 801d198:	f107 0308 	add.w	r3, r7, #8
 801d19c:	6879      	ldr	r1, [r7, #4]
 801d19e:	4618      	mov	r0, r3
 801d1a0:	f000 f81a 	bl	801d1d8 <_ZNSt8functionIFvhPhmEE4swapERS2_>
 801d1a4:	f107 0308 	add.w	r3, r7, #8
 801d1a8:	4618      	mov	r0, r3
 801d1aa:	f7ff fea1 	bl	801cef0 <_ZNSt8functionIFvhPhmEED1Ev>
	return *this;
 801d1ae:	687b      	ldr	r3, [r7, #4]
      }
 801d1b0:	4618      	mov	r0, r3
 801d1b2:	3718      	adds	r7, #24
 801d1b4:	46bd      	mov	sp, r7
 801d1b6:	bd80      	pop	{r7, pc}

0801d1b8 <_ZNKSt8functionIFvhPhmEEcvbEv>:
      explicit operator bool() const noexcept
 801d1b8:	b580      	push	{r7, lr}
 801d1ba:	b082      	sub	sp, #8
 801d1bc:	af00      	add	r7, sp, #0
 801d1be:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 801d1c0:	687b      	ldr	r3, [r7, #4]
 801d1c2:	4618      	mov	r0, r3
 801d1c4:	f7ff fe62 	bl	801ce8c <_ZNKSt14_Function_base8_M_emptyEv>
 801d1c8:	4603      	mov	r3, r0
 801d1ca:	f083 0301 	eor.w	r3, r3, #1
 801d1ce:	b2db      	uxtb	r3, r3
 801d1d0:	4618      	mov	r0, r3
 801d1d2:	3708      	adds	r7, #8
 801d1d4:	46bd      	mov	sp, r7
 801d1d6:	bd80      	pop	{r7, pc}

0801d1d8 <_ZNSt8functionIFvhPhmEE4swapERS2_>:
      void swap(function& __x) noexcept
 801d1d8:	b580      	push	{r7, lr}
 801d1da:	b082      	sub	sp, #8
 801d1dc:	af00      	add	r7, sp, #0
 801d1de:	6078      	str	r0, [r7, #4]
 801d1e0:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 801d1e2:	687b      	ldr	r3, [r7, #4]
 801d1e4:	683a      	ldr	r2, [r7, #0]
 801d1e6:	4611      	mov	r1, r2
 801d1e8:	4618      	mov	r0, r3
 801d1ea:	f000 f821 	bl	801d230 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 801d1ee:	687b      	ldr	r3, [r7, #4]
 801d1f0:	f103 0208 	add.w	r2, r3, #8
 801d1f4:	683b      	ldr	r3, [r7, #0]
 801d1f6:	3308      	adds	r3, #8
 801d1f8:	4619      	mov	r1, r3
 801d1fa:	4610      	mov	r0, r2
 801d1fc:	f000 f84a 	bl	801d294 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 801d200:	687b      	ldr	r3, [r7, #4]
 801d202:	f103 020c 	add.w	r2, r3, #12
 801d206:	683b      	ldr	r3, [r7, #0]
 801d208:	330c      	adds	r3, #12
 801d20a:	4619      	mov	r1, r3
 801d20c:	4610      	mov	r0, r2
 801d20e:	f000 f86b 	bl	801d2e8 <_ZSt4swapIPFvRKSt9_Any_dataOhOPhOmEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISD_ESt18is_move_assignableISD_EEE5valueEvE4typeERSD_SN_>
      }
 801d212:	bf00      	nop
 801d214:	3708      	adds	r7, #8
 801d216:	46bd      	mov	sp, r7
 801d218:	bd80      	pop	{r7, pc}

0801d21a <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 801d21a:	b480      	push	{r7}
 801d21c:	b083      	sub	sp, #12
 801d21e:	af00      	add	r7, sp, #0
 801d220:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 801d222:	687b      	ldr	r3, [r7, #4]
 801d224:	4618      	mov	r0, r3
 801d226:	370c      	adds	r7, #12
 801d228:	46bd      	mov	sp, r7
 801d22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d22e:	4770      	bx	lr

0801d230 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
 801d230:	b580      	push	{r7, lr}
 801d232:	b084      	sub	sp, #16
 801d234:	af00      	add	r7, sp, #0
 801d236:	6078      	str	r0, [r7, #4]
 801d238:	6039      	str	r1, [r7, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 801d23a:	6878      	ldr	r0, [r7, #4]
 801d23c:	f7ff ffed 	bl	801d21a <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 801d240:	4602      	mov	r2, r0
 801d242:	f107 0308 	add.w	r3, r7, #8
 801d246:	e892 0003 	ldmia.w	r2, {r0, r1}
 801d24a:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 801d24e:	6838      	ldr	r0, [r7, #0]
 801d250:	f7ff ffe3 	bl	801d21a <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 801d254:	4602      	mov	r2, r0
 801d256:	687b      	ldr	r3, [r7, #4]
 801d258:	e892 0003 	ldmia.w	r2, {r0, r1}
 801d25c:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 801d260:	f107 0308 	add.w	r3, r7, #8
 801d264:	4618      	mov	r0, r3
 801d266:	f7ff ffd8 	bl	801d21a <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 801d26a:	4602      	mov	r2, r0
 801d26c:	683b      	ldr	r3, [r7, #0]
 801d26e:	e892 0003 	ldmia.w	r2, {r0, r1}
 801d272:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 801d276:	bf00      	nop
 801d278:	3710      	adds	r7, #16
 801d27a:	46bd      	mov	sp, r7
 801d27c:	bd80      	pop	{r7, pc}

0801d27e <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 801d27e:	b480      	push	{r7}
 801d280:	b083      	sub	sp, #12
 801d282:	af00      	add	r7, sp, #0
 801d284:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 801d286:	687b      	ldr	r3, [r7, #4]
 801d288:	4618      	mov	r0, r3
 801d28a:	370c      	adds	r7, #12
 801d28c:	46bd      	mov	sp, r7
 801d28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d292:	4770      	bx	lr

0801d294 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 801d294:	b580      	push	{r7, lr}
 801d296:	b084      	sub	sp, #16
 801d298:	af00      	add	r7, sp, #0
 801d29a:	6078      	str	r0, [r7, #4]
 801d29c:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 801d29e:	6878      	ldr	r0, [r7, #4]
 801d2a0:	f7ff ffed 	bl	801d27e <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 801d2a4:	4603      	mov	r3, r0
 801d2a6:	681b      	ldr	r3, [r3, #0]
 801d2a8:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 801d2aa:	6838      	ldr	r0, [r7, #0]
 801d2ac:	f7ff ffe7 	bl	801d27e <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 801d2b0:	4603      	mov	r3, r0
 801d2b2:	681a      	ldr	r2, [r3, #0]
 801d2b4:	687b      	ldr	r3, [r7, #4]
 801d2b6:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 801d2b8:	f107 030c 	add.w	r3, r7, #12
 801d2bc:	4618      	mov	r0, r3
 801d2be:	f7ff ffde 	bl	801d27e <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 801d2c2:	4603      	mov	r3, r0
 801d2c4:	681a      	ldr	r2, [r3, #0]
 801d2c6:	683b      	ldr	r3, [r7, #0]
 801d2c8:	601a      	str	r2, [r3, #0]
    }
 801d2ca:	bf00      	nop
 801d2cc:	3710      	adds	r7, #16
 801d2ce:	46bd      	mov	sp, r7
 801d2d0:	bd80      	pop	{r7, pc}

0801d2d2 <_ZSt4moveIRPFvRKSt9_Any_dataOhOPhOmEEONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
 801d2d2:	b480      	push	{r7}
 801d2d4:	b083      	sub	sp, #12
 801d2d6:	af00      	add	r7, sp, #0
 801d2d8:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 801d2da:	687b      	ldr	r3, [r7, #4]
 801d2dc:	4618      	mov	r0, r3
 801d2de:	370c      	adds	r7, #12
 801d2e0:	46bd      	mov	sp, r7
 801d2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d2e6:	4770      	bx	lr

0801d2e8 <_ZSt4swapIPFvRKSt9_Any_dataOhOPhOmEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISD_ESt18is_move_assignableISD_EEE5valueEvE4typeERSD_SN_>:
    swap(_Tp& __a, _Tp& __b)
 801d2e8:	b580      	push	{r7, lr}
 801d2ea:	b084      	sub	sp, #16
 801d2ec:	af00      	add	r7, sp, #0
 801d2ee:	6078      	str	r0, [r7, #4]
 801d2f0:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 801d2f2:	6878      	ldr	r0, [r7, #4]
 801d2f4:	f7ff ffed 	bl	801d2d2 <_ZSt4moveIRPFvRKSt9_Any_dataOhOPhOmEEONSt16remove_referenceIT_E4typeEOSB_>
 801d2f8:	4603      	mov	r3, r0
 801d2fa:	681b      	ldr	r3, [r3, #0]
 801d2fc:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 801d2fe:	6838      	ldr	r0, [r7, #0]
 801d300:	f7ff ffe7 	bl	801d2d2 <_ZSt4moveIRPFvRKSt9_Any_dataOhOPhOmEEONSt16remove_referenceIT_E4typeEOSB_>
 801d304:	4603      	mov	r3, r0
 801d306:	681a      	ldr	r2, [r3, #0]
 801d308:	687b      	ldr	r3, [r7, #4]
 801d30a:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 801d30c:	f107 030c 	add.w	r3, r7, #12
 801d310:	4618      	mov	r0, r3
 801d312:	f7ff ffde 	bl	801d2d2 <_ZSt4moveIRPFvRKSt9_Any_dataOhOPhOmEEONSt16remove_referenceIT_E4typeEOSB_>
 801d316:	4603      	mov	r3, r0
 801d318:	681a      	ldr	r2, [r3, #0]
 801d31a:	683b      	ldr	r3, [r7, #0]
 801d31c:	601a      	str	r2, [r3, #0]
    }
 801d31e:	bf00      	nop
 801d320:	3710      	adds	r7, #16
 801d322:	46bd      	mov	sp, r7
 801d324:	bd80      	pop	{r7, pc}
	...

0801d328 <_ZN16BufferedIODriverD1Ev>:
#include <cstdint>
#include <functional>



class BufferedIODriver : public IODriver {
 801d328:	b580      	push	{r7, lr}
 801d32a:	b082      	sub	sp, #8
 801d32c:	af00      	add	r7, sp, #0
 801d32e:	6078      	str	r0, [r7, #4]
 801d330:	4a08      	ldr	r2, [pc, #32]	; (801d354 <_ZN16BufferedIODriverD1Ev+0x2c>)
 801d332:	687b      	ldr	r3, [r7, #4]
 801d334:	601a      	str	r2, [r3, #0]
 801d336:	687b      	ldr	r3, [r7, #4]
 801d338:	3318      	adds	r3, #24
 801d33a:	4618      	mov	r0, r3
 801d33c:	f7ff fdd8 	bl	801cef0 <_ZNSt8functionIFvhPhmEED1Ev>
 801d340:	687b      	ldr	r3, [r7, #4]
 801d342:	4618      	mov	r0, r3
 801d344:	f7ff fdb4 	bl	801ceb0 <_ZN8IODriverD1Ev>
 801d348:	687b      	ldr	r3, [r7, #4]
 801d34a:	4618      	mov	r0, r3
 801d34c:	3708      	adds	r7, #8
 801d34e:	46bd      	mov	sp, r7
 801d350:	bd80      	pop	{r7, pc}
 801d352:	bf00      	nop
 801d354:	08027080 	.word	0x08027080

0801d358 <_ZN16BufferedIODriverD0Ev>:
 801d358:	b580      	push	{r7, lr}
 801d35a:	b082      	sub	sp, #8
 801d35c:	af00      	add	r7, sp, #0
 801d35e:	6078      	str	r0, [r7, #4]
 801d360:	6878      	ldr	r0, [r7, #4]
 801d362:	f7ff ffe1 	bl	801d328 <_ZN16BufferedIODriverD1Ev>
 801d366:	2128      	movs	r1, #40	; 0x28
 801d368:	6878      	ldr	r0, [r7, #4]
 801d36a:	f002 ff28 	bl	80201be <_ZdlPvj>
 801d36e:	687b      	ldr	r3, [r7, #4]
 801d370:	4618      	mov	r0, r3
 801d372:	3708      	adds	r7, #8
 801d374:	46bd      	mov	sp, r7
 801d376:	bd80      	pop	{r7, pc}

0801d378 <_ZN10MessageBusD1Ev>:
	size_t hash;
};

class MessageBus {
public:
	virtual ~MessageBus() {}
 801d378:	b480      	push	{r7}
 801d37a:	b083      	sub	sp, #12
 801d37c:	af00      	add	r7, sp, #0
 801d37e:	6078      	str	r0, [r7, #4]
 801d380:	4a04      	ldr	r2, [pc, #16]	; (801d394 <_ZN10MessageBusD1Ev+0x1c>)
 801d382:	687b      	ldr	r3, [r7, #4]
 801d384:	601a      	str	r2, [r3, #0]
 801d386:	687b      	ldr	r3, [r7, #4]
 801d388:	4618      	mov	r0, r3
 801d38a:	370c      	adds	r7, #12
 801d38c:	46bd      	mov	sp, r7
 801d38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d392:	4770      	bx	lr
 801d394:	080270fc 	.word	0x080270fc

0801d398 <_ZN10MessageBusD0Ev>:
 801d398:	b580      	push	{r7, lr}
 801d39a:	b082      	sub	sp, #8
 801d39c:	af00      	add	r7, sp, #0
 801d39e:	6078      	str	r0, [r7, #4]
 801d3a0:	6878      	ldr	r0, [r7, #4]
 801d3a2:	f7ff ffe9 	bl	801d378 <_ZN10MessageBusD1Ev>
 801d3a6:	f644 0104 	movw	r1, #18436	; 0x4804
 801d3aa:	6878      	ldr	r0, [r7, #4]
 801d3ac:	f002 ff07 	bl	80201be <_ZdlPvj>
 801d3b0:	687b      	ldr	r3, [r7, #4]
 801d3b2:	4618      	mov	r0, r3
 801d3b4:	3708      	adds	r7, #8
 801d3b6:	46bd      	mov	sp, r7
 801d3b8:	bd80      	pop	{r7, pc}

0801d3ba <_ZNSt9_Any_data9_M_accessEv>:
    void*       _M_access()       { return &_M_pod_data[0]; }
 801d3ba:	b480      	push	{r7}
 801d3bc:	b083      	sub	sp, #12
 801d3be:	af00      	add	r7, sp, #0
 801d3c0:	6078      	str	r0, [r7, #4]
 801d3c2:	687b      	ldr	r3, [r7, #4]
 801d3c4:	4618      	mov	r0, r3
 801d3c6:	370c      	adds	r7, #12
 801d3c8:	46bd      	mov	sp, r7
 801d3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d3ce:	4770      	bx	lr

0801d3d0 <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
 801d3d0:	b480      	push	{r7}
 801d3d2:	b083      	sub	sp, #12
 801d3d4:	af00      	add	r7, sp, #0
 801d3d6:	6078      	str	r0, [r7, #4]
 801d3d8:	687b      	ldr	r3, [r7, #4]
 801d3da:	4618      	mov	r0, r3
 801d3dc:	370c      	adds	r7, #12
 801d3de:	46bd      	mov	sp, r7
 801d3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d3e4:	4770      	bx	lr
	...

0801d3e8 <_ZN10MessageBusC1Ev>:
class MessageBus {
 801d3e8:	b480      	push	{r7}
 801d3ea:	b083      	sub	sp, #12
 801d3ec:	af00      	add	r7, sp, #0
 801d3ee:	6078      	str	r0, [r7, #4]
 801d3f0:	4a04      	ldr	r2, [pc, #16]	; (801d404 <_ZN10MessageBusC1Ev+0x1c>)
 801d3f2:	687b      	ldr	r3, [r7, #4]
 801d3f4:	601a      	str	r2, [r3, #0]
 801d3f6:	687b      	ldr	r3, [r7, #4]
 801d3f8:	4618      	mov	r0, r3
 801d3fa:	370c      	adds	r7, #12
 801d3fc:	46bd      	mov	sp, r7
 801d3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d402:	4770      	bx	lr
 801d404:	080270fc 	.word	0x080270fc

0801d408 <_ZN5IOBusC1EP8IODriverPhm>:

#include "IOBus.h"

#include <cstring>

IOBus::IOBus(IODriver* driver, uint8_t* buffer, uint32_t length) {
 801d408:	b590      	push	{r4, r7, lr}
 801d40a:	b091      	sub	sp, #68	; 0x44
 801d40c:	af02      	add	r7, sp, #8
 801d40e:	60f8      	str	r0, [r7, #12]
 801d410:	60b9      	str	r1, [r7, #8]
 801d412:	607a      	str	r2, [r7, #4]
 801d414:	603b      	str	r3, [r7, #0]
 801d416:	68fb      	ldr	r3, [r7, #12]
 801d418:	4618      	mov	r0, r3
 801d41a:	f7ff ffe5 	bl	801d3e8 <_ZN10MessageBusC1Ev>
 801d41e:	4a24      	ldr	r2, [pc, #144]	; (801d4b0 <_ZN5IOBusC1EP8IODriverPhm+0xa8>)
 801d420:	68fb      	ldr	r3, [r7, #12]
 801d422:	601a      	str	r2, [r3, #0]
	this->driver = driver;
 801d424:	68fa      	ldr	r2, [r7, #12]
 801d426:	f644 0304 	movw	r3, #18436	; 0x4804
 801d42a:	4413      	add	r3, r2
 801d42c:	68ba      	ldr	r2, [r7, #8]
 801d42e:	601a      	str	r2, [r3, #0]
	this->packet_buffer = buffer;
 801d430:	68fa      	ldr	r2, [r7, #12]
 801d432:	f644 0308 	movw	r3, #18440	; 0x4808
 801d436:	4413      	add	r3, r2
 801d438:	687a      	ldr	r2, [r7, #4]
 801d43a:	601a      	str	r2, [r3, #0]
	this->buffer_length = length;
 801d43c:	68fa      	ldr	r2, [r7, #12]
 801d43e:	f644 030c 	movw	r3, #18444	; 0x480c
 801d442:	4413      	add	r3, r2
 801d444:	683a      	ldr	r2, [r7, #0]
 801d446:	601a      	str	r2, [r3, #0]
	this->buffer_index = 0;
 801d448:	68fa      	ldr	r2, [r7, #12]
 801d44a:	f644 0310 	movw	r3, #18448	; 0x4810
 801d44e:	4413      	add	r3, r2
 801d450:	2200      	movs	r2, #0
 801d452:	701a      	strb	r2, [r3, #0]

	using namespace std::placeholders;
	driver->receive(std::bind(&IOBus::receive, this, _1, _2, _3));
 801d454:	68bb      	ldr	r3, [r7, #8]
 801d456:	681b      	ldr	r3, [r3, #0]
 801d458:	3308      	adds	r3, #8
 801d45a:	681c      	ldr	r4, [r3, #0]
 801d45c:	4b15      	ldr	r3, [pc, #84]	; (801d4b4 <_ZN5IOBusC1EP8IODriverPhm+0xac>)
 801d45e:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d460:	2300      	movs	r3, #0
 801d462:	633b      	str	r3, [r7, #48]	; 0x30
 801d464:	68fb      	ldr	r3, [r7, #12]
 801d466:	637b      	str	r3, [r7, #52]	; 0x34
 801d468:	f107 0020 	add.w	r0, r7, #32
 801d46c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 801d470:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 801d474:	4b10      	ldr	r3, [pc, #64]	; (801d4b8 <_ZN5IOBusC1EP8IODriverPhm+0xb0>)
 801d476:	9301      	str	r3, [sp, #4]
 801d478:	4b10      	ldr	r3, [pc, #64]	; (801d4bc <_ZN5IOBusC1EP8IODriverPhm+0xb4>)
 801d47a:	9300      	str	r3, [sp, #0]
 801d47c:	4b10      	ldr	r3, [pc, #64]	; (801d4c0 <_ZN5IOBusC1EP8IODriverPhm+0xb8>)
 801d47e:	f000 f8f1 	bl	801d664 <_ZSt4bindIM5IOBusFvhPhmEJPS0_RKSt12_PlaceholderILi1EERKS5_ILi2EERKS5_ILi3EEEENSt12_Bind_helperIXsrSt5__or_IJSt11is_integralINSt5decayIT_E4typeEESt7is_enumISL_EEE5valueESJ_JDpT0_EE4typeEOSJ_DpOSQ_>
 801d482:	f107 0220 	add.w	r2, r7, #32
 801d486:	f107 0310 	add.w	r3, r7, #16
 801d48a:	4611      	mov	r1, r2
 801d48c:	4618      	mov	r0, r3
 801d48e:	f000 fa45 	bl	801d91c <_ZNSt8functionIFvhPhmEEC1ISt5_BindIFM5IOBusFvhS0_mEPS5_St12_PlaceholderILi1EES9_ILi2EES9_ILi3EEEEvvEET_>
 801d492:	f107 0310 	add.w	r3, r7, #16
 801d496:	4619      	mov	r1, r3
 801d498:	68b8      	ldr	r0, [r7, #8]
 801d49a:	47a0      	blx	r4
 801d49c:	f107 0310 	add.w	r3, r7, #16
 801d4a0:	4618      	mov	r0, r3
 801d4a2:	f7ff fd25 	bl	801cef0 <_ZNSt8functionIFvhPhmEED1Ev>
}
 801d4a6:	68fb      	ldr	r3, [r7, #12]
 801d4a8:	4618      	mov	r0, r3
 801d4aa:	373c      	adds	r7, #60	; 0x3c
 801d4ac:	46bd      	mov	sp, r7
 801d4ae:	bd90      	pop	{r4, r7, pc}
 801d4b0:	080270e4 	.word	0x080270e4
 801d4b4:	0801d4c5 	.word	0x0801d4c5
 801d4b8:	080275d0 	.word	0x080275d0
 801d4bc:	080275cf 	.word	0x080275cf
 801d4c0:	080275ce 	.word	0x080275ce

0801d4c4 <_ZN5IOBus7receiveEhPhm>:

void IOBus::receive(uint8_t sender_id, uint8_t* buffer, uint32_t length) {
 801d4c4:	b580      	push	{r7, lr}
 801d4c6:	b084      	sub	sp, #16
 801d4c8:	af00      	add	r7, sp, #0
 801d4ca:	60f8      	str	r0, [r7, #12]
 801d4cc:	607a      	str	r2, [r7, #4]
 801d4ce:	603b      	str	r3, [r7, #0]
 801d4d0:	460b      	mov	r3, r1
 801d4d2:	72fb      	strb	r3, [r7, #11]
	while(length > buffer_length) {
 801d4d4:	68fa      	ldr	r2, [r7, #12]
 801d4d6:	f644 030c 	movw	r3, #18444	; 0x480c
 801d4da:	4413      	add	r3, r2
 801d4dc:	681b      	ldr	r3, [r3, #0]
 801d4de:	683a      	ldr	r2, [r7, #0]
 801d4e0:	429a      	cmp	r2, r3
 801d4e2:	d91a      	bls.n	801d51a <_ZN5IOBus7receiveEhPhm+0x56>
		MessageBus::receive(sender_id, buffer, buffer_length);
 801d4e4:	68f8      	ldr	r0, [r7, #12]
 801d4e6:	68fa      	ldr	r2, [r7, #12]
 801d4e8:	f644 030c 	movw	r3, #18444	; 0x480c
 801d4ec:	4413      	add	r3, r2
 801d4ee:	681b      	ldr	r3, [r3, #0]
 801d4f0:	7af9      	ldrb	r1, [r7, #11]
 801d4f2:	687a      	ldr	r2, [r7, #4]
 801d4f4:	f001 ffa6 	bl	801f444 <_ZN10MessageBus7receiveEhPhm>
		length -= buffer_length;
 801d4f8:	68fa      	ldr	r2, [r7, #12]
 801d4fa:	f644 030c 	movw	r3, #18444	; 0x480c
 801d4fe:	4413      	add	r3, r2
 801d500:	681b      	ldr	r3, [r3, #0]
 801d502:	683a      	ldr	r2, [r7, #0]
 801d504:	1ad3      	subs	r3, r2, r3
 801d506:	603b      	str	r3, [r7, #0]
		buffer += buffer_length;
 801d508:	68fa      	ldr	r2, [r7, #12]
 801d50a:	f644 030c 	movw	r3, #18444	; 0x480c
 801d50e:	4413      	add	r3, r2
 801d510:	681b      	ldr	r3, [r3, #0]
 801d512:	687a      	ldr	r2, [r7, #4]
 801d514:	4413      	add	r3, r2
 801d516:	607b      	str	r3, [r7, #4]
	while(length > buffer_length) {
 801d518:	e7dc      	b.n	801d4d4 <_ZN5IOBus7receiveEhPhm+0x10>
	}

	MessageBus::receive(sender_id, buffer, length);
 801d51a:	68f8      	ldr	r0, [r7, #12]
 801d51c:	7af9      	ldrb	r1, [r7, #11]
 801d51e:	683b      	ldr	r3, [r7, #0]
 801d520:	687a      	ldr	r2, [r7, #4]
 801d522:	f001 ff8f 	bl	801f444 <_ZN10MessageBus7receiveEhPhm>
}
 801d526:	bf00      	nop
 801d528:	3710      	adds	r7, #16
 801d52a:	46bd      	mov	sp, r7
 801d52c:	bd80      	pop	{r7, pc}

0801d52e <_ZN5IOBus6appendEPhm>:

uint8_t IOBus::append(uint8_t* buffer, uint32_t length) {
 801d52e:	b580      	push	{r7, lr}
 801d530:	b086      	sub	sp, #24
 801d532:	af00      	add	r7, sp, #0
 801d534:	60f8      	str	r0, [r7, #12]
 801d536:	60b9      	str	r1, [r7, #8]
 801d538:	607a      	str	r2, [r7, #4]
	uint32_t remaining_length = buffer_length - buffer_index;
 801d53a:	68fa      	ldr	r2, [r7, #12]
 801d53c:	f644 030c 	movw	r3, #18444	; 0x480c
 801d540:	4413      	add	r3, r2
 801d542:	681a      	ldr	r2, [r3, #0]
 801d544:	68f9      	ldr	r1, [r7, #12]
 801d546:	f644 0310 	movw	r3, #18448	; 0x4810
 801d54a:	440b      	add	r3, r1
 801d54c:	781b      	ldrb	r3, [r3, #0]
 801d54e:	1ad3      	subs	r3, r2, r3
 801d550:	617b      	str	r3, [r7, #20]

	if(length > remaining_length) {
 801d552:	687a      	ldr	r2, [r7, #4]
 801d554:	697b      	ldr	r3, [r7, #20]
 801d556:	429a      	cmp	r2, r3
 801d558:	d901      	bls.n	801d55e <_ZN5IOBus6appendEPhm+0x30>
		length = remaining_length;
 801d55a:	697b      	ldr	r3, [r7, #20]
 801d55c:	607b      	str	r3, [r7, #4]
	}

	memcpy(packet_buffer + buffer_index, buffer, length);
 801d55e:	68fa      	ldr	r2, [r7, #12]
 801d560:	f644 0308 	movw	r3, #18440	; 0x4808
 801d564:	4413      	add	r3, r2
 801d566:	681a      	ldr	r2, [r3, #0]
 801d568:	68f9      	ldr	r1, [r7, #12]
 801d56a:	f644 0310 	movw	r3, #18448	; 0x4810
 801d56e:	440b      	add	r3, r1
 801d570:	781b      	ldrb	r3, [r3, #0]
 801d572:	4413      	add	r3, r2
 801d574:	687a      	ldr	r2, [r7, #4]
 801d576:	68b9      	ldr	r1, [r7, #8]
 801d578:	4618      	mov	r0, r3
 801d57a:	f003 f884 	bl	8020686 <memcpy>

	buffer_index += length;
 801d57e:	68fa      	ldr	r2, [r7, #12]
 801d580:	f644 0310 	movw	r3, #18448	; 0x4810
 801d584:	4413      	add	r3, r2
 801d586:	781a      	ldrb	r2, [r3, #0]
 801d588:	687b      	ldr	r3, [r7, #4]
 801d58a:	b2db      	uxtb	r3, r3
 801d58c:	4413      	add	r3, r2
 801d58e:	b2d9      	uxtb	r1, r3
 801d590:	68fa      	ldr	r2, [r7, #12]
 801d592:	f644 0310 	movw	r3, #18448	; 0x4810
 801d596:	4413      	add	r3, r2
 801d598:	460a      	mov	r2, r1
 801d59a:	701a      	strb	r2, [r3, #0]


	return length;
 801d59c:	687b      	ldr	r3, [r7, #4]
 801d59e:	b2db      	uxtb	r3, r3
}
 801d5a0:	4618      	mov	r0, r3
 801d5a2:	3718      	adds	r7, #24
 801d5a4:	46bd      	mov	sp, r7
 801d5a6:	bd80      	pop	{r7, pc}

0801d5a8 <_ZN5IOBus8transmitEv>:

void IOBus::transmit() {
 801d5a8:	b590      	push	{r4, r7, lr}
 801d5aa:	b083      	sub	sp, #12
 801d5ac:	af00      	add	r7, sp, #0
 801d5ae:	6078      	str	r0, [r7, #4]
	driver->transmit(packet_buffer, buffer_index);
 801d5b0:	687a      	ldr	r2, [r7, #4]
 801d5b2:	f644 0304 	movw	r3, #18436	; 0x4804
 801d5b6:	4413      	add	r3, r2
 801d5b8:	6818      	ldr	r0, [r3, #0]
 801d5ba:	687a      	ldr	r2, [r7, #4]
 801d5bc:	f644 0304 	movw	r3, #18436	; 0x4804
 801d5c0:	4413      	add	r3, r2
 801d5c2:	681b      	ldr	r3, [r3, #0]
 801d5c4:	681b      	ldr	r3, [r3, #0]
 801d5c6:	330c      	adds	r3, #12
 801d5c8:	681c      	ldr	r4, [r3, #0]
 801d5ca:	687a      	ldr	r2, [r7, #4]
 801d5cc:	f644 0308 	movw	r3, #18440	; 0x4808
 801d5d0:	4413      	add	r3, r2
 801d5d2:	6819      	ldr	r1, [r3, #0]
 801d5d4:	687a      	ldr	r2, [r7, #4]
 801d5d6:	f644 0310 	movw	r3, #18448	; 0x4810
 801d5da:	4413      	add	r3, r2
 801d5dc:	781b      	ldrb	r3, [r3, #0]
 801d5de:	461a      	mov	r2, r3
 801d5e0:	47a0      	blx	r4
	buffer_index = 0;
 801d5e2:	687a      	ldr	r2, [r7, #4]
 801d5e4:	f644 0310 	movw	r3, #18448	; 0x4810
 801d5e8:	4413      	add	r3, r2
 801d5ea:	2200      	movs	r2, #0
 801d5ec:	701a      	strb	r2, [r3, #0]
}
 801d5ee:	bf00      	nop
 801d5f0:	370c      	adds	r7, #12
 801d5f2:	46bd      	mov	sp, r7
 801d5f4:	bd90      	pop	{r4, r7, pc}

0801d5f6 <_ZSt7forwardIM5IOBusFvhPhmEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801d5f6:	b480      	push	{r7}
 801d5f8:	b083      	sub	sp, #12
 801d5fa:	af00      	add	r7, sp, #0
 801d5fc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801d5fe:	687b      	ldr	r3, [r7, #4]
 801d600:	4618      	mov	r0, r3
 801d602:	370c      	adds	r7, #12
 801d604:	46bd      	mov	sp, r7
 801d606:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d60a:	4770      	bx	lr

0801d60c <_ZSt7forwardIP5IOBusEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801d60c:	b480      	push	{r7}
 801d60e:	b083      	sub	sp, #12
 801d610:	af00      	add	r7, sp, #0
 801d612:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801d614:	687b      	ldr	r3, [r7, #4]
 801d616:	4618      	mov	r0, r3
 801d618:	370c      	adds	r7, #12
 801d61a:	46bd      	mov	sp, r7
 801d61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d620:	4770      	bx	lr

0801d622 <_ZSt7forwardIRKSt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801d622:	b480      	push	{r7}
 801d624:	b083      	sub	sp, #12
 801d626:	af00      	add	r7, sp, #0
 801d628:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801d62a:	687b      	ldr	r3, [r7, #4]
 801d62c:	4618      	mov	r0, r3
 801d62e:	370c      	adds	r7, #12
 801d630:	46bd      	mov	sp, r7
 801d632:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d636:	4770      	bx	lr

0801d638 <_ZSt7forwardIRKSt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801d638:	b480      	push	{r7}
 801d63a:	b083      	sub	sp, #12
 801d63c:	af00      	add	r7, sp, #0
 801d63e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801d640:	687b      	ldr	r3, [r7, #4]
 801d642:	4618      	mov	r0, r3
 801d644:	370c      	adds	r7, #12
 801d646:	46bd      	mov	sp, r7
 801d648:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d64c:	4770      	bx	lr

0801d64e <_ZSt7forwardIRKSt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801d64e:	b480      	push	{r7}
 801d650:	b083      	sub	sp, #12
 801d652:	af00      	add	r7, sp, #0
 801d654:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801d656:	687b      	ldr	r3, [r7, #4]
 801d658:	4618      	mov	r0, r3
 801d65a:	370c      	adds	r7, #12
 801d65c:	46bd      	mov	sp, r7
 801d65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d662:	4770      	bx	lr

0801d664 <_ZSt4bindIM5IOBusFvhPhmEJPS0_RKSt12_PlaceholderILi1EERKS5_ILi2EERKS5_ILi3EEEENSt12_Bind_helperIXsrSt5__or_IJSt11is_integralINSt5decayIT_E4typeEESt7is_enumISL_EEE5valueESJ_JDpT0_EE4typeEOSJ_DpOSQ_>:
   *  @ingroup binders
   */
  template<typename _Func, typename... _BoundArgs>
    inline typename
    _Bind_helper<__is_socketlike<_Func>::value, _Func, _BoundArgs...>::type
    bind(_Func&& __f, _BoundArgs&&... __args)
 801d664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d668:	b086      	sub	sp, #24
 801d66a:	af02      	add	r7, sp, #8
 801d66c:	60f8      	str	r0, [r7, #12]
 801d66e:	60b9      	str	r1, [r7, #8]
 801d670:	607a      	str	r2, [r7, #4]
 801d672:	603b      	str	r3, [r7, #0]
    {
      typedef _Bind_helper<false, _Func, _BoundArgs...> __helper_type;
      return typename __helper_type::type(std::forward<_Func>(__f),
					  std::forward<_BoundArgs>(__args)...);
 801d674:	68b8      	ldr	r0, [r7, #8]
 801d676:	f7ff ffbe 	bl	801d5f6 <_ZSt7forwardIM5IOBusFvhPhmEEOT_RNSt16remove_referenceIS4_E4typeE>
 801d67a:	4605      	mov	r5, r0
 801d67c:	6878      	ldr	r0, [r7, #4]
 801d67e:	f7ff ffc5 	bl	801d60c <_ZSt7forwardIP5IOBusEOT_RNSt16remove_referenceIS2_E4typeE>
 801d682:	4606      	mov	r6, r0
 801d684:	6838      	ldr	r0, [r7, #0]
 801d686:	f7ff ffcc 	bl	801d622 <_ZSt7forwardIRKSt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS4_E4typeE>
 801d68a:	4680      	mov	r8, r0
 801d68c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801d68e:	f7ff ffd3 	bl	801d638 <_ZSt7forwardIRKSt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS4_E4typeE>
 801d692:	4604      	mov	r4, r0
 801d694:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801d696:	f7ff ffda 	bl	801d64e <_ZSt7forwardIRKSt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS4_E4typeE>
 801d69a:	4603      	mov	r3, r0
 801d69c:	9301      	str	r3, [sp, #4]
 801d69e:	9400      	str	r4, [sp, #0]
 801d6a0:	4643      	mov	r3, r8
 801d6a2:	4632      	mov	r2, r6
 801d6a4:	4629      	mov	r1, r5
 801d6a6:	68f8      	ldr	r0, [r7, #12]
 801d6a8:	f000 f960 	bl	801d96c <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEEC1IJS4_RKS6_RKS7_RKS8_EEEOS3_DpOT_>
    }
 801d6ac:	68f8      	ldr	r0, [r7, #12]
 801d6ae:	3710      	adds	r7, #16
 801d6b0:	46bd      	mov	sp, r7
 801d6b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801d6b6 <_ZSt4moveIRSt5tupleIJP5IOBusSt12_PlaceholderILi1EES3_ILi2EES3_ILi3EEEEEONSt16remove_referenceIT_E4typeEOSA_>:
    move(_Tp&& __t) noexcept
 801d6b6:	b480      	push	{r7}
 801d6b8:	b083      	sub	sp, #12
 801d6ba:	af00      	add	r7, sp, #0
 801d6bc:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 801d6be:	687b      	ldr	r3, [r7, #4]
 801d6c0:	4618      	mov	r0, r3
 801d6c2:	370c      	adds	r7, #12
 801d6c4:	46bd      	mov	sp, r7
 801d6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d6ca:	4770      	bx	lr

0801d6cc <_ZNSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEE7_M_headERS2_>:
      template<std::size_t, typename...> friend class _Tuple_impl;

      typedef _Head_base<_Idx, _Head> _Base;

      static constexpr _Head&
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 801d6cc:	b580      	push	{r7, lr}
 801d6ce:	b082      	sub	sp, #8
 801d6d0:	af00      	add	r7, sp, #0
 801d6d2:	6078      	str	r0, [r7, #4]
 801d6d4:	6878      	ldr	r0, [r7, #4]
 801d6d6:	f000 f805 	bl	801d6e4 <_ZNSt10_Head_baseILj3ESt12_PlaceholderILi3EELb1EE7_M_headERS2_>
 801d6da:	4603      	mov	r3, r0
 801d6dc:	4618      	mov	r0, r3
 801d6de:	3708      	adds	r7, #8
 801d6e0:	46bd      	mov	sp, r7
 801d6e2:	bd80      	pop	{r7, pc}

0801d6e4 <_ZNSt10_Head_baseILj3ESt12_PlaceholderILi3EELb1EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b; }
 801d6e4:	b480      	push	{r7}
 801d6e6:	b083      	sub	sp, #12
 801d6e8:	af00      	add	r7, sp, #0
 801d6ea:	6078      	str	r0, [r7, #4]
 801d6ec:	687b      	ldr	r3, [r7, #4]
 801d6ee:	4618      	mov	r0, r3
 801d6f0:	370c      	adds	r7, #12
 801d6f2:	46bd      	mov	sp, r7
 801d6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d6f8:	4770      	bx	lr

0801d6fa <_ZSt7forwardISt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801d6fa:	b480      	push	{r7}
 801d6fc:	b083      	sub	sp, #12
 801d6fe:	af00      	add	r7, sp, #0
 801d700:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801d702:	687b      	ldr	r3, [r7, #4]
 801d704:	4618      	mov	r0, r3
 801d706:	370c      	adds	r7, #12
 801d708:	46bd      	mov	sp, r7
 801d70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d70e:	4770      	bx	lr

0801d710 <_ZNSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEEC1EOS2_>:
	: _Base(std::forward<_UHead>(__head)) { }

      constexpr _Tuple_impl(const _Tuple_impl&) = default;

      constexpr
      _Tuple_impl(_Tuple_impl&& __in)
 801d710:	b580      	push	{r7, lr}
 801d712:	b082      	sub	sp, #8
 801d714:	af00      	add	r7, sp, #0
 801d716:	6078      	str	r0, [r7, #4]
 801d718:	6039      	str	r1, [r7, #0]
      noexcept(is_nothrow_move_constructible<_Head>::value)
      : _Base(std::forward<_Head>(_M_head(__in))) { }
 801d71a:	6838      	ldr	r0, [r7, #0]
 801d71c:	f7ff ffd6 	bl	801d6cc <_ZNSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEE7_M_headERS2_>
 801d720:	4603      	mov	r3, r0
 801d722:	4618      	mov	r0, r3
 801d724:	f7ff ffe9 	bl	801d6fa <_ZSt7forwardISt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS2_E4typeE>
 801d728:	4603      	mov	r3, r0
 801d72a:	4619      	mov	r1, r3
 801d72c:	6878      	ldr	r0, [r7, #4]
 801d72e:	f000 f959 	bl	801d9e4 <_ZNSt10_Head_baseILj3ESt12_PlaceholderILi3EELb1EEC1IS1_EEOT_>
 801d732:	687b      	ldr	r3, [r7, #4]
 801d734:	4618      	mov	r0, r3
 801d736:	3708      	adds	r7, #8
 801d738:	46bd      	mov	sp, r7
 801d73a:	bd80      	pop	{r7, pc}

0801d73c <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEE7_M_tailERS3_>:
      _M_tail(_Tuple_impl& __t) noexcept { return __t; }
 801d73c:	b480      	push	{r7}
 801d73e:	b083      	sub	sp, #12
 801d740:	af00      	add	r7, sp, #0
 801d742:	6078      	str	r0, [r7, #4]
 801d744:	687b      	ldr	r3, [r7, #4]
 801d746:	4618      	mov	r0, r3
 801d748:	370c      	adds	r7, #12
 801d74a:	46bd      	mov	sp, r7
 801d74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d750:	4770      	bx	lr

0801d752 <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 801d752:	b580      	push	{r7, lr}
 801d754:	b082      	sub	sp, #8
 801d756:	af00      	add	r7, sp, #0
 801d758:	6078      	str	r0, [r7, #4]
 801d75a:	6878      	ldr	r0, [r7, #4]
 801d75c:	f000 f805 	bl	801d76a <_ZNSt10_Head_baseILj2ESt12_PlaceholderILi2EELb1EE7_M_headERS2_>
 801d760:	4603      	mov	r3, r0
 801d762:	4618      	mov	r0, r3
 801d764:	3708      	adds	r7, #8
 801d766:	46bd      	mov	sp, r7
 801d768:	bd80      	pop	{r7, pc}

0801d76a <_ZNSt10_Head_baseILj2ESt12_PlaceholderILi2EELb1EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b; }
 801d76a:	b480      	push	{r7}
 801d76c:	b083      	sub	sp, #12
 801d76e:	af00      	add	r7, sp, #0
 801d770:	6078      	str	r0, [r7, #4]
 801d772:	687b      	ldr	r3, [r7, #4]
 801d774:	4618      	mov	r0, r3
 801d776:	370c      	adds	r7, #12
 801d778:	46bd      	mov	sp, r7
 801d77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d77e:	4770      	bx	lr

0801d780 <_ZSt4moveIRSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 801d780:	b480      	push	{r7}
 801d782:	b083      	sub	sp, #12
 801d784:	af00      	add	r7, sp, #0
 801d786:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 801d788:	687b      	ldr	r3, [r7, #4]
 801d78a:	4618      	mov	r0, r3
 801d78c:	370c      	adds	r7, #12
 801d78e:	46bd      	mov	sp, r7
 801d790:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d794:	4770      	bx	lr

0801d796 <_ZSt7forwardISt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801d796:	b480      	push	{r7}
 801d798:	b083      	sub	sp, #12
 801d79a:	af00      	add	r7, sp, #0
 801d79c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801d79e:	687b      	ldr	r3, [r7, #4]
 801d7a0:	4618      	mov	r0, r3
 801d7a2:	370c      	adds	r7, #12
 801d7a4:	46bd      	mov	sp, r7
 801d7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d7aa:	4770      	bx	lr

0801d7ac <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEEC1EOS3_>:
      _Tuple_impl(_Tuple_impl&& __in)
 801d7ac:	b580      	push	{r7, lr}
 801d7ae:	b082      	sub	sp, #8
 801d7b0:	af00      	add	r7, sp, #0
 801d7b2:	6078      	str	r0, [r7, #4]
 801d7b4:	6039      	str	r1, [r7, #0]
      : _Inherited(std::move(_M_tail(__in))),
 801d7b6:	6838      	ldr	r0, [r7, #0]
 801d7b8:	f7ff ffc0 	bl	801d73c <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEE7_M_tailERS3_>
 801d7bc:	4603      	mov	r3, r0
 801d7be:	4618      	mov	r0, r3
 801d7c0:	f7ff ffde 	bl	801d780 <_ZSt4moveIRSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEEEONSt16remove_referenceIT_E4typeEOS6_>
 801d7c4:	4603      	mov	r3, r0
	_Base(std::forward<_Head>(_M_head(__in))) { }
 801d7c6:	4619      	mov	r1, r3
 801d7c8:	6878      	ldr	r0, [r7, #4]
 801d7ca:	f7ff ffa1 	bl	801d710 <_ZNSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEEC1EOS2_>
 801d7ce:	6838      	ldr	r0, [r7, #0]
 801d7d0:	f7ff ffbf 	bl	801d752 <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEE7_M_headERS3_>
 801d7d4:	4603      	mov	r3, r0
 801d7d6:	4618      	mov	r0, r3
 801d7d8:	f7ff ffdd 	bl	801d796 <_ZSt7forwardISt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS2_E4typeE>
 801d7dc:	4603      	mov	r3, r0
 801d7de:	4619      	mov	r1, r3
 801d7e0:	6878      	ldr	r0, [r7, #4]
 801d7e2:	f000 f90c 	bl	801d9fe <_ZNSt10_Head_baseILj2ESt12_PlaceholderILi2EELb1EEC1IS1_EEOT_>
 801d7e6:	687b      	ldr	r3, [r7, #4]
 801d7e8:	4618      	mov	r0, r3
 801d7ea:	3708      	adds	r7, #8
 801d7ec:	46bd      	mov	sp, r7
 801d7ee:	bd80      	pop	{r7, pc}

0801d7f0 <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEE7_M_tailERS4_>:
      _M_tail(_Tuple_impl& __t) noexcept { return __t; }
 801d7f0:	b480      	push	{r7}
 801d7f2:	b083      	sub	sp, #12
 801d7f4:	af00      	add	r7, sp, #0
 801d7f6:	6078      	str	r0, [r7, #4]
 801d7f8:	687b      	ldr	r3, [r7, #4]
 801d7fa:	4618      	mov	r0, r3
 801d7fc:	370c      	adds	r7, #12
 801d7fe:	46bd      	mov	sp, r7
 801d800:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d804:	4770      	bx	lr

0801d806 <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 801d806:	b580      	push	{r7, lr}
 801d808:	b082      	sub	sp, #8
 801d80a:	af00      	add	r7, sp, #0
 801d80c:	6078      	str	r0, [r7, #4]
 801d80e:	6878      	ldr	r0, [r7, #4]
 801d810:	f000 f805 	bl	801d81e <_ZNSt10_Head_baseILj1ESt12_PlaceholderILi1EELb1EE7_M_headERS2_>
 801d814:	4603      	mov	r3, r0
 801d816:	4618      	mov	r0, r3
 801d818:	3708      	adds	r7, #8
 801d81a:	46bd      	mov	sp, r7
 801d81c:	bd80      	pop	{r7, pc}

0801d81e <_ZNSt10_Head_baseILj1ESt12_PlaceholderILi1EELb1EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b; }
 801d81e:	b480      	push	{r7}
 801d820:	b083      	sub	sp, #12
 801d822:	af00      	add	r7, sp, #0
 801d824:	6078      	str	r0, [r7, #4]
 801d826:	687b      	ldr	r3, [r7, #4]
 801d828:	4618      	mov	r0, r3
 801d82a:	370c      	adds	r7, #12
 801d82c:	46bd      	mov	sp, r7
 801d82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d832:	4770      	bx	lr

0801d834 <_ZSt4moveIRSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES1_ILi3EEEEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 801d834:	b480      	push	{r7}
 801d836:	b083      	sub	sp, #12
 801d838:	af00      	add	r7, sp, #0
 801d83a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 801d83c:	687b      	ldr	r3, [r7, #4]
 801d83e:	4618      	mov	r0, r3
 801d840:	370c      	adds	r7, #12
 801d842:	46bd      	mov	sp, r7
 801d844:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d848:	4770      	bx	lr

0801d84a <_ZSt7forwardISt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801d84a:	b480      	push	{r7}
 801d84c:	b083      	sub	sp, #12
 801d84e:	af00      	add	r7, sp, #0
 801d850:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801d852:	687b      	ldr	r3, [r7, #4]
 801d854:	4618      	mov	r0, r3
 801d856:	370c      	adds	r7, #12
 801d858:	46bd      	mov	sp, r7
 801d85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d85e:	4770      	bx	lr

0801d860 <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEEC1EOS4_>:
      _Tuple_impl(_Tuple_impl&& __in)
 801d860:	b580      	push	{r7, lr}
 801d862:	b082      	sub	sp, #8
 801d864:	af00      	add	r7, sp, #0
 801d866:	6078      	str	r0, [r7, #4]
 801d868:	6039      	str	r1, [r7, #0]
      : _Inherited(std::move(_M_tail(__in))),
 801d86a:	6838      	ldr	r0, [r7, #0]
 801d86c:	f7ff ffc0 	bl	801d7f0 <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEE7_M_tailERS4_>
 801d870:	4603      	mov	r3, r0
 801d872:	4618      	mov	r0, r3
 801d874:	f7ff ffde 	bl	801d834 <_ZSt4moveIRSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES1_ILi3EEEEEONSt16remove_referenceIT_E4typeEOS7_>
 801d878:	4603      	mov	r3, r0
	_Base(std::forward<_Head>(_M_head(__in))) { }
 801d87a:	4619      	mov	r1, r3
 801d87c:	6878      	ldr	r0, [r7, #4]
 801d87e:	f7ff ff95 	bl	801d7ac <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEEC1EOS3_>
 801d882:	6838      	ldr	r0, [r7, #0]
 801d884:	f7ff ffbf 	bl	801d806 <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEE7_M_headERS4_>
 801d888:	4603      	mov	r3, r0
 801d88a:	4618      	mov	r0, r3
 801d88c:	f7ff ffdd 	bl	801d84a <_ZSt7forwardISt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS2_E4typeE>
 801d890:	4603      	mov	r3, r0
 801d892:	4619      	mov	r1, r3
 801d894:	6878      	ldr	r0, [r7, #4]
 801d896:	f000 f8bf 	bl	801da18 <_ZNSt10_Head_baseILj1ESt12_PlaceholderILi1EELb1EEC1IS1_EEOT_>
 801d89a:	687b      	ldr	r3, [r7, #4]
 801d89c:	4618      	mov	r0, r3
 801d89e:	3708      	adds	r7, #8
 801d8a0:	46bd      	mov	sp, r7
 801d8a2:	bd80      	pop	{r7, pc}

0801d8a4 <_ZNSt5tupleIJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1EOS6_>:
        explicit constexpr tuple(_UElements&&... __elements)
	: _Inherited(std::forward<_UElements>(__elements)...) {	}

      constexpr tuple(const tuple&) = default;

      constexpr tuple(tuple&&) = default;
 801d8a4:	b580      	push	{r7, lr}
 801d8a6:	b082      	sub	sp, #8
 801d8a8:	af00      	add	r7, sp, #0
 801d8aa:	6078      	str	r0, [r7, #4]
 801d8ac:	6039      	str	r1, [r7, #0]
 801d8ae:	687b      	ldr	r3, [r7, #4]
 801d8b0:	683a      	ldr	r2, [r7, #0]
 801d8b2:	4611      	mov	r1, r2
 801d8b4:	4618      	mov	r0, r3
 801d8b6:	f000 f8ea 	bl	801da8e <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1EOS6_>
 801d8ba:	687b      	ldr	r3, [r7, #4]
 801d8bc:	4618      	mov	r0, r3
 801d8be:	3708      	adds	r7, #8
 801d8c0:	46bd      	mov	sp, r7
 801d8c2:	bd80      	pop	{r7, pc}

0801d8c4 <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEEC1EOSA_>:
      _Bind(_Bind&& __b)
 801d8c4:	b590      	push	{r4, r7, lr}
 801d8c6:	b083      	sub	sp, #12
 801d8c8:	af00      	add	r7, sp, #0
 801d8ca:	6078      	str	r0, [r7, #4]
 801d8cc:	6039      	str	r1, [r7, #0]
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
 801d8ce:	683b      	ldr	r3, [r7, #0]
 801d8d0:	4618      	mov	r0, r3
 801d8d2:	f000 f87c 	bl	801d9ce <_ZSt4moveIRM5IOBusFvhPhmEEONSt16remove_referenceIT_E4typeEOS6_>
 801d8d6:	4602      	mov	r2, r0
 801d8d8:	687b      	ldr	r3, [r7, #4]
 801d8da:	e892 0003 	ldmia.w	r2, {r0, r1}
 801d8de:	e883 0003 	stmia.w	r3, {r0, r1}
 801d8e2:	687b      	ldr	r3, [r7, #4]
 801d8e4:	f103 0408 	add.w	r4, r3, #8
 801d8e8:	683b      	ldr	r3, [r7, #0]
 801d8ea:	3308      	adds	r3, #8
 801d8ec:	4618      	mov	r0, r3
 801d8ee:	f7ff fee2 	bl	801d6b6 <_ZSt4moveIRSt5tupleIJP5IOBusSt12_PlaceholderILi1EES3_ILi2EES3_ILi3EEEEEONSt16remove_referenceIT_E4typeEOSA_>
 801d8f2:	4603      	mov	r3, r0
 801d8f4:	4619      	mov	r1, r3
 801d8f6:	4620      	mov	r0, r4
 801d8f8:	f7ff ffd4 	bl	801d8a4 <_ZNSt5tupleIJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1EOS6_>
      { }
 801d8fc:	687b      	ldr	r3, [r7, #4]
 801d8fe:	4618      	mov	r0, r3
 801d900:	370c      	adds	r7, #12
 801d902:	46bd      	mov	sp, r7
 801d904:	bd90      	pop	{r4, r7, pc}

0801d906 <_ZSt4moveIRSt5_BindIFM5IOBusFvhPhmEPS1_St12_PlaceholderILi1EES6_ILi2EES6_ILi3EEEEEONSt16remove_referenceIT_E4typeEOSE_>:
    move(_Tp&& __t) noexcept
 801d906:	b480      	push	{r7}
 801d908:	b083      	sub	sp, #12
 801d90a:	af00      	add	r7, sp, #0
 801d90c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 801d90e:	687b      	ldr	r3, [r7, #4]
 801d910:	4618      	mov	r0, r3
 801d912:	370c      	adds	r7, #12
 801d914:	46bd      	mov	sp, r7
 801d916:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d91a:	4770      	bx	lr

0801d91c <_ZNSt8functionIFvhPhmEEC1ISt5_BindIFM5IOBusFvhS0_mEPS5_St12_PlaceholderILi1EES9_ILi2EES9_ILi3EEEEvvEET_>:

  template<typename _Res, typename... _ArgTypes>
    template<typename _Functor, typename, typename>
      function<_Res(_ArgTypes...)>::
 801d91c:	b590      	push	{r4, r7, lr}
 801d91e:	b083      	sub	sp, #12
 801d920:	af00      	add	r7, sp, #0
 801d922:	6078      	str	r0, [r7, #4]
 801d924:	6039      	str	r1, [r7, #0]
      function(_Functor __f)
      : _Function_base()
 801d926:	687b      	ldr	r3, [r7, #4]
 801d928:	4618      	mov	r0, r3
 801d92a:	f7ff fa8e 	bl	801ce4a <_ZNSt14_Function_baseC1Ev>
      {
	typedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
 801d92e:	6838      	ldr	r0, [r7, #0]
 801d930:	f000 f8d0 	bl	801dad4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE21_M_not_empty_functionISC_EEbRKT_>
 801d934:	4603      	mov	r3, r0
 801d936:	2b00      	cmp	r3, #0
 801d938:	d00e      	beq.n	801d958 <_ZNSt8functionIFvhPhmEEC1ISt5_BindIFM5IOBusFvhS0_mEPS5_St12_PlaceholderILi1EES9_ILi2EES9_ILi3EEEEvvEET_+0x3c>
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 801d93a:	687c      	ldr	r4, [r7, #4]
 801d93c:	6838      	ldr	r0, [r7, #0]
 801d93e:	f7ff ffe2 	bl	801d906 <_ZSt4moveIRSt5_BindIFM5IOBusFvhPhmEPS1_St12_PlaceholderILi1EES6_ILi2EES6_ILi3EEEEEONSt16remove_referenceIT_E4typeEOSE_>
 801d942:	4603      	mov	r3, r0
 801d944:	4619      	mov	r1, r3
 801d946:	4620      	mov	r0, r4
 801d948:	f000 f8cf 	bl	801daea <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE15_M_init_functorERSt9_Any_dataOSC_>
	    _M_invoker = &_My_handler::_M_invoke;
 801d94c:	687b      	ldr	r3, [r7, #4]
 801d94e:	4a05      	ldr	r2, [pc, #20]	; (801d964 <_ZNSt8functionIFvhPhmEEC1ISt5_BindIFM5IOBusFvhS0_mEPS5_St12_PlaceholderILi1EES9_ILi2EES9_ILi3EEEEvvEET_+0x48>)
 801d950:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 801d952:	687b      	ldr	r3, [r7, #4]
 801d954:	4a04      	ldr	r2, [pc, #16]	; (801d968 <_ZNSt8functionIFvhPhmEEC1ISt5_BindIFM5IOBusFvhS0_mEPS5_St12_PlaceholderILi1EES9_ILi2EES9_ILi3EEEEvvEET_+0x4c>)
 801d956:	609a      	str	r2, [r3, #8]
	  }
      }
 801d958:	687b      	ldr	r3, [r7, #4]
 801d95a:	4618      	mov	r0, r3
 801d95c:	370c      	adds	r7, #12
 801d95e:	46bd      	mov	sp, r7
 801d960:	bd90      	pop	{r4, r7, pc}
 801d962:	bf00      	nop
 801d964:	0801db51 	.word	0x0801db51
 801d968:	0801db91 	.word	0x0801db91

0801d96c <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEEC1IJS4_RKS6_RKS7_RKS8_EEEOS3_DpOT_>:
	explicit _Bind(_Functor&& __f, _Args&&... __args)
 801d96c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d970:	b086      	sub	sp, #24
 801d972:	af02      	add	r7, sp, #8
 801d974:	60f8      	str	r0, [r7, #12]
 801d976:	60b9      	str	r1, [r7, #8]
 801d978:	607a      	str	r2, [r7, #4]
 801d97a:	603b      	str	r3, [r7, #0]
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
 801d97c:	68b8      	ldr	r0, [r7, #8]
 801d97e:	f000 f826 	bl	801d9ce <_ZSt4moveIRM5IOBusFvhPhmEEONSt16remove_referenceIT_E4typeEOS6_>
 801d982:	4602      	mov	r2, r0
 801d984:	68fb      	ldr	r3, [r7, #12]
 801d986:	e892 0003 	ldmia.w	r2, {r0, r1}
 801d98a:	e883 0003 	stmia.w	r3, {r0, r1}
 801d98e:	68fb      	ldr	r3, [r7, #12]
 801d990:	f103 0408 	add.w	r4, r3, #8
 801d994:	6878      	ldr	r0, [r7, #4]
 801d996:	f7ff fe39 	bl	801d60c <_ZSt7forwardIP5IOBusEOT_RNSt16remove_referenceIS2_E4typeE>
 801d99a:	4605      	mov	r5, r0
 801d99c:	6838      	ldr	r0, [r7, #0]
 801d99e:	f7ff fe40 	bl	801d622 <_ZSt7forwardIRKSt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS4_E4typeE>
 801d9a2:	4606      	mov	r6, r0
 801d9a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801d9a6:	f7ff fe47 	bl	801d638 <_ZSt7forwardIRKSt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS4_E4typeE>
 801d9aa:	4680      	mov	r8, r0
 801d9ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801d9ae:	f7ff fe4e 	bl	801d64e <_ZSt7forwardIRKSt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS4_E4typeE>
 801d9b2:	4603      	mov	r3, r0
 801d9b4:	9300      	str	r3, [sp, #0]
 801d9b6:	4643      	mov	r3, r8
 801d9b8:	4632      	mov	r2, r6
 801d9ba:	4629      	mov	r1, r5
 801d9bc:	4620      	mov	r0, r4
 801d9be:	f000 f921 	bl	801dc04 <_ZNSt5tupleIJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1IJS1_RKS3_RKS4_RKS5_ELb1EEEDpOT_>
	{ }
 801d9c2:	68fb      	ldr	r3, [r7, #12]
 801d9c4:	4618      	mov	r0, r3
 801d9c6:	3710      	adds	r7, #16
 801d9c8:	46bd      	mov	sp, r7
 801d9ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801d9ce <_ZSt4moveIRM5IOBusFvhPhmEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 801d9ce:	b480      	push	{r7}
 801d9d0:	b083      	sub	sp, #12
 801d9d2:	af00      	add	r7, sp, #0
 801d9d4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 801d9d6:	687b      	ldr	r3, [r7, #4]
 801d9d8:	4618      	mov	r0, r3
 801d9da:	370c      	adds	r7, #12
 801d9dc:	46bd      	mov	sp, r7
 801d9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d9e2:	4770      	bx	lr

0801d9e4 <_ZNSt10_Head_baseILj3ESt12_PlaceholderILi3EELb1EEC1IS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 801d9e4:	b580      	push	{r7, lr}
 801d9e6:	b082      	sub	sp, #8
 801d9e8:	af00      	add	r7, sp, #0
 801d9ea:	6078      	str	r0, [r7, #4]
 801d9ec:	6039      	str	r1, [r7, #0]
	: _Head(std::forward<_UHead>(__h)) { }
 801d9ee:	6838      	ldr	r0, [r7, #0]
 801d9f0:	f7ff fe83 	bl	801d6fa <_ZSt7forwardISt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS2_E4typeE>
 801d9f4:	687b      	ldr	r3, [r7, #4]
 801d9f6:	4618      	mov	r0, r3
 801d9f8:	3708      	adds	r7, #8
 801d9fa:	46bd      	mov	sp, r7
 801d9fc:	bd80      	pop	{r7, pc}

0801d9fe <_ZNSt10_Head_baseILj2ESt12_PlaceholderILi2EELb1EEC1IS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 801d9fe:	b580      	push	{r7, lr}
 801da00:	b082      	sub	sp, #8
 801da02:	af00      	add	r7, sp, #0
 801da04:	6078      	str	r0, [r7, #4]
 801da06:	6039      	str	r1, [r7, #0]
	: _Head(std::forward<_UHead>(__h)) { }
 801da08:	6838      	ldr	r0, [r7, #0]
 801da0a:	f7ff fec4 	bl	801d796 <_ZSt7forwardISt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS2_E4typeE>
 801da0e:	687b      	ldr	r3, [r7, #4]
 801da10:	4618      	mov	r0, r3
 801da12:	3708      	adds	r7, #8
 801da14:	46bd      	mov	sp, r7
 801da16:	bd80      	pop	{r7, pc}

0801da18 <_ZNSt10_Head_baseILj1ESt12_PlaceholderILi1EELb1EEC1IS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 801da18:	b580      	push	{r7, lr}
 801da1a:	b082      	sub	sp, #8
 801da1c:	af00      	add	r7, sp, #0
 801da1e:	6078      	str	r0, [r7, #4]
 801da20:	6039      	str	r1, [r7, #0]
	: _Head(std::forward<_UHead>(__h)) { }
 801da22:	6838      	ldr	r0, [r7, #0]
 801da24:	f7ff ff11 	bl	801d84a <_ZSt7forwardISt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS2_E4typeE>
 801da28:	687b      	ldr	r3, [r7, #4]
 801da2a:	4618      	mov	r0, r3
 801da2c:	3708      	adds	r7, #8
 801da2e:	46bd      	mov	sp, r7
 801da30:	bd80      	pop	{r7, pc}

0801da32 <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEE7_M_tailERS6_>:
      _M_tail(_Tuple_impl& __t) noexcept { return __t; }
 801da32:	b480      	push	{r7}
 801da34:	b083      	sub	sp, #12
 801da36:	af00      	add	r7, sp, #0
 801da38:	6078      	str	r0, [r7, #4]
 801da3a:	687b      	ldr	r3, [r7, #4]
 801da3c:	4618      	mov	r0, r3
 801da3e:	370c      	adds	r7, #12
 801da40:	46bd      	mov	sp, r7
 801da42:	f85d 7b04 	ldr.w	r7, [sp], #4
 801da46:	4770      	bx	lr

0801da48 <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 801da48:	b580      	push	{r7, lr}
 801da4a:	b082      	sub	sp, #8
 801da4c:	af00      	add	r7, sp, #0
 801da4e:	6078      	str	r0, [r7, #4]
 801da50:	687b      	ldr	r3, [r7, #4]
 801da52:	4618      	mov	r0, r3
 801da54:	f000 f805 	bl	801da62 <_ZNSt10_Head_baseILj0EP5IOBusLb0EE7_M_headERS2_>
 801da58:	4603      	mov	r3, r0
 801da5a:	4618      	mov	r0, r3
 801da5c:	3708      	adds	r7, #8
 801da5e:	46bd      	mov	sp, r7
 801da60:	bd80      	pop	{r7, pc}

0801da62 <_ZNSt10_Head_baseILj0EP5IOBusLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 801da62:	b480      	push	{r7}
 801da64:	b083      	sub	sp, #12
 801da66:	af00      	add	r7, sp, #0
 801da68:	6078      	str	r0, [r7, #4]
 801da6a:	687b      	ldr	r3, [r7, #4]
 801da6c:	4618      	mov	r0, r3
 801da6e:	370c      	adds	r7, #12
 801da70:	46bd      	mov	sp, r7
 801da72:	f85d 7b04 	ldr.w	r7, [sp], #4
 801da76:	4770      	bx	lr

0801da78 <_ZSt4moveIRSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES1_ILi2EES1_ILi3EEEEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 801da78:	b480      	push	{r7}
 801da7a:	b083      	sub	sp, #12
 801da7c:	af00      	add	r7, sp, #0
 801da7e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 801da80:	687b      	ldr	r3, [r7, #4]
 801da82:	4618      	mov	r0, r3
 801da84:	370c      	adds	r7, #12
 801da86:	46bd      	mov	sp, r7
 801da88:	f85d 7b04 	ldr.w	r7, [sp], #4
 801da8c:	4770      	bx	lr

0801da8e <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1EOS6_>:
      _Tuple_impl(_Tuple_impl&& __in)
 801da8e:	b590      	push	{r4, r7, lr}
 801da90:	b083      	sub	sp, #12
 801da92:	af00      	add	r7, sp, #0
 801da94:	6078      	str	r0, [r7, #4]
 801da96:	6039      	str	r1, [r7, #0]
      : _Inherited(std::move(_M_tail(__in))),
 801da98:	6838      	ldr	r0, [r7, #0]
 801da9a:	f7ff ffca 	bl	801da32 <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEE7_M_tailERS6_>
 801da9e:	4603      	mov	r3, r0
 801daa0:	4618      	mov	r0, r3
 801daa2:	f7ff ffe9 	bl	801da78 <_ZSt4moveIRSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES1_ILi2EES1_ILi3EEEEEONSt16remove_referenceIT_E4typeEOS8_>
 801daa6:	4603      	mov	r3, r0
	_Base(std::forward<_Head>(_M_head(__in))) { }
 801daa8:	4619      	mov	r1, r3
 801daaa:	6878      	ldr	r0, [r7, #4]
 801daac:	f7ff fed8 	bl	801d860 <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEEC1EOS4_>
 801dab0:	687c      	ldr	r4, [r7, #4]
 801dab2:	6838      	ldr	r0, [r7, #0]
 801dab4:	f7ff ffc8 	bl	801da48 <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEE7_M_headERS6_>
 801dab8:	4603      	mov	r3, r0
 801daba:	4618      	mov	r0, r3
 801dabc:	f7ff fda6 	bl	801d60c <_ZSt7forwardIP5IOBusEOT_RNSt16remove_referenceIS2_E4typeE>
 801dac0:	4603      	mov	r3, r0
 801dac2:	4619      	mov	r1, r3
 801dac4:	4620      	mov	r0, r4
 801dac6:	f000 f8c3 	bl	801dc50 <_ZNSt10_Head_baseILj0EP5IOBusLb0EEC1IS1_EEOT_>
 801daca:	687b      	ldr	r3, [r7, #4]
 801dacc:	4618      	mov	r0, r3
 801dace:	370c      	adds	r7, #12
 801dad0:	46bd      	mov	sp, r7
 801dad2:	bd90      	pop	{r4, r7, pc}

0801dad4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE21_M_not_empty_functionISC_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 801dad4:	b480      	push	{r7}
 801dad6:	b083      	sub	sp, #12
 801dad8:	af00      	add	r7, sp, #0
 801dada:	6078      	str	r0, [r7, #4]
	  { return true; }
 801dadc:	2301      	movs	r3, #1
 801dade:	4618      	mov	r0, r3
 801dae0:	370c      	adds	r7, #12
 801dae2:	46bd      	mov	sp, r7
 801dae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dae8:	4770      	bx	lr

0801daea <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE15_M_init_functorERSt9_Any_dataOSC_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 801daea:	b590      	push	{r4, r7, lr}
 801daec:	b085      	sub	sp, #20
 801daee:	af00      	add	r7, sp, #0
 801daf0:	6078      	str	r0, [r7, #4]
 801daf2:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 801daf4:	6838      	ldr	r0, [r7, #0]
 801daf6:	f7ff ff06 	bl	801d906 <_ZSt4moveIRSt5_BindIFM5IOBusFvhPhmEPS1_St12_PlaceholderILi1EES6_ILi2EES6_ILi3EEEEEONSt16remove_referenceIT_E4typeEOSE_>
 801dafa:	4603      	mov	r3, r0
 801dafc:	4622      	mov	r2, r4
 801dafe:	4619      	mov	r1, r3
 801db00:	6878      	ldr	r0, [r7, #4]
 801db02:	f000 f8b6 	bl	801dc72 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE15_M_init_functorERSt9_Any_dataOSC_St17integral_constantIbLb0EE>
 801db06:	bf00      	nop
 801db08:	3714      	adds	r7, #20
 801db0a:	46bd      	mov	sp, r7
 801db0c:	bd90      	pop	{r4, r7, pc}

0801db0e <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801db0e:	b480      	push	{r7}
 801db10:	b083      	sub	sp, #12
 801db12:	af00      	add	r7, sp, #0
 801db14:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801db16:	687b      	ldr	r3, [r7, #4]
 801db18:	4618      	mov	r0, r3
 801db1a:	370c      	adds	r7, #12
 801db1c:	46bd      	mov	sp, r7
 801db1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801db22:	4770      	bx	lr

0801db24 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801db24:	b480      	push	{r7}
 801db26:	b083      	sub	sp, #12
 801db28:	af00      	add	r7, sp, #0
 801db2a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801db2c:	687b      	ldr	r3, [r7, #4]
 801db2e:	4618      	mov	r0, r3
 801db30:	370c      	adds	r7, #12
 801db32:	46bd      	mov	sp, r7
 801db34:	f85d 7b04 	ldr.w	r7, [sp], #4
 801db38:	4770      	bx	lr

0801db3a <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801db3a:	b480      	push	{r7}
 801db3c:	b083      	sub	sp, #12
 801db3e:	af00      	add	r7, sp, #0
 801db40:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801db42:	687b      	ldr	r3, [r7, #4]
 801db44:	4618      	mov	r0, r3
 801db46:	370c      	adds	r7, #12
 801db48:	46bd      	mov	sp, r7
 801db4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801db4e:	4770      	bx	lr

0801db50 <_ZNSt17_Function_handlerIFvhPhmESt5_BindIFM5IOBusFvhS0_mEPS3_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE9_M_invokeERKSt9_Any_dataOhOS0_Om>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 801db50:	b5f0      	push	{r4, r5, r6, r7, lr}
 801db52:	b085      	sub	sp, #20
 801db54:	af00      	add	r7, sp, #0
 801db56:	60f8      	str	r0, [r7, #12]
 801db58:	60b9      	str	r1, [r7, #8]
 801db5a:	607a      	str	r2, [r7, #4]
 801db5c:	603b      	str	r3, [r7, #0]
	(*_Base::_M_get_pointer(__functor))(
 801db5e:	68f8      	ldr	r0, [r7, #12]
 801db60:	f000 f8a3 	bl	801dcaa <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE14_M_get_pointerERKSt9_Any_data>
 801db64:	4604      	mov	r4, r0
 801db66:	68b8      	ldr	r0, [r7, #8]
 801db68:	f7ff ffd1 	bl	801db0e <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 801db6c:	4605      	mov	r5, r0
 801db6e:	6878      	ldr	r0, [r7, #4]
 801db70:	f7ff ffd8 	bl	801db24 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 801db74:	4606      	mov	r6, r0
 801db76:	6838      	ldr	r0, [r7, #0]
 801db78:	f7ff ffdf 	bl	801db3a <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 801db7c:	4603      	mov	r3, r0
 801db7e:	4632      	mov	r2, r6
 801db80:	4629      	mov	r1, r5
 801db82:	4620      	mov	r0, r4
 801db84:	f000 f9a9 	bl	801deda <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEEclIJhS1_mEvEET0_DpOT_>
      }
 801db88:	bf00      	nop
 801db8a:	3714      	adds	r7, #20
 801db8c:	46bd      	mov	sp, r7
 801db8e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801db90 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 801db90:	b5b0      	push	{r4, r5, r7, lr}
 801db92:	b086      	sub	sp, #24
 801db94:	af00      	add	r7, sp, #0
 801db96:	60f8      	str	r0, [r7, #12]
 801db98:	60b9      	str	r1, [r7, #8]
 801db9a:	4613      	mov	r3, r2
 801db9c:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 801db9e:	79fb      	ldrb	r3, [r7, #7]
 801dba0:	2b03      	cmp	r3, #3
 801dba2:	d827      	bhi.n	801dbf4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x64>
 801dba4:	a201      	add	r2, pc, #4	; (adr r2, 801dbac <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x1c>)
 801dba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801dbaa:	bf00      	nop
 801dbac:	0801dbbd 	.word	0x0801dbbd
 801dbb0:	0801dbcb 	.word	0x0801dbcb
 801dbb4:	0801dbdf 	.word	0x0801dbdf
 801dbb8:	0801dbeb 	.word	0x0801dbeb
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
 801dbbc:	68f8      	ldr	r0, [r7, #12]
 801dbbe:	f000 f9af 	bl	801df20 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 801dbc2:	4602      	mov	r2, r0
 801dbc4:	4b0e      	ldr	r3, [pc, #56]	; (801dc00 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x70>)
 801dbc6:	6013      	str	r3, [r2, #0]
	      break;
 801dbc8:	e014      	b.n	801dbf4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x64>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 801dbca:	68f8      	ldr	r0, [r7, #12]
 801dbcc:	f000 f9b4 	bl	801df38 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERT_v>
 801dbd0:	4604      	mov	r4, r0
 801dbd2:	68b8      	ldr	r0, [r7, #8]
 801dbd4:	f000 f869 	bl	801dcaa <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE14_M_get_pointerERKSt9_Any_data>
 801dbd8:	4603      	mov	r3, r0
 801dbda:	6023      	str	r3, [r4, #0]
	      break;
 801dbdc:	e00a      	b.n	801dbf4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x64>
	      _M_clone(__dest, __source, _Local_storage());
 801dbde:	462a      	mov	r2, r5
 801dbe0:	68b9      	ldr	r1, [r7, #8]
 801dbe2:	68f8      	ldr	r0, [r7, #12]
 801dbe4:	f000 f9b4 	bl	801df50 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE8_M_cloneERSt9_Any_dataRKSE_St17integral_constantIbLb0EE>
	      break;
 801dbe8:	e004      	b.n	801dbf4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x64>
	      _M_destroy(__dest, _Local_storage());
 801dbea:	4621      	mov	r1, r4
 801dbec:	68f8      	ldr	r0, [r7, #12]
 801dbee:	f000 f9cd 	bl	801df8c <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE>
	      break;
 801dbf2:	bf00      	nop
	  return false;
 801dbf4:	2300      	movs	r3, #0
	}
 801dbf6:	4618      	mov	r0, r3
 801dbf8:	3718      	adds	r7, #24
 801dbfa:	46bd      	mov	sp, r7
 801dbfc:	bdb0      	pop	{r4, r5, r7, pc}
 801dbfe:	bf00      	nop
 801dc00:	0802710c 	.word	0x0802710c

0801dc04 <_ZNSt5tupleIJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1IJS1_RKS3_RKS4_RKS5_ELb1EEEDpOT_>:
        constexpr tuple(_UElements&&... __elements)
 801dc04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dc08:	b086      	sub	sp, #24
 801dc0a:	af02      	add	r7, sp, #8
 801dc0c:	60f8      	str	r0, [r7, #12]
 801dc0e:	60b9      	str	r1, [r7, #8]
 801dc10:	607a      	str	r2, [r7, #4]
 801dc12:	603b      	str	r3, [r7, #0]
        : _Inherited(std::forward<_UElements>(__elements)...) { }
 801dc14:	68fc      	ldr	r4, [r7, #12]
 801dc16:	68b8      	ldr	r0, [r7, #8]
 801dc18:	f7ff fcf8 	bl	801d60c <_ZSt7forwardIP5IOBusEOT_RNSt16remove_referenceIS2_E4typeE>
 801dc1c:	4605      	mov	r5, r0
 801dc1e:	6878      	ldr	r0, [r7, #4]
 801dc20:	f7ff fcff 	bl	801d622 <_ZSt7forwardIRKSt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS4_E4typeE>
 801dc24:	4606      	mov	r6, r0
 801dc26:	6838      	ldr	r0, [r7, #0]
 801dc28:	f7ff fd06 	bl	801d638 <_ZSt7forwardIRKSt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS4_E4typeE>
 801dc2c:	4680      	mov	r8, r0
 801dc2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801dc30:	f7ff fd0d 	bl	801d64e <_ZSt7forwardIRKSt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS4_E4typeE>
 801dc34:	4603      	mov	r3, r0
 801dc36:	9300      	str	r3, [sp, #0]
 801dc38:	4643      	mov	r3, r8
 801dc3a:	4632      	mov	r2, r6
 801dc3c:	4629      	mov	r1, r5
 801dc3e:	4620      	mov	r0, r4
 801dc40:	f000 f9b6 	bl	801dfb0 <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1IS1_JRKS3_RKS4_RKS5_EvEEOT_DpOT0_>
 801dc44:	68fb      	ldr	r3, [r7, #12]
 801dc46:	4618      	mov	r0, r3
 801dc48:	3710      	adds	r7, #16
 801dc4a:	46bd      	mov	sp, r7
 801dc4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801dc50 <_ZNSt10_Head_baseILj0EP5IOBusLb0EEC1IS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 801dc50:	b580      	push	{r7, lr}
 801dc52:	b082      	sub	sp, #8
 801dc54:	af00      	add	r7, sp, #0
 801dc56:	6078      	str	r0, [r7, #4]
 801dc58:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 801dc5a:	6838      	ldr	r0, [r7, #0]
 801dc5c:	f7ff fcd6 	bl	801d60c <_ZSt7forwardIP5IOBusEOT_RNSt16remove_referenceIS2_E4typeE>
 801dc60:	4603      	mov	r3, r0
 801dc62:	681a      	ldr	r2, [r3, #0]
 801dc64:	687b      	ldr	r3, [r7, #4]
 801dc66:	601a      	str	r2, [r3, #0]
 801dc68:	687b      	ldr	r3, [r7, #4]
 801dc6a:	4618      	mov	r0, r3
 801dc6c:	3708      	adds	r7, #8
 801dc6e:	46bd      	mov	sp, r7
 801dc70:	bd80      	pop	{r7, pc}

0801dc72 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE15_M_init_functorERSt9_Any_dataOSC_St17integral_constantIbLb0EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
 801dc72:	b5b0      	push	{r4, r5, r7, lr}
 801dc74:	b084      	sub	sp, #16
 801dc76:	af00      	add	r7, sp, #0
 801dc78:	60f8      	str	r0, [r7, #12]
 801dc7a:	60b9      	str	r1, [r7, #8]
 801dc7c:	713a      	strb	r2, [r7, #4]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 801dc7e:	68b8      	ldr	r0, [r7, #8]
 801dc80:	f7ff fe41 	bl	801d906 <_ZSt4moveIRSt5_BindIFM5IOBusFvhPhmEPS1_St12_PlaceholderILi1EES6_ILi2EES6_ILi3EEEEEONSt16remove_referenceIT_E4typeEOSE_>
 801dc84:	4605      	mov	r5, r0
 801dc86:	200c      	movs	r0, #12
 801dc88:	f7ff f8c8 	bl	801ce1c <_Znwj>
 801dc8c:	4603      	mov	r3, r0
 801dc8e:	461c      	mov	r4, r3
 801dc90:	4629      	mov	r1, r5
 801dc92:	4620      	mov	r0, r4
 801dc94:	f7ff fe16 	bl	801d8c4 <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEEC1EOSA_>
 801dc98:	68f8      	ldr	r0, [r7, #12]
 801dc9a:	f000 f94d 	bl	801df38 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERT_v>
 801dc9e:	4603      	mov	r3, r0
 801dca0:	601c      	str	r4, [r3, #0]
 801dca2:	bf00      	nop
 801dca4:	3710      	adds	r7, #16
 801dca6:	46bd      	mov	sp, r7
 801dca8:	bdb0      	pop	{r4, r5, r7, pc}

0801dcaa <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 801dcaa:	b580      	push	{r7, lr}
 801dcac:	b084      	sub	sp, #16
 801dcae:	af00      	add	r7, sp, #0
 801dcb0:	6078      	str	r0, [r7, #4]
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
 801dcb2:	6878      	ldr	r0, [r7, #4]
 801dcb4:	f000 f9a2 	bl	801dffc <_ZNKSt9_Any_data9_M_accessIPSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERKT_v>
 801dcb8:	4603      	mov	r3, r0
	  const _Functor* __ptr =
 801dcba:	681b      	ldr	r3, [r3, #0]
 801dcbc:	60fb      	str	r3, [r7, #12]
	  return const_cast<_Functor*>(__ptr);
 801dcbe:	68fb      	ldr	r3, [r7, #12]
	}
 801dcc0:	4618      	mov	r0, r3
 801dcc2:	3710      	adds	r7, #16
 801dcc4:	46bd      	mov	sp, r7
 801dcc6:	bd80      	pop	{r7, pc}

0801dcc8 <_ZNSt5tupleIJOhOPhOmEEC1IJhS1_mELb1EEEDpOT_>:
        constexpr tuple(_UElements&&... __elements)
 801dcc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dcca:	b085      	sub	sp, #20
 801dccc:	af00      	add	r7, sp, #0
 801dcce:	60f8      	str	r0, [r7, #12]
 801dcd0:	60b9      	str	r1, [r7, #8]
 801dcd2:	607a      	str	r2, [r7, #4]
 801dcd4:	603b      	str	r3, [r7, #0]
        : _Inherited(std::forward<_UElements>(__elements)...) { }
 801dcd6:	68fc      	ldr	r4, [r7, #12]
 801dcd8:	68b8      	ldr	r0, [r7, #8]
 801dcda:	f7ff ff18 	bl	801db0e <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 801dcde:	4605      	mov	r5, r0
 801dce0:	6878      	ldr	r0, [r7, #4]
 801dce2:	f7ff ff1f 	bl	801db24 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 801dce6:	4606      	mov	r6, r0
 801dce8:	6838      	ldr	r0, [r7, #0]
 801dcea:	f7ff ff26 	bl	801db3a <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 801dcee:	4603      	mov	r3, r0
 801dcf0:	4632      	mov	r2, r6
 801dcf2:	4629      	mov	r1, r5
 801dcf4:	4620      	mov	r0, r4
 801dcf6:	f000 f805 	bl	801dd04 <_ZNSt11_Tuple_implILj0EJOhOPhOmEEC1IhJS1_mEvEEOT_DpOT0_>
 801dcfa:	68fb      	ldr	r3, [r7, #12]
 801dcfc:	4618      	mov	r0, r3
 801dcfe:	3714      	adds	r7, #20
 801dd00:	46bd      	mov	sp, r7
 801dd02:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801dd04 <_ZNSt11_Tuple_implILj0EJOhOPhOmEEC1IhJS1_mEvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 801dd04:	b5b0      	push	{r4, r5, r7, lr}
 801dd06:	b084      	sub	sp, #16
 801dd08:	af00      	add	r7, sp, #0
 801dd0a:	60f8      	str	r0, [r7, #12]
 801dd0c:	60b9      	str	r1, [r7, #8]
 801dd0e:	607a      	str	r2, [r7, #4]
 801dd10:	603b      	str	r3, [r7, #0]
	  _Base(std::forward<_UHead>(__head)) { }
 801dd12:	68fc      	ldr	r4, [r7, #12]
 801dd14:	6878      	ldr	r0, [r7, #4]
 801dd16:	f7ff ff05 	bl	801db24 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 801dd1a:	4605      	mov	r5, r0
 801dd1c:	6838      	ldr	r0, [r7, #0]
 801dd1e:	f7ff ff0c 	bl	801db3a <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 801dd22:	4603      	mov	r3, r0
 801dd24:	461a      	mov	r2, r3
 801dd26:	4629      	mov	r1, r5
 801dd28:	4620      	mov	r0, r4
 801dd2a:	f000 f810 	bl	801dd4e <_ZNSt11_Tuple_implILj1EJOPhOmEEC1IS0_JmEvEEOT_DpOT0_>
 801dd2e:	68fb      	ldr	r3, [r7, #12]
 801dd30:	f103 0408 	add.w	r4, r3, #8
 801dd34:	68b8      	ldr	r0, [r7, #8]
 801dd36:	f7ff feea 	bl	801db0e <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 801dd3a:	4603      	mov	r3, r0
 801dd3c:	4619      	mov	r1, r3
 801dd3e:	4620      	mov	r0, r4
 801dd40:	f000 f856 	bl	801ddf0 <_ZNSt10_Head_baseILj0EOhLb0EEC1IhEEOT_>
 801dd44:	68fb      	ldr	r3, [r7, #12]
 801dd46:	4618      	mov	r0, r3
 801dd48:	3710      	adds	r7, #16
 801dd4a:	46bd      	mov	sp, r7
 801dd4c:	bdb0      	pop	{r4, r5, r7, pc}

0801dd4e <_ZNSt11_Tuple_implILj1EJOPhOmEEC1IS0_JmEvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 801dd4e:	b590      	push	{r4, r7, lr}
 801dd50:	b085      	sub	sp, #20
 801dd52:	af00      	add	r7, sp, #0
 801dd54:	60f8      	str	r0, [r7, #12]
 801dd56:	60b9      	str	r1, [r7, #8]
 801dd58:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 801dd5a:	68fc      	ldr	r4, [r7, #12]
 801dd5c:	6878      	ldr	r0, [r7, #4]
 801dd5e:	f7ff feec 	bl	801db3a <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 801dd62:	4603      	mov	r3, r0
 801dd64:	4619      	mov	r1, r3
 801dd66:	4620      	mov	r0, r4
 801dd68:	f000 f80f 	bl	801dd8a <_ZNSt11_Tuple_implILj2EJOmEEC1ImEEOT_>
 801dd6c:	68fb      	ldr	r3, [r7, #12]
 801dd6e:	1d1c      	adds	r4, r3, #4
 801dd70:	68b8      	ldr	r0, [r7, #8]
 801dd72:	f7ff fed7 	bl	801db24 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 801dd76:	4603      	mov	r3, r0
 801dd78:	4619      	mov	r1, r3
 801dd7a:	4620      	mov	r0, r4
 801dd7c:	f000 f828 	bl	801ddd0 <_ZNSt10_Head_baseILj1EOPhLb0EEC1IS0_EEOT_>
 801dd80:	68fb      	ldr	r3, [r7, #12]
 801dd82:	4618      	mov	r0, r3
 801dd84:	3714      	adds	r7, #20
 801dd86:	46bd      	mov	sp, r7
 801dd88:	bd90      	pop	{r4, r7, pc}

0801dd8a <_ZNSt11_Tuple_implILj2EJOmEEC1ImEEOT_>:
        constexpr _Tuple_impl(_UHead&& __head)
 801dd8a:	b590      	push	{r4, r7, lr}
 801dd8c:	b083      	sub	sp, #12
 801dd8e:	af00      	add	r7, sp, #0
 801dd90:	6078      	str	r0, [r7, #4]
 801dd92:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head)) { }
 801dd94:	687c      	ldr	r4, [r7, #4]
 801dd96:	6838      	ldr	r0, [r7, #0]
 801dd98:	f7ff fecf 	bl	801db3a <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 801dd9c:	4603      	mov	r3, r0
 801dd9e:	4619      	mov	r1, r3
 801dda0:	4620      	mov	r0, r4
 801dda2:	f000 f805 	bl	801ddb0 <_ZNSt10_Head_baseILj2EOmLb0EEC1ImEEOT_>
 801dda6:	687b      	ldr	r3, [r7, #4]
 801dda8:	4618      	mov	r0, r3
 801ddaa:	370c      	adds	r7, #12
 801ddac:	46bd      	mov	sp, r7
 801ddae:	bd90      	pop	{r4, r7, pc}

0801ddb0 <_ZNSt10_Head_baseILj2EOmLb0EEC1ImEEOT_>:
        constexpr _Head_base(_UHead&& __h)
 801ddb0:	b580      	push	{r7, lr}
 801ddb2:	b082      	sub	sp, #8
 801ddb4:	af00      	add	r7, sp, #0
 801ddb6:	6078      	str	r0, [r7, #4]
 801ddb8:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 801ddba:	6838      	ldr	r0, [r7, #0]
 801ddbc:	f7ff febd 	bl	801db3a <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 801ddc0:	4602      	mov	r2, r0
 801ddc2:	687b      	ldr	r3, [r7, #4]
 801ddc4:	601a      	str	r2, [r3, #0]
 801ddc6:	687b      	ldr	r3, [r7, #4]
 801ddc8:	4618      	mov	r0, r3
 801ddca:	3708      	adds	r7, #8
 801ddcc:	46bd      	mov	sp, r7
 801ddce:	bd80      	pop	{r7, pc}

0801ddd0 <_ZNSt10_Head_baseILj1EOPhLb0EEC1IS0_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 801ddd0:	b580      	push	{r7, lr}
 801ddd2:	b082      	sub	sp, #8
 801ddd4:	af00      	add	r7, sp, #0
 801ddd6:	6078      	str	r0, [r7, #4]
 801ddd8:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 801ddda:	6838      	ldr	r0, [r7, #0]
 801dddc:	f7ff fea2 	bl	801db24 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 801dde0:	4602      	mov	r2, r0
 801dde2:	687b      	ldr	r3, [r7, #4]
 801dde4:	601a      	str	r2, [r3, #0]
 801dde6:	687b      	ldr	r3, [r7, #4]
 801dde8:	4618      	mov	r0, r3
 801ddea:	3708      	adds	r7, #8
 801ddec:	46bd      	mov	sp, r7
 801ddee:	bd80      	pop	{r7, pc}

0801ddf0 <_ZNSt10_Head_baseILj0EOhLb0EEC1IhEEOT_>:
        constexpr _Head_base(_UHead&& __h)
 801ddf0:	b580      	push	{r7, lr}
 801ddf2:	b082      	sub	sp, #8
 801ddf4:	af00      	add	r7, sp, #0
 801ddf6:	6078      	str	r0, [r7, #4]
 801ddf8:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 801ddfa:	6838      	ldr	r0, [r7, #0]
 801ddfc:	f7ff fe87 	bl	801db0e <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 801de00:	4602      	mov	r2, r0
 801de02:	687b      	ldr	r3, [r7, #4]
 801de04:	601a      	str	r2, [r3, #0]
 801de06:	687b      	ldr	r3, [r7, #4]
 801de08:	4618      	mov	r0, r3
 801de0a:	3708      	adds	r7, #8
 801de0c:	46bd      	mov	sp, r7
 801de0e:	bd80      	pop	{r7, pc}

0801de10 <_ZNSt11_Tuple_implILj2EJOmEE7_M_headERS1_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 801de10:	b580      	push	{r7, lr}
 801de12:	b082      	sub	sp, #8
 801de14:	af00      	add	r7, sp, #0
 801de16:	6078      	str	r0, [r7, #4]
 801de18:	687b      	ldr	r3, [r7, #4]
 801de1a:	4618      	mov	r0, r3
 801de1c:	f000 f805 	bl	801de2a <_ZNSt10_Head_baseILj2EOmLb0EE7_M_headERS1_>
 801de20:	4603      	mov	r3, r0
 801de22:	4618      	mov	r0, r3
 801de24:	3708      	adds	r7, #8
 801de26:	46bd      	mov	sp, r7
 801de28:	bd80      	pop	{r7, pc}

0801de2a <_ZNSt10_Head_baseILj2EOmLb0EE7_M_headERS1_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 801de2a:	b480      	push	{r7}
 801de2c:	b083      	sub	sp, #12
 801de2e:	af00      	add	r7, sp, #0
 801de30:	6078      	str	r0, [r7, #4]
 801de32:	687b      	ldr	r3, [r7, #4]
 801de34:	681b      	ldr	r3, [r3, #0]
 801de36:	4618      	mov	r0, r3
 801de38:	370c      	adds	r7, #12
 801de3a:	46bd      	mov	sp, r7
 801de3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801de40:	4770      	bx	lr

0801de42 <_ZSt7forwardIOmEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801de42:	b480      	push	{r7}
 801de44:	b083      	sub	sp, #12
 801de46:	af00      	add	r7, sp, #0
 801de48:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801de4a:	687b      	ldr	r3, [r7, #4]
 801de4c:	4618      	mov	r0, r3
 801de4e:	370c      	adds	r7, #12
 801de50:	46bd      	mov	sp, r7
 801de52:	f85d 7b04 	ldr.w	r7, [sp], #4
 801de56:	4770      	bx	lr

0801de58 <_ZNSt11_Tuple_implILj1EJOPhOmEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 801de58:	b580      	push	{r7, lr}
 801de5a:	b082      	sub	sp, #8
 801de5c:	af00      	add	r7, sp, #0
 801de5e:	6078      	str	r0, [r7, #4]
 801de60:	687b      	ldr	r3, [r7, #4]
 801de62:	3304      	adds	r3, #4
 801de64:	4618      	mov	r0, r3
 801de66:	f000 f805 	bl	801de74 <_ZNSt10_Head_baseILj1EOPhLb0EE7_M_headERS2_>
 801de6a:	4603      	mov	r3, r0
 801de6c:	4618      	mov	r0, r3
 801de6e:	3708      	adds	r7, #8
 801de70:	46bd      	mov	sp, r7
 801de72:	bd80      	pop	{r7, pc}

0801de74 <_ZNSt10_Head_baseILj1EOPhLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 801de74:	b480      	push	{r7}
 801de76:	b083      	sub	sp, #12
 801de78:	af00      	add	r7, sp, #0
 801de7a:	6078      	str	r0, [r7, #4]
 801de7c:	687b      	ldr	r3, [r7, #4]
 801de7e:	681b      	ldr	r3, [r3, #0]
 801de80:	4618      	mov	r0, r3
 801de82:	370c      	adds	r7, #12
 801de84:	46bd      	mov	sp, r7
 801de86:	f85d 7b04 	ldr.w	r7, [sp], #4
 801de8a:	4770      	bx	lr

0801de8c <_ZSt7forwardIOPhEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801de8c:	b480      	push	{r7}
 801de8e:	b083      	sub	sp, #12
 801de90:	af00      	add	r7, sp, #0
 801de92:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801de94:	687b      	ldr	r3, [r7, #4]
 801de96:	4618      	mov	r0, r3
 801de98:	370c      	adds	r7, #12
 801de9a:	46bd      	mov	sp, r7
 801de9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dea0:	4770      	bx	lr

0801dea2 <_ZSt16forward_as_tupleIJhPhmEESt5tupleIJDpOT_EES4_>:

  // _GLIBCXX_RESOLVE_LIB_DEFECTS
  // 2275. Why is forward_as_tuple not constexpr?
  template<typename... _Elements>
    constexpr tuple<_Elements&&...>
    forward_as_tuple(_Elements&&... __args) noexcept
 801dea2:	b5b0      	push	{r4, r5, r7, lr}
 801dea4:	b084      	sub	sp, #16
 801dea6:	af00      	add	r7, sp, #0
 801dea8:	60f8      	str	r0, [r7, #12]
 801deaa:	60b9      	str	r1, [r7, #8]
 801deac:	607a      	str	r2, [r7, #4]
 801deae:	603b      	str	r3, [r7, #0]
    { return tuple<_Elements&&...>(std::forward<_Elements>(__args)...); }
 801deb0:	68b8      	ldr	r0, [r7, #8]
 801deb2:	f7ff fe2c 	bl	801db0e <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 801deb6:	4604      	mov	r4, r0
 801deb8:	6878      	ldr	r0, [r7, #4]
 801deba:	f7ff fe33 	bl	801db24 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 801debe:	4605      	mov	r5, r0
 801dec0:	6838      	ldr	r0, [r7, #0]
 801dec2:	f7ff fe3a 	bl	801db3a <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 801dec6:	4603      	mov	r3, r0
 801dec8:	462a      	mov	r2, r5
 801deca:	4621      	mov	r1, r4
 801decc:	68f8      	ldr	r0, [r7, #12]
 801dece:	f7ff fefb 	bl	801dcc8 <_ZNSt5tupleIJOhOPhOmEEC1IJhS1_mELb1EEEDpOT_>
 801ded2:	68f8      	ldr	r0, [r7, #12]
 801ded4:	3710      	adds	r7, #16
 801ded6:	46bd      	mov	sp, r7
 801ded8:	bdb0      	pop	{r4, r5, r7, pc}

0801deda <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEEclIJhS1_mEvEET0_DpOT_>:
	operator()(_Args&&... __args)
 801deda:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dedc:	b089      	sub	sp, #36	; 0x24
 801dede:	af00      	add	r7, sp, #0
 801dee0:	60f8      	str	r0, [r7, #12]
 801dee2:	60b9      	str	r1, [r7, #8]
 801dee4:	607a      	str	r2, [r7, #4]
 801dee6:	603b      	str	r3, [r7, #0]
	      _Bound_indexes());
 801dee8:	68b8      	ldr	r0, [r7, #8]
 801deea:	f7ff fe10 	bl	801db0e <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 801deee:	4604      	mov	r4, r0
 801def0:	6878      	ldr	r0, [r7, #4]
 801def2:	f7ff fe17 	bl	801db24 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 801def6:	4605      	mov	r5, r0
 801def8:	6838      	ldr	r0, [r7, #0]
 801defa:	f7ff fe1e 	bl	801db3a <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 801defe:	4603      	mov	r3, r0
 801df00:	f107 0010 	add.w	r0, r7, #16
 801df04:	462a      	mov	r2, r5
 801df06:	4621      	mov	r1, r4
 801df08:	f7ff ffcb 	bl	801dea2 <_ZSt16forward_as_tupleIJhPhmEESt5tupleIJDpOT_EES4_>
 801df0c:	f107 0310 	add.w	r3, r7, #16
 801df10:	4632      	mov	r2, r6
 801df12:	4619      	mov	r1, r3
 801df14:	68f8      	ldr	r0, [r7, #12]
 801df16:	f000 f8a2 	bl	801e05e <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEE6__callIvJOhOS1_OmEJLj0ELj1ELj2ELj3EEEET_OSt5tupleIJDpT0_EESt12_Index_tupleIJXspT1_EEE>
	}
 801df1a:	3724      	adds	r7, #36	; 0x24
 801df1c:	46bd      	mov	sp, r7
 801df1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801df20 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>:
      _M_access()
 801df20:	b580      	push	{r7, lr}
 801df22:	b082      	sub	sp, #8
 801df24:	af00      	add	r7, sp, #0
 801df26:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 801df28:	6878      	ldr	r0, [r7, #4]
 801df2a:	f7ff fa46 	bl	801d3ba <_ZNSt9_Any_data9_M_accessEv>
 801df2e:	4603      	mov	r3, r0
 801df30:	4618      	mov	r0, r3
 801df32:	3708      	adds	r7, #8
 801df34:	46bd      	mov	sp, r7
 801df36:	bd80      	pop	{r7, pc}

0801df38 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERT_v>:
      _M_access()
 801df38:	b580      	push	{r7, lr}
 801df3a:	b082      	sub	sp, #8
 801df3c:	af00      	add	r7, sp, #0
 801df3e:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 801df40:	6878      	ldr	r0, [r7, #4]
 801df42:	f7ff fa3a 	bl	801d3ba <_ZNSt9_Any_data9_M_accessEv>
 801df46:	4603      	mov	r3, r0
 801df48:	4618      	mov	r0, r3
 801df4a:	3708      	adds	r7, #8
 801df4c:	46bd      	mov	sp, r7
 801df4e:	bd80      	pop	{r7, pc}

0801df50 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE8_M_cloneERSt9_Any_dataRKSE_St17integral_constantIbLb0EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
 801df50:	b5b0      	push	{r4, r5, r7, lr}
 801df52:	b084      	sub	sp, #16
 801df54:	af00      	add	r7, sp, #0
 801df56:	60f8      	str	r0, [r7, #12]
 801df58:	60b9      	str	r1, [r7, #8]
 801df5a:	713a      	strb	r2, [r7, #4]
	    new _Functor(*__source._M_access<_Functor*>());
 801df5c:	68b8      	ldr	r0, [r7, #8]
 801df5e:	f000 f84d 	bl	801dffc <_ZNKSt9_Any_data9_M_accessIPSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERKT_v>
 801df62:	4603      	mov	r3, r0
	  __dest._M_access<_Functor*>() =
 801df64:	681d      	ldr	r5, [r3, #0]
	    new _Functor(*__source._M_access<_Functor*>());
 801df66:	200c      	movs	r0, #12
 801df68:	f7fe ff58 	bl	801ce1c <_Znwj>
 801df6c:	4603      	mov	r3, r0
 801df6e:	461c      	mov	r4, r3
	  __dest._M_access<_Functor*>() =
 801df70:	4623      	mov	r3, r4
 801df72:	462a      	mov	r2, r5
 801df74:	ca07      	ldmia	r2, {r0, r1, r2}
 801df76:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801df7a:	68f8      	ldr	r0, [r7, #12]
 801df7c:	f7ff ffdc 	bl	801df38 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERT_v>
 801df80:	4603      	mov	r3, r0
 801df82:	601c      	str	r4, [r3, #0]
	}
 801df84:	bf00      	nop
 801df86:	3710      	adds	r7, #16
 801df88:	46bd      	mov	sp, r7
 801df8a:	bdb0      	pop	{r4, r5, r7, pc}

0801df8c <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE>:
	_M_destroy(_Any_data& __victim, false_type)
 801df8c:	b580      	push	{r7, lr}
 801df8e:	b082      	sub	sp, #8
 801df90:	af00      	add	r7, sp, #0
 801df92:	6078      	str	r0, [r7, #4]
 801df94:	7039      	strb	r1, [r7, #0]
	  delete __victim._M_access<_Functor*>();
 801df96:	6878      	ldr	r0, [r7, #4]
 801df98:	f7ff ffce 	bl	801df38 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERT_v>
 801df9c:	4603      	mov	r3, r0
 801df9e:	681b      	ldr	r3, [r3, #0]
 801dfa0:	210c      	movs	r1, #12
 801dfa2:	4618      	mov	r0, r3
 801dfa4:	f002 f90b 	bl	80201be <_ZdlPvj>
	}
 801dfa8:	bf00      	nop
 801dfaa:	3708      	adds	r7, #8
 801dfac:	46bd      	mov	sp, r7
 801dfae:	bd80      	pop	{r7, pc}

0801dfb0 <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1IS1_JRKS3_RKS4_RKS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 801dfb0:	b5b0      	push	{r4, r5, r7, lr}
 801dfb2:	b084      	sub	sp, #16
 801dfb4:	af00      	add	r7, sp, #0
 801dfb6:	60f8      	str	r0, [r7, #12]
 801dfb8:	60b9      	str	r1, [r7, #8]
 801dfba:	607a      	str	r2, [r7, #4]
 801dfbc:	603b      	str	r3, [r7, #0]
	  _Base(std::forward<_UHead>(__head)) { }
 801dfbe:	6878      	ldr	r0, [r7, #4]
 801dfc0:	f7ff fb2f 	bl	801d622 <_ZSt7forwardIRKSt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS4_E4typeE>
 801dfc4:	4604      	mov	r4, r0
 801dfc6:	6838      	ldr	r0, [r7, #0]
 801dfc8:	f7ff fb36 	bl	801d638 <_ZSt7forwardIRKSt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS4_E4typeE>
 801dfcc:	4605      	mov	r5, r0
 801dfce:	6a38      	ldr	r0, [r7, #32]
 801dfd0:	f7ff fb3d 	bl	801d64e <_ZSt7forwardIRKSt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS4_E4typeE>
 801dfd4:	4603      	mov	r3, r0
 801dfd6:	462a      	mov	r2, r5
 801dfd8:	4621      	mov	r1, r4
 801dfda:	68f8      	ldr	r0, [r7, #12]
 801dfdc:	f000 f887 	bl	801e0ee <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEEC1ERKS1_RKS2_RKS3_>
 801dfe0:	68fc      	ldr	r4, [r7, #12]
 801dfe2:	68b8      	ldr	r0, [r7, #8]
 801dfe4:	f7ff fb12 	bl	801d60c <_ZSt7forwardIP5IOBusEOT_RNSt16remove_referenceIS2_E4typeE>
 801dfe8:	4603      	mov	r3, r0
 801dfea:	4619      	mov	r1, r3
 801dfec:	4620      	mov	r0, r4
 801dfee:	f7ff fe2f 	bl	801dc50 <_ZNSt10_Head_baseILj0EP5IOBusLb0EEC1IS1_EEOT_>
 801dff2:	68fb      	ldr	r3, [r7, #12]
 801dff4:	4618      	mov	r0, r3
 801dff6:	3710      	adds	r7, #16
 801dff8:	46bd      	mov	sp, r7
 801dffa:	bdb0      	pop	{r4, r5, r7, pc}

0801dffc <_ZNKSt9_Any_data9_M_accessIPSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERKT_v>:
      _M_access() const
 801dffc:	b580      	push	{r7, lr}
 801dffe:	b082      	sub	sp, #8
 801e000:	af00      	add	r7, sp, #0
 801e002:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 801e004:	6878      	ldr	r0, [r7, #4]
 801e006:	f7ff f9e3 	bl	801d3d0 <_ZNKSt9_Any_data9_M_accessEv>
 801e00a:	4603      	mov	r3, r0
 801e00c:	4618      	mov	r0, r3
 801e00e:	3708      	adds	r7, #8
 801e010:	46bd      	mov	sp, r7
 801e012:	bd80      	pop	{r7, pc}

0801e014 <_ZNSt11_Tuple_implILj0EJOhOPhOmEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 801e014:	b580      	push	{r7, lr}
 801e016:	b082      	sub	sp, #8
 801e018:	af00      	add	r7, sp, #0
 801e01a:	6078      	str	r0, [r7, #4]
 801e01c:	687b      	ldr	r3, [r7, #4]
 801e01e:	3308      	adds	r3, #8
 801e020:	4618      	mov	r0, r3
 801e022:	f000 f805 	bl	801e030 <_ZNSt10_Head_baseILj0EOhLb0EE7_M_headERS1_>
 801e026:	4603      	mov	r3, r0
 801e028:	4618      	mov	r0, r3
 801e02a:	3708      	adds	r7, #8
 801e02c:	46bd      	mov	sp, r7
 801e02e:	bd80      	pop	{r7, pc}

0801e030 <_ZNSt10_Head_baseILj0EOhLb0EE7_M_headERS1_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 801e030:	b480      	push	{r7}
 801e032:	b083      	sub	sp, #12
 801e034:	af00      	add	r7, sp, #0
 801e036:	6078      	str	r0, [r7, #4]
 801e038:	687b      	ldr	r3, [r7, #4]
 801e03a:	681b      	ldr	r3, [r3, #0]
 801e03c:	4618      	mov	r0, r3
 801e03e:	370c      	adds	r7, #12
 801e040:	46bd      	mov	sp, r7
 801e042:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e046:	4770      	bx	lr

0801e048 <_ZSt7forwardIOhEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801e048:	b480      	push	{r7}
 801e04a:	b083      	sub	sp, #12
 801e04c:	af00      	add	r7, sp, #0
 801e04e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801e050:	687b      	ldr	r3, [r7, #4]
 801e052:	4618      	mov	r0, r3
 801e054:	370c      	adds	r7, #12
 801e056:	46bd      	mov	sp, r7
 801e058:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e05c:	4770      	bx	lr

0801e05e <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEE6__callIvJOhOS1_OmEJLj0ELj1ELj2ELj3EEEET_OSt5tupleIJDpT0_EESt12_Index_tupleIJXspT1_EEE>:
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
 801e05e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e062:	b08a      	sub	sp, #40	; 0x28
 801e064:	af02      	add	r7, sp, #8
 801e066:	60f8      	str	r0, [r7, #12]
 801e068:	60b9      	str	r1, [r7, #8]
 801e06a:	713a      	strb	r2, [r7, #4]
	  return std::__invoke(_M_f,
 801e06c:	68fc      	ldr	r4, [r7, #12]
	      _Mu<_Bound_args>()(std::get<_Indexes>(_M_bound_args), __args)...
 801e06e:	68fb      	ldr	r3, [r7, #12]
 801e070:	3308      	adds	r3, #8
 801e072:	4618      	mov	r0, r3
 801e074:	f000 f850 	bl	801e118 <_ZSt3getILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 801e078:	4601      	mov	r1, r0
	  return std::__invoke(_M_f,
 801e07a:	f107 0310 	add.w	r3, r7, #16
 801e07e:	68ba      	ldr	r2, [r7, #8]
 801e080:	4618      	mov	r0, r3
 801e082:	f000 f856 	bl	801e132 <_ZNVKSt3_MuIP5IOBusLb0ELb0EEclIRS1_St5tupleIJOhOPhOmEEEEOT_SC_RT0_>
 801e086:	4605      	mov	r5, r0
	      _Mu<_Bound_args>()(std::get<_Indexes>(_M_bound_args), __args)...
 801e088:	68fb      	ldr	r3, [r7, #12]
 801e08a:	3308      	adds	r3, #8
 801e08c:	4618      	mov	r0, r3
 801e08e:	f000 f85e 	bl	801e14e <_ZSt3getILj1EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 801e092:	4601      	mov	r1, r0
	  return std::__invoke(_M_f,
 801e094:	f107 0314 	add.w	r3, r7, #20
 801e098:	68ba      	ldr	r2, [r7, #8]
 801e09a:	4618      	mov	r0, r3
 801e09c:	f000 f86e 	bl	801e17c <_ZNVKSt3_MuISt12_PlaceholderILi1EELb0ELb1EEclISt5tupleIJOhOPhOmEEEEONSt9enable_ifIXltLj0EsrSt10tuple_sizeIT_E5valueESt13tuple_elementILj0ESC_EE4type4typeERVKS1_RSC_>
 801e0a0:	4606      	mov	r6, r0
	      _Mu<_Bound_args>()(std::get<_Indexes>(_M_bound_args), __args)...
 801e0a2:	68fb      	ldr	r3, [r7, #12]
 801e0a4:	3308      	adds	r3, #8
 801e0a6:	4618      	mov	r0, r3
 801e0a8:	f000 f87a 	bl	801e1a0 <_ZSt3getILj2EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 801e0ac:	4601      	mov	r1, r0
	  return std::__invoke(_M_f,
 801e0ae:	f107 0318 	add.w	r3, r7, #24
 801e0b2:	68ba      	ldr	r2, [r7, #8]
 801e0b4:	4618      	mov	r0, r3
 801e0b6:	f000 f87f 	bl	801e1b8 <_ZNVKSt3_MuISt12_PlaceholderILi2EELb0ELb1EEclISt5tupleIJOhOPhOmEEEEONSt9enable_ifIXltLj1EsrSt10tuple_sizeIT_E5valueESt13tuple_elementILj1ESC_EE4type4typeERVKS1_RSC_>
 801e0ba:	4680      	mov	r8, r0
	      _Mu<_Bound_args>()(std::get<_Indexes>(_M_bound_args), __args)...
 801e0bc:	68fb      	ldr	r3, [r7, #12]
 801e0be:	3308      	adds	r3, #8
 801e0c0:	4618      	mov	r0, r3
 801e0c2:	f000 f88b 	bl	801e1dc <_ZSt3getILj3EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 801e0c6:	4601      	mov	r1, r0
	  return std::__invoke(_M_f,
 801e0c8:	f107 031c 	add.w	r3, r7, #28
 801e0cc:	68ba      	ldr	r2, [r7, #8]
 801e0ce:	4618      	mov	r0, r3
 801e0d0:	f000 f890 	bl	801e1f4 <_ZNVKSt3_MuISt12_PlaceholderILi3EELb0ELb1EEclISt5tupleIJOhOPhOmEEEEONSt9enable_ifIXltLj2EsrSt10tuple_sizeIT_E5valueESt13tuple_elementILj2ESC_EE4type4typeERVKS1_RSC_>
 801e0d4:	4603      	mov	r3, r0
 801e0d6:	9300      	str	r3, [sp, #0]
 801e0d8:	4643      	mov	r3, r8
 801e0da:	4632      	mov	r2, r6
 801e0dc:	4629      	mov	r1, r5
 801e0de:	4620      	mov	r0, r4
 801e0e0:	f000 f8b0 	bl	801e244 <_ZSt8__invokeIRM5IOBusFvhPhmEJRPS0_hS1_mEENSt15__invoke_resultIT_JDpT0_EE4typeEOS8_DpOS9_>
	      );
 801e0e4:	bf00      	nop
	}
 801e0e6:	3720      	adds	r7, #32
 801e0e8:	46bd      	mov	sp, r7
 801e0ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801e0ee <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEEC1ERKS1_RKS2_RKS3_>:
      constexpr _Tuple_impl(const _Head& __head, const _Tail&... __tail)
 801e0ee:	b580      	push	{r7, lr}
 801e0f0:	b084      	sub	sp, #16
 801e0f2:	af00      	add	r7, sp, #0
 801e0f4:	60f8      	str	r0, [r7, #12]
 801e0f6:	60b9      	str	r1, [r7, #8]
 801e0f8:	607a      	str	r2, [r7, #4]
 801e0fa:	603b      	str	r3, [r7, #0]
      : _Inherited(__tail...), _Base(__head) { }
 801e0fc:	683a      	ldr	r2, [r7, #0]
 801e0fe:	6879      	ldr	r1, [r7, #4]
 801e100:	68f8      	ldr	r0, [r7, #12]
 801e102:	f000 f8c8 	bl	801e296 <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEEC1ERKS1_RKS2_>
 801e106:	68b9      	ldr	r1, [r7, #8]
 801e108:	68f8      	ldr	r0, [r7, #12]
 801e10a:	f000 f8d7 	bl	801e2bc <_ZNSt10_Head_baseILj1ESt12_PlaceholderILi1EELb1EEC1ERKS1_>
 801e10e:	68fb      	ldr	r3, [r7, #12]
 801e110:	4618      	mov	r0, r3
 801e112:	3710      	adds	r7, #16
 801e114:	46bd      	mov	sp, r7
 801e116:	bd80      	pop	{r7, pc}

0801e118 <_ZSt3getILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 801e118:	b580      	push	{r7, lr}
 801e11a:	b082      	sub	sp, #8
 801e11c:	af00      	add	r7, sp, #0
 801e11e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 801e120:	687b      	ldr	r3, [r7, #4]
 801e122:	4618      	mov	r0, r3
 801e124:	f000 f8d6 	bl	801e2d4 <_ZSt12__get_helperILj0EP5IOBusJSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 801e128:	4603      	mov	r3, r0
 801e12a:	4618      	mov	r0, r3
 801e12c:	3708      	adds	r7, #8
 801e12e:	46bd      	mov	sp, r7
 801e130:	bd80      	pop	{r7, pc}

0801e132 <_ZNVKSt3_MuIP5IOBusLb0ELb0EEclIRS1_St5tupleIJOhOPhOmEEEEOT_SC_RT0_>:
	operator()(_CVArg&& __arg, _Tuple&) const volatile
 801e132:	b580      	push	{r7, lr}
 801e134:	b084      	sub	sp, #16
 801e136:	af00      	add	r7, sp, #0
 801e138:	60f8      	str	r0, [r7, #12]
 801e13a:	60b9      	str	r1, [r7, #8]
 801e13c:	607a      	str	r2, [r7, #4]
	{ return std::forward<_CVArg>(__arg); }
 801e13e:	68b8      	ldr	r0, [r7, #8]
 801e140:	f000 f875 	bl	801e22e <_ZSt7forwardIRP5IOBusEOT_RNSt16remove_referenceIS3_E4typeE>
 801e144:	4603      	mov	r3, r0
 801e146:	4618      	mov	r0, r3
 801e148:	3710      	adds	r7, #16
 801e14a:	46bd      	mov	sp, r7
 801e14c:	bd80      	pop	{r7, pc}

0801e14e <_ZSt3getILj1EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 801e14e:	b580      	push	{r7, lr}
 801e150:	b082      	sub	sp, #8
 801e152:	af00      	add	r7, sp, #0
 801e154:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 801e156:	6878      	ldr	r0, [r7, #4]
 801e158:	f000 f8c8 	bl	801e2ec <_ZSt12__get_helperILj1ESt12_PlaceholderILi1EEJS0_ILi2EES0_ILi3EEEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 801e15c:	4603      	mov	r3, r0
 801e15e:	4618      	mov	r0, r3
 801e160:	3708      	adds	r7, #8
 801e162:	46bd      	mov	sp, r7
 801e164:	bd80      	pop	{r7, pc}

0801e166 <_ZSt4moveIRSt5tupleIJOhOPhOmEEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 801e166:	b480      	push	{r7}
 801e168:	b083      	sub	sp, #12
 801e16a:	af00      	add	r7, sp, #0
 801e16c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 801e16e:	687b      	ldr	r3, [r7, #4]
 801e170:	4618      	mov	r0, r3
 801e172:	370c      	adds	r7, #12
 801e174:	46bd      	mov	sp, r7
 801e176:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e17a:	4770      	bx	lr

0801e17c <_ZNVKSt3_MuISt12_PlaceholderILi1EELb0ELb1EEclISt5tupleIJOhOPhOmEEEEONSt9enable_ifIXltLj0EsrSt10tuple_sizeIT_E5valueESt13tuple_elementILj0ESC_EE4type4typeERVKS1_RSC_>:
	operator()(const volatile _Arg&, _Tuple& __tuple) const volatile
 801e17c:	b580      	push	{r7, lr}
 801e17e:	b084      	sub	sp, #16
 801e180:	af00      	add	r7, sp, #0
 801e182:	60f8      	str	r0, [r7, #12]
 801e184:	60b9      	str	r1, [r7, #8]
 801e186:	607a      	str	r2, [r7, #4]
	    ::std::get<(is_placeholder<_Arg>::value - 1)>(std::move(__tuple));
 801e188:	6878      	ldr	r0, [r7, #4]
 801e18a:	f7ff ffec 	bl	801e166 <_ZSt4moveIRSt5tupleIJOhOPhOmEEEONSt16remove_referenceIT_E4typeEOS8_>
 801e18e:	4603      	mov	r3, r0
 801e190:	4618      	mov	r0, r3
 801e192:	f000 f8d0 	bl	801e336 <_ZSt3getILj0EJOhOPhOmEEONSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOS8_>
 801e196:	4603      	mov	r3, r0
	}
 801e198:	4618      	mov	r0, r3
 801e19a:	3710      	adds	r7, #16
 801e19c:	46bd      	mov	sp, r7
 801e19e:	bd80      	pop	{r7, pc}

0801e1a0 <_ZSt3getILj2EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 801e1a0:	b580      	push	{r7, lr}
 801e1a2:	b082      	sub	sp, #8
 801e1a4:	af00      	add	r7, sp, #0
 801e1a6:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 801e1a8:	6878      	ldr	r0, [r7, #4]
 801e1aa:	f000 f8d4 	bl	801e356 <_ZSt12__get_helperILj2ESt12_PlaceholderILi2EEJS0_ILi3EEEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 801e1ae:	4603      	mov	r3, r0
 801e1b0:	4618      	mov	r0, r3
 801e1b2:	3708      	adds	r7, #8
 801e1b4:	46bd      	mov	sp, r7
 801e1b6:	bd80      	pop	{r7, pc}

0801e1b8 <_ZNVKSt3_MuISt12_PlaceholderILi2EELb0ELb1EEclISt5tupleIJOhOPhOmEEEEONSt9enable_ifIXltLj1EsrSt10tuple_sizeIT_E5valueESt13tuple_elementILj1ESC_EE4type4typeERVKS1_RSC_>:
	operator()(const volatile _Arg&, _Tuple& __tuple) const volatile
 801e1b8:	b580      	push	{r7, lr}
 801e1ba:	b084      	sub	sp, #16
 801e1bc:	af00      	add	r7, sp, #0
 801e1be:	60f8      	str	r0, [r7, #12]
 801e1c0:	60b9      	str	r1, [r7, #8]
 801e1c2:	607a      	str	r2, [r7, #4]
	    ::std::get<(is_placeholder<_Arg>::value - 1)>(std::move(__tuple));
 801e1c4:	6878      	ldr	r0, [r7, #4]
 801e1c6:	f7ff ffce 	bl	801e166 <_ZSt4moveIRSt5tupleIJOhOPhOmEEEONSt16remove_referenceIT_E4typeEOS8_>
 801e1ca:	4603      	mov	r3, r0
 801e1cc:	4618      	mov	r0, r3
 801e1ce:	f000 f8e7 	bl	801e3a0 <_ZSt3getILj1EJOhOPhOmEEONSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOS8_>
 801e1d2:	4603      	mov	r3, r0
	}
 801e1d4:	4618      	mov	r0, r3
 801e1d6:	3710      	adds	r7, #16
 801e1d8:	46bd      	mov	sp, r7
 801e1da:	bd80      	pop	{r7, pc}

0801e1dc <_ZSt3getILj3EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 801e1dc:	b580      	push	{r7, lr}
 801e1de:	b082      	sub	sp, #8
 801e1e0:	af00      	add	r7, sp, #0
 801e1e2:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 801e1e4:	6878      	ldr	r0, [r7, #4]
 801e1e6:	f000 f8eb 	bl	801e3c0 <_ZSt12__get_helperILj3ESt12_PlaceholderILi3EEJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>
 801e1ea:	4603      	mov	r3, r0
 801e1ec:	4618      	mov	r0, r3
 801e1ee:	3708      	adds	r7, #8
 801e1f0:	46bd      	mov	sp, r7
 801e1f2:	bd80      	pop	{r7, pc}

0801e1f4 <_ZNVKSt3_MuISt12_PlaceholderILi3EELb0ELb1EEclISt5tupleIJOhOPhOmEEEEONSt9enable_ifIXltLj2EsrSt10tuple_sizeIT_E5valueESt13tuple_elementILj2ESC_EE4type4typeERVKS1_RSC_>:
	operator()(const volatile _Arg&, _Tuple& __tuple) const volatile
 801e1f4:	b580      	push	{r7, lr}
 801e1f6:	b084      	sub	sp, #16
 801e1f8:	af00      	add	r7, sp, #0
 801e1fa:	60f8      	str	r0, [r7, #12]
 801e1fc:	60b9      	str	r1, [r7, #8]
 801e1fe:	607a      	str	r2, [r7, #4]
	    ::std::get<(is_placeholder<_Arg>::value - 1)>(std::move(__tuple));
 801e200:	6878      	ldr	r0, [r7, #4]
 801e202:	f7ff ffb0 	bl	801e166 <_ZSt4moveIRSt5tupleIJOhOPhOmEEEONSt16remove_referenceIT_E4typeEOS8_>
 801e206:	4603      	mov	r3, r0
 801e208:	4618      	mov	r0, r3
 801e20a:	f000 f8fe 	bl	801e40a <_ZSt3getILj2EJOhOPhOmEEONSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOS8_>
 801e20e:	4603      	mov	r3, r0
	}
 801e210:	4618      	mov	r0, r3
 801e212:	3710      	adds	r7, #16
 801e214:	46bd      	mov	sp, r7
 801e216:	bd80      	pop	{r7, pc}

0801e218 <_ZSt7forwardIRM5IOBusFvhPhmEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801e218:	b480      	push	{r7}
 801e21a:	b083      	sub	sp, #12
 801e21c:	af00      	add	r7, sp, #0
 801e21e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801e220:	687b      	ldr	r3, [r7, #4]
 801e222:	4618      	mov	r0, r3
 801e224:	370c      	adds	r7, #12
 801e226:	46bd      	mov	sp, r7
 801e228:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e22c:	4770      	bx	lr

0801e22e <_ZSt7forwardIRP5IOBusEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801e22e:	b480      	push	{r7}
 801e230:	b083      	sub	sp, #12
 801e232:	af00      	add	r7, sp, #0
 801e234:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801e236:	687b      	ldr	r3, [r7, #4]
 801e238:	4618      	mov	r0, r3
 801e23a:	370c      	adds	r7, #12
 801e23c:	46bd      	mov	sp, r7
 801e23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e242:	4770      	bx	lr

0801e244 <_ZSt8__invokeIRM5IOBusFvhPhmEJRPS0_hS1_mEENSt15__invoke_resultIT_JDpT0_EE4typeEOS8_DpOS9_>:
    { return (*std::forward<_Tp>(__t)).*__f; }

  /// Invoke a callable object.
  template<typename _Callable, typename... _Args>
    constexpr typename __invoke_result<_Callable, _Args...>::type
    __invoke(_Callable&& __fn, _Args&&... __args)
 801e244:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e248:	b089      	sub	sp, #36	; 0x24
 801e24a:	af02      	add	r7, sp, #8
 801e24c:	60f8      	str	r0, [r7, #12]
 801e24e:	60b9      	str	r1, [r7, #8]
 801e250:	607a      	str	r2, [r7, #4]
 801e252:	603b      	str	r3, [r7, #0]
    noexcept(__is_nothrow_invocable<_Callable, _Args...>::value)
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 801e254:	68f8      	ldr	r0, [r7, #12]
 801e256:	f7ff ffdf 	bl	801e218 <_ZSt7forwardIRM5IOBusFvhPhmEEOT_RNSt16remove_referenceIS5_E4typeE>
 801e25a:	4605      	mov	r5, r0
 801e25c:	68b8      	ldr	r0, [r7, #8]
 801e25e:	f7ff ffe6 	bl	801e22e <_ZSt7forwardIRP5IOBusEOT_RNSt16remove_referenceIS3_E4typeE>
 801e262:	4606      	mov	r6, r0
 801e264:	6878      	ldr	r0, [r7, #4]
 801e266:	f7ff fc52 	bl	801db0e <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 801e26a:	4680      	mov	r8, r0
 801e26c:	6838      	ldr	r0, [r7, #0]
 801e26e:	f7ff fc59 	bl	801db24 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 801e272:	4604      	mov	r4, r0
 801e274:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801e276:	f7ff fc60 	bl	801db3a <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 801e27a:	4603      	mov	r3, r0
 801e27c:	9301      	str	r3, [sp, #4]
 801e27e:	9400      	str	r4, [sp, #0]
 801e280:	4643      	mov	r3, r8
 801e282:	4632      	mov	r2, r6
 801e284:	4629      	mov	r1, r5
 801e286:	4648      	mov	r0, r9
 801e288:	f000 f8cf 	bl	801e42a <_ZSt13__invoke_implIvRM5IOBusFvhPhmERPS0_JhS1_mEET_St21__invoke_memfun_derefOT0_OT1_DpOT2_>
					std::forward<_Args>(__args)...);
 801e28c:	bf00      	nop
    }
 801e28e:	371c      	adds	r7, #28
 801e290:	46bd      	mov	sp, r7
 801e292:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801e296 <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEEC1ERKS1_RKS2_>:
      constexpr _Tuple_impl(const _Head& __head, const _Tail&... __tail)
 801e296:	b580      	push	{r7, lr}
 801e298:	b084      	sub	sp, #16
 801e29a:	af00      	add	r7, sp, #0
 801e29c:	60f8      	str	r0, [r7, #12]
 801e29e:	60b9      	str	r1, [r7, #8]
 801e2a0:	607a      	str	r2, [r7, #4]
      : _Inherited(__tail...), _Base(__head) { }
 801e2a2:	6879      	ldr	r1, [r7, #4]
 801e2a4:	68f8      	ldr	r0, [r7, #12]
 801e2a6:	f000 f8fa 	bl	801e49e <_ZNSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEEC1ERKS1_>
 801e2aa:	68b9      	ldr	r1, [r7, #8]
 801e2ac:	68f8      	ldr	r0, [r7, #12]
 801e2ae:	f000 f904 	bl	801e4ba <_ZNSt10_Head_baseILj2ESt12_PlaceholderILi2EELb1EEC1ERKS1_>
 801e2b2:	68fb      	ldr	r3, [r7, #12]
 801e2b4:	4618      	mov	r0, r3
 801e2b6:	3710      	adds	r7, #16
 801e2b8:	46bd      	mov	sp, r7
 801e2ba:	bd80      	pop	{r7, pc}

0801e2bc <_ZNSt10_Head_baseILj1ESt12_PlaceholderILi1EELb1EEC1ERKS1_>:
      constexpr _Head_base(const _Head& __h)
 801e2bc:	b480      	push	{r7}
 801e2be:	b083      	sub	sp, #12
 801e2c0:	af00      	add	r7, sp, #0
 801e2c2:	6078      	str	r0, [r7, #4]
 801e2c4:	6039      	str	r1, [r7, #0]
      : _Head(__h) { }
 801e2c6:	687b      	ldr	r3, [r7, #4]
 801e2c8:	4618      	mov	r0, r3
 801e2ca:	370c      	adds	r7, #12
 801e2cc:	46bd      	mov	sp, r7
 801e2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e2d2:	4770      	bx	lr

0801e2d4 <_ZSt12__get_helperILj0EP5IOBusJSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 801e2d4:	b580      	push	{r7, lr}
 801e2d6:	b082      	sub	sp, #8
 801e2d8:	af00      	add	r7, sp, #0
 801e2da:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 801e2dc:	6878      	ldr	r0, [r7, #4]
 801e2de:	f7ff fbb3 	bl	801da48 <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEE7_M_headERS6_>
 801e2e2:	4603      	mov	r3, r0
 801e2e4:	4618      	mov	r0, r3
 801e2e6:	3708      	adds	r7, #8
 801e2e8:	46bd      	mov	sp, r7
 801e2ea:	bd80      	pop	{r7, pc}

0801e2ec <_ZSt12__get_helperILj1ESt12_PlaceholderILi1EEJS0_ILi2EES0_ILi3EEEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 801e2ec:	b580      	push	{r7, lr}
 801e2ee:	b082      	sub	sp, #8
 801e2f0:	af00      	add	r7, sp, #0
 801e2f2:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 801e2f4:	6878      	ldr	r0, [r7, #4]
 801e2f6:	f7ff fa86 	bl	801d806 <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEE7_M_headERS4_>
 801e2fa:	4603      	mov	r3, r0
 801e2fc:	4618      	mov	r0, r3
 801e2fe:	3708      	adds	r7, #8
 801e300:	46bd      	mov	sp, r7
 801e302:	bd80      	pop	{r7, pc}

0801e304 <_ZSt3getILj0EJOhOPhOmEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 801e304:	b580      	push	{r7, lr}
 801e306:	b082      	sub	sp, #8
 801e308:	af00      	add	r7, sp, #0
 801e30a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 801e30c:	687b      	ldr	r3, [r7, #4]
 801e30e:	4618      	mov	r0, r3
 801e310:	f000 f805 	bl	801e31e <_ZSt12__get_helperILj0EOhJOPhOmEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 801e314:	4603      	mov	r3, r0
 801e316:	4618      	mov	r0, r3
 801e318:	3708      	adds	r7, #8
 801e31a:	46bd      	mov	sp, r7
 801e31c:	bd80      	pop	{r7, pc}

0801e31e <_ZSt12__get_helperILj0EOhJOPhOmEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 801e31e:	b580      	push	{r7, lr}
 801e320:	b082      	sub	sp, #8
 801e322:	af00      	add	r7, sp, #0
 801e324:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 801e326:	6878      	ldr	r0, [r7, #4]
 801e328:	f7ff fe74 	bl	801e014 <_ZNSt11_Tuple_implILj0EJOhOPhOmEE7_M_headERS4_>
 801e32c:	4603      	mov	r3, r0
 801e32e:	4618      	mov	r0, r3
 801e330:	3708      	adds	r7, #8
 801e332:	46bd      	mov	sp, r7
 801e334:	bd80      	pop	{r7, pc}

0801e336 <_ZSt3getILj0EJOhOPhOmEEONSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOS8_>:
    get(tuple<_Elements...>&& __t) noexcept
 801e336:	b580      	push	{r7, lr}
 801e338:	b082      	sub	sp, #8
 801e33a:	af00      	add	r7, sp, #0
 801e33c:	6078      	str	r0, [r7, #4]
      return std::forward<__element_type&&>(std::get<__i>(__t));
 801e33e:	6878      	ldr	r0, [r7, #4]
 801e340:	f7ff ffe0 	bl	801e304 <_ZSt3getILj0EJOhOPhOmEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 801e344:	4603      	mov	r3, r0
 801e346:	4618      	mov	r0, r3
 801e348:	f7ff fe7e 	bl	801e048 <_ZSt7forwardIOhEOT_RNSt16remove_referenceIS1_E4typeE>
 801e34c:	4603      	mov	r3, r0
    }
 801e34e:	4618      	mov	r0, r3
 801e350:	3708      	adds	r7, #8
 801e352:	46bd      	mov	sp, r7
 801e354:	bd80      	pop	{r7, pc}

0801e356 <_ZSt12__get_helperILj2ESt12_PlaceholderILi2EEJS0_ILi3EEEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 801e356:	b580      	push	{r7, lr}
 801e358:	b082      	sub	sp, #8
 801e35a:	af00      	add	r7, sp, #0
 801e35c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 801e35e:	6878      	ldr	r0, [r7, #4]
 801e360:	f7ff f9f7 	bl	801d752 <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEE7_M_headERS3_>
 801e364:	4603      	mov	r3, r0
 801e366:	4618      	mov	r0, r3
 801e368:	3708      	adds	r7, #8
 801e36a:	46bd      	mov	sp, r7
 801e36c:	bd80      	pop	{r7, pc}

0801e36e <_ZSt3getILj1EJOhOPhOmEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 801e36e:	b580      	push	{r7, lr}
 801e370:	b082      	sub	sp, #8
 801e372:	af00      	add	r7, sp, #0
 801e374:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 801e376:	687b      	ldr	r3, [r7, #4]
 801e378:	4618      	mov	r0, r3
 801e37a:	f000 f805 	bl	801e388 <_ZSt12__get_helperILj1EOPhJOmEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 801e37e:	4603      	mov	r3, r0
 801e380:	4618      	mov	r0, r3
 801e382:	3708      	adds	r7, #8
 801e384:	46bd      	mov	sp, r7
 801e386:	bd80      	pop	{r7, pc}

0801e388 <_ZSt12__get_helperILj1EOPhJOmEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 801e388:	b580      	push	{r7, lr}
 801e38a:	b082      	sub	sp, #8
 801e38c:	af00      	add	r7, sp, #0
 801e38e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 801e390:	6878      	ldr	r0, [r7, #4]
 801e392:	f7ff fd61 	bl	801de58 <_ZNSt11_Tuple_implILj1EJOPhOmEE7_M_headERS3_>
 801e396:	4603      	mov	r3, r0
 801e398:	4618      	mov	r0, r3
 801e39a:	3708      	adds	r7, #8
 801e39c:	46bd      	mov	sp, r7
 801e39e:	bd80      	pop	{r7, pc}

0801e3a0 <_ZSt3getILj1EJOhOPhOmEEONSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOS8_>:
    get(tuple<_Elements...>&& __t) noexcept
 801e3a0:	b580      	push	{r7, lr}
 801e3a2:	b082      	sub	sp, #8
 801e3a4:	af00      	add	r7, sp, #0
 801e3a6:	6078      	str	r0, [r7, #4]
      return std::forward<__element_type&&>(std::get<__i>(__t));
 801e3a8:	6878      	ldr	r0, [r7, #4]
 801e3aa:	f7ff ffe0 	bl	801e36e <_ZSt3getILj1EJOhOPhOmEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 801e3ae:	4603      	mov	r3, r0
 801e3b0:	4618      	mov	r0, r3
 801e3b2:	f7ff fd6b 	bl	801de8c <_ZSt7forwardIOPhEOT_RNSt16remove_referenceIS2_E4typeE>
 801e3b6:	4603      	mov	r3, r0
    }
 801e3b8:	4618      	mov	r0, r3
 801e3ba:	3708      	adds	r7, #8
 801e3bc:	46bd      	mov	sp, r7
 801e3be:	bd80      	pop	{r7, pc}

0801e3c0 <_ZSt12__get_helperILj3ESt12_PlaceholderILi3EEJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 801e3c0:	b580      	push	{r7, lr}
 801e3c2:	b082      	sub	sp, #8
 801e3c4:	af00      	add	r7, sp, #0
 801e3c6:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 801e3c8:	6878      	ldr	r0, [r7, #4]
 801e3ca:	f7ff f97f 	bl	801d6cc <_ZNSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEE7_M_headERS2_>
 801e3ce:	4603      	mov	r3, r0
 801e3d0:	4618      	mov	r0, r3
 801e3d2:	3708      	adds	r7, #8
 801e3d4:	46bd      	mov	sp, r7
 801e3d6:	bd80      	pop	{r7, pc}

0801e3d8 <_ZSt3getILj2EJOhOPhOmEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 801e3d8:	b580      	push	{r7, lr}
 801e3da:	b082      	sub	sp, #8
 801e3dc:	af00      	add	r7, sp, #0
 801e3de:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 801e3e0:	687b      	ldr	r3, [r7, #4]
 801e3e2:	4618      	mov	r0, r3
 801e3e4:	f000 f805 	bl	801e3f2 <_ZSt12__get_helperILj2EOmJEERT0_RSt11_Tuple_implIXT_EJS1_DpT1_EE>
 801e3e8:	4603      	mov	r3, r0
 801e3ea:	4618      	mov	r0, r3
 801e3ec:	3708      	adds	r7, #8
 801e3ee:	46bd      	mov	sp, r7
 801e3f0:	bd80      	pop	{r7, pc}

0801e3f2 <_ZSt12__get_helperILj2EOmJEERT0_RSt11_Tuple_implIXT_EJS1_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 801e3f2:	b580      	push	{r7, lr}
 801e3f4:	b082      	sub	sp, #8
 801e3f6:	af00      	add	r7, sp, #0
 801e3f8:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 801e3fa:	6878      	ldr	r0, [r7, #4]
 801e3fc:	f7ff fd08 	bl	801de10 <_ZNSt11_Tuple_implILj2EJOmEE7_M_headERS1_>
 801e400:	4603      	mov	r3, r0
 801e402:	4618      	mov	r0, r3
 801e404:	3708      	adds	r7, #8
 801e406:	46bd      	mov	sp, r7
 801e408:	bd80      	pop	{r7, pc}

0801e40a <_ZSt3getILj2EJOhOPhOmEEONSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOS8_>:
    get(tuple<_Elements...>&& __t) noexcept
 801e40a:	b580      	push	{r7, lr}
 801e40c:	b082      	sub	sp, #8
 801e40e:	af00      	add	r7, sp, #0
 801e410:	6078      	str	r0, [r7, #4]
      return std::forward<__element_type&&>(std::get<__i>(__t));
 801e412:	6878      	ldr	r0, [r7, #4]
 801e414:	f7ff ffe0 	bl	801e3d8 <_ZSt3getILj2EJOhOPhOmEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 801e418:	4603      	mov	r3, r0
 801e41a:	4618      	mov	r0, r3
 801e41c:	f7ff fd11 	bl	801de42 <_ZSt7forwardIOmEOT_RNSt16remove_referenceIS1_E4typeE>
 801e420:	4603      	mov	r3, r0
    }
 801e422:	4618      	mov	r0, r3
 801e424:	3708      	adds	r7, #8
 801e426:	46bd      	mov	sp, r7
 801e428:	bd80      	pop	{r7, pc}

0801e42a <_ZSt13__invoke_implIvRM5IOBusFvhPhmERPS0_JhS1_mEET_St21__invoke_memfun_derefOT0_OT1_DpOT2_>:
    __invoke_impl(__invoke_memfun_deref, _MemFun&& __f, _Tp&& __t,
 801e42a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e42c:	b087      	sub	sp, #28
 801e42e:	af00      	add	r7, sp, #0
 801e430:	7538      	strb	r0, [r7, #20]
 801e432:	6139      	str	r1, [r7, #16]
 801e434:	60fa      	str	r2, [r7, #12]
 801e436:	60bb      	str	r3, [r7, #8]
      return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
 801e438:	68f8      	ldr	r0, [r7, #12]
 801e43a:	f7ff fef8 	bl	801e22e <_ZSt7forwardIRP5IOBusEOT_RNSt16remove_referenceIS3_E4typeE>
 801e43e:	4603      	mov	r3, r0
 801e440:	681b      	ldr	r3, [r3, #0]
 801e442:	693a      	ldr	r2, [r7, #16]
 801e444:	6852      	ldr	r2, [r2, #4]
 801e446:	1052      	asrs	r2, r2, #1
 801e448:	189d      	adds	r5, r3, r2
 801e44a:	693a      	ldr	r2, [r7, #16]
 801e44c:	6852      	ldr	r2, [r2, #4]
 801e44e:	f002 0201 	and.w	r2, r2, #1
 801e452:	2a00      	cmp	r2, #0
 801e454:	d102      	bne.n	801e45c <_ZSt13__invoke_implIvRM5IOBusFvhPhmERPS0_JhS1_mEET_St21__invoke_memfun_derefOT0_OT1_DpOT2_+0x32>
 801e456:	693b      	ldr	r3, [r7, #16]
 801e458:	681c      	ldr	r4, [r3, #0]
 801e45a:	e008      	b.n	801e46e <_ZSt13__invoke_implIvRM5IOBusFvhPhmERPS0_JhS1_mEET_St21__invoke_memfun_derefOT0_OT1_DpOT2_+0x44>
 801e45c:	693a      	ldr	r2, [r7, #16]
 801e45e:	6852      	ldr	r2, [r2, #4]
 801e460:	1052      	asrs	r2, r2, #1
 801e462:	4413      	add	r3, r2
 801e464:	681b      	ldr	r3, [r3, #0]
 801e466:	693a      	ldr	r2, [r7, #16]
 801e468:	6812      	ldr	r2, [r2, #0]
 801e46a:	4413      	add	r3, r2
 801e46c:	681c      	ldr	r4, [r3, #0]
 801e46e:	68b8      	ldr	r0, [r7, #8]
 801e470:	f7ff fb4d 	bl	801db0e <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 801e474:	4603      	mov	r3, r0
 801e476:	781e      	ldrb	r6, [r3, #0]
 801e478:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801e47a:	f7ff fb53 	bl	801db24 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 801e47e:	4603      	mov	r3, r0
 801e480:	681b      	ldr	r3, [r3, #0]
 801e482:	607b      	str	r3, [r7, #4]
 801e484:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801e486:	f7ff fb58 	bl	801db3a <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 801e48a:	4603      	mov	r3, r0
 801e48c:	681b      	ldr	r3, [r3, #0]
 801e48e:	687a      	ldr	r2, [r7, #4]
 801e490:	4631      	mov	r1, r6
 801e492:	4628      	mov	r0, r5
 801e494:	47a0      	blx	r4
 801e496:	bf00      	nop
    }
 801e498:	371c      	adds	r7, #28
 801e49a:	46bd      	mov	sp, r7
 801e49c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801e49e <_ZNSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEEC1ERKS1_>:
      constexpr _Tuple_impl(const _Head& __head)
 801e49e:	b580      	push	{r7, lr}
 801e4a0:	b082      	sub	sp, #8
 801e4a2:	af00      	add	r7, sp, #0
 801e4a4:	6078      	str	r0, [r7, #4]
 801e4a6:	6039      	str	r1, [r7, #0]
      : _Base(__head) { }
 801e4a8:	6839      	ldr	r1, [r7, #0]
 801e4aa:	6878      	ldr	r0, [r7, #4]
 801e4ac:	f000 f811 	bl	801e4d2 <_ZNSt10_Head_baseILj3ESt12_PlaceholderILi3EELb1EEC1ERKS1_>
 801e4b0:	687b      	ldr	r3, [r7, #4]
 801e4b2:	4618      	mov	r0, r3
 801e4b4:	3708      	adds	r7, #8
 801e4b6:	46bd      	mov	sp, r7
 801e4b8:	bd80      	pop	{r7, pc}

0801e4ba <_ZNSt10_Head_baseILj2ESt12_PlaceholderILi2EELb1EEC1ERKS1_>:
      constexpr _Head_base(const _Head& __h)
 801e4ba:	b480      	push	{r7}
 801e4bc:	b083      	sub	sp, #12
 801e4be:	af00      	add	r7, sp, #0
 801e4c0:	6078      	str	r0, [r7, #4]
 801e4c2:	6039      	str	r1, [r7, #0]
      : _Head(__h) { }
 801e4c4:	687b      	ldr	r3, [r7, #4]
 801e4c6:	4618      	mov	r0, r3
 801e4c8:	370c      	adds	r7, #12
 801e4ca:	46bd      	mov	sp, r7
 801e4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e4d0:	4770      	bx	lr

0801e4d2 <_ZNSt10_Head_baseILj3ESt12_PlaceholderILi3EELb1EEC1ERKS1_>:
      constexpr _Head_base(const _Head& __h)
 801e4d2:	b480      	push	{r7}
 801e4d4:	b083      	sub	sp, #12
 801e4d6:	af00      	add	r7, sp, #0
 801e4d8:	6078      	str	r0, [r7, #4]
 801e4da:	6039      	str	r1, [r7, #0]
      : _Head(__h) { }
 801e4dc:	687b      	ldr	r3, [r7, #4]
 801e4de:	4618      	mov	r0, r3
 801e4e0:	370c      	adds	r7, #12
 801e4e2:	46bd      	mov	sp, r7
 801e4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e4e8:	4770      	bx	lr
	...

0801e4ec <_ZN5IOBusD1Ev>:

#include "MessageBus.h"
#include "IODriver.h"


class IOBus : public MessageBus {
 801e4ec:	b580      	push	{r7, lr}
 801e4ee:	b082      	sub	sp, #8
 801e4f0:	af00      	add	r7, sp, #0
 801e4f2:	6078      	str	r0, [r7, #4]
 801e4f4:	4a05      	ldr	r2, [pc, #20]	; (801e50c <_ZN5IOBusD1Ev+0x20>)
 801e4f6:	687b      	ldr	r3, [r7, #4]
 801e4f8:	601a      	str	r2, [r3, #0]
 801e4fa:	687b      	ldr	r3, [r7, #4]
 801e4fc:	4618      	mov	r0, r3
 801e4fe:	f7fe ff3b 	bl	801d378 <_ZN10MessageBusD1Ev>
 801e502:	687b      	ldr	r3, [r7, #4]
 801e504:	4618      	mov	r0, r3
 801e506:	3708      	adds	r7, #8
 801e508:	46bd      	mov	sp, r7
 801e50a:	bd80      	pop	{r7, pc}
 801e50c:	080270e4 	.word	0x080270e4

0801e510 <_ZN5IOBusD0Ev>:
 801e510:	b580      	push	{r7, lr}
 801e512:	b082      	sub	sp, #8
 801e514:	af00      	add	r7, sp, #0
 801e516:	6078      	str	r0, [r7, #4]
 801e518:	6878      	ldr	r0, [r7, #4]
 801e51a:	f7ff ffe7 	bl	801e4ec <_ZN5IOBusD1Ev>
 801e51e:	f644 0114 	movw	r1, #18452	; 0x4814
 801e522:	6878      	ldr	r0, [r7, #4]
 801e524:	f001 fe4b 	bl	80201be <_ZdlPvj>
 801e528:	687b      	ldr	r3, [r7, #4]
 801e52a:	4618      	mov	r0, r3
 801e52c:	3708      	adds	r7, #8
 801e52e:	46bd      	mov	sp, r7
 801e530:	bd80      	pop	{r7, pc}
	...

0801e534 <_ZN12LWIPClientIOC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt>:

/*
 * Creates an IODriver interface using the given port number.
 * This constructor invocation is a light operation.
 */
LWIPClientIO::LWIPClientIO(std::string address_str, uint16_t port) : address_str(address_str) {
 801e534:	b580      	push	{r7, lr}
 801e536:	b084      	sub	sp, #16
 801e538:	af00      	add	r7, sp, #0
 801e53a:	60f8      	str	r0, [r7, #12]
 801e53c:	60b9      	str	r1, [r7, #8]
 801e53e:	4613      	mov	r3, r2
 801e540:	80fb      	strh	r3, [r7, #6]
 801e542:	68fb      	ldr	r3, [r7, #12]
 801e544:	4618      	mov	r0, r3
 801e546:	f7fe fce1 	bl	801cf0c <_ZN8IODriverC1Ev>
 801e54a:	4a19      	ldr	r2, [pc, #100]	; (801e5b0 <_ZN12LWIPClientIOC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt+0x7c>)
 801e54c:	68fb      	ldr	r3, [r7, #12]
 801e54e:	601a      	str	r2, [r3, #0]
 801e550:	68fb      	ldr	r3, [r7, #12]
 801e552:	3304      	adds	r3, #4
 801e554:	68b9      	ldr	r1, [r7, #8]
 801e556:	4618      	mov	r0, r3
 801e558:	f001 ffe4 	bl	8020524 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 801e55c:	68fb      	ldr	r3, [r7, #12]
 801e55e:	3334      	adds	r3, #52	; 0x34
 801e560:	4618      	mov	r0, r3
 801e562:	f000 f9a5 	bl	801e8b0 <_ZNSt8functionIFvhPhmEEC1Ev>
	this->address = { 0 };
 801e566:	68fb      	ldr	r3, [r7, #12]
 801e568:	331c      	adds	r3, #28
 801e56a:	2200      	movs	r2, #0
 801e56c:	601a      	str	r2, [r3, #0]
 801e56e:	605a      	str	r2, [r3, #4]
 801e570:	609a      	str	r2, [r3, #8]
 801e572:	60da      	str	r2, [r3, #12]
	this->socket_id = 0;
 801e574:	68fb      	ldr	r3, [r7, #12]
 801e576:	2200      	movs	r2, #0
 801e578:	62da      	str	r2, [r3, #44]	; 0x2c
	this->connected = false;
 801e57a:	68fb      	ldr	r3, [r7, #12]
 801e57c:	2200      	movs	r2, #0
 801e57e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	this->receiver = nullptr;
 801e582:	68fb      	ldr	r3, [r7, #12]
 801e584:	3334      	adds	r3, #52	; 0x34
 801e586:	2100      	movs	r1, #0
 801e588:	4618      	mov	r0, r3
 801e58a:	f000 f99e 	bl	801e8ca <_ZNSt8functionIFvhPhmEEaSEDn>

	address.sin_family = AF_INET;
 801e58e:	68fb      	ldr	r3, [r7, #12]
 801e590:	2202      	movs	r2, #2
 801e592:	775a      	strb	r2, [r3, #29]
	address.sin_port = htons(port);
 801e594:	88fb      	ldrh	r3, [r7, #6]
 801e596:	4618      	mov	r0, r3
 801e598:	f7f1 fbb0 	bl	800fcfc <lwip_htons>
 801e59c:	4603      	mov	r3, r0
 801e59e:	461a      	mov	r2, r3
 801e5a0:	68fb      	ldr	r3, [r7, #12]
 801e5a2:	83da      	strh	r2, [r3, #30]
}
 801e5a4:	68fb      	ldr	r3, [r7, #12]
 801e5a6:	4618      	mov	r0, r3
 801e5a8:	3710      	adds	r7, #16
 801e5aa:	46bd      	mov	sp, r7
 801e5ac:	bd80      	pop	{r7, pc}
 801e5ae:	bf00      	nop
 801e5b0:	080271fc 	.word	0x080271fc

0801e5b4 <_ZN12LWIPClientIOD1Ev>:

/*
 * Releases IO resources
 */
LWIPClientIO::~LWIPClientIO() {
 801e5b4:	b580      	push	{r7, lr}
 801e5b6:	b082      	sub	sp, #8
 801e5b8:	af00      	add	r7, sp, #0
 801e5ba:	6078      	str	r0, [r7, #4]
 801e5bc:	4a0c      	ldr	r2, [pc, #48]	; (801e5f0 <_ZN12LWIPClientIOD1Ev+0x3c>)
 801e5be:	687b      	ldr	r3, [r7, #4]
 801e5c0:	601a      	str	r2, [r3, #0]
	disconnectClient();
 801e5c2:	6878      	ldr	r0, [r7, #4]
 801e5c4:	f000 f896 	bl	801e6f4 <_ZN12LWIPClientIO16disconnectClientEv>
LWIPClientIO::~LWIPClientIO() {
 801e5c8:	687b      	ldr	r3, [r7, #4]
 801e5ca:	3334      	adds	r3, #52	; 0x34
 801e5cc:	4618      	mov	r0, r3
 801e5ce:	f7fe fc8f 	bl	801cef0 <_ZNSt8functionIFvhPhmEED1Ev>
 801e5d2:	687b      	ldr	r3, [r7, #4]
 801e5d4:	3304      	adds	r3, #4
 801e5d6:	4618      	mov	r0, r3
 801e5d8:	f001 ff77 	bl	80204ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 801e5dc:	687b      	ldr	r3, [r7, #4]
 801e5de:	4618      	mov	r0, r3
 801e5e0:	f7fe fc66 	bl	801ceb0 <_ZN8IODriverD1Ev>
}
 801e5e4:	687b      	ldr	r3, [r7, #4]
 801e5e6:	4618      	mov	r0, r3
 801e5e8:	3708      	adds	r7, #8
 801e5ea:	46bd      	mov	sp, r7
 801e5ec:	bd80      	pop	{r7, pc}
 801e5ee:	bf00      	nop
 801e5f0:	080271fc 	.word	0x080271fc

0801e5f4 <_ZN12LWIPClientIOD0Ev>:
LWIPClientIO::~LWIPClientIO() {
 801e5f4:	b580      	push	{r7, lr}
 801e5f6:	b082      	sub	sp, #8
 801e5f8:	af00      	add	r7, sp, #0
 801e5fa:	6078      	str	r0, [r7, #4]
}
 801e5fc:	6878      	ldr	r0, [r7, #4]
 801e5fe:	f7ff ffd9 	bl	801e5b4 <_ZN12LWIPClientIOD1Ev>
 801e602:	2144      	movs	r1, #68	; 0x44
 801e604:	6878      	ldr	r0, [r7, #4]
 801e606:	f001 fdda 	bl	80201be <_ZdlPvj>
 801e60a:	687b      	ldr	r3, [r7, #4]
 801e60c:	4618      	mov	r0, r3
 801e60e:	3708      	adds	r7, #8
 801e610:	46bd      	mov	sp, r7
 801e612:	bd80      	pop	{r7, pc}

0801e614 <_ZN12LWIPClientIO13connectClientEv>:
 * Creates a client socket and connects it to a remote server
 * through the ip address and port specified by the constructor.
 * This operation is heavy and may fail.
 * Check the returned error code and set breakpoints accordingly if needed.
 */
int8_t LWIPClientIO::connectClient() {
 801e614:	b590      	push	{r4, r7, lr}
 801e616:	b085      	sub	sp, #20
 801e618:	af00      	add	r7, sp, #0
 801e61a:	6078      	str	r0, [r7, #4]

	if(connected) {
 801e61c:	687b      	ldr	r3, [r7, #4]
 801e61e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801e622:	2b00      	cmp	r3, #0
 801e624:	d002      	beq.n	801e62c <_ZN12LWIPClientIO13connectClientEv+0x18>
		return -1; // Server already connected
 801e626:	f04f 33ff 	mov.w	r3, #4294967295
 801e62a:	e05b      	b.n	801e6e4 <_ZN12LWIPClientIO13connectClientEv+0xd0>
	}

	int32_t result;

	// Creates the socket instance
	socket_id = lwip_socket(AF_INET, SOCK_STREAM, 0);
 801e62c:	2200      	movs	r2, #0
 801e62e:	2101      	movs	r1, #1
 801e630:	2002      	movs	r0, #2
 801e632:	f7f6 fded 	bl	8015210 <lwip_socket>
 801e636:	4603      	mov	r3, r0
 801e638:	461a      	mov	r2, r3
 801e63a:	687b      	ldr	r3, [r7, #4]
 801e63c:	62da      	str	r2, [r3, #44]	; 0x2c
	if(socket_id < 0) {
		return -2;
	}

	//adds destination IP address to the remote socket's address
	if(inet_pton(AF_INET, address_str.c_str(), &address.sin_addr) <= 0) {
 801e63e:	687b      	ldr	r3, [r7, #4]
 801e640:	3304      	adds	r3, #4
 801e642:	4618      	mov	r0, r3
 801e644:	f001 ff47 	bl	80204d6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 801e648:	4601      	mov	r1, r0
 801e64a:	687b      	ldr	r3, [r7, #4]
 801e64c:	3320      	adds	r3, #32
 801e64e:	461a      	mov	r2, r3
 801e650:	2002      	movs	r0, #2
 801e652:	f7f7 f861 	bl	8015718 <lwip_inet_pton>
 801e656:	4603      	mov	r3, r0
 801e658:	2b00      	cmp	r3, #0
 801e65a:	bfd4      	ite	le
 801e65c:	2301      	movle	r3, #1
 801e65e:	2300      	movgt	r3, #0
 801e660:	b2db      	uxtb	r3, r3
 801e662:	2b00      	cmp	r3, #0
 801e664:	d007      	beq.n	801e676 <_ZN12LWIPClientIO13connectClientEv+0x62>
		lwip_close(socket_id);
 801e666:	687b      	ldr	r3, [r7, #4]
 801e668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e66a:	4618      	mov	r0, r3
 801e66c:	f7f6 f8bc 	bl	80147e8 <lwip_close>
		return -3;
 801e670:	f06f 0302 	mvn.w	r3, #2
 801e674:	e036      	b.n	801e6e4 <_ZN12LWIPClientIO13connectClientEv+0xd0>
	}

	// Binds the client socket to the remote server socket
	result = lwip_connect(socket_id, (sockaddr*) &address, sizeof(address));
 801e676:	687b      	ldr	r3, [r7, #4]
 801e678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e67a:	4618      	mov	r0, r3
 801e67c:	687b      	ldr	r3, [r7, #4]
 801e67e:	331c      	adds	r3, #28
 801e680:	2210      	movs	r2, #16
 801e682:	4619      	mov	r1, r3
 801e684:	f7f6 f906 	bl	8014894 <lwip_connect>
 801e688:	60f8      	str	r0, [r7, #12]
	if(result < 0) {
 801e68a:	68fb      	ldr	r3, [r7, #12]
 801e68c:	2b00      	cmp	r3, #0
 801e68e:	da07      	bge.n	801e6a0 <_ZN12LWIPClientIO13connectClientEv+0x8c>
		lwip_close(socket_id);
 801e690:	687b      	ldr	r3, [r7, #4]
 801e692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e694:	4618      	mov	r0, r3
 801e696:	f7f6 f8a7 	bl	80147e8 <lwip_close>
		return -4;
 801e69a:	f06f 0303 	mvn.w	r3, #3
 801e69e:	e021      	b.n	801e6e4 <_ZN12LWIPClientIO13connectClientEv+0xd0>
	}


	lwip_fcntl(socket_id, F_SETFL, lwip_fcntl(socket_id, F_GETFL, 0) | O_NONBLOCK);
 801e6a0:	687b      	ldr	r3, [r7, #4]
 801e6a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e6a4:	461c      	mov	r4, r3
 801e6a6:	687b      	ldr	r3, [r7, #4]
 801e6a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e6aa:	2200      	movs	r2, #0
 801e6ac:	2103      	movs	r1, #3
 801e6ae:	4618      	mov	r0, r3
 801e6b0:	f7f6 ff8a 	bl	80155c8 <lwip_fcntl>
 801e6b4:	4603      	mov	r3, r0
 801e6b6:	f043 0301 	orr.w	r3, r3, #1
 801e6ba:	461a      	mov	r2, r3
 801e6bc:	2104      	movs	r1, #4
 801e6be:	4620      	mov	r0, r4
 801e6c0:	f7f6 ff82 	bl	80155c8 <lwip_fcntl>

	this->connected = true;
 801e6c4:	687b      	ldr	r3, [r7, #4]
 801e6c6:	2201      	movs	r2, #1
 801e6c8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	console.printf("[RoCo] [Client@%d] Client connected\r\n", ntohs(address.sin_port));
 801e6cc:	687b      	ldr	r3, [r7, #4]
 801e6ce:	8bdb      	ldrh	r3, [r3, #30]
 801e6d0:	4618      	mov	r0, r3
 801e6d2:	f7f1 fb13 	bl	800fcfc <lwip_htons>
 801e6d6:	4603      	mov	r3, r0
 801e6d8:	461a      	mov	r2, r3
 801e6da:	4904      	ldr	r1, [pc, #16]	; (801e6ec <_ZN12LWIPClientIO13connectClientEv+0xd8>)
 801e6dc:	4804      	ldr	r0, [pc, #16]	; (801e6f0 <_ZN12LWIPClientIO13connectClientEv+0xdc>)
 801e6de:	f7fe fb56 	bl	801cd8e <_ZN7Console6printfEPKcz>


	return 0;
 801e6e2:	2300      	movs	r3, #0
}
 801e6e4:	4618      	mov	r0, r3
 801e6e6:	3714      	adds	r7, #20
 801e6e8:	46bd      	mov	sp, r7
 801e6ea:	bd90      	pop	{r4, r7, pc}
 801e6ec:	08026d58 	.word	0x08026d58
 801e6f0:	240407b0 	.word	0x240407b0

0801e6f4 <_ZN12LWIPClientIO16disconnectClientEv>:
/*
 * Disconnects the driver instance.
 * In particular, this function resets the IODriver to an initial state and closes all used IO resources.
 * Make sure the disconnect member function is only called in the reception thread.
 */
void LWIPClientIO::disconnectClient() {
 801e6f4:	b580      	push	{r7, lr}
 801e6f6:	b082      	sub	sp, #8
 801e6f8:	af00      	add	r7, sp, #0
 801e6fa:	6078      	str	r0, [r7, #4]
	if(connected) {
 801e6fc:	687b      	ldr	r3, [r7, #4]
 801e6fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801e702:	2b00      	cmp	r3, #0
 801e704:	d011      	beq.n	801e72a <_ZN12LWIPClientIO16disconnectClientEv+0x36>
		this->connected = false;
 801e706:	687b      	ldr	r3, [r7, #4]
 801e708:	2200      	movs	r2, #0
 801e70a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		closeSocket();
 801e70e:	6878      	ldr	r0, [r7, #4]
 801e710:	f000 f814 	bl	801e73c <_ZN12LWIPClientIO11closeSocketEv>
		console.printf("[RoCo] [Client@%d] Client disconnected\r\n", ntohs(address.sin_port));
 801e714:	687b      	ldr	r3, [r7, #4]
 801e716:	8bdb      	ldrh	r3, [r3, #30]
 801e718:	4618      	mov	r0, r3
 801e71a:	f7f1 faef 	bl	800fcfc <lwip_htons>
 801e71e:	4603      	mov	r3, r0
 801e720:	461a      	mov	r2, r3
 801e722:	4904      	ldr	r1, [pc, #16]	; (801e734 <_ZN12LWIPClientIO16disconnectClientEv+0x40>)
 801e724:	4804      	ldr	r0, [pc, #16]	; (801e738 <_ZN12LWIPClientIO16disconnectClientEv+0x44>)
 801e726:	f7fe fb32 	bl	801cd8e <_ZN7Console6printfEPKcz>
	}
}
 801e72a:	bf00      	nop
 801e72c:	3708      	adds	r7, #8
 801e72e:	46bd      	mov	sp, r7
 801e730:	bd80      	pop	{r7, pc}
 801e732:	bf00      	nop
 801e734:	08026d80 	.word	0x08026d80
 801e738:	240407b0 	.word	0x240407b0

0801e73c <_ZN12LWIPClientIO11closeSocketEv>:

/*
 * Closes all used IO resources
 */
void LWIPClientIO::closeSocket() {
 801e73c:	b580      	push	{r7, lr}
 801e73e:	b082      	sub	sp, #8
 801e740:	af00      	add	r7, sp, #0
 801e742:	6078      	str	r0, [r7, #4]
	lwip_close(socket_id);
 801e744:	687b      	ldr	r3, [r7, #4]
 801e746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e748:	4618      	mov	r0, r3
 801e74a:	f7f6 f84d 	bl	80147e8 <lwip_close>
}
 801e74e:	bf00      	nop
 801e750:	3708      	adds	r7, #8
 801e752:	46bd      	mov	sp, r7
 801e754:	bd80      	pop	{r7, pc}
	...

0801e758 <_ZN12LWIPClientIO6updateEv>:

/*
 * Processes input from the server and passes it to the reception handler.
 */
void LWIPClientIO::update() {
 801e758:	b580      	push	{r7, lr}
 801e75a:	b084      	sub	sp, #16
 801e75c:	af00      	add	r7, sp, #0
 801e75e:	6078      	str	r0, [r7, #4]
	if(connected) {
 801e760:	687b      	ldr	r3, [r7, #4]
 801e762:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801e766:	2b00      	cmp	r3, #0
 801e768:	d04c      	beq.n	801e804 <_ZN12LWIPClientIO6updateEv+0xac>

		//receive buffer
		static uint8_t buffer[256];

		// New data from client
		if((result = lwip_recv(socket_id, buffer, sizeof(buffer), 0)) >= 0) {
 801e76a:	687b      	ldr	r3, [r7, #4]
 801e76c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e76e:	4618      	mov	r0, r3
 801e770:	2300      	movs	r3, #0
 801e772:	f44f 7280 	mov.w	r2, #256	; 0x100
 801e776:	4925      	ldr	r1, [pc, #148]	; (801e80c <_ZN12LWIPClientIO6updateEv+0xb4>)
 801e778:	f7f6 fc24 	bl	8014fc4 <lwip_recv>
 801e77c:	60f8      	str	r0, [r7, #12]
 801e77e:	68fb      	ldr	r3, [r7, #12]
 801e780:	43db      	mvns	r3, r3
 801e782:	0fdb      	lsrs	r3, r3, #31
 801e784:	b2db      	uxtb	r3, r3
 801e786:	2b00      	cmp	r3, #0
 801e788:	d03c      	beq.n	801e804 <_ZN12LWIPClientIO6updateEv+0xac>
			if(result != 0) {
 801e78a:	68fb      	ldr	r3, [r7, #12]
 801e78c:	2b00      	cmp	r3, #0
 801e78e:	d02a      	beq.n	801e7e6 <_ZN12LWIPClientIO6updateEv+0x8e>
				if(receiver != nullptr) {
 801e790:	687b      	ldr	r3, [r7, #4]
 801e792:	3334      	adds	r3, #52	; 0x34
 801e794:	2100      	movs	r1, #0
 801e796:	4618      	mov	r0, r3
 801e798:	f000 f8b1 	bl	801e8fe <_ZStneIvJhPhmEEbRKSt8functionIFT_DpT0_EEDn>
 801e79c:	4603      	mov	r3, r0
 801e79e:	2b00      	cmp	r3, #0
 801e7a0:	d030      	beq.n	801e804 <_ZN12LWIPClientIO6updateEv+0xac>
					if(ntohs(address.sin_port) == PORT_A) {
 801e7a2:	687b      	ldr	r3, [r7, #4]
 801e7a4:	8bdb      	ldrh	r3, [r3, #30]
 801e7a6:	4618      	mov	r0, r3
 801e7a8:	f7f1 faa8 	bl	800fcfc <lwip_htons>
 801e7ac:	4603      	mov	r3, r0
 801e7ae:	461a      	mov	r2, r3
 801e7b0:	f24a 63aa 	movw	r3, #42666	; 0xa6aa
 801e7b4:	429a      	cmp	r2, r3
 801e7b6:	bf0c      	ite	eq
 801e7b8:	2301      	moveq	r3, #1
 801e7ba:	2300      	movne	r3, #0
 801e7bc:	b2db      	uxtb	r3, r3
 801e7be:	2b00      	cmp	r3, #0
 801e7c0:	d008      	beq.n	801e7d4 <_ZN12LWIPClientIO6updateEv+0x7c>
						receiver(0b10000000, buffer, result); // Sender ID marked as external
 801e7c2:	687b      	ldr	r3, [r7, #4]
 801e7c4:	f103 0034 	add.w	r0, r3, #52	; 0x34
 801e7c8:	68fb      	ldr	r3, [r7, #12]
 801e7ca:	4a10      	ldr	r2, [pc, #64]	; (801e80c <_ZN12LWIPClientIO6updateEv+0xb4>)
 801e7cc:	2180      	movs	r1, #128	; 0x80
 801e7ce:	f000 f8a3 	bl	801e918 <_ZNKSt8functionIFvhPhmEEclEhS0_m>
				this->connected = false;
				// Do not decrement the num_sockets field since our IDs are not linear
			}
		}
	}
}
 801e7d2:	e017      	b.n	801e804 <_ZN12LWIPClientIO6updateEv+0xac>
						receiver(0b11000000, buffer, result); // Sender ID marked as internal
 801e7d4:	687b      	ldr	r3, [r7, #4]
 801e7d6:	f103 0034 	add.w	r0, r3, #52	; 0x34
 801e7da:	68fb      	ldr	r3, [r7, #12]
 801e7dc:	4a0b      	ldr	r2, [pc, #44]	; (801e80c <_ZN12LWIPClientIO6updateEv+0xb4>)
 801e7de:	21c0      	movs	r1, #192	; 0xc0
 801e7e0:	f000 f89a 	bl	801e918 <_ZNKSt8functionIFvhPhmEEclEhS0_m>
}
 801e7e4:	e00e      	b.n	801e804 <_ZN12LWIPClientIO6updateEv+0xac>
				console.printf("[RoCo] [Client@%d] Client disconnected by server\r\n", ntohs(address.sin_port));
 801e7e6:	687b      	ldr	r3, [r7, #4]
 801e7e8:	8bdb      	ldrh	r3, [r3, #30]
 801e7ea:	4618      	mov	r0, r3
 801e7ec:	f7f1 fa86 	bl	800fcfc <lwip_htons>
 801e7f0:	4603      	mov	r3, r0
 801e7f2:	461a      	mov	r2, r3
 801e7f4:	4906      	ldr	r1, [pc, #24]	; (801e810 <_ZN12LWIPClientIO6updateEv+0xb8>)
 801e7f6:	4807      	ldr	r0, [pc, #28]	; (801e814 <_ZN12LWIPClientIO6updateEv+0xbc>)
 801e7f8:	f7fe fac9 	bl	801cd8e <_ZN7Console6printfEPKcz>
				this->connected = false;
 801e7fc:	687b      	ldr	r3, [r7, #4]
 801e7fe:	2200      	movs	r2, #0
 801e800:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
}
 801e804:	bf00      	nop
 801e806:	3710      	adds	r7, #16
 801e808:	46bd      	mov	sp, r7
 801e80a:	bd80      	pop	{r7, pc}
 801e80c:	240408b8 	.word	0x240408b8
 801e810:	08026dac 	.word	0x08026dac
 801e814:	240407b0 	.word	0x240407b0

0801e818 <_ZN12LWIPClientIO7receiveERKSt8functionIFvhPhmEE>:

/*
 * Sets the receiver callback function
 */
void LWIPClientIO::receive(const std::function<void (uint8_t sender_id, uint8_t* buffer, uint32_t length)> &receiver) {
 801e818:	b580      	push	{r7, lr}
 801e81a:	b082      	sub	sp, #8
 801e81c:	af00      	add	r7, sp, #0
 801e81e:	6078      	str	r0, [r7, #4]
 801e820:	6039      	str	r1, [r7, #0]
	this->receiver = receiver;
 801e822:	687b      	ldr	r3, [r7, #4]
 801e824:	3334      	adds	r3, #52	; 0x34
 801e826:	6839      	ldr	r1, [r7, #0]
 801e828:	4618      	mov	r0, r3
 801e82a:	f7fe fcaa 	bl	801d182 <_ZNSt8functionIFvhPhmEEaSERKS2_>
}
 801e82e:	bf00      	nop
 801e830:	3708      	adds	r7, #8
 801e832:	46bd      	mov	sp, r7
 801e834:	bd80      	pop	{r7, pc}
	...

0801e838 <_ZN12LWIPClientIO8transmitEPhm>:

/*
 * Transmits the given data to the server
 * Warning: this function must be thread safe in a multithreaded environment
 */
void LWIPClientIO::transmit(uint8_t* buffer, uint32_t length) {
 801e838:	b580      	push	{r7, lr}
 801e83a:	b086      	sub	sp, #24
 801e83c:	af00      	add	r7, sp, #0
 801e83e:	60f8      	str	r0, [r7, #12]
 801e840:	60b9      	str	r1, [r7, #8]
 801e842:	607a      	str	r2, [r7, #4]
	if(connected) {
 801e844:	68fb      	ldr	r3, [r7, #12]
 801e846:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801e84a:	2b00      	cmp	r3, #0
 801e84c:	d027      	beq.n	801e89e <_ZN12LWIPClientIO8transmitEPhm+0x66>
		int32_t result;

		while((result = lwip_send(socket_id, buffer, length, 0)) > 0) {
 801e84e:	68fb      	ldr	r3, [r7, #12]
 801e850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e852:	4618      	mov	r0, r3
 801e854:	2300      	movs	r3, #0
 801e856:	687a      	ldr	r2, [r7, #4]
 801e858:	68b9      	ldr	r1, [r7, #8]
 801e85a:	f7f6 fbc9 	bl	8014ff0 <lwip_send>
 801e85e:	6178      	str	r0, [r7, #20]
 801e860:	697b      	ldr	r3, [r7, #20]
 801e862:	2b00      	cmp	r3, #0
 801e864:	bfcc      	ite	gt
 801e866:	2301      	movgt	r3, #1
 801e868:	2300      	movle	r3, #0
 801e86a:	b2db      	uxtb	r3, r3
 801e86c:	2b00      	cmp	r3, #0
 801e86e:	d004      	beq.n	801e87a <_ZN12LWIPClientIO8transmitEPhm+0x42>
			length -= result;
 801e870:	697b      	ldr	r3, [r7, #20]
 801e872:	687a      	ldr	r2, [r7, #4]
 801e874:	1ad3      	subs	r3, r2, r3
 801e876:	607b      	str	r3, [r7, #4]
		while((result = lwip_send(socket_id, buffer, length, 0)) > 0) {
 801e878:	e7e9      	b.n	801e84e <_ZN12LWIPClientIO8transmitEPhm+0x16>
		}

		if(length != 0) {
 801e87a:	687b      	ldr	r3, [r7, #4]
 801e87c:	2b00      	cmp	r3, #0
 801e87e:	d00e      	beq.n	801e89e <_ZN12LWIPClientIO8transmitEPhm+0x66>
			console.printf("[RoCo] [Client@%d] Client disconnected by server\r\n", ntohs(address.sin_port));
 801e880:	68fb      	ldr	r3, [r7, #12]
 801e882:	8bdb      	ldrh	r3, [r3, #30]
 801e884:	4618      	mov	r0, r3
 801e886:	f7f1 fa39 	bl	800fcfc <lwip_htons>
 801e88a:	4603      	mov	r3, r0
 801e88c:	461a      	mov	r2, r3
 801e88e:	4906      	ldr	r1, [pc, #24]	; (801e8a8 <_ZN12LWIPClientIO8transmitEPhm+0x70>)
 801e890:	4806      	ldr	r0, [pc, #24]	; (801e8ac <_ZN12LWIPClientIO8transmitEPhm+0x74>)
 801e892:	f7fe fa7c 	bl	801cd8e <_ZN7Console6printfEPKcz>
			this->connected = false;
 801e896:	68fb      	ldr	r3, [r7, #12]
 801e898:	2200      	movs	r2, #0
 801e89a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		}
	}
}
 801e89e:	bf00      	nop
 801e8a0:	3718      	adds	r7, #24
 801e8a2:	46bd      	mov	sp, r7
 801e8a4:	bd80      	pop	{r7, pc}
 801e8a6:	bf00      	nop
 801e8a8:	08026dac 	.word	0x08026dac
 801e8ac:	240407b0 	.word	0x240407b0

0801e8b0 <_ZNSt8functionIFvhPhmEEC1Ev>:
      function() noexcept
 801e8b0:	b580      	push	{r7, lr}
 801e8b2:	b082      	sub	sp, #8
 801e8b4:	af00      	add	r7, sp, #0
 801e8b6:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 801e8b8:	687b      	ldr	r3, [r7, #4]
 801e8ba:	4618      	mov	r0, r3
 801e8bc:	f7fe fac5 	bl	801ce4a <_ZNSt14_Function_baseC1Ev>
 801e8c0:	687b      	ldr	r3, [r7, #4]
 801e8c2:	4618      	mov	r0, r3
 801e8c4:	3708      	adds	r7, #8
 801e8c6:	46bd      	mov	sp, r7
 801e8c8:	bd80      	pop	{r7, pc}

0801e8ca <_ZNSt8functionIFvhPhmEEaSEDn>:
      operator=(nullptr_t) noexcept
 801e8ca:	b580      	push	{r7, lr}
 801e8cc:	b082      	sub	sp, #8
 801e8ce:	af00      	add	r7, sp, #0
 801e8d0:	6078      	str	r0, [r7, #4]
 801e8d2:	6039      	str	r1, [r7, #0]
	if (_M_manager)
 801e8d4:	687b      	ldr	r3, [r7, #4]
 801e8d6:	689b      	ldr	r3, [r3, #8]
 801e8d8:	2b00      	cmp	r3, #0
 801e8da:	d00b      	beq.n	801e8f4 <_ZNSt8functionIFvhPhmEEaSEDn+0x2a>
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
 801e8dc:	687b      	ldr	r3, [r7, #4]
 801e8de:	689b      	ldr	r3, [r3, #8]
 801e8e0:	6878      	ldr	r0, [r7, #4]
 801e8e2:	6879      	ldr	r1, [r7, #4]
 801e8e4:	2203      	movs	r2, #3
 801e8e6:	4798      	blx	r3
	    _M_manager = nullptr;
 801e8e8:	687b      	ldr	r3, [r7, #4]
 801e8ea:	2200      	movs	r2, #0
 801e8ec:	609a      	str	r2, [r3, #8]
	    _M_invoker = nullptr;
 801e8ee:	687b      	ldr	r3, [r7, #4]
 801e8f0:	2200      	movs	r2, #0
 801e8f2:	60da      	str	r2, [r3, #12]
	return *this;
 801e8f4:	687b      	ldr	r3, [r7, #4]
      }
 801e8f6:	4618      	mov	r0, r3
 801e8f8:	3708      	adds	r7, #8
 801e8fa:	46bd      	mov	sp, r7
 801e8fc:	bd80      	pop	{r7, pc}

0801e8fe <_ZStneIvJhPhmEEbRKSt8functionIFT_DpT0_EEDn>:
   *
   *  This function will not throw an %exception.
   */
  template<typename _Res, typename... _Args>
    inline bool
    operator!=(const function<_Res(_Args...)>& __f, nullptr_t) noexcept
 801e8fe:	b580      	push	{r7, lr}
 801e900:	b082      	sub	sp, #8
 801e902:	af00      	add	r7, sp, #0
 801e904:	6078      	str	r0, [r7, #4]
 801e906:	6039      	str	r1, [r7, #0]
    { return static_cast<bool>(__f); }
 801e908:	6878      	ldr	r0, [r7, #4]
 801e90a:	f7fe fc55 	bl	801d1b8 <_ZNKSt8functionIFvhPhmEEcvbEv>
 801e90e:	4603      	mov	r3, r0
 801e910:	4618      	mov	r0, r3
 801e912:	3708      	adds	r7, #8
 801e914:	46bd      	mov	sp, r7
 801e916:	bd80      	pop	{r7, pc}

0801e918 <_ZNKSt8functionIFvhPhmEEclEhS0_m>:
    function<_Res(_ArgTypes...)>::
 801e918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e91c:	b084      	sub	sp, #16
 801e91e:	af00      	add	r7, sp, #0
 801e920:	60f8      	str	r0, [r7, #12]
 801e922:	607a      	str	r2, [r7, #4]
 801e924:	603b      	str	r3, [r7, #0]
 801e926:	460b      	mov	r3, r1
 801e928:	72fb      	strb	r3, [r7, #11]
      if (_M_empty())
 801e92a:	68fb      	ldr	r3, [r7, #12]
 801e92c:	4618      	mov	r0, r3
 801e92e:	f7fe faad 	bl	801ce8c <_ZNKSt14_Function_base8_M_emptyEv>
 801e932:	4603      	mov	r3, r0
 801e934:	2b00      	cmp	r3, #0
 801e936:	d001      	beq.n	801e93c <_ZNKSt8functionIFvhPhmEEclEhS0_m+0x24>
	__throw_bad_function_call();
 801e938:	f001 fe3c 	bl	80205b4 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 801e93c:	68fb      	ldr	r3, [r7, #12]
 801e93e:	68dc      	ldr	r4, [r3, #12]
 801e940:	68fd      	ldr	r5, [r7, #12]
 801e942:	f107 030b 	add.w	r3, r7, #11
 801e946:	4618      	mov	r0, r3
 801e948:	f7ff f8e1 	bl	801db0e <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 801e94c:	4606      	mov	r6, r0
 801e94e:	1d3b      	adds	r3, r7, #4
 801e950:	4618      	mov	r0, r3
 801e952:	f7ff f8e7 	bl	801db24 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 801e956:	4680      	mov	r8, r0
 801e958:	463b      	mov	r3, r7
 801e95a:	4618      	mov	r0, r3
 801e95c:	f7ff f8ed 	bl	801db3a <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 801e960:	4603      	mov	r3, r0
 801e962:	4642      	mov	r2, r8
 801e964:	4631      	mov	r1, r6
 801e966:	4628      	mov	r0, r5
 801e968:	47a0      	blx	r4
 801e96a:	bf00      	nop
    }
 801e96c:	3710      	adds	r7, #16
 801e96e:	46bd      	mov	sp, r7
 801e970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801e974 <_ZNKSt9type_info4nameEv>:
     *  the runtime-mandated type_info structures in the new-abi.  */
    virtual ~type_info();

    /** Returns an @e implementation-defined byte string; this is not
     *  portable between compilers!  */
    const char* name() const _GLIBCXX_NOEXCEPT
 801e974:	b480      	push	{r7}
 801e976:	b083      	sub	sp, #12
 801e978:	af00      	add	r7, sp, #0
 801e97a:	6078      	str	r0, [r7, #4]
    { return __name[0] == '*' ? __name + 1 : __name; }
 801e97c:	687b      	ldr	r3, [r7, #4]
 801e97e:	685b      	ldr	r3, [r3, #4]
 801e980:	781b      	ldrb	r3, [r3, #0]
 801e982:	2b2a      	cmp	r3, #42	; 0x2a
 801e984:	d103      	bne.n	801e98e <_ZNKSt9type_info4nameEv+0x1a>
 801e986:	687b      	ldr	r3, [r7, #4]
 801e988:	685b      	ldr	r3, [r3, #4]
 801e98a:	3301      	adds	r3, #1
 801e98c:	e001      	b.n	801e992 <_ZNKSt9type_info4nameEv+0x1e>
 801e98e:	687b      	ldr	r3, [r7, #4]
 801e990:	685b      	ldr	r3, [r3, #4]
 801e992:	4618      	mov	r0, r3
 801e994:	370c      	adds	r7, #12
 801e996:	46bd      	mov	sp, r7
 801e998:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e99c:	4770      	bx	lr
	...

0801e9a0 <_ZNKSt9type_info9hash_codeEv>:
#endif
    bool operator!=(const type_info& __arg) const _GLIBCXX_NOEXCEPT
    { return !operator==(__arg); }

#if __cplusplus >= 201103L
    size_t hash_code() const noexcept
 801e9a0:	b590      	push	{r4, r7, lr}
 801e9a2:	b083      	sub	sp, #12
 801e9a4:	af00      	add	r7, sp, #0
 801e9a6:	6078      	str	r0, [r7, #4]
    {
#  if !__GXX_MERGED_TYPEINFO_NAMES
      return _Hash_bytes(name(), __builtin_strlen(name()),
 801e9a8:	6878      	ldr	r0, [r7, #4]
 801e9aa:	f7ff ffe3 	bl	801e974 <_ZNKSt9type_info4nameEv>
 801e9ae:	4604      	mov	r4, r0
 801e9b0:	6878      	ldr	r0, [r7, #4]
 801e9b2:	f7ff ffdf 	bl	801e974 <_ZNKSt9type_info4nameEv>
 801e9b6:	4603      	mov	r3, r0
 801e9b8:	4618      	mov	r0, r3
 801e9ba:	f7e1 fceb 	bl	8000394 <strlen>
 801e9be:	4603      	mov	r3, r0
			 static_cast<size_t>(0xc70f6907UL));
 801e9c0:	4a04      	ldr	r2, [pc, #16]	; (801e9d4 <_ZNKSt9type_info9hash_codeEv+0x34>)
 801e9c2:	4619      	mov	r1, r3
 801e9c4:	4620      	mov	r0, r4
 801e9c6:	f001 fbfd 	bl	80201c4 <_ZSt11_Hash_bytesPKvjj>
 801e9ca:	4603      	mov	r3, r0
#  else
      return reinterpret_cast<size_t>(__name);
#  endif
    }
 801e9cc:	4618      	mov	r0, r3
 801e9ce:	370c      	adds	r7, #12
 801e9d0:	46bd      	mov	sp, r7
 801e9d2:	bd90      	pop	{r4, r7, pc}
 801e9d4:	c70f6907 	.word	0xc70f6907

0801e9d8 <_ZN10MessageBus6defineI10PingPacketEEbh>:
 * Warning: this method is not thread-safe.
 */


// WARNING: using a hash as a UUID is a bad idea in general but it was to only way to get SWIG working.
template<typename T> bool MessageBus::define(uint8_t identifier) {
 801e9d8:	b580      	push	{r7, lr}
 801e9da:	b086      	sub	sp, #24
 801e9dc:	af00      	add	r7, sp, #0
 801e9de:	6078      	str	r0, [r7, #4]
 801e9e0:	460b      	mov	r3, r1
 801e9e2:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 801e9e4:	2308      	movs	r3, #8
 801e9e6:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 801e9e8:	4829      	ldr	r0, [pc, #164]	; (801ea90 <_ZN10MessageBus6defineI10PingPacketEEbh+0xb8>)
 801e9ea:	f7ff ffd9 	bl	801e9a0 <_ZNKSt9type_info9hash_codeEv>
 801e9ee:	60f8      	str	r0, [r7, #12]

	uint32_t insertion_point = hash % 256;
 801e9f0:	68fb      	ldr	r3, [r7, #12]
 801e9f2:	b2db      	uxtb	r3, r3
 801e9f4:	617b      	str	r3, [r7, #20]

	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 801e9f6:	78fb      	ldrb	r3, [r7, #3]
 801e9f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801e9fc:	687a      	ldr	r2, [r7, #4]
 801e9fe:	00db      	lsls	r3, r3, #3
 801ea00:	4413      	add	r3, r2
 801ea02:	689b      	ldr	r3, [r3, #8]
 801ea04:	2b00      	cmp	r3, #0
 801ea06:	d001      	beq.n	801ea0c <_ZN10MessageBus6defineI10PingPacketEEbh+0x34>
		return false; // Packet ID already in use
 801ea08:	2300      	movs	r3, #0
 801ea0a:	e03c      	b.n	801ea86 <_ZN10MessageBus6defineI10PingPacketEEbh+0xae>
	}

	if(struct_size > max_packet_size) {
 801ea0c:	693b      	ldr	r3, [r7, #16]
 801ea0e:	2bff      	cmp	r3, #255	; 0xff
 801ea10:	d901      	bls.n	801ea16 <_ZN10MessageBus6defineI10PingPacketEEbh+0x3e>
		return false; // Packet size too large
 801ea12:	2300      	movs	r3, #0
 801ea14:	e037      	b.n	801ea86 <_ZN10MessageBus6defineI10PingPacketEEbh+0xae>
	}

	while(definitions_by_type[insertion_point] != nullptr) {
 801ea16:	687a      	ldr	r2, [r7, #4]
 801ea18:	697b      	ldr	r3, [r7, #20]
 801ea1a:	3380      	adds	r3, #128	; 0x80
 801ea1c:	009b      	lsls	r3, r3, #2
 801ea1e:	4413      	add	r3, r2
 801ea20:	685b      	ldr	r3, [r3, #4]
 801ea22:	2b00      	cmp	r3, #0
 801ea24:	d015      	beq.n	801ea52 <_ZN10MessageBus6defineI10PingPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 801ea26:	687a      	ldr	r2, [r7, #4]
 801ea28:	697b      	ldr	r3, [r7, #20]
 801ea2a:	3380      	adds	r3, #128	; 0x80
 801ea2c:	009b      	lsls	r3, r3, #2
 801ea2e:	4413      	add	r3, r2
 801ea30:	685b      	ldr	r3, [r3, #4]
 801ea32:	685b      	ldr	r3, [r3, #4]
 801ea34:	68fa      	ldr	r2, [r7, #12]
 801ea36:	429a      	cmp	r2, r3
 801ea38:	d101      	bne.n	801ea3e <_ZN10MessageBus6defineI10PingPacketEEbh+0x66>
			return false; // Packet type already defined
 801ea3a:	2300      	movs	r3, #0
 801ea3c:	e023      	b.n	801ea86 <_ZN10MessageBus6defineI10PingPacketEEbh+0xae>
		}

		insertion_point++;
 801ea3e:	697b      	ldr	r3, [r7, #20]
 801ea40:	3301      	adds	r3, #1
 801ea42:	617b      	str	r3, [r7, #20]

		if(insertion_point == 256) {
 801ea44:	697b      	ldr	r3, [r7, #20]
 801ea46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801ea4a:	d1e4      	bne.n	801ea16 <_ZN10MessageBus6defineI10PingPacketEEbh+0x3e>
			insertion_point = 0;
 801ea4c:	2300      	movs	r3, #0
 801ea4e:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 801ea50:	e7e1      	b.n	801ea16 <_ZN10MessageBus6defineI10PingPacketEEbh+0x3e>
		}
	}

	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 801ea52:	78fb      	ldrb	r3, [r7, #3]
 801ea54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801ea58:	00db      	lsls	r3, r3, #3
 801ea5a:	687a      	ldr	r2, [r7, #4]
 801ea5c:	4413      	add	r3, r2
 801ea5e:	3304      	adds	r3, #4
 801ea60:	60bb      	str	r3, [r7, #8]

	def->id = identifier;
 801ea62:	68bb      	ldr	r3, [r7, #8]
 801ea64:	78fa      	ldrb	r2, [r7, #3]
 801ea66:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 801ea68:	693b      	ldr	r3, [r7, #16]
 801ea6a:	b2da      	uxtb	r2, r3
 801ea6c:	68bb      	ldr	r3, [r7, #8]
 801ea6e:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 801ea70:	68bb      	ldr	r3, [r7, #8]
 801ea72:	68fa      	ldr	r2, [r7, #12]
 801ea74:	605a      	str	r2, [r3, #4]

	definitions_by_type[insertion_point] = def;
 801ea76:	687a      	ldr	r2, [r7, #4]
 801ea78:	697b      	ldr	r3, [r7, #20]
 801ea7a:	3380      	adds	r3, #128	; 0x80
 801ea7c:	009b      	lsls	r3, r3, #2
 801ea7e:	4413      	add	r3, r2
 801ea80:	68ba      	ldr	r2, [r7, #8]
 801ea82:	605a      	str	r2, [r3, #4]

	return true;
 801ea84:	2301      	movs	r3, #1
}
 801ea86:	4618      	mov	r0, r3
 801ea88:	3718      	adds	r7, #24
 801ea8a:	46bd      	mov	sp, r7
 801ea8c:	bd80      	pop	{r7, pc}
 801ea8e:	bf00      	nop
 801ea90:	08027394 	.word	0x08027394

0801ea94 <_ZN10MessageBus7forwardI10PingPacketEEbPS_>:
 *
 * Every time a packet matching to given type is received, forwards it to the other message bus.
 *
 * Warning: this method is not thread-safe.
 */
template<typename T> bool MessageBus::forward(MessageBus* bus) {
 801ea94:	b580      	push	{r7, lr}
 801ea96:	b086      	sub	sp, #24
 801ea98:	af00      	add	r7, sp, #0
 801ea9a:	6078      	str	r0, [r7, #4]
 801ea9c:	6039      	str	r1, [r7, #0]
	size_t hash = typeid(T).hash_code();
 801ea9e:	4814      	ldr	r0, [pc, #80]	; (801eaf0 <_ZN10MessageBus7forwardI10PingPacketEEbPS_+0x5c>)
 801eaa0:	f7ff ff7e 	bl	801e9a0 <_ZNKSt9type_info9hash_codeEv>
 801eaa4:	6178      	str	r0, [r7, #20]

	PacketDefinition* def = retrieve(hash);
 801eaa6:	6979      	ldr	r1, [r7, #20]
 801eaa8:	6878      	ldr	r0, [r7, #4]
 801eaaa:	f000 fd51 	bl	801f550 <_ZN10MessageBus8retrieveEj>
 801eaae:	6138      	str	r0, [r7, #16]

	if(def != nullptr) {
 801eab0:	693b      	ldr	r3, [r7, #16]
 801eab2:	2b00      	cmp	r3, #0
 801eab4:	d017      	beq.n	801eae6 <_ZN10MessageBus7forwardI10PingPacketEEbPS_+0x52>
		uint8_t packetID = def->id;
 801eab6:	693b      	ldr	r3, [r7, #16]
 801eab8:	781b      	ldrb	r3, [r3, #0]
 801eaba:	73fb      	strb	r3, [r7, #15]

		if(forwarders[packetID] != nullptr) {
 801eabc:	7bfb      	ldrb	r3, [r7, #15]
 801eabe:	687a      	ldr	r2, [r7, #4]
 801eac0:	f503 538e 	add.w	r3, r3, #4544	; 0x11c0
 801eac4:	009b      	lsls	r3, r3, #2
 801eac6:	4413      	add	r3, r2
 801eac8:	685b      	ldr	r3, [r3, #4]
 801eaca:	2b00      	cmp	r3, #0
 801eacc:	d001      	beq.n	801ead2 <_ZN10MessageBus7forwardI10PingPacketEEbPS_+0x3e>
			return false; // A handler is already registered for this packet type
 801eace:	2300      	movs	r3, #0
 801ead0:	e00a      	b.n	801eae8 <_ZN10MessageBus7forwardI10PingPacketEEbPS_+0x54>
		}

		forwarders[packetID] = bus;
 801ead2:	7bfb      	ldrb	r3, [r7, #15]
 801ead4:	687a      	ldr	r2, [r7, #4]
 801ead6:	f503 538e 	add.w	r3, r3, #4544	; 0x11c0
 801eada:	009b      	lsls	r3, r3, #2
 801eadc:	4413      	add	r3, r2
 801eade:	683a      	ldr	r2, [r7, #0]
 801eae0:	605a      	str	r2, [r3, #4]

		return true;
 801eae2:	2301      	movs	r3, #1
 801eae4:	e000      	b.n	801eae8 <_ZN10MessageBus7forwardI10PingPacketEEbPS_+0x54>
	}

	return false;
 801eae6:	2300      	movs	r3, #0
}
 801eae8:	4618      	mov	r0, r3
 801eaea:	3718      	adds	r7, #24
 801eaec:	46bd      	mov	sp, r7
 801eaee:	bd80      	pop	{r7, pc}
 801eaf0:	08027394 	.word	0x08027394

0801eaf4 <_ZN10MessageBus6defineI13RequestPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 801eaf4:	b580      	push	{r7, lr}
 801eaf6:	b086      	sub	sp, #24
 801eaf8:	af00      	add	r7, sp, #0
 801eafa:	6078      	str	r0, [r7, #4]
 801eafc:	460b      	mov	r3, r1
 801eafe:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 801eb00:	2308      	movs	r3, #8
 801eb02:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 801eb04:	4829      	ldr	r0, [pc, #164]	; (801ebac <_ZN10MessageBus6defineI13RequestPacketEEbh+0xb8>)
 801eb06:	f7ff ff4b 	bl	801e9a0 <_ZNKSt9type_info9hash_codeEv>
 801eb0a:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 801eb0c:	68fb      	ldr	r3, [r7, #12]
 801eb0e:	b2db      	uxtb	r3, r3
 801eb10:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 801eb12:	78fb      	ldrb	r3, [r7, #3]
 801eb14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801eb18:	687a      	ldr	r2, [r7, #4]
 801eb1a:	00db      	lsls	r3, r3, #3
 801eb1c:	4413      	add	r3, r2
 801eb1e:	689b      	ldr	r3, [r3, #8]
 801eb20:	2b00      	cmp	r3, #0
 801eb22:	d001      	beq.n	801eb28 <_ZN10MessageBus6defineI13RequestPacketEEbh+0x34>
		return false; // Packet ID already in use
 801eb24:	2300      	movs	r3, #0
 801eb26:	e03c      	b.n	801eba2 <_ZN10MessageBus6defineI13RequestPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 801eb28:	693b      	ldr	r3, [r7, #16]
 801eb2a:	2bff      	cmp	r3, #255	; 0xff
 801eb2c:	d901      	bls.n	801eb32 <_ZN10MessageBus6defineI13RequestPacketEEbh+0x3e>
		return false; // Packet size too large
 801eb2e:	2300      	movs	r3, #0
 801eb30:	e037      	b.n	801eba2 <_ZN10MessageBus6defineI13RequestPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 801eb32:	687a      	ldr	r2, [r7, #4]
 801eb34:	697b      	ldr	r3, [r7, #20]
 801eb36:	3380      	adds	r3, #128	; 0x80
 801eb38:	009b      	lsls	r3, r3, #2
 801eb3a:	4413      	add	r3, r2
 801eb3c:	685b      	ldr	r3, [r3, #4]
 801eb3e:	2b00      	cmp	r3, #0
 801eb40:	d015      	beq.n	801eb6e <_ZN10MessageBus6defineI13RequestPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 801eb42:	687a      	ldr	r2, [r7, #4]
 801eb44:	697b      	ldr	r3, [r7, #20]
 801eb46:	3380      	adds	r3, #128	; 0x80
 801eb48:	009b      	lsls	r3, r3, #2
 801eb4a:	4413      	add	r3, r2
 801eb4c:	685b      	ldr	r3, [r3, #4]
 801eb4e:	685b      	ldr	r3, [r3, #4]
 801eb50:	68fa      	ldr	r2, [r7, #12]
 801eb52:	429a      	cmp	r2, r3
 801eb54:	d101      	bne.n	801eb5a <_ZN10MessageBus6defineI13RequestPacketEEbh+0x66>
			return false; // Packet type already defined
 801eb56:	2300      	movs	r3, #0
 801eb58:	e023      	b.n	801eba2 <_ZN10MessageBus6defineI13RequestPacketEEbh+0xae>
		insertion_point++;
 801eb5a:	697b      	ldr	r3, [r7, #20]
 801eb5c:	3301      	adds	r3, #1
 801eb5e:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 801eb60:	697b      	ldr	r3, [r7, #20]
 801eb62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801eb66:	d1e4      	bne.n	801eb32 <_ZN10MessageBus6defineI13RequestPacketEEbh+0x3e>
			insertion_point = 0;
 801eb68:	2300      	movs	r3, #0
 801eb6a:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 801eb6c:	e7e1      	b.n	801eb32 <_ZN10MessageBus6defineI13RequestPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 801eb6e:	78fb      	ldrb	r3, [r7, #3]
 801eb70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801eb74:	00db      	lsls	r3, r3, #3
 801eb76:	687a      	ldr	r2, [r7, #4]
 801eb78:	4413      	add	r3, r2
 801eb7a:	3304      	adds	r3, #4
 801eb7c:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 801eb7e:	68bb      	ldr	r3, [r7, #8]
 801eb80:	78fa      	ldrb	r2, [r7, #3]
 801eb82:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 801eb84:	693b      	ldr	r3, [r7, #16]
 801eb86:	b2da      	uxtb	r2, r3
 801eb88:	68bb      	ldr	r3, [r7, #8]
 801eb8a:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 801eb8c:	68bb      	ldr	r3, [r7, #8]
 801eb8e:	68fa      	ldr	r2, [r7, #12]
 801eb90:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 801eb92:	687a      	ldr	r2, [r7, #4]
 801eb94:	697b      	ldr	r3, [r7, #20]
 801eb96:	3380      	adds	r3, #128	; 0x80
 801eb98:	009b      	lsls	r3, r3, #2
 801eb9a:	4413      	add	r3, r2
 801eb9c:	68ba      	ldr	r2, [r7, #8]
 801eb9e:	605a      	str	r2, [r3, #4]
	return true;
 801eba0:	2301      	movs	r3, #1
}
 801eba2:	4618      	mov	r0, r3
 801eba4:	3718      	adds	r7, #24
 801eba6:	46bd      	mov	sp, r7
 801eba8:	bd80      	pop	{r7, pc}
 801ebaa:	bf00      	nop
 801ebac:	0802737c 	.word	0x0802737c

0801ebb0 <_ZN10MessageBus6defineI14ResponsePacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 801ebb0:	b580      	push	{r7, lr}
 801ebb2:	b086      	sub	sp, #24
 801ebb4:	af00      	add	r7, sp, #0
 801ebb6:	6078      	str	r0, [r7, #4]
 801ebb8:	460b      	mov	r3, r1
 801ebba:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 801ebbc:	2308      	movs	r3, #8
 801ebbe:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 801ebc0:	4829      	ldr	r0, [pc, #164]	; (801ec68 <_ZN10MessageBus6defineI14ResponsePacketEEbh+0xb8>)
 801ebc2:	f7ff feed 	bl	801e9a0 <_ZNKSt9type_info9hash_codeEv>
 801ebc6:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 801ebc8:	68fb      	ldr	r3, [r7, #12]
 801ebca:	b2db      	uxtb	r3, r3
 801ebcc:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 801ebce:	78fb      	ldrb	r3, [r7, #3]
 801ebd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801ebd4:	687a      	ldr	r2, [r7, #4]
 801ebd6:	00db      	lsls	r3, r3, #3
 801ebd8:	4413      	add	r3, r2
 801ebda:	689b      	ldr	r3, [r3, #8]
 801ebdc:	2b00      	cmp	r3, #0
 801ebde:	d001      	beq.n	801ebe4 <_ZN10MessageBus6defineI14ResponsePacketEEbh+0x34>
		return false; // Packet ID already in use
 801ebe0:	2300      	movs	r3, #0
 801ebe2:	e03c      	b.n	801ec5e <_ZN10MessageBus6defineI14ResponsePacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 801ebe4:	693b      	ldr	r3, [r7, #16]
 801ebe6:	2bff      	cmp	r3, #255	; 0xff
 801ebe8:	d901      	bls.n	801ebee <_ZN10MessageBus6defineI14ResponsePacketEEbh+0x3e>
		return false; // Packet size too large
 801ebea:	2300      	movs	r3, #0
 801ebec:	e037      	b.n	801ec5e <_ZN10MessageBus6defineI14ResponsePacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 801ebee:	687a      	ldr	r2, [r7, #4]
 801ebf0:	697b      	ldr	r3, [r7, #20]
 801ebf2:	3380      	adds	r3, #128	; 0x80
 801ebf4:	009b      	lsls	r3, r3, #2
 801ebf6:	4413      	add	r3, r2
 801ebf8:	685b      	ldr	r3, [r3, #4]
 801ebfa:	2b00      	cmp	r3, #0
 801ebfc:	d015      	beq.n	801ec2a <_ZN10MessageBus6defineI14ResponsePacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 801ebfe:	687a      	ldr	r2, [r7, #4]
 801ec00:	697b      	ldr	r3, [r7, #20]
 801ec02:	3380      	adds	r3, #128	; 0x80
 801ec04:	009b      	lsls	r3, r3, #2
 801ec06:	4413      	add	r3, r2
 801ec08:	685b      	ldr	r3, [r3, #4]
 801ec0a:	685b      	ldr	r3, [r3, #4]
 801ec0c:	68fa      	ldr	r2, [r7, #12]
 801ec0e:	429a      	cmp	r2, r3
 801ec10:	d101      	bne.n	801ec16 <_ZN10MessageBus6defineI14ResponsePacketEEbh+0x66>
			return false; // Packet type already defined
 801ec12:	2300      	movs	r3, #0
 801ec14:	e023      	b.n	801ec5e <_ZN10MessageBus6defineI14ResponsePacketEEbh+0xae>
		insertion_point++;
 801ec16:	697b      	ldr	r3, [r7, #20]
 801ec18:	3301      	adds	r3, #1
 801ec1a:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 801ec1c:	697b      	ldr	r3, [r7, #20]
 801ec1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801ec22:	d1e4      	bne.n	801ebee <_ZN10MessageBus6defineI14ResponsePacketEEbh+0x3e>
			insertion_point = 0;
 801ec24:	2300      	movs	r3, #0
 801ec26:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 801ec28:	e7e1      	b.n	801ebee <_ZN10MessageBus6defineI14ResponsePacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 801ec2a:	78fb      	ldrb	r3, [r7, #3]
 801ec2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801ec30:	00db      	lsls	r3, r3, #3
 801ec32:	687a      	ldr	r2, [r7, #4]
 801ec34:	4413      	add	r3, r2
 801ec36:	3304      	adds	r3, #4
 801ec38:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 801ec3a:	68bb      	ldr	r3, [r7, #8]
 801ec3c:	78fa      	ldrb	r2, [r7, #3]
 801ec3e:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 801ec40:	693b      	ldr	r3, [r7, #16]
 801ec42:	b2da      	uxtb	r2, r3
 801ec44:	68bb      	ldr	r3, [r7, #8]
 801ec46:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 801ec48:	68bb      	ldr	r3, [r7, #8]
 801ec4a:	68fa      	ldr	r2, [r7, #12]
 801ec4c:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 801ec4e:	687a      	ldr	r2, [r7, #4]
 801ec50:	697b      	ldr	r3, [r7, #20]
 801ec52:	3380      	adds	r3, #128	; 0x80
 801ec54:	009b      	lsls	r3, r3, #2
 801ec56:	4413      	add	r3, r2
 801ec58:	68ba      	ldr	r2, [r7, #8]
 801ec5a:	605a      	str	r2, [r3, #4]
	return true;
 801ec5c:	2301      	movs	r3, #1
}
 801ec5e:	4618      	mov	r0, r3
 801ec60:	3718      	adds	r7, #24
 801ec62:	46bd      	mov	sp, r7
 801ec64:	bd80      	pop	{r7, pc}
 801ec66:	bf00      	nop
 801ec68:	08027360 	.word	0x08027360

0801ec6c <_ZN10MessageBus6defineI14ProgressPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 801ec6c:	b580      	push	{r7, lr}
 801ec6e:	b086      	sub	sp, #24
 801ec70:	af00      	add	r7, sp, #0
 801ec72:	6078      	str	r0, [r7, #4]
 801ec74:	460b      	mov	r3, r1
 801ec76:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 801ec78:	2305      	movs	r3, #5
 801ec7a:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 801ec7c:	4829      	ldr	r0, [pc, #164]	; (801ed24 <_ZN10MessageBus6defineI14ProgressPacketEEbh+0xb8>)
 801ec7e:	f7ff fe8f 	bl	801e9a0 <_ZNKSt9type_info9hash_codeEv>
 801ec82:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 801ec84:	68fb      	ldr	r3, [r7, #12]
 801ec86:	b2db      	uxtb	r3, r3
 801ec88:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 801ec8a:	78fb      	ldrb	r3, [r7, #3]
 801ec8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801ec90:	687a      	ldr	r2, [r7, #4]
 801ec92:	00db      	lsls	r3, r3, #3
 801ec94:	4413      	add	r3, r2
 801ec96:	689b      	ldr	r3, [r3, #8]
 801ec98:	2b00      	cmp	r3, #0
 801ec9a:	d001      	beq.n	801eca0 <_ZN10MessageBus6defineI14ProgressPacketEEbh+0x34>
		return false; // Packet ID already in use
 801ec9c:	2300      	movs	r3, #0
 801ec9e:	e03c      	b.n	801ed1a <_ZN10MessageBus6defineI14ProgressPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 801eca0:	693b      	ldr	r3, [r7, #16]
 801eca2:	2bff      	cmp	r3, #255	; 0xff
 801eca4:	d901      	bls.n	801ecaa <_ZN10MessageBus6defineI14ProgressPacketEEbh+0x3e>
		return false; // Packet size too large
 801eca6:	2300      	movs	r3, #0
 801eca8:	e037      	b.n	801ed1a <_ZN10MessageBus6defineI14ProgressPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 801ecaa:	687a      	ldr	r2, [r7, #4]
 801ecac:	697b      	ldr	r3, [r7, #20]
 801ecae:	3380      	adds	r3, #128	; 0x80
 801ecb0:	009b      	lsls	r3, r3, #2
 801ecb2:	4413      	add	r3, r2
 801ecb4:	685b      	ldr	r3, [r3, #4]
 801ecb6:	2b00      	cmp	r3, #0
 801ecb8:	d015      	beq.n	801ece6 <_ZN10MessageBus6defineI14ProgressPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 801ecba:	687a      	ldr	r2, [r7, #4]
 801ecbc:	697b      	ldr	r3, [r7, #20]
 801ecbe:	3380      	adds	r3, #128	; 0x80
 801ecc0:	009b      	lsls	r3, r3, #2
 801ecc2:	4413      	add	r3, r2
 801ecc4:	685b      	ldr	r3, [r3, #4]
 801ecc6:	685b      	ldr	r3, [r3, #4]
 801ecc8:	68fa      	ldr	r2, [r7, #12]
 801ecca:	429a      	cmp	r2, r3
 801eccc:	d101      	bne.n	801ecd2 <_ZN10MessageBus6defineI14ProgressPacketEEbh+0x66>
			return false; // Packet type already defined
 801ecce:	2300      	movs	r3, #0
 801ecd0:	e023      	b.n	801ed1a <_ZN10MessageBus6defineI14ProgressPacketEEbh+0xae>
		insertion_point++;
 801ecd2:	697b      	ldr	r3, [r7, #20]
 801ecd4:	3301      	adds	r3, #1
 801ecd6:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 801ecd8:	697b      	ldr	r3, [r7, #20]
 801ecda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801ecde:	d1e4      	bne.n	801ecaa <_ZN10MessageBus6defineI14ProgressPacketEEbh+0x3e>
			insertion_point = 0;
 801ece0:	2300      	movs	r3, #0
 801ece2:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 801ece4:	e7e1      	b.n	801ecaa <_ZN10MessageBus6defineI14ProgressPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 801ece6:	78fb      	ldrb	r3, [r7, #3]
 801ece8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801ecec:	00db      	lsls	r3, r3, #3
 801ecee:	687a      	ldr	r2, [r7, #4]
 801ecf0:	4413      	add	r3, r2
 801ecf2:	3304      	adds	r3, #4
 801ecf4:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 801ecf6:	68bb      	ldr	r3, [r7, #8]
 801ecf8:	78fa      	ldrb	r2, [r7, #3]
 801ecfa:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 801ecfc:	693b      	ldr	r3, [r7, #16]
 801ecfe:	b2da      	uxtb	r2, r3
 801ed00:	68bb      	ldr	r3, [r7, #8]
 801ed02:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 801ed04:	68bb      	ldr	r3, [r7, #8]
 801ed06:	68fa      	ldr	r2, [r7, #12]
 801ed08:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 801ed0a:	687a      	ldr	r2, [r7, #4]
 801ed0c:	697b      	ldr	r3, [r7, #20]
 801ed0e:	3380      	adds	r3, #128	; 0x80
 801ed10:	009b      	lsls	r3, r3, #2
 801ed12:	4413      	add	r3, r2
 801ed14:	68ba      	ldr	r2, [r7, #8]
 801ed16:	605a      	str	r2, [r3, #4]
	return true;
 801ed18:	2301      	movs	r3, #1
}
 801ed1a:	4618      	mov	r0, r3
 801ed1c:	3718      	adds	r7, #24
 801ed1e:	46bd      	mov	sp, r7
 801ed20:	bd80      	pop	{r7, pc}
 801ed22:	bf00      	nop
 801ed24:	08027344 	.word	0x08027344

0801ed28 <_ZN10MessageBus6defineI10DataPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 801ed28:	b580      	push	{r7, lr}
 801ed2a:	b086      	sub	sp, #24
 801ed2c:	af00      	add	r7, sp, #0
 801ed2e:	6078      	str	r0, [r7, #4]
 801ed30:	460b      	mov	r3, r1
 801ed32:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 801ed34:	2304      	movs	r3, #4
 801ed36:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 801ed38:	4829      	ldr	r0, [pc, #164]	; (801ede0 <_ZN10MessageBus6defineI10DataPacketEEbh+0xb8>)
 801ed3a:	f7ff fe31 	bl	801e9a0 <_ZNKSt9type_info9hash_codeEv>
 801ed3e:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 801ed40:	68fb      	ldr	r3, [r7, #12]
 801ed42:	b2db      	uxtb	r3, r3
 801ed44:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 801ed46:	78fb      	ldrb	r3, [r7, #3]
 801ed48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801ed4c:	687a      	ldr	r2, [r7, #4]
 801ed4e:	00db      	lsls	r3, r3, #3
 801ed50:	4413      	add	r3, r2
 801ed52:	689b      	ldr	r3, [r3, #8]
 801ed54:	2b00      	cmp	r3, #0
 801ed56:	d001      	beq.n	801ed5c <_ZN10MessageBus6defineI10DataPacketEEbh+0x34>
		return false; // Packet ID already in use
 801ed58:	2300      	movs	r3, #0
 801ed5a:	e03c      	b.n	801edd6 <_ZN10MessageBus6defineI10DataPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 801ed5c:	693b      	ldr	r3, [r7, #16]
 801ed5e:	2bff      	cmp	r3, #255	; 0xff
 801ed60:	d901      	bls.n	801ed66 <_ZN10MessageBus6defineI10DataPacketEEbh+0x3e>
		return false; // Packet size too large
 801ed62:	2300      	movs	r3, #0
 801ed64:	e037      	b.n	801edd6 <_ZN10MessageBus6defineI10DataPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 801ed66:	687a      	ldr	r2, [r7, #4]
 801ed68:	697b      	ldr	r3, [r7, #20]
 801ed6a:	3380      	adds	r3, #128	; 0x80
 801ed6c:	009b      	lsls	r3, r3, #2
 801ed6e:	4413      	add	r3, r2
 801ed70:	685b      	ldr	r3, [r3, #4]
 801ed72:	2b00      	cmp	r3, #0
 801ed74:	d015      	beq.n	801eda2 <_ZN10MessageBus6defineI10DataPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 801ed76:	687a      	ldr	r2, [r7, #4]
 801ed78:	697b      	ldr	r3, [r7, #20]
 801ed7a:	3380      	adds	r3, #128	; 0x80
 801ed7c:	009b      	lsls	r3, r3, #2
 801ed7e:	4413      	add	r3, r2
 801ed80:	685b      	ldr	r3, [r3, #4]
 801ed82:	685b      	ldr	r3, [r3, #4]
 801ed84:	68fa      	ldr	r2, [r7, #12]
 801ed86:	429a      	cmp	r2, r3
 801ed88:	d101      	bne.n	801ed8e <_ZN10MessageBus6defineI10DataPacketEEbh+0x66>
			return false; // Packet type already defined
 801ed8a:	2300      	movs	r3, #0
 801ed8c:	e023      	b.n	801edd6 <_ZN10MessageBus6defineI10DataPacketEEbh+0xae>
		insertion_point++;
 801ed8e:	697b      	ldr	r3, [r7, #20]
 801ed90:	3301      	adds	r3, #1
 801ed92:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 801ed94:	697b      	ldr	r3, [r7, #20]
 801ed96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801ed9a:	d1e4      	bne.n	801ed66 <_ZN10MessageBus6defineI10DataPacketEEbh+0x3e>
			insertion_point = 0;
 801ed9c:	2300      	movs	r3, #0
 801ed9e:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 801eda0:	e7e1      	b.n	801ed66 <_ZN10MessageBus6defineI10DataPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 801eda2:	78fb      	ldrb	r3, [r7, #3]
 801eda4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801eda8:	00db      	lsls	r3, r3, #3
 801edaa:	687a      	ldr	r2, [r7, #4]
 801edac:	4413      	add	r3, r2
 801edae:	3304      	adds	r3, #4
 801edb0:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 801edb2:	68bb      	ldr	r3, [r7, #8]
 801edb4:	78fa      	ldrb	r2, [r7, #3]
 801edb6:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 801edb8:	693b      	ldr	r3, [r7, #16]
 801edba:	b2da      	uxtb	r2, r3
 801edbc:	68bb      	ldr	r3, [r7, #8]
 801edbe:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 801edc0:	68bb      	ldr	r3, [r7, #8]
 801edc2:	68fa      	ldr	r2, [r7, #12]
 801edc4:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 801edc6:	687a      	ldr	r2, [r7, #4]
 801edc8:	697b      	ldr	r3, [r7, #20]
 801edca:	3380      	adds	r3, #128	; 0x80
 801edcc:	009b      	lsls	r3, r3, #2
 801edce:	4413      	add	r3, r2
 801edd0:	68ba      	ldr	r2, [r7, #8]
 801edd2:	605a      	str	r2, [r3, #4]
	return true;
 801edd4:	2301      	movs	r3, #1
}
 801edd6:	4618      	mov	r0, r3
 801edd8:	3718      	adds	r7, #24
 801edda:	46bd      	mov	sp, r7
 801eddc:	bd80      	pop	{r7, pc}
 801edde:	bf00      	nop
 801ede0:	0802732c 	.word	0x0802732c

0801ede4 <_ZN10MessageBus6defineI11ErrorPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 801ede4:	b580      	push	{r7, lr}
 801ede6:	b086      	sub	sp, #24
 801ede8:	af00      	add	r7, sp, #0
 801edea:	6078      	str	r0, [r7, #4]
 801edec:	460b      	mov	r3, r1
 801edee:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 801edf0:	2301      	movs	r3, #1
 801edf2:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 801edf4:	4829      	ldr	r0, [pc, #164]	; (801ee9c <_ZN10MessageBus6defineI11ErrorPacketEEbh+0xb8>)
 801edf6:	f7ff fdd3 	bl	801e9a0 <_ZNKSt9type_info9hash_codeEv>
 801edfa:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 801edfc:	68fb      	ldr	r3, [r7, #12]
 801edfe:	b2db      	uxtb	r3, r3
 801ee00:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 801ee02:	78fb      	ldrb	r3, [r7, #3]
 801ee04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801ee08:	687a      	ldr	r2, [r7, #4]
 801ee0a:	00db      	lsls	r3, r3, #3
 801ee0c:	4413      	add	r3, r2
 801ee0e:	689b      	ldr	r3, [r3, #8]
 801ee10:	2b00      	cmp	r3, #0
 801ee12:	d001      	beq.n	801ee18 <_ZN10MessageBus6defineI11ErrorPacketEEbh+0x34>
		return false; // Packet ID already in use
 801ee14:	2300      	movs	r3, #0
 801ee16:	e03c      	b.n	801ee92 <_ZN10MessageBus6defineI11ErrorPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 801ee18:	693b      	ldr	r3, [r7, #16]
 801ee1a:	2bff      	cmp	r3, #255	; 0xff
 801ee1c:	d901      	bls.n	801ee22 <_ZN10MessageBus6defineI11ErrorPacketEEbh+0x3e>
		return false; // Packet size too large
 801ee1e:	2300      	movs	r3, #0
 801ee20:	e037      	b.n	801ee92 <_ZN10MessageBus6defineI11ErrorPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 801ee22:	687a      	ldr	r2, [r7, #4]
 801ee24:	697b      	ldr	r3, [r7, #20]
 801ee26:	3380      	adds	r3, #128	; 0x80
 801ee28:	009b      	lsls	r3, r3, #2
 801ee2a:	4413      	add	r3, r2
 801ee2c:	685b      	ldr	r3, [r3, #4]
 801ee2e:	2b00      	cmp	r3, #0
 801ee30:	d015      	beq.n	801ee5e <_ZN10MessageBus6defineI11ErrorPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 801ee32:	687a      	ldr	r2, [r7, #4]
 801ee34:	697b      	ldr	r3, [r7, #20]
 801ee36:	3380      	adds	r3, #128	; 0x80
 801ee38:	009b      	lsls	r3, r3, #2
 801ee3a:	4413      	add	r3, r2
 801ee3c:	685b      	ldr	r3, [r3, #4]
 801ee3e:	685b      	ldr	r3, [r3, #4]
 801ee40:	68fa      	ldr	r2, [r7, #12]
 801ee42:	429a      	cmp	r2, r3
 801ee44:	d101      	bne.n	801ee4a <_ZN10MessageBus6defineI11ErrorPacketEEbh+0x66>
			return false; // Packet type already defined
 801ee46:	2300      	movs	r3, #0
 801ee48:	e023      	b.n	801ee92 <_ZN10MessageBus6defineI11ErrorPacketEEbh+0xae>
		insertion_point++;
 801ee4a:	697b      	ldr	r3, [r7, #20]
 801ee4c:	3301      	adds	r3, #1
 801ee4e:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 801ee50:	697b      	ldr	r3, [r7, #20]
 801ee52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801ee56:	d1e4      	bne.n	801ee22 <_ZN10MessageBus6defineI11ErrorPacketEEbh+0x3e>
			insertion_point = 0;
 801ee58:	2300      	movs	r3, #0
 801ee5a:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 801ee5c:	e7e1      	b.n	801ee22 <_ZN10MessageBus6defineI11ErrorPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 801ee5e:	78fb      	ldrb	r3, [r7, #3]
 801ee60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801ee64:	00db      	lsls	r3, r3, #3
 801ee66:	687a      	ldr	r2, [r7, #4]
 801ee68:	4413      	add	r3, r2
 801ee6a:	3304      	adds	r3, #4
 801ee6c:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 801ee6e:	68bb      	ldr	r3, [r7, #8]
 801ee70:	78fa      	ldrb	r2, [r7, #3]
 801ee72:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 801ee74:	693b      	ldr	r3, [r7, #16]
 801ee76:	b2da      	uxtb	r2, r3
 801ee78:	68bb      	ldr	r3, [r7, #8]
 801ee7a:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 801ee7c:	68bb      	ldr	r3, [r7, #8]
 801ee7e:	68fa      	ldr	r2, [r7, #12]
 801ee80:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 801ee82:	687a      	ldr	r2, [r7, #4]
 801ee84:	697b      	ldr	r3, [r7, #20]
 801ee86:	3380      	adds	r3, #128	; 0x80
 801ee88:	009b      	lsls	r3, r3, #2
 801ee8a:	4413      	add	r3, r2
 801ee8c:	68ba      	ldr	r2, [r7, #8]
 801ee8e:	605a      	str	r2, [r3, #4]
	return true;
 801ee90:	2301      	movs	r3, #1
}
 801ee92:	4618      	mov	r0, r3
 801ee94:	3718      	adds	r7, #24
 801ee96:	46bd      	mov	sp, r7
 801ee98:	bd80      	pop	{r7, pc}
 801ee9a:	bf00      	nop
 801ee9c:	08027314 	.word	0x08027314

0801eea0 <_ZN10MessageBus6defineI23Avionics_BaroTempPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 801eea0:	b580      	push	{r7, lr}
 801eea2:	b086      	sub	sp, #24
 801eea4:	af00      	add	r7, sp, #0
 801eea6:	6078      	str	r0, [r7, #4]
 801eea8:	460b      	mov	r3, r1
 801eeaa:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 801eeac:	2308      	movs	r3, #8
 801eeae:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 801eeb0:	4829      	ldr	r0, [pc, #164]	; (801ef58 <_ZN10MessageBus6defineI23Avionics_BaroTempPacketEEbh+0xb8>)
 801eeb2:	f7ff fd75 	bl	801e9a0 <_ZNKSt9type_info9hash_codeEv>
 801eeb6:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 801eeb8:	68fb      	ldr	r3, [r7, #12]
 801eeba:	b2db      	uxtb	r3, r3
 801eebc:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 801eebe:	78fb      	ldrb	r3, [r7, #3]
 801eec0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801eec4:	687a      	ldr	r2, [r7, #4]
 801eec6:	00db      	lsls	r3, r3, #3
 801eec8:	4413      	add	r3, r2
 801eeca:	689b      	ldr	r3, [r3, #8]
 801eecc:	2b00      	cmp	r3, #0
 801eece:	d001      	beq.n	801eed4 <_ZN10MessageBus6defineI23Avionics_BaroTempPacketEEbh+0x34>
		return false; // Packet ID already in use
 801eed0:	2300      	movs	r3, #0
 801eed2:	e03c      	b.n	801ef4e <_ZN10MessageBus6defineI23Avionics_BaroTempPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 801eed4:	693b      	ldr	r3, [r7, #16]
 801eed6:	2bff      	cmp	r3, #255	; 0xff
 801eed8:	d901      	bls.n	801eede <_ZN10MessageBus6defineI23Avionics_BaroTempPacketEEbh+0x3e>
		return false; // Packet size too large
 801eeda:	2300      	movs	r3, #0
 801eedc:	e037      	b.n	801ef4e <_ZN10MessageBus6defineI23Avionics_BaroTempPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 801eede:	687a      	ldr	r2, [r7, #4]
 801eee0:	697b      	ldr	r3, [r7, #20]
 801eee2:	3380      	adds	r3, #128	; 0x80
 801eee4:	009b      	lsls	r3, r3, #2
 801eee6:	4413      	add	r3, r2
 801eee8:	685b      	ldr	r3, [r3, #4]
 801eeea:	2b00      	cmp	r3, #0
 801eeec:	d015      	beq.n	801ef1a <_ZN10MessageBus6defineI23Avionics_BaroTempPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 801eeee:	687a      	ldr	r2, [r7, #4]
 801eef0:	697b      	ldr	r3, [r7, #20]
 801eef2:	3380      	adds	r3, #128	; 0x80
 801eef4:	009b      	lsls	r3, r3, #2
 801eef6:	4413      	add	r3, r2
 801eef8:	685b      	ldr	r3, [r3, #4]
 801eefa:	685b      	ldr	r3, [r3, #4]
 801eefc:	68fa      	ldr	r2, [r7, #12]
 801eefe:	429a      	cmp	r2, r3
 801ef00:	d101      	bne.n	801ef06 <_ZN10MessageBus6defineI23Avionics_BaroTempPacketEEbh+0x66>
			return false; // Packet type already defined
 801ef02:	2300      	movs	r3, #0
 801ef04:	e023      	b.n	801ef4e <_ZN10MessageBus6defineI23Avionics_BaroTempPacketEEbh+0xae>
		insertion_point++;
 801ef06:	697b      	ldr	r3, [r7, #20]
 801ef08:	3301      	adds	r3, #1
 801ef0a:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 801ef0c:	697b      	ldr	r3, [r7, #20]
 801ef0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801ef12:	d1e4      	bne.n	801eede <_ZN10MessageBus6defineI23Avionics_BaroTempPacketEEbh+0x3e>
			insertion_point = 0;
 801ef14:	2300      	movs	r3, #0
 801ef16:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 801ef18:	e7e1      	b.n	801eede <_ZN10MessageBus6defineI23Avionics_BaroTempPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 801ef1a:	78fb      	ldrb	r3, [r7, #3]
 801ef1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801ef20:	00db      	lsls	r3, r3, #3
 801ef22:	687a      	ldr	r2, [r7, #4]
 801ef24:	4413      	add	r3, r2
 801ef26:	3304      	adds	r3, #4
 801ef28:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 801ef2a:	68bb      	ldr	r3, [r7, #8]
 801ef2c:	78fa      	ldrb	r2, [r7, #3]
 801ef2e:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 801ef30:	693b      	ldr	r3, [r7, #16]
 801ef32:	b2da      	uxtb	r2, r3
 801ef34:	68bb      	ldr	r3, [r7, #8]
 801ef36:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 801ef38:	68bb      	ldr	r3, [r7, #8]
 801ef3a:	68fa      	ldr	r2, [r7, #12]
 801ef3c:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 801ef3e:	687a      	ldr	r2, [r7, #4]
 801ef40:	697b      	ldr	r3, [r7, #20]
 801ef42:	3380      	adds	r3, #128	; 0x80
 801ef44:	009b      	lsls	r3, r3, #2
 801ef46:	4413      	add	r3, r2
 801ef48:	68ba      	ldr	r2, [r7, #8]
 801ef4a:	605a      	str	r2, [r3, #4]
	return true;
 801ef4c:	2301      	movs	r3, #1
}
 801ef4e:	4618      	mov	r0, r3
 801ef50:	3718      	adds	r7, #24
 801ef52:	46bd      	mov	sp, r7
 801ef54:	bd80      	pop	{r7, pc}
 801ef56:	bf00      	nop
 801ef58:	080272f0 	.word	0x080272f0

0801ef5c <_ZN10MessageBus6defineI23Avionics_AccelMagPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 801ef5c:	b580      	push	{r7, lr}
 801ef5e:	b086      	sub	sp, #24
 801ef60:	af00      	add	r7, sp, #0
 801ef62:	6078      	str	r0, [r7, #4]
 801ef64:	460b      	mov	r3, r1
 801ef66:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 801ef68:	2324      	movs	r3, #36	; 0x24
 801ef6a:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 801ef6c:	4829      	ldr	r0, [pc, #164]	; (801f014 <_ZN10MessageBus6defineI23Avionics_AccelMagPacketEEbh+0xb8>)
 801ef6e:	f7ff fd17 	bl	801e9a0 <_ZNKSt9type_info9hash_codeEv>
 801ef72:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 801ef74:	68fb      	ldr	r3, [r7, #12]
 801ef76:	b2db      	uxtb	r3, r3
 801ef78:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 801ef7a:	78fb      	ldrb	r3, [r7, #3]
 801ef7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801ef80:	687a      	ldr	r2, [r7, #4]
 801ef82:	00db      	lsls	r3, r3, #3
 801ef84:	4413      	add	r3, r2
 801ef86:	689b      	ldr	r3, [r3, #8]
 801ef88:	2b00      	cmp	r3, #0
 801ef8a:	d001      	beq.n	801ef90 <_ZN10MessageBus6defineI23Avionics_AccelMagPacketEEbh+0x34>
		return false; // Packet ID already in use
 801ef8c:	2300      	movs	r3, #0
 801ef8e:	e03c      	b.n	801f00a <_ZN10MessageBus6defineI23Avionics_AccelMagPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 801ef90:	693b      	ldr	r3, [r7, #16]
 801ef92:	2bff      	cmp	r3, #255	; 0xff
 801ef94:	d901      	bls.n	801ef9a <_ZN10MessageBus6defineI23Avionics_AccelMagPacketEEbh+0x3e>
		return false; // Packet size too large
 801ef96:	2300      	movs	r3, #0
 801ef98:	e037      	b.n	801f00a <_ZN10MessageBus6defineI23Avionics_AccelMagPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 801ef9a:	687a      	ldr	r2, [r7, #4]
 801ef9c:	697b      	ldr	r3, [r7, #20]
 801ef9e:	3380      	adds	r3, #128	; 0x80
 801efa0:	009b      	lsls	r3, r3, #2
 801efa2:	4413      	add	r3, r2
 801efa4:	685b      	ldr	r3, [r3, #4]
 801efa6:	2b00      	cmp	r3, #0
 801efa8:	d015      	beq.n	801efd6 <_ZN10MessageBus6defineI23Avionics_AccelMagPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 801efaa:	687a      	ldr	r2, [r7, #4]
 801efac:	697b      	ldr	r3, [r7, #20]
 801efae:	3380      	adds	r3, #128	; 0x80
 801efb0:	009b      	lsls	r3, r3, #2
 801efb2:	4413      	add	r3, r2
 801efb4:	685b      	ldr	r3, [r3, #4]
 801efb6:	685b      	ldr	r3, [r3, #4]
 801efb8:	68fa      	ldr	r2, [r7, #12]
 801efba:	429a      	cmp	r2, r3
 801efbc:	d101      	bne.n	801efc2 <_ZN10MessageBus6defineI23Avionics_AccelMagPacketEEbh+0x66>
			return false; // Packet type already defined
 801efbe:	2300      	movs	r3, #0
 801efc0:	e023      	b.n	801f00a <_ZN10MessageBus6defineI23Avionics_AccelMagPacketEEbh+0xae>
		insertion_point++;
 801efc2:	697b      	ldr	r3, [r7, #20]
 801efc4:	3301      	adds	r3, #1
 801efc6:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 801efc8:	697b      	ldr	r3, [r7, #20]
 801efca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801efce:	d1e4      	bne.n	801ef9a <_ZN10MessageBus6defineI23Avionics_AccelMagPacketEEbh+0x3e>
			insertion_point = 0;
 801efd0:	2300      	movs	r3, #0
 801efd2:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 801efd4:	e7e1      	b.n	801ef9a <_ZN10MessageBus6defineI23Avionics_AccelMagPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 801efd6:	78fb      	ldrb	r3, [r7, #3]
 801efd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801efdc:	00db      	lsls	r3, r3, #3
 801efde:	687a      	ldr	r2, [r7, #4]
 801efe0:	4413      	add	r3, r2
 801efe2:	3304      	adds	r3, #4
 801efe4:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 801efe6:	68bb      	ldr	r3, [r7, #8]
 801efe8:	78fa      	ldrb	r2, [r7, #3]
 801efea:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 801efec:	693b      	ldr	r3, [r7, #16]
 801efee:	b2da      	uxtb	r2, r3
 801eff0:	68bb      	ldr	r3, [r7, #8]
 801eff2:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 801eff4:	68bb      	ldr	r3, [r7, #8]
 801eff6:	68fa      	ldr	r2, [r7, #12]
 801eff8:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 801effa:	687a      	ldr	r2, [r7, #4]
 801effc:	697b      	ldr	r3, [r7, #20]
 801effe:	3380      	adds	r3, #128	; 0x80
 801f000:	009b      	lsls	r3, r3, #2
 801f002:	4413      	add	r3, r2
 801f004:	68ba      	ldr	r2, [r7, #8]
 801f006:	605a      	str	r2, [r3, #4]
	return true;
 801f008:	2301      	movs	r3, #1
}
 801f00a:	4618      	mov	r0, r3
 801f00c:	3718      	adds	r7, #24
 801f00e:	46bd      	mov	sp, r7
 801f010:	bd80      	pop	{r7, pc}
 801f012:	bf00      	nop
 801f014:	080272cc 	.word	0x080272cc

0801f018 <_ZN10MessageBus6defineI22Handling_GripperPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 801f018:	b580      	push	{r7, lr}
 801f01a:	b086      	sub	sp, #24
 801f01c:	af00      	add	r7, sp, #0
 801f01e:	6078      	str	r0, [r7, #4]
 801f020:	460b      	mov	r3, r1
 801f022:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 801f024:	2304      	movs	r3, #4
 801f026:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 801f028:	4829      	ldr	r0, [pc, #164]	; (801f0d0 <_ZN10MessageBus6defineI22Handling_GripperPacketEEbh+0xb8>)
 801f02a:	f7ff fcb9 	bl	801e9a0 <_ZNKSt9type_info9hash_codeEv>
 801f02e:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 801f030:	68fb      	ldr	r3, [r7, #12]
 801f032:	b2db      	uxtb	r3, r3
 801f034:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 801f036:	78fb      	ldrb	r3, [r7, #3]
 801f038:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801f03c:	687a      	ldr	r2, [r7, #4]
 801f03e:	00db      	lsls	r3, r3, #3
 801f040:	4413      	add	r3, r2
 801f042:	689b      	ldr	r3, [r3, #8]
 801f044:	2b00      	cmp	r3, #0
 801f046:	d001      	beq.n	801f04c <_ZN10MessageBus6defineI22Handling_GripperPacketEEbh+0x34>
		return false; // Packet ID already in use
 801f048:	2300      	movs	r3, #0
 801f04a:	e03c      	b.n	801f0c6 <_ZN10MessageBus6defineI22Handling_GripperPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 801f04c:	693b      	ldr	r3, [r7, #16]
 801f04e:	2bff      	cmp	r3, #255	; 0xff
 801f050:	d901      	bls.n	801f056 <_ZN10MessageBus6defineI22Handling_GripperPacketEEbh+0x3e>
		return false; // Packet size too large
 801f052:	2300      	movs	r3, #0
 801f054:	e037      	b.n	801f0c6 <_ZN10MessageBus6defineI22Handling_GripperPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 801f056:	687a      	ldr	r2, [r7, #4]
 801f058:	697b      	ldr	r3, [r7, #20]
 801f05a:	3380      	adds	r3, #128	; 0x80
 801f05c:	009b      	lsls	r3, r3, #2
 801f05e:	4413      	add	r3, r2
 801f060:	685b      	ldr	r3, [r3, #4]
 801f062:	2b00      	cmp	r3, #0
 801f064:	d015      	beq.n	801f092 <_ZN10MessageBus6defineI22Handling_GripperPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 801f066:	687a      	ldr	r2, [r7, #4]
 801f068:	697b      	ldr	r3, [r7, #20]
 801f06a:	3380      	adds	r3, #128	; 0x80
 801f06c:	009b      	lsls	r3, r3, #2
 801f06e:	4413      	add	r3, r2
 801f070:	685b      	ldr	r3, [r3, #4]
 801f072:	685b      	ldr	r3, [r3, #4]
 801f074:	68fa      	ldr	r2, [r7, #12]
 801f076:	429a      	cmp	r2, r3
 801f078:	d101      	bne.n	801f07e <_ZN10MessageBus6defineI22Handling_GripperPacketEEbh+0x66>
			return false; // Packet type already defined
 801f07a:	2300      	movs	r3, #0
 801f07c:	e023      	b.n	801f0c6 <_ZN10MessageBus6defineI22Handling_GripperPacketEEbh+0xae>
		insertion_point++;
 801f07e:	697b      	ldr	r3, [r7, #20]
 801f080:	3301      	adds	r3, #1
 801f082:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 801f084:	697b      	ldr	r3, [r7, #20]
 801f086:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801f08a:	d1e4      	bne.n	801f056 <_ZN10MessageBus6defineI22Handling_GripperPacketEEbh+0x3e>
			insertion_point = 0;
 801f08c:	2300      	movs	r3, #0
 801f08e:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 801f090:	e7e1      	b.n	801f056 <_ZN10MessageBus6defineI22Handling_GripperPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 801f092:	78fb      	ldrb	r3, [r7, #3]
 801f094:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801f098:	00db      	lsls	r3, r3, #3
 801f09a:	687a      	ldr	r2, [r7, #4]
 801f09c:	4413      	add	r3, r2
 801f09e:	3304      	adds	r3, #4
 801f0a0:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 801f0a2:	68bb      	ldr	r3, [r7, #8]
 801f0a4:	78fa      	ldrb	r2, [r7, #3]
 801f0a6:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 801f0a8:	693b      	ldr	r3, [r7, #16]
 801f0aa:	b2da      	uxtb	r2, r3
 801f0ac:	68bb      	ldr	r3, [r7, #8]
 801f0ae:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 801f0b0:	68bb      	ldr	r3, [r7, #8]
 801f0b2:	68fa      	ldr	r2, [r7, #12]
 801f0b4:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 801f0b6:	687a      	ldr	r2, [r7, #4]
 801f0b8:	697b      	ldr	r3, [r7, #20]
 801f0ba:	3380      	adds	r3, #128	; 0x80
 801f0bc:	009b      	lsls	r3, r3, #2
 801f0be:	4413      	add	r3, r2
 801f0c0:	68ba      	ldr	r2, [r7, #8]
 801f0c2:	605a      	str	r2, [r3, #4]
	return true;
 801f0c4:	2301      	movs	r3, #1
}
 801f0c6:	4618      	mov	r0, r3
 801f0c8:	3718      	adds	r7, #24
 801f0ca:	46bd      	mov	sp, r7
 801f0cc:	bd80      	pop	{r7, pc}
 801f0ce:	bf00      	nop
 801f0d0:	080272a8 	.word	0x080272a8

0801f0d4 <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 801f0d4:	b580      	push	{r7, lr}
 801f0d6:	b086      	sub	sp, #24
 801f0d8:	af00      	add	r7, sp, #0
 801f0da:	6078      	str	r0, [r7, #4]
 801f0dc:	460b      	mov	r3, r1
 801f0de:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 801f0e0:	2310      	movs	r3, #16
 801f0e2:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 801f0e4:	4829      	ldr	r0, [pc, #164]	; (801f18c <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0xb8>)
 801f0e6:	f7ff fc5b 	bl	801e9a0 <_ZNKSt9type_info9hash_codeEv>
 801f0ea:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 801f0ec:	68fb      	ldr	r3, [r7, #12]
 801f0ee:	b2db      	uxtb	r3, r3
 801f0f0:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 801f0f2:	78fb      	ldrb	r3, [r7, #3]
 801f0f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801f0f8:	687a      	ldr	r2, [r7, #4]
 801f0fa:	00db      	lsls	r3, r3, #3
 801f0fc:	4413      	add	r3, r2
 801f0fe:	689b      	ldr	r3, [r3, #8]
 801f100:	2b00      	cmp	r3, #0
 801f102:	d001      	beq.n	801f108 <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0x34>
		return false; // Packet ID already in use
 801f104:	2300      	movs	r3, #0
 801f106:	e03c      	b.n	801f182 <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 801f108:	693b      	ldr	r3, [r7, #16]
 801f10a:	2bff      	cmp	r3, #255	; 0xff
 801f10c:	d901      	bls.n	801f112 <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0x3e>
		return false; // Packet size too large
 801f10e:	2300      	movs	r3, #0
 801f110:	e037      	b.n	801f182 <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 801f112:	687a      	ldr	r2, [r7, #4]
 801f114:	697b      	ldr	r3, [r7, #20]
 801f116:	3380      	adds	r3, #128	; 0x80
 801f118:	009b      	lsls	r3, r3, #2
 801f11a:	4413      	add	r3, r2
 801f11c:	685b      	ldr	r3, [r3, #4]
 801f11e:	2b00      	cmp	r3, #0
 801f120:	d015      	beq.n	801f14e <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 801f122:	687a      	ldr	r2, [r7, #4]
 801f124:	697b      	ldr	r3, [r7, #20]
 801f126:	3380      	adds	r3, #128	; 0x80
 801f128:	009b      	lsls	r3, r3, #2
 801f12a:	4413      	add	r3, r2
 801f12c:	685b      	ldr	r3, [r3, #4]
 801f12e:	685b      	ldr	r3, [r3, #4]
 801f130:	68fa      	ldr	r2, [r7, #12]
 801f132:	429a      	cmp	r2, r3
 801f134:	d101      	bne.n	801f13a <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0x66>
			return false; // Packet type already defined
 801f136:	2300      	movs	r3, #0
 801f138:	e023      	b.n	801f182 <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0xae>
		insertion_point++;
 801f13a:	697b      	ldr	r3, [r7, #20]
 801f13c:	3301      	adds	r3, #1
 801f13e:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 801f140:	697b      	ldr	r3, [r7, #20]
 801f142:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801f146:	d1e4      	bne.n	801f112 <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0x3e>
			insertion_point = 0;
 801f148:	2300      	movs	r3, #0
 801f14a:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 801f14c:	e7e1      	b.n	801f112 <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 801f14e:	78fb      	ldrb	r3, [r7, #3]
 801f150:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801f154:	00db      	lsls	r3, r3, #3
 801f156:	687a      	ldr	r2, [r7, #4]
 801f158:	4413      	add	r3, r2
 801f15a:	3304      	adds	r3, #4
 801f15c:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 801f15e:	68bb      	ldr	r3, [r7, #8]
 801f160:	78fa      	ldrb	r2, [r7, #3]
 801f162:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 801f164:	693b      	ldr	r3, [r7, #16]
 801f166:	b2da      	uxtb	r2, r3
 801f168:	68bb      	ldr	r3, [r7, #8]
 801f16a:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 801f16c:	68bb      	ldr	r3, [r7, #8]
 801f16e:	68fa      	ldr	r2, [r7, #12]
 801f170:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 801f172:	687a      	ldr	r2, [r7, #4]
 801f174:	697b      	ldr	r3, [r7, #20]
 801f176:	3380      	adds	r3, #128	; 0x80
 801f178:	009b      	lsls	r3, r3, #2
 801f17a:	4413      	add	r3, r2
 801f17c:	68ba      	ldr	r2, [r7, #8]
 801f17e:	605a      	str	r2, [r3, #4]
	return true;
 801f180:	2301      	movs	r3, #1
}
 801f182:	4618      	mov	r0, r3
 801f184:	3718      	adds	r7, #24
 801f186:	46bd      	mov	sp, r7
 801f188:	bd80      	pop	{r7, pc}
 801f18a:	bf00      	nop
 801f18c:	08027288 	.word	0x08027288

0801f190 <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 801f190:	b580      	push	{r7, lr}
 801f192:	b086      	sub	sp, #24
 801f194:	af00      	add	r7, sp, #0
 801f196:	6078      	str	r0, [r7, #4]
 801f198:	460b      	mov	r3, r1
 801f19a:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 801f19c:	2310      	movs	r3, #16
 801f19e:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 801f1a0:	4829      	ldr	r0, [pc, #164]	; (801f248 <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0xb8>)
 801f1a2:	f7ff fbfd 	bl	801e9a0 <_ZNKSt9type_info9hash_codeEv>
 801f1a6:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 801f1a8:	68fb      	ldr	r3, [r7, #12]
 801f1aa:	b2db      	uxtb	r3, r3
 801f1ac:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 801f1ae:	78fb      	ldrb	r3, [r7, #3]
 801f1b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801f1b4:	687a      	ldr	r2, [r7, #4]
 801f1b6:	00db      	lsls	r3, r3, #3
 801f1b8:	4413      	add	r3, r2
 801f1ba:	689b      	ldr	r3, [r3, #8]
 801f1bc:	2b00      	cmp	r3, #0
 801f1be:	d001      	beq.n	801f1c4 <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0x34>
		return false; // Packet ID already in use
 801f1c0:	2300      	movs	r3, #0
 801f1c2:	e03c      	b.n	801f23e <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 801f1c4:	693b      	ldr	r3, [r7, #16]
 801f1c6:	2bff      	cmp	r3, #255	; 0xff
 801f1c8:	d901      	bls.n	801f1ce <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0x3e>
		return false; // Packet size too large
 801f1ca:	2300      	movs	r3, #0
 801f1cc:	e037      	b.n	801f23e <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 801f1ce:	687a      	ldr	r2, [r7, #4]
 801f1d0:	697b      	ldr	r3, [r7, #20]
 801f1d2:	3380      	adds	r3, #128	; 0x80
 801f1d4:	009b      	lsls	r3, r3, #2
 801f1d6:	4413      	add	r3, r2
 801f1d8:	685b      	ldr	r3, [r3, #4]
 801f1da:	2b00      	cmp	r3, #0
 801f1dc:	d015      	beq.n	801f20a <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 801f1de:	687a      	ldr	r2, [r7, #4]
 801f1e0:	697b      	ldr	r3, [r7, #20]
 801f1e2:	3380      	adds	r3, #128	; 0x80
 801f1e4:	009b      	lsls	r3, r3, #2
 801f1e6:	4413      	add	r3, r2
 801f1e8:	685b      	ldr	r3, [r3, #4]
 801f1ea:	685b      	ldr	r3, [r3, #4]
 801f1ec:	68fa      	ldr	r2, [r7, #12]
 801f1ee:	429a      	cmp	r2, r3
 801f1f0:	d101      	bne.n	801f1f6 <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0x66>
			return false; // Packet type already defined
 801f1f2:	2300      	movs	r3, #0
 801f1f4:	e023      	b.n	801f23e <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0xae>
		insertion_point++;
 801f1f6:	697b      	ldr	r3, [r7, #20]
 801f1f8:	3301      	adds	r3, #1
 801f1fa:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 801f1fc:	697b      	ldr	r3, [r7, #20]
 801f1fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801f202:	d1e4      	bne.n	801f1ce <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0x3e>
			insertion_point = 0;
 801f204:	2300      	movs	r3, #0
 801f206:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 801f208:	e7e1      	b.n	801f1ce <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 801f20a:	78fb      	ldrb	r3, [r7, #3]
 801f20c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801f210:	00db      	lsls	r3, r3, #3
 801f212:	687a      	ldr	r2, [r7, #4]
 801f214:	4413      	add	r3, r2
 801f216:	3304      	adds	r3, #4
 801f218:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 801f21a:	68bb      	ldr	r3, [r7, #8]
 801f21c:	78fa      	ldrb	r2, [r7, #3]
 801f21e:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 801f220:	693b      	ldr	r3, [r7, #16]
 801f222:	b2da      	uxtb	r2, r3
 801f224:	68bb      	ldr	r3, [r7, #8]
 801f226:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 801f228:	68bb      	ldr	r3, [r7, #8]
 801f22a:	68fa      	ldr	r2, [r7, #12]
 801f22c:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 801f22e:	687a      	ldr	r2, [r7, #4]
 801f230:	697b      	ldr	r3, [r7, #20]
 801f232:	3380      	adds	r3, #128	; 0x80
 801f234:	009b      	lsls	r3, r3, #2
 801f236:	4413      	add	r3, r2
 801f238:	68ba      	ldr	r2, [r7, #8]
 801f23a:	605a      	str	r2, [r3, #4]
	return true;
 801f23c:	2301      	movs	r3, #1
}
 801f23e:	4618      	mov	r0, r3
 801f240:	3718      	adds	r7, #24
 801f242:	46bd      	mov	sp, r7
 801f244:	bd80      	pop	{r7, pc}
 801f246:	bf00      	nop
 801f248:	08027268 	.word	0x08027268

0801f24c <_ZN10MessageBus6defineI18Power_SystemPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 801f24c:	b580      	push	{r7, lr}
 801f24e:	b086      	sub	sp, #24
 801f250:	af00      	add	r7, sp, #0
 801f252:	6078      	str	r0, [r7, #4]
 801f254:	460b      	mov	r3, r1
 801f256:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 801f258:	2305      	movs	r3, #5
 801f25a:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 801f25c:	4829      	ldr	r0, [pc, #164]	; (801f304 <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0xb8>)
 801f25e:	f7ff fb9f 	bl	801e9a0 <_ZNKSt9type_info9hash_codeEv>
 801f262:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 801f264:	68fb      	ldr	r3, [r7, #12]
 801f266:	b2db      	uxtb	r3, r3
 801f268:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 801f26a:	78fb      	ldrb	r3, [r7, #3]
 801f26c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801f270:	687a      	ldr	r2, [r7, #4]
 801f272:	00db      	lsls	r3, r3, #3
 801f274:	4413      	add	r3, r2
 801f276:	689b      	ldr	r3, [r3, #8]
 801f278:	2b00      	cmp	r3, #0
 801f27a:	d001      	beq.n	801f280 <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0x34>
		return false; // Packet ID already in use
 801f27c:	2300      	movs	r3, #0
 801f27e:	e03c      	b.n	801f2fa <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 801f280:	693b      	ldr	r3, [r7, #16]
 801f282:	2bff      	cmp	r3, #255	; 0xff
 801f284:	d901      	bls.n	801f28a <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0x3e>
		return false; // Packet size too large
 801f286:	2300      	movs	r3, #0
 801f288:	e037      	b.n	801f2fa <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 801f28a:	687a      	ldr	r2, [r7, #4]
 801f28c:	697b      	ldr	r3, [r7, #20]
 801f28e:	3380      	adds	r3, #128	; 0x80
 801f290:	009b      	lsls	r3, r3, #2
 801f292:	4413      	add	r3, r2
 801f294:	685b      	ldr	r3, [r3, #4]
 801f296:	2b00      	cmp	r3, #0
 801f298:	d015      	beq.n	801f2c6 <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 801f29a:	687a      	ldr	r2, [r7, #4]
 801f29c:	697b      	ldr	r3, [r7, #20]
 801f29e:	3380      	adds	r3, #128	; 0x80
 801f2a0:	009b      	lsls	r3, r3, #2
 801f2a2:	4413      	add	r3, r2
 801f2a4:	685b      	ldr	r3, [r3, #4]
 801f2a6:	685b      	ldr	r3, [r3, #4]
 801f2a8:	68fa      	ldr	r2, [r7, #12]
 801f2aa:	429a      	cmp	r2, r3
 801f2ac:	d101      	bne.n	801f2b2 <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0x66>
			return false; // Packet type already defined
 801f2ae:	2300      	movs	r3, #0
 801f2b0:	e023      	b.n	801f2fa <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0xae>
		insertion_point++;
 801f2b2:	697b      	ldr	r3, [r7, #20]
 801f2b4:	3301      	adds	r3, #1
 801f2b6:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 801f2b8:	697b      	ldr	r3, [r7, #20]
 801f2ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801f2be:	d1e4      	bne.n	801f28a <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0x3e>
			insertion_point = 0;
 801f2c0:	2300      	movs	r3, #0
 801f2c2:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 801f2c4:	e7e1      	b.n	801f28a <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 801f2c6:	78fb      	ldrb	r3, [r7, #3]
 801f2c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801f2cc:	00db      	lsls	r3, r3, #3
 801f2ce:	687a      	ldr	r2, [r7, #4]
 801f2d0:	4413      	add	r3, r2
 801f2d2:	3304      	adds	r3, #4
 801f2d4:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 801f2d6:	68bb      	ldr	r3, [r7, #8]
 801f2d8:	78fa      	ldrb	r2, [r7, #3]
 801f2da:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 801f2dc:	693b      	ldr	r3, [r7, #16]
 801f2de:	b2da      	uxtb	r2, r3
 801f2e0:	68bb      	ldr	r3, [r7, #8]
 801f2e2:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 801f2e4:	68bb      	ldr	r3, [r7, #8]
 801f2e6:	68fa      	ldr	r2, [r7, #12]
 801f2e8:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 801f2ea:	687a      	ldr	r2, [r7, #4]
 801f2ec:	697b      	ldr	r3, [r7, #20]
 801f2ee:	3380      	adds	r3, #128	; 0x80
 801f2f0:	009b      	lsls	r3, r3, #2
 801f2f2:	4413      	add	r3, r2
 801f2f4:	68ba      	ldr	r2, [r7, #8]
 801f2f6:	605a      	str	r2, [r3, #4]
	return true;
 801f2f8:	2301      	movs	r3, #1
}
 801f2fa:	4618      	mov	r0, r3
 801f2fc:	3718      	adds	r7, #24
 801f2fe:	46bd      	mov	sp, r7
 801f300:	bd80      	pop	{r7, pc}
 801f302:	bf00      	nop
 801f304:	08027248 	.word	0x08027248

0801f308 <_ZN10MessageBus6defineI21Science_MeasurePacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 801f308:	b580      	push	{r7, lr}
 801f30a:	b086      	sub	sp, #24
 801f30c:	af00      	add	r7, sp, #0
 801f30e:	6078      	str	r0, [r7, #4]
 801f310:	460b      	mov	r3, r1
 801f312:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 801f314:	2304      	movs	r3, #4
 801f316:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 801f318:	4829      	ldr	r0, [pc, #164]	; (801f3c0 <_ZN10MessageBus6defineI21Science_MeasurePacketEEbh+0xb8>)
 801f31a:	f7ff fb41 	bl	801e9a0 <_ZNKSt9type_info9hash_codeEv>
 801f31e:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 801f320:	68fb      	ldr	r3, [r7, #12]
 801f322:	b2db      	uxtb	r3, r3
 801f324:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 801f326:	78fb      	ldrb	r3, [r7, #3]
 801f328:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801f32c:	687a      	ldr	r2, [r7, #4]
 801f32e:	00db      	lsls	r3, r3, #3
 801f330:	4413      	add	r3, r2
 801f332:	689b      	ldr	r3, [r3, #8]
 801f334:	2b00      	cmp	r3, #0
 801f336:	d001      	beq.n	801f33c <_ZN10MessageBus6defineI21Science_MeasurePacketEEbh+0x34>
		return false; // Packet ID already in use
 801f338:	2300      	movs	r3, #0
 801f33a:	e03c      	b.n	801f3b6 <_ZN10MessageBus6defineI21Science_MeasurePacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 801f33c:	693b      	ldr	r3, [r7, #16]
 801f33e:	2bff      	cmp	r3, #255	; 0xff
 801f340:	d901      	bls.n	801f346 <_ZN10MessageBus6defineI21Science_MeasurePacketEEbh+0x3e>
		return false; // Packet size too large
 801f342:	2300      	movs	r3, #0
 801f344:	e037      	b.n	801f3b6 <_ZN10MessageBus6defineI21Science_MeasurePacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 801f346:	687a      	ldr	r2, [r7, #4]
 801f348:	697b      	ldr	r3, [r7, #20]
 801f34a:	3380      	adds	r3, #128	; 0x80
 801f34c:	009b      	lsls	r3, r3, #2
 801f34e:	4413      	add	r3, r2
 801f350:	685b      	ldr	r3, [r3, #4]
 801f352:	2b00      	cmp	r3, #0
 801f354:	d015      	beq.n	801f382 <_ZN10MessageBus6defineI21Science_MeasurePacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 801f356:	687a      	ldr	r2, [r7, #4]
 801f358:	697b      	ldr	r3, [r7, #20]
 801f35a:	3380      	adds	r3, #128	; 0x80
 801f35c:	009b      	lsls	r3, r3, #2
 801f35e:	4413      	add	r3, r2
 801f360:	685b      	ldr	r3, [r3, #4]
 801f362:	685b      	ldr	r3, [r3, #4]
 801f364:	68fa      	ldr	r2, [r7, #12]
 801f366:	429a      	cmp	r2, r3
 801f368:	d101      	bne.n	801f36e <_ZN10MessageBus6defineI21Science_MeasurePacketEEbh+0x66>
			return false; // Packet type already defined
 801f36a:	2300      	movs	r3, #0
 801f36c:	e023      	b.n	801f3b6 <_ZN10MessageBus6defineI21Science_MeasurePacketEEbh+0xae>
		insertion_point++;
 801f36e:	697b      	ldr	r3, [r7, #20]
 801f370:	3301      	adds	r3, #1
 801f372:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 801f374:	697b      	ldr	r3, [r7, #20]
 801f376:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801f37a:	d1e4      	bne.n	801f346 <_ZN10MessageBus6defineI21Science_MeasurePacketEEbh+0x3e>
			insertion_point = 0;
 801f37c:	2300      	movs	r3, #0
 801f37e:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 801f380:	e7e1      	b.n	801f346 <_ZN10MessageBus6defineI21Science_MeasurePacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 801f382:	78fb      	ldrb	r3, [r7, #3]
 801f384:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801f388:	00db      	lsls	r3, r3, #3
 801f38a:	687a      	ldr	r2, [r7, #4]
 801f38c:	4413      	add	r3, r2
 801f38e:	3304      	adds	r3, #4
 801f390:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 801f392:	68bb      	ldr	r3, [r7, #8]
 801f394:	78fa      	ldrb	r2, [r7, #3]
 801f396:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 801f398:	693b      	ldr	r3, [r7, #16]
 801f39a:	b2da      	uxtb	r2, r3
 801f39c:	68bb      	ldr	r3, [r7, #8]
 801f39e:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 801f3a0:	68bb      	ldr	r3, [r7, #8]
 801f3a2:	68fa      	ldr	r2, [r7, #12]
 801f3a4:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 801f3a6:	687a      	ldr	r2, [r7, #4]
 801f3a8:	697b      	ldr	r3, [r7, #20]
 801f3aa:	3380      	adds	r3, #128	; 0x80
 801f3ac:	009b      	lsls	r3, r3, #2
 801f3ae:	4413      	add	r3, r2
 801f3b0:	68ba      	ldr	r2, [r7, #8]
 801f3b2:	605a      	str	r2, [r3, #4]
	return true;
 801f3b4:	2301      	movs	r3, #1
}
 801f3b6:	4618      	mov	r0, r3
 801f3b8:	3718      	adds	r7, #24
 801f3ba:	46bd      	mov	sp, r7
 801f3bc:	bd80      	pop	{r7, pc}
 801f3be:	bf00      	nop
 801f3c0:	08027228 	.word	0x08027228

0801f3c4 <_ZN10MessageBus4sendEP16PacketDefinitionPh>:
	PacketDefinition* def = retrieve(hash);

	return send(def, (uint8_t*) message);
}

bool MessageBus::send(PacketDefinition* def, uint8_t* data) {
 801f3c4:	b580      	push	{r7, lr}
 801f3c6:	b086      	sub	sp, #24
 801f3c8:	af00      	add	r7, sp, #0
 801f3ca:	60f8      	str	r0, [r7, #12]
 801f3cc:	60b9      	str	r1, [r7, #8]
 801f3ce:	607a      	str	r2, [r7, #4]
	if(def != nullptr) {
 801f3d0:	68bb      	ldr	r3, [r7, #8]
 801f3d2:	2b00      	cmp	r3, #0
 801f3d4:	d031      	beq.n	801f43a <_ZN10MessageBus4sendEP16PacketDefinitionPh+0x76>
		uint32_t data_bytes_written = 0;
 801f3d6:	2300      	movs	r3, #0
 801f3d8:	617b      	str	r3, [r7, #20]

		while(data_bytes_written < def->size) {
 801f3da:	68bb      	ldr	r3, [r7, #8]
 801f3dc:	785b      	ldrb	r3, [r3, #1]
 801f3de:	461a      	mov	r2, r3
 801f3e0:	697b      	ldr	r3, [r7, #20]
 801f3e2:	4293      	cmp	r3, r2
 801f3e4:	d227      	bcs.n	801f436 <_ZN10MessageBus4sendEP16PacketDefinitionPh+0x72>
			append(&def->id, 1); // Write the packet ID for each transmission frame.
 801f3e6:	68fb      	ldr	r3, [r7, #12]
 801f3e8:	681b      	ldr	r3, [r3, #0]
 801f3ea:	3308      	adds	r3, #8
 801f3ec:	681b      	ldr	r3, [r3, #0]
 801f3ee:	68b9      	ldr	r1, [r7, #8]
 801f3f0:	2201      	movs	r2, #1
 801f3f2:	68f8      	ldr	r0, [r7, #12]
 801f3f4:	4798      	blx	r3
							     // This is only to facilitate the packet reconstruction and should not increment data_bytes_written.

			uint32_t new_bytes = append(data + data_bytes_written, def->size - data_bytes_written); // Send the data
 801f3f6:	68fb      	ldr	r3, [r7, #12]
 801f3f8:	681b      	ldr	r3, [r3, #0]
 801f3fa:	3308      	adds	r3, #8
 801f3fc:	681b      	ldr	r3, [r3, #0]
 801f3fe:	6879      	ldr	r1, [r7, #4]
 801f400:	697a      	ldr	r2, [r7, #20]
 801f402:	4411      	add	r1, r2
 801f404:	68ba      	ldr	r2, [r7, #8]
 801f406:	7852      	ldrb	r2, [r2, #1]
 801f408:	4610      	mov	r0, r2
 801f40a:	697a      	ldr	r2, [r7, #20]
 801f40c:	1a82      	subs	r2, r0, r2
 801f40e:	68f8      	ldr	r0, [r7, #12]
 801f410:	4798      	blx	r3
 801f412:	4603      	mov	r3, r0
 801f414:	613b      	str	r3, [r7, #16]

			if(new_bytes == 0) {
 801f416:	693b      	ldr	r3, [r7, #16]
 801f418:	2b00      	cmp	r3, #0
 801f41a:	d101      	bne.n	801f420 <_ZN10MessageBus4sendEP16PacketDefinitionPh+0x5c>
				return false;
 801f41c:	2300      	movs	r3, #0
 801f41e:	e00d      	b.n	801f43c <_ZN10MessageBus4sendEP16PacketDefinitionPh+0x78>
			} else {
				transmit();
 801f420:	68fb      	ldr	r3, [r7, #12]
 801f422:	681b      	ldr	r3, [r3, #0]
 801f424:	330c      	adds	r3, #12
 801f426:	681b      	ldr	r3, [r3, #0]
 801f428:	68f8      	ldr	r0, [r7, #12]
 801f42a:	4798      	blx	r3
				data_bytes_written += new_bytes;
 801f42c:	697a      	ldr	r2, [r7, #20]
 801f42e:	693b      	ldr	r3, [r7, #16]
 801f430:	4413      	add	r3, r2
 801f432:	617b      	str	r3, [r7, #20]
		while(data_bytes_written < def->size) {
 801f434:	e7d1      	b.n	801f3da <_ZN10MessageBus4sendEP16PacketDefinitionPh+0x16>
			}
		}

		return true;
 801f436:	2301      	movs	r3, #1
 801f438:	e000      	b.n	801f43c <_ZN10MessageBus4sendEP16PacketDefinitionPh+0x78>
	}

	return false;
 801f43a:	2300      	movs	r3, #0
}
 801f43c:	4618      	mov	r0, r3
 801f43e:	3718      	adds	r7, #24
 801f440:	46bd      	mov	sp, r7
 801f442:	bd80      	pop	{r7, pc}

0801f444 <_ZN10MessageBus7receiveEhPhm>:
 *
 * Provided an external thread calls this method with a buffer to the next incoming message,
 * dispatches the message to the appropriate message handlers.
 */
#include "Debug/Debug.h"
void MessageBus::receive(uint8_t sender_id, uint8_t *pointer, uint32_t length) {
 801f444:	b580      	push	{r7, lr}
 801f446:	b088      	sub	sp, #32
 801f448:	af00      	add	r7, sp, #0
 801f44a:	60f8      	str	r0, [r7, #12]
 801f44c:	607a      	str	r2, [r7, #4]
 801f44e:	603b      	str	r3, [r7, #0]
 801f450:	460b      	mov	r3, r1
 801f452:	72fb      	strb	r3, [r7, #11]
	if(length > 0) {
 801f454:	683b      	ldr	r3, [r7, #0]
 801f456:	2b00      	cmp	r3, #0
 801f458:	d077      	beq.n	801f54a <_ZN10MessageBus7receiveEhPhm+0x106>
		// Safe-cast verification
		uint8_t packet_id = *pointer++;
 801f45a:	687b      	ldr	r3, [r7, #4]
 801f45c:	1c5a      	adds	r2, r3, #1
 801f45e:	607a      	str	r2, [r7, #4]
 801f460:	781b      	ldrb	r3, [r3, #0]
 801f462:	777b      	strb	r3, [r7, #29]


		PacketDefinition* def = &definitions_by_id[packet_id & 0b00111111];
 801f464:	7f7b      	ldrb	r3, [r7, #29]
 801f466:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801f46a:	00db      	lsls	r3, r3, #3
 801f46c:	68fa      	ldr	r2, [r7, #12]
 801f46e:	4413      	add	r3, r2
 801f470:	3304      	adds	r3, #4
 801f472:	61bb      	str	r3, [r7, #24]
		ReconstructionBuffer* indexable_buffer = &reconstruction_buffers[sender_id & 0b00111111];
 801f474:	7afb      	ldrb	r3, [r7, #11]
 801f476:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801f47a:	3306      	adds	r3, #6
 801f47c:	021b      	lsls	r3, r3, #8
 801f47e:	68fa      	ldr	r2, [r7, #12]
 801f480:	4413      	add	r3, r2
 801f482:	3304      	adds	r3, #4
 801f484:	617b      	str	r3, [r7, #20]

		if(indexable_buffer->index + length > max_packet_size) {
 801f486:	697b      	ldr	r3, [r7, #20]
 801f488:	f893 30ff 	ldrb.w	r3, [r3, #255]	; 0xff
 801f48c:	461a      	mov	r2, r3
 801f48e:	683b      	ldr	r3, [r7, #0]
 801f490:	4413      	add	r3, r2
 801f492:	2bff      	cmp	r3, #255	; 0xff
 801f494:	d904      	bls.n	801f4a0 <_ZN10MessageBus7receiveEhPhm+0x5c>
			indexable_buffer->index = 0; // Corrupted packet
 801f496:	697b      	ldr	r3, [r7, #20]
 801f498:	2200      	movs	r2, #0
 801f49a:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
			return;
 801f49e:	e054      	b.n	801f54a <_ZN10MessageBus7receiveEhPhm+0x106>
		}

		for(uint16_t i = 0; i < length - 1; i++) {
 801f4a0:	2300      	movs	r3, #0
 801f4a2:	83fb      	strh	r3, [r7, #30]
 801f4a4:	8bfa      	ldrh	r2, [r7, #30]
 801f4a6:	683b      	ldr	r3, [r7, #0]
 801f4a8:	3b01      	subs	r3, #1
 801f4aa:	429a      	cmp	r2, r3
 801f4ac:	d211      	bcs.n	801f4d2 <_ZN10MessageBus7receiveEhPhm+0x8e>
			indexable_buffer->buffer[indexable_buffer->index++] = *pointer++;
 801f4ae:	687b      	ldr	r3, [r7, #4]
 801f4b0:	1c5a      	adds	r2, r3, #1
 801f4b2:	607a      	str	r2, [r7, #4]
 801f4b4:	697a      	ldr	r2, [r7, #20]
 801f4b6:	f892 20ff 	ldrb.w	r2, [r2, #255]	; 0xff
 801f4ba:	1c51      	adds	r1, r2, #1
 801f4bc:	b2c8      	uxtb	r0, r1
 801f4be:	6979      	ldr	r1, [r7, #20]
 801f4c0:	f881 00ff 	strb.w	r0, [r1, #255]	; 0xff
 801f4c4:	7819      	ldrb	r1, [r3, #0]
 801f4c6:	697b      	ldr	r3, [r7, #20]
 801f4c8:	5499      	strb	r1, [r3, r2]
		for(uint16_t i = 0; i < length - 1; i++) {
 801f4ca:	8bfb      	ldrh	r3, [r7, #30]
 801f4cc:	3301      	adds	r3, #1
 801f4ce:	83fb      	strh	r3, [r7, #30]
 801f4d0:	e7e8      	b.n	801f4a4 <_ZN10MessageBus7receiveEhPhm+0x60>
		}

		if(indexable_buffer->index >= def->size) {
 801f4d2:	697b      	ldr	r3, [r7, #20]
 801f4d4:	f893 20ff 	ldrb.w	r2, [r3, #255]	; 0xff
 801f4d8:	69bb      	ldr	r3, [r7, #24]
 801f4da:	785b      	ldrb	r3, [r3, #1]
 801f4dc:	429a      	cmp	r2, r3
 801f4de:	d334      	bcc.n	801f54a <_ZN10MessageBus7receiveEhPhm+0x106>
			// Packet is complete. Forward buffer to handler.

			if(handlers[packet_id & 0b00111111] != nullptr) {
 801f4e0:	7f7b      	ldrb	r3, [r7, #29]
 801f4e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801f4e6:	68fa      	ldr	r2, [r7, #12]
 801f4e8:	f503 538c 	add.w	r3, r3, #4480	; 0x1180
 801f4ec:	009b      	lsls	r3, r3, #2
 801f4ee:	4413      	add	r3, r2
 801f4f0:	685b      	ldr	r3, [r3, #4]
 801f4f2:	2b00      	cmp	r3, #0
 801f4f4:	d00c      	beq.n	801f510 <_ZN10MessageBus7receiveEhPhm+0xcc>
				handlers[packet_id & 0b00111111](sender_id, indexable_buffer->buffer);
 801f4f6:	7f7b      	ldrb	r3, [r7, #29]
 801f4f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801f4fc:	68fa      	ldr	r2, [r7, #12]
 801f4fe:	f503 538c 	add.w	r3, r3, #4480	; 0x1180
 801f502:	009b      	lsls	r3, r3, #2
 801f504:	4413      	add	r3, r2
 801f506:	685b      	ldr	r3, [r3, #4]
 801f508:	6979      	ldr	r1, [r7, #20]
 801f50a:	7afa      	ldrb	r2, [r7, #11]
 801f50c:	4610      	mov	r0, r2
 801f50e:	4798      	blx	r3
			}

			if(forwarders[packet_id & 0b00111111] != nullptr) {
 801f510:	7f7b      	ldrb	r3, [r7, #29]
 801f512:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801f516:	68fa      	ldr	r2, [r7, #12]
 801f518:	f503 538e 	add.w	r3, r3, #4544	; 0x11c0
 801f51c:	009b      	lsls	r3, r3, #2
 801f51e:	4413      	add	r3, r2
 801f520:	685b      	ldr	r3, [r3, #4]
 801f522:	2b00      	cmp	r3, #0
 801f524:	d00d      	beq.n	801f542 <_ZN10MessageBus7receiveEhPhm+0xfe>
				forwarders[packet_id & 0b00111111]->send(def, indexable_buffer->buffer);
 801f526:	7f7b      	ldrb	r3, [r7, #29]
 801f528:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801f52c:	68fa      	ldr	r2, [r7, #12]
 801f52e:	f503 538e 	add.w	r3, r3, #4544	; 0x11c0
 801f532:	009b      	lsls	r3, r3, #2
 801f534:	4413      	add	r3, r2
 801f536:	685b      	ldr	r3, [r3, #4]
 801f538:	697a      	ldr	r2, [r7, #20]
 801f53a:	69b9      	ldr	r1, [r7, #24]
 801f53c:	4618      	mov	r0, r3
 801f53e:	f7ff ff41 	bl	801f3c4 <_ZN10MessageBus4sendEP16PacketDefinitionPh>
			}

			indexable_buffer->index = 0;
 801f542:	697b      	ldr	r3, [r7, #20]
 801f544:	2200      	movs	r2, #0
 801f546:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
		}
	}
}
 801f54a:	3720      	adds	r7, #32
 801f54c:	46bd      	mov	sp, r7
 801f54e:	bd80      	pop	{r7, pc}

0801f550 <_ZN10MessageBus8retrieveEj>:

/*
 * Searches a packet definition matching the given type in the hash table.
 */
PacketDefinition* MessageBus::retrieve(size_t hash) {
 801f550:	b480      	push	{r7}
 801f552:	b085      	sub	sp, #20
 801f554:	af00      	add	r7, sp, #0
 801f556:	6078      	str	r0, [r7, #4]
 801f558:	6039      	str	r1, [r7, #0]
	uint32_t searchPoint = hash % 256;
 801f55a:	683b      	ldr	r3, [r7, #0]
 801f55c:	b2db      	uxtb	r3, r3
 801f55e:	60fb      	str	r3, [r7, #12]
	uint32_t searchStart = searchPoint;
 801f560:	68fb      	ldr	r3, [r7, #12]
 801f562:	60bb      	str	r3, [r7, #8]

	while(definitions_by_type[searchPoint] != nullptr) {
 801f564:	687a      	ldr	r2, [r7, #4]
 801f566:	68fb      	ldr	r3, [r7, #12]
 801f568:	3380      	adds	r3, #128	; 0x80
 801f56a:	009b      	lsls	r3, r3, #2
 801f56c:	4413      	add	r3, r2
 801f56e:	685b      	ldr	r3, [r3, #4]
 801f570:	2b00      	cmp	r3, #0
 801f572:	d01f      	beq.n	801f5b4 <_ZN10MessageBus8retrieveEj+0x64>
		if(definitions_by_type[searchPoint]->hash == hash) {
 801f574:	687a      	ldr	r2, [r7, #4]
 801f576:	68fb      	ldr	r3, [r7, #12]
 801f578:	3380      	adds	r3, #128	; 0x80
 801f57a:	009b      	lsls	r3, r3, #2
 801f57c:	4413      	add	r3, r2
 801f57e:	685b      	ldr	r3, [r3, #4]
 801f580:	685b      	ldr	r3, [r3, #4]
 801f582:	683a      	ldr	r2, [r7, #0]
 801f584:	429a      	cmp	r2, r3
 801f586:	d106      	bne.n	801f596 <_ZN10MessageBus8retrieveEj+0x46>
			return definitions_by_type[searchPoint];
 801f588:	687a      	ldr	r2, [r7, #4]
 801f58a:	68fb      	ldr	r3, [r7, #12]
 801f58c:	3380      	adds	r3, #128	; 0x80
 801f58e:	009b      	lsls	r3, r3, #2
 801f590:	4413      	add	r3, r2
 801f592:	685b      	ldr	r3, [r3, #4]
 801f594:	e00f      	b.n	801f5b6 <_ZN10MessageBus8retrieveEj+0x66>
		}

		searchPoint++;
 801f596:	68fb      	ldr	r3, [r7, #12]
 801f598:	3301      	adds	r3, #1
 801f59a:	60fb      	str	r3, [r7, #12]

		if(searchPoint == 256) {
 801f59c:	68fb      	ldr	r3, [r7, #12]
 801f59e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801f5a2:	d101      	bne.n	801f5a8 <_ZN10MessageBus8retrieveEj+0x58>
			searchPoint = 0;
 801f5a4:	2300      	movs	r3, #0
 801f5a6:	60fb      	str	r3, [r7, #12]
		}

		if(searchStart == searchPoint) {
 801f5a8:	68ba      	ldr	r2, [r7, #8]
 801f5aa:	68fb      	ldr	r3, [r7, #12]
 801f5ac:	429a      	cmp	r2, r3
 801f5ae:	d000      	beq.n	801f5b2 <_ZN10MessageBus8retrieveEj+0x62>
	while(definitions_by_type[searchPoint] != nullptr) {
 801f5b0:	e7d8      	b.n	801f564 <_ZN10MessageBus8retrieveEj+0x14>
			break; // No packet definition matching the given template type
 801f5b2:	bf00      	nop
		}
	}

	return nullptr;
 801f5b4:	2300      	movs	r3, #0
}
 801f5b6:	4618      	mov	r0, r3
 801f5b8:	3714      	adds	r7, #20
 801f5ba:	46bd      	mov	sp, r7
 801f5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f5c0:	4770      	bx	lr
	...

0801f5c4 <_ZN10NetworkBusC1EP8IODriver>:


#include "NetworkBus.h"
#include "Protocol/Protocol.h"

NetworkBus::NetworkBus(IODriver* driver) : IOBus(driver, network_frame, sizeof(network_frame)) {
 801f5c4:	b580      	push	{r7, lr}
 801f5c6:	b082      	sub	sp, #8
 801f5c8:	af00      	add	r7, sp, #0
 801f5ca:	6078      	str	r0, [r7, #4]
 801f5cc:	6039      	str	r1, [r7, #0]
 801f5ce:	6878      	ldr	r0, [r7, #4]
 801f5d0:	687b      	ldr	r3, [r7, #4]
 801f5d2:	f644 0211 	movw	r2, #18449	; 0x4811
 801f5d6:	441a      	add	r2, r3
 801f5d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 801f5dc:	6839      	ldr	r1, [r7, #0]
 801f5de:	f7fd ff13 	bl	801d408 <_ZN5IOBusC1EP8IODriverPhm>
 801f5e2:	4a24      	ldr	r2, [pc, #144]	; (801f674 <_ZN10NetworkBusC1EP8IODriver+0xb0>)
 801f5e4:	687b      	ldr	r3, [r7, #4]
 801f5e6:	601a      	str	r2, [r3, #0]
	define<PingPacket>(0);
 801f5e8:	687b      	ldr	r3, [r7, #4]
 801f5ea:	2100      	movs	r1, #0
 801f5ec:	4618      	mov	r0, r3
 801f5ee:	f7ff f9f3 	bl	801e9d8 <_ZN10MessageBus6defineI10PingPacketEEbh>
	define<RequestPacket>(1);
 801f5f2:	687b      	ldr	r3, [r7, #4]
 801f5f4:	2101      	movs	r1, #1
 801f5f6:	4618      	mov	r0, r3
 801f5f8:	f7ff fa7c 	bl	801eaf4 <_ZN10MessageBus6defineI13RequestPacketEEbh>
	define<ResponsePacket>(2);
 801f5fc:	687b      	ldr	r3, [r7, #4]
 801f5fe:	2102      	movs	r1, #2
 801f600:	4618      	mov	r0, r3
 801f602:	f7ff fad5 	bl	801ebb0 <_ZN10MessageBus6defineI14ResponsePacketEEbh>
	define<ProgressPacket>(3);
 801f606:	687b      	ldr	r3, [r7, #4]
 801f608:	2103      	movs	r1, #3
 801f60a:	4618      	mov	r0, r3
 801f60c:	f7ff fb2e 	bl	801ec6c <_ZN10MessageBus6defineI14ProgressPacketEEbh>
	define<DataPacket>(4);
 801f610:	687b      	ldr	r3, [r7, #4]
 801f612:	2104      	movs	r1, #4
 801f614:	4618      	mov	r0, r3
 801f616:	f7ff fb87 	bl	801ed28 <_ZN10MessageBus6defineI10DataPacketEEbh>
	define<Avionics_BaroTempPacket>(5);
 801f61a:	687b      	ldr	r3, [r7, #4]
 801f61c:	2105      	movs	r1, #5
 801f61e:	4618      	mov	r0, r3
 801f620:	f7ff fc3e 	bl	801eea0 <_ZN10MessageBus6defineI23Avionics_BaroTempPacketEEbh>
	define<Avionics_AccelMagPacket>(6);
 801f624:	687b      	ldr	r3, [r7, #4]
 801f626:	2106      	movs	r1, #6
 801f628:	4618      	mov	r0, r3
 801f62a:	f7ff fc97 	bl	801ef5c <_ZN10MessageBus6defineI23Avionics_AccelMagPacketEEbh>
	define<Handling_GripperPacket>(7);
 801f62e:	687b      	ldr	r3, [r7, #4]
 801f630:	2107      	movs	r1, #7
 801f632:	4618      	mov	r0, r3
 801f634:	f7ff fcf0 	bl	801f018 <_ZN10MessageBus6defineI22Handling_GripperPacketEEbh>
	define<Power_VoltagePacket>(8);
 801f638:	687b      	ldr	r3, [r7, #4]
 801f63a:	2108      	movs	r1, #8
 801f63c:	4618      	mov	r0, r3
 801f63e:	f7ff fd49 	bl	801f0d4 <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh>
	define<Power_CurrentPacket>(9);
 801f642:	687b      	ldr	r3, [r7, #4]
 801f644:	2109      	movs	r1, #9
 801f646:	4618      	mov	r0, r3
 801f648:	f7ff fda2 	bl	801f190 <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh>
	define<Power_SystemPacket>(10);
 801f64c:	687b      	ldr	r3, [r7, #4]
 801f64e:	210a      	movs	r1, #10
 801f650:	4618      	mov	r0, r3
 801f652:	f7ff fdfb 	bl	801f24c <_ZN10MessageBus6defineI18Power_SystemPacketEEbh>
	define<Science_MeasurePacket>(11);
 801f656:	687b      	ldr	r3, [r7, #4]
 801f658:	210b      	movs	r1, #11
 801f65a:	4618      	mov	r0, r3
 801f65c:	f7ff fe54 	bl	801f308 <_ZN10MessageBus6defineI21Science_MeasurePacketEEbh>
	define<ErrorPacket>(63);
 801f660:	687b      	ldr	r3, [r7, #4]
 801f662:	213f      	movs	r1, #63	; 0x3f
 801f664:	4618      	mov	r0, r3
 801f666:	f7ff fbbd 	bl	801ede4 <_ZN10MessageBus6defineI11ErrorPacketEEbh>
}
 801f66a:	687b      	ldr	r3, [r7, #4]
 801f66c:	4618      	mov	r0, r3
 801f66e:	3708      	adds	r7, #8
 801f670:	46bd      	mov	sp, r7
 801f672:	bd80      	pop	{r7, pc}
 801f674:	080273b4 	.word	0x080273b4

0801f678 <_ZN10NetworkBusD1Ev>:
#include "IOBus.h"

#define NETWORK_FRAME_SIZE 256


class NetworkBus : public IOBus {
 801f678:	b580      	push	{r7, lr}
 801f67a:	b082      	sub	sp, #8
 801f67c:	af00      	add	r7, sp, #0
 801f67e:	6078      	str	r0, [r7, #4]
 801f680:	4a05      	ldr	r2, [pc, #20]	; (801f698 <_ZN10NetworkBusD1Ev+0x20>)
 801f682:	687b      	ldr	r3, [r7, #4]
 801f684:	601a      	str	r2, [r3, #0]
 801f686:	687b      	ldr	r3, [r7, #4]
 801f688:	4618      	mov	r0, r3
 801f68a:	f7fe ff2f 	bl	801e4ec <_ZN5IOBusD1Ev>
 801f68e:	687b      	ldr	r3, [r7, #4]
 801f690:	4618      	mov	r0, r3
 801f692:	3708      	adds	r7, #8
 801f694:	46bd      	mov	sp, r7
 801f696:	bd80      	pop	{r7, pc}
 801f698:	080273b4 	.word	0x080273b4

0801f69c <_ZN10NetworkBusD0Ev>:
 801f69c:	b580      	push	{r7, lr}
 801f69e:	b082      	sub	sp, #8
 801f6a0:	af00      	add	r7, sp, #0
 801f6a2:	6078      	str	r0, [r7, #4]
 801f6a4:	6878      	ldr	r0, [r7, #4]
 801f6a6:	f7ff ffe7 	bl	801f678 <_ZN10NetworkBusD1Ev>
 801f6aa:	f644 1114 	movw	r1, #18708	; 0x4914
 801f6ae:	6878      	ldr	r0, [r7, #4]
 801f6b0:	f000 fd85 	bl	80201be <_ZdlPvj>
 801f6b4:	687b      	ldr	r3, [r7, #4]
 801f6b6:	4618      	mov	r0, r3
 801f6b8:	3708      	adds	r7, #8
 801f6ba:	46bd      	mov	sp, r7
 801f6bc:	bd80      	pop	{r7, pc}

0801f6be <_ZN14WatchdogThread4initEv>:
#include "iwdg.h"

#include "Debug/Debug.h"
#include "usart.h"

void WatchdogThread::init() {
 801f6be:	b480      	push	{r7}
 801f6c0:	b083      	sub	sp, #12
 801f6c2:	af00      	add	r7, sp, #0
 801f6c4:	6078      	str	r0, [r7, #4]

}
 801f6c6:	bf00      	nop
 801f6c8:	370c      	adds	r7, #12
 801f6ca:	46bd      	mov	sp, r7
 801f6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f6d0:	4770      	bx	lr

0801f6d2 <_ZN14WatchdogThread4loopEv>:

void WatchdogThread::loop() {
 801f6d2:	b580      	push	{r7, lr}
 801f6d4:	b082      	sub	sp, #8
 801f6d6:	af00      	add	r7, sp, #0
 801f6d8:	6078      	str	r0, [r7, #4]
	HAL_IWDG_Refresh(watchdog_handle);
 801f6da:	687b      	ldr	r3, [r7, #4]
 801f6dc:	68db      	ldr	r3, [r3, #12]
 801f6de:	4618      	mov	r0, r3
 801f6e0:	f7e6 fd8c 	bl	80061fc <HAL_IWDG_Refresh>
	osDelay(100);
 801f6e4:	2064      	movs	r0, #100	; 0x64
 801f6e6:	f7eb fa92 	bl	800ac0e <osDelay>
}
 801f6ea:	bf00      	nop
 801f6ec:	3708      	adds	r7, #8
 801f6ee:	46bd      	mov	sp, r7
 801f6f0:	bd80      	pop	{r7, pc}
	...

0801f6f4 <_ZN6ThreadD1Ev>:
public:
	Thread(const char* name);
	Thread(const char* name, osPriority priority);
	Thread(const char* name, uint32_t stackSize);
	Thread(const char* name, osPriority priority, uint32_t stackSize);
	~Thread() {};
 801f6f4:	b480      	push	{r7}
 801f6f6:	b083      	sub	sp, #12
 801f6f8:	af00      	add	r7, sp, #0
 801f6fa:	6078      	str	r0, [r7, #4]
 801f6fc:	4a04      	ldr	r2, [pc, #16]	; (801f710 <_ZN6ThreadD1Ev+0x1c>)
 801f6fe:	687b      	ldr	r3, [r7, #4]
 801f700:	601a      	str	r2, [r3, #0]
 801f702:	687b      	ldr	r3, [r7, #4]
 801f704:	4618      	mov	r0, r3
 801f706:	370c      	adds	r7, #12
 801f708:	46bd      	mov	sp, r7
 801f70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f70e:	4770      	bx	lr
 801f710:	08027424 	.word	0x08027424

0801f714 <_ZN14WatchdogThreadC1EP18IWDG_HandleTypeDef>:

#include "../Thread.h"

class WatchdogThread : Thread {
public:
	WatchdogThread(IWDG_HandleTypeDef* hiwdg) : Thread("Watchdog"), watchdog_handle(hiwdg) {}
 801f714:	b580      	push	{r7, lr}
 801f716:	b082      	sub	sp, #8
 801f718:	af00      	add	r7, sp, #0
 801f71a:	6078      	str	r0, [r7, #4]
 801f71c:	6039      	str	r1, [r7, #0]
 801f71e:	687b      	ldr	r3, [r7, #4]
 801f720:	4907      	ldr	r1, [pc, #28]	; (801f740 <_ZN14WatchdogThreadC1EP18IWDG_HandleTypeDef+0x2c>)
 801f722:	4618      	mov	r0, r3
 801f724:	f000 f8f9 	bl	801f91a <_ZN6ThreadC1EPKc>
 801f728:	4a06      	ldr	r2, [pc, #24]	; (801f744 <_ZN14WatchdogThreadC1EP18IWDG_HandleTypeDef+0x30>)
 801f72a:	687b      	ldr	r3, [r7, #4]
 801f72c:	601a      	str	r2, [r3, #0]
 801f72e:	687b      	ldr	r3, [r7, #4]
 801f730:	683a      	ldr	r2, [r7, #0]
 801f732:	60da      	str	r2, [r3, #12]
 801f734:	687b      	ldr	r3, [r7, #4]
 801f736:	4618      	mov	r0, r3
 801f738:	3708      	adds	r7, #8
 801f73a:	46bd      	mov	sp, r7
 801f73c:	bd80      	pop	{r7, pc}
 801f73e:	bf00      	nop
 801f740:	08026de0 	.word	0x08026de0
 801f744:	080273e8 	.word	0x080273e8

0801f748 <_ZN14WatchdogThreadD1Ev>:
class WatchdogThread : Thread {
 801f748:	b580      	push	{r7, lr}
 801f74a:	b082      	sub	sp, #8
 801f74c:	af00      	add	r7, sp, #0
 801f74e:	6078      	str	r0, [r7, #4]
 801f750:	4a05      	ldr	r2, [pc, #20]	; (801f768 <_ZN14WatchdogThreadD1Ev+0x20>)
 801f752:	687b      	ldr	r3, [r7, #4]
 801f754:	601a      	str	r2, [r3, #0]
 801f756:	687b      	ldr	r3, [r7, #4]
 801f758:	4618      	mov	r0, r3
 801f75a:	f7ff ffcb 	bl	801f6f4 <_ZN6ThreadD1Ev>
 801f75e:	687b      	ldr	r3, [r7, #4]
 801f760:	4618      	mov	r0, r3
 801f762:	3708      	adds	r7, #8
 801f764:	46bd      	mov	sp, r7
 801f766:	bd80      	pop	{r7, pc}
 801f768:	080273e8 	.word	0x080273e8

0801f76c <__tcf_0>:
#include "i2c.h"
#include "Telemetry.h"
void initCortexM7() {
	MX_I2C1_Init();

	static WatchdogThread watchdog(&hiwdg1);
 801f76c:	b580      	push	{r7, lr}
 801f76e:	af00      	add	r7, sp, #0
 801f770:	4801      	ldr	r0, [pc, #4]	; (801f778 <__tcf_0+0xc>)
 801f772:	f7ff ffe9 	bl	801f748 <_ZN14WatchdogThreadD1Ev>
 801f776:	bd80      	pop	{r7, pc}
 801f778:	240409b8 	.word	0x240409b8

0801f77c <__tcf_1>:
	static LWIPThread lwip("192.168.1.2", 42666);
 801f77c:	b580      	push	{r7, lr}
 801f77e:	af00      	add	r7, sp, #0
 801f780:	4801      	ldr	r0, [pc, #4]	; (801f788 <__tcf_1+0xc>)
 801f782:	f000 f9c9 	bl	801fb18 <_ZN10LWIPThreadD1Ev>
 801f786:	bd80      	pop	{r7, pc}
 801f788:	240409cc 	.word	0x240409cc

0801f78c <initCortexM7>:
void initCortexM7() {
 801f78c:	b580      	push	{r7, lr}
 801f78e:	af00      	add	r7, sp, #0
	MX_I2C1_Init();
 801f790:	f7e1 f964 	bl	8000a5c <MX_I2C1_Init>
	static WatchdogThread watchdog(&hiwdg1);
 801f794:	4b25      	ldr	r3, [pc, #148]	; (801f82c <initCortexM7+0xa0>)
 801f796:	781b      	ldrb	r3, [r3, #0]
 801f798:	f3bf 8f5b 	dmb	ish
 801f79c:	b2db      	uxtb	r3, r3
 801f79e:	f003 0301 	and.w	r3, r3, #1
 801f7a2:	2b00      	cmp	r3, #0
 801f7a4:	bf0c      	ite	eq
 801f7a6:	2301      	moveq	r3, #1
 801f7a8:	2300      	movne	r3, #0
 801f7aa:	b2db      	uxtb	r3, r3
 801f7ac:	2b00      	cmp	r3, #0
 801f7ae:	d014      	beq.n	801f7da <initCortexM7+0x4e>
 801f7b0:	481e      	ldr	r0, [pc, #120]	; (801f82c <initCortexM7+0xa0>)
 801f7b2:	f000 fd3b 	bl	802022c <__cxa_guard_acquire>
 801f7b6:	4603      	mov	r3, r0
 801f7b8:	2b00      	cmp	r3, #0
 801f7ba:	bf14      	ite	ne
 801f7bc:	2301      	movne	r3, #1
 801f7be:	2300      	moveq	r3, #0
 801f7c0:	b2db      	uxtb	r3, r3
 801f7c2:	2b00      	cmp	r3, #0
 801f7c4:	d009      	beq.n	801f7da <initCortexM7+0x4e>
 801f7c6:	491a      	ldr	r1, [pc, #104]	; (801f830 <initCortexM7+0xa4>)
 801f7c8:	481a      	ldr	r0, [pc, #104]	; (801f834 <initCortexM7+0xa8>)
 801f7ca:	f7ff ffa3 	bl	801f714 <_ZN14WatchdogThreadC1EP18IWDG_HandleTypeDef>
 801f7ce:	4817      	ldr	r0, [pc, #92]	; (801f82c <initCortexM7+0xa0>)
 801f7d0:	f000 fd38 	bl	8020244 <__cxa_guard_release>
 801f7d4:	4818      	ldr	r0, [pc, #96]	; (801f838 <initCortexM7+0xac>)
 801f7d6:	f000 fefd 	bl	80205d4 <atexit>
	static LWIPThread lwip("192.168.1.2", 42666);
 801f7da:	4b18      	ldr	r3, [pc, #96]	; (801f83c <initCortexM7+0xb0>)
 801f7dc:	781b      	ldrb	r3, [r3, #0]
 801f7de:	f3bf 8f5b 	dmb	ish
 801f7e2:	b2db      	uxtb	r3, r3
 801f7e4:	f003 0301 	and.w	r3, r3, #1
 801f7e8:	2b00      	cmp	r3, #0
 801f7ea:	bf0c      	ite	eq
 801f7ec:	2301      	moveq	r3, #1
 801f7ee:	2300      	movne	r3, #0
 801f7f0:	b2db      	uxtb	r3, r3
 801f7f2:	2b00      	cmp	r3, #0
 801f7f4:	d016      	beq.n	801f824 <initCortexM7+0x98>
 801f7f6:	4811      	ldr	r0, [pc, #68]	; (801f83c <initCortexM7+0xb0>)
 801f7f8:	f000 fd18 	bl	802022c <__cxa_guard_acquire>
 801f7fc:	4603      	mov	r3, r0
 801f7fe:	2b00      	cmp	r3, #0
 801f800:	bf14      	ite	ne
 801f802:	2301      	movne	r3, #1
 801f804:	2300      	moveq	r3, #0
 801f806:	b2db      	uxtb	r3, r3
 801f808:	2b00      	cmp	r3, #0
 801f80a:	d00b      	beq.n	801f824 <initCortexM7+0x98>
 801f80c:	f24a 62aa 	movw	r2, #42666	; 0xa6aa
 801f810:	490b      	ldr	r1, [pc, #44]	; (801f840 <initCortexM7+0xb4>)
 801f812:	480c      	ldr	r0, [pc, #48]	; (801f844 <initCortexM7+0xb8>)
 801f814:	f000 f93e 	bl	801fa94 <_ZN10LWIPThreadC1EPKct>
 801f818:	4808      	ldr	r0, [pc, #32]	; (801f83c <initCortexM7+0xb0>)
 801f81a:	f000 fd13 	bl	8020244 <__cxa_guard_release>
 801f81e:	480a      	ldr	r0, [pc, #40]	; (801f848 <initCortexM7+0xbc>)
 801f820:	f000 fed8 	bl	80205d4 <atexit>
	//static BarometerThread barometer(&hi2c1);

	setupTelemtry();
 801f824:	f000 f816 	bl	801f854 <_Z13setupTelemtryv>
}
 801f828:	bf00      	nop
 801f82a:	bd80      	pop	{r7, pc}
 801f82c:	240409c8 	.word	0x240409c8
 801f830:	24045574 	.word	0x24045574
 801f834:	240409b8 	.word	0x240409b8
 801f838:	0801f76d 	.word	0x0801f76d
 801f83c:	240409d8 	.word	0x240409d8
 801f840:	08026dec 	.word	0x08026dec
 801f844:	240409cc 	.word	0x240409cc
 801f848:	0801f77d 	.word	0x0801f77d

0801f84c <vApplicationStackOverflowHook>:
#endif

extern "C" {

void vApplicationStackOverflowHook() {
 801f84c:	b480      	push	{r7}
 801f84e:	af00      	add	r7, sp, #0
	while(1);
 801f850:	e7fe      	b.n	801f850 <vApplicationStackOverflowHook+0x4>
	...

0801f854 <_Z13setupTelemtryv>:
BufferedIODriver telemetryDriver(storage, control, 256); // Point to RAM D3
NetworkBus network(&telemetryDriver);



void setupTelemtry() {
 801f854:	b580      	push	{r7, lr}
 801f856:	af00      	add	r7, sp, #0
	network.forward<PingPacket>(&network);
 801f858:	4902      	ldr	r1, [pc, #8]	; (801f864 <_Z13setupTelemtryv+0x10>)
 801f85a:	4802      	ldr	r0, [pc, #8]	; (801f864 <_Z13setupTelemtryv+0x10>)
 801f85c:	f7ff f91a 	bl	801ea94 <_ZN10MessageBus7forwardI10PingPacketEEbPS_>
}
 801f860:	bf00      	nop
 801f862:	bd80      	pop	{r7, pc}
 801f864:	24040a04 	.word	0x24040a04

0801f868 <_Z41__static_initialization_and_destruction_0ii>:
 801f868:	b580      	push	{r7, lr}
 801f86a:	b082      	sub	sp, #8
 801f86c:	af00      	add	r7, sp, #0
 801f86e:	6078      	str	r0, [r7, #4]
 801f870:	6039      	str	r1, [r7, #0]
 801f872:	687b      	ldr	r3, [r7, #4]
 801f874:	2b01      	cmp	r3, #1
 801f876:	d111      	bne.n	801f89c <_Z41__static_initialization_and_destruction_0ii+0x34>
 801f878:	683b      	ldr	r3, [r7, #0]
 801f87a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801f87e:	4293      	cmp	r3, r2
 801f880:	d10c      	bne.n	801f89c <_Z41__static_initialization_and_destruction_0ii+0x34>
BufferedIODriver telemetryDriver(storage, control, 256); // Point to RAM D3
 801f882:	4b0f      	ldr	r3, [pc, #60]	; (801f8c0 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 801f884:	6819      	ldr	r1, [r3, #0]
 801f886:	4b0f      	ldr	r3, [pc, #60]	; (801f8c4 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 801f888:	681a      	ldr	r2, [r3, #0]
 801f88a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801f88e:	480e      	ldr	r0, [pc, #56]	; (801f8c8 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 801f890:	f7fd fb4c 	bl	801cf2c <_ZN16BufferedIODriverC1EPVhS1_j>
NetworkBus network(&telemetryDriver);
 801f894:	490c      	ldr	r1, [pc, #48]	; (801f8c8 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 801f896:	480d      	ldr	r0, [pc, #52]	; (801f8cc <_Z41__static_initialization_and_destruction_0ii+0x64>)
 801f898:	f7ff fe94 	bl	801f5c4 <_ZN10NetworkBusC1EP8IODriver>
 801f89c:	687b      	ldr	r3, [r7, #4]
 801f89e:	2b00      	cmp	r3, #0
 801f8a0:	d10a      	bne.n	801f8b8 <_Z41__static_initialization_and_destruction_0ii+0x50>
 801f8a2:	683b      	ldr	r3, [r7, #0]
 801f8a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801f8a8:	4293      	cmp	r3, r2
 801f8aa:	d105      	bne.n	801f8b8 <_Z41__static_initialization_and_destruction_0ii+0x50>
 801f8ac:	4807      	ldr	r0, [pc, #28]	; (801f8cc <_Z41__static_initialization_and_destruction_0ii+0x64>)
 801f8ae:	f7ff fee3 	bl	801f678 <_ZN10NetworkBusD1Ev>
BufferedIODriver telemetryDriver(storage, control, 256); // Point to RAM D3
 801f8b2:	4805      	ldr	r0, [pc, #20]	; (801f8c8 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 801f8b4:	f7fd fd38 	bl	801d328 <_ZN16BufferedIODriverD1Ev>
}
 801f8b8:	bf00      	nop
 801f8ba:	3708      	adds	r7, #8
 801f8bc:	46bd      	mov	sp, r7
 801f8be:	bd80      	pop	{r7, pc}
 801f8c0:	24000038 	.word	0x24000038
 801f8c4:	24000034 	.word	0x24000034
 801f8c8:	240409dc 	.word	0x240409dc
 801f8cc:	24040a04 	.word	0x24040a04

0801f8d0 <_GLOBAL__sub_I_telemetryDriver>:
 801f8d0:	b580      	push	{r7, lr}
 801f8d2:	af00      	add	r7, sp, #0
 801f8d4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801f8d8:	2001      	movs	r0, #1
 801f8da:	f7ff ffc5 	bl	801f868 <_Z41__static_initialization_and_destruction_0ii>
 801f8de:	bd80      	pop	{r7, pc}

0801f8e0 <_GLOBAL__sub_D_telemetryDriver>:
 801f8e0:	b580      	push	{r7, lr}
 801f8e2:	af00      	add	r7, sp, #0
 801f8e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801f8e8:	2000      	movs	r0, #0
 801f8ea:	f7ff ffbd 	bl	801f868 <_Z41__static_initialization_and_destruction_0ii>
 801f8ee:	bd80      	pop	{r7, pc}

0801f8f0 <_Z10__task_runPKv>:

#define DEFAULT_STACK_SIZE (256) // Danger zone: changing the stack size might create very nasty bugs

static char buffer[128];

void __task_run(const void* arg) {
 801f8f0:	b580      	push	{r7, lr}
 801f8f2:	b084      	sub	sp, #16
 801f8f4:	af00      	add	r7, sp, #0
 801f8f6:	6078      	str	r0, [r7, #4]
	Thread* thread = (Thread*) arg;
 801f8f8:	687b      	ldr	r3, [r7, #4]
 801f8fa:	60fb      	str	r3, [r7, #12]

	osDelay(100);
 801f8fc:	2064      	movs	r0, #100	; 0x64
 801f8fe:	f7eb f986 	bl	800ac0e <osDelay>

	thread->init();
 801f902:	68fb      	ldr	r3, [r7, #12]
 801f904:	681b      	ldr	r3, [r3, #0]
 801f906:	681b      	ldr	r3, [r3, #0]
 801f908:	68f8      	ldr	r0, [r7, #12]
 801f90a:	4798      	blx	r3

	while(true) {
		thread->loop();
 801f90c:	68fb      	ldr	r3, [r7, #12]
 801f90e:	681b      	ldr	r3, [r3, #0]
 801f910:	3304      	adds	r3, #4
 801f912:	681b      	ldr	r3, [r3, #0]
 801f914:	68f8      	ldr	r0, [r7, #12]
 801f916:	4798      	blx	r3
 801f918:	e7f8      	b.n	801f90c <_Z10__task_runPKv+0x1c>

0801f91a <_ZN6ThreadC1EPKc>:
	}
}

Thread::Thread(const char* name) : Thread(name, (osPriority) osPriorityNormal) {
 801f91a:	b580      	push	{r7, lr}
 801f91c:	b082      	sub	sp, #8
 801f91e:	af00      	add	r7, sp, #0
 801f920:	6078      	str	r0, [r7, #4]
 801f922:	6039      	str	r1, [r7, #0]
 801f924:	2200      	movs	r2, #0
 801f926:	6839      	ldr	r1, [r7, #0]
 801f928:	6878      	ldr	r0, [r7, #4]
 801f92a:	f000 f805 	bl	801f938 <_ZN6ThreadC1EPKc10osPriority>
	;
}
 801f92e:	687b      	ldr	r3, [r7, #4]
 801f930:	4618      	mov	r0, r3
 801f932:	3708      	adds	r7, #8
 801f934:	46bd      	mov	sp, r7
 801f936:	bd80      	pop	{r7, pc}

0801f938 <_ZN6ThreadC1EPKc10osPriority>:

Thread::Thread(const char* name, osPriority priority) : Thread(name, priority, DEFAULT_STACK_SIZE) {
 801f938:	b580      	push	{r7, lr}
 801f93a:	b084      	sub	sp, #16
 801f93c:	af00      	add	r7, sp, #0
 801f93e:	60f8      	str	r0, [r7, #12]
 801f940:	60b9      	str	r1, [r7, #8]
 801f942:	4613      	mov	r3, r2
 801f944:	80fb      	strh	r3, [r7, #6]
 801f946:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801f94a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801f94e:	68b9      	ldr	r1, [r7, #8]
 801f950:	68f8      	ldr	r0, [r7, #12]
 801f952:	f000 f817 	bl	801f984 <_ZN6ThreadC1EPKc10osPrioritym>
	;
}
 801f956:	68fb      	ldr	r3, [r7, #12]
 801f958:	4618      	mov	r0, r3
 801f95a:	3710      	adds	r7, #16
 801f95c:	46bd      	mov	sp, r7
 801f95e:	bd80      	pop	{r7, pc}

0801f960 <_ZN6ThreadC1EPKcm>:

Thread::Thread(const char* name, uint32_t stackSize) : Thread(name, (osPriority) osPriorityNormal, stackSize) {
 801f960:	b580      	push	{r7, lr}
 801f962:	b084      	sub	sp, #16
 801f964:	af00      	add	r7, sp, #0
 801f966:	60f8      	str	r0, [r7, #12]
 801f968:	60b9      	str	r1, [r7, #8]
 801f96a:	607a      	str	r2, [r7, #4]
 801f96c:	687b      	ldr	r3, [r7, #4]
 801f96e:	2200      	movs	r2, #0
 801f970:	68b9      	ldr	r1, [r7, #8]
 801f972:	68f8      	ldr	r0, [r7, #12]
 801f974:	f000 f806 	bl	801f984 <_ZN6ThreadC1EPKc10osPrioritym>
	;
}
 801f978:	68fb      	ldr	r3, [r7, #12]
 801f97a:	4618      	mov	r0, r3
 801f97c:	3710      	adds	r7, #16
 801f97e:	46bd      	mov	sp, r7
 801f980:	bd80      	pop	{r7, pc}
	...

0801f984 <_ZN6ThreadC1EPKc10osPrioritym>:

Thread::Thread(const char* name, osPriority priority, uint32_t stackSize) {
 801f984:	b580      	push	{r7, lr}
 801f986:	b08c      	sub	sp, #48	; 0x30
 801f988:	af00      	add	r7, sp, #0
 801f98a:	60f8      	str	r0, [r7, #12]
 801f98c:	60b9      	str	r1, [r7, #8]
 801f98e:	603b      	str	r3, [r7, #0]
 801f990:	4613      	mov	r3, r2
 801f992:	80fb      	strh	r3, [r7, #6]
 801f994:	4a12      	ldr	r2, [pc, #72]	; (801f9e0 <_ZN6ThreadC1EPKc10osPrioritym+0x5c>)
 801f996:	68fb      	ldr	r3, [r7, #12]
 801f998:	601a      	str	r2, [r3, #0]
	osThreadDef_t thread = { (char*) name, &__task_run, priority, 0, stackSize};
 801f99a:	f107 0314 	add.w	r3, r7, #20
 801f99e:	2200      	movs	r2, #0
 801f9a0:	601a      	str	r2, [r3, #0]
 801f9a2:	605a      	str	r2, [r3, #4]
 801f9a4:	609a      	str	r2, [r3, #8]
 801f9a6:	60da      	str	r2, [r3, #12]
 801f9a8:	611a      	str	r2, [r3, #16]
 801f9aa:	615a      	str	r2, [r3, #20]
 801f9ac:	619a      	str	r2, [r3, #24]
 801f9ae:	4b0d      	ldr	r3, [pc, #52]	; (801f9e4 <_ZN6ThreadC1EPKc10osPrioritym+0x60>)
 801f9b0:	61bb      	str	r3, [r7, #24]
 801f9b2:	68bb      	ldr	r3, [r7, #8]
 801f9b4:	617b      	str	r3, [r7, #20]
 801f9b6:	88fb      	ldrh	r3, [r7, #6]
 801f9b8:	83bb      	strh	r3, [r7, #28]
 801f9ba:	683b      	ldr	r3, [r7, #0]
 801f9bc:	627b      	str	r3, [r7, #36]	; 0x24
	this->handle = osThreadCreate(&thread, this);
 801f9be:	f107 0314 	add.w	r3, r7, #20
 801f9c2:	68f9      	ldr	r1, [r7, #12]
 801f9c4:	4618      	mov	r0, r3
 801f9c6:	f7eb f8d6 	bl	800ab76 <osThreadCreate>
 801f9ca:	4602      	mov	r2, r0
 801f9cc:	68fb      	ldr	r3, [r7, #12]
 801f9ce:	605a      	str	r2, [r3, #4]
	this->name = name;
 801f9d0:	68fb      	ldr	r3, [r7, #12]
 801f9d2:	68ba      	ldr	r2, [r7, #8]
 801f9d4:	609a      	str	r2, [r3, #8]
}
 801f9d6:	68fb      	ldr	r3, [r7, #12]
 801f9d8:	4618      	mov	r0, r3
 801f9da:	3730      	adds	r7, #48	; 0x30
 801f9dc:	46bd      	mov	sp, r7
 801f9de:	bd80      	pop	{r7, pc}
 801f9e0:	08027424 	.word	0x08027424
 801f9e4:	0801f8f1 	.word	0x0801f8f1

0801f9e8 <_ZN6Thread7printlnEPKcz>:

void Thread::println(const char* format, ...) {
 801f9e8:	b40e      	push	{r1, r2, r3}
 801f9ea:	b580      	push	{r7, lr}
 801f9ec:	b085      	sub	sp, #20
 801f9ee:	af00      	add	r7, sp, #0
 801f9f0:	6078      	str	r0, [r7, #4]
	va_list args;
	va_start(args, format);
 801f9f2:	f107 0320 	add.w	r3, r7, #32
 801f9f6:	60fb      	str	r3, [r7, #12]

	sprintf(buffer, "[%s] ", name);
 801f9f8:	687b      	ldr	r3, [r7, #4]
 801f9fa:	689b      	ldr	r3, [r3, #8]
 801f9fc:	461a      	mov	r2, r3
 801f9fe:	4913      	ldr	r1, [pc, #76]	; (801fa4c <_ZN6Thread7printlnEPKcz+0x64>)
 801fa00:	4813      	ldr	r0, [pc, #76]	; (801fa50 <_ZN6Thread7printlnEPKcz+0x68>)
 801fa02:	f001 fb35 	bl	8021070 <siprintf>
	vsprintf(buffer + strlen(buffer), format, args);
 801fa06:	4812      	ldr	r0, [pc, #72]	; (801fa50 <_ZN6Thread7printlnEPKcz+0x68>)
 801fa08:	f7e0 fcc4 	bl	8000394 <strlen>
 801fa0c:	4602      	mov	r2, r0
 801fa0e:	4b10      	ldr	r3, [pc, #64]	; (801fa50 <_ZN6Thread7printlnEPKcz+0x68>)
 801fa10:	4413      	add	r3, r2
 801fa12:	68fa      	ldr	r2, [r7, #12]
 801fa14:	69f9      	ldr	r1, [r7, #28]
 801fa16:	4618      	mov	r0, r3
 801fa18:	f001 fb60 	bl	80210dc <vsiprintf>
	strcat(buffer, "\r\n");
 801fa1c:	480c      	ldr	r0, [pc, #48]	; (801fa50 <_ZN6Thread7printlnEPKcz+0x68>)
 801fa1e:	f7e0 fcb9 	bl	8000394 <strlen>
 801fa22:	4603      	mov	r3, r0
 801fa24:	461a      	mov	r2, r3
 801fa26:	4b0a      	ldr	r3, [pc, #40]	; (801fa50 <_ZN6Thread7printlnEPKcz+0x68>)
 801fa28:	4413      	add	r3, r2
 801fa2a:	4a0a      	ldr	r2, [pc, #40]	; (801fa54 <_ZN6Thread7printlnEPKcz+0x6c>)
 801fa2c:	8811      	ldrh	r1, [r2, #0]
 801fa2e:	7892      	ldrb	r2, [r2, #2]
 801fa30:	8019      	strh	r1, [r3, #0]
 801fa32:	709a      	strb	r2, [r3, #2]

	console.print(buffer);
 801fa34:	4906      	ldr	r1, [pc, #24]	; (801fa50 <_ZN6Thread7printlnEPKcz+0x68>)
 801fa36:	4808      	ldr	r0, [pc, #32]	; (801fa58 <_ZN6Thread7printlnEPKcz+0x70>)
 801fa38:	f7fd f997 	bl	801cd6a <_ZN7Console5printEPKc>

	va_end(args);
}
 801fa3c:	bf00      	nop
 801fa3e:	3714      	adds	r7, #20
 801fa40:	46bd      	mov	sp, r7
 801fa42:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801fa46:	b003      	add	sp, #12
 801fa48:	4770      	bx	lr
 801fa4a:	bf00      	nop
 801fa4c:	08026df8 	.word	0x08026df8
 801fa50:	24045318 	.word	0x24045318
 801fa54:	08026e00 	.word	0x08026e00
 801fa58:	240407b0 	.word	0x240407b0

0801fa5c <_ZN16BufferedIODriver18getReceiveFunctionEv>:
public:
	BufferedIODriver(volatile uint8_t* bufferStorage, volatile uint8_t* bufferControl, size_t length);
	void receive(const std::function<void (uint8_t sender_id, uint8_t* buffer, uint32_t length)> &receiver);
	void transmit(uint8_t* buffer, uint32_t length);
	void flush(IODriver* driver);
	std::function<void (uint8_t sender_id, uint8_t* buffer, uint32_t length)> getReceiveFunction() { return receiverFunc; }
 801fa5c:	b580      	push	{r7, lr}
 801fa5e:	b082      	sub	sp, #8
 801fa60:	af00      	add	r7, sp, #0
 801fa62:	6078      	str	r0, [r7, #4]
 801fa64:	6039      	str	r1, [r7, #0]
 801fa66:	683b      	ldr	r3, [r7, #0]
 801fa68:	3318      	adds	r3, #24
 801fa6a:	4619      	mov	r1, r3
 801fa6c:	6878      	ldr	r0, [r7, #4]
 801fa6e:	f7fd fb58 	bl	801d122 <_ZNSt8functionIFvhPhmEEC1ERKS2_>
 801fa72:	6878      	ldr	r0, [r7, #4]
 801fa74:	3708      	adds	r7, #8
 801fa76:	46bd      	mov	sp, r7
 801fa78:	bd80      	pop	{r7, pc}

0801fa7a <_ZN12LWIPClientIO11isConnectedEv>:
	void receive(const std::function<void (uint8_t sender_id, uint8_t* buffer, uint32_t length)> &receiver);
	void transmit(uint8_t* buffer, uint32_t length);

	void update();

	bool isConnected() { return connected; }
 801fa7a:	b480      	push	{r7}
 801fa7c:	b083      	sub	sp, #12
 801fa7e:	af00      	add	r7, sp, #0
 801fa80:	6078      	str	r0, [r7, #4]
 801fa82:	687b      	ldr	r3, [r7, #4]
 801fa84:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801fa88:	4618      	mov	r0, r3
 801fa8a:	370c      	adds	r7, #12
 801fa8c:	46bd      	mov	sp, r7
 801fa8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fa92:	4770      	bx	lr

0801fa94 <_ZN10LWIPThreadC1EPKct>:


static LWIPClientIO* client;


LWIPThread::LWIPThread(const char* ip, const uint16_t port) : Thread("Telemetry", 512) { // Please, be very careful with the stack
 801fa94:	b5b0      	push	{r4, r5, r7, lr}
 801fa96:	b08c      	sub	sp, #48	; 0x30
 801fa98:	af00      	add	r7, sp, #0
 801fa9a:	60f8      	str	r0, [r7, #12]
 801fa9c:	60b9      	str	r1, [r7, #8]
 801fa9e:	4613      	mov	r3, r2
 801faa0:	80fb      	strh	r3, [r7, #6]
 801faa2:	68fb      	ldr	r3, [r7, #12]
 801faa4:	f44f 7200 	mov.w	r2, #512	; 0x200
 801faa8:	4918      	ldr	r1, [pc, #96]	; (801fb0c <_ZN10LWIPThreadC1EPKct+0x78>)
 801faaa:	4618      	mov	r0, r3
 801faac:	f7ff ff58 	bl	801f960 <_ZN6ThreadC1EPKcm>
 801fab0:	4a17      	ldr	r2, [pc, #92]	; (801fb10 <_ZN10LWIPThreadC1EPKct+0x7c>)
 801fab2:	68fb      	ldr	r3, [r7, #12]
 801fab4:	601a      	str	r2, [r3, #0]
	client = new LWIPClientIO(ip, port);
 801fab6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801faba:	4618      	mov	r0, r3
 801fabc:	f000 fcc9 	bl	8020452 <_ZNSaIcEC1Ev>
 801fac0:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801fac4:	f107 0314 	add.w	r3, r7, #20
 801fac8:	68b9      	ldr	r1, [r7, #8]
 801faca:	4618      	mov	r0, r3
 801facc:	f000 fd5c 	bl	8020588 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 801fad0:	f107 0514 	add.w	r5, r7, #20
 801fad4:	2044      	movs	r0, #68	; 0x44
 801fad6:	f7fd f9a1 	bl	801ce1c <_Znwj>
 801fada:	4603      	mov	r3, r0
 801fadc:	461c      	mov	r4, r3
 801fade:	88fb      	ldrh	r3, [r7, #6]
 801fae0:	461a      	mov	r2, r3
 801fae2:	4629      	mov	r1, r5
 801fae4:	4620      	mov	r0, r4
 801fae6:	f7fe fd25 	bl	801e534 <_ZN12LWIPClientIOC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt>
 801faea:	4b0a      	ldr	r3, [pc, #40]	; (801fb14 <_ZN10LWIPThreadC1EPKct+0x80>)
 801faec:	601c      	str	r4, [r3, #0]
 801faee:	f107 0314 	add.w	r3, r7, #20
 801faf2:	4618      	mov	r0, r3
 801faf4:	f000 fce9 	bl	80204ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 801faf8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801fafc:	4618      	mov	r0, r3
 801fafe:	f000 fca9 	bl	8020454 <_ZNSaIcED1Ev>
}
 801fb02:	68fb      	ldr	r3, [r7, #12]
 801fb04:	4618      	mov	r0, r3
 801fb06:	3730      	adds	r7, #48	; 0x30
 801fb08:	46bd      	mov	sp, r7
 801fb0a:	bdb0      	pop	{r4, r5, r7, pc}
 801fb0c:	08026e04 	.word	0x08026e04
 801fb10:	08027434 	.word	0x08027434
 801fb14:	240453cc 	.word	0x240453cc

0801fb18 <_ZN10LWIPThreadD1Ev>:

LWIPThread::~LWIPThread() {
 801fb18:	b580      	push	{r7, lr}
 801fb1a:	b082      	sub	sp, #8
 801fb1c:	af00      	add	r7, sp, #0
 801fb1e:	6078      	str	r0, [r7, #4]
 801fb20:	4a0c      	ldr	r2, [pc, #48]	; (801fb54 <_ZN10LWIPThreadD1Ev+0x3c>)
 801fb22:	687b      	ldr	r3, [r7, #4]
 801fb24:	601a      	str	r2, [r3, #0]
	delete client;
 801fb26:	4b0c      	ldr	r3, [pc, #48]	; (801fb58 <_ZN10LWIPThreadD1Ev+0x40>)
 801fb28:	681b      	ldr	r3, [r3, #0]
 801fb2a:	2b00      	cmp	r3, #0
 801fb2c:	d008      	beq.n	801fb40 <_ZN10LWIPThreadD1Ev+0x28>
 801fb2e:	4b0a      	ldr	r3, [pc, #40]	; (801fb58 <_ZN10LWIPThreadD1Ev+0x40>)
 801fb30:	681a      	ldr	r2, [r3, #0]
 801fb32:	4b09      	ldr	r3, [pc, #36]	; (801fb58 <_ZN10LWIPThreadD1Ev+0x40>)
 801fb34:	681b      	ldr	r3, [r3, #0]
 801fb36:	681b      	ldr	r3, [r3, #0]
 801fb38:	3304      	adds	r3, #4
 801fb3a:	681b      	ldr	r3, [r3, #0]
 801fb3c:	4610      	mov	r0, r2
 801fb3e:	4798      	blx	r3
LWIPThread::~LWIPThread() {
 801fb40:	687b      	ldr	r3, [r7, #4]
 801fb42:	4618      	mov	r0, r3
 801fb44:	f7ff fdd6 	bl	801f6f4 <_ZN6ThreadD1Ev>
}
 801fb48:	687b      	ldr	r3, [r7, #4]
 801fb4a:	4618      	mov	r0, r3
 801fb4c:	3708      	adds	r7, #8
 801fb4e:	46bd      	mov	sp, r7
 801fb50:	bd80      	pop	{r7, pc}
 801fb52:	bf00      	nop
 801fb54:	08027434 	.word	0x08027434
 801fb58:	240453cc 	.word	0x240453cc

0801fb5c <_ZN10LWIPThread4initEv>:

void LWIPThread::init() {
 801fb5c:	b5b0      	push	{r4, r5, r7, lr}
 801fb5e:	b094      	sub	sp, #80	; 0x50
 801fb60:	af04      	add	r7, sp, #16
 801fb62:	6078      	str	r0, [r7, #4]
	osDelay(50); // Time to get the shell loaded by Cortex M4
 801fb64:	2032      	movs	r0, #50	; 0x32
 801fb66:	f7eb f852 	bl	800ac0e <osDelay>

	println("Initializing LWIP...");
 801fb6a:	687b      	ldr	r3, [r7, #4]
 801fb6c:	4929      	ldr	r1, [pc, #164]	; (801fc14 <_ZN10LWIPThread4initEv+0xb8>)
 801fb6e:	4618      	mov	r0, r3
 801fb70:	f7ff ff3a 	bl	801f9e8 <_ZN6Thread7printlnEPKcz>

	tcpip_init(nullptr, nullptr);
 801fb74:	2100      	movs	r1, #0
 801fb76:	2000      	movs	r0, #0
 801fb78:	f7fc f950 	bl	801be1c <tcpip_init>
	/* IP addresses initialization with DHCP (IPv4) */
	ip4_addr local_ip;
	ip4_addr netmask;
	ip4_addr gateway;

	IP4_ADDR(&local_ip, 192, 168, 1, 3);
 801fb7c:	4b26      	ldr	r3, [pc, #152]	; (801fc18 <_ZN10LWIPThread4initEv+0xbc>)
 801fb7e:	62fb      	str	r3, [r7, #44]	; 0x2c
	IP4_ADDR(&netmask, 255, 255, 255, 0);
 801fb80:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801fb84:	62bb      	str	r3, [r7, #40]	; 0x28
	IP4_ADDR(&gateway, 192, 168, 1, 1);
 801fb86:	4b25      	ldr	r3, [pc, #148]	; (801fc1c <_ZN10LWIPThread4initEv+0xc0>)
 801fb88:	627b      	str	r3, [r7, #36]	; 0x24

	/* add the network interface (IPv4/IPv6) with RTOS */
	netif_add(&gnetif, &local_ip, &netmask, &gateway, NULL, &ethernetif_init, &tcpip_input);
 801fb8a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801fb8e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801fb92:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 801fb96:	4b22      	ldr	r3, [pc, #136]	; (801fc20 <_ZN10LWIPThread4initEv+0xc4>)
 801fb98:	9302      	str	r3, [sp, #8]
 801fb9a:	4b22      	ldr	r3, [pc, #136]	; (801fc24 <_ZN10LWIPThread4initEv+0xc8>)
 801fb9c:	9301      	str	r3, [sp, #4]
 801fb9e:	2300      	movs	r3, #0
 801fba0:	9300      	str	r3, [sp, #0]
 801fba2:	4603      	mov	r3, r0
 801fba4:	4820      	ldr	r0, [pc, #128]	; (801fc28 <_ZN10LWIPThread4initEv+0xcc>)
 801fba6:	f7f3 fbb3 	bl	8013310 <netif_add>

	/* Registers the default network interface */
	netif_set_default(&gnetif);
 801fbaa:	481f      	ldr	r0, [pc, #124]	; (801fc28 <_ZN10LWIPThread4initEv+0xcc>)
 801fbac:	f7f3 fd62 	bl	8013674 <netif_set_default>

	onStatusUpdate(&gnetif);
 801fbb0:	481d      	ldr	r0, [pc, #116]	; (801fc28 <_ZN10LWIPThread4initEv+0xcc>)
 801fbb2:	f000 f843 	bl	801fc3c <_ZL14onStatusUpdateP5netif>

	netif_set_link_callback(&gnetif, onStatusUpdate);
 801fbb6:	491d      	ldr	r1, [pc, #116]	; (801fc2c <_ZN10LWIPThread4initEv+0xd0>)
 801fbb8:	481b      	ldr	r0, [pc, #108]	; (801fc28 <_ZN10LWIPThread4initEv+0xcc>)
 801fbba:	f7f3 fe6d 	bl	8013898 <netif_set_link_callback>

	osThreadDef(EthLink, ethernet_link_thread, osPriorityNormal, 0, 1024);
 801fbbe:	4b1c      	ldr	r3, [pc, #112]	; (801fc30 <_ZN10LWIPThread4initEv+0xd4>)
 801fbc0:	f107 0408 	add.w	r4, r7, #8
 801fbc4:	461d      	mov	r5, r3
 801fbc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801fbc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801fbca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801fbce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	osThreadCreate(osThread(EthLink), &gnetif);
 801fbd2:	f107 0308 	add.w	r3, r7, #8
 801fbd6:	4914      	ldr	r1, [pc, #80]	; (801fc28 <_ZN10LWIPThread4initEv+0xcc>)
 801fbd8:	4618      	mov	r0, r3
 801fbda:	f7ea ffcc 	bl	800ab76 <osThreadCreate>

	client->receive(telemetryDriver.getReceiveFunction());
 801fbde:	4b15      	ldr	r3, [pc, #84]	; (801fc34 <_ZN10LWIPThread4initEv+0xd8>)
 801fbe0:	681d      	ldr	r5, [r3, #0]
 801fbe2:	4b14      	ldr	r3, [pc, #80]	; (801fc34 <_ZN10LWIPThread4initEv+0xd8>)
 801fbe4:	681b      	ldr	r3, [r3, #0]
 801fbe6:	681b      	ldr	r3, [r3, #0]
 801fbe8:	3308      	adds	r3, #8
 801fbea:	681c      	ldr	r4, [r3, #0]
 801fbec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801fbf0:	4911      	ldr	r1, [pc, #68]	; (801fc38 <_ZN10LWIPThread4initEv+0xdc>)
 801fbf2:	4618      	mov	r0, r3
 801fbf4:	f7ff ff32 	bl	801fa5c <_ZN16BufferedIODriver18getReceiveFunctionEv>
 801fbf8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801fbfc:	4619      	mov	r1, r3
 801fbfe:	4628      	mov	r0, r5
 801fc00:	47a0      	blx	r4
 801fc02:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801fc06:	4618      	mov	r0, r3
 801fc08:	f7fd f972 	bl	801cef0 <_ZNSt8functionIFvhPhmEED1Ev>
}
 801fc0c:	bf00      	nop
 801fc0e:	3740      	adds	r7, #64	; 0x40
 801fc10:	46bd      	mov	sp, r7
 801fc12:	bdb0      	pop	{r4, r5, r7, pc}
 801fc14:	08026e10 	.word	0x08026e10
 801fc18:	0301a8c0 	.word	0x0301a8c0
 801fc1c:	0101a8c0 	.word	0x0101a8c0
 801fc20:	0801bd2d 	.word	0x0801bd2d
 801fc24:	0800a8c1 	.word	0x0800a8c1
 801fc28:	24045398 	.word	0x24045398
 801fc2c:	0801fc3d 	.word	0x0801fc3d
 801fc30:	08026e30 	.word	0x08026e30
 801fc34:	240453cc 	.word	0x240453cc
 801fc38:	240409dc 	.word	0x240409dc

0801fc3c <_ZL14onStatusUpdateP5netif>:

void onStatusUpdate(struct netif *netif) {
 801fc3c:	b580      	push	{r7, lr}
 801fc3e:	b082      	sub	sp, #8
 801fc40:	af00      	add	r7, sp, #0
 801fc42:	6078      	str	r0, [r7, #4]
	if (netif_is_link_up(netif)) {
 801fc44:	687b      	ldr	r3, [r7, #4]
 801fc46:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801fc4a:	109b      	asrs	r3, r3, #2
 801fc4c:	b2db      	uxtb	r3, r3
 801fc4e:	f003 0301 	and.w	r3, r3, #1
 801fc52:	2b00      	cmp	r3, #0
 801fc54:	d008      	beq.n	801fc68 <_ZL14onStatusUpdateP5netif+0x2c>
		/* When the netif is fully configured this function must be called */
		netif_set_up(netif);
 801fc56:	687b      	ldr	r3, [r7, #4]
 801fc58:	4618      	mov	r0, r3
 801fc5a:	f7f3 fd1b 	bl	8013694 <netif_set_up>
		console.printf("[Telemetry] Link is up\r\n");
 801fc5e:	4908      	ldr	r1, [pc, #32]	; (801fc80 <_ZL14onStatusUpdateP5netif+0x44>)
 801fc60:	4808      	ldr	r0, [pc, #32]	; (801fc84 <_ZL14onStatusUpdateP5netif+0x48>)
 801fc62:	f7fd f894 	bl	801cd8e <_ZN7Console6printfEPKcz>
	} else {
		/* When the netif link is down this function must be called */
		netif_set_down(netif);
		console.printf("[Telemetry] Link is down\r\n");
	}
}
 801fc66:	e007      	b.n	801fc78 <_ZL14onStatusUpdateP5netif+0x3c>
		netif_set_down(netif);
 801fc68:	687b      	ldr	r3, [r7, #4]
 801fc6a:	4618      	mov	r0, r3
 801fc6c:	f7f3 fd7e 	bl	801376c <netif_set_down>
		console.printf("[Telemetry] Link is down\r\n");
 801fc70:	4905      	ldr	r1, [pc, #20]	; (801fc88 <_ZL14onStatusUpdateP5netif+0x4c>)
 801fc72:	4804      	ldr	r0, [pc, #16]	; (801fc84 <_ZL14onStatusUpdateP5netif+0x48>)
 801fc74:	f7fd f88b 	bl	801cd8e <_ZN7Console6printfEPKcz>
}
 801fc78:	bf00      	nop
 801fc7a:	3708      	adds	r7, #8
 801fc7c:	46bd      	mov	sp, r7
 801fc7e:	bd80      	pop	{r7, pc}
 801fc80:	08026e4c 	.word	0x08026e4c
 801fc84:	240407b0 	.word	0x240407b0
 801fc88:	08026e68 	.word	0x08026e68

0801fc8c <_ZN10LWIPThread4loopEv>:

void LWIPThread::loop() {
 801fc8c:	b580      	push	{r7, lr}
 801fc8e:	b084      	sub	sp, #16
 801fc90:	af00      	add	r7, sp, #0
 801fc92:	6078      	str	r0, [r7, #4]
	if(client->isConnected()) {
 801fc94:	4b21      	ldr	r3, [pc, #132]	; (801fd1c <_ZN10LWIPThread4loopEv+0x90>)
 801fc96:	681b      	ldr	r3, [r3, #0]
 801fc98:	4618      	mov	r0, r3
 801fc9a:	f7ff feee 	bl	801fa7a <_ZN12LWIPClientIO11isConnectedEv>
 801fc9e:	4603      	mov	r3, r0
 801fca0:	2b00      	cmp	r3, #0
 801fca2:	d01a      	beq.n	801fcda <_ZN10LWIPThread4loopEv+0x4e>
		if(netif_is_link_up(&gnetif)) {
 801fca4:	4b1e      	ldr	r3, [pc, #120]	; (801fd20 <_ZN10LWIPThread4loopEv+0x94>)
 801fca6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801fcaa:	109b      	asrs	r3, r3, #2
 801fcac:	b2db      	uxtb	r3, r3
 801fcae:	f003 0301 	and.w	r3, r3, #1
 801fcb2:	2b00      	cmp	r3, #0
 801fcb4:	d00b      	beq.n	801fcce <_ZN10LWIPThread4loopEv+0x42>
			client->update(); // Handle reception
 801fcb6:	4b19      	ldr	r3, [pc, #100]	; (801fd1c <_ZN10LWIPThread4loopEv+0x90>)
 801fcb8:	681b      	ldr	r3, [r3, #0]
 801fcba:	4618      	mov	r0, r3
 801fcbc:	f7fe fd4c 	bl	801e758 <_ZN12LWIPClientIO6updateEv>

			telemetryDriver.flush(client); // Handle transmission
 801fcc0:	4b16      	ldr	r3, [pc, #88]	; (801fd1c <_ZN10LWIPThread4loopEv+0x90>)
 801fcc2:	681b      	ldr	r3, [r3, #0]
 801fcc4:	4619      	mov	r1, r3
 801fcc6:	4817      	ldr	r0, [pc, #92]	; (801fd24 <_ZN10LWIPThread4loopEv+0x98>)
 801fcc8:	f7fd f9df 	bl	801d08a <_ZN16BufferedIODriver5flushEP8IODriver>
			println("Cannot connect to server with error code %d", error);
		}

		osDelay(1000);
	}
}
 801fccc:	e022      	b.n	801fd14 <_ZN10LWIPThread4loopEv+0x88>
			client->disconnectClient();
 801fcce:	4b13      	ldr	r3, [pc, #76]	; (801fd1c <_ZN10LWIPThread4loopEv+0x90>)
 801fcd0:	681b      	ldr	r3, [r3, #0]
 801fcd2:	4618      	mov	r0, r3
 801fcd4:	f7fe fd0e 	bl	801e6f4 <_ZN12LWIPClientIO16disconnectClientEv>
}
 801fcd8:	e01c      	b.n	801fd14 <_ZN10LWIPThread4loopEv+0x88>
	} else if(netif_is_link_up(&gnetif)) {
 801fcda:	4b11      	ldr	r3, [pc, #68]	; (801fd20 <_ZN10LWIPThread4loopEv+0x94>)
 801fcdc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801fce0:	109b      	asrs	r3, r3, #2
 801fce2:	b2db      	uxtb	r3, r3
 801fce4:	f003 0301 	and.w	r3, r3, #1
 801fce8:	2b00      	cmp	r3, #0
 801fcea:	d013      	beq.n	801fd14 <_ZN10LWIPThread4loopEv+0x88>
		int32_t error = client->connectClient();
 801fcec:	4b0b      	ldr	r3, [pc, #44]	; (801fd1c <_ZN10LWIPThread4loopEv+0x90>)
 801fcee:	681b      	ldr	r3, [r3, #0]
 801fcf0:	4618      	mov	r0, r3
 801fcf2:	f7fe fc8f 	bl	801e614 <_ZN12LWIPClientIO13connectClientEv>
 801fcf6:	4603      	mov	r3, r0
 801fcf8:	60fb      	str	r3, [r7, #12]
		if(error != 0) {
 801fcfa:	68fb      	ldr	r3, [r7, #12]
 801fcfc:	2b00      	cmp	r3, #0
 801fcfe:	d005      	beq.n	801fd0c <_ZN10LWIPThread4loopEv+0x80>
			println("Cannot connect to server with error code %d", error);
 801fd00:	687b      	ldr	r3, [r7, #4]
 801fd02:	68fa      	ldr	r2, [r7, #12]
 801fd04:	4908      	ldr	r1, [pc, #32]	; (801fd28 <_ZN10LWIPThread4loopEv+0x9c>)
 801fd06:	4618      	mov	r0, r3
 801fd08:	f7ff fe6e 	bl	801f9e8 <_ZN6Thread7printlnEPKcz>
		osDelay(1000);
 801fd0c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801fd10:	f7ea ff7d 	bl	800ac0e <osDelay>
}
 801fd14:	bf00      	nop
 801fd16:	3710      	adds	r7, #16
 801fd18:	46bd      	mov	sp, r7
 801fd1a:	bd80      	pop	{r7, pc}
 801fd1c:	240453cc 	.word	0x240453cc
 801fd20:	24045398 	.word	0x24045398
 801fd24:	240409dc 	.word	0x240409dc
 801fd28:	08026e84 	.word	0x08026e84

0801fd2c <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev>:
 801fd2c:	b510      	push	{r4, lr}
 801fd2e:	4b03      	ldr	r3, [pc, #12]	; (801fd3c <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev+0x10>)
 801fd30:	6003      	str	r3, [r0, #0]
 801fd32:	4604      	mov	r4, r0
 801fd34:	f000 faaa 	bl	802028c <_ZN10__cxxabiv117__class_type_infoD1Ev>
 801fd38:	4620      	mov	r0, r4
 801fd3a:	bd10      	pop	{r4, pc}
 801fd3c:	08027494 	.word	0x08027494

0801fd40 <_ZN10__cxxabiv121__vmi_class_type_infoD0Ev>:
 801fd40:	b510      	push	{r4, lr}
 801fd42:	4604      	mov	r4, r0
 801fd44:	f7ff fff2 	bl	801fd2c <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev>
 801fd48:	4620      	mov	r0, r4
 801fd4a:	2118      	movs	r1, #24
 801fd4c:	f000 fa37 	bl	80201be <_ZdlPvj>
 801fd50:	4620      	mov	r0, r4
 801fd52:	bd10      	pop	{r4, pc}

0801fd54 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 801fd54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fd58:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 801fd5c:	454a      	cmp	r2, r9
 801fd5e:	4604      	mov	r4, r0
 801fd60:	460f      	mov	r7, r1
 801fd62:	4616      	mov	r6, r2
 801fd64:	4698      	mov	r8, r3
 801fd66:	d024      	beq.n	801fdb2 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x5e>
 801fd68:	68e5      	ldr	r5, [r4, #12]
 801fd6a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801fd6e:	b355      	cbz	r5, 801fdc6 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x72>
 801fd70:	68e3      	ldr	r3, [r4, #12]
 801fd72:	079a      	lsls	r2, r3, #30
 801fd74:	d524      	bpl.n	801fdc0 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x6c>
 801fd76:	f013 0a01 	ands.w	sl, r3, #1
 801fd7a:	ea4f 2223 	mov.w	r2, r3, asr #8
 801fd7e:	d003      	beq.n	801fd88 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x34>
 801fd80:	1cfb      	adds	r3, r7, #3
 801fd82:	d01d      	beq.n	801fdc0 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x6c>
 801fd84:	6833      	ldr	r3, [r6, #0]
 801fd86:	589a      	ldr	r2, [r3, r2]
 801fd88:	68a0      	ldr	r0, [r4, #8]
 801fd8a:	6803      	ldr	r3, [r0, #0]
 801fd8c:	f8cd 9000 	str.w	r9, [sp]
 801fd90:	f8d3 b020 	ldr.w	fp, [r3, #32]
 801fd94:	4432      	add	r2, r6
 801fd96:	4643      	mov	r3, r8
 801fd98:	4639      	mov	r1, r7
 801fd9a:	47d8      	blx	fp
 801fd9c:	2803      	cmp	r0, #3
 801fd9e:	d90f      	bls.n	801fdc0 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x6c>
 801fda0:	f1ba 0f00 	cmp.w	sl, #0
 801fda4:	d002      	beq.n	801fdac <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x58>
 801fda6:	f040 0001 	orr.w	r0, r0, #1
 801fdaa:	b2c0      	uxtb	r0, r0
 801fdac:	b003      	add	sp, #12
 801fdae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fdb2:	4619      	mov	r1, r3
 801fdb4:	f000 f9ea 	bl	802018c <_ZNKSt9type_infoeqERKS_>
 801fdb8:	2800      	cmp	r0, #0
 801fdba:	d0d5      	beq.n	801fd68 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x14>
 801fdbc:	2006      	movs	r0, #6
 801fdbe:	e7f5      	b.n	801fdac <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x58>
 801fdc0:	3d01      	subs	r5, #1
 801fdc2:	3c08      	subs	r4, #8
 801fdc4:	e7d3      	b.n	801fd6e <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x1a>
 801fdc6:	2001      	movs	r0, #1
 801fdc8:	e7f0      	b.n	801fdac <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x58>

0801fdca <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_>:
 801fdca:	b4f0      	push	{r4, r5, r6, r7}
 801fdcc:	1e0e      	subs	r6, r1, #0
 801fdce:	9c04      	ldr	r4, [sp, #16]
 801fdd0:	db06      	blt.n	801fde0 <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_+0x16>
 801fdd2:	1990      	adds	r0, r2, r6
 801fdd4:	4284      	cmp	r4, r0
 801fdd6:	bf14      	ite	ne
 801fdd8:	2001      	movne	r0, #1
 801fdda:	2006      	moveq	r0, #6
 801fddc:	bcf0      	pop	{r4, r5, r6, r7}
 801fdde:	4770      	bx	lr
 801fde0:	3602      	adds	r6, #2
 801fde2:	d004      	beq.n	801fdee <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_+0x24>
 801fde4:	6804      	ldr	r4, [r0, #0]
 801fde6:	6a24      	ldr	r4, [r4, #32]
 801fde8:	46a4      	mov	ip, r4
 801fdea:	bcf0      	pop	{r4, r5, r6, r7}
 801fdec:	4760      	bx	ip
 801fdee:	2001      	movs	r0, #1
 801fdf0:	e7f4      	b.n	801fddc <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_+0x12>

0801fdf2 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 801fdf2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fdf6:	b091      	sub	sp, #68	; 0x44
 801fdf8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801fdfc:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 801fdfe:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801fe00:	68a3      	ldr	r3, [r4, #8]
 801fe02:	06dd      	lsls	r5, r3, #27
 801fe04:	bf44      	itt	mi
 801fe06:	6883      	ldrmi	r3, [r0, #8]
 801fe08:	60a3      	strmi	r3, [r4, #8]
 801fe0a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801fe0c:	4293      	cmp	r3, r2
 801fe0e:	4681      	mov	r9, r0
 801fe10:	4688      	mov	r8, r1
 801fe12:	d107      	bne.n	801fe24 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x32>
 801fe14:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801fe16:	f000 f9b9 	bl	802018c <_ZNKSt9type_infoeqERKS_>
 801fe1a:	b118      	cbz	r0, 801fe24 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x32>
 801fe1c:	9b05      	ldr	r3, [sp, #20]
 801fe1e:	7163      	strb	r3, [r4, #5]
 801fe20:	2600      	movs	r6, #0
 801fe22:	e0fa      	b.n	802001a <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x228>
 801fe24:	9906      	ldr	r1, [sp, #24]
 801fe26:	4648      	mov	r0, r9
 801fe28:	f000 f9b0 	bl	802018c <_ZNKSt9type_infoeqERKS_>
 801fe2c:	4682      	mov	sl, r0
 801fe2e:	b1c0      	cbz	r0, 801fe62 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x70>
 801fe30:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801fe32:	6023      	str	r3, [r4, #0]
 801fe34:	f1b8 0f00 	cmp.w	r8, #0
 801fe38:	9b05      	ldr	r3, [sp, #20]
 801fe3a:	7123      	strb	r3, [r4, #4]
 801fe3c:	db0b      	blt.n	801fe56 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x64>
 801fe3e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801fe40:	4498      	add	r8, r3
 801fe42:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801fe44:	4543      	cmp	r3, r8
 801fe46:	bf14      	ite	ne
 801fe48:	f04f 0801 	movne.w	r8, #1
 801fe4c:	f04f 0806 	moveq.w	r8, #6
 801fe50:	f884 8006 	strb.w	r8, [r4, #6]
 801fe54:	e7e4      	b.n	801fe20 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2e>
 801fe56:	f118 0f02 	cmn.w	r8, #2
 801fe5a:	d1e1      	bne.n	801fe20 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2e>
 801fe5c:	2301      	movs	r3, #1
 801fe5e:	71a3      	strb	r3, [r4, #6]
 801fe60:	e7de      	b.n	801fe20 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2e>
 801fe62:	f1b8 0f00 	cmp.w	r8, #0
 801fe66:	bfaa      	itet	ge
 801fe68:	9b1c      	ldrge	r3, [sp, #112]	; 0x70
 801fe6a:	f8cd a01c 	strlt.w	sl, [sp, #28]
 801fe6e:	eba3 0308 	subge.w	r3, r3, r8
 801fe72:	f04f 0600 	mov.w	r6, #0
 801fe76:	bfa8      	it	ge
 801fe78:	9307      	strge	r3, [sp, #28]
 801fe7a:	2302      	movs	r3, #2
 801fe7c:	e9cd 6309 	strd	r6, r3, [sp, #36]	; 0x24
 801fe80:	2301      	movs	r3, #1
 801fe82:	9308      	str	r3, [sp, #32]
 801fe84:	9b05      	ldr	r3, [sp, #20]
 801fe86:	f043 0301 	orr.w	r3, r3, #1
 801fe8a:	46b3      	mov	fp, r6
 801fe8c:	930b      	str	r3, [sp, #44]	; 0x2c
 801fe8e:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801fe92:	9304      	str	r3, [sp, #16]
 801fe94:	9b04      	ldr	r3, [sp, #16]
 801fe96:	2b00      	cmp	r3, #0
 801fe98:	f000 80d9 	beq.w	802004e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x25c>
 801fe9c:	eb09 05c3 	add.w	r5, r9, r3, lsl #3
 801fea0:	68a7      	ldr	r7, [r4, #8]
 801fea2:	68e9      	ldr	r1, [r5, #12]
 801fea4:	970f      	str	r7, [sp, #60]	; 0x3c
 801fea6:	07c8      	lsls	r0, r1, #31
 801fea8:	bf48      	it	mi
 801feaa:	981a      	ldrmi	r0, [sp, #104]	; 0x68
 801feac:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 801feb0:	ea4f 2321 	mov.w	r3, r1, asr #8
 801feb4:	bf48      	it	mi
 801feb6:	6800      	ldrmi	r0, [r0, #0]
 801feb8:	f88d b038 	strb.w	fp, [sp, #56]	; 0x38
 801febc:	bf48      	it	mi
 801febe:	58c3      	ldrmi	r3, [r0, r3]
 801fec0:	981a      	ldr	r0, [sp, #104]	; 0x68
 801fec2:	f88d b039 	strb.w	fp, [sp, #57]	; 0x39
 801fec6:	4403      	add	r3, r0
 801fec8:	9807      	ldr	r0, [sp, #28]
 801feca:	f88d b03a 	strb.w	fp, [sp, #58]	; 0x3a
 801fece:	bf4c      	ite	mi
 801fed0:	9a0b      	ldrmi	r2, [sp, #44]	; 0x2c
 801fed2:	9a05      	ldrpl	r2, [sp, #20]
 801fed4:	b148      	cbz	r0, 801feea <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xf8>
 801fed6:	4298      	cmp	r0, r3
 801fed8:	9808      	ldr	r0, [sp, #32]
 801feda:	bf2c      	ite	cs
 801fedc:	f04f 0c00 	movcs.w	ip, #0
 801fee0:	f04f 0c01 	movcc.w	ip, #1
 801fee4:	4584      	cmp	ip, r0
 801fee6:	f000 80ae 	beq.w	8020046 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x254>
 801feea:	0789      	lsls	r1, r1, #30
 801feec:	d407      	bmi.n	801fefe <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x10c>
 801feee:	f118 0f02 	cmn.w	r8, #2
 801fef2:	d102      	bne.n	801fefa <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x108>
 801fef4:	07bf      	lsls	r7, r7, #30
 801fef6:	f000 80a8 	beq.w	802004a <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x258>
 801fefa:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
 801fefe:	68a8      	ldr	r0, [r5, #8]
 801ff00:	ad0d      	add	r5, sp, #52	; 0x34
 801ff02:	6801      	ldr	r1, [r0, #0]
 801ff04:	9503      	str	r5, [sp, #12]
 801ff06:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 801ff08:	9502      	str	r5, [sp, #8]
 801ff0a:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 801ff0c:	e9cd 3500 	strd	r3, r5, [sp]
 801ff10:	9b06      	ldr	r3, [sp, #24]
 801ff12:	69cd      	ldr	r5, [r1, #28]
 801ff14:	4641      	mov	r1, r8
 801ff16:	47a8      	blx	r5
 801ff18:	7963      	ldrb	r3, [r4, #5]
 801ff1a:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 801ff1e:	f89d 503a 	ldrb.w	r5, [sp, #58]	; 0x3a
 801ff22:	990d      	ldr	r1, [sp, #52]	; 0x34
 801ff24:	4313      	orrs	r3, r2
 801ff26:	2d06      	cmp	r5, #6
 801ff28:	7163      	strb	r3, [r4, #5]
 801ff2a:	d001      	beq.n	801ff30 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x13e>
 801ff2c:	2d02      	cmp	r5, #2
 801ff2e:	d106      	bne.n	801ff3e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x14c>
 801ff30:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 801ff34:	6021      	str	r1, [r4, #0]
 801ff36:	7123      	strb	r3, [r4, #4]
 801ff38:	71a5      	strb	r5, [r4, #6]
 801ff3a:	4682      	mov	sl, r0
 801ff3c:	e06c      	b.n	8020018 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x226>
 801ff3e:	6822      	ldr	r2, [r4, #0]
 801ff40:	b996      	cbnz	r6, 801ff68 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x176>
 801ff42:	b99a      	cbnz	r2, 801ff6c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x17a>
 801ff44:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 801ff48:	6021      	str	r1, [r4, #0]
 801ff4a:	7122      	strb	r2, [r4, #4]
 801ff4c:	b121      	cbz	r1, 801ff58 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x166>
 801ff4e:	b11b      	cbz	r3, 801ff58 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x166>
 801ff50:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801ff54:	07dd      	lsls	r5, r3, #31
 801ff56:	d5f0      	bpl.n	801ff3a <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x148>
 801ff58:	7963      	ldrb	r3, [r4, #5]
 801ff5a:	2b04      	cmp	r3, #4
 801ff5c:	d0ed      	beq.n	801ff3a <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x148>
 801ff5e:	9b04      	ldr	r3, [sp, #16]
 801ff60:	3b01      	subs	r3, #1
 801ff62:	9304      	str	r3, [sp, #16]
 801ff64:	4606      	mov	r6, r0
 801ff66:	e795      	b.n	801fe94 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xa2>
 801ff68:	2a00      	cmp	r2, #0
 801ff6a:	d037      	beq.n	801ffdc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1ea>
 801ff6c:	4291      	cmp	r1, r2
 801ff6e:	d106      	bne.n	801ff7e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x18c>
 801ff70:	7923      	ldrb	r3, [r4, #4]
 801ff72:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 801ff76:	4313      	orrs	r3, r2
 801ff78:	7123      	strb	r3, [r4, #4]
 801ff7a:	4630      	mov	r0, r6
 801ff7c:	e7ec      	b.n	801ff58 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x166>
 801ff7e:	b909      	cbnz	r1, 801ff84 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x192>
 801ff80:	2800      	cmp	r0, #0
 801ff82:	d0fa      	beq.n	801ff7a <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x188>
 801ff84:	2b03      	cmp	r3, #3
 801ff86:	79a7      	ldrb	r7, [r4, #6]
 801ff88:	d904      	bls.n	801ff94 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1a2>
 801ff8a:	07d8      	lsls	r0, r3, #31
 801ff8c:	d529      	bpl.n	801ffe2 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1f0>
 801ff8e:	68a3      	ldr	r3, [r4, #8]
 801ff90:	0799      	lsls	r1, r3, #30
 801ff92:	d526      	bpl.n	801ffe2 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1f0>
 801ff94:	b97f      	cbnz	r7, 801ffb6 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1c4>
 801ff96:	2d03      	cmp	r5, #3
 801ff98:	d905      	bls.n	801ffa6 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1b4>
 801ff9a:	07eb      	lsls	r3, r5, #31
 801ff9c:	d541      	bpl.n	8020022 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x230>
 801ff9e:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801ffa2:	079f      	lsls	r7, r3, #30
 801ffa4:	d53d      	bpl.n	8020022 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x230>
 801ffa6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801ffa8:	9300      	str	r3, [sp, #0]
 801ffaa:	4641      	mov	r1, r8
 801ffac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801ffae:	9806      	ldr	r0, [sp, #24]
 801ffb0:	f7ff ff0b 	bl	801fdca <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_>
 801ffb4:	4607      	mov	r7, r0
 801ffb6:	b9d5      	cbnz	r5, 801ffee <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1fc>
 801ffb8:	2f03      	cmp	r7, #3
 801ffba:	d905      	bls.n	801ffc8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1d6>
 801ffbc:	07f8      	lsls	r0, r7, #31
 801ffbe:	d532      	bpl.n	8020026 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x234>
 801ffc0:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801ffc4:	0799      	lsls	r1, r3, #30
 801ffc6:	d52e      	bpl.n	8020026 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x234>
 801ffc8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801ffca:	9300      	str	r3, [sp, #0]
 801ffcc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ffce:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801ffd0:	9806      	ldr	r0, [sp, #24]
 801ffd2:	4641      	mov	r1, r8
 801ffd4:	f7ff fef9 	bl	801fdca <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_>
 801ffd8:	4605      	mov	r5, r0
 801ffda:	e008      	b.n	801ffee <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1fc>
 801ffdc:	2900      	cmp	r1, #0
 801ffde:	d1d1      	bne.n	801ff84 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x192>
 801ffe0:	e7cb      	b.n	801ff7a <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x188>
 801ffe2:	2f00      	cmp	r7, #0
 801ffe4:	bf08      	it	eq
 801ffe6:	2701      	moveq	r7, #1
 801ffe8:	2d00      	cmp	r5, #0
 801ffea:	bf08      	it	eq
 801ffec:	2501      	moveq	r5, #1
 801ffee:	ea85 0307 	eor.w	r3, r5, r7
 801fff2:	b2db      	uxtb	r3, r3
 801fff4:	2b03      	cmp	r3, #3
 801fff6:	d918      	bls.n	802002a <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x238>
 801fff8:	2d03      	cmp	r5, #3
 801fffa:	bf81      	itttt	hi
 801fffc:	9b0d      	ldrhi	r3, [sp, #52]	; 0x34
 801fffe:	6023      	strhi	r3, [r4, #0]
 8020000:	462f      	movhi	r7, r5
 8020002:	f89d 3038 	ldrbhi.w	r3, [sp, #56]	; 0x38
 8020006:	bf86      	itte	hi
 8020008:	7123      	strbhi	r3, [r4, #4]
 802000a:	2000      	movhi	r0, #0
 802000c:	4630      	movls	r0, r6
 802000e:	07ba      	lsls	r2, r7, #30
 8020010:	71a7      	strb	r7, [r4, #6]
 8020012:	d401      	bmi.n	8020018 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x226>
 8020014:	07fb      	lsls	r3, r7, #31
 8020016:	d49f      	bmi.n	801ff58 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x166>
 8020018:	4656      	mov	r6, sl
 802001a:	4630      	mov	r0, r6
 802001c:	b011      	add	sp, #68	; 0x44
 802001e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020022:	2701      	movs	r7, #1
 8020024:	e7e3      	b.n	801ffee <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1fc>
 8020026:	2501      	movs	r5, #1
 8020028:	e7e1      	b.n	801ffee <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1fc>
 802002a:	403d      	ands	r5, r7
 802002c:	b2ed      	uxtb	r5, r5
 802002e:	2d03      	cmp	r5, #3
 8020030:	f8c4 b000 	str.w	fp, [r4]
 8020034:	d904      	bls.n	8020040 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x24e>
 8020036:	2302      	movs	r3, #2
 8020038:	71a3      	strb	r3, [r4, #6]
 802003a:	f04f 0a01 	mov.w	sl, #1
 802003e:	e7eb      	b.n	8020018 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x226>
 8020040:	2001      	movs	r0, #1
 8020042:	71a0      	strb	r0, [r4, #6]
 8020044:	e788      	b.n	801ff58 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x166>
 8020046:	2301      	movs	r3, #1
 8020048:	9309      	str	r3, [sp, #36]	; 0x24
 802004a:	4630      	mov	r0, r6
 802004c:	e787      	b.n	801ff5e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x16c>
 802004e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020050:	2b00      	cmp	r3, #0
 8020052:	d0e2      	beq.n	802001a <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x228>
 8020054:	9b04      	ldr	r3, [sp, #16]
 8020056:	9308      	str	r3, [sp, #32]
 8020058:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802005a:	2b01      	cmp	r3, #1
 802005c:	d0dd      	beq.n	802001a <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x228>
 802005e:	2301      	movs	r3, #1
 8020060:	930a      	str	r3, [sp, #40]	; 0x28
 8020062:	e714      	b.n	801fe8e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x9c>

08020064 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 8020064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020068:	b089      	sub	sp, #36	; 0x24
 802006a:	4607      	mov	r7, r0
 802006c:	9102      	str	r1, [sp, #8]
 802006e:	4692      	mov	sl, r2
 8020070:	461c      	mov	r4, r3
 8020072:	f000 f93c 	bl	80202ee <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 8020076:	4605      	mov	r5, r0
 8020078:	2800      	cmp	r0, #0
 802007a:	d159      	bne.n	8020130 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xcc>
 802007c:	f8d4 8008 	ldr.w	r8, [r4, #8]
 8020080:	f8d7 900c 	ldr.w	r9, [r7, #12]
 8020084:	f018 0f10 	tst.w	r8, #16
 8020088:	bf18      	it	ne
 802008a:	f8d7 8008 	ldrne.w	r8, [r7, #8]
 802008e:	f008 0301 	and.w	r3, r8, #1
 8020092:	eb07 06c9 	add.w	r6, r7, r9, lsl #3
 8020096:	f04f 0b00 	mov.w	fp, #0
 802009a:	9303      	str	r3, [sp, #12]
 802009c:	f1b9 0f00 	cmp.w	r9, #0
 80200a0:	d06c      	beq.n	802017c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x118>
 80200a2:	68f2      	ldr	r2, [r6, #12]
 80200a4:	f8cd b010 	str.w	fp, [sp, #16]
 80200a8:	f002 0301 	and.w	r3, r2, #1
 80200ac:	9300      	str	r3, [sp, #0]
 80200ae:	f012 0302 	ands.w	r3, r2, #2
 80200b2:	f88d b014 	strb.w	fp, [sp, #20]
 80200b6:	e9cd 8b06 	strd	r8, fp, [sp, #24]
 80200ba:	9301      	str	r3, [sp, #4]
 80200bc:	d105      	bne.n	80200ca <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x66>
 80200be:	9b03      	ldr	r3, [sp, #12]
 80200c0:	b91b      	cbnz	r3, 80200ca <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x66>
 80200c2:	f109 39ff 	add.w	r9, r9, #4294967295
 80200c6:	3e08      	subs	r6, #8
 80200c8:	e7e8      	b.n	802009c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x38>
 80200ca:	f1ba 0f00 	cmp.w	sl, #0
 80200ce:	d033      	beq.n	8020138 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xd4>
 80200d0:	9b00      	ldr	r3, [sp, #0]
 80200d2:	1212      	asrs	r2, r2, #8
 80200d4:	b113      	cbz	r3, 80200dc <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x78>
 80200d6:	f8da 3000 	ldr.w	r3, [sl]
 80200da:	589a      	ldr	r2, [r3, r2]
 80200dc:	4452      	add	r2, sl
 80200de:	68b0      	ldr	r0, [r6, #8]
 80200e0:	9902      	ldr	r1, [sp, #8]
 80200e2:	6803      	ldr	r3, [r0, #0]
 80200e4:	699d      	ldr	r5, [r3, #24]
 80200e6:	ab04      	add	r3, sp, #16
 80200e8:	47a8      	blx	r5
 80200ea:	4605      	mov	r5, r0
 80200ec:	2800      	cmp	r0, #0
 80200ee:	d0e8      	beq.n	80200c2 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x5e>
 80200f0:	9b07      	ldr	r3, [sp, #28]
 80200f2:	2b08      	cmp	r3, #8
 80200f4:	d103      	bne.n	80200fe <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x9a>
 80200f6:	9b00      	ldr	r3, [sp, #0]
 80200f8:	b10b      	cbz	r3, 80200fe <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x9a>
 80200fa:	68b3      	ldr	r3, [r6, #8]
 80200fc:	9307      	str	r3, [sp, #28]
 80200fe:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8020102:	2b03      	cmp	r3, #3
 8020104:	d905      	bls.n	8020112 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xae>
 8020106:	9a01      	ldr	r2, [sp, #4]
 8020108:	b91a      	cbnz	r2, 8020112 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xae>
 802010a:	f023 0302 	bic.w	r3, r3, #2
 802010e:	f88d 3014 	strb.w	r3, [sp, #20]
 8020112:	68e1      	ldr	r1, [r4, #12]
 8020114:	b9c1      	cbnz	r1, 8020148 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xe4>
 8020116:	ab04      	add	r3, sp, #16
 8020118:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 802011a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 802011e:	7923      	ldrb	r3, [r4, #4]
 8020120:	2b03      	cmp	r3, #3
 8020122:	d905      	bls.n	8020130 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xcc>
 8020124:	079a      	lsls	r2, r3, #30
 8020126:	d509      	bpl.n	802013c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xd8>
 8020128:	68bb      	ldr	r3, [r7, #8]
 802012a:	f013 0f01 	tst.w	r3, #1
 802012e:	d1c8      	bne.n	80200c2 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x5e>
 8020130:	4628      	mov	r0, r5
 8020132:	b009      	add	sp, #36	; 0x24
 8020134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020138:	4652      	mov	r2, sl
 802013a:	e7d0      	b.n	80200de <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x7a>
 802013c:	07db      	lsls	r3, r3, #31
 802013e:	d5f7      	bpl.n	8020130 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xcc>
 8020140:	68bb      	ldr	r3, [r7, #8]
 8020142:	f013 0f02 	tst.w	r3, #2
 8020146:	e7f2      	b.n	802012e <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xca>
 8020148:	6823      	ldr	r3, [r4, #0]
 802014a:	9a04      	ldr	r2, [sp, #16]
 802014c:	4293      	cmp	r3, r2
 802014e:	d004      	beq.n	802015a <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xf6>
 8020150:	2300      	movs	r3, #0
 8020152:	6023      	str	r3, [r4, #0]
 8020154:	2302      	movs	r3, #2
 8020156:	7123      	strb	r3, [r4, #4]
 8020158:	e7ea      	b.n	8020130 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xcc>
 802015a:	b12b      	cbz	r3, 8020168 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x104>
 802015c:	7923      	ldrb	r3, [r4, #4]
 802015e:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8020162:	4313      	orrs	r3, r2
 8020164:	7123      	strb	r3, [r4, #4]
 8020166:	e7ac      	b.n	80200c2 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x5e>
 8020168:	9807      	ldr	r0, [sp, #28]
 802016a:	2808      	cmp	r0, #8
 802016c:	d0f2      	beq.n	8020154 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xf0>
 802016e:	2908      	cmp	r1, #8
 8020170:	d0f0      	beq.n	8020154 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xf0>
 8020172:	f000 f80b 	bl	802018c <_ZNKSt9type_infoeqERKS_>
 8020176:	2800      	cmp	r0, #0
 8020178:	d1f0      	bne.n	802015c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xf8>
 802017a:	e7eb      	b.n	8020154 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xf0>
 802017c:	7925      	ldrb	r5, [r4, #4]
 802017e:	3500      	adds	r5, #0
 8020180:	bf18      	it	ne
 8020182:	2501      	movne	r5, #1
 8020184:	e7d4      	b.n	8020130 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xcc>

08020186 <_ZNSt9type_infoD1Ev>:
 8020186:	4770      	bx	lr

08020188 <_ZNKSt9type_info14__is_pointer_pEv>:
 8020188:	2000      	movs	r0, #0
 802018a:	4770      	bx	lr

0802018c <_ZNKSt9type_infoeqERKS_>:
 802018c:	4281      	cmp	r1, r0
 802018e:	b508      	push	{r3, lr}
 8020190:	d00e      	beq.n	80201b0 <_ZNKSt9type_infoeqERKS_+0x24>
 8020192:	6840      	ldr	r0, [r0, #4]
 8020194:	7803      	ldrb	r3, [r0, #0]
 8020196:	2b2a      	cmp	r3, #42	; 0x2a
 8020198:	d00c      	beq.n	80201b4 <_ZNKSt9type_infoeqERKS_+0x28>
 802019a:	6849      	ldr	r1, [r1, #4]
 802019c:	780b      	ldrb	r3, [r1, #0]
 802019e:	2b2a      	cmp	r3, #42	; 0x2a
 80201a0:	bf08      	it	eq
 80201a2:	3101      	addeq	r1, #1
 80201a4:	f7e0 f8ec 	bl	8000380 <strcmp>
 80201a8:	fab0 f080 	clz	r0, r0
 80201ac:	0940      	lsrs	r0, r0, #5
 80201ae:	bd08      	pop	{r3, pc}
 80201b0:	2001      	movs	r0, #1
 80201b2:	e7fc      	b.n	80201ae <_ZNKSt9type_infoeqERKS_+0x22>
 80201b4:	2000      	movs	r0, #0
 80201b6:	e7fa      	b.n	80201ae <_ZNKSt9type_infoeqERKS_+0x22>

080201b8 <__cxa_pure_virtual>:
 80201b8:	b508      	push	{r3, lr}
 80201ba:	f000 f945 	bl	8020448 <_ZSt9terminatev>

080201be <_ZdlPvj>:
 80201be:	f7fc be39 	b.w	801ce34 <_ZdlPv>
	...

080201c4 <_ZSt11_Hash_bytesPKvjj>:
 80201c4:	4b18      	ldr	r3, [pc, #96]	; (8020228 <_ZSt11_Hash_bytesPKvjj+0x64>)
 80201c6:	b570      	push	{r4, r5, r6, lr}
 80201c8:	404a      	eors	r2, r1
 80201ca:	460d      	mov	r5, r1
 80201cc:	1846      	adds	r6, r0, r1
 80201ce:	2d03      	cmp	r5, #3
 80201d0:	eba6 0405 	sub.w	r4, r6, r5
 80201d4:	d908      	bls.n	80201e8 <_ZSt11_Hash_bytesPKvjj+0x24>
 80201d6:	6824      	ldr	r4, [r4, #0]
 80201d8:	435c      	muls	r4, r3
 80201da:	ea84 6414 	eor.w	r4, r4, r4, lsr #24
 80201de:	435a      	muls	r2, r3
 80201e0:	435c      	muls	r4, r3
 80201e2:	4062      	eors	r2, r4
 80201e4:	3d04      	subs	r5, #4
 80201e6:	e7f2      	b.n	80201ce <_ZSt11_Hash_bytesPKvjj+0xa>
 80201e8:	088d      	lsrs	r5, r1, #2
 80201ea:	f06f 0403 	mvn.w	r4, #3
 80201ee:	fb04 1105 	mla	r1, r4, r5, r1
 80201f2:	2902      	cmp	r1, #2
 80201f4:	eb00 0685 	add.w	r6, r0, r5, lsl #2
 80201f8:	d011      	beq.n	802021e <_ZSt11_Hash_bytesPKvjj+0x5a>
 80201fa:	2903      	cmp	r1, #3
 80201fc:	d00c      	beq.n	8020218 <_ZSt11_Hash_bytesPKvjj+0x54>
 80201fe:	2901      	cmp	r1, #1
 8020200:	d103      	bne.n	802020a <_ZSt11_Hash_bytesPKvjj+0x46>
 8020202:	f810 0025 	ldrb.w	r0, [r0, r5, lsl #2]
 8020206:	4042      	eors	r2, r0
 8020208:	435a      	muls	r2, r3
 802020a:	ea82 3252 	eor.w	r2, r2, r2, lsr #13
 802020e:	fb03 f002 	mul.w	r0, r3, r2
 8020212:	ea80 30d0 	eor.w	r0, r0, r0, lsr #15
 8020216:	bd70      	pop	{r4, r5, r6, pc}
 8020218:	78b1      	ldrb	r1, [r6, #2]
 802021a:	ea82 4201 	eor.w	r2, r2, r1, lsl #16
 802021e:	7871      	ldrb	r1, [r6, #1]
 8020220:	ea82 2201 	eor.w	r2, r2, r1, lsl #8
 8020224:	e7ed      	b.n	8020202 <_ZSt11_Hash_bytesPKvjj+0x3e>
 8020226:	bf00      	nop
 8020228:	5bd1e995 	.word	0x5bd1e995

0802022c <__cxa_guard_acquire>:
 802022c:	6803      	ldr	r3, [r0, #0]
 802022e:	07db      	lsls	r3, r3, #31
 8020230:	d406      	bmi.n	8020240 <__cxa_guard_acquire+0x14>
 8020232:	7843      	ldrb	r3, [r0, #1]
 8020234:	b103      	cbz	r3, 8020238 <__cxa_guard_acquire+0xc>
 8020236:	deff      	udf	#255	; 0xff
 8020238:	2301      	movs	r3, #1
 802023a:	7043      	strb	r3, [r0, #1]
 802023c:	4618      	mov	r0, r3
 802023e:	4770      	bx	lr
 8020240:	2000      	movs	r0, #0
 8020242:	4770      	bx	lr

08020244 <__cxa_guard_release>:
 8020244:	2301      	movs	r3, #1
 8020246:	6003      	str	r3, [r0, #0]
 8020248:	4770      	bx	lr

0802024a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 802024a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 802024c:	2400      	movs	r4, #0
 802024e:	2310      	movs	r3, #16
 8020250:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8020254:	6803      	ldr	r3, [r0, #0]
 8020256:	9400      	str	r4, [sp, #0]
 8020258:	4615      	mov	r5, r2
 802025a:	699e      	ldr	r6, [r3, #24]
 802025c:	f88d 4004 	strb.w	r4, [sp, #4]
 8020260:	466b      	mov	r3, sp
 8020262:	6812      	ldr	r2, [r2, #0]
 8020264:	47b0      	blx	r6
 8020266:	f89d 3004 	ldrb.w	r3, [sp, #4]
 802026a:	f003 0306 	and.w	r3, r3, #6
 802026e:	2b06      	cmp	r3, #6
 8020270:	bf03      	ittte	eq
 8020272:	9b00      	ldreq	r3, [sp, #0]
 8020274:	602b      	streq	r3, [r5, #0]
 8020276:	2001      	moveq	r0, #1
 8020278:	4620      	movne	r0, r4
 802027a:	b004      	add	sp, #16
 802027c:	bd70      	pop	{r4, r5, r6, pc}

0802027e <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 802027e:	9800      	ldr	r0, [sp, #0]
 8020280:	4290      	cmp	r0, r2
 8020282:	bf0c      	ite	eq
 8020284:	2006      	moveq	r0, #6
 8020286:	2001      	movne	r0, #1
 8020288:	4770      	bx	lr
	...

0802028c <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 802028c:	b510      	push	{r4, lr}
 802028e:	4b03      	ldr	r3, [pc, #12]	; (802029c <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 8020290:	6003      	str	r3, [r0, #0]
 8020292:	4604      	mov	r4, r0
 8020294:	f7ff ff77 	bl	8020186 <_ZNSt9type_infoD1Ev>
 8020298:	4620      	mov	r0, r4
 802029a:	bd10      	pop	{r4, pc}
 802029c:	08027508 	.word	0x08027508

080202a0 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 80202a0:	b510      	push	{r4, lr}
 80202a2:	4604      	mov	r4, r0
 80202a4:	f7ff fff2 	bl	802028c <_ZN10__cxxabiv117__class_type_infoD1Ev>
 80202a8:	4620      	mov	r0, r4
 80202aa:	2108      	movs	r1, #8
 80202ac:	f7ff ff87 	bl	80201be <_ZdlPvj>
 80202b0:	4620      	mov	r0, r4
 80202b2:	bd10      	pop	{r4, pc}

080202b4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 80202b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80202b8:	4698      	mov	r8, r3
 80202ba:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 80202be:	9e06      	ldr	r6, [sp, #24]
 80202c0:	429e      	cmp	r6, r3
 80202c2:	4607      	mov	r7, r0
 80202c4:	4615      	mov	r5, r2
 80202c6:	d107      	bne.n	80202d8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x24>
 80202c8:	9907      	ldr	r1, [sp, #28]
 80202ca:	f7ff ff5f 	bl	802018c <_ZNKSt9type_infoeqERKS_>
 80202ce:	b118      	cbz	r0, 80202d8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x24>
 80202d0:	7165      	strb	r5, [r4, #5]
 80202d2:	2000      	movs	r0, #0
 80202d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80202d8:	4641      	mov	r1, r8
 80202da:	4638      	mov	r0, r7
 80202dc:	f7ff ff56 	bl	802018c <_ZNKSt9type_infoeqERKS_>
 80202e0:	2800      	cmp	r0, #0
 80202e2:	d0f6      	beq.n	80202d2 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x1e>
 80202e4:	2301      	movs	r3, #1
 80202e6:	6026      	str	r6, [r4, #0]
 80202e8:	7125      	strb	r5, [r4, #4]
 80202ea:	71a3      	strb	r3, [r4, #6]
 80202ec:	e7f1      	b.n	80202d2 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x1e>

080202ee <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 80202ee:	b538      	push	{r3, r4, r5, lr}
 80202f0:	4615      	mov	r5, r2
 80202f2:	461c      	mov	r4, r3
 80202f4:	f7ff ff4a 	bl	802018c <_ZNKSt9type_infoeqERKS_>
 80202f8:	b120      	cbz	r0, 8020304 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 80202fa:	2308      	movs	r3, #8
 80202fc:	60e3      	str	r3, [r4, #12]
 80202fe:	2306      	movs	r3, #6
 8020300:	6025      	str	r5, [r4, #0]
 8020302:	7123      	strb	r3, [r4, #4]
 8020304:	bd38      	pop	{r3, r4, r5, pc}

08020306 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 8020306:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802030a:	4605      	mov	r5, r0
 802030c:	460c      	mov	r4, r1
 802030e:	4616      	mov	r6, r2
 8020310:	461f      	mov	r7, r3
 8020312:	f7ff ff3b 	bl	802018c <_ZNKSt9type_infoeqERKS_>
 8020316:	b948      	cbnz	r0, 802032c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8020318:	2f03      	cmp	r7, #3
 802031a:	d807      	bhi.n	802032c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 802031c:	6823      	ldr	r3, [r4, #0]
 802031e:	4632      	mov	r2, r6
 8020320:	4629      	mov	r1, r5
 8020322:	4620      	mov	r0, r4
 8020324:	695b      	ldr	r3, [r3, #20]
 8020326:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802032a:	4718      	bx	r3
 802032c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08020330 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 8020330:	b510      	push	{r4, lr}
 8020332:	4b03      	ldr	r3, [pc, #12]	; (8020340 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 8020334:	6003      	str	r3, [r0, #0]
 8020336:	4604      	mov	r4, r0
 8020338:	f7ff ffa8 	bl	802028c <_ZN10__cxxabiv117__class_type_infoD1Ev>
 802033c:	4620      	mov	r0, r4
 802033e:	bd10      	pop	{r4, pc}
 8020340:	08027568 	.word	0x08027568

08020344 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 8020344:	b510      	push	{r4, lr}
 8020346:	4604      	mov	r4, r0
 8020348:	f7ff fff2 	bl	8020330 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 802034c:	4620      	mov	r0, r4
 802034e:	210c      	movs	r1, #12
 8020350:	f7ff ff35 	bl	80201be <_ZdlPvj>
 8020354:	4620      	mov	r0, r4
 8020356:	bd10      	pop	{r4, pc}

08020358 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 8020358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802035c:	9e06      	ldr	r6, [sp, #24]
 802035e:	4296      	cmp	r6, r2
 8020360:	4607      	mov	r7, r0
 8020362:	4688      	mov	r8, r1
 8020364:	4615      	mov	r5, r2
 8020366:	461c      	mov	r4, r3
 8020368:	d00a      	beq.n	8020380 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x28>
 802036a:	68b8      	ldr	r0, [r7, #8]
 802036c:	6803      	ldr	r3, [r0, #0]
 802036e:	9606      	str	r6, [sp, #24]
 8020370:	6a1e      	ldr	r6, [r3, #32]
 8020372:	462a      	mov	r2, r5
 8020374:	4623      	mov	r3, r4
 8020376:	4641      	mov	r1, r8
 8020378:	46b4      	mov	ip, r6
 802037a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802037e:	4760      	bx	ip
 8020380:	4619      	mov	r1, r3
 8020382:	f7ff ff03 	bl	802018c <_ZNKSt9type_infoeqERKS_>
 8020386:	2800      	cmp	r0, #0
 8020388:	d0ef      	beq.n	802036a <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x12>
 802038a:	2006      	movs	r0, #6
 802038c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08020390 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 8020390:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020394:	460e      	mov	r6, r1
 8020396:	4619      	mov	r1, r3
 8020398:	4683      	mov	fp, r0
 802039a:	4617      	mov	r7, r2
 802039c:	4699      	mov	r9, r3
 802039e:	e9dd 4a0a 	ldrd	r4, sl, [sp, #40]	; 0x28
 80203a2:	e9dd 850c 	ldrd	r8, r5, [sp, #48]	; 0x30
 80203a6:	f7ff fef1 	bl	802018c <_ZNKSt9type_infoeqERKS_>
 80203aa:	b190      	cbz	r0, 80203d2 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 80203ac:	2e00      	cmp	r6, #0
 80203ae:	602c      	str	r4, [r5, #0]
 80203b0:	712f      	strb	r7, [r5, #4]
 80203b2:	db09      	blt.n	80203c8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 80203b4:	4434      	add	r4, r6
 80203b6:	45a0      	cmp	r8, r4
 80203b8:	bf0c      	ite	eq
 80203ba:	2406      	moveq	r4, #6
 80203bc:	2401      	movne	r4, #1
 80203be:	71ac      	strb	r4, [r5, #6]
 80203c0:	2000      	movs	r0, #0
 80203c2:	b001      	add	sp, #4
 80203c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80203c8:	3602      	adds	r6, #2
 80203ca:	d1f9      	bne.n	80203c0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80203cc:	2301      	movs	r3, #1
 80203ce:	71ab      	strb	r3, [r5, #6]
 80203d0:	e7f6      	b.n	80203c0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80203d2:	4544      	cmp	r4, r8
 80203d4:	d106      	bne.n	80203e4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 80203d6:	4651      	mov	r1, sl
 80203d8:	4658      	mov	r0, fp
 80203da:	f7ff fed7 	bl	802018c <_ZNKSt9type_infoeqERKS_>
 80203de:	b108      	cbz	r0, 80203e4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 80203e0:	716f      	strb	r7, [r5, #5]
 80203e2:	e7ed      	b.n	80203c0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80203e4:	f8db 0008 	ldr.w	r0, [fp, #8]
 80203e8:	6803      	ldr	r3, [r0, #0]
 80203ea:	e9cd 850c 	strd	r8, r5, [sp, #48]	; 0x30
 80203ee:	e9cd 4a0a 	strd	r4, sl, [sp, #40]	; 0x28
 80203f2:	69dc      	ldr	r4, [r3, #28]
 80203f4:	463a      	mov	r2, r7
 80203f6:	464b      	mov	r3, r9
 80203f8:	4631      	mov	r1, r6
 80203fa:	46a4      	mov	ip, r4
 80203fc:	b001      	add	sp, #4
 80203fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020402:	4760      	bx	ip

08020404 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 8020404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020408:	4604      	mov	r4, r0
 802040a:	460d      	mov	r5, r1
 802040c:	4616      	mov	r6, r2
 802040e:	461f      	mov	r7, r3
 8020410:	f7ff ff6d 	bl	80202ee <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 8020414:	b948      	cbnz	r0, 802042a <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 8020416:	68a0      	ldr	r0, [r4, #8]
 8020418:	6803      	ldr	r3, [r0, #0]
 802041a:	699c      	ldr	r4, [r3, #24]
 802041c:	4632      	mov	r2, r6
 802041e:	463b      	mov	r3, r7
 8020420:	4629      	mov	r1, r5
 8020422:	46a4      	mov	ip, r4
 8020424:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8020428:	4760      	bx	ip
 802042a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0802042e <_ZN10__cxxabiv111__terminateEPFvvE>:
 802042e:	b508      	push	{r3, lr}
 8020430:	4780      	blx	r0
 8020432:	f000 f8c8 	bl	80205c6 <abort>
	...

08020438 <_ZSt13get_terminatev>:
 8020438:	4b02      	ldr	r3, [pc, #8]	; (8020444 <_ZSt13get_terminatev+0xc>)
 802043a:	6818      	ldr	r0, [r3, #0]
 802043c:	f3bf 8f5b 	dmb	ish
 8020440:	4770      	bx	lr
 8020442:	bf00      	nop
 8020444:	2400003c 	.word	0x2400003c

08020448 <_ZSt9terminatev>:
 8020448:	b508      	push	{r3, lr}
 802044a:	f7ff fff5 	bl	8020438 <_ZSt13get_terminatev>
 802044e:	f7ff ffee 	bl	802042e <_ZN10__cxxabiv111__terminateEPFvvE>

08020452 <_ZNSaIcEC1Ev>:
 8020452:	4770      	bx	lr

08020454 <_ZNSaIcED1Ev>:
 8020454:	4770      	bx	lr

08020456 <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 8020456:	b10a      	cbz	r2, 802045c <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 8020458:	f000 b915 	b.w	8020686 <memcpy>
 802045c:	4770      	bx	lr
	...

08020460 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8020460:	b508      	push	{r3, lr}
 8020462:	680b      	ldr	r3, [r1, #0]
 8020464:	2b00      	cmp	r3, #0
 8020466:	da02      	bge.n	802046e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0xe>
 8020468:	4809      	ldr	r0, [pc, #36]	; (8020490 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x30>)
 802046a:	f000 f8a9 	bl	80205c0 <_ZSt20__throw_length_errorPKc>
 802046e:	4293      	cmp	r3, r2
 8020470:	d908      	bls.n	8020484 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 8020472:	0052      	lsls	r2, r2, #1
 8020474:	4293      	cmp	r3, r2
 8020476:	d205      	bcs.n	8020484 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 8020478:	2a00      	cmp	r2, #0
 802047a:	bfb6      	itet	lt
 802047c:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 8020480:	600a      	strge	r2, [r1, #0]
 8020482:	600b      	strlt	r3, [r1, #0]
 8020484:	6808      	ldr	r0, [r1, #0]
 8020486:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 802048a:	3001      	adds	r0, #1
 802048c:	f7fc bcc6 	b.w	801ce1c <_Znwj>
 8020490:	080275b6 	.word	0x080275b6

08020494 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8020494:	4603      	mov	r3, r0
 8020496:	f853 0b08 	ldr.w	r0, [r3], #8
 802049a:	4298      	cmp	r0, r3
 802049c:	d001      	beq.n	80204a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 802049e:	f7fc bcc9 	b.w	801ce34 <_ZdlPv>
 80204a2:	4770      	bx	lr

080204a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 80204a4:	2a01      	cmp	r2, #1
 80204a6:	b510      	push	{r4, lr}
 80204a8:	d102      	bne.n	80204b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 80204aa:	780a      	ldrb	r2, [r1, #0]
 80204ac:	7002      	strb	r2, [r0, #0]
 80204ae:	bd10      	pop	{r4, pc}
 80204b0:	f7ff ffd1 	bl	8020456 <_ZNSt11char_traitsIcE4copyEPcPKcj>
 80204b4:	e7fb      	b.n	80204ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

080204b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 80204b6:	b508      	push	{r3, lr}
 80204b8:	1a52      	subs	r2, r2, r1
 80204ba:	f7ff fff3 	bl	80204a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80204be:	bd08      	pop	{r3, pc}

080204c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 80204c0:	b508      	push	{r3, lr}
 80204c2:	1a52      	subs	r2, r2, r1
 80204c4:	f7ff ffee 	bl	80204a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80204c8:	bd08      	pop	{r3, pc}

080204ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 80204ca:	b510      	push	{r4, lr}
 80204cc:	4604      	mov	r4, r0
 80204ce:	f7ff ffe1 	bl	8020494 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80204d2:	4620      	mov	r0, r4
 80204d4:	bd10      	pop	{r4, pc}

080204d6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 80204d6:	6800      	ldr	r0, [r0, #0]
 80204d8:	4770      	bx	lr
	...

080204dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
 80204dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80204de:	4604      	mov	r4, r0
 80204e0:	4616      	mov	r6, r2
 80204e2:	460d      	mov	r5, r1
 80204e4:	b919      	cbnz	r1, 80204ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 80204e6:	b112      	cbz	r2, 80204ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 80204e8:	480d      	ldr	r0, [pc, #52]	; (8020520 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x44>)
 80204ea:	f000 f866 	bl	80205ba <_ZSt19__throw_logic_errorPKc>
 80204ee:	1b73      	subs	r3, r6, r5
 80204f0:	2b0f      	cmp	r3, #15
 80204f2:	9301      	str	r3, [sp, #4]
 80204f4:	d907      	bls.n	8020506 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x2a>
 80204f6:	2200      	movs	r2, #0
 80204f8:	a901      	add	r1, sp, #4
 80204fa:	4620      	mov	r0, r4
 80204fc:	f7ff ffb0 	bl	8020460 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8020500:	9b01      	ldr	r3, [sp, #4]
 8020502:	6020      	str	r0, [r4, #0]
 8020504:	60a3      	str	r3, [r4, #8]
 8020506:	4632      	mov	r2, r6
 8020508:	4629      	mov	r1, r5
 802050a:	6820      	ldr	r0, [r4, #0]
 802050c:	f7ff ffd3 	bl	80204b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
 8020510:	9b01      	ldr	r3, [sp, #4]
 8020512:	6822      	ldr	r2, [r4, #0]
 8020514:	6063      	str	r3, [r4, #4]
 8020516:	2100      	movs	r1, #0
 8020518:	54d1      	strb	r1, [r2, r3]
 802051a:	b002      	add	sp, #8
 802051c:	bd70      	pop	{r4, r5, r6, pc}
 802051e:	bf00      	nop
 8020520:	0802758c 	.word	0x0802758c

08020524 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 8020524:	b510      	push	{r4, lr}
 8020526:	f100 0208 	add.w	r2, r0, #8
 802052a:	6002      	str	r2, [r0, #0]
 802052c:	e9d1 1200 	ldrd	r1, r2, [r1]
 8020530:	4604      	mov	r4, r0
 8020532:	f04f 0300 	mov.w	r3, #0
 8020536:	440a      	add	r2, r1
 8020538:	f7ff ffd0 	bl	80204dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 802053c:	4620      	mov	r0, r4
 802053e:	bd10      	pop	{r4, pc}

08020540 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 8020540:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8020542:	4604      	mov	r4, r0
 8020544:	4616      	mov	r6, r2
 8020546:	460d      	mov	r5, r1
 8020548:	b919      	cbnz	r1, 8020552 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 802054a:	b112      	cbz	r2, 8020552 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 802054c:	480d      	ldr	r0, [pc, #52]	; (8020584 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 802054e:	f000 f834 	bl	80205ba <_ZSt19__throw_logic_errorPKc>
 8020552:	1b73      	subs	r3, r6, r5
 8020554:	2b0f      	cmp	r3, #15
 8020556:	9301      	str	r3, [sp, #4]
 8020558:	d907      	bls.n	802056a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 802055a:	2200      	movs	r2, #0
 802055c:	a901      	add	r1, sp, #4
 802055e:	4620      	mov	r0, r4
 8020560:	f7ff ff7e 	bl	8020460 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8020564:	9b01      	ldr	r3, [sp, #4]
 8020566:	6020      	str	r0, [r4, #0]
 8020568:	60a3      	str	r3, [r4, #8]
 802056a:	4632      	mov	r2, r6
 802056c:	4629      	mov	r1, r5
 802056e:	6820      	ldr	r0, [r4, #0]
 8020570:	f7ff ffa6 	bl	80204c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 8020574:	9b01      	ldr	r3, [sp, #4]
 8020576:	6822      	ldr	r2, [r4, #0]
 8020578:	6063      	str	r3, [r4, #4]
 802057a:	2100      	movs	r1, #0
 802057c:	54d1      	strb	r1, [r2, r3]
 802057e:	b002      	add	sp, #8
 8020580:	bd70      	pop	{r4, r5, r6, pc}
 8020582:	bf00      	nop
 8020584:	0802758c 	.word	0x0802758c

08020588 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 8020588:	b538      	push	{r3, r4, r5, lr}
 802058a:	f100 0308 	add.w	r3, r0, #8
 802058e:	4604      	mov	r4, r0
 8020590:	6003      	str	r3, [r0, #0]
 8020592:	460d      	mov	r5, r1
 8020594:	b159      	cbz	r1, 80205ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 8020596:	4608      	mov	r0, r1
 8020598:	f7df fefc 	bl	8000394 <strlen>
 802059c:	182a      	adds	r2, r5, r0
 802059e:	4620      	mov	r0, r4
 80205a0:	f04f 0300 	mov.w	r3, #0
 80205a4:	4629      	mov	r1, r5
 80205a6:	f7ff ffcb 	bl	8020540 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 80205aa:	4620      	mov	r0, r4
 80205ac:	bd38      	pop	{r3, r4, r5, pc}
 80205ae:	f04f 32ff 	mov.w	r2, #4294967295
 80205b2:	e7f4      	b.n	802059e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

080205b4 <_ZSt25__throw_bad_function_callv>:
 80205b4:	b508      	push	{r3, lr}
 80205b6:	f000 f806 	bl	80205c6 <abort>

080205ba <_ZSt19__throw_logic_errorPKc>:
 80205ba:	b508      	push	{r3, lr}
 80205bc:	f000 f803 	bl	80205c6 <abort>

080205c0 <_ZSt20__throw_length_errorPKc>:
 80205c0:	b508      	push	{r3, lr}
 80205c2:	f000 f800 	bl	80205c6 <abort>

080205c6 <abort>:
 80205c6:	b508      	push	{r3, lr}
 80205c8:	2006      	movs	r0, #6
 80205ca:	f000 fd35 	bl	8021038 <raise>
 80205ce:	2001      	movs	r0, #1
 80205d0:	f7e0 febc 	bl	800134c <_exit>

080205d4 <atexit>:
 80205d4:	2300      	movs	r3, #0
 80205d6:	4601      	mov	r1, r0
 80205d8:	461a      	mov	r2, r3
 80205da:	4618      	mov	r0, r3
 80205dc:	f000 be56 	b.w	802128c <__register_exitproc>

080205e0 <__libc_init_array>:
 80205e0:	b570      	push	{r4, r5, r6, lr}
 80205e2:	4e0d      	ldr	r6, [pc, #52]	; (8020618 <__libc_init_array+0x38>)
 80205e4:	4c0d      	ldr	r4, [pc, #52]	; (802061c <__libc_init_array+0x3c>)
 80205e6:	1ba4      	subs	r4, r4, r6
 80205e8:	10a4      	asrs	r4, r4, #2
 80205ea:	2500      	movs	r5, #0
 80205ec:	42a5      	cmp	r5, r4
 80205ee:	d109      	bne.n	8020604 <__libc_init_array+0x24>
 80205f0:	4e0b      	ldr	r6, [pc, #44]	; (8020620 <__libc_init_array+0x40>)
 80205f2:	4c0c      	ldr	r4, [pc, #48]	; (8020624 <__libc_init_array+0x44>)
 80205f4:	f002 fd8c 	bl	8023110 <_init>
 80205f8:	1ba4      	subs	r4, r4, r6
 80205fa:	10a4      	asrs	r4, r4, #2
 80205fc:	2500      	movs	r5, #0
 80205fe:	42a5      	cmp	r5, r4
 8020600:	d105      	bne.n	802060e <__libc_init_array+0x2e>
 8020602:	bd70      	pop	{r4, r5, r6, pc}
 8020604:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8020608:	4798      	blx	r3
 802060a:	3501      	adds	r5, #1
 802060c:	e7ee      	b.n	80205ec <__libc_init_array+0xc>
 802060e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8020612:	4798      	blx	r3
 8020614:	3501      	adds	r5, #1
 8020616:	e7f2      	b.n	80205fe <__libc_init_array+0x1e>
 8020618:	080278a0 	.word	0x080278a0
 802061c:	080278a0 	.word	0x080278a0
 8020620:	080278a0 	.word	0x080278a0
 8020624:	080278ac 	.word	0x080278ac

08020628 <__locale_ctype_ptr>:
 8020628:	4b04      	ldr	r3, [pc, #16]	; (802063c <__locale_ctype_ptr+0x14>)
 802062a:	4a05      	ldr	r2, [pc, #20]	; (8020640 <__locale_ctype_ptr+0x18>)
 802062c:	681b      	ldr	r3, [r3, #0]
 802062e:	6a1b      	ldr	r3, [r3, #32]
 8020630:	2b00      	cmp	r3, #0
 8020632:	bf08      	it	eq
 8020634:	4613      	moveq	r3, r2
 8020636:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 802063a:	4770      	bx	lr
 802063c:	24000040 	.word	0x24000040
 8020640:	240000a4 	.word	0x240000a4

08020644 <__ascii_mbtowc>:
 8020644:	b082      	sub	sp, #8
 8020646:	b901      	cbnz	r1, 802064a <__ascii_mbtowc+0x6>
 8020648:	a901      	add	r1, sp, #4
 802064a:	b142      	cbz	r2, 802065e <__ascii_mbtowc+0x1a>
 802064c:	b14b      	cbz	r3, 8020662 <__ascii_mbtowc+0x1e>
 802064e:	7813      	ldrb	r3, [r2, #0]
 8020650:	600b      	str	r3, [r1, #0]
 8020652:	7812      	ldrb	r2, [r2, #0]
 8020654:	1c10      	adds	r0, r2, #0
 8020656:	bf18      	it	ne
 8020658:	2001      	movne	r0, #1
 802065a:	b002      	add	sp, #8
 802065c:	4770      	bx	lr
 802065e:	4610      	mov	r0, r2
 8020660:	e7fb      	b.n	802065a <__ascii_mbtowc+0x16>
 8020662:	f06f 0001 	mvn.w	r0, #1
 8020666:	e7f8      	b.n	802065a <__ascii_mbtowc+0x16>

08020668 <memcmp>:
 8020668:	b530      	push	{r4, r5, lr}
 802066a:	2400      	movs	r4, #0
 802066c:	42a2      	cmp	r2, r4
 802066e:	d101      	bne.n	8020674 <memcmp+0xc>
 8020670:	2000      	movs	r0, #0
 8020672:	e007      	b.n	8020684 <memcmp+0x1c>
 8020674:	5d03      	ldrb	r3, [r0, r4]
 8020676:	3401      	adds	r4, #1
 8020678:	190d      	adds	r5, r1, r4
 802067a:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 802067e:	42ab      	cmp	r3, r5
 8020680:	d0f4      	beq.n	802066c <memcmp+0x4>
 8020682:	1b58      	subs	r0, r3, r5
 8020684:	bd30      	pop	{r4, r5, pc}

08020686 <memcpy>:
 8020686:	b510      	push	{r4, lr}
 8020688:	1e43      	subs	r3, r0, #1
 802068a:	440a      	add	r2, r1
 802068c:	4291      	cmp	r1, r2
 802068e:	d100      	bne.n	8020692 <memcpy+0xc>
 8020690:	bd10      	pop	{r4, pc}
 8020692:	f811 4b01 	ldrb.w	r4, [r1], #1
 8020696:	f803 4f01 	strb.w	r4, [r3, #1]!
 802069a:	e7f7      	b.n	802068c <memcpy+0x6>

0802069c <memmove>:
 802069c:	4288      	cmp	r0, r1
 802069e:	b510      	push	{r4, lr}
 80206a0:	eb01 0302 	add.w	r3, r1, r2
 80206a4:	d807      	bhi.n	80206b6 <memmove+0x1a>
 80206a6:	1e42      	subs	r2, r0, #1
 80206a8:	4299      	cmp	r1, r3
 80206aa:	d00a      	beq.n	80206c2 <memmove+0x26>
 80206ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 80206b0:	f802 4f01 	strb.w	r4, [r2, #1]!
 80206b4:	e7f8      	b.n	80206a8 <memmove+0xc>
 80206b6:	4283      	cmp	r3, r0
 80206b8:	d9f5      	bls.n	80206a6 <memmove+0xa>
 80206ba:	1881      	adds	r1, r0, r2
 80206bc:	1ad2      	subs	r2, r2, r3
 80206be:	42d3      	cmn	r3, r2
 80206c0:	d100      	bne.n	80206c4 <memmove+0x28>
 80206c2:	bd10      	pop	{r4, pc}
 80206c4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80206c8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80206cc:	e7f7      	b.n	80206be <memmove+0x22>

080206ce <memset>:
 80206ce:	4402      	add	r2, r0
 80206d0:	4603      	mov	r3, r0
 80206d2:	4293      	cmp	r3, r2
 80206d4:	d100      	bne.n	80206d8 <memset+0xa>
 80206d6:	4770      	bx	lr
 80206d8:	f803 1b01 	strb.w	r1, [r3], #1
 80206dc:	e7f9      	b.n	80206d2 <memset+0x4>

080206de <__cvt>:
 80206de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80206e0:	ed2d 8b02 	vpush	{d8}
 80206e4:	eeb0 8b40 	vmov.f64	d8, d0
 80206e8:	b085      	sub	sp, #20
 80206ea:	4617      	mov	r7, r2
 80206ec:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80206ee:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80206f0:	ee18 2a90 	vmov	r2, s17
 80206f4:	f025 0520 	bic.w	r5, r5, #32
 80206f8:	2a00      	cmp	r2, #0
 80206fa:	bfb6      	itet	lt
 80206fc:	222d      	movlt	r2, #45	; 0x2d
 80206fe:	2200      	movge	r2, #0
 8020700:	eeb1 8b40 	vneglt.f64	d8, d0
 8020704:	2d46      	cmp	r5, #70	; 0x46
 8020706:	460c      	mov	r4, r1
 8020708:	701a      	strb	r2, [r3, #0]
 802070a:	d004      	beq.n	8020716 <__cvt+0x38>
 802070c:	2d45      	cmp	r5, #69	; 0x45
 802070e:	d100      	bne.n	8020712 <__cvt+0x34>
 8020710:	3401      	adds	r4, #1
 8020712:	2102      	movs	r1, #2
 8020714:	e000      	b.n	8020718 <__cvt+0x3a>
 8020716:	2103      	movs	r1, #3
 8020718:	ab03      	add	r3, sp, #12
 802071a:	9301      	str	r3, [sp, #4]
 802071c:	ab02      	add	r3, sp, #8
 802071e:	9300      	str	r3, [sp, #0]
 8020720:	4622      	mov	r2, r4
 8020722:	4633      	mov	r3, r6
 8020724:	eeb0 0b48 	vmov.f64	d0, d8
 8020728:	f000 fea2 	bl	8021470 <_dtoa_r>
 802072c:	2d47      	cmp	r5, #71	; 0x47
 802072e:	d101      	bne.n	8020734 <__cvt+0x56>
 8020730:	07fb      	lsls	r3, r7, #31
 8020732:	d51e      	bpl.n	8020772 <__cvt+0x94>
 8020734:	2d46      	cmp	r5, #70	; 0x46
 8020736:	eb00 0304 	add.w	r3, r0, r4
 802073a:	d10c      	bne.n	8020756 <__cvt+0x78>
 802073c:	7802      	ldrb	r2, [r0, #0]
 802073e:	2a30      	cmp	r2, #48	; 0x30
 8020740:	d107      	bne.n	8020752 <__cvt+0x74>
 8020742:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8020746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802074a:	bf1c      	itt	ne
 802074c:	f1c4 0401 	rsbne	r4, r4, #1
 8020750:	6034      	strne	r4, [r6, #0]
 8020752:	6832      	ldr	r2, [r6, #0]
 8020754:	4413      	add	r3, r2
 8020756:	eeb5 8b40 	vcmp.f64	d8, #0.0
 802075a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802075e:	d007      	beq.n	8020770 <__cvt+0x92>
 8020760:	2130      	movs	r1, #48	; 0x30
 8020762:	9a03      	ldr	r2, [sp, #12]
 8020764:	429a      	cmp	r2, r3
 8020766:	d204      	bcs.n	8020772 <__cvt+0x94>
 8020768:	1c54      	adds	r4, r2, #1
 802076a:	9403      	str	r4, [sp, #12]
 802076c:	7011      	strb	r1, [r2, #0]
 802076e:	e7f8      	b.n	8020762 <__cvt+0x84>
 8020770:	9303      	str	r3, [sp, #12]
 8020772:	9b03      	ldr	r3, [sp, #12]
 8020774:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020776:	1a1b      	subs	r3, r3, r0
 8020778:	6013      	str	r3, [r2, #0]
 802077a:	b005      	add	sp, #20
 802077c:	ecbd 8b02 	vpop	{d8}
 8020780:	bdf0      	pop	{r4, r5, r6, r7, pc}

08020782 <__exponent>:
 8020782:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8020784:	2900      	cmp	r1, #0
 8020786:	4604      	mov	r4, r0
 8020788:	bfba      	itte	lt
 802078a:	4249      	neglt	r1, r1
 802078c:	232d      	movlt	r3, #45	; 0x2d
 802078e:	232b      	movge	r3, #43	; 0x2b
 8020790:	2909      	cmp	r1, #9
 8020792:	f804 2b02 	strb.w	r2, [r4], #2
 8020796:	7043      	strb	r3, [r0, #1]
 8020798:	dd20      	ble.n	80207dc <__exponent+0x5a>
 802079a:	f10d 0307 	add.w	r3, sp, #7
 802079e:	461f      	mov	r7, r3
 80207a0:	260a      	movs	r6, #10
 80207a2:	fb91 f5f6 	sdiv	r5, r1, r6
 80207a6:	fb06 1115 	mls	r1, r6, r5, r1
 80207aa:	3130      	adds	r1, #48	; 0x30
 80207ac:	2d09      	cmp	r5, #9
 80207ae:	f803 1c01 	strb.w	r1, [r3, #-1]
 80207b2:	f103 32ff 	add.w	r2, r3, #4294967295
 80207b6:	4629      	mov	r1, r5
 80207b8:	dc09      	bgt.n	80207ce <__exponent+0x4c>
 80207ba:	3130      	adds	r1, #48	; 0x30
 80207bc:	3b02      	subs	r3, #2
 80207be:	f802 1c01 	strb.w	r1, [r2, #-1]
 80207c2:	42bb      	cmp	r3, r7
 80207c4:	4622      	mov	r2, r4
 80207c6:	d304      	bcc.n	80207d2 <__exponent+0x50>
 80207c8:	1a10      	subs	r0, r2, r0
 80207ca:	b003      	add	sp, #12
 80207cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80207ce:	4613      	mov	r3, r2
 80207d0:	e7e7      	b.n	80207a2 <__exponent+0x20>
 80207d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80207d6:	f804 2b01 	strb.w	r2, [r4], #1
 80207da:	e7f2      	b.n	80207c2 <__exponent+0x40>
 80207dc:	2330      	movs	r3, #48	; 0x30
 80207de:	4419      	add	r1, r3
 80207e0:	7083      	strb	r3, [r0, #2]
 80207e2:	1d02      	adds	r2, r0, #4
 80207e4:	70c1      	strb	r1, [r0, #3]
 80207e6:	e7ef      	b.n	80207c8 <__exponent+0x46>

080207e8 <_printf_float>:
 80207e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80207ec:	b08d      	sub	sp, #52	; 0x34
 80207ee:	460c      	mov	r4, r1
 80207f0:	4616      	mov	r6, r2
 80207f2:	461f      	mov	r7, r3
 80207f4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80207f8:	4605      	mov	r5, r0
 80207fa:	f001 fcff 	bl	80221fc <_localeconv_r>
 80207fe:	f8d0 b000 	ldr.w	fp, [r0]
 8020802:	4658      	mov	r0, fp
 8020804:	f7df fdc6 	bl	8000394 <strlen>
 8020808:	2300      	movs	r3, #0
 802080a:	930a      	str	r3, [sp, #40]	; 0x28
 802080c:	f8d8 3000 	ldr.w	r3, [r8]
 8020810:	9005      	str	r0, [sp, #20]
 8020812:	3307      	adds	r3, #7
 8020814:	f023 0307 	bic.w	r3, r3, #7
 8020818:	f103 0108 	add.w	r1, r3, #8
 802081c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8020820:	6822      	ldr	r2, [r4, #0]
 8020822:	f8c8 1000 	str.w	r1, [r8]
 8020826:	e9d3 0100 	ldrd	r0, r1, [r3]
 802082a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 802082e:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 8020ab8 <_printf_float+0x2d0>
 8020832:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8020836:	eeb0 6bc0 	vabs.f64	d6, d0
 802083a:	eeb4 6b47 	vcmp.f64	d6, d7
 802083e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020842:	dd24      	ble.n	802088e <_printf_float+0xa6>
 8020844:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8020848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802084c:	d502      	bpl.n	8020854 <_printf_float+0x6c>
 802084e:	232d      	movs	r3, #45	; 0x2d
 8020850:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8020854:	499a      	ldr	r1, [pc, #616]	; (8020ac0 <_printf_float+0x2d8>)
 8020856:	4b9b      	ldr	r3, [pc, #620]	; (8020ac4 <_printf_float+0x2dc>)
 8020858:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 802085c:	bf8c      	ite	hi
 802085e:	4688      	movhi	r8, r1
 8020860:	4698      	movls	r8, r3
 8020862:	f022 0204 	bic.w	r2, r2, #4
 8020866:	2303      	movs	r3, #3
 8020868:	6123      	str	r3, [r4, #16]
 802086a:	6022      	str	r2, [r4, #0]
 802086c:	f04f 0a00 	mov.w	sl, #0
 8020870:	9700      	str	r7, [sp, #0]
 8020872:	4633      	mov	r3, r6
 8020874:	aa0b      	add	r2, sp, #44	; 0x2c
 8020876:	4621      	mov	r1, r4
 8020878:	4628      	mov	r0, r5
 802087a:	f000 f9e1 	bl	8020c40 <_printf_common>
 802087e:	3001      	adds	r0, #1
 8020880:	f040 8089 	bne.w	8020996 <_printf_float+0x1ae>
 8020884:	f04f 30ff 	mov.w	r0, #4294967295
 8020888:	b00d      	add	sp, #52	; 0x34
 802088a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802088e:	eeb4 0b40 	vcmp.f64	d0, d0
 8020892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020896:	d702      	bvc.n	802089e <_printf_float+0xb6>
 8020898:	498b      	ldr	r1, [pc, #556]	; (8020ac8 <_printf_float+0x2e0>)
 802089a:	4b8c      	ldr	r3, [pc, #560]	; (8020acc <_printf_float+0x2e4>)
 802089c:	e7dc      	b.n	8020858 <_printf_float+0x70>
 802089e:	6861      	ldr	r1, [r4, #4]
 80208a0:	1c4b      	adds	r3, r1, #1
 80208a2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80208a6:	ab0a      	add	r3, sp, #40	; 0x28
 80208a8:	a809      	add	r0, sp, #36	; 0x24
 80208aa:	d13b      	bne.n	8020924 <_printf_float+0x13c>
 80208ac:	2106      	movs	r1, #6
 80208ae:	6061      	str	r1, [r4, #4]
 80208b0:	f04f 0c00 	mov.w	ip, #0
 80208b4:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 80208b8:	e9cd 0900 	strd	r0, r9, [sp]
 80208bc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80208c0:	6022      	str	r2, [r4, #0]
 80208c2:	6861      	ldr	r1, [r4, #4]
 80208c4:	4628      	mov	r0, r5
 80208c6:	f7ff ff0a 	bl	80206de <__cvt>
 80208ca:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 80208ce:	2b47      	cmp	r3, #71	; 0x47
 80208d0:	4680      	mov	r8, r0
 80208d2:	d109      	bne.n	80208e8 <_printf_float+0x100>
 80208d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80208d6:	1cd8      	adds	r0, r3, #3
 80208d8:	db02      	blt.n	80208e0 <_printf_float+0xf8>
 80208da:	6862      	ldr	r2, [r4, #4]
 80208dc:	4293      	cmp	r3, r2
 80208de:	dd47      	ble.n	8020970 <_printf_float+0x188>
 80208e0:	f1a9 0902 	sub.w	r9, r9, #2
 80208e4:	fa5f f989 	uxtb.w	r9, r9
 80208e8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80208ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 80208ee:	d824      	bhi.n	802093a <_printf_float+0x152>
 80208f0:	3901      	subs	r1, #1
 80208f2:	464a      	mov	r2, r9
 80208f4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80208f8:	9109      	str	r1, [sp, #36]	; 0x24
 80208fa:	f7ff ff42 	bl	8020782 <__exponent>
 80208fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020900:	1813      	adds	r3, r2, r0
 8020902:	2a01      	cmp	r2, #1
 8020904:	4682      	mov	sl, r0
 8020906:	6123      	str	r3, [r4, #16]
 8020908:	dc02      	bgt.n	8020910 <_printf_float+0x128>
 802090a:	6822      	ldr	r2, [r4, #0]
 802090c:	07d1      	lsls	r1, r2, #31
 802090e:	d501      	bpl.n	8020914 <_printf_float+0x12c>
 8020910:	3301      	adds	r3, #1
 8020912:	6123      	str	r3, [r4, #16]
 8020914:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8020918:	2b00      	cmp	r3, #0
 802091a:	d0a9      	beq.n	8020870 <_printf_float+0x88>
 802091c:	232d      	movs	r3, #45	; 0x2d
 802091e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8020922:	e7a5      	b.n	8020870 <_printf_float+0x88>
 8020924:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 8020928:	f000 8178 	beq.w	8020c1c <_printf_float+0x434>
 802092c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8020930:	d1be      	bne.n	80208b0 <_printf_float+0xc8>
 8020932:	2900      	cmp	r1, #0
 8020934:	d1bc      	bne.n	80208b0 <_printf_float+0xc8>
 8020936:	2101      	movs	r1, #1
 8020938:	e7b9      	b.n	80208ae <_printf_float+0xc6>
 802093a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 802093e:	d119      	bne.n	8020974 <_printf_float+0x18c>
 8020940:	2900      	cmp	r1, #0
 8020942:	6863      	ldr	r3, [r4, #4]
 8020944:	dd0c      	ble.n	8020960 <_printf_float+0x178>
 8020946:	6121      	str	r1, [r4, #16]
 8020948:	b913      	cbnz	r3, 8020950 <_printf_float+0x168>
 802094a:	6822      	ldr	r2, [r4, #0]
 802094c:	07d2      	lsls	r2, r2, #31
 802094e:	d502      	bpl.n	8020956 <_printf_float+0x16e>
 8020950:	3301      	adds	r3, #1
 8020952:	440b      	add	r3, r1
 8020954:	6123      	str	r3, [r4, #16]
 8020956:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020958:	65a3      	str	r3, [r4, #88]	; 0x58
 802095a:	f04f 0a00 	mov.w	sl, #0
 802095e:	e7d9      	b.n	8020914 <_printf_float+0x12c>
 8020960:	b913      	cbnz	r3, 8020968 <_printf_float+0x180>
 8020962:	6822      	ldr	r2, [r4, #0]
 8020964:	07d0      	lsls	r0, r2, #31
 8020966:	d501      	bpl.n	802096c <_printf_float+0x184>
 8020968:	3302      	adds	r3, #2
 802096a:	e7f3      	b.n	8020954 <_printf_float+0x16c>
 802096c:	2301      	movs	r3, #1
 802096e:	e7f1      	b.n	8020954 <_printf_float+0x16c>
 8020970:	f04f 0967 	mov.w	r9, #103	; 0x67
 8020974:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8020978:	4293      	cmp	r3, r2
 802097a:	db05      	blt.n	8020988 <_printf_float+0x1a0>
 802097c:	6822      	ldr	r2, [r4, #0]
 802097e:	6123      	str	r3, [r4, #16]
 8020980:	07d1      	lsls	r1, r2, #31
 8020982:	d5e8      	bpl.n	8020956 <_printf_float+0x16e>
 8020984:	3301      	adds	r3, #1
 8020986:	e7e5      	b.n	8020954 <_printf_float+0x16c>
 8020988:	2b00      	cmp	r3, #0
 802098a:	bfd4      	ite	le
 802098c:	f1c3 0302 	rsble	r3, r3, #2
 8020990:	2301      	movgt	r3, #1
 8020992:	4413      	add	r3, r2
 8020994:	e7de      	b.n	8020954 <_printf_float+0x16c>
 8020996:	6823      	ldr	r3, [r4, #0]
 8020998:	055a      	lsls	r2, r3, #21
 802099a:	d407      	bmi.n	80209ac <_printf_float+0x1c4>
 802099c:	6923      	ldr	r3, [r4, #16]
 802099e:	4642      	mov	r2, r8
 80209a0:	4631      	mov	r1, r6
 80209a2:	4628      	mov	r0, r5
 80209a4:	47b8      	blx	r7
 80209a6:	3001      	adds	r0, #1
 80209a8:	d12a      	bne.n	8020a00 <_printf_float+0x218>
 80209aa:	e76b      	b.n	8020884 <_printf_float+0x9c>
 80209ac:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80209b0:	f240 80de 	bls.w	8020b70 <_printf_float+0x388>
 80209b4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80209b8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80209bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80209c0:	d133      	bne.n	8020a2a <_printf_float+0x242>
 80209c2:	2301      	movs	r3, #1
 80209c4:	4a42      	ldr	r2, [pc, #264]	; (8020ad0 <_printf_float+0x2e8>)
 80209c6:	4631      	mov	r1, r6
 80209c8:	4628      	mov	r0, r5
 80209ca:	47b8      	blx	r7
 80209cc:	3001      	adds	r0, #1
 80209ce:	f43f af59 	beq.w	8020884 <_printf_float+0x9c>
 80209d2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80209d6:	429a      	cmp	r2, r3
 80209d8:	db02      	blt.n	80209e0 <_printf_float+0x1f8>
 80209da:	6823      	ldr	r3, [r4, #0]
 80209dc:	07d8      	lsls	r0, r3, #31
 80209de:	d50f      	bpl.n	8020a00 <_printf_float+0x218>
 80209e0:	9b05      	ldr	r3, [sp, #20]
 80209e2:	465a      	mov	r2, fp
 80209e4:	4631      	mov	r1, r6
 80209e6:	4628      	mov	r0, r5
 80209e8:	47b8      	blx	r7
 80209ea:	3001      	adds	r0, #1
 80209ec:	f43f af4a 	beq.w	8020884 <_printf_float+0x9c>
 80209f0:	f04f 0800 	mov.w	r8, #0
 80209f4:	f104 091a 	add.w	r9, r4, #26
 80209f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80209fa:	3b01      	subs	r3, #1
 80209fc:	4543      	cmp	r3, r8
 80209fe:	dc09      	bgt.n	8020a14 <_printf_float+0x22c>
 8020a00:	6823      	ldr	r3, [r4, #0]
 8020a02:	079b      	lsls	r3, r3, #30
 8020a04:	f100 8105 	bmi.w	8020c12 <_printf_float+0x42a>
 8020a08:	68e0      	ldr	r0, [r4, #12]
 8020a0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020a0c:	4298      	cmp	r0, r3
 8020a0e:	bfb8      	it	lt
 8020a10:	4618      	movlt	r0, r3
 8020a12:	e739      	b.n	8020888 <_printf_float+0xa0>
 8020a14:	2301      	movs	r3, #1
 8020a16:	464a      	mov	r2, r9
 8020a18:	4631      	mov	r1, r6
 8020a1a:	4628      	mov	r0, r5
 8020a1c:	47b8      	blx	r7
 8020a1e:	3001      	adds	r0, #1
 8020a20:	f43f af30 	beq.w	8020884 <_printf_float+0x9c>
 8020a24:	f108 0801 	add.w	r8, r8, #1
 8020a28:	e7e6      	b.n	80209f8 <_printf_float+0x210>
 8020a2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020a2c:	2b00      	cmp	r3, #0
 8020a2e:	dc2b      	bgt.n	8020a88 <_printf_float+0x2a0>
 8020a30:	2301      	movs	r3, #1
 8020a32:	4a27      	ldr	r2, [pc, #156]	; (8020ad0 <_printf_float+0x2e8>)
 8020a34:	4631      	mov	r1, r6
 8020a36:	4628      	mov	r0, r5
 8020a38:	47b8      	blx	r7
 8020a3a:	3001      	adds	r0, #1
 8020a3c:	f43f af22 	beq.w	8020884 <_printf_float+0x9c>
 8020a40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020a42:	b923      	cbnz	r3, 8020a4e <_printf_float+0x266>
 8020a44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020a46:	b913      	cbnz	r3, 8020a4e <_printf_float+0x266>
 8020a48:	6823      	ldr	r3, [r4, #0]
 8020a4a:	07d9      	lsls	r1, r3, #31
 8020a4c:	d5d8      	bpl.n	8020a00 <_printf_float+0x218>
 8020a4e:	9b05      	ldr	r3, [sp, #20]
 8020a50:	465a      	mov	r2, fp
 8020a52:	4631      	mov	r1, r6
 8020a54:	4628      	mov	r0, r5
 8020a56:	47b8      	blx	r7
 8020a58:	3001      	adds	r0, #1
 8020a5a:	f43f af13 	beq.w	8020884 <_printf_float+0x9c>
 8020a5e:	f04f 0900 	mov.w	r9, #0
 8020a62:	f104 0a1a 	add.w	sl, r4, #26
 8020a66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020a68:	425b      	negs	r3, r3
 8020a6a:	454b      	cmp	r3, r9
 8020a6c:	dc01      	bgt.n	8020a72 <_printf_float+0x28a>
 8020a6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020a70:	e795      	b.n	802099e <_printf_float+0x1b6>
 8020a72:	2301      	movs	r3, #1
 8020a74:	4652      	mov	r2, sl
 8020a76:	4631      	mov	r1, r6
 8020a78:	4628      	mov	r0, r5
 8020a7a:	47b8      	blx	r7
 8020a7c:	3001      	adds	r0, #1
 8020a7e:	f43f af01 	beq.w	8020884 <_printf_float+0x9c>
 8020a82:	f109 0901 	add.w	r9, r9, #1
 8020a86:	e7ee      	b.n	8020a66 <_printf_float+0x27e>
 8020a88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020a8a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8020a8c:	429a      	cmp	r2, r3
 8020a8e:	bfa8      	it	ge
 8020a90:	461a      	movge	r2, r3
 8020a92:	2a00      	cmp	r2, #0
 8020a94:	4691      	mov	r9, r2
 8020a96:	dd07      	ble.n	8020aa8 <_printf_float+0x2c0>
 8020a98:	4613      	mov	r3, r2
 8020a9a:	4631      	mov	r1, r6
 8020a9c:	4642      	mov	r2, r8
 8020a9e:	4628      	mov	r0, r5
 8020aa0:	47b8      	blx	r7
 8020aa2:	3001      	adds	r0, #1
 8020aa4:	f43f aeee 	beq.w	8020884 <_printf_float+0x9c>
 8020aa8:	f104 031a 	add.w	r3, r4, #26
 8020aac:	f04f 0a00 	mov.w	sl, #0
 8020ab0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8020ab4:	9307      	str	r3, [sp, #28]
 8020ab6:	e017      	b.n	8020ae8 <_printf_float+0x300>
 8020ab8:	ffffffff 	.word	0xffffffff
 8020abc:	7fefffff 	.word	0x7fefffff
 8020ac0:	080275e6 	.word	0x080275e6
 8020ac4:	080275e2 	.word	0x080275e2
 8020ac8:	080275ee 	.word	0x080275ee
 8020acc:	080275ea 	.word	0x080275ea
 8020ad0:	080275f2 	.word	0x080275f2
 8020ad4:	2301      	movs	r3, #1
 8020ad6:	9a07      	ldr	r2, [sp, #28]
 8020ad8:	4631      	mov	r1, r6
 8020ada:	4628      	mov	r0, r5
 8020adc:	47b8      	blx	r7
 8020ade:	3001      	adds	r0, #1
 8020ae0:	f43f aed0 	beq.w	8020884 <_printf_float+0x9c>
 8020ae4:	f10a 0a01 	add.w	sl, sl, #1
 8020ae8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8020aea:	9306      	str	r3, [sp, #24]
 8020aec:	eba3 0309 	sub.w	r3, r3, r9
 8020af0:	4553      	cmp	r3, sl
 8020af2:	dcef      	bgt.n	8020ad4 <_printf_float+0x2ec>
 8020af4:	9b06      	ldr	r3, [sp, #24]
 8020af6:	4498      	add	r8, r3
 8020af8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8020afc:	429a      	cmp	r2, r3
 8020afe:	db15      	blt.n	8020b2c <_printf_float+0x344>
 8020b00:	6823      	ldr	r3, [r4, #0]
 8020b02:	07da      	lsls	r2, r3, #31
 8020b04:	d412      	bmi.n	8020b2c <_printf_float+0x344>
 8020b06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020b08:	9a06      	ldr	r2, [sp, #24]
 8020b0a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8020b0c:	1a9a      	subs	r2, r3, r2
 8020b0e:	eba3 0a01 	sub.w	sl, r3, r1
 8020b12:	4592      	cmp	sl, r2
 8020b14:	bfa8      	it	ge
 8020b16:	4692      	movge	sl, r2
 8020b18:	f1ba 0f00 	cmp.w	sl, #0
 8020b1c:	dc0e      	bgt.n	8020b3c <_printf_float+0x354>
 8020b1e:	f04f 0800 	mov.w	r8, #0
 8020b22:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8020b26:	f104 091a 	add.w	r9, r4, #26
 8020b2a:	e019      	b.n	8020b60 <_printf_float+0x378>
 8020b2c:	9b05      	ldr	r3, [sp, #20]
 8020b2e:	465a      	mov	r2, fp
 8020b30:	4631      	mov	r1, r6
 8020b32:	4628      	mov	r0, r5
 8020b34:	47b8      	blx	r7
 8020b36:	3001      	adds	r0, #1
 8020b38:	d1e5      	bne.n	8020b06 <_printf_float+0x31e>
 8020b3a:	e6a3      	b.n	8020884 <_printf_float+0x9c>
 8020b3c:	4653      	mov	r3, sl
 8020b3e:	4642      	mov	r2, r8
 8020b40:	4631      	mov	r1, r6
 8020b42:	4628      	mov	r0, r5
 8020b44:	47b8      	blx	r7
 8020b46:	3001      	adds	r0, #1
 8020b48:	d1e9      	bne.n	8020b1e <_printf_float+0x336>
 8020b4a:	e69b      	b.n	8020884 <_printf_float+0x9c>
 8020b4c:	2301      	movs	r3, #1
 8020b4e:	464a      	mov	r2, r9
 8020b50:	4631      	mov	r1, r6
 8020b52:	4628      	mov	r0, r5
 8020b54:	47b8      	blx	r7
 8020b56:	3001      	adds	r0, #1
 8020b58:	f43f ae94 	beq.w	8020884 <_printf_float+0x9c>
 8020b5c:	f108 0801 	add.w	r8, r8, #1
 8020b60:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8020b64:	1a9b      	subs	r3, r3, r2
 8020b66:	eba3 030a 	sub.w	r3, r3, sl
 8020b6a:	4543      	cmp	r3, r8
 8020b6c:	dcee      	bgt.n	8020b4c <_printf_float+0x364>
 8020b6e:	e747      	b.n	8020a00 <_printf_float+0x218>
 8020b70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020b72:	2a01      	cmp	r2, #1
 8020b74:	dc01      	bgt.n	8020b7a <_printf_float+0x392>
 8020b76:	07db      	lsls	r3, r3, #31
 8020b78:	d539      	bpl.n	8020bee <_printf_float+0x406>
 8020b7a:	2301      	movs	r3, #1
 8020b7c:	4642      	mov	r2, r8
 8020b7e:	4631      	mov	r1, r6
 8020b80:	4628      	mov	r0, r5
 8020b82:	47b8      	blx	r7
 8020b84:	3001      	adds	r0, #1
 8020b86:	f43f ae7d 	beq.w	8020884 <_printf_float+0x9c>
 8020b8a:	9b05      	ldr	r3, [sp, #20]
 8020b8c:	465a      	mov	r2, fp
 8020b8e:	4631      	mov	r1, r6
 8020b90:	4628      	mov	r0, r5
 8020b92:	47b8      	blx	r7
 8020b94:	3001      	adds	r0, #1
 8020b96:	f108 0801 	add.w	r8, r8, #1
 8020b9a:	f43f ae73 	beq.w	8020884 <_printf_float+0x9c>
 8020b9e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8020ba2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020ba4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8020ba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020bac:	f103 33ff 	add.w	r3, r3, #4294967295
 8020bb0:	d018      	beq.n	8020be4 <_printf_float+0x3fc>
 8020bb2:	4642      	mov	r2, r8
 8020bb4:	4631      	mov	r1, r6
 8020bb6:	4628      	mov	r0, r5
 8020bb8:	47b8      	blx	r7
 8020bba:	3001      	adds	r0, #1
 8020bbc:	d10e      	bne.n	8020bdc <_printf_float+0x3f4>
 8020bbe:	e661      	b.n	8020884 <_printf_float+0x9c>
 8020bc0:	2301      	movs	r3, #1
 8020bc2:	464a      	mov	r2, r9
 8020bc4:	4631      	mov	r1, r6
 8020bc6:	4628      	mov	r0, r5
 8020bc8:	47b8      	blx	r7
 8020bca:	3001      	adds	r0, #1
 8020bcc:	f43f ae5a 	beq.w	8020884 <_printf_float+0x9c>
 8020bd0:	f108 0801 	add.w	r8, r8, #1
 8020bd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020bd6:	3b01      	subs	r3, #1
 8020bd8:	4543      	cmp	r3, r8
 8020bda:	dcf1      	bgt.n	8020bc0 <_printf_float+0x3d8>
 8020bdc:	4653      	mov	r3, sl
 8020bde:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8020be2:	e6dd      	b.n	80209a0 <_printf_float+0x1b8>
 8020be4:	f04f 0800 	mov.w	r8, #0
 8020be8:	f104 091a 	add.w	r9, r4, #26
 8020bec:	e7f2      	b.n	8020bd4 <_printf_float+0x3ec>
 8020bee:	2301      	movs	r3, #1
 8020bf0:	e7df      	b.n	8020bb2 <_printf_float+0x3ca>
 8020bf2:	2301      	movs	r3, #1
 8020bf4:	464a      	mov	r2, r9
 8020bf6:	4631      	mov	r1, r6
 8020bf8:	4628      	mov	r0, r5
 8020bfa:	47b8      	blx	r7
 8020bfc:	3001      	adds	r0, #1
 8020bfe:	f43f ae41 	beq.w	8020884 <_printf_float+0x9c>
 8020c02:	f108 0801 	add.w	r8, r8, #1
 8020c06:	68e3      	ldr	r3, [r4, #12]
 8020c08:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8020c0a:	1a9b      	subs	r3, r3, r2
 8020c0c:	4543      	cmp	r3, r8
 8020c0e:	dcf0      	bgt.n	8020bf2 <_printf_float+0x40a>
 8020c10:	e6fa      	b.n	8020a08 <_printf_float+0x220>
 8020c12:	f04f 0800 	mov.w	r8, #0
 8020c16:	f104 0919 	add.w	r9, r4, #25
 8020c1a:	e7f4      	b.n	8020c06 <_printf_float+0x41e>
 8020c1c:	2900      	cmp	r1, #0
 8020c1e:	f43f ae8a 	beq.w	8020936 <_printf_float+0x14e>
 8020c22:	f04f 0c00 	mov.w	ip, #0
 8020c26:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8020c2a:	e9cd 0900 	strd	r0, r9, [sp]
 8020c2e:	6022      	str	r2, [r4, #0]
 8020c30:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8020c34:	4628      	mov	r0, r5
 8020c36:	f7ff fd52 	bl	80206de <__cvt>
 8020c3a:	4680      	mov	r8, r0
 8020c3c:	e64a      	b.n	80208d4 <_printf_float+0xec>
 8020c3e:	bf00      	nop

08020c40 <_printf_common>:
 8020c40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020c44:	4691      	mov	r9, r2
 8020c46:	461f      	mov	r7, r3
 8020c48:	688a      	ldr	r2, [r1, #8]
 8020c4a:	690b      	ldr	r3, [r1, #16]
 8020c4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8020c50:	4293      	cmp	r3, r2
 8020c52:	bfb8      	it	lt
 8020c54:	4613      	movlt	r3, r2
 8020c56:	f8c9 3000 	str.w	r3, [r9]
 8020c5a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8020c5e:	4606      	mov	r6, r0
 8020c60:	460c      	mov	r4, r1
 8020c62:	b112      	cbz	r2, 8020c6a <_printf_common+0x2a>
 8020c64:	3301      	adds	r3, #1
 8020c66:	f8c9 3000 	str.w	r3, [r9]
 8020c6a:	6823      	ldr	r3, [r4, #0]
 8020c6c:	0699      	lsls	r1, r3, #26
 8020c6e:	bf42      	ittt	mi
 8020c70:	f8d9 3000 	ldrmi.w	r3, [r9]
 8020c74:	3302      	addmi	r3, #2
 8020c76:	f8c9 3000 	strmi.w	r3, [r9]
 8020c7a:	6825      	ldr	r5, [r4, #0]
 8020c7c:	f015 0506 	ands.w	r5, r5, #6
 8020c80:	d107      	bne.n	8020c92 <_printf_common+0x52>
 8020c82:	f104 0a19 	add.w	sl, r4, #25
 8020c86:	68e3      	ldr	r3, [r4, #12]
 8020c88:	f8d9 2000 	ldr.w	r2, [r9]
 8020c8c:	1a9b      	subs	r3, r3, r2
 8020c8e:	42ab      	cmp	r3, r5
 8020c90:	dc28      	bgt.n	8020ce4 <_printf_common+0xa4>
 8020c92:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8020c96:	6822      	ldr	r2, [r4, #0]
 8020c98:	3300      	adds	r3, #0
 8020c9a:	bf18      	it	ne
 8020c9c:	2301      	movne	r3, #1
 8020c9e:	0692      	lsls	r2, r2, #26
 8020ca0:	d42d      	bmi.n	8020cfe <_printf_common+0xbe>
 8020ca2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8020ca6:	4639      	mov	r1, r7
 8020ca8:	4630      	mov	r0, r6
 8020caa:	47c0      	blx	r8
 8020cac:	3001      	adds	r0, #1
 8020cae:	d020      	beq.n	8020cf2 <_printf_common+0xb2>
 8020cb0:	6823      	ldr	r3, [r4, #0]
 8020cb2:	68e5      	ldr	r5, [r4, #12]
 8020cb4:	f8d9 2000 	ldr.w	r2, [r9]
 8020cb8:	f003 0306 	and.w	r3, r3, #6
 8020cbc:	2b04      	cmp	r3, #4
 8020cbe:	bf08      	it	eq
 8020cc0:	1aad      	subeq	r5, r5, r2
 8020cc2:	68a3      	ldr	r3, [r4, #8]
 8020cc4:	6922      	ldr	r2, [r4, #16]
 8020cc6:	bf0c      	ite	eq
 8020cc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8020ccc:	2500      	movne	r5, #0
 8020cce:	4293      	cmp	r3, r2
 8020cd0:	bfc4      	itt	gt
 8020cd2:	1a9b      	subgt	r3, r3, r2
 8020cd4:	18ed      	addgt	r5, r5, r3
 8020cd6:	f04f 0900 	mov.w	r9, #0
 8020cda:	341a      	adds	r4, #26
 8020cdc:	454d      	cmp	r5, r9
 8020cde:	d11a      	bne.n	8020d16 <_printf_common+0xd6>
 8020ce0:	2000      	movs	r0, #0
 8020ce2:	e008      	b.n	8020cf6 <_printf_common+0xb6>
 8020ce4:	2301      	movs	r3, #1
 8020ce6:	4652      	mov	r2, sl
 8020ce8:	4639      	mov	r1, r7
 8020cea:	4630      	mov	r0, r6
 8020cec:	47c0      	blx	r8
 8020cee:	3001      	adds	r0, #1
 8020cf0:	d103      	bne.n	8020cfa <_printf_common+0xba>
 8020cf2:	f04f 30ff 	mov.w	r0, #4294967295
 8020cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020cfa:	3501      	adds	r5, #1
 8020cfc:	e7c3      	b.n	8020c86 <_printf_common+0x46>
 8020cfe:	18e1      	adds	r1, r4, r3
 8020d00:	1c5a      	adds	r2, r3, #1
 8020d02:	2030      	movs	r0, #48	; 0x30
 8020d04:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8020d08:	4422      	add	r2, r4
 8020d0a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8020d0e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8020d12:	3302      	adds	r3, #2
 8020d14:	e7c5      	b.n	8020ca2 <_printf_common+0x62>
 8020d16:	2301      	movs	r3, #1
 8020d18:	4622      	mov	r2, r4
 8020d1a:	4639      	mov	r1, r7
 8020d1c:	4630      	mov	r0, r6
 8020d1e:	47c0      	blx	r8
 8020d20:	3001      	adds	r0, #1
 8020d22:	d0e6      	beq.n	8020cf2 <_printf_common+0xb2>
 8020d24:	f109 0901 	add.w	r9, r9, #1
 8020d28:	e7d8      	b.n	8020cdc <_printf_common+0x9c>
	...

08020d2c <_printf_i>:
 8020d2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8020d30:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8020d34:	460c      	mov	r4, r1
 8020d36:	7e09      	ldrb	r1, [r1, #24]
 8020d38:	b085      	sub	sp, #20
 8020d3a:	296e      	cmp	r1, #110	; 0x6e
 8020d3c:	4617      	mov	r7, r2
 8020d3e:	4606      	mov	r6, r0
 8020d40:	4698      	mov	r8, r3
 8020d42:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020d44:	f000 80b3 	beq.w	8020eae <_printf_i+0x182>
 8020d48:	d822      	bhi.n	8020d90 <_printf_i+0x64>
 8020d4a:	2963      	cmp	r1, #99	; 0x63
 8020d4c:	d036      	beq.n	8020dbc <_printf_i+0x90>
 8020d4e:	d80a      	bhi.n	8020d66 <_printf_i+0x3a>
 8020d50:	2900      	cmp	r1, #0
 8020d52:	f000 80b9 	beq.w	8020ec8 <_printf_i+0x19c>
 8020d56:	2958      	cmp	r1, #88	; 0x58
 8020d58:	f000 8083 	beq.w	8020e62 <_printf_i+0x136>
 8020d5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8020d60:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8020d64:	e032      	b.n	8020dcc <_printf_i+0xa0>
 8020d66:	2964      	cmp	r1, #100	; 0x64
 8020d68:	d001      	beq.n	8020d6e <_printf_i+0x42>
 8020d6a:	2969      	cmp	r1, #105	; 0x69
 8020d6c:	d1f6      	bne.n	8020d5c <_printf_i+0x30>
 8020d6e:	6820      	ldr	r0, [r4, #0]
 8020d70:	6813      	ldr	r3, [r2, #0]
 8020d72:	0605      	lsls	r5, r0, #24
 8020d74:	f103 0104 	add.w	r1, r3, #4
 8020d78:	d52a      	bpl.n	8020dd0 <_printf_i+0xa4>
 8020d7a:	681b      	ldr	r3, [r3, #0]
 8020d7c:	6011      	str	r1, [r2, #0]
 8020d7e:	2b00      	cmp	r3, #0
 8020d80:	da03      	bge.n	8020d8a <_printf_i+0x5e>
 8020d82:	222d      	movs	r2, #45	; 0x2d
 8020d84:	425b      	negs	r3, r3
 8020d86:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8020d8a:	486f      	ldr	r0, [pc, #444]	; (8020f48 <_printf_i+0x21c>)
 8020d8c:	220a      	movs	r2, #10
 8020d8e:	e039      	b.n	8020e04 <_printf_i+0xd8>
 8020d90:	2973      	cmp	r1, #115	; 0x73
 8020d92:	f000 809d 	beq.w	8020ed0 <_printf_i+0x1a4>
 8020d96:	d808      	bhi.n	8020daa <_printf_i+0x7e>
 8020d98:	296f      	cmp	r1, #111	; 0x6f
 8020d9a:	d020      	beq.n	8020dde <_printf_i+0xb2>
 8020d9c:	2970      	cmp	r1, #112	; 0x70
 8020d9e:	d1dd      	bne.n	8020d5c <_printf_i+0x30>
 8020da0:	6823      	ldr	r3, [r4, #0]
 8020da2:	f043 0320 	orr.w	r3, r3, #32
 8020da6:	6023      	str	r3, [r4, #0]
 8020da8:	e003      	b.n	8020db2 <_printf_i+0x86>
 8020daa:	2975      	cmp	r1, #117	; 0x75
 8020dac:	d017      	beq.n	8020dde <_printf_i+0xb2>
 8020dae:	2978      	cmp	r1, #120	; 0x78
 8020db0:	d1d4      	bne.n	8020d5c <_printf_i+0x30>
 8020db2:	2378      	movs	r3, #120	; 0x78
 8020db4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8020db8:	4864      	ldr	r0, [pc, #400]	; (8020f4c <_printf_i+0x220>)
 8020dba:	e055      	b.n	8020e68 <_printf_i+0x13c>
 8020dbc:	6813      	ldr	r3, [r2, #0]
 8020dbe:	1d19      	adds	r1, r3, #4
 8020dc0:	681b      	ldr	r3, [r3, #0]
 8020dc2:	6011      	str	r1, [r2, #0]
 8020dc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8020dc8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8020dcc:	2301      	movs	r3, #1
 8020dce:	e08c      	b.n	8020eea <_printf_i+0x1be>
 8020dd0:	681b      	ldr	r3, [r3, #0]
 8020dd2:	6011      	str	r1, [r2, #0]
 8020dd4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8020dd8:	bf18      	it	ne
 8020dda:	b21b      	sxthne	r3, r3
 8020ddc:	e7cf      	b.n	8020d7e <_printf_i+0x52>
 8020dde:	6813      	ldr	r3, [r2, #0]
 8020de0:	6825      	ldr	r5, [r4, #0]
 8020de2:	1d18      	adds	r0, r3, #4
 8020de4:	6010      	str	r0, [r2, #0]
 8020de6:	0628      	lsls	r0, r5, #24
 8020de8:	d501      	bpl.n	8020dee <_printf_i+0xc2>
 8020dea:	681b      	ldr	r3, [r3, #0]
 8020dec:	e002      	b.n	8020df4 <_printf_i+0xc8>
 8020dee:	0668      	lsls	r0, r5, #25
 8020df0:	d5fb      	bpl.n	8020dea <_printf_i+0xbe>
 8020df2:	881b      	ldrh	r3, [r3, #0]
 8020df4:	4854      	ldr	r0, [pc, #336]	; (8020f48 <_printf_i+0x21c>)
 8020df6:	296f      	cmp	r1, #111	; 0x6f
 8020df8:	bf14      	ite	ne
 8020dfa:	220a      	movne	r2, #10
 8020dfc:	2208      	moveq	r2, #8
 8020dfe:	2100      	movs	r1, #0
 8020e00:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8020e04:	6865      	ldr	r5, [r4, #4]
 8020e06:	60a5      	str	r5, [r4, #8]
 8020e08:	2d00      	cmp	r5, #0
 8020e0a:	f2c0 8095 	blt.w	8020f38 <_printf_i+0x20c>
 8020e0e:	6821      	ldr	r1, [r4, #0]
 8020e10:	f021 0104 	bic.w	r1, r1, #4
 8020e14:	6021      	str	r1, [r4, #0]
 8020e16:	2b00      	cmp	r3, #0
 8020e18:	d13d      	bne.n	8020e96 <_printf_i+0x16a>
 8020e1a:	2d00      	cmp	r5, #0
 8020e1c:	f040 808e 	bne.w	8020f3c <_printf_i+0x210>
 8020e20:	4665      	mov	r5, ip
 8020e22:	2a08      	cmp	r2, #8
 8020e24:	d10b      	bne.n	8020e3e <_printf_i+0x112>
 8020e26:	6823      	ldr	r3, [r4, #0]
 8020e28:	07db      	lsls	r3, r3, #31
 8020e2a:	d508      	bpl.n	8020e3e <_printf_i+0x112>
 8020e2c:	6923      	ldr	r3, [r4, #16]
 8020e2e:	6862      	ldr	r2, [r4, #4]
 8020e30:	429a      	cmp	r2, r3
 8020e32:	bfde      	ittt	le
 8020e34:	2330      	movle	r3, #48	; 0x30
 8020e36:	f805 3c01 	strble.w	r3, [r5, #-1]
 8020e3a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8020e3e:	ebac 0305 	sub.w	r3, ip, r5
 8020e42:	6123      	str	r3, [r4, #16]
 8020e44:	f8cd 8000 	str.w	r8, [sp]
 8020e48:	463b      	mov	r3, r7
 8020e4a:	aa03      	add	r2, sp, #12
 8020e4c:	4621      	mov	r1, r4
 8020e4e:	4630      	mov	r0, r6
 8020e50:	f7ff fef6 	bl	8020c40 <_printf_common>
 8020e54:	3001      	adds	r0, #1
 8020e56:	d14d      	bne.n	8020ef4 <_printf_i+0x1c8>
 8020e58:	f04f 30ff 	mov.w	r0, #4294967295
 8020e5c:	b005      	add	sp, #20
 8020e5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020e62:	4839      	ldr	r0, [pc, #228]	; (8020f48 <_printf_i+0x21c>)
 8020e64:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8020e68:	6813      	ldr	r3, [r2, #0]
 8020e6a:	6821      	ldr	r1, [r4, #0]
 8020e6c:	1d1d      	adds	r5, r3, #4
 8020e6e:	681b      	ldr	r3, [r3, #0]
 8020e70:	6015      	str	r5, [r2, #0]
 8020e72:	060a      	lsls	r2, r1, #24
 8020e74:	d50b      	bpl.n	8020e8e <_printf_i+0x162>
 8020e76:	07ca      	lsls	r2, r1, #31
 8020e78:	bf44      	itt	mi
 8020e7a:	f041 0120 	orrmi.w	r1, r1, #32
 8020e7e:	6021      	strmi	r1, [r4, #0]
 8020e80:	b91b      	cbnz	r3, 8020e8a <_printf_i+0x15e>
 8020e82:	6822      	ldr	r2, [r4, #0]
 8020e84:	f022 0220 	bic.w	r2, r2, #32
 8020e88:	6022      	str	r2, [r4, #0]
 8020e8a:	2210      	movs	r2, #16
 8020e8c:	e7b7      	b.n	8020dfe <_printf_i+0xd2>
 8020e8e:	064d      	lsls	r5, r1, #25
 8020e90:	bf48      	it	mi
 8020e92:	b29b      	uxthmi	r3, r3
 8020e94:	e7ef      	b.n	8020e76 <_printf_i+0x14a>
 8020e96:	4665      	mov	r5, ip
 8020e98:	fbb3 f1f2 	udiv	r1, r3, r2
 8020e9c:	fb02 3311 	mls	r3, r2, r1, r3
 8020ea0:	5cc3      	ldrb	r3, [r0, r3]
 8020ea2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8020ea6:	460b      	mov	r3, r1
 8020ea8:	2900      	cmp	r1, #0
 8020eaa:	d1f5      	bne.n	8020e98 <_printf_i+0x16c>
 8020eac:	e7b9      	b.n	8020e22 <_printf_i+0xf6>
 8020eae:	6813      	ldr	r3, [r2, #0]
 8020eb0:	6825      	ldr	r5, [r4, #0]
 8020eb2:	6961      	ldr	r1, [r4, #20]
 8020eb4:	1d18      	adds	r0, r3, #4
 8020eb6:	6010      	str	r0, [r2, #0]
 8020eb8:	0628      	lsls	r0, r5, #24
 8020eba:	681b      	ldr	r3, [r3, #0]
 8020ebc:	d501      	bpl.n	8020ec2 <_printf_i+0x196>
 8020ebe:	6019      	str	r1, [r3, #0]
 8020ec0:	e002      	b.n	8020ec8 <_printf_i+0x19c>
 8020ec2:	066a      	lsls	r2, r5, #25
 8020ec4:	d5fb      	bpl.n	8020ebe <_printf_i+0x192>
 8020ec6:	8019      	strh	r1, [r3, #0]
 8020ec8:	2300      	movs	r3, #0
 8020eca:	6123      	str	r3, [r4, #16]
 8020ecc:	4665      	mov	r5, ip
 8020ece:	e7b9      	b.n	8020e44 <_printf_i+0x118>
 8020ed0:	6813      	ldr	r3, [r2, #0]
 8020ed2:	1d19      	adds	r1, r3, #4
 8020ed4:	6011      	str	r1, [r2, #0]
 8020ed6:	681d      	ldr	r5, [r3, #0]
 8020ed8:	6862      	ldr	r2, [r4, #4]
 8020eda:	2100      	movs	r1, #0
 8020edc:	4628      	mov	r0, r5
 8020ede:	f7df f9ff 	bl	80002e0 <memchr>
 8020ee2:	b108      	cbz	r0, 8020ee8 <_printf_i+0x1bc>
 8020ee4:	1b40      	subs	r0, r0, r5
 8020ee6:	6060      	str	r0, [r4, #4]
 8020ee8:	6863      	ldr	r3, [r4, #4]
 8020eea:	6123      	str	r3, [r4, #16]
 8020eec:	2300      	movs	r3, #0
 8020eee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8020ef2:	e7a7      	b.n	8020e44 <_printf_i+0x118>
 8020ef4:	6923      	ldr	r3, [r4, #16]
 8020ef6:	462a      	mov	r2, r5
 8020ef8:	4639      	mov	r1, r7
 8020efa:	4630      	mov	r0, r6
 8020efc:	47c0      	blx	r8
 8020efe:	3001      	adds	r0, #1
 8020f00:	d0aa      	beq.n	8020e58 <_printf_i+0x12c>
 8020f02:	6823      	ldr	r3, [r4, #0]
 8020f04:	079b      	lsls	r3, r3, #30
 8020f06:	d413      	bmi.n	8020f30 <_printf_i+0x204>
 8020f08:	68e0      	ldr	r0, [r4, #12]
 8020f0a:	9b03      	ldr	r3, [sp, #12]
 8020f0c:	4298      	cmp	r0, r3
 8020f0e:	bfb8      	it	lt
 8020f10:	4618      	movlt	r0, r3
 8020f12:	e7a3      	b.n	8020e5c <_printf_i+0x130>
 8020f14:	2301      	movs	r3, #1
 8020f16:	464a      	mov	r2, r9
 8020f18:	4639      	mov	r1, r7
 8020f1a:	4630      	mov	r0, r6
 8020f1c:	47c0      	blx	r8
 8020f1e:	3001      	adds	r0, #1
 8020f20:	d09a      	beq.n	8020e58 <_printf_i+0x12c>
 8020f22:	3501      	adds	r5, #1
 8020f24:	68e3      	ldr	r3, [r4, #12]
 8020f26:	9a03      	ldr	r2, [sp, #12]
 8020f28:	1a9b      	subs	r3, r3, r2
 8020f2a:	42ab      	cmp	r3, r5
 8020f2c:	dcf2      	bgt.n	8020f14 <_printf_i+0x1e8>
 8020f2e:	e7eb      	b.n	8020f08 <_printf_i+0x1dc>
 8020f30:	2500      	movs	r5, #0
 8020f32:	f104 0919 	add.w	r9, r4, #25
 8020f36:	e7f5      	b.n	8020f24 <_printf_i+0x1f8>
 8020f38:	2b00      	cmp	r3, #0
 8020f3a:	d1ac      	bne.n	8020e96 <_printf_i+0x16a>
 8020f3c:	7803      	ldrb	r3, [r0, #0]
 8020f3e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8020f42:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8020f46:	e76c      	b.n	8020e22 <_printf_i+0xf6>
 8020f48:	080275f4 	.word	0x080275f4
 8020f4c:	08027605 	.word	0x08027605

08020f50 <iprintf>:
 8020f50:	b40f      	push	{r0, r1, r2, r3}
 8020f52:	4b0a      	ldr	r3, [pc, #40]	; (8020f7c <iprintf+0x2c>)
 8020f54:	b513      	push	{r0, r1, r4, lr}
 8020f56:	681c      	ldr	r4, [r3, #0]
 8020f58:	b124      	cbz	r4, 8020f64 <iprintf+0x14>
 8020f5a:	69a3      	ldr	r3, [r4, #24]
 8020f5c:	b913      	cbnz	r3, 8020f64 <iprintf+0x14>
 8020f5e:	4620      	mov	r0, r4
 8020f60:	f001 f8c2 	bl	80220e8 <__sinit>
 8020f64:	ab05      	add	r3, sp, #20
 8020f66:	9a04      	ldr	r2, [sp, #16]
 8020f68:	68a1      	ldr	r1, [r4, #8]
 8020f6a:	9301      	str	r3, [sp, #4]
 8020f6c:	4620      	mov	r0, r4
 8020f6e:	f001 fecd 	bl	8022d0c <_vfiprintf_r>
 8020f72:	b002      	add	sp, #8
 8020f74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020f78:	b004      	add	sp, #16
 8020f7a:	4770      	bx	lr
 8020f7c:	24000040 	.word	0x24000040

08020f80 <rand>:
 8020f80:	b538      	push	{r3, r4, r5, lr}
 8020f82:	4b13      	ldr	r3, [pc, #76]	; (8020fd0 <rand+0x50>)
 8020f84:	681c      	ldr	r4, [r3, #0]
 8020f86:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8020f88:	b97b      	cbnz	r3, 8020faa <rand+0x2a>
 8020f8a:	2018      	movs	r0, #24
 8020f8c:	f001 f9a8 	bl	80222e0 <malloc>
 8020f90:	4a10      	ldr	r2, [pc, #64]	; (8020fd4 <rand+0x54>)
 8020f92:	4b11      	ldr	r3, [pc, #68]	; (8020fd8 <rand+0x58>)
 8020f94:	63a0      	str	r0, [r4, #56]	; 0x38
 8020f96:	e9c0 2300 	strd	r2, r3, [r0]
 8020f9a:	4b10      	ldr	r3, [pc, #64]	; (8020fdc <rand+0x5c>)
 8020f9c:	6083      	str	r3, [r0, #8]
 8020f9e:	230b      	movs	r3, #11
 8020fa0:	8183      	strh	r3, [r0, #12]
 8020fa2:	2201      	movs	r2, #1
 8020fa4:	2300      	movs	r3, #0
 8020fa6:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8020faa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8020fac:	480c      	ldr	r0, [pc, #48]	; (8020fe0 <rand+0x60>)
 8020fae:	690a      	ldr	r2, [r1, #16]
 8020fb0:	694b      	ldr	r3, [r1, #20]
 8020fb2:	4c0c      	ldr	r4, [pc, #48]	; (8020fe4 <rand+0x64>)
 8020fb4:	4350      	muls	r0, r2
 8020fb6:	fb04 0003 	mla	r0, r4, r3, r0
 8020fba:	fba2 2304 	umull	r2, r3, r2, r4
 8020fbe:	4403      	add	r3, r0
 8020fc0:	1c54      	adds	r4, r2, #1
 8020fc2:	f143 0500 	adc.w	r5, r3, #0
 8020fc6:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8020fca:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8020fce:	bd38      	pop	{r3, r4, r5, pc}
 8020fd0:	24000040 	.word	0x24000040
 8020fd4:	abcd330e 	.word	0xabcd330e
 8020fd8:	e66d1234 	.word	0xe66d1234
 8020fdc:	0005deec 	.word	0x0005deec
 8020fe0:	5851f42d 	.word	0x5851f42d
 8020fe4:	4c957f2d 	.word	0x4c957f2d

08020fe8 <_raise_r>:
 8020fe8:	291f      	cmp	r1, #31
 8020fea:	b538      	push	{r3, r4, r5, lr}
 8020fec:	4604      	mov	r4, r0
 8020fee:	460d      	mov	r5, r1
 8020ff0:	d904      	bls.n	8020ffc <_raise_r+0x14>
 8020ff2:	2316      	movs	r3, #22
 8020ff4:	6003      	str	r3, [r0, #0]
 8020ff6:	f04f 30ff 	mov.w	r0, #4294967295
 8020ffa:	bd38      	pop	{r3, r4, r5, pc}
 8020ffc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8020ffe:	b112      	cbz	r2, 8021006 <_raise_r+0x1e>
 8021000:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8021004:	b94b      	cbnz	r3, 802101a <_raise_r+0x32>
 8021006:	4620      	mov	r0, r4
 8021008:	f000 f830 	bl	802106c <_getpid_r>
 802100c:	462a      	mov	r2, r5
 802100e:	4601      	mov	r1, r0
 8021010:	4620      	mov	r0, r4
 8021012:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8021016:	f000 b817 	b.w	8021048 <_kill_r>
 802101a:	2b01      	cmp	r3, #1
 802101c:	d00a      	beq.n	8021034 <_raise_r+0x4c>
 802101e:	1c59      	adds	r1, r3, #1
 8021020:	d103      	bne.n	802102a <_raise_r+0x42>
 8021022:	2316      	movs	r3, #22
 8021024:	6003      	str	r3, [r0, #0]
 8021026:	2001      	movs	r0, #1
 8021028:	e7e7      	b.n	8020ffa <_raise_r+0x12>
 802102a:	2400      	movs	r4, #0
 802102c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8021030:	4628      	mov	r0, r5
 8021032:	4798      	blx	r3
 8021034:	2000      	movs	r0, #0
 8021036:	e7e0      	b.n	8020ffa <_raise_r+0x12>

08021038 <raise>:
 8021038:	4b02      	ldr	r3, [pc, #8]	; (8021044 <raise+0xc>)
 802103a:	4601      	mov	r1, r0
 802103c:	6818      	ldr	r0, [r3, #0]
 802103e:	f7ff bfd3 	b.w	8020fe8 <_raise_r>
 8021042:	bf00      	nop
 8021044:	24000040 	.word	0x24000040

08021048 <_kill_r>:
 8021048:	b538      	push	{r3, r4, r5, lr}
 802104a:	4c07      	ldr	r4, [pc, #28]	; (8021068 <_kill_r+0x20>)
 802104c:	2300      	movs	r3, #0
 802104e:	4605      	mov	r5, r0
 8021050:	4608      	mov	r0, r1
 8021052:	4611      	mov	r1, r2
 8021054:	6023      	str	r3, [r4, #0]
 8021056:	f7e0 f967 	bl	8001328 <_kill>
 802105a:	1c43      	adds	r3, r0, #1
 802105c:	d102      	bne.n	8021064 <_kill_r+0x1c>
 802105e:	6823      	ldr	r3, [r4, #0]
 8021060:	b103      	cbz	r3, 8021064 <_kill_r+0x1c>
 8021062:	602b      	str	r3, [r5, #0]
 8021064:	bd38      	pop	{r3, r4, r5, pc}
 8021066:	bf00      	nop
 8021068:	24048e74 	.word	0x24048e74

0802106c <_getpid_r>:
 802106c:	f7e0 b954 	b.w	8001318 <_getpid>

08021070 <siprintf>:
 8021070:	b40e      	push	{r1, r2, r3}
 8021072:	b500      	push	{lr}
 8021074:	b09c      	sub	sp, #112	; 0x70
 8021076:	ab1d      	add	r3, sp, #116	; 0x74
 8021078:	9002      	str	r0, [sp, #8]
 802107a:	9006      	str	r0, [sp, #24]
 802107c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8021080:	4809      	ldr	r0, [pc, #36]	; (80210a8 <siprintf+0x38>)
 8021082:	9107      	str	r1, [sp, #28]
 8021084:	9104      	str	r1, [sp, #16]
 8021086:	4909      	ldr	r1, [pc, #36]	; (80210ac <siprintf+0x3c>)
 8021088:	f853 2b04 	ldr.w	r2, [r3], #4
 802108c:	9105      	str	r1, [sp, #20]
 802108e:	6800      	ldr	r0, [r0, #0]
 8021090:	9301      	str	r3, [sp, #4]
 8021092:	a902      	add	r1, sp, #8
 8021094:	f001 fd18 	bl	8022ac8 <_svfiprintf_r>
 8021098:	9b02      	ldr	r3, [sp, #8]
 802109a:	2200      	movs	r2, #0
 802109c:	701a      	strb	r2, [r3, #0]
 802109e:	b01c      	add	sp, #112	; 0x70
 80210a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80210a4:	b003      	add	sp, #12
 80210a6:	4770      	bx	lr
 80210a8:	24000040 	.word	0x24000040
 80210ac:	ffff0208 	.word	0xffff0208

080210b0 <_vsiprintf_r>:
 80210b0:	b500      	push	{lr}
 80210b2:	b09b      	sub	sp, #108	; 0x6c
 80210b4:	9100      	str	r1, [sp, #0]
 80210b6:	9104      	str	r1, [sp, #16]
 80210b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80210bc:	9105      	str	r1, [sp, #20]
 80210be:	9102      	str	r1, [sp, #8]
 80210c0:	4905      	ldr	r1, [pc, #20]	; (80210d8 <_vsiprintf_r+0x28>)
 80210c2:	9103      	str	r1, [sp, #12]
 80210c4:	4669      	mov	r1, sp
 80210c6:	f001 fcff 	bl	8022ac8 <_svfiprintf_r>
 80210ca:	9b00      	ldr	r3, [sp, #0]
 80210cc:	2200      	movs	r2, #0
 80210ce:	701a      	strb	r2, [r3, #0]
 80210d0:	b01b      	add	sp, #108	; 0x6c
 80210d2:	f85d fb04 	ldr.w	pc, [sp], #4
 80210d6:	bf00      	nop
 80210d8:	ffff0208 	.word	0xffff0208

080210dc <vsiprintf>:
 80210dc:	4613      	mov	r3, r2
 80210de:	460a      	mov	r2, r1
 80210e0:	4601      	mov	r1, r0
 80210e2:	4802      	ldr	r0, [pc, #8]	; (80210ec <vsiprintf+0x10>)
 80210e4:	6800      	ldr	r0, [r0, #0]
 80210e6:	f7ff bfe3 	b.w	80210b0 <_vsiprintf_r>
 80210ea:	bf00      	nop
 80210ec:	24000040 	.word	0x24000040

080210f0 <__swbuf_r>:
 80210f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80210f2:	460e      	mov	r6, r1
 80210f4:	4614      	mov	r4, r2
 80210f6:	4605      	mov	r5, r0
 80210f8:	b118      	cbz	r0, 8021102 <__swbuf_r+0x12>
 80210fa:	6983      	ldr	r3, [r0, #24]
 80210fc:	b90b      	cbnz	r3, 8021102 <__swbuf_r+0x12>
 80210fe:	f000 fff3 	bl	80220e8 <__sinit>
 8021102:	4b21      	ldr	r3, [pc, #132]	; (8021188 <__swbuf_r+0x98>)
 8021104:	429c      	cmp	r4, r3
 8021106:	d12a      	bne.n	802115e <__swbuf_r+0x6e>
 8021108:	686c      	ldr	r4, [r5, #4]
 802110a:	69a3      	ldr	r3, [r4, #24]
 802110c:	60a3      	str	r3, [r4, #8]
 802110e:	89a3      	ldrh	r3, [r4, #12]
 8021110:	071a      	lsls	r2, r3, #28
 8021112:	d52e      	bpl.n	8021172 <__swbuf_r+0x82>
 8021114:	6923      	ldr	r3, [r4, #16]
 8021116:	b363      	cbz	r3, 8021172 <__swbuf_r+0x82>
 8021118:	6923      	ldr	r3, [r4, #16]
 802111a:	6820      	ldr	r0, [r4, #0]
 802111c:	1ac0      	subs	r0, r0, r3
 802111e:	6963      	ldr	r3, [r4, #20]
 8021120:	b2f6      	uxtb	r6, r6
 8021122:	4283      	cmp	r3, r0
 8021124:	4637      	mov	r7, r6
 8021126:	dc04      	bgt.n	8021132 <__swbuf_r+0x42>
 8021128:	4621      	mov	r1, r4
 802112a:	4628      	mov	r0, r5
 802112c:	f000 ff72 	bl	8022014 <_fflush_r>
 8021130:	bb28      	cbnz	r0, 802117e <__swbuf_r+0x8e>
 8021132:	68a3      	ldr	r3, [r4, #8]
 8021134:	3b01      	subs	r3, #1
 8021136:	60a3      	str	r3, [r4, #8]
 8021138:	6823      	ldr	r3, [r4, #0]
 802113a:	1c5a      	adds	r2, r3, #1
 802113c:	6022      	str	r2, [r4, #0]
 802113e:	701e      	strb	r6, [r3, #0]
 8021140:	6963      	ldr	r3, [r4, #20]
 8021142:	3001      	adds	r0, #1
 8021144:	4283      	cmp	r3, r0
 8021146:	d004      	beq.n	8021152 <__swbuf_r+0x62>
 8021148:	89a3      	ldrh	r3, [r4, #12]
 802114a:	07db      	lsls	r3, r3, #31
 802114c:	d519      	bpl.n	8021182 <__swbuf_r+0x92>
 802114e:	2e0a      	cmp	r6, #10
 8021150:	d117      	bne.n	8021182 <__swbuf_r+0x92>
 8021152:	4621      	mov	r1, r4
 8021154:	4628      	mov	r0, r5
 8021156:	f000 ff5d 	bl	8022014 <_fflush_r>
 802115a:	b190      	cbz	r0, 8021182 <__swbuf_r+0x92>
 802115c:	e00f      	b.n	802117e <__swbuf_r+0x8e>
 802115e:	4b0b      	ldr	r3, [pc, #44]	; (802118c <__swbuf_r+0x9c>)
 8021160:	429c      	cmp	r4, r3
 8021162:	d101      	bne.n	8021168 <__swbuf_r+0x78>
 8021164:	68ac      	ldr	r4, [r5, #8]
 8021166:	e7d0      	b.n	802110a <__swbuf_r+0x1a>
 8021168:	4b09      	ldr	r3, [pc, #36]	; (8021190 <__swbuf_r+0xa0>)
 802116a:	429c      	cmp	r4, r3
 802116c:	bf08      	it	eq
 802116e:	68ec      	ldreq	r4, [r5, #12]
 8021170:	e7cb      	b.n	802110a <__swbuf_r+0x1a>
 8021172:	4621      	mov	r1, r4
 8021174:	4628      	mov	r0, r5
 8021176:	f000 f81b 	bl	80211b0 <__swsetup_r>
 802117a:	2800      	cmp	r0, #0
 802117c:	d0cc      	beq.n	8021118 <__swbuf_r+0x28>
 802117e:	f04f 37ff 	mov.w	r7, #4294967295
 8021182:	4638      	mov	r0, r7
 8021184:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021186:	bf00      	nop
 8021188:	08027744 	.word	0x08027744
 802118c:	08027764 	.word	0x08027764
 8021190:	08027724 	.word	0x08027724

08021194 <__ascii_wctomb>:
 8021194:	b149      	cbz	r1, 80211aa <__ascii_wctomb+0x16>
 8021196:	2aff      	cmp	r2, #255	; 0xff
 8021198:	bf85      	ittet	hi
 802119a:	238a      	movhi	r3, #138	; 0x8a
 802119c:	6003      	strhi	r3, [r0, #0]
 802119e:	700a      	strbls	r2, [r1, #0]
 80211a0:	f04f 30ff 	movhi.w	r0, #4294967295
 80211a4:	bf98      	it	ls
 80211a6:	2001      	movls	r0, #1
 80211a8:	4770      	bx	lr
 80211aa:	4608      	mov	r0, r1
 80211ac:	4770      	bx	lr
	...

080211b0 <__swsetup_r>:
 80211b0:	4b32      	ldr	r3, [pc, #200]	; (802127c <__swsetup_r+0xcc>)
 80211b2:	b570      	push	{r4, r5, r6, lr}
 80211b4:	681d      	ldr	r5, [r3, #0]
 80211b6:	4606      	mov	r6, r0
 80211b8:	460c      	mov	r4, r1
 80211ba:	b125      	cbz	r5, 80211c6 <__swsetup_r+0x16>
 80211bc:	69ab      	ldr	r3, [r5, #24]
 80211be:	b913      	cbnz	r3, 80211c6 <__swsetup_r+0x16>
 80211c0:	4628      	mov	r0, r5
 80211c2:	f000 ff91 	bl	80220e8 <__sinit>
 80211c6:	4b2e      	ldr	r3, [pc, #184]	; (8021280 <__swsetup_r+0xd0>)
 80211c8:	429c      	cmp	r4, r3
 80211ca:	d10f      	bne.n	80211ec <__swsetup_r+0x3c>
 80211cc:	686c      	ldr	r4, [r5, #4]
 80211ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80211d2:	b29a      	uxth	r2, r3
 80211d4:	0715      	lsls	r5, r2, #28
 80211d6:	d42c      	bmi.n	8021232 <__swsetup_r+0x82>
 80211d8:	06d0      	lsls	r0, r2, #27
 80211da:	d411      	bmi.n	8021200 <__swsetup_r+0x50>
 80211dc:	2209      	movs	r2, #9
 80211de:	6032      	str	r2, [r6, #0]
 80211e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80211e4:	81a3      	strh	r3, [r4, #12]
 80211e6:	f04f 30ff 	mov.w	r0, #4294967295
 80211ea:	e03e      	b.n	802126a <__swsetup_r+0xba>
 80211ec:	4b25      	ldr	r3, [pc, #148]	; (8021284 <__swsetup_r+0xd4>)
 80211ee:	429c      	cmp	r4, r3
 80211f0:	d101      	bne.n	80211f6 <__swsetup_r+0x46>
 80211f2:	68ac      	ldr	r4, [r5, #8]
 80211f4:	e7eb      	b.n	80211ce <__swsetup_r+0x1e>
 80211f6:	4b24      	ldr	r3, [pc, #144]	; (8021288 <__swsetup_r+0xd8>)
 80211f8:	429c      	cmp	r4, r3
 80211fa:	bf08      	it	eq
 80211fc:	68ec      	ldreq	r4, [r5, #12]
 80211fe:	e7e6      	b.n	80211ce <__swsetup_r+0x1e>
 8021200:	0751      	lsls	r1, r2, #29
 8021202:	d512      	bpl.n	802122a <__swsetup_r+0x7a>
 8021204:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8021206:	b141      	cbz	r1, 802121a <__swsetup_r+0x6a>
 8021208:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802120c:	4299      	cmp	r1, r3
 802120e:	d002      	beq.n	8021216 <__swsetup_r+0x66>
 8021210:	4630      	mov	r0, r6
 8021212:	f001 fb57 	bl	80228c4 <_free_r>
 8021216:	2300      	movs	r3, #0
 8021218:	6363      	str	r3, [r4, #52]	; 0x34
 802121a:	89a3      	ldrh	r3, [r4, #12]
 802121c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8021220:	81a3      	strh	r3, [r4, #12]
 8021222:	2300      	movs	r3, #0
 8021224:	6063      	str	r3, [r4, #4]
 8021226:	6923      	ldr	r3, [r4, #16]
 8021228:	6023      	str	r3, [r4, #0]
 802122a:	89a3      	ldrh	r3, [r4, #12]
 802122c:	f043 0308 	orr.w	r3, r3, #8
 8021230:	81a3      	strh	r3, [r4, #12]
 8021232:	6923      	ldr	r3, [r4, #16]
 8021234:	b94b      	cbnz	r3, 802124a <__swsetup_r+0x9a>
 8021236:	89a3      	ldrh	r3, [r4, #12]
 8021238:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802123c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8021240:	d003      	beq.n	802124a <__swsetup_r+0x9a>
 8021242:	4621      	mov	r1, r4
 8021244:	4630      	mov	r0, r6
 8021246:	f001 f80b 	bl	8022260 <__smakebuf_r>
 802124a:	89a2      	ldrh	r2, [r4, #12]
 802124c:	f012 0301 	ands.w	r3, r2, #1
 8021250:	d00c      	beq.n	802126c <__swsetup_r+0xbc>
 8021252:	2300      	movs	r3, #0
 8021254:	60a3      	str	r3, [r4, #8]
 8021256:	6963      	ldr	r3, [r4, #20]
 8021258:	425b      	negs	r3, r3
 802125a:	61a3      	str	r3, [r4, #24]
 802125c:	6923      	ldr	r3, [r4, #16]
 802125e:	b953      	cbnz	r3, 8021276 <__swsetup_r+0xc6>
 8021260:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021264:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8021268:	d1ba      	bne.n	80211e0 <__swsetup_r+0x30>
 802126a:	bd70      	pop	{r4, r5, r6, pc}
 802126c:	0792      	lsls	r2, r2, #30
 802126e:	bf58      	it	pl
 8021270:	6963      	ldrpl	r3, [r4, #20]
 8021272:	60a3      	str	r3, [r4, #8]
 8021274:	e7f2      	b.n	802125c <__swsetup_r+0xac>
 8021276:	2000      	movs	r0, #0
 8021278:	e7f7      	b.n	802126a <__swsetup_r+0xba>
 802127a:	bf00      	nop
 802127c:	24000040 	.word	0x24000040
 8021280:	08027744 	.word	0x08027744
 8021284:	08027764 	.word	0x08027764
 8021288:	08027724 	.word	0x08027724

0802128c <__register_exitproc>:
 802128c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021290:	4d2c      	ldr	r5, [pc, #176]	; (8021344 <__register_exitproc+0xb8>)
 8021292:	682c      	ldr	r4, [r5, #0]
 8021294:	4607      	mov	r7, r0
 8021296:	460e      	mov	r6, r1
 8021298:	4691      	mov	r9, r2
 802129a:	4698      	mov	r8, r3
 802129c:	b934      	cbnz	r4, 80212ac <__register_exitproc+0x20>
 802129e:	4b2a      	ldr	r3, [pc, #168]	; (8021348 <__register_exitproc+0xbc>)
 80212a0:	4c2a      	ldr	r4, [pc, #168]	; (802134c <__register_exitproc+0xc0>)
 80212a2:	602c      	str	r4, [r5, #0]
 80212a4:	b113      	cbz	r3, 80212ac <__register_exitproc+0x20>
 80212a6:	681b      	ldr	r3, [r3, #0]
 80212a8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80212ac:	6863      	ldr	r3, [r4, #4]
 80212ae:	2b1f      	cmp	r3, #31
 80212b0:	dd3d      	ble.n	802132e <__register_exitproc+0xa2>
 80212b2:	4b27      	ldr	r3, [pc, #156]	; (8021350 <__register_exitproc+0xc4>)
 80212b4:	b91b      	cbnz	r3, 80212be <__register_exitproc+0x32>
 80212b6:	f04f 30ff 	mov.w	r0, #4294967295
 80212ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80212be:	208c      	movs	r0, #140	; 0x8c
 80212c0:	f001 f80e 	bl	80222e0 <malloc>
 80212c4:	4604      	mov	r4, r0
 80212c6:	2800      	cmp	r0, #0
 80212c8:	d0f5      	beq.n	80212b6 <__register_exitproc+0x2a>
 80212ca:	2300      	movs	r3, #0
 80212cc:	682a      	ldr	r2, [r5, #0]
 80212ce:	6002      	str	r2, [r0, #0]
 80212d0:	6043      	str	r3, [r0, #4]
 80212d2:	6028      	str	r0, [r5, #0]
 80212d4:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 80212d8:	b30f      	cbz	r7, 802131e <__register_exitproc+0x92>
 80212da:	f44f 7084 	mov.w	r0, #264	; 0x108
 80212de:	f000 ffff 	bl	80222e0 <malloc>
 80212e2:	2800      	cmp	r0, #0
 80212e4:	d0e7      	beq.n	80212b6 <__register_exitproc+0x2a>
 80212e6:	2300      	movs	r3, #0
 80212e8:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80212ec:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 80212f0:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80212f4:	6862      	ldr	r2, [r4, #4]
 80212f6:	f840 9022 	str.w	r9, [r0, r2, lsl #2]
 80212fa:	2301      	movs	r3, #1
 80212fc:	4093      	lsls	r3, r2
 80212fe:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8021302:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
 8021306:	431a      	orrs	r2, r3
 8021308:	2f02      	cmp	r7, #2
 802130a:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
 802130e:	f8c1 8080 	str.w	r8, [r1, #128]	; 0x80
 8021312:	bf02      	ittt	eq
 8021314:	f8d0 2104 	ldreq.w	r2, [r0, #260]	; 0x104
 8021318:	4313      	orreq	r3, r2
 802131a:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 802131e:	6863      	ldr	r3, [r4, #4]
 8021320:	1c5a      	adds	r2, r3, #1
 8021322:	3302      	adds	r3, #2
 8021324:	6062      	str	r2, [r4, #4]
 8021326:	2000      	movs	r0, #0
 8021328:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 802132c:	e7c5      	b.n	80212ba <__register_exitproc+0x2e>
 802132e:	2f00      	cmp	r7, #0
 8021330:	d0f5      	beq.n	802131e <__register_exitproc+0x92>
 8021332:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8021336:	2800      	cmp	r0, #0
 8021338:	d1dc      	bne.n	80212f4 <__register_exitproc+0x68>
 802133a:	4b05      	ldr	r3, [pc, #20]	; (8021350 <__register_exitproc+0xc4>)
 802133c:	2b00      	cmp	r3, #0
 802133e:	d0ba      	beq.n	80212b6 <__register_exitproc+0x2a>
 8021340:	e7cb      	b.n	80212da <__register_exitproc+0x4e>
 8021342:	bf00      	nop
 8021344:	2404545c 	.word	0x2404545c
 8021348:	00000000 	.word	0x00000000
 802134c:	240453d0 	.word	0x240453d0
 8021350:	080222e1 	.word	0x080222e1

08021354 <quorem>:
 8021354:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021358:	6903      	ldr	r3, [r0, #16]
 802135a:	690c      	ldr	r4, [r1, #16]
 802135c:	42a3      	cmp	r3, r4
 802135e:	4680      	mov	r8, r0
 8021360:	f2c0 8082 	blt.w	8021468 <quorem+0x114>
 8021364:	3c01      	subs	r4, #1
 8021366:	f101 0714 	add.w	r7, r1, #20
 802136a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 802136e:	f100 0614 	add.w	r6, r0, #20
 8021372:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8021376:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 802137a:	eb06 030c 	add.w	r3, r6, ip
 802137e:	3501      	adds	r5, #1
 8021380:	eb07 090c 	add.w	r9, r7, ip
 8021384:	9301      	str	r3, [sp, #4]
 8021386:	fbb0 f5f5 	udiv	r5, r0, r5
 802138a:	b395      	cbz	r5, 80213f2 <quorem+0x9e>
 802138c:	f04f 0a00 	mov.w	sl, #0
 8021390:	4638      	mov	r0, r7
 8021392:	46b6      	mov	lr, r6
 8021394:	46d3      	mov	fp, sl
 8021396:	f850 2b04 	ldr.w	r2, [r0], #4
 802139a:	b293      	uxth	r3, r2
 802139c:	fb05 a303 	mla	r3, r5, r3, sl
 80213a0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80213a4:	b29b      	uxth	r3, r3
 80213a6:	ebab 0303 	sub.w	r3, fp, r3
 80213aa:	0c12      	lsrs	r2, r2, #16
 80213ac:	f8de b000 	ldr.w	fp, [lr]
 80213b0:	fb05 a202 	mla	r2, r5, r2, sl
 80213b4:	fa13 f38b 	uxtah	r3, r3, fp
 80213b8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80213bc:	fa1f fb82 	uxth.w	fp, r2
 80213c0:	f8de 2000 	ldr.w	r2, [lr]
 80213c4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80213c8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80213cc:	b29b      	uxth	r3, r3
 80213ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80213d2:	4581      	cmp	r9, r0
 80213d4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80213d8:	f84e 3b04 	str.w	r3, [lr], #4
 80213dc:	d2db      	bcs.n	8021396 <quorem+0x42>
 80213de:	f856 300c 	ldr.w	r3, [r6, ip]
 80213e2:	b933      	cbnz	r3, 80213f2 <quorem+0x9e>
 80213e4:	9b01      	ldr	r3, [sp, #4]
 80213e6:	3b04      	subs	r3, #4
 80213e8:	429e      	cmp	r6, r3
 80213ea:	461a      	mov	r2, r3
 80213ec:	d330      	bcc.n	8021450 <quorem+0xfc>
 80213ee:	f8c8 4010 	str.w	r4, [r8, #16]
 80213f2:	4640      	mov	r0, r8
 80213f4:	f001 f992 	bl	802271c <__mcmp>
 80213f8:	2800      	cmp	r0, #0
 80213fa:	db25      	blt.n	8021448 <quorem+0xf4>
 80213fc:	3501      	adds	r5, #1
 80213fe:	4630      	mov	r0, r6
 8021400:	f04f 0c00 	mov.w	ip, #0
 8021404:	f857 2b04 	ldr.w	r2, [r7], #4
 8021408:	f8d0 e000 	ldr.w	lr, [r0]
 802140c:	b293      	uxth	r3, r2
 802140e:	ebac 0303 	sub.w	r3, ip, r3
 8021412:	0c12      	lsrs	r2, r2, #16
 8021414:	fa13 f38e 	uxtah	r3, r3, lr
 8021418:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 802141c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8021420:	b29b      	uxth	r3, r3
 8021422:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8021426:	45b9      	cmp	r9, r7
 8021428:	ea4f 4c22 	mov.w	ip, r2, asr #16
 802142c:	f840 3b04 	str.w	r3, [r0], #4
 8021430:	d2e8      	bcs.n	8021404 <quorem+0xb0>
 8021432:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8021436:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 802143a:	b92a      	cbnz	r2, 8021448 <quorem+0xf4>
 802143c:	3b04      	subs	r3, #4
 802143e:	429e      	cmp	r6, r3
 8021440:	461a      	mov	r2, r3
 8021442:	d30b      	bcc.n	802145c <quorem+0x108>
 8021444:	f8c8 4010 	str.w	r4, [r8, #16]
 8021448:	4628      	mov	r0, r5
 802144a:	b003      	add	sp, #12
 802144c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021450:	6812      	ldr	r2, [r2, #0]
 8021452:	3b04      	subs	r3, #4
 8021454:	2a00      	cmp	r2, #0
 8021456:	d1ca      	bne.n	80213ee <quorem+0x9a>
 8021458:	3c01      	subs	r4, #1
 802145a:	e7c5      	b.n	80213e8 <quorem+0x94>
 802145c:	6812      	ldr	r2, [r2, #0]
 802145e:	3b04      	subs	r3, #4
 8021460:	2a00      	cmp	r2, #0
 8021462:	d1ef      	bne.n	8021444 <quorem+0xf0>
 8021464:	3c01      	subs	r4, #1
 8021466:	e7ea      	b.n	802143e <quorem+0xea>
 8021468:	2000      	movs	r0, #0
 802146a:	e7ee      	b.n	802144a <quorem+0xf6>
 802146c:	0000      	movs	r0, r0
	...

08021470 <_dtoa_r>:
 8021470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021474:	ec57 6b10 	vmov	r6, r7, d0
 8021478:	b095      	sub	sp, #84	; 0x54
 802147a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 802147c:	9108      	str	r1, [sp, #32]
 802147e:	4604      	mov	r4, r0
 8021480:	920a      	str	r2, [sp, #40]	; 0x28
 8021482:	9311      	str	r3, [sp, #68]	; 0x44
 8021484:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8021488:	e9cd 6702 	strd	r6, r7, [sp, #8]
 802148c:	b93d      	cbnz	r5, 802149e <_dtoa_r+0x2e>
 802148e:	2010      	movs	r0, #16
 8021490:	f000 ff26 	bl	80222e0 <malloc>
 8021494:	6260      	str	r0, [r4, #36]	; 0x24
 8021496:	e9c0 5501 	strd	r5, r5, [r0, #4]
 802149a:	6005      	str	r5, [r0, #0]
 802149c:	60c5      	str	r5, [r0, #12]
 802149e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80214a0:	6819      	ldr	r1, [r3, #0]
 80214a2:	b151      	cbz	r1, 80214ba <_dtoa_r+0x4a>
 80214a4:	685a      	ldr	r2, [r3, #4]
 80214a6:	604a      	str	r2, [r1, #4]
 80214a8:	2301      	movs	r3, #1
 80214aa:	4093      	lsls	r3, r2
 80214ac:	608b      	str	r3, [r1, #8]
 80214ae:	4620      	mov	r0, r4
 80214b0:	f000 ff52 	bl	8022358 <_Bfree>
 80214b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80214b6:	2200      	movs	r2, #0
 80214b8:	601a      	str	r2, [r3, #0]
 80214ba:	1e3b      	subs	r3, r7, #0
 80214bc:	bfb9      	ittee	lt
 80214be:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80214c2:	9303      	strlt	r3, [sp, #12]
 80214c4:	2300      	movge	r3, #0
 80214c6:	f8c8 3000 	strge.w	r3, [r8]
 80214ca:	9d03      	ldr	r5, [sp, #12]
 80214cc:	4bac      	ldr	r3, [pc, #688]	; (8021780 <_dtoa_r+0x310>)
 80214ce:	bfbc      	itt	lt
 80214d0:	2201      	movlt	r2, #1
 80214d2:	f8c8 2000 	strlt.w	r2, [r8]
 80214d6:	43ab      	bics	r3, r5
 80214d8:	d11b      	bne.n	8021512 <_dtoa_r+0xa2>
 80214da:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80214dc:	f242 730f 	movw	r3, #9999	; 0x270f
 80214e0:	6013      	str	r3, [r2, #0]
 80214e2:	9b02      	ldr	r3, [sp, #8]
 80214e4:	b923      	cbnz	r3, 80214f0 <_dtoa_r+0x80>
 80214e6:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80214ea:	2d00      	cmp	r5, #0
 80214ec:	f000 84dd 	beq.w	8021eaa <_dtoa_r+0xa3a>
 80214f0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80214f2:	b953      	cbnz	r3, 802150a <_dtoa_r+0x9a>
 80214f4:	4ba3      	ldr	r3, [pc, #652]	; (8021784 <_dtoa_r+0x314>)
 80214f6:	e020      	b.n	802153a <_dtoa_r+0xca>
 80214f8:	4ba3      	ldr	r3, [pc, #652]	; (8021788 <_dtoa_r+0x318>)
 80214fa:	9304      	str	r3, [sp, #16]
 80214fc:	3308      	adds	r3, #8
 80214fe:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8021500:	6013      	str	r3, [r2, #0]
 8021502:	9804      	ldr	r0, [sp, #16]
 8021504:	b015      	add	sp, #84	; 0x54
 8021506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802150a:	4b9e      	ldr	r3, [pc, #632]	; (8021784 <_dtoa_r+0x314>)
 802150c:	9304      	str	r3, [sp, #16]
 802150e:	3303      	adds	r3, #3
 8021510:	e7f5      	b.n	80214fe <_dtoa_r+0x8e>
 8021512:	ed9d 7b02 	vldr	d7, [sp, #8]
 8021516:	eeb5 7b40 	vcmp.f64	d7, #0.0
 802151a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802151e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8021522:	d10c      	bne.n	802153e <_dtoa_r+0xce>
 8021524:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8021526:	2301      	movs	r3, #1
 8021528:	6013      	str	r3, [r2, #0]
 802152a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802152c:	2b00      	cmp	r3, #0
 802152e:	f000 84b9 	beq.w	8021ea4 <_dtoa_r+0xa34>
 8021532:	4b96      	ldr	r3, [pc, #600]	; (802178c <_dtoa_r+0x31c>)
 8021534:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8021536:	6013      	str	r3, [r2, #0]
 8021538:	3b01      	subs	r3, #1
 802153a:	9304      	str	r3, [sp, #16]
 802153c:	e7e1      	b.n	8021502 <_dtoa_r+0x92>
 802153e:	a913      	add	r1, sp, #76	; 0x4c
 8021540:	aa12      	add	r2, sp, #72	; 0x48
 8021542:	ed9d 0b04 	vldr	d0, [sp, #16]
 8021546:	4620      	mov	r0, r4
 8021548:	f001 f95f 	bl	802280a <__d2b>
 802154c:	f3c5 560a 	ubfx	r6, r5, #20, #11
 8021550:	9001      	str	r0, [sp, #4]
 8021552:	9912      	ldr	r1, [sp, #72]	; 0x48
 8021554:	2e00      	cmp	r6, #0
 8021556:	d046      	beq.n	80215e6 <_dtoa_r+0x176>
 8021558:	9805      	ldr	r0, [sp, #20]
 802155a:	f3c0 0013 	ubfx	r0, r0, #0, #20
 802155e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8021562:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 8021566:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 802156a:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 802156e:	2700      	movs	r7, #0
 8021570:	ee07 aa90 	vmov	s15, sl
 8021574:	ec43 2b16 	vmov	d6, r2, r3
 8021578:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 802157c:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 8021768 <_dtoa_r+0x2f8>
 8021580:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8021584:	ee36 7b47 	vsub.f64	d7, d6, d7
 8021588:	ed9f 6b79 	vldr	d6, [pc, #484]	; 8021770 <_dtoa_r+0x300>
 802158c:	eea7 6b04 	vfma.f64	d6, d7, d4
 8021590:	eeb0 7b46 	vmov.f64	d7, d6
 8021594:	ed9f 6b78 	vldr	d6, [pc, #480]	; 8021778 <_dtoa_r+0x308>
 8021598:	eea5 7b06 	vfma.f64	d7, d5, d6
 802159c:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80215a0:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80215a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80215a8:	ee16 ba90 	vmov	fp, s13
 80215ac:	d508      	bpl.n	80215c0 <_dtoa_r+0x150>
 80215ae:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80215b2:	eeb4 6b47 	vcmp.f64	d6, d7
 80215b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80215ba:	bf18      	it	ne
 80215bc:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80215c0:	f1bb 0f16 	cmp.w	fp, #22
 80215c4:	d834      	bhi.n	8021630 <_dtoa_r+0x1c0>
 80215c6:	4b72      	ldr	r3, [pc, #456]	; (8021790 <_dtoa_r+0x320>)
 80215c8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80215cc:	ed93 7b00 	vldr	d7, [r3]
 80215d0:	ed9d 6b02 	vldr	d6, [sp, #8]
 80215d4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80215d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80215dc:	dd01      	ble.n	80215e2 <_dtoa_r+0x172>
 80215de:	f10b 3bff 	add.w	fp, fp, #4294967295
 80215e2:	2300      	movs	r3, #0
 80215e4:	e025      	b.n	8021632 <_dtoa_r+0x1c2>
 80215e6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80215e8:	eb01 0a03 	add.w	sl, r1, r3
 80215ec:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 80215f0:	2b20      	cmp	r3, #32
 80215f2:	dd17      	ble.n	8021624 <_dtoa_r+0x1b4>
 80215f4:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80215f8:	9a02      	ldr	r2, [sp, #8]
 80215fa:	409d      	lsls	r5, r3
 80215fc:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 8021600:	fa22 f303 	lsr.w	r3, r2, r3
 8021604:	432b      	orrs	r3, r5
 8021606:	ee07 3a90 	vmov	s15, r3
 802160a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 802160e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8021612:	ed8d 7b04 	vstr	d7, [sp, #16]
 8021616:	9805      	ldr	r0, [sp, #20]
 8021618:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 802161c:	2701      	movs	r7, #1
 802161e:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 8021622:	e7a5      	b.n	8021570 <_dtoa_r+0x100>
 8021624:	9a02      	ldr	r2, [sp, #8]
 8021626:	f1c3 0320 	rsb	r3, r3, #32
 802162a:	fa02 f303 	lsl.w	r3, r2, r3
 802162e:	e7ea      	b.n	8021606 <_dtoa_r+0x196>
 8021630:	2301      	movs	r3, #1
 8021632:	eba1 0a0a 	sub.w	sl, r1, sl
 8021636:	9310      	str	r3, [sp, #64]	; 0x40
 8021638:	f1ba 0301 	subs.w	r3, sl, #1
 802163c:	9307      	str	r3, [sp, #28]
 802163e:	bf43      	ittte	mi
 8021640:	2300      	movmi	r3, #0
 8021642:	f1ca 0a01 	rsbmi	sl, sl, #1
 8021646:	9307      	strmi	r3, [sp, #28]
 8021648:	f04f 0a00 	movpl.w	sl, #0
 802164c:	f1bb 0f00 	cmp.w	fp, #0
 8021650:	db19      	blt.n	8021686 <_dtoa_r+0x216>
 8021652:	9b07      	ldr	r3, [sp, #28]
 8021654:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8021658:	445b      	add	r3, fp
 802165a:	9307      	str	r3, [sp, #28]
 802165c:	f04f 0800 	mov.w	r8, #0
 8021660:	9b08      	ldr	r3, [sp, #32]
 8021662:	2b09      	cmp	r3, #9
 8021664:	d866      	bhi.n	8021734 <_dtoa_r+0x2c4>
 8021666:	2b05      	cmp	r3, #5
 8021668:	bfc4      	itt	gt
 802166a:	3b04      	subgt	r3, #4
 802166c:	9308      	strgt	r3, [sp, #32]
 802166e:	9b08      	ldr	r3, [sp, #32]
 8021670:	f1a3 0302 	sub.w	r3, r3, #2
 8021674:	bfcc      	ite	gt
 8021676:	2500      	movgt	r5, #0
 8021678:	2501      	movle	r5, #1
 802167a:	2b03      	cmp	r3, #3
 802167c:	d866      	bhi.n	802174c <_dtoa_r+0x2dc>
 802167e:	e8df f003 	tbb	[pc, r3]
 8021682:	5755      	.short	0x5755
 8021684:	4909      	.short	0x4909
 8021686:	2300      	movs	r3, #0
 8021688:	ebaa 0a0b 	sub.w	sl, sl, fp
 802168c:	f1cb 0800 	rsb	r8, fp, #0
 8021690:	930b      	str	r3, [sp, #44]	; 0x2c
 8021692:	e7e5      	b.n	8021660 <_dtoa_r+0x1f0>
 8021694:	2301      	movs	r3, #1
 8021696:	9309      	str	r3, [sp, #36]	; 0x24
 8021698:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802169a:	2b00      	cmp	r3, #0
 802169c:	dd59      	ble.n	8021752 <_dtoa_r+0x2e2>
 802169e:	9306      	str	r3, [sp, #24]
 80216a0:	4699      	mov	r9, r3
 80216a2:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80216a4:	2200      	movs	r2, #0
 80216a6:	6072      	str	r2, [r6, #4]
 80216a8:	2204      	movs	r2, #4
 80216aa:	f102 0014 	add.w	r0, r2, #20
 80216ae:	4298      	cmp	r0, r3
 80216b0:	6871      	ldr	r1, [r6, #4]
 80216b2:	d953      	bls.n	802175c <_dtoa_r+0x2ec>
 80216b4:	4620      	mov	r0, r4
 80216b6:	f000 fe1b 	bl	80222f0 <_Balloc>
 80216ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80216bc:	6030      	str	r0, [r6, #0]
 80216be:	681b      	ldr	r3, [r3, #0]
 80216c0:	9304      	str	r3, [sp, #16]
 80216c2:	f1b9 0f0e 	cmp.w	r9, #14
 80216c6:	f200 80c2 	bhi.w	802184e <_dtoa_r+0x3de>
 80216ca:	2d00      	cmp	r5, #0
 80216cc:	f000 80bf 	beq.w	802184e <_dtoa_r+0x3de>
 80216d0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80216d4:	f1bb 0f00 	cmp.w	fp, #0
 80216d8:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 80216dc:	f340 80e6 	ble.w	80218ac <_dtoa_r+0x43c>
 80216e0:	4a2b      	ldr	r2, [pc, #172]	; (8021790 <_dtoa_r+0x320>)
 80216e2:	f00b 030f 	and.w	r3, fp, #15
 80216e6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80216ea:	ed93 7b00 	vldr	d7, [r3]
 80216ee:	ea4f 132b 	mov.w	r3, fp, asr #4
 80216f2:	06da      	lsls	r2, r3, #27
 80216f4:	f140 80d8 	bpl.w	80218a8 <_dtoa_r+0x438>
 80216f8:	4a26      	ldr	r2, [pc, #152]	; (8021794 <_dtoa_r+0x324>)
 80216fa:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 80216fe:	ed92 6b08 	vldr	d6, [r2, #32]
 8021702:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8021706:	ed8d 6b02 	vstr	d6, [sp, #8]
 802170a:	f003 030f 	and.w	r3, r3, #15
 802170e:	2203      	movs	r2, #3
 8021710:	4920      	ldr	r1, [pc, #128]	; (8021794 <_dtoa_r+0x324>)
 8021712:	e04a      	b.n	80217aa <_dtoa_r+0x33a>
 8021714:	2301      	movs	r3, #1
 8021716:	9309      	str	r3, [sp, #36]	; 0x24
 8021718:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802171a:	445b      	add	r3, fp
 802171c:	f103 0901 	add.w	r9, r3, #1
 8021720:	9306      	str	r3, [sp, #24]
 8021722:	464b      	mov	r3, r9
 8021724:	2b01      	cmp	r3, #1
 8021726:	bfb8      	it	lt
 8021728:	2301      	movlt	r3, #1
 802172a:	e7ba      	b.n	80216a2 <_dtoa_r+0x232>
 802172c:	2300      	movs	r3, #0
 802172e:	e7b2      	b.n	8021696 <_dtoa_r+0x226>
 8021730:	2300      	movs	r3, #0
 8021732:	e7f0      	b.n	8021716 <_dtoa_r+0x2a6>
 8021734:	2501      	movs	r5, #1
 8021736:	2300      	movs	r3, #0
 8021738:	e9cd 3508 	strd	r3, r5, [sp, #32]
 802173c:	f04f 33ff 	mov.w	r3, #4294967295
 8021740:	9306      	str	r3, [sp, #24]
 8021742:	4699      	mov	r9, r3
 8021744:	2200      	movs	r2, #0
 8021746:	2312      	movs	r3, #18
 8021748:	920a      	str	r2, [sp, #40]	; 0x28
 802174a:	e7aa      	b.n	80216a2 <_dtoa_r+0x232>
 802174c:	2301      	movs	r3, #1
 802174e:	9309      	str	r3, [sp, #36]	; 0x24
 8021750:	e7f4      	b.n	802173c <_dtoa_r+0x2cc>
 8021752:	2301      	movs	r3, #1
 8021754:	9306      	str	r3, [sp, #24]
 8021756:	4699      	mov	r9, r3
 8021758:	461a      	mov	r2, r3
 802175a:	e7f5      	b.n	8021748 <_dtoa_r+0x2d8>
 802175c:	3101      	adds	r1, #1
 802175e:	6071      	str	r1, [r6, #4]
 8021760:	0052      	lsls	r2, r2, #1
 8021762:	e7a2      	b.n	80216aa <_dtoa_r+0x23a>
 8021764:	f3af 8000 	nop.w
 8021768:	636f4361 	.word	0x636f4361
 802176c:	3fd287a7 	.word	0x3fd287a7
 8021770:	8b60c8b3 	.word	0x8b60c8b3
 8021774:	3fc68a28 	.word	0x3fc68a28
 8021778:	509f79fb 	.word	0x509f79fb
 802177c:	3fd34413 	.word	0x3fd34413
 8021780:	7ff00000 	.word	0x7ff00000
 8021784:	08027720 	.word	0x08027720
 8021788:	08027717 	.word	0x08027717
 802178c:	080275f3 	.word	0x080275f3
 8021790:	080277b0 	.word	0x080277b0
 8021794:	08027788 	.word	0x08027788
 8021798:	07de      	lsls	r6, r3, #31
 802179a:	d504      	bpl.n	80217a6 <_dtoa_r+0x336>
 802179c:	ed91 6b00 	vldr	d6, [r1]
 80217a0:	3201      	adds	r2, #1
 80217a2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80217a6:	105b      	asrs	r3, r3, #1
 80217a8:	3108      	adds	r1, #8
 80217aa:	2b00      	cmp	r3, #0
 80217ac:	d1f4      	bne.n	8021798 <_dtoa_r+0x328>
 80217ae:	ed9d 6b02 	vldr	d6, [sp, #8]
 80217b2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80217b6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80217ba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80217bc:	2b00      	cmp	r3, #0
 80217be:	f000 80a7 	beq.w	8021910 <_dtoa_r+0x4a0>
 80217c2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80217c6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80217ca:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80217ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80217d2:	f140 809d 	bpl.w	8021910 <_dtoa_r+0x4a0>
 80217d6:	f1b9 0f00 	cmp.w	r9, #0
 80217da:	f000 8099 	beq.w	8021910 <_dtoa_r+0x4a0>
 80217de:	9b06      	ldr	r3, [sp, #24]
 80217e0:	2b00      	cmp	r3, #0
 80217e2:	dd30      	ble.n	8021846 <_dtoa_r+0x3d6>
 80217e4:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80217e8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80217ec:	ed8d 7b02 	vstr	d7, [sp, #8]
 80217f0:	9d06      	ldr	r5, [sp, #24]
 80217f2:	f10b 33ff 	add.w	r3, fp, #4294967295
 80217f6:	3201      	adds	r2, #1
 80217f8:	ed9d 6b02 	vldr	d6, [sp, #8]
 80217fc:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8021800:	ee07 2a90 	vmov	s15, r2
 8021804:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8021808:	eea7 5b06 	vfma.f64	d5, d7, d6
 802180c:	ed8d 5b02 	vstr	d5, [sp, #8]
 8021810:	9a03      	ldr	r2, [sp, #12]
 8021812:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8021816:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 802181a:	2d00      	cmp	r5, #0
 802181c:	d17b      	bne.n	8021916 <_dtoa_r+0x4a6>
 802181e:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8021822:	ee36 6b47 	vsub.f64	d6, d6, d7
 8021826:	ec41 0b17 	vmov	d7, r0, r1
 802182a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 802182e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021832:	f300 8253 	bgt.w	8021cdc <_dtoa_r+0x86c>
 8021836:	eeb1 7b47 	vneg.f64	d7, d7
 802183a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 802183e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021842:	f100 8249 	bmi.w	8021cd8 <_dtoa_r+0x868>
 8021846:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 802184a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 802184e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8021850:	2b00      	cmp	r3, #0
 8021852:	f2c0 8119 	blt.w	8021a88 <_dtoa_r+0x618>
 8021856:	f1bb 0f0e 	cmp.w	fp, #14
 802185a:	f300 8115 	bgt.w	8021a88 <_dtoa_r+0x618>
 802185e:	4bc3      	ldr	r3, [pc, #780]	; (8021b6c <_dtoa_r+0x6fc>)
 8021860:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8021864:	ed93 6b00 	vldr	d6, [r3]
 8021868:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802186a:	2b00      	cmp	r3, #0
 802186c:	f280 80ba 	bge.w	80219e4 <_dtoa_r+0x574>
 8021870:	f1b9 0f00 	cmp.w	r9, #0
 8021874:	f300 80b6 	bgt.w	80219e4 <_dtoa_r+0x574>
 8021878:	f040 822d 	bne.w	8021cd6 <_dtoa_r+0x866>
 802187c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8021880:	ee26 6b07 	vmul.f64	d6, d6, d7
 8021884:	ed9d 7b02 	vldr	d7, [sp, #8]
 8021888:	eeb4 6bc7 	vcmpe.f64	d6, d7
 802188c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021890:	464d      	mov	r5, r9
 8021892:	464f      	mov	r7, r9
 8021894:	f280 8204 	bge.w	8021ca0 <_dtoa_r+0x830>
 8021898:	9b04      	ldr	r3, [sp, #16]
 802189a:	9a04      	ldr	r2, [sp, #16]
 802189c:	1c5e      	adds	r6, r3, #1
 802189e:	2331      	movs	r3, #49	; 0x31
 80218a0:	7013      	strb	r3, [r2, #0]
 80218a2:	f10b 0b01 	add.w	fp, fp, #1
 80218a6:	e1ff      	b.n	8021ca8 <_dtoa_r+0x838>
 80218a8:	2202      	movs	r2, #2
 80218aa:	e731      	b.n	8021710 <_dtoa_r+0x2a0>
 80218ac:	d02e      	beq.n	802190c <_dtoa_r+0x49c>
 80218ae:	f1cb 0300 	rsb	r3, fp, #0
 80218b2:	4aae      	ldr	r2, [pc, #696]	; (8021b6c <_dtoa_r+0x6fc>)
 80218b4:	f003 010f 	and.w	r1, r3, #15
 80218b8:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80218bc:	ed92 7b00 	vldr	d7, [r2]
 80218c0:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 80218c4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80218c8:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80218cc:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 80218d0:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80218d4:	49a6      	ldr	r1, [pc, #664]	; (8021b70 <_dtoa_r+0x700>)
 80218d6:	111b      	asrs	r3, r3, #4
 80218d8:	2000      	movs	r0, #0
 80218da:	2202      	movs	r2, #2
 80218dc:	b93b      	cbnz	r3, 80218ee <_dtoa_r+0x47e>
 80218de:	2800      	cmp	r0, #0
 80218e0:	f43f af6b 	beq.w	80217ba <_dtoa_r+0x34a>
 80218e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80218e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80218ec:	e765      	b.n	80217ba <_dtoa_r+0x34a>
 80218ee:	07dd      	lsls	r5, r3, #31
 80218f0:	d509      	bpl.n	8021906 <_dtoa_r+0x496>
 80218f2:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 80218f6:	ed91 7b00 	vldr	d7, [r1]
 80218fa:	ee26 7b07 	vmul.f64	d7, d6, d7
 80218fe:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8021902:	3201      	adds	r2, #1
 8021904:	2001      	movs	r0, #1
 8021906:	105b      	asrs	r3, r3, #1
 8021908:	3108      	adds	r1, #8
 802190a:	e7e7      	b.n	80218dc <_dtoa_r+0x46c>
 802190c:	2202      	movs	r2, #2
 802190e:	e754      	b.n	80217ba <_dtoa_r+0x34a>
 8021910:	465b      	mov	r3, fp
 8021912:	464d      	mov	r5, r9
 8021914:	e770      	b.n	80217f8 <_dtoa_r+0x388>
 8021916:	4a95      	ldr	r2, [pc, #596]	; (8021b6c <_dtoa_r+0x6fc>)
 8021918:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 802191c:	ed12 4b02 	vldr	d4, [r2, #-8]
 8021920:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021922:	ec41 0b17 	vmov	d7, r0, r1
 8021926:	b35a      	cbz	r2, 8021980 <_dtoa_r+0x510>
 8021928:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 802192c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8021930:	9e04      	ldr	r6, [sp, #16]
 8021932:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8021936:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 802193a:	ee35 7b47 	vsub.f64	d7, d5, d7
 802193e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8021942:	ee14 2a90 	vmov	r2, s9
 8021946:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 802194a:	3230      	adds	r2, #48	; 0x30
 802194c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8021950:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8021954:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021958:	f806 2b01 	strb.w	r2, [r6], #1
 802195c:	d43b      	bmi.n	80219d6 <_dtoa_r+0x566>
 802195e:	ee32 5b46 	vsub.f64	d5, d2, d6
 8021962:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8021966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802196a:	d472      	bmi.n	8021a52 <_dtoa_r+0x5e2>
 802196c:	9a04      	ldr	r2, [sp, #16]
 802196e:	1ab2      	subs	r2, r6, r2
 8021970:	4295      	cmp	r5, r2
 8021972:	f77f af68 	ble.w	8021846 <_dtoa_r+0x3d6>
 8021976:	ee27 7b03 	vmul.f64	d7, d7, d3
 802197a:	ee26 6b03 	vmul.f64	d6, d6, d3
 802197e:	e7de      	b.n	802193e <_dtoa_r+0x4ce>
 8021980:	9a04      	ldr	r2, [sp, #16]
 8021982:	ee24 7b07 	vmul.f64	d7, d4, d7
 8021986:	1956      	adds	r6, r2, r5
 8021988:	4611      	mov	r1, r2
 802198a:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 802198e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8021992:	ee14 2a90 	vmov	r2, s9
 8021996:	3230      	adds	r2, #48	; 0x30
 8021998:	f801 2b01 	strb.w	r2, [r1], #1
 802199c:	42b1      	cmp	r1, r6
 802199e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80219a2:	ee36 6b45 	vsub.f64	d6, d6, d5
 80219a6:	d11a      	bne.n	80219de <_dtoa_r+0x56e>
 80219a8:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80219ac:	ee37 4b05 	vadd.f64	d4, d7, d5
 80219b0:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80219b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80219b8:	dc4b      	bgt.n	8021a52 <_dtoa_r+0x5e2>
 80219ba:	ee35 7b47 	vsub.f64	d7, d5, d7
 80219be:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80219c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80219c6:	f57f af3e 	bpl.w	8021846 <_dtoa_r+0x3d6>
 80219ca:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80219ce:	2a30      	cmp	r2, #48	; 0x30
 80219d0:	f106 31ff 	add.w	r1, r6, #4294967295
 80219d4:	d001      	beq.n	80219da <_dtoa_r+0x56a>
 80219d6:	469b      	mov	fp, r3
 80219d8:	e02a      	b.n	8021a30 <_dtoa_r+0x5c0>
 80219da:	460e      	mov	r6, r1
 80219dc:	e7f5      	b.n	80219ca <_dtoa_r+0x55a>
 80219de:	ee26 6b03 	vmul.f64	d6, d6, d3
 80219e2:	e7d4      	b.n	802198e <_dtoa_r+0x51e>
 80219e4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80219e8:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80219ec:	9e04      	ldr	r6, [sp, #16]
 80219ee:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80219f2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80219f6:	ee15 3a10 	vmov	r3, s10
 80219fa:	3330      	adds	r3, #48	; 0x30
 80219fc:	f806 3b01 	strb.w	r3, [r6], #1
 8021a00:	9b04      	ldr	r3, [sp, #16]
 8021a02:	1af3      	subs	r3, r6, r3
 8021a04:	4599      	cmp	r9, r3
 8021a06:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8021a0a:	eea3 7b46 	vfms.f64	d7, d3, d6
 8021a0e:	d133      	bne.n	8021a78 <_dtoa_r+0x608>
 8021a10:	ee37 7b07 	vadd.f64	d7, d7, d7
 8021a14:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8021a18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021a1c:	dc18      	bgt.n	8021a50 <_dtoa_r+0x5e0>
 8021a1e:	eeb4 7b46 	vcmp.f64	d7, d6
 8021a22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021a26:	d103      	bne.n	8021a30 <_dtoa_r+0x5c0>
 8021a28:	ee15 3a10 	vmov	r3, s10
 8021a2c:	07db      	lsls	r3, r3, #31
 8021a2e:	d40f      	bmi.n	8021a50 <_dtoa_r+0x5e0>
 8021a30:	9901      	ldr	r1, [sp, #4]
 8021a32:	4620      	mov	r0, r4
 8021a34:	f000 fc90 	bl	8022358 <_Bfree>
 8021a38:	2300      	movs	r3, #0
 8021a3a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8021a3c:	7033      	strb	r3, [r6, #0]
 8021a3e:	f10b 0301 	add.w	r3, fp, #1
 8021a42:	6013      	str	r3, [r2, #0]
 8021a44:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8021a46:	2b00      	cmp	r3, #0
 8021a48:	f43f ad5b 	beq.w	8021502 <_dtoa_r+0x92>
 8021a4c:	601e      	str	r6, [r3, #0]
 8021a4e:	e558      	b.n	8021502 <_dtoa_r+0x92>
 8021a50:	465b      	mov	r3, fp
 8021a52:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8021a56:	2939      	cmp	r1, #57	; 0x39
 8021a58:	f106 32ff 	add.w	r2, r6, #4294967295
 8021a5c:	d106      	bne.n	8021a6c <_dtoa_r+0x5fc>
 8021a5e:	9904      	ldr	r1, [sp, #16]
 8021a60:	4291      	cmp	r1, r2
 8021a62:	d107      	bne.n	8021a74 <_dtoa_r+0x604>
 8021a64:	2230      	movs	r2, #48	; 0x30
 8021a66:	700a      	strb	r2, [r1, #0]
 8021a68:	3301      	adds	r3, #1
 8021a6a:	460a      	mov	r2, r1
 8021a6c:	7811      	ldrb	r1, [r2, #0]
 8021a6e:	3101      	adds	r1, #1
 8021a70:	7011      	strb	r1, [r2, #0]
 8021a72:	e7b0      	b.n	80219d6 <_dtoa_r+0x566>
 8021a74:	4616      	mov	r6, r2
 8021a76:	e7ec      	b.n	8021a52 <_dtoa_r+0x5e2>
 8021a78:	ee27 7b04 	vmul.f64	d7, d7, d4
 8021a7c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8021a80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021a84:	d1b3      	bne.n	80219ee <_dtoa_r+0x57e>
 8021a86:	e7d3      	b.n	8021a30 <_dtoa_r+0x5c0>
 8021a88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021a8a:	2a00      	cmp	r2, #0
 8021a8c:	f000 808d 	beq.w	8021baa <_dtoa_r+0x73a>
 8021a90:	9a08      	ldr	r2, [sp, #32]
 8021a92:	2a01      	cmp	r2, #1
 8021a94:	dc72      	bgt.n	8021b7c <_dtoa_r+0x70c>
 8021a96:	2f00      	cmp	r7, #0
 8021a98:	d06c      	beq.n	8021b74 <_dtoa_r+0x704>
 8021a9a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8021a9e:	4645      	mov	r5, r8
 8021aa0:	4656      	mov	r6, sl
 8021aa2:	9a07      	ldr	r2, [sp, #28]
 8021aa4:	2101      	movs	r1, #1
 8021aa6:	441a      	add	r2, r3
 8021aa8:	4620      	mov	r0, r4
 8021aaa:	449a      	add	sl, r3
 8021aac:	9207      	str	r2, [sp, #28]
 8021aae:	f000 fcf3 	bl	8022498 <__i2b>
 8021ab2:	4607      	mov	r7, r0
 8021ab4:	2e00      	cmp	r6, #0
 8021ab6:	dd0b      	ble.n	8021ad0 <_dtoa_r+0x660>
 8021ab8:	9b07      	ldr	r3, [sp, #28]
 8021aba:	2b00      	cmp	r3, #0
 8021abc:	dd08      	ble.n	8021ad0 <_dtoa_r+0x660>
 8021abe:	42b3      	cmp	r3, r6
 8021ac0:	9a07      	ldr	r2, [sp, #28]
 8021ac2:	bfa8      	it	ge
 8021ac4:	4633      	movge	r3, r6
 8021ac6:	ebaa 0a03 	sub.w	sl, sl, r3
 8021aca:	1af6      	subs	r6, r6, r3
 8021acc:	1ad3      	subs	r3, r2, r3
 8021ace:	9307      	str	r3, [sp, #28]
 8021ad0:	f1b8 0f00 	cmp.w	r8, #0
 8021ad4:	d01d      	beq.n	8021b12 <_dtoa_r+0x6a2>
 8021ad6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021ad8:	2b00      	cmp	r3, #0
 8021ada:	d06a      	beq.n	8021bb2 <_dtoa_r+0x742>
 8021adc:	b18d      	cbz	r5, 8021b02 <_dtoa_r+0x692>
 8021ade:	4639      	mov	r1, r7
 8021ae0:	462a      	mov	r2, r5
 8021ae2:	4620      	mov	r0, r4
 8021ae4:	f000 fd78 	bl	80225d8 <__pow5mult>
 8021ae8:	9a01      	ldr	r2, [sp, #4]
 8021aea:	4601      	mov	r1, r0
 8021aec:	4607      	mov	r7, r0
 8021aee:	4620      	mov	r0, r4
 8021af0:	f000 fcdb 	bl	80224aa <__multiply>
 8021af4:	9901      	ldr	r1, [sp, #4]
 8021af6:	900c      	str	r0, [sp, #48]	; 0x30
 8021af8:	4620      	mov	r0, r4
 8021afa:	f000 fc2d 	bl	8022358 <_Bfree>
 8021afe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021b00:	9301      	str	r3, [sp, #4]
 8021b02:	ebb8 0205 	subs.w	r2, r8, r5
 8021b06:	d004      	beq.n	8021b12 <_dtoa_r+0x6a2>
 8021b08:	9901      	ldr	r1, [sp, #4]
 8021b0a:	4620      	mov	r0, r4
 8021b0c:	f000 fd64 	bl	80225d8 <__pow5mult>
 8021b10:	9001      	str	r0, [sp, #4]
 8021b12:	2101      	movs	r1, #1
 8021b14:	4620      	mov	r0, r4
 8021b16:	f000 fcbf 	bl	8022498 <__i2b>
 8021b1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021b1c:	4605      	mov	r5, r0
 8021b1e:	2b00      	cmp	r3, #0
 8021b20:	f000 81ca 	beq.w	8021eb8 <_dtoa_r+0xa48>
 8021b24:	461a      	mov	r2, r3
 8021b26:	4601      	mov	r1, r0
 8021b28:	4620      	mov	r0, r4
 8021b2a:	f000 fd55 	bl	80225d8 <__pow5mult>
 8021b2e:	9b08      	ldr	r3, [sp, #32]
 8021b30:	2b01      	cmp	r3, #1
 8021b32:	4605      	mov	r5, r0
 8021b34:	dc44      	bgt.n	8021bc0 <_dtoa_r+0x750>
 8021b36:	9b02      	ldr	r3, [sp, #8]
 8021b38:	2b00      	cmp	r3, #0
 8021b3a:	d13c      	bne.n	8021bb6 <_dtoa_r+0x746>
 8021b3c:	9b03      	ldr	r3, [sp, #12]
 8021b3e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8021b42:	2b00      	cmp	r3, #0
 8021b44:	d137      	bne.n	8021bb6 <_dtoa_r+0x746>
 8021b46:	9b03      	ldr	r3, [sp, #12]
 8021b48:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8021b4c:	0d1b      	lsrs	r3, r3, #20
 8021b4e:	051b      	lsls	r3, r3, #20
 8021b50:	2b00      	cmp	r3, #0
 8021b52:	d033      	beq.n	8021bbc <_dtoa_r+0x74c>
 8021b54:	9b07      	ldr	r3, [sp, #28]
 8021b56:	3301      	adds	r3, #1
 8021b58:	f10a 0a01 	add.w	sl, sl, #1
 8021b5c:	9307      	str	r3, [sp, #28]
 8021b5e:	f04f 0801 	mov.w	r8, #1
 8021b62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021b64:	bb73      	cbnz	r3, 8021bc4 <_dtoa_r+0x754>
 8021b66:	2001      	movs	r0, #1
 8021b68:	e034      	b.n	8021bd4 <_dtoa_r+0x764>
 8021b6a:	bf00      	nop
 8021b6c:	080277b0 	.word	0x080277b0
 8021b70:	08027788 	.word	0x08027788
 8021b74:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8021b76:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8021b7a:	e790      	b.n	8021a9e <_dtoa_r+0x62e>
 8021b7c:	f109 35ff 	add.w	r5, r9, #4294967295
 8021b80:	45a8      	cmp	r8, r5
 8021b82:	bfbf      	itttt	lt
 8021b84:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8021b86:	eba5 0808 	sublt.w	r8, r5, r8
 8021b8a:	4443      	addlt	r3, r8
 8021b8c:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8021b8e:	bfb6      	itet	lt
 8021b90:	46a8      	movlt	r8, r5
 8021b92:	eba8 0505 	subge.w	r5, r8, r5
 8021b96:	2500      	movlt	r5, #0
 8021b98:	f1b9 0f00 	cmp.w	r9, #0
 8021b9c:	bfb9      	ittee	lt
 8021b9e:	ebaa 0609 	sublt.w	r6, sl, r9
 8021ba2:	2300      	movlt	r3, #0
 8021ba4:	4656      	movge	r6, sl
 8021ba6:	464b      	movge	r3, r9
 8021ba8:	e77b      	b.n	8021aa2 <_dtoa_r+0x632>
 8021baa:	4645      	mov	r5, r8
 8021bac:	4656      	mov	r6, sl
 8021bae:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8021bb0:	e780      	b.n	8021ab4 <_dtoa_r+0x644>
 8021bb2:	4642      	mov	r2, r8
 8021bb4:	e7a8      	b.n	8021b08 <_dtoa_r+0x698>
 8021bb6:	f04f 0800 	mov.w	r8, #0
 8021bba:	e7d2      	b.n	8021b62 <_dtoa_r+0x6f2>
 8021bbc:	4698      	mov	r8, r3
 8021bbe:	e7d0      	b.n	8021b62 <_dtoa_r+0x6f2>
 8021bc0:	f04f 0800 	mov.w	r8, #0
 8021bc4:	692b      	ldr	r3, [r5, #16]
 8021bc6:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8021bca:	6918      	ldr	r0, [r3, #16]
 8021bcc:	f000 fc16 	bl	80223fc <__hi0bits>
 8021bd0:	f1c0 0020 	rsb	r0, r0, #32
 8021bd4:	9b07      	ldr	r3, [sp, #28]
 8021bd6:	4418      	add	r0, r3
 8021bd8:	f010 001f 	ands.w	r0, r0, #31
 8021bdc:	d047      	beq.n	8021c6e <_dtoa_r+0x7fe>
 8021bde:	f1c0 0320 	rsb	r3, r0, #32
 8021be2:	2b04      	cmp	r3, #4
 8021be4:	dd3b      	ble.n	8021c5e <_dtoa_r+0x7ee>
 8021be6:	9b07      	ldr	r3, [sp, #28]
 8021be8:	f1c0 001c 	rsb	r0, r0, #28
 8021bec:	4482      	add	sl, r0
 8021bee:	4406      	add	r6, r0
 8021bf0:	4403      	add	r3, r0
 8021bf2:	9307      	str	r3, [sp, #28]
 8021bf4:	f1ba 0f00 	cmp.w	sl, #0
 8021bf8:	dd05      	ble.n	8021c06 <_dtoa_r+0x796>
 8021bfa:	4652      	mov	r2, sl
 8021bfc:	9901      	ldr	r1, [sp, #4]
 8021bfe:	4620      	mov	r0, r4
 8021c00:	f000 fd38 	bl	8022674 <__lshift>
 8021c04:	9001      	str	r0, [sp, #4]
 8021c06:	9b07      	ldr	r3, [sp, #28]
 8021c08:	2b00      	cmp	r3, #0
 8021c0a:	dd05      	ble.n	8021c18 <_dtoa_r+0x7a8>
 8021c0c:	4629      	mov	r1, r5
 8021c0e:	461a      	mov	r2, r3
 8021c10:	4620      	mov	r0, r4
 8021c12:	f000 fd2f 	bl	8022674 <__lshift>
 8021c16:	4605      	mov	r5, r0
 8021c18:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021c1a:	b353      	cbz	r3, 8021c72 <_dtoa_r+0x802>
 8021c1c:	4629      	mov	r1, r5
 8021c1e:	9801      	ldr	r0, [sp, #4]
 8021c20:	f000 fd7c 	bl	802271c <__mcmp>
 8021c24:	2800      	cmp	r0, #0
 8021c26:	da24      	bge.n	8021c72 <_dtoa_r+0x802>
 8021c28:	2300      	movs	r3, #0
 8021c2a:	220a      	movs	r2, #10
 8021c2c:	9901      	ldr	r1, [sp, #4]
 8021c2e:	4620      	mov	r0, r4
 8021c30:	f000 fba9 	bl	8022386 <__multadd>
 8021c34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021c36:	9001      	str	r0, [sp, #4]
 8021c38:	f10b 3bff 	add.w	fp, fp, #4294967295
 8021c3c:	2b00      	cmp	r3, #0
 8021c3e:	f000 8142 	beq.w	8021ec6 <_dtoa_r+0xa56>
 8021c42:	2300      	movs	r3, #0
 8021c44:	4639      	mov	r1, r7
 8021c46:	220a      	movs	r2, #10
 8021c48:	4620      	mov	r0, r4
 8021c4a:	f000 fb9c 	bl	8022386 <__multadd>
 8021c4e:	9b06      	ldr	r3, [sp, #24]
 8021c50:	2b00      	cmp	r3, #0
 8021c52:	4607      	mov	r7, r0
 8021c54:	dc4b      	bgt.n	8021cee <_dtoa_r+0x87e>
 8021c56:	9b08      	ldr	r3, [sp, #32]
 8021c58:	2b02      	cmp	r3, #2
 8021c5a:	dd48      	ble.n	8021cee <_dtoa_r+0x87e>
 8021c5c:	e011      	b.n	8021c82 <_dtoa_r+0x812>
 8021c5e:	d0c9      	beq.n	8021bf4 <_dtoa_r+0x784>
 8021c60:	9a07      	ldr	r2, [sp, #28]
 8021c62:	331c      	adds	r3, #28
 8021c64:	441a      	add	r2, r3
 8021c66:	449a      	add	sl, r3
 8021c68:	441e      	add	r6, r3
 8021c6a:	4613      	mov	r3, r2
 8021c6c:	e7c1      	b.n	8021bf2 <_dtoa_r+0x782>
 8021c6e:	4603      	mov	r3, r0
 8021c70:	e7f6      	b.n	8021c60 <_dtoa_r+0x7f0>
 8021c72:	f1b9 0f00 	cmp.w	r9, #0
 8021c76:	dc34      	bgt.n	8021ce2 <_dtoa_r+0x872>
 8021c78:	9b08      	ldr	r3, [sp, #32]
 8021c7a:	2b02      	cmp	r3, #2
 8021c7c:	dd31      	ble.n	8021ce2 <_dtoa_r+0x872>
 8021c7e:	f8cd 9018 	str.w	r9, [sp, #24]
 8021c82:	9b06      	ldr	r3, [sp, #24]
 8021c84:	b963      	cbnz	r3, 8021ca0 <_dtoa_r+0x830>
 8021c86:	4629      	mov	r1, r5
 8021c88:	2205      	movs	r2, #5
 8021c8a:	4620      	mov	r0, r4
 8021c8c:	f000 fb7b 	bl	8022386 <__multadd>
 8021c90:	4601      	mov	r1, r0
 8021c92:	4605      	mov	r5, r0
 8021c94:	9801      	ldr	r0, [sp, #4]
 8021c96:	f000 fd41 	bl	802271c <__mcmp>
 8021c9a:	2800      	cmp	r0, #0
 8021c9c:	f73f adfc 	bgt.w	8021898 <_dtoa_r+0x428>
 8021ca0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021ca2:	9e04      	ldr	r6, [sp, #16]
 8021ca4:	ea6f 0b03 	mvn.w	fp, r3
 8021ca8:	f04f 0900 	mov.w	r9, #0
 8021cac:	4629      	mov	r1, r5
 8021cae:	4620      	mov	r0, r4
 8021cb0:	f000 fb52 	bl	8022358 <_Bfree>
 8021cb4:	2f00      	cmp	r7, #0
 8021cb6:	f43f aebb 	beq.w	8021a30 <_dtoa_r+0x5c0>
 8021cba:	f1b9 0f00 	cmp.w	r9, #0
 8021cbe:	d005      	beq.n	8021ccc <_dtoa_r+0x85c>
 8021cc0:	45b9      	cmp	r9, r7
 8021cc2:	d003      	beq.n	8021ccc <_dtoa_r+0x85c>
 8021cc4:	4649      	mov	r1, r9
 8021cc6:	4620      	mov	r0, r4
 8021cc8:	f000 fb46 	bl	8022358 <_Bfree>
 8021ccc:	4639      	mov	r1, r7
 8021cce:	4620      	mov	r0, r4
 8021cd0:	f000 fb42 	bl	8022358 <_Bfree>
 8021cd4:	e6ac      	b.n	8021a30 <_dtoa_r+0x5c0>
 8021cd6:	2500      	movs	r5, #0
 8021cd8:	462f      	mov	r7, r5
 8021cda:	e7e1      	b.n	8021ca0 <_dtoa_r+0x830>
 8021cdc:	469b      	mov	fp, r3
 8021cde:	462f      	mov	r7, r5
 8021ce0:	e5da      	b.n	8021898 <_dtoa_r+0x428>
 8021ce2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021ce4:	f8cd 9018 	str.w	r9, [sp, #24]
 8021ce8:	2b00      	cmp	r3, #0
 8021cea:	f000 80f3 	beq.w	8021ed4 <_dtoa_r+0xa64>
 8021cee:	2e00      	cmp	r6, #0
 8021cf0:	dd05      	ble.n	8021cfe <_dtoa_r+0x88e>
 8021cf2:	4639      	mov	r1, r7
 8021cf4:	4632      	mov	r2, r6
 8021cf6:	4620      	mov	r0, r4
 8021cf8:	f000 fcbc 	bl	8022674 <__lshift>
 8021cfc:	4607      	mov	r7, r0
 8021cfe:	f1b8 0f00 	cmp.w	r8, #0
 8021d02:	d04c      	beq.n	8021d9e <_dtoa_r+0x92e>
 8021d04:	6879      	ldr	r1, [r7, #4]
 8021d06:	4620      	mov	r0, r4
 8021d08:	f000 faf2 	bl	80222f0 <_Balloc>
 8021d0c:	693a      	ldr	r2, [r7, #16]
 8021d0e:	3202      	adds	r2, #2
 8021d10:	4606      	mov	r6, r0
 8021d12:	0092      	lsls	r2, r2, #2
 8021d14:	f107 010c 	add.w	r1, r7, #12
 8021d18:	300c      	adds	r0, #12
 8021d1a:	f7fe fcb4 	bl	8020686 <memcpy>
 8021d1e:	2201      	movs	r2, #1
 8021d20:	4631      	mov	r1, r6
 8021d22:	4620      	mov	r0, r4
 8021d24:	f000 fca6 	bl	8022674 <__lshift>
 8021d28:	9b02      	ldr	r3, [sp, #8]
 8021d2a:	f8dd a010 	ldr.w	sl, [sp, #16]
 8021d2e:	f003 0301 	and.w	r3, r3, #1
 8021d32:	46b9      	mov	r9, r7
 8021d34:	9307      	str	r3, [sp, #28]
 8021d36:	4607      	mov	r7, r0
 8021d38:	4629      	mov	r1, r5
 8021d3a:	9801      	ldr	r0, [sp, #4]
 8021d3c:	f7ff fb0a 	bl	8021354 <quorem>
 8021d40:	4649      	mov	r1, r9
 8021d42:	4606      	mov	r6, r0
 8021d44:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8021d48:	9801      	ldr	r0, [sp, #4]
 8021d4a:	f000 fce7 	bl	802271c <__mcmp>
 8021d4e:	463a      	mov	r2, r7
 8021d50:	9002      	str	r0, [sp, #8]
 8021d52:	4629      	mov	r1, r5
 8021d54:	4620      	mov	r0, r4
 8021d56:	f000 fcfb 	bl	8022750 <__mdiff>
 8021d5a:	68c3      	ldr	r3, [r0, #12]
 8021d5c:	4602      	mov	r2, r0
 8021d5e:	bb03      	cbnz	r3, 8021da2 <_dtoa_r+0x932>
 8021d60:	4601      	mov	r1, r0
 8021d62:	9009      	str	r0, [sp, #36]	; 0x24
 8021d64:	9801      	ldr	r0, [sp, #4]
 8021d66:	f000 fcd9 	bl	802271c <__mcmp>
 8021d6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021d6c:	4603      	mov	r3, r0
 8021d6e:	4611      	mov	r1, r2
 8021d70:	4620      	mov	r0, r4
 8021d72:	9309      	str	r3, [sp, #36]	; 0x24
 8021d74:	f000 faf0 	bl	8022358 <_Bfree>
 8021d78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021d7a:	b9a3      	cbnz	r3, 8021da6 <_dtoa_r+0x936>
 8021d7c:	9a08      	ldr	r2, [sp, #32]
 8021d7e:	b992      	cbnz	r2, 8021da6 <_dtoa_r+0x936>
 8021d80:	9a07      	ldr	r2, [sp, #28]
 8021d82:	b982      	cbnz	r2, 8021da6 <_dtoa_r+0x936>
 8021d84:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8021d88:	d029      	beq.n	8021dde <_dtoa_r+0x96e>
 8021d8a:	9b02      	ldr	r3, [sp, #8]
 8021d8c:	2b00      	cmp	r3, #0
 8021d8e:	dd01      	ble.n	8021d94 <_dtoa_r+0x924>
 8021d90:	f106 0831 	add.w	r8, r6, #49	; 0x31
 8021d94:	f10a 0601 	add.w	r6, sl, #1
 8021d98:	f88a 8000 	strb.w	r8, [sl]
 8021d9c:	e786      	b.n	8021cac <_dtoa_r+0x83c>
 8021d9e:	4638      	mov	r0, r7
 8021da0:	e7c2      	b.n	8021d28 <_dtoa_r+0x8b8>
 8021da2:	2301      	movs	r3, #1
 8021da4:	e7e3      	b.n	8021d6e <_dtoa_r+0x8fe>
 8021da6:	9a02      	ldr	r2, [sp, #8]
 8021da8:	2a00      	cmp	r2, #0
 8021daa:	db04      	blt.n	8021db6 <_dtoa_r+0x946>
 8021dac:	d124      	bne.n	8021df8 <_dtoa_r+0x988>
 8021dae:	9a08      	ldr	r2, [sp, #32]
 8021db0:	bb12      	cbnz	r2, 8021df8 <_dtoa_r+0x988>
 8021db2:	9a07      	ldr	r2, [sp, #28]
 8021db4:	bb02      	cbnz	r2, 8021df8 <_dtoa_r+0x988>
 8021db6:	2b00      	cmp	r3, #0
 8021db8:	ddec      	ble.n	8021d94 <_dtoa_r+0x924>
 8021dba:	2201      	movs	r2, #1
 8021dbc:	9901      	ldr	r1, [sp, #4]
 8021dbe:	4620      	mov	r0, r4
 8021dc0:	f000 fc58 	bl	8022674 <__lshift>
 8021dc4:	4629      	mov	r1, r5
 8021dc6:	9001      	str	r0, [sp, #4]
 8021dc8:	f000 fca8 	bl	802271c <__mcmp>
 8021dcc:	2800      	cmp	r0, #0
 8021dce:	dc03      	bgt.n	8021dd8 <_dtoa_r+0x968>
 8021dd0:	d1e0      	bne.n	8021d94 <_dtoa_r+0x924>
 8021dd2:	f018 0f01 	tst.w	r8, #1
 8021dd6:	d0dd      	beq.n	8021d94 <_dtoa_r+0x924>
 8021dd8:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8021ddc:	d1d8      	bne.n	8021d90 <_dtoa_r+0x920>
 8021dde:	2339      	movs	r3, #57	; 0x39
 8021de0:	f10a 0601 	add.w	r6, sl, #1
 8021de4:	f88a 3000 	strb.w	r3, [sl]
 8021de8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8021dec:	2b39      	cmp	r3, #57	; 0x39
 8021dee:	f106 32ff 	add.w	r2, r6, #4294967295
 8021df2:	d04c      	beq.n	8021e8e <_dtoa_r+0xa1e>
 8021df4:	3301      	adds	r3, #1
 8021df6:	e051      	b.n	8021e9c <_dtoa_r+0xa2c>
 8021df8:	2b00      	cmp	r3, #0
 8021dfa:	f10a 0601 	add.w	r6, sl, #1
 8021dfe:	dd05      	ble.n	8021e0c <_dtoa_r+0x99c>
 8021e00:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8021e04:	d0eb      	beq.n	8021dde <_dtoa_r+0x96e>
 8021e06:	f108 0801 	add.w	r8, r8, #1
 8021e0a:	e7c5      	b.n	8021d98 <_dtoa_r+0x928>
 8021e0c:	9b04      	ldr	r3, [sp, #16]
 8021e0e:	9a06      	ldr	r2, [sp, #24]
 8021e10:	f806 8c01 	strb.w	r8, [r6, #-1]
 8021e14:	1af3      	subs	r3, r6, r3
 8021e16:	4293      	cmp	r3, r2
 8021e18:	d021      	beq.n	8021e5e <_dtoa_r+0x9ee>
 8021e1a:	2300      	movs	r3, #0
 8021e1c:	220a      	movs	r2, #10
 8021e1e:	9901      	ldr	r1, [sp, #4]
 8021e20:	4620      	mov	r0, r4
 8021e22:	f000 fab0 	bl	8022386 <__multadd>
 8021e26:	45b9      	cmp	r9, r7
 8021e28:	9001      	str	r0, [sp, #4]
 8021e2a:	f04f 0300 	mov.w	r3, #0
 8021e2e:	f04f 020a 	mov.w	r2, #10
 8021e32:	4649      	mov	r1, r9
 8021e34:	4620      	mov	r0, r4
 8021e36:	d105      	bne.n	8021e44 <_dtoa_r+0x9d4>
 8021e38:	f000 faa5 	bl	8022386 <__multadd>
 8021e3c:	4681      	mov	r9, r0
 8021e3e:	4607      	mov	r7, r0
 8021e40:	46b2      	mov	sl, r6
 8021e42:	e779      	b.n	8021d38 <_dtoa_r+0x8c8>
 8021e44:	f000 fa9f 	bl	8022386 <__multadd>
 8021e48:	4639      	mov	r1, r7
 8021e4a:	4681      	mov	r9, r0
 8021e4c:	2300      	movs	r3, #0
 8021e4e:	220a      	movs	r2, #10
 8021e50:	4620      	mov	r0, r4
 8021e52:	f000 fa98 	bl	8022386 <__multadd>
 8021e56:	4607      	mov	r7, r0
 8021e58:	e7f2      	b.n	8021e40 <_dtoa_r+0x9d0>
 8021e5a:	f04f 0900 	mov.w	r9, #0
 8021e5e:	2201      	movs	r2, #1
 8021e60:	9901      	ldr	r1, [sp, #4]
 8021e62:	4620      	mov	r0, r4
 8021e64:	f000 fc06 	bl	8022674 <__lshift>
 8021e68:	4629      	mov	r1, r5
 8021e6a:	9001      	str	r0, [sp, #4]
 8021e6c:	f000 fc56 	bl	802271c <__mcmp>
 8021e70:	2800      	cmp	r0, #0
 8021e72:	dcb9      	bgt.n	8021de8 <_dtoa_r+0x978>
 8021e74:	d102      	bne.n	8021e7c <_dtoa_r+0xa0c>
 8021e76:	f018 0f01 	tst.w	r8, #1
 8021e7a:	d1b5      	bne.n	8021de8 <_dtoa_r+0x978>
 8021e7c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8021e80:	2b30      	cmp	r3, #48	; 0x30
 8021e82:	f106 32ff 	add.w	r2, r6, #4294967295
 8021e86:	f47f af11 	bne.w	8021cac <_dtoa_r+0x83c>
 8021e8a:	4616      	mov	r6, r2
 8021e8c:	e7f6      	b.n	8021e7c <_dtoa_r+0xa0c>
 8021e8e:	9b04      	ldr	r3, [sp, #16]
 8021e90:	4293      	cmp	r3, r2
 8021e92:	d105      	bne.n	8021ea0 <_dtoa_r+0xa30>
 8021e94:	9a04      	ldr	r2, [sp, #16]
 8021e96:	f10b 0b01 	add.w	fp, fp, #1
 8021e9a:	2331      	movs	r3, #49	; 0x31
 8021e9c:	7013      	strb	r3, [r2, #0]
 8021e9e:	e705      	b.n	8021cac <_dtoa_r+0x83c>
 8021ea0:	4616      	mov	r6, r2
 8021ea2:	e7a1      	b.n	8021de8 <_dtoa_r+0x978>
 8021ea4:	4b16      	ldr	r3, [pc, #88]	; (8021f00 <_dtoa_r+0xa90>)
 8021ea6:	f7ff bb48 	b.w	802153a <_dtoa_r+0xca>
 8021eaa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8021eac:	2b00      	cmp	r3, #0
 8021eae:	f47f ab23 	bne.w	80214f8 <_dtoa_r+0x88>
 8021eb2:	4b14      	ldr	r3, [pc, #80]	; (8021f04 <_dtoa_r+0xa94>)
 8021eb4:	f7ff bb41 	b.w	802153a <_dtoa_r+0xca>
 8021eb8:	9b08      	ldr	r3, [sp, #32]
 8021eba:	2b01      	cmp	r3, #1
 8021ebc:	f77f ae3b 	ble.w	8021b36 <_dtoa_r+0x6c6>
 8021ec0:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8021ec4:	e64f      	b.n	8021b66 <_dtoa_r+0x6f6>
 8021ec6:	9b06      	ldr	r3, [sp, #24]
 8021ec8:	2b00      	cmp	r3, #0
 8021eca:	dc03      	bgt.n	8021ed4 <_dtoa_r+0xa64>
 8021ecc:	9b08      	ldr	r3, [sp, #32]
 8021ece:	2b02      	cmp	r3, #2
 8021ed0:	f73f aed7 	bgt.w	8021c82 <_dtoa_r+0x812>
 8021ed4:	9e04      	ldr	r6, [sp, #16]
 8021ed6:	9801      	ldr	r0, [sp, #4]
 8021ed8:	4629      	mov	r1, r5
 8021eda:	f7ff fa3b 	bl	8021354 <quorem>
 8021ede:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8021ee2:	f806 8b01 	strb.w	r8, [r6], #1
 8021ee6:	9b04      	ldr	r3, [sp, #16]
 8021ee8:	9a06      	ldr	r2, [sp, #24]
 8021eea:	1af3      	subs	r3, r6, r3
 8021eec:	429a      	cmp	r2, r3
 8021eee:	ddb4      	ble.n	8021e5a <_dtoa_r+0x9ea>
 8021ef0:	2300      	movs	r3, #0
 8021ef2:	220a      	movs	r2, #10
 8021ef4:	9901      	ldr	r1, [sp, #4]
 8021ef6:	4620      	mov	r0, r4
 8021ef8:	f000 fa45 	bl	8022386 <__multadd>
 8021efc:	9001      	str	r0, [sp, #4]
 8021efe:	e7ea      	b.n	8021ed6 <_dtoa_r+0xa66>
 8021f00:	080275f2 	.word	0x080275f2
 8021f04:	08027717 	.word	0x08027717

08021f08 <__sflush_r>:
 8021f08:	898a      	ldrh	r2, [r1, #12]
 8021f0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021f0e:	4605      	mov	r5, r0
 8021f10:	0710      	lsls	r0, r2, #28
 8021f12:	460c      	mov	r4, r1
 8021f14:	d458      	bmi.n	8021fc8 <__sflush_r+0xc0>
 8021f16:	684b      	ldr	r3, [r1, #4]
 8021f18:	2b00      	cmp	r3, #0
 8021f1a:	dc05      	bgt.n	8021f28 <__sflush_r+0x20>
 8021f1c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8021f1e:	2b00      	cmp	r3, #0
 8021f20:	dc02      	bgt.n	8021f28 <__sflush_r+0x20>
 8021f22:	2000      	movs	r0, #0
 8021f24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021f28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8021f2a:	2e00      	cmp	r6, #0
 8021f2c:	d0f9      	beq.n	8021f22 <__sflush_r+0x1a>
 8021f2e:	2300      	movs	r3, #0
 8021f30:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8021f34:	682f      	ldr	r7, [r5, #0]
 8021f36:	6a21      	ldr	r1, [r4, #32]
 8021f38:	602b      	str	r3, [r5, #0]
 8021f3a:	d032      	beq.n	8021fa2 <__sflush_r+0x9a>
 8021f3c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8021f3e:	89a3      	ldrh	r3, [r4, #12]
 8021f40:	075a      	lsls	r2, r3, #29
 8021f42:	d505      	bpl.n	8021f50 <__sflush_r+0x48>
 8021f44:	6863      	ldr	r3, [r4, #4]
 8021f46:	1ac0      	subs	r0, r0, r3
 8021f48:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8021f4a:	b10b      	cbz	r3, 8021f50 <__sflush_r+0x48>
 8021f4c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8021f4e:	1ac0      	subs	r0, r0, r3
 8021f50:	2300      	movs	r3, #0
 8021f52:	4602      	mov	r2, r0
 8021f54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8021f56:	6a21      	ldr	r1, [r4, #32]
 8021f58:	4628      	mov	r0, r5
 8021f5a:	47b0      	blx	r6
 8021f5c:	1c43      	adds	r3, r0, #1
 8021f5e:	89a3      	ldrh	r3, [r4, #12]
 8021f60:	d106      	bne.n	8021f70 <__sflush_r+0x68>
 8021f62:	6829      	ldr	r1, [r5, #0]
 8021f64:	291d      	cmp	r1, #29
 8021f66:	d848      	bhi.n	8021ffa <__sflush_r+0xf2>
 8021f68:	4a29      	ldr	r2, [pc, #164]	; (8022010 <__sflush_r+0x108>)
 8021f6a:	40ca      	lsrs	r2, r1
 8021f6c:	07d6      	lsls	r6, r2, #31
 8021f6e:	d544      	bpl.n	8021ffa <__sflush_r+0xf2>
 8021f70:	2200      	movs	r2, #0
 8021f72:	6062      	str	r2, [r4, #4]
 8021f74:	04d9      	lsls	r1, r3, #19
 8021f76:	6922      	ldr	r2, [r4, #16]
 8021f78:	6022      	str	r2, [r4, #0]
 8021f7a:	d504      	bpl.n	8021f86 <__sflush_r+0x7e>
 8021f7c:	1c42      	adds	r2, r0, #1
 8021f7e:	d101      	bne.n	8021f84 <__sflush_r+0x7c>
 8021f80:	682b      	ldr	r3, [r5, #0]
 8021f82:	b903      	cbnz	r3, 8021f86 <__sflush_r+0x7e>
 8021f84:	6560      	str	r0, [r4, #84]	; 0x54
 8021f86:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8021f88:	602f      	str	r7, [r5, #0]
 8021f8a:	2900      	cmp	r1, #0
 8021f8c:	d0c9      	beq.n	8021f22 <__sflush_r+0x1a>
 8021f8e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8021f92:	4299      	cmp	r1, r3
 8021f94:	d002      	beq.n	8021f9c <__sflush_r+0x94>
 8021f96:	4628      	mov	r0, r5
 8021f98:	f000 fc94 	bl	80228c4 <_free_r>
 8021f9c:	2000      	movs	r0, #0
 8021f9e:	6360      	str	r0, [r4, #52]	; 0x34
 8021fa0:	e7c0      	b.n	8021f24 <__sflush_r+0x1c>
 8021fa2:	2301      	movs	r3, #1
 8021fa4:	4628      	mov	r0, r5
 8021fa6:	47b0      	blx	r6
 8021fa8:	1c41      	adds	r1, r0, #1
 8021faa:	d1c8      	bne.n	8021f3e <__sflush_r+0x36>
 8021fac:	682b      	ldr	r3, [r5, #0]
 8021fae:	2b00      	cmp	r3, #0
 8021fb0:	d0c5      	beq.n	8021f3e <__sflush_r+0x36>
 8021fb2:	2b1d      	cmp	r3, #29
 8021fb4:	d001      	beq.n	8021fba <__sflush_r+0xb2>
 8021fb6:	2b16      	cmp	r3, #22
 8021fb8:	d101      	bne.n	8021fbe <__sflush_r+0xb6>
 8021fba:	602f      	str	r7, [r5, #0]
 8021fbc:	e7b1      	b.n	8021f22 <__sflush_r+0x1a>
 8021fbe:	89a3      	ldrh	r3, [r4, #12]
 8021fc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021fc4:	81a3      	strh	r3, [r4, #12]
 8021fc6:	e7ad      	b.n	8021f24 <__sflush_r+0x1c>
 8021fc8:	690f      	ldr	r7, [r1, #16]
 8021fca:	2f00      	cmp	r7, #0
 8021fcc:	d0a9      	beq.n	8021f22 <__sflush_r+0x1a>
 8021fce:	0793      	lsls	r3, r2, #30
 8021fd0:	680e      	ldr	r6, [r1, #0]
 8021fd2:	bf08      	it	eq
 8021fd4:	694b      	ldreq	r3, [r1, #20]
 8021fd6:	600f      	str	r7, [r1, #0]
 8021fd8:	bf18      	it	ne
 8021fda:	2300      	movne	r3, #0
 8021fdc:	eba6 0807 	sub.w	r8, r6, r7
 8021fe0:	608b      	str	r3, [r1, #8]
 8021fe2:	f1b8 0f00 	cmp.w	r8, #0
 8021fe6:	dd9c      	ble.n	8021f22 <__sflush_r+0x1a>
 8021fe8:	4643      	mov	r3, r8
 8021fea:	463a      	mov	r2, r7
 8021fec:	6a21      	ldr	r1, [r4, #32]
 8021fee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8021ff0:	4628      	mov	r0, r5
 8021ff2:	47b0      	blx	r6
 8021ff4:	2800      	cmp	r0, #0
 8021ff6:	dc06      	bgt.n	8022006 <__sflush_r+0xfe>
 8021ff8:	89a3      	ldrh	r3, [r4, #12]
 8021ffa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021ffe:	81a3      	strh	r3, [r4, #12]
 8022000:	f04f 30ff 	mov.w	r0, #4294967295
 8022004:	e78e      	b.n	8021f24 <__sflush_r+0x1c>
 8022006:	4407      	add	r7, r0
 8022008:	eba8 0800 	sub.w	r8, r8, r0
 802200c:	e7e9      	b.n	8021fe2 <__sflush_r+0xda>
 802200e:	bf00      	nop
 8022010:	20400001 	.word	0x20400001

08022014 <_fflush_r>:
 8022014:	b538      	push	{r3, r4, r5, lr}
 8022016:	690b      	ldr	r3, [r1, #16]
 8022018:	4605      	mov	r5, r0
 802201a:	460c      	mov	r4, r1
 802201c:	b1db      	cbz	r3, 8022056 <_fflush_r+0x42>
 802201e:	b118      	cbz	r0, 8022028 <_fflush_r+0x14>
 8022020:	6983      	ldr	r3, [r0, #24]
 8022022:	b90b      	cbnz	r3, 8022028 <_fflush_r+0x14>
 8022024:	f000 f860 	bl	80220e8 <__sinit>
 8022028:	4b0c      	ldr	r3, [pc, #48]	; (802205c <_fflush_r+0x48>)
 802202a:	429c      	cmp	r4, r3
 802202c:	d109      	bne.n	8022042 <_fflush_r+0x2e>
 802202e:	686c      	ldr	r4, [r5, #4]
 8022030:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022034:	b17b      	cbz	r3, 8022056 <_fflush_r+0x42>
 8022036:	4621      	mov	r1, r4
 8022038:	4628      	mov	r0, r5
 802203a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802203e:	f7ff bf63 	b.w	8021f08 <__sflush_r>
 8022042:	4b07      	ldr	r3, [pc, #28]	; (8022060 <_fflush_r+0x4c>)
 8022044:	429c      	cmp	r4, r3
 8022046:	d101      	bne.n	802204c <_fflush_r+0x38>
 8022048:	68ac      	ldr	r4, [r5, #8]
 802204a:	e7f1      	b.n	8022030 <_fflush_r+0x1c>
 802204c:	4b05      	ldr	r3, [pc, #20]	; (8022064 <_fflush_r+0x50>)
 802204e:	429c      	cmp	r4, r3
 8022050:	bf08      	it	eq
 8022052:	68ec      	ldreq	r4, [r5, #12]
 8022054:	e7ec      	b.n	8022030 <_fflush_r+0x1c>
 8022056:	2000      	movs	r0, #0
 8022058:	bd38      	pop	{r3, r4, r5, pc}
 802205a:	bf00      	nop
 802205c:	08027744 	.word	0x08027744
 8022060:	08027764 	.word	0x08027764
 8022064:	08027724 	.word	0x08027724

08022068 <std>:
 8022068:	2300      	movs	r3, #0
 802206a:	b510      	push	{r4, lr}
 802206c:	4604      	mov	r4, r0
 802206e:	e9c0 3300 	strd	r3, r3, [r0]
 8022072:	6083      	str	r3, [r0, #8]
 8022074:	8181      	strh	r1, [r0, #12]
 8022076:	6643      	str	r3, [r0, #100]	; 0x64
 8022078:	81c2      	strh	r2, [r0, #14]
 802207a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802207e:	6183      	str	r3, [r0, #24]
 8022080:	4619      	mov	r1, r3
 8022082:	2208      	movs	r2, #8
 8022084:	305c      	adds	r0, #92	; 0x5c
 8022086:	f7fe fb22 	bl	80206ce <memset>
 802208a:	4b05      	ldr	r3, [pc, #20]	; (80220a0 <std+0x38>)
 802208c:	6263      	str	r3, [r4, #36]	; 0x24
 802208e:	4b05      	ldr	r3, [pc, #20]	; (80220a4 <std+0x3c>)
 8022090:	62a3      	str	r3, [r4, #40]	; 0x28
 8022092:	4b05      	ldr	r3, [pc, #20]	; (80220a8 <std+0x40>)
 8022094:	62e3      	str	r3, [r4, #44]	; 0x2c
 8022096:	4b05      	ldr	r3, [pc, #20]	; (80220ac <std+0x44>)
 8022098:	6224      	str	r4, [r4, #32]
 802209a:	6323      	str	r3, [r4, #48]	; 0x30
 802209c:	bd10      	pop	{r4, pc}
 802209e:	bf00      	nop
 80220a0:	08022f59 	.word	0x08022f59
 80220a4:	08022f7b 	.word	0x08022f7b
 80220a8:	08022fb3 	.word	0x08022fb3
 80220ac:	08022fd7 	.word	0x08022fd7

080220b0 <_cleanup_r>:
 80220b0:	4901      	ldr	r1, [pc, #4]	; (80220b8 <_cleanup_r+0x8>)
 80220b2:	f000 b885 	b.w	80221c0 <_fwalk_reent>
 80220b6:	bf00      	nop
 80220b8:	08022015 	.word	0x08022015

080220bc <__sfmoreglue>:
 80220bc:	b570      	push	{r4, r5, r6, lr}
 80220be:	1e4a      	subs	r2, r1, #1
 80220c0:	2568      	movs	r5, #104	; 0x68
 80220c2:	4355      	muls	r5, r2
 80220c4:	460e      	mov	r6, r1
 80220c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80220ca:	f000 fc49 	bl	8022960 <_malloc_r>
 80220ce:	4604      	mov	r4, r0
 80220d0:	b140      	cbz	r0, 80220e4 <__sfmoreglue+0x28>
 80220d2:	2100      	movs	r1, #0
 80220d4:	e9c0 1600 	strd	r1, r6, [r0]
 80220d8:	300c      	adds	r0, #12
 80220da:	60a0      	str	r0, [r4, #8]
 80220dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80220e0:	f7fe faf5 	bl	80206ce <memset>
 80220e4:	4620      	mov	r0, r4
 80220e6:	bd70      	pop	{r4, r5, r6, pc}

080220e8 <__sinit>:
 80220e8:	6983      	ldr	r3, [r0, #24]
 80220ea:	b510      	push	{r4, lr}
 80220ec:	4604      	mov	r4, r0
 80220ee:	bb33      	cbnz	r3, 802213e <__sinit+0x56>
 80220f0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80220f4:	6503      	str	r3, [r0, #80]	; 0x50
 80220f6:	4b12      	ldr	r3, [pc, #72]	; (8022140 <__sinit+0x58>)
 80220f8:	4a12      	ldr	r2, [pc, #72]	; (8022144 <__sinit+0x5c>)
 80220fa:	681b      	ldr	r3, [r3, #0]
 80220fc:	6282      	str	r2, [r0, #40]	; 0x28
 80220fe:	4298      	cmp	r0, r3
 8022100:	bf04      	itt	eq
 8022102:	2301      	moveq	r3, #1
 8022104:	6183      	streq	r3, [r0, #24]
 8022106:	f000 f81f 	bl	8022148 <__sfp>
 802210a:	6060      	str	r0, [r4, #4]
 802210c:	4620      	mov	r0, r4
 802210e:	f000 f81b 	bl	8022148 <__sfp>
 8022112:	60a0      	str	r0, [r4, #8]
 8022114:	4620      	mov	r0, r4
 8022116:	f000 f817 	bl	8022148 <__sfp>
 802211a:	2200      	movs	r2, #0
 802211c:	60e0      	str	r0, [r4, #12]
 802211e:	2104      	movs	r1, #4
 8022120:	6860      	ldr	r0, [r4, #4]
 8022122:	f7ff ffa1 	bl	8022068 <std>
 8022126:	2201      	movs	r2, #1
 8022128:	2109      	movs	r1, #9
 802212a:	68a0      	ldr	r0, [r4, #8]
 802212c:	f7ff ff9c 	bl	8022068 <std>
 8022130:	2202      	movs	r2, #2
 8022132:	2112      	movs	r1, #18
 8022134:	68e0      	ldr	r0, [r4, #12]
 8022136:	f7ff ff97 	bl	8022068 <std>
 802213a:	2301      	movs	r3, #1
 802213c:	61a3      	str	r3, [r4, #24]
 802213e:	bd10      	pop	{r4, pc}
 8022140:	080275d4 	.word	0x080275d4
 8022144:	080220b1 	.word	0x080220b1

08022148 <__sfp>:
 8022148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802214a:	4b1b      	ldr	r3, [pc, #108]	; (80221b8 <__sfp+0x70>)
 802214c:	681e      	ldr	r6, [r3, #0]
 802214e:	69b3      	ldr	r3, [r6, #24]
 8022150:	4607      	mov	r7, r0
 8022152:	b913      	cbnz	r3, 802215a <__sfp+0x12>
 8022154:	4630      	mov	r0, r6
 8022156:	f7ff ffc7 	bl	80220e8 <__sinit>
 802215a:	3648      	adds	r6, #72	; 0x48
 802215c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8022160:	3b01      	subs	r3, #1
 8022162:	d503      	bpl.n	802216c <__sfp+0x24>
 8022164:	6833      	ldr	r3, [r6, #0]
 8022166:	b133      	cbz	r3, 8022176 <__sfp+0x2e>
 8022168:	6836      	ldr	r6, [r6, #0]
 802216a:	e7f7      	b.n	802215c <__sfp+0x14>
 802216c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8022170:	b16d      	cbz	r5, 802218e <__sfp+0x46>
 8022172:	3468      	adds	r4, #104	; 0x68
 8022174:	e7f4      	b.n	8022160 <__sfp+0x18>
 8022176:	2104      	movs	r1, #4
 8022178:	4638      	mov	r0, r7
 802217a:	f7ff ff9f 	bl	80220bc <__sfmoreglue>
 802217e:	6030      	str	r0, [r6, #0]
 8022180:	2800      	cmp	r0, #0
 8022182:	d1f1      	bne.n	8022168 <__sfp+0x20>
 8022184:	230c      	movs	r3, #12
 8022186:	603b      	str	r3, [r7, #0]
 8022188:	4604      	mov	r4, r0
 802218a:	4620      	mov	r0, r4
 802218c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802218e:	4b0b      	ldr	r3, [pc, #44]	; (80221bc <__sfp+0x74>)
 8022190:	6665      	str	r5, [r4, #100]	; 0x64
 8022192:	e9c4 5500 	strd	r5, r5, [r4]
 8022196:	60a5      	str	r5, [r4, #8]
 8022198:	e9c4 3503 	strd	r3, r5, [r4, #12]
 802219c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80221a0:	2208      	movs	r2, #8
 80221a2:	4629      	mov	r1, r5
 80221a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80221a8:	f7fe fa91 	bl	80206ce <memset>
 80221ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80221b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80221b4:	e7e9      	b.n	802218a <__sfp+0x42>
 80221b6:	bf00      	nop
 80221b8:	080275d4 	.word	0x080275d4
 80221bc:	ffff0001 	.word	0xffff0001

080221c0 <_fwalk_reent>:
 80221c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80221c4:	4680      	mov	r8, r0
 80221c6:	4689      	mov	r9, r1
 80221c8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80221cc:	2600      	movs	r6, #0
 80221ce:	b914      	cbnz	r4, 80221d6 <_fwalk_reent+0x16>
 80221d0:	4630      	mov	r0, r6
 80221d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80221d6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80221da:	3f01      	subs	r7, #1
 80221dc:	d501      	bpl.n	80221e2 <_fwalk_reent+0x22>
 80221de:	6824      	ldr	r4, [r4, #0]
 80221e0:	e7f5      	b.n	80221ce <_fwalk_reent+0xe>
 80221e2:	89ab      	ldrh	r3, [r5, #12]
 80221e4:	2b01      	cmp	r3, #1
 80221e6:	d907      	bls.n	80221f8 <_fwalk_reent+0x38>
 80221e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80221ec:	3301      	adds	r3, #1
 80221ee:	d003      	beq.n	80221f8 <_fwalk_reent+0x38>
 80221f0:	4629      	mov	r1, r5
 80221f2:	4640      	mov	r0, r8
 80221f4:	47c8      	blx	r9
 80221f6:	4306      	orrs	r6, r0
 80221f8:	3568      	adds	r5, #104	; 0x68
 80221fa:	e7ee      	b.n	80221da <_fwalk_reent+0x1a>

080221fc <_localeconv_r>:
 80221fc:	4b04      	ldr	r3, [pc, #16]	; (8022210 <_localeconv_r+0x14>)
 80221fe:	681b      	ldr	r3, [r3, #0]
 8022200:	6a18      	ldr	r0, [r3, #32]
 8022202:	4b04      	ldr	r3, [pc, #16]	; (8022214 <_localeconv_r+0x18>)
 8022204:	2800      	cmp	r0, #0
 8022206:	bf08      	it	eq
 8022208:	4618      	moveq	r0, r3
 802220a:	30f0      	adds	r0, #240	; 0xf0
 802220c:	4770      	bx	lr
 802220e:	bf00      	nop
 8022210:	24000040 	.word	0x24000040
 8022214:	240000a4 	.word	0x240000a4

08022218 <__swhatbuf_r>:
 8022218:	b570      	push	{r4, r5, r6, lr}
 802221a:	460e      	mov	r6, r1
 802221c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022220:	2900      	cmp	r1, #0
 8022222:	b096      	sub	sp, #88	; 0x58
 8022224:	4614      	mov	r4, r2
 8022226:	461d      	mov	r5, r3
 8022228:	da07      	bge.n	802223a <__swhatbuf_r+0x22>
 802222a:	2300      	movs	r3, #0
 802222c:	602b      	str	r3, [r5, #0]
 802222e:	89b3      	ldrh	r3, [r6, #12]
 8022230:	061a      	lsls	r2, r3, #24
 8022232:	d410      	bmi.n	8022256 <__swhatbuf_r+0x3e>
 8022234:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8022238:	e00e      	b.n	8022258 <__swhatbuf_r+0x40>
 802223a:	466a      	mov	r2, sp
 802223c:	f000 fef2 	bl	8023024 <_fstat_r>
 8022240:	2800      	cmp	r0, #0
 8022242:	dbf2      	blt.n	802222a <__swhatbuf_r+0x12>
 8022244:	9a01      	ldr	r2, [sp, #4]
 8022246:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802224a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802224e:	425a      	negs	r2, r3
 8022250:	415a      	adcs	r2, r3
 8022252:	602a      	str	r2, [r5, #0]
 8022254:	e7ee      	b.n	8022234 <__swhatbuf_r+0x1c>
 8022256:	2340      	movs	r3, #64	; 0x40
 8022258:	2000      	movs	r0, #0
 802225a:	6023      	str	r3, [r4, #0]
 802225c:	b016      	add	sp, #88	; 0x58
 802225e:	bd70      	pop	{r4, r5, r6, pc}

08022260 <__smakebuf_r>:
 8022260:	898b      	ldrh	r3, [r1, #12]
 8022262:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8022264:	079d      	lsls	r5, r3, #30
 8022266:	4606      	mov	r6, r0
 8022268:	460c      	mov	r4, r1
 802226a:	d507      	bpl.n	802227c <__smakebuf_r+0x1c>
 802226c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8022270:	6023      	str	r3, [r4, #0]
 8022272:	6123      	str	r3, [r4, #16]
 8022274:	2301      	movs	r3, #1
 8022276:	6163      	str	r3, [r4, #20]
 8022278:	b002      	add	sp, #8
 802227a:	bd70      	pop	{r4, r5, r6, pc}
 802227c:	ab01      	add	r3, sp, #4
 802227e:	466a      	mov	r2, sp
 8022280:	f7ff ffca 	bl	8022218 <__swhatbuf_r>
 8022284:	9900      	ldr	r1, [sp, #0]
 8022286:	4605      	mov	r5, r0
 8022288:	4630      	mov	r0, r6
 802228a:	f000 fb69 	bl	8022960 <_malloc_r>
 802228e:	b948      	cbnz	r0, 80222a4 <__smakebuf_r+0x44>
 8022290:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022294:	059a      	lsls	r2, r3, #22
 8022296:	d4ef      	bmi.n	8022278 <__smakebuf_r+0x18>
 8022298:	f023 0303 	bic.w	r3, r3, #3
 802229c:	f043 0302 	orr.w	r3, r3, #2
 80222a0:	81a3      	strh	r3, [r4, #12]
 80222a2:	e7e3      	b.n	802226c <__smakebuf_r+0xc>
 80222a4:	4b0d      	ldr	r3, [pc, #52]	; (80222dc <__smakebuf_r+0x7c>)
 80222a6:	62b3      	str	r3, [r6, #40]	; 0x28
 80222a8:	89a3      	ldrh	r3, [r4, #12]
 80222aa:	6020      	str	r0, [r4, #0]
 80222ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80222b0:	81a3      	strh	r3, [r4, #12]
 80222b2:	9b00      	ldr	r3, [sp, #0]
 80222b4:	6163      	str	r3, [r4, #20]
 80222b6:	9b01      	ldr	r3, [sp, #4]
 80222b8:	6120      	str	r0, [r4, #16]
 80222ba:	b15b      	cbz	r3, 80222d4 <__smakebuf_r+0x74>
 80222bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80222c0:	4630      	mov	r0, r6
 80222c2:	f000 fec1 	bl	8023048 <_isatty_r>
 80222c6:	b128      	cbz	r0, 80222d4 <__smakebuf_r+0x74>
 80222c8:	89a3      	ldrh	r3, [r4, #12]
 80222ca:	f023 0303 	bic.w	r3, r3, #3
 80222ce:	f043 0301 	orr.w	r3, r3, #1
 80222d2:	81a3      	strh	r3, [r4, #12]
 80222d4:	89a3      	ldrh	r3, [r4, #12]
 80222d6:	431d      	orrs	r5, r3
 80222d8:	81a5      	strh	r5, [r4, #12]
 80222da:	e7cd      	b.n	8022278 <__smakebuf_r+0x18>
 80222dc:	080220b1 	.word	0x080220b1

080222e0 <malloc>:
 80222e0:	4b02      	ldr	r3, [pc, #8]	; (80222ec <malloc+0xc>)
 80222e2:	4601      	mov	r1, r0
 80222e4:	6818      	ldr	r0, [r3, #0]
 80222e6:	f000 bb3b 	b.w	8022960 <_malloc_r>
 80222ea:	bf00      	nop
 80222ec:	24000040 	.word	0x24000040

080222f0 <_Balloc>:
 80222f0:	b570      	push	{r4, r5, r6, lr}
 80222f2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80222f4:	4604      	mov	r4, r0
 80222f6:	460e      	mov	r6, r1
 80222f8:	b93d      	cbnz	r5, 802230a <_Balloc+0x1a>
 80222fa:	2010      	movs	r0, #16
 80222fc:	f7ff fff0 	bl	80222e0 <malloc>
 8022300:	6260      	str	r0, [r4, #36]	; 0x24
 8022302:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8022306:	6005      	str	r5, [r0, #0]
 8022308:	60c5      	str	r5, [r0, #12]
 802230a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 802230c:	68eb      	ldr	r3, [r5, #12]
 802230e:	b183      	cbz	r3, 8022332 <_Balloc+0x42>
 8022310:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8022312:	68db      	ldr	r3, [r3, #12]
 8022314:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8022318:	b9b8      	cbnz	r0, 802234a <_Balloc+0x5a>
 802231a:	2101      	movs	r1, #1
 802231c:	fa01 f506 	lsl.w	r5, r1, r6
 8022320:	1d6a      	adds	r2, r5, #5
 8022322:	0092      	lsls	r2, r2, #2
 8022324:	4620      	mov	r0, r4
 8022326:	f000 fabf 	bl	80228a8 <_calloc_r>
 802232a:	b160      	cbz	r0, 8022346 <_Balloc+0x56>
 802232c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8022330:	e00e      	b.n	8022350 <_Balloc+0x60>
 8022332:	2221      	movs	r2, #33	; 0x21
 8022334:	2104      	movs	r1, #4
 8022336:	4620      	mov	r0, r4
 8022338:	f000 fab6 	bl	80228a8 <_calloc_r>
 802233c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802233e:	60e8      	str	r0, [r5, #12]
 8022340:	68db      	ldr	r3, [r3, #12]
 8022342:	2b00      	cmp	r3, #0
 8022344:	d1e4      	bne.n	8022310 <_Balloc+0x20>
 8022346:	2000      	movs	r0, #0
 8022348:	bd70      	pop	{r4, r5, r6, pc}
 802234a:	6802      	ldr	r2, [r0, #0]
 802234c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8022350:	2300      	movs	r3, #0
 8022352:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8022356:	e7f7      	b.n	8022348 <_Balloc+0x58>

08022358 <_Bfree>:
 8022358:	b570      	push	{r4, r5, r6, lr}
 802235a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 802235c:	4606      	mov	r6, r0
 802235e:	460d      	mov	r5, r1
 8022360:	b93c      	cbnz	r4, 8022372 <_Bfree+0x1a>
 8022362:	2010      	movs	r0, #16
 8022364:	f7ff ffbc 	bl	80222e0 <malloc>
 8022368:	6270      	str	r0, [r6, #36]	; 0x24
 802236a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 802236e:	6004      	str	r4, [r0, #0]
 8022370:	60c4      	str	r4, [r0, #12]
 8022372:	b13d      	cbz	r5, 8022384 <_Bfree+0x2c>
 8022374:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8022376:	686a      	ldr	r2, [r5, #4]
 8022378:	68db      	ldr	r3, [r3, #12]
 802237a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 802237e:	6029      	str	r1, [r5, #0]
 8022380:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8022384:	bd70      	pop	{r4, r5, r6, pc}

08022386 <__multadd>:
 8022386:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802238a:	690d      	ldr	r5, [r1, #16]
 802238c:	461f      	mov	r7, r3
 802238e:	4606      	mov	r6, r0
 8022390:	460c      	mov	r4, r1
 8022392:	f101 0c14 	add.w	ip, r1, #20
 8022396:	2300      	movs	r3, #0
 8022398:	f8dc 0000 	ldr.w	r0, [ip]
 802239c:	b281      	uxth	r1, r0
 802239e:	fb02 7101 	mla	r1, r2, r1, r7
 80223a2:	0c0f      	lsrs	r7, r1, #16
 80223a4:	0c00      	lsrs	r0, r0, #16
 80223a6:	fb02 7000 	mla	r0, r2, r0, r7
 80223aa:	b289      	uxth	r1, r1
 80223ac:	3301      	adds	r3, #1
 80223ae:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80223b2:	429d      	cmp	r5, r3
 80223b4:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80223b8:	f84c 1b04 	str.w	r1, [ip], #4
 80223bc:	dcec      	bgt.n	8022398 <__multadd+0x12>
 80223be:	b1d7      	cbz	r7, 80223f6 <__multadd+0x70>
 80223c0:	68a3      	ldr	r3, [r4, #8]
 80223c2:	42ab      	cmp	r3, r5
 80223c4:	dc12      	bgt.n	80223ec <__multadd+0x66>
 80223c6:	6861      	ldr	r1, [r4, #4]
 80223c8:	4630      	mov	r0, r6
 80223ca:	3101      	adds	r1, #1
 80223cc:	f7ff ff90 	bl	80222f0 <_Balloc>
 80223d0:	6922      	ldr	r2, [r4, #16]
 80223d2:	3202      	adds	r2, #2
 80223d4:	f104 010c 	add.w	r1, r4, #12
 80223d8:	4680      	mov	r8, r0
 80223da:	0092      	lsls	r2, r2, #2
 80223dc:	300c      	adds	r0, #12
 80223de:	f7fe f952 	bl	8020686 <memcpy>
 80223e2:	4621      	mov	r1, r4
 80223e4:	4630      	mov	r0, r6
 80223e6:	f7ff ffb7 	bl	8022358 <_Bfree>
 80223ea:	4644      	mov	r4, r8
 80223ec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80223f0:	3501      	adds	r5, #1
 80223f2:	615f      	str	r7, [r3, #20]
 80223f4:	6125      	str	r5, [r4, #16]
 80223f6:	4620      	mov	r0, r4
 80223f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080223fc <__hi0bits>:
 80223fc:	0c02      	lsrs	r2, r0, #16
 80223fe:	0412      	lsls	r2, r2, #16
 8022400:	4603      	mov	r3, r0
 8022402:	b9b2      	cbnz	r2, 8022432 <__hi0bits+0x36>
 8022404:	0403      	lsls	r3, r0, #16
 8022406:	2010      	movs	r0, #16
 8022408:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 802240c:	bf04      	itt	eq
 802240e:	021b      	lsleq	r3, r3, #8
 8022410:	3008      	addeq	r0, #8
 8022412:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8022416:	bf04      	itt	eq
 8022418:	011b      	lsleq	r3, r3, #4
 802241a:	3004      	addeq	r0, #4
 802241c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8022420:	bf04      	itt	eq
 8022422:	009b      	lsleq	r3, r3, #2
 8022424:	3002      	addeq	r0, #2
 8022426:	2b00      	cmp	r3, #0
 8022428:	db06      	blt.n	8022438 <__hi0bits+0x3c>
 802242a:	005b      	lsls	r3, r3, #1
 802242c:	d503      	bpl.n	8022436 <__hi0bits+0x3a>
 802242e:	3001      	adds	r0, #1
 8022430:	4770      	bx	lr
 8022432:	2000      	movs	r0, #0
 8022434:	e7e8      	b.n	8022408 <__hi0bits+0xc>
 8022436:	2020      	movs	r0, #32
 8022438:	4770      	bx	lr

0802243a <__lo0bits>:
 802243a:	6803      	ldr	r3, [r0, #0]
 802243c:	f013 0207 	ands.w	r2, r3, #7
 8022440:	4601      	mov	r1, r0
 8022442:	d00b      	beq.n	802245c <__lo0bits+0x22>
 8022444:	07da      	lsls	r2, r3, #31
 8022446:	d423      	bmi.n	8022490 <__lo0bits+0x56>
 8022448:	0798      	lsls	r0, r3, #30
 802244a:	bf49      	itett	mi
 802244c:	085b      	lsrmi	r3, r3, #1
 802244e:	089b      	lsrpl	r3, r3, #2
 8022450:	2001      	movmi	r0, #1
 8022452:	600b      	strmi	r3, [r1, #0]
 8022454:	bf5c      	itt	pl
 8022456:	600b      	strpl	r3, [r1, #0]
 8022458:	2002      	movpl	r0, #2
 802245a:	4770      	bx	lr
 802245c:	b298      	uxth	r0, r3
 802245e:	b9a8      	cbnz	r0, 802248c <__lo0bits+0x52>
 8022460:	0c1b      	lsrs	r3, r3, #16
 8022462:	2010      	movs	r0, #16
 8022464:	f013 0fff 	tst.w	r3, #255	; 0xff
 8022468:	bf04      	itt	eq
 802246a:	0a1b      	lsreq	r3, r3, #8
 802246c:	3008      	addeq	r0, #8
 802246e:	071a      	lsls	r2, r3, #28
 8022470:	bf04      	itt	eq
 8022472:	091b      	lsreq	r3, r3, #4
 8022474:	3004      	addeq	r0, #4
 8022476:	079a      	lsls	r2, r3, #30
 8022478:	bf04      	itt	eq
 802247a:	089b      	lsreq	r3, r3, #2
 802247c:	3002      	addeq	r0, #2
 802247e:	07da      	lsls	r2, r3, #31
 8022480:	d402      	bmi.n	8022488 <__lo0bits+0x4e>
 8022482:	085b      	lsrs	r3, r3, #1
 8022484:	d006      	beq.n	8022494 <__lo0bits+0x5a>
 8022486:	3001      	adds	r0, #1
 8022488:	600b      	str	r3, [r1, #0]
 802248a:	4770      	bx	lr
 802248c:	4610      	mov	r0, r2
 802248e:	e7e9      	b.n	8022464 <__lo0bits+0x2a>
 8022490:	2000      	movs	r0, #0
 8022492:	4770      	bx	lr
 8022494:	2020      	movs	r0, #32
 8022496:	4770      	bx	lr

08022498 <__i2b>:
 8022498:	b510      	push	{r4, lr}
 802249a:	460c      	mov	r4, r1
 802249c:	2101      	movs	r1, #1
 802249e:	f7ff ff27 	bl	80222f0 <_Balloc>
 80224a2:	2201      	movs	r2, #1
 80224a4:	6144      	str	r4, [r0, #20]
 80224a6:	6102      	str	r2, [r0, #16]
 80224a8:	bd10      	pop	{r4, pc}

080224aa <__multiply>:
 80224aa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80224ae:	4614      	mov	r4, r2
 80224b0:	690a      	ldr	r2, [r1, #16]
 80224b2:	6923      	ldr	r3, [r4, #16]
 80224b4:	429a      	cmp	r2, r3
 80224b6:	bfb8      	it	lt
 80224b8:	460b      	movlt	r3, r1
 80224ba:	4688      	mov	r8, r1
 80224bc:	bfbc      	itt	lt
 80224be:	46a0      	movlt	r8, r4
 80224c0:	461c      	movlt	r4, r3
 80224c2:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80224c6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80224ca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80224ce:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80224d2:	eb07 0609 	add.w	r6, r7, r9
 80224d6:	42b3      	cmp	r3, r6
 80224d8:	bfb8      	it	lt
 80224da:	3101      	addlt	r1, #1
 80224dc:	f7ff ff08 	bl	80222f0 <_Balloc>
 80224e0:	f100 0514 	add.w	r5, r0, #20
 80224e4:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80224e8:	462b      	mov	r3, r5
 80224ea:	2200      	movs	r2, #0
 80224ec:	4573      	cmp	r3, lr
 80224ee:	d316      	bcc.n	802251e <__multiply+0x74>
 80224f0:	f104 0214 	add.w	r2, r4, #20
 80224f4:	f108 0114 	add.w	r1, r8, #20
 80224f8:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80224fc:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8022500:	9300      	str	r3, [sp, #0]
 8022502:	9b00      	ldr	r3, [sp, #0]
 8022504:	9201      	str	r2, [sp, #4]
 8022506:	4293      	cmp	r3, r2
 8022508:	d80c      	bhi.n	8022524 <__multiply+0x7a>
 802250a:	2e00      	cmp	r6, #0
 802250c:	dd03      	ble.n	8022516 <__multiply+0x6c>
 802250e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8022512:	2b00      	cmp	r3, #0
 8022514:	d05d      	beq.n	80225d2 <__multiply+0x128>
 8022516:	6106      	str	r6, [r0, #16]
 8022518:	b003      	add	sp, #12
 802251a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802251e:	f843 2b04 	str.w	r2, [r3], #4
 8022522:	e7e3      	b.n	80224ec <__multiply+0x42>
 8022524:	f8b2 b000 	ldrh.w	fp, [r2]
 8022528:	f1bb 0f00 	cmp.w	fp, #0
 802252c:	d023      	beq.n	8022576 <__multiply+0xcc>
 802252e:	4689      	mov	r9, r1
 8022530:	46ac      	mov	ip, r5
 8022532:	f04f 0800 	mov.w	r8, #0
 8022536:	f859 4b04 	ldr.w	r4, [r9], #4
 802253a:	f8dc a000 	ldr.w	sl, [ip]
 802253e:	b2a3      	uxth	r3, r4
 8022540:	fa1f fa8a 	uxth.w	sl, sl
 8022544:	fb0b a303 	mla	r3, fp, r3, sl
 8022548:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 802254c:	f8dc 4000 	ldr.w	r4, [ip]
 8022550:	4443      	add	r3, r8
 8022552:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8022556:	fb0b 840a 	mla	r4, fp, sl, r8
 802255a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 802255e:	46e2      	mov	sl, ip
 8022560:	b29b      	uxth	r3, r3
 8022562:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8022566:	454f      	cmp	r7, r9
 8022568:	ea4f 4814 	mov.w	r8, r4, lsr #16
 802256c:	f84a 3b04 	str.w	r3, [sl], #4
 8022570:	d82b      	bhi.n	80225ca <__multiply+0x120>
 8022572:	f8cc 8004 	str.w	r8, [ip, #4]
 8022576:	9b01      	ldr	r3, [sp, #4]
 8022578:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 802257c:	3204      	adds	r2, #4
 802257e:	f1ba 0f00 	cmp.w	sl, #0
 8022582:	d020      	beq.n	80225c6 <__multiply+0x11c>
 8022584:	682b      	ldr	r3, [r5, #0]
 8022586:	4689      	mov	r9, r1
 8022588:	46a8      	mov	r8, r5
 802258a:	f04f 0b00 	mov.w	fp, #0
 802258e:	f8b9 c000 	ldrh.w	ip, [r9]
 8022592:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8022596:	fb0a 440c 	mla	r4, sl, ip, r4
 802259a:	445c      	add	r4, fp
 802259c:	46c4      	mov	ip, r8
 802259e:	b29b      	uxth	r3, r3
 80225a0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80225a4:	f84c 3b04 	str.w	r3, [ip], #4
 80225a8:	f859 3b04 	ldr.w	r3, [r9], #4
 80225ac:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80225b0:	0c1b      	lsrs	r3, r3, #16
 80225b2:	fb0a b303 	mla	r3, sl, r3, fp
 80225b6:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80225ba:	454f      	cmp	r7, r9
 80225bc:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80225c0:	d805      	bhi.n	80225ce <__multiply+0x124>
 80225c2:	f8c8 3004 	str.w	r3, [r8, #4]
 80225c6:	3504      	adds	r5, #4
 80225c8:	e79b      	b.n	8022502 <__multiply+0x58>
 80225ca:	46d4      	mov	ip, sl
 80225cc:	e7b3      	b.n	8022536 <__multiply+0x8c>
 80225ce:	46e0      	mov	r8, ip
 80225d0:	e7dd      	b.n	802258e <__multiply+0xe4>
 80225d2:	3e01      	subs	r6, #1
 80225d4:	e799      	b.n	802250a <__multiply+0x60>
	...

080225d8 <__pow5mult>:
 80225d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80225dc:	4615      	mov	r5, r2
 80225de:	f012 0203 	ands.w	r2, r2, #3
 80225e2:	4606      	mov	r6, r0
 80225e4:	460f      	mov	r7, r1
 80225e6:	d007      	beq.n	80225f8 <__pow5mult+0x20>
 80225e8:	3a01      	subs	r2, #1
 80225ea:	4c21      	ldr	r4, [pc, #132]	; (8022670 <__pow5mult+0x98>)
 80225ec:	2300      	movs	r3, #0
 80225ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80225f2:	f7ff fec8 	bl	8022386 <__multadd>
 80225f6:	4607      	mov	r7, r0
 80225f8:	10ad      	asrs	r5, r5, #2
 80225fa:	d035      	beq.n	8022668 <__pow5mult+0x90>
 80225fc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80225fe:	b93c      	cbnz	r4, 8022610 <__pow5mult+0x38>
 8022600:	2010      	movs	r0, #16
 8022602:	f7ff fe6d 	bl	80222e0 <malloc>
 8022606:	6270      	str	r0, [r6, #36]	; 0x24
 8022608:	e9c0 4401 	strd	r4, r4, [r0, #4]
 802260c:	6004      	str	r4, [r0, #0]
 802260e:	60c4      	str	r4, [r0, #12]
 8022610:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8022614:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8022618:	b94c      	cbnz	r4, 802262e <__pow5mult+0x56>
 802261a:	f240 2171 	movw	r1, #625	; 0x271
 802261e:	4630      	mov	r0, r6
 8022620:	f7ff ff3a 	bl	8022498 <__i2b>
 8022624:	2300      	movs	r3, #0
 8022626:	f8c8 0008 	str.w	r0, [r8, #8]
 802262a:	4604      	mov	r4, r0
 802262c:	6003      	str	r3, [r0, #0]
 802262e:	f04f 0800 	mov.w	r8, #0
 8022632:	07eb      	lsls	r3, r5, #31
 8022634:	d50a      	bpl.n	802264c <__pow5mult+0x74>
 8022636:	4639      	mov	r1, r7
 8022638:	4622      	mov	r2, r4
 802263a:	4630      	mov	r0, r6
 802263c:	f7ff ff35 	bl	80224aa <__multiply>
 8022640:	4639      	mov	r1, r7
 8022642:	4681      	mov	r9, r0
 8022644:	4630      	mov	r0, r6
 8022646:	f7ff fe87 	bl	8022358 <_Bfree>
 802264a:	464f      	mov	r7, r9
 802264c:	106d      	asrs	r5, r5, #1
 802264e:	d00b      	beq.n	8022668 <__pow5mult+0x90>
 8022650:	6820      	ldr	r0, [r4, #0]
 8022652:	b938      	cbnz	r0, 8022664 <__pow5mult+0x8c>
 8022654:	4622      	mov	r2, r4
 8022656:	4621      	mov	r1, r4
 8022658:	4630      	mov	r0, r6
 802265a:	f7ff ff26 	bl	80224aa <__multiply>
 802265e:	6020      	str	r0, [r4, #0]
 8022660:	f8c0 8000 	str.w	r8, [r0]
 8022664:	4604      	mov	r4, r0
 8022666:	e7e4      	b.n	8022632 <__pow5mult+0x5a>
 8022668:	4638      	mov	r0, r7
 802266a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802266e:	bf00      	nop
 8022670:	08027878 	.word	0x08027878

08022674 <__lshift>:
 8022674:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022678:	460c      	mov	r4, r1
 802267a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 802267e:	6923      	ldr	r3, [r4, #16]
 8022680:	6849      	ldr	r1, [r1, #4]
 8022682:	eb0a 0903 	add.w	r9, sl, r3
 8022686:	68a3      	ldr	r3, [r4, #8]
 8022688:	4607      	mov	r7, r0
 802268a:	4616      	mov	r6, r2
 802268c:	f109 0501 	add.w	r5, r9, #1
 8022690:	42ab      	cmp	r3, r5
 8022692:	db32      	blt.n	80226fa <__lshift+0x86>
 8022694:	4638      	mov	r0, r7
 8022696:	f7ff fe2b 	bl	80222f0 <_Balloc>
 802269a:	2300      	movs	r3, #0
 802269c:	4680      	mov	r8, r0
 802269e:	f100 0114 	add.w	r1, r0, #20
 80226a2:	461a      	mov	r2, r3
 80226a4:	4553      	cmp	r3, sl
 80226a6:	db2b      	blt.n	8022700 <__lshift+0x8c>
 80226a8:	6920      	ldr	r0, [r4, #16]
 80226aa:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80226ae:	f104 0314 	add.w	r3, r4, #20
 80226b2:	f016 021f 	ands.w	r2, r6, #31
 80226b6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80226ba:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80226be:	d025      	beq.n	802270c <__lshift+0x98>
 80226c0:	f1c2 0e20 	rsb	lr, r2, #32
 80226c4:	2000      	movs	r0, #0
 80226c6:	681e      	ldr	r6, [r3, #0]
 80226c8:	468a      	mov	sl, r1
 80226ca:	4096      	lsls	r6, r2
 80226cc:	4330      	orrs	r0, r6
 80226ce:	f84a 0b04 	str.w	r0, [sl], #4
 80226d2:	f853 0b04 	ldr.w	r0, [r3], #4
 80226d6:	459c      	cmp	ip, r3
 80226d8:	fa20 f00e 	lsr.w	r0, r0, lr
 80226dc:	d814      	bhi.n	8022708 <__lshift+0x94>
 80226de:	6048      	str	r0, [r1, #4]
 80226e0:	b108      	cbz	r0, 80226e6 <__lshift+0x72>
 80226e2:	f109 0502 	add.w	r5, r9, #2
 80226e6:	3d01      	subs	r5, #1
 80226e8:	4638      	mov	r0, r7
 80226ea:	f8c8 5010 	str.w	r5, [r8, #16]
 80226ee:	4621      	mov	r1, r4
 80226f0:	f7ff fe32 	bl	8022358 <_Bfree>
 80226f4:	4640      	mov	r0, r8
 80226f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80226fa:	3101      	adds	r1, #1
 80226fc:	005b      	lsls	r3, r3, #1
 80226fe:	e7c7      	b.n	8022690 <__lshift+0x1c>
 8022700:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8022704:	3301      	adds	r3, #1
 8022706:	e7cd      	b.n	80226a4 <__lshift+0x30>
 8022708:	4651      	mov	r1, sl
 802270a:	e7dc      	b.n	80226c6 <__lshift+0x52>
 802270c:	3904      	subs	r1, #4
 802270e:	f853 2b04 	ldr.w	r2, [r3], #4
 8022712:	f841 2f04 	str.w	r2, [r1, #4]!
 8022716:	459c      	cmp	ip, r3
 8022718:	d8f9      	bhi.n	802270e <__lshift+0x9a>
 802271a:	e7e4      	b.n	80226e6 <__lshift+0x72>

0802271c <__mcmp>:
 802271c:	6903      	ldr	r3, [r0, #16]
 802271e:	690a      	ldr	r2, [r1, #16]
 8022720:	1a9b      	subs	r3, r3, r2
 8022722:	b530      	push	{r4, r5, lr}
 8022724:	d10c      	bne.n	8022740 <__mcmp+0x24>
 8022726:	0092      	lsls	r2, r2, #2
 8022728:	3014      	adds	r0, #20
 802272a:	3114      	adds	r1, #20
 802272c:	1884      	adds	r4, r0, r2
 802272e:	4411      	add	r1, r2
 8022730:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8022734:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8022738:	4295      	cmp	r5, r2
 802273a:	d003      	beq.n	8022744 <__mcmp+0x28>
 802273c:	d305      	bcc.n	802274a <__mcmp+0x2e>
 802273e:	2301      	movs	r3, #1
 8022740:	4618      	mov	r0, r3
 8022742:	bd30      	pop	{r4, r5, pc}
 8022744:	42a0      	cmp	r0, r4
 8022746:	d3f3      	bcc.n	8022730 <__mcmp+0x14>
 8022748:	e7fa      	b.n	8022740 <__mcmp+0x24>
 802274a:	f04f 33ff 	mov.w	r3, #4294967295
 802274e:	e7f7      	b.n	8022740 <__mcmp+0x24>

08022750 <__mdiff>:
 8022750:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022754:	460d      	mov	r5, r1
 8022756:	4607      	mov	r7, r0
 8022758:	4611      	mov	r1, r2
 802275a:	4628      	mov	r0, r5
 802275c:	4614      	mov	r4, r2
 802275e:	f7ff ffdd 	bl	802271c <__mcmp>
 8022762:	1e06      	subs	r6, r0, #0
 8022764:	d108      	bne.n	8022778 <__mdiff+0x28>
 8022766:	4631      	mov	r1, r6
 8022768:	4638      	mov	r0, r7
 802276a:	f7ff fdc1 	bl	80222f0 <_Balloc>
 802276e:	2301      	movs	r3, #1
 8022770:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8022774:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022778:	bfa4      	itt	ge
 802277a:	4623      	movge	r3, r4
 802277c:	462c      	movge	r4, r5
 802277e:	4638      	mov	r0, r7
 8022780:	6861      	ldr	r1, [r4, #4]
 8022782:	bfa6      	itte	ge
 8022784:	461d      	movge	r5, r3
 8022786:	2600      	movge	r6, #0
 8022788:	2601      	movlt	r6, #1
 802278a:	f7ff fdb1 	bl	80222f0 <_Balloc>
 802278e:	692b      	ldr	r3, [r5, #16]
 8022790:	60c6      	str	r6, [r0, #12]
 8022792:	6926      	ldr	r6, [r4, #16]
 8022794:	f105 0914 	add.w	r9, r5, #20
 8022798:	f104 0214 	add.w	r2, r4, #20
 802279c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80227a0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80227a4:	f100 0514 	add.w	r5, r0, #20
 80227a8:	f04f 0e00 	mov.w	lr, #0
 80227ac:	f852 ab04 	ldr.w	sl, [r2], #4
 80227b0:	f859 4b04 	ldr.w	r4, [r9], #4
 80227b4:	fa1e f18a 	uxtah	r1, lr, sl
 80227b8:	b2a3      	uxth	r3, r4
 80227ba:	1ac9      	subs	r1, r1, r3
 80227bc:	0c23      	lsrs	r3, r4, #16
 80227be:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80227c2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80227c6:	b289      	uxth	r1, r1
 80227c8:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80227cc:	45c8      	cmp	r8, r9
 80227ce:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80227d2:	4694      	mov	ip, r2
 80227d4:	f845 3b04 	str.w	r3, [r5], #4
 80227d8:	d8e8      	bhi.n	80227ac <__mdiff+0x5c>
 80227da:	45bc      	cmp	ip, r7
 80227dc:	d304      	bcc.n	80227e8 <__mdiff+0x98>
 80227de:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80227e2:	b183      	cbz	r3, 8022806 <__mdiff+0xb6>
 80227e4:	6106      	str	r6, [r0, #16]
 80227e6:	e7c5      	b.n	8022774 <__mdiff+0x24>
 80227e8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80227ec:	fa1e f381 	uxtah	r3, lr, r1
 80227f0:	141a      	asrs	r2, r3, #16
 80227f2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80227f6:	b29b      	uxth	r3, r3
 80227f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80227fc:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8022800:	f845 3b04 	str.w	r3, [r5], #4
 8022804:	e7e9      	b.n	80227da <__mdiff+0x8a>
 8022806:	3e01      	subs	r6, #1
 8022808:	e7e9      	b.n	80227de <__mdiff+0x8e>

0802280a <__d2b>:
 802280a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 802280e:	460e      	mov	r6, r1
 8022810:	2101      	movs	r1, #1
 8022812:	ec59 8b10 	vmov	r8, r9, d0
 8022816:	4615      	mov	r5, r2
 8022818:	f7ff fd6a 	bl	80222f0 <_Balloc>
 802281c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8022820:	4607      	mov	r7, r0
 8022822:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8022826:	bb34      	cbnz	r4, 8022876 <__d2b+0x6c>
 8022828:	9301      	str	r3, [sp, #4]
 802282a:	f1b8 0300 	subs.w	r3, r8, #0
 802282e:	d027      	beq.n	8022880 <__d2b+0x76>
 8022830:	a802      	add	r0, sp, #8
 8022832:	f840 3d08 	str.w	r3, [r0, #-8]!
 8022836:	f7ff fe00 	bl	802243a <__lo0bits>
 802283a:	9900      	ldr	r1, [sp, #0]
 802283c:	b1f0      	cbz	r0, 802287c <__d2b+0x72>
 802283e:	9a01      	ldr	r2, [sp, #4]
 8022840:	f1c0 0320 	rsb	r3, r0, #32
 8022844:	fa02 f303 	lsl.w	r3, r2, r3
 8022848:	430b      	orrs	r3, r1
 802284a:	40c2      	lsrs	r2, r0
 802284c:	617b      	str	r3, [r7, #20]
 802284e:	9201      	str	r2, [sp, #4]
 8022850:	9b01      	ldr	r3, [sp, #4]
 8022852:	61bb      	str	r3, [r7, #24]
 8022854:	2b00      	cmp	r3, #0
 8022856:	bf14      	ite	ne
 8022858:	2102      	movne	r1, #2
 802285a:	2101      	moveq	r1, #1
 802285c:	6139      	str	r1, [r7, #16]
 802285e:	b1c4      	cbz	r4, 8022892 <__d2b+0x88>
 8022860:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8022864:	4404      	add	r4, r0
 8022866:	6034      	str	r4, [r6, #0]
 8022868:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 802286c:	6028      	str	r0, [r5, #0]
 802286e:	4638      	mov	r0, r7
 8022870:	b003      	add	sp, #12
 8022872:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8022876:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802287a:	e7d5      	b.n	8022828 <__d2b+0x1e>
 802287c:	6179      	str	r1, [r7, #20]
 802287e:	e7e7      	b.n	8022850 <__d2b+0x46>
 8022880:	a801      	add	r0, sp, #4
 8022882:	f7ff fdda 	bl	802243a <__lo0bits>
 8022886:	9b01      	ldr	r3, [sp, #4]
 8022888:	617b      	str	r3, [r7, #20]
 802288a:	2101      	movs	r1, #1
 802288c:	6139      	str	r1, [r7, #16]
 802288e:	3020      	adds	r0, #32
 8022890:	e7e5      	b.n	802285e <__d2b+0x54>
 8022892:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8022896:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 802289a:	6030      	str	r0, [r6, #0]
 802289c:	6918      	ldr	r0, [r3, #16]
 802289e:	f7ff fdad 	bl	80223fc <__hi0bits>
 80228a2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80228a6:	e7e1      	b.n	802286c <__d2b+0x62>

080228a8 <_calloc_r>:
 80228a8:	b538      	push	{r3, r4, r5, lr}
 80228aa:	fb02 f401 	mul.w	r4, r2, r1
 80228ae:	4621      	mov	r1, r4
 80228b0:	f000 f856 	bl	8022960 <_malloc_r>
 80228b4:	4605      	mov	r5, r0
 80228b6:	b118      	cbz	r0, 80228c0 <_calloc_r+0x18>
 80228b8:	4622      	mov	r2, r4
 80228ba:	2100      	movs	r1, #0
 80228bc:	f7fd ff07 	bl	80206ce <memset>
 80228c0:	4628      	mov	r0, r5
 80228c2:	bd38      	pop	{r3, r4, r5, pc}

080228c4 <_free_r>:
 80228c4:	b538      	push	{r3, r4, r5, lr}
 80228c6:	4605      	mov	r5, r0
 80228c8:	2900      	cmp	r1, #0
 80228ca:	d045      	beq.n	8022958 <_free_r+0x94>
 80228cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80228d0:	1f0c      	subs	r4, r1, #4
 80228d2:	2b00      	cmp	r3, #0
 80228d4:	bfb8      	it	lt
 80228d6:	18e4      	addlt	r4, r4, r3
 80228d8:	f000 fbd8 	bl	802308c <__malloc_lock>
 80228dc:	4a1f      	ldr	r2, [pc, #124]	; (802295c <_free_r+0x98>)
 80228de:	6813      	ldr	r3, [r2, #0]
 80228e0:	4610      	mov	r0, r2
 80228e2:	b933      	cbnz	r3, 80228f2 <_free_r+0x2e>
 80228e4:	6063      	str	r3, [r4, #4]
 80228e6:	6014      	str	r4, [r2, #0]
 80228e8:	4628      	mov	r0, r5
 80228ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80228ee:	f000 bbce 	b.w	802308e <__malloc_unlock>
 80228f2:	42a3      	cmp	r3, r4
 80228f4:	d90c      	bls.n	8022910 <_free_r+0x4c>
 80228f6:	6821      	ldr	r1, [r4, #0]
 80228f8:	1862      	adds	r2, r4, r1
 80228fa:	4293      	cmp	r3, r2
 80228fc:	bf04      	itt	eq
 80228fe:	681a      	ldreq	r2, [r3, #0]
 8022900:	685b      	ldreq	r3, [r3, #4]
 8022902:	6063      	str	r3, [r4, #4]
 8022904:	bf04      	itt	eq
 8022906:	1852      	addeq	r2, r2, r1
 8022908:	6022      	streq	r2, [r4, #0]
 802290a:	6004      	str	r4, [r0, #0]
 802290c:	e7ec      	b.n	80228e8 <_free_r+0x24>
 802290e:	4613      	mov	r3, r2
 8022910:	685a      	ldr	r2, [r3, #4]
 8022912:	b10a      	cbz	r2, 8022918 <_free_r+0x54>
 8022914:	42a2      	cmp	r2, r4
 8022916:	d9fa      	bls.n	802290e <_free_r+0x4a>
 8022918:	6819      	ldr	r1, [r3, #0]
 802291a:	1858      	adds	r0, r3, r1
 802291c:	42a0      	cmp	r0, r4
 802291e:	d10b      	bne.n	8022938 <_free_r+0x74>
 8022920:	6820      	ldr	r0, [r4, #0]
 8022922:	4401      	add	r1, r0
 8022924:	1858      	adds	r0, r3, r1
 8022926:	4282      	cmp	r2, r0
 8022928:	6019      	str	r1, [r3, #0]
 802292a:	d1dd      	bne.n	80228e8 <_free_r+0x24>
 802292c:	6810      	ldr	r0, [r2, #0]
 802292e:	6852      	ldr	r2, [r2, #4]
 8022930:	605a      	str	r2, [r3, #4]
 8022932:	4401      	add	r1, r0
 8022934:	6019      	str	r1, [r3, #0]
 8022936:	e7d7      	b.n	80228e8 <_free_r+0x24>
 8022938:	d902      	bls.n	8022940 <_free_r+0x7c>
 802293a:	230c      	movs	r3, #12
 802293c:	602b      	str	r3, [r5, #0]
 802293e:	e7d3      	b.n	80228e8 <_free_r+0x24>
 8022940:	6820      	ldr	r0, [r4, #0]
 8022942:	1821      	adds	r1, r4, r0
 8022944:	428a      	cmp	r2, r1
 8022946:	bf04      	itt	eq
 8022948:	6811      	ldreq	r1, [r2, #0]
 802294a:	6852      	ldreq	r2, [r2, #4]
 802294c:	6062      	str	r2, [r4, #4]
 802294e:	bf04      	itt	eq
 8022950:	1809      	addeq	r1, r1, r0
 8022952:	6021      	streq	r1, [r4, #0]
 8022954:	605c      	str	r4, [r3, #4]
 8022956:	e7c7      	b.n	80228e8 <_free_r+0x24>
 8022958:	bd38      	pop	{r3, r4, r5, pc}
 802295a:	bf00      	nop
 802295c:	24045460 	.word	0x24045460

08022960 <_malloc_r>:
 8022960:	b570      	push	{r4, r5, r6, lr}
 8022962:	1ccd      	adds	r5, r1, #3
 8022964:	f025 0503 	bic.w	r5, r5, #3
 8022968:	3508      	adds	r5, #8
 802296a:	2d0c      	cmp	r5, #12
 802296c:	bf38      	it	cc
 802296e:	250c      	movcc	r5, #12
 8022970:	2d00      	cmp	r5, #0
 8022972:	4606      	mov	r6, r0
 8022974:	db01      	blt.n	802297a <_malloc_r+0x1a>
 8022976:	42a9      	cmp	r1, r5
 8022978:	d903      	bls.n	8022982 <_malloc_r+0x22>
 802297a:	230c      	movs	r3, #12
 802297c:	6033      	str	r3, [r6, #0]
 802297e:	2000      	movs	r0, #0
 8022980:	bd70      	pop	{r4, r5, r6, pc}
 8022982:	f000 fb83 	bl	802308c <__malloc_lock>
 8022986:	4a21      	ldr	r2, [pc, #132]	; (8022a0c <_malloc_r+0xac>)
 8022988:	6814      	ldr	r4, [r2, #0]
 802298a:	4621      	mov	r1, r4
 802298c:	b991      	cbnz	r1, 80229b4 <_malloc_r+0x54>
 802298e:	4c20      	ldr	r4, [pc, #128]	; (8022a10 <_malloc_r+0xb0>)
 8022990:	6823      	ldr	r3, [r4, #0]
 8022992:	b91b      	cbnz	r3, 802299c <_malloc_r+0x3c>
 8022994:	4630      	mov	r0, r6
 8022996:	f000 facf 	bl	8022f38 <_sbrk_r>
 802299a:	6020      	str	r0, [r4, #0]
 802299c:	4629      	mov	r1, r5
 802299e:	4630      	mov	r0, r6
 80229a0:	f000 faca 	bl	8022f38 <_sbrk_r>
 80229a4:	1c43      	adds	r3, r0, #1
 80229a6:	d124      	bne.n	80229f2 <_malloc_r+0x92>
 80229a8:	230c      	movs	r3, #12
 80229aa:	6033      	str	r3, [r6, #0]
 80229ac:	4630      	mov	r0, r6
 80229ae:	f000 fb6e 	bl	802308e <__malloc_unlock>
 80229b2:	e7e4      	b.n	802297e <_malloc_r+0x1e>
 80229b4:	680b      	ldr	r3, [r1, #0]
 80229b6:	1b5b      	subs	r3, r3, r5
 80229b8:	d418      	bmi.n	80229ec <_malloc_r+0x8c>
 80229ba:	2b0b      	cmp	r3, #11
 80229bc:	d90f      	bls.n	80229de <_malloc_r+0x7e>
 80229be:	600b      	str	r3, [r1, #0]
 80229c0:	50cd      	str	r5, [r1, r3]
 80229c2:	18cc      	adds	r4, r1, r3
 80229c4:	4630      	mov	r0, r6
 80229c6:	f000 fb62 	bl	802308e <__malloc_unlock>
 80229ca:	f104 000b 	add.w	r0, r4, #11
 80229ce:	1d23      	adds	r3, r4, #4
 80229d0:	f020 0007 	bic.w	r0, r0, #7
 80229d4:	1ac3      	subs	r3, r0, r3
 80229d6:	d0d3      	beq.n	8022980 <_malloc_r+0x20>
 80229d8:	425a      	negs	r2, r3
 80229da:	50e2      	str	r2, [r4, r3]
 80229dc:	e7d0      	b.n	8022980 <_malloc_r+0x20>
 80229de:	428c      	cmp	r4, r1
 80229e0:	684b      	ldr	r3, [r1, #4]
 80229e2:	bf16      	itet	ne
 80229e4:	6063      	strne	r3, [r4, #4]
 80229e6:	6013      	streq	r3, [r2, #0]
 80229e8:	460c      	movne	r4, r1
 80229ea:	e7eb      	b.n	80229c4 <_malloc_r+0x64>
 80229ec:	460c      	mov	r4, r1
 80229ee:	6849      	ldr	r1, [r1, #4]
 80229f0:	e7cc      	b.n	802298c <_malloc_r+0x2c>
 80229f2:	1cc4      	adds	r4, r0, #3
 80229f4:	f024 0403 	bic.w	r4, r4, #3
 80229f8:	42a0      	cmp	r0, r4
 80229fa:	d005      	beq.n	8022a08 <_malloc_r+0xa8>
 80229fc:	1a21      	subs	r1, r4, r0
 80229fe:	4630      	mov	r0, r6
 8022a00:	f000 fa9a 	bl	8022f38 <_sbrk_r>
 8022a04:	3001      	adds	r0, #1
 8022a06:	d0cf      	beq.n	80229a8 <_malloc_r+0x48>
 8022a08:	6025      	str	r5, [r4, #0]
 8022a0a:	e7db      	b.n	80229c4 <_malloc_r+0x64>
 8022a0c:	24045460 	.word	0x24045460
 8022a10:	24045464 	.word	0x24045464

08022a14 <__ssputs_r>:
 8022a14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022a18:	688e      	ldr	r6, [r1, #8]
 8022a1a:	429e      	cmp	r6, r3
 8022a1c:	4682      	mov	sl, r0
 8022a1e:	460c      	mov	r4, r1
 8022a20:	4690      	mov	r8, r2
 8022a22:	4699      	mov	r9, r3
 8022a24:	d837      	bhi.n	8022a96 <__ssputs_r+0x82>
 8022a26:	898a      	ldrh	r2, [r1, #12]
 8022a28:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8022a2c:	d031      	beq.n	8022a92 <__ssputs_r+0x7e>
 8022a2e:	6825      	ldr	r5, [r4, #0]
 8022a30:	6909      	ldr	r1, [r1, #16]
 8022a32:	1a6f      	subs	r7, r5, r1
 8022a34:	6965      	ldr	r5, [r4, #20]
 8022a36:	2302      	movs	r3, #2
 8022a38:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8022a3c:	fb95 f5f3 	sdiv	r5, r5, r3
 8022a40:	f109 0301 	add.w	r3, r9, #1
 8022a44:	443b      	add	r3, r7
 8022a46:	429d      	cmp	r5, r3
 8022a48:	bf38      	it	cc
 8022a4a:	461d      	movcc	r5, r3
 8022a4c:	0553      	lsls	r3, r2, #21
 8022a4e:	d530      	bpl.n	8022ab2 <__ssputs_r+0x9e>
 8022a50:	4629      	mov	r1, r5
 8022a52:	f7ff ff85 	bl	8022960 <_malloc_r>
 8022a56:	4606      	mov	r6, r0
 8022a58:	b950      	cbnz	r0, 8022a70 <__ssputs_r+0x5c>
 8022a5a:	230c      	movs	r3, #12
 8022a5c:	f8ca 3000 	str.w	r3, [sl]
 8022a60:	89a3      	ldrh	r3, [r4, #12]
 8022a62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022a66:	81a3      	strh	r3, [r4, #12]
 8022a68:	f04f 30ff 	mov.w	r0, #4294967295
 8022a6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022a70:	463a      	mov	r2, r7
 8022a72:	6921      	ldr	r1, [r4, #16]
 8022a74:	f7fd fe07 	bl	8020686 <memcpy>
 8022a78:	89a3      	ldrh	r3, [r4, #12]
 8022a7a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8022a7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8022a82:	81a3      	strh	r3, [r4, #12]
 8022a84:	6126      	str	r6, [r4, #16]
 8022a86:	6165      	str	r5, [r4, #20]
 8022a88:	443e      	add	r6, r7
 8022a8a:	1bed      	subs	r5, r5, r7
 8022a8c:	6026      	str	r6, [r4, #0]
 8022a8e:	60a5      	str	r5, [r4, #8]
 8022a90:	464e      	mov	r6, r9
 8022a92:	454e      	cmp	r6, r9
 8022a94:	d900      	bls.n	8022a98 <__ssputs_r+0x84>
 8022a96:	464e      	mov	r6, r9
 8022a98:	4632      	mov	r2, r6
 8022a9a:	4641      	mov	r1, r8
 8022a9c:	6820      	ldr	r0, [r4, #0]
 8022a9e:	f7fd fdfd 	bl	802069c <memmove>
 8022aa2:	68a3      	ldr	r3, [r4, #8]
 8022aa4:	1b9b      	subs	r3, r3, r6
 8022aa6:	60a3      	str	r3, [r4, #8]
 8022aa8:	6823      	ldr	r3, [r4, #0]
 8022aaa:	441e      	add	r6, r3
 8022aac:	6026      	str	r6, [r4, #0]
 8022aae:	2000      	movs	r0, #0
 8022ab0:	e7dc      	b.n	8022a6c <__ssputs_r+0x58>
 8022ab2:	462a      	mov	r2, r5
 8022ab4:	f000 faec 	bl	8023090 <_realloc_r>
 8022ab8:	4606      	mov	r6, r0
 8022aba:	2800      	cmp	r0, #0
 8022abc:	d1e2      	bne.n	8022a84 <__ssputs_r+0x70>
 8022abe:	6921      	ldr	r1, [r4, #16]
 8022ac0:	4650      	mov	r0, sl
 8022ac2:	f7ff feff 	bl	80228c4 <_free_r>
 8022ac6:	e7c8      	b.n	8022a5a <__ssputs_r+0x46>

08022ac8 <_svfiprintf_r>:
 8022ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022acc:	461d      	mov	r5, r3
 8022ace:	898b      	ldrh	r3, [r1, #12]
 8022ad0:	061f      	lsls	r7, r3, #24
 8022ad2:	b09d      	sub	sp, #116	; 0x74
 8022ad4:	4680      	mov	r8, r0
 8022ad6:	460c      	mov	r4, r1
 8022ad8:	4616      	mov	r6, r2
 8022ada:	d50f      	bpl.n	8022afc <_svfiprintf_r+0x34>
 8022adc:	690b      	ldr	r3, [r1, #16]
 8022ade:	b96b      	cbnz	r3, 8022afc <_svfiprintf_r+0x34>
 8022ae0:	2140      	movs	r1, #64	; 0x40
 8022ae2:	f7ff ff3d 	bl	8022960 <_malloc_r>
 8022ae6:	6020      	str	r0, [r4, #0]
 8022ae8:	6120      	str	r0, [r4, #16]
 8022aea:	b928      	cbnz	r0, 8022af8 <_svfiprintf_r+0x30>
 8022aec:	230c      	movs	r3, #12
 8022aee:	f8c8 3000 	str.w	r3, [r8]
 8022af2:	f04f 30ff 	mov.w	r0, #4294967295
 8022af6:	e0c8      	b.n	8022c8a <_svfiprintf_r+0x1c2>
 8022af8:	2340      	movs	r3, #64	; 0x40
 8022afa:	6163      	str	r3, [r4, #20]
 8022afc:	2300      	movs	r3, #0
 8022afe:	9309      	str	r3, [sp, #36]	; 0x24
 8022b00:	2320      	movs	r3, #32
 8022b02:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8022b06:	2330      	movs	r3, #48	; 0x30
 8022b08:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8022b0c:	9503      	str	r5, [sp, #12]
 8022b0e:	f04f 0b01 	mov.w	fp, #1
 8022b12:	4637      	mov	r7, r6
 8022b14:	463d      	mov	r5, r7
 8022b16:	f815 3b01 	ldrb.w	r3, [r5], #1
 8022b1a:	b10b      	cbz	r3, 8022b20 <_svfiprintf_r+0x58>
 8022b1c:	2b25      	cmp	r3, #37	; 0x25
 8022b1e:	d13e      	bne.n	8022b9e <_svfiprintf_r+0xd6>
 8022b20:	ebb7 0a06 	subs.w	sl, r7, r6
 8022b24:	d00b      	beq.n	8022b3e <_svfiprintf_r+0x76>
 8022b26:	4653      	mov	r3, sl
 8022b28:	4632      	mov	r2, r6
 8022b2a:	4621      	mov	r1, r4
 8022b2c:	4640      	mov	r0, r8
 8022b2e:	f7ff ff71 	bl	8022a14 <__ssputs_r>
 8022b32:	3001      	adds	r0, #1
 8022b34:	f000 80a4 	beq.w	8022c80 <_svfiprintf_r+0x1b8>
 8022b38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022b3a:	4453      	add	r3, sl
 8022b3c:	9309      	str	r3, [sp, #36]	; 0x24
 8022b3e:	783b      	ldrb	r3, [r7, #0]
 8022b40:	2b00      	cmp	r3, #0
 8022b42:	f000 809d 	beq.w	8022c80 <_svfiprintf_r+0x1b8>
 8022b46:	2300      	movs	r3, #0
 8022b48:	f04f 32ff 	mov.w	r2, #4294967295
 8022b4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8022b50:	9304      	str	r3, [sp, #16]
 8022b52:	9307      	str	r3, [sp, #28]
 8022b54:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8022b58:	931a      	str	r3, [sp, #104]	; 0x68
 8022b5a:	462f      	mov	r7, r5
 8022b5c:	2205      	movs	r2, #5
 8022b5e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8022b62:	4850      	ldr	r0, [pc, #320]	; (8022ca4 <_svfiprintf_r+0x1dc>)
 8022b64:	f7dd fbbc 	bl	80002e0 <memchr>
 8022b68:	9b04      	ldr	r3, [sp, #16]
 8022b6a:	b9d0      	cbnz	r0, 8022ba2 <_svfiprintf_r+0xda>
 8022b6c:	06d9      	lsls	r1, r3, #27
 8022b6e:	bf44      	itt	mi
 8022b70:	2220      	movmi	r2, #32
 8022b72:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8022b76:	071a      	lsls	r2, r3, #28
 8022b78:	bf44      	itt	mi
 8022b7a:	222b      	movmi	r2, #43	; 0x2b
 8022b7c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8022b80:	782a      	ldrb	r2, [r5, #0]
 8022b82:	2a2a      	cmp	r2, #42	; 0x2a
 8022b84:	d015      	beq.n	8022bb2 <_svfiprintf_r+0xea>
 8022b86:	9a07      	ldr	r2, [sp, #28]
 8022b88:	462f      	mov	r7, r5
 8022b8a:	2000      	movs	r0, #0
 8022b8c:	250a      	movs	r5, #10
 8022b8e:	4639      	mov	r1, r7
 8022b90:	f811 3b01 	ldrb.w	r3, [r1], #1
 8022b94:	3b30      	subs	r3, #48	; 0x30
 8022b96:	2b09      	cmp	r3, #9
 8022b98:	d94d      	bls.n	8022c36 <_svfiprintf_r+0x16e>
 8022b9a:	b1b8      	cbz	r0, 8022bcc <_svfiprintf_r+0x104>
 8022b9c:	e00f      	b.n	8022bbe <_svfiprintf_r+0xf6>
 8022b9e:	462f      	mov	r7, r5
 8022ba0:	e7b8      	b.n	8022b14 <_svfiprintf_r+0x4c>
 8022ba2:	4a40      	ldr	r2, [pc, #256]	; (8022ca4 <_svfiprintf_r+0x1dc>)
 8022ba4:	1a80      	subs	r0, r0, r2
 8022ba6:	fa0b f000 	lsl.w	r0, fp, r0
 8022baa:	4318      	orrs	r0, r3
 8022bac:	9004      	str	r0, [sp, #16]
 8022bae:	463d      	mov	r5, r7
 8022bb0:	e7d3      	b.n	8022b5a <_svfiprintf_r+0x92>
 8022bb2:	9a03      	ldr	r2, [sp, #12]
 8022bb4:	1d11      	adds	r1, r2, #4
 8022bb6:	6812      	ldr	r2, [r2, #0]
 8022bb8:	9103      	str	r1, [sp, #12]
 8022bba:	2a00      	cmp	r2, #0
 8022bbc:	db01      	blt.n	8022bc2 <_svfiprintf_r+0xfa>
 8022bbe:	9207      	str	r2, [sp, #28]
 8022bc0:	e004      	b.n	8022bcc <_svfiprintf_r+0x104>
 8022bc2:	4252      	negs	r2, r2
 8022bc4:	f043 0302 	orr.w	r3, r3, #2
 8022bc8:	9207      	str	r2, [sp, #28]
 8022bca:	9304      	str	r3, [sp, #16]
 8022bcc:	783b      	ldrb	r3, [r7, #0]
 8022bce:	2b2e      	cmp	r3, #46	; 0x2e
 8022bd0:	d10c      	bne.n	8022bec <_svfiprintf_r+0x124>
 8022bd2:	787b      	ldrb	r3, [r7, #1]
 8022bd4:	2b2a      	cmp	r3, #42	; 0x2a
 8022bd6:	d133      	bne.n	8022c40 <_svfiprintf_r+0x178>
 8022bd8:	9b03      	ldr	r3, [sp, #12]
 8022bda:	1d1a      	adds	r2, r3, #4
 8022bdc:	681b      	ldr	r3, [r3, #0]
 8022bde:	9203      	str	r2, [sp, #12]
 8022be0:	2b00      	cmp	r3, #0
 8022be2:	bfb8      	it	lt
 8022be4:	f04f 33ff 	movlt.w	r3, #4294967295
 8022be8:	3702      	adds	r7, #2
 8022bea:	9305      	str	r3, [sp, #20]
 8022bec:	4d2e      	ldr	r5, [pc, #184]	; (8022ca8 <_svfiprintf_r+0x1e0>)
 8022bee:	7839      	ldrb	r1, [r7, #0]
 8022bf0:	2203      	movs	r2, #3
 8022bf2:	4628      	mov	r0, r5
 8022bf4:	f7dd fb74 	bl	80002e0 <memchr>
 8022bf8:	b138      	cbz	r0, 8022c0a <_svfiprintf_r+0x142>
 8022bfa:	2340      	movs	r3, #64	; 0x40
 8022bfc:	1b40      	subs	r0, r0, r5
 8022bfe:	fa03 f000 	lsl.w	r0, r3, r0
 8022c02:	9b04      	ldr	r3, [sp, #16]
 8022c04:	4303      	orrs	r3, r0
 8022c06:	3701      	adds	r7, #1
 8022c08:	9304      	str	r3, [sp, #16]
 8022c0a:	7839      	ldrb	r1, [r7, #0]
 8022c0c:	4827      	ldr	r0, [pc, #156]	; (8022cac <_svfiprintf_r+0x1e4>)
 8022c0e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8022c12:	2206      	movs	r2, #6
 8022c14:	1c7e      	adds	r6, r7, #1
 8022c16:	f7dd fb63 	bl	80002e0 <memchr>
 8022c1a:	2800      	cmp	r0, #0
 8022c1c:	d038      	beq.n	8022c90 <_svfiprintf_r+0x1c8>
 8022c1e:	4b24      	ldr	r3, [pc, #144]	; (8022cb0 <_svfiprintf_r+0x1e8>)
 8022c20:	bb13      	cbnz	r3, 8022c68 <_svfiprintf_r+0x1a0>
 8022c22:	9b03      	ldr	r3, [sp, #12]
 8022c24:	3307      	adds	r3, #7
 8022c26:	f023 0307 	bic.w	r3, r3, #7
 8022c2a:	3308      	adds	r3, #8
 8022c2c:	9303      	str	r3, [sp, #12]
 8022c2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022c30:	444b      	add	r3, r9
 8022c32:	9309      	str	r3, [sp, #36]	; 0x24
 8022c34:	e76d      	b.n	8022b12 <_svfiprintf_r+0x4a>
 8022c36:	fb05 3202 	mla	r2, r5, r2, r3
 8022c3a:	2001      	movs	r0, #1
 8022c3c:	460f      	mov	r7, r1
 8022c3e:	e7a6      	b.n	8022b8e <_svfiprintf_r+0xc6>
 8022c40:	2300      	movs	r3, #0
 8022c42:	3701      	adds	r7, #1
 8022c44:	9305      	str	r3, [sp, #20]
 8022c46:	4619      	mov	r1, r3
 8022c48:	250a      	movs	r5, #10
 8022c4a:	4638      	mov	r0, r7
 8022c4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8022c50:	3a30      	subs	r2, #48	; 0x30
 8022c52:	2a09      	cmp	r2, #9
 8022c54:	d903      	bls.n	8022c5e <_svfiprintf_r+0x196>
 8022c56:	2b00      	cmp	r3, #0
 8022c58:	d0c8      	beq.n	8022bec <_svfiprintf_r+0x124>
 8022c5a:	9105      	str	r1, [sp, #20]
 8022c5c:	e7c6      	b.n	8022bec <_svfiprintf_r+0x124>
 8022c5e:	fb05 2101 	mla	r1, r5, r1, r2
 8022c62:	2301      	movs	r3, #1
 8022c64:	4607      	mov	r7, r0
 8022c66:	e7f0      	b.n	8022c4a <_svfiprintf_r+0x182>
 8022c68:	ab03      	add	r3, sp, #12
 8022c6a:	9300      	str	r3, [sp, #0]
 8022c6c:	4622      	mov	r2, r4
 8022c6e:	4b11      	ldr	r3, [pc, #68]	; (8022cb4 <_svfiprintf_r+0x1ec>)
 8022c70:	a904      	add	r1, sp, #16
 8022c72:	4640      	mov	r0, r8
 8022c74:	f7fd fdb8 	bl	80207e8 <_printf_float>
 8022c78:	f1b0 3fff 	cmp.w	r0, #4294967295
 8022c7c:	4681      	mov	r9, r0
 8022c7e:	d1d6      	bne.n	8022c2e <_svfiprintf_r+0x166>
 8022c80:	89a3      	ldrh	r3, [r4, #12]
 8022c82:	065b      	lsls	r3, r3, #25
 8022c84:	f53f af35 	bmi.w	8022af2 <_svfiprintf_r+0x2a>
 8022c88:	9809      	ldr	r0, [sp, #36]	; 0x24
 8022c8a:	b01d      	add	sp, #116	; 0x74
 8022c8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022c90:	ab03      	add	r3, sp, #12
 8022c92:	9300      	str	r3, [sp, #0]
 8022c94:	4622      	mov	r2, r4
 8022c96:	4b07      	ldr	r3, [pc, #28]	; (8022cb4 <_svfiprintf_r+0x1ec>)
 8022c98:	a904      	add	r1, sp, #16
 8022c9a:	4640      	mov	r0, r8
 8022c9c:	f7fe f846 	bl	8020d2c <_printf_i>
 8022ca0:	e7ea      	b.n	8022c78 <_svfiprintf_r+0x1b0>
 8022ca2:	bf00      	nop
 8022ca4:	08027884 	.word	0x08027884
 8022ca8:	0802788a 	.word	0x0802788a
 8022cac:	0802788e 	.word	0x0802788e
 8022cb0:	080207e9 	.word	0x080207e9
 8022cb4:	08022a15 	.word	0x08022a15

08022cb8 <__sfputc_r>:
 8022cb8:	6893      	ldr	r3, [r2, #8]
 8022cba:	3b01      	subs	r3, #1
 8022cbc:	2b00      	cmp	r3, #0
 8022cbe:	b410      	push	{r4}
 8022cc0:	6093      	str	r3, [r2, #8]
 8022cc2:	da08      	bge.n	8022cd6 <__sfputc_r+0x1e>
 8022cc4:	6994      	ldr	r4, [r2, #24]
 8022cc6:	42a3      	cmp	r3, r4
 8022cc8:	db01      	blt.n	8022cce <__sfputc_r+0x16>
 8022cca:	290a      	cmp	r1, #10
 8022ccc:	d103      	bne.n	8022cd6 <__sfputc_r+0x1e>
 8022cce:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022cd2:	f7fe ba0d 	b.w	80210f0 <__swbuf_r>
 8022cd6:	6813      	ldr	r3, [r2, #0]
 8022cd8:	1c58      	adds	r0, r3, #1
 8022cda:	6010      	str	r0, [r2, #0]
 8022cdc:	7019      	strb	r1, [r3, #0]
 8022cde:	4608      	mov	r0, r1
 8022ce0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022ce4:	4770      	bx	lr

08022ce6 <__sfputs_r>:
 8022ce6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022ce8:	4606      	mov	r6, r0
 8022cea:	460f      	mov	r7, r1
 8022cec:	4614      	mov	r4, r2
 8022cee:	18d5      	adds	r5, r2, r3
 8022cf0:	42ac      	cmp	r4, r5
 8022cf2:	d101      	bne.n	8022cf8 <__sfputs_r+0x12>
 8022cf4:	2000      	movs	r0, #0
 8022cf6:	e007      	b.n	8022d08 <__sfputs_r+0x22>
 8022cf8:	463a      	mov	r2, r7
 8022cfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022cfe:	4630      	mov	r0, r6
 8022d00:	f7ff ffda 	bl	8022cb8 <__sfputc_r>
 8022d04:	1c43      	adds	r3, r0, #1
 8022d06:	d1f3      	bne.n	8022cf0 <__sfputs_r+0xa>
 8022d08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08022d0c <_vfiprintf_r>:
 8022d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022d10:	460c      	mov	r4, r1
 8022d12:	b09d      	sub	sp, #116	; 0x74
 8022d14:	4617      	mov	r7, r2
 8022d16:	461d      	mov	r5, r3
 8022d18:	4606      	mov	r6, r0
 8022d1a:	b118      	cbz	r0, 8022d24 <_vfiprintf_r+0x18>
 8022d1c:	6983      	ldr	r3, [r0, #24]
 8022d1e:	b90b      	cbnz	r3, 8022d24 <_vfiprintf_r+0x18>
 8022d20:	f7ff f9e2 	bl	80220e8 <__sinit>
 8022d24:	4b7c      	ldr	r3, [pc, #496]	; (8022f18 <_vfiprintf_r+0x20c>)
 8022d26:	429c      	cmp	r4, r3
 8022d28:	d158      	bne.n	8022ddc <_vfiprintf_r+0xd0>
 8022d2a:	6874      	ldr	r4, [r6, #4]
 8022d2c:	89a3      	ldrh	r3, [r4, #12]
 8022d2e:	0718      	lsls	r0, r3, #28
 8022d30:	d55e      	bpl.n	8022df0 <_vfiprintf_r+0xe4>
 8022d32:	6923      	ldr	r3, [r4, #16]
 8022d34:	2b00      	cmp	r3, #0
 8022d36:	d05b      	beq.n	8022df0 <_vfiprintf_r+0xe4>
 8022d38:	2300      	movs	r3, #0
 8022d3a:	9309      	str	r3, [sp, #36]	; 0x24
 8022d3c:	2320      	movs	r3, #32
 8022d3e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8022d42:	2330      	movs	r3, #48	; 0x30
 8022d44:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8022d48:	9503      	str	r5, [sp, #12]
 8022d4a:	f04f 0b01 	mov.w	fp, #1
 8022d4e:	46b8      	mov	r8, r7
 8022d50:	4645      	mov	r5, r8
 8022d52:	f815 3b01 	ldrb.w	r3, [r5], #1
 8022d56:	b10b      	cbz	r3, 8022d5c <_vfiprintf_r+0x50>
 8022d58:	2b25      	cmp	r3, #37	; 0x25
 8022d5a:	d154      	bne.n	8022e06 <_vfiprintf_r+0xfa>
 8022d5c:	ebb8 0a07 	subs.w	sl, r8, r7
 8022d60:	d00b      	beq.n	8022d7a <_vfiprintf_r+0x6e>
 8022d62:	4653      	mov	r3, sl
 8022d64:	463a      	mov	r2, r7
 8022d66:	4621      	mov	r1, r4
 8022d68:	4630      	mov	r0, r6
 8022d6a:	f7ff ffbc 	bl	8022ce6 <__sfputs_r>
 8022d6e:	3001      	adds	r0, #1
 8022d70:	f000 80c2 	beq.w	8022ef8 <_vfiprintf_r+0x1ec>
 8022d74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022d76:	4453      	add	r3, sl
 8022d78:	9309      	str	r3, [sp, #36]	; 0x24
 8022d7a:	f898 3000 	ldrb.w	r3, [r8]
 8022d7e:	2b00      	cmp	r3, #0
 8022d80:	f000 80ba 	beq.w	8022ef8 <_vfiprintf_r+0x1ec>
 8022d84:	2300      	movs	r3, #0
 8022d86:	f04f 32ff 	mov.w	r2, #4294967295
 8022d8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8022d8e:	9304      	str	r3, [sp, #16]
 8022d90:	9307      	str	r3, [sp, #28]
 8022d92:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8022d96:	931a      	str	r3, [sp, #104]	; 0x68
 8022d98:	46a8      	mov	r8, r5
 8022d9a:	2205      	movs	r2, #5
 8022d9c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8022da0:	485e      	ldr	r0, [pc, #376]	; (8022f1c <_vfiprintf_r+0x210>)
 8022da2:	f7dd fa9d 	bl	80002e0 <memchr>
 8022da6:	9b04      	ldr	r3, [sp, #16]
 8022da8:	bb78      	cbnz	r0, 8022e0a <_vfiprintf_r+0xfe>
 8022daa:	06d9      	lsls	r1, r3, #27
 8022dac:	bf44      	itt	mi
 8022dae:	2220      	movmi	r2, #32
 8022db0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8022db4:	071a      	lsls	r2, r3, #28
 8022db6:	bf44      	itt	mi
 8022db8:	222b      	movmi	r2, #43	; 0x2b
 8022dba:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8022dbe:	782a      	ldrb	r2, [r5, #0]
 8022dc0:	2a2a      	cmp	r2, #42	; 0x2a
 8022dc2:	d02a      	beq.n	8022e1a <_vfiprintf_r+0x10e>
 8022dc4:	9a07      	ldr	r2, [sp, #28]
 8022dc6:	46a8      	mov	r8, r5
 8022dc8:	2000      	movs	r0, #0
 8022dca:	250a      	movs	r5, #10
 8022dcc:	4641      	mov	r1, r8
 8022dce:	f811 3b01 	ldrb.w	r3, [r1], #1
 8022dd2:	3b30      	subs	r3, #48	; 0x30
 8022dd4:	2b09      	cmp	r3, #9
 8022dd6:	d969      	bls.n	8022eac <_vfiprintf_r+0x1a0>
 8022dd8:	b360      	cbz	r0, 8022e34 <_vfiprintf_r+0x128>
 8022dda:	e024      	b.n	8022e26 <_vfiprintf_r+0x11a>
 8022ddc:	4b50      	ldr	r3, [pc, #320]	; (8022f20 <_vfiprintf_r+0x214>)
 8022dde:	429c      	cmp	r4, r3
 8022de0:	d101      	bne.n	8022de6 <_vfiprintf_r+0xda>
 8022de2:	68b4      	ldr	r4, [r6, #8]
 8022de4:	e7a2      	b.n	8022d2c <_vfiprintf_r+0x20>
 8022de6:	4b4f      	ldr	r3, [pc, #316]	; (8022f24 <_vfiprintf_r+0x218>)
 8022de8:	429c      	cmp	r4, r3
 8022dea:	bf08      	it	eq
 8022dec:	68f4      	ldreq	r4, [r6, #12]
 8022dee:	e79d      	b.n	8022d2c <_vfiprintf_r+0x20>
 8022df0:	4621      	mov	r1, r4
 8022df2:	4630      	mov	r0, r6
 8022df4:	f7fe f9dc 	bl	80211b0 <__swsetup_r>
 8022df8:	2800      	cmp	r0, #0
 8022dfa:	d09d      	beq.n	8022d38 <_vfiprintf_r+0x2c>
 8022dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8022e00:	b01d      	add	sp, #116	; 0x74
 8022e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022e06:	46a8      	mov	r8, r5
 8022e08:	e7a2      	b.n	8022d50 <_vfiprintf_r+0x44>
 8022e0a:	4a44      	ldr	r2, [pc, #272]	; (8022f1c <_vfiprintf_r+0x210>)
 8022e0c:	1a80      	subs	r0, r0, r2
 8022e0e:	fa0b f000 	lsl.w	r0, fp, r0
 8022e12:	4318      	orrs	r0, r3
 8022e14:	9004      	str	r0, [sp, #16]
 8022e16:	4645      	mov	r5, r8
 8022e18:	e7be      	b.n	8022d98 <_vfiprintf_r+0x8c>
 8022e1a:	9a03      	ldr	r2, [sp, #12]
 8022e1c:	1d11      	adds	r1, r2, #4
 8022e1e:	6812      	ldr	r2, [r2, #0]
 8022e20:	9103      	str	r1, [sp, #12]
 8022e22:	2a00      	cmp	r2, #0
 8022e24:	db01      	blt.n	8022e2a <_vfiprintf_r+0x11e>
 8022e26:	9207      	str	r2, [sp, #28]
 8022e28:	e004      	b.n	8022e34 <_vfiprintf_r+0x128>
 8022e2a:	4252      	negs	r2, r2
 8022e2c:	f043 0302 	orr.w	r3, r3, #2
 8022e30:	9207      	str	r2, [sp, #28]
 8022e32:	9304      	str	r3, [sp, #16]
 8022e34:	f898 3000 	ldrb.w	r3, [r8]
 8022e38:	2b2e      	cmp	r3, #46	; 0x2e
 8022e3a:	d10e      	bne.n	8022e5a <_vfiprintf_r+0x14e>
 8022e3c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8022e40:	2b2a      	cmp	r3, #42	; 0x2a
 8022e42:	d138      	bne.n	8022eb6 <_vfiprintf_r+0x1aa>
 8022e44:	9b03      	ldr	r3, [sp, #12]
 8022e46:	1d1a      	adds	r2, r3, #4
 8022e48:	681b      	ldr	r3, [r3, #0]
 8022e4a:	9203      	str	r2, [sp, #12]
 8022e4c:	2b00      	cmp	r3, #0
 8022e4e:	bfb8      	it	lt
 8022e50:	f04f 33ff 	movlt.w	r3, #4294967295
 8022e54:	f108 0802 	add.w	r8, r8, #2
 8022e58:	9305      	str	r3, [sp, #20]
 8022e5a:	4d33      	ldr	r5, [pc, #204]	; (8022f28 <_vfiprintf_r+0x21c>)
 8022e5c:	f898 1000 	ldrb.w	r1, [r8]
 8022e60:	2203      	movs	r2, #3
 8022e62:	4628      	mov	r0, r5
 8022e64:	f7dd fa3c 	bl	80002e0 <memchr>
 8022e68:	b140      	cbz	r0, 8022e7c <_vfiprintf_r+0x170>
 8022e6a:	2340      	movs	r3, #64	; 0x40
 8022e6c:	1b40      	subs	r0, r0, r5
 8022e6e:	fa03 f000 	lsl.w	r0, r3, r0
 8022e72:	9b04      	ldr	r3, [sp, #16]
 8022e74:	4303      	orrs	r3, r0
 8022e76:	f108 0801 	add.w	r8, r8, #1
 8022e7a:	9304      	str	r3, [sp, #16]
 8022e7c:	f898 1000 	ldrb.w	r1, [r8]
 8022e80:	482a      	ldr	r0, [pc, #168]	; (8022f2c <_vfiprintf_r+0x220>)
 8022e82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8022e86:	2206      	movs	r2, #6
 8022e88:	f108 0701 	add.w	r7, r8, #1
 8022e8c:	f7dd fa28 	bl	80002e0 <memchr>
 8022e90:	2800      	cmp	r0, #0
 8022e92:	d037      	beq.n	8022f04 <_vfiprintf_r+0x1f8>
 8022e94:	4b26      	ldr	r3, [pc, #152]	; (8022f30 <_vfiprintf_r+0x224>)
 8022e96:	bb1b      	cbnz	r3, 8022ee0 <_vfiprintf_r+0x1d4>
 8022e98:	9b03      	ldr	r3, [sp, #12]
 8022e9a:	3307      	adds	r3, #7
 8022e9c:	f023 0307 	bic.w	r3, r3, #7
 8022ea0:	3308      	adds	r3, #8
 8022ea2:	9303      	str	r3, [sp, #12]
 8022ea4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022ea6:	444b      	add	r3, r9
 8022ea8:	9309      	str	r3, [sp, #36]	; 0x24
 8022eaa:	e750      	b.n	8022d4e <_vfiprintf_r+0x42>
 8022eac:	fb05 3202 	mla	r2, r5, r2, r3
 8022eb0:	2001      	movs	r0, #1
 8022eb2:	4688      	mov	r8, r1
 8022eb4:	e78a      	b.n	8022dcc <_vfiprintf_r+0xc0>
 8022eb6:	2300      	movs	r3, #0
 8022eb8:	f108 0801 	add.w	r8, r8, #1
 8022ebc:	9305      	str	r3, [sp, #20]
 8022ebe:	4619      	mov	r1, r3
 8022ec0:	250a      	movs	r5, #10
 8022ec2:	4640      	mov	r0, r8
 8022ec4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8022ec8:	3a30      	subs	r2, #48	; 0x30
 8022eca:	2a09      	cmp	r2, #9
 8022ecc:	d903      	bls.n	8022ed6 <_vfiprintf_r+0x1ca>
 8022ece:	2b00      	cmp	r3, #0
 8022ed0:	d0c3      	beq.n	8022e5a <_vfiprintf_r+0x14e>
 8022ed2:	9105      	str	r1, [sp, #20]
 8022ed4:	e7c1      	b.n	8022e5a <_vfiprintf_r+0x14e>
 8022ed6:	fb05 2101 	mla	r1, r5, r1, r2
 8022eda:	2301      	movs	r3, #1
 8022edc:	4680      	mov	r8, r0
 8022ede:	e7f0      	b.n	8022ec2 <_vfiprintf_r+0x1b6>
 8022ee0:	ab03      	add	r3, sp, #12
 8022ee2:	9300      	str	r3, [sp, #0]
 8022ee4:	4622      	mov	r2, r4
 8022ee6:	4b13      	ldr	r3, [pc, #76]	; (8022f34 <_vfiprintf_r+0x228>)
 8022ee8:	a904      	add	r1, sp, #16
 8022eea:	4630      	mov	r0, r6
 8022eec:	f7fd fc7c 	bl	80207e8 <_printf_float>
 8022ef0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8022ef4:	4681      	mov	r9, r0
 8022ef6:	d1d5      	bne.n	8022ea4 <_vfiprintf_r+0x198>
 8022ef8:	89a3      	ldrh	r3, [r4, #12]
 8022efa:	065b      	lsls	r3, r3, #25
 8022efc:	f53f af7e 	bmi.w	8022dfc <_vfiprintf_r+0xf0>
 8022f00:	9809      	ldr	r0, [sp, #36]	; 0x24
 8022f02:	e77d      	b.n	8022e00 <_vfiprintf_r+0xf4>
 8022f04:	ab03      	add	r3, sp, #12
 8022f06:	9300      	str	r3, [sp, #0]
 8022f08:	4622      	mov	r2, r4
 8022f0a:	4b0a      	ldr	r3, [pc, #40]	; (8022f34 <_vfiprintf_r+0x228>)
 8022f0c:	a904      	add	r1, sp, #16
 8022f0e:	4630      	mov	r0, r6
 8022f10:	f7fd ff0c 	bl	8020d2c <_printf_i>
 8022f14:	e7ec      	b.n	8022ef0 <_vfiprintf_r+0x1e4>
 8022f16:	bf00      	nop
 8022f18:	08027744 	.word	0x08027744
 8022f1c:	08027884 	.word	0x08027884
 8022f20:	08027764 	.word	0x08027764
 8022f24:	08027724 	.word	0x08027724
 8022f28:	0802788a 	.word	0x0802788a
 8022f2c:	0802788e 	.word	0x0802788e
 8022f30:	080207e9 	.word	0x080207e9
 8022f34:	08022ce7 	.word	0x08022ce7

08022f38 <_sbrk_r>:
 8022f38:	b538      	push	{r3, r4, r5, lr}
 8022f3a:	4c06      	ldr	r4, [pc, #24]	; (8022f54 <_sbrk_r+0x1c>)
 8022f3c:	2300      	movs	r3, #0
 8022f3e:	4605      	mov	r5, r0
 8022f40:	4608      	mov	r0, r1
 8022f42:	6023      	str	r3, [r4, #0]
 8022f44:	f7de fa7a 	bl	800143c <_sbrk>
 8022f48:	1c43      	adds	r3, r0, #1
 8022f4a:	d102      	bne.n	8022f52 <_sbrk_r+0x1a>
 8022f4c:	6823      	ldr	r3, [r4, #0]
 8022f4e:	b103      	cbz	r3, 8022f52 <_sbrk_r+0x1a>
 8022f50:	602b      	str	r3, [r5, #0]
 8022f52:	bd38      	pop	{r3, r4, r5, pc}
 8022f54:	24048e74 	.word	0x24048e74

08022f58 <__sread>:
 8022f58:	b510      	push	{r4, lr}
 8022f5a:	460c      	mov	r4, r1
 8022f5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022f60:	f000 f8bc 	bl	80230dc <_read_r>
 8022f64:	2800      	cmp	r0, #0
 8022f66:	bfab      	itete	ge
 8022f68:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8022f6a:	89a3      	ldrhlt	r3, [r4, #12]
 8022f6c:	181b      	addge	r3, r3, r0
 8022f6e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8022f72:	bfac      	ite	ge
 8022f74:	6563      	strge	r3, [r4, #84]	; 0x54
 8022f76:	81a3      	strhlt	r3, [r4, #12]
 8022f78:	bd10      	pop	{r4, pc}

08022f7a <__swrite>:
 8022f7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022f7e:	461f      	mov	r7, r3
 8022f80:	898b      	ldrh	r3, [r1, #12]
 8022f82:	05db      	lsls	r3, r3, #23
 8022f84:	4605      	mov	r5, r0
 8022f86:	460c      	mov	r4, r1
 8022f88:	4616      	mov	r6, r2
 8022f8a:	d505      	bpl.n	8022f98 <__swrite+0x1e>
 8022f8c:	2302      	movs	r3, #2
 8022f8e:	2200      	movs	r2, #0
 8022f90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022f94:	f000 f868 	bl	8023068 <_lseek_r>
 8022f98:	89a3      	ldrh	r3, [r4, #12]
 8022f9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8022f9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8022fa2:	81a3      	strh	r3, [r4, #12]
 8022fa4:	4632      	mov	r2, r6
 8022fa6:	463b      	mov	r3, r7
 8022fa8:	4628      	mov	r0, r5
 8022faa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8022fae:	f000 b817 	b.w	8022fe0 <_write_r>

08022fb2 <__sseek>:
 8022fb2:	b510      	push	{r4, lr}
 8022fb4:	460c      	mov	r4, r1
 8022fb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022fba:	f000 f855 	bl	8023068 <_lseek_r>
 8022fbe:	1c43      	adds	r3, r0, #1
 8022fc0:	89a3      	ldrh	r3, [r4, #12]
 8022fc2:	bf15      	itete	ne
 8022fc4:	6560      	strne	r0, [r4, #84]	; 0x54
 8022fc6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8022fca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8022fce:	81a3      	strheq	r3, [r4, #12]
 8022fd0:	bf18      	it	ne
 8022fd2:	81a3      	strhne	r3, [r4, #12]
 8022fd4:	bd10      	pop	{r4, pc}

08022fd6 <__sclose>:
 8022fd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022fda:	f000 b813 	b.w	8023004 <_close_r>
	...

08022fe0 <_write_r>:
 8022fe0:	b538      	push	{r3, r4, r5, lr}
 8022fe2:	4c07      	ldr	r4, [pc, #28]	; (8023000 <_write_r+0x20>)
 8022fe4:	4605      	mov	r5, r0
 8022fe6:	4608      	mov	r0, r1
 8022fe8:	4611      	mov	r1, r2
 8022fea:	2200      	movs	r2, #0
 8022fec:	6022      	str	r2, [r4, #0]
 8022fee:	461a      	mov	r2, r3
 8022ff0:	f7de f9d3 	bl	800139a <_write>
 8022ff4:	1c43      	adds	r3, r0, #1
 8022ff6:	d102      	bne.n	8022ffe <_write_r+0x1e>
 8022ff8:	6823      	ldr	r3, [r4, #0]
 8022ffa:	b103      	cbz	r3, 8022ffe <_write_r+0x1e>
 8022ffc:	602b      	str	r3, [r5, #0]
 8022ffe:	bd38      	pop	{r3, r4, r5, pc}
 8023000:	24048e74 	.word	0x24048e74

08023004 <_close_r>:
 8023004:	b538      	push	{r3, r4, r5, lr}
 8023006:	4c06      	ldr	r4, [pc, #24]	; (8023020 <_close_r+0x1c>)
 8023008:	2300      	movs	r3, #0
 802300a:	4605      	mov	r5, r0
 802300c:	4608      	mov	r0, r1
 802300e:	6023      	str	r3, [r4, #0]
 8023010:	f7de f9df 	bl	80013d2 <_close>
 8023014:	1c43      	adds	r3, r0, #1
 8023016:	d102      	bne.n	802301e <_close_r+0x1a>
 8023018:	6823      	ldr	r3, [r4, #0]
 802301a:	b103      	cbz	r3, 802301e <_close_r+0x1a>
 802301c:	602b      	str	r3, [r5, #0]
 802301e:	bd38      	pop	{r3, r4, r5, pc}
 8023020:	24048e74 	.word	0x24048e74

08023024 <_fstat_r>:
 8023024:	b538      	push	{r3, r4, r5, lr}
 8023026:	4c07      	ldr	r4, [pc, #28]	; (8023044 <_fstat_r+0x20>)
 8023028:	2300      	movs	r3, #0
 802302a:	4605      	mov	r5, r0
 802302c:	4608      	mov	r0, r1
 802302e:	4611      	mov	r1, r2
 8023030:	6023      	str	r3, [r4, #0]
 8023032:	f7de f9da 	bl	80013ea <_fstat>
 8023036:	1c43      	adds	r3, r0, #1
 8023038:	d102      	bne.n	8023040 <_fstat_r+0x1c>
 802303a:	6823      	ldr	r3, [r4, #0]
 802303c:	b103      	cbz	r3, 8023040 <_fstat_r+0x1c>
 802303e:	602b      	str	r3, [r5, #0]
 8023040:	bd38      	pop	{r3, r4, r5, pc}
 8023042:	bf00      	nop
 8023044:	24048e74 	.word	0x24048e74

08023048 <_isatty_r>:
 8023048:	b538      	push	{r3, r4, r5, lr}
 802304a:	4c06      	ldr	r4, [pc, #24]	; (8023064 <_isatty_r+0x1c>)
 802304c:	2300      	movs	r3, #0
 802304e:	4605      	mov	r5, r0
 8023050:	4608      	mov	r0, r1
 8023052:	6023      	str	r3, [r4, #0]
 8023054:	f7de f9d9 	bl	800140a <_isatty>
 8023058:	1c43      	adds	r3, r0, #1
 802305a:	d102      	bne.n	8023062 <_isatty_r+0x1a>
 802305c:	6823      	ldr	r3, [r4, #0]
 802305e:	b103      	cbz	r3, 8023062 <_isatty_r+0x1a>
 8023060:	602b      	str	r3, [r5, #0]
 8023062:	bd38      	pop	{r3, r4, r5, pc}
 8023064:	24048e74 	.word	0x24048e74

08023068 <_lseek_r>:
 8023068:	b538      	push	{r3, r4, r5, lr}
 802306a:	4c07      	ldr	r4, [pc, #28]	; (8023088 <_lseek_r+0x20>)
 802306c:	4605      	mov	r5, r0
 802306e:	4608      	mov	r0, r1
 8023070:	4611      	mov	r1, r2
 8023072:	2200      	movs	r2, #0
 8023074:	6022      	str	r2, [r4, #0]
 8023076:	461a      	mov	r2, r3
 8023078:	f7de f9d2 	bl	8001420 <_lseek>
 802307c:	1c43      	adds	r3, r0, #1
 802307e:	d102      	bne.n	8023086 <_lseek_r+0x1e>
 8023080:	6823      	ldr	r3, [r4, #0]
 8023082:	b103      	cbz	r3, 8023086 <_lseek_r+0x1e>
 8023084:	602b      	str	r3, [r5, #0]
 8023086:	bd38      	pop	{r3, r4, r5, pc}
 8023088:	24048e74 	.word	0x24048e74

0802308c <__malloc_lock>:
 802308c:	4770      	bx	lr

0802308e <__malloc_unlock>:
 802308e:	4770      	bx	lr

08023090 <_realloc_r>:
 8023090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023092:	4607      	mov	r7, r0
 8023094:	4614      	mov	r4, r2
 8023096:	460e      	mov	r6, r1
 8023098:	b921      	cbnz	r1, 80230a4 <_realloc_r+0x14>
 802309a:	4611      	mov	r1, r2
 802309c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80230a0:	f7ff bc5e 	b.w	8022960 <_malloc_r>
 80230a4:	b922      	cbnz	r2, 80230b0 <_realloc_r+0x20>
 80230a6:	f7ff fc0d 	bl	80228c4 <_free_r>
 80230aa:	4625      	mov	r5, r4
 80230ac:	4628      	mov	r0, r5
 80230ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80230b0:	f000 f826 	bl	8023100 <_malloc_usable_size_r>
 80230b4:	42a0      	cmp	r0, r4
 80230b6:	d20f      	bcs.n	80230d8 <_realloc_r+0x48>
 80230b8:	4621      	mov	r1, r4
 80230ba:	4638      	mov	r0, r7
 80230bc:	f7ff fc50 	bl	8022960 <_malloc_r>
 80230c0:	4605      	mov	r5, r0
 80230c2:	2800      	cmp	r0, #0
 80230c4:	d0f2      	beq.n	80230ac <_realloc_r+0x1c>
 80230c6:	4631      	mov	r1, r6
 80230c8:	4622      	mov	r2, r4
 80230ca:	f7fd fadc 	bl	8020686 <memcpy>
 80230ce:	4631      	mov	r1, r6
 80230d0:	4638      	mov	r0, r7
 80230d2:	f7ff fbf7 	bl	80228c4 <_free_r>
 80230d6:	e7e9      	b.n	80230ac <_realloc_r+0x1c>
 80230d8:	4635      	mov	r5, r6
 80230da:	e7e7      	b.n	80230ac <_realloc_r+0x1c>

080230dc <_read_r>:
 80230dc:	b538      	push	{r3, r4, r5, lr}
 80230de:	4c07      	ldr	r4, [pc, #28]	; (80230fc <_read_r+0x20>)
 80230e0:	4605      	mov	r5, r0
 80230e2:	4608      	mov	r0, r1
 80230e4:	4611      	mov	r1, r2
 80230e6:	2200      	movs	r2, #0
 80230e8:	6022      	str	r2, [r4, #0]
 80230ea:	461a      	mov	r2, r3
 80230ec:	f7de f938 	bl	8001360 <_read>
 80230f0:	1c43      	adds	r3, r0, #1
 80230f2:	d102      	bne.n	80230fa <_read_r+0x1e>
 80230f4:	6823      	ldr	r3, [r4, #0]
 80230f6:	b103      	cbz	r3, 80230fa <_read_r+0x1e>
 80230f8:	602b      	str	r3, [r5, #0]
 80230fa:	bd38      	pop	{r3, r4, r5, pc}
 80230fc:	24048e74 	.word	0x24048e74

08023100 <_malloc_usable_size_r>:
 8023100:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8023104:	1f18      	subs	r0, r3, #4
 8023106:	2b00      	cmp	r3, #0
 8023108:	bfbc      	itt	lt
 802310a:	580b      	ldrlt	r3, [r1, r0]
 802310c:	18c0      	addlt	r0, r0, r3
 802310e:	4770      	bx	lr

08023110 <_init>:
 8023110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023112:	bf00      	nop
 8023114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023116:	bc08      	pop	{r3}
 8023118:	469e      	mov	lr, r3
 802311a:	4770      	bx	lr

0802311c <_fini>:
 802311c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802311e:	bf00      	nop
 8023120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023122:	bc08      	pop	{r3}
 8023124:	469e      	mov	lr, r3
 8023126:	4770      	bx	lr
