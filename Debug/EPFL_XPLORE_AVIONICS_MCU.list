
EPFL_XPLORE_AVIONICS_MCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f8b4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000047c  0800fb58  0800fb58  0001fb58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ffd4  0800ffd4  0001ffd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ffdc  0800ffdc  0001ffdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800ffe0  0800ffe0  0001ffe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e0  24000000  0800ffe4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000a94  240001e0  080101c4  000201e0  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000c74  080101c4  00020c74  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003a424  00000000  00000000  0002020e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004e23  00000000  00000000  0005a632  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002208  00000000  00000000  0005f458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002080  00000000  00000000  00061660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00041529  00000000  00000000  000636e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00029fd3  00000000  00000000  000a4c09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001aa269  00000000  00000000  000cebdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  00278e45  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000a42c  00000000  00000000  00278e98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e0 	.word	0x240001e0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800fb3c 	.word	0x0800fb3c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e4 	.word	0x240001e4
 80002dc:	0800fb3c 	.word	0x0800fb3c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b09a      	sub	sp, #104	; 0x68
 800068c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800068e:	f002 fd25 	bl	80030dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000692:	f000 f837 	bl	8000704 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000696:	f000 f8bb 	bl	8000810 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800069a:	f001 f95b 	bl	8001954 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 800069e:	f000 fa67 	bl	8000b70 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 80006a2:	f000 fac9 	bl	8000c38 <MX_FDCAN2_Init>
  MX_I2C1_Init();
 80006a6:	f000 fb2b 	bl	8000d00 <MX_I2C1_Init>
  MX_I2C2_Init();
 80006aa:	f000 fb69 	bl	8000d80 <MX_I2C2_Init>
  MX_I2C4_Init();
 80006ae:	f000 fba7 	bl	8000e00 <MX_I2C4_Init>
  MX_USART1_Init();
 80006b2:	f000 fccb 	bl	800104c <MX_USART1_Init>
  MX_USART2_UART_Init();
 80006b6:	f000 fd15 	bl	80010e4 <MX_USART2_UART_Init>
  MX_USART3_Init();
 80006ba:	f000 fd5f 	bl	800117c <MX_USART3_Init>
  MX_ADC1_Init();
 80006be:	f000 f8d5 	bl	800086c <MX_ADC1_Init>
  MX_ADC2_Init();
 80006c2:	f000 f94d 	bl	8000960 <MX_ADC2_Init>
  MX_ADC3_Init();
 80006c6:	f000 f9b1 	bl	8000a2c <MX_ADC3_Init>
  MX_QUADSPI_Init();
 80006ca:	f000 fdef 	bl	80012ac <MX_QUADSPI_Init>
  MX_SPI1_Init();
 80006ce:	f000 fe19 	bl	8001304 <MX_SPI1_Init>
  MX_SPI2_Init();
 80006d2:	f000 fe6d 	bl	80013b0 <MX_SPI2_Init>
  MX_SPI4_Init();
 80006d6:	f000 fec1 	bl	800145c <MX_SPI4_Init>
  MX_USART6_Init();
 80006da:	f000 fd9b 	bl	8001214 <MX_USART6_Init>
  MX_DAC1_Init();
 80006de:	f000 fa0b 	bl	8000af8 <MX_DAC1_Init>
  MX_LPUART1_UART_Init();
 80006e2:	f000 fbcd 	bl	8000e80 <MX_LPUART1_UART_Init>
  MX_UART4_Init();
 80006e6:	f000 fc19 	bl	8000f1c <MX_UART4_Init>
  MX_UART8_Init();
 80006ea:	f000 fc63 	bl	8000fb4 <MX_UART8_Init>
  MX_TIM1_Init();
 80006ee:	f000 ff0b 	bl	8001508 <MX_TIM1_Init>
  MX_TIM5_Init();
 80006f2:	f001 f811 	bl	8001718 <MX_TIM5_Init>
  MX_TIM15_Init();
 80006f6:	f001 f869 	bl	80017cc <MX_TIM15_Init>
  MX_DMA_Init();
 80006fa:	f001 f90b 	bl	8001914 <MX_DMA_Init>
  MX_TIM4_Init();
 80006fe:	f000 ff93 	bl	8001628 <MX_TIM4_Init>
//  bno_test();
//  VL53l1_test();
//  hx711_test


  while (1)
 8000702:	e7fe      	b.n	8000702 <main+0x7a>

08000704 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b09c      	sub	sp, #112	; 0x70
 8000708:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800070e:	224c      	movs	r2, #76	; 0x4c
 8000710:	2100      	movs	r1, #0
 8000712:	4618      	mov	r0, r3
 8000714:	f00c fdd8 	bl	800d2c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000718:	1d3b      	adds	r3, r7, #4
 800071a:	2220      	movs	r2, #32
 800071c:	2100      	movs	r1, #0
 800071e:	4618      	mov	r0, r3
 8000720:	f00c fdd2 	bl	800d2c8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000724:	2002      	movs	r0, #2
 8000726:	f006 fba3 	bl	8006e70 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800072a:	2300      	movs	r3, #0
 800072c:	603b      	str	r3, [r7, #0]
 800072e:	4b35      	ldr	r3, [pc, #212]	; (8000804 <SystemClock_Config+0x100>)
 8000730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000732:	4a34      	ldr	r2, [pc, #208]	; (8000804 <SystemClock_Config+0x100>)
 8000734:	f023 0301 	bic.w	r3, r3, #1
 8000738:	62d3      	str	r3, [r2, #44]	; 0x2c
 800073a:	4b32      	ldr	r3, [pc, #200]	; (8000804 <SystemClock_Config+0x100>)
 800073c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800073e:	f003 0301 	and.w	r3, r3, #1
 8000742:	603b      	str	r3, [r7, #0]
 8000744:	4b30      	ldr	r3, [pc, #192]	; (8000808 <SystemClock_Config+0x104>)
 8000746:	699b      	ldr	r3, [r3, #24]
 8000748:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800074c:	4a2e      	ldr	r2, [pc, #184]	; (8000808 <SystemClock_Config+0x104>)
 800074e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000752:	6193      	str	r3, [r2, #24]
 8000754:	4b2c      	ldr	r3, [pc, #176]	; (8000808 <SystemClock_Config+0x104>)
 8000756:	699b      	ldr	r3, [r3, #24]
 8000758:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800075c:	603b      	str	r3, [r7, #0]
 800075e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000760:	bf00      	nop
 8000762:	4b29      	ldr	r3, [pc, #164]	; (8000808 <SystemClock_Config+0x104>)
 8000764:	699b      	ldr	r3, [r3, #24]
 8000766:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800076a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800076e:	d1f8      	bne.n	8000762 <SystemClock_Config+0x5e>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8000770:	4b26      	ldr	r3, [pc, #152]	; (800080c <SystemClock_Config+0x108>)
 8000772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000774:	4a25      	ldr	r2, [pc, #148]	; (800080c <SystemClock_Config+0x108>)
 8000776:	f023 0303 	bic.w	r3, r3, #3
 800077a:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800077c:	2302      	movs	r3, #2
 800077e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000780:	2301      	movs	r3, #1
 8000782:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000784:	2340      	movs	r3, #64	; 0x40
 8000786:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000788:	2302      	movs	r3, #2
 800078a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800078c:	2300      	movs	r3, #0
 800078e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000790:	2304      	movs	r3, #4
 8000792:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 9;
 8000794:	2309      	movs	r3, #9
 8000796:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000798:	2302      	movs	r3, #2
 800079a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800079c:	2303      	movs	r3, #3
 800079e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007a0:	2302      	movs	r3, #2
 80007a2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80007a4:	230c      	movs	r3, #12
 80007a6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 80007a8:	2302      	movs	r3, #2
 80007aa:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 80007ac:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80007b0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007b6:	4618      	mov	r0, r3
 80007b8:	f006 fc4e 	bl	8007058 <HAL_RCC_OscConfig>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007c2:	f001 f9d5 	bl	8001b70 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007c6:	233f      	movs	r3, #63	; 0x3f
 80007c8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007ca:	2300      	movs	r3, #0
 80007cc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007ce:	2300      	movs	r3, #0
 80007d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80007d2:	2300      	movs	r3, #0
 80007d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80007d6:	2340      	movs	r3, #64	; 0x40
 80007d8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007da:	2340      	movs	r3, #64	; 0x40
 80007dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80007de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007e2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80007e4:	2340      	movs	r3, #64	; 0x40
 80007e6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007e8:	1d3b      	adds	r3, r7, #4
 80007ea:	2101      	movs	r1, #1
 80007ec:	4618      	mov	r0, r3
 80007ee:	f007 f843 	bl	8007878 <HAL_RCC_ClockConfig>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <SystemClock_Config+0xf8>
  {
    Error_Handler();
 80007f8:	f001 f9ba 	bl	8001b70 <Error_Handler>
  }
}
 80007fc:	bf00      	nop
 80007fe:	3770      	adds	r7, #112	; 0x70
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	58000400 	.word	0x58000400
 8000808:	58024800 	.word	0x58024800
 800080c:	58024400 	.word	0x58024400

08000810 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b0b0      	sub	sp, #192	; 0xc0
 8000814:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000816:	1d3b      	adds	r3, r7, #4
 8000818:	22bc      	movs	r2, #188	; 0xbc
 800081a:	2100      	movs	r1, #0
 800081c:	4618      	mov	r0, r3
 800081e:	f00c fd53 	bl	800d2c8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000822:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000826:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8000828:	2304      	movs	r3, #4
 800082a:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 9;
 800082c:	2309      	movs	r3, #9
 800082e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 8000830:	2304      	movs	r3, #4
 8000832:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000834:	2302      	movs	r3, #2
 8000836:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000838:	2302      	movs	r3, #2
 800083a:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800083c:	23c0      	movs	r3, #192	; 0xc0
 800083e:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000840:	2320      	movs	r3, #32
 8000842:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 8000844:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000848:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800084a:	2300      	movs	r3, #0
 800084c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000850:	1d3b      	adds	r3, r7, #4
 8000852:	4618      	mov	r0, r3
 8000854:	f007 fb9c 	bl	8007f90 <HAL_RCCEx_PeriphCLKConfig>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <PeriphCommonClock_Config+0x52>
  {
    Error_Handler();
 800085e:	f001 f987 	bl	8001b70 <Error_Handler>
  }
}
 8000862:	bf00      	nop
 8000864:	37c0      	adds	r7, #192	; 0xc0
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
	...

0800086c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b08a      	sub	sp, #40	; 0x28
 8000870:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000872:	f107 031c 	add.w	r3, r7, #28
 8000876:	2200      	movs	r2, #0
 8000878:	601a      	str	r2, [r3, #0]
 800087a:	605a      	str	r2, [r3, #4]
 800087c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800087e:	463b      	mov	r3, r7
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	605a      	str	r2, [r3, #4]
 8000886:	609a      	str	r2, [r3, #8]
 8000888:	60da      	str	r2, [r3, #12]
 800088a:	611a      	str	r2, [r3, #16]
 800088c:	615a      	str	r2, [r3, #20]
 800088e:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000890:	4b2f      	ldr	r3, [pc, #188]	; (8000950 <MX_ADC1_Init+0xe4>)
 8000892:	4a30      	ldr	r2, [pc, #192]	; (8000954 <MX_ADC1_Init+0xe8>)
 8000894:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000896:	4b2e      	ldr	r3, [pc, #184]	; (8000950 <MX_ADC1_Init+0xe4>)
 8000898:	2200      	movs	r2, #0
 800089a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 800089c:	4b2c      	ldr	r3, [pc, #176]	; (8000950 <MX_ADC1_Init+0xe4>)
 800089e:	2200      	movs	r2, #0
 80008a0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008a2:	4b2b      	ldr	r3, [pc, #172]	; (8000950 <MX_ADC1_Init+0xe4>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008a8:	4b29      	ldr	r3, [pc, #164]	; (8000950 <MX_ADC1_Init+0xe4>)
 80008aa:	2204      	movs	r2, #4
 80008ac:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80008ae:	4b28      	ldr	r3, [pc, #160]	; (8000950 <MX_ADC1_Init+0xe4>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008b4:	4b26      	ldr	r3, [pc, #152]	; (8000950 <MX_ADC1_Init+0xe4>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 80008ba:	4b25      	ldr	r3, [pc, #148]	; (8000950 <MX_ADC1_Init+0xe4>)
 80008bc:	2201      	movs	r2, #1
 80008be:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008c0:	4b23      	ldr	r3, [pc, #140]	; (8000950 <MX_ADC1_Init+0xe4>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008c6:	4b22      	ldr	r3, [pc, #136]	; (8000950 <MX_ADC1_Init+0xe4>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008cc:	4b20      	ldr	r3, [pc, #128]	; (8000950 <MX_ADC1_Init+0xe4>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80008d2:	4b1f      	ldr	r3, [pc, #124]	; (8000950 <MX_ADC1_Init+0xe4>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008d8:	4b1d      	ldr	r3, [pc, #116]	; (8000950 <MX_ADC1_Init+0xe4>)
 80008da:	2200      	movs	r2, #0
 80008dc:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80008de:	4b1c      	ldr	r3, [pc, #112]	; (8000950 <MX_ADC1_Init+0xe4>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80008e4:	4b1a      	ldr	r3, [pc, #104]	; (8000950 <MX_ADC1_Init+0xe4>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008ec:	4818      	ldr	r0, [pc, #96]	; (8000950 <MX_ADC1_Init+0xe4>)
 80008ee:	f002 fe43 	bl	8003578 <HAL_ADC_Init>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80008f8:	f001 f93a 	bl	8001b70 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80008fc:	2300      	movs	r3, #0
 80008fe:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000900:	f107 031c 	add.w	r3, r7, #28
 8000904:	4619      	mov	r1, r3
 8000906:	4812      	ldr	r0, [pc, #72]	; (8000950 <MX_ADC1_Init+0xe4>)
 8000908:	f003 fc56 	bl	80041b8 <HAL_ADCEx_MultiModeConfigChannel>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000912:	f001 f92d 	bl	8001b70 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000916:	4b10      	ldr	r3, [pc, #64]	; (8000958 <MX_ADC1_Init+0xec>)
 8000918:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800091a:	2306      	movs	r3, #6
 800091c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800091e:	2300      	movs	r3, #0
 8000920:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000922:	4b0e      	ldr	r3, [pc, #56]	; (800095c <MX_ADC1_Init+0xf0>)
 8000924:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000926:	2304      	movs	r3, #4
 8000928:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800092a:	2300      	movs	r3, #0
 800092c:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 800092e:	2300      	movs	r3, #0
 8000930:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000932:	463b      	mov	r3, r7
 8000934:	4619      	mov	r1, r3
 8000936:	4806      	ldr	r0, [pc, #24]	; (8000950 <MX_ADC1_Init+0xe4>)
 8000938:	f002 ffbe 	bl	80038b8 <HAL_ADC_ConfigChannel>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 8000942:	f001 f915 	bl	8001b70 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000946:	bf00      	nop
 8000948:	3728      	adds	r7, #40	; 0x28
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	24000640 	.word	0x24000640
 8000954:	40022000 	.word	0x40022000
 8000958:	10c00010 	.word	0x10c00010
 800095c:	47ff0000 	.word	0x47ff0000

08000960 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b088      	sub	sp, #32
 8000964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000966:	1d3b      	adds	r3, r7, #4
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
 800096c:	605a      	str	r2, [r3, #4]
 800096e:	609a      	str	r2, [r3, #8]
 8000970:	60da      	str	r2, [r3, #12]
 8000972:	611a      	str	r2, [r3, #16]
 8000974:	615a      	str	r2, [r3, #20]
 8000976:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8000978:	4b28      	ldr	r3, [pc, #160]	; (8000a1c <MX_ADC2_Init+0xbc>)
 800097a:	4a29      	ldr	r2, [pc, #164]	; (8000a20 <MX_ADC2_Init+0xc0>)
 800097c:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800097e:	4b27      	ldr	r3, [pc, #156]	; (8000a1c <MX_ADC2_Init+0xbc>)
 8000980:	2200      	movs	r2, #0
 8000982:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000984:	4b25      	ldr	r3, [pc, #148]	; (8000a1c <MX_ADC2_Init+0xbc>)
 8000986:	2200      	movs	r2, #0
 8000988:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800098a:	4b24      	ldr	r3, [pc, #144]	; (8000a1c <MX_ADC2_Init+0xbc>)
 800098c:	2200      	movs	r2, #0
 800098e:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000990:	4b22      	ldr	r3, [pc, #136]	; (8000a1c <MX_ADC2_Init+0xbc>)
 8000992:	2204      	movs	r2, #4
 8000994:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000996:	4b21      	ldr	r3, [pc, #132]	; (8000a1c <MX_ADC2_Init+0xbc>)
 8000998:	2200      	movs	r2, #0
 800099a:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800099c:	4b1f      	ldr	r3, [pc, #124]	; (8000a1c <MX_ADC2_Init+0xbc>)
 800099e:	2200      	movs	r2, #0
 80009a0:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 80009a2:	4b1e      	ldr	r3, [pc, #120]	; (8000a1c <MX_ADC2_Init+0xbc>)
 80009a4:	2201      	movs	r2, #1
 80009a6:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80009a8:	4b1c      	ldr	r3, [pc, #112]	; (8000a1c <MX_ADC2_Init+0xbc>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009ae:	4b1b      	ldr	r3, [pc, #108]	; (8000a1c <MX_ADC2_Init+0xbc>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009b4:	4b19      	ldr	r3, [pc, #100]	; (8000a1c <MX_ADC2_Init+0xbc>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80009ba:	4b18      	ldr	r3, [pc, #96]	; (8000a1c <MX_ADC2_Init+0xbc>)
 80009bc:	2200      	movs	r2, #0
 80009be:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009c0:	4b16      	ldr	r3, [pc, #88]	; (8000a1c <MX_ADC2_Init+0xbc>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80009c6:	4b15      	ldr	r3, [pc, #84]	; (8000a1c <MX_ADC2_Init+0xbc>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 80009cc:	4b13      	ldr	r3, [pc, #76]	; (8000a1c <MX_ADC2_Init+0xbc>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80009d4:	4811      	ldr	r0, [pc, #68]	; (8000a1c <MX_ADC2_Init+0xbc>)
 80009d6:	f002 fdcf 	bl	8003578 <HAL_ADC_Init>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 80009e0:	f001 f8c6 	bl	8001b70 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80009e4:	4b0f      	ldr	r3, [pc, #60]	; (8000a24 <MX_ADC2_Init+0xc4>)
 80009e6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009e8:	2306      	movs	r3, #6
 80009ea:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80009ec:	2300      	movs	r3, #0
 80009ee:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 80009f0:	4b0d      	ldr	r3, [pc, #52]	; (8000a28 <MX_ADC2_Init+0xc8>)
 80009f2:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009f4:	2304      	movs	r3, #4
 80009f6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80009f8:	2300      	movs	r3, #0
 80009fa:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80009fc:	2300      	movs	r3, #0
 80009fe:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000a00:	1d3b      	adds	r3, r7, #4
 8000a02:	4619      	mov	r1, r3
 8000a04:	4805      	ldr	r0, [pc, #20]	; (8000a1c <MX_ADC2_Init+0xbc>)
 8000a06:	f002 ff57 	bl	80038b8 <HAL_ADC_ConfigChannel>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_ADC2_Init+0xb4>
  {
    Error_Handler();
 8000a10:	f001 f8ae 	bl	8001b70 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000a14:	bf00      	nop
 8000a16:	3720      	adds	r7, #32
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	2400041c 	.word	0x2400041c
 8000a20:	40022100 	.word	0x40022100
 8000a24:	10c00010 	.word	0x10c00010
 8000a28:	47ff0000 	.word	0x47ff0000

08000a2c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b088      	sub	sp, #32
 8000a30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a32:	1d3b      	adds	r3, r7, #4
 8000a34:	2200      	movs	r2, #0
 8000a36:	601a      	str	r2, [r3, #0]
 8000a38:	605a      	str	r2, [r3, #4]
 8000a3a:	609a      	str	r2, [r3, #8]
 8000a3c:	60da      	str	r2, [r3, #12]
 8000a3e:	611a      	str	r2, [r3, #16]
 8000a40:	615a      	str	r2, [r3, #20]
 8000a42:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 8000a44:	4b28      	ldr	r3, [pc, #160]	; (8000ae8 <MX_ADC3_Init+0xbc>)
 8000a46:	4a29      	ldr	r2, [pc, #164]	; (8000aec <MX_ADC3_Init+0xc0>)
 8000a48:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a4a:	4b27      	ldr	r3, [pc, #156]	; (8000ae8 <MX_ADC3_Init+0xbc>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8000a50:	4b25      	ldr	r3, [pc, #148]	; (8000ae8 <MX_ADC3_Init+0xbc>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a56:	4b24      	ldr	r3, [pc, #144]	; (8000ae8 <MX_ADC3_Init+0xbc>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a5c:	4b22      	ldr	r3, [pc, #136]	; (8000ae8 <MX_ADC3_Init+0xbc>)
 8000a5e:	2204      	movs	r2, #4
 8000a60:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000a62:	4b21      	ldr	r3, [pc, #132]	; (8000ae8 <MX_ADC3_Init+0xbc>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000a68:	4b1f      	ldr	r3, [pc, #124]	; (8000ae8 <MX_ADC3_Init+0xbc>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8000a6e:	4b1e      	ldr	r3, [pc, #120]	; (8000ae8 <MX_ADC3_Init+0xbc>)
 8000a70:	2201      	movs	r2, #1
 8000a72:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000a74:	4b1c      	ldr	r3, [pc, #112]	; (8000ae8 <MX_ADC3_Init+0xbc>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a7a:	4b1b      	ldr	r3, [pc, #108]	; (8000ae8 <MX_ADC3_Init+0xbc>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a80:	4b19      	ldr	r3, [pc, #100]	; (8000ae8 <MX_ADC3_Init+0xbc>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000a86:	4b18      	ldr	r3, [pc, #96]	; (8000ae8 <MX_ADC3_Init+0xbc>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a8c:	4b16      	ldr	r3, [pc, #88]	; (8000ae8 <MX_ADC3_Init+0xbc>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000a92:	4b15      	ldr	r3, [pc, #84]	; (8000ae8 <MX_ADC3_Init+0xbc>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000a98:	4b13      	ldr	r3, [pc, #76]	; (8000ae8 <MX_ADC3_Init+0xbc>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000aa0:	4811      	ldr	r0, [pc, #68]	; (8000ae8 <MX_ADC3_Init+0xbc>)
 8000aa2:	f002 fd69 	bl	8003578 <HAL_ADC_Init>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_ADC3_Init+0x84>
  {
    Error_Handler();
 8000aac:	f001 f860 	bl	8001b70 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000ab0:	4b0f      	ldr	r3, [pc, #60]	; (8000af0 <MX_ADC3_Init+0xc4>)
 8000ab2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ab4:	2306      	movs	r3, #6
 8000ab6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000abc:	4b0d      	ldr	r3, [pc, #52]	; (8000af4 <MX_ADC3_Init+0xc8>)
 8000abe:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ac0:	2304      	movs	r3, #4
 8000ac2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000acc:	1d3b      	adds	r3, r7, #4
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4805      	ldr	r0, [pc, #20]	; (8000ae8 <MX_ADC3_Init+0xbc>)
 8000ad2:	f002 fef1 	bl	80038b8 <HAL_ADC_ConfigChannel>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_ADC3_Init+0xb4>
  {
    Error_Handler();
 8000adc:	f001 f848 	bl	8001b70 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000ae0:	bf00      	nop
 8000ae2:	3720      	adds	r7, #32
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	240006a4 	.word	0x240006a4
 8000aec:	58026000 	.word	0x58026000
 8000af0:	2a000400 	.word	0x2a000400
 8000af4:	47ff0000 	.word	0x47ff0000

08000af8 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b08a      	sub	sp, #40	; 0x28
 8000afc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000afe:	1d3b      	adds	r3, r7, #4
 8000b00:	2224      	movs	r2, #36	; 0x24
 8000b02:	2100      	movs	r1, #0
 8000b04:	4618      	mov	r0, r3
 8000b06:	f00c fbdf 	bl	800d2c8 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000b0a:	4b17      	ldr	r3, [pc, #92]	; (8000b68 <MX_DAC1_Init+0x70>)
 8000b0c:	4a17      	ldr	r2, [pc, #92]	; (8000b6c <MX_DAC1_Init+0x74>)
 8000b0e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000b10:	4815      	ldr	r0, [pc, #84]	; (8000b68 <MX_DAC1_Init+0x70>)
 8000b12:	f003 fd3e 	bl	8004592 <HAL_DAC_Init>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000b1c:	f001 f828 	bl	8001b70 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000b20:	2300      	movs	r3, #0
 8000b22:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000b24:	2300      	movs	r3, #0
 8000b26:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000b30:	2300      	movs	r3, #0
 8000b32:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000b34:	1d3b      	adds	r3, r7, #4
 8000b36:	2200      	movs	r2, #0
 8000b38:	4619      	mov	r1, r3
 8000b3a:	480b      	ldr	r0, [pc, #44]	; (8000b68 <MX_DAC1_Init+0x70>)
 8000b3c:	f003 fd4c 	bl	80045d8 <HAL_DAC_ConfigChannel>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000b46:	f001 f813 	bl	8001b70 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000b4a:	1d3b      	adds	r3, r7, #4
 8000b4c:	2210      	movs	r2, #16
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4805      	ldr	r0, [pc, #20]	; (8000b68 <MX_DAC1_Init+0x70>)
 8000b52:	f003 fd41 	bl	80045d8 <HAL_DAC_ConfigChannel>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 8000b5c:	f001 f808 	bl	8001b70 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000b60:	bf00      	nop
 8000b62:	3728      	adds	r7, #40	; 0x28
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	24000408 	.word	0x24000408
 8000b6c:	40007400 	.word	0x40007400

08000b70 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000b74:	4b2e      	ldr	r3, [pc, #184]	; (8000c30 <MX_FDCAN1_Init+0xc0>)
 8000b76:	4a2f      	ldr	r2, [pc, #188]	; (8000c34 <MX_FDCAN1_Init+0xc4>)
 8000b78:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000b7a:	4b2d      	ldr	r3, [pc, #180]	; (8000c30 <MX_FDCAN1_Init+0xc0>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000b80:	4b2b      	ldr	r3, [pc, #172]	; (8000c30 <MX_FDCAN1_Init+0xc0>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000b86:	4b2a      	ldr	r3, [pc, #168]	; (8000c30 <MX_FDCAN1_Init+0xc0>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000b8c:	4b28      	ldr	r3, [pc, #160]	; (8000c30 <MX_FDCAN1_Init+0xc0>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000b92:	4b27      	ldr	r3, [pc, #156]	; (8000c30 <MX_FDCAN1_Init+0xc0>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000b98:	4b25      	ldr	r3, [pc, #148]	; (8000c30 <MX_FDCAN1_Init+0xc0>)
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000b9e:	4b24      	ldr	r3, [pc, #144]	; (8000c30 <MX_FDCAN1_Init+0xc0>)
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000ba4:	4b22      	ldr	r3, [pc, #136]	; (8000c30 <MX_FDCAN1_Init+0xc0>)
 8000ba6:	2202      	movs	r2, #2
 8000ba8:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000baa:	4b21      	ldr	r3, [pc, #132]	; (8000c30 <MX_FDCAN1_Init+0xc0>)
 8000bac:	2202      	movs	r2, #2
 8000bae:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000bb0:	4b1f      	ldr	r3, [pc, #124]	; (8000c30 <MX_FDCAN1_Init+0xc0>)
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000bb6:	4b1e      	ldr	r3, [pc, #120]	; (8000c30 <MX_FDCAN1_Init+0xc0>)
 8000bb8:	2201      	movs	r2, #1
 8000bba:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000bbc:	4b1c      	ldr	r3, [pc, #112]	; (8000c30 <MX_FDCAN1_Init+0xc0>)
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000bc2:	4b1b      	ldr	r3, [pc, #108]	; (8000c30 <MX_FDCAN1_Init+0xc0>)
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000bc8:	4b19      	ldr	r3, [pc, #100]	; (8000c30 <MX_FDCAN1_Init+0xc0>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000bce:	4b18      	ldr	r3, [pc, #96]	; (8000c30 <MX_FDCAN1_Init+0xc0>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000bd4:	4b16      	ldr	r3, [pc, #88]	; (8000c30 <MX_FDCAN1_Init+0xc0>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000bda:	4b15      	ldr	r3, [pc, #84]	; (8000c30 <MX_FDCAN1_Init+0xc0>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000be0:	4b13      	ldr	r3, [pc, #76]	; (8000c30 <MX_FDCAN1_Init+0xc0>)
 8000be2:	2204      	movs	r2, #4
 8000be4:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000be6:	4b12      	ldr	r3, [pc, #72]	; (8000c30 <MX_FDCAN1_Init+0xc0>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000bec:	4b10      	ldr	r3, [pc, #64]	; (8000c30 <MX_FDCAN1_Init+0xc0>)
 8000bee:	2204      	movs	r2, #4
 8000bf0:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000bf2:	4b0f      	ldr	r3, [pc, #60]	; (8000c30 <MX_FDCAN1_Init+0xc0>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000bf8:	4b0d      	ldr	r3, [pc, #52]	; (8000c30 <MX_FDCAN1_Init+0xc0>)
 8000bfa:	2204      	movs	r2, #4
 8000bfc:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000bfe:	4b0c      	ldr	r3, [pc, #48]	; (8000c30 <MX_FDCAN1_Init+0xc0>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000c04:	4b0a      	ldr	r3, [pc, #40]	; (8000c30 <MX_FDCAN1_Init+0xc0>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8000c0a:	4b09      	ldr	r3, [pc, #36]	; (8000c30 <MX_FDCAN1_Init+0xc0>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000c10:	4b07      	ldr	r3, [pc, #28]	; (8000c30 <MX_FDCAN1_Init+0xc0>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000c16:	4b06      	ldr	r3, [pc, #24]	; (8000c30 <MX_FDCAN1_Init+0xc0>)
 8000c18:	2204      	movs	r2, #4
 8000c1a:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000c1c:	4804      	ldr	r0, [pc, #16]	; (8000c30 <MX_FDCAN1_Init+0xc0>)
 8000c1e:	f005 facd 	bl	80061bc <HAL_FDCAN_Init>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000c28:	f000 ffa2 	bl	8001b70 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000c2c:	bf00      	nop
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	240007f0 	.word	0x240007f0
 8000c34:	4000a000 	.word	0x4000a000

08000c38 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000c3c:	4b2e      	ldr	r3, [pc, #184]	; (8000cf8 <MX_FDCAN2_Init+0xc0>)
 8000c3e:	4a2f      	ldr	r2, [pc, #188]	; (8000cfc <MX_FDCAN2_Init+0xc4>)
 8000c40:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000c42:	4b2d      	ldr	r3, [pc, #180]	; (8000cf8 <MX_FDCAN2_Init+0xc0>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000c48:	4b2b      	ldr	r3, [pc, #172]	; (8000cf8 <MX_FDCAN2_Init+0xc0>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000c4e:	4b2a      	ldr	r3, [pc, #168]	; (8000cf8 <MX_FDCAN2_Init+0xc0>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000c54:	4b28      	ldr	r3, [pc, #160]	; (8000cf8 <MX_FDCAN2_Init+0xc0>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000c5a:	4b27      	ldr	r3, [pc, #156]	; (8000cf8 <MX_FDCAN2_Init+0xc0>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 8000c60:	4b25      	ldr	r3, [pc, #148]	; (8000cf8 <MX_FDCAN2_Init+0xc0>)
 8000c62:	2201      	movs	r2, #1
 8000c64:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000c66:	4b24      	ldr	r3, [pc, #144]	; (8000cf8 <MX_FDCAN2_Init+0xc0>)
 8000c68:	2201      	movs	r2, #1
 8000c6a:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8000c6c:	4b22      	ldr	r3, [pc, #136]	; (8000cf8 <MX_FDCAN2_Init+0xc0>)
 8000c6e:	2202      	movs	r2, #2
 8000c70:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000c72:	4b21      	ldr	r3, [pc, #132]	; (8000cf8 <MX_FDCAN2_Init+0xc0>)
 8000c74:	2202      	movs	r2, #2
 8000c76:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000c78:	4b1f      	ldr	r3, [pc, #124]	; (8000cf8 <MX_FDCAN2_Init+0xc0>)
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000c7e:	4b1e      	ldr	r3, [pc, #120]	; (8000cf8 <MX_FDCAN2_Init+0xc0>)
 8000c80:	2201      	movs	r2, #1
 8000c82:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000c84:	4b1c      	ldr	r3, [pc, #112]	; (8000cf8 <MX_FDCAN2_Init+0xc0>)
 8000c86:	2201      	movs	r2, #1
 8000c88:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000c8a:	4b1b      	ldr	r3, [pc, #108]	; (8000cf8 <MX_FDCAN2_Init+0xc0>)
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8000c90:	4b19      	ldr	r3, [pc, #100]	; (8000cf8 <MX_FDCAN2_Init+0xc0>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8000c96:	4b18      	ldr	r3, [pc, #96]	; (8000cf8 <MX_FDCAN2_Init+0xc0>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000c9c:	4b16      	ldr	r3, [pc, #88]	; (8000cf8 <MX_FDCAN2_Init+0xc0>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8000ca2:	4b15      	ldr	r3, [pc, #84]	; (8000cf8 <MX_FDCAN2_Init+0xc0>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000ca8:	4b13      	ldr	r3, [pc, #76]	; (8000cf8 <MX_FDCAN2_Init+0xc0>)
 8000caa:	2204      	movs	r2, #4
 8000cac:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8000cae:	4b12      	ldr	r3, [pc, #72]	; (8000cf8 <MX_FDCAN2_Init+0xc0>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000cb4:	4b10      	ldr	r3, [pc, #64]	; (8000cf8 <MX_FDCAN2_Init+0xc0>)
 8000cb6:	2204      	movs	r2, #4
 8000cb8:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000cba:	4b0f      	ldr	r3, [pc, #60]	; (8000cf8 <MX_FDCAN2_Init+0xc0>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000cc0:	4b0d      	ldr	r3, [pc, #52]	; (8000cf8 <MX_FDCAN2_Init+0xc0>)
 8000cc2:	2204      	movs	r2, #4
 8000cc4:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000cc6:	4b0c      	ldr	r3, [pc, #48]	; (8000cf8 <MX_FDCAN2_Init+0xc0>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000ccc:	4b0a      	ldr	r3, [pc, #40]	; (8000cf8 <MX_FDCAN2_Init+0xc0>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8000cd2:	4b09      	ldr	r3, [pc, #36]	; (8000cf8 <MX_FDCAN2_Init+0xc0>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000cd8:	4b07      	ldr	r3, [pc, #28]	; (8000cf8 <MX_FDCAN2_Init+0xc0>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000cde:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <MX_FDCAN2_Init+0xc0>)
 8000ce0:	2204      	movs	r2, #4
 8000ce2:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000ce4:	4804      	ldr	r0, [pc, #16]	; (8000cf8 <MX_FDCAN2_Init+0xc0>)
 8000ce6:	f005 fa69 	bl	80061bc <HAL_FDCAN_Init>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8000cf0:	f000 ff3e 	bl	8001b70 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000cf4:	bf00      	nop
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	24000b74 	.word	0x24000b74
 8000cfc:	4000a400 	.word	0x4000a400

08000d00 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d04:	4b1b      	ldr	r3, [pc, #108]	; (8000d74 <MX_I2C1_Init+0x74>)
 8000d06:	4a1c      	ldr	r2, [pc, #112]	; (8000d78 <MX_I2C1_Init+0x78>)
 8000d08:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000d0a:	4b1a      	ldr	r3, [pc, #104]	; (8000d74 <MX_I2C1_Init+0x74>)
 8000d0c:	4a1b      	ldr	r2, [pc, #108]	; (8000d7c <MX_I2C1_Init+0x7c>)
 8000d0e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000d10:	4b18      	ldr	r3, [pc, #96]	; (8000d74 <MX_I2C1_Init+0x74>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d16:	4b17      	ldr	r3, [pc, #92]	; (8000d74 <MX_I2C1_Init+0x74>)
 8000d18:	2201      	movs	r2, #1
 8000d1a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d1c:	4b15      	ldr	r3, [pc, #84]	; (8000d74 <MX_I2C1_Init+0x74>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000d22:	4b14      	ldr	r3, [pc, #80]	; (8000d74 <MX_I2C1_Init+0x74>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d28:	4b12      	ldr	r3, [pc, #72]	; (8000d74 <MX_I2C1_Init+0x74>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d2e:	4b11      	ldr	r3, [pc, #68]	; (8000d74 <MX_I2C1_Init+0x74>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d34:	4b0f      	ldr	r3, [pc, #60]	; (8000d74 <MX_I2C1_Init+0x74>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d3a:	480e      	ldr	r0, [pc, #56]	; (8000d74 <MX_I2C1_Init+0x74>)
 8000d3c:	f005 ff70 	bl	8006c20 <HAL_I2C_Init>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000d46:	f000 ff13 	bl	8001b70 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	4809      	ldr	r0, [pc, #36]	; (8000d74 <MX_I2C1_Init+0x74>)
 8000d4e:	f005 fff7 	bl	8006d40 <HAL_I2CEx_ConfigAnalogFilter>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d58:	f000 ff0a 	bl	8001b70 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	4805      	ldr	r0, [pc, #20]	; (8000d74 <MX_I2C1_Init+0x74>)
 8000d60:	f006 f839 	bl	8006dd6 <HAL_I2CEx_ConfigDigitalFilter>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d6a:	f000 ff01 	bl	8001b70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d6e:	bf00      	nop
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	24000480 	.word	0x24000480
 8000d78:	40005400 	.word	0x40005400
 8000d7c:	00707cbb 	.word	0x00707cbb

08000d80 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000d84:	4b1b      	ldr	r3, [pc, #108]	; (8000df4 <MX_I2C2_Init+0x74>)
 8000d86:	4a1c      	ldr	r2, [pc, #112]	; (8000df8 <MX_I2C2_Init+0x78>)
 8000d88:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00707CBB;
 8000d8a:	4b1a      	ldr	r3, [pc, #104]	; (8000df4 <MX_I2C2_Init+0x74>)
 8000d8c:	4a1b      	ldr	r2, [pc, #108]	; (8000dfc <MX_I2C2_Init+0x7c>)
 8000d8e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000d90:	4b18      	ldr	r3, [pc, #96]	; (8000df4 <MX_I2C2_Init+0x74>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d96:	4b17      	ldr	r3, [pc, #92]	; (8000df4 <MX_I2C2_Init+0x74>)
 8000d98:	2201      	movs	r2, #1
 8000d9a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d9c:	4b15      	ldr	r3, [pc, #84]	; (8000df4 <MX_I2C2_Init+0x74>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000da2:	4b14      	ldr	r3, [pc, #80]	; (8000df4 <MX_I2C2_Init+0x74>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000da8:	4b12      	ldr	r3, [pc, #72]	; (8000df4 <MX_I2C2_Init+0x74>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dae:	4b11      	ldr	r3, [pc, #68]	; (8000df4 <MX_I2C2_Init+0x74>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000db4:	4b0f      	ldr	r3, [pc, #60]	; (8000df4 <MX_I2C2_Init+0x74>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000dba:	480e      	ldr	r0, [pc, #56]	; (8000df4 <MX_I2C2_Init+0x74>)
 8000dbc:	f005 ff30 	bl	8006c20 <HAL_I2C_Init>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000dc6:	f000 fed3 	bl	8001b70 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000dca:	2100      	movs	r1, #0
 8000dcc:	4809      	ldr	r0, [pc, #36]	; (8000df4 <MX_I2C2_Init+0x74>)
 8000dce:	f005 ffb7 	bl	8006d40 <HAL_I2CEx_ConfigAnalogFilter>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000dd8:	f000 feca 	bl	8001b70 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000ddc:	2100      	movs	r1, #0
 8000dde:	4805      	ldr	r0, [pc, #20]	; (8000df4 <MX_I2C2_Init+0x74>)
 8000de0:	f005 fff9 	bl	8006dd6 <HAL_I2CEx_ConfigDigitalFilter>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000dea:	f000 fec1 	bl	8001b70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000dee:	bf00      	nop
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	24000518 	.word	0x24000518
 8000df8:	40005800 	.word	0x40005800
 8000dfc:	00707cbb 	.word	0x00707cbb

08000e00 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000e04:	4b1b      	ldr	r3, [pc, #108]	; (8000e74 <MX_I2C4_Init+0x74>)
 8000e06:	4a1c      	ldr	r2, [pc, #112]	; (8000e78 <MX_I2C4_Init+0x78>)
 8000e08:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00707CBB;
 8000e0a:	4b1a      	ldr	r3, [pc, #104]	; (8000e74 <MX_I2C4_Init+0x74>)
 8000e0c:	4a1b      	ldr	r2, [pc, #108]	; (8000e7c <MX_I2C4_Init+0x7c>)
 8000e0e:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000e10:	4b18      	ldr	r3, [pc, #96]	; (8000e74 <MX_I2C4_Init+0x74>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e16:	4b17      	ldr	r3, [pc, #92]	; (8000e74 <MX_I2C4_Init+0x74>)
 8000e18:	2201      	movs	r2, #1
 8000e1a:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e1c:	4b15      	ldr	r3, [pc, #84]	; (8000e74 <MX_I2C4_Init+0x74>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000e22:	4b14      	ldr	r3, [pc, #80]	; (8000e74 <MX_I2C4_Init+0x74>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e28:	4b12      	ldr	r3, [pc, #72]	; (8000e74 <MX_I2C4_Init+0x74>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e2e:	4b11      	ldr	r3, [pc, #68]	; (8000e74 <MX_I2C4_Init+0x74>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e34:	4b0f      	ldr	r3, [pc, #60]	; (8000e74 <MX_I2C4_Init+0x74>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000e3a:	480e      	ldr	r0, [pc, #56]	; (8000e74 <MX_I2C4_Init+0x74>)
 8000e3c:	f005 fef0 	bl	8006c20 <HAL_I2C_Init>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000e46:	f000 fe93 	bl	8001b70 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	4809      	ldr	r0, [pc, #36]	; (8000e74 <MX_I2C4_Init+0x74>)
 8000e4e:	f005 ff77 	bl	8006d40 <HAL_I2CEx_ConfigAnalogFilter>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000e58:	f000 fe8a 	bl	8001b70 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	4805      	ldr	r0, [pc, #20]	; (8000e74 <MX_I2C4_Init+0x74>)
 8000e60:	f005 ffb9 	bl	8006dd6 <HAL_I2CEx_ConfigDigitalFilter>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000e6a:	f000 fe81 	bl	8001b70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000e6e:	bf00      	nop
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	24000270 	.word	0x24000270
 8000e78:	58001c00 	.word	0x58001c00
 8000e7c:	00707cbb 	.word	0x00707cbb

08000e80 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000e84:	4b22      	ldr	r3, [pc, #136]	; (8000f10 <MX_LPUART1_UART_Init+0x90>)
 8000e86:	4a23      	ldr	r2, [pc, #140]	; (8000f14 <MX_LPUART1_UART_Init+0x94>)
 8000e88:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8000e8a:	4b21      	ldr	r3, [pc, #132]	; (8000f10 <MX_LPUART1_UART_Init+0x90>)
 8000e8c:	4a22      	ldr	r2, [pc, #136]	; (8000f18 <MX_LPUART1_UART_Init+0x98>)
 8000e8e:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e90:	4b1f      	ldr	r3, [pc, #124]	; (8000f10 <MX_LPUART1_UART_Init+0x90>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000e96:	4b1e      	ldr	r3, [pc, #120]	; (8000f10 <MX_LPUART1_UART_Init+0x90>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000e9c:	4b1c      	ldr	r3, [pc, #112]	; (8000f10 <MX_LPUART1_UART_Init+0x90>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000ea2:	4b1b      	ldr	r3, [pc, #108]	; (8000f10 <MX_LPUART1_UART_Init+0x90>)
 8000ea4:	220c      	movs	r2, #12
 8000ea6:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ea8:	4b19      	ldr	r3, [pc, #100]	; (8000f10 <MX_LPUART1_UART_Init+0x90>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000eae:	4b18      	ldr	r3, [pc, #96]	; (8000f10 <MX_LPUART1_UART_Init+0x90>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000eb4:	4b16      	ldr	r3, [pc, #88]	; (8000f10 <MX_LPUART1_UART_Init+0x90>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000eba:	4b15      	ldr	r3, [pc, #84]	; (8000f10 <MX_LPUART1_UART_Init+0x90>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000ec0:	4b13      	ldr	r3, [pc, #76]	; (8000f10 <MX_LPUART1_UART_Init+0x90>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000ec6:	4812      	ldr	r0, [pc, #72]	; (8000f10 <MX_LPUART1_UART_Init+0x90>)
 8000ec8:	f00a fac4 	bl	800b454 <HAL_UART_Init>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 8000ed2:	f000 fe4d 	bl	8001b70 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	480d      	ldr	r0, [pc, #52]	; (8000f10 <MX_LPUART1_UART_Init+0x90>)
 8000eda:	f00b fa11 	bl	800c300 <HAL_UARTEx_SetTxFifoThreshold>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 8000ee4:	f000 fe44 	bl	8001b70 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ee8:	2100      	movs	r1, #0
 8000eea:	4809      	ldr	r0, [pc, #36]	; (8000f10 <MX_LPUART1_UART_Init+0x90>)
 8000eec:	f00b fa46 	bl	800c37c <HAL_UARTEx_SetRxFifoThreshold>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 8000ef6:	f000 fe3b 	bl	8001b70 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000efa:	4805      	ldr	r0, [pc, #20]	; (8000f10 <MX_LPUART1_UART_Init+0x90>)
 8000efc:	f00b f9c7 	bl	800c28e <HAL_UARTEx_DisableFifoMode>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 8000f06:	f000 fe33 	bl	8001b70 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	240005b0 	.word	0x240005b0
 8000f14:	58000c00 	.word	0x58000c00
 8000f18:	00033324 	.word	0x00033324

08000f1c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000f20:	4b22      	ldr	r3, [pc, #136]	; (8000fac <MX_UART4_Init+0x90>)
 8000f22:	4a23      	ldr	r2, [pc, #140]	; (8000fb0 <MX_UART4_Init+0x94>)
 8000f24:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000f26:	4b21      	ldr	r3, [pc, #132]	; (8000fac <MX_UART4_Init+0x90>)
 8000f28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f2c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000f2e:	4b1f      	ldr	r3, [pc, #124]	; (8000fac <MX_UART4_Init+0x90>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000f34:	4b1d      	ldr	r3, [pc, #116]	; (8000fac <MX_UART4_Init+0x90>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000f3a:	4b1c      	ldr	r3, [pc, #112]	; (8000fac <MX_UART4_Init+0x90>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000f40:	4b1a      	ldr	r3, [pc, #104]	; (8000fac <MX_UART4_Init+0x90>)
 8000f42:	220c      	movs	r2, #12
 8000f44:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f46:	4b19      	ldr	r3, [pc, #100]	; (8000fac <MX_UART4_Init+0x90>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f4c:	4b17      	ldr	r3, [pc, #92]	; (8000fac <MX_UART4_Init+0x90>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f52:	4b16      	ldr	r3, [pc, #88]	; (8000fac <MX_UART4_Init+0x90>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f58:	4b14      	ldr	r3, [pc, #80]	; (8000fac <MX_UART4_Init+0x90>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f5e:	4b13      	ldr	r3, [pc, #76]	; (8000fac <MX_UART4_Init+0x90>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000f64:	4811      	ldr	r0, [pc, #68]	; (8000fac <MX_UART4_Init+0x90>)
 8000f66:	f00a fa75 	bl	800b454 <HAL_UART_Init>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000f70:	f000 fdfe 	bl	8001b70 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f74:	2100      	movs	r1, #0
 8000f76:	480d      	ldr	r0, [pc, #52]	; (8000fac <MX_UART4_Init+0x90>)
 8000f78:	f00b f9c2 	bl	800c300 <HAL_UARTEx_SetTxFifoThreshold>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000f82:	f000 fdf5 	bl	8001b70 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f86:	2100      	movs	r1, #0
 8000f88:	4808      	ldr	r0, [pc, #32]	; (8000fac <MX_UART4_Init+0x90>)
 8000f8a:	f00b f9f7 	bl	800c37c <HAL_UARTEx_SetRxFifoThreshold>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000f94:	f000 fdec 	bl	8001b70 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000f98:	4804      	ldr	r0, [pc, #16]	; (8000fac <MX_UART4_Init+0x90>)
 8000f9a:	f00b f978 	bl	800c28e <HAL_UARTEx_DisableFifoMode>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000fa4:	f000 fde4 	bl	8001b70 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000fa8:	bf00      	nop
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	2400096c 	.word	0x2400096c
 8000fb0:	40004c00 	.word	0x40004c00

08000fb4 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8000fb8:	4b22      	ldr	r3, [pc, #136]	; (8001044 <MX_UART8_Init+0x90>)
 8000fba:	4a23      	ldr	r2, [pc, #140]	; (8001048 <MX_UART8_Init+0x94>)
 8000fbc:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8000fbe:	4b21      	ldr	r3, [pc, #132]	; (8001044 <MX_UART8_Init+0x90>)
 8000fc0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fc4:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8000fc6:	4b1f      	ldr	r3, [pc, #124]	; (8001044 <MX_UART8_Init+0x90>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8000fcc:	4b1d      	ldr	r3, [pc, #116]	; (8001044 <MX_UART8_Init+0x90>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8000fd2:	4b1c      	ldr	r3, [pc, #112]	; (8001044 <MX_UART8_Init+0x90>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8000fd8:	4b1a      	ldr	r3, [pc, #104]	; (8001044 <MX_UART8_Init+0x90>)
 8000fda:	220c      	movs	r2, #12
 8000fdc:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fde:	4b19      	ldr	r3, [pc, #100]	; (8001044 <MX_UART8_Init+0x90>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fe4:	4b17      	ldr	r3, [pc, #92]	; (8001044 <MX_UART8_Init+0x90>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fea:	4b16      	ldr	r3, [pc, #88]	; (8001044 <MX_UART8_Init+0x90>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ff0:	4b14      	ldr	r3, [pc, #80]	; (8001044 <MX_UART8_Init+0x90>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ff6:	4b13      	ldr	r3, [pc, #76]	; (8001044 <MX_UART8_Init+0x90>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8000ffc:	4811      	ldr	r0, [pc, #68]	; (8001044 <MX_UART8_Init+0x90>)
 8000ffe:	f00a fa29 	bl	800b454 <HAL_UART_Init>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <MX_UART8_Init+0x58>
  {
    Error_Handler();
 8001008:	f000 fdb2 	bl	8001b70 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800100c:	2100      	movs	r1, #0
 800100e:	480d      	ldr	r0, [pc, #52]	; (8001044 <MX_UART8_Init+0x90>)
 8001010:	f00b f976 	bl	800c300 <HAL_UARTEx_SetTxFifoThreshold>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 800101a:	f000 fda9 	bl	8001b70 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800101e:	2100      	movs	r1, #0
 8001020:	4808      	ldr	r0, [pc, #32]	; (8001044 <MX_UART8_Init+0x90>)
 8001022:	f00b f9ab 	bl	800c37c <HAL_UARTEx_SetRxFifoThreshold>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 800102c:	f000 fda0 	bl	8001b70 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8001030:	4804      	ldr	r0, [pc, #16]	; (8001044 <MX_UART8_Init+0x90>)
 8001032:	f00b f92c 	bl	800c28e <HAL_UARTEx_DisableFifoMode>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 800103c:	f000 fd98 	bl	8001b70 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8001040:	bf00      	nop
 8001042:	bd80      	pop	{r7, pc}
 8001044:	240008dc 	.word	0x240008dc
 8001048:	40007c00 	.word	0x40007c00

0800104c <MX_USART1_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  husart1.Instance = USART1;
 8001050:	4b22      	ldr	r3, [pc, #136]	; (80010dc <MX_USART1_Init+0x90>)
 8001052:	4a23      	ldr	r2, [pc, #140]	; (80010e0 <MX_USART1_Init+0x94>)
 8001054:	601a      	str	r2, [r3, #0]
  husart1.Init.BaudRate = 115200;
 8001056:	4b21      	ldr	r3, [pc, #132]	; (80010dc <MX_USART1_Init+0x90>)
 8001058:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800105c:	605a      	str	r2, [r3, #4]
  husart1.Init.WordLength = USART_WORDLENGTH_8B;
 800105e:	4b1f      	ldr	r3, [pc, #124]	; (80010dc <MX_USART1_Init+0x90>)
 8001060:	2200      	movs	r2, #0
 8001062:	609a      	str	r2, [r3, #8]
  husart1.Init.StopBits = USART_STOPBITS_1;
 8001064:	4b1d      	ldr	r3, [pc, #116]	; (80010dc <MX_USART1_Init+0x90>)
 8001066:	2200      	movs	r2, #0
 8001068:	60da      	str	r2, [r3, #12]
  husart1.Init.Parity = USART_PARITY_NONE;
 800106a:	4b1c      	ldr	r3, [pc, #112]	; (80010dc <MX_USART1_Init+0x90>)
 800106c:	2200      	movs	r2, #0
 800106e:	611a      	str	r2, [r3, #16]
  husart1.Init.Mode = USART_MODE_TX_RX;
 8001070:	4b1a      	ldr	r3, [pc, #104]	; (80010dc <MX_USART1_Init+0x90>)
 8001072:	220c      	movs	r2, #12
 8001074:	615a      	str	r2, [r3, #20]
  husart1.Init.CLKPolarity = USART_POLARITY_LOW;
 8001076:	4b19      	ldr	r3, [pc, #100]	; (80010dc <MX_USART1_Init+0x90>)
 8001078:	2200      	movs	r2, #0
 800107a:	619a      	str	r2, [r3, #24]
  husart1.Init.CLKPhase = USART_PHASE_1EDGE;
 800107c:	4b17      	ldr	r3, [pc, #92]	; (80010dc <MX_USART1_Init+0x90>)
 800107e:	2200      	movs	r2, #0
 8001080:	61da      	str	r2, [r3, #28]
  husart1.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8001082:	4b16      	ldr	r3, [pc, #88]	; (80010dc <MX_USART1_Init+0x90>)
 8001084:	2200      	movs	r2, #0
 8001086:	621a      	str	r2, [r3, #32]
  husart1.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 8001088:	4b14      	ldr	r3, [pc, #80]	; (80010dc <MX_USART1_Init+0x90>)
 800108a:	2200      	movs	r2, #0
 800108c:	625a      	str	r2, [r3, #36]	; 0x24
  husart1.SlaveMode = USART_SLAVEMODE_DISABLE;
 800108e:	4b13      	ldr	r3, [pc, #76]	; (80010dc <MX_USART1_Init+0x90>)
 8001090:	2200      	movs	r2, #0
 8001092:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_USART_Init(&husart1) != HAL_OK)
 8001094:	4811      	ldr	r0, [pc, #68]	; (80010dc <MX_USART1_Init+0x90>)
 8001096:	f00b f9fd 	bl	800c494 <HAL_USART_Init>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_USART1_Init+0x58>
  {
    Error_Handler();
 80010a0:	f000 fd66 	bl	8001b70 <Error_Handler>
  }
  if (HAL_USARTEx_SetTxFifoThreshold(&husart1, USART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010a4:	2100      	movs	r1, #0
 80010a6:	480d      	ldr	r0, [pc, #52]	; (80010dc <MX_USART1_Init+0x90>)
 80010a8:	f00c f810 	bl	800d0cc <HAL_USARTEx_SetTxFifoThreshold>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <MX_USART1_Init+0x6a>
  {
    Error_Handler();
 80010b2:	f000 fd5d 	bl	8001b70 <Error_Handler>
  }
  if (HAL_USARTEx_SetRxFifoThreshold(&husart1, USART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010b6:	2100      	movs	r1, #0
 80010b8:	4808      	ldr	r0, [pc, #32]	; (80010dc <MX_USART1_Init+0x90>)
 80010ba:	f00c f845 	bl	800d148 <HAL_USARTEx_SetRxFifoThreshold>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <MX_USART1_Init+0x7c>
  {
    Error_Handler();
 80010c4:	f000 fd54 	bl	8001b70 <Error_Handler>
  }
  if (HAL_USARTEx_DisableFifoMode(&husart1) != HAL_OK)
 80010c8:	4804      	ldr	r0, [pc, #16]	; (80010dc <MX_USART1_Init+0x90>)
 80010ca:	f00b ffc6 	bl	800d05a <HAL_USARTEx_DisableFifoMode>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_USART1_Init+0x8c>
  {
    Error_Handler();
 80010d4:	f000 fd4c 	bl	8001b70 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80010d8:	bf00      	nop
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	24000b14 	.word	0x24000b14
 80010e0:	40011000 	.word	0x40011000

080010e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010e8:	4b22      	ldr	r3, [pc, #136]	; (8001174 <MX_USART2_UART_Init+0x90>)
 80010ea:	4a23      	ldr	r2, [pc, #140]	; (8001178 <MX_USART2_UART_Init+0x94>)
 80010ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010ee:	4b21      	ldr	r3, [pc, #132]	; (8001174 <MX_USART2_UART_Init+0x90>)
 80010f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010f6:	4b1f      	ldr	r3, [pc, #124]	; (8001174 <MX_USART2_UART_Init+0x90>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010fc:	4b1d      	ldr	r3, [pc, #116]	; (8001174 <MX_USART2_UART_Init+0x90>)
 80010fe:	2200      	movs	r2, #0
 8001100:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001102:	4b1c      	ldr	r3, [pc, #112]	; (8001174 <MX_USART2_UART_Init+0x90>)
 8001104:	2200      	movs	r2, #0
 8001106:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001108:	4b1a      	ldr	r3, [pc, #104]	; (8001174 <MX_USART2_UART_Init+0x90>)
 800110a:	220c      	movs	r2, #12
 800110c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800110e:	4b19      	ldr	r3, [pc, #100]	; (8001174 <MX_USART2_UART_Init+0x90>)
 8001110:	2200      	movs	r2, #0
 8001112:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001114:	4b17      	ldr	r3, [pc, #92]	; (8001174 <MX_USART2_UART_Init+0x90>)
 8001116:	2200      	movs	r2, #0
 8001118:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800111a:	4b16      	ldr	r3, [pc, #88]	; (8001174 <MX_USART2_UART_Init+0x90>)
 800111c:	2200      	movs	r2, #0
 800111e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001120:	4b14      	ldr	r3, [pc, #80]	; (8001174 <MX_USART2_UART_Init+0x90>)
 8001122:	2200      	movs	r2, #0
 8001124:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001126:	4b13      	ldr	r3, [pc, #76]	; (8001174 <MX_USART2_UART_Init+0x90>)
 8001128:	2200      	movs	r2, #0
 800112a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800112c:	4811      	ldr	r0, [pc, #68]	; (8001174 <MX_USART2_UART_Init+0x90>)
 800112e:	f00a f991 	bl	800b454 <HAL_UART_Init>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001138:	f000 fd1a 	bl	8001b70 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800113c:	2100      	movs	r1, #0
 800113e:	480d      	ldr	r0, [pc, #52]	; (8001174 <MX_USART2_UART_Init+0x90>)
 8001140:	f00b f8de 	bl	800c300 <HAL_UARTEx_SetTxFifoThreshold>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800114a:	f000 fd11 	bl	8001b70 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800114e:	2100      	movs	r1, #0
 8001150:	4808      	ldr	r0, [pc, #32]	; (8001174 <MX_USART2_UART_Init+0x90>)
 8001152:	f00b f913 	bl	800c37c <HAL_UARTEx_SetRxFifoThreshold>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800115c:	f000 fd08 	bl	8001b70 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001160:	4804      	ldr	r0, [pc, #16]	; (8001174 <MX_USART2_UART_Init+0x90>)
 8001162:	f00b f894 	bl	800c28e <HAL_UARTEx_DisableFifoMode>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800116c:	f000 fd00 	bl	8001b70 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001170:	bf00      	nop
 8001172:	bd80      	pop	{r7, pc}
 8001174:	24000a84 	.word	0x24000a84
 8001178:	40004400 	.word	0x40004400

0800117c <MX_USART3_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  husart3.Instance = USART3;
 8001180:	4b22      	ldr	r3, [pc, #136]	; (800120c <MX_USART3_Init+0x90>)
 8001182:	4a23      	ldr	r2, [pc, #140]	; (8001210 <MX_USART3_Init+0x94>)
 8001184:	601a      	str	r2, [r3, #0]
  husart3.Init.BaudRate = 115200;
 8001186:	4b21      	ldr	r3, [pc, #132]	; (800120c <MX_USART3_Init+0x90>)
 8001188:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800118c:	605a      	str	r2, [r3, #4]
  husart3.Init.WordLength = USART_WORDLENGTH_8B;
 800118e:	4b1f      	ldr	r3, [pc, #124]	; (800120c <MX_USART3_Init+0x90>)
 8001190:	2200      	movs	r2, #0
 8001192:	609a      	str	r2, [r3, #8]
  husart3.Init.StopBits = USART_STOPBITS_1;
 8001194:	4b1d      	ldr	r3, [pc, #116]	; (800120c <MX_USART3_Init+0x90>)
 8001196:	2200      	movs	r2, #0
 8001198:	60da      	str	r2, [r3, #12]
  husart3.Init.Parity = USART_PARITY_NONE;
 800119a:	4b1c      	ldr	r3, [pc, #112]	; (800120c <MX_USART3_Init+0x90>)
 800119c:	2200      	movs	r2, #0
 800119e:	611a      	str	r2, [r3, #16]
  husart3.Init.Mode = USART_MODE_TX_RX;
 80011a0:	4b1a      	ldr	r3, [pc, #104]	; (800120c <MX_USART3_Init+0x90>)
 80011a2:	220c      	movs	r2, #12
 80011a4:	615a      	str	r2, [r3, #20]
  husart3.Init.CLKPolarity = USART_POLARITY_LOW;
 80011a6:	4b19      	ldr	r3, [pc, #100]	; (800120c <MX_USART3_Init+0x90>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	619a      	str	r2, [r3, #24]
  husart3.Init.CLKPhase = USART_PHASE_1EDGE;
 80011ac:	4b17      	ldr	r3, [pc, #92]	; (800120c <MX_USART3_Init+0x90>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	61da      	str	r2, [r3, #28]
  husart3.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 80011b2:	4b16      	ldr	r3, [pc, #88]	; (800120c <MX_USART3_Init+0x90>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	621a      	str	r2, [r3, #32]
  husart3.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 80011b8:	4b14      	ldr	r3, [pc, #80]	; (800120c <MX_USART3_Init+0x90>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	625a      	str	r2, [r3, #36]	; 0x24
  husart3.SlaveMode = USART_SLAVEMODE_DISABLE;
 80011be:	4b13      	ldr	r3, [pc, #76]	; (800120c <MX_USART3_Init+0x90>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_USART_Init(&husart3) != HAL_OK)
 80011c4:	4811      	ldr	r0, [pc, #68]	; (800120c <MX_USART3_Init+0x90>)
 80011c6:	f00b f965 	bl	800c494 <HAL_USART_Init>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_USART3_Init+0x58>
  {
    Error_Handler();
 80011d0:	f000 fcce 	bl	8001b70 <Error_Handler>
  }
  if (HAL_USARTEx_SetTxFifoThreshold(&husart3, USART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011d4:	2100      	movs	r1, #0
 80011d6:	480d      	ldr	r0, [pc, #52]	; (800120c <MX_USART3_Init+0x90>)
 80011d8:	f00b ff78 	bl	800d0cc <HAL_USARTEx_SetTxFifoThreshold>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_USART3_Init+0x6a>
  {
    Error_Handler();
 80011e2:	f000 fcc5 	bl	8001b70 <Error_Handler>
  }
  if (HAL_USARTEx_SetRxFifoThreshold(&husart3, USART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011e6:	2100      	movs	r1, #0
 80011e8:	4808      	ldr	r0, [pc, #32]	; (800120c <MX_USART3_Init+0x90>)
 80011ea:	f00b ffad 	bl	800d148 <HAL_USARTEx_SetRxFifoThreshold>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_USART3_Init+0x7c>
  {
    Error_Handler();
 80011f4:	f000 fcbc 	bl	8001b70 <Error_Handler>
  }
  if (HAL_USARTEx_DisableFifoMode(&husart3) != HAL_OK)
 80011f8:	4804      	ldr	r0, [pc, #16]	; (800120c <MX_USART3_Init+0x90>)
 80011fa:	f00b ff2e 	bl	800d05a <HAL_USARTEx_DisableFifoMode>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_USART3_Init+0x8c>
  {
    Error_Handler();
 8001204:	f000 fcb4 	bl	8001b70 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001208:	bf00      	nop
 800120a:	bd80      	pop	{r7, pc}
 800120c:	24000708 	.word	0x24000708
 8001210:	40004800 	.word	0x40004800

08001214 <MX_USART6_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  husart6.Instance = USART6;
 8001218:	4b22      	ldr	r3, [pc, #136]	; (80012a4 <MX_USART6_Init+0x90>)
 800121a:	4a23      	ldr	r2, [pc, #140]	; (80012a8 <MX_USART6_Init+0x94>)
 800121c:	601a      	str	r2, [r3, #0]
  husart6.Init.BaudRate = 115200;
 800121e:	4b21      	ldr	r3, [pc, #132]	; (80012a4 <MX_USART6_Init+0x90>)
 8001220:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001224:	605a      	str	r2, [r3, #4]
  husart6.Init.WordLength = USART_WORDLENGTH_8B;
 8001226:	4b1f      	ldr	r3, [pc, #124]	; (80012a4 <MX_USART6_Init+0x90>)
 8001228:	2200      	movs	r2, #0
 800122a:	609a      	str	r2, [r3, #8]
  husart6.Init.StopBits = USART_STOPBITS_1;
 800122c:	4b1d      	ldr	r3, [pc, #116]	; (80012a4 <MX_USART6_Init+0x90>)
 800122e:	2200      	movs	r2, #0
 8001230:	60da      	str	r2, [r3, #12]
  husart6.Init.Parity = USART_PARITY_NONE;
 8001232:	4b1c      	ldr	r3, [pc, #112]	; (80012a4 <MX_USART6_Init+0x90>)
 8001234:	2200      	movs	r2, #0
 8001236:	611a      	str	r2, [r3, #16]
  husart6.Init.Mode = USART_MODE_TX_RX;
 8001238:	4b1a      	ldr	r3, [pc, #104]	; (80012a4 <MX_USART6_Init+0x90>)
 800123a:	220c      	movs	r2, #12
 800123c:	615a      	str	r2, [r3, #20]
  husart6.Init.CLKPolarity = USART_POLARITY_LOW;
 800123e:	4b19      	ldr	r3, [pc, #100]	; (80012a4 <MX_USART6_Init+0x90>)
 8001240:	2200      	movs	r2, #0
 8001242:	619a      	str	r2, [r3, #24]
  husart6.Init.CLKPhase = USART_PHASE_1EDGE;
 8001244:	4b17      	ldr	r3, [pc, #92]	; (80012a4 <MX_USART6_Init+0x90>)
 8001246:	2200      	movs	r2, #0
 8001248:	61da      	str	r2, [r3, #28]
  husart6.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 800124a:	4b16      	ldr	r3, [pc, #88]	; (80012a4 <MX_USART6_Init+0x90>)
 800124c:	2200      	movs	r2, #0
 800124e:	621a      	str	r2, [r3, #32]
  husart6.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 8001250:	4b14      	ldr	r3, [pc, #80]	; (80012a4 <MX_USART6_Init+0x90>)
 8001252:	2200      	movs	r2, #0
 8001254:	625a      	str	r2, [r3, #36]	; 0x24
  husart6.SlaveMode = USART_SLAVEMODE_DISABLE;
 8001256:	4b13      	ldr	r3, [pc, #76]	; (80012a4 <MX_USART6_Init+0x90>)
 8001258:	2200      	movs	r2, #0
 800125a:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_USART_Init(&husart6) != HAL_OK)
 800125c:	4811      	ldr	r0, [pc, #68]	; (80012a4 <MX_USART6_Init+0x90>)
 800125e:	f00b f919 	bl	800c494 <HAL_USART_Init>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_USART6_Init+0x58>
  {
    Error_Handler();
 8001268:	f000 fc82 	bl	8001b70 <Error_Handler>
  }
  if (HAL_USARTEx_SetTxFifoThreshold(&husart6, USART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800126c:	2100      	movs	r1, #0
 800126e:	480d      	ldr	r0, [pc, #52]	; (80012a4 <MX_USART6_Init+0x90>)
 8001270:	f00b ff2c 	bl	800d0cc <HAL_USARTEx_SetTxFifoThreshold>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <MX_USART6_Init+0x6a>
  {
    Error_Handler();
 800127a:	f000 fc79 	bl	8001b70 <Error_Handler>
  }
  if (HAL_USARTEx_SetRxFifoThreshold(&husart6, USART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800127e:	2100      	movs	r1, #0
 8001280:	4808      	ldr	r0, [pc, #32]	; (80012a4 <MX_USART6_Init+0x90>)
 8001282:	f00b ff61 	bl	800d148 <HAL_USARTEx_SetRxFifoThreshold>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_USART6_Init+0x7c>
  {
    Error_Handler();
 800128c:	f000 fc70 	bl	8001b70 <Error_Handler>
  }
  if (HAL_USARTEx_DisableFifoMode(&husart6) != HAL_OK)
 8001290:	4804      	ldr	r0, [pc, #16]	; (80012a4 <MX_USART6_Init+0x90>)
 8001292:	f00b fee2 	bl	800d05a <HAL_USARTEx_DisableFifoMode>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_USART6_Init+0x8c>
  {
    Error_Handler();
 800129c:	f000 fc68 	bl	8001b70 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80012a0:	bf00      	nop
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	24000210 	.word	0x24000210
 80012a8:	40011400 	.word	0x40011400

080012ac <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80012b0:	4b12      	ldr	r3, [pc, #72]	; (80012fc <MX_QUADSPI_Init+0x50>)
 80012b2:	4a13      	ldr	r2, [pc, #76]	; (8001300 <MX_QUADSPI_Init+0x54>)
 80012b4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 80012b6:	4b11      	ldr	r3, [pc, #68]	; (80012fc <MX_QUADSPI_Init+0x50>)
 80012b8:	22ff      	movs	r2, #255	; 0xff
 80012ba:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80012bc:	4b0f      	ldr	r3, [pc, #60]	; (80012fc <MX_QUADSPI_Init+0x50>)
 80012be:	2201      	movs	r2, #1
 80012c0:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80012c2:	4b0e      	ldr	r3, [pc, #56]	; (80012fc <MX_QUADSPI_Init+0x50>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 80012c8:	4b0c      	ldr	r3, [pc, #48]	; (80012fc <MX_QUADSPI_Init+0x50>)
 80012ca:	2201      	movs	r2, #1
 80012cc:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80012ce:	4b0b      	ldr	r3, [pc, #44]	; (80012fc <MX_QUADSPI_Init+0x50>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80012d4:	4b09      	ldr	r3, [pc, #36]	; (80012fc <MX_QUADSPI_Init+0x50>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_2;
 80012da:	4b08      	ldr	r3, [pc, #32]	; (80012fc <MX_QUADSPI_Init+0x50>)
 80012dc:	2280      	movs	r2, #128	; 0x80
 80012de:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80012e0:	4b06      	ldr	r3, [pc, #24]	; (80012fc <MX_QUADSPI_Init+0x50>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80012e6:	4805      	ldr	r0, [pc, #20]	; (80012fc <MX_QUADSPI_Init+0x50>)
 80012e8:	f005 fdfc 	bl	8006ee4 <HAL_QSPI_Init>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 80012f2:	f000 fc3d 	bl	8001b70 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80012f6:	bf00      	nop
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	24000c14 	.word	0x24000c14
 8001300:	52005000 	.word	0x52005000

08001304 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001308:	4b27      	ldr	r3, [pc, #156]	; (80013a8 <MX_SPI1_Init+0xa4>)
 800130a:	4a28      	ldr	r2, [pc, #160]	; (80013ac <MX_SPI1_Init+0xa8>)
 800130c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800130e:	4b26      	ldr	r3, [pc, #152]	; (80013a8 <MX_SPI1_Init+0xa4>)
 8001310:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001314:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001316:	4b24      	ldr	r3, [pc, #144]	; (80013a8 <MX_SPI1_Init+0xa4>)
 8001318:	2200      	movs	r2, #0
 800131a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800131c:	4b22      	ldr	r3, [pc, #136]	; (80013a8 <MX_SPI1_Init+0xa4>)
 800131e:	2203      	movs	r2, #3
 8001320:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001322:	4b21      	ldr	r3, [pc, #132]	; (80013a8 <MX_SPI1_Init+0xa4>)
 8001324:	2200      	movs	r2, #0
 8001326:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001328:	4b1f      	ldr	r3, [pc, #124]	; (80013a8 <MX_SPI1_Init+0xa4>)
 800132a:	2200      	movs	r2, #0
 800132c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800132e:	4b1e      	ldr	r3, [pc, #120]	; (80013a8 <MX_SPI1_Init+0xa4>)
 8001330:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001334:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001336:	4b1c      	ldr	r3, [pc, #112]	; (80013a8 <MX_SPI1_Init+0xa4>)
 8001338:	2200      	movs	r2, #0
 800133a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800133c:	4b1a      	ldr	r3, [pc, #104]	; (80013a8 <MX_SPI1_Init+0xa4>)
 800133e:	2200      	movs	r2, #0
 8001340:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001342:	4b19      	ldr	r3, [pc, #100]	; (80013a8 <MX_SPI1_Init+0xa4>)
 8001344:	2200      	movs	r2, #0
 8001346:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001348:	4b17      	ldr	r3, [pc, #92]	; (80013a8 <MX_SPI1_Init+0xa4>)
 800134a:	2200      	movs	r2, #0
 800134c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800134e:	4b16      	ldr	r3, [pc, #88]	; (80013a8 <MX_SPI1_Init+0xa4>)
 8001350:	2200      	movs	r2, #0
 8001352:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001354:	4b14      	ldr	r3, [pc, #80]	; (80013a8 <MX_SPI1_Init+0xa4>)
 8001356:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800135a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800135c:	4b12      	ldr	r3, [pc, #72]	; (80013a8 <MX_SPI1_Init+0xa4>)
 800135e:	2200      	movs	r2, #0
 8001360:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001362:	4b11      	ldr	r3, [pc, #68]	; (80013a8 <MX_SPI1_Init+0xa4>)
 8001364:	2200      	movs	r2, #0
 8001366:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001368:	4b0f      	ldr	r3, [pc, #60]	; (80013a8 <MX_SPI1_Init+0xa4>)
 800136a:	2200      	movs	r2, #0
 800136c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800136e:	4b0e      	ldr	r3, [pc, #56]	; (80013a8 <MX_SPI1_Init+0xa4>)
 8001370:	2200      	movs	r2, #0
 8001372:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001374:	4b0c      	ldr	r3, [pc, #48]	; (80013a8 <MX_SPI1_Init+0xa4>)
 8001376:	2200      	movs	r2, #0
 8001378:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800137a:	4b0b      	ldr	r3, [pc, #44]	; (80013a8 <MX_SPI1_Init+0xa4>)
 800137c:	2200      	movs	r2, #0
 800137e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001380:	4b09      	ldr	r3, [pc, #36]	; (80013a8 <MX_SPI1_Init+0xa4>)
 8001382:	2200      	movs	r2, #0
 8001384:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001386:	4b08      	ldr	r3, [pc, #32]	; (80013a8 <MX_SPI1_Init+0xa4>)
 8001388:	2200      	movs	r2, #0
 800138a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800138c:	4b06      	ldr	r3, [pc, #24]	; (80013a8 <MX_SPI1_Init+0xa4>)
 800138e:	2200      	movs	r2, #0
 8001390:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001392:	4805      	ldr	r0, [pc, #20]	; (80013a8 <MX_SPI1_Init+0xa4>)
 8001394:	f008 ff82 	bl	800a29c <HAL_SPI_Init>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 800139e:	f000 fbe7 	bl	8001b70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80013a2:	bf00      	nop
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	240009fc 	.word	0x240009fc
 80013ac:	40013000 	.word	0x40013000

080013b0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80013b4:	4b27      	ldr	r3, [pc, #156]	; (8001454 <MX_SPI2_Init+0xa4>)
 80013b6:	4a28      	ldr	r2, [pc, #160]	; (8001458 <MX_SPI2_Init+0xa8>)
 80013b8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80013ba:	4b26      	ldr	r3, [pc, #152]	; (8001454 <MX_SPI2_Init+0xa4>)
 80013bc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80013c0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80013c2:	4b24      	ldr	r3, [pc, #144]	; (8001454 <MX_SPI2_Init+0xa4>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80013c8:	4b22      	ldr	r3, [pc, #136]	; (8001454 <MX_SPI2_Init+0xa4>)
 80013ca:	2203      	movs	r2, #3
 80013cc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013ce:	4b21      	ldr	r3, [pc, #132]	; (8001454 <MX_SPI2_Init+0xa4>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013d4:	4b1f      	ldr	r3, [pc, #124]	; (8001454 <MX_SPI2_Init+0xa4>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80013da:	4b1e      	ldr	r3, [pc, #120]	; (8001454 <MX_SPI2_Init+0xa4>)
 80013dc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80013e0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80013e2:	4b1c      	ldr	r3, [pc, #112]	; (8001454 <MX_SPI2_Init+0xa4>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013e8:	4b1a      	ldr	r3, [pc, #104]	; (8001454 <MX_SPI2_Init+0xa4>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80013ee:	4b19      	ldr	r3, [pc, #100]	; (8001454 <MX_SPI2_Init+0xa4>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013f4:	4b17      	ldr	r3, [pc, #92]	; (8001454 <MX_SPI2_Init+0xa4>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80013fa:	4b16      	ldr	r3, [pc, #88]	; (8001454 <MX_SPI2_Init+0xa4>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001400:	4b14      	ldr	r3, [pc, #80]	; (8001454 <MX_SPI2_Init+0xa4>)
 8001402:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001406:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001408:	4b12      	ldr	r3, [pc, #72]	; (8001454 <MX_SPI2_Init+0xa4>)
 800140a:	2200      	movs	r2, #0
 800140c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800140e:	4b11      	ldr	r3, [pc, #68]	; (8001454 <MX_SPI2_Init+0xa4>)
 8001410:	2200      	movs	r2, #0
 8001412:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001414:	4b0f      	ldr	r3, [pc, #60]	; (8001454 <MX_SPI2_Init+0xa4>)
 8001416:	2200      	movs	r2, #0
 8001418:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800141a:	4b0e      	ldr	r3, [pc, #56]	; (8001454 <MX_SPI2_Init+0xa4>)
 800141c:	2200      	movs	r2, #0
 800141e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001420:	4b0c      	ldr	r3, [pc, #48]	; (8001454 <MX_SPI2_Init+0xa4>)
 8001422:	2200      	movs	r2, #0
 8001424:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001426:	4b0b      	ldr	r3, [pc, #44]	; (8001454 <MX_SPI2_Init+0xa4>)
 8001428:	2200      	movs	r2, #0
 800142a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800142c:	4b09      	ldr	r3, [pc, #36]	; (8001454 <MX_SPI2_Init+0xa4>)
 800142e:	2200      	movs	r2, #0
 8001430:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001432:	4b08      	ldr	r3, [pc, #32]	; (8001454 <MX_SPI2_Init+0xa4>)
 8001434:	2200      	movs	r2, #0
 8001436:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001438:	4b06      	ldr	r3, [pc, #24]	; (8001454 <MX_SPI2_Init+0xa4>)
 800143a:	2200      	movs	r2, #0
 800143c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800143e:	4805      	ldr	r0, [pc, #20]	; (8001454 <MX_SPI2_Init+0xa4>)
 8001440:	f008 ff2c 	bl	800a29c <HAL_SPI_Init>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 800144a:	f000 fb91 	bl	8001b70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800144e:	bf00      	nop
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	240002bc 	.word	0x240002bc
 8001458:	40003800 	.word	0x40003800

0800145c <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8001460:	4b27      	ldr	r3, [pc, #156]	; (8001500 <MX_SPI4_Init+0xa4>)
 8001462:	4a28      	ldr	r2, [pc, #160]	; (8001504 <MX_SPI4_Init+0xa8>)
 8001464:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001466:	4b26      	ldr	r3, [pc, #152]	; (8001500 <MX_SPI4_Init+0xa4>)
 8001468:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800146c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800146e:	4b24      	ldr	r3, [pc, #144]	; (8001500 <MX_SPI4_Init+0xa4>)
 8001470:	2200      	movs	r2, #0
 8001472:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 8001474:	4b22      	ldr	r3, [pc, #136]	; (8001500 <MX_SPI4_Init+0xa4>)
 8001476:	2203      	movs	r2, #3
 8001478:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 800147a:	4b21      	ldr	r3, [pc, #132]	; (8001500 <MX_SPI4_Init+0xa4>)
 800147c:	2200      	movs	r2, #0
 800147e:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001480:	4b1f      	ldr	r3, [pc, #124]	; (8001500 <MX_SPI4_Init+0xa4>)
 8001482:	2200      	movs	r2, #0
 8001484:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001486:	4b1e      	ldr	r3, [pc, #120]	; (8001500 <MX_SPI4_Init+0xa4>)
 8001488:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800148c:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800148e:	4b1c      	ldr	r3, [pc, #112]	; (8001500 <MX_SPI4_Init+0xa4>)
 8001490:	2200      	movs	r2, #0
 8001492:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001494:	4b1a      	ldr	r3, [pc, #104]	; (8001500 <MX_SPI4_Init+0xa4>)
 8001496:	2200      	movs	r2, #0
 8001498:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800149a:	4b19      	ldr	r3, [pc, #100]	; (8001500 <MX_SPI4_Init+0xa4>)
 800149c:	2200      	movs	r2, #0
 800149e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014a0:	4b17      	ldr	r3, [pc, #92]	; (8001500 <MX_SPI4_Init+0xa4>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 80014a6:	4b16      	ldr	r3, [pc, #88]	; (8001500 <MX_SPI4_Init+0xa4>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80014ac:	4b14      	ldr	r3, [pc, #80]	; (8001500 <MX_SPI4_Init+0xa4>)
 80014ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014b2:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80014b4:	4b12      	ldr	r3, [pc, #72]	; (8001500 <MX_SPI4_Init+0xa4>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80014ba:	4b11      	ldr	r3, [pc, #68]	; (8001500 <MX_SPI4_Init+0xa4>)
 80014bc:	2200      	movs	r2, #0
 80014be:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80014c0:	4b0f      	ldr	r3, [pc, #60]	; (8001500 <MX_SPI4_Init+0xa4>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80014c6:	4b0e      	ldr	r3, [pc, #56]	; (8001500 <MX_SPI4_Init+0xa4>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80014cc:	4b0c      	ldr	r3, [pc, #48]	; (8001500 <MX_SPI4_Init+0xa4>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80014d2:	4b0b      	ldr	r3, [pc, #44]	; (8001500 <MX_SPI4_Init+0xa4>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80014d8:	4b09      	ldr	r3, [pc, #36]	; (8001500 <MX_SPI4_Init+0xa4>)
 80014da:	2200      	movs	r2, #0
 80014dc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80014de:	4b08      	ldr	r3, [pc, #32]	; (8001500 <MX_SPI4_Init+0xa4>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80014e4:	4b06      	ldr	r3, [pc, #24]	; (8001500 <MX_SPI4_Init+0xa4>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80014ea:	4805      	ldr	r0, [pc, #20]	; (8001500 <MX_SPI4_Init+0xa4>)
 80014ec:	f008 fed6 	bl	800a29c <HAL_SPI_Init>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 80014f6:	f000 fb3b 	bl	8001b70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80014fa:	bf00      	nop
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	24000768 	.word	0x24000768
 8001504:	40013400 	.word	0x40013400

08001508 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b096      	sub	sp, #88	; 0x58
 800150c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800150e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	605a      	str	r2, [r3, #4]
 8001518:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800151a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800151e:	2200      	movs	r2, #0
 8001520:	601a      	str	r2, [r3, #0]
 8001522:	605a      	str	r2, [r3, #4]
 8001524:	609a      	str	r2, [r3, #8]
 8001526:	60da      	str	r2, [r3, #12]
 8001528:	611a      	str	r2, [r3, #16]
 800152a:	615a      	str	r2, [r3, #20]
 800152c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800152e:	1d3b      	adds	r3, r7, #4
 8001530:	222c      	movs	r2, #44	; 0x2c
 8001532:	2100      	movs	r1, #0
 8001534:	4618      	mov	r0, r3
 8001536:	f00b fec7 	bl	800d2c8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800153a:	4b39      	ldr	r3, [pc, #228]	; (8001620 <MX_TIM1_Init+0x118>)
 800153c:	4a39      	ldr	r2, [pc, #228]	; (8001624 <MX_TIM1_Init+0x11c>)
 800153e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64000-1;
 8001540:	4b37      	ldr	r3, [pc, #220]	; (8001620 <MX_TIM1_Init+0x118>)
 8001542:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8001546:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001548:	4b35      	ldr	r3, [pc, #212]	; (8001620 <MX_TIM1_Init+0x118>)
 800154a:	2200      	movs	r2, #0
 800154c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20-1;
 800154e:	4b34      	ldr	r3, [pc, #208]	; (8001620 <MX_TIM1_Init+0x118>)
 8001550:	2213      	movs	r2, #19
 8001552:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001554:	4b32      	ldr	r3, [pc, #200]	; (8001620 <MX_TIM1_Init+0x118>)
 8001556:	2200      	movs	r2, #0
 8001558:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800155a:	4b31      	ldr	r3, [pc, #196]	; (8001620 <MX_TIM1_Init+0x118>)
 800155c:	2200      	movs	r2, #0
 800155e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001560:	4b2f      	ldr	r3, [pc, #188]	; (8001620 <MX_TIM1_Init+0x118>)
 8001562:	2200      	movs	r2, #0
 8001564:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001566:	482e      	ldr	r0, [pc, #184]	; (8001620 <MX_TIM1_Init+0x118>)
 8001568:	f009 f80c 	bl	800a584 <HAL_TIM_PWM_Init>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001572:	f000 fafd 	bl	8001b70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001576:	2300      	movs	r3, #0
 8001578:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800157a:	2300      	movs	r3, #0
 800157c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800157e:	2300      	movs	r3, #0
 8001580:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001582:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001586:	4619      	mov	r1, r3
 8001588:	4825      	ldr	r0, [pc, #148]	; (8001620 <MX_TIM1_Init+0x118>)
 800158a:	f009 fe5d 	bl	800b248 <HAL_TIMEx_MasterConfigSynchronization>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001594:	f000 faec 	bl	8001b70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001598:	2360      	movs	r3, #96	; 0x60
 800159a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 15;
 800159c:	230f      	movs	r3, #15
 800159e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015a0:	2300      	movs	r3, #0
 80015a2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015a4:	2300      	movs	r3, #0
 80015a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015a8:	2300      	movs	r3, #0
 80015aa:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015ac:	2300      	movs	r3, #0
 80015ae:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015b0:	2300      	movs	r3, #0
 80015b2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015b8:	2204      	movs	r2, #4
 80015ba:	4619      	mov	r1, r3
 80015bc:	4818      	ldr	r0, [pc, #96]	; (8001620 <MX_TIM1_Init+0x118>)
 80015be:	f009 f839 	bl	800a634 <HAL_TIM_PWM_ConfigChannel>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80015c8:	f000 fad2 	bl	8001b70 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015cc:	2300      	movs	r3, #0
 80015ce:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015d0:	2300      	movs	r3, #0
 80015d2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015d4:	2300      	movs	r3, #0
 80015d6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015d8:	2300      	movs	r3, #0
 80015da:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015dc:	2300      	movs	r3, #0
 80015de:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015e4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80015e6:	2300      	movs	r3, #0
 80015e8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80015ea:	2300      	movs	r3, #0
 80015ec:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80015ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015f2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80015f4:	2300      	movs	r3, #0
 80015f6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015f8:	2300      	movs	r3, #0
 80015fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80015fc:	1d3b      	adds	r3, r7, #4
 80015fe:	4619      	mov	r1, r3
 8001600:	4807      	ldr	r0, [pc, #28]	; (8001620 <MX_TIM1_Init+0x118>)
 8001602:	f009 fea9 	bl	800b358 <HAL_TIMEx_ConfigBreakDeadTime>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 800160c:	f000 fab0 	bl	8001b70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001610:	4803      	ldr	r0, [pc, #12]	; (8001620 <MX_TIM1_Init+0x118>)
 8001612:	f001 fafd 	bl	8002c10 <HAL_TIM_MspPostInit>

}
 8001616:	bf00      	nop
 8001618:	3758      	adds	r7, #88	; 0x58
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	24000890 	.word	0x24000890
 8001624:	40010000 	.word	0x40010000

08001628 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b08e      	sub	sp, #56	; 0x38
 800162c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800162e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001632:	2200      	movs	r2, #0
 8001634:	601a      	str	r2, [r3, #0]
 8001636:	605a      	str	r2, [r3, #4]
 8001638:	609a      	str	r2, [r3, #8]
 800163a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800163c:	f107 031c 	add.w	r3, r7, #28
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	605a      	str	r2, [r3, #4]
 8001646:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001648:	463b      	mov	r3, r7
 800164a:	2200      	movs	r2, #0
 800164c:	601a      	str	r2, [r3, #0]
 800164e:	605a      	str	r2, [r3, #4]
 8001650:	609a      	str	r2, [r3, #8]
 8001652:	60da      	str	r2, [r3, #12]
 8001654:	611a      	str	r2, [r3, #16]
 8001656:	615a      	str	r2, [r3, #20]
 8001658:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800165a:	4b2d      	ldr	r3, [pc, #180]	; (8001710 <MX_TIM4_Init+0xe8>)
 800165c:	4a2d      	ldr	r2, [pc, #180]	; (8001714 <MX_TIM4_Init+0xec>)
 800165e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001660:	4b2b      	ldr	r3, [pc, #172]	; (8001710 <MX_TIM4_Init+0xe8>)
 8001662:	2200      	movs	r2, #0
 8001664:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001666:	4b2a      	ldr	r3, [pc, #168]	; (8001710 <MX_TIM4_Init+0xe8>)
 8001668:	2200      	movs	r2, #0
 800166a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800166c:	4b28      	ldr	r3, [pc, #160]	; (8001710 <MX_TIM4_Init+0xe8>)
 800166e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001672:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001674:	4b26      	ldr	r3, [pc, #152]	; (8001710 <MX_TIM4_Init+0xe8>)
 8001676:	2200      	movs	r2, #0
 8001678:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800167a:	4b25      	ldr	r3, [pc, #148]	; (8001710 <MX_TIM4_Init+0xe8>)
 800167c:	2200      	movs	r2, #0
 800167e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001680:	4823      	ldr	r0, [pc, #140]	; (8001710 <MX_TIM4_Init+0xe8>)
 8001682:	f008 ff28 	bl	800a4d6 <HAL_TIM_Base_Init>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 800168c:	f000 fa70 	bl	8001b70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001690:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001694:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001696:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800169a:	4619      	mov	r1, r3
 800169c:	481c      	ldr	r0, [pc, #112]	; (8001710 <MX_TIM4_Init+0xe8>)
 800169e:	f009 f8d9 	bl	800a854 <HAL_TIM_ConfigClockSource>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80016a8:	f000 fa62 	bl	8001b70 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80016ac:	4818      	ldr	r0, [pc, #96]	; (8001710 <MX_TIM4_Init+0xe8>)
 80016ae:	f008 ff69 	bl	800a584 <HAL_TIM_PWM_Init>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80016b8:	f000 fa5a 	bl	8001b70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016bc:	2300      	movs	r3, #0
 80016be:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016c0:	2300      	movs	r3, #0
 80016c2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80016c4:	f107 031c 	add.w	r3, r7, #28
 80016c8:	4619      	mov	r1, r3
 80016ca:	4811      	ldr	r0, [pc, #68]	; (8001710 <MX_TIM4_Init+0xe8>)
 80016cc:	f009 fdbc 	bl	800b248 <HAL_TIMEx_MasterConfigSynchronization>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80016d6:	f000 fa4b 	bl	8001b70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016da:	2360      	movs	r3, #96	; 0x60
 80016dc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80016de:	2300      	movs	r3, #0
 80016e0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016e2:	2300      	movs	r3, #0
 80016e4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016e6:	2300      	movs	r3, #0
 80016e8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80016ea:	463b      	mov	r3, r7
 80016ec:	220c      	movs	r2, #12
 80016ee:	4619      	mov	r1, r3
 80016f0:	4807      	ldr	r0, [pc, #28]	; (8001710 <MX_TIM4_Init+0xe8>)
 80016f2:	f008 ff9f 	bl	800a634 <HAL_TIM_PWM_ConfigChannel>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80016fc:	f000 fa38 	bl	8001b70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001700:	4803      	ldr	r0, [pc, #12]	; (8001710 <MX_TIM4_Init+0xe8>)
 8001702:	f001 fa85 	bl	8002c10 <HAL_TIM_MspPostInit>

}
 8001706:	bf00      	nop
 8001708:	3738      	adds	r7, #56	; 0x38
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	24000344 	.word	0x24000344
 8001714:	40000800 	.word	0x40000800

08001718 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b08a      	sub	sp, #40	; 0x28
 800171c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800171e:	f107 031c 	add.w	r3, r7, #28
 8001722:	2200      	movs	r2, #0
 8001724:	601a      	str	r2, [r3, #0]
 8001726:	605a      	str	r2, [r3, #4]
 8001728:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800172a:	463b      	mov	r3, r7
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]
 8001730:	605a      	str	r2, [r3, #4]
 8001732:	609a      	str	r2, [r3, #8]
 8001734:	60da      	str	r2, [r3, #12]
 8001736:	611a      	str	r2, [r3, #16]
 8001738:	615a      	str	r2, [r3, #20]
 800173a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800173c:	4b21      	ldr	r3, [pc, #132]	; (80017c4 <MX_TIM5_Init+0xac>)
 800173e:	4a22      	ldr	r2, [pc, #136]	; (80017c8 <MX_TIM5_Init+0xb0>)
 8001740:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 6400-1;
 8001742:	4b20      	ldr	r3, [pc, #128]	; (80017c4 <MX_TIM5_Init+0xac>)
 8001744:	f641 02ff 	movw	r2, #6399	; 0x18ff
 8001748:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800174a:	4b1e      	ldr	r3, [pc, #120]	; (80017c4 <MX_TIM5_Init+0xac>)
 800174c:	2200      	movs	r2, #0
 800174e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 200-1;
 8001750:	4b1c      	ldr	r3, [pc, #112]	; (80017c4 <MX_TIM5_Init+0xac>)
 8001752:	22c7      	movs	r2, #199	; 0xc7
 8001754:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001756:	4b1b      	ldr	r3, [pc, #108]	; (80017c4 <MX_TIM5_Init+0xac>)
 8001758:	2200      	movs	r2, #0
 800175a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800175c:	4b19      	ldr	r3, [pc, #100]	; (80017c4 <MX_TIM5_Init+0xac>)
 800175e:	2200      	movs	r2, #0
 8001760:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001762:	4818      	ldr	r0, [pc, #96]	; (80017c4 <MX_TIM5_Init+0xac>)
 8001764:	f008 ff0e 	bl	800a584 <HAL_TIM_PWM_Init>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 800176e:	f000 f9ff 	bl	8001b70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001772:	2300      	movs	r3, #0
 8001774:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001776:	2300      	movs	r3, #0
 8001778:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800177a:	f107 031c 	add.w	r3, r7, #28
 800177e:	4619      	mov	r1, r3
 8001780:	4810      	ldr	r0, [pc, #64]	; (80017c4 <MX_TIM5_Init+0xac>)
 8001782:	f009 fd61 	bl	800b248 <HAL_TIMEx_MasterConfigSynchronization>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 800178c:	f000 f9f0 	bl	8001b70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001790:	2360      	movs	r3, #96	; 0x60
 8001792:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 100-1;
 8001794:	2363      	movs	r3, #99	; 0x63
 8001796:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001798:	2300      	movs	r3, #0
 800179a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800179c:	2300      	movs	r3, #0
 800179e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017a0:	463b      	mov	r3, r7
 80017a2:	2204      	movs	r2, #4
 80017a4:	4619      	mov	r1, r3
 80017a6:	4807      	ldr	r0, [pc, #28]	; (80017c4 <MX_TIM5_Init+0xac>)
 80017a8:	f008 ff44 	bl	800a634 <HAL_TIM_PWM_ConfigChannel>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 80017b2:	f000 f9dd 	bl	8001b70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80017b6:	4803      	ldr	r0, [pc, #12]	; (80017c4 <MX_TIM5_Init+0xac>)
 80017b8:	f001 fa2a 	bl	8002c10 <HAL_TIM_MspPostInit>

}
 80017bc:	bf00      	nop
 80017be:	3728      	adds	r7, #40	; 0x28
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	24000564 	.word	0x24000564
 80017c8:	40000c00 	.word	0x40000c00

080017cc <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b09a      	sub	sp, #104	; 0x68
 80017d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017d2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80017d6:	2200      	movs	r2, #0
 80017d8:	601a      	str	r2, [r3, #0]
 80017da:	605a      	str	r2, [r3, #4]
 80017dc:	609a      	str	r2, [r3, #8]
 80017de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017e0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	605a      	str	r2, [r3, #4]
 80017ea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017ec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	605a      	str	r2, [r3, #4]
 80017f6:	609a      	str	r2, [r3, #8]
 80017f8:	60da      	str	r2, [r3, #12]
 80017fa:	611a      	str	r2, [r3, #16]
 80017fc:	615a      	str	r2, [r3, #20]
 80017fe:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001800:	1d3b      	adds	r3, r7, #4
 8001802:	222c      	movs	r2, #44	; 0x2c
 8001804:	2100      	movs	r1, #0
 8001806:	4618      	mov	r0, r3
 8001808:	f00b fd5e 	bl	800d2c8 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800180c:	4b3f      	ldr	r3, [pc, #252]	; (800190c <MX_TIM15_Init+0x140>)
 800180e:	4a40      	ldr	r2, [pc, #256]	; (8001910 <MX_TIM15_Init+0x144>)
 8001810:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 6400;
 8001812:	4b3e      	ldr	r3, [pc, #248]	; (800190c <MX_TIM15_Init+0x140>)
 8001814:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001818:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800181a:	4b3c      	ldr	r3, [pc, #240]	; (800190c <MX_TIM15_Init+0x140>)
 800181c:	2200      	movs	r2, #0
 800181e:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 200-1;
 8001820:	4b3a      	ldr	r3, [pc, #232]	; (800190c <MX_TIM15_Init+0x140>)
 8001822:	22c7      	movs	r2, #199	; 0xc7
 8001824:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001826:	4b39      	ldr	r3, [pc, #228]	; (800190c <MX_TIM15_Init+0x140>)
 8001828:	2200      	movs	r2, #0
 800182a:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800182c:	4b37      	ldr	r3, [pc, #220]	; (800190c <MX_TIM15_Init+0x140>)
 800182e:	2200      	movs	r2, #0
 8001830:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001832:	4b36      	ldr	r3, [pc, #216]	; (800190c <MX_TIM15_Init+0x140>)
 8001834:	2200      	movs	r2, #0
 8001836:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001838:	4834      	ldr	r0, [pc, #208]	; (800190c <MX_TIM15_Init+0x140>)
 800183a:	f008 fe4c 	bl	800a4d6 <HAL_TIM_Base_Init>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8001844:	f000 f994 	bl	8001b70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001848:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800184c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800184e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001852:	4619      	mov	r1, r3
 8001854:	482d      	ldr	r0, [pc, #180]	; (800190c <MX_TIM15_Init+0x140>)
 8001856:	f008 fffd 	bl	800a854 <HAL_TIM_ConfigClockSource>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 8001860:	f000 f986 	bl	8001b70 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001864:	4829      	ldr	r0, [pc, #164]	; (800190c <MX_TIM15_Init+0x140>)
 8001866:	f008 fe8d 	bl	800a584 <HAL_TIM_PWM_Init>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 8001870:	f000 f97e 	bl	8001b70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001874:	2300      	movs	r3, #0
 8001876:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001878:	2300      	movs	r3, #0
 800187a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800187c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001880:	4619      	mov	r1, r3
 8001882:	4822      	ldr	r0, [pc, #136]	; (800190c <MX_TIM15_Init+0x140>)
 8001884:	f009 fce0 	bl	800b248 <HAL_TIMEx_MasterConfigSynchronization>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 800188e:	f000 f96f 	bl	8001b70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001892:	2360      	movs	r3, #96	; 0x60
 8001894:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 100-1;
 8001896:	2363      	movs	r3, #99	; 0x63
 8001898:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800189a:	2300      	movs	r3, #0
 800189c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800189e:	2300      	movs	r3, #0
 80018a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018a2:	2300      	movs	r3, #0
 80018a4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018a6:	2300      	movs	r3, #0
 80018a8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018aa:	2300      	movs	r3, #0
 80018ac:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80018ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018b2:	2204      	movs	r2, #4
 80018b4:	4619      	mov	r1, r3
 80018b6:	4815      	ldr	r0, [pc, #84]	; (800190c <MX_TIM15_Init+0x140>)
 80018b8:	f008 febc 	bl	800a634 <HAL_TIM_PWM_ConfigChannel>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <MX_TIM15_Init+0xfa>
  {
    Error_Handler();
 80018c2:	f000 f955 	bl	8001b70 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018c6:	2300      	movs	r3, #0
 80018c8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018ca:	2300      	movs	r3, #0
 80018cc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018ce:	2300      	movs	r3, #0
 80018d0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80018d2:	2300      	movs	r3, #0
 80018d4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018d6:	2300      	movs	r3, #0
 80018d8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018de:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80018e0:	2300      	movs	r3, #0
 80018e2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80018e4:	2300      	movs	r3, #0
 80018e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80018e8:	1d3b      	adds	r3, r7, #4
 80018ea:	4619      	mov	r1, r3
 80018ec:	4807      	ldr	r0, [pc, #28]	; (800190c <MX_TIM15_Init+0x140>)
 80018ee:	f009 fd33 	bl	800b358 <HAL_TIMEx_ConfigBreakDeadTime>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d001      	beq.n	80018fc <MX_TIM15_Init+0x130>
  {
    Error_Handler();
 80018f8:	f000 f93a 	bl	8001b70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80018fc:	4803      	ldr	r0, [pc, #12]	; (800190c <MX_TIM15_Init+0x140>)
 80018fe:	f001 f987 	bl	8002c10 <HAL_TIM_MspPostInit>

}
 8001902:	bf00      	nop
 8001904:	3768      	adds	r7, #104	; 0x68
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	240004cc 	.word	0x240004cc
 8001910:	40014000 	.word	0x40014000

08001914 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800191a:	4b0d      	ldr	r3, [pc, #52]	; (8001950 <MX_DMA_Init+0x3c>)
 800191c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001920:	4a0b      	ldr	r2, [pc, #44]	; (8001950 <MX_DMA_Init+0x3c>)
 8001922:	f043 0301 	orr.w	r3, r3, #1
 8001926:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800192a:	4b09      	ldr	r3, [pc, #36]	; (8001950 <MX_DMA_Init+0x3c>)
 800192c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001930:	f003 0301 	and.w	r3, r3, #1
 8001934:	607b      	str	r3, [r7, #4]
 8001936:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001938:	2200      	movs	r2, #0
 800193a:	2100      	movs	r1, #0
 800193c:	200b      	movs	r0, #11
 800193e:	f002 fdf4 	bl	800452a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001942:	200b      	movs	r0, #11
 8001944:	f002 fe0b 	bl	800455e <HAL_NVIC_EnableIRQ>

}
 8001948:	bf00      	nop
 800194a:	3708      	adds	r7, #8
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	58024400 	.word	0x58024400

08001954 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b08c      	sub	sp, #48	; 0x30
 8001958:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800195a:	f107 031c 	add.w	r3, r7, #28
 800195e:	2200      	movs	r2, #0
 8001960:	601a      	str	r2, [r3, #0]
 8001962:	605a      	str	r2, [r3, #4]
 8001964:	609a      	str	r2, [r3, #8]
 8001966:	60da      	str	r2, [r3, #12]
 8001968:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800196a:	4b7b      	ldr	r3, [pc, #492]	; (8001b58 <MX_GPIO_Init+0x204>)
 800196c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001970:	4a79      	ldr	r2, [pc, #484]	; (8001b58 <MX_GPIO_Init+0x204>)
 8001972:	f043 0310 	orr.w	r3, r3, #16
 8001976:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800197a:	4b77      	ldr	r3, [pc, #476]	; (8001b58 <MX_GPIO_Init+0x204>)
 800197c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001980:	f003 0310 	and.w	r3, r3, #16
 8001984:	61bb      	str	r3, [r7, #24]
 8001986:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001988:	4b73      	ldr	r3, [pc, #460]	; (8001b58 <MX_GPIO_Init+0x204>)
 800198a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800198e:	4a72      	ldr	r2, [pc, #456]	; (8001b58 <MX_GPIO_Init+0x204>)
 8001990:	f043 0304 	orr.w	r3, r3, #4
 8001994:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001998:	4b6f      	ldr	r3, [pc, #444]	; (8001b58 <MX_GPIO_Init+0x204>)
 800199a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800199e:	f003 0304 	and.w	r3, r3, #4
 80019a2:	617b      	str	r3, [r7, #20]
 80019a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019a6:	4b6c      	ldr	r3, [pc, #432]	; (8001b58 <MX_GPIO_Init+0x204>)
 80019a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019ac:	4a6a      	ldr	r2, [pc, #424]	; (8001b58 <MX_GPIO_Init+0x204>)
 80019ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019b6:	4b68      	ldr	r3, [pc, #416]	; (8001b58 <MX_GPIO_Init+0x204>)
 80019b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019c0:	613b      	str	r3, [r7, #16]
 80019c2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c4:	4b64      	ldr	r3, [pc, #400]	; (8001b58 <MX_GPIO_Init+0x204>)
 80019c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019ca:	4a63      	ldr	r2, [pc, #396]	; (8001b58 <MX_GPIO_Init+0x204>)
 80019cc:	f043 0301 	orr.w	r3, r3, #1
 80019d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019d4:	4b60      	ldr	r3, [pc, #384]	; (8001b58 <MX_GPIO_Init+0x204>)
 80019d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	60fb      	str	r3, [r7, #12]
 80019e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019e2:	4b5d      	ldr	r3, [pc, #372]	; (8001b58 <MX_GPIO_Init+0x204>)
 80019e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019e8:	4a5b      	ldr	r2, [pc, #364]	; (8001b58 <MX_GPIO_Init+0x204>)
 80019ea:	f043 0302 	orr.w	r3, r3, #2
 80019ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019f2:	4b59      	ldr	r3, [pc, #356]	; (8001b58 <MX_GPIO_Init+0x204>)
 80019f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019f8:	f003 0302 	and.w	r3, r3, #2
 80019fc:	60bb      	str	r3, [r7, #8]
 80019fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a00:	4b55      	ldr	r3, [pc, #340]	; (8001b58 <MX_GPIO_Init+0x204>)
 8001a02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a06:	4a54      	ldr	r2, [pc, #336]	; (8001b58 <MX_GPIO_Init+0x204>)
 8001a08:	f043 0308 	orr.w	r3, r3, #8
 8001a0c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a10:	4b51      	ldr	r3, [pc, #324]	; (8001b58 <MX_GPIO_Init+0x204>)
 8001a12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a16:	f003 0308 	and.w	r3, r3, #8
 8001a1a:	607b      	str	r3, [r7, #4]
 8001a1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SPI4_CS2_Pin|SPI4_CS1_Pin|SPI1_CS_Pin|SPI2_CS0_Pin
 8001a1e:	2200      	movs	r2, #0
 8001a20:	f24f 0118 	movw	r1, #61464	; 0xf018
 8001a24:	484d      	ldr	r0, [pc, #308]	; (8001b5c <MX_GPIO_Init+0x208>)
 8001a26:	f005 f8e1 	bl	8006bec <HAL_GPIO_WritePin>
                          |SPI2_CS1_Pin|SPI2_CS2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_AUX_4_Pin|GPIO_AUX_3_Pin|GPIO_AUX_2_Pin|GPIO_AUX_1_Pin
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	f647 0190 	movw	r1, #30864	; 0x7890
 8001a30:	484b      	ldr	r0, [pc, #300]	; (8001b60 <MX_GPIO_Init+0x20c>)
 8001a32:	f005 f8db 	bl	8006bec <HAL_GPIO_WritePin>
                          |SPI3_CS0_Pin|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS1_GPIO_Port, SPI3_CS1_Pin, GPIO_PIN_RESET);
 8001a36:	2200      	movs	r2, #0
 8001a38:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a3c:	4849      	ldr	r0, [pc, #292]	; (8001b64 <MX_GPIO_Init+0x210>)
 8001a3e:	f005 f8d5 	bl	8006bec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI4_CS2_Pin SPI4_CS1_Pin SPI1_CS_Pin SPI2_CS0_Pin
                           SPI2_CS1_Pin SPI2_CS2_Pin */
  GPIO_InitStruct.Pin = SPI4_CS2_Pin|SPI4_CS1_Pin|SPI1_CS_Pin|SPI2_CS0_Pin
 8001a42:	f24f 0318 	movw	r3, #61464	; 0xf018
 8001a46:	61fb      	str	r3, [r7, #28]
                          |SPI2_CS1_Pin|SPI2_CS2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a50:	2300      	movs	r3, #0
 8001a52:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a54:	f107 031c 	add.w	r3, r7, #28
 8001a58:	4619      	mov	r1, r3
 8001a5a:	4840      	ldr	r0, [pc, #256]	; (8001b5c <MX_GPIO_Init+0x208>)
 8001a5c:	f004 ff16 	bl	800688c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a60:	2301      	movs	r3, #1
 8001a62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a64:	2302      	movs	r3, #2
 8001a66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a70:	2301      	movs	r3, #1
 8001a72:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a74:	f107 031c 	add.w	r3, r7, #28
 8001a78:	4619      	mov	r1, r3
 8001a7a:	483a      	ldr	r0, [pc, #232]	; (8001b64 <MX_GPIO_Init+0x210>)
 8001a7c:	f004 ff06 	bl	800688c <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_AUX_4_Pin GPIO_AUX_3_Pin GPIO_AUX_2_Pin GPIO_AUX_1_Pin
                           SPI3_CS0_Pin PD7 */
  GPIO_InitStruct.Pin = GPIO_AUX_4_Pin|GPIO_AUX_3_Pin|GPIO_AUX_2_Pin|GPIO_AUX_1_Pin
 8001a80:	f647 0390 	movw	r3, #30864	; 0x7890
 8001a84:	61fb      	str	r3, [r7, #28]
                          |SPI3_CS0_Pin|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a86:	2301      	movs	r3, #1
 8001a88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a92:	f107 031c 	add.w	r3, r7, #28
 8001a96:	4619      	mov	r1, r3
 8001a98:	4831      	ldr	r0, [pc, #196]	; (8001b60 <MX_GPIO_Init+0x20c>)
 8001a9a:	f004 fef7 	bl	800688c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001aa2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001aac:	f107 031c 	add.w	r3, r7, #28
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	482d      	ldr	r0, [pc, #180]	; (8001b68 <MX_GPIO_Init+0x214>)
 8001ab4:	f004 feea 	bl	800688c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_CS1_Pin */
  GPIO_InitStruct.Pin = SPI3_CS1_Pin;
 8001ab8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001abc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI3_CS1_GPIO_Port, &GPIO_InitStruct);
 8001aca:	f107 031c 	add.w	r3, r7, #28
 8001ace:	4619      	mov	r1, r3
 8001ad0:	4824      	ldr	r0, [pc, #144]	; (8001b64 <MX_GPIO_Init+0x210>)
 8001ad2:	f004 fedb 	bl	800688c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001ad6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ada:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001adc:	2302      	movs	r3, #2
 8001ade:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001ae8:	2308      	movs	r3, #8
 8001aea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001aec:	f107 031c 	add.w	r3, r7, #28
 8001af0:	4619      	mov	r1, r3
 8001af2:	481d      	ldr	r0, [pc, #116]	; (8001b68 <MX_GPIO_Init+0x214>)
 8001af4:	f004 feca 	bl	800688c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001af8:	2304      	movs	r3, #4
 8001afa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001afc:	2300      	movs	r3, #0
 8001afe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b00:	2300      	movs	r3, #0
 8001b02:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b04:	f107 031c 	add.w	r3, r7, #28
 8001b08:	4619      	mov	r1, r3
 8001b0a:	4815      	ldr	r0, [pc, #84]	; (8001b60 <MX_GPIO_Init+0x20c>)
 8001b0c:	f004 febe 	bl	800688c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001b10:	2310      	movs	r3, #16
 8001b12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b14:	2302      	movs	r3, #2
 8001b16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001b20:	2306      	movs	r3, #6
 8001b22:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b24:	f107 031c 	add.w	r3, r7, #28
 8001b28:	4619      	mov	r1, r3
 8001b2a:	4810      	ldr	r0, [pc, #64]	; (8001b6c <MX_GPIO_Init+0x218>)
 8001b2c:	f004 feae 	bl	800688c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001b30:	2320      	movs	r3, #32
 8001b32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b34:	2302      	movs	r3, #2
 8001b36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8001b40:	2307      	movs	r3, #7
 8001b42:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b44:	f107 031c 	add.w	r3, r7, #28
 8001b48:	4619      	mov	r1, r3
 8001b4a:	4808      	ldr	r0, [pc, #32]	; (8001b6c <MX_GPIO_Init+0x218>)
 8001b4c:	f004 fe9e 	bl	800688c <HAL_GPIO_Init>

}
 8001b50:	bf00      	nop
 8001b52:	3730      	adds	r7, #48	; 0x30
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	58024400 	.word	0x58024400
 8001b5c:	58021000 	.word	0x58021000
 8001b60:	58020c00 	.word	0x58020c00
 8001b64:	58020000 	.word	0x58020000
 8001b68:	58020800 	.word	0x58020800
 8001b6c:	58020400 	.word	0x58020400

08001b70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b74:	b672      	cpsid	i
}
 8001b76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b78:	e7fe      	b.n	8001b78 <Error_Handler+0x8>
	...

08001b7c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b82:	4b0a      	ldr	r3, [pc, #40]	; (8001bac <HAL_MspInit+0x30>)
 8001b84:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001b88:	4a08      	ldr	r2, [pc, #32]	; (8001bac <HAL_MspInit+0x30>)
 8001b8a:	f043 0302 	orr.w	r3, r3, #2
 8001b8e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001b92:	4b06      	ldr	r3, [pc, #24]	; (8001bac <HAL_MspInit+0x30>)
 8001b94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001b98:	f003 0302 	and.w	r3, r3, #2
 8001b9c:	607b      	str	r3, [r7, #4]
 8001b9e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ba0:	bf00      	nop
 8001ba2:	370c      	adds	r7, #12
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr
 8001bac:	58024400 	.word	0x58024400

08001bb0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b090      	sub	sp, #64	; 0x40
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	605a      	str	r2, [r3, #4]
 8001bc2:	609a      	str	r2, [r3, #8]
 8001bc4:	60da      	str	r2, [r3, #12]
 8001bc6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a79      	ldr	r2, [pc, #484]	; (8001db4 <HAL_ADC_MspInit+0x204>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d14e      	bne.n	8001c70 <HAL_ADC_MspInit+0xc0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001bd2:	4b79      	ldr	r3, [pc, #484]	; (8001db8 <HAL_ADC_MspInit+0x208>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	4a77      	ldr	r2, [pc, #476]	; (8001db8 <HAL_ADC_MspInit+0x208>)
 8001bda:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001bdc:	4b76      	ldr	r3, [pc, #472]	; (8001db8 <HAL_ADC_MspInit+0x208>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d10e      	bne.n	8001c02 <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001be4:	4b75      	ldr	r3, [pc, #468]	; (8001dbc <HAL_ADC_MspInit+0x20c>)
 8001be6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001bea:	4a74      	ldr	r2, [pc, #464]	; (8001dbc <HAL_ADC_MspInit+0x20c>)
 8001bec:	f043 0320 	orr.w	r3, r3, #32
 8001bf0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001bf4:	4b71      	ldr	r3, [pc, #452]	; (8001dbc <HAL_ADC_MspInit+0x20c>)
 8001bf6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001bfa:	f003 0320 	and.w	r3, r3, #32
 8001bfe:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c02:	4b6e      	ldr	r3, [pc, #440]	; (8001dbc <HAL_ADC_MspInit+0x20c>)
 8001c04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c08:	4a6c      	ldr	r2, [pc, #432]	; (8001dbc <HAL_ADC_MspInit+0x20c>)
 8001c0a:	f043 0304 	orr.w	r3, r3, #4
 8001c0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c12:	4b6a      	ldr	r3, [pc, #424]	; (8001dbc <HAL_ADC_MspInit+0x20c>)
 8001c14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c18:	f003 0304 	and.w	r3, r3, #4
 8001c1c:	627b      	str	r3, [r7, #36]	; 0x24
 8001c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c20:	4b66      	ldr	r3, [pc, #408]	; (8001dbc <HAL_ADC_MspInit+0x20c>)
 8001c22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c26:	4a65      	ldr	r2, [pc, #404]	; (8001dbc <HAL_ADC_MspInit+0x20c>)
 8001c28:	f043 0302 	orr.w	r3, r3, #2
 8001c2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c30:	4b62      	ldr	r3, [pc, #392]	; (8001dbc <HAL_ADC_MspInit+0x20c>)
 8001c32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c36:	f003 0302 	and.w	r3, r3, #2
 8001c3a:	623b      	str	r3, [r7, #32]
 8001c3c:	6a3b      	ldr	r3, [r7, #32]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INN4
    PB0     ------> ADC1_INN5
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001c3e:	2333      	movs	r3, #51	; 0x33
 8001c40:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c42:	2303      	movs	r3, #3
 8001c44:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c46:	2300      	movs	r3, #0
 8001c48:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c4e:	4619      	mov	r1, r3
 8001c50:	485b      	ldr	r0, [pc, #364]	; (8001dc0 <HAL_ADC_MspInit+0x210>)
 8001c52:	f004 fe1b 	bl	800688c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c56:	2303      	movs	r3, #3
 8001c58:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c66:	4619      	mov	r1, r3
 8001c68:	4856      	ldr	r0, [pc, #344]	; (8001dc4 <HAL_ADC_MspInit+0x214>)
 8001c6a:	f004 fe0f 	bl	800688c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001c6e:	e09d      	b.n	8001dac <HAL_ADC_MspInit+0x1fc>
  else if(hadc->Instance==ADC2)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a54      	ldr	r2, [pc, #336]	; (8001dc8 <HAL_ADC_MspInit+0x218>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d169      	bne.n	8001d4e <HAL_ADC_MspInit+0x19e>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001c7a:	4b4f      	ldr	r3, [pc, #316]	; (8001db8 <HAL_ADC_MspInit+0x208>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	3301      	adds	r3, #1
 8001c80:	4a4d      	ldr	r2, [pc, #308]	; (8001db8 <HAL_ADC_MspInit+0x208>)
 8001c82:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001c84:	4b4c      	ldr	r3, [pc, #304]	; (8001db8 <HAL_ADC_MspInit+0x208>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d10e      	bne.n	8001caa <HAL_ADC_MspInit+0xfa>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001c8c:	4b4b      	ldr	r3, [pc, #300]	; (8001dbc <HAL_ADC_MspInit+0x20c>)
 8001c8e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001c92:	4a4a      	ldr	r2, [pc, #296]	; (8001dbc <HAL_ADC_MspInit+0x20c>)
 8001c94:	f043 0320 	orr.w	r3, r3, #32
 8001c98:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001c9c:	4b47      	ldr	r3, [pc, #284]	; (8001dbc <HAL_ADC_MspInit+0x20c>)
 8001c9e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001ca2:	f003 0320 	and.w	r3, r3, #32
 8001ca6:	61fb      	str	r3, [r7, #28]
 8001ca8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001caa:	4b44      	ldr	r3, [pc, #272]	; (8001dbc <HAL_ADC_MspInit+0x20c>)
 8001cac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cb0:	4a42      	ldr	r2, [pc, #264]	; (8001dbc <HAL_ADC_MspInit+0x20c>)
 8001cb2:	f043 0304 	orr.w	r3, r3, #4
 8001cb6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cba:	4b40      	ldr	r3, [pc, #256]	; (8001dbc <HAL_ADC_MspInit+0x20c>)
 8001cbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cc0:	f003 0304 	and.w	r3, r3, #4
 8001cc4:	61bb      	str	r3, [r7, #24]
 8001cc6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cc8:	4b3c      	ldr	r3, [pc, #240]	; (8001dbc <HAL_ADC_MspInit+0x20c>)
 8001cca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cce:	4a3b      	ldr	r2, [pc, #236]	; (8001dbc <HAL_ADC_MspInit+0x20c>)
 8001cd0:	f043 0301 	orr.w	r3, r3, #1
 8001cd4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cd8:	4b38      	ldr	r3, [pc, #224]	; (8001dbc <HAL_ADC_MspInit+0x20c>)
 8001cda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cde:	f003 0301 	and.w	r3, r3, #1
 8001ce2:	617b      	str	r3, [r7, #20]
 8001ce4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ce6:	4b35      	ldr	r3, [pc, #212]	; (8001dbc <HAL_ADC_MspInit+0x20c>)
 8001ce8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cec:	4a33      	ldr	r2, [pc, #204]	; (8001dbc <HAL_ADC_MspInit+0x20c>)
 8001cee:	f043 0302 	orr.w	r3, r3, #2
 8001cf2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cf6:	4b31      	ldr	r3, [pc, #196]	; (8001dbc <HAL_ADC_MspInit+0x20c>)
 8001cf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cfc:	f003 0302 	and.w	r3, r3, #2
 8001d00:	613b      	str	r3, [r7, #16]
 8001d02:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001d04:	2333      	movs	r3, #51	; 0x33
 8001d06:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d14:	4619      	mov	r1, r3
 8001d16:	482a      	ldr	r0, [pc, #168]	; (8001dc0 <HAL_ADC_MspInit+0x210>)
 8001d18:	f004 fdb8 	bl	800688c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001d1c:	2304      	movs	r3, #4
 8001d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d20:	2303      	movs	r3, #3
 8001d22:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d24:	2300      	movs	r3, #0
 8001d26:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	4827      	ldr	r0, [pc, #156]	; (8001dcc <HAL_ADC_MspInit+0x21c>)
 8001d30:	f004 fdac 	bl	800688c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001d34:	2303      	movs	r3, #3
 8001d36:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d44:	4619      	mov	r1, r3
 8001d46:	481f      	ldr	r0, [pc, #124]	; (8001dc4 <HAL_ADC_MspInit+0x214>)
 8001d48:	f004 fda0 	bl	800688c <HAL_GPIO_Init>
}
 8001d4c:	e02e      	b.n	8001dac <HAL_ADC_MspInit+0x1fc>
  else if(hadc->Instance==ADC3)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a1f      	ldr	r2, [pc, #124]	; (8001dd0 <HAL_ADC_MspInit+0x220>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d129      	bne.n	8001dac <HAL_ADC_MspInit+0x1fc>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001d58:	4b18      	ldr	r3, [pc, #96]	; (8001dbc <HAL_ADC_MspInit+0x20c>)
 8001d5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d5e:	4a17      	ldr	r2, [pc, #92]	; (8001dbc <HAL_ADC_MspInit+0x20c>)
 8001d60:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d64:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d68:	4b14      	ldr	r3, [pc, #80]	; (8001dbc <HAL_ADC_MspInit+0x20c>)
 8001d6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d6e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d72:	60fb      	str	r3, [r7, #12]
 8001d74:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d76:	4b11      	ldr	r3, [pc, #68]	; (8001dbc <HAL_ADC_MspInit+0x20c>)
 8001d78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d7c:	4a0f      	ldr	r2, [pc, #60]	; (8001dbc <HAL_ADC_MspInit+0x20c>)
 8001d7e:	f043 0304 	orr.w	r3, r3, #4
 8001d82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d86:	4b0d      	ldr	r3, [pc, #52]	; (8001dbc <HAL_ADC_MspInit+0x20c>)
 8001d88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d8c:	f003 0304 	and.w	r3, r3, #4
 8001d90:	60bb      	str	r3, [r7, #8]
 8001d92:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001d94:	2303      	movs	r3, #3
 8001d96:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001da0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001da4:	4619      	mov	r1, r3
 8001da6:	4806      	ldr	r0, [pc, #24]	; (8001dc0 <HAL_ADC_MspInit+0x210>)
 8001da8:	f004 fd70 	bl	800688c <HAL_GPIO_Init>
}
 8001dac:	bf00      	nop
 8001dae:	3740      	adds	r7, #64	; 0x40
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	40022000 	.word	0x40022000
 8001db8:	240001fc 	.word	0x240001fc
 8001dbc:	58024400 	.word	0x58024400
 8001dc0:	58020800 	.word	0x58020800
 8001dc4:	58020400 	.word	0x58020400
 8001dc8:	40022100 	.word	0x40022100
 8001dcc:	58020000 	.word	0x58020000
 8001dd0:	58026000 	.word	0x58026000

08001dd4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b08a      	sub	sp, #40	; 0x28
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ddc:	f107 0314 	add.w	r3, r7, #20
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	605a      	str	r2, [r3, #4]
 8001de6:	609a      	str	r2, [r3, #8]
 8001de8:	60da      	str	r2, [r3, #12]
 8001dea:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a18      	ldr	r2, [pc, #96]	; (8001e54 <HAL_DAC_MspInit+0x80>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d129      	bne.n	8001e4a <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8001df6:	4b18      	ldr	r3, [pc, #96]	; (8001e58 <HAL_DAC_MspInit+0x84>)
 8001df8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001dfc:	4a16      	ldr	r2, [pc, #88]	; (8001e58 <HAL_DAC_MspInit+0x84>)
 8001dfe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001e02:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001e06:	4b14      	ldr	r3, [pc, #80]	; (8001e58 <HAL_DAC_MspInit+0x84>)
 8001e08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e10:	613b      	str	r3, [r7, #16]
 8001e12:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e14:	4b10      	ldr	r3, [pc, #64]	; (8001e58 <HAL_DAC_MspInit+0x84>)
 8001e16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e1a:	4a0f      	ldr	r2, [pc, #60]	; (8001e58 <HAL_DAC_MspInit+0x84>)
 8001e1c:	f043 0301 	orr.w	r3, r3, #1
 8001e20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e24:	4b0c      	ldr	r3, [pc, #48]	; (8001e58 <HAL_DAC_MspInit+0x84>)
 8001e26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e2a:	f003 0301 	and.w	r3, r3, #1
 8001e2e:	60fb      	str	r3, [r7, #12]
 8001e30:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001e32:	2330      	movs	r3, #48	; 0x30
 8001e34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e36:	2303      	movs	r3, #3
 8001e38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e3e:	f107 0314 	add.w	r3, r7, #20
 8001e42:	4619      	mov	r1, r3
 8001e44:	4805      	ldr	r0, [pc, #20]	; (8001e5c <HAL_DAC_MspInit+0x88>)
 8001e46:	f004 fd21 	bl	800688c <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001e4a:	bf00      	nop
 8001e4c:	3728      	adds	r7, #40	; 0x28
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	40007400 	.word	0x40007400
 8001e58:	58024400 	.word	0x58024400
 8001e5c:	58020000 	.word	0x58020000

08001e60 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b0ba      	sub	sp, #232	; 0xe8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e68:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	601a      	str	r2, [r3, #0]
 8001e70:	605a      	str	r2, [r3, #4]
 8001e72:	609a      	str	r2, [r3, #8]
 8001e74:	60da      	str	r2, [r3, #12]
 8001e76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e78:	f107 0318 	add.w	r3, r7, #24
 8001e7c:	22bc      	movs	r2, #188	; 0xbc
 8001e7e:	2100      	movs	r1, #0
 8001e80:	4618      	mov	r0, r3
 8001e82:	f00b fa21 	bl	800d2c8 <memset>
  if(hfdcan->Instance==FDCAN1)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a54      	ldr	r2, [pc, #336]	; (8001fdc <HAL_FDCAN_MspInit+0x17c>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d14e      	bne.n	8001f2e <HAL_FDCAN_MspInit+0xce>
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001e90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e94:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001e96:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001e9a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e9e:	f107 0318 	add.w	r3, r7, #24
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f006 f874 	bl	8007f90 <HAL_RCCEx_PeriphCLKConfig>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <HAL_FDCAN_MspInit+0x52>
    {
      Error_Handler();
 8001eae:	f7ff fe5f 	bl	8001b70 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001eb2:	4b4b      	ldr	r3, [pc, #300]	; (8001fe0 <HAL_FDCAN_MspInit+0x180>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	4a49      	ldr	r2, [pc, #292]	; (8001fe0 <HAL_FDCAN_MspInit+0x180>)
 8001eba:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001ebc:	4b48      	ldr	r3, [pc, #288]	; (8001fe0 <HAL_FDCAN_MspInit+0x180>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d10e      	bne.n	8001ee2 <HAL_FDCAN_MspInit+0x82>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001ec4:	4b47      	ldr	r3, [pc, #284]	; (8001fe4 <HAL_FDCAN_MspInit+0x184>)
 8001ec6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001eca:	4a46      	ldr	r2, [pc, #280]	; (8001fe4 <HAL_FDCAN_MspInit+0x184>)
 8001ecc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ed0:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001ed4:	4b43      	ldr	r3, [pc, #268]	; (8001fe4 <HAL_FDCAN_MspInit+0x184>)
 8001ed6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ede:	617b      	str	r3, [r7, #20]
 8001ee0:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ee2:	4b40      	ldr	r3, [pc, #256]	; (8001fe4 <HAL_FDCAN_MspInit+0x184>)
 8001ee4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ee8:	4a3e      	ldr	r2, [pc, #248]	; (8001fe4 <HAL_FDCAN_MspInit+0x184>)
 8001eea:	f043 0301 	orr.w	r3, r3, #1
 8001eee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ef2:	4b3c      	ldr	r3, [pc, #240]	; (8001fe4 <HAL_FDCAN_MspInit+0x184>)
 8001ef4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ef8:	f003 0301 	and.w	r3, r3, #1
 8001efc:	613b      	str	r3, [r7, #16]
 8001efe:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001f00:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001f04:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f08:	2302      	movs	r3, #2
 8001f0a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f14:	2300      	movs	r3, #0
 8001f16:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001f1a:	2309      	movs	r3, #9
 8001f1c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f20:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001f24:	4619      	mov	r1, r3
 8001f26:	4830      	ldr	r0, [pc, #192]	; (8001fe8 <HAL_FDCAN_MspInit+0x188>)
 8001f28:	f004 fcb0 	bl	800688c <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8001f2c:	e052      	b.n	8001fd4 <HAL_FDCAN_MspInit+0x174>
  else if(hfdcan->Instance==FDCAN2)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a2e      	ldr	r2, [pc, #184]	; (8001fec <HAL_FDCAN_MspInit+0x18c>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d14d      	bne.n	8001fd4 <HAL_FDCAN_MspInit+0x174>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001f38:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f3c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001f3e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001f42:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f46:	f107 0318 	add.w	r3, r7, #24
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f006 f820 	bl	8007f90 <HAL_RCCEx_PeriphCLKConfig>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <HAL_FDCAN_MspInit+0xfa>
      Error_Handler();
 8001f56:	f7ff fe0b 	bl	8001b70 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001f5a:	4b21      	ldr	r3, [pc, #132]	; (8001fe0 <HAL_FDCAN_MspInit+0x180>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	3301      	adds	r3, #1
 8001f60:	4a1f      	ldr	r2, [pc, #124]	; (8001fe0 <HAL_FDCAN_MspInit+0x180>)
 8001f62:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001f64:	4b1e      	ldr	r3, [pc, #120]	; (8001fe0 <HAL_FDCAN_MspInit+0x180>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d10e      	bne.n	8001f8a <HAL_FDCAN_MspInit+0x12a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001f6c:	4b1d      	ldr	r3, [pc, #116]	; (8001fe4 <HAL_FDCAN_MspInit+0x184>)
 8001f6e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001f72:	4a1c      	ldr	r2, [pc, #112]	; (8001fe4 <HAL_FDCAN_MspInit+0x184>)
 8001f74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f78:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001f7c:	4b19      	ldr	r3, [pc, #100]	; (8001fe4 <HAL_FDCAN_MspInit+0x184>)
 8001f7e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f86:	60fb      	str	r3, [r7, #12]
 8001f88:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f8a:	4b16      	ldr	r3, [pc, #88]	; (8001fe4 <HAL_FDCAN_MspInit+0x184>)
 8001f8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f90:	4a14      	ldr	r2, [pc, #80]	; (8001fe4 <HAL_FDCAN_MspInit+0x184>)
 8001f92:	f043 0302 	orr.w	r3, r3, #2
 8001f96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f9a:	4b12      	ldr	r3, [pc, #72]	; (8001fe4 <HAL_FDCAN_MspInit+0x184>)
 8001f9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fa0:	f003 0302 	and.w	r3, r3, #2
 8001fa4:	60bb      	str	r3, [r7, #8]
 8001fa6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001fa8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001fac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb0:	2302      	movs	r3, #2
 8001fb2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001fc2:	2309      	movs	r3, #9
 8001fc4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fc8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001fcc:	4619      	mov	r1, r3
 8001fce:	4808      	ldr	r0, [pc, #32]	; (8001ff0 <HAL_FDCAN_MspInit+0x190>)
 8001fd0:	f004 fc5c 	bl	800688c <HAL_GPIO_Init>
}
 8001fd4:	bf00      	nop
 8001fd6:	37e8      	adds	r7, #232	; 0xe8
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	4000a000 	.word	0x4000a000
 8001fe0:	24000200 	.word	0x24000200
 8001fe4:	58024400 	.word	0x58024400
 8001fe8:	58020000 	.word	0x58020000
 8001fec:	4000a400 	.word	0x4000a400
 8001ff0:	58020400 	.word	0x58020400

08001ff4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b0bc      	sub	sp, #240	; 0xf0
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ffc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002000:	2200      	movs	r2, #0
 8002002:	601a      	str	r2, [r3, #0]
 8002004:	605a      	str	r2, [r3, #4]
 8002006:	609a      	str	r2, [r3, #8]
 8002008:	60da      	str	r2, [r3, #12]
 800200a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800200c:	f107 0320 	add.w	r3, r7, #32
 8002010:	22bc      	movs	r2, #188	; 0xbc
 8002012:	2100      	movs	r1, #0
 8002014:	4618      	mov	r0, r3
 8002016:	f00b f957 	bl	800d2c8 <memset>
  if(hi2c->Instance==I2C1)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a6d      	ldr	r2, [pc, #436]	; (80021d4 <HAL_I2C_MspInit+0x1e0>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d142      	bne.n	80020aa <HAL_I2C_MspInit+0xb6>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002024:	2308      	movs	r3, #8
 8002026:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8002028:	2300      	movs	r3, #0
 800202a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800202e:	f107 0320 	add.w	r3, r7, #32
 8002032:	4618      	mov	r0, r3
 8002034:	f005 ffac 	bl	8007f90 <HAL_RCCEx_PeriphCLKConfig>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800203e:	f7ff fd97 	bl	8001b70 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002042:	4b65      	ldr	r3, [pc, #404]	; (80021d8 <HAL_I2C_MspInit+0x1e4>)
 8002044:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002048:	4a63      	ldr	r2, [pc, #396]	; (80021d8 <HAL_I2C_MspInit+0x1e4>)
 800204a:	f043 0302 	orr.w	r3, r3, #2
 800204e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002052:	4b61      	ldr	r3, [pc, #388]	; (80021d8 <HAL_I2C_MspInit+0x1e4>)
 8002054:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002058:	f003 0302 	and.w	r3, r3, #2
 800205c:	61fb      	str	r3, [r7, #28]
 800205e:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002060:	23c0      	movs	r3, #192	; 0xc0
 8002062:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002066:	2312      	movs	r3, #18
 8002068:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206c:	2300      	movs	r3, #0
 800206e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002072:	2300      	movs	r3, #0
 8002074:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002078:	2304      	movs	r3, #4
 800207a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800207e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002082:	4619      	mov	r1, r3
 8002084:	4855      	ldr	r0, [pc, #340]	; (80021dc <HAL_I2C_MspInit+0x1e8>)
 8002086:	f004 fc01 	bl	800688c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800208a:	4b53      	ldr	r3, [pc, #332]	; (80021d8 <HAL_I2C_MspInit+0x1e4>)
 800208c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002090:	4a51      	ldr	r2, [pc, #324]	; (80021d8 <HAL_I2C_MspInit+0x1e4>)
 8002092:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002096:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800209a:	4b4f      	ldr	r3, [pc, #316]	; (80021d8 <HAL_I2C_MspInit+0x1e4>)
 800209c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80020a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020a4:	61bb      	str	r3, [r7, #24]
 80020a6:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 80020a8:	e090      	b.n	80021cc <HAL_I2C_MspInit+0x1d8>
  else if(hi2c->Instance==I2C2)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a4c      	ldr	r2, [pc, #304]	; (80021e0 <HAL_I2C_MspInit+0x1ec>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d143      	bne.n	800213c <HAL_I2C_MspInit+0x148>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80020b4:	2308      	movs	r3, #8
 80020b6:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80020b8:	2300      	movs	r3, #0
 80020ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020be:	f107 0320 	add.w	r3, r7, #32
 80020c2:	4618      	mov	r0, r3
 80020c4:	f005 ff64 	bl	8007f90 <HAL_RCCEx_PeriphCLKConfig>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <HAL_I2C_MspInit+0xde>
      Error_Handler();
 80020ce:	f7ff fd4f 	bl	8001b70 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020d2:	4b41      	ldr	r3, [pc, #260]	; (80021d8 <HAL_I2C_MspInit+0x1e4>)
 80020d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020d8:	4a3f      	ldr	r2, [pc, #252]	; (80021d8 <HAL_I2C_MspInit+0x1e4>)
 80020da:	f043 0302 	orr.w	r3, r3, #2
 80020de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020e2:	4b3d      	ldr	r3, [pc, #244]	; (80021d8 <HAL_I2C_MspInit+0x1e4>)
 80020e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020e8:	f003 0302 	and.w	r3, r3, #2
 80020ec:	617b      	str	r3, [r7, #20]
 80020ee:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80020f0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80020f4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020f8:	2312      	movs	r3, #18
 80020fa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fe:	2300      	movs	r3, #0
 8002100:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002104:	2300      	movs	r3, #0
 8002106:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800210a:	2304      	movs	r3, #4
 800210c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002110:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002114:	4619      	mov	r1, r3
 8002116:	4831      	ldr	r0, [pc, #196]	; (80021dc <HAL_I2C_MspInit+0x1e8>)
 8002118:	f004 fbb8 	bl	800688c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800211c:	4b2e      	ldr	r3, [pc, #184]	; (80021d8 <HAL_I2C_MspInit+0x1e4>)
 800211e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002122:	4a2d      	ldr	r2, [pc, #180]	; (80021d8 <HAL_I2C_MspInit+0x1e4>)
 8002124:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002128:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800212c:	4b2a      	ldr	r3, [pc, #168]	; (80021d8 <HAL_I2C_MspInit+0x1e4>)
 800212e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002132:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002136:	613b      	str	r3, [r7, #16]
 8002138:	693b      	ldr	r3, [r7, #16]
}
 800213a:	e047      	b.n	80021cc <HAL_I2C_MspInit+0x1d8>
  else if(hi2c->Instance==I2C4)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a28      	ldr	r2, [pc, #160]	; (80021e4 <HAL_I2C_MspInit+0x1f0>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d142      	bne.n	80021cc <HAL_I2C_MspInit+0x1d8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8002146:	2310      	movs	r3, #16
 8002148:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 800214a:	2300      	movs	r3, #0
 800214c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002150:	f107 0320 	add.w	r3, r7, #32
 8002154:	4618      	mov	r0, r3
 8002156:	f005 ff1b 	bl	8007f90 <HAL_RCCEx_PeriphCLKConfig>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d001      	beq.n	8002164 <HAL_I2C_MspInit+0x170>
      Error_Handler();
 8002160:	f7ff fd06 	bl	8001b70 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002164:	4b1c      	ldr	r3, [pc, #112]	; (80021d8 <HAL_I2C_MspInit+0x1e4>)
 8002166:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800216a:	4a1b      	ldr	r2, [pc, #108]	; (80021d8 <HAL_I2C_MspInit+0x1e4>)
 800216c:	f043 0302 	orr.w	r3, r3, #2
 8002170:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002174:	4b18      	ldr	r3, [pc, #96]	; (80021d8 <HAL_I2C_MspInit+0x1e4>)
 8002176:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800217a:	f003 0302 	and.w	r3, r3, #2
 800217e:	60fb      	str	r3, [r7, #12]
 8002180:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002182:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002186:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800218a:	2312      	movs	r3, #18
 800218c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002190:	2300      	movs	r3, #0
 8002192:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002196:	2300      	movs	r3, #0
 8002198:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C4;
 800219c:	2306      	movs	r3, #6
 800219e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021a2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80021a6:	4619      	mov	r1, r3
 80021a8:	480c      	ldr	r0, [pc, #48]	; (80021dc <HAL_I2C_MspInit+0x1e8>)
 80021aa:	f004 fb6f 	bl	800688c <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 80021ae:	4b0a      	ldr	r3, [pc, #40]	; (80021d8 <HAL_I2C_MspInit+0x1e4>)
 80021b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80021b4:	4a08      	ldr	r2, [pc, #32]	; (80021d8 <HAL_I2C_MspInit+0x1e4>)
 80021b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021ba:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80021be:	4b06      	ldr	r3, [pc, #24]	; (80021d8 <HAL_I2C_MspInit+0x1e4>)
 80021c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80021c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021c8:	60bb      	str	r3, [r7, #8]
 80021ca:	68bb      	ldr	r3, [r7, #8]
}
 80021cc:	bf00      	nop
 80021ce:	37f0      	adds	r7, #240	; 0xf0
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	40005400 	.word	0x40005400
 80021d8:	58024400 	.word	0x58024400
 80021dc:	58020400 	.word	0x58020400
 80021e0:	40005800 	.word	0x40005800
 80021e4:	58001c00 	.word	0x58001c00

080021e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b0be      	sub	sp, #248	; 0xf8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80021f4:	2200      	movs	r2, #0
 80021f6:	601a      	str	r2, [r3, #0]
 80021f8:	605a      	str	r2, [r3, #4]
 80021fa:	609a      	str	r2, [r3, #8]
 80021fc:	60da      	str	r2, [r3, #12]
 80021fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002200:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002204:	22bc      	movs	r2, #188	; 0xbc
 8002206:	2100      	movs	r1, #0
 8002208:	4618      	mov	r0, r3
 800220a:	f00b f85d 	bl	800d2c8 <memset>
  if(huart->Instance==LPUART1)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a91      	ldr	r2, [pc, #580]	; (8002458 <HAL_UART_MspInit+0x270>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d143      	bne.n	80022a0 <HAL_UART_MspInit+0xb8>
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002218:	2304      	movs	r3, #4
 800221a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_D3PCLK1;
 800221c:	2300      	movs	r3, #0
 800221e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002222:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002226:	4618      	mov	r0, r3
 8002228:	f005 feb2 	bl	8007f90 <HAL_RCCEx_PeriphCLKConfig>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d001      	beq.n	8002236 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002232:	f7ff fc9d 	bl	8001b70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002236:	4b89      	ldr	r3, [pc, #548]	; (800245c <HAL_UART_MspInit+0x274>)
 8002238:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800223c:	4a87      	ldr	r2, [pc, #540]	; (800245c <HAL_UART_MspInit+0x274>)
 800223e:	f043 0308 	orr.w	r3, r3, #8
 8002242:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002246:	4b85      	ldr	r3, [pc, #532]	; (800245c <HAL_UART_MspInit+0x274>)
 8002248:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800224c:	f003 0308 	and.w	r3, r3, #8
 8002250:	627b      	str	r3, [r7, #36]	; 0x24
 8002252:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002254:	4b81      	ldr	r3, [pc, #516]	; (800245c <HAL_UART_MspInit+0x274>)
 8002256:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800225a:	4a80      	ldr	r2, [pc, #512]	; (800245c <HAL_UART_MspInit+0x274>)
 800225c:	f043 0301 	orr.w	r3, r3, #1
 8002260:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002264:	4b7d      	ldr	r3, [pc, #500]	; (800245c <HAL_UART_MspInit+0x274>)
 8002266:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800226a:	f003 0301 	and.w	r3, r3, #1
 800226e:	623b      	str	r3, [r7, #32]
 8002270:	6a3b      	ldr	r3, [r7, #32]
    /**LPUART1 GPIO Configuration
    PA9     ------> LPUART1_TX
    PA10     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002272:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002276:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800227a:	2302      	movs	r3, #2
 800227c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002280:	2300      	movs	r3, #0
 8002282:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002286:	2300      	movs	r3, #0
 8002288:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF3_LPUART;
 800228c:	2303      	movs	r3, #3
 800228e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002292:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002296:	4619      	mov	r1, r3
 8002298:	4871      	ldr	r0, [pc, #452]	; (8002460 <HAL_UART_MspInit+0x278>)
 800229a:	f004 faf7 	bl	800688c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800229e:	e0d6      	b.n	800244e <HAL_UART_MspInit+0x266>
  else if(huart->Instance==UART4)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a6f      	ldr	r2, [pc, #444]	; (8002464 <HAL_UART_MspInit+0x27c>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d142      	bne.n	8002330 <HAL_UART_MspInit+0x148>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80022aa:	2302      	movs	r3, #2
 80022ac:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80022ae:	2300      	movs	r3, #0
 80022b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022b8:	4618      	mov	r0, r3
 80022ba:	f005 fe69 	bl	8007f90 <HAL_RCCEx_PeriphCLKConfig>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d001      	beq.n	80022c8 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 80022c4:	f7ff fc54 	bl	8001b70 <Error_Handler>
    __HAL_RCC_UART4_CLK_ENABLE();
 80022c8:	4b64      	ldr	r3, [pc, #400]	; (800245c <HAL_UART_MspInit+0x274>)
 80022ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022ce:	4a63      	ldr	r2, [pc, #396]	; (800245c <HAL_UART_MspInit+0x274>)
 80022d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80022d4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80022d8:	4b60      	ldr	r3, [pc, #384]	; (800245c <HAL_UART_MspInit+0x274>)
 80022da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022e2:	61fb      	str	r3, [r7, #28]
 80022e4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022e6:	4b5d      	ldr	r3, [pc, #372]	; (800245c <HAL_UART_MspInit+0x274>)
 80022e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022ec:	4a5b      	ldr	r2, [pc, #364]	; (800245c <HAL_UART_MspInit+0x274>)
 80022ee:	f043 0308 	orr.w	r3, r3, #8
 80022f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022f6:	4b59      	ldr	r3, [pc, #356]	; (800245c <HAL_UART_MspInit+0x274>)
 80022f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022fc:	f003 0308 	and.w	r3, r3, #8
 8002300:	61bb      	str	r3, [r7, #24]
 8002302:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002304:	2303      	movs	r3, #3
 8002306:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800230a:	2302      	movs	r3, #2
 800230c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002310:	2300      	movs	r3, #0
 8002312:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002316:	2300      	movs	r3, #0
 8002318:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800231c:	2308      	movs	r3, #8
 800231e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002322:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002326:	4619      	mov	r1, r3
 8002328:	484f      	ldr	r0, [pc, #316]	; (8002468 <HAL_UART_MspInit+0x280>)
 800232a:	f004 faaf 	bl	800688c <HAL_GPIO_Init>
}
 800232e:	e08e      	b.n	800244e <HAL_UART_MspInit+0x266>
  else if(huart->Instance==UART8)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a4d      	ldr	r2, [pc, #308]	; (800246c <HAL_UART_MspInit+0x284>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d142      	bne.n	80023c0 <HAL_UART_MspInit+0x1d8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 800233a:	2302      	movs	r3, #2
 800233c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800233e:	2300      	movs	r3, #0
 8002340:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002344:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002348:	4618      	mov	r0, r3
 800234a:	f005 fe21 	bl	8007f90 <HAL_RCCEx_PeriphCLKConfig>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d001      	beq.n	8002358 <HAL_UART_MspInit+0x170>
      Error_Handler();
 8002354:	f7ff fc0c 	bl	8001b70 <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 8002358:	4b40      	ldr	r3, [pc, #256]	; (800245c <HAL_UART_MspInit+0x274>)
 800235a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800235e:	4a3f      	ldr	r2, [pc, #252]	; (800245c <HAL_UART_MspInit+0x274>)
 8002360:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002364:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002368:	4b3c      	ldr	r3, [pc, #240]	; (800245c <HAL_UART_MspInit+0x274>)
 800236a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800236e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002372:	617b      	str	r3, [r7, #20]
 8002374:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002376:	4b39      	ldr	r3, [pc, #228]	; (800245c <HAL_UART_MspInit+0x274>)
 8002378:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800237c:	4a37      	ldr	r2, [pc, #220]	; (800245c <HAL_UART_MspInit+0x274>)
 800237e:	f043 0310 	orr.w	r3, r3, #16
 8002382:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002386:	4b35      	ldr	r3, [pc, #212]	; (800245c <HAL_UART_MspInit+0x274>)
 8002388:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800238c:	f003 0310 	and.w	r3, r3, #16
 8002390:	613b      	str	r3, [r7, #16]
 8002392:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002394:	2303      	movs	r3, #3
 8002396:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800239a:	2302      	movs	r3, #2
 800239c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a0:	2300      	movs	r3, #0
 80023a2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023a6:	2300      	movs	r3, #0
 80023a8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 80023ac:	2308      	movs	r3, #8
 80023ae:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80023b2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80023b6:	4619      	mov	r1, r3
 80023b8:	482d      	ldr	r0, [pc, #180]	; (8002470 <HAL_UART_MspInit+0x288>)
 80023ba:	f004 fa67 	bl	800688c <HAL_GPIO_Init>
}
 80023be:	e046      	b.n	800244e <HAL_UART_MspInit+0x266>
  else if(huart->Instance==USART2)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a2b      	ldr	r2, [pc, #172]	; (8002474 <HAL_UART_MspInit+0x28c>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d141      	bne.n	800244e <HAL_UART_MspInit+0x266>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80023ca:	2302      	movs	r3, #2
 80023cc:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80023ce:	2300      	movs	r3, #0
 80023d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023d8:	4618      	mov	r0, r3
 80023da:	f005 fdd9 	bl	8007f90 <HAL_RCCEx_PeriphCLKConfig>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d001      	beq.n	80023e8 <HAL_UART_MspInit+0x200>
      Error_Handler();
 80023e4:	f7ff fbc4 	bl	8001b70 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80023e8:	4b1c      	ldr	r3, [pc, #112]	; (800245c <HAL_UART_MspInit+0x274>)
 80023ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023ee:	4a1b      	ldr	r2, [pc, #108]	; (800245c <HAL_UART_MspInit+0x274>)
 80023f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023f4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80023f8:	4b18      	ldr	r3, [pc, #96]	; (800245c <HAL_UART_MspInit+0x274>)
 80023fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002402:	60fb      	str	r3, [r7, #12]
 8002404:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002406:	4b15      	ldr	r3, [pc, #84]	; (800245c <HAL_UART_MspInit+0x274>)
 8002408:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800240c:	4a13      	ldr	r2, [pc, #76]	; (800245c <HAL_UART_MspInit+0x274>)
 800240e:	f043 0308 	orr.w	r3, r3, #8
 8002412:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002416:	4b11      	ldr	r3, [pc, #68]	; (800245c <HAL_UART_MspInit+0x274>)
 8002418:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800241c:	f003 0308 	and.w	r3, r3, #8
 8002420:	60bb      	str	r3, [r7, #8]
 8002422:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002424:	2360      	movs	r3, #96	; 0x60
 8002426:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800242a:	2302      	movs	r3, #2
 800242c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002430:	2300      	movs	r3, #0
 8002432:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002436:	2300      	movs	r3, #0
 8002438:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800243c:	2307      	movs	r3, #7
 800243e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002442:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002446:	4619      	mov	r1, r3
 8002448:	4807      	ldr	r0, [pc, #28]	; (8002468 <HAL_UART_MspInit+0x280>)
 800244a:	f004 fa1f 	bl	800688c <HAL_GPIO_Init>
}
 800244e:	bf00      	nop
 8002450:	37f8      	adds	r7, #248	; 0xf8
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	58000c00 	.word	0x58000c00
 800245c:	58024400 	.word	0x58024400
 8002460:	58020000 	.word	0x58020000
 8002464:	40004c00 	.word	0x40004c00
 8002468:	58020c00 	.word	0x58020c00
 800246c:	40007c00 	.word	0x40007c00
 8002470:	58021000 	.word	0x58021000
 8002474:	40004400 	.word	0x40004400

08002478 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b0be      	sub	sp, #248	; 0xf8
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002480:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002484:	2200      	movs	r2, #0
 8002486:	601a      	str	r2, [r3, #0]
 8002488:	605a      	str	r2, [r3, #4]
 800248a:	609a      	str	r2, [r3, #8]
 800248c:	60da      	str	r2, [r3, #12]
 800248e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002490:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002494:	22bc      	movs	r2, #188	; 0xbc
 8002496:	2100      	movs	r1, #0
 8002498:	4618      	mov	r0, r3
 800249a:	f00a ff15 	bl	800d2c8 <memset>
  if(husart->Instance==USART1)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a97      	ldr	r2, [pc, #604]	; (8002700 <HAL_USART_MspInit+0x288>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d168      	bne.n	800257a <HAL_USART_MspInit+0x102>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80024a8:	2301      	movs	r3, #1
 80024aa:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80024ac:	2300      	movs	r3, #0
 80024ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024b6:	4618      	mov	r0, r3
 80024b8:	f005 fd6a 	bl	8007f90 <HAL_RCCEx_PeriphCLKConfig>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <HAL_USART_MspInit+0x4e>
    {
      Error_Handler();
 80024c2:	f7ff fb55 	bl	8001b70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80024c6:	4b8f      	ldr	r3, [pc, #572]	; (8002704 <HAL_USART_MspInit+0x28c>)
 80024c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80024cc:	4a8d      	ldr	r2, [pc, #564]	; (8002704 <HAL_USART_MspInit+0x28c>)
 80024ce:	f043 0310 	orr.w	r3, r3, #16
 80024d2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80024d6:	4b8b      	ldr	r3, [pc, #556]	; (8002704 <HAL_USART_MspInit+0x28c>)
 80024d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80024dc:	f003 0310 	and.w	r3, r3, #16
 80024e0:	627b      	str	r3, [r7, #36]	; 0x24
 80024e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024e4:	4b87      	ldr	r3, [pc, #540]	; (8002704 <HAL_USART_MspInit+0x28c>)
 80024e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024ea:	4a86      	ldr	r2, [pc, #536]	; (8002704 <HAL_USART_MspInit+0x28c>)
 80024ec:	f043 0302 	orr.w	r3, r3, #2
 80024f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024f4:	4b83      	ldr	r3, [pc, #524]	; (8002704 <HAL_USART_MspInit+0x28c>)
 80024f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024fa:	f003 0302 	and.w	r3, r3, #2
 80024fe:	623b      	str	r3, [r7, #32]
 8002500:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002502:	4b80      	ldr	r3, [pc, #512]	; (8002704 <HAL_USART_MspInit+0x28c>)
 8002504:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002508:	4a7e      	ldr	r2, [pc, #504]	; (8002704 <HAL_USART_MspInit+0x28c>)
 800250a:	f043 0301 	orr.w	r3, r3, #1
 800250e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002512:	4b7c      	ldr	r3, [pc, #496]	; (8002704 <HAL_USART_MspInit+0x28c>)
 8002514:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002518:	f003 0301 	and.w	r3, r3, #1
 800251c:	61fb      	str	r3, [r7, #28]
 800251e:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    PA8     ------> USART1_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002520:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002524:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002528:	2302      	movs	r3, #2
 800252a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252e:	2300      	movs	r3, #0
 8002530:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002534:	2300      	movs	r3, #0
 8002536:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800253a:	2304      	movs	r3, #4
 800253c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002540:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002544:	4619      	mov	r1, r3
 8002546:	4870      	ldr	r0, [pc, #448]	; (8002708 <HAL_USART_MspInit+0x290>)
 8002548:	f004 f9a0 	bl	800688c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800254c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002550:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002554:	2302      	movs	r3, #2
 8002556:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255a:	2300      	movs	r3, #0
 800255c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002560:	2300      	movs	r3, #0
 8002562:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002566:	2307      	movs	r3, #7
 8002568:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800256c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002570:	4619      	mov	r1, r3
 8002572:	4866      	ldr	r0, [pc, #408]	; (800270c <HAL_USART_MspInit+0x294>)
 8002574:	f004 f98a 	bl	800688c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002578:	e0bd      	b.n	80026f6 <HAL_USART_MspInit+0x27e>
  else if(husart->Instance==USART3)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a64      	ldr	r2, [pc, #400]	; (8002710 <HAL_USART_MspInit+0x298>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d170      	bne.n	8002666 <HAL_USART_MspInit+0x1ee>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002584:	2302      	movs	r3, #2
 8002586:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002588:	2300      	movs	r3, #0
 800258a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800258e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002592:	4618      	mov	r0, r3
 8002594:	f005 fcfc 	bl	8007f90 <HAL_RCCEx_PeriphCLKConfig>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <HAL_USART_MspInit+0x12a>
      Error_Handler();
 800259e:	f7ff fae7 	bl	8001b70 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80025a2:	4b58      	ldr	r3, [pc, #352]	; (8002704 <HAL_USART_MspInit+0x28c>)
 80025a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80025a8:	4a56      	ldr	r2, [pc, #344]	; (8002704 <HAL_USART_MspInit+0x28c>)
 80025aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025ae:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80025b2:	4b54      	ldr	r3, [pc, #336]	; (8002704 <HAL_USART_MspInit+0x28c>)
 80025b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80025b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025bc:	61bb      	str	r3, [r7, #24]
 80025be:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80025c0:	4b50      	ldr	r3, [pc, #320]	; (8002704 <HAL_USART_MspInit+0x28c>)
 80025c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025c6:	4a4f      	ldr	r2, [pc, #316]	; (8002704 <HAL_USART_MspInit+0x28c>)
 80025c8:	f043 0308 	orr.w	r3, r3, #8
 80025cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80025d0:	4b4c      	ldr	r3, [pc, #304]	; (8002704 <HAL_USART_MspInit+0x28c>)
 80025d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025d6:	f003 0308 	and.w	r3, r3, #8
 80025da:	617b      	str	r3, [r7, #20]
 80025dc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80025de:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80025e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025e6:	2302      	movs	r3, #2
 80025e8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ec:	2300      	movs	r3, #0
 80025ee:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025f2:	2300      	movs	r3, #0
 80025f4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80025f8:	2307      	movs	r3, #7
 80025fa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025fe:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002602:	4619      	mov	r1, r3
 8002604:	4843      	ldr	r0, [pc, #268]	; (8002714 <HAL_USART_MspInit+0x29c>)
 8002606:	f004 f941 	bl	800688c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream0;
 800260a:	4b43      	ldr	r3, [pc, #268]	; (8002718 <HAL_USART_MspInit+0x2a0>)
 800260c:	4a43      	ldr	r2, [pc, #268]	; (800271c <HAL_USART_MspInit+0x2a4>)
 800260e:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8002610:	4b41      	ldr	r3, [pc, #260]	; (8002718 <HAL_USART_MspInit+0x2a0>)
 8002612:	222d      	movs	r2, #45	; 0x2d
 8002614:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002616:	4b40      	ldr	r3, [pc, #256]	; (8002718 <HAL_USART_MspInit+0x2a0>)
 8002618:	2200      	movs	r2, #0
 800261a:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800261c:	4b3e      	ldr	r3, [pc, #248]	; (8002718 <HAL_USART_MspInit+0x2a0>)
 800261e:	2200      	movs	r2, #0
 8002620:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002622:	4b3d      	ldr	r3, [pc, #244]	; (8002718 <HAL_USART_MspInit+0x2a0>)
 8002624:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002628:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800262a:	4b3b      	ldr	r3, [pc, #236]	; (8002718 <HAL_USART_MspInit+0x2a0>)
 800262c:	2200      	movs	r2, #0
 800262e:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002630:	4b39      	ldr	r3, [pc, #228]	; (8002718 <HAL_USART_MspInit+0x2a0>)
 8002632:	2200      	movs	r2, #0
 8002634:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002636:	4b38      	ldr	r3, [pc, #224]	; (8002718 <HAL_USART_MspInit+0x2a0>)
 8002638:	2200      	movs	r2, #0
 800263a:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800263c:	4b36      	ldr	r3, [pc, #216]	; (8002718 <HAL_USART_MspInit+0x2a0>)
 800263e:	2200      	movs	r2, #0
 8002640:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002642:	4b35      	ldr	r3, [pc, #212]	; (8002718 <HAL_USART_MspInit+0x2a0>)
 8002644:	2200      	movs	r2, #0
 8002646:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002648:	4833      	ldr	r0, [pc, #204]	; (8002718 <HAL_USART_MspInit+0x2a0>)
 800264a:	f002 f8f5 	bl	8004838 <HAL_DMA_Init>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d001      	beq.n	8002658 <HAL_USART_MspInit+0x1e0>
      Error_Handler();
 8002654:	f7ff fa8c 	bl	8001b70 <Error_Handler>
    __HAL_LINKDMA(husart,hdmarx,hdma_usart3_rx);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	4a2f      	ldr	r2, [pc, #188]	; (8002718 <HAL_USART_MspInit+0x2a0>)
 800265c:	655a      	str	r2, [r3, #84]	; 0x54
 800265e:	4a2e      	ldr	r2, [pc, #184]	; (8002718 <HAL_USART_MspInit+0x2a0>)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002664:	e047      	b.n	80026f6 <HAL_USART_MspInit+0x27e>
  else if(husart->Instance==USART6)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a2d      	ldr	r2, [pc, #180]	; (8002720 <HAL_USART_MspInit+0x2a8>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d142      	bne.n	80026f6 <HAL_USART_MspInit+0x27e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8002670:	2301      	movs	r3, #1
 8002672:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8002674:	2300      	movs	r3, #0
 8002676:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800267a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800267e:	4618      	mov	r0, r3
 8002680:	f005 fc86 	bl	8007f90 <HAL_RCCEx_PeriphCLKConfig>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <HAL_USART_MspInit+0x216>
      Error_Handler();
 800268a:	f7ff fa71 	bl	8001b70 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 800268e:	4b1d      	ldr	r3, [pc, #116]	; (8002704 <HAL_USART_MspInit+0x28c>)
 8002690:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002694:	4a1b      	ldr	r2, [pc, #108]	; (8002704 <HAL_USART_MspInit+0x28c>)
 8002696:	f043 0320 	orr.w	r3, r3, #32
 800269a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800269e:	4b19      	ldr	r3, [pc, #100]	; (8002704 <HAL_USART_MspInit+0x28c>)
 80026a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80026a4:	f003 0320 	and.w	r3, r3, #32
 80026a8:	613b      	str	r3, [r7, #16]
 80026aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026ac:	4b15      	ldr	r3, [pc, #84]	; (8002704 <HAL_USART_MspInit+0x28c>)
 80026ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026b2:	4a14      	ldr	r2, [pc, #80]	; (8002704 <HAL_USART_MspInit+0x28c>)
 80026b4:	f043 0304 	orr.w	r3, r3, #4
 80026b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026bc:	4b11      	ldr	r3, [pc, #68]	; (8002704 <HAL_USART_MspInit+0x28c>)
 80026be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026c2:	f003 0304 	and.w	r3, r3, #4
 80026c6:	60fb      	str	r3, [r7, #12]
 80026c8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 80026ca:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80026ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d2:	2302      	movs	r3, #2
 80026d4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d8:	2300      	movs	r3, #0
 80026da:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026de:	2300      	movs	r3, #0
 80026e0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 80026e4:	2307      	movs	r3, #7
 80026e6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026ea:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80026ee:	4619      	mov	r1, r3
 80026f0:	480c      	ldr	r0, [pc, #48]	; (8002724 <HAL_USART_MspInit+0x2ac>)
 80026f2:	f004 f8cb 	bl	800688c <HAL_GPIO_Init>
}
 80026f6:	bf00      	nop
 80026f8:	37f8      	adds	r7, #248	; 0xf8
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	40011000 	.word	0x40011000
 8002704:	58024400 	.word	0x58024400
 8002708:	58020400 	.word	0x58020400
 800270c:	58020000 	.word	0x58020000
 8002710:	40004800 	.word	0x40004800
 8002714:	58020c00 	.word	0x58020c00
 8002718:	24000390 	.word	0x24000390
 800271c:	40020010 	.word	0x40020010
 8002720:	40011400 	.word	0x40011400
 8002724:	58020800 	.word	0x58020800

08002728 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b0ba      	sub	sp, #232	; 0xe8
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002730:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002734:	2200      	movs	r2, #0
 8002736:	601a      	str	r2, [r3, #0]
 8002738:	605a      	str	r2, [r3, #4]
 800273a:	609a      	str	r2, [r3, #8]
 800273c:	60da      	str	r2, [r3, #12]
 800273e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002740:	f107 0318 	add.w	r3, r7, #24
 8002744:	22bc      	movs	r2, #188	; 0xbc
 8002746:	2100      	movs	r1, #0
 8002748:	4618      	mov	r0, r3
 800274a:	f00a fdbd 	bl	800d2c8 <memset>
  if(hqspi->Instance==QUADSPI)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a4a      	ldr	r2, [pc, #296]	; (800287c <HAL_QSPI_MspInit+0x154>)
 8002754:	4293      	cmp	r3, r2
 8002756:	f040 808c 	bne.w	8002872 <HAL_QSPI_MspInit+0x14a>
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 800275a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800275e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 8002760:	2300      	movs	r3, #0
 8002762:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002764:	f107 0318 	add.w	r3, r7, #24
 8002768:	4618      	mov	r0, r3
 800276a:	f005 fc11 	bl	8007f90 <HAL_RCCEx_PeriphCLKConfig>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d001      	beq.n	8002778 <HAL_QSPI_MspInit+0x50>
    {
      Error_Handler();
 8002774:	f7ff f9fc 	bl	8001b70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002778:	4b41      	ldr	r3, [pc, #260]	; (8002880 <HAL_QSPI_MspInit+0x158>)
 800277a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800277e:	4a40      	ldr	r2, [pc, #256]	; (8002880 <HAL_QSPI_MspInit+0x158>)
 8002780:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002784:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8002788:	4b3d      	ldr	r3, [pc, #244]	; (8002880 <HAL_QSPI_MspInit+0x158>)
 800278a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800278e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002792:	617b      	str	r3, [r7, #20]
 8002794:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002796:	4b3a      	ldr	r3, [pc, #232]	; (8002880 <HAL_QSPI_MspInit+0x158>)
 8002798:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800279c:	4a38      	ldr	r2, [pc, #224]	; (8002880 <HAL_QSPI_MspInit+0x158>)
 800279e:	f043 0302 	orr.w	r3, r3, #2
 80027a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80027a6:	4b36      	ldr	r3, [pc, #216]	; (8002880 <HAL_QSPI_MspInit+0x158>)
 80027a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027ac:	f003 0302 	and.w	r3, r3, #2
 80027b0:	613b      	str	r3, [r7, #16]
 80027b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80027b4:	4b32      	ldr	r3, [pc, #200]	; (8002880 <HAL_QSPI_MspInit+0x158>)
 80027b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027ba:	4a31      	ldr	r2, [pc, #196]	; (8002880 <HAL_QSPI_MspInit+0x158>)
 80027bc:	f043 0310 	orr.w	r3, r3, #16
 80027c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80027c4:	4b2e      	ldr	r3, [pc, #184]	; (8002880 <HAL_QSPI_MspInit+0x158>)
 80027c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027ca:	f003 0310 	and.w	r3, r3, #16
 80027ce:	60fb      	str	r3, [r7, #12]
 80027d0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027d2:	4b2b      	ldr	r3, [pc, #172]	; (8002880 <HAL_QSPI_MspInit+0x158>)
 80027d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027d8:	4a29      	ldr	r2, [pc, #164]	; (8002880 <HAL_QSPI_MspInit+0x158>)
 80027da:	f043 0304 	orr.w	r3, r3, #4
 80027de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80027e2:	4b27      	ldr	r3, [pc, #156]	; (8002880 <HAL_QSPI_MspInit+0x158>)
 80027e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027e8:	f003 0304 	and.w	r3, r3, #4
 80027ec:	60bb      	str	r3, [r7, #8]
 80027ee:	68bb      	ldr	r3, [r7, #8]
    PE8     ------> QUADSPI_BK2_IO1
    PE9     ------> QUADSPI_BK2_IO2
    PE10     ------> QUADSPI_BK2_IO3
    PC11     ------> QUADSPI_BK2_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80027f0:	2304      	movs	r3, #4
 80027f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027f6:	2302      	movs	r3, #2
 80027f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027fc:	2300      	movs	r3, #0
 80027fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002802:	2300      	movs	r3, #0
 8002804:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002808:	2309      	movs	r3, #9
 800280a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800280e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002812:	4619      	mov	r1, r3
 8002814:	481b      	ldr	r0, [pc, #108]	; (8002884 <HAL_QSPI_MspInit+0x15c>)
 8002816:	f004 f839 	bl	800688c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800281a:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 800281e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002822:	2302      	movs	r3, #2
 8002824:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002828:	2300      	movs	r3, #0
 800282a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800282e:	2300      	movs	r3, #0
 8002830:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002834:	230a      	movs	r3, #10
 8002836:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800283a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800283e:	4619      	mov	r1, r3
 8002840:	4811      	ldr	r0, [pc, #68]	; (8002888 <HAL_QSPI_MspInit+0x160>)
 8002842:	f004 f823 	bl	800688c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002846:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800284a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800284e:	2302      	movs	r3, #2
 8002850:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002854:	2300      	movs	r3, #0
 8002856:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800285a:	2300      	movs	r3, #0
 800285c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002860:	2309      	movs	r3, #9
 8002862:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002866:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800286a:	4619      	mov	r1, r3
 800286c:	4807      	ldr	r0, [pc, #28]	; (800288c <HAL_QSPI_MspInit+0x164>)
 800286e:	f004 f80d 	bl	800688c <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8002872:	bf00      	nop
 8002874:	37e8      	adds	r7, #232	; 0xe8
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	52005000 	.word	0x52005000
 8002880:	58024400 	.word	0x58024400
 8002884:	58020400 	.word	0x58020400
 8002888:	58021000 	.word	0x58021000
 800288c:	58020800 	.word	0x58020800

08002890 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b0be      	sub	sp, #248	; 0xf8
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002898:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800289c:	2200      	movs	r2, #0
 800289e:	601a      	str	r2, [r3, #0]
 80028a0:	605a      	str	r2, [r3, #4]
 80028a2:	609a      	str	r2, [r3, #8]
 80028a4:	60da      	str	r2, [r3, #12]
 80028a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80028a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80028ac:	22bc      	movs	r2, #188	; 0xbc
 80028ae:	2100      	movs	r1, #0
 80028b0:	4618      	mov	r0, r3
 80028b2:	f00a fd09 	bl	800d2c8 <memset>
  if(hspi->Instance==SPI1)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a92      	ldr	r2, [pc, #584]	; (8002b04 <HAL_SPI_MspInit+0x274>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d167      	bne.n	8002990 <HAL_SPI_MspInit+0x100>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80028c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028c4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80028c6:	2300      	movs	r3, #0
 80028c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80028cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80028d0:	4618      	mov	r0, r3
 80028d2:	f005 fb5d 	bl	8007f90 <HAL_RCCEx_PeriphCLKConfig>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d001      	beq.n	80028e0 <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 80028dc:	f7ff f948 	bl	8001b70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80028e0:	4b89      	ldr	r3, [pc, #548]	; (8002b08 <HAL_SPI_MspInit+0x278>)
 80028e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80028e6:	4a88      	ldr	r2, [pc, #544]	; (8002b08 <HAL_SPI_MspInit+0x278>)
 80028e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80028ec:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80028f0:	4b85      	ldr	r3, [pc, #532]	; (8002b08 <HAL_SPI_MspInit+0x278>)
 80028f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80028f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028fa:	627b      	str	r3, [r7, #36]	; 0x24
 80028fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028fe:	4b82      	ldr	r3, [pc, #520]	; (8002b08 <HAL_SPI_MspInit+0x278>)
 8002900:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002904:	4a80      	ldr	r2, [pc, #512]	; (8002b08 <HAL_SPI_MspInit+0x278>)
 8002906:	f043 0301 	orr.w	r3, r3, #1
 800290a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800290e:	4b7e      	ldr	r3, [pc, #504]	; (8002b08 <HAL_SPI_MspInit+0x278>)
 8002910:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002914:	f003 0301 	and.w	r3, r3, #1
 8002918:	623b      	str	r3, [r7, #32]
 800291a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800291c:	4b7a      	ldr	r3, [pc, #488]	; (8002b08 <HAL_SPI_MspInit+0x278>)
 800291e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002922:	4a79      	ldr	r2, [pc, #484]	; (8002b08 <HAL_SPI_MspInit+0x278>)
 8002924:	f043 0302 	orr.w	r3, r3, #2
 8002928:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800292c:	4b76      	ldr	r3, [pc, #472]	; (8002b08 <HAL_SPI_MspInit+0x278>)
 800292e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002932:	f003 0302 	and.w	r3, r3, #2
 8002936:	61fb      	str	r3, [r7, #28]
 8002938:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800293a:	23c0      	movs	r3, #192	; 0xc0
 800293c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002940:	2302      	movs	r3, #2
 8002942:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002946:	2300      	movs	r3, #0
 8002948:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800294c:	2300      	movs	r3, #0
 800294e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002952:	2305      	movs	r3, #5
 8002954:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002958:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800295c:	4619      	mov	r1, r3
 800295e:	486b      	ldr	r0, [pc, #428]	; (8002b0c <HAL_SPI_MspInit+0x27c>)
 8002960:	f003 ff94 	bl	800688c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002964:	2308      	movs	r3, #8
 8002966:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800296a:	2302      	movs	r3, #2
 800296c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002970:	2300      	movs	r3, #0
 8002972:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002976:	2300      	movs	r3, #0
 8002978:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800297c:	2305      	movs	r3, #5
 800297e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002982:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002986:	4619      	mov	r1, r3
 8002988:	4861      	ldr	r0, [pc, #388]	; (8002b10 <HAL_SPI_MspInit+0x280>)
 800298a:	f003 ff7f 	bl	800688c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 800298e:	e0b4      	b.n	8002afa <HAL_SPI_MspInit+0x26a>
  else if(hspi->Instance==SPI2)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a5f      	ldr	r2, [pc, #380]	; (8002b14 <HAL_SPI_MspInit+0x284>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d167      	bne.n	8002a6a <HAL_SPI_MspInit+0x1da>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 800299a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800299e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80029a0:	2300      	movs	r3, #0
 80029a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80029a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029aa:	4618      	mov	r0, r3
 80029ac:	f005 faf0 	bl	8007f90 <HAL_RCCEx_PeriphCLKConfig>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d001      	beq.n	80029ba <HAL_SPI_MspInit+0x12a>
      Error_Handler();
 80029b6:	f7ff f8db 	bl	8001b70 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80029ba:	4b53      	ldr	r3, [pc, #332]	; (8002b08 <HAL_SPI_MspInit+0x278>)
 80029bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80029c0:	4a51      	ldr	r2, [pc, #324]	; (8002b08 <HAL_SPI_MspInit+0x278>)
 80029c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029c6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80029ca:	4b4f      	ldr	r3, [pc, #316]	; (8002b08 <HAL_SPI_MspInit+0x278>)
 80029cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80029d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029d4:	61bb      	str	r3, [r7, #24]
 80029d6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029d8:	4b4b      	ldr	r3, [pc, #300]	; (8002b08 <HAL_SPI_MspInit+0x278>)
 80029da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029de:	4a4a      	ldr	r2, [pc, #296]	; (8002b08 <HAL_SPI_MspInit+0x278>)
 80029e0:	f043 0304 	orr.w	r3, r3, #4
 80029e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029e8:	4b47      	ldr	r3, [pc, #284]	; (8002b08 <HAL_SPI_MspInit+0x278>)
 80029ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029ee:	f003 0304 	and.w	r3, r3, #4
 80029f2:	617b      	str	r3, [r7, #20]
 80029f4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80029f6:	4b44      	ldr	r3, [pc, #272]	; (8002b08 <HAL_SPI_MspInit+0x278>)
 80029f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029fc:	4a42      	ldr	r2, [pc, #264]	; (8002b08 <HAL_SPI_MspInit+0x278>)
 80029fe:	f043 0308 	orr.w	r3, r3, #8
 8002a02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a06:	4b40      	ldr	r3, [pc, #256]	; (8002b08 <HAL_SPI_MspInit+0x278>)
 8002a08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a0c:	f003 0308 	and.w	r3, r3, #8
 8002a10:	613b      	str	r3, [r7, #16]
 8002a12:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002a14:	230c      	movs	r3, #12
 8002a16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a20:	2300      	movs	r3, #0
 8002a22:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a26:	2300      	movs	r3, #0
 8002a28:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002a2c:	2305      	movs	r3, #5
 8002a2e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a32:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002a36:	4619      	mov	r1, r3
 8002a38:	4837      	ldr	r0, [pc, #220]	; (8002b18 <HAL_SPI_MspInit+0x288>)
 8002a3a:	f003 ff27 	bl	800688c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002a3e:	2308      	movs	r3, #8
 8002a40:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a44:	2302      	movs	r3, #2
 8002a46:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a50:	2300      	movs	r3, #0
 8002a52:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002a56:	2305      	movs	r3, #5
 8002a58:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a5c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002a60:	4619      	mov	r1, r3
 8002a62:	482e      	ldr	r0, [pc, #184]	; (8002b1c <HAL_SPI_MspInit+0x28c>)
 8002a64:	f003 ff12 	bl	800688c <HAL_GPIO_Init>
}
 8002a68:	e047      	b.n	8002afa <HAL_SPI_MspInit+0x26a>
  else if(hspi->Instance==SPI4)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a2c      	ldr	r2, [pc, #176]	; (8002b20 <HAL_SPI_MspInit+0x290>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d142      	bne.n	8002afa <HAL_SPI_MspInit+0x26a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8002a74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a78:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a80:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a84:	4618      	mov	r0, r3
 8002a86:	f005 fa83 	bl	8007f90 <HAL_RCCEx_PeriphCLKConfig>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d001      	beq.n	8002a94 <HAL_SPI_MspInit+0x204>
      Error_Handler();
 8002a90:	f7ff f86e 	bl	8001b70 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002a94:	4b1c      	ldr	r3, [pc, #112]	; (8002b08 <HAL_SPI_MspInit+0x278>)
 8002a96:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002a9a:	4a1b      	ldr	r2, [pc, #108]	; (8002b08 <HAL_SPI_MspInit+0x278>)
 8002a9c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002aa0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002aa4:	4b18      	ldr	r3, [pc, #96]	; (8002b08 <HAL_SPI_MspInit+0x278>)
 8002aa6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002aaa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002aae:	60fb      	str	r3, [r7, #12]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ab2:	4b15      	ldr	r3, [pc, #84]	; (8002b08 <HAL_SPI_MspInit+0x278>)
 8002ab4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ab8:	4a13      	ldr	r2, [pc, #76]	; (8002b08 <HAL_SPI_MspInit+0x278>)
 8002aba:	f043 0310 	orr.w	r3, r3, #16
 8002abe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ac2:	4b11      	ldr	r3, [pc, #68]	; (8002b08 <HAL_SPI_MspInit+0x278>)
 8002ac4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ac8:	f003 0310 	and.w	r3, r3, #16
 8002acc:	60bb      	str	r3, [r7, #8]
 8002ace:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8002ad0:	2364      	movs	r3, #100	; 0x64
 8002ad2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ad6:	2302      	movs	r3, #2
 8002ad8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002adc:	2300      	movs	r3, #0
 8002ade:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002ae8:	2305      	movs	r3, #5
 8002aea:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002aee:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002af2:	4619      	mov	r1, r3
 8002af4:	480b      	ldr	r0, [pc, #44]	; (8002b24 <HAL_SPI_MspInit+0x294>)
 8002af6:	f003 fec9 	bl	800688c <HAL_GPIO_Init>
}
 8002afa:	bf00      	nop
 8002afc:	37f8      	adds	r7, #248	; 0xf8
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	40013000 	.word	0x40013000
 8002b08:	58024400 	.word	0x58024400
 8002b0c:	58020000 	.word	0x58020000
 8002b10:	58020400 	.word	0x58020400
 8002b14:	40003800 	.word	0x40003800
 8002b18:	58020800 	.word	0x58020800
 8002b1c:	58020c00 	.word	0x58020c00
 8002b20:	40013400 	.word	0x40013400
 8002b24:	58021000 	.word	0x58021000

08002b28 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b085      	sub	sp, #20
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a16      	ldr	r2, [pc, #88]	; (8002b90 <HAL_TIM_PWM_MspInit+0x68>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d10f      	bne.n	8002b5a <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002b3a:	4b16      	ldr	r3, [pc, #88]	; (8002b94 <HAL_TIM_PWM_MspInit+0x6c>)
 8002b3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002b40:	4a14      	ldr	r2, [pc, #80]	; (8002b94 <HAL_TIM_PWM_MspInit+0x6c>)
 8002b42:	f043 0301 	orr.w	r3, r3, #1
 8002b46:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002b4a:	4b12      	ldr	r3, [pc, #72]	; (8002b94 <HAL_TIM_PWM_MspInit+0x6c>)
 8002b4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002b50:	f003 0301 	and.w	r3, r3, #1
 8002b54:	60fb      	str	r3, [r7, #12]
 8002b56:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002b58:	e013      	b.n	8002b82 <HAL_TIM_PWM_MspInit+0x5a>
  else if(htim_pwm->Instance==TIM5)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a0e      	ldr	r2, [pc, #56]	; (8002b98 <HAL_TIM_PWM_MspInit+0x70>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d10e      	bne.n	8002b82 <HAL_TIM_PWM_MspInit+0x5a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002b64:	4b0b      	ldr	r3, [pc, #44]	; (8002b94 <HAL_TIM_PWM_MspInit+0x6c>)
 8002b66:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b6a:	4a0a      	ldr	r2, [pc, #40]	; (8002b94 <HAL_TIM_PWM_MspInit+0x6c>)
 8002b6c:	f043 0308 	orr.w	r3, r3, #8
 8002b70:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002b74:	4b07      	ldr	r3, [pc, #28]	; (8002b94 <HAL_TIM_PWM_MspInit+0x6c>)
 8002b76:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b7a:	f003 0308 	and.w	r3, r3, #8
 8002b7e:	60bb      	str	r3, [r7, #8]
 8002b80:	68bb      	ldr	r3, [r7, #8]
}
 8002b82:	bf00      	nop
 8002b84:	3714      	adds	r7, #20
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	40010000 	.word	0x40010000
 8002b94:	58024400 	.word	0x58024400
 8002b98:	40000c00 	.word	0x40000c00

08002b9c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b085      	sub	sp, #20
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a16      	ldr	r2, [pc, #88]	; (8002c04 <HAL_TIM_Base_MspInit+0x68>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d10f      	bne.n	8002bce <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002bae:	4b16      	ldr	r3, [pc, #88]	; (8002c08 <HAL_TIM_Base_MspInit+0x6c>)
 8002bb0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002bb4:	4a14      	ldr	r2, [pc, #80]	; (8002c08 <HAL_TIM_Base_MspInit+0x6c>)
 8002bb6:	f043 0304 	orr.w	r3, r3, #4
 8002bba:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002bbe:	4b12      	ldr	r3, [pc, #72]	; (8002c08 <HAL_TIM_Base_MspInit+0x6c>)
 8002bc0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002bc4:	f003 0304 	and.w	r3, r3, #4
 8002bc8:	60fb      	str	r3, [r7, #12]
 8002bca:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8002bcc:	e013      	b.n	8002bf6 <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM15)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a0e      	ldr	r2, [pc, #56]	; (8002c0c <HAL_TIM_Base_MspInit+0x70>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d10e      	bne.n	8002bf6 <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002bd8:	4b0b      	ldr	r3, [pc, #44]	; (8002c08 <HAL_TIM_Base_MspInit+0x6c>)
 8002bda:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002bde:	4a0a      	ldr	r2, [pc, #40]	; (8002c08 <HAL_TIM_Base_MspInit+0x6c>)
 8002be0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002be4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002be8:	4b07      	ldr	r3, [pc, #28]	; (8002c08 <HAL_TIM_Base_MspInit+0x6c>)
 8002bea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002bee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bf2:	60bb      	str	r3, [r7, #8]
 8002bf4:	68bb      	ldr	r3, [r7, #8]
}
 8002bf6:	bf00      	nop
 8002bf8:	3714      	adds	r7, #20
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr
 8002c02:	bf00      	nop
 8002c04:	40000800 	.word	0x40000800
 8002c08:	58024400 	.word	0x58024400
 8002c0c:	40014000 	.word	0x40014000

08002c10 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b08c      	sub	sp, #48	; 0x30
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c18:	f107 031c 	add.w	r3, r7, #28
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	601a      	str	r2, [r3, #0]
 8002c20:	605a      	str	r2, [r3, #4]
 8002c22:	609a      	str	r2, [r3, #8]
 8002c24:	60da      	str	r2, [r3, #12]
 8002c26:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a4b      	ldr	r2, [pc, #300]	; (8002d5c <HAL_TIM_MspPostInit+0x14c>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d120      	bne.n	8002c74 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c32:	4b4b      	ldr	r3, [pc, #300]	; (8002d60 <HAL_TIM_MspPostInit+0x150>)
 8002c34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c38:	4a49      	ldr	r2, [pc, #292]	; (8002d60 <HAL_TIM_MspPostInit+0x150>)
 8002c3a:	f043 0310 	orr.w	r3, r3, #16
 8002c3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c42:	4b47      	ldr	r3, [pc, #284]	; (8002d60 <HAL_TIM_MspPostInit+0x150>)
 8002c44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c48:	f003 0310 	and.w	r3, r3, #16
 8002c4c:	61bb      	str	r3, [r7, #24]
 8002c4e:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002c50:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002c54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c56:	2302      	movs	r3, #2
 8002c58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002c62:	2301      	movs	r3, #1
 8002c64:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002c66:	f107 031c 	add.w	r3, r7, #28
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	483d      	ldr	r0, [pc, #244]	; (8002d64 <HAL_TIM_MspPostInit+0x154>)
 8002c6e:	f003 fe0d 	bl	800688c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8002c72:	e06e      	b.n	8002d52 <HAL_TIM_MspPostInit+0x142>
  else if(htim->Instance==TIM4)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a3b      	ldr	r2, [pc, #236]	; (8002d68 <HAL_TIM_MspPostInit+0x158>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d120      	bne.n	8002cc0 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c7e:	4b38      	ldr	r3, [pc, #224]	; (8002d60 <HAL_TIM_MspPostInit+0x150>)
 8002c80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c84:	4a36      	ldr	r2, [pc, #216]	; (8002d60 <HAL_TIM_MspPostInit+0x150>)
 8002c86:	f043 0308 	orr.w	r3, r3, #8
 8002c8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c8e:	4b34      	ldr	r3, [pc, #208]	; (8002d60 <HAL_TIM_MspPostInit+0x150>)
 8002c90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c94:	f003 0308 	and.w	r3, r3, #8
 8002c98:	617b      	str	r3, [r7, #20]
 8002c9a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002c9c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ca0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ca2:	2302      	movs	r3, #2
 8002ca4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002caa:	2300      	movs	r3, #0
 8002cac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002cae:	2302      	movs	r3, #2
 8002cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002cb2:	f107 031c 	add.w	r3, r7, #28
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	482c      	ldr	r0, [pc, #176]	; (8002d6c <HAL_TIM_MspPostInit+0x15c>)
 8002cba:	f003 fde7 	bl	800688c <HAL_GPIO_Init>
}
 8002cbe:	e048      	b.n	8002d52 <HAL_TIM_MspPostInit+0x142>
  else if(htim->Instance==TIM5)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a2a      	ldr	r2, [pc, #168]	; (8002d70 <HAL_TIM_MspPostInit+0x160>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d11f      	bne.n	8002d0a <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cca:	4b25      	ldr	r3, [pc, #148]	; (8002d60 <HAL_TIM_MspPostInit+0x150>)
 8002ccc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cd0:	4a23      	ldr	r2, [pc, #140]	; (8002d60 <HAL_TIM_MspPostInit+0x150>)
 8002cd2:	f043 0301 	orr.w	r3, r3, #1
 8002cd6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002cda:	4b21      	ldr	r3, [pc, #132]	; (8002d60 <HAL_TIM_MspPostInit+0x150>)
 8002cdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ce0:	f003 0301 	and.w	r3, r3, #1
 8002ce4:	613b      	str	r3, [r7, #16]
 8002ce6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002ce8:	2302      	movs	r3, #2
 8002cea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cec:	2302      	movs	r3, #2
 8002cee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002cf8:	2302      	movs	r3, #2
 8002cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cfc:	f107 031c 	add.w	r3, r7, #28
 8002d00:	4619      	mov	r1, r3
 8002d02:	481c      	ldr	r0, [pc, #112]	; (8002d74 <HAL_TIM_MspPostInit+0x164>)
 8002d04:	f003 fdc2 	bl	800688c <HAL_GPIO_Init>
}
 8002d08:	e023      	b.n	8002d52 <HAL_TIM_MspPostInit+0x142>
  else if(htim->Instance==TIM15)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a1a      	ldr	r2, [pc, #104]	; (8002d78 <HAL_TIM_MspPostInit+0x168>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d11e      	bne.n	8002d52 <HAL_TIM_MspPostInit+0x142>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d14:	4b12      	ldr	r3, [pc, #72]	; (8002d60 <HAL_TIM_MspPostInit+0x150>)
 8002d16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d1a:	4a11      	ldr	r2, [pc, #68]	; (8002d60 <HAL_TIM_MspPostInit+0x150>)
 8002d1c:	f043 0301 	orr.w	r3, r3, #1
 8002d20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d24:	4b0e      	ldr	r3, [pc, #56]	; (8002d60 <HAL_TIM_MspPostInit+0x150>)
 8002d26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d2a:	f003 0301 	and.w	r3, r3, #1
 8002d2e:	60fb      	str	r3, [r7, #12]
 8002d30:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002d32:	2308      	movs	r3, #8
 8002d34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d36:	2302      	movs	r3, #2
 8002d38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8002d42:	2304      	movs	r3, #4
 8002d44:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d46:	f107 031c 	add.w	r3, r7, #28
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	4809      	ldr	r0, [pc, #36]	; (8002d74 <HAL_TIM_MspPostInit+0x164>)
 8002d4e:	f003 fd9d 	bl	800688c <HAL_GPIO_Init>
}
 8002d52:	bf00      	nop
 8002d54:	3730      	adds	r7, #48	; 0x30
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	40010000 	.word	0x40010000
 8002d60:	58024400 	.word	0x58024400
 8002d64:	58021000 	.word	0x58021000
 8002d68:	40000800 	.word	0x40000800
 8002d6c:	58020c00 	.word	0x58020c00
 8002d70:	40000c00 	.word	0x40000c00
 8002d74:	58020000 	.word	0x58020000
 8002d78:	40014000 	.word	0x40014000

08002d7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d80:	e7fe      	b.n	8002d80 <NMI_Handler+0x4>

08002d82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d82:	b480      	push	{r7}
 8002d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d86:	e7fe      	b.n	8002d86 <HardFault_Handler+0x4>

08002d88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d8c:	e7fe      	b.n	8002d8c <MemManage_Handler+0x4>

08002d8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d8e:	b480      	push	{r7}
 8002d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d92:	e7fe      	b.n	8002d92 <BusFault_Handler+0x4>

08002d94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d94:	b480      	push	{r7}
 8002d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d98:	e7fe      	b.n	8002d98 <UsageFault_Handler+0x4>

08002d9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d9a:	b480      	push	{r7}
 8002d9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d9e:	bf00      	nop
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002da8:	b480      	push	{r7}
 8002daa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002dac:	bf00      	nop
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr

08002db6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002db6:	b480      	push	{r7}
 8002db8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002dba:	bf00      	nop
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr

08002dc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002dc8:	f000 f9fa 	bl	80031c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002dcc:	bf00      	nop
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002dd4:	4802      	ldr	r0, [pc, #8]	; (8002de0 <DMA1_Stream0_IRQHandler+0x10>)
 8002dd6:	f002 f88b 	bl	8004ef0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002dda:	bf00      	nop
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	24000390 	.word	0x24000390

08002de4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002de4:	b480      	push	{r7}
 8002de6:	af00      	add	r7, sp, #0
	return 1;
 8002de8:	2301      	movs	r3, #1
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr

08002df4 <_kill>:

int _kill(int pid, int sig)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002dfe:	f00a fa2b 	bl	800d258 <__errno>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2216      	movs	r2, #22
 8002e06:	601a      	str	r2, [r3, #0]
	return -1;
 8002e08:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3708      	adds	r7, #8
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}

08002e14 <_exit>:

void _exit (int status)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002e1c:	f04f 31ff 	mov.w	r1, #4294967295
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f7ff ffe7 	bl	8002df4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002e26:	e7fe      	b.n	8002e26 <_exit+0x12>

08002e28 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b086      	sub	sp, #24
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	60b9      	str	r1, [r7, #8]
 8002e32:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e34:	2300      	movs	r3, #0
 8002e36:	617b      	str	r3, [r7, #20]
 8002e38:	e00a      	b.n	8002e50 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002e3a:	f3af 8000 	nop.w
 8002e3e:	4601      	mov	r1, r0
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	1c5a      	adds	r2, r3, #1
 8002e44:	60ba      	str	r2, [r7, #8]
 8002e46:	b2ca      	uxtb	r2, r1
 8002e48:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	3301      	adds	r3, #1
 8002e4e:	617b      	str	r3, [r7, #20]
 8002e50:	697a      	ldr	r2, [r7, #20]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	429a      	cmp	r2, r3
 8002e56:	dbf0      	blt.n	8002e3a <_read+0x12>
	}

return len;
 8002e58:	687b      	ldr	r3, [r7, #4]
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3718      	adds	r7, #24
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}

08002e62 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002e62:	b580      	push	{r7, lr}
 8002e64:	b086      	sub	sp, #24
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	60f8      	str	r0, [r7, #12]
 8002e6a:	60b9      	str	r1, [r7, #8]
 8002e6c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e6e:	2300      	movs	r3, #0
 8002e70:	617b      	str	r3, [r7, #20]
 8002e72:	e009      	b.n	8002e88 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	1c5a      	adds	r2, r3, #1
 8002e78:	60ba      	str	r2, [r7, #8]
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	3301      	adds	r3, #1
 8002e86:	617b      	str	r3, [r7, #20]
 8002e88:	697a      	ldr	r2, [r7, #20]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	dbf1      	blt.n	8002e74 <_write+0x12>
	}
	return len;
 8002e90:	687b      	ldr	r3, [r7, #4]
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3718      	adds	r7, #24
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}

08002e9a <_close>:

int _close(int file)
{
 8002e9a:	b480      	push	{r7}
 8002e9c:	b083      	sub	sp, #12
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	6078      	str	r0, [r7, #4]
	return -1;
 8002ea2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	370c      	adds	r7, #12
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr

08002eb2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002eb2:	b480      	push	{r7}
 8002eb4:	b083      	sub	sp, #12
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6078      	str	r0, [r7, #4]
 8002eba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ec2:	605a      	str	r2, [r3, #4]
	return 0;
 8002ec4:	2300      	movs	r3, #0
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	370c      	adds	r7, #12
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr

08002ed2 <_isatty>:

int _isatty(int file)
{
 8002ed2:	b480      	push	{r7}
 8002ed4:	b083      	sub	sp, #12
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	6078      	str	r0, [r7, #4]
	return 1;
 8002eda:	2301      	movs	r3, #1
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	370c      	adds	r7, #12
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr

08002ee8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b085      	sub	sp, #20
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	607a      	str	r2, [r7, #4]
	return 0;
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3714      	adds	r7, #20
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr
	...

08002f04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b086      	sub	sp, #24
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f0c:	4a14      	ldr	r2, [pc, #80]	; (8002f60 <_sbrk+0x5c>)
 8002f0e:	4b15      	ldr	r3, [pc, #84]	; (8002f64 <_sbrk+0x60>)
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f18:	4b13      	ldr	r3, [pc, #76]	; (8002f68 <_sbrk+0x64>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d102      	bne.n	8002f26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f20:	4b11      	ldr	r3, [pc, #68]	; (8002f68 <_sbrk+0x64>)
 8002f22:	4a12      	ldr	r2, [pc, #72]	; (8002f6c <_sbrk+0x68>)
 8002f24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f26:	4b10      	ldr	r3, [pc, #64]	; (8002f68 <_sbrk+0x64>)
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4413      	add	r3, r2
 8002f2e:	693a      	ldr	r2, [r7, #16]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d207      	bcs.n	8002f44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f34:	f00a f990 	bl	800d258 <__errno>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	220c      	movs	r2, #12
 8002f3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8002f42:	e009      	b.n	8002f58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f44:	4b08      	ldr	r3, [pc, #32]	; (8002f68 <_sbrk+0x64>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f4a:	4b07      	ldr	r3, [pc, #28]	; (8002f68 <_sbrk+0x64>)
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4413      	add	r3, r2
 8002f52:	4a05      	ldr	r2, [pc, #20]	; (8002f68 <_sbrk+0x64>)
 8002f54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f56:	68fb      	ldr	r3, [r7, #12]
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3718      	adds	r7, #24
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	24080000 	.word	0x24080000
 8002f64:	00000400 	.word	0x00000400
 8002f68:	24000204 	.word	0x24000204
 8002f6c:	24000c78 	.word	0x24000c78

08002f70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002f70:	b480      	push	{r7}
 8002f72:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002f74:	4b39      	ldr	r3, [pc, #228]	; (800305c <SystemInit+0xec>)
 8002f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f7a:	4a38      	ldr	r2, [pc, #224]	; (800305c <SystemInit+0xec>)
 8002f7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002f84:	4b36      	ldr	r3, [pc, #216]	; (8003060 <SystemInit+0xf0>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 030f 	and.w	r3, r3, #15
 8002f8c:	2b06      	cmp	r3, #6
 8002f8e:	d807      	bhi.n	8002fa0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002f90:	4b33      	ldr	r3, [pc, #204]	; (8003060 <SystemInit+0xf0>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f023 030f 	bic.w	r3, r3, #15
 8002f98:	4a31      	ldr	r2, [pc, #196]	; (8003060 <SystemInit+0xf0>)
 8002f9a:	f043 0307 	orr.w	r3, r3, #7
 8002f9e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002fa0:	4b30      	ldr	r3, [pc, #192]	; (8003064 <SystemInit+0xf4>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a2f      	ldr	r2, [pc, #188]	; (8003064 <SystemInit+0xf4>)
 8002fa6:	f043 0301 	orr.w	r3, r3, #1
 8002faa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002fac:	4b2d      	ldr	r3, [pc, #180]	; (8003064 <SystemInit+0xf4>)
 8002fae:	2200      	movs	r2, #0
 8002fb0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002fb2:	4b2c      	ldr	r3, [pc, #176]	; (8003064 <SystemInit+0xf4>)
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	492b      	ldr	r1, [pc, #172]	; (8003064 <SystemInit+0xf4>)
 8002fb8:	4b2b      	ldr	r3, [pc, #172]	; (8003068 <SystemInit+0xf8>)
 8002fba:	4013      	ands	r3, r2
 8002fbc:	600b      	str	r3, [r1, #0]
  
//  SCB->VTOR = FLASH_BASE; /* sets the initial address of interrupt vector */

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002fbe:	4b28      	ldr	r3, [pc, #160]	; (8003060 <SystemInit+0xf0>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0308 	and.w	r3, r3, #8
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d007      	beq.n	8002fda <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002fca:	4b25      	ldr	r3, [pc, #148]	; (8003060 <SystemInit+0xf0>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f023 030f 	bic.w	r3, r3, #15
 8002fd2:	4a23      	ldr	r2, [pc, #140]	; (8003060 <SystemInit+0xf0>)
 8002fd4:	f043 0307 	orr.w	r3, r3, #7
 8002fd8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002fda:	4b22      	ldr	r3, [pc, #136]	; (8003064 <SystemInit+0xf4>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002fe0:	4b20      	ldr	r3, [pc, #128]	; (8003064 <SystemInit+0xf4>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002fe6:	4b1f      	ldr	r3, [pc, #124]	; (8003064 <SystemInit+0xf4>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002fec:	4b1d      	ldr	r3, [pc, #116]	; (8003064 <SystemInit+0xf4>)
 8002fee:	4a1f      	ldr	r2, [pc, #124]	; (800306c <SystemInit+0xfc>)
 8002ff0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002ff2:	4b1c      	ldr	r3, [pc, #112]	; (8003064 <SystemInit+0xf4>)
 8002ff4:	4a1e      	ldr	r2, [pc, #120]	; (8003070 <SystemInit+0x100>)
 8002ff6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002ff8:	4b1a      	ldr	r3, [pc, #104]	; (8003064 <SystemInit+0xf4>)
 8002ffa:	4a1e      	ldr	r2, [pc, #120]	; (8003074 <SystemInit+0x104>)
 8002ffc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002ffe:	4b19      	ldr	r3, [pc, #100]	; (8003064 <SystemInit+0xf4>)
 8003000:	2200      	movs	r2, #0
 8003002:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003004:	4b17      	ldr	r3, [pc, #92]	; (8003064 <SystemInit+0xf4>)
 8003006:	4a1b      	ldr	r2, [pc, #108]	; (8003074 <SystemInit+0x104>)
 8003008:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800300a:	4b16      	ldr	r3, [pc, #88]	; (8003064 <SystemInit+0xf4>)
 800300c:	2200      	movs	r2, #0
 800300e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003010:	4b14      	ldr	r3, [pc, #80]	; (8003064 <SystemInit+0xf4>)
 8003012:	4a18      	ldr	r2, [pc, #96]	; (8003074 <SystemInit+0x104>)
 8003014:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003016:	4b13      	ldr	r3, [pc, #76]	; (8003064 <SystemInit+0xf4>)
 8003018:	2200      	movs	r2, #0
 800301a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800301c:	4b11      	ldr	r3, [pc, #68]	; (8003064 <SystemInit+0xf4>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a10      	ldr	r2, [pc, #64]	; (8003064 <SystemInit+0xf4>)
 8003022:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003026:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003028:	4b0e      	ldr	r3, [pc, #56]	; (8003064 <SystemInit+0xf4>)
 800302a:	2200      	movs	r2, #0
 800302c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800302e:	4b12      	ldr	r3, [pc, #72]	; (8003078 <SystemInit+0x108>)
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	4b12      	ldr	r3, [pc, #72]	; (800307c <SystemInit+0x10c>)
 8003034:	4013      	ands	r3, r2
 8003036:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800303a:	d202      	bcs.n	8003042 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800303c:	4b10      	ldr	r3, [pc, #64]	; (8003080 <SystemInit+0x110>)
 800303e:	2201      	movs	r2, #1
 8003040:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003042:	4b10      	ldr	r3, [pc, #64]	; (8003084 <SystemInit+0x114>)
 8003044:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003048:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800304a:	4b04      	ldr	r3, [pc, #16]	; (800305c <SystemInit+0xec>)
 800304c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003050:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8003052:	bf00      	nop
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr
 800305c:	e000ed00 	.word	0xe000ed00
 8003060:	52002000 	.word	0x52002000
 8003064:	58024400 	.word	0x58024400
 8003068:	eaf6ed7f 	.word	0xeaf6ed7f
 800306c:	02020200 	.word	0x02020200
 8003070:	01ff0000 	.word	0x01ff0000
 8003074:	01010280 	.word	0x01010280
 8003078:	5c001000 	.word	0x5c001000
 800307c:	ffff0000 	.word	0xffff0000
 8003080:	51008108 	.word	0x51008108
 8003084:	52004000 	.word	0x52004000

08003088 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003088:	f8df d034 	ldr.w	sp, [pc, #52]	; 80030c0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800308c:	f7ff ff70 	bl	8002f70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003090:	480c      	ldr	r0, [pc, #48]	; (80030c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003092:	490d      	ldr	r1, [pc, #52]	; (80030c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003094:	4a0d      	ldr	r2, [pc, #52]	; (80030cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003096:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003098:	e002      	b.n	80030a0 <LoopCopyDataInit>

0800309a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800309a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800309c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800309e:	3304      	adds	r3, #4

080030a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030a4:	d3f9      	bcc.n	800309a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030a6:	4a0a      	ldr	r2, [pc, #40]	; (80030d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80030a8:	4c0a      	ldr	r4, [pc, #40]	; (80030d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80030aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030ac:	e001      	b.n	80030b2 <LoopFillZerobss>

080030ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030b0:	3204      	adds	r2, #4

080030b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80030b4:	d3fb      	bcc.n	80030ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80030b6:	f00a f8d5 	bl	800d264 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80030ba:	f7fd fae5 	bl	8000688 <main>
  bx  lr
 80030be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80030c0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80030c4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80030c8:	240001e0 	.word	0x240001e0
  ldr r2, =_sidata
 80030cc:	0800ffe4 	.word	0x0800ffe4
  ldr r2, =_sbss
 80030d0:	240001e0 	.word	0x240001e0
  ldr r4, =_ebss
 80030d4:	24000c74 	.word	0x24000c74

080030d8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80030d8:	e7fe      	b.n	80030d8 <ADC3_IRQHandler>
	...

080030dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b082      	sub	sp, #8
 80030e0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030e2:	2003      	movs	r0, #3
 80030e4:	f001 fa16 	bl	8004514 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80030e8:	f004 fd7c 	bl	8007be4 <HAL_RCC_GetSysClockFreq>
 80030ec:	4602      	mov	r2, r0
 80030ee:	4b15      	ldr	r3, [pc, #84]	; (8003144 <HAL_Init+0x68>)
 80030f0:	699b      	ldr	r3, [r3, #24]
 80030f2:	0a1b      	lsrs	r3, r3, #8
 80030f4:	f003 030f 	and.w	r3, r3, #15
 80030f8:	4913      	ldr	r1, [pc, #76]	; (8003148 <HAL_Init+0x6c>)
 80030fa:	5ccb      	ldrb	r3, [r1, r3]
 80030fc:	f003 031f 	and.w	r3, r3, #31
 8003100:	fa22 f303 	lsr.w	r3, r2, r3
 8003104:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003106:	4b0f      	ldr	r3, [pc, #60]	; (8003144 <HAL_Init+0x68>)
 8003108:	699b      	ldr	r3, [r3, #24]
 800310a:	f003 030f 	and.w	r3, r3, #15
 800310e:	4a0e      	ldr	r2, [pc, #56]	; (8003148 <HAL_Init+0x6c>)
 8003110:	5cd3      	ldrb	r3, [r2, r3]
 8003112:	f003 031f 	and.w	r3, r3, #31
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	fa22 f303 	lsr.w	r3, r2, r3
 800311c:	4a0b      	ldr	r2, [pc, #44]	; (800314c <HAL_Init+0x70>)
 800311e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003120:	4a0b      	ldr	r2, [pc, #44]	; (8003150 <HAL_Init+0x74>)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003126:	2000      	movs	r0, #0
 8003128:	f000 f814 	bl	8003154 <HAL_InitTick>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d001      	beq.n	8003136 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e002      	b.n	800313c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003136:	f7fe fd21 	bl	8001b7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800313a:	2300      	movs	r3, #0
}
 800313c:	4618      	mov	r0, r3
 800313e:	3708      	adds	r7, #8
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}
 8003144:	58024400 	.word	0x58024400
 8003148:	0800fba4 	.word	0x0800fba4
 800314c:	24000004 	.word	0x24000004
 8003150:	24000000 	.word	0x24000000

08003154 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800315c:	4b15      	ldr	r3, [pc, #84]	; (80031b4 <HAL_InitTick+0x60>)
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d101      	bne.n	8003168 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e021      	b.n	80031ac <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003168:	4b13      	ldr	r3, [pc, #76]	; (80031b8 <HAL_InitTick+0x64>)
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	4b11      	ldr	r3, [pc, #68]	; (80031b4 <HAL_InitTick+0x60>)
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	4619      	mov	r1, r3
 8003172:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003176:	fbb3 f3f1 	udiv	r3, r3, r1
 800317a:	fbb2 f3f3 	udiv	r3, r2, r3
 800317e:	4618      	mov	r0, r3
 8003180:	f001 f9fb 	bl	800457a <HAL_SYSTICK_Config>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d001      	beq.n	800318e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e00e      	b.n	80031ac <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2b0f      	cmp	r3, #15
 8003192:	d80a      	bhi.n	80031aa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003194:	2200      	movs	r2, #0
 8003196:	6879      	ldr	r1, [r7, #4]
 8003198:	f04f 30ff 	mov.w	r0, #4294967295
 800319c:	f001 f9c5 	bl	800452a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80031a0:	4a06      	ldr	r2, [pc, #24]	; (80031bc <HAL_InitTick+0x68>)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80031a6:	2300      	movs	r3, #0
 80031a8:	e000      	b.n	80031ac <HAL_InitTick+0x58>
    return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3708      	adds	r7, #8
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	2400000c 	.word	0x2400000c
 80031b8:	24000000 	.word	0x24000000
 80031bc:	24000008 	.word	0x24000008

080031c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031c0:	b480      	push	{r7}
 80031c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80031c4:	4b06      	ldr	r3, [pc, #24]	; (80031e0 <HAL_IncTick+0x20>)
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	461a      	mov	r2, r3
 80031ca:	4b06      	ldr	r3, [pc, #24]	; (80031e4 <HAL_IncTick+0x24>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4413      	add	r3, r2
 80031d0:	4a04      	ldr	r2, [pc, #16]	; (80031e4 <HAL_IncTick+0x24>)
 80031d2:	6013      	str	r3, [r2, #0]
}
 80031d4:	bf00      	nop
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr
 80031de:	bf00      	nop
 80031e0:	2400000c 	.word	0x2400000c
 80031e4:	24000c60 	.word	0x24000c60

080031e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031e8:	b480      	push	{r7}
 80031ea:	af00      	add	r7, sp, #0
  return uwTick;
 80031ec:	4b03      	ldr	r3, [pc, #12]	; (80031fc <HAL_GetTick+0x14>)
 80031ee:	681b      	ldr	r3, [r3, #0]
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr
 80031fa:	bf00      	nop
 80031fc:	24000c60 	.word	0x24000c60

08003200 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003208:	f7ff ffee 	bl	80031e8 <HAL_GetTick>
 800320c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003218:	d005      	beq.n	8003226 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800321a:	4b0a      	ldr	r3, [pc, #40]	; (8003244 <HAL_Delay+0x44>)
 800321c:	781b      	ldrb	r3, [r3, #0]
 800321e:	461a      	mov	r2, r3
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	4413      	add	r3, r2
 8003224:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003226:	bf00      	nop
 8003228:	f7ff ffde 	bl	80031e8 <HAL_GetTick>
 800322c:	4602      	mov	r2, r0
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	68fa      	ldr	r2, [r7, #12]
 8003234:	429a      	cmp	r2, r3
 8003236:	d8f7      	bhi.n	8003228 <HAL_Delay+0x28>
  {
  }
}
 8003238:	bf00      	nop
 800323a:	bf00      	nop
 800323c:	3710      	adds	r7, #16
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	2400000c 	.word	0x2400000c

08003248 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003248:	b480      	push	{r7}
 800324a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800324c:	4b03      	ldr	r3, [pc, #12]	; (800325c <HAL_GetREVID+0x14>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	0c1b      	lsrs	r3, r3, #16
}
 8003252:	4618      	mov	r0, r3
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr
 800325c:	5c001000 	.word	0x5c001000

08003260 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	431a      	orrs	r2, r3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	609a      	str	r2, [r3, #8]
}
 800327a:	bf00      	nop
 800327c:	370c      	adds	r7, #12
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr

08003286 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003286:	b480      	push	{r7}
 8003288:	b083      	sub	sp, #12
 800328a:	af00      	add	r7, sp, #0
 800328c:	6078      	str	r0, [r7, #4]
 800328e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	431a      	orrs	r2, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	609a      	str	r2, [r3, #8]
}
 80032a0:	bf00      	nop
 80032a2:	370c      	adds	r7, #12
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr

080032ac <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80032bc:	4618      	mov	r0, r3
 80032be:	370c      	adds	r7, #12
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr

080032c8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b087      	sub	sp, #28
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	60f8      	str	r0, [r7, #12]
 80032d0:	60b9      	str	r1, [r7, #8]
 80032d2:	607a      	str	r2, [r7, #4]
 80032d4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	3360      	adds	r3, #96	; 0x60
 80032da:	461a      	mov	r2, r3
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	4413      	add	r3, r2
 80032e2:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	430b      	orrs	r3, r1
 80032f6:	431a      	orrs	r2, r3
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80032fc:	bf00      	nop
 80032fe:	371c      	adds	r7, #28
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr

08003308 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003308:	b480      	push	{r7}
 800330a:	b085      	sub	sp, #20
 800330c:	af00      	add	r7, sp, #0
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	691b      	ldr	r3, [r3, #16]
 8003318:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	f003 031f 	and.w	r3, r3, #31
 8003322:	6879      	ldr	r1, [r7, #4]
 8003324:	fa01 f303 	lsl.w	r3, r1, r3
 8003328:	431a      	orrs	r2, r3
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	611a      	str	r2, [r3, #16]
}
 800332e:	bf00      	nop
 8003330:	3714      	adds	r7, #20
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr

0800333a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800333a:	b480      	push	{r7}
 800333c:	b087      	sub	sp, #28
 800333e:	af00      	add	r7, sp, #0
 8003340:	60f8      	str	r0, [r7, #12]
 8003342:	60b9      	str	r1, [r7, #8]
 8003344:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	3360      	adds	r3, #96	; 0x60
 800334a:	461a      	mov	r2, r3
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	4413      	add	r3, r2
 8003352:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	431a      	orrs	r2, r3
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	601a      	str	r2, [r3, #0]
  }
}
 8003364:	bf00      	nop
 8003366:	371c      	adds	r7, #28
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr

08003370 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003370:	b480      	push	{r7}
 8003372:	b087      	sub	sp, #28
 8003374:	af00      	add	r7, sp, #0
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	60b9      	str	r1, [r7, #8]
 800337a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	3330      	adds	r3, #48	; 0x30
 8003380:	461a      	mov	r2, r3
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	0a1b      	lsrs	r3, r3, #8
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	f003 030c 	and.w	r3, r3, #12
 800338c:	4413      	add	r3, r2
 800338e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	f003 031f 	and.w	r3, r3, #31
 800339a:	211f      	movs	r1, #31
 800339c:	fa01 f303 	lsl.w	r3, r1, r3
 80033a0:	43db      	mvns	r3, r3
 80033a2:	401a      	ands	r2, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	0e9b      	lsrs	r3, r3, #26
 80033a8:	f003 011f 	and.w	r1, r3, #31
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	f003 031f 	and.w	r3, r3, #31
 80033b2:	fa01 f303 	lsl.w	r3, r1, r3
 80033b6:	431a      	orrs	r2, r3
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80033bc:	bf00      	nop
 80033be:	371c      	adds	r7, #28
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr

080033c8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b087      	sub	sp, #28
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	60b9      	str	r1, [r7, #8]
 80033d2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	3314      	adds	r3, #20
 80033d8:	461a      	mov	r2, r3
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	0e5b      	lsrs	r3, r3, #25
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	f003 0304 	and.w	r3, r3, #4
 80033e4:	4413      	add	r3, r2
 80033e6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	0d1b      	lsrs	r3, r3, #20
 80033f0:	f003 031f 	and.w	r3, r3, #31
 80033f4:	2107      	movs	r1, #7
 80033f6:	fa01 f303 	lsl.w	r3, r1, r3
 80033fa:	43db      	mvns	r3, r3
 80033fc:	401a      	ands	r2, r3
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	0d1b      	lsrs	r3, r3, #20
 8003402:	f003 031f 	and.w	r3, r3, #31
 8003406:	6879      	ldr	r1, [r7, #4]
 8003408:	fa01 f303 	lsl.w	r3, r1, r3
 800340c:	431a      	orrs	r2, r3
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003412:	bf00      	nop
 8003414:	371c      	adds	r7, #28
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr
	...

08003420 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003420:	b480      	push	{r7}
 8003422:	b085      	sub	sp, #20
 8003424:	af00      	add	r7, sp, #0
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	60b9      	str	r1, [r7, #8]
 800342a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003438:	43db      	mvns	r3, r3
 800343a:	401a      	ands	r2, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f003 0318 	and.w	r3, r3, #24
 8003442:	4908      	ldr	r1, [pc, #32]	; (8003464 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003444:	40d9      	lsrs	r1, r3
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	400b      	ands	r3, r1
 800344a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800344e:	431a      	orrs	r2, r3
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8003456:	bf00      	nop
 8003458:	3714      	adds	r7, #20
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr
 8003462:	bf00      	nop
 8003464:	000fffff 	.word	0x000fffff

08003468 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	689a      	ldr	r2, [r3, #8]
 8003474:	4b04      	ldr	r3, [pc, #16]	; (8003488 <LL_ADC_DisableDeepPowerDown+0x20>)
 8003476:	4013      	ands	r3, r2
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	6093      	str	r3, [r2, #8]
}
 800347c:	bf00      	nop
 800347e:	370c      	adds	r7, #12
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr
 8003488:	5fffffc0 	.word	0x5fffffc0

0800348c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800349c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034a0:	d101      	bne.n	80034a6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80034a2:	2301      	movs	r3, #1
 80034a4:	e000      	b.n	80034a8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80034a6:	2300      	movs	r3, #0
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	370c      	adds	r7, #12
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr

080034b4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	689a      	ldr	r2, [r3, #8]
 80034c0:	4b05      	ldr	r3, [pc, #20]	; (80034d8 <LL_ADC_EnableInternalRegulator+0x24>)
 80034c2:	4013      	ands	r3, r2
 80034c4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80034cc:	bf00      	nop
 80034ce:	370c      	adds	r7, #12
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr
 80034d8:	6fffffc0 	.word	0x6fffffc0

080034dc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80034f0:	d101      	bne.n	80034f6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80034f2:	2301      	movs	r3, #1
 80034f4:	e000      	b.n	80034f8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80034f6:	2300      	movs	r3, #0
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	370c      	adds	r7, #12
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	f003 0301 	and.w	r3, r3, #1
 8003514:	2b01      	cmp	r3, #1
 8003516:	d101      	bne.n	800351c <LL_ADC_IsEnabled+0x18>
 8003518:	2301      	movs	r3, #1
 800351a:	e000      	b.n	800351e <LL_ADC_IsEnabled+0x1a>
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	370c      	adds	r7, #12
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr

0800352a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800352a:	b480      	push	{r7}
 800352c:	b083      	sub	sp, #12
 800352e:	af00      	add	r7, sp, #0
 8003530:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	f003 0304 	and.w	r3, r3, #4
 800353a:	2b04      	cmp	r3, #4
 800353c:	d101      	bne.n	8003542 <LL_ADC_REG_IsConversionOngoing+0x18>
 800353e:	2301      	movs	r3, #1
 8003540:	e000      	b.n	8003544 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003542:	2300      	movs	r3, #0
}
 8003544:	4618      	mov	r0, r3
 8003546:	370c      	adds	r7, #12
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr

08003550 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	f003 0308 	and.w	r3, r3, #8
 8003560:	2b08      	cmp	r3, #8
 8003562:	d101      	bne.n	8003568 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003564:	2301      	movs	r3, #1
 8003566:	e000      	b.n	800356a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003568:	2300      	movs	r3, #0
}
 800356a:	4618      	mov	r0, r3
 800356c:	370c      	adds	r7, #12
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr
	...

08003578 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003578:	b590      	push	{r4, r7, lr}
 800357a:	b089      	sub	sp, #36	; 0x24
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003580:	2300      	movs	r3, #0
 8003582:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003584:	2300      	movs	r3, #0
 8003586:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d101      	bne.n	8003592 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e18e      	b.n	80038b0 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	68db      	ldr	r3, [r3, #12]
 8003596:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800359c:	2b00      	cmp	r3, #0
 800359e:	d109      	bne.n	80035b4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f7fe fb05 	bl	8001bb0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2200      	movs	r2, #0
 80035b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4618      	mov	r0, r3
 80035ba:	f7ff ff67 	bl	800348c <LL_ADC_IsDeepPowerDownEnabled>
 80035be:	4603      	mov	r3, r0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d004      	beq.n	80035ce <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4618      	mov	r0, r3
 80035ca:	f7ff ff4d 	bl	8003468 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4618      	mov	r0, r3
 80035d4:	f7ff ff82 	bl	80034dc <LL_ADC_IsInternalRegulatorEnabled>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d114      	bne.n	8003608 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4618      	mov	r0, r3
 80035e4:	f7ff ff66 	bl	80034b4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80035e8:	4b9a      	ldr	r3, [pc, #616]	; (8003854 <HAL_ADC_Init+0x2dc>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	099b      	lsrs	r3, r3, #6
 80035ee:	4a9a      	ldr	r2, [pc, #616]	; (8003858 <HAL_ADC_Init+0x2e0>)
 80035f0:	fba2 2303 	umull	r2, r3, r2, r3
 80035f4:	099b      	lsrs	r3, r3, #6
 80035f6:	3301      	adds	r3, #1
 80035f8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80035fa:	e002      	b.n	8003602 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	3b01      	subs	r3, #1
 8003600:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d1f9      	bne.n	80035fc <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4618      	mov	r0, r3
 800360e:	f7ff ff65 	bl	80034dc <LL_ADC_IsInternalRegulatorEnabled>
 8003612:	4603      	mov	r3, r0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d10d      	bne.n	8003634 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800361c:	f043 0210 	orr.w	r2, r3, #16
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003628:	f043 0201 	orr.w	r2, r3, #1
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4618      	mov	r0, r3
 800363a:	f7ff ff76 	bl	800352a <LL_ADC_REG_IsConversionOngoing>
 800363e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003644:	f003 0310 	and.w	r3, r3, #16
 8003648:	2b00      	cmp	r3, #0
 800364a:	f040 8128 	bne.w	800389e <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	2b00      	cmp	r3, #0
 8003652:	f040 8124 	bne.w	800389e <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800365a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800365e:	f043 0202 	orr.w	r2, r3, #2
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4618      	mov	r0, r3
 800366c:	f7ff ff4a 	bl	8003504 <LL_ADC_IsEnabled>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d136      	bne.n	80036e4 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a78      	ldr	r2, [pc, #480]	; (800385c <HAL_ADC_Init+0x2e4>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d004      	beq.n	800368a <HAL_ADC_Init+0x112>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a76      	ldr	r2, [pc, #472]	; (8003860 <HAL_ADC_Init+0x2e8>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d10e      	bne.n	80036a8 <HAL_ADC_Init+0x130>
 800368a:	4874      	ldr	r0, [pc, #464]	; (800385c <HAL_ADC_Init+0x2e4>)
 800368c:	f7ff ff3a 	bl	8003504 <LL_ADC_IsEnabled>
 8003690:	4604      	mov	r4, r0
 8003692:	4873      	ldr	r0, [pc, #460]	; (8003860 <HAL_ADC_Init+0x2e8>)
 8003694:	f7ff ff36 	bl	8003504 <LL_ADC_IsEnabled>
 8003698:	4603      	mov	r3, r0
 800369a:	4323      	orrs	r3, r4
 800369c:	2b00      	cmp	r3, #0
 800369e:	bf0c      	ite	eq
 80036a0:	2301      	moveq	r3, #1
 80036a2:	2300      	movne	r3, #0
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	e008      	b.n	80036ba <HAL_ADC_Init+0x142>
 80036a8:	486e      	ldr	r0, [pc, #440]	; (8003864 <HAL_ADC_Init+0x2ec>)
 80036aa:	f7ff ff2b 	bl	8003504 <LL_ADC_IsEnabled>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	bf0c      	ite	eq
 80036b4:	2301      	moveq	r3, #1
 80036b6:	2300      	movne	r3, #0
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d012      	beq.n	80036e4 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a66      	ldr	r2, [pc, #408]	; (800385c <HAL_ADC_Init+0x2e4>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d004      	beq.n	80036d2 <HAL_ADC_Init+0x15a>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a64      	ldr	r2, [pc, #400]	; (8003860 <HAL_ADC_Init+0x2e8>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d101      	bne.n	80036d6 <HAL_ADC_Init+0x15e>
 80036d2:	4a65      	ldr	r2, [pc, #404]	; (8003868 <HAL_ADC_Init+0x2f0>)
 80036d4:	e000      	b.n	80036d8 <HAL_ADC_Init+0x160>
 80036d6:	4a65      	ldr	r2, [pc, #404]	; (800386c <HAL_ADC_Init+0x2f4>)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	4619      	mov	r1, r3
 80036de:	4610      	mov	r0, r2
 80036e0:	f7ff fdbe 	bl	8003260 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80036e4:	f7ff fdb0 	bl	8003248 <HAL_GetREVID>
 80036e8:	4603      	mov	r3, r0
 80036ea:	f241 0203 	movw	r2, #4099	; 0x1003
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d914      	bls.n	800371c <HAL_ADC_Init+0x1a4>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	2b10      	cmp	r3, #16
 80036f8:	d110      	bne.n	800371c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	7d5b      	ldrb	r3, [r3, #21]
 80036fe:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003704:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800370a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	7f1b      	ldrb	r3, [r3, #28]
 8003710:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003712:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003714:	f043 030c 	orr.w	r3, r3, #12
 8003718:	61bb      	str	r3, [r7, #24]
 800371a:	e00d      	b.n	8003738 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	7d5b      	ldrb	r3, [r3, #21]
 8003720:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003726:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800372c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	7f1b      	ldrb	r3, [r3, #28]
 8003732:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003734:	4313      	orrs	r3, r2
 8003736:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	7f1b      	ldrb	r3, [r3, #28]
 800373c:	2b01      	cmp	r3, #1
 800373e:	d106      	bne.n	800374e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a1b      	ldr	r3, [r3, #32]
 8003744:	3b01      	subs	r3, #1
 8003746:	045b      	lsls	r3, r3, #17
 8003748:	69ba      	ldr	r2, [r7, #24]
 800374a:	4313      	orrs	r3, r2
 800374c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003752:	2b00      	cmp	r3, #0
 8003754:	d009      	beq.n	800376a <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375a:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003762:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003764:	69ba      	ldr	r2, [r7, #24]
 8003766:	4313      	orrs	r3, r2
 8003768:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	68da      	ldr	r2, [r3, #12]
 8003770:	4b3f      	ldr	r3, [pc, #252]	; (8003870 <HAL_ADC_Init+0x2f8>)
 8003772:	4013      	ands	r3, r2
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	6812      	ldr	r2, [r2, #0]
 8003778:	69b9      	ldr	r1, [r7, #24]
 800377a:	430b      	orrs	r3, r1
 800377c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4618      	mov	r0, r3
 8003784:	f7ff fed1 	bl	800352a <LL_ADC_REG_IsConversionOngoing>
 8003788:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4618      	mov	r0, r3
 8003790:	f7ff fede 	bl	8003550 <LL_ADC_INJ_IsConversionOngoing>
 8003794:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d14a      	bne.n	8003832 <HAL_ADC_Init+0x2ba>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d147      	bne.n	8003832 <HAL_ADC_Init+0x2ba>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	7d1b      	ldrb	r3, [r3, #20]
 80037a6:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80037ac:	4313      	orrs	r3, r2
 80037ae:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	68da      	ldr	r2, [r3, #12]
 80037b6:	4b2f      	ldr	r3, [pc, #188]	; (8003874 <HAL_ADC_Init+0x2fc>)
 80037b8:	4013      	ands	r3, r2
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	6812      	ldr	r2, [r2, #0]
 80037be:	69b9      	ldr	r1, [r7, #24]
 80037c0:	430b      	orrs	r3, r1
 80037c2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d11b      	bne.n	8003806 <HAL_ADC_Init+0x28e>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d2:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	691a      	ldr	r2, [r3, #16]
 80037da:	4b27      	ldr	r3, [pc, #156]	; (8003878 <HAL_ADC_Init+0x300>)
 80037dc:	4013      	ands	r3, r2
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80037e2:	3a01      	subs	r2, #1
 80037e4:	0411      	lsls	r1, r2, #16
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80037ea:	4311      	orrs	r1, r2
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80037f0:	4311      	orrs	r1, r2
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80037f6:	430a      	orrs	r2, r1
 80037f8:	431a      	orrs	r2, r3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f042 0201 	orr.w	r2, r2, #1
 8003802:	611a      	str	r2, [r3, #16]
 8003804:	e007      	b.n	8003816 <HAL_ADC_Init+0x29e>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	691a      	ldr	r2, [r3, #16]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f022 0201 	bic.w	r2, r2, #1
 8003814:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	691b      	ldr	r3, [r3, #16]
 800381c:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	430a      	orrs	r2, r1
 800382a:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f000 fb93 	bl	8003f58 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	2b01      	cmp	r3, #1
 8003838:	d120      	bne.n	800387c <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003840:	f023 010f 	bic.w	r1, r3, #15
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	699b      	ldr	r3, [r3, #24]
 8003848:	1e5a      	subs	r2, r3, #1
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	430a      	orrs	r2, r1
 8003850:	631a      	str	r2, [r3, #48]	; 0x30
 8003852:	e01b      	b.n	800388c <HAL_ADC_Init+0x314>
 8003854:	24000000 	.word	0x24000000
 8003858:	053e2d63 	.word	0x053e2d63
 800385c:	40022000 	.word	0x40022000
 8003860:	40022100 	.word	0x40022100
 8003864:	58026000 	.word	0x58026000
 8003868:	40022300 	.word	0x40022300
 800386c:	58026300 	.word	0x58026300
 8003870:	fff0c003 	.word	0xfff0c003
 8003874:	ffffbffc 	.word	0xffffbffc
 8003878:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f022 020f 	bic.w	r2, r2, #15
 800388a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003890:	f023 0303 	bic.w	r3, r3, #3
 8003894:	f043 0201 	orr.w	r2, r3, #1
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	655a      	str	r2, [r3, #84]	; 0x54
 800389c:	e007      	b.n	80038ae <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038a2:	f043 0210 	orr.w	r2, r3, #16
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80038ae:	7ffb      	ldrb	r3, [r7, #31]
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3724      	adds	r7, #36	; 0x24
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd90      	pop	{r4, r7, pc}

080038b8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80038b8:	b590      	push	{r4, r7, lr}
 80038ba:	b0a1      	sub	sp, #132	; 0x84
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038c2:	2300      	movs	r3, #0
 80038c4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80038c8:	2300      	movs	r3, #0
 80038ca:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	4a9d      	ldr	r2, [pc, #628]	; (8003b48 <HAL_ADC_ConfigChannel+0x290>)
 80038d2:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d101      	bne.n	80038e2 <HAL_ADC_ConfigChannel+0x2a>
 80038de:	2302      	movs	r3, #2
 80038e0:	e321      	b.n	8003f26 <HAL_ADC_ConfigChannel+0x66e>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2201      	movs	r2, #1
 80038e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4618      	mov	r0, r3
 80038f0:	f7ff fe1b 	bl	800352a <LL_ADC_REG_IsConversionOngoing>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	f040 8306 	bne.w	8003f08 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003904:	2b00      	cmp	r3, #0
 8003906:	d108      	bne.n	800391a <HAL_ADC_ConfigChannel+0x62>
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	0e9b      	lsrs	r3, r3, #26
 800390e:	f003 031f 	and.w	r3, r3, #31
 8003912:	2201      	movs	r2, #1
 8003914:	fa02 f303 	lsl.w	r3, r2, r3
 8003918:	e016      	b.n	8003948 <HAL_ADC_ConfigChannel+0x90>
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003920:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003922:	fa93 f3a3 	rbit	r3, r3
 8003926:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003928:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800392a:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800392c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800392e:	2b00      	cmp	r3, #0
 8003930:	d101      	bne.n	8003936 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8003932:	2320      	movs	r3, #32
 8003934:	e003      	b.n	800393e <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8003936:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003938:	fab3 f383 	clz	r3, r3
 800393c:	b2db      	uxtb	r3, r3
 800393e:	f003 031f 	and.w	r3, r3, #31
 8003942:	2201      	movs	r2, #1
 8003944:	fa02 f303 	lsl.w	r3, r2, r3
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	6812      	ldr	r2, [r2, #0]
 800394c:	69d1      	ldr	r1, [r2, #28]
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	6812      	ldr	r2, [r2, #0]
 8003952:	430b      	orrs	r3, r1
 8003954:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6818      	ldr	r0, [r3, #0]
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	6859      	ldr	r1, [r3, #4]
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	461a      	mov	r2, r3
 8003964:	f7ff fd04 	bl	8003370 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4618      	mov	r0, r3
 800396e:	f7ff fddc 	bl	800352a <LL_ADC_REG_IsConversionOngoing>
 8003972:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4618      	mov	r0, r3
 800397a:	f7ff fde9 	bl	8003550 <LL_ADC_INJ_IsConversionOngoing>
 800397e:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003980:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003982:	2b00      	cmp	r3, #0
 8003984:	f040 80b3 	bne.w	8003aee <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003988:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800398a:	2b00      	cmp	r3, #0
 800398c:	f040 80af 	bne.w	8003aee <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6818      	ldr	r0, [r3, #0]
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	6819      	ldr	r1, [r3, #0]
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	461a      	mov	r2, r3
 800399e:	f7ff fd13 	bl	80033c8 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80039a2:	4b6a      	ldr	r3, [pc, #424]	; (8003b4c <HAL_ADC_ConfigChannel+0x294>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80039aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039ae:	d10b      	bne.n	80039c8 <HAL_ADC_ConfigChannel+0x110>
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	695a      	ldr	r2, [r3, #20]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	089b      	lsrs	r3, r3, #2
 80039bc:	f003 0307 	and.w	r3, r3, #7
 80039c0:	005b      	lsls	r3, r3, #1
 80039c2:	fa02 f303 	lsl.w	r3, r2, r3
 80039c6:	e01d      	b.n	8003a04 <HAL_ADC_ConfigChannel+0x14c>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	f003 0310 	and.w	r3, r3, #16
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d10b      	bne.n	80039ee <HAL_ADC_ConfigChannel+0x136>
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	695a      	ldr	r2, [r3, #20]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	089b      	lsrs	r3, r3, #2
 80039e2:	f003 0307 	and.w	r3, r3, #7
 80039e6:	005b      	lsls	r3, r3, #1
 80039e8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ec:	e00a      	b.n	8003a04 <HAL_ADC_ConfigChannel+0x14c>
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	695a      	ldr	r2, [r3, #20]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	089b      	lsrs	r3, r3, #2
 80039fa:	f003 0304 	and.w	r3, r3, #4
 80039fe:	005b      	lsls	r3, r3, #1
 8003a00:	fa02 f303 	lsl.w	r3, r2, r3
 8003a04:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	691b      	ldr	r3, [r3, #16]
 8003a0a:	2b04      	cmp	r3, #4
 8003a0c:	d027      	beq.n	8003a5e <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6818      	ldr	r0, [r3, #0]
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	6919      	ldr	r1, [r3, #16]
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a1c:	f7ff fc54 	bl	80032c8 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6818      	ldr	r0, [r3, #0]
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	6919      	ldr	r1, [r3, #16]
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	7e5b      	ldrb	r3, [r3, #25]
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d102      	bne.n	8003a36 <HAL_ADC_ConfigChannel+0x17e>
 8003a30:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003a34:	e000      	b.n	8003a38 <HAL_ADC_ConfigChannel+0x180>
 8003a36:	2300      	movs	r3, #0
 8003a38:	461a      	mov	r2, r3
 8003a3a:	f7ff fc7e 	bl	800333a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6818      	ldr	r0, [r3, #0]
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	6919      	ldr	r1, [r3, #16]
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	7e1b      	ldrb	r3, [r3, #24]
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d102      	bne.n	8003a54 <HAL_ADC_ConfigChannel+0x19c>
 8003a4e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003a52:	e000      	b.n	8003a56 <HAL_ADC_ConfigChannel+0x19e>
 8003a54:	2300      	movs	r3, #0
 8003a56:	461a      	mov	r2, r3
 8003a58:	f7ff fc56 	bl	8003308 <LL_ADC_SetDataRightShift>
 8003a5c:	e047      	b.n	8003aee <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a64:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	069b      	lsls	r3, r3, #26
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d107      	bne.n	8003a82 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003a80:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a88:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	069b      	lsls	r3, r3, #26
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d107      	bne.n	8003aa6 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003aa4:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003aac:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	069b      	lsls	r3, r3, #26
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d107      	bne.n	8003aca <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003ac8:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ad0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	069b      	lsls	r3, r3, #26
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d107      	bne.n	8003aee <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003aec:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4618      	mov	r0, r3
 8003af4:	f7ff fd06 	bl	8003504 <LL_ADC_IsEnabled>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	f040 820d 	bne.w	8003f1a <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6818      	ldr	r0, [r3, #0]
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	6819      	ldr	r1, [r3, #0]
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	461a      	mov	r2, r3
 8003b0e:	f7ff fc87 	bl	8003420 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	4a0c      	ldr	r2, [pc, #48]	; (8003b48 <HAL_ADC_ConfigChannel+0x290>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	f040 8133 	bne.w	8003d84 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d110      	bne.n	8003b50 <HAL_ADC_ConfigChannel+0x298>
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	0e9b      	lsrs	r3, r3, #26
 8003b34:	3301      	adds	r3, #1
 8003b36:	f003 031f 	and.w	r3, r3, #31
 8003b3a:	2b09      	cmp	r3, #9
 8003b3c:	bf94      	ite	ls
 8003b3e:	2301      	movls	r3, #1
 8003b40:	2300      	movhi	r3, #0
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	e01e      	b.n	8003b84 <HAL_ADC_ConfigChannel+0x2cc>
 8003b46:	bf00      	nop
 8003b48:	47ff0000 	.word	0x47ff0000
 8003b4c:	5c001000 	.word	0x5c001000
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b58:	fa93 f3a3 	rbit	r3, r3
 8003b5c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003b5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b60:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003b62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d101      	bne.n	8003b6c <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8003b68:	2320      	movs	r3, #32
 8003b6a:	e003      	b.n	8003b74 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8003b6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b6e:	fab3 f383 	clz	r3, r3
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	3301      	adds	r3, #1
 8003b76:	f003 031f 	and.w	r3, r3, #31
 8003b7a:	2b09      	cmp	r3, #9
 8003b7c:	bf94      	ite	ls
 8003b7e:	2301      	movls	r3, #1
 8003b80:	2300      	movhi	r3, #0
 8003b82:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d079      	beq.n	8003c7c <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d107      	bne.n	8003ba4 <HAL_ADC_ConfigChannel+0x2ec>
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	0e9b      	lsrs	r3, r3, #26
 8003b9a:	3301      	adds	r3, #1
 8003b9c:	069b      	lsls	r3, r3, #26
 8003b9e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ba2:	e015      	b.n	8003bd0 <HAL_ADC_ConfigChannel+0x318>
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003baa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bac:	fa93 f3a3 	rbit	r3, r3
 8003bb0:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003bb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bb4:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003bb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d101      	bne.n	8003bc0 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8003bbc:	2320      	movs	r3, #32
 8003bbe:	e003      	b.n	8003bc8 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8003bc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bc2:	fab3 f383 	clz	r3, r3
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	3301      	adds	r3, #1
 8003bca:	069b      	lsls	r3, r3, #26
 8003bcc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d109      	bne.n	8003bf0 <HAL_ADC_ConfigChannel+0x338>
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	0e9b      	lsrs	r3, r3, #26
 8003be2:	3301      	adds	r3, #1
 8003be4:	f003 031f 	and.w	r3, r3, #31
 8003be8:	2101      	movs	r1, #1
 8003bea:	fa01 f303 	lsl.w	r3, r1, r3
 8003bee:	e017      	b.n	8003c20 <HAL_ADC_ConfigChannel+0x368>
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bf8:	fa93 f3a3 	rbit	r3, r3
 8003bfc:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003bfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c00:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003c02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d101      	bne.n	8003c0c <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8003c08:	2320      	movs	r3, #32
 8003c0a:	e003      	b.n	8003c14 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8003c0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c0e:	fab3 f383 	clz	r3, r3
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	3301      	adds	r3, #1
 8003c16:	f003 031f 	and.w	r3, r3, #31
 8003c1a:	2101      	movs	r1, #1
 8003c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c20:	ea42 0103 	orr.w	r1, r2, r3
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d10a      	bne.n	8003c46 <HAL_ADC_ConfigChannel+0x38e>
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	0e9b      	lsrs	r3, r3, #26
 8003c36:	3301      	adds	r3, #1
 8003c38:	f003 021f 	and.w	r2, r3, #31
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	005b      	lsls	r3, r3, #1
 8003c40:	4413      	add	r3, r2
 8003c42:	051b      	lsls	r3, r3, #20
 8003c44:	e018      	b.n	8003c78 <HAL_ADC_ConfigChannel+0x3c0>
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c4e:	fa93 f3a3 	rbit	r3, r3
 8003c52:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c56:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d101      	bne.n	8003c62 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8003c5e:	2320      	movs	r3, #32
 8003c60:	e003      	b.n	8003c6a <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8003c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c64:	fab3 f383 	clz	r3, r3
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	3301      	adds	r3, #1
 8003c6c:	f003 021f 	and.w	r2, r3, #31
 8003c70:	4613      	mov	r3, r2
 8003c72:	005b      	lsls	r3, r3, #1
 8003c74:	4413      	add	r3, r2
 8003c76:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c78:	430b      	orrs	r3, r1
 8003c7a:	e07e      	b.n	8003d7a <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d107      	bne.n	8003c98 <HAL_ADC_ConfigChannel+0x3e0>
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	0e9b      	lsrs	r3, r3, #26
 8003c8e:	3301      	adds	r3, #1
 8003c90:	069b      	lsls	r3, r3, #26
 8003c92:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c96:	e015      	b.n	8003cc4 <HAL_ADC_ConfigChannel+0x40c>
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ca0:	fa93 f3a3 	rbit	r3, r3
 8003ca4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d101      	bne.n	8003cb4 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003cb0:	2320      	movs	r3, #32
 8003cb2:	e003      	b.n	8003cbc <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cb6:	fab3 f383 	clz	r3, r3
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	3301      	adds	r3, #1
 8003cbe:	069b      	lsls	r3, r3, #26
 8003cc0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d109      	bne.n	8003ce4 <HAL_ADC_ConfigChannel+0x42c>
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	0e9b      	lsrs	r3, r3, #26
 8003cd6:	3301      	adds	r3, #1
 8003cd8:	f003 031f 	and.w	r3, r3, #31
 8003cdc:	2101      	movs	r1, #1
 8003cde:	fa01 f303 	lsl.w	r3, r1, r3
 8003ce2:	e017      	b.n	8003d14 <HAL_ADC_ConfigChannel+0x45c>
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	fa93 f3a3 	rbit	r3, r3
 8003cf0:	61bb      	str	r3, [r7, #24]
  return result;
 8003cf2:	69bb      	ldr	r3, [r7, #24]
 8003cf4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003cf6:	6a3b      	ldr	r3, [r7, #32]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d101      	bne.n	8003d00 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8003cfc:	2320      	movs	r3, #32
 8003cfe:	e003      	b.n	8003d08 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8003d00:	6a3b      	ldr	r3, [r7, #32]
 8003d02:	fab3 f383 	clz	r3, r3
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	3301      	adds	r3, #1
 8003d0a:	f003 031f 	and.w	r3, r3, #31
 8003d0e:	2101      	movs	r1, #1
 8003d10:	fa01 f303 	lsl.w	r3, r1, r3
 8003d14:	ea42 0103 	orr.w	r1, r2, r3
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d10d      	bne.n	8003d40 <HAL_ADC_ConfigChannel+0x488>
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	0e9b      	lsrs	r3, r3, #26
 8003d2a:	3301      	adds	r3, #1
 8003d2c:	f003 021f 	and.w	r2, r3, #31
 8003d30:	4613      	mov	r3, r2
 8003d32:	005b      	lsls	r3, r3, #1
 8003d34:	4413      	add	r3, r2
 8003d36:	3b1e      	subs	r3, #30
 8003d38:	051b      	lsls	r3, r3, #20
 8003d3a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003d3e:	e01b      	b.n	8003d78 <HAL_ADC_ConfigChannel+0x4c0>
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	fa93 f3a3 	rbit	r3, r3
 8003d4c:	60fb      	str	r3, [r7, #12]
  return result;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d101      	bne.n	8003d5c <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8003d58:	2320      	movs	r3, #32
 8003d5a:	e003      	b.n	8003d64 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	fab3 f383 	clz	r3, r3
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	3301      	adds	r3, #1
 8003d66:	f003 021f 	and.w	r2, r3, #31
 8003d6a:	4613      	mov	r3, r2
 8003d6c:	005b      	lsls	r3, r3, #1
 8003d6e:	4413      	add	r3, r2
 8003d70:	3b1e      	subs	r3, #30
 8003d72:	051b      	lsls	r3, r3, #20
 8003d74:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d78:	430b      	orrs	r3, r1
 8003d7a:	683a      	ldr	r2, [r7, #0]
 8003d7c:	6892      	ldr	r2, [r2, #8]
 8003d7e:	4619      	mov	r1, r3
 8003d80:	f7ff fb22 	bl	80033c8 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	f280 80c6 	bge.w	8003f1a <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a67      	ldr	r2, [pc, #412]	; (8003f30 <HAL_ADC_ConfigChannel+0x678>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d004      	beq.n	8003da2 <HAL_ADC_ConfigChannel+0x4ea>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a65      	ldr	r2, [pc, #404]	; (8003f34 <HAL_ADC_ConfigChannel+0x67c>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d101      	bne.n	8003da6 <HAL_ADC_ConfigChannel+0x4ee>
 8003da2:	4b65      	ldr	r3, [pc, #404]	; (8003f38 <HAL_ADC_ConfigChannel+0x680>)
 8003da4:	e000      	b.n	8003da8 <HAL_ADC_ConfigChannel+0x4f0>
 8003da6:	4b65      	ldr	r3, [pc, #404]	; (8003f3c <HAL_ADC_ConfigChannel+0x684>)
 8003da8:	4618      	mov	r0, r3
 8003daa:	f7ff fa7f 	bl	80032ac <LL_ADC_GetCommonPathInternalCh>
 8003dae:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a5e      	ldr	r2, [pc, #376]	; (8003f30 <HAL_ADC_ConfigChannel+0x678>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d004      	beq.n	8003dc4 <HAL_ADC_ConfigChannel+0x50c>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a5d      	ldr	r2, [pc, #372]	; (8003f34 <HAL_ADC_ConfigChannel+0x67c>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d10e      	bne.n	8003de2 <HAL_ADC_ConfigChannel+0x52a>
 8003dc4:	485a      	ldr	r0, [pc, #360]	; (8003f30 <HAL_ADC_ConfigChannel+0x678>)
 8003dc6:	f7ff fb9d 	bl	8003504 <LL_ADC_IsEnabled>
 8003dca:	4604      	mov	r4, r0
 8003dcc:	4859      	ldr	r0, [pc, #356]	; (8003f34 <HAL_ADC_ConfigChannel+0x67c>)
 8003dce:	f7ff fb99 	bl	8003504 <LL_ADC_IsEnabled>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	4323      	orrs	r3, r4
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	bf0c      	ite	eq
 8003dda:	2301      	moveq	r3, #1
 8003ddc:	2300      	movne	r3, #0
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	e008      	b.n	8003df4 <HAL_ADC_ConfigChannel+0x53c>
 8003de2:	4857      	ldr	r0, [pc, #348]	; (8003f40 <HAL_ADC_ConfigChannel+0x688>)
 8003de4:	f7ff fb8e 	bl	8003504 <LL_ADC_IsEnabled>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	bf0c      	ite	eq
 8003dee:	2301      	moveq	r3, #1
 8003df0:	2300      	movne	r3, #0
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d07d      	beq.n	8003ef4 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a51      	ldr	r2, [pc, #324]	; (8003f44 <HAL_ADC_ConfigChannel+0x68c>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d130      	bne.n	8003e64 <HAL_ADC_ConfigChannel+0x5ac>
 8003e02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e04:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d12b      	bne.n	8003e64 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a4b      	ldr	r2, [pc, #300]	; (8003f40 <HAL_ADC_ConfigChannel+0x688>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	f040 8081 	bne.w	8003f1a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a44      	ldr	r2, [pc, #272]	; (8003f30 <HAL_ADC_ConfigChannel+0x678>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d004      	beq.n	8003e2c <HAL_ADC_ConfigChannel+0x574>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a43      	ldr	r2, [pc, #268]	; (8003f34 <HAL_ADC_ConfigChannel+0x67c>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d101      	bne.n	8003e30 <HAL_ADC_ConfigChannel+0x578>
 8003e2c:	4a42      	ldr	r2, [pc, #264]	; (8003f38 <HAL_ADC_ConfigChannel+0x680>)
 8003e2e:	e000      	b.n	8003e32 <HAL_ADC_ConfigChannel+0x57a>
 8003e30:	4a42      	ldr	r2, [pc, #264]	; (8003f3c <HAL_ADC_ConfigChannel+0x684>)
 8003e32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e34:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003e38:	4619      	mov	r1, r3
 8003e3a:	4610      	mov	r0, r2
 8003e3c:	f7ff fa23 	bl	8003286 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003e40:	4b41      	ldr	r3, [pc, #260]	; (8003f48 <HAL_ADC_ConfigChannel+0x690>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	099b      	lsrs	r3, r3, #6
 8003e46:	4a41      	ldr	r2, [pc, #260]	; (8003f4c <HAL_ADC_ConfigChannel+0x694>)
 8003e48:	fba2 2303 	umull	r2, r3, r2, r3
 8003e4c:	099b      	lsrs	r3, r3, #6
 8003e4e:	3301      	adds	r3, #1
 8003e50:	005b      	lsls	r3, r3, #1
 8003e52:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003e54:	e002      	b.n	8003e5c <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	3b01      	subs	r3, #1
 8003e5a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d1f9      	bne.n	8003e56 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003e62:	e05a      	b.n	8003f1a <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a39      	ldr	r2, [pc, #228]	; (8003f50 <HAL_ADC_ConfigChannel+0x698>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d11e      	bne.n	8003eac <HAL_ADC_ConfigChannel+0x5f4>
 8003e6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d119      	bne.n	8003eac <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a30      	ldr	r2, [pc, #192]	; (8003f40 <HAL_ADC_ConfigChannel+0x688>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d14b      	bne.n	8003f1a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a2a      	ldr	r2, [pc, #168]	; (8003f30 <HAL_ADC_ConfigChannel+0x678>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d004      	beq.n	8003e96 <HAL_ADC_ConfigChannel+0x5de>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a28      	ldr	r2, [pc, #160]	; (8003f34 <HAL_ADC_ConfigChannel+0x67c>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d101      	bne.n	8003e9a <HAL_ADC_ConfigChannel+0x5e2>
 8003e96:	4a28      	ldr	r2, [pc, #160]	; (8003f38 <HAL_ADC_ConfigChannel+0x680>)
 8003e98:	e000      	b.n	8003e9c <HAL_ADC_ConfigChannel+0x5e4>
 8003e9a:	4a28      	ldr	r2, [pc, #160]	; (8003f3c <HAL_ADC_ConfigChannel+0x684>)
 8003e9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ea2:	4619      	mov	r1, r3
 8003ea4:	4610      	mov	r0, r2
 8003ea6:	f7ff f9ee 	bl	8003286 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003eaa:	e036      	b.n	8003f1a <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a28      	ldr	r2, [pc, #160]	; (8003f54 <HAL_ADC_ConfigChannel+0x69c>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d131      	bne.n	8003f1a <HAL_ADC_ConfigChannel+0x662>
 8003eb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eb8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d12c      	bne.n	8003f1a <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a1e      	ldr	r2, [pc, #120]	; (8003f40 <HAL_ADC_ConfigChannel+0x688>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d127      	bne.n	8003f1a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a18      	ldr	r2, [pc, #96]	; (8003f30 <HAL_ADC_ConfigChannel+0x678>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d004      	beq.n	8003ede <HAL_ADC_ConfigChannel+0x626>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a16      	ldr	r2, [pc, #88]	; (8003f34 <HAL_ADC_ConfigChannel+0x67c>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d101      	bne.n	8003ee2 <HAL_ADC_ConfigChannel+0x62a>
 8003ede:	4a16      	ldr	r2, [pc, #88]	; (8003f38 <HAL_ADC_ConfigChannel+0x680>)
 8003ee0:	e000      	b.n	8003ee4 <HAL_ADC_ConfigChannel+0x62c>
 8003ee2:	4a16      	ldr	r2, [pc, #88]	; (8003f3c <HAL_ADC_ConfigChannel+0x684>)
 8003ee4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ee6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003eea:	4619      	mov	r1, r3
 8003eec:	4610      	mov	r0, r2
 8003eee:	f7ff f9ca 	bl	8003286 <LL_ADC_SetCommonPathInternalCh>
 8003ef2:	e012      	b.n	8003f1a <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ef8:	f043 0220 	orr.w	r2, r3, #32
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003f06:	e008      	b.n	8003f1a <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f0c:	f043 0220 	orr.w	r2, r3, #32
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003f22:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3784      	adds	r7, #132	; 0x84
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd90      	pop	{r4, r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	40022000 	.word	0x40022000
 8003f34:	40022100 	.word	0x40022100
 8003f38:	40022300 	.word	0x40022300
 8003f3c:	58026300 	.word	0x58026300
 8003f40:	58026000 	.word	0x58026000
 8003f44:	cb840000 	.word	0xcb840000
 8003f48:	24000000 	.word	0x24000000
 8003f4c:	053e2d63 	.word	0x053e2d63
 8003f50:	c7520000 	.word	0xc7520000
 8003f54:	cfb80000 	.word	0xcfb80000

08003f58 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a79      	ldr	r2, [pc, #484]	; (800414c <ADC_ConfigureBoostMode+0x1f4>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d004      	beq.n	8003f74 <ADC_ConfigureBoostMode+0x1c>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a78      	ldr	r2, [pc, #480]	; (8004150 <ADC_ConfigureBoostMode+0x1f8>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d109      	bne.n	8003f88 <ADC_ConfigureBoostMode+0x30>
 8003f74:	4b77      	ldr	r3, [pc, #476]	; (8004154 <ADC_ConfigureBoostMode+0x1fc>)
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	bf14      	ite	ne
 8003f80:	2301      	movne	r3, #1
 8003f82:	2300      	moveq	r3, #0
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	e008      	b.n	8003f9a <ADC_ConfigureBoostMode+0x42>
 8003f88:	4b73      	ldr	r3, [pc, #460]	; (8004158 <ADC_ConfigureBoostMode+0x200>)
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	bf14      	ite	ne
 8003f94:	2301      	movne	r3, #1
 8003f96:	2300      	moveq	r3, #0
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d01c      	beq.n	8003fd8 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003f9e:	f003 ff9b 	bl	8007ed8 <HAL_RCC_GetHCLKFreq>
 8003fa2:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003fac:	d010      	beq.n	8003fd0 <ADC_ConfigureBoostMode+0x78>
 8003fae:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003fb2:	d871      	bhi.n	8004098 <ADC_ConfigureBoostMode+0x140>
 8003fb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fb8:	d002      	beq.n	8003fc0 <ADC_ConfigureBoostMode+0x68>
 8003fba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003fbe:	d16b      	bne.n	8004098 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	0c1b      	lsrs	r3, r3, #16
 8003fc6:	68fa      	ldr	r2, [r7, #12]
 8003fc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fcc:	60fb      	str	r3, [r7, #12]
        break;
 8003fce:	e066      	b.n	800409e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	089b      	lsrs	r3, r3, #2
 8003fd4:	60fb      	str	r3, [r7, #12]
        break;
 8003fd6:	e062      	b.n	800409e <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003fd8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003fdc:	f004 ff18 	bl	8008e10 <HAL_RCCEx_GetPeriphCLKFreq>
 8003fe0:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003fea:	d051      	beq.n	8004090 <ADC_ConfigureBoostMode+0x138>
 8003fec:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003ff0:	d854      	bhi.n	800409c <ADC_ConfigureBoostMode+0x144>
 8003ff2:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003ff6:	d047      	beq.n	8004088 <ADC_ConfigureBoostMode+0x130>
 8003ff8:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003ffc:	d84e      	bhi.n	800409c <ADC_ConfigureBoostMode+0x144>
 8003ffe:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004002:	d03d      	beq.n	8004080 <ADC_ConfigureBoostMode+0x128>
 8004004:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004008:	d848      	bhi.n	800409c <ADC_ConfigureBoostMode+0x144>
 800400a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800400e:	d033      	beq.n	8004078 <ADC_ConfigureBoostMode+0x120>
 8004010:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004014:	d842      	bhi.n	800409c <ADC_ConfigureBoostMode+0x144>
 8004016:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800401a:	d029      	beq.n	8004070 <ADC_ConfigureBoostMode+0x118>
 800401c:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004020:	d83c      	bhi.n	800409c <ADC_ConfigureBoostMode+0x144>
 8004022:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004026:	d01a      	beq.n	800405e <ADC_ConfigureBoostMode+0x106>
 8004028:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800402c:	d836      	bhi.n	800409c <ADC_ConfigureBoostMode+0x144>
 800402e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004032:	d014      	beq.n	800405e <ADC_ConfigureBoostMode+0x106>
 8004034:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004038:	d830      	bhi.n	800409c <ADC_ConfigureBoostMode+0x144>
 800403a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800403e:	d00e      	beq.n	800405e <ADC_ConfigureBoostMode+0x106>
 8004040:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004044:	d82a      	bhi.n	800409c <ADC_ConfigureBoostMode+0x144>
 8004046:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800404a:	d008      	beq.n	800405e <ADC_ConfigureBoostMode+0x106>
 800404c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004050:	d824      	bhi.n	800409c <ADC_ConfigureBoostMode+0x144>
 8004052:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004056:	d002      	beq.n	800405e <ADC_ConfigureBoostMode+0x106>
 8004058:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800405c:	d11e      	bne.n	800409c <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	0c9b      	lsrs	r3, r3, #18
 8004064:	005b      	lsls	r3, r3, #1
 8004066:	68fa      	ldr	r2, [r7, #12]
 8004068:	fbb2 f3f3 	udiv	r3, r2, r3
 800406c:	60fb      	str	r3, [r7, #12]
        break;
 800406e:	e016      	b.n	800409e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	091b      	lsrs	r3, r3, #4
 8004074:	60fb      	str	r3, [r7, #12]
        break;
 8004076:	e012      	b.n	800409e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	095b      	lsrs	r3, r3, #5
 800407c:	60fb      	str	r3, [r7, #12]
        break;
 800407e:	e00e      	b.n	800409e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	099b      	lsrs	r3, r3, #6
 8004084:	60fb      	str	r3, [r7, #12]
        break;
 8004086:	e00a      	b.n	800409e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	09db      	lsrs	r3, r3, #7
 800408c:	60fb      	str	r3, [r7, #12]
        break;
 800408e:	e006      	b.n	800409e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	0a1b      	lsrs	r3, r3, #8
 8004094:	60fb      	str	r3, [r7, #12]
        break;
 8004096:	e002      	b.n	800409e <ADC_ConfigureBoostMode+0x146>
        break;
 8004098:	bf00      	nop
 800409a:	e000      	b.n	800409e <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 800409c:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800409e:	f7ff f8d3 	bl	8003248 <HAL_GetREVID>
 80040a2:	4603      	mov	r3, r0
 80040a4:	f241 0203 	movw	r2, #4099	; 0x1003
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d815      	bhi.n	80040d8 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	4a2b      	ldr	r2, [pc, #172]	; (800415c <ADC_ConfigureBoostMode+0x204>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d908      	bls.n	80040c6 <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	689a      	ldr	r2, [r3, #8]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040c2:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80040c4:	e03e      	b.n	8004144 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	689a      	ldr	r2, [r3, #8]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80040d4:	609a      	str	r2, [r3, #8]
}
 80040d6:	e035      	b.n	8004144 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	085b      	lsrs	r3, r3, #1
 80040dc:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	4a1f      	ldr	r2, [pc, #124]	; (8004160 <ADC_ConfigureBoostMode+0x208>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d808      	bhi.n	80040f8 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	689a      	ldr	r2, [r3, #8]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80040f4:	609a      	str	r2, [r3, #8]
}
 80040f6:	e025      	b.n	8004144 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	4a1a      	ldr	r2, [pc, #104]	; (8004164 <ADC_ConfigureBoostMode+0x20c>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d80a      	bhi.n	8004116 <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004112:	609a      	str	r2, [r3, #8]
}
 8004114:	e016      	b.n	8004144 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	4a13      	ldr	r2, [pc, #76]	; (8004168 <ADC_ConfigureBoostMode+0x210>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d80a      	bhi.n	8004134 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004130:	609a      	str	r2, [r3, #8]
}
 8004132:	e007      	b.n	8004144 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	689a      	ldr	r2, [r3, #8]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004142:	609a      	str	r2, [r3, #8]
}
 8004144:	bf00      	nop
 8004146:	3710      	adds	r7, #16
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}
 800414c:	40022000 	.word	0x40022000
 8004150:	40022100 	.word	0x40022100
 8004154:	40022300 	.word	0x40022300
 8004158:	58026300 	.word	0x58026300
 800415c:	01312d00 	.word	0x01312d00
 8004160:	005f5e10 	.word	0x005f5e10
 8004164:	00bebc20 	.word	0x00bebc20
 8004168:	017d7840 	.word	0x017d7840

0800416c <LL_ADC_IsEnabled>:
{
 800416c:	b480      	push	{r7}
 800416e:	b083      	sub	sp, #12
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	f003 0301 	and.w	r3, r3, #1
 800417c:	2b01      	cmp	r3, #1
 800417e:	d101      	bne.n	8004184 <LL_ADC_IsEnabled+0x18>
 8004180:	2301      	movs	r3, #1
 8004182:	e000      	b.n	8004186 <LL_ADC_IsEnabled+0x1a>
 8004184:	2300      	movs	r3, #0
}
 8004186:	4618      	mov	r0, r3
 8004188:	370c      	adds	r7, #12
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr

08004192 <LL_ADC_REG_IsConversionOngoing>:
{
 8004192:	b480      	push	{r7}
 8004194:	b083      	sub	sp, #12
 8004196:	af00      	add	r7, sp, #0
 8004198:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	f003 0304 	and.w	r3, r3, #4
 80041a2:	2b04      	cmp	r3, #4
 80041a4:	d101      	bne.n	80041aa <LL_ADC_REG_IsConversionOngoing+0x18>
 80041a6:	2301      	movs	r3, #1
 80041a8:	e000      	b.n	80041ac <LL_ADC_REG_IsConversionOngoing+0x1a>
 80041aa:	2300      	movs	r3, #0
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	370c      	adds	r7, #12
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr

080041b8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80041b8:	b590      	push	{r4, r7, lr}
 80041ba:	b09f      	sub	sp, #124	; 0x7c
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041c2:	2300      	movs	r3, #0
 80041c4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d101      	bne.n	80041d6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80041d2:	2302      	movs	r3, #2
 80041d4:	e0be      	b.n	8004354 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2201      	movs	r2, #1
 80041da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80041de:	2300      	movs	r3, #0
 80041e0:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80041e2:	2300      	movs	r3, #0
 80041e4:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a5c      	ldr	r2, [pc, #368]	; (800435c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d102      	bne.n	80041f6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80041f0:	4b5b      	ldr	r3, [pc, #364]	; (8004360 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80041f2:	60bb      	str	r3, [r7, #8]
 80041f4:	e001      	b.n	80041fa <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80041f6:	2300      	movs	r3, #0
 80041f8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d10b      	bne.n	8004218 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004204:	f043 0220 	orr.w	r2, r3, #32
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2200      	movs	r2, #0
 8004210:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	e09d      	b.n	8004354 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	4618      	mov	r0, r3
 800421c:	f7ff ffb9 	bl	8004192 <LL_ADC_REG_IsConversionOngoing>
 8004220:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4618      	mov	r0, r3
 8004228:	f7ff ffb3 	bl	8004192 <LL_ADC_REG_IsConversionOngoing>
 800422c:	4603      	mov	r3, r0
 800422e:	2b00      	cmp	r3, #0
 8004230:	d17f      	bne.n	8004332 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004232:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004234:	2b00      	cmp	r3, #0
 8004236:	d17c      	bne.n	8004332 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a47      	ldr	r2, [pc, #284]	; (800435c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d004      	beq.n	800424c <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a46      	ldr	r2, [pc, #280]	; (8004360 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d101      	bne.n	8004250 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 800424c:	4b45      	ldr	r3, [pc, #276]	; (8004364 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800424e:	e000      	b.n	8004252 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004250:	4b45      	ldr	r3, [pc, #276]	; (8004368 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004252:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d039      	beq.n	80042d0 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800425c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	431a      	orrs	r2, r3
 800426a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800426c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a3a      	ldr	r2, [pc, #232]	; (800435c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d004      	beq.n	8004282 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a38      	ldr	r2, [pc, #224]	; (8004360 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d10e      	bne.n	80042a0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004282:	4836      	ldr	r0, [pc, #216]	; (800435c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004284:	f7ff ff72 	bl	800416c <LL_ADC_IsEnabled>
 8004288:	4604      	mov	r4, r0
 800428a:	4835      	ldr	r0, [pc, #212]	; (8004360 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800428c:	f7ff ff6e 	bl	800416c <LL_ADC_IsEnabled>
 8004290:	4603      	mov	r3, r0
 8004292:	4323      	orrs	r3, r4
 8004294:	2b00      	cmp	r3, #0
 8004296:	bf0c      	ite	eq
 8004298:	2301      	moveq	r3, #1
 800429a:	2300      	movne	r3, #0
 800429c:	b2db      	uxtb	r3, r3
 800429e:	e008      	b.n	80042b2 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80042a0:	4832      	ldr	r0, [pc, #200]	; (800436c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80042a2:	f7ff ff63 	bl	800416c <LL_ADC_IsEnabled>
 80042a6:	4603      	mov	r3, r0
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	bf0c      	ite	eq
 80042ac:	2301      	moveq	r3, #1
 80042ae:	2300      	movne	r3, #0
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d047      	beq.n	8004346 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80042b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042b8:	689a      	ldr	r2, [r3, #8]
 80042ba:	4b2d      	ldr	r3, [pc, #180]	; (8004370 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80042bc:	4013      	ands	r3, r2
 80042be:	683a      	ldr	r2, [r7, #0]
 80042c0:	6811      	ldr	r1, [r2, #0]
 80042c2:	683a      	ldr	r2, [r7, #0]
 80042c4:	6892      	ldr	r2, [r2, #8]
 80042c6:	430a      	orrs	r2, r1
 80042c8:	431a      	orrs	r2, r3
 80042ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042cc:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80042ce:	e03a      	b.n	8004346 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80042d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80042d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042da:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a1e      	ldr	r2, [pc, #120]	; (800435c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d004      	beq.n	80042f0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a1d      	ldr	r2, [pc, #116]	; (8004360 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d10e      	bne.n	800430e <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80042f0:	481a      	ldr	r0, [pc, #104]	; (800435c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80042f2:	f7ff ff3b 	bl	800416c <LL_ADC_IsEnabled>
 80042f6:	4604      	mov	r4, r0
 80042f8:	4819      	ldr	r0, [pc, #100]	; (8004360 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80042fa:	f7ff ff37 	bl	800416c <LL_ADC_IsEnabled>
 80042fe:	4603      	mov	r3, r0
 8004300:	4323      	orrs	r3, r4
 8004302:	2b00      	cmp	r3, #0
 8004304:	bf0c      	ite	eq
 8004306:	2301      	moveq	r3, #1
 8004308:	2300      	movne	r3, #0
 800430a:	b2db      	uxtb	r3, r3
 800430c:	e008      	b.n	8004320 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800430e:	4817      	ldr	r0, [pc, #92]	; (800436c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004310:	f7ff ff2c 	bl	800416c <LL_ADC_IsEnabled>
 8004314:	4603      	mov	r3, r0
 8004316:	2b00      	cmp	r3, #0
 8004318:	bf0c      	ite	eq
 800431a:	2301      	moveq	r3, #1
 800431c:	2300      	movne	r3, #0
 800431e:	b2db      	uxtb	r3, r3
 8004320:	2b00      	cmp	r3, #0
 8004322:	d010      	beq.n	8004346 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004324:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004326:	689a      	ldr	r2, [r3, #8]
 8004328:	4b11      	ldr	r3, [pc, #68]	; (8004370 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800432a:	4013      	ands	r3, r2
 800432c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800432e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004330:	e009      	b.n	8004346 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004336:	f043 0220 	orr.w	r2, r3, #32
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004344:	e000      	b.n	8004348 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004346:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2200      	movs	r2, #0
 800434c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004350:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8004354:	4618      	mov	r0, r3
 8004356:	377c      	adds	r7, #124	; 0x7c
 8004358:	46bd      	mov	sp, r7
 800435a:	bd90      	pop	{r4, r7, pc}
 800435c:	40022000 	.word	0x40022000
 8004360:	40022100 	.word	0x40022100
 8004364:	40022300 	.word	0x40022300
 8004368:	58026300 	.word	0x58026300
 800436c:	58026000 	.word	0x58026000
 8004370:	fffff0e0 	.word	0xfffff0e0

08004374 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004374:	b480      	push	{r7}
 8004376:	b085      	sub	sp, #20
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	f003 0307 	and.w	r3, r3, #7
 8004382:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004384:	4b0b      	ldr	r3, [pc, #44]	; (80043b4 <__NVIC_SetPriorityGrouping+0x40>)
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800438a:	68ba      	ldr	r2, [r7, #8]
 800438c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004390:	4013      	ands	r3, r2
 8004392:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800439c:	4b06      	ldr	r3, [pc, #24]	; (80043b8 <__NVIC_SetPriorityGrouping+0x44>)
 800439e:	4313      	orrs	r3, r2
 80043a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80043a2:	4a04      	ldr	r2, [pc, #16]	; (80043b4 <__NVIC_SetPriorityGrouping+0x40>)
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	60d3      	str	r3, [r2, #12]
}
 80043a8:	bf00      	nop
 80043aa:	3714      	adds	r7, #20
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr
 80043b4:	e000ed00 	.word	0xe000ed00
 80043b8:	05fa0000 	.word	0x05fa0000

080043bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80043bc:	b480      	push	{r7}
 80043be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80043c0:	4b04      	ldr	r3, [pc, #16]	; (80043d4 <__NVIC_GetPriorityGrouping+0x18>)
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	0a1b      	lsrs	r3, r3, #8
 80043c6:	f003 0307 	and.w	r3, r3, #7
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr
 80043d4:	e000ed00 	.word	0xe000ed00

080043d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043d8:	b480      	push	{r7}
 80043da:	b083      	sub	sp, #12
 80043dc:	af00      	add	r7, sp, #0
 80043de:	4603      	mov	r3, r0
 80043e0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80043e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	db0b      	blt.n	8004402 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80043ea:	88fb      	ldrh	r3, [r7, #6]
 80043ec:	f003 021f 	and.w	r2, r3, #31
 80043f0:	4907      	ldr	r1, [pc, #28]	; (8004410 <__NVIC_EnableIRQ+0x38>)
 80043f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80043f6:	095b      	lsrs	r3, r3, #5
 80043f8:	2001      	movs	r0, #1
 80043fa:	fa00 f202 	lsl.w	r2, r0, r2
 80043fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004402:	bf00      	nop
 8004404:	370c      	adds	r7, #12
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr
 800440e:	bf00      	nop
 8004410:	e000e100 	.word	0xe000e100

08004414 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004414:	b480      	push	{r7}
 8004416:	b083      	sub	sp, #12
 8004418:	af00      	add	r7, sp, #0
 800441a:	4603      	mov	r3, r0
 800441c:	6039      	str	r1, [r7, #0]
 800441e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004420:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004424:	2b00      	cmp	r3, #0
 8004426:	db0a      	blt.n	800443e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	b2da      	uxtb	r2, r3
 800442c:	490c      	ldr	r1, [pc, #48]	; (8004460 <__NVIC_SetPriority+0x4c>)
 800442e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004432:	0112      	lsls	r2, r2, #4
 8004434:	b2d2      	uxtb	r2, r2
 8004436:	440b      	add	r3, r1
 8004438:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800443c:	e00a      	b.n	8004454 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	b2da      	uxtb	r2, r3
 8004442:	4908      	ldr	r1, [pc, #32]	; (8004464 <__NVIC_SetPriority+0x50>)
 8004444:	88fb      	ldrh	r3, [r7, #6]
 8004446:	f003 030f 	and.w	r3, r3, #15
 800444a:	3b04      	subs	r3, #4
 800444c:	0112      	lsls	r2, r2, #4
 800444e:	b2d2      	uxtb	r2, r2
 8004450:	440b      	add	r3, r1
 8004452:	761a      	strb	r2, [r3, #24]
}
 8004454:	bf00      	nop
 8004456:	370c      	adds	r7, #12
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr
 8004460:	e000e100 	.word	0xe000e100
 8004464:	e000ed00 	.word	0xe000ed00

08004468 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004468:	b480      	push	{r7}
 800446a:	b089      	sub	sp, #36	; 0x24
 800446c:	af00      	add	r7, sp, #0
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	60b9      	str	r1, [r7, #8]
 8004472:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f003 0307 	and.w	r3, r3, #7
 800447a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	f1c3 0307 	rsb	r3, r3, #7
 8004482:	2b04      	cmp	r3, #4
 8004484:	bf28      	it	cs
 8004486:	2304      	movcs	r3, #4
 8004488:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800448a:	69fb      	ldr	r3, [r7, #28]
 800448c:	3304      	adds	r3, #4
 800448e:	2b06      	cmp	r3, #6
 8004490:	d902      	bls.n	8004498 <NVIC_EncodePriority+0x30>
 8004492:	69fb      	ldr	r3, [r7, #28]
 8004494:	3b03      	subs	r3, #3
 8004496:	e000      	b.n	800449a <NVIC_EncodePriority+0x32>
 8004498:	2300      	movs	r3, #0
 800449a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800449c:	f04f 32ff 	mov.w	r2, #4294967295
 80044a0:	69bb      	ldr	r3, [r7, #24]
 80044a2:	fa02 f303 	lsl.w	r3, r2, r3
 80044a6:	43da      	mvns	r2, r3
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	401a      	ands	r2, r3
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80044b0:	f04f 31ff 	mov.w	r1, #4294967295
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	fa01 f303 	lsl.w	r3, r1, r3
 80044ba:	43d9      	mvns	r1, r3
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044c0:	4313      	orrs	r3, r2
         );
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3724      	adds	r7, #36	; 0x24
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr
	...

080044d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b082      	sub	sp, #8
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	3b01      	subs	r3, #1
 80044dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80044e0:	d301      	bcc.n	80044e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80044e2:	2301      	movs	r3, #1
 80044e4:	e00f      	b.n	8004506 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80044e6:	4a0a      	ldr	r2, [pc, #40]	; (8004510 <SysTick_Config+0x40>)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	3b01      	subs	r3, #1
 80044ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80044ee:	210f      	movs	r1, #15
 80044f0:	f04f 30ff 	mov.w	r0, #4294967295
 80044f4:	f7ff ff8e 	bl	8004414 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80044f8:	4b05      	ldr	r3, [pc, #20]	; (8004510 <SysTick_Config+0x40>)
 80044fa:	2200      	movs	r2, #0
 80044fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80044fe:	4b04      	ldr	r3, [pc, #16]	; (8004510 <SysTick_Config+0x40>)
 8004500:	2207      	movs	r2, #7
 8004502:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004504:	2300      	movs	r3, #0
}
 8004506:	4618      	mov	r0, r3
 8004508:	3708      	adds	r7, #8
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}
 800450e:	bf00      	nop
 8004510:	e000e010 	.word	0xe000e010

08004514 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b082      	sub	sp, #8
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f7ff ff29 	bl	8004374 <__NVIC_SetPriorityGrouping>
}
 8004522:	bf00      	nop
 8004524:	3708      	adds	r7, #8
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}

0800452a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800452a:	b580      	push	{r7, lr}
 800452c:	b086      	sub	sp, #24
 800452e:	af00      	add	r7, sp, #0
 8004530:	4603      	mov	r3, r0
 8004532:	60b9      	str	r1, [r7, #8]
 8004534:	607a      	str	r2, [r7, #4]
 8004536:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004538:	f7ff ff40 	bl	80043bc <__NVIC_GetPriorityGrouping>
 800453c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	68b9      	ldr	r1, [r7, #8]
 8004542:	6978      	ldr	r0, [r7, #20]
 8004544:	f7ff ff90 	bl	8004468 <NVIC_EncodePriority>
 8004548:	4602      	mov	r2, r0
 800454a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800454e:	4611      	mov	r1, r2
 8004550:	4618      	mov	r0, r3
 8004552:	f7ff ff5f 	bl	8004414 <__NVIC_SetPriority>
}
 8004556:	bf00      	nop
 8004558:	3718      	adds	r7, #24
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}

0800455e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800455e:	b580      	push	{r7, lr}
 8004560:	b082      	sub	sp, #8
 8004562:	af00      	add	r7, sp, #0
 8004564:	4603      	mov	r3, r0
 8004566:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004568:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800456c:	4618      	mov	r0, r3
 800456e:	f7ff ff33 	bl	80043d8 <__NVIC_EnableIRQ>
}
 8004572:	bf00      	nop
 8004574:	3708      	adds	r7, #8
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}

0800457a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800457a:	b580      	push	{r7, lr}
 800457c:	b082      	sub	sp, #8
 800457e:	af00      	add	r7, sp, #0
 8004580:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f7ff ffa4 	bl	80044d0 <SysTick_Config>
 8004588:	4603      	mov	r3, r0
}
 800458a:	4618      	mov	r0, r3
 800458c:	3708      	adds	r7, #8
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}

08004592 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004592:	b580      	push	{r7, lr}
 8004594:	b082      	sub	sp, #8
 8004596:	af00      	add	r7, sp, #0
 8004598:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d101      	bne.n	80045a4 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e014      	b.n	80045ce <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	791b      	ldrb	r3, [r3, #4]
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d105      	bne.n	80045ba <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2200      	movs	r2, #0
 80045b2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f7fd fc0d 	bl	8001dd4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2202      	movs	r2, #2
 80045be:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2200      	movs	r2, #0
 80045c4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2201      	movs	r2, #1
 80045ca:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80045cc:	2300      	movs	r3, #0
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3708      	adds	r7, #8
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
	...

080045d8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b088      	sub	sp, #32
 80045dc:	af00      	add	r7, sp, #0
 80045de:	60f8      	str	r0, [r7, #12]
 80045e0:	60b9      	str	r1, [r7, #8]
 80045e2:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	795b      	ldrb	r3, [r3, #5]
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d101      	bne.n	80045f0 <HAL_DAC_ConfigChannel+0x18>
 80045ec:	2302      	movs	r3, #2
 80045ee:	e11d      	b.n	800482c <HAL_DAC_ConfigChannel+0x254>
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2201      	movs	r2, #1
 80045f4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2202      	movs	r2, #2
 80045fa:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	2b04      	cmp	r3, #4
 8004602:	d174      	bne.n	80046ee <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004604:	f7fe fdf0 	bl	80031e8 <HAL_GetTick>
 8004608:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d134      	bne.n	800467a <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004610:	e011      	b.n	8004636 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004612:	f7fe fde9 	bl	80031e8 <HAL_GetTick>
 8004616:	4602      	mov	r2, r0
 8004618:	69bb      	ldr	r3, [r7, #24]
 800461a:	1ad3      	subs	r3, r2, r3
 800461c:	2b01      	cmp	r3, #1
 800461e:	d90a      	bls.n	8004636 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	691b      	ldr	r3, [r3, #16]
 8004624:	f043 0208 	orr.w	r2, r3, #8
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2203      	movs	r2, #3
 8004630:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8004632:	2303      	movs	r3, #3
 8004634:	e0fa      	b.n	800482c <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800463c:	4b7d      	ldr	r3, [pc, #500]	; (8004834 <HAL_DAC_ConfigChannel+0x25c>)
 800463e:	4013      	ands	r3, r2
 8004640:	2b00      	cmp	r3, #0
 8004642:	d1e6      	bne.n	8004612 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8004644:	2001      	movs	r0, #1
 8004646:	f7fe fddb 	bl	8003200 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	68ba      	ldr	r2, [r7, #8]
 8004650:	6992      	ldr	r2, [r2, #24]
 8004652:	641a      	str	r2, [r3, #64]	; 0x40
 8004654:	e01e      	b.n	8004694 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004656:	f7fe fdc7 	bl	80031e8 <HAL_GetTick>
 800465a:	4602      	mov	r2, r0
 800465c:	69bb      	ldr	r3, [r7, #24]
 800465e:	1ad3      	subs	r3, r2, r3
 8004660:	2b01      	cmp	r3, #1
 8004662:	d90a      	bls.n	800467a <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	691b      	ldr	r3, [r3, #16]
 8004668:	f043 0208 	orr.w	r2, r3, #8
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2203      	movs	r2, #3
 8004674:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8004676:	2303      	movs	r3, #3
 8004678:	e0d8      	b.n	800482c <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004680:	2b00      	cmp	r3, #0
 8004682:	dbe8      	blt.n	8004656 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8004684:	2001      	movs	r0, #1
 8004686:	f7fe fdbb 	bl	8003200 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	68ba      	ldr	r2, [r7, #8]
 8004690:	6992      	ldr	r2, [r2, #24]
 8004692:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f003 0310 	and.w	r3, r3, #16
 80046a0:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80046a4:	fa01 f303 	lsl.w	r3, r1, r3
 80046a8:	43db      	mvns	r3, r3
 80046aa:	ea02 0103 	and.w	r1, r2, r3
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	69da      	ldr	r2, [r3, #28]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f003 0310 	and.w	r3, r3, #16
 80046b8:	409a      	lsls	r2, r3
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	430a      	orrs	r2, r1
 80046c0:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f003 0310 	and.w	r3, r3, #16
 80046ce:	21ff      	movs	r1, #255	; 0xff
 80046d0:	fa01 f303 	lsl.w	r3, r1, r3
 80046d4:	43db      	mvns	r3, r3
 80046d6:	ea02 0103 	and.w	r1, r2, r3
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	6a1a      	ldr	r2, [r3, #32]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f003 0310 	and.w	r3, r3, #16
 80046e4:	409a      	lsls	r2, r3
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	430a      	orrs	r2, r1
 80046ec:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	691b      	ldr	r3, [r3, #16]
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d11d      	bne.n	8004732 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046fc:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f003 0310 	and.w	r3, r3, #16
 8004704:	221f      	movs	r2, #31
 8004706:	fa02 f303 	lsl.w	r3, r2, r3
 800470a:	43db      	mvns	r3, r3
 800470c:	697a      	ldr	r2, [r7, #20]
 800470e:	4013      	ands	r3, r2
 8004710:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	695b      	ldr	r3, [r3, #20]
 8004716:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f003 0310 	and.w	r3, r3, #16
 800471e:	693a      	ldr	r2, [r7, #16]
 8004720:	fa02 f303 	lsl.w	r3, r2, r3
 8004724:	697a      	ldr	r2, [r7, #20]
 8004726:	4313      	orrs	r3, r2
 8004728:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	697a      	ldr	r2, [r7, #20]
 8004730:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004738:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f003 0310 	and.w	r3, r3, #16
 8004740:	2207      	movs	r2, #7
 8004742:	fa02 f303 	lsl.w	r3, r2, r3
 8004746:	43db      	mvns	r3, r3
 8004748:	697a      	ldr	r2, [r7, #20]
 800474a:	4013      	ands	r3, r2
 800474c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	68db      	ldr	r3, [r3, #12]
 8004752:	2b01      	cmp	r3, #1
 8004754:	d102      	bne.n	800475c <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8004756:	2300      	movs	r3, #0
 8004758:	61fb      	str	r3, [r7, #28]
 800475a:	e00f      	b.n	800477c <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	68db      	ldr	r3, [r3, #12]
 8004760:	2b02      	cmp	r3, #2
 8004762:	d102      	bne.n	800476a <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8004764:	2301      	movs	r3, #1
 8004766:	61fb      	str	r3, [r7, #28]
 8004768:	e008      	b.n	800477c <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d102      	bne.n	8004778 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8004772:	2301      	movs	r3, #1
 8004774:	61fb      	str	r3, [r7, #28]
 8004776:	e001      	b.n	800477c <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8004778:	2300      	movs	r3, #0
 800477a:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	4313      	orrs	r3, r2
 8004786:	69fa      	ldr	r2, [r7, #28]
 8004788:	4313      	orrs	r3, r2
 800478a:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f003 0310 	and.w	r3, r3, #16
 8004792:	693a      	ldr	r2, [r7, #16]
 8004794:	fa02 f303 	lsl.w	r3, r2, r3
 8004798:	697a      	ldr	r2, [r7, #20]
 800479a:	4313      	orrs	r3, r2
 800479c:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	697a      	ldr	r2, [r7, #20]
 80047a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	6819      	ldr	r1, [r3, #0]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f003 0310 	and.w	r3, r3, #16
 80047b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80047b6:	fa02 f303 	lsl.w	r3, r2, r3
 80047ba:	43da      	mvns	r2, r3
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	400a      	ands	r2, r1
 80047c2:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f003 0310 	and.w	r3, r3, #16
 80047d2:	f640 72fe 	movw	r2, #4094	; 0xffe
 80047d6:	fa02 f303 	lsl.w	r3, r2, r3
 80047da:	43db      	mvns	r3, r3
 80047dc:	697a      	ldr	r2, [r7, #20]
 80047de:	4013      	ands	r3, r2
 80047e0:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f003 0310 	and.w	r3, r3, #16
 80047ee:	693a      	ldr	r2, [r7, #16]
 80047f0:	fa02 f303 	lsl.w	r3, r2, r3
 80047f4:	697a      	ldr	r2, [r7, #20]
 80047f6:	4313      	orrs	r3, r2
 80047f8:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	697a      	ldr	r2, [r7, #20]
 8004800:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	6819      	ldr	r1, [r3, #0]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f003 0310 	and.w	r3, r3, #16
 800480e:	22c0      	movs	r2, #192	; 0xc0
 8004810:	fa02 f303 	lsl.w	r3, r2, r3
 8004814:	43da      	mvns	r2, r3
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	400a      	ands	r2, r1
 800481c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2201      	movs	r2, #1
 8004822:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2200      	movs	r2, #0
 8004828:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800482a:	2300      	movs	r3, #0
}
 800482c:	4618      	mov	r0, r3
 800482e:	3720      	adds	r7, #32
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}
 8004834:	20008000 	.word	0x20008000

08004838 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b086      	sub	sp, #24
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004840:	f7fe fcd2 	bl	80031e8 <HAL_GetTick>
 8004844:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d101      	bne.n	8004850 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	e316      	b.n	8004e7e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a66      	ldr	r2, [pc, #408]	; (80049f0 <HAL_DMA_Init+0x1b8>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d04a      	beq.n	80048f0 <HAL_DMA_Init+0xb8>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a65      	ldr	r2, [pc, #404]	; (80049f4 <HAL_DMA_Init+0x1bc>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d045      	beq.n	80048f0 <HAL_DMA_Init+0xb8>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a63      	ldr	r2, [pc, #396]	; (80049f8 <HAL_DMA_Init+0x1c0>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d040      	beq.n	80048f0 <HAL_DMA_Init+0xb8>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a62      	ldr	r2, [pc, #392]	; (80049fc <HAL_DMA_Init+0x1c4>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d03b      	beq.n	80048f0 <HAL_DMA_Init+0xb8>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a60      	ldr	r2, [pc, #384]	; (8004a00 <HAL_DMA_Init+0x1c8>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d036      	beq.n	80048f0 <HAL_DMA_Init+0xb8>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a5f      	ldr	r2, [pc, #380]	; (8004a04 <HAL_DMA_Init+0x1cc>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d031      	beq.n	80048f0 <HAL_DMA_Init+0xb8>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a5d      	ldr	r2, [pc, #372]	; (8004a08 <HAL_DMA_Init+0x1d0>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d02c      	beq.n	80048f0 <HAL_DMA_Init+0xb8>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a5c      	ldr	r2, [pc, #368]	; (8004a0c <HAL_DMA_Init+0x1d4>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d027      	beq.n	80048f0 <HAL_DMA_Init+0xb8>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a5a      	ldr	r2, [pc, #360]	; (8004a10 <HAL_DMA_Init+0x1d8>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d022      	beq.n	80048f0 <HAL_DMA_Init+0xb8>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a59      	ldr	r2, [pc, #356]	; (8004a14 <HAL_DMA_Init+0x1dc>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d01d      	beq.n	80048f0 <HAL_DMA_Init+0xb8>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a57      	ldr	r2, [pc, #348]	; (8004a18 <HAL_DMA_Init+0x1e0>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d018      	beq.n	80048f0 <HAL_DMA_Init+0xb8>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a56      	ldr	r2, [pc, #344]	; (8004a1c <HAL_DMA_Init+0x1e4>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d013      	beq.n	80048f0 <HAL_DMA_Init+0xb8>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a54      	ldr	r2, [pc, #336]	; (8004a20 <HAL_DMA_Init+0x1e8>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d00e      	beq.n	80048f0 <HAL_DMA_Init+0xb8>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a53      	ldr	r2, [pc, #332]	; (8004a24 <HAL_DMA_Init+0x1ec>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d009      	beq.n	80048f0 <HAL_DMA_Init+0xb8>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a51      	ldr	r2, [pc, #324]	; (8004a28 <HAL_DMA_Init+0x1f0>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d004      	beq.n	80048f0 <HAL_DMA_Init+0xb8>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a50      	ldr	r2, [pc, #320]	; (8004a2c <HAL_DMA_Init+0x1f4>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d101      	bne.n	80048f4 <HAL_DMA_Init+0xbc>
 80048f0:	2301      	movs	r3, #1
 80048f2:	e000      	b.n	80048f6 <HAL_DMA_Init+0xbe>
 80048f4:	2300      	movs	r3, #0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	f000 813b 	beq.w	8004b72 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2200      	movs	r2, #0
 8004900:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2202      	movs	r2, #2
 8004908:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a37      	ldr	r2, [pc, #220]	; (80049f0 <HAL_DMA_Init+0x1b8>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d04a      	beq.n	80049ac <HAL_DMA_Init+0x174>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a36      	ldr	r2, [pc, #216]	; (80049f4 <HAL_DMA_Init+0x1bc>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d045      	beq.n	80049ac <HAL_DMA_Init+0x174>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a34      	ldr	r2, [pc, #208]	; (80049f8 <HAL_DMA_Init+0x1c0>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d040      	beq.n	80049ac <HAL_DMA_Init+0x174>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a33      	ldr	r2, [pc, #204]	; (80049fc <HAL_DMA_Init+0x1c4>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d03b      	beq.n	80049ac <HAL_DMA_Init+0x174>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a31      	ldr	r2, [pc, #196]	; (8004a00 <HAL_DMA_Init+0x1c8>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d036      	beq.n	80049ac <HAL_DMA_Init+0x174>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a30      	ldr	r2, [pc, #192]	; (8004a04 <HAL_DMA_Init+0x1cc>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d031      	beq.n	80049ac <HAL_DMA_Init+0x174>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a2e      	ldr	r2, [pc, #184]	; (8004a08 <HAL_DMA_Init+0x1d0>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d02c      	beq.n	80049ac <HAL_DMA_Init+0x174>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a2d      	ldr	r2, [pc, #180]	; (8004a0c <HAL_DMA_Init+0x1d4>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d027      	beq.n	80049ac <HAL_DMA_Init+0x174>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a2b      	ldr	r2, [pc, #172]	; (8004a10 <HAL_DMA_Init+0x1d8>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d022      	beq.n	80049ac <HAL_DMA_Init+0x174>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a2a      	ldr	r2, [pc, #168]	; (8004a14 <HAL_DMA_Init+0x1dc>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d01d      	beq.n	80049ac <HAL_DMA_Init+0x174>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a28      	ldr	r2, [pc, #160]	; (8004a18 <HAL_DMA_Init+0x1e0>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d018      	beq.n	80049ac <HAL_DMA_Init+0x174>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a27      	ldr	r2, [pc, #156]	; (8004a1c <HAL_DMA_Init+0x1e4>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d013      	beq.n	80049ac <HAL_DMA_Init+0x174>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a25      	ldr	r2, [pc, #148]	; (8004a20 <HAL_DMA_Init+0x1e8>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d00e      	beq.n	80049ac <HAL_DMA_Init+0x174>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a24      	ldr	r2, [pc, #144]	; (8004a24 <HAL_DMA_Init+0x1ec>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d009      	beq.n	80049ac <HAL_DMA_Init+0x174>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a22      	ldr	r2, [pc, #136]	; (8004a28 <HAL_DMA_Init+0x1f0>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d004      	beq.n	80049ac <HAL_DMA_Init+0x174>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a21      	ldr	r2, [pc, #132]	; (8004a2c <HAL_DMA_Init+0x1f4>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d108      	bne.n	80049be <HAL_DMA_Init+0x186>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f022 0201 	bic.w	r2, r2, #1
 80049ba:	601a      	str	r2, [r3, #0]
 80049bc:	e007      	b.n	80049ce <HAL_DMA_Init+0x196>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f022 0201 	bic.w	r2, r2, #1
 80049cc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80049ce:	e02f      	b.n	8004a30 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80049d0:	f7fe fc0a 	bl	80031e8 <HAL_GetTick>
 80049d4:	4602      	mov	r2, r0
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	2b05      	cmp	r3, #5
 80049dc:	d928      	bls.n	8004a30 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2220      	movs	r2, #32
 80049e2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2203      	movs	r2, #3
 80049e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	e246      	b.n	8004e7e <HAL_DMA_Init+0x646>
 80049f0:	40020010 	.word	0x40020010
 80049f4:	40020028 	.word	0x40020028
 80049f8:	40020040 	.word	0x40020040
 80049fc:	40020058 	.word	0x40020058
 8004a00:	40020070 	.word	0x40020070
 8004a04:	40020088 	.word	0x40020088
 8004a08:	400200a0 	.word	0x400200a0
 8004a0c:	400200b8 	.word	0x400200b8
 8004a10:	40020410 	.word	0x40020410
 8004a14:	40020428 	.word	0x40020428
 8004a18:	40020440 	.word	0x40020440
 8004a1c:	40020458 	.word	0x40020458
 8004a20:	40020470 	.word	0x40020470
 8004a24:	40020488 	.word	0x40020488
 8004a28:	400204a0 	.word	0x400204a0
 8004a2c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 0301 	and.w	r3, r3, #1
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d1c8      	bne.n	80049d0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004a46:	697a      	ldr	r2, [r7, #20]
 8004a48:	4b83      	ldr	r3, [pc, #524]	; (8004c58 <HAL_DMA_Init+0x420>)
 8004a4a:	4013      	ands	r3, r2
 8004a4c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004a56:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	691b      	ldr	r3, [r3, #16]
 8004a5c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a62:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	699b      	ldr	r3, [r3, #24]
 8004a68:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a6e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6a1b      	ldr	r3, [r3, #32]
 8004a74:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004a76:	697a      	ldr	r2, [r7, #20]
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a80:	2b04      	cmp	r3, #4
 8004a82:	d107      	bne.n	8004a94 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	697a      	ldr	r2, [r7, #20]
 8004a90:	4313      	orrs	r3, r2
 8004a92:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004a94:	4b71      	ldr	r3, [pc, #452]	; (8004c5c <HAL_DMA_Init+0x424>)
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	4b71      	ldr	r3, [pc, #452]	; (8004c60 <HAL_DMA_Init+0x428>)
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004aa0:	d328      	bcc.n	8004af4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	2b28      	cmp	r3, #40	; 0x28
 8004aa8:	d903      	bls.n	8004ab2 <HAL_DMA_Init+0x27a>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	2b2e      	cmp	r3, #46	; 0x2e
 8004ab0:	d917      	bls.n	8004ae2 <HAL_DMA_Init+0x2aa>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	2b3e      	cmp	r3, #62	; 0x3e
 8004ab8:	d903      	bls.n	8004ac2 <HAL_DMA_Init+0x28a>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	2b42      	cmp	r3, #66	; 0x42
 8004ac0:	d90f      	bls.n	8004ae2 <HAL_DMA_Init+0x2aa>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	2b46      	cmp	r3, #70	; 0x46
 8004ac8:	d903      	bls.n	8004ad2 <HAL_DMA_Init+0x29a>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	2b48      	cmp	r3, #72	; 0x48
 8004ad0:	d907      	bls.n	8004ae2 <HAL_DMA_Init+0x2aa>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	2b4e      	cmp	r3, #78	; 0x4e
 8004ad8:	d905      	bls.n	8004ae6 <HAL_DMA_Init+0x2ae>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	2b52      	cmp	r3, #82	; 0x52
 8004ae0:	d801      	bhi.n	8004ae6 <HAL_DMA_Init+0x2ae>
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e000      	b.n	8004ae8 <HAL_DMA_Init+0x2b0>
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d003      	beq.n	8004af4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004af2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	697a      	ldr	r2, [r7, #20]
 8004afa:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	695b      	ldr	r3, [r3, #20]
 8004b02:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	f023 0307 	bic.w	r3, r3, #7
 8004b0a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b10:	697a      	ldr	r2, [r7, #20]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1a:	2b04      	cmp	r3, #4
 8004b1c:	d117      	bne.n	8004b4e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b22:	697a      	ldr	r2, [r7, #20]
 8004b24:	4313      	orrs	r3, r2
 8004b26:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d00e      	beq.n	8004b4e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	f001 f9b9 	bl	8005ea8 <DMA_CheckFifoParam>
 8004b36:	4603      	mov	r3, r0
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d008      	beq.n	8004b4e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2240      	movs	r2, #64	; 0x40
 8004b40:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2201      	movs	r2, #1
 8004b46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e197      	b.n	8004e7e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	697a      	ldr	r2, [r7, #20]
 8004b54:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f001 f8f4 	bl	8005d44 <DMA_CalcBaseAndBitshift>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b64:	f003 031f 	and.w	r3, r3, #31
 8004b68:	223f      	movs	r2, #63	; 0x3f
 8004b6a:	409a      	lsls	r2, r3
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	609a      	str	r2, [r3, #8]
 8004b70:	e0cd      	b.n	8004d0e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a3b      	ldr	r2, [pc, #236]	; (8004c64 <HAL_DMA_Init+0x42c>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d022      	beq.n	8004bc2 <HAL_DMA_Init+0x38a>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a39      	ldr	r2, [pc, #228]	; (8004c68 <HAL_DMA_Init+0x430>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d01d      	beq.n	8004bc2 <HAL_DMA_Init+0x38a>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a38      	ldr	r2, [pc, #224]	; (8004c6c <HAL_DMA_Init+0x434>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d018      	beq.n	8004bc2 <HAL_DMA_Init+0x38a>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a36      	ldr	r2, [pc, #216]	; (8004c70 <HAL_DMA_Init+0x438>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d013      	beq.n	8004bc2 <HAL_DMA_Init+0x38a>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a35      	ldr	r2, [pc, #212]	; (8004c74 <HAL_DMA_Init+0x43c>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d00e      	beq.n	8004bc2 <HAL_DMA_Init+0x38a>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a33      	ldr	r2, [pc, #204]	; (8004c78 <HAL_DMA_Init+0x440>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d009      	beq.n	8004bc2 <HAL_DMA_Init+0x38a>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a32      	ldr	r2, [pc, #200]	; (8004c7c <HAL_DMA_Init+0x444>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d004      	beq.n	8004bc2 <HAL_DMA_Init+0x38a>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a30      	ldr	r2, [pc, #192]	; (8004c80 <HAL_DMA_Init+0x448>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d101      	bne.n	8004bc6 <HAL_DMA_Init+0x38e>
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e000      	b.n	8004bc8 <HAL_DMA_Init+0x390>
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	f000 8097 	beq.w	8004cfc <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a24      	ldr	r2, [pc, #144]	; (8004c64 <HAL_DMA_Init+0x42c>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d021      	beq.n	8004c1c <HAL_DMA_Init+0x3e4>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a22      	ldr	r2, [pc, #136]	; (8004c68 <HAL_DMA_Init+0x430>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d01c      	beq.n	8004c1c <HAL_DMA_Init+0x3e4>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a21      	ldr	r2, [pc, #132]	; (8004c6c <HAL_DMA_Init+0x434>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d017      	beq.n	8004c1c <HAL_DMA_Init+0x3e4>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a1f      	ldr	r2, [pc, #124]	; (8004c70 <HAL_DMA_Init+0x438>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d012      	beq.n	8004c1c <HAL_DMA_Init+0x3e4>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a1e      	ldr	r2, [pc, #120]	; (8004c74 <HAL_DMA_Init+0x43c>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d00d      	beq.n	8004c1c <HAL_DMA_Init+0x3e4>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a1c      	ldr	r2, [pc, #112]	; (8004c78 <HAL_DMA_Init+0x440>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d008      	beq.n	8004c1c <HAL_DMA_Init+0x3e4>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a1b      	ldr	r2, [pc, #108]	; (8004c7c <HAL_DMA_Init+0x444>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d003      	beq.n	8004c1c <HAL_DMA_Init+0x3e4>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a19      	ldr	r2, [pc, #100]	; (8004c80 <HAL_DMA_Init+0x448>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2202      	movs	r2, #2
 8004c2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004c36:	697a      	ldr	r2, [r7, #20]
 8004c38:	4b12      	ldr	r3, [pc, #72]	; (8004c84 <HAL_DMA_Init+0x44c>)
 8004c3a:	4013      	ands	r3, r2
 8004c3c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	2b40      	cmp	r3, #64	; 0x40
 8004c44:	d020      	beq.n	8004c88 <HAL_DMA_Init+0x450>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	2b80      	cmp	r3, #128	; 0x80
 8004c4c:	d102      	bne.n	8004c54 <HAL_DMA_Init+0x41c>
 8004c4e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004c52:	e01a      	b.n	8004c8a <HAL_DMA_Init+0x452>
 8004c54:	2300      	movs	r3, #0
 8004c56:	e018      	b.n	8004c8a <HAL_DMA_Init+0x452>
 8004c58:	fe10803f 	.word	0xfe10803f
 8004c5c:	5c001000 	.word	0x5c001000
 8004c60:	ffff0000 	.word	0xffff0000
 8004c64:	58025408 	.word	0x58025408
 8004c68:	5802541c 	.word	0x5802541c
 8004c6c:	58025430 	.word	0x58025430
 8004c70:	58025444 	.word	0x58025444
 8004c74:	58025458 	.word	0x58025458
 8004c78:	5802546c 	.word	0x5802546c
 8004c7c:	58025480 	.word	0x58025480
 8004c80:	58025494 	.word	0x58025494
 8004c84:	fffe000f 	.word	0xfffe000f
 8004c88:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	68d2      	ldr	r2, [r2, #12]
 8004c8e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004c90:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	691b      	ldr	r3, [r3, #16]
 8004c96:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004c98:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	695b      	ldr	r3, [r3, #20]
 8004c9e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004ca0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	699b      	ldr	r3, [r3, #24]
 8004ca6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004ca8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	69db      	ldr	r3, [r3, #28]
 8004cae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004cb0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6a1b      	ldr	r3, [r3, #32]
 8004cb6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004cb8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004cba:	697a      	ldr	r2, [r7, #20]
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	697a      	ldr	r2, [r7, #20]
 8004cc6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	461a      	mov	r2, r3
 8004cce:	4b6e      	ldr	r3, [pc, #440]	; (8004e88 <HAL_DMA_Init+0x650>)
 8004cd0:	4413      	add	r3, r2
 8004cd2:	4a6e      	ldr	r2, [pc, #440]	; (8004e8c <HAL_DMA_Init+0x654>)
 8004cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8004cd8:	091b      	lsrs	r3, r3, #4
 8004cda:	009a      	lsls	r2, r3, #2
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f001 f82f 	bl	8005d44 <DMA_CalcBaseAndBitshift>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cee:	f003 031f 	and.w	r3, r3, #31
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	409a      	lsls	r2, r3
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	605a      	str	r2, [r3, #4]
 8004cfa:	e008      	b.n	8004d0e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2240      	movs	r2, #64	; 0x40
 8004d00:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2203      	movs	r2, #3
 8004d06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e0b7      	b.n	8004e7e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a5f      	ldr	r2, [pc, #380]	; (8004e90 <HAL_DMA_Init+0x658>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d072      	beq.n	8004dfe <HAL_DMA_Init+0x5c6>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a5d      	ldr	r2, [pc, #372]	; (8004e94 <HAL_DMA_Init+0x65c>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d06d      	beq.n	8004dfe <HAL_DMA_Init+0x5c6>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a5c      	ldr	r2, [pc, #368]	; (8004e98 <HAL_DMA_Init+0x660>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d068      	beq.n	8004dfe <HAL_DMA_Init+0x5c6>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a5a      	ldr	r2, [pc, #360]	; (8004e9c <HAL_DMA_Init+0x664>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d063      	beq.n	8004dfe <HAL_DMA_Init+0x5c6>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a59      	ldr	r2, [pc, #356]	; (8004ea0 <HAL_DMA_Init+0x668>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d05e      	beq.n	8004dfe <HAL_DMA_Init+0x5c6>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a57      	ldr	r2, [pc, #348]	; (8004ea4 <HAL_DMA_Init+0x66c>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d059      	beq.n	8004dfe <HAL_DMA_Init+0x5c6>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a56      	ldr	r2, [pc, #344]	; (8004ea8 <HAL_DMA_Init+0x670>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d054      	beq.n	8004dfe <HAL_DMA_Init+0x5c6>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a54      	ldr	r2, [pc, #336]	; (8004eac <HAL_DMA_Init+0x674>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d04f      	beq.n	8004dfe <HAL_DMA_Init+0x5c6>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a53      	ldr	r2, [pc, #332]	; (8004eb0 <HAL_DMA_Init+0x678>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d04a      	beq.n	8004dfe <HAL_DMA_Init+0x5c6>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a51      	ldr	r2, [pc, #324]	; (8004eb4 <HAL_DMA_Init+0x67c>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d045      	beq.n	8004dfe <HAL_DMA_Init+0x5c6>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a50      	ldr	r2, [pc, #320]	; (8004eb8 <HAL_DMA_Init+0x680>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d040      	beq.n	8004dfe <HAL_DMA_Init+0x5c6>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a4e      	ldr	r2, [pc, #312]	; (8004ebc <HAL_DMA_Init+0x684>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d03b      	beq.n	8004dfe <HAL_DMA_Init+0x5c6>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a4d      	ldr	r2, [pc, #308]	; (8004ec0 <HAL_DMA_Init+0x688>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d036      	beq.n	8004dfe <HAL_DMA_Init+0x5c6>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a4b      	ldr	r2, [pc, #300]	; (8004ec4 <HAL_DMA_Init+0x68c>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d031      	beq.n	8004dfe <HAL_DMA_Init+0x5c6>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a4a      	ldr	r2, [pc, #296]	; (8004ec8 <HAL_DMA_Init+0x690>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d02c      	beq.n	8004dfe <HAL_DMA_Init+0x5c6>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a48      	ldr	r2, [pc, #288]	; (8004ecc <HAL_DMA_Init+0x694>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d027      	beq.n	8004dfe <HAL_DMA_Init+0x5c6>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a47      	ldr	r2, [pc, #284]	; (8004ed0 <HAL_DMA_Init+0x698>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d022      	beq.n	8004dfe <HAL_DMA_Init+0x5c6>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a45      	ldr	r2, [pc, #276]	; (8004ed4 <HAL_DMA_Init+0x69c>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d01d      	beq.n	8004dfe <HAL_DMA_Init+0x5c6>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a44      	ldr	r2, [pc, #272]	; (8004ed8 <HAL_DMA_Init+0x6a0>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d018      	beq.n	8004dfe <HAL_DMA_Init+0x5c6>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a42      	ldr	r2, [pc, #264]	; (8004edc <HAL_DMA_Init+0x6a4>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d013      	beq.n	8004dfe <HAL_DMA_Init+0x5c6>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a41      	ldr	r2, [pc, #260]	; (8004ee0 <HAL_DMA_Init+0x6a8>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d00e      	beq.n	8004dfe <HAL_DMA_Init+0x5c6>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a3f      	ldr	r2, [pc, #252]	; (8004ee4 <HAL_DMA_Init+0x6ac>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d009      	beq.n	8004dfe <HAL_DMA_Init+0x5c6>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a3e      	ldr	r2, [pc, #248]	; (8004ee8 <HAL_DMA_Init+0x6b0>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d004      	beq.n	8004dfe <HAL_DMA_Init+0x5c6>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a3c      	ldr	r2, [pc, #240]	; (8004eec <HAL_DMA_Init+0x6b4>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d101      	bne.n	8004e02 <HAL_DMA_Init+0x5ca>
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e000      	b.n	8004e04 <HAL_DMA_Init+0x5cc>
 8004e02:	2300      	movs	r3, #0
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d032      	beq.n	8004e6e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f001 f8c9 	bl	8005fa0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	2b80      	cmp	r3, #128	; 0x80
 8004e14:	d102      	bne.n	8004e1c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	685a      	ldr	r2, [r3, #4]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e24:	b2d2      	uxtb	r2, r2
 8004e26:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e2c:	687a      	ldr	r2, [r7, #4]
 8004e2e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004e30:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d010      	beq.n	8004e5c <HAL_DMA_Init+0x624>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	2b08      	cmp	r3, #8
 8004e40:	d80c      	bhi.n	8004e5c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f001 f946 	bl	80060d4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e54:	687a      	ldr	r2, [r7, #4]
 8004e56:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004e58:	605a      	str	r2, [r3, #4]
 8004e5a:	e008      	b.n	8004e6e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2201      	movs	r2, #1
 8004e78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004e7c:	2300      	movs	r3, #0
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3718      	adds	r7, #24
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
 8004e86:	bf00      	nop
 8004e88:	a7fdabf8 	.word	0xa7fdabf8
 8004e8c:	cccccccd 	.word	0xcccccccd
 8004e90:	40020010 	.word	0x40020010
 8004e94:	40020028 	.word	0x40020028
 8004e98:	40020040 	.word	0x40020040
 8004e9c:	40020058 	.word	0x40020058
 8004ea0:	40020070 	.word	0x40020070
 8004ea4:	40020088 	.word	0x40020088
 8004ea8:	400200a0 	.word	0x400200a0
 8004eac:	400200b8 	.word	0x400200b8
 8004eb0:	40020410 	.word	0x40020410
 8004eb4:	40020428 	.word	0x40020428
 8004eb8:	40020440 	.word	0x40020440
 8004ebc:	40020458 	.word	0x40020458
 8004ec0:	40020470 	.word	0x40020470
 8004ec4:	40020488 	.word	0x40020488
 8004ec8:	400204a0 	.word	0x400204a0
 8004ecc:	400204b8 	.word	0x400204b8
 8004ed0:	58025408 	.word	0x58025408
 8004ed4:	5802541c 	.word	0x5802541c
 8004ed8:	58025430 	.word	0x58025430
 8004edc:	58025444 	.word	0x58025444
 8004ee0:	58025458 	.word	0x58025458
 8004ee4:	5802546c 	.word	0x5802546c
 8004ee8:	58025480 	.word	0x58025480
 8004eec:	58025494 	.word	0x58025494

08004ef0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b08a      	sub	sp, #40	; 0x28
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004efc:	4b67      	ldr	r3, [pc, #412]	; (800509c <HAL_DMA_IRQHandler+0x1ac>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a67      	ldr	r2, [pc, #412]	; (80050a0 <HAL_DMA_IRQHandler+0x1b0>)
 8004f02:	fba2 2303 	umull	r2, r3, r2, r3
 8004f06:	0a9b      	lsrs	r3, r3, #10
 8004f08:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f0e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f14:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004f16:	6a3b      	ldr	r3, [r7, #32]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004f1c:	69fb      	ldr	r3, [r7, #28]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a5f      	ldr	r2, [pc, #380]	; (80050a4 <HAL_DMA_IRQHandler+0x1b4>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d04a      	beq.n	8004fc2 <HAL_DMA_IRQHandler+0xd2>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a5d      	ldr	r2, [pc, #372]	; (80050a8 <HAL_DMA_IRQHandler+0x1b8>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d045      	beq.n	8004fc2 <HAL_DMA_IRQHandler+0xd2>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a5c      	ldr	r2, [pc, #368]	; (80050ac <HAL_DMA_IRQHandler+0x1bc>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d040      	beq.n	8004fc2 <HAL_DMA_IRQHandler+0xd2>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a5a      	ldr	r2, [pc, #360]	; (80050b0 <HAL_DMA_IRQHandler+0x1c0>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d03b      	beq.n	8004fc2 <HAL_DMA_IRQHandler+0xd2>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a59      	ldr	r2, [pc, #356]	; (80050b4 <HAL_DMA_IRQHandler+0x1c4>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d036      	beq.n	8004fc2 <HAL_DMA_IRQHandler+0xd2>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a57      	ldr	r2, [pc, #348]	; (80050b8 <HAL_DMA_IRQHandler+0x1c8>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d031      	beq.n	8004fc2 <HAL_DMA_IRQHandler+0xd2>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a56      	ldr	r2, [pc, #344]	; (80050bc <HAL_DMA_IRQHandler+0x1cc>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d02c      	beq.n	8004fc2 <HAL_DMA_IRQHandler+0xd2>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a54      	ldr	r2, [pc, #336]	; (80050c0 <HAL_DMA_IRQHandler+0x1d0>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d027      	beq.n	8004fc2 <HAL_DMA_IRQHandler+0xd2>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a53      	ldr	r2, [pc, #332]	; (80050c4 <HAL_DMA_IRQHandler+0x1d4>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d022      	beq.n	8004fc2 <HAL_DMA_IRQHandler+0xd2>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a51      	ldr	r2, [pc, #324]	; (80050c8 <HAL_DMA_IRQHandler+0x1d8>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d01d      	beq.n	8004fc2 <HAL_DMA_IRQHandler+0xd2>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a50      	ldr	r2, [pc, #320]	; (80050cc <HAL_DMA_IRQHandler+0x1dc>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d018      	beq.n	8004fc2 <HAL_DMA_IRQHandler+0xd2>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a4e      	ldr	r2, [pc, #312]	; (80050d0 <HAL_DMA_IRQHandler+0x1e0>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d013      	beq.n	8004fc2 <HAL_DMA_IRQHandler+0xd2>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a4d      	ldr	r2, [pc, #308]	; (80050d4 <HAL_DMA_IRQHandler+0x1e4>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d00e      	beq.n	8004fc2 <HAL_DMA_IRQHandler+0xd2>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a4b      	ldr	r2, [pc, #300]	; (80050d8 <HAL_DMA_IRQHandler+0x1e8>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d009      	beq.n	8004fc2 <HAL_DMA_IRQHandler+0xd2>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a4a      	ldr	r2, [pc, #296]	; (80050dc <HAL_DMA_IRQHandler+0x1ec>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d004      	beq.n	8004fc2 <HAL_DMA_IRQHandler+0xd2>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a48      	ldr	r2, [pc, #288]	; (80050e0 <HAL_DMA_IRQHandler+0x1f0>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d101      	bne.n	8004fc6 <HAL_DMA_IRQHandler+0xd6>
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e000      	b.n	8004fc8 <HAL_DMA_IRQHandler+0xd8>
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	f000 842b 	beq.w	8005824 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fd2:	f003 031f 	and.w	r3, r3, #31
 8004fd6:	2208      	movs	r2, #8
 8004fd8:	409a      	lsls	r2, r3
 8004fda:	69bb      	ldr	r3, [r7, #24]
 8004fdc:	4013      	ands	r3, r2
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	f000 80a2 	beq.w	8005128 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a2e      	ldr	r2, [pc, #184]	; (80050a4 <HAL_DMA_IRQHandler+0x1b4>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d04a      	beq.n	8005084 <HAL_DMA_IRQHandler+0x194>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a2d      	ldr	r2, [pc, #180]	; (80050a8 <HAL_DMA_IRQHandler+0x1b8>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d045      	beq.n	8005084 <HAL_DMA_IRQHandler+0x194>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a2b      	ldr	r2, [pc, #172]	; (80050ac <HAL_DMA_IRQHandler+0x1bc>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d040      	beq.n	8005084 <HAL_DMA_IRQHandler+0x194>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a2a      	ldr	r2, [pc, #168]	; (80050b0 <HAL_DMA_IRQHandler+0x1c0>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d03b      	beq.n	8005084 <HAL_DMA_IRQHandler+0x194>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a28      	ldr	r2, [pc, #160]	; (80050b4 <HAL_DMA_IRQHandler+0x1c4>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d036      	beq.n	8005084 <HAL_DMA_IRQHandler+0x194>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a27      	ldr	r2, [pc, #156]	; (80050b8 <HAL_DMA_IRQHandler+0x1c8>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d031      	beq.n	8005084 <HAL_DMA_IRQHandler+0x194>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a25      	ldr	r2, [pc, #148]	; (80050bc <HAL_DMA_IRQHandler+0x1cc>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d02c      	beq.n	8005084 <HAL_DMA_IRQHandler+0x194>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a24      	ldr	r2, [pc, #144]	; (80050c0 <HAL_DMA_IRQHandler+0x1d0>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d027      	beq.n	8005084 <HAL_DMA_IRQHandler+0x194>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a22      	ldr	r2, [pc, #136]	; (80050c4 <HAL_DMA_IRQHandler+0x1d4>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d022      	beq.n	8005084 <HAL_DMA_IRQHandler+0x194>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a21      	ldr	r2, [pc, #132]	; (80050c8 <HAL_DMA_IRQHandler+0x1d8>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d01d      	beq.n	8005084 <HAL_DMA_IRQHandler+0x194>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a1f      	ldr	r2, [pc, #124]	; (80050cc <HAL_DMA_IRQHandler+0x1dc>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d018      	beq.n	8005084 <HAL_DMA_IRQHandler+0x194>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a1e      	ldr	r2, [pc, #120]	; (80050d0 <HAL_DMA_IRQHandler+0x1e0>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d013      	beq.n	8005084 <HAL_DMA_IRQHandler+0x194>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a1c      	ldr	r2, [pc, #112]	; (80050d4 <HAL_DMA_IRQHandler+0x1e4>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d00e      	beq.n	8005084 <HAL_DMA_IRQHandler+0x194>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a1b      	ldr	r2, [pc, #108]	; (80050d8 <HAL_DMA_IRQHandler+0x1e8>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d009      	beq.n	8005084 <HAL_DMA_IRQHandler+0x194>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a19      	ldr	r2, [pc, #100]	; (80050dc <HAL_DMA_IRQHandler+0x1ec>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d004      	beq.n	8005084 <HAL_DMA_IRQHandler+0x194>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a18      	ldr	r2, [pc, #96]	; (80050e0 <HAL_DMA_IRQHandler+0x1f0>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d12f      	bne.n	80050e4 <HAL_DMA_IRQHandler+0x1f4>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f003 0304 	and.w	r3, r3, #4
 800508e:	2b00      	cmp	r3, #0
 8005090:	bf14      	ite	ne
 8005092:	2301      	movne	r3, #1
 8005094:	2300      	moveq	r3, #0
 8005096:	b2db      	uxtb	r3, r3
 8005098:	e02e      	b.n	80050f8 <HAL_DMA_IRQHandler+0x208>
 800509a:	bf00      	nop
 800509c:	24000000 	.word	0x24000000
 80050a0:	1b4e81b5 	.word	0x1b4e81b5
 80050a4:	40020010 	.word	0x40020010
 80050a8:	40020028 	.word	0x40020028
 80050ac:	40020040 	.word	0x40020040
 80050b0:	40020058 	.word	0x40020058
 80050b4:	40020070 	.word	0x40020070
 80050b8:	40020088 	.word	0x40020088
 80050bc:	400200a0 	.word	0x400200a0
 80050c0:	400200b8 	.word	0x400200b8
 80050c4:	40020410 	.word	0x40020410
 80050c8:	40020428 	.word	0x40020428
 80050cc:	40020440 	.word	0x40020440
 80050d0:	40020458 	.word	0x40020458
 80050d4:	40020470 	.word	0x40020470
 80050d8:	40020488 	.word	0x40020488
 80050dc:	400204a0 	.word	0x400204a0
 80050e0:	400204b8 	.word	0x400204b8
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f003 0308 	and.w	r3, r3, #8
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	bf14      	ite	ne
 80050f2:	2301      	movne	r3, #1
 80050f4:	2300      	moveq	r3, #0
 80050f6:	b2db      	uxtb	r3, r3
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d015      	beq.n	8005128 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f022 0204 	bic.w	r2, r2, #4
 800510a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005110:	f003 031f 	and.w	r3, r3, #31
 8005114:	2208      	movs	r2, #8
 8005116:	409a      	lsls	r2, r3
 8005118:	6a3b      	ldr	r3, [r7, #32]
 800511a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005120:	f043 0201 	orr.w	r2, r3, #1
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800512c:	f003 031f 	and.w	r3, r3, #31
 8005130:	69ba      	ldr	r2, [r7, #24]
 8005132:	fa22 f303 	lsr.w	r3, r2, r3
 8005136:	f003 0301 	and.w	r3, r3, #1
 800513a:	2b00      	cmp	r3, #0
 800513c:	d06e      	beq.n	800521c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a69      	ldr	r2, [pc, #420]	; (80052e8 <HAL_DMA_IRQHandler+0x3f8>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d04a      	beq.n	80051de <HAL_DMA_IRQHandler+0x2ee>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a67      	ldr	r2, [pc, #412]	; (80052ec <HAL_DMA_IRQHandler+0x3fc>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d045      	beq.n	80051de <HAL_DMA_IRQHandler+0x2ee>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a66      	ldr	r2, [pc, #408]	; (80052f0 <HAL_DMA_IRQHandler+0x400>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d040      	beq.n	80051de <HAL_DMA_IRQHandler+0x2ee>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a64      	ldr	r2, [pc, #400]	; (80052f4 <HAL_DMA_IRQHandler+0x404>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d03b      	beq.n	80051de <HAL_DMA_IRQHandler+0x2ee>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a63      	ldr	r2, [pc, #396]	; (80052f8 <HAL_DMA_IRQHandler+0x408>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d036      	beq.n	80051de <HAL_DMA_IRQHandler+0x2ee>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a61      	ldr	r2, [pc, #388]	; (80052fc <HAL_DMA_IRQHandler+0x40c>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d031      	beq.n	80051de <HAL_DMA_IRQHandler+0x2ee>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a60      	ldr	r2, [pc, #384]	; (8005300 <HAL_DMA_IRQHandler+0x410>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d02c      	beq.n	80051de <HAL_DMA_IRQHandler+0x2ee>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a5e      	ldr	r2, [pc, #376]	; (8005304 <HAL_DMA_IRQHandler+0x414>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d027      	beq.n	80051de <HAL_DMA_IRQHandler+0x2ee>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a5d      	ldr	r2, [pc, #372]	; (8005308 <HAL_DMA_IRQHandler+0x418>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d022      	beq.n	80051de <HAL_DMA_IRQHandler+0x2ee>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a5b      	ldr	r2, [pc, #364]	; (800530c <HAL_DMA_IRQHandler+0x41c>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d01d      	beq.n	80051de <HAL_DMA_IRQHandler+0x2ee>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a5a      	ldr	r2, [pc, #360]	; (8005310 <HAL_DMA_IRQHandler+0x420>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d018      	beq.n	80051de <HAL_DMA_IRQHandler+0x2ee>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a58      	ldr	r2, [pc, #352]	; (8005314 <HAL_DMA_IRQHandler+0x424>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d013      	beq.n	80051de <HAL_DMA_IRQHandler+0x2ee>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a57      	ldr	r2, [pc, #348]	; (8005318 <HAL_DMA_IRQHandler+0x428>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d00e      	beq.n	80051de <HAL_DMA_IRQHandler+0x2ee>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a55      	ldr	r2, [pc, #340]	; (800531c <HAL_DMA_IRQHandler+0x42c>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d009      	beq.n	80051de <HAL_DMA_IRQHandler+0x2ee>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a54      	ldr	r2, [pc, #336]	; (8005320 <HAL_DMA_IRQHandler+0x430>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d004      	beq.n	80051de <HAL_DMA_IRQHandler+0x2ee>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a52      	ldr	r2, [pc, #328]	; (8005324 <HAL_DMA_IRQHandler+0x434>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d10a      	bne.n	80051f4 <HAL_DMA_IRQHandler+0x304>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	695b      	ldr	r3, [r3, #20]
 80051e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	bf14      	ite	ne
 80051ec:	2301      	movne	r3, #1
 80051ee:	2300      	moveq	r3, #0
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	e003      	b.n	80051fc <HAL_DMA_IRQHandler+0x30c>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	2300      	movs	r3, #0
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d00d      	beq.n	800521c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005204:	f003 031f 	and.w	r3, r3, #31
 8005208:	2201      	movs	r2, #1
 800520a:	409a      	lsls	r2, r3
 800520c:	6a3b      	ldr	r3, [r7, #32]
 800520e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005214:	f043 0202 	orr.w	r2, r3, #2
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005220:	f003 031f 	and.w	r3, r3, #31
 8005224:	2204      	movs	r2, #4
 8005226:	409a      	lsls	r2, r3
 8005228:	69bb      	ldr	r3, [r7, #24]
 800522a:	4013      	ands	r3, r2
 800522c:	2b00      	cmp	r3, #0
 800522e:	f000 808f 	beq.w	8005350 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a2c      	ldr	r2, [pc, #176]	; (80052e8 <HAL_DMA_IRQHandler+0x3f8>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d04a      	beq.n	80052d2 <HAL_DMA_IRQHandler+0x3e2>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a2a      	ldr	r2, [pc, #168]	; (80052ec <HAL_DMA_IRQHandler+0x3fc>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d045      	beq.n	80052d2 <HAL_DMA_IRQHandler+0x3e2>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a29      	ldr	r2, [pc, #164]	; (80052f0 <HAL_DMA_IRQHandler+0x400>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d040      	beq.n	80052d2 <HAL_DMA_IRQHandler+0x3e2>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a27      	ldr	r2, [pc, #156]	; (80052f4 <HAL_DMA_IRQHandler+0x404>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d03b      	beq.n	80052d2 <HAL_DMA_IRQHandler+0x3e2>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a26      	ldr	r2, [pc, #152]	; (80052f8 <HAL_DMA_IRQHandler+0x408>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d036      	beq.n	80052d2 <HAL_DMA_IRQHandler+0x3e2>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a24      	ldr	r2, [pc, #144]	; (80052fc <HAL_DMA_IRQHandler+0x40c>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d031      	beq.n	80052d2 <HAL_DMA_IRQHandler+0x3e2>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a23      	ldr	r2, [pc, #140]	; (8005300 <HAL_DMA_IRQHandler+0x410>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d02c      	beq.n	80052d2 <HAL_DMA_IRQHandler+0x3e2>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a21      	ldr	r2, [pc, #132]	; (8005304 <HAL_DMA_IRQHandler+0x414>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d027      	beq.n	80052d2 <HAL_DMA_IRQHandler+0x3e2>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a20      	ldr	r2, [pc, #128]	; (8005308 <HAL_DMA_IRQHandler+0x418>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d022      	beq.n	80052d2 <HAL_DMA_IRQHandler+0x3e2>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a1e      	ldr	r2, [pc, #120]	; (800530c <HAL_DMA_IRQHandler+0x41c>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d01d      	beq.n	80052d2 <HAL_DMA_IRQHandler+0x3e2>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a1d      	ldr	r2, [pc, #116]	; (8005310 <HAL_DMA_IRQHandler+0x420>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d018      	beq.n	80052d2 <HAL_DMA_IRQHandler+0x3e2>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a1b      	ldr	r2, [pc, #108]	; (8005314 <HAL_DMA_IRQHandler+0x424>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d013      	beq.n	80052d2 <HAL_DMA_IRQHandler+0x3e2>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a1a      	ldr	r2, [pc, #104]	; (8005318 <HAL_DMA_IRQHandler+0x428>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d00e      	beq.n	80052d2 <HAL_DMA_IRQHandler+0x3e2>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a18      	ldr	r2, [pc, #96]	; (800531c <HAL_DMA_IRQHandler+0x42c>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d009      	beq.n	80052d2 <HAL_DMA_IRQHandler+0x3e2>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a17      	ldr	r2, [pc, #92]	; (8005320 <HAL_DMA_IRQHandler+0x430>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d004      	beq.n	80052d2 <HAL_DMA_IRQHandler+0x3e2>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a15      	ldr	r2, [pc, #84]	; (8005324 <HAL_DMA_IRQHandler+0x434>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d12a      	bne.n	8005328 <HAL_DMA_IRQHandler+0x438>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f003 0302 	and.w	r3, r3, #2
 80052dc:	2b00      	cmp	r3, #0
 80052de:	bf14      	ite	ne
 80052e0:	2301      	movne	r3, #1
 80052e2:	2300      	moveq	r3, #0
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	e023      	b.n	8005330 <HAL_DMA_IRQHandler+0x440>
 80052e8:	40020010 	.word	0x40020010
 80052ec:	40020028 	.word	0x40020028
 80052f0:	40020040 	.word	0x40020040
 80052f4:	40020058 	.word	0x40020058
 80052f8:	40020070 	.word	0x40020070
 80052fc:	40020088 	.word	0x40020088
 8005300:	400200a0 	.word	0x400200a0
 8005304:	400200b8 	.word	0x400200b8
 8005308:	40020410 	.word	0x40020410
 800530c:	40020428 	.word	0x40020428
 8005310:	40020440 	.word	0x40020440
 8005314:	40020458 	.word	0x40020458
 8005318:	40020470 	.word	0x40020470
 800531c:	40020488 	.word	0x40020488
 8005320:	400204a0 	.word	0x400204a0
 8005324:	400204b8 	.word	0x400204b8
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	2300      	movs	r3, #0
 8005330:	2b00      	cmp	r3, #0
 8005332:	d00d      	beq.n	8005350 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005338:	f003 031f 	and.w	r3, r3, #31
 800533c:	2204      	movs	r2, #4
 800533e:	409a      	lsls	r2, r3
 8005340:	6a3b      	ldr	r3, [r7, #32]
 8005342:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005348:	f043 0204 	orr.w	r2, r3, #4
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005354:	f003 031f 	and.w	r3, r3, #31
 8005358:	2210      	movs	r2, #16
 800535a:	409a      	lsls	r2, r3
 800535c:	69bb      	ldr	r3, [r7, #24]
 800535e:	4013      	ands	r3, r2
 8005360:	2b00      	cmp	r3, #0
 8005362:	f000 80a6 	beq.w	80054b2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a85      	ldr	r2, [pc, #532]	; (8005580 <HAL_DMA_IRQHandler+0x690>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d04a      	beq.n	8005406 <HAL_DMA_IRQHandler+0x516>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a83      	ldr	r2, [pc, #524]	; (8005584 <HAL_DMA_IRQHandler+0x694>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d045      	beq.n	8005406 <HAL_DMA_IRQHandler+0x516>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a82      	ldr	r2, [pc, #520]	; (8005588 <HAL_DMA_IRQHandler+0x698>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d040      	beq.n	8005406 <HAL_DMA_IRQHandler+0x516>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a80      	ldr	r2, [pc, #512]	; (800558c <HAL_DMA_IRQHandler+0x69c>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d03b      	beq.n	8005406 <HAL_DMA_IRQHandler+0x516>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a7f      	ldr	r2, [pc, #508]	; (8005590 <HAL_DMA_IRQHandler+0x6a0>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d036      	beq.n	8005406 <HAL_DMA_IRQHandler+0x516>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a7d      	ldr	r2, [pc, #500]	; (8005594 <HAL_DMA_IRQHandler+0x6a4>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d031      	beq.n	8005406 <HAL_DMA_IRQHandler+0x516>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a7c      	ldr	r2, [pc, #496]	; (8005598 <HAL_DMA_IRQHandler+0x6a8>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d02c      	beq.n	8005406 <HAL_DMA_IRQHandler+0x516>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a7a      	ldr	r2, [pc, #488]	; (800559c <HAL_DMA_IRQHandler+0x6ac>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d027      	beq.n	8005406 <HAL_DMA_IRQHandler+0x516>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a79      	ldr	r2, [pc, #484]	; (80055a0 <HAL_DMA_IRQHandler+0x6b0>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d022      	beq.n	8005406 <HAL_DMA_IRQHandler+0x516>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a77      	ldr	r2, [pc, #476]	; (80055a4 <HAL_DMA_IRQHandler+0x6b4>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d01d      	beq.n	8005406 <HAL_DMA_IRQHandler+0x516>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a76      	ldr	r2, [pc, #472]	; (80055a8 <HAL_DMA_IRQHandler+0x6b8>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d018      	beq.n	8005406 <HAL_DMA_IRQHandler+0x516>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a74      	ldr	r2, [pc, #464]	; (80055ac <HAL_DMA_IRQHandler+0x6bc>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d013      	beq.n	8005406 <HAL_DMA_IRQHandler+0x516>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a73      	ldr	r2, [pc, #460]	; (80055b0 <HAL_DMA_IRQHandler+0x6c0>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d00e      	beq.n	8005406 <HAL_DMA_IRQHandler+0x516>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a71      	ldr	r2, [pc, #452]	; (80055b4 <HAL_DMA_IRQHandler+0x6c4>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d009      	beq.n	8005406 <HAL_DMA_IRQHandler+0x516>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a70      	ldr	r2, [pc, #448]	; (80055b8 <HAL_DMA_IRQHandler+0x6c8>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d004      	beq.n	8005406 <HAL_DMA_IRQHandler+0x516>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a6e      	ldr	r2, [pc, #440]	; (80055bc <HAL_DMA_IRQHandler+0x6cc>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d10a      	bne.n	800541c <HAL_DMA_IRQHandler+0x52c>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f003 0308 	and.w	r3, r3, #8
 8005410:	2b00      	cmp	r3, #0
 8005412:	bf14      	ite	ne
 8005414:	2301      	movne	r3, #1
 8005416:	2300      	moveq	r3, #0
 8005418:	b2db      	uxtb	r3, r3
 800541a:	e009      	b.n	8005430 <HAL_DMA_IRQHandler+0x540>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f003 0304 	and.w	r3, r3, #4
 8005426:	2b00      	cmp	r3, #0
 8005428:	bf14      	ite	ne
 800542a:	2301      	movne	r3, #1
 800542c:	2300      	moveq	r3, #0
 800542e:	b2db      	uxtb	r3, r3
 8005430:	2b00      	cmp	r3, #0
 8005432:	d03e      	beq.n	80054b2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005438:	f003 031f 	and.w	r3, r3, #31
 800543c:	2210      	movs	r2, #16
 800543e:	409a      	lsls	r2, r3
 8005440:	6a3b      	ldr	r3, [r7, #32]
 8005442:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800544e:	2b00      	cmp	r3, #0
 8005450:	d018      	beq.n	8005484 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800545c:	2b00      	cmp	r3, #0
 800545e:	d108      	bne.n	8005472 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005464:	2b00      	cmp	r3, #0
 8005466:	d024      	beq.n	80054b2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	4798      	blx	r3
 8005470:	e01f      	b.n	80054b2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005476:	2b00      	cmp	r3, #0
 8005478:	d01b      	beq.n	80054b2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	4798      	blx	r3
 8005482:	e016      	b.n	80054b2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800548e:	2b00      	cmp	r3, #0
 8005490:	d107      	bne.n	80054a2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f022 0208 	bic.w	r2, r2, #8
 80054a0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d003      	beq.n	80054b2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054b6:	f003 031f 	and.w	r3, r3, #31
 80054ba:	2220      	movs	r2, #32
 80054bc:	409a      	lsls	r2, r3
 80054be:	69bb      	ldr	r3, [r7, #24]
 80054c0:	4013      	ands	r3, r2
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	f000 8110 	beq.w	80056e8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a2c      	ldr	r2, [pc, #176]	; (8005580 <HAL_DMA_IRQHandler+0x690>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d04a      	beq.n	8005568 <HAL_DMA_IRQHandler+0x678>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a2b      	ldr	r2, [pc, #172]	; (8005584 <HAL_DMA_IRQHandler+0x694>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d045      	beq.n	8005568 <HAL_DMA_IRQHandler+0x678>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a29      	ldr	r2, [pc, #164]	; (8005588 <HAL_DMA_IRQHandler+0x698>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d040      	beq.n	8005568 <HAL_DMA_IRQHandler+0x678>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a28      	ldr	r2, [pc, #160]	; (800558c <HAL_DMA_IRQHandler+0x69c>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d03b      	beq.n	8005568 <HAL_DMA_IRQHandler+0x678>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a26      	ldr	r2, [pc, #152]	; (8005590 <HAL_DMA_IRQHandler+0x6a0>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d036      	beq.n	8005568 <HAL_DMA_IRQHandler+0x678>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a25      	ldr	r2, [pc, #148]	; (8005594 <HAL_DMA_IRQHandler+0x6a4>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d031      	beq.n	8005568 <HAL_DMA_IRQHandler+0x678>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a23      	ldr	r2, [pc, #140]	; (8005598 <HAL_DMA_IRQHandler+0x6a8>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d02c      	beq.n	8005568 <HAL_DMA_IRQHandler+0x678>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a22      	ldr	r2, [pc, #136]	; (800559c <HAL_DMA_IRQHandler+0x6ac>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d027      	beq.n	8005568 <HAL_DMA_IRQHandler+0x678>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a20      	ldr	r2, [pc, #128]	; (80055a0 <HAL_DMA_IRQHandler+0x6b0>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d022      	beq.n	8005568 <HAL_DMA_IRQHandler+0x678>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a1f      	ldr	r2, [pc, #124]	; (80055a4 <HAL_DMA_IRQHandler+0x6b4>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d01d      	beq.n	8005568 <HAL_DMA_IRQHandler+0x678>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a1d      	ldr	r2, [pc, #116]	; (80055a8 <HAL_DMA_IRQHandler+0x6b8>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d018      	beq.n	8005568 <HAL_DMA_IRQHandler+0x678>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a1c      	ldr	r2, [pc, #112]	; (80055ac <HAL_DMA_IRQHandler+0x6bc>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d013      	beq.n	8005568 <HAL_DMA_IRQHandler+0x678>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a1a      	ldr	r2, [pc, #104]	; (80055b0 <HAL_DMA_IRQHandler+0x6c0>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d00e      	beq.n	8005568 <HAL_DMA_IRQHandler+0x678>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a19      	ldr	r2, [pc, #100]	; (80055b4 <HAL_DMA_IRQHandler+0x6c4>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d009      	beq.n	8005568 <HAL_DMA_IRQHandler+0x678>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a17      	ldr	r2, [pc, #92]	; (80055b8 <HAL_DMA_IRQHandler+0x6c8>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d004      	beq.n	8005568 <HAL_DMA_IRQHandler+0x678>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a16      	ldr	r2, [pc, #88]	; (80055bc <HAL_DMA_IRQHandler+0x6cc>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d12b      	bne.n	80055c0 <HAL_DMA_IRQHandler+0x6d0>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f003 0310 	and.w	r3, r3, #16
 8005572:	2b00      	cmp	r3, #0
 8005574:	bf14      	ite	ne
 8005576:	2301      	movne	r3, #1
 8005578:	2300      	moveq	r3, #0
 800557a:	b2db      	uxtb	r3, r3
 800557c:	e02a      	b.n	80055d4 <HAL_DMA_IRQHandler+0x6e4>
 800557e:	bf00      	nop
 8005580:	40020010 	.word	0x40020010
 8005584:	40020028 	.word	0x40020028
 8005588:	40020040 	.word	0x40020040
 800558c:	40020058 	.word	0x40020058
 8005590:	40020070 	.word	0x40020070
 8005594:	40020088 	.word	0x40020088
 8005598:	400200a0 	.word	0x400200a0
 800559c:	400200b8 	.word	0x400200b8
 80055a0:	40020410 	.word	0x40020410
 80055a4:	40020428 	.word	0x40020428
 80055a8:	40020440 	.word	0x40020440
 80055ac:	40020458 	.word	0x40020458
 80055b0:	40020470 	.word	0x40020470
 80055b4:	40020488 	.word	0x40020488
 80055b8:	400204a0 	.word	0x400204a0
 80055bc:	400204b8 	.word	0x400204b8
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f003 0302 	and.w	r3, r3, #2
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	bf14      	ite	ne
 80055ce:	2301      	movne	r3, #1
 80055d0:	2300      	moveq	r3, #0
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	f000 8087 	beq.w	80056e8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055de:	f003 031f 	and.w	r3, r3, #31
 80055e2:	2220      	movs	r2, #32
 80055e4:	409a      	lsls	r2, r3
 80055e6:	6a3b      	ldr	r3, [r7, #32]
 80055e8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80055f0:	b2db      	uxtb	r3, r3
 80055f2:	2b04      	cmp	r3, #4
 80055f4:	d139      	bne.n	800566a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f022 0216 	bic.w	r2, r2, #22
 8005604:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	695a      	ldr	r2, [r3, #20]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005614:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800561a:	2b00      	cmp	r3, #0
 800561c:	d103      	bne.n	8005626 <HAL_DMA_IRQHandler+0x736>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005622:	2b00      	cmp	r3, #0
 8005624:	d007      	beq.n	8005636 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f022 0208 	bic.w	r2, r2, #8
 8005634:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800563a:	f003 031f 	and.w	r3, r3, #31
 800563e:	223f      	movs	r2, #63	; 0x3f
 8005640:	409a      	lsls	r2, r3
 8005642:	6a3b      	ldr	r3, [r7, #32]
 8005644:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2200      	movs	r2, #0
 800564a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2201      	movs	r2, #1
 8005652:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800565a:	2b00      	cmp	r3, #0
 800565c:	f000 834a 	beq.w	8005cf4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	4798      	blx	r3
          }
          return;
 8005668:	e344      	b.n	8005cf4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005674:	2b00      	cmp	r3, #0
 8005676:	d018      	beq.n	80056aa <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005682:	2b00      	cmp	r3, #0
 8005684:	d108      	bne.n	8005698 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800568a:	2b00      	cmp	r3, #0
 800568c:	d02c      	beq.n	80056e8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	4798      	blx	r3
 8005696:	e027      	b.n	80056e8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800569c:	2b00      	cmp	r3, #0
 800569e:	d023      	beq.n	80056e8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	4798      	blx	r3
 80056a8:	e01e      	b.n	80056e8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d10f      	bne.n	80056d8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f022 0210 	bic.w	r2, r2, #16
 80056c6:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2200      	movs	r2, #0
 80056cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2201      	movs	r2, #1
 80056d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d003      	beq.n	80056e8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	f000 8306 	beq.w	8005cfe <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056f6:	f003 0301 	and.w	r3, r3, #1
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	f000 8088 	beq.w	8005810 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2204      	movs	r2, #4
 8005704:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a7a      	ldr	r2, [pc, #488]	; (80058f8 <HAL_DMA_IRQHandler+0xa08>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d04a      	beq.n	80057a8 <HAL_DMA_IRQHandler+0x8b8>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a79      	ldr	r2, [pc, #484]	; (80058fc <HAL_DMA_IRQHandler+0xa0c>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d045      	beq.n	80057a8 <HAL_DMA_IRQHandler+0x8b8>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a77      	ldr	r2, [pc, #476]	; (8005900 <HAL_DMA_IRQHandler+0xa10>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d040      	beq.n	80057a8 <HAL_DMA_IRQHandler+0x8b8>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a76      	ldr	r2, [pc, #472]	; (8005904 <HAL_DMA_IRQHandler+0xa14>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d03b      	beq.n	80057a8 <HAL_DMA_IRQHandler+0x8b8>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a74      	ldr	r2, [pc, #464]	; (8005908 <HAL_DMA_IRQHandler+0xa18>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d036      	beq.n	80057a8 <HAL_DMA_IRQHandler+0x8b8>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a73      	ldr	r2, [pc, #460]	; (800590c <HAL_DMA_IRQHandler+0xa1c>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d031      	beq.n	80057a8 <HAL_DMA_IRQHandler+0x8b8>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a71      	ldr	r2, [pc, #452]	; (8005910 <HAL_DMA_IRQHandler+0xa20>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d02c      	beq.n	80057a8 <HAL_DMA_IRQHandler+0x8b8>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a70      	ldr	r2, [pc, #448]	; (8005914 <HAL_DMA_IRQHandler+0xa24>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d027      	beq.n	80057a8 <HAL_DMA_IRQHandler+0x8b8>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a6e      	ldr	r2, [pc, #440]	; (8005918 <HAL_DMA_IRQHandler+0xa28>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d022      	beq.n	80057a8 <HAL_DMA_IRQHandler+0x8b8>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a6d      	ldr	r2, [pc, #436]	; (800591c <HAL_DMA_IRQHandler+0xa2c>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d01d      	beq.n	80057a8 <HAL_DMA_IRQHandler+0x8b8>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a6b      	ldr	r2, [pc, #428]	; (8005920 <HAL_DMA_IRQHandler+0xa30>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d018      	beq.n	80057a8 <HAL_DMA_IRQHandler+0x8b8>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a6a      	ldr	r2, [pc, #424]	; (8005924 <HAL_DMA_IRQHandler+0xa34>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d013      	beq.n	80057a8 <HAL_DMA_IRQHandler+0x8b8>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a68      	ldr	r2, [pc, #416]	; (8005928 <HAL_DMA_IRQHandler+0xa38>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d00e      	beq.n	80057a8 <HAL_DMA_IRQHandler+0x8b8>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a67      	ldr	r2, [pc, #412]	; (800592c <HAL_DMA_IRQHandler+0xa3c>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d009      	beq.n	80057a8 <HAL_DMA_IRQHandler+0x8b8>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a65      	ldr	r2, [pc, #404]	; (8005930 <HAL_DMA_IRQHandler+0xa40>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d004      	beq.n	80057a8 <HAL_DMA_IRQHandler+0x8b8>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a64      	ldr	r2, [pc, #400]	; (8005934 <HAL_DMA_IRQHandler+0xa44>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d108      	bne.n	80057ba <HAL_DMA_IRQHandler+0x8ca>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f022 0201 	bic.w	r2, r2, #1
 80057b6:	601a      	str	r2, [r3, #0]
 80057b8:	e007      	b.n	80057ca <HAL_DMA_IRQHandler+0x8da>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	681a      	ldr	r2, [r3, #0]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f022 0201 	bic.w	r2, r2, #1
 80057c8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	3301      	adds	r3, #1
 80057ce:	60fb      	str	r3, [r7, #12]
 80057d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057d2:	429a      	cmp	r2, r3
 80057d4:	d307      	bcc.n	80057e6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f003 0301 	and.w	r3, r3, #1
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d1f2      	bne.n	80057ca <HAL_DMA_IRQHandler+0x8da>
 80057e4:	e000      	b.n	80057e8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80057e6:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2200      	movs	r2, #0
 80057ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f003 0301 	and.w	r3, r3, #1
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d004      	beq.n	8005808 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2203      	movs	r2, #3
 8005802:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005806:	e003      	b.n	8005810 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2201      	movs	r2, #1
 800580c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005814:	2b00      	cmp	r3, #0
 8005816:	f000 8272 	beq.w	8005cfe <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	4798      	blx	r3
 8005822:	e26c      	b.n	8005cfe <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a43      	ldr	r2, [pc, #268]	; (8005938 <HAL_DMA_IRQHandler+0xa48>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d022      	beq.n	8005874 <HAL_DMA_IRQHandler+0x984>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a42      	ldr	r2, [pc, #264]	; (800593c <HAL_DMA_IRQHandler+0xa4c>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d01d      	beq.n	8005874 <HAL_DMA_IRQHandler+0x984>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a40      	ldr	r2, [pc, #256]	; (8005940 <HAL_DMA_IRQHandler+0xa50>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d018      	beq.n	8005874 <HAL_DMA_IRQHandler+0x984>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a3f      	ldr	r2, [pc, #252]	; (8005944 <HAL_DMA_IRQHandler+0xa54>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d013      	beq.n	8005874 <HAL_DMA_IRQHandler+0x984>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a3d      	ldr	r2, [pc, #244]	; (8005948 <HAL_DMA_IRQHandler+0xa58>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d00e      	beq.n	8005874 <HAL_DMA_IRQHandler+0x984>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a3c      	ldr	r2, [pc, #240]	; (800594c <HAL_DMA_IRQHandler+0xa5c>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d009      	beq.n	8005874 <HAL_DMA_IRQHandler+0x984>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a3a      	ldr	r2, [pc, #232]	; (8005950 <HAL_DMA_IRQHandler+0xa60>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d004      	beq.n	8005874 <HAL_DMA_IRQHandler+0x984>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a39      	ldr	r2, [pc, #228]	; (8005954 <HAL_DMA_IRQHandler+0xa64>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d101      	bne.n	8005878 <HAL_DMA_IRQHandler+0x988>
 8005874:	2301      	movs	r3, #1
 8005876:	e000      	b.n	800587a <HAL_DMA_IRQHandler+0x98a>
 8005878:	2300      	movs	r3, #0
 800587a:	2b00      	cmp	r3, #0
 800587c:	f000 823f 	beq.w	8005cfe <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800588c:	f003 031f 	and.w	r3, r3, #31
 8005890:	2204      	movs	r2, #4
 8005892:	409a      	lsls	r2, r3
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	4013      	ands	r3, r2
 8005898:	2b00      	cmp	r3, #0
 800589a:	f000 80cd 	beq.w	8005a38 <HAL_DMA_IRQHandler+0xb48>
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	f003 0304 	and.w	r3, r3, #4
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	f000 80c7 	beq.w	8005a38 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058ae:	f003 031f 	and.w	r3, r3, #31
 80058b2:	2204      	movs	r2, #4
 80058b4:	409a      	lsls	r2, r3
 80058b6:	69fb      	ldr	r3, [r7, #28]
 80058b8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d049      	beq.n	8005958 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d109      	bne.n	80058e2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	f000 8210 	beq.w	8005cf8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80058e0:	e20a      	b.n	8005cf8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	f000 8206 	beq.w	8005cf8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80058f4:	e200      	b.n	8005cf8 <HAL_DMA_IRQHandler+0xe08>
 80058f6:	bf00      	nop
 80058f8:	40020010 	.word	0x40020010
 80058fc:	40020028 	.word	0x40020028
 8005900:	40020040 	.word	0x40020040
 8005904:	40020058 	.word	0x40020058
 8005908:	40020070 	.word	0x40020070
 800590c:	40020088 	.word	0x40020088
 8005910:	400200a0 	.word	0x400200a0
 8005914:	400200b8 	.word	0x400200b8
 8005918:	40020410 	.word	0x40020410
 800591c:	40020428 	.word	0x40020428
 8005920:	40020440 	.word	0x40020440
 8005924:	40020458 	.word	0x40020458
 8005928:	40020470 	.word	0x40020470
 800592c:	40020488 	.word	0x40020488
 8005930:	400204a0 	.word	0x400204a0
 8005934:	400204b8 	.word	0x400204b8
 8005938:	58025408 	.word	0x58025408
 800593c:	5802541c 	.word	0x5802541c
 8005940:	58025430 	.word	0x58025430
 8005944:	58025444 	.word	0x58025444
 8005948:	58025458 	.word	0x58025458
 800594c:	5802546c 	.word	0x5802546c
 8005950:	58025480 	.word	0x58025480
 8005954:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	f003 0320 	and.w	r3, r3, #32
 800595e:	2b00      	cmp	r3, #0
 8005960:	d160      	bne.n	8005a24 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a8c      	ldr	r2, [pc, #560]	; (8005b98 <HAL_DMA_IRQHandler+0xca8>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d04a      	beq.n	8005a02 <HAL_DMA_IRQHandler+0xb12>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a8a      	ldr	r2, [pc, #552]	; (8005b9c <HAL_DMA_IRQHandler+0xcac>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d045      	beq.n	8005a02 <HAL_DMA_IRQHandler+0xb12>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a89      	ldr	r2, [pc, #548]	; (8005ba0 <HAL_DMA_IRQHandler+0xcb0>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d040      	beq.n	8005a02 <HAL_DMA_IRQHandler+0xb12>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a87      	ldr	r2, [pc, #540]	; (8005ba4 <HAL_DMA_IRQHandler+0xcb4>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d03b      	beq.n	8005a02 <HAL_DMA_IRQHandler+0xb12>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a86      	ldr	r2, [pc, #536]	; (8005ba8 <HAL_DMA_IRQHandler+0xcb8>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d036      	beq.n	8005a02 <HAL_DMA_IRQHandler+0xb12>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a84      	ldr	r2, [pc, #528]	; (8005bac <HAL_DMA_IRQHandler+0xcbc>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d031      	beq.n	8005a02 <HAL_DMA_IRQHandler+0xb12>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a83      	ldr	r2, [pc, #524]	; (8005bb0 <HAL_DMA_IRQHandler+0xcc0>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d02c      	beq.n	8005a02 <HAL_DMA_IRQHandler+0xb12>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a81      	ldr	r2, [pc, #516]	; (8005bb4 <HAL_DMA_IRQHandler+0xcc4>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d027      	beq.n	8005a02 <HAL_DMA_IRQHandler+0xb12>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4a80      	ldr	r2, [pc, #512]	; (8005bb8 <HAL_DMA_IRQHandler+0xcc8>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d022      	beq.n	8005a02 <HAL_DMA_IRQHandler+0xb12>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a7e      	ldr	r2, [pc, #504]	; (8005bbc <HAL_DMA_IRQHandler+0xccc>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d01d      	beq.n	8005a02 <HAL_DMA_IRQHandler+0xb12>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a7d      	ldr	r2, [pc, #500]	; (8005bc0 <HAL_DMA_IRQHandler+0xcd0>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d018      	beq.n	8005a02 <HAL_DMA_IRQHandler+0xb12>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a7b      	ldr	r2, [pc, #492]	; (8005bc4 <HAL_DMA_IRQHandler+0xcd4>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d013      	beq.n	8005a02 <HAL_DMA_IRQHandler+0xb12>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a7a      	ldr	r2, [pc, #488]	; (8005bc8 <HAL_DMA_IRQHandler+0xcd8>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d00e      	beq.n	8005a02 <HAL_DMA_IRQHandler+0xb12>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a78      	ldr	r2, [pc, #480]	; (8005bcc <HAL_DMA_IRQHandler+0xcdc>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d009      	beq.n	8005a02 <HAL_DMA_IRQHandler+0xb12>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a77      	ldr	r2, [pc, #476]	; (8005bd0 <HAL_DMA_IRQHandler+0xce0>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d004      	beq.n	8005a02 <HAL_DMA_IRQHandler+0xb12>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a75      	ldr	r2, [pc, #468]	; (8005bd4 <HAL_DMA_IRQHandler+0xce4>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d108      	bne.n	8005a14 <HAL_DMA_IRQHandler+0xb24>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f022 0208 	bic.w	r2, r2, #8
 8005a10:	601a      	str	r2, [r3, #0]
 8005a12:	e007      	b.n	8005a24 <HAL_DMA_IRQHandler+0xb34>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	681a      	ldr	r2, [r3, #0]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f022 0204 	bic.w	r2, r2, #4
 8005a22:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	f000 8165 	beq.w	8005cf8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a36:	e15f      	b.n	8005cf8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a3c:	f003 031f 	and.w	r3, r3, #31
 8005a40:	2202      	movs	r2, #2
 8005a42:	409a      	lsls	r2, r3
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	4013      	ands	r3, r2
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	f000 80c5 	beq.w	8005bd8 <HAL_DMA_IRQHandler+0xce8>
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	f003 0302 	and.w	r3, r3, #2
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	f000 80bf 	beq.w	8005bd8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a5e:	f003 031f 	and.w	r3, r3, #31
 8005a62:	2202      	movs	r2, #2
 8005a64:	409a      	lsls	r2, r3
 8005a66:	69fb      	ldr	r3, [r7, #28]
 8005a68:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d018      	beq.n	8005aa6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d109      	bne.n	8005a92 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	f000 813a 	beq.w	8005cfc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a90:	e134      	b.n	8005cfc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	f000 8130 	beq.w	8005cfc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005aa4:	e12a      	b.n	8005cfc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	f003 0320 	and.w	r3, r3, #32
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d168      	bne.n	8005b82 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a38      	ldr	r2, [pc, #224]	; (8005b98 <HAL_DMA_IRQHandler+0xca8>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d04a      	beq.n	8005b50 <HAL_DMA_IRQHandler+0xc60>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a37      	ldr	r2, [pc, #220]	; (8005b9c <HAL_DMA_IRQHandler+0xcac>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d045      	beq.n	8005b50 <HAL_DMA_IRQHandler+0xc60>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a35      	ldr	r2, [pc, #212]	; (8005ba0 <HAL_DMA_IRQHandler+0xcb0>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d040      	beq.n	8005b50 <HAL_DMA_IRQHandler+0xc60>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a34      	ldr	r2, [pc, #208]	; (8005ba4 <HAL_DMA_IRQHandler+0xcb4>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d03b      	beq.n	8005b50 <HAL_DMA_IRQHandler+0xc60>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a32      	ldr	r2, [pc, #200]	; (8005ba8 <HAL_DMA_IRQHandler+0xcb8>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d036      	beq.n	8005b50 <HAL_DMA_IRQHandler+0xc60>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a31      	ldr	r2, [pc, #196]	; (8005bac <HAL_DMA_IRQHandler+0xcbc>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d031      	beq.n	8005b50 <HAL_DMA_IRQHandler+0xc60>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a2f      	ldr	r2, [pc, #188]	; (8005bb0 <HAL_DMA_IRQHandler+0xcc0>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d02c      	beq.n	8005b50 <HAL_DMA_IRQHandler+0xc60>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a2e      	ldr	r2, [pc, #184]	; (8005bb4 <HAL_DMA_IRQHandler+0xcc4>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d027      	beq.n	8005b50 <HAL_DMA_IRQHandler+0xc60>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a2c      	ldr	r2, [pc, #176]	; (8005bb8 <HAL_DMA_IRQHandler+0xcc8>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d022      	beq.n	8005b50 <HAL_DMA_IRQHandler+0xc60>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a2b      	ldr	r2, [pc, #172]	; (8005bbc <HAL_DMA_IRQHandler+0xccc>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d01d      	beq.n	8005b50 <HAL_DMA_IRQHandler+0xc60>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a29      	ldr	r2, [pc, #164]	; (8005bc0 <HAL_DMA_IRQHandler+0xcd0>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d018      	beq.n	8005b50 <HAL_DMA_IRQHandler+0xc60>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a28      	ldr	r2, [pc, #160]	; (8005bc4 <HAL_DMA_IRQHandler+0xcd4>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d013      	beq.n	8005b50 <HAL_DMA_IRQHandler+0xc60>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a26      	ldr	r2, [pc, #152]	; (8005bc8 <HAL_DMA_IRQHandler+0xcd8>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d00e      	beq.n	8005b50 <HAL_DMA_IRQHandler+0xc60>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a25      	ldr	r2, [pc, #148]	; (8005bcc <HAL_DMA_IRQHandler+0xcdc>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d009      	beq.n	8005b50 <HAL_DMA_IRQHandler+0xc60>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a23      	ldr	r2, [pc, #140]	; (8005bd0 <HAL_DMA_IRQHandler+0xce0>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d004      	beq.n	8005b50 <HAL_DMA_IRQHandler+0xc60>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a22      	ldr	r2, [pc, #136]	; (8005bd4 <HAL_DMA_IRQHandler+0xce4>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d108      	bne.n	8005b62 <HAL_DMA_IRQHandler+0xc72>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	681a      	ldr	r2, [r3, #0]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f022 0214 	bic.w	r2, r2, #20
 8005b5e:	601a      	str	r2, [r3, #0]
 8005b60:	e007      	b.n	8005b72 <HAL_DMA_IRQHandler+0xc82>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f022 020a 	bic.w	r2, r2, #10
 8005b70:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2200      	movs	r2, #0
 8005b76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	f000 80b8 	beq.w	8005cfc <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005b94:	e0b2      	b.n	8005cfc <HAL_DMA_IRQHandler+0xe0c>
 8005b96:	bf00      	nop
 8005b98:	40020010 	.word	0x40020010
 8005b9c:	40020028 	.word	0x40020028
 8005ba0:	40020040 	.word	0x40020040
 8005ba4:	40020058 	.word	0x40020058
 8005ba8:	40020070 	.word	0x40020070
 8005bac:	40020088 	.word	0x40020088
 8005bb0:	400200a0 	.word	0x400200a0
 8005bb4:	400200b8 	.word	0x400200b8
 8005bb8:	40020410 	.word	0x40020410
 8005bbc:	40020428 	.word	0x40020428
 8005bc0:	40020440 	.word	0x40020440
 8005bc4:	40020458 	.word	0x40020458
 8005bc8:	40020470 	.word	0x40020470
 8005bcc:	40020488 	.word	0x40020488
 8005bd0:	400204a0 	.word	0x400204a0
 8005bd4:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bdc:	f003 031f 	and.w	r3, r3, #31
 8005be0:	2208      	movs	r2, #8
 8005be2:	409a      	lsls	r2, r3
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	4013      	ands	r3, r2
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	f000 8088 	beq.w	8005cfe <HAL_DMA_IRQHandler+0xe0e>
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	f003 0308 	and.w	r3, r3, #8
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	f000 8082 	beq.w	8005cfe <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a41      	ldr	r2, [pc, #260]	; (8005d04 <HAL_DMA_IRQHandler+0xe14>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d04a      	beq.n	8005c9a <HAL_DMA_IRQHandler+0xdaa>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a3f      	ldr	r2, [pc, #252]	; (8005d08 <HAL_DMA_IRQHandler+0xe18>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d045      	beq.n	8005c9a <HAL_DMA_IRQHandler+0xdaa>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a3e      	ldr	r2, [pc, #248]	; (8005d0c <HAL_DMA_IRQHandler+0xe1c>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d040      	beq.n	8005c9a <HAL_DMA_IRQHandler+0xdaa>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a3c      	ldr	r2, [pc, #240]	; (8005d10 <HAL_DMA_IRQHandler+0xe20>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d03b      	beq.n	8005c9a <HAL_DMA_IRQHandler+0xdaa>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a3b      	ldr	r2, [pc, #236]	; (8005d14 <HAL_DMA_IRQHandler+0xe24>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d036      	beq.n	8005c9a <HAL_DMA_IRQHandler+0xdaa>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a39      	ldr	r2, [pc, #228]	; (8005d18 <HAL_DMA_IRQHandler+0xe28>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d031      	beq.n	8005c9a <HAL_DMA_IRQHandler+0xdaa>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a38      	ldr	r2, [pc, #224]	; (8005d1c <HAL_DMA_IRQHandler+0xe2c>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d02c      	beq.n	8005c9a <HAL_DMA_IRQHandler+0xdaa>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a36      	ldr	r2, [pc, #216]	; (8005d20 <HAL_DMA_IRQHandler+0xe30>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d027      	beq.n	8005c9a <HAL_DMA_IRQHandler+0xdaa>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a35      	ldr	r2, [pc, #212]	; (8005d24 <HAL_DMA_IRQHandler+0xe34>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d022      	beq.n	8005c9a <HAL_DMA_IRQHandler+0xdaa>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a33      	ldr	r2, [pc, #204]	; (8005d28 <HAL_DMA_IRQHandler+0xe38>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d01d      	beq.n	8005c9a <HAL_DMA_IRQHandler+0xdaa>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a32      	ldr	r2, [pc, #200]	; (8005d2c <HAL_DMA_IRQHandler+0xe3c>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d018      	beq.n	8005c9a <HAL_DMA_IRQHandler+0xdaa>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a30      	ldr	r2, [pc, #192]	; (8005d30 <HAL_DMA_IRQHandler+0xe40>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d013      	beq.n	8005c9a <HAL_DMA_IRQHandler+0xdaa>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a2f      	ldr	r2, [pc, #188]	; (8005d34 <HAL_DMA_IRQHandler+0xe44>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d00e      	beq.n	8005c9a <HAL_DMA_IRQHandler+0xdaa>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a2d      	ldr	r2, [pc, #180]	; (8005d38 <HAL_DMA_IRQHandler+0xe48>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d009      	beq.n	8005c9a <HAL_DMA_IRQHandler+0xdaa>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a2c      	ldr	r2, [pc, #176]	; (8005d3c <HAL_DMA_IRQHandler+0xe4c>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d004      	beq.n	8005c9a <HAL_DMA_IRQHandler+0xdaa>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a2a      	ldr	r2, [pc, #168]	; (8005d40 <HAL_DMA_IRQHandler+0xe50>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d108      	bne.n	8005cac <HAL_DMA_IRQHandler+0xdbc>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	681a      	ldr	r2, [r3, #0]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f022 021c 	bic.w	r2, r2, #28
 8005ca8:	601a      	str	r2, [r3, #0]
 8005caa:	e007      	b.n	8005cbc <HAL_DMA_IRQHandler+0xdcc>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f022 020e 	bic.w	r2, r2, #14
 8005cba:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cc0:	f003 031f 	and.w	r3, r3, #31
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	409a      	lsls	r2, r3
 8005cc8:	69fb      	ldr	r3, [r7, #28]
 8005cca:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2201      	movs	r2, #1
 8005cde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d009      	beq.n	8005cfe <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	4798      	blx	r3
 8005cf2:	e004      	b.n	8005cfe <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005cf4:	bf00      	nop
 8005cf6:	e002      	b.n	8005cfe <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005cf8:	bf00      	nop
 8005cfa:	e000      	b.n	8005cfe <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005cfc:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005cfe:	3728      	adds	r7, #40	; 0x28
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}
 8005d04:	40020010 	.word	0x40020010
 8005d08:	40020028 	.word	0x40020028
 8005d0c:	40020040 	.word	0x40020040
 8005d10:	40020058 	.word	0x40020058
 8005d14:	40020070 	.word	0x40020070
 8005d18:	40020088 	.word	0x40020088
 8005d1c:	400200a0 	.word	0x400200a0
 8005d20:	400200b8 	.word	0x400200b8
 8005d24:	40020410 	.word	0x40020410
 8005d28:	40020428 	.word	0x40020428
 8005d2c:	40020440 	.word	0x40020440
 8005d30:	40020458 	.word	0x40020458
 8005d34:	40020470 	.word	0x40020470
 8005d38:	40020488 	.word	0x40020488
 8005d3c:	400204a0 	.word	0x400204a0
 8005d40:	400204b8 	.word	0x400204b8

08005d44 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b085      	sub	sp, #20
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a42      	ldr	r2, [pc, #264]	; (8005e5c <DMA_CalcBaseAndBitshift+0x118>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d04a      	beq.n	8005dec <DMA_CalcBaseAndBitshift+0xa8>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a41      	ldr	r2, [pc, #260]	; (8005e60 <DMA_CalcBaseAndBitshift+0x11c>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d045      	beq.n	8005dec <DMA_CalcBaseAndBitshift+0xa8>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a3f      	ldr	r2, [pc, #252]	; (8005e64 <DMA_CalcBaseAndBitshift+0x120>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d040      	beq.n	8005dec <DMA_CalcBaseAndBitshift+0xa8>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a3e      	ldr	r2, [pc, #248]	; (8005e68 <DMA_CalcBaseAndBitshift+0x124>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d03b      	beq.n	8005dec <DMA_CalcBaseAndBitshift+0xa8>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a3c      	ldr	r2, [pc, #240]	; (8005e6c <DMA_CalcBaseAndBitshift+0x128>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d036      	beq.n	8005dec <DMA_CalcBaseAndBitshift+0xa8>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a3b      	ldr	r2, [pc, #236]	; (8005e70 <DMA_CalcBaseAndBitshift+0x12c>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d031      	beq.n	8005dec <DMA_CalcBaseAndBitshift+0xa8>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a39      	ldr	r2, [pc, #228]	; (8005e74 <DMA_CalcBaseAndBitshift+0x130>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d02c      	beq.n	8005dec <DMA_CalcBaseAndBitshift+0xa8>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a38      	ldr	r2, [pc, #224]	; (8005e78 <DMA_CalcBaseAndBitshift+0x134>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d027      	beq.n	8005dec <DMA_CalcBaseAndBitshift+0xa8>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a36      	ldr	r2, [pc, #216]	; (8005e7c <DMA_CalcBaseAndBitshift+0x138>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d022      	beq.n	8005dec <DMA_CalcBaseAndBitshift+0xa8>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a35      	ldr	r2, [pc, #212]	; (8005e80 <DMA_CalcBaseAndBitshift+0x13c>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d01d      	beq.n	8005dec <DMA_CalcBaseAndBitshift+0xa8>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a33      	ldr	r2, [pc, #204]	; (8005e84 <DMA_CalcBaseAndBitshift+0x140>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d018      	beq.n	8005dec <DMA_CalcBaseAndBitshift+0xa8>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a32      	ldr	r2, [pc, #200]	; (8005e88 <DMA_CalcBaseAndBitshift+0x144>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d013      	beq.n	8005dec <DMA_CalcBaseAndBitshift+0xa8>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a30      	ldr	r2, [pc, #192]	; (8005e8c <DMA_CalcBaseAndBitshift+0x148>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d00e      	beq.n	8005dec <DMA_CalcBaseAndBitshift+0xa8>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a2f      	ldr	r2, [pc, #188]	; (8005e90 <DMA_CalcBaseAndBitshift+0x14c>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d009      	beq.n	8005dec <DMA_CalcBaseAndBitshift+0xa8>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a2d      	ldr	r2, [pc, #180]	; (8005e94 <DMA_CalcBaseAndBitshift+0x150>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d004      	beq.n	8005dec <DMA_CalcBaseAndBitshift+0xa8>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a2c      	ldr	r2, [pc, #176]	; (8005e98 <DMA_CalcBaseAndBitshift+0x154>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d101      	bne.n	8005df0 <DMA_CalcBaseAndBitshift+0xac>
 8005dec:	2301      	movs	r3, #1
 8005dee:	e000      	b.n	8005df2 <DMA_CalcBaseAndBitshift+0xae>
 8005df0:	2300      	movs	r3, #0
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d024      	beq.n	8005e40 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	b2db      	uxtb	r3, r3
 8005dfc:	3b10      	subs	r3, #16
 8005dfe:	4a27      	ldr	r2, [pc, #156]	; (8005e9c <DMA_CalcBaseAndBitshift+0x158>)
 8005e00:	fba2 2303 	umull	r2, r3, r2, r3
 8005e04:	091b      	lsrs	r3, r3, #4
 8005e06:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	f003 0307 	and.w	r3, r3, #7
 8005e0e:	4a24      	ldr	r2, [pc, #144]	; (8005ea0 <DMA_CalcBaseAndBitshift+0x15c>)
 8005e10:	5cd3      	ldrb	r3, [r2, r3]
 8005e12:	461a      	mov	r2, r3
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2b03      	cmp	r3, #3
 8005e1c:	d908      	bls.n	8005e30 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	461a      	mov	r2, r3
 8005e24:	4b1f      	ldr	r3, [pc, #124]	; (8005ea4 <DMA_CalcBaseAndBitshift+0x160>)
 8005e26:	4013      	ands	r3, r2
 8005e28:	1d1a      	adds	r2, r3, #4
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	659a      	str	r2, [r3, #88]	; 0x58
 8005e2e:	e00d      	b.n	8005e4c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	461a      	mov	r2, r3
 8005e36:	4b1b      	ldr	r3, [pc, #108]	; (8005ea4 <DMA_CalcBaseAndBitshift+0x160>)
 8005e38:	4013      	ands	r3, r2
 8005e3a:	687a      	ldr	r2, [r7, #4]
 8005e3c:	6593      	str	r3, [r2, #88]	; 0x58
 8005e3e:	e005      	b.n	8005e4c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3714      	adds	r7, #20
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr
 8005e5c:	40020010 	.word	0x40020010
 8005e60:	40020028 	.word	0x40020028
 8005e64:	40020040 	.word	0x40020040
 8005e68:	40020058 	.word	0x40020058
 8005e6c:	40020070 	.word	0x40020070
 8005e70:	40020088 	.word	0x40020088
 8005e74:	400200a0 	.word	0x400200a0
 8005e78:	400200b8 	.word	0x400200b8
 8005e7c:	40020410 	.word	0x40020410
 8005e80:	40020428 	.word	0x40020428
 8005e84:	40020440 	.word	0x40020440
 8005e88:	40020458 	.word	0x40020458
 8005e8c:	40020470 	.word	0x40020470
 8005e90:	40020488 	.word	0x40020488
 8005e94:	400204a0 	.word	0x400204a0
 8005e98:	400204b8 	.word	0x400204b8
 8005e9c:	aaaaaaab 	.word	0xaaaaaaab
 8005ea0:	0800fbb4 	.word	0x0800fbb4
 8005ea4:	fffffc00 	.word	0xfffffc00

08005ea8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b085      	sub	sp, #20
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	699b      	ldr	r3, [r3, #24]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d120      	bne.n	8005efe <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ec0:	2b03      	cmp	r3, #3
 8005ec2:	d858      	bhi.n	8005f76 <DMA_CheckFifoParam+0xce>
 8005ec4:	a201      	add	r2, pc, #4	; (adr r2, 8005ecc <DMA_CheckFifoParam+0x24>)
 8005ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eca:	bf00      	nop
 8005ecc:	08005edd 	.word	0x08005edd
 8005ed0:	08005eef 	.word	0x08005eef
 8005ed4:	08005edd 	.word	0x08005edd
 8005ed8:	08005f77 	.word	0x08005f77
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ee0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d048      	beq.n	8005f7a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005eec:	e045      	b.n	8005f7a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ef2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005ef6:	d142      	bne.n	8005f7e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005efc:	e03f      	b.n	8005f7e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	699b      	ldr	r3, [r3, #24]
 8005f02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f06:	d123      	bne.n	8005f50 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f0c:	2b03      	cmp	r3, #3
 8005f0e:	d838      	bhi.n	8005f82 <DMA_CheckFifoParam+0xda>
 8005f10:	a201      	add	r2, pc, #4	; (adr r2, 8005f18 <DMA_CheckFifoParam+0x70>)
 8005f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f16:	bf00      	nop
 8005f18:	08005f29 	.word	0x08005f29
 8005f1c:	08005f2f 	.word	0x08005f2f
 8005f20:	08005f29 	.word	0x08005f29
 8005f24:	08005f41 	.word	0x08005f41
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	73fb      	strb	r3, [r7, #15]
        break;
 8005f2c:	e030      	b.n	8005f90 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f32:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d025      	beq.n	8005f86 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005f3e:	e022      	b.n	8005f86 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f44:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005f48:	d11f      	bne.n	8005f8a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005f4e:	e01c      	b.n	8005f8a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f54:	2b02      	cmp	r3, #2
 8005f56:	d902      	bls.n	8005f5e <DMA_CheckFifoParam+0xb6>
 8005f58:	2b03      	cmp	r3, #3
 8005f5a:	d003      	beq.n	8005f64 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005f5c:	e018      	b.n	8005f90 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	73fb      	strb	r3, [r7, #15]
        break;
 8005f62:	e015      	b.n	8005f90 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d00e      	beq.n	8005f8e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005f70:	2301      	movs	r3, #1
 8005f72:	73fb      	strb	r3, [r7, #15]
    break;
 8005f74:	e00b      	b.n	8005f8e <DMA_CheckFifoParam+0xe6>
        break;
 8005f76:	bf00      	nop
 8005f78:	e00a      	b.n	8005f90 <DMA_CheckFifoParam+0xe8>
        break;
 8005f7a:	bf00      	nop
 8005f7c:	e008      	b.n	8005f90 <DMA_CheckFifoParam+0xe8>
        break;
 8005f7e:	bf00      	nop
 8005f80:	e006      	b.n	8005f90 <DMA_CheckFifoParam+0xe8>
        break;
 8005f82:	bf00      	nop
 8005f84:	e004      	b.n	8005f90 <DMA_CheckFifoParam+0xe8>
        break;
 8005f86:	bf00      	nop
 8005f88:	e002      	b.n	8005f90 <DMA_CheckFifoParam+0xe8>
        break;
 8005f8a:	bf00      	nop
 8005f8c:	e000      	b.n	8005f90 <DMA_CheckFifoParam+0xe8>
    break;
 8005f8e:	bf00      	nop
    }
  }

  return status;
 8005f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3714      	adds	r7, #20
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr
 8005f9e:	bf00      	nop

08005fa0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b085      	sub	sp, #20
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a38      	ldr	r2, [pc, #224]	; (8006094 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d022      	beq.n	8005ffe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a36      	ldr	r2, [pc, #216]	; (8006098 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d01d      	beq.n	8005ffe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a35      	ldr	r2, [pc, #212]	; (800609c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d018      	beq.n	8005ffe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a33      	ldr	r2, [pc, #204]	; (80060a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d013      	beq.n	8005ffe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a32      	ldr	r2, [pc, #200]	; (80060a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d00e      	beq.n	8005ffe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a30      	ldr	r2, [pc, #192]	; (80060a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d009      	beq.n	8005ffe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a2f      	ldr	r2, [pc, #188]	; (80060ac <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d004      	beq.n	8005ffe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a2d      	ldr	r2, [pc, #180]	; (80060b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d101      	bne.n	8006002 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005ffe:	2301      	movs	r3, #1
 8006000:	e000      	b.n	8006004 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8006002:	2300      	movs	r3, #0
 8006004:	2b00      	cmp	r3, #0
 8006006:	d01a      	beq.n	800603e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	b2db      	uxtb	r3, r3
 800600e:	3b08      	subs	r3, #8
 8006010:	4a28      	ldr	r2, [pc, #160]	; (80060b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8006012:	fba2 2303 	umull	r2, r3, r2, r3
 8006016:	091b      	lsrs	r3, r3, #4
 8006018:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800601a:	68fa      	ldr	r2, [r7, #12]
 800601c:	4b26      	ldr	r3, [pc, #152]	; (80060b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800601e:	4413      	add	r3, r2
 8006020:	009b      	lsls	r3, r3, #2
 8006022:	461a      	mov	r2, r3
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	4a24      	ldr	r2, [pc, #144]	; (80060bc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800602c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	f003 031f 	and.w	r3, r3, #31
 8006034:	2201      	movs	r2, #1
 8006036:	409a      	lsls	r2, r3
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800603c:	e024      	b.n	8006088 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	b2db      	uxtb	r3, r3
 8006044:	3b10      	subs	r3, #16
 8006046:	4a1e      	ldr	r2, [pc, #120]	; (80060c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006048:	fba2 2303 	umull	r2, r3, r2, r3
 800604c:	091b      	lsrs	r3, r3, #4
 800604e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	4a1c      	ldr	r2, [pc, #112]	; (80060c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d806      	bhi.n	8006066 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	4a1b      	ldr	r2, [pc, #108]	; (80060c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d902      	bls.n	8006066 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	3308      	adds	r3, #8
 8006064:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006066:	68fa      	ldr	r2, [r7, #12]
 8006068:	4b18      	ldr	r3, [pc, #96]	; (80060cc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800606a:	4413      	add	r3, r2
 800606c:	009b      	lsls	r3, r3, #2
 800606e:	461a      	mov	r2, r3
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	4a16      	ldr	r2, [pc, #88]	; (80060d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006078:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	f003 031f 	and.w	r3, r3, #31
 8006080:	2201      	movs	r2, #1
 8006082:	409a      	lsls	r2, r3
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006088:	bf00      	nop
 800608a:	3714      	adds	r7, #20
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr
 8006094:	58025408 	.word	0x58025408
 8006098:	5802541c 	.word	0x5802541c
 800609c:	58025430 	.word	0x58025430
 80060a0:	58025444 	.word	0x58025444
 80060a4:	58025458 	.word	0x58025458
 80060a8:	5802546c 	.word	0x5802546c
 80060ac:	58025480 	.word	0x58025480
 80060b0:	58025494 	.word	0x58025494
 80060b4:	cccccccd 	.word	0xcccccccd
 80060b8:	16009600 	.word	0x16009600
 80060bc:	58025880 	.word	0x58025880
 80060c0:	aaaaaaab 	.word	0xaaaaaaab
 80060c4:	400204b8 	.word	0x400204b8
 80060c8:	4002040f 	.word	0x4002040f
 80060cc:	10008200 	.word	0x10008200
 80060d0:	40020880 	.word	0x40020880

080060d4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b085      	sub	sp, #20
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	b2db      	uxtb	r3, r3
 80060e2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d04a      	beq.n	8006180 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2b08      	cmp	r3, #8
 80060ee:	d847      	bhi.n	8006180 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a25      	ldr	r2, [pc, #148]	; (800618c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d022      	beq.n	8006140 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a24      	ldr	r2, [pc, #144]	; (8006190 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d01d      	beq.n	8006140 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a22      	ldr	r2, [pc, #136]	; (8006194 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d018      	beq.n	8006140 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a21      	ldr	r2, [pc, #132]	; (8006198 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d013      	beq.n	8006140 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a1f      	ldr	r2, [pc, #124]	; (800619c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d00e      	beq.n	8006140 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a1e      	ldr	r2, [pc, #120]	; (80061a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d009      	beq.n	8006140 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a1c      	ldr	r2, [pc, #112]	; (80061a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d004      	beq.n	8006140 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a1b      	ldr	r2, [pc, #108]	; (80061a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d101      	bne.n	8006144 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006140:	2301      	movs	r3, #1
 8006142:	e000      	b.n	8006146 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006144:	2300      	movs	r3, #0
 8006146:	2b00      	cmp	r3, #0
 8006148:	d00a      	beq.n	8006160 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800614a:	68fa      	ldr	r2, [r7, #12]
 800614c:	4b17      	ldr	r3, [pc, #92]	; (80061ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800614e:	4413      	add	r3, r2
 8006150:	009b      	lsls	r3, r3, #2
 8006152:	461a      	mov	r2, r3
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	4a15      	ldr	r2, [pc, #84]	; (80061b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800615c:	671a      	str	r2, [r3, #112]	; 0x70
 800615e:	e009      	b.n	8006174 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006160:	68fa      	ldr	r2, [r7, #12]
 8006162:	4b14      	ldr	r3, [pc, #80]	; (80061b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006164:	4413      	add	r3, r2
 8006166:	009b      	lsls	r3, r3, #2
 8006168:	461a      	mov	r2, r3
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	4a11      	ldr	r2, [pc, #68]	; (80061b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006172:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	3b01      	subs	r3, #1
 8006178:	2201      	movs	r2, #1
 800617a:	409a      	lsls	r2, r3
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8006180:	bf00      	nop
 8006182:	3714      	adds	r7, #20
 8006184:	46bd      	mov	sp, r7
 8006186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618a:	4770      	bx	lr
 800618c:	58025408 	.word	0x58025408
 8006190:	5802541c 	.word	0x5802541c
 8006194:	58025430 	.word	0x58025430
 8006198:	58025444 	.word	0x58025444
 800619c:	58025458 	.word	0x58025458
 80061a0:	5802546c 	.word	0x5802546c
 80061a4:	58025480 	.word	0x58025480
 80061a8:	58025494 	.word	0x58025494
 80061ac:	1600963f 	.word	0x1600963f
 80061b0:	58025940 	.word	0x58025940
 80061b4:	1000823f 	.word	0x1000823f
 80061b8:	40020940 	.word	0x40020940

080061bc <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b098      	sub	sp, #96	; 0x60
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80061c4:	4a84      	ldr	r2, [pc, #528]	; (80063d8 <HAL_FDCAN_Init+0x21c>)
 80061c6:	f107 030c 	add.w	r3, r7, #12
 80061ca:	4611      	mov	r1, r2
 80061cc:	224c      	movs	r2, #76	; 0x4c
 80061ce:	4618      	mov	r0, r3
 80061d0:	f007 f86c 	bl	800d2ac <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d101      	bne.n	80061de <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80061da:	2301      	movs	r3, #1
 80061dc:	e1ca      	b.n	8006574 <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a7e      	ldr	r2, [pc, #504]	; (80063dc <HAL_FDCAN_Init+0x220>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d106      	bne.n	80061f6 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80061f0:	461a      	mov	r2, r3
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80061fc:	b2db      	uxtb	r3, r3
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d106      	bne.n	8006210 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2200      	movs	r2, #0
 8006206:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f7fb fe28 	bl	8001e60 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	699a      	ldr	r2, [r3, #24]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f022 0210 	bic.w	r2, r2, #16
 800621e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006220:	f7fc ffe2 	bl	80031e8 <HAL_GetTick>
 8006224:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006226:	e014      	b.n	8006252 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006228:	f7fc ffde 	bl	80031e8 <HAL_GetTick>
 800622c:	4602      	mov	r2, r0
 800622e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006230:	1ad3      	subs	r3, r2, r3
 8006232:	2b0a      	cmp	r3, #10
 8006234:	d90d      	bls.n	8006252 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800623c:	f043 0201 	orr.w	r2, r3, #1
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2203      	movs	r2, #3
 800624a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800624e:	2301      	movs	r3, #1
 8006250:	e190      	b.n	8006574 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	699b      	ldr	r3, [r3, #24]
 8006258:	f003 0308 	and.w	r3, r3, #8
 800625c:	2b08      	cmp	r3, #8
 800625e:	d0e3      	beq.n	8006228 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	699a      	ldr	r2, [r3, #24]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f042 0201 	orr.w	r2, r2, #1
 800626e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006270:	f7fc ffba 	bl	80031e8 <HAL_GetTick>
 8006274:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006276:	e014      	b.n	80062a2 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006278:	f7fc ffb6 	bl	80031e8 <HAL_GetTick>
 800627c:	4602      	mov	r2, r0
 800627e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006280:	1ad3      	subs	r3, r2, r3
 8006282:	2b0a      	cmp	r3, #10
 8006284:	d90d      	bls.n	80062a2 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800628c:	f043 0201 	orr.w	r2, r3, #1
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2203      	movs	r2, #3
 800629a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800629e:	2301      	movs	r3, #1
 80062a0:	e168      	b.n	8006574 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	699b      	ldr	r3, [r3, #24]
 80062a8:	f003 0301 	and.w	r3, r3, #1
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d0e3      	beq.n	8006278 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	699a      	ldr	r2, [r3, #24]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f042 0202 	orr.w	r2, r2, #2
 80062be:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	7c1b      	ldrb	r3, [r3, #16]
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d108      	bne.n	80062da <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	699a      	ldr	r2, [r3, #24]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062d6:	619a      	str	r2, [r3, #24]
 80062d8:	e007      	b.n	80062ea <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	699a      	ldr	r2, [r3, #24]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80062e8:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	7c5b      	ldrb	r3, [r3, #17]
 80062ee:	2b01      	cmp	r3, #1
 80062f0:	d108      	bne.n	8006304 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	699a      	ldr	r2, [r3, #24]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006300:	619a      	str	r2, [r3, #24]
 8006302:	e007      	b.n	8006314 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	699a      	ldr	r2, [r3, #24]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006312:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	7c9b      	ldrb	r3, [r3, #18]
 8006318:	2b01      	cmp	r3, #1
 800631a:	d108      	bne.n	800632e <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	699a      	ldr	r2, [r3, #24]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800632a:	619a      	str	r2, [r3, #24]
 800632c:	e007      	b.n	800633e <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	699a      	ldr	r2, [r3, #24]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800633c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	699b      	ldr	r3, [r3, #24]
 8006344:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	689a      	ldr	r2, [r3, #8]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	430a      	orrs	r2, r1
 8006352:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	699a      	ldr	r2, [r3, #24]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8006362:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	691a      	ldr	r2, [r3, #16]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f022 0210 	bic.w	r2, r2, #16
 8006372:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	68db      	ldr	r3, [r3, #12]
 8006378:	2b01      	cmp	r3, #1
 800637a:	d108      	bne.n	800638e <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	699a      	ldr	r2, [r3, #24]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f042 0204 	orr.w	r2, r2, #4
 800638a:	619a      	str	r2, [r3, #24]
 800638c:	e030      	b.n	80063f0 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	68db      	ldr	r3, [r3, #12]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d02c      	beq.n	80063f0 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	68db      	ldr	r3, [r3, #12]
 800639a:	2b02      	cmp	r3, #2
 800639c:	d020      	beq.n	80063e0 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	699a      	ldr	r2, [r3, #24]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80063ac:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	691a      	ldr	r2, [r3, #16]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f042 0210 	orr.w	r2, r2, #16
 80063bc:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	68db      	ldr	r3, [r3, #12]
 80063c2:	2b03      	cmp	r3, #3
 80063c4:	d114      	bne.n	80063f0 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	699a      	ldr	r2, [r3, #24]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f042 0220 	orr.w	r2, r2, #32
 80063d4:	619a      	str	r2, [r3, #24]
 80063d6:	e00b      	b.n	80063f0 <HAL_FDCAN_Init+0x234>
 80063d8:	0800fb58 	.word	0x0800fb58
 80063dc:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	699a      	ldr	r2, [r3, #24]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f042 0220 	orr.w	r2, r2, #32
 80063ee:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	699b      	ldr	r3, [r3, #24]
 80063f4:	3b01      	subs	r3, #1
 80063f6:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	69db      	ldr	r3, [r3, #28]
 80063fc:	3b01      	subs	r3, #1
 80063fe:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006400:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6a1b      	ldr	r3, [r3, #32]
 8006406:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006408:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	695b      	ldr	r3, [r3, #20]
 8006410:	3b01      	subs	r3, #1
 8006412:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006418:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800641a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006424:	d115      	bne.n	8006452 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800642a:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006430:	3b01      	subs	r3, #1
 8006432:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006434:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800643a:	3b01      	subs	r3, #1
 800643c:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800643e:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006446:	3b01      	subs	r3, #1
 8006448:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800644e:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006450:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006456:	2b00      	cmp	r3, #0
 8006458:	d00a      	beq.n	8006470 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	430a      	orrs	r2, r1
 800646c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006478:	4413      	add	r3, r2
 800647a:	2b00      	cmp	r3, #0
 800647c:	d012      	beq.n	80064a4 <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8006486:	f023 0107 	bic.w	r1, r3, #7
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800648e:	009b      	lsls	r3, r3, #2
 8006490:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006494:	4413      	add	r3, r2
 8006496:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	430a      	orrs	r2, r1
 80064a0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d012      	beq.n	80064d2 <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80064b4:	f023 0107 	bic.w	r1, r3, #7
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064bc:	009b      	lsls	r3, r3, #2
 80064be:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80064c2:	4413      	add	r3, r2
 80064c4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	430a      	orrs	r2, r1
 80064ce:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d013      	beq.n	8006502 <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80064e2:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064ea:	009b      	lsls	r3, r3, #2
 80064ec:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80064f0:	4413      	add	r3, r2
 80064f2:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80064f6:	011a      	lsls	r2, r3, #4
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	430a      	orrs	r2, r1
 80064fe:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006506:	2b00      	cmp	r3, #0
 8006508:	d013      	beq.n	8006532 <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006512:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800651a:	009b      	lsls	r3, r3, #2
 800651c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006520:	4413      	add	r3, r2
 8006522:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8006526:	021a      	lsls	r2, r3, #8
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	430a      	orrs	r2, r1
 800652e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a11      	ldr	r2, [pc, #68]	; (800657c <HAL_FDCAN_Init+0x3c0>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d107      	bne.n	800654c <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	689a      	ldr	r2, [r3, #8]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	f022 0203 	bic.w	r2, r2, #3
 800654a:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2200      	movs	r2, #0
 8006550:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2200      	movs	r2, #0
 8006558:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2201      	movs	r2, #1
 8006560:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f000 f80b 	bl	8006580 <FDCAN_CalcultateRamBlockAddresses>
 800656a:	4603      	mov	r3, r0
 800656c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8006570:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8006574:	4618      	mov	r0, r3
 8006576:	3760      	adds	r7, #96	; 0x60
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}
 800657c:	4000a000 	.word	0x4000a000

08006580 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8006580:	b480      	push	{r7}
 8006582:	b085      	sub	sp, #20
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800658c:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8006596:	4ba7      	ldr	r3, [pc, #668]	; (8006834 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006598:	4013      	ands	r3, r2
 800659a:	68ba      	ldr	r2, [r7, #8]
 800659c:	0091      	lsls	r1, r2, #2
 800659e:	687a      	ldr	r2, [r7, #4]
 80065a0:	6812      	ldr	r2, [r2, #0]
 80065a2:	430b      	orrs	r3, r1
 80065a4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065b0:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065b8:	041a      	lsls	r2, r3, #16
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	430a      	orrs	r2, r1
 80065c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065c8:	68ba      	ldr	r2, [r7, #8]
 80065ca:	4413      	add	r3, r2
 80065cc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80065d6:	4b97      	ldr	r3, [pc, #604]	; (8006834 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80065d8:	4013      	ands	r3, r2
 80065da:	68ba      	ldr	r2, [r7, #8]
 80065dc:	0091      	lsls	r1, r2, #2
 80065de:	687a      	ldr	r2, [r7, #4]
 80065e0:	6812      	ldr	r2, [r2, #0]
 80065e2:	430b      	orrs	r3, r1
 80065e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065f0:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065f8:	041a      	lsls	r2, r3, #16
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	430a      	orrs	r2, r1
 8006600:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006608:	005b      	lsls	r3, r3, #1
 800660a:	68ba      	ldr	r2, [r7, #8]
 800660c:	4413      	add	r3, r2
 800660e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8006618:	4b86      	ldr	r3, [pc, #536]	; (8006834 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800661a:	4013      	ands	r3, r2
 800661c:	68ba      	ldr	r2, [r7, #8]
 800661e:	0091      	lsls	r1, r2, #2
 8006620:	687a      	ldr	r2, [r7, #4]
 8006622:	6812      	ldr	r2, [r2, #0]
 8006624:	430b      	orrs	r3, r1
 8006626:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006632:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800663a:	041a      	lsls	r2, r3, #16
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	430a      	orrs	r2, r1
 8006642:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800664a:	687a      	ldr	r2, [r7, #4]
 800664c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800664e:	fb02 f303 	mul.w	r3, r2, r3
 8006652:	68ba      	ldr	r2, [r7, #8]
 8006654:	4413      	add	r3, r2
 8006656:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8006660:	4b74      	ldr	r3, [pc, #464]	; (8006834 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006662:	4013      	ands	r3, r2
 8006664:	68ba      	ldr	r2, [r7, #8]
 8006666:	0091      	lsls	r1, r2, #2
 8006668:	687a      	ldr	r2, [r7, #4]
 800666a:	6812      	ldr	r2, [r2, #0]
 800666c:	430b      	orrs	r3, r1
 800666e:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800667a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006682:	041a      	lsls	r2, r3, #16
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	430a      	orrs	r2, r1
 800668a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006696:	fb02 f303 	mul.w	r3, r2, r3
 800669a:	68ba      	ldr	r2, [r7, #8]
 800669c:	4413      	add	r3, r2
 800669e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80066a8:	4b62      	ldr	r3, [pc, #392]	; (8006834 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80066aa:	4013      	ands	r3, r2
 80066ac:	68ba      	ldr	r2, [r7, #8]
 80066ae:	0091      	lsls	r1, r2, #2
 80066b0:	687a      	ldr	r2, [r7, #4]
 80066b2:	6812      	ldr	r2, [r2, #0]
 80066b4:	430b      	orrs	r3, r1
 80066b6:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066be:	687a      	ldr	r2, [r7, #4]
 80066c0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80066c2:	fb02 f303 	mul.w	r3, r2, r3
 80066c6:	68ba      	ldr	r2, [r7, #8]
 80066c8:	4413      	add	r3, r2
 80066ca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80066d4:	4b57      	ldr	r3, [pc, #348]	; (8006834 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80066d6:	4013      	ands	r3, r2
 80066d8:	68ba      	ldr	r2, [r7, #8]
 80066da:	0091      	lsls	r1, r2, #2
 80066dc:	687a      	ldr	r2, [r7, #4]
 80066de:	6812      	ldr	r2, [r2, #0]
 80066e0:	430b      	orrs	r3, r1
 80066e2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80066ee:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066f6:	041a      	lsls	r2, r3, #16
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	430a      	orrs	r2, r1
 80066fe:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006706:	005b      	lsls	r3, r3, #1
 8006708:	68ba      	ldr	r2, [r7, #8]
 800670a:	4413      	add	r3, r2
 800670c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8006716:	4b47      	ldr	r3, [pc, #284]	; (8006834 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006718:	4013      	ands	r3, r2
 800671a:	68ba      	ldr	r2, [r7, #8]
 800671c:	0091      	lsls	r1, r2, #2
 800671e:	687a      	ldr	r2, [r7, #4]
 8006720:	6812      	ldr	r2, [r2, #0]
 8006722:	430b      	orrs	r3, r1
 8006724:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006730:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006738:	041a      	lsls	r2, r3, #16
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	430a      	orrs	r2, r1
 8006740:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800674c:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006754:	061a      	lsls	r2, r3, #24
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	430a      	orrs	r2, r1
 800675c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006764:	4b34      	ldr	r3, [pc, #208]	; (8006838 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8006766:	4413      	add	r3, r2
 8006768:	009a      	lsls	r2, r3, #2
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006776:	009b      	lsls	r3, r3, #2
 8006778:	441a      	add	r2, r3
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006786:	00db      	lsls	r3, r3, #3
 8006788:	441a      	add	r2, r3
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006796:	6879      	ldr	r1, [r7, #4]
 8006798:	6c49      	ldr	r1, [r1, #68]	; 0x44
 800679a:	fb01 f303 	mul.w	r3, r1, r3
 800679e:	009b      	lsls	r3, r3, #2
 80067a0:	441a      	add	r2, r3
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067ae:	6879      	ldr	r1, [r7, #4]
 80067b0:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 80067b2:	fb01 f303 	mul.w	r3, r1, r3
 80067b6:	009b      	lsls	r3, r3, #2
 80067b8:	441a      	add	r2, r3
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067c6:	6879      	ldr	r1, [r7, #4]
 80067c8:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80067ca:	fb01 f303 	mul.w	r3, r1, r3
 80067ce:	009b      	lsls	r3, r3, #2
 80067d0:	441a      	add	r2, r3
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067e2:	00db      	lsls	r3, r3, #3
 80067e4:	441a      	add	r2, r3
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067f6:	6879      	ldr	r1, [r7, #4]
 80067f8:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80067fa:	fb01 f303 	mul.w	r3, r1, r3
 80067fe:	009b      	lsls	r3, r3, #2
 8006800:	441a      	add	r2, r3
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006812:	6879      	ldr	r1, [r7, #4]
 8006814:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8006816:	fb01 f303 	mul.w	r3, r1, r3
 800681a:	009b      	lsls	r3, r3, #2
 800681c:	441a      	add	r2, r3
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800682a:	4a04      	ldr	r2, [pc, #16]	; (800683c <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d915      	bls.n	800685c <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8006830:	e006      	b.n	8006840 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8006832:	bf00      	nop
 8006834:	ffff0003 	.word	0xffff0003
 8006838:	10002b00 	.word	0x10002b00
 800683c:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006846:	f043 0220 	orr.w	r2, r3, #32
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2203      	movs	r2, #3
 8006854:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8006858:	2301      	movs	r3, #1
 800685a:	e010      	b.n	800687e <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006860:	60fb      	str	r3, [r7, #12]
 8006862:	e005      	b.n	8006870 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2200      	movs	r2, #0
 8006868:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	3304      	adds	r3, #4
 800686e:	60fb      	str	r3, [r7, #12]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006876:	68fa      	ldr	r2, [r7, #12]
 8006878:	429a      	cmp	r2, r3
 800687a:	d3f3      	bcc.n	8006864 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 800687c:	2300      	movs	r3, #0
}
 800687e:	4618      	mov	r0, r3
 8006880:	3714      	adds	r7, #20
 8006882:	46bd      	mov	sp, r7
 8006884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006888:	4770      	bx	lr
 800688a:	bf00      	nop

0800688c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800688c:	b480      	push	{r7}
 800688e:	b089      	sub	sp, #36	; 0x24
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
 8006894:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006896:	2300      	movs	r3, #0
 8006898:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800689a:	4b89      	ldr	r3, [pc, #548]	; (8006ac0 <HAL_GPIO_Init+0x234>)
 800689c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800689e:	e194      	b.n	8006bca <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	681a      	ldr	r2, [r3, #0]
 80068a4:	2101      	movs	r1, #1
 80068a6:	69fb      	ldr	r3, [r7, #28]
 80068a8:	fa01 f303 	lsl.w	r3, r1, r3
 80068ac:	4013      	ands	r3, r2
 80068ae:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	f000 8186 	beq.w	8006bc4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	2b01      	cmp	r3, #1
 80068be:	d00b      	beq.n	80068d8 <HAL_GPIO_Init+0x4c>
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	2b02      	cmp	r3, #2
 80068c6:	d007      	beq.n	80068d8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80068cc:	2b11      	cmp	r3, #17
 80068ce:	d003      	beq.n	80068d8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	2b12      	cmp	r3, #18
 80068d6:	d130      	bne.n	800693a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	689b      	ldr	r3, [r3, #8]
 80068dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80068de:	69fb      	ldr	r3, [r7, #28]
 80068e0:	005b      	lsls	r3, r3, #1
 80068e2:	2203      	movs	r2, #3
 80068e4:	fa02 f303 	lsl.w	r3, r2, r3
 80068e8:	43db      	mvns	r3, r3
 80068ea:	69ba      	ldr	r2, [r7, #24]
 80068ec:	4013      	ands	r3, r2
 80068ee:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	68da      	ldr	r2, [r3, #12]
 80068f4:	69fb      	ldr	r3, [r7, #28]
 80068f6:	005b      	lsls	r3, r3, #1
 80068f8:	fa02 f303 	lsl.w	r3, r2, r3
 80068fc:	69ba      	ldr	r2, [r7, #24]
 80068fe:	4313      	orrs	r3, r2
 8006900:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	69ba      	ldr	r2, [r7, #24]
 8006906:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800690e:	2201      	movs	r2, #1
 8006910:	69fb      	ldr	r3, [r7, #28]
 8006912:	fa02 f303 	lsl.w	r3, r2, r3
 8006916:	43db      	mvns	r3, r3
 8006918:	69ba      	ldr	r2, [r7, #24]
 800691a:	4013      	ands	r3, r2
 800691c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	091b      	lsrs	r3, r3, #4
 8006924:	f003 0201 	and.w	r2, r3, #1
 8006928:	69fb      	ldr	r3, [r7, #28]
 800692a:	fa02 f303 	lsl.w	r3, r2, r3
 800692e:	69ba      	ldr	r2, [r7, #24]
 8006930:	4313      	orrs	r3, r2
 8006932:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	69ba      	ldr	r2, [r7, #24]
 8006938:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	68db      	ldr	r3, [r3, #12]
 800693e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006940:	69fb      	ldr	r3, [r7, #28]
 8006942:	005b      	lsls	r3, r3, #1
 8006944:	2203      	movs	r2, #3
 8006946:	fa02 f303 	lsl.w	r3, r2, r3
 800694a:	43db      	mvns	r3, r3
 800694c:	69ba      	ldr	r2, [r7, #24]
 800694e:	4013      	ands	r3, r2
 8006950:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	689a      	ldr	r2, [r3, #8]
 8006956:	69fb      	ldr	r3, [r7, #28]
 8006958:	005b      	lsls	r3, r3, #1
 800695a:	fa02 f303 	lsl.w	r3, r2, r3
 800695e:	69ba      	ldr	r2, [r7, #24]
 8006960:	4313      	orrs	r3, r2
 8006962:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	69ba      	ldr	r2, [r7, #24]
 8006968:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	2b02      	cmp	r3, #2
 8006970:	d003      	beq.n	800697a <HAL_GPIO_Init+0xee>
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	2b12      	cmp	r3, #18
 8006978:	d123      	bne.n	80069c2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800697a:	69fb      	ldr	r3, [r7, #28]
 800697c:	08da      	lsrs	r2, r3, #3
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	3208      	adds	r2, #8
 8006982:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006986:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006988:	69fb      	ldr	r3, [r7, #28]
 800698a:	f003 0307 	and.w	r3, r3, #7
 800698e:	009b      	lsls	r3, r3, #2
 8006990:	220f      	movs	r2, #15
 8006992:	fa02 f303 	lsl.w	r3, r2, r3
 8006996:	43db      	mvns	r3, r3
 8006998:	69ba      	ldr	r2, [r7, #24]
 800699a:	4013      	ands	r3, r2
 800699c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	691a      	ldr	r2, [r3, #16]
 80069a2:	69fb      	ldr	r3, [r7, #28]
 80069a4:	f003 0307 	and.w	r3, r3, #7
 80069a8:	009b      	lsls	r3, r3, #2
 80069aa:	fa02 f303 	lsl.w	r3, r2, r3
 80069ae:	69ba      	ldr	r2, [r7, #24]
 80069b0:	4313      	orrs	r3, r2
 80069b2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80069b4:	69fb      	ldr	r3, [r7, #28]
 80069b6:	08da      	lsrs	r2, r3, #3
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	3208      	adds	r2, #8
 80069bc:	69b9      	ldr	r1, [r7, #24]
 80069be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80069c8:	69fb      	ldr	r3, [r7, #28]
 80069ca:	005b      	lsls	r3, r3, #1
 80069cc:	2203      	movs	r2, #3
 80069ce:	fa02 f303 	lsl.w	r3, r2, r3
 80069d2:	43db      	mvns	r3, r3
 80069d4:	69ba      	ldr	r2, [r7, #24]
 80069d6:	4013      	ands	r3, r2
 80069d8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	f003 0203 	and.w	r2, r3, #3
 80069e2:	69fb      	ldr	r3, [r7, #28]
 80069e4:	005b      	lsls	r3, r3, #1
 80069e6:	fa02 f303 	lsl.w	r3, r2, r3
 80069ea:	69ba      	ldr	r2, [r7, #24]
 80069ec:	4313      	orrs	r3, r2
 80069ee:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	69ba      	ldr	r2, [r7, #24]
 80069f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	f000 80e0 	beq.w	8006bc4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006a04:	4b2f      	ldr	r3, [pc, #188]	; (8006ac4 <HAL_GPIO_Init+0x238>)
 8006a06:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006a0a:	4a2e      	ldr	r2, [pc, #184]	; (8006ac4 <HAL_GPIO_Init+0x238>)
 8006a0c:	f043 0302 	orr.w	r3, r3, #2
 8006a10:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006a14:	4b2b      	ldr	r3, [pc, #172]	; (8006ac4 <HAL_GPIO_Init+0x238>)
 8006a16:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006a1a:	f003 0302 	and.w	r3, r3, #2
 8006a1e:	60fb      	str	r3, [r7, #12]
 8006a20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006a22:	4a29      	ldr	r2, [pc, #164]	; (8006ac8 <HAL_GPIO_Init+0x23c>)
 8006a24:	69fb      	ldr	r3, [r7, #28]
 8006a26:	089b      	lsrs	r3, r3, #2
 8006a28:	3302      	adds	r3, #2
 8006a2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006a30:	69fb      	ldr	r3, [r7, #28]
 8006a32:	f003 0303 	and.w	r3, r3, #3
 8006a36:	009b      	lsls	r3, r3, #2
 8006a38:	220f      	movs	r2, #15
 8006a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a3e:	43db      	mvns	r3, r3
 8006a40:	69ba      	ldr	r2, [r7, #24]
 8006a42:	4013      	ands	r3, r2
 8006a44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	4a20      	ldr	r2, [pc, #128]	; (8006acc <HAL_GPIO_Init+0x240>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d052      	beq.n	8006af4 <HAL_GPIO_Init+0x268>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	4a1f      	ldr	r2, [pc, #124]	; (8006ad0 <HAL_GPIO_Init+0x244>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d031      	beq.n	8006aba <HAL_GPIO_Init+0x22e>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	4a1e      	ldr	r2, [pc, #120]	; (8006ad4 <HAL_GPIO_Init+0x248>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d02b      	beq.n	8006ab6 <HAL_GPIO_Init+0x22a>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	4a1d      	ldr	r2, [pc, #116]	; (8006ad8 <HAL_GPIO_Init+0x24c>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d025      	beq.n	8006ab2 <HAL_GPIO_Init+0x226>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	4a1c      	ldr	r2, [pc, #112]	; (8006adc <HAL_GPIO_Init+0x250>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d01f      	beq.n	8006aae <HAL_GPIO_Init+0x222>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	4a1b      	ldr	r2, [pc, #108]	; (8006ae0 <HAL_GPIO_Init+0x254>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d019      	beq.n	8006aaa <HAL_GPIO_Init+0x21e>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	4a1a      	ldr	r2, [pc, #104]	; (8006ae4 <HAL_GPIO_Init+0x258>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d013      	beq.n	8006aa6 <HAL_GPIO_Init+0x21a>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	4a19      	ldr	r2, [pc, #100]	; (8006ae8 <HAL_GPIO_Init+0x25c>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d00d      	beq.n	8006aa2 <HAL_GPIO_Init+0x216>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	4a18      	ldr	r2, [pc, #96]	; (8006aec <HAL_GPIO_Init+0x260>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d007      	beq.n	8006a9e <HAL_GPIO_Init+0x212>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	4a17      	ldr	r2, [pc, #92]	; (8006af0 <HAL_GPIO_Init+0x264>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d101      	bne.n	8006a9a <HAL_GPIO_Init+0x20e>
 8006a96:	2309      	movs	r3, #9
 8006a98:	e02d      	b.n	8006af6 <HAL_GPIO_Init+0x26a>
 8006a9a:	230a      	movs	r3, #10
 8006a9c:	e02b      	b.n	8006af6 <HAL_GPIO_Init+0x26a>
 8006a9e:	2308      	movs	r3, #8
 8006aa0:	e029      	b.n	8006af6 <HAL_GPIO_Init+0x26a>
 8006aa2:	2307      	movs	r3, #7
 8006aa4:	e027      	b.n	8006af6 <HAL_GPIO_Init+0x26a>
 8006aa6:	2306      	movs	r3, #6
 8006aa8:	e025      	b.n	8006af6 <HAL_GPIO_Init+0x26a>
 8006aaa:	2305      	movs	r3, #5
 8006aac:	e023      	b.n	8006af6 <HAL_GPIO_Init+0x26a>
 8006aae:	2304      	movs	r3, #4
 8006ab0:	e021      	b.n	8006af6 <HAL_GPIO_Init+0x26a>
 8006ab2:	2303      	movs	r3, #3
 8006ab4:	e01f      	b.n	8006af6 <HAL_GPIO_Init+0x26a>
 8006ab6:	2302      	movs	r3, #2
 8006ab8:	e01d      	b.n	8006af6 <HAL_GPIO_Init+0x26a>
 8006aba:	2301      	movs	r3, #1
 8006abc:	e01b      	b.n	8006af6 <HAL_GPIO_Init+0x26a>
 8006abe:	bf00      	nop
 8006ac0:	58000080 	.word	0x58000080
 8006ac4:	58024400 	.word	0x58024400
 8006ac8:	58000400 	.word	0x58000400
 8006acc:	58020000 	.word	0x58020000
 8006ad0:	58020400 	.word	0x58020400
 8006ad4:	58020800 	.word	0x58020800
 8006ad8:	58020c00 	.word	0x58020c00
 8006adc:	58021000 	.word	0x58021000
 8006ae0:	58021400 	.word	0x58021400
 8006ae4:	58021800 	.word	0x58021800
 8006ae8:	58021c00 	.word	0x58021c00
 8006aec:	58022000 	.word	0x58022000
 8006af0:	58022400 	.word	0x58022400
 8006af4:	2300      	movs	r3, #0
 8006af6:	69fa      	ldr	r2, [r7, #28]
 8006af8:	f002 0203 	and.w	r2, r2, #3
 8006afc:	0092      	lsls	r2, r2, #2
 8006afe:	4093      	lsls	r3, r2
 8006b00:	69ba      	ldr	r2, [r7, #24]
 8006b02:	4313      	orrs	r3, r2
 8006b04:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006b06:	4938      	ldr	r1, [pc, #224]	; (8006be8 <HAL_GPIO_Init+0x35c>)
 8006b08:	69fb      	ldr	r3, [r7, #28]
 8006b0a:	089b      	lsrs	r3, r3, #2
 8006b0c:	3302      	adds	r3, #2
 8006b0e:	69ba      	ldr	r2, [r7, #24]
 8006b10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	43db      	mvns	r3, r3
 8006b1e:	69ba      	ldr	r2, [r7, #24]
 8006b20:	4013      	ands	r3, r2
 8006b22:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d003      	beq.n	8006b38 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006b30:	69ba      	ldr	r2, [r7, #24]
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	4313      	orrs	r3, r2
 8006b36:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	69ba      	ldr	r2, [r7, #24]
 8006b3c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	43db      	mvns	r3, r3
 8006b48:	69ba      	ldr	r2, [r7, #24]
 8006b4a:	4013      	ands	r3, r2
 8006b4c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d003      	beq.n	8006b62 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006b5a:	69ba      	ldr	r2, [r7, #24]
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	69ba      	ldr	r2, [r7, #24]
 8006b66:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006b68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	43db      	mvns	r3, r3
 8006b74:	69ba      	ldr	r2, [r7, #24]
 8006b76:	4013      	ands	r3, r2
 8006b78:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d003      	beq.n	8006b8e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8006b86:	69ba      	ldr	r2, [r7, #24]
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006b8e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006b92:	69bb      	ldr	r3, [r7, #24]
 8006b94:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006b96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b9a:	685b      	ldr	r3, [r3, #4]
 8006b9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	43db      	mvns	r3, r3
 8006ba2:	69ba      	ldr	r2, [r7, #24]
 8006ba4:	4013      	ands	r3, r2
 8006ba6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	685b      	ldr	r3, [r3, #4]
 8006bac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d003      	beq.n	8006bbc <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8006bb4:	69ba      	ldr	r2, [r7, #24]
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006bbc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006bc0:	69bb      	ldr	r3, [r7, #24]
 8006bc2:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8006bc4:	69fb      	ldr	r3, [r7, #28]
 8006bc6:	3301      	adds	r3, #1
 8006bc8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	681a      	ldr	r2, [r3, #0]
 8006bce:	69fb      	ldr	r3, [r7, #28]
 8006bd0:	fa22 f303 	lsr.w	r3, r2, r3
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	f47f ae63 	bne.w	80068a0 <HAL_GPIO_Init+0x14>
  }
}
 8006bda:	bf00      	nop
 8006bdc:	bf00      	nop
 8006bde:	3724      	adds	r7, #36	; 0x24
 8006be0:	46bd      	mov	sp, r7
 8006be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be6:	4770      	bx	lr
 8006be8:	58000400 	.word	0x58000400

08006bec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b083      	sub	sp, #12
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
 8006bf4:	460b      	mov	r3, r1
 8006bf6:	807b      	strh	r3, [r7, #2]
 8006bf8:	4613      	mov	r3, r2
 8006bfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006bfc:	787b      	ldrb	r3, [r7, #1]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d003      	beq.n	8006c0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006c02:	887a      	ldrh	r2, [r7, #2]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006c08:	e003      	b.n	8006c12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006c0a:	887b      	ldrh	r3, [r7, #2]
 8006c0c:	041a      	lsls	r2, r3, #16
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	619a      	str	r2, [r3, #24]
}
 8006c12:	bf00      	nop
 8006c14:	370c      	adds	r7, #12
 8006c16:	46bd      	mov	sp, r7
 8006c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1c:	4770      	bx	lr
	...

08006c20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b082      	sub	sp, #8
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d101      	bne.n	8006c32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	e07f      	b.n	8006d32 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c38:	b2db      	uxtb	r3, r3
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d106      	bne.n	8006c4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2200      	movs	r2, #0
 8006c42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f7fb f9d4 	bl	8001ff4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2224      	movs	r2, #36	; 0x24
 8006c50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	681a      	ldr	r2, [r3, #0]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f022 0201 	bic.w	r2, r2, #1
 8006c62:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	685a      	ldr	r2, [r3, #4]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006c70:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	689a      	ldr	r2, [r3, #8]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006c80:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	68db      	ldr	r3, [r3, #12]
 8006c86:	2b01      	cmp	r3, #1
 8006c88:	d107      	bne.n	8006c9a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	689a      	ldr	r2, [r3, #8]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006c96:	609a      	str	r2, [r3, #8]
 8006c98:	e006      	b.n	8006ca8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	689a      	ldr	r2, [r3, #8]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006ca6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	68db      	ldr	r3, [r3, #12]
 8006cac:	2b02      	cmp	r3, #2
 8006cae:	d104      	bne.n	8006cba <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006cb8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	6859      	ldr	r1, [r3, #4]
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681a      	ldr	r2, [r3, #0]
 8006cc4:	4b1d      	ldr	r3, [pc, #116]	; (8006d3c <HAL_I2C_Init+0x11c>)
 8006cc6:	430b      	orrs	r3, r1
 8006cc8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	68da      	ldr	r2, [r3, #12]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006cd8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	691a      	ldr	r2, [r3, #16]
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	695b      	ldr	r3, [r3, #20]
 8006ce2:	ea42 0103 	orr.w	r1, r2, r3
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	699b      	ldr	r3, [r3, #24]
 8006cea:	021a      	lsls	r2, r3, #8
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	430a      	orrs	r2, r1
 8006cf2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	69d9      	ldr	r1, [r3, #28]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6a1a      	ldr	r2, [r3, #32]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	430a      	orrs	r2, r1
 8006d02:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	681a      	ldr	r2, [r3, #0]
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f042 0201 	orr.w	r2, r2, #1
 8006d12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2200      	movs	r2, #0
 8006d18:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2220      	movs	r2, #32
 8006d1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2200      	movs	r2, #0
 8006d26:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006d30:	2300      	movs	r3, #0
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	3708      	adds	r7, #8
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}
 8006d3a:	bf00      	nop
 8006d3c:	02008000 	.word	0x02008000

08006d40 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b083      	sub	sp, #12
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
 8006d48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d50:	b2db      	uxtb	r3, r3
 8006d52:	2b20      	cmp	r3, #32
 8006d54:	d138      	bne.n	8006dc8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006d5c:	2b01      	cmp	r3, #1
 8006d5e:	d101      	bne.n	8006d64 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006d60:	2302      	movs	r3, #2
 8006d62:	e032      	b.n	8006dca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2201      	movs	r2, #1
 8006d68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2224      	movs	r2, #36	; 0x24
 8006d70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	681a      	ldr	r2, [r3, #0]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f022 0201 	bic.w	r2, r2, #1
 8006d82:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	681a      	ldr	r2, [r3, #0]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006d92:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	6819      	ldr	r1, [r3, #0]
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	683a      	ldr	r2, [r7, #0]
 8006da0:	430a      	orrs	r2, r1
 8006da2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	681a      	ldr	r2, [r3, #0]
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f042 0201 	orr.w	r2, r2, #1
 8006db2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2220      	movs	r2, #32
 8006db8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	e000      	b.n	8006dca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006dc8:	2302      	movs	r3, #2
  }
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	370c      	adds	r7, #12
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd4:	4770      	bx	lr

08006dd6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006dd6:	b480      	push	{r7}
 8006dd8:	b085      	sub	sp, #20
 8006dda:	af00      	add	r7, sp, #0
 8006ddc:	6078      	str	r0, [r7, #4]
 8006dde:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006de6:	b2db      	uxtb	r3, r3
 8006de8:	2b20      	cmp	r3, #32
 8006dea:	d139      	bne.n	8006e60 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006df2:	2b01      	cmp	r3, #1
 8006df4:	d101      	bne.n	8006dfa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006df6:	2302      	movs	r3, #2
 8006df8:	e033      	b.n	8006e62 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2201      	movs	r2, #1
 8006dfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2224      	movs	r2, #36	; 0x24
 8006e06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	681a      	ldr	r2, [r3, #0]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f022 0201 	bic.w	r2, r2, #1
 8006e18:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006e28:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	021b      	lsls	r3, r3, #8
 8006e2e:	68fa      	ldr	r2, [r7, #12]
 8006e30:	4313      	orrs	r3, r2
 8006e32:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	68fa      	ldr	r2, [r7, #12]
 8006e3a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	681a      	ldr	r2, [r3, #0]
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f042 0201 	orr.w	r2, r2, #1
 8006e4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2220      	movs	r2, #32
 8006e50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2200      	movs	r2, #0
 8006e58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	e000      	b.n	8006e62 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006e60:	2302      	movs	r3, #2
  }
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3714      	adds	r7, #20
 8006e66:	46bd      	mov	sp, r7
 8006e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6c:	4770      	bx	lr
	...

08006e70 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b084      	sub	sp, #16
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006e78:	4b19      	ldr	r3, [pc, #100]	; (8006ee0 <HAL_PWREx_ConfigSupply+0x70>)
 8006e7a:	68db      	ldr	r3, [r3, #12]
 8006e7c:	f003 0304 	and.w	r3, r3, #4
 8006e80:	2b04      	cmp	r3, #4
 8006e82:	d00a      	beq.n	8006e9a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006e84:	4b16      	ldr	r3, [pc, #88]	; (8006ee0 <HAL_PWREx_ConfigSupply+0x70>)
 8006e86:	68db      	ldr	r3, [r3, #12]
 8006e88:	f003 0307 	and.w	r3, r3, #7
 8006e8c:	687a      	ldr	r2, [r7, #4]
 8006e8e:	429a      	cmp	r2, r3
 8006e90:	d001      	beq.n	8006e96 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006e92:	2301      	movs	r3, #1
 8006e94:	e01f      	b.n	8006ed6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006e96:	2300      	movs	r3, #0
 8006e98:	e01d      	b.n	8006ed6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006e9a:	4b11      	ldr	r3, [pc, #68]	; (8006ee0 <HAL_PWREx_ConfigSupply+0x70>)
 8006e9c:	68db      	ldr	r3, [r3, #12]
 8006e9e:	f023 0207 	bic.w	r2, r3, #7
 8006ea2:	490f      	ldr	r1, [pc, #60]	; (8006ee0 <HAL_PWREx_ConfigSupply+0x70>)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006eaa:	f7fc f99d 	bl	80031e8 <HAL_GetTick>
 8006eae:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006eb0:	e009      	b.n	8006ec6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006eb2:	f7fc f999 	bl	80031e8 <HAL_GetTick>
 8006eb6:	4602      	mov	r2, r0
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	1ad3      	subs	r3, r2, r3
 8006ebc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006ec0:	d901      	bls.n	8006ec6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	e007      	b.n	8006ed6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006ec6:	4b06      	ldr	r3, [pc, #24]	; (8006ee0 <HAL_PWREx_ConfigSupply+0x70>)
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006ece:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ed2:	d1ee      	bne.n	8006eb2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006ed4:	2300      	movs	r3, #0
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	3710      	adds	r7, #16
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}
 8006ede:	bf00      	nop
 8006ee0:	58024800 	.word	0x58024800

08006ee4 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b086      	sub	sp, #24
 8006ee8:	af02      	add	r7, sp, #8
 8006eea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006eec:	f7fc f97c 	bl	80031e8 <HAL_GetTick>
 8006ef0:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d101      	bne.n	8006efc <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8006ef8:	2301      	movs	r3, #1
 8006efa:	e05f      	b.n	8006fbc <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f02:	b2db      	uxtb	r3, r3
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d107      	bne.n	8006f18 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	f7fb fc0d 	bl	8002728 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8006f0e:	f241 3188 	movw	r1, #5000	; 0x1388
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f000 f85a 	bl	8006fcc <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	689b      	ldr	r3, [r3, #8]
 8006f26:	3b01      	subs	r3, #1
 8006f28:	021a      	lsls	r2, r3, #8
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	430a      	orrs	r2, r1
 8006f30:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f36:	9300      	str	r3, [sp, #0]
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	2120      	movs	r1, #32
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f000 f852 	bl	8006fe8 <QSPI_WaitFlagStateUntilTimeout>
 8006f44:	4603      	mov	r3, r0
 8006f46:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8006f48:	7afb      	ldrb	r3, [r7, #11]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d135      	bne.n	8006fba <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	681a      	ldr	r2, [r3, #0]
 8006f54:	4b1b      	ldr	r3, [pc, #108]	; (8006fc4 <HAL_QSPI_Init+0xe0>)
 8006f56:	4013      	ands	r3, r2
 8006f58:	687a      	ldr	r2, [r7, #4]
 8006f5a:	6852      	ldr	r2, [r2, #4]
 8006f5c:	0611      	lsls	r1, r2, #24
 8006f5e:	687a      	ldr	r2, [r7, #4]
 8006f60:	68d2      	ldr	r2, [r2, #12]
 8006f62:	4311      	orrs	r1, r2
 8006f64:	687a      	ldr	r2, [r7, #4]
 8006f66:	69d2      	ldr	r2, [r2, #28]
 8006f68:	4311      	orrs	r1, r2
 8006f6a:	687a      	ldr	r2, [r7, #4]
 8006f6c:	6a12      	ldr	r2, [r2, #32]
 8006f6e:	4311      	orrs	r1, r2
 8006f70:	687a      	ldr	r2, [r7, #4]
 8006f72:	6812      	ldr	r2, [r2, #0]
 8006f74:	430b      	orrs	r3, r1
 8006f76:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	685a      	ldr	r2, [r3, #4]
 8006f7e:	4b12      	ldr	r3, [pc, #72]	; (8006fc8 <HAL_QSPI_Init+0xe4>)
 8006f80:	4013      	ands	r3, r2
 8006f82:	687a      	ldr	r2, [r7, #4]
 8006f84:	6912      	ldr	r2, [r2, #16]
 8006f86:	0411      	lsls	r1, r2, #16
 8006f88:	687a      	ldr	r2, [r7, #4]
 8006f8a:	6952      	ldr	r2, [r2, #20]
 8006f8c:	4311      	orrs	r1, r2
 8006f8e:	687a      	ldr	r2, [r7, #4]
 8006f90:	6992      	ldr	r2, [r2, #24]
 8006f92:	4311      	orrs	r1, r2
 8006f94:	687a      	ldr	r2, [r7, #4]
 8006f96:	6812      	ldr	r2, [r2, #0]
 8006f98:	430b      	orrs	r3, r1
 8006f9a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	681a      	ldr	r2, [r3, #0]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f042 0201 	orr.w	r2, r2, #1
 8006faa:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2201      	movs	r2, #1
 8006fb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8006fba:	7afb      	ldrb	r3, [r7, #11]
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3710      	adds	r7, #16
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}
 8006fc4:	00ffff2f 	.word	0x00ffff2f
 8006fc8:	ffe0f8fe 	.word	0xffe0f8fe

08006fcc <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b083      	sub	sp, #12
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
 8006fd4:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	683a      	ldr	r2, [r7, #0]
 8006fda:	649a      	str	r2, [r3, #72]	; 0x48
}
 8006fdc:	bf00      	nop
 8006fde:	370c      	adds	r7, #12
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe6:	4770      	bx	lr

08006fe8 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b084      	sub	sp, #16
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	60f8      	str	r0, [r7, #12]
 8006ff0:	60b9      	str	r1, [r7, #8]
 8006ff2:	603b      	str	r3, [r7, #0]
 8006ff4:	4613      	mov	r3, r2
 8006ff6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006ff8:	e01a      	b.n	8007030 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ffa:	69bb      	ldr	r3, [r7, #24]
 8006ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007000:	d016      	beq.n	8007030 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007002:	f7fc f8f1 	bl	80031e8 <HAL_GetTick>
 8007006:	4602      	mov	r2, r0
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	1ad3      	subs	r3, r2, r3
 800700c:	69ba      	ldr	r2, [r7, #24]
 800700e:	429a      	cmp	r2, r3
 8007010:	d302      	bcc.n	8007018 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8007012:	69bb      	ldr	r3, [r7, #24]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d10b      	bne.n	8007030 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2204      	movs	r2, #4
 800701c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007024:	f043 0201 	orr.w	r2, r3, #1
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800702c:	2301      	movs	r3, #1
 800702e:	e00e      	b.n	800704e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	689a      	ldr	r2, [r3, #8]
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	4013      	ands	r3, r2
 800703a:	2b00      	cmp	r3, #0
 800703c:	bf14      	ite	ne
 800703e:	2301      	movne	r3, #1
 8007040:	2300      	moveq	r3, #0
 8007042:	b2db      	uxtb	r3, r3
 8007044:	461a      	mov	r2, r3
 8007046:	79fb      	ldrb	r3, [r7, #7]
 8007048:	429a      	cmp	r2, r3
 800704a:	d1d6      	bne.n	8006ffa <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800704c:	2300      	movs	r3, #0
}
 800704e:	4618      	mov	r0, r3
 8007050:	3710      	adds	r7, #16
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}
	...

08007058 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b08c      	sub	sp, #48	; 0x30
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d101      	bne.n	800706a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007066:	2301      	movs	r3, #1
 8007068:	e3ff      	b.n	800786a <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f003 0301 	and.w	r3, r3, #1
 8007072:	2b00      	cmp	r3, #0
 8007074:	f000 8087 	beq.w	8007186 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007078:	4b99      	ldr	r3, [pc, #612]	; (80072e0 <HAL_RCC_OscConfig+0x288>)
 800707a:	691b      	ldr	r3, [r3, #16]
 800707c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007080:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007082:	4b97      	ldr	r3, [pc, #604]	; (80072e0 <HAL_RCC_OscConfig+0x288>)
 8007084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007086:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800708a:	2b10      	cmp	r3, #16
 800708c:	d007      	beq.n	800709e <HAL_RCC_OscConfig+0x46>
 800708e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007090:	2b18      	cmp	r3, #24
 8007092:	d110      	bne.n	80070b6 <HAL_RCC_OscConfig+0x5e>
 8007094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007096:	f003 0303 	and.w	r3, r3, #3
 800709a:	2b02      	cmp	r3, #2
 800709c:	d10b      	bne.n	80070b6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800709e:	4b90      	ldr	r3, [pc, #576]	; (80072e0 <HAL_RCC_OscConfig+0x288>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d06c      	beq.n	8007184 <HAL_RCC_OscConfig+0x12c>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d168      	bne.n	8007184 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80070b2:	2301      	movs	r3, #1
 80070b4:	e3d9      	b.n	800786a <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	685b      	ldr	r3, [r3, #4]
 80070ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070be:	d106      	bne.n	80070ce <HAL_RCC_OscConfig+0x76>
 80070c0:	4b87      	ldr	r3, [pc, #540]	; (80072e0 <HAL_RCC_OscConfig+0x288>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a86      	ldr	r2, [pc, #536]	; (80072e0 <HAL_RCC_OscConfig+0x288>)
 80070c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070ca:	6013      	str	r3, [r2, #0]
 80070cc:	e02e      	b.n	800712c <HAL_RCC_OscConfig+0xd4>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	685b      	ldr	r3, [r3, #4]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d10c      	bne.n	80070f0 <HAL_RCC_OscConfig+0x98>
 80070d6:	4b82      	ldr	r3, [pc, #520]	; (80072e0 <HAL_RCC_OscConfig+0x288>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a81      	ldr	r2, [pc, #516]	; (80072e0 <HAL_RCC_OscConfig+0x288>)
 80070dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070e0:	6013      	str	r3, [r2, #0]
 80070e2:	4b7f      	ldr	r3, [pc, #508]	; (80072e0 <HAL_RCC_OscConfig+0x288>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a7e      	ldr	r2, [pc, #504]	; (80072e0 <HAL_RCC_OscConfig+0x288>)
 80070e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80070ec:	6013      	str	r3, [r2, #0]
 80070ee:	e01d      	b.n	800712c <HAL_RCC_OscConfig+0xd4>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	685b      	ldr	r3, [r3, #4]
 80070f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80070f8:	d10c      	bne.n	8007114 <HAL_RCC_OscConfig+0xbc>
 80070fa:	4b79      	ldr	r3, [pc, #484]	; (80072e0 <HAL_RCC_OscConfig+0x288>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4a78      	ldr	r2, [pc, #480]	; (80072e0 <HAL_RCC_OscConfig+0x288>)
 8007100:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007104:	6013      	str	r3, [r2, #0]
 8007106:	4b76      	ldr	r3, [pc, #472]	; (80072e0 <HAL_RCC_OscConfig+0x288>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a75      	ldr	r2, [pc, #468]	; (80072e0 <HAL_RCC_OscConfig+0x288>)
 800710c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007110:	6013      	str	r3, [r2, #0]
 8007112:	e00b      	b.n	800712c <HAL_RCC_OscConfig+0xd4>
 8007114:	4b72      	ldr	r3, [pc, #456]	; (80072e0 <HAL_RCC_OscConfig+0x288>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4a71      	ldr	r2, [pc, #452]	; (80072e0 <HAL_RCC_OscConfig+0x288>)
 800711a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800711e:	6013      	str	r3, [r2, #0]
 8007120:	4b6f      	ldr	r3, [pc, #444]	; (80072e0 <HAL_RCC_OscConfig+0x288>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a6e      	ldr	r2, [pc, #440]	; (80072e0 <HAL_RCC_OscConfig+0x288>)
 8007126:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800712a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	685b      	ldr	r3, [r3, #4]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d013      	beq.n	800715c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007134:	f7fc f858 	bl	80031e8 <HAL_GetTick>
 8007138:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800713a:	e008      	b.n	800714e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800713c:	f7fc f854 	bl	80031e8 <HAL_GetTick>
 8007140:	4602      	mov	r2, r0
 8007142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007144:	1ad3      	subs	r3, r2, r3
 8007146:	2b64      	cmp	r3, #100	; 0x64
 8007148:	d901      	bls.n	800714e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800714a:	2303      	movs	r3, #3
 800714c:	e38d      	b.n	800786a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800714e:	4b64      	ldr	r3, [pc, #400]	; (80072e0 <HAL_RCC_OscConfig+0x288>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007156:	2b00      	cmp	r3, #0
 8007158:	d0f0      	beq.n	800713c <HAL_RCC_OscConfig+0xe4>
 800715a:	e014      	b.n	8007186 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800715c:	f7fc f844 	bl	80031e8 <HAL_GetTick>
 8007160:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007162:	e008      	b.n	8007176 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007164:	f7fc f840 	bl	80031e8 <HAL_GetTick>
 8007168:	4602      	mov	r2, r0
 800716a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800716c:	1ad3      	subs	r3, r2, r3
 800716e:	2b64      	cmp	r3, #100	; 0x64
 8007170:	d901      	bls.n	8007176 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007172:	2303      	movs	r3, #3
 8007174:	e379      	b.n	800786a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007176:	4b5a      	ldr	r3, [pc, #360]	; (80072e0 <HAL_RCC_OscConfig+0x288>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800717e:	2b00      	cmp	r3, #0
 8007180:	d1f0      	bne.n	8007164 <HAL_RCC_OscConfig+0x10c>
 8007182:	e000      	b.n	8007186 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007184:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f003 0302 	and.w	r3, r3, #2
 800718e:	2b00      	cmp	r3, #0
 8007190:	f000 80ae 	beq.w	80072f0 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007194:	4b52      	ldr	r3, [pc, #328]	; (80072e0 <HAL_RCC_OscConfig+0x288>)
 8007196:	691b      	ldr	r3, [r3, #16]
 8007198:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800719c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800719e:	4b50      	ldr	r3, [pc, #320]	; (80072e0 <HAL_RCC_OscConfig+0x288>)
 80071a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071a2:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80071a4:	6a3b      	ldr	r3, [r7, #32]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d007      	beq.n	80071ba <HAL_RCC_OscConfig+0x162>
 80071aa:	6a3b      	ldr	r3, [r7, #32]
 80071ac:	2b18      	cmp	r3, #24
 80071ae:	d13a      	bne.n	8007226 <HAL_RCC_OscConfig+0x1ce>
 80071b0:	69fb      	ldr	r3, [r7, #28]
 80071b2:	f003 0303 	and.w	r3, r3, #3
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d135      	bne.n	8007226 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80071ba:	4b49      	ldr	r3, [pc, #292]	; (80072e0 <HAL_RCC_OscConfig+0x288>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f003 0304 	and.w	r3, r3, #4
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d005      	beq.n	80071d2 <HAL_RCC_OscConfig+0x17a>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	68db      	ldr	r3, [r3, #12]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d101      	bne.n	80071d2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80071ce:	2301      	movs	r3, #1
 80071d0:	e34b      	b.n	800786a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071d2:	f7fc f839 	bl	8003248 <HAL_GetREVID>
 80071d6:	4603      	mov	r3, r0
 80071d8:	f241 0203 	movw	r2, #4099	; 0x1003
 80071dc:	4293      	cmp	r3, r2
 80071de:	d817      	bhi.n	8007210 <HAL_RCC_OscConfig+0x1b8>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	691b      	ldr	r3, [r3, #16]
 80071e4:	2b40      	cmp	r3, #64	; 0x40
 80071e6:	d108      	bne.n	80071fa <HAL_RCC_OscConfig+0x1a2>
 80071e8:	4b3d      	ldr	r3, [pc, #244]	; (80072e0 <HAL_RCC_OscConfig+0x288>)
 80071ea:	685b      	ldr	r3, [r3, #4]
 80071ec:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80071f0:	4a3b      	ldr	r2, [pc, #236]	; (80072e0 <HAL_RCC_OscConfig+0x288>)
 80071f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071f6:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80071f8:	e07a      	b.n	80072f0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071fa:	4b39      	ldr	r3, [pc, #228]	; (80072e0 <HAL_RCC_OscConfig+0x288>)
 80071fc:	685b      	ldr	r3, [r3, #4]
 80071fe:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	691b      	ldr	r3, [r3, #16]
 8007206:	031b      	lsls	r3, r3, #12
 8007208:	4935      	ldr	r1, [pc, #212]	; (80072e0 <HAL_RCC_OscConfig+0x288>)
 800720a:	4313      	orrs	r3, r2
 800720c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800720e:	e06f      	b.n	80072f0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007210:	4b33      	ldr	r3, [pc, #204]	; (80072e0 <HAL_RCC_OscConfig+0x288>)
 8007212:	685b      	ldr	r3, [r3, #4]
 8007214:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	691b      	ldr	r3, [r3, #16]
 800721c:	061b      	lsls	r3, r3, #24
 800721e:	4930      	ldr	r1, [pc, #192]	; (80072e0 <HAL_RCC_OscConfig+0x288>)
 8007220:	4313      	orrs	r3, r2
 8007222:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007224:	e064      	b.n	80072f0 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	68db      	ldr	r3, [r3, #12]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d045      	beq.n	80072ba <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800722e:	4b2c      	ldr	r3, [pc, #176]	; (80072e0 <HAL_RCC_OscConfig+0x288>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f023 0219 	bic.w	r2, r3, #25
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	68db      	ldr	r3, [r3, #12]
 800723a:	4929      	ldr	r1, [pc, #164]	; (80072e0 <HAL_RCC_OscConfig+0x288>)
 800723c:	4313      	orrs	r3, r2
 800723e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007240:	f7fb ffd2 	bl	80031e8 <HAL_GetTick>
 8007244:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007246:	e008      	b.n	800725a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007248:	f7fb ffce 	bl	80031e8 <HAL_GetTick>
 800724c:	4602      	mov	r2, r0
 800724e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007250:	1ad3      	subs	r3, r2, r3
 8007252:	2b02      	cmp	r3, #2
 8007254:	d901      	bls.n	800725a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8007256:	2303      	movs	r3, #3
 8007258:	e307      	b.n	800786a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800725a:	4b21      	ldr	r3, [pc, #132]	; (80072e0 <HAL_RCC_OscConfig+0x288>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f003 0304 	and.w	r3, r3, #4
 8007262:	2b00      	cmp	r3, #0
 8007264:	d0f0      	beq.n	8007248 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007266:	f7fb ffef 	bl	8003248 <HAL_GetREVID>
 800726a:	4603      	mov	r3, r0
 800726c:	f241 0203 	movw	r2, #4099	; 0x1003
 8007270:	4293      	cmp	r3, r2
 8007272:	d817      	bhi.n	80072a4 <HAL_RCC_OscConfig+0x24c>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	691b      	ldr	r3, [r3, #16]
 8007278:	2b40      	cmp	r3, #64	; 0x40
 800727a:	d108      	bne.n	800728e <HAL_RCC_OscConfig+0x236>
 800727c:	4b18      	ldr	r3, [pc, #96]	; (80072e0 <HAL_RCC_OscConfig+0x288>)
 800727e:	685b      	ldr	r3, [r3, #4]
 8007280:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007284:	4a16      	ldr	r2, [pc, #88]	; (80072e0 <HAL_RCC_OscConfig+0x288>)
 8007286:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800728a:	6053      	str	r3, [r2, #4]
 800728c:	e030      	b.n	80072f0 <HAL_RCC_OscConfig+0x298>
 800728e:	4b14      	ldr	r3, [pc, #80]	; (80072e0 <HAL_RCC_OscConfig+0x288>)
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	691b      	ldr	r3, [r3, #16]
 800729a:	031b      	lsls	r3, r3, #12
 800729c:	4910      	ldr	r1, [pc, #64]	; (80072e0 <HAL_RCC_OscConfig+0x288>)
 800729e:	4313      	orrs	r3, r2
 80072a0:	604b      	str	r3, [r1, #4]
 80072a2:	e025      	b.n	80072f0 <HAL_RCC_OscConfig+0x298>
 80072a4:	4b0e      	ldr	r3, [pc, #56]	; (80072e0 <HAL_RCC_OscConfig+0x288>)
 80072a6:	685b      	ldr	r3, [r3, #4]
 80072a8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	691b      	ldr	r3, [r3, #16]
 80072b0:	061b      	lsls	r3, r3, #24
 80072b2:	490b      	ldr	r1, [pc, #44]	; (80072e0 <HAL_RCC_OscConfig+0x288>)
 80072b4:	4313      	orrs	r3, r2
 80072b6:	604b      	str	r3, [r1, #4]
 80072b8:	e01a      	b.n	80072f0 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80072ba:	4b09      	ldr	r3, [pc, #36]	; (80072e0 <HAL_RCC_OscConfig+0x288>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4a08      	ldr	r2, [pc, #32]	; (80072e0 <HAL_RCC_OscConfig+0x288>)
 80072c0:	f023 0301 	bic.w	r3, r3, #1
 80072c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072c6:	f7fb ff8f 	bl	80031e8 <HAL_GetTick>
 80072ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80072cc:	e00a      	b.n	80072e4 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80072ce:	f7fb ff8b 	bl	80031e8 <HAL_GetTick>
 80072d2:	4602      	mov	r2, r0
 80072d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d6:	1ad3      	subs	r3, r2, r3
 80072d8:	2b02      	cmp	r3, #2
 80072da:	d903      	bls.n	80072e4 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80072dc:	2303      	movs	r3, #3
 80072de:	e2c4      	b.n	800786a <HAL_RCC_OscConfig+0x812>
 80072e0:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80072e4:	4ba4      	ldr	r3, [pc, #656]	; (8007578 <HAL_RCC_OscConfig+0x520>)
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f003 0304 	and.w	r3, r3, #4
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d1ee      	bne.n	80072ce <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f003 0310 	and.w	r3, r3, #16
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	f000 80a9 	beq.w	8007450 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80072fe:	4b9e      	ldr	r3, [pc, #632]	; (8007578 <HAL_RCC_OscConfig+0x520>)
 8007300:	691b      	ldr	r3, [r3, #16]
 8007302:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007306:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007308:	4b9b      	ldr	r3, [pc, #620]	; (8007578 <HAL_RCC_OscConfig+0x520>)
 800730a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800730c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800730e:	69bb      	ldr	r3, [r7, #24]
 8007310:	2b08      	cmp	r3, #8
 8007312:	d007      	beq.n	8007324 <HAL_RCC_OscConfig+0x2cc>
 8007314:	69bb      	ldr	r3, [r7, #24]
 8007316:	2b18      	cmp	r3, #24
 8007318:	d13a      	bne.n	8007390 <HAL_RCC_OscConfig+0x338>
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	f003 0303 	and.w	r3, r3, #3
 8007320:	2b01      	cmp	r3, #1
 8007322:	d135      	bne.n	8007390 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007324:	4b94      	ldr	r3, [pc, #592]	; (8007578 <HAL_RCC_OscConfig+0x520>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800732c:	2b00      	cmp	r3, #0
 800732e:	d005      	beq.n	800733c <HAL_RCC_OscConfig+0x2e4>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	69db      	ldr	r3, [r3, #28]
 8007334:	2b80      	cmp	r3, #128	; 0x80
 8007336:	d001      	beq.n	800733c <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8007338:	2301      	movs	r3, #1
 800733a:	e296      	b.n	800786a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800733c:	f7fb ff84 	bl	8003248 <HAL_GetREVID>
 8007340:	4603      	mov	r3, r0
 8007342:	f241 0203 	movw	r2, #4099	; 0x1003
 8007346:	4293      	cmp	r3, r2
 8007348:	d817      	bhi.n	800737a <HAL_RCC_OscConfig+0x322>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6a1b      	ldr	r3, [r3, #32]
 800734e:	2b20      	cmp	r3, #32
 8007350:	d108      	bne.n	8007364 <HAL_RCC_OscConfig+0x30c>
 8007352:	4b89      	ldr	r3, [pc, #548]	; (8007578 <HAL_RCC_OscConfig+0x520>)
 8007354:	685b      	ldr	r3, [r3, #4]
 8007356:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800735a:	4a87      	ldr	r2, [pc, #540]	; (8007578 <HAL_RCC_OscConfig+0x520>)
 800735c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007360:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007362:	e075      	b.n	8007450 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007364:	4b84      	ldr	r3, [pc, #528]	; (8007578 <HAL_RCC_OscConfig+0x520>)
 8007366:	685b      	ldr	r3, [r3, #4]
 8007368:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6a1b      	ldr	r3, [r3, #32]
 8007370:	069b      	lsls	r3, r3, #26
 8007372:	4981      	ldr	r1, [pc, #516]	; (8007578 <HAL_RCC_OscConfig+0x520>)
 8007374:	4313      	orrs	r3, r2
 8007376:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007378:	e06a      	b.n	8007450 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800737a:	4b7f      	ldr	r3, [pc, #508]	; (8007578 <HAL_RCC_OscConfig+0x520>)
 800737c:	68db      	ldr	r3, [r3, #12]
 800737e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6a1b      	ldr	r3, [r3, #32]
 8007386:	061b      	lsls	r3, r3, #24
 8007388:	497b      	ldr	r1, [pc, #492]	; (8007578 <HAL_RCC_OscConfig+0x520>)
 800738a:	4313      	orrs	r3, r2
 800738c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800738e:	e05f      	b.n	8007450 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	69db      	ldr	r3, [r3, #28]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d042      	beq.n	800741e <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007398:	4b77      	ldr	r3, [pc, #476]	; (8007578 <HAL_RCC_OscConfig+0x520>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4a76      	ldr	r2, [pc, #472]	; (8007578 <HAL_RCC_OscConfig+0x520>)
 800739e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073a4:	f7fb ff20 	bl	80031e8 <HAL_GetTick>
 80073a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80073aa:	e008      	b.n	80073be <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80073ac:	f7fb ff1c 	bl	80031e8 <HAL_GetTick>
 80073b0:	4602      	mov	r2, r0
 80073b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b4:	1ad3      	subs	r3, r2, r3
 80073b6:	2b02      	cmp	r3, #2
 80073b8:	d901      	bls.n	80073be <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80073ba:	2303      	movs	r3, #3
 80073bc:	e255      	b.n	800786a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80073be:	4b6e      	ldr	r3, [pc, #440]	; (8007578 <HAL_RCC_OscConfig+0x520>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d0f0      	beq.n	80073ac <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80073ca:	f7fb ff3d 	bl	8003248 <HAL_GetREVID>
 80073ce:	4603      	mov	r3, r0
 80073d0:	f241 0203 	movw	r2, #4099	; 0x1003
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d817      	bhi.n	8007408 <HAL_RCC_OscConfig+0x3b0>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6a1b      	ldr	r3, [r3, #32]
 80073dc:	2b20      	cmp	r3, #32
 80073de:	d108      	bne.n	80073f2 <HAL_RCC_OscConfig+0x39a>
 80073e0:	4b65      	ldr	r3, [pc, #404]	; (8007578 <HAL_RCC_OscConfig+0x520>)
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80073e8:	4a63      	ldr	r2, [pc, #396]	; (8007578 <HAL_RCC_OscConfig+0x520>)
 80073ea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80073ee:	6053      	str	r3, [r2, #4]
 80073f0:	e02e      	b.n	8007450 <HAL_RCC_OscConfig+0x3f8>
 80073f2:	4b61      	ldr	r3, [pc, #388]	; (8007578 <HAL_RCC_OscConfig+0x520>)
 80073f4:	685b      	ldr	r3, [r3, #4]
 80073f6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6a1b      	ldr	r3, [r3, #32]
 80073fe:	069b      	lsls	r3, r3, #26
 8007400:	495d      	ldr	r1, [pc, #372]	; (8007578 <HAL_RCC_OscConfig+0x520>)
 8007402:	4313      	orrs	r3, r2
 8007404:	604b      	str	r3, [r1, #4]
 8007406:	e023      	b.n	8007450 <HAL_RCC_OscConfig+0x3f8>
 8007408:	4b5b      	ldr	r3, [pc, #364]	; (8007578 <HAL_RCC_OscConfig+0x520>)
 800740a:	68db      	ldr	r3, [r3, #12]
 800740c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6a1b      	ldr	r3, [r3, #32]
 8007414:	061b      	lsls	r3, r3, #24
 8007416:	4958      	ldr	r1, [pc, #352]	; (8007578 <HAL_RCC_OscConfig+0x520>)
 8007418:	4313      	orrs	r3, r2
 800741a:	60cb      	str	r3, [r1, #12]
 800741c:	e018      	b.n	8007450 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800741e:	4b56      	ldr	r3, [pc, #344]	; (8007578 <HAL_RCC_OscConfig+0x520>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	4a55      	ldr	r2, [pc, #340]	; (8007578 <HAL_RCC_OscConfig+0x520>)
 8007424:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007428:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800742a:	f7fb fedd 	bl	80031e8 <HAL_GetTick>
 800742e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007430:	e008      	b.n	8007444 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007432:	f7fb fed9 	bl	80031e8 <HAL_GetTick>
 8007436:	4602      	mov	r2, r0
 8007438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800743a:	1ad3      	subs	r3, r2, r3
 800743c:	2b02      	cmp	r3, #2
 800743e:	d901      	bls.n	8007444 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8007440:	2303      	movs	r3, #3
 8007442:	e212      	b.n	800786a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007444:	4b4c      	ldr	r3, [pc, #304]	; (8007578 <HAL_RCC_OscConfig+0x520>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800744c:	2b00      	cmp	r3, #0
 800744e:	d1f0      	bne.n	8007432 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f003 0308 	and.w	r3, r3, #8
 8007458:	2b00      	cmp	r3, #0
 800745a:	d036      	beq.n	80074ca <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	695b      	ldr	r3, [r3, #20]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d019      	beq.n	8007498 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007464:	4b44      	ldr	r3, [pc, #272]	; (8007578 <HAL_RCC_OscConfig+0x520>)
 8007466:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007468:	4a43      	ldr	r2, [pc, #268]	; (8007578 <HAL_RCC_OscConfig+0x520>)
 800746a:	f043 0301 	orr.w	r3, r3, #1
 800746e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007470:	f7fb feba 	bl	80031e8 <HAL_GetTick>
 8007474:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007476:	e008      	b.n	800748a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007478:	f7fb feb6 	bl	80031e8 <HAL_GetTick>
 800747c:	4602      	mov	r2, r0
 800747e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007480:	1ad3      	subs	r3, r2, r3
 8007482:	2b02      	cmp	r3, #2
 8007484:	d901      	bls.n	800748a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8007486:	2303      	movs	r3, #3
 8007488:	e1ef      	b.n	800786a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800748a:	4b3b      	ldr	r3, [pc, #236]	; (8007578 <HAL_RCC_OscConfig+0x520>)
 800748c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800748e:	f003 0302 	and.w	r3, r3, #2
 8007492:	2b00      	cmp	r3, #0
 8007494:	d0f0      	beq.n	8007478 <HAL_RCC_OscConfig+0x420>
 8007496:	e018      	b.n	80074ca <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007498:	4b37      	ldr	r3, [pc, #220]	; (8007578 <HAL_RCC_OscConfig+0x520>)
 800749a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800749c:	4a36      	ldr	r2, [pc, #216]	; (8007578 <HAL_RCC_OscConfig+0x520>)
 800749e:	f023 0301 	bic.w	r3, r3, #1
 80074a2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074a4:	f7fb fea0 	bl	80031e8 <HAL_GetTick>
 80074a8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80074aa:	e008      	b.n	80074be <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80074ac:	f7fb fe9c 	bl	80031e8 <HAL_GetTick>
 80074b0:	4602      	mov	r2, r0
 80074b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b4:	1ad3      	subs	r3, r2, r3
 80074b6:	2b02      	cmp	r3, #2
 80074b8:	d901      	bls.n	80074be <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80074ba:	2303      	movs	r3, #3
 80074bc:	e1d5      	b.n	800786a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80074be:	4b2e      	ldr	r3, [pc, #184]	; (8007578 <HAL_RCC_OscConfig+0x520>)
 80074c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074c2:	f003 0302 	and.w	r3, r3, #2
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d1f0      	bne.n	80074ac <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f003 0320 	and.w	r3, r3, #32
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d036      	beq.n	8007544 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	699b      	ldr	r3, [r3, #24]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d019      	beq.n	8007512 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80074de:	4b26      	ldr	r3, [pc, #152]	; (8007578 <HAL_RCC_OscConfig+0x520>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4a25      	ldr	r2, [pc, #148]	; (8007578 <HAL_RCC_OscConfig+0x520>)
 80074e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80074e8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80074ea:	f7fb fe7d 	bl	80031e8 <HAL_GetTick>
 80074ee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80074f0:	e008      	b.n	8007504 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80074f2:	f7fb fe79 	bl	80031e8 <HAL_GetTick>
 80074f6:	4602      	mov	r2, r0
 80074f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074fa:	1ad3      	subs	r3, r2, r3
 80074fc:	2b02      	cmp	r3, #2
 80074fe:	d901      	bls.n	8007504 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8007500:	2303      	movs	r3, #3
 8007502:	e1b2      	b.n	800786a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007504:	4b1c      	ldr	r3, [pc, #112]	; (8007578 <HAL_RCC_OscConfig+0x520>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800750c:	2b00      	cmp	r3, #0
 800750e:	d0f0      	beq.n	80074f2 <HAL_RCC_OscConfig+0x49a>
 8007510:	e018      	b.n	8007544 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007512:	4b19      	ldr	r3, [pc, #100]	; (8007578 <HAL_RCC_OscConfig+0x520>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4a18      	ldr	r2, [pc, #96]	; (8007578 <HAL_RCC_OscConfig+0x520>)
 8007518:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800751c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800751e:	f7fb fe63 	bl	80031e8 <HAL_GetTick>
 8007522:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007524:	e008      	b.n	8007538 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007526:	f7fb fe5f 	bl	80031e8 <HAL_GetTick>
 800752a:	4602      	mov	r2, r0
 800752c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800752e:	1ad3      	subs	r3, r2, r3
 8007530:	2b02      	cmp	r3, #2
 8007532:	d901      	bls.n	8007538 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8007534:	2303      	movs	r3, #3
 8007536:	e198      	b.n	800786a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007538:	4b0f      	ldr	r3, [pc, #60]	; (8007578 <HAL_RCC_OscConfig+0x520>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007540:	2b00      	cmp	r3, #0
 8007542:	d1f0      	bne.n	8007526 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f003 0304 	and.w	r3, r3, #4
 800754c:	2b00      	cmp	r3, #0
 800754e:	f000 8085 	beq.w	800765c <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007552:	4b0a      	ldr	r3, [pc, #40]	; (800757c <HAL_RCC_OscConfig+0x524>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	4a09      	ldr	r2, [pc, #36]	; (800757c <HAL_RCC_OscConfig+0x524>)
 8007558:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800755c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800755e:	f7fb fe43 	bl	80031e8 <HAL_GetTick>
 8007562:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007564:	e00c      	b.n	8007580 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007566:	f7fb fe3f 	bl	80031e8 <HAL_GetTick>
 800756a:	4602      	mov	r2, r0
 800756c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800756e:	1ad3      	subs	r3, r2, r3
 8007570:	2b64      	cmp	r3, #100	; 0x64
 8007572:	d905      	bls.n	8007580 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8007574:	2303      	movs	r3, #3
 8007576:	e178      	b.n	800786a <HAL_RCC_OscConfig+0x812>
 8007578:	58024400 	.word	0x58024400
 800757c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007580:	4b96      	ldr	r3, [pc, #600]	; (80077dc <HAL_RCC_OscConfig+0x784>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007588:	2b00      	cmp	r3, #0
 800758a:	d0ec      	beq.n	8007566 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	689b      	ldr	r3, [r3, #8]
 8007590:	2b01      	cmp	r3, #1
 8007592:	d106      	bne.n	80075a2 <HAL_RCC_OscConfig+0x54a>
 8007594:	4b92      	ldr	r3, [pc, #584]	; (80077e0 <HAL_RCC_OscConfig+0x788>)
 8007596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007598:	4a91      	ldr	r2, [pc, #580]	; (80077e0 <HAL_RCC_OscConfig+0x788>)
 800759a:	f043 0301 	orr.w	r3, r3, #1
 800759e:	6713      	str	r3, [r2, #112]	; 0x70
 80075a0:	e02d      	b.n	80075fe <HAL_RCC_OscConfig+0x5a6>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	689b      	ldr	r3, [r3, #8]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d10c      	bne.n	80075c4 <HAL_RCC_OscConfig+0x56c>
 80075aa:	4b8d      	ldr	r3, [pc, #564]	; (80077e0 <HAL_RCC_OscConfig+0x788>)
 80075ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075ae:	4a8c      	ldr	r2, [pc, #560]	; (80077e0 <HAL_RCC_OscConfig+0x788>)
 80075b0:	f023 0301 	bic.w	r3, r3, #1
 80075b4:	6713      	str	r3, [r2, #112]	; 0x70
 80075b6:	4b8a      	ldr	r3, [pc, #552]	; (80077e0 <HAL_RCC_OscConfig+0x788>)
 80075b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075ba:	4a89      	ldr	r2, [pc, #548]	; (80077e0 <HAL_RCC_OscConfig+0x788>)
 80075bc:	f023 0304 	bic.w	r3, r3, #4
 80075c0:	6713      	str	r3, [r2, #112]	; 0x70
 80075c2:	e01c      	b.n	80075fe <HAL_RCC_OscConfig+0x5a6>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	689b      	ldr	r3, [r3, #8]
 80075c8:	2b05      	cmp	r3, #5
 80075ca:	d10c      	bne.n	80075e6 <HAL_RCC_OscConfig+0x58e>
 80075cc:	4b84      	ldr	r3, [pc, #528]	; (80077e0 <HAL_RCC_OscConfig+0x788>)
 80075ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075d0:	4a83      	ldr	r2, [pc, #524]	; (80077e0 <HAL_RCC_OscConfig+0x788>)
 80075d2:	f043 0304 	orr.w	r3, r3, #4
 80075d6:	6713      	str	r3, [r2, #112]	; 0x70
 80075d8:	4b81      	ldr	r3, [pc, #516]	; (80077e0 <HAL_RCC_OscConfig+0x788>)
 80075da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075dc:	4a80      	ldr	r2, [pc, #512]	; (80077e0 <HAL_RCC_OscConfig+0x788>)
 80075de:	f043 0301 	orr.w	r3, r3, #1
 80075e2:	6713      	str	r3, [r2, #112]	; 0x70
 80075e4:	e00b      	b.n	80075fe <HAL_RCC_OscConfig+0x5a6>
 80075e6:	4b7e      	ldr	r3, [pc, #504]	; (80077e0 <HAL_RCC_OscConfig+0x788>)
 80075e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075ea:	4a7d      	ldr	r2, [pc, #500]	; (80077e0 <HAL_RCC_OscConfig+0x788>)
 80075ec:	f023 0301 	bic.w	r3, r3, #1
 80075f0:	6713      	str	r3, [r2, #112]	; 0x70
 80075f2:	4b7b      	ldr	r3, [pc, #492]	; (80077e0 <HAL_RCC_OscConfig+0x788>)
 80075f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075f6:	4a7a      	ldr	r2, [pc, #488]	; (80077e0 <HAL_RCC_OscConfig+0x788>)
 80075f8:	f023 0304 	bic.w	r3, r3, #4
 80075fc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	689b      	ldr	r3, [r3, #8]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d015      	beq.n	8007632 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007606:	f7fb fdef 	bl	80031e8 <HAL_GetTick>
 800760a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800760c:	e00a      	b.n	8007624 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800760e:	f7fb fdeb 	bl	80031e8 <HAL_GetTick>
 8007612:	4602      	mov	r2, r0
 8007614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007616:	1ad3      	subs	r3, r2, r3
 8007618:	f241 3288 	movw	r2, #5000	; 0x1388
 800761c:	4293      	cmp	r3, r2
 800761e:	d901      	bls.n	8007624 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8007620:	2303      	movs	r3, #3
 8007622:	e122      	b.n	800786a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007624:	4b6e      	ldr	r3, [pc, #440]	; (80077e0 <HAL_RCC_OscConfig+0x788>)
 8007626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007628:	f003 0302 	and.w	r3, r3, #2
 800762c:	2b00      	cmp	r3, #0
 800762e:	d0ee      	beq.n	800760e <HAL_RCC_OscConfig+0x5b6>
 8007630:	e014      	b.n	800765c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007632:	f7fb fdd9 	bl	80031e8 <HAL_GetTick>
 8007636:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007638:	e00a      	b.n	8007650 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800763a:	f7fb fdd5 	bl	80031e8 <HAL_GetTick>
 800763e:	4602      	mov	r2, r0
 8007640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007642:	1ad3      	subs	r3, r2, r3
 8007644:	f241 3288 	movw	r2, #5000	; 0x1388
 8007648:	4293      	cmp	r3, r2
 800764a:	d901      	bls.n	8007650 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 800764c:	2303      	movs	r3, #3
 800764e:	e10c      	b.n	800786a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007650:	4b63      	ldr	r3, [pc, #396]	; (80077e0 <HAL_RCC_OscConfig+0x788>)
 8007652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007654:	f003 0302 	and.w	r3, r3, #2
 8007658:	2b00      	cmp	r3, #0
 800765a:	d1ee      	bne.n	800763a <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007660:	2b00      	cmp	r3, #0
 8007662:	f000 8101 	beq.w	8007868 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007666:	4b5e      	ldr	r3, [pc, #376]	; (80077e0 <HAL_RCC_OscConfig+0x788>)
 8007668:	691b      	ldr	r3, [r3, #16]
 800766a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800766e:	2b18      	cmp	r3, #24
 8007670:	f000 80bc 	beq.w	80077ec <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007678:	2b02      	cmp	r3, #2
 800767a:	f040 8095 	bne.w	80077a8 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800767e:	4b58      	ldr	r3, [pc, #352]	; (80077e0 <HAL_RCC_OscConfig+0x788>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4a57      	ldr	r2, [pc, #348]	; (80077e0 <HAL_RCC_OscConfig+0x788>)
 8007684:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007688:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800768a:	f7fb fdad 	bl	80031e8 <HAL_GetTick>
 800768e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007690:	e008      	b.n	80076a4 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007692:	f7fb fda9 	bl	80031e8 <HAL_GetTick>
 8007696:	4602      	mov	r2, r0
 8007698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800769a:	1ad3      	subs	r3, r2, r3
 800769c:	2b02      	cmp	r3, #2
 800769e:	d901      	bls.n	80076a4 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80076a0:	2303      	movs	r3, #3
 80076a2:	e0e2      	b.n	800786a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80076a4:	4b4e      	ldr	r3, [pc, #312]	; (80077e0 <HAL_RCC_OscConfig+0x788>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d1f0      	bne.n	8007692 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80076b0:	4b4b      	ldr	r3, [pc, #300]	; (80077e0 <HAL_RCC_OscConfig+0x788>)
 80076b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80076b4:	4b4b      	ldr	r3, [pc, #300]	; (80077e4 <HAL_RCC_OscConfig+0x78c>)
 80076b6:	4013      	ands	r3, r2
 80076b8:	687a      	ldr	r2, [r7, #4]
 80076ba:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80076bc:	687a      	ldr	r2, [r7, #4]
 80076be:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80076c0:	0112      	lsls	r2, r2, #4
 80076c2:	430a      	orrs	r2, r1
 80076c4:	4946      	ldr	r1, [pc, #280]	; (80077e0 <HAL_RCC_OscConfig+0x788>)
 80076c6:	4313      	orrs	r3, r2
 80076c8:	628b      	str	r3, [r1, #40]	; 0x28
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ce:	3b01      	subs	r3, #1
 80076d0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076d8:	3b01      	subs	r3, #1
 80076da:	025b      	lsls	r3, r3, #9
 80076dc:	b29b      	uxth	r3, r3
 80076de:	431a      	orrs	r2, r3
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076e4:	3b01      	subs	r3, #1
 80076e6:	041b      	lsls	r3, r3, #16
 80076e8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80076ec:	431a      	orrs	r2, r3
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076f2:	3b01      	subs	r3, #1
 80076f4:	061b      	lsls	r3, r3, #24
 80076f6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80076fa:	4939      	ldr	r1, [pc, #228]	; (80077e0 <HAL_RCC_OscConfig+0x788>)
 80076fc:	4313      	orrs	r3, r2
 80076fe:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8007700:	4b37      	ldr	r3, [pc, #220]	; (80077e0 <HAL_RCC_OscConfig+0x788>)
 8007702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007704:	4a36      	ldr	r2, [pc, #216]	; (80077e0 <HAL_RCC_OscConfig+0x788>)
 8007706:	f023 0301 	bic.w	r3, r3, #1
 800770a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800770c:	4b34      	ldr	r3, [pc, #208]	; (80077e0 <HAL_RCC_OscConfig+0x788>)
 800770e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007710:	4b35      	ldr	r3, [pc, #212]	; (80077e8 <HAL_RCC_OscConfig+0x790>)
 8007712:	4013      	ands	r3, r2
 8007714:	687a      	ldr	r2, [r7, #4]
 8007716:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007718:	00d2      	lsls	r2, r2, #3
 800771a:	4931      	ldr	r1, [pc, #196]	; (80077e0 <HAL_RCC_OscConfig+0x788>)
 800771c:	4313      	orrs	r3, r2
 800771e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007720:	4b2f      	ldr	r3, [pc, #188]	; (80077e0 <HAL_RCC_OscConfig+0x788>)
 8007722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007724:	f023 020c 	bic.w	r2, r3, #12
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800772c:	492c      	ldr	r1, [pc, #176]	; (80077e0 <HAL_RCC_OscConfig+0x788>)
 800772e:	4313      	orrs	r3, r2
 8007730:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007732:	4b2b      	ldr	r3, [pc, #172]	; (80077e0 <HAL_RCC_OscConfig+0x788>)
 8007734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007736:	f023 0202 	bic.w	r2, r3, #2
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800773e:	4928      	ldr	r1, [pc, #160]	; (80077e0 <HAL_RCC_OscConfig+0x788>)
 8007740:	4313      	orrs	r3, r2
 8007742:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007744:	4b26      	ldr	r3, [pc, #152]	; (80077e0 <HAL_RCC_OscConfig+0x788>)
 8007746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007748:	4a25      	ldr	r2, [pc, #148]	; (80077e0 <HAL_RCC_OscConfig+0x788>)
 800774a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800774e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007750:	4b23      	ldr	r3, [pc, #140]	; (80077e0 <HAL_RCC_OscConfig+0x788>)
 8007752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007754:	4a22      	ldr	r2, [pc, #136]	; (80077e0 <HAL_RCC_OscConfig+0x788>)
 8007756:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800775a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800775c:	4b20      	ldr	r3, [pc, #128]	; (80077e0 <HAL_RCC_OscConfig+0x788>)
 800775e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007760:	4a1f      	ldr	r2, [pc, #124]	; (80077e0 <HAL_RCC_OscConfig+0x788>)
 8007762:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007766:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8007768:	4b1d      	ldr	r3, [pc, #116]	; (80077e0 <HAL_RCC_OscConfig+0x788>)
 800776a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800776c:	4a1c      	ldr	r2, [pc, #112]	; (80077e0 <HAL_RCC_OscConfig+0x788>)
 800776e:	f043 0301 	orr.w	r3, r3, #1
 8007772:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007774:	4b1a      	ldr	r3, [pc, #104]	; (80077e0 <HAL_RCC_OscConfig+0x788>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4a19      	ldr	r2, [pc, #100]	; (80077e0 <HAL_RCC_OscConfig+0x788>)
 800777a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800777e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007780:	f7fb fd32 	bl	80031e8 <HAL_GetTick>
 8007784:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007786:	e008      	b.n	800779a <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007788:	f7fb fd2e 	bl	80031e8 <HAL_GetTick>
 800778c:	4602      	mov	r2, r0
 800778e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007790:	1ad3      	subs	r3, r2, r3
 8007792:	2b02      	cmp	r3, #2
 8007794:	d901      	bls.n	800779a <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8007796:	2303      	movs	r3, #3
 8007798:	e067      	b.n	800786a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800779a:	4b11      	ldr	r3, [pc, #68]	; (80077e0 <HAL_RCC_OscConfig+0x788>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d0f0      	beq.n	8007788 <HAL_RCC_OscConfig+0x730>
 80077a6:	e05f      	b.n	8007868 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80077a8:	4b0d      	ldr	r3, [pc, #52]	; (80077e0 <HAL_RCC_OscConfig+0x788>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4a0c      	ldr	r2, [pc, #48]	; (80077e0 <HAL_RCC_OscConfig+0x788>)
 80077ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80077b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077b4:	f7fb fd18 	bl	80031e8 <HAL_GetTick>
 80077b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80077ba:	e008      	b.n	80077ce <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80077bc:	f7fb fd14 	bl	80031e8 <HAL_GetTick>
 80077c0:	4602      	mov	r2, r0
 80077c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c4:	1ad3      	subs	r3, r2, r3
 80077c6:	2b02      	cmp	r3, #2
 80077c8:	d901      	bls.n	80077ce <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 80077ca:	2303      	movs	r3, #3
 80077cc:	e04d      	b.n	800786a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80077ce:	4b04      	ldr	r3, [pc, #16]	; (80077e0 <HAL_RCC_OscConfig+0x788>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d1f0      	bne.n	80077bc <HAL_RCC_OscConfig+0x764>
 80077da:	e045      	b.n	8007868 <HAL_RCC_OscConfig+0x810>
 80077dc:	58024800 	.word	0x58024800
 80077e0:	58024400 	.word	0x58024400
 80077e4:	fffffc0c 	.word	0xfffffc0c
 80077e8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80077ec:	4b21      	ldr	r3, [pc, #132]	; (8007874 <HAL_RCC_OscConfig+0x81c>)
 80077ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077f0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80077f2:	4b20      	ldr	r3, [pc, #128]	; (8007874 <HAL_RCC_OscConfig+0x81c>)
 80077f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077f6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077fc:	2b01      	cmp	r3, #1
 80077fe:	d031      	beq.n	8007864 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	f003 0203 	and.w	r2, r3, #3
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800780a:	429a      	cmp	r2, r3
 800780c:	d12a      	bne.n	8007864 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800780e:	693b      	ldr	r3, [r7, #16]
 8007810:	091b      	lsrs	r3, r3, #4
 8007812:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800781a:	429a      	cmp	r2, r3
 800781c:	d122      	bne.n	8007864 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007828:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800782a:	429a      	cmp	r2, r3
 800782c:	d11a      	bne.n	8007864 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	0a5b      	lsrs	r3, r3, #9
 8007832:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800783a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800783c:	429a      	cmp	r2, r3
 800783e:	d111      	bne.n	8007864 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	0c1b      	lsrs	r3, r3, #16
 8007844:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800784c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800784e:	429a      	cmp	r2, r3
 8007850:	d108      	bne.n	8007864 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	0e1b      	lsrs	r3, r3, #24
 8007856:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800785e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007860:	429a      	cmp	r2, r3
 8007862:	d001      	beq.n	8007868 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8007864:	2301      	movs	r3, #1
 8007866:	e000      	b.n	800786a <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8007868:	2300      	movs	r3, #0
}
 800786a:	4618      	mov	r0, r3
 800786c:	3730      	adds	r7, #48	; 0x30
 800786e:	46bd      	mov	sp, r7
 8007870:	bd80      	pop	{r7, pc}
 8007872:	bf00      	nop
 8007874:	58024400 	.word	0x58024400

08007878 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b086      	sub	sp, #24
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
 8007880:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d101      	bne.n	800788c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007888:	2301      	movs	r3, #1
 800788a:	e19c      	b.n	8007bc6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800788c:	4b8a      	ldr	r3, [pc, #552]	; (8007ab8 <HAL_RCC_ClockConfig+0x240>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f003 030f 	and.w	r3, r3, #15
 8007894:	683a      	ldr	r2, [r7, #0]
 8007896:	429a      	cmp	r2, r3
 8007898:	d910      	bls.n	80078bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800789a:	4b87      	ldr	r3, [pc, #540]	; (8007ab8 <HAL_RCC_ClockConfig+0x240>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f023 020f 	bic.w	r2, r3, #15
 80078a2:	4985      	ldr	r1, [pc, #532]	; (8007ab8 <HAL_RCC_ClockConfig+0x240>)
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	4313      	orrs	r3, r2
 80078a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80078aa:	4b83      	ldr	r3, [pc, #524]	; (8007ab8 <HAL_RCC_ClockConfig+0x240>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f003 030f 	and.w	r3, r3, #15
 80078b2:	683a      	ldr	r2, [r7, #0]
 80078b4:	429a      	cmp	r2, r3
 80078b6:	d001      	beq.n	80078bc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80078b8:	2301      	movs	r3, #1
 80078ba:	e184      	b.n	8007bc6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f003 0304 	and.w	r3, r3, #4
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d010      	beq.n	80078ea <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	691a      	ldr	r2, [r3, #16]
 80078cc:	4b7b      	ldr	r3, [pc, #492]	; (8007abc <HAL_RCC_ClockConfig+0x244>)
 80078ce:	699b      	ldr	r3, [r3, #24]
 80078d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80078d4:	429a      	cmp	r2, r3
 80078d6:	d908      	bls.n	80078ea <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80078d8:	4b78      	ldr	r3, [pc, #480]	; (8007abc <HAL_RCC_ClockConfig+0x244>)
 80078da:	699b      	ldr	r3, [r3, #24]
 80078dc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	691b      	ldr	r3, [r3, #16]
 80078e4:	4975      	ldr	r1, [pc, #468]	; (8007abc <HAL_RCC_ClockConfig+0x244>)
 80078e6:	4313      	orrs	r3, r2
 80078e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f003 0308 	and.w	r3, r3, #8
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d010      	beq.n	8007918 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	695a      	ldr	r2, [r3, #20]
 80078fa:	4b70      	ldr	r3, [pc, #448]	; (8007abc <HAL_RCC_ClockConfig+0x244>)
 80078fc:	69db      	ldr	r3, [r3, #28]
 80078fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007902:	429a      	cmp	r2, r3
 8007904:	d908      	bls.n	8007918 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007906:	4b6d      	ldr	r3, [pc, #436]	; (8007abc <HAL_RCC_ClockConfig+0x244>)
 8007908:	69db      	ldr	r3, [r3, #28]
 800790a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	695b      	ldr	r3, [r3, #20]
 8007912:	496a      	ldr	r1, [pc, #424]	; (8007abc <HAL_RCC_ClockConfig+0x244>)
 8007914:	4313      	orrs	r3, r2
 8007916:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f003 0310 	and.w	r3, r3, #16
 8007920:	2b00      	cmp	r3, #0
 8007922:	d010      	beq.n	8007946 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	699a      	ldr	r2, [r3, #24]
 8007928:	4b64      	ldr	r3, [pc, #400]	; (8007abc <HAL_RCC_ClockConfig+0x244>)
 800792a:	69db      	ldr	r3, [r3, #28]
 800792c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007930:	429a      	cmp	r2, r3
 8007932:	d908      	bls.n	8007946 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007934:	4b61      	ldr	r3, [pc, #388]	; (8007abc <HAL_RCC_ClockConfig+0x244>)
 8007936:	69db      	ldr	r3, [r3, #28]
 8007938:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	699b      	ldr	r3, [r3, #24]
 8007940:	495e      	ldr	r1, [pc, #376]	; (8007abc <HAL_RCC_ClockConfig+0x244>)
 8007942:	4313      	orrs	r3, r2
 8007944:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f003 0320 	and.w	r3, r3, #32
 800794e:	2b00      	cmp	r3, #0
 8007950:	d010      	beq.n	8007974 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	69da      	ldr	r2, [r3, #28]
 8007956:	4b59      	ldr	r3, [pc, #356]	; (8007abc <HAL_RCC_ClockConfig+0x244>)
 8007958:	6a1b      	ldr	r3, [r3, #32]
 800795a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800795e:	429a      	cmp	r2, r3
 8007960:	d908      	bls.n	8007974 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007962:	4b56      	ldr	r3, [pc, #344]	; (8007abc <HAL_RCC_ClockConfig+0x244>)
 8007964:	6a1b      	ldr	r3, [r3, #32]
 8007966:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	69db      	ldr	r3, [r3, #28]
 800796e:	4953      	ldr	r1, [pc, #332]	; (8007abc <HAL_RCC_ClockConfig+0x244>)
 8007970:	4313      	orrs	r3, r2
 8007972:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f003 0302 	and.w	r3, r3, #2
 800797c:	2b00      	cmp	r3, #0
 800797e:	d010      	beq.n	80079a2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	68da      	ldr	r2, [r3, #12]
 8007984:	4b4d      	ldr	r3, [pc, #308]	; (8007abc <HAL_RCC_ClockConfig+0x244>)
 8007986:	699b      	ldr	r3, [r3, #24]
 8007988:	f003 030f 	and.w	r3, r3, #15
 800798c:	429a      	cmp	r2, r3
 800798e:	d908      	bls.n	80079a2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007990:	4b4a      	ldr	r3, [pc, #296]	; (8007abc <HAL_RCC_ClockConfig+0x244>)
 8007992:	699b      	ldr	r3, [r3, #24]
 8007994:	f023 020f 	bic.w	r2, r3, #15
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	68db      	ldr	r3, [r3, #12]
 800799c:	4947      	ldr	r1, [pc, #284]	; (8007abc <HAL_RCC_ClockConfig+0x244>)
 800799e:	4313      	orrs	r3, r2
 80079a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f003 0301 	and.w	r3, r3, #1
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d055      	beq.n	8007a5a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80079ae:	4b43      	ldr	r3, [pc, #268]	; (8007abc <HAL_RCC_ClockConfig+0x244>)
 80079b0:	699b      	ldr	r3, [r3, #24]
 80079b2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	689b      	ldr	r3, [r3, #8]
 80079ba:	4940      	ldr	r1, [pc, #256]	; (8007abc <HAL_RCC_ClockConfig+0x244>)
 80079bc:	4313      	orrs	r3, r2
 80079be:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	685b      	ldr	r3, [r3, #4]
 80079c4:	2b02      	cmp	r3, #2
 80079c6:	d107      	bne.n	80079d8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80079c8:	4b3c      	ldr	r3, [pc, #240]	; (8007abc <HAL_RCC_ClockConfig+0x244>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d121      	bne.n	8007a18 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80079d4:	2301      	movs	r3, #1
 80079d6:	e0f6      	b.n	8007bc6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	685b      	ldr	r3, [r3, #4]
 80079dc:	2b03      	cmp	r3, #3
 80079de:	d107      	bne.n	80079f0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80079e0:	4b36      	ldr	r3, [pc, #216]	; (8007abc <HAL_RCC_ClockConfig+0x244>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d115      	bne.n	8007a18 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80079ec:	2301      	movs	r3, #1
 80079ee:	e0ea      	b.n	8007bc6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	685b      	ldr	r3, [r3, #4]
 80079f4:	2b01      	cmp	r3, #1
 80079f6:	d107      	bne.n	8007a08 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80079f8:	4b30      	ldr	r3, [pc, #192]	; (8007abc <HAL_RCC_ClockConfig+0x244>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d109      	bne.n	8007a18 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007a04:	2301      	movs	r3, #1
 8007a06:	e0de      	b.n	8007bc6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007a08:	4b2c      	ldr	r3, [pc, #176]	; (8007abc <HAL_RCC_ClockConfig+0x244>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f003 0304 	and.w	r3, r3, #4
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d101      	bne.n	8007a18 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007a14:	2301      	movs	r3, #1
 8007a16:	e0d6      	b.n	8007bc6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007a18:	4b28      	ldr	r3, [pc, #160]	; (8007abc <HAL_RCC_ClockConfig+0x244>)
 8007a1a:	691b      	ldr	r3, [r3, #16]
 8007a1c:	f023 0207 	bic.w	r2, r3, #7
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	685b      	ldr	r3, [r3, #4]
 8007a24:	4925      	ldr	r1, [pc, #148]	; (8007abc <HAL_RCC_ClockConfig+0x244>)
 8007a26:	4313      	orrs	r3, r2
 8007a28:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a2a:	f7fb fbdd 	bl	80031e8 <HAL_GetTick>
 8007a2e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a30:	e00a      	b.n	8007a48 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007a32:	f7fb fbd9 	bl	80031e8 <HAL_GetTick>
 8007a36:	4602      	mov	r2, r0
 8007a38:	697b      	ldr	r3, [r7, #20]
 8007a3a:	1ad3      	subs	r3, r2, r3
 8007a3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d901      	bls.n	8007a48 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8007a44:	2303      	movs	r3, #3
 8007a46:	e0be      	b.n	8007bc6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a48:	4b1c      	ldr	r3, [pc, #112]	; (8007abc <HAL_RCC_ClockConfig+0x244>)
 8007a4a:	691b      	ldr	r3, [r3, #16]
 8007a4c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	685b      	ldr	r3, [r3, #4]
 8007a54:	00db      	lsls	r3, r3, #3
 8007a56:	429a      	cmp	r2, r3
 8007a58:	d1eb      	bne.n	8007a32 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f003 0302 	and.w	r3, r3, #2
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d010      	beq.n	8007a88 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	68da      	ldr	r2, [r3, #12]
 8007a6a:	4b14      	ldr	r3, [pc, #80]	; (8007abc <HAL_RCC_ClockConfig+0x244>)
 8007a6c:	699b      	ldr	r3, [r3, #24]
 8007a6e:	f003 030f 	and.w	r3, r3, #15
 8007a72:	429a      	cmp	r2, r3
 8007a74:	d208      	bcs.n	8007a88 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007a76:	4b11      	ldr	r3, [pc, #68]	; (8007abc <HAL_RCC_ClockConfig+0x244>)
 8007a78:	699b      	ldr	r3, [r3, #24]
 8007a7a:	f023 020f 	bic.w	r2, r3, #15
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	68db      	ldr	r3, [r3, #12]
 8007a82:	490e      	ldr	r1, [pc, #56]	; (8007abc <HAL_RCC_ClockConfig+0x244>)
 8007a84:	4313      	orrs	r3, r2
 8007a86:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007a88:	4b0b      	ldr	r3, [pc, #44]	; (8007ab8 <HAL_RCC_ClockConfig+0x240>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f003 030f 	and.w	r3, r3, #15
 8007a90:	683a      	ldr	r2, [r7, #0]
 8007a92:	429a      	cmp	r2, r3
 8007a94:	d214      	bcs.n	8007ac0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a96:	4b08      	ldr	r3, [pc, #32]	; (8007ab8 <HAL_RCC_ClockConfig+0x240>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f023 020f 	bic.w	r2, r3, #15
 8007a9e:	4906      	ldr	r1, [pc, #24]	; (8007ab8 <HAL_RCC_ClockConfig+0x240>)
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	4313      	orrs	r3, r2
 8007aa4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007aa6:	4b04      	ldr	r3, [pc, #16]	; (8007ab8 <HAL_RCC_ClockConfig+0x240>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f003 030f 	and.w	r3, r3, #15
 8007aae:	683a      	ldr	r2, [r7, #0]
 8007ab0:	429a      	cmp	r2, r3
 8007ab2:	d005      	beq.n	8007ac0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	e086      	b.n	8007bc6 <HAL_RCC_ClockConfig+0x34e>
 8007ab8:	52002000 	.word	0x52002000
 8007abc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f003 0304 	and.w	r3, r3, #4
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d010      	beq.n	8007aee <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	691a      	ldr	r2, [r3, #16]
 8007ad0:	4b3f      	ldr	r3, [pc, #252]	; (8007bd0 <HAL_RCC_ClockConfig+0x358>)
 8007ad2:	699b      	ldr	r3, [r3, #24]
 8007ad4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007ad8:	429a      	cmp	r2, r3
 8007ada:	d208      	bcs.n	8007aee <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007adc:	4b3c      	ldr	r3, [pc, #240]	; (8007bd0 <HAL_RCC_ClockConfig+0x358>)
 8007ade:	699b      	ldr	r3, [r3, #24]
 8007ae0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	691b      	ldr	r3, [r3, #16]
 8007ae8:	4939      	ldr	r1, [pc, #228]	; (8007bd0 <HAL_RCC_ClockConfig+0x358>)
 8007aea:	4313      	orrs	r3, r2
 8007aec:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f003 0308 	and.w	r3, r3, #8
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d010      	beq.n	8007b1c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	695a      	ldr	r2, [r3, #20]
 8007afe:	4b34      	ldr	r3, [pc, #208]	; (8007bd0 <HAL_RCC_ClockConfig+0x358>)
 8007b00:	69db      	ldr	r3, [r3, #28]
 8007b02:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007b06:	429a      	cmp	r2, r3
 8007b08:	d208      	bcs.n	8007b1c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007b0a:	4b31      	ldr	r3, [pc, #196]	; (8007bd0 <HAL_RCC_ClockConfig+0x358>)
 8007b0c:	69db      	ldr	r3, [r3, #28]
 8007b0e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	695b      	ldr	r3, [r3, #20]
 8007b16:	492e      	ldr	r1, [pc, #184]	; (8007bd0 <HAL_RCC_ClockConfig+0x358>)
 8007b18:	4313      	orrs	r3, r2
 8007b1a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f003 0310 	and.w	r3, r3, #16
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d010      	beq.n	8007b4a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	699a      	ldr	r2, [r3, #24]
 8007b2c:	4b28      	ldr	r3, [pc, #160]	; (8007bd0 <HAL_RCC_ClockConfig+0x358>)
 8007b2e:	69db      	ldr	r3, [r3, #28]
 8007b30:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007b34:	429a      	cmp	r2, r3
 8007b36:	d208      	bcs.n	8007b4a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007b38:	4b25      	ldr	r3, [pc, #148]	; (8007bd0 <HAL_RCC_ClockConfig+0x358>)
 8007b3a:	69db      	ldr	r3, [r3, #28]
 8007b3c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	699b      	ldr	r3, [r3, #24]
 8007b44:	4922      	ldr	r1, [pc, #136]	; (8007bd0 <HAL_RCC_ClockConfig+0x358>)
 8007b46:	4313      	orrs	r3, r2
 8007b48:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f003 0320 	and.w	r3, r3, #32
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d010      	beq.n	8007b78 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	69da      	ldr	r2, [r3, #28]
 8007b5a:	4b1d      	ldr	r3, [pc, #116]	; (8007bd0 <HAL_RCC_ClockConfig+0x358>)
 8007b5c:	6a1b      	ldr	r3, [r3, #32]
 8007b5e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007b62:	429a      	cmp	r2, r3
 8007b64:	d208      	bcs.n	8007b78 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007b66:	4b1a      	ldr	r3, [pc, #104]	; (8007bd0 <HAL_RCC_ClockConfig+0x358>)
 8007b68:	6a1b      	ldr	r3, [r3, #32]
 8007b6a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	69db      	ldr	r3, [r3, #28]
 8007b72:	4917      	ldr	r1, [pc, #92]	; (8007bd0 <HAL_RCC_ClockConfig+0x358>)
 8007b74:	4313      	orrs	r3, r2
 8007b76:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007b78:	f000 f834 	bl	8007be4 <HAL_RCC_GetSysClockFreq>
 8007b7c:	4602      	mov	r2, r0
 8007b7e:	4b14      	ldr	r3, [pc, #80]	; (8007bd0 <HAL_RCC_ClockConfig+0x358>)
 8007b80:	699b      	ldr	r3, [r3, #24]
 8007b82:	0a1b      	lsrs	r3, r3, #8
 8007b84:	f003 030f 	and.w	r3, r3, #15
 8007b88:	4912      	ldr	r1, [pc, #72]	; (8007bd4 <HAL_RCC_ClockConfig+0x35c>)
 8007b8a:	5ccb      	ldrb	r3, [r1, r3]
 8007b8c:	f003 031f 	and.w	r3, r3, #31
 8007b90:	fa22 f303 	lsr.w	r3, r2, r3
 8007b94:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007b96:	4b0e      	ldr	r3, [pc, #56]	; (8007bd0 <HAL_RCC_ClockConfig+0x358>)
 8007b98:	699b      	ldr	r3, [r3, #24]
 8007b9a:	f003 030f 	and.w	r3, r3, #15
 8007b9e:	4a0d      	ldr	r2, [pc, #52]	; (8007bd4 <HAL_RCC_ClockConfig+0x35c>)
 8007ba0:	5cd3      	ldrb	r3, [r2, r3]
 8007ba2:	f003 031f 	and.w	r3, r3, #31
 8007ba6:	693a      	ldr	r2, [r7, #16]
 8007ba8:	fa22 f303 	lsr.w	r3, r2, r3
 8007bac:	4a0a      	ldr	r2, [pc, #40]	; (8007bd8 <HAL_RCC_ClockConfig+0x360>)
 8007bae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007bb0:	4a0a      	ldr	r2, [pc, #40]	; (8007bdc <HAL_RCC_ClockConfig+0x364>)
 8007bb2:	693b      	ldr	r3, [r7, #16]
 8007bb4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8007bb6:	4b0a      	ldr	r3, [pc, #40]	; (8007be0 <HAL_RCC_ClockConfig+0x368>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f7fb faca 	bl	8003154 <HAL_InitTick>
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	3718      	adds	r7, #24
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}
 8007bce:	bf00      	nop
 8007bd0:	58024400 	.word	0x58024400
 8007bd4:	0800fba4 	.word	0x0800fba4
 8007bd8:	24000004 	.word	0x24000004
 8007bdc:	24000000 	.word	0x24000000
 8007be0:	24000008 	.word	0x24000008

08007be4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007be4:	b480      	push	{r7}
 8007be6:	b089      	sub	sp, #36	; 0x24
 8007be8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007bea:	4bb3      	ldr	r3, [pc, #716]	; (8007eb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007bec:	691b      	ldr	r3, [r3, #16]
 8007bee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007bf2:	2b18      	cmp	r3, #24
 8007bf4:	f200 8155 	bhi.w	8007ea2 <HAL_RCC_GetSysClockFreq+0x2be>
 8007bf8:	a201      	add	r2, pc, #4	; (adr r2, 8007c00 <HAL_RCC_GetSysClockFreq+0x1c>)
 8007bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bfe:	bf00      	nop
 8007c00:	08007c65 	.word	0x08007c65
 8007c04:	08007ea3 	.word	0x08007ea3
 8007c08:	08007ea3 	.word	0x08007ea3
 8007c0c:	08007ea3 	.word	0x08007ea3
 8007c10:	08007ea3 	.word	0x08007ea3
 8007c14:	08007ea3 	.word	0x08007ea3
 8007c18:	08007ea3 	.word	0x08007ea3
 8007c1c:	08007ea3 	.word	0x08007ea3
 8007c20:	08007c8b 	.word	0x08007c8b
 8007c24:	08007ea3 	.word	0x08007ea3
 8007c28:	08007ea3 	.word	0x08007ea3
 8007c2c:	08007ea3 	.word	0x08007ea3
 8007c30:	08007ea3 	.word	0x08007ea3
 8007c34:	08007ea3 	.word	0x08007ea3
 8007c38:	08007ea3 	.word	0x08007ea3
 8007c3c:	08007ea3 	.word	0x08007ea3
 8007c40:	08007c91 	.word	0x08007c91
 8007c44:	08007ea3 	.word	0x08007ea3
 8007c48:	08007ea3 	.word	0x08007ea3
 8007c4c:	08007ea3 	.word	0x08007ea3
 8007c50:	08007ea3 	.word	0x08007ea3
 8007c54:	08007ea3 	.word	0x08007ea3
 8007c58:	08007ea3 	.word	0x08007ea3
 8007c5c:	08007ea3 	.word	0x08007ea3
 8007c60:	08007c97 	.word	0x08007c97
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c64:	4b94      	ldr	r3, [pc, #592]	; (8007eb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f003 0320 	and.w	r3, r3, #32
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d009      	beq.n	8007c84 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007c70:	4b91      	ldr	r3, [pc, #580]	; (8007eb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	08db      	lsrs	r3, r3, #3
 8007c76:	f003 0303 	and.w	r3, r3, #3
 8007c7a:	4a90      	ldr	r2, [pc, #576]	; (8007ebc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007c7c:	fa22 f303 	lsr.w	r3, r2, r3
 8007c80:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8007c82:	e111      	b.n	8007ea8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007c84:	4b8d      	ldr	r3, [pc, #564]	; (8007ebc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007c86:	61bb      	str	r3, [r7, #24]
    break;
 8007c88:	e10e      	b.n	8007ea8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8007c8a:	4b8d      	ldr	r3, [pc, #564]	; (8007ec0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007c8c:	61bb      	str	r3, [r7, #24]
    break;
 8007c8e:	e10b      	b.n	8007ea8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8007c90:	4b8c      	ldr	r3, [pc, #560]	; (8007ec4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007c92:	61bb      	str	r3, [r7, #24]
    break;
 8007c94:	e108      	b.n	8007ea8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007c96:	4b88      	ldr	r3, [pc, #544]	; (8007eb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c9a:	f003 0303 	and.w	r3, r3, #3
 8007c9e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007ca0:	4b85      	ldr	r3, [pc, #532]	; (8007eb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ca4:	091b      	lsrs	r3, r3, #4
 8007ca6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007caa:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007cac:	4b82      	ldr	r3, [pc, #520]	; (8007eb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cb0:	f003 0301 	and.w	r3, r3, #1
 8007cb4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007cb6:	4b80      	ldr	r3, [pc, #512]	; (8007eb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007cb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cba:	08db      	lsrs	r3, r3, #3
 8007cbc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007cc0:	68fa      	ldr	r2, [r7, #12]
 8007cc2:	fb02 f303 	mul.w	r3, r2, r3
 8007cc6:	ee07 3a90 	vmov	s15, r3
 8007cca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cce:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8007cd2:	693b      	ldr	r3, [r7, #16]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	f000 80e1 	beq.w	8007e9c <HAL_RCC_GetSysClockFreq+0x2b8>
 8007cda:	697b      	ldr	r3, [r7, #20]
 8007cdc:	2b02      	cmp	r3, #2
 8007cde:	f000 8083 	beq.w	8007de8 <HAL_RCC_GetSysClockFreq+0x204>
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	2b02      	cmp	r3, #2
 8007ce6:	f200 80a1 	bhi.w	8007e2c <HAL_RCC_GetSysClockFreq+0x248>
 8007cea:	697b      	ldr	r3, [r7, #20]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d003      	beq.n	8007cf8 <HAL_RCC_GetSysClockFreq+0x114>
 8007cf0:	697b      	ldr	r3, [r7, #20]
 8007cf2:	2b01      	cmp	r3, #1
 8007cf4:	d056      	beq.n	8007da4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007cf6:	e099      	b.n	8007e2c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007cf8:	4b6f      	ldr	r3, [pc, #444]	; (8007eb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f003 0320 	and.w	r3, r3, #32
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d02d      	beq.n	8007d60 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007d04:	4b6c      	ldr	r3, [pc, #432]	; (8007eb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	08db      	lsrs	r3, r3, #3
 8007d0a:	f003 0303 	and.w	r3, r3, #3
 8007d0e:	4a6b      	ldr	r2, [pc, #428]	; (8007ebc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007d10:	fa22 f303 	lsr.w	r3, r2, r3
 8007d14:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	ee07 3a90 	vmov	s15, r3
 8007d1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	ee07 3a90 	vmov	s15, r3
 8007d26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d2e:	4b62      	ldr	r3, [pc, #392]	; (8007eb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d36:	ee07 3a90 	vmov	s15, r3
 8007d3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007d42:	eddf 5a61 	vldr	s11, [pc, #388]	; 8007ec8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007d46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d5a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8007d5e:	e087      	b.n	8007e70 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007d60:	693b      	ldr	r3, [r7, #16]
 8007d62:	ee07 3a90 	vmov	s15, r3
 8007d66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d6a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8007ecc <HAL_RCC_GetSysClockFreq+0x2e8>
 8007d6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d72:	4b51      	ldr	r3, [pc, #324]	; (8007eb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d7a:	ee07 3a90 	vmov	s15, r3
 8007d7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d82:	ed97 6a02 	vldr	s12, [r7, #8]
 8007d86:	eddf 5a50 	vldr	s11, [pc, #320]	; 8007ec8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007d8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007da2:	e065      	b.n	8007e70 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007da4:	693b      	ldr	r3, [r7, #16]
 8007da6:	ee07 3a90 	vmov	s15, r3
 8007daa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dae:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007ed0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007db2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007db6:	4b40      	ldr	r3, [pc, #256]	; (8007eb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dbe:	ee07 3a90 	vmov	s15, r3
 8007dc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007dc6:	ed97 6a02 	vldr	s12, [r7, #8]
 8007dca:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8007ec8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007dce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007dd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007dd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007dda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007dde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007de2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007de6:	e043      	b.n	8007e70 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007de8:	693b      	ldr	r3, [r7, #16]
 8007dea:	ee07 3a90 	vmov	s15, r3
 8007dee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007df2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8007ed4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007df6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007dfa:	4b2f      	ldr	r3, [pc, #188]	; (8007eb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e02:	ee07 3a90 	vmov	s15, r3
 8007e06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8007e0e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007ec8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007e12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007e2a:	e021      	b.n	8007e70 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007e2c:	693b      	ldr	r3, [r7, #16]
 8007e2e:	ee07 3a90 	vmov	s15, r3
 8007e32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e36:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007ed0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007e3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e3e:	4b1e      	ldr	r3, [pc, #120]	; (8007eb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e46:	ee07 3a90 	vmov	s15, r3
 8007e4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007e52:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007ec8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007e56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007e6e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007e70:	4b11      	ldr	r3, [pc, #68]	; (8007eb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e74:	0a5b      	lsrs	r3, r3, #9
 8007e76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e7a:	3301      	adds	r3, #1
 8007e7c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	ee07 3a90 	vmov	s15, r3
 8007e84:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007e88:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e94:	ee17 3a90 	vmov	r3, s15
 8007e98:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8007e9a:	e005      	b.n	8007ea8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	61bb      	str	r3, [r7, #24]
    break;
 8007ea0:	e002      	b.n	8007ea8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8007ea2:	4b07      	ldr	r3, [pc, #28]	; (8007ec0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007ea4:	61bb      	str	r3, [r7, #24]
    break;
 8007ea6:	bf00      	nop
  }

  return sysclockfreq;
 8007ea8:	69bb      	ldr	r3, [r7, #24]
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	3724      	adds	r7, #36	; 0x24
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb4:	4770      	bx	lr
 8007eb6:	bf00      	nop
 8007eb8:	58024400 	.word	0x58024400
 8007ebc:	03d09000 	.word	0x03d09000
 8007ec0:	003d0900 	.word	0x003d0900
 8007ec4:	02dc6c00 	.word	0x02dc6c00
 8007ec8:	46000000 	.word	0x46000000
 8007ecc:	4c742400 	.word	0x4c742400
 8007ed0:	4a742400 	.word	0x4a742400
 8007ed4:	4c371b00 	.word	0x4c371b00

08007ed8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b082      	sub	sp, #8
 8007edc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007ede:	f7ff fe81 	bl	8007be4 <HAL_RCC_GetSysClockFreq>
 8007ee2:	4602      	mov	r2, r0
 8007ee4:	4b10      	ldr	r3, [pc, #64]	; (8007f28 <HAL_RCC_GetHCLKFreq+0x50>)
 8007ee6:	699b      	ldr	r3, [r3, #24]
 8007ee8:	0a1b      	lsrs	r3, r3, #8
 8007eea:	f003 030f 	and.w	r3, r3, #15
 8007eee:	490f      	ldr	r1, [pc, #60]	; (8007f2c <HAL_RCC_GetHCLKFreq+0x54>)
 8007ef0:	5ccb      	ldrb	r3, [r1, r3]
 8007ef2:	f003 031f 	and.w	r3, r3, #31
 8007ef6:	fa22 f303 	lsr.w	r3, r2, r3
 8007efa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007efc:	4b0a      	ldr	r3, [pc, #40]	; (8007f28 <HAL_RCC_GetHCLKFreq+0x50>)
 8007efe:	699b      	ldr	r3, [r3, #24]
 8007f00:	f003 030f 	and.w	r3, r3, #15
 8007f04:	4a09      	ldr	r2, [pc, #36]	; (8007f2c <HAL_RCC_GetHCLKFreq+0x54>)
 8007f06:	5cd3      	ldrb	r3, [r2, r3]
 8007f08:	f003 031f 	and.w	r3, r3, #31
 8007f0c:	687a      	ldr	r2, [r7, #4]
 8007f0e:	fa22 f303 	lsr.w	r3, r2, r3
 8007f12:	4a07      	ldr	r2, [pc, #28]	; (8007f30 <HAL_RCC_GetHCLKFreq+0x58>)
 8007f14:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007f16:	4a07      	ldr	r2, [pc, #28]	; (8007f34 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007f1c:	4b04      	ldr	r3, [pc, #16]	; (8007f30 <HAL_RCC_GetHCLKFreq+0x58>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	3708      	adds	r7, #8
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}
 8007f28:	58024400 	.word	0x58024400
 8007f2c:	0800fba4 	.word	0x0800fba4
 8007f30:	24000004 	.word	0x24000004
 8007f34:	24000000 	.word	0x24000000

08007f38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007f3c:	f7ff ffcc 	bl	8007ed8 <HAL_RCC_GetHCLKFreq>
 8007f40:	4602      	mov	r2, r0
 8007f42:	4b06      	ldr	r3, [pc, #24]	; (8007f5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007f44:	69db      	ldr	r3, [r3, #28]
 8007f46:	091b      	lsrs	r3, r3, #4
 8007f48:	f003 0307 	and.w	r3, r3, #7
 8007f4c:	4904      	ldr	r1, [pc, #16]	; (8007f60 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007f4e:	5ccb      	ldrb	r3, [r1, r3]
 8007f50:	f003 031f 	and.w	r3, r3, #31
 8007f54:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	bd80      	pop	{r7, pc}
 8007f5c:	58024400 	.word	0x58024400
 8007f60:	0800fba4 	.word	0x0800fba4

08007f64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007f68:	f7ff ffb6 	bl	8007ed8 <HAL_RCC_GetHCLKFreq>
 8007f6c:	4602      	mov	r2, r0
 8007f6e:	4b06      	ldr	r3, [pc, #24]	; (8007f88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007f70:	69db      	ldr	r3, [r3, #28]
 8007f72:	0a1b      	lsrs	r3, r3, #8
 8007f74:	f003 0307 	and.w	r3, r3, #7
 8007f78:	4904      	ldr	r1, [pc, #16]	; (8007f8c <HAL_RCC_GetPCLK2Freq+0x28>)
 8007f7a:	5ccb      	ldrb	r3, [r1, r3]
 8007f7c:	f003 031f 	and.w	r3, r3, #31
 8007f80:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007f84:	4618      	mov	r0, r3
 8007f86:	bd80      	pop	{r7, pc}
 8007f88:	58024400 	.word	0x58024400
 8007f8c:	0800fba4 	.word	0x0800fba4

08007f90 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b086      	sub	sp, #24
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007f98:	2300      	movs	r3, #0
 8007f9a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d03f      	beq.n	800802c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007fb0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007fb4:	d02a      	beq.n	800800c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8007fb6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007fba:	d824      	bhi.n	8008006 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007fbc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007fc0:	d018      	beq.n	8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007fc2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007fc6:	d81e      	bhi.n	8008006 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d003      	beq.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007fcc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007fd0:	d007      	beq.n	8007fe2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007fd2:	e018      	b.n	8008006 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007fd4:	4bab      	ldr	r3, [pc, #684]	; (8008284 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fd8:	4aaa      	ldr	r2, [pc, #680]	; (8008284 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007fda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007fde:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007fe0:	e015      	b.n	800800e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	3304      	adds	r3, #4
 8007fe6:	2102      	movs	r1, #2
 8007fe8:	4618      	mov	r0, r3
 8007fea:	f001 fff3 	bl	8009fd4 <RCCEx_PLL2_Config>
 8007fee:	4603      	mov	r3, r0
 8007ff0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007ff2:	e00c      	b.n	800800e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	3324      	adds	r3, #36	; 0x24
 8007ff8:	2102      	movs	r1, #2
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	f002 f89c 	bl	800a138 <RCCEx_PLL3_Config>
 8008000:	4603      	mov	r3, r0
 8008002:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008004:	e003      	b.n	800800e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008006:	2301      	movs	r3, #1
 8008008:	75fb      	strb	r3, [r7, #23]
      break;
 800800a:	e000      	b.n	800800e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800800c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800800e:	7dfb      	ldrb	r3, [r7, #23]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d109      	bne.n	8008028 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008014:	4b9b      	ldr	r3, [pc, #620]	; (8008284 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008016:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008018:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008020:	4998      	ldr	r1, [pc, #608]	; (8008284 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008022:	4313      	orrs	r3, r2
 8008024:	650b      	str	r3, [r1, #80]	; 0x50
 8008026:	e001      	b.n	800802c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008028:	7dfb      	ldrb	r3, [r7, #23]
 800802a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008034:	2b00      	cmp	r3, #0
 8008036:	d03d      	beq.n	80080b4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800803c:	2b04      	cmp	r3, #4
 800803e:	d826      	bhi.n	800808e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8008040:	a201      	add	r2, pc, #4	; (adr r2, 8008048 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8008042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008046:	bf00      	nop
 8008048:	0800805d 	.word	0x0800805d
 800804c:	0800806b 	.word	0x0800806b
 8008050:	0800807d 	.word	0x0800807d
 8008054:	08008095 	.word	0x08008095
 8008058:	08008095 	.word	0x08008095
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800805c:	4b89      	ldr	r3, [pc, #548]	; (8008284 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800805e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008060:	4a88      	ldr	r2, [pc, #544]	; (8008284 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008062:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008066:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008068:	e015      	b.n	8008096 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	3304      	adds	r3, #4
 800806e:	2100      	movs	r1, #0
 8008070:	4618      	mov	r0, r3
 8008072:	f001 ffaf 	bl	8009fd4 <RCCEx_PLL2_Config>
 8008076:	4603      	mov	r3, r0
 8008078:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800807a:	e00c      	b.n	8008096 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	3324      	adds	r3, #36	; 0x24
 8008080:	2100      	movs	r1, #0
 8008082:	4618      	mov	r0, r3
 8008084:	f002 f858 	bl	800a138 <RCCEx_PLL3_Config>
 8008088:	4603      	mov	r3, r0
 800808a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800808c:	e003      	b.n	8008096 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800808e:	2301      	movs	r3, #1
 8008090:	75fb      	strb	r3, [r7, #23]
      break;
 8008092:	e000      	b.n	8008096 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8008094:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008096:	7dfb      	ldrb	r3, [r7, #23]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d109      	bne.n	80080b0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800809c:	4b79      	ldr	r3, [pc, #484]	; (8008284 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800809e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080a0:	f023 0207 	bic.w	r2, r3, #7
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080a8:	4976      	ldr	r1, [pc, #472]	; (8008284 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80080aa:	4313      	orrs	r3, r2
 80080ac:	650b      	str	r3, [r1, #80]	; 0x50
 80080ae:	e001      	b.n	80080b4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080b0:	7dfb      	ldrb	r3, [r7, #23]
 80080b2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d042      	beq.n	8008146 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080c8:	d02b      	beq.n	8008122 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80080ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080ce:	d825      	bhi.n	800811c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80080d0:	2bc0      	cmp	r3, #192	; 0xc0
 80080d2:	d028      	beq.n	8008126 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80080d4:	2bc0      	cmp	r3, #192	; 0xc0
 80080d6:	d821      	bhi.n	800811c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80080d8:	2b80      	cmp	r3, #128	; 0x80
 80080da:	d016      	beq.n	800810a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80080dc:	2b80      	cmp	r3, #128	; 0x80
 80080de:	d81d      	bhi.n	800811c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d002      	beq.n	80080ea <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80080e4:	2b40      	cmp	r3, #64	; 0x40
 80080e6:	d007      	beq.n	80080f8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80080e8:	e018      	b.n	800811c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080ea:	4b66      	ldr	r3, [pc, #408]	; (8008284 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80080ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080ee:	4a65      	ldr	r2, [pc, #404]	; (8008284 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80080f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80080f4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80080f6:	e017      	b.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	3304      	adds	r3, #4
 80080fc:	2100      	movs	r1, #0
 80080fe:	4618      	mov	r0, r3
 8008100:	f001 ff68 	bl	8009fd4 <RCCEx_PLL2_Config>
 8008104:	4603      	mov	r3, r0
 8008106:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008108:	e00e      	b.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	3324      	adds	r3, #36	; 0x24
 800810e:	2100      	movs	r1, #0
 8008110:	4618      	mov	r0, r3
 8008112:	f002 f811 	bl	800a138 <RCCEx_PLL3_Config>
 8008116:	4603      	mov	r3, r0
 8008118:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800811a:	e005      	b.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800811c:	2301      	movs	r3, #1
 800811e:	75fb      	strb	r3, [r7, #23]
      break;
 8008120:	e002      	b.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8008122:	bf00      	nop
 8008124:	e000      	b.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8008126:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008128:	7dfb      	ldrb	r3, [r7, #23]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d109      	bne.n	8008142 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800812e:	4b55      	ldr	r3, [pc, #340]	; (8008284 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008130:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008132:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800813a:	4952      	ldr	r1, [pc, #328]	; (8008284 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800813c:	4313      	orrs	r3, r2
 800813e:	650b      	str	r3, [r1, #80]	; 0x50
 8008140:	e001      	b.n	8008146 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008142:	7dfb      	ldrb	r3, [r7, #23]
 8008144:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800814e:	2b00      	cmp	r3, #0
 8008150:	d049      	beq.n	80081e6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008158:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800815c:	d030      	beq.n	80081c0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800815e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008162:	d82a      	bhi.n	80081ba <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008164:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008168:	d02c      	beq.n	80081c4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800816a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800816e:	d824      	bhi.n	80081ba <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008170:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008174:	d018      	beq.n	80081a8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8008176:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800817a:	d81e      	bhi.n	80081ba <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800817c:	2b00      	cmp	r3, #0
 800817e:	d003      	beq.n	8008188 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8008180:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008184:	d007      	beq.n	8008196 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8008186:	e018      	b.n	80081ba <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008188:	4b3e      	ldr	r3, [pc, #248]	; (8008284 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800818a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800818c:	4a3d      	ldr	r2, [pc, #244]	; (8008284 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800818e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008192:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008194:	e017      	b.n	80081c6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	3304      	adds	r3, #4
 800819a:	2100      	movs	r1, #0
 800819c:	4618      	mov	r0, r3
 800819e:	f001 ff19 	bl	8009fd4 <RCCEx_PLL2_Config>
 80081a2:	4603      	mov	r3, r0
 80081a4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80081a6:	e00e      	b.n	80081c6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	3324      	adds	r3, #36	; 0x24
 80081ac:	2100      	movs	r1, #0
 80081ae:	4618      	mov	r0, r3
 80081b0:	f001 ffc2 	bl	800a138 <RCCEx_PLL3_Config>
 80081b4:	4603      	mov	r3, r0
 80081b6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80081b8:	e005      	b.n	80081c6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80081ba:	2301      	movs	r3, #1
 80081bc:	75fb      	strb	r3, [r7, #23]
      break;
 80081be:	e002      	b.n	80081c6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80081c0:	bf00      	nop
 80081c2:	e000      	b.n	80081c6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80081c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80081c6:	7dfb      	ldrb	r3, [r7, #23]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d10a      	bne.n	80081e2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80081cc:	4b2d      	ldr	r3, [pc, #180]	; (8008284 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80081ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081d0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80081da:	492a      	ldr	r1, [pc, #168]	; (8008284 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80081dc:	4313      	orrs	r3, r2
 80081de:	658b      	str	r3, [r1, #88]	; 0x58
 80081e0:	e001      	b.n	80081e6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081e2:	7dfb      	ldrb	r3, [r7, #23]
 80081e4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d04c      	beq.n	800828c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80081f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80081fc:	d030      	beq.n	8008260 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80081fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008202:	d82a      	bhi.n	800825a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008204:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008208:	d02c      	beq.n	8008264 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800820a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800820e:	d824      	bhi.n	800825a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008210:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008214:	d018      	beq.n	8008248 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8008216:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800821a:	d81e      	bhi.n	800825a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800821c:	2b00      	cmp	r3, #0
 800821e:	d003      	beq.n	8008228 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8008220:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008224:	d007      	beq.n	8008236 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8008226:	e018      	b.n	800825a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008228:	4b16      	ldr	r3, [pc, #88]	; (8008284 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800822a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800822c:	4a15      	ldr	r2, [pc, #84]	; (8008284 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800822e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008232:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008234:	e017      	b.n	8008266 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	3304      	adds	r3, #4
 800823a:	2100      	movs	r1, #0
 800823c:	4618      	mov	r0, r3
 800823e:	f001 fec9 	bl	8009fd4 <RCCEx_PLL2_Config>
 8008242:	4603      	mov	r3, r0
 8008244:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008246:	e00e      	b.n	8008266 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	3324      	adds	r3, #36	; 0x24
 800824c:	2100      	movs	r1, #0
 800824e:	4618      	mov	r0, r3
 8008250:	f001 ff72 	bl	800a138 <RCCEx_PLL3_Config>
 8008254:	4603      	mov	r3, r0
 8008256:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008258:	e005      	b.n	8008266 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800825a:	2301      	movs	r3, #1
 800825c:	75fb      	strb	r3, [r7, #23]
      break;
 800825e:	e002      	b.n	8008266 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8008260:	bf00      	nop
 8008262:	e000      	b.n	8008266 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8008264:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008266:	7dfb      	ldrb	r3, [r7, #23]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d10d      	bne.n	8008288 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800826c:	4b05      	ldr	r3, [pc, #20]	; (8008284 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800826e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008270:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800827a:	4902      	ldr	r1, [pc, #8]	; (8008284 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800827c:	4313      	orrs	r3, r2
 800827e:	658b      	str	r3, [r1, #88]	; 0x58
 8008280:	e004      	b.n	800828c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8008282:	bf00      	nop
 8008284:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008288:	7dfb      	ldrb	r3, [r7, #23]
 800828a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008294:	2b00      	cmp	r3, #0
 8008296:	d032      	beq.n	80082fe <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800829c:	2b30      	cmp	r3, #48	; 0x30
 800829e:	d01c      	beq.n	80082da <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80082a0:	2b30      	cmp	r3, #48	; 0x30
 80082a2:	d817      	bhi.n	80082d4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80082a4:	2b20      	cmp	r3, #32
 80082a6:	d00c      	beq.n	80082c2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80082a8:	2b20      	cmp	r3, #32
 80082aa:	d813      	bhi.n	80082d4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d016      	beq.n	80082de <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80082b0:	2b10      	cmp	r3, #16
 80082b2:	d10f      	bne.n	80082d4 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80082b4:	4baf      	ldr	r3, [pc, #700]	; (8008574 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80082b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082b8:	4aae      	ldr	r2, [pc, #696]	; (8008574 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80082ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80082be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80082c0:	e00e      	b.n	80082e0 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	3304      	adds	r3, #4
 80082c6:	2102      	movs	r1, #2
 80082c8:	4618      	mov	r0, r3
 80082ca:	f001 fe83 	bl	8009fd4 <RCCEx_PLL2_Config>
 80082ce:	4603      	mov	r3, r0
 80082d0:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80082d2:	e005      	b.n	80082e0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80082d4:	2301      	movs	r3, #1
 80082d6:	75fb      	strb	r3, [r7, #23]
      break;
 80082d8:	e002      	b.n	80082e0 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80082da:	bf00      	nop
 80082dc:	e000      	b.n	80082e0 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80082de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80082e0:	7dfb      	ldrb	r3, [r7, #23]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d109      	bne.n	80082fa <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80082e6:	4ba3      	ldr	r3, [pc, #652]	; (8008574 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80082e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082ea:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082f2:	49a0      	ldr	r1, [pc, #640]	; (8008574 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80082f4:	4313      	orrs	r3, r2
 80082f6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80082f8:	e001      	b.n	80082fe <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082fa:	7dfb      	ldrb	r3, [r7, #23]
 80082fc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008306:	2b00      	cmp	r3, #0
 8008308:	d047      	beq.n	800839a <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800830e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008312:	d030      	beq.n	8008376 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8008314:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008318:	d82a      	bhi.n	8008370 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800831a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800831e:	d02c      	beq.n	800837a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8008320:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008324:	d824      	bhi.n	8008370 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8008326:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800832a:	d018      	beq.n	800835e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800832c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008330:	d81e      	bhi.n	8008370 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8008332:	2b00      	cmp	r3, #0
 8008334:	d003      	beq.n	800833e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8008336:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800833a:	d007      	beq.n	800834c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800833c:	e018      	b.n	8008370 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800833e:	4b8d      	ldr	r3, [pc, #564]	; (8008574 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008342:	4a8c      	ldr	r2, [pc, #560]	; (8008574 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008344:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008348:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800834a:	e017      	b.n	800837c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	3304      	adds	r3, #4
 8008350:	2100      	movs	r1, #0
 8008352:	4618      	mov	r0, r3
 8008354:	f001 fe3e 	bl	8009fd4 <RCCEx_PLL2_Config>
 8008358:	4603      	mov	r3, r0
 800835a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800835c:	e00e      	b.n	800837c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	3324      	adds	r3, #36	; 0x24
 8008362:	2100      	movs	r1, #0
 8008364:	4618      	mov	r0, r3
 8008366:	f001 fee7 	bl	800a138 <RCCEx_PLL3_Config>
 800836a:	4603      	mov	r3, r0
 800836c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800836e:	e005      	b.n	800837c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008370:	2301      	movs	r3, #1
 8008372:	75fb      	strb	r3, [r7, #23]
      break;
 8008374:	e002      	b.n	800837c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8008376:	bf00      	nop
 8008378:	e000      	b.n	800837c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800837a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800837c:	7dfb      	ldrb	r3, [r7, #23]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d109      	bne.n	8008396 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008382:	4b7c      	ldr	r3, [pc, #496]	; (8008574 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008384:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008386:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800838e:	4979      	ldr	r1, [pc, #484]	; (8008574 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008390:	4313      	orrs	r3, r2
 8008392:	650b      	str	r3, [r1, #80]	; 0x50
 8008394:	e001      	b.n	800839a <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008396:	7dfb      	ldrb	r3, [r7, #23]
 8008398:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d049      	beq.n	800843a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083aa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80083ae:	d02e      	beq.n	800840e <HAL_RCCEx_PeriphCLKConfig+0x47e>
 80083b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80083b4:	d828      	bhi.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80083b6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80083ba:	d02a      	beq.n	8008412 <HAL_RCCEx_PeriphCLKConfig+0x482>
 80083bc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80083c0:	d822      	bhi.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80083c2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80083c6:	d026      	beq.n	8008416 <HAL_RCCEx_PeriphCLKConfig+0x486>
 80083c8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80083cc:	d81c      	bhi.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80083ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80083d2:	d010      	beq.n	80083f6 <HAL_RCCEx_PeriphCLKConfig+0x466>
 80083d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80083d8:	d816      	bhi.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d01d      	beq.n	800841a <HAL_RCCEx_PeriphCLKConfig+0x48a>
 80083de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083e2:	d111      	bne.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	3304      	adds	r3, #4
 80083e8:	2101      	movs	r1, #1
 80083ea:	4618      	mov	r0, r3
 80083ec:	f001 fdf2 	bl	8009fd4 <RCCEx_PLL2_Config>
 80083f0:	4603      	mov	r3, r0
 80083f2:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80083f4:	e012      	b.n	800841c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	3324      	adds	r3, #36	; 0x24
 80083fa:	2101      	movs	r1, #1
 80083fc:	4618      	mov	r0, r3
 80083fe:	f001 fe9b 	bl	800a138 <RCCEx_PLL3_Config>
 8008402:	4603      	mov	r3, r0
 8008404:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008406:	e009      	b.n	800841c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008408:	2301      	movs	r3, #1
 800840a:	75fb      	strb	r3, [r7, #23]
      break;
 800840c:	e006      	b.n	800841c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800840e:	bf00      	nop
 8008410:	e004      	b.n	800841c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8008412:	bf00      	nop
 8008414:	e002      	b.n	800841c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8008416:	bf00      	nop
 8008418:	e000      	b.n	800841c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800841a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800841c:	7dfb      	ldrb	r3, [r7, #23]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d109      	bne.n	8008436 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008422:	4b54      	ldr	r3, [pc, #336]	; (8008574 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008424:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008426:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800842e:	4951      	ldr	r1, [pc, #324]	; (8008574 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008430:	4313      	orrs	r3, r2
 8008432:	650b      	str	r3, [r1, #80]	; 0x50
 8008434:	e001      	b.n	800843a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008436:	7dfb      	ldrb	r3, [r7, #23]
 8008438:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008442:	2b00      	cmp	r3, #0
 8008444:	d04b      	beq.n	80084de <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800844c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008450:	d02e      	beq.n	80084b0 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8008452:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008456:	d828      	bhi.n	80084aa <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008458:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800845c:	d02a      	beq.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800845e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008462:	d822      	bhi.n	80084aa <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008464:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008468:	d026      	beq.n	80084b8 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800846a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800846e:	d81c      	bhi.n	80084aa <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008470:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008474:	d010      	beq.n	8008498 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8008476:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800847a:	d816      	bhi.n	80084aa <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800847c:	2b00      	cmp	r3, #0
 800847e:	d01d      	beq.n	80084bc <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8008480:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008484:	d111      	bne.n	80084aa <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	3304      	adds	r3, #4
 800848a:	2101      	movs	r1, #1
 800848c:	4618      	mov	r0, r3
 800848e:	f001 fda1 	bl	8009fd4 <RCCEx_PLL2_Config>
 8008492:	4603      	mov	r3, r0
 8008494:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008496:	e012      	b.n	80084be <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	3324      	adds	r3, #36	; 0x24
 800849c:	2101      	movs	r1, #1
 800849e:	4618      	mov	r0, r3
 80084a0:	f001 fe4a 	bl	800a138 <RCCEx_PLL3_Config>
 80084a4:	4603      	mov	r3, r0
 80084a6:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80084a8:	e009      	b.n	80084be <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80084aa:	2301      	movs	r3, #1
 80084ac:	75fb      	strb	r3, [r7, #23]
      break;
 80084ae:	e006      	b.n	80084be <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80084b0:	bf00      	nop
 80084b2:	e004      	b.n	80084be <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80084b4:	bf00      	nop
 80084b6:	e002      	b.n	80084be <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80084b8:	bf00      	nop
 80084ba:	e000      	b.n	80084be <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80084bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80084be:	7dfb      	ldrb	r3, [r7, #23]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d10a      	bne.n	80084da <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80084c4:	4b2b      	ldr	r3, [pc, #172]	; (8008574 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80084c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084c8:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80084d2:	4928      	ldr	r1, [pc, #160]	; (8008574 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80084d4:	4313      	orrs	r3, r2
 80084d6:	658b      	str	r3, [r1, #88]	; 0x58
 80084d8:	e001      	b.n	80084de <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084da:	7dfb      	ldrb	r3, [r7, #23]
 80084dc:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d02f      	beq.n	800854a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80084f2:	d00e      	beq.n	8008512 <HAL_RCCEx_PeriphCLKConfig+0x582>
 80084f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80084f8:	d814      	bhi.n	8008524 <HAL_RCCEx_PeriphCLKConfig+0x594>
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d015      	beq.n	800852a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80084fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008502:	d10f      	bne.n	8008524 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008504:	4b1b      	ldr	r3, [pc, #108]	; (8008574 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008508:	4a1a      	ldr	r2, [pc, #104]	; (8008574 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800850a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800850e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008510:	e00c      	b.n	800852c <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	3304      	adds	r3, #4
 8008516:	2101      	movs	r1, #1
 8008518:	4618      	mov	r0, r3
 800851a:	f001 fd5b 	bl	8009fd4 <RCCEx_PLL2_Config>
 800851e:	4603      	mov	r3, r0
 8008520:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008522:	e003      	b.n	800852c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008524:	2301      	movs	r3, #1
 8008526:	75fb      	strb	r3, [r7, #23]
      break;
 8008528:	e000      	b.n	800852c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800852a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800852c:	7dfb      	ldrb	r3, [r7, #23]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d109      	bne.n	8008546 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008532:	4b10      	ldr	r3, [pc, #64]	; (8008574 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008534:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008536:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800853e:	490d      	ldr	r1, [pc, #52]	; (8008574 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008540:	4313      	orrs	r3, r2
 8008542:	650b      	str	r3, [r1, #80]	; 0x50
 8008544:	e001      	b.n	800854a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008546:	7dfb      	ldrb	r3, [r7, #23]
 8008548:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008552:	2b00      	cmp	r3, #0
 8008554:	d033      	beq.n	80085be <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800855a:	2b03      	cmp	r3, #3
 800855c:	d81c      	bhi.n	8008598 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800855e:	a201      	add	r2, pc, #4	; (adr r2, 8008564 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8008560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008564:	0800859f 	.word	0x0800859f
 8008568:	08008579 	.word	0x08008579
 800856c:	08008587 	.word	0x08008587
 8008570:	0800859f 	.word	0x0800859f
 8008574:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008578:	4bb8      	ldr	r3, [pc, #736]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800857a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800857c:	4ab7      	ldr	r2, [pc, #732]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800857e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008582:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008584:	e00c      	b.n	80085a0 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	3304      	adds	r3, #4
 800858a:	2102      	movs	r1, #2
 800858c:	4618      	mov	r0, r3
 800858e:	f001 fd21 	bl	8009fd4 <RCCEx_PLL2_Config>
 8008592:	4603      	mov	r3, r0
 8008594:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008596:	e003      	b.n	80085a0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008598:	2301      	movs	r3, #1
 800859a:	75fb      	strb	r3, [r7, #23]
      break;
 800859c:	e000      	b.n	80085a0 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800859e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80085a0:	7dfb      	ldrb	r3, [r7, #23]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d109      	bne.n	80085ba <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80085a6:	4bad      	ldr	r3, [pc, #692]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80085a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085aa:	f023 0203 	bic.w	r2, r3, #3
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085b2:	49aa      	ldr	r1, [pc, #680]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80085b4:	4313      	orrs	r3, r2
 80085b6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80085b8:	e001      	b.n	80085be <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085ba:	7dfb      	ldrb	r3, [r7, #23]
 80085bc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	f000 8086 	beq.w	80086d8 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80085cc:	4ba4      	ldr	r3, [pc, #656]	; (8008860 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	4aa3      	ldr	r2, [pc, #652]	; (8008860 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80085d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80085d6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80085d8:	f7fa fe06 	bl	80031e8 <HAL_GetTick>
 80085dc:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80085de:	e009      	b.n	80085f4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80085e0:	f7fa fe02 	bl	80031e8 <HAL_GetTick>
 80085e4:	4602      	mov	r2, r0
 80085e6:	693b      	ldr	r3, [r7, #16]
 80085e8:	1ad3      	subs	r3, r2, r3
 80085ea:	2b64      	cmp	r3, #100	; 0x64
 80085ec:	d902      	bls.n	80085f4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80085ee:	2303      	movs	r3, #3
 80085f0:	75fb      	strb	r3, [r7, #23]
        break;
 80085f2:	e005      	b.n	8008600 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80085f4:	4b9a      	ldr	r3, [pc, #616]	; (8008860 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d0ef      	beq.n	80085e0 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8008600:	7dfb      	ldrb	r3, [r7, #23]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d166      	bne.n	80086d4 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008606:	4b95      	ldr	r3, [pc, #596]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008608:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008610:	4053      	eors	r3, r2
 8008612:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008616:	2b00      	cmp	r3, #0
 8008618:	d013      	beq.n	8008642 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800861a:	4b90      	ldr	r3, [pc, #576]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800861c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800861e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008622:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008624:	4b8d      	ldr	r3, [pc, #564]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008628:	4a8c      	ldr	r2, [pc, #560]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800862a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800862e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008630:	4b8a      	ldr	r3, [pc, #552]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008634:	4a89      	ldr	r2, [pc, #548]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008636:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800863a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800863c:	4a87      	ldr	r2, [pc, #540]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008648:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800864c:	d115      	bne.n	800867a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800864e:	f7fa fdcb 	bl	80031e8 <HAL_GetTick>
 8008652:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008654:	e00b      	b.n	800866e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008656:	f7fa fdc7 	bl	80031e8 <HAL_GetTick>
 800865a:	4602      	mov	r2, r0
 800865c:	693b      	ldr	r3, [r7, #16]
 800865e:	1ad3      	subs	r3, r2, r3
 8008660:	f241 3288 	movw	r2, #5000	; 0x1388
 8008664:	4293      	cmp	r3, r2
 8008666:	d902      	bls.n	800866e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8008668:	2303      	movs	r3, #3
 800866a:	75fb      	strb	r3, [r7, #23]
            break;
 800866c:	e005      	b.n	800867a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800866e:	4b7b      	ldr	r3, [pc, #492]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008672:	f003 0302 	and.w	r3, r3, #2
 8008676:	2b00      	cmp	r3, #0
 8008678:	d0ed      	beq.n	8008656 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800867a:	7dfb      	ldrb	r3, [r7, #23]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d126      	bne.n	80086ce <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008686:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800868a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800868e:	d10d      	bne.n	80086ac <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8008690:	4b72      	ldr	r3, [pc, #456]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008692:	691b      	ldr	r3, [r3, #16]
 8008694:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800869e:	0919      	lsrs	r1, r3, #4
 80086a0:	4b70      	ldr	r3, [pc, #448]	; (8008864 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 80086a2:	400b      	ands	r3, r1
 80086a4:	496d      	ldr	r1, [pc, #436]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80086a6:	4313      	orrs	r3, r2
 80086a8:	610b      	str	r3, [r1, #16]
 80086aa:	e005      	b.n	80086b8 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80086ac:	4b6b      	ldr	r3, [pc, #428]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80086ae:	691b      	ldr	r3, [r3, #16]
 80086b0:	4a6a      	ldr	r2, [pc, #424]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80086b2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80086b6:	6113      	str	r3, [r2, #16]
 80086b8:	4b68      	ldr	r3, [pc, #416]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80086ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80086c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80086c6:	4965      	ldr	r1, [pc, #404]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80086c8:	4313      	orrs	r3, r2
 80086ca:	670b      	str	r3, [r1, #112]	; 0x70
 80086cc:	e004      	b.n	80086d8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80086ce:	7dfb      	ldrb	r3, [r7, #23]
 80086d0:	75bb      	strb	r3, [r7, #22]
 80086d2:	e001      	b.n	80086d8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086d4:	7dfb      	ldrb	r3, [r7, #23]
 80086d6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f003 0301 	and.w	r3, r3, #1
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d07e      	beq.n	80087e2 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80086e8:	2b28      	cmp	r3, #40	; 0x28
 80086ea:	d867      	bhi.n	80087bc <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80086ec:	a201      	add	r2, pc, #4	; (adr r2, 80086f4 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80086ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086f2:	bf00      	nop
 80086f4:	080087c3 	.word	0x080087c3
 80086f8:	080087bd 	.word	0x080087bd
 80086fc:	080087bd 	.word	0x080087bd
 8008700:	080087bd 	.word	0x080087bd
 8008704:	080087bd 	.word	0x080087bd
 8008708:	080087bd 	.word	0x080087bd
 800870c:	080087bd 	.word	0x080087bd
 8008710:	080087bd 	.word	0x080087bd
 8008714:	08008799 	.word	0x08008799
 8008718:	080087bd 	.word	0x080087bd
 800871c:	080087bd 	.word	0x080087bd
 8008720:	080087bd 	.word	0x080087bd
 8008724:	080087bd 	.word	0x080087bd
 8008728:	080087bd 	.word	0x080087bd
 800872c:	080087bd 	.word	0x080087bd
 8008730:	080087bd 	.word	0x080087bd
 8008734:	080087ab 	.word	0x080087ab
 8008738:	080087bd 	.word	0x080087bd
 800873c:	080087bd 	.word	0x080087bd
 8008740:	080087bd 	.word	0x080087bd
 8008744:	080087bd 	.word	0x080087bd
 8008748:	080087bd 	.word	0x080087bd
 800874c:	080087bd 	.word	0x080087bd
 8008750:	080087bd 	.word	0x080087bd
 8008754:	080087c3 	.word	0x080087c3
 8008758:	080087bd 	.word	0x080087bd
 800875c:	080087bd 	.word	0x080087bd
 8008760:	080087bd 	.word	0x080087bd
 8008764:	080087bd 	.word	0x080087bd
 8008768:	080087bd 	.word	0x080087bd
 800876c:	080087bd 	.word	0x080087bd
 8008770:	080087bd 	.word	0x080087bd
 8008774:	080087c3 	.word	0x080087c3
 8008778:	080087bd 	.word	0x080087bd
 800877c:	080087bd 	.word	0x080087bd
 8008780:	080087bd 	.word	0x080087bd
 8008784:	080087bd 	.word	0x080087bd
 8008788:	080087bd 	.word	0x080087bd
 800878c:	080087bd 	.word	0x080087bd
 8008790:	080087bd 	.word	0x080087bd
 8008794:	080087c3 	.word	0x080087c3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	3304      	adds	r3, #4
 800879c:	2101      	movs	r1, #1
 800879e:	4618      	mov	r0, r3
 80087a0:	f001 fc18 	bl	8009fd4 <RCCEx_PLL2_Config>
 80087a4:	4603      	mov	r3, r0
 80087a6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80087a8:	e00c      	b.n	80087c4 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	3324      	adds	r3, #36	; 0x24
 80087ae:	2101      	movs	r1, #1
 80087b0:	4618      	mov	r0, r3
 80087b2:	f001 fcc1 	bl	800a138 <RCCEx_PLL3_Config>
 80087b6:	4603      	mov	r3, r0
 80087b8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80087ba:	e003      	b.n	80087c4 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80087bc:	2301      	movs	r3, #1
 80087be:	75fb      	strb	r3, [r7, #23]
      break;
 80087c0:	e000      	b.n	80087c4 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 80087c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80087c4:	7dfb      	ldrb	r3, [r7, #23]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d109      	bne.n	80087de <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80087ca:	4b24      	ldr	r3, [pc, #144]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80087cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087ce:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80087d6:	4921      	ldr	r1, [pc, #132]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80087d8:	4313      	orrs	r3, r2
 80087da:	654b      	str	r3, [r1, #84]	; 0x54
 80087dc:	e001      	b.n	80087e2 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087de:	7dfb      	ldrb	r3, [r7, #23]
 80087e0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f003 0302 	and.w	r3, r3, #2
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d03e      	beq.n	800886c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80087f2:	2b05      	cmp	r3, #5
 80087f4:	d820      	bhi.n	8008838 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 80087f6:	a201      	add	r2, pc, #4	; (adr r2, 80087fc <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 80087f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087fc:	0800883f 	.word	0x0800883f
 8008800:	08008815 	.word	0x08008815
 8008804:	08008827 	.word	0x08008827
 8008808:	0800883f 	.word	0x0800883f
 800880c:	0800883f 	.word	0x0800883f
 8008810:	0800883f 	.word	0x0800883f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	3304      	adds	r3, #4
 8008818:	2101      	movs	r1, #1
 800881a:	4618      	mov	r0, r3
 800881c:	f001 fbda 	bl	8009fd4 <RCCEx_PLL2_Config>
 8008820:	4603      	mov	r3, r0
 8008822:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008824:	e00c      	b.n	8008840 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	3324      	adds	r3, #36	; 0x24
 800882a:	2101      	movs	r1, #1
 800882c:	4618      	mov	r0, r3
 800882e:	f001 fc83 	bl	800a138 <RCCEx_PLL3_Config>
 8008832:	4603      	mov	r3, r0
 8008834:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008836:	e003      	b.n	8008840 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008838:	2301      	movs	r3, #1
 800883a:	75fb      	strb	r3, [r7, #23]
      break;
 800883c:	e000      	b.n	8008840 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800883e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008840:	7dfb      	ldrb	r3, [r7, #23]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d110      	bne.n	8008868 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008846:	4b05      	ldr	r3, [pc, #20]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008848:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800884a:	f023 0207 	bic.w	r2, r3, #7
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008852:	4902      	ldr	r1, [pc, #8]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008854:	4313      	orrs	r3, r2
 8008856:	654b      	str	r3, [r1, #84]	; 0x54
 8008858:	e008      	b.n	800886c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800885a:	bf00      	nop
 800885c:	58024400 	.word	0x58024400
 8008860:	58024800 	.word	0x58024800
 8008864:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008868:	7dfb      	ldrb	r3, [r7, #23]
 800886a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f003 0304 	and.w	r3, r3, #4
 8008874:	2b00      	cmp	r3, #0
 8008876:	d039      	beq.n	80088ec <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800887e:	2b05      	cmp	r3, #5
 8008880:	d820      	bhi.n	80088c4 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8008882:	a201      	add	r2, pc, #4	; (adr r2, 8008888 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8008884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008888:	080088cb 	.word	0x080088cb
 800888c:	080088a1 	.word	0x080088a1
 8008890:	080088b3 	.word	0x080088b3
 8008894:	080088cb 	.word	0x080088cb
 8008898:	080088cb 	.word	0x080088cb
 800889c:	080088cb 	.word	0x080088cb
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	3304      	adds	r3, #4
 80088a4:	2101      	movs	r1, #1
 80088a6:	4618      	mov	r0, r3
 80088a8:	f001 fb94 	bl	8009fd4 <RCCEx_PLL2_Config>
 80088ac:	4603      	mov	r3, r0
 80088ae:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80088b0:	e00c      	b.n	80088cc <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	3324      	adds	r3, #36	; 0x24
 80088b6:	2101      	movs	r1, #1
 80088b8:	4618      	mov	r0, r3
 80088ba:	f001 fc3d 	bl	800a138 <RCCEx_PLL3_Config>
 80088be:	4603      	mov	r3, r0
 80088c0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80088c2:	e003      	b.n	80088cc <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80088c4:	2301      	movs	r3, #1
 80088c6:	75fb      	strb	r3, [r7, #23]
      break;
 80088c8:	e000      	b.n	80088cc <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 80088ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80088cc:	7dfb      	ldrb	r3, [r7, #23]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d10a      	bne.n	80088e8 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80088d2:	4bb7      	ldr	r3, [pc, #732]	; (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80088d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088d6:	f023 0207 	bic.w	r2, r3, #7
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088e0:	49b3      	ldr	r1, [pc, #716]	; (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80088e2:	4313      	orrs	r3, r2
 80088e4:	658b      	str	r3, [r1, #88]	; 0x58
 80088e6:	e001      	b.n	80088ec <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088e8:	7dfb      	ldrb	r3, [r7, #23]
 80088ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f003 0320 	and.w	r3, r3, #32
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d04b      	beq.n	8008990 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80088fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008902:	d02e      	beq.n	8008962 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8008904:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008908:	d828      	bhi.n	800895c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800890a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800890e:	d02a      	beq.n	8008966 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8008910:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008914:	d822      	bhi.n	800895c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8008916:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800891a:	d026      	beq.n	800896a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800891c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008920:	d81c      	bhi.n	800895c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8008922:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008926:	d010      	beq.n	800894a <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8008928:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800892c:	d816      	bhi.n	800895c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800892e:	2b00      	cmp	r3, #0
 8008930:	d01d      	beq.n	800896e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8008932:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008936:	d111      	bne.n	800895c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	3304      	adds	r3, #4
 800893c:	2100      	movs	r1, #0
 800893e:	4618      	mov	r0, r3
 8008940:	f001 fb48 	bl	8009fd4 <RCCEx_PLL2_Config>
 8008944:	4603      	mov	r3, r0
 8008946:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008948:	e012      	b.n	8008970 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	3324      	adds	r3, #36	; 0x24
 800894e:	2102      	movs	r1, #2
 8008950:	4618      	mov	r0, r3
 8008952:	f001 fbf1 	bl	800a138 <RCCEx_PLL3_Config>
 8008956:	4603      	mov	r3, r0
 8008958:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800895a:	e009      	b.n	8008970 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800895c:	2301      	movs	r3, #1
 800895e:	75fb      	strb	r3, [r7, #23]
      break;
 8008960:	e006      	b.n	8008970 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8008962:	bf00      	nop
 8008964:	e004      	b.n	8008970 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8008966:	bf00      	nop
 8008968:	e002      	b.n	8008970 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800896a:	bf00      	nop
 800896c:	e000      	b.n	8008970 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800896e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008970:	7dfb      	ldrb	r3, [r7, #23]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d10a      	bne.n	800898c <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008976:	4b8e      	ldr	r3, [pc, #568]	; (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008978:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800897a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008984:	498a      	ldr	r1, [pc, #552]	; (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008986:	4313      	orrs	r3, r2
 8008988:	654b      	str	r3, [r1, #84]	; 0x54
 800898a:	e001      	b.n	8008990 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800898c:	7dfb      	ldrb	r3, [r7, #23]
 800898e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008998:	2b00      	cmp	r3, #0
 800899a:	d04b      	beq.n	8008a34 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80089a2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80089a6:	d02e      	beq.n	8008a06 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 80089a8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80089ac:	d828      	bhi.n	8008a00 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80089ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089b2:	d02a      	beq.n	8008a0a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80089b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089b8:	d822      	bhi.n	8008a00 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80089ba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80089be:	d026      	beq.n	8008a0e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80089c0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80089c4:	d81c      	bhi.n	8008a00 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80089c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80089ca:	d010      	beq.n	80089ee <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 80089cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80089d0:	d816      	bhi.n	8008a00 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d01d      	beq.n	8008a12 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80089d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80089da:	d111      	bne.n	8008a00 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	3304      	adds	r3, #4
 80089e0:	2100      	movs	r1, #0
 80089e2:	4618      	mov	r0, r3
 80089e4:	f001 faf6 	bl	8009fd4 <RCCEx_PLL2_Config>
 80089e8:	4603      	mov	r3, r0
 80089ea:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80089ec:	e012      	b.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	3324      	adds	r3, #36	; 0x24
 80089f2:	2102      	movs	r1, #2
 80089f4:	4618      	mov	r0, r3
 80089f6:	f001 fb9f 	bl	800a138 <RCCEx_PLL3_Config>
 80089fa:	4603      	mov	r3, r0
 80089fc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80089fe:	e009      	b.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008a00:	2301      	movs	r3, #1
 8008a02:	75fb      	strb	r3, [r7, #23]
      break;
 8008a04:	e006      	b.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8008a06:	bf00      	nop
 8008a08:	e004      	b.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8008a0a:	bf00      	nop
 8008a0c:	e002      	b.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8008a0e:	bf00      	nop
 8008a10:	e000      	b.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8008a12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008a14:	7dfb      	ldrb	r3, [r7, #23]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d10a      	bne.n	8008a30 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008a1a:	4b65      	ldr	r3, [pc, #404]	; (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a1e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008a28:	4961      	ldr	r1, [pc, #388]	; (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008a2a:	4313      	orrs	r3, r2
 8008a2c:	658b      	str	r3, [r1, #88]	; 0x58
 8008a2e:	e001      	b.n	8008a34 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a30:	7dfb      	ldrb	r3, [r7, #23]
 8008a32:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d04b      	beq.n	8008ad8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008a46:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008a4a:	d02e      	beq.n	8008aaa <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8008a4c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008a50:	d828      	bhi.n	8008aa4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8008a52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a56:	d02a      	beq.n	8008aae <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8008a58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a5c:	d822      	bhi.n	8008aa4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8008a5e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008a62:	d026      	beq.n	8008ab2 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8008a64:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008a68:	d81c      	bhi.n	8008aa4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8008a6a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008a6e:	d010      	beq.n	8008a92 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8008a70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008a74:	d816      	bhi.n	8008aa4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d01d      	beq.n	8008ab6 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8008a7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a7e:	d111      	bne.n	8008aa4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	3304      	adds	r3, #4
 8008a84:	2100      	movs	r1, #0
 8008a86:	4618      	mov	r0, r3
 8008a88:	f001 faa4 	bl	8009fd4 <RCCEx_PLL2_Config>
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008a90:	e012      	b.n	8008ab8 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	3324      	adds	r3, #36	; 0x24
 8008a96:	2102      	movs	r1, #2
 8008a98:	4618      	mov	r0, r3
 8008a9a:	f001 fb4d 	bl	800a138 <RCCEx_PLL3_Config>
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008aa2:	e009      	b.n	8008ab8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008aa4:	2301      	movs	r3, #1
 8008aa6:	75fb      	strb	r3, [r7, #23]
      break;
 8008aa8:	e006      	b.n	8008ab8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8008aaa:	bf00      	nop
 8008aac:	e004      	b.n	8008ab8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8008aae:	bf00      	nop
 8008ab0:	e002      	b.n	8008ab8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8008ab2:	bf00      	nop
 8008ab4:	e000      	b.n	8008ab8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8008ab6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008ab8:	7dfb      	ldrb	r3, [r7, #23]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d10a      	bne.n	8008ad4 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008abe:	4b3c      	ldr	r3, [pc, #240]	; (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008ac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ac2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008acc:	4938      	ldr	r1, [pc, #224]	; (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008ace:	4313      	orrs	r3, r2
 8008ad0:	658b      	str	r3, [r1, #88]	; 0x58
 8008ad2:	e001      	b.n	8008ad8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ad4:	7dfb      	ldrb	r3, [r7, #23]
 8008ad6:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f003 0308 	and.w	r3, r3, #8
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d01a      	beq.n	8008b1a <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008aea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008aee:	d10a      	bne.n	8008b06 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	3324      	adds	r3, #36	; 0x24
 8008af4:	2102      	movs	r1, #2
 8008af6:	4618      	mov	r0, r3
 8008af8:	f001 fb1e 	bl	800a138 <RCCEx_PLL3_Config>
 8008afc:	4603      	mov	r3, r0
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d001      	beq.n	8008b06 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8008b02:	2301      	movs	r3, #1
 8008b04:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008b06:	4b2a      	ldr	r3, [pc, #168]	; (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b0a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b14:	4926      	ldr	r1, [pc, #152]	; (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008b16:	4313      	orrs	r3, r2
 8008b18:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	f003 0310 	and.w	r3, r3, #16
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d01a      	beq.n	8008b5c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008b2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b30:	d10a      	bne.n	8008b48 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	3324      	adds	r3, #36	; 0x24
 8008b36:	2102      	movs	r1, #2
 8008b38:	4618      	mov	r0, r3
 8008b3a:	f001 fafd 	bl	800a138 <RCCEx_PLL3_Config>
 8008b3e:	4603      	mov	r3, r0
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d001      	beq.n	8008b48 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8008b44:	2301      	movs	r3, #1
 8008b46:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008b48:	4b19      	ldr	r3, [pc, #100]	; (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008b4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b4c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008b56:	4916      	ldr	r1, [pc, #88]	; (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008b58:	4313      	orrs	r3, r2
 8008b5a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d036      	beq.n	8008bd6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008b6e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008b72:	d01f      	beq.n	8008bb4 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8008b74:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008b78:	d817      	bhi.n	8008baa <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d003      	beq.n	8008b86 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8008b7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b82:	d009      	beq.n	8008b98 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8008b84:	e011      	b.n	8008baa <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	3304      	adds	r3, #4
 8008b8a:	2100      	movs	r1, #0
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	f001 fa21 	bl	8009fd4 <RCCEx_PLL2_Config>
 8008b92:	4603      	mov	r3, r0
 8008b94:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008b96:	e00e      	b.n	8008bb6 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	3324      	adds	r3, #36	; 0x24
 8008b9c:	2102      	movs	r1, #2
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	f001 faca 	bl	800a138 <RCCEx_PLL3_Config>
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008ba8:	e005      	b.n	8008bb6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008baa:	2301      	movs	r3, #1
 8008bac:	75fb      	strb	r3, [r7, #23]
      break;
 8008bae:	e002      	b.n	8008bb6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8008bb0:	58024400 	.word	0x58024400
      break;
 8008bb4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008bb6:	7dfb      	ldrb	r3, [r7, #23]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d10a      	bne.n	8008bd2 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008bbc:	4b93      	ldr	r3, [pc, #588]	; (8008e0c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bc0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008bca:	4990      	ldr	r1, [pc, #576]	; (8008e0c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008bcc:	4313      	orrs	r3, r2
 8008bce:	658b      	str	r3, [r1, #88]	; 0x58
 8008bd0:	e001      	b.n	8008bd6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bd2:	7dfb      	ldrb	r3, [r7, #23]
 8008bd4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d033      	beq.n	8008c4a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008be8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008bec:	d01c      	beq.n	8008c28 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8008bee:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008bf2:	d816      	bhi.n	8008c22 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8008bf4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008bf8:	d003      	beq.n	8008c02 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8008bfa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008bfe:	d007      	beq.n	8008c10 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8008c00:	e00f      	b.n	8008c22 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c02:	4b82      	ldr	r3, [pc, #520]	; (8008e0c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c06:	4a81      	ldr	r2, [pc, #516]	; (8008e0c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008c08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c0c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8008c0e:	e00c      	b.n	8008c2a <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	3324      	adds	r3, #36	; 0x24
 8008c14:	2101      	movs	r1, #1
 8008c16:	4618      	mov	r0, r3
 8008c18:	f001 fa8e 	bl	800a138 <RCCEx_PLL3_Config>
 8008c1c:	4603      	mov	r3, r0
 8008c1e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8008c20:	e003      	b.n	8008c2a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008c22:	2301      	movs	r3, #1
 8008c24:	75fb      	strb	r3, [r7, #23]
      break;
 8008c26:	e000      	b.n	8008c2a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8008c28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008c2a:	7dfb      	ldrb	r3, [r7, #23]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d10a      	bne.n	8008c46 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008c30:	4b76      	ldr	r3, [pc, #472]	; (8008e0c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008c32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c34:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c3e:	4973      	ldr	r1, [pc, #460]	; (8008e0c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008c40:	4313      	orrs	r3, r2
 8008c42:	654b      	str	r3, [r1, #84]	; 0x54
 8008c44:	e001      	b.n	8008c4a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c46:	7dfb      	ldrb	r3, [r7, #23]
 8008c48:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d029      	beq.n	8008caa <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d003      	beq.n	8008c66 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8008c5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c62:	d007      	beq.n	8008c74 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8008c64:	e00f      	b.n	8008c86 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c66:	4b69      	ldr	r3, [pc, #420]	; (8008e0c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c6a:	4a68      	ldr	r2, [pc, #416]	; (8008e0c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008c6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c70:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008c72:	e00b      	b.n	8008c8c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	3304      	adds	r3, #4
 8008c78:	2102      	movs	r1, #2
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	f001 f9aa 	bl	8009fd4 <RCCEx_PLL2_Config>
 8008c80:	4603      	mov	r3, r0
 8008c82:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008c84:	e002      	b.n	8008c8c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8008c86:	2301      	movs	r3, #1
 8008c88:	75fb      	strb	r3, [r7, #23]
      break;
 8008c8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008c8c:	7dfb      	ldrb	r3, [r7, #23]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d109      	bne.n	8008ca6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008c92:	4b5e      	ldr	r3, [pc, #376]	; (8008e0c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c96:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c9e:	495b      	ldr	r1, [pc, #364]	; (8008e0c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008ca0:	4313      	orrs	r3, r2
 8008ca2:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008ca4:	e001      	b.n	8008caa <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ca6:	7dfb      	ldrb	r3, [r7, #23]
 8008ca8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d00a      	beq.n	8008ccc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	3324      	adds	r3, #36	; 0x24
 8008cba:	2102      	movs	r1, #2
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	f001 fa3b 	bl	800a138 <RCCEx_PLL3_Config>
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d001      	beq.n	8008ccc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8008cc8:	2301      	movs	r3, #1
 8008cca:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d030      	beq.n	8008d3a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008cdc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008ce0:	d017      	beq.n	8008d12 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8008ce2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008ce6:	d811      	bhi.n	8008d0c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8008ce8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008cec:	d013      	beq.n	8008d16 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8008cee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008cf2:	d80b      	bhi.n	8008d0c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d010      	beq.n	8008d1a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8008cf8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008cfc:	d106      	bne.n	8008d0c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008cfe:	4b43      	ldr	r3, [pc, #268]	; (8008e0c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d02:	4a42      	ldr	r2, [pc, #264]	; (8008e0c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008d04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d08:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8008d0a:	e007      	b.n	8008d1c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008d0c:	2301      	movs	r3, #1
 8008d0e:	75fb      	strb	r3, [r7, #23]
      break;
 8008d10:	e004      	b.n	8008d1c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8008d12:	bf00      	nop
 8008d14:	e002      	b.n	8008d1c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8008d16:	bf00      	nop
 8008d18:	e000      	b.n	8008d1c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8008d1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008d1c:	7dfb      	ldrb	r3, [r7, #23]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d109      	bne.n	8008d36 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008d22:	4b3a      	ldr	r3, [pc, #232]	; (8008e0c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d26:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008d2e:	4937      	ldr	r1, [pc, #220]	; (8008e0c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008d30:	4313      	orrs	r3, r2
 8008d32:	654b      	str	r3, [r1, #84]	; 0x54
 8008d34:	e001      	b.n	8008d3a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d36:	7dfb      	ldrb	r3, [r7, #23]
 8008d38:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d008      	beq.n	8008d58 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008d46:	4b31      	ldr	r3, [pc, #196]	; (8008e0c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008d48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d4a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d52:	492e      	ldr	r1, [pc, #184]	; (8008e0c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008d54:	4313      	orrs	r3, r2
 8008d56:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d009      	beq.n	8008d78 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008d64:	4b29      	ldr	r3, [pc, #164]	; (8008e0c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008d66:	691b      	ldr	r3, [r3, #16]
 8008d68:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008d72:	4926      	ldr	r1, [pc, #152]	; (8008e0c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008d74:	4313      	orrs	r3, r2
 8008d76:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d008      	beq.n	8008d96 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008d84:	4b21      	ldr	r3, [pc, #132]	; (8008e0c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008d86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d88:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008d90:	491e      	ldr	r1, [pc, #120]	; (8008e0c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008d92:	4313      	orrs	r3, r2
 8008d94:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d00d      	beq.n	8008dbe <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008da2:	4b1a      	ldr	r3, [pc, #104]	; (8008e0c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008da4:	691b      	ldr	r3, [r3, #16]
 8008da6:	4a19      	ldr	r2, [pc, #100]	; (8008e0c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008da8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008dac:	6113      	str	r3, [r2, #16]
 8008dae:	4b17      	ldr	r3, [pc, #92]	; (8008e0c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008db0:	691a      	ldr	r2, [r3, #16]
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008db8:	4914      	ldr	r1, [pc, #80]	; (8008e0c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008dba:	4313      	orrs	r3, r2
 8008dbc:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	da08      	bge.n	8008dd8 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008dc6:	4b11      	ldr	r3, [pc, #68]	; (8008e0c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008dca:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008dd2:	490e      	ldr	r1, [pc, #56]	; (8008e0c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008dd4:	4313      	orrs	r3, r2
 8008dd6:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d009      	beq.n	8008df8 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008de4:	4b09      	ldr	r3, [pc, #36]	; (8008e0c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008de6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008de8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008df2:	4906      	ldr	r1, [pc, #24]	; (8008e0c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008df4:	4313      	orrs	r3, r2
 8008df6:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8008df8:	7dbb      	ldrb	r3, [r7, #22]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d101      	bne.n	8008e02 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8008dfe:	2300      	movs	r3, #0
 8008e00:	e000      	b.n	8008e04 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8008e02:	2301      	movs	r3, #1
}
 8008e04:	4618      	mov	r0, r3
 8008e06:	3718      	adds	r7, #24
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	bd80      	pop	{r7, pc}
 8008e0c:	58024400 	.word	0x58024400

08008e10 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b090      	sub	sp, #64	; 0x40
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e1e:	f040 8095 	bne.w	8008f4c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8008e22:	4bae      	ldr	r3, [pc, #696]	; (80090dc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008e24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e26:	f003 0307 	and.w	r3, r3, #7
 8008e2a:	633b      	str	r3, [r7, #48]	; 0x30
 8008e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e2e:	2b04      	cmp	r3, #4
 8008e30:	f200 8088 	bhi.w	8008f44 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8008e34:	a201      	add	r2, pc, #4	; (adr r2, 8008e3c <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8008e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e3a:	bf00      	nop
 8008e3c:	08008e51 	.word	0x08008e51
 8008e40:	08008e79 	.word	0x08008e79
 8008e44:	08008ea1 	.word	0x08008ea1
 8008e48:	08008f3d 	.word	0x08008f3d
 8008e4c:	08008ec9 	.word	0x08008ec9

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008e50:	4ba2      	ldr	r3, [pc, #648]	; (80090dc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e58:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008e5c:	d108      	bne.n	8008e70 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008e5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008e62:	4618      	mov	r0, r3
 8008e64:	f000 ff64 	bl	8009d30 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8008e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008e6c:	f000 bc95 	b.w	800979a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008e70:	2300      	movs	r3, #0
 8008e72:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e74:	f000 bc91 	b.w	800979a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008e78:	4b98      	ldr	r3, [pc, #608]	; (80090dc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008e84:	d108      	bne.n	8008e98 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e86:	f107 0318 	add.w	r3, r7, #24
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	f000 fca8 	bl	80097e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008e90:	69bb      	ldr	r3, [r7, #24]
 8008e92:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008e94:	f000 bc81 	b.w	800979a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008e98:	2300      	movs	r3, #0
 8008e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e9c:	f000 bc7d 	b.w	800979a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008ea0:	4b8e      	ldr	r3, [pc, #568]	; (80090dc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008ea8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008eac:	d108      	bne.n	8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008eae:	f107 030c 	add.w	r3, r7, #12
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	f000 fde8 	bl	8009a88 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008ebc:	f000 bc6d 	b.w	800979a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ec4:	f000 bc69 	b.w	800979a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008ec8:	4b84      	ldr	r3, [pc, #528]	; (80090dc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008eca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ecc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008ed0:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008ed2:	4b82      	ldr	r3, [pc, #520]	; (80090dc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	f003 0304 	and.w	r3, r3, #4
 8008eda:	2b04      	cmp	r3, #4
 8008edc:	d10c      	bne.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8008ede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d109      	bne.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008ee4:	4b7d      	ldr	r3, [pc, #500]	; (80090dc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	08db      	lsrs	r3, r3, #3
 8008eea:	f003 0303 	and.w	r3, r3, #3
 8008eee:	4a7c      	ldr	r2, [pc, #496]	; (80090e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8008ef0:	fa22 f303 	lsr.w	r3, r2, r3
 8008ef4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ef6:	e01f      	b.n	8008f38 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008ef8:	4b78      	ldr	r3, [pc, #480]	; (80090dc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f04:	d106      	bne.n	8008f14 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8008f06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f08:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008f0c:	d102      	bne.n	8008f14 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008f0e:	4b75      	ldr	r3, [pc, #468]	; (80090e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8008f10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f12:	e011      	b.n	8008f38 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008f14:	4b71      	ldr	r3, [pc, #452]	; (80090dc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008f20:	d106      	bne.n	8008f30 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8008f22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f28:	d102      	bne.n	8008f30 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008f2a:	4b6f      	ldr	r3, [pc, #444]	; (80090e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8008f2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f2e:	e003      	b.n	8008f38 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008f30:	2300      	movs	r3, #0
 8008f32:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008f34:	f000 bc31 	b.w	800979a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008f38:	f000 bc2f 	b.w	800979a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008f3c:	4b6b      	ldr	r3, [pc, #428]	; (80090ec <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8008f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f40:	f000 bc2b 	b.w	800979a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8008f44:	2300      	movs	r3, #0
 8008f46:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f48:	f000 bc27 	b.w	800979a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f52:	f040 8095 	bne.w	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8008f56:	4b61      	ldr	r3, [pc, #388]	; (80090dc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008f58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f5a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8008f5e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f66:	d04d      	beq.n	8009004 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8008f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f6e:	f200 8084 	bhi.w	800907a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8008f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f74:	2bc0      	cmp	r3, #192	; 0xc0
 8008f76:	d07d      	beq.n	8009074 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8008f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f7a:	2bc0      	cmp	r3, #192	; 0xc0
 8008f7c:	d87d      	bhi.n	800907a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8008f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f80:	2b80      	cmp	r3, #128	; 0x80
 8008f82:	d02d      	beq.n	8008fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8008f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f86:	2b80      	cmp	r3, #128	; 0x80
 8008f88:	d877      	bhi.n	800907a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8008f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d003      	beq.n	8008f98 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8008f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f92:	2b40      	cmp	r3, #64	; 0x40
 8008f94:	d012      	beq.n	8008fbc <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8008f96:	e070      	b.n	800907a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008f98:	4b50      	ldr	r3, [pc, #320]	; (80090dc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008fa0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008fa4:	d107      	bne.n	8008fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008fa6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008faa:	4618      	mov	r0, r3
 8008fac:	f000 fec0 	bl	8009d30 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008fb4:	e3f1      	b.n	800979a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008fba:	e3ee      	b.n	800979a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008fbc:	4b47      	ldr	r3, [pc, #284]	; (80090dc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008fc4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008fc8:	d107      	bne.n	8008fda <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008fca:	f107 0318 	add.w	r3, r7, #24
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f000 fc06 	bl	80097e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008fd4:	69bb      	ldr	r3, [r7, #24]
 8008fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008fd8:	e3df      	b.n	800979a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008fda:	2300      	movs	r3, #0
 8008fdc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008fde:	e3dc      	b.n	800979a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008fe0:	4b3e      	ldr	r3, [pc, #248]	; (80090dc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008fe8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008fec:	d107      	bne.n	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008fee:	f107 030c 	add.w	r3, r7, #12
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	f000 fd48 	bl	8009a88 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008ffc:	e3cd      	b.n	800979a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008ffe:	2300      	movs	r3, #0
 8009000:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009002:	e3ca      	b.n	800979a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009004:	4b35      	ldr	r3, [pc, #212]	; (80090dc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009006:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009008:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800900c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800900e:	4b33      	ldr	r3, [pc, #204]	; (80090dc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f003 0304 	and.w	r3, r3, #4
 8009016:	2b04      	cmp	r3, #4
 8009018:	d10c      	bne.n	8009034 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 800901a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800901c:	2b00      	cmp	r3, #0
 800901e:	d109      	bne.n	8009034 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009020:	4b2e      	ldr	r3, [pc, #184]	; (80090dc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	08db      	lsrs	r3, r3, #3
 8009026:	f003 0303 	and.w	r3, r3, #3
 800902a:	4a2d      	ldr	r2, [pc, #180]	; (80090e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 800902c:	fa22 f303 	lsr.w	r3, r2, r3
 8009030:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009032:	e01e      	b.n	8009072 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009034:	4b29      	ldr	r3, [pc, #164]	; (80090dc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800903c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009040:	d106      	bne.n	8009050 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8009042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009044:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009048:	d102      	bne.n	8009050 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800904a:	4b26      	ldr	r3, [pc, #152]	; (80090e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800904c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800904e:	e010      	b.n	8009072 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009050:	4b22      	ldr	r3, [pc, #136]	; (80090dc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009058:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800905c:	d106      	bne.n	800906c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800905e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009060:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009064:	d102      	bne.n	800906c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009066:	4b20      	ldr	r3, [pc, #128]	; (80090e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8009068:	63fb      	str	r3, [r7, #60]	; 0x3c
 800906a:	e002      	b.n	8009072 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800906c:	2300      	movs	r3, #0
 800906e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009070:	e393      	b.n	800979a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009072:	e392      	b.n	800979a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009074:	4b1d      	ldr	r3, [pc, #116]	; (80090ec <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8009076:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009078:	e38f      	b.n	800979a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800907a:	2300      	movs	r3, #0
 800907c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800907e:	e38c      	b.n	800979a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009086:	f040 80a7 	bne.w	80091d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800908a:	4b14      	ldr	r3, [pc, #80]	; (80090dc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800908c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800908e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8009092:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8009094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009096:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800909a:	d05f      	beq.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800909c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800909e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80090a2:	f200 8096 	bhi.w	80091d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80090a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090a8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80090ac:	f000 808e 	beq.w	80091cc <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 80090b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090b2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80090b6:	f200 808c 	bhi.w	80091d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80090ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80090c0:	d03a      	beq.n	8009138 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 80090c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80090c8:	f200 8083 	bhi.w	80091d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80090cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d00e      	beq.n	80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 80090d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80090d8:	d01c      	beq.n	8009114 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 80090da:	e07a      	b.n	80091d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80090dc:	58024400 	.word	0x58024400
 80090e0:	03d09000 	.word	0x03d09000
 80090e4:	003d0900 	.word	0x003d0900
 80090e8:	02dc6c00 	.word	0x02dc6c00
 80090ec:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80090f0:	4baa      	ldr	r3, [pc, #680]	; (800939c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80090f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80090fc:	d107      	bne.n	800910e <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80090fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009102:	4618      	mov	r0, r3
 8009104:	f000 fe14 	bl	8009d30 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800910a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800910c:	e345      	b.n	800979a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800910e:	2300      	movs	r3, #0
 8009110:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009112:	e342      	b.n	800979a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009114:	4ba1      	ldr	r3, [pc, #644]	; (800939c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800911c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009120:	d107      	bne.n	8009132 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009122:	f107 0318 	add.w	r3, r7, #24
 8009126:	4618      	mov	r0, r3
 8009128:	f000 fb5a 	bl	80097e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800912c:	69bb      	ldr	r3, [r7, #24]
 800912e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009130:	e333      	b.n	800979a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009132:	2300      	movs	r3, #0
 8009134:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009136:	e330      	b.n	800979a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009138:	4b98      	ldr	r3, [pc, #608]	; (800939c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009140:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009144:	d107      	bne.n	8009156 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009146:	f107 030c 	add.w	r3, r7, #12
 800914a:	4618      	mov	r0, r3
 800914c:	f000 fc9c 	bl	8009a88 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009154:	e321      	b.n	800979a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009156:	2300      	movs	r3, #0
 8009158:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800915a:	e31e      	b.n	800979a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800915c:	4b8f      	ldr	r3, [pc, #572]	; (800939c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800915e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009160:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009164:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009166:	4b8d      	ldr	r3, [pc, #564]	; (800939c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	f003 0304 	and.w	r3, r3, #4
 800916e:	2b04      	cmp	r3, #4
 8009170:	d10c      	bne.n	800918c <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8009172:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009174:	2b00      	cmp	r3, #0
 8009176:	d109      	bne.n	800918c <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009178:	4b88      	ldr	r3, [pc, #544]	; (800939c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	08db      	lsrs	r3, r3, #3
 800917e:	f003 0303 	and.w	r3, r3, #3
 8009182:	4a87      	ldr	r2, [pc, #540]	; (80093a0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009184:	fa22 f303 	lsr.w	r3, r2, r3
 8009188:	63fb      	str	r3, [r7, #60]	; 0x3c
 800918a:	e01e      	b.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800918c:	4b83      	ldr	r3, [pc, #524]	; (800939c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009194:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009198:	d106      	bne.n	80091a8 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 800919a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800919c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80091a0:	d102      	bne.n	80091a8 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80091a2:	4b80      	ldr	r3, [pc, #512]	; (80093a4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80091a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80091a6:	e010      	b.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80091a8:	4b7c      	ldr	r3, [pc, #496]	; (800939c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80091b4:	d106      	bne.n	80091c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 80091b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80091bc:	d102      	bne.n	80091c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80091be:	4b7a      	ldr	r3, [pc, #488]	; (80093a8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80091c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80091c2:	e002      	b.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80091c4:	2300      	movs	r3, #0
 80091c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80091c8:	e2e7      	b.n	800979a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80091ca:	e2e6      	b.n	800979a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80091cc:	4b77      	ldr	r3, [pc, #476]	; (80093ac <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80091ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80091d0:	e2e3      	b.n	800979a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 80091d2:	2300      	movs	r3, #0
 80091d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80091d6:	e2e0      	b.n	800979a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80091de:	f040 809c 	bne.w	800931a <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 80091e2:	4b6e      	ldr	r3, [pc, #440]	; (800939c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80091e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091e6:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80091ea:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80091ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80091f2:	d054      	beq.n	800929e <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 80091f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091f6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80091fa:	f200 808b 	bhi.w	8009314 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 80091fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009200:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009204:	f000 8083 	beq.w	800930e <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8009208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800920a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800920e:	f200 8081 	bhi.w	8009314 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8009212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009214:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009218:	d02f      	beq.n	800927a <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800921a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800921c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009220:	d878      	bhi.n	8009314 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8009222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009224:	2b00      	cmp	r3, #0
 8009226:	d004      	beq.n	8009232 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8009228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800922a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800922e:	d012      	beq.n	8009256 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8009230:	e070      	b.n	8009314 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009232:	4b5a      	ldr	r3, [pc, #360]	; (800939c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800923a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800923e:	d107      	bne.n	8009250 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009240:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009244:	4618      	mov	r0, r3
 8009246:	f000 fd73 	bl	8009d30 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800924a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800924c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800924e:	e2a4      	b.n	800979a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009250:	2300      	movs	r3, #0
 8009252:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009254:	e2a1      	b.n	800979a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009256:	4b51      	ldr	r3, [pc, #324]	; (800939c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800925e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009262:	d107      	bne.n	8009274 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009264:	f107 0318 	add.w	r3, r7, #24
 8009268:	4618      	mov	r0, r3
 800926a:	f000 fab9 	bl	80097e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800926e:	69bb      	ldr	r3, [r7, #24]
 8009270:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8009272:	e292      	b.n	800979a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009274:	2300      	movs	r3, #0
 8009276:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009278:	e28f      	b.n	800979a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800927a:	4b48      	ldr	r3, [pc, #288]	; (800939c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009282:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009286:	d107      	bne.n	8009298 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009288:	f107 030c 	add.w	r3, r7, #12
 800928c:	4618      	mov	r0, r3
 800928e:	f000 fbfb 	bl	8009a88 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009296:	e280      	b.n	800979a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009298:	2300      	movs	r3, #0
 800929a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800929c:	e27d      	b.n	800979a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800929e:	4b3f      	ldr	r3, [pc, #252]	; (800939c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80092a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80092a2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80092a6:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80092a8:	4b3c      	ldr	r3, [pc, #240]	; (800939c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f003 0304 	and.w	r3, r3, #4
 80092b0:	2b04      	cmp	r3, #4
 80092b2:	d10c      	bne.n	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 80092b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d109      	bne.n	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80092ba:	4b38      	ldr	r3, [pc, #224]	; (800939c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	08db      	lsrs	r3, r3, #3
 80092c0:	f003 0303 	and.w	r3, r3, #3
 80092c4:	4a36      	ldr	r2, [pc, #216]	; (80093a0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80092c6:	fa22 f303 	lsr.w	r3, r2, r3
 80092ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80092cc:	e01e      	b.n	800930c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80092ce:	4b33      	ldr	r3, [pc, #204]	; (800939c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092da:	d106      	bne.n	80092ea <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 80092dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80092e2:	d102      	bne.n	80092ea <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80092e4:	4b2f      	ldr	r3, [pc, #188]	; (80093a4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80092e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80092e8:	e010      	b.n	800930c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80092ea:	4b2c      	ldr	r3, [pc, #176]	; (800939c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80092f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80092f6:	d106      	bne.n	8009306 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 80092f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80092fe:	d102      	bne.n	8009306 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009300:	4b29      	ldr	r3, [pc, #164]	; (80093a8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8009302:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009304:	e002      	b.n	800930c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009306:	2300      	movs	r3, #0
 8009308:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800930a:	e246      	b.n	800979a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800930c:	e245      	b.n	800979a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800930e:	4b27      	ldr	r3, [pc, #156]	; (80093ac <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8009310:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009312:	e242      	b.n	800979a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8009314:	2300      	movs	r3, #0
 8009316:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009318:	e23f      	b.n	800979a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009320:	f040 80a8 	bne.w	8009474 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8009324:	4b1d      	ldr	r3, [pc, #116]	; (800939c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009326:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009328:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800932c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800932e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009330:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009334:	d060      	beq.n	80093f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8009336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009338:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800933c:	f200 8097 	bhi.w	800946e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8009340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009342:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009346:	f000 808f 	beq.w	8009468 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 800934a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800934c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009350:	f200 808d 	bhi.w	800946e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8009354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009356:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800935a:	d03b      	beq.n	80093d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 800935c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800935e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009362:	f200 8084 	bhi.w	800946e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8009366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009368:	2b00      	cmp	r3, #0
 800936a:	d004      	beq.n	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 800936c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800936e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009372:	d01d      	beq.n	80093b0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 8009374:	e07b      	b.n	800946e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009376:	4b09      	ldr	r3, [pc, #36]	; (800939c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800937e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009382:	d107      	bne.n	8009394 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009384:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009388:	4618      	mov	r0, r3
 800938a:	f000 fcd1 	bl	8009d30 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800938e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009390:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009392:	e202      	b.n	800979a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009394:	2300      	movs	r3, #0
 8009396:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009398:	e1ff      	b.n	800979a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800939a:	bf00      	nop
 800939c:	58024400 	.word	0x58024400
 80093a0:	03d09000 	.word	0x03d09000
 80093a4:	003d0900 	.word	0x003d0900
 80093a8:	02dc6c00 	.word	0x02dc6c00
 80093ac:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80093b0:	4ba3      	ldr	r3, [pc, #652]	; (8009640 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80093b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80093bc:	d107      	bne.n	80093ce <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80093be:	f107 0318 	add.w	r3, r7, #24
 80093c2:	4618      	mov	r0, r3
 80093c4:	f000 fa0c 	bl	80097e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80093c8:	69bb      	ldr	r3, [r7, #24]
 80093ca:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80093cc:	e1e5      	b.n	800979a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80093ce:	2300      	movs	r3, #0
 80093d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80093d2:	e1e2      	b.n	800979a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80093d4:	4b9a      	ldr	r3, [pc, #616]	; (8009640 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80093dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80093e0:	d107      	bne.n	80093f2 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80093e2:	f107 030c 	add.w	r3, r7, #12
 80093e6:	4618      	mov	r0, r3
 80093e8:	f000 fb4e 	bl	8009a88 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80093f0:	e1d3      	b.n	800979a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80093f2:	2300      	movs	r3, #0
 80093f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80093f6:	e1d0      	b.n	800979a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80093f8:	4b91      	ldr	r3, [pc, #580]	; (8009640 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80093fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80093fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009400:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009402:	4b8f      	ldr	r3, [pc, #572]	; (8009640 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f003 0304 	and.w	r3, r3, #4
 800940a:	2b04      	cmp	r3, #4
 800940c:	d10c      	bne.n	8009428 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 800940e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009410:	2b00      	cmp	r3, #0
 8009412:	d109      	bne.n	8009428 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009414:	4b8a      	ldr	r3, [pc, #552]	; (8009640 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	08db      	lsrs	r3, r3, #3
 800941a:	f003 0303 	and.w	r3, r3, #3
 800941e:	4a89      	ldr	r2, [pc, #548]	; (8009644 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009420:	fa22 f303 	lsr.w	r3, r2, r3
 8009424:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009426:	e01e      	b.n	8009466 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009428:	4b85      	ldr	r3, [pc, #532]	; (8009640 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009430:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009434:	d106      	bne.n	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 8009436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009438:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800943c:	d102      	bne.n	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800943e:	4b82      	ldr	r3, [pc, #520]	; (8009648 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8009440:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009442:	e010      	b.n	8009466 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009444:	4b7e      	ldr	r3, [pc, #504]	; (8009640 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800944c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009450:	d106      	bne.n	8009460 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8009452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009454:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009458:	d102      	bne.n	8009460 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800945a:	4b7c      	ldr	r3, [pc, #496]	; (800964c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800945c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800945e:	e002      	b.n	8009466 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009460:	2300      	movs	r3, #0
 8009462:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009464:	e199      	b.n	800979a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009466:	e198      	b.n	800979a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009468:	4b79      	ldr	r3, [pc, #484]	; (8009650 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800946a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800946c:	e195      	b.n	800979a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800946e:	2300      	movs	r3, #0
 8009470:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009472:	e192      	b.n	800979a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800947a:	d173      	bne.n	8009564 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800947c:	4b70      	ldr	r3, [pc, #448]	; (8009640 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800947e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009480:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009484:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009488:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800948c:	d02f      	beq.n	80094ee <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 800948e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009490:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009494:	d863      	bhi.n	800955e <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8009496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009498:	2b00      	cmp	r3, #0
 800949a:	d004      	beq.n	80094a6 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 800949c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800949e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80094a2:	d012      	beq.n	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 80094a4:	e05b      	b.n	800955e <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80094a6:	4b66      	ldr	r3, [pc, #408]	; (8009640 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80094ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80094b2:	d107      	bne.n	80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80094b4:	f107 0318 	add.w	r3, r7, #24
 80094b8:	4618      	mov	r0, r3
 80094ba:	f000 f991 	bl	80097e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80094be:	69bb      	ldr	r3, [r7, #24]
 80094c0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80094c2:	e16a      	b.n	800979a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80094c4:	2300      	movs	r3, #0
 80094c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80094c8:	e167      	b.n	800979a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80094ca:	4b5d      	ldr	r3, [pc, #372]	; (8009640 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80094d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80094d6:	d107      	bne.n	80094e8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80094d8:	f107 030c 	add.w	r3, r7, #12
 80094dc:	4618      	mov	r0, r3
 80094de:	f000 fad3 	bl	8009a88 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80094e2:	697b      	ldr	r3, [r7, #20]
 80094e4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80094e6:	e158      	b.n	800979a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80094e8:	2300      	movs	r3, #0
 80094ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80094ec:	e155      	b.n	800979a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80094ee:	4b54      	ldr	r3, [pc, #336]	; (8009640 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80094f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80094f2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80094f6:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80094f8:	4b51      	ldr	r3, [pc, #324]	; (8009640 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	f003 0304 	and.w	r3, r3, #4
 8009500:	2b04      	cmp	r3, #4
 8009502:	d10c      	bne.n	800951e <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 8009504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009506:	2b00      	cmp	r3, #0
 8009508:	d109      	bne.n	800951e <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800950a:	4b4d      	ldr	r3, [pc, #308]	; (8009640 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	08db      	lsrs	r3, r3, #3
 8009510:	f003 0303 	and.w	r3, r3, #3
 8009514:	4a4b      	ldr	r2, [pc, #300]	; (8009644 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009516:	fa22 f303 	lsr.w	r3, r2, r3
 800951a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800951c:	e01e      	b.n	800955c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800951e:	4b48      	ldr	r3, [pc, #288]	; (8009640 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009526:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800952a:	d106      	bne.n	800953a <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 800952c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800952e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009532:	d102      	bne.n	800953a <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009534:	4b44      	ldr	r3, [pc, #272]	; (8009648 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8009536:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009538:	e010      	b.n	800955c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800953a:	4b41      	ldr	r3, [pc, #260]	; (8009640 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009542:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009546:	d106      	bne.n	8009556 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8009548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800954a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800954e:	d102      	bne.n	8009556 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009550:	4b3e      	ldr	r3, [pc, #248]	; (800964c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009552:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009554:	e002      	b.n	800955c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009556:	2300      	movs	r3, #0
 8009558:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800955a:	e11e      	b.n	800979a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800955c:	e11d      	b.n	800979a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800955e:	2300      	movs	r3, #0
 8009560:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009562:	e11a      	b.n	800979a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800956a:	d133      	bne.n	80095d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800956c:	4b34      	ldr	r3, [pc, #208]	; (8009640 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800956e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009570:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009574:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009578:	2b00      	cmp	r3, #0
 800957a:	d004      	beq.n	8009586 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 800957c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800957e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009582:	d012      	beq.n	80095aa <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8009584:	e023      	b.n	80095ce <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009586:	4b2e      	ldr	r3, [pc, #184]	; (8009640 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800958e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009592:	d107      	bne.n	80095a4 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009594:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009598:	4618      	mov	r0, r3
 800959a:	f000 fbc9 	bl	8009d30 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800959e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095a0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80095a2:	e0fa      	b.n	800979a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80095a4:	2300      	movs	r3, #0
 80095a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80095a8:	e0f7      	b.n	800979a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80095aa:	4b25      	ldr	r3, [pc, #148]	; (8009640 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80095b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80095b6:	d107      	bne.n	80095c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80095b8:	f107 0318 	add.w	r3, r7, #24
 80095bc:	4618      	mov	r0, r3
 80095be:	f000 f90f 	bl	80097e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80095c2:	6a3b      	ldr	r3, [r7, #32]
 80095c4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80095c6:	e0e8      	b.n	800979a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80095c8:	2300      	movs	r3, #0
 80095ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80095cc:	e0e5      	b.n	800979a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 80095ce:	2300      	movs	r3, #0
 80095d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80095d2:	e0e2      	b.n	800979a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80095da:	f040 808f 	bne.w	80096fc <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 80095de:	4b18      	ldr	r3, [pc, #96]	; (8009640 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80095e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095e2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80095e6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80095e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80095ee:	d075      	beq.n	80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 80095f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80095f6:	d87e      	bhi.n	80096f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 80095f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095fe:	d060      	beq.n	80096c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8009600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009602:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009606:	d876      	bhi.n	80096f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8009608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800960a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800960e:	d045      	beq.n	800969c <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8009610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009612:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009616:	d86e      	bhi.n	80096f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8009618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800961a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800961e:	d02b      	beq.n	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 8009620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009622:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009626:	d866      	bhi.n	80096f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8009628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800962a:	2b00      	cmp	r3, #0
 800962c:	d004      	beq.n	8009638 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 800962e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009630:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009634:	d00e      	beq.n	8009654 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8009636:	e05e      	b.n	80096f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009638:	f000 f8bc 	bl	80097b4 <HAL_RCCEx_GetD3PCLK1Freq>
 800963c:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800963e:	e0ac      	b.n	800979a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009640:	58024400 	.word	0x58024400
 8009644:	03d09000 	.word	0x03d09000
 8009648:	003d0900 	.word	0x003d0900
 800964c:	02dc6c00 	.word	0x02dc6c00
 8009650:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009654:	4b53      	ldr	r3, [pc, #332]	; (80097a4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800965c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009660:	d107      	bne.n	8009672 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009662:	f107 0318 	add.w	r3, r7, #24
 8009666:	4618      	mov	r0, r3
 8009668:	f000 f8ba 	bl	80097e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800966c:	69fb      	ldr	r3, [r7, #28]
 800966e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009670:	e093      	b.n	800979a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009672:	2300      	movs	r3, #0
 8009674:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009676:	e090      	b.n	800979a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009678:	4b4a      	ldr	r3, [pc, #296]	; (80097a4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009680:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009684:	d107      	bne.n	8009696 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009686:	f107 030c 	add.w	r3, r7, #12
 800968a:	4618      	mov	r0, r3
 800968c:	f000 f9fc 	bl	8009a88 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009690:	693b      	ldr	r3, [r7, #16]
 8009692:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009694:	e081      	b.n	800979a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009696:	2300      	movs	r3, #0
 8009698:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800969a:	e07e      	b.n	800979a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800969c:	4b41      	ldr	r3, [pc, #260]	; (80097a4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	f003 0304 	and.w	r3, r3, #4
 80096a4:	2b04      	cmp	r3, #4
 80096a6:	d109      	bne.n	80096bc <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80096a8:	4b3e      	ldr	r3, [pc, #248]	; (80097a4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	08db      	lsrs	r3, r3, #3
 80096ae:	f003 0303 	and.w	r3, r3, #3
 80096b2:	4a3d      	ldr	r2, [pc, #244]	; (80097a8 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 80096b4:	fa22 f303 	lsr.w	r3, r2, r3
 80096b8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80096ba:	e06e      	b.n	800979a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80096bc:	2300      	movs	r3, #0
 80096be:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80096c0:	e06b      	b.n	800979a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80096c2:	4b38      	ldr	r3, [pc, #224]	; (80097a4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80096ce:	d102      	bne.n	80096d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 80096d0:	4b36      	ldr	r3, [pc, #216]	; (80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80096d2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80096d4:	e061      	b.n	800979a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80096d6:	2300      	movs	r3, #0
 80096d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80096da:	e05e      	b.n	800979a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80096dc:	4b31      	ldr	r3, [pc, #196]	; (80097a4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80096e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80096e8:	d102      	bne.n	80096f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 80096ea:	4b31      	ldr	r3, [pc, #196]	; (80097b0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80096ec:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80096ee:	e054      	b.n	800979a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80096f0:	2300      	movs	r3, #0
 80096f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80096f4:	e051      	b.n	800979a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 80096f6:	2300      	movs	r3, #0
 80096f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80096fa:	e04e      	b.n	800979a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009702:	d148      	bne.n	8009796 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8009704:	4b27      	ldr	r3, [pc, #156]	; (80097a4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009706:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009708:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800970c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800970e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009710:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009714:	d02a      	beq.n	800976c <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8009716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009718:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800971c:	d838      	bhi.n	8009790 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800971e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009720:	2b00      	cmp	r3, #0
 8009722:	d004      	beq.n	800972e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8009724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009726:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800972a:	d00d      	beq.n	8009748 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800972c:	e030      	b.n	8009790 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800972e:	4b1d      	ldr	r3, [pc, #116]	; (80097a4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009736:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800973a:	d102      	bne.n	8009742 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 800973c:	4b1c      	ldr	r3, [pc, #112]	; (80097b0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800973e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009740:	e02b      	b.n	800979a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009742:	2300      	movs	r3, #0
 8009744:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009746:	e028      	b.n	800979a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009748:	4b16      	ldr	r3, [pc, #88]	; (80097a4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009750:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009754:	d107      	bne.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009756:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800975a:	4618      	mov	r0, r3
 800975c:	f000 fae8 	bl	8009d30 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009762:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009764:	e019      	b.n	800979a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009766:	2300      	movs	r3, #0
 8009768:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800976a:	e016      	b.n	800979a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800976c:	4b0d      	ldr	r3, [pc, #52]	; (80097a4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009774:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009778:	d107      	bne.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800977a:	f107 0318 	add.w	r3, r7, #24
 800977e:	4618      	mov	r0, r3
 8009780:	f000 f82e 	bl	80097e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009784:	69fb      	ldr	r3, [r7, #28]
 8009786:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009788:	e007      	b.n	800979a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800978a:	2300      	movs	r3, #0
 800978c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800978e:	e004      	b.n	800979a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8009790:	2300      	movs	r3, #0
 8009792:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009794:	e001      	b.n	800979a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 8009796:	2300      	movs	r3, #0
 8009798:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800979a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800979c:	4618      	mov	r0, r3
 800979e:	3740      	adds	r7, #64	; 0x40
 80097a0:	46bd      	mov	sp, r7
 80097a2:	bd80      	pop	{r7, pc}
 80097a4:	58024400 	.word	0x58024400
 80097a8:	03d09000 	.word	0x03d09000
 80097ac:	003d0900 	.word	0x003d0900
 80097b0:	02dc6c00 	.word	0x02dc6c00

080097b4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80097b8:	f7fe fb8e 	bl	8007ed8 <HAL_RCC_GetHCLKFreq>
 80097bc:	4602      	mov	r2, r0
 80097be:	4b06      	ldr	r3, [pc, #24]	; (80097d8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80097c0:	6a1b      	ldr	r3, [r3, #32]
 80097c2:	091b      	lsrs	r3, r3, #4
 80097c4:	f003 0307 	and.w	r3, r3, #7
 80097c8:	4904      	ldr	r1, [pc, #16]	; (80097dc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80097ca:	5ccb      	ldrb	r3, [r1, r3]
 80097cc:	f003 031f 	and.w	r3, r3, #31
 80097d0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80097d4:	4618      	mov	r0, r3
 80097d6:	bd80      	pop	{r7, pc}
 80097d8:	58024400 	.word	0x58024400
 80097dc:	0800fba4 	.word	0x0800fba4

080097e0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80097e0:	b480      	push	{r7}
 80097e2:	b089      	sub	sp, #36	; 0x24
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80097e8:	4ba1      	ldr	r3, [pc, #644]	; (8009a70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80097ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097ec:	f003 0303 	and.w	r3, r3, #3
 80097f0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80097f2:	4b9f      	ldr	r3, [pc, #636]	; (8009a70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80097f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097f6:	0b1b      	lsrs	r3, r3, #12
 80097f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80097fc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80097fe:	4b9c      	ldr	r3, [pc, #624]	; (8009a70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009802:	091b      	lsrs	r3, r3, #4
 8009804:	f003 0301 	and.w	r3, r3, #1
 8009808:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800980a:	4b99      	ldr	r3, [pc, #612]	; (8009a70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800980c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800980e:	08db      	lsrs	r3, r3, #3
 8009810:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009814:	693a      	ldr	r2, [r7, #16]
 8009816:	fb02 f303 	mul.w	r3, r2, r3
 800981a:	ee07 3a90 	vmov	s15, r3
 800981e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009822:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009826:	697b      	ldr	r3, [r7, #20]
 8009828:	2b00      	cmp	r3, #0
 800982a:	f000 8111 	beq.w	8009a50 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800982e:	69bb      	ldr	r3, [r7, #24]
 8009830:	2b02      	cmp	r3, #2
 8009832:	f000 8083 	beq.w	800993c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009836:	69bb      	ldr	r3, [r7, #24]
 8009838:	2b02      	cmp	r3, #2
 800983a:	f200 80a1 	bhi.w	8009980 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800983e:	69bb      	ldr	r3, [r7, #24]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d003      	beq.n	800984c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009844:	69bb      	ldr	r3, [r7, #24]
 8009846:	2b01      	cmp	r3, #1
 8009848:	d056      	beq.n	80098f8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800984a:	e099      	b.n	8009980 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800984c:	4b88      	ldr	r3, [pc, #544]	; (8009a70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	f003 0320 	and.w	r3, r3, #32
 8009854:	2b00      	cmp	r3, #0
 8009856:	d02d      	beq.n	80098b4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009858:	4b85      	ldr	r3, [pc, #532]	; (8009a70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	08db      	lsrs	r3, r3, #3
 800985e:	f003 0303 	and.w	r3, r3, #3
 8009862:	4a84      	ldr	r2, [pc, #528]	; (8009a74 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009864:	fa22 f303 	lsr.w	r3, r2, r3
 8009868:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800986a:	68bb      	ldr	r3, [r7, #8]
 800986c:	ee07 3a90 	vmov	s15, r3
 8009870:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009874:	697b      	ldr	r3, [r7, #20]
 8009876:	ee07 3a90 	vmov	s15, r3
 800987a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800987e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009882:	4b7b      	ldr	r3, [pc, #492]	; (8009a70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009886:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800988a:	ee07 3a90 	vmov	s15, r3
 800988e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009892:	ed97 6a03 	vldr	s12, [r7, #12]
 8009896:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009a78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800989a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800989e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80098a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098ae:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80098b2:	e087      	b.n	80099c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80098b4:	697b      	ldr	r3, [r7, #20]
 80098b6:	ee07 3a90 	vmov	s15, r3
 80098ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098be:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009a7c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80098c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098c6:	4b6a      	ldr	r3, [pc, #424]	; (8009a70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80098c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098ce:	ee07 3a90 	vmov	s15, r3
 80098d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80098da:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009a78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80098de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80098ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80098f6:	e065      	b.n	80099c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80098f8:	697b      	ldr	r3, [r7, #20]
 80098fa:	ee07 3a90 	vmov	s15, r3
 80098fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009902:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009a80 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009906:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800990a:	4b59      	ldr	r3, [pc, #356]	; (8009a70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800990c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800990e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009912:	ee07 3a90 	vmov	s15, r3
 8009916:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800991a:	ed97 6a03 	vldr	s12, [r7, #12]
 800991e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009a78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009922:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009926:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800992a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800992e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009932:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009936:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800993a:	e043      	b.n	80099c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800993c:	697b      	ldr	r3, [r7, #20]
 800993e:	ee07 3a90 	vmov	s15, r3
 8009942:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009946:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009a84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800994a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800994e:	4b48      	ldr	r3, [pc, #288]	; (8009a70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009952:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009956:	ee07 3a90 	vmov	s15, r3
 800995a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800995e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009962:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009a78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009966:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800996a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800996e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009972:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009976:	ee67 7a27 	vmul.f32	s15, s14, s15
 800997a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800997e:	e021      	b.n	80099c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009980:	697b      	ldr	r3, [r7, #20]
 8009982:	ee07 3a90 	vmov	s15, r3
 8009986:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800998a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009a80 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800998e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009992:	4b37      	ldr	r3, [pc, #220]	; (8009a70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009996:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800999a:	ee07 3a90 	vmov	s15, r3
 800999e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80099a6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009a78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80099aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80099b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80099c2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80099c4:	4b2a      	ldr	r3, [pc, #168]	; (8009a70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099c8:	0a5b      	lsrs	r3, r3, #9
 80099ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099ce:	ee07 3a90 	vmov	s15, r3
 80099d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80099da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80099de:	edd7 6a07 	vldr	s13, [r7, #28]
 80099e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80099e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80099ea:	ee17 2a90 	vmov	r2, s15
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80099f2:	4b1f      	ldr	r3, [pc, #124]	; (8009a70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099f6:	0c1b      	lsrs	r3, r3, #16
 80099f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099fc:	ee07 3a90 	vmov	s15, r3
 8009a00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a04:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009a08:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a0c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a18:	ee17 2a90 	vmov	r2, s15
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009a20:	4b13      	ldr	r3, [pc, #76]	; (8009a70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a24:	0e1b      	lsrs	r3, r3, #24
 8009a26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a2a:	ee07 3a90 	vmov	s15, r3
 8009a2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a32:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009a36:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a3a:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a46:	ee17 2a90 	vmov	r2, s15
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009a4e:	e008      	b.n	8009a62 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2200      	movs	r2, #0
 8009a54:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	2200      	movs	r2, #0
 8009a5a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2200      	movs	r2, #0
 8009a60:	609a      	str	r2, [r3, #8]
}
 8009a62:	bf00      	nop
 8009a64:	3724      	adds	r7, #36	; 0x24
 8009a66:	46bd      	mov	sp, r7
 8009a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6c:	4770      	bx	lr
 8009a6e:	bf00      	nop
 8009a70:	58024400 	.word	0x58024400
 8009a74:	03d09000 	.word	0x03d09000
 8009a78:	46000000 	.word	0x46000000
 8009a7c:	4c742400 	.word	0x4c742400
 8009a80:	4a742400 	.word	0x4a742400
 8009a84:	4c371b00 	.word	0x4c371b00

08009a88 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8009a88:	b480      	push	{r7}
 8009a8a:	b089      	sub	sp, #36	; 0x24
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009a90:	4ba1      	ldr	r3, [pc, #644]	; (8009d18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a94:	f003 0303 	and.w	r3, r3, #3
 8009a98:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8009a9a:	4b9f      	ldr	r3, [pc, #636]	; (8009d18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a9e:	0d1b      	lsrs	r3, r3, #20
 8009aa0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009aa4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009aa6:	4b9c      	ldr	r3, [pc, #624]	; (8009d18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aaa:	0a1b      	lsrs	r3, r3, #8
 8009aac:	f003 0301 	and.w	r3, r3, #1
 8009ab0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009ab2:	4b99      	ldr	r3, [pc, #612]	; (8009d18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ab6:	08db      	lsrs	r3, r3, #3
 8009ab8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009abc:	693a      	ldr	r2, [r7, #16]
 8009abe:	fb02 f303 	mul.w	r3, r2, r3
 8009ac2:	ee07 3a90 	vmov	s15, r3
 8009ac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009aca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009ace:	697b      	ldr	r3, [r7, #20]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	f000 8111 	beq.w	8009cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009ad6:	69bb      	ldr	r3, [r7, #24]
 8009ad8:	2b02      	cmp	r3, #2
 8009ada:	f000 8083 	beq.w	8009be4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009ade:	69bb      	ldr	r3, [r7, #24]
 8009ae0:	2b02      	cmp	r3, #2
 8009ae2:	f200 80a1 	bhi.w	8009c28 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009ae6:	69bb      	ldr	r3, [r7, #24]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d003      	beq.n	8009af4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009aec:	69bb      	ldr	r3, [r7, #24]
 8009aee:	2b01      	cmp	r3, #1
 8009af0:	d056      	beq.n	8009ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009af2:	e099      	b.n	8009c28 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009af4:	4b88      	ldr	r3, [pc, #544]	; (8009d18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	f003 0320 	and.w	r3, r3, #32
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d02d      	beq.n	8009b5c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009b00:	4b85      	ldr	r3, [pc, #532]	; (8009d18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	08db      	lsrs	r3, r3, #3
 8009b06:	f003 0303 	and.w	r3, r3, #3
 8009b0a:	4a84      	ldr	r2, [pc, #528]	; (8009d1c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009b0c:	fa22 f303 	lsr.w	r3, r2, r3
 8009b10:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009b12:	68bb      	ldr	r3, [r7, #8]
 8009b14:	ee07 3a90 	vmov	s15, r3
 8009b18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b1c:	697b      	ldr	r3, [r7, #20]
 8009b1e:	ee07 3a90 	vmov	s15, r3
 8009b22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b2a:	4b7b      	ldr	r3, [pc, #492]	; (8009d18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b32:	ee07 3a90 	vmov	s15, r3
 8009b36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b3e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009d20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009b42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b56:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009b5a:	e087      	b.n	8009c6c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009b5c:	697b      	ldr	r3, [r7, #20]
 8009b5e:	ee07 3a90 	vmov	s15, r3
 8009b62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b66:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009d24 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009b6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b6e:	4b6a      	ldr	r3, [pc, #424]	; (8009d18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b76:	ee07 3a90 	vmov	s15, r3
 8009b7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b82:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009d20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009b86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b9a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009b9e:	e065      	b.n	8009c6c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009ba0:	697b      	ldr	r3, [r7, #20]
 8009ba2:	ee07 3a90 	vmov	s15, r3
 8009ba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009baa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009d28 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009bae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bb2:	4b59      	ldr	r3, [pc, #356]	; (8009d18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bba:	ee07 3a90 	vmov	s15, r3
 8009bbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8009bc6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009d20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009bca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009bd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bde:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009be2:	e043      	b.n	8009c6c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009be4:	697b      	ldr	r3, [r7, #20]
 8009be6:	ee07 3a90 	vmov	s15, r3
 8009bea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bee:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009d2c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009bf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bf6:	4b48      	ldr	r3, [pc, #288]	; (8009d18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bfe:	ee07 3a90 	vmov	s15, r3
 8009c02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c06:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c0a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009d20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009c0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c22:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009c26:	e021      	b.n	8009c6c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009c28:	697b      	ldr	r3, [r7, #20]
 8009c2a:	ee07 3a90 	vmov	s15, r3
 8009c2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c32:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009d28 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009c36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c3a:	4b37      	ldr	r3, [pc, #220]	; (8009d18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c42:	ee07 3a90 	vmov	s15, r3
 8009c46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c4e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009d20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009c52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c66:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009c6a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009c6c:	4b2a      	ldr	r3, [pc, #168]	; (8009d18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c70:	0a5b      	lsrs	r3, r3, #9
 8009c72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c76:	ee07 3a90 	vmov	s15, r3
 8009c7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c7e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009c82:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009c86:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c92:	ee17 2a90 	vmov	r2, s15
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8009c9a:	4b1f      	ldr	r3, [pc, #124]	; (8009d18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c9e:	0c1b      	lsrs	r3, r3, #16
 8009ca0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ca4:	ee07 3a90 	vmov	s15, r3
 8009ca8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009cb0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009cb4:	edd7 6a07 	vldr	s13, [r7, #28]
 8009cb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009cbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009cc0:	ee17 2a90 	vmov	r2, s15
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8009cc8:	4b13      	ldr	r3, [pc, #76]	; (8009d18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ccc:	0e1b      	lsrs	r3, r3, #24
 8009cce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009cd2:	ee07 3a90 	vmov	s15, r3
 8009cd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cda:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009cde:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009ce2:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ce6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009cea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009cee:	ee17 2a90 	vmov	r2, s15
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009cf6:	e008      	b.n	8009d0a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	2200      	movs	r2, #0
 8009d02:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2200      	movs	r2, #0
 8009d08:	609a      	str	r2, [r3, #8]
}
 8009d0a:	bf00      	nop
 8009d0c:	3724      	adds	r7, #36	; 0x24
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d14:	4770      	bx	lr
 8009d16:	bf00      	nop
 8009d18:	58024400 	.word	0x58024400
 8009d1c:	03d09000 	.word	0x03d09000
 8009d20:	46000000 	.word	0x46000000
 8009d24:	4c742400 	.word	0x4c742400
 8009d28:	4a742400 	.word	0x4a742400
 8009d2c:	4c371b00 	.word	0x4c371b00

08009d30 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8009d30:	b480      	push	{r7}
 8009d32:	b089      	sub	sp, #36	; 0x24
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009d38:	4ba0      	ldr	r3, [pc, #640]	; (8009fbc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d3c:	f003 0303 	and.w	r3, r3, #3
 8009d40:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8009d42:	4b9e      	ldr	r3, [pc, #632]	; (8009fbc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d46:	091b      	lsrs	r3, r3, #4
 8009d48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009d4c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009d4e:	4b9b      	ldr	r3, [pc, #620]	; (8009fbc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d52:	f003 0301 	and.w	r3, r3, #1
 8009d56:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009d58:	4b98      	ldr	r3, [pc, #608]	; (8009fbc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d5c:	08db      	lsrs	r3, r3, #3
 8009d5e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009d62:	693a      	ldr	r2, [r7, #16]
 8009d64:	fb02 f303 	mul.w	r3, r2, r3
 8009d68:	ee07 3a90 	vmov	s15, r3
 8009d6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d70:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009d74:	697b      	ldr	r3, [r7, #20]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	f000 8111 	beq.w	8009f9e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009d7c:	69bb      	ldr	r3, [r7, #24]
 8009d7e:	2b02      	cmp	r3, #2
 8009d80:	f000 8083 	beq.w	8009e8a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009d84:	69bb      	ldr	r3, [r7, #24]
 8009d86:	2b02      	cmp	r3, #2
 8009d88:	f200 80a1 	bhi.w	8009ece <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009d8c:	69bb      	ldr	r3, [r7, #24]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d003      	beq.n	8009d9a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009d92:	69bb      	ldr	r3, [r7, #24]
 8009d94:	2b01      	cmp	r3, #1
 8009d96:	d056      	beq.n	8009e46 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009d98:	e099      	b.n	8009ece <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009d9a:	4b88      	ldr	r3, [pc, #544]	; (8009fbc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	f003 0320 	and.w	r3, r3, #32
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d02d      	beq.n	8009e02 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009da6:	4b85      	ldr	r3, [pc, #532]	; (8009fbc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	08db      	lsrs	r3, r3, #3
 8009dac:	f003 0303 	and.w	r3, r3, #3
 8009db0:	4a83      	ldr	r2, [pc, #524]	; (8009fc0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009db2:	fa22 f303 	lsr.w	r3, r2, r3
 8009db6:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009db8:	68bb      	ldr	r3, [r7, #8]
 8009dba:	ee07 3a90 	vmov	s15, r3
 8009dbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009dc2:	697b      	ldr	r3, [r7, #20]
 8009dc4:	ee07 3a90 	vmov	s15, r3
 8009dc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dcc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009dd0:	4b7a      	ldr	r3, [pc, #488]	; (8009fbc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009dd8:	ee07 3a90 	vmov	s15, r3
 8009ddc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009de0:	ed97 6a03 	vldr	s12, [r7, #12]
 8009de4:	eddf 5a77 	vldr	s11, [pc, #476]	; 8009fc4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009de8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009dec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009df0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009df4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009df8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009dfc:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009e00:	e087      	b.n	8009f12 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009e02:	697b      	ldr	r3, [r7, #20]
 8009e04:	ee07 3a90 	vmov	s15, r3
 8009e08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e0c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8009fc8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009e10:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e14:	4b69      	ldr	r3, [pc, #420]	; (8009fbc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e1c:	ee07 3a90 	vmov	s15, r3
 8009e20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e24:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e28:	eddf 5a66 	vldr	s11, [pc, #408]	; 8009fc4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009e2c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e30:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e34:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e38:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e40:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009e44:	e065      	b.n	8009f12 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009e46:	697b      	ldr	r3, [r7, #20]
 8009e48:	ee07 3a90 	vmov	s15, r3
 8009e4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e50:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8009fcc <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009e54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e58:	4b58      	ldr	r3, [pc, #352]	; (8009fbc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e60:	ee07 3a90 	vmov	s15, r3
 8009e64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e68:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e6c:	eddf 5a55 	vldr	s11, [pc, #340]	; 8009fc4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009e70:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e74:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e78:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e84:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009e88:	e043      	b.n	8009f12 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009e8a:	697b      	ldr	r3, [r7, #20]
 8009e8c:	ee07 3a90 	vmov	s15, r3
 8009e90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e94:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009fd0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009e98:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e9c:	4b47      	ldr	r3, [pc, #284]	; (8009fbc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ea0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ea4:	ee07 3a90 	vmov	s15, r3
 8009ea8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009eac:	ed97 6a03 	vldr	s12, [r7, #12]
 8009eb0:	eddf 5a44 	vldr	s11, [pc, #272]	; 8009fc4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009eb4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009eb8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ebc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ec0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ec4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ec8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009ecc:	e021      	b.n	8009f12 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009ece:	697b      	ldr	r3, [r7, #20]
 8009ed0:	ee07 3a90 	vmov	s15, r3
 8009ed4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ed8:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8009fc8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009edc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ee0:	4b36      	ldr	r3, [pc, #216]	; (8009fbc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ee4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ee8:	ee07 3a90 	vmov	s15, r3
 8009eec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ef0:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ef4:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009fc4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009ef8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009efc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f00:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f04:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f0c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009f10:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8009f12:	4b2a      	ldr	r3, [pc, #168]	; (8009fbc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f16:	0a5b      	lsrs	r3, r3, #9
 8009f18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f1c:	ee07 3a90 	vmov	s15, r3
 8009f20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f24:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009f28:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f2c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f38:	ee17 2a90 	vmov	r2, s15
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8009f40:	4b1e      	ldr	r3, [pc, #120]	; (8009fbc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f44:	0c1b      	lsrs	r3, r3, #16
 8009f46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f4a:	ee07 3a90 	vmov	s15, r3
 8009f4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f52:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009f56:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f5a:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f66:	ee17 2a90 	vmov	r2, s15
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8009f6e:	4b13      	ldr	r3, [pc, #76]	; (8009fbc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f72:	0e1b      	lsrs	r3, r3, #24
 8009f74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f78:	ee07 3a90 	vmov	s15, r3
 8009f7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f80:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009f84:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f88:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f94:	ee17 2a90 	vmov	r2, s15
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009f9c:	e008      	b.n	8009fb0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	2200      	movs	r2, #0
 8009fae:	609a      	str	r2, [r3, #8]
}
 8009fb0:	bf00      	nop
 8009fb2:	3724      	adds	r7, #36	; 0x24
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fba:	4770      	bx	lr
 8009fbc:	58024400 	.word	0x58024400
 8009fc0:	03d09000 	.word	0x03d09000
 8009fc4:	46000000 	.word	0x46000000
 8009fc8:	4c742400 	.word	0x4c742400
 8009fcc:	4a742400 	.word	0x4a742400
 8009fd0:	4c371b00 	.word	0x4c371b00

08009fd4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b084      	sub	sp, #16
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
 8009fdc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009fde:	2300      	movs	r3, #0
 8009fe0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009fe2:	4b53      	ldr	r3, [pc, #332]	; (800a130 <RCCEx_PLL2_Config+0x15c>)
 8009fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fe6:	f003 0303 	and.w	r3, r3, #3
 8009fea:	2b03      	cmp	r3, #3
 8009fec:	d101      	bne.n	8009ff2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009fee:	2301      	movs	r3, #1
 8009ff0:	e099      	b.n	800a126 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009ff2:	4b4f      	ldr	r3, [pc, #316]	; (800a130 <RCCEx_PLL2_Config+0x15c>)
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	4a4e      	ldr	r2, [pc, #312]	; (800a130 <RCCEx_PLL2_Config+0x15c>)
 8009ff8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009ffc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009ffe:	f7f9 f8f3 	bl	80031e8 <HAL_GetTick>
 800a002:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a004:	e008      	b.n	800a018 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a006:	f7f9 f8ef 	bl	80031e8 <HAL_GetTick>
 800a00a:	4602      	mov	r2, r0
 800a00c:	68bb      	ldr	r3, [r7, #8]
 800a00e:	1ad3      	subs	r3, r2, r3
 800a010:	2b02      	cmp	r3, #2
 800a012:	d901      	bls.n	800a018 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a014:	2303      	movs	r3, #3
 800a016:	e086      	b.n	800a126 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a018:	4b45      	ldr	r3, [pc, #276]	; (800a130 <RCCEx_PLL2_Config+0x15c>)
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a020:	2b00      	cmp	r3, #0
 800a022:	d1f0      	bne.n	800a006 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a024:	4b42      	ldr	r3, [pc, #264]	; (800a130 <RCCEx_PLL2_Config+0x15c>)
 800a026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a028:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	031b      	lsls	r3, r3, #12
 800a032:	493f      	ldr	r1, [pc, #252]	; (800a130 <RCCEx_PLL2_Config+0x15c>)
 800a034:	4313      	orrs	r3, r2
 800a036:	628b      	str	r3, [r1, #40]	; 0x28
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	685b      	ldr	r3, [r3, #4]
 800a03c:	3b01      	subs	r3, #1
 800a03e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	689b      	ldr	r3, [r3, #8]
 800a046:	3b01      	subs	r3, #1
 800a048:	025b      	lsls	r3, r3, #9
 800a04a:	b29b      	uxth	r3, r3
 800a04c:	431a      	orrs	r2, r3
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	68db      	ldr	r3, [r3, #12]
 800a052:	3b01      	subs	r3, #1
 800a054:	041b      	lsls	r3, r3, #16
 800a056:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a05a:	431a      	orrs	r2, r3
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	691b      	ldr	r3, [r3, #16]
 800a060:	3b01      	subs	r3, #1
 800a062:	061b      	lsls	r3, r3, #24
 800a064:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a068:	4931      	ldr	r1, [pc, #196]	; (800a130 <RCCEx_PLL2_Config+0x15c>)
 800a06a:	4313      	orrs	r3, r2
 800a06c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a06e:	4b30      	ldr	r3, [pc, #192]	; (800a130 <RCCEx_PLL2_Config+0x15c>)
 800a070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a072:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	695b      	ldr	r3, [r3, #20]
 800a07a:	492d      	ldr	r1, [pc, #180]	; (800a130 <RCCEx_PLL2_Config+0x15c>)
 800a07c:	4313      	orrs	r3, r2
 800a07e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a080:	4b2b      	ldr	r3, [pc, #172]	; (800a130 <RCCEx_PLL2_Config+0x15c>)
 800a082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a084:	f023 0220 	bic.w	r2, r3, #32
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	699b      	ldr	r3, [r3, #24]
 800a08c:	4928      	ldr	r1, [pc, #160]	; (800a130 <RCCEx_PLL2_Config+0x15c>)
 800a08e:	4313      	orrs	r3, r2
 800a090:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a092:	4b27      	ldr	r3, [pc, #156]	; (800a130 <RCCEx_PLL2_Config+0x15c>)
 800a094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a096:	4a26      	ldr	r2, [pc, #152]	; (800a130 <RCCEx_PLL2_Config+0x15c>)
 800a098:	f023 0310 	bic.w	r3, r3, #16
 800a09c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a09e:	4b24      	ldr	r3, [pc, #144]	; (800a130 <RCCEx_PLL2_Config+0x15c>)
 800a0a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a0a2:	4b24      	ldr	r3, [pc, #144]	; (800a134 <RCCEx_PLL2_Config+0x160>)
 800a0a4:	4013      	ands	r3, r2
 800a0a6:	687a      	ldr	r2, [r7, #4]
 800a0a8:	69d2      	ldr	r2, [r2, #28]
 800a0aa:	00d2      	lsls	r2, r2, #3
 800a0ac:	4920      	ldr	r1, [pc, #128]	; (800a130 <RCCEx_PLL2_Config+0x15c>)
 800a0ae:	4313      	orrs	r3, r2
 800a0b0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a0b2:	4b1f      	ldr	r3, [pc, #124]	; (800a130 <RCCEx_PLL2_Config+0x15c>)
 800a0b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0b6:	4a1e      	ldr	r2, [pc, #120]	; (800a130 <RCCEx_PLL2_Config+0x15c>)
 800a0b8:	f043 0310 	orr.w	r3, r3, #16
 800a0bc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d106      	bne.n	800a0d2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a0c4:	4b1a      	ldr	r3, [pc, #104]	; (800a130 <RCCEx_PLL2_Config+0x15c>)
 800a0c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0c8:	4a19      	ldr	r2, [pc, #100]	; (800a130 <RCCEx_PLL2_Config+0x15c>)
 800a0ca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a0ce:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a0d0:	e00f      	b.n	800a0f2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	2b01      	cmp	r3, #1
 800a0d6:	d106      	bne.n	800a0e6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a0d8:	4b15      	ldr	r3, [pc, #84]	; (800a130 <RCCEx_PLL2_Config+0x15c>)
 800a0da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0dc:	4a14      	ldr	r2, [pc, #80]	; (800a130 <RCCEx_PLL2_Config+0x15c>)
 800a0de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a0e2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a0e4:	e005      	b.n	800a0f2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a0e6:	4b12      	ldr	r3, [pc, #72]	; (800a130 <RCCEx_PLL2_Config+0x15c>)
 800a0e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0ea:	4a11      	ldr	r2, [pc, #68]	; (800a130 <RCCEx_PLL2_Config+0x15c>)
 800a0ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a0f0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a0f2:	4b0f      	ldr	r3, [pc, #60]	; (800a130 <RCCEx_PLL2_Config+0x15c>)
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	4a0e      	ldr	r2, [pc, #56]	; (800a130 <RCCEx_PLL2_Config+0x15c>)
 800a0f8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a0fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a0fe:	f7f9 f873 	bl	80031e8 <HAL_GetTick>
 800a102:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a104:	e008      	b.n	800a118 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a106:	f7f9 f86f 	bl	80031e8 <HAL_GetTick>
 800a10a:	4602      	mov	r2, r0
 800a10c:	68bb      	ldr	r3, [r7, #8]
 800a10e:	1ad3      	subs	r3, r2, r3
 800a110:	2b02      	cmp	r3, #2
 800a112:	d901      	bls.n	800a118 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a114:	2303      	movs	r3, #3
 800a116:	e006      	b.n	800a126 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a118:	4b05      	ldr	r3, [pc, #20]	; (800a130 <RCCEx_PLL2_Config+0x15c>)
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a120:	2b00      	cmp	r3, #0
 800a122:	d0f0      	beq.n	800a106 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a124:	7bfb      	ldrb	r3, [r7, #15]
}
 800a126:	4618      	mov	r0, r3
 800a128:	3710      	adds	r7, #16
 800a12a:	46bd      	mov	sp, r7
 800a12c:	bd80      	pop	{r7, pc}
 800a12e:	bf00      	nop
 800a130:	58024400 	.word	0x58024400
 800a134:	ffff0007 	.word	0xffff0007

0800a138 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b084      	sub	sp, #16
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
 800a140:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a142:	2300      	movs	r3, #0
 800a144:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a146:	4b53      	ldr	r3, [pc, #332]	; (800a294 <RCCEx_PLL3_Config+0x15c>)
 800a148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a14a:	f003 0303 	and.w	r3, r3, #3
 800a14e:	2b03      	cmp	r3, #3
 800a150:	d101      	bne.n	800a156 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a152:	2301      	movs	r3, #1
 800a154:	e099      	b.n	800a28a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a156:	4b4f      	ldr	r3, [pc, #316]	; (800a294 <RCCEx_PLL3_Config+0x15c>)
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	4a4e      	ldr	r2, [pc, #312]	; (800a294 <RCCEx_PLL3_Config+0x15c>)
 800a15c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a160:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a162:	f7f9 f841 	bl	80031e8 <HAL_GetTick>
 800a166:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a168:	e008      	b.n	800a17c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a16a:	f7f9 f83d 	bl	80031e8 <HAL_GetTick>
 800a16e:	4602      	mov	r2, r0
 800a170:	68bb      	ldr	r3, [r7, #8]
 800a172:	1ad3      	subs	r3, r2, r3
 800a174:	2b02      	cmp	r3, #2
 800a176:	d901      	bls.n	800a17c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a178:	2303      	movs	r3, #3
 800a17a:	e086      	b.n	800a28a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a17c:	4b45      	ldr	r3, [pc, #276]	; (800a294 <RCCEx_PLL3_Config+0x15c>)
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a184:	2b00      	cmp	r3, #0
 800a186:	d1f0      	bne.n	800a16a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a188:	4b42      	ldr	r3, [pc, #264]	; (800a294 <RCCEx_PLL3_Config+0x15c>)
 800a18a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a18c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	051b      	lsls	r3, r3, #20
 800a196:	493f      	ldr	r1, [pc, #252]	; (800a294 <RCCEx_PLL3_Config+0x15c>)
 800a198:	4313      	orrs	r3, r2
 800a19a:	628b      	str	r3, [r1, #40]	; 0x28
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	685b      	ldr	r3, [r3, #4]
 800a1a0:	3b01      	subs	r3, #1
 800a1a2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	689b      	ldr	r3, [r3, #8]
 800a1aa:	3b01      	subs	r3, #1
 800a1ac:	025b      	lsls	r3, r3, #9
 800a1ae:	b29b      	uxth	r3, r3
 800a1b0:	431a      	orrs	r2, r3
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	68db      	ldr	r3, [r3, #12]
 800a1b6:	3b01      	subs	r3, #1
 800a1b8:	041b      	lsls	r3, r3, #16
 800a1ba:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a1be:	431a      	orrs	r2, r3
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	691b      	ldr	r3, [r3, #16]
 800a1c4:	3b01      	subs	r3, #1
 800a1c6:	061b      	lsls	r3, r3, #24
 800a1c8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a1cc:	4931      	ldr	r1, [pc, #196]	; (800a294 <RCCEx_PLL3_Config+0x15c>)
 800a1ce:	4313      	orrs	r3, r2
 800a1d0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a1d2:	4b30      	ldr	r3, [pc, #192]	; (800a294 <RCCEx_PLL3_Config+0x15c>)
 800a1d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1d6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	695b      	ldr	r3, [r3, #20]
 800a1de:	492d      	ldr	r1, [pc, #180]	; (800a294 <RCCEx_PLL3_Config+0x15c>)
 800a1e0:	4313      	orrs	r3, r2
 800a1e2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a1e4:	4b2b      	ldr	r3, [pc, #172]	; (800a294 <RCCEx_PLL3_Config+0x15c>)
 800a1e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1e8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	699b      	ldr	r3, [r3, #24]
 800a1f0:	4928      	ldr	r1, [pc, #160]	; (800a294 <RCCEx_PLL3_Config+0x15c>)
 800a1f2:	4313      	orrs	r3, r2
 800a1f4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a1f6:	4b27      	ldr	r3, [pc, #156]	; (800a294 <RCCEx_PLL3_Config+0x15c>)
 800a1f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1fa:	4a26      	ldr	r2, [pc, #152]	; (800a294 <RCCEx_PLL3_Config+0x15c>)
 800a1fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a200:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a202:	4b24      	ldr	r3, [pc, #144]	; (800a294 <RCCEx_PLL3_Config+0x15c>)
 800a204:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a206:	4b24      	ldr	r3, [pc, #144]	; (800a298 <RCCEx_PLL3_Config+0x160>)
 800a208:	4013      	ands	r3, r2
 800a20a:	687a      	ldr	r2, [r7, #4]
 800a20c:	69d2      	ldr	r2, [r2, #28]
 800a20e:	00d2      	lsls	r2, r2, #3
 800a210:	4920      	ldr	r1, [pc, #128]	; (800a294 <RCCEx_PLL3_Config+0x15c>)
 800a212:	4313      	orrs	r3, r2
 800a214:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a216:	4b1f      	ldr	r3, [pc, #124]	; (800a294 <RCCEx_PLL3_Config+0x15c>)
 800a218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a21a:	4a1e      	ldr	r2, [pc, #120]	; (800a294 <RCCEx_PLL3_Config+0x15c>)
 800a21c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a220:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a222:	683b      	ldr	r3, [r7, #0]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d106      	bne.n	800a236 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a228:	4b1a      	ldr	r3, [pc, #104]	; (800a294 <RCCEx_PLL3_Config+0x15c>)
 800a22a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a22c:	4a19      	ldr	r2, [pc, #100]	; (800a294 <RCCEx_PLL3_Config+0x15c>)
 800a22e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a232:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a234:	e00f      	b.n	800a256 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a236:	683b      	ldr	r3, [r7, #0]
 800a238:	2b01      	cmp	r3, #1
 800a23a:	d106      	bne.n	800a24a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a23c:	4b15      	ldr	r3, [pc, #84]	; (800a294 <RCCEx_PLL3_Config+0x15c>)
 800a23e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a240:	4a14      	ldr	r2, [pc, #80]	; (800a294 <RCCEx_PLL3_Config+0x15c>)
 800a242:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a246:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a248:	e005      	b.n	800a256 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a24a:	4b12      	ldr	r3, [pc, #72]	; (800a294 <RCCEx_PLL3_Config+0x15c>)
 800a24c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a24e:	4a11      	ldr	r2, [pc, #68]	; (800a294 <RCCEx_PLL3_Config+0x15c>)
 800a250:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a254:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a256:	4b0f      	ldr	r3, [pc, #60]	; (800a294 <RCCEx_PLL3_Config+0x15c>)
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	4a0e      	ldr	r2, [pc, #56]	; (800a294 <RCCEx_PLL3_Config+0x15c>)
 800a25c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a260:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a262:	f7f8 ffc1 	bl	80031e8 <HAL_GetTick>
 800a266:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a268:	e008      	b.n	800a27c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a26a:	f7f8 ffbd 	bl	80031e8 <HAL_GetTick>
 800a26e:	4602      	mov	r2, r0
 800a270:	68bb      	ldr	r3, [r7, #8]
 800a272:	1ad3      	subs	r3, r2, r3
 800a274:	2b02      	cmp	r3, #2
 800a276:	d901      	bls.n	800a27c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a278:	2303      	movs	r3, #3
 800a27a:	e006      	b.n	800a28a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a27c:	4b05      	ldr	r3, [pc, #20]	; (800a294 <RCCEx_PLL3_Config+0x15c>)
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a284:	2b00      	cmp	r3, #0
 800a286:	d0f0      	beq.n	800a26a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a288:	7bfb      	ldrb	r3, [r7, #15]
}
 800a28a:	4618      	mov	r0, r3
 800a28c:	3710      	adds	r7, #16
 800a28e:	46bd      	mov	sp, r7
 800a290:	bd80      	pop	{r7, pc}
 800a292:	bf00      	nop
 800a294:	58024400 	.word	0x58024400
 800a298:	ffff0007 	.word	0xffff0007

0800a29c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b084      	sub	sp, #16
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d101      	bne.n	800a2b2 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	e0eb      	b.n	800a48a <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	4a75      	ldr	r2, [pc, #468]	; (800a494 <HAL_SPI_Init+0x1f8>)
 800a2be:	4293      	cmp	r3, r2
 800a2c0:	d00f      	beq.n	800a2e2 <HAL_SPI_Init+0x46>
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	4a74      	ldr	r2, [pc, #464]	; (800a498 <HAL_SPI_Init+0x1fc>)
 800a2c8:	4293      	cmp	r3, r2
 800a2ca:	d00a      	beq.n	800a2e2 <HAL_SPI_Init+0x46>
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	4a72      	ldr	r2, [pc, #456]	; (800a49c <HAL_SPI_Init+0x200>)
 800a2d2:	4293      	cmp	r3, r2
 800a2d4:	d005      	beq.n	800a2e2 <HAL_SPI_Init+0x46>
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	68db      	ldr	r3, [r3, #12]
 800a2da:	2b0f      	cmp	r3, #15
 800a2dc:	d901      	bls.n	800a2e2 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800a2de:	2301      	movs	r3, #1
 800a2e0:	e0d3      	b.n	800a48a <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800a2e2:	6878      	ldr	r0, [r7, #4]
 800a2e4:	f000 f8dc 	bl	800a4a0 <SPI_GetPacketSize>
 800a2e8:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	4a69      	ldr	r2, [pc, #420]	; (800a494 <HAL_SPI_Init+0x1f8>)
 800a2f0:	4293      	cmp	r3, r2
 800a2f2:	d00c      	beq.n	800a30e <HAL_SPI_Init+0x72>
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	4a67      	ldr	r2, [pc, #412]	; (800a498 <HAL_SPI_Init+0x1fc>)
 800a2fa:	4293      	cmp	r3, r2
 800a2fc:	d007      	beq.n	800a30e <HAL_SPI_Init+0x72>
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	4a66      	ldr	r2, [pc, #408]	; (800a49c <HAL_SPI_Init+0x200>)
 800a304:	4293      	cmp	r3, r2
 800a306:	d002      	beq.n	800a30e <HAL_SPI_Init+0x72>
 800a308:	68bb      	ldr	r3, [r7, #8]
 800a30a:	2b08      	cmp	r3, #8
 800a30c:	d811      	bhi.n	800a332 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a312:	4a60      	ldr	r2, [pc, #384]	; (800a494 <HAL_SPI_Init+0x1f8>)
 800a314:	4293      	cmp	r3, r2
 800a316:	d009      	beq.n	800a32c <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	4a5e      	ldr	r2, [pc, #376]	; (800a498 <HAL_SPI_Init+0x1fc>)
 800a31e:	4293      	cmp	r3, r2
 800a320:	d004      	beq.n	800a32c <HAL_SPI_Init+0x90>
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	4a5d      	ldr	r2, [pc, #372]	; (800a49c <HAL_SPI_Init+0x200>)
 800a328:	4293      	cmp	r3, r2
 800a32a:	d104      	bne.n	800a336 <HAL_SPI_Init+0x9a>
 800a32c:	68bb      	ldr	r3, [r7, #8]
 800a32e:	2b10      	cmp	r3, #16
 800a330:	d901      	bls.n	800a336 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800a332:	2301      	movs	r3, #1
 800a334:	e0a9      	b.n	800a48a <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a33c:	b2db      	uxtb	r3, r3
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d106      	bne.n	800a350 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	2200      	movs	r2, #0
 800a346:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a34a:	6878      	ldr	r0, [r7, #4]
 800a34c:	f7f8 faa0 	bl	8002890 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	2202      	movs	r2, #2
 800a354:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	681a      	ldr	r2, [r3, #0]
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	f022 0201 	bic.w	r2, r2, #1
 800a366:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	699b      	ldr	r3, [r3, #24]
 800a36c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a370:	d119      	bne.n	800a3a6 <HAL_SPI_Init+0x10a>
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	685b      	ldr	r3, [r3, #4]
 800a376:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a37a:	d103      	bne.n	800a384 <HAL_SPI_Init+0xe8>
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a380:	2b00      	cmp	r3, #0
 800a382:	d008      	beq.n	800a396 <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d10c      	bne.n	800a3a6 <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a390:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a394:	d107      	bne.n	800a3a6 <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	681a      	ldr	r2, [r3, #0]
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a3a4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	69da      	ldr	r2, [r3, #28]
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3ae:	431a      	orrs	r2, r3
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	431a      	orrs	r2, r3
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3b8:	ea42 0103 	orr.w	r1, r2, r3
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	68da      	ldr	r2, [r3, #12]
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	430a      	orrs	r2, r1
 800a3c6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3d0:	431a      	orrs	r2, r3
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3d6:	431a      	orrs	r2, r3
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	699b      	ldr	r3, [r3, #24]
 800a3dc:	431a      	orrs	r2, r3
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	691b      	ldr	r3, [r3, #16]
 800a3e2:	431a      	orrs	r2, r3
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	695b      	ldr	r3, [r3, #20]
 800a3e8:	431a      	orrs	r2, r3
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	6a1b      	ldr	r3, [r3, #32]
 800a3ee:	431a      	orrs	r2, r3
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	685b      	ldr	r3, [r3, #4]
 800a3f4:	431a      	orrs	r2, r3
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3fa:	431a      	orrs	r2, r3
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	689b      	ldr	r3, [r3, #8]
 800a400:	431a      	orrs	r2, r3
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a406:	ea42 0103 	orr.w	r1, r2, r3
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	430a      	orrs	r2, r1
 800a414:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	685b      	ldr	r3, [r3, #4]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d113      	bne.n	800a446 <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	689b      	ldr	r3, [r3, #8]
 800a424:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a430:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	689b      	ldr	r3, [r3, #8]
 800a438:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a444:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	f022 0201 	bic.w	r2, r2, #1
 800a454:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	685b      	ldr	r3, [r3, #4]
 800a45a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d00a      	beq.n	800a478 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	68db      	ldr	r3, [r3, #12]
 800a468:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	430a      	orrs	r2, r1
 800a476:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	2200      	movs	r2, #0
 800a47c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2201      	movs	r2, #1
 800a484:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800a488:	2300      	movs	r3, #0
}
 800a48a:	4618      	mov	r0, r3
 800a48c:	3710      	adds	r7, #16
 800a48e:	46bd      	mov	sp, r7
 800a490:	bd80      	pop	{r7, pc}
 800a492:	bf00      	nop
 800a494:	40013000 	.word	0x40013000
 800a498:	40003800 	.word	0x40003800
 800a49c:	40003c00 	.word	0x40003c00

0800a4a0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800a4a0:	b480      	push	{r7}
 800a4a2:	b085      	sub	sp, #20
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4ac:	095b      	lsrs	r3, r3, #5
 800a4ae:	3301      	adds	r3, #1
 800a4b0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	68db      	ldr	r3, [r3, #12]
 800a4b6:	3301      	adds	r3, #1
 800a4b8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800a4ba:	68bb      	ldr	r3, [r7, #8]
 800a4bc:	3307      	adds	r3, #7
 800a4be:	08db      	lsrs	r3, r3, #3
 800a4c0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800a4c2:	68bb      	ldr	r3, [r7, #8]
 800a4c4:	68fa      	ldr	r2, [r7, #12]
 800a4c6:	fb02 f303 	mul.w	r3, r2, r3
}
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	3714      	adds	r7, #20
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d4:	4770      	bx	lr

0800a4d6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a4d6:	b580      	push	{r7, lr}
 800a4d8:	b082      	sub	sp, #8
 800a4da:	af00      	add	r7, sp, #0
 800a4dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d101      	bne.n	800a4e8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a4e4:	2301      	movs	r3, #1
 800a4e6:	e049      	b.n	800a57c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a4ee:	b2db      	uxtb	r3, r3
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d106      	bne.n	800a502 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a4fc:	6878      	ldr	r0, [r7, #4]
 800a4fe:	f7f8 fb4d 	bl	8002b9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	2202      	movs	r2, #2
 800a506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681a      	ldr	r2, [r3, #0]
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	3304      	adds	r3, #4
 800a512:	4619      	mov	r1, r3
 800a514:	4610      	mov	r0, r2
 800a516:	f000 fa91 	bl	800aa3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	2201      	movs	r2, #1
 800a51e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	2201      	movs	r2, #1
 800a526:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	2201      	movs	r2, #1
 800a52e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	2201      	movs	r2, #1
 800a536:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	2201      	movs	r2, #1
 800a53e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	2201      	movs	r2, #1
 800a546:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	2201      	movs	r2, #1
 800a54e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	2201      	movs	r2, #1
 800a556:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	2201      	movs	r2, #1
 800a55e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	2201      	movs	r2, #1
 800a566:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	2201      	movs	r2, #1
 800a56e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	2201      	movs	r2, #1
 800a576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a57a:	2300      	movs	r3, #0
}
 800a57c:	4618      	mov	r0, r3
 800a57e:	3708      	adds	r7, #8
 800a580:	46bd      	mov	sp, r7
 800a582:	bd80      	pop	{r7, pc}

0800a584 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a584:	b580      	push	{r7, lr}
 800a586:	b082      	sub	sp, #8
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d101      	bne.n	800a596 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a592:	2301      	movs	r3, #1
 800a594:	e049      	b.n	800a62a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a59c:	b2db      	uxtb	r3, r3
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d106      	bne.n	800a5b0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a5aa:	6878      	ldr	r0, [r7, #4]
 800a5ac:	f7f8 fabc 	bl	8002b28 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	2202      	movs	r2, #2
 800a5b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681a      	ldr	r2, [r3, #0]
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	3304      	adds	r3, #4
 800a5c0:	4619      	mov	r1, r3
 800a5c2:	4610      	mov	r0, r2
 800a5c4:	f000 fa3a 	bl	800aa3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	2201      	movs	r2, #1
 800a5cc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	2201      	movs	r2, #1
 800a5d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2201      	movs	r2, #1
 800a5dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	2201      	movs	r2, #1
 800a5e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	2201      	movs	r2, #1
 800a5ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	2201      	movs	r2, #1
 800a5f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	2201      	movs	r2, #1
 800a5fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	2201      	movs	r2, #1
 800a604:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	2201      	movs	r2, #1
 800a60c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	2201      	movs	r2, #1
 800a614:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	2201      	movs	r2, #1
 800a61c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	2201      	movs	r2, #1
 800a624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a628:	2300      	movs	r3, #0
}
 800a62a:	4618      	mov	r0, r3
 800a62c:	3708      	adds	r7, #8
 800a62e:	46bd      	mov	sp, r7
 800a630:	bd80      	pop	{r7, pc}
	...

0800a634 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a634:	b580      	push	{r7, lr}
 800a636:	b084      	sub	sp, #16
 800a638:	af00      	add	r7, sp, #0
 800a63a:	60f8      	str	r0, [r7, #12]
 800a63c:	60b9      	str	r1, [r7, #8]
 800a63e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a646:	2b01      	cmp	r3, #1
 800a648:	d101      	bne.n	800a64e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800a64a:	2302      	movs	r3, #2
 800a64c:	e0fd      	b.n	800a84a <HAL_TIM_PWM_ConfigChannel+0x216>
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	2201      	movs	r2, #1
 800a652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	2b14      	cmp	r3, #20
 800a65a:	f200 80f0 	bhi.w	800a83e <HAL_TIM_PWM_ConfigChannel+0x20a>
 800a65e:	a201      	add	r2, pc, #4	; (adr r2, 800a664 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800a660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a664:	0800a6b9 	.word	0x0800a6b9
 800a668:	0800a83f 	.word	0x0800a83f
 800a66c:	0800a83f 	.word	0x0800a83f
 800a670:	0800a83f 	.word	0x0800a83f
 800a674:	0800a6f9 	.word	0x0800a6f9
 800a678:	0800a83f 	.word	0x0800a83f
 800a67c:	0800a83f 	.word	0x0800a83f
 800a680:	0800a83f 	.word	0x0800a83f
 800a684:	0800a73b 	.word	0x0800a73b
 800a688:	0800a83f 	.word	0x0800a83f
 800a68c:	0800a83f 	.word	0x0800a83f
 800a690:	0800a83f 	.word	0x0800a83f
 800a694:	0800a77b 	.word	0x0800a77b
 800a698:	0800a83f 	.word	0x0800a83f
 800a69c:	0800a83f 	.word	0x0800a83f
 800a6a0:	0800a83f 	.word	0x0800a83f
 800a6a4:	0800a7bd 	.word	0x0800a7bd
 800a6a8:	0800a83f 	.word	0x0800a83f
 800a6ac:	0800a83f 	.word	0x0800a83f
 800a6b0:	0800a83f 	.word	0x0800a83f
 800a6b4:	0800a7fd 	.word	0x0800a7fd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	68b9      	ldr	r1, [r7, #8]
 800a6be:	4618      	mov	r0, r3
 800a6c0:	f000 fa56 	bl	800ab70 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	699a      	ldr	r2, [r3, #24]
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	f042 0208 	orr.w	r2, r2, #8
 800a6d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	699a      	ldr	r2, [r3, #24]
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	f022 0204 	bic.w	r2, r2, #4
 800a6e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	6999      	ldr	r1, [r3, #24]
 800a6ea:	68bb      	ldr	r3, [r7, #8]
 800a6ec:	691a      	ldr	r2, [r3, #16]
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	430a      	orrs	r2, r1
 800a6f4:	619a      	str	r2, [r3, #24]
      break;
 800a6f6:	e0a3      	b.n	800a840 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	68b9      	ldr	r1, [r7, #8]
 800a6fe:	4618      	mov	r0, r3
 800a700:	f000 fac6 	bl	800ac90 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	699a      	ldr	r2, [r3, #24]
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a712:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	699a      	ldr	r2, [r3, #24]
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a722:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	6999      	ldr	r1, [r3, #24]
 800a72a:	68bb      	ldr	r3, [r7, #8]
 800a72c:	691b      	ldr	r3, [r3, #16]
 800a72e:	021a      	lsls	r2, r3, #8
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	430a      	orrs	r2, r1
 800a736:	619a      	str	r2, [r3, #24]
      break;
 800a738:	e082      	b.n	800a840 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	68b9      	ldr	r1, [r7, #8]
 800a740:	4618      	mov	r0, r3
 800a742:	f000 fb2f 	bl	800ada4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	69da      	ldr	r2, [r3, #28]
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	f042 0208 	orr.w	r2, r2, #8
 800a754:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	69da      	ldr	r2, [r3, #28]
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	f022 0204 	bic.w	r2, r2, #4
 800a764:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	69d9      	ldr	r1, [r3, #28]
 800a76c:	68bb      	ldr	r3, [r7, #8]
 800a76e:	691a      	ldr	r2, [r3, #16]
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	430a      	orrs	r2, r1
 800a776:	61da      	str	r2, [r3, #28]
      break;
 800a778:	e062      	b.n	800a840 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	68b9      	ldr	r1, [r7, #8]
 800a780:	4618      	mov	r0, r3
 800a782:	f000 fb95 	bl	800aeb0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	69da      	ldr	r2, [r3, #28]
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a794:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	69da      	ldr	r2, [r3, #28]
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a7a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	69d9      	ldr	r1, [r3, #28]
 800a7ac:	68bb      	ldr	r3, [r7, #8]
 800a7ae:	691b      	ldr	r3, [r3, #16]
 800a7b0:	021a      	lsls	r2, r3, #8
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	430a      	orrs	r2, r1
 800a7b8:	61da      	str	r2, [r3, #28]
      break;
 800a7ba:	e041      	b.n	800a840 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	68b9      	ldr	r1, [r7, #8]
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	f000 fbdc 	bl	800af80 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	f042 0208 	orr.w	r2, r2, #8
 800a7d6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	f022 0204 	bic.w	r2, r2, #4
 800a7e6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a7ee:	68bb      	ldr	r3, [r7, #8]
 800a7f0:	691a      	ldr	r2, [r3, #16]
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	430a      	orrs	r2, r1
 800a7f8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a7fa:	e021      	b.n	800a840 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	68b9      	ldr	r1, [r7, #8]
 800a802:	4618      	mov	r0, r3
 800a804:	f000 fc1e 	bl	800b044 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a816:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a826:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a82e:	68bb      	ldr	r3, [r7, #8]
 800a830:	691b      	ldr	r3, [r3, #16]
 800a832:	021a      	lsls	r2, r3, #8
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	430a      	orrs	r2, r1
 800a83a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a83c:	e000      	b.n	800a840 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800a83e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	2200      	movs	r2, #0
 800a844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a848:	2300      	movs	r3, #0
}
 800a84a:	4618      	mov	r0, r3
 800a84c:	3710      	adds	r7, #16
 800a84e:	46bd      	mov	sp, r7
 800a850:	bd80      	pop	{r7, pc}
 800a852:	bf00      	nop

0800a854 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b084      	sub	sp, #16
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
 800a85c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a864:	2b01      	cmp	r3, #1
 800a866:	d101      	bne.n	800a86c <HAL_TIM_ConfigClockSource+0x18>
 800a868:	2302      	movs	r3, #2
 800a86a:	e0db      	b.n	800aa24 <HAL_TIM_ConfigClockSource+0x1d0>
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	2201      	movs	r2, #1
 800a870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	2202      	movs	r2, #2
 800a878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	689b      	ldr	r3, [r3, #8]
 800a882:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a884:	68fa      	ldr	r2, [r7, #12]
 800a886:	4b69      	ldr	r3, [pc, #420]	; (800aa2c <HAL_TIM_ConfigClockSource+0x1d8>)
 800a888:	4013      	ands	r3, r2
 800a88a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a892:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	68fa      	ldr	r2, [r7, #12]
 800a89a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a89c:	683b      	ldr	r3, [r7, #0]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	4a63      	ldr	r2, [pc, #396]	; (800aa30 <HAL_TIM_ConfigClockSource+0x1dc>)
 800a8a2:	4293      	cmp	r3, r2
 800a8a4:	f000 80a9 	beq.w	800a9fa <HAL_TIM_ConfigClockSource+0x1a6>
 800a8a8:	4a61      	ldr	r2, [pc, #388]	; (800aa30 <HAL_TIM_ConfigClockSource+0x1dc>)
 800a8aa:	4293      	cmp	r3, r2
 800a8ac:	f200 80ae 	bhi.w	800aa0c <HAL_TIM_ConfigClockSource+0x1b8>
 800a8b0:	4a60      	ldr	r2, [pc, #384]	; (800aa34 <HAL_TIM_ConfigClockSource+0x1e0>)
 800a8b2:	4293      	cmp	r3, r2
 800a8b4:	f000 80a1 	beq.w	800a9fa <HAL_TIM_ConfigClockSource+0x1a6>
 800a8b8:	4a5e      	ldr	r2, [pc, #376]	; (800aa34 <HAL_TIM_ConfigClockSource+0x1e0>)
 800a8ba:	4293      	cmp	r3, r2
 800a8bc:	f200 80a6 	bhi.w	800aa0c <HAL_TIM_ConfigClockSource+0x1b8>
 800a8c0:	4a5d      	ldr	r2, [pc, #372]	; (800aa38 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a8c2:	4293      	cmp	r3, r2
 800a8c4:	f000 8099 	beq.w	800a9fa <HAL_TIM_ConfigClockSource+0x1a6>
 800a8c8:	4a5b      	ldr	r2, [pc, #364]	; (800aa38 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a8ca:	4293      	cmp	r3, r2
 800a8cc:	f200 809e 	bhi.w	800aa0c <HAL_TIM_ConfigClockSource+0x1b8>
 800a8d0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a8d4:	f000 8091 	beq.w	800a9fa <HAL_TIM_ConfigClockSource+0x1a6>
 800a8d8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a8dc:	f200 8096 	bhi.w	800aa0c <HAL_TIM_ConfigClockSource+0x1b8>
 800a8e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a8e4:	f000 8089 	beq.w	800a9fa <HAL_TIM_ConfigClockSource+0x1a6>
 800a8e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a8ec:	f200 808e 	bhi.w	800aa0c <HAL_TIM_ConfigClockSource+0x1b8>
 800a8f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a8f4:	d03e      	beq.n	800a974 <HAL_TIM_ConfigClockSource+0x120>
 800a8f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a8fa:	f200 8087 	bhi.w	800aa0c <HAL_TIM_ConfigClockSource+0x1b8>
 800a8fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a902:	f000 8085 	beq.w	800aa10 <HAL_TIM_ConfigClockSource+0x1bc>
 800a906:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a90a:	d87f      	bhi.n	800aa0c <HAL_TIM_ConfigClockSource+0x1b8>
 800a90c:	2b70      	cmp	r3, #112	; 0x70
 800a90e:	d01a      	beq.n	800a946 <HAL_TIM_ConfigClockSource+0xf2>
 800a910:	2b70      	cmp	r3, #112	; 0x70
 800a912:	d87b      	bhi.n	800aa0c <HAL_TIM_ConfigClockSource+0x1b8>
 800a914:	2b60      	cmp	r3, #96	; 0x60
 800a916:	d050      	beq.n	800a9ba <HAL_TIM_ConfigClockSource+0x166>
 800a918:	2b60      	cmp	r3, #96	; 0x60
 800a91a:	d877      	bhi.n	800aa0c <HAL_TIM_ConfigClockSource+0x1b8>
 800a91c:	2b50      	cmp	r3, #80	; 0x50
 800a91e:	d03c      	beq.n	800a99a <HAL_TIM_ConfigClockSource+0x146>
 800a920:	2b50      	cmp	r3, #80	; 0x50
 800a922:	d873      	bhi.n	800aa0c <HAL_TIM_ConfigClockSource+0x1b8>
 800a924:	2b40      	cmp	r3, #64	; 0x40
 800a926:	d058      	beq.n	800a9da <HAL_TIM_ConfigClockSource+0x186>
 800a928:	2b40      	cmp	r3, #64	; 0x40
 800a92a:	d86f      	bhi.n	800aa0c <HAL_TIM_ConfigClockSource+0x1b8>
 800a92c:	2b30      	cmp	r3, #48	; 0x30
 800a92e:	d064      	beq.n	800a9fa <HAL_TIM_ConfigClockSource+0x1a6>
 800a930:	2b30      	cmp	r3, #48	; 0x30
 800a932:	d86b      	bhi.n	800aa0c <HAL_TIM_ConfigClockSource+0x1b8>
 800a934:	2b20      	cmp	r3, #32
 800a936:	d060      	beq.n	800a9fa <HAL_TIM_ConfigClockSource+0x1a6>
 800a938:	2b20      	cmp	r3, #32
 800a93a:	d867      	bhi.n	800aa0c <HAL_TIM_ConfigClockSource+0x1b8>
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d05c      	beq.n	800a9fa <HAL_TIM_ConfigClockSource+0x1a6>
 800a940:	2b10      	cmp	r3, #16
 800a942:	d05a      	beq.n	800a9fa <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800a944:	e062      	b.n	800aa0c <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	6818      	ldr	r0, [r3, #0]
 800a94a:	683b      	ldr	r3, [r7, #0]
 800a94c:	6899      	ldr	r1, [r3, #8]
 800a94e:	683b      	ldr	r3, [r7, #0]
 800a950:	685a      	ldr	r2, [r3, #4]
 800a952:	683b      	ldr	r3, [r7, #0]
 800a954:	68db      	ldr	r3, [r3, #12]
 800a956:	f000 fc57 	bl	800b208 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	689b      	ldr	r3, [r3, #8]
 800a960:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a968:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	68fa      	ldr	r2, [r7, #12]
 800a970:	609a      	str	r2, [r3, #8]
      break;
 800a972:	e04e      	b.n	800aa12 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	6818      	ldr	r0, [r3, #0]
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	6899      	ldr	r1, [r3, #8]
 800a97c:	683b      	ldr	r3, [r7, #0]
 800a97e:	685a      	ldr	r2, [r3, #4]
 800a980:	683b      	ldr	r3, [r7, #0]
 800a982:	68db      	ldr	r3, [r3, #12]
 800a984:	f000 fc40 	bl	800b208 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	689a      	ldr	r2, [r3, #8]
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a996:	609a      	str	r2, [r3, #8]
      break;
 800a998:	e03b      	b.n	800aa12 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	6818      	ldr	r0, [r3, #0]
 800a99e:	683b      	ldr	r3, [r7, #0]
 800a9a0:	6859      	ldr	r1, [r3, #4]
 800a9a2:	683b      	ldr	r3, [r7, #0]
 800a9a4:	68db      	ldr	r3, [r3, #12]
 800a9a6:	461a      	mov	r2, r3
 800a9a8:	f000 fbb0 	bl	800b10c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	2150      	movs	r1, #80	; 0x50
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	f000 fc0a 	bl	800b1cc <TIM_ITRx_SetConfig>
      break;
 800a9b8:	e02b      	b.n	800aa12 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	6818      	ldr	r0, [r3, #0]
 800a9be:	683b      	ldr	r3, [r7, #0]
 800a9c0:	6859      	ldr	r1, [r3, #4]
 800a9c2:	683b      	ldr	r3, [r7, #0]
 800a9c4:	68db      	ldr	r3, [r3, #12]
 800a9c6:	461a      	mov	r2, r3
 800a9c8:	f000 fbcf 	bl	800b16a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	2160      	movs	r1, #96	; 0x60
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	f000 fbfa 	bl	800b1cc <TIM_ITRx_SetConfig>
      break;
 800a9d8:	e01b      	b.n	800aa12 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	6818      	ldr	r0, [r3, #0]
 800a9de:	683b      	ldr	r3, [r7, #0]
 800a9e0:	6859      	ldr	r1, [r3, #4]
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	68db      	ldr	r3, [r3, #12]
 800a9e6:	461a      	mov	r2, r3
 800a9e8:	f000 fb90 	bl	800b10c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	2140      	movs	r1, #64	; 0x40
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	f000 fbea 	bl	800b1cc <TIM_ITRx_SetConfig>
      break;
 800a9f8:	e00b      	b.n	800aa12 <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681a      	ldr	r2, [r3, #0]
 800a9fe:	683b      	ldr	r3, [r7, #0]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	4619      	mov	r1, r3
 800aa04:	4610      	mov	r0, r2
 800aa06:	f000 fbe1 	bl	800b1cc <TIM_ITRx_SetConfig>
        break;
 800aa0a:	e002      	b.n	800aa12 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800aa0c:	bf00      	nop
 800aa0e:	e000      	b.n	800aa12 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800aa10:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	2201      	movs	r2, #1
 800aa16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800aa22:	2300      	movs	r3, #0
}
 800aa24:	4618      	mov	r0, r3
 800aa26:	3710      	adds	r7, #16
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	bd80      	pop	{r7, pc}
 800aa2c:	ffceff88 	.word	0xffceff88
 800aa30:	00100040 	.word	0x00100040
 800aa34:	00100030 	.word	0x00100030
 800aa38:	00100020 	.word	0x00100020

0800aa3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800aa3c:	b480      	push	{r7}
 800aa3e:	b085      	sub	sp, #20
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	6078      	str	r0, [r7, #4]
 800aa44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	4a40      	ldr	r2, [pc, #256]	; (800ab50 <TIM_Base_SetConfig+0x114>)
 800aa50:	4293      	cmp	r3, r2
 800aa52:	d013      	beq.n	800aa7c <TIM_Base_SetConfig+0x40>
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa5a:	d00f      	beq.n	800aa7c <TIM_Base_SetConfig+0x40>
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	4a3d      	ldr	r2, [pc, #244]	; (800ab54 <TIM_Base_SetConfig+0x118>)
 800aa60:	4293      	cmp	r3, r2
 800aa62:	d00b      	beq.n	800aa7c <TIM_Base_SetConfig+0x40>
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	4a3c      	ldr	r2, [pc, #240]	; (800ab58 <TIM_Base_SetConfig+0x11c>)
 800aa68:	4293      	cmp	r3, r2
 800aa6a:	d007      	beq.n	800aa7c <TIM_Base_SetConfig+0x40>
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	4a3b      	ldr	r2, [pc, #236]	; (800ab5c <TIM_Base_SetConfig+0x120>)
 800aa70:	4293      	cmp	r3, r2
 800aa72:	d003      	beq.n	800aa7c <TIM_Base_SetConfig+0x40>
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	4a3a      	ldr	r2, [pc, #232]	; (800ab60 <TIM_Base_SetConfig+0x124>)
 800aa78:	4293      	cmp	r3, r2
 800aa7a:	d108      	bne.n	800aa8e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800aa84:	683b      	ldr	r3, [r7, #0]
 800aa86:	685b      	ldr	r3, [r3, #4]
 800aa88:	68fa      	ldr	r2, [r7, #12]
 800aa8a:	4313      	orrs	r3, r2
 800aa8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	4a2f      	ldr	r2, [pc, #188]	; (800ab50 <TIM_Base_SetConfig+0x114>)
 800aa92:	4293      	cmp	r3, r2
 800aa94:	d01f      	beq.n	800aad6 <TIM_Base_SetConfig+0x9a>
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa9c:	d01b      	beq.n	800aad6 <TIM_Base_SetConfig+0x9a>
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	4a2c      	ldr	r2, [pc, #176]	; (800ab54 <TIM_Base_SetConfig+0x118>)
 800aaa2:	4293      	cmp	r3, r2
 800aaa4:	d017      	beq.n	800aad6 <TIM_Base_SetConfig+0x9a>
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	4a2b      	ldr	r2, [pc, #172]	; (800ab58 <TIM_Base_SetConfig+0x11c>)
 800aaaa:	4293      	cmp	r3, r2
 800aaac:	d013      	beq.n	800aad6 <TIM_Base_SetConfig+0x9a>
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	4a2a      	ldr	r2, [pc, #168]	; (800ab5c <TIM_Base_SetConfig+0x120>)
 800aab2:	4293      	cmp	r3, r2
 800aab4:	d00f      	beq.n	800aad6 <TIM_Base_SetConfig+0x9a>
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	4a29      	ldr	r2, [pc, #164]	; (800ab60 <TIM_Base_SetConfig+0x124>)
 800aaba:	4293      	cmp	r3, r2
 800aabc:	d00b      	beq.n	800aad6 <TIM_Base_SetConfig+0x9a>
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	4a28      	ldr	r2, [pc, #160]	; (800ab64 <TIM_Base_SetConfig+0x128>)
 800aac2:	4293      	cmp	r3, r2
 800aac4:	d007      	beq.n	800aad6 <TIM_Base_SetConfig+0x9a>
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	4a27      	ldr	r2, [pc, #156]	; (800ab68 <TIM_Base_SetConfig+0x12c>)
 800aaca:	4293      	cmp	r3, r2
 800aacc:	d003      	beq.n	800aad6 <TIM_Base_SetConfig+0x9a>
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	4a26      	ldr	r2, [pc, #152]	; (800ab6c <TIM_Base_SetConfig+0x130>)
 800aad2:	4293      	cmp	r3, r2
 800aad4:	d108      	bne.n	800aae8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aadc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800aade:	683b      	ldr	r3, [r7, #0]
 800aae0:	68db      	ldr	r3, [r3, #12]
 800aae2:	68fa      	ldr	r2, [r7, #12]
 800aae4:	4313      	orrs	r3, r2
 800aae6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800aaee:	683b      	ldr	r3, [r7, #0]
 800aaf0:	695b      	ldr	r3, [r3, #20]
 800aaf2:	4313      	orrs	r3, r2
 800aaf4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	68fa      	ldr	r2, [r7, #12]
 800aafa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800aafc:	683b      	ldr	r3, [r7, #0]
 800aafe:	689a      	ldr	r2, [r3, #8]
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ab04:	683b      	ldr	r3, [r7, #0]
 800ab06:	681a      	ldr	r2, [r3, #0]
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	4a10      	ldr	r2, [pc, #64]	; (800ab50 <TIM_Base_SetConfig+0x114>)
 800ab10:	4293      	cmp	r3, r2
 800ab12:	d00f      	beq.n	800ab34 <TIM_Base_SetConfig+0xf8>
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	4a12      	ldr	r2, [pc, #72]	; (800ab60 <TIM_Base_SetConfig+0x124>)
 800ab18:	4293      	cmp	r3, r2
 800ab1a:	d00b      	beq.n	800ab34 <TIM_Base_SetConfig+0xf8>
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	4a11      	ldr	r2, [pc, #68]	; (800ab64 <TIM_Base_SetConfig+0x128>)
 800ab20:	4293      	cmp	r3, r2
 800ab22:	d007      	beq.n	800ab34 <TIM_Base_SetConfig+0xf8>
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	4a10      	ldr	r2, [pc, #64]	; (800ab68 <TIM_Base_SetConfig+0x12c>)
 800ab28:	4293      	cmp	r3, r2
 800ab2a:	d003      	beq.n	800ab34 <TIM_Base_SetConfig+0xf8>
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	4a0f      	ldr	r2, [pc, #60]	; (800ab6c <TIM_Base_SetConfig+0x130>)
 800ab30:	4293      	cmp	r3, r2
 800ab32:	d103      	bne.n	800ab3c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ab34:	683b      	ldr	r3, [r7, #0]
 800ab36:	691a      	ldr	r2, [r3, #16]
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	2201      	movs	r2, #1
 800ab40:	615a      	str	r2, [r3, #20]
}
 800ab42:	bf00      	nop
 800ab44:	3714      	adds	r7, #20
 800ab46:	46bd      	mov	sp, r7
 800ab48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4c:	4770      	bx	lr
 800ab4e:	bf00      	nop
 800ab50:	40010000 	.word	0x40010000
 800ab54:	40000400 	.word	0x40000400
 800ab58:	40000800 	.word	0x40000800
 800ab5c:	40000c00 	.word	0x40000c00
 800ab60:	40010400 	.word	0x40010400
 800ab64:	40014000 	.word	0x40014000
 800ab68:	40014400 	.word	0x40014400
 800ab6c:	40014800 	.word	0x40014800

0800ab70 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ab70:	b480      	push	{r7}
 800ab72:	b087      	sub	sp, #28
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
 800ab78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	6a1b      	ldr	r3, [r3, #32]
 800ab7e:	f023 0201 	bic.w	r2, r3, #1
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	6a1b      	ldr	r3, [r3, #32]
 800ab8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	685b      	ldr	r3, [r3, #4]
 800ab90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	699b      	ldr	r3, [r3, #24]
 800ab96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ab98:	68fa      	ldr	r2, [r7, #12]
 800ab9a:	4b37      	ldr	r3, [pc, #220]	; (800ac78 <TIM_OC1_SetConfig+0x108>)
 800ab9c:	4013      	ands	r3, r2
 800ab9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	f023 0303 	bic.w	r3, r3, #3
 800aba6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	68fa      	ldr	r2, [r7, #12]
 800abae:	4313      	orrs	r3, r2
 800abb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800abb2:	697b      	ldr	r3, [r7, #20]
 800abb4:	f023 0302 	bic.w	r3, r3, #2
 800abb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800abba:	683b      	ldr	r3, [r7, #0]
 800abbc:	689b      	ldr	r3, [r3, #8]
 800abbe:	697a      	ldr	r2, [r7, #20]
 800abc0:	4313      	orrs	r3, r2
 800abc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	4a2d      	ldr	r2, [pc, #180]	; (800ac7c <TIM_OC1_SetConfig+0x10c>)
 800abc8:	4293      	cmp	r3, r2
 800abca:	d00f      	beq.n	800abec <TIM_OC1_SetConfig+0x7c>
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	4a2c      	ldr	r2, [pc, #176]	; (800ac80 <TIM_OC1_SetConfig+0x110>)
 800abd0:	4293      	cmp	r3, r2
 800abd2:	d00b      	beq.n	800abec <TIM_OC1_SetConfig+0x7c>
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	4a2b      	ldr	r2, [pc, #172]	; (800ac84 <TIM_OC1_SetConfig+0x114>)
 800abd8:	4293      	cmp	r3, r2
 800abda:	d007      	beq.n	800abec <TIM_OC1_SetConfig+0x7c>
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	4a2a      	ldr	r2, [pc, #168]	; (800ac88 <TIM_OC1_SetConfig+0x118>)
 800abe0:	4293      	cmp	r3, r2
 800abe2:	d003      	beq.n	800abec <TIM_OC1_SetConfig+0x7c>
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	4a29      	ldr	r2, [pc, #164]	; (800ac8c <TIM_OC1_SetConfig+0x11c>)
 800abe8:	4293      	cmp	r3, r2
 800abea:	d10c      	bne.n	800ac06 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800abec:	697b      	ldr	r3, [r7, #20]
 800abee:	f023 0308 	bic.w	r3, r3, #8
 800abf2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800abf4:	683b      	ldr	r3, [r7, #0]
 800abf6:	68db      	ldr	r3, [r3, #12]
 800abf8:	697a      	ldr	r2, [r7, #20]
 800abfa:	4313      	orrs	r3, r2
 800abfc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800abfe:	697b      	ldr	r3, [r7, #20]
 800ac00:	f023 0304 	bic.w	r3, r3, #4
 800ac04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	4a1c      	ldr	r2, [pc, #112]	; (800ac7c <TIM_OC1_SetConfig+0x10c>)
 800ac0a:	4293      	cmp	r3, r2
 800ac0c:	d00f      	beq.n	800ac2e <TIM_OC1_SetConfig+0xbe>
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	4a1b      	ldr	r2, [pc, #108]	; (800ac80 <TIM_OC1_SetConfig+0x110>)
 800ac12:	4293      	cmp	r3, r2
 800ac14:	d00b      	beq.n	800ac2e <TIM_OC1_SetConfig+0xbe>
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	4a1a      	ldr	r2, [pc, #104]	; (800ac84 <TIM_OC1_SetConfig+0x114>)
 800ac1a:	4293      	cmp	r3, r2
 800ac1c:	d007      	beq.n	800ac2e <TIM_OC1_SetConfig+0xbe>
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	4a19      	ldr	r2, [pc, #100]	; (800ac88 <TIM_OC1_SetConfig+0x118>)
 800ac22:	4293      	cmp	r3, r2
 800ac24:	d003      	beq.n	800ac2e <TIM_OC1_SetConfig+0xbe>
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	4a18      	ldr	r2, [pc, #96]	; (800ac8c <TIM_OC1_SetConfig+0x11c>)
 800ac2a:	4293      	cmp	r3, r2
 800ac2c:	d111      	bne.n	800ac52 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ac2e:	693b      	ldr	r3, [r7, #16]
 800ac30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ac34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ac36:	693b      	ldr	r3, [r7, #16]
 800ac38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ac3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	695b      	ldr	r3, [r3, #20]
 800ac42:	693a      	ldr	r2, [r7, #16]
 800ac44:	4313      	orrs	r3, r2
 800ac46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ac48:	683b      	ldr	r3, [r7, #0]
 800ac4a:	699b      	ldr	r3, [r3, #24]
 800ac4c:	693a      	ldr	r2, [r7, #16]
 800ac4e:	4313      	orrs	r3, r2
 800ac50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	693a      	ldr	r2, [r7, #16]
 800ac56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	68fa      	ldr	r2, [r7, #12]
 800ac5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ac5e:	683b      	ldr	r3, [r7, #0]
 800ac60:	685a      	ldr	r2, [r3, #4]
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	697a      	ldr	r2, [r7, #20]
 800ac6a:	621a      	str	r2, [r3, #32]
}
 800ac6c:	bf00      	nop
 800ac6e:	371c      	adds	r7, #28
 800ac70:	46bd      	mov	sp, r7
 800ac72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac76:	4770      	bx	lr
 800ac78:	fffeff8f 	.word	0xfffeff8f
 800ac7c:	40010000 	.word	0x40010000
 800ac80:	40010400 	.word	0x40010400
 800ac84:	40014000 	.word	0x40014000
 800ac88:	40014400 	.word	0x40014400
 800ac8c:	40014800 	.word	0x40014800

0800ac90 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ac90:	b480      	push	{r7}
 800ac92:	b087      	sub	sp, #28
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
 800ac98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	6a1b      	ldr	r3, [r3, #32]
 800ac9e:	f023 0210 	bic.w	r2, r3, #16
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	6a1b      	ldr	r3, [r3, #32]
 800acaa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	685b      	ldr	r3, [r3, #4]
 800acb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	699b      	ldr	r3, [r3, #24]
 800acb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800acb8:	68fa      	ldr	r2, [r7, #12]
 800acba:	4b34      	ldr	r3, [pc, #208]	; (800ad8c <TIM_OC2_SetConfig+0xfc>)
 800acbc:	4013      	ands	r3, r2
 800acbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800acc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800acc8:	683b      	ldr	r3, [r7, #0]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	021b      	lsls	r3, r3, #8
 800acce:	68fa      	ldr	r2, [r7, #12]
 800acd0:	4313      	orrs	r3, r2
 800acd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800acd4:	697b      	ldr	r3, [r7, #20]
 800acd6:	f023 0320 	bic.w	r3, r3, #32
 800acda:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800acdc:	683b      	ldr	r3, [r7, #0]
 800acde:	689b      	ldr	r3, [r3, #8]
 800ace0:	011b      	lsls	r3, r3, #4
 800ace2:	697a      	ldr	r2, [r7, #20]
 800ace4:	4313      	orrs	r3, r2
 800ace6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	4a29      	ldr	r2, [pc, #164]	; (800ad90 <TIM_OC2_SetConfig+0x100>)
 800acec:	4293      	cmp	r3, r2
 800acee:	d003      	beq.n	800acf8 <TIM_OC2_SetConfig+0x68>
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	4a28      	ldr	r2, [pc, #160]	; (800ad94 <TIM_OC2_SetConfig+0x104>)
 800acf4:	4293      	cmp	r3, r2
 800acf6:	d10d      	bne.n	800ad14 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800acf8:	697b      	ldr	r3, [r7, #20]
 800acfa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800acfe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ad00:	683b      	ldr	r3, [r7, #0]
 800ad02:	68db      	ldr	r3, [r3, #12]
 800ad04:	011b      	lsls	r3, r3, #4
 800ad06:	697a      	ldr	r2, [r7, #20]
 800ad08:	4313      	orrs	r3, r2
 800ad0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ad0c:	697b      	ldr	r3, [r7, #20]
 800ad0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ad12:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	4a1e      	ldr	r2, [pc, #120]	; (800ad90 <TIM_OC2_SetConfig+0x100>)
 800ad18:	4293      	cmp	r3, r2
 800ad1a:	d00f      	beq.n	800ad3c <TIM_OC2_SetConfig+0xac>
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	4a1d      	ldr	r2, [pc, #116]	; (800ad94 <TIM_OC2_SetConfig+0x104>)
 800ad20:	4293      	cmp	r3, r2
 800ad22:	d00b      	beq.n	800ad3c <TIM_OC2_SetConfig+0xac>
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	4a1c      	ldr	r2, [pc, #112]	; (800ad98 <TIM_OC2_SetConfig+0x108>)
 800ad28:	4293      	cmp	r3, r2
 800ad2a:	d007      	beq.n	800ad3c <TIM_OC2_SetConfig+0xac>
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	4a1b      	ldr	r2, [pc, #108]	; (800ad9c <TIM_OC2_SetConfig+0x10c>)
 800ad30:	4293      	cmp	r3, r2
 800ad32:	d003      	beq.n	800ad3c <TIM_OC2_SetConfig+0xac>
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	4a1a      	ldr	r2, [pc, #104]	; (800ada0 <TIM_OC2_SetConfig+0x110>)
 800ad38:	4293      	cmp	r3, r2
 800ad3a:	d113      	bne.n	800ad64 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ad3c:	693b      	ldr	r3, [r7, #16]
 800ad3e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ad42:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ad44:	693b      	ldr	r3, [r7, #16]
 800ad46:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ad4a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ad4c:	683b      	ldr	r3, [r7, #0]
 800ad4e:	695b      	ldr	r3, [r3, #20]
 800ad50:	009b      	lsls	r3, r3, #2
 800ad52:	693a      	ldr	r2, [r7, #16]
 800ad54:	4313      	orrs	r3, r2
 800ad56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ad58:	683b      	ldr	r3, [r7, #0]
 800ad5a:	699b      	ldr	r3, [r3, #24]
 800ad5c:	009b      	lsls	r3, r3, #2
 800ad5e:	693a      	ldr	r2, [r7, #16]
 800ad60:	4313      	orrs	r3, r2
 800ad62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	693a      	ldr	r2, [r7, #16]
 800ad68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	68fa      	ldr	r2, [r7, #12]
 800ad6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ad70:	683b      	ldr	r3, [r7, #0]
 800ad72:	685a      	ldr	r2, [r3, #4]
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	697a      	ldr	r2, [r7, #20]
 800ad7c:	621a      	str	r2, [r3, #32]
}
 800ad7e:	bf00      	nop
 800ad80:	371c      	adds	r7, #28
 800ad82:	46bd      	mov	sp, r7
 800ad84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad88:	4770      	bx	lr
 800ad8a:	bf00      	nop
 800ad8c:	feff8fff 	.word	0xfeff8fff
 800ad90:	40010000 	.word	0x40010000
 800ad94:	40010400 	.word	0x40010400
 800ad98:	40014000 	.word	0x40014000
 800ad9c:	40014400 	.word	0x40014400
 800ada0:	40014800 	.word	0x40014800

0800ada4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ada4:	b480      	push	{r7}
 800ada6:	b087      	sub	sp, #28
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
 800adac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	6a1b      	ldr	r3, [r3, #32]
 800adb2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	6a1b      	ldr	r3, [r3, #32]
 800adbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	685b      	ldr	r3, [r3, #4]
 800adc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	69db      	ldr	r3, [r3, #28]
 800adca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800add2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	f023 0303 	bic.w	r3, r3, #3
 800adda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800addc:	683b      	ldr	r3, [r7, #0]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	68fa      	ldr	r2, [r7, #12]
 800ade2:	4313      	orrs	r3, r2
 800ade4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ade6:	697b      	ldr	r3, [r7, #20]
 800ade8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800adec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800adee:	683b      	ldr	r3, [r7, #0]
 800adf0:	689b      	ldr	r3, [r3, #8]
 800adf2:	021b      	lsls	r3, r3, #8
 800adf4:	697a      	ldr	r2, [r7, #20]
 800adf6:	4313      	orrs	r3, r2
 800adf8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	4a27      	ldr	r2, [pc, #156]	; (800ae9c <TIM_OC3_SetConfig+0xf8>)
 800adfe:	4293      	cmp	r3, r2
 800ae00:	d003      	beq.n	800ae0a <TIM_OC3_SetConfig+0x66>
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	4a26      	ldr	r2, [pc, #152]	; (800aea0 <TIM_OC3_SetConfig+0xfc>)
 800ae06:	4293      	cmp	r3, r2
 800ae08:	d10d      	bne.n	800ae26 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ae0a:	697b      	ldr	r3, [r7, #20]
 800ae0c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ae10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ae12:	683b      	ldr	r3, [r7, #0]
 800ae14:	68db      	ldr	r3, [r3, #12]
 800ae16:	021b      	lsls	r3, r3, #8
 800ae18:	697a      	ldr	r2, [r7, #20]
 800ae1a:	4313      	orrs	r3, r2
 800ae1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ae1e:	697b      	ldr	r3, [r7, #20]
 800ae20:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ae24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	4a1c      	ldr	r2, [pc, #112]	; (800ae9c <TIM_OC3_SetConfig+0xf8>)
 800ae2a:	4293      	cmp	r3, r2
 800ae2c:	d00f      	beq.n	800ae4e <TIM_OC3_SetConfig+0xaa>
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	4a1b      	ldr	r2, [pc, #108]	; (800aea0 <TIM_OC3_SetConfig+0xfc>)
 800ae32:	4293      	cmp	r3, r2
 800ae34:	d00b      	beq.n	800ae4e <TIM_OC3_SetConfig+0xaa>
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	4a1a      	ldr	r2, [pc, #104]	; (800aea4 <TIM_OC3_SetConfig+0x100>)
 800ae3a:	4293      	cmp	r3, r2
 800ae3c:	d007      	beq.n	800ae4e <TIM_OC3_SetConfig+0xaa>
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	4a19      	ldr	r2, [pc, #100]	; (800aea8 <TIM_OC3_SetConfig+0x104>)
 800ae42:	4293      	cmp	r3, r2
 800ae44:	d003      	beq.n	800ae4e <TIM_OC3_SetConfig+0xaa>
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	4a18      	ldr	r2, [pc, #96]	; (800aeac <TIM_OC3_SetConfig+0x108>)
 800ae4a:	4293      	cmp	r3, r2
 800ae4c:	d113      	bne.n	800ae76 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ae4e:	693b      	ldr	r3, [r7, #16]
 800ae50:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ae54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ae56:	693b      	ldr	r3, [r7, #16]
 800ae58:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ae5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ae5e:	683b      	ldr	r3, [r7, #0]
 800ae60:	695b      	ldr	r3, [r3, #20]
 800ae62:	011b      	lsls	r3, r3, #4
 800ae64:	693a      	ldr	r2, [r7, #16]
 800ae66:	4313      	orrs	r3, r2
 800ae68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ae6a:	683b      	ldr	r3, [r7, #0]
 800ae6c:	699b      	ldr	r3, [r3, #24]
 800ae6e:	011b      	lsls	r3, r3, #4
 800ae70:	693a      	ldr	r2, [r7, #16]
 800ae72:	4313      	orrs	r3, r2
 800ae74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	693a      	ldr	r2, [r7, #16]
 800ae7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	68fa      	ldr	r2, [r7, #12]
 800ae80:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ae82:	683b      	ldr	r3, [r7, #0]
 800ae84:	685a      	ldr	r2, [r3, #4]
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	697a      	ldr	r2, [r7, #20]
 800ae8e:	621a      	str	r2, [r3, #32]
}
 800ae90:	bf00      	nop
 800ae92:	371c      	adds	r7, #28
 800ae94:	46bd      	mov	sp, r7
 800ae96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9a:	4770      	bx	lr
 800ae9c:	40010000 	.word	0x40010000
 800aea0:	40010400 	.word	0x40010400
 800aea4:	40014000 	.word	0x40014000
 800aea8:	40014400 	.word	0x40014400
 800aeac:	40014800 	.word	0x40014800

0800aeb0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aeb0:	b480      	push	{r7}
 800aeb2:	b087      	sub	sp, #28
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
 800aeb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	6a1b      	ldr	r3, [r3, #32]
 800aebe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	6a1b      	ldr	r3, [r3, #32]
 800aeca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	685b      	ldr	r3, [r3, #4]
 800aed0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	69db      	ldr	r3, [r3, #28]
 800aed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aede:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aee6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aee8:	683b      	ldr	r3, [r7, #0]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	021b      	lsls	r3, r3, #8
 800aeee:	68fa      	ldr	r2, [r7, #12]
 800aef0:	4313      	orrs	r3, r2
 800aef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800aef4:	693b      	ldr	r3, [r7, #16]
 800aef6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800aefa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800aefc:	683b      	ldr	r3, [r7, #0]
 800aefe:	689b      	ldr	r3, [r3, #8]
 800af00:	031b      	lsls	r3, r3, #12
 800af02:	693a      	ldr	r2, [r7, #16]
 800af04:	4313      	orrs	r3, r2
 800af06:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	4a18      	ldr	r2, [pc, #96]	; (800af6c <TIM_OC4_SetConfig+0xbc>)
 800af0c:	4293      	cmp	r3, r2
 800af0e:	d00f      	beq.n	800af30 <TIM_OC4_SetConfig+0x80>
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	4a17      	ldr	r2, [pc, #92]	; (800af70 <TIM_OC4_SetConfig+0xc0>)
 800af14:	4293      	cmp	r3, r2
 800af16:	d00b      	beq.n	800af30 <TIM_OC4_SetConfig+0x80>
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	4a16      	ldr	r2, [pc, #88]	; (800af74 <TIM_OC4_SetConfig+0xc4>)
 800af1c:	4293      	cmp	r3, r2
 800af1e:	d007      	beq.n	800af30 <TIM_OC4_SetConfig+0x80>
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	4a15      	ldr	r2, [pc, #84]	; (800af78 <TIM_OC4_SetConfig+0xc8>)
 800af24:	4293      	cmp	r3, r2
 800af26:	d003      	beq.n	800af30 <TIM_OC4_SetConfig+0x80>
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	4a14      	ldr	r2, [pc, #80]	; (800af7c <TIM_OC4_SetConfig+0xcc>)
 800af2c:	4293      	cmp	r3, r2
 800af2e:	d109      	bne.n	800af44 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800af30:	697b      	ldr	r3, [r7, #20]
 800af32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800af36:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800af38:	683b      	ldr	r3, [r7, #0]
 800af3a:	695b      	ldr	r3, [r3, #20]
 800af3c:	019b      	lsls	r3, r3, #6
 800af3e:	697a      	ldr	r2, [r7, #20]
 800af40:	4313      	orrs	r3, r2
 800af42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	697a      	ldr	r2, [r7, #20]
 800af48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	68fa      	ldr	r2, [r7, #12]
 800af4e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800af50:	683b      	ldr	r3, [r7, #0]
 800af52:	685a      	ldr	r2, [r3, #4]
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	693a      	ldr	r2, [r7, #16]
 800af5c:	621a      	str	r2, [r3, #32]
}
 800af5e:	bf00      	nop
 800af60:	371c      	adds	r7, #28
 800af62:	46bd      	mov	sp, r7
 800af64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af68:	4770      	bx	lr
 800af6a:	bf00      	nop
 800af6c:	40010000 	.word	0x40010000
 800af70:	40010400 	.word	0x40010400
 800af74:	40014000 	.word	0x40014000
 800af78:	40014400 	.word	0x40014400
 800af7c:	40014800 	.word	0x40014800

0800af80 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800af80:	b480      	push	{r7}
 800af82:	b087      	sub	sp, #28
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
 800af88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	6a1b      	ldr	r3, [r3, #32]
 800af8e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	6a1b      	ldr	r3, [r3, #32]
 800af9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	685b      	ldr	r3, [r3, #4]
 800afa0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800afa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800afae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800afb0:	683b      	ldr	r3, [r7, #0]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	68fa      	ldr	r2, [r7, #12]
 800afb6:	4313      	orrs	r3, r2
 800afb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800afba:	693b      	ldr	r3, [r7, #16]
 800afbc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800afc0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800afc2:	683b      	ldr	r3, [r7, #0]
 800afc4:	689b      	ldr	r3, [r3, #8]
 800afc6:	041b      	lsls	r3, r3, #16
 800afc8:	693a      	ldr	r2, [r7, #16]
 800afca:	4313      	orrs	r3, r2
 800afcc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	4a17      	ldr	r2, [pc, #92]	; (800b030 <TIM_OC5_SetConfig+0xb0>)
 800afd2:	4293      	cmp	r3, r2
 800afd4:	d00f      	beq.n	800aff6 <TIM_OC5_SetConfig+0x76>
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	4a16      	ldr	r2, [pc, #88]	; (800b034 <TIM_OC5_SetConfig+0xb4>)
 800afda:	4293      	cmp	r3, r2
 800afdc:	d00b      	beq.n	800aff6 <TIM_OC5_SetConfig+0x76>
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	4a15      	ldr	r2, [pc, #84]	; (800b038 <TIM_OC5_SetConfig+0xb8>)
 800afe2:	4293      	cmp	r3, r2
 800afe4:	d007      	beq.n	800aff6 <TIM_OC5_SetConfig+0x76>
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	4a14      	ldr	r2, [pc, #80]	; (800b03c <TIM_OC5_SetConfig+0xbc>)
 800afea:	4293      	cmp	r3, r2
 800afec:	d003      	beq.n	800aff6 <TIM_OC5_SetConfig+0x76>
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	4a13      	ldr	r2, [pc, #76]	; (800b040 <TIM_OC5_SetConfig+0xc0>)
 800aff2:	4293      	cmp	r3, r2
 800aff4:	d109      	bne.n	800b00a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800aff6:	697b      	ldr	r3, [r7, #20]
 800aff8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800affc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800affe:	683b      	ldr	r3, [r7, #0]
 800b000:	695b      	ldr	r3, [r3, #20]
 800b002:	021b      	lsls	r3, r3, #8
 800b004:	697a      	ldr	r2, [r7, #20]
 800b006:	4313      	orrs	r3, r2
 800b008:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	697a      	ldr	r2, [r7, #20]
 800b00e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	68fa      	ldr	r2, [r7, #12]
 800b014:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b016:	683b      	ldr	r3, [r7, #0]
 800b018:	685a      	ldr	r2, [r3, #4]
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	693a      	ldr	r2, [r7, #16]
 800b022:	621a      	str	r2, [r3, #32]
}
 800b024:	bf00      	nop
 800b026:	371c      	adds	r7, #28
 800b028:	46bd      	mov	sp, r7
 800b02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02e:	4770      	bx	lr
 800b030:	40010000 	.word	0x40010000
 800b034:	40010400 	.word	0x40010400
 800b038:	40014000 	.word	0x40014000
 800b03c:	40014400 	.word	0x40014400
 800b040:	40014800 	.word	0x40014800

0800b044 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b044:	b480      	push	{r7}
 800b046:	b087      	sub	sp, #28
 800b048:	af00      	add	r7, sp, #0
 800b04a:	6078      	str	r0, [r7, #4]
 800b04c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	6a1b      	ldr	r3, [r3, #32]
 800b052:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	6a1b      	ldr	r3, [r3, #32]
 800b05e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	685b      	ldr	r3, [r3, #4]
 800b064:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b06a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b072:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b074:	683b      	ldr	r3, [r7, #0]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	021b      	lsls	r3, r3, #8
 800b07a:	68fa      	ldr	r2, [r7, #12]
 800b07c:	4313      	orrs	r3, r2
 800b07e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b080:	693b      	ldr	r3, [r7, #16]
 800b082:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b086:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b088:	683b      	ldr	r3, [r7, #0]
 800b08a:	689b      	ldr	r3, [r3, #8]
 800b08c:	051b      	lsls	r3, r3, #20
 800b08e:	693a      	ldr	r2, [r7, #16]
 800b090:	4313      	orrs	r3, r2
 800b092:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	4a18      	ldr	r2, [pc, #96]	; (800b0f8 <TIM_OC6_SetConfig+0xb4>)
 800b098:	4293      	cmp	r3, r2
 800b09a:	d00f      	beq.n	800b0bc <TIM_OC6_SetConfig+0x78>
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	4a17      	ldr	r2, [pc, #92]	; (800b0fc <TIM_OC6_SetConfig+0xb8>)
 800b0a0:	4293      	cmp	r3, r2
 800b0a2:	d00b      	beq.n	800b0bc <TIM_OC6_SetConfig+0x78>
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	4a16      	ldr	r2, [pc, #88]	; (800b100 <TIM_OC6_SetConfig+0xbc>)
 800b0a8:	4293      	cmp	r3, r2
 800b0aa:	d007      	beq.n	800b0bc <TIM_OC6_SetConfig+0x78>
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	4a15      	ldr	r2, [pc, #84]	; (800b104 <TIM_OC6_SetConfig+0xc0>)
 800b0b0:	4293      	cmp	r3, r2
 800b0b2:	d003      	beq.n	800b0bc <TIM_OC6_SetConfig+0x78>
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	4a14      	ldr	r2, [pc, #80]	; (800b108 <TIM_OC6_SetConfig+0xc4>)
 800b0b8:	4293      	cmp	r3, r2
 800b0ba:	d109      	bne.n	800b0d0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b0bc:	697b      	ldr	r3, [r7, #20]
 800b0be:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b0c2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b0c4:	683b      	ldr	r3, [r7, #0]
 800b0c6:	695b      	ldr	r3, [r3, #20]
 800b0c8:	029b      	lsls	r3, r3, #10
 800b0ca:	697a      	ldr	r2, [r7, #20]
 800b0cc:	4313      	orrs	r3, r2
 800b0ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	697a      	ldr	r2, [r7, #20]
 800b0d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	68fa      	ldr	r2, [r7, #12]
 800b0da:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b0dc:	683b      	ldr	r3, [r7, #0]
 800b0de:	685a      	ldr	r2, [r3, #4]
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	693a      	ldr	r2, [r7, #16]
 800b0e8:	621a      	str	r2, [r3, #32]
}
 800b0ea:	bf00      	nop
 800b0ec:	371c      	adds	r7, #28
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f4:	4770      	bx	lr
 800b0f6:	bf00      	nop
 800b0f8:	40010000 	.word	0x40010000
 800b0fc:	40010400 	.word	0x40010400
 800b100:	40014000 	.word	0x40014000
 800b104:	40014400 	.word	0x40014400
 800b108:	40014800 	.word	0x40014800

0800b10c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b10c:	b480      	push	{r7}
 800b10e:	b087      	sub	sp, #28
 800b110:	af00      	add	r7, sp, #0
 800b112:	60f8      	str	r0, [r7, #12]
 800b114:	60b9      	str	r1, [r7, #8]
 800b116:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	6a1b      	ldr	r3, [r3, #32]
 800b11c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	6a1b      	ldr	r3, [r3, #32]
 800b122:	f023 0201 	bic.w	r2, r3, #1
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	699b      	ldr	r3, [r3, #24]
 800b12e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b130:	693b      	ldr	r3, [r7, #16]
 800b132:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b136:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	011b      	lsls	r3, r3, #4
 800b13c:	693a      	ldr	r2, [r7, #16]
 800b13e:	4313      	orrs	r3, r2
 800b140:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b142:	697b      	ldr	r3, [r7, #20]
 800b144:	f023 030a 	bic.w	r3, r3, #10
 800b148:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b14a:	697a      	ldr	r2, [r7, #20]
 800b14c:	68bb      	ldr	r3, [r7, #8]
 800b14e:	4313      	orrs	r3, r2
 800b150:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	693a      	ldr	r2, [r7, #16]
 800b156:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	697a      	ldr	r2, [r7, #20]
 800b15c:	621a      	str	r2, [r3, #32]
}
 800b15e:	bf00      	nop
 800b160:	371c      	adds	r7, #28
 800b162:	46bd      	mov	sp, r7
 800b164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b168:	4770      	bx	lr

0800b16a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b16a:	b480      	push	{r7}
 800b16c:	b087      	sub	sp, #28
 800b16e:	af00      	add	r7, sp, #0
 800b170:	60f8      	str	r0, [r7, #12]
 800b172:	60b9      	str	r1, [r7, #8]
 800b174:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	6a1b      	ldr	r3, [r3, #32]
 800b17a:	f023 0210 	bic.w	r2, r3, #16
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	699b      	ldr	r3, [r3, #24]
 800b186:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	6a1b      	ldr	r3, [r3, #32]
 800b18c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b18e:	697b      	ldr	r3, [r7, #20]
 800b190:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b194:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	031b      	lsls	r3, r3, #12
 800b19a:	697a      	ldr	r2, [r7, #20]
 800b19c:	4313      	orrs	r3, r2
 800b19e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b1a0:	693b      	ldr	r3, [r7, #16]
 800b1a2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b1a6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b1a8:	68bb      	ldr	r3, [r7, #8]
 800b1aa:	011b      	lsls	r3, r3, #4
 800b1ac:	693a      	ldr	r2, [r7, #16]
 800b1ae:	4313      	orrs	r3, r2
 800b1b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	697a      	ldr	r2, [r7, #20]
 800b1b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	693a      	ldr	r2, [r7, #16]
 800b1bc:	621a      	str	r2, [r3, #32]
}
 800b1be:	bf00      	nop
 800b1c0:	371c      	adds	r7, #28
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c8:	4770      	bx	lr
	...

0800b1cc <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b1cc:	b480      	push	{r7}
 800b1ce:	b085      	sub	sp, #20
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	6078      	str	r0, [r7, #4]
 800b1d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	689b      	ldr	r3, [r3, #8]
 800b1da:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b1dc:	68fa      	ldr	r2, [r7, #12]
 800b1de:	4b09      	ldr	r3, [pc, #36]	; (800b204 <TIM_ITRx_SetConfig+0x38>)
 800b1e0:	4013      	ands	r3, r2
 800b1e2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b1e4:	683a      	ldr	r2, [r7, #0]
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	4313      	orrs	r3, r2
 800b1ea:	f043 0307 	orr.w	r3, r3, #7
 800b1ee:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	68fa      	ldr	r2, [r7, #12]
 800b1f4:	609a      	str	r2, [r3, #8]
}
 800b1f6:	bf00      	nop
 800b1f8:	3714      	adds	r7, #20
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b200:	4770      	bx	lr
 800b202:	bf00      	nop
 800b204:	ffcfff8f 	.word	0xffcfff8f

0800b208 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b208:	b480      	push	{r7}
 800b20a:	b087      	sub	sp, #28
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	60f8      	str	r0, [r7, #12]
 800b210:	60b9      	str	r1, [r7, #8]
 800b212:	607a      	str	r2, [r7, #4]
 800b214:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	689b      	ldr	r3, [r3, #8]
 800b21a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b21c:	697b      	ldr	r3, [r7, #20]
 800b21e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b222:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b224:	683b      	ldr	r3, [r7, #0]
 800b226:	021a      	lsls	r2, r3, #8
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	431a      	orrs	r2, r3
 800b22c:	68bb      	ldr	r3, [r7, #8]
 800b22e:	4313      	orrs	r3, r2
 800b230:	697a      	ldr	r2, [r7, #20]
 800b232:	4313      	orrs	r3, r2
 800b234:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	697a      	ldr	r2, [r7, #20]
 800b23a:	609a      	str	r2, [r3, #8]
}
 800b23c:	bf00      	nop
 800b23e:	371c      	adds	r7, #28
 800b240:	46bd      	mov	sp, r7
 800b242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b246:	4770      	bx	lr

0800b248 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b248:	b480      	push	{r7}
 800b24a:	b085      	sub	sp, #20
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
 800b250:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b258:	2b01      	cmp	r3, #1
 800b25a:	d101      	bne.n	800b260 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b25c:	2302      	movs	r3, #2
 800b25e:	e068      	b.n	800b332 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	2201      	movs	r2, #1
 800b264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	2202      	movs	r2, #2
 800b26c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	685b      	ldr	r3, [r3, #4]
 800b276:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	689b      	ldr	r3, [r3, #8]
 800b27e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	4a2e      	ldr	r2, [pc, #184]	; (800b340 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800b286:	4293      	cmp	r3, r2
 800b288:	d004      	beq.n	800b294 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	4a2d      	ldr	r2, [pc, #180]	; (800b344 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800b290:	4293      	cmp	r3, r2
 800b292:	d108      	bne.n	800b2a6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b29a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b29c:	683b      	ldr	r3, [r7, #0]
 800b29e:	685b      	ldr	r3, [r3, #4]
 800b2a0:	68fa      	ldr	r2, [r7, #12]
 800b2a2:	4313      	orrs	r3, r2
 800b2a4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b2ac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b2ae:	683b      	ldr	r3, [r7, #0]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	68fa      	ldr	r2, [r7, #12]
 800b2b4:	4313      	orrs	r3, r2
 800b2b6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	68fa      	ldr	r2, [r7, #12]
 800b2be:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	4a1e      	ldr	r2, [pc, #120]	; (800b340 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800b2c6:	4293      	cmp	r3, r2
 800b2c8:	d01d      	beq.n	800b306 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b2d2:	d018      	beq.n	800b306 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	4a1b      	ldr	r2, [pc, #108]	; (800b348 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b2da:	4293      	cmp	r3, r2
 800b2dc:	d013      	beq.n	800b306 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	4a1a      	ldr	r2, [pc, #104]	; (800b34c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b2e4:	4293      	cmp	r3, r2
 800b2e6:	d00e      	beq.n	800b306 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	4a18      	ldr	r2, [pc, #96]	; (800b350 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b2ee:	4293      	cmp	r3, r2
 800b2f0:	d009      	beq.n	800b306 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	4a13      	ldr	r2, [pc, #76]	; (800b344 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800b2f8:	4293      	cmp	r3, r2
 800b2fa:	d004      	beq.n	800b306 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	4a14      	ldr	r2, [pc, #80]	; (800b354 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b302:	4293      	cmp	r3, r2
 800b304:	d10c      	bne.n	800b320 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b306:	68bb      	ldr	r3, [r7, #8]
 800b308:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b30c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b30e:	683b      	ldr	r3, [r7, #0]
 800b310:	689b      	ldr	r3, [r3, #8]
 800b312:	68ba      	ldr	r2, [r7, #8]
 800b314:	4313      	orrs	r3, r2
 800b316:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	68ba      	ldr	r2, [r7, #8]
 800b31e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	2201      	movs	r2, #1
 800b324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	2200      	movs	r2, #0
 800b32c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b330:	2300      	movs	r3, #0
}
 800b332:	4618      	mov	r0, r3
 800b334:	3714      	adds	r7, #20
 800b336:	46bd      	mov	sp, r7
 800b338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33c:	4770      	bx	lr
 800b33e:	bf00      	nop
 800b340:	40010000 	.word	0x40010000
 800b344:	40010400 	.word	0x40010400
 800b348:	40000400 	.word	0x40000400
 800b34c:	40000800 	.word	0x40000800
 800b350:	40000c00 	.word	0x40000c00
 800b354:	40001800 	.word	0x40001800

0800b358 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b358:	b480      	push	{r7}
 800b35a:	b085      	sub	sp, #20
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
 800b360:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b362:	2300      	movs	r3, #0
 800b364:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b36c:	2b01      	cmp	r3, #1
 800b36e:	d101      	bne.n	800b374 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b370:	2302      	movs	r3, #2
 800b372:	e065      	b.n	800b440 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	2201      	movs	r2, #1
 800b378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b382:	683b      	ldr	r3, [r7, #0]
 800b384:	68db      	ldr	r3, [r3, #12]
 800b386:	4313      	orrs	r3, r2
 800b388:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b390:	683b      	ldr	r3, [r7, #0]
 800b392:	689b      	ldr	r3, [r3, #8]
 800b394:	4313      	orrs	r3, r2
 800b396:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b39e:	683b      	ldr	r3, [r7, #0]
 800b3a0:	685b      	ldr	r3, [r3, #4]
 800b3a2:	4313      	orrs	r3, r2
 800b3a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b3ac:	683b      	ldr	r3, [r7, #0]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	4313      	orrs	r3, r2
 800b3b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b3ba:	683b      	ldr	r3, [r7, #0]
 800b3bc:	691b      	ldr	r3, [r3, #16]
 800b3be:	4313      	orrs	r3, r2
 800b3c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b3c8:	683b      	ldr	r3, [r7, #0]
 800b3ca:	695b      	ldr	r3, [r3, #20]
 800b3cc:	4313      	orrs	r3, r2
 800b3ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b3d6:	683b      	ldr	r3, [r7, #0]
 800b3d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3da:	4313      	orrs	r3, r2
 800b3dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b3e4:	683b      	ldr	r3, [r7, #0]
 800b3e6:	699b      	ldr	r3, [r3, #24]
 800b3e8:	041b      	lsls	r3, r3, #16
 800b3ea:	4313      	orrs	r3, r2
 800b3ec:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	4a16      	ldr	r2, [pc, #88]	; (800b44c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800b3f4:	4293      	cmp	r3, r2
 800b3f6:	d004      	beq.n	800b402 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	4a14      	ldr	r2, [pc, #80]	; (800b450 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800b3fe:	4293      	cmp	r3, r2
 800b400:	d115      	bne.n	800b42e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b408:	683b      	ldr	r3, [r7, #0]
 800b40a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b40c:	051b      	lsls	r3, r3, #20
 800b40e:	4313      	orrs	r3, r2
 800b410:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b418:	683b      	ldr	r3, [r7, #0]
 800b41a:	69db      	ldr	r3, [r3, #28]
 800b41c:	4313      	orrs	r3, r2
 800b41e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b426:	683b      	ldr	r3, [r7, #0]
 800b428:	6a1b      	ldr	r3, [r3, #32]
 800b42a:	4313      	orrs	r3, r2
 800b42c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	68fa      	ldr	r2, [r7, #12]
 800b434:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	2200      	movs	r2, #0
 800b43a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b43e:	2300      	movs	r3, #0
}
 800b440:	4618      	mov	r0, r3
 800b442:	3714      	adds	r7, #20
 800b444:	46bd      	mov	sp, r7
 800b446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44a:	4770      	bx	lr
 800b44c:	40010000 	.word	0x40010000
 800b450:	40010400 	.word	0x40010400

0800b454 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b454:	b580      	push	{r7, lr}
 800b456:	b082      	sub	sp, #8
 800b458:	af00      	add	r7, sp, #0
 800b45a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d101      	bne.n	800b466 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b462:	2301      	movs	r3, #1
 800b464:	e042      	b.n	800b4ec <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d106      	bne.n	800b47e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	2200      	movs	r2, #0
 800b474:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b478:	6878      	ldr	r0, [r7, #4]
 800b47a:	f7f6 feb5 	bl	80021e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	2224      	movs	r2, #36	; 0x24
 800b482:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	681a      	ldr	r2, [r3, #0]
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	f022 0201 	bic.w	r2, r2, #1
 800b494:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b496:	6878      	ldr	r0, [r7, #4]
 800b498:	f000 f82c 	bl	800b4f4 <UART_SetConfig>
 800b49c:	4603      	mov	r3, r0
 800b49e:	2b01      	cmp	r3, #1
 800b4a0:	d101      	bne.n	800b4a6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b4a2:	2301      	movs	r3, #1
 800b4a4:	e022      	b.n	800b4ec <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d002      	beq.n	800b4b4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b4ae:	6878      	ldr	r0, [r7, #4]
 800b4b0:	f000 fd80 	bl	800bfb4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	685a      	ldr	r2, [r3, #4]
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b4c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	689a      	ldr	r2, [r3, #8]
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b4d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	681a      	ldr	r2, [r3, #0]
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	f042 0201 	orr.w	r2, r2, #1
 800b4e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b4e4:	6878      	ldr	r0, [r7, #4]
 800b4e6:	f000 fe07 	bl	800c0f8 <UART_CheckIdleState>
 800b4ea:	4603      	mov	r3, r0
}
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	3708      	adds	r7, #8
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	bd80      	pop	{r7, pc}

0800b4f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b4f4:	b5b0      	push	{r4, r5, r7, lr}
 800b4f6:	b08e      	sub	sp, #56	; 0x38
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	689a      	ldr	r2, [r3, #8]
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	691b      	ldr	r3, [r3, #16]
 800b50a:	431a      	orrs	r2, r3
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	695b      	ldr	r3, [r3, #20]
 800b510:	431a      	orrs	r2, r3
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	69db      	ldr	r3, [r3, #28]
 800b516:	4313      	orrs	r3, r2
 800b518:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	681a      	ldr	r2, [r3, #0]
 800b520:	4bbf      	ldr	r3, [pc, #764]	; (800b820 <UART_SetConfig+0x32c>)
 800b522:	4013      	ands	r3, r2
 800b524:	687a      	ldr	r2, [r7, #4]
 800b526:	6812      	ldr	r2, [r2, #0]
 800b528:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b52a:	430b      	orrs	r3, r1
 800b52c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	685b      	ldr	r3, [r3, #4]
 800b534:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	68da      	ldr	r2, [r3, #12]
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	430a      	orrs	r2, r1
 800b542:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	699b      	ldr	r3, [r3, #24]
 800b548:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	4ab5      	ldr	r2, [pc, #724]	; (800b824 <UART_SetConfig+0x330>)
 800b550:	4293      	cmp	r3, r2
 800b552:	d004      	beq.n	800b55e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	6a1b      	ldr	r3, [r3, #32]
 800b558:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b55a:	4313      	orrs	r3, r2
 800b55c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	689a      	ldr	r2, [r3, #8]
 800b564:	4bb0      	ldr	r3, [pc, #704]	; (800b828 <UART_SetConfig+0x334>)
 800b566:	4013      	ands	r3, r2
 800b568:	687a      	ldr	r2, [r7, #4]
 800b56a:	6812      	ldr	r2, [r2, #0]
 800b56c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b56e:	430b      	orrs	r3, r1
 800b570:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b578:	f023 010f 	bic.w	r1, r3, #15
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	430a      	orrs	r2, r1
 800b586:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	4aa7      	ldr	r2, [pc, #668]	; (800b82c <UART_SetConfig+0x338>)
 800b58e:	4293      	cmp	r3, r2
 800b590:	d176      	bne.n	800b680 <UART_SetConfig+0x18c>
 800b592:	4ba7      	ldr	r3, [pc, #668]	; (800b830 <UART_SetConfig+0x33c>)
 800b594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b596:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b59a:	2b28      	cmp	r3, #40	; 0x28
 800b59c:	d86c      	bhi.n	800b678 <UART_SetConfig+0x184>
 800b59e:	a201      	add	r2, pc, #4	; (adr r2, 800b5a4 <UART_SetConfig+0xb0>)
 800b5a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5a4:	0800b649 	.word	0x0800b649
 800b5a8:	0800b679 	.word	0x0800b679
 800b5ac:	0800b679 	.word	0x0800b679
 800b5b0:	0800b679 	.word	0x0800b679
 800b5b4:	0800b679 	.word	0x0800b679
 800b5b8:	0800b679 	.word	0x0800b679
 800b5bc:	0800b679 	.word	0x0800b679
 800b5c0:	0800b679 	.word	0x0800b679
 800b5c4:	0800b651 	.word	0x0800b651
 800b5c8:	0800b679 	.word	0x0800b679
 800b5cc:	0800b679 	.word	0x0800b679
 800b5d0:	0800b679 	.word	0x0800b679
 800b5d4:	0800b679 	.word	0x0800b679
 800b5d8:	0800b679 	.word	0x0800b679
 800b5dc:	0800b679 	.word	0x0800b679
 800b5e0:	0800b679 	.word	0x0800b679
 800b5e4:	0800b659 	.word	0x0800b659
 800b5e8:	0800b679 	.word	0x0800b679
 800b5ec:	0800b679 	.word	0x0800b679
 800b5f0:	0800b679 	.word	0x0800b679
 800b5f4:	0800b679 	.word	0x0800b679
 800b5f8:	0800b679 	.word	0x0800b679
 800b5fc:	0800b679 	.word	0x0800b679
 800b600:	0800b679 	.word	0x0800b679
 800b604:	0800b661 	.word	0x0800b661
 800b608:	0800b679 	.word	0x0800b679
 800b60c:	0800b679 	.word	0x0800b679
 800b610:	0800b679 	.word	0x0800b679
 800b614:	0800b679 	.word	0x0800b679
 800b618:	0800b679 	.word	0x0800b679
 800b61c:	0800b679 	.word	0x0800b679
 800b620:	0800b679 	.word	0x0800b679
 800b624:	0800b669 	.word	0x0800b669
 800b628:	0800b679 	.word	0x0800b679
 800b62c:	0800b679 	.word	0x0800b679
 800b630:	0800b679 	.word	0x0800b679
 800b634:	0800b679 	.word	0x0800b679
 800b638:	0800b679 	.word	0x0800b679
 800b63c:	0800b679 	.word	0x0800b679
 800b640:	0800b679 	.word	0x0800b679
 800b644:	0800b671 	.word	0x0800b671
 800b648:	2301      	movs	r3, #1
 800b64a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b64e:	e222      	b.n	800ba96 <UART_SetConfig+0x5a2>
 800b650:	2304      	movs	r3, #4
 800b652:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b656:	e21e      	b.n	800ba96 <UART_SetConfig+0x5a2>
 800b658:	2308      	movs	r3, #8
 800b65a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b65e:	e21a      	b.n	800ba96 <UART_SetConfig+0x5a2>
 800b660:	2310      	movs	r3, #16
 800b662:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b666:	e216      	b.n	800ba96 <UART_SetConfig+0x5a2>
 800b668:	2320      	movs	r3, #32
 800b66a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b66e:	e212      	b.n	800ba96 <UART_SetConfig+0x5a2>
 800b670:	2340      	movs	r3, #64	; 0x40
 800b672:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b676:	e20e      	b.n	800ba96 <UART_SetConfig+0x5a2>
 800b678:	2380      	movs	r3, #128	; 0x80
 800b67a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b67e:	e20a      	b.n	800ba96 <UART_SetConfig+0x5a2>
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	4a6b      	ldr	r2, [pc, #428]	; (800b834 <UART_SetConfig+0x340>)
 800b686:	4293      	cmp	r3, r2
 800b688:	d130      	bne.n	800b6ec <UART_SetConfig+0x1f8>
 800b68a:	4b69      	ldr	r3, [pc, #420]	; (800b830 <UART_SetConfig+0x33c>)
 800b68c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b68e:	f003 0307 	and.w	r3, r3, #7
 800b692:	2b05      	cmp	r3, #5
 800b694:	d826      	bhi.n	800b6e4 <UART_SetConfig+0x1f0>
 800b696:	a201      	add	r2, pc, #4	; (adr r2, 800b69c <UART_SetConfig+0x1a8>)
 800b698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b69c:	0800b6b5 	.word	0x0800b6b5
 800b6a0:	0800b6bd 	.word	0x0800b6bd
 800b6a4:	0800b6c5 	.word	0x0800b6c5
 800b6a8:	0800b6cd 	.word	0x0800b6cd
 800b6ac:	0800b6d5 	.word	0x0800b6d5
 800b6b0:	0800b6dd 	.word	0x0800b6dd
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b6ba:	e1ec      	b.n	800ba96 <UART_SetConfig+0x5a2>
 800b6bc:	2304      	movs	r3, #4
 800b6be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b6c2:	e1e8      	b.n	800ba96 <UART_SetConfig+0x5a2>
 800b6c4:	2308      	movs	r3, #8
 800b6c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b6ca:	e1e4      	b.n	800ba96 <UART_SetConfig+0x5a2>
 800b6cc:	2310      	movs	r3, #16
 800b6ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b6d2:	e1e0      	b.n	800ba96 <UART_SetConfig+0x5a2>
 800b6d4:	2320      	movs	r3, #32
 800b6d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b6da:	e1dc      	b.n	800ba96 <UART_SetConfig+0x5a2>
 800b6dc:	2340      	movs	r3, #64	; 0x40
 800b6de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b6e2:	e1d8      	b.n	800ba96 <UART_SetConfig+0x5a2>
 800b6e4:	2380      	movs	r3, #128	; 0x80
 800b6e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b6ea:	e1d4      	b.n	800ba96 <UART_SetConfig+0x5a2>
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	4a51      	ldr	r2, [pc, #324]	; (800b838 <UART_SetConfig+0x344>)
 800b6f2:	4293      	cmp	r3, r2
 800b6f4:	d130      	bne.n	800b758 <UART_SetConfig+0x264>
 800b6f6:	4b4e      	ldr	r3, [pc, #312]	; (800b830 <UART_SetConfig+0x33c>)
 800b6f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6fa:	f003 0307 	and.w	r3, r3, #7
 800b6fe:	2b05      	cmp	r3, #5
 800b700:	d826      	bhi.n	800b750 <UART_SetConfig+0x25c>
 800b702:	a201      	add	r2, pc, #4	; (adr r2, 800b708 <UART_SetConfig+0x214>)
 800b704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b708:	0800b721 	.word	0x0800b721
 800b70c:	0800b729 	.word	0x0800b729
 800b710:	0800b731 	.word	0x0800b731
 800b714:	0800b739 	.word	0x0800b739
 800b718:	0800b741 	.word	0x0800b741
 800b71c:	0800b749 	.word	0x0800b749
 800b720:	2300      	movs	r3, #0
 800b722:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b726:	e1b6      	b.n	800ba96 <UART_SetConfig+0x5a2>
 800b728:	2304      	movs	r3, #4
 800b72a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b72e:	e1b2      	b.n	800ba96 <UART_SetConfig+0x5a2>
 800b730:	2308      	movs	r3, #8
 800b732:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b736:	e1ae      	b.n	800ba96 <UART_SetConfig+0x5a2>
 800b738:	2310      	movs	r3, #16
 800b73a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b73e:	e1aa      	b.n	800ba96 <UART_SetConfig+0x5a2>
 800b740:	2320      	movs	r3, #32
 800b742:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b746:	e1a6      	b.n	800ba96 <UART_SetConfig+0x5a2>
 800b748:	2340      	movs	r3, #64	; 0x40
 800b74a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b74e:	e1a2      	b.n	800ba96 <UART_SetConfig+0x5a2>
 800b750:	2380      	movs	r3, #128	; 0x80
 800b752:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b756:	e19e      	b.n	800ba96 <UART_SetConfig+0x5a2>
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	4a37      	ldr	r2, [pc, #220]	; (800b83c <UART_SetConfig+0x348>)
 800b75e:	4293      	cmp	r3, r2
 800b760:	d130      	bne.n	800b7c4 <UART_SetConfig+0x2d0>
 800b762:	4b33      	ldr	r3, [pc, #204]	; (800b830 <UART_SetConfig+0x33c>)
 800b764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b766:	f003 0307 	and.w	r3, r3, #7
 800b76a:	2b05      	cmp	r3, #5
 800b76c:	d826      	bhi.n	800b7bc <UART_SetConfig+0x2c8>
 800b76e:	a201      	add	r2, pc, #4	; (adr r2, 800b774 <UART_SetConfig+0x280>)
 800b770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b774:	0800b78d 	.word	0x0800b78d
 800b778:	0800b795 	.word	0x0800b795
 800b77c:	0800b79d 	.word	0x0800b79d
 800b780:	0800b7a5 	.word	0x0800b7a5
 800b784:	0800b7ad 	.word	0x0800b7ad
 800b788:	0800b7b5 	.word	0x0800b7b5
 800b78c:	2300      	movs	r3, #0
 800b78e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b792:	e180      	b.n	800ba96 <UART_SetConfig+0x5a2>
 800b794:	2304      	movs	r3, #4
 800b796:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b79a:	e17c      	b.n	800ba96 <UART_SetConfig+0x5a2>
 800b79c:	2308      	movs	r3, #8
 800b79e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b7a2:	e178      	b.n	800ba96 <UART_SetConfig+0x5a2>
 800b7a4:	2310      	movs	r3, #16
 800b7a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b7aa:	e174      	b.n	800ba96 <UART_SetConfig+0x5a2>
 800b7ac:	2320      	movs	r3, #32
 800b7ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b7b2:	e170      	b.n	800ba96 <UART_SetConfig+0x5a2>
 800b7b4:	2340      	movs	r3, #64	; 0x40
 800b7b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b7ba:	e16c      	b.n	800ba96 <UART_SetConfig+0x5a2>
 800b7bc:	2380      	movs	r3, #128	; 0x80
 800b7be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b7c2:	e168      	b.n	800ba96 <UART_SetConfig+0x5a2>
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	4a1d      	ldr	r2, [pc, #116]	; (800b840 <UART_SetConfig+0x34c>)
 800b7ca:	4293      	cmp	r3, r2
 800b7cc:	d142      	bne.n	800b854 <UART_SetConfig+0x360>
 800b7ce:	4b18      	ldr	r3, [pc, #96]	; (800b830 <UART_SetConfig+0x33c>)
 800b7d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7d2:	f003 0307 	and.w	r3, r3, #7
 800b7d6:	2b05      	cmp	r3, #5
 800b7d8:	d838      	bhi.n	800b84c <UART_SetConfig+0x358>
 800b7da:	a201      	add	r2, pc, #4	; (adr r2, 800b7e0 <UART_SetConfig+0x2ec>)
 800b7dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7e0:	0800b7f9 	.word	0x0800b7f9
 800b7e4:	0800b801 	.word	0x0800b801
 800b7e8:	0800b809 	.word	0x0800b809
 800b7ec:	0800b811 	.word	0x0800b811
 800b7f0:	0800b819 	.word	0x0800b819
 800b7f4:	0800b845 	.word	0x0800b845
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b7fe:	e14a      	b.n	800ba96 <UART_SetConfig+0x5a2>
 800b800:	2304      	movs	r3, #4
 800b802:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b806:	e146      	b.n	800ba96 <UART_SetConfig+0x5a2>
 800b808:	2308      	movs	r3, #8
 800b80a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b80e:	e142      	b.n	800ba96 <UART_SetConfig+0x5a2>
 800b810:	2310      	movs	r3, #16
 800b812:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b816:	e13e      	b.n	800ba96 <UART_SetConfig+0x5a2>
 800b818:	2320      	movs	r3, #32
 800b81a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b81e:	e13a      	b.n	800ba96 <UART_SetConfig+0x5a2>
 800b820:	cfff69f3 	.word	0xcfff69f3
 800b824:	58000c00 	.word	0x58000c00
 800b828:	11fff4ff 	.word	0x11fff4ff
 800b82c:	40011000 	.word	0x40011000
 800b830:	58024400 	.word	0x58024400
 800b834:	40004400 	.word	0x40004400
 800b838:	40004800 	.word	0x40004800
 800b83c:	40004c00 	.word	0x40004c00
 800b840:	40005000 	.word	0x40005000
 800b844:	2340      	movs	r3, #64	; 0x40
 800b846:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b84a:	e124      	b.n	800ba96 <UART_SetConfig+0x5a2>
 800b84c:	2380      	movs	r3, #128	; 0x80
 800b84e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b852:	e120      	b.n	800ba96 <UART_SetConfig+0x5a2>
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	4acc      	ldr	r2, [pc, #816]	; (800bb8c <UART_SetConfig+0x698>)
 800b85a:	4293      	cmp	r3, r2
 800b85c:	d176      	bne.n	800b94c <UART_SetConfig+0x458>
 800b85e:	4bcc      	ldr	r3, [pc, #816]	; (800bb90 <UART_SetConfig+0x69c>)
 800b860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b862:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b866:	2b28      	cmp	r3, #40	; 0x28
 800b868:	d86c      	bhi.n	800b944 <UART_SetConfig+0x450>
 800b86a:	a201      	add	r2, pc, #4	; (adr r2, 800b870 <UART_SetConfig+0x37c>)
 800b86c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b870:	0800b915 	.word	0x0800b915
 800b874:	0800b945 	.word	0x0800b945
 800b878:	0800b945 	.word	0x0800b945
 800b87c:	0800b945 	.word	0x0800b945
 800b880:	0800b945 	.word	0x0800b945
 800b884:	0800b945 	.word	0x0800b945
 800b888:	0800b945 	.word	0x0800b945
 800b88c:	0800b945 	.word	0x0800b945
 800b890:	0800b91d 	.word	0x0800b91d
 800b894:	0800b945 	.word	0x0800b945
 800b898:	0800b945 	.word	0x0800b945
 800b89c:	0800b945 	.word	0x0800b945
 800b8a0:	0800b945 	.word	0x0800b945
 800b8a4:	0800b945 	.word	0x0800b945
 800b8a8:	0800b945 	.word	0x0800b945
 800b8ac:	0800b945 	.word	0x0800b945
 800b8b0:	0800b925 	.word	0x0800b925
 800b8b4:	0800b945 	.word	0x0800b945
 800b8b8:	0800b945 	.word	0x0800b945
 800b8bc:	0800b945 	.word	0x0800b945
 800b8c0:	0800b945 	.word	0x0800b945
 800b8c4:	0800b945 	.word	0x0800b945
 800b8c8:	0800b945 	.word	0x0800b945
 800b8cc:	0800b945 	.word	0x0800b945
 800b8d0:	0800b92d 	.word	0x0800b92d
 800b8d4:	0800b945 	.word	0x0800b945
 800b8d8:	0800b945 	.word	0x0800b945
 800b8dc:	0800b945 	.word	0x0800b945
 800b8e0:	0800b945 	.word	0x0800b945
 800b8e4:	0800b945 	.word	0x0800b945
 800b8e8:	0800b945 	.word	0x0800b945
 800b8ec:	0800b945 	.word	0x0800b945
 800b8f0:	0800b935 	.word	0x0800b935
 800b8f4:	0800b945 	.word	0x0800b945
 800b8f8:	0800b945 	.word	0x0800b945
 800b8fc:	0800b945 	.word	0x0800b945
 800b900:	0800b945 	.word	0x0800b945
 800b904:	0800b945 	.word	0x0800b945
 800b908:	0800b945 	.word	0x0800b945
 800b90c:	0800b945 	.word	0x0800b945
 800b910:	0800b93d 	.word	0x0800b93d
 800b914:	2301      	movs	r3, #1
 800b916:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b91a:	e0bc      	b.n	800ba96 <UART_SetConfig+0x5a2>
 800b91c:	2304      	movs	r3, #4
 800b91e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b922:	e0b8      	b.n	800ba96 <UART_SetConfig+0x5a2>
 800b924:	2308      	movs	r3, #8
 800b926:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b92a:	e0b4      	b.n	800ba96 <UART_SetConfig+0x5a2>
 800b92c:	2310      	movs	r3, #16
 800b92e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b932:	e0b0      	b.n	800ba96 <UART_SetConfig+0x5a2>
 800b934:	2320      	movs	r3, #32
 800b936:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b93a:	e0ac      	b.n	800ba96 <UART_SetConfig+0x5a2>
 800b93c:	2340      	movs	r3, #64	; 0x40
 800b93e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b942:	e0a8      	b.n	800ba96 <UART_SetConfig+0x5a2>
 800b944:	2380      	movs	r3, #128	; 0x80
 800b946:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b94a:	e0a4      	b.n	800ba96 <UART_SetConfig+0x5a2>
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	4a90      	ldr	r2, [pc, #576]	; (800bb94 <UART_SetConfig+0x6a0>)
 800b952:	4293      	cmp	r3, r2
 800b954:	d130      	bne.n	800b9b8 <UART_SetConfig+0x4c4>
 800b956:	4b8e      	ldr	r3, [pc, #568]	; (800bb90 <UART_SetConfig+0x69c>)
 800b958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b95a:	f003 0307 	and.w	r3, r3, #7
 800b95e:	2b05      	cmp	r3, #5
 800b960:	d826      	bhi.n	800b9b0 <UART_SetConfig+0x4bc>
 800b962:	a201      	add	r2, pc, #4	; (adr r2, 800b968 <UART_SetConfig+0x474>)
 800b964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b968:	0800b981 	.word	0x0800b981
 800b96c:	0800b989 	.word	0x0800b989
 800b970:	0800b991 	.word	0x0800b991
 800b974:	0800b999 	.word	0x0800b999
 800b978:	0800b9a1 	.word	0x0800b9a1
 800b97c:	0800b9a9 	.word	0x0800b9a9
 800b980:	2300      	movs	r3, #0
 800b982:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b986:	e086      	b.n	800ba96 <UART_SetConfig+0x5a2>
 800b988:	2304      	movs	r3, #4
 800b98a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b98e:	e082      	b.n	800ba96 <UART_SetConfig+0x5a2>
 800b990:	2308      	movs	r3, #8
 800b992:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b996:	e07e      	b.n	800ba96 <UART_SetConfig+0x5a2>
 800b998:	2310      	movs	r3, #16
 800b99a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b99e:	e07a      	b.n	800ba96 <UART_SetConfig+0x5a2>
 800b9a0:	2320      	movs	r3, #32
 800b9a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b9a6:	e076      	b.n	800ba96 <UART_SetConfig+0x5a2>
 800b9a8:	2340      	movs	r3, #64	; 0x40
 800b9aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b9ae:	e072      	b.n	800ba96 <UART_SetConfig+0x5a2>
 800b9b0:	2380      	movs	r3, #128	; 0x80
 800b9b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b9b6:	e06e      	b.n	800ba96 <UART_SetConfig+0x5a2>
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	4a76      	ldr	r2, [pc, #472]	; (800bb98 <UART_SetConfig+0x6a4>)
 800b9be:	4293      	cmp	r3, r2
 800b9c0:	d130      	bne.n	800ba24 <UART_SetConfig+0x530>
 800b9c2:	4b73      	ldr	r3, [pc, #460]	; (800bb90 <UART_SetConfig+0x69c>)
 800b9c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9c6:	f003 0307 	and.w	r3, r3, #7
 800b9ca:	2b05      	cmp	r3, #5
 800b9cc:	d826      	bhi.n	800ba1c <UART_SetConfig+0x528>
 800b9ce:	a201      	add	r2, pc, #4	; (adr r2, 800b9d4 <UART_SetConfig+0x4e0>)
 800b9d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9d4:	0800b9ed 	.word	0x0800b9ed
 800b9d8:	0800b9f5 	.word	0x0800b9f5
 800b9dc:	0800b9fd 	.word	0x0800b9fd
 800b9e0:	0800ba05 	.word	0x0800ba05
 800b9e4:	0800ba0d 	.word	0x0800ba0d
 800b9e8:	0800ba15 	.word	0x0800ba15
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b9f2:	e050      	b.n	800ba96 <UART_SetConfig+0x5a2>
 800b9f4:	2304      	movs	r3, #4
 800b9f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b9fa:	e04c      	b.n	800ba96 <UART_SetConfig+0x5a2>
 800b9fc:	2308      	movs	r3, #8
 800b9fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba02:	e048      	b.n	800ba96 <UART_SetConfig+0x5a2>
 800ba04:	2310      	movs	r3, #16
 800ba06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba0a:	e044      	b.n	800ba96 <UART_SetConfig+0x5a2>
 800ba0c:	2320      	movs	r3, #32
 800ba0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba12:	e040      	b.n	800ba96 <UART_SetConfig+0x5a2>
 800ba14:	2340      	movs	r3, #64	; 0x40
 800ba16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba1a:	e03c      	b.n	800ba96 <UART_SetConfig+0x5a2>
 800ba1c:	2380      	movs	r3, #128	; 0x80
 800ba1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba22:	e038      	b.n	800ba96 <UART_SetConfig+0x5a2>
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	4a5c      	ldr	r2, [pc, #368]	; (800bb9c <UART_SetConfig+0x6a8>)
 800ba2a:	4293      	cmp	r3, r2
 800ba2c:	d130      	bne.n	800ba90 <UART_SetConfig+0x59c>
 800ba2e:	4b58      	ldr	r3, [pc, #352]	; (800bb90 <UART_SetConfig+0x69c>)
 800ba30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba32:	f003 0307 	and.w	r3, r3, #7
 800ba36:	2b05      	cmp	r3, #5
 800ba38:	d826      	bhi.n	800ba88 <UART_SetConfig+0x594>
 800ba3a:	a201      	add	r2, pc, #4	; (adr r2, 800ba40 <UART_SetConfig+0x54c>)
 800ba3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba40:	0800ba59 	.word	0x0800ba59
 800ba44:	0800ba61 	.word	0x0800ba61
 800ba48:	0800ba69 	.word	0x0800ba69
 800ba4c:	0800ba71 	.word	0x0800ba71
 800ba50:	0800ba79 	.word	0x0800ba79
 800ba54:	0800ba81 	.word	0x0800ba81
 800ba58:	2302      	movs	r3, #2
 800ba5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba5e:	e01a      	b.n	800ba96 <UART_SetConfig+0x5a2>
 800ba60:	2304      	movs	r3, #4
 800ba62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba66:	e016      	b.n	800ba96 <UART_SetConfig+0x5a2>
 800ba68:	2308      	movs	r3, #8
 800ba6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba6e:	e012      	b.n	800ba96 <UART_SetConfig+0x5a2>
 800ba70:	2310      	movs	r3, #16
 800ba72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba76:	e00e      	b.n	800ba96 <UART_SetConfig+0x5a2>
 800ba78:	2320      	movs	r3, #32
 800ba7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba7e:	e00a      	b.n	800ba96 <UART_SetConfig+0x5a2>
 800ba80:	2340      	movs	r3, #64	; 0x40
 800ba82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba86:	e006      	b.n	800ba96 <UART_SetConfig+0x5a2>
 800ba88:	2380      	movs	r3, #128	; 0x80
 800ba8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba8e:	e002      	b.n	800ba96 <UART_SetConfig+0x5a2>
 800ba90:	2380      	movs	r3, #128	; 0x80
 800ba92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	4a40      	ldr	r2, [pc, #256]	; (800bb9c <UART_SetConfig+0x6a8>)
 800ba9c:	4293      	cmp	r3, r2
 800ba9e:	f040 80ef 	bne.w	800bc80 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800baa2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800baa6:	2b20      	cmp	r3, #32
 800baa8:	dc46      	bgt.n	800bb38 <UART_SetConfig+0x644>
 800baaa:	2b02      	cmp	r3, #2
 800baac:	f2c0 8081 	blt.w	800bbb2 <UART_SetConfig+0x6be>
 800bab0:	3b02      	subs	r3, #2
 800bab2:	2b1e      	cmp	r3, #30
 800bab4:	d87d      	bhi.n	800bbb2 <UART_SetConfig+0x6be>
 800bab6:	a201      	add	r2, pc, #4	; (adr r2, 800babc <UART_SetConfig+0x5c8>)
 800bab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800babc:	0800bb3f 	.word	0x0800bb3f
 800bac0:	0800bbb3 	.word	0x0800bbb3
 800bac4:	0800bb47 	.word	0x0800bb47
 800bac8:	0800bbb3 	.word	0x0800bbb3
 800bacc:	0800bbb3 	.word	0x0800bbb3
 800bad0:	0800bbb3 	.word	0x0800bbb3
 800bad4:	0800bb57 	.word	0x0800bb57
 800bad8:	0800bbb3 	.word	0x0800bbb3
 800badc:	0800bbb3 	.word	0x0800bbb3
 800bae0:	0800bbb3 	.word	0x0800bbb3
 800bae4:	0800bbb3 	.word	0x0800bbb3
 800bae8:	0800bbb3 	.word	0x0800bbb3
 800baec:	0800bbb3 	.word	0x0800bbb3
 800baf0:	0800bbb3 	.word	0x0800bbb3
 800baf4:	0800bb67 	.word	0x0800bb67
 800baf8:	0800bbb3 	.word	0x0800bbb3
 800bafc:	0800bbb3 	.word	0x0800bbb3
 800bb00:	0800bbb3 	.word	0x0800bbb3
 800bb04:	0800bbb3 	.word	0x0800bbb3
 800bb08:	0800bbb3 	.word	0x0800bbb3
 800bb0c:	0800bbb3 	.word	0x0800bbb3
 800bb10:	0800bbb3 	.word	0x0800bbb3
 800bb14:	0800bbb3 	.word	0x0800bbb3
 800bb18:	0800bbb3 	.word	0x0800bbb3
 800bb1c:	0800bbb3 	.word	0x0800bbb3
 800bb20:	0800bbb3 	.word	0x0800bbb3
 800bb24:	0800bbb3 	.word	0x0800bbb3
 800bb28:	0800bbb3 	.word	0x0800bbb3
 800bb2c:	0800bbb3 	.word	0x0800bbb3
 800bb30:	0800bbb3 	.word	0x0800bbb3
 800bb34:	0800bba5 	.word	0x0800bba5
 800bb38:	2b40      	cmp	r3, #64	; 0x40
 800bb3a:	d036      	beq.n	800bbaa <UART_SetConfig+0x6b6>
 800bb3c:	e039      	b.n	800bbb2 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800bb3e:	f7fd fe39 	bl	80097b4 <HAL_RCCEx_GetD3PCLK1Freq>
 800bb42:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800bb44:	e03b      	b.n	800bbbe <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bb46:	f107 0314 	add.w	r3, r7, #20
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	f7fd fe48 	bl	80097e0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bb50:	69bb      	ldr	r3, [r7, #24]
 800bb52:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bb54:	e033      	b.n	800bbbe <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bb56:	f107 0308 	add.w	r3, r7, #8
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	f7fd ff94 	bl	8009a88 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bb64:	e02b      	b.n	800bbbe <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bb66:	4b0a      	ldr	r3, [pc, #40]	; (800bb90 <UART_SetConfig+0x69c>)
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	f003 0320 	and.w	r3, r3, #32
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d009      	beq.n	800bb86 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bb72:	4b07      	ldr	r3, [pc, #28]	; (800bb90 <UART_SetConfig+0x69c>)
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	08db      	lsrs	r3, r3, #3
 800bb78:	f003 0303 	and.w	r3, r3, #3
 800bb7c:	4a08      	ldr	r2, [pc, #32]	; (800bba0 <UART_SetConfig+0x6ac>)
 800bb7e:	fa22 f303 	lsr.w	r3, r2, r3
 800bb82:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bb84:	e01b      	b.n	800bbbe <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800bb86:	4b06      	ldr	r3, [pc, #24]	; (800bba0 <UART_SetConfig+0x6ac>)
 800bb88:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bb8a:	e018      	b.n	800bbbe <UART_SetConfig+0x6ca>
 800bb8c:	40011400 	.word	0x40011400
 800bb90:	58024400 	.word	0x58024400
 800bb94:	40007800 	.word	0x40007800
 800bb98:	40007c00 	.word	0x40007c00
 800bb9c:	58000c00 	.word	0x58000c00
 800bba0:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bba4:	4bc4      	ldr	r3, [pc, #784]	; (800beb8 <UART_SetConfig+0x9c4>)
 800bba6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bba8:	e009      	b.n	800bbbe <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bbaa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bbae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bbb0:	e005      	b.n	800bbbe <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800bbb6:	2301      	movs	r3, #1
 800bbb8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800bbbc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800bbbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	f000 81da 	beq.w	800bf7a <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbca:	4abc      	ldr	r2, [pc, #752]	; (800bebc <UART_SetConfig+0x9c8>)
 800bbcc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bbd0:	461a      	mov	r2, r3
 800bbd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbd4:	fbb3 f3f2 	udiv	r3, r3, r2
 800bbd8:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	685a      	ldr	r2, [r3, #4]
 800bbde:	4613      	mov	r3, r2
 800bbe0:	005b      	lsls	r3, r3, #1
 800bbe2:	4413      	add	r3, r2
 800bbe4:	6a3a      	ldr	r2, [r7, #32]
 800bbe6:	429a      	cmp	r2, r3
 800bbe8:	d305      	bcc.n	800bbf6 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	685b      	ldr	r3, [r3, #4]
 800bbee:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bbf0:	6a3a      	ldr	r2, [r7, #32]
 800bbf2:	429a      	cmp	r2, r3
 800bbf4:	d903      	bls.n	800bbfe <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800bbf6:	2301      	movs	r3, #1
 800bbf8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800bbfc:	e1bd      	b.n	800bf7a <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bbfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc00:	4618      	mov	r0, r3
 800bc02:	f04f 0100 	mov.w	r1, #0
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc0a:	4aac      	ldr	r2, [pc, #688]	; (800bebc <UART_SetConfig+0x9c8>)
 800bc0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bc10:	b29a      	uxth	r2, r3
 800bc12:	f04f 0300 	mov.w	r3, #0
 800bc16:	f7f4 fbbb 	bl	8000390 <__aeabi_uldivmod>
 800bc1a:	4602      	mov	r2, r0
 800bc1c:	460b      	mov	r3, r1
 800bc1e:	4610      	mov	r0, r2
 800bc20:	4619      	mov	r1, r3
 800bc22:	f04f 0200 	mov.w	r2, #0
 800bc26:	f04f 0300 	mov.w	r3, #0
 800bc2a:	020b      	lsls	r3, r1, #8
 800bc2c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800bc30:	0202      	lsls	r2, r0, #8
 800bc32:	6879      	ldr	r1, [r7, #4]
 800bc34:	6849      	ldr	r1, [r1, #4]
 800bc36:	0849      	lsrs	r1, r1, #1
 800bc38:	4608      	mov	r0, r1
 800bc3a:	f04f 0100 	mov.w	r1, #0
 800bc3e:	1814      	adds	r4, r2, r0
 800bc40:	eb43 0501 	adc.w	r5, r3, r1
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	685b      	ldr	r3, [r3, #4]
 800bc48:	461a      	mov	r2, r3
 800bc4a:	f04f 0300 	mov.w	r3, #0
 800bc4e:	4620      	mov	r0, r4
 800bc50:	4629      	mov	r1, r5
 800bc52:	f7f4 fb9d 	bl	8000390 <__aeabi_uldivmod>
 800bc56:	4602      	mov	r2, r0
 800bc58:	460b      	mov	r3, r1
 800bc5a:	4613      	mov	r3, r2
 800bc5c:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bc5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bc64:	d308      	bcc.n	800bc78 <UART_SetConfig+0x784>
 800bc66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bc6c:	d204      	bcs.n	800bc78 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bc74:	60da      	str	r2, [r3, #12]
 800bc76:	e180      	b.n	800bf7a <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800bc78:	2301      	movs	r3, #1
 800bc7a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800bc7e:	e17c      	b.n	800bf7a <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	69db      	ldr	r3, [r3, #28]
 800bc84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bc88:	f040 80bf 	bne.w	800be0a <UART_SetConfig+0x916>
  {
    switch (clocksource)
 800bc8c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800bc90:	2b20      	cmp	r3, #32
 800bc92:	dc49      	bgt.n	800bd28 <UART_SetConfig+0x834>
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	db7c      	blt.n	800bd92 <UART_SetConfig+0x89e>
 800bc98:	2b20      	cmp	r3, #32
 800bc9a:	d87a      	bhi.n	800bd92 <UART_SetConfig+0x89e>
 800bc9c:	a201      	add	r2, pc, #4	; (adr r2, 800bca4 <UART_SetConfig+0x7b0>)
 800bc9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bca2:	bf00      	nop
 800bca4:	0800bd2f 	.word	0x0800bd2f
 800bca8:	0800bd37 	.word	0x0800bd37
 800bcac:	0800bd93 	.word	0x0800bd93
 800bcb0:	0800bd93 	.word	0x0800bd93
 800bcb4:	0800bd3f 	.word	0x0800bd3f
 800bcb8:	0800bd93 	.word	0x0800bd93
 800bcbc:	0800bd93 	.word	0x0800bd93
 800bcc0:	0800bd93 	.word	0x0800bd93
 800bcc4:	0800bd4f 	.word	0x0800bd4f
 800bcc8:	0800bd93 	.word	0x0800bd93
 800bccc:	0800bd93 	.word	0x0800bd93
 800bcd0:	0800bd93 	.word	0x0800bd93
 800bcd4:	0800bd93 	.word	0x0800bd93
 800bcd8:	0800bd93 	.word	0x0800bd93
 800bcdc:	0800bd93 	.word	0x0800bd93
 800bce0:	0800bd93 	.word	0x0800bd93
 800bce4:	0800bd5f 	.word	0x0800bd5f
 800bce8:	0800bd93 	.word	0x0800bd93
 800bcec:	0800bd93 	.word	0x0800bd93
 800bcf0:	0800bd93 	.word	0x0800bd93
 800bcf4:	0800bd93 	.word	0x0800bd93
 800bcf8:	0800bd93 	.word	0x0800bd93
 800bcfc:	0800bd93 	.word	0x0800bd93
 800bd00:	0800bd93 	.word	0x0800bd93
 800bd04:	0800bd93 	.word	0x0800bd93
 800bd08:	0800bd93 	.word	0x0800bd93
 800bd0c:	0800bd93 	.word	0x0800bd93
 800bd10:	0800bd93 	.word	0x0800bd93
 800bd14:	0800bd93 	.word	0x0800bd93
 800bd18:	0800bd93 	.word	0x0800bd93
 800bd1c:	0800bd93 	.word	0x0800bd93
 800bd20:	0800bd93 	.word	0x0800bd93
 800bd24:	0800bd85 	.word	0x0800bd85
 800bd28:	2b40      	cmp	r3, #64	; 0x40
 800bd2a:	d02e      	beq.n	800bd8a <UART_SetConfig+0x896>
 800bd2c:	e031      	b.n	800bd92 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bd2e:	f7fc f903 	bl	8007f38 <HAL_RCC_GetPCLK1Freq>
 800bd32:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800bd34:	e033      	b.n	800bd9e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bd36:	f7fc f915 	bl	8007f64 <HAL_RCC_GetPCLK2Freq>
 800bd3a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800bd3c:	e02f      	b.n	800bd9e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bd3e:	f107 0314 	add.w	r3, r7, #20
 800bd42:	4618      	mov	r0, r3
 800bd44:	f7fd fd4c 	bl	80097e0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bd48:	69bb      	ldr	r3, [r7, #24]
 800bd4a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bd4c:	e027      	b.n	800bd9e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bd4e:	f107 0308 	add.w	r3, r7, #8
 800bd52:	4618      	mov	r0, r3
 800bd54:	f7fd fe98 	bl	8009a88 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bd5c:	e01f      	b.n	800bd9e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bd5e:	4b58      	ldr	r3, [pc, #352]	; (800bec0 <UART_SetConfig+0x9cc>)
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	f003 0320 	and.w	r3, r3, #32
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d009      	beq.n	800bd7e <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bd6a:	4b55      	ldr	r3, [pc, #340]	; (800bec0 <UART_SetConfig+0x9cc>)
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	08db      	lsrs	r3, r3, #3
 800bd70:	f003 0303 	and.w	r3, r3, #3
 800bd74:	4a53      	ldr	r2, [pc, #332]	; (800bec4 <UART_SetConfig+0x9d0>)
 800bd76:	fa22 f303 	lsr.w	r3, r2, r3
 800bd7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bd7c:	e00f      	b.n	800bd9e <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800bd7e:	4b51      	ldr	r3, [pc, #324]	; (800bec4 <UART_SetConfig+0x9d0>)
 800bd80:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bd82:	e00c      	b.n	800bd9e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bd84:	4b4c      	ldr	r3, [pc, #304]	; (800beb8 <UART_SetConfig+0x9c4>)
 800bd86:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bd88:	e009      	b.n	800bd9e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bd8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bd8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bd90:	e005      	b.n	800bd9e <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800bd92:	2300      	movs	r3, #0
 800bd94:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800bd96:	2301      	movs	r3, #1
 800bd98:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800bd9c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bd9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	f000 80ea 	beq.w	800bf7a <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdaa:	4a44      	ldr	r2, [pc, #272]	; (800bebc <UART_SetConfig+0x9c8>)
 800bdac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bdb0:	461a      	mov	r2, r3
 800bdb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdb4:	fbb3 f3f2 	udiv	r3, r3, r2
 800bdb8:	005a      	lsls	r2, r3, #1
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	685b      	ldr	r3, [r3, #4]
 800bdbe:	085b      	lsrs	r3, r3, #1
 800bdc0:	441a      	add	r2, r3
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	685b      	ldr	r3, [r3, #4]
 800bdc6:	fbb2 f3f3 	udiv	r3, r2, r3
 800bdca:	b29b      	uxth	r3, r3
 800bdcc:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bdce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdd0:	2b0f      	cmp	r3, #15
 800bdd2:	d916      	bls.n	800be02 <UART_SetConfig+0x90e>
 800bdd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bdda:	d212      	bcs.n	800be02 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdde:	b29b      	uxth	r3, r3
 800bde0:	f023 030f 	bic.w	r3, r3, #15
 800bde4:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bde6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bde8:	085b      	lsrs	r3, r3, #1
 800bdea:	b29b      	uxth	r3, r3
 800bdec:	f003 0307 	and.w	r3, r3, #7
 800bdf0:	b29a      	uxth	r2, r3
 800bdf2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bdf4:	4313      	orrs	r3, r2
 800bdf6:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800bdfe:	60da      	str	r2, [r3, #12]
 800be00:	e0bb      	b.n	800bf7a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800be02:	2301      	movs	r3, #1
 800be04:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800be08:	e0b7      	b.n	800bf7a <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800be0a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800be0e:	2b20      	cmp	r3, #32
 800be10:	dc4a      	bgt.n	800bea8 <UART_SetConfig+0x9b4>
 800be12:	2b00      	cmp	r3, #0
 800be14:	f2c0 8086 	blt.w	800bf24 <UART_SetConfig+0xa30>
 800be18:	2b20      	cmp	r3, #32
 800be1a:	f200 8083 	bhi.w	800bf24 <UART_SetConfig+0xa30>
 800be1e:	a201      	add	r2, pc, #4	; (adr r2, 800be24 <UART_SetConfig+0x930>)
 800be20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be24:	0800beaf 	.word	0x0800beaf
 800be28:	0800bec9 	.word	0x0800bec9
 800be2c:	0800bf25 	.word	0x0800bf25
 800be30:	0800bf25 	.word	0x0800bf25
 800be34:	0800bed1 	.word	0x0800bed1
 800be38:	0800bf25 	.word	0x0800bf25
 800be3c:	0800bf25 	.word	0x0800bf25
 800be40:	0800bf25 	.word	0x0800bf25
 800be44:	0800bee1 	.word	0x0800bee1
 800be48:	0800bf25 	.word	0x0800bf25
 800be4c:	0800bf25 	.word	0x0800bf25
 800be50:	0800bf25 	.word	0x0800bf25
 800be54:	0800bf25 	.word	0x0800bf25
 800be58:	0800bf25 	.word	0x0800bf25
 800be5c:	0800bf25 	.word	0x0800bf25
 800be60:	0800bf25 	.word	0x0800bf25
 800be64:	0800bef1 	.word	0x0800bef1
 800be68:	0800bf25 	.word	0x0800bf25
 800be6c:	0800bf25 	.word	0x0800bf25
 800be70:	0800bf25 	.word	0x0800bf25
 800be74:	0800bf25 	.word	0x0800bf25
 800be78:	0800bf25 	.word	0x0800bf25
 800be7c:	0800bf25 	.word	0x0800bf25
 800be80:	0800bf25 	.word	0x0800bf25
 800be84:	0800bf25 	.word	0x0800bf25
 800be88:	0800bf25 	.word	0x0800bf25
 800be8c:	0800bf25 	.word	0x0800bf25
 800be90:	0800bf25 	.word	0x0800bf25
 800be94:	0800bf25 	.word	0x0800bf25
 800be98:	0800bf25 	.word	0x0800bf25
 800be9c:	0800bf25 	.word	0x0800bf25
 800bea0:	0800bf25 	.word	0x0800bf25
 800bea4:	0800bf17 	.word	0x0800bf17
 800bea8:	2b40      	cmp	r3, #64	; 0x40
 800beaa:	d037      	beq.n	800bf1c <UART_SetConfig+0xa28>
 800beac:	e03a      	b.n	800bf24 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800beae:	f7fc f843 	bl	8007f38 <HAL_RCC_GetPCLK1Freq>
 800beb2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800beb4:	e03c      	b.n	800bf30 <UART_SetConfig+0xa3c>
 800beb6:	bf00      	nop
 800beb8:	003d0900 	.word	0x003d0900
 800bebc:	0800fbbc 	.word	0x0800fbbc
 800bec0:	58024400 	.word	0x58024400
 800bec4:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bec8:	f7fc f84c 	bl	8007f64 <HAL_RCC_GetPCLK2Freq>
 800becc:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800bece:	e02f      	b.n	800bf30 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bed0:	f107 0314 	add.w	r3, r7, #20
 800bed4:	4618      	mov	r0, r3
 800bed6:	f7fd fc83 	bl	80097e0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800beda:	69bb      	ldr	r3, [r7, #24]
 800bedc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bede:	e027      	b.n	800bf30 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bee0:	f107 0308 	add.w	r3, r7, #8
 800bee4:	4618      	mov	r0, r3
 800bee6:	f7fd fdcf 	bl	8009a88 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800beee:	e01f      	b.n	800bf30 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bef0:	4b2c      	ldr	r3, [pc, #176]	; (800bfa4 <UART_SetConfig+0xab0>)
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	f003 0320 	and.w	r3, r3, #32
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d009      	beq.n	800bf10 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800befc:	4b29      	ldr	r3, [pc, #164]	; (800bfa4 <UART_SetConfig+0xab0>)
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	08db      	lsrs	r3, r3, #3
 800bf02:	f003 0303 	and.w	r3, r3, #3
 800bf06:	4a28      	ldr	r2, [pc, #160]	; (800bfa8 <UART_SetConfig+0xab4>)
 800bf08:	fa22 f303 	lsr.w	r3, r2, r3
 800bf0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bf0e:	e00f      	b.n	800bf30 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800bf10:	4b25      	ldr	r3, [pc, #148]	; (800bfa8 <UART_SetConfig+0xab4>)
 800bf12:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bf14:	e00c      	b.n	800bf30 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bf16:	4b25      	ldr	r3, [pc, #148]	; (800bfac <UART_SetConfig+0xab8>)
 800bf18:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bf1a:	e009      	b.n	800bf30 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bf1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bf20:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bf22:	e005      	b.n	800bf30 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800bf24:	2300      	movs	r3, #0
 800bf26:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800bf28:	2301      	movs	r3, #1
 800bf2a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800bf2e:	bf00      	nop
    }

    if (pclk != 0U)
 800bf30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d021      	beq.n	800bf7a <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf3a:	4a1d      	ldr	r2, [pc, #116]	; (800bfb0 <UART_SetConfig+0xabc>)
 800bf3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bf40:	461a      	mov	r2, r3
 800bf42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf44:	fbb3 f2f2 	udiv	r2, r3, r2
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	685b      	ldr	r3, [r3, #4]
 800bf4c:	085b      	lsrs	r3, r3, #1
 800bf4e:	441a      	add	r2, r3
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	685b      	ldr	r3, [r3, #4]
 800bf54:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf58:	b29b      	uxth	r3, r3
 800bf5a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bf5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf5e:	2b0f      	cmp	r3, #15
 800bf60:	d908      	bls.n	800bf74 <UART_SetConfig+0xa80>
 800bf62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bf68:	d204      	bcs.n	800bf74 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bf70:	60da      	str	r2, [r3, #12]
 800bf72:	e002      	b.n	800bf7a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800bf74:	2301      	movs	r3, #1
 800bf76:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	2201      	movs	r2, #1
 800bf7e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	2201      	movs	r2, #1
 800bf86:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	2200      	movs	r2, #0
 800bf8e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	2200      	movs	r2, #0
 800bf94:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800bf96:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	3738      	adds	r7, #56	; 0x38
 800bf9e:	46bd      	mov	sp, r7
 800bfa0:	bdb0      	pop	{r4, r5, r7, pc}
 800bfa2:	bf00      	nop
 800bfa4:	58024400 	.word	0x58024400
 800bfa8:	03d09000 	.word	0x03d09000
 800bfac:	003d0900 	.word	0x003d0900
 800bfb0:	0800fbbc 	.word	0x0800fbbc

0800bfb4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bfb4:	b480      	push	{r7}
 800bfb6:	b083      	sub	sp, #12
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfc0:	f003 0301 	and.w	r3, r3, #1
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d00a      	beq.n	800bfde <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	685b      	ldr	r3, [r3, #4]
 800bfce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	430a      	orrs	r2, r1
 800bfdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfe2:	f003 0302 	and.w	r3, r3, #2
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d00a      	beq.n	800c000 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	685b      	ldr	r3, [r3, #4]
 800bff0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	430a      	orrs	r2, r1
 800bffe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c004:	f003 0304 	and.w	r3, r3, #4
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d00a      	beq.n	800c022 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	685b      	ldr	r3, [r3, #4]
 800c012:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	430a      	orrs	r2, r1
 800c020:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c026:	f003 0308 	and.w	r3, r3, #8
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d00a      	beq.n	800c044 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	685b      	ldr	r3, [r3, #4]
 800c034:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	430a      	orrs	r2, r1
 800c042:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c048:	f003 0310 	and.w	r3, r3, #16
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d00a      	beq.n	800c066 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	689b      	ldr	r3, [r3, #8]
 800c056:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	430a      	orrs	r2, r1
 800c064:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c06a:	f003 0320 	and.w	r3, r3, #32
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d00a      	beq.n	800c088 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	689b      	ldr	r3, [r3, #8]
 800c078:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	430a      	orrs	r2, r1
 800c086:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c08c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c090:	2b00      	cmp	r3, #0
 800c092:	d01a      	beq.n	800c0ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	685b      	ldr	r3, [r3, #4]
 800c09a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	430a      	orrs	r2, r1
 800c0a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c0ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c0b2:	d10a      	bne.n	800c0ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	685b      	ldr	r3, [r3, #4]
 800c0ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	430a      	orrs	r2, r1
 800c0c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d00a      	beq.n	800c0ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	685b      	ldr	r3, [r3, #4]
 800c0dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	430a      	orrs	r2, r1
 800c0ea:	605a      	str	r2, [r3, #4]
  }
}
 800c0ec:	bf00      	nop
 800c0ee:	370c      	adds	r7, #12
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f6:	4770      	bx	lr

0800c0f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	b086      	sub	sp, #24
 800c0fc:	af02      	add	r7, sp, #8
 800c0fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	2200      	movs	r2, #0
 800c104:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c108:	f7f7 f86e 	bl	80031e8 <HAL_GetTick>
 800c10c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	f003 0308 	and.w	r3, r3, #8
 800c118:	2b08      	cmp	r3, #8
 800c11a:	d10e      	bne.n	800c13a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c11c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c120:	9300      	str	r3, [sp, #0]
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	2200      	movs	r2, #0
 800c126:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c12a:	6878      	ldr	r0, [r7, #4]
 800c12c:	f000 f82f 	bl	800c18e <UART_WaitOnFlagUntilTimeout>
 800c130:	4603      	mov	r3, r0
 800c132:	2b00      	cmp	r3, #0
 800c134:	d001      	beq.n	800c13a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c136:	2303      	movs	r3, #3
 800c138:	e025      	b.n	800c186 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	f003 0304 	and.w	r3, r3, #4
 800c144:	2b04      	cmp	r3, #4
 800c146:	d10e      	bne.n	800c166 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c148:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c14c:	9300      	str	r3, [sp, #0]
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	2200      	movs	r2, #0
 800c152:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c156:	6878      	ldr	r0, [r7, #4]
 800c158:	f000 f819 	bl	800c18e <UART_WaitOnFlagUntilTimeout>
 800c15c:	4603      	mov	r3, r0
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d001      	beq.n	800c166 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c162:	2303      	movs	r3, #3
 800c164:	e00f      	b.n	800c186 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	2220      	movs	r2, #32
 800c16a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	2220      	movs	r2, #32
 800c172:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	2200      	movs	r2, #0
 800c17a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	2200      	movs	r2, #0
 800c180:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c184:	2300      	movs	r3, #0
}
 800c186:	4618      	mov	r0, r3
 800c188:	3710      	adds	r7, #16
 800c18a:	46bd      	mov	sp, r7
 800c18c:	bd80      	pop	{r7, pc}

0800c18e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c18e:	b580      	push	{r7, lr}
 800c190:	b084      	sub	sp, #16
 800c192:	af00      	add	r7, sp, #0
 800c194:	60f8      	str	r0, [r7, #12]
 800c196:	60b9      	str	r1, [r7, #8]
 800c198:	603b      	str	r3, [r7, #0]
 800c19a:	4613      	mov	r3, r2
 800c19c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c19e:	e062      	b.n	800c266 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c1a0:	69bb      	ldr	r3, [r7, #24]
 800c1a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1a6:	d05e      	beq.n	800c266 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c1a8:	f7f7 f81e 	bl	80031e8 <HAL_GetTick>
 800c1ac:	4602      	mov	r2, r0
 800c1ae:	683b      	ldr	r3, [r7, #0]
 800c1b0:	1ad3      	subs	r3, r2, r3
 800c1b2:	69ba      	ldr	r2, [r7, #24]
 800c1b4:	429a      	cmp	r2, r3
 800c1b6:	d302      	bcc.n	800c1be <UART_WaitOnFlagUntilTimeout+0x30>
 800c1b8:	69bb      	ldr	r3, [r7, #24]
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d11d      	bne.n	800c1fa <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	681a      	ldr	r2, [r3, #0]
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c1cc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	689a      	ldr	r2, [r3, #8]
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	f022 0201 	bic.w	r2, r2, #1
 800c1dc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	2220      	movs	r2, #32
 800c1e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	2220      	movs	r2, #32
 800c1ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	2200      	movs	r2, #0
 800c1f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800c1f6:	2303      	movs	r3, #3
 800c1f8:	e045      	b.n	800c286 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	f003 0304 	and.w	r3, r3, #4
 800c204:	2b00      	cmp	r3, #0
 800c206:	d02e      	beq.n	800c266 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	69db      	ldr	r3, [r3, #28]
 800c20e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c212:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c216:	d126      	bne.n	800c266 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c220:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	681a      	ldr	r2, [r3, #0]
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c230:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	689a      	ldr	r2, [r3, #8]
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	f022 0201 	bic.w	r2, r2, #1
 800c240:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	2220      	movs	r2, #32
 800c246:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	2220      	movs	r2, #32
 800c24e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	2220      	movs	r2, #32
 800c256:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	2200      	movs	r2, #0
 800c25e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800c262:	2303      	movs	r3, #3
 800c264:	e00f      	b.n	800c286 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	69da      	ldr	r2, [r3, #28]
 800c26c:	68bb      	ldr	r3, [r7, #8]
 800c26e:	4013      	ands	r3, r2
 800c270:	68ba      	ldr	r2, [r7, #8]
 800c272:	429a      	cmp	r2, r3
 800c274:	bf0c      	ite	eq
 800c276:	2301      	moveq	r3, #1
 800c278:	2300      	movne	r3, #0
 800c27a:	b2db      	uxtb	r3, r3
 800c27c:	461a      	mov	r2, r3
 800c27e:	79fb      	ldrb	r3, [r7, #7]
 800c280:	429a      	cmp	r2, r3
 800c282:	d08d      	beq.n	800c1a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c284:	2300      	movs	r3, #0
}
 800c286:	4618      	mov	r0, r3
 800c288:	3710      	adds	r7, #16
 800c28a:	46bd      	mov	sp, r7
 800c28c:	bd80      	pop	{r7, pc}

0800c28e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c28e:	b480      	push	{r7}
 800c290:	b085      	sub	sp, #20
 800c292:	af00      	add	r7, sp, #0
 800c294:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c29c:	2b01      	cmp	r3, #1
 800c29e:	d101      	bne.n	800c2a4 <HAL_UARTEx_DisableFifoMode+0x16>
 800c2a0:	2302      	movs	r3, #2
 800c2a2:	e027      	b.n	800c2f4 <HAL_UARTEx_DisableFifoMode+0x66>
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	2201      	movs	r2, #1
 800c2a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	2224      	movs	r2, #36	; 0x24
 800c2b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	681a      	ldr	r2, [r3, #0]
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	f022 0201 	bic.w	r2, r2, #1
 800c2ca:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c2d2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	2200      	movs	r2, #0
 800c2d8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	68fa      	ldr	r2, [r7, #12]
 800c2e0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	2220      	movs	r2, #32
 800c2e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	2200      	movs	r2, #0
 800c2ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c2f2:	2300      	movs	r3, #0
}
 800c2f4:	4618      	mov	r0, r3
 800c2f6:	3714      	adds	r7, #20
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2fe:	4770      	bx	lr

0800c300 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c300:	b580      	push	{r7, lr}
 800c302:	b084      	sub	sp, #16
 800c304:	af00      	add	r7, sp, #0
 800c306:	6078      	str	r0, [r7, #4]
 800c308:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c310:	2b01      	cmp	r3, #1
 800c312:	d101      	bne.n	800c318 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c314:	2302      	movs	r3, #2
 800c316:	e02d      	b.n	800c374 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	2201      	movs	r2, #1
 800c31c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	2224      	movs	r2, #36	; 0x24
 800c324:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	681a      	ldr	r2, [r3, #0]
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	f022 0201 	bic.w	r2, r2, #1
 800c33e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	689b      	ldr	r3, [r3, #8]
 800c346:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	683a      	ldr	r2, [r7, #0]
 800c350:	430a      	orrs	r2, r1
 800c352:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c354:	6878      	ldr	r0, [r7, #4]
 800c356:	f000 f84f 	bl	800c3f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	68fa      	ldr	r2, [r7, #12]
 800c360:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	2220      	movs	r2, #32
 800c366:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	2200      	movs	r2, #0
 800c36e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c372:	2300      	movs	r3, #0
}
 800c374:	4618      	mov	r0, r3
 800c376:	3710      	adds	r7, #16
 800c378:	46bd      	mov	sp, r7
 800c37a:	bd80      	pop	{r7, pc}

0800c37c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c37c:	b580      	push	{r7, lr}
 800c37e:	b084      	sub	sp, #16
 800c380:	af00      	add	r7, sp, #0
 800c382:	6078      	str	r0, [r7, #4]
 800c384:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c38c:	2b01      	cmp	r3, #1
 800c38e:	d101      	bne.n	800c394 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c390:	2302      	movs	r3, #2
 800c392:	e02d      	b.n	800c3f0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	2201      	movs	r2, #1
 800c398:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	2224      	movs	r2, #36	; 0x24
 800c3a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	681a      	ldr	r2, [r3, #0]
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	f022 0201 	bic.w	r2, r2, #1
 800c3ba:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	689b      	ldr	r3, [r3, #8]
 800c3c2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	683a      	ldr	r2, [r7, #0]
 800c3cc:	430a      	orrs	r2, r1
 800c3ce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c3d0:	6878      	ldr	r0, [r7, #4]
 800c3d2:	f000 f811 	bl	800c3f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	68fa      	ldr	r2, [r7, #12]
 800c3dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	2220      	movs	r2, #32
 800c3e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	2200      	movs	r2, #0
 800c3ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c3ee:	2300      	movs	r3, #0
}
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	3710      	adds	r7, #16
 800c3f4:	46bd      	mov	sp, r7
 800c3f6:	bd80      	pop	{r7, pc}

0800c3f8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c3f8:	b480      	push	{r7}
 800c3fa:	b085      	sub	sp, #20
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c404:	2b00      	cmp	r3, #0
 800c406:	d108      	bne.n	800c41a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	2201      	movs	r2, #1
 800c40c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	2201      	movs	r2, #1
 800c414:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c418:	e031      	b.n	800c47e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c41a:	2310      	movs	r3, #16
 800c41c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c41e:	2310      	movs	r3, #16
 800c420:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	689b      	ldr	r3, [r3, #8]
 800c428:	0e5b      	lsrs	r3, r3, #25
 800c42a:	b2db      	uxtb	r3, r3
 800c42c:	f003 0307 	and.w	r3, r3, #7
 800c430:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	689b      	ldr	r3, [r3, #8]
 800c438:	0f5b      	lsrs	r3, r3, #29
 800c43a:	b2db      	uxtb	r3, r3
 800c43c:	f003 0307 	and.w	r3, r3, #7
 800c440:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c442:	7bbb      	ldrb	r3, [r7, #14]
 800c444:	7b3a      	ldrb	r2, [r7, #12]
 800c446:	4911      	ldr	r1, [pc, #68]	; (800c48c <UARTEx_SetNbDataToProcess+0x94>)
 800c448:	5c8a      	ldrb	r2, [r1, r2]
 800c44a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c44e:	7b3a      	ldrb	r2, [r7, #12]
 800c450:	490f      	ldr	r1, [pc, #60]	; (800c490 <UARTEx_SetNbDataToProcess+0x98>)
 800c452:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c454:	fb93 f3f2 	sdiv	r3, r3, r2
 800c458:	b29a      	uxth	r2, r3
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c460:	7bfb      	ldrb	r3, [r7, #15]
 800c462:	7b7a      	ldrb	r2, [r7, #13]
 800c464:	4909      	ldr	r1, [pc, #36]	; (800c48c <UARTEx_SetNbDataToProcess+0x94>)
 800c466:	5c8a      	ldrb	r2, [r1, r2]
 800c468:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c46c:	7b7a      	ldrb	r2, [r7, #13]
 800c46e:	4908      	ldr	r1, [pc, #32]	; (800c490 <UARTEx_SetNbDataToProcess+0x98>)
 800c470:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c472:	fb93 f3f2 	sdiv	r3, r3, r2
 800c476:	b29a      	uxth	r2, r3
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c47e:	bf00      	nop
 800c480:	3714      	adds	r7, #20
 800c482:	46bd      	mov	sp, r7
 800c484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c488:	4770      	bx	lr
 800c48a:	bf00      	nop
 800c48c:	0800fbd4 	.word	0x0800fbd4
 800c490:	0800fbdc 	.word	0x0800fbdc

0800c494 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 800c494:	b580      	push	{r7, lr}
 800c496:	b082      	sub	sp, #8
 800c498:	af00      	add	r7, sp, #0
 800c49a:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d101      	bne.n	800c4a6 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 800c4a2:	2301      	movs	r3, #1
 800c4a4:	e03c      	b.n	800c520 <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c4ac:	b2db      	uxtb	r3, r3
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d106      	bne.n	800c4c0 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	2200      	movs	r2, #0
 800c4b6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 800c4ba:	6878      	ldr	r0, [r7, #4]
 800c4bc:	f7f5 ffdc 	bl	8002478 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	2202      	movs	r2, #2
 800c4c4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	681a      	ldr	r2, [r3, #0]
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	f022 0201 	bic.w	r2, r2, #1
 800c4d6:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 800c4d8:	6878      	ldr	r0, [r7, #4]
 800c4da:	f000 f85b 	bl	800c594 <USART_SetConfig>
 800c4de:	4603      	mov	r3, r0
 800c4e0:	2b01      	cmp	r3, #1
 800c4e2:	d101      	bne.n	800c4e8 <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 800c4e4:	2301      	movs	r3, #1
 800c4e6:	e01b      	b.n	800c520 <HAL_USART_Init+0x8c>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	685a      	ldr	r2, [r3, #4]
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c4f6:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	689a      	ldr	r2, [r3, #8]
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c506:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	681a      	ldr	r2, [r3, #0]
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	f042 0201 	orr.w	r2, r2, #1
 800c516:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 800c518:	6878      	ldr	r0, [r7, #4]
 800c51a:	f000 fd5b 	bl	800cfd4 <USART_CheckIdleState>
 800c51e:	4603      	mov	r3, r0
}
 800c520:	4618      	mov	r0, r3
 800c522:	3708      	adds	r7, #8
 800c524:	46bd      	mov	sp, r7
 800c526:	bd80      	pop	{r7, pc}

0800c528 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 800c528:	b580      	push	{r7, lr}
 800c52a:	b084      	sub	sp, #16
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	60f8      	str	r0, [r7, #12]
 800c530:	60b9      	str	r1, [r7, #8]
 800c532:	603b      	str	r3, [r7, #0]
 800c534:	4613      	mov	r3, r2
 800c536:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800c538:	e018      	b.n	800c56c <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c53a:	69bb      	ldr	r3, [r7, #24]
 800c53c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c540:	d014      	beq.n	800c56c <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c542:	f7f6 fe51 	bl	80031e8 <HAL_GetTick>
 800c546:	4602      	mov	r2, r0
 800c548:	683b      	ldr	r3, [r7, #0]
 800c54a:	1ad3      	subs	r3, r2, r3
 800c54c:	69ba      	ldr	r2, [r7, #24]
 800c54e:	429a      	cmp	r2, r3
 800c550:	d302      	bcc.n	800c558 <USART_WaitOnFlagUntilTimeout+0x30>
 800c552:	69bb      	ldr	r3, [r7, #24]
 800c554:	2b00      	cmp	r3, #0
 800c556:	d109      	bne.n	800c56c <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	2201      	movs	r2, #1
 800c55c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	2200      	movs	r2, #0
 800c564:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_TIMEOUT;
 800c568:	2303      	movs	r3, #3
 800c56a:	e00f      	b.n	800c58c <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	69da      	ldr	r2, [r3, #28]
 800c572:	68bb      	ldr	r3, [r7, #8]
 800c574:	4013      	ands	r3, r2
 800c576:	68ba      	ldr	r2, [r7, #8]
 800c578:	429a      	cmp	r2, r3
 800c57a:	bf0c      	ite	eq
 800c57c:	2301      	moveq	r3, #1
 800c57e:	2300      	movne	r3, #0
 800c580:	b2db      	uxtb	r3, r3
 800c582:	461a      	mov	r2, r3
 800c584:	79fb      	ldrb	r3, [r7, #7]
 800c586:	429a      	cmp	r2, r3
 800c588:	d0d7      	beq.n	800c53a <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c58a:	2300      	movs	r3, #0
}
 800c58c:	4618      	mov	r0, r3
 800c58e:	3710      	adds	r7, #16
 800c590:	46bd      	mov	sp, r7
 800c592:	bd80      	pop	{r7, pc}

0800c594 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 800c594:	b580      	push	{r7, lr}
 800c596:	b08e      	sub	sp, #56	; 0x38
 800c598:	af00      	add	r7, sp, #0
 800c59a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 800c59c:	2300      	movs	r3, #0
 800c59e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	633b      	str	r3, [r7, #48]	; 0x30
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	689a      	ldr	r2, [r3, #8]
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	691b      	ldr	r3, [r3, #16]
 800c5ae:	431a      	orrs	r2, r3
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	695b      	ldr	r3, [r3, #20]
 800c5b4:	4313      	orrs	r3, r2
 800c5b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c5ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	681a      	ldr	r2, [r3, #0]
 800c5c2:	4bc9      	ldr	r3, [pc, #804]	; (800c8e8 <USART_SetConfig+0x354>)
 800c5c4:	4013      	ands	r3, r2
 800c5c6:	687a      	ldr	r2, [r7, #4]
 800c5c8:	6812      	ldr	r2, [r2, #0]
 800c5ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c5cc:	430b      	orrs	r3, r1
 800c5ce:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 800c5d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c5d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	6a1b      	ldr	r3, [r3, #32]
 800c5da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c5dc:	4313      	orrs	r3, r2
 800c5de:	62fb      	str	r3, [r7, #44]	; 0x2c
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	699a      	ldr	r2, [r3, #24]
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	69db      	ldr	r3, [r3, #28]
 800c5e8:	4313      	orrs	r3, r2
 800c5ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c5ec:	4313      	orrs	r3, r2
 800c5ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  tmpreg |= (uint32_t)husart->Init.StopBits;
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	68db      	ldr	r3, [r3, #12]
 800c5f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c5f6:	4313      	orrs	r3, r2
 800c5f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	685a      	ldr	r2, [r3, #4]
 800c600:	4bba      	ldr	r3, [pc, #744]	; (800c8ec <USART_SetConfig+0x358>)
 800c602:	4013      	ands	r3, r2
 800c604:	687a      	ldr	r2, [r7, #4]
 800c606:	6812      	ldr	r2, [r2, #0]
 800c608:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c60a:	430b      	orrs	r3, r1
 800c60c:	6053      	str	r3, [r2, #4]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - USART Clock Prescaler : set PRESCALER according to husart->Init.ClockPrescaler value */
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c614:	f023 010f 	bic.w	r1, r3, #15
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	430a      	orrs	r2, r1
 800c622:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	4ab1      	ldr	r2, [pc, #708]	; (800c8f0 <USART_SetConfig+0x35c>)
 800c62a:	4293      	cmp	r3, r2
 800c62c:	d176      	bne.n	800c71c <USART_SetConfig+0x188>
 800c62e:	4bb1      	ldr	r3, [pc, #708]	; (800c8f4 <USART_SetConfig+0x360>)
 800c630:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c632:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c636:	2b28      	cmp	r3, #40	; 0x28
 800c638:	d86c      	bhi.n	800c714 <USART_SetConfig+0x180>
 800c63a:	a201      	add	r2, pc, #4	; (adr r2, 800c640 <USART_SetConfig+0xac>)
 800c63c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c640:	0800c6e5 	.word	0x0800c6e5
 800c644:	0800c715 	.word	0x0800c715
 800c648:	0800c715 	.word	0x0800c715
 800c64c:	0800c715 	.word	0x0800c715
 800c650:	0800c715 	.word	0x0800c715
 800c654:	0800c715 	.word	0x0800c715
 800c658:	0800c715 	.word	0x0800c715
 800c65c:	0800c715 	.word	0x0800c715
 800c660:	0800c6ed 	.word	0x0800c6ed
 800c664:	0800c715 	.word	0x0800c715
 800c668:	0800c715 	.word	0x0800c715
 800c66c:	0800c715 	.word	0x0800c715
 800c670:	0800c715 	.word	0x0800c715
 800c674:	0800c715 	.word	0x0800c715
 800c678:	0800c715 	.word	0x0800c715
 800c67c:	0800c715 	.word	0x0800c715
 800c680:	0800c6f5 	.word	0x0800c6f5
 800c684:	0800c715 	.word	0x0800c715
 800c688:	0800c715 	.word	0x0800c715
 800c68c:	0800c715 	.word	0x0800c715
 800c690:	0800c715 	.word	0x0800c715
 800c694:	0800c715 	.word	0x0800c715
 800c698:	0800c715 	.word	0x0800c715
 800c69c:	0800c715 	.word	0x0800c715
 800c6a0:	0800c6fd 	.word	0x0800c6fd
 800c6a4:	0800c715 	.word	0x0800c715
 800c6a8:	0800c715 	.word	0x0800c715
 800c6ac:	0800c715 	.word	0x0800c715
 800c6b0:	0800c715 	.word	0x0800c715
 800c6b4:	0800c715 	.word	0x0800c715
 800c6b8:	0800c715 	.word	0x0800c715
 800c6bc:	0800c715 	.word	0x0800c715
 800c6c0:	0800c705 	.word	0x0800c705
 800c6c4:	0800c715 	.word	0x0800c715
 800c6c8:	0800c715 	.word	0x0800c715
 800c6cc:	0800c715 	.word	0x0800c715
 800c6d0:	0800c715 	.word	0x0800c715
 800c6d4:	0800c715 	.word	0x0800c715
 800c6d8:	0800c715 	.word	0x0800c715
 800c6dc:	0800c715 	.word	0x0800c715
 800c6e0:	0800c70d 	.word	0x0800c70d
 800c6e4:	2301      	movs	r3, #1
 800c6e6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800c6ea:	e112      	b.n	800c912 <USART_SetConfig+0x37e>
 800c6ec:	2302      	movs	r3, #2
 800c6ee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800c6f2:	e10e      	b.n	800c912 <USART_SetConfig+0x37e>
 800c6f4:	2304      	movs	r3, #4
 800c6f6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800c6fa:	e10a      	b.n	800c912 <USART_SetConfig+0x37e>
 800c6fc:	2308      	movs	r3, #8
 800c6fe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800c702:	e106      	b.n	800c912 <USART_SetConfig+0x37e>
 800c704:	2310      	movs	r3, #16
 800c706:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800c70a:	e102      	b.n	800c912 <USART_SetConfig+0x37e>
 800c70c:	2320      	movs	r3, #32
 800c70e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800c712:	e0fe      	b.n	800c912 <USART_SetConfig+0x37e>
 800c714:	2340      	movs	r3, #64	; 0x40
 800c716:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800c71a:	e0fa      	b.n	800c912 <USART_SetConfig+0x37e>
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	4a75      	ldr	r2, [pc, #468]	; (800c8f8 <USART_SetConfig+0x364>)
 800c722:	4293      	cmp	r3, r2
 800c724:	d130      	bne.n	800c788 <USART_SetConfig+0x1f4>
 800c726:	4b73      	ldr	r3, [pc, #460]	; (800c8f4 <USART_SetConfig+0x360>)
 800c728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c72a:	f003 0307 	and.w	r3, r3, #7
 800c72e:	2b05      	cmp	r3, #5
 800c730:	d826      	bhi.n	800c780 <USART_SetConfig+0x1ec>
 800c732:	a201      	add	r2, pc, #4	; (adr r2, 800c738 <USART_SetConfig+0x1a4>)
 800c734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c738:	0800c751 	.word	0x0800c751
 800c73c:	0800c759 	.word	0x0800c759
 800c740:	0800c761 	.word	0x0800c761
 800c744:	0800c769 	.word	0x0800c769
 800c748:	0800c771 	.word	0x0800c771
 800c74c:	0800c779 	.word	0x0800c779
 800c750:	2300      	movs	r3, #0
 800c752:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800c756:	e0dc      	b.n	800c912 <USART_SetConfig+0x37e>
 800c758:	2302      	movs	r3, #2
 800c75a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800c75e:	e0d8      	b.n	800c912 <USART_SetConfig+0x37e>
 800c760:	2304      	movs	r3, #4
 800c762:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800c766:	e0d4      	b.n	800c912 <USART_SetConfig+0x37e>
 800c768:	2308      	movs	r3, #8
 800c76a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800c76e:	e0d0      	b.n	800c912 <USART_SetConfig+0x37e>
 800c770:	2310      	movs	r3, #16
 800c772:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800c776:	e0cc      	b.n	800c912 <USART_SetConfig+0x37e>
 800c778:	2320      	movs	r3, #32
 800c77a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800c77e:	e0c8      	b.n	800c912 <USART_SetConfig+0x37e>
 800c780:	2340      	movs	r3, #64	; 0x40
 800c782:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800c786:	e0c4      	b.n	800c912 <USART_SetConfig+0x37e>
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	4a5b      	ldr	r2, [pc, #364]	; (800c8fc <USART_SetConfig+0x368>)
 800c78e:	4293      	cmp	r3, r2
 800c790:	d130      	bne.n	800c7f4 <USART_SetConfig+0x260>
 800c792:	4b58      	ldr	r3, [pc, #352]	; (800c8f4 <USART_SetConfig+0x360>)
 800c794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c796:	f003 0307 	and.w	r3, r3, #7
 800c79a:	2b05      	cmp	r3, #5
 800c79c:	d826      	bhi.n	800c7ec <USART_SetConfig+0x258>
 800c79e:	a201      	add	r2, pc, #4	; (adr r2, 800c7a4 <USART_SetConfig+0x210>)
 800c7a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7a4:	0800c7bd 	.word	0x0800c7bd
 800c7a8:	0800c7c5 	.word	0x0800c7c5
 800c7ac:	0800c7cd 	.word	0x0800c7cd
 800c7b0:	0800c7d5 	.word	0x0800c7d5
 800c7b4:	0800c7dd 	.word	0x0800c7dd
 800c7b8:	0800c7e5 	.word	0x0800c7e5
 800c7bc:	2300      	movs	r3, #0
 800c7be:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800c7c2:	e0a6      	b.n	800c912 <USART_SetConfig+0x37e>
 800c7c4:	2302      	movs	r3, #2
 800c7c6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800c7ca:	e0a2      	b.n	800c912 <USART_SetConfig+0x37e>
 800c7cc:	2304      	movs	r3, #4
 800c7ce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800c7d2:	e09e      	b.n	800c912 <USART_SetConfig+0x37e>
 800c7d4:	2308      	movs	r3, #8
 800c7d6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800c7da:	e09a      	b.n	800c912 <USART_SetConfig+0x37e>
 800c7dc:	2310      	movs	r3, #16
 800c7de:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800c7e2:	e096      	b.n	800c912 <USART_SetConfig+0x37e>
 800c7e4:	2320      	movs	r3, #32
 800c7e6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800c7ea:	e092      	b.n	800c912 <USART_SetConfig+0x37e>
 800c7ec:	2340      	movs	r3, #64	; 0x40
 800c7ee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800c7f2:	e08e      	b.n	800c912 <USART_SetConfig+0x37e>
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	4a41      	ldr	r2, [pc, #260]	; (800c900 <USART_SetConfig+0x36c>)
 800c7fa:	4293      	cmp	r3, r2
 800c7fc:	f040 8086 	bne.w	800c90c <USART_SetConfig+0x378>
 800c800:	4b3c      	ldr	r3, [pc, #240]	; (800c8f4 <USART_SetConfig+0x360>)
 800c802:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c804:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c808:	2b28      	cmp	r3, #40	; 0x28
 800c80a:	d87b      	bhi.n	800c904 <USART_SetConfig+0x370>
 800c80c:	a201      	add	r2, pc, #4	; (adr r2, 800c814 <USART_SetConfig+0x280>)
 800c80e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c812:	bf00      	nop
 800c814:	0800c8b9 	.word	0x0800c8b9
 800c818:	0800c905 	.word	0x0800c905
 800c81c:	0800c905 	.word	0x0800c905
 800c820:	0800c905 	.word	0x0800c905
 800c824:	0800c905 	.word	0x0800c905
 800c828:	0800c905 	.word	0x0800c905
 800c82c:	0800c905 	.word	0x0800c905
 800c830:	0800c905 	.word	0x0800c905
 800c834:	0800c8c1 	.word	0x0800c8c1
 800c838:	0800c905 	.word	0x0800c905
 800c83c:	0800c905 	.word	0x0800c905
 800c840:	0800c905 	.word	0x0800c905
 800c844:	0800c905 	.word	0x0800c905
 800c848:	0800c905 	.word	0x0800c905
 800c84c:	0800c905 	.word	0x0800c905
 800c850:	0800c905 	.word	0x0800c905
 800c854:	0800c8c9 	.word	0x0800c8c9
 800c858:	0800c905 	.word	0x0800c905
 800c85c:	0800c905 	.word	0x0800c905
 800c860:	0800c905 	.word	0x0800c905
 800c864:	0800c905 	.word	0x0800c905
 800c868:	0800c905 	.word	0x0800c905
 800c86c:	0800c905 	.word	0x0800c905
 800c870:	0800c905 	.word	0x0800c905
 800c874:	0800c8d1 	.word	0x0800c8d1
 800c878:	0800c905 	.word	0x0800c905
 800c87c:	0800c905 	.word	0x0800c905
 800c880:	0800c905 	.word	0x0800c905
 800c884:	0800c905 	.word	0x0800c905
 800c888:	0800c905 	.word	0x0800c905
 800c88c:	0800c905 	.word	0x0800c905
 800c890:	0800c905 	.word	0x0800c905
 800c894:	0800c8d9 	.word	0x0800c8d9
 800c898:	0800c905 	.word	0x0800c905
 800c89c:	0800c905 	.word	0x0800c905
 800c8a0:	0800c905 	.word	0x0800c905
 800c8a4:	0800c905 	.word	0x0800c905
 800c8a8:	0800c905 	.word	0x0800c905
 800c8ac:	0800c905 	.word	0x0800c905
 800c8b0:	0800c905 	.word	0x0800c905
 800c8b4:	0800c8e1 	.word	0x0800c8e1
 800c8b8:	2301      	movs	r3, #1
 800c8ba:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800c8be:	e028      	b.n	800c912 <USART_SetConfig+0x37e>
 800c8c0:	2302      	movs	r3, #2
 800c8c2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800c8c6:	e024      	b.n	800c912 <USART_SetConfig+0x37e>
 800c8c8:	2304      	movs	r3, #4
 800c8ca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800c8ce:	e020      	b.n	800c912 <USART_SetConfig+0x37e>
 800c8d0:	2308      	movs	r3, #8
 800c8d2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800c8d6:	e01c      	b.n	800c912 <USART_SetConfig+0x37e>
 800c8d8:	2310      	movs	r3, #16
 800c8da:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800c8de:	e018      	b.n	800c912 <USART_SetConfig+0x37e>
 800c8e0:	2320      	movs	r3, #32
 800c8e2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800c8e6:	e014      	b.n	800c912 <USART_SetConfig+0x37e>
 800c8e8:	cfff69f3 	.word	0xcfff69f3
 800c8ec:	ffffc0f6 	.word	0xffffc0f6
 800c8f0:	40011000 	.word	0x40011000
 800c8f4:	58024400 	.word	0x58024400
 800c8f8:	40004400 	.word	0x40004400
 800c8fc:	40004800 	.word	0x40004800
 800c900:	40011400 	.word	0x40011400
 800c904:	2340      	movs	r3, #64	; 0x40
 800c906:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800c90a:	e002      	b.n	800c912 <USART_SetConfig+0x37e>
 800c90c:	2340      	movs	r3, #64	; 0x40
 800c90e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

  switch (clocksource)
 800c912:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c916:	2b20      	cmp	r3, #32
 800c918:	f200 8329 	bhi.w	800cf6e <USART_SetConfig+0x9da>
 800c91c:	a201      	add	r2, pc, #4	; (adr r2, 800c924 <USART_SetConfig+0x390>)
 800c91e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c922:	bf00      	nop
 800c924:	0800c9a9 	.word	0x0800c9a9
 800c928:	0800ca5f 	.word	0x0800ca5f
 800c92c:	0800cb15 	.word	0x0800cb15
 800c930:	0800cf6f 	.word	0x0800cf6f
 800c934:	0800cbcf 	.word	0x0800cbcf
 800c938:	0800cf6f 	.word	0x0800cf6f
 800c93c:	0800cf6f 	.word	0x0800cf6f
 800c940:	0800cf6f 	.word	0x0800cf6f
 800c944:	0800cc89 	.word	0x0800cc89
 800c948:	0800cf6f 	.word	0x0800cf6f
 800c94c:	0800cf6f 	.word	0x0800cf6f
 800c950:	0800cf6f 	.word	0x0800cf6f
 800c954:	0800cf6f 	.word	0x0800cf6f
 800c958:	0800cf6f 	.word	0x0800cf6f
 800c95c:	0800cf6f 	.word	0x0800cf6f
 800c960:	0800cf6f 	.word	0x0800cf6f
 800c964:	0800ce01 	.word	0x0800ce01
 800c968:	0800cf6f 	.word	0x0800cf6f
 800c96c:	0800cf6f 	.word	0x0800cf6f
 800c970:	0800cf6f 	.word	0x0800cf6f
 800c974:	0800cf6f 	.word	0x0800cf6f
 800c978:	0800cf6f 	.word	0x0800cf6f
 800c97c:	0800cf6f 	.word	0x0800cf6f
 800c980:	0800cf6f 	.word	0x0800cf6f
 800c984:	0800cf6f 	.word	0x0800cf6f
 800c988:	0800cf6f 	.word	0x0800cf6f
 800c98c:	0800cf6f 	.word	0x0800cf6f
 800c990:	0800cf6f 	.word	0x0800cf6f
 800c994:	0800cf6f 	.word	0x0800cf6f
 800c998:	0800cf6f 	.word	0x0800cf6f
 800c99c:	0800cf6f 	.word	0x0800cf6f
 800c9a0:	0800cf6f 	.word	0x0800cf6f
 800c9a4:	0800cebd 	.word	0x0800cebd
  {
    case USART_CLOCKSOURCE_D2PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 800c9a8:	f7fb fac6 	bl	8007f38 <HAL_RCC_GetPCLK1Freq>
 800c9ac:	62b8      	str	r0, [r7, #40]	; 0x28
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d044      	beq.n	800ca40 <USART_SetConfig+0x4ac>
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9ba:	2b01      	cmp	r3, #1
 800c9bc:	d03e      	beq.n	800ca3c <USART_SetConfig+0x4a8>
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9c2:	2b02      	cmp	r3, #2
 800c9c4:	d038      	beq.n	800ca38 <USART_SetConfig+0x4a4>
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9ca:	2b03      	cmp	r3, #3
 800c9cc:	d032      	beq.n	800ca34 <USART_SetConfig+0x4a0>
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9d2:	2b04      	cmp	r3, #4
 800c9d4:	d02c      	beq.n	800ca30 <USART_SetConfig+0x49c>
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9da:	2b05      	cmp	r3, #5
 800c9dc:	d026      	beq.n	800ca2c <USART_SetConfig+0x498>
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9e2:	2b06      	cmp	r3, #6
 800c9e4:	d020      	beq.n	800ca28 <USART_SetConfig+0x494>
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9ea:	2b07      	cmp	r3, #7
 800c9ec:	d01a      	beq.n	800ca24 <USART_SetConfig+0x490>
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9f2:	2b08      	cmp	r3, #8
 800c9f4:	d014      	beq.n	800ca20 <USART_SetConfig+0x48c>
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9fa:	2b09      	cmp	r3, #9
 800c9fc:	d00e      	beq.n	800ca1c <USART_SetConfig+0x488>
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca02:	2b0a      	cmp	r3, #10
 800ca04:	d008      	beq.n	800ca18 <USART_SetConfig+0x484>
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca0a:	2b0b      	cmp	r3, #11
 800ca0c:	d102      	bne.n	800ca14 <USART_SetConfig+0x480>
 800ca0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ca12:	e016      	b.n	800ca42 <USART_SetConfig+0x4ae>
 800ca14:	2301      	movs	r3, #1
 800ca16:	e014      	b.n	800ca42 <USART_SetConfig+0x4ae>
 800ca18:	2380      	movs	r3, #128	; 0x80
 800ca1a:	e012      	b.n	800ca42 <USART_SetConfig+0x4ae>
 800ca1c:	2340      	movs	r3, #64	; 0x40
 800ca1e:	e010      	b.n	800ca42 <USART_SetConfig+0x4ae>
 800ca20:	2320      	movs	r3, #32
 800ca22:	e00e      	b.n	800ca42 <USART_SetConfig+0x4ae>
 800ca24:	2310      	movs	r3, #16
 800ca26:	e00c      	b.n	800ca42 <USART_SetConfig+0x4ae>
 800ca28:	230c      	movs	r3, #12
 800ca2a:	e00a      	b.n	800ca42 <USART_SetConfig+0x4ae>
 800ca2c:	230a      	movs	r3, #10
 800ca2e:	e008      	b.n	800ca42 <USART_SetConfig+0x4ae>
 800ca30:	2308      	movs	r3, #8
 800ca32:	e006      	b.n	800ca42 <USART_SetConfig+0x4ae>
 800ca34:	2306      	movs	r3, #6
 800ca36:	e004      	b.n	800ca42 <USART_SetConfig+0x4ae>
 800ca38:	2304      	movs	r3, #4
 800ca3a:	e002      	b.n	800ca42 <USART_SetConfig+0x4ae>
 800ca3c:	2302      	movs	r3, #2
 800ca3e:	e000      	b.n	800ca42 <USART_SetConfig+0x4ae>
 800ca40:	2301      	movs	r3, #1
 800ca42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ca44:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca48:	005a      	lsls	r2, r3, #1
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	685b      	ldr	r3, [r3, #4]
 800ca4e:	085b      	lsrs	r3, r3, #1
 800ca50:	441a      	add	r2, r3
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	685b      	ldr	r3, [r3, #4]
 800ca56:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca5a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800ca5c:	e28b      	b.n	800cf76 <USART_SetConfig+0x9e2>
    case USART_CLOCKSOURCE_D2PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 800ca5e:	f7fb fa81 	bl	8007f64 <HAL_RCC_GetPCLK2Freq>
 800ca62:	62b8      	str	r0, [r7, #40]	; 0x28
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d044      	beq.n	800caf6 <USART_SetConfig+0x562>
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca70:	2b01      	cmp	r3, #1
 800ca72:	d03e      	beq.n	800caf2 <USART_SetConfig+0x55e>
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca78:	2b02      	cmp	r3, #2
 800ca7a:	d038      	beq.n	800caee <USART_SetConfig+0x55a>
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca80:	2b03      	cmp	r3, #3
 800ca82:	d032      	beq.n	800caea <USART_SetConfig+0x556>
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca88:	2b04      	cmp	r3, #4
 800ca8a:	d02c      	beq.n	800cae6 <USART_SetConfig+0x552>
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca90:	2b05      	cmp	r3, #5
 800ca92:	d026      	beq.n	800cae2 <USART_SetConfig+0x54e>
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca98:	2b06      	cmp	r3, #6
 800ca9a:	d020      	beq.n	800cade <USART_SetConfig+0x54a>
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800caa0:	2b07      	cmp	r3, #7
 800caa2:	d01a      	beq.n	800cada <USART_SetConfig+0x546>
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800caa8:	2b08      	cmp	r3, #8
 800caaa:	d014      	beq.n	800cad6 <USART_SetConfig+0x542>
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cab0:	2b09      	cmp	r3, #9
 800cab2:	d00e      	beq.n	800cad2 <USART_SetConfig+0x53e>
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cab8:	2b0a      	cmp	r3, #10
 800caba:	d008      	beq.n	800cace <USART_SetConfig+0x53a>
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cac0:	2b0b      	cmp	r3, #11
 800cac2:	d102      	bne.n	800caca <USART_SetConfig+0x536>
 800cac4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cac8:	e016      	b.n	800caf8 <USART_SetConfig+0x564>
 800caca:	2301      	movs	r3, #1
 800cacc:	e014      	b.n	800caf8 <USART_SetConfig+0x564>
 800cace:	2380      	movs	r3, #128	; 0x80
 800cad0:	e012      	b.n	800caf8 <USART_SetConfig+0x564>
 800cad2:	2340      	movs	r3, #64	; 0x40
 800cad4:	e010      	b.n	800caf8 <USART_SetConfig+0x564>
 800cad6:	2320      	movs	r3, #32
 800cad8:	e00e      	b.n	800caf8 <USART_SetConfig+0x564>
 800cada:	2310      	movs	r3, #16
 800cadc:	e00c      	b.n	800caf8 <USART_SetConfig+0x564>
 800cade:	230c      	movs	r3, #12
 800cae0:	e00a      	b.n	800caf8 <USART_SetConfig+0x564>
 800cae2:	230a      	movs	r3, #10
 800cae4:	e008      	b.n	800caf8 <USART_SetConfig+0x564>
 800cae6:	2308      	movs	r3, #8
 800cae8:	e006      	b.n	800caf8 <USART_SetConfig+0x564>
 800caea:	2306      	movs	r3, #6
 800caec:	e004      	b.n	800caf8 <USART_SetConfig+0x564>
 800caee:	2304      	movs	r3, #4
 800caf0:	e002      	b.n	800caf8 <USART_SetConfig+0x564>
 800caf2:	2302      	movs	r3, #2
 800caf4:	e000      	b.n	800caf8 <USART_SetConfig+0x564>
 800caf6:	2301      	movs	r3, #1
 800caf8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cafa:	fbb2 f3f3 	udiv	r3, r2, r3
 800cafe:	005a      	lsls	r2, r3, #1
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	685b      	ldr	r3, [r3, #4]
 800cb04:	085b      	lsrs	r3, r3, #1
 800cb06:	441a      	add	r2, r3
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	685b      	ldr	r3, [r3, #4]
 800cb0c:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb10:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800cb12:	e230      	b.n	800cf76 <USART_SetConfig+0x9e2>
    case USART_CLOCKSOURCE_PLL2:
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cb14:	f107 0318 	add.w	r3, r7, #24
 800cb18:	4618      	mov	r0, r3
 800cb1a:	f7fc fe61 	bl	80097e0 <HAL_RCCEx_GetPLL2ClockFreq>
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, husart->Init.BaudRate,
 800cb1e:	69fa      	ldr	r2, [r7, #28]
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d044      	beq.n	800cbb2 <USART_SetConfig+0x61e>
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb2c:	2b01      	cmp	r3, #1
 800cb2e:	d03e      	beq.n	800cbae <USART_SetConfig+0x61a>
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb34:	2b02      	cmp	r3, #2
 800cb36:	d038      	beq.n	800cbaa <USART_SetConfig+0x616>
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb3c:	2b03      	cmp	r3, #3
 800cb3e:	d032      	beq.n	800cba6 <USART_SetConfig+0x612>
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb44:	2b04      	cmp	r3, #4
 800cb46:	d02c      	beq.n	800cba2 <USART_SetConfig+0x60e>
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb4c:	2b05      	cmp	r3, #5
 800cb4e:	d026      	beq.n	800cb9e <USART_SetConfig+0x60a>
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb54:	2b06      	cmp	r3, #6
 800cb56:	d020      	beq.n	800cb9a <USART_SetConfig+0x606>
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb5c:	2b07      	cmp	r3, #7
 800cb5e:	d01a      	beq.n	800cb96 <USART_SetConfig+0x602>
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb64:	2b08      	cmp	r3, #8
 800cb66:	d014      	beq.n	800cb92 <USART_SetConfig+0x5fe>
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb6c:	2b09      	cmp	r3, #9
 800cb6e:	d00e      	beq.n	800cb8e <USART_SetConfig+0x5fa>
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb74:	2b0a      	cmp	r3, #10
 800cb76:	d008      	beq.n	800cb8a <USART_SetConfig+0x5f6>
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb7c:	2b0b      	cmp	r3, #11
 800cb7e:	d102      	bne.n	800cb86 <USART_SetConfig+0x5f2>
 800cb80:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cb84:	e016      	b.n	800cbb4 <USART_SetConfig+0x620>
 800cb86:	2301      	movs	r3, #1
 800cb88:	e014      	b.n	800cbb4 <USART_SetConfig+0x620>
 800cb8a:	2380      	movs	r3, #128	; 0x80
 800cb8c:	e012      	b.n	800cbb4 <USART_SetConfig+0x620>
 800cb8e:	2340      	movs	r3, #64	; 0x40
 800cb90:	e010      	b.n	800cbb4 <USART_SetConfig+0x620>
 800cb92:	2320      	movs	r3, #32
 800cb94:	e00e      	b.n	800cbb4 <USART_SetConfig+0x620>
 800cb96:	2310      	movs	r3, #16
 800cb98:	e00c      	b.n	800cbb4 <USART_SetConfig+0x620>
 800cb9a:	230c      	movs	r3, #12
 800cb9c:	e00a      	b.n	800cbb4 <USART_SetConfig+0x620>
 800cb9e:	230a      	movs	r3, #10
 800cba0:	e008      	b.n	800cbb4 <USART_SetConfig+0x620>
 800cba2:	2308      	movs	r3, #8
 800cba4:	e006      	b.n	800cbb4 <USART_SetConfig+0x620>
 800cba6:	2306      	movs	r3, #6
 800cba8:	e004      	b.n	800cbb4 <USART_SetConfig+0x620>
 800cbaa:	2304      	movs	r3, #4
 800cbac:	e002      	b.n	800cbb4 <USART_SetConfig+0x620>
 800cbae:	2302      	movs	r3, #2
 800cbb0:	e000      	b.n	800cbb4 <USART_SetConfig+0x620>
 800cbb2:	2301      	movs	r3, #1
 800cbb4:	fbb2 f3f3 	udiv	r3, r2, r3
 800cbb8:	005a      	lsls	r2, r3, #1
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	685b      	ldr	r3, [r3, #4]
 800cbbe:	085b      	lsrs	r3, r3, #1
 800cbc0:	441a      	add	r2, r3
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	685b      	ldr	r3, [r3, #4]
 800cbc6:	fbb2 f3f3 	udiv	r3, r2, r3
 800cbca:	633b      	str	r3, [r7, #48]	; 0x30
                                                husart->Init.ClockPrescaler));
      break;
 800cbcc:	e1d3      	b.n	800cf76 <USART_SetConfig+0x9e2>
    case USART_CLOCKSOURCE_PLL3:
      HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cbce:	f107 030c 	add.w	r3, r7, #12
 800cbd2:	4618      	mov	r0, r3
 800cbd4:	f7fc ff58 	bl	8009a88 <HAL_RCCEx_GetPLL3ClockFreq>
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, husart->Init.BaudRate,
 800cbd8:	693a      	ldr	r2, [r7, #16]
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d044      	beq.n	800cc6c <USART_SetConfig+0x6d8>
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbe6:	2b01      	cmp	r3, #1
 800cbe8:	d03e      	beq.n	800cc68 <USART_SetConfig+0x6d4>
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbee:	2b02      	cmp	r3, #2
 800cbf0:	d038      	beq.n	800cc64 <USART_SetConfig+0x6d0>
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbf6:	2b03      	cmp	r3, #3
 800cbf8:	d032      	beq.n	800cc60 <USART_SetConfig+0x6cc>
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbfe:	2b04      	cmp	r3, #4
 800cc00:	d02c      	beq.n	800cc5c <USART_SetConfig+0x6c8>
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc06:	2b05      	cmp	r3, #5
 800cc08:	d026      	beq.n	800cc58 <USART_SetConfig+0x6c4>
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc0e:	2b06      	cmp	r3, #6
 800cc10:	d020      	beq.n	800cc54 <USART_SetConfig+0x6c0>
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc16:	2b07      	cmp	r3, #7
 800cc18:	d01a      	beq.n	800cc50 <USART_SetConfig+0x6bc>
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc1e:	2b08      	cmp	r3, #8
 800cc20:	d014      	beq.n	800cc4c <USART_SetConfig+0x6b8>
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc26:	2b09      	cmp	r3, #9
 800cc28:	d00e      	beq.n	800cc48 <USART_SetConfig+0x6b4>
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc2e:	2b0a      	cmp	r3, #10
 800cc30:	d008      	beq.n	800cc44 <USART_SetConfig+0x6b0>
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc36:	2b0b      	cmp	r3, #11
 800cc38:	d102      	bne.n	800cc40 <USART_SetConfig+0x6ac>
 800cc3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cc3e:	e016      	b.n	800cc6e <USART_SetConfig+0x6da>
 800cc40:	2301      	movs	r3, #1
 800cc42:	e014      	b.n	800cc6e <USART_SetConfig+0x6da>
 800cc44:	2380      	movs	r3, #128	; 0x80
 800cc46:	e012      	b.n	800cc6e <USART_SetConfig+0x6da>
 800cc48:	2340      	movs	r3, #64	; 0x40
 800cc4a:	e010      	b.n	800cc6e <USART_SetConfig+0x6da>
 800cc4c:	2320      	movs	r3, #32
 800cc4e:	e00e      	b.n	800cc6e <USART_SetConfig+0x6da>
 800cc50:	2310      	movs	r3, #16
 800cc52:	e00c      	b.n	800cc6e <USART_SetConfig+0x6da>
 800cc54:	230c      	movs	r3, #12
 800cc56:	e00a      	b.n	800cc6e <USART_SetConfig+0x6da>
 800cc58:	230a      	movs	r3, #10
 800cc5a:	e008      	b.n	800cc6e <USART_SetConfig+0x6da>
 800cc5c:	2308      	movs	r3, #8
 800cc5e:	e006      	b.n	800cc6e <USART_SetConfig+0x6da>
 800cc60:	2306      	movs	r3, #6
 800cc62:	e004      	b.n	800cc6e <USART_SetConfig+0x6da>
 800cc64:	2304      	movs	r3, #4
 800cc66:	e002      	b.n	800cc6e <USART_SetConfig+0x6da>
 800cc68:	2302      	movs	r3, #2
 800cc6a:	e000      	b.n	800cc6e <USART_SetConfig+0x6da>
 800cc6c:	2301      	movs	r3, #1
 800cc6e:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc72:	005a      	lsls	r2, r3, #1
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	685b      	ldr	r3, [r3, #4]
 800cc78:	085b      	lsrs	r3, r3, #1
 800cc7a:	441a      	add	r2, r3
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	685b      	ldr	r3, [r3, #4]
 800cc80:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc84:	633b      	str	r3, [r7, #48]	; 0x30
                                                husart->Init.ClockPrescaler));
      break;
 800cc86:	e176      	b.n	800cf76 <USART_SetConfig+0x9e2>
    case USART_CLOCKSOURCE_HSI:
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cc88:	4b89      	ldr	r3, [pc, #548]	; (800ceb0 <USART_SetConfig+0x91c>)
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	f003 0320 	and.w	r3, r3, #32
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d05d      	beq.n	800cd50 <USART_SetConfig+0x7bc>
      {
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800cc94:	4b86      	ldr	r3, [pc, #536]	; (800ceb0 <USART_SetConfig+0x91c>)
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	08db      	lsrs	r3, r3, #3
 800cc9a:	f003 0303 	and.w	r3, r3, #3
 800cc9e:	4a85      	ldr	r2, [pc, #532]	; (800ceb4 <USART_SetConfig+0x920>)
 800cca0:	40da      	lsrs	r2, r3
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d044      	beq.n	800cd34 <USART_SetConfig+0x7a0>
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccae:	2b01      	cmp	r3, #1
 800ccb0:	d03e      	beq.n	800cd30 <USART_SetConfig+0x79c>
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccb6:	2b02      	cmp	r3, #2
 800ccb8:	d038      	beq.n	800cd2c <USART_SetConfig+0x798>
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccbe:	2b03      	cmp	r3, #3
 800ccc0:	d032      	beq.n	800cd28 <USART_SetConfig+0x794>
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccc6:	2b04      	cmp	r3, #4
 800ccc8:	d02c      	beq.n	800cd24 <USART_SetConfig+0x790>
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccce:	2b05      	cmp	r3, #5
 800ccd0:	d026      	beq.n	800cd20 <USART_SetConfig+0x78c>
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccd6:	2b06      	cmp	r3, #6
 800ccd8:	d020      	beq.n	800cd1c <USART_SetConfig+0x788>
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccde:	2b07      	cmp	r3, #7
 800cce0:	d01a      	beq.n	800cd18 <USART_SetConfig+0x784>
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cce6:	2b08      	cmp	r3, #8
 800cce8:	d014      	beq.n	800cd14 <USART_SetConfig+0x780>
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccee:	2b09      	cmp	r3, #9
 800ccf0:	d00e      	beq.n	800cd10 <USART_SetConfig+0x77c>
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccf6:	2b0a      	cmp	r3, #10
 800ccf8:	d008      	beq.n	800cd0c <USART_SetConfig+0x778>
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccfe:	2b0b      	cmp	r3, #11
 800cd00:	d102      	bne.n	800cd08 <USART_SetConfig+0x774>
 800cd02:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cd06:	e016      	b.n	800cd36 <USART_SetConfig+0x7a2>
 800cd08:	2301      	movs	r3, #1
 800cd0a:	e014      	b.n	800cd36 <USART_SetConfig+0x7a2>
 800cd0c:	2380      	movs	r3, #128	; 0x80
 800cd0e:	e012      	b.n	800cd36 <USART_SetConfig+0x7a2>
 800cd10:	2340      	movs	r3, #64	; 0x40
 800cd12:	e010      	b.n	800cd36 <USART_SetConfig+0x7a2>
 800cd14:	2320      	movs	r3, #32
 800cd16:	e00e      	b.n	800cd36 <USART_SetConfig+0x7a2>
 800cd18:	2310      	movs	r3, #16
 800cd1a:	e00c      	b.n	800cd36 <USART_SetConfig+0x7a2>
 800cd1c:	230c      	movs	r3, #12
 800cd1e:	e00a      	b.n	800cd36 <USART_SetConfig+0x7a2>
 800cd20:	230a      	movs	r3, #10
 800cd22:	e008      	b.n	800cd36 <USART_SetConfig+0x7a2>
 800cd24:	2308      	movs	r3, #8
 800cd26:	e006      	b.n	800cd36 <USART_SetConfig+0x7a2>
 800cd28:	2306      	movs	r3, #6
 800cd2a:	e004      	b.n	800cd36 <USART_SetConfig+0x7a2>
 800cd2c:	2304      	movs	r3, #4
 800cd2e:	e002      	b.n	800cd36 <USART_SetConfig+0x7a2>
 800cd30:	2302      	movs	r3, #2
 800cd32:	e000      	b.n	800cd36 <USART_SetConfig+0x7a2>
 800cd34:	2301      	movs	r3, #1
 800cd36:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd3a:	005a      	lsls	r2, r3, #1
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	685b      	ldr	r3, [r3, #4]
 800cd40:	085b      	lsrs	r3, r3, #1
 800cd42:	441a      	add	r2, r3
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	685b      	ldr	r3, [r3, #4]
 800cd48:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd4c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
      }
      break;
 800cd4e:	e112      	b.n	800cf76 <USART_SetConfig+0x9e2>
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d044      	beq.n	800cde2 <USART_SetConfig+0x84e>
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd5c:	2b01      	cmp	r3, #1
 800cd5e:	d03e      	beq.n	800cdde <USART_SetConfig+0x84a>
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd64:	2b02      	cmp	r3, #2
 800cd66:	d038      	beq.n	800cdda <USART_SetConfig+0x846>
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd6c:	2b03      	cmp	r3, #3
 800cd6e:	d032      	beq.n	800cdd6 <USART_SetConfig+0x842>
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd74:	2b04      	cmp	r3, #4
 800cd76:	d02c      	beq.n	800cdd2 <USART_SetConfig+0x83e>
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd7c:	2b05      	cmp	r3, #5
 800cd7e:	d026      	beq.n	800cdce <USART_SetConfig+0x83a>
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd84:	2b06      	cmp	r3, #6
 800cd86:	d020      	beq.n	800cdca <USART_SetConfig+0x836>
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd8c:	2b07      	cmp	r3, #7
 800cd8e:	d01a      	beq.n	800cdc6 <USART_SetConfig+0x832>
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd94:	2b08      	cmp	r3, #8
 800cd96:	d014      	beq.n	800cdc2 <USART_SetConfig+0x82e>
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd9c:	2b09      	cmp	r3, #9
 800cd9e:	d00e      	beq.n	800cdbe <USART_SetConfig+0x82a>
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cda4:	2b0a      	cmp	r3, #10
 800cda6:	d008      	beq.n	800cdba <USART_SetConfig+0x826>
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdac:	2b0b      	cmp	r3, #11
 800cdae:	d102      	bne.n	800cdb6 <USART_SetConfig+0x822>
 800cdb0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cdb4:	e016      	b.n	800cde4 <USART_SetConfig+0x850>
 800cdb6:	2301      	movs	r3, #1
 800cdb8:	e014      	b.n	800cde4 <USART_SetConfig+0x850>
 800cdba:	2380      	movs	r3, #128	; 0x80
 800cdbc:	e012      	b.n	800cde4 <USART_SetConfig+0x850>
 800cdbe:	2340      	movs	r3, #64	; 0x40
 800cdc0:	e010      	b.n	800cde4 <USART_SetConfig+0x850>
 800cdc2:	2320      	movs	r3, #32
 800cdc4:	e00e      	b.n	800cde4 <USART_SetConfig+0x850>
 800cdc6:	2310      	movs	r3, #16
 800cdc8:	e00c      	b.n	800cde4 <USART_SetConfig+0x850>
 800cdca:	230c      	movs	r3, #12
 800cdcc:	e00a      	b.n	800cde4 <USART_SetConfig+0x850>
 800cdce:	230a      	movs	r3, #10
 800cdd0:	e008      	b.n	800cde4 <USART_SetConfig+0x850>
 800cdd2:	2308      	movs	r3, #8
 800cdd4:	e006      	b.n	800cde4 <USART_SetConfig+0x850>
 800cdd6:	2306      	movs	r3, #6
 800cdd8:	e004      	b.n	800cde4 <USART_SetConfig+0x850>
 800cdda:	2304      	movs	r3, #4
 800cddc:	e002      	b.n	800cde4 <USART_SetConfig+0x850>
 800cdde:	2302      	movs	r3, #2
 800cde0:	e000      	b.n	800cde4 <USART_SetConfig+0x850>
 800cde2:	2301      	movs	r3, #1
 800cde4:	4a33      	ldr	r2, [pc, #204]	; (800ceb4 <USART_SetConfig+0x920>)
 800cde6:	fbb2 f3f3 	udiv	r3, r2, r3
 800cdea:	005a      	lsls	r2, r3, #1
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	685b      	ldr	r3, [r3, #4]
 800cdf0:	085b      	lsrs	r3, r3, #1
 800cdf2:	441a      	add	r2, r3
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	685b      	ldr	r3, [r3, #4]
 800cdf8:	fbb2 f3f3 	udiv	r3, r2, r3
 800cdfc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800cdfe:	e0ba      	b.n	800cf76 <USART_SetConfig+0x9e2>
    case USART_CLOCKSOURCE_CSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(CSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d044      	beq.n	800ce92 <USART_SetConfig+0x8fe>
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce0c:	2b01      	cmp	r3, #1
 800ce0e:	d03e      	beq.n	800ce8e <USART_SetConfig+0x8fa>
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce14:	2b02      	cmp	r3, #2
 800ce16:	d038      	beq.n	800ce8a <USART_SetConfig+0x8f6>
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce1c:	2b03      	cmp	r3, #3
 800ce1e:	d032      	beq.n	800ce86 <USART_SetConfig+0x8f2>
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce24:	2b04      	cmp	r3, #4
 800ce26:	d02c      	beq.n	800ce82 <USART_SetConfig+0x8ee>
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce2c:	2b05      	cmp	r3, #5
 800ce2e:	d026      	beq.n	800ce7e <USART_SetConfig+0x8ea>
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce34:	2b06      	cmp	r3, #6
 800ce36:	d020      	beq.n	800ce7a <USART_SetConfig+0x8e6>
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce3c:	2b07      	cmp	r3, #7
 800ce3e:	d01a      	beq.n	800ce76 <USART_SetConfig+0x8e2>
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce44:	2b08      	cmp	r3, #8
 800ce46:	d014      	beq.n	800ce72 <USART_SetConfig+0x8de>
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce4c:	2b09      	cmp	r3, #9
 800ce4e:	d00e      	beq.n	800ce6e <USART_SetConfig+0x8da>
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce54:	2b0a      	cmp	r3, #10
 800ce56:	d008      	beq.n	800ce6a <USART_SetConfig+0x8d6>
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce5c:	2b0b      	cmp	r3, #11
 800ce5e:	d102      	bne.n	800ce66 <USART_SetConfig+0x8d2>
 800ce60:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ce64:	e016      	b.n	800ce94 <USART_SetConfig+0x900>
 800ce66:	2301      	movs	r3, #1
 800ce68:	e014      	b.n	800ce94 <USART_SetConfig+0x900>
 800ce6a:	2380      	movs	r3, #128	; 0x80
 800ce6c:	e012      	b.n	800ce94 <USART_SetConfig+0x900>
 800ce6e:	2340      	movs	r3, #64	; 0x40
 800ce70:	e010      	b.n	800ce94 <USART_SetConfig+0x900>
 800ce72:	2320      	movs	r3, #32
 800ce74:	e00e      	b.n	800ce94 <USART_SetConfig+0x900>
 800ce76:	2310      	movs	r3, #16
 800ce78:	e00c      	b.n	800ce94 <USART_SetConfig+0x900>
 800ce7a:	230c      	movs	r3, #12
 800ce7c:	e00a      	b.n	800ce94 <USART_SetConfig+0x900>
 800ce7e:	230a      	movs	r3, #10
 800ce80:	e008      	b.n	800ce94 <USART_SetConfig+0x900>
 800ce82:	2308      	movs	r3, #8
 800ce84:	e006      	b.n	800ce94 <USART_SetConfig+0x900>
 800ce86:	2306      	movs	r3, #6
 800ce88:	e004      	b.n	800ce94 <USART_SetConfig+0x900>
 800ce8a:	2304      	movs	r3, #4
 800ce8c:	e002      	b.n	800ce94 <USART_SetConfig+0x900>
 800ce8e:	2302      	movs	r3, #2
 800ce90:	e000      	b.n	800ce94 <USART_SetConfig+0x900>
 800ce92:	2301      	movs	r3, #1
 800ce94:	4a08      	ldr	r2, [pc, #32]	; (800ceb8 <USART_SetConfig+0x924>)
 800ce96:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce9a:	005a      	lsls	r2, r3, #1
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	685b      	ldr	r3, [r3, #4]
 800cea0:	085b      	lsrs	r3, r3, #1
 800cea2:	441a      	add	r2, r3
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	685b      	ldr	r3, [r3, #4]
 800cea8:	fbb2 f3f3 	udiv	r3, r2, r3
 800ceac:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800ceae:	e062      	b.n	800cf76 <USART_SetConfig+0x9e2>
 800ceb0:	58024400 	.word	0x58024400
 800ceb4:	03d09000 	.word	0x03d09000
 800ceb8:	003d0900 	.word	0x003d0900
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d044      	beq.n	800cf4e <USART_SetConfig+0x9ba>
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cec8:	2b01      	cmp	r3, #1
 800ceca:	d03e      	beq.n	800cf4a <USART_SetConfig+0x9b6>
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ced0:	2b02      	cmp	r3, #2
 800ced2:	d038      	beq.n	800cf46 <USART_SetConfig+0x9b2>
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ced8:	2b03      	cmp	r3, #3
 800ceda:	d032      	beq.n	800cf42 <USART_SetConfig+0x9ae>
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cee0:	2b04      	cmp	r3, #4
 800cee2:	d02c      	beq.n	800cf3e <USART_SetConfig+0x9aa>
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cee8:	2b05      	cmp	r3, #5
 800ceea:	d026      	beq.n	800cf3a <USART_SetConfig+0x9a6>
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cef0:	2b06      	cmp	r3, #6
 800cef2:	d020      	beq.n	800cf36 <USART_SetConfig+0x9a2>
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cef8:	2b07      	cmp	r3, #7
 800cefa:	d01a      	beq.n	800cf32 <USART_SetConfig+0x99e>
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf00:	2b08      	cmp	r3, #8
 800cf02:	d014      	beq.n	800cf2e <USART_SetConfig+0x99a>
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf08:	2b09      	cmp	r3, #9
 800cf0a:	d00e      	beq.n	800cf2a <USART_SetConfig+0x996>
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf10:	2b0a      	cmp	r3, #10
 800cf12:	d008      	beq.n	800cf26 <USART_SetConfig+0x992>
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf18:	2b0b      	cmp	r3, #11
 800cf1a:	d102      	bne.n	800cf22 <USART_SetConfig+0x98e>
 800cf1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cf20:	e016      	b.n	800cf50 <USART_SetConfig+0x9bc>
 800cf22:	2301      	movs	r3, #1
 800cf24:	e014      	b.n	800cf50 <USART_SetConfig+0x9bc>
 800cf26:	2380      	movs	r3, #128	; 0x80
 800cf28:	e012      	b.n	800cf50 <USART_SetConfig+0x9bc>
 800cf2a:	2340      	movs	r3, #64	; 0x40
 800cf2c:	e010      	b.n	800cf50 <USART_SetConfig+0x9bc>
 800cf2e:	2320      	movs	r3, #32
 800cf30:	e00e      	b.n	800cf50 <USART_SetConfig+0x9bc>
 800cf32:	2310      	movs	r3, #16
 800cf34:	e00c      	b.n	800cf50 <USART_SetConfig+0x9bc>
 800cf36:	230c      	movs	r3, #12
 800cf38:	e00a      	b.n	800cf50 <USART_SetConfig+0x9bc>
 800cf3a:	230a      	movs	r3, #10
 800cf3c:	e008      	b.n	800cf50 <USART_SetConfig+0x9bc>
 800cf3e:	2308      	movs	r3, #8
 800cf40:	e006      	b.n	800cf50 <USART_SetConfig+0x9bc>
 800cf42:	2306      	movs	r3, #6
 800cf44:	e004      	b.n	800cf50 <USART_SetConfig+0x9bc>
 800cf46:	2304      	movs	r3, #4
 800cf48:	e002      	b.n	800cf50 <USART_SetConfig+0x9bc>
 800cf4a:	2302      	movs	r3, #2
 800cf4c:	e000      	b.n	800cf50 <USART_SetConfig+0x9bc>
 800cf4e:	2301      	movs	r3, #1
 800cf50:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800cf54:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf58:	005a      	lsls	r2, r3, #1
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	685b      	ldr	r3, [r3, #4]
 800cf5e:	085b      	lsrs	r3, r3, #1
 800cf60:	441a      	add	r2, r3
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	685b      	ldr	r3, [r3, #4]
 800cf66:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf6a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800cf6c:	e003      	b.n	800cf76 <USART_SetConfig+0x9e2>
    default:
      ret = HAL_ERROR;
 800cf6e:	2301      	movs	r3, #1
 800cf70:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
      break;
 800cf74:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 800cf76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf78:	2b0f      	cmp	r3, #15
 800cf7a:	d916      	bls.n	800cfaa <USART_SetConfig+0xa16>
 800cf7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cf82:	d212      	bcs.n	800cfaa <USART_SetConfig+0xa16>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cf84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf86:	b29b      	uxth	r3, r3
 800cf88:	f023 030f 	bic.w	r3, r3, #15
 800cf8c:	84fb      	strh	r3, [r7, #38]	; 0x26
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cf8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf90:	085b      	lsrs	r3, r3, #1
 800cf92:	b29b      	uxth	r3, r3
 800cf94:	f003 0307 	and.w	r3, r3, #7
 800cf98:	b29a      	uxth	r2, r3
 800cf9a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800cf9c:	4313      	orrs	r3, r2
 800cf9e:	84fb      	strh	r3, [r7, #38]	; 0x26
    husart->Instance->BRR = brrtemp;
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800cfa6:	60da      	str	r2, [r3, #12]
 800cfa8:	e002      	b.n	800cfb0 <USART_SetConfig+0xa1c>
  }
  else
  {
    ret = HAL_ERROR;
 800cfaa:	2301      	movs	r3, #1
 800cfac:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  husart->NbTxDataToProcess = 1U;
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	2201      	movs	r2, #1
 800cfb4:	879a      	strh	r2, [r3, #60]	; 0x3c
  husart->NbRxDataToProcess = 1U;
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	2201      	movs	r2, #1
 800cfba:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	2200      	movs	r2, #0
 800cfc0:	649a      	str	r2, [r3, #72]	; 0x48
  husart->TxISR   = NULL;
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	2200      	movs	r2, #0
 800cfc6:	64da      	str	r2, [r3, #76]	; 0x4c

  return ret;
 800cfc8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
}
 800cfcc:	4618      	mov	r0, r3
 800cfce:	3738      	adds	r7, #56	; 0x38
 800cfd0:	46bd      	mov	sp, r7
 800cfd2:	bd80      	pop	{r7, pc}

0800cfd4 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 800cfd4:	b580      	push	{r7, lr}
 800cfd6:	b086      	sub	sp, #24
 800cfd8:	af02      	add	r7, sp, #8
 800cfda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	2200      	movs	r2, #0
 800cfe0:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cfe2:	f7f6 f901 	bl	80031e8 <HAL_GetTick>
 800cfe6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	f003 0308 	and.w	r3, r3, #8
 800cff2:	2b08      	cmp	r3, #8
 800cff4:	d10e      	bne.n	800d014 <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800cff6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800cffa:	9300      	str	r3, [sp, #0]
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	2200      	movs	r2, #0
 800d000:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d004:	6878      	ldr	r0, [r7, #4]
 800d006:	f7ff fa8f 	bl	800c528 <USART_WaitOnFlagUntilTimeout>
 800d00a:	4603      	mov	r3, r0
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d001      	beq.n	800d014 <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d010:	2303      	movs	r3, #3
 800d012:	e01e      	b.n	800d052 <USART_CheckIdleState+0x7e>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	f003 0304 	and.w	r3, r3, #4
 800d01e:	2b04      	cmp	r3, #4
 800d020:	d10e      	bne.n	800d040 <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800d022:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d026:	9300      	str	r3, [sp, #0]
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	2200      	movs	r2, #0
 800d02c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d030:	6878      	ldr	r0, [r7, #4]
 800d032:	f7ff fa79 	bl	800c528 <USART_WaitOnFlagUntilTimeout>
 800d036:	4603      	mov	r3, r0
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d001      	beq.n	800d040 <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d03c:	2303      	movs	r3, #3
 800d03e:	e008      	b.n	800d052 <USART_CheckIdleState+0x7e>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	2201      	movs	r2, #1
 800d044:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	2200      	movs	r2, #0
 800d04c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800d050:	2300      	movs	r3, #0
}
 800d052:	4618      	mov	r0, r3
 800d054:	3710      	adds	r7, #16
 800d056:	46bd      	mov	sp, r7
 800d058:	bd80      	pop	{r7, pc}

0800d05a <HAL_USARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param husart      USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_DisableFifoMode(USART_HandleTypeDef *husart)
{
 800d05a:	b480      	push	{r7}
 800d05c:	b085      	sub	sp, #20
 800d05e:	af00      	add	r7, sp, #0
 800d060:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));

  /* Process Locked */
  __HAL_LOCK(husart);
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800d068:	2b01      	cmp	r3, #1
 800d06a:	d101      	bne.n	800d070 <HAL_USARTEx_DisableFifoMode+0x16>
 800d06c:	2302      	movs	r3, #2
 800d06e:	e027      	b.n	800d0c0 <HAL_USARTEx_DisableFifoMode+0x66>
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	2201      	movs	r2, #1
 800d074:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	2202      	movs	r2, #2
 800d07c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	681a      	ldr	r2, [r3, #0]
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	f022 0201 	bic.w	r2, r2, #1
 800d096:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d09e:	60fb      	str	r3, [r7, #12]
  husart->FifoMode = USART_FIFOMODE_DISABLE;
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	2200      	movs	r2, #0
 800d0a4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	68fa      	ldr	r2, [r7, #12]
 800d0ac:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	2201      	movs	r2, #1
 800d0b2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	2200      	movs	r2, #0
 800d0ba:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800d0be:	2300      	movs	r3, #0
}
 800d0c0:	4618      	mov	r0, r3
 800d0c2:	3714      	adds	r7, #20
 800d0c4:	46bd      	mov	sp, r7
 800d0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ca:	4770      	bx	lr

0800d0cc <HAL_USARTEx_SetTxFifoThreshold>:
  *            @arg @ref USART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetTxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 800d0cc:	b580      	push	{r7, lr}
 800d0ce:	b084      	sub	sp, #16
 800d0d0:	af00      	add	r7, sp, #0
 800d0d2:	6078      	str	r0, [r7, #4]
 800d0d4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800d0dc:	2b01      	cmp	r3, #1
 800d0de:	d101      	bne.n	800d0e4 <HAL_USARTEx_SetTxFifoThreshold+0x18>
 800d0e0:	2302      	movs	r3, #2
 800d0e2:	e02d      	b.n	800d140 <HAL_USARTEx_SetTxFifoThreshold+0x74>
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	2201      	movs	r2, #1
 800d0e8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	2202      	movs	r2, #2
 800d0f0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	681a      	ldr	r2, [r3, #0]
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	f022 0201 	bic.w	r2, r2, #1
 800d10a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	689b      	ldr	r3, [r3, #8]
 800d112:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	683a      	ldr	r2, [r7, #0]
 800d11c:	430a      	orrs	r2, r1
 800d11e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 800d120:	6878      	ldr	r0, [r7, #4]
 800d122:	f000 f84f 	bl	800d1c4 <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	68fa      	ldr	r2, [r7, #12]
 800d12c:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	2201      	movs	r2, #1
 800d132:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	2200      	movs	r2, #0
 800d13a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800d13e:	2300      	movs	r3, #0
}
 800d140:	4618      	mov	r0, r3
 800d142:	3710      	adds	r7, #16
 800d144:	46bd      	mov	sp, r7
 800d146:	bd80      	pop	{r7, pc}

0800d148 <HAL_USARTEx_SetRxFifoThreshold>:
  *            @arg @ref USART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetRxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 800d148:	b580      	push	{r7, lr}
 800d14a:	b084      	sub	sp, #16
 800d14c:	af00      	add	r7, sp, #0
 800d14e:	6078      	str	r0, [r7, #4]
 800d150:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800d158:	2b01      	cmp	r3, #1
 800d15a:	d101      	bne.n	800d160 <HAL_USARTEx_SetRxFifoThreshold+0x18>
 800d15c:	2302      	movs	r3, #2
 800d15e:	e02d      	b.n	800d1bc <HAL_USARTEx_SetRxFifoThreshold+0x74>
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	2201      	movs	r2, #1
 800d164:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	2202      	movs	r2, #2
 800d16c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	681a      	ldr	r2, [r3, #0]
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	f022 0201 	bic.w	r2, r2, #1
 800d186:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	689b      	ldr	r3, [r3, #8]
 800d18e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	683a      	ldr	r2, [r7, #0]
 800d198:	430a      	orrs	r2, r1
 800d19a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 800d19c:	6878      	ldr	r0, [r7, #4]
 800d19e:	f000 f811 	bl	800d1c4 <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	68fa      	ldr	r2, [r7, #12]
 800d1a8:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	2201      	movs	r2, #1
 800d1ae:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	2200      	movs	r2, #0
 800d1b6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800d1ba:	2300      	movs	r3, #0
}
 800d1bc:	4618      	mov	r0, r3
 800d1be:	3710      	adds	r7, #16
 800d1c0:	46bd      	mov	sp, r7
 800d1c2:	bd80      	pop	{r7, pc}

0800d1c4 <USARTEx_SetNbDataToProcess>:
  *       the USART configuration registers.
  * @param husart USART handle.
  * @retval None
  */
static void USARTEx_SetNbDataToProcess(USART_HandleTypeDef *husart)
{
 800d1c4:	b480      	push	{r7}
 800d1c6:	b085      	sub	sp, #20
 800d1c8:	af00      	add	r7, sp, #0
 800d1ca:	6078      	str	r0, [r7, #4]
  uint8_t tx_fifo_threshold;
  /* 2 0U/1U added for MISRAC2012-Rule-18.1_b and MISRAC2012-Rule-18.1_d */
  static const uint8_t numerator[]   = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (husart->FifoMode == USART_FIFOMODE_DISABLE)
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d106      	bne.n	800d1e2 <USARTEx_SetNbDataToProcess+0x1e>
  {
    husart->NbTxDataToProcess = 1U;
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	2201      	movs	r2, #1
 800d1d8:	879a      	strh	r2, [r3, #60]	; 0x3c
    husart->NbRxDataToProcess = 1U;
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	2201      	movs	r2, #1
 800d1de:	875a      	strh	r2, [r3, #58]	; 0x3a
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                                (uint16_t)denominator[tx_fifo_threshold];
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                                (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d1e0:	e02f      	b.n	800d242 <USARTEx_SetNbDataToProcess+0x7e>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d1e2:	2310      	movs	r3, #16
 800d1e4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d1e6:	2310      	movs	r3, #16
 800d1e8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos) & 0xFFU);
 800d1f0:	0e5b      	lsrs	r3, r3, #25
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800d1f2:	b2db      	uxtb	r3, r3
 800d1f4:	f003 0307 	and.w	r3, r3, #7
 800d1f8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos) & 0xFFU);
 800d200:	0f5b      	lsrs	r3, r3, #29
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800d202:	b2db      	uxtb	r3, r3
 800d204:	f003 0307 	and.w	r3, r3, #7
 800d208:	733b      	strb	r3, [r7, #12]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d20a:	7bbb      	ldrb	r3, [r7, #14]
 800d20c:	7b3a      	ldrb	r2, [r7, #12]
 800d20e:	4910      	ldr	r1, [pc, #64]	; (800d250 <USARTEx_SetNbDataToProcess+0x8c>)
 800d210:	5c8a      	ldrb	r2, [r1, r2]
 800d212:	fb02 f303 	mul.w	r3, r2, r3
                                (uint16_t)denominator[tx_fifo_threshold];
 800d216:	7b3a      	ldrb	r2, [r7, #12]
 800d218:	490e      	ldr	r1, [pc, #56]	; (800d254 <USARTEx_SetNbDataToProcess+0x90>)
 800d21a:	5c8a      	ldrb	r2, [r1, r2]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d21c:	fb93 f3f2 	sdiv	r3, r3, r2
 800d220:	b29a      	uxth	r2, r3
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	879a      	strh	r2, [r3, #60]	; 0x3c
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d226:	7bfb      	ldrb	r3, [r7, #15]
 800d228:	7b7a      	ldrb	r2, [r7, #13]
 800d22a:	4909      	ldr	r1, [pc, #36]	; (800d250 <USARTEx_SetNbDataToProcess+0x8c>)
 800d22c:	5c8a      	ldrb	r2, [r1, r2]
 800d22e:	fb02 f303 	mul.w	r3, r2, r3
                                (uint16_t)denominator[rx_fifo_threshold];
 800d232:	7b7a      	ldrb	r2, [r7, #13]
 800d234:	4907      	ldr	r1, [pc, #28]	; (800d254 <USARTEx_SetNbDataToProcess+0x90>)
 800d236:	5c8a      	ldrb	r2, [r1, r2]
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d238:	fb93 f3f2 	sdiv	r3, r3, r2
 800d23c:	b29a      	uxth	r2, r3
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	875a      	strh	r2, [r3, #58]	; 0x3a
}
 800d242:	bf00      	nop
 800d244:	3714      	adds	r7, #20
 800d246:	46bd      	mov	sp, r7
 800d248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d24c:	4770      	bx	lr
 800d24e:	bf00      	nop
 800d250:	0800fbe4 	.word	0x0800fbe4
 800d254:	0800fbec 	.word	0x0800fbec

0800d258 <__errno>:
 800d258:	4b01      	ldr	r3, [pc, #4]	; (800d260 <__errno+0x8>)
 800d25a:	6818      	ldr	r0, [r3, #0]
 800d25c:	4770      	bx	lr
 800d25e:	bf00      	nop
 800d260:	24000010 	.word	0x24000010

0800d264 <__libc_init_array>:
 800d264:	b570      	push	{r4, r5, r6, lr}
 800d266:	4d0d      	ldr	r5, [pc, #52]	; (800d29c <__libc_init_array+0x38>)
 800d268:	4c0d      	ldr	r4, [pc, #52]	; (800d2a0 <__libc_init_array+0x3c>)
 800d26a:	1b64      	subs	r4, r4, r5
 800d26c:	10a4      	asrs	r4, r4, #2
 800d26e:	2600      	movs	r6, #0
 800d270:	42a6      	cmp	r6, r4
 800d272:	d109      	bne.n	800d288 <__libc_init_array+0x24>
 800d274:	4d0b      	ldr	r5, [pc, #44]	; (800d2a4 <__libc_init_array+0x40>)
 800d276:	4c0c      	ldr	r4, [pc, #48]	; (800d2a8 <__libc_init_array+0x44>)
 800d278:	f002 fc60 	bl	800fb3c <_init>
 800d27c:	1b64      	subs	r4, r4, r5
 800d27e:	10a4      	asrs	r4, r4, #2
 800d280:	2600      	movs	r6, #0
 800d282:	42a6      	cmp	r6, r4
 800d284:	d105      	bne.n	800d292 <__libc_init_array+0x2e>
 800d286:	bd70      	pop	{r4, r5, r6, pc}
 800d288:	f855 3b04 	ldr.w	r3, [r5], #4
 800d28c:	4798      	blx	r3
 800d28e:	3601      	adds	r6, #1
 800d290:	e7ee      	b.n	800d270 <__libc_init_array+0xc>
 800d292:	f855 3b04 	ldr.w	r3, [r5], #4
 800d296:	4798      	blx	r3
 800d298:	3601      	adds	r6, #1
 800d29a:	e7f2      	b.n	800d282 <__libc_init_array+0x1e>
 800d29c:	0800ffdc 	.word	0x0800ffdc
 800d2a0:	0800ffdc 	.word	0x0800ffdc
 800d2a4:	0800ffdc 	.word	0x0800ffdc
 800d2a8:	0800ffe0 	.word	0x0800ffe0

0800d2ac <memcpy>:
 800d2ac:	440a      	add	r2, r1
 800d2ae:	4291      	cmp	r1, r2
 800d2b0:	f100 33ff 	add.w	r3, r0, #4294967295
 800d2b4:	d100      	bne.n	800d2b8 <memcpy+0xc>
 800d2b6:	4770      	bx	lr
 800d2b8:	b510      	push	{r4, lr}
 800d2ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d2be:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d2c2:	4291      	cmp	r1, r2
 800d2c4:	d1f9      	bne.n	800d2ba <memcpy+0xe>
 800d2c6:	bd10      	pop	{r4, pc}

0800d2c8 <memset>:
 800d2c8:	4402      	add	r2, r0
 800d2ca:	4603      	mov	r3, r0
 800d2cc:	4293      	cmp	r3, r2
 800d2ce:	d100      	bne.n	800d2d2 <memset+0xa>
 800d2d0:	4770      	bx	lr
 800d2d2:	f803 1b01 	strb.w	r1, [r3], #1
 800d2d6:	e7f9      	b.n	800d2cc <memset+0x4>

0800d2d8 <__cvt>:
 800d2d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d2da:	ed2d 8b02 	vpush	{d8}
 800d2de:	eeb0 8b40 	vmov.f64	d8, d0
 800d2e2:	b085      	sub	sp, #20
 800d2e4:	4617      	mov	r7, r2
 800d2e6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800d2e8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800d2ea:	ee18 2a90 	vmov	r2, s17
 800d2ee:	f025 0520 	bic.w	r5, r5, #32
 800d2f2:	2a00      	cmp	r2, #0
 800d2f4:	bfb6      	itet	lt
 800d2f6:	222d      	movlt	r2, #45	; 0x2d
 800d2f8:	2200      	movge	r2, #0
 800d2fa:	eeb1 8b40 	vneglt.f64	d8, d0
 800d2fe:	2d46      	cmp	r5, #70	; 0x46
 800d300:	460c      	mov	r4, r1
 800d302:	701a      	strb	r2, [r3, #0]
 800d304:	d004      	beq.n	800d310 <__cvt+0x38>
 800d306:	2d45      	cmp	r5, #69	; 0x45
 800d308:	d100      	bne.n	800d30c <__cvt+0x34>
 800d30a:	3401      	adds	r4, #1
 800d30c:	2102      	movs	r1, #2
 800d30e:	e000      	b.n	800d312 <__cvt+0x3a>
 800d310:	2103      	movs	r1, #3
 800d312:	ab03      	add	r3, sp, #12
 800d314:	9301      	str	r3, [sp, #4]
 800d316:	ab02      	add	r3, sp, #8
 800d318:	9300      	str	r3, [sp, #0]
 800d31a:	4622      	mov	r2, r4
 800d31c:	4633      	mov	r3, r6
 800d31e:	eeb0 0b48 	vmov.f64	d0, d8
 800d322:	f000 fd69 	bl	800ddf8 <_dtoa_r>
 800d326:	2d47      	cmp	r5, #71	; 0x47
 800d328:	d109      	bne.n	800d33e <__cvt+0x66>
 800d32a:	07fb      	lsls	r3, r7, #31
 800d32c:	d407      	bmi.n	800d33e <__cvt+0x66>
 800d32e:	9b03      	ldr	r3, [sp, #12]
 800d330:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d332:	1a1b      	subs	r3, r3, r0
 800d334:	6013      	str	r3, [r2, #0]
 800d336:	b005      	add	sp, #20
 800d338:	ecbd 8b02 	vpop	{d8}
 800d33c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d33e:	2d46      	cmp	r5, #70	; 0x46
 800d340:	eb00 0204 	add.w	r2, r0, r4
 800d344:	d10c      	bne.n	800d360 <__cvt+0x88>
 800d346:	7803      	ldrb	r3, [r0, #0]
 800d348:	2b30      	cmp	r3, #48	; 0x30
 800d34a:	d107      	bne.n	800d35c <__cvt+0x84>
 800d34c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d354:	bf1c      	itt	ne
 800d356:	f1c4 0401 	rsbne	r4, r4, #1
 800d35a:	6034      	strne	r4, [r6, #0]
 800d35c:	6833      	ldr	r3, [r6, #0]
 800d35e:	441a      	add	r2, r3
 800d360:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d368:	bf08      	it	eq
 800d36a:	9203      	streq	r2, [sp, #12]
 800d36c:	2130      	movs	r1, #48	; 0x30
 800d36e:	9b03      	ldr	r3, [sp, #12]
 800d370:	4293      	cmp	r3, r2
 800d372:	d2dc      	bcs.n	800d32e <__cvt+0x56>
 800d374:	1c5c      	adds	r4, r3, #1
 800d376:	9403      	str	r4, [sp, #12]
 800d378:	7019      	strb	r1, [r3, #0]
 800d37a:	e7f8      	b.n	800d36e <__cvt+0x96>

0800d37c <__exponent>:
 800d37c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d37e:	4603      	mov	r3, r0
 800d380:	2900      	cmp	r1, #0
 800d382:	bfb8      	it	lt
 800d384:	4249      	neglt	r1, r1
 800d386:	f803 2b02 	strb.w	r2, [r3], #2
 800d38a:	bfb4      	ite	lt
 800d38c:	222d      	movlt	r2, #45	; 0x2d
 800d38e:	222b      	movge	r2, #43	; 0x2b
 800d390:	2909      	cmp	r1, #9
 800d392:	7042      	strb	r2, [r0, #1]
 800d394:	dd2a      	ble.n	800d3ec <__exponent+0x70>
 800d396:	f10d 0407 	add.w	r4, sp, #7
 800d39a:	46a4      	mov	ip, r4
 800d39c:	270a      	movs	r7, #10
 800d39e:	46a6      	mov	lr, r4
 800d3a0:	460a      	mov	r2, r1
 800d3a2:	fb91 f6f7 	sdiv	r6, r1, r7
 800d3a6:	fb07 1516 	mls	r5, r7, r6, r1
 800d3aa:	3530      	adds	r5, #48	; 0x30
 800d3ac:	2a63      	cmp	r2, #99	; 0x63
 800d3ae:	f104 34ff 	add.w	r4, r4, #4294967295
 800d3b2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800d3b6:	4631      	mov	r1, r6
 800d3b8:	dcf1      	bgt.n	800d39e <__exponent+0x22>
 800d3ba:	3130      	adds	r1, #48	; 0x30
 800d3bc:	f1ae 0502 	sub.w	r5, lr, #2
 800d3c0:	f804 1c01 	strb.w	r1, [r4, #-1]
 800d3c4:	1c44      	adds	r4, r0, #1
 800d3c6:	4629      	mov	r1, r5
 800d3c8:	4561      	cmp	r1, ip
 800d3ca:	d30a      	bcc.n	800d3e2 <__exponent+0x66>
 800d3cc:	f10d 0209 	add.w	r2, sp, #9
 800d3d0:	eba2 020e 	sub.w	r2, r2, lr
 800d3d4:	4565      	cmp	r5, ip
 800d3d6:	bf88      	it	hi
 800d3d8:	2200      	movhi	r2, #0
 800d3da:	4413      	add	r3, r2
 800d3dc:	1a18      	subs	r0, r3, r0
 800d3de:	b003      	add	sp, #12
 800d3e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d3e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d3e6:	f804 2f01 	strb.w	r2, [r4, #1]!
 800d3ea:	e7ed      	b.n	800d3c8 <__exponent+0x4c>
 800d3ec:	2330      	movs	r3, #48	; 0x30
 800d3ee:	3130      	adds	r1, #48	; 0x30
 800d3f0:	7083      	strb	r3, [r0, #2]
 800d3f2:	70c1      	strb	r1, [r0, #3]
 800d3f4:	1d03      	adds	r3, r0, #4
 800d3f6:	e7f1      	b.n	800d3dc <__exponent+0x60>

0800d3f8 <_printf_float>:
 800d3f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3fc:	b08b      	sub	sp, #44	; 0x2c
 800d3fe:	460c      	mov	r4, r1
 800d400:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800d404:	4616      	mov	r6, r2
 800d406:	461f      	mov	r7, r3
 800d408:	4605      	mov	r5, r0
 800d40a:	f001 fc2f 	bl	800ec6c <_localeconv_r>
 800d40e:	f8d0 b000 	ldr.w	fp, [r0]
 800d412:	4658      	mov	r0, fp
 800d414:	f7f2 ff64 	bl	80002e0 <strlen>
 800d418:	2300      	movs	r3, #0
 800d41a:	9308      	str	r3, [sp, #32]
 800d41c:	f8d8 3000 	ldr.w	r3, [r8]
 800d420:	f894 9018 	ldrb.w	r9, [r4, #24]
 800d424:	6822      	ldr	r2, [r4, #0]
 800d426:	3307      	adds	r3, #7
 800d428:	f023 0307 	bic.w	r3, r3, #7
 800d42c:	f103 0108 	add.w	r1, r3, #8
 800d430:	f8c8 1000 	str.w	r1, [r8]
 800d434:	4682      	mov	sl, r0
 800d436:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d43a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800d43e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800d6a0 <_printf_float+0x2a8>
 800d442:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800d446:	eeb0 6bc0 	vabs.f64	d6, d0
 800d44a:	eeb4 6b47 	vcmp.f64	d6, d7
 800d44e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d452:	dd24      	ble.n	800d49e <_printf_float+0xa6>
 800d454:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800d458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d45c:	d502      	bpl.n	800d464 <_printf_float+0x6c>
 800d45e:	232d      	movs	r3, #45	; 0x2d
 800d460:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d464:	4b90      	ldr	r3, [pc, #576]	; (800d6a8 <_printf_float+0x2b0>)
 800d466:	4891      	ldr	r0, [pc, #580]	; (800d6ac <_printf_float+0x2b4>)
 800d468:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800d46c:	bf94      	ite	ls
 800d46e:	4698      	movls	r8, r3
 800d470:	4680      	movhi	r8, r0
 800d472:	2303      	movs	r3, #3
 800d474:	6123      	str	r3, [r4, #16]
 800d476:	f022 0204 	bic.w	r2, r2, #4
 800d47a:	2300      	movs	r3, #0
 800d47c:	6022      	str	r2, [r4, #0]
 800d47e:	9304      	str	r3, [sp, #16]
 800d480:	9700      	str	r7, [sp, #0]
 800d482:	4633      	mov	r3, r6
 800d484:	aa09      	add	r2, sp, #36	; 0x24
 800d486:	4621      	mov	r1, r4
 800d488:	4628      	mov	r0, r5
 800d48a:	f000 f9d3 	bl	800d834 <_printf_common>
 800d48e:	3001      	adds	r0, #1
 800d490:	f040 808a 	bne.w	800d5a8 <_printf_float+0x1b0>
 800d494:	f04f 30ff 	mov.w	r0, #4294967295
 800d498:	b00b      	add	sp, #44	; 0x2c
 800d49a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d49e:	eeb4 0b40 	vcmp.f64	d0, d0
 800d4a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4a6:	d709      	bvc.n	800d4bc <_printf_float+0xc4>
 800d4a8:	ee10 3a90 	vmov	r3, s1
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	bfbc      	itt	lt
 800d4b0:	232d      	movlt	r3, #45	; 0x2d
 800d4b2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d4b6:	487e      	ldr	r0, [pc, #504]	; (800d6b0 <_printf_float+0x2b8>)
 800d4b8:	4b7e      	ldr	r3, [pc, #504]	; (800d6b4 <_printf_float+0x2bc>)
 800d4ba:	e7d5      	b.n	800d468 <_printf_float+0x70>
 800d4bc:	6863      	ldr	r3, [r4, #4]
 800d4be:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800d4c2:	9104      	str	r1, [sp, #16]
 800d4c4:	1c59      	adds	r1, r3, #1
 800d4c6:	d13c      	bne.n	800d542 <_printf_float+0x14a>
 800d4c8:	2306      	movs	r3, #6
 800d4ca:	6063      	str	r3, [r4, #4]
 800d4cc:	2300      	movs	r3, #0
 800d4ce:	9303      	str	r3, [sp, #12]
 800d4d0:	ab08      	add	r3, sp, #32
 800d4d2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800d4d6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d4da:	ab07      	add	r3, sp, #28
 800d4dc:	6861      	ldr	r1, [r4, #4]
 800d4de:	9300      	str	r3, [sp, #0]
 800d4e0:	6022      	str	r2, [r4, #0]
 800d4e2:	f10d 031b 	add.w	r3, sp, #27
 800d4e6:	4628      	mov	r0, r5
 800d4e8:	f7ff fef6 	bl	800d2d8 <__cvt>
 800d4ec:	9b04      	ldr	r3, [sp, #16]
 800d4ee:	9907      	ldr	r1, [sp, #28]
 800d4f0:	2b47      	cmp	r3, #71	; 0x47
 800d4f2:	4680      	mov	r8, r0
 800d4f4:	d108      	bne.n	800d508 <_printf_float+0x110>
 800d4f6:	1cc8      	adds	r0, r1, #3
 800d4f8:	db02      	blt.n	800d500 <_printf_float+0x108>
 800d4fa:	6863      	ldr	r3, [r4, #4]
 800d4fc:	4299      	cmp	r1, r3
 800d4fe:	dd41      	ble.n	800d584 <_printf_float+0x18c>
 800d500:	f1a9 0902 	sub.w	r9, r9, #2
 800d504:	fa5f f989 	uxtb.w	r9, r9
 800d508:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800d50c:	d820      	bhi.n	800d550 <_printf_float+0x158>
 800d50e:	3901      	subs	r1, #1
 800d510:	464a      	mov	r2, r9
 800d512:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d516:	9107      	str	r1, [sp, #28]
 800d518:	f7ff ff30 	bl	800d37c <__exponent>
 800d51c:	9a08      	ldr	r2, [sp, #32]
 800d51e:	9004      	str	r0, [sp, #16]
 800d520:	1813      	adds	r3, r2, r0
 800d522:	2a01      	cmp	r2, #1
 800d524:	6123      	str	r3, [r4, #16]
 800d526:	dc02      	bgt.n	800d52e <_printf_float+0x136>
 800d528:	6822      	ldr	r2, [r4, #0]
 800d52a:	07d2      	lsls	r2, r2, #31
 800d52c:	d501      	bpl.n	800d532 <_printf_float+0x13a>
 800d52e:	3301      	adds	r3, #1
 800d530:	6123      	str	r3, [r4, #16]
 800d532:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800d536:	2b00      	cmp	r3, #0
 800d538:	d0a2      	beq.n	800d480 <_printf_float+0x88>
 800d53a:	232d      	movs	r3, #45	; 0x2d
 800d53c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d540:	e79e      	b.n	800d480 <_printf_float+0x88>
 800d542:	9904      	ldr	r1, [sp, #16]
 800d544:	2947      	cmp	r1, #71	; 0x47
 800d546:	d1c1      	bne.n	800d4cc <_printf_float+0xd4>
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d1bf      	bne.n	800d4cc <_printf_float+0xd4>
 800d54c:	2301      	movs	r3, #1
 800d54e:	e7bc      	b.n	800d4ca <_printf_float+0xd2>
 800d550:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800d554:	d118      	bne.n	800d588 <_printf_float+0x190>
 800d556:	2900      	cmp	r1, #0
 800d558:	6863      	ldr	r3, [r4, #4]
 800d55a:	dd0b      	ble.n	800d574 <_printf_float+0x17c>
 800d55c:	6121      	str	r1, [r4, #16]
 800d55e:	b913      	cbnz	r3, 800d566 <_printf_float+0x16e>
 800d560:	6822      	ldr	r2, [r4, #0]
 800d562:	07d0      	lsls	r0, r2, #31
 800d564:	d502      	bpl.n	800d56c <_printf_float+0x174>
 800d566:	3301      	adds	r3, #1
 800d568:	440b      	add	r3, r1
 800d56a:	6123      	str	r3, [r4, #16]
 800d56c:	2300      	movs	r3, #0
 800d56e:	65a1      	str	r1, [r4, #88]	; 0x58
 800d570:	9304      	str	r3, [sp, #16]
 800d572:	e7de      	b.n	800d532 <_printf_float+0x13a>
 800d574:	b913      	cbnz	r3, 800d57c <_printf_float+0x184>
 800d576:	6822      	ldr	r2, [r4, #0]
 800d578:	07d2      	lsls	r2, r2, #31
 800d57a:	d501      	bpl.n	800d580 <_printf_float+0x188>
 800d57c:	3302      	adds	r3, #2
 800d57e:	e7f4      	b.n	800d56a <_printf_float+0x172>
 800d580:	2301      	movs	r3, #1
 800d582:	e7f2      	b.n	800d56a <_printf_float+0x172>
 800d584:	f04f 0967 	mov.w	r9, #103	; 0x67
 800d588:	9b08      	ldr	r3, [sp, #32]
 800d58a:	4299      	cmp	r1, r3
 800d58c:	db05      	blt.n	800d59a <_printf_float+0x1a2>
 800d58e:	6823      	ldr	r3, [r4, #0]
 800d590:	6121      	str	r1, [r4, #16]
 800d592:	07d8      	lsls	r0, r3, #31
 800d594:	d5ea      	bpl.n	800d56c <_printf_float+0x174>
 800d596:	1c4b      	adds	r3, r1, #1
 800d598:	e7e7      	b.n	800d56a <_printf_float+0x172>
 800d59a:	2900      	cmp	r1, #0
 800d59c:	bfd4      	ite	le
 800d59e:	f1c1 0202 	rsble	r2, r1, #2
 800d5a2:	2201      	movgt	r2, #1
 800d5a4:	4413      	add	r3, r2
 800d5a6:	e7e0      	b.n	800d56a <_printf_float+0x172>
 800d5a8:	6823      	ldr	r3, [r4, #0]
 800d5aa:	055a      	lsls	r2, r3, #21
 800d5ac:	d407      	bmi.n	800d5be <_printf_float+0x1c6>
 800d5ae:	6923      	ldr	r3, [r4, #16]
 800d5b0:	4642      	mov	r2, r8
 800d5b2:	4631      	mov	r1, r6
 800d5b4:	4628      	mov	r0, r5
 800d5b6:	47b8      	blx	r7
 800d5b8:	3001      	adds	r0, #1
 800d5ba:	d12a      	bne.n	800d612 <_printf_float+0x21a>
 800d5bc:	e76a      	b.n	800d494 <_printf_float+0x9c>
 800d5be:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800d5c2:	f240 80e2 	bls.w	800d78a <_printf_float+0x392>
 800d5c6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800d5ca:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d5ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5d2:	d133      	bne.n	800d63c <_printf_float+0x244>
 800d5d4:	4a38      	ldr	r2, [pc, #224]	; (800d6b8 <_printf_float+0x2c0>)
 800d5d6:	2301      	movs	r3, #1
 800d5d8:	4631      	mov	r1, r6
 800d5da:	4628      	mov	r0, r5
 800d5dc:	47b8      	blx	r7
 800d5de:	3001      	adds	r0, #1
 800d5e0:	f43f af58 	beq.w	800d494 <_printf_float+0x9c>
 800d5e4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800d5e8:	429a      	cmp	r2, r3
 800d5ea:	db02      	blt.n	800d5f2 <_printf_float+0x1fa>
 800d5ec:	6823      	ldr	r3, [r4, #0]
 800d5ee:	07d8      	lsls	r0, r3, #31
 800d5f0:	d50f      	bpl.n	800d612 <_printf_float+0x21a>
 800d5f2:	4653      	mov	r3, sl
 800d5f4:	465a      	mov	r2, fp
 800d5f6:	4631      	mov	r1, r6
 800d5f8:	4628      	mov	r0, r5
 800d5fa:	47b8      	blx	r7
 800d5fc:	3001      	adds	r0, #1
 800d5fe:	f43f af49 	beq.w	800d494 <_printf_float+0x9c>
 800d602:	f04f 0800 	mov.w	r8, #0
 800d606:	f104 091a 	add.w	r9, r4, #26
 800d60a:	9b08      	ldr	r3, [sp, #32]
 800d60c:	3b01      	subs	r3, #1
 800d60e:	4543      	cmp	r3, r8
 800d610:	dc09      	bgt.n	800d626 <_printf_float+0x22e>
 800d612:	6823      	ldr	r3, [r4, #0]
 800d614:	079b      	lsls	r3, r3, #30
 800d616:	f100 8108 	bmi.w	800d82a <_printf_float+0x432>
 800d61a:	68e0      	ldr	r0, [r4, #12]
 800d61c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d61e:	4298      	cmp	r0, r3
 800d620:	bfb8      	it	lt
 800d622:	4618      	movlt	r0, r3
 800d624:	e738      	b.n	800d498 <_printf_float+0xa0>
 800d626:	2301      	movs	r3, #1
 800d628:	464a      	mov	r2, r9
 800d62a:	4631      	mov	r1, r6
 800d62c:	4628      	mov	r0, r5
 800d62e:	47b8      	blx	r7
 800d630:	3001      	adds	r0, #1
 800d632:	f43f af2f 	beq.w	800d494 <_printf_float+0x9c>
 800d636:	f108 0801 	add.w	r8, r8, #1
 800d63a:	e7e6      	b.n	800d60a <_printf_float+0x212>
 800d63c:	9b07      	ldr	r3, [sp, #28]
 800d63e:	2b00      	cmp	r3, #0
 800d640:	dc3c      	bgt.n	800d6bc <_printf_float+0x2c4>
 800d642:	4a1d      	ldr	r2, [pc, #116]	; (800d6b8 <_printf_float+0x2c0>)
 800d644:	2301      	movs	r3, #1
 800d646:	4631      	mov	r1, r6
 800d648:	4628      	mov	r0, r5
 800d64a:	47b8      	blx	r7
 800d64c:	3001      	adds	r0, #1
 800d64e:	f43f af21 	beq.w	800d494 <_printf_float+0x9c>
 800d652:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800d656:	4313      	orrs	r3, r2
 800d658:	d102      	bne.n	800d660 <_printf_float+0x268>
 800d65a:	6823      	ldr	r3, [r4, #0]
 800d65c:	07d9      	lsls	r1, r3, #31
 800d65e:	d5d8      	bpl.n	800d612 <_printf_float+0x21a>
 800d660:	4653      	mov	r3, sl
 800d662:	465a      	mov	r2, fp
 800d664:	4631      	mov	r1, r6
 800d666:	4628      	mov	r0, r5
 800d668:	47b8      	blx	r7
 800d66a:	3001      	adds	r0, #1
 800d66c:	f43f af12 	beq.w	800d494 <_printf_float+0x9c>
 800d670:	f04f 0900 	mov.w	r9, #0
 800d674:	f104 0a1a 	add.w	sl, r4, #26
 800d678:	9b07      	ldr	r3, [sp, #28]
 800d67a:	425b      	negs	r3, r3
 800d67c:	454b      	cmp	r3, r9
 800d67e:	dc01      	bgt.n	800d684 <_printf_float+0x28c>
 800d680:	9b08      	ldr	r3, [sp, #32]
 800d682:	e795      	b.n	800d5b0 <_printf_float+0x1b8>
 800d684:	2301      	movs	r3, #1
 800d686:	4652      	mov	r2, sl
 800d688:	4631      	mov	r1, r6
 800d68a:	4628      	mov	r0, r5
 800d68c:	47b8      	blx	r7
 800d68e:	3001      	adds	r0, #1
 800d690:	f43f af00 	beq.w	800d494 <_printf_float+0x9c>
 800d694:	f109 0901 	add.w	r9, r9, #1
 800d698:	e7ee      	b.n	800d678 <_printf_float+0x280>
 800d69a:	bf00      	nop
 800d69c:	f3af 8000 	nop.w
 800d6a0:	ffffffff 	.word	0xffffffff
 800d6a4:	7fefffff 	.word	0x7fefffff
 800d6a8:	0800fbf8 	.word	0x0800fbf8
 800d6ac:	0800fbfc 	.word	0x0800fbfc
 800d6b0:	0800fc04 	.word	0x0800fc04
 800d6b4:	0800fc00 	.word	0x0800fc00
 800d6b8:	0800fc08 	.word	0x0800fc08
 800d6bc:	9a08      	ldr	r2, [sp, #32]
 800d6be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d6c0:	429a      	cmp	r2, r3
 800d6c2:	bfa8      	it	ge
 800d6c4:	461a      	movge	r2, r3
 800d6c6:	2a00      	cmp	r2, #0
 800d6c8:	4691      	mov	r9, r2
 800d6ca:	dc38      	bgt.n	800d73e <_printf_float+0x346>
 800d6cc:	2300      	movs	r3, #0
 800d6ce:	9305      	str	r3, [sp, #20]
 800d6d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d6d4:	f104 021a 	add.w	r2, r4, #26
 800d6d8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d6da:	9905      	ldr	r1, [sp, #20]
 800d6dc:	9304      	str	r3, [sp, #16]
 800d6de:	eba3 0309 	sub.w	r3, r3, r9
 800d6e2:	428b      	cmp	r3, r1
 800d6e4:	dc33      	bgt.n	800d74e <_printf_float+0x356>
 800d6e6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800d6ea:	429a      	cmp	r2, r3
 800d6ec:	db3c      	blt.n	800d768 <_printf_float+0x370>
 800d6ee:	6823      	ldr	r3, [r4, #0]
 800d6f0:	07da      	lsls	r2, r3, #31
 800d6f2:	d439      	bmi.n	800d768 <_printf_float+0x370>
 800d6f4:	9a08      	ldr	r2, [sp, #32]
 800d6f6:	9b04      	ldr	r3, [sp, #16]
 800d6f8:	9907      	ldr	r1, [sp, #28]
 800d6fa:	1ad3      	subs	r3, r2, r3
 800d6fc:	eba2 0901 	sub.w	r9, r2, r1
 800d700:	4599      	cmp	r9, r3
 800d702:	bfa8      	it	ge
 800d704:	4699      	movge	r9, r3
 800d706:	f1b9 0f00 	cmp.w	r9, #0
 800d70a:	dc35      	bgt.n	800d778 <_printf_float+0x380>
 800d70c:	f04f 0800 	mov.w	r8, #0
 800d710:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d714:	f104 0a1a 	add.w	sl, r4, #26
 800d718:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800d71c:	1a9b      	subs	r3, r3, r2
 800d71e:	eba3 0309 	sub.w	r3, r3, r9
 800d722:	4543      	cmp	r3, r8
 800d724:	f77f af75 	ble.w	800d612 <_printf_float+0x21a>
 800d728:	2301      	movs	r3, #1
 800d72a:	4652      	mov	r2, sl
 800d72c:	4631      	mov	r1, r6
 800d72e:	4628      	mov	r0, r5
 800d730:	47b8      	blx	r7
 800d732:	3001      	adds	r0, #1
 800d734:	f43f aeae 	beq.w	800d494 <_printf_float+0x9c>
 800d738:	f108 0801 	add.w	r8, r8, #1
 800d73c:	e7ec      	b.n	800d718 <_printf_float+0x320>
 800d73e:	4613      	mov	r3, r2
 800d740:	4631      	mov	r1, r6
 800d742:	4642      	mov	r2, r8
 800d744:	4628      	mov	r0, r5
 800d746:	47b8      	blx	r7
 800d748:	3001      	adds	r0, #1
 800d74a:	d1bf      	bne.n	800d6cc <_printf_float+0x2d4>
 800d74c:	e6a2      	b.n	800d494 <_printf_float+0x9c>
 800d74e:	2301      	movs	r3, #1
 800d750:	4631      	mov	r1, r6
 800d752:	4628      	mov	r0, r5
 800d754:	9204      	str	r2, [sp, #16]
 800d756:	47b8      	blx	r7
 800d758:	3001      	adds	r0, #1
 800d75a:	f43f ae9b 	beq.w	800d494 <_printf_float+0x9c>
 800d75e:	9b05      	ldr	r3, [sp, #20]
 800d760:	9a04      	ldr	r2, [sp, #16]
 800d762:	3301      	adds	r3, #1
 800d764:	9305      	str	r3, [sp, #20]
 800d766:	e7b7      	b.n	800d6d8 <_printf_float+0x2e0>
 800d768:	4653      	mov	r3, sl
 800d76a:	465a      	mov	r2, fp
 800d76c:	4631      	mov	r1, r6
 800d76e:	4628      	mov	r0, r5
 800d770:	47b8      	blx	r7
 800d772:	3001      	adds	r0, #1
 800d774:	d1be      	bne.n	800d6f4 <_printf_float+0x2fc>
 800d776:	e68d      	b.n	800d494 <_printf_float+0x9c>
 800d778:	9a04      	ldr	r2, [sp, #16]
 800d77a:	464b      	mov	r3, r9
 800d77c:	4442      	add	r2, r8
 800d77e:	4631      	mov	r1, r6
 800d780:	4628      	mov	r0, r5
 800d782:	47b8      	blx	r7
 800d784:	3001      	adds	r0, #1
 800d786:	d1c1      	bne.n	800d70c <_printf_float+0x314>
 800d788:	e684      	b.n	800d494 <_printf_float+0x9c>
 800d78a:	9a08      	ldr	r2, [sp, #32]
 800d78c:	2a01      	cmp	r2, #1
 800d78e:	dc01      	bgt.n	800d794 <_printf_float+0x39c>
 800d790:	07db      	lsls	r3, r3, #31
 800d792:	d537      	bpl.n	800d804 <_printf_float+0x40c>
 800d794:	2301      	movs	r3, #1
 800d796:	4642      	mov	r2, r8
 800d798:	4631      	mov	r1, r6
 800d79a:	4628      	mov	r0, r5
 800d79c:	47b8      	blx	r7
 800d79e:	3001      	adds	r0, #1
 800d7a0:	f43f ae78 	beq.w	800d494 <_printf_float+0x9c>
 800d7a4:	4653      	mov	r3, sl
 800d7a6:	465a      	mov	r2, fp
 800d7a8:	4631      	mov	r1, r6
 800d7aa:	4628      	mov	r0, r5
 800d7ac:	47b8      	blx	r7
 800d7ae:	3001      	adds	r0, #1
 800d7b0:	f43f ae70 	beq.w	800d494 <_printf_float+0x9c>
 800d7b4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800d7b8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d7bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7c0:	d01b      	beq.n	800d7fa <_printf_float+0x402>
 800d7c2:	9b08      	ldr	r3, [sp, #32]
 800d7c4:	f108 0201 	add.w	r2, r8, #1
 800d7c8:	3b01      	subs	r3, #1
 800d7ca:	4631      	mov	r1, r6
 800d7cc:	4628      	mov	r0, r5
 800d7ce:	47b8      	blx	r7
 800d7d0:	3001      	adds	r0, #1
 800d7d2:	d10e      	bne.n	800d7f2 <_printf_float+0x3fa>
 800d7d4:	e65e      	b.n	800d494 <_printf_float+0x9c>
 800d7d6:	2301      	movs	r3, #1
 800d7d8:	464a      	mov	r2, r9
 800d7da:	4631      	mov	r1, r6
 800d7dc:	4628      	mov	r0, r5
 800d7de:	47b8      	blx	r7
 800d7e0:	3001      	adds	r0, #1
 800d7e2:	f43f ae57 	beq.w	800d494 <_printf_float+0x9c>
 800d7e6:	f108 0801 	add.w	r8, r8, #1
 800d7ea:	9b08      	ldr	r3, [sp, #32]
 800d7ec:	3b01      	subs	r3, #1
 800d7ee:	4543      	cmp	r3, r8
 800d7f0:	dcf1      	bgt.n	800d7d6 <_printf_float+0x3de>
 800d7f2:	9b04      	ldr	r3, [sp, #16]
 800d7f4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d7f8:	e6db      	b.n	800d5b2 <_printf_float+0x1ba>
 800d7fa:	f04f 0800 	mov.w	r8, #0
 800d7fe:	f104 091a 	add.w	r9, r4, #26
 800d802:	e7f2      	b.n	800d7ea <_printf_float+0x3f2>
 800d804:	2301      	movs	r3, #1
 800d806:	4642      	mov	r2, r8
 800d808:	e7df      	b.n	800d7ca <_printf_float+0x3d2>
 800d80a:	2301      	movs	r3, #1
 800d80c:	464a      	mov	r2, r9
 800d80e:	4631      	mov	r1, r6
 800d810:	4628      	mov	r0, r5
 800d812:	47b8      	blx	r7
 800d814:	3001      	adds	r0, #1
 800d816:	f43f ae3d 	beq.w	800d494 <_printf_float+0x9c>
 800d81a:	f108 0801 	add.w	r8, r8, #1
 800d81e:	68e3      	ldr	r3, [r4, #12]
 800d820:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d822:	1a5b      	subs	r3, r3, r1
 800d824:	4543      	cmp	r3, r8
 800d826:	dcf0      	bgt.n	800d80a <_printf_float+0x412>
 800d828:	e6f7      	b.n	800d61a <_printf_float+0x222>
 800d82a:	f04f 0800 	mov.w	r8, #0
 800d82e:	f104 0919 	add.w	r9, r4, #25
 800d832:	e7f4      	b.n	800d81e <_printf_float+0x426>

0800d834 <_printf_common>:
 800d834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d838:	4616      	mov	r6, r2
 800d83a:	4699      	mov	r9, r3
 800d83c:	688a      	ldr	r2, [r1, #8]
 800d83e:	690b      	ldr	r3, [r1, #16]
 800d840:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d844:	4293      	cmp	r3, r2
 800d846:	bfb8      	it	lt
 800d848:	4613      	movlt	r3, r2
 800d84a:	6033      	str	r3, [r6, #0]
 800d84c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d850:	4607      	mov	r7, r0
 800d852:	460c      	mov	r4, r1
 800d854:	b10a      	cbz	r2, 800d85a <_printf_common+0x26>
 800d856:	3301      	adds	r3, #1
 800d858:	6033      	str	r3, [r6, #0]
 800d85a:	6823      	ldr	r3, [r4, #0]
 800d85c:	0699      	lsls	r1, r3, #26
 800d85e:	bf42      	ittt	mi
 800d860:	6833      	ldrmi	r3, [r6, #0]
 800d862:	3302      	addmi	r3, #2
 800d864:	6033      	strmi	r3, [r6, #0]
 800d866:	6825      	ldr	r5, [r4, #0]
 800d868:	f015 0506 	ands.w	r5, r5, #6
 800d86c:	d106      	bne.n	800d87c <_printf_common+0x48>
 800d86e:	f104 0a19 	add.w	sl, r4, #25
 800d872:	68e3      	ldr	r3, [r4, #12]
 800d874:	6832      	ldr	r2, [r6, #0]
 800d876:	1a9b      	subs	r3, r3, r2
 800d878:	42ab      	cmp	r3, r5
 800d87a:	dc26      	bgt.n	800d8ca <_printf_common+0x96>
 800d87c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d880:	1e13      	subs	r3, r2, #0
 800d882:	6822      	ldr	r2, [r4, #0]
 800d884:	bf18      	it	ne
 800d886:	2301      	movne	r3, #1
 800d888:	0692      	lsls	r2, r2, #26
 800d88a:	d42b      	bmi.n	800d8e4 <_printf_common+0xb0>
 800d88c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d890:	4649      	mov	r1, r9
 800d892:	4638      	mov	r0, r7
 800d894:	47c0      	blx	r8
 800d896:	3001      	adds	r0, #1
 800d898:	d01e      	beq.n	800d8d8 <_printf_common+0xa4>
 800d89a:	6823      	ldr	r3, [r4, #0]
 800d89c:	68e5      	ldr	r5, [r4, #12]
 800d89e:	6832      	ldr	r2, [r6, #0]
 800d8a0:	f003 0306 	and.w	r3, r3, #6
 800d8a4:	2b04      	cmp	r3, #4
 800d8a6:	bf08      	it	eq
 800d8a8:	1aad      	subeq	r5, r5, r2
 800d8aa:	68a3      	ldr	r3, [r4, #8]
 800d8ac:	6922      	ldr	r2, [r4, #16]
 800d8ae:	bf0c      	ite	eq
 800d8b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d8b4:	2500      	movne	r5, #0
 800d8b6:	4293      	cmp	r3, r2
 800d8b8:	bfc4      	itt	gt
 800d8ba:	1a9b      	subgt	r3, r3, r2
 800d8bc:	18ed      	addgt	r5, r5, r3
 800d8be:	2600      	movs	r6, #0
 800d8c0:	341a      	adds	r4, #26
 800d8c2:	42b5      	cmp	r5, r6
 800d8c4:	d11a      	bne.n	800d8fc <_printf_common+0xc8>
 800d8c6:	2000      	movs	r0, #0
 800d8c8:	e008      	b.n	800d8dc <_printf_common+0xa8>
 800d8ca:	2301      	movs	r3, #1
 800d8cc:	4652      	mov	r2, sl
 800d8ce:	4649      	mov	r1, r9
 800d8d0:	4638      	mov	r0, r7
 800d8d2:	47c0      	blx	r8
 800d8d4:	3001      	adds	r0, #1
 800d8d6:	d103      	bne.n	800d8e0 <_printf_common+0xac>
 800d8d8:	f04f 30ff 	mov.w	r0, #4294967295
 800d8dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8e0:	3501      	adds	r5, #1
 800d8e2:	e7c6      	b.n	800d872 <_printf_common+0x3e>
 800d8e4:	18e1      	adds	r1, r4, r3
 800d8e6:	1c5a      	adds	r2, r3, #1
 800d8e8:	2030      	movs	r0, #48	; 0x30
 800d8ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d8ee:	4422      	add	r2, r4
 800d8f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d8f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d8f8:	3302      	adds	r3, #2
 800d8fa:	e7c7      	b.n	800d88c <_printf_common+0x58>
 800d8fc:	2301      	movs	r3, #1
 800d8fe:	4622      	mov	r2, r4
 800d900:	4649      	mov	r1, r9
 800d902:	4638      	mov	r0, r7
 800d904:	47c0      	blx	r8
 800d906:	3001      	adds	r0, #1
 800d908:	d0e6      	beq.n	800d8d8 <_printf_common+0xa4>
 800d90a:	3601      	adds	r6, #1
 800d90c:	e7d9      	b.n	800d8c2 <_printf_common+0x8e>
	...

0800d910 <_printf_i>:
 800d910:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d914:	460c      	mov	r4, r1
 800d916:	4691      	mov	r9, r2
 800d918:	7e27      	ldrb	r7, [r4, #24]
 800d91a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d91c:	2f78      	cmp	r7, #120	; 0x78
 800d91e:	4680      	mov	r8, r0
 800d920:	469a      	mov	sl, r3
 800d922:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d926:	d807      	bhi.n	800d938 <_printf_i+0x28>
 800d928:	2f62      	cmp	r7, #98	; 0x62
 800d92a:	d80a      	bhi.n	800d942 <_printf_i+0x32>
 800d92c:	2f00      	cmp	r7, #0
 800d92e:	f000 80d8 	beq.w	800dae2 <_printf_i+0x1d2>
 800d932:	2f58      	cmp	r7, #88	; 0x58
 800d934:	f000 80a3 	beq.w	800da7e <_printf_i+0x16e>
 800d938:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d93c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d940:	e03a      	b.n	800d9b8 <_printf_i+0xa8>
 800d942:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d946:	2b15      	cmp	r3, #21
 800d948:	d8f6      	bhi.n	800d938 <_printf_i+0x28>
 800d94a:	a001      	add	r0, pc, #4	; (adr r0, 800d950 <_printf_i+0x40>)
 800d94c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800d950:	0800d9a9 	.word	0x0800d9a9
 800d954:	0800d9bd 	.word	0x0800d9bd
 800d958:	0800d939 	.word	0x0800d939
 800d95c:	0800d939 	.word	0x0800d939
 800d960:	0800d939 	.word	0x0800d939
 800d964:	0800d939 	.word	0x0800d939
 800d968:	0800d9bd 	.word	0x0800d9bd
 800d96c:	0800d939 	.word	0x0800d939
 800d970:	0800d939 	.word	0x0800d939
 800d974:	0800d939 	.word	0x0800d939
 800d978:	0800d939 	.word	0x0800d939
 800d97c:	0800dac9 	.word	0x0800dac9
 800d980:	0800d9ed 	.word	0x0800d9ed
 800d984:	0800daab 	.word	0x0800daab
 800d988:	0800d939 	.word	0x0800d939
 800d98c:	0800d939 	.word	0x0800d939
 800d990:	0800daeb 	.word	0x0800daeb
 800d994:	0800d939 	.word	0x0800d939
 800d998:	0800d9ed 	.word	0x0800d9ed
 800d99c:	0800d939 	.word	0x0800d939
 800d9a0:	0800d939 	.word	0x0800d939
 800d9a4:	0800dab3 	.word	0x0800dab3
 800d9a8:	680b      	ldr	r3, [r1, #0]
 800d9aa:	1d1a      	adds	r2, r3, #4
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	600a      	str	r2, [r1, #0]
 800d9b0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d9b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d9b8:	2301      	movs	r3, #1
 800d9ba:	e0a3      	b.n	800db04 <_printf_i+0x1f4>
 800d9bc:	6825      	ldr	r5, [r4, #0]
 800d9be:	6808      	ldr	r0, [r1, #0]
 800d9c0:	062e      	lsls	r6, r5, #24
 800d9c2:	f100 0304 	add.w	r3, r0, #4
 800d9c6:	d50a      	bpl.n	800d9de <_printf_i+0xce>
 800d9c8:	6805      	ldr	r5, [r0, #0]
 800d9ca:	600b      	str	r3, [r1, #0]
 800d9cc:	2d00      	cmp	r5, #0
 800d9ce:	da03      	bge.n	800d9d8 <_printf_i+0xc8>
 800d9d0:	232d      	movs	r3, #45	; 0x2d
 800d9d2:	426d      	negs	r5, r5
 800d9d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d9d8:	485e      	ldr	r0, [pc, #376]	; (800db54 <_printf_i+0x244>)
 800d9da:	230a      	movs	r3, #10
 800d9dc:	e019      	b.n	800da12 <_printf_i+0x102>
 800d9de:	f015 0f40 	tst.w	r5, #64	; 0x40
 800d9e2:	6805      	ldr	r5, [r0, #0]
 800d9e4:	600b      	str	r3, [r1, #0]
 800d9e6:	bf18      	it	ne
 800d9e8:	b22d      	sxthne	r5, r5
 800d9ea:	e7ef      	b.n	800d9cc <_printf_i+0xbc>
 800d9ec:	680b      	ldr	r3, [r1, #0]
 800d9ee:	6825      	ldr	r5, [r4, #0]
 800d9f0:	1d18      	adds	r0, r3, #4
 800d9f2:	6008      	str	r0, [r1, #0]
 800d9f4:	0628      	lsls	r0, r5, #24
 800d9f6:	d501      	bpl.n	800d9fc <_printf_i+0xec>
 800d9f8:	681d      	ldr	r5, [r3, #0]
 800d9fa:	e002      	b.n	800da02 <_printf_i+0xf2>
 800d9fc:	0669      	lsls	r1, r5, #25
 800d9fe:	d5fb      	bpl.n	800d9f8 <_printf_i+0xe8>
 800da00:	881d      	ldrh	r5, [r3, #0]
 800da02:	4854      	ldr	r0, [pc, #336]	; (800db54 <_printf_i+0x244>)
 800da04:	2f6f      	cmp	r7, #111	; 0x6f
 800da06:	bf0c      	ite	eq
 800da08:	2308      	moveq	r3, #8
 800da0a:	230a      	movne	r3, #10
 800da0c:	2100      	movs	r1, #0
 800da0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800da12:	6866      	ldr	r6, [r4, #4]
 800da14:	60a6      	str	r6, [r4, #8]
 800da16:	2e00      	cmp	r6, #0
 800da18:	bfa2      	ittt	ge
 800da1a:	6821      	ldrge	r1, [r4, #0]
 800da1c:	f021 0104 	bicge.w	r1, r1, #4
 800da20:	6021      	strge	r1, [r4, #0]
 800da22:	b90d      	cbnz	r5, 800da28 <_printf_i+0x118>
 800da24:	2e00      	cmp	r6, #0
 800da26:	d04d      	beq.n	800dac4 <_printf_i+0x1b4>
 800da28:	4616      	mov	r6, r2
 800da2a:	fbb5 f1f3 	udiv	r1, r5, r3
 800da2e:	fb03 5711 	mls	r7, r3, r1, r5
 800da32:	5dc7      	ldrb	r7, [r0, r7]
 800da34:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800da38:	462f      	mov	r7, r5
 800da3a:	42bb      	cmp	r3, r7
 800da3c:	460d      	mov	r5, r1
 800da3e:	d9f4      	bls.n	800da2a <_printf_i+0x11a>
 800da40:	2b08      	cmp	r3, #8
 800da42:	d10b      	bne.n	800da5c <_printf_i+0x14c>
 800da44:	6823      	ldr	r3, [r4, #0]
 800da46:	07df      	lsls	r7, r3, #31
 800da48:	d508      	bpl.n	800da5c <_printf_i+0x14c>
 800da4a:	6923      	ldr	r3, [r4, #16]
 800da4c:	6861      	ldr	r1, [r4, #4]
 800da4e:	4299      	cmp	r1, r3
 800da50:	bfde      	ittt	le
 800da52:	2330      	movle	r3, #48	; 0x30
 800da54:	f806 3c01 	strble.w	r3, [r6, #-1]
 800da58:	f106 36ff 	addle.w	r6, r6, #4294967295
 800da5c:	1b92      	subs	r2, r2, r6
 800da5e:	6122      	str	r2, [r4, #16]
 800da60:	f8cd a000 	str.w	sl, [sp]
 800da64:	464b      	mov	r3, r9
 800da66:	aa03      	add	r2, sp, #12
 800da68:	4621      	mov	r1, r4
 800da6a:	4640      	mov	r0, r8
 800da6c:	f7ff fee2 	bl	800d834 <_printf_common>
 800da70:	3001      	adds	r0, #1
 800da72:	d14c      	bne.n	800db0e <_printf_i+0x1fe>
 800da74:	f04f 30ff 	mov.w	r0, #4294967295
 800da78:	b004      	add	sp, #16
 800da7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da7e:	4835      	ldr	r0, [pc, #212]	; (800db54 <_printf_i+0x244>)
 800da80:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800da84:	6823      	ldr	r3, [r4, #0]
 800da86:	680e      	ldr	r6, [r1, #0]
 800da88:	061f      	lsls	r7, r3, #24
 800da8a:	f856 5b04 	ldr.w	r5, [r6], #4
 800da8e:	600e      	str	r6, [r1, #0]
 800da90:	d514      	bpl.n	800dabc <_printf_i+0x1ac>
 800da92:	07d9      	lsls	r1, r3, #31
 800da94:	bf44      	itt	mi
 800da96:	f043 0320 	orrmi.w	r3, r3, #32
 800da9a:	6023      	strmi	r3, [r4, #0]
 800da9c:	b91d      	cbnz	r5, 800daa6 <_printf_i+0x196>
 800da9e:	6823      	ldr	r3, [r4, #0]
 800daa0:	f023 0320 	bic.w	r3, r3, #32
 800daa4:	6023      	str	r3, [r4, #0]
 800daa6:	2310      	movs	r3, #16
 800daa8:	e7b0      	b.n	800da0c <_printf_i+0xfc>
 800daaa:	6823      	ldr	r3, [r4, #0]
 800daac:	f043 0320 	orr.w	r3, r3, #32
 800dab0:	6023      	str	r3, [r4, #0]
 800dab2:	2378      	movs	r3, #120	; 0x78
 800dab4:	4828      	ldr	r0, [pc, #160]	; (800db58 <_printf_i+0x248>)
 800dab6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800daba:	e7e3      	b.n	800da84 <_printf_i+0x174>
 800dabc:	065e      	lsls	r6, r3, #25
 800dabe:	bf48      	it	mi
 800dac0:	b2ad      	uxthmi	r5, r5
 800dac2:	e7e6      	b.n	800da92 <_printf_i+0x182>
 800dac4:	4616      	mov	r6, r2
 800dac6:	e7bb      	b.n	800da40 <_printf_i+0x130>
 800dac8:	680b      	ldr	r3, [r1, #0]
 800daca:	6826      	ldr	r6, [r4, #0]
 800dacc:	6960      	ldr	r0, [r4, #20]
 800dace:	1d1d      	adds	r5, r3, #4
 800dad0:	600d      	str	r5, [r1, #0]
 800dad2:	0635      	lsls	r5, r6, #24
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	d501      	bpl.n	800dadc <_printf_i+0x1cc>
 800dad8:	6018      	str	r0, [r3, #0]
 800dada:	e002      	b.n	800dae2 <_printf_i+0x1d2>
 800dadc:	0671      	lsls	r1, r6, #25
 800dade:	d5fb      	bpl.n	800dad8 <_printf_i+0x1c8>
 800dae0:	8018      	strh	r0, [r3, #0]
 800dae2:	2300      	movs	r3, #0
 800dae4:	6123      	str	r3, [r4, #16]
 800dae6:	4616      	mov	r6, r2
 800dae8:	e7ba      	b.n	800da60 <_printf_i+0x150>
 800daea:	680b      	ldr	r3, [r1, #0]
 800daec:	1d1a      	adds	r2, r3, #4
 800daee:	600a      	str	r2, [r1, #0]
 800daf0:	681e      	ldr	r6, [r3, #0]
 800daf2:	6862      	ldr	r2, [r4, #4]
 800daf4:	2100      	movs	r1, #0
 800daf6:	4630      	mov	r0, r6
 800daf8:	f7f2 fbfa 	bl	80002f0 <memchr>
 800dafc:	b108      	cbz	r0, 800db02 <_printf_i+0x1f2>
 800dafe:	1b80      	subs	r0, r0, r6
 800db00:	6060      	str	r0, [r4, #4]
 800db02:	6863      	ldr	r3, [r4, #4]
 800db04:	6123      	str	r3, [r4, #16]
 800db06:	2300      	movs	r3, #0
 800db08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800db0c:	e7a8      	b.n	800da60 <_printf_i+0x150>
 800db0e:	6923      	ldr	r3, [r4, #16]
 800db10:	4632      	mov	r2, r6
 800db12:	4649      	mov	r1, r9
 800db14:	4640      	mov	r0, r8
 800db16:	47d0      	blx	sl
 800db18:	3001      	adds	r0, #1
 800db1a:	d0ab      	beq.n	800da74 <_printf_i+0x164>
 800db1c:	6823      	ldr	r3, [r4, #0]
 800db1e:	079b      	lsls	r3, r3, #30
 800db20:	d413      	bmi.n	800db4a <_printf_i+0x23a>
 800db22:	68e0      	ldr	r0, [r4, #12]
 800db24:	9b03      	ldr	r3, [sp, #12]
 800db26:	4298      	cmp	r0, r3
 800db28:	bfb8      	it	lt
 800db2a:	4618      	movlt	r0, r3
 800db2c:	e7a4      	b.n	800da78 <_printf_i+0x168>
 800db2e:	2301      	movs	r3, #1
 800db30:	4632      	mov	r2, r6
 800db32:	4649      	mov	r1, r9
 800db34:	4640      	mov	r0, r8
 800db36:	47d0      	blx	sl
 800db38:	3001      	adds	r0, #1
 800db3a:	d09b      	beq.n	800da74 <_printf_i+0x164>
 800db3c:	3501      	adds	r5, #1
 800db3e:	68e3      	ldr	r3, [r4, #12]
 800db40:	9903      	ldr	r1, [sp, #12]
 800db42:	1a5b      	subs	r3, r3, r1
 800db44:	42ab      	cmp	r3, r5
 800db46:	dcf2      	bgt.n	800db2e <_printf_i+0x21e>
 800db48:	e7eb      	b.n	800db22 <_printf_i+0x212>
 800db4a:	2500      	movs	r5, #0
 800db4c:	f104 0619 	add.w	r6, r4, #25
 800db50:	e7f5      	b.n	800db3e <_printf_i+0x22e>
 800db52:	bf00      	nop
 800db54:	0800fc0a 	.word	0x0800fc0a
 800db58:	0800fc1b 	.word	0x0800fc1b

0800db5c <__swbuf_r>:
 800db5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db5e:	460e      	mov	r6, r1
 800db60:	4614      	mov	r4, r2
 800db62:	4605      	mov	r5, r0
 800db64:	b118      	cbz	r0, 800db6e <__swbuf_r+0x12>
 800db66:	6983      	ldr	r3, [r0, #24]
 800db68:	b90b      	cbnz	r3, 800db6e <__swbuf_r+0x12>
 800db6a:	f000 ffe1 	bl	800eb30 <__sinit>
 800db6e:	4b21      	ldr	r3, [pc, #132]	; (800dbf4 <__swbuf_r+0x98>)
 800db70:	429c      	cmp	r4, r3
 800db72:	d12b      	bne.n	800dbcc <__swbuf_r+0x70>
 800db74:	686c      	ldr	r4, [r5, #4]
 800db76:	69a3      	ldr	r3, [r4, #24]
 800db78:	60a3      	str	r3, [r4, #8]
 800db7a:	89a3      	ldrh	r3, [r4, #12]
 800db7c:	071a      	lsls	r2, r3, #28
 800db7e:	d52f      	bpl.n	800dbe0 <__swbuf_r+0x84>
 800db80:	6923      	ldr	r3, [r4, #16]
 800db82:	b36b      	cbz	r3, 800dbe0 <__swbuf_r+0x84>
 800db84:	6923      	ldr	r3, [r4, #16]
 800db86:	6820      	ldr	r0, [r4, #0]
 800db88:	1ac0      	subs	r0, r0, r3
 800db8a:	6963      	ldr	r3, [r4, #20]
 800db8c:	b2f6      	uxtb	r6, r6
 800db8e:	4283      	cmp	r3, r0
 800db90:	4637      	mov	r7, r6
 800db92:	dc04      	bgt.n	800db9e <__swbuf_r+0x42>
 800db94:	4621      	mov	r1, r4
 800db96:	4628      	mov	r0, r5
 800db98:	f000 ff36 	bl	800ea08 <_fflush_r>
 800db9c:	bb30      	cbnz	r0, 800dbec <__swbuf_r+0x90>
 800db9e:	68a3      	ldr	r3, [r4, #8]
 800dba0:	3b01      	subs	r3, #1
 800dba2:	60a3      	str	r3, [r4, #8]
 800dba4:	6823      	ldr	r3, [r4, #0]
 800dba6:	1c5a      	adds	r2, r3, #1
 800dba8:	6022      	str	r2, [r4, #0]
 800dbaa:	701e      	strb	r6, [r3, #0]
 800dbac:	6963      	ldr	r3, [r4, #20]
 800dbae:	3001      	adds	r0, #1
 800dbb0:	4283      	cmp	r3, r0
 800dbb2:	d004      	beq.n	800dbbe <__swbuf_r+0x62>
 800dbb4:	89a3      	ldrh	r3, [r4, #12]
 800dbb6:	07db      	lsls	r3, r3, #31
 800dbb8:	d506      	bpl.n	800dbc8 <__swbuf_r+0x6c>
 800dbba:	2e0a      	cmp	r6, #10
 800dbbc:	d104      	bne.n	800dbc8 <__swbuf_r+0x6c>
 800dbbe:	4621      	mov	r1, r4
 800dbc0:	4628      	mov	r0, r5
 800dbc2:	f000 ff21 	bl	800ea08 <_fflush_r>
 800dbc6:	b988      	cbnz	r0, 800dbec <__swbuf_r+0x90>
 800dbc8:	4638      	mov	r0, r7
 800dbca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dbcc:	4b0a      	ldr	r3, [pc, #40]	; (800dbf8 <__swbuf_r+0x9c>)
 800dbce:	429c      	cmp	r4, r3
 800dbd0:	d101      	bne.n	800dbd6 <__swbuf_r+0x7a>
 800dbd2:	68ac      	ldr	r4, [r5, #8]
 800dbd4:	e7cf      	b.n	800db76 <__swbuf_r+0x1a>
 800dbd6:	4b09      	ldr	r3, [pc, #36]	; (800dbfc <__swbuf_r+0xa0>)
 800dbd8:	429c      	cmp	r4, r3
 800dbda:	bf08      	it	eq
 800dbdc:	68ec      	ldreq	r4, [r5, #12]
 800dbde:	e7ca      	b.n	800db76 <__swbuf_r+0x1a>
 800dbe0:	4621      	mov	r1, r4
 800dbe2:	4628      	mov	r0, r5
 800dbe4:	f000 f80c 	bl	800dc00 <__swsetup_r>
 800dbe8:	2800      	cmp	r0, #0
 800dbea:	d0cb      	beq.n	800db84 <__swbuf_r+0x28>
 800dbec:	f04f 37ff 	mov.w	r7, #4294967295
 800dbf0:	e7ea      	b.n	800dbc8 <__swbuf_r+0x6c>
 800dbf2:	bf00      	nop
 800dbf4:	0800fce0 	.word	0x0800fce0
 800dbf8:	0800fd00 	.word	0x0800fd00
 800dbfc:	0800fcc0 	.word	0x0800fcc0

0800dc00 <__swsetup_r>:
 800dc00:	4b32      	ldr	r3, [pc, #200]	; (800dccc <__swsetup_r+0xcc>)
 800dc02:	b570      	push	{r4, r5, r6, lr}
 800dc04:	681d      	ldr	r5, [r3, #0]
 800dc06:	4606      	mov	r6, r0
 800dc08:	460c      	mov	r4, r1
 800dc0a:	b125      	cbz	r5, 800dc16 <__swsetup_r+0x16>
 800dc0c:	69ab      	ldr	r3, [r5, #24]
 800dc0e:	b913      	cbnz	r3, 800dc16 <__swsetup_r+0x16>
 800dc10:	4628      	mov	r0, r5
 800dc12:	f000 ff8d 	bl	800eb30 <__sinit>
 800dc16:	4b2e      	ldr	r3, [pc, #184]	; (800dcd0 <__swsetup_r+0xd0>)
 800dc18:	429c      	cmp	r4, r3
 800dc1a:	d10f      	bne.n	800dc3c <__swsetup_r+0x3c>
 800dc1c:	686c      	ldr	r4, [r5, #4]
 800dc1e:	89a3      	ldrh	r3, [r4, #12]
 800dc20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dc24:	0719      	lsls	r1, r3, #28
 800dc26:	d42c      	bmi.n	800dc82 <__swsetup_r+0x82>
 800dc28:	06dd      	lsls	r5, r3, #27
 800dc2a:	d411      	bmi.n	800dc50 <__swsetup_r+0x50>
 800dc2c:	2309      	movs	r3, #9
 800dc2e:	6033      	str	r3, [r6, #0]
 800dc30:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800dc34:	81a3      	strh	r3, [r4, #12]
 800dc36:	f04f 30ff 	mov.w	r0, #4294967295
 800dc3a:	e03e      	b.n	800dcba <__swsetup_r+0xba>
 800dc3c:	4b25      	ldr	r3, [pc, #148]	; (800dcd4 <__swsetup_r+0xd4>)
 800dc3e:	429c      	cmp	r4, r3
 800dc40:	d101      	bne.n	800dc46 <__swsetup_r+0x46>
 800dc42:	68ac      	ldr	r4, [r5, #8]
 800dc44:	e7eb      	b.n	800dc1e <__swsetup_r+0x1e>
 800dc46:	4b24      	ldr	r3, [pc, #144]	; (800dcd8 <__swsetup_r+0xd8>)
 800dc48:	429c      	cmp	r4, r3
 800dc4a:	bf08      	it	eq
 800dc4c:	68ec      	ldreq	r4, [r5, #12]
 800dc4e:	e7e6      	b.n	800dc1e <__swsetup_r+0x1e>
 800dc50:	0758      	lsls	r0, r3, #29
 800dc52:	d512      	bpl.n	800dc7a <__swsetup_r+0x7a>
 800dc54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dc56:	b141      	cbz	r1, 800dc6a <__swsetup_r+0x6a>
 800dc58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dc5c:	4299      	cmp	r1, r3
 800dc5e:	d002      	beq.n	800dc66 <__swsetup_r+0x66>
 800dc60:	4630      	mov	r0, r6
 800dc62:	f001 fc05 	bl	800f470 <_free_r>
 800dc66:	2300      	movs	r3, #0
 800dc68:	6363      	str	r3, [r4, #52]	; 0x34
 800dc6a:	89a3      	ldrh	r3, [r4, #12]
 800dc6c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800dc70:	81a3      	strh	r3, [r4, #12]
 800dc72:	2300      	movs	r3, #0
 800dc74:	6063      	str	r3, [r4, #4]
 800dc76:	6923      	ldr	r3, [r4, #16]
 800dc78:	6023      	str	r3, [r4, #0]
 800dc7a:	89a3      	ldrh	r3, [r4, #12]
 800dc7c:	f043 0308 	orr.w	r3, r3, #8
 800dc80:	81a3      	strh	r3, [r4, #12]
 800dc82:	6923      	ldr	r3, [r4, #16]
 800dc84:	b94b      	cbnz	r3, 800dc9a <__swsetup_r+0x9a>
 800dc86:	89a3      	ldrh	r3, [r4, #12]
 800dc88:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800dc8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dc90:	d003      	beq.n	800dc9a <__swsetup_r+0x9a>
 800dc92:	4621      	mov	r1, r4
 800dc94:	4630      	mov	r0, r6
 800dc96:	f001 f815 	bl	800ecc4 <__smakebuf_r>
 800dc9a:	89a0      	ldrh	r0, [r4, #12]
 800dc9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dca0:	f010 0301 	ands.w	r3, r0, #1
 800dca4:	d00a      	beq.n	800dcbc <__swsetup_r+0xbc>
 800dca6:	2300      	movs	r3, #0
 800dca8:	60a3      	str	r3, [r4, #8]
 800dcaa:	6963      	ldr	r3, [r4, #20]
 800dcac:	425b      	negs	r3, r3
 800dcae:	61a3      	str	r3, [r4, #24]
 800dcb0:	6923      	ldr	r3, [r4, #16]
 800dcb2:	b943      	cbnz	r3, 800dcc6 <__swsetup_r+0xc6>
 800dcb4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800dcb8:	d1ba      	bne.n	800dc30 <__swsetup_r+0x30>
 800dcba:	bd70      	pop	{r4, r5, r6, pc}
 800dcbc:	0781      	lsls	r1, r0, #30
 800dcbe:	bf58      	it	pl
 800dcc0:	6963      	ldrpl	r3, [r4, #20]
 800dcc2:	60a3      	str	r3, [r4, #8]
 800dcc4:	e7f4      	b.n	800dcb0 <__swsetup_r+0xb0>
 800dcc6:	2000      	movs	r0, #0
 800dcc8:	e7f7      	b.n	800dcba <__swsetup_r+0xba>
 800dcca:	bf00      	nop
 800dccc:	24000010 	.word	0x24000010
 800dcd0:	0800fce0 	.word	0x0800fce0
 800dcd4:	0800fd00 	.word	0x0800fd00
 800dcd8:	0800fcc0 	.word	0x0800fcc0

0800dcdc <quorem>:
 800dcdc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dce0:	6903      	ldr	r3, [r0, #16]
 800dce2:	690c      	ldr	r4, [r1, #16]
 800dce4:	42a3      	cmp	r3, r4
 800dce6:	4607      	mov	r7, r0
 800dce8:	f2c0 8081 	blt.w	800ddee <quorem+0x112>
 800dcec:	3c01      	subs	r4, #1
 800dcee:	f101 0814 	add.w	r8, r1, #20
 800dcf2:	f100 0514 	add.w	r5, r0, #20
 800dcf6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dcfa:	9301      	str	r3, [sp, #4]
 800dcfc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800dd00:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dd04:	3301      	adds	r3, #1
 800dd06:	429a      	cmp	r2, r3
 800dd08:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800dd0c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800dd10:	fbb2 f6f3 	udiv	r6, r2, r3
 800dd14:	d331      	bcc.n	800dd7a <quorem+0x9e>
 800dd16:	f04f 0e00 	mov.w	lr, #0
 800dd1a:	4640      	mov	r0, r8
 800dd1c:	46ac      	mov	ip, r5
 800dd1e:	46f2      	mov	sl, lr
 800dd20:	f850 2b04 	ldr.w	r2, [r0], #4
 800dd24:	b293      	uxth	r3, r2
 800dd26:	fb06 e303 	mla	r3, r6, r3, lr
 800dd2a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800dd2e:	b29b      	uxth	r3, r3
 800dd30:	ebaa 0303 	sub.w	r3, sl, r3
 800dd34:	0c12      	lsrs	r2, r2, #16
 800dd36:	f8dc a000 	ldr.w	sl, [ip]
 800dd3a:	fb06 e202 	mla	r2, r6, r2, lr
 800dd3e:	fa13 f38a 	uxtah	r3, r3, sl
 800dd42:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800dd46:	fa1f fa82 	uxth.w	sl, r2
 800dd4a:	f8dc 2000 	ldr.w	r2, [ip]
 800dd4e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800dd52:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800dd56:	b29b      	uxth	r3, r3
 800dd58:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dd5c:	4581      	cmp	r9, r0
 800dd5e:	f84c 3b04 	str.w	r3, [ip], #4
 800dd62:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800dd66:	d2db      	bcs.n	800dd20 <quorem+0x44>
 800dd68:	f855 300b 	ldr.w	r3, [r5, fp]
 800dd6c:	b92b      	cbnz	r3, 800dd7a <quorem+0x9e>
 800dd6e:	9b01      	ldr	r3, [sp, #4]
 800dd70:	3b04      	subs	r3, #4
 800dd72:	429d      	cmp	r5, r3
 800dd74:	461a      	mov	r2, r3
 800dd76:	d32e      	bcc.n	800ddd6 <quorem+0xfa>
 800dd78:	613c      	str	r4, [r7, #16]
 800dd7a:	4638      	mov	r0, r7
 800dd7c:	f001 fa68 	bl	800f250 <__mcmp>
 800dd80:	2800      	cmp	r0, #0
 800dd82:	db24      	blt.n	800ddce <quorem+0xf2>
 800dd84:	3601      	adds	r6, #1
 800dd86:	4628      	mov	r0, r5
 800dd88:	f04f 0c00 	mov.w	ip, #0
 800dd8c:	f858 2b04 	ldr.w	r2, [r8], #4
 800dd90:	f8d0 e000 	ldr.w	lr, [r0]
 800dd94:	b293      	uxth	r3, r2
 800dd96:	ebac 0303 	sub.w	r3, ip, r3
 800dd9a:	0c12      	lsrs	r2, r2, #16
 800dd9c:	fa13 f38e 	uxtah	r3, r3, lr
 800dda0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800dda4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800dda8:	b29b      	uxth	r3, r3
 800ddaa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ddae:	45c1      	cmp	r9, r8
 800ddb0:	f840 3b04 	str.w	r3, [r0], #4
 800ddb4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ddb8:	d2e8      	bcs.n	800dd8c <quorem+0xb0>
 800ddba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ddbe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ddc2:	b922      	cbnz	r2, 800ddce <quorem+0xf2>
 800ddc4:	3b04      	subs	r3, #4
 800ddc6:	429d      	cmp	r5, r3
 800ddc8:	461a      	mov	r2, r3
 800ddca:	d30a      	bcc.n	800dde2 <quorem+0x106>
 800ddcc:	613c      	str	r4, [r7, #16]
 800ddce:	4630      	mov	r0, r6
 800ddd0:	b003      	add	sp, #12
 800ddd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddd6:	6812      	ldr	r2, [r2, #0]
 800ddd8:	3b04      	subs	r3, #4
 800ddda:	2a00      	cmp	r2, #0
 800dddc:	d1cc      	bne.n	800dd78 <quorem+0x9c>
 800ddde:	3c01      	subs	r4, #1
 800dde0:	e7c7      	b.n	800dd72 <quorem+0x96>
 800dde2:	6812      	ldr	r2, [r2, #0]
 800dde4:	3b04      	subs	r3, #4
 800dde6:	2a00      	cmp	r2, #0
 800dde8:	d1f0      	bne.n	800ddcc <quorem+0xf0>
 800ddea:	3c01      	subs	r4, #1
 800ddec:	e7eb      	b.n	800ddc6 <quorem+0xea>
 800ddee:	2000      	movs	r0, #0
 800ddf0:	e7ee      	b.n	800ddd0 <quorem+0xf4>
 800ddf2:	0000      	movs	r0, r0
 800ddf4:	0000      	movs	r0, r0
	...

0800ddf8 <_dtoa_r>:
 800ddf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddfc:	ec59 8b10 	vmov	r8, r9, d0
 800de00:	b095      	sub	sp, #84	; 0x54
 800de02:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800de04:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800de06:	9107      	str	r1, [sp, #28]
 800de08:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800de0c:	4606      	mov	r6, r0
 800de0e:	9209      	str	r2, [sp, #36]	; 0x24
 800de10:	9310      	str	r3, [sp, #64]	; 0x40
 800de12:	b975      	cbnz	r5, 800de32 <_dtoa_r+0x3a>
 800de14:	2010      	movs	r0, #16
 800de16:	f000 ff95 	bl	800ed44 <malloc>
 800de1a:	4602      	mov	r2, r0
 800de1c:	6270      	str	r0, [r6, #36]	; 0x24
 800de1e:	b920      	cbnz	r0, 800de2a <_dtoa_r+0x32>
 800de20:	4bab      	ldr	r3, [pc, #684]	; (800e0d0 <_dtoa_r+0x2d8>)
 800de22:	21ea      	movs	r1, #234	; 0xea
 800de24:	48ab      	ldr	r0, [pc, #684]	; (800e0d4 <_dtoa_r+0x2dc>)
 800de26:	f001 fd8d 	bl	800f944 <__assert_func>
 800de2a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800de2e:	6005      	str	r5, [r0, #0]
 800de30:	60c5      	str	r5, [r0, #12]
 800de32:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800de34:	6819      	ldr	r1, [r3, #0]
 800de36:	b151      	cbz	r1, 800de4e <_dtoa_r+0x56>
 800de38:	685a      	ldr	r2, [r3, #4]
 800de3a:	604a      	str	r2, [r1, #4]
 800de3c:	2301      	movs	r3, #1
 800de3e:	4093      	lsls	r3, r2
 800de40:	608b      	str	r3, [r1, #8]
 800de42:	4630      	mov	r0, r6
 800de44:	f000 ffc6 	bl	800edd4 <_Bfree>
 800de48:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800de4a:	2200      	movs	r2, #0
 800de4c:	601a      	str	r2, [r3, #0]
 800de4e:	f1b9 0300 	subs.w	r3, r9, #0
 800de52:	bfbb      	ittet	lt
 800de54:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800de58:	9303      	strlt	r3, [sp, #12]
 800de5a:	2300      	movge	r3, #0
 800de5c:	2201      	movlt	r2, #1
 800de5e:	bfac      	ite	ge
 800de60:	6023      	strge	r3, [r4, #0]
 800de62:	6022      	strlt	r2, [r4, #0]
 800de64:	4b9c      	ldr	r3, [pc, #624]	; (800e0d8 <_dtoa_r+0x2e0>)
 800de66:	9c03      	ldr	r4, [sp, #12]
 800de68:	43a3      	bics	r3, r4
 800de6a:	d11a      	bne.n	800dea2 <_dtoa_r+0xaa>
 800de6c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800de6e:	f242 730f 	movw	r3, #9999	; 0x270f
 800de72:	6013      	str	r3, [r2, #0]
 800de74:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800de78:	ea53 0308 	orrs.w	r3, r3, r8
 800de7c:	f000 8512 	beq.w	800e8a4 <_dtoa_r+0xaac>
 800de80:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800de82:	b953      	cbnz	r3, 800de9a <_dtoa_r+0xa2>
 800de84:	4b95      	ldr	r3, [pc, #596]	; (800e0dc <_dtoa_r+0x2e4>)
 800de86:	e01f      	b.n	800dec8 <_dtoa_r+0xd0>
 800de88:	4b95      	ldr	r3, [pc, #596]	; (800e0e0 <_dtoa_r+0x2e8>)
 800de8a:	9300      	str	r3, [sp, #0]
 800de8c:	3308      	adds	r3, #8
 800de8e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800de90:	6013      	str	r3, [r2, #0]
 800de92:	9800      	ldr	r0, [sp, #0]
 800de94:	b015      	add	sp, #84	; 0x54
 800de96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de9a:	4b90      	ldr	r3, [pc, #576]	; (800e0dc <_dtoa_r+0x2e4>)
 800de9c:	9300      	str	r3, [sp, #0]
 800de9e:	3303      	adds	r3, #3
 800dea0:	e7f5      	b.n	800de8e <_dtoa_r+0x96>
 800dea2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dea6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800deaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800deae:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800deb2:	d10b      	bne.n	800decc <_dtoa_r+0xd4>
 800deb4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800deb6:	2301      	movs	r3, #1
 800deb8:	6013      	str	r3, [r2, #0]
 800deba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800debc:	2b00      	cmp	r3, #0
 800debe:	f000 84ee 	beq.w	800e89e <_dtoa_r+0xaa6>
 800dec2:	4888      	ldr	r0, [pc, #544]	; (800e0e4 <_dtoa_r+0x2ec>)
 800dec4:	6018      	str	r0, [r3, #0]
 800dec6:	1e43      	subs	r3, r0, #1
 800dec8:	9300      	str	r3, [sp, #0]
 800deca:	e7e2      	b.n	800de92 <_dtoa_r+0x9a>
 800decc:	a913      	add	r1, sp, #76	; 0x4c
 800dece:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800ded2:	aa12      	add	r2, sp, #72	; 0x48
 800ded4:	4630      	mov	r0, r6
 800ded6:	f001 fa5f 	bl	800f398 <__d2b>
 800deda:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800dede:	4605      	mov	r5, r0
 800dee0:	9812      	ldr	r0, [sp, #72]	; 0x48
 800dee2:	2900      	cmp	r1, #0
 800dee4:	d047      	beq.n	800df76 <_dtoa_r+0x17e>
 800dee6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800dee8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800deec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800def0:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800def4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800def8:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800defc:	2400      	movs	r4, #0
 800defe:	ec43 2b16 	vmov	d6, r2, r3
 800df02:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800df06:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 800e0b8 <_dtoa_r+0x2c0>
 800df0a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800df0e:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 800e0c0 <_dtoa_r+0x2c8>
 800df12:	eea7 6b05 	vfma.f64	d6, d7, d5
 800df16:	eeb0 7b46 	vmov.f64	d7, d6
 800df1a:	ee06 1a90 	vmov	s13, r1
 800df1e:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 800df22:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800e0c8 <_dtoa_r+0x2d0>
 800df26:	eea5 7b06 	vfma.f64	d7, d5, d6
 800df2a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800df2e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800df32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df36:	ee16 ba90 	vmov	fp, s13
 800df3a:	9411      	str	r4, [sp, #68]	; 0x44
 800df3c:	d508      	bpl.n	800df50 <_dtoa_r+0x158>
 800df3e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800df42:	eeb4 6b47 	vcmp.f64	d6, d7
 800df46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df4a:	bf18      	it	ne
 800df4c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800df50:	f1bb 0f16 	cmp.w	fp, #22
 800df54:	d832      	bhi.n	800dfbc <_dtoa_r+0x1c4>
 800df56:	4b64      	ldr	r3, [pc, #400]	; (800e0e8 <_dtoa_r+0x2f0>)
 800df58:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800df5c:	ed93 7b00 	vldr	d7, [r3]
 800df60:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800df64:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800df68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df6c:	d501      	bpl.n	800df72 <_dtoa_r+0x17a>
 800df6e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800df72:	2300      	movs	r3, #0
 800df74:	e023      	b.n	800dfbe <_dtoa_r+0x1c6>
 800df76:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800df78:	4401      	add	r1, r0
 800df7a:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800df7e:	2b20      	cmp	r3, #32
 800df80:	bfc3      	ittte	gt
 800df82:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800df86:	fa04 f303 	lslgt.w	r3, r4, r3
 800df8a:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800df8e:	f1c3 0320 	rsble	r3, r3, #32
 800df92:	bfc6      	itte	gt
 800df94:	fa28 f804 	lsrgt.w	r8, r8, r4
 800df98:	ea43 0308 	orrgt.w	r3, r3, r8
 800df9c:	fa08 f303 	lslle.w	r3, r8, r3
 800dfa0:	ee07 3a90 	vmov	s15, r3
 800dfa4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800dfa8:	3901      	subs	r1, #1
 800dfaa:	ed8d 7b00 	vstr	d7, [sp]
 800dfae:	9c01      	ldr	r4, [sp, #4]
 800dfb0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dfb4:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800dfb8:	2401      	movs	r4, #1
 800dfba:	e7a0      	b.n	800defe <_dtoa_r+0x106>
 800dfbc:	2301      	movs	r3, #1
 800dfbe:	930f      	str	r3, [sp, #60]	; 0x3c
 800dfc0:	1a43      	subs	r3, r0, r1
 800dfc2:	1e5a      	subs	r2, r3, #1
 800dfc4:	bf45      	ittet	mi
 800dfc6:	f1c3 0301 	rsbmi	r3, r3, #1
 800dfca:	9305      	strmi	r3, [sp, #20]
 800dfcc:	2300      	movpl	r3, #0
 800dfce:	2300      	movmi	r3, #0
 800dfd0:	9206      	str	r2, [sp, #24]
 800dfd2:	bf54      	ite	pl
 800dfd4:	9305      	strpl	r3, [sp, #20]
 800dfd6:	9306      	strmi	r3, [sp, #24]
 800dfd8:	f1bb 0f00 	cmp.w	fp, #0
 800dfdc:	db18      	blt.n	800e010 <_dtoa_r+0x218>
 800dfde:	9b06      	ldr	r3, [sp, #24]
 800dfe0:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800dfe4:	445b      	add	r3, fp
 800dfe6:	9306      	str	r3, [sp, #24]
 800dfe8:	2300      	movs	r3, #0
 800dfea:	9a07      	ldr	r2, [sp, #28]
 800dfec:	2a09      	cmp	r2, #9
 800dfee:	d849      	bhi.n	800e084 <_dtoa_r+0x28c>
 800dff0:	2a05      	cmp	r2, #5
 800dff2:	bfc4      	itt	gt
 800dff4:	3a04      	subgt	r2, #4
 800dff6:	9207      	strgt	r2, [sp, #28]
 800dff8:	9a07      	ldr	r2, [sp, #28]
 800dffa:	f1a2 0202 	sub.w	r2, r2, #2
 800dffe:	bfcc      	ite	gt
 800e000:	2400      	movgt	r4, #0
 800e002:	2401      	movle	r4, #1
 800e004:	2a03      	cmp	r2, #3
 800e006:	d848      	bhi.n	800e09a <_dtoa_r+0x2a2>
 800e008:	e8df f002 	tbb	[pc, r2]
 800e00c:	3a2c2e0b 	.word	0x3a2c2e0b
 800e010:	9b05      	ldr	r3, [sp, #20]
 800e012:	2200      	movs	r2, #0
 800e014:	eba3 030b 	sub.w	r3, r3, fp
 800e018:	9305      	str	r3, [sp, #20]
 800e01a:	920e      	str	r2, [sp, #56]	; 0x38
 800e01c:	f1cb 0300 	rsb	r3, fp, #0
 800e020:	e7e3      	b.n	800dfea <_dtoa_r+0x1f2>
 800e022:	2200      	movs	r2, #0
 800e024:	9208      	str	r2, [sp, #32]
 800e026:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e028:	2a00      	cmp	r2, #0
 800e02a:	dc39      	bgt.n	800e0a0 <_dtoa_r+0x2a8>
 800e02c:	f04f 0a01 	mov.w	sl, #1
 800e030:	46d1      	mov	r9, sl
 800e032:	4652      	mov	r2, sl
 800e034:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800e038:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800e03a:	2100      	movs	r1, #0
 800e03c:	6079      	str	r1, [r7, #4]
 800e03e:	2004      	movs	r0, #4
 800e040:	f100 0c14 	add.w	ip, r0, #20
 800e044:	4594      	cmp	ip, r2
 800e046:	6879      	ldr	r1, [r7, #4]
 800e048:	d92f      	bls.n	800e0aa <_dtoa_r+0x2b2>
 800e04a:	4630      	mov	r0, r6
 800e04c:	930c      	str	r3, [sp, #48]	; 0x30
 800e04e:	f000 fe81 	bl	800ed54 <_Balloc>
 800e052:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e054:	9000      	str	r0, [sp, #0]
 800e056:	4602      	mov	r2, r0
 800e058:	2800      	cmp	r0, #0
 800e05a:	d149      	bne.n	800e0f0 <_dtoa_r+0x2f8>
 800e05c:	4b23      	ldr	r3, [pc, #140]	; (800e0ec <_dtoa_r+0x2f4>)
 800e05e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800e062:	e6df      	b.n	800de24 <_dtoa_r+0x2c>
 800e064:	2201      	movs	r2, #1
 800e066:	e7dd      	b.n	800e024 <_dtoa_r+0x22c>
 800e068:	2200      	movs	r2, #0
 800e06a:	9208      	str	r2, [sp, #32]
 800e06c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e06e:	eb0b 0a02 	add.w	sl, fp, r2
 800e072:	f10a 0901 	add.w	r9, sl, #1
 800e076:	464a      	mov	r2, r9
 800e078:	2a01      	cmp	r2, #1
 800e07a:	bfb8      	it	lt
 800e07c:	2201      	movlt	r2, #1
 800e07e:	e7db      	b.n	800e038 <_dtoa_r+0x240>
 800e080:	2201      	movs	r2, #1
 800e082:	e7f2      	b.n	800e06a <_dtoa_r+0x272>
 800e084:	2401      	movs	r4, #1
 800e086:	2200      	movs	r2, #0
 800e088:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800e08c:	f04f 3aff 	mov.w	sl, #4294967295
 800e090:	2100      	movs	r1, #0
 800e092:	46d1      	mov	r9, sl
 800e094:	2212      	movs	r2, #18
 800e096:	9109      	str	r1, [sp, #36]	; 0x24
 800e098:	e7ce      	b.n	800e038 <_dtoa_r+0x240>
 800e09a:	2201      	movs	r2, #1
 800e09c:	9208      	str	r2, [sp, #32]
 800e09e:	e7f5      	b.n	800e08c <_dtoa_r+0x294>
 800e0a0:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800e0a4:	46d1      	mov	r9, sl
 800e0a6:	4652      	mov	r2, sl
 800e0a8:	e7c6      	b.n	800e038 <_dtoa_r+0x240>
 800e0aa:	3101      	adds	r1, #1
 800e0ac:	6079      	str	r1, [r7, #4]
 800e0ae:	0040      	lsls	r0, r0, #1
 800e0b0:	e7c6      	b.n	800e040 <_dtoa_r+0x248>
 800e0b2:	bf00      	nop
 800e0b4:	f3af 8000 	nop.w
 800e0b8:	636f4361 	.word	0x636f4361
 800e0bc:	3fd287a7 	.word	0x3fd287a7
 800e0c0:	8b60c8b3 	.word	0x8b60c8b3
 800e0c4:	3fc68a28 	.word	0x3fc68a28
 800e0c8:	509f79fb 	.word	0x509f79fb
 800e0cc:	3fd34413 	.word	0x3fd34413
 800e0d0:	0800fc39 	.word	0x0800fc39
 800e0d4:	0800fc50 	.word	0x0800fc50
 800e0d8:	7ff00000 	.word	0x7ff00000
 800e0dc:	0800fc35 	.word	0x0800fc35
 800e0e0:	0800fc2c 	.word	0x0800fc2c
 800e0e4:	0800fc09 	.word	0x0800fc09
 800e0e8:	0800fda8 	.word	0x0800fda8
 800e0ec:	0800fcaf 	.word	0x0800fcaf
 800e0f0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800e0f2:	9900      	ldr	r1, [sp, #0]
 800e0f4:	6011      	str	r1, [r2, #0]
 800e0f6:	f1b9 0f0e 	cmp.w	r9, #14
 800e0fa:	d872      	bhi.n	800e1e2 <_dtoa_r+0x3ea>
 800e0fc:	2c00      	cmp	r4, #0
 800e0fe:	d070      	beq.n	800e1e2 <_dtoa_r+0x3ea>
 800e100:	f1bb 0f00 	cmp.w	fp, #0
 800e104:	f340 80a6 	ble.w	800e254 <_dtoa_r+0x45c>
 800e108:	49ca      	ldr	r1, [pc, #808]	; (800e434 <_dtoa_r+0x63c>)
 800e10a:	f00b 020f 	and.w	r2, fp, #15
 800e10e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800e112:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800e116:	ed92 7b00 	vldr	d7, [r2]
 800e11a:	ea4f 112b 	mov.w	r1, fp, asr #4
 800e11e:	f000 808d 	beq.w	800e23c <_dtoa_r+0x444>
 800e122:	4ac5      	ldr	r2, [pc, #788]	; (800e438 <_dtoa_r+0x640>)
 800e124:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800e128:	ed92 6b08 	vldr	d6, [r2, #32]
 800e12c:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800e130:	ed8d 6b02 	vstr	d6, [sp, #8]
 800e134:	f001 010f 	and.w	r1, r1, #15
 800e138:	2203      	movs	r2, #3
 800e13a:	48bf      	ldr	r0, [pc, #764]	; (800e438 <_dtoa_r+0x640>)
 800e13c:	2900      	cmp	r1, #0
 800e13e:	d17f      	bne.n	800e240 <_dtoa_r+0x448>
 800e140:	ed9d 6b02 	vldr	d6, [sp, #8]
 800e144:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800e148:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e14c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800e14e:	2900      	cmp	r1, #0
 800e150:	f000 80b2 	beq.w	800e2b8 <_dtoa_r+0x4c0>
 800e154:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800e158:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e15c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800e160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e164:	f140 80a8 	bpl.w	800e2b8 <_dtoa_r+0x4c0>
 800e168:	f1b9 0f00 	cmp.w	r9, #0
 800e16c:	f000 80a4 	beq.w	800e2b8 <_dtoa_r+0x4c0>
 800e170:	f1ba 0f00 	cmp.w	sl, #0
 800e174:	dd31      	ble.n	800e1da <_dtoa_r+0x3e2>
 800e176:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800e17a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e17e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e182:	f10b 37ff 	add.w	r7, fp, #4294967295
 800e186:	3201      	adds	r2, #1
 800e188:	4650      	mov	r0, sl
 800e18a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800e18e:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800e192:	ee07 2a90 	vmov	s15, r2
 800e196:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e19a:	eea7 5b06 	vfma.f64	d5, d7, d6
 800e19e:	ed8d 5b02 	vstr	d5, [sp, #8]
 800e1a2:	9c03      	ldr	r4, [sp, #12]
 800e1a4:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800e1a8:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800e1ac:	2800      	cmp	r0, #0
 800e1ae:	f040 8086 	bne.w	800e2be <_dtoa_r+0x4c6>
 800e1b2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800e1b6:	ee36 6b47 	vsub.f64	d6, d6, d7
 800e1ba:	ec42 1b17 	vmov	d7, r1, r2
 800e1be:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e1c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1c6:	f300 8272 	bgt.w	800e6ae <_dtoa_r+0x8b6>
 800e1ca:	eeb1 7b47 	vneg.f64	d7, d7
 800e1ce:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e1d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1d6:	f100 8267 	bmi.w	800e6a8 <_dtoa_r+0x8b0>
 800e1da:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 800e1de:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800e1e2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e1e4:	2a00      	cmp	r2, #0
 800e1e6:	f2c0 8129 	blt.w	800e43c <_dtoa_r+0x644>
 800e1ea:	f1bb 0f0e 	cmp.w	fp, #14
 800e1ee:	f300 8125 	bgt.w	800e43c <_dtoa_r+0x644>
 800e1f2:	4b90      	ldr	r3, [pc, #576]	; (800e434 <_dtoa_r+0x63c>)
 800e1f4:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e1f8:	ed93 6b00 	vldr	d6, [r3]
 800e1fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	f280 80c3 	bge.w	800e38a <_dtoa_r+0x592>
 800e204:	f1b9 0f00 	cmp.w	r9, #0
 800e208:	f300 80bf 	bgt.w	800e38a <_dtoa_r+0x592>
 800e20c:	f040 824c 	bne.w	800e6a8 <_dtoa_r+0x8b0>
 800e210:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800e214:	ee26 6b07 	vmul.f64	d6, d6, d7
 800e218:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e21c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e224:	464c      	mov	r4, r9
 800e226:	464f      	mov	r7, r9
 800e228:	f280 8222 	bge.w	800e670 <_dtoa_r+0x878>
 800e22c:	f8dd 8000 	ldr.w	r8, [sp]
 800e230:	2331      	movs	r3, #49	; 0x31
 800e232:	f808 3b01 	strb.w	r3, [r8], #1
 800e236:	f10b 0b01 	add.w	fp, fp, #1
 800e23a:	e21e      	b.n	800e67a <_dtoa_r+0x882>
 800e23c:	2202      	movs	r2, #2
 800e23e:	e77c      	b.n	800e13a <_dtoa_r+0x342>
 800e240:	07cc      	lsls	r4, r1, #31
 800e242:	d504      	bpl.n	800e24e <_dtoa_r+0x456>
 800e244:	ed90 6b00 	vldr	d6, [r0]
 800e248:	3201      	adds	r2, #1
 800e24a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e24e:	1049      	asrs	r1, r1, #1
 800e250:	3008      	adds	r0, #8
 800e252:	e773      	b.n	800e13c <_dtoa_r+0x344>
 800e254:	d02e      	beq.n	800e2b4 <_dtoa_r+0x4bc>
 800e256:	f1cb 0100 	rsb	r1, fp, #0
 800e25a:	4a76      	ldr	r2, [pc, #472]	; (800e434 <_dtoa_r+0x63c>)
 800e25c:	f001 000f 	and.w	r0, r1, #15
 800e260:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800e264:	ed92 7b00 	vldr	d7, [r2]
 800e268:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800e26c:	ee26 7b07 	vmul.f64	d7, d6, d7
 800e270:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800e274:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 800e278:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800e27c:	486e      	ldr	r0, [pc, #440]	; (800e438 <_dtoa_r+0x640>)
 800e27e:	1109      	asrs	r1, r1, #4
 800e280:	2400      	movs	r4, #0
 800e282:	2202      	movs	r2, #2
 800e284:	b939      	cbnz	r1, 800e296 <_dtoa_r+0x49e>
 800e286:	2c00      	cmp	r4, #0
 800e288:	f43f af60 	beq.w	800e14c <_dtoa_r+0x354>
 800e28c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e290:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e294:	e75a      	b.n	800e14c <_dtoa_r+0x354>
 800e296:	07cf      	lsls	r7, r1, #31
 800e298:	d509      	bpl.n	800e2ae <_dtoa_r+0x4b6>
 800e29a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800e29e:	ed90 7b00 	vldr	d7, [r0]
 800e2a2:	ee26 7b07 	vmul.f64	d7, d6, d7
 800e2a6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800e2aa:	3201      	adds	r2, #1
 800e2ac:	2401      	movs	r4, #1
 800e2ae:	1049      	asrs	r1, r1, #1
 800e2b0:	3008      	adds	r0, #8
 800e2b2:	e7e7      	b.n	800e284 <_dtoa_r+0x48c>
 800e2b4:	2202      	movs	r2, #2
 800e2b6:	e749      	b.n	800e14c <_dtoa_r+0x354>
 800e2b8:	465f      	mov	r7, fp
 800e2ba:	4648      	mov	r0, r9
 800e2bc:	e765      	b.n	800e18a <_dtoa_r+0x392>
 800e2be:	ec42 1b17 	vmov	d7, r1, r2
 800e2c2:	4a5c      	ldr	r2, [pc, #368]	; (800e434 <_dtoa_r+0x63c>)
 800e2c4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800e2c8:	ed12 4b02 	vldr	d4, [r2, #-8]
 800e2cc:	9a00      	ldr	r2, [sp, #0]
 800e2ce:	1814      	adds	r4, r2, r0
 800e2d0:	9a08      	ldr	r2, [sp, #32]
 800e2d2:	b352      	cbz	r2, 800e32a <_dtoa_r+0x532>
 800e2d4:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800e2d8:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800e2dc:	f8dd 8000 	ldr.w	r8, [sp]
 800e2e0:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800e2e4:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800e2e8:	ee35 7b47 	vsub.f64	d7, d5, d7
 800e2ec:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800e2f0:	ee14 2a90 	vmov	r2, s9
 800e2f4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800e2f8:	3230      	adds	r2, #48	; 0x30
 800e2fa:	ee36 6b45 	vsub.f64	d6, d6, d5
 800e2fe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e306:	f808 2b01 	strb.w	r2, [r8], #1
 800e30a:	d439      	bmi.n	800e380 <_dtoa_r+0x588>
 800e30c:	ee32 5b46 	vsub.f64	d5, d2, d6
 800e310:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800e314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e318:	d472      	bmi.n	800e400 <_dtoa_r+0x608>
 800e31a:	45a0      	cmp	r8, r4
 800e31c:	f43f af5d 	beq.w	800e1da <_dtoa_r+0x3e2>
 800e320:	ee27 7b03 	vmul.f64	d7, d7, d3
 800e324:	ee26 6b03 	vmul.f64	d6, d6, d3
 800e328:	e7e0      	b.n	800e2ec <_dtoa_r+0x4f4>
 800e32a:	f8dd 8000 	ldr.w	r8, [sp]
 800e32e:	ee27 7b04 	vmul.f64	d7, d7, d4
 800e332:	4621      	mov	r1, r4
 800e334:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800e338:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800e33c:	ee14 2a90 	vmov	r2, s9
 800e340:	3230      	adds	r2, #48	; 0x30
 800e342:	f808 2b01 	strb.w	r2, [r8], #1
 800e346:	45a0      	cmp	r8, r4
 800e348:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800e34c:	ee36 6b45 	vsub.f64	d6, d6, d5
 800e350:	d118      	bne.n	800e384 <_dtoa_r+0x58c>
 800e352:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800e356:	ee37 4b05 	vadd.f64	d4, d7, d5
 800e35a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800e35e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e362:	dc4d      	bgt.n	800e400 <_dtoa_r+0x608>
 800e364:	ee35 7b47 	vsub.f64	d7, d5, d7
 800e368:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e36c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e370:	f57f af33 	bpl.w	800e1da <_dtoa_r+0x3e2>
 800e374:	4688      	mov	r8, r1
 800e376:	3901      	subs	r1, #1
 800e378:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800e37c:	2b30      	cmp	r3, #48	; 0x30
 800e37e:	d0f9      	beq.n	800e374 <_dtoa_r+0x57c>
 800e380:	46bb      	mov	fp, r7
 800e382:	e02a      	b.n	800e3da <_dtoa_r+0x5e2>
 800e384:	ee26 6b03 	vmul.f64	d6, d6, d3
 800e388:	e7d6      	b.n	800e338 <_dtoa_r+0x540>
 800e38a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e38e:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800e392:	f8dd 8000 	ldr.w	r8, [sp]
 800e396:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800e39a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800e39e:	ee15 3a10 	vmov	r3, s10
 800e3a2:	3330      	adds	r3, #48	; 0x30
 800e3a4:	f808 3b01 	strb.w	r3, [r8], #1
 800e3a8:	9b00      	ldr	r3, [sp, #0]
 800e3aa:	eba8 0303 	sub.w	r3, r8, r3
 800e3ae:	4599      	cmp	r9, r3
 800e3b0:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800e3b4:	eea3 7b46 	vfms.f64	d7, d3, d6
 800e3b8:	d133      	bne.n	800e422 <_dtoa_r+0x62a>
 800e3ba:	ee37 7b07 	vadd.f64	d7, d7, d7
 800e3be:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800e3c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3c6:	dc1a      	bgt.n	800e3fe <_dtoa_r+0x606>
 800e3c8:	eeb4 7b46 	vcmp.f64	d7, d6
 800e3cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3d0:	d103      	bne.n	800e3da <_dtoa_r+0x5e2>
 800e3d2:	ee15 3a10 	vmov	r3, s10
 800e3d6:	07d9      	lsls	r1, r3, #31
 800e3d8:	d411      	bmi.n	800e3fe <_dtoa_r+0x606>
 800e3da:	4629      	mov	r1, r5
 800e3dc:	4630      	mov	r0, r6
 800e3de:	f000 fcf9 	bl	800edd4 <_Bfree>
 800e3e2:	2300      	movs	r3, #0
 800e3e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e3e6:	f888 3000 	strb.w	r3, [r8]
 800e3ea:	f10b 0301 	add.w	r3, fp, #1
 800e3ee:	6013      	str	r3, [r2, #0]
 800e3f0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	f43f ad4d 	beq.w	800de92 <_dtoa_r+0x9a>
 800e3f8:	f8c3 8000 	str.w	r8, [r3]
 800e3fc:	e549      	b.n	800de92 <_dtoa_r+0x9a>
 800e3fe:	465f      	mov	r7, fp
 800e400:	4643      	mov	r3, r8
 800e402:	4698      	mov	r8, r3
 800e404:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e408:	2a39      	cmp	r2, #57	; 0x39
 800e40a:	d106      	bne.n	800e41a <_dtoa_r+0x622>
 800e40c:	9a00      	ldr	r2, [sp, #0]
 800e40e:	429a      	cmp	r2, r3
 800e410:	d1f7      	bne.n	800e402 <_dtoa_r+0x60a>
 800e412:	9900      	ldr	r1, [sp, #0]
 800e414:	2230      	movs	r2, #48	; 0x30
 800e416:	3701      	adds	r7, #1
 800e418:	700a      	strb	r2, [r1, #0]
 800e41a:	781a      	ldrb	r2, [r3, #0]
 800e41c:	3201      	adds	r2, #1
 800e41e:	701a      	strb	r2, [r3, #0]
 800e420:	e7ae      	b.n	800e380 <_dtoa_r+0x588>
 800e422:	ee27 7b04 	vmul.f64	d7, d7, d4
 800e426:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e42a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e42e:	d1b2      	bne.n	800e396 <_dtoa_r+0x59e>
 800e430:	e7d3      	b.n	800e3da <_dtoa_r+0x5e2>
 800e432:	bf00      	nop
 800e434:	0800fda8 	.word	0x0800fda8
 800e438:	0800fd80 	.word	0x0800fd80
 800e43c:	9908      	ldr	r1, [sp, #32]
 800e43e:	2900      	cmp	r1, #0
 800e440:	f000 80d1 	beq.w	800e5e6 <_dtoa_r+0x7ee>
 800e444:	9907      	ldr	r1, [sp, #28]
 800e446:	2901      	cmp	r1, #1
 800e448:	f300 80b4 	bgt.w	800e5b4 <_dtoa_r+0x7bc>
 800e44c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800e44e:	2900      	cmp	r1, #0
 800e450:	f000 80ac 	beq.w	800e5ac <_dtoa_r+0x7b4>
 800e454:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800e458:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800e45c:	461c      	mov	r4, r3
 800e45e:	930a      	str	r3, [sp, #40]	; 0x28
 800e460:	9b05      	ldr	r3, [sp, #20]
 800e462:	4413      	add	r3, r2
 800e464:	9305      	str	r3, [sp, #20]
 800e466:	9b06      	ldr	r3, [sp, #24]
 800e468:	2101      	movs	r1, #1
 800e46a:	4413      	add	r3, r2
 800e46c:	4630      	mov	r0, r6
 800e46e:	9306      	str	r3, [sp, #24]
 800e470:	f000 fd6c 	bl	800ef4c <__i2b>
 800e474:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e476:	4607      	mov	r7, r0
 800e478:	f1b8 0f00 	cmp.w	r8, #0
 800e47c:	dd0d      	ble.n	800e49a <_dtoa_r+0x6a2>
 800e47e:	9a06      	ldr	r2, [sp, #24]
 800e480:	2a00      	cmp	r2, #0
 800e482:	dd0a      	ble.n	800e49a <_dtoa_r+0x6a2>
 800e484:	4542      	cmp	r2, r8
 800e486:	9905      	ldr	r1, [sp, #20]
 800e488:	bfa8      	it	ge
 800e48a:	4642      	movge	r2, r8
 800e48c:	1a89      	subs	r1, r1, r2
 800e48e:	9105      	str	r1, [sp, #20]
 800e490:	9906      	ldr	r1, [sp, #24]
 800e492:	eba8 0802 	sub.w	r8, r8, r2
 800e496:	1a8a      	subs	r2, r1, r2
 800e498:	9206      	str	r2, [sp, #24]
 800e49a:	b303      	cbz	r3, 800e4de <_dtoa_r+0x6e6>
 800e49c:	9a08      	ldr	r2, [sp, #32]
 800e49e:	2a00      	cmp	r2, #0
 800e4a0:	f000 80a6 	beq.w	800e5f0 <_dtoa_r+0x7f8>
 800e4a4:	2c00      	cmp	r4, #0
 800e4a6:	dd13      	ble.n	800e4d0 <_dtoa_r+0x6d8>
 800e4a8:	4639      	mov	r1, r7
 800e4aa:	4622      	mov	r2, r4
 800e4ac:	4630      	mov	r0, r6
 800e4ae:	930c      	str	r3, [sp, #48]	; 0x30
 800e4b0:	f000 fe08 	bl	800f0c4 <__pow5mult>
 800e4b4:	462a      	mov	r2, r5
 800e4b6:	4601      	mov	r1, r0
 800e4b8:	4607      	mov	r7, r0
 800e4ba:	4630      	mov	r0, r6
 800e4bc:	f000 fd5c 	bl	800ef78 <__multiply>
 800e4c0:	4629      	mov	r1, r5
 800e4c2:	900a      	str	r0, [sp, #40]	; 0x28
 800e4c4:	4630      	mov	r0, r6
 800e4c6:	f000 fc85 	bl	800edd4 <_Bfree>
 800e4ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e4cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e4ce:	4615      	mov	r5, r2
 800e4d0:	1b1a      	subs	r2, r3, r4
 800e4d2:	d004      	beq.n	800e4de <_dtoa_r+0x6e6>
 800e4d4:	4629      	mov	r1, r5
 800e4d6:	4630      	mov	r0, r6
 800e4d8:	f000 fdf4 	bl	800f0c4 <__pow5mult>
 800e4dc:	4605      	mov	r5, r0
 800e4de:	2101      	movs	r1, #1
 800e4e0:	4630      	mov	r0, r6
 800e4e2:	f000 fd33 	bl	800ef4c <__i2b>
 800e4e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	4604      	mov	r4, r0
 800e4ec:	f340 8082 	ble.w	800e5f4 <_dtoa_r+0x7fc>
 800e4f0:	461a      	mov	r2, r3
 800e4f2:	4601      	mov	r1, r0
 800e4f4:	4630      	mov	r0, r6
 800e4f6:	f000 fde5 	bl	800f0c4 <__pow5mult>
 800e4fa:	9b07      	ldr	r3, [sp, #28]
 800e4fc:	2b01      	cmp	r3, #1
 800e4fe:	4604      	mov	r4, r0
 800e500:	dd7b      	ble.n	800e5fa <_dtoa_r+0x802>
 800e502:	2300      	movs	r3, #0
 800e504:	930a      	str	r3, [sp, #40]	; 0x28
 800e506:	6922      	ldr	r2, [r4, #16]
 800e508:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800e50c:	6910      	ldr	r0, [r2, #16]
 800e50e:	f000 fccd 	bl	800eeac <__hi0bits>
 800e512:	f1c0 0020 	rsb	r0, r0, #32
 800e516:	9b06      	ldr	r3, [sp, #24]
 800e518:	4418      	add	r0, r3
 800e51a:	f010 001f 	ands.w	r0, r0, #31
 800e51e:	f000 808d 	beq.w	800e63c <_dtoa_r+0x844>
 800e522:	f1c0 0220 	rsb	r2, r0, #32
 800e526:	2a04      	cmp	r2, #4
 800e528:	f340 8086 	ble.w	800e638 <_dtoa_r+0x840>
 800e52c:	f1c0 001c 	rsb	r0, r0, #28
 800e530:	9b05      	ldr	r3, [sp, #20]
 800e532:	4403      	add	r3, r0
 800e534:	9305      	str	r3, [sp, #20]
 800e536:	9b06      	ldr	r3, [sp, #24]
 800e538:	4403      	add	r3, r0
 800e53a:	4480      	add	r8, r0
 800e53c:	9306      	str	r3, [sp, #24]
 800e53e:	9b05      	ldr	r3, [sp, #20]
 800e540:	2b00      	cmp	r3, #0
 800e542:	dd05      	ble.n	800e550 <_dtoa_r+0x758>
 800e544:	4629      	mov	r1, r5
 800e546:	461a      	mov	r2, r3
 800e548:	4630      	mov	r0, r6
 800e54a:	f000 fe15 	bl	800f178 <__lshift>
 800e54e:	4605      	mov	r5, r0
 800e550:	9b06      	ldr	r3, [sp, #24]
 800e552:	2b00      	cmp	r3, #0
 800e554:	dd05      	ble.n	800e562 <_dtoa_r+0x76a>
 800e556:	4621      	mov	r1, r4
 800e558:	461a      	mov	r2, r3
 800e55a:	4630      	mov	r0, r6
 800e55c:	f000 fe0c 	bl	800f178 <__lshift>
 800e560:	4604      	mov	r4, r0
 800e562:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e564:	2b00      	cmp	r3, #0
 800e566:	d06b      	beq.n	800e640 <_dtoa_r+0x848>
 800e568:	4621      	mov	r1, r4
 800e56a:	4628      	mov	r0, r5
 800e56c:	f000 fe70 	bl	800f250 <__mcmp>
 800e570:	2800      	cmp	r0, #0
 800e572:	da65      	bge.n	800e640 <_dtoa_r+0x848>
 800e574:	2300      	movs	r3, #0
 800e576:	4629      	mov	r1, r5
 800e578:	220a      	movs	r2, #10
 800e57a:	4630      	mov	r0, r6
 800e57c:	f000 fc4c 	bl	800ee18 <__multadd>
 800e580:	9b08      	ldr	r3, [sp, #32]
 800e582:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e586:	4605      	mov	r5, r0
 800e588:	2b00      	cmp	r3, #0
 800e58a:	f000 8192 	beq.w	800e8b2 <_dtoa_r+0xaba>
 800e58e:	4639      	mov	r1, r7
 800e590:	2300      	movs	r3, #0
 800e592:	220a      	movs	r2, #10
 800e594:	4630      	mov	r0, r6
 800e596:	f000 fc3f 	bl	800ee18 <__multadd>
 800e59a:	f1ba 0f00 	cmp.w	sl, #0
 800e59e:	4607      	mov	r7, r0
 800e5a0:	f300 808e 	bgt.w	800e6c0 <_dtoa_r+0x8c8>
 800e5a4:	9b07      	ldr	r3, [sp, #28]
 800e5a6:	2b02      	cmp	r3, #2
 800e5a8:	dc51      	bgt.n	800e64e <_dtoa_r+0x856>
 800e5aa:	e089      	b.n	800e6c0 <_dtoa_r+0x8c8>
 800e5ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e5ae:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800e5b2:	e751      	b.n	800e458 <_dtoa_r+0x660>
 800e5b4:	f109 34ff 	add.w	r4, r9, #4294967295
 800e5b8:	42a3      	cmp	r3, r4
 800e5ba:	bfbf      	itttt	lt
 800e5bc:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800e5be:	1ae3      	sublt	r3, r4, r3
 800e5c0:	18d2      	addlt	r2, r2, r3
 800e5c2:	4613      	movlt	r3, r2
 800e5c4:	bfb7      	itett	lt
 800e5c6:	930e      	strlt	r3, [sp, #56]	; 0x38
 800e5c8:	1b1c      	subge	r4, r3, r4
 800e5ca:	4623      	movlt	r3, r4
 800e5cc:	2400      	movlt	r4, #0
 800e5ce:	f1b9 0f00 	cmp.w	r9, #0
 800e5d2:	bfb5      	itete	lt
 800e5d4:	9a05      	ldrlt	r2, [sp, #20]
 800e5d6:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 800e5da:	eba2 0809 	sublt.w	r8, r2, r9
 800e5de:	464a      	movge	r2, r9
 800e5e0:	bfb8      	it	lt
 800e5e2:	2200      	movlt	r2, #0
 800e5e4:	e73b      	b.n	800e45e <_dtoa_r+0x666>
 800e5e6:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800e5ea:	9f08      	ldr	r7, [sp, #32]
 800e5ec:	461c      	mov	r4, r3
 800e5ee:	e743      	b.n	800e478 <_dtoa_r+0x680>
 800e5f0:	461a      	mov	r2, r3
 800e5f2:	e76f      	b.n	800e4d4 <_dtoa_r+0x6dc>
 800e5f4:	9b07      	ldr	r3, [sp, #28]
 800e5f6:	2b01      	cmp	r3, #1
 800e5f8:	dc18      	bgt.n	800e62c <_dtoa_r+0x834>
 800e5fa:	9b02      	ldr	r3, [sp, #8]
 800e5fc:	b9b3      	cbnz	r3, 800e62c <_dtoa_r+0x834>
 800e5fe:	9b03      	ldr	r3, [sp, #12]
 800e600:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800e604:	b9a2      	cbnz	r2, 800e630 <_dtoa_r+0x838>
 800e606:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800e60a:	0d12      	lsrs	r2, r2, #20
 800e60c:	0512      	lsls	r2, r2, #20
 800e60e:	b18a      	cbz	r2, 800e634 <_dtoa_r+0x83c>
 800e610:	9b05      	ldr	r3, [sp, #20]
 800e612:	3301      	adds	r3, #1
 800e614:	9305      	str	r3, [sp, #20]
 800e616:	9b06      	ldr	r3, [sp, #24]
 800e618:	3301      	adds	r3, #1
 800e61a:	9306      	str	r3, [sp, #24]
 800e61c:	2301      	movs	r3, #1
 800e61e:	930a      	str	r3, [sp, #40]	; 0x28
 800e620:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e622:	2b00      	cmp	r3, #0
 800e624:	f47f af6f 	bne.w	800e506 <_dtoa_r+0x70e>
 800e628:	2001      	movs	r0, #1
 800e62a:	e774      	b.n	800e516 <_dtoa_r+0x71e>
 800e62c:	2300      	movs	r3, #0
 800e62e:	e7f6      	b.n	800e61e <_dtoa_r+0x826>
 800e630:	9b02      	ldr	r3, [sp, #8]
 800e632:	e7f4      	b.n	800e61e <_dtoa_r+0x826>
 800e634:	920a      	str	r2, [sp, #40]	; 0x28
 800e636:	e7f3      	b.n	800e620 <_dtoa_r+0x828>
 800e638:	d081      	beq.n	800e53e <_dtoa_r+0x746>
 800e63a:	4610      	mov	r0, r2
 800e63c:	301c      	adds	r0, #28
 800e63e:	e777      	b.n	800e530 <_dtoa_r+0x738>
 800e640:	f1b9 0f00 	cmp.w	r9, #0
 800e644:	dc37      	bgt.n	800e6b6 <_dtoa_r+0x8be>
 800e646:	9b07      	ldr	r3, [sp, #28]
 800e648:	2b02      	cmp	r3, #2
 800e64a:	dd34      	ble.n	800e6b6 <_dtoa_r+0x8be>
 800e64c:	46ca      	mov	sl, r9
 800e64e:	f1ba 0f00 	cmp.w	sl, #0
 800e652:	d10d      	bne.n	800e670 <_dtoa_r+0x878>
 800e654:	4621      	mov	r1, r4
 800e656:	4653      	mov	r3, sl
 800e658:	2205      	movs	r2, #5
 800e65a:	4630      	mov	r0, r6
 800e65c:	f000 fbdc 	bl	800ee18 <__multadd>
 800e660:	4601      	mov	r1, r0
 800e662:	4604      	mov	r4, r0
 800e664:	4628      	mov	r0, r5
 800e666:	f000 fdf3 	bl	800f250 <__mcmp>
 800e66a:	2800      	cmp	r0, #0
 800e66c:	f73f adde 	bgt.w	800e22c <_dtoa_r+0x434>
 800e670:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e672:	f8dd 8000 	ldr.w	r8, [sp]
 800e676:	ea6f 0b03 	mvn.w	fp, r3
 800e67a:	f04f 0900 	mov.w	r9, #0
 800e67e:	4621      	mov	r1, r4
 800e680:	4630      	mov	r0, r6
 800e682:	f000 fba7 	bl	800edd4 <_Bfree>
 800e686:	2f00      	cmp	r7, #0
 800e688:	f43f aea7 	beq.w	800e3da <_dtoa_r+0x5e2>
 800e68c:	f1b9 0f00 	cmp.w	r9, #0
 800e690:	d005      	beq.n	800e69e <_dtoa_r+0x8a6>
 800e692:	45b9      	cmp	r9, r7
 800e694:	d003      	beq.n	800e69e <_dtoa_r+0x8a6>
 800e696:	4649      	mov	r1, r9
 800e698:	4630      	mov	r0, r6
 800e69a:	f000 fb9b 	bl	800edd4 <_Bfree>
 800e69e:	4639      	mov	r1, r7
 800e6a0:	4630      	mov	r0, r6
 800e6a2:	f000 fb97 	bl	800edd4 <_Bfree>
 800e6a6:	e698      	b.n	800e3da <_dtoa_r+0x5e2>
 800e6a8:	2400      	movs	r4, #0
 800e6aa:	4627      	mov	r7, r4
 800e6ac:	e7e0      	b.n	800e670 <_dtoa_r+0x878>
 800e6ae:	46bb      	mov	fp, r7
 800e6b0:	4604      	mov	r4, r0
 800e6b2:	4607      	mov	r7, r0
 800e6b4:	e5ba      	b.n	800e22c <_dtoa_r+0x434>
 800e6b6:	9b08      	ldr	r3, [sp, #32]
 800e6b8:	46ca      	mov	sl, r9
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	f000 8100 	beq.w	800e8c0 <_dtoa_r+0xac8>
 800e6c0:	f1b8 0f00 	cmp.w	r8, #0
 800e6c4:	dd05      	ble.n	800e6d2 <_dtoa_r+0x8da>
 800e6c6:	4639      	mov	r1, r7
 800e6c8:	4642      	mov	r2, r8
 800e6ca:	4630      	mov	r0, r6
 800e6cc:	f000 fd54 	bl	800f178 <__lshift>
 800e6d0:	4607      	mov	r7, r0
 800e6d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d05d      	beq.n	800e794 <_dtoa_r+0x99c>
 800e6d8:	6879      	ldr	r1, [r7, #4]
 800e6da:	4630      	mov	r0, r6
 800e6dc:	f000 fb3a 	bl	800ed54 <_Balloc>
 800e6e0:	4680      	mov	r8, r0
 800e6e2:	b928      	cbnz	r0, 800e6f0 <_dtoa_r+0x8f8>
 800e6e4:	4b82      	ldr	r3, [pc, #520]	; (800e8f0 <_dtoa_r+0xaf8>)
 800e6e6:	4602      	mov	r2, r0
 800e6e8:	f240 21ea 	movw	r1, #746	; 0x2ea
 800e6ec:	f7ff bb9a 	b.w	800de24 <_dtoa_r+0x2c>
 800e6f0:	693a      	ldr	r2, [r7, #16]
 800e6f2:	3202      	adds	r2, #2
 800e6f4:	0092      	lsls	r2, r2, #2
 800e6f6:	f107 010c 	add.w	r1, r7, #12
 800e6fa:	300c      	adds	r0, #12
 800e6fc:	f7fe fdd6 	bl	800d2ac <memcpy>
 800e700:	2201      	movs	r2, #1
 800e702:	4641      	mov	r1, r8
 800e704:	4630      	mov	r0, r6
 800e706:	f000 fd37 	bl	800f178 <__lshift>
 800e70a:	9b00      	ldr	r3, [sp, #0]
 800e70c:	3301      	adds	r3, #1
 800e70e:	9305      	str	r3, [sp, #20]
 800e710:	9b00      	ldr	r3, [sp, #0]
 800e712:	4453      	add	r3, sl
 800e714:	9309      	str	r3, [sp, #36]	; 0x24
 800e716:	9b02      	ldr	r3, [sp, #8]
 800e718:	f003 0301 	and.w	r3, r3, #1
 800e71c:	46b9      	mov	r9, r7
 800e71e:	9308      	str	r3, [sp, #32]
 800e720:	4607      	mov	r7, r0
 800e722:	9b05      	ldr	r3, [sp, #20]
 800e724:	4621      	mov	r1, r4
 800e726:	3b01      	subs	r3, #1
 800e728:	4628      	mov	r0, r5
 800e72a:	9302      	str	r3, [sp, #8]
 800e72c:	f7ff fad6 	bl	800dcdc <quorem>
 800e730:	4603      	mov	r3, r0
 800e732:	3330      	adds	r3, #48	; 0x30
 800e734:	9006      	str	r0, [sp, #24]
 800e736:	4649      	mov	r1, r9
 800e738:	4628      	mov	r0, r5
 800e73a:	930a      	str	r3, [sp, #40]	; 0x28
 800e73c:	f000 fd88 	bl	800f250 <__mcmp>
 800e740:	463a      	mov	r2, r7
 800e742:	4682      	mov	sl, r0
 800e744:	4621      	mov	r1, r4
 800e746:	4630      	mov	r0, r6
 800e748:	f000 fd9e 	bl	800f288 <__mdiff>
 800e74c:	68c2      	ldr	r2, [r0, #12]
 800e74e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e750:	4680      	mov	r8, r0
 800e752:	bb0a      	cbnz	r2, 800e798 <_dtoa_r+0x9a0>
 800e754:	4601      	mov	r1, r0
 800e756:	4628      	mov	r0, r5
 800e758:	f000 fd7a 	bl	800f250 <__mcmp>
 800e75c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e75e:	4602      	mov	r2, r0
 800e760:	4641      	mov	r1, r8
 800e762:	4630      	mov	r0, r6
 800e764:	920e      	str	r2, [sp, #56]	; 0x38
 800e766:	930a      	str	r3, [sp, #40]	; 0x28
 800e768:	f000 fb34 	bl	800edd4 <_Bfree>
 800e76c:	9b07      	ldr	r3, [sp, #28]
 800e76e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e770:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800e774:	ea43 0102 	orr.w	r1, r3, r2
 800e778:	9b08      	ldr	r3, [sp, #32]
 800e77a:	430b      	orrs	r3, r1
 800e77c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e77e:	d10d      	bne.n	800e79c <_dtoa_r+0x9a4>
 800e780:	2b39      	cmp	r3, #57	; 0x39
 800e782:	d029      	beq.n	800e7d8 <_dtoa_r+0x9e0>
 800e784:	f1ba 0f00 	cmp.w	sl, #0
 800e788:	dd01      	ble.n	800e78e <_dtoa_r+0x996>
 800e78a:	9b06      	ldr	r3, [sp, #24]
 800e78c:	3331      	adds	r3, #49	; 0x31
 800e78e:	9a02      	ldr	r2, [sp, #8]
 800e790:	7013      	strb	r3, [r2, #0]
 800e792:	e774      	b.n	800e67e <_dtoa_r+0x886>
 800e794:	4638      	mov	r0, r7
 800e796:	e7b8      	b.n	800e70a <_dtoa_r+0x912>
 800e798:	2201      	movs	r2, #1
 800e79a:	e7e1      	b.n	800e760 <_dtoa_r+0x968>
 800e79c:	f1ba 0f00 	cmp.w	sl, #0
 800e7a0:	db06      	blt.n	800e7b0 <_dtoa_r+0x9b8>
 800e7a2:	9907      	ldr	r1, [sp, #28]
 800e7a4:	ea41 0a0a 	orr.w	sl, r1, sl
 800e7a8:	9908      	ldr	r1, [sp, #32]
 800e7aa:	ea5a 0101 	orrs.w	r1, sl, r1
 800e7ae:	d120      	bne.n	800e7f2 <_dtoa_r+0x9fa>
 800e7b0:	2a00      	cmp	r2, #0
 800e7b2:	ddec      	ble.n	800e78e <_dtoa_r+0x996>
 800e7b4:	4629      	mov	r1, r5
 800e7b6:	2201      	movs	r2, #1
 800e7b8:	4630      	mov	r0, r6
 800e7ba:	9305      	str	r3, [sp, #20]
 800e7bc:	f000 fcdc 	bl	800f178 <__lshift>
 800e7c0:	4621      	mov	r1, r4
 800e7c2:	4605      	mov	r5, r0
 800e7c4:	f000 fd44 	bl	800f250 <__mcmp>
 800e7c8:	2800      	cmp	r0, #0
 800e7ca:	9b05      	ldr	r3, [sp, #20]
 800e7cc:	dc02      	bgt.n	800e7d4 <_dtoa_r+0x9dc>
 800e7ce:	d1de      	bne.n	800e78e <_dtoa_r+0x996>
 800e7d0:	07da      	lsls	r2, r3, #31
 800e7d2:	d5dc      	bpl.n	800e78e <_dtoa_r+0x996>
 800e7d4:	2b39      	cmp	r3, #57	; 0x39
 800e7d6:	d1d8      	bne.n	800e78a <_dtoa_r+0x992>
 800e7d8:	9a02      	ldr	r2, [sp, #8]
 800e7da:	2339      	movs	r3, #57	; 0x39
 800e7dc:	7013      	strb	r3, [r2, #0]
 800e7de:	4643      	mov	r3, r8
 800e7e0:	4698      	mov	r8, r3
 800e7e2:	3b01      	subs	r3, #1
 800e7e4:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800e7e8:	2a39      	cmp	r2, #57	; 0x39
 800e7ea:	d051      	beq.n	800e890 <_dtoa_r+0xa98>
 800e7ec:	3201      	adds	r2, #1
 800e7ee:	701a      	strb	r2, [r3, #0]
 800e7f0:	e745      	b.n	800e67e <_dtoa_r+0x886>
 800e7f2:	2a00      	cmp	r2, #0
 800e7f4:	dd03      	ble.n	800e7fe <_dtoa_r+0xa06>
 800e7f6:	2b39      	cmp	r3, #57	; 0x39
 800e7f8:	d0ee      	beq.n	800e7d8 <_dtoa_r+0x9e0>
 800e7fa:	3301      	adds	r3, #1
 800e7fc:	e7c7      	b.n	800e78e <_dtoa_r+0x996>
 800e7fe:	9a05      	ldr	r2, [sp, #20]
 800e800:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e802:	f802 3c01 	strb.w	r3, [r2, #-1]
 800e806:	428a      	cmp	r2, r1
 800e808:	d02b      	beq.n	800e862 <_dtoa_r+0xa6a>
 800e80a:	4629      	mov	r1, r5
 800e80c:	2300      	movs	r3, #0
 800e80e:	220a      	movs	r2, #10
 800e810:	4630      	mov	r0, r6
 800e812:	f000 fb01 	bl	800ee18 <__multadd>
 800e816:	45b9      	cmp	r9, r7
 800e818:	4605      	mov	r5, r0
 800e81a:	f04f 0300 	mov.w	r3, #0
 800e81e:	f04f 020a 	mov.w	r2, #10
 800e822:	4649      	mov	r1, r9
 800e824:	4630      	mov	r0, r6
 800e826:	d107      	bne.n	800e838 <_dtoa_r+0xa40>
 800e828:	f000 faf6 	bl	800ee18 <__multadd>
 800e82c:	4681      	mov	r9, r0
 800e82e:	4607      	mov	r7, r0
 800e830:	9b05      	ldr	r3, [sp, #20]
 800e832:	3301      	adds	r3, #1
 800e834:	9305      	str	r3, [sp, #20]
 800e836:	e774      	b.n	800e722 <_dtoa_r+0x92a>
 800e838:	f000 faee 	bl	800ee18 <__multadd>
 800e83c:	4639      	mov	r1, r7
 800e83e:	4681      	mov	r9, r0
 800e840:	2300      	movs	r3, #0
 800e842:	220a      	movs	r2, #10
 800e844:	4630      	mov	r0, r6
 800e846:	f000 fae7 	bl	800ee18 <__multadd>
 800e84a:	4607      	mov	r7, r0
 800e84c:	e7f0      	b.n	800e830 <_dtoa_r+0xa38>
 800e84e:	f1ba 0f00 	cmp.w	sl, #0
 800e852:	9a00      	ldr	r2, [sp, #0]
 800e854:	bfcc      	ite	gt
 800e856:	46d0      	movgt	r8, sl
 800e858:	f04f 0801 	movle.w	r8, #1
 800e85c:	4490      	add	r8, r2
 800e85e:	f04f 0900 	mov.w	r9, #0
 800e862:	4629      	mov	r1, r5
 800e864:	2201      	movs	r2, #1
 800e866:	4630      	mov	r0, r6
 800e868:	9302      	str	r3, [sp, #8]
 800e86a:	f000 fc85 	bl	800f178 <__lshift>
 800e86e:	4621      	mov	r1, r4
 800e870:	4605      	mov	r5, r0
 800e872:	f000 fced 	bl	800f250 <__mcmp>
 800e876:	2800      	cmp	r0, #0
 800e878:	dcb1      	bgt.n	800e7de <_dtoa_r+0x9e6>
 800e87a:	d102      	bne.n	800e882 <_dtoa_r+0xa8a>
 800e87c:	9b02      	ldr	r3, [sp, #8]
 800e87e:	07db      	lsls	r3, r3, #31
 800e880:	d4ad      	bmi.n	800e7de <_dtoa_r+0x9e6>
 800e882:	4643      	mov	r3, r8
 800e884:	4698      	mov	r8, r3
 800e886:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e88a:	2a30      	cmp	r2, #48	; 0x30
 800e88c:	d0fa      	beq.n	800e884 <_dtoa_r+0xa8c>
 800e88e:	e6f6      	b.n	800e67e <_dtoa_r+0x886>
 800e890:	9a00      	ldr	r2, [sp, #0]
 800e892:	429a      	cmp	r2, r3
 800e894:	d1a4      	bne.n	800e7e0 <_dtoa_r+0x9e8>
 800e896:	f10b 0b01 	add.w	fp, fp, #1
 800e89a:	2331      	movs	r3, #49	; 0x31
 800e89c:	e778      	b.n	800e790 <_dtoa_r+0x998>
 800e89e:	4b15      	ldr	r3, [pc, #84]	; (800e8f4 <_dtoa_r+0xafc>)
 800e8a0:	f7ff bb12 	b.w	800dec8 <_dtoa_r+0xd0>
 800e8a4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	f47f aaee 	bne.w	800de88 <_dtoa_r+0x90>
 800e8ac:	4b12      	ldr	r3, [pc, #72]	; (800e8f8 <_dtoa_r+0xb00>)
 800e8ae:	f7ff bb0b 	b.w	800dec8 <_dtoa_r+0xd0>
 800e8b2:	f1ba 0f00 	cmp.w	sl, #0
 800e8b6:	dc03      	bgt.n	800e8c0 <_dtoa_r+0xac8>
 800e8b8:	9b07      	ldr	r3, [sp, #28]
 800e8ba:	2b02      	cmp	r3, #2
 800e8bc:	f73f aec7 	bgt.w	800e64e <_dtoa_r+0x856>
 800e8c0:	f8dd 8000 	ldr.w	r8, [sp]
 800e8c4:	4621      	mov	r1, r4
 800e8c6:	4628      	mov	r0, r5
 800e8c8:	f7ff fa08 	bl	800dcdc <quorem>
 800e8cc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800e8d0:	f808 3b01 	strb.w	r3, [r8], #1
 800e8d4:	9a00      	ldr	r2, [sp, #0]
 800e8d6:	eba8 0202 	sub.w	r2, r8, r2
 800e8da:	4592      	cmp	sl, r2
 800e8dc:	ddb7      	ble.n	800e84e <_dtoa_r+0xa56>
 800e8de:	4629      	mov	r1, r5
 800e8e0:	2300      	movs	r3, #0
 800e8e2:	220a      	movs	r2, #10
 800e8e4:	4630      	mov	r0, r6
 800e8e6:	f000 fa97 	bl	800ee18 <__multadd>
 800e8ea:	4605      	mov	r5, r0
 800e8ec:	e7ea      	b.n	800e8c4 <_dtoa_r+0xacc>
 800e8ee:	bf00      	nop
 800e8f0:	0800fcaf 	.word	0x0800fcaf
 800e8f4:	0800fc08 	.word	0x0800fc08
 800e8f8:	0800fc2c 	.word	0x0800fc2c

0800e8fc <__sflush_r>:
 800e8fc:	898a      	ldrh	r2, [r1, #12]
 800e8fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e902:	4605      	mov	r5, r0
 800e904:	0710      	lsls	r0, r2, #28
 800e906:	460c      	mov	r4, r1
 800e908:	d458      	bmi.n	800e9bc <__sflush_r+0xc0>
 800e90a:	684b      	ldr	r3, [r1, #4]
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	dc05      	bgt.n	800e91c <__sflush_r+0x20>
 800e910:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e912:	2b00      	cmp	r3, #0
 800e914:	dc02      	bgt.n	800e91c <__sflush_r+0x20>
 800e916:	2000      	movs	r0, #0
 800e918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e91c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e91e:	2e00      	cmp	r6, #0
 800e920:	d0f9      	beq.n	800e916 <__sflush_r+0x1a>
 800e922:	2300      	movs	r3, #0
 800e924:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e928:	682f      	ldr	r7, [r5, #0]
 800e92a:	602b      	str	r3, [r5, #0]
 800e92c:	d032      	beq.n	800e994 <__sflush_r+0x98>
 800e92e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e930:	89a3      	ldrh	r3, [r4, #12]
 800e932:	075a      	lsls	r2, r3, #29
 800e934:	d505      	bpl.n	800e942 <__sflush_r+0x46>
 800e936:	6863      	ldr	r3, [r4, #4]
 800e938:	1ac0      	subs	r0, r0, r3
 800e93a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e93c:	b10b      	cbz	r3, 800e942 <__sflush_r+0x46>
 800e93e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e940:	1ac0      	subs	r0, r0, r3
 800e942:	2300      	movs	r3, #0
 800e944:	4602      	mov	r2, r0
 800e946:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e948:	6a21      	ldr	r1, [r4, #32]
 800e94a:	4628      	mov	r0, r5
 800e94c:	47b0      	blx	r6
 800e94e:	1c43      	adds	r3, r0, #1
 800e950:	89a3      	ldrh	r3, [r4, #12]
 800e952:	d106      	bne.n	800e962 <__sflush_r+0x66>
 800e954:	6829      	ldr	r1, [r5, #0]
 800e956:	291d      	cmp	r1, #29
 800e958:	d82c      	bhi.n	800e9b4 <__sflush_r+0xb8>
 800e95a:	4a2a      	ldr	r2, [pc, #168]	; (800ea04 <__sflush_r+0x108>)
 800e95c:	40ca      	lsrs	r2, r1
 800e95e:	07d6      	lsls	r6, r2, #31
 800e960:	d528      	bpl.n	800e9b4 <__sflush_r+0xb8>
 800e962:	2200      	movs	r2, #0
 800e964:	6062      	str	r2, [r4, #4]
 800e966:	04d9      	lsls	r1, r3, #19
 800e968:	6922      	ldr	r2, [r4, #16]
 800e96a:	6022      	str	r2, [r4, #0]
 800e96c:	d504      	bpl.n	800e978 <__sflush_r+0x7c>
 800e96e:	1c42      	adds	r2, r0, #1
 800e970:	d101      	bne.n	800e976 <__sflush_r+0x7a>
 800e972:	682b      	ldr	r3, [r5, #0]
 800e974:	b903      	cbnz	r3, 800e978 <__sflush_r+0x7c>
 800e976:	6560      	str	r0, [r4, #84]	; 0x54
 800e978:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e97a:	602f      	str	r7, [r5, #0]
 800e97c:	2900      	cmp	r1, #0
 800e97e:	d0ca      	beq.n	800e916 <__sflush_r+0x1a>
 800e980:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e984:	4299      	cmp	r1, r3
 800e986:	d002      	beq.n	800e98e <__sflush_r+0x92>
 800e988:	4628      	mov	r0, r5
 800e98a:	f000 fd71 	bl	800f470 <_free_r>
 800e98e:	2000      	movs	r0, #0
 800e990:	6360      	str	r0, [r4, #52]	; 0x34
 800e992:	e7c1      	b.n	800e918 <__sflush_r+0x1c>
 800e994:	6a21      	ldr	r1, [r4, #32]
 800e996:	2301      	movs	r3, #1
 800e998:	4628      	mov	r0, r5
 800e99a:	47b0      	blx	r6
 800e99c:	1c41      	adds	r1, r0, #1
 800e99e:	d1c7      	bne.n	800e930 <__sflush_r+0x34>
 800e9a0:	682b      	ldr	r3, [r5, #0]
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d0c4      	beq.n	800e930 <__sflush_r+0x34>
 800e9a6:	2b1d      	cmp	r3, #29
 800e9a8:	d001      	beq.n	800e9ae <__sflush_r+0xb2>
 800e9aa:	2b16      	cmp	r3, #22
 800e9ac:	d101      	bne.n	800e9b2 <__sflush_r+0xb6>
 800e9ae:	602f      	str	r7, [r5, #0]
 800e9b0:	e7b1      	b.n	800e916 <__sflush_r+0x1a>
 800e9b2:	89a3      	ldrh	r3, [r4, #12]
 800e9b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e9b8:	81a3      	strh	r3, [r4, #12]
 800e9ba:	e7ad      	b.n	800e918 <__sflush_r+0x1c>
 800e9bc:	690f      	ldr	r7, [r1, #16]
 800e9be:	2f00      	cmp	r7, #0
 800e9c0:	d0a9      	beq.n	800e916 <__sflush_r+0x1a>
 800e9c2:	0793      	lsls	r3, r2, #30
 800e9c4:	680e      	ldr	r6, [r1, #0]
 800e9c6:	bf08      	it	eq
 800e9c8:	694b      	ldreq	r3, [r1, #20]
 800e9ca:	600f      	str	r7, [r1, #0]
 800e9cc:	bf18      	it	ne
 800e9ce:	2300      	movne	r3, #0
 800e9d0:	eba6 0807 	sub.w	r8, r6, r7
 800e9d4:	608b      	str	r3, [r1, #8]
 800e9d6:	f1b8 0f00 	cmp.w	r8, #0
 800e9da:	dd9c      	ble.n	800e916 <__sflush_r+0x1a>
 800e9dc:	6a21      	ldr	r1, [r4, #32]
 800e9de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e9e0:	4643      	mov	r3, r8
 800e9e2:	463a      	mov	r2, r7
 800e9e4:	4628      	mov	r0, r5
 800e9e6:	47b0      	blx	r6
 800e9e8:	2800      	cmp	r0, #0
 800e9ea:	dc06      	bgt.n	800e9fa <__sflush_r+0xfe>
 800e9ec:	89a3      	ldrh	r3, [r4, #12]
 800e9ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e9f2:	81a3      	strh	r3, [r4, #12]
 800e9f4:	f04f 30ff 	mov.w	r0, #4294967295
 800e9f8:	e78e      	b.n	800e918 <__sflush_r+0x1c>
 800e9fa:	4407      	add	r7, r0
 800e9fc:	eba8 0800 	sub.w	r8, r8, r0
 800ea00:	e7e9      	b.n	800e9d6 <__sflush_r+0xda>
 800ea02:	bf00      	nop
 800ea04:	20400001 	.word	0x20400001

0800ea08 <_fflush_r>:
 800ea08:	b538      	push	{r3, r4, r5, lr}
 800ea0a:	690b      	ldr	r3, [r1, #16]
 800ea0c:	4605      	mov	r5, r0
 800ea0e:	460c      	mov	r4, r1
 800ea10:	b913      	cbnz	r3, 800ea18 <_fflush_r+0x10>
 800ea12:	2500      	movs	r5, #0
 800ea14:	4628      	mov	r0, r5
 800ea16:	bd38      	pop	{r3, r4, r5, pc}
 800ea18:	b118      	cbz	r0, 800ea22 <_fflush_r+0x1a>
 800ea1a:	6983      	ldr	r3, [r0, #24]
 800ea1c:	b90b      	cbnz	r3, 800ea22 <_fflush_r+0x1a>
 800ea1e:	f000 f887 	bl	800eb30 <__sinit>
 800ea22:	4b14      	ldr	r3, [pc, #80]	; (800ea74 <_fflush_r+0x6c>)
 800ea24:	429c      	cmp	r4, r3
 800ea26:	d11b      	bne.n	800ea60 <_fflush_r+0x58>
 800ea28:	686c      	ldr	r4, [r5, #4]
 800ea2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d0ef      	beq.n	800ea12 <_fflush_r+0xa>
 800ea32:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ea34:	07d0      	lsls	r0, r2, #31
 800ea36:	d404      	bmi.n	800ea42 <_fflush_r+0x3a>
 800ea38:	0599      	lsls	r1, r3, #22
 800ea3a:	d402      	bmi.n	800ea42 <_fflush_r+0x3a>
 800ea3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ea3e:	f000 f91a 	bl	800ec76 <__retarget_lock_acquire_recursive>
 800ea42:	4628      	mov	r0, r5
 800ea44:	4621      	mov	r1, r4
 800ea46:	f7ff ff59 	bl	800e8fc <__sflush_r>
 800ea4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ea4c:	07da      	lsls	r2, r3, #31
 800ea4e:	4605      	mov	r5, r0
 800ea50:	d4e0      	bmi.n	800ea14 <_fflush_r+0xc>
 800ea52:	89a3      	ldrh	r3, [r4, #12]
 800ea54:	059b      	lsls	r3, r3, #22
 800ea56:	d4dd      	bmi.n	800ea14 <_fflush_r+0xc>
 800ea58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ea5a:	f000 f90d 	bl	800ec78 <__retarget_lock_release_recursive>
 800ea5e:	e7d9      	b.n	800ea14 <_fflush_r+0xc>
 800ea60:	4b05      	ldr	r3, [pc, #20]	; (800ea78 <_fflush_r+0x70>)
 800ea62:	429c      	cmp	r4, r3
 800ea64:	d101      	bne.n	800ea6a <_fflush_r+0x62>
 800ea66:	68ac      	ldr	r4, [r5, #8]
 800ea68:	e7df      	b.n	800ea2a <_fflush_r+0x22>
 800ea6a:	4b04      	ldr	r3, [pc, #16]	; (800ea7c <_fflush_r+0x74>)
 800ea6c:	429c      	cmp	r4, r3
 800ea6e:	bf08      	it	eq
 800ea70:	68ec      	ldreq	r4, [r5, #12]
 800ea72:	e7da      	b.n	800ea2a <_fflush_r+0x22>
 800ea74:	0800fce0 	.word	0x0800fce0
 800ea78:	0800fd00 	.word	0x0800fd00
 800ea7c:	0800fcc0 	.word	0x0800fcc0

0800ea80 <std>:
 800ea80:	2300      	movs	r3, #0
 800ea82:	b510      	push	{r4, lr}
 800ea84:	4604      	mov	r4, r0
 800ea86:	e9c0 3300 	strd	r3, r3, [r0]
 800ea8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ea8e:	6083      	str	r3, [r0, #8]
 800ea90:	8181      	strh	r1, [r0, #12]
 800ea92:	6643      	str	r3, [r0, #100]	; 0x64
 800ea94:	81c2      	strh	r2, [r0, #14]
 800ea96:	6183      	str	r3, [r0, #24]
 800ea98:	4619      	mov	r1, r3
 800ea9a:	2208      	movs	r2, #8
 800ea9c:	305c      	adds	r0, #92	; 0x5c
 800ea9e:	f7fe fc13 	bl	800d2c8 <memset>
 800eaa2:	4b05      	ldr	r3, [pc, #20]	; (800eab8 <std+0x38>)
 800eaa4:	6263      	str	r3, [r4, #36]	; 0x24
 800eaa6:	4b05      	ldr	r3, [pc, #20]	; (800eabc <std+0x3c>)
 800eaa8:	62a3      	str	r3, [r4, #40]	; 0x28
 800eaaa:	4b05      	ldr	r3, [pc, #20]	; (800eac0 <std+0x40>)
 800eaac:	62e3      	str	r3, [r4, #44]	; 0x2c
 800eaae:	4b05      	ldr	r3, [pc, #20]	; (800eac4 <std+0x44>)
 800eab0:	6224      	str	r4, [r4, #32]
 800eab2:	6323      	str	r3, [r4, #48]	; 0x30
 800eab4:	bd10      	pop	{r4, pc}
 800eab6:	bf00      	nop
 800eab8:	0800f899 	.word	0x0800f899
 800eabc:	0800f8bb 	.word	0x0800f8bb
 800eac0:	0800f8f3 	.word	0x0800f8f3
 800eac4:	0800f917 	.word	0x0800f917

0800eac8 <_cleanup_r>:
 800eac8:	4901      	ldr	r1, [pc, #4]	; (800ead0 <_cleanup_r+0x8>)
 800eaca:	f000 b8af 	b.w	800ec2c <_fwalk_reent>
 800eace:	bf00      	nop
 800ead0:	0800ea09 	.word	0x0800ea09

0800ead4 <__sfmoreglue>:
 800ead4:	b570      	push	{r4, r5, r6, lr}
 800ead6:	1e4a      	subs	r2, r1, #1
 800ead8:	2568      	movs	r5, #104	; 0x68
 800eada:	4355      	muls	r5, r2
 800eadc:	460e      	mov	r6, r1
 800eade:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800eae2:	f000 fd15 	bl	800f510 <_malloc_r>
 800eae6:	4604      	mov	r4, r0
 800eae8:	b140      	cbz	r0, 800eafc <__sfmoreglue+0x28>
 800eaea:	2100      	movs	r1, #0
 800eaec:	e9c0 1600 	strd	r1, r6, [r0]
 800eaf0:	300c      	adds	r0, #12
 800eaf2:	60a0      	str	r0, [r4, #8]
 800eaf4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800eaf8:	f7fe fbe6 	bl	800d2c8 <memset>
 800eafc:	4620      	mov	r0, r4
 800eafe:	bd70      	pop	{r4, r5, r6, pc}

0800eb00 <__sfp_lock_acquire>:
 800eb00:	4801      	ldr	r0, [pc, #4]	; (800eb08 <__sfp_lock_acquire+0x8>)
 800eb02:	f000 b8b8 	b.w	800ec76 <__retarget_lock_acquire_recursive>
 800eb06:	bf00      	nop
 800eb08:	24000c6c 	.word	0x24000c6c

0800eb0c <__sfp_lock_release>:
 800eb0c:	4801      	ldr	r0, [pc, #4]	; (800eb14 <__sfp_lock_release+0x8>)
 800eb0e:	f000 b8b3 	b.w	800ec78 <__retarget_lock_release_recursive>
 800eb12:	bf00      	nop
 800eb14:	24000c6c 	.word	0x24000c6c

0800eb18 <__sinit_lock_acquire>:
 800eb18:	4801      	ldr	r0, [pc, #4]	; (800eb20 <__sinit_lock_acquire+0x8>)
 800eb1a:	f000 b8ac 	b.w	800ec76 <__retarget_lock_acquire_recursive>
 800eb1e:	bf00      	nop
 800eb20:	24000c67 	.word	0x24000c67

0800eb24 <__sinit_lock_release>:
 800eb24:	4801      	ldr	r0, [pc, #4]	; (800eb2c <__sinit_lock_release+0x8>)
 800eb26:	f000 b8a7 	b.w	800ec78 <__retarget_lock_release_recursive>
 800eb2a:	bf00      	nop
 800eb2c:	24000c67 	.word	0x24000c67

0800eb30 <__sinit>:
 800eb30:	b510      	push	{r4, lr}
 800eb32:	4604      	mov	r4, r0
 800eb34:	f7ff fff0 	bl	800eb18 <__sinit_lock_acquire>
 800eb38:	69a3      	ldr	r3, [r4, #24]
 800eb3a:	b11b      	cbz	r3, 800eb44 <__sinit+0x14>
 800eb3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eb40:	f7ff bff0 	b.w	800eb24 <__sinit_lock_release>
 800eb44:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800eb48:	6523      	str	r3, [r4, #80]	; 0x50
 800eb4a:	4b13      	ldr	r3, [pc, #76]	; (800eb98 <__sinit+0x68>)
 800eb4c:	4a13      	ldr	r2, [pc, #76]	; (800eb9c <__sinit+0x6c>)
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	62a2      	str	r2, [r4, #40]	; 0x28
 800eb52:	42a3      	cmp	r3, r4
 800eb54:	bf04      	itt	eq
 800eb56:	2301      	moveq	r3, #1
 800eb58:	61a3      	streq	r3, [r4, #24]
 800eb5a:	4620      	mov	r0, r4
 800eb5c:	f000 f820 	bl	800eba0 <__sfp>
 800eb60:	6060      	str	r0, [r4, #4]
 800eb62:	4620      	mov	r0, r4
 800eb64:	f000 f81c 	bl	800eba0 <__sfp>
 800eb68:	60a0      	str	r0, [r4, #8]
 800eb6a:	4620      	mov	r0, r4
 800eb6c:	f000 f818 	bl	800eba0 <__sfp>
 800eb70:	2200      	movs	r2, #0
 800eb72:	60e0      	str	r0, [r4, #12]
 800eb74:	2104      	movs	r1, #4
 800eb76:	6860      	ldr	r0, [r4, #4]
 800eb78:	f7ff ff82 	bl	800ea80 <std>
 800eb7c:	68a0      	ldr	r0, [r4, #8]
 800eb7e:	2201      	movs	r2, #1
 800eb80:	2109      	movs	r1, #9
 800eb82:	f7ff ff7d 	bl	800ea80 <std>
 800eb86:	68e0      	ldr	r0, [r4, #12]
 800eb88:	2202      	movs	r2, #2
 800eb8a:	2112      	movs	r1, #18
 800eb8c:	f7ff ff78 	bl	800ea80 <std>
 800eb90:	2301      	movs	r3, #1
 800eb92:	61a3      	str	r3, [r4, #24]
 800eb94:	e7d2      	b.n	800eb3c <__sinit+0xc>
 800eb96:	bf00      	nop
 800eb98:	0800fbf4 	.word	0x0800fbf4
 800eb9c:	0800eac9 	.word	0x0800eac9

0800eba0 <__sfp>:
 800eba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eba2:	4607      	mov	r7, r0
 800eba4:	f7ff ffac 	bl	800eb00 <__sfp_lock_acquire>
 800eba8:	4b1e      	ldr	r3, [pc, #120]	; (800ec24 <__sfp+0x84>)
 800ebaa:	681e      	ldr	r6, [r3, #0]
 800ebac:	69b3      	ldr	r3, [r6, #24]
 800ebae:	b913      	cbnz	r3, 800ebb6 <__sfp+0x16>
 800ebb0:	4630      	mov	r0, r6
 800ebb2:	f7ff ffbd 	bl	800eb30 <__sinit>
 800ebb6:	3648      	adds	r6, #72	; 0x48
 800ebb8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ebbc:	3b01      	subs	r3, #1
 800ebbe:	d503      	bpl.n	800ebc8 <__sfp+0x28>
 800ebc0:	6833      	ldr	r3, [r6, #0]
 800ebc2:	b30b      	cbz	r3, 800ec08 <__sfp+0x68>
 800ebc4:	6836      	ldr	r6, [r6, #0]
 800ebc6:	e7f7      	b.n	800ebb8 <__sfp+0x18>
 800ebc8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ebcc:	b9d5      	cbnz	r5, 800ec04 <__sfp+0x64>
 800ebce:	4b16      	ldr	r3, [pc, #88]	; (800ec28 <__sfp+0x88>)
 800ebd0:	60e3      	str	r3, [r4, #12]
 800ebd2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ebd6:	6665      	str	r5, [r4, #100]	; 0x64
 800ebd8:	f000 f84c 	bl	800ec74 <__retarget_lock_init_recursive>
 800ebdc:	f7ff ff96 	bl	800eb0c <__sfp_lock_release>
 800ebe0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ebe4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ebe8:	6025      	str	r5, [r4, #0]
 800ebea:	61a5      	str	r5, [r4, #24]
 800ebec:	2208      	movs	r2, #8
 800ebee:	4629      	mov	r1, r5
 800ebf0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ebf4:	f7fe fb68 	bl	800d2c8 <memset>
 800ebf8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ebfc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ec00:	4620      	mov	r0, r4
 800ec02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ec04:	3468      	adds	r4, #104	; 0x68
 800ec06:	e7d9      	b.n	800ebbc <__sfp+0x1c>
 800ec08:	2104      	movs	r1, #4
 800ec0a:	4638      	mov	r0, r7
 800ec0c:	f7ff ff62 	bl	800ead4 <__sfmoreglue>
 800ec10:	4604      	mov	r4, r0
 800ec12:	6030      	str	r0, [r6, #0]
 800ec14:	2800      	cmp	r0, #0
 800ec16:	d1d5      	bne.n	800ebc4 <__sfp+0x24>
 800ec18:	f7ff ff78 	bl	800eb0c <__sfp_lock_release>
 800ec1c:	230c      	movs	r3, #12
 800ec1e:	603b      	str	r3, [r7, #0]
 800ec20:	e7ee      	b.n	800ec00 <__sfp+0x60>
 800ec22:	bf00      	nop
 800ec24:	0800fbf4 	.word	0x0800fbf4
 800ec28:	ffff0001 	.word	0xffff0001

0800ec2c <_fwalk_reent>:
 800ec2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ec30:	4606      	mov	r6, r0
 800ec32:	4688      	mov	r8, r1
 800ec34:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ec38:	2700      	movs	r7, #0
 800ec3a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ec3e:	f1b9 0901 	subs.w	r9, r9, #1
 800ec42:	d505      	bpl.n	800ec50 <_fwalk_reent+0x24>
 800ec44:	6824      	ldr	r4, [r4, #0]
 800ec46:	2c00      	cmp	r4, #0
 800ec48:	d1f7      	bne.n	800ec3a <_fwalk_reent+0xe>
 800ec4a:	4638      	mov	r0, r7
 800ec4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ec50:	89ab      	ldrh	r3, [r5, #12]
 800ec52:	2b01      	cmp	r3, #1
 800ec54:	d907      	bls.n	800ec66 <_fwalk_reent+0x3a>
 800ec56:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ec5a:	3301      	adds	r3, #1
 800ec5c:	d003      	beq.n	800ec66 <_fwalk_reent+0x3a>
 800ec5e:	4629      	mov	r1, r5
 800ec60:	4630      	mov	r0, r6
 800ec62:	47c0      	blx	r8
 800ec64:	4307      	orrs	r7, r0
 800ec66:	3568      	adds	r5, #104	; 0x68
 800ec68:	e7e9      	b.n	800ec3e <_fwalk_reent+0x12>
	...

0800ec6c <_localeconv_r>:
 800ec6c:	4800      	ldr	r0, [pc, #0]	; (800ec70 <_localeconv_r+0x4>)
 800ec6e:	4770      	bx	lr
 800ec70:	24000164 	.word	0x24000164

0800ec74 <__retarget_lock_init_recursive>:
 800ec74:	4770      	bx	lr

0800ec76 <__retarget_lock_acquire_recursive>:
 800ec76:	4770      	bx	lr

0800ec78 <__retarget_lock_release_recursive>:
 800ec78:	4770      	bx	lr

0800ec7a <__swhatbuf_r>:
 800ec7a:	b570      	push	{r4, r5, r6, lr}
 800ec7c:	460e      	mov	r6, r1
 800ec7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec82:	2900      	cmp	r1, #0
 800ec84:	b096      	sub	sp, #88	; 0x58
 800ec86:	4614      	mov	r4, r2
 800ec88:	461d      	mov	r5, r3
 800ec8a:	da07      	bge.n	800ec9c <__swhatbuf_r+0x22>
 800ec8c:	2300      	movs	r3, #0
 800ec8e:	602b      	str	r3, [r5, #0]
 800ec90:	89b3      	ldrh	r3, [r6, #12]
 800ec92:	061a      	lsls	r2, r3, #24
 800ec94:	d410      	bmi.n	800ecb8 <__swhatbuf_r+0x3e>
 800ec96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ec9a:	e00e      	b.n	800ecba <__swhatbuf_r+0x40>
 800ec9c:	466a      	mov	r2, sp
 800ec9e:	f000 fe91 	bl	800f9c4 <_fstat_r>
 800eca2:	2800      	cmp	r0, #0
 800eca4:	dbf2      	blt.n	800ec8c <__swhatbuf_r+0x12>
 800eca6:	9a01      	ldr	r2, [sp, #4]
 800eca8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ecac:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ecb0:	425a      	negs	r2, r3
 800ecb2:	415a      	adcs	r2, r3
 800ecb4:	602a      	str	r2, [r5, #0]
 800ecb6:	e7ee      	b.n	800ec96 <__swhatbuf_r+0x1c>
 800ecb8:	2340      	movs	r3, #64	; 0x40
 800ecba:	2000      	movs	r0, #0
 800ecbc:	6023      	str	r3, [r4, #0]
 800ecbe:	b016      	add	sp, #88	; 0x58
 800ecc0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ecc4 <__smakebuf_r>:
 800ecc4:	898b      	ldrh	r3, [r1, #12]
 800ecc6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ecc8:	079d      	lsls	r5, r3, #30
 800ecca:	4606      	mov	r6, r0
 800eccc:	460c      	mov	r4, r1
 800ecce:	d507      	bpl.n	800ece0 <__smakebuf_r+0x1c>
 800ecd0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ecd4:	6023      	str	r3, [r4, #0]
 800ecd6:	6123      	str	r3, [r4, #16]
 800ecd8:	2301      	movs	r3, #1
 800ecda:	6163      	str	r3, [r4, #20]
 800ecdc:	b002      	add	sp, #8
 800ecde:	bd70      	pop	{r4, r5, r6, pc}
 800ece0:	ab01      	add	r3, sp, #4
 800ece2:	466a      	mov	r2, sp
 800ece4:	f7ff ffc9 	bl	800ec7a <__swhatbuf_r>
 800ece8:	9900      	ldr	r1, [sp, #0]
 800ecea:	4605      	mov	r5, r0
 800ecec:	4630      	mov	r0, r6
 800ecee:	f000 fc0f 	bl	800f510 <_malloc_r>
 800ecf2:	b948      	cbnz	r0, 800ed08 <__smakebuf_r+0x44>
 800ecf4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ecf8:	059a      	lsls	r2, r3, #22
 800ecfa:	d4ef      	bmi.n	800ecdc <__smakebuf_r+0x18>
 800ecfc:	f023 0303 	bic.w	r3, r3, #3
 800ed00:	f043 0302 	orr.w	r3, r3, #2
 800ed04:	81a3      	strh	r3, [r4, #12]
 800ed06:	e7e3      	b.n	800ecd0 <__smakebuf_r+0xc>
 800ed08:	4b0d      	ldr	r3, [pc, #52]	; (800ed40 <__smakebuf_r+0x7c>)
 800ed0a:	62b3      	str	r3, [r6, #40]	; 0x28
 800ed0c:	89a3      	ldrh	r3, [r4, #12]
 800ed0e:	6020      	str	r0, [r4, #0]
 800ed10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ed14:	81a3      	strh	r3, [r4, #12]
 800ed16:	9b00      	ldr	r3, [sp, #0]
 800ed18:	6163      	str	r3, [r4, #20]
 800ed1a:	9b01      	ldr	r3, [sp, #4]
 800ed1c:	6120      	str	r0, [r4, #16]
 800ed1e:	b15b      	cbz	r3, 800ed38 <__smakebuf_r+0x74>
 800ed20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ed24:	4630      	mov	r0, r6
 800ed26:	f000 fe5f 	bl	800f9e8 <_isatty_r>
 800ed2a:	b128      	cbz	r0, 800ed38 <__smakebuf_r+0x74>
 800ed2c:	89a3      	ldrh	r3, [r4, #12]
 800ed2e:	f023 0303 	bic.w	r3, r3, #3
 800ed32:	f043 0301 	orr.w	r3, r3, #1
 800ed36:	81a3      	strh	r3, [r4, #12]
 800ed38:	89a0      	ldrh	r0, [r4, #12]
 800ed3a:	4305      	orrs	r5, r0
 800ed3c:	81a5      	strh	r5, [r4, #12]
 800ed3e:	e7cd      	b.n	800ecdc <__smakebuf_r+0x18>
 800ed40:	0800eac9 	.word	0x0800eac9

0800ed44 <malloc>:
 800ed44:	4b02      	ldr	r3, [pc, #8]	; (800ed50 <malloc+0xc>)
 800ed46:	4601      	mov	r1, r0
 800ed48:	6818      	ldr	r0, [r3, #0]
 800ed4a:	f000 bbe1 	b.w	800f510 <_malloc_r>
 800ed4e:	bf00      	nop
 800ed50:	24000010 	.word	0x24000010

0800ed54 <_Balloc>:
 800ed54:	b570      	push	{r4, r5, r6, lr}
 800ed56:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ed58:	4604      	mov	r4, r0
 800ed5a:	460d      	mov	r5, r1
 800ed5c:	b976      	cbnz	r6, 800ed7c <_Balloc+0x28>
 800ed5e:	2010      	movs	r0, #16
 800ed60:	f7ff fff0 	bl	800ed44 <malloc>
 800ed64:	4602      	mov	r2, r0
 800ed66:	6260      	str	r0, [r4, #36]	; 0x24
 800ed68:	b920      	cbnz	r0, 800ed74 <_Balloc+0x20>
 800ed6a:	4b18      	ldr	r3, [pc, #96]	; (800edcc <_Balloc+0x78>)
 800ed6c:	4818      	ldr	r0, [pc, #96]	; (800edd0 <_Balloc+0x7c>)
 800ed6e:	2166      	movs	r1, #102	; 0x66
 800ed70:	f000 fde8 	bl	800f944 <__assert_func>
 800ed74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ed78:	6006      	str	r6, [r0, #0]
 800ed7a:	60c6      	str	r6, [r0, #12]
 800ed7c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ed7e:	68f3      	ldr	r3, [r6, #12]
 800ed80:	b183      	cbz	r3, 800eda4 <_Balloc+0x50>
 800ed82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ed84:	68db      	ldr	r3, [r3, #12]
 800ed86:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ed8a:	b9b8      	cbnz	r0, 800edbc <_Balloc+0x68>
 800ed8c:	2101      	movs	r1, #1
 800ed8e:	fa01 f605 	lsl.w	r6, r1, r5
 800ed92:	1d72      	adds	r2, r6, #5
 800ed94:	0092      	lsls	r2, r2, #2
 800ed96:	4620      	mov	r0, r4
 800ed98:	f000 fb5a 	bl	800f450 <_calloc_r>
 800ed9c:	b160      	cbz	r0, 800edb8 <_Balloc+0x64>
 800ed9e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800eda2:	e00e      	b.n	800edc2 <_Balloc+0x6e>
 800eda4:	2221      	movs	r2, #33	; 0x21
 800eda6:	2104      	movs	r1, #4
 800eda8:	4620      	mov	r0, r4
 800edaa:	f000 fb51 	bl	800f450 <_calloc_r>
 800edae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800edb0:	60f0      	str	r0, [r6, #12]
 800edb2:	68db      	ldr	r3, [r3, #12]
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d1e4      	bne.n	800ed82 <_Balloc+0x2e>
 800edb8:	2000      	movs	r0, #0
 800edba:	bd70      	pop	{r4, r5, r6, pc}
 800edbc:	6802      	ldr	r2, [r0, #0]
 800edbe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800edc2:	2300      	movs	r3, #0
 800edc4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800edc8:	e7f7      	b.n	800edba <_Balloc+0x66>
 800edca:	bf00      	nop
 800edcc:	0800fc39 	.word	0x0800fc39
 800edd0:	0800fd20 	.word	0x0800fd20

0800edd4 <_Bfree>:
 800edd4:	b570      	push	{r4, r5, r6, lr}
 800edd6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800edd8:	4605      	mov	r5, r0
 800edda:	460c      	mov	r4, r1
 800eddc:	b976      	cbnz	r6, 800edfc <_Bfree+0x28>
 800edde:	2010      	movs	r0, #16
 800ede0:	f7ff ffb0 	bl	800ed44 <malloc>
 800ede4:	4602      	mov	r2, r0
 800ede6:	6268      	str	r0, [r5, #36]	; 0x24
 800ede8:	b920      	cbnz	r0, 800edf4 <_Bfree+0x20>
 800edea:	4b09      	ldr	r3, [pc, #36]	; (800ee10 <_Bfree+0x3c>)
 800edec:	4809      	ldr	r0, [pc, #36]	; (800ee14 <_Bfree+0x40>)
 800edee:	218a      	movs	r1, #138	; 0x8a
 800edf0:	f000 fda8 	bl	800f944 <__assert_func>
 800edf4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800edf8:	6006      	str	r6, [r0, #0]
 800edfa:	60c6      	str	r6, [r0, #12]
 800edfc:	b13c      	cbz	r4, 800ee0e <_Bfree+0x3a>
 800edfe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ee00:	6862      	ldr	r2, [r4, #4]
 800ee02:	68db      	ldr	r3, [r3, #12]
 800ee04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ee08:	6021      	str	r1, [r4, #0]
 800ee0a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ee0e:	bd70      	pop	{r4, r5, r6, pc}
 800ee10:	0800fc39 	.word	0x0800fc39
 800ee14:	0800fd20 	.word	0x0800fd20

0800ee18 <__multadd>:
 800ee18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee1c:	690e      	ldr	r6, [r1, #16]
 800ee1e:	4607      	mov	r7, r0
 800ee20:	4698      	mov	r8, r3
 800ee22:	460c      	mov	r4, r1
 800ee24:	f101 0014 	add.w	r0, r1, #20
 800ee28:	2300      	movs	r3, #0
 800ee2a:	6805      	ldr	r5, [r0, #0]
 800ee2c:	b2a9      	uxth	r1, r5
 800ee2e:	fb02 8101 	mla	r1, r2, r1, r8
 800ee32:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800ee36:	0c2d      	lsrs	r5, r5, #16
 800ee38:	fb02 c505 	mla	r5, r2, r5, ip
 800ee3c:	b289      	uxth	r1, r1
 800ee3e:	3301      	adds	r3, #1
 800ee40:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800ee44:	429e      	cmp	r6, r3
 800ee46:	f840 1b04 	str.w	r1, [r0], #4
 800ee4a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800ee4e:	dcec      	bgt.n	800ee2a <__multadd+0x12>
 800ee50:	f1b8 0f00 	cmp.w	r8, #0
 800ee54:	d022      	beq.n	800ee9c <__multadd+0x84>
 800ee56:	68a3      	ldr	r3, [r4, #8]
 800ee58:	42b3      	cmp	r3, r6
 800ee5a:	dc19      	bgt.n	800ee90 <__multadd+0x78>
 800ee5c:	6861      	ldr	r1, [r4, #4]
 800ee5e:	4638      	mov	r0, r7
 800ee60:	3101      	adds	r1, #1
 800ee62:	f7ff ff77 	bl	800ed54 <_Balloc>
 800ee66:	4605      	mov	r5, r0
 800ee68:	b928      	cbnz	r0, 800ee76 <__multadd+0x5e>
 800ee6a:	4602      	mov	r2, r0
 800ee6c:	4b0d      	ldr	r3, [pc, #52]	; (800eea4 <__multadd+0x8c>)
 800ee6e:	480e      	ldr	r0, [pc, #56]	; (800eea8 <__multadd+0x90>)
 800ee70:	21b5      	movs	r1, #181	; 0xb5
 800ee72:	f000 fd67 	bl	800f944 <__assert_func>
 800ee76:	6922      	ldr	r2, [r4, #16]
 800ee78:	3202      	adds	r2, #2
 800ee7a:	f104 010c 	add.w	r1, r4, #12
 800ee7e:	0092      	lsls	r2, r2, #2
 800ee80:	300c      	adds	r0, #12
 800ee82:	f7fe fa13 	bl	800d2ac <memcpy>
 800ee86:	4621      	mov	r1, r4
 800ee88:	4638      	mov	r0, r7
 800ee8a:	f7ff ffa3 	bl	800edd4 <_Bfree>
 800ee8e:	462c      	mov	r4, r5
 800ee90:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800ee94:	3601      	adds	r6, #1
 800ee96:	f8c3 8014 	str.w	r8, [r3, #20]
 800ee9a:	6126      	str	r6, [r4, #16]
 800ee9c:	4620      	mov	r0, r4
 800ee9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eea2:	bf00      	nop
 800eea4:	0800fcaf 	.word	0x0800fcaf
 800eea8:	0800fd20 	.word	0x0800fd20

0800eeac <__hi0bits>:
 800eeac:	0c03      	lsrs	r3, r0, #16
 800eeae:	041b      	lsls	r3, r3, #16
 800eeb0:	b9d3      	cbnz	r3, 800eee8 <__hi0bits+0x3c>
 800eeb2:	0400      	lsls	r0, r0, #16
 800eeb4:	2310      	movs	r3, #16
 800eeb6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800eeba:	bf04      	itt	eq
 800eebc:	0200      	lsleq	r0, r0, #8
 800eebe:	3308      	addeq	r3, #8
 800eec0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800eec4:	bf04      	itt	eq
 800eec6:	0100      	lsleq	r0, r0, #4
 800eec8:	3304      	addeq	r3, #4
 800eeca:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800eece:	bf04      	itt	eq
 800eed0:	0080      	lsleq	r0, r0, #2
 800eed2:	3302      	addeq	r3, #2
 800eed4:	2800      	cmp	r0, #0
 800eed6:	db05      	blt.n	800eee4 <__hi0bits+0x38>
 800eed8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800eedc:	f103 0301 	add.w	r3, r3, #1
 800eee0:	bf08      	it	eq
 800eee2:	2320      	moveq	r3, #32
 800eee4:	4618      	mov	r0, r3
 800eee6:	4770      	bx	lr
 800eee8:	2300      	movs	r3, #0
 800eeea:	e7e4      	b.n	800eeb6 <__hi0bits+0xa>

0800eeec <__lo0bits>:
 800eeec:	6803      	ldr	r3, [r0, #0]
 800eeee:	f013 0207 	ands.w	r2, r3, #7
 800eef2:	4601      	mov	r1, r0
 800eef4:	d00b      	beq.n	800ef0e <__lo0bits+0x22>
 800eef6:	07da      	lsls	r2, r3, #31
 800eef8:	d424      	bmi.n	800ef44 <__lo0bits+0x58>
 800eefa:	0798      	lsls	r0, r3, #30
 800eefc:	bf49      	itett	mi
 800eefe:	085b      	lsrmi	r3, r3, #1
 800ef00:	089b      	lsrpl	r3, r3, #2
 800ef02:	2001      	movmi	r0, #1
 800ef04:	600b      	strmi	r3, [r1, #0]
 800ef06:	bf5c      	itt	pl
 800ef08:	600b      	strpl	r3, [r1, #0]
 800ef0a:	2002      	movpl	r0, #2
 800ef0c:	4770      	bx	lr
 800ef0e:	b298      	uxth	r0, r3
 800ef10:	b9b0      	cbnz	r0, 800ef40 <__lo0bits+0x54>
 800ef12:	0c1b      	lsrs	r3, r3, #16
 800ef14:	2010      	movs	r0, #16
 800ef16:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ef1a:	bf04      	itt	eq
 800ef1c:	0a1b      	lsreq	r3, r3, #8
 800ef1e:	3008      	addeq	r0, #8
 800ef20:	071a      	lsls	r2, r3, #28
 800ef22:	bf04      	itt	eq
 800ef24:	091b      	lsreq	r3, r3, #4
 800ef26:	3004      	addeq	r0, #4
 800ef28:	079a      	lsls	r2, r3, #30
 800ef2a:	bf04      	itt	eq
 800ef2c:	089b      	lsreq	r3, r3, #2
 800ef2e:	3002      	addeq	r0, #2
 800ef30:	07da      	lsls	r2, r3, #31
 800ef32:	d403      	bmi.n	800ef3c <__lo0bits+0x50>
 800ef34:	085b      	lsrs	r3, r3, #1
 800ef36:	f100 0001 	add.w	r0, r0, #1
 800ef3a:	d005      	beq.n	800ef48 <__lo0bits+0x5c>
 800ef3c:	600b      	str	r3, [r1, #0]
 800ef3e:	4770      	bx	lr
 800ef40:	4610      	mov	r0, r2
 800ef42:	e7e8      	b.n	800ef16 <__lo0bits+0x2a>
 800ef44:	2000      	movs	r0, #0
 800ef46:	4770      	bx	lr
 800ef48:	2020      	movs	r0, #32
 800ef4a:	4770      	bx	lr

0800ef4c <__i2b>:
 800ef4c:	b510      	push	{r4, lr}
 800ef4e:	460c      	mov	r4, r1
 800ef50:	2101      	movs	r1, #1
 800ef52:	f7ff feff 	bl	800ed54 <_Balloc>
 800ef56:	4602      	mov	r2, r0
 800ef58:	b928      	cbnz	r0, 800ef66 <__i2b+0x1a>
 800ef5a:	4b05      	ldr	r3, [pc, #20]	; (800ef70 <__i2b+0x24>)
 800ef5c:	4805      	ldr	r0, [pc, #20]	; (800ef74 <__i2b+0x28>)
 800ef5e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ef62:	f000 fcef 	bl	800f944 <__assert_func>
 800ef66:	2301      	movs	r3, #1
 800ef68:	6144      	str	r4, [r0, #20]
 800ef6a:	6103      	str	r3, [r0, #16]
 800ef6c:	bd10      	pop	{r4, pc}
 800ef6e:	bf00      	nop
 800ef70:	0800fcaf 	.word	0x0800fcaf
 800ef74:	0800fd20 	.word	0x0800fd20

0800ef78 <__multiply>:
 800ef78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef7c:	4614      	mov	r4, r2
 800ef7e:	690a      	ldr	r2, [r1, #16]
 800ef80:	6923      	ldr	r3, [r4, #16]
 800ef82:	429a      	cmp	r2, r3
 800ef84:	bfb8      	it	lt
 800ef86:	460b      	movlt	r3, r1
 800ef88:	460d      	mov	r5, r1
 800ef8a:	bfbc      	itt	lt
 800ef8c:	4625      	movlt	r5, r4
 800ef8e:	461c      	movlt	r4, r3
 800ef90:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800ef94:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800ef98:	68ab      	ldr	r3, [r5, #8]
 800ef9a:	6869      	ldr	r1, [r5, #4]
 800ef9c:	eb0a 0709 	add.w	r7, sl, r9
 800efa0:	42bb      	cmp	r3, r7
 800efa2:	b085      	sub	sp, #20
 800efa4:	bfb8      	it	lt
 800efa6:	3101      	addlt	r1, #1
 800efa8:	f7ff fed4 	bl	800ed54 <_Balloc>
 800efac:	b930      	cbnz	r0, 800efbc <__multiply+0x44>
 800efae:	4602      	mov	r2, r0
 800efb0:	4b42      	ldr	r3, [pc, #264]	; (800f0bc <__multiply+0x144>)
 800efb2:	4843      	ldr	r0, [pc, #268]	; (800f0c0 <__multiply+0x148>)
 800efb4:	f240 115d 	movw	r1, #349	; 0x15d
 800efb8:	f000 fcc4 	bl	800f944 <__assert_func>
 800efbc:	f100 0614 	add.w	r6, r0, #20
 800efc0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800efc4:	4633      	mov	r3, r6
 800efc6:	2200      	movs	r2, #0
 800efc8:	4543      	cmp	r3, r8
 800efca:	d31e      	bcc.n	800f00a <__multiply+0x92>
 800efcc:	f105 0c14 	add.w	ip, r5, #20
 800efd0:	f104 0314 	add.w	r3, r4, #20
 800efd4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800efd8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800efdc:	9202      	str	r2, [sp, #8]
 800efde:	ebac 0205 	sub.w	r2, ip, r5
 800efe2:	3a15      	subs	r2, #21
 800efe4:	f022 0203 	bic.w	r2, r2, #3
 800efe8:	3204      	adds	r2, #4
 800efea:	f105 0115 	add.w	r1, r5, #21
 800efee:	458c      	cmp	ip, r1
 800eff0:	bf38      	it	cc
 800eff2:	2204      	movcc	r2, #4
 800eff4:	9201      	str	r2, [sp, #4]
 800eff6:	9a02      	ldr	r2, [sp, #8]
 800eff8:	9303      	str	r3, [sp, #12]
 800effa:	429a      	cmp	r2, r3
 800effc:	d808      	bhi.n	800f010 <__multiply+0x98>
 800effe:	2f00      	cmp	r7, #0
 800f000:	dc55      	bgt.n	800f0ae <__multiply+0x136>
 800f002:	6107      	str	r7, [r0, #16]
 800f004:	b005      	add	sp, #20
 800f006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f00a:	f843 2b04 	str.w	r2, [r3], #4
 800f00e:	e7db      	b.n	800efc8 <__multiply+0x50>
 800f010:	f8b3 a000 	ldrh.w	sl, [r3]
 800f014:	f1ba 0f00 	cmp.w	sl, #0
 800f018:	d020      	beq.n	800f05c <__multiply+0xe4>
 800f01a:	f105 0e14 	add.w	lr, r5, #20
 800f01e:	46b1      	mov	r9, r6
 800f020:	2200      	movs	r2, #0
 800f022:	f85e 4b04 	ldr.w	r4, [lr], #4
 800f026:	f8d9 b000 	ldr.w	fp, [r9]
 800f02a:	b2a1      	uxth	r1, r4
 800f02c:	fa1f fb8b 	uxth.w	fp, fp
 800f030:	fb0a b101 	mla	r1, sl, r1, fp
 800f034:	4411      	add	r1, r2
 800f036:	f8d9 2000 	ldr.w	r2, [r9]
 800f03a:	0c24      	lsrs	r4, r4, #16
 800f03c:	0c12      	lsrs	r2, r2, #16
 800f03e:	fb0a 2404 	mla	r4, sl, r4, r2
 800f042:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800f046:	b289      	uxth	r1, r1
 800f048:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800f04c:	45f4      	cmp	ip, lr
 800f04e:	f849 1b04 	str.w	r1, [r9], #4
 800f052:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800f056:	d8e4      	bhi.n	800f022 <__multiply+0xaa>
 800f058:	9901      	ldr	r1, [sp, #4]
 800f05a:	5072      	str	r2, [r6, r1]
 800f05c:	9a03      	ldr	r2, [sp, #12]
 800f05e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f062:	3304      	adds	r3, #4
 800f064:	f1b9 0f00 	cmp.w	r9, #0
 800f068:	d01f      	beq.n	800f0aa <__multiply+0x132>
 800f06a:	6834      	ldr	r4, [r6, #0]
 800f06c:	f105 0114 	add.w	r1, r5, #20
 800f070:	46b6      	mov	lr, r6
 800f072:	f04f 0a00 	mov.w	sl, #0
 800f076:	880a      	ldrh	r2, [r1, #0]
 800f078:	f8be b002 	ldrh.w	fp, [lr, #2]
 800f07c:	fb09 b202 	mla	r2, r9, r2, fp
 800f080:	4492      	add	sl, r2
 800f082:	b2a4      	uxth	r4, r4
 800f084:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800f088:	f84e 4b04 	str.w	r4, [lr], #4
 800f08c:	f851 4b04 	ldr.w	r4, [r1], #4
 800f090:	f8be 2000 	ldrh.w	r2, [lr]
 800f094:	0c24      	lsrs	r4, r4, #16
 800f096:	fb09 2404 	mla	r4, r9, r4, r2
 800f09a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800f09e:	458c      	cmp	ip, r1
 800f0a0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800f0a4:	d8e7      	bhi.n	800f076 <__multiply+0xfe>
 800f0a6:	9a01      	ldr	r2, [sp, #4]
 800f0a8:	50b4      	str	r4, [r6, r2]
 800f0aa:	3604      	adds	r6, #4
 800f0ac:	e7a3      	b.n	800eff6 <__multiply+0x7e>
 800f0ae:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d1a5      	bne.n	800f002 <__multiply+0x8a>
 800f0b6:	3f01      	subs	r7, #1
 800f0b8:	e7a1      	b.n	800effe <__multiply+0x86>
 800f0ba:	bf00      	nop
 800f0bc:	0800fcaf 	.word	0x0800fcaf
 800f0c0:	0800fd20 	.word	0x0800fd20

0800f0c4 <__pow5mult>:
 800f0c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f0c8:	4615      	mov	r5, r2
 800f0ca:	f012 0203 	ands.w	r2, r2, #3
 800f0ce:	4606      	mov	r6, r0
 800f0d0:	460f      	mov	r7, r1
 800f0d2:	d007      	beq.n	800f0e4 <__pow5mult+0x20>
 800f0d4:	4c25      	ldr	r4, [pc, #148]	; (800f16c <__pow5mult+0xa8>)
 800f0d6:	3a01      	subs	r2, #1
 800f0d8:	2300      	movs	r3, #0
 800f0da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f0de:	f7ff fe9b 	bl	800ee18 <__multadd>
 800f0e2:	4607      	mov	r7, r0
 800f0e4:	10ad      	asrs	r5, r5, #2
 800f0e6:	d03d      	beq.n	800f164 <__pow5mult+0xa0>
 800f0e8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f0ea:	b97c      	cbnz	r4, 800f10c <__pow5mult+0x48>
 800f0ec:	2010      	movs	r0, #16
 800f0ee:	f7ff fe29 	bl	800ed44 <malloc>
 800f0f2:	4602      	mov	r2, r0
 800f0f4:	6270      	str	r0, [r6, #36]	; 0x24
 800f0f6:	b928      	cbnz	r0, 800f104 <__pow5mult+0x40>
 800f0f8:	4b1d      	ldr	r3, [pc, #116]	; (800f170 <__pow5mult+0xac>)
 800f0fa:	481e      	ldr	r0, [pc, #120]	; (800f174 <__pow5mult+0xb0>)
 800f0fc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f100:	f000 fc20 	bl	800f944 <__assert_func>
 800f104:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f108:	6004      	str	r4, [r0, #0]
 800f10a:	60c4      	str	r4, [r0, #12]
 800f10c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f110:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f114:	b94c      	cbnz	r4, 800f12a <__pow5mult+0x66>
 800f116:	f240 2171 	movw	r1, #625	; 0x271
 800f11a:	4630      	mov	r0, r6
 800f11c:	f7ff ff16 	bl	800ef4c <__i2b>
 800f120:	2300      	movs	r3, #0
 800f122:	f8c8 0008 	str.w	r0, [r8, #8]
 800f126:	4604      	mov	r4, r0
 800f128:	6003      	str	r3, [r0, #0]
 800f12a:	f04f 0900 	mov.w	r9, #0
 800f12e:	07eb      	lsls	r3, r5, #31
 800f130:	d50a      	bpl.n	800f148 <__pow5mult+0x84>
 800f132:	4639      	mov	r1, r7
 800f134:	4622      	mov	r2, r4
 800f136:	4630      	mov	r0, r6
 800f138:	f7ff ff1e 	bl	800ef78 <__multiply>
 800f13c:	4639      	mov	r1, r7
 800f13e:	4680      	mov	r8, r0
 800f140:	4630      	mov	r0, r6
 800f142:	f7ff fe47 	bl	800edd4 <_Bfree>
 800f146:	4647      	mov	r7, r8
 800f148:	106d      	asrs	r5, r5, #1
 800f14a:	d00b      	beq.n	800f164 <__pow5mult+0xa0>
 800f14c:	6820      	ldr	r0, [r4, #0]
 800f14e:	b938      	cbnz	r0, 800f160 <__pow5mult+0x9c>
 800f150:	4622      	mov	r2, r4
 800f152:	4621      	mov	r1, r4
 800f154:	4630      	mov	r0, r6
 800f156:	f7ff ff0f 	bl	800ef78 <__multiply>
 800f15a:	6020      	str	r0, [r4, #0]
 800f15c:	f8c0 9000 	str.w	r9, [r0]
 800f160:	4604      	mov	r4, r0
 800f162:	e7e4      	b.n	800f12e <__pow5mult+0x6a>
 800f164:	4638      	mov	r0, r7
 800f166:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f16a:	bf00      	nop
 800f16c:	0800fe70 	.word	0x0800fe70
 800f170:	0800fc39 	.word	0x0800fc39
 800f174:	0800fd20 	.word	0x0800fd20

0800f178 <__lshift>:
 800f178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f17c:	460c      	mov	r4, r1
 800f17e:	6849      	ldr	r1, [r1, #4]
 800f180:	6923      	ldr	r3, [r4, #16]
 800f182:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f186:	68a3      	ldr	r3, [r4, #8]
 800f188:	4607      	mov	r7, r0
 800f18a:	4691      	mov	r9, r2
 800f18c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f190:	f108 0601 	add.w	r6, r8, #1
 800f194:	42b3      	cmp	r3, r6
 800f196:	db0b      	blt.n	800f1b0 <__lshift+0x38>
 800f198:	4638      	mov	r0, r7
 800f19a:	f7ff fddb 	bl	800ed54 <_Balloc>
 800f19e:	4605      	mov	r5, r0
 800f1a0:	b948      	cbnz	r0, 800f1b6 <__lshift+0x3e>
 800f1a2:	4602      	mov	r2, r0
 800f1a4:	4b28      	ldr	r3, [pc, #160]	; (800f248 <__lshift+0xd0>)
 800f1a6:	4829      	ldr	r0, [pc, #164]	; (800f24c <__lshift+0xd4>)
 800f1a8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800f1ac:	f000 fbca 	bl	800f944 <__assert_func>
 800f1b0:	3101      	adds	r1, #1
 800f1b2:	005b      	lsls	r3, r3, #1
 800f1b4:	e7ee      	b.n	800f194 <__lshift+0x1c>
 800f1b6:	2300      	movs	r3, #0
 800f1b8:	f100 0114 	add.w	r1, r0, #20
 800f1bc:	f100 0210 	add.w	r2, r0, #16
 800f1c0:	4618      	mov	r0, r3
 800f1c2:	4553      	cmp	r3, sl
 800f1c4:	db33      	blt.n	800f22e <__lshift+0xb6>
 800f1c6:	6920      	ldr	r0, [r4, #16]
 800f1c8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f1cc:	f104 0314 	add.w	r3, r4, #20
 800f1d0:	f019 091f 	ands.w	r9, r9, #31
 800f1d4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f1d8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f1dc:	d02b      	beq.n	800f236 <__lshift+0xbe>
 800f1de:	f1c9 0e20 	rsb	lr, r9, #32
 800f1e2:	468a      	mov	sl, r1
 800f1e4:	2200      	movs	r2, #0
 800f1e6:	6818      	ldr	r0, [r3, #0]
 800f1e8:	fa00 f009 	lsl.w	r0, r0, r9
 800f1ec:	4302      	orrs	r2, r0
 800f1ee:	f84a 2b04 	str.w	r2, [sl], #4
 800f1f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800f1f6:	459c      	cmp	ip, r3
 800f1f8:	fa22 f20e 	lsr.w	r2, r2, lr
 800f1fc:	d8f3      	bhi.n	800f1e6 <__lshift+0x6e>
 800f1fe:	ebac 0304 	sub.w	r3, ip, r4
 800f202:	3b15      	subs	r3, #21
 800f204:	f023 0303 	bic.w	r3, r3, #3
 800f208:	3304      	adds	r3, #4
 800f20a:	f104 0015 	add.w	r0, r4, #21
 800f20e:	4584      	cmp	ip, r0
 800f210:	bf38      	it	cc
 800f212:	2304      	movcc	r3, #4
 800f214:	50ca      	str	r2, [r1, r3]
 800f216:	b10a      	cbz	r2, 800f21c <__lshift+0xa4>
 800f218:	f108 0602 	add.w	r6, r8, #2
 800f21c:	3e01      	subs	r6, #1
 800f21e:	4638      	mov	r0, r7
 800f220:	612e      	str	r6, [r5, #16]
 800f222:	4621      	mov	r1, r4
 800f224:	f7ff fdd6 	bl	800edd4 <_Bfree>
 800f228:	4628      	mov	r0, r5
 800f22a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f22e:	f842 0f04 	str.w	r0, [r2, #4]!
 800f232:	3301      	adds	r3, #1
 800f234:	e7c5      	b.n	800f1c2 <__lshift+0x4a>
 800f236:	3904      	subs	r1, #4
 800f238:	f853 2b04 	ldr.w	r2, [r3], #4
 800f23c:	f841 2f04 	str.w	r2, [r1, #4]!
 800f240:	459c      	cmp	ip, r3
 800f242:	d8f9      	bhi.n	800f238 <__lshift+0xc0>
 800f244:	e7ea      	b.n	800f21c <__lshift+0xa4>
 800f246:	bf00      	nop
 800f248:	0800fcaf 	.word	0x0800fcaf
 800f24c:	0800fd20 	.word	0x0800fd20

0800f250 <__mcmp>:
 800f250:	b530      	push	{r4, r5, lr}
 800f252:	6902      	ldr	r2, [r0, #16]
 800f254:	690c      	ldr	r4, [r1, #16]
 800f256:	1b12      	subs	r2, r2, r4
 800f258:	d10e      	bne.n	800f278 <__mcmp+0x28>
 800f25a:	f100 0314 	add.w	r3, r0, #20
 800f25e:	3114      	adds	r1, #20
 800f260:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f264:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f268:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f26c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f270:	42a5      	cmp	r5, r4
 800f272:	d003      	beq.n	800f27c <__mcmp+0x2c>
 800f274:	d305      	bcc.n	800f282 <__mcmp+0x32>
 800f276:	2201      	movs	r2, #1
 800f278:	4610      	mov	r0, r2
 800f27a:	bd30      	pop	{r4, r5, pc}
 800f27c:	4283      	cmp	r3, r0
 800f27e:	d3f3      	bcc.n	800f268 <__mcmp+0x18>
 800f280:	e7fa      	b.n	800f278 <__mcmp+0x28>
 800f282:	f04f 32ff 	mov.w	r2, #4294967295
 800f286:	e7f7      	b.n	800f278 <__mcmp+0x28>

0800f288 <__mdiff>:
 800f288:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f28c:	460c      	mov	r4, r1
 800f28e:	4606      	mov	r6, r0
 800f290:	4611      	mov	r1, r2
 800f292:	4620      	mov	r0, r4
 800f294:	4617      	mov	r7, r2
 800f296:	f7ff ffdb 	bl	800f250 <__mcmp>
 800f29a:	1e05      	subs	r5, r0, #0
 800f29c:	d110      	bne.n	800f2c0 <__mdiff+0x38>
 800f29e:	4629      	mov	r1, r5
 800f2a0:	4630      	mov	r0, r6
 800f2a2:	f7ff fd57 	bl	800ed54 <_Balloc>
 800f2a6:	b930      	cbnz	r0, 800f2b6 <__mdiff+0x2e>
 800f2a8:	4b39      	ldr	r3, [pc, #228]	; (800f390 <__mdiff+0x108>)
 800f2aa:	4602      	mov	r2, r0
 800f2ac:	f240 2132 	movw	r1, #562	; 0x232
 800f2b0:	4838      	ldr	r0, [pc, #224]	; (800f394 <__mdiff+0x10c>)
 800f2b2:	f000 fb47 	bl	800f944 <__assert_func>
 800f2b6:	2301      	movs	r3, #1
 800f2b8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f2bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2c0:	bfa4      	itt	ge
 800f2c2:	463b      	movge	r3, r7
 800f2c4:	4627      	movge	r7, r4
 800f2c6:	4630      	mov	r0, r6
 800f2c8:	6879      	ldr	r1, [r7, #4]
 800f2ca:	bfa6      	itte	ge
 800f2cc:	461c      	movge	r4, r3
 800f2ce:	2500      	movge	r5, #0
 800f2d0:	2501      	movlt	r5, #1
 800f2d2:	f7ff fd3f 	bl	800ed54 <_Balloc>
 800f2d6:	b920      	cbnz	r0, 800f2e2 <__mdiff+0x5a>
 800f2d8:	4b2d      	ldr	r3, [pc, #180]	; (800f390 <__mdiff+0x108>)
 800f2da:	4602      	mov	r2, r0
 800f2dc:	f44f 7110 	mov.w	r1, #576	; 0x240
 800f2e0:	e7e6      	b.n	800f2b0 <__mdiff+0x28>
 800f2e2:	693e      	ldr	r6, [r7, #16]
 800f2e4:	60c5      	str	r5, [r0, #12]
 800f2e6:	6925      	ldr	r5, [r4, #16]
 800f2e8:	f107 0114 	add.w	r1, r7, #20
 800f2ec:	f104 0914 	add.w	r9, r4, #20
 800f2f0:	f100 0e14 	add.w	lr, r0, #20
 800f2f4:	f107 0210 	add.w	r2, r7, #16
 800f2f8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800f2fc:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800f300:	46f2      	mov	sl, lr
 800f302:	2700      	movs	r7, #0
 800f304:	f859 3b04 	ldr.w	r3, [r9], #4
 800f308:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f30c:	fa1f f883 	uxth.w	r8, r3
 800f310:	fa17 f78b 	uxtah	r7, r7, fp
 800f314:	0c1b      	lsrs	r3, r3, #16
 800f316:	eba7 0808 	sub.w	r8, r7, r8
 800f31a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f31e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f322:	fa1f f888 	uxth.w	r8, r8
 800f326:	141f      	asrs	r7, r3, #16
 800f328:	454d      	cmp	r5, r9
 800f32a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f32e:	f84a 3b04 	str.w	r3, [sl], #4
 800f332:	d8e7      	bhi.n	800f304 <__mdiff+0x7c>
 800f334:	1b2b      	subs	r3, r5, r4
 800f336:	3b15      	subs	r3, #21
 800f338:	f023 0303 	bic.w	r3, r3, #3
 800f33c:	3304      	adds	r3, #4
 800f33e:	3415      	adds	r4, #21
 800f340:	42a5      	cmp	r5, r4
 800f342:	bf38      	it	cc
 800f344:	2304      	movcc	r3, #4
 800f346:	4419      	add	r1, r3
 800f348:	4473      	add	r3, lr
 800f34a:	469e      	mov	lr, r3
 800f34c:	460d      	mov	r5, r1
 800f34e:	4565      	cmp	r5, ip
 800f350:	d30e      	bcc.n	800f370 <__mdiff+0xe8>
 800f352:	f10c 0203 	add.w	r2, ip, #3
 800f356:	1a52      	subs	r2, r2, r1
 800f358:	f022 0203 	bic.w	r2, r2, #3
 800f35c:	3903      	subs	r1, #3
 800f35e:	458c      	cmp	ip, r1
 800f360:	bf38      	it	cc
 800f362:	2200      	movcc	r2, #0
 800f364:	441a      	add	r2, r3
 800f366:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800f36a:	b17b      	cbz	r3, 800f38c <__mdiff+0x104>
 800f36c:	6106      	str	r6, [r0, #16]
 800f36e:	e7a5      	b.n	800f2bc <__mdiff+0x34>
 800f370:	f855 8b04 	ldr.w	r8, [r5], #4
 800f374:	fa17 f488 	uxtah	r4, r7, r8
 800f378:	1422      	asrs	r2, r4, #16
 800f37a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800f37e:	b2a4      	uxth	r4, r4
 800f380:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800f384:	f84e 4b04 	str.w	r4, [lr], #4
 800f388:	1417      	asrs	r7, r2, #16
 800f38a:	e7e0      	b.n	800f34e <__mdiff+0xc6>
 800f38c:	3e01      	subs	r6, #1
 800f38e:	e7ea      	b.n	800f366 <__mdiff+0xde>
 800f390:	0800fcaf 	.word	0x0800fcaf
 800f394:	0800fd20 	.word	0x0800fd20

0800f398 <__d2b>:
 800f398:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f39c:	4689      	mov	r9, r1
 800f39e:	2101      	movs	r1, #1
 800f3a0:	ec57 6b10 	vmov	r6, r7, d0
 800f3a4:	4690      	mov	r8, r2
 800f3a6:	f7ff fcd5 	bl	800ed54 <_Balloc>
 800f3aa:	4604      	mov	r4, r0
 800f3ac:	b930      	cbnz	r0, 800f3bc <__d2b+0x24>
 800f3ae:	4602      	mov	r2, r0
 800f3b0:	4b25      	ldr	r3, [pc, #148]	; (800f448 <__d2b+0xb0>)
 800f3b2:	4826      	ldr	r0, [pc, #152]	; (800f44c <__d2b+0xb4>)
 800f3b4:	f240 310a 	movw	r1, #778	; 0x30a
 800f3b8:	f000 fac4 	bl	800f944 <__assert_func>
 800f3bc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800f3c0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f3c4:	bb35      	cbnz	r5, 800f414 <__d2b+0x7c>
 800f3c6:	2e00      	cmp	r6, #0
 800f3c8:	9301      	str	r3, [sp, #4]
 800f3ca:	d028      	beq.n	800f41e <__d2b+0x86>
 800f3cc:	4668      	mov	r0, sp
 800f3ce:	9600      	str	r6, [sp, #0]
 800f3d0:	f7ff fd8c 	bl	800eeec <__lo0bits>
 800f3d4:	9900      	ldr	r1, [sp, #0]
 800f3d6:	b300      	cbz	r0, 800f41a <__d2b+0x82>
 800f3d8:	9a01      	ldr	r2, [sp, #4]
 800f3da:	f1c0 0320 	rsb	r3, r0, #32
 800f3de:	fa02 f303 	lsl.w	r3, r2, r3
 800f3e2:	430b      	orrs	r3, r1
 800f3e4:	40c2      	lsrs	r2, r0
 800f3e6:	6163      	str	r3, [r4, #20]
 800f3e8:	9201      	str	r2, [sp, #4]
 800f3ea:	9b01      	ldr	r3, [sp, #4]
 800f3ec:	61a3      	str	r3, [r4, #24]
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	bf14      	ite	ne
 800f3f2:	2202      	movne	r2, #2
 800f3f4:	2201      	moveq	r2, #1
 800f3f6:	6122      	str	r2, [r4, #16]
 800f3f8:	b1d5      	cbz	r5, 800f430 <__d2b+0x98>
 800f3fa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f3fe:	4405      	add	r5, r0
 800f400:	f8c9 5000 	str.w	r5, [r9]
 800f404:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f408:	f8c8 0000 	str.w	r0, [r8]
 800f40c:	4620      	mov	r0, r4
 800f40e:	b003      	add	sp, #12
 800f410:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f414:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f418:	e7d5      	b.n	800f3c6 <__d2b+0x2e>
 800f41a:	6161      	str	r1, [r4, #20]
 800f41c:	e7e5      	b.n	800f3ea <__d2b+0x52>
 800f41e:	a801      	add	r0, sp, #4
 800f420:	f7ff fd64 	bl	800eeec <__lo0bits>
 800f424:	9b01      	ldr	r3, [sp, #4]
 800f426:	6163      	str	r3, [r4, #20]
 800f428:	2201      	movs	r2, #1
 800f42a:	6122      	str	r2, [r4, #16]
 800f42c:	3020      	adds	r0, #32
 800f42e:	e7e3      	b.n	800f3f8 <__d2b+0x60>
 800f430:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f434:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f438:	f8c9 0000 	str.w	r0, [r9]
 800f43c:	6918      	ldr	r0, [r3, #16]
 800f43e:	f7ff fd35 	bl	800eeac <__hi0bits>
 800f442:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f446:	e7df      	b.n	800f408 <__d2b+0x70>
 800f448:	0800fcaf 	.word	0x0800fcaf
 800f44c:	0800fd20 	.word	0x0800fd20

0800f450 <_calloc_r>:
 800f450:	b513      	push	{r0, r1, r4, lr}
 800f452:	434a      	muls	r2, r1
 800f454:	4611      	mov	r1, r2
 800f456:	9201      	str	r2, [sp, #4]
 800f458:	f000 f85a 	bl	800f510 <_malloc_r>
 800f45c:	4604      	mov	r4, r0
 800f45e:	b118      	cbz	r0, 800f468 <_calloc_r+0x18>
 800f460:	9a01      	ldr	r2, [sp, #4]
 800f462:	2100      	movs	r1, #0
 800f464:	f7fd ff30 	bl	800d2c8 <memset>
 800f468:	4620      	mov	r0, r4
 800f46a:	b002      	add	sp, #8
 800f46c:	bd10      	pop	{r4, pc}
	...

0800f470 <_free_r>:
 800f470:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f472:	2900      	cmp	r1, #0
 800f474:	d048      	beq.n	800f508 <_free_r+0x98>
 800f476:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f47a:	9001      	str	r0, [sp, #4]
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	f1a1 0404 	sub.w	r4, r1, #4
 800f482:	bfb8      	it	lt
 800f484:	18e4      	addlt	r4, r4, r3
 800f486:	f000 fae3 	bl	800fa50 <__malloc_lock>
 800f48a:	4a20      	ldr	r2, [pc, #128]	; (800f50c <_free_r+0x9c>)
 800f48c:	9801      	ldr	r0, [sp, #4]
 800f48e:	6813      	ldr	r3, [r2, #0]
 800f490:	4615      	mov	r5, r2
 800f492:	b933      	cbnz	r3, 800f4a2 <_free_r+0x32>
 800f494:	6063      	str	r3, [r4, #4]
 800f496:	6014      	str	r4, [r2, #0]
 800f498:	b003      	add	sp, #12
 800f49a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f49e:	f000 badd 	b.w	800fa5c <__malloc_unlock>
 800f4a2:	42a3      	cmp	r3, r4
 800f4a4:	d90b      	bls.n	800f4be <_free_r+0x4e>
 800f4a6:	6821      	ldr	r1, [r4, #0]
 800f4a8:	1862      	adds	r2, r4, r1
 800f4aa:	4293      	cmp	r3, r2
 800f4ac:	bf04      	itt	eq
 800f4ae:	681a      	ldreq	r2, [r3, #0]
 800f4b0:	685b      	ldreq	r3, [r3, #4]
 800f4b2:	6063      	str	r3, [r4, #4]
 800f4b4:	bf04      	itt	eq
 800f4b6:	1852      	addeq	r2, r2, r1
 800f4b8:	6022      	streq	r2, [r4, #0]
 800f4ba:	602c      	str	r4, [r5, #0]
 800f4bc:	e7ec      	b.n	800f498 <_free_r+0x28>
 800f4be:	461a      	mov	r2, r3
 800f4c0:	685b      	ldr	r3, [r3, #4]
 800f4c2:	b10b      	cbz	r3, 800f4c8 <_free_r+0x58>
 800f4c4:	42a3      	cmp	r3, r4
 800f4c6:	d9fa      	bls.n	800f4be <_free_r+0x4e>
 800f4c8:	6811      	ldr	r1, [r2, #0]
 800f4ca:	1855      	adds	r5, r2, r1
 800f4cc:	42a5      	cmp	r5, r4
 800f4ce:	d10b      	bne.n	800f4e8 <_free_r+0x78>
 800f4d0:	6824      	ldr	r4, [r4, #0]
 800f4d2:	4421      	add	r1, r4
 800f4d4:	1854      	adds	r4, r2, r1
 800f4d6:	42a3      	cmp	r3, r4
 800f4d8:	6011      	str	r1, [r2, #0]
 800f4da:	d1dd      	bne.n	800f498 <_free_r+0x28>
 800f4dc:	681c      	ldr	r4, [r3, #0]
 800f4de:	685b      	ldr	r3, [r3, #4]
 800f4e0:	6053      	str	r3, [r2, #4]
 800f4e2:	4421      	add	r1, r4
 800f4e4:	6011      	str	r1, [r2, #0]
 800f4e6:	e7d7      	b.n	800f498 <_free_r+0x28>
 800f4e8:	d902      	bls.n	800f4f0 <_free_r+0x80>
 800f4ea:	230c      	movs	r3, #12
 800f4ec:	6003      	str	r3, [r0, #0]
 800f4ee:	e7d3      	b.n	800f498 <_free_r+0x28>
 800f4f0:	6825      	ldr	r5, [r4, #0]
 800f4f2:	1961      	adds	r1, r4, r5
 800f4f4:	428b      	cmp	r3, r1
 800f4f6:	bf04      	itt	eq
 800f4f8:	6819      	ldreq	r1, [r3, #0]
 800f4fa:	685b      	ldreq	r3, [r3, #4]
 800f4fc:	6063      	str	r3, [r4, #4]
 800f4fe:	bf04      	itt	eq
 800f500:	1949      	addeq	r1, r1, r5
 800f502:	6021      	streq	r1, [r4, #0]
 800f504:	6054      	str	r4, [r2, #4]
 800f506:	e7c7      	b.n	800f498 <_free_r+0x28>
 800f508:	b003      	add	sp, #12
 800f50a:	bd30      	pop	{r4, r5, pc}
 800f50c:	24000208 	.word	0x24000208

0800f510 <_malloc_r>:
 800f510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f512:	1ccd      	adds	r5, r1, #3
 800f514:	f025 0503 	bic.w	r5, r5, #3
 800f518:	3508      	adds	r5, #8
 800f51a:	2d0c      	cmp	r5, #12
 800f51c:	bf38      	it	cc
 800f51e:	250c      	movcc	r5, #12
 800f520:	2d00      	cmp	r5, #0
 800f522:	4606      	mov	r6, r0
 800f524:	db01      	blt.n	800f52a <_malloc_r+0x1a>
 800f526:	42a9      	cmp	r1, r5
 800f528:	d903      	bls.n	800f532 <_malloc_r+0x22>
 800f52a:	230c      	movs	r3, #12
 800f52c:	6033      	str	r3, [r6, #0]
 800f52e:	2000      	movs	r0, #0
 800f530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f532:	f000 fa8d 	bl	800fa50 <__malloc_lock>
 800f536:	4921      	ldr	r1, [pc, #132]	; (800f5bc <_malloc_r+0xac>)
 800f538:	680a      	ldr	r2, [r1, #0]
 800f53a:	4614      	mov	r4, r2
 800f53c:	b99c      	cbnz	r4, 800f566 <_malloc_r+0x56>
 800f53e:	4f20      	ldr	r7, [pc, #128]	; (800f5c0 <_malloc_r+0xb0>)
 800f540:	683b      	ldr	r3, [r7, #0]
 800f542:	b923      	cbnz	r3, 800f54e <_malloc_r+0x3e>
 800f544:	4621      	mov	r1, r4
 800f546:	4630      	mov	r0, r6
 800f548:	f000 f996 	bl	800f878 <_sbrk_r>
 800f54c:	6038      	str	r0, [r7, #0]
 800f54e:	4629      	mov	r1, r5
 800f550:	4630      	mov	r0, r6
 800f552:	f000 f991 	bl	800f878 <_sbrk_r>
 800f556:	1c43      	adds	r3, r0, #1
 800f558:	d123      	bne.n	800f5a2 <_malloc_r+0x92>
 800f55a:	230c      	movs	r3, #12
 800f55c:	6033      	str	r3, [r6, #0]
 800f55e:	4630      	mov	r0, r6
 800f560:	f000 fa7c 	bl	800fa5c <__malloc_unlock>
 800f564:	e7e3      	b.n	800f52e <_malloc_r+0x1e>
 800f566:	6823      	ldr	r3, [r4, #0]
 800f568:	1b5b      	subs	r3, r3, r5
 800f56a:	d417      	bmi.n	800f59c <_malloc_r+0x8c>
 800f56c:	2b0b      	cmp	r3, #11
 800f56e:	d903      	bls.n	800f578 <_malloc_r+0x68>
 800f570:	6023      	str	r3, [r4, #0]
 800f572:	441c      	add	r4, r3
 800f574:	6025      	str	r5, [r4, #0]
 800f576:	e004      	b.n	800f582 <_malloc_r+0x72>
 800f578:	6863      	ldr	r3, [r4, #4]
 800f57a:	42a2      	cmp	r2, r4
 800f57c:	bf0c      	ite	eq
 800f57e:	600b      	streq	r3, [r1, #0]
 800f580:	6053      	strne	r3, [r2, #4]
 800f582:	4630      	mov	r0, r6
 800f584:	f000 fa6a 	bl	800fa5c <__malloc_unlock>
 800f588:	f104 000b 	add.w	r0, r4, #11
 800f58c:	1d23      	adds	r3, r4, #4
 800f58e:	f020 0007 	bic.w	r0, r0, #7
 800f592:	1ac2      	subs	r2, r0, r3
 800f594:	d0cc      	beq.n	800f530 <_malloc_r+0x20>
 800f596:	1a1b      	subs	r3, r3, r0
 800f598:	50a3      	str	r3, [r4, r2]
 800f59a:	e7c9      	b.n	800f530 <_malloc_r+0x20>
 800f59c:	4622      	mov	r2, r4
 800f59e:	6864      	ldr	r4, [r4, #4]
 800f5a0:	e7cc      	b.n	800f53c <_malloc_r+0x2c>
 800f5a2:	1cc4      	adds	r4, r0, #3
 800f5a4:	f024 0403 	bic.w	r4, r4, #3
 800f5a8:	42a0      	cmp	r0, r4
 800f5aa:	d0e3      	beq.n	800f574 <_malloc_r+0x64>
 800f5ac:	1a21      	subs	r1, r4, r0
 800f5ae:	4630      	mov	r0, r6
 800f5b0:	f000 f962 	bl	800f878 <_sbrk_r>
 800f5b4:	3001      	adds	r0, #1
 800f5b6:	d1dd      	bne.n	800f574 <_malloc_r+0x64>
 800f5b8:	e7cf      	b.n	800f55a <_malloc_r+0x4a>
 800f5ba:	bf00      	nop
 800f5bc:	24000208 	.word	0x24000208
 800f5c0:	2400020c 	.word	0x2400020c

0800f5c4 <__sfputc_r>:
 800f5c4:	6893      	ldr	r3, [r2, #8]
 800f5c6:	3b01      	subs	r3, #1
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	b410      	push	{r4}
 800f5cc:	6093      	str	r3, [r2, #8]
 800f5ce:	da08      	bge.n	800f5e2 <__sfputc_r+0x1e>
 800f5d0:	6994      	ldr	r4, [r2, #24]
 800f5d2:	42a3      	cmp	r3, r4
 800f5d4:	db01      	blt.n	800f5da <__sfputc_r+0x16>
 800f5d6:	290a      	cmp	r1, #10
 800f5d8:	d103      	bne.n	800f5e2 <__sfputc_r+0x1e>
 800f5da:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f5de:	f7fe babd 	b.w	800db5c <__swbuf_r>
 800f5e2:	6813      	ldr	r3, [r2, #0]
 800f5e4:	1c58      	adds	r0, r3, #1
 800f5e6:	6010      	str	r0, [r2, #0]
 800f5e8:	7019      	strb	r1, [r3, #0]
 800f5ea:	4608      	mov	r0, r1
 800f5ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f5f0:	4770      	bx	lr

0800f5f2 <__sfputs_r>:
 800f5f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5f4:	4606      	mov	r6, r0
 800f5f6:	460f      	mov	r7, r1
 800f5f8:	4614      	mov	r4, r2
 800f5fa:	18d5      	adds	r5, r2, r3
 800f5fc:	42ac      	cmp	r4, r5
 800f5fe:	d101      	bne.n	800f604 <__sfputs_r+0x12>
 800f600:	2000      	movs	r0, #0
 800f602:	e007      	b.n	800f614 <__sfputs_r+0x22>
 800f604:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f608:	463a      	mov	r2, r7
 800f60a:	4630      	mov	r0, r6
 800f60c:	f7ff ffda 	bl	800f5c4 <__sfputc_r>
 800f610:	1c43      	adds	r3, r0, #1
 800f612:	d1f3      	bne.n	800f5fc <__sfputs_r+0xa>
 800f614:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f618 <_vfiprintf_r>:
 800f618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f61c:	460d      	mov	r5, r1
 800f61e:	b09d      	sub	sp, #116	; 0x74
 800f620:	4614      	mov	r4, r2
 800f622:	4698      	mov	r8, r3
 800f624:	4606      	mov	r6, r0
 800f626:	b118      	cbz	r0, 800f630 <_vfiprintf_r+0x18>
 800f628:	6983      	ldr	r3, [r0, #24]
 800f62a:	b90b      	cbnz	r3, 800f630 <_vfiprintf_r+0x18>
 800f62c:	f7ff fa80 	bl	800eb30 <__sinit>
 800f630:	4b89      	ldr	r3, [pc, #548]	; (800f858 <_vfiprintf_r+0x240>)
 800f632:	429d      	cmp	r5, r3
 800f634:	d11b      	bne.n	800f66e <_vfiprintf_r+0x56>
 800f636:	6875      	ldr	r5, [r6, #4]
 800f638:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f63a:	07d9      	lsls	r1, r3, #31
 800f63c:	d405      	bmi.n	800f64a <_vfiprintf_r+0x32>
 800f63e:	89ab      	ldrh	r3, [r5, #12]
 800f640:	059a      	lsls	r2, r3, #22
 800f642:	d402      	bmi.n	800f64a <_vfiprintf_r+0x32>
 800f644:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f646:	f7ff fb16 	bl	800ec76 <__retarget_lock_acquire_recursive>
 800f64a:	89ab      	ldrh	r3, [r5, #12]
 800f64c:	071b      	lsls	r3, r3, #28
 800f64e:	d501      	bpl.n	800f654 <_vfiprintf_r+0x3c>
 800f650:	692b      	ldr	r3, [r5, #16]
 800f652:	b9eb      	cbnz	r3, 800f690 <_vfiprintf_r+0x78>
 800f654:	4629      	mov	r1, r5
 800f656:	4630      	mov	r0, r6
 800f658:	f7fe fad2 	bl	800dc00 <__swsetup_r>
 800f65c:	b1c0      	cbz	r0, 800f690 <_vfiprintf_r+0x78>
 800f65e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f660:	07dc      	lsls	r4, r3, #31
 800f662:	d50e      	bpl.n	800f682 <_vfiprintf_r+0x6a>
 800f664:	f04f 30ff 	mov.w	r0, #4294967295
 800f668:	b01d      	add	sp, #116	; 0x74
 800f66a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f66e:	4b7b      	ldr	r3, [pc, #492]	; (800f85c <_vfiprintf_r+0x244>)
 800f670:	429d      	cmp	r5, r3
 800f672:	d101      	bne.n	800f678 <_vfiprintf_r+0x60>
 800f674:	68b5      	ldr	r5, [r6, #8]
 800f676:	e7df      	b.n	800f638 <_vfiprintf_r+0x20>
 800f678:	4b79      	ldr	r3, [pc, #484]	; (800f860 <_vfiprintf_r+0x248>)
 800f67a:	429d      	cmp	r5, r3
 800f67c:	bf08      	it	eq
 800f67e:	68f5      	ldreq	r5, [r6, #12]
 800f680:	e7da      	b.n	800f638 <_vfiprintf_r+0x20>
 800f682:	89ab      	ldrh	r3, [r5, #12]
 800f684:	0598      	lsls	r0, r3, #22
 800f686:	d4ed      	bmi.n	800f664 <_vfiprintf_r+0x4c>
 800f688:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f68a:	f7ff faf5 	bl	800ec78 <__retarget_lock_release_recursive>
 800f68e:	e7e9      	b.n	800f664 <_vfiprintf_r+0x4c>
 800f690:	2300      	movs	r3, #0
 800f692:	9309      	str	r3, [sp, #36]	; 0x24
 800f694:	2320      	movs	r3, #32
 800f696:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f69a:	f8cd 800c 	str.w	r8, [sp, #12]
 800f69e:	2330      	movs	r3, #48	; 0x30
 800f6a0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f864 <_vfiprintf_r+0x24c>
 800f6a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f6a8:	f04f 0901 	mov.w	r9, #1
 800f6ac:	4623      	mov	r3, r4
 800f6ae:	469a      	mov	sl, r3
 800f6b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f6b4:	b10a      	cbz	r2, 800f6ba <_vfiprintf_r+0xa2>
 800f6b6:	2a25      	cmp	r2, #37	; 0x25
 800f6b8:	d1f9      	bne.n	800f6ae <_vfiprintf_r+0x96>
 800f6ba:	ebba 0b04 	subs.w	fp, sl, r4
 800f6be:	d00b      	beq.n	800f6d8 <_vfiprintf_r+0xc0>
 800f6c0:	465b      	mov	r3, fp
 800f6c2:	4622      	mov	r2, r4
 800f6c4:	4629      	mov	r1, r5
 800f6c6:	4630      	mov	r0, r6
 800f6c8:	f7ff ff93 	bl	800f5f2 <__sfputs_r>
 800f6cc:	3001      	adds	r0, #1
 800f6ce:	f000 80aa 	beq.w	800f826 <_vfiprintf_r+0x20e>
 800f6d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f6d4:	445a      	add	r2, fp
 800f6d6:	9209      	str	r2, [sp, #36]	; 0x24
 800f6d8:	f89a 3000 	ldrb.w	r3, [sl]
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	f000 80a2 	beq.w	800f826 <_vfiprintf_r+0x20e>
 800f6e2:	2300      	movs	r3, #0
 800f6e4:	f04f 32ff 	mov.w	r2, #4294967295
 800f6e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f6ec:	f10a 0a01 	add.w	sl, sl, #1
 800f6f0:	9304      	str	r3, [sp, #16]
 800f6f2:	9307      	str	r3, [sp, #28]
 800f6f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f6f8:	931a      	str	r3, [sp, #104]	; 0x68
 800f6fa:	4654      	mov	r4, sl
 800f6fc:	2205      	movs	r2, #5
 800f6fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f702:	4858      	ldr	r0, [pc, #352]	; (800f864 <_vfiprintf_r+0x24c>)
 800f704:	f7f0 fdf4 	bl	80002f0 <memchr>
 800f708:	9a04      	ldr	r2, [sp, #16]
 800f70a:	b9d8      	cbnz	r0, 800f744 <_vfiprintf_r+0x12c>
 800f70c:	06d1      	lsls	r1, r2, #27
 800f70e:	bf44      	itt	mi
 800f710:	2320      	movmi	r3, #32
 800f712:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f716:	0713      	lsls	r3, r2, #28
 800f718:	bf44      	itt	mi
 800f71a:	232b      	movmi	r3, #43	; 0x2b
 800f71c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f720:	f89a 3000 	ldrb.w	r3, [sl]
 800f724:	2b2a      	cmp	r3, #42	; 0x2a
 800f726:	d015      	beq.n	800f754 <_vfiprintf_r+0x13c>
 800f728:	9a07      	ldr	r2, [sp, #28]
 800f72a:	4654      	mov	r4, sl
 800f72c:	2000      	movs	r0, #0
 800f72e:	f04f 0c0a 	mov.w	ip, #10
 800f732:	4621      	mov	r1, r4
 800f734:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f738:	3b30      	subs	r3, #48	; 0x30
 800f73a:	2b09      	cmp	r3, #9
 800f73c:	d94e      	bls.n	800f7dc <_vfiprintf_r+0x1c4>
 800f73e:	b1b0      	cbz	r0, 800f76e <_vfiprintf_r+0x156>
 800f740:	9207      	str	r2, [sp, #28]
 800f742:	e014      	b.n	800f76e <_vfiprintf_r+0x156>
 800f744:	eba0 0308 	sub.w	r3, r0, r8
 800f748:	fa09 f303 	lsl.w	r3, r9, r3
 800f74c:	4313      	orrs	r3, r2
 800f74e:	9304      	str	r3, [sp, #16]
 800f750:	46a2      	mov	sl, r4
 800f752:	e7d2      	b.n	800f6fa <_vfiprintf_r+0xe2>
 800f754:	9b03      	ldr	r3, [sp, #12]
 800f756:	1d19      	adds	r1, r3, #4
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	9103      	str	r1, [sp, #12]
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	bfbb      	ittet	lt
 800f760:	425b      	neglt	r3, r3
 800f762:	f042 0202 	orrlt.w	r2, r2, #2
 800f766:	9307      	strge	r3, [sp, #28]
 800f768:	9307      	strlt	r3, [sp, #28]
 800f76a:	bfb8      	it	lt
 800f76c:	9204      	strlt	r2, [sp, #16]
 800f76e:	7823      	ldrb	r3, [r4, #0]
 800f770:	2b2e      	cmp	r3, #46	; 0x2e
 800f772:	d10c      	bne.n	800f78e <_vfiprintf_r+0x176>
 800f774:	7863      	ldrb	r3, [r4, #1]
 800f776:	2b2a      	cmp	r3, #42	; 0x2a
 800f778:	d135      	bne.n	800f7e6 <_vfiprintf_r+0x1ce>
 800f77a:	9b03      	ldr	r3, [sp, #12]
 800f77c:	1d1a      	adds	r2, r3, #4
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	9203      	str	r2, [sp, #12]
 800f782:	2b00      	cmp	r3, #0
 800f784:	bfb8      	it	lt
 800f786:	f04f 33ff 	movlt.w	r3, #4294967295
 800f78a:	3402      	adds	r4, #2
 800f78c:	9305      	str	r3, [sp, #20]
 800f78e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f874 <_vfiprintf_r+0x25c>
 800f792:	7821      	ldrb	r1, [r4, #0]
 800f794:	2203      	movs	r2, #3
 800f796:	4650      	mov	r0, sl
 800f798:	f7f0 fdaa 	bl	80002f0 <memchr>
 800f79c:	b140      	cbz	r0, 800f7b0 <_vfiprintf_r+0x198>
 800f79e:	2340      	movs	r3, #64	; 0x40
 800f7a0:	eba0 000a 	sub.w	r0, r0, sl
 800f7a4:	fa03 f000 	lsl.w	r0, r3, r0
 800f7a8:	9b04      	ldr	r3, [sp, #16]
 800f7aa:	4303      	orrs	r3, r0
 800f7ac:	3401      	adds	r4, #1
 800f7ae:	9304      	str	r3, [sp, #16]
 800f7b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f7b4:	482c      	ldr	r0, [pc, #176]	; (800f868 <_vfiprintf_r+0x250>)
 800f7b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f7ba:	2206      	movs	r2, #6
 800f7bc:	f7f0 fd98 	bl	80002f0 <memchr>
 800f7c0:	2800      	cmp	r0, #0
 800f7c2:	d03f      	beq.n	800f844 <_vfiprintf_r+0x22c>
 800f7c4:	4b29      	ldr	r3, [pc, #164]	; (800f86c <_vfiprintf_r+0x254>)
 800f7c6:	bb1b      	cbnz	r3, 800f810 <_vfiprintf_r+0x1f8>
 800f7c8:	9b03      	ldr	r3, [sp, #12]
 800f7ca:	3307      	adds	r3, #7
 800f7cc:	f023 0307 	bic.w	r3, r3, #7
 800f7d0:	3308      	adds	r3, #8
 800f7d2:	9303      	str	r3, [sp, #12]
 800f7d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f7d6:	443b      	add	r3, r7
 800f7d8:	9309      	str	r3, [sp, #36]	; 0x24
 800f7da:	e767      	b.n	800f6ac <_vfiprintf_r+0x94>
 800f7dc:	fb0c 3202 	mla	r2, ip, r2, r3
 800f7e0:	460c      	mov	r4, r1
 800f7e2:	2001      	movs	r0, #1
 800f7e4:	e7a5      	b.n	800f732 <_vfiprintf_r+0x11a>
 800f7e6:	2300      	movs	r3, #0
 800f7e8:	3401      	adds	r4, #1
 800f7ea:	9305      	str	r3, [sp, #20]
 800f7ec:	4619      	mov	r1, r3
 800f7ee:	f04f 0c0a 	mov.w	ip, #10
 800f7f2:	4620      	mov	r0, r4
 800f7f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f7f8:	3a30      	subs	r2, #48	; 0x30
 800f7fa:	2a09      	cmp	r2, #9
 800f7fc:	d903      	bls.n	800f806 <_vfiprintf_r+0x1ee>
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d0c5      	beq.n	800f78e <_vfiprintf_r+0x176>
 800f802:	9105      	str	r1, [sp, #20]
 800f804:	e7c3      	b.n	800f78e <_vfiprintf_r+0x176>
 800f806:	fb0c 2101 	mla	r1, ip, r1, r2
 800f80a:	4604      	mov	r4, r0
 800f80c:	2301      	movs	r3, #1
 800f80e:	e7f0      	b.n	800f7f2 <_vfiprintf_r+0x1da>
 800f810:	ab03      	add	r3, sp, #12
 800f812:	9300      	str	r3, [sp, #0]
 800f814:	462a      	mov	r2, r5
 800f816:	4b16      	ldr	r3, [pc, #88]	; (800f870 <_vfiprintf_r+0x258>)
 800f818:	a904      	add	r1, sp, #16
 800f81a:	4630      	mov	r0, r6
 800f81c:	f7fd fdec 	bl	800d3f8 <_printf_float>
 800f820:	4607      	mov	r7, r0
 800f822:	1c78      	adds	r0, r7, #1
 800f824:	d1d6      	bne.n	800f7d4 <_vfiprintf_r+0x1bc>
 800f826:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f828:	07d9      	lsls	r1, r3, #31
 800f82a:	d405      	bmi.n	800f838 <_vfiprintf_r+0x220>
 800f82c:	89ab      	ldrh	r3, [r5, #12]
 800f82e:	059a      	lsls	r2, r3, #22
 800f830:	d402      	bmi.n	800f838 <_vfiprintf_r+0x220>
 800f832:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f834:	f7ff fa20 	bl	800ec78 <__retarget_lock_release_recursive>
 800f838:	89ab      	ldrh	r3, [r5, #12]
 800f83a:	065b      	lsls	r3, r3, #25
 800f83c:	f53f af12 	bmi.w	800f664 <_vfiprintf_r+0x4c>
 800f840:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f842:	e711      	b.n	800f668 <_vfiprintf_r+0x50>
 800f844:	ab03      	add	r3, sp, #12
 800f846:	9300      	str	r3, [sp, #0]
 800f848:	462a      	mov	r2, r5
 800f84a:	4b09      	ldr	r3, [pc, #36]	; (800f870 <_vfiprintf_r+0x258>)
 800f84c:	a904      	add	r1, sp, #16
 800f84e:	4630      	mov	r0, r6
 800f850:	f7fe f85e 	bl	800d910 <_printf_i>
 800f854:	e7e4      	b.n	800f820 <_vfiprintf_r+0x208>
 800f856:	bf00      	nop
 800f858:	0800fce0 	.word	0x0800fce0
 800f85c:	0800fd00 	.word	0x0800fd00
 800f860:	0800fcc0 	.word	0x0800fcc0
 800f864:	0800fe7c 	.word	0x0800fe7c
 800f868:	0800fe86 	.word	0x0800fe86
 800f86c:	0800d3f9 	.word	0x0800d3f9
 800f870:	0800f5f3 	.word	0x0800f5f3
 800f874:	0800fe82 	.word	0x0800fe82

0800f878 <_sbrk_r>:
 800f878:	b538      	push	{r3, r4, r5, lr}
 800f87a:	4d06      	ldr	r5, [pc, #24]	; (800f894 <_sbrk_r+0x1c>)
 800f87c:	2300      	movs	r3, #0
 800f87e:	4604      	mov	r4, r0
 800f880:	4608      	mov	r0, r1
 800f882:	602b      	str	r3, [r5, #0]
 800f884:	f7f3 fb3e 	bl	8002f04 <_sbrk>
 800f888:	1c43      	adds	r3, r0, #1
 800f88a:	d102      	bne.n	800f892 <_sbrk_r+0x1a>
 800f88c:	682b      	ldr	r3, [r5, #0]
 800f88e:	b103      	cbz	r3, 800f892 <_sbrk_r+0x1a>
 800f890:	6023      	str	r3, [r4, #0]
 800f892:	bd38      	pop	{r3, r4, r5, pc}
 800f894:	24000c70 	.word	0x24000c70

0800f898 <__sread>:
 800f898:	b510      	push	{r4, lr}
 800f89a:	460c      	mov	r4, r1
 800f89c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f8a0:	f000 f8e2 	bl	800fa68 <_read_r>
 800f8a4:	2800      	cmp	r0, #0
 800f8a6:	bfab      	itete	ge
 800f8a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f8aa:	89a3      	ldrhlt	r3, [r4, #12]
 800f8ac:	181b      	addge	r3, r3, r0
 800f8ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f8b2:	bfac      	ite	ge
 800f8b4:	6563      	strge	r3, [r4, #84]	; 0x54
 800f8b6:	81a3      	strhlt	r3, [r4, #12]
 800f8b8:	bd10      	pop	{r4, pc}

0800f8ba <__swrite>:
 800f8ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8be:	461f      	mov	r7, r3
 800f8c0:	898b      	ldrh	r3, [r1, #12]
 800f8c2:	05db      	lsls	r3, r3, #23
 800f8c4:	4605      	mov	r5, r0
 800f8c6:	460c      	mov	r4, r1
 800f8c8:	4616      	mov	r6, r2
 800f8ca:	d505      	bpl.n	800f8d8 <__swrite+0x1e>
 800f8cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f8d0:	2302      	movs	r3, #2
 800f8d2:	2200      	movs	r2, #0
 800f8d4:	f000 f898 	bl	800fa08 <_lseek_r>
 800f8d8:	89a3      	ldrh	r3, [r4, #12]
 800f8da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f8de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f8e2:	81a3      	strh	r3, [r4, #12]
 800f8e4:	4632      	mov	r2, r6
 800f8e6:	463b      	mov	r3, r7
 800f8e8:	4628      	mov	r0, r5
 800f8ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f8ee:	f000 b817 	b.w	800f920 <_write_r>

0800f8f2 <__sseek>:
 800f8f2:	b510      	push	{r4, lr}
 800f8f4:	460c      	mov	r4, r1
 800f8f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f8fa:	f000 f885 	bl	800fa08 <_lseek_r>
 800f8fe:	1c43      	adds	r3, r0, #1
 800f900:	89a3      	ldrh	r3, [r4, #12]
 800f902:	bf15      	itete	ne
 800f904:	6560      	strne	r0, [r4, #84]	; 0x54
 800f906:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f90a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f90e:	81a3      	strheq	r3, [r4, #12]
 800f910:	bf18      	it	ne
 800f912:	81a3      	strhne	r3, [r4, #12]
 800f914:	bd10      	pop	{r4, pc}

0800f916 <__sclose>:
 800f916:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f91a:	f000 b831 	b.w	800f980 <_close_r>
	...

0800f920 <_write_r>:
 800f920:	b538      	push	{r3, r4, r5, lr}
 800f922:	4d07      	ldr	r5, [pc, #28]	; (800f940 <_write_r+0x20>)
 800f924:	4604      	mov	r4, r0
 800f926:	4608      	mov	r0, r1
 800f928:	4611      	mov	r1, r2
 800f92a:	2200      	movs	r2, #0
 800f92c:	602a      	str	r2, [r5, #0]
 800f92e:	461a      	mov	r2, r3
 800f930:	f7f3 fa97 	bl	8002e62 <_write>
 800f934:	1c43      	adds	r3, r0, #1
 800f936:	d102      	bne.n	800f93e <_write_r+0x1e>
 800f938:	682b      	ldr	r3, [r5, #0]
 800f93a:	b103      	cbz	r3, 800f93e <_write_r+0x1e>
 800f93c:	6023      	str	r3, [r4, #0]
 800f93e:	bd38      	pop	{r3, r4, r5, pc}
 800f940:	24000c70 	.word	0x24000c70

0800f944 <__assert_func>:
 800f944:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f946:	4614      	mov	r4, r2
 800f948:	461a      	mov	r2, r3
 800f94a:	4b09      	ldr	r3, [pc, #36]	; (800f970 <__assert_func+0x2c>)
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	4605      	mov	r5, r0
 800f950:	68d8      	ldr	r0, [r3, #12]
 800f952:	b14c      	cbz	r4, 800f968 <__assert_func+0x24>
 800f954:	4b07      	ldr	r3, [pc, #28]	; (800f974 <__assert_func+0x30>)
 800f956:	9100      	str	r1, [sp, #0]
 800f958:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f95c:	4906      	ldr	r1, [pc, #24]	; (800f978 <__assert_func+0x34>)
 800f95e:	462b      	mov	r3, r5
 800f960:	f000 f81e 	bl	800f9a0 <fiprintf>
 800f964:	f000 f89f 	bl	800faa6 <abort>
 800f968:	4b04      	ldr	r3, [pc, #16]	; (800f97c <__assert_func+0x38>)
 800f96a:	461c      	mov	r4, r3
 800f96c:	e7f3      	b.n	800f956 <__assert_func+0x12>
 800f96e:	bf00      	nop
 800f970:	24000010 	.word	0x24000010
 800f974:	0800fe8d 	.word	0x0800fe8d
 800f978:	0800fe9a 	.word	0x0800fe9a
 800f97c:	0800fec8 	.word	0x0800fec8

0800f980 <_close_r>:
 800f980:	b538      	push	{r3, r4, r5, lr}
 800f982:	4d06      	ldr	r5, [pc, #24]	; (800f99c <_close_r+0x1c>)
 800f984:	2300      	movs	r3, #0
 800f986:	4604      	mov	r4, r0
 800f988:	4608      	mov	r0, r1
 800f98a:	602b      	str	r3, [r5, #0]
 800f98c:	f7f3 fa85 	bl	8002e9a <_close>
 800f990:	1c43      	adds	r3, r0, #1
 800f992:	d102      	bne.n	800f99a <_close_r+0x1a>
 800f994:	682b      	ldr	r3, [r5, #0]
 800f996:	b103      	cbz	r3, 800f99a <_close_r+0x1a>
 800f998:	6023      	str	r3, [r4, #0]
 800f99a:	bd38      	pop	{r3, r4, r5, pc}
 800f99c:	24000c70 	.word	0x24000c70

0800f9a0 <fiprintf>:
 800f9a0:	b40e      	push	{r1, r2, r3}
 800f9a2:	b503      	push	{r0, r1, lr}
 800f9a4:	4601      	mov	r1, r0
 800f9a6:	ab03      	add	r3, sp, #12
 800f9a8:	4805      	ldr	r0, [pc, #20]	; (800f9c0 <fiprintf+0x20>)
 800f9aa:	f853 2b04 	ldr.w	r2, [r3], #4
 800f9ae:	6800      	ldr	r0, [r0, #0]
 800f9b0:	9301      	str	r3, [sp, #4]
 800f9b2:	f7ff fe31 	bl	800f618 <_vfiprintf_r>
 800f9b6:	b002      	add	sp, #8
 800f9b8:	f85d eb04 	ldr.w	lr, [sp], #4
 800f9bc:	b003      	add	sp, #12
 800f9be:	4770      	bx	lr
 800f9c0:	24000010 	.word	0x24000010

0800f9c4 <_fstat_r>:
 800f9c4:	b538      	push	{r3, r4, r5, lr}
 800f9c6:	4d07      	ldr	r5, [pc, #28]	; (800f9e4 <_fstat_r+0x20>)
 800f9c8:	2300      	movs	r3, #0
 800f9ca:	4604      	mov	r4, r0
 800f9cc:	4608      	mov	r0, r1
 800f9ce:	4611      	mov	r1, r2
 800f9d0:	602b      	str	r3, [r5, #0]
 800f9d2:	f7f3 fa6e 	bl	8002eb2 <_fstat>
 800f9d6:	1c43      	adds	r3, r0, #1
 800f9d8:	d102      	bne.n	800f9e0 <_fstat_r+0x1c>
 800f9da:	682b      	ldr	r3, [r5, #0]
 800f9dc:	b103      	cbz	r3, 800f9e0 <_fstat_r+0x1c>
 800f9de:	6023      	str	r3, [r4, #0]
 800f9e0:	bd38      	pop	{r3, r4, r5, pc}
 800f9e2:	bf00      	nop
 800f9e4:	24000c70 	.word	0x24000c70

0800f9e8 <_isatty_r>:
 800f9e8:	b538      	push	{r3, r4, r5, lr}
 800f9ea:	4d06      	ldr	r5, [pc, #24]	; (800fa04 <_isatty_r+0x1c>)
 800f9ec:	2300      	movs	r3, #0
 800f9ee:	4604      	mov	r4, r0
 800f9f0:	4608      	mov	r0, r1
 800f9f2:	602b      	str	r3, [r5, #0]
 800f9f4:	f7f3 fa6d 	bl	8002ed2 <_isatty>
 800f9f8:	1c43      	adds	r3, r0, #1
 800f9fa:	d102      	bne.n	800fa02 <_isatty_r+0x1a>
 800f9fc:	682b      	ldr	r3, [r5, #0]
 800f9fe:	b103      	cbz	r3, 800fa02 <_isatty_r+0x1a>
 800fa00:	6023      	str	r3, [r4, #0]
 800fa02:	bd38      	pop	{r3, r4, r5, pc}
 800fa04:	24000c70 	.word	0x24000c70

0800fa08 <_lseek_r>:
 800fa08:	b538      	push	{r3, r4, r5, lr}
 800fa0a:	4d07      	ldr	r5, [pc, #28]	; (800fa28 <_lseek_r+0x20>)
 800fa0c:	4604      	mov	r4, r0
 800fa0e:	4608      	mov	r0, r1
 800fa10:	4611      	mov	r1, r2
 800fa12:	2200      	movs	r2, #0
 800fa14:	602a      	str	r2, [r5, #0]
 800fa16:	461a      	mov	r2, r3
 800fa18:	f7f3 fa66 	bl	8002ee8 <_lseek>
 800fa1c:	1c43      	adds	r3, r0, #1
 800fa1e:	d102      	bne.n	800fa26 <_lseek_r+0x1e>
 800fa20:	682b      	ldr	r3, [r5, #0]
 800fa22:	b103      	cbz	r3, 800fa26 <_lseek_r+0x1e>
 800fa24:	6023      	str	r3, [r4, #0]
 800fa26:	bd38      	pop	{r3, r4, r5, pc}
 800fa28:	24000c70 	.word	0x24000c70

0800fa2c <__ascii_mbtowc>:
 800fa2c:	b082      	sub	sp, #8
 800fa2e:	b901      	cbnz	r1, 800fa32 <__ascii_mbtowc+0x6>
 800fa30:	a901      	add	r1, sp, #4
 800fa32:	b142      	cbz	r2, 800fa46 <__ascii_mbtowc+0x1a>
 800fa34:	b14b      	cbz	r3, 800fa4a <__ascii_mbtowc+0x1e>
 800fa36:	7813      	ldrb	r3, [r2, #0]
 800fa38:	600b      	str	r3, [r1, #0]
 800fa3a:	7812      	ldrb	r2, [r2, #0]
 800fa3c:	1e10      	subs	r0, r2, #0
 800fa3e:	bf18      	it	ne
 800fa40:	2001      	movne	r0, #1
 800fa42:	b002      	add	sp, #8
 800fa44:	4770      	bx	lr
 800fa46:	4610      	mov	r0, r2
 800fa48:	e7fb      	b.n	800fa42 <__ascii_mbtowc+0x16>
 800fa4a:	f06f 0001 	mvn.w	r0, #1
 800fa4e:	e7f8      	b.n	800fa42 <__ascii_mbtowc+0x16>

0800fa50 <__malloc_lock>:
 800fa50:	4801      	ldr	r0, [pc, #4]	; (800fa58 <__malloc_lock+0x8>)
 800fa52:	f7ff b910 	b.w	800ec76 <__retarget_lock_acquire_recursive>
 800fa56:	bf00      	nop
 800fa58:	24000c68 	.word	0x24000c68

0800fa5c <__malloc_unlock>:
 800fa5c:	4801      	ldr	r0, [pc, #4]	; (800fa64 <__malloc_unlock+0x8>)
 800fa5e:	f7ff b90b 	b.w	800ec78 <__retarget_lock_release_recursive>
 800fa62:	bf00      	nop
 800fa64:	24000c68 	.word	0x24000c68

0800fa68 <_read_r>:
 800fa68:	b538      	push	{r3, r4, r5, lr}
 800fa6a:	4d07      	ldr	r5, [pc, #28]	; (800fa88 <_read_r+0x20>)
 800fa6c:	4604      	mov	r4, r0
 800fa6e:	4608      	mov	r0, r1
 800fa70:	4611      	mov	r1, r2
 800fa72:	2200      	movs	r2, #0
 800fa74:	602a      	str	r2, [r5, #0]
 800fa76:	461a      	mov	r2, r3
 800fa78:	f7f3 f9d6 	bl	8002e28 <_read>
 800fa7c:	1c43      	adds	r3, r0, #1
 800fa7e:	d102      	bne.n	800fa86 <_read_r+0x1e>
 800fa80:	682b      	ldr	r3, [r5, #0]
 800fa82:	b103      	cbz	r3, 800fa86 <_read_r+0x1e>
 800fa84:	6023      	str	r3, [r4, #0]
 800fa86:	bd38      	pop	{r3, r4, r5, pc}
 800fa88:	24000c70 	.word	0x24000c70

0800fa8c <__ascii_wctomb>:
 800fa8c:	b149      	cbz	r1, 800faa2 <__ascii_wctomb+0x16>
 800fa8e:	2aff      	cmp	r2, #255	; 0xff
 800fa90:	bf85      	ittet	hi
 800fa92:	238a      	movhi	r3, #138	; 0x8a
 800fa94:	6003      	strhi	r3, [r0, #0]
 800fa96:	700a      	strbls	r2, [r1, #0]
 800fa98:	f04f 30ff 	movhi.w	r0, #4294967295
 800fa9c:	bf98      	it	ls
 800fa9e:	2001      	movls	r0, #1
 800faa0:	4770      	bx	lr
 800faa2:	4608      	mov	r0, r1
 800faa4:	4770      	bx	lr

0800faa6 <abort>:
 800faa6:	b508      	push	{r3, lr}
 800faa8:	2006      	movs	r0, #6
 800faaa:	f000 f82b 	bl	800fb04 <raise>
 800faae:	2001      	movs	r0, #1
 800fab0:	f7f3 f9b0 	bl	8002e14 <_exit>

0800fab4 <_raise_r>:
 800fab4:	291f      	cmp	r1, #31
 800fab6:	b538      	push	{r3, r4, r5, lr}
 800fab8:	4604      	mov	r4, r0
 800faba:	460d      	mov	r5, r1
 800fabc:	d904      	bls.n	800fac8 <_raise_r+0x14>
 800fabe:	2316      	movs	r3, #22
 800fac0:	6003      	str	r3, [r0, #0]
 800fac2:	f04f 30ff 	mov.w	r0, #4294967295
 800fac6:	bd38      	pop	{r3, r4, r5, pc}
 800fac8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800faca:	b112      	cbz	r2, 800fad2 <_raise_r+0x1e>
 800facc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fad0:	b94b      	cbnz	r3, 800fae6 <_raise_r+0x32>
 800fad2:	4620      	mov	r0, r4
 800fad4:	f000 f830 	bl	800fb38 <_getpid_r>
 800fad8:	462a      	mov	r2, r5
 800fada:	4601      	mov	r1, r0
 800fadc:	4620      	mov	r0, r4
 800fade:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fae2:	f000 b817 	b.w	800fb14 <_kill_r>
 800fae6:	2b01      	cmp	r3, #1
 800fae8:	d00a      	beq.n	800fb00 <_raise_r+0x4c>
 800faea:	1c59      	adds	r1, r3, #1
 800faec:	d103      	bne.n	800faf6 <_raise_r+0x42>
 800faee:	2316      	movs	r3, #22
 800faf0:	6003      	str	r3, [r0, #0]
 800faf2:	2001      	movs	r0, #1
 800faf4:	e7e7      	b.n	800fac6 <_raise_r+0x12>
 800faf6:	2400      	movs	r4, #0
 800faf8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800fafc:	4628      	mov	r0, r5
 800fafe:	4798      	blx	r3
 800fb00:	2000      	movs	r0, #0
 800fb02:	e7e0      	b.n	800fac6 <_raise_r+0x12>

0800fb04 <raise>:
 800fb04:	4b02      	ldr	r3, [pc, #8]	; (800fb10 <raise+0xc>)
 800fb06:	4601      	mov	r1, r0
 800fb08:	6818      	ldr	r0, [r3, #0]
 800fb0a:	f7ff bfd3 	b.w	800fab4 <_raise_r>
 800fb0e:	bf00      	nop
 800fb10:	24000010 	.word	0x24000010

0800fb14 <_kill_r>:
 800fb14:	b538      	push	{r3, r4, r5, lr}
 800fb16:	4d07      	ldr	r5, [pc, #28]	; (800fb34 <_kill_r+0x20>)
 800fb18:	2300      	movs	r3, #0
 800fb1a:	4604      	mov	r4, r0
 800fb1c:	4608      	mov	r0, r1
 800fb1e:	4611      	mov	r1, r2
 800fb20:	602b      	str	r3, [r5, #0]
 800fb22:	f7f3 f967 	bl	8002df4 <_kill>
 800fb26:	1c43      	adds	r3, r0, #1
 800fb28:	d102      	bne.n	800fb30 <_kill_r+0x1c>
 800fb2a:	682b      	ldr	r3, [r5, #0]
 800fb2c:	b103      	cbz	r3, 800fb30 <_kill_r+0x1c>
 800fb2e:	6023      	str	r3, [r4, #0]
 800fb30:	bd38      	pop	{r3, r4, r5, pc}
 800fb32:	bf00      	nop
 800fb34:	24000c70 	.word	0x24000c70

0800fb38 <_getpid_r>:
 800fb38:	f7f3 b954 	b.w	8002de4 <_getpid>

0800fb3c <_init>:
 800fb3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb3e:	bf00      	nop
 800fb40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fb42:	bc08      	pop	{r3}
 800fb44:	469e      	mov	lr, r3
 800fb46:	4770      	bx	lr

0800fb48 <_fini>:
 800fb48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb4a:	bf00      	nop
 800fb4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fb4e:	bc08      	pop	{r3}
 800fb50:	469e      	mov	lr, r3
 800fb52:	4770      	bx	lr
