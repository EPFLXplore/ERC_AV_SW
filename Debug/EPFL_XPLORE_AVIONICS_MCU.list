
EPFL_XPLORE_AVIONICS_MCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000111a4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005fc  08011448  08011448  00021448  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08011a44  08011a44  00021a44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08011a4c  08011a4c  00021a4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08011a50  08011a50  00021a50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e0  24000000  08011a54  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000a94  240001e0  08011c34  000301e0  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000c74  08011c34  00030c74  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000301e0  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003bb29  00000000  00000000  0003020e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000515e  00000000  00000000  0006bd37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002288  00000000  00000000  00070e98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000020f0  00000000  00000000  00073120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000419e6  00000000  00000000  00075210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002ad28  00000000  00000000  000b6bf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001aad2d  00000000  00000000  000e191e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  0028c64b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000a798  00000000  00000000  0028c6a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e0 	.word	0x240001e0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801142c 	.word	0x0801142c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e4 	.word	0x240001e4
 80002dc:	0801142c 	.word	0x0801142c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <ADC1115_test>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

static void ADC1115_test(void){
 8000688:	b580      	push	{r7, lr}
 800068a:	b0a4      	sub	sp, #144	; 0x90
 800068c:	af02      	add	r7, sp, #8
	ads1113_t i2c;
	char MSG[100];
	// Declare the structure where we using GND as address.
	// Look at the top of the header file for addresses.
	bool success = ADS1113_init(&i2c, &hi2c4, ADS_ADDR_GND); // Or ADS1015(&i2c, &hi2c1, ADS_ADDR_GND);
 800068e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000692:	2248      	movs	r2, #72	; 0x48
 8000694:	491c      	ldr	r1, [pc, #112]	; (8000708 <ADC1115_test+0x80>)
 8000696:	4618      	mov	r0, r3
 8000698:	f002 fe72 	bl	8003380 <ADS1113_init>
 800069c:	4603      	mov	r3, r0
 800069e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	ADSsetGain(&i2c, GAIN_ONE);
 80006a2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80006a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006aa:	4618      	mov	r0, r3
 80006ac:	f002 feea 	bl	8003484 <ADSsetGain>
	int16_t adc_diff;
	float adc_voltage;

	while(1){
	   // Get ADC values
	   adc_diff = ADSreadADC_Differential_0_1(&i2c);
 80006b0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80006b4:	4618      	mov	r0, r3
 80006b6:	f002 ff37 	bl	8003528 <ADSreadADC_Differential_0_1>
 80006ba:	4603      	mov	r3, r0
 80006bc:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
	   adc_voltage = ADSreadADC_Voltage(&i2c);
 80006c0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80006c4:	4618      	mov	r0, r3
 80006c6:	f002 ff6f 	bl	80035a8 <ADSreadADC_Voltage>
 80006ca:	ed87 0a20 	vstr	s0, [r7, #128]	; 0x80
	//
	   sprintf(MSG, "ADC diff reading \t = %d \t Voltage \t = %.2f \r\n", adc_diff, adc_voltage);
 80006ce:	f9b7 2084 	ldrsh.w	r2, [r7, #132]	; 0x84
 80006d2:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80006d6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80006da:	1d3b      	adds	r3, r7, #4
 80006dc:	ed8d 7b00 	vstr	d7, [sp]
 80006e0:	490a      	ldr	r1, [pc, #40]	; (800070c <ADC1115_test+0x84>)
 80006e2:	4618      	mov	r0, r3
 80006e4:	f00e fcee 	bl	800f0c4 <siprintf>
	//       sprintf(MSG, "ADC diff reading \t = %d \n", adc_diff);
//	   sprintf(MSG, "ADC diff reading \t = %.2f \r\n", adc_voltage);
	   HAL_UART_Transmit(&huart2, MSG, strlen((char*) MSG), 100);
 80006e8:	1d3b      	adds	r3, r7, #4
 80006ea:	4618      	mov	r0, r3
 80006ec:	f7ff fdf8 	bl	80002e0 <strlen>
 80006f0:	4603      	mov	r3, r0
 80006f2:	b29a      	uxth	r2, r3
 80006f4:	1d39      	adds	r1, r7, #4
 80006f6:	2364      	movs	r3, #100	; 0x64
 80006f8:	4805      	ldr	r0, [pc, #20]	; (8000710 <ADC1115_test+0x88>)
 80006fa:	f00c f919 	bl	800c930 <HAL_UART_Transmit>
	   HAL_Delay(100);
 80006fe:	2064      	movs	r0, #100	; 0x64
 8000700:	f003 f804 	bl	800370c <HAL_Delay>
	   adc_diff = ADSreadADC_Differential_0_1(&i2c);
 8000704:	e7d4      	b.n	80006b0 <ADC1115_test+0x28>
 8000706:	bf00      	nop
 8000708:	24000270 	.word	0x24000270
 800070c:	08011448 	.word	0x08011448
 8000710:	24000a84 	.word	0x24000a84

08000714 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000714:	b5b0      	push	{r4, r5, r7, lr}
 8000716:	b0ac      	sub	sp, #176	; 0xb0
 8000718:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800071a:	f002 ff65 	bl	80035e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800071e:	f000 f861 	bl	80007e4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000722:	f000 f8e5 	bl	80008f0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000726:	f001 f985 	bl	8001a34 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 800072a:	f000 fa91 	bl	8000c50 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 800072e:	f000 faf3 	bl	8000d18 <MX_FDCAN2_Init>
  MX_I2C1_Init();
 8000732:	f000 fb55 	bl	8000de0 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000736:	f000 fb93 	bl	8000e60 <MX_I2C2_Init>
  MX_I2C4_Init();
 800073a:	f000 fbd1 	bl	8000ee0 <MX_I2C4_Init>
  MX_USART1_Init();
 800073e:	f000 fcf5 	bl	800112c <MX_USART1_Init>
  MX_USART2_UART_Init();
 8000742:	f000 fd3f 	bl	80011c4 <MX_USART2_UART_Init>
  MX_USART3_Init();
 8000746:	f000 fd89 	bl	800125c <MX_USART3_Init>
  MX_ADC1_Init();
 800074a:	f000 f8ff 	bl	800094c <MX_ADC1_Init>
  MX_ADC2_Init();
 800074e:	f000 f977 	bl	8000a40 <MX_ADC2_Init>
  MX_ADC3_Init();
 8000752:	f000 f9db 	bl	8000b0c <MX_ADC3_Init>
  MX_QUADSPI_Init();
 8000756:	f000 fe19 	bl	800138c <MX_QUADSPI_Init>
  MX_SPI1_Init();
 800075a:	f000 fe43 	bl	80013e4 <MX_SPI1_Init>
  MX_SPI2_Init();
 800075e:	f000 fe97 	bl	8001490 <MX_SPI2_Init>
  MX_SPI4_Init();
 8000762:	f000 feeb 	bl	800153c <MX_SPI4_Init>
  MX_USART6_Init();
 8000766:	f000 fdc5 	bl	80012f4 <MX_USART6_Init>
  MX_DAC1_Init();
 800076a:	f000 fa35 	bl	8000bd8 <MX_DAC1_Init>
  MX_LPUART1_UART_Init();
 800076e:	f000 fbf7 	bl	8000f60 <MX_LPUART1_UART_Init>
  MX_UART4_Init();
 8000772:	f000 fc43 	bl	8000ffc <MX_UART4_Init>
  MX_UART8_Init();
 8000776:	f000 fc8d 	bl	8001094 <MX_UART8_Init>
  MX_TIM1_Init();
 800077a:	f000 ff35 	bl	80015e8 <MX_TIM1_Init>
  MX_TIM5_Init();
 800077e:	f001 f83b 	bl	80017f8 <MX_TIM5_Init>
  MX_TIM15_Init();
 8000782:	f001 f893 	bl	80018ac <MX_TIM15_Init>
  MX_DMA_Init();
 8000786:	f001 f935 	bl	80019f4 <MX_DMA_Init>
  MX_TIM4_Init();
 800078a:	f000 ffbd 	bl	8001708 <MX_TIM4_Init>
  char text[100];

  uint8_t Buffer[25] = {0};
 800078e:	2300      	movs	r3, #0
 8000790:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000792:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000796:	2200      	movs	r2, #0
 8000798:	601a      	str	r2, [r3, #0]
 800079a:	605a      	str	r2, [r3, #4]
 800079c:	609a      	str	r2, [r3, #8]
 800079e:	60da      	str	r2, [r3, #12]
 80007a0:	611a      	str	r2, [r3, #16]
 80007a2:	751a      	strb	r2, [r3, #20]
  uint8_t Space[] = " - ";
 80007a4:	4b0c      	ldr	r3, [pc, #48]	; (80007d8 <main+0xc4>)
 80007a6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint8_t StartMSG[] = "Starting I2C Scanning: \r\n";
 80007a8:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <main+0xc8>)
 80007aa:	f107 040c 	add.w	r4, r7, #12
 80007ae:	461d      	mov	r5, r3
 80007b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007b4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007b8:	c403      	stmia	r4!, {r0, r1}
 80007ba:	8022      	strh	r2, [r4, #0]
  uint8_t EndMSG[] = "Done! \r\n\r\n";
 80007bc:	4a08      	ldr	r2, [pc, #32]	; (80007e0 <main+0xcc>)
 80007be:	463b      	mov	r3, r7
 80007c0:	ca07      	ldmia	r2, {r0, r1, r2}
 80007c2:	c303      	stmia	r3!, {r0, r1}
 80007c4:	801a      	strh	r2, [r3, #0]
 80007c6:	3302      	adds	r3, #2
 80007c8:	0c12      	lsrs	r2, r2, #16
 80007ca:	701a      	strb	r2, [r3, #0]
  uint8_t i = 0, ret;
 80007cc:	2300      	movs	r3, #0
 80007ce:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
//  stemma_test();
//  bno_test();
//  VL53l1_test();
//  hx711_test();
  	ADC1115_test();
 80007d2:	f7ff ff59 	bl	8000688 <ADC1115_test>
  while (1)
 80007d6:	e7fe      	b.n	80007d6 <main+0xc2>
 80007d8:	00202d20 	.word	0x00202d20
 80007dc:	0801159c 	.word	0x0801159c
 80007e0:	080115b8 	.word	0x080115b8

080007e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b09c      	sub	sp, #112	; 0x70
 80007e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ee:	224c      	movs	r2, #76	; 0x4c
 80007f0:	2100      	movs	r1, #0
 80007f2:	4618      	mov	r0, r3
 80007f4:	f00e f81c 	bl	800e830 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f8:	1d3b      	adds	r3, r7, #4
 80007fa:	2220      	movs	r2, #32
 80007fc:	2100      	movs	r1, #0
 80007fe:	4618      	mov	r0, r3
 8000800:	f00e f816 	bl	800e830 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000804:	2002      	movs	r0, #2
 8000806:	f007 fd51 	bl	80082ac <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800080a:	2300      	movs	r3, #0
 800080c:	603b      	str	r3, [r7, #0]
 800080e:	4b35      	ldr	r3, [pc, #212]	; (80008e4 <SystemClock_Config+0x100>)
 8000810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000812:	4a34      	ldr	r2, [pc, #208]	; (80008e4 <SystemClock_Config+0x100>)
 8000814:	f023 0301 	bic.w	r3, r3, #1
 8000818:	62d3      	str	r3, [r2, #44]	; 0x2c
 800081a:	4b32      	ldr	r3, [pc, #200]	; (80008e4 <SystemClock_Config+0x100>)
 800081c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800081e:	f003 0301 	and.w	r3, r3, #1
 8000822:	603b      	str	r3, [r7, #0]
 8000824:	4b30      	ldr	r3, [pc, #192]	; (80008e8 <SystemClock_Config+0x104>)
 8000826:	699b      	ldr	r3, [r3, #24]
 8000828:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800082c:	4a2e      	ldr	r2, [pc, #184]	; (80008e8 <SystemClock_Config+0x104>)
 800082e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000832:	6193      	str	r3, [r2, #24]
 8000834:	4b2c      	ldr	r3, [pc, #176]	; (80008e8 <SystemClock_Config+0x104>)
 8000836:	699b      	ldr	r3, [r3, #24]
 8000838:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800083c:	603b      	str	r3, [r7, #0]
 800083e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000840:	bf00      	nop
 8000842:	4b29      	ldr	r3, [pc, #164]	; (80008e8 <SystemClock_Config+0x104>)
 8000844:	699b      	ldr	r3, [r3, #24]
 8000846:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800084a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800084e:	d1f8      	bne.n	8000842 <SystemClock_Config+0x5e>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8000850:	4b26      	ldr	r3, [pc, #152]	; (80008ec <SystemClock_Config+0x108>)
 8000852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000854:	4a25      	ldr	r2, [pc, #148]	; (80008ec <SystemClock_Config+0x108>)
 8000856:	f023 0303 	bic.w	r3, r3, #3
 800085a:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800085c:	2302      	movs	r3, #2
 800085e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000860:	2301      	movs	r3, #1
 8000862:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000864:	2340      	movs	r3, #64	; 0x40
 8000866:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000868:	2302      	movs	r3, #2
 800086a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800086c:	2300      	movs	r3, #0
 800086e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000870:	2304      	movs	r3, #4
 8000872:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 9;
 8000874:	2309      	movs	r3, #9
 8000876:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000878:	2302      	movs	r3, #2
 800087a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800087c:	2303      	movs	r3, #3
 800087e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000880:	2302      	movs	r3, #2
 8000882:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000884:	230c      	movs	r3, #12
 8000886:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000888:	2302      	movs	r3, #2
 800088a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 800088c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000890:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000892:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000896:	4618      	mov	r0, r3
 8000898:	f007 fdfc 	bl	8008494 <HAL_RCC_OscConfig>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80008a2:	f001 f9d5 	bl	8001c50 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008a6:	233f      	movs	r3, #63	; 0x3f
 80008a8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008aa:	2300      	movs	r3, #0
 80008ac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008ae:	2300      	movs	r3, #0
 80008b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80008b2:	2300      	movs	r3, #0
 80008b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80008b6:	2340      	movs	r3, #64	; 0x40
 80008b8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008ba:	2340      	movs	r3, #64	; 0x40
 80008bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80008be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008c2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80008c4:	2340      	movs	r3, #64	; 0x40
 80008c6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008c8:	1d3b      	adds	r3, r7, #4
 80008ca:	2101      	movs	r1, #1
 80008cc:	4618      	mov	r0, r3
 80008ce:	f008 f9f1 	bl	8008cb4 <HAL_RCC_ClockConfig>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <SystemClock_Config+0xf8>
  {
    Error_Handler();
 80008d8:	f001 f9ba 	bl	8001c50 <Error_Handler>
  }
}
 80008dc:	bf00      	nop
 80008de:	3770      	adds	r7, #112	; 0x70
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	58000400 	.word	0x58000400
 80008e8:	58024800 	.word	0x58024800
 80008ec:	58024400 	.word	0x58024400

080008f0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b0b0      	sub	sp, #192	; 0xc0
 80008f4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008f6:	1d3b      	adds	r3, r7, #4
 80008f8:	22bc      	movs	r2, #188	; 0xbc
 80008fa:	2100      	movs	r1, #0
 80008fc:	4618      	mov	r0, r3
 80008fe:	f00d ff97 	bl	800e830 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000902:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000906:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8000908:	2304      	movs	r3, #4
 800090a:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 9;
 800090c:	2309      	movs	r3, #9
 800090e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 8000910:	2304      	movs	r3, #4
 8000912:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000914:	2302      	movs	r3, #2
 8000916:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000918:	2302      	movs	r3, #2
 800091a:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800091c:	23c0      	movs	r3, #192	; 0xc0
 800091e:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000920:	2320      	movs	r3, #32
 8000922:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 8000924:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000928:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800092a:	2300      	movs	r3, #0
 800092c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000930:	1d3b      	adds	r3, r7, #4
 8000932:	4618      	mov	r0, r3
 8000934:	f008 fd4a 	bl	80093cc <HAL_RCCEx_PeriphCLKConfig>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <PeriphCommonClock_Config+0x52>
  {
    Error_Handler();
 800093e:	f001 f987 	bl	8001c50 <Error_Handler>
  }
}
 8000942:	bf00      	nop
 8000944:	37c0      	adds	r7, #192	; 0xc0
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
	...

0800094c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08a      	sub	sp, #40	; 0x28
 8000950:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000952:	f107 031c 	add.w	r3, r7, #28
 8000956:	2200      	movs	r2, #0
 8000958:	601a      	str	r2, [r3, #0]
 800095a:	605a      	str	r2, [r3, #4]
 800095c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800095e:	463b      	mov	r3, r7
 8000960:	2200      	movs	r2, #0
 8000962:	601a      	str	r2, [r3, #0]
 8000964:	605a      	str	r2, [r3, #4]
 8000966:	609a      	str	r2, [r3, #8]
 8000968:	60da      	str	r2, [r3, #12]
 800096a:	611a      	str	r2, [r3, #16]
 800096c:	615a      	str	r2, [r3, #20]
 800096e:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000970:	4b2f      	ldr	r3, [pc, #188]	; (8000a30 <MX_ADC1_Init+0xe4>)
 8000972:	4a30      	ldr	r2, [pc, #192]	; (8000a34 <MX_ADC1_Init+0xe8>)
 8000974:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000976:	4b2e      	ldr	r3, [pc, #184]	; (8000a30 <MX_ADC1_Init+0xe4>)
 8000978:	2200      	movs	r2, #0
 800097a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 800097c:	4b2c      	ldr	r3, [pc, #176]	; (8000a30 <MX_ADC1_Init+0xe4>)
 800097e:	2200      	movs	r2, #0
 8000980:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000982:	4b2b      	ldr	r3, [pc, #172]	; (8000a30 <MX_ADC1_Init+0xe4>)
 8000984:	2200      	movs	r2, #0
 8000986:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000988:	4b29      	ldr	r3, [pc, #164]	; (8000a30 <MX_ADC1_Init+0xe4>)
 800098a:	2204      	movs	r2, #4
 800098c:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800098e:	4b28      	ldr	r3, [pc, #160]	; (8000a30 <MX_ADC1_Init+0xe4>)
 8000990:	2200      	movs	r2, #0
 8000992:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000994:	4b26      	ldr	r3, [pc, #152]	; (8000a30 <MX_ADC1_Init+0xe4>)
 8000996:	2200      	movs	r2, #0
 8000998:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 800099a:	4b25      	ldr	r3, [pc, #148]	; (8000a30 <MX_ADC1_Init+0xe4>)
 800099c:	2201      	movs	r2, #1
 800099e:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009a0:	4b23      	ldr	r3, [pc, #140]	; (8000a30 <MX_ADC1_Init+0xe4>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009a6:	4b22      	ldr	r3, [pc, #136]	; (8000a30 <MX_ADC1_Init+0xe4>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009ac:	4b20      	ldr	r3, [pc, #128]	; (8000a30 <MX_ADC1_Init+0xe4>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80009b2:	4b1f      	ldr	r3, [pc, #124]	; (8000a30 <MX_ADC1_Init+0xe4>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009b8:	4b1d      	ldr	r3, [pc, #116]	; (8000a30 <MX_ADC1_Init+0xe4>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80009be:	4b1c      	ldr	r3, [pc, #112]	; (8000a30 <MX_ADC1_Init+0xe4>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80009c4:	4b1a      	ldr	r3, [pc, #104]	; (8000a30 <MX_ADC1_Init+0xe4>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009cc:	4818      	ldr	r0, [pc, #96]	; (8000a30 <MX_ADC1_Init+0xe4>)
 80009ce:	f003 f859 	bl	8003a84 <HAL_ADC_Init>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80009d8:	f001 f93a 	bl	8001c50 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80009dc:	2300      	movs	r3, #0
 80009de:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80009e0:	f107 031c 	add.w	r3, r7, #28
 80009e4:	4619      	mov	r1, r3
 80009e6:	4812      	ldr	r0, [pc, #72]	; (8000a30 <MX_ADC1_Init+0xe4>)
 80009e8:	f003 fe6c 	bl	80046c4 <HAL_ADCEx_MultiModeConfigChannel>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80009f2:	f001 f92d 	bl	8001c50 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80009f6:	4b10      	ldr	r3, [pc, #64]	; (8000a38 <MX_ADC1_Init+0xec>)
 80009f8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009fa:	2306      	movs	r3, #6
 80009fc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80009fe:	2300      	movs	r3, #0
 8000a00:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000a02:	4b0e      	ldr	r3, [pc, #56]	; (8000a3c <MX_ADC1_Init+0xf0>)
 8000a04:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a06:	2304      	movs	r3, #4
 8000a08:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a12:	463b      	mov	r3, r7
 8000a14:	4619      	mov	r1, r3
 8000a16:	4806      	ldr	r0, [pc, #24]	; (8000a30 <MX_ADC1_Init+0xe4>)
 8000a18:	f003 f9d4 	bl	8003dc4 <HAL_ADC_ConfigChannel>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 8000a22:	f001 f915 	bl	8001c50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a26:	bf00      	nop
 8000a28:	3728      	adds	r7, #40	; 0x28
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	24000640 	.word	0x24000640
 8000a34:	40022000 	.word	0x40022000
 8000a38:	10c00010 	.word	0x10c00010
 8000a3c:	47ff0000 	.word	0x47ff0000

08000a40 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b088      	sub	sp, #32
 8000a44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a46:	1d3b      	adds	r3, r7, #4
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
 8000a4c:	605a      	str	r2, [r3, #4]
 8000a4e:	609a      	str	r2, [r3, #8]
 8000a50:	60da      	str	r2, [r3, #12]
 8000a52:	611a      	str	r2, [r3, #16]
 8000a54:	615a      	str	r2, [r3, #20]
 8000a56:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8000a58:	4b28      	ldr	r3, [pc, #160]	; (8000afc <MX_ADC2_Init+0xbc>)
 8000a5a:	4a29      	ldr	r2, [pc, #164]	; (8000b00 <MX_ADC2_Init+0xc0>)
 8000a5c:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a5e:	4b27      	ldr	r3, [pc, #156]	; (8000afc <MX_ADC2_Init+0xbc>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000a64:	4b25      	ldr	r3, [pc, #148]	; (8000afc <MX_ADC2_Init+0xbc>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a6a:	4b24      	ldr	r3, [pc, #144]	; (8000afc <MX_ADC2_Init+0xbc>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a70:	4b22      	ldr	r3, [pc, #136]	; (8000afc <MX_ADC2_Init+0xbc>)
 8000a72:	2204      	movs	r2, #4
 8000a74:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000a76:	4b21      	ldr	r3, [pc, #132]	; (8000afc <MX_ADC2_Init+0xbc>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000a7c:	4b1f      	ldr	r3, [pc, #124]	; (8000afc <MX_ADC2_Init+0xbc>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8000a82:	4b1e      	ldr	r3, [pc, #120]	; (8000afc <MX_ADC2_Init+0xbc>)
 8000a84:	2201      	movs	r2, #1
 8000a86:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000a88:	4b1c      	ldr	r3, [pc, #112]	; (8000afc <MX_ADC2_Init+0xbc>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a8e:	4b1b      	ldr	r3, [pc, #108]	; (8000afc <MX_ADC2_Init+0xbc>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a94:	4b19      	ldr	r3, [pc, #100]	; (8000afc <MX_ADC2_Init+0xbc>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000a9a:	4b18      	ldr	r3, [pc, #96]	; (8000afc <MX_ADC2_Init+0xbc>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000aa0:	4b16      	ldr	r3, [pc, #88]	; (8000afc <MX_ADC2_Init+0xbc>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000aa6:	4b15      	ldr	r3, [pc, #84]	; (8000afc <MX_ADC2_Init+0xbc>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000aac:	4b13      	ldr	r3, [pc, #76]	; (8000afc <MX_ADC2_Init+0xbc>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000ab4:	4811      	ldr	r0, [pc, #68]	; (8000afc <MX_ADC2_Init+0xbc>)
 8000ab6:	f002 ffe5 	bl	8003a84 <HAL_ADC_Init>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 8000ac0:	f001 f8c6 	bl	8001c50 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000ac4:	4b0f      	ldr	r3, [pc, #60]	; (8000b04 <MX_ADC2_Init+0xc4>)
 8000ac6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ac8:	2306      	movs	r3, #6
 8000aca:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000acc:	2300      	movs	r3, #0
 8000ace:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000ad0:	4b0d      	ldr	r3, [pc, #52]	; (8000b08 <MX_ADC2_Init+0xc8>)
 8000ad2:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ad4:	2304      	movs	r3, #4
 8000ad6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000adc:	2300      	movs	r3, #0
 8000ade:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000ae0:	1d3b      	adds	r3, r7, #4
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4805      	ldr	r0, [pc, #20]	; (8000afc <MX_ADC2_Init+0xbc>)
 8000ae6:	f003 f96d 	bl	8003dc4 <HAL_ADC_ConfigChannel>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_ADC2_Init+0xb4>
  {
    Error_Handler();
 8000af0:	f001 f8ae 	bl	8001c50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000af4:	bf00      	nop
 8000af6:	3720      	adds	r7, #32
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	2400041c 	.word	0x2400041c
 8000b00:	40022100 	.word	0x40022100
 8000b04:	10c00010 	.word	0x10c00010
 8000b08:	47ff0000 	.word	0x47ff0000

08000b0c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b088      	sub	sp, #32
 8000b10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b12:	1d3b      	adds	r3, r7, #4
 8000b14:	2200      	movs	r2, #0
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	605a      	str	r2, [r3, #4]
 8000b1a:	609a      	str	r2, [r3, #8]
 8000b1c:	60da      	str	r2, [r3, #12]
 8000b1e:	611a      	str	r2, [r3, #16]
 8000b20:	615a      	str	r2, [r3, #20]
 8000b22:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 8000b24:	4b28      	ldr	r3, [pc, #160]	; (8000bc8 <MX_ADC3_Init+0xbc>)
 8000b26:	4a29      	ldr	r2, [pc, #164]	; (8000bcc <MX_ADC3_Init+0xc0>)
 8000b28:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000b2a:	4b27      	ldr	r3, [pc, #156]	; (8000bc8 <MX_ADC3_Init+0xbc>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8000b30:	4b25      	ldr	r3, [pc, #148]	; (8000bc8 <MX_ADC3_Init+0xbc>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b36:	4b24      	ldr	r3, [pc, #144]	; (8000bc8 <MX_ADC3_Init+0xbc>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b3c:	4b22      	ldr	r3, [pc, #136]	; (8000bc8 <MX_ADC3_Init+0xbc>)
 8000b3e:	2204      	movs	r2, #4
 8000b40:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000b42:	4b21      	ldr	r3, [pc, #132]	; (8000bc8 <MX_ADC3_Init+0xbc>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000b48:	4b1f      	ldr	r3, [pc, #124]	; (8000bc8 <MX_ADC3_Init+0xbc>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8000b4e:	4b1e      	ldr	r3, [pc, #120]	; (8000bc8 <MX_ADC3_Init+0xbc>)
 8000b50:	2201      	movs	r2, #1
 8000b52:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000b54:	4b1c      	ldr	r3, [pc, #112]	; (8000bc8 <MX_ADC3_Init+0xbc>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b5a:	4b1b      	ldr	r3, [pc, #108]	; (8000bc8 <MX_ADC3_Init+0xbc>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b60:	4b19      	ldr	r3, [pc, #100]	; (8000bc8 <MX_ADC3_Init+0xbc>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000b66:	4b18      	ldr	r3, [pc, #96]	; (8000bc8 <MX_ADC3_Init+0xbc>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b6c:	4b16      	ldr	r3, [pc, #88]	; (8000bc8 <MX_ADC3_Init+0xbc>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000b72:	4b15      	ldr	r3, [pc, #84]	; (8000bc8 <MX_ADC3_Init+0xbc>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000b78:	4b13      	ldr	r3, [pc, #76]	; (8000bc8 <MX_ADC3_Init+0xbc>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000b80:	4811      	ldr	r0, [pc, #68]	; (8000bc8 <MX_ADC3_Init+0xbc>)
 8000b82:	f002 ff7f 	bl	8003a84 <HAL_ADC_Init>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <MX_ADC3_Init+0x84>
  {
    Error_Handler();
 8000b8c:	f001 f860 	bl	8001c50 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000b90:	4b0f      	ldr	r3, [pc, #60]	; (8000bd0 <MX_ADC3_Init+0xc4>)
 8000b92:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b94:	2306      	movs	r3, #6
 8000b96:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000b9c:	4b0d      	ldr	r3, [pc, #52]	; (8000bd4 <MX_ADC3_Init+0xc8>)
 8000b9e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ba0:	2304      	movs	r3, #4
 8000ba2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000bac:	1d3b      	adds	r3, r7, #4
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4805      	ldr	r0, [pc, #20]	; (8000bc8 <MX_ADC3_Init+0xbc>)
 8000bb2:	f003 f907 	bl	8003dc4 <HAL_ADC_ConfigChannel>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_ADC3_Init+0xb4>
  {
    Error_Handler();
 8000bbc:	f001 f848 	bl	8001c50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000bc0:	bf00      	nop
 8000bc2:	3720      	adds	r7, #32
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	240006a4 	.word	0x240006a4
 8000bcc:	58026000 	.word	0x58026000
 8000bd0:	2a000400 	.word	0x2a000400
 8000bd4:	47ff0000 	.word	0x47ff0000

08000bd8 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b08a      	sub	sp, #40	; 0x28
 8000bdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000bde:	1d3b      	adds	r3, r7, #4
 8000be0:	2224      	movs	r2, #36	; 0x24
 8000be2:	2100      	movs	r1, #0
 8000be4:	4618      	mov	r0, r3
 8000be6:	f00d fe23 	bl	800e830 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000bea:	4b17      	ldr	r3, [pc, #92]	; (8000c48 <MX_DAC1_Init+0x70>)
 8000bec:	4a17      	ldr	r2, [pc, #92]	; (8000c4c <MX_DAC1_Init+0x74>)
 8000bee:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000bf0:	4815      	ldr	r0, [pc, #84]	; (8000c48 <MX_DAC1_Init+0x70>)
 8000bf2:	f003 ff54 	bl	8004a9e <HAL_DAC_Init>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000bfc:	f001 f828 	bl	8001c50 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000c00:	2300      	movs	r3, #0
 8000c02:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000c04:	2300      	movs	r3, #0
 8000c06:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000c10:	2300      	movs	r3, #0
 8000c12:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000c14:	1d3b      	adds	r3, r7, #4
 8000c16:	2200      	movs	r2, #0
 8000c18:	4619      	mov	r1, r3
 8000c1a:	480b      	ldr	r0, [pc, #44]	; (8000c48 <MX_DAC1_Init+0x70>)
 8000c1c:	f003 ff62 	bl	8004ae4 <HAL_DAC_ConfigChannel>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000c26:	f001 f813 	bl	8001c50 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000c2a:	1d3b      	adds	r3, r7, #4
 8000c2c:	2210      	movs	r2, #16
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4805      	ldr	r0, [pc, #20]	; (8000c48 <MX_DAC1_Init+0x70>)
 8000c32:	f003 ff57 	bl	8004ae4 <HAL_DAC_ConfigChannel>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 8000c3c:	f001 f808 	bl	8001c50 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000c40:	bf00      	nop
 8000c42:	3728      	adds	r7, #40	; 0x28
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	24000408 	.word	0x24000408
 8000c4c:	40007400 	.word	0x40007400

08000c50 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000c54:	4b2e      	ldr	r3, [pc, #184]	; (8000d10 <MX_FDCAN1_Init+0xc0>)
 8000c56:	4a2f      	ldr	r2, [pc, #188]	; (8000d14 <MX_FDCAN1_Init+0xc4>)
 8000c58:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000c5a:	4b2d      	ldr	r3, [pc, #180]	; (8000d10 <MX_FDCAN1_Init+0xc0>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000c60:	4b2b      	ldr	r3, [pc, #172]	; (8000d10 <MX_FDCAN1_Init+0xc0>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000c66:	4b2a      	ldr	r3, [pc, #168]	; (8000d10 <MX_FDCAN1_Init+0xc0>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000c6c:	4b28      	ldr	r3, [pc, #160]	; (8000d10 <MX_FDCAN1_Init+0xc0>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000c72:	4b27      	ldr	r3, [pc, #156]	; (8000d10 <MX_FDCAN1_Init+0xc0>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000c78:	4b25      	ldr	r3, [pc, #148]	; (8000d10 <MX_FDCAN1_Init+0xc0>)
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000c7e:	4b24      	ldr	r3, [pc, #144]	; (8000d10 <MX_FDCAN1_Init+0xc0>)
 8000c80:	2201      	movs	r2, #1
 8000c82:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000c84:	4b22      	ldr	r3, [pc, #136]	; (8000d10 <MX_FDCAN1_Init+0xc0>)
 8000c86:	2202      	movs	r2, #2
 8000c88:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000c8a:	4b21      	ldr	r3, [pc, #132]	; (8000d10 <MX_FDCAN1_Init+0xc0>)
 8000c8c:	2202      	movs	r2, #2
 8000c8e:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000c90:	4b1f      	ldr	r3, [pc, #124]	; (8000d10 <MX_FDCAN1_Init+0xc0>)
 8000c92:	2201      	movs	r2, #1
 8000c94:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000c96:	4b1e      	ldr	r3, [pc, #120]	; (8000d10 <MX_FDCAN1_Init+0xc0>)
 8000c98:	2201      	movs	r2, #1
 8000c9a:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000c9c:	4b1c      	ldr	r3, [pc, #112]	; (8000d10 <MX_FDCAN1_Init+0xc0>)
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000ca2:	4b1b      	ldr	r3, [pc, #108]	; (8000d10 <MX_FDCAN1_Init+0xc0>)
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000ca8:	4b19      	ldr	r3, [pc, #100]	; (8000d10 <MX_FDCAN1_Init+0xc0>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000cae:	4b18      	ldr	r3, [pc, #96]	; (8000d10 <MX_FDCAN1_Init+0xc0>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000cb4:	4b16      	ldr	r3, [pc, #88]	; (8000d10 <MX_FDCAN1_Init+0xc0>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000cba:	4b15      	ldr	r3, [pc, #84]	; (8000d10 <MX_FDCAN1_Init+0xc0>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000cc0:	4b13      	ldr	r3, [pc, #76]	; (8000d10 <MX_FDCAN1_Init+0xc0>)
 8000cc2:	2204      	movs	r2, #4
 8000cc4:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000cc6:	4b12      	ldr	r3, [pc, #72]	; (8000d10 <MX_FDCAN1_Init+0xc0>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000ccc:	4b10      	ldr	r3, [pc, #64]	; (8000d10 <MX_FDCAN1_Init+0xc0>)
 8000cce:	2204      	movs	r2, #4
 8000cd0:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000cd2:	4b0f      	ldr	r3, [pc, #60]	; (8000d10 <MX_FDCAN1_Init+0xc0>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000cd8:	4b0d      	ldr	r3, [pc, #52]	; (8000d10 <MX_FDCAN1_Init+0xc0>)
 8000cda:	2204      	movs	r2, #4
 8000cdc:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000cde:	4b0c      	ldr	r3, [pc, #48]	; (8000d10 <MX_FDCAN1_Init+0xc0>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000ce4:	4b0a      	ldr	r3, [pc, #40]	; (8000d10 <MX_FDCAN1_Init+0xc0>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8000cea:	4b09      	ldr	r3, [pc, #36]	; (8000d10 <MX_FDCAN1_Init+0xc0>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000cf0:	4b07      	ldr	r3, [pc, #28]	; (8000d10 <MX_FDCAN1_Init+0xc0>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000cf6:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <MX_FDCAN1_Init+0xc0>)
 8000cf8:	2204      	movs	r2, #4
 8000cfa:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000cfc:	4804      	ldr	r0, [pc, #16]	; (8000d10 <MX_FDCAN1_Init+0xc0>)
 8000cfe:	f005 fce3 	bl	80066c8 <HAL_FDCAN_Init>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000d08:	f000 ffa2 	bl	8001c50 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000d0c:	bf00      	nop
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	240007f0 	.word	0x240007f0
 8000d14:	4000a000 	.word	0x4000a000

08000d18 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000d1c:	4b2e      	ldr	r3, [pc, #184]	; (8000dd8 <MX_FDCAN2_Init+0xc0>)
 8000d1e:	4a2f      	ldr	r2, [pc, #188]	; (8000ddc <MX_FDCAN2_Init+0xc4>)
 8000d20:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000d22:	4b2d      	ldr	r3, [pc, #180]	; (8000dd8 <MX_FDCAN2_Init+0xc0>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000d28:	4b2b      	ldr	r3, [pc, #172]	; (8000dd8 <MX_FDCAN2_Init+0xc0>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000d2e:	4b2a      	ldr	r3, [pc, #168]	; (8000dd8 <MX_FDCAN2_Init+0xc0>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000d34:	4b28      	ldr	r3, [pc, #160]	; (8000dd8 <MX_FDCAN2_Init+0xc0>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000d3a:	4b27      	ldr	r3, [pc, #156]	; (8000dd8 <MX_FDCAN2_Init+0xc0>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 8000d40:	4b25      	ldr	r3, [pc, #148]	; (8000dd8 <MX_FDCAN2_Init+0xc0>)
 8000d42:	2201      	movs	r2, #1
 8000d44:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000d46:	4b24      	ldr	r3, [pc, #144]	; (8000dd8 <MX_FDCAN2_Init+0xc0>)
 8000d48:	2201      	movs	r2, #1
 8000d4a:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8000d4c:	4b22      	ldr	r3, [pc, #136]	; (8000dd8 <MX_FDCAN2_Init+0xc0>)
 8000d4e:	2202      	movs	r2, #2
 8000d50:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000d52:	4b21      	ldr	r3, [pc, #132]	; (8000dd8 <MX_FDCAN2_Init+0xc0>)
 8000d54:	2202      	movs	r2, #2
 8000d56:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000d58:	4b1f      	ldr	r3, [pc, #124]	; (8000dd8 <MX_FDCAN2_Init+0xc0>)
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000d5e:	4b1e      	ldr	r3, [pc, #120]	; (8000dd8 <MX_FDCAN2_Init+0xc0>)
 8000d60:	2201      	movs	r2, #1
 8000d62:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000d64:	4b1c      	ldr	r3, [pc, #112]	; (8000dd8 <MX_FDCAN2_Init+0xc0>)
 8000d66:	2201      	movs	r2, #1
 8000d68:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000d6a:	4b1b      	ldr	r3, [pc, #108]	; (8000dd8 <MX_FDCAN2_Init+0xc0>)
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8000d70:	4b19      	ldr	r3, [pc, #100]	; (8000dd8 <MX_FDCAN2_Init+0xc0>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8000d76:	4b18      	ldr	r3, [pc, #96]	; (8000dd8 <MX_FDCAN2_Init+0xc0>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000d7c:	4b16      	ldr	r3, [pc, #88]	; (8000dd8 <MX_FDCAN2_Init+0xc0>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8000d82:	4b15      	ldr	r3, [pc, #84]	; (8000dd8 <MX_FDCAN2_Init+0xc0>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000d88:	4b13      	ldr	r3, [pc, #76]	; (8000dd8 <MX_FDCAN2_Init+0xc0>)
 8000d8a:	2204      	movs	r2, #4
 8000d8c:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8000d8e:	4b12      	ldr	r3, [pc, #72]	; (8000dd8 <MX_FDCAN2_Init+0xc0>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000d94:	4b10      	ldr	r3, [pc, #64]	; (8000dd8 <MX_FDCAN2_Init+0xc0>)
 8000d96:	2204      	movs	r2, #4
 8000d98:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000d9a:	4b0f      	ldr	r3, [pc, #60]	; (8000dd8 <MX_FDCAN2_Init+0xc0>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000da0:	4b0d      	ldr	r3, [pc, #52]	; (8000dd8 <MX_FDCAN2_Init+0xc0>)
 8000da2:	2204      	movs	r2, #4
 8000da4:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000da6:	4b0c      	ldr	r3, [pc, #48]	; (8000dd8 <MX_FDCAN2_Init+0xc0>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000dac:	4b0a      	ldr	r3, [pc, #40]	; (8000dd8 <MX_FDCAN2_Init+0xc0>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8000db2:	4b09      	ldr	r3, [pc, #36]	; (8000dd8 <MX_FDCAN2_Init+0xc0>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000db8:	4b07      	ldr	r3, [pc, #28]	; (8000dd8 <MX_FDCAN2_Init+0xc0>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000dbe:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <MX_FDCAN2_Init+0xc0>)
 8000dc0:	2204      	movs	r2, #4
 8000dc2:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000dc4:	4804      	ldr	r0, [pc, #16]	; (8000dd8 <MX_FDCAN2_Init+0xc0>)
 8000dc6:	f005 fc7f 	bl	80066c8 <HAL_FDCAN_Init>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8000dd0:	f000 ff3e 	bl	8001c50 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000dd4:	bf00      	nop
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	24000b74 	.word	0x24000b74
 8000ddc:	4000a400 	.word	0x4000a400

08000de0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000de4:	4b1b      	ldr	r3, [pc, #108]	; (8000e54 <MX_I2C1_Init+0x74>)
 8000de6:	4a1c      	ldr	r2, [pc, #112]	; (8000e58 <MX_I2C1_Init+0x78>)
 8000de8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000dea:	4b1a      	ldr	r3, [pc, #104]	; (8000e54 <MX_I2C1_Init+0x74>)
 8000dec:	4a1b      	ldr	r2, [pc, #108]	; (8000e5c <MX_I2C1_Init+0x7c>)
 8000dee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000df0:	4b18      	ldr	r3, [pc, #96]	; (8000e54 <MX_I2C1_Init+0x74>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000df6:	4b17      	ldr	r3, [pc, #92]	; (8000e54 <MX_I2C1_Init+0x74>)
 8000df8:	2201      	movs	r2, #1
 8000dfa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000dfc:	4b15      	ldr	r3, [pc, #84]	; (8000e54 <MX_I2C1_Init+0x74>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000e02:	4b14      	ldr	r3, [pc, #80]	; (8000e54 <MX_I2C1_Init+0x74>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e08:	4b12      	ldr	r3, [pc, #72]	; (8000e54 <MX_I2C1_Init+0x74>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e0e:	4b11      	ldr	r3, [pc, #68]	; (8000e54 <MX_I2C1_Init+0x74>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e14:	4b0f      	ldr	r3, [pc, #60]	; (8000e54 <MX_I2C1_Init+0x74>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e1a:	480e      	ldr	r0, [pc, #56]	; (8000e54 <MX_I2C1_Init+0x74>)
 8000e1c:	f006 fa90 	bl	8007340 <HAL_I2C_Init>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000e26:	f000 ff13 	bl	8001c50 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	4809      	ldr	r0, [pc, #36]	; (8000e54 <MX_I2C1_Init+0x74>)
 8000e2e:	f007 f981 	bl	8008134 <HAL_I2CEx_ConfigAnalogFilter>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000e38:	f000 ff0a 	bl	8001c50 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	4805      	ldr	r0, [pc, #20]	; (8000e54 <MX_I2C1_Init+0x74>)
 8000e40:	f007 f9c3 	bl	80081ca <HAL_I2CEx_ConfigDigitalFilter>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000e4a:	f000 ff01 	bl	8001c50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	24000480 	.word	0x24000480
 8000e58:	40005400 	.word	0x40005400
 8000e5c:	00707cbb 	.word	0x00707cbb

08000e60 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000e64:	4b1b      	ldr	r3, [pc, #108]	; (8000ed4 <MX_I2C2_Init+0x74>)
 8000e66:	4a1c      	ldr	r2, [pc, #112]	; (8000ed8 <MX_I2C2_Init+0x78>)
 8000e68:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00707CBB;
 8000e6a:	4b1a      	ldr	r3, [pc, #104]	; (8000ed4 <MX_I2C2_Init+0x74>)
 8000e6c:	4a1b      	ldr	r2, [pc, #108]	; (8000edc <MX_I2C2_Init+0x7c>)
 8000e6e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000e70:	4b18      	ldr	r3, [pc, #96]	; (8000ed4 <MX_I2C2_Init+0x74>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e76:	4b17      	ldr	r3, [pc, #92]	; (8000ed4 <MX_I2C2_Init+0x74>)
 8000e78:	2201      	movs	r2, #1
 8000e7a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e7c:	4b15      	ldr	r3, [pc, #84]	; (8000ed4 <MX_I2C2_Init+0x74>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000e82:	4b14      	ldr	r3, [pc, #80]	; (8000ed4 <MX_I2C2_Init+0x74>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e88:	4b12      	ldr	r3, [pc, #72]	; (8000ed4 <MX_I2C2_Init+0x74>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e8e:	4b11      	ldr	r3, [pc, #68]	; (8000ed4 <MX_I2C2_Init+0x74>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e94:	4b0f      	ldr	r3, [pc, #60]	; (8000ed4 <MX_I2C2_Init+0x74>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000e9a:	480e      	ldr	r0, [pc, #56]	; (8000ed4 <MX_I2C2_Init+0x74>)
 8000e9c:	f006 fa50 	bl	8007340 <HAL_I2C_Init>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000ea6:	f000 fed3 	bl	8001c50 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000eaa:	2100      	movs	r1, #0
 8000eac:	4809      	ldr	r0, [pc, #36]	; (8000ed4 <MX_I2C2_Init+0x74>)
 8000eae:	f007 f941 	bl	8008134 <HAL_I2CEx_ConfigAnalogFilter>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000eb8:	f000 feca 	bl	8001c50 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	4805      	ldr	r0, [pc, #20]	; (8000ed4 <MX_I2C2_Init+0x74>)
 8000ec0:	f007 f983 	bl	80081ca <HAL_I2CEx_ConfigDigitalFilter>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000eca:	f000 fec1 	bl	8001c50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000ece:	bf00      	nop
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	24000518 	.word	0x24000518
 8000ed8:	40005800 	.word	0x40005800
 8000edc:	00707cbb 	.word	0x00707cbb

08000ee0 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000ee4:	4b1b      	ldr	r3, [pc, #108]	; (8000f54 <MX_I2C4_Init+0x74>)
 8000ee6:	4a1c      	ldr	r2, [pc, #112]	; (8000f58 <MX_I2C4_Init+0x78>)
 8000ee8:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00707CBB;
 8000eea:	4b1a      	ldr	r3, [pc, #104]	; (8000f54 <MX_I2C4_Init+0x74>)
 8000eec:	4a1b      	ldr	r2, [pc, #108]	; (8000f5c <MX_I2C4_Init+0x7c>)
 8000eee:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000ef0:	4b18      	ldr	r3, [pc, #96]	; (8000f54 <MX_I2C4_Init+0x74>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ef6:	4b17      	ldr	r3, [pc, #92]	; (8000f54 <MX_I2C4_Init+0x74>)
 8000ef8:	2201      	movs	r2, #1
 8000efa:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000efc:	4b15      	ldr	r3, [pc, #84]	; (8000f54 <MX_I2C4_Init+0x74>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000f02:	4b14      	ldr	r3, [pc, #80]	; (8000f54 <MX_I2C4_Init+0x74>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f08:	4b12      	ldr	r3, [pc, #72]	; (8000f54 <MX_I2C4_Init+0x74>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f0e:	4b11      	ldr	r3, [pc, #68]	; (8000f54 <MX_I2C4_Init+0x74>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f14:	4b0f      	ldr	r3, [pc, #60]	; (8000f54 <MX_I2C4_Init+0x74>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000f1a:	480e      	ldr	r0, [pc, #56]	; (8000f54 <MX_I2C4_Init+0x74>)
 8000f1c:	f006 fa10 	bl	8007340 <HAL_I2C_Init>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000f26:	f000 fe93 	bl	8001c50 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	4809      	ldr	r0, [pc, #36]	; (8000f54 <MX_I2C4_Init+0x74>)
 8000f2e:	f007 f901 	bl	8008134 <HAL_I2CEx_ConfigAnalogFilter>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000f38:	f000 fe8a 	bl	8001c50 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	4805      	ldr	r0, [pc, #20]	; (8000f54 <MX_I2C4_Init+0x74>)
 8000f40:	f007 f943 	bl	80081ca <HAL_I2CEx_ConfigDigitalFilter>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000f4a:	f000 fe81 	bl	8001c50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	24000270 	.word	0x24000270
 8000f58:	58001c00 	.word	0x58001c00
 8000f5c:	00707cbb 	.word	0x00707cbb

08000f60 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000f64:	4b22      	ldr	r3, [pc, #136]	; (8000ff0 <MX_LPUART1_UART_Init+0x90>)
 8000f66:	4a23      	ldr	r2, [pc, #140]	; (8000ff4 <MX_LPUART1_UART_Init+0x94>)
 8000f68:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8000f6a:	4b21      	ldr	r3, [pc, #132]	; (8000ff0 <MX_LPUART1_UART_Init+0x90>)
 8000f6c:	4a22      	ldr	r2, [pc, #136]	; (8000ff8 <MX_LPUART1_UART_Init+0x98>)
 8000f6e:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f70:	4b1f      	ldr	r3, [pc, #124]	; (8000ff0 <MX_LPUART1_UART_Init+0x90>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000f76:	4b1e      	ldr	r3, [pc, #120]	; (8000ff0 <MX_LPUART1_UART_Init+0x90>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000f7c:	4b1c      	ldr	r3, [pc, #112]	; (8000ff0 <MX_LPUART1_UART_Init+0x90>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000f82:	4b1b      	ldr	r3, [pc, #108]	; (8000ff0 <MX_LPUART1_UART_Init+0x90>)
 8000f84:	220c      	movs	r2, #12
 8000f86:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f88:	4b19      	ldr	r3, [pc, #100]	; (8000ff0 <MX_LPUART1_UART_Init+0x90>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f8e:	4b18      	ldr	r3, [pc, #96]	; (8000ff0 <MX_LPUART1_UART_Init+0x90>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f94:	4b16      	ldr	r3, [pc, #88]	; (8000ff0 <MX_LPUART1_UART_Init+0x90>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f9a:	4b15      	ldr	r3, [pc, #84]	; (8000ff0 <MX_LPUART1_UART_Init+0x90>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000fa0:	4b13      	ldr	r3, [pc, #76]	; (8000ff0 <MX_LPUART1_UART_Init+0x90>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000fa6:	4812      	ldr	r0, [pc, #72]	; (8000ff0 <MX_LPUART1_UART_Init+0x90>)
 8000fa8:	f00b fc72 	bl	800c890 <HAL_UART_Init>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 8000fb2:	f000 fe4d 	bl	8001c50 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	480d      	ldr	r0, [pc, #52]	; (8000ff0 <MX_LPUART1_UART_Init+0x90>)
 8000fba:	f00c fc55 	bl	800d868 <HAL_UARTEx_SetTxFifoThreshold>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 8000fc4:	f000 fe44 	bl	8001c50 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fc8:	2100      	movs	r1, #0
 8000fca:	4809      	ldr	r0, [pc, #36]	; (8000ff0 <MX_LPUART1_UART_Init+0x90>)
 8000fcc:	f00c fc8a 	bl	800d8e4 <HAL_UARTEx_SetRxFifoThreshold>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 8000fd6:	f000 fe3b 	bl	8001c50 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000fda:	4805      	ldr	r0, [pc, #20]	; (8000ff0 <MX_LPUART1_UART_Init+0x90>)
 8000fdc:	f00c fc0b 	bl	800d7f6 <HAL_UARTEx_DisableFifoMode>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 8000fe6:	f000 fe33 	bl	8001c50 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	240005b0 	.word	0x240005b0
 8000ff4:	58000c00 	.word	0x58000c00
 8000ff8:	00033324 	.word	0x00033324

08000ffc <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001000:	4b22      	ldr	r3, [pc, #136]	; (800108c <MX_UART4_Init+0x90>)
 8001002:	4a23      	ldr	r2, [pc, #140]	; (8001090 <MX_UART4_Init+0x94>)
 8001004:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001006:	4b21      	ldr	r3, [pc, #132]	; (800108c <MX_UART4_Init+0x90>)
 8001008:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800100c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800100e:	4b1f      	ldr	r3, [pc, #124]	; (800108c <MX_UART4_Init+0x90>)
 8001010:	2200      	movs	r2, #0
 8001012:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001014:	4b1d      	ldr	r3, [pc, #116]	; (800108c <MX_UART4_Init+0x90>)
 8001016:	2200      	movs	r2, #0
 8001018:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800101a:	4b1c      	ldr	r3, [pc, #112]	; (800108c <MX_UART4_Init+0x90>)
 800101c:	2200      	movs	r2, #0
 800101e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001020:	4b1a      	ldr	r3, [pc, #104]	; (800108c <MX_UART4_Init+0x90>)
 8001022:	220c      	movs	r2, #12
 8001024:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001026:	4b19      	ldr	r3, [pc, #100]	; (800108c <MX_UART4_Init+0x90>)
 8001028:	2200      	movs	r2, #0
 800102a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800102c:	4b17      	ldr	r3, [pc, #92]	; (800108c <MX_UART4_Init+0x90>)
 800102e:	2200      	movs	r2, #0
 8001030:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001032:	4b16      	ldr	r3, [pc, #88]	; (800108c <MX_UART4_Init+0x90>)
 8001034:	2200      	movs	r2, #0
 8001036:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001038:	4b14      	ldr	r3, [pc, #80]	; (800108c <MX_UART4_Init+0x90>)
 800103a:	2200      	movs	r2, #0
 800103c:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800103e:	4b13      	ldr	r3, [pc, #76]	; (800108c <MX_UART4_Init+0x90>)
 8001040:	2200      	movs	r2, #0
 8001042:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001044:	4811      	ldr	r0, [pc, #68]	; (800108c <MX_UART4_Init+0x90>)
 8001046:	f00b fc23 	bl	800c890 <HAL_UART_Init>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001050:	f000 fdfe 	bl	8001c50 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001054:	2100      	movs	r1, #0
 8001056:	480d      	ldr	r0, [pc, #52]	; (800108c <MX_UART4_Init+0x90>)
 8001058:	f00c fc06 	bl	800d868 <HAL_UARTEx_SetTxFifoThreshold>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001062:	f000 fdf5 	bl	8001c50 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001066:	2100      	movs	r1, #0
 8001068:	4808      	ldr	r0, [pc, #32]	; (800108c <MX_UART4_Init+0x90>)
 800106a:	f00c fc3b 	bl	800d8e4 <HAL_UARTEx_SetRxFifoThreshold>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001074:	f000 fdec 	bl	8001c50 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001078:	4804      	ldr	r0, [pc, #16]	; (800108c <MX_UART4_Init+0x90>)
 800107a:	f00c fbbc 	bl	800d7f6 <HAL_UARTEx_DisableFifoMode>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001084:	f000 fde4 	bl	8001c50 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001088:	bf00      	nop
 800108a:	bd80      	pop	{r7, pc}
 800108c:	2400096c 	.word	0x2400096c
 8001090:	40004c00 	.word	0x40004c00

08001094 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8001098:	4b22      	ldr	r3, [pc, #136]	; (8001124 <MX_UART8_Init+0x90>)
 800109a:	4a23      	ldr	r2, [pc, #140]	; (8001128 <MX_UART8_Init+0x94>)
 800109c:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 800109e:	4b21      	ldr	r3, [pc, #132]	; (8001124 <MX_UART8_Init+0x90>)
 80010a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010a4:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 80010a6:	4b1f      	ldr	r3, [pc, #124]	; (8001124 <MX_UART8_Init+0x90>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 80010ac:	4b1d      	ldr	r3, [pc, #116]	; (8001124 <MX_UART8_Init+0x90>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 80010b2:	4b1c      	ldr	r3, [pc, #112]	; (8001124 <MX_UART8_Init+0x90>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 80010b8:	4b1a      	ldr	r3, [pc, #104]	; (8001124 <MX_UART8_Init+0x90>)
 80010ba:	220c      	movs	r2, #12
 80010bc:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010be:	4b19      	ldr	r3, [pc, #100]	; (8001124 <MX_UART8_Init+0x90>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80010c4:	4b17      	ldr	r3, [pc, #92]	; (8001124 <MX_UART8_Init+0x90>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010ca:	4b16      	ldr	r3, [pc, #88]	; (8001124 <MX_UART8_Init+0x90>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010d0:	4b14      	ldr	r3, [pc, #80]	; (8001124 <MX_UART8_Init+0x90>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010d6:	4b13      	ldr	r3, [pc, #76]	; (8001124 <MX_UART8_Init+0x90>)
 80010d8:	2200      	movs	r2, #0
 80010da:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 80010dc:	4811      	ldr	r0, [pc, #68]	; (8001124 <MX_UART8_Init+0x90>)
 80010de:	f00b fbd7 	bl	800c890 <HAL_UART_Init>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_UART8_Init+0x58>
  {
    Error_Handler();
 80010e8:	f000 fdb2 	bl	8001c50 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010ec:	2100      	movs	r1, #0
 80010ee:	480d      	ldr	r0, [pc, #52]	; (8001124 <MX_UART8_Init+0x90>)
 80010f0:	f00c fbba 	bl	800d868 <HAL_UARTEx_SetTxFifoThreshold>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 80010fa:	f000 fda9 	bl	8001c50 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010fe:	2100      	movs	r1, #0
 8001100:	4808      	ldr	r0, [pc, #32]	; (8001124 <MX_UART8_Init+0x90>)
 8001102:	f00c fbef 	bl	800d8e4 <HAL_UARTEx_SetRxFifoThreshold>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 800110c:	f000 fda0 	bl	8001c50 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8001110:	4804      	ldr	r0, [pc, #16]	; (8001124 <MX_UART8_Init+0x90>)
 8001112:	f00c fb70 	bl	800d7f6 <HAL_UARTEx_DisableFifoMode>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 800111c:	f000 fd98 	bl	8001c50 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8001120:	bf00      	nop
 8001122:	bd80      	pop	{r7, pc}
 8001124:	240008dc 	.word	0x240008dc
 8001128:	40007c00 	.word	0x40007c00

0800112c <MX_USART1_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  husart1.Instance = USART1;
 8001130:	4b22      	ldr	r3, [pc, #136]	; (80011bc <MX_USART1_Init+0x90>)
 8001132:	4a23      	ldr	r2, [pc, #140]	; (80011c0 <MX_USART1_Init+0x94>)
 8001134:	601a      	str	r2, [r3, #0]
  husart1.Init.BaudRate = 115200;
 8001136:	4b21      	ldr	r3, [pc, #132]	; (80011bc <MX_USART1_Init+0x90>)
 8001138:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800113c:	605a      	str	r2, [r3, #4]
  husart1.Init.WordLength = USART_WORDLENGTH_8B;
 800113e:	4b1f      	ldr	r3, [pc, #124]	; (80011bc <MX_USART1_Init+0x90>)
 8001140:	2200      	movs	r2, #0
 8001142:	609a      	str	r2, [r3, #8]
  husart1.Init.StopBits = USART_STOPBITS_1;
 8001144:	4b1d      	ldr	r3, [pc, #116]	; (80011bc <MX_USART1_Init+0x90>)
 8001146:	2200      	movs	r2, #0
 8001148:	60da      	str	r2, [r3, #12]
  husart1.Init.Parity = USART_PARITY_NONE;
 800114a:	4b1c      	ldr	r3, [pc, #112]	; (80011bc <MX_USART1_Init+0x90>)
 800114c:	2200      	movs	r2, #0
 800114e:	611a      	str	r2, [r3, #16]
  husart1.Init.Mode = USART_MODE_TX_RX;
 8001150:	4b1a      	ldr	r3, [pc, #104]	; (80011bc <MX_USART1_Init+0x90>)
 8001152:	220c      	movs	r2, #12
 8001154:	615a      	str	r2, [r3, #20]
  husart1.Init.CLKPolarity = USART_POLARITY_LOW;
 8001156:	4b19      	ldr	r3, [pc, #100]	; (80011bc <MX_USART1_Init+0x90>)
 8001158:	2200      	movs	r2, #0
 800115a:	619a      	str	r2, [r3, #24]
  husart1.Init.CLKPhase = USART_PHASE_1EDGE;
 800115c:	4b17      	ldr	r3, [pc, #92]	; (80011bc <MX_USART1_Init+0x90>)
 800115e:	2200      	movs	r2, #0
 8001160:	61da      	str	r2, [r3, #28]
  husart1.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8001162:	4b16      	ldr	r3, [pc, #88]	; (80011bc <MX_USART1_Init+0x90>)
 8001164:	2200      	movs	r2, #0
 8001166:	621a      	str	r2, [r3, #32]
  husart1.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 8001168:	4b14      	ldr	r3, [pc, #80]	; (80011bc <MX_USART1_Init+0x90>)
 800116a:	2200      	movs	r2, #0
 800116c:	625a      	str	r2, [r3, #36]	; 0x24
  husart1.SlaveMode = USART_SLAVEMODE_DISABLE;
 800116e:	4b13      	ldr	r3, [pc, #76]	; (80011bc <MX_USART1_Init+0x90>)
 8001170:	2200      	movs	r2, #0
 8001172:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_USART_Init(&husart1) != HAL_OK)
 8001174:	4811      	ldr	r0, [pc, #68]	; (80011bc <MX_USART1_Init+0x90>)
 8001176:	f00c fc41 	bl	800d9fc <HAL_USART_Init>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_USART1_Init+0x58>
  {
    Error_Handler();
 8001180:	f000 fd66 	bl	8001c50 <Error_Handler>
  }
  if (HAL_USARTEx_SetTxFifoThreshold(&husart1, USART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001184:	2100      	movs	r1, #0
 8001186:	480d      	ldr	r0, [pc, #52]	; (80011bc <MX_USART1_Init+0x90>)
 8001188:	f00d fa54 	bl	800e634 <HAL_USARTEx_SetTxFifoThreshold>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <MX_USART1_Init+0x6a>
  {
    Error_Handler();
 8001192:	f000 fd5d 	bl	8001c50 <Error_Handler>
  }
  if (HAL_USARTEx_SetRxFifoThreshold(&husart1, USART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001196:	2100      	movs	r1, #0
 8001198:	4808      	ldr	r0, [pc, #32]	; (80011bc <MX_USART1_Init+0x90>)
 800119a:	f00d fa89 	bl	800e6b0 <HAL_USARTEx_SetRxFifoThreshold>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_USART1_Init+0x7c>
  {
    Error_Handler();
 80011a4:	f000 fd54 	bl	8001c50 <Error_Handler>
  }
  if (HAL_USARTEx_DisableFifoMode(&husart1) != HAL_OK)
 80011a8:	4804      	ldr	r0, [pc, #16]	; (80011bc <MX_USART1_Init+0x90>)
 80011aa:	f00d fa0a 	bl	800e5c2 <HAL_USARTEx_DisableFifoMode>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <MX_USART1_Init+0x8c>
  {
    Error_Handler();
 80011b4:	f000 fd4c 	bl	8001c50 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011b8:	bf00      	nop
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	24000b14 	.word	0x24000b14
 80011c0:	40011000 	.word	0x40011000

080011c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011c8:	4b22      	ldr	r3, [pc, #136]	; (8001254 <MX_USART2_UART_Init+0x90>)
 80011ca:	4a23      	ldr	r2, [pc, #140]	; (8001258 <MX_USART2_UART_Init+0x94>)
 80011cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011ce:	4b21      	ldr	r3, [pc, #132]	; (8001254 <MX_USART2_UART_Init+0x90>)
 80011d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011d6:	4b1f      	ldr	r3, [pc, #124]	; (8001254 <MX_USART2_UART_Init+0x90>)
 80011d8:	2200      	movs	r2, #0
 80011da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011dc:	4b1d      	ldr	r3, [pc, #116]	; (8001254 <MX_USART2_UART_Init+0x90>)
 80011de:	2200      	movs	r2, #0
 80011e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011e2:	4b1c      	ldr	r3, [pc, #112]	; (8001254 <MX_USART2_UART_Init+0x90>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011e8:	4b1a      	ldr	r3, [pc, #104]	; (8001254 <MX_USART2_UART_Init+0x90>)
 80011ea:	220c      	movs	r2, #12
 80011ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ee:	4b19      	ldr	r3, [pc, #100]	; (8001254 <MX_USART2_UART_Init+0x90>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011f4:	4b17      	ldr	r3, [pc, #92]	; (8001254 <MX_USART2_UART_Init+0x90>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011fa:	4b16      	ldr	r3, [pc, #88]	; (8001254 <MX_USART2_UART_Init+0x90>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001200:	4b14      	ldr	r3, [pc, #80]	; (8001254 <MX_USART2_UART_Init+0x90>)
 8001202:	2200      	movs	r2, #0
 8001204:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001206:	4b13      	ldr	r3, [pc, #76]	; (8001254 <MX_USART2_UART_Init+0x90>)
 8001208:	2200      	movs	r2, #0
 800120a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800120c:	4811      	ldr	r0, [pc, #68]	; (8001254 <MX_USART2_UART_Init+0x90>)
 800120e:	f00b fb3f 	bl	800c890 <HAL_UART_Init>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001218:	f000 fd1a 	bl	8001c50 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800121c:	2100      	movs	r1, #0
 800121e:	480d      	ldr	r0, [pc, #52]	; (8001254 <MX_USART2_UART_Init+0x90>)
 8001220:	f00c fb22 	bl	800d868 <HAL_UARTEx_SetTxFifoThreshold>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800122a:	f000 fd11 	bl	8001c50 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800122e:	2100      	movs	r1, #0
 8001230:	4808      	ldr	r0, [pc, #32]	; (8001254 <MX_USART2_UART_Init+0x90>)
 8001232:	f00c fb57 	bl	800d8e4 <HAL_UARTEx_SetRxFifoThreshold>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800123c:	f000 fd08 	bl	8001c50 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001240:	4804      	ldr	r0, [pc, #16]	; (8001254 <MX_USART2_UART_Init+0x90>)
 8001242:	f00c fad8 	bl	800d7f6 <HAL_UARTEx_DisableFifoMode>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800124c:	f000 fd00 	bl	8001c50 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001250:	bf00      	nop
 8001252:	bd80      	pop	{r7, pc}
 8001254:	24000a84 	.word	0x24000a84
 8001258:	40004400 	.word	0x40004400

0800125c <MX_USART3_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  husart3.Instance = USART3;
 8001260:	4b22      	ldr	r3, [pc, #136]	; (80012ec <MX_USART3_Init+0x90>)
 8001262:	4a23      	ldr	r2, [pc, #140]	; (80012f0 <MX_USART3_Init+0x94>)
 8001264:	601a      	str	r2, [r3, #0]
  husart3.Init.BaudRate = 115200;
 8001266:	4b21      	ldr	r3, [pc, #132]	; (80012ec <MX_USART3_Init+0x90>)
 8001268:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800126c:	605a      	str	r2, [r3, #4]
  husart3.Init.WordLength = USART_WORDLENGTH_8B;
 800126e:	4b1f      	ldr	r3, [pc, #124]	; (80012ec <MX_USART3_Init+0x90>)
 8001270:	2200      	movs	r2, #0
 8001272:	609a      	str	r2, [r3, #8]
  husart3.Init.StopBits = USART_STOPBITS_1;
 8001274:	4b1d      	ldr	r3, [pc, #116]	; (80012ec <MX_USART3_Init+0x90>)
 8001276:	2200      	movs	r2, #0
 8001278:	60da      	str	r2, [r3, #12]
  husart3.Init.Parity = USART_PARITY_NONE;
 800127a:	4b1c      	ldr	r3, [pc, #112]	; (80012ec <MX_USART3_Init+0x90>)
 800127c:	2200      	movs	r2, #0
 800127e:	611a      	str	r2, [r3, #16]
  husart3.Init.Mode = USART_MODE_TX_RX;
 8001280:	4b1a      	ldr	r3, [pc, #104]	; (80012ec <MX_USART3_Init+0x90>)
 8001282:	220c      	movs	r2, #12
 8001284:	615a      	str	r2, [r3, #20]
  husart3.Init.CLKPolarity = USART_POLARITY_LOW;
 8001286:	4b19      	ldr	r3, [pc, #100]	; (80012ec <MX_USART3_Init+0x90>)
 8001288:	2200      	movs	r2, #0
 800128a:	619a      	str	r2, [r3, #24]
  husart3.Init.CLKPhase = USART_PHASE_1EDGE;
 800128c:	4b17      	ldr	r3, [pc, #92]	; (80012ec <MX_USART3_Init+0x90>)
 800128e:	2200      	movs	r2, #0
 8001290:	61da      	str	r2, [r3, #28]
  husart3.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8001292:	4b16      	ldr	r3, [pc, #88]	; (80012ec <MX_USART3_Init+0x90>)
 8001294:	2200      	movs	r2, #0
 8001296:	621a      	str	r2, [r3, #32]
  husart3.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 8001298:	4b14      	ldr	r3, [pc, #80]	; (80012ec <MX_USART3_Init+0x90>)
 800129a:	2200      	movs	r2, #0
 800129c:	625a      	str	r2, [r3, #36]	; 0x24
  husart3.SlaveMode = USART_SLAVEMODE_DISABLE;
 800129e:	4b13      	ldr	r3, [pc, #76]	; (80012ec <MX_USART3_Init+0x90>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_USART_Init(&husart3) != HAL_OK)
 80012a4:	4811      	ldr	r0, [pc, #68]	; (80012ec <MX_USART3_Init+0x90>)
 80012a6:	f00c fba9 	bl	800d9fc <HAL_USART_Init>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_USART3_Init+0x58>
  {
    Error_Handler();
 80012b0:	f000 fcce 	bl	8001c50 <Error_Handler>
  }
  if (HAL_USARTEx_SetTxFifoThreshold(&husart3, USART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012b4:	2100      	movs	r1, #0
 80012b6:	480d      	ldr	r0, [pc, #52]	; (80012ec <MX_USART3_Init+0x90>)
 80012b8:	f00d f9bc 	bl	800e634 <HAL_USARTEx_SetTxFifoThreshold>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_USART3_Init+0x6a>
  {
    Error_Handler();
 80012c2:	f000 fcc5 	bl	8001c50 <Error_Handler>
  }
  if (HAL_USARTEx_SetRxFifoThreshold(&husart3, USART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012c6:	2100      	movs	r1, #0
 80012c8:	4808      	ldr	r0, [pc, #32]	; (80012ec <MX_USART3_Init+0x90>)
 80012ca:	f00d f9f1 	bl	800e6b0 <HAL_USARTEx_SetRxFifoThreshold>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_USART3_Init+0x7c>
  {
    Error_Handler();
 80012d4:	f000 fcbc 	bl	8001c50 <Error_Handler>
  }
  if (HAL_USARTEx_DisableFifoMode(&husart3) != HAL_OK)
 80012d8:	4804      	ldr	r0, [pc, #16]	; (80012ec <MX_USART3_Init+0x90>)
 80012da:	f00d f972 	bl	800e5c2 <HAL_USARTEx_DisableFifoMode>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_USART3_Init+0x8c>
  {
    Error_Handler();
 80012e4:	f000 fcb4 	bl	8001c50 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80012e8:	bf00      	nop
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	24000708 	.word	0x24000708
 80012f0:	40004800 	.word	0x40004800

080012f4 <MX_USART6_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  husart6.Instance = USART6;
 80012f8:	4b22      	ldr	r3, [pc, #136]	; (8001384 <MX_USART6_Init+0x90>)
 80012fa:	4a23      	ldr	r2, [pc, #140]	; (8001388 <MX_USART6_Init+0x94>)
 80012fc:	601a      	str	r2, [r3, #0]
  husart6.Init.BaudRate = 115200;
 80012fe:	4b21      	ldr	r3, [pc, #132]	; (8001384 <MX_USART6_Init+0x90>)
 8001300:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001304:	605a      	str	r2, [r3, #4]
  husart6.Init.WordLength = USART_WORDLENGTH_8B;
 8001306:	4b1f      	ldr	r3, [pc, #124]	; (8001384 <MX_USART6_Init+0x90>)
 8001308:	2200      	movs	r2, #0
 800130a:	609a      	str	r2, [r3, #8]
  husart6.Init.StopBits = USART_STOPBITS_1;
 800130c:	4b1d      	ldr	r3, [pc, #116]	; (8001384 <MX_USART6_Init+0x90>)
 800130e:	2200      	movs	r2, #0
 8001310:	60da      	str	r2, [r3, #12]
  husart6.Init.Parity = USART_PARITY_NONE;
 8001312:	4b1c      	ldr	r3, [pc, #112]	; (8001384 <MX_USART6_Init+0x90>)
 8001314:	2200      	movs	r2, #0
 8001316:	611a      	str	r2, [r3, #16]
  husart6.Init.Mode = USART_MODE_TX_RX;
 8001318:	4b1a      	ldr	r3, [pc, #104]	; (8001384 <MX_USART6_Init+0x90>)
 800131a:	220c      	movs	r2, #12
 800131c:	615a      	str	r2, [r3, #20]
  husart6.Init.CLKPolarity = USART_POLARITY_LOW;
 800131e:	4b19      	ldr	r3, [pc, #100]	; (8001384 <MX_USART6_Init+0x90>)
 8001320:	2200      	movs	r2, #0
 8001322:	619a      	str	r2, [r3, #24]
  husart6.Init.CLKPhase = USART_PHASE_1EDGE;
 8001324:	4b17      	ldr	r3, [pc, #92]	; (8001384 <MX_USART6_Init+0x90>)
 8001326:	2200      	movs	r2, #0
 8001328:	61da      	str	r2, [r3, #28]
  husart6.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 800132a:	4b16      	ldr	r3, [pc, #88]	; (8001384 <MX_USART6_Init+0x90>)
 800132c:	2200      	movs	r2, #0
 800132e:	621a      	str	r2, [r3, #32]
  husart6.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 8001330:	4b14      	ldr	r3, [pc, #80]	; (8001384 <MX_USART6_Init+0x90>)
 8001332:	2200      	movs	r2, #0
 8001334:	625a      	str	r2, [r3, #36]	; 0x24
  husart6.SlaveMode = USART_SLAVEMODE_DISABLE;
 8001336:	4b13      	ldr	r3, [pc, #76]	; (8001384 <MX_USART6_Init+0x90>)
 8001338:	2200      	movs	r2, #0
 800133a:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_USART_Init(&husart6) != HAL_OK)
 800133c:	4811      	ldr	r0, [pc, #68]	; (8001384 <MX_USART6_Init+0x90>)
 800133e:	f00c fb5d 	bl	800d9fc <HAL_USART_Init>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_USART6_Init+0x58>
  {
    Error_Handler();
 8001348:	f000 fc82 	bl	8001c50 <Error_Handler>
  }
  if (HAL_USARTEx_SetTxFifoThreshold(&husart6, USART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800134c:	2100      	movs	r1, #0
 800134e:	480d      	ldr	r0, [pc, #52]	; (8001384 <MX_USART6_Init+0x90>)
 8001350:	f00d f970 	bl	800e634 <HAL_USARTEx_SetTxFifoThreshold>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_USART6_Init+0x6a>
  {
    Error_Handler();
 800135a:	f000 fc79 	bl	8001c50 <Error_Handler>
  }
  if (HAL_USARTEx_SetRxFifoThreshold(&husart6, USART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800135e:	2100      	movs	r1, #0
 8001360:	4808      	ldr	r0, [pc, #32]	; (8001384 <MX_USART6_Init+0x90>)
 8001362:	f00d f9a5 	bl	800e6b0 <HAL_USARTEx_SetRxFifoThreshold>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_USART6_Init+0x7c>
  {
    Error_Handler();
 800136c:	f000 fc70 	bl	8001c50 <Error_Handler>
  }
  if (HAL_USARTEx_DisableFifoMode(&husart6) != HAL_OK)
 8001370:	4804      	ldr	r0, [pc, #16]	; (8001384 <MX_USART6_Init+0x90>)
 8001372:	f00d f926 	bl	800e5c2 <HAL_USARTEx_DisableFifoMode>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_USART6_Init+0x8c>
  {
    Error_Handler();
 800137c:	f000 fc68 	bl	8001c50 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001380:	bf00      	nop
 8001382:	bd80      	pop	{r7, pc}
 8001384:	24000210 	.word	0x24000210
 8001388:	40011400 	.word	0x40011400

0800138c <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001390:	4b12      	ldr	r3, [pc, #72]	; (80013dc <MX_QUADSPI_Init+0x50>)
 8001392:	4a13      	ldr	r2, [pc, #76]	; (80013e0 <MX_QUADSPI_Init+0x54>)
 8001394:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8001396:	4b11      	ldr	r3, [pc, #68]	; (80013dc <MX_QUADSPI_Init+0x50>)
 8001398:	22ff      	movs	r2, #255	; 0xff
 800139a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 800139c:	4b0f      	ldr	r3, [pc, #60]	; (80013dc <MX_QUADSPI_Init+0x50>)
 800139e:	2201      	movs	r2, #1
 80013a0:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80013a2:	4b0e      	ldr	r3, [pc, #56]	; (80013dc <MX_QUADSPI_Init+0x50>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 80013a8:	4b0c      	ldr	r3, [pc, #48]	; (80013dc <MX_QUADSPI_Init+0x50>)
 80013aa:	2201      	movs	r2, #1
 80013ac:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80013ae:	4b0b      	ldr	r3, [pc, #44]	; (80013dc <MX_QUADSPI_Init+0x50>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80013b4:	4b09      	ldr	r3, [pc, #36]	; (80013dc <MX_QUADSPI_Init+0x50>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_2;
 80013ba:	4b08      	ldr	r3, [pc, #32]	; (80013dc <MX_QUADSPI_Init+0x50>)
 80013bc:	2280      	movs	r2, #128	; 0x80
 80013be:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80013c0:	4b06      	ldr	r3, [pc, #24]	; (80013dc <MX_QUADSPI_Init+0x50>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80013c6:	4805      	ldr	r0, [pc, #20]	; (80013dc <MX_QUADSPI_Init+0x50>)
 80013c8:	f006 ffaa 	bl	8008320 <HAL_QSPI_Init>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 80013d2:	f000 fc3d 	bl	8001c50 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80013d6:	bf00      	nop
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	24000c14 	.word	0x24000c14
 80013e0:	52005000 	.word	0x52005000

080013e4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80013e8:	4b27      	ldr	r3, [pc, #156]	; (8001488 <MX_SPI1_Init+0xa4>)
 80013ea:	4a28      	ldr	r2, [pc, #160]	; (800148c <MX_SPI1_Init+0xa8>)
 80013ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80013ee:	4b26      	ldr	r3, [pc, #152]	; (8001488 <MX_SPI1_Init+0xa4>)
 80013f0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80013f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80013f6:	4b24      	ldr	r3, [pc, #144]	; (8001488 <MX_SPI1_Init+0xa4>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80013fc:	4b22      	ldr	r3, [pc, #136]	; (8001488 <MX_SPI1_Init+0xa4>)
 80013fe:	2203      	movs	r2, #3
 8001400:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001402:	4b21      	ldr	r3, [pc, #132]	; (8001488 <MX_SPI1_Init+0xa4>)
 8001404:	2200      	movs	r2, #0
 8001406:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001408:	4b1f      	ldr	r3, [pc, #124]	; (8001488 <MX_SPI1_Init+0xa4>)
 800140a:	2200      	movs	r2, #0
 800140c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800140e:	4b1e      	ldr	r3, [pc, #120]	; (8001488 <MX_SPI1_Init+0xa4>)
 8001410:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001414:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001416:	4b1c      	ldr	r3, [pc, #112]	; (8001488 <MX_SPI1_Init+0xa4>)
 8001418:	2200      	movs	r2, #0
 800141a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800141c:	4b1a      	ldr	r3, [pc, #104]	; (8001488 <MX_SPI1_Init+0xa4>)
 800141e:	2200      	movs	r2, #0
 8001420:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001422:	4b19      	ldr	r3, [pc, #100]	; (8001488 <MX_SPI1_Init+0xa4>)
 8001424:	2200      	movs	r2, #0
 8001426:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001428:	4b17      	ldr	r3, [pc, #92]	; (8001488 <MX_SPI1_Init+0xa4>)
 800142a:	2200      	movs	r2, #0
 800142c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800142e:	4b16      	ldr	r3, [pc, #88]	; (8001488 <MX_SPI1_Init+0xa4>)
 8001430:	2200      	movs	r2, #0
 8001432:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001434:	4b14      	ldr	r3, [pc, #80]	; (8001488 <MX_SPI1_Init+0xa4>)
 8001436:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800143a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800143c:	4b12      	ldr	r3, [pc, #72]	; (8001488 <MX_SPI1_Init+0xa4>)
 800143e:	2200      	movs	r2, #0
 8001440:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001442:	4b11      	ldr	r3, [pc, #68]	; (8001488 <MX_SPI1_Init+0xa4>)
 8001444:	2200      	movs	r2, #0
 8001446:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001448:	4b0f      	ldr	r3, [pc, #60]	; (8001488 <MX_SPI1_Init+0xa4>)
 800144a:	2200      	movs	r2, #0
 800144c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800144e:	4b0e      	ldr	r3, [pc, #56]	; (8001488 <MX_SPI1_Init+0xa4>)
 8001450:	2200      	movs	r2, #0
 8001452:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001454:	4b0c      	ldr	r3, [pc, #48]	; (8001488 <MX_SPI1_Init+0xa4>)
 8001456:	2200      	movs	r2, #0
 8001458:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800145a:	4b0b      	ldr	r3, [pc, #44]	; (8001488 <MX_SPI1_Init+0xa4>)
 800145c:	2200      	movs	r2, #0
 800145e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001460:	4b09      	ldr	r3, [pc, #36]	; (8001488 <MX_SPI1_Init+0xa4>)
 8001462:	2200      	movs	r2, #0
 8001464:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001466:	4b08      	ldr	r3, [pc, #32]	; (8001488 <MX_SPI1_Init+0xa4>)
 8001468:	2200      	movs	r2, #0
 800146a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800146c:	4b06      	ldr	r3, [pc, #24]	; (8001488 <MX_SPI1_Init+0xa4>)
 800146e:	2200      	movs	r2, #0
 8001470:	659a      	str	r2, [r3, #88]	; 0x58

  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001472:	4805      	ldr	r0, [pc, #20]	; (8001488 <MX_SPI1_Init+0xa4>)
 8001474:	f00a f930 	bl	800b6d8 <HAL_SPI_Init>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 800147e:	f000 fbe7 	bl	8001c50 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001482:	bf00      	nop
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	240009fc 	.word	0x240009fc
 800148c:	40013000 	.word	0x40013000

08001490 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001494:	4b27      	ldr	r3, [pc, #156]	; (8001534 <MX_SPI2_Init+0xa4>)
 8001496:	4a28      	ldr	r2, [pc, #160]	; (8001538 <MX_SPI2_Init+0xa8>)
 8001498:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800149a:	4b26      	ldr	r3, [pc, #152]	; (8001534 <MX_SPI2_Init+0xa4>)
 800149c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80014a0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80014a2:	4b24      	ldr	r3, [pc, #144]	; (8001534 <MX_SPI2_Init+0xa4>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80014a8:	4b22      	ldr	r3, [pc, #136]	; (8001534 <MX_SPI2_Init+0xa4>)
 80014aa:	2203      	movs	r2, #3
 80014ac:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014ae:	4b21      	ldr	r3, [pc, #132]	; (8001534 <MX_SPI2_Init+0xa4>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014b4:	4b1f      	ldr	r3, [pc, #124]	; (8001534 <MX_SPI2_Init+0xa4>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80014ba:	4b1e      	ldr	r3, [pc, #120]	; (8001534 <MX_SPI2_Init+0xa4>)
 80014bc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80014c0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80014c2:	4b1c      	ldr	r3, [pc, #112]	; (8001534 <MX_SPI2_Init+0xa4>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014c8:	4b1a      	ldr	r3, [pc, #104]	; (8001534 <MX_SPI2_Init+0xa4>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80014ce:	4b19      	ldr	r3, [pc, #100]	; (8001534 <MX_SPI2_Init+0xa4>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014d4:	4b17      	ldr	r3, [pc, #92]	; (8001534 <MX_SPI2_Init+0xa4>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80014da:	4b16      	ldr	r3, [pc, #88]	; (8001534 <MX_SPI2_Init+0xa4>)
 80014dc:	2200      	movs	r2, #0
 80014de:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80014e0:	4b14      	ldr	r3, [pc, #80]	; (8001534 <MX_SPI2_Init+0xa4>)
 80014e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014e6:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80014e8:	4b12      	ldr	r3, [pc, #72]	; (8001534 <MX_SPI2_Init+0xa4>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80014ee:	4b11      	ldr	r3, [pc, #68]	; (8001534 <MX_SPI2_Init+0xa4>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80014f4:	4b0f      	ldr	r3, [pc, #60]	; (8001534 <MX_SPI2_Init+0xa4>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80014fa:	4b0e      	ldr	r3, [pc, #56]	; (8001534 <MX_SPI2_Init+0xa4>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001500:	4b0c      	ldr	r3, [pc, #48]	; (8001534 <MX_SPI2_Init+0xa4>)
 8001502:	2200      	movs	r2, #0
 8001504:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001506:	4b0b      	ldr	r3, [pc, #44]	; (8001534 <MX_SPI2_Init+0xa4>)
 8001508:	2200      	movs	r2, #0
 800150a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800150c:	4b09      	ldr	r3, [pc, #36]	; (8001534 <MX_SPI2_Init+0xa4>)
 800150e:	2200      	movs	r2, #0
 8001510:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001512:	4b08      	ldr	r3, [pc, #32]	; (8001534 <MX_SPI2_Init+0xa4>)
 8001514:	2200      	movs	r2, #0
 8001516:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001518:	4b06      	ldr	r3, [pc, #24]	; (8001534 <MX_SPI2_Init+0xa4>)
 800151a:	2200      	movs	r2, #0
 800151c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800151e:	4805      	ldr	r0, [pc, #20]	; (8001534 <MX_SPI2_Init+0xa4>)
 8001520:	f00a f8da 	bl	800b6d8 <HAL_SPI_Init>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 800152a:	f000 fb91 	bl	8001c50 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800152e:	bf00      	nop
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	240002bc 	.word	0x240002bc
 8001538:	40003800 	.word	0x40003800

0800153c <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8001540:	4b27      	ldr	r3, [pc, #156]	; (80015e0 <MX_SPI4_Init+0xa4>)
 8001542:	4a28      	ldr	r2, [pc, #160]	; (80015e4 <MX_SPI4_Init+0xa8>)
 8001544:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001546:	4b26      	ldr	r3, [pc, #152]	; (80015e0 <MX_SPI4_Init+0xa4>)
 8001548:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800154c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800154e:	4b24      	ldr	r3, [pc, #144]	; (80015e0 <MX_SPI4_Init+0xa4>)
 8001550:	2200      	movs	r2, #0
 8001552:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 8001554:	4b22      	ldr	r3, [pc, #136]	; (80015e0 <MX_SPI4_Init+0xa4>)
 8001556:	2203      	movs	r2, #3
 8001558:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 800155a:	4b21      	ldr	r3, [pc, #132]	; (80015e0 <MX_SPI4_Init+0xa4>)
 800155c:	2200      	movs	r2, #0
 800155e:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001560:	4b1f      	ldr	r3, [pc, #124]	; (80015e0 <MX_SPI4_Init+0xa4>)
 8001562:	2200      	movs	r2, #0
 8001564:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001566:	4b1e      	ldr	r3, [pc, #120]	; (80015e0 <MX_SPI4_Init+0xa4>)
 8001568:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800156c:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800156e:	4b1c      	ldr	r3, [pc, #112]	; (80015e0 <MX_SPI4_Init+0xa4>)
 8001570:	2200      	movs	r2, #0
 8001572:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001574:	4b1a      	ldr	r3, [pc, #104]	; (80015e0 <MX_SPI4_Init+0xa4>)
 8001576:	2200      	movs	r2, #0
 8001578:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800157a:	4b19      	ldr	r3, [pc, #100]	; (80015e0 <MX_SPI4_Init+0xa4>)
 800157c:	2200      	movs	r2, #0
 800157e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001580:	4b17      	ldr	r3, [pc, #92]	; (80015e0 <MX_SPI4_Init+0xa4>)
 8001582:	2200      	movs	r2, #0
 8001584:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8001586:	4b16      	ldr	r3, [pc, #88]	; (80015e0 <MX_SPI4_Init+0xa4>)
 8001588:	2200      	movs	r2, #0
 800158a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800158c:	4b14      	ldr	r3, [pc, #80]	; (80015e0 <MX_SPI4_Init+0xa4>)
 800158e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001592:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001594:	4b12      	ldr	r3, [pc, #72]	; (80015e0 <MX_SPI4_Init+0xa4>)
 8001596:	2200      	movs	r2, #0
 8001598:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800159a:	4b11      	ldr	r3, [pc, #68]	; (80015e0 <MX_SPI4_Init+0xa4>)
 800159c:	2200      	movs	r2, #0
 800159e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80015a0:	4b0f      	ldr	r3, [pc, #60]	; (80015e0 <MX_SPI4_Init+0xa4>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80015a6:	4b0e      	ldr	r3, [pc, #56]	; (80015e0 <MX_SPI4_Init+0xa4>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80015ac:	4b0c      	ldr	r3, [pc, #48]	; (80015e0 <MX_SPI4_Init+0xa4>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80015b2:	4b0b      	ldr	r3, [pc, #44]	; (80015e0 <MX_SPI4_Init+0xa4>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80015b8:	4b09      	ldr	r3, [pc, #36]	; (80015e0 <MX_SPI4_Init+0xa4>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80015be:	4b08      	ldr	r3, [pc, #32]	; (80015e0 <MX_SPI4_Init+0xa4>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80015c4:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <MX_SPI4_Init+0xa4>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80015ca:	4805      	ldr	r0, [pc, #20]	; (80015e0 <MX_SPI4_Init+0xa4>)
 80015cc:	f00a f884 	bl	800b6d8 <HAL_SPI_Init>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 80015d6:	f000 fb3b 	bl	8001c50 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80015da:	bf00      	nop
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	24000768 	.word	0x24000768
 80015e4:	40013400 	.word	0x40013400

080015e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b096      	sub	sp, #88	; 0x58
 80015ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015ee:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	605a      	str	r2, [r3, #4]
 80015f8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]
 8001602:	605a      	str	r2, [r3, #4]
 8001604:	609a      	str	r2, [r3, #8]
 8001606:	60da      	str	r2, [r3, #12]
 8001608:	611a      	str	r2, [r3, #16]
 800160a:	615a      	str	r2, [r3, #20]
 800160c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800160e:	1d3b      	adds	r3, r7, #4
 8001610:	222c      	movs	r2, #44	; 0x2c
 8001612:	2100      	movs	r1, #0
 8001614:	4618      	mov	r0, r3
 8001616:	f00d f90b 	bl	800e830 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800161a:	4b39      	ldr	r3, [pc, #228]	; (8001700 <MX_TIM1_Init+0x118>)
 800161c:	4a39      	ldr	r2, [pc, #228]	; (8001704 <MX_TIM1_Init+0x11c>)
 800161e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64000-1;
 8001620:	4b37      	ldr	r3, [pc, #220]	; (8001700 <MX_TIM1_Init+0x118>)
 8001622:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8001626:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001628:	4b35      	ldr	r3, [pc, #212]	; (8001700 <MX_TIM1_Init+0x118>)
 800162a:	2200      	movs	r2, #0
 800162c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20-1;
 800162e:	4b34      	ldr	r3, [pc, #208]	; (8001700 <MX_TIM1_Init+0x118>)
 8001630:	2213      	movs	r2, #19
 8001632:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001634:	4b32      	ldr	r3, [pc, #200]	; (8001700 <MX_TIM1_Init+0x118>)
 8001636:	2200      	movs	r2, #0
 8001638:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800163a:	4b31      	ldr	r3, [pc, #196]	; (8001700 <MX_TIM1_Init+0x118>)
 800163c:	2200      	movs	r2, #0
 800163e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001640:	4b2f      	ldr	r3, [pc, #188]	; (8001700 <MX_TIM1_Init+0x118>)
 8001642:	2200      	movs	r2, #0
 8001644:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001646:	482e      	ldr	r0, [pc, #184]	; (8001700 <MX_TIM1_Init+0x118>)
 8001648:	f00a f9ba 	bl	800b9c0 <HAL_TIM_PWM_Init>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001652:	f000 fafd 	bl	8001c50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001656:	2300      	movs	r3, #0
 8001658:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800165a:	2300      	movs	r3, #0
 800165c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800165e:	2300      	movs	r3, #0
 8001660:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001662:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001666:	4619      	mov	r1, r3
 8001668:	4825      	ldr	r0, [pc, #148]	; (8001700 <MX_TIM1_Init+0x118>)
 800166a:	f00b f80b 	bl	800c684 <HAL_TIMEx_MasterConfigSynchronization>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001674:	f000 faec 	bl	8001c50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001678:	2360      	movs	r3, #96	; 0x60
 800167a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 15;
 800167c:	230f      	movs	r3, #15
 800167e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001680:	2300      	movs	r3, #0
 8001682:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001684:	2300      	movs	r3, #0
 8001686:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001688:	2300      	movs	r3, #0
 800168a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800168c:	2300      	movs	r3, #0
 800168e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001690:	2300      	movs	r3, #0
 8001692:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001694:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001698:	2204      	movs	r2, #4
 800169a:	4619      	mov	r1, r3
 800169c:	4818      	ldr	r0, [pc, #96]	; (8001700 <MX_TIM1_Init+0x118>)
 800169e:	f00a f9e7 	bl	800ba70 <HAL_TIM_PWM_ConfigChannel>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80016a8:	f000 fad2 	bl	8001c50 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80016ac:	2300      	movs	r3, #0
 80016ae:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80016b0:	2300      	movs	r3, #0
 80016b2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80016b4:	2300      	movs	r3, #0
 80016b6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80016b8:	2300      	movs	r3, #0
 80016ba:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016bc:	2300      	movs	r3, #0
 80016be:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016c4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80016c6:	2300      	movs	r3, #0
 80016c8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80016ca:	2300      	movs	r3, #0
 80016cc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80016ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016d2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80016d4:	2300      	movs	r3, #0
 80016d6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80016d8:	2300      	movs	r3, #0
 80016da:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80016dc:	1d3b      	adds	r3, r7, #4
 80016de:	4619      	mov	r1, r3
 80016e0:	4807      	ldr	r0, [pc, #28]	; (8001700 <MX_TIM1_Init+0x118>)
 80016e2:	f00b f857 	bl	800c794 <HAL_TIMEx_ConfigBreakDeadTime>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 80016ec:	f000 fab0 	bl	8001c50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80016f0:	4803      	ldr	r0, [pc, #12]	; (8001700 <MX_TIM1_Init+0x118>)
 80016f2:	f001 fb55 	bl	8002da0 <HAL_TIM_MspPostInit>

}
 80016f6:	bf00      	nop
 80016f8:	3758      	adds	r7, #88	; 0x58
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	24000890 	.word	0x24000890
 8001704:	40010000 	.word	0x40010000

08001708 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b08e      	sub	sp, #56	; 0x38
 800170c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800170e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001712:	2200      	movs	r2, #0
 8001714:	601a      	str	r2, [r3, #0]
 8001716:	605a      	str	r2, [r3, #4]
 8001718:	609a      	str	r2, [r3, #8]
 800171a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800171c:	f107 031c 	add.w	r3, r7, #28
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	605a      	str	r2, [r3, #4]
 8001726:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001728:	463b      	mov	r3, r7
 800172a:	2200      	movs	r2, #0
 800172c:	601a      	str	r2, [r3, #0]
 800172e:	605a      	str	r2, [r3, #4]
 8001730:	609a      	str	r2, [r3, #8]
 8001732:	60da      	str	r2, [r3, #12]
 8001734:	611a      	str	r2, [r3, #16]
 8001736:	615a      	str	r2, [r3, #20]
 8001738:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800173a:	4b2d      	ldr	r3, [pc, #180]	; (80017f0 <MX_TIM4_Init+0xe8>)
 800173c:	4a2d      	ldr	r2, [pc, #180]	; (80017f4 <MX_TIM4_Init+0xec>)
 800173e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001740:	4b2b      	ldr	r3, [pc, #172]	; (80017f0 <MX_TIM4_Init+0xe8>)
 8001742:	2200      	movs	r2, #0
 8001744:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001746:	4b2a      	ldr	r3, [pc, #168]	; (80017f0 <MX_TIM4_Init+0xe8>)
 8001748:	2200      	movs	r2, #0
 800174a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800174c:	4b28      	ldr	r3, [pc, #160]	; (80017f0 <MX_TIM4_Init+0xe8>)
 800174e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001752:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001754:	4b26      	ldr	r3, [pc, #152]	; (80017f0 <MX_TIM4_Init+0xe8>)
 8001756:	2200      	movs	r2, #0
 8001758:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800175a:	4b25      	ldr	r3, [pc, #148]	; (80017f0 <MX_TIM4_Init+0xe8>)
 800175c:	2200      	movs	r2, #0
 800175e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001760:	4823      	ldr	r0, [pc, #140]	; (80017f0 <MX_TIM4_Init+0xe8>)
 8001762:	f00a f8d6 	bl	800b912 <HAL_TIM_Base_Init>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 800176c:	f000 fa70 	bl	8001c50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001770:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001774:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001776:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800177a:	4619      	mov	r1, r3
 800177c:	481c      	ldr	r0, [pc, #112]	; (80017f0 <MX_TIM4_Init+0xe8>)
 800177e:	f00a fa87 	bl	800bc90 <HAL_TIM_ConfigClockSource>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001788:	f000 fa62 	bl	8001c50 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800178c:	4818      	ldr	r0, [pc, #96]	; (80017f0 <MX_TIM4_Init+0xe8>)
 800178e:	f00a f917 	bl	800b9c0 <HAL_TIM_PWM_Init>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001798:	f000 fa5a 	bl	8001c50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800179c:	2300      	movs	r3, #0
 800179e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017a0:	2300      	movs	r3, #0
 80017a2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80017a4:	f107 031c 	add.w	r3, r7, #28
 80017a8:	4619      	mov	r1, r3
 80017aa:	4811      	ldr	r0, [pc, #68]	; (80017f0 <MX_TIM4_Init+0xe8>)
 80017ac:	f00a ff6a 	bl	800c684 <HAL_TIMEx_MasterConfigSynchronization>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80017b6:	f000 fa4b 	bl	8001c50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017ba:	2360      	movs	r3, #96	; 0x60
 80017bc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80017be:	2300      	movs	r3, #0
 80017c0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017c2:	2300      	movs	r3, #0
 80017c4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017c6:	2300      	movs	r3, #0
 80017c8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80017ca:	463b      	mov	r3, r7
 80017cc:	220c      	movs	r2, #12
 80017ce:	4619      	mov	r1, r3
 80017d0:	4807      	ldr	r0, [pc, #28]	; (80017f0 <MX_TIM4_Init+0xe8>)
 80017d2:	f00a f94d 	bl	800ba70 <HAL_TIM_PWM_ConfigChannel>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80017dc:	f000 fa38 	bl	8001c50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80017e0:	4803      	ldr	r0, [pc, #12]	; (80017f0 <MX_TIM4_Init+0xe8>)
 80017e2:	f001 fadd 	bl	8002da0 <HAL_TIM_MspPostInit>

}
 80017e6:	bf00      	nop
 80017e8:	3738      	adds	r7, #56	; 0x38
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	24000344 	.word	0x24000344
 80017f4:	40000800 	.word	0x40000800

080017f8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b08a      	sub	sp, #40	; 0x28
 80017fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017fe:	f107 031c 	add.w	r3, r7, #28
 8001802:	2200      	movs	r2, #0
 8001804:	601a      	str	r2, [r3, #0]
 8001806:	605a      	str	r2, [r3, #4]
 8001808:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800180a:	463b      	mov	r3, r7
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]
 8001810:	605a      	str	r2, [r3, #4]
 8001812:	609a      	str	r2, [r3, #8]
 8001814:	60da      	str	r2, [r3, #12]
 8001816:	611a      	str	r2, [r3, #16]
 8001818:	615a      	str	r2, [r3, #20]
 800181a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800181c:	4b21      	ldr	r3, [pc, #132]	; (80018a4 <MX_TIM5_Init+0xac>)
 800181e:	4a22      	ldr	r2, [pc, #136]	; (80018a8 <MX_TIM5_Init+0xb0>)
 8001820:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 6400-1;
 8001822:	4b20      	ldr	r3, [pc, #128]	; (80018a4 <MX_TIM5_Init+0xac>)
 8001824:	f641 02ff 	movw	r2, #6399	; 0x18ff
 8001828:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800182a:	4b1e      	ldr	r3, [pc, #120]	; (80018a4 <MX_TIM5_Init+0xac>)
 800182c:	2200      	movs	r2, #0
 800182e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 200-1;
 8001830:	4b1c      	ldr	r3, [pc, #112]	; (80018a4 <MX_TIM5_Init+0xac>)
 8001832:	22c7      	movs	r2, #199	; 0xc7
 8001834:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001836:	4b1b      	ldr	r3, [pc, #108]	; (80018a4 <MX_TIM5_Init+0xac>)
 8001838:	2200      	movs	r2, #0
 800183a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800183c:	4b19      	ldr	r3, [pc, #100]	; (80018a4 <MX_TIM5_Init+0xac>)
 800183e:	2200      	movs	r2, #0
 8001840:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001842:	4818      	ldr	r0, [pc, #96]	; (80018a4 <MX_TIM5_Init+0xac>)
 8001844:	f00a f8bc 	bl	800b9c0 <HAL_TIM_PWM_Init>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 800184e:	f000 f9ff 	bl	8001c50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001852:	2300      	movs	r3, #0
 8001854:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001856:	2300      	movs	r3, #0
 8001858:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800185a:	f107 031c 	add.w	r3, r7, #28
 800185e:	4619      	mov	r1, r3
 8001860:	4810      	ldr	r0, [pc, #64]	; (80018a4 <MX_TIM5_Init+0xac>)
 8001862:	f00a ff0f 	bl	800c684 <HAL_TIMEx_MasterConfigSynchronization>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 800186c:	f000 f9f0 	bl	8001c50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001870:	2360      	movs	r3, #96	; 0x60
 8001872:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 100-1;
 8001874:	2363      	movs	r3, #99	; 0x63
 8001876:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001878:	2300      	movs	r3, #0
 800187a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800187c:	2300      	movs	r3, #0
 800187e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001880:	463b      	mov	r3, r7
 8001882:	2204      	movs	r2, #4
 8001884:	4619      	mov	r1, r3
 8001886:	4807      	ldr	r0, [pc, #28]	; (80018a4 <MX_TIM5_Init+0xac>)
 8001888:	f00a f8f2 	bl	800ba70 <HAL_TIM_PWM_ConfigChannel>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 8001892:	f000 f9dd 	bl	8001c50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001896:	4803      	ldr	r0, [pc, #12]	; (80018a4 <MX_TIM5_Init+0xac>)
 8001898:	f001 fa82 	bl	8002da0 <HAL_TIM_MspPostInit>

}
 800189c:	bf00      	nop
 800189e:	3728      	adds	r7, #40	; 0x28
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	24000564 	.word	0x24000564
 80018a8:	40000c00 	.word	0x40000c00

080018ac <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b09a      	sub	sp, #104	; 0x68
 80018b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018b2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80018b6:	2200      	movs	r2, #0
 80018b8:	601a      	str	r2, [r3, #0]
 80018ba:	605a      	str	r2, [r3, #4]
 80018bc:	609a      	str	r2, [r3, #8]
 80018be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018c0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80018c4:	2200      	movs	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]
 80018c8:	605a      	str	r2, [r3, #4]
 80018ca:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	605a      	str	r2, [r3, #4]
 80018d6:	609a      	str	r2, [r3, #8]
 80018d8:	60da      	str	r2, [r3, #12]
 80018da:	611a      	str	r2, [r3, #16]
 80018dc:	615a      	str	r2, [r3, #20]
 80018de:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80018e0:	1d3b      	adds	r3, r7, #4
 80018e2:	222c      	movs	r2, #44	; 0x2c
 80018e4:	2100      	movs	r1, #0
 80018e6:	4618      	mov	r0, r3
 80018e8:	f00c ffa2 	bl	800e830 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80018ec:	4b3f      	ldr	r3, [pc, #252]	; (80019ec <MX_TIM15_Init+0x140>)
 80018ee:	4a40      	ldr	r2, [pc, #256]	; (80019f0 <MX_TIM15_Init+0x144>)
 80018f0:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 6400;
 80018f2:	4b3e      	ldr	r3, [pc, #248]	; (80019ec <MX_TIM15_Init+0x140>)
 80018f4:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 80018f8:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018fa:	4b3c      	ldr	r3, [pc, #240]	; (80019ec <MX_TIM15_Init+0x140>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 200-1;
 8001900:	4b3a      	ldr	r3, [pc, #232]	; (80019ec <MX_TIM15_Init+0x140>)
 8001902:	22c7      	movs	r2, #199	; 0xc7
 8001904:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001906:	4b39      	ldr	r3, [pc, #228]	; (80019ec <MX_TIM15_Init+0x140>)
 8001908:	2200      	movs	r2, #0
 800190a:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800190c:	4b37      	ldr	r3, [pc, #220]	; (80019ec <MX_TIM15_Init+0x140>)
 800190e:	2200      	movs	r2, #0
 8001910:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001912:	4b36      	ldr	r3, [pc, #216]	; (80019ec <MX_TIM15_Init+0x140>)
 8001914:	2200      	movs	r2, #0
 8001916:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001918:	4834      	ldr	r0, [pc, #208]	; (80019ec <MX_TIM15_Init+0x140>)
 800191a:	f009 fffa 	bl	800b912 <HAL_TIM_Base_Init>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8001924:	f000 f994 	bl	8001c50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001928:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800192c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800192e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001932:	4619      	mov	r1, r3
 8001934:	482d      	ldr	r0, [pc, #180]	; (80019ec <MX_TIM15_Init+0x140>)
 8001936:	f00a f9ab 	bl	800bc90 <HAL_TIM_ConfigClockSource>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 8001940:	f000 f986 	bl	8001c50 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001944:	4829      	ldr	r0, [pc, #164]	; (80019ec <MX_TIM15_Init+0x140>)
 8001946:	f00a f83b 	bl	800b9c0 <HAL_TIM_PWM_Init>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 8001950:	f000 f97e 	bl	8001c50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001954:	2300      	movs	r3, #0
 8001956:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001958:	2300      	movs	r3, #0
 800195a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800195c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001960:	4619      	mov	r1, r3
 8001962:	4822      	ldr	r0, [pc, #136]	; (80019ec <MX_TIM15_Init+0x140>)
 8001964:	f00a fe8e 	bl	800c684 <HAL_TIMEx_MasterConfigSynchronization>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 800196e:	f000 f96f 	bl	8001c50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001972:	2360      	movs	r3, #96	; 0x60
 8001974:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 100-1;
 8001976:	2363      	movs	r3, #99	; 0x63
 8001978:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800197a:	2300      	movs	r3, #0
 800197c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800197e:	2300      	movs	r3, #0
 8001980:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001982:	2300      	movs	r3, #0
 8001984:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001986:	2300      	movs	r3, #0
 8001988:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800198a:	2300      	movs	r3, #0
 800198c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800198e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001992:	2204      	movs	r2, #4
 8001994:	4619      	mov	r1, r3
 8001996:	4815      	ldr	r0, [pc, #84]	; (80019ec <MX_TIM15_Init+0x140>)
 8001998:	f00a f86a 	bl	800ba70 <HAL_TIM_PWM_ConfigChannel>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <MX_TIM15_Init+0xfa>
  {
    Error_Handler();
 80019a2:	f000 f955 	bl	8001c50 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019a6:	2300      	movs	r3, #0
 80019a8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019aa:	2300      	movs	r3, #0
 80019ac:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019ae:	2300      	movs	r3, #0
 80019b0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80019b2:	2300      	movs	r3, #0
 80019b4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80019b6:	2300      	movs	r3, #0
 80019b8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019be:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80019c0:	2300      	movs	r3, #0
 80019c2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019c4:	2300      	movs	r3, #0
 80019c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80019c8:	1d3b      	adds	r3, r7, #4
 80019ca:	4619      	mov	r1, r3
 80019cc:	4807      	ldr	r0, [pc, #28]	; (80019ec <MX_TIM15_Init+0x140>)
 80019ce:	f00a fee1 	bl	800c794 <HAL_TIMEx_ConfigBreakDeadTime>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <MX_TIM15_Init+0x130>
  {
    Error_Handler();
 80019d8:	f000 f93a 	bl	8001c50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80019dc:	4803      	ldr	r0, [pc, #12]	; (80019ec <MX_TIM15_Init+0x140>)
 80019de:	f001 f9df 	bl	8002da0 <HAL_TIM_MspPostInit>

}
 80019e2:	bf00      	nop
 80019e4:	3768      	adds	r7, #104	; 0x68
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	240004cc 	.word	0x240004cc
 80019f0:	40014000 	.word	0x40014000

080019f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80019fa:	4b0d      	ldr	r3, [pc, #52]	; (8001a30 <MX_DMA_Init+0x3c>)
 80019fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001a00:	4a0b      	ldr	r2, [pc, #44]	; (8001a30 <MX_DMA_Init+0x3c>)
 8001a02:	f043 0301 	orr.w	r3, r3, #1
 8001a06:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001a0a:	4b09      	ldr	r3, [pc, #36]	; (8001a30 <MX_DMA_Init+0x3c>)
 8001a0c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001a10:	f003 0301 	and.w	r3, r3, #1
 8001a14:	607b      	str	r3, [r7, #4]
 8001a16:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001a18:	2200      	movs	r2, #0
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	200b      	movs	r0, #11
 8001a1e:	f003 f80a 	bl	8004a36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001a22:	200b      	movs	r0, #11
 8001a24:	f003 f821 	bl	8004a6a <HAL_NVIC_EnableIRQ>

}
 8001a28:	bf00      	nop
 8001a2a:	3708      	adds	r7, #8
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	58024400 	.word	0x58024400

08001a34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b08c      	sub	sp, #48	; 0x30
 8001a38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a3a:	f107 031c 	add.w	r3, r7, #28
 8001a3e:	2200      	movs	r2, #0
 8001a40:	601a      	str	r2, [r3, #0]
 8001a42:	605a      	str	r2, [r3, #4]
 8001a44:	609a      	str	r2, [r3, #8]
 8001a46:	60da      	str	r2, [r3, #12]
 8001a48:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a4a:	4b7b      	ldr	r3, [pc, #492]	; (8001c38 <MX_GPIO_Init+0x204>)
 8001a4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a50:	4a79      	ldr	r2, [pc, #484]	; (8001c38 <MX_GPIO_Init+0x204>)
 8001a52:	f043 0310 	orr.w	r3, r3, #16
 8001a56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a5a:	4b77      	ldr	r3, [pc, #476]	; (8001c38 <MX_GPIO_Init+0x204>)
 8001a5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a60:	f003 0310 	and.w	r3, r3, #16
 8001a64:	61bb      	str	r3, [r7, #24]
 8001a66:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a68:	4b73      	ldr	r3, [pc, #460]	; (8001c38 <MX_GPIO_Init+0x204>)
 8001a6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a6e:	4a72      	ldr	r2, [pc, #456]	; (8001c38 <MX_GPIO_Init+0x204>)
 8001a70:	f043 0304 	orr.w	r3, r3, #4
 8001a74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a78:	4b6f      	ldr	r3, [pc, #444]	; (8001c38 <MX_GPIO_Init+0x204>)
 8001a7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a7e:	f003 0304 	and.w	r3, r3, #4
 8001a82:	617b      	str	r3, [r7, #20]
 8001a84:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a86:	4b6c      	ldr	r3, [pc, #432]	; (8001c38 <MX_GPIO_Init+0x204>)
 8001a88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a8c:	4a6a      	ldr	r2, [pc, #424]	; (8001c38 <MX_GPIO_Init+0x204>)
 8001a8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a96:	4b68      	ldr	r3, [pc, #416]	; (8001c38 <MX_GPIO_Init+0x204>)
 8001a98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001aa0:	613b      	str	r3, [r7, #16]
 8001aa2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aa4:	4b64      	ldr	r3, [pc, #400]	; (8001c38 <MX_GPIO_Init+0x204>)
 8001aa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aaa:	4a63      	ldr	r2, [pc, #396]	; (8001c38 <MX_GPIO_Init+0x204>)
 8001aac:	f043 0301 	orr.w	r3, r3, #1
 8001ab0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ab4:	4b60      	ldr	r3, [pc, #384]	; (8001c38 <MX_GPIO_Init+0x204>)
 8001ab6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aba:	f003 0301 	and.w	r3, r3, #1
 8001abe:	60fb      	str	r3, [r7, #12]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ac2:	4b5d      	ldr	r3, [pc, #372]	; (8001c38 <MX_GPIO_Init+0x204>)
 8001ac4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ac8:	4a5b      	ldr	r2, [pc, #364]	; (8001c38 <MX_GPIO_Init+0x204>)
 8001aca:	f043 0302 	orr.w	r3, r3, #2
 8001ace:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ad2:	4b59      	ldr	r3, [pc, #356]	; (8001c38 <MX_GPIO_Init+0x204>)
 8001ad4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ad8:	f003 0302 	and.w	r3, r3, #2
 8001adc:	60bb      	str	r3, [r7, #8]
 8001ade:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ae0:	4b55      	ldr	r3, [pc, #340]	; (8001c38 <MX_GPIO_Init+0x204>)
 8001ae2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ae6:	4a54      	ldr	r2, [pc, #336]	; (8001c38 <MX_GPIO_Init+0x204>)
 8001ae8:	f043 0308 	orr.w	r3, r3, #8
 8001aec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001af0:	4b51      	ldr	r3, [pc, #324]	; (8001c38 <MX_GPIO_Init+0x204>)
 8001af2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001af6:	f003 0308 	and.w	r3, r3, #8
 8001afa:	607b      	str	r3, [r7, #4]
 8001afc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SPI4_CS2_Pin|SPI4_CS1_Pin|SPI1_CS_Pin|SPI2_CS0_Pin
 8001afe:	2200      	movs	r2, #0
 8001b00:	f24f 0118 	movw	r1, #61464	; 0xf018
 8001b04:	484d      	ldr	r0, [pc, #308]	; (8001c3c <MX_GPIO_Init+0x208>)
 8001b06:	f005 fc01 	bl	800730c <HAL_GPIO_WritePin>
                          |SPI2_CS1_Pin|SPI2_CS2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_AUX_4_Pin|GPIO_AUX_3_Pin|GPIO_AUX_2_Pin|GPIO_AUX_1_Pin
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	f647 0190 	movw	r1, #30864	; 0x7890
 8001b10:	484b      	ldr	r0, [pc, #300]	; (8001c40 <MX_GPIO_Init+0x20c>)
 8001b12:	f005 fbfb 	bl	800730c <HAL_GPIO_WritePin>
                          |SPI3_CS0_Pin|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS1_GPIO_Port, SPI3_CS1_Pin, GPIO_PIN_RESET);
 8001b16:	2200      	movs	r2, #0
 8001b18:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b1c:	4849      	ldr	r0, [pc, #292]	; (8001c44 <MX_GPIO_Init+0x210>)
 8001b1e:	f005 fbf5 	bl	800730c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI4_CS2_Pin SPI4_CS1_Pin SPI1_CS_Pin SPI2_CS0_Pin
                           SPI2_CS1_Pin SPI2_CS2_Pin */
  GPIO_InitStruct.Pin = SPI4_CS2_Pin|SPI4_CS1_Pin|SPI1_CS_Pin|SPI2_CS0_Pin
 8001b22:	f24f 0318 	movw	r3, #61464	; 0xf018
 8001b26:	61fb      	str	r3, [r7, #28]
                          |SPI2_CS1_Pin|SPI2_CS2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b30:	2300      	movs	r3, #0
 8001b32:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b34:	f107 031c 	add.w	r3, r7, #28
 8001b38:	4619      	mov	r1, r3
 8001b3a:	4840      	ldr	r0, [pc, #256]	; (8001c3c <MX_GPIO_Init+0x208>)
 8001b3c:	f005 f92c 	bl	8006d98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b40:	2301      	movs	r3, #1
 8001b42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b44:	2302      	movs	r3, #2
 8001b46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b50:	2301      	movs	r3, #1
 8001b52:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b54:	f107 031c 	add.w	r3, r7, #28
 8001b58:	4619      	mov	r1, r3
 8001b5a:	483a      	ldr	r0, [pc, #232]	; (8001c44 <MX_GPIO_Init+0x210>)
 8001b5c:	f005 f91c 	bl	8006d98 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_AUX_4_Pin GPIO_AUX_3_Pin GPIO_AUX_2_Pin GPIO_AUX_1_Pin
                           SPI3_CS0_Pin PD7 */
  GPIO_InitStruct.Pin = GPIO_AUX_4_Pin|GPIO_AUX_3_Pin|GPIO_AUX_2_Pin|GPIO_AUX_1_Pin
 8001b60:	f647 0390 	movw	r3, #30864	; 0x7890
 8001b64:	61fb      	str	r3, [r7, #28]
                          |SPI3_CS0_Pin|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b66:	2301      	movs	r3, #1
 8001b68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b72:	f107 031c 	add.w	r3, r7, #28
 8001b76:	4619      	mov	r1, r3
 8001b78:	4831      	ldr	r0, [pc, #196]	; (8001c40 <MX_GPIO_Init+0x20c>)
 8001b7a:	f005 f90d 	bl	8006d98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b84:	2300      	movs	r3, #0
 8001b86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b8c:	f107 031c 	add.w	r3, r7, #28
 8001b90:	4619      	mov	r1, r3
 8001b92:	482d      	ldr	r0, [pc, #180]	; (8001c48 <MX_GPIO_Init+0x214>)
 8001b94:	f005 f900 	bl	8006d98 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_CS1_Pin */
  GPIO_InitStruct.Pin = SPI3_CS1_Pin;
 8001b98:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI3_CS1_GPIO_Port, &GPIO_InitStruct);
 8001baa:	f107 031c 	add.w	r3, r7, #28
 8001bae:	4619      	mov	r1, r3
 8001bb0:	4824      	ldr	r0, [pc, #144]	; (8001c44 <MX_GPIO_Init+0x210>)
 8001bb2:	f005 f8f1 	bl	8006d98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001bb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bbc:	2302      	movs	r3, #2
 8001bbe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001bc8:	2308      	movs	r3, #8
 8001bca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bcc:	f107 031c 	add.w	r3, r7, #28
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	481d      	ldr	r0, [pc, #116]	; (8001c48 <MX_GPIO_Init+0x214>)
 8001bd4:	f005 f8e0 	bl	8006d98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001bd8:	2304      	movs	r3, #4
 8001bda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be0:	2300      	movs	r3, #0
 8001be2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001be4:	f107 031c 	add.w	r3, r7, #28
 8001be8:	4619      	mov	r1, r3
 8001bea:	4815      	ldr	r0, [pc, #84]	; (8001c40 <MX_GPIO_Init+0x20c>)
 8001bec:	f005 f8d4 	bl	8006d98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001bf0:	2310      	movs	r3, #16
 8001bf2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf4:	2302      	movs	r3, #2
 8001bf6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001c00:	2306      	movs	r3, #6
 8001c02:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c04:	f107 031c 	add.w	r3, r7, #28
 8001c08:	4619      	mov	r1, r3
 8001c0a:	4810      	ldr	r0, [pc, #64]	; (8001c4c <MX_GPIO_Init+0x218>)
 8001c0c:	f005 f8c4 	bl	8006d98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001c10:	2320      	movs	r3, #32
 8001c12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c14:	2302      	movs	r3, #2
 8001c16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8001c20:	2307      	movs	r3, #7
 8001c22:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c24:	f107 031c 	add.w	r3, r7, #28
 8001c28:	4619      	mov	r1, r3
 8001c2a:	4808      	ldr	r0, [pc, #32]	; (8001c4c <MX_GPIO_Init+0x218>)
 8001c2c:	f005 f8b4 	bl	8006d98 <HAL_GPIO_Init>

}
 8001c30:	bf00      	nop
 8001c32:	3730      	adds	r7, #48	; 0x30
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	58024400 	.word	0x58024400
 8001c3c:	58021000 	.word	0x58021000
 8001c40:	58020c00 	.word	0x58020c00
 8001c44:	58020000 	.word	0x58020000
 8001c48:	58020800 	.word	0x58020800
 8001c4c:	58020400 	.word	0x58020400

08001c50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c54:	b672      	cpsid	i
}
 8001c56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c58:	e7fe      	b.n	8001c58 <Error_Handler+0x8>
	...

08001c5c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c62:	4b0a      	ldr	r3, [pc, #40]	; (8001c8c <HAL_MspInit+0x30>)
 8001c64:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001c68:	4a08      	ldr	r2, [pc, #32]	; (8001c8c <HAL_MspInit+0x30>)
 8001c6a:	f043 0302 	orr.w	r3, r3, #2
 8001c6e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001c72:	4b06      	ldr	r3, [pc, #24]	; (8001c8c <HAL_MspInit+0x30>)
 8001c74:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001c78:	f003 0302 	and.w	r3, r3, #2
 8001c7c:	607b      	str	r3, [r7, #4]
 8001c7e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c80:	bf00      	nop
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr
 8001c8c:	58024400 	.word	0x58024400

08001c90 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b090      	sub	sp, #64	; 0x40
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	601a      	str	r2, [r3, #0]
 8001ca0:	605a      	str	r2, [r3, #4]
 8001ca2:	609a      	str	r2, [r3, #8]
 8001ca4:	60da      	str	r2, [r3, #12]
 8001ca6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a79      	ldr	r2, [pc, #484]	; (8001e94 <HAL_ADC_MspInit+0x204>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d14e      	bne.n	8001d50 <HAL_ADC_MspInit+0xc0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001cb2:	4b79      	ldr	r3, [pc, #484]	; (8001e98 <HAL_ADC_MspInit+0x208>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	4a77      	ldr	r2, [pc, #476]	; (8001e98 <HAL_ADC_MspInit+0x208>)
 8001cba:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001cbc:	4b76      	ldr	r3, [pc, #472]	; (8001e98 <HAL_ADC_MspInit+0x208>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d10e      	bne.n	8001ce2 <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001cc4:	4b75      	ldr	r3, [pc, #468]	; (8001e9c <HAL_ADC_MspInit+0x20c>)
 8001cc6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001cca:	4a74      	ldr	r2, [pc, #464]	; (8001e9c <HAL_ADC_MspInit+0x20c>)
 8001ccc:	f043 0320 	orr.w	r3, r3, #32
 8001cd0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001cd4:	4b71      	ldr	r3, [pc, #452]	; (8001e9c <HAL_ADC_MspInit+0x20c>)
 8001cd6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001cda:	f003 0320 	and.w	r3, r3, #32
 8001cde:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ce2:	4b6e      	ldr	r3, [pc, #440]	; (8001e9c <HAL_ADC_MspInit+0x20c>)
 8001ce4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ce8:	4a6c      	ldr	r2, [pc, #432]	; (8001e9c <HAL_ADC_MspInit+0x20c>)
 8001cea:	f043 0304 	orr.w	r3, r3, #4
 8001cee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cf2:	4b6a      	ldr	r3, [pc, #424]	; (8001e9c <HAL_ADC_MspInit+0x20c>)
 8001cf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cf8:	f003 0304 	and.w	r3, r3, #4
 8001cfc:	627b      	str	r3, [r7, #36]	; 0x24
 8001cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d00:	4b66      	ldr	r3, [pc, #408]	; (8001e9c <HAL_ADC_MspInit+0x20c>)
 8001d02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d06:	4a65      	ldr	r2, [pc, #404]	; (8001e9c <HAL_ADC_MspInit+0x20c>)
 8001d08:	f043 0302 	orr.w	r3, r3, #2
 8001d0c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d10:	4b62      	ldr	r3, [pc, #392]	; (8001e9c <HAL_ADC_MspInit+0x20c>)
 8001d12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d16:	f003 0302 	and.w	r3, r3, #2
 8001d1a:	623b      	str	r3, [r7, #32]
 8001d1c:	6a3b      	ldr	r3, [r7, #32]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INN4
    PB0     ------> ADC1_INN5
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001d1e:	2333      	movs	r3, #51	; 0x33
 8001d20:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d22:	2303      	movs	r3, #3
 8001d24:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d26:	2300      	movs	r3, #0
 8001d28:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d2e:	4619      	mov	r1, r3
 8001d30:	485b      	ldr	r0, [pc, #364]	; (8001ea0 <HAL_ADC_MspInit+0x210>)
 8001d32:	f005 f831 	bl	8006d98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001d36:	2303      	movs	r3, #3
 8001d38:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d46:	4619      	mov	r1, r3
 8001d48:	4856      	ldr	r0, [pc, #344]	; (8001ea4 <HAL_ADC_MspInit+0x214>)
 8001d4a:	f005 f825 	bl	8006d98 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001d4e:	e09d      	b.n	8001e8c <HAL_ADC_MspInit+0x1fc>
  else if(hadc->Instance==ADC2)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a54      	ldr	r2, [pc, #336]	; (8001ea8 <HAL_ADC_MspInit+0x218>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d169      	bne.n	8001e2e <HAL_ADC_MspInit+0x19e>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001d5a:	4b4f      	ldr	r3, [pc, #316]	; (8001e98 <HAL_ADC_MspInit+0x208>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	3301      	adds	r3, #1
 8001d60:	4a4d      	ldr	r2, [pc, #308]	; (8001e98 <HAL_ADC_MspInit+0x208>)
 8001d62:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001d64:	4b4c      	ldr	r3, [pc, #304]	; (8001e98 <HAL_ADC_MspInit+0x208>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d10e      	bne.n	8001d8a <HAL_ADC_MspInit+0xfa>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001d6c:	4b4b      	ldr	r3, [pc, #300]	; (8001e9c <HAL_ADC_MspInit+0x20c>)
 8001d6e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001d72:	4a4a      	ldr	r2, [pc, #296]	; (8001e9c <HAL_ADC_MspInit+0x20c>)
 8001d74:	f043 0320 	orr.w	r3, r3, #32
 8001d78:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001d7c:	4b47      	ldr	r3, [pc, #284]	; (8001e9c <HAL_ADC_MspInit+0x20c>)
 8001d7e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001d82:	f003 0320 	and.w	r3, r3, #32
 8001d86:	61fb      	str	r3, [r7, #28]
 8001d88:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d8a:	4b44      	ldr	r3, [pc, #272]	; (8001e9c <HAL_ADC_MspInit+0x20c>)
 8001d8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d90:	4a42      	ldr	r2, [pc, #264]	; (8001e9c <HAL_ADC_MspInit+0x20c>)
 8001d92:	f043 0304 	orr.w	r3, r3, #4
 8001d96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d9a:	4b40      	ldr	r3, [pc, #256]	; (8001e9c <HAL_ADC_MspInit+0x20c>)
 8001d9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001da0:	f003 0304 	and.w	r3, r3, #4
 8001da4:	61bb      	str	r3, [r7, #24]
 8001da6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001da8:	4b3c      	ldr	r3, [pc, #240]	; (8001e9c <HAL_ADC_MspInit+0x20c>)
 8001daa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dae:	4a3b      	ldr	r2, [pc, #236]	; (8001e9c <HAL_ADC_MspInit+0x20c>)
 8001db0:	f043 0301 	orr.w	r3, r3, #1
 8001db4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001db8:	4b38      	ldr	r3, [pc, #224]	; (8001e9c <HAL_ADC_MspInit+0x20c>)
 8001dba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dbe:	f003 0301 	and.w	r3, r3, #1
 8001dc2:	617b      	str	r3, [r7, #20]
 8001dc4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dc6:	4b35      	ldr	r3, [pc, #212]	; (8001e9c <HAL_ADC_MspInit+0x20c>)
 8001dc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dcc:	4a33      	ldr	r2, [pc, #204]	; (8001e9c <HAL_ADC_MspInit+0x20c>)
 8001dce:	f043 0302 	orr.w	r3, r3, #2
 8001dd2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dd6:	4b31      	ldr	r3, [pc, #196]	; (8001e9c <HAL_ADC_MspInit+0x20c>)
 8001dd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ddc:	f003 0302 	and.w	r3, r3, #2
 8001de0:	613b      	str	r3, [r7, #16]
 8001de2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001de4:	2333      	movs	r3, #51	; 0x33
 8001de6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001de8:	2303      	movs	r3, #3
 8001dea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dec:	2300      	movs	r3, #0
 8001dee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001df0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001df4:	4619      	mov	r1, r3
 8001df6:	482a      	ldr	r0, [pc, #168]	; (8001ea0 <HAL_ADC_MspInit+0x210>)
 8001df8:	f004 ffce 	bl	8006d98 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001dfc:	2304      	movs	r3, #4
 8001dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e00:	2303      	movs	r3, #3
 8001e02:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e04:	2300      	movs	r3, #0
 8001e06:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	4827      	ldr	r0, [pc, #156]	; (8001eac <HAL_ADC_MspInit+0x21c>)
 8001e10:	f004 ffc2 	bl	8006d98 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e14:	2303      	movs	r3, #3
 8001e16:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e24:	4619      	mov	r1, r3
 8001e26:	481f      	ldr	r0, [pc, #124]	; (8001ea4 <HAL_ADC_MspInit+0x214>)
 8001e28:	f004 ffb6 	bl	8006d98 <HAL_GPIO_Init>
}
 8001e2c:	e02e      	b.n	8001e8c <HAL_ADC_MspInit+0x1fc>
  else if(hadc->Instance==ADC3)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a1f      	ldr	r2, [pc, #124]	; (8001eb0 <HAL_ADC_MspInit+0x220>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d129      	bne.n	8001e8c <HAL_ADC_MspInit+0x1fc>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001e38:	4b18      	ldr	r3, [pc, #96]	; (8001e9c <HAL_ADC_MspInit+0x20c>)
 8001e3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e3e:	4a17      	ldr	r2, [pc, #92]	; (8001e9c <HAL_ADC_MspInit+0x20c>)
 8001e40:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e48:	4b14      	ldr	r3, [pc, #80]	; (8001e9c <HAL_ADC_MspInit+0x20c>)
 8001e4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e4e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e52:	60fb      	str	r3, [r7, #12]
 8001e54:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e56:	4b11      	ldr	r3, [pc, #68]	; (8001e9c <HAL_ADC_MspInit+0x20c>)
 8001e58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e5c:	4a0f      	ldr	r2, [pc, #60]	; (8001e9c <HAL_ADC_MspInit+0x20c>)
 8001e5e:	f043 0304 	orr.w	r3, r3, #4
 8001e62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e66:	4b0d      	ldr	r3, [pc, #52]	; (8001e9c <HAL_ADC_MspInit+0x20c>)
 8001e68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e6c:	f003 0304 	and.w	r3, r3, #4
 8001e70:	60bb      	str	r3, [r7, #8]
 8001e72:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e74:	2303      	movs	r3, #3
 8001e76:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e84:	4619      	mov	r1, r3
 8001e86:	4806      	ldr	r0, [pc, #24]	; (8001ea0 <HAL_ADC_MspInit+0x210>)
 8001e88:	f004 ff86 	bl	8006d98 <HAL_GPIO_Init>
}
 8001e8c:	bf00      	nop
 8001e8e:	3740      	adds	r7, #64	; 0x40
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	40022000 	.word	0x40022000
 8001e98:	240001fc 	.word	0x240001fc
 8001e9c:	58024400 	.word	0x58024400
 8001ea0:	58020800 	.word	0x58020800
 8001ea4:	58020400 	.word	0x58020400
 8001ea8:	40022100 	.word	0x40022100
 8001eac:	58020000 	.word	0x58020000
 8001eb0:	58026000 	.word	0x58026000

08001eb4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b08a      	sub	sp, #40	; 0x28
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ebc:	f107 0314 	add.w	r3, r7, #20
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	601a      	str	r2, [r3, #0]
 8001ec4:	605a      	str	r2, [r3, #4]
 8001ec6:	609a      	str	r2, [r3, #8]
 8001ec8:	60da      	str	r2, [r3, #12]
 8001eca:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a18      	ldr	r2, [pc, #96]	; (8001f34 <HAL_DAC_MspInit+0x80>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d129      	bne.n	8001f2a <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8001ed6:	4b18      	ldr	r3, [pc, #96]	; (8001f38 <HAL_DAC_MspInit+0x84>)
 8001ed8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001edc:	4a16      	ldr	r2, [pc, #88]	; (8001f38 <HAL_DAC_MspInit+0x84>)
 8001ede:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001ee2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001ee6:	4b14      	ldr	r3, [pc, #80]	; (8001f38 <HAL_DAC_MspInit+0x84>)
 8001ee8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001eec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ef0:	613b      	str	r3, [r7, #16]
 8001ef2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ef4:	4b10      	ldr	r3, [pc, #64]	; (8001f38 <HAL_DAC_MspInit+0x84>)
 8001ef6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001efa:	4a0f      	ldr	r2, [pc, #60]	; (8001f38 <HAL_DAC_MspInit+0x84>)
 8001efc:	f043 0301 	orr.w	r3, r3, #1
 8001f00:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f04:	4b0c      	ldr	r3, [pc, #48]	; (8001f38 <HAL_DAC_MspInit+0x84>)
 8001f06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f0a:	f003 0301 	and.w	r3, r3, #1
 8001f0e:	60fb      	str	r3, [r7, #12]
 8001f10:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001f12:	2330      	movs	r3, #48	; 0x30
 8001f14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f16:	2303      	movs	r3, #3
 8001f18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f1e:	f107 0314 	add.w	r3, r7, #20
 8001f22:	4619      	mov	r1, r3
 8001f24:	4805      	ldr	r0, [pc, #20]	; (8001f3c <HAL_DAC_MspInit+0x88>)
 8001f26:	f004 ff37 	bl	8006d98 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001f2a:	bf00      	nop
 8001f2c:	3728      	adds	r7, #40	; 0x28
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	40007400 	.word	0x40007400
 8001f38:	58024400 	.word	0x58024400
 8001f3c:	58020000 	.word	0x58020000

08001f40 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b0ba      	sub	sp, #232	; 0xe8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f48:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	605a      	str	r2, [r3, #4]
 8001f52:	609a      	str	r2, [r3, #8]
 8001f54:	60da      	str	r2, [r3, #12]
 8001f56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f58:	f107 0318 	add.w	r3, r7, #24
 8001f5c:	22bc      	movs	r2, #188	; 0xbc
 8001f5e:	2100      	movs	r1, #0
 8001f60:	4618      	mov	r0, r3
 8001f62:	f00c fc65 	bl	800e830 <memset>
  if(hfdcan->Instance==FDCAN1)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a54      	ldr	r2, [pc, #336]	; (80020bc <HAL_FDCAN_MspInit+0x17c>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d14e      	bne.n	800200e <HAL_FDCAN_MspInit+0xce>
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001f70:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f74:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001f76:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001f7a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f7e:	f107 0318 	add.w	r3, r7, #24
 8001f82:	4618      	mov	r0, r3
 8001f84:	f007 fa22 	bl	80093cc <HAL_RCCEx_PeriphCLKConfig>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <HAL_FDCAN_MspInit+0x52>
    {
      Error_Handler();
 8001f8e:	f7ff fe5f 	bl	8001c50 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001f92:	4b4b      	ldr	r3, [pc, #300]	; (80020c0 <HAL_FDCAN_MspInit+0x180>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	3301      	adds	r3, #1
 8001f98:	4a49      	ldr	r2, [pc, #292]	; (80020c0 <HAL_FDCAN_MspInit+0x180>)
 8001f9a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001f9c:	4b48      	ldr	r3, [pc, #288]	; (80020c0 <HAL_FDCAN_MspInit+0x180>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d10e      	bne.n	8001fc2 <HAL_FDCAN_MspInit+0x82>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001fa4:	4b47      	ldr	r3, [pc, #284]	; (80020c4 <HAL_FDCAN_MspInit+0x184>)
 8001fa6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001faa:	4a46      	ldr	r2, [pc, #280]	; (80020c4 <HAL_FDCAN_MspInit+0x184>)
 8001fac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fb0:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001fb4:	4b43      	ldr	r3, [pc, #268]	; (80020c4 <HAL_FDCAN_MspInit+0x184>)
 8001fb6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001fba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fbe:	617b      	str	r3, [r7, #20]
 8001fc0:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fc2:	4b40      	ldr	r3, [pc, #256]	; (80020c4 <HAL_FDCAN_MspInit+0x184>)
 8001fc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fc8:	4a3e      	ldr	r2, [pc, #248]	; (80020c4 <HAL_FDCAN_MspInit+0x184>)
 8001fca:	f043 0301 	orr.w	r3, r3, #1
 8001fce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fd2:	4b3c      	ldr	r3, [pc, #240]	; (80020c4 <HAL_FDCAN_MspInit+0x184>)
 8001fd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fd8:	f003 0301 	and.w	r3, r3, #1
 8001fdc:	613b      	str	r3, [r7, #16]
 8001fde:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001fe0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001fe4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe8:	2302      	movs	r3, #2
 8001fea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001ffa:	2309      	movs	r3, #9
 8001ffc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002000:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002004:	4619      	mov	r1, r3
 8002006:	4830      	ldr	r0, [pc, #192]	; (80020c8 <HAL_FDCAN_MspInit+0x188>)
 8002008:	f004 fec6 	bl	8006d98 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 800200c:	e052      	b.n	80020b4 <HAL_FDCAN_MspInit+0x174>
  else if(hfdcan->Instance==FDCAN2)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a2e      	ldr	r2, [pc, #184]	; (80020cc <HAL_FDCAN_MspInit+0x18c>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d14d      	bne.n	80020b4 <HAL_FDCAN_MspInit+0x174>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002018:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800201c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 800201e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002022:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002026:	f107 0318 	add.w	r3, r7, #24
 800202a:	4618      	mov	r0, r3
 800202c:	f007 f9ce 	bl	80093cc <HAL_RCCEx_PeriphCLKConfig>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <HAL_FDCAN_MspInit+0xfa>
      Error_Handler();
 8002036:	f7ff fe0b 	bl	8001c50 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800203a:	4b21      	ldr	r3, [pc, #132]	; (80020c0 <HAL_FDCAN_MspInit+0x180>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	3301      	adds	r3, #1
 8002040:	4a1f      	ldr	r2, [pc, #124]	; (80020c0 <HAL_FDCAN_MspInit+0x180>)
 8002042:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8002044:	4b1e      	ldr	r3, [pc, #120]	; (80020c0 <HAL_FDCAN_MspInit+0x180>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2b01      	cmp	r3, #1
 800204a:	d10e      	bne.n	800206a <HAL_FDCAN_MspInit+0x12a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 800204c:	4b1d      	ldr	r3, [pc, #116]	; (80020c4 <HAL_FDCAN_MspInit+0x184>)
 800204e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002052:	4a1c      	ldr	r2, [pc, #112]	; (80020c4 <HAL_FDCAN_MspInit+0x184>)
 8002054:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002058:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800205c:	4b19      	ldr	r3, [pc, #100]	; (80020c4 <HAL_FDCAN_MspInit+0x184>)
 800205e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002066:	60fb      	str	r3, [r7, #12]
 8002068:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800206a:	4b16      	ldr	r3, [pc, #88]	; (80020c4 <HAL_FDCAN_MspInit+0x184>)
 800206c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002070:	4a14      	ldr	r2, [pc, #80]	; (80020c4 <HAL_FDCAN_MspInit+0x184>)
 8002072:	f043 0302 	orr.w	r3, r3, #2
 8002076:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800207a:	4b12      	ldr	r3, [pc, #72]	; (80020c4 <HAL_FDCAN_MspInit+0x184>)
 800207c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002080:	f003 0302 	and.w	r3, r3, #2
 8002084:	60bb      	str	r3, [r7, #8]
 8002086:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002088:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800208c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002090:	2302      	movs	r3, #2
 8002092:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002096:	2300      	movs	r3, #0
 8002098:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800209c:	2300      	movs	r3, #0
 800209e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 80020a2:	2309      	movs	r3, #9
 80020a4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020a8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80020ac:	4619      	mov	r1, r3
 80020ae:	4808      	ldr	r0, [pc, #32]	; (80020d0 <HAL_FDCAN_MspInit+0x190>)
 80020b0:	f004 fe72 	bl	8006d98 <HAL_GPIO_Init>
}
 80020b4:	bf00      	nop
 80020b6:	37e8      	adds	r7, #232	; 0xe8
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	4000a000 	.word	0x4000a000
 80020c0:	24000200 	.word	0x24000200
 80020c4:	58024400 	.word	0x58024400
 80020c8:	58020000 	.word	0x58020000
 80020cc:	4000a400 	.word	0x4000a400
 80020d0:	58020400 	.word	0x58020400

080020d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b0bc      	sub	sp, #240	; 0xf0
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020dc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80020e0:	2200      	movs	r2, #0
 80020e2:	601a      	str	r2, [r3, #0]
 80020e4:	605a      	str	r2, [r3, #4]
 80020e6:	609a      	str	r2, [r3, #8]
 80020e8:	60da      	str	r2, [r3, #12]
 80020ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020ec:	f107 0320 	add.w	r3, r7, #32
 80020f0:	22bc      	movs	r2, #188	; 0xbc
 80020f2:	2100      	movs	r1, #0
 80020f4:	4618      	mov	r0, r3
 80020f6:	f00c fb9b 	bl	800e830 <memset>
  if(hi2c->Instance==I2C1)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a6d      	ldr	r2, [pc, #436]	; (80022b4 <HAL_I2C_MspInit+0x1e0>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d142      	bne.n	800218a <HAL_I2C_MspInit+0xb6>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002104:	2308      	movs	r3, #8
 8002106:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8002108:	2300      	movs	r3, #0
 800210a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800210e:	f107 0320 	add.w	r3, r7, #32
 8002112:	4618      	mov	r0, r3
 8002114:	f007 f95a 	bl	80093cc <HAL_RCCEx_PeriphCLKConfig>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800211e:	f7ff fd97 	bl	8001c50 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002122:	4b65      	ldr	r3, [pc, #404]	; (80022b8 <HAL_I2C_MspInit+0x1e4>)
 8002124:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002128:	4a63      	ldr	r2, [pc, #396]	; (80022b8 <HAL_I2C_MspInit+0x1e4>)
 800212a:	f043 0302 	orr.w	r3, r3, #2
 800212e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002132:	4b61      	ldr	r3, [pc, #388]	; (80022b8 <HAL_I2C_MspInit+0x1e4>)
 8002134:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002138:	f003 0302 	and.w	r3, r3, #2
 800213c:	61fb      	str	r3, [r7, #28]
 800213e:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002140:	23c0      	movs	r3, #192	; 0xc0
 8002142:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002146:	2312      	movs	r3, #18
 8002148:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214c:	2300      	movs	r3, #0
 800214e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002152:	2300      	movs	r3, #0
 8002154:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002158:	2304      	movs	r3, #4
 800215a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800215e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002162:	4619      	mov	r1, r3
 8002164:	4855      	ldr	r0, [pc, #340]	; (80022bc <HAL_I2C_MspInit+0x1e8>)
 8002166:	f004 fe17 	bl	8006d98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800216a:	4b53      	ldr	r3, [pc, #332]	; (80022b8 <HAL_I2C_MspInit+0x1e4>)
 800216c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002170:	4a51      	ldr	r2, [pc, #324]	; (80022b8 <HAL_I2C_MspInit+0x1e4>)
 8002172:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002176:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800217a:	4b4f      	ldr	r3, [pc, #316]	; (80022b8 <HAL_I2C_MspInit+0x1e4>)
 800217c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002180:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002184:	61bb      	str	r3, [r7, #24]
 8002186:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8002188:	e090      	b.n	80022ac <HAL_I2C_MspInit+0x1d8>
  else if(hi2c->Instance==I2C2)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a4c      	ldr	r2, [pc, #304]	; (80022c0 <HAL_I2C_MspInit+0x1ec>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d143      	bne.n	800221c <HAL_I2C_MspInit+0x148>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002194:	2308      	movs	r3, #8
 8002196:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8002198:	2300      	movs	r3, #0
 800219a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800219e:	f107 0320 	add.w	r3, r7, #32
 80021a2:	4618      	mov	r0, r3
 80021a4:	f007 f912 	bl	80093cc <HAL_RCCEx_PeriphCLKConfig>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d001      	beq.n	80021b2 <HAL_I2C_MspInit+0xde>
      Error_Handler();
 80021ae:	f7ff fd4f 	bl	8001c50 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021b2:	4b41      	ldr	r3, [pc, #260]	; (80022b8 <HAL_I2C_MspInit+0x1e4>)
 80021b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021b8:	4a3f      	ldr	r2, [pc, #252]	; (80022b8 <HAL_I2C_MspInit+0x1e4>)
 80021ba:	f043 0302 	orr.w	r3, r3, #2
 80021be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021c2:	4b3d      	ldr	r3, [pc, #244]	; (80022b8 <HAL_I2C_MspInit+0x1e4>)
 80021c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021c8:	f003 0302 	and.w	r3, r3, #2
 80021cc:	617b      	str	r3, [r7, #20]
 80021ce:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80021d0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80021d4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021d8:	2312      	movs	r3, #18
 80021da:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021de:	2300      	movs	r3, #0
 80021e0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021e4:	2300      	movs	r3, #0
 80021e6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80021ea:	2304      	movs	r3, #4
 80021ec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021f0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80021f4:	4619      	mov	r1, r3
 80021f6:	4831      	ldr	r0, [pc, #196]	; (80022bc <HAL_I2C_MspInit+0x1e8>)
 80021f8:	f004 fdce 	bl	8006d98 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80021fc:	4b2e      	ldr	r3, [pc, #184]	; (80022b8 <HAL_I2C_MspInit+0x1e4>)
 80021fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002202:	4a2d      	ldr	r2, [pc, #180]	; (80022b8 <HAL_I2C_MspInit+0x1e4>)
 8002204:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002208:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800220c:	4b2a      	ldr	r3, [pc, #168]	; (80022b8 <HAL_I2C_MspInit+0x1e4>)
 800220e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002212:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002216:	613b      	str	r3, [r7, #16]
 8002218:	693b      	ldr	r3, [r7, #16]
}
 800221a:	e047      	b.n	80022ac <HAL_I2C_MspInit+0x1d8>
  else if(hi2c->Instance==I2C4)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a28      	ldr	r2, [pc, #160]	; (80022c4 <HAL_I2C_MspInit+0x1f0>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d142      	bne.n	80022ac <HAL_I2C_MspInit+0x1d8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8002226:	2310      	movs	r3, #16
 8002228:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 800222a:	2300      	movs	r3, #0
 800222c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002230:	f107 0320 	add.w	r3, r7, #32
 8002234:	4618      	mov	r0, r3
 8002236:	f007 f8c9 	bl	80093cc <HAL_RCCEx_PeriphCLKConfig>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d001      	beq.n	8002244 <HAL_I2C_MspInit+0x170>
      Error_Handler();
 8002240:	f7ff fd06 	bl	8001c50 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002244:	4b1c      	ldr	r3, [pc, #112]	; (80022b8 <HAL_I2C_MspInit+0x1e4>)
 8002246:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800224a:	4a1b      	ldr	r2, [pc, #108]	; (80022b8 <HAL_I2C_MspInit+0x1e4>)
 800224c:	f043 0302 	orr.w	r3, r3, #2
 8002250:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002254:	4b18      	ldr	r3, [pc, #96]	; (80022b8 <HAL_I2C_MspInit+0x1e4>)
 8002256:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800225a:	f003 0302 	and.w	r3, r3, #2
 800225e:	60fb      	str	r3, [r7, #12]
 8002260:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002262:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002266:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800226a:	2312      	movs	r3, #18
 800226c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002270:	2300      	movs	r3, #0
 8002272:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002276:	2300      	movs	r3, #0
 8002278:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C4;
 800227c:	2306      	movs	r3, #6
 800227e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002282:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002286:	4619      	mov	r1, r3
 8002288:	480c      	ldr	r0, [pc, #48]	; (80022bc <HAL_I2C_MspInit+0x1e8>)
 800228a:	f004 fd85 	bl	8006d98 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 800228e:	4b0a      	ldr	r3, [pc, #40]	; (80022b8 <HAL_I2C_MspInit+0x1e4>)
 8002290:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002294:	4a08      	ldr	r2, [pc, #32]	; (80022b8 <HAL_I2C_MspInit+0x1e4>)
 8002296:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800229a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800229e:	4b06      	ldr	r3, [pc, #24]	; (80022b8 <HAL_I2C_MspInit+0x1e4>)
 80022a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80022a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022a8:	60bb      	str	r3, [r7, #8]
 80022aa:	68bb      	ldr	r3, [r7, #8]
}
 80022ac:	bf00      	nop
 80022ae:	37f0      	adds	r7, #240	; 0xf0
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	40005400 	.word	0x40005400
 80022b8:	58024400 	.word	0x58024400
 80022bc:	58020400 	.word	0x58020400
 80022c0:	40005800 	.word	0x40005800
 80022c4:	58001c00 	.word	0x58001c00

080022c8 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a23      	ldr	r2, [pc, #140]	; (8002364 <HAL_I2C_MspDeInit+0x9c>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d110      	bne.n	80022fc <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80022da:	4b23      	ldr	r3, [pc, #140]	; (8002368 <HAL_I2C_MspDeInit+0xa0>)
 80022dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022e0:	4a21      	ldr	r2, [pc, #132]	; (8002368 <HAL_I2C_MspDeInit+0xa0>)
 80022e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80022e6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 80022ea:	2140      	movs	r1, #64	; 0x40
 80022ec:	481f      	ldr	r0, [pc, #124]	; (800236c <HAL_I2C_MspDeInit+0xa4>)
 80022ee:	f004 ff03 	bl	80070f8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 80022f2:	2180      	movs	r1, #128	; 0x80
 80022f4:	481d      	ldr	r0, [pc, #116]	; (800236c <HAL_I2C_MspDeInit+0xa4>)
 80022f6:	f004 feff 	bl	80070f8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C4_MspDeInit 1 */

  /* USER CODE END I2C4_MspDeInit 1 */
  }

}
 80022fa:	e02e      	b.n	800235a <HAL_I2C_MspDeInit+0x92>
  else if(hi2c->Instance==I2C2)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a1b      	ldr	r2, [pc, #108]	; (8002370 <HAL_I2C_MspDeInit+0xa8>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d112      	bne.n	800232c <HAL_I2C_MspDeInit+0x64>
    __HAL_RCC_I2C2_CLK_DISABLE();
 8002306:	4b18      	ldr	r3, [pc, #96]	; (8002368 <HAL_I2C_MspDeInit+0xa0>)
 8002308:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800230c:	4a16      	ldr	r2, [pc, #88]	; (8002368 <HAL_I2C_MspDeInit+0xa0>)
 800230e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002312:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8002316:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800231a:	4814      	ldr	r0, [pc, #80]	; (800236c <HAL_I2C_MspDeInit+0xa4>)
 800231c:	f004 feec 	bl	80070f8 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 8002320:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002324:	4811      	ldr	r0, [pc, #68]	; (800236c <HAL_I2C_MspDeInit+0xa4>)
 8002326:	f004 fee7 	bl	80070f8 <HAL_GPIO_DeInit>
}
 800232a:	e016      	b.n	800235a <HAL_I2C_MspDeInit+0x92>
  else if(hi2c->Instance==I2C4)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a10      	ldr	r2, [pc, #64]	; (8002374 <HAL_I2C_MspDeInit+0xac>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d111      	bne.n	800235a <HAL_I2C_MspDeInit+0x92>
    __HAL_RCC_I2C4_CLK_DISABLE();
 8002336:	4b0c      	ldr	r3, [pc, #48]	; (8002368 <HAL_I2C_MspDeInit+0xa0>)
 8002338:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800233c:	4a0a      	ldr	r2, [pc, #40]	; (8002368 <HAL_I2C_MspDeInit+0xa0>)
 800233e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002342:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8002346:	f44f 7180 	mov.w	r1, #256	; 0x100
 800234a:	4808      	ldr	r0, [pc, #32]	; (800236c <HAL_I2C_MspDeInit+0xa4>)
 800234c:	f004 fed4 	bl	80070f8 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8002350:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002354:	4805      	ldr	r0, [pc, #20]	; (800236c <HAL_I2C_MspDeInit+0xa4>)
 8002356:	f004 fecf 	bl	80070f8 <HAL_GPIO_DeInit>
}
 800235a:	bf00      	nop
 800235c:	3708      	adds	r7, #8
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	40005400 	.word	0x40005400
 8002368:	58024400 	.word	0x58024400
 800236c:	58020400 	.word	0x58020400
 8002370:	40005800 	.word	0x40005800
 8002374:	58001c00 	.word	0x58001c00

08002378 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b0be      	sub	sp, #248	; 0xf8
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002380:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002384:	2200      	movs	r2, #0
 8002386:	601a      	str	r2, [r3, #0]
 8002388:	605a      	str	r2, [r3, #4]
 800238a:	609a      	str	r2, [r3, #8]
 800238c:	60da      	str	r2, [r3, #12]
 800238e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002390:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002394:	22bc      	movs	r2, #188	; 0xbc
 8002396:	2100      	movs	r1, #0
 8002398:	4618      	mov	r0, r3
 800239a:	f00c fa49 	bl	800e830 <memset>
  if(huart->Instance==LPUART1)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a91      	ldr	r2, [pc, #580]	; (80025e8 <HAL_UART_MspInit+0x270>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d143      	bne.n	8002430 <HAL_UART_MspInit+0xb8>
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80023a8:	2304      	movs	r3, #4
 80023aa:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_D3PCLK1;
 80023ac:	2300      	movs	r3, #0
 80023ae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023b6:	4618      	mov	r0, r3
 80023b8:	f007 f808 	bl	80093cc <HAL_RCCEx_PeriphCLKConfig>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d001      	beq.n	80023c6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80023c2:	f7ff fc45 	bl	8001c50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80023c6:	4b89      	ldr	r3, [pc, #548]	; (80025ec <HAL_UART_MspInit+0x274>)
 80023c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80023cc:	4a87      	ldr	r2, [pc, #540]	; (80025ec <HAL_UART_MspInit+0x274>)
 80023ce:	f043 0308 	orr.w	r3, r3, #8
 80023d2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80023d6:	4b85      	ldr	r3, [pc, #532]	; (80025ec <HAL_UART_MspInit+0x274>)
 80023d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80023dc:	f003 0308 	and.w	r3, r3, #8
 80023e0:	627b      	str	r3, [r7, #36]	; 0x24
 80023e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023e4:	4b81      	ldr	r3, [pc, #516]	; (80025ec <HAL_UART_MspInit+0x274>)
 80023e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023ea:	4a80      	ldr	r2, [pc, #512]	; (80025ec <HAL_UART_MspInit+0x274>)
 80023ec:	f043 0301 	orr.w	r3, r3, #1
 80023f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023f4:	4b7d      	ldr	r3, [pc, #500]	; (80025ec <HAL_UART_MspInit+0x274>)
 80023f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023fa:	f003 0301 	and.w	r3, r3, #1
 80023fe:	623b      	str	r3, [r7, #32]
 8002400:	6a3b      	ldr	r3, [r7, #32]
    /**LPUART1 GPIO Configuration
    PA9     ------> LPUART1_TX
    PA10     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002402:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002406:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800240a:	2302      	movs	r3, #2
 800240c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002410:	2300      	movs	r3, #0
 8002412:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002416:	2300      	movs	r3, #0
 8002418:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF3_LPUART;
 800241c:	2303      	movs	r3, #3
 800241e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002422:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002426:	4619      	mov	r1, r3
 8002428:	4871      	ldr	r0, [pc, #452]	; (80025f0 <HAL_UART_MspInit+0x278>)
 800242a:	f004 fcb5 	bl	8006d98 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800242e:	e0d6      	b.n	80025de <HAL_UART_MspInit+0x266>
  else if(huart->Instance==UART4)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a6f      	ldr	r2, [pc, #444]	; (80025f4 <HAL_UART_MspInit+0x27c>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d142      	bne.n	80024c0 <HAL_UART_MspInit+0x148>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800243a:	2302      	movs	r3, #2
 800243c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800243e:	2300      	movs	r3, #0
 8002440:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002444:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002448:	4618      	mov	r0, r3
 800244a:	f006 ffbf 	bl	80093cc <HAL_RCCEx_PeriphCLKConfig>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d001      	beq.n	8002458 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8002454:	f7ff fbfc 	bl	8001c50 <Error_Handler>
    __HAL_RCC_UART4_CLK_ENABLE();
 8002458:	4b64      	ldr	r3, [pc, #400]	; (80025ec <HAL_UART_MspInit+0x274>)
 800245a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800245e:	4a63      	ldr	r2, [pc, #396]	; (80025ec <HAL_UART_MspInit+0x274>)
 8002460:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002464:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002468:	4b60      	ldr	r3, [pc, #384]	; (80025ec <HAL_UART_MspInit+0x274>)
 800246a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800246e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002472:	61fb      	str	r3, [r7, #28]
 8002474:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002476:	4b5d      	ldr	r3, [pc, #372]	; (80025ec <HAL_UART_MspInit+0x274>)
 8002478:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800247c:	4a5b      	ldr	r2, [pc, #364]	; (80025ec <HAL_UART_MspInit+0x274>)
 800247e:	f043 0308 	orr.w	r3, r3, #8
 8002482:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002486:	4b59      	ldr	r3, [pc, #356]	; (80025ec <HAL_UART_MspInit+0x274>)
 8002488:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800248c:	f003 0308 	and.w	r3, r3, #8
 8002490:	61bb      	str	r3, [r7, #24]
 8002492:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002494:	2303      	movs	r3, #3
 8002496:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800249a:	2302      	movs	r3, #2
 800249c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a0:	2300      	movs	r3, #0
 80024a2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024a6:	2300      	movs	r3, #0
 80024a8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80024ac:	2308      	movs	r3, #8
 80024ae:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024b2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80024b6:	4619      	mov	r1, r3
 80024b8:	484f      	ldr	r0, [pc, #316]	; (80025f8 <HAL_UART_MspInit+0x280>)
 80024ba:	f004 fc6d 	bl	8006d98 <HAL_GPIO_Init>
}
 80024be:	e08e      	b.n	80025de <HAL_UART_MspInit+0x266>
  else if(huart->Instance==UART8)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a4d      	ldr	r2, [pc, #308]	; (80025fc <HAL_UART_MspInit+0x284>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d142      	bne.n	8002550 <HAL_UART_MspInit+0x1d8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 80024ca:	2302      	movs	r3, #2
 80024cc:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80024ce:	2300      	movs	r3, #0
 80024d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024d8:	4618      	mov	r0, r3
 80024da:	f006 ff77 	bl	80093cc <HAL_RCCEx_PeriphCLKConfig>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d001      	beq.n	80024e8 <HAL_UART_MspInit+0x170>
      Error_Handler();
 80024e4:	f7ff fbb4 	bl	8001c50 <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 80024e8:	4b40      	ldr	r3, [pc, #256]	; (80025ec <HAL_UART_MspInit+0x274>)
 80024ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80024ee:	4a3f      	ldr	r2, [pc, #252]	; (80025ec <HAL_UART_MspInit+0x274>)
 80024f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80024f4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80024f8:	4b3c      	ldr	r3, [pc, #240]	; (80025ec <HAL_UART_MspInit+0x274>)
 80024fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80024fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002502:	617b      	str	r3, [r7, #20]
 8002504:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002506:	4b39      	ldr	r3, [pc, #228]	; (80025ec <HAL_UART_MspInit+0x274>)
 8002508:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800250c:	4a37      	ldr	r2, [pc, #220]	; (80025ec <HAL_UART_MspInit+0x274>)
 800250e:	f043 0310 	orr.w	r3, r3, #16
 8002512:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002516:	4b35      	ldr	r3, [pc, #212]	; (80025ec <HAL_UART_MspInit+0x274>)
 8002518:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800251c:	f003 0310 	and.w	r3, r3, #16
 8002520:	613b      	str	r3, [r7, #16]
 8002522:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002524:	2303      	movs	r3, #3
 8002526:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800252a:	2302      	movs	r3, #2
 800252c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002530:	2300      	movs	r3, #0
 8002532:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002536:	2300      	movs	r3, #0
 8002538:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 800253c:	2308      	movs	r3, #8
 800253e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002542:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002546:	4619      	mov	r1, r3
 8002548:	482d      	ldr	r0, [pc, #180]	; (8002600 <HAL_UART_MspInit+0x288>)
 800254a:	f004 fc25 	bl	8006d98 <HAL_GPIO_Init>
}
 800254e:	e046      	b.n	80025de <HAL_UART_MspInit+0x266>
  else if(huart->Instance==USART2)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a2b      	ldr	r2, [pc, #172]	; (8002604 <HAL_UART_MspInit+0x28c>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d141      	bne.n	80025de <HAL_UART_MspInit+0x266>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800255a:	2302      	movs	r3, #2
 800255c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800255e:	2300      	movs	r3, #0
 8002560:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002564:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002568:	4618      	mov	r0, r3
 800256a:	f006 ff2f 	bl	80093cc <HAL_RCCEx_PeriphCLKConfig>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d001      	beq.n	8002578 <HAL_UART_MspInit+0x200>
      Error_Handler();
 8002574:	f7ff fb6c 	bl	8001c50 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002578:	4b1c      	ldr	r3, [pc, #112]	; (80025ec <HAL_UART_MspInit+0x274>)
 800257a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800257e:	4a1b      	ldr	r2, [pc, #108]	; (80025ec <HAL_UART_MspInit+0x274>)
 8002580:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002584:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002588:	4b18      	ldr	r3, [pc, #96]	; (80025ec <HAL_UART_MspInit+0x274>)
 800258a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800258e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002592:	60fb      	str	r3, [r7, #12]
 8002594:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002596:	4b15      	ldr	r3, [pc, #84]	; (80025ec <HAL_UART_MspInit+0x274>)
 8002598:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800259c:	4a13      	ldr	r2, [pc, #76]	; (80025ec <HAL_UART_MspInit+0x274>)
 800259e:	f043 0308 	orr.w	r3, r3, #8
 80025a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80025a6:	4b11      	ldr	r3, [pc, #68]	; (80025ec <HAL_UART_MspInit+0x274>)
 80025a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025ac:	f003 0308 	and.w	r3, r3, #8
 80025b0:	60bb      	str	r3, [r7, #8]
 80025b2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80025b4:	2360      	movs	r3, #96	; 0x60
 80025b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ba:	2302      	movs	r3, #2
 80025bc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c0:	2300      	movs	r3, #0
 80025c2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025c6:	2300      	movs	r3, #0
 80025c8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80025cc:	2307      	movs	r3, #7
 80025ce:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025d2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80025d6:	4619      	mov	r1, r3
 80025d8:	4807      	ldr	r0, [pc, #28]	; (80025f8 <HAL_UART_MspInit+0x280>)
 80025da:	f004 fbdd 	bl	8006d98 <HAL_GPIO_Init>
}
 80025de:	bf00      	nop
 80025e0:	37f8      	adds	r7, #248	; 0xf8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	58000c00 	.word	0x58000c00
 80025ec:	58024400 	.word	0x58024400
 80025f0:	58020000 	.word	0x58020000
 80025f4:	40004c00 	.word	0x40004c00
 80025f8:	58020c00 	.word	0x58020c00
 80025fc:	40007c00 	.word	0x40007c00
 8002600:	58021000 	.word	0x58021000
 8002604:	40004400 	.word	0x40004400

08002608 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b0be      	sub	sp, #248	; 0xf8
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002610:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002614:	2200      	movs	r2, #0
 8002616:	601a      	str	r2, [r3, #0]
 8002618:	605a      	str	r2, [r3, #4]
 800261a:	609a      	str	r2, [r3, #8]
 800261c:	60da      	str	r2, [r3, #12]
 800261e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002620:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002624:	22bc      	movs	r2, #188	; 0xbc
 8002626:	2100      	movs	r1, #0
 8002628:	4618      	mov	r0, r3
 800262a:	f00c f901 	bl	800e830 <memset>
  if(husart->Instance==USART1)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a97      	ldr	r2, [pc, #604]	; (8002890 <HAL_USART_MspInit+0x288>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d168      	bne.n	800270a <HAL_USART_MspInit+0x102>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002638:	2301      	movs	r3, #1
 800263a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 800263c:	2300      	movs	r3, #0
 800263e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002642:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002646:	4618      	mov	r0, r3
 8002648:	f006 fec0 	bl	80093cc <HAL_RCCEx_PeriphCLKConfig>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <HAL_USART_MspInit+0x4e>
    {
      Error_Handler();
 8002652:	f7ff fafd 	bl	8001c50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002656:	4b8f      	ldr	r3, [pc, #572]	; (8002894 <HAL_USART_MspInit+0x28c>)
 8002658:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800265c:	4a8d      	ldr	r2, [pc, #564]	; (8002894 <HAL_USART_MspInit+0x28c>)
 800265e:	f043 0310 	orr.w	r3, r3, #16
 8002662:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002666:	4b8b      	ldr	r3, [pc, #556]	; (8002894 <HAL_USART_MspInit+0x28c>)
 8002668:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800266c:	f003 0310 	and.w	r3, r3, #16
 8002670:	627b      	str	r3, [r7, #36]	; 0x24
 8002672:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002674:	4b87      	ldr	r3, [pc, #540]	; (8002894 <HAL_USART_MspInit+0x28c>)
 8002676:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800267a:	4a86      	ldr	r2, [pc, #536]	; (8002894 <HAL_USART_MspInit+0x28c>)
 800267c:	f043 0302 	orr.w	r3, r3, #2
 8002680:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002684:	4b83      	ldr	r3, [pc, #524]	; (8002894 <HAL_USART_MspInit+0x28c>)
 8002686:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800268a:	f003 0302 	and.w	r3, r3, #2
 800268e:	623b      	str	r3, [r7, #32]
 8002690:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002692:	4b80      	ldr	r3, [pc, #512]	; (8002894 <HAL_USART_MspInit+0x28c>)
 8002694:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002698:	4a7e      	ldr	r2, [pc, #504]	; (8002894 <HAL_USART_MspInit+0x28c>)
 800269a:	f043 0301 	orr.w	r3, r3, #1
 800269e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026a2:	4b7c      	ldr	r3, [pc, #496]	; (8002894 <HAL_USART_MspInit+0x28c>)
 80026a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026a8:	f003 0301 	and.w	r3, r3, #1
 80026ac:	61fb      	str	r3, [r7, #28]
 80026ae:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    PA8     ------> USART1_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80026b0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80026b4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b8:	2302      	movs	r3, #2
 80026ba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026be:	2300      	movs	r3, #0
 80026c0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026c4:	2300      	movs	r3, #0
 80026c6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80026ca:	2304      	movs	r3, #4
 80026cc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026d0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80026d4:	4619      	mov	r1, r3
 80026d6:	4870      	ldr	r0, [pc, #448]	; (8002898 <HAL_USART_MspInit+0x290>)
 80026d8:	f004 fb5e 	bl	8006d98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80026dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026e0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026e4:	2302      	movs	r3, #2
 80026e6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ea:	2300      	movs	r3, #0
 80026ec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026f0:	2300      	movs	r3, #0
 80026f2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80026f6:	2307      	movs	r3, #7
 80026f8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026fc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002700:	4619      	mov	r1, r3
 8002702:	4866      	ldr	r0, [pc, #408]	; (800289c <HAL_USART_MspInit+0x294>)
 8002704:	f004 fb48 	bl	8006d98 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002708:	e0bd      	b.n	8002886 <HAL_USART_MspInit+0x27e>
  else if(husart->Instance==USART3)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a64      	ldr	r2, [pc, #400]	; (80028a0 <HAL_USART_MspInit+0x298>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d170      	bne.n	80027f6 <HAL_USART_MspInit+0x1ee>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002714:	2302      	movs	r3, #2
 8002716:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002718:	2300      	movs	r3, #0
 800271a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800271e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002722:	4618      	mov	r0, r3
 8002724:	f006 fe52 	bl	80093cc <HAL_RCCEx_PeriphCLKConfig>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d001      	beq.n	8002732 <HAL_USART_MspInit+0x12a>
      Error_Handler();
 800272e:	f7ff fa8f 	bl	8001c50 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002732:	4b58      	ldr	r3, [pc, #352]	; (8002894 <HAL_USART_MspInit+0x28c>)
 8002734:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002738:	4a56      	ldr	r2, [pc, #344]	; (8002894 <HAL_USART_MspInit+0x28c>)
 800273a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800273e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002742:	4b54      	ldr	r3, [pc, #336]	; (8002894 <HAL_USART_MspInit+0x28c>)
 8002744:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002748:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800274c:	61bb      	str	r3, [r7, #24]
 800274e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002750:	4b50      	ldr	r3, [pc, #320]	; (8002894 <HAL_USART_MspInit+0x28c>)
 8002752:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002756:	4a4f      	ldr	r2, [pc, #316]	; (8002894 <HAL_USART_MspInit+0x28c>)
 8002758:	f043 0308 	orr.w	r3, r3, #8
 800275c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002760:	4b4c      	ldr	r3, [pc, #304]	; (8002894 <HAL_USART_MspInit+0x28c>)
 8002762:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002766:	f003 0308 	and.w	r3, r3, #8
 800276a:	617b      	str	r3, [r7, #20]
 800276c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800276e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002772:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002776:	2302      	movs	r3, #2
 8002778:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277c:	2300      	movs	r3, #0
 800277e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002782:	2300      	movs	r3, #0
 8002784:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002788:	2307      	movs	r3, #7
 800278a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800278e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002792:	4619      	mov	r1, r3
 8002794:	4843      	ldr	r0, [pc, #268]	; (80028a4 <HAL_USART_MspInit+0x29c>)
 8002796:	f004 faff 	bl	8006d98 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream0;
 800279a:	4b43      	ldr	r3, [pc, #268]	; (80028a8 <HAL_USART_MspInit+0x2a0>)
 800279c:	4a43      	ldr	r2, [pc, #268]	; (80028ac <HAL_USART_MspInit+0x2a4>)
 800279e:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80027a0:	4b41      	ldr	r3, [pc, #260]	; (80028a8 <HAL_USART_MspInit+0x2a0>)
 80027a2:	222d      	movs	r2, #45	; 0x2d
 80027a4:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027a6:	4b40      	ldr	r3, [pc, #256]	; (80028a8 <HAL_USART_MspInit+0x2a0>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80027ac:	4b3e      	ldr	r3, [pc, #248]	; (80028a8 <HAL_USART_MspInit+0x2a0>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80027b2:	4b3d      	ldr	r3, [pc, #244]	; (80028a8 <HAL_USART_MspInit+0x2a0>)
 80027b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027b8:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80027ba:	4b3b      	ldr	r3, [pc, #236]	; (80028a8 <HAL_USART_MspInit+0x2a0>)
 80027bc:	2200      	movs	r2, #0
 80027be:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80027c0:	4b39      	ldr	r3, [pc, #228]	; (80028a8 <HAL_USART_MspInit+0x2a0>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80027c6:	4b38      	ldr	r3, [pc, #224]	; (80028a8 <HAL_USART_MspInit+0x2a0>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80027cc:	4b36      	ldr	r3, [pc, #216]	; (80028a8 <HAL_USART_MspInit+0x2a0>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80027d2:	4b35      	ldr	r3, [pc, #212]	; (80028a8 <HAL_USART_MspInit+0x2a0>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80027d8:	4833      	ldr	r0, [pc, #204]	; (80028a8 <HAL_USART_MspInit+0x2a0>)
 80027da:	f002 fab3 	bl	8004d44 <HAL_DMA_Init>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d001      	beq.n	80027e8 <HAL_USART_MspInit+0x1e0>
      Error_Handler();
 80027e4:	f7ff fa34 	bl	8001c50 <Error_Handler>
    __HAL_LINKDMA(husart,hdmarx,hdma_usart3_rx);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	4a2f      	ldr	r2, [pc, #188]	; (80028a8 <HAL_USART_MspInit+0x2a0>)
 80027ec:	655a      	str	r2, [r3, #84]	; 0x54
 80027ee:	4a2e      	ldr	r2, [pc, #184]	; (80028a8 <HAL_USART_MspInit+0x2a0>)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6393      	str	r3, [r2, #56]	; 0x38
}
 80027f4:	e047      	b.n	8002886 <HAL_USART_MspInit+0x27e>
  else if(husart->Instance==USART6)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a2d      	ldr	r2, [pc, #180]	; (80028b0 <HAL_USART_MspInit+0x2a8>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d142      	bne.n	8002886 <HAL_USART_MspInit+0x27e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8002800:	2301      	movs	r3, #1
 8002802:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8002804:	2300      	movs	r3, #0
 8002806:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800280a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800280e:	4618      	mov	r0, r3
 8002810:	f006 fddc 	bl	80093cc <HAL_RCCEx_PeriphCLKConfig>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <HAL_USART_MspInit+0x216>
      Error_Handler();
 800281a:	f7ff fa19 	bl	8001c50 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 800281e:	4b1d      	ldr	r3, [pc, #116]	; (8002894 <HAL_USART_MspInit+0x28c>)
 8002820:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002824:	4a1b      	ldr	r2, [pc, #108]	; (8002894 <HAL_USART_MspInit+0x28c>)
 8002826:	f043 0320 	orr.w	r3, r3, #32
 800282a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800282e:	4b19      	ldr	r3, [pc, #100]	; (8002894 <HAL_USART_MspInit+0x28c>)
 8002830:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002834:	f003 0320 	and.w	r3, r3, #32
 8002838:	613b      	str	r3, [r7, #16]
 800283a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800283c:	4b15      	ldr	r3, [pc, #84]	; (8002894 <HAL_USART_MspInit+0x28c>)
 800283e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002842:	4a14      	ldr	r2, [pc, #80]	; (8002894 <HAL_USART_MspInit+0x28c>)
 8002844:	f043 0304 	orr.w	r3, r3, #4
 8002848:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800284c:	4b11      	ldr	r3, [pc, #68]	; (8002894 <HAL_USART_MspInit+0x28c>)
 800284e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002852:	f003 0304 	and.w	r3, r3, #4
 8002856:	60fb      	str	r3, [r7, #12]
 8002858:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 800285a:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800285e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002862:	2302      	movs	r3, #2
 8002864:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002868:	2300      	movs	r3, #0
 800286a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800286e:	2300      	movs	r3, #0
 8002870:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8002874:	2307      	movs	r3, #7
 8002876:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800287a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800287e:	4619      	mov	r1, r3
 8002880:	480c      	ldr	r0, [pc, #48]	; (80028b4 <HAL_USART_MspInit+0x2ac>)
 8002882:	f004 fa89 	bl	8006d98 <HAL_GPIO_Init>
}
 8002886:	bf00      	nop
 8002888:	37f8      	adds	r7, #248	; 0xf8
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	40011000 	.word	0x40011000
 8002894:	58024400 	.word	0x58024400
 8002898:	58020400 	.word	0x58020400
 800289c:	58020000 	.word	0x58020000
 80028a0:	40004800 	.word	0x40004800
 80028a4:	58020c00 	.word	0x58020c00
 80028a8:	24000390 	.word	0x24000390
 80028ac:	40020010 	.word	0x40020010
 80028b0:	40011400 	.word	0x40011400
 80028b4:	58020800 	.word	0x58020800

080028b8 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b0ba      	sub	sp, #232	; 0xe8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028c0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80028c4:	2200      	movs	r2, #0
 80028c6:	601a      	str	r2, [r3, #0]
 80028c8:	605a      	str	r2, [r3, #4]
 80028ca:	609a      	str	r2, [r3, #8]
 80028cc:	60da      	str	r2, [r3, #12]
 80028ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80028d0:	f107 0318 	add.w	r3, r7, #24
 80028d4:	22bc      	movs	r2, #188	; 0xbc
 80028d6:	2100      	movs	r1, #0
 80028d8:	4618      	mov	r0, r3
 80028da:	f00b ffa9 	bl	800e830 <memset>
  if(hqspi->Instance==QUADSPI)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a4a      	ldr	r2, [pc, #296]	; (8002a0c <HAL_QSPI_MspInit+0x154>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	f040 808c 	bne.w	8002a02 <HAL_QSPI_MspInit+0x14a>
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 80028ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028ee:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 80028f0:	2300      	movs	r3, #0
 80028f2:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80028f4:	f107 0318 	add.w	r3, r7, #24
 80028f8:	4618      	mov	r0, r3
 80028fa:	f006 fd67 	bl	80093cc <HAL_RCCEx_PeriphCLKConfig>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d001      	beq.n	8002908 <HAL_QSPI_MspInit+0x50>
    {
      Error_Handler();
 8002904:	f7ff f9a4 	bl	8001c50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002908:	4b41      	ldr	r3, [pc, #260]	; (8002a10 <HAL_QSPI_MspInit+0x158>)
 800290a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800290e:	4a40      	ldr	r2, [pc, #256]	; (8002a10 <HAL_QSPI_MspInit+0x158>)
 8002910:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002914:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8002918:	4b3d      	ldr	r3, [pc, #244]	; (8002a10 <HAL_QSPI_MspInit+0x158>)
 800291a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800291e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002922:	617b      	str	r3, [r7, #20]
 8002924:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002926:	4b3a      	ldr	r3, [pc, #232]	; (8002a10 <HAL_QSPI_MspInit+0x158>)
 8002928:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800292c:	4a38      	ldr	r2, [pc, #224]	; (8002a10 <HAL_QSPI_MspInit+0x158>)
 800292e:	f043 0302 	orr.w	r3, r3, #2
 8002932:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002936:	4b36      	ldr	r3, [pc, #216]	; (8002a10 <HAL_QSPI_MspInit+0x158>)
 8002938:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800293c:	f003 0302 	and.w	r3, r3, #2
 8002940:	613b      	str	r3, [r7, #16]
 8002942:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002944:	4b32      	ldr	r3, [pc, #200]	; (8002a10 <HAL_QSPI_MspInit+0x158>)
 8002946:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800294a:	4a31      	ldr	r2, [pc, #196]	; (8002a10 <HAL_QSPI_MspInit+0x158>)
 800294c:	f043 0310 	orr.w	r3, r3, #16
 8002950:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002954:	4b2e      	ldr	r3, [pc, #184]	; (8002a10 <HAL_QSPI_MspInit+0x158>)
 8002956:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800295a:	f003 0310 	and.w	r3, r3, #16
 800295e:	60fb      	str	r3, [r7, #12]
 8002960:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002962:	4b2b      	ldr	r3, [pc, #172]	; (8002a10 <HAL_QSPI_MspInit+0x158>)
 8002964:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002968:	4a29      	ldr	r2, [pc, #164]	; (8002a10 <HAL_QSPI_MspInit+0x158>)
 800296a:	f043 0304 	orr.w	r3, r3, #4
 800296e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002972:	4b27      	ldr	r3, [pc, #156]	; (8002a10 <HAL_QSPI_MspInit+0x158>)
 8002974:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002978:	f003 0304 	and.w	r3, r3, #4
 800297c:	60bb      	str	r3, [r7, #8]
 800297e:	68bb      	ldr	r3, [r7, #8]
    PE8     ------> QUADSPI_BK2_IO1
    PE9     ------> QUADSPI_BK2_IO2
    PE10     ------> QUADSPI_BK2_IO3
    PC11     ------> QUADSPI_BK2_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002980:	2304      	movs	r3, #4
 8002982:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002986:	2302      	movs	r3, #2
 8002988:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800298c:	2300      	movs	r3, #0
 800298e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002992:	2300      	movs	r3, #0
 8002994:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002998:	2309      	movs	r3, #9
 800299a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800299e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80029a2:	4619      	mov	r1, r3
 80029a4:	481b      	ldr	r0, [pc, #108]	; (8002a14 <HAL_QSPI_MspInit+0x15c>)
 80029a6:	f004 f9f7 	bl	8006d98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80029aa:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 80029ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029b2:	2302      	movs	r3, #2
 80029b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b8:	2300      	movs	r3, #0
 80029ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029be:	2300      	movs	r3, #0
 80029c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80029c4:	230a      	movs	r3, #10
 80029c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80029ca:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80029ce:	4619      	mov	r1, r3
 80029d0:	4811      	ldr	r0, [pc, #68]	; (8002a18 <HAL_QSPI_MspInit+0x160>)
 80029d2:	f004 f9e1 	bl	8006d98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80029d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80029da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029de:	2302      	movs	r3, #2
 80029e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e4:	2300      	movs	r3, #0
 80029e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ea:	2300      	movs	r3, #0
 80029ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80029f0:	2309      	movs	r3, #9
 80029f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029f6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80029fa:	4619      	mov	r1, r3
 80029fc:	4807      	ldr	r0, [pc, #28]	; (8002a1c <HAL_QSPI_MspInit+0x164>)
 80029fe:	f004 f9cb 	bl	8006d98 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8002a02:	bf00      	nop
 8002a04:	37e8      	adds	r7, #232	; 0xe8
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	52005000 	.word	0x52005000
 8002a10:	58024400 	.word	0x58024400
 8002a14:	58020400 	.word	0x58020400
 8002a18:	58021000 	.word	0x58021000
 8002a1c:	58020800 	.word	0x58020800

08002a20 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b0be      	sub	sp, #248	; 0xf8
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a28:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	601a      	str	r2, [r3, #0]
 8002a30:	605a      	str	r2, [r3, #4]
 8002a32:	609a      	str	r2, [r3, #8]
 8002a34:	60da      	str	r2, [r3, #12]
 8002a36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a38:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a3c:	22bc      	movs	r2, #188	; 0xbc
 8002a3e:	2100      	movs	r1, #0
 8002a40:	4618      	mov	r0, r3
 8002a42:	f00b fef5 	bl	800e830 <memset>
  if(hspi->Instance==SPI1)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a92      	ldr	r2, [pc, #584]	; (8002c94 <HAL_SPI_MspInit+0x274>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d167      	bne.n	8002b20 <HAL_SPI_MspInit+0x100>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002a50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a54:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002a56:	2300      	movs	r3, #0
 8002a58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a5c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a60:	4618      	mov	r0, r3
 8002a62:	f006 fcb3 	bl	80093cc <HAL_RCCEx_PeriphCLKConfig>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d001      	beq.n	8002a70 <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 8002a6c:	f7ff f8f0 	bl	8001c50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002a70:	4b89      	ldr	r3, [pc, #548]	; (8002c98 <HAL_SPI_MspInit+0x278>)
 8002a72:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002a76:	4a88      	ldr	r2, [pc, #544]	; (8002c98 <HAL_SPI_MspInit+0x278>)
 8002a78:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a7c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002a80:	4b85      	ldr	r3, [pc, #532]	; (8002c98 <HAL_SPI_MspInit+0x278>)
 8002a82:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002a86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a8a:	627b      	str	r3, [r7, #36]	; 0x24
 8002a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a8e:	4b82      	ldr	r3, [pc, #520]	; (8002c98 <HAL_SPI_MspInit+0x278>)
 8002a90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a94:	4a80      	ldr	r2, [pc, #512]	; (8002c98 <HAL_SPI_MspInit+0x278>)
 8002a96:	f043 0301 	orr.w	r3, r3, #1
 8002a9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a9e:	4b7e      	ldr	r3, [pc, #504]	; (8002c98 <HAL_SPI_MspInit+0x278>)
 8002aa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002aa4:	f003 0301 	and.w	r3, r3, #1
 8002aa8:	623b      	str	r3, [r7, #32]
 8002aaa:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aac:	4b7a      	ldr	r3, [pc, #488]	; (8002c98 <HAL_SPI_MspInit+0x278>)
 8002aae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ab2:	4a79      	ldr	r2, [pc, #484]	; (8002c98 <HAL_SPI_MspInit+0x278>)
 8002ab4:	f043 0302 	orr.w	r3, r3, #2
 8002ab8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002abc:	4b76      	ldr	r3, [pc, #472]	; (8002c98 <HAL_SPI_MspInit+0x278>)
 8002abe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ac2:	f003 0302 	and.w	r3, r3, #2
 8002ac6:	61fb      	str	r3, [r7, #28]
 8002ac8:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002aca:	23c0      	movs	r3, #192	; 0xc0
 8002acc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ad0:	2302      	movs	r3, #2
 8002ad2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002adc:	2300      	movs	r3, #0
 8002ade:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002ae2:	2305      	movs	r3, #5
 8002ae4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ae8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002aec:	4619      	mov	r1, r3
 8002aee:	486b      	ldr	r0, [pc, #428]	; (8002c9c <HAL_SPI_MspInit+0x27c>)
 8002af0:	f004 f952 	bl	8006d98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002af4:	2308      	movs	r3, #8
 8002af6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002afa:	2302      	movs	r3, #2
 8002afc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b00:	2300      	movs	r3, #0
 8002b02:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b06:	2300      	movs	r3, #0
 8002b08:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002b0c:	2305      	movs	r3, #5
 8002b0e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b12:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002b16:	4619      	mov	r1, r3
 8002b18:	4861      	ldr	r0, [pc, #388]	; (8002ca0 <HAL_SPI_MspInit+0x280>)
 8002b1a:	f004 f93d 	bl	8006d98 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8002b1e:	e0b4      	b.n	8002c8a <HAL_SPI_MspInit+0x26a>
  else if(hspi->Instance==SPI2)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a5f      	ldr	r2, [pc, #380]	; (8002ca4 <HAL_SPI_MspInit+0x284>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d167      	bne.n	8002bfa <HAL_SPI_MspInit+0x1da>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002b2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b2e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002b30:	2300      	movs	r3, #0
 8002b32:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f006 fc46 	bl	80093cc <HAL_RCCEx_PeriphCLKConfig>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d001      	beq.n	8002b4a <HAL_SPI_MspInit+0x12a>
      Error_Handler();
 8002b46:	f7ff f883 	bl	8001c50 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002b4a:	4b53      	ldr	r3, [pc, #332]	; (8002c98 <HAL_SPI_MspInit+0x278>)
 8002b4c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b50:	4a51      	ldr	r2, [pc, #324]	; (8002c98 <HAL_SPI_MspInit+0x278>)
 8002b52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b56:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002b5a:	4b4f      	ldr	r3, [pc, #316]	; (8002c98 <HAL_SPI_MspInit+0x278>)
 8002b5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b64:	61bb      	str	r3, [r7, #24]
 8002b66:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b68:	4b4b      	ldr	r3, [pc, #300]	; (8002c98 <HAL_SPI_MspInit+0x278>)
 8002b6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b6e:	4a4a      	ldr	r2, [pc, #296]	; (8002c98 <HAL_SPI_MspInit+0x278>)
 8002b70:	f043 0304 	orr.w	r3, r3, #4
 8002b74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b78:	4b47      	ldr	r3, [pc, #284]	; (8002c98 <HAL_SPI_MspInit+0x278>)
 8002b7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b7e:	f003 0304 	and.w	r3, r3, #4
 8002b82:	617b      	str	r3, [r7, #20]
 8002b84:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b86:	4b44      	ldr	r3, [pc, #272]	; (8002c98 <HAL_SPI_MspInit+0x278>)
 8002b88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b8c:	4a42      	ldr	r2, [pc, #264]	; (8002c98 <HAL_SPI_MspInit+0x278>)
 8002b8e:	f043 0308 	orr.w	r3, r3, #8
 8002b92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b96:	4b40      	ldr	r3, [pc, #256]	; (8002c98 <HAL_SPI_MspInit+0x278>)
 8002b98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b9c:	f003 0308 	and.w	r3, r3, #8
 8002ba0:	613b      	str	r3, [r7, #16]
 8002ba2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002ba4:	230c      	movs	r3, #12
 8002ba6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002baa:	2302      	movs	r3, #2
 8002bac:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002bbc:	2305      	movs	r3, #5
 8002bbe:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bc2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	4837      	ldr	r0, [pc, #220]	; (8002ca8 <HAL_SPI_MspInit+0x288>)
 8002bca:	f004 f8e5 	bl	8006d98 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002bce:	2308      	movs	r3, #8
 8002bd0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bd4:	2302      	movs	r3, #2
 8002bd6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002be0:	2300      	movs	r3, #0
 8002be2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002be6:	2305      	movs	r3, #5
 8002be8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002bec:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	482e      	ldr	r0, [pc, #184]	; (8002cac <HAL_SPI_MspInit+0x28c>)
 8002bf4:	f004 f8d0 	bl	8006d98 <HAL_GPIO_Init>
}
 8002bf8:	e047      	b.n	8002c8a <HAL_SPI_MspInit+0x26a>
  else if(hspi->Instance==SPI4)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a2c      	ldr	r2, [pc, #176]	; (8002cb0 <HAL_SPI_MspInit+0x290>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d142      	bne.n	8002c8a <HAL_SPI_MspInit+0x26a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8002c04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c08:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c10:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c14:	4618      	mov	r0, r3
 8002c16:	f006 fbd9 	bl	80093cc <HAL_RCCEx_PeriphCLKConfig>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d001      	beq.n	8002c24 <HAL_SPI_MspInit+0x204>
      Error_Handler();
 8002c20:	f7ff f816 	bl	8001c50 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002c24:	4b1c      	ldr	r3, [pc, #112]	; (8002c98 <HAL_SPI_MspInit+0x278>)
 8002c26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002c2a:	4a1b      	ldr	r2, [pc, #108]	; (8002c98 <HAL_SPI_MspInit+0x278>)
 8002c2c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002c30:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002c34:	4b18      	ldr	r3, [pc, #96]	; (8002c98 <HAL_SPI_MspInit+0x278>)
 8002c36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002c3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c3e:	60fb      	str	r3, [r7, #12]
 8002c40:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c42:	4b15      	ldr	r3, [pc, #84]	; (8002c98 <HAL_SPI_MspInit+0x278>)
 8002c44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c48:	4a13      	ldr	r2, [pc, #76]	; (8002c98 <HAL_SPI_MspInit+0x278>)
 8002c4a:	f043 0310 	orr.w	r3, r3, #16
 8002c4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c52:	4b11      	ldr	r3, [pc, #68]	; (8002c98 <HAL_SPI_MspInit+0x278>)
 8002c54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c58:	f003 0310 	and.w	r3, r3, #16
 8002c5c:	60bb      	str	r3, [r7, #8]
 8002c5e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8002c60:	2364      	movs	r3, #100	; 0x64
 8002c62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c66:	2302      	movs	r3, #2
 8002c68:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c72:	2300      	movs	r3, #0
 8002c74:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002c78:	2305      	movs	r3, #5
 8002c7a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002c7e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002c82:	4619      	mov	r1, r3
 8002c84:	480b      	ldr	r0, [pc, #44]	; (8002cb4 <HAL_SPI_MspInit+0x294>)
 8002c86:	f004 f887 	bl	8006d98 <HAL_GPIO_Init>
}
 8002c8a:	bf00      	nop
 8002c8c:	37f8      	adds	r7, #248	; 0xf8
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	40013000 	.word	0x40013000
 8002c98:	58024400 	.word	0x58024400
 8002c9c:	58020000 	.word	0x58020000
 8002ca0:	58020400 	.word	0x58020400
 8002ca4:	40003800 	.word	0x40003800
 8002ca8:	58020800 	.word	0x58020800
 8002cac:	58020c00 	.word	0x58020c00
 8002cb0:	40013400 	.word	0x40013400
 8002cb4:	58021000 	.word	0x58021000

08002cb8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b085      	sub	sp, #20
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a16      	ldr	r2, [pc, #88]	; (8002d20 <HAL_TIM_PWM_MspInit+0x68>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d10f      	bne.n	8002cea <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002cca:	4b16      	ldr	r3, [pc, #88]	; (8002d24 <HAL_TIM_PWM_MspInit+0x6c>)
 8002ccc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002cd0:	4a14      	ldr	r2, [pc, #80]	; (8002d24 <HAL_TIM_PWM_MspInit+0x6c>)
 8002cd2:	f043 0301 	orr.w	r3, r3, #1
 8002cd6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002cda:	4b12      	ldr	r3, [pc, #72]	; (8002d24 <HAL_TIM_PWM_MspInit+0x6c>)
 8002cdc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002ce0:	f003 0301 	and.w	r3, r3, #1
 8002ce4:	60fb      	str	r3, [r7, #12]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002ce8:	e013      	b.n	8002d12 <HAL_TIM_PWM_MspInit+0x5a>
  else if(htim_pwm->Instance==TIM5)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a0e      	ldr	r2, [pc, #56]	; (8002d28 <HAL_TIM_PWM_MspInit+0x70>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d10e      	bne.n	8002d12 <HAL_TIM_PWM_MspInit+0x5a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002cf4:	4b0b      	ldr	r3, [pc, #44]	; (8002d24 <HAL_TIM_PWM_MspInit+0x6c>)
 8002cf6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002cfa:	4a0a      	ldr	r2, [pc, #40]	; (8002d24 <HAL_TIM_PWM_MspInit+0x6c>)
 8002cfc:	f043 0308 	orr.w	r3, r3, #8
 8002d00:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002d04:	4b07      	ldr	r3, [pc, #28]	; (8002d24 <HAL_TIM_PWM_MspInit+0x6c>)
 8002d06:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d0a:	f003 0308 	and.w	r3, r3, #8
 8002d0e:	60bb      	str	r3, [r7, #8]
 8002d10:	68bb      	ldr	r3, [r7, #8]
}
 8002d12:	bf00      	nop
 8002d14:	3714      	adds	r7, #20
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop
 8002d20:	40010000 	.word	0x40010000
 8002d24:	58024400 	.word	0x58024400
 8002d28:	40000c00 	.word	0x40000c00

08002d2c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b085      	sub	sp, #20
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a16      	ldr	r2, [pc, #88]	; (8002d94 <HAL_TIM_Base_MspInit+0x68>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d10f      	bne.n	8002d5e <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002d3e:	4b16      	ldr	r3, [pc, #88]	; (8002d98 <HAL_TIM_Base_MspInit+0x6c>)
 8002d40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d44:	4a14      	ldr	r2, [pc, #80]	; (8002d98 <HAL_TIM_Base_MspInit+0x6c>)
 8002d46:	f043 0304 	orr.w	r3, r3, #4
 8002d4a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002d4e:	4b12      	ldr	r3, [pc, #72]	; (8002d98 <HAL_TIM_Base_MspInit+0x6c>)
 8002d50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d54:	f003 0304 	and.w	r3, r3, #4
 8002d58:	60fb      	str	r3, [r7, #12]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8002d5c:	e013      	b.n	8002d86 <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM15)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a0e      	ldr	r2, [pc, #56]	; (8002d9c <HAL_TIM_Base_MspInit+0x70>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d10e      	bne.n	8002d86 <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002d68:	4b0b      	ldr	r3, [pc, #44]	; (8002d98 <HAL_TIM_Base_MspInit+0x6c>)
 8002d6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002d6e:	4a0a      	ldr	r2, [pc, #40]	; (8002d98 <HAL_TIM_Base_MspInit+0x6c>)
 8002d70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d74:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002d78:	4b07      	ldr	r3, [pc, #28]	; (8002d98 <HAL_TIM_Base_MspInit+0x6c>)
 8002d7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002d7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d82:	60bb      	str	r3, [r7, #8]
 8002d84:	68bb      	ldr	r3, [r7, #8]
}
 8002d86:	bf00      	nop
 8002d88:	3714      	adds	r7, #20
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr
 8002d92:	bf00      	nop
 8002d94:	40000800 	.word	0x40000800
 8002d98:	58024400 	.word	0x58024400
 8002d9c:	40014000 	.word	0x40014000

08002da0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b08c      	sub	sp, #48	; 0x30
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002da8:	f107 031c 	add.w	r3, r7, #28
 8002dac:	2200      	movs	r2, #0
 8002dae:	601a      	str	r2, [r3, #0]
 8002db0:	605a      	str	r2, [r3, #4]
 8002db2:	609a      	str	r2, [r3, #8]
 8002db4:	60da      	str	r2, [r3, #12]
 8002db6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a4b      	ldr	r2, [pc, #300]	; (8002eec <HAL_TIM_MspPostInit+0x14c>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d120      	bne.n	8002e04 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002dc2:	4b4b      	ldr	r3, [pc, #300]	; (8002ef0 <HAL_TIM_MspPostInit+0x150>)
 8002dc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002dc8:	4a49      	ldr	r2, [pc, #292]	; (8002ef0 <HAL_TIM_MspPostInit+0x150>)
 8002dca:	f043 0310 	orr.w	r3, r3, #16
 8002dce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002dd2:	4b47      	ldr	r3, [pc, #284]	; (8002ef0 <HAL_TIM_MspPostInit+0x150>)
 8002dd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002dd8:	f003 0310 	and.w	r3, r3, #16
 8002ddc:	61bb      	str	r3, [r7, #24]
 8002dde:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002de0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002de4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002de6:	2302      	movs	r3, #2
 8002de8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dea:	2300      	movs	r3, #0
 8002dec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dee:	2300      	movs	r3, #0
 8002df0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002df2:	2301      	movs	r3, #1
 8002df4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002df6:	f107 031c 	add.w	r3, r7, #28
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	483d      	ldr	r0, [pc, #244]	; (8002ef4 <HAL_TIM_MspPostInit+0x154>)
 8002dfe:	f003 ffcb 	bl	8006d98 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8002e02:	e06e      	b.n	8002ee2 <HAL_TIM_MspPostInit+0x142>
  else if(htim->Instance==TIM4)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a3b      	ldr	r2, [pc, #236]	; (8002ef8 <HAL_TIM_MspPostInit+0x158>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d120      	bne.n	8002e50 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e0e:	4b38      	ldr	r3, [pc, #224]	; (8002ef0 <HAL_TIM_MspPostInit+0x150>)
 8002e10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e14:	4a36      	ldr	r2, [pc, #216]	; (8002ef0 <HAL_TIM_MspPostInit+0x150>)
 8002e16:	f043 0308 	orr.w	r3, r3, #8
 8002e1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e1e:	4b34      	ldr	r3, [pc, #208]	; (8002ef0 <HAL_TIM_MspPostInit+0x150>)
 8002e20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e24:	f003 0308 	and.w	r3, r3, #8
 8002e28:	617b      	str	r3, [r7, #20]
 8002e2a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002e2c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e32:	2302      	movs	r3, #2
 8002e34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e36:	2300      	movs	r3, #0
 8002e38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002e3e:	2302      	movs	r3, #2
 8002e40:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e42:	f107 031c 	add.w	r3, r7, #28
 8002e46:	4619      	mov	r1, r3
 8002e48:	482c      	ldr	r0, [pc, #176]	; (8002efc <HAL_TIM_MspPostInit+0x15c>)
 8002e4a:	f003 ffa5 	bl	8006d98 <HAL_GPIO_Init>
}
 8002e4e:	e048      	b.n	8002ee2 <HAL_TIM_MspPostInit+0x142>
  else if(htim->Instance==TIM5)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a2a      	ldr	r2, [pc, #168]	; (8002f00 <HAL_TIM_MspPostInit+0x160>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d11f      	bne.n	8002e9a <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e5a:	4b25      	ldr	r3, [pc, #148]	; (8002ef0 <HAL_TIM_MspPostInit+0x150>)
 8002e5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e60:	4a23      	ldr	r2, [pc, #140]	; (8002ef0 <HAL_TIM_MspPostInit+0x150>)
 8002e62:	f043 0301 	orr.w	r3, r3, #1
 8002e66:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e6a:	4b21      	ldr	r3, [pc, #132]	; (8002ef0 <HAL_TIM_MspPostInit+0x150>)
 8002e6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e70:	f003 0301 	and.w	r3, r3, #1
 8002e74:	613b      	str	r3, [r7, #16]
 8002e76:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002e78:	2302      	movs	r3, #2
 8002e7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e7c:	2302      	movs	r3, #2
 8002e7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e80:	2300      	movs	r3, #0
 8002e82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e84:	2300      	movs	r3, #0
 8002e86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002e88:	2302      	movs	r3, #2
 8002e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e8c:	f107 031c 	add.w	r3, r7, #28
 8002e90:	4619      	mov	r1, r3
 8002e92:	481c      	ldr	r0, [pc, #112]	; (8002f04 <HAL_TIM_MspPostInit+0x164>)
 8002e94:	f003 ff80 	bl	8006d98 <HAL_GPIO_Init>
}
 8002e98:	e023      	b.n	8002ee2 <HAL_TIM_MspPostInit+0x142>
  else if(htim->Instance==TIM15)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a1a      	ldr	r2, [pc, #104]	; (8002f08 <HAL_TIM_MspPostInit+0x168>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d11e      	bne.n	8002ee2 <HAL_TIM_MspPostInit+0x142>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ea4:	4b12      	ldr	r3, [pc, #72]	; (8002ef0 <HAL_TIM_MspPostInit+0x150>)
 8002ea6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002eaa:	4a11      	ldr	r2, [pc, #68]	; (8002ef0 <HAL_TIM_MspPostInit+0x150>)
 8002eac:	f043 0301 	orr.w	r3, r3, #1
 8002eb0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002eb4:	4b0e      	ldr	r3, [pc, #56]	; (8002ef0 <HAL_TIM_MspPostInit+0x150>)
 8002eb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002eba:	f003 0301 	and.w	r3, r3, #1
 8002ebe:	60fb      	str	r3, [r7, #12]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002ec2:	2308      	movs	r3, #8
 8002ec4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ec6:	2302      	movs	r3, #2
 8002ec8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8002ed2:	2304      	movs	r3, #4
 8002ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ed6:	f107 031c 	add.w	r3, r7, #28
 8002eda:	4619      	mov	r1, r3
 8002edc:	4809      	ldr	r0, [pc, #36]	; (8002f04 <HAL_TIM_MspPostInit+0x164>)
 8002ede:	f003 ff5b 	bl	8006d98 <HAL_GPIO_Init>
}
 8002ee2:	bf00      	nop
 8002ee4:	3730      	adds	r7, #48	; 0x30
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	40010000 	.word	0x40010000
 8002ef0:	58024400 	.word	0x58024400
 8002ef4:	58021000 	.word	0x58021000
 8002ef8:	40000800 	.word	0x40000800
 8002efc:	58020c00 	.word	0x58020c00
 8002f00:	40000c00 	.word	0x40000c00
 8002f04:	58020000 	.word	0x58020000
 8002f08:	40014000 	.word	0x40014000

08002f0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002f10:	e7fe      	b.n	8002f10 <NMI_Handler+0x4>

08002f12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f12:	b480      	push	{r7}
 8002f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f16:	e7fe      	b.n	8002f16 <HardFault_Handler+0x4>

08002f18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f1c:	e7fe      	b.n	8002f1c <MemManage_Handler+0x4>

08002f1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f1e:	b480      	push	{r7}
 8002f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f22:	e7fe      	b.n	8002f22 <BusFault_Handler+0x4>

08002f24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f24:	b480      	push	{r7}
 8002f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f28:	e7fe      	b.n	8002f28 <UsageFault_Handler+0x4>

08002f2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f2a:	b480      	push	{r7}
 8002f2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f2e:	bf00      	nop
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr

08002f38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f3c:	bf00      	nop
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr

08002f46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f46:	b480      	push	{r7}
 8002f48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f4a:	bf00      	nop
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr

08002f54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f58:	f000 fbb8 	bl	80036cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f5c:	bf00      	nop
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002f64:	4802      	ldr	r0, [pc, #8]	; (8002f70 <DMA1_Stream0_IRQHandler+0x10>)
 8002f66:	f002 fa49 	bl	80053fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002f6a:	bf00      	nop
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	24000390 	.word	0x24000390

08002f74 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002f74:	b480      	push	{r7}
 8002f76:	af00      	add	r7, sp, #0
	return 1;
 8002f78:	2301      	movs	r3, #1
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr

08002f84 <_kill>:

int _kill(int pid, int sig)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002f8e:	f00b fc17 	bl	800e7c0 <__errno>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2216      	movs	r2, #22
 8002f96:	601a      	str	r2, [r3, #0]
	return -1;
 8002f98:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3708      	adds	r7, #8
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <_exit>:

void _exit (int status)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002fac:	f04f 31ff 	mov.w	r1, #4294967295
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f7ff ffe7 	bl	8002f84 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002fb6:	e7fe      	b.n	8002fb6 <_exit+0x12>

08002fb8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b086      	sub	sp, #24
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	60b9      	str	r1, [r7, #8]
 8002fc2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	617b      	str	r3, [r7, #20]
 8002fc8:	e00a      	b.n	8002fe0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002fca:	f3af 8000 	nop.w
 8002fce:	4601      	mov	r1, r0
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	1c5a      	adds	r2, r3, #1
 8002fd4:	60ba      	str	r2, [r7, #8]
 8002fd6:	b2ca      	uxtb	r2, r1
 8002fd8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	3301      	adds	r3, #1
 8002fde:	617b      	str	r3, [r7, #20]
 8002fe0:	697a      	ldr	r2, [r7, #20]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	dbf0      	blt.n	8002fca <_read+0x12>
	}

return len;
 8002fe8:	687b      	ldr	r3, [r7, #4]
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3718      	adds	r7, #24
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}

08002ff2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ff2:	b580      	push	{r7, lr}
 8002ff4:	b086      	sub	sp, #24
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	60f8      	str	r0, [r7, #12]
 8002ffa:	60b9      	str	r1, [r7, #8]
 8002ffc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ffe:	2300      	movs	r3, #0
 8003000:	617b      	str	r3, [r7, #20]
 8003002:	e009      	b.n	8003018 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	1c5a      	adds	r2, r3, #1
 8003008:	60ba      	str	r2, [r7, #8]
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	4618      	mov	r0, r3
 800300e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	3301      	adds	r3, #1
 8003016:	617b      	str	r3, [r7, #20]
 8003018:	697a      	ldr	r2, [r7, #20]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	429a      	cmp	r2, r3
 800301e:	dbf1      	blt.n	8003004 <_write+0x12>
	}
	return len;
 8003020:	687b      	ldr	r3, [r7, #4]
}
 8003022:	4618      	mov	r0, r3
 8003024:	3718      	adds	r7, #24
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}

0800302a <_close>:

int _close(int file)
{
 800302a:	b480      	push	{r7}
 800302c:	b083      	sub	sp, #12
 800302e:	af00      	add	r7, sp, #0
 8003030:	6078      	str	r0, [r7, #4]
	return -1;
 8003032:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003036:	4618      	mov	r0, r3
 8003038:	370c      	adds	r7, #12
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr

08003042 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003042:	b480      	push	{r7}
 8003044:	b083      	sub	sp, #12
 8003046:	af00      	add	r7, sp, #0
 8003048:	6078      	str	r0, [r7, #4]
 800304a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003052:	605a      	str	r2, [r3, #4]
	return 0;
 8003054:	2300      	movs	r3, #0
}
 8003056:	4618      	mov	r0, r3
 8003058:	370c      	adds	r7, #12
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr

08003062 <_isatty>:

int _isatty(int file)
{
 8003062:	b480      	push	{r7}
 8003064:	b083      	sub	sp, #12
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
	return 1;
 800306a:	2301      	movs	r3, #1
}
 800306c:	4618      	mov	r0, r3
 800306e:	370c      	adds	r7, #12
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr

08003078 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003078:	b480      	push	{r7}
 800307a:	b085      	sub	sp, #20
 800307c:	af00      	add	r7, sp, #0
 800307e:	60f8      	str	r0, [r7, #12]
 8003080:	60b9      	str	r1, [r7, #8]
 8003082:	607a      	str	r2, [r7, #4]
	return 0;
 8003084:	2300      	movs	r3, #0
}
 8003086:	4618      	mov	r0, r3
 8003088:	3714      	adds	r7, #20
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
	...

08003094 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b086      	sub	sp, #24
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800309c:	4a14      	ldr	r2, [pc, #80]	; (80030f0 <_sbrk+0x5c>)
 800309e:	4b15      	ldr	r3, [pc, #84]	; (80030f4 <_sbrk+0x60>)
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80030a8:	4b13      	ldr	r3, [pc, #76]	; (80030f8 <_sbrk+0x64>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d102      	bne.n	80030b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80030b0:	4b11      	ldr	r3, [pc, #68]	; (80030f8 <_sbrk+0x64>)
 80030b2:	4a12      	ldr	r2, [pc, #72]	; (80030fc <_sbrk+0x68>)
 80030b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80030b6:	4b10      	ldr	r3, [pc, #64]	; (80030f8 <_sbrk+0x64>)
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4413      	add	r3, r2
 80030be:	693a      	ldr	r2, [r7, #16]
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d207      	bcs.n	80030d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80030c4:	f00b fb7c 	bl	800e7c0 <__errno>
 80030c8:	4603      	mov	r3, r0
 80030ca:	220c      	movs	r2, #12
 80030cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80030ce:	f04f 33ff 	mov.w	r3, #4294967295
 80030d2:	e009      	b.n	80030e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80030d4:	4b08      	ldr	r3, [pc, #32]	; (80030f8 <_sbrk+0x64>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80030da:	4b07      	ldr	r3, [pc, #28]	; (80030f8 <_sbrk+0x64>)
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4413      	add	r3, r2
 80030e2:	4a05      	ldr	r2, [pc, #20]	; (80030f8 <_sbrk+0x64>)
 80030e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80030e6:	68fb      	ldr	r3, [r7, #12]
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3718      	adds	r7, #24
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}
 80030f0:	24080000 	.word	0x24080000
 80030f4:	00000400 	.word	0x00000400
 80030f8:	24000204 	.word	0x24000204
 80030fc:	24000c78 	.word	0x24000c78

08003100 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003100:	b480      	push	{r7}
 8003102:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003104:	4b39      	ldr	r3, [pc, #228]	; (80031ec <SystemInit+0xec>)
 8003106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800310a:	4a38      	ldr	r2, [pc, #224]	; (80031ec <SystemInit+0xec>)
 800310c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003110:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003114:	4b36      	ldr	r3, [pc, #216]	; (80031f0 <SystemInit+0xf0>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 030f 	and.w	r3, r3, #15
 800311c:	2b06      	cmp	r3, #6
 800311e:	d807      	bhi.n	8003130 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003120:	4b33      	ldr	r3, [pc, #204]	; (80031f0 <SystemInit+0xf0>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f023 030f 	bic.w	r3, r3, #15
 8003128:	4a31      	ldr	r2, [pc, #196]	; (80031f0 <SystemInit+0xf0>)
 800312a:	f043 0307 	orr.w	r3, r3, #7
 800312e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003130:	4b30      	ldr	r3, [pc, #192]	; (80031f4 <SystemInit+0xf4>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a2f      	ldr	r2, [pc, #188]	; (80031f4 <SystemInit+0xf4>)
 8003136:	f043 0301 	orr.w	r3, r3, #1
 800313a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800313c:	4b2d      	ldr	r3, [pc, #180]	; (80031f4 <SystemInit+0xf4>)
 800313e:	2200      	movs	r2, #0
 8003140:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003142:	4b2c      	ldr	r3, [pc, #176]	; (80031f4 <SystemInit+0xf4>)
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	492b      	ldr	r1, [pc, #172]	; (80031f4 <SystemInit+0xf4>)
 8003148:	4b2b      	ldr	r3, [pc, #172]	; (80031f8 <SystemInit+0xf8>)
 800314a:	4013      	ands	r3, r2
 800314c:	600b      	str	r3, [r1, #0]
  
//  SCB->VTOR = FLASH_BASE; /* sets the initial address of interrupt vector */

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800314e:	4b28      	ldr	r3, [pc, #160]	; (80031f0 <SystemInit+0xf0>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0308 	and.w	r3, r3, #8
 8003156:	2b00      	cmp	r3, #0
 8003158:	d007      	beq.n	800316a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800315a:	4b25      	ldr	r3, [pc, #148]	; (80031f0 <SystemInit+0xf0>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f023 030f 	bic.w	r3, r3, #15
 8003162:	4a23      	ldr	r2, [pc, #140]	; (80031f0 <SystemInit+0xf0>)
 8003164:	f043 0307 	orr.w	r3, r3, #7
 8003168:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800316a:	4b22      	ldr	r3, [pc, #136]	; (80031f4 <SystemInit+0xf4>)
 800316c:	2200      	movs	r2, #0
 800316e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003170:	4b20      	ldr	r3, [pc, #128]	; (80031f4 <SystemInit+0xf4>)
 8003172:	2200      	movs	r2, #0
 8003174:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003176:	4b1f      	ldr	r3, [pc, #124]	; (80031f4 <SystemInit+0xf4>)
 8003178:	2200      	movs	r2, #0
 800317a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800317c:	4b1d      	ldr	r3, [pc, #116]	; (80031f4 <SystemInit+0xf4>)
 800317e:	4a1f      	ldr	r2, [pc, #124]	; (80031fc <SystemInit+0xfc>)
 8003180:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003182:	4b1c      	ldr	r3, [pc, #112]	; (80031f4 <SystemInit+0xf4>)
 8003184:	4a1e      	ldr	r2, [pc, #120]	; (8003200 <SystemInit+0x100>)
 8003186:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003188:	4b1a      	ldr	r3, [pc, #104]	; (80031f4 <SystemInit+0xf4>)
 800318a:	4a1e      	ldr	r2, [pc, #120]	; (8003204 <SystemInit+0x104>)
 800318c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800318e:	4b19      	ldr	r3, [pc, #100]	; (80031f4 <SystemInit+0xf4>)
 8003190:	2200      	movs	r2, #0
 8003192:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003194:	4b17      	ldr	r3, [pc, #92]	; (80031f4 <SystemInit+0xf4>)
 8003196:	4a1b      	ldr	r2, [pc, #108]	; (8003204 <SystemInit+0x104>)
 8003198:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800319a:	4b16      	ldr	r3, [pc, #88]	; (80031f4 <SystemInit+0xf4>)
 800319c:	2200      	movs	r2, #0
 800319e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80031a0:	4b14      	ldr	r3, [pc, #80]	; (80031f4 <SystemInit+0xf4>)
 80031a2:	4a18      	ldr	r2, [pc, #96]	; (8003204 <SystemInit+0x104>)
 80031a4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80031a6:	4b13      	ldr	r3, [pc, #76]	; (80031f4 <SystemInit+0xf4>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80031ac:	4b11      	ldr	r3, [pc, #68]	; (80031f4 <SystemInit+0xf4>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a10      	ldr	r2, [pc, #64]	; (80031f4 <SystemInit+0xf4>)
 80031b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031b6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80031b8:	4b0e      	ldr	r3, [pc, #56]	; (80031f4 <SystemInit+0xf4>)
 80031ba:	2200      	movs	r2, #0
 80031bc:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80031be:	4b12      	ldr	r3, [pc, #72]	; (8003208 <SystemInit+0x108>)
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	4b12      	ldr	r3, [pc, #72]	; (800320c <SystemInit+0x10c>)
 80031c4:	4013      	ands	r3, r2
 80031c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031ca:	d202      	bcs.n	80031d2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80031cc:	4b10      	ldr	r3, [pc, #64]	; (8003210 <SystemInit+0x110>)
 80031ce:	2201      	movs	r2, #1
 80031d0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80031d2:	4b10      	ldr	r3, [pc, #64]	; (8003214 <SystemInit+0x114>)
 80031d4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80031d8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80031da:	4b04      	ldr	r3, [pc, #16]	; (80031ec <SystemInit+0xec>)
 80031dc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80031e0:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80031e2:	bf00      	nop
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr
 80031ec:	e000ed00 	.word	0xe000ed00
 80031f0:	52002000 	.word	0x52002000
 80031f4:	58024400 	.word	0x58024400
 80031f8:	eaf6ed7f 	.word	0xeaf6ed7f
 80031fc:	02020200 	.word	0x02020200
 8003200:	01ff0000 	.word	0x01ff0000
 8003204:	01010280 	.word	0x01010280
 8003208:	5c001000 	.word	0x5c001000
 800320c:	ffff0000 	.word	0xffff0000
 8003210:	51008108 	.word	0x51008108
 8003214:	52004000 	.word	0x52004000

08003218 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003218:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003250 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800321c:	f7ff ff70 	bl	8003100 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003220:	480c      	ldr	r0, [pc, #48]	; (8003254 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003222:	490d      	ldr	r1, [pc, #52]	; (8003258 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003224:	4a0d      	ldr	r2, [pc, #52]	; (800325c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003226:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003228:	e002      	b.n	8003230 <LoopCopyDataInit>

0800322a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800322a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800322c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800322e:	3304      	adds	r3, #4

08003230 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003230:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003232:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003234:	d3f9      	bcc.n	800322a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003236:	4a0a      	ldr	r2, [pc, #40]	; (8003260 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003238:	4c0a      	ldr	r4, [pc, #40]	; (8003264 <LoopFillZerobss+0x22>)
  movs r3, #0
 800323a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800323c:	e001      	b.n	8003242 <LoopFillZerobss>

0800323e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800323e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003240:	3204      	adds	r2, #4

08003242 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003242:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003244:	d3fb      	bcc.n	800323e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003246:	f00b fac1 	bl	800e7cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800324a:	f7fd fa63 	bl	8000714 <main>
  bx  lr
 800324e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003250:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8003254:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003258:	240001e0 	.word	0x240001e0
  ldr r2, =_sidata
 800325c:	08011a54 	.word	0x08011a54
  ldr r2, =_sbss
 8003260:	240001e0 	.word	0x240001e0
  ldr r4, =_ebss
 8003264:	24000c74 	.word	0x24000c74

08003268 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003268:	e7fe      	b.n	8003268 <ADC3_IRQHandler>

0800326a <ads_delay>:

/*============================================================================*/
/* Redefine local functions													  */
/*============================================================================*/

void ads_delay(int time){
 800326a:	b580      	push	{r7, lr}
 800326c:	b082      	sub	sp, #8
 800326e:	af00      	add	r7, sp, #0
 8003270:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4618      	mov	r0, r3
 8003276:	f000 fa49 	bl	800370c <HAL_Delay>
#endif
}
 800327a:	bf00      	nop
 800327c:	3708      	adds	r7, #8
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}

08003282 <writeRegister>:
/*============================================================================*/
/* Local functions														      */
/*============================================================================*/

// Write the register
static bool writeRegister(ads1113_t *i2c, uint8_t reg, uint16_t value) {
 8003282:	b580      	push	{r7, lr}
 8003284:	b088      	sub	sp, #32
 8003286:	af04      	add	r7, sp, #16
 8003288:	6078      	str	r0, [r7, #4]
 800328a:	460b      	mov	r3, r1
 800328c:	70fb      	strb	r3, [r7, #3]
 800328e:	4613      	mov	r3, r2
 8003290:	803b      	strh	r3, [r7, #0]
//	uint8_t pData[3] = { reg, (uint8_t) (value >> 8), (uint8_t) (value & 0xFF) };
//	HAL_I2C_Master_Transmit(i2c->hi2c, i2c->m_i2cAddress, pData, 3, 10);
	uint8_t pData[2];
	pData[0] = (value >> 8);
 8003292:	883b      	ldrh	r3, [r7, #0]
 8003294:	0a1b      	lsrs	r3, r3, #8
 8003296:	b29b      	uxth	r3, r3
 8003298:	b2db      	uxtb	r3, r3
 800329a:	733b      	strb	r3, [r7, #12]
	pData[1] = value & 0xff;
 800329c:	883b      	ldrh	r3, [r7, #0]
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	737b      	strb	r3, [r7, #13]

	if(HAL_I2C_IsDeviceReady(i2c->hi2c, i2c->m_i2cAddress, 10, 10) != HAL_OK) {
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6958      	ldr	r0, [r3, #20]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	8819      	ldrh	r1, [r3, #0]
 80032aa:	230a      	movs	r3, #10
 80032ac:	220a      	movs	r2, #10
 80032ae:	f004 fc05 	bl	8007abc <HAL_I2C_IsDeviceReady>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d001      	beq.n	80032bc <writeRegister+0x3a>
		return false;
 80032b8:	2300      	movs	r3, #0
 80032ba:	e015      	b.n	80032e8 <writeRegister+0x66>
	}

	return HAL_I2C_Mem_Write(i2c->hi2c, i2c->m_i2cAddress, reg, I2C_MEMADD_SIZE_8BIT, pData, 2, 10) == HAL_OK;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6958      	ldr	r0, [r3, #20]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	8819      	ldrh	r1, [r3, #0]
 80032c4:	78fb      	ldrb	r3, [r7, #3]
 80032c6:	b29a      	uxth	r2, r3
 80032c8:	230a      	movs	r3, #10
 80032ca:	9302      	str	r3, [sp, #8]
 80032cc:	2302      	movs	r3, #2
 80032ce:	9301      	str	r3, [sp, #4]
 80032d0:	f107 030c 	add.w	r3, r7, #12
 80032d4:	9300      	str	r3, [sp, #0]
 80032d6:	2301      	movs	r3, #1
 80032d8:	f004 fadc 	bl	8007894 <HAL_I2C_Mem_Write>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	bf0c      	ite	eq
 80032e2:	2301      	moveq	r3, #1
 80032e4:	2300      	movne	r3, #0
 80032e6:	b2db      	uxtb	r3, r3
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3710      	adds	r7, #16
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <readRegister>:

// Read the register
static uint16_t readRegister(ads1113_t *i2c, uint8_t reg) {
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b086      	sub	sp, #24
 80032f4:	af02      	add	r7, sp, #8
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	460b      	mov	r3, r1
 80032fa:	70fb      	strb	r3, [r7, #3]
	HAL_I2C_Master_Transmit(i2c->hi2c, i2c->m_i2cAddress, &reg, 1, 10);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6958      	ldr	r0, [r3, #20]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	8819      	ldrh	r1, [r3, #0]
 8003304:	1cfa      	adds	r2, r7, #3
 8003306:	230a      	movs	r3, #10
 8003308:	9300      	str	r3, [sp, #0]
 800330a:	2301      	movs	r3, #1
 800330c:	f004 f8d8 	bl	80074c0 <HAL_I2C_Master_Transmit>
	uint8_t pData[2] = { 0, 0 };
 8003310:	2300      	movs	r3, #0
 8003312:	81bb      	strh	r3, [r7, #12]
	HAL_I2C_Master_Receive(i2c->hi2c, i2c->m_i2cAddress, pData, 2, 10);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6958      	ldr	r0, [r3, #20]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	8819      	ldrh	r1, [r3, #0]
 800331c:	f107 020c 	add.w	r2, r7, #12
 8003320:	230a      	movs	r3, #10
 8003322:	9300      	str	r3, [sp, #0]
 8003324:	2302      	movs	r3, #2
 8003326:	f004 f9bf 	bl	80076a8 <HAL_I2C_Master_Receive>
	return ((pData[0] << 8) | pData[1]);
 800332a:	7b3b      	ldrb	r3, [r7, #12]
 800332c:	021b      	lsls	r3, r3, #8
 800332e:	b21a      	sxth	r2, r3
 8003330:	7b7b      	ldrb	r3, [r7, #13]
 8003332:	b21b      	sxth	r3, r3
 8003334:	4313      	orrs	r3, r2
 8003336:	b21b      	sxth	r3, r3
 8003338:	b29b      	uxth	r3, r3
}
 800333a:	4618      	mov	r0, r3
 800333c:	3710      	adds	r7, #16
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}

08003342 <ADSbegin>:

// Check if we have correct connection.
static bool ADSbegin(ads1113_t *i2c) {
 8003342:	b580      	push	{r7, lr}
 8003344:	b082      	sub	sp, #8
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
//	if (HAL_I2C_IsDeviceReady(i2c->hi2c, i2c->m_i2cAddress, 10, 10) != HAL_OK)
//		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET); // This MUST have GPIO PA5 ready to use - ERROR I2C - Wrong address
	if (HAL_I2C_Init(i2c->hi2c) == HAL_OK){
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	695b      	ldr	r3, [r3, #20]
 800334e:	4618      	mov	r0, r3
 8003350:	f003 fff6 	bl	8007340 <HAL_I2C_Init>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d10c      	bne.n	8003374 <ADSbegin+0x32>
		if(HAL_I2C_IsDeviceReady(i2c->hi2c, i2c->m_i2cAddress, 10, 100) == HAL_OK)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6958      	ldr	r0, [r3, #20]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	8819      	ldrh	r1, [r3, #0]
 8003362:	2364      	movs	r3, #100	; 0x64
 8003364:	220a      	movs	r2, #10
 8003366:	f004 fba9 	bl	8007abc <HAL_I2C_IsDeviceReady>
 800336a:	4603      	mov	r3, r0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d101      	bne.n	8003374 <ADSbegin+0x32>
			return true;
 8003370:	2301      	movs	r3, #1
 8003372:	e000      	b.n	8003376 <ADSbegin+0x34>
	}
	return false;
 8003374:	2300      	movs	r3, #0
}
 8003376:	4618      	mov	r0, r3
 8003378:	3708      	adds	r7, #8
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
	...

08003380 <ADS1113_init>:

// Declare an ADS1115 structure
bool ADS1113_init(ads1113_t *i2c, I2C_HandleTypeDef *hi2c, uint8_t i2cAddress) {
 8003380:	b580      	push	{r7, lr}
 8003382:	b084      	sub	sp, #16
 8003384:	af00      	add	r7, sp, #0
 8003386:	60f8      	str	r0, [r7, #12]
 8003388:	60b9      	str	r1, [r7, #8]
 800338a:	4613      	mov	r3, r2
 800338c:	71fb      	strb	r3, [r7, #7]
//	i2c->m_bitShift = 0;
//	i2c->m_gain = GAIN_ONE; // +/- 4.096V: In our case VDD is 3.3V, so we must not exceed 3.6 V.
//	i2c->full_scale = 4.096f;
//	ADSbegin(i2c);

	i2c->hi2c = hi2c;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	68ba      	ldr	r2, [r7, #8]
 8003392:	615a      	str	r2, [r3, #20]
	i2c->m_i2cAddress = i2cAddress << 1; //  It's Important to shift the address << 1
 8003394:	79fb      	ldrb	r3, [r7, #7]
 8003396:	b29b      	uxth	r3, r3
 8003398:	005b      	lsls	r3, r3, #1
 800339a:	b29a      	uxth	r2, r3
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	801a      	strh	r2, [r3, #0]
	i2c->m_conversionDelay = ADS1115_CONVERSIONDELAY;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2208      	movs	r2, #8
 80033a4:	605a      	str	r2, [r3, #4]
	i2c->m_bitShift = 0;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2200      	movs	r2, #0
 80033aa:	721a      	strb	r2, [r3, #8]
	i2c->m_gain = GAIN_ONE; // +/- 4.096V: In our case VDD is 3.3V, so we must not exceed 3.6 V.
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033b2:	821a      	strh	r2, [r3, #16]
	i2c->full_scale = 4.096f;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	4a30      	ldr	r2, [pc, #192]	; (8003478 <ADS1113_init+0xf8>)
 80033b8:	60da      	str	r2, [r3, #12]

	//Deinit the port
	if (HAL_I2C_DeInit(i2c->hi2c) != HAL_OK){
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	695b      	ldr	r3, [r3, #20]
 80033be:	4618      	mov	r0, r3
 80033c0:	f004 f84e 	bl	8007460 <HAL_I2C_DeInit>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d001      	beq.n	80033ce <ADS1113_init+0x4e>
		return false;
 80033ca:	2300      	movs	r3, #0
 80033cc:	e04f      	b.n	800346e <ADS1113_init+0xee>
	}
	//Configure I2C port
	i2c->hi2c->Instance = I2C1;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	695b      	ldr	r3, [r3, #20]
 80033d2:	4a2a      	ldr	r2, [pc, #168]	; (800347c <ADS1113_init+0xfc>)
 80033d4:	601a      	str	r2, [r3, #0]
	i2c->hi2c->Init.Timing = 0x00401242;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	695b      	ldr	r3, [r3, #20]
 80033da:	4a29      	ldr	r2, [pc, #164]	; (8003480 <ADS1113_init+0x100>)
 80033dc:	605a      	str	r2, [r3, #4]
	i2c->hi2c->Init.OwnAddress1 = 0;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	695b      	ldr	r3, [r3, #20]
 80033e2:	2200      	movs	r2, #0
 80033e4:	609a      	str	r2, [r3, #8]
	i2c->hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	695b      	ldr	r3, [r3, #20]
 80033ea:	2201      	movs	r2, #1
 80033ec:	60da      	str	r2, [r3, #12]
	i2c->hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	695b      	ldr	r3, [r3, #20]
 80033f2:	2200      	movs	r2, #0
 80033f4:	611a      	str	r2, [r3, #16]
	i2c->hi2c->Init.OwnAddress2 = 0;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	695b      	ldr	r3, [r3, #20]
 80033fa:	2200      	movs	r2, #0
 80033fc:	615a      	str	r2, [r3, #20]
	i2c->hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	695b      	ldr	r3, [r3, #20]
 8003402:	2200      	movs	r2, #0
 8003404:	619a      	str	r2, [r3, #24]
	i2c->hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	695b      	ldr	r3, [r3, #20]
 800340a:	2200      	movs	r2, #0
 800340c:	61da      	str	r2, [r3, #28]
	i2c->hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	695b      	ldr	r3, [r3, #20]
 8003412:	2200      	movs	r2, #0
 8003414:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(i2c->hi2c) != HAL_OK)
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	695b      	ldr	r3, [r3, #20]
 800341a:	4618      	mov	r0, r3
 800341c:	f003 ff90 	bl	8007340 <HAL_I2C_Init>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d001      	beq.n	800342a <ADS1113_init+0xaa>
	{
		return false;
 8003426:	2300      	movs	r3, #0
 8003428:	e021      	b.n	800346e <ADS1113_init+0xee>
	}
	/** Configure Analogue filter
	*/
	if (HAL_I2CEx_ConfigAnalogFilter(i2c->hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	695b      	ldr	r3, [r3, #20]
 800342e:	2100      	movs	r1, #0
 8003430:	4618      	mov	r0, r3
 8003432:	f004 fe7f 	bl	8008134 <HAL_I2CEx_ConfigAnalogFilter>
 8003436:	4603      	mov	r3, r0
 8003438:	2b00      	cmp	r3, #0
 800343a:	d001      	beq.n	8003440 <ADS1113_init+0xc0>
	{
		return false;
 800343c:	2300      	movs	r3, #0
 800343e:	e016      	b.n	800346e <ADS1113_init+0xee>
	}
	/** Configure Digital filter
	*/
	if (HAL_I2CEx_ConfigDigitalFilter(i2c->hi2c, 0x0F) != HAL_OK)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	695b      	ldr	r3, [r3, #20]
 8003444:	210f      	movs	r1, #15
 8003446:	4618      	mov	r0, r3
 8003448:	f004 febf 	bl	80081ca <HAL_I2CEx_ConfigDigitalFilter>
 800344c:	4603      	mov	r3, r0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d001      	beq.n	8003456 <ADS1113_init+0xd6>
	{
		return false;
 8003452:	2300      	movs	r3, #0
 8003454:	e00b      	b.n	800346e <ADS1113_init+0xee>
	}
	/** I2C Enable Fast Mode Plus
	*/
	HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 8003456:	2001      	movs	r0, #1
 8003458:	f004 ff04 	bl	8008264 <HAL_I2CEx_EnableFastModePlus>

	if (ADSbegin(i2c) != HAL_OK)
 800345c:	68f8      	ldr	r0, [r7, #12]
 800345e:	f7ff ff70 	bl	8003342 <ADSbegin>
 8003462:	4603      	mov	r3, r0
 8003464:	2b00      	cmp	r3, #0
 8003466:	d001      	beq.n	800346c <ADS1113_init+0xec>
	{
		return false;
 8003468:	2300      	movs	r3, #0
 800346a:	e000      	b.n	800346e <ADS1113_init+0xee>
	}

	return true;
 800346c:	2301      	movs	r3, #1

}
 800346e:	4618      	mov	r0, r3
 8003470:	3710      	adds	r7, #16
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	4083126f 	.word	0x4083126f
 800347c:	40005400 	.word	0x40005400
 8003480:	00401242 	.word	0x00401242

08003484 <ADSsetGain>:
 // ADSsetGain(GAIN_TWO);        // 2x gain   +/- 2.048V  1 bit = 1mV      0.0625mV
 // ADSsetGain(GAIN_FOUR);       // 4x gain   +/- 1.024V  1 bit = 0.5mV    0.03125mV
 // ADSsetGain(GAIN_EIGHT);      // 8x gain   +/- 0.512V  1 bit = 0.25mV   0.015625mV
 // ADSsetGain(GAIN_SIXTEEN);    // 16x gain  +/- 0.256V  1 bit = 0.125mV  0.0078125mV
 */
void ADSsetGain(ads1113_t *i2c, adsGain_t gain) {
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	460b      	mov	r3, r1
 800348e:	807b      	strh	r3, [r7, #2]
	i2c->m_gain = gain;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	887a      	ldrh	r2, [r7, #2]
 8003494:	821a      	strh	r2, [r3, #16]
	switch(gain) {
 8003496:	887b      	ldrh	r3, [r7, #2]
 8003498:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800349c:	d02e      	beq.n	80034fc <ADSsetGain+0x78>
 800349e:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80034a2:	dc2f      	bgt.n	8003504 <ADSsetGain+0x80>
 80034a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034a8:	d024      	beq.n	80034f4 <ADSsetGain+0x70>
 80034aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034ae:	dc29      	bgt.n	8003504 <ADSsetGain+0x80>
 80034b0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80034b4:	d01a      	beq.n	80034ec <ADSsetGain+0x68>
 80034b6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80034ba:	dc23      	bgt.n	8003504 <ADSsetGain+0x80>
 80034bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034c0:	d010      	beq.n	80034e4 <ADSsetGain+0x60>
 80034c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034c6:	dc1d      	bgt.n	8003504 <ADSsetGain+0x80>
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d003      	beq.n	80034d4 <ADSsetGain+0x50>
 80034cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034d0:	d004      	beq.n	80034dc <ADSsetGain+0x58>
		break;
	case GAIN_SIXTEEN:
		i2c->full_scale = 0.256;
		break;
	}
}
 80034d2:	e017      	b.n	8003504 <ADSsetGain+0x80>
		i2c->full_scale = 6.6144;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	4a0e      	ldr	r2, [pc, #56]	; (8003510 <ADSsetGain+0x8c>)
 80034d8:	60da      	str	r2, [r3, #12]
		break;
 80034da:	e013      	b.n	8003504 <ADSsetGain+0x80>
		i2c->full_scale = 4.096;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	4a0d      	ldr	r2, [pc, #52]	; (8003514 <ADSsetGain+0x90>)
 80034e0:	60da      	str	r2, [r3, #12]
		break;
 80034e2:	e00f      	b.n	8003504 <ADSsetGain+0x80>
		i2c->full_scale = 2.048;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	4a0c      	ldr	r2, [pc, #48]	; (8003518 <ADSsetGain+0x94>)
 80034e8:	60da      	str	r2, [r3, #12]
		break;
 80034ea:	e00b      	b.n	8003504 <ADSsetGain+0x80>
		i2c->full_scale = 1.024;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	4a0b      	ldr	r2, [pc, #44]	; (800351c <ADSsetGain+0x98>)
 80034f0:	60da      	str	r2, [r3, #12]
		break;
 80034f2:	e007      	b.n	8003504 <ADSsetGain+0x80>
		i2c->full_scale = 0.512;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	4a0a      	ldr	r2, [pc, #40]	; (8003520 <ADSsetGain+0x9c>)
 80034f8:	60da      	str	r2, [r3, #12]
		break;
 80034fa:	e003      	b.n	8003504 <ADSsetGain+0x80>
		i2c->full_scale = 0.256;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	4a09      	ldr	r2, [pc, #36]	; (8003524 <ADSsetGain+0xa0>)
 8003500:	60da      	str	r2, [r3, #12]
		break;
 8003502:	bf00      	nop
}
 8003504:	bf00      	nop
 8003506:	370c      	adds	r7, #12
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr
 8003510:	40d3a92a 	.word	0x40d3a92a
 8003514:	4083126f 	.word	0x4083126f
 8003518:	4003126f 	.word	0x4003126f
 800351c:	3f83126f 	.word	0x3f83126f
 8003520:	3f03126f 	.word	0x3f03126f
 8003524:	3e83126f 	.word	0x3e83126f

08003528 <ADSreadADC_Differential_0_1>:
/*
 * Reads the conversion results, measuring the voltage
 * difference between the P (AIN0) and N (AIN1) input.  Generates
 * a signed value since the difference can be either positive or negative.
 */
int16_t ADSreadADC_Differential_0_1(ads1113_t *i2c) {
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
	// Start with default values
	uint16_t config =
 8003530:	f240 1383 	movw	r3, #387	; 0x183
 8003534:	81bb      	strh	r3, [r7, #12]
	ADS1015_REG_CONFIG_CMODE_TRAD 	| 	// Traditional comparator (default val)
	ADS1015_REG_CONFIG_DR_1600SPS 	| 	// 1600 samples per second (default)
	ADS1015_REG_CONFIG_MODE_SINGLE;   	// Single-shot mode (default)

	// Set PGA/voltage range
	config |= i2c->m_gain;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	8a1a      	ldrh	r2, [r3, #16]
 800353a:	89bb      	ldrh	r3, [r7, #12]
 800353c:	4313      	orrs	r3, r2
 800353e:	81bb      	strh	r3, [r7, #12]

	// Set channels
	config |= ADS1015_REG_CONFIG_MUX_DIFF_0_1; // AIN0 = P, AIN1 = N

	// Set 'start single-conversion' bit
	config |= ADS1015_REG_CONFIG_OS_SINGLE;
 8003540:	89bb      	ldrh	r3, [r7, #12]
 8003542:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003546:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800354a:	81bb      	strh	r3, [r7, #12]

	// Write config register to the ADC
	writeRegister(i2c, ADS1015_REG_POINTER_CONFIG, config);
 800354c:	89bb      	ldrh	r3, [r7, #12]
 800354e:	461a      	mov	r2, r3
 8003550:	2101      	movs	r1, #1
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f7ff fe95 	bl	8003282 <writeRegister>

	// Wait for the conversion to complete
	ads_delay(i2c->m_conversionDelay);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	4618      	mov	r0, r3
 800355e:	f7ff fe84 	bl	800326a <ads_delay>

	// Read the conversion results
	uint16_t res = readRegister(i2c, ADS1015_REG_POINTER_CONVERT) >> i2c->m_bitShift;
 8003562:	2100      	movs	r1, #0
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f7ff fec3 	bl	80032f0 <readRegister>
 800356a:	4603      	mov	r3, r0
 800356c:	461a      	mov	r2, r3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	7a1b      	ldrb	r3, [r3, #8]
 8003572:	fa42 f303 	asr.w	r3, r2, r3
 8003576:	81fb      	strh	r3, [r7, #14]
	if (i2c->m_bitShift == 0) {
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	7a1b      	ldrb	r3, [r3, #8]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d102      	bne.n	8003586 <ADSreadADC_Differential_0_1+0x5e>
		return (int16_t) res;
 8003580:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003584:	e00b      	b.n	800359e <ADSreadADC_Differential_0_1+0x76>
	} else {
		// Shift 12-bit results right 4 bits for the ADS1015,
		// making sure we keep the sign bit intact
		if (res > 0x07FF) {
 8003586:	89fb      	ldrh	r3, [r7, #14]
 8003588:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800358c:	d305      	bcc.n	800359a <ADSreadADC_Differential_0_1+0x72>
			// negative number - extend the sign to 16th bit
			res |= 0xF000;
 800358e:	89fb      	ldrh	r3, [r7, #14]
 8003590:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8003594:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8003598:	81fb      	strh	r3, [r7, #14]
		}
		return (int16_t) res;
 800359a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
	}
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3710      	adds	r7, #16
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
	...

080035a8 <ADSreadADC_Voltage>:


float ADSreadADC_Voltage(ads1113_t *i2c) {
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
	float coeff = i2c->full_scale/(ADS_MAX_VALUE*ADS_VOLTAGE_DIVIDER_RATIO);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	ed93 7a03 	vldr	s14, [r3, #12]
 80035b6:	eddf 6a0b 	vldr	s13, [pc, #44]	; 80035e4 <ADSreadADC_Voltage+0x3c>
 80035ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80035be:	edc7 7a03 	vstr	s15, [r7, #12]
	return ADSreadADC_Differential_0_1(i2c) * coeff;
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f7ff ffb0 	bl	8003528 <ADSreadADC_Differential_0_1>
 80035c8:	4603      	mov	r3, r0
 80035ca:	ee07 3a90 	vmov	s15, r3
 80035ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80035d2:	edd7 7a03 	vldr	s15, [r7, #12]
 80035d6:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 80035da:	eeb0 0a67 	vmov.f32	s0, s15
 80035de:	3710      	adds	r7, #16
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	45614000 	.word	0x45614000

080035e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b082      	sub	sp, #8
 80035ec:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80035ee:	2003      	movs	r0, #3
 80035f0:	f001 fa16 	bl	8004a20 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80035f4:	f005 fd14 	bl	8009020 <HAL_RCC_GetSysClockFreq>
 80035f8:	4602      	mov	r2, r0
 80035fa:	4b15      	ldr	r3, [pc, #84]	; (8003650 <HAL_Init+0x68>)
 80035fc:	699b      	ldr	r3, [r3, #24]
 80035fe:	0a1b      	lsrs	r3, r3, #8
 8003600:	f003 030f 	and.w	r3, r3, #15
 8003604:	4913      	ldr	r1, [pc, #76]	; (8003654 <HAL_Init+0x6c>)
 8003606:	5ccb      	ldrb	r3, [r1, r3]
 8003608:	f003 031f 	and.w	r3, r3, #31
 800360c:	fa22 f303 	lsr.w	r3, r2, r3
 8003610:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003612:	4b0f      	ldr	r3, [pc, #60]	; (8003650 <HAL_Init+0x68>)
 8003614:	699b      	ldr	r3, [r3, #24]
 8003616:	f003 030f 	and.w	r3, r3, #15
 800361a:	4a0e      	ldr	r2, [pc, #56]	; (8003654 <HAL_Init+0x6c>)
 800361c:	5cd3      	ldrb	r3, [r2, r3]
 800361e:	f003 031f 	and.w	r3, r3, #31
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	fa22 f303 	lsr.w	r3, r2, r3
 8003628:	4a0b      	ldr	r2, [pc, #44]	; (8003658 <HAL_Init+0x70>)
 800362a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800362c:	4a0b      	ldr	r2, [pc, #44]	; (800365c <HAL_Init+0x74>)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003632:	2000      	movs	r0, #0
 8003634:	f000 f814 	bl	8003660 <HAL_InitTick>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d001      	beq.n	8003642 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e002      	b.n	8003648 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003642:	f7fe fb0b 	bl	8001c5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003646:	2300      	movs	r3, #0
}
 8003648:	4618      	mov	r0, r3
 800364a:	3708      	adds	r7, #8
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}
 8003650:	58024400 	.word	0x58024400
 8003654:	08011610 	.word	0x08011610
 8003658:	24000004 	.word	0x24000004
 800365c:	24000000 	.word	0x24000000

08003660 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b082      	sub	sp, #8
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003668:	4b15      	ldr	r3, [pc, #84]	; (80036c0 <HAL_InitTick+0x60>)
 800366a:	781b      	ldrb	r3, [r3, #0]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d101      	bne.n	8003674 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e021      	b.n	80036b8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003674:	4b13      	ldr	r3, [pc, #76]	; (80036c4 <HAL_InitTick+0x64>)
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	4b11      	ldr	r3, [pc, #68]	; (80036c0 <HAL_InitTick+0x60>)
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	4619      	mov	r1, r3
 800367e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003682:	fbb3 f3f1 	udiv	r3, r3, r1
 8003686:	fbb2 f3f3 	udiv	r3, r2, r3
 800368a:	4618      	mov	r0, r3
 800368c:	f001 f9fb 	bl	8004a86 <HAL_SYSTICK_Config>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d001      	beq.n	800369a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e00e      	b.n	80036b8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2b0f      	cmp	r3, #15
 800369e:	d80a      	bhi.n	80036b6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80036a0:	2200      	movs	r2, #0
 80036a2:	6879      	ldr	r1, [r7, #4]
 80036a4:	f04f 30ff 	mov.w	r0, #4294967295
 80036a8:	f001 f9c5 	bl	8004a36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80036ac:	4a06      	ldr	r2, [pc, #24]	; (80036c8 <HAL_InitTick+0x68>)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80036b2:	2300      	movs	r3, #0
 80036b4:	e000      	b.n	80036b8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3708      	adds	r7, #8
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	2400000c 	.word	0x2400000c
 80036c4:	24000000 	.word	0x24000000
 80036c8:	24000008 	.word	0x24000008

080036cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036cc:	b480      	push	{r7}
 80036ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80036d0:	4b06      	ldr	r3, [pc, #24]	; (80036ec <HAL_IncTick+0x20>)
 80036d2:	781b      	ldrb	r3, [r3, #0]
 80036d4:	461a      	mov	r2, r3
 80036d6:	4b06      	ldr	r3, [pc, #24]	; (80036f0 <HAL_IncTick+0x24>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4413      	add	r3, r2
 80036dc:	4a04      	ldr	r2, [pc, #16]	; (80036f0 <HAL_IncTick+0x24>)
 80036de:	6013      	str	r3, [r2, #0]
}
 80036e0:	bf00      	nop
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr
 80036ea:	bf00      	nop
 80036ec:	2400000c 	.word	0x2400000c
 80036f0:	24000c60 	.word	0x24000c60

080036f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036f4:	b480      	push	{r7}
 80036f6:	af00      	add	r7, sp, #0
  return uwTick;
 80036f8:	4b03      	ldr	r3, [pc, #12]	; (8003708 <HAL_GetTick+0x14>)
 80036fa:	681b      	ldr	r3, [r3, #0]
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr
 8003706:	bf00      	nop
 8003708:	24000c60 	.word	0x24000c60

0800370c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b084      	sub	sp, #16
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003714:	f7ff ffee 	bl	80036f4 <HAL_GetTick>
 8003718:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003724:	d005      	beq.n	8003732 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003726:	4b0a      	ldr	r3, [pc, #40]	; (8003750 <HAL_Delay+0x44>)
 8003728:	781b      	ldrb	r3, [r3, #0]
 800372a:	461a      	mov	r2, r3
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	4413      	add	r3, r2
 8003730:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003732:	bf00      	nop
 8003734:	f7ff ffde 	bl	80036f4 <HAL_GetTick>
 8003738:	4602      	mov	r2, r0
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	68fa      	ldr	r2, [r7, #12]
 8003740:	429a      	cmp	r2, r3
 8003742:	d8f7      	bhi.n	8003734 <HAL_Delay+0x28>
  {
  }
}
 8003744:	bf00      	nop
 8003746:	bf00      	nop
 8003748:	3710      	adds	r7, #16
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
 800374e:	bf00      	nop
 8003750:	2400000c 	.word	0x2400000c

08003754 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003754:	b480      	push	{r7}
 8003756:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003758:	4b03      	ldr	r3, [pc, #12]	; (8003768 <HAL_GetREVID+0x14>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	0c1b      	lsrs	r3, r3, #16
}
 800375e:	4618      	mov	r0, r3
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr
 8003768:	5c001000 	.word	0x5c001000

0800376c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	431a      	orrs	r2, r3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	609a      	str	r2, [r3, #8]
}
 8003786:	bf00      	nop
 8003788:	370c      	adds	r7, #12
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr

08003792 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003792:	b480      	push	{r7}
 8003794:	b083      	sub	sp, #12
 8003796:	af00      	add	r7, sp, #0
 8003798:	6078      	str	r0, [r7, #4]
 800379a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	431a      	orrs	r2, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	609a      	str	r2, [r3, #8]
}
 80037ac:	bf00      	nop
 80037ae:	370c      	adds	r7, #12
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr

080037b8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	370c      	adds	r7, #12
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr

080037d4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b087      	sub	sp, #28
 80037d8:	af00      	add	r7, sp, #0
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	60b9      	str	r1, [r7, #8]
 80037de:	607a      	str	r2, [r7, #4]
 80037e0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	3360      	adds	r3, #96	; 0x60
 80037e6:	461a      	mov	r2, r3
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	4413      	add	r3, r2
 80037ee:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	430b      	orrs	r3, r1
 8003802:	431a      	orrs	r2, r3
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003808:	bf00      	nop
 800380a:	371c      	adds	r7, #28
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr

08003814 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003814:	b480      	push	{r7}
 8003816:	b085      	sub	sp, #20
 8003818:	af00      	add	r7, sp, #0
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	60b9      	str	r1, [r7, #8]
 800381e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	691b      	ldr	r3, [r3, #16]
 8003824:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	f003 031f 	and.w	r3, r3, #31
 800382e:	6879      	ldr	r1, [r7, #4]
 8003830:	fa01 f303 	lsl.w	r3, r1, r3
 8003834:	431a      	orrs	r2, r3
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	611a      	str	r2, [r3, #16]
}
 800383a:	bf00      	nop
 800383c:	3714      	adds	r7, #20
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr

08003846 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003846:	b480      	push	{r7}
 8003848:	b087      	sub	sp, #28
 800384a:	af00      	add	r7, sp, #0
 800384c:	60f8      	str	r0, [r7, #12]
 800384e:	60b9      	str	r1, [r7, #8]
 8003850:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	3360      	adds	r3, #96	; 0x60
 8003856:	461a      	mov	r2, r3
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	4413      	add	r3, r2
 800385e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	431a      	orrs	r2, r3
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	601a      	str	r2, [r3, #0]
  }
}
 8003870:	bf00      	nop
 8003872:	371c      	adds	r7, #28
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr

0800387c <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800387c:	b480      	push	{r7}
 800387e:	b087      	sub	sp, #28
 8003880:	af00      	add	r7, sp, #0
 8003882:	60f8      	str	r0, [r7, #12]
 8003884:	60b9      	str	r1, [r7, #8]
 8003886:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	3330      	adds	r3, #48	; 0x30
 800388c:	461a      	mov	r2, r3
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	0a1b      	lsrs	r3, r3, #8
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	f003 030c 	and.w	r3, r3, #12
 8003898:	4413      	add	r3, r2
 800389a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	f003 031f 	and.w	r3, r3, #31
 80038a6:	211f      	movs	r1, #31
 80038a8:	fa01 f303 	lsl.w	r3, r1, r3
 80038ac:	43db      	mvns	r3, r3
 80038ae:	401a      	ands	r2, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	0e9b      	lsrs	r3, r3, #26
 80038b4:	f003 011f 	and.w	r1, r3, #31
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	f003 031f 	and.w	r3, r3, #31
 80038be:	fa01 f303 	lsl.w	r3, r1, r3
 80038c2:	431a      	orrs	r2, r3
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80038c8:	bf00      	nop
 80038ca:	371c      	adds	r7, #28
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b087      	sub	sp, #28
 80038d8:	af00      	add	r7, sp, #0
 80038da:	60f8      	str	r0, [r7, #12]
 80038dc:	60b9      	str	r1, [r7, #8]
 80038de:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	3314      	adds	r3, #20
 80038e4:	461a      	mov	r2, r3
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	0e5b      	lsrs	r3, r3, #25
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	f003 0304 	and.w	r3, r3, #4
 80038f0:	4413      	add	r3, r2
 80038f2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	0d1b      	lsrs	r3, r3, #20
 80038fc:	f003 031f 	and.w	r3, r3, #31
 8003900:	2107      	movs	r1, #7
 8003902:	fa01 f303 	lsl.w	r3, r1, r3
 8003906:	43db      	mvns	r3, r3
 8003908:	401a      	ands	r2, r3
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	0d1b      	lsrs	r3, r3, #20
 800390e:	f003 031f 	and.w	r3, r3, #31
 8003912:	6879      	ldr	r1, [r7, #4]
 8003914:	fa01 f303 	lsl.w	r3, r1, r3
 8003918:	431a      	orrs	r2, r3
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800391e:	bf00      	nop
 8003920:	371c      	adds	r7, #28
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr
	...

0800392c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800392c:	b480      	push	{r7}
 800392e:	b085      	sub	sp, #20
 8003930:	af00      	add	r7, sp, #0
 8003932:	60f8      	str	r0, [r7, #12]
 8003934:	60b9      	str	r1, [r7, #8]
 8003936:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003944:	43db      	mvns	r3, r3
 8003946:	401a      	ands	r2, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	f003 0318 	and.w	r3, r3, #24
 800394e:	4908      	ldr	r1, [pc, #32]	; (8003970 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003950:	40d9      	lsrs	r1, r3
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	400b      	ands	r3, r1
 8003956:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800395a:	431a      	orrs	r2, r3
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8003962:	bf00      	nop
 8003964:	3714      	adds	r7, #20
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr
 800396e:	bf00      	nop
 8003970:	000fffff 	.word	0x000fffff

08003974 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	689a      	ldr	r2, [r3, #8]
 8003980:	4b04      	ldr	r3, [pc, #16]	; (8003994 <LL_ADC_DisableDeepPowerDown+0x20>)
 8003982:	4013      	ands	r3, r2
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	6093      	str	r3, [r2, #8]
}
 8003988:	bf00      	nop
 800398a:	370c      	adds	r7, #12
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr
 8003994:	5fffffc0 	.word	0x5fffffc0

08003998 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80039a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039ac:	d101      	bne.n	80039b2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80039ae:	2301      	movs	r3, #1
 80039b0:	e000      	b.n	80039b4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80039b2:	2300      	movs	r3, #0
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	370c      	adds	r7, #12
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr

080039c0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	689a      	ldr	r2, [r3, #8]
 80039cc:	4b05      	ldr	r3, [pc, #20]	; (80039e4 <LL_ADC_EnableInternalRegulator+0x24>)
 80039ce:	4013      	ands	r3, r2
 80039d0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80039d8:	bf00      	nop
 80039da:	370c      	adds	r7, #12
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr
 80039e4:	6fffffc0 	.word	0x6fffffc0

080039e8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b083      	sub	sp, #12
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039fc:	d101      	bne.n	8003a02 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80039fe:	2301      	movs	r3, #1
 8003a00:	e000      	b.n	8003a04 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003a02:	2300      	movs	r3, #0
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	370c      	adds	r7, #12
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr

08003a10 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b083      	sub	sp, #12
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	f003 0301 	and.w	r3, r3, #1
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d101      	bne.n	8003a28 <LL_ADC_IsEnabled+0x18>
 8003a24:	2301      	movs	r3, #1
 8003a26:	e000      	b.n	8003a2a <LL_ADC_IsEnabled+0x1a>
 8003a28:	2300      	movs	r3, #0
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	370c      	adds	r7, #12
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr

08003a36 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003a36:	b480      	push	{r7}
 8003a38:	b083      	sub	sp, #12
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	f003 0304 	and.w	r3, r3, #4
 8003a46:	2b04      	cmp	r3, #4
 8003a48:	d101      	bne.n	8003a4e <LL_ADC_REG_IsConversionOngoing+0x18>
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e000      	b.n	8003a50 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003a4e:	2300      	movs	r3, #0
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	370c      	adds	r7, #12
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr

08003a5c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	f003 0308 	and.w	r3, r3, #8
 8003a6c:	2b08      	cmp	r3, #8
 8003a6e:	d101      	bne.n	8003a74 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003a70:	2301      	movs	r3, #1
 8003a72:	e000      	b.n	8003a76 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003a74:	2300      	movs	r3, #0
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	370c      	adds	r7, #12
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr
	...

08003a84 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003a84:	b590      	push	{r4, r7, lr}
 8003a86:	b089      	sub	sp, #36	; 0x24
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003a90:	2300      	movs	r3, #0
 8003a92:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d101      	bne.n	8003a9e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e18e      	b.n	8003dbc <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d109      	bne.n	8003ac0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f7fe f8ef 	bl	8001c90 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f7ff ff67 	bl	8003998 <LL_ADC_IsDeepPowerDownEnabled>
 8003aca:	4603      	mov	r3, r0
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d004      	beq.n	8003ada <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f7ff ff4d 	bl	8003974 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f7ff ff82 	bl	80039e8 <LL_ADC_IsInternalRegulatorEnabled>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d114      	bne.n	8003b14 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4618      	mov	r0, r3
 8003af0:	f7ff ff66 	bl	80039c0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003af4:	4b9a      	ldr	r3, [pc, #616]	; (8003d60 <HAL_ADC_Init+0x2dc>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	099b      	lsrs	r3, r3, #6
 8003afa:	4a9a      	ldr	r2, [pc, #616]	; (8003d64 <HAL_ADC_Init+0x2e0>)
 8003afc:	fba2 2303 	umull	r2, r3, r2, r3
 8003b00:	099b      	lsrs	r3, r3, #6
 8003b02:	3301      	adds	r3, #1
 8003b04:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003b06:	e002      	b.n	8003b0e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	3b01      	subs	r3, #1
 8003b0c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d1f9      	bne.n	8003b08 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f7ff ff65 	bl	80039e8 <LL_ADC_IsInternalRegulatorEnabled>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d10d      	bne.n	8003b40 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b28:	f043 0210 	orr.w	r2, r3, #16
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b34:	f043 0201 	orr.w	r2, r3, #1
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4618      	mov	r0, r3
 8003b46:	f7ff ff76 	bl	8003a36 <LL_ADC_REG_IsConversionOngoing>
 8003b4a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b50:	f003 0310 	and.w	r3, r3, #16
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	f040 8128 	bne.w	8003daa <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	f040 8124 	bne.w	8003daa <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b66:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003b6a:	f043 0202 	orr.w	r2, r3, #2
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4618      	mov	r0, r3
 8003b78:	f7ff ff4a 	bl	8003a10 <LL_ADC_IsEnabled>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d136      	bne.n	8003bf0 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a78      	ldr	r2, [pc, #480]	; (8003d68 <HAL_ADC_Init+0x2e4>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d004      	beq.n	8003b96 <HAL_ADC_Init+0x112>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a76      	ldr	r2, [pc, #472]	; (8003d6c <HAL_ADC_Init+0x2e8>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d10e      	bne.n	8003bb4 <HAL_ADC_Init+0x130>
 8003b96:	4874      	ldr	r0, [pc, #464]	; (8003d68 <HAL_ADC_Init+0x2e4>)
 8003b98:	f7ff ff3a 	bl	8003a10 <LL_ADC_IsEnabled>
 8003b9c:	4604      	mov	r4, r0
 8003b9e:	4873      	ldr	r0, [pc, #460]	; (8003d6c <HAL_ADC_Init+0x2e8>)
 8003ba0:	f7ff ff36 	bl	8003a10 <LL_ADC_IsEnabled>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	4323      	orrs	r3, r4
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	bf0c      	ite	eq
 8003bac:	2301      	moveq	r3, #1
 8003bae:	2300      	movne	r3, #0
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	e008      	b.n	8003bc6 <HAL_ADC_Init+0x142>
 8003bb4:	486e      	ldr	r0, [pc, #440]	; (8003d70 <HAL_ADC_Init+0x2ec>)
 8003bb6:	f7ff ff2b 	bl	8003a10 <LL_ADC_IsEnabled>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	bf0c      	ite	eq
 8003bc0:	2301      	moveq	r3, #1
 8003bc2:	2300      	movne	r3, #0
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d012      	beq.n	8003bf0 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a66      	ldr	r2, [pc, #408]	; (8003d68 <HAL_ADC_Init+0x2e4>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d004      	beq.n	8003bde <HAL_ADC_Init+0x15a>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a64      	ldr	r2, [pc, #400]	; (8003d6c <HAL_ADC_Init+0x2e8>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d101      	bne.n	8003be2 <HAL_ADC_Init+0x15e>
 8003bde:	4a65      	ldr	r2, [pc, #404]	; (8003d74 <HAL_ADC_Init+0x2f0>)
 8003be0:	e000      	b.n	8003be4 <HAL_ADC_Init+0x160>
 8003be2:	4a65      	ldr	r2, [pc, #404]	; (8003d78 <HAL_ADC_Init+0x2f4>)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	4619      	mov	r1, r3
 8003bea:	4610      	mov	r0, r2
 8003bec:	f7ff fdbe 	bl	800376c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8003bf0:	f7ff fdb0 	bl	8003754 <HAL_GetREVID>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	f241 0203 	movw	r2, #4099	; 0x1003
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d914      	bls.n	8003c28 <HAL_ADC_Init+0x1a4>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	2b10      	cmp	r3, #16
 8003c04:	d110      	bne.n	8003c28 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	7d5b      	ldrb	r3, [r3, #21]
 8003c0a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003c10:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003c16:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	7f1b      	ldrb	r3, [r3, #28]
 8003c1c:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003c1e:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003c20:	f043 030c 	orr.w	r3, r3, #12
 8003c24:	61bb      	str	r3, [r7, #24]
 8003c26:	e00d      	b.n	8003c44 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	7d5b      	ldrb	r3, [r3, #21]
 8003c2c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003c32:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003c38:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	7f1b      	ldrb	r3, [r3, #28]
 8003c3e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003c40:	4313      	orrs	r3, r2
 8003c42:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	7f1b      	ldrb	r3, [r3, #28]
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d106      	bne.n	8003c5a <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6a1b      	ldr	r3, [r3, #32]
 8003c50:	3b01      	subs	r3, #1
 8003c52:	045b      	lsls	r3, r3, #17
 8003c54:	69ba      	ldr	r2, [r7, #24]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d009      	beq.n	8003c76 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c66:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c6e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003c70:	69ba      	ldr	r2, [r7, #24]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	68da      	ldr	r2, [r3, #12]
 8003c7c:	4b3f      	ldr	r3, [pc, #252]	; (8003d7c <HAL_ADC_Init+0x2f8>)
 8003c7e:	4013      	ands	r3, r2
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	6812      	ldr	r2, [r2, #0]
 8003c84:	69b9      	ldr	r1, [r7, #24]
 8003c86:	430b      	orrs	r3, r1
 8003c88:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f7ff fed1 	bl	8003a36 <LL_ADC_REG_IsConversionOngoing>
 8003c94:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f7ff fede 	bl	8003a5c <LL_ADC_INJ_IsConversionOngoing>
 8003ca0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d14a      	bne.n	8003d3e <HAL_ADC_Init+0x2ba>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d147      	bne.n	8003d3e <HAL_ADC_Init+0x2ba>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	7d1b      	ldrb	r3, [r3, #20]
 8003cb2:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	68da      	ldr	r2, [r3, #12]
 8003cc2:	4b2f      	ldr	r3, [pc, #188]	; (8003d80 <HAL_ADC_Init+0x2fc>)
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	6812      	ldr	r2, [r2, #0]
 8003cca:	69b9      	ldr	r1, [r7, #24]
 8003ccc:	430b      	orrs	r3, r1
 8003cce:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d11b      	bne.n	8003d12 <HAL_ADC_Init+0x28e>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cde:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	691a      	ldr	r2, [r3, #16]
 8003ce6:	4b27      	ldr	r3, [pc, #156]	; (8003d84 <HAL_ADC_Init+0x300>)
 8003ce8:	4013      	ands	r3, r2
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003cee:	3a01      	subs	r2, #1
 8003cf0:	0411      	lsls	r1, r2, #16
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003cf6:	4311      	orrs	r1, r2
 8003cf8:	687a      	ldr	r2, [r7, #4]
 8003cfa:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003cfc:	4311      	orrs	r1, r2
 8003cfe:	687a      	ldr	r2, [r7, #4]
 8003d00:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003d02:	430a      	orrs	r2, r1
 8003d04:	431a      	orrs	r2, r3
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f042 0201 	orr.w	r2, r2, #1
 8003d0e:	611a      	str	r2, [r3, #16]
 8003d10:	e007      	b.n	8003d22 <HAL_ADC_Init+0x29e>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	691a      	ldr	r2, [r3, #16]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f022 0201 	bic.w	r2, r2, #1
 8003d20:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	691b      	ldr	r3, [r3, #16]
 8003d28:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	430a      	orrs	r2, r1
 8003d36:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f000 fb93 	bl	8004464 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	68db      	ldr	r3, [r3, #12]
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d120      	bne.n	8003d88 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d4c:	f023 010f 	bic.w	r1, r3, #15
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	699b      	ldr	r3, [r3, #24]
 8003d54:	1e5a      	subs	r2, r3, #1
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	430a      	orrs	r2, r1
 8003d5c:	631a      	str	r2, [r3, #48]	; 0x30
 8003d5e:	e01b      	b.n	8003d98 <HAL_ADC_Init+0x314>
 8003d60:	24000000 	.word	0x24000000
 8003d64:	053e2d63 	.word	0x053e2d63
 8003d68:	40022000 	.word	0x40022000
 8003d6c:	40022100 	.word	0x40022100
 8003d70:	58026000 	.word	0x58026000
 8003d74:	40022300 	.word	0x40022300
 8003d78:	58026300 	.word	0x58026300
 8003d7c:	fff0c003 	.word	0xfff0c003
 8003d80:	ffffbffc 	.word	0xffffbffc
 8003d84:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f022 020f 	bic.w	r2, r2, #15
 8003d96:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d9c:	f023 0303 	bic.w	r3, r3, #3
 8003da0:	f043 0201 	orr.w	r2, r3, #1
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	655a      	str	r2, [r3, #84]	; 0x54
 8003da8:	e007      	b.n	8003dba <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dae:	f043 0210 	orr.w	r2, r3, #16
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003dba:	7ffb      	ldrb	r3, [r7, #31]
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3724      	adds	r7, #36	; 0x24
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd90      	pop	{r4, r7, pc}

08003dc4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003dc4:	b590      	push	{r4, r7, lr}
 8003dc6:	b0a1      	sub	sp, #132	; 0x84
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	4a9d      	ldr	r2, [pc, #628]	; (8004054 <HAL_ADC_ConfigChannel+0x290>)
 8003dde:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d101      	bne.n	8003dee <HAL_ADC_ConfigChannel+0x2a>
 8003dea:	2302      	movs	r3, #2
 8003dec:	e321      	b.n	8004432 <HAL_ADC_ConfigChannel+0x66e>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2201      	movs	r2, #1
 8003df2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f7ff fe1b 	bl	8003a36 <LL_ADC_REG_IsConversionOngoing>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	f040 8306 	bne.w	8004414 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d108      	bne.n	8003e26 <HAL_ADC_ConfigChannel+0x62>
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	0e9b      	lsrs	r3, r3, #26
 8003e1a:	f003 031f 	and.w	r3, r3, #31
 8003e1e:	2201      	movs	r2, #1
 8003e20:	fa02 f303 	lsl.w	r3, r2, r3
 8003e24:	e016      	b.n	8003e54 <HAL_ADC_ConfigChannel+0x90>
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e2e:	fa93 f3a3 	rbit	r3, r3
 8003e32:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003e34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e36:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003e38:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d101      	bne.n	8003e42 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8003e3e:	2320      	movs	r3, #32
 8003e40:	e003      	b.n	8003e4a <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8003e42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e44:	fab3 f383 	clz	r3, r3
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	f003 031f 	and.w	r3, r3, #31
 8003e4e:	2201      	movs	r2, #1
 8003e50:	fa02 f303 	lsl.w	r3, r2, r3
 8003e54:	687a      	ldr	r2, [r7, #4]
 8003e56:	6812      	ldr	r2, [r2, #0]
 8003e58:	69d1      	ldr	r1, [r2, #28]
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	6812      	ldr	r2, [r2, #0]
 8003e5e:	430b      	orrs	r3, r1
 8003e60:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6818      	ldr	r0, [r3, #0]
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	6859      	ldr	r1, [r3, #4]
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	461a      	mov	r2, r3
 8003e70:	f7ff fd04 	bl	800387c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f7ff fddc 	bl	8003a36 <LL_ADC_REG_IsConversionOngoing>
 8003e7e:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4618      	mov	r0, r3
 8003e86:	f7ff fde9 	bl	8003a5c <LL_ADC_INJ_IsConversionOngoing>
 8003e8a:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003e8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	f040 80b3 	bne.w	8003ffa <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003e94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	f040 80af 	bne.w	8003ffa <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6818      	ldr	r0, [r3, #0]
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	6819      	ldr	r1, [r3, #0]
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	f7ff fd13 	bl	80038d4 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003eae:	4b6a      	ldr	r3, [pc, #424]	; (8004058 <HAL_ADC_ConfigChannel+0x294>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003eb6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003eba:	d10b      	bne.n	8003ed4 <HAL_ADC_ConfigChannel+0x110>
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	695a      	ldr	r2, [r3, #20]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	68db      	ldr	r3, [r3, #12]
 8003ec6:	089b      	lsrs	r3, r3, #2
 8003ec8:	f003 0307 	and.w	r3, r3, #7
 8003ecc:	005b      	lsls	r3, r3, #1
 8003ece:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed2:	e01d      	b.n	8003f10 <HAL_ADC_ConfigChannel+0x14c>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	68db      	ldr	r3, [r3, #12]
 8003eda:	f003 0310 	and.w	r3, r3, #16
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d10b      	bne.n	8003efa <HAL_ADC_ConfigChannel+0x136>
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	695a      	ldr	r2, [r3, #20]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	089b      	lsrs	r3, r3, #2
 8003eee:	f003 0307 	and.w	r3, r3, #7
 8003ef2:	005b      	lsls	r3, r3, #1
 8003ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef8:	e00a      	b.n	8003f10 <HAL_ADC_ConfigChannel+0x14c>
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	695a      	ldr	r2, [r3, #20]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	089b      	lsrs	r3, r3, #2
 8003f06:	f003 0304 	and.w	r3, r3, #4
 8003f0a:	005b      	lsls	r3, r3, #1
 8003f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f10:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	691b      	ldr	r3, [r3, #16]
 8003f16:	2b04      	cmp	r3, #4
 8003f18:	d027      	beq.n	8003f6a <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6818      	ldr	r0, [r3, #0]
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	6919      	ldr	r1, [r3, #16]
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f28:	f7ff fc54 	bl	80037d4 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6818      	ldr	r0, [r3, #0]
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	6919      	ldr	r1, [r3, #16]
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	7e5b      	ldrb	r3, [r3, #25]
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d102      	bne.n	8003f42 <HAL_ADC_ConfigChannel+0x17e>
 8003f3c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003f40:	e000      	b.n	8003f44 <HAL_ADC_ConfigChannel+0x180>
 8003f42:	2300      	movs	r3, #0
 8003f44:	461a      	mov	r2, r3
 8003f46:	f7ff fc7e 	bl	8003846 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6818      	ldr	r0, [r3, #0]
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	6919      	ldr	r1, [r3, #16]
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	7e1b      	ldrb	r3, [r3, #24]
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d102      	bne.n	8003f60 <HAL_ADC_ConfigChannel+0x19c>
 8003f5a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003f5e:	e000      	b.n	8003f62 <HAL_ADC_ConfigChannel+0x19e>
 8003f60:	2300      	movs	r3, #0
 8003f62:	461a      	mov	r2, r3
 8003f64:	f7ff fc56 	bl	8003814 <LL_ADC_SetDataRightShift>
 8003f68:	e047      	b.n	8003ffa <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f70:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	069b      	lsls	r3, r3, #26
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d107      	bne.n	8003f8e <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003f8c:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f94:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	069b      	lsls	r3, r3, #26
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d107      	bne.n	8003fb2 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003fb0:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fb8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	069b      	lsls	r3, r3, #26
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d107      	bne.n	8003fd6 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003fd4:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fdc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	069b      	lsls	r3, r3, #26
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d107      	bne.n	8003ffa <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003ff8:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4618      	mov	r0, r3
 8004000:	f7ff fd06 	bl	8003a10 <LL_ADC_IsEnabled>
 8004004:	4603      	mov	r3, r0
 8004006:	2b00      	cmp	r3, #0
 8004008:	f040 820d 	bne.w	8004426 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6818      	ldr	r0, [r3, #0]
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	6819      	ldr	r1, [r3, #0]
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	461a      	mov	r2, r3
 800401a:	f7ff fc87 	bl	800392c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	4a0c      	ldr	r2, [pc, #48]	; (8004054 <HAL_ADC_ConfigChannel+0x290>)
 8004024:	4293      	cmp	r3, r2
 8004026:	f040 8133 	bne.w	8004290 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004036:	2b00      	cmp	r3, #0
 8004038:	d110      	bne.n	800405c <HAL_ADC_ConfigChannel+0x298>
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	0e9b      	lsrs	r3, r3, #26
 8004040:	3301      	adds	r3, #1
 8004042:	f003 031f 	and.w	r3, r3, #31
 8004046:	2b09      	cmp	r3, #9
 8004048:	bf94      	ite	ls
 800404a:	2301      	movls	r3, #1
 800404c:	2300      	movhi	r3, #0
 800404e:	b2db      	uxtb	r3, r3
 8004050:	e01e      	b.n	8004090 <HAL_ADC_ConfigChannel+0x2cc>
 8004052:	bf00      	nop
 8004054:	47ff0000 	.word	0x47ff0000
 8004058:	5c001000 	.word	0x5c001000
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004062:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004064:	fa93 f3a3 	rbit	r3, r3
 8004068:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800406a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800406c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800406e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004070:	2b00      	cmp	r3, #0
 8004072:	d101      	bne.n	8004078 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8004074:	2320      	movs	r3, #32
 8004076:	e003      	b.n	8004080 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8004078:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800407a:	fab3 f383 	clz	r3, r3
 800407e:	b2db      	uxtb	r3, r3
 8004080:	3301      	adds	r3, #1
 8004082:	f003 031f 	and.w	r3, r3, #31
 8004086:	2b09      	cmp	r3, #9
 8004088:	bf94      	ite	ls
 800408a:	2301      	movls	r3, #1
 800408c:	2300      	movhi	r3, #0
 800408e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004090:	2b00      	cmp	r3, #0
 8004092:	d079      	beq.n	8004188 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800409c:	2b00      	cmp	r3, #0
 800409e:	d107      	bne.n	80040b0 <HAL_ADC_ConfigChannel+0x2ec>
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	0e9b      	lsrs	r3, r3, #26
 80040a6:	3301      	adds	r3, #1
 80040a8:	069b      	lsls	r3, r3, #26
 80040aa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80040ae:	e015      	b.n	80040dc <HAL_ADC_ConfigChannel+0x318>
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040b8:	fa93 f3a3 	rbit	r3, r3
 80040bc:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80040be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040c0:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80040c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d101      	bne.n	80040cc <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 80040c8:	2320      	movs	r3, #32
 80040ca:	e003      	b.n	80040d4 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80040cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040ce:	fab3 f383 	clz	r3, r3
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	3301      	adds	r3, #1
 80040d6:	069b      	lsls	r3, r3, #26
 80040d8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d109      	bne.n	80040fc <HAL_ADC_ConfigChannel+0x338>
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	0e9b      	lsrs	r3, r3, #26
 80040ee:	3301      	adds	r3, #1
 80040f0:	f003 031f 	and.w	r3, r3, #31
 80040f4:	2101      	movs	r1, #1
 80040f6:	fa01 f303 	lsl.w	r3, r1, r3
 80040fa:	e017      	b.n	800412c <HAL_ADC_ConfigChannel+0x368>
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004102:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004104:	fa93 f3a3 	rbit	r3, r3
 8004108:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800410a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800410c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800410e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004110:	2b00      	cmp	r3, #0
 8004112:	d101      	bne.n	8004118 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8004114:	2320      	movs	r3, #32
 8004116:	e003      	b.n	8004120 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8004118:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800411a:	fab3 f383 	clz	r3, r3
 800411e:	b2db      	uxtb	r3, r3
 8004120:	3301      	adds	r3, #1
 8004122:	f003 031f 	and.w	r3, r3, #31
 8004126:	2101      	movs	r1, #1
 8004128:	fa01 f303 	lsl.w	r3, r1, r3
 800412c:	ea42 0103 	orr.w	r1, r2, r3
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004138:	2b00      	cmp	r3, #0
 800413a:	d10a      	bne.n	8004152 <HAL_ADC_ConfigChannel+0x38e>
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	0e9b      	lsrs	r3, r3, #26
 8004142:	3301      	adds	r3, #1
 8004144:	f003 021f 	and.w	r2, r3, #31
 8004148:	4613      	mov	r3, r2
 800414a:	005b      	lsls	r3, r3, #1
 800414c:	4413      	add	r3, r2
 800414e:	051b      	lsls	r3, r3, #20
 8004150:	e018      	b.n	8004184 <HAL_ADC_ConfigChannel+0x3c0>
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800415a:	fa93 f3a3 	rbit	r3, r3
 800415e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004162:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004166:	2b00      	cmp	r3, #0
 8004168:	d101      	bne.n	800416e <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 800416a:	2320      	movs	r3, #32
 800416c:	e003      	b.n	8004176 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 800416e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004170:	fab3 f383 	clz	r3, r3
 8004174:	b2db      	uxtb	r3, r3
 8004176:	3301      	adds	r3, #1
 8004178:	f003 021f 	and.w	r2, r3, #31
 800417c:	4613      	mov	r3, r2
 800417e:	005b      	lsls	r3, r3, #1
 8004180:	4413      	add	r3, r2
 8004182:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004184:	430b      	orrs	r3, r1
 8004186:	e07e      	b.n	8004286 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004190:	2b00      	cmp	r3, #0
 8004192:	d107      	bne.n	80041a4 <HAL_ADC_ConfigChannel+0x3e0>
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	0e9b      	lsrs	r3, r3, #26
 800419a:	3301      	adds	r3, #1
 800419c:	069b      	lsls	r3, r3, #26
 800419e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80041a2:	e015      	b.n	80041d0 <HAL_ADC_ConfigChannel+0x40c>
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ac:	fa93 f3a3 	rbit	r3, r3
 80041b0:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80041b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80041b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d101      	bne.n	80041c0 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80041bc:	2320      	movs	r3, #32
 80041be:	e003      	b.n	80041c8 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80041c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041c2:	fab3 f383 	clz	r3, r3
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	3301      	adds	r3, #1
 80041ca:	069b      	lsls	r3, r3, #26
 80041cc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d109      	bne.n	80041f0 <HAL_ADC_ConfigChannel+0x42c>
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	0e9b      	lsrs	r3, r3, #26
 80041e2:	3301      	adds	r3, #1
 80041e4:	f003 031f 	and.w	r3, r3, #31
 80041e8:	2101      	movs	r1, #1
 80041ea:	fa01 f303 	lsl.w	r3, r1, r3
 80041ee:	e017      	b.n	8004220 <HAL_ADC_ConfigChannel+0x45c>
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	fa93 f3a3 	rbit	r3, r3
 80041fc:	61bb      	str	r3, [r7, #24]
  return result;
 80041fe:	69bb      	ldr	r3, [r7, #24]
 8004200:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004202:	6a3b      	ldr	r3, [r7, #32]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d101      	bne.n	800420c <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8004208:	2320      	movs	r3, #32
 800420a:	e003      	b.n	8004214 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 800420c:	6a3b      	ldr	r3, [r7, #32]
 800420e:	fab3 f383 	clz	r3, r3
 8004212:	b2db      	uxtb	r3, r3
 8004214:	3301      	adds	r3, #1
 8004216:	f003 031f 	and.w	r3, r3, #31
 800421a:	2101      	movs	r1, #1
 800421c:	fa01 f303 	lsl.w	r3, r1, r3
 8004220:	ea42 0103 	orr.w	r1, r2, r3
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800422c:	2b00      	cmp	r3, #0
 800422e:	d10d      	bne.n	800424c <HAL_ADC_ConfigChannel+0x488>
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	0e9b      	lsrs	r3, r3, #26
 8004236:	3301      	adds	r3, #1
 8004238:	f003 021f 	and.w	r2, r3, #31
 800423c:	4613      	mov	r3, r2
 800423e:	005b      	lsls	r3, r3, #1
 8004240:	4413      	add	r3, r2
 8004242:	3b1e      	subs	r3, #30
 8004244:	051b      	lsls	r3, r3, #20
 8004246:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800424a:	e01b      	b.n	8004284 <HAL_ADC_ConfigChannel+0x4c0>
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	fa93 f3a3 	rbit	r3, r3
 8004258:	60fb      	str	r3, [r7, #12]
  return result;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d101      	bne.n	8004268 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8004264:	2320      	movs	r3, #32
 8004266:	e003      	b.n	8004270 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	fab3 f383 	clz	r3, r3
 800426e:	b2db      	uxtb	r3, r3
 8004270:	3301      	adds	r3, #1
 8004272:	f003 021f 	and.w	r2, r3, #31
 8004276:	4613      	mov	r3, r2
 8004278:	005b      	lsls	r3, r3, #1
 800427a:	4413      	add	r3, r2
 800427c:	3b1e      	subs	r3, #30
 800427e:	051b      	lsls	r3, r3, #20
 8004280:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004284:	430b      	orrs	r3, r1
 8004286:	683a      	ldr	r2, [r7, #0]
 8004288:	6892      	ldr	r2, [r2, #8]
 800428a:	4619      	mov	r1, r3
 800428c:	f7ff fb22 	bl	80038d4 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	2b00      	cmp	r3, #0
 8004296:	f280 80c6 	bge.w	8004426 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a67      	ldr	r2, [pc, #412]	; (800443c <HAL_ADC_ConfigChannel+0x678>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d004      	beq.n	80042ae <HAL_ADC_ConfigChannel+0x4ea>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a65      	ldr	r2, [pc, #404]	; (8004440 <HAL_ADC_ConfigChannel+0x67c>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d101      	bne.n	80042b2 <HAL_ADC_ConfigChannel+0x4ee>
 80042ae:	4b65      	ldr	r3, [pc, #404]	; (8004444 <HAL_ADC_ConfigChannel+0x680>)
 80042b0:	e000      	b.n	80042b4 <HAL_ADC_ConfigChannel+0x4f0>
 80042b2:	4b65      	ldr	r3, [pc, #404]	; (8004448 <HAL_ADC_ConfigChannel+0x684>)
 80042b4:	4618      	mov	r0, r3
 80042b6:	f7ff fa7f 	bl	80037b8 <LL_ADC_GetCommonPathInternalCh>
 80042ba:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a5e      	ldr	r2, [pc, #376]	; (800443c <HAL_ADC_ConfigChannel+0x678>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d004      	beq.n	80042d0 <HAL_ADC_ConfigChannel+0x50c>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a5d      	ldr	r2, [pc, #372]	; (8004440 <HAL_ADC_ConfigChannel+0x67c>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d10e      	bne.n	80042ee <HAL_ADC_ConfigChannel+0x52a>
 80042d0:	485a      	ldr	r0, [pc, #360]	; (800443c <HAL_ADC_ConfigChannel+0x678>)
 80042d2:	f7ff fb9d 	bl	8003a10 <LL_ADC_IsEnabled>
 80042d6:	4604      	mov	r4, r0
 80042d8:	4859      	ldr	r0, [pc, #356]	; (8004440 <HAL_ADC_ConfigChannel+0x67c>)
 80042da:	f7ff fb99 	bl	8003a10 <LL_ADC_IsEnabled>
 80042de:	4603      	mov	r3, r0
 80042e0:	4323      	orrs	r3, r4
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	bf0c      	ite	eq
 80042e6:	2301      	moveq	r3, #1
 80042e8:	2300      	movne	r3, #0
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	e008      	b.n	8004300 <HAL_ADC_ConfigChannel+0x53c>
 80042ee:	4857      	ldr	r0, [pc, #348]	; (800444c <HAL_ADC_ConfigChannel+0x688>)
 80042f0:	f7ff fb8e 	bl	8003a10 <LL_ADC_IsEnabled>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	bf0c      	ite	eq
 80042fa:	2301      	moveq	r3, #1
 80042fc:	2300      	movne	r3, #0
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	2b00      	cmp	r3, #0
 8004302:	d07d      	beq.n	8004400 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a51      	ldr	r2, [pc, #324]	; (8004450 <HAL_ADC_ConfigChannel+0x68c>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d130      	bne.n	8004370 <HAL_ADC_ConfigChannel+0x5ac>
 800430e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004310:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004314:	2b00      	cmp	r3, #0
 8004316:	d12b      	bne.n	8004370 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a4b      	ldr	r2, [pc, #300]	; (800444c <HAL_ADC_ConfigChannel+0x688>)
 800431e:	4293      	cmp	r3, r2
 8004320:	f040 8081 	bne.w	8004426 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a44      	ldr	r2, [pc, #272]	; (800443c <HAL_ADC_ConfigChannel+0x678>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d004      	beq.n	8004338 <HAL_ADC_ConfigChannel+0x574>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a43      	ldr	r2, [pc, #268]	; (8004440 <HAL_ADC_ConfigChannel+0x67c>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d101      	bne.n	800433c <HAL_ADC_ConfigChannel+0x578>
 8004338:	4a42      	ldr	r2, [pc, #264]	; (8004444 <HAL_ADC_ConfigChannel+0x680>)
 800433a:	e000      	b.n	800433e <HAL_ADC_ConfigChannel+0x57a>
 800433c:	4a42      	ldr	r2, [pc, #264]	; (8004448 <HAL_ADC_ConfigChannel+0x684>)
 800433e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004340:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004344:	4619      	mov	r1, r3
 8004346:	4610      	mov	r0, r2
 8004348:	f7ff fa23 	bl	8003792 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800434c:	4b41      	ldr	r3, [pc, #260]	; (8004454 <HAL_ADC_ConfigChannel+0x690>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	099b      	lsrs	r3, r3, #6
 8004352:	4a41      	ldr	r2, [pc, #260]	; (8004458 <HAL_ADC_ConfigChannel+0x694>)
 8004354:	fba2 2303 	umull	r2, r3, r2, r3
 8004358:	099b      	lsrs	r3, r3, #6
 800435a:	3301      	adds	r3, #1
 800435c:	005b      	lsls	r3, r3, #1
 800435e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004360:	e002      	b.n	8004368 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	3b01      	subs	r3, #1
 8004366:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d1f9      	bne.n	8004362 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800436e:	e05a      	b.n	8004426 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a39      	ldr	r2, [pc, #228]	; (800445c <HAL_ADC_ConfigChannel+0x698>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d11e      	bne.n	80043b8 <HAL_ADC_ConfigChannel+0x5f4>
 800437a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800437c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004380:	2b00      	cmp	r3, #0
 8004382:	d119      	bne.n	80043b8 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a30      	ldr	r2, [pc, #192]	; (800444c <HAL_ADC_ConfigChannel+0x688>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d14b      	bne.n	8004426 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a2a      	ldr	r2, [pc, #168]	; (800443c <HAL_ADC_ConfigChannel+0x678>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d004      	beq.n	80043a2 <HAL_ADC_ConfigChannel+0x5de>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a28      	ldr	r2, [pc, #160]	; (8004440 <HAL_ADC_ConfigChannel+0x67c>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d101      	bne.n	80043a6 <HAL_ADC_ConfigChannel+0x5e2>
 80043a2:	4a28      	ldr	r2, [pc, #160]	; (8004444 <HAL_ADC_ConfigChannel+0x680>)
 80043a4:	e000      	b.n	80043a8 <HAL_ADC_ConfigChannel+0x5e4>
 80043a6:	4a28      	ldr	r2, [pc, #160]	; (8004448 <HAL_ADC_ConfigChannel+0x684>)
 80043a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043ae:	4619      	mov	r1, r3
 80043b0:	4610      	mov	r0, r2
 80043b2:	f7ff f9ee 	bl	8003792 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80043b6:	e036      	b.n	8004426 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a28      	ldr	r2, [pc, #160]	; (8004460 <HAL_ADC_ConfigChannel+0x69c>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d131      	bne.n	8004426 <HAL_ADC_ConfigChannel+0x662>
 80043c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d12c      	bne.n	8004426 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a1e      	ldr	r2, [pc, #120]	; (800444c <HAL_ADC_ConfigChannel+0x688>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d127      	bne.n	8004426 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a18      	ldr	r2, [pc, #96]	; (800443c <HAL_ADC_ConfigChannel+0x678>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d004      	beq.n	80043ea <HAL_ADC_ConfigChannel+0x626>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a16      	ldr	r2, [pc, #88]	; (8004440 <HAL_ADC_ConfigChannel+0x67c>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d101      	bne.n	80043ee <HAL_ADC_ConfigChannel+0x62a>
 80043ea:	4a16      	ldr	r2, [pc, #88]	; (8004444 <HAL_ADC_ConfigChannel+0x680>)
 80043ec:	e000      	b.n	80043f0 <HAL_ADC_ConfigChannel+0x62c>
 80043ee:	4a16      	ldr	r2, [pc, #88]	; (8004448 <HAL_ADC_ConfigChannel+0x684>)
 80043f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043f2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80043f6:	4619      	mov	r1, r3
 80043f8:	4610      	mov	r0, r2
 80043fa:	f7ff f9ca 	bl	8003792 <LL_ADC_SetCommonPathInternalCh>
 80043fe:	e012      	b.n	8004426 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004404:	f043 0220 	orr.w	r2, r3, #32
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004412:	e008      	b.n	8004426 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004418:	f043 0220 	orr.w	r2, r3, #32
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800442e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8004432:	4618      	mov	r0, r3
 8004434:	3784      	adds	r7, #132	; 0x84
 8004436:	46bd      	mov	sp, r7
 8004438:	bd90      	pop	{r4, r7, pc}
 800443a:	bf00      	nop
 800443c:	40022000 	.word	0x40022000
 8004440:	40022100 	.word	0x40022100
 8004444:	40022300 	.word	0x40022300
 8004448:	58026300 	.word	0x58026300
 800444c:	58026000 	.word	0x58026000
 8004450:	cb840000 	.word	0xcb840000
 8004454:	24000000 	.word	0x24000000
 8004458:	053e2d63 	.word	0x053e2d63
 800445c:	c7520000 	.word	0xc7520000
 8004460:	cfb80000 	.word	0xcfb80000

08004464 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b084      	sub	sp, #16
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a79      	ldr	r2, [pc, #484]	; (8004658 <ADC_ConfigureBoostMode+0x1f4>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d004      	beq.n	8004480 <ADC_ConfigureBoostMode+0x1c>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a78      	ldr	r2, [pc, #480]	; (800465c <ADC_ConfigureBoostMode+0x1f8>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d109      	bne.n	8004494 <ADC_ConfigureBoostMode+0x30>
 8004480:	4b77      	ldr	r3, [pc, #476]	; (8004660 <ADC_ConfigureBoostMode+0x1fc>)
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004488:	2b00      	cmp	r3, #0
 800448a:	bf14      	ite	ne
 800448c:	2301      	movne	r3, #1
 800448e:	2300      	moveq	r3, #0
 8004490:	b2db      	uxtb	r3, r3
 8004492:	e008      	b.n	80044a6 <ADC_ConfigureBoostMode+0x42>
 8004494:	4b73      	ldr	r3, [pc, #460]	; (8004664 <ADC_ConfigureBoostMode+0x200>)
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800449c:	2b00      	cmp	r3, #0
 800449e:	bf14      	ite	ne
 80044a0:	2301      	movne	r3, #1
 80044a2:	2300      	moveq	r3, #0
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d01c      	beq.n	80044e4 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80044aa:	f004 ff33 	bl	8009314 <HAL_RCC_GetHCLKFreq>
 80044ae:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80044b8:	d010      	beq.n	80044dc <ADC_ConfigureBoostMode+0x78>
 80044ba:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80044be:	d871      	bhi.n	80045a4 <ADC_ConfigureBoostMode+0x140>
 80044c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044c4:	d002      	beq.n	80044cc <ADC_ConfigureBoostMode+0x68>
 80044c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80044ca:	d16b      	bne.n	80045a4 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	0c1b      	lsrs	r3, r3, #16
 80044d2:	68fa      	ldr	r2, [r7, #12]
 80044d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80044d8:	60fb      	str	r3, [r7, #12]
        break;
 80044da:	e066      	b.n	80045aa <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	089b      	lsrs	r3, r3, #2
 80044e0:	60fb      	str	r3, [r7, #12]
        break;
 80044e2:	e062      	b.n	80045aa <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80044e4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80044e8:	f005 feb0 	bl	800a24c <HAL_RCCEx_GetPeriphCLKFreq>
 80044ec:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80044f6:	d051      	beq.n	800459c <ADC_ConfigureBoostMode+0x138>
 80044f8:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80044fc:	d854      	bhi.n	80045a8 <ADC_ConfigureBoostMode+0x144>
 80044fe:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004502:	d047      	beq.n	8004594 <ADC_ConfigureBoostMode+0x130>
 8004504:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004508:	d84e      	bhi.n	80045a8 <ADC_ConfigureBoostMode+0x144>
 800450a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800450e:	d03d      	beq.n	800458c <ADC_ConfigureBoostMode+0x128>
 8004510:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004514:	d848      	bhi.n	80045a8 <ADC_ConfigureBoostMode+0x144>
 8004516:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800451a:	d033      	beq.n	8004584 <ADC_ConfigureBoostMode+0x120>
 800451c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004520:	d842      	bhi.n	80045a8 <ADC_ConfigureBoostMode+0x144>
 8004522:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004526:	d029      	beq.n	800457c <ADC_ConfigureBoostMode+0x118>
 8004528:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800452c:	d83c      	bhi.n	80045a8 <ADC_ConfigureBoostMode+0x144>
 800452e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004532:	d01a      	beq.n	800456a <ADC_ConfigureBoostMode+0x106>
 8004534:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004538:	d836      	bhi.n	80045a8 <ADC_ConfigureBoostMode+0x144>
 800453a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800453e:	d014      	beq.n	800456a <ADC_ConfigureBoostMode+0x106>
 8004540:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004544:	d830      	bhi.n	80045a8 <ADC_ConfigureBoostMode+0x144>
 8004546:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800454a:	d00e      	beq.n	800456a <ADC_ConfigureBoostMode+0x106>
 800454c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004550:	d82a      	bhi.n	80045a8 <ADC_ConfigureBoostMode+0x144>
 8004552:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004556:	d008      	beq.n	800456a <ADC_ConfigureBoostMode+0x106>
 8004558:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800455c:	d824      	bhi.n	80045a8 <ADC_ConfigureBoostMode+0x144>
 800455e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004562:	d002      	beq.n	800456a <ADC_ConfigureBoostMode+0x106>
 8004564:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004568:	d11e      	bne.n	80045a8 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	0c9b      	lsrs	r3, r3, #18
 8004570:	005b      	lsls	r3, r3, #1
 8004572:	68fa      	ldr	r2, [r7, #12]
 8004574:	fbb2 f3f3 	udiv	r3, r2, r3
 8004578:	60fb      	str	r3, [r7, #12]
        break;
 800457a:	e016      	b.n	80045aa <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	091b      	lsrs	r3, r3, #4
 8004580:	60fb      	str	r3, [r7, #12]
        break;
 8004582:	e012      	b.n	80045aa <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	095b      	lsrs	r3, r3, #5
 8004588:	60fb      	str	r3, [r7, #12]
        break;
 800458a:	e00e      	b.n	80045aa <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	099b      	lsrs	r3, r3, #6
 8004590:	60fb      	str	r3, [r7, #12]
        break;
 8004592:	e00a      	b.n	80045aa <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	09db      	lsrs	r3, r3, #7
 8004598:	60fb      	str	r3, [r7, #12]
        break;
 800459a:	e006      	b.n	80045aa <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	0a1b      	lsrs	r3, r3, #8
 80045a0:	60fb      	str	r3, [r7, #12]
        break;
 80045a2:	e002      	b.n	80045aa <ADC_ConfigureBoostMode+0x146>
        break;
 80045a4:	bf00      	nop
 80045a6:	e000      	b.n	80045aa <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 80045a8:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80045aa:	f7ff f8d3 	bl	8003754 <HAL_GetREVID>
 80045ae:	4603      	mov	r3, r0
 80045b0:	f241 0203 	movw	r2, #4099	; 0x1003
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d815      	bhi.n	80045e4 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	4a2b      	ldr	r2, [pc, #172]	; (8004668 <ADC_ConfigureBoostMode+0x204>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d908      	bls.n	80045d2 <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	689a      	ldr	r2, [r3, #8]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045ce:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80045d0:	e03e      	b.n	8004650 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	689a      	ldr	r2, [r3, #8]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80045e0:	609a      	str	r2, [r3, #8]
}
 80045e2:	e035      	b.n	8004650 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	085b      	lsrs	r3, r3, #1
 80045e8:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	4a1f      	ldr	r2, [pc, #124]	; (800466c <ADC_ConfigureBoostMode+0x208>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d808      	bhi.n	8004604 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	689a      	ldr	r2, [r3, #8]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004600:	609a      	str	r2, [r3, #8]
}
 8004602:	e025      	b.n	8004650 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	4a1a      	ldr	r2, [pc, #104]	; (8004670 <ADC_ConfigureBoostMode+0x20c>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d80a      	bhi.n	8004622 <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800461e:	609a      	str	r2, [r3, #8]
}
 8004620:	e016      	b.n	8004650 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	4a13      	ldr	r2, [pc, #76]	; (8004674 <ADC_ConfigureBoostMode+0x210>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d80a      	bhi.n	8004640 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800463c:	609a      	str	r2, [r3, #8]
}
 800463e:	e007      	b.n	8004650 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	689a      	ldr	r2, [r3, #8]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800464e:	609a      	str	r2, [r3, #8]
}
 8004650:	bf00      	nop
 8004652:	3710      	adds	r7, #16
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}
 8004658:	40022000 	.word	0x40022000
 800465c:	40022100 	.word	0x40022100
 8004660:	40022300 	.word	0x40022300
 8004664:	58026300 	.word	0x58026300
 8004668:	01312d00 	.word	0x01312d00
 800466c:	005f5e10 	.word	0x005f5e10
 8004670:	00bebc20 	.word	0x00bebc20
 8004674:	017d7840 	.word	0x017d7840

08004678 <LL_ADC_IsEnabled>:
{
 8004678:	b480      	push	{r7}
 800467a:	b083      	sub	sp, #12
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	f003 0301 	and.w	r3, r3, #1
 8004688:	2b01      	cmp	r3, #1
 800468a:	d101      	bne.n	8004690 <LL_ADC_IsEnabled+0x18>
 800468c:	2301      	movs	r3, #1
 800468e:	e000      	b.n	8004692 <LL_ADC_IsEnabled+0x1a>
 8004690:	2300      	movs	r3, #0
}
 8004692:	4618      	mov	r0, r3
 8004694:	370c      	adds	r7, #12
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr

0800469e <LL_ADC_REG_IsConversionOngoing>:
{
 800469e:	b480      	push	{r7}
 80046a0:	b083      	sub	sp, #12
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	f003 0304 	and.w	r3, r3, #4
 80046ae:	2b04      	cmp	r3, #4
 80046b0:	d101      	bne.n	80046b6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80046b2:	2301      	movs	r3, #1
 80046b4:	e000      	b.n	80046b8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80046b6:	2300      	movs	r3, #0
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	370c      	adds	r7, #12
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr

080046c4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80046c4:	b590      	push	{r4, r7, lr}
 80046c6:	b09f      	sub	sp, #124	; 0x7c
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
 80046cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80046ce:	2300      	movs	r3, #0
 80046d0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d101      	bne.n	80046e2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80046de:	2302      	movs	r3, #2
 80046e0:	e0be      	b.n	8004860 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2201      	movs	r2, #1
 80046e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80046ea:	2300      	movs	r3, #0
 80046ec:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80046ee:	2300      	movs	r3, #0
 80046f0:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a5c      	ldr	r2, [pc, #368]	; (8004868 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d102      	bne.n	8004702 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80046fc:	4b5b      	ldr	r3, [pc, #364]	; (800486c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80046fe:	60bb      	str	r3, [r7, #8]
 8004700:	e001      	b.n	8004706 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004702:	2300      	movs	r3, #0
 8004704:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d10b      	bne.n	8004724 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004710:	f043 0220 	orr.w	r2, r3, #32
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	e09d      	b.n	8004860 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	4618      	mov	r0, r3
 8004728:	f7ff ffb9 	bl	800469e <LL_ADC_REG_IsConversionOngoing>
 800472c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4618      	mov	r0, r3
 8004734:	f7ff ffb3 	bl	800469e <LL_ADC_REG_IsConversionOngoing>
 8004738:	4603      	mov	r3, r0
 800473a:	2b00      	cmp	r3, #0
 800473c:	d17f      	bne.n	800483e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800473e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004740:	2b00      	cmp	r3, #0
 8004742:	d17c      	bne.n	800483e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a47      	ldr	r2, [pc, #284]	; (8004868 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d004      	beq.n	8004758 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a46      	ldr	r2, [pc, #280]	; (800486c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d101      	bne.n	800475c <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8004758:	4b45      	ldr	r3, [pc, #276]	; (8004870 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800475a:	e000      	b.n	800475e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 800475c:	4b45      	ldr	r3, [pc, #276]	; (8004874 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800475e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d039      	beq.n	80047dc <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004768:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	431a      	orrs	r2, r3
 8004776:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004778:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a3a      	ldr	r2, [pc, #232]	; (8004868 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d004      	beq.n	800478e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a38      	ldr	r2, [pc, #224]	; (800486c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d10e      	bne.n	80047ac <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800478e:	4836      	ldr	r0, [pc, #216]	; (8004868 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004790:	f7ff ff72 	bl	8004678 <LL_ADC_IsEnabled>
 8004794:	4604      	mov	r4, r0
 8004796:	4835      	ldr	r0, [pc, #212]	; (800486c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004798:	f7ff ff6e 	bl	8004678 <LL_ADC_IsEnabled>
 800479c:	4603      	mov	r3, r0
 800479e:	4323      	orrs	r3, r4
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	bf0c      	ite	eq
 80047a4:	2301      	moveq	r3, #1
 80047a6:	2300      	movne	r3, #0
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	e008      	b.n	80047be <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80047ac:	4832      	ldr	r0, [pc, #200]	; (8004878 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80047ae:	f7ff ff63 	bl	8004678 <LL_ADC_IsEnabled>
 80047b2:	4603      	mov	r3, r0
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	bf0c      	ite	eq
 80047b8:	2301      	moveq	r3, #1
 80047ba:	2300      	movne	r3, #0
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d047      	beq.n	8004852 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80047c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047c4:	689a      	ldr	r2, [r3, #8]
 80047c6:	4b2d      	ldr	r3, [pc, #180]	; (800487c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80047c8:	4013      	ands	r3, r2
 80047ca:	683a      	ldr	r2, [r7, #0]
 80047cc:	6811      	ldr	r1, [r2, #0]
 80047ce:	683a      	ldr	r2, [r7, #0]
 80047d0:	6892      	ldr	r2, [r2, #8]
 80047d2:	430a      	orrs	r2, r1
 80047d4:	431a      	orrs	r2, r3
 80047d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047d8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80047da:	e03a      	b.n	8004852 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80047dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80047e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047e6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a1e      	ldr	r2, [pc, #120]	; (8004868 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d004      	beq.n	80047fc <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a1d      	ldr	r2, [pc, #116]	; (800486c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d10e      	bne.n	800481a <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80047fc:	481a      	ldr	r0, [pc, #104]	; (8004868 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80047fe:	f7ff ff3b 	bl	8004678 <LL_ADC_IsEnabled>
 8004802:	4604      	mov	r4, r0
 8004804:	4819      	ldr	r0, [pc, #100]	; (800486c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004806:	f7ff ff37 	bl	8004678 <LL_ADC_IsEnabled>
 800480a:	4603      	mov	r3, r0
 800480c:	4323      	orrs	r3, r4
 800480e:	2b00      	cmp	r3, #0
 8004810:	bf0c      	ite	eq
 8004812:	2301      	moveq	r3, #1
 8004814:	2300      	movne	r3, #0
 8004816:	b2db      	uxtb	r3, r3
 8004818:	e008      	b.n	800482c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800481a:	4817      	ldr	r0, [pc, #92]	; (8004878 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800481c:	f7ff ff2c 	bl	8004678 <LL_ADC_IsEnabled>
 8004820:	4603      	mov	r3, r0
 8004822:	2b00      	cmp	r3, #0
 8004824:	bf0c      	ite	eq
 8004826:	2301      	moveq	r3, #1
 8004828:	2300      	movne	r3, #0
 800482a:	b2db      	uxtb	r3, r3
 800482c:	2b00      	cmp	r3, #0
 800482e:	d010      	beq.n	8004852 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004830:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004832:	689a      	ldr	r2, [r3, #8]
 8004834:	4b11      	ldr	r3, [pc, #68]	; (800487c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004836:	4013      	ands	r3, r2
 8004838:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800483a:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800483c:	e009      	b.n	8004852 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004842:	f043 0220 	orr.w	r2, r3, #32
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004850:	e000      	b.n	8004854 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004852:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800485c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8004860:	4618      	mov	r0, r3
 8004862:	377c      	adds	r7, #124	; 0x7c
 8004864:	46bd      	mov	sp, r7
 8004866:	bd90      	pop	{r4, r7, pc}
 8004868:	40022000 	.word	0x40022000
 800486c:	40022100 	.word	0x40022100
 8004870:	40022300 	.word	0x40022300
 8004874:	58026300 	.word	0x58026300
 8004878:	58026000 	.word	0x58026000
 800487c:	fffff0e0 	.word	0xfffff0e0

08004880 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004880:	b480      	push	{r7}
 8004882:	b085      	sub	sp, #20
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f003 0307 	and.w	r3, r3, #7
 800488e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004890:	4b0b      	ldr	r3, [pc, #44]	; (80048c0 <__NVIC_SetPriorityGrouping+0x40>)
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004896:	68ba      	ldr	r2, [r7, #8]
 8004898:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800489c:	4013      	ands	r3, r2
 800489e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80048a8:	4b06      	ldr	r3, [pc, #24]	; (80048c4 <__NVIC_SetPriorityGrouping+0x44>)
 80048aa:	4313      	orrs	r3, r2
 80048ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80048ae:	4a04      	ldr	r2, [pc, #16]	; (80048c0 <__NVIC_SetPriorityGrouping+0x40>)
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	60d3      	str	r3, [r2, #12]
}
 80048b4:	bf00      	nop
 80048b6:	3714      	adds	r7, #20
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr
 80048c0:	e000ed00 	.word	0xe000ed00
 80048c4:	05fa0000 	.word	0x05fa0000

080048c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80048c8:	b480      	push	{r7}
 80048ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80048cc:	4b04      	ldr	r3, [pc, #16]	; (80048e0 <__NVIC_GetPriorityGrouping+0x18>)
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	0a1b      	lsrs	r3, r3, #8
 80048d2:	f003 0307 	and.w	r3, r3, #7
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr
 80048e0:	e000ed00 	.word	0xe000ed00

080048e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b083      	sub	sp, #12
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	4603      	mov	r3, r0
 80048ec:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80048ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	db0b      	blt.n	800490e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80048f6:	88fb      	ldrh	r3, [r7, #6]
 80048f8:	f003 021f 	and.w	r2, r3, #31
 80048fc:	4907      	ldr	r1, [pc, #28]	; (800491c <__NVIC_EnableIRQ+0x38>)
 80048fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004902:	095b      	lsrs	r3, r3, #5
 8004904:	2001      	movs	r0, #1
 8004906:	fa00 f202 	lsl.w	r2, r0, r2
 800490a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800490e:	bf00      	nop
 8004910:	370c      	adds	r7, #12
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr
 800491a:	bf00      	nop
 800491c:	e000e100 	.word	0xe000e100

08004920 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004920:	b480      	push	{r7}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
 8004926:	4603      	mov	r3, r0
 8004928:	6039      	str	r1, [r7, #0]
 800492a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800492c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004930:	2b00      	cmp	r3, #0
 8004932:	db0a      	blt.n	800494a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	b2da      	uxtb	r2, r3
 8004938:	490c      	ldr	r1, [pc, #48]	; (800496c <__NVIC_SetPriority+0x4c>)
 800493a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800493e:	0112      	lsls	r2, r2, #4
 8004940:	b2d2      	uxtb	r2, r2
 8004942:	440b      	add	r3, r1
 8004944:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004948:	e00a      	b.n	8004960 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	b2da      	uxtb	r2, r3
 800494e:	4908      	ldr	r1, [pc, #32]	; (8004970 <__NVIC_SetPriority+0x50>)
 8004950:	88fb      	ldrh	r3, [r7, #6]
 8004952:	f003 030f 	and.w	r3, r3, #15
 8004956:	3b04      	subs	r3, #4
 8004958:	0112      	lsls	r2, r2, #4
 800495a:	b2d2      	uxtb	r2, r2
 800495c:	440b      	add	r3, r1
 800495e:	761a      	strb	r2, [r3, #24]
}
 8004960:	bf00      	nop
 8004962:	370c      	adds	r7, #12
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr
 800496c:	e000e100 	.word	0xe000e100
 8004970:	e000ed00 	.word	0xe000ed00

08004974 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004974:	b480      	push	{r7}
 8004976:	b089      	sub	sp, #36	; 0x24
 8004978:	af00      	add	r7, sp, #0
 800497a:	60f8      	str	r0, [r7, #12]
 800497c:	60b9      	str	r1, [r7, #8]
 800497e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f003 0307 	and.w	r3, r3, #7
 8004986:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004988:	69fb      	ldr	r3, [r7, #28]
 800498a:	f1c3 0307 	rsb	r3, r3, #7
 800498e:	2b04      	cmp	r3, #4
 8004990:	bf28      	it	cs
 8004992:	2304      	movcs	r3, #4
 8004994:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004996:	69fb      	ldr	r3, [r7, #28]
 8004998:	3304      	adds	r3, #4
 800499a:	2b06      	cmp	r3, #6
 800499c:	d902      	bls.n	80049a4 <NVIC_EncodePriority+0x30>
 800499e:	69fb      	ldr	r3, [r7, #28]
 80049a0:	3b03      	subs	r3, #3
 80049a2:	e000      	b.n	80049a6 <NVIC_EncodePriority+0x32>
 80049a4:	2300      	movs	r3, #0
 80049a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049a8:	f04f 32ff 	mov.w	r2, #4294967295
 80049ac:	69bb      	ldr	r3, [r7, #24]
 80049ae:	fa02 f303 	lsl.w	r3, r2, r3
 80049b2:	43da      	mvns	r2, r3
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	401a      	ands	r2, r3
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80049bc:	f04f 31ff 	mov.w	r1, #4294967295
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	fa01 f303 	lsl.w	r3, r1, r3
 80049c6:	43d9      	mvns	r1, r3
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049cc:	4313      	orrs	r3, r2
         );
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3724      	adds	r7, #36	; 0x24
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr
	...

080049dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b082      	sub	sp, #8
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	3b01      	subs	r3, #1
 80049e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80049ec:	d301      	bcc.n	80049f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80049ee:	2301      	movs	r3, #1
 80049f0:	e00f      	b.n	8004a12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80049f2:	4a0a      	ldr	r2, [pc, #40]	; (8004a1c <SysTick_Config+0x40>)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	3b01      	subs	r3, #1
 80049f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80049fa:	210f      	movs	r1, #15
 80049fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004a00:	f7ff ff8e 	bl	8004920 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004a04:	4b05      	ldr	r3, [pc, #20]	; (8004a1c <SysTick_Config+0x40>)
 8004a06:	2200      	movs	r2, #0
 8004a08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a0a:	4b04      	ldr	r3, [pc, #16]	; (8004a1c <SysTick_Config+0x40>)
 8004a0c:	2207      	movs	r2, #7
 8004a0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004a10:	2300      	movs	r3, #0
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3708      	adds	r7, #8
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	bf00      	nop
 8004a1c:	e000e010 	.word	0xe000e010

08004a20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b082      	sub	sp, #8
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	f7ff ff29 	bl	8004880 <__NVIC_SetPriorityGrouping>
}
 8004a2e:	bf00      	nop
 8004a30:	3708      	adds	r7, #8
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}

08004a36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a36:	b580      	push	{r7, lr}
 8004a38:	b086      	sub	sp, #24
 8004a3a:	af00      	add	r7, sp, #0
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	60b9      	str	r1, [r7, #8]
 8004a40:	607a      	str	r2, [r7, #4]
 8004a42:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004a44:	f7ff ff40 	bl	80048c8 <__NVIC_GetPriorityGrouping>
 8004a48:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004a4a:	687a      	ldr	r2, [r7, #4]
 8004a4c:	68b9      	ldr	r1, [r7, #8]
 8004a4e:	6978      	ldr	r0, [r7, #20]
 8004a50:	f7ff ff90 	bl	8004974 <NVIC_EncodePriority>
 8004a54:	4602      	mov	r2, r0
 8004a56:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004a5a:	4611      	mov	r1, r2
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f7ff ff5f 	bl	8004920 <__NVIC_SetPriority>
}
 8004a62:	bf00      	nop
 8004a64:	3718      	adds	r7, #24
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}

08004a6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a6a:	b580      	push	{r7, lr}
 8004a6c:	b082      	sub	sp, #8
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	4603      	mov	r3, r0
 8004a72:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004a74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f7ff ff33 	bl	80048e4 <__NVIC_EnableIRQ>
}
 8004a7e:	bf00      	nop
 8004a80:	3708      	adds	r7, #8
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}

08004a86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004a86:	b580      	push	{r7, lr}
 8004a88:	b082      	sub	sp, #8
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f7ff ffa4 	bl	80049dc <SysTick_Config>
 8004a94:	4603      	mov	r3, r0
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3708      	adds	r7, #8
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}

08004a9e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004a9e:	b580      	push	{r7, lr}
 8004aa0:	b082      	sub	sp, #8
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d101      	bne.n	8004ab0 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	e014      	b.n	8004ada <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	791b      	ldrb	r3, [r3, #4]
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d105      	bne.n	8004ac6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2200      	movs	r2, #0
 8004abe:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f7fd f9f7 	bl	8001eb4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2202      	movs	r2, #2
 8004aca:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004ad8:	2300      	movs	r3, #0
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3708      	adds	r7, #8
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
	...

08004ae4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b088      	sub	sp, #32
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	60f8      	str	r0, [r7, #12]
 8004aec:	60b9      	str	r1, [r7, #8]
 8004aee:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	795b      	ldrb	r3, [r3, #5]
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d101      	bne.n	8004afc <HAL_DAC_ConfigChannel+0x18>
 8004af8:	2302      	movs	r3, #2
 8004afa:	e11d      	b.n	8004d38 <HAL_DAC_ConfigChannel+0x254>
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2201      	movs	r2, #1
 8004b00:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2202      	movs	r2, #2
 8004b06:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	2b04      	cmp	r3, #4
 8004b0e:	d174      	bne.n	8004bfa <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004b10:	f7fe fdf0 	bl	80036f4 <HAL_GetTick>
 8004b14:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d134      	bne.n	8004b86 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004b1c:	e011      	b.n	8004b42 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004b1e:	f7fe fde9 	bl	80036f4 <HAL_GetTick>
 8004b22:	4602      	mov	r2, r0
 8004b24:	69bb      	ldr	r3, [r7, #24]
 8004b26:	1ad3      	subs	r3, r2, r3
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d90a      	bls.n	8004b42 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	691b      	ldr	r3, [r3, #16]
 8004b30:	f043 0208 	orr.w	r2, r3, #8
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2203      	movs	r2, #3
 8004b3c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8004b3e:	2303      	movs	r3, #3
 8004b40:	e0fa      	b.n	8004d38 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b48:	4b7d      	ldr	r3, [pc, #500]	; (8004d40 <HAL_DAC_ConfigChannel+0x25c>)
 8004b4a:	4013      	ands	r3, r2
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d1e6      	bne.n	8004b1e <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8004b50:	2001      	movs	r0, #1
 8004b52:	f7fe fddb 	bl	800370c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	68ba      	ldr	r2, [r7, #8]
 8004b5c:	6992      	ldr	r2, [r2, #24]
 8004b5e:	641a      	str	r2, [r3, #64]	; 0x40
 8004b60:	e01e      	b.n	8004ba0 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004b62:	f7fe fdc7 	bl	80036f4 <HAL_GetTick>
 8004b66:	4602      	mov	r2, r0
 8004b68:	69bb      	ldr	r3, [r7, #24]
 8004b6a:	1ad3      	subs	r3, r2, r3
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d90a      	bls.n	8004b86 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	691b      	ldr	r3, [r3, #16]
 8004b74:	f043 0208 	orr.w	r2, r3, #8
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2203      	movs	r2, #3
 8004b80:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8004b82:	2303      	movs	r3, #3
 8004b84:	e0d8      	b.n	8004d38 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	dbe8      	blt.n	8004b62 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8004b90:	2001      	movs	r0, #1
 8004b92:	f7fe fdbb 	bl	800370c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	68ba      	ldr	r2, [r7, #8]
 8004b9c:	6992      	ldr	r2, [r2, #24]
 8004b9e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	f003 0310 	and.w	r3, r3, #16
 8004bac:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8004bb0:	fa01 f303 	lsl.w	r3, r1, r3
 8004bb4:	43db      	mvns	r3, r3
 8004bb6:	ea02 0103 	and.w	r1, r2, r3
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	69da      	ldr	r2, [r3, #28]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f003 0310 	and.w	r3, r3, #16
 8004bc4:	409a      	lsls	r2, r3
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	430a      	orrs	r2, r1
 8004bcc:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f003 0310 	and.w	r3, r3, #16
 8004bda:	21ff      	movs	r1, #255	; 0xff
 8004bdc:	fa01 f303 	lsl.w	r3, r1, r3
 8004be0:	43db      	mvns	r3, r3
 8004be2:	ea02 0103 	and.w	r1, r2, r3
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	6a1a      	ldr	r2, [r3, #32]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f003 0310 	and.w	r3, r3, #16
 8004bf0:	409a      	lsls	r2, r3
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	430a      	orrs	r2, r1
 8004bf8:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	691b      	ldr	r3, [r3, #16]
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d11d      	bne.n	8004c3e <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c08:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f003 0310 	and.w	r3, r3, #16
 8004c10:	221f      	movs	r2, #31
 8004c12:	fa02 f303 	lsl.w	r3, r2, r3
 8004c16:	43db      	mvns	r3, r3
 8004c18:	697a      	ldr	r2, [r7, #20]
 8004c1a:	4013      	ands	r3, r2
 8004c1c:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	695b      	ldr	r3, [r3, #20]
 8004c22:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	f003 0310 	and.w	r3, r3, #16
 8004c2a:	693a      	ldr	r2, [r7, #16]
 8004c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c30:	697a      	ldr	r2, [r7, #20]
 8004c32:	4313      	orrs	r3, r2
 8004c34:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	697a      	ldr	r2, [r7, #20]
 8004c3c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c44:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f003 0310 	and.w	r3, r3, #16
 8004c4c:	2207      	movs	r2, #7
 8004c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c52:	43db      	mvns	r3, r3
 8004c54:	697a      	ldr	r2, [r7, #20]
 8004c56:	4013      	ands	r3, r2
 8004c58:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	68db      	ldr	r3, [r3, #12]
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d102      	bne.n	8004c68 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8004c62:	2300      	movs	r3, #0
 8004c64:	61fb      	str	r3, [r7, #28]
 8004c66:	e00f      	b.n	8004c88 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	2b02      	cmp	r3, #2
 8004c6e:	d102      	bne.n	8004c76 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8004c70:	2301      	movs	r3, #1
 8004c72:	61fb      	str	r3, [r7, #28]
 8004c74:	e008      	b.n	8004c88 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d102      	bne.n	8004c84 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	61fb      	str	r3, [r7, #28]
 8004c82:	e001      	b.n	8004c88 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8004c84:	2300      	movs	r3, #0
 8004c86:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	4313      	orrs	r3, r2
 8004c92:	69fa      	ldr	r2, [r7, #28]
 8004c94:	4313      	orrs	r3, r2
 8004c96:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	f003 0310 	and.w	r3, r3, #16
 8004c9e:	693a      	ldr	r2, [r7, #16]
 8004ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca4:	697a      	ldr	r2, [r7, #20]
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	697a      	ldr	r2, [r7, #20]
 8004cb0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	6819      	ldr	r1, [r3, #0]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f003 0310 	and.w	r3, r3, #16
 8004cbe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc6:	43da      	mvns	r2, r3
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	400a      	ands	r2, r1
 8004cce:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f003 0310 	and.w	r3, r3, #16
 8004cde:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce6:	43db      	mvns	r3, r3
 8004ce8:	697a      	ldr	r2, [r7, #20]
 8004cea:	4013      	ands	r3, r2
 8004cec:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f003 0310 	and.w	r3, r3, #16
 8004cfa:	693a      	ldr	r2, [r7, #16]
 8004cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8004d00:	697a      	ldr	r2, [r7, #20]
 8004d02:	4313      	orrs	r3, r2
 8004d04:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	697a      	ldr	r2, [r7, #20]
 8004d0c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	6819      	ldr	r1, [r3, #0]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	f003 0310 	and.w	r3, r3, #16
 8004d1a:	22c0      	movs	r2, #192	; 0xc0
 8004d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d20:	43da      	mvns	r2, r3
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	400a      	ands	r2, r1
 8004d28:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2200      	movs	r2, #0
 8004d34:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004d36:	2300      	movs	r3, #0
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	3720      	adds	r7, #32
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}
 8004d40:	20008000 	.word	0x20008000

08004d44 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b086      	sub	sp, #24
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004d4c:	f7fe fcd2 	bl	80036f4 <HAL_GetTick>
 8004d50:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d101      	bne.n	8004d5c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e316      	b.n	800538a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a66      	ldr	r2, [pc, #408]	; (8004efc <HAL_DMA_Init+0x1b8>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d04a      	beq.n	8004dfc <HAL_DMA_Init+0xb8>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a65      	ldr	r2, [pc, #404]	; (8004f00 <HAL_DMA_Init+0x1bc>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d045      	beq.n	8004dfc <HAL_DMA_Init+0xb8>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a63      	ldr	r2, [pc, #396]	; (8004f04 <HAL_DMA_Init+0x1c0>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d040      	beq.n	8004dfc <HAL_DMA_Init+0xb8>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a62      	ldr	r2, [pc, #392]	; (8004f08 <HAL_DMA_Init+0x1c4>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d03b      	beq.n	8004dfc <HAL_DMA_Init+0xb8>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a60      	ldr	r2, [pc, #384]	; (8004f0c <HAL_DMA_Init+0x1c8>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d036      	beq.n	8004dfc <HAL_DMA_Init+0xb8>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a5f      	ldr	r2, [pc, #380]	; (8004f10 <HAL_DMA_Init+0x1cc>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d031      	beq.n	8004dfc <HAL_DMA_Init+0xb8>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a5d      	ldr	r2, [pc, #372]	; (8004f14 <HAL_DMA_Init+0x1d0>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d02c      	beq.n	8004dfc <HAL_DMA_Init+0xb8>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a5c      	ldr	r2, [pc, #368]	; (8004f18 <HAL_DMA_Init+0x1d4>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d027      	beq.n	8004dfc <HAL_DMA_Init+0xb8>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a5a      	ldr	r2, [pc, #360]	; (8004f1c <HAL_DMA_Init+0x1d8>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d022      	beq.n	8004dfc <HAL_DMA_Init+0xb8>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a59      	ldr	r2, [pc, #356]	; (8004f20 <HAL_DMA_Init+0x1dc>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d01d      	beq.n	8004dfc <HAL_DMA_Init+0xb8>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a57      	ldr	r2, [pc, #348]	; (8004f24 <HAL_DMA_Init+0x1e0>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d018      	beq.n	8004dfc <HAL_DMA_Init+0xb8>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a56      	ldr	r2, [pc, #344]	; (8004f28 <HAL_DMA_Init+0x1e4>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d013      	beq.n	8004dfc <HAL_DMA_Init+0xb8>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a54      	ldr	r2, [pc, #336]	; (8004f2c <HAL_DMA_Init+0x1e8>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d00e      	beq.n	8004dfc <HAL_DMA_Init+0xb8>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a53      	ldr	r2, [pc, #332]	; (8004f30 <HAL_DMA_Init+0x1ec>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d009      	beq.n	8004dfc <HAL_DMA_Init+0xb8>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a51      	ldr	r2, [pc, #324]	; (8004f34 <HAL_DMA_Init+0x1f0>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d004      	beq.n	8004dfc <HAL_DMA_Init+0xb8>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a50      	ldr	r2, [pc, #320]	; (8004f38 <HAL_DMA_Init+0x1f4>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d101      	bne.n	8004e00 <HAL_DMA_Init+0xbc>
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e000      	b.n	8004e02 <HAL_DMA_Init+0xbe>
 8004e00:	2300      	movs	r3, #0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	f000 813b 	beq.w	800507e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2202      	movs	r2, #2
 8004e14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a37      	ldr	r2, [pc, #220]	; (8004efc <HAL_DMA_Init+0x1b8>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d04a      	beq.n	8004eb8 <HAL_DMA_Init+0x174>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a36      	ldr	r2, [pc, #216]	; (8004f00 <HAL_DMA_Init+0x1bc>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d045      	beq.n	8004eb8 <HAL_DMA_Init+0x174>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a34      	ldr	r2, [pc, #208]	; (8004f04 <HAL_DMA_Init+0x1c0>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d040      	beq.n	8004eb8 <HAL_DMA_Init+0x174>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a33      	ldr	r2, [pc, #204]	; (8004f08 <HAL_DMA_Init+0x1c4>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d03b      	beq.n	8004eb8 <HAL_DMA_Init+0x174>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a31      	ldr	r2, [pc, #196]	; (8004f0c <HAL_DMA_Init+0x1c8>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d036      	beq.n	8004eb8 <HAL_DMA_Init+0x174>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a30      	ldr	r2, [pc, #192]	; (8004f10 <HAL_DMA_Init+0x1cc>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d031      	beq.n	8004eb8 <HAL_DMA_Init+0x174>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a2e      	ldr	r2, [pc, #184]	; (8004f14 <HAL_DMA_Init+0x1d0>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d02c      	beq.n	8004eb8 <HAL_DMA_Init+0x174>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a2d      	ldr	r2, [pc, #180]	; (8004f18 <HAL_DMA_Init+0x1d4>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d027      	beq.n	8004eb8 <HAL_DMA_Init+0x174>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a2b      	ldr	r2, [pc, #172]	; (8004f1c <HAL_DMA_Init+0x1d8>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d022      	beq.n	8004eb8 <HAL_DMA_Init+0x174>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a2a      	ldr	r2, [pc, #168]	; (8004f20 <HAL_DMA_Init+0x1dc>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d01d      	beq.n	8004eb8 <HAL_DMA_Init+0x174>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a28      	ldr	r2, [pc, #160]	; (8004f24 <HAL_DMA_Init+0x1e0>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d018      	beq.n	8004eb8 <HAL_DMA_Init+0x174>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a27      	ldr	r2, [pc, #156]	; (8004f28 <HAL_DMA_Init+0x1e4>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d013      	beq.n	8004eb8 <HAL_DMA_Init+0x174>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a25      	ldr	r2, [pc, #148]	; (8004f2c <HAL_DMA_Init+0x1e8>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d00e      	beq.n	8004eb8 <HAL_DMA_Init+0x174>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a24      	ldr	r2, [pc, #144]	; (8004f30 <HAL_DMA_Init+0x1ec>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d009      	beq.n	8004eb8 <HAL_DMA_Init+0x174>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a22      	ldr	r2, [pc, #136]	; (8004f34 <HAL_DMA_Init+0x1f0>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d004      	beq.n	8004eb8 <HAL_DMA_Init+0x174>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a21      	ldr	r2, [pc, #132]	; (8004f38 <HAL_DMA_Init+0x1f4>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d108      	bne.n	8004eca <HAL_DMA_Init+0x186>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f022 0201 	bic.w	r2, r2, #1
 8004ec6:	601a      	str	r2, [r3, #0]
 8004ec8:	e007      	b.n	8004eda <HAL_DMA_Init+0x196>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f022 0201 	bic.w	r2, r2, #1
 8004ed8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004eda:	e02f      	b.n	8004f3c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004edc:	f7fe fc0a 	bl	80036f4 <HAL_GetTick>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	1ad3      	subs	r3, r2, r3
 8004ee6:	2b05      	cmp	r3, #5
 8004ee8:	d928      	bls.n	8004f3c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2220      	movs	r2, #32
 8004eee:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2203      	movs	r2, #3
 8004ef4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	e246      	b.n	800538a <HAL_DMA_Init+0x646>
 8004efc:	40020010 	.word	0x40020010
 8004f00:	40020028 	.word	0x40020028
 8004f04:	40020040 	.word	0x40020040
 8004f08:	40020058 	.word	0x40020058
 8004f0c:	40020070 	.word	0x40020070
 8004f10:	40020088 	.word	0x40020088
 8004f14:	400200a0 	.word	0x400200a0
 8004f18:	400200b8 	.word	0x400200b8
 8004f1c:	40020410 	.word	0x40020410
 8004f20:	40020428 	.word	0x40020428
 8004f24:	40020440 	.word	0x40020440
 8004f28:	40020458 	.word	0x40020458
 8004f2c:	40020470 	.word	0x40020470
 8004f30:	40020488 	.word	0x40020488
 8004f34:	400204a0 	.word	0x400204a0
 8004f38:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f003 0301 	and.w	r3, r3, #1
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d1c8      	bne.n	8004edc <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004f52:	697a      	ldr	r2, [r7, #20]
 8004f54:	4b83      	ldr	r3, [pc, #524]	; (8005164 <HAL_DMA_Init+0x420>)
 8004f56:	4013      	ands	r3, r2
 8004f58:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004f62:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	691b      	ldr	r3, [r3, #16]
 8004f68:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f6e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	699b      	ldr	r3, [r3, #24]
 8004f74:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f7a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6a1b      	ldr	r3, [r3, #32]
 8004f80:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004f82:	697a      	ldr	r2, [r7, #20]
 8004f84:	4313      	orrs	r3, r2
 8004f86:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8c:	2b04      	cmp	r3, #4
 8004f8e:	d107      	bne.n	8004fa0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	697a      	ldr	r2, [r7, #20]
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004fa0:	4b71      	ldr	r3, [pc, #452]	; (8005168 <HAL_DMA_Init+0x424>)
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	4b71      	ldr	r3, [pc, #452]	; (800516c <HAL_DMA_Init+0x428>)
 8004fa6:	4013      	ands	r3, r2
 8004fa8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fac:	d328      	bcc.n	8005000 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	2b28      	cmp	r3, #40	; 0x28
 8004fb4:	d903      	bls.n	8004fbe <HAL_DMA_Init+0x27a>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	2b2e      	cmp	r3, #46	; 0x2e
 8004fbc:	d917      	bls.n	8004fee <HAL_DMA_Init+0x2aa>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	2b3e      	cmp	r3, #62	; 0x3e
 8004fc4:	d903      	bls.n	8004fce <HAL_DMA_Init+0x28a>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	2b42      	cmp	r3, #66	; 0x42
 8004fcc:	d90f      	bls.n	8004fee <HAL_DMA_Init+0x2aa>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	2b46      	cmp	r3, #70	; 0x46
 8004fd4:	d903      	bls.n	8004fde <HAL_DMA_Init+0x29a>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	2b48      	cmp	r3, #72	; 0x48
 8004fdc:	d907      	bls.n	8004fee <HAL_DMA_Init+0x2aa>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	2b4e      	cmp	r3, #78	; 0x4e
 8004fe4:	d905      	bls.n	8004ff2 <HAL_DMA_Init+0x2ae>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	2b52      	cmp	r3, #82	; 0x52
 8004fec:	d801      	bhi.n	8004ff2 <HAL_DMA_Init+0x2ae>
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e000      	b.n	8004ff4 <HAL_DMA_Init+0x2b0>
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d003      	beq.n	8005000 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ffe:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	697a      	ldr	r2, [r7, #20]
 8005006:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	695b      	ldr	r3, [r3, #20]
 800500e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	f023 0307 	bic.w	r3, r3, #7
 8005016:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501c:	697a      	ldr	r2, [r7, #20]
 800501e:	4313      	orrs	r3, r2
 8005020:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005026:	2b04      	cmp	r3, #4
 8005028:	d117      	bne.n	800505a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800502e:	697a      	ldr	r2, [r7, #20]
 8005030:	4313      	orrs	r3, r2
 8005032:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005038:	2b00      	cmp	r3, #0
 800503a:	d00e      	beq.n	800505a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f001 f9b9 	bl	80063b4 <DMA_CheckFifoParam>
 8005042:	4603      	mov	r3, r0
 8005044:	2b00      	cmp	r3, #0
 8005046:	d008      	beq.n	800505a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2240      	movs	r2, #64	; 0x40
 800504c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2201      	movs	r2, #1
 8005052:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e197      	b.n	800538a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	697a      	ldr	r2, [r7, #20]
 8005060:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f001 f8f4 	bl	8006250 <DMA_CalcBaseAndBitshift>
 8005068:	4603      	mov	r3, r0
 800506a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005070:	f003 031f 	and.w	r3, r3, #31
 8005074:	223f      	movs	r2, #63	; 0x3f
 8005076:	409a      	lsls	r2, r3
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	609a      	str	r2, [r3, #8]
 800507c:	e0cd      	b.n	800521a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a3b      	ldr	r2, [pc, #236]	; (8005170 <HAL_DMA_Init+0x42c>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d022      	beq.n	80050ce <HAL_DMA_Init+0x38a>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a39      	ldr	r2, [pc, #228]	; (8005174 <HAL_DMA_Init+0x430>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d01d      	beq.n	80050ce <HAL_DMA_Init+0x38a>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a38      	ldr	r2, [pc, #224]	; (8005178 <HAL_DMA_Init+0x434>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d018      	beq.n	80050ce <HAL_DMA_Init+0x38a>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a36      	ldr	r2, [pc, #216]	; (800517c <HAL_DMA_Init+0x438>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d013      	beq.n	80050ce <HAL_DMA_Init+0x38a>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a35      	ldr	r2, [pc, #212]	; (8005180 <HAL_DMA_Init+0x43c>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d00e      	beq.n	80050ce <HAL_DMA_Init+0x38a>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a33      	ldr	r2, [pc, #204]	; (8005184 <HAL_DMA_Init+0x440>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d009      	beq.n	80050ce <HAL_DMA_Init+0x38a>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a32      	ldr	r2, [pc, #200]	; (8005188 <HAL_DMA_Init+0x444>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d004      	beq.n	80050ce <HAL_DMA_Init+0x38a>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a30      	ldr	r2, [pc, #192]	; (800518c <HAL_DMA_Init+0x448>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d101      	bne.n	80050d2 <HAL_DMA_Init+0x38e>
 80050ce:	2301      	movs	r3, #1
 80050d0:	e000      	b.n	80050d4 <HAL_DMA_Init+0x390>
 80050d2:	2300      	movs	r3, #0
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	f000 8097 	beq.w	8005208 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a24      	ldr	r2, [pc, #144]	; (8005170 <HAL_DMA_Init+0x42c>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d021      	beq.n	8005128 <HAL_DMA_Init+0x3e4>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a22      	ldr	r2, [pc, #136]	; (8005174 <HAL_DMA_Init+0x430>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d01c      	beq.n	8005128 <HAL_DMA_Init+0x3e4>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a21      	ldr	r2, [pc, #132]	; (8005178 <HAL_DMA_Init+0x434>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d017      	beq.n	8005128 <HAL_DMA_Init+0x3e4>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a1f      	ldr	r2, [pc, #124]	; (800517c <HAL_DMA_Init+0x438>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d012      	beq.n	8005128 <HAL_DMA_Init+0x3e4>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a1e      	ldr	r2, [pc, #120]	; (8005180 <HAL_DMA_Init+0x43c>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d00d      	beq.n	8005128 <HAL_DMA_Init+0x3e4>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a1c      	ldr	r2, [pc, #112]	; (8005184 <HAL_DMA_Init+0x440>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d008      	beq.n	8005128 <HAL_DMA_Init+0x3e4>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a1b      	ldr	r2, [pc, #108]	; (8005188 <HAL_DMA_Init+0x444>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d003      	beq.n	8005128 <HAL_DMA_Init+0x3e4>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a19      	ldr	r2, [pc, #100]	; (800518c <HAL_DMA_Init+0x448>)
 8005126:	4293      	cmp	r3, r2
 8005128:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2200      	movs	r2, #0
 800512e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2202      	movs	r2, #2
 8005136:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005142:	697a      	ldr	r2, [r7, #20]
 8005144:	4b12      	ldr	r3, [pc, #72]	; (8005190 <HAL_DMA_Init+0x44c>)
 8005146:	4013      	ands	r3, r2
 8005148:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	2b40      	cmp	r3, #64	; 0x40
 8005150:	d020      	beq.n	8005194 <HAL_DMA_Init+0x450>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	2b80      	cmp	r3, #128	; 0x80
 8005158:	d102      	bne.n	8005160 <HAL_DMA_Init+0x41c>
 800515a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800515e:	e01a      	b.n	8005196 <HAL_DMA_Init+0x452>
 8005160:	2300      	movs	r3, #0
 8005162:	e018      	b.n	8005196 <HAL_DMA_Init+0x452>
 8005164:	fe10803f 	.word	0xfe10803f
 8005168:	5c001000 	.word	0x5c001000
 800516c:	ffff0000 	.word	0xffff0000
 8005170:	58025408 	.word	0x58025408
 8005174:	5802541c 	.word	0x5802541c
 8005178:	58025430 	.word	0x58025430
 800517c:	58025444 	.word	0x58025444
 8005180:	58025458 	.word	0x58025458
 8005184:	5802546c 	.word	0x5802546c
 8005188:	58025480 	.word	0x58025480
 800518c:	58025494 	.word	0x58025494
 8005190:	fffe000f 	.word	0xfffe000f
 8005194:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	68d2      	ldr	r2, [r2, #12]
 800519a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800519c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	691b      	ldr	r3, [r3, #16]
 80051a2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80051a4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	695b      	ldr	r3, [r3, #20]
 80051aa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80051ac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	699b      	ldr	r3, [r3, #24]
 80051b2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80051b4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	69db      	ldr	r3, [r3, #28]
 80051ba:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80051bc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6a1b      	ldr	r3, [r3, #32]
 80051c2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80051c4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80051c6:	697a      	ldr	r2, [r7, #20]
 80051c8:	4313      	orrs	r3, r2
 80051ca:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	697a      	ldr	r2, [r7, #20]
 80051d2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	461a      	mov	r2, r3
 80051da:	4b6e      	ldr	r3, [pc, #440]	; (8005394 <HAL_DMA_Init+0x650>)
 80051dc:	4413      	add	r3, r2
 80051de:	4a6e      	ldr	r2, [pc, #440]	; (8005398 <HAL_DMA_Init+0x654>)
 80051e0:	fba2 2303 	umull	r2, r3, r2, r3
 80051e4:	091b      	lsrs	r3, r3, #4
 80051e6:	009a      	lsls	r2, r3, #2
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f001 f82f 	bl	8006250 <DMA_CalcBaseAndBitshift>
 80051f2:	4603      	mov	r3, r0
 80051f4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051fa:	f003 031f 	and.w	r3, r3, #31
 80051fe:	2201      	movs	r2, #1
 8005200:	409a      	lsls	r2, r3
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	605a      	str	r2, [r3, #4]
 8005206:	e008      	b.n	800521a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2240      	movs	r2, #64	; 0x40
 800520c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2203      	movs	r2, #3
 8005212:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	e0b7      	b.n	800538a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a5f      	ldr	r2, [pc, #380]	; (800539c <HAL_DMA_Init+0x658>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d072      	beq.n	800530a <HAL_DMA_Init+0x5c6>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a5d      	ldr	r2, [pc, #372]	; (80053a0 <HAL_DMA_Init+0x65c>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d06d      	beq.n	800530a <HAL_DMA_Init+0x5c6>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a5c      	ldr	r2, [pc, #368]	; (80053a4 <HAL_DMA_Init+0x660>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d068      	beq.n	800530a <HAL_DMA_Init+0x5c6>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a5a      	ldr	r2, [pc, #360]	; (80053a8 <HAL_DMA_Init+0x664>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d063      	beq.n	800530a <HAL_DMA_Init+0x5c6>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a59      	ldr	r2, [pc, #356]	; (80053ac <HAL_DMA_Init+0x668>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d05e      	beq.n	800530a <HAL_DMA_Init+0x5c6>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a57      	ldr	r2, [pc, #348]	; (80053b0 <HAL_DMA_Init+0x66c>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d059      	beq.n	800530a <HAL_DMA_Init+0x5c6>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a56      	ldr	r2, [pc, #344]	; (80053b4 <HAL_DMA_Init+0x670>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d054      	beq.n	800530a <HAL_DMA_Init+0x5c6>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a54      	ldr	r2, [pc, #336]	; (80053b8 <HAL_DMA_Init+0x674>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d04f      	beq.n	800530a <HAL_DMA_Init+0x5c6>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a53      	ldr	r2, [pc, #332]	; (80053bc <HAL_DMA_Init+0x678>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d04a      	beq.n	800530a <HAL_DMA_Init+0x5c6>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a51      	ldr	r2, [pc, #324]	; (80053c0 <HAL_DMA_Init+0x67c>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d045      	beq.n	800530a <HAL_DMA_Init+0x5c6>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a50      	ldr	r2, [pc, #320]	; (80053c4 <HAL_DMA_Init+0x680>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d040      	beq.n	800530a <HAL_DMA_Init+0x5c6>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a4e      	ldr	r2, [pc, #312]	; (80053c8 <HAL_DMA_Init+0x684>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d03b      	beq.n	800530a <HAL_DMA_Init+0x5c6>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a4d      	ldr	r2, [pc, #308]	; (80053cc <HAL_DMA_Init+0x688>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d036      	beq.n	800530a <HAL_DMA_Init+0x5c6>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a4b      	ldr	r2, [pc, #300]	; (80053d0 <HAL_DMA_Init+0x68c>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d031      	beq.n	800530a <HAL_DMA_Init+0x5c6>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a4a      	ldr	r2, [pc, #296]	; (80053d4 <HAL_DMA_Init+0x690>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d02c      	beq.n	800530a <HAL_DMA_Init+0x5c6>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a48      	ldr	r2, [pc, #288]	; (80053d8 <HAL_DMA_Init+0x694>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d027      	beq.n	800530a <HAL_DMA_Init+0x5c6>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a47      	ldr	r2, [pc, #284]	; (80053dc <HAL_DMA_Init+0x698>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d022      	beq.n	800530a <HAL_DMA_Init+0x5c6>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a45      	ldr	r2, [pc, #276]	; (80053e0 <HAL_DMA_Init+0x69c>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d01d      	beq.n	800530a <HAL_DMA_Init+0x5c6>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a44      	ldr	r2, [pc, #272]	; (80053e4 <HAL_DMA_Init+0x6a0>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d018      	beq.n	800530a <HAL_DMA_Init+0x5c6>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a42      	ldr	r2, [pc, #264]	; (80053e8 <HAL_DMA_Init+0x6a4>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d013      	beq.n	800530a <HAL_DMA_Init+0x5c6>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a41      	ldr	r2, [pc, #260]	; (80053ec <HAL_DMA_Init+0x6a8>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d00e      	beq.n	800530a <HAL_DMA_Init+0x5c6>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a3f      	ldr	r2, [pc, #252]	; (80053f0 <HAL_DMA_Init+0x6ac>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d009      	beq.n	800530a <HAL_DMA_Init+0x5c6>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a3e      	ldr	r2, [pc, #248]	; (80053f4 <HAL_DMA_Init+0x6b0>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d004      	beq.n	800530a <HAL_DMA_Init+0x5c6>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a3c      	ldr	r2, [pc, #240]	; (80053f8 <HAL_DMA_Init+0x6b4>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d101      	bne.n	800530e <HAL_DMA_Init+0x5ca>
 800530a:	2301      	movs	r3, #1
 800530c:	e000      	b.n	8005310 <HAL_DMA_Init+0x5cc>
 800530e:	2300      	movs	r3, #0
 8005310:	2b00      	cmp	r3, #0
 8005312:	d032      	beq.n	800537a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f001 f8c9 	bl	80064ac <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	2b80      	cmp	r3, #128	; 0x80
 8005320:	d102      	bne.n	8005328 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2200      	movs	r2, #0
 8005326:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	685a      	ldr	r2, [r3, #4]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005330:	b2d2      	uxtb	r2, r2
 8005332:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800533c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d010      	beq.n	8005368 <HAL_DMA_Init+0x624>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	2b08      	cmp	r3, #8
 800534c:	d80c      	bhi.n	8005368 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f001 f946 	bl	80065e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005358:	2200      	movs	r2, #0
 800535a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005364:	605a      	str	r2, [r3, #4]
 8005366:	e008      	b.n	800537a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2200      	movs	r2, #0
 800536c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2200      	movs	r2, #0
 8005372:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2200      	movs	r2, #0
 8005378:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2201      	movs	r2, #1
 8005384:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005388:	2300      	movs	r3, #0
}
 800538a:	4618      	mov	r0, r3
 800538c:	3718      	adds	r7, #24
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}
 8005392:	bf00      	nop
 8005394:	a7fdabf8 	.word	0xa7fdabf8
 8005398:	cccccccd 	.word	0xcccccccd
 800539c:	40020010 	.word	0x40020010
 80053a0:	40020028 	.word	0x40020028
 80053a4:	40020040 	.word	0x40020040
 80053a8:	40020058 	.word	0x40020058
 80053ac:	40020070 	.word	0x40020070
 80053b0:	40020088 	.word	0x40020088
 80053b4:	400200a0 	.word	0x400200a0
 80053b8:	400200b8 	.word	0x400200b8
 80053bc:	40020410 	.word	0x40020410
 80053c0:	40020428 	.word	0x40020428
 80053c4:	40020440 	.word	0x40020440
 80053c8:	40020458 	.word	0x40020458
 80053cc:	40020470 	.word	0x40020470
 80053d0:	40020488 	.word	0x40020488
 80053d4:	400204a0 	.word	0x400204a0
 80053d8:	400204b8 	.word	0x400204b8
 80053dc:	58025408 	.word	0x58025408
 80053e0:	5802541c 	.word	0x5802541c
 80053e4:	58025430 	.word	0x58025430
 80053e8:	58025444 	.word	0x58025444
 80053ec:	58025458 	.word	0x58025458
 80053f0:	5802546c 	.word	0x5802546c
 80053f4:	58025480 	.word	0x58025480
 80053f8:	58025494 	.word	0x58025494

080053fc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b08a      	sub	sp, #40	; 0x28
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005404:	2300      	movs	r3, #0
 8005406:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005408:	4b67      	ldr	r3, [pc, #412]	; (80055a8 <HAL_DMA_IRQHandler+0x1ac>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a67      	ldr	r2, [pc, #412]	; (80055ac <HAL_DMA_IRQHandler+0x1b0>)
 800540e:	fba2 2303 	umull	r2, r3, r2, r3
 8005412:	0a9b      	lsrs	r3, r3, #10
 8005414:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800541a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005420:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005422:	6a3b      	ldr	r3, [r7, #32]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005428:	69fb      	ldr	r3, [r7, #28]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a5f      	ldr	r2, [pc, #380]	; (80055b0 <HAL_DMA_IRQHandler+0x1b4>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d04a      	beq.n	80054ce <HAL_DMA_IRQHandler+0xd2>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a5d      	ldr	r2, [pc, #372]	; (80055b4 <HAL_DMA_IRQHandler+0x1b8>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d045      	beq.n	80054ce <HAL_DMA_IRQHandler+0xd2>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a5c      	ldr	r2, [pc, #368]	; (80055b8 <HAL_DMA_IRQHandler+0x1bc>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d040      	beq.n	80054ce <HAL_DMA_IRQHandler+0xd2>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a5a      	ldr	r2, [pc, #360]	; (80055bc <HAL_DMA_IRQHandler+0x1c0>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d03b      	beq.n	80054ce <HAL_DMA_IRQHandler+0xd2>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a59      	ldr	r2, [pc, #356]	; (80055c0 <HAL_DMA_IRQHandler+0x1c4>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d036      	beq.n	80054ce <HAL_DMA_IRQHandler+0xd2>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a57      	ldr	r2, [pc, #348]	; (80055c4 <HAL_DMA_IRQHandler+0x1c8>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d031      	beq.n	80054ce <HAL_DMA_IRQHandler+0xd2>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a56      	ldr	r2, [pc, #344]	; (80055c8 <HAL_DMA_IRQHandler+0x1cc>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d02c      	beq.n	80054ce <HAL_DMA_IRQHandler+0xd2>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a54      	ldr	r2, [pc, #336]	; (80055cc <HAL_DMA_IRQHandler+0x1d0>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d027      	beq.n	80054ce <HAL_DMA_IRQHandler+0xd2>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a53      	ldr	r2, [pc, #332]	; (80055d0 <HAL_DMA_IRQHandler+0x1d4>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d022      	beq.n	80054ce <HAL_DMA_IRQHandler+0xd2>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a51      	ldr	r2, [pc, #324]	; (80055d4 <HAL_DMA_IRQHandler+0x1d8>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d01d      	beq.n	80054ce <HAL_DMA_IRQHandler+0xd2>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a50      	ldr	r2, [pc, #320]	; (80055d8 <HAL_DMA_IRQHandler+0x1dc>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d018      	beq.n	80054ce <HAL_DMA_IRQHandler+0xd2>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a4e      	ldr	r2, [pc, #312]	; (80055dc <HAL_DMA_IRQHandler+0x1e0>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d013      	beq.n	80054ce <HAL_DMA_IRQHandler+0xd2>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a4d      	ldr	r2, [pc, #308]	; (80055e0 <HAL_DMA_IRQHandler+0x1e4>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d00e      	beq.n	80054ce <HAL_DMA_IRQHandler+0xd2>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a4b      	ldr	r2, [pc, #300]	; (80055e4 <HAL_DMA_IRQHandler+0x1e8>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d009      	beq.n	80054ce <HAL_DMA_IRQHandler+0xd2>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a4a      	ldr	r2, [pc, #296]	; (80055e8 <HAL_DMA_IRQHandler+0x1ec>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d004      	beq.n	80054ce <HAL_DMA_IRQHandler+0xd2>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a48      	ldr	r2, [pc, #288]	; (80055ec <HAL_DMA_IRQHandler+0x1f0>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d101      	bne.n	80054d2 <HAL_DMA_IRQHandler+0xd6>
 80054ce:	2301      	movs	r3, #1
 80054d0:	e000      	b.n	80054d4 <HAL_DMA_IRQHandler+0xd8>
 80054d2:	2300      	movs	r3, #0
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	f000 842b 	beq.w	8005d30 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054de:	f003 031f 	and.w	r3, r3, #31
 80054e2:	2208      	movs	r2, #8
 80054e4:	409a      	lsls	r2, r3
 80054e6:	69bb      	ldr	r3, [r7, #24]
 80054e8:	4013      	ands	r3, r2
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	f000 80a2 	beq.w	8005634 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a2e      	ldr	r2, [pc, #184]	; (80055b0 <HAL_DMA_IRQHandler+0x1b4>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d04a      	beq.n	8005590 <HAL_DMA_IRQHandler+0x194>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a2d      	ldr	r2, [pc, #180]	; (80055b4 <HAL_DMA_IRQHandler+0x1b8>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d045      	beq.n	8005590 <HAL_DMA_IRQHandler+0x194>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a2b      	ldr	r2, [pc, #172]	; (80055b8 <HAL_DMA_IRQHandler+0x1bc>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d040      	beq.n	8005590 <HAL_DMA_IRQHandler+0x194>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a2a      	ldr	r2, [pc, #168]	; (80055bc <HAL_DMA_IRQHandler+0x1c0>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d03b      	beq.n	8005590 <HAL_DMA_IRQHandler+0x194>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a28      	ldr	r2, [pc, #160]	; (80055c0 <HAL_DMA_IRQHandler+0x1c4>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d036      	beq.n	8005590 <HAL_DMA_IRQHandler+0x194>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a27      	ldr	r2, [pc, #156]	; (80055c4 <HAL_DMA_IRQHandler+0x1c8>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d031      	beq.n	8005590 <HAL_DMA_IRQHandler+0x194>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a25      	ldr	r2, [pc, #148]	; (80055c8 <HAL_DMA_IRQHandler+0x1cc>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d02c      	beq.n	8005590 <HAL_DMA_IRQHandler+0x194>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a24      	ldr	r2, [pc, #144]	; (80055cc <HAL_DMA_IRQHandler+0x1d0>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d027      	beq.n	8005590 <HAL_DMA_IRQHandler+0x194>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a22      	ldr	r2, [pc, #136]	; (80055d0 <HAL_DMA_IRQHandler+0x1d4>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d022      	beq.n	8005590 <HAL_DMA_IRQHandler+0x194>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a21      	ldr	r2, [pc, #132]	; (80055d4 <HAL_DMA_IRQHandler+0x1d8>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d01d      	beq.n	8005590 <HAL_DMA_IRQHandler+0x194>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a1f      	ldr	r2, [pc, #124]	; (80055d8 <HAL_DMA_IRQHandler+0x1dc>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d018      	beq.n	8005590 <HAL_DMA_IRQHandler+0x194>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a1e      	ldr	r2, [pc, #120]	; (80055dc <HAL_DMA_IRQHandler+0x1e0>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d013      	beq.n	8005590 <HAL_DMA_IRQHandler+0x194>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a1c      	ldr	r2, [pc, #112]	; (80055e0 <HAL_DMA_IRQHandler+0x1e4>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d00e      	beq.n	8005590 <HAL_DMA_IRQHandler+0x194>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a1b      	ldr	r2, [pc, #108]	; (80055e4 <HAL_DMA_IRQHandler+0x1e8>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d009      	beq.n	8005590 <HAL_DMA_IRQHandler+0x194>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a19      	ldr	r2, [pc, #100]	; (80055e8 <HAL_DMA_IRQHandler+0x1ec>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d004      	beq.n	8005590 <HAL_DMA_IRQHandler+0x194>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a18      	ldr	r2, [pc, #96]	; (80055ec <HAL_DMA_IRQHandler+0x1f0>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d12f      	bne.n	80055f0 <HAL_DMA_IRQHandler+0x1f4>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 0304 	and.w	r3, r3, #4
 800559a:	2b00      	cmp	r3, #0
 800559c:	bf14      	ite	ne
 800559e:	2301      	movne	r3, #1
 80055a0:	2300      	moveq	r3, #0
 80055a2:	b2db      	uxtb	r3, r3
 80055a4:	e02e      	b.n	8005604 <HAL_DMA_IRQHandler+0x208>
 80055a6:	bf00      	nop
 80055a8:	24000000 	.word	0x24000000
 80055ac:	1b4e81b5 	.word	0x1b4e81b5
 80055b0:	40020010 	.word	0x40020010
 80055b4:	40020028 	.word	0x40020028
 80055b8:	40020040 	.word	0x40020040
 80055bc:	40020058 	.word	0x40020058
 80055c0:	40020070 	.word	0x40020070
 80055c4:	40020088 	.word	0x40020088
 80055c8:	400200a0 	.word	0x400200a0
 80055cc:	400200b8 	.word	0x400200b8
 80055d0:	40020410 	.word	0x40020410
 80055d4:	40020428 	.word	0x40020428
 80055d8:	40020440 	.word	0x40020440
 80055dc:	40020458 	.word	0x40020458
 80055e0:	40020470 	.word	0x40020470
 80055e4:	40020488 	.word	0x40020488
 80055e8:	400204a0 	.word	0x400204a0
 80055ec:	400204b8 	.word	0x400204b8
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f003 0308 	and.w	r3, r3, #8
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	bf14      	ite	ne
 80055fe:	2301      	movne	r3, #1
 8005600:	2300      	moveq	r3, #0
 8005602:	b2db      	uxtb	r3, r3
 8005604:	2b00      	cmp	r3, #0
 8005606:	d015      	beq.n	8005634 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f022 0204 	bic.w	r2, r2, #4
 8005616:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800561c:	f003 031f 	and.w	r3, r3, #31
 8005620:	2208      	movs	r2, #8
 8005622:	409a      	lsls	r2, r3
 8005624:	6a3b      	ldr	r3, [r7, #32]
 8005626:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800562c:	f043 0201 	orr.w	r2, r3, #1
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005638:	f003 031f 	and.w	r3, r3, #31
 800563c:	69ba      	ldr	r2, [r7, #24]
 800563e:	fa22 f303 	lsr.w	r3, r2, r3
 8005642:	f003 0301 	and.w	r3, r3, #1
 8005646:	2b00      	cmp	r3, #0
 8005648:	d06e      	beq.n	8005728 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a69      	ldr	r2, [pc, #420]	; (80057f4 <HAL_DMA_IRQHandler+0x3f8>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d04a      	beq.n	80056ea <HAL_DMA_IRQHandler+0x2ee>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a67      	ldr	r2, [pc, #412]	; (80057f8 <HAL_DMA_IRQHandler+0x3fc>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d045      	beq.n	80056ea <HAL_DMA_IRQHandler+0x2ee>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a66      	ldr	r2, [pc, #408]	; (80057fc <HAL_DMA_IRQHandler+0x400>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d040      	beq.n	80056ea <HAL_DMA_IRQHandler+0x2ee>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a64      	ldr	r2, [pc, #400]	; (8005800 <HAL_DMA_IRQHandler+0x404>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d03b      	beq.n	80056ea <HAL_DMA_IRQHandler+0x2ee>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a63      	ldr	r2, [pc, #396]	; (8005804 <HAL_DMA_IRQHandler+0x408>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d036      	beq.n	80056ea <HAL_DMA_IRQHandler+0x2ee>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a61      	ldr	r2, [pc, #388]	; (8005808 <HAL_DMA_IRQHandler+0x40c>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d031      	beq.n	80056ea <HAL_DMA_IRQHandler+0x2ee>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a60      	ldr	r2, [pc, #384]	; (800580c <HAL_DMA_IRQHandler+0x410>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d02c      	beq.n	80056ea <HAL_DMA_IRQHandler+0x2ee>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a5e      	ldr	r2, [pc, #376]	; (8005810 <HAL_DMA_IRQHandler+0x414>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d027      	beq.n	80056ea <HAL_DMA_IRQHandler+0x2ee>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a5d      	ldr	r2, [pc, #372]	; (8005814 <HAL_DMA_IRQHandler+0x418>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d022      	beq.n	80056ea <HAL_DMA_IRQHandler+0x2ee>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a5b      	ldr	r2, [pc, #364]	; (8005818 <HAL_DMA_IRQHandler+0x41c>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d01d      	beq.n	80056ea <HAL_DMA_IRQHandler+0x2ee>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a5a      	ldr	r2, [pc, #360]	; (800581c <HAL_DMA_IRQHandler+0x420>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d018      	beq.n	80056ea <HAL_DMA_IRQHandler+0x2ee>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a58      	ldr	r2, [pc, #352]	; (8005820 <HAL_DMA_IRQHandler+0x424>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d013      	beq.n	80056ea <HAL_DMA_IRQHandler+0x2ee>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a57      	ldr	r2, [pc, #348]	; (8005824 <HAL_DMA_IRQHandler+0x428>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d00e      	beq.n	80056ea <HAL_DMA_IRQHandler+0x2ee>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a55      	ldr	r2, [pc, #340]	; (8005828 <HAL_DMA_IRQHandler+0x42c>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d009      	beq.n	80056ea <HAL_DMA_IRQHandler+0x2ee>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a54      	ldr	r2, [pc, #336]	; (800582c <HAL_DMA_IRQHandler+0x430>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d004      	beq.n	80056ea <HAL_DMA_IRQHandler+0x2ee>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a52      	ldr	r2, [pc, #328]	; (8005830 <HAL_DMA_IRQHandler+0x434>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d10a      	bne.n	8005700 <HAL_DMA_IRQHandler+0x304>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	695b      	ldr	r3, [r3, #20]
 80056f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	bf14      	ite	ne
 80056f8:	2301      	movne	r3, #1
 80056fa:	2300      	moveq	r3, #0
 80056fc:	b2db      	uxtb	r3, r3
 80056fe:	e003      	b.n	8005708 <HAL_DMA_IRQHandler+0x30c>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	2300      	movs	r3, #0
 8005708:	2b00      	cmp	r3, #0
 800570a:	d00d      	beq.n	8005728 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005710:	f003 031f 	and.w	r3, r3, #31
 8005714:	2201      	movs	r2, #1
 8005716:	409a      	lsls	r2, r3
 8005718:	6a3b      	ldr	r3, [r7, #32]
 800571a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005720:	f043 0202 	orr.w	r2, r3, #2
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800572c:	f003 031f 	and.w	r3, r3, #31
 8005730:	2204      	movs	r2, #4
 8005732:	409a      	lsls	r2, r3
 8005734:	69bb      	ldr	r3, [r7, #24]
 8005736:	4013      	ands	r3, r2
 8005738:	2b00      	cmp	r3, #0
 800573a:	f000 808f 	beq.w	800585c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a2c      	ldr	r2, [pc, #176]	; (80057f4 <HAL_DMA_IRQHandler+0x3f8>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d04a      	beq.n	80057de <HAL_DMA_IRQHandler+0x3e2>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a2a      	ldr	r2, [pc, #168]	; (80057f8 <HAL_DMA_IRQHandler+0x3fc>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d045      	beq.n	80057de <HAL_DMA_IRQHandler+0x3e2>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a29      	ldr	r2, [pc, #164]	; (80057fc <HAL_DMA_IRQHandler+0x400>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d040      	beq.n	80057de <HAL_DMA_IRQHandler+0x3e2>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a27      	ldr	r2, [pc, #156]	; (8005800 <HAL_DMA_IRQHandler+0x404>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d03b      	beq.n	80057de <HAL_DMA_IRQHandler+0x3e2>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a26      	ldr	r2, [pc, #152]	; (8005804 <HAL_DMA_IRQHandler+0x408>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d036      	beq.n	80057de <HAL_DMA_IRQHandler+0x3e2>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a24      	ldr	r2, [pc, #144]	; (8005808 <HAL_DMA_IRQHandler+0x40c>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d031      	beq.n	80057de <HAL_DMA_IRQHandler+0x3e2>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a23      	ldr	r2, [pc, #140]	; (800580c <HAL_DMA_IRQHandler+0x410>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d02c      	beq.n	80057de <HAL_DMA_IRQHandler+0x3e2>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a21      	ldr	r2, [pc, #132]	; (8005810 <HAL_DMA_IRQHandler+0x414>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d027      	beq.n	80057de <HAL_DMA_IRQHandler+0x3e2>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a20      	ldr	r2, [pc, #128]	; (8005814 <HAL_DMA_IRQHandler+0x418>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d022      	beq.n	80057de <HAL_DMA_IRQHandler+0x3e2>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a1e      	ldr	r2, [pc, #120]	; (8005818 <HAL_DMA_IRQHandler+0x41c>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d01d      	beq.n	80057de <HAL_DMA_IRQHandler+0x3e2>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a1d      	ldr	r2, [pc, #116]	; (800581c <HAL_DMA_IRQHandler+0x420>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d018      	beq.n	80057de <HAL_DMA_IRQHandler+0x3e2>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a1b      	ldr	r2, [pc, #108]	; (8005820 <HAL_DMA_IRQHandler+0x424>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d013      	beq.n	80057de <HAL_DMA_IRQHandler+0x3e2>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a1a      	ldr	r2, [pc, #104]	; (8005824 <HAL_DMA_IRQHandler+0x428>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d00e      	beq.n	80057de <HAL_DMA_IRQHandler+0x3e2>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a18      	ldr	r2, [pc, #96]	; (8005828 <HAL_DMA_IRQHandler+0x42c>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d009      	beq.n	80057de <HAL_DMA_IRQHandler+0x3e2>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a17      	ldr	r2, [pc, #92]	; (800582c <HAL_DMA_IRQHandler+0x430>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d004      	beq.n	80057de <HAL_DMA_IRQHandler+0x3e2>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a15      	ldr	r2, [pc, #84]	; (8005830 <HAL_DMA_IRQHandler+0x434>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d12a      	bne.n	8005834 <HAL_DMA_IRQHandler+0x438>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f003 0302 	and.w	r3, r3, #2
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	bf14      	ite	ne
 80057ec:	2301      	movne	r3, #1
 80057ee:	2300      	moveq	r3, #0
 80057f0:	b2db      	uxtb	r3, r3
 80057f2:	e023      	b.n	800583c <HAL_DMA_IRQHandler+0x440>
 80057f4:	40020010 	.word	0x40020010
 80057f8:	40020028 	.word	0x40020028
 80057fc:	40020040 	.word	0x40020040
 8005800:	40020058 	.word	0x40020058
 8005804:	40020070 	.word	0x40020070
 8005808:	40020088 	.word	0x40020088
 800580c:	400200a0 	.word	0x400200a0
 8005810:	400200b8 	.word	0x400200b8
 8005814:	40020410 	.word	0x40020410
 8005818:	40020428 	.word	0x40020428
 800581c:	40020440 	.word	0x40020440
 8005820:	40020458 	.word	0x40020458
 8005824:	40020470 	.word	0x40020470
 8005828:	40020488 	.word	0x40020488
 800582c:	400204a0 	.word	0x400204a0
 8005830:	400204b8 	.word	0x400204b8
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	2300      	movs	r3, #0
 800583c:	2b00      	cmp	r3, #0
 800583e:	d00d      	beq.n	800585c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005844:	f003 031f 	and.w	r3, r3, #31
 8005848:	2204      	movs	r2, #4
 800584a:	409a      	lsls	r2, r3
 800584c:	6a3b      	ldr	r3, [r7, #32]
 800584e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005854:	f043 0204 	orr.w	r2, r3, #4
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005860:	f003 031f 	and.w	r3, r3, #31
 8005864:	2210      	movs	r2, #16
 8005866:	409a      	lsls	r2, r3
 8005868:	69bb      	ldr	r3, [r7, #24]
 800586a:	4013      	ands	r3, r2
 800586c:	2b00      	cmp	r3, #0
 800586e:	f000 80a6 	beq.w	80059be <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a85      	ldr	r2, [pc, #532]	; (8005a8c <HAL_DMA_IRQHandler+0x690>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d04a      	beq.n	8005912 <HAL_DMA_IRQHandler+0x516>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a83      	ldr	r2, [pc, #524]	; (8005a90 <HAL_DMA_IRQHandler+0x694>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d045      	beq.n	8005912 <HAL_DMA_IRQHandler+0x516>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a82      	ldr	r2, [pc, #520]	; (8005a94 <HAL_DMA_IRQHandler+0x698>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d040      	beq.n	8005912 <HAL_DMA_IRQHandler+0x516>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a80      	ldr	r2, [pc, #512]	; (8005a98 <HAL_DMA_IRQHandler+0x69c>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d03b      	beq.n	8005912 <HAL_DMA_IRQHandler+0x516>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a7f      	ldr	r2, [pc, #508]	; (8005a9c <HAL_DMA_IRQHandler+0x6a0>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d036      	beq.n	8005912 <HAL_DMA_IRQHandler+0x516>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a7d      	ldr	r2, [pc, #500]	; (8005aa0 <HAL_DMA_IRQHandler+0x6a4>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d031      	beq.n	8005912 <HAL_DMA_IRQHandler+0x516>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a7c      	ldr	r2, [pc, #496]	; (8005aa4 <HAL_DMA_IRQHandler+0x6a8>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d02c      	beq.n	8005912 <HAL_DMA_IRQHandler+0x516>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a7a      	ldr	r2, [pc, #488]	; (8005aa8 <HAL_DMA_IRQHandler+0x6ac>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d027      	beq.n	8005912 <HAL_DMA_IRQHandler+0x516>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a79      	ldr	r2, [pc, #484]	; (8005aac <HAL_DMA_IRQHandler+0x6b0>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d022      	beq.n	8005912 <HAL_DMA_IRQHandler+0x516>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a77      	ldr	r2, [pc, #476]	; (8005ab0 <HAL_DMA_IRQHandler+0x6b4>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d01d      	beq.n	8005912 <HAL_DMA_IRQHandler+0x516>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a76      	ldr	r2, [pc, #472]	; (8005ab4 <HAL_DMA_IRQHandler+0x6b8>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d018      	beq.n	8005912 <HAL_DMA_IRQHandler+0x516>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a74      	ldr	r2, [pc, #464]	; (8005ab8 <HAL_DMA_IRQHandler+0x6bc>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d013      	beq.n	8005912 <HAL_DMA_IRQHandler+0x516>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a73      	ldr	r2, [pc, #460]	; (8005abc <HAL_DMA_IRQHandler+0x6c0>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d00e      	beq.n	8005912 <HAL_DMA_IRQHandler+0x516>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a71      	ldr	r2, [pc, #452]	; (8005ac0 <HAL_DMA_IRQHandler+0x6c4>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d009      	beq.n	8005912 <HAL_DMA_IRQHandler+0x516>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a70      	ldr	r2, [pc, #448]	; (8005ac4 <HAL_DMA_IRQHandler+0x6c8>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d004      	beq.n	8005912 <HAL_DMA_IRQHandler+0x516>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a6e      	ldr	r2, [pc, #440]	; (8005ac8 <HAL_DMA_IRQHandler+0x6cc>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d10a      	bne.n	8005928 <HAL_DMA_IRQHandler+0x52c>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f003 0308 	and.w	r3, r3, #8
 800591c:	2b00      	cmp	r3, #0
 800591e:	bf14      	ite	ne
 8005920:	2301      	movne	r3, #1
 8005922:	2300      	moveq	r3, #0
 8005924:	b2db      	uxtb	r3, r3
 8005926:	e009      	b.n	800593c <HAL_DMA_IRQHandler+0x540>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f003 0304 	and.w	r3, r3, #4
 8005932:	2b00      	cmp	r3, #0
 8005934:	bf14      	ite	ne
 8005936:	2301      	movne	r3, #1
 8005938:	2300      	moveq	r3, #0
 800593a:	b2db      	uxtb	r3, r3
 800593c:	2b00      	cmp	r3, #0
 800593e:	d03e      	beq.n	80059be <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005944:	f003 031f 	and.w	r3, r3, #31
 8005948:	2210      	movs	r2, #16
 800594a:	409a      	lsls	r2, r3
 800594c:	6a3b      	ldr	r3, [r7, #32]
 800594e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800595a:	2b00      	cmp	r3, #0
 800595c:	d018      	beq.n	8005990 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005968:	2b00      	cmp	r3, #0
 800596a:	d108      	bne.n	800597e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005970:	2b00      	cmp	r3, #0
 8005972:	d024      	beq.n	80059be <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	4798      	blx	r3
 800597c:	e01f      	b.n	80059be <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005982:	2b00      	cmp	r3, #0
 8005984:	d01b      	beq.n	80059be <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	4798      	blx	r3
 800598e:	e016      	b.n	80059be <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800599a:	2b00      	cmp	r3, #0
 800599c:	d107      	bne.n	80059ae <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f022 0208 	bic.w	r2, r2, #8
 80059ac:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d003      	beq.n	80059be <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059c2:	f003 031f 	and.w	r3, r3, #31
 80059c6:	2220      	movs	r2, #32
 80059c8:	409a      	lsls	r2, r3
 80059ca:	69bb      	ldr	r3, [r7, #24]
 80059cc:	4013      	ands	r3, r2
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	f000 8110 	beq.w	8005bf4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a2c      	ldr	r2, [pc, #176]	; (8005a8c <HAL_DMA_IRQHandler+0x690>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d04a      	beq.n	8005a74 <HAL_DMA_IRQHandler+0x678>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a2b      	ldr	r2, [pc, #172]	; (8005a90 <HAL_DMA_IRQHandler+0x694>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d045      	beq.n	8005a74 <HAL_DMA_IRQHandler+0x678>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a29      	ldr	r2, [pc, #164]	; (8005a94 <HAL_DMA_IRQHandler+0x698>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d040      	beq.n	8005a74 <HAL_DMA_IRQHandler+0x678>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a28      	ldr	r2, [pc, #160]	; (8005a98 <HAL_DMA_IRQHandler+0x69c>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d03b      	beq.n	8005a74 <HAL_DMA_IRQHandler+0x678>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a26      	ldr	r2, [pc, #152]	; (8005a9c <HAL_DMA_IRQHandler+0x6a0>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d036      	beq.n	8005a74 <HAL_DMA_IRQHandler+0x678>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a25      	ldr	r2, [pc, #148]	; (8005aa0 <HAL_DMA_IRQHandler+0x6a4>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d031      	beq.n	8005a74 <HAL_DMA_IRQHandler+0x678>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a23      	ldr	r2, [pc, #140]	; (8005aa4 <HAL_DMA_IRQHandler+0x6a8>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d02c      	beq.n	8005a74 <HAL_DMA_IRQHandler+0x678>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a22      	ldr	r2, [pc, #136]	; (8005aa8 <HAL_DMA_IRQHandler+0x6ac>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d027      	beq.n	8005a74 <HAL_DMA_IRQHandler+0x678>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a20      	ldr	r2, [pc, #128]	; (8005aac <HAL_DMA_IRQHandler+0x6b0>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d022      	beq.n	8005a74 <HAL_DMA_IRQHandler+0x678>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a1f      	ldr	r2, [pc, #124]	; (8005ab0 <HAL_DMA_IRQHandler+0x6b4>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d01d      	beq.n	8005a74 <HAL_DMA_IRQHandler+0x678>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a1d      	ldr	r2, [pc, #116]	; (8005ab4 <HAL_DMA_IRQHandler+0x6b8>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d018      	beq.n	8005a74 <HAL_DMA_IRQHandler+0x678>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a1c      	ldr	r2, [pc, #112]	; (8005ab8 <HAL_DMA_IRQHandler+0x6bc>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d013      	beq.n	8005a74 <HAL_DMA_IRQHandler+0x678>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a1a      	ldr	r2, [pc, #104]	; (8005abc <HAL_DMA_IRQHandler+0x6c0>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d00e      	beq.n	8005a74 <HAL_DMA_IRQHandler+0x678>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a19      	ldr	r2, [pc, #100]	; (8005ac0 <HAL_DMA_IRQHandler+0x6c4>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d009      	beq.n	8005a74 <HAL_DMA_IRQHandler+0x678>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a17      	ldr	r2, [pc, #92]	; (8005ac4 <HAL_DMA_IRQHandler+0x6c8>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d004      	beq.n	8005a74 <HAL_DMA_IRQHandler+0x678>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a16      	ldr	r2, [pc, #88]	; (8005ac8 <HAL_DMA_IRQHandler+0x6cc>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d12b      	bne.n	8005acc <HAL_DMA_IRQHandler+0x6d0>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f003 0310 	and.w	r3, r3, #16
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	bf14      	ite	ne
 8005a82:	2301      	movne	r3, #1
 8005a84:	2300      	moveq	r3, #0
 8005a86:	b2db      	uxtb	r3, r3
 8005a88:	e02a      	b.n	8005ae0 <HAL_DMA_IRQHandler+0x6e4>
 8005a8a:	bf00      	nop
 8005a8c:	40020010 	.word	0x40020010
 8005a90:	40020028 	.word	0x40020028
 8005a94:	40020040 	.word	0x40020040
 8005a98:	40020058 	.word	0x40020058
 8005a9c:	40020070 	.word	0x40020070
 8005aa0:	40020088 	.word	0x40020088
 8005aa4:	400200a0 	.word	0x400200a0
 8005aa8:	400200b8 	.word	0x400200b8
 8005aac:	40020410 	.word	0x40020410
 8005ab0:	40020428 	.word	0x40020428
 8005ab4:	40020440 	.word	0x40020440
 8005ab8:	40020458 	.word	0x40020458
 8005abc:	40020470 	.word	0x40020470
 8005ac0:	40020488 	.word	0x40020488
 8005ac4:	400204a0 	.word	0x400204a0
 8005ac8:	400204b8 	.word	0x400204b8
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f003 0302 	and.w	r3, r3, #2
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	bf14      	ite	ne
 8005ada:	2301      	movne	r3, #1
 8005adc:	2300      	moveq	r3, #0
 8005ade:	b2db      	uxtb	r3, r3
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	f000 8087 	beq.w	8005bf4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005aea:	f003 031f 	and.w	r3, r3, #31
 8005aee:	2220      	movs	r2, #32
 8005af0:	409a      	lsls	r2, r3
 8005af2:	6a3b      	ldr	r3, [r7, #32]
 8005af4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	2b04      	cmp	r3, #4
 8005b00:	d139      	bne.n	8005b76 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f022 0216 	bic.w	r2, r2, #22
 8005b10:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	695a      	ldr	r2, [r3, #20]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b20:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d103      	bne.n	8005b32 <HAL_DMA_IRQHandler+0x736>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d007      	beq.n	8005b42 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	681a      	ldr	r2, [r3, #0]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f022 0208 	bic.w	r2, r2, #8
 8005b40:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b46:	f003 031f 	and.w	r3, r3, #31
 8005b4a:	223f      	movs	r2, #63	; 0x3f
 8005b4c:	409a      	lsls	r2, r3
 8005b4e:	6a3b      	ldr	r3, [r7, #32]
 8005b50:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2200      	movs	r2, #0
 8005b56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	f000 834a 	beq.w	8006200 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	4798      	blx	r3
          }
          return;
 8005b74:	e344      	b.n	8006200 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d018      	beq.n	8005bb6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d108      	bne.n	8005ba4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d02c      	beq.n	8005bf4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	4798      	blx	r3
 8005ba2:	e027      	b.n	8005bf4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d023      	beq.n	8005bf4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	4798      	blx	r3
 8005bb4:	e01e      	b.n	8005bf4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d10f      	bne.n	8005be4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	681a      	ldr	r2, [r3, #0]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f022 0210 	bic.w	r2, r2, #16
 8005bd2:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2201      	movs	r2, #1
 8005be0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d003      	beq.n	8005bf4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	f000 8306 	beq.w	800620a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c02:	f003 0301 	and.w	r3, r3, #1
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	f000 8088 	beq.w	8005d1c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2204      	movs	r2, #4
 8005c10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a7a      	ldr	r2, [pc, #488]	; (8005e04 <HAL_DMA_IRQHandler+0xa08>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d04a      	beq.n	8005cb4 <HAL_DMA_IRQHandler+0x8b8>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a79      	ldr	r2, [pc, #484]	; (8005e08 <HAL_DMA_IRQHandler+0xa0c>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d045      	beq.n	8005cb4 <HAL_DMA_IRQHandler+0x8b8>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a77      	ldr	r2, [pc, #476]	; (8005e0c <HAL_DMA_IRQHandler+0xa10>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d040      	beq.n	8005cb4 <HAL_DMA_IRQHandler+0x8b8>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a76      	ldr	r2, [pc, #472]	; (8005e10 <HAL_DMA_IRQHandler+0xa14>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d03b      	beq.n	8005cb4 <HAL_DMA_IRQHandler+0x8b8>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a74      	ldr	r2, [pc, #464]	; (8005e14 <HAL_DMA_IRQHandler+0xa18>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d036      	beq.n	8005cb4 <HAL_DMA_IRQHandler+0x8b8>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a73      	ldr	r2, [pc, #460]	; (8005e18 <HAL_DMA_IRQHandler+0xa1c>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d031      	beq.n	8005cb4 <HAL_DMA_IRQHandler+0x8b8>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a71      	ldr	r2, [pc, #452]	; (8005e1c <HAL_DMA_IRQHandler+0xa20>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d02c      	beq.n	8005cb4 <HAL_DMA_IRQHandler+0x8b8>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a70      	ldr	r2, [pc, #448]	; (8005e20 <HAL_DMA_IRQHandler+0xa24>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d027      	beq.n	8005cb4 <HAL_DMA_IRQHandler+0x8b8>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a6e      	ldr	r2, [pc, #440]	; (8005e24 <HAL_DMA_IRQHandler+0xa28>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d022      	beq.n	8005cb4 <HAL_DMA_IRQHandler+0x8b8>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a6d      	ldr	r2, [pc, #436]	; (8005e28 <HAL_DMA_IRQHandler+0xa2c>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d01d      	beq.n	8005cb4 <HAL_DMA_IRQHandler+0x8b8>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a6b      	ldr	r2, [pc, #428]	; (8005e2c <HAL_DMA_IRQHandler+0xa30>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d018      	beq.n	8005cb4 <HAL_DMA_IRQHandler+0x8b8>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a6a      	ldr	r2, [pc, #424]	; (8005e30 <HAL_DMA_IRQHandler+0xa34>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d013      	beq.n	8005cb4 <HAL_DMA_IRQHandler+0x8b8>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a68      	ldr	r2, [pc, #416]	; (8005e34 <HAL_DMA_IRQHandler+0xa38>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d00e      	beq.n	8005cb4 <HAL_DMA_IRQHandler+0x8b8>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a67      	ldr	r2, [pc, #412]	; (8005e38 <HAL_DMA_IRQHandler+0xa3c>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d009      	beq.n	8005cb4 <HAL_DMA_IRQHandler+0x8b8>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a65      	ldr	r2, [pc, #404]	; (8005e3c <HAL_DMA_IRQHandler+0xa40>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d004      	beq.n	8005cb4 <HAL_DMA_IRQHandler+0x8b8>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a64      	ldr	r2, [pc, #400]	; (8005e40 <HAL_DMA_IRQHandler+0xa44>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d108      	bne.n	8005cc6 <HAL_DMA_IRQHandler+0x8ca>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	681a      	ldr	r2, [r3, #0]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f022 0201 	bic.w	r2, r2, #1
 8005cc2:	601a      	str	r2, [r3, #0]
 8005cc4:	e007      	b.n	8005cd6 <HAL_DMA_IRQHandler+0x8da>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f022 0201 	bic.w	r2, r2, #1
 8005cd4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	3301      	adds	r3, #1
 8005cda:	60fb      	str	r3, [r7, #12]
 8005cdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cde:	429a      	cmp	r2, r3
 8005ce0:	d307      	bcc.n	8005cf2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f003 0301 	and.w	r3, r3, #1
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d1f2      	bne.n	8005cd6 <HAL_DMA_IRQHandler+0x8da>
 8005cf0:	e000      	b.n	8005cf4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005cf2:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f003 0301 	and.w	r3, r3, #1
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d004      	beq.n	8005d14 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2203      	movs	r2, #3
 8005d0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005d12:	e003      	b.n	8005d1c <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2201      	movs	r2, #1
 8005d18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	f000 8272 	beq.w	800620a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	4798      	blx	r3
 8005d2e:	e26c      	b.n	800620a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a43      	ldr	r2, [pc, #268]	; (8005e44 <HAL_DMA_IRQHandler+0xa48>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d022      	beq.n	8005d80 <HAL_DMA_IRQHandler+0x984>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a42      	ldr	r2, [pc, #264]	; (8005e48 <HAL_DMA_IRQHandler+0xa4c>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d01d      	beq.n	8005d80 <HAL_DMA_IRQHandler+0x984>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a40      	ldr	r2, [pc, #256]	; (8005e4c <HAL_DMA_IRQHandler+0xa50>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d018      	beq.n	8005d80 <HAL_DMA_IRQHandler+0x984>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a3f      	ldr	r2, [pc, #252]	; (8005e50 <HAL_DMA_IRQHandler+0xa54>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d013      	beq.n	8005d80 <HAL_DMA_IRQHandler+0x984>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a3d      	ldr	r2, [pc, #244]	; (8005e54 <HAL_DMA_IRQHandler+0xa58>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d00e      	beq.n	8005d80 <HAL_DMA_IRQHandler+0x984>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a3c      	ldr	r2, [pc, #240]	; (8005e58 <HAL_DMA_IRQHandler+0xa5c>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d009      	beq.n	8005d80 <HAL_DMA_IRQHandler+0x984>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a3a      	ldr	r2, [pc, #232]	; (8005e5c <HAL_DMA_IRQHandler+0xa60>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d004      	beq.n	8005d80 <HAL_DMA_IRQHandler+0x984>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a39      	ldr	r2, [pc, #228]	; (8005e60 <HAL_DMA_IRQHandler+0xa64>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d101      	bne.n	8005d84 <HAL_DMA_IRQHandler+0x988>
 8005d80:	2301      	movs	r3, #1
 8005d82:	e000      	b.n	8005d86 <HAL_DMA_IRQHandler+0x98a>
 8005d84:	2300      	movs	r3, #0
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	f000 823f 	beq.w	800620a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d98:	f003 031f 	and.w	r3, r3, #31
 8005d9c:	2204      	movs	r2, #4
 8005d9e:	409a      	lsls	r2, r3
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	4013      	ands	r3, r2
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	f000 80cd 	beq.w	8005f44 <HAL_DMA_IRQHandler+0xb48>
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	f003 0304 	and.w	r3, r3, #4
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	f000 80c7 	beq.w	8005f44 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dba:	f003 031f 	and.w	r3, r3, #31
 8005dbe:	2204      	movs	r2, #4
 8005dc0:	409a      	lsls	r2, r3
 8005dc2:	69fb      	ldr	r3, [r7, #28]
 8005dc4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d049      	beq.n	8005e64 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d109      	bne.n	8005dee <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	f000 8210 	beq.w	8006204 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005dec:	e20a      	b.n	8006204 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	f000 8206 	beq.w	8006204 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005e00:	e200      	b.n	8006204 <HAL_DMA_IRQHandler+0xe08>
 8005e02:	bf00      	nop
 8005e04:	40020010 	.word	0x40020010
 8005e08:	40020028 	.word	0x40020028
 8005e0c:	40020040 	.word	0x40020040
 8005e10:	40020058 	.word	0x40020058
 8005e14:	40020070 	.word	0x40020070
 8005e18:	40020088 	.word	0x40020088
 8005e1c:	400200a0 	.word	0x400200a0
 8005e20:	400200b8 	.word	0x400200b8
 8005e24:	40020410 	.word	0x40020410
 8005e28:	40020428 	.word	0x40020428
 8005e2c:	40020440 	.word	0x40020440
 8005e30:	40020458 	.word	0x40020458
 8005e34:	40020470 	.word	0x40020470
 8005e38:	40020488 	.word	0x40020488
 8005e3c:	400204a0 	.word	0x400204a0
 8005e40:	400204b8 	.word	0x400204b8
 8005e44:	58025408 	.word	0x58025408
 8005e48:	5802541c 	.word	0x5802541c
 8005e4c:	58025430 	.word	0x58025430
 8005e50:	58025444 	.word	0x58025444
 8005e54:	58025458 	.word	0x58025458
 8005e58:	5802546c 	.word	0x5802546c
 8005e5c:	58025480 	.word	0x58025480
 8005e60:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	f003 0320 	and.w	r3, r3, #32
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d160      	bne.n	8005f30 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a8c      	ldr	r2, [pc, #560]	; (80060a4 <HAL_DMA_IRQHandler+0xca8>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d04a      	beq.n	8005f0e <HAL_DMA_IRQHandler+0xb12>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a8a      	ldr	r2, [pc, #552]	; (80060a8 <HAL_DMA_IRQHandler+0xcac>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d045      	beq.n	8005f0e <HAL_DMA_IRQHandler+0xb12>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a89      	ldr	r2, [pc, #548]	; (80060ac <HAL_DMA_IRQHandler+0xcb0>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d040      	beq.n	8005f0e <HAL_DMA_IRQHandler+0xb12>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a87      	ldr	r2, [pc, #540]	; (80060b0 <HAL_DMA_IRQHandler+0xcb4>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d03b      	beq.n	8005f0e <HAL_DMA_IRQHandler+0xb12>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a86      	ldr	r2, [pc, #536]	; (80060b4 <HAL_DMA_IRQHandler+0xcb8>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d036      	beq.n	8005f0e <HAL_DMA_IRQHandler+0xb12>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a84      	ldr	r2, [pc, #528]	; (80060b8 <HAL_DMA_IRQHandler+0xcbc>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d031      	beq.n	8005f0e <HAL_DMA_IRQHandler+0xb12>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a83      	ldr	r2, [pc, #524]	; (80060bc <HAL_DMA_IRQHandler+0xcc0>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d02c      	beq.n	8005f0e <HAL_DMA_IRQHandler+0xb12>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a81      	ldr	r2, [pc, #516]	; (80060c0 <HAL_DMA_IRQHandler+0xcc4>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d027      	beq.n	8005f0e <HAL_DMA_IRQHandler+0xb12>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a80      	ldr	r2, [pc, #512]	; (80060c4 <HAL_DMA_IRQHandler+0xcc8>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d022      	beq.n	8005f0e <HAL_DMA_IRQHandler+0xb12>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a7e      	ldr	r2, [pc, #504]	; (80060c8 <HAL_DMA_IRQHandler+0xccc>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d01d      	beq.n	8005f0e <HAL_DMA_IRQHandler+0xb12>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a7d      	ldr	r2, [pc, #500]	; (80060cc <HAL_DMA_IRQHandler+0xcd0>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d018      	beq.n	8005f0e <HAL_DMA_IRQHandler+0xb12>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a7b      	ldr	r2, [pc, #492]	; (80060d0 <HAL_DMA_IRQHandler+0xcd4>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d013      	beq.n	8005f0e <HAL_DMA_IRQHandler+0xb12>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a7a      	ldr	r2, [pc, #488]	; (80060d4 <HAL_DMA_IRQHandler+0xcd8>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d00e      	beq.n	8005f0e <HAL_DMA_IRQHandler+0xb12>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a78      	ldr	r2, [pc, #480]	; (80060d8 <HAL_DMA_IRQHandler+0xcdc>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d009      	beq.n	8005f0e <HAL_DMA_IRQHandler+0xb12>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a77      	ldr	r2, [pc, #476]	; (80060dc <HAL_DMA_IRQHandler+0xce0>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d004      	beq.n	8005f0e <HAL_DMA_IRQHandler+0xb12>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a75      	ldr	r2, [pc, #468]	; (80060e0 <HAL_DMA_IRQHandler+0xce4>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d108      	bne.n	8005f20 <HAL_DMA_IRQHandler+0xb24>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	681a      	ldr	r2, [r3, #0]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f022 0208 	bic.w	r2, r2, #8
 8005f1c:	601a      	str	r2, [r3, #0]
 8005f1e:	e007      	b.n	8005f30 <HAL_DMA_IRQHandler+0xb34>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	681a      	ldr	r2, [r3, #0]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f022 0204 	bic.w	r2, r2, #4
 8005f2e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	f000 8165 	beq.w	8006204 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f42:	e15f      	b.n	8006204 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f48:	f003 031f 	and.w	r3, r3, #31
 8005f4c:	2202      	movs	r2, #2
 8005f4e:	409a      	lsls	r2, r3
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	4013      	ands	r3, r2
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	f000 80c5 	beq.w	80060e4 <HAL_DMA_IRQHandler+0xce8>
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	f003 0302 	and.w	r3, r3, #2
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	f000 80bf 	beq.w	80060e4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f6a:	f003 031f 	and.w	r3, r3, #31
 8005f6e:	2202      	movs	r2, #2
 8005f70:	409a      	lsls	r2, r3
 8005f72:	69fb      	ldr	r3, [r7, #28]
 8005f74:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d018      	beq.n	8005fb2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d109      	bne.n	8005f9e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	f000 813a 	beq.w	8006208 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f9c:	e134      	b.n	8006208 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	f000 8130 	beq.w	8006208 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005fb0:	e12a      	b.n	8006208 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	f003 0320 	and.w	r3, r3, #32
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d168      	bne.n	800608e <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a38      	ldr	r2, [pc, #224]	; (80060a4 <HAL_DMA_IRQHandler+0xca8>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d04a      	beq.n	800605c <HAL_DMA_IRQHandler+0xc60>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a37      	ldr	r2, [pc, #220]	; (80060a8 <HAL_DMA_IRQHandler+0xcac>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d045      	beq.n	800605c <HAL_DMA_IRQHandler+0xc60>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a35      	ldr	r2, [pc, #212]	; (80060ac <HAL_DMA_IRQHandler+0xcb0>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d040      	beq.n	800605c <HAL_DMA_IRQHandler+0xc60>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a34      	ldr	r2, [pc, #208]	; (80060b0 <HAL_DMA_IRQHandler+0xcb4>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d03b      	beq.n	800605c <HAL_DMA_IRQHandler+0xc60>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a32      	ldr	r2, [pc, #200]	; (80060b4 <HAL_DMA_IRQHandler+0xcb8>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d036      	beq.n	800605c <HAL_DMA_IRQHandler+0xc60>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a31      	ldr	r2, [pc, #196]	; (80060b8 <HAL_DMA_IRQHandler+0xcbc>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d031      	beq.n	800605c <HAL_DMA_IRQHandler+0xc60>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a2f      	ldr	r2, [pc, #188]	; (80060bc <HAL_DMA_IRQHandler+0xcc0>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d02c      	beq.n	800605c <HAL_DMA_IRQHandler+0xc60>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a2e      	ldr	r2, [pc, #184]	; (80060c0 <HAL_DMA_IRQHandler+0xcc4>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d027      	beq.n	800605c <HAL_DMA_IRQHandler+0xc60>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a2c      	ldr	r2, [pc, #176]	; (80060c4 <HAL_DMA_IRQHandler+0xcc8>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d022      	beq.n	800605c <HAL_DMA_IRQHandler+0xc60>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a2b      	ldr	r2, [pc, #172]	; (80060c8 <HAL_DMA_IRQHandler+0xccc>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d01d      	beq.n	800605c <HAL_DMA_IRQHandler+0xc60>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a29      	ldr	r2, [pc, #164]	; (80060cc <HAL_DMA_IRQHandler+0xcd0>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d018      	beq.n	800605c <HAL_DMA_IRQHandler+0xc60>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a28      	ldr	r2, [pc, #160]	; (80060d0 <HAL_DMA_IRQHandler+0xcd4>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d013      	beq.n	800605c <HAL_DMA_IRQHandler+0xc60>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a26      	ldr	r2, [pc, #152]	; (80060d4 <HAL_DMA_IRQHandler+0xcd8>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d00e      	beq.n	800605c <HAL_DMA_IRQHandler+0xc60>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a25      	ldr	r2, [pc, #148]	; (80060d8 <HAL_DMA_IRQHandler+0xcdc>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d009      	beq.n	800605c <HAL_DMA_IRQHandler+0xc60>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a23      	ldr	r2, [pc, #140]	; (80060dc <HAL_DMA_IRQHandler+0xce0>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d004      	beq.n	800605c <HAL_DMA_IRQHandler+0xc60>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a22      	ldr	r2, [pc, #136]	; (80060e0 <HAL_DMA_IRQHandler+0xce4>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d108      	bne.n	800606e <HAL_DMA_IRQHandler+0xc72>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	681a      	ldr	r2, [r3, #0]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f022 0214 	bic.w	r2, r2, #20
 800606a:	601a      	str	r2, [r3, #0]
 800606c:	e007      	b.n	800607e <HAL_DMA_IRQHandler+0xc82>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	681a      	ldr	r2, [r3, #0]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f022 020a 	bic.w	r2, r2, #10
 800607c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2200      	movs	r2, #0
 8006082:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2201      	movs	r2, #1
 800608a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006092:	2b00      	cmp	r3, #0
 8006094:	f000 80b8 	beq.w	8006208 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80060a0:	e0b2      	b.n	8006208 <HAL_DMA_IRQHandler+0xe0c>
 80060a2:	bf00      	nop
 80060a4:	40020010 	.word	0x40020010
 80060a8:	40020028 	.word	0x40020028
 80060ac:	40020040 	.word	0x40020040
 80060b0:	40020058 	.word	0x40020058
 80060b4:	40020070 	.word	0x40020070
 80060b8:	40020088 	.word	0x40020088
 80060bc:	400200a0 	.word	0x400200a0
 80060c0:	400200b8 	.word	0x400200b8
 80060c4:	40020410 	.word	0x40020410
 80060c8:	40020428 	.word	0x40020428
 80060cc:	40020440 	.word	0x40020440
 80060d0:	40020458 	.word	0x40020458
 80060d4:	40020470 	.word	0x40020470
 80060d8:	40020488 	.word	0x40020488
 80060dc:	400204a0 	.word	0x400204a0
 80060e0:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060e8:	f003 031f 	and.w	r3, r3, #31
 80060ec:	2208      	movs	r2, #8
 80060ee:	409a      	lsls	r2, r3
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	4013      	ands	r3, r2
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	f000 8088 	beq.w	800620a <HAL_DMA_IRQHandler+0xe0e>
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	f003 0308 	and.w	r3, r3, #8
 8006100:	2b00      	cmp	r3, #0
 8006102:	f000 8082 	beq.w	800620a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a41      	ldr	r2, [pc, #260]	; (8006210 <HAL_DMA_IRQHandler+0xe14>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d04a      	beq.n	80061a6 <HAL_DMA_IRQHandler+0xdaa>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a3f      	ldr	r2, [pc, #252]	; (8006214 <HAL_DMA_IRQHandler+0xe18>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d045      	beq.n	80061a6 <HAL_DMA_IRQHandler+0xdaa>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a3e      	ldr	r2, [pc, #248]	; (8006218 <HAL_DMA_IRQHandler+0xe1c>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d040      	beq.n	80061a6 <HAL_DMA_IRQHandler+0xdaa>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a3c      	ldr	r2, [pc, #240]	; (800621c <HAL_DMA_IRQHandler+0xe20>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d03b      	beq.n	80061a6 <HAL_DMA_IRQHandler+0xdaa>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a3b      	ldr	r2, [pc, #236]	; (8006220 <HAL_DMA_IRQHandler+0xe24>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d036      	beq.n	80061a6 <HAL_DMA_IRQHandler+0xdaa>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a39      	ldr	r2, [pc, #228]	; (8006224 <HAL_DMA_IRQHandler+0xe28>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d031      	beq.n	80061a6 <HAL_DMA_IRQHandler+0xdaa>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a38      	ldr	r2, [pc, #224]	; (8006228 <HAL_DMA_IRQHandler+0xe2c>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d02c      	beq.n	80061a6 <HAL_DMA_IRQHandler+0xdaa>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a36      	ldr	r2, [pc, #216]	; (800622c <HAL_DMA_IRQHandler+0xe30>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d027      	beq.n	80061a6 <HAL_DMA_IRQHandler+0xdaa>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a35      	ldr	r2, [pc, #212]	; (8006230 <HAL_DMA_IRQHandler+0xe34>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d022      	beq.n	80061a6 <HAL_DMA_IRQHandler+0xdaa>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a33      	ldr	r2, [pc, #204]	; (8006234 <HAL_DMA_IRQHandler+0xe38>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d01d      	beq.n	80061a6 <HAL_DMA_IRQHandler+0xdaa>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a32      	ldr	r2, [pc, #200]	; (8006238 <HAL_DMA_IRQHandler+0xe3c>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d018      	beq.n	80061a6 <HAL_DMA_IRQHandler+0xdaa>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a30      	ldr	r2, [pc, #192]	; (800623c <HAL_DMA_IRQHandler+0xe40>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d013      	beq.n	80061a6 <HAL_DMA_IRQHandler+0xdaa>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a2f      	ldr	r2, [pc, #188]	; (8006240 <HAL_DMA_IRQHandler+0xe44>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d00e      	beq.n	80061a6 <HAL_DMA_IRQHandler+0xdaa>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a2d      	ldr	r2, [pc, #180]	; (8006244 <HAL_DMA_IRQHandler+0xe48>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d009      	beq.n	80061a6 <HAL_DMA_IRQHandler+0xdaa>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a2c      	ldr	r2, [pc, #176]	; (8006248 <HAL_DMA_IRQHandler+0xe4c>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d004      	beq.n	80061a6 <HAL_DMA_IRQHandler+0xdaa>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a2a      	ldr	r2, [pc, #168]	; (800624c <HAL_DMA_IRQHandler+0xe50>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d108      	bne.n	80061b8 <HAL_DMA_IRQHandler+0xdbc>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f022 021c 	bic.w	r2, r2, #28
 80061b4:	601a      	str	r2, [r3, #0]
 80061b6:	e007      	b.n	80061c8 <HAL_DMA_IRQHandler+0xdcc>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	681a      	ldr	r2, [r3, #0]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f022 020e 	bic.w	r2, r2, #14
 80061c6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061cc:	f003 031f 	and.w	r3, r3, #31
 80061d0:	2201      	movs	r2, #1
 80061d2:	409a      	lsls	r2, r3
 80061d4:	69fb      	ldr	r3, [r7, #28]
 80061d6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2201      	movs	r2, #1
 80061dc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2200      	movs	r2, #0
 80061e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2201      	movs	r2, #1
 80061ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d009      	beq.n	800620a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	4798      	blx	r3
 80061fe:	e004      	b.n	800620a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006200:	bf00      	nop
 8006202:	e002      	b.n	800620a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006204:	bf00      	nop
 8006206:	e000      	b.n	800620a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006208:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800620a:	3728      	adds	r7, #40	; 0x28
 800620c:	46bd      	mov	sp, r7
 800620e:	bd80      	pop	{r7, pc}
 8006210:	40020010 	.word	0x40020010
 8006214:	40020028 	.word	0x40020028
 8006218:	40020040 	.word	0x40020040
 800621c:	40020058 	.word	0x40020058
 8006220:	40020070 	.word	0x40020070
 8006224:	40020088 	.word	0x40020088
 8006228:	400200a0 	.word	0x400200a0
 800622c:	400200b8 	.word	0x400200b8
 8006230:	40020410 	.word	0x40020410
 8006234:	40020428 	.word	0x40020428
 8006238:	40020440 	.word	0x40020440
 800623c:	40020458 	.word	0x40020458
 8006240:	40020470 	.word	0x40020470
 8006244:	40020488 	.word	0x40020488
 8006248:	400204a0 	.word	0x400204a0
 800624c:	400204b8 	.word	0x400204b8

08006250 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006250:	b480      	push	{r7}
 8006252:	b085      	sub	sp, #20
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a42      	ldr	r2, [pc, #264]	; (8006368 <DMA_CalcBaseAndBitshift+0x118>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d04a      	beq.n	80062f8 <DMA_CalcBaseAndBitshift+0xa8>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a41      	ldr	r2, [pc, #260]	; (800636c <DMA_CalcBaseAndBitshift+0x11c>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d045      	beq.n	80062f8 <DMA_CalcBaseAndBitshift+0xa8>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a3f      	ldr	r2, [pc, #252]	; (8006370 <DMA_CalcBaseAndBitshift+0x120>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d040      	beq.n	80062f8 <DMA_CalcBaseAndBitshift+0xa8>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a3e      	ldr	r2, [pc, #248]	; (8006374 <DMA_CalcBaseAndBitshift+0x124>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d03b      	beq.n	80062f8 <DMA_CalcBaseAndBitshift+0xa8>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a3c      	ldr	r2, [pc, #240]	; (8006378 <DMA_CalcBaseAndBitshift+0x128>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d036      	beq.n	80062f8 <DMA_CalcBaseAndBitshift+0xa8>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a3b      	ldr	r2, [pc, #236]	; (800637c <DMA_CalcBaseAndBitshift+0x12c>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d031      	beq.n	80062f8 <DMA_CalcBaseAndBitshift+0xa8>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a39      	ldr	r2, [pc, #228]	; (8006380 <DMA_CalcBaseAndBitshift+0x130>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d02c      	beq.n	80062f8 <DMA_CalcBaseAndBitshift+0xa8>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a38      	ldr	r2, [pc, #224]	; (8006384 <DMA_CalcBaseAndBitshift+0x134>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d027      	beq.n	80062f8 <DMA_CalcBaseAndBitshift+0xa8>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a36      	ldr	r2, [pc, #216]	; (8006388 <DMA_CalcBaseAndBitshift+0x138>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d022      	beq.n	80062f8 <DMA_CalcBaseAndBitshift+0xa8>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a35      	ldr	r2, [pc, #212]	; (800638c <DMA_CalcBaseAndBitshift+0x13c>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d01d      	beq.n	80062f8 <DMA_CalcBaseAndBitshift+0xa8>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a33      	ldr	r2, [pc, #204]	; (8006390 <DMA_CalcBaseAndBitshift+0x140>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d018      	beq.n	80062f8 <DMA_CalcBaseAndBitshift+0xa8>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a32      	ldr	r2, [pc, #200]	; (8006394 <DMA_CalcBaseAndBitshift+0x144>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d013      	beq.n	80062f8 <DMA_CalcBaseAndBitshift+0xa8>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a30      	ldr	r2, [pc, #192]	; (8006398 <DMA_CalcBaseAndBitshift+0x148>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d00e      	beq.n	80062f8 <DMA_CalcBaseAndBitshift+0xa8>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a2f      	ldr	r2, [pc, #188]	; (800639c <DMA_CalcBaseAndBitshift+0x14c>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d009      	beq.n	80062f8 <DMA_CalcBaseAndBitshift+0xa8>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a2d      	ldr	r2, [pc, #180]	; (80063a0 <DMA_CalcBaseAndBitshift+0x150>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d004      	beq.n	80062f8 <DMA_CalcBaseAndBitshift+0xa8>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a2c      	ldr	r2, [pc, #176]	; (80063a4 <DMA_CalcBaseAndBitshift+0x154>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d101      	bne.n	80062fc <DMA_CalcBaseAndBitshift+0xac>
 80062f8:	2301      	movs	r3, #1
 80062fa:	e000      	b.n	80062fe <DMA_CalcBaseAndBitshift+0xae>
 80062fc:	2300      	movs	r3, #0
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d024      	beq.n	800634c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	b2db      	uxtb	r3, r3
 8006308:	3b10      	subs	r3, #16
 800630a:	4a27      	ldr	r2, [pc, #156]	; (80063a8 <DMA_CalcBaseAndBitshift+0x158>)
 800630c:	fba2 2303 	umull	r2, r3, r2, r3
 8006310:	091b      	lsrs	r3, r3, #4
 8006312:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	f003 0307 	and.w	r3, r3, #7
 800631a:	4a24      	ldr	r2, [pc, #144]	; (80063ac <DMA_CalcBaseAndBitshift+0x15c>)
 800631c:	5cd3      	ldrb	r3, [r2, r3]
 800631e:	461a      	mov	r2, r3
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2b03      	cmp	r3, #3
 8006328:	d908      	bls.n	800633c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	461a      	mov	r2, r3
 8006330:	4b1f      	ldr	r3, [pc, #124]	; (80063b0 <DMA_CalcBaseAndBitshift+0x160>)
 8006332:	4013      	ands	r3, r2
 8006334:	1d1a      	adds	r2, r3, #4
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	659a      	str	r2, [r3, #88]	; 0x58
 800633a:	e00d      	b.n	8006358 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	461a      	mov	r2, r3
 8006342:	4b1b      	ldr	r3, [pc, #108]	; (80063b0 <DMA_CalcBaseAndBitshift+0x160>)
 8006344:	4013      	ands	r3, r2
 8006346:	687a      	ldr	r2, [r7, #4]
 8006348:	6593      	str	r3, [r2, #88]	; 0x58
 800634a:	e005      	b.n	8006358 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800635c:	4618      	mov	r0, r3
 800635e:	3714      	adds	r7, #20
 8006360:	46bd      	mov	sp, r7
 8006362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006366:	4770      	bx	lr
 8006368:	40020010 	.word	0x40020010
 800636c:	40020028 	.word	0x40020028
 8006370:	40020040 	.word	0x40020040
 8006374:	40020058 	.word	0x40020058
 8006378:	40020070 	.word	0x40020070
 800637c:	40020088 	.word	0x40020088
 8006380:	400200a0 	.word	0x400200a0
 8006384:	400200b8 	.word	0x400200b8
 8006388:	40020410 	.word	0x40020410
 800638c:	40020428 	.word	0x40020428
 8006390:	40020440 	.word	0x40020440
 8006394:	40020458 	.word	0x40020458
 8006398:	40020470 	.word	0x40020470
 800639c:	40020488 	.word	0x40020488
 80063a0:	400204a0 	.word	0x400204a0
 80063a4:	400204b8 	.word	0x400204b8
 80063a8:	aaaaaaab 	.word	0xaaaaaaab
 80063ac:	08011620 	.word	0x08011620
 80063b0:	fffffc00 	.word	0xfffffc00

080063b4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b085      	sub	sp, #20
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80063bc:	2300      	movs	r3, #0
 80063be:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	699b      	ldr	r3, [r3, #24]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d120      	bne.n	800640a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063cc:	2b03      	cmp	r3, #3
 80063ce:	d858      	bhi.n	8006482 <DMA_CheckFifoParam+0xce>
 80063d0:	a201      	add	r2, pc, #4	; (adr r2, 80063d8 <DMA_CheckFifoParam+0x24>)
 80063d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063d6:	bf00      	nop
 80063d8:	080063e9 	.word	0x080063e9
 80063dc:	080063fb 	.word	0x080063fb
 80063e0:	080063e9 	.word	0x080063e9
 80063e4:	08006483 	.word	0x08006483
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d048      	beq.n	8006486 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80063f4:	2301      	movs	r3, #1
 80063f6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80063f8:	e045      	b.n	8006486 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063fe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006402:	d142      	bne.n	800648a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006404:	2301      	movs	r3, #1
 8006406:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006408:	e03f      	b.n	800648a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	699b      	ldr	r3, [r3, #24]
 800640e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006412:	d123      	bne.n	800645c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006418:	2b03      	cmp	r3, #3
 800641a:	d838      	bhi.n	800648e <DMA_CheckFifoParam+0xda>
 800641c:	a201      	add	r2, pc, #4	; (adr r2, 8006424 <DMA_CheckFifoParam+0x70>)
 800641e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006422:	bf00      	nop
 8006424:	08006435 	.word	0x08006435
 8006428:	0800643b 	.word	0x0800643b
 800642c:	08006435 	.word	0x08006435
 8006430:	0800644d 	.word	0x0800644d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006434:	2301      	movs	r3, #1
 8006436:	73fb      	strb	r3, [r7, #15]
        break;
 8006438:	e030      	b.n	800649c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800643e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006442:	2b00      	cmp	r3, #0
 8006444:	d025      	beq.n	8006492 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800644a:	e022      	b.n	8006492 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006450:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006454:	d11f      	bne.n	8006496 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006456:	2301      	movs	r3, #1
 8006458:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800645a:	e01c      	b.n	8006496 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006460:	2b02      	cmp	r3, #2
 8006462:	d902      	bls.n	800646a <DMA_CheckFifoParam+0xb6>
 8006464:	2b03      	cmp	r3, #3
 8006466:	d003      	beq.n	8006470 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006468:	e018      	b.n	800649c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800646a:	2301      	movs	r3, #1
 800646c:	73fb      	strb	r3, [r7, #15]
        break;
 800646e:	e015      	b.n	800649c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006474:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006478:	2b00      	cmp	r3, #0
 800647a:	d00e      	beq.n	800649a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800647c:	2301      	movs	r3, #1
 800647e:	73fb      	strb	r3, [r7, #15]
    break;
 8006480:	e00b      	b.n	800649a <DMA_CheckFifoParam+0xe6>
        break;
 8006482:	bf00      	nop
 8006484:	e00a      	b.n	800649c <DMA_CheckFifoParam+0xe8>
        break;
 8006486:	bf00      	nop
 8006488:	e008      	b.n	800649c <DMA_CheckFifoParam+0xe8>
        break;
 800648a:	bf00      	nop
 800648c:	e006      	b.n	800649c <DMA_CheckFifoParam+0xe8>
        break;
 800648e:	bf00      	nop
 8006490:	e004      	b.n	800649c <DMA_CheckFifoParam+0xe8>
        break;
 8006492:	bf00      	nop
 8006494:	e002      	b.n	800649c <DMA_CheckFifoParam+0xe8>
        break;
 8006496:	bf00      	nop
 8006498:	e000      	b.n	800649c <DMA_CheckFifoParam+0xe8>
    break;
 800649a:	bf00      	nop
    }
  }

  return status;
 800649c:	7bfb      	ldrb	r3, [r7, #15]
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3714      	adds	r7, #20
 80064a2:	46bd      	mov	sp, r7
 80064a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a8:	4770      	bx	lr
 80064aa:	bf00      	nop

080064ac <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b085      	sub	sp, #20
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a38      	ldr	r2, [pc, #224]	; (80065a0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d022      	beq.n	800650a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a36      	ldr	r2, [pc, #216]	; (80065a4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d01d      	beq.n	800650a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a35      	ldr	r2, [pc, #212]	; (80065a8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d018      	beq.n	800650a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a33      	ldr	r2, [pc, #204]	; (80065ac <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d013      	beq.n	800650a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a32      	ldr	r2, [pc, #200]	; (80065b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d00e      	beq.n	800650a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a30      	ldr	r2, [pc, #192]	; (80065b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d009      	beq.n	800650a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a2f      	ldr	r2, [pc, #188]	; (80065b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d004      	beq.n	800650a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a2d      	ldr	r2, [pc, #180]	; (80065bc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d101      	bne.n	800650e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800650a:	2301      	movs	r3, #1
 800650c:	e000      	b.n	8006510 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800650e:	2300      	movs	r3, #0
 8006510:	2b00      	cmp	r3, #0
 8006512:	d01a      	beq.n	800654a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	b2db      	uxtb	r3, r3
 800651a:	3b08      	subs	r3, #8
 800651c:	4a28      	ldr	r2, [pc, #160]	; (80065c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800651e:	fba2 2303 	umull	r2, r3, r2, r3
 8006522:	091b      	lsrs	r3, r3, #4
 8006524:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006526:	68fa      	ldr	r2, [r7, #12]
 8006528:	4b26      	ldr	r3, [pc, #152]	; (80065c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800652a:	4413      	add	r3, r2
 800652c:	009b      	lsls	r3, r3, #2
 800652e:	461a      	mov	r2, r3
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	4a24      	ldr	r2, [pc, #144]	; (80065c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006538:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	f003 031f 	and.w	r3, r3, #31
 8006540:	2201      	movs	r2, #1
 8006542:	409a      	lsls	r2, r3
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006548:	e024      	b.n	8006594 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	b2db      	uxtb	r3, r3
 8006550:	3b10      	subs	r3, #16
 8006552:	4a1e      	ldr	r2, [pc, #120]	; (80065cc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006554:	fba2 2303 	umull	r2, r3, r2, r3
 8006558:	091b      	lsrs	r3, r3, #4
 800655a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	4a1c      	ldr	r2, [pc, #112]	; (80065d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d806      	bhi.n	8006572 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	4a1b      	ldr	r2, [pc, #108]	; (80065d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d902      	bls.n	8006572 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	3308      	adds	r3, #8
 8006570:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006572:	68fa      	ldr	r2, [r7, #12]
 8006574:	4b18      	ldr	r3, [pc, #96]	; (80065d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006576:	4413      	add	r3, r2
 8006578:	009b      	lsls	r3, r3, #2
 800657a:	461a      	mov	r2, r3
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	4a16      	ldr	r2, [pc, #88]	; (80065dc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006584:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	f003 031f 	and.w	r3, r3, #31
 800658c:	2201      	movs	r2, #1
 800658e:	409a      	lsls	r2, r3
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006594:	bf00      	nop
 8006596:	3714      	adds	r7, #20
 8006598:	46bd      	mov	sp, r7
 800659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659e:	4770      	bx	lr
 80065a0:	58025408 	.word	0x58025408
 80065a4:	5802541c 	.word	0x5802541c
 80065a8:	58025430 	.word	0x58025430
 80065ac:	58025444 	.word	0x58025444
 80065b0:	58025458 	.word	0x58025458
 80065b4:	5802546c 	.word	0x5802546c
 80065b8:	58025480 	.word	0x58025480
 80065bc:	58025494 	.word	0x58025494
 80065c0:	cccccccd 	.word	0xcccccccd
 80065c4:	16009600 	.word	0x16009600
 80065c8:	58025880 	.word	0x58025880
 80065cc:	aaaaaaab 	.word	0xaaaaaaab
 80065d0:	400204b8 	.word	0x400204b8
 80065d4:	4002040f 	.word	0x4002040f
 80065d8:	10008200 	.word	0x10008200
 80065dc:	40020880 	.word	0x40020880

080065e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b085      	sub	sp, #20
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	b2db      	uxtb	r3, r3
 80065ee:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d04a      	beq.n	800668c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2b08      	cmp	r3, #8
 80065fa:	d847      	bhi.n	800668c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a25      	ldr	r2, [pc, #148]	; (8006698 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d022      	beq.n	800664c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a24      	ldr	r2, [pc, #144]	; (800669c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d01d      	beq.n	800664c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a22      	ldr	r2, [pc, #136]	; (80066a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d018      	beq.n	800664c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a21      	ldr	r2, [pc, #132]	; (80066a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d013      	beq.n	800664c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a1f      	ldr	r2, [pc, #124]	; (80066a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d00e      	beq.n	800664c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a1e      	ldr	r2, [pc, #120]	; (80066ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d009      	beq.n	800664c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a1c      	ldr	r2, [pc, #112]	; (80066b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d004      	beq.n	800664c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a1b      	ldr	r2, [pc, #108]	; (80066b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d101      	bne.n	8006650 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800664c:	2301      	movs	r3, #1
 800664e:	e000      	b.n	8006652 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006650:	2300      	movs	r3, #0
 8006652:	2b00      	cmp	r3, #0
 8006654:	d00a      	beq.n	800666c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006656:	68fa      	ldr	r2, [r7, #12]
 8006658:	4b17      	ldr	r3, [pc, #92]	; (80066b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800665a:	4413      	add	r3, r2
 800665c:	009b      	lsls	r3, r3, #2
 800665e:	461a      	mov	r2, r3
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	4a15      	ldr	r2, [pc, #84]	; (80066bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006668:	671a      	str	r2, [r3, #112]	; 0x70
 800666a:	e009      	b.n	8006680 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800666c:	68fa      	ldr	r2, [r7, #12]
 800666e:	4b14      	ldr	r3, [pc, #80]	; (80066c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006670:	4413      	add	r3, r2
 8006672:	009b      	lsls	r3, r3, #2
 8006674:	461a      	mov	r2, r3
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	4a11      	ldr	r2, [pc, #68]	; (80066c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800667e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	3b01      	subs	r3, #1
 8006684:	2201      	movs	r2, #1
 8006686:	409a      	lsls	r2, r3
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800668c:	bf00      	nop
 800668e:	3714      	adds	r7, #20
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr
 8006698:	58025408 	.word	0x58025408
 800669c:	5802541c 	.word	0x5802541c
 80066a0:	58025430 	.word	0x58025430
 80066a4:	58025444 	.word	0x58025444
 80066a8:	58025458 	.word	0x58025458
 80066ac:	5802546c 	.word	0x5802546c
 80066b0:	58025480 	.word	0x58025480
 80066b4:	58025494 	.word	0x58025494
 80066b8:	1600963f 	.word	0x1600963f
 80066bc:	58025940 	.word	0x58025940
 80066c0:	1000823f 	.word	0x1000823f
 80066c4:	40020940 	.word	0x40020940

080066c8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b098      	sub	sp, #96	; 0x60
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80066d0:	4a84      	ldr	r2, [pc, #528]	; (80068e4 <HAL_FDCAN_Init+0x21c>)
 80066d2:	f107 030c 	add.w	r3, r7, #12
 80066d6:	4611      	mov	r1, r2
 80066d8:	224c      	movs	r2, #76	; 0x4c
 80066da:	4618      	mov	r0, r3
 80066dc:	f008 f89a 	bl	800e814 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d101      	bne.n	80066ea <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80066e6:	2301      	movs	r3, #1
 80066e8:	e1ca      	b.n	8006a80 <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4a7e      	ldr	r2, [pc, #504]	; (80068e8 <HAL_FDCAN_Init+0x220>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d106      	bne.n	8006702 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80066fc:	461a      	mov	r2, r3
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006708:	b2db      	uxtb	r3, r3
 800670a:	2b00      	cmp	r3, #0
 800670c:	d106      	bne.n	800671c <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2200      	movs	r2, #0
 8006712:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f7fb fc12 	bl	8001f40 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	699a      	ldr	r2, [r3, #24]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f022 0210 	bic.w	r2, r2, #16
 800672a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800672c:	f7fc ffe2 	bl	80036f4 <HAL_GetTick>
 8006730:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006732:	e014      	b.n	800675e <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006734:	f7fc ffde 	bl	80036f4 <HAL_GetTick>
 8006738:	4602      	mov	r2, r0
 800673a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800673c:	1ad3      	subs	r3, r2, r3
 800673e:	2b0a      	cmp	r3, #10
 8006740:	d90d      	bls.n	800675e <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006748:	f043 0201 	orr.w	r2, r3, #1
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2203      	movs	r2, #3
 8006756:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800675a:	2301      	movs	r3, #1
 800675c:	e190      	b.n	8006a80 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	699b      	ldr	r3, [r3, #24]
 8006764:	f003 0308 	and.w	r3, r3, #8
 8006768:	2b08      	cmp	r3, #8
 800676a:	d0e3      	beq.n	8006734 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	699a      	ldr	r2, [r3, #24]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f042 0201 	orr.w	r2, r2, #1
 800677a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800677c:	f7fc ffba 	bl	80036f4 <HAL_GetTick>
 8006780:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006782:	e014      	b.n	80067ae <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006784:	f7fc ffb6 	bl	80036f4 <HAL_GetTick>
 8006788:	4602      	mov	r2, r0
 800678a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800678c:	1ad3      	subs	r3, r2, r3
 800678e:	2b0a      	cmp	r3, #10
 8006790:	d90d      	bls.n	80067ae <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006798:	f043 0201 	orr.w	r2, r3, #1
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2203      	movs	r2, #3
 80067a6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80067aa:	2301      	movs	r3, #1
 80067ac:	e168      	b.n	8006a80 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	699b      	ldr	r3, [r3, #24]
 80067b4:	f003 0301 	and.w	r3, r3, #1
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d0e3      	beq.n	8006784 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	699a      	ldr	r2, [r3, #24]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f042 0202 	orr.w	r2, r2, #2
 80067ca:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	7c1b      	ldrb	r3, [r3, #16]
 80067d0:	2b01      	cmp	r3, #1
 80067d2:	d108      	bne.n	80067e6 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	699a      	ldr	r2, [r3, #24]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067e2:	619a      	str	r2, [r3, #24]
 80067e4:	e007      	b.n	80067f6 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	699a      	ldr	r2, [r3, #24]
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80067f4:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	7c5b      	ldrb	r3, [r3, #17]
 80067fa:	2b01      	cmp	r3, #1
 80067fc:	d108      	bne.n	8006810 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	699a      	ldr	r2, [r3, #24]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800680c:	619a      	str	r2, [r3, #24]
 800680e:	e007      	b.n	8006820 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	699a      	ldr	r2, [r3, #24]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800681e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	7c9b      	ldrb	r3, [r3, #18]
 8006824:	2b01      	cmp	r3, #1
 8006826:	d108      	bne.n	800683a <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	699a      	ldr	r2, [r3, #24]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006836:	619a      	str	r2, [r3, #24]
 8006838:	e007      	b.n	800684a <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	699a      	ldr	r2, [r3, #24]
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006848:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	699b      	ldr	r3, [r3, #24]
 8006850:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	689a      	ldr	r2, [r3, #8]
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	430a      	orrs	r2, r1
 800685e:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	699a      	ldr	r2, [r3, #24]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800686e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	691a      	ldr	r2, [r3, #16]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f022 0210 	bic.w	r2, r2, #16
 800687e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	68db      	ldr	r3, [r3, #12]
 8006884:	2b01      	cmp	r3, #1
 8006886:	d108      	bne.n	800689a <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	699a      	ldr	r2, [r3, #24]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f042 0204 	orr.w	r2, r2, #4
 8006896:	619a      	str	r2, [r3, #24]
 8006898:	e030      	b.n	80068fc <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	68db      	ldr	r3, [r3, #12]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d02c      	beq.n	80068fc <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	68db      	ldr	r3, [r3, #12]
 80068a6:	2b02      	cmp	r3, #2
 80068a8:	d020      	beq.n	80068ec <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	699a      	ldr	r2, [r3, #24]
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80068b8:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	691a      	ldr	r2, [r3, #16]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f042 0210 	orr.w	r2, r2, #16
 80068c8:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	68db      	ldr	r3, [r3, #12]
 80068ce:	2b03      	cmp	r3, #3
 80068d0:	d114      	bne.n	80068fc <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	699a      	ldr	r2, [r3, #24]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f042 0220 	orr.w	r2, r2, #32
 80068e0:	619a      	str	r2, [r3, #24]
 80068e2:	e00b      	b.n	80068fc <HAL_FDCAN_Init+0x234>
 80068e4:	080115c4 	.word	0x080115c4
 80068e8:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	699a      	ldr	r2, [r3, #24]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f042 0220 	orr.w	r2, r2, #32
 80068fa:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	699b      	ldr	r3, [r3, #24]
 8006900:	3b01      	subs	r3, #1
 8006902:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	69db      	ldr	r3, [r3, #28]
 8006908:	3b01      	subs	r3, #1
 800690a:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800690c:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6a1b      	ldr	r3, [r3, #32]
 8006912:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006914:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	695b      	ldr	r3, [r3, #20]
 800691c:	3b01      	subs	r3, #1
 800691e:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006924:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006926:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	689b      	ldr	r3, [r3, #8]
 800692c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006930:	d115      	bne.n	800695e <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006936:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800693c:	3b01      	subs	r3, #1
 800693e:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006940:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006946:	3b01      	subs	r3, #1
 8006948:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800694a:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006952:	3b01      	subs	r3, #1
 8006954:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800695a:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800695c:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006962:	2b00      	cmp	r3, #0
 8006964:	d00a      	beq.n	800697c <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	430a      	orrs	r2, r1
 8006978:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006984:	4413      	add	r3, r2
 8006986:	2b00      	cmp	r3, #0
 8006988:	d012      	beq.n	80069b0 <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8006992:	f023 0107 	bic.w	r1, r3, #7
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800699a:	009b      	lsls	r3, r3, #2
 800699c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80069a0:	4413      	add	r3, r2
 80069a2:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	430a      	orrs	r2, r1
 80069ac:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d012      	beq.n	80069de <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80069c0:	f023 0107 	bic.w	r1, r3, #7
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069c8:	009b      	lsls	r3, r3, #2
 80069ca:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80069ce:	4413      	add	r3, r2
 80069d0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	430a      	orrs	r2, r1
 80069da:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d013      	beq.n	8006a0e <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80069ee:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069f6:	009b      	lsls	r3, r3, #2
 80069f8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80069fc:	4413      	add	r3, r2
 80069fe:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8006a02:	011a      	lsls	r2, r3, #4
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	430a      	orrs	r2, r1
 8006a0a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d013      	beq.n	8006a3e <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006a1e:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a26:	009b      	lsls	r3, r3, #2
 8006a28:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006a2c:	4413      	add	r3, r2
 8006a2e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8006a32:	021a      	lsls	r2, r3, #8
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	430a      	orrs	r2, r1
 8006a3a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a11      	ldr	r2, [pc, #68]	; (8006a88 <HAL_FDCAN_Init+0x3c0>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d107      	bne.n	8006a58 <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	689a      	ldr	r2, [r3, #8]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	f022 0203 	bic.w	r2, r2, #3
 8006a56:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2200      	movs	r2, #0
 8006a64:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f000 f80b 	bl	8006a8c <FDCAN_CalcultateRamBlockAddresses>
 8006a76:	4603      	mov	r3, r0
 8006a78:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8006a7c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	3760      	adds	r7, #96	; 0x60
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}
 8006a88:	4000a000 	.word	0x4000a000

08006a8c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b085      	sub	sp, #20
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a98:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8006aa2:	4ba7      	ldr	r3, [pc, #668]	; (8006d40 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006aa4:	4013      	ands	r3, r2
 8006aa6:	68ba      	ldr	r2, [r7, #8]
 8006aa8:	0091      	lsls	r1, r2, #2
 8006aaa:	687a      	ldr	r2, [r7, #4]
 8006aac:	6812      	ldr	r2, [r2, #0]
 8006aae:	430b      	orrs	r3, r1
 8006ab0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006abc:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ac4:	041a      	lsls	r2, r3, #16
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	430a      	orrs	r2, r1
 8006acc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ad4:	68ba      	ldr	r2, [r7, #8]
 8006ad6:	4413      	add	r3, r2
 8006ad8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006ae2:	4b97      	ldr	r3, [pc, #604]	; (8006d40 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006ae4:	4013      	ands	r3, r2
 8006ae6:	68ba      	ldr	r2, [r7, #8]
 8006ae8:	0091      	lsls	r1, r2, #2
 8006aea:	687a      	ldr	r2, [r7, #4]
 8006aec:	6812      	ldr	r2, [r2, #0]
 8006aee:	430b      	orrs	r3, r1
 8006af0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006afc:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b04:	041a      	lsls	r2, r3, #16
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	430a      	orrs	r2, r1
 8006b0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b14:	005b      	lsls	r3, r3, #1
 8006b16:	68ba      	ldr	r2, [r7, #8]
 8006b18:	4413      	add	r3, r2
 8006b1a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8006b24:	4b86      	ldr	r3, [pc, #536]	; (8006d40 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006b26:	4013      	ands	r3, r2
 8006b28:	68ba      	ldr	r2, [r7, #8]
 8006b2a:	0091      	lsls	r1, r2, #2
 8006b2c:	687a      	ldr	r2, [r7, #4]
 8006b2e:	6812      	ldr	r2, [r2, #0]
 8006b30:	430b      	orrs	r3, r1
 8006b32:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006b3e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b46:	041a      	lsls	r2, r3, #16
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	430a      	orrs	r2, r1
 8006b4e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b56:	687a      	ldr	r2, [r7, #4]
 8006b58:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006b5a:	fb02 f303 	mul.w	r3, r2, r3
 8006b5e:	68ba      	ldr	r2, [r7, #8]
 8006b60:	4413      	add	r3, r2
 8006b62:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8006b6c:	4b74      	ldr	r3, [pc, #464]	; (8006d40 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006b6e:	4013      	ands	r3, r2
 8006b70:	68ba      	ldr	r2, [r7, #8]
 8006b72:	0091      	lsls	r1, r2, #2
 8006b74:	687a      	ldr	r2, [r7, #4]
 8006b76:	6812      	ldr	r2, [r2, #0]
 8006b78:	430b      	orrs	r3, r1
 8006b7a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006b86:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b8e:	041a      	lsls	r2, r3, #16
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	430a      	orrs	r2, r1
 8006b96:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b9e:	687a      	ldr	r2, [r7, #4]
 8006ba0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006ba2:	fb02 f303 	mul.w	r3, r2, r3
 8006ba6:	68ba      	ldr	r2, [r7, #8]
 8006ba8:	4413      	add	r3, r2
 8006baa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8006bb4:	4b62      	ldr	r3, [pc, #392]	; (8006d40 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006bb6:	4013      	ands	r3, r2
 8006bb8:	68ba      	ldr	r2, [r7, #8]
 8006bba:	0091      	lsls	r1, r2, #2
 8006bbc:	687a      	ldr	r2, [r7, #4]
 8006bbe:	6812      	ldr	r2, [r2, #0]
 8006bc0:	430b      	orrs	r3, r1
 8006bc2:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bca:	687a      	ldr	r2, [r7, #4]
 8006bcc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006bce:	fb02 f303 	mul.w	r3, r2, r3
 8006bd2:	68ba      	ldr	r2, [r7, #8]
 8006bd4:	4413      	add	r3, r2
 8006bd6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8006be0:	4b57      	ldr	r3, [pc, #348]	; (8006d40 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006be2:	4013      	ands	r3, r2
 8006be4:	68ba      	ldr	r2, [r7, #8]
 8006be6:	0091      	lsls	r1, r2, #2
 8006be8:	687a      	ldr	r2, [r7, #4]
 8006bea:	6812      	ldr	r2, [r2, #0]
 8006bec:	430b      	orrs	r3, r1
 8006bee:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006bfa:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c02:	041a      	lsls	r2, r3, #16
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	430a      	orrs	r2, r1
 8006c0a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c12:	005b      	lsls	r3, r3, #1
 8006c14:	68ba      	ldr	r2, [r7, #8]
 8006c16:	4413      	add	r3, r2
 8006c18:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8006c22:	4b47      	ldr	r3, [pc, #284]	; (8006d40 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006c24:	4013      	ands	r3, r2
 8006c26:	68ba      	ldr	r2, [r7, #8]
 8006c28:	0091      	lsls	r1, r2, #2
 8006c2a:	687a      	ldr	r2, [r7, #4]
 8006c2c:	6812      	ldr	r2, [r2, #0]
 8006c2e:	430b      	orrs	r3, r1
 8006c30:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006c3c:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c44:	041a      	lsls	r2, r3, #16
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	430a      	orrs	r2, r1
 8006c4c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006c58:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c60:	061a      	lsls	r2, r3, #24
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	430a      	orrs	r2, r1
 8006c68:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c70:	4b34      	ldr	r3, [pc, #208]	; (8006d44 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8006c72:	4413      	add	r3, r2
 8006c74:	009a      	lsls	r2, r3, #2
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c82:	009b      	lsls	r3, r3, #2
 8006c84:	441a      	add	r2, r3
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c92:	00db      	lsls	r3, r3, #3
 8006c94:	441a      	add	r2, r3
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ca2:	6879      	ldr	r1, [r7, #4]
 8006ca4:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8006ca6:	fb01 f303 	mul.w	r3, r1, r3
 8006caa:	009b      	lsls	r3, r3, #2
 8006cac:	441a      	add	r2, r3
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cba:	6879      	ldr	r1, [r7, #4]
 8006cbc:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8006cbe:	fb01 f303 	mul.w	r3, r1, r3
 8006cc2:	009b      	lsls	r3, r3, #2
 8006cc4:	441a      	add	r2, r3
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cd2:	6879      	ldr	r1, [r7, #4]
 8006cd4:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8006cd6:	fb01 f303 	mul.w	r3, r1, r3
 8006cda:	009b      	lsls	r3, r3, #2
 8006cdc:	441a      	add	r2, r3
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cee:	00db      	lsls	r3, r3, #3
 8006cf0:	441a      	add	r2, r3
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d02:	6879      	ldr	r1, [r7, #4]
 8006d04:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8006d06:	fb01 f303 	mul.w	r3, r1, r3
 8006d0a:	009b      	lsls	r3, r3, #2
 8006d0c:	441a      	add	r2, r3
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d1e:	6879      	ldr	r1, [r7, #4]
 8006d20:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8006d22:	fb01 f303 	mul.w	r3, r1, r3
 8006d26:	009b      	lsls	r3, r3, #2
 8006d28:	441a      	add	r2, r3
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d36:	4a04      	ldr	r2, [pc, #16]	; (8006d48 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d915      	bls.n	8006d68 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8006d3c:	e006      	b.n	8006d4c <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8006d3e:	bf00      	nop
 8006d40:	ffff0003 	.word	0xffff0003
 8006d44:	10002b00 	.word	0x10002b00
 8006d48:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006d52:	f043 0220 	orr.w	r2, r3, #32
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2203      	movs	r2, #3
 8006d60:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8006d64:	2301      	movs	r3, #1
 8006d66:	e010      	b.n	8006d8a <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d6c:	60fb      	str	r3, [r7, #12]
 8006d6e:	e005      	b.n	8006d7c <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	2200      	movs	r2, #0
 8006d74:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	3304      	adds	r3, #4
 8006d7a:	60fb      	str	r3, [r7, #12]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d82:	68fa      	ldr	r2, [r7, #12]
 8006d84:	429a      	cmp	r2, r3
 8006d86:	d3f3      	bcc.n	8006d70 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8006d88:	2300      	movs	r3, #0
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	3714      	adds	r7, #20
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d94:	4770      	bx	lr
 8006d96:	bf00      	nop

08006d98 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b089      	sub	sp, #36	; 0x24
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
 8006da0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006da2:	2300      	movs	r3, #0
 8006da4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006da6:	4b89      	ldr	r3, [pc, #548]	; (8006fcc <HAL_GPIO_Init+0x234>)
 8006da8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006daa:	e194      	b.n	80070d6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	681a      	ldr	r2, [r3, #0]
 8006db0:	2101      	movs	r1, #1
 8006db2:	69fb      	ldr	r3, [r7, #28]
 8006db4:	fa01 f303 	lsl.w	r3, r1, r3
 8006db8:	4013      	ands	r3, r2
 8006dba:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	f000 8186 	beq.w	80070d0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	2b01      	cmp	r3, #1
 8006dca:	d00b      	beq.n	8006de4 <HAL_GPIO_Init+0x4c>
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	2b02      	cmp	r3, #2
 8006dd2:	d007      	beq.n	8006de4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006dd8:	2b11      	cmp	r3, #17
 8006dda:	d003      	beq.n	8006de4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	2b12      	cmp	r3, #18
 8006de2:	d130      	bne.n	8006e46 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	689b      	ldr	r3, [r3, #8]
 8006de8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006dea:	69fb      	ldr	r3, [r7, #28]
 8006dec:	005b      	lsls	r3, r3, #1
 8006dee:	2203      	movs	r2, #3
 8006df0:	fa02 f303 	lsl.w	r3, r2, r3
 8006df4:	43db      	mvns	r3, r3
 8006df6:	69ba      	ldr	r2, [r7, #24]
 8006df8:	4013      	ands	r3, r2
 8006dfa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	68da      	ldr	r2, [r3, #12]
 8006e00:	69fb      	ldr	r3, [r7, #28]
 8006e02:	005b      	lsls	r3, r3, #1
 8006e04:	fa02 f303 	lsl.w	r3, r2, r3
 8006e08:	69ba      	ldr	r2, [r7, #24]
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	69ba      	ldr	r2, [r7, #24]
 8006e12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	69fb      	ldr	r3, [r7, #28]
 8006e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8006e22:	43db      	mvns	r3, r3
 8006e24:	69ba      	ldr	r2, [r7, #24]
 8006e26:	4013      	ands	r3, r2
 8006e28:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	091b      	lsrs	r3, r3, #4
 8006e30:	f003 0201 	and.w	r2, r3, #1
 8006e34:	69fb      	ldr	r3, [r7, #28]
 8006e36:	fa02 f303 	lsl.w	r3, r2, r3
 8006e3a:	69ba      	ldr	r2, [r7, #24]
 8006e3c:	4313      	orrs	r3, r2
 8006e3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	69ba      	ldr	r2, [r7, #24]
 8006e44:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	68db      	ldr	r3, [r3, #12]
 8006e4a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006e4c:	69fb      	ldr	r3, [r7, #28]
 8006e4e:	005b      	lsls	r3, r3, #1
 8006e50:	2203      	movs	r2, #3
 8006e52:	fa02 f303 	lsl.w	r3, r2, r3
 8006e56:	43db      	mvns	r3, r3
 8006e58:	69ba      	ldr	r2, [r7, #24]
 8006e5a:	4013      	ands	r3, r2
 8006e5c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	689a      	ldr	r2, [r3, #8]
 8006e62:	69fb      	ldr	r3, [r7, #28]
 8006e64:	005b      	lsls	r3, r3, #1
 8006e66:	fa02 f303 	lsl.w	r3, r2, r3
 8006e6a:	69ba      	ldr	r2, [r7, #24]
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	69ba      	ldr	r2, [r7, #24]
 8006e74:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	2b02      	cmp	r3, #2
 8006e7c:	d003      	beq.n	8006e86 <HAL_GPIO_Init+0xee>
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	2b12      	cmp	r3, #18
 8006e84:	d123      	bne.n	8006ece <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006e86:	69fb      	ldr	r3, [r7, #28]
 8006e88:	08da      	lsrs	r2, r3, #3
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	3208      	adds	r2, #8
 8006e8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006e94:	69fb      	ldr	r3, [r7, #28]
 8006e96:	f003 0307 	and.w	r3, r3, #7
 8006e9a:	009b      	lsls	r3, r3, #2
 8006e9c:	220f      	movs	r2, #15
 8006e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8006ea2:	43db      	mvns	r3, r3
 8006ea4:	69ba      	ldr	r2, [r7, #24]
 8006ea6:	4013      	ands	r3, r2
 8006ea8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	691a      	ldr	r2, [r3, #16]
 8006eae:	69fb      	ldr	r3, [r7, #28]
 8006eb0:	f003 0307 	and.w	r3, r3, #7
 8006eb4:	009b      	lsls	r3, r3, #2
 8006eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8006eba:	69ba      	ldr	r2, [r7, #24]
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006ec0:	69fb      	ldr	r3, [r7, #28]
 8006ec2:	08da      	lsrs	r2, r3, #3
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	3208      	adds	r2, #8
 8006ec8:	69b9      	ldr	r1, [r7, #24]
 8006eca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006ed4:	69fb      	ldr	r3, [r7, #28]
 8006ed6:	005b      	lsls	r3, r3, #1
 8006ed8:	2203      	movs	r2, #3
 8006eda:	fa02 f303 	lsl.w	r3, r2, r3
 8006ede:	43db      	mvns	r3, r3
 8006ee0:	69ba      	ldr	r2, [r7, #24]
 8006ee2:	4013      	ands	r3, r2
 8006ee4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	f003 0203 	and.w	r2, r3, #3
 8006eee:	69fb      	ldr	r3, [r7, #28]
 8006ef0:	005b      	lsls	r3, r3, #1
 8006ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ef6:	69ba      	ldr	r2, [r7, #24]
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	69ba      	ldr	r2, [r7, #24]
 8006f00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	685b      	ldr	r3, [r3, #4]
 8006f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	f000 80e0 	beq.w	80070d0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006f10:	4b2f      	ldr	r3, [pc, #188]	; (8006fd0 <HAL_GPIO_Init+0x238>)
 8006f12:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006f16:	4a2e      	ldr	r2, [pc, #184]	; (8006fd0 <HAL_GPIO_Init+0x238>)
 8006f18:	f043 0302 	orr.w	r3, r3, #2
 8006f1c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006f20:	4b2b      	ldr	r3, [pc, #172]	; (8006fd0 <HAL_GPIO_Init+0x238>)
 8006f22:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006f26:	f003 0302 	and.w	r3, r3, #2
 8006f2a:	60fb      	str	r3, [r7, #12]
 8006f2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006f2e:	4a29      	ldr	r2, [pc, #164]	; (8006fd4 <HAL_GPIO_Init+0x23c>)
 8006f30:	69fb      	ldr	r3, [r7, #28]
 8006f32:	089b      	lsrs	r3, r3, #2
 8006f34:	3302      	adds	r3, #2
 8006f36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006f3c:	69fb      	ldr	r3, [r7, #28]
 8006f3e:	f003 0303 	and.w	r3, r3, #3
 8006f42:	009b      	lsls	r3, r3, #2
 8006f44:	220f      	movs	r2, #15
 8006f46:	fa02 f303 	lsl.w	r3, r2, r3
 8006f4a:	43db      	mvns	r3, r3
 8006f4c:	69ba      	ldr	r2, [r7, #24]
 8006f4e:	4013      	ands	r3, r2
 8006f50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	4a20      	ldr	r2, [pc, #128]	; (8006fd8 <HAL_GPIO_Init+0x240>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d052      	beq.n	8007000 <HAL_GPIO_Init+0x268>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	4a1f      	ldr	r2, [pc, #124]	; (8006fdc <HAL_GPIO_Init+0x244>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d031      	beq.n	8006fc6 <HAL_GPIO_Init+0x22e>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	4a1e      	ldr	r2, [pc, #120]	; (8006fe0 <HAL_GPIO_Init+0x248>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d02b      	beq.n	8006fc2 <HAL_GPIO_Init+0x22a>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	4a1d      	ldr	r2, [pc, #116]	; (8006fe4 <HAL_GPIO_Init+0x24c>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d025      	beq.n	8006fbe <HAL_GPIO_Init+0x226>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	4a1c      	ldr	r2, [pc, #112]	; (8006fe8 <HAL_GPIO_Init+0x250>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d01f      	beq.n	8006fba <HAL_GPIO_Init+0x222>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	4a1b      	ldr	r2, [pc, #108]	; (8006fec <HAL_GPIO_Init+0x254>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d019      	beq.n	8006fb6 <HAL_GPIO_Init+0x21e>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	4a1a      	ldr	r2, [pc, #104]	; (8006ff0 <HAL_GPIO_Init+0x258>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d013      	beq.n	8006fb2 <HAL_GPIO_Init+0x21a>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	4a19      	ldr	r2, [pc, #100]	; (8006ff4 <HAL_GPIO_Init+0x25c>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d00d      	beq.n	8006fae <HAL_GPIO_Init+0x216>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	4a18      	ldr	r2, [pc, #96]	; (8006ff8 <HAL_GPIO_Init+0x260>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d007      	beq.n	8006faa <HAL_GPIO_Init+0x212>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	4a17      	ldr	r2, [pc, #92]	; (8006ffc <HAL_GPIO_Init+0x264>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d101      	bne.n	8006fa6 <HAL_GPIO_Init+0x20e>
 8006fa2:	2309      	movs	r3, #9
 8006fa4:	e02d      	b.n	8007002 <HAL_GPIO_Init+0x26a>
 8006fa6:	230a      	movs	r3, #10
 8006fa8:	e02b      	b.n	8007002 <HAL_GPIO_Init+0x26a>
 8006faa:	2308      	movs	r3, #8
 8006fac:	e029      	b.n	8007002 <HAL_GPIO_Init+0x26a>
 8006fae:	2307      	movs	r3, #7
 8006fb0:	e027      	b.n	8007002 <HAL_GPIO_Init+0x26a>
 8006fb2:	2306      	movs	r3, #6
 8006fb4:	e025      	b.n	8007002 <HAL_GPIO_Init+0x26a>
 8006fb6:	2305      	movs	r3, #5
 8006fb8:	e023      	b.n	8007002 <HAL_GPIO_Init+0x26a>
 8006fba:	2304      	movs	r3, #4
 8006fbc:	e021      	b.n	8007002 <HAL_GPIO_Init+0x26a>
 8006fbe:	2303      	movs	r3, #3
 8006fc0:	e01f      	b.n	8007002 <HAL_GPIO_Init+0x26a>
 8006fc2:	2302      	movs	r3, #2
 8006fc4:	e01d      	b.n	8007002 <HAL_GPIO_Init+0x26a>
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	e01b      	b.n	8007002 <HAL_GPIO_Init+0x26a>
 8006fca:	bf00      	nop
 8006fcc:	58000080 	.word	0x58000080
 8006fd0:	58024400 	.word	0x58024400
 8006fd4:	58000400 	.word	0x58000400
 8006fd8:	58020000 	.word	0x58020000
 8006fdc:	58020400 	.word	0x58020400
 8006fe0:	58020800 	.word	0x58020800
 8006fe4:	58020c00 	.word	0x58020c00
 8006fe8:	58021000 	.word	0x58021000
 8006fec:	58021400 	.word	0x58021400
 8006ff0:	58021800 	.word	0x58021800
 8006ff4:	58021c00 	.word	0x58021c00
 8006ff8:	58022000 	.word	0x58022000
 8006ffc:	58022400 	.word	0x58022400
 8007000:	2300      	movs	r3, #0
 8007002:	69fa      	ldr	r2, [r7, #28]
 8007004:	f002 0203 	and.w	r2, r2, #3
 8007008:	0092      	lsls	r2, r2, #2
 800700a:	4093      	lsls	r3, r2
 800700c:	69ba      	ldr	r2, [r7, #24]
 800700e:	4313      	orrs	r3, r2
 8007010:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007012:	4938      	ldr	r1, [pc, #224]	; (80070f4 <HAL_GPIO_Init+0x35c>)
 8007014:	69fb      	ldr	r3, [r7, #28]
 8007016:	089b      	lsrs	r3, r3, #2
 8007018:	3302      	adds	r3, #2
 800701a:	69ba      	ldr	r2, [r7, #24]
 800701c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007026:	693b      	ldr	r3, [r7, #16]
 8007028:	43db      	mvns	r3, r3
 800702a:	69ba      	ldr	r2, [r7, #24]
 800702c:	4013      	ands	r3, r2
 800702e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007038:	2b00      	cmp	r3, #0
 800703a:	d003      	beq.n	8007044 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800703c:	69ba      	ldr	r2, [r7, #24]
 800703e:	693b      	ldr	r3, [r7, #16]
 8007040:	4313      	orrs	r3, r2
 8007042:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	69ba      	ldr	r2, [r7, #24]
 8007048:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	685b      	ldr	r3, [r3, #4]
 800704e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007050:	693b      	ldr	r3, [r7, #16]
 8007052:	43db      	mvns	r3, r3
 8007054:	69ba      	ldr	r2, [r7, #24]
 8007056:	4013      	ands	r3, r2
 8007058:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007062:	2b00      	cmp	r3, #0
 8007064:	d003      	beq.n	800706e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8007066:	69ba      	ldr	r2, [r7, #24]
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	4313      	orrs	r3, r2
 800706c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	69ba      	ldr	r2, [r7, #24]
 8007072:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007074:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800707c:	693b      	ldr	r3, [r7, #16]
 800707e:	43db      	mvns	r3, r3
 8007080:	69ba      	ldr	r2, [r7, #24]
 8007082:	4013      	ands	r3, r2
 8007084:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	685b      	ldr	r3, [r3, #4]
 800708a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800708e:	2b00      	cmp	r3, #0
 8007090:	d003      	beq.n	800709a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8007092:	69ba      	ldr	r2, [r7, #24]
 8007094:	693b      	ldr	r3, [r7, #16]
 8007096:	4313      	orrs	r3, r2
 8007098:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800709a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800709e:	69bb      	ldr	r3, [r7, #24]
 80070a0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80070a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070a6:	685b      	ldr	r3, [r3, #4]
 80070a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	43db      	mvns	r3, r3
 80070ae:	69ba      	ldr	r2, [r7, #24]
 80070b0:	4013      	ands	r3, r2
 80070b2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d003      	beq.n	80070c8 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80070c0:	69ba      	ldr	r2, [r7, #24]
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	4313      	orrs	r3, r2
 80070c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80070c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80070cc:	69bb      	ldr	r3, [r7, #24]
 80070ce:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80070d0:	69fb      	ldr	r3, [r7, #28]
 80070d2:	3301      	adds	r3, #1
 80070d4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	681a      	ldr	r2, [r3, #0]
 80070da:	69fb      	ldr	r3, [r7, #28]
 80070dc:	fa22 f303 	lsr.w	r3, r2, r3
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	f47f ae63 	bne.w	8006dac <HAL_GPIO_Init+0x14>
  }
}
 80070e6:	bf00      	nop
 80070e8:	bf00      	nop
 80070ea:	3724      	adds	r7, #36	; 0x24
 80070ec:	46bd      	mov	sp, r7
 80070ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f2:	4770      	bx	lr
 80070f4:	58000400 	.word	0x58000400

080070f8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b087      	sub	sp, #28
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007102:	2300      	movs	r3, #0
 8007104:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007106:	4b75      	ldr	r3, [pc, #468]	; (80072dc <HAL_GPIO_DeInit+0x1e4>)
 8007108:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 800710a:	e0d9      	b.n	80072c0 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 800710c:	2201      	movs	r2, #1
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	fa02 f303 	lsl.w	r3, r2, r3
 8007114:	683a      	ldr	r2, [r7, #0]
 8007116:	4013      	ands	r3, r2
 8007118:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	2b00      	cmp	r3, #0
 800711e:	f000 80cc 	beq.w	80072ba <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8007122:	4a6f      	ldr	r2, [pc, #444]	; (80072e0 <HAL_GPIO_DeInit+0x1e8>)
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	089b      	lsrs	r3, r3, #2
 8007128:	3302      	adds	r3, #2
 800712a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800712e:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	f003 0303 	and.w	r3, r3, #3
 8007136:	009b      	lsls	r3, r3, #2
 8007138:	220f      	movs	r2, #15
 800713a:	fa02 f303 	lsl.w	r3, r2, r3
 800713e:	68ba      	ldr	r2, [r7, #8]
 8007140:	4013      	ands	r3, r2
 8007142:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	4a67      	ldr	r2, [pc, #412]	; (80072e4 <HAL_GPIO_DeInit+0x1ec>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d037      	beq.n	80071bc <HAL_GPIO_DeInit+0xc4>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	4a66      	ldr	r2, [pc, #408]	; (80072e8 <HAL_GPIO_DeInit+0x1f0>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d031      	beq.n	80071b8 <HAL_GPIO_DeInit+0xc0>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	4a65      	ldr	r2, [pc, #404]	; (80072ec <HAL_GPIO_DeInit+0x1f4>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d02b      	beq.n	80071b4 <HAL_GPIO_DeInit+0xbc>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	4a64      	ldr	r2, [pc, #400]	; (80072f0 <HAL_GPIO_DeInit+0x1f8>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d025      	beq.n	80071b0 <HAL_GPIO_DeInit+0xb8>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	4a63      	ldr	r2, [pc, #396]	; (80072f4 <HAL_GPIO_DeInit+0x1fc>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d01f      	beq.n	80071ac <HAL_GPIO_DeInit+0xb4>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	4a62      	ldr	r2, [pc, #392]	; (80072f8 <HAL_GPIO_DeInit+0x200>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d019      	beq.n	80071a8 <HAL_GPIO_DeInit+0xb0>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	4a61      	ldr	r2, [pc, #388]	; (80072fc <HAL_GPIO_DeInit+0x204>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d013      	beq.n	80071a4 <HAL_GPIO_DeInit+0xac>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	4a60      	ldr	r2, [pc, #384]	; (8007300 <HAL_GPIO_DeInit+0x208>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d00d      	beq.n	80071a0 <HAL_GPIO_DeInit+0xa8>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	4a5f      	ldr	r2, [pc, #380]	; (8007304 <HAL_GPIO_DeInit+0x20c>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d007      	beq.n	800719c <HAL_GPIO_DeInit+0xa4>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	4a5e      	ldr	r2, [pc, #376]	; (8007308 <HAL_GPIO_DeInit+0x210>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d101      	bne.n	8007198 <HAL_GPIO_DeInit+0xa0>
 8007194:	2309      	movs	r3, #9
 8007196:	e012      	b.n	80071be <HAL_GPIO_DeInit+0xc6>
 8007198:	230a      	movs	r3, #10
 800719a:	e010      	b.n	80071be <HAL_GPIO_DeInit+0xc6>
 800719c:	2308      	movs	r3, #8
 800719e:	e00e      	b.n	80071be <HAL_GPIO_DeInit+0xc6>
 80071a0:	2307      	movs	r3, #7
 80071a2:	e00c      	b.n	80071be <HAL_GPIO_DeInit+0xc6>
 80071a4:	2306      	movs	r3, #6
 80071a6:	e00a      	b.n	80071be <HAL_GPIO_DeInit+0xc6>
 80071a8:	2305      	movs	r3, #5
 80071aa:	e008      	b.n	80071be <HAL_GPIO_DeInit+0xc6>
 80071ac:	2304      	movs	r3, #4
 80071ae:	e006      	b.n	80071be <HAL_GPIO_DeInit+0xc6>
 80071b0:	2303      	movs	r3, #3
 80071b2:	e004      	b.n	80071be <HAL_GPIO_DeInit+0xc6>
 80071b4:	2302      	movs	r3, #2
 80071b6:	e002      	b.n	80071be <HAL_GPIO_DeInit+0xc6>
 80071b8:	2301      	movs	r3, #1
 80071ba:	e000      	b.n	80071be <HAL_GPIO_DeInit+0xc6>
 80071bc:	2300      	movs	r3, #0
 80071be:	697a      	ldr	r2, [r7, #20]
 80071c0:	f002 0203 	and.w	r2, r2, #3
 80071c4:	0092      	lsls	r2, r2, #2
 80071c6:	4093      	lsls	r3, r2
 80071c8:	68ba      	ldr	r2, [r7, #8]
 80071ca:	429a      	cmp	r2, r3
 80071cc:	d136      	bne.n	800723c <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	681a      	ldr	r2, [r3, #0]
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	43db      	mvns	r3, r3
 80071d6:	401a      	ands	r2, r3
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 80071dc:	693b      	ldr	r3, [r7, #16]
 80071de:	685a      	ldr	r2, [r3, #4]
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	43db      	mvns	r3, r3
 80071e4:	401a      	ands	r2, r3
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 80071ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071ee:	681a      	ldr	r2, [r3, #0]
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	43db      	mvns	r3, r3
 80071f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80071f8:	4013      	ands	r3, r2
 80071fa:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 80071fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007200:	685a      	ldr	r2, [r3, #4]
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	43db      	mvns	r3, r3
 8007206:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800720a:	4013      	ands	r3, r2
 800720c:	604b      	str	r3, [r1, #4]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	f003 0303 	and.w	r3, r3, #3
 8007214:	009b      	lsls	r3, r3, #2
 8007216:	220f      	movs	r2, #15
 8007218:	fa02 f303 	lsl.w	r3, r2, r3
 800721c:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800721e:	4a30      	ldr	r2, [pc, #192]	; (80072e0 <HAL_GPIO_DeInit+0x1e8>)
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	089b      	lsrs	r3, r3, #2
 8007224:	3302      	adds	r3, #2
 8007226:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	43da      	mvns	r2, r3
 800722e:	482c      	ldr	r0, [pc, #176]	; (80072e0 <HAL_GPIO_DeInit+0x1e8>)
 8007230:	697b      	ldr	r3, [r7, #20]
 8007232:	089b      	lsrs	r3, r3, #2
 8007234:	400a      	ands	r2, r1
 8007236:	3302      	adds	r3, #2
 8007238:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681a      	ldr	r2, [r3, #0]
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	005b      	lsls	r3, r3, #1
 8007244:	2103      	movs	r1, #3
 8007246:	fa01 f303 	lsl.w	r3, r1, r3
 800724a:	431a      	orrs	r2, r3
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	08da      	lsrs	r2, r3, #3
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	3208      	adds	r2, #8
 8007258:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	f003 0307 	and.w	r3, r3, #7
 8007262:	009b      	lsls	r3, r3, #2
 8007264:	220f      	movs	r2, #15
 8007266:	fa02 f303 	lsl.w	r3, r2, r3
 800726a:	43db      	mvns	r3, r3
 800726c:	697a      	ldr	r2, [r7, #20]
 800726e:	08d2      	lsrs	r2, r2, #3
 8007270:	4019      	ands	r1, r3
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	3208      	adds	r2, #8
 8007276:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	68da      	ldr	r2, [r3, #12]
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	005b      	lsls	r3, r3, #1
 8007282:	2103      	movs	r1, #3
 8007284:	fa01 f303 	lsl.w	r3, r1, r3
 8007288:	43db      	mvns	r3, r3
 800728a:	401a      	ands	r2, r3
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	685a      	ldr	r2, [r3, #4]
 8007294:	2101      	movs	r1, #1
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	fa01 f303 	lsl.w	r3, r1, r3
 800729c:	43db      	mvns	r3, r3
 800729e:	401a      	ands	r2, r3
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	689a      	ldr	r2, [r3, #8]
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	005b      	lsls	r3, r3, #1
 80072ac:	2103      	movs	r1, #3
 80072ae:	fa01 f303 	lsl.w	r3, r1, r3
 80072b2:	43db      	mvns	r3, r3
 80072b4:	401a      	ands	r2, r3
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	609a      	str	r2, [r3, #8]
    }

    position++;
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	3301      	adds	r3, #1
 80072be:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 80072c0:	683a      	ldr	r2, [r7, #0]
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	fa22 f303 	lsr.w	r3, r2, r3
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	f47f af1f 	bne.w	800710c <HAL_GPIO_DeInit+0x14>
  }
}
 80072ce:	bf00      	nop
 80072d0:	bf00      	nop
 80072d2:	371c      	adds	r7, #28
 80072d4:	46bd      	mov	sp, r7
 80072d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072da:	4770      	bx	lr
 80072dc:	58000080 	.word	0x58000080
 80072e0:	58000400 	.word	0x58000400
 80072e4:	58020000 	.word	0x58020000
 80072e8:	58020400 	.word	0x58020400
 80072ec:	58020800 	.word	0x58020800
 80072f0:	58020c00 	.word	0x58020c00
 80072f4:	58021000 	.word	0x58021000
 80072f8:	58021400 	.word	0x58021400
 80072fc:	58021800 	.word	0x58021800
 8007300:	58021c00 	.word	0x58021c00
 8007304:	58022000 	.word	0x58022000
 8007308:	58022400 	.word	0x58022400

0800730c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800730c:	b480      	push	{r7}
 800730e:	b083      	sub	sp, #12
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
 8007314:	460b      	mov	r3, r1
 8007316:	807b      	strh	r3, [r7, #2]
 8007318:	4613      	mov	r3, r2
 800731a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800731c:	787b      	ldrb	r3, [r7, #1]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d003      	beq.n	800732a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007322:	887a      	ldrh	r2, [r7, #2]
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007328:	e003      	b.n	8007332 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800732a:	887b      	ldrh	r3, [r7, #2]
 800732c:	041a      	lsls	r2, r3, #16
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	619a      	str	r2, [r3, #24]
}
 8007332:	bf00      	nop
 8007334:	370c      	adds	r7, #12
 8007336:	46bd      	mov	sp, r7
 8007338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733c:	4770      	bx	lr
	...

08007340 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b082      	sub	sp, #8
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d101      	bne.n	8007352 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800734e:	2301      	movs	r3, #1
 8007350:	e07f      	b.n	8007452 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007358:	b2db      	uxtb	r3, r3
 800735a:	2b00      	cmp	r3, #0
 800735c:	d106      	bne.n	800736c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2200      	movs	r2, #0
 8007362:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f7fa feb4 	bl	80020d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2224      	movs	r2, #36	; 0x24
 8007370:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	681a      	ldr	r2, [r3, #0]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f022 0201 	bic.w	r2, r2, #1
 8007382:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	685a      	ldr	r2, [r3, #4]
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007390:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	689a      	ldr	r2, [r3, #8]
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80073a0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	68db      	ldr	r3, [r3, #12]
 80073a6:	2b01      	cmp	r3, #1
 80073a8:	d107      	bne.n	80073ba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	689a      	ldr	r2, [r3, #8]
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80073b6:	609a      	str	r2, [r3, #8]
 80073b8:	e006      	b.n	80073c8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	689a      	ldr	r2, [r3, #8]
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80073c6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	68db      	ldr	r3, [r3, #12]
 80073cc:	2b02      	cmp	r3, #2
 80073ce:	d104      	bne.n	80073da <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80073d8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	6859      	ldr	r1, [r3, #4]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681a      	ldr	r2, [r3, #0]
 80073e4:	4b1d      	ldr	r3, [pc, #116]	; (800745c <HAL_I2C_Init+0x11c>)
 80073e6:	430b      	orrs	r3, r1
 80073e8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	68da      	ldr	r2, [r3, #12]
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80073f8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	691a      	ldr	r2, [r3, #16]
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	695b      	ldr	r3, [r3, #20]
 8007402:	ea42 0103 	orr.w	r1, r2, r3
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	699b      	ldr	r3, [r3, #24]
 800740a:	021a      	lsls	r2, r3, #8
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	430a      	orrs	r2, r1
 8007412:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	69d9      	ldr	r1, [r3, #28]
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6a1a      	ldr	r2, [r3, #32]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	430a      	orrs	r2, r1
 8007422:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	681a      	ldr	r2, [r3, #0]
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f042 0201 	orr.w	r2, r2, #1
 8007432:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2200      	movs	r2, #0
 8007438:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2220      	movs	r2, #32
 800743e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2200      	movs	r2, #0
 8007446:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2200      	movs	r2, #0
 800744c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007450:	2300      	movs	r3, #0
}
 8007452:	4618      	mov	r0, r3
 8007454:	3708      	adds	r7, #8
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}
 800745a:	bf00      	nop
 800745c:	02008000 	.word	0x02008000

08007460 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b082      	sub	sp, #8
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d101      	bne.n	8007472 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800746e:	2301      	movs	r3, #1
 8007470:	e021      	b.n	80074b6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2224      	movs	r2, #36	; 0x24
 8007476:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	681a      	ldr	r2, [r3, #0]
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f022 0201 	bic.w	r2, r2, #1
 8007488:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f7fa ff1c 	bl	80022c8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2200      	movs	r2, #0
 8007494:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2200      	movs	r2, #0
 800749a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2200      	movs	r2, #0
 80074a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2200      	movs	r2, #0
 80074a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2200      	movs	r2, #0
 80074b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80074b4:	2300      	movs	r3, #0
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	3708      	adds	r7, #8
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}
	...

080074c0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b088      	sub	sp, #32
 80074c4:	af02      	add	r7, sp, #8
 80074c6:	60f8      	str	r0, [r7, #12]
 80074c8:	607a      	str	r2, [r7, #4]
 80074ca:	461a      	mov	r2, r3
 80074cc:	460b      	mov	r3, r1
 80074ce:	817b      	strh	r3, [r7, #10]
 80074d0:	4613      	mov	r3, r2
 80074d2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80074da:	b2db      	uxtb	r3, r3
 80074dc:	2b20      	cmp	r3, #32
 80074de:	f040 80da 	bne.w	8007696 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80074e8:	2b01      	cmp	r3, #1
 80074ea:	d101      	bne.n	80074f0 <HAL_I2C_Master_Transmit+0x30>
 80074ec:	2302      	movs	r3, #2
 80074ee:	e0d3      	b.n	8007698 <HAL_I2C_Master_Transmit+0x1d8>
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	2201      	movs	r2, #1
 80074f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80074f8:	f7fc f8fc 	bl	80036f4 <HAL_GetTick>
 80074fc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	9300      	str	r3, [sp, #0]
 8007502:	2319      	movs	r3, #25
 8007504:	2201      	movs	r2, #1
 8007506:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800750a:	68f8      	ldr	r0, [r7, #12]
 800750c:	f000 fc56 	bl	8007dbc <I2C_WaitOnFlagUntilTimeout>
 8007510:	4603      	mov	r3, r0
 8007512:	2b00      	cmp	r3, #0
 8007514:	d001      	beq.n	800751a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8007516:	2301      	movs	r3, #1
 8007518:	e0be      	b.n	8007698 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	2221      	movs	r2, #33	; 0x21
 800751e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	2210      	movs	r2, #16
 8007526:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	2200      	movs	r2, #0
 800752e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	687a      	ldr	r2, [r7, #4]
 8007534:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	893a      	ldrh	r2, [r7, #8]
 800753a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	2200      	movs	r2, #0
 8007540:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007546:	b29b      	uxth	r3, r3
 8007548:	2bff      	cmp	r3, #255	; 0xff
 800754a:	d90e      	bls.n	800756a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	22ff      	movs	r2, #255	; 0xff
 8007550:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007556:	b2da      	uxtb	r2, r3
 8007558:	8979      	ldrh	r1, [r7, #10]
 800755a:	4b51      	ldr	r3, [pc, #324]	; (80076a0 <HAL_I2C_Master_Transmit+0x1e0>)
 800755c:	9300      	str	r3, [sp, #0]
 800755e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007562:	68f8      	ldr	r0, [r7, #12]
 8007564:	f000 fdb8 	bl	80080d8 <I2C_TransferConfig>
 8007568:	e06c      	b.n	8007644 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800756e:	b29a      	uxth	r2, r3
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007578:	b2da      	uxtb	r2, r3
 800757a:	8979      	ldrh	r1, [r7, #10]
 800757c:	4b48      	ldr	r3, [pc, #288]	; (80076a0 <HAL_I2C_Master_Transmit+0x1e0>)
 800757e:	9300      	str	r3, [sp, #0]
 8007580:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007584:	68f8      	ldr	r0, [r7, #12]
 8007586:	f000 fda7 	bl	80080d8 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800758a:	e05b      	b.n	8007644 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800758c:	697a      	ldr	r2, [r7, #20]
 800758e:	6a39      	ldr	r1, [r7, #32]
 8007590:	68f8      	ldr	r0, [r7, #12]
 8007592:	f000 fc53 	bl	8007e3c <I2C_WaitOnTXISFlagUntilTimeout>
 8007596:	4603      	mov	r3, r0
 8007598:	2b00      	cmp	r3, #0
 800759a:	d001      	beq.n	80075a0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800759c:	2301      	movs	r3, #1
 800759e:	e07b      	b.n	8007698 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a4:	781a      	ldrb	r2, [r3, #0]
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b0:	1c5a      	adds	r2, r3, #1
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075ba:	b29b      	uxth	r3, r3
 80075bc:	3b01      	subs	r3, #1
 80075be:	b29a      	uxth	r2, r3
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075c8:	3b01      	subs	r3, #1
 80075ca:	b29a      	uxth	r2, r3
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075d4:	b29b      	uxth	r3, r3
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d034      	beq.n	8007644 <HAL_I2C_Master_Transmit+0x184>
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d130      	bne.n	8007644 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	9300      	str	r3, [sp, #0]
 80075e6:	6a3b      	ldr	r3, [r7, #32]
 80075e8:	2200      	movs	r2, #0
 80075ea:	2180      	movs	r1, #128	; 0x80
 80075ec:	68f8      	ldr	r0, [r7, #12]
 80075ee:	f000 fbe5 	bl	8007dbc <I2C_WaitOnFlagUntilTimeout>
 80075f2:	4603      	mov	r3, r0
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d001      	beq.n	80075fc <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80075f8:	2301      	movs	r3, #1
 80075fa:	e04d      	b.n	8007698 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007600:	b29b      	uxth	r3, r3
 8007602:	2bff      	cmp	r3, #255	; 0xff
 8007604:	d90e      	bls.n	8007624 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	22ff      	movs	r2, #255	; 0xff
 800760a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007610:	b2da      	uxtb	r2, r3
 8007612:	8979      	ldrh	r1, [r7, #10]
 8007614:	2300      	movs	r3, #0
 8007616:	9300      	str	r3, [sp, #0]
 8007618:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800761c:	68f8      	ldr	r0, [r7, #12]
 800761e:	f000 fd5b 	bl	80080d8 <I2C_TransferConfig>
 8007622:	e00f      	b.n	8007644 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007628:	b29a      	uxth	r2, r3
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007632:	b2da      	uxtb	r2, r3
 8007634:	8979      	ldrh	r1, [r7, #10]
 8007636:	2300      	movs	r3, #0
 8007638:	9300      	str	r3, [sp, #0]
 800763a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800763e:	68f8      	ldr	r0, [r7, #12]
 8007640:	f000 fd4a 	bl	80080d8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007648:	b29b      	uxth	r3, r3
 800764a:	2b00      	cmp	r3, #0
 800764c:	d19e      	bne.n	800758c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800764e:	697a      	ldr	r2, [r7, #20]
 8007650:	6a39      	ldr	r1, [r7, #32]
 8007652:	68f8      	ldr	r0, [r7, #12]
 8007654:	f000 fc32 	bl	8007ebc <I2C_WaitOnSTOPFlagUntilTimeout>
 8007658:	4603      	mov	r3, r0
 800765a:	2b00      	cmp	r3, #0
 800765c:	d001      	beq.n	8007662 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800765e:	2301      	movs	r3, #1
 8007660:	e01a      	b.n	8007698 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	2220      	movs	r2, #32
 8007668:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	6859      	ldr	r1, [r3, #4]
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681a      	ldr	r2, [r3, #0]
 8007674:	4b0b      	ldr	r3, [pc, #44]	; (80076a4 <HAL_I2C_Master_Transmit+0x1e4>)
 8007676:	400b      	ands	r3, r1
 8007678:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	2220      	movs	r2, #32
 800767e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	2200      	movs	r2, #0
 8007686:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	2200      	movs	r2, #0
 800768e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007692:	2300      	movs	r3, #0
 8007694:	e000      	b.n	8007698 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8007696:	2302      	movs	r3, #2
  }
}
 8007698:	4618      	mov	r0, r3
 800769a:	3718      	adds	r7, #24
 800769c:	46bd      	mov	sp, r7
 800769e:	bd80      	pop	{r7, pc}
 80076a0:	80002000 	.word	0x80002000
 80076a4:	fe00e800 	.word	0xfe00e800

080076a8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b088      	sub	sp, #32
 80076ac:	af02      	add	r7, sp, #8
 80076ae:	60f8      	str	r0, [r7, #12]
 80076b0:	607a      	str	r2, [r7, #4]
 80076b2:	461a      	mov	r2, r3
 80076b4:	460b      	mov	r3, r1
 80076b6:	817b      	strh	r3, [r7, #10]
 80076b8:	4613      	mov	r3, r2
 80076ba:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80076c2:	b2db      	uxtb	r3, r3
 80076c4:	2b20      	cmp	r3, #32
 80076c6:	f040 80db 	bne.w	8007880 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80076d0:	2b01      	cmp	r3, #1
 80076d2:	d101      	bne.n	80076d8 <HAL_I2C_Master_Receive+0x30>
 80076d4:	2302      	movs	r3, #2
 80076d6:	e0d4      	b.n	8007882 <HAL_I2C_Master_Receive+0x1da>
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	2201      	movs	r2, #1
 80076dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80076e0:	f7fc f808 	bl	80036f4 <HAL_GetTick>
 80076e4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	9300      	str	r3, [sp, #0]
 80076ea:	2319      	movs	r3, #25
 80076ec:	2201      	movs	r2, #1
 80076ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80076f2:	68f8      	ldr	r0, [r7, #12]
 80076f4:	f000 fb62 	bl	8007dbc <I2C_WaitOnFlagUntilTimeout>
 80076f8:	4603      	mov	r3, r0
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d001      	beq.n	8007702 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80076fe:	2301      	movs	r3, #1
 8007700:	e0bf      	b.n	8007882 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	2222      	movs	r2, #34	; 0x22
 8007706:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	2210      	movs	r2, #16
 800770e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	2200      	movs	r2, #0
 8007716:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	687a      	ldr	r2, [r7, #4]
 800771c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	893a      	ldrh	r2, [r7, #8]
 8007722:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	2200      	movs	r2, #0
 8007728:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800772e:	b29b      	uxth	r3, r3
 8007730:	2bff      	cmp	r3, #255	; 0xff
 8007732:	d90e      	bls.n	8007752 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	22ff      	movs	r2, #255	; 0xff
 8007738:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800773e:	b2da      	uxtb	r2, r3
 8007740:	8979      	ldrh	r1, [r7, #10]
 8007742:	4b52      	ldr	r3, [pc, #328]	; (800788c <HAL_I2C_Master_Receive+0x1e4>)
 8007744:	9300      	str	r3, [sp, #0]
 8007746:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800774a:	68f8      	ldr	r0, [r7, #12]
 800774c:	f000 fcc4 	bl	80080d8 <I2C_TransferConfig>
 8007750:	e06d      	b.n	800782e <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007756:	b29a      	uxth	r2, r3
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007760:	b2da      	uxtb	r2, r3
 8007762:	8979      	ldrh	r1, [r7, #10]
 8007764:	4b49      	ldr	r3, [pc, #292]	; (800788c <HAL_I2C_Master_Receive+0x1e4>)
 8007766:	9300      	str	r3, [sp, #0]
 8007768:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800776c:	68f8      	ldr	r0, [r7, #12]
 800776e:	f000 fcb3 	bl	80080d8 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8007772:	e05c      	b.n	800782e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007774:	697a      	ldr	r2, [r7, #20]
 8007776:	6a39      	ldr	r1, [r7, #32]
 8007778:	68f8      	ldr	r0, [r7, #12]
 800777a:	f000 fbdb 	bl	8007f34 <I2C_WaitOnRXNEFlagUntilTimeout>
 800777e:	4603      	mov	r3, r0
 8007780:	2b00      	cmp	r3, #0
 8007782:	d001      	beq.n	8007788 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8007784:	2301      	movs	r3, #1
 8007786:	e07c      	b.n	8007882 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007792:	b2d2      	uxtb	r2, r2
 8007794:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800779a:	1c5a      	adds	r2, r3, #1
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077a4:	3b01      	subs	r3, #1
 80077a6:	b29a      	uxth	r2, r3
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077b0:	b29b      	uxth	r3, r3
 80077b2:	3b01      	subs	r3, #1
 80077b4:	b29a      	uxth	r2, r3
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077be:	b29b      	uxth	r3, r3
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d034      	beq.n	800782e <HAL_I2C_Master_Receive+0x186>
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d130      	bne.n	800782e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80077cc:	697b      	ldr	r3, [r7, #20]
 80077ce:	9300      	str	r3, [sp, #0]
 80077d0:	6a3b      	ldr	r3, [r7, #32]
 80077d2:	2200      	movs	r2, #0
 80077d4:	2180      	movs	r1, #128	; 0x80
 80077d6:	68f8      	ldr	r0, [r7, #12]
 80077d8:	f000 faf0 	bl	8007dbc <I2C_WaitOnFlagUntilTimeout>
 80077dc:	4603      	mov	r3, r0
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d001      	beq.n	80077e6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80077e2:	2301      	movs	r3, #1
 80077e4:	e04d      	b.n	8007882 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077ea:	b29b      	uxth	r3, r3
 80077ec:	2bff      	cmp	r3, #255	; 0xff
 80077ee:	d90e      	bls.n	800780e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	22ff      	movs	r2, #255	; 0xff
 80077f4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077fa:	b2da      	uxtb	r2, r3
 80077fc:	8979      	ldrh	r1, [r7, #10]
 80077fe:	2300      	movs	r3, #0
 8007800:	9300      	str	r3, [sp, #0]
 8007802:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007806:	68f8      	ldr	r0, [r7, #12]
 8007808:	f000 fc66 	bl	80080d8 <I2C_TransferConfig>
 800780c:	e00f      	b.n	800782e <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007812:	b29a      	uxth	r2, r3
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800781c:	b2da      	uxtb	r2, r3
 800781e:	8979      	ldrh	r1, [r7, #10]
 8007820:	2300      	movs	r3, #0
 8007822:	9300      	str	r3, [sp, #0]
 8007824:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007828:	68f8      	ldr	r0, [r7, #12]
 800782a:	f000 fc55 	bl	80080d8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007832:	b29b      	uxth	r3, r3
 8007834:	2b00      	cmp	r3, #0
 8007836:	d19d      	bne.n	8007774 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007838:	697a      	ldr	r2, [r7, #20]
 800783a:	6a39      	ldr	r1, [r7, #32]
 800783c:	68f8      	ldr	r0, [r7, #12]
 800783e:	f000 fb3d 	bl	8007ebc <I2C_WaitOnSTOPFlagUntilTimeout>
 8007842:	4603      	mov	r3, r0
 8007844:	2b00      	cmp	r3, #0
 8007846:	d001      	beq.n	800784c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8007848:	2301      	movs	r3, #1
 800784a:	e01a      	b.n	8007882 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	2220      	movs	r2, #32
 8007852:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	6859      	ldr	r1, [r3, #4]
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681a      	ldr	r2, [r3, #0]
 800785e:	4b0c      	ldr	r3, [pc, #48]	; (8007890 <HAL_I2C_Master_Receive+0x1e8>)
 8007860:	400b      	ands	r3, r1
 8007862:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	2220      	movs	r2, #32
 8007868:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	2200      	movs	r2, #0
 8007870:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	2200      	movs	r2, #0
 8007878:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800787c:	2300      	movs	r3, #0
 800787e:	e000      	b.n	8007882 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8007880:	2302      	movs	r3, #2
  }
}
 8007882:	4618      	mov	r0, r3
 8007884:	3718      	adds	r7, #24
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}
 800788a:	bf00      	nop
 800788c:	80002400 	.word	0x80002400
 8007890:	fe00e800 	.word	0xfe00e800

08007894 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b088      	sub	sp, #32
 8007898:	af02      	add	r7, sp, #8
 800789a:	60f8      	str	r0, [r7, #12]
 800789c:	4608      	mov	r0, r1
 800789e:	4611      	mov	r1, r2
 80078a0:	461a      	mov	r2, r3
 80078a2:	4603      	mov	r3, r0
 80078a4:	817b      	strh	r3, [r7, #10]
 80078a6:	460b      	mov	r3, r1
 80078a8:	813b      	strh	r3, [r7, #8]
 80078aa:	4613      	mov	r3, r2
 80078ac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80078b4:	b2db      	uxtb	r3, r3
 80078b6:	2b20      	cmp	r3, #32
 80078b8:	f040 80f9 	bne.w	8007aae <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80078bc:	6a3b      	ldr	r3, [r7, #32]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d002      	beq.n	80078c8 <HAL_I2C_Mem_Write+0x34>
 80078c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d105      	bne.n	80078d4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80078ce:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80078d0:	2301      	movs	r3, #1
 80078d2:	e0ed      	b.n	8007ab0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80078da:	2b01      	cmp	r3, #1
 80078dc:	d101      	bne.n	80078e2 <HAL_I2C_Mem_Write+0x4e>
 80078de:	2302      	movs	r3, #2
 80078e0:	e0e6      	b.n	8007ab0 <HAL_I2C_Mem_Write+0x21c>
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	2201      	movs	r2, #1
 80078e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80078ea:	f7fb ff03 	bl	80036f4 <HAL_GetTick>
 80078ee:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	9300      	str	r3, [sp, #0]
 80078f4:	2319      	movs	r3, #25
 80078f6:	2201      	movs	r2, #1
 80078f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80078fc:	68f8      	ldr	r0, [r7, #12]
 80078fe:	f000 fa5d 	bl	8007dbc <I2C_WaitOnFlagUntilTimeout>
 8007902:	4603      	mov	r3, r0
 8007904:	2b00      	cmp	r3, #0
 8007906:	d001      	beq.n	800790c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8007908:	2301      	movs	r3, #1
 800790a:	e0d1      	b.n	8007ab0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	2221      	movs	r2, #33	; 0x21
 8007910:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	2240      	movs	r2, #64	; 0x40
 8007918:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	2200      	movs	r2, #0
 8007920:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	6a3a      	ldr	r2, [r7, #32]
 8007926:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800792c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	2200      	movs	r2, #0
 8007932:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007934:	88f8      	ldrh	r0, [r7, #6]
 8007936:	893a      	ldrh	r2, [r7, #8]
 8007938:	8979      	ldrh	r1, [r7, #10]
 800793a:	697b      	ldr	r3, [r7, #20]
 800793c:	9301      	str	r3, [sp, #4]
 800793e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007940:	9300      	str	r3, [sp, #0]
 8007942:	4603      	mov	r3, r0
 8007944:	68f8      	ldr	r0, [r7, #12]
 8007946:	f000 f9c1 	bl	8007ccc <I2C_RequestMemoryWrite>
 800794a:	4603      	mov	r3, r0
 800794c:	2b00      	cmp	r3, #0
 800794e:	d005      	beq.n	800795c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	2200      	movs	r2, #0
 8007954:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007958:	2301      	movs	r3, #1
 800795a:	e0a9      	b.n	8007ab0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007960:	b29b      	uxth	r3, r3
 8007962:	2bff      	cmp	r3, #255	; 0xff
 8007964:	d90e      	bls.n	8007984 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	22ff      	movs	r2, #255	; 0xff
 800796a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007970:	b2da      	uxtb	r2, r3
 8007972:	8979      	ldrh	r1, [r7, #10]
 8007974:	2300      	movs	r3, #0
 8007976:	9300      	str	r3, [sp, #0]
 8007978:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800797c:	68f8      	ldr	r0, [r7, #12]
 800797e:	f000 fbab 	bl	80080d8 <I2C_TransferConfig>
 8007982:	e00f      	b.n	80079a4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007988:	b29a      	uxth	r2, r3
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007992:	b2da      	uxtb	r2, r3
 8007994:	8979      	ldrh	r1, [r7, #10]
 8007996:	2300      	movs	r3, #0
 8007998:	9300      	str	r3, [sp, #0]
 800799a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800799e:	68f8      	ldr	r0, [r7, #12]
 80079a0:	f000 fb9a 	bl	80080d8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80079a4:	697a      	ldr	r2, [r7, #20]
 80079a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80079a8:	68f8      	ldr	r0, [r7, #12]
 80079aa:	f000 fa47 	bl	8007e3c <I2C_WaitOnTXISFlagUntilTimeout>
 80079ae:	4603      	mov	r3, r0
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d001      	beq.n	80079b8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80079b4:	2301      	movs	r3, #1
 80079b6:	e07b      	b.n	8007ab0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079bc:	781a      	ldrb	r2, [r3, #0]
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c8:	1c5a      	adds	r2, r3, #1
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079d2:	b29b      	uxth	r3, r3
 80079d4:	3b01      	subs	r3, #1
 80079d6:	b29a      	uxth	r2, r3
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079e0:	3b01      	subs	r3, #1
 80079e2:	b29a      	uxth	r2, r3
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079ec:	b29b      	uxth	r3, r3
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d034      	beq.n	8007a5c <HAL_I2C_Mem_Write+0x1c8>
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d130      	bne.n	8007a5c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	9300      	str	r3, [sp, #0]
 80079fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a00:	2200      	movs	r2, #0
 8007a02:	2180      	movs	r1, #128	; 0x80
 8007a04:	68f8      	ldr	r0, [r7, #12]
 8007a06:	f000 f9d9 	bl	8007dbc <I2C_WaitOnFlagUntilTimeout>
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d001      	beq.n	8007a14 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8007a10:	2301      	movs	r3, #1
 8007a12:	e04d      	b.n	8007ab0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a18:	b29b      	uxth	r3, r3
 8007a1a:	2bff      	cmp	r3, #255	; 0xff
 8007a1c:	d90e      	bls.n	8007a3c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	22ff      	movs	r2, #255	; 0xff
 8007a22:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a28:	b2da      	uxtb	r2, r3
 8007a2a:	8979      	ldrh	r1, [r7, #10]
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	9300      	str	r3, [sp, #0]
 8007a30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007a34:	68f8      	ldr	r0, [r7, #12]
 8007a36:	f000 fb4f 	bl	80080d8 <I2C_TransferConfig>
 8007a3a:	e00f      	b.n	8007a5c <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a40:	b29a      	uxth	r2, r3
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a4a:	b2da      	uxtb	r2, r3
 8007a4c:	8979      	ldrh	r1, [r7, #10]
 8007a4e:	2300      	movs	r3, #0
 8007a50:	9300      	str	r3, [sp, #0]
 8007a52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007a56:	68f8      	ldr	r0, [r7, #12]
 8007a58:	f000 fb3e 	bl	80080d8 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a60:	b29b      	uxth	r3, r3
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d19e      	bne.n	80079a4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007a66:	697a      	ldr	r2, [r7, #20]
 8007a68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007a6a:	68f8      	ldr	r0, [r7, #12]
 8007a6c:	f000 fa26 	bl	8007ebc <I2C_WaitOnSTOPFlagUntilTimeout>
 8007a70:	4603      	mov	r3, r0
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d001      	beq.n	8007a7a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8007a76:	2301      	movs	r3, #1
 8007a78:	e01a      	b.n	8007ab0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	2220      	movs	r2, #32
 8007a80:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	6859      	ldr	r1, [r3, #4]
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681a      	ldr	r2, [r3, #0]
 8007a8c:	4b0a      	ldr	r3, [pc, #40]	; (8007ab8 <HAL_I2C_Mem_Write+0x224>)
 8007a8e:	400b      	ands	r3, r1
 8007a90:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	2220      	movs	r2, #32
 8007a96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	e000      	b.n	8007ab0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8007aae:	2302      	movs	r3, #2
  }
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	3718      	adds	r7, #24
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bd80      	pop	{r7, pc}
 8007ab8:	fe00e800 	.word	0xfe00e800

08007abc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b08a      	sub	sp, #40	; 0x28
 8007ac0:	af02      	add	r7, sp, #8
 8007ac2:	60f8      	str	r0, [r7, #12]
 8007ac4:	607a      	str	r2, [r7, #4]
 8007ac6:	603b      	str	r3, [r7, #0]
 8007ac8:	460b      	mov	r3, r1
 8007aca:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8007acc:	2300      	movs	r3, #0
 8007ace:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007ad6:	b2db      	uxtb	r3, r3
 8007ad8:	2b20      	cmp	r3, #32
 8007ada:	f040 80ef 	bne.w	8007cbc <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	699b      	ldr	r3, [r3, #24]
 8007ae4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007ae8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007aec:	d101      	bne.n	8007af2 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8007aee:	2302      	movs	r3, #2
 8007af0:	e0e5      	b.n	8007cbe <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007af8:	2b01      	cmp	r3, #1
 8007afa:	d101      	bne.n	8007b00 <HAL_I2C_IsDeviceReady+0x44>
 8007afc:	2302      	movs	r3, #2
 8007afe:	e0de      	b.n	8007cbe <HAL_I2C_IsDeviceReady+0x202>
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	2201      	movs	r2, #1
 8007b04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	2224      	movs	r2, #36	; 0x24
 8007b0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	2200      	movs	r2, #0
 8007b14:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	68db      	ldr	r3, [r3, #12]
 8007b1a:	2b01      	cmp	r3, #1
 8007b1c:	d105      	bne.n	8007b2a <HAL_I2C_IsDeviceReady+0x6e>
 8007b1e:	897b      	ldrh	r3, [r7, #10]
 8007b20:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007b24:	4b68      	ldr	r3, [pc, #416]	; (8007cc8 <HAL_I2C_IsDeviceReady+0x20c>)
 8007b26:	4313      	orrs	r3, r2
 8007b28:	e004      	b.n	8007b34 <HAL_I2C_IsDeviceReady+0x78>
 8007b2a:	897b      	ldrh	r3, [r7, #10]
 8007b2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b30:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8007b34:	68fa      	ldr	r2, [r7, #12]
 8007b36:	6812      	ldr	r2, [r2, #0]
 8007b38:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8007b3a:	f7fb fddb 	bl	80036f4 <HAL_GetTick>
 8007b3e:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	699b      	ldr	r3, [r3, #24]
 8007b46:	f003 0320 	and.w	r3, r3, #32
 8007b4a:	2b20      	cmp	r3, #32
 8007b4c:	bf0c      	ite	eq
 8007b4e:	2301      	moveq	r3, #1
 8007b50:	2300      	movne	r3, #0
 8007b52:	b2db      	uxtb	r3, r3
 8007b54:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	699b      	ldr	r3, [r3, #24]
 8007b5c:	f003 0310 	and.w	r3, r3, #16
 8007b60:	2b10      	cmp	r3, #16
 8007b62:	bf0c      	ite	eq
 8007b64:	2301      	moveq	r3, #1
 8007b66:	2300      	movne	r3, #0
 8007b68:	b2db      	uxtb	r3, r3
 8007b6a:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8007b6c:	e034      	b.n	8007bd8 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b74:	d01a      	beq.n	8007bac <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007b76:	f7fb fdbd 	bl	80036f4 <HAL_GetTick>
 8007b7a:	4602      	mov	r2, r0
 8007b7c:	69bb      	ldr	r3, [r7, #24]
 8007b7e:	1ad3      	subs	r3, r2, r3
 8007b80:	683a      	ldr	r2, [r7, #0]
 8007b82:	429a      	cmp	r2, r3
 8007b84:	d302      	bcc.n	8007b8c <HAL_I2C_IsDeviceReady+0xd0>
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d10f      	bne.n	8007bac <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	2220      	movs	r2, #32
 8007b90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b98:	f043 0220 	orr.w	r2, r3, #32
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8007ba8:	2301      	movs	r3, #1
 8007baa:	e088      	b.n	8007cbe <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	699b      	ldr	r3, [r3, #24]
 8007bb2:	f003 0320 	and.w	r3, r3, #32
 8007bb6:	2b20      	cmp	r3, #32
 8007bb8:	bf0c      	ite	eq
 8007bba:	2301      	moveq	r3, #1
 8007bbc:	2300      	movne	r3, #0
 8007bbe:	b2db      	uxtb	r3, r3
 8007bc0:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	699b      	ldr	r3, [r3, #24]
 8007bc8:	f003 0310 	and.w	r3, r3, #16
 8007bcc:	2b10      	cmp	r3, #16
 8007bce:	bf0c      	ite	eq
 8007bd0:	2301      	moveq	r3, #1
 8007bd2:	2300      	movne	r3, #0
 8007bd4:	b2db      	uxtb	r3, r3
 8007bd6:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8007bd8:	7ffb      	ldrb	r3, [r7, #31]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d102      	bne.n	8007be4 <HAL_I2C_IsDeviceReady+0x128>
 8007bde:	7fbb      	ldrb	r3, [r7, #30]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d0c4      	beq.n	8007b6e <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	699b      	ldr	r3, [r3, #24]
 8007bea:	f003 0310 	and.w	r3, r3, #16
 8007bee:	2b10      	cmp	r3, #16
 8007bf0:	d01a      	beq.n	8007c28 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8007bf2:	69bb      	ldr	r3, [r7, #24]
 8007bf4:	9300      	str	r3, [sp, #0]
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	2120      	movs	r1, #32
 8007bfc:	68f8      	ldr	r0, [r7, #12]
 8007bfe:	f000 f8dd 	bl	8007dbc <I2C_WaitOnFlagUntilTimeout>
 8007c02:	4603      	mov	r3, r0
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d001      	beq.n	8007c0c <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 8007c08:	2301      	movs	r3, #1
 8007c0a:	e058      	b.n	8007cbe <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	2220      	movs	r2, #32
 8007c12:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	2220      	movs	r2, #32
 8007c18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8007c24:	2300      	movs	r3, #0
 8007c26:	e04a      	b.n	8007cbe <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8007c28:	69bb      	ldr	r3, [r7, #24]
 8007c2a:	9300      	str	r3, [sp, #0]
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	2120      	movs	r1, #32
 8007c32:	68f8      	ldr	r0, [r7, #12]
 8007c34:	f000 f8c2 	bl	8007dbc <I2C_WaitOnFlagUntilTimeout>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d001      	beq.n	8007c42 <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 8007c3e:	2301      	movs	r3, #1
 8007c40:	e03d      	b.n	8007cbe <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	2210      	movs	r2, #16
 8007c48:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	2220      	movs	r2, #32
 8007c50:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8007c52:	697b      	ldr	r3, [r7, #20]
 8007c54:	687a      	ldr	r2, [r7, #4]
 8007c56:	429a      	cmp	r2, r3
 8007c58:	d118      	bne.n	8007c8c <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	685a      	ldr	r2, [r3, #4]
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007c68:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8007c6a:	69bb      	ldr	r3, [r7, #24]
 8007c6c:	9300      	str	r3, [sp, #0]
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	2200      	movs	r2, #0
 8007c72:	2120      	movs	r1, #32
 8007c74:	68f8      	ldr	r0, [r7, #12]
 8007c76:	f000 f8a1 	bl	8007dbc <I2C_WaitOnFlagUntilTimeout>
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d001      	beq.n	8007c84 <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 8007c80:	2301      	movs	r3, #1
 8007c82:	e01c      	b.n	8007cbe <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	2220      	movs	r2, #32
 8007c8a:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8007c8c:	697b      	ldr	r3, [r7, #20]
 8007c8e:	3301      	adds	r3, #1
 8007c90:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8007c92:	697b      	ldr	r3, [r7, #20]
 8007c94:	687a      	ldr	r2, [r7, #4]
 8007c96:	429a      	cmp	r2, r3
 8007c98:	f63f af3d 	bhi.w	8007b16 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	2220      	movs	r2, #32
 8007ca0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ca8:	f043 0220 	orr.w	r2, r3, #32
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8007cb8:	2301      	movs	r3, #1
 8007cba:	e000      	b.n	8007cbe <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 8007cbc:	2302      	movs	r3, #2
  }
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	3720      	adds	r7, #32
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}
 8007cc6:	bf00      	nop
 8007cc8:	02002000 	.word	0x02002000

08007ccc <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b086      	sub	sp, #24
 8007cd0:	af02      	add	r7, sp, #8
 8007cd2:	60f8      	str	r0, [r7, #12]
 8007cd4:	4608      	mov	r0, r1
 8007cd6:	4611      	mov	r1, r2
 8007cd8:	461a      	mov	r2, r3
 8007cda:	4603      	mov	r3, r0
 8007cdc:	817b      	strh	r3, [r7, #10]
 8007cde:	460b      	mov	r3, r1
 8007ce0:	813b      	strh	r3, [r7, #8]
 8007ce2:	4613      	mov	r3, r2
 8007ce4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007ce6:	88fb      	ldrh	r3, [r7, #6]
 8007ce8:	b2da      	uxtb	r2, r3
 8007cea:	8979      	ldrh	r1, [r7, #10]
 8007cec:	4b20      	ldr	r3, [pc, #128]	; (8007d70 <I2C_RequestMemoryWrite+0xa4>)
 8007cee:	9300      	str	r3, [sp, #0]
 8007cf0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007cf4:	68f8      	ldr	r0, [r7, #12]
 8007cf6:	f000 f9ef 	bl	80080d8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007cfa:	69fa      	ldr	r2, [r7, #28]
 8007cfc:	69b9      	ldr	r1, [r7, #24]
 8007cfe:	68f8      	ldr	r0, [r7, #12]
 8007d00:	f000 f89c 	bl	8007e3c <I2C_WaitOnTXISFlagUntilTimeout>
 8007d04:	4603      	mov	r3, r0
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d001      	beq.n	8007d0e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	e02c      	b.n	8007d68 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007d0e:	88fb      	ldrh	r3, [r7, #6]
 8007d10:	2b01      	cmp	r3, #1
 8007d12:	d105      	bne.n	8007d20 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007d14:	893b      	ldrh	r3, [r7, #8]
 8007d16:	b2da      	uxtb	r2, r3
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	629a      	str	r2, [r3, #40]	; 0x28
 8007d1e:	e015      	b.n	8007d4c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007d20:	893b      	ldrh	r3, [r7, #8]
 8007d22:	0a1b      	lsrs	r3, r3, #8
 8007d24:	b29b      	uxth	r3, r3
 8007d26:	b2da      	uxtb	r2, r3
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d2e:	69fa      	ldr	r2, [r7, #28]
 8007d30:	69b9      	ldr	r1, [r7, #24]
 8007d32:	68f8      	ldr	r0, [r7, #12]
 8007d34:	f000 f882 	bl	8007e3c <I2C_WaitOnTXISFlagUntilTimeout>
 8007d38:	4603      	mov	r3, r0
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d001      	beq.n	8007d42 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8007d3e:	2301      	movs	r3, #1
 8007d40:	e012      	b.n	8007d68 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007d42:	893b      	ldrh	r3, [r7, #8]
 8007d44:	b2da      	uxtb	r2, r3
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007d4c:	69fb      	ldr	r3, [r7, #28]
 8007d4e:	9300      	str	r3, [sp, #0]
 8007d50:	69bb      	ldr	r3, [r7, #24]
 8007d52:	2200      	movs	r2, #0
 8007d54:	2180      	movs	r1, #128	; 0x80
 8007d56:	68f8      	ldr	r0, [r7, #12]
 8007d58:	f000 f830 	bl	8007dbc <I2C_WaitOnFlagUntilTimeout>
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d001      	beq.n	8007d66 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8007d62:	2301      	movs	r3, #1
 8007d64:	e000      	b.n	8007d68 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8007d66:	2300      	movs	r3, #0
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	3710      	adds	r7, #16
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}
 8007d70:	80002000 	.word	0x80002000

08007d74 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007d74:	b480      	push	{r7}
 8007d76:	b083      	sub	sp, #12
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	699b      	ldr	r3, [r3, #24]
 8007d82:	f003 0302 	and.w	r3, r3, #2
 8007d86:	2b02      	cmp	r3, #2
 8007d88:	d103      	bne.n	8007d92 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	699b      	ldr	r3, [r3, #24]
 8007d98:	f003 0301 	and.w	r3, r3, #1
 8007d9c:	2b01      	cmp	r3, #1
 8007d9e:	d007      	beq.n	8007db0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	699a      	ldr	r2, [r3, #24]
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f042 0201 	orr.w	r2, r2, #1
 8007dae:	619a      	str	r2, [r3, #24]
  }
}
 8007db0:	bf00      	nop
 8007db2:	370c      	adds	r7, #12
 8007db4:	46bd      	mov	sp, r7
 8007db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dba:	4770      	bx	lr

08007dbc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b084      	sub	sp, #16
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	60f8      	str	r0, [r7, #12]
 8007dc4:	60b9      	str	r1, [r7, #8]
 8007dc6:	603b      	str	r3, [r7, #0]
 8007dc8:	4613      	mov	r3, r2
 8007dca:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007dcc:	e022      	b.n	8007e14 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dd4:	d01e      	beq.n	8007e14 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007dd6:	f7fb fc8d 	bl	80036f4 <HAL_GetTick>
 8007dda:	4602      	mov	r2, r0
 8007ddc:	69bb      	ldr	r3, [r7, #24]
 8007dde:	1ad3      	subs	r3, r2, r3
 8007de0:	683a      	ldr	r2, [r7, #0]
 8007de2:	429a      	cmp	r2, r3
 8007de4:	d302      	bcc.n	8007dec <I2C_WaitOnFlagUntilTimeout+0x30>
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d113      	bne.n	8007e14 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007df0:	f043 0220 	orr.w	r2, r3, #32
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	2220      	movs	r2, #32
 8007dfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	2200      	movs	r2, #0
 8007e04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8007e10:	2301      	movs	r3, #1
 8007e12:	e00f      	b.n	8007e34 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	699a      	ldr	r2, [r3, #24]
 8007e1a:	68bb      	ldr	r3, [r7, #8]
 8007e1c:	4013      	ands	r3, r2
 8007e1e:	68ba      	ldr	r2, [r7, #8]
 8007e20:	429a      	cmp	r2, r3
 8007e22:	bf0c      	ite	eq
 8007e24:	2301      	moveq	r3, #1
 8007e26:	2300      	movne	r3, #0
 8007e28:	b2db      	uxtb	r3, r3
 8007e2a:	461a      	mov	r2, r3
 8007e2c:	79fb      	ldrb	r3, [r7, #7]
 8007e2e:	429a      	cmp	r2, r3
 8007e30:	d0cd      	beq.n	8007dce <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007e32:	2300      	movs	r3, #0
}
 8007e34:	4618      	mov	r0, r3
 8007e36:	3710      	adds	r7, #16
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bd80      	pop	{r7, pc}

08007e3c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b084      	sub	sp, #16
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	60f8      	str	r0, [r7, #12]
 8007e44:	60b9      	str	r1, [r7, #8]
 8007e46:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007e48:	e02c      	b.n	8007ea4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8007e4a:	687a      	ldr	r2, [r7, #4]
 8007e4c:	68b9      	ldr	r1, [r7, #8]
 8007e4e:	68f8      	ldr	r0, [r7, #12]
 8007e50:	f000 f8dc 	bl	800800c <I2C_IsAcknowledgeFailed>
 8007e54:	4603      	mov	r3, r0
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d001      	beq.n	8007e5e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	e02a      	b.n	8007eb4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e5e:	68bb      	ldr	r3, [r7, #8]
 8007e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e64:	d01e      	beq.n	8007ea4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e66:	f7fb fc45 	bl	80036f4 <HAL_GetTick>
 8007e6a:	4602      	mov	r2, r0
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	1ad3      	subs	r3, r2, r3
 8007e70:	68ba      	ldr	r2, [r7, #8]
 8007e72:	429a      	cmp	r2, r3
 8007e74:	d302      	bcc.n	8007e7c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d113      	bne.n	8007ea4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e80:	f043 0220 	orr.w	r2, r3, #32
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	2220      	movs	r2, #32
 8007e8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	2200      	movs	r2, #0
 8007e94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	e007      	b.n	8007eb4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	699b      	ldr	r3, [r3, #24]
 8007eaa:	f003 0302 	and.w	r3, r3, #2
 8007eae:	2b02      	cmp	r3, #2
 8007eb0:	d1cb      	bne.n	8007e4a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007eb2:	2300      	movs	r3, #0
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	3710      	adds	r7, #16
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}

08007ebc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b084      	sub	sp, #16
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	60f8      	str	r0, [r7, #12]
 8007ec4:	60b9      	str	r1, [r7, #8]
 8007ec6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007ec8:	e028      	b.n	8007f1c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8007eca:	687a      	ldr	r2, [r7, #4]
 8007ecc:	68b9      	ldr	r1, [r7, #8]
 8007ece:	68f8      	ldr	r0, [r7, #12]
 8007ed0:	f000 f89c 	bl	800800c <I2C_IsAcknowledgeFailed>
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d001      	beq.n	8007ede <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007eda:	2301      	movs	r3, #1
 8007edc:	e026      	b.n	8007f2c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ede:	f7fb fc09 	bl	80036f4 <HAL_GetTick>
 8007ee2:	4602      	mov	r2, r0
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	1ad3      	subs	r3, r2, r3
 8007ee8:	68ba      	ldr	r2, [r7, #8]
 8007eea:	429a      	cmp	r2, r3
 8007eec:	d302      	bcc.n	8007ef4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d113      	bne.n	8007f1c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ef8:	f043 0220 	orr.w	r2, r3, #32
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	2220      	movs	r2, #32
 8007f04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	2200      	movs	r2, #0
 8007f14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007f18:	2301      	movs	r3, #1
 8007f1a:	e007      	b.n	8007f2c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	699b      	ldr	r3, [r3, #24]
 8007f22:	f003 0320 	and.w	r3, r3, #32
 8007f26:	2b20      	cmp	r3, #32
 8007f28:	d1cf      	bne.n	8007eca <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007f2a:	2300      	movs	r3, #0
}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	3710      	adds	r7, #16
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bd80      	pop	{r7, pc}

08007f34 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b084      	sub	sp, #16
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	60f8      	str	r0, [r7, #12]
 8007f3c:	60b9      	str	r1, [r7, #8]
 8007f3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007f40:	e055      	b.n	8007fee <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8007f42:	687a      	ldr	r2, [r7, #4]
 8007f44:	68b9      	ldr	r1, [r7, #8]
 8007f46:	68f8      	ldr	r0, [r7, #12]
 8007f48:	f000 f860 	bl	800800c <I2C_IsAcknowledgeFailed>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d001      	beq.n	8007f56 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007f52:	2301      	movs	r3, #1
 8007f54:	e053      	b.n	8007ffe <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	699b      	ldr	r3, [r3, #24]
 8007f5c:	f003 0320 	and.w	r3, r3, #32
 8007f60:	2b20      	cmp	r3, #32
 8007f62:	d129      	bne.n	8007fb8 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	699b      	ldr	r3, [r3, #24]
 8007f6a:	f003 0304 	and.w	r3, r3, #4
 8007f6e:	2b04      	cmp	r3, #4
 8007f70:	d105      	bne.n	8007f7e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d001      	beq.n	8007f7e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	e03f      	b.n	8007ffe <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	2220      	movs	r2, #32
 8007f84:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	6859      	ldr	r1, [r3, #4]
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681a      	ldr	r2, [r3, #0]
 8007f90:	4b1d      	ldr	r3, [pc, #116]	; (8008008 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8007f92:	400b      	ands	r3, r1
 8007f94:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	2220      	movs	r2, #32
 8007fa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	2200      	movs	r2, #0
 8007fb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	e022      	b.n	8007ffe <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007fb8:	f7fb fb9c 	bl	80036f4 <HAL_GetTick>
 8007fbc:	4602      	mov	r2, r0
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	1ad3      	subs	r3, r2, r3
 8007fc2:	68ba      	ldr	r2, [r7, #8]
 8007fc4:	429a      	cmp	r2, r3
 8007fc6:	d302      	bcc.n	8007fce <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8007fc8:	68bb      	ldr	r3, [r7, #8]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d10f      	bne.n	8007fee <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fd2:	f043 0220 	orr.w	r2, r3, #32
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	2220      	movs	r2, #32
 8007fde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007fea:	2301      	movs	r3, #1
 8007fec:	e007      	b.n	8007ffe <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	699b      	ldr	r3, [r3, #24]
 8007ff4:	f003 0304 	and.w	r3, r3, #4
 8007ff8:	2b04      	cmp	r3, #4
 8007ffa:	d1a2      	bne.n	8007f42 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007ffc:	2300      	movs	r3, #0
}
 8007ffe:	4618      	mov	r0, r3
 8008000:	3710      	adds	r7, #16
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}
 8008006:	bf00      	nop
 8008008:	fe00e800 	.word	0xfe00e800

0800800c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b084      	sub	sp, #16
 8008010:	af00      	add	r7, sp, #0
 8008012:	60f8      	str	r0, [r7, #12]
 8008014:	60b9      	str	r1, [r7, #8]
 8008016:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	699b      	ldr	r3, [r3, #24]
 800801e:	f003 0310 	and.w	r3, r3, #16
 8008022:	2b10      	cmp	r3, #16
 8008024:	d151      	bne.n	80080ca <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008026:	e022      	b.n	800806e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800802e:	d01e      	beq.n	800806e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008030:	f7fb fb60 	bl	80036f4 <HAL_GetTick>
 8008034:	4602      	mov	r2, r0
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	1ad3      	subs	r3, r2, r3
 800803a:	68ba      	ldr	r2, [r7, #8]
 800803c:	429a      	cmp	r2, r3
 800803e:	d302      	bcc.n	8008046 <I2C_IsAcknowledgeFailed+0x3a>
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d113      	bne.n	800806e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800804a:	f043 0220 	orr.w	r2, r3, #32
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	2220      	movs	r2, #32
 8008056:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	2200      	movs	r2, #0
 800805e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	2200      	movs	r2, #0
 8008066:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800806a:	2301      	movs	r3, #1
 800806c:	e02e      	b.n	80080cc <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	699b      	ldr	r3, [r3, #24]
 8008074:	f003 0320 	and.w	r3, r3, #32
 8008078:	2b20      	cmp	r3, #32
 800807a:	d1d5      	bne.n	8008028 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	2210      	movs	r2, #16
 8008082:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	2220      	movs	r2, #32
 800808a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800808c:	68f8      	ldr	r0, [r7, #12]
 800808e:	f7ff fe71 	bl	8007d74 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	6859      	ldr	r1, [r3, #4]
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681a      	ldr	r2, [r3, #0]
 800809c:	4b0d      	ldr	r3, [pc, #52]	; (80080d4 <I2C_IsAcknowledgeFailed+0xc8>)
 800809e:	400b      	ands	r3, r1
 80080a0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080a6:	f043 0204 	orr.w	r2, r3, #4
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	2220      	movs	r2, #32
 80080b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	2200      	movs	r2, #0
 80080ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	2200      	movs	r2, #0
 80080c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80080c6:	2301      	movs	r3, #1
 80080c8:	e000      	b.n	80080cc <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80080ca:	2300      	movs	r3, #0
}
 80080cc:	4618      	mov	r0, r3
 80080ce:	3710      	adds	r7, #16
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bd80      	pop	{r7, pc}
 80080d4:	fe00e800 	.word	0xfe00e800

080080d8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80080d8:	b480      	push	{r7}
 80080da:	b085      	sub	sp, #20
 80080dc:	af00      	add	r7, sp, #0
 80080de:	60f8      	str	r0, [r7, #12]
 80080e0:	607b      	str	r3, [r7, #4]
 80080e2:	460b      	mov	r3, r1
 80080e4:	817b      	strh	r3, [r7, #10]
 80080e6:	4613      	mov	r3, r2
 80080e8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	685a      	ldr	r2, [r3, #4]
 80080f0:	69bb      	ldr	r3, [r7, #24]
 80080f2:	0d5b      	lsrs	r3, r3, #21
 80080f4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80080f8:	4b0d      	ldr	r3, [pc, #52]	; (8008130 <I2C_TransferConfig+0x58>)
 80080fa:	430b      	orrs	r3, r1
 80080fc:	43db      	mvns	r3, r3
 80080fe:	ea02 0103 	and.w	r1, r2, r3
 8008102:	897b      	ldrh	r3, [r7, #10]
 8008104:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8008108:	7a7b      	ldrb	r3, [r7, #9]
 800810a:	041b      	lsls	r3, r3, #16
 800810c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008110:	431a      	orrs	r2, r3
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	431a      	orrs	r2, r3
 8008116:	69bb      	ldr	r3, [r7, #24]
 8008118:	431a      	orrs	r2, r3
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	430a      	orrs	r2, r1
 8008120:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8008122:	bf00      	nop
 8008124:	3714      	adds	r7, #20
 8008126:	46bd      	mov	sp, r7
 8008128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812c:	4770      	bx	lr
 800812e:	bf00      	nop
 8008130:	03ff63ff 	.word	0x03ff63ff

08008134 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008134:	b480      	push	{r7}
 8008136:	b083      	sub	sp, #12
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
 800813c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008144:	b2db      	uxtb	r3, r3
 8008146:	2b20      	cmp	r3, #32
 8008148:	d138      	bne.n	80081bc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008150:	2b01      	cmp	r3, #1
 8008152:	d101      	bne.n	8008158 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008154:	2302      	movs	r3, #2
 8008156:	e032      	b.n	80081be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2201      	movs	r2, #1
 800815c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2224      	movs	r2, #36	; 0x24
 8008164:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	681a      	ldr	r2, [r3, #0]
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f022 0201 	bic.w	r2, r2, #1
 8008176:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	681a      	ldr	r2, [r3, #0]
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008186:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	6819      	ldr	r1, [r3, #0]
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	683a      	ldr	r2, [r7, #0]
 8008194:	430a      	orrs	r2, r1
 8008196:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	681a      	ldr	r2, [r3, #0]
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f042 0201 	orr.w	r2, r2, #1
 80081a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2220      	movs	r2, #32
 80081ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2200      	movs	r2, #0
 80081b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80081b8:	2300      	movs	r3, #0
 80081ba:	e000      	b.n	80081be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80081bc:	2302      	movs	r3, #2
  }
}
 80081be:	4618      	mov	r0, r3
 80081c0:	370c      	adds	r7, #12
 80081c2:	46bd      	mov	sp, r7
 80081c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c8:	4770      	bx	lr

080081ca <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80081ca:	b480      	push	{r7}
 80081cc:	b085      	sub	sp, #20
 80081ce:	af00      	add	r7, sp, #0
 80081d0:	6078      	str	r0, [r7, #4]
 80081d2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80081da:	b2db      	uxtb	r3, r3
 80081dc:	2b20      	cmp	r3, #32
 80081de:	d139      	bne.n	8008254 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80081e6:	2b01      	cmp	r3, #1
 80081e8:	d101      	bne.n	80081ee <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80081ea:	2302      	movs	r3, #2
 80081ec:	e033      	b.n	8008256 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2201      	movs	r2, #1
 80081f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2224      	movs	r2, #36	; 0x24
 80081fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	681a      	ldr	r2, [r3, #0]
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f022 0201 	bic.w	r2, r2, #1
 800820c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800821c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	021b      	lsls	r3, r3, #8
 8008222:	68fa      	ldr	r2, [r7, #12]
 8008224:	4313      	orrs	r3, r2
 8008226:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	68fa      	ldr	r2, [r7, #12]
 800822e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	681a      	ldr	r2, [r3, #0]
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f042 0201 	orr.w	r2, r2, #1
 800823e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2220      	movs	r2, #32
 8008244:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2200      	movs	r2, #0
 800824c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008250:	2300      	movs	r3, #0
 8008252:	e000      	b.n	8008256 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008254:	2302      	movs	r3, #2
  }
}
 8008256:	4618      	mov	r0, r3
 8008258:	3714      	adds	r7, #20
 800825a:	46bd      	mov	sp, r7
 800825c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008260:	4770      	bx	lr
	...

08008264 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8008264:	b480      	push	{r7}
 8008266:	b085      	sub	sp, #20
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800826c:	4b0d      	ldr	r3, [pc, #52]	; (80082a4 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800826e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008272:	4a0c      	ldr	r2, [pc, #48]	; (80082a4 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8008274:	f043 0302 	orr.w	r3, r3, #2
 8008278:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800827c:	4b09      	ldr	r3, [pc, #36]	; (80082a4 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800827e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008282:	f003 0302 	and.w	r3, r3, #2
 8008286:	60fb      	str	r3, [r7, #12]
 8008288:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 800828a:	4b07      	ldr	r3, [pc, #28]	; (80082a8 <HAL_I2CEx_EnableFastModePlus+0x44>)
 800828c:	685a      	ldr	r2, [r3, #4]
 800828e:	4906      	ldr	r1, [pc, #24]	; (80082a8 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	4313      	orrs	r3, r2
 8008294:	604b      	str	r3, [r1, #4]
}
 8008296:	bf00      	nop
 8008298:	3714      	adds	r7, #20
 800829a:	46bd      	mov	sp, r7
 800829c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a0:	4770      	bx	lr
 80082a2:	bf00      	nop
 80082a4:	58024400 	.word	0x58024400
 80082a8:	58000400 	.word	0x58000400

080082ac <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b084      	sub	sp, #16
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80082b4:	4b19      	ldr	r3, [pc, #100]	; (800831c <HAL_PWREx_ConfigSupply+0x70>)
 80082b6:	68db      	ldr	r3, [r3, #12]
 80082b8:	f003 0304 	and.w	r3, r3, #4
 80082bc:	2b04      	cmp	r3, #4
 80082be:	d00a      	beq.n	80082d6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80082c0:	4b16      	ldr	r3, [pc, #88]	; (800831c <HAL_PWREx_ConfigSupply+0x70>)
 80082c2:	68db      	ldr	r3, [r3, #12]
 80082c4:	f003 0307 	and.w	r3, r3, #7
 80082c8:	687a      	ldr	r2, [r7, #4]
 80082ca:	429a      	cmp	r2, r3
 80082cc:	d001      	beq.n	80082d2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80082ce:	2301      	movs	r3, #1
 80082d0:	e01f      	b.n	8008312 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80082d2:	2300      	movs	r3, #0
 80082d4:	e01d      	b.n	8008312 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80082d6:	4b11      	ldr	r3, [pc, #68]	; (800831c <HAL_PWREx_ConfigSupply+0x70>)
 80082d8:	68db      	ldr	r3, [r3, #12]
 80082da:	f023 0207 	bic.w	r2, r3, #7
 80082de:	490f      	ldr	r1, [pc, #60]	; (800831c <HAL_PWREx_ConfigSupply+0x70>)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	4313      	orrs	r3, r2
 80082e4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80082e6:	f7fb fa05 	bl	80036f4 <HAL_GetTick>
 80082ea:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80082ec:	e009      	b.n	8008302 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80082ee:	f7fb fa01 	bl	80036f4 <HAL_GetTick>
 80082f2:	4602      	mov	r2, r0
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	1ad3      	subs	r3, r2, r3
 80082f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80082fc:	d901      	bls.n	8008302 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80082fe:	2301      	movs	r3, #1
 8008300:	e007      	b.n	8008312 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008302:	4b06      	ldr	r3, [pc, #24]	; (800831c <HAL_PWREx_ConfigSupply+0x70>)
 8008304:	685b      	ldr	r3, [r3, #4]
 8008306:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800830a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800830e:	d1ee      	bne.n	80082ee <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008310:	2300      	movs	r3, #0
}
 8008312:	4618      	mov	r0, r3
 8008314:	3710      	adds	r7, #16
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}
 800831a:	bf00      	nop
 800831c:	58024800 	.word	0x58024800

08008320 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b086      	sub	sp, #24
 8008324:	af02      	add	r7, sp, #8
 8008326:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8008328:	f7fb f9e4 	bl	80036f4 <HAL_GetTick>
 800832c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d101      	bne.n	8008338 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8008334:	2301      	movs	r3, #1
 8008336:	e05f      	b.n	80083f8 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800833e:	b2db      	uxtb	r3, r3
 8008340:	2b00      	cmp	r3, #0
 8008342:	d107      	bne.n	8008354 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f7fa fab7 	bl	80028b8 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800834a:	f241 3188 	movw	r1, #5000	; 0x1388
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f000 f85a 	bl	8008408 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	689b      	ldr	r3, [r3, #8]
 8008362:	3b01      	subs	r3, #1
 8008364:	021a      	lsls	r2, r3, #8
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	430a      	orrs	r2, r1
 800836c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008372:	9300      	str	r3, [sp, #0]
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	2200      	movs	r2, #0
 8008378:	2120      	movs	r1, #32
 800837a:	6878      	ldr	r0, [r7, #4]
 800837c:	f000 f852 	bl	8008424 <QSPI_WaitFlagStateUntilTimeout>
 8008380:	4603      	mov	r3, r0
 8008382:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8008384:	7afb      	ldrb	r3, [r7, #11]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d135      	bne.n	80083f6 <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	681a      	ldr	r2, [r3, #0]
 8008390:	4b1b      	ldr	r3, [pc, #108]	; (8008400 <HAL_QSPI_Init+0xe0>)
 8008392:	4013      	ands	r3, r2
 8008394:	687a      	ldr	r2, [r7, #4]
 8008396:	6852      	ldr	r2, [r2, #4]
 8008398:	0611      	lsls	r1, r2, #24
 800839a:	687a      	ldr	r2, [r7, #4]
 800839c:	68d2      	ldr	r2, [r2, #12]
 800839e:	4311      	orrs	r1, r2
 80083a0:	687a      	ldr	r2, [r7, #4]
 80083a2:	69d2      	ldr	r2, [r2, #28]
 80083a4:	4311      	orrs	r1, r2
 80083a6:	687a      	ldr	r2, [r7, #4]
 80083a8:	6a12      	ldr	r2, [r2, #32]
 80083aa:	4311      	orrs	r1, r2
 80083ac:	687a      	ldr	r2, [r7, #4]
 80083ae:	6812      	ldr	r2, [r2, #0]
 80083b0:	430b      	orrs	r3, r1
 80083b2:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	685a      	ldr	r2, [r3, #4]
 80083ba:	4b12      	ldr	r3, [pc, #72]	; (8008404 <HAL_QSPI_Init+0xe4>)
 80083bc:	4013      	ands	r3, r2
 80083be:	687a      	ldr	r2, [r7, #4]
 80083c0:	6912      	ldr	r2, [r2, #16]
 80083c2:	0411      	lsls	r1, r2, #16
 80083c4:	687a      	ldr	r2, [r7, #4]
 80083c6:	6952      	ldr	r2, [r2, #20]
 80083c8:	4311      	orrs	r1, r2
 80083ca:	687a      	ldr	r2, [r7, #4]
 80083cc:	6992      	ldr	r2, [r2, #24]
 80083ce:	4311      	orrs	r1, r2
 80083d0:	687a      	ldr	r2, [r7, #4]
 80083d2:	6812      	ldr	r2, [r2, #0]
 80083d4:	430b      	orrs	r3, r1
 80083d6:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	681a      	ldr	r2, [r3, #0]
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f042 0201 	orr.w	r2, r2, #1
 80083e6:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2200      	movs	r2, #0
 80083ec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2201      	movs	r2, #1
 80083f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 80083f6:	7afb      	ldrb	r3, [r7, #11]
}
 80083f8:	4618      	mov	r0, r3
 80083fa:	3710      	adds	r7, #16
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bd80      	pop	{r7, pc}
 8008400:	00ffff2f 	.word	0x00ffff2f
 8008404:	ffe0f8fe 	.word	0xffe0f8fe

08008408 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8008408:	b480      	push	{r7}
 800840a:	b083      	sub	sp, #12
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
 8008410:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	683a      	ldr	r2, [r7, #0]
 8008416:	649a      	str	r2, [r3, #72]	; 0x48
}
 8008418:	bf00      	nop
 800841a:	370c      	adds	r7, #12
 800841c:	46bd      	mov	sp, r7
 800841e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008422:	4770      	bx	lr

08008424 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b084      	sub	sp, #16
 8008428:	af00      	add	r7, sp, #0
 800842a:	60f8      	str	r0, [r7, #12]
 800842c:	60b9      	str	r1, [r7, #8]
 800842e:	603b      	str	r3, [r7, #0]
 8008430:	4613      	mov	r3, r2
 8008432:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8008434:	e01a      	b.n	800846c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008436:	69bb      	ldr	r3, [r7, #24]
 8008438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800843c:	d016      	beq.n	800846c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800843e:	f7fb f959 	bl	80036f4 <HAL_GetTick>
 8008442:	4602      	mov	r2, r0
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	1ad3      	subs	r3, r2, r3
 8008448:	69ba      	ldr	r2, [r7, #24]
 800844a:	429a      	cmp	r2, r3
 800844c:	d302      	bcc.n	8008454 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800844e:	69bb      	ldr	r3, [r7, #24]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d10b      	bne.n	800846c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	2204      	movs	r2, #4
 8008458:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008460:	f043 0201 	orr.w	r2, r3, #1
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8008468:	2301      	movs	r3, #1
 800846a:	e00e      	b.n	800848a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	689a      	ldr	r2, [r3, #8]
 8008472:	68bb      	ldr	r3, [r7, #8]
 8008474:	4013      	ands	r3, r2
 8008476:	2b00      	cmp	r3, #0
 8008478:	bf14      	ite	ne
 800847a:	2301      	movne	r3, #1
 800847c:	2300      	moveq	r3, #0
 800847e:	b2db      	uxtb	r3, r3
 8008480:	461a      	mov	r2, r3
 8008482:	79fb      	ldrb	r3, [r7, #7]
 8008484:	429a      	cmp	r2, r3
 8008486:	d1d6      	bne.n	8008436 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008488:	2300      	movs	r3, #0
}
 800848a:	4618      	mov	r0, r3
 800848c:	3710      	adds	r7, #16
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}
	...

08008494 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b08c      	sub	sp, #48	; 0x30
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d101      	bne.n	80084a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80084a2:	2301      	movs	r3, #1
 80084a4:	e3ff      	b.n	8008ca6 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f003 0301 	and.w	r3, r3, #1
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	f000 8087 	beq.w	80085c2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80084b4:	4b99      	ldr	r3, [pc, #612]	; (800871c <HAL_RCC_OscConfig+0x288>)
 80084b6:	691b      	ldr	r3, [r3, #16]
 80084b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80084bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80084be:	4b97      	ldr	r3, [pc, #604]	; (800871c <HAL_RCC_OscConfig+0x288>)
 80084c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084c2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80084c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084c6:	2b10      	cmp	r3, #16
 80084c8:	d007      	beq.n	80084da <HAL_RCC_OscConfig+0x46>
 80084ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084cc:	2b18      	cmp	r3, #24
 80084ce:	d110      	bne.n	80084f2 <HAL_RCC_OscConfig+0x5e>
 80084d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084d2:	f003 0303 	and.w	r3, r3, #3
 80084d6:	2b02      	cmp	r3, #2
 80084d8:	d10b      	bne.n	80084f2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80084da:	4b90      	ldr	r3, [pc, #576]	; (800871c <HAL_RCC_OscConfig+0x288>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d06c      	beq.n	80085c0 <HAL_RCC_OscConfig+0x12c>
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	685b      	ldr	r3, [r3, #4]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d168      	bne.n	80085c0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80084ee:	2301      	movs	r3, #1
 80084f0:	e3d9      	b.n	8008ca6 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	685b      	ldr	r3, [r3, #4]
 80084f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80084fa:	d106      	bne.n	800850a <HAL_RCC_OscConfig+0x76>
 80084fc:	4b87      	ldr	r3, [pc, #540]	; (800871c <HAL_RCC_OscConfig+0x288>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	4a86      	ldr	r2, [pc, #536]	; (800871c <HAL_RCC_OscConfig+0x288>)
 8008502:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008506:	6013      	str	r3, [r2, #0]
 8008508:	e02e      	b.n	8008568 <HAL_RCC_OscConfig+0xd4>
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	685b      	ldr	r3, [r3, #4]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d10c      	bne.n	800852c <HAL_RCC_OscConfig+0x98>
 8008512:	4b82      	ldr	r3, [pc, #520]	; (800871c <HAL_RCC_OscConfig+0x288>)
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	4a81      	ldr	r2, [pc, #516]	; (800871c <HAL_RCC_OscConfig+0x288>)
 8008518:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800851c:	6013      	str	r3, [r2, #0]
 800851e:	4b7f      	ldr	r3, [pc, #508]	; (800871c <HAL_RCC_OscConfig+0x288>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	4a7e      	ldr	r2, [pc, #504]	; (800871c <HAL_RCC_OscConfig+0x288>)
 8008524:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008528:	6013      	str	r3, [r2, #0]
 800852a:	e01d      	b.n	8008568 <HAL_RCC_OscConfig+0xd4>
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	685b      	ldr	r3, [r3, #4]
 8008530:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008534:	d10c      	bne.n	8008550 <HAL_RCC_OscConfig+0xbc>
 8008536:	4b79      	ldr	r3, [pc, #484]	; (800871c <HAL_RCC_OscConfig+0x288>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	4a78      	ldr	r2, [pc, #480]	; (800871c <HAL_RCC_OscConfig+0x288>)
 800853c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008540:	6013      	str	r3, [r2, #0]
 8008542:	4b76      	ldr	r3, [pc, #472]	; (800871c <HAL_RCC_OscConfig+0x288>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	4a75      	ldr	r2, [pc, #468]	; (800871c <HAL_RCC_OscConfig+0x288>)
 8008548:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800854c:	6013      	str	r3, [r2, #0]
 800854e:	e00b      	b.n	8008568 <HAL_RCC_OscConfig+0xd4>
 8008550:	4b72      	ldr	r3, [pc, #456]	; (800871c <HAL_RCC_OscConfig+0x288>)
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	4a71      	ldr	r2, [pc, #452]	; (800871c <HAL_RCC_OscConfig+0x288>)
 8008556:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800855a:	6013      	str	r3, [r2, #0]
 800855c:	4b6f      	ldr	r3, [pc, #444]	; (800871c <HAL_RCC_OscConfig+0x288>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	4a6e      	ldr	r2, [pc, #440]	; (800871c <HAL_RCC_OscConfig+0x288>)
 8008562:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008566:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	685b      	ldr	r3, [r3, #4]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d013      	beq.n	8008598 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008570:	f7fb f8c0 	bl	80036f4 <HAL_GetTick>
 8008574:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008576:	e008      	b.n	800858a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008578:	f7fb f8bc 	bl	80036f4 <HAL_GetTick>
 800857c:	4602      	mov	r2, r0
 800857e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008580:	1ad3      	subs	r3, r2, r3
 8008582:	2b64      	cmp	r3, #100	; 0x64
 8008584:	d901      	bls.n	800858a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008586:	2303      	movs	r3, #3
 8008588:	e38d      	b.n	8008ca6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800858a:	4b64      	ldr	r3, [pc, #400]	; (800871c <HAL_RCC_OscConfig+0x288>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008592:	2b00      	cmp	r3, #0
 8008594:	d0f0      	beq.n	8008578 <HAL_RCC_OscConfig+0xe4>
 8008596:	e014      	b.n	80085c2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008598:	f7fb f8ac 	bl	80036f4 <HAL_GetTick>
 800859c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800859e:	e008      	b.n	80085b2 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80085a0:	f7fb f8a8 	bl	80036f4 <HAL_GetTick>
 80085a4:	4602      	mov	r2, r0
 80085a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085a8:	1ad3      	subs	r3, r2, r3
 80085aa:	2b64      	cmp	r3, #100	; 0x64
 80085ac:	d901      	bls.n	80085b2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80085ae:	2303      	movs	r3, #3
 80085b0:	e379      	b.n	8008ca6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80085b2:	4b5a      	ldr	r3, [pc, #360]	; (800871c <HAL_RCC_OscConfig+0x288>)
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d1f0      	bne.n	80085a0 <HAL_RCC_OscConfig+0x10c>
 80085be:	e000      	b.n	80085c2 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80085c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f003 0302 	and.w	r3, r3, #2
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	f000 80ae 	beq.w	800872c <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80085d0:	4b52      	ldr	r3, [pc, #328]	; (800871c <HAL_RCC_OscConfig+0x288>)
 80085d2:	691b      	ldr	r3, [r3, #16]
 80085d4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80085d8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80085da:	4b50      	ldr	r3, [pc, #320]	; (800871c <HAL_RCC_OscConfig+0x288>)
 80085dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085de:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80085e0:	6a3b      	ldr	r3, [r7, #32]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d007      	beq.n	80085f6 <HAL_RCC_OscConfig+0x162>
 80085e6:	6a3b      	ldr	r3, [r7, #32]
 80085e8:	2b18      	cmp	r3, #24
 80085ea:	d13a      	bne.n	8008662 <HAL_RCC_OscConfig+0x1ce>
 80085ec:	69fb      	ldr	r3, [r7, #28]
 80085ee:	f003 0303 	and.w	r3, r3, #3
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d135      	bne.n	8008662 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80085f6:	4b49      	ldr	r3, [pc, #292]	; (800871c <HAL_RCC_OscConfig+0x288>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f003 0304 	and.w	r3, r3, #4
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d005      	beq.n	800860e <HAL_RCC_OscConfig+0x17a>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	68db      	ldr	r3, [r3, #12]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d101      	bne.n	800860e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800860a:	2301      	movs	r3, #1
 800860c:	e34b      	b.n	8008ca6 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800860e:	f7fb f8a1 	bl	8003754 <HAL_GetREVID>
 8008612:	4603      	mov	r3, r0
 8008614:	f241 0203 	movw	r2, #4099	; 0x1003
 8008618:	4293      	cmp	r3, r2
 800861a:	d817      	bhi.n	800864c <HAL_RCC_OscConfig+0x1b8>
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	691b      	ldr	r3, [r3, #16]
 8008620:	2b40      	cmp	r3, #64	; 0x40
 8008622:	d108      	bne.n	8008636 <HAL_RCC_OscConfig+0x1a2>
 8008624:	4b3d      	ldr	r3, [pc, #244]	; (800871c <HAL_RCC_OscConfig+0x288>)
 8008626:	685b      	ldr	r3, [r3, #4]
 8008628:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800862c:	4a3b      	ldr	r2, [pc, #236]	; (800871c <HAL_RCC_OscConfig+0x288>)
 800862e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008632:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008634:	e07a      	b.n	800872c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008636:	4b39      	ldr	r3, [pc, #228]	; (800871c <HAL_RCC_OscConfig+0x288>)
 8008638:	685b      	ldr	r3, [r3, #4]
 800863a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	691b      	ldr	r3, [r3, #16]
 8008642:	031b      	lsls	r3, r3, #12
 8008644:	4935      	ldr	r1, [pc, #212]	; (800871c <HAL_RCC_OscConfig+0x288>)
 8008646:	4313      	orrs	r3, r2
 8008648:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800864a:	e06f      	b.n	800872c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800864c:	4b33      	ldr	r3, [pc, #204]	; (800871c <HAL_RCC_OscConfig+0x288>)
 800864e:	685b      	ldr	r3, [r3, #4]
 8008650:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	691b      	ldr	r3, [r3, #16]
 8008658:	061b      	lsls	r3, r3, #24
 800865a:	4930      	ldr	r1, [pc, #192]	; (800871c <HAL_RCC_OscConfig+0x288>)
 800865c:	4313      	orrs	r3, r2
 800865e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008660:	e064      	b.n	800872c <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	68db      	ldr	r3, [r3, #12]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d045      	beq.n	80086f6 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800866a:	4b2c      	ldr	r3, [pc, #176]	; (800871c <HAL_RCC_OscConfig+0x288>)
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f023 0219 	bic.w	r2, r3, #25
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	68db      	ldr	r3, [r3, #12]
 8008676:	4929      	ldr	r1, [pc, #164]	; (800871c <HAL_RCC_OscConfig+0x288>)
 8008678:	4313      	orrs	r3, r2
 800867a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800867c:	f7fb f83a 	bl	80036f4 <HAL_GetTick>
 8008680:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008682:	e008      	b.n	8008696 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008684:	f7fb f836 	bl	80036f4 <HAL_GetTick>
 8008688:	4602      	mov	r2, r0
 800868a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800868c:	1ad3      	subs	r3, r2, r3
 800868e:	2b02      	cmp	r3, #2
 8008690:	d901      	bls.n	8008696 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8008692:	2303      	movs	r3, #3
 8008694:	e307      	b.n	8008ca6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008696:	4b21      	ldr	r3, [pc, #132]	; (800871c <HAL_RCC_OscConfig+0x288>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f003 0304 	and.w	r3, r3, #4
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d0f0      	beq.n	8008684 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80086a2:	f7fb f857 	bl	8003754 <HAL_GetREVID>
 80086a6:	4603      	mov	r3, r0
 80086a8:	f241 0203 	movw	r2, #4099	; 0x1003
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d817      	bhi.n	80086e0 <HAL_RCC_OscConfig+0x24c>
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	691b      	ldr	r3, [r3, #16]
 80086b4:	2b40      	cmp	r3, #64	; 0x40
 80086b6:	d108      	bne.n	80086ca <HAL_RCC_OscConfig+0x236>
 80086b8:	4b18      	ldr	r3, [pc, #96]	; (800871c <HAL_RCC_OscConfig+0x288>)
 80086ba:	685b      	ldr	r3, [r3, #4]
 80086bc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80086c0:	4a16      	ldr	r2, [pc, #88]	; (800871c <HAL_RCC_OscConfig+0x288>)
 80086c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80086c6:	6053      	str	r3, [r2, #4]
 80086c8:	e030      	b.n	800872c <HAL_RCC_OscConfig+0x298>
 80086ca:	4b14      	ldr	r3, [pc, #80]	; (800871c <HAL_RCC_OscConfig+0x288>)
 80086cc:	685b      	ldr	r3, [r3, #4]
 80086ce:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	691b      	ldr	r3, [r3, #16]
 80086d6:	031b      	lsls	r3, r3, #12
 80086d8:	4910      	ldr	r1, [pc, #64]	; (800871c <HAL_RCC_OscConfig+0x288>)
 80086da:	4313      	orrs	r3, r2
 80086dc:	604b      	str	r3, [r1, #4]
 80086de:	e025      	b.n	800872c <HAL_RCC_OscConfig+0x298>
 80086e0:	4b0e      	ldr	r3, [pc, #56]	; (800871c <HAL_RCC_OscConfig+0x288>)
 80086e2:	685b      	ldr	r3, [r3, #4]
 80086e4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	691b      	ldr	r3, [r3, #16]
 80086ec:	061b      	lsls	r3, r3, #24
 80086ee:	490b      	ldr	r1, [pc, #44]	; (800871c <HAL_RCC_OscConfig+0x288>)
 80086f0:	4313      	orrs	r3, r2
 80086f2:	604b      	str	r3, [r1, #4]
 80086f4:	e01a      	b.n	800872c <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80086f6:	4b09      	ldr	r3, [pc, #36]	; (800871c <HAL_RCC_OscConfig+0x288>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	4a08      	ldr	r2, [pc, #32]	; (800871c <HAL_RCC_OscConfig+0x288>)
 80086fc:	f023 0301 	bic.w	r3, r3, #1
 8008700:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008702:	f7fa fff7 	bl	80036f4 <HAL_GetTick>
 8008706:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008708:	e00a      	b.n	8008720 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800870a:	f7fa fff3 	bl	80036f4 <HAL_GetTick>
 800870e:	4602      	mov	r2, r0
 8008710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008712:	1ad3      	subs	r3, r2, r3
 8008714:	2b02      	cmp	r3, #2
 8008716:	d903      	bls.n	8008720 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8008718:	2303      	movs	r3, #3
 800871a:	e2c4      	b.n	8008ca6 <HAL_RCC_OscConfig+0x812>
 800871c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008720:	4ba4      	ldr	r3, [pc, #656]	; (80089b4 <HAL_RCC_OscConfig+0x520>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f003 0304 	and.w	r3, r3, #4
 8008728:	2b00      	cmp	r3, #0
 800872a:	d1ee      	bne.n	800870a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f003 0310 	and.w	r3, r3, #16
 8008734:	2b00      	cmp	r3, #0
 8008736:	f000 80a9 	beq.w	800888c <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800873a:	4b9e      	ldr	r3, [pc, #632]	; (80089b4 <HAL_RCC_OscConfig+0x520>)
 800873c:	691b      	ldr	r3, [r3, #16]
 800873e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008742:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008744:	4b9b      	ldr	r3, [pc, #620]	; (80089b4 <HAL_RCC_OscConfig+0x520>)
 8008746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008748:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800874a:	69bb      	ldr	r3, [r7, #24]
 800874c:	2b08      	cmp	r3, #8
 800874e:	d007      	beq.n	8008760 <HAL_RCC_OscConfig+0x2cc>
 8008750:	69bb      	ldr	r3, [r7, #24]
 8008752:	2b18      	cmp	r3, #24
 8008754:	d13a      	bne.n	80087cc <HAL_RCC_OscConfig+0x338>
 8008756:	697b      	ldr	r3, [r7, #20]
 8008758:	f003 0303 	and.w	r3, r3, #3
 800875c:	2b01      	cmp	r3, #1
 800875e:	d135      	bne.n	80087cc <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008760:	4b94      	ldr	r3, [pc, #592]	; (80089b4 <HAL_RCC_OscConfig+0x520>)
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008768:	2b00      	cmp	r3, #0
 800876a:	d005      	beq.n	8008778 <HAL_RCC_OscConfig+0x2e4>
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	69db      	ldr	r3, [r3, #28]
 8008770:	2b80      	cmp	r3, #128	; 0x80
 8008772:	d001      	beq.n	8008778 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8008774:	2301      	movs	r3, #1
 8008776:	e296      	b.n	8008ca6 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008778:	f7fa ffec 	bl	8003754 <HAL_GetREVID>
 800877c:	4603      	mov	r3, r0
 800877e:	f241 0203 	movw	r2, #4099	; 0x1003
 8008782:	4293      	cmp	r3, r2
 8008784:	d817      	bhi.n	80087b6 <HAL_RCC_OscConfig+0x322>
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6a1b      	ldr	r3, [r3, #32]
 800878a:	2b20      	cmp	r3, #32
 800878c:	d108      	bne.n	80087a0 <HAL_RCC_OscConfig+0x30c>
 800878e:	4b89      	ldr	r3, [pc, #548]	; (80089b4 <HAL_RCC_OscConfig+0x520>)
 8008790:	685b      	ldr	r3, [r3, #4]
 8008792:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008796:	4a87      	ldr	r2, [pc, #540]	; (80089b4 <HAL_RCC_OscConfig+0x520>)
 8008798:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800879c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800879e:	e075      	b.n	800888c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80087a0:	4b84      	ldr	r3, [pc, #528]	; (80089b4 <HAL_RCC_OscConfig+0x520>)
 80087a2:	685b      	ldr	r3, [r3, #4]
 80087a4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6a1b      	ldr	r3, [r3, #32]
 80087ac:	069b      	lsls	r3, r3, #26
 80087ae:	4981      	ldr	r1, [pc, #516]	; (80089b4 <HAL_RCC_OscConfig+0x520>)
 80087b0:	4313      	orrs	r3, r2
 80087b2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80087b4:	e06a      	b.n	800888c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80087b6:	4b7f      	ldr	r3, [pc, #508]	; (80089b4 <HAL_RCC_OscConfig+0x520>)
 80087b8:	68db      	ldr	r3, [r3, #12]
 80087ba:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6a1b      	ldr	r3, [r3, #32]
 80087c2:	061b      	lsls	r3, r3, #24
 80087c4:	497b      	ldr	r1, [pc, #492]	; (80089b4 <HAL_RCC_OscConfig+0x520>)
 80087c6:	4313      	orrs	r3, r2
 80087c8:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80087ca:	e05f      	b.n	800888c <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	69db      	ldr	r3, [r3, #28]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d042      	beq.n	800885a <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80087d4:	4b77      	ldr	r3, [pc, #476]	; (80089b4 <HAL_RCC_OscConfig+0x520>)
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	4a76      	ldr	r2, [pc, #472]	; (80089b4 <HAL_RCC_OscConfig+0x520>)
 80087da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087e0:	f7fa ff88 	bl	80036f4 <HAL_GetTick>
 80087e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80087e6:	e008      	b.n	80087fa <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80087e8:	f7fa ff84 	bl	80036f4 <HAL_GetTick>
 80087ec:	4602      	mov	r2, r0
 80087ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087f0:	1ad3      	subs	r3, r2, r3
 80087f2:	2b02      	cmp	r3, #2
 80087f4:	d901      	bls.n	80087fa <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80087f6:	2303      	movs	r3, #3
 80087f8:	e255      	b.n	8008ca6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80087fa:	4b6e      	ldr	r3, [pc, #440]	; (80089b4 <HAL_RCC_OscConfig+0x520>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008802:	2b00      	cmp	r3, #0
 8008804:	d0f0      	beq.n	80087e8 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008806:	f7fa ffa5 	bl	8003754 <HAL_GetREVID>
 800880a:	4603      	mov	r3, r0
 800880c:	f241 0203 	movw	r2, #4099	; 0x1003
 8008810:	4293      	cmp	r3, r2
 8008812:	d817      	bhi.n	8008844 <HAL_RCC_OscConfig+0x3b0>
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	6a1b      	ldr	r3, [r3, #32]
 8008818:	2b20      	cmp	r3, #32
 800881a:	d108      	bne.n	800882e <HAL_RCC_OscConfig+0x39a>
 800881c:	4b65      	ldr	r3, [pc, #404]	; (80089b4 <HAL_RCC_OscConfig+0x520>)
 800881e:	685b      	ldr	r3, [r3, #4]
 8008820:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008824:	4a63      	ldr	r2, [pc, #396]	; (80089b4 <HAL_RCC_OscConfig+0x520>)
 8008826:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800882a:	6053      	str	r3, [r2, #4]
 800882c:	e02e      	b.n	800888c <HAL_RCC_OscConfig+0x3f8>
 800882e:	4b61      	ldr	r3, [pc, #388]	; (80089b4 <HAL_RCC_OscConfig+0x520>)
 8008830:	685b      	ldr	r3, [r3, #4]
 8008832:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6a1b      	ldr	r3, [r3, #32]
 800883a:	069b      	lsls	r3, r3, #26
 800883c:	495d      	ldr	r1, [pc, #372]	; (80089b4 <HAL_RCC_OscConfig+0x520>)
 800883e:	4313      	orrs	r3, r2
 8008840:	604b      	str	r3, [r1, #4]
 8008842:	e023      	b.n	800888c <HAL_RCC_OscConfig+0x3f8>
 8008844:	4b5b      	ldr	r3, [pc, #364]	; (80089b4 <HAL_RCC_OscConfig+0x520>)
 8008846:	68db      	ldr	r3, [r3, #12]
 8008848:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	6a1b      	ldr	r3, [r3, #32]
 8008850:	061b      	lsls	r3, r3, #24
 8008852:	4958      	ldr	r1, [pc, #352]	; (80089b4 <HAL_RCC_OscConfig+0x520>)
 8008854:	4313      	orrs	r3, r2
 8008856:	60cb      	str	r3, [r1, #12]
 8008858:	e018      	b.n	800888c <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800885a:	4b56      	ldr	r3, [pc, #344]	; (80089b4 <HAL_RCC_OscConfig+0x520>)
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	4a55      	ldr	r2, [pc, #340]	; (80089b4 <HAL_RCC_OscConfig+0x520>)
 8008860:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008864:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008866:	f7fa ff45 	bl	80036f4 <HAL_GetTick>
 800886a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800886c:	e008      	b.n	8008880 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800886e:	f7fa ff41 	bl	80036f4 <HAL_GetTick>
 8008872:	4602      	mov	r2, r0
 8008874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008876:	1ad3      	subs	r3, r2, r3
 8008878:	2b02      	cmp	r3, #2
 800887a:	d901      	bls.n	8008880 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 800887c:	2303      	movs	r3, #3
 800887e:	e212      	b.n	8008ca6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008880:	4b4c      	ldr	r3, [pc, #304]	; (80089b4 <HAL_RCC_OscConfig+0x520>)
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008888:	2b00      	cmp	r3, #0
 800888a:	d1f0      	bne.n	800886e <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f003 0308 	and.w	r3, r3, #8
 8008894:	2b00      	cmp	r3, #0
 8008896:	d036      	beq.n	8008906 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	695b      	ldr	r3, [r3, #20]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d019      	beq.n	80088d4 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80088a0:	4b44      	ldr	r3, [pc, #272]	; (80089b4 <HAL_RCC_OscConfig+0x520>)
 80088a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80088a4:	4a43      	ldr	r2, [pc, #268]	; (80089b4 <HAL_RCC_OscConfig+0x520>)
 80088a6:	f043 0301 	orr.w	r3, r3, #1
 80088aa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088ac:	f7fa ff22 	bl	80036f4 <HAL_GetTick>
 80088b0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80088b2:	e008      	b.n	80088c6 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80088b4:	f7fa ff1e 	bl	80036f4 <HAL_GetTick>
 80088b8:	4602      	mov	r2, r0
 80088ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088bc:	1ad3      	subs	r3, r2, r3
 80088be:	2b02      	cmp	r3, #2
 80088c0:	d901      	bls.n	80088c6 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80088c2:	2303      	movs	r3, #3
 80088c4:	e1ef      	b.n	8008ca6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80088c6:	4b3b      	ldr	r3, [pc, #236]	; (80089b4 <HAL_RCC_OscConfig+0x520>)
 80088c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80088ca:	f003 0302 	and.w	r3, r3, #2
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d0f0      	beq.n	80088b4 <HAL_RCC_OscConfig+0x420>
 80088d2:	e018      	b.n	8008906 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80088d4:	4b37      	ldr	r3, [pc, #220]	; (80089b4 <HAL_RCC_OscConfig+0x520>)
 80088d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80088d8:	4a36      	ldr	r2, [pc, #216]	; (80089b4 <HAL_RCC_OscConfig+0x520>)
 80088da:	f023 0301 	bic.w	r3, r3, #1
 80088de:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088e0:	f7fa ff08 	bl	80036f4 <HAL_GetTick>
 80088e4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80088e6:	e008      	b.n	80088fa <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80088e8:	f7fa ff04 	bl	80036f4 <HAL_GetTick>
 80088ec:	4602      	mov	r2, r0
 80088ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f0:	1ad3      	subs	r3, r2, r3
 80088f2:	2b02      	cmp	r3, #2
 80088f4:	d901      	bls.n	80088fa <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80088f6:	2303      	movs	r3, #3
 80088f8:	e1d5      	b.n	8008ca6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80088fa:	4b2e      	ldr	r3, [pc, #184]	; (80089b4 <HAL_RCC_OscConfig+0x520>)
 80088fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80088fe:	f003 0302 	and.w	r3, r3, #2
 8008902:	2b00      	cmp	r3, #0
 8008904:	d1f0      	bne.n	80088e8 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f003 0320 	and.w	r3, r3, #32
 800890e:	2b00      	cmp	r3, #0
 8008910:	d036      	beq.n	8008980 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	699b      	ldr	r3, [r3, #24]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d019      	beq.n	800894e <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800891a:	4b26      	ldr	r3, [pc, #152]	; (80089b4 <HAL_RCC_OscConfig+0x520>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	4a25      	ldr	r2, [pc, #148]	; (80089b4 <HAL_RCC_OscConfig+0x520>)
 8008920:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008924:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008926:	f7fa fee5 	bl	80036f4 <HAL_GetTick>
 800892a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800892c:	e008      	b.n	8008940 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800892e:	f7fa fee1 	bl	80036f4 <HAL_GetTick>
 8008932:	4602      	mov	r2, r0
 8008934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008936:	1ad3      	subs	r3, r2, r3
 8008938:	2b02      	cmp	r3, #2
 800893a:	d901      	bls.n	8008940 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 800893c:	2303      	movs	r3, #3
 800893e:	e1b2      	b.n	8008ca6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008940:	4b1c      	ldr	r3, [pc, #112]	; (80089b4 <HAL_RCC_OscConfig+0x520>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008948:	2b00      	cmp	r3, #0
 800894a:	d0f0      	beq.n	800892e <HAL_RCC_OscConfig+0x49a>
 800894c:	e018      	b.n	8008980 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800894e:	4b19      	ldr	r3, [pc, #100]	; (80089b4 <HAL_RCC_OscConfig+0x520>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	4a18      	ldr	r2, [pc, #96]	; (80089b4 <HAL_RCC_OscConfig+0x520>)
 8008954:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008958:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800895a:	f7fa fecb 	bl	80036f4 <HAL_GetTick>
 800895e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008960:	e008      	b.n	8008974 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008962:	f7fa fec7 	bl	80036f4 <HAL_GetTick>
 8008966:	4602      	mov	r2, r0
 8008968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800896a:	1ad3      	subs	r3, r2, r3
 800896c:	2b02      	cmp	r3, #2
 800896e:	d901      	bls.n	8008974 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8008970:	2303      	movs	r3, #3
 8008972:	e198      	b.n	8008ca6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008974:	4b0f      	ldr	r3, [pc, #60]	; (80089b4 <HAL_RCC_OscConfig+0x520>)
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800897c:	2b00      	cmp	r3, #0
 800897e:	d1f0      	bne.n	8008962 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	f003 0304 	and.w	r3, r3, #4
 8008988:	2b00      	cmp	r3, #0
 800898a:	f000 8085 	beq.w	8008a98 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800898e:	4b0a      	ldr	r3, [pc, #40]	; (80089b8 <HAL_RCC_OscConfig+0x524>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	4a09      	ldr	r2, [pc, #36]	; (80089b8 <HAL_RCC_OscConfig+0x524>)
 8008994:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008998:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800899a:	f7fa feab 	bl	80036f4 <HAL_GetTick>
 800899e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80089a0:	e00c      	b.n	80089bc <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80089a2:	f7fa fea7 	bl	80036f4 <HAL_GetTick>
 80089a6:	4602      	mov	r2, r0
 80089a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089aa:	1ad3      	subs	r3, r2, r3
 80089ac:	2b64      	cmp	r3, #100	; 0x64
 80089ae:	d905      	bls.n	80089bc <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80089b0:	2303      	movs	r3, #3
 80089b2:	e178      	b.n	8008ca6 <HAL_RCC_OscConfig+0x812>
 80089b4:	58024400 	.word	0x58024400
 80089b8:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80089bc:	4b96      	ldr	r3, [pc, #600]	; (8008c18 <HAL_RCC_OscConfig+0x784>)
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d0ec      	beq.n	80089a2 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	689b      	ldr	r3, [r3, #8]
 80089cc:	2b01      	cmp	r3, #1
 80089ce:	d106      	bne.n	80089de <HAL_RCC_OscConfig+0x54a>
 80089d0:	4b92      	ldr	r3, [pc, #584]	; (8008c1c <HAL_RCC_OscConfig+0x788>)
 80089d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089d4:	4a91      	ldr	r2, [pc, #580]	; (8008c1c <HAL_RCC_OscConfig+0x788>)
 80089d6:	f043 0301 	orr.w	r3, r3, #1
 80089da:	6713      	str	r3, [r2, #112]	; 0x70
 80089dc:	e02d      	b.n	8008a3a <HAL_RCC_OscConfig+0x5a6>
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	689b      	ldr	r3, [r3, #8]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d10c      	bne.n	8008a00 <HAL_RCC_OscConfig+0x56c>
 80089e6:	4b8d      	ldr	r3, [pc, #564]	; (8008c1c <HAL_RCC_OscConfig+0x788>)
 80089e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089ea:	4a8c      	ldr	r2, [pc, #560]	; (8008c1c <HAL_RCC_OscConfig+0x788>)
 80089ec:	f023 0301 	bic.w	r3, r3, #1
 80089f0:	6713      	str	r3, [r2, #112]	; 0x70
 80089f2:	4b8a      	ldr	r3, [pc, #552]	; (8008c1c <HAL_RCC_OscConfig+0x788>)
 80089f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089f6:	4a89      	ldr	r2, [pc, #548]	; (8008c1c <HAL_RCC_OscConfig+0x788>)
 80089f8:	f023 0304 	bic.w	r3, r3, #4
 80089fc:	6713      	str	r3, [r2, #112]	; 0x70
 80089fe:	e01c      	b.n	8008a3a <HAL_RCC_OscConfig+0x5a6>
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	689b      	ldr	r3, [r3, #8]
 8008a04:	2b05      	cmp	r3, #5
 8008a06:	d10c      	bne.n	8008a22 <HAL_RCC_OscConfig+0x58e>
 8008a08:	4b84      	ldr	r3, [pc, #528]	; (8008c1c <HAL_RCC_OscConfig+0x788>)
 8008a0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a0c:	4a83      	ldr	r2, [pc, #524]	; (8008c1c <HAL_RCC_OscConfig+0x788>)
 8008a0e:	f043 0304 	orr.w	r3, r3, #4
 8008a12:	6713      	str	r3, [r2, #112]	; 0x70
 8008a14:	4b81      	ldr	r3, [pc, #516]	; (8008c1c <HAL_RCC_OscConfig+0x788>)
 8008a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a18:	4a80      	ldr	r2, [pc, #512]	; (8008c1c <HAL_RCC_OscConfig+0x788>)
 8008a1a:	f043 0301 	orr.w	r3, r3, #1
 8008a1e:	6713      	str	r3, [r2, #112]	; 0x70
 8008a20:	e00b      	b.n	8008a3a <HAL_RCC_OscConfig+0x5a6>
 8008a22:	4b7e      	ldr	r3, [pc, #504]	; (8008c1c <HAL_RCC_OscConfig+0x788>)
 8008a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a26:	4a7d      	ldr	r2, [pc, #500]	; (8008c1c <HAL_RCC_OscConfig+0x788>)
 8008a28:	f023 0301 	bic.w	r3, r3, #1
 8008a2c:	6713      	str	r3, [r2, #112]	; 0x70
 8008a2e:	4b7b      	ldr	r3, [pc, #492]	; (8008c1c <HAL_RCC_OscConfig+0x788>)
 8008a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a32:	4a7a      	ldr	r2, [pc, #488]	; (8008c1c <HAL_RCC_OscConfig+0x788>)
 8008a34:	f023 0304 	bic.w	r3, r3, #4
 8008a38:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	689b      	ldr	r3, [r3, #8]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d015      	beq.n	8008a6e <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a42:	f7fa fe57 	bl	80036f4 <HAL_GetTick>
 8008a46:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008a48:	e00a      	b.n	8008a60 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008a4a:	f7fa fe53 	bl	80036f4 <HAL_GetTick>
 8008a4e:	4602      	mov	r2, r0
 8008a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a52:	1ad3      	subs	r3, r2, r3
 8008a54:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a58:	4293      	cmp	r3, r2
 8008a5a:	d901      	bls.n	8008a60 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8008a5c:	2303      	movs	r3, #3
 8008a5e:	e122      	b.n	8008ca6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008a60:	4b6e      	ldr	r3, [pc, #440]	; (8008c1c <HAL_RCC_OscConfig+0x788>)
 8008a62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a64:	f003 0302 	and.w	r3, r3, #2
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d0ee      	beq.n	8008a4a <HAL_RCC_OscConfig+0x5b6>
 8008a6c:	e014      	b.n	8008a98 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a6e:	f7fa fe41 	bl	80036f4 <HAL_GetTick>
 8008a72:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008a74:	e00a      	b.n	8008a8c <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008a76:	f7fa fe3d 	bl	80036f4 <HAL_GetTick>
 8008a7a:	4602      	mov	r2, r0
 8008a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a7e:	1ad3      	subs	r3, r2, r3
 8008a80:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a84:	4293      	cmp	r3, r2
 8008a86:	d901      	bls.n	8008a8c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8008a88:	2303      	movs	r3, #3
 8008a8a:	e10c      	b.n	8008ca6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008a8c:	4b63      	ldr	r3, [pc, #396]	; (8008c1c <HAL_RCC_OscConfig+0x788>)
 8008a8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a90:	f003 0302 	and.w	r3, r3, #2
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d1ee      	bne.n	8008a76 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	f000 8101 	beq.w	8008ca4 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008aa2:	4b5e      	ldr	r3, [pc, #376]	; (8008c1c <HAL_RCC_OscConfig+0x788>)
 8008aa4:	691b      	ldr	r3, [r3, #16]
 8008aa6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008aaa:	2b18      	cmp	r3, #24
 8008aac:	f000 80bc 	beq.w	8008c28 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ab4:	2b02      	cmp	r3, #2
 8008ab6:	f040 8095 	bne.w	8008be4 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008aba:	4b58      	ldr	r3, [pc, #352]	; (8008c1c <HAL_RCC_OscConfig+0x788>)
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	4a57      	ldr	r2, [pc, #348]	; (8008c1c <HAL_RCC_OscConfig+0x788>)
 8008ac0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008ac4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ac6:	f7fa fe15 	bl	80036f4 <HAL_GetTick>
 8008aca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008acc:	e008      	b.n	8008ae0 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008ace:	f7fa fe11 	bl	80036f4 <HAL_GetTick>
 8008ad2:	4602      	mov	r2, r0
 8008ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ad6:	1ad3      	subs	r3, r2, r3
 8008ad8:	2b02      	cmp	r3, #2
 8008ada:	d901      	bls.n	8008ae0 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8008adc:	2303      	movs	r3, #3
 8008ade:	e0e2      	b.n	8008ca6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008ae0:	4b4e      	ldr	r3, [pc, #312]	; (8008c1c <HAL_RCC_OscConfig+0x788>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d1f0      	bne.n	8008ace <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008aec:	4b4b      	ldr	r3, [pc, #300]	; (8008c1c <HAL_RCC_OscConfig+0x788>)
 8008aee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008af0:	4b4b      	ldr	r3, [pc, #300]	; (8008c20 <HAL_RCC_OscConfig+0x78c>)
 8008af2:	4013      	ands	r3, r2
 8008af4:	687a      	ldr	r2, [r7, #4]
 8008af6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008af8:	687a      	ldr	r2, [r7, #4]
 8008afa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008afc:	0112      	lsls	r2, r2, #4
 8008afe:	430a      	orrs	r2, r1
 8008b00:	4946      	ldr	r1, [pc, #280]	; (8008c1c <HAL_RCC_OscConfig+0x788>)
 8008b02:	4313      	orrs	r3, r2
 8008b04:	628b      	str	r3, [r1, #40]	; 0x28
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b0a:	3b01      	subs	r3, #1
 8008b0c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b14:	3b01      	subs	r3, #1
 8008b16:	025b      	lsls	r3, r3, #9
 8008b18:	b29b      	uxth	r3, r3
 8008b1a:	431a      	orrs	r2, r3
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b20:	3b01      	subs	r3, #1
 8008b22:	041b      	lsls	r3, r3, #16
 8008b24:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008b28:	431a      	orrs	r2, r3
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b2e:	3b01      	subs	r3, #1
 8008b30:	061b      	lsls	r3, r3, #24
 8008b32:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008b36:	4939      	ldr	r1, [pc, #228]	; (8008c1c <HAL_RCC_OscConfig+0x788>)
 8008b38:	4313      	orrs	r3, r2
 8008b3a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8008b3c:	4b37      	ldr	r3, [pc, #220]	; (8008c1c <HAL_RCC_OscConfig+0x788>)
 8008b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b40:	4a36      	ldr	r2, [pc, #216]	; (8008c1c <HAL_RCC_OscConfig+0x788>)
 8008b42:	f023 0301 	bic.w	r3, r3, #1
 8008b46:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008b48:	4b34      	ldr	r3, [pc, #208]	; (8008c1c <HAL_RCC_OscConfig+0x788>)
 8008b4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b4c:	4b35      	ldr	r3, [pc, #212]	; (8008c24 <HAL_RCC_OscConfig+0x790>)
 8008b4e:	4013      	ands	r3, r2
 8008b50:	687a      	ldr	r2, [r7, #4]
 8008b52:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008b54:	00d2      	lsls	r2, r2, #3
 8008b56:	4931      	ldr	r1, [pc, #196]	; (8008c1c <HAL_RCC_OscConfig+0x788>)
 8008b58:	4313      	orrs	r3, r2
 8008b5a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008b5c:	4b2f      	ldr	r3, [pc, #188]	; (8008c1c <HAL_RCC_OscConfig+0x788>)
 8008b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b60:	f023 020c 	bic.w	r2, r3, #12
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b68:	492c      	ldr	r1, [pc, #176]	; (8008c1c <HAL_RCC_OscConfig+0x788>)
 8008b6a:	4313      	orrs	r3, r2
 8008b6c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008b6e:	4b2b      	ldr	r3, [pc, #172]	; (8008c1c <HAL_RCC_OscConfig+0x788>)
 8008b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b72:	f023 0202 	bic.w	r2, r3, #2
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b7a:	4928      	ldr	r1, [pc, #160]	; (8008c1c <HAL_RCC_OscConfig+0x788>)
 8008b7c:	4313      	orrs	r3, r2
 8008b7e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008b80:	4b26      	ldr	r3, [pc, #152]	; (8008c1c <HAL_RCC_OscConfig+0x788>)
 8008b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b84:	4a25      	ldr	r2, [pc, #148]	; (8008c1c <HAL_RCC_OscConfig+0x788>)
 8008b86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008b8a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b8c:	4b23      	ldr	r3, [pc, #140]	; (8008c1c <HAL_RCC_OscConfig+0x788>)
 8008b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b90:	4a22      	ldr	r2, [pc, #136]	; (8008c1c <HAL_RCC_OscConfig+0x788>)
 8008b92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b96:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008b98:	4b20      	ldr	r3, [pc, #128]	; (8008c1c <HAL_RCC_OscConfig+0x788>)
 8008b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b9c:	4a1f      	ldr	r2, [pc, #124]	; (8008c1c <HAL_RCC_OscConfig+0x788>)
 8008b9e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008ba2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8008ba4:	4b1d      	ldr	r3, [pc, #116]	; (8008c1c <HAL_RCC_OscConfig+0x788>)
 8008ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ba8:	4a1c      	ldr	r2, [pc, #112]	; (8008c1c <HAL_RCC_OscConfig+0x788>)
 8008baa:	f043 0301 	orr.w	r3, r3, #1
 8008bae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008bb0:	4b1a      	ldr	r3, [pc, #104]	; (8008c1c <HAL_RCC_OscConfig+0x788>)
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	4a19      	ldr	r2, [pc, #100]	; (8008c1c <HAL_RCC_OscConfig+0x788>)
 8008bb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008bba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bbc:	f7fa fd9a 	bl	80036f4 <HAL_GetTick>
 8008bc0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008bc2:	e008      	b.n	8008bd6 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008bc4:	f7fa fd96 	bl	80036f4 <HAL_GetTick>
 8008bc8:	4602      	mov	r2, r0
 8008bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bcc:	1ad3      	subs	r3, r2, r3
 8008bce:	2b02      	cmp	r3, #2
 8008bd0:	d901      	bls.n	8008bd6 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8008bd2:	2303      	movs	r3, #3
 8008bd4:	e067      	b.n	8008ca6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008bd6:	4b11      	ldr	r3, [pc, #68]	; (8008c1c <HAL_RCC_OscConfig+0x788>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d0f0      	beq.n	8008bc4 <HAL_RCC_OscConfig+0x730>
 8008be2:	e05f      	b.n	8008ca4 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008be4:	4b0d      	ldr	r3, [pc, #52]	; (8008c1c <HAL_RCC_OscConfig+0x788>)
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	4a0c      	ldr	r2, [pc, #48]	; (8008c1c <HAL_RCC_OscConfig+0x788>)
 8008bea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008bee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bf0:	f7fa fd80 	bl	80036f4 <HAL_GetTick>
 8008bf4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008bf6:	e008      	b.n	8008c0a <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008bf8:	f7fa fd7c 	bl	80036f4 <HAL_GetTick>
 8008bfc:	4602      	mov	r2, r0
 8008bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c00:	1ad3      	subs	r3, r2, r3
 8008c02:	2b02      	cmp	r3, #2
 8008c04:	d901      	bls.n	8008c0a <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8008c06:	2303      	movs	r3, #3
 8008c08:	e04d      	b.n	8008ca6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008c0a:	4b04      	ldr	r3, [pc, #16]	; (8008c1c <HAL_RCC_OscConfig+0x788>)
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d1f0      	bne.n	8008bf8 <HAL_RCC_OscConfig+0x764>
 8008c16:	e045      	b.n	8008ca4 <HAL_RCC_OscConfig+0x810>
 8008c18:	58024800 	.word	0x58024800
 8008c1c:	58024400 	.word	0x58024400
 8008c20:	fffffc0c 	.word	0xfffffc0c
 8008c24:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008c28:	4b21      	ldr	r3, [pc, #132]	; (8008cb0 <HAL_RCC_OscConfig+0x81c>)
 8008c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c2c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008c2e:	4b20      	ldr	r3, [pc, #128]	; (8008cb0 <HAL_RCC_OscConfig+0x81c>)
 8008c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c32:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c38:	2b01      	cmp	r3, #1
 8008c3a:	d031      	beq.n	8008ca0 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008c3c:	693b      	ldr	r3, [r7, #16]
 8008c3e:	f003 0203 	and.w	r2, r3, #3
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008c46:	429a      	cmp	r2, r3
 8008c48:	d12a      	bne.n	8008ca0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008c4a:	693b      	ldr	r3, [r7, #16]
 8008c4c:	091b      	lsrs	r3, r3, #4
 8008c4e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008c56:	429a      	cmp	r2, r3
 8008c58:	d122      	bne.n	8008ca0 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c64:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008c66:	429a      	cmp	r2, r3
 8008c68:	d11a      	bne.n	8008ca0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	0a5b      	lsrs	r3, r3, #9
 8008c6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c76:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008c78:	429a      	cmp	r2, r3
 8008c7a:	d111      	bne.n	8008ca0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	0c1b      	lsrs	r3, r3, #16
 8008c80:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c88:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008c8a:	429a      	cmp	r2, r3
 8008c8c:	d108      	bne.n	8008ca0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	0e1b      	lsrs	r3, r3, #24
 8008c92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c9a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008c9c:	429a      	cmp	r2, r3
 8008c9e:	d001      	beq.n	8008ca4 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8008ca0:	2301      	movs	r3, #1
 8008ca2:	e000      	b.n	8008ca6 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8008ca4:	2300      	movs	r3, #0
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	3730      	adds	r7, #48	; 0x30
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bd80      	pop	{r7, pc}
 8008cae:	bf00      	nop
 8008cb0:	58024400 	.word	0x58024400

08008cb4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b086      	sub	sp, #24
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
 8008cbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d101      	bne.n	8008cc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008cc4:	2301      	movs	r3, #1
 8008cc6:	e19c      	b.n	8009002 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008cc8:	4b8a      	ldr	r3, [pc, #552]	; (8008ef4 <HAL_RCC_ClockConfig+0x240>)
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	f003 030f 	and.w	r3, r3, #15
 8008cd0:	683a      	ldr	r2, [r7, #0]
 8008cd2:	429a      	cmp	r2, r3
 8008cd4:	d910      	bls.n	8008cf8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008cd6:	4b87      	ldr	r3, [pc, #540]	; (8008ef4 <HAL_RCC_ClockConfig+0x240>)
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f023 020f 	bic.w	r2, r3, #15
 8008cde:	4985      	ldr	r1, [pc, #532]	; (8008ef4 <HAL_RCC_ClockConfig+0x240>)
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	4313      	orrs	r3, r2
 8008ce4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008ce6:	4b83      	ldr	r3, [pc, #524]	; (8008ef4 <HAL_RCC_ClockConfig+0x240>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	f003 030f 	and.w	r3, r3, #15
 8008cee:	683a      	ldr	r2, [r7, #0]
 8008cf0:	429a      	cmp	r2, r3
 8008cf2:	d001      	beq.n	8008cf8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008cf4:	2301      	movs	r3, #1
 8008cf6:	e184      	b.n	8009002 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	f003 0304 	and.w	r3, r3, #4
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d010      	beq.n	8008d26 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	691a      	ldr	r2, [r3, #16]
 8008d08:	4b7b      	ldr	r3, [pc, #492]	; (8008ef8 <HAL_RCC_ClockConfig+0x244>)
 8008d0a:	699b      	ldr	r3, [r3, #24]
 8008d0c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008d10:	429a      	cmp	r2, r3
 8008d12:	d908      	bls.n	8008d26 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008d14:	4b78      	ldr	r3, [pc, #480]	; (8008ef8 <HAL_RCC_ClockConfig+0x244>)
 8008d16:	699b      	ldr	r3, [r3, #24]
 8008d18:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	691b      	ldr	r3, [r3, #16]
 8008d20:	4975      	ldr	r1, [pc, #468]	; (8008ef8 <HAL_RCC_ClockConfig+0x244>)
 8008d22:	4313      	orrs	r3, r2
 8008d24:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f003 0308 	and.w	r3, r3, #8
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d010      	beq.n	8008d54 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	695a      	ldr	r2, [r3, #20]
 8008d36:	4b70      	ldr	r3, [pc, #448]	; (8008ef8 <HAL_RCC_ClockConfig+0x244>)
 8008d38:	69db      	ldr	r3, [r3, #28]
 8008d3a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008d3e:	429a      	cmp	r2, r3
 8008d40:	d908      	bls.n	8008d54 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008d42:	4b6d      	ldr	r3, [pc, #436]	; (8008ef8 <HAL_RCC_ClockConfig+0x244>)
 8008d44:	69db      	ldr	r3, [r3, #28]
 8008d46:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	695b      	ldr	r3, [r3, #20]
 8008d4e:	496a      	ldr	r1, [pc, #424]	; (8008ef8 <HAL_RCC_ClockConfig+0x244>)
 8008d50:	4313      	orrs	r3, r2
 8008d52:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f003 0310 	and.w	r3, r3, #16
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d010      	beq.n	8008d82 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	699a      	ldr	r2, [r3, #24]
 8008d64:	4b64      	ldr	r3, [pc, #400]	; (8008ef8 <HAL_RCC_ClockConfig+0x244>)
 8008d66:	69db      	ldr	r3, [r3, #28]
 8008d68:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008d6c:	429a      	cmp	r2, r3
 8008d6e:	d908      	bls.n	8008d82 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008d70:	4b61      	ldr	r3, [pc, #388]	; (8008ef8 <HAL_RCC_ClockConfig+0x244>)
 8008d72:	69db      	ldr	r3, [r3, #28]
 8008d74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	699b      	ldr	r3, [r3, #24]
 8008d7c:	495e      	ldr	r1, [pc, #376]	; (8008ef8 <HAL_RCC_ClockConfig+0x244>)
 8008d7e:	4313      	orrs	r3, r2
 8008d80:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f003 0320 	and.w	r3, r3, #32
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d010      	beq.n	8008db0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	69da      	ldr	r2, [r3, #28]
 8008d92:	4b59      	ldr	r3, [pc, #356]	; (8008ef8 <HAL_RCC_ClockConfig+0x244>)
 8008d94:	6a1b      	ldr	r3, [r3, #32]
 8008d96:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008d9a:	429a      	cmp	r2, r3
 8008d9c:	d908      	bls.n	8008db0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008d9e:	4b56      	ldr	r3, [pc, #344]	; (8008ef8 <HAL_RCC_ClockConfig+0x244>)
 8008da0:	6a1b      	ldr	r3, [r3, #32]
 8008da2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	69db      	ldr	r3, [r3, #28]
 8008daa:	4953      	ldr	r1, [pc, #332]	; (8008ef8 <HAL_RCC_ClockConfig+0x244>)
 8008dac:	4313      	orrs	r3, r2
 8008dae:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f003 0302 	and.w	r3, r3, #2
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d010      	beq.n	8008dde <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	68da      	ldr	r2, [r3, #12]
 8008dc0:	4b4d      	ldr	r3, [pc, #308]	; (8008ef8 <HAL_RCC_ClockConfig+0x244>)
 8008dc2:	699b      	ldr	r3, [r3, #24]
 8008dc4:	f003 030f 	and.w	r3, r3, #15
 8008dc8:	429a      	cmp	r2, r3
 8008dca:	d908      	bls.n	8008dde <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008dcc:	4b4a      	ldr	r3, [pc, #296]	; (8008ef8 <HAL_RCC_ClockConfig+0x244>)
 8008dce:	699b      	ldr	r3, [r3, #24]
 8008dd0:	f023 020f 	bic.w	r2, r3, #15
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	68db      	ldr	r3, [r3, #12]
 8008dd8:	4947      	ldr	r1, [pc, #284]	; (8008ef8 <HAL_RCC_ClockConfig+0x244>)
 8008dda:	4313      	orrs	r3, r2
 8008ddc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f003 0301 	and.w	r3, r3, #1
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d055      	beq.n	8008e96 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008dea:	4b43      	ldr	r3, [pc, #268]	; (8008ef8 <HAL_RCC_ClockConfig+0x244>)
 8008dec:	699b      	ldr	r3, [r3, #24]
 8008dee:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	689b      	ldr	r3, [r3, #8]
 8008df6:	4940      	ldr	r1, [pc, #256]	; (8008ef8 <HAL_RCC_ClockConfig+0x244>)
 8008df8:	4313      	orrs	r3, r2
 8008dfa:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	685b      	ldr	r3, [r3, #4]
 8008e00:	2b02      	cmp	r3, #2
 8008e02:	d107      	bne.n	8008e14 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008e04:	4b3c      	ldr	r3, [pc, #240]	; (8008ef8 <HAL_RCC_ClockConfig+0x244>)
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d121      	bne.n	8008e54 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008e10:	2301      	movs	r3, #1
 8008e12:	e0f6      	b.n	8009002 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	685b      	ldr	r3, [r3, #4]
 8008e18:	2b03      	cmp	r3, #3
 8008e1a:	d107      	bne.n	8008e2c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008e1c:	4b36      	ldr	r3, [pc, #216]	; (8008ef8 <HAL_RCC_ClockConfig+0x244>)
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d115      	bne.n	8008e54 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008e28:	2301      	movs	r3, #1
 8008e2a:	e0ea      	b.n	8009002 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	685b      	ldr	r3, [r3, #4]
 8008e30:	2b01      	cmp	r3, #1
 8008e32:	d107      	bne.n	8008e44 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008e34:	4b30      	ldr	r3, [pc, #192]	; (8008ef8 <HAL_RCC_ClockConfig+0x244>)
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d109      	bne.n	8008e54 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008e40:	2301      	movs	r3, #1
 8008e42:	e0de      	b.n	8009002 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008e44:	4b2c      	ldr	r3, [pc, #176]	; (8008ef8 <HAL_RCC_ClockConfig+0x244>)
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f003 0304 	and.w	r3, r3, #4
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d101      	bne.n	8008e54 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008e50:	2301      	movs	r3, #1
 8008e52:	e0d6      	b.n	8009002 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008e54:	4b28      	ldr	r3, [pc, #160]	; (8008ef8 <HAL_RCC_ClockConfig+0x244>)
 8008e56:	691b      	ldr	r3, [r3, #16]
 8008e58:	f023 0207 	bic.w	r2, r3, #7
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	685b      	ldr	r3, [r3, #4]
 8008e60:	4925      	ldr	r1, [pc, #148]	; (8008ef8 <HAL_RCC_ClockConfig+0x244>)
 8008e62:	4313      	orrs	r3, r2
 8008e64:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e66:	f7fa fc45 	bl	80036f4 <HAL_GetTick>
 8008e6a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008e6c:	e00a      	b.n	8008e84 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008e6e:	f7fa fc41 	bl	80036f4 <HAL_GetTick>
 8008e72:	4602      	mov	r2, r0
 8008e74:	697b      	ldr	r3, [r7, #20]
 8008e76:	1ad3      	subs	r3, r2, r3
 8008e78:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e7c:	4293      	cmp	r3, r2
 8008e7e:	d901      	bls.n	8008e84 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8008e80:	2303      	movs	r3, #3
 8008e82:	e0be      	b.n	8009002 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008e84:	4b1c      	ldr	r3, [pc, #112]	; (8008ef8 <HAL_RCC_ClockConfig+0x244>)
 8008e86:	691b      	ldr	r3, [r3, #16]
 8008e88:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	685b      	ldr	r3, [r3, #4]
 8008e90:	00db      	lsls	r3, r3, #3
 8008e92:	429a      	cmp	r2, r3
 8008e94:	d1eb      	bne.n	8008e6e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	f003 0302 	and.w	r3, r3, #2
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d010      	beq.n	8008ec4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	68da      	ldr	r2, [r3, #12]
 8008ea6:	4b14      	ldr	r3, [pc, #80]	; (8008ef8 <HAL_RCC_ClockConfig+0x244>)
 8008ea8:	699b      	ldr	r3, [r3, #24]
 8008eaa:	f003 030f 	and.w	r3, r3, #15
 8008eae:	429a      	cmp	r2, r3
 8008eb0:	d208      	bcs.n	8008ec4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008eb2:	4b11      	ldr	r3, [pc, #68]	; (8008ef8 <HAL_RCC_ClockConfig+0x244>)
 8008eb4:	699b      	ldr	r3, [r3, #24]
 8008eb6:	f023 020f 	bic.w	r2, r3, #15
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	68db      	ldr	r3, [r3, #12]
 8008ebe:	490e      	ldr	r1, [pc, #56]	; (8008ef8 <HAL_RCC_ClockConfig+0x244>)
 8008ec0:	4313      	orrs	r3, r2
 8008ec2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008ec4:	4b0b      	ldr	r3, [pc, #44]	; (8008ef4 <HAL_RCC_ClockConfig+0x240>)
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	f003 030f 	and.w	r3, r3, #15
 8008ecc:	683a      	ldr	r2, [r7, #0]
 8008ece:	429a      	cmp	r2, r3
 8008ed0:	d214      	bcs.n	8008efc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008ed2:	4b08      	ldr	r3, [pc, #32]	; (8008ef4 <HAL_RCC_ClockConfig+0x240>)
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	f023 020f 	bic.w	r2, r3, #15
 8008eda:	4906      	ldr	r1, [pc, #24]	; (8008ef4 <HAL_RCC_ClockConfig+0x240>)
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	4313      	orrs	r3, r2
 8008ee0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008ee2:	4b04      	ldr	r3, [pc, #16]	; (8008ef4 <HAL_RCC_ClockConfig+0x240>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f003 030f 	and.w	r3, r3, #15
 8008eea:	683a      	ldr	r2, [r7, #0]
 8008eec:	429a      	cmp	r2, r3
 8008eee:	d005      	beq.n	8008efc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008ef0:	2301      	movs	r3, #1
 8008ef2:	e086      	b.n	8009002 <HAL_RCC_ClockConfig+0x34e>
 8008ef4:	52002000 	.word	0x52002000
 8008ef8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	f003 0304 	and.w	r3, r3, #4
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d010      	beq.n	8008f2a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	691a      	ldr	r2, [r3, #16]
 8008f0c:	4b3f      	ldr	r3, [pc, #252]	; (800900c <HAL_RCC_ClockConfig+0x358>)
 8008f0e:	699b      	ldr	r3, [r3, #24]
 8008f10:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008f14:	429a      	cmp	r2, r3
 8008f16:	d208      	bcs.n	8008f2a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008f18:	4b3c      	ldr	r3, [pc, #240]	; (800900c <HAL_RCC_ClockConfig+0x358>)
 8008f1a:	699b      	ldr	r3, [r3, #24]
 8008f1c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	691b      	ldr	r3, [r3, #16]
 8008f24:	4939      	ldr	r1, [pc, #228]	; (800900c <HAL_RCC_ClockConfig+0x358>)
 8008f26:	4313      	orrs	r3, r2
 8008f28:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f003 0308 	and.w	r3, r3, #8
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d010      	beq.n	8008f58 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	695a      	ldr	r2, [r3, #20]
 8008f3a:	4b34      	ldr	r3, [pc, #208]	; (800900c <HAL_RCC_ClockConfig+0x358>)
 8008f3c:	69db      	ldr	r3, [r3, #28]
 8008f3e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008f42:	429a      	cmp	r2, r3
 8008f44:	d208      	bcs.n	8008f58 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008f46:	4b31      	ldr	r3, [pc, #196]	; (800900c <HAL_RCC_ClockConfig+0x358>)
 8008f48:	69db      	ldr	r3, [r3, #28]
 8008f4a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	695b      	ldr	r3, [r3, #20]
 8008f52:	492e      	ldr	r1, [pc, #184]	; (800900c <HAL_RCC_ClockConfig+0x358>)
 8008f54:	4313      	orrs	r3, r2
 8008f56:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f003 0310 	and.w	r3, r3, #16
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d010      	beq.n	8008f86 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	699a      	ldr	r2, [r3, #24]
 8008f68:	4b28      	ldr	r3, [pc, #160]	; (800900c <HAL_RCC_ClockConfig+0x358>)
 8008f6a:	69db      	ldr	r3, [r3, #28]
 8008f6c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008f70:	429a      	cmp	r2, r3
 8008f72:	d208      	bcs.n	8008f86 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008f74:	4b25      	ldr	r3, [pc, #148]	; (800900c <HAL_RCC_ClockConfig+0x358>)
 8008f76:	69db      	ldr	r3, [r3, #28]
 8008f78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	699b      	ldr	r3, [r3, #24]
 8008f80:	4922      	ldr	r1, [pc, #136]	; (800900c <HAL_RCC_ClockConfig+0x358>)
 8008f82:	4313      	orrs	r3, r2
 8008f84:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f003 0320 	and.w	r3, r3, #32
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d010      	beq.n	8008fb4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	69da      	ldr	r2, [r3, #28]
 8008f96:	4b1d      	ldr	r3, [pc, #116]	; (800900c <HAL_RCC_ClockConfig+0x358>)
 8008f98:	6a1b      	ldr	r3, [r3, #32]
 8008f9a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008f9e:	429a      	cmp	r2, r3
 8008fa0:	d208      	bcs.n	8008fb4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008fa2:	4b1a      	ldr	r3, [pc, #104]	; (800900c <HAL_RCC_ClockConfig+0x358>)
 8008fa4:	6a1b      	ldr	r3, [r3, #32]
 8008fa6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	69db      	ldr	r3, [r3, #28]
 8008fae:	4917      	ldr	r1, [pc, #92]	; (800900c <HAL_RCC_ClockConfig+0x358>)
 8008fb0:	4313      	orrs	r3, r2
 8008fb2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008fb4:	f000 f834 	bl	8009020 <HAL_RCC_GetSysClockFreq>
 8008fb8:	4602      	mov	r2, r0
 8008fba:	4b14      	ldr	r3, [pc, #80]	; (800900c <HAL_RCC_ClockConfig+0x358>)
 8008fbc:	699b      	ldr	r3, [r3, #24]
 8008fbe:	0a1b      	lsrs	r3, r3, #8
 8008fc0:	f003 030f 	and.w	r3, r3, #15
 8008fc4:	4912      	ldr	r1, [pc, #72]	; (8009010 <HAL_RCC_ClockConfig+0x35c>)
 8008fc6:	5ccb      	ldrb	r3, [r1, r3]
 8008fc8:	f003 031f 	and.w	r3, r3, #31
 8008fcc:	fa22 f303 	lsr.w	r3, r2, r3
 8008fd0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008fd2:	4b0e      	ldr	r3, [pc, #56]	; (800900c <HAL_RCC_ClockConfig+0x358>)
 8008fd4:	699b      	ldr	r3, [r3, #24]
 8008fd6:	f003 030f 	and.w	r3, r3, #15
 8008fda:	4a0d      	ldr	r2, [pc, #52]	; (8009010 <HAL_RCC_ClockConfig+0x35c>)
 8008fdc:	5cd3      	ldrb	r3, [r2, r3]
 8008fde:	f003 031f 	and.w	r3, r3, #31
 8008fe2:	693a      	ldr	r2, [r7, #16]
 8008fe4:	fa22 f303 	lsr.w	r3, r2, r3
 8008fe8:	4a0a      	ldr	r2, [pc, #40]	; (8009014 <HAL_RCC_ClockConfig+0x360>)
 8008fea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008fec:	4a0a      	ldr	r2, [pc, #40]	; (8009018 <HAL_RCC_ClockConfig+0x364>)
 8008fee:	693b      	ldr	r3, [r7, #16]
 8008ff0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8008ff2:	4b0a      	ldr	r3, [pc, #40]	; (800901c <HAL_RCC_ClockConfig+0x368>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	f7fa fb32 	bl	8003660 <HAL_InitTick>
 8008ffc:	4603      	mov	r3, r0
 8008ffe:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009000:	7bfb      	ldrb	r3, [r7, #15]
}
 8009002:	4618      	mov	r0, r3
 8009004:	3718      	adds	r7, #24
 8009006:	46bd      	mov	sp, r7
 8009008:	bd80      	pop	{r7, pc}
 800900a:	bf00      	nop
 800900c:	58024400 	.word	0x58024400
 8009010:	08011610 	.word	0x08011610
 8009014:	24000004 	.word	0x24000004
 8009018:	24000000 	.word	0x24000000
 800901c:	24000008 	.word	0x24000008

08009020 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009020:	b480      	push	{r7}
 8009022:	b089      	sub	sp, #36	; 0x24
 8009024:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009026:	4bb3      	ldr	r3, [pc, #716]	; (80092f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009028:	691b      	ldr	r3, [r3, #16]
 800902a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800902e:	2b18      	cmp	r3, #24
 8009030:	f200 8155 	bhi.w	80092de <HAL_RCC_GetSysClockFreq+0x2be>
 8009034:	a201      	add	r2, pc, #4	; (adr r2, 800903c <HAL_RCC_GetSysClockFreq+0x1c>)
 8009036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800903a:	bf00      	nop
 800903c:	080090a1 	.word	0x080090a1
 8009040:	080092df 	.word	0x080092df
 8009044:	080092df 	.word	0x080092df
 8009048:	080092df 	.word	0x080092df
 800904c:	080092df 	.word	0x080092df
 8009050:	080092df 	.word	0x080092df
 8009054:	080092df 	.word	0x080092df
 8009058:	080092df 	.word	0x080092df
 800905c:	080090c7 	.word	0x080090c7
 8009060:	080092df 	.word	0x080092df
 8009064:	080092df 	.word	0x080092df
 8009068:	080092df 	.word	0x080092df
 800906c:	080092df 	.word	0x080092df
 8009070:	080092df 	.word	0x080092df
 8009074:	080092df 	.word	0x080092df
 8009078:	080092df 	.word	0x080092df
 800907c:	080090cd 	.word	0x080090cd
 8009080:	080092df 	.word	0x080092df
 8009084:	080092df 	.word	0x080092df
 8009088:	080092df 	.word	0x080092df
 800908c:	080092df 	.word	0x080092df
 8009090:	080092df 	.word	0x080092df
 8009094:	080092df 	.word	0x080092df
 8009098:	080092df 	.word	0x080092df
 800909c:	080090d3 	.word	0x080090d3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80090a0:	4b94      	ldr	r3, [pc, #592]	; (80092f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f003 0320 	and.w	r3, r3, #32
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d009      	beq.n	80090c0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80090ac:	4b91      	ldr	r3, [pc, #580]	; (80092f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	08db      	lsrs	r3, r3, #3
 80090b2:	f003 0303 	and.w	r3, r3, #3
 80090b6:	4a90      	ldr	r2, [pc, #576]	; (80092f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80090b8:	fa22 f303 	lsr.w	r3, r2, r3
 80090bc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80090be:	e111      	b.n	80092e4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80090c0:	4b8d      	ldr	r3, [pc, #564]	; (80092f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80090c2:	61bb      	str	r3, [r7, #24]
    break;
 80090c4:	e10e      	b.n	80092e4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80090c6:	4b8d      	ldr	r3, [pc, #564]	; (80092fc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80090c8:	61bb      	str	r3, [r7, #24]
    break;
 80090ca:	e10b      	b.n	80092e4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80090cc:	4b8c      	ldr	r3, [pc, #560]	; (8009300 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80090ce:	61bb      	str	r3, [r7, #24]
    break;
 80090d0:	e108      	b.n	80092e4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80090d2:	4b88      	ldr	r3, [pc, #544]	; (80092f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80090d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090d6:	f003 0303 	and.w	r3, r3, #3
 80090da:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80090dc:	4b85      	ldr	r3, [pc, #532]	; (80092f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80090de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090e0:	091b      	lsrs	r3, r3, #4
 80090e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80090e6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80090e8:	4b82      	ldr	r3, [pc, #520]	; (80092f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80090ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090ec:	f003 0301 	and.w	r3, r3, #1
 80090f0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80090f2:	4b80      	ldr	r3, [pc, #512]	; (80092f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80090f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090f6:	08db      	lsrs	r3, r3, #3
 80090f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80090fc:	68fa      	ldr	r2, [r7, #12]
 80090fe:	fb02 f303 	mul.w	r3, r2, r3
 8009102:	ee07 3a90 	vmov	s15, r3
 8009106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800910a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800910e:	693b      	ldr	r3, [r7, #16]
 8009110:	2b00      	cmp	r3, #0
 8009112:	f000 80e1 	beq.w	80092d8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8009116:	697b      	ldr	r3, [r7, #20]
 8009118:	2b02      	cmp	r3, #2
 800911a:	f000 8083 	beq.w	8009224 <HAL_RCC_GetSysClockFreq+0x204>
 800911e:	697b      	ldr	r3, [r7, #20]
 8009120:	2b02      	cmp	r3, #2
 8009122:	f200 80a1 	bhi.w	8009268 <HAL_RCC_GetSysClockFreq+0x248>
 8009126:	697b      	ldr	r3, [r7, #20]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d003      	beq.n	8009134 <HAL_RCC_GetSysClockFreq+0x114>
 800912c:	697b      	ldr	r3, [r7, #20]
 800912e:	2b01      	cmp	r3, #1
 8009130:	d056      	beq.n	80091e0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8009132:	e099      	b.n	8009268 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009134:	4b6f      	ldr	r3, [pc, #444]	; (80092f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	f003 0320 	and.w	r3, r3, #32
 800913c:	2b00      	cmp	r3, #0
 800913e:	d02d      	beq.n	800919c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009140:	4b6c      	ldr	r3, [pc, #432]	; (80092f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	08db      	lsrs	r3, r3, #3
 8009146:	f003 0303 	and.w	r3, r3, #3
 800914a:	4a6b      	ldr	r2, [pc, #428]	; (80092f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800914c:	fa22 f303 	lsr.w	r3, r2, r3
 8009150:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	ee07 3a90 	vmov	s15, r3
 8009158:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800915c:	693b      	ldr	r3, [r7, #16]
 800915e:	ee07 3a90 	vmov	s15, r3
 8009162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009166:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800916a:	4b62      	ldr	r3, [pc, #392]	; (80092f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800916c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800916e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009172:	ee07 3a90 	vmov	s15, r3
 8009176:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800917a:	ed97 6a02 	vldr	s12, [r7, #8]
 800917e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8009304 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009182:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009186:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800918a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800918e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009192:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009196:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800919a:	e087      	b.n	80092ac <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800919c:	693b      	ldr	r3, [r7, #16]
 800919e:	ee07 3a90 	vmov	s15, r3
 80091a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091a6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8009308 <HAL_RCC_GetSysClockFreq+0x2e8>
 80091aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091ae:	4b51      	ldr	r3, [pc, #324]	; (80092f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80091b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091b6:	ee07 3a90 	vmov	s15, r3
 80091ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091be:	ed97 6a02 	vldr	s12, [r7, #8]
 80091c2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8009304 <HAL_RCC_GetSysClockFreq+0x2e4>
 80091c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80091d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80091de:	e065      	b.n	80092ac <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80091e0:	693b      	ldr	r3, [r7, #16]
 80091e2:	ee07 3a90 	vmov	s15, r3
 80091e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091ea:	eddf 6a48 	vldr	s13, [pc, #288]	; 800930c <HAL_RCC_GetSysClockFreq+0x2ec>
 80091ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091f2:	4b40      	ldr	r3, [pc, #256]	; (80092f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80091f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091fa:	ee07 3a90 	vmov	s15, r3
 80091fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009202:	ed97 6a02 	vldr	s12, [r7, #8]
 8009206:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8009304 <HAL_RCC_GetSysClockFreq+0x2e4>
 800920a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800920e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009212:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009216:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800921a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800921e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009222:	e043      	b.n	80092ac <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009224:	693b      	ldr	r3, [r7, #16]
 8009226:	ee07 3a90 	vmov	s15, r3
 800922a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800922e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8009310 <HAL_RCC_GetSysClockFreq+0x2f0>
 8009232:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009236:	4b2f      	ldr	r3, [pc, #188]	; (80092f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800923a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800923e:	ee07 3a90 	vmov	s15, r3
 8009242:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009246:	ed97 6a02 	vldr	s12, [r7, #8]
 800924a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8009304 <HAL_RCC_GetSysClockFreq+0x2e4>
 800924e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009252:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009256:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800925a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800925e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009262:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009266:	e021      	b.n	80092ac <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009268:	693b      	ldr	r3, [r7, #16]
 800926a:	ee07 3a90 	vmov	s15, r3
 800926e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009272:	eddf 6a26 	vldr	s13, [pc, #152]	; 800930c <HAL_RCC_GetSysClockFreq+0x2ec>
 8009276:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800927a:	4b1e      	ldr	r3, [pc, #120]	; (80092f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800927c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800927e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009282:	ee07 3a90 	vmov	s15, r3
 8009286:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800928a:	ed97 6a02 	vldr	s12, [r7, #8]
 800928e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8009304 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009292:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009296:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800929a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800929e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80092aa:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80092ac:	4b11      	ldr	r3, [pc, #68]	; (80092f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80092ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092b0:	0a5b      	lsrs	r3, r3, #9
 80092b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092b6:	3301      	adds	r3, #1
 80092b8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	ee07 3a90 	vmov	s15, r3
 80092c0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80092c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80092c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80092cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80092d0:	ee17 3a90 	vmov	r3, s15
 80092d4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80092d6:	e005      	b.n	80092e4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80092d8:	2300      	movs	r3, #0
 80092da:	61bb      	str	r3, [r7, #24]
    break;
 80092dc:	e002      	b.n	80092e4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80092de:	4b07      	ldr	r3, [pc, #28]	; (80092fc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80092e0:	61bb      	str	r3, [r7, #24]
    break;
 80092e2:	bf00      	nop
  }

  return sysclockfreq;
 80092e4:	69bb      	ldr	r3, [r7, #24]
}
 80092e6:	4618      	mov	r0, r3
 80092e8:	3724      	adds	r7, #36	; 0x24
 80092ea:	46bd      	mov	sp, r7
 80092ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f0:	4770      	bx	lr
 80092f2:	bf00      	nop
 80092f4:	58024400 	.word	0x58024400
 80092f8:	03d09000 	.word	0x03d09000
 80092fc:	003d0900 	.word	0x003d0900
 8009300:	02dc6c00 	.word	0x02dc6c00
 8009304:	46000000 	.word	0x46000000
 8009308:	4c742400 	.word	0x4c742400
 800930c:	4a742400 	.word	0x4a742400
 8009310:	4c371b00 	.word	0x4c371b00

08009314 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b082      	sub	sp, #8
 8009318:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800931a:	f7ff fe81 	bl	8009020 <HAL_RCC_GetSysClockFreq>
 800931e:	4602      	mov	r2, r0
 8009320:	4b10      	ldr	r3, [pc, #64]	; (8009364 <HAL_RCC_GetHCLKFreq+0x50>)
 8009322:	699b      	ldr	r3, [r3, #24]
 8009324:	0a1b      	lsrs	r3, r3, #8
 8009326:	f003 030f 	and.w	r3, r3, #15
 800932a:	490f      	ldr	r1, [pc, #60]	; (8009368 <HAL_RCC_GetHCLKFreq+0x54>)
 800932c:	5ccb      	ldrb	r3, [r1, r3]
 800932e:	f003 031f 	and.w	r3, r3, #31
 8009332:	fa22 f303 	lsr.w	r3, r2, r3
 8009336:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009338:	4b0a      	ldr	r3, [pc, #40]	; (8009364 <HAL_RCC_GetHCLKFreq+0x50>)
 800933a:	699b      	ldr	r3, [r3, #24]
 800933c:	f003 030f 	and.w	r3, r3, #15
 8009340:	4a09      	ldr	r2, [pc, #36]	; (8009368 <HAL_RCC_GetHCLKFreq+0x54>)
 8009342:	5cd3      	ldrb	r3, [r2, r3]
 8009344:	f003 031f 	and.w	r3, r3, #31
 8009348:	687a      	ldr	r2, [r7, #4]
 800934a:	fa22 f303 	lsr.w	r3, r2, r3
 800934e:	4a07      	ldr	r2, [pc, #28]	; (800936c <HAL_RCC_GetHCLKFreq+0x58>)
 8009350:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009352:	4a07      	ldr	r2, [pc, #28]	; (8009370 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009358:	4b04      	ldr	r3, [pc, #16]	; (800936c <HAL_RCC_GetHCLKFreq+0x58>)
 800935a:	681b      	ldr	r3, [r3, #0]
}
 800935c:	4618      	mov	r0, r3
 800935e:	3708      	adds	r7, #8
 8009360:	46bd      	mov	sp, r7
 8009362:	bd80      	pop	{r7, pc}
 8009364:	58024400 	.word	0x58024400
 8009368:	08011610 	.word	0x08011610
 800936c:	24000004 	.word	0x24000004
 8009370:	24000000 	.word	0x24000000

08009374 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009374:	b580      	push	{r7, lr}
 8009376:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009378:	f7ff ffcc 	bl	8009314 <HAL_RCC_GetHCLKFreq>
 800937c:	4602      	mov	r2, r0
 800937e:	4b06      	ldr	r3, [pc, #24]	; (8009398 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009380:	69db      	ldr	r3, [r3, #28]
 8009382:	091b      	lsrs	r3, r3, #4
 8009384:	f003 0307 	and.w	r3, r3, #7
 8009388:	4904      	ldr	r1, [pc, #16]	; (800939c <HAL_RCC_GetPCLK1Freq+0x28>)
 800938a:	5ccb      	ldrb	r3, [r1, r3]
 800938c:	f003 031f 	and.w	r3, r3, #31
 8009390:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009394:	4618      	mov	r0, r3
 8009396:	bd80      	pop	{r7, pc}
 8009398:	58024400 	.word	0x58024400
 800939c:	08011610 	.word	0x08011610

080093a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80093a4:	f7ff ffb6 	bl	8009314 <HAL_RCC_GetHCLKFreq>
 80093a8:	4602      	mov	r2, r0
 80093aa:	4b06      	ldr	r3, [pc, #24]	; (80093c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80093ac:	69db      	ldr	r3, [r3, #28]
 80093ae:	0a1b      	lsrs	r3, r3, #8
 80093b0:	f003 0307 	and.w	r3, r3, #7
 80093b4:	4904      	ldr	r1, [pc, #16]	; (80093c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80093b6:	5ccb      	ldrb	r3, [r1, r3]
 80093b8:	f003 031f 	and.w	r3, r3, #31
 80093bc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80093c0:	4618      	mov	r0, r3
 80093c2:	bd80      	pop	{r7, pc}
 80093c4:	58024400 	.word	0x58024400
 80093c8:	08011610 	.word	0x08011610

080093cc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b086      	sub	sp, #24
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80093d4:	2300      	movs	r3, #0
 80093d6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80093d8:	2300      	movs	r3, #0
 80093da:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d03f      	beq.n	8009468 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80093ec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80093f0:	d02a      	beq.n	8009448 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80093f2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80093f6:	d824      	bhi.n	8009442 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80093f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80093fc:	d018      	beq.n	8009430 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80093fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009402:	d81e      	bhi.n	8009442 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009404:	2b00      	cmp	r3, #0
 8009406:	d003      	beq.n	8009410 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8009408:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800940c:	d007      	beq.n	800941e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800940e:	e018      	b.n	8009442 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009410:	4bab      	ldr	r3, [pc, #684]	; (80096c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009414:	4aaa      	ldr	r2, [pc, #680]	; (80096c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009416:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800941a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800941c:	e015      	b.n	800944a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	3304      	adds	r3, #4
 8009422:	2102      	movs	r1, #2
 8009424:	4618      	mov	r0, r3
 8009426:	f001 fff3 	bl	800b410 <RCCEx_PLL2_Config>
 800942a:	4603      	mov	r3, r0
 800942c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800942e:	e00c      	b.n	800944a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	3324      	adds	r3, #36	; 0x24
 8009434:	2102      	movs	r1, #2
 8009436:	4618      	mov	r0, r3
 8009438:	f002 f89c 	bl	800b574 <RCCEx_PLL3_Config>
 800943c:	4603      	mov	r3, r0
 800943e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009440:	e003      	b.n	800944a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009442:	2301      	movs	r3, #1
 8009444:	75fb      	strb	r3, [r7, #23]
      break;
 8009446:	e000      	b.n	800944a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8009448:	bf00      	nop
    }

    if(ret == HAL_OK)
 800944a:	7dfb      	ldrb	r3, [r7, #23]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d109      	bne.n	8009464 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009450:	4b9b      	ldr	r3, [pc, #620]	; (80096c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009452:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009454:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800945c:	4998      	ldr	r1, [pc, #608]	; (80096c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800945e:	4313      	orrs	r3, r2
 8009460:	650b      	str	r3, [r1, #80]	; 0x50
 8009462:	e001      	b.n	8009468 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009464:	7dfb      	ldrb	r3, [r7, #23]
 8009466:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009470:	2b00      	cmp	r3, #0
 8009472:	d03d      	beq.n	80094f0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009478:	2b04      	cmp	r3, #4
 800947a:	d826      	bhi.n	80094ca <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800947c:	a201      	add	r2, pc, #4	; (adr r2, 8009484 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800947e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009482:	bf00      	nop
 8009484:	08009499 	.word	0x08009499
 8009488:	080094a7 	.word	0x080094a7
 800948c:	080094b9 	.word	0x080094b9
 8009490:	080094d1 	.word	0x080094d1
 8009494:	080094d1 	.word	0x080094d1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009498:	4b89      	ldr	r3, [pc, #548]	; (80096c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800949a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800949c:	4a88      	ldr	r2, [pc, #544]	; (80096c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800949e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80094a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80094a4:	e015      	b.n	80094d2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	3304      	adds	r3, #4
 80094aa:	2100      	movs	r1, #0
 80094ac:	4618      	mov	r0, r3
 80094ae:	f001 ffaf 	bl	800b410 <RCCEx_PLL2_Config>
 80094b2:	4603      	mov	r3, r0
 80094b4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80094b6:	e00c      	b.n	80094d2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	3324      	adds	r3, #36	; 0x24
 80094bc:	2100      	movs	r1, #0
 80094be:	4618      	mov	r0, r3
 80094c0:	f002 f858 	bl	800b574 <RCCEx_PLL3_Config>
 80094c4:	4603      	mov	r3, r0
 80094c6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80094c8:	e003      	b.n	80094d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80094ca:	2301      	movs	r3, #1
 80094cc:	75fb      	strb	r3, [r7, #23]
      break;
 80094ce:	e000      	b.n	80094d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80094d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80094d2:	7dfb      	ldrb	r3, [r7, #23]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d109      	bne.n	80094ec <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80094d8:	4b79      	ldr	r3, [pc, #484]	; (80096c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80094da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094dc:	f023 0207 	bic.w	r2, r3, #7
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094e4:	4976      	ldr	r1, [pc, #472]	; (80096c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80094e6:	4313      	orrs	r3, r2
 80094e8:	650b      	str	r3, [r1, #80]	; 0x50
 80094ea:	e001      	b.n	80094f0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094ec:	7dfb      	ldrb	r3, [r7, #23]
 80094ee:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d042      	beq.n	8009582 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009500:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009504:	d02b      	beq.n	800955e <HAL_RCCEx_PeriphCLKConfig+0x192>
 8009506:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800950a:	d825      	bhi.n	8009558 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800950c:	2bc0      	cmp	r3, #192	; 0xc0
 800950e:	d028      	beq.n	8009562 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8009510:	2bc0      	cmp	r3, #192	; 0xc0
 8009512:	d821      	bhi.n	8009558 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009514:	2b80      	cmp	r3, #128	; 0x80
 8009516:	d016      	beq.n	8009546 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8009518:	2b80      	cmp	r3, #128	; 0x80
 800951a:	d81d      	bhi.n	8009558 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800951c:	2b00      	cmp	r3, #0
 800951e:	d002      	beq.n	8009526 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8009520:	2b40      	cmp	r3, #64	; 0x40
 8009522:	d007      	beq.n	8009534 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8009524:	e018      	b.n	8009558 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009526:	4b66      	ldr	r3, [pc, #408]	; (80096c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800952a:	4a65      	ldr	r2, [pc, #404]	; (80096c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800952c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009530:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009532:	e017      	b.n	8009564 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	3304      	adds	r3, #4
 8009538:	2100      	movs	r1, #0
 800953a:	4618      	mov	r0, r3
 800953c:	f001 ff68 	bl	800b410 <RCCEx_PLL2_Config>
 8009540:	4603      	mov	r3, r0
 8009542:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009544:	e00e      	b.n	8009564 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	3324      	adds	r3, #36	; 0x24
 800954a:	2100      	movs	r1, #0
 800954c:	4618      	mov	r0, r3
 800954e:	f002 f811 	bl	800b574 <RCCEx_PLL3_Config>
 8009552:	4603      	mov	r3, r0
 8009554:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009556:	e005      	b.n	8009564 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009558:	2301      	movs	r3, #1
 800955a:	75fb      	strb	r3, [r7, #23]
      break;
 800955c:	e002      	b.n	8009564 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800955e:	bf00      	nop
 8009560:	e000      	b.n	8009564 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8009562:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009564:	7dfb      	ldrb	r3, [r7, #23]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d109      	bne.n	800957e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800956a:	4b55      	ldr	r3, [pc, #340]	; (80096c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800956c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800956e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009576:	4952      	ldr	r1, [pc, #328]	; (80096c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009578:	4313      	orrs	r3, r2
 800957a:	650b      	str	r3, [r1, #80]	; 0x50
 800957c:	e001      	b.n	8009582 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800957e:	7dfb      	ldrb	r3, [r7, #23]
 8009580:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800958a:	2b00      	cmp	r3, #0
 800958c:	d049      	beq.n	8009622 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009594:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009598:	d030      	beq.n	80095fc <HAL_RCCEx_PeriphCLKConfig+0x230>
 800959a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800959e:	d82a      	bhi.n	80095f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80095a0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80095a4:	d02c      	beq.n	8009600 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80095a6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80095aa:	d824      	bhi.n	80095f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80095ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80095b0:	d018      	beq.n	80095e4 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80095b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80095b6:	d81e      	bhi.n	80095f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d003      	beq.n	80095c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80095bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80095c0:	d007      	beq.n	80095d2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80095c2:	e018      	b.n	80095f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80095c4:	4b3e      	ldr	r3, [pc, #248]	; (80096c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80095c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095c8:	4a3d      	ldr	r2, [pc, #244]	; (80096c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80095ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80095ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80095d0:	e017      	b.n	8009602 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	3304      	adds	r3, #4
 80095d6:	2100      	movs	r1, #0
 80095d8:	4618      	mov	r0, r3
 80095da:	f001 ff19 	bl	800b410 <RCCEx_PLL2_Config>
 80095de:	4603      	mov	r3, r0
 80095e0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80095e2:	e00e      	b.n	8009602 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	3324      	adds	r3, #36	; 0x24
 80095e8:	2100      	movs	r1, #0
 80095ea:	4618      	mov	r0, r3
 80095ec:	f001 ffc2 	bl	800b574 <RCCEx_PLL3_Config>
 80095f0:	4603      	mov	r3, r0
 80095f2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80095f4:	e005      	b.n	8009602 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80095f6:	2301      	movs	r3, #1
 80095f8:	75fb      	strb	r3, [r7, #23]
      break;
 80095fa:	e002      	b.n	8009602 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80095fc:	bf00      	nop
 80095fe:	e000      	b.n	8009602 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8009600:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009602:	7dfb      	ldrb	r3, [r7, #23]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d10a      	bne.n	800961e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009608:	4b2d      	ldr	r3, [pc, #180]	; (80096c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800960a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800960c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009616:	492a      	ldr	r1, [pc, #168]	; (80096c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009618:	4313      	orrs	r3, r2
 800961a:	658b      	str	r3, [r1, #88]	; 0x58
 800961c:	e001      	b.n	8009622 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800961e:	7dfb      	ldrb	r3, [r7, #23]
 8009620:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800962a:	2b00      	cmp	r3, #0
 800962c:	d04c      	beq.n	80096c8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009634:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009638:	d030      	beq.n	800969c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800963a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800963e:	d82a      	bhi.n	8009696 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8009640:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009644:	d02c      	beq.n	80096a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8009646:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800964a:	d824      	bhi.n	8009696 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800964c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009650:	d018      	beq.n	8009684 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8009652:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009656:	d81e      	bhi.n	8009696 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8009658:	2b00      	cmp	r3, #0
 800965a:	d003      	beq.n	8009664 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800965c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009660:	d007      	beq.n	8009672 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8009662:	e018      	b.n	8009696 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009664:	4b16      	ldr	r3, [pc, #88]	; (80096c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009668:	4a15      	ldr	r2, [pc, #84]	; (80096c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800966a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800966e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009670:	e017      	b.n	80096a2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	3304      	adds	r3, #4
 8009676:	2100      	movs	r1, #0
 8009678:	4618      	mov	r0, r3
 800967a:	f001 fec9 	bl	800b410 <RCCEx_PLL2_Config>
 800967e:	4603      	mov	r3, r0
 8009680:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009682:	e00e      	b.n	80096a2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	3324      	adds	r3, #36	; 0x24
 8009688:	2100      	movs	r1, #0
 800968a:	4618      	mov	r0, r3
 800968c:	f001 ff72 	bl	800b574 <RCCEx_PLL3_Config>
 8009690:	4603      	mov	r3, r0
 8009692:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009694:	e005      	b.n	80096a2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8009696:	2301      	movs	r3, #1
 8009698:	75fb      	strb	r3, [r7, #23]
      break;
 800969a:	e002      	b.n	80096a2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800969c:	bf00      	nop
 800969e:	e000      	b.n	80096a2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80096a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80096a2:	7dfb      	ldrb	r3, [r7, #23]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d10d      	bne.n	80096c4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80096a8:	4b05      	ldr	r3, [pc, #20]	; (80096c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80096aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096ac:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80096b6:	4902      	ldr	r1, [pc, #8]	; (80096c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80096b8:	4313      	orrs	r3, r2
 80096ba:	658b      	str	r3, [r1, #88]	; 0x58
 80096bc:	e004      	b.n	80096c8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80096be:	bf00      	nop
 80096c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096c4:	7dfb      	ldrb	r3, [r7, #23]
 80096c6:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d032      	beq.n	800973a <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80096d8:	2b30      	cmp	r3, #48	; 0x30
 80096da:	d01c      	beq.n	8009716 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80096dc:	2b30      	cmp	r3, #48	; 0x30
 80096de:	d817      	bhi.n	8009710 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80096e0:	2b20      	cmp	r3, #32
 80096e2:	d00c      	beq.n	80096fe <HAL_RCCEx_PeriphCLKConfig+0x332>
 80096e4:	2b20      	cmp	r3, #32
 80096e6:	d813      	bhi.n	8009710 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d016      	beq.n	800971a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80096ec:	2b10      	cmp	r3, #16
 80096ee:	d10f      	bne.n	8009710 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80096f0:	4baf      	ldr	r3, [pc, #700]	; (80099b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80096f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096f4:	4aae      	ldr	r2, [pc, #696]	; (80099b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80096f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80096fa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80096fc:	e00e      	b.n	800971c <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	3304      	adds	r3, #4
 8009702:	2102      	movs	r1, #2
 8009704:	4618      	mov	r0, r3
 8009706:	f001 fe83 	bl	800b410 <RCCEx_PLL2_Config>
 800970a:	4603      	mov	r3, r0
 800970c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800970e:	e005      	b.n	800971c <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009710:	2301      	movs	r3, #1
 8009712:	75fb      	strb	r3, [r7, #23]
      break;
 8009714:	e002      	b.n	800971c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8009716:	bf00      	nop
 8009718:	e000      	b.n	800971c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800971a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800971c:	7dfb      	ldrb	r3, [r7, #23]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d109      	bne.n	8009736 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009722:	4ba3      	ldr	r3, [pc, #652]	; (80099b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009726:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800972e:	49a0      	ldr	r1, [pc, #640]	; (80099b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009730:	4313      	orrs	r3, r2
 8009732:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009734:	e001      	b.n	800973a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009736:	7dfb      	ldrb	r3, [r7, #23]
 8009738:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009742:	2b00      	cmp	r3, #0
 8009744:	d047      	beq.n	80097d6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800974a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800974e:	d030      	beq.n	80097b2 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8009750:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009754:	d82a      	bhi.n	80097ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8009756:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800975a:	d02c      	beq.n	80097b6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 800975c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009760:	d824      	bhi.n	80097ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8009762:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009766:	d018      	beq.n	800979a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8009768:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800976c:	d81e      	bhi.n	80097ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800976e:	2b00      	cmp	r3, #0
 8009770:	d003      	beq.n	800977a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8009772:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009776:	d007      	beq.n	8009788 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8009778:	e018      	b.n	80097ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800977a:	4b8d      	ldr	r3, [pc, #564]	; (80099b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800977c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800977e:	4a8c      	ldr	r2, [pc, #560]	; (80099b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009780:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009784:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009786:	e017      	b.n	80097b8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	3304      	adds	r3, #4
 800978c:	2100      	movs	r1, #0
 800978e:	4618      	mov	r0, r3
 8009790:	f001 fe3e 	bl	800b410 <RCCEx_PLL2_Config>
 8009794:	4603      	mov	r3, r0
 8009796:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009798:	e00e      	b.n	80097b8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	3324      	adds	r3, #36	; 0x24
 800979e:	2100      	movs	r1, #0
 80097a0:	4618      	mov	r0, r3
 80097a2:	f001 fee7 	bl	800b574 <RCCEx_PLL3_Config>
 80097a6:	4603      	mov	r3, r0
 80097a8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80097aa:	e005      	b.n	80097b8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80097ac:	2301      	movs	r3, #1
 80097ae:	75fb      	strb	r3, [r7, #23]
      break;
 80097b0:	e002      	b.n	80097b8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80097b2:	bf00      	nop
 80097b4:	e000      	b.n	80097b8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80097b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80097b8:	7dfb      	ldrb	r3, [r7, #23]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d109      	bne.n	80097d2 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80097be:	4b7c      	ldr	r3, [pc, #496]	; (80099b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80097c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097c2:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80097ca:	4979      	ldr	r1, [pc, #484]	; (80099b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80097cc:	4313      	orrs	r3, r2
 80097ce:	650b      	str	r3, [r1, #80]	; 0x50
 80097d0:	e001      	b.n	80097d6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097d2:	7dfb      	ldrb	r3, [r7, #23]
 80097d4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d049      	beq.n	8009876 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097e6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80097ea:	d02e      	beq.n	800984a <HAL_RCCEx_PeriphCLKConfig+0x47e>
 80097ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80097f0:	d828      	bhi.n	8009844 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80097f2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80097f6:	d02a      	beq.n	800984e <HAL_RCCEx_PeriphCLKConfig+0x482>
 80097f8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80097fc:	d822      	bhi.n	8009844 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80097fe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009802:	d026      	beq.n	8009852 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8009804:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009808:	d81c      	bhi.n	8009844 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800980a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800980e:	d010      	beq.n	8009832 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8009810:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009814:	d816      	bhi.n	8009844 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8009816:	2b00      	cmp	r3, #0
 8009818:	d01d      	beq.n	8009856 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800981a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800981e:	d111      	bne.n	8009844 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	3304      	adds	r3, #4
 8009824:	2101      	movs	r1, #1
 8009826:	4618      	mov	r0, r3
 8009828:	f001 fdf2 	bl	800b410 <RCCEx_PLL2_Config>
 800982c:	4603      	mov	r3, r0
 800982e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009830:	e012      	b.n	8009858 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	3324      	adds	r3, #36	; 0x24
 8009836:	2101      	movs	r1, #1
 8009838:	4618      	mov	r0, r3
 800983a:	f001 fe9b 	bl	800b574 <RCCEx_PLL3_Config>
 800983e:	4603      	mov	r3, r0
 8009840:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009842:	e009      	b.n	8009858 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009844:	2301      	movs	r3, #1
 8009846:	75fb      	strb	r3, [r7, #23]
      break;
 8009848:	e006      	b.n	8009858 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800984a:	bf00      	nop
 800984c:	e004      	b.n	8009858 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800984e:	bf00      	nop
 8009850:	e002      	b.n	8009858 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8009852:	bf00      	nop
 8009854:	e000      	b.n	8009858 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8009856:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009858:	7dfb      	ldrb	r3, [r7, #23]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d109      	bne.n	8009872 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800985e:	4b54      	ldr	r3, [pc, #336]	; (80099b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009860:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009862:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800986a:	4951      	ldr	r1, [pc, #324]	; (80099b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800986c:	4313      	orrs	r3, r2
 800986e:	650b      	str	r3, [r1, #80]	; 0x50
 8009870:	e001      	b.n	8009876 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009872:	7dfb      	ldrb	r3, [r7, #23]
 8009874:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800987e:	2b00      	cmp	r3, #0
 8009880:	d04b      	beq.n	800991a <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009888:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800988c:	d02e      	beq.n	80098ec <HAL_RCCEx_PeriphCLKConfig+0x520>
 800988e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009892:	d828      	bhi.n	80098e6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8009894:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009898:	d02a      	beq.n	80098f0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800989a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800989e:	d822      	bhi.n	80098e6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80098a0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80098a4:	d026      	beq.n	80098f4 <HAL_RCCEx_PeriphCLKConfig+0x528>
 80098a6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80098aa:	d81c      	bhi.n	80098e6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80098ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80098b0:	d010      	beq.n	80098d4 <HAL_RCCEx_PeriphCLKConfig+0x508>
 80098b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80098b6:	d816      	bhi.n	80098e6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d01d      	beq.n	80098f8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80098bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80098c0:	d111      	bne.n	80098e6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	3304      	adds	r3, #4
 80098c6:	2101      	movs	r1, #1
 80098c8:	4618      	mov	r0, r3
 80098ca:	f001 fda1 	bl	800b410 <RCCEx_PLL2_Config>
 80098ce:	4603      	mov	r3, r0
 80098d0:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80098d2:	e012      	b.n	80098fa <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	3324      	adds	r3, #36	; 0x24
 80098d8:	2101      	movs	r1, #1
 80098da:	4618      	mov	r0, r3
 80098dc:	f001 fe4a 	bl	800b574 <RCCEx_PLL3_Config>
 80098e0:	4603      	mov	r3, r0
 80098e2:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80098e4:	e009      	b.n	80098fa <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80098e6:	2301      	movs	r3, #1
 80098e8:	75fb      	strb	r3, [r7, #23]
      break;
 80098ea:	e006      	b.n	80098fa <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80098ec:	bf00      	nop
 80098ee:	e004      	b.n	80098fa <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80098f0:	bf00      	nop
 80098f2:	e002      	b.n	80098fa <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80098f4:	bf00      	nop
 80098f6:	e000      	b.n	80098fa <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80098f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80098fa:	7dfb      	ldrb	r3, [r7, #23]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d10a      	bne.n	8009916 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009900:	4b2b      	ldr	r3, [pc, #172]	; (80099b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009904:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800990e:	4928      	ldr	r1, [pc, #160]	; (80099b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009910:	4313      	orrs	r3, r2
 8009912:	658b      	str	r3, [r1, #88]	; 0x58
 8009914:	e001      	b.n	800991a <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009916:	7dfb      	ldrb	r3, [r7, #23]
 8009918:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009922:	2b00      	cmp	r3, #0
 8009924:	d02f      	beq.n	8009986 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800992a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800992e:	d00e      	beq.n	800994e <HAL_RCCEx_PeriphCLKConfig+0x582>
 8009930:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009934:	d814      	bhi.n	8009960 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8009936:	2b00      	cmp	r3, #0
 8009938:	d015      	beq.n	8009966 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800993a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800993e:	d10f      	bne.n	8009960 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009940:	4b1b      	ldr	r3, [pc, #108]	; (80099b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009944:	4a1a      	ldr	r2, [pc, #104]	; (80099b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009946:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800994a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800994c:	e00c      	b.n	8009968 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	3304      	adds	r3, #4
 8009952:	2101      	movs	r1, #1
 8009954:	4618      	mov	r0, r3
 8009956:	f001 fd5b 	bl	800b410 <RCCEx_PLL2_Config>
 800995a:	4603      	mov	r3, r0
 800995c:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800995e:	e003      	b.n	8009968 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009960:	2301      	movs	r3, #1
 8009962:	75fb      	strb	r3, [r7, #23]
      break;
 8009964:	e000      	b.n	8009968 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8009966:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009968:	7dfb      	ldrb	r3, [r7, #23]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d109      	bne.n	8009982 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800996e:	4b10      	ldr	r3, [pc, #64]	; (80099b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009970:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009972:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800997a:	490d      	ldr	r1, [pc, #52]	; (80099b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800997c:	4313      	orrs	r3, r2
 800997e:	650b      	str	r3, [r1, #80]	; 0x50
 8009980:	e001      	b.n	8009986 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009982:	7dfb      	ldrb	r3, [r7, #23]
 8009984:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800998e:	2b00      	cmp	r3, #0
 8009990:	d033      	beq.n	80099fa <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009996:	2b03      	cmp	r3, #3
 8009998:	d81c      	bhi.n	80099d4 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800999a:	a201      	add	r2, pc, #4	; (adr r2, 80099a0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 800999c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099a0:	080099db 	.word	0x080099db
 80099a4:	080099b5 	.word	0x080099b5
 80099a8:	080099c3 	.word	0x080099c3
 80099ac:	080099db 	.word	0x080099db
 80099b0:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80099b4:	4bb8      	ldr	r3, [pc, #736]	; (8009c98 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80099b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099b8:	4ab7      	ldr	r2, [pc, #732]	; (8009c98 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80099ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80099be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80099c0:	e00c      	b.n	80099dc <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	3304      	adds	r3, #4
 80099c6:	2102      	movs	r1, #2
 80099c8:	4618      	mov	r0, r3
 80099ca:	f001 fd21 	bl	800b410 <RCCEx_PLL2_Config>
 80099ce:	4603      	mov	r3, r0
 80099d0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80099d2:	e003      	b.n	80099dc <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80099d4:	2301      	movs	r3, #1
 80099d6:	75fb      	strb	r3, [r7, #23]
      break;
 80099d8:	e000      	b.n	80099dc <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80099da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80099dc:	7dfb      	ldrb	r3, [r7, #23]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d109      	bne.n	80099f6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80099e2:	4bad      	ldr	r3, [pc, #692]	; (8009c98 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80099e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099e6:	f023 0203 	bic.w	r2, r3, #3
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099ee:	49aa      	ldr	r1, [pc, #680]	; (8009c98 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80099f0:	4313      	orrs	r3, r2
 80099f2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80099f4:	e001      	b.n	80099fa <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099f6:	7dfb      	ldrb	r3, [r7, #23]
 80099f8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	f000 8086 	beq.w	8009b14 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009a08:	4ba4      	ldr	r3, [pc, #656]	; (8009c9c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	4aa3      	ldr	r2, [pc, #652]	; (8009c9c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8009a0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009a12:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009a14:	f7f9 fe6e 	bl	80036f4 <HAL_GetTick>
 8009a18:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009a1a:	e009      	b.n	8009a30 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009a1c:	f7f9 fe6a 	bl	80036f4 <HAL_GetTick>
 8009a20:	4602      	mov	r2, r0
 8009a22:	693b      	ldr	r3, [r7, #16]
 8009a24:	1ad3      	subs	r3, r2, r3
 8009a26:	2b64      	cmp	r3, #100	; 0x64
 8009a28:	d902      	bls.n	8009a30 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8009a2a:	2303      	movs	r3, #3
 8009a2c:	75fb      	strb	r3, [r7, #23]
        break;
 8009a2e:	e005      	b.n	8009a3c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009a30:	4b9a      	ldr	r3, [pc, #616]	; (8009c9c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d0ef      	beq.n	8009a1c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8009a3c:	7dfb      	ldrb	r3, [r7, #23]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d166      	bne.n	8009b10 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009a42:	4b95      	ldr	r3, [pc, #596]	; (8009c98 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009a44:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009a4c:	4053      	eors	r3, r2
 8009a4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d013      	beq.n	8009a7e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009a56:	4b90      	ldr	r3, [pc, #576]	; (8009c98 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009a5e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009a60:	4b8d      	ldr	r3, [pc, #564]	; (8009c98 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009a62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a64:	4a8c      	ldr	r2, [pc, #560]	; (8009c98 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009a66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009a6a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009a6c:	4b8a      	ldr	r3, [pc, #552]	; (8009c98 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a70:	4a89      	ldr	r2, [pc, #548]	; (8009c98 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009a72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009a76:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009a78:	4a87      	ldr	r2, [pc, #540]	; (8009c98 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009a84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a88:	d115      	bne.n	8009ab6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a8a:	f7f9 fe33 	bl	80036f4 <HAL_GetTick>
 8009a8e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009a90:	e00b      	b.n	8009aaa <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009a92:	f7f9 fe2f 	bl	80036f4 <HAL_GetTick>
 8009a96:	4602      	mov	r2, r0
 8009a98:	693b      	ldr	r3, [r7, #16]
 8009a9a:	1ad3      	subs	r3, r2, r3
 8009a9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009aa0:	4293      	cmp	r3, r2
 8009aa2:	d902      	bls.n	8009aaa <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8009aa4:	2303      	movs	r3, #3
 8009aa6:	75fb      	strb	r3, [r7, #23]
            break;
 8009aa8:	e005      	b.n	8009ab6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009aaa:	4b7b      	ldr	r3, [pc, #492]	; (8009c98 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009aae:	f003 0302 	and.w	r3, r3, #2
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d0ed      	beq.n	8009a92 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8009ab6:	7dfb      	ldrb	r3, [r7, #23]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d126      	bne.n	8009b0a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009ac2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009ac6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009aca:	d10d      	bne.n	8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8009acc:	4b72      	ldr	r3, [pc, #456]	; (8009c98 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009ace:	691b      	ldr	r3, [r3, #16]
 8009ad0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009ada:	0919      	lsrs	r1, r3, #4
 8009adc:	4b70      	ldr	r3, [pc, #448]	; (8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8009ade:	400b      	ands	r3, r1
 8009ae0:	496d      	ldr	r1, [pc, #436]	; (8009c98 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009ae2:	4313      	orrs	r3, r2
 8009ae4:	610b      	str	r3, [r1, #16]
 8009ae6:	e005      	b.n	8009af4 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8009ae8:	4b6b      	ldr	r3, [pc, #428]	; (8009c98 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009aea:	691b      	ldr	r3, [r3, #16]
 8009aec:	4a6a      	ldr	r2, [pc, #424]	; (8009c98 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009aee:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009af2:	6113      	str	r3, [r2, #16]
 8009af4:	4b68      	ldr	r3, [pc, #416]	; (8009c98 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009af6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009afe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009b02:	4965      	ldr	r1, [pc, #404]	; (8009c98 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009b04:	4313      	orrs	r3, r2
 8009b06:	670b      	str	r3, [r1, #112]	; 0x70
 8009b08:	e004      	b.n	8009b14 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009b0a:	7dfb      	ldrb	r3, [r7, #23]
 8009b0c:	75bb      	strb	r3, [r7, #22]
 8009b0e:	e001      	b.n	8009b14 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b10:	7dfb      	ldrb	r3, [r7, #23]
 8009b12:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	f003 0301 	and.w	r3, r3, #1
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d07e      	beq.n	8009c1e <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009b24:	2b28      	cmp	r3, #40	; 0x28
 8009b26:	d867      	bhi.n	8009bf8 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8009b28:	a201      	add	r2, pc, #4	; (adr r2, 8009b30 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8009b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b2e:	bf00      	nop
 8009b30:	08009bff 	.word	0x08009bff
 8009b34:	08009bf9 	.word	0x08009bf9
 8009b38:	08009bf9 	.word	0x08009bf9
 8009b3c:	08009bf9 	.word	0x08009bf9
 8009b40:	08009bf9 	.word	0x08009bf9
 8009b44:	08009bf9 	.word	0x08009bf9
 8009b48:	08009bf9 	.word	0x08009bf9
 8009b4c:	08009bf9 	.word	0x08009bf9
 8009b50:	08009bd5 	.word	0x08009bd5
 8009b54:	08009bf9 	.word	0x08009bf9
 8009b58:	08009bf9 	.word	0x08009bf9
 8009b5c:	08009bf9 	.word	0x08009bf9
 8009b60:	08009bf9 	.word	0x08009bf9
 8009b64:	08009bf9 	.word	0x08009bf9
 8009b68:	08009bf9 	.word	0x08009bf9
 8009b6c:	08009bf9 	.word	0x08009bf9
 8009b70:	08009be7 	.word	0x08009be7
 8009b74:	08009bf9 	.word	0x08009bf9
 8009b78:	08009bf9 	.word	0x08009bf9
 8009b7c:	08009bf9 	.word	0x08009bf9
 8009b80:	08009bf9 	.word	0x08009bf9
 8009b84:	08009bf9 	.word	0x08009bf9
 8009b88:	08009bf9 	.word	0x08009bf9
 8009b8c:	08009bf9 	.word	0x08009bf9
 8009b90:	08009bff 	.word	0x08009bff
 8009b94:	08009bf9 	.word	0x08009bf9
 8009b98:	08009bf9 	.word	0x08009bf9
 8009b9c:	08009bf9 	.word	0x08009bf9
 8009ba0:	08009bf9 	.word	0x08009bf9
 8009ba4:	08009bf9 	.word	0x08009bf9
 8009ba8:	08009bf9 	.word	0x08009bf9
 8009bac:	08009bf9 	.word	0x08009bf9
 8009bb0:	08009bff 	.word	0x08009bff
 8009bb4:	08009bf9 	.word	0x08009bf9
 8009bb8:	08009bf9 	.word	0x08009bf9
 8009bbc:	08009bf9 	.word	0x08009bf9
 8009bc0:	08009bf9 	.word	0x08009bf9
 8009bc4:	08009bf9 	.word	0x08009bf9
 8009bc8:	08009bf9 	.word	0x08009bf9
 8009bcc:	08009bf9 	.word	0x08009bf9
 8009bd0:	08009bff 	.word	0x08009bff
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	3304      	adds	r3, #4
 8009bd8:	2101      	movs	r1, #1
 8009bda:	4618      	mov	r0, r3
 8009bdc:	f001 fc18 	bl	800b410 <RCCEx_PLL2_Config>
 8009be0:	4603      	mov	r3, r0
 8009be2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009be4:	e00c      	b.n	8009c00 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	3324      	adds	r3, #36	; 0x24
 8009bea:	2101      	movs	r1, #1
 8009bec:	4618      	mov	r0, r3
 8009bee:	f001 fcc1 	bl	800b574 <RCCEx_PLL3_Config>
 8009bf2:	4603      	mov	r3, r0
 8009bf4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009bf6:	e003      	b.n	8009c00 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009bf8:	2301      	movs	r3, #1
 8009bfa:	75fb      	strb	r3, [r7, #23]
      break;
 8009bfc:	e000      	b.n	8009c00 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8009bfe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009c00:	7dfb      	ldrb	r3, [r7, #23]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d109      	bne.n	8009c1a <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009c06:	4b24      	ldr	r3, [pc, #144]	; (8009c98 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009c08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c0a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009c12:	4921      	ldr	r1, [pc, #132]	; (8009c98 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009c14:	4313      	orrs	r3, r2
 8009c16:	654b      	str	r3, [r1, #84]	; 0x54
 8009c18:	e001      	b.n	8009c1e <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c1a:	7dfb      	ldrb	r3, [r7, #23]
 8009c1c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	f003 0302 	and.w	r3, r3, #2
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d03e      	beq.n	8009ca8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c2e:	2b05      	cmp	r3, #5
 8009c30:	d820      	bhi.n	8009c74 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8009c32:	a201      	add	r2, pc, #4	; (adr r2, 8009c38 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8009c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c38:	08009c7b 	.word	0x08009c7b
 8009c3c:	08009c51 	.word	0x08009c51
 8009c40:	08009c63 	.word	0x08009c63
 8009c44:	08009c7b 	.word	0x08009c7b
 8009c48:	08009c7b 	.word	0x08009c7b
 8009c4c:	08009c7b 	.word	0x08009c7b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	3304      	adds	r3, #4
 8009c54:	2101      	movs	r1, #1
 8009c56:	4618      	mov	r0, r3
 8009c58:	f001 fbda 	bl	800b410 <RCCEx_PLL2_Config>
 8009c5c:	4603      	mov	r3, r0
 8009c5e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009c60:	e00c      	b.n	8009c7c <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	3324      	adds	r3, #36	; 0x24
 8009c66:	2101      	movs	r1, #1
 8009c68:	4618      	mov	r0, r3
 8009c6a:	f001 fc83 	bl	800b574 <RCCEx_PLL3_Config>
 8009c6e:	4603      	mov	r3, r0
 8009c70:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009c72:	e003      	b.n	8009c7c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009c74:	2301      	movs	r3, #1
 8009c76:	75fb      	strb	r3, [r7, #23]
      break;
 8009c78:	e000      	b.n	8009c7c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8009c7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009c7c:	7dfb      	ldrb	r3, [r7, #23]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d110      	bne.n	8009ca4 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009c82:	4b05      	ldr	r3, [pc, #20]	; (8009c98 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c86:	f023 0207 	bic.w	r2, r3, #7
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c8e:	4902      	ldr	r1, [pc, #8]	; (8009c98 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009c90:	4313      	orrs	r3, r2
 8009c92:	654b      	str	r3, [r1, #84]	; 0x54
 8009c94:	e008      	b.n	8009ca8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8009c96:	bf00      	nop
 8009c98:	58024400 	.word	0x58024400
 8009c9c:	58024800 	.word	0x58024800
 8009ca0:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ca4:	7dfb      	ldrb	r3, [r7, #23]
 8009ca6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	f003 0304 	and.w	r3, r3, #4
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d039      	beq.n	8009d28 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009cba:	2b05      	cmp	r3, #5
 8009cbc:	d820      	bhi.n	8009d00 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8009cbe:	a201      	add	r2, pc, #4	; (adr r2, 8009cc4 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8009cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cc4:	08009d07 	.word	0x08009d07
 8009cc8:	08009cdd 	.word	0x08009cdd
 8009ccc:	08009cef 	.word	0x08009cef
 8009cd0:	08009d07 	.word	0x08009d07
 8009cd4:	08009d07 	.word	0x08009d07
 8009cd8:	08009d07 	.word	0x08009d07
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	3304      	adds	r3, #4
 8009ce0:	2101      	movs	r1, #1
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	f001 fb94 	bl	800b410 <RCCEx_PLL2_Config>
 8009ce8:	4603      	mov	r3, r0
 8009cea:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009cec:	e00c      	b.n	8009d08 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	3324      	adds	r3, #36	; 0x24
 8009cf2:	2101      	movs	r1, #1
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	f001 fc3d 	bl	800b574 <RCCEx_PLL3_Config>
 8009cfa:	4603      	mov	r3, r0
 8009cfc:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009cfe:	e003      	b.n	8009d08 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009d00:	2301      	movs	r3, #1
 8009d02:	75fb      	strb	r3, [r7, #23]
      break;
 8009d04:	e000      	b.n	8009d08 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8009d06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009d08:	7dfb      	ldrb	r3, [r7, #23]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d10a      	bne.n	8009d24 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009d0e:	4bb7      	ldr	r3, [pc, #732]	; (8009fec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d12:	f023 0207 	bic.w	r2, r3, #7
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d1c:	49b3      	ldr	r1, [pc, #716]	; (8009fec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009d1e:	4313      	orrs	r3, r2
 8009d20:	658b      	str	r3, [r1, #88]	; 0x58
 8009d22:	e001      	b.n	8009d28 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d24:	7dfb      	ldrb	r3, [r7, #23]
 8009d26:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	f003 0320 	and.w	r3, r3, #32
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d04b      	beq.n	8009dcc <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009d3e:	d02e      	beq.n	8009d9e <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8009d40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009d44:	d828      	bhi.n	8009d98 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8009d46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d4a:	d02a      	beq.n	8009da2 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8009d4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d50:	d822      	bhi.n	8009d98 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8009d52:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009d56:	d026      	beq.n	8009da6 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8009d58:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009d5c:	d81c      	bhi.n	8009d98 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8009d5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d62:	d010      	beq.n	8009d86 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8009d64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d68:	d816      	bhi.n	8009d98 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d01d      	beq.n	8009daa <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8009d6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009d72:	d111      	bne.n	8009d98 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	3304      	adds	r3, #4
 8009d78:	2100      	movs	r1, #0
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	f001 fb48 	bl	800b410 <RCCEx_PLL2_Config>
 8009d80:	4603      	mov	r3, r0
 8009d82:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009d84:	e012      	b.n	8009dac <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	3324      	adds	r3, #36	; 0x24
 8009d8a:	2102      	movs	r1, #2
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	f001 fbf1 	bl	800b574 <RCCEx_PLL3_Config>
 8009d92:	4603      	mov	r3, r0
 8009d94:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009d96:	e009      	b.n	8009dac <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009d98:	2301      	movs	r3, #1
 8009d9a:	75fb      	strb	r3, [r7, #23]
      break;
 8009d9c:	e006      	b.n	8009dac <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8009d9e:	bf00      	nop
 8009da0:	e004      	b.n	8009dac <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8009da2:	bf00      	nop
 8009da4:	e002      	b.n	8009dac <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8009da6:	bf00      	nop
 8009da8:	e000      	b.n	8009dac <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8009daa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009dac:	7dfb      	ldrb	r3, [r7, #23]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d10a      	bne.n	8009dc8 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009db2:	4b8e      	ldr	r3, [pc, #568]	; (8009fec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009db4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009db6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009dc0:	498a      	ldr	r1, [pc, #552]	; (8009fec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009dc2:	4313      	orrs	r3, r2
 8009dc4:	654b      	str	r3, [r1, #84]	; 0x54
 8009dc6:	e001      	b.n	8009dcc <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009dc8:	7dfb      	ldrb	r3, [r7, #23]
 8009dca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d04b      	beq.n	8009e70 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009dde:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009de2:	d02e      	beq.n	8009e42 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8009de4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009de8:	d828      	bhi.n	8009e3c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8009dea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009dee:	d02a      	beq.n	8009e46 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8009df0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009df4:	d822      	bhi.n	8009e3c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8009df6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009dfa:	d026      	beq.n	8009e4a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8009dfc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009e00:	d81c      	bhi.n	8009e3c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8009e02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009e06:	d010      	beq.n	8009e2a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8009e08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009e0c:	d816      	bhi.n	8009e3c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d01d      	beq.n	8009e4e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8009e12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e16:	d111      	bne.n	8009e3c <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	3304      	adds	r3, #4
 8009e1c:	2100      	movs	r1, #0
 8009e1e:	4618      	mov	r0, r3
 8009e20:	f001 faf6 	bl	800b410 <RCCEx_PLL2_Config>
 8009e24:	4603      	mov	r3, r0
 8009e26:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009e28:	e012      	b.n	8009e50 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	3324      	adds	r3, #36	; 0x24
 8009e2e:	2102      	movs	r1, #2
 8009e30:	4618      	mov	r0, r3
 8009e32:	f001 fb9f 	bl	800b574 <RCCEx_PLL3_Config>
 8009e36:	4603      	mov	r3, r0
 8009e38:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009e3a:	e009      	b.n	8009e50 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009e3c:	2301      	movs	r3, #1
 8009e3e:	75fb      	strb	r3, [r7, #23]
      break;
 8009e40:	e006      	b.n	8009e50 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8009e42:	bf00      	nop
 8009e44:	e004      	b.n	8009e50 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8009e46:	bf00      	nop
 8009e48:	e002      	b.n	8009e50 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8009e4a:	bf00      	nop
 8009e4c:	e000      	b.n	8009e50 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8009e4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009e50:	7dfb      	ldrb	r3, [r7, #23]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d10a      	bne.n	8009e6c <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009e56:	4b65      	ldr	r3, [pc, #404]	; (8009fec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e5a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009e64:	4961      	ldr	r1, [pc, #388]	; (8009fec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009e66:	4313      	orrs	r3, r2
 8009e68:	658b      	str	r3, [r1, #88]	; 0x58
 8009e6a:	e001      	b.n	8009e70 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e6c:	7dfb      	ldrb	r3, [r7, #23]
 8009e6e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d04b      	beq.n	8009f14 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009e82:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009e86:	d02e      	beq.n	8009ee6 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8009e88:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009e8c:	d828      	bhi.n	8009ee0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8009e8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009e92:	d02a      	beq.n	8009eea <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8009e94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009e98:	d822      	bhi.n	8009ee0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8009e9a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009e9e:	d026      	beq.n	8009eee <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8009ea0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009ea4:	d81c      	bhi.n	8009ee0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8009ea6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009eaa:	d010      	beq.n	8009ece <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8009eac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009eb0:	d816      	bhi.n	8009ee0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d01d      	beq.n	8009ef2 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8009eb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009eba:	d111      	bne.n	8009ee0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	3304      	adds	r3, #4
 8009ec0:	2100      	movs	r1, #0
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	f001 faa4 	bl	800b410 <RCCEx_PLL2_Config>
 8009ec8:	4603      	mov	r3, r0
 8009eca:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009ecc:	e012      	b.n	8009ef4 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	3324      	adds	r3, #36	; 0x24
 8009ed2:	2102      	movs	r1, #2
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	f001 fb4d 	bl	800b574 <RCCEx_PLL3_Config>
 8009eda:	4603      	mov	r3, r0
 8009edc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009ede:	e009      	b.n	8009ef4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009ee0:	2301      	movs	r3, #1
 8009ee2:	75fb      	strb	r3, [r7, #23]
      break;
 8009ee4:	e006      	b.n	8009ef4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8009ee6:	bf00      	nop
 8009ee8:	e004      	b.n	8009ef4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8009eea:	bf00      	nop
 8009eec:	e002      	b.n	8009ef4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8009eee:	bf00      	nop
 8009ef0:	e000      	b.n	8009ef4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8009ef2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009ef4:	7dfb      	ldrb	r3, [r7, #23]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d10a      	bne.n	8009f10 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009efa:	4b3c      	ldr	r3, [pc, #240]	; (8009fec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009efe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009f08:	4938      	ldr	r1, [pc, #224]	; (8009fec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009f0a:	4313      	orrs	r3, r2
 8009f0c:	658b      	str	r3, [r1, #88]	; 0x58
 8009f0e:	e001      	b.n	8009f14 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f10:	7dfb      	ldrb	r3, [r7, #23]
 8009f12:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	f003 0308 	and.w	r3, r3, #8
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d01a      	beq.n	8009f56 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009f26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f2a:	d10a      	bne.n	8009f42 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	3324      	adds	r3, #36	; 0x24
 8009f30:	2102      	movs	r1, #2
 8009f32:	4618      	mov	r0, r3
 8009f34:	f001 fb1e 	bl	800b574 <RCCEx_PLL3_Config>
 8009f38:	4603      	mov	r3, r0
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d001      	beq.n	8009f42 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8009f3e:	2301      	movs	r3, #1
 8009f40:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009f42:	4b2a      	ldr	r3, [pc, #168]	; (8009fec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f46:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009f50:	4926      	ldr	r1, [pc, #152]	; (8009fec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009f52:	4313      	orrs	r3, r2
 8009f54:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	f003 0310 	and.w	r3, r3, #16
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d01a      	beq.n	8009f98 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009f68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f6c:	d10a      	bne.n	8009f84 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	3324      	adds	r3, #36	; 0x24
 8009f72:	2102      	movs	r1, #2
 8009f74:	4618      	mov	r0, r3
 8009f76:	f001 fafd 	bl	800b574 <RCCEx_PLL3_Config>
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d001      	beq.n	8009f84 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8009f80:	2301      	movs	r3, #1
 8009f82:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009f84:	4b19      	ldr	r3, [pc, #100]	; (8009fec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009f86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009f92:	4916      	ldr	r1, [pc, #88]	; (8009fec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009f94:	4313      	orrs	r3, r2
 8009f96:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d036      	beq.n	800a012 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009faa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009fae:	d01f      	beq.n	8009ff0 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8009fb0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009fb4:	d817      	bhi.n	8009fe6 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d003      	beq.n	8009fc2 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8009fba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009fbe:	d009      	beq.n	8009fd4 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8009fc0:	e011      	b.n	8009fe6 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	3304      	adds	r3, #4
 8009fc6:	2100      	movs	r1, #0
 8009fc8:	4618      	mov	r0, r3
 8009fca:	f001 fa21 	bl	800b410 <RCCEx_PLL2_Config>
 8009fce:	4603      	mov	r3, r0
 8009fd0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009fd2:	e00e      	b.n	8009ff2 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	3324      	adds	r3, #36	; 0x24
 8009fd8:	2102      	movs	r1, #2
 8009fda:	4618      	mov	r0, r3
 8009fdc:	f001 faca 	bl	800b574 <RCCEx_PLL3_Config>
 8009fe0:	4603      	mov	r3, r0
 8009fe2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009fe4:	e005      	b.n	8009ff2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009fe6:	2301      	movs	r3, #1
 8009fe8:	75fb      	strb	r3, [r7, #23]
      break;
 8009fea:	e002      	b.n	8009ff2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8009fec:	58024400 	.word	0x58024400
      break;
 8009ff0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009ff2:	7dfb      	ldrb	r3, [r7, #23]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d10a      	bne.n	800a00e <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009ff8:	4b93      	ldr	r3, [pc, #588]	; (800a248 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009ffa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ffc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a006:	4990      	ldr	r1, [pc, #576]	; (800a248 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a008:	4313      	orrs	r3, r2
 800a00a:	658b      	str	r3, [r1, #88]	; 0x58
 800a00c:	e001      	b.n	800a012 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a00e:	7dfb      	ldrb	r3, [r7, #23]
 800a010:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d033      	beq.n	800a086 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a024:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a028:	d01c      	beq.n	800a064 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 800a02a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a02e:	d816      	bhi.n	800a05e <HAL_RCCEx_PeriphCLKConfig+0xc92>
 800a030:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a034:	d003      	beq.n	800a03e <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800a036:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a03a:	d007      	beq.n	800a04c <HAL_RCCEx_PeriphCLKConfig+0xc80>
 800a03c:	e00f      	b.n	800a05e <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a03e:	4b82      	ldr	r3, [pc, #520]	; (800a248 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a042:	4a81      	ldr	r2, [pc, #516]	; (800a248 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a044:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a048:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800a04a:	e00c      	b.n	800a066 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	3324      	adds	r3, #36	; 0x24
 800a050:	2101      	movs	r1, #1
 800a052:	4618      	mov	r0, r3
 800a054:	f001 fa8e 	bl	800b574 <RCCEx_PLL3_Config>
 800a058:	4603      	mov	r3, r0
 800a05a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800a05c:	e003      	b.n	800a066 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a05e:	2301      	movs	r3, #1
 800a060:	75fb      	strb	r3, [r7, #23]
      break;
 800a062:	e000      	b.n	800a066 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 800a064:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a066:	7dfb      	ldrb	r3, [r7, #23]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d10a      	bne.n	800a082 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a06c:	4b76      	ldr	r3, [pc, #472]	; (800a248 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a06e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a070:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a07a:	4973      	ldr	r1, [pc, #460]	; (800a248 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a07c:	4313      	orrs	r3, r2
 800a07e:	654b      	str	r3, [r1, #84]	; 0x54
 800a080:	e001      	b.n	800a086 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a082:	7dfb      	ldrb	r3, [r7, #23]
 800a084:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d029      	beq.n	800a0e6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a096:	2b00      	cmp	r3, #0
 800a098:	d003      	beq.n	800a0a2 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800a09a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a09e:	d007      	beq.n	800a0b0 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 800a0a0:	e00f      	b.n	800a0c2 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a0a2:	4b69      	ldr	r3, [pc, #420]	; (800a248 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a0a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0a6:	4a68      	ldr	r2, [pc, #416]	; (800a248 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a0a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a0ac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a0ae:	e00b      	b.n	800a0c8 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	3304      	adds	r3, #4
 800a0b4:	2102      	movs	r1, #2
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	f001 f9aa 	bl	800b410 <RCCEx_PLL2_Config>
 800a0bc:	4603      	mov	r3, r0
 800a0be:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a0c0:	e002      	b.n	800a0c8 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800a0c2:	2301      	movs	r3, #1
 800a0c4:	75fb      	strb	r3, [r7, #23]
      break;
 800a0c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a0c8:	7dfb      	ldrb	r3, [r7, #23]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d109      	bne.n	800a0e2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a0ce:	4b5e      	ldr	r3, [pc, #376]	; (800a248 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a0d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a0d2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a0da:	495b      	ldr	r1, [pc, #364]	; (800a248 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a0dc:	4313      	orrs	r3, r2
 800a0de:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a0e0:	e001      	b.n	800a0e6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0e2:	7dfb      	ldrb	r3, [r7, #23]
 800a0e4:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d00a      	beq.n	800a108 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	3324      	adds	r3, #36	; 0x24
 800a0f6:	2102      	movs	r1, #2
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	f001 fa3b 	bl	800b574 <RCCEx_PLL3_Config>
 800a0fe:	4603      	mov	r3, r0
 800a100:	2b00      	cmp	r3, #0
 800a102:	d001      	beq.n	800a108 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 800a104:	2301      	movs	r3, #1
 800a106:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a110:	2b00      	cmp	r3, #0
 800a112:	d030      	beq.n	800a176 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a118:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a11c:	d017      	beq.n	800a14e <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800a11e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a122:	d811      	bhi.n	800a148 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800a124:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a128:	d013      	beq.n	800a152 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800a12a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a12e:	d80b      	bhi.n	800a148 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800a130:	2b00      	cmp	r3, #0
 800a132:	d010      	beq.n	800a156 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800a134:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a138:	d106      	bne.n	800a148 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a13a:	4b43      	ldr	r3, [pc, #268]	; (800a248 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a13c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a13e:	4a42      	ldr	r2, [pc, #264]	; (800a248 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a140:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a144:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800a146:	e007      	b.n	800a158 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a148:	2301      	movs	r3, #1
 800a14a:	75fb      	strb	r3, [r7, #23]
      break;
 800a14c:	e004      	b.n	800a158 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800a14e:	bf00      	nop
 800a150:	e002      	b.n	800a158 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800a152:	bf00      	nop
 800a154:	e000      	b.n	800a158 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800a156:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a158:	7dfb      	ldrb	r3, [r7, #23]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d109      	bne.n	800a172 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a15e:	4b3a      	ldr	r3, [pc, #232]	; (800a248 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a162:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a16a:	4937      	ldr	r1, [pc, #220]	; (800a248 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a16c:	4313      	orrs	r3, r2
 800a16e:	654b      	str	r3, [r1, #84]	; 0x54
 800a170:	e001      	b.n	800a176 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a172:	7dfb      	ldrb	r3, [r7, #23]
 800a174:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d008      	beq.n	800a194 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a182:	4b31      	ldr	r3, [pc, #196]	; (800a248 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a184:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a186:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a18e:	492e      	ldr	r1, [pc, #184]	; (800a248 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a190:	4313      	orrs	r3, r2
 800a192:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d009      	beq.n	800a1b4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a1a0:	4b29      	ldr	r3, [pc, #164]	; (800a248 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a1a2:	691b      	ldr	r3, [r3, #16]
 800a1a4:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a1ae:	4926      	ldr	r1, [pc, #152]	; (800a248 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a1b0:	4313      	orrs	r3, r2
 800a1b2:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d008      	beq.n	800a1d2 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a1c0:	4b21      	ldr	r3, [pc, #132]	; (800a248 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a1c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a1c4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a1cc:	491e      	ldr	r1, [pc, #120]	; (800a248 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a1ce:	4313      	orrs	r3, r2
 800a1d0:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d00d      	beq.n	800a1fa <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a1de:	4b1a      	ldr	r3, [pc, #104]	; (800a248 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a1e0:	691b      	ldr	r3, [r3, #16]
 800a1e2:	4a19      	ldr	r2, [pc, #100]	; (800a248 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a1e4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a1e8:	6113      	str	r3, [r2, #16]
 800a1ea:	4b17      	ldr	r3, [pc, #92]	; (800a248 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a1ec:	691a      	ldr	r2, [r3, #16]
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a1f4:	4914      	ldr	r1, [pc, #80]	; (800a248 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a1f6:	4313      	orrs	r3, r2
 800a1f8:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	da08      	bge.n	800a214 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a202:	4b11      	ldr	r3, [pc, #68]	; (800a248 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a206:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a20e:	490e      	ldr	r1, [pc, #56]	; (800a248 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a210:	4313      	orrs	r3, r2
 800a212:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d009      	beq.n	800a234 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a220:	4b09      	ldr	r3, [pc, #36]	; (800a248 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a224:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a22e:	4906      	ldr	r1, [pc, #24]	; (800a248 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a230:	4313      	orrs	r3, r2
 800a232:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800a234:	7dbb      	ldrb	r3, [r7, #22]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d101      	bne.n	800a23e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800a23a:	2300      	movs	r3, #0
 800a23c:	e000      	b.n	800a240 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800a23e:	2301      	movs	r3, #1
}
 800a240:	4618      	mov	r0, r3
 800a242:	3718      	adds	r7, #24
 800a244:	46bd      	mov	sp, r7
 800a246:	bd80      	pop	{r7, pc}
 800a248:	58024400 	.word	0x58024400

0800a24c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b090      	sub	sp, #64	; 0x40
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a25a:	f040 8095 	bne.w	800a388 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800a25e:	4bae      	ldr	r3, [pc, #696]	; (800a518 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a260:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a262:	f003 0307 	and.w	r3, r3, #7
 800a266:	633b      	str	r3, [r7, #48]	; 0x30
 800a268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a26a:	2b04      	cmp	r3, #4
 800a26c:	f200 8088 	bhi.w	800a380 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800a270:	a201      	add	r2, pc, #4	; (adr r2, 800a278 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 800a272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a276:	bf00      	nop
 800a278:	0800a28d 	.word	0x0800a28d
 800a27c:	0800a2b5 	.word	0x0800a2b5
 800a280:	0800a2dd 	.word	0x0800a2dd
 800a284:	0800a379 	.word	0x0800a379
 800a288:	0800a305 	.word	0x0800a305

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a28c:	4ba2      	ldr	r3, [pc, #648]	; (800a518 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a294:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a298:	d108      	bne.n	800a2ac <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a29a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a29e:	4618      	mov	r0, r3
 800a2a0:	f000 ff64 	bl	800b16c <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800a2a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2a6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a2a8:	f000 bc95 	b.w	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a2b0:	f000 bc91 	b.w	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a2b4:	4b98      	ldr	r3, [pc, #608]	; (800a518 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a2bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a2c0:	d108      	bne.n	800a2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a2c2:	f107 0318 	add.w	r3, r7, #24
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	f000 fca8 	bl	800ac1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a2cc:	69bb      	ldr	r3, [r7, #24]
 800a2ce:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a2d0:	f000 bc81 	b.w	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a2d8:	f000 bc7d 	b.w	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a2dc:	4b8e      	ldr	r3, [pc, #568]	; (800a518 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a2e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a2e8:	d108      	bne.n	800a2fc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a2ea:	f107 030c 	add.w	r3, r7, #12
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	f000 fde8 	bl	800aec4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a2f8:	f000 bc6d 	b.w	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a300:	f000 bc69 	b.w	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a304:	4b84      	ldr	r3, [pc, #528]	; (800a518 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a306:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a308:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a30c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a30e:	4b82      	ldr	r3, [pc, #520]	; (800a518 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	f003 0304 	and.w	r3, r3, #4
 800a316:	2b04      	cmp	r3, #4
 800a318:	d10c      	bne.n	800a334 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800a31a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d109      	bne.n	800a334 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a320:	4b7d      	ldr	r3, [pc, #500]	; (800a518 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	08db      	lsrs	r3, r3, #3
 800a326:	f003 0303 	and.w	r3, r3, #3
 800a32a:	4a7c      	ldr	r2, [pc, #496]	; (800a51c <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 800a32c:	fa22 f303 	lsr.w	r3, r2, r3
 800a330:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a332:	e01f      	b.n	800a374 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a334:	4b78      	ldr	r3, [pc, #480]	; (800a518 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a33c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a340:	d106      	bne.n	800a350 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800a342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a344:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a348:	d102      	bne.n	800a350 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a34a:	4b75      	ldr	r3, [pc, #468]	; (800a520 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800a34c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a34e:	e011      	b.n	800a374 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a350:	4b71      	ldr	r3, [pc, #452]	; (800a518 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a358:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a35c:	d106      	bne.n	800a36c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800a35e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a360:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a364:	d102      	bne.n	800a36c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a366:	4b6f      	ldr	r3, [pc, #444]	; (800a524 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800a368:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a36a:	e003      	b.n	800a374 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a36c:	2300      	movs	r3, #0
 800a36e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a370:	f000 bc31 	b.w	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a374:	f000 bc2f 	b.w	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a378:	4b6b      	ldr	r3, [pc, #428]	; (800a528 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800a37a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a37c:	f000 bc2b 	b.w	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800a380:	2300      	movs	r3, #0
 800a382:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a384:	f000 bc27 	b.w	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a38e:	f040 8095 	bne.w	800a4bc <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800a392:	4b61      	ldr	r3, [pc, #388]	; (800a518 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a394:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a396:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800a39a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a39c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a39e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a3a2:	d04d      	beq.n	800a440 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 800a3a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a3aa:	f200 8084 	bhi.w	800a4b6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800a3ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3b0:	2bc0      	cmp	r3, #192	; 0xc0
 800a3b2:	d07d      	beq.n	800a4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800a3b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3b6:	2bc0      	cmp	r3, #192	; 0xc0
 800a3b8:	d87d      	bhi.n	800a4b6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800a3ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3bc:	2b80      	cmp	r3, #128	; 0x80
 800a3be:	d02d      	beq.n	800a41c <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 800a3c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3c2:	2b80      	cmp	r3, #128	; 0x80
 800a3c4:	d877      	bhi.n	800a4b6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800a3c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d003      	beq.n	800a3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 800a3cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3ce:	2b40      	cmp	r3, #64	; 0x40
 800a3d0:	d012      	beq.n	800a3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800a3d2:	e070      	b.n	800a4b6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a3d4:	4b50      	ldr	r3, [pc, #320]	; (800a518 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a3dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a3e0:	d107      	bne.n	800a3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a3e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	f000 fec0 	bl	800b16c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a3ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3ee:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a3f0:	e3f1      	b.n	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a3f6:	e3ee      	b.n	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a3f8:	4b47      	ldr	r3, [pc, #284]	; (800a518 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a400:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a404:	d107      	bne.n	800a416 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a406:	f107 0318 	add.w	r3, r7, #24
 800a40a:	4618      	mov	r0, r3
 800a40c:	f000 fc06 	bl	800ac1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a410:	69bb      	ldr	r3, [r7, #24]
 800a412:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a414:	e3df      	b.n	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a416:	2300      	movs	r3, #0
 800a418:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a41a:	e3dc      	b.n	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a41c:	4b3e      	ldr	r3, [pc, #248]	; (800a518 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a424:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a428:	d107      	bne.n	800a43a <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a42a:	f107 030c 	add.w	r3, r7, #12
 800a42e:	4618      	mov	r0, r3
 800a430:	f000 fd48 	bl	800aec4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a438:	e3cd      	b.n	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a43a:	2300      	movs	r3, #0
 800a43c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a43e:	e3ca      	b.n	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a440:	4b35      	ldr	r3, [pc, #212]	; (800a518 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a442:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a444:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a448:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a44a:	4b33      	ldr	r3, [pc, #204]	; (800a518 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	f003 0304 	and.w	r3, r3, #4
 800a452:	2b04      	cmp	r3, #4
 800a454:	d10c      	bne.n	800a470 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 800a456:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d109      	bne.n	800a470 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a45c:	4b2e      	ldr	r3, [pc, #184]	; (800a518 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	08db      	lsrs	r3, r3, #3
 800a462:	f003 0303 	and.w	r3, r3, #3
 800a466:	4a2d      	ldr	r2, [pc, #180]	; (800a51c <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 800a468:	fa22 f303 	lsr.w	r3, r2, r3
 800a46c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a46e:	e01e      	b.n	800a4ae <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a470:	4b29      	ldr	r3, [pc, #164]	; (800a518 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a478:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a47c:	d106      	bne.n	800a48c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800a47e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a480:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a484:	d102      	bne.n	800a48c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a486:	4b26      	ldr	r3, [pc, #152]	; (800a520 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800a488:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a48a:	e010      	b.n	800a4ae <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a48c:	4b22      	ldr	r3, [pc, #136]	; (800a518 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a494:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a498:	d106      	bne.n	800a4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800a49a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a49c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a4a0:	d102      	bne.n	800a4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a4a2:	4b20      	ldr	r3, [pc, #128]	; (800a524 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800a4a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a4a6:	e002      	b.n	800a4ae <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a4ac:	e393      	b.n	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a4ae:	e392      	b.n	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a4b0:	4b1d      	ldr	r3, [pc, #116]	; (800a528 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800a4b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a4b4:	e38f      	b.n	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a4ba:	e38c      	b.n	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a4c2:	f040 80a7 	bne.w	800a614 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800a4c6:	4b14      	ldr	r3, [pc, #80]	; (800a518 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a4c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4ca:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800a4ce:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a4d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4d2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a4d6:	d05f      	beq.n	800a598 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800a4d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4da:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a4de:	f200 8096 	bhi.w	800a60e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800a4e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4e4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a4e8:	f000 808e 	beq.w	800a608 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 800a4ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4ee:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a4f2:	f200 808c 	bhi.w	800a60e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800a4f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a4fc:	d03a      	beq.n	800a574 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 800a4fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a500:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a504:	f200 8083 	bhi.w	800a60e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800a508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d00e      	beq.n	800a52c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 800a50e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a510:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a514:	d01c      	beq.n	800a550 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 800a516:	e07a      	b.n	800a60e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800a518:	58024400 	.word	0x58024400
 800a51c:	03d09000 	.word	0x03d09000
 800a520:	003d0900 	.word	0x003d0900
 800a524:	02dc6c00 	.word	0x02dc6c00
 800a528:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a52c:	4baa      	ldr	r3, [pc, #680]	; (800a7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a534:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a538:	d107      	bne.n	800a54a <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a53a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a53e:	4618      	mov	r0, r3
 800a540:	f000 fe14 	bl	800b16c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a546:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a548:	e345      	b.n	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a54a:	2300      	movs	r3, #0
 800a54c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a54e:	e342      	b.n	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a550:	4ba1      	ldr	r3, [pc, #644]	; (800a7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a558:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a55c:	d107      	bne.n	800a56e <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a55e:	f107 0318 	add.w	r3, r7, #24
 800a562:	4618      	mov	r0, r3
 800a564:	f000 fb5a 	bl	800ac1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a568:	69bb      	ldr	r3, [r7, #24]
 800a56a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a56c:	e333      	b.n	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a56e:	2300      	movs	r3, #0
 800a570:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a572:	e330      	b.n	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a574:	4b98      	ldr	r3, [pc, #608]	; (800a7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a57c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a580:	d107      	bne.n	800a592 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a582:	f107 030c 	add.w	r3, r7, #12
 800a586:	4618      	mov	r0, r3
 800a588:	f000 fc9c 	bl	800aec4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a590:	e321      	b.n	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a592:	2300      	movs	r3, #0
 800a594:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a596:	e31e      	b.n	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a598:	4b8f      	ldr	r3, [pc, #572]	; (800a7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a59a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a59c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a5a0:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a5a2:	4b8d      	ldr	r3, [pc, #564]	; (800a7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	f003 0304 	and.w	r3, r3, #4
 800a5aa:	2b04      	cmp	r3, #4
 800a5ac:	d10c      	bne.n	800a5c8 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 800a5ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d109      	bne.n	800a5c8 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a5b4:	4b88      	ldr	r3, [pc, #544]	; (800a7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	08db      	lsrs	r3, r3, #3
 800a5ba:	f003 0303 	and.w	r3, r3, #3
 800a5be:	4a87      	ldr	r2, [pc, #540]	; (800a7dc <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a5c0:	fa22 f303 	lsr.w	r3, r2, r3
 800a5c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a5c6:	e01e      	b.n	800a606 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a5c8:	4b83      	ldr	r3, [pc, #524]	; (800a7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a5d4:	d106      	bne.n	800a5e4 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 800a5d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a5dc:	d102      	bne.n	800a5e4 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a5de:	4b80      	ldr	r3, [pc, #512]	; (800a7e0 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800a5e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a5e2:	e010      	b.n	800a606 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a5e4:	4b7c      	ldr	r3, [pc, #496]	; (800a7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a5ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a5f0:	d106      	bne.n	800a600 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 800a5f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a5f8:	d102      	bne.n	800a600 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a5fa:	4b7a      	ldr	r3, [pc, #488]	; (800a7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800a5fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a5fe:	e002      	b.n	800a606 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a600:	2300      	movs	r3, #0
 800a602:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a604:	e2e7      	b.n	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a606:	e2e6      	b.n	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a608:	4b77      	ldr	r3, [pc, #476]	; (800a7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800a60a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a60c:	e2e3      	b.n	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800a60e:	2300      	movs	r3, #0
 800a610:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a612:	e2e0      	b.n	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a61a:	f040 809c 	bne.w	800a756 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800a61e:	4b6e      	ldr	r3, [pc, #440]	; (800a7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a622:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800a626:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a62a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a62e:	d054      	beq.n	800a6da <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 800a630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a632:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a636:	f200 808b 	bhi.w	800a750 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800a63a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a63c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a640:	f000 8083 	beq.w	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 800a644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a646:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a64a:	f200 8081 	bhi.w	800a750 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800a64e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a650:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a654:	d02f      	beq.n	800a6b6 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800a656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a658:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a65c:	d878      	bhi.n	800a750 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800a65e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a660:	2b00      	cmp	r3, #0
 800a662:	d004      	beq.n	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800a664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a666:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a66a:	d012      	beq.n	800a692 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 800a66c:	e070      	b.n	800a750 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a66e:	4b5a      	ldr	r3, [pc, #360]	; (800a7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a676:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a67a:	d107      	bne.n	800a68c <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a67c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a680:	4618      	mov	r0, r3
 800a682:	f000 fd73 	bl	800b16c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a688:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a68a:	e2a4      	b.n	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a68c:	2300      	movs	r3, #0
 800a68e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a690:	e2a1      	b.n	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a692:	4b51      	ldr	r3, [pc, #324]	; (800a7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a69a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a69e:	d107      	bne.n	800a6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a6a0:	f107 0318 	add.w	r3, r7, #24
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	f000 fab9 	bl	800ac1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a6aa:	69bb      	ldr	r3, [r7, #24]
 800a6ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800a6ae:	e292      	b.n	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a6b4:	e28f      	b.n	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a6b6:	4b48      	ldr	r3, [pc, #288]	; (800a7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a6be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a6c2:	d107      	bne.n	800a6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a6c4:	f107 030c 	add.w	r3, r7, #12
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	f000 fbfb 	bl	800aec4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a6d2:	e280      	b.n	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a6d8:	e27d      	b.n	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a6da:	4b3f      	ldr	r3, [pc, #252]	; (800a7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a6dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a6de:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a6e2:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a6e4:	4b3c      	ldr	r3, [pc, #240]	; (800a7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	f003 0304 	and.w	r3, r3, #4
 800a6ec:	2b04      	cmp	r3, #4
 800a6ee:	d10c      	bne.n	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800a6f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d109      	bne.n	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a6f6:	4b38      	ldr	r3, [pc, #224]	; (800a7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	08db      	lsrs	r3, r3, #3
 800a6fc:	f003 0303 	and.w	r3, r3, #3
 800a700:	4a36      	ldr	r2, [pc, #216]	; (800a7dc <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a702:	fa22 f303 	lsr.w	r3, r2, r3
 800a706:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a708:	e01e      	b.n	800a748 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a70a:	4b33      	ldr	r3, [pc, #204]	; (800a7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a712:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a716:	d106      	bne.n	800a726 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 800a718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a71a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a71e:	d102      	bne.n	800a726 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a720:	4b2f      	ldr	r3, [pc, #188]	; (800a7e0 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800a722:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a724:	e010      	b.n	800a748 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a726:	4b2c      	ldr	r3, [pc, #176]	; (800a7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a72e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a732:	d106      	bne.n	800a742 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800a734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a736:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a73a:	d102      	bne.n	800a742 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a73c:	4b29      	ldr	r3, [pc, #164]	; (800a7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800a73e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a740:	e002      	b.n	800a748 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a742:	2300      	movs	r3, #0
 800a744:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a746:	e246      	b.n	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a748:	e245      	b.n	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a74a:	4b27      	ldr	r3, [pc, #156]	; (800a7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800a74c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a74e:	e242      	b.n	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800a750:	2300      	movs	r3, #0
 800a752:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a754:	e23f      	b.n	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a75c:	f040 80a8 	bne.w	800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800a760:	4b1d      	ldr	r3, [pc, #116]	; (800a7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a762:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a764:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800a768:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a76a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a76c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a770:	d060      	beq.n	800a834 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 800a772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a774:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a778:	f200 8097 	bhi.w	800a8aa <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800a77c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a77e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a782:	f000 808f 	beq.w	800a8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 800a786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a788:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a78c:	f200 808d 	bhi.w	800a8aa <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800a790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a792:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a796:	d03b      	beq.n	800a810 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 800a798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a79a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a79e:	f200 8084 	bhi.w	800a8aa <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800a7a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d004      	beq.n	800a7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 800a7a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a7ae:	d01d      	beq.n	800a7ec <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 800a7b0:	e07b      	b.n	800a8aa <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a7b2:	4b09      	ldr	r3, [pc, #36]	; (800a7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a7ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a7be:	d107      	bne.n	800a7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a7c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	f000 fcd1 	bl	800b16c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a7ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7cc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a7ce:	e202      	b.n	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a7d4:	e1ff      	b.n	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a7d6:	bf00      	nop
 800a7d8:	58024400 	.word	0x58024400
 800a7dc:	03d09000 	.word	0x03d09000
 800a7e0:	003d0900 	.word	0x003d0900
 800a7e4:	02dc6c00 	.word	0x02dc6c00
 800a7e8:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a7ec:	4ba3      	ldr	r3, [pc, #652]	; (800aa7c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a7f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a7f8:	d107      	bne.n	800a80a <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a7fa:	f107 0318 	add.w	r3, r7, #24
 800a7fe:	4618      	mov	r0, r3
 800a800:	f000 fa0c 	bl	800ac1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a804:	69bb      	ldr	r3, [r7, #24]
 800a806:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a808:	e1e5      	b.n	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a80a:	2300      	movs	r3, #0
 800a80c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a80e:	e1e2      	b.n	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a810:	4b9a      	ldr	r3, [pc, #616]	; (800aa7c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a818:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a81c:	d107      	bne.n	800a82e <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a81e:	f107 030c 	add.w	r3, r7, #12
 800a822:	4618      	mov	r0, r3
 800a824:	f000 fb4e 	bl	800aec4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a82c:	e1d3      	b.n	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a82e:	2300      	movs	r3, #0
 800a830:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a832:	e1d0      	b.n	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a834:	4b91      	ldr	r3, [pc, #580]	; (800aa7c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a836:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a838:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a83c:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a83e:	4b8f      	ldr	r3, [pc, #572]	; (800aa7c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	f003 0304 	and.w	r3, r3, #4
 800a846:	2b04      	cmp	r3, #4
 800a848:	d10c      	bne.n	800a864 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 800a84a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d109      	bne.n	800a864 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a850:	4b8a      	ldr	r3, [pc, #552]	; (800aa7c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	08db      	lsrs	r3, r3, #3
 800a856:	f003 0303 	and.w	r3, r3, #3
 800a85a:	4a89      	ldr	r2, [pc, #548]	; (800aa80 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800a85c:	fa22 f303 	lsr.w	r3, r2, r3
 800a860:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a862:	e01e      	b.n	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a864:	4b85      	ldr	r3, [pc, #532]	; (800aa7c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a86c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a870:	d106      	bne.n	800a880 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 800a872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a874:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a878:	d102      	bne.n	800a880 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a87a:	4b82      	ldr	r3, [pc, #520]	; (800aa84 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800a87c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a87e:	e010      	b.n	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a880:	4b7e      	ldr	r3, [pc, #504]	; (800aa7c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a888:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a88c:	d106      	bne.n	800a89c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a88e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a890:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a894:	d102      	bne.n	800a89c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a896:	4b7c      	ldr	r3, [pc, #496]	; (800aa88 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a898:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a89a:	e002      	b.n	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a89c:	2300      	movs	r3, #0
 800a89e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a8a0:	e199      	b.n	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a8a2:	e198      	b.n	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a8a4:	4b79      	ldr	r3, [pc, #484]	; (800aa8c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a8a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a8a8:	e195      	b.n	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a8ae:	e192      	b.n	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a8b6:	d173      	bne.n	800a9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800a8b8:	4b70      	ldr	r3, [pc, #448]	; (800aa7c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a8ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a8bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a8c0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a8c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a8c8:	d02f      	beq.n	800a92a <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 800a8ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a8d0:	d863      	bhi.n	800a99a <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 800a8d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d004      	beq.n	800a8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 800a8d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a8de:	d012      	beq.n	800a906 <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 800a8e0:	e05b      	b.n	800a99a <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a8e2:	4b66      	ldr	r3, [pc, #408]	; (800aa7c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a8ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a8ee:	d107      	bne.n	800a900 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a8f0:	f107 0318 	add.w	r3, r7, #24
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	f000 f991 	bl	800ac1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a8fa:	69bb      	ldr	r3, [r7, #24]
 800a8fc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a8fe:	e16a      	b.n	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a900:	2300      	movs	r3, #0
 800a902:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a904:	e167      	b.n	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a906:	4b5d      	ldr	r3, [pc, #372]	; (800aa7c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a90e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a912:	d107      	bne.n	800a924 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a914:	f107 030c 	add.w	r3, r7, #12
 800a918:	4618      	mov	r0, r3
 800a91a:	f000 fad3 	bl	800aec4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a91e:	697b      	ldr	r3, [r7, #20]
 800a920:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a922:	e158      	b.n	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a924:	2300      	movs	r3, #0
 800a926:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a928:	e155      	b.n	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a92a:	4b54      	ldr	r3, [pc, #336]	; (800aa7c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a92c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a92e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a932:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a934:	4b51      	ldr	r3, [pc, #324]	; (800aa7c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	f003 0304 	and.w	r3, r3, #4
 800a93c:	2b04      	cmp	r3, #4
 800a93e:	d10c      	bne.n	800a95a <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 800a940:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a942:	2b00      	cmp	r3, #0
 800a944:	d109      	bne.n	800a95a <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a946:	4b4d      	ldr	r3, [pc, #308]	; (800aa7c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	08db      	lsrs	r3, r3, #3
 800a94c:	f003 0303 	and.w	r3, r3, #3
 800a950:	4a4b      	ldr	r2, [pc, #300]	; (800aa80 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800a952:	fa22 f303 	lsr.w	r3, r2, r3
 800a956:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a958:	e01e      	b.n	800a998 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a95a:	4b48      	ldr	r3, [pc, #288]	; (800aa7c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a962:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a966:	d106      	bne.n	800a976 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 800a968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a96a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a96e:	d102      	bne.n	800a976 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a970:	4b44      	ldr	r3, [pc, #272]	; (800aa84 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800a972:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a974:	e010      	b.n	800a998 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a976:	4b41      	ldr	r3, [pc, #260]	; (800aa7c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a97e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a982:	d106      	bne.n	800a992 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 800a984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a986:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a98a:	d102      	bne.n	800a992 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a98c:	4b3e      	ldr	r3, [pc, #248]	; (800aa88 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a98e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a990:	e002      	b.n	800a998 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a992:	2300      	movs	r3, #0
 800a994:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a996:	e11e      	b.n	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a998:	e11d      	b.n	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800a99a:	2300      	movs	r3, #0
 800a99c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a99e:	e11a      	b.n	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a9a6:	d133      	bne.n	800aa10 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800a9a8:	4b34      	ldr	r3, [pc, #208]	; (800aa7c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a9aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a9b0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a9b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d004      	beq.n	800a9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 800a9b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a9be:	d012      	beq.n	800a9e6 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 800a9c0:	e023      	b.n	800aa0a <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a9c2:	4b2e      	ldr	r3, [pc, #184]	; (800aa7c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a9ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a9ce:	d107      	bne.n	800a9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a9d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	f000 fbc9 	bl	800b16c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a9da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9dc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a9de:	e0fa      	b.n	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a9e4:	e0f7      	b.n	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a9e6:	4b25      	ldr	r3, [pc, #148]	; (800aa7c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a9ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a9f2:	d107      	bne.n	800aa04 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a9f4:	f107 0318 	add.w	r3, r7, #24
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	f000 f90f 	bl	800ac1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a9fe:	6a3b      	ldr	r3, [r7, #32]
 800aa00:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800aa02:	e0e8      	b.n	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800aa04:	2300      	movs	r3, #0
 800aa06:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa08:	e0e5      	b.n	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa0e:	e0e2      	b.n	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aa16:	f040 808f 	bne.w	800ab38 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800aa1a:	4b18      	ldr	r3, [pc, #96]	; (800aa7c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800aa1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa1e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800aa22:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800aa24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa26:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800aa2a:	d075      	beq.n	800ab18 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 800aa2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800aa32:	d87e      	bhi.n	800ab32 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800aa34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa3a:	d060      	beq.n	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 800aa3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa42:	d876      	bhi.n	800ab32 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800aa44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa46:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800aa4a:	d045      	beq.n	800aad8 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 800aa4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa4e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800aa52:	d86e      	bhi.n	800ab32 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800aa54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa5a:	d02b      	beq.n	800aab4 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 800aa5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa62:	d866      	bhi.n	800ab32 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800aa64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d004      	beq.n	800aa74 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 800aa6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa6c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aa70:	d00e      	beq.n	800aa90 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 800aa72:	e05e      	b.n	800ab32 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800aa74:	f000 f8bc 	bl	800abf0 <HAL_RCCEx_GetD3PCLK1Freq>
 800aa78:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800aa7a:	e0ac      	b.n	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800aa7c:	58024400 	.word	0x58024400
 800aa80:	03d09000 	.word	0x03d09000
 800aa84:	003d0900 	.word	0x003d0900
 800aa88:	02dc6c00 	.word	0x02dc6c00
 800aa8c:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aa90:	4b53      	ldr	r3, [pc, #332]	; (800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aa98:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aa9c:	d107      	bne.n	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa9e:	f107 0318 	add.w	r3, r7, #24
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	f000 f8ba 	bl	800ac1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800aaa8:	69fb      	ldr	r3, [r7, #28]
 800aaaa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800aaac:	e093      	b.n	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800aaae:	2300      	movs	r3, #0
 800aab0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aab2:	e090      	b.n	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aab4:	4b4a      	ldr	r3, [pc, #296]	; (800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aabc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aac0:	d107      	bne.n	800aad2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aac2:	f107 030c 	add.w	r3, r7, #12
 800aac6:	4618      	mov	r0, r3
 800aac8:	f000 f9fc 	bl	800aec4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800aacc:	693b      	ldr	r3, [r7, #16]
 800aace:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800aad0:	e081      	b.n	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800aad2:	2300      	movs	r3, #0
 800aad4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aad6:	e07e      	b.n	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800aad8:	4b41      	ldr	r3, [pc, #260]	; (800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	f003 0304 	and.w	r3, r3, #4
 800aae0:	2b04      	cmp	r3, #4
 800aae2:	d109      	bne.n	800aaf8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800aae4:	4b3e      	ldr	r3, [pc, #248]	; (800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	08db      	lsrs	r3, r3, #3
 800aaea:	f003 0303 	and.w	r3, r3, #3
 800aaee:	4a3d      	ldr	r2, [pc, #244]	; (800abe4 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800aaf0:	fa22 f303 	lsr.w	r3, r2, r3
 800aaf4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800aaf6:	e06e      	b.n	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800aaf8:	2300      	movs	r3, #0
 800aafa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aafc:	e06b      	b.n	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800aafe:	4b38      	ldr	r3, [pc, #224]	; (800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab0a:	d102      	bne.n	800ab12 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 800ab0c:	4b36      	ldr	r3, [pc, #216]	; (800abe8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800ab0e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ab10:	e061      	b.n	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800ab12:	2300      	movs	r3, #0
 800ab14:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ab16:	e05e      	b.n	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ab18:	4b31      	ldr	r3, [pc, #196]	; (800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab20:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ab24:	d102      	bne.n	800ab2c <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 800ab26:	4b31      	ldr	r3, [pc, #196]	; (800abec <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800ab28:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ab2a:	e054      	b.n	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ab30:	e051      	b.n	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800ab32:	2300      	movs	r3, #0
 800ab34:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ab36:	e04e      	b.n	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ab3e:	d148      	bne.n	800abd2 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800ab40:	4b27      	ldr	r3, [pc, #156]	; (800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ab42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab44:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ab48:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800ab4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ab50:	d02a      	beq.n	800aba8 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800ab52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ab58:	d838      	bhi.n	800abcc <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800ab5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d004      	beq.n	800ab6a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800ab60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ab66:	d00d      	beq.n	800ab84 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800ab68:	e030      	b.n	800abcc <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ab6a:	4b1d      	ldr	r3, [pc, #116]	; (800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ab76:	d102      	bne.n	800ab7e <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 800ab78:	4b1c      	ldr	r3, [pc, #112]	; (800abec <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800ab7a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ab7c:	e02b      	b.n	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ab7e:	2300      	movs	r3, #0
 800ab80:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ab82:	e028      	b.n	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ab84:	4b16      	ldr	r3, [pc, #88]	; (800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab8c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ab90:	d107      	bne.n	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ab92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ab96:	4618      	mov	r0, r3
 800ab98:	f000 fae8 	bl	800b16c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ab9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab9e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800aba0:	e019      	b.n	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800aba2:	2300      	movs	r3, #0
 800aba4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aba6:	e016      	b.n	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aba8:	4b0d      	ldr	r3, [pc, #52]	; (800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800abb0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800abb4:	d107      	bne.n	800abc6 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800abb6:	f107 0318 	add.w	r3, r7, #24
 800abba:	4618      	mov	r0, r3
 800abbc:	f000 f82e 	bl	800ac1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800abc0:	69fb      	ldr	r3, [r7, #28]
 800abc2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800abc4:	e007      	b.n	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800abc6:	2300      	movs	r3, #0
 800abc8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800abca:	e004      	b.n	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800abcc:	2300      	movs	r3, #0
 800abce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800abd0:	e001      	b.n	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 800abd2:	2300      	movs	r3, #0
 800abd4:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800abd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800abd8:	4618      	mov	r0, r3
 800abda:	3740      	adds	r7, #64	; 0x40
 800abdc:	46bd      	mov	sp, r7
 800abde:	bd80      	pop	{r7, pc}
 800abe0:	58024400 	.word	0x58024400
 800abe4:	03d09000 	.word	0x03d09000
 800abe8:	003d0900 	.word	0x003d0900
 800abec:	02dc6c00 	.word	0x02dc6c00

0800abf0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800abf4:	f7fe fb8e 	bl	8009314 <HAL_RCC_GetHCLKFreq>
 800abf8:	4602      	mov	r2, r0
 800abfa:	4b06      	ldr	r3, [pc, #24]	; (800ac14 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800abfc:	6a1b      	ldr	r3, [r3, #32]
 800abfe:	091b      	lsrs	r3, r3, #4
 800ac00:	f003 0307 	and.w	r3, r3, #7
 800ac04:	4904      	ldr	r1, [pc, #16]	; (800ac18 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800ac06:	5ccb      	ldrb	r3, [r1, r3]
 800ac08:	f003 031f 	and.w	r3, r3, #31
 800ac0c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800ac10:	4618      	mov	r0, r3
 800ac12:	bd80      	pop	{r7, pc}
 800ac14:	58024400 	.word	0x58024400
 800ac18:	08011610 	.word	0x08011610

0800ac1c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800ac1c:	b480      	push	{r7}
 800ac1e:	b089      	sub	sp, #36	; 0x24
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ac24:	4ba1      	ldr	r3, [pc, #644]	; (800aeac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac28:	f003 0303 	and.w	r3, r3, #3
 800ac2c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800ac2e:	4b9f      	ldr	r3, [pc, #636]	; (800aeac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac32:	0b1b      	lsrs	r3, r3, #12
 800ac34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ac38:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800ac3a:	4b9c      	ldr	r3, [pc, #624]	; (800aeac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac3e:	091b      	lsrs	r3, r3, #4
 800ac40:	f003 0301 	and.w	r3, r3, #1
 800ac44:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800ac46:	4b99      	ldr	r3, [pc, #612]	; (800aeac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac4a:	08db      	lsrs	r3, r3, #3
 800ac4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ac50:	693a      	ldr	r2, [r7, #16]
 800ac52:	fb02 f303 	mul.w	r3, r2, r3
 800ac56:	ee07 3a90 	vmov	s15, r3
 800ac5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac5e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800ac62:	697b      	ldr	r3, [r7, #20]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	f000 8111 	beq.w	800ae8c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800ac6a:	69bb      	ldr	r3, [r7, #24]
 800ac6c:	2b02      	cmp	r3, #2
 800ac6e:	f000 8083 	beq.w	800ad78 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800ac72:	69bb      	ldr	r3, [r7, #24]
 800ac74:	2b02      	cmp	r3, #2
 800ac76:	f200 80a1 	bhi.w	800adbc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800ac7a:	69bb      	ldr	r3, [r7, #24]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d003      	beq.n	800ac88 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800ac80:	69bb      	ldr	r3, [r7, #24]
 800ac82:	2b01      	cmp	r3, #1
 800ac84:	d056      	beq.n	800ad34 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800ac86:	e099      	b.n	800adbc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ac88:	4b88      	ldr	r3, [pc, #544]	; (800aeac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	f003 0320 	and.w	r3, r3, #32
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d02d      	beq.n	800acf0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ac94:	4b85      	ldr	r3, [pc, #532]	; (800aeac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	08db      	lsrs	r3, r3, #3
 800ac9a:	f003 0303 	and.w	r3, r3, #3
 800ac9e:	4a84      	ldr	r2, [pc, #528]	; (800aeb0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800aca0:	fa22 f303 	lsr.w	r3, r2, r3
 800aca4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800aca6:	68bb      	ldr	r3, [r7, #8]
 800aca8:	ee07 3a90 	vmov	s15, r3
 800acac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acb0:	697b      	ldr	r3, [r7, #20]
 800acb2:	ee07 3a90 	vmov	s15, r3
 800acb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acbe:	4b7b      	ldr	r3, [pc, #492]	; (800aeac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800acc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acc6:	ee07 3a90 	vmov	s15, r3
 800acca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acce:	ed97 6a03 	vldr	s12, [r7, #12]
 800acd2:	eddf 5a78 	vldr	s11, [pc, #480]	; 800aeb4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800acd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800acda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800acde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ace2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ace6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acea:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800acee:	e087      	b.n	800ae00 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800acf0:	697b      	ldr	r3, [r7, #20]
 800acf2:	ee07 3a90 	vmov	s15, r3
 800acf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acfa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800aeb8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800acfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad02:	4b6a      	ldr	r3, [pc, #424]	; (800aeac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad0a:	ee07 3a90 	vmov	s15, r3
 800ad0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad12:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad16:	eddf 5a67 	vldr	s11, [pc, #412]	; 800aeb4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ad1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad2e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ad32:	e065      	b.n	800ae00 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ad34:	697b      	ldr	r3, [r7, #20]
 800ad36:	ee07 3a90 	vmov	s15, r3
 800ad3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad3e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800aebc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ad42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad46:	4b59      	ldr	r3, [pc, #356]	; (800aeac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad4e:	ee07 3a90 	vmov	s15, r3
 800ad52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad56:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad5a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800aeb4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ad5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad72:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ad76:	e043      	b.n	800ae00 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ad78:	697b      	ldr	r3, [r7, #20]
 800ad7a:	ee07 3a90 	vmov	s15, r3
 800ad7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad82:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800aec0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800ad86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad8a:	4b48      	ldr	r3, [pc, #288]	; (800aeac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad92:	ee07 3a90 	vmov	s15, r3
 800ad96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad9a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad9e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800aeb4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ada2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ada6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800adaa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800adae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800adb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adb6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800adba:	e021      	b.n	800ae00 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800adbc:	697b      	ldr	r3, [r7, #20]
 800adbe:	ee07 3a90 	vmov	s15, r3
 800adc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adc6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800aebc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800adca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800adce:	4b37      	ldr	r3, [pc, #220]	; (800aeac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800add0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800add2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800add6:	ee07 3a90 	vmov	s15, r3
 800adda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800adde:	ed97 6a03 	vldr	s12, [r7, #12]
 800ade2:	eddf 5a34 	vldr	s11, [pc, #208]	; 800aeb4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ade6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800adea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800adee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800adf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800adf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adfa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800adfe:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800ae00:	4b2a      	ldr	r3, [pc, #168]	; (800aeac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae04:	0a5b      	lsrs	r3, r3, #9
 800ae06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae0a:	ee07 3a90 	vmov	s15, r3
 800ae0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ae16:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ae1a:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae26:	ee17 2a90 	vmov	r2, s15
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800ae2e:	4b1f      	ldr	r3, [pc, #124]	; (800aeac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae32:	0c1b      	lsrs	r3, r3, #16
 800ae34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae38:	ee07 3a90 	vmov	s15, r3
 800ae3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae40:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ae44:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ae48:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae54:	ee17 2a90 	vmov	r2, s15
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800ae5c:	4b13      	ldr	r3, [pc, #76]	; (800aeac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae60:	0e1b      	lsrs	r3, r3, #24
 800ae62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae66:	ee07 3a90 	vmov	s15, r3
 800ae6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ae72:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ae76:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae82:	ee17 2a90 	vmov	r2, s15
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800ae8a:	e008      	b.n	800ae9e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	2200      	movs	r2, #0
 800ae90:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	2200      	movs	r2, #0
 800ae96:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	609a      	str	r2, [r3, #8]
}
 800ae9e:	bf00      	nop
 800aea0:	3724      	adds	r7, #36	; 0x24
 800aea2:	46bd      	mov	sp, r7
 800aea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea8:	4770      	bx	lr
 800aeaa:	bf00      	nop
 800aeac:	58024400 	.word	0x58024400
 800aeb0:	03d09000 	.word	0x03d09000
 800aeb4:	46000000 	.word	0x46000000
 800aeb8:	4c742400 	.word	0x4c742400
 800aebc:	4a742400 	.word	0x4a742400
 800aec0:	4c371b00 	.word	0x4c371b00

0800aec4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800aec4:	b480      	push	{r7}
 800aec6:	b089      	sub	sp, #36	; 0x24
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800aecc:	4ba1      	ldr	r3, [pc, #644]	; (800b154 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aed0:	f003 0303 	and.w	r3, r3, #3
 800aed4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800aed6:	4b9f      	ldr	r3, [pc, #636]	; (800b154 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aeda:	0d1b      	lsrs	r3, r3, #20
 800aedc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aee0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800aee2:	4b9c      	ldr	r3, [pc, #624]	; (800b154 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aee6:	0a1b      	lsrs	r3, r3, #8
 800aee8:	f003 0301 	and.w	r3, r3, #1
 800aeec:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800aeee:	4b99      	ldr	r3, [pc, #612]	; (800b154 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aef2:	08db      	lsrs	r3, r3, #3
 800aef4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800aef8:	693a      	ldr	r2, [r7, #16]
 800aefa:	fb02 f303 	mul.w	r3, r2, r3
 800aefe:	ee07 3a90 	vmov	s15, r3
 800af02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af06:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800af0a:	697b      	ldr	r3, [r7, #20]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	f000 8111 	beq.w	800b134 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800af12:	69bb      	ldr	r3, [r7, #24]
 800af14:	2b02      	cmp	r3, #2
 800af16:	f000 8083 	beq.w	800b020 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800af1a:	69bb      	ldr	r3, [r7, #24]
 800af1c:	2b02      	cmp	r3, #2
 800af1e:	f200 80a1 	bhi.w	800b064 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800af22:	69bb      	ldr	r3, [r7, #24]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d003      	beq.n	800af30 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800af28:	69bb      	ldr	r3, [r7, #24]
 800af2a:	2b01      	cmp	r3, #1
 800af2c:	d056      	beq.n	800afdc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800af2e:	e099      	b.n	800b064 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800af30:	4b88      	ldr	r3, [pc, #544]	; (800b154 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	f003 0320 	and.w	r3, r3, #32
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d02d      	beq.n	800af98 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800af3c:	4b85      	ldr	r3, [pc, #532]	; (800b154 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	08db      	lsrs	r3, r3, #3
 800af42:	f003 0303 	and.w	r3, r3, #3
 800af46:	4a84      	ldr	r2, [pc, #528]	; (800b158 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800af48:	fa22 f303 	lsr.w	r3, r2, r3
 800af4c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800af4e:	68bb      	ldr	r3, [r7, #8]
 800af50:	ee07 3a90 	vmov	s15, r3
 800af54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af58:	697b      	ldr	r3, [r7, #20]
 800af5a:	ee07 3a90 	vmov	s15, r3
 800af5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af66:	4b7b      	ldr	r3, [pc, #492]	; (800b154 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af6e:	ee07 3a90 	vmov	s15, r3
 800af72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af76:	ed97 6a03 	vldr	s12, [r7, #12]
 800af7a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b15c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800af7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af92:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800af96:	e087      	b.n	800b0a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800af98:	697b      	ldr	r3, [r7, #20]
 800af9a:	ee07 3a90 	vmov	s15, r3
 800af9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afa2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b160 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800afa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800afaa:	4b6a      	ldr	r3, [pc, #424]	; (800b154 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800afac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afb2:	ee07 3a90 	vmov	s15, r3
 800afb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afba:	ed97 6a03 	vldr	s12, [r7, #12]
 800afbe:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b15c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800afc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800afc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800afca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800afce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800afd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afd6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800afda:	e065      	b.n	800b0a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800afdc:	697b      	ldr	r3, [r7, #20]
 800afde:	ee07 3a90 	vmov	s15, r3
 800afe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afe6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b164 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800afea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800afee:	4b59      	ldr	r3, [pc, #356]	; (800b154 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aff2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aff6:	ee07 3a90 	vmov	s15, r3
 800affa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800affe:	ed97 6a03 	vldr	s12, [r7, #12]
 800b002:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b15c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b006:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b00a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b00e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b012:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b016:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b01a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b01e:	e043      	b.n	800b0a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b020:	697b      	ldr	r3, [r7, #20]
 800b022:	ee07 3a90 	vmov	s15, r3
 800b026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b02a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b168 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b02e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b032:	4b48      	ldr	r3, [pc, #288]	; (800b154 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b036:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b03a:	ee07 3a90 	vmov	s15, r3
 800b03e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b042:	ed97 6a03 	vldr	s12, [r7, #12]
 800b046:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b15c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b04a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b04e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b052:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b056:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b05a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b05e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b062:	e021      	b.n	800b0a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b064:	697b      	ldr	r3, [r7, #20]
 800b066:	ee07 3a90 	vmov	s15, r3
 800b06a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b06e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b164 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b072:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b076:	4b37      	ldr	r3, [pc, #220]	; (800b154 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b07a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b07e:	ee07 3a90 	vmov	s15, r3
 800b082:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b086:	ed97 6a03 	vldr	s12, [r7, #12]
 800b08a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b15c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b08e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b092:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b096:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b09a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b09e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b0a6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800b0a8:	4b2a      	ldr	r3, [pc, #168]	; (800b154 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b0aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0ac:	0a5b      	lsrs	r3, r3, #9
 800b0ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b0b2:	ee07 3a90 	vmov	s15, r3
 800b0b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b0be:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b0c2:	edd7 6a07 	vldr	s13, [r7, #28]
 800b0c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b0ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b0ce:	ee17 2a90 	vmov	r2, s15
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800b0d6:	4b1f      	ldr	r3, [pc, #124]	; (800b154 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b0d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0da:	0c1b      	lsrs	r3, r3, #16
 800b0dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b0e0:	ee07 3a90 	vmov	s15, r3
 800b0e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b0ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b0f0:	edd7 6a07 	vldr	s13, [r7, #28]
 800b0f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b0f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b0fc:	ee17 2a90 	vmov	r2, s15
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800b104:	4b13      	ldr	r3, [pc, #76]	; (800b154 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b108:	0e1b      	lsrs	r3, r3, #24
 800b10a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b10e:	ee07 3a90 	vmov	s15, r3
 800b112:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b116:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b11a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b11e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b122:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b126:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b12a:	ee17 2a90 	vmov	r2, s15
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b132:	e008      	b.n	800b146 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	2200      	movs	r2, #0
 800b138:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	2200      	movs	r2, #0
 800b13e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	2200      	movs	r2, #0
 800b144:	609a      	str	r2, [r3, #8]
}
 800b146:	bf00      	nop
 800b148:	3724      	adds	r7, #36	; 0x24
 800b14a:	46bd      	mov	sp, r7
 800b14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b150:	4770      	bx	lr
 800b152:	bf00      	nop
 800b154:	58024400 	.word	0x58024400
 800b158:	03d09000 	.word	0x03d09000
 800b15c:	46000000 	.word	0x46000000
 800b160:	4c742400 	.word	0x4c742400
 800b164:	4a742400 	.word	0x4a742400
 800b168:	4c371b00 	.word	0x4c371b00

0800b16c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800b16c:	b480      	push	{r7}
 800b16e:	b089      	sub	sp, #36	; 0x24
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b174:	4ba0      	ldr	r3, [pc, #640]	; (800b3f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b178:	f003 0303 	and.w	r3, r3, #3
 800b17c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800b17e:	4b9e      	ldr	r3, [pc, #632]	; (800b3f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b182:	091b      	lsrs	r3, r3, #4
 800b184:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b188:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b18a:	4b9b      	ldr	r3, [pc, #620]	; (800b3f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b18c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b18e:	f003 0301 	and.w	r3, r3, #1
 800b192:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800b194:	4b98      	ldr	r3, [pc, #608]	; (800b3f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b196:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b198:	08db      	lsrs	r3, r3, #3
 800b19a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b19e:	693a      	ldr	r2, [r7, #16]
 800b1a0:	fb02 f303 	mul.w	r3, r2, r3
 800b1a4:	ee07 3a90 	vmov	s15, r3
 800b1a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1ac:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b1b0:	697b      	ldr	r3, [r7, #20]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	f000 8111 	beq.w	800b3da <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b1b8:	69bb      	ldr	r3, [r7, #24]
 800b1ba:	2b02      	cmp	r3, #2
 800b1bc:	f000 8083 	beq.w	800b2c6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b1c0:	69bb      	ldr	r3, [r7, #24]
 800b1c2:	2b02      	cmp	r3, #2
 800b1c4:	f200 80a1 	bhi.w	800b30a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b1c8:	69bb      	ldr	r3, [r7, #24]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d003      	beq.n	800b1d6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b1ce:	69bb      	ldr	r3, [r7, #24]
 800b1d0:	2b01      	cmp	r3, #1
 800b1d2:	d056      	beq.n	800b282 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b1d4:	e099      	b.n	800b30a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b1d6:	4b88      	ldr	r3, [pc, #544]	; (800b3f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	f003 0320 	and.w	r3, r3, #32
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d02d      	beq.n	800b23e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b1e2:	4b85      	ldr	r3, [pc, #532]	; (800b3f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	08db      	lsrs	r3, r3, #3
 800b1e8:	f003 0303 	and.w	r3, r3, #3
 800b1ec:	4a83      	ldr	r2, [pc, #524]	; (800b3fc <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b1ee:	fa22 f303 	lsr.w	r3, r2, r3
 800b1f2:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b1f4:	68bb      	ldr	r3, [r7, #8]
 800b1f6:	ee07 3a90 	vmov	s15, r3
 800b1fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1fe:	697b      	ldr	r3, [r7, #20]
 800b200:	ee07 3a90 	vmov	s15, r3
 800b204:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b208:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b20c:	4b7a      	ldr	r3, [pc, #488]	; (800b3f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b20e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b210:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b214:	ee07 3a90 	vmov	s15, r3
 800b218:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b21c:	ed97 6a03 	vldr	s12, [r7, #12]
 800b220:	eddf 5a77 	vldr	s11, [pc, #476]	; 800b400 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b224:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b228:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b22c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b230:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b234:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b238:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b23c:	e087      	b.n	800b34e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b23e:	697b      	ldr	r3, [r7, #20]
 800b240:	ee07 3a90 	vmov	s15, r3
 800b244:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b248:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800b404 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b24c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b250:	4b69      	ldr	r3, [pc, #420]	; (800b3f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b254:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b258:	ee07 3a90 	vmov	s15, r3
 800b25c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b260:	ed97 6a03 	vldr	s12, [r7, #12]
 800b264:	eddf 5a66 	vldr	s11, [pc, #408]	; 800b400 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b268:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b26c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b270:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b274:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b278:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b27c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b280:	e065      	b.n	800b34e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b282:	697b      	ldr	r3, [r7, #20]
 800b284:	ee07 3a90 	vmov	s15, r3
 800b288:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b28c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800b408 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b290:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b294:	4b58      	ldr	r3, [pc, #352]	; (800b3f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b298:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b29c:	ee07 3a90 	vmov	s15, r3
 800b2a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2a4:	ed97 6a03 	vldr	s12, [r7, #12]
 800b2a8:	eddf 5a55 	vldr	s11, [pc, #340]	; 800b400 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b2ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b2b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b2b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b2b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b2bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2c0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b2c4:	e043      	b.n	800b34e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b2c6:	697b      	ldr	r3, [r7, #20]
 800b2c8:	ee07 3a90 	vmov	s15, r3
 800b2cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2d0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800b40c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b2d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b2d8:	4b47      	ldr	r3, [pc, #284]	; (800b3f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b2da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2e0:	ee07 3a90 	vmov	s15, r3
 800b2e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2e8:	ed97 6a03 	vldr	s12, [r7, #12]
 800b2ec:	eddf 5a44 	vldr	s11, [pc, #272]	; 800b400 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b2f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b2f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b2f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b2fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b300:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b304:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b308:	e021      	b.n	800b34e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b30a:	697b      	ldr	r3, [r7, #20]
 800b30c:	ee07 3a90 	vmov	s15, r3
 800b310:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b314:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800b404 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b318:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b31c:	4b36      	ldr	r3, [pc, #216]	; (800b3f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b31e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b320:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b324:	ee07 3a90 	vmov	s15, r3
 800b328:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b32c:	ed97 6a03 	vldr	s12, [r7, #12]
 800b330:	eddf 5a33 	vldr	s11, [pc, #204]	; 800b400 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b334:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b338:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b33c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b340:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b344:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b348:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b34c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800b34e:	4b2a      	ldr	r3, [pc, #168]	; (800b3f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b352:	0a5b      	lsrs	r3, r3, #9
 800b354:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b358:	ee07 3a90 	vmov	s15, r3
 800b35c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b360:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b364:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b368:	edd7 6a07 	vldr	s13, [r7, #28]
 800b36c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b370:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b374:	ee17 2a90 	vmov	r2, s15
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800b37c:	4b1e      	ldr	r3, [pc, #120]	; (800b3f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b37e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b380:	0c1b      	lsrs	r3, r3, #16
 800b382:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b386:	ee07 3a90 	vmov	s15, r3
 800b38a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b38e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b392:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b396:	edd7 6a07 	vldr	s13, [r7, #28]
 800b39a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b39e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b3a2:	ee17 2a90 	vmov	r2, s15
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800b3aa:	4b13      	ldr	r3, [pc, #76]	; (800b3f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b3ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3ae:	0e1b      	lsrs	r3, r3, #24
 800b3b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b3b4:	ee07 3a90 	vmov	s15, r3
 800b3b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b3c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b3c4:	edd7 6a07 	vldr	s13, [r7, #28]
 800b3c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b3cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b3d0:	ee17 2a90 	vmov	r2, s15
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b3d8:	e008      	b.n	800b3ec <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	2200      	movs	r2, #0
 800b3de:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	2200      	movs	r2, #0
 800b3e4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	2200      	movs	r2, #0
 800b3ea:	609a      	str	r2, [r3, #8]
}
 800b3ec:	bf00      	nop
 800b3ee:	3724      	adds	r7, #36	; 0x24
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f6:	4770      	bx	lr
 800b3f8:	58024400 	.word	0x58024400
 800b3fc:	03d09000 	.word	0x03d09000
 800b400:	46000000 	.word	0x46000000
 800b404:	4c742400 	.word	0x4c742400
 800b408:	4a742400 	.word	0x4a742400
 800b40c:	4c371b00 	.word	0x4c371b00

0800b410 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b410:	b580      	push	{r7, lr}
 800b412:	b084      	sub	sp, #16
 800b414:	af00      	add	r7, sp, #0
 800b416:	6078      	str	r0, [r7, #4]
 800b418:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b41a:	2300      	movs	r3, #0
 800b41c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b41e:	4b53      	ldr	r3, [pc, #332]	; (800b56c <RCCEx_PLL2_Config+0x15c>)
 800b420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b422:	f003 0303 	and.w	r3, r3, #3
 800b426:	2b03      	cmp	r3, #3
 800b428:	d101      	bne.n	800b42e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b42a:	2301      	movs	r3, #1
 800b42c:	e099      	b.n	800b562 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b42e:	4b4f      	ldr	r3, [pc, #316]	; (800b56c <RCCEx_PLL2_Config+0x15c>)
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	4a4e      	ldr	r2, [pc, #312]	; (800b56c <RCCEx_PLL2_Config+0x15c>)
 800b434:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b438:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b43a:	f7f8 f95b 	bl	80036f4 <HAL_GetTick>
 800b43e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b440:	e008      	b.n	800b454 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b442:	f7f8 f957 	bl	80036f4 <HAL_GetTick>
 800b446:	4602      	mov	r2, r0
 800b448:	68bb      	ldr	r3, [r7, #8]
 800b44a:	1ad3      	subs	r3, r2, r3
 800b44c:	2b02      	cmp	r3, #2
 800b44e:	d901      	bls.n	800b454 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b450:	2303      	movs	r3, #3
 800b452:	e086      	b.n	800b562 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b454:	4b45      	ldr	r3, [pc, #276]	; (800b56c <RCCEx_PLL2_Config+0x15c>)
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d1f0      	bne.n	800b442 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b460:	4b42      	ldr	r3, [pc, #264]	; (800b56c <RCCEx_PLL2_Config+0x15c>)
 800b462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b464:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	031b      	lsls	r3, r3, #12
 800b46e:	493f      	ldr	r1, [pc, #252]	; (800b56c <RCCEx_PLL2_Config+0x15c>)
 800b470:	4313      	orrs	r3, r2
 800b472:	628b      	str	r3, [r1, #40]	; 0x28
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	685b      	ldr	r3, [r3, #4]
 800b478:	3b01      	subs	r3, #1
 800b47a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	689b      	ldr	r3, [r3, #8]
 800b482:	3b01      	subs	r3, #1
 800b484:	025b      	lsls	r3, r3, #9
 800b486:	b29b      	uxth	r3, r3
 800b488:	431a      	orrs	r2, r3
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	68db      	ldr	r3, [r3, #12]
 800b48e:	3b01      	subs	r3, #1
 800b490:	041b      	lsls	r3, r3, #16
 800b492:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b496:	431a      	orrs	r2, r3
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	691b      	ldr	r3, [r3, #16]
 800b49c:	3b01      	subs	r3, #1
 800b49e:	061b      	lsls	r3, r3, #24
 800b4a0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b4a4:	4931      	ldr	r1, [pc, #196]	; (800b56c <RCCEx_PLL2_Config+0x15c>)
 800b4a6:	4313      	orrs	r3, r2
 800b4a8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b4aa:	4b30      	ldr	r3, [pc, #192]	; (800b56c <RCCEx_PLL2_Config+0x15c>)
 800b4ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4ae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	695b      	ldr	r3, [r3, #20]
 800b4b6:	492d      	ldr	r1, [pc, #180]	; (800b56c <RCCEx_PLL2_Config+0x15c>)
 800b4b8:	4313      	orrs	r3, r2
 800b4ba:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b4bc:	4b2b      	ldr	r3, [pc, #172]	; (800b56c <RCCEx_PLL2_Config+0x15c>)
 800b4be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4c0:	f023 0220 	bic.w	r2, r3, #32
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	699b      	ldr	r3, [r3, #24]
 800b4c8:	4928      	ldr	r1, [pc, #160]	; (800b56c <RCCEx_PLL2_Config+0x15c>)
 800b4ca:	4313      	orrs	r3, r2
 800b4cc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b4ce:	4b27      	ldr	r3, [pc, #156]	; (800b56c <RCCEx_PLL2_Config+0x15c>)
 800b4d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4d2:	4a26      	ldr	r2, [pc, #152]	; (800b56c <RCCEx_PLL2_Config+0x15c>)
 800b4d4:	f023 0310 	bic.w	r3, r3, #16
 800b4d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b4da:	4b24      	ldr	r3, [pc, #144]	; (800b56c <RCCEx_PLL2_Config+0x15c>)
 800b4dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b4de:	4b24      	ldr	r3, [pc, #144]	; (800b570 <RCCEx_PLL2_Config+0x160>)
 800b4e0:	4013      	ands	r3, r2
 800b4e2:	687a      	ldr	r2, [r7, #4]
 800b4e4:	69d2      	ldr	r2, [r2, #28]
 800b4e6:	00d2      	lsls	r2, r2, #3
 800b4e8:	4920      	ldr	r1, [pc, #128]	; (800b56c <RCCEx_PLL2_Config+0x15c>)
 800b4ea:	4313      	orrs	r3, r2
 800b4ec:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b4ee:	4b1f      	ldr	r3, [pc, #124]	; (800b56c <RCCEx_PLL2_Config+0x15c>)
 800b4f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4f2:	4a1e      	ldr	r2, [pc, #120]	; (800b56c <RCCEx_PLL2_Config+0x15c>)
 800b4f4:	f043 0310 	orr.w	r3, r3, #16
 800b4f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b4fa:	683b      	ldr	r3, [r7, #0]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d106      	bne.n	800b50e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b500:	4b1a      	ldr	r3, [pc, #104]	; (800b56c <RCCEx_PLL2_Config+0x15c>)
 800b502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b504:	4a19      	ldr	r2, [pc, #100]	; (800b56c <RCCEx_PLL2_Config+0x15c>)
 800b506:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b50a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b50c:	e00f      	b.n	800b52e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b50e:	683b      	ldr	r3, [r7, #0]
 800b510:	2b01      	cmp	r3, #1
 800b512:	d106      	bne.n	800b522 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b514:	4b15      	ldr	r3, [pc, #84]	; (800b56c <RCCEx_PLL2_Config+0x15c>)
 800b516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b518:	4a14      	ldr	r2, [pc, #80]	; (800b56c <RCCEx_PLL2_Config+0x15c>)
 800b51a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b51e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b520:	e005      	b.n	800b52e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b522:	4b12      	ldr	r3, [pc, #72]	; (800b56c <RCCEx_PLL2_Config+0x15c>)
 800b524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b526:	4a11      	ldr	r2, [pc, #68]	; (800b56c <RCCEx_PLL2_Config+0x15c>)
 800b528:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b52c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b52e:	4b0f      	ldr	r3, [pc, #60]	; (800b56c <RCCEx_PLL2_Config+0x15c>)
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	4a0e      	ldr	r2, [pc, #56]	; (800b56c <RCCEx_PLL2_Config+0x15c>)
 800b534:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b538:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b53a:	f7f8 f8db 	bl	80036f4 <HAL_GetTick>
 800b53e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b540:	e008      	b.n	800b554 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b542:	f7f8 f8d7 	bl	80036f4 <HAL_GetTick>
 800b546:	4602      	mov	r2, r0
 800b548:	68bb      	ldr	r3, [r7, #8]
 800b54a:	1ad3      	subs	r3, r2, r3
 800b54c:	2b02      	cmp	r3, #2
 800b54e:	d901      	bls.n	800b554 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b550:	2303      	movs	r3, #3
 800b552:	e006      	b.n	800b562 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b554:	4b05      	ldr	r3, [pc, #20]	; (800b56c <RCCEx_PLL2_Config+0x15c>)
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d0f0      	beq.n	800b542 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b560:	7bfb      	ldrb	r3, [r7, #15]
}
 800b562:	4618      	mov	r0, r3
 800b564:	3710      	adds	r7, #16
 800b566:	46bd      	mov	sp, r7
 800b568:	bd80      	pop	{r7, pc}
 800b56a:	bf00      	nop
 800b56c:	58024400 	.word	0x58024400
 800b570:	ffff0007 	.word	0xffff0007

0800b574 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b574:	b580      	push	{r7, lr}
 800b576:	b084      	sub	sp, #16
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]
 800b57c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b57e:	2300      	movs	r3, #0
 800b580:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b582:	4b53      	ldr	r3, [pc, #332]	; (800b6d0 <RCCEx_PLL3_Config+0x15c>)
 800b584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b586:	f003 0303 	and.w	r3, r3, #3
 800b58a:	2b03      	cmp	r3, #3
 800b58c:	d101      	bne.n	800b592 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b58e:	2301      	movs	r3, #1
 800b590:	e099      	b.n	800b6c6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b592:	4b4f      	ldr	r3, [pc, #316]	; (800b6d0 <RCCEx_PLL3_Config+0x15c>)
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	4a4e      	ldr	r2, [pc, #312]	; (800b6d0 <RCCEx_PLL3_Config+0x15c>)
 800b598:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b59c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b59e:	f7f8 f8a9 	bl	80036f4 <HAL_GetTick>
 800b5a2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b5a4:	e008      	b.n	800b5b8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b5a6:	f7f8 f8a5 	bl	80036f4 <HAL_GetTick>
 800b5aa:	4602      	mov	r2, r0
 800b5ac:	68bb      	ldr	r3, [r7, #8]
 800b5ae:	1ad3      	subs	r3, r2, r3
 800b5b0:	2b02      	cmp	r3, #2
 800b5b2:	d901      	bls.n	800b5b8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b5b4:	2303      	movs	r3, #3
 800b5b6:	e086      	b.n	800b6c6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b5b8:	4b45      	ldr	r3, [pc, #276]	; (800b6d0 <RCCEx_PLL3_Config+0x15c>)
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d1f0      	bne.n	800b5a6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b5c4:	4b42      	ldr	r3, [pc, #264]	; (800b6d0 <RCCEx_PLL3_Config+0x15c>)
 800b5c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5c8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	051b      	lsls	r3, r3, #20
 800b5d2:	493f      	ldr	r1, [pc, #252]	; (800b6d0 <RCCEx_PLL3_Config+0x15c>)
 800b5d4:	4313      	orrs	r3, r2
 800b5d6:	628b      	str	r3, [r1, #40]	; 0x28
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	685b      	ldr	r3, [r3, #4]
 800b5dc:	3b01      	subs	r3, #1
 800b5de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	689b      	ldr	r3, [r3, #8]
 800b5e6:	3b01      	subs	r3, #1
 800b5e8:	025b      	lsls	r3, r3, #9
 800b5ea:	b29b      	uxth	r3, r3
 800b5ec:	431a      	orrs	r2, r3
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	68db      	ldr	r3, [r3, #12]
 800b5f2:	3b01      	subs	r3, #1
 800b5f4:	041b      	lsls	r3, r3, #16
 800b5f6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b5fa:	431a      	orrs	r2, r3
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	691b      	ldr	r3, [r3, #16]
 800b600:	3b01      	subs	r3, #1
 800b602:	061b      	lsls	r3, r3, #24
 800b604:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b608:	4931      	ldr	r1, [pc, #196]	; (800b6d0 <RCCEx_PLL3_Config+0x15c>)
 800b60a:	4313      	orrs	r3, r2
 800b60c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b60e:	4b30      	ldr	r3, [pc, #192]	; (800b6d0 <RCCEx_PLL3_Config+0x15c>)
 800b610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b612:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	695b      	ldr	r3, [r3, #20]
 800b61a:	492d      	ldr	r1, [pc, #180]	; (800b6d0 <RCCEx_PLL3_Config+0x15c>)
 800b61c:	4313      	orrs	r3, r2
 800b61e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b620:	4b2b      	ldr	r3, [pc, #172]	; (800b6d0 <RCCEx_PLL3_Config+0x15c>)
 800b622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b624:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	699b      	ldr	r3, [r3, #24]
 800b62c:	4928      	ldr	r1, [pc, #160]	; (800b6d0 <RCCEx_PLL3_Config+0x15c>)
 800b62e:	4313      	orrs	r3, r2
 800b630:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b632:	4b27      	ldr	r3, [pc, #156]	; (800b6d0 <RCCEx_PLL3_Config+0x15c>)
 800b634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b636:	4a26      	ldr	r2, [pc, #152]	; (800b6d0 <RCCEx_PLL3_Config+0x15c>)
 800b638:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b63c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b63e:	4b24      	ldr	r3, [pc, #144]	; (800b6d0 <RCCEx_PLL3_Config+0x15c>)
 800b640:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b642:	4b24      	ldr	r3, [pc, #144]	; (800b6d4 <RCCEx_PLL3_Config+0x160>)
 800b644:	4013      	ands	r3, r2
 800b646:	687a      	ldr	r2, [r7, #4]
 800b648:	69d2      	ldr	r2, [r2, #28]
 800b64a:	00d2      	lsls	r2, r2, #3
 800b64c:	4920      	ldr	r1, [pc, #128]	; (800b6d0 <RCCEx_PLL3_Config+0x15c>)
 800b64e:	4313      	orrs	r3, r2
 800b650:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b652:	4b1f      	ldr	r3, [pc, #124]	; (800b6d0 <RCCEx_PLL3_Config+0x15c>)
 800b654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b656:	4a1e      	ldr	r2, [pc, #120]	; (800b6d0 <RCCEx_PLL3_Config+0x15c>)
 800b658:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b65c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b65e:	683b      	ldr	r3, [r7, #0]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d106      	bne.n	800b672 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b664:	4b1a      	ldr	r3, [pc, #104]	; (800b6d0 <RCCEx_PLL3_Config+0x15c>)
 800b666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b668:	4a19      	ldr	r2, [pc, #100]	; (800b6d0 <RCCEx_PLL3_Config+0x15c>)
 800b66a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b66e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b670:	e00f      	b.n	800b692 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b672:	683b      	ldr	r3, [r7, #0]
 800b674:	2b01      	cmp	r3, #1
 800b676:	d106      	bne.n	800b686 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b678:	4b15      	ldr	r3, [pc, #84]	; (800b6d0 <RCCEx_PLL3_Config+0x15c>)
 800b67a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b67c:	4a14      	ldr	r2, [pc, #80]	; (800b6d0 <RCCEx_PLL3_Config+0x15c>)
 800b67e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b682:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b684:	e005      	b.n	800b692 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b686:	4b12      	ldr	r3, [pc, #72]	; (800b6d0 <RCCEx_PLL3_Config+0x15c>)
 800b688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b68a:	4a11      	ldr	r2, [pc, #68]	; (800b6d0 <RCCEx_PLL3_Config+0x15c>)
 800b68c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b690:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b692:	4b0f      	ldr	r3, [pc, #60]	; (800b6d0 <RCCEx_PLL3_Config+0x15c>)
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	4a0e      	ldr	r2, [pc, #56]	; (800b6d0 <RCCEx_PLL3_Config+0x15c>)
 800b698:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b69c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b69e:	f7f8 f829 	bl	80036f4 <HAL_GetTick>
 800b6a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b6a4:	e008      	b.n	800b6b8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b6a6:	f7f8 f825 	bl	80036f4 <HAL_GetTick>
 800b6aa:	4602      	mov	r2, r0
 800b6ac:	68bb      	ldr	r3, [r7, #8]
 800b6ae:	1ad3      	subs	r3, r2, r3
 800b6b0:	2b02      	cmp	r3, #2
 800b6b2:	d901      	bls.n	800b6b8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b6b4:	2303      	movs	r3, #3
 800b6b6:	e006      	b.n	800b6c6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b6b8:	4b05      	ldr	r3, [pc, #20]	; (800b6d0 <RCCEx_PLL3_Config+0x15c>)
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d0f0      	beq.n	800b6a6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b6c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	3710      	adds	r7, #16
 800b6ca:	46bd      	mov	sp, r7
 800b6cc:	bd80      	pop	{r7, pc}
 800b6ce:	bf00      	nop
 800b6d0:	58024400 	.word	0x58024400
 800b6d4:	ffff0007 	.word	0xffff0007

0800b6d8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b084      	sub	sp, #16
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d101      	bne.n	800b6ee <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800b6ea:	2301      	movs	r3, #1
 800b6ec:	e0eb      	b.n	800b8c6 <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	2200      	movs	r2, #0
 800b6f2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	4a75      	ldr	r2, [pc, #468]	; (800b8d0 <HAL_SPI_Init+0x1f8>)
 800b6fa:	4293      	cmp	r3, r2
 800b6fc:	d00f      	beq.n	800b71e <HAL_SPI_Init+0x46>
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	4a74      	ldr	r2, [pc, #464]	; (800b8d4 <HAL_SPI_Init+0x1fc>)
 800b704:	4293      	cmp	r3, r2
 800b706:	d00a      	beq.n	800b71e <HAL_SPI_Init+0x46>
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	4a72      	ldr	r2, [pc, #456]	; (800b8d8 <HAL_SPI_Init+0x200>)
 800b70e:	4293      	cmp	r3, r2
 800b710:	d005      	beq.n	800b71e <HAL_SPI_Init+0x46>
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	68db      	ldr	r3, [r3, #12]
 800b716:	2b0f      	cmp	r3, #15
 800b718:	d901      	bls.n	800b71e <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800b71a:	2301      	movs	r3, #1
 800b71c:	e0d3      	b.n	800b8c6 <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b71e:	6878      	ldr	r0, [r7, #4]
 800b720:	f000 f8dc 	bl	800b8dc <SPI_GetPacketSize>
 800b724:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	4a69      	ldr	r2, [pc, #420]	; (800b8d0 <HAL_SPI_Init+0x1f8>)
 800b72c:	4293      	cmp	r3, r2
 800b72e:	d00c      	beq.n	800b74a <HAL_SPI_Init+0x72>
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	4a67      	ldr	r2, [pc, #412]	; (800b8d4 <HAL_SPI_Init+0x1fc>)
 800b736:	4293      	cmp	r3, r2
 800b738:	d007      	beq.n	800b74a <HAL_SPI_Init+0x72>
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	4a66      	ldr	r2, [pc, #408]	; (800b8d8 <HAL_SPI_Init+0x200>)
 800b740:	4293      	cmp	r3, r2
 800b742:	d002      	beq.n	800b74a <HAL_SPI_Init+0x72>
 800b744:	68bb      	ldr	r3, [r7, #8]
 800b746:	2b08      	cmp	r3, #8
 800b748:	d811      	bhi.n	800b76e <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b74e:	4a60      	ldr	r2, [pc, #384]	; (800b8d0 <HAL_SPI_Init+0x1f8>)
 800b750:	4293      	cmp	r3, r2
 800b752:	d009      	beq.n	800b768 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	4a5e      	ldr	r2, [pc, #376]	; (800b8d4 <HAL_SPI_Init+0x1fc>)
 800b75a:	4293      	cmp	r3, r2
 800b75c:	d004      	beq.n	800b768 <HAL_SPI_Init+0x90>
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	4a5d      	ldr	r2, [pc, #372]	; (800b8d8 <HAL_SPI_Init+0x200>)
 800b764:	4293      	cmp	r3, r2
 800b766:	d104      	bne.n	800b772 <HAL_SPI_Init+0x9a>
 800b768:	68bb      	ldr	r3, [r7, #8]
 800b76a:	2b10      	cmp	r3, #16
 800b76c:	d901      	bls.n	800b772 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800b76e:	2301      	movs	r3, #1
 800b770:	e0a9      	b.n	800b8c6 <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b778:	b2db      	uxtb	r3, r3
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d106      	bne.n	800b78c <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	2200      	movs	r2, #0
 800b782:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b786:	6878      	ldr	r0, [r7, #4]
 800b788:	f7f7 f94a 	bl	8002a20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	2202      	movs	r2, #2
 800b790:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	681a      	ldr	r2, [r3, #0]
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	f022 0201 	bic.w	r2, r2, #1
 800b7a2:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	699b      	ldr	r3, [r3, #24]
 800b7a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b7ac:	d119      	bne.n	800b7e2 <HAL_SPI_Init+0x10a>
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	685b      	ldr	r3, [r3, #4]
 800b7b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b7b6:	d103      	bne.n	800b7c0 <HAL_SPI_Init+0xe8>
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d008      	beq.n	800b7d2 <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d10c      	bne.n	800b7e2 <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b7d0:	d107      	bne.n	800b7e2 <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	681a      	ldr	r2, [r3, #0]
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b7e0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	69da      	ldr	r2, [r3, #28]
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7ea:	431a      	orrs	r2, r3
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	431a      	orrs	r2, r3
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7f4:	ea42 0103 	orr.w	r1, r2, r3
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	68da      	ldr	r2, [r3, #12]
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	430a      	orrs	r2, r1
 800b802:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b80c:	431a      	orrs	r2, r3
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b812:	431a      	orrs	r2, r3
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	699b      	ldr	r3, [r3, #24]
 800b818:	431a      	orrs	r2, r3
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	691b      	ldr	r3, [r3, #16]
 800b81e:	431a      	orrs	r2, r3
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	695b      	ldr	r3, [r3, #20]
 800b824:	431a      	orrs	r2, r3
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	6a1b      	ldr	r3, [r3, #32]
 800b82a:	431a      	orrs	r2, r3
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	685b      	ldr	r3, [r3, #4]
 800b830:	431a      	orrs	r2, r3
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b836:	431a      	orrs	r2, r3
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	689b      	ldr	r3, [r3, #8]
 800b83c:	431a      	orrs	r2, r3
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b842:	ea42 0103 	orr.w	r1, r2, r3
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	430a      	orrs	r2, r1
 800b850:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	685b      	ldr	r3, [r3, #4]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d113      	bne.n	800b882 <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	689b      	ldr	r3, [r3, #8]
 800b860:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b86c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	689b      	ldr	r3, [r3, #8]
 800b874:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b880:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	f022 0201 	bic.w	r2, r2, #1
 800b890:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	685b      	ldr	r3, [r3, #4]
 800b896:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d00a      	beq.n	800b8b4 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	68db      	ldr	r3, [r3, #12]
 800b8a4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	430a      	orrs	r2, r1
 800b8b2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	2201      	movs	r2, #1
 800b8c0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800b8c4:	2300      	movs	r3, #0
}
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	3710      	adds	r7, #16
 800b8ca:	46bd      	mov	sp, r7
 800b8cc:	bd80      	pop	{r7, pc}
 800b8ce:	bf00      	nop
 800b8d0:	40013000 	.word	0x40013000
 800b8d4:	40003800 	.word	0x40003800
 800b8d8:	40003c00 	.word	0x40003c00

0800b8dc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800b8dc:	b480      	push	{r7}
 800b8de:	b085      	sub	sp, #20
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8e8:	095b      	lsrs	r3, r3, #5
 800b8ea:	3301      	adds	r3, #1
 800b8ec:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	68db      	ldr	r3, [r3, #12]
 800b8f2:	3301      	adds	r3, #1
 800b8f4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800b8f6:	68bb      	ldr	r3, [r7, #8]
 800b8f8:	3307      	adds	r3, #7
 800b8fa:	08db      	lsrs	r3, r3, #3
 800b8fc:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800b8fe:	68bb      	ldr	r3, [r7, #8]
 800b900:	68fa      	ldr	r2, [r7, #12]
 800b902:	fb02 f303 	mul.w	r3, r2, r3
}
 800b906:	4618      	mov	r0, r3
 800b908:	3714      	adds	r7, #20
 800b90a:	46bd      	mov	sp, r7
 800b90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b910:	4770      	bx	lr

0800b912 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b912:	b580      	push	{r7, lr}
 800b914:	b082      	sub	sp, #8
 800b916:	af00      	add	r7, sp, #0
 800b918:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d101      	bne.n	800b924 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b920:	2301      	movs	r3, #1
 800b922:	e049      	b.n	800b9b8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b92a:	b2db      	uxtb	r3, r3
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d106      	bne.n	800b93e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	2200      	movs	r2, #0
 800b934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b938:	6878      	ldr	r0, [r7, #4]
 800b93a:	f7f7 f9f7 	bl	8002d2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	2202      	movs	r2, #2
 800b942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	681a      	ldr	r2, [r3, #0]
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	3304      	adds	r3, #4
 800b94e:	4619      	mov	r1, r3
 800b950:	4610      	mov	r0, r2
 800b952:	f000 fa91 	bl	800be78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	2201      	movs	r2, #1
 800b95a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	2201      	movs	r2, #1
 800b962:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	2201      	movs	r2, #1
 800b96a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	2201      	movs	r2, #1
 800b972:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	2201      	movs	r2, #1
 800b97a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	2201      	movs	r2, #1
 800b982:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	2201      	movs	r2, #1
 800b98a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	2201      	movs	r2, #1
 800b992:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	2201      	movs	r2, #1
 800b99a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	2201      	movs	r2, #1
 800b9a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	2201      	movs	r2, #1
 800b9aa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	2201      	movs	r2, #1
 800b9b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b9b6:	2300      	movs	r3, #0
}
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	3708      	adds	r7, #8
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	bd80      	pop	{r7, pc}

0800b9c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b082      	sub	sp, #8
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d101      	bne.n	800b9d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b9ce:	2301      	movs	r3, #1
 800b9d0:	e049      	b.n	800ba66 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b9d8:	b2db      	uxtb	r3, r3
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d106      	bne.n	800b9ec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	2200      	movs	r2, #0
 800b9e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b9e6:	6878      	ldr	r0, [r7, #4]
 800b9e8:	f7f7 f966 	bl	8002cb8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	2202      	movs	r2, #2
 800b9f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	681a      	ldr	r2, [r3, #0]
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	3304      	adds	r3, #4
 800b9fc:	4619      	mov	r1, r3
 800b9fe:	4610      	mov	r0, r2
 800ba00:	f000 fa3a 	bl	800be78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	2201      	movs	r2, #1
 800ba08:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	2201      	movs	r2, #1
 800ba10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	2201      	movs	r2, #1
 800ba18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	2201      	movs	r2, #1
 800ba20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	2201      	movs	r2, #1
 800ba28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	2201      	movs	r2, #1
 800ba30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	2201      	movs	r2, #1
 800ba38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	2201      	movs	r2, #1
 800ba40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	2201      	movs	r2, #1
 800ba48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	2201      	movs	r2, #1
 800ba50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	2201      	movs	r2, #1
 800ba58:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	2201      	movs	r2, #1
 800ba60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ba64:	2300      	movs	r3, #0
}
 800ba66:	4618      	mov	r0, r3
 800ba68:	3708      	adds	r7, #8
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	bd80      	pop	{r7, pc}
	...

0800ba70 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ba70:	b580      	push	{r7, lr}
 800ba72:	b084      	sub	sp, #16
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	60f8      	str	r0, [r7, #12]
 800ba78:	60b9      	str	r1, [r7, #8]
 800ba7a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ba82:	2b01      	cmp	r3, #1
 800ba84:	d101      	bne.n	800ba8a <HAL_TIM_PWM_ConfigChannel+0x1a>
 800ba86:	2302      	movs	r3, #2
 800ba88:	e0fd      	b.n	800bc86 <HAL_TIM_PWM_ConfigChannel+0x216>
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	2201      	movs	r2, #1
 800ba8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	2b14      	cmp	r3, #20
 800ba96:	f200 80f0 	bhi.w	800bc7a <HAL_TIM_PWM_ConfigChannel+0x20a>
 800ba9a:	a201      	add	r2, pc, #4	; (adr r2, 800baa0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800ba9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800baa0:	0800baf5 	.word	0x0800baf5
 800baa4:	0800bc7b 	.word	0x0800bc7b
 800baa8:	0800bc7b 	.word	0x0800bc7b
 800baac:	0800bc7b 	.word	0x0800bc7b
 800bab0:	0800bb35 	.word	0x0800bb35
 800bab4:	0800bc7b 	.word	0x0800bc7b
 800bab8:	0800bc7b 	.word	0x0800bc7b
 800babc:	0800bc7b 	.word	0x0800bc7b
 800bac0:	0800bb77 	.word	0x0800bb77
 800bac4:	0800bc7b 	.word	0x0800bc7b
 800bac8:	0800bc7b 	.word	0x0800bc7b
 800bacc:	0800bc7b 	.word	0x0800bc7b
 800bad0:	0800bbb7 	.word	0x0800bbb7
 800bad4:	0800bc7b 	.word	0x0800bc7b
 800bad8:	0800bc7b 	.word	0x0800bc7b
 800badc:	0800bc7b 	.word	0x0800bc7b
 800bae0:	0800bbf9 	.word	0x0800bbf9
 800bae4:	0800bc7b 	.word	0x0800bc7b
 800bae8:	0800bc7b 	.word	0x0800bc7b
 800baec:	0800bc7b 	.word	0x0800bc7b
 800baf0:	0800bc39 	.word	0x0800bc39
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	68b9      	ldr	r1, [r7, #8]
 800bafa:	4618      	mov	r0, r3
 800bafc:	f000 fa56 	bl	800bfac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	699a      	ldr	r2, [r3, #24]
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	f042 0208 	orr.w	r2, r2, #8
 800bb0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	699a      	ldr	r2, [r3, #24]
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	f022 0204 	bic.w	r2, r2, #4
 800bb1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	6999      	ldr	r1, [r3, #24]
 800bb26:	68bb      	ldr	r3, [r7, #8]
 800bb28:	691a      	ldr	r2, [r3, #16]
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	430a      	orrs	r2, r1
 800bb30:	619a      	str	r2, [r3, #24]
      break;
 800bb32:	e0a3      	b.n	800bc7c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	68b9      	ldr	r1, [r7, #8]
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	f000 fac6 	bl	800c0cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	699a      	ldr	r2, [r3, #24]
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bb4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	699a      	ldr	r2, [r3, #24]
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bb5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	6999      	ldr	r1, [r3, #24]
 800bb66:	68bb      	ldr	r3, [r7, #8]
 800bb68:	691b      	ldr	r3, [r3, #16]
 800bb6a:	021a      	lsls	r2, r3, #8
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	430a      	orrs	r2, r1
 800bb72:	619a      	str	r2, [r3, #24]
      break;
 800bb74:	e082      	b.n	800bc7c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	68b9      	ldr	r1, [r7, #8]
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	f000 fb2f 	bl	800c1e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	69da      	ldr	r2, [r3, #28]
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	f042 0208 	orr.w	r2, r2, #8
 800bb90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	69da      	ldr	r2, [r3, #28]
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	f022 0204 	bic.w	r2, r2, #4
 800bba0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	69d9      	ldr	r1, [r3, #28]
 800bba8:	68bb      	ldr	r3, [r7, #8]
 800bbaa:	691a      	ldr	r2, [r3, #16]
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	430a      	orrs	r2, r1
 800bbb2:	61da      	str	r2, [r3, #28]
      break;
 800bbb4:	e062      	b.n	800bc7c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	68b9      	ldr	r1, [r7, #8]
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	f000 fb95 	bl	800c2ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	69da      	ldr	r2, [r3, #28]
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bbd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	69da      	ldr	r2, [r3, #28]
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bbe0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	69d9      	ldr	r1, [r3, #28]
 800bbe8:	68bb      	ldr	r3, [r7, #8]
 800bbea:	691b      	ldr	r3, [r3, #16]
 800bbec:	021a      	lsls	r2, r3, #8
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	430a      	orrs	r2, r1
 800bbf4:	61da      	str	r2, [r3, #28]
      break;
 800bbf6:	e041      	b.n	800bc7c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	68b9      	ldr	r1, [r7, #8]
 800bbfe:	4618      	mov	r0, r3
 800bc00:	f000 fbdc 	bl	800c3bc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	f042 0208 	orr.w	r2, r2, #8
 800bc12:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	f022 0204 	bic.w	r2, r2, #4
 800bc22:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800bc2a:	68bb      	ldr	r3, [r7, #8]
 800bc2c:	691a      	ldr	r2, [r3, #16]
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	430a      	orrs	r2, r1
 800bc34:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800bc36:	e021      	b.n	800bc7c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	68b9      	ldr	r1, [r7, #8]
 800bc3e:	4618      	mov	r0, r3
 800bc40:	f000 fc1e 	bl	800c480 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bc52:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bc62:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800bc6a:	68bb      	ldr	r3, [r7, #8]
 800bc6c:	691b      	ldr	r3, [r3, #16]
 800bc6e:	021a      	lsls	r2, r3, #8
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	430a      	orrs	r2, r1
 800bc76:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800bc78:	e000      	b.n	800bc7c <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800bc7a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	2200      	movs	r2, #0
 800bc80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bc84:	2300      	movs	r3, #0
}
 800bc86:	4618      	mov	r0, r3
 800bc88:	3710      	adds	r7, #16
 800bc8a:	46bd      	mov	sp, r7
 800bc8c:	bd80      	pop	{r7, pc}
 800bc8e:	bf00      	nop

0800bc90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bc90:	b580      	push	{r7, lr}
 800bc92:	b084      	sub	sp, #16
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	6078      	str	r0, [r7, #4]
 800bc98:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bca0:	2b01      	cmp	r3, #1
 800bca2:	d101      	bne.n	800bca8 <HAL_TIM_ConfigClockSource+0x18>
 800bca4:	2302      	movs	r3, #2
 800bca6:	e0db      	b.n	800be60 <HAL_TIM_ConfigClockSource+0x1d0>
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	2201      	movs	r2, #1
 800bcac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	2202      	movs	r2, #2
 800bcb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	689b      	ldr	r3, [r3, #8]
 800bcbe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bcc0:	68fa      	ldr	r2, [r7, #12]
 800bcc2:	4b69      	ldr	r3, [pc, #420]	; (800be68 <HAL_TIM_ConfigClockSource+0x1d8>)
 800bcc4:	4013      	ands	r3, r2
 800bcc6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bcce:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	68fa      	ldr	r2, [r7, #12]
 800bcd6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bcd8:	683b      	ldr	r3, [r7, #0]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	4a63      	ldr	r2, [pc, #396]	; (800be6c <HAL_TIM_ConfigClockSource+0x1dc>)
 800bcde:	4293      	cmp	r3, r2
 800bce0:	f000 80a9 	beq.w	800be36 <HAL_TIM_ConfigClockSource+0x1a6>
 800bce4:	4a61      	ldr	r2, [pc, #388]	; (800be6c <HAL_TIM_ConfigClockSource+0x1dc>)
 800bce6:	4293      	cmp	r3, r2
 800bce8:	f200 80ae 	bhi.w	800be48 <HAL_TIM_ConfigClockSource+0x1b8>
 800bcec:	4a60      	ldr	r2, [pc, #384]	; (800be70 <HAL_TIM_ConfigClockSource+0x1e0>)
 800bcee:	4293      	cmp	r3, r2
 800bcf0:	f000 80a1 	beq.w	800be36 <HAL_TIM_ConfigClockSource+0x1a6>
 800bcf4:	4a5e      	ldr	r2, [pc, #376]	; (800be70 <HAL_TIM_ConfigClockSource+0x1e0>)
 800bcf6:	4293      	cmp	r3, r2
 800bcf8:	f200 80a6 	bhi.w	800be48 <HAL_TIM_ConfigClockSource+0x1b8>
 800bcfc:	4a5d      	ldr	r2, [pc, #372]	; (800be74 <HAL_TIM_ConfigClockSource+0x1e4>)
 800bcfe:	4293      	cmp	r3, r2
 800bd00:	f000 8099 	beq.w	800be36 <HAL_TIM_ConfigClockSource+0x1a6>
 800bd04:	4a5b      	ldr	r2, [pc, #364]	; (800be74 <HAL_TIM_ConfigClockSource+0x1e4>)
 800bd06:	4293      	cmp	r3, r2
 800bd08:	f200 809e 	bhi.w	800be48 <HAL_TIM_ConfigClockSource+0x1b8>
 800bd0c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800bd10:	f000 8091 	beq.w	800be36 <HAL_TIM_ConfigClockSource+0x1a6>
 800bd14:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800bd18:	f200 8096 	bhi.w	800be48 <HAL_TIM_ConfigClockSource+0x1b8>
 800bd1c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bd20:	f000 8089 	beq.w	800be36 <HAL_TIM_ConfigClockSource+0x1a6>
 800bd24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bd28:	f200 808e 	bhi.w	800be48 <HAL_TIM_ConfigClockSource+0x1b8>
 800bd2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bd30:	d03e      	beq.n	800bdb0 <HAL_TIM_ConfigClockSource+0x120>
 800bd32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bd36:	f200 8087 	bhi.w	800be48 <HAL_TIM_ConfigClockSource+0x1b8>
 800bd3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd3e:	f000 8085 	beq.w	800be4c <HAL_TIM_ConfigClockSource+0x1bc>
 800bd42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd46:	d87f      	bhi.n	800be48 <HAL_TIM_ConfigClockSource+0x1b8>
 800bd48:	2b70      	cmp	r3, #112	; 0x70
 800bd4a:	d01a      	beq.n	800bd82 <HAL_TIM_ConfigClockSource+0xf2>
 800bd4c:	2b70      	cmp	r3, #112	; 0x70
 800bd4e:	d87b      	bhi.n	800be48 <HAL_TIM_ConfigClockSource+0x1b8>
 800bd50:	2b60      	cmp	r3, #96	; 0x60
 800bd52:	d050      	beq.n	800bdf6 <HAL_TIM_ConfigClockSource+0x166>
 800bd54:	2b60      	cmp	r3, #96	; 0x60
 800bd56:	d877      	bhi.n	800be48 <HAL_TIM_ConfigClockSource+0x1b8>
 800bd58:	2b50      	cmp	r3, #80	; 0x50
 800bd5a:	d03c      	beq.n	800bdd6 <HAL_TIM_ConfigClockSource+0x146>
 800bd5c:	2b50      	cmp	r3, #80	; 0x50
 800bd5e:	d873      	bhi.n	800be48 <HAL_TIM_ConfigClockSource+0x1b8>
 800bd60:	2b40      	cmp	r3, #64	; 0x40
 800bd62:	d058      	beq.n	800be16 <HAL_TIM_ConfigClockSource+0x186>
 800bd64:	2b40      	cmp	r3, #64	; 0x40
 800bd66:	d86f      	bhi.n	800be48 <HAL_TIM_ConfigClockSource+0x1b8>
 800bd68:	2b30      	cmp	r3, #48	; 0x30
 800bd6a:	d064      	beq.n	800be36 <HAL_TIM_ConfigClockSource+0x1a6>
 800bd6c:	2b30      	cmp	r3, #48	; 0x30
 800bd6e:	d86b      	bhi.n	800be48 <HAL_TIM_ConfigClockSource+0x1b8>
 800bd70:	2b20      	cmp	r3, #32
 800bd72:	d060      	beq.n	800be36 <HAL_TIM_ConfigClockSource+0x1a6>
 800bd74:	2b20      	cmp	r3, #32
 800bd76:	d867      	bhi.n	800be48 <HAL_TIM_ConfigClockSource+0x1b8>
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d05c      	beq.n	800be36 <HAL_TIM_ConfigClockSource+0x1a6>
 800bd7c:	2b10      	cmp	r3, #16
 800bd7e:	d05a      	beq.n	800be36 <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800bd80:	e062      	b.n	800be48 <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	6818      	ldr	r0, [r3, #0]
 800bd86:	683b      	ldr	r3, [r7, #0]
 800bd88:	6899      	ldr	r1, [r3, #8]
 800bd8a:	683b      	ldr	r3, [r7, #0]
 800bd8c:	685a      	ldr	r2, [r3, #4]
 800bd8e:	683b      	ldr	r3, [r7, #0]
 800bd90:	68db      	ldr	r3, [r3, #12]
 800bd92:	f000 fc57 	bl	800c644 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	689b      	ldr	r3, [r3, #8]
 800bd9c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800bda4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	68fa      	ldr	r2, [r7, #12]
 800bdac:	609a      	str	r2, [r3, #8]
      break;
 800bdae:	e04e      	b.n	800be4e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	6818      	ldr	r0, [r3, #0]
 800bdb4:	683b      	ldr	r3, [r7, #0]
 800bdb6:	6899      	ldr	r1, [r3, #8]
 800bdb8:	683b      	ldr	r3, [r7, #0]
 800bdba:	685a      	ldr	r2, [r3, #4]
 800bdbc:	683b      	ldr	r3, [r7, #0]
 800bdbe:	68db      	ldr	r3, [r3, #12]
 800bdc0:	f000 fc40 	bl	800c644 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	689a      	ldr	r2, [r3, #8]
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bdd2:	609a      	str	r2, [r3, #8]
      break;
 800bdd4:	e03b      	b.n	800be4e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	6818      	ldr	r0, [r3, #0]
 800bdda:	683b      	ldr	r3, [r7, #0]
 800bddc:	6859      	ldr	r1, [r3, #4]
 800bdde:	683b      	ldr	r3, [r7, #0]
 800bde0:	68db      	ldr	r3, [r3, #12]
 800bde2:	461a      	mov	r2, r3
 800bde4:	f000 fbb0 	bl	800c548 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	2150      	movs	r1, #80	; 0x50
 800bdee:	4618      	mov	r0, r3
 800bdf0:	f000 fc0a 	bl	800c608 <TIM_ITRx_SetConfig>
      break;
 800bdf4:	e02b      	b.n	800be4e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	6818      	ldr	r0, [r3, #0]
 800bdfa:	683b      	ldr	r3, [r7, #0]
 800bdfc:	6859      	ldr	r1, [r3, #4]
 800bdfe:	683b      	ldr	r3, [r7, #0]
 800be00:	68db      	ldr	r3, [r3, #12]
 800be02:	461a      	mov	r2, r3
 800be04:	f000 fbcf 	bl	800c5a6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	2160      	movs	r1, #96	; 0x60
 800be0e:	4618      	mov	r0, r3
 800be10:	f000 fbfa 	bl	800c608 <TIM_ITRx_SetConfig>
      break;
 800be14:	e01b      	b.n	800be4e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	6818      	ldr	r0, [r3, #0]
 800be1a:	683b      	ldr	r3, [r7, #0]
 800be1c:	6859      	ldr	r1, [r3, #4]
 800be1e:	683b      	ldr	r3, [r7, #0]
 800be20:	68db      	ldr	r3, [r3, #12]
 800be22:	461a      	mov	r2, r3
 800be24:	f000 fb90 	bl	800c548 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	2140      	movs	r1, #64	; 0x40
 800be2e:	4618      	mov	r0, r3
 800be30:	f000 fbea 	bl	800c608 <TIM_ITRx_SetConfig>
      break;
 800be34:	e00b      	b.n	800be4e <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	681a      	ldr	r2, [r3, #0]
 800be3a:	683b      	ldr	r3, [r7, #0]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	4619      	mov	r1, r3
 800be40:	4610      	mov	r0, r2
 800be42:	f000 fbe1 	bl	800c608 <TIM_ITRx_SetConfig>
        break;
 800be46:	e002      	b.n	800be4e <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800be48:	bf00      	nop
 800be4a:	e000      	b.n	800be4e <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800be4c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	2201      	movs	r2, #1
 800be52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	2200      	movs	r2, #0
 800be5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800be5e:	2300      	movs	r3, #0
}
 800be60:	4618      	mov	r0, r3
 800be62:	3710      	adds	r7, #16
 800be64:	46bd      	mov	sp, r7
 800be66:	bd80      	pop	{r7, pc}
 800be68:	ffceff88 	.word	0xffceff88
 800be6c:	00100040 	.word	0x00100040
 800be70:	00100030 	.word	0x00100030
 800be74:	00100020 	.word	0x00100020

0800be78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800be78:	b480      	push	{r7}
 800be7a:	b085      	sub	sp, #20
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	6078      	str	r0, [r7, #4]
 800be80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	4a40      	ldr	r2, [pc, #256]	; (800bf8c <TIM_Base_SetConfig+0x114>)
 800be8c:	4293      	cmp	r3, r2
 800be8e:	d013      	beq.n	800beb8 <TIM_Base_SetConfig+0x40>
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800be96:	d00f      	beq.n	800beb8 <TIM_Base_SetConfig+0x40>
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	4a3d      	ldr	r2, [pc, #244]	; (800bf90 <TIM_Base_SetConfig+0x118>)
 800be9c:	4293      	cmp	r3, r2
 800be9e:	d00b      	beq.n	800beb8 <TIM_Base_SetConfig+0x40>
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	4a3c      	ldr	r2, [pc, #240]	; (800bf94 <TIM_Base_SetConfig+0x11c>)
 800bea4:	4293      	cmp	r3, r2
 800bea6:	d007      	beq.n	800beb8 <TIM_Base_SetConfig+0x40>
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	4a3b      	ldr	r2, [pc, #236]	; (800bf98 <TIM_Base_SetConfig+0x120>)
 800beac:	4293      	cmp	r3, r2
 800beae:	d003      	beq.n	800beb8 <TIM_Base_SetConfig+0x40>
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	4a3a      	ldr	r2, [pc, #232]	; (800bf9c <TIM_Base_SetConfig+0x124>)
 800beb4:	4293      	cmp	r3, r2
 800beb6:	d108      	bne.n	800beca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bebe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bec0:	683b      	ldr	r3, [r7, #0]
 800bec2:	685b      	ldr	r3, [r3, #4]
 800bec4:	68fa      	ldr	r2, [r7, #12]
 800bec6:	4313      	orrs	r3, r2
 800bec8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	4a2f      	ldr	r2, [pc, #188]	; (800bf8c <TIM_Base_SetConfig+0x114>)
 800bece:	4293      	cmp	r3, r2
 800bed0:	d01f      	beq.n	800bf12 <TIM_Base_SetConfig+0x9a>
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bed8:	d01b      	beq.n	800bf12 <TIM_Base_SetConfig+0x9a>
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	4a2c      	ldr	r2, [pc, #176]	; (800bf90 <TIM_Base_SetConfig+0x118>)
 800bede:	4293      	cmp	r3, r2
 800bee0:	d017      	beq.n	800bf12 <TIM_Base_SetConfig+0x9a>
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	4a2b      	ldr	r2, [pc, #172]	; (800bf94 <TIM_Base_SetConfig+0x11c>)
 800bee6:	4293      	cmp	r3, r2
 800bee8:	d013      	beq.n	800bf12 <TIM_Base_SetConfig+0x9a>
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	4a2a      	ldr	r2, [pc, #168]	; (800bf98 <TIM_Base_SetConfig+0x120>)
 800beee:	4293      	cmp	r3, r2
 800bef0:	d00f      	beq.n	800bf12 <TIM_Base_SetConfig+0x9a>
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	4a29      	ldr	r2, [pc, #164]	; (800bf9c <TIM_Base_SetConfig+0x124>)
 800bef6:	4293      	cmp	r3, r2
 800bef8:	d00b      	beq.n	800bf12 <TIM_Base_SetConfig+0x9a>
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	4a28      	ldr	r2, [pc, #160]	; (800bfa0 <TIM_Base_SetConfig+0x128>)
 800befe:	4293      	cmp	r3, r2
 800bf00:	d007      	beq.n	800bf12 <TIM_Base_SetConfig+0x9a>
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	4a27      	ldr	r2, [pc, #156]	; (800bfa4 <TIM_Base_SetConfig+0x12c>)
 800bf06:	4293      	cmp	r3, r2
 800bf08:	d003      	beq.n	800bf12 <TIM_Base_SetConfig+0x9a>
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	4a26      	ldr	r2, [pc, #152]	; (800bfa8 <TIM_Base_SetConfig+0x130>)
 800bf0e:	4293      	cmp	r3, r2
 800bf10:	d108      	bne.n	800bf24 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bf18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bf1a:	683b      	ldr	r3, [r7, #0]
 800bf1c:	68db      	ldr	r3, [r3, #12]
 800bf1e:	68fa      	ldr	r2, [r7, #12]
 800bf20:	4313      	orrs	r3, r2
 800bf22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bf2a:	683b      	ldr	r3, [r7, #0]
 800bf2c:	695b      	ldr	r3, [r3, #20]
 800bf2e:	4313      	orrs	r3, r2
 800bf30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	68fa      	ldr	r2, [r7, #12]
 800bf36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bf38:	683b      	ldr	r3, [r7, #0]
 800bf3a:	689a      	ldr	r2, [r3, #8]
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bf40:	683b      	ldr	r3, [r7, #0]
 800bf42:	681a      	ldr	r2, [r3, #0]
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	4a10      	ldr	r2, [pc, #64]	; (800bf8c <TIM_Base_SetConfig+0x114>)
 800bf4c:	4293      	cmp	r3, r2
 800bf4e:	d00f      	beq.n	800bf70 <TIM_Base_SetConfig+0xf8>
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	4a12      	ldr	r2, [pc, #72]	; (800bf9c <TIM_Base_SetConfig+0x124>)
 800bf54:	4293      	cmp	r3, r2
 800bf56:	d00b      	beq.n	800bf70 <TIM_Base_SetConfig+0xf8>
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	4a11      	ldr	r2, [pc, #68]	; (800bfa0 <TIM_Base_SetConfig+0x128>)
 800bf5c:	4293      	cmp	r3, r2
 800bf5e:	d007      	beq.n	800bf70 <TIM_Base_SetConfig+0xf8>
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	4a10      	ldr	r2, [pc, #64]	; (800bfa4 <TIM_Base_SetConfig+0x12c>)
 800bf64:	4293      	cmp	r3, r2
 800bf66:	d003      	beq.n	800bf70 <TIM_Base_SetConfig+0xf8>
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	4a0f      	ldr	r2, [pc, #60]	; (800bfa8 <TIM_Base_SetConfig+0x130>)
 800bf6c:	4293      	cmp	r3, r2
 800bf6e:	d103      	bne.n	800bf78 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bf70:	683b      	ldr	r3, [r7, #0]
 800bf72:	691a      	ldr	r2, [r3, #16]
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	2201      	movs	r2, #1
 800bf7c:	615a      	str	r2, [r3, #20]
}
 800bf7e:	bf00      	nop
 800bf80:	3714      	adds	r7, #20
 800bf82:	46bd      	mov	sp, r7
 800bf84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf88:	4770      	bx	lr
 800bf8a:	bf00      	nop
 800bf8c:	40010000 	.word	0x40010000
 800bf90:	40000400 	.word	0x40000400
 800bf94:	40000800 	.word	0x40000800
 800bf98:	40000c00 	.word	0x40000c00
 800bf9c:	40010400 	.word	0x40010400
 800bfa0:	40014000 	.word	0x40014000
 800bfa4:	40014400 	.word	0x40014400
 800bfa8:	40014800 	.word	0x40014800

0800bfac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bfac:	b480      	push	{r7}
 800bfae:	b087      	sub	sp, #28
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	6078      	str	r0, [r7, #4]
 800bfb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	6a1b      	ldr	r3, [r3, #32]
 800bfba:	f023 0201 	bic.w	r2, r3, #1
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	6a1b      	ldr	r3, [r3, #32]
 800bfc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	685b      	ldr	r3, [r3, #4]
 800bfcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	699b      	ldr	r3, [r3, #24]
 800bfd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800bfd4:	68fa      	ldr	r2, [r7, #12]
 800bfd6:	4b37      	ldr	r3, [pc, #220]	; (800c0b4 <TIM_OC1_SetConfig+0x108>)
 800bfd8:	4013      	ands	r3, r2
 800bfda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	f023 0303 	bic.w	r3, r3, #3
 800bfe2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bfe4:	683b      	ldr	r3, [r7, #0]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	68fa      	ldr	r2, [r7, #12]
 800bfea:	4313      	orrs	r3, r2
 800bfec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800bfee:	697b      	ldr	r3, [r7, #20]
 800bff0:	f023 0302 	bic.w	r3, r3, #2
 800bff4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800bff6:	683b      	ldr	r3, [r7, #0]
 800bff8:	689b      	ldr	r3, [r3, #8]
 800bffa:	697a      	ldr	r2, [r7, #20]
 800bffc:	4313      	orrs	r3, r2
 800bffe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	4a2d      	ldr	r2, [pc, #180]	; (800c0b8 <TIM_OC1_SetConfig+0x10c>)
 800c004:	4293      	cmp	r3, r2
 800c006:	d00f      	beq.n	800c028 <TIM_OC1_SetConfig+0x7c>
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	4a2c      	ldr	r2, [pc, #176]	; (800c0bc <TIM_OC1_SetConfig+0x110>)
 800c00c:	4293      	cmp	r3, r2
 800c00e:	d00b      	beq.n	800c028 <TIM_OC1_SetConfig+0x7c>
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	4a2b      	ldr	r2, [pc, #172]	; (800c0c0 <TIM_OC1_SetConfig+0x114>)
 800c014:	4293      	cmp	r3, r2
 800c016:	d007      	beq.n	800c028 <TIM_OC1_SetConfig+0x7c>
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	4a2a      	ldr	r2, [pc, #168]	; (800c0c4 <TIM_OC1_SetConfig+0x118>)
 800c01c:	4293      	cmp	r3, r2
 800c01e:	d003      	beq.n	800c028 <TIM_OC1_SetConfig+0x7c>
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	4a29      	ldr	r2, [pc, #164]	; (800c0c8 <TIM_OC1_SetConfig+0x11c>)
 800c024:	4293      	cmp	r3, r2
 800c026:	d10c      	bne.n	800c042 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c028:	697b      	ldr	r3, [r7, #20]
 800c02a:	f023 0308 	bic.w	r3, r3, #8
 800c02e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c030:	683b      	ldr	r3, [r7, #0]
 800c032:	68db      	ldr	r3, [r3, #12]
 800c034:	697a      	ldr	r2, [r7, #20]
 800c036:	4313      	orrs	r3, r2
 800c038:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c03a:	697b      	ldr	r3, [r7, #20]
 800c03c:	f023 0304 	bic.w	r3, r3, #4
 800c040:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	4a1c      	ldr	r2, [pc, #112]	; (800c0b8 <TIM_OC1_SetConfig+0x10c>)
 800c046:	4293      	cmp	r3, r2
 800c048:	d00f      	beq.n	800c06a <TIM_OC1_SetConfig+0xbe>
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	4a1b      	ldr	r2, [pc, #108]	; (800c0bc <TIM_OC1_SetConfig+0x110>)
 800c04e:	4293      	cmp	r3, r2
 800c050:	d00b      	beq.n	800c06a <TIM_OC1_SetConfig+0xbe>
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	4a1a      	ldr	r2, [pc, #104]	; (800c0c0 <TIM_OC1_SetConfig+0x114>)
 800c056:	4293      	cmp	r3, r2
 800c058:	d007      	beq.n	800c06a <TIM_OC1_SetConfig+0xbe>
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	4a19      	ldr	r2, [pc, #100]	; (800c0c4 <TIM_OC1_SetConfig+0x118>)
 800c05e:	4293      	cmp	r3, r2
 800c060:	d003      	beq.n	800c06a <TIM_OC1_SetConfig+0xbe>
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	4a18      	ldr	r2, [pc, #96]	; (800c0c8 <TIM_OC1_SetConfig+0x11c>)
 800c066:	4293      	cmp	r3, r2
 800c068:	d111      	bne.n	800c08e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c06a:	693b      	ldr	r3, [r7, #16]
 800c06c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c070:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c072:	693b      	ldr	r3, [r7, #16]
 800c074:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c078:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c07a:	683b      	ldr	r3, [r7, #0]
 800c07c:	695b      	ldr	r3, [r3, #20]
 800c07e:	693a      	ldr	r2, [r7, #16]
 800c080:	4313      	orrs	r3, r2
 800c082:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c084:	683b      	ldr	r3, [r7, #0]
 800c086:	699b      	ldr	r3, [r3, #24]
 800c088:	693a      	ldr	r2, [r7, #16]
 800c08a:	4313      	orrs	r3, r2
 800c08c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	693a      	ldr	r2, [r7, #16]
 800c092:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	68fa      	ldr	r2, [r7, #12]
 800c098:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c09a:	683b      	ldr	r3, [r7, #0]
 800c09c:	685a      	ldr	r2, [r3, #4]
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	697a      	ldr	r2, [r7, #20]
 800c0a6:	621a      	str	r2, [r3, #32]
}
 800c0a8:	bf00      	nop
 800c0aa:	371c      	adds	r7, #28
 800c0ac:	46bd      	mov	sp, r7
 800c0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b2:	4770      	bx	lr
 800c0b4:	fffeff8f 	.word	0xfffeff8f
 800c0b8:	40010000 	.word	0x40010000
 800c0bc:	40010400 	.word	0x40010400
 800c0c0:	40014000 	.word	0x40014000
 800c0c4:	40014400 	.word	0x40014400
 800c0c8:	40014800 	.word	0x40014800

0800c0cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c0cc:	b480      	push	{r7}
 800c0ce:	b087      	sub	sp, #28
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	6078      	str	r0, [r7, #4]
 800c0d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	6a1b      	ldr	r3, [r3, #32]
 800c0da:	f023 0210 	bic.w	r2, r3, #16
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	6a1b      	ldr	r3, [r3, #32]
 800c0e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	685b      	ldr	r3, [r3, #4]
 800c0ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	699b      	ldr	r3, [r3, #24]
 800c0f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c0f4:	68fa      	ldr	r2, [r7, #12]
 800c0f6:	4b34      	ldr	r3, [pc, #208]	; (800c1c8 <TIM_OC2_SetConfig+0xfc>)
 800c0f8:	4013      	ands	r3, r2
 800c0fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c102:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c104:	683b      	ldr	r3, [r7, #0]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	021b      	lsls	r3, r3, #8
 800c10a:	68fa      	ldr	r2, [r7, #12]
 800c10c:	4313      	orrs	r3, r2
 800c10e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c110:	697b      	ldr	r3, [r7, #20]
 800c112:	f023 0320 	bic.w	r3, r3, #32
 800c116:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c118:	683b      	ldr	r3, [r7, #0]
 800c11a:	689b      	ldr	r3, [r3, #8]
 800c11c:	011b      	lsls	r3, r3, #4
 800c11e:	697a      	ldr	r2, [r7, #20]
 800c120:	4313      	orrs	r3, r2
 800c122:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	4a29      	ldr	r2, [pc, #164]	; (800c1cc <TIM_OC2_SetConfig+0x100>)
 800c128:	4293      	cmp	r3, r2
 800c12a:	d003      	beq.n	800c134 <TIM_OC2_SetConfig+0x68>
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	4a28      	ldr	r2, [pc, #160]	; (800c1d0 <TIM_OC2_SetConfig+0x104>)
 800c130:	4293      	cmp	r3, r2
 800c132:	d10d      	bne.n	800c150 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c134:	697b      	ldr	r3, [r7, #20]
 800c136:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c13a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c13c:	683b      	ldr	r3, [r7, #0]
 800c13e:	68db      	ldr	r3, [r3, #12]
 800c140:	011b      	lsls	r3, r3, #4
 800c142:	697a      	ldr	r2, [r7, #20]
 800c144:	4313      	orrs	r3, r2
 800c146:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c148:	697b      	ldr	r3, [r7, #20]
 800c14a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c14e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	4a1e      	ldr	r2, [pc, #120]	; (800c1cc <TIM_OC2_SetConfig+0x100>)
 800c154:	4293      	cmp	r3, r2
 800c156:	d00f      	beq.n	800c178 <TIM_OC2_SetConfig+0xac>
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	4a1d      	ldr	r2, [pc, #116]	; (800c1d0 <TIM_OC2_SetConfig+0x104>)
 800c15c:	4293      	cmp	r3, r2
 800c15e:	d00b      	beq.n	800c178 <TIM_OC2_SetConfig+0xac>
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	4a1c      	ldr	r2, [pc, #112]	; (800c1d4 <TIM_OC2_SetConfig+0x108>)
 800c164:	4293      	cmp	r3, r2
 800c166:	d007      	beq.n	800c178 <TIM_OC2_SetConfig+0xac>
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	4a1b      	ldr	r2, [pc, #108]	; (800c1d8 <TIM_OC2_SetConfig+0x10c>)
 800c16c:	4293      	cmp	r3, r2
 800c16e:	d003      	beq.n	800c178 <TIM_OC2_SetConfig+0xac>
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	4a1a      	ldr	r2, [pc, #104]	; (800c1dc <TIM_OC2_SetConfig+0x110>)
 800c174:	4293      	cmp	r3, r2
 800c176:	d113      	bne.n	800c1a0 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c178:	693b      	ldr	r3, [r7, #16]
 800c17a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c17e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c180:	693b      	ldr	r3, [r7, #16]
 800c182:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c186:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c188:	683b      	ldr	r3, [r7, #0]
 800c18a:	695b      	ldr	r3, [r3, #20]
 800c18c:	009b      	lsls	r3, r3, #2
 800c18e:	693a      	ldr	r2, [r7, #16]
 800c190:	4313      	orrs	r3, r2
 800c192:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c194:	683b      	ldr	r3, [r7, #0]
 800c196:	699b      	ldr	r3, [r3, #24]
 800c198:	009b      	lsls	r3, r3, #2
 800c19a:	693a      	ldr	r2, [r7, #16]
 800c19c:	4313      	orrs	r3, r2
 800c19e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	693a      	ldr	r2, [r7, #16]
 800c1a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	68fa      	ldr	r2, [r7, #12]
 800c1aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c1ac:	683b      	ldr	r3, [r7, #0]
 800c1ae:	685a      	ldr	r2, [r3, #4]
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	697a      	ldr	r2, [r7, #20]
 800c1b8:	621a      	str	r2, [r3, #32]
}
 800c1ba:	bf00      	nop
 800c1bc:	371c      	adds	r7, #28
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c4:	4770      	bx	lr
 800c1c6:	bf00      	nop
 800c1c8:	feff8fff 	.word	0xfeff8fff
 800c1cc:	40010000 	.word	0x40010000
 800c1d0:	40010400 	.word	0x40010400
 800c1d4:	40014000 	.word	0x40014000
 800c1d8:	40014400 	.word	0x40014400
 800c1dc:	40014800 	.word	0x40014800

0800c1e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c1e0:	b480      	push	{r7}
 800c1e2:	b087      	sub	sp, #28
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	6078      	str	r0, [r7, #4]
 800c1e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	6a1b      	ldr	r3, [r3, #32]
 800c1ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	6a1b      	ldr	r3, [r3, #32]
 800c1fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	685b      	ldr	r3, [r3, #4]
 800c200:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	69db      	ldr	r3, [r3, #28]
 800c206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c20e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	f023 0303 	bic.w	r3, r3, #3
 800c216:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c218:	683b      	ldr	r3, [r7, #0]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	68fa      	ldr	r2, [r7, #12]
 800c21e:	4313      	orrs	r3, r2
 800c220:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c222:	697b      	ldr	r3, [r7, #20]
 800c224:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c228:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c22a:	683b      	ldr	r3, [r7, #0]
 800c22c:	689b      	ldr	r3, [r3, #8]
 800c22e:	021b      	lsls	r3, r3, #8
 800c230:	697a      	ldr	r2, [r7, #20]
 800c232:	4313      	orrs	r3, r2
 800c234:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	4a27      	ldr	r2, [pc, #156]	; (800c2d8 <TIM_OC3_SetConfig+0xf8>)
 800c23a:	4293      	cmp	r3, r2
 800c23c:	d003      	beq.n	800c246 <TIM_OC3_SetConfig+0x66>
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	4a26      	ldr	r2, [pc, #152]	; (800c2dc <TIM_OC3_SetConfig+0xfc>)
 800c242:	4293      	cmp	r3, r2
 800c244:	d10d      	bne.n	800c262 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c246:	697b      	ldr	r3, [r7, #20]
 800c248:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c24c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c24e:	683b      	ldr	r3, [r7, #0]
 800c250:	68db      	ldr	r3, [r3, #12]
 800c252:	021b      	lsls	r3, r3, #8
 800c254:	697a      	ldr	r2, [r7, #20]
 800c256:	4313      	orrs	r3, r2
 800c258:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c25a:	697b      	ldr	r3, [r7, #20]
 800c25c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c260:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	4a1c      	ldr	r2, [pc, #112]	; (800c2d8 <TIM_OC3_SetConfig+0xf8>)
 800c266:	4293      	cmp	r3, r2
 800c268:	d00f      	beq.n	800c28a <TIM_OC3_SetConfig+0xaa>
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	4a1b      	ldr	r2, [pc, #108]	; (800c2dc <TIM_OC3_SetConfig+0xfc>)
 800c26e:	4293      	cmp	r3, r2
 800c270:	d00b      	beq.n	800c28a <TIM_OC3_SetConfig+0xaa>
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	4a1a      	ldr	r2, [pc, #104]	; (800c2e0 <TIM_OC3_SetConfig+0x100>)
 800c276:	4293      	cmp	r3, r2
 800c278:	d007      	beq.n	800c28a <TIM_OC3_SetConfig+0xaa>
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	4a19      	ldr	r2, [pc, #100]	; (800c2e4 <TIM_OC3_SetConfig+0x104>)
 800c27e:	4293      	cmp	r3, r2
 800c280:	d003      	beq.n	800c28a <TIM_OC3_SetConfig+0xaa>
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	4a18      	ldr	r2, [pc, #96]	; (800c2e8 <TIM_OC3_SetConfig+0x108>)
 800c286:	4293      	cmp	r3, r2
 800c288:	d113      	bne.n	800c2b2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c28a:	693b      	ldr	r3, [r7, #16]
 800c28c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c290:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c292:	693b      	ldr	r3, [r7, #16]
 800c294:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c298:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c29a:	683b      	ldr	r3, [r7, #0]
 800c29c:	695b      	ldr	r3, [r3, #20]
 800c29e:	011b      	lsls	r3, r3, #4
 800c2a0:	693a      	ldr	r2, [r7, #16]
 800c2a2:	4313      	orrs	r3, r2
 800c2a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c2a6:	683b      	ldr	r3, [r7, #0]
 800c2a8:	699b      	ldr	r3, [r3, #24]
 800c2aa:	011b      	lsls	r3, r3, #4
 800c2ac:	693a      	ldr	r2, [r7, #16]
 800c2ae:	4313      	orrs	r3, r2
 800c2b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	693a      	ldr	r2, [r7, #16]
 800c2b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	68fa      	ldr	r2, [r7, #12]
 800c2bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c2be:	683b      	ldr	r3, [r7, #0]
 800c2c0:	685a      	ldr	r2, [r3, #4]
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	697a      	ldr	r2, [r7, #20]
 800c2ca:	621a      	str	r2, [r3, #32]
}
 800c2cc:	bf00      	nop
 800c2ce:	371c      	adds	r7, #28
 800c2d0:	46bd      	mov	sp, r7
 800c2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d6:	4770      	bx	lr
 800c2d8:	40010000 	.word	0x40010000
 800c2dc:	40010400 	.word	0x40010400
 800c2e0:	40014000 	.word	0x40014000
 800c2e4:	40014400 	.word	0x40014400
 800c2e8:	40014800 	.word	0x40014800

0800c2ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c2ec:	b480      	push	{r7}
 800c2ee:	b087      	sub	sp, #28
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	6078      	str	r0, [r7, #4]
 800c2f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	6a1b      	ldr	r3, [r3, #32]
 800c2fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	6a1b      	ldr	r3, [r3, #32]
 800c306:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	685b      	ldr	r3, [r3, #4]
 800c30c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	69db      	ldr	r3, [r3, #28]
 800c312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c31a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c322:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c324:	683b      	ldr	r3, [r7, #0]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	021b      	lsls	r3, r3, #8
 800c32a:	68fa      	ldr	r2, [r7, #12]
 800c32c:	4313      	orrs	r3, r2
 800c32e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c330:	693b      	ldr	r3, [r7, #16]
 800c332:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c336:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c338:	683b      	ldr	r3, [r7, #0]
 800c33a:	689b      	ldr	r3, [r3, #8]
 800c33c:	031b      	lsls	r3, r3, #12
 800c33e:	693a      	ldr	r2, [r7, #16]
 800c340:	4313      	orrs	r3, r2
 800c342:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	4a18      	ldr	r2, [pc, #96]	; (800c3a8 <TIM_OC4_SetConfig+0xbc>)
 800c348:	4293      	cmp	r3, r2
 800c34a:	d00f      	beq.n	800c36c <TIM_OC4_SetConfig+0x80>
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	4a17      	ldr	r2, [pc, #92]	; (800c3ac <TIM_OC4_SetConfig+0xc0>)
 800c350:	4293      	cmp	r3, r2
 800c352:	d00b      	beq.n	800c36c <TIM_OC4_SetConfig+0x80>
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	4a16      	ldr	r2, [pc, #88]	; (800c3b0 <TIM_OC4_SetConfig+0xc4>)
 800c358:	4293      	cmp	r3, r2
 800c35a:	d007      	beq.n	800c36c <TIM_OC4_SetConfig+0x80>
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	4a15      	ldr	r2, [pc, #84]	; (800c3b4 <TIM_OC4_SetConfig+0xc8>)
 800c360:	4293      	cmp	r3, r2
 800c362:	d003      	beq.n	800c36c <TIM_OC4_SetConfig+0x80>
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	4a14      	ldr	r2, [pc, #80]	; (800c3b8 <TIM_OC4_SetConfig+0xcc>)
 800c368:	4293      	cmp	r3, r2
 800c36a:	d109      	bne.n	800c380 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c36c:	697b      	ldr	r3, [r7, #20]
 800c36e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c372:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c374:	683b      	ldr	r3, [r7, #0]
 800c376:	695b      	ldr	r3, [r3, #20]
 800c378:	019b      	lsls	r3, r3, #6
 800c37a:	697a      	ldr	r2, [r7, #20]
 800c37c:	4313      	orrs	r3, r2
 800c37e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	697a      	ldr	r2, [r7, #20]
 800c384:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	68fa      	ldr	r2, [r7, #12]
 800c38a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c38c:	683b      	ldr	r3, [r7, #0]
 800c38e:	685a      	ldr	r2, [r3, #4]
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	693a      	ldr	r2, [r7, #16]
 800c398:	621a      	str	r2, [r3, #32]
}
 800c39a:	bf00      	nop
 800c39c:	371c      	adds	r7, #28
 800c39e:	46bd      	mov	sp, r7
 800c3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a4:	4770      	bx	lr
 800c3a6:	bf00      	nop
 800c3a8:	40010000 	.word	0x40010000
 800c3ac:	40010400 	.word	0x40010400
 800c3b0:	40014000 	.word	0x40014000
 800c3b4:	40014400 	.word	0x40014400
 800c3b8:	40014800 	.word	0x40014800

0800c3bc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c3bc:	b480      	push	{r7}
 800c3be:	b087      	sub	sp, #28
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	6078      	str	r0, [r7, #4]
 800c3c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	6a1b      	ldr	r3, [r3, #32]
 800c3ca:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	6a1b      	ldr	r3, [r3, #32]
 800c3d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	685b      	ldr	r3, [r3, #4]
 800c3dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c3e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c3ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c3ec:	683b      	ldr	r3, [r7, #0]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	68fa      	ldr	r2, [r7, #12]
 800c3f2:	4313      	orrs	r3, r2
 800c3f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c3f6:	693b      	ldr	r3, [r7, #16]
 800c3f8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c3fc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c3fe:	683b      	ldr	r3, [r7, #0]
 800c400:	689b      	ldr	r3, [r3, #8]
 800c402:	041b      	lsls	r3, r3, #16
 800c404:	693a      	ldr	r2, [r7, #16]
 800c406:	4313      	orrs	r3, r2
 800c408:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	4a17      	ldr	r2, [pc, #92]	; (800c46c <TIM_OC5_SetConfig+0xb0>)
 800c40e:	4293      	cmp	r3, r2
 800c410:	d00f      	beq.n	800c432 <TIM_OC5_SetConfig+0x76>
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	4a16      	ldr	r2, [pc, #88]	; (800c470 <TIM_OC5_SetConfig+0xb4>)
 800c416:	4293      	cmp	r3, r2
 800c418:	d00b      	beq.n	800c432 <TIM_OC5_SetConfig+0x76>
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	4a15      	ldr	r2, [pc, #84]	; (800c474 <TIM_OC5_SetConfig+0xb8>)
 800c41e:	4293      	cmp	r3, r2
 800c420:	d007      	beq.n	800c432 <TIM_OC5_SetConfig+0x76>
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	4a14      	ldr	r2, [pc, #80]	; (800c478 <TIM_OC5_SetConfig+0xbc>)
 800c426:	4293      	cmp	r3, r2
 800c428:	d003      	beq.n	800c432 <TIM_OC5_SetConfig+0x76>
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	4a13      	ldr	r2, [pc, #76]	; (800c47c <TIM_OC5_SetConfig+0xc0>)
 800c42e:	4293      	cmp	r3, r2
 800c430:	d109      	bne.n	800c446 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c432:	697b      	ldr	r3, [r7, #20]
 800c434:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c438:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c43a:	683b      	ldr	r3, [r7, #0]
 800c43c:	695b      	ldr	r3, [r3, #20]
 800c43e:	021b      	lsls	r3, r3, #8
 800c440:	697a      	ldr	r2, [r7, #20]
 800c442:	4313      	orrs	r3, r2
 800c444:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	697a      	ldr	r2, [r7, #20]
 800c44a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	68fa      	ldr	r2, [r7, #12]
 800c450:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c452:	683b      	ldr	r3, [r7, #0]
 800c454:	685a      	ldr	r2, [r3, #4]
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	693a      	ldr	r2, [r7, #16]
 800c45e:	621a      	str	r2, [r3, #32]
}
 800c460:	bf00      	nop
 800c462:	371c      	adds	r7, #28
 800c464:	46bd      	mov	sp, r7
 800c466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c46a:	4770      	bx	lr
 800c46c:	40010000 	.word	0x40010000
 800c470:	40010400 	.word	0x40010400
 800c474:	40014000 	.word	0x40014000
 800c478:	40014400 	.word	0x40014400
 800c47c:	40014800 	.word	0x40014800

0800c480 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c480:	b480      	push	{r7}
 800c482:	b087      	sub	sp, #28
 800c484:	af00      	add	r7, sp, #0
 800c486:	6078      	str	r0, [r7, #4]
 800c488:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	6a1b      	ldr	r3, [r3, #32]
 800c48e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	6a1b      	ldr	r3, [r3, #32]
 800c49a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	685b      	ldr	r3, [r3, #4]
 800c4a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c4ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c4b0:	683b      	ldr	r3, [r7, #0]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	021b      	lsls	r3, r3, #8
 800c4b6:	68fa      	ldr	r2, [r7, #12]
 800c4b8:	4313      	orrs	r3, r2
 800c4ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c4bc:	693b      	ldr	r3, [r7, #16]
 800c4be:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c4c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c4c4:	683b      	ldr	r3, [r7, #0]
 800c4c6:	689b      	ldr	r3, [r3, #8]
 800c4c8:	051b      	lsls	r3, r3, #20
 800c4ca:	693a      	ldr	r2, [r7, #16]
 800c4cc:	4313      	orrs	r3, r2
 800c4ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	4a18      	ldr	r2, [pc, #96]	; (800c534 <TIM_OC6_SetConfig+0xb4>)
 800c4d4:	4293      	cmp	r3, r2
 800c4d6:	d00f      	beq.n	800c4f8 <TIM_OC6_SetConfig+0x78>
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	4a17      	ldr	r2, [pc, #92]	; (800c538 <TIM_OC6_SetConfig+0xb8>)
 800c4dc:	4293      	cmp	r3, r2
 800c4de:	d00b      	beq.n	800c4f8 <TIM_OC6_SetConfig+0x78>
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	4a16      	ldr	r2, [pc, #88]	; (800c53c <TIM_OC6_SetConfig+0xbc>)
 800c4e4:	4293      	cmp	r3, r2
 800c4e6:	d007      	beq.n	800c4f8 <TIM_OC6_SetConfig+0x78>
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	4a15      	ldr	r2, [pc, #84]	; (800c540 <TIM_OC6_SetConfig+0xc0>)
 800c4ec:	4293      	cmp	r3, r2
 800c4ee:	d003      	beq.n	800c4f8 <TIM_OC6_SetConfig+0x78>
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	4a14      	ldr	r2, [pc, #80]	; (800c544 <TIM_OC6_SetConfig+0xc4>)
 800c4f4:	4293      	cmp	r3, r2
 800c4f6:	d109      	bne.n	800c50c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c4f8:	697b      	ldr	r3, [r7, #20]
 800c4fa:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c4fe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c500:	683b      	ldr	r3, [r7, #0]
 800c502:	695b      	ldr	r3, [r3, #20]
 800c504:	029b      	lsls	r3, r3, #10
 800c506:	697a      	ldr	r2, [r7, #20]
 800c508:	4313      	orrs	r3, r2
 800c50a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	697a      	ldr	r2, [r7, #20]
 800c510:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	68fa      	ldr	r2, [r7, #12]
 800c516:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c518:	683b      	ldr	r3, [r7, #0]
 800c51a:	685a      	ldr	r2, [r3, #4]
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	693a      	ldr	r2, [r7, #16]
 800c524:	621a      	str	r2, [r3, #32]
}
 800c526:	bf00      	nop
 800c528:	371c      	adds	r7, #28
 800c52a:	46bd      	mov	sp, r7
 800c52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c530:	4770      	bx	lr
 800c532:	bf00      	nop
 800c534:	40010000 	.word	0x40010000
 800c538:	40010400 	.word	0x40010400
 800c53c:	40014000 	.word	0x40014000
 800c540:	40014400 	.word	0x40014400
 800c544:	40014800 	.word	0x40014800

0800c548 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c548:	b480      	push	{r7}
 800c54a:	b087      	sub	sp, #28
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	60f8      	str	r0, [r7, #12]
 800c550:	60b9      	str	r1, [r7, #8]
 800c552:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	6a1b      	ldr	r3, [r3, #32]
 800c558:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	6a1b      	ldr	r3, [r3, #32]
 800c55e:	f023 0201 	bic.w	r2, r3, #1
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	699b      	ldr	r3, [r3, #24]
 800c56a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c56c:	693b      	ldr	r3, [r7, #16]
 800c56e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c572:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	011b      	lsls	r3, r3, #4
 800c578:	693a      	ldr	r2, [r7, #16]
 800c57a:	4313      	orrs	r3, r2
 800c57c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c57e:	697b      	ldr	r3, [r7, #20]
 800c580:	f023 030a 	bic.w	r3, r3, #10
 800c584:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c586:	697a      	ldr	r2, [r7, #20]
 800c588:	68bb      	ldr	r3, [r7, #8]
 800c58a:	4313      	orrs	r3, r2
 800c58c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	693a      	ldr	r2, [r7, #16]
 800c592:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	697a      	ldr	r2, [r7, #20]
 800c598:	621a      	str	r2, [r3, #32]
}
 800c59a:	bf00      	nop
 800c59c:	371c      	adds	r7, #28
 800c59e:	46bd      	mov	sp, r7
 800c5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a4:	4770      	bx	lr

0800c5a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c5a6:	b480      	push	{r7}
 800c5a8:	b087      	sub	sp, #28
 800c5aa:	af00      	add	r7, sp, #0
 800c5ac:	60f8      	str	r0, [r7, #12]
 800c5ae:	60b9      	str	r1, [r7, #8]
 800c5b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	6a1b      	ldr	r3, [r3, #32]
 800c5b6:	f023 0210 	bic.w	r2, r3, #16
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	699b      	ldr	r3, [r3, #24]
 800c5c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	6a1b      	ldr	r3, [r3, #32]
 800c5c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c5ca:	697b      	ldr	r3, [r7, #20]
 800c5cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c5d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	031b      	lsls	r3, r3, #12
 800c5d6:	697a      	ldr	r2, [r7, #20]
 800c5d8:	4313      	orrs	r3, r2
 800c5da:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c5dc:	693b      	ldr	r3, [r7, #16]
 800c5de:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c5e2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c5e4:	68bb      	ldr	r3, [r7, #8]
 800c5e6:	011b      	lsls	r3, r3, #4
 800c5e8:	693a      	ldr	r2, [r7, #16]
 800c5ea:	4313      	orrs	r3, r2
 800c5ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	697a      	ldr	r2, [r7, #20]
 800c5f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	693a      	ldr	r2, [r7, #16]
 800c5f8:	621a      	str	r2, [r3, #32]
}
 800c5fa:	bf00      	nop
 800c5fc:	371c      	adds	r7, #28
 800c5fe:	46bd      	mov	sp, r7
 800c600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c604:	4770      	bx	lr
	...

0800c608 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c608:	b480      	push	{r7}
 800c60a:	b085      	sub	sp, #20
 800c60c:	af00      	add	r7, sp, #0
 800c60e:	6078      	str	r0, [r7, #4]
 800c610:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	689b      	ldr	r3, [r3, #8]
 800c616:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c618:	68fa      	ldr	r2, [r7, #12]
 800c61a:	4b09      	ldr	r3, [pc, #36]	; (800c640 <TIM_ITRx_SetConfig+0x38>)
 800c61c:	4013      	ands	r3, r2
 800c61e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c620:	683a      	ldr	r2, [r7, #0]
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	4313      	orrs	r3, r2
 800c626:	f043 0307 	orr.w	r3, r3, #7
 800c62a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	68fa      	ldr	r2, [r7, #12]
 800c630:	609a      	str	r2, [r3, #8]
}
 800c632:	bf00      	nop
 800c634:	3714      	adds	r7, #20
 800c636:	46bd      	mov	sp, r7
 800c638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c63c:	4770      	bx	lr
 800c63e:	bf00      	nop
 800c640:	ffcfff8f 	.word	0xffcfff8f

0800c644 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c644:	b480      	push	{r7}
 800c646:	b087      	sub	sp, #28
 800c648:	af00      	add	r7, sp, #0
 800c64a:	60f8      	str	r0, [r7, #12]
 800c64c:	60b9      	str	r1, [r7, #8]
 800c64e:	607a      	str	r2, [r7, #4]
 800c650:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	689b      	ldr	r3, [r3, #8]
 800c656:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c658:	697b      	ldr	r3, [r7, #20]
 800c65a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c65e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c660:	683b      	ldr	r3, [r7, #0]
 800c662:	021a      	lsls	r2, r3, #8
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	431a      	orrs	r2, r3
 800c668:	68bb      	ldr	r3, [r7, #8]
 800c66a:	4313      	orrs	r3, r2
 800c66c:	697a      	ldr	r2, [r7, #20]
 800c66e:	4313      	orrs	r3, r2
 800c670:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	697a      	ldr	r2, [r7, #20]
 800c676:	609a      	str	r2, [r3, #8]
}
 800c678:	bf00      	nop
 800c67a:	371c      	adds	r7, #28
 800c67c:	46bd      	mov	sp, r7
 800c67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c682:	4770      	bx	lr

0800c684 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c684:	b480      	push	{r7}
 800c686:	b085      	sub	sp, #20
 800c688:	af00      	add	r7, sp, #0
 800c68a:	6078      	str	r0, [r7, #4]
 800c68c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c694:	2b01      	cmp	r3, #1
 800c696:	d101      	bne.n	800c69c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c698:	2302      	movs	r3, #2
 800c69a:	e068      	b.n	800c76e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	2201      	movs	r2, #1
 800c6a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	2202      	movs	r2, #2
 800c6a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	685b      	ldr	r3, [r3, #4]
 800c6b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	689b      	ldr	r3, [r3, #8]
 800c6ba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	4a2e      	ldr	r2, [pc, #184]	; (800c77c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800c6c2:	4293      	cmp	r3, r2
 800c6c4:	d004      	beq.n	800c6d0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	4a2d      	ldr	r2, [pc, #180]	; (800c780 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800c6cc:	4293      	cmp	r3, r2
 800c6ce:	d108      	bne.n	800c6e2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c6d6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c6d8:	683b      	ldr	r3, [r7, #0]
 800c6da:	685b      	ldr	r3, [r3, #4]
 800c6dc:	68fa      	ldr	r2, [r7, #12]
 800c6de:	4313      	orrs	r3, r2
 800c6e0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c6e8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c6ea:	683b      	ldr	r3, [r7, #0]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	68fa      	ldr	r2, [r7, #12]
 800c6f0:	4313      	orrs	r3, r2
 800c6f2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	68fa      	ldr	r2, [r7, #12]
 800c6fa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	4a1e      	ldr	r2, [pc, #120]	; (800c77c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800c702:	4293      	cmp	r3, r2
 800c704:	d01d      	beq.n	800c742 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c70e:	d018      	beq.n	800c742 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	4a1b      	ldr	r2, [pc, #108]	; (800c784 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c716:	4293      	cmp	r3, r2
 800c718:	d013      	beq.n	800c742 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	4a1a      	ldr	r2, [pc, #104]	; (800c788 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c720:	4293      	cmp	r3, r2
 800c722:	d00e      	beq.n	800c742 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	4a18      	ldr	r2, [pc, #96]	; (800c78c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800c72a:	4293      	cmp	r3, r2
 800c72c:	d009      	beq.n	800c742 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	4a13      	ldr	r2, [pc, #76]	; (800c780 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800c734:	4293      	cmp	r3, r2
 800c736:	d004      	beq.n	800c742 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	4a14      	ldr	r2, [pc, #80]	; (800c790 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800c73e:	4293      	cmp	r3, r2
 800c740:	d10c      	bne.n	800c75c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c742:	68bb      	ldr	r3, [r7, #8]
 800c744:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c748:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c74a:	683b      	ldr	r3, [r7, #0]
 800c74c:	689b      	ldr	r3, [r3, #8]
 800c74e:	68ba      	ldr	r2, [r7, #8]
 800c750:	4313      	orrs	r3, r2
 800c752:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	68ba      	ldr	r2, [r7, #8]
 800c75a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	2201      	movs	r2, #1
 800c760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	2200      	movs	r2, #0
 800c768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c76c:	2300      	movs	r3, #0
}
 800c76e:	4618      	mov	r0, r3
 800c770:	3714      	adds	r7, #20
 800c772:	46bd      	mov	sp, r7
 800c774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c778:	4770      	bx	lr
 800c77a:	bf00      	nop
 800c77c:	40010000 	.word	0x40010000
 800c780:	40010400 	.word	0x40010400
 800c784:	40000400 	.word	0x40000400
 800c788:	40000800 	.word	0x40000800
 800c78c:	40000c00 	.word	0x40000c00
 800c790:	40001800 	.word	0x40001800

0800c794 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c794:	b480      	push	{r7}
 800c796:	b085      	sub	sp, #20
 800c798:	af00      	add	r7, sp, #0
 800c79a:	6078      	str	r0, [r7, #4]
 800c79c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c79e:	2300      	movs	r3, #0
 800c7a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c7a8:	2b01      	cmp	r3, #1
 800c7aa:	d101      	bne.n	800c7b0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c7ac:	2302      	movs	r3, #2
 800c7ae:	e065      	b.n	800c87c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	2201      	movs	r2, #1
 800c7b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800c7be:	683b      	ldr	r3, [r7, #0]
 800c7c0:	68db      	ldr	r3, [r3, #12]
 800c7c2:	4313      	orrs	r3, r2
 800c7c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c7cc:	683b      	ldr	r3, [r7, #0]
 800c7ce:	689b      	ldr	r3, [r3, #8]
 800c7d0:	4313      	orrs	r3, r2
 800c7d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800c7da:	683b      	ldr	r3, [r7, #0]
 800c7dc:	685b      	ldr	r3, [r3, #4]
 800c7de:	4313      	orrs	r3, r2
 800c7e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800c7e8:	683b      	ldr	r3, [r7, #0]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	4313      	orrs	r3, r2
 800c7ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c7f6:	683b      	ldr	r3, [r7, #0]
 800c7f8:	691b      	ldr	r3, [r3, #16]
 800c7fa:	4313      	orrs	r3, r2
 800c7fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800c804:	683b      	ldr	r3, [r7, #0]
 800c806:	695b      	ldr	r3, [r3, #20]
 800c808:	4313      	orrs	r3, r2
 800c80a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c812:	683b      	ldr	r3, [r7, #0]
 800c814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c816:	4313      	orrs	r3, r2
 800c818:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800c820:	683b      	ldr	r3, [r7, #0]
 800c822:	699b      	ldr	r3, [r3, #24]
 800c824:	041b      	lsls	r3, r3, #16
 800c826:	4313      	orrs	r3, r2
 800c828:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	4a16      	ldr	r2, [pc, #88]	; (800c888 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800c830:	4293      	cmp	r3, r2
 800c832:	d004      	beq.n	800c83e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	4a14      	ldr	r2, [pc, #80]	; (800c88c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800c83a:	4293      	cmp	r3, r2
 800c83c:	d115      	bne.n	800c86a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800c844:	683b      	ldr	r3, [r7, #0]
 800c846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c848:	051b      	lsls	r3, r3, #20
 800c84a:	4313      	orrs	r3, r2
 800c84c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800c854:	683b      	ldr	r3, [r7, #0]
 800c856:	69db      	ldr	r3, [r3, #28]
 800c858:	4313      	orrs	r3, r2
 800c85a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800c862:	683b      	ldr	r3, [r7, #0]
 800c864:	6a1b      	ldr	r3, [r3, #32]
 800c866:	4313      	orrs	r3, r2
 800c868:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	68fa      	ldr	r2, [r7, #12]
 800c870:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	2200      	movs	r2, #0
 800c876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c87a:	2300      	movs	r3, #0
}
 800c87c:	4618      	mov	r0, r3
 800c87e:	3714      	adds	r7, #20
 800c880:	46bd      	mov	sp, r7
 800c882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c886:	4770      	bx	lr
 800c888:	40010000 	.word	0x40010000
 800c88c:	40010400 	.word	0x40010400

0800c890 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c890:	b580      	push	{r7, lr}
 800c892:	b082      	sub	sp, #8
 800c894:	af00      	add	r7, sp, #0
 800c896:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d101      	bne.n	800c8a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c89e:	2301      	movs	r3, #1
 800c8a0:	e042      	b.n	800c928 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d106      	bne.n	800c8ba <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	2200      	movs	r2, #0
 800c8b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c8b4:	6878      	ldr	r0, [r7, #4]
 800c8b6:	f7f5 fd5f 	bl	8002378 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	2224      	movs	r2, #36	; 0x24
 800c8be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	681a      	ldr	r2, [r3, #0]
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	f022 0201 	bic.w	r2, r2, #1
 800c8d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c8d2:	6878      	ldr	r0, [r7, #4]
 800c8d4:	f000 f8c2 	bl	800ca5c <UART_SetConfig>
 800c8d8:	4603      	mov	r3, r0
 800c8da:	2b01      	cmp	r3, #1
 800c8dc:	d101      	bne.n	800c8e2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800c8de:	2301      	movs	r3, #1
 800c8e0:	e022      	b.n	800c928 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d002      	beq.n	800c8f0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800c8ea:	6878      	ldr	r0, [r7, #4]
 800c8ec:	f000 fe16 	bl	800d51c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	685a      	ldr	r2, [r3, #4]
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c8fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	689a      	ldr	r2, [r3, #8]
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c90e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	681a      	ldr	r2, [r3, #0]
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	f042 0201 	orr.w	r2, r2, #1
 800c91e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c920:	6878      	ldr	r0, [r7, #4]
 800c922:	f000 fe9d 	bl	800d660 <UART_CheckIdleState>
 800c926:	4603      	mov	r3, r0
}
 800c928:	4618      	mov	r0, r3
 800c92a:	3708      	adds	r7, #8
 800c92c:	46bd      	mov	sp, r7
 800c92e:	bd80      	pop	{r7, pc}

0800c930 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c930:	b580      	push	{r7, lr}
 800c932:	b08a      	sub	sp, #40	; 0x28
 800c934:	af02      	add	r7, sp, #8
 800c936:	60f8      	str	r0, [r7, #12]
 800c938:	60b9      	str	r1, [r7, #8]
 800c93a:	603b      	str	r3, [r7, #0]
 800c93c:	4613      	mov	r3, r2
 800c93e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c946:	2b20      	cmp	r3, #32
 800c948:	f040 8083 	bne.w	800ca52 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800c94c:	68bb      	ldr	r3, [r7, #8]
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d002      	beq.n	800c958 <HAL_UART_Transmit+0x28>
 800c952:	88fb      	ldrh	r3, [r7, #6]
 800c954:	2b00      	cmp	r3, #0
 800c956:	d101      	bne.n	800c95c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800c958:	2301      	movs	r3, #1
 800c95a:	e07b      	b.n	800ca54 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c962:	2b01      	cmp	r3, #1
 800c964:	d101      	bne.n	800c96a <HAL_UART_Transmit+0x3a>
 800c966:	2302      	movs	r3, #2
 800c968:	e074      	b.n	800ca54 <HAL_UART_Transmit+0x124>
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	2201      	movs	r2, #1
 800c96e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	2200      	movs	r2, #0
 800c976:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	2221      	movs	r2, #33	; 0x21
 800c97e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c982:	f7f6 feb7 	bl	80036f4 <HAL_GetTick>
 800c986:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	88fa      	ldrh	r2, [r7, #6]
 800c98c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	88fa      	ldrh	r2, [r7, #6]
 800c994:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	689b      	ldr	r3, [r3, #8]
 800c99c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c9a0:	d108      	bne.n	800c9b4 <HAL_UART_Transmit+0x84>
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	691b      	ldr	r3, [r3, #16]
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d104      	bne.n	800c9b4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800c9ae:	68bb      	ldr	r3, [r7, #8]
 800c9b0:	61bb      	str	r3, [r7, #24]
 800c9b2:	e003      	b.n	800c9bc <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800c9b4:	68bb      	ldr	r3, [r7, #8]
 800c9b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c9b8:	2300      	movs	r3, #0
 800c9ba:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	2200      	movs	r2, #0
 800c9c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800c9c4:	e02c      	b.n	800ca20 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c9c6:	683b      	ldr	r3, [r7, #0]
 800c9c8:	9300      	str	r3, [sp, #0]
 800c9ca:	697b      	ldr	r3, [r7, #20]
 800c9cc:	2200      	movs	r2, #0
 800c9ce:	2180      	movs	r1, #128	; 0x80
 800c9d0:	68f8      	ldr	r0, [r7, #12]
 800c9d2:	f000 fe90 	bl	800d6f6 <UART_WaitOnFlagUntilTimeout>
 800c9d6:	4603      	mov	r3, r0
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d001      	beq.n	800c9e0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800c9dc:	2303      	movs	r3, #3
 800c9de:	e039      	b.n	800ca54 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800c9e0:	69fb      	ldr	r3, [r7, #28]
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d10b      	bne.n	800c9fe <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c9e6:	69bb      	ldr	r3, [r7, #24]
 800c9e8:	881b      	ldrh	r3, [r3, #0]
 800c9ea:	461a      	mov	r2, r3
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c9f4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800c9f6:	69bb      	ldr	r3, [r7, #24]
 800c9f8:	3302      	adds	r3, #2
 800c9fa:	61bb      	str	r3, [r7, #24]
 800c9fc:	e007      	b.n	800ca0e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c9fe:	69fb      	ldr	r3, [r7, #28]
 800ca00:	781a      	ldrb	r2, [r3, #0]
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800ca08:	69fb      	ldr	r3, [r7, #28]
 800ca0a:	3301      	adds	r3, #1
 800ca0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ca14:	b29b      	uxth	r3, r3
 800ca16:	3b01      	subs	r3, #1
 800ca18:	b29a      	uxth	r2, r3
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ca26:	b29b      	uxth	r3, r3
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d1cc      	bne.n	800c9c6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ca2c:	683b      	ldr	r3, [r7, #0]
 800ca2e:	9300      	str	r3, [sp, #0]
 800ca30:	697b      	ldr	r3, [r7, #20]
 800ca32:	2200      	movs	r2, #0
 800ca34:	2140      	movs	r1, #64	; 0x40
 800ca36:	68f8      	ldr	r0, [r7, #12]
 800ca38:	f000 fe5d 	bl	800d6f6 <UART_WaitOnFlagUntilTimeout>
 800ca3c:	4603      	mov	r3, r0
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d001      	beq.n	800ca46 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800ca42:	2303      	movs	r3, #3
 800ca44:	e006      	b.n	800ca54 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	2220      	movs	r2, #32
 800ca4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800ca4e:	2300      	movs	r3, #0
 800ca50:	e000      	b.n	800ca54 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800ca52:	2302      	movs	r3, #2
  }
}
 800ca54:	4618      	mov	r0, r3
 800ca56:	3720      	adds	r7, #32
 800ca58:	46bd      	mov	sp, r7
 800ca5a:	bd80      	pop	{r7, pc}

0800ca5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ca5c:	b5b0      	push	{r4, r5, r7, lr}
 800ca5e:	b08e      	sub	sp, #56	; 0x38
 800ca60:	af00      	add	r7, sp, #0
 800ca62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ca64:	2300      	movs	r3, #0
 800ca66:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	689a      	ldr	r2, [r3, #8]
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	691b      	ldr	r3, [r3, #16]
 800ca72:	431a      	orrs	r2, r3
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	695b      	ldr	r3, [r3, #20]
 800ca78:	431a      	orrs	r2, r3
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	69db      	ldr	r3, [r3, #28]
 800ca7e:	4313      	orrs	r3, r2
 800ca80:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	681a      	ldr	r2, [r3, #0]
 800ca88:	4bbf      	ldr	r3, [pc, #764]	; (800cd88 <UART_SetConfig+0x32c>)
 800ca8a:	4013      	ands	r3, r2
 800ca8c:	687a      	ldr	r2, [r7, #4]
 800ca8e:	6812      	ldr	r2, [r2, #0]
 800ca90:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ca92:	430b      	orrs	r3, r1
 800ca94:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	685b      	ldr	r3, [r3, #4]
 800ca9c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	68da      	ldr	r2, [r3, #12]
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	430a      	orrs	r2, r1
 800caaa:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	699b      	ldr	r3, [r3, #24]
 800cab0:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	4ab5      	ldr	r2, [pc, #724]	; (800cd8c <UART_SetConfig+0x330>)
 800cab8:	4293      	cmp	r3, r2
 800caba:	d004      	beq.n	800cac6 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	6a1b      	ldr	r3, [r3, #32]
 800cac0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cac2:	4313      	orrs	r3, r2
 800cac4:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	689a      	ldr	r2, [r3, #8]
 800cacc:	4bb0      	ldr	r3, [pc, #704]	; (800cd90 <UART_SetConfig+0x334>)
 800cace:	4013      	ands	r3, r2
 800cad0:	687a      	ldr	r2, [r7, #4]
 800cad2:	6812      	ldr	r2, [r2, #0]
 800cad4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800cad6:	430b      	orrs	r3, r1
 800cad8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cae0:	f023 010f 	bic.w	r1, r3, #15
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	430a      	orrs	r2, r1
 800caee:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	4aa7      	ldr	r2, [pc, #668]	; (800cd94 <UART_SetConfig+0x338>)
 800caf6:	4293      	cmp	r3, r2
 800caf8:	d176      	bne.n	800cbe8 <UART_SetConfig+0x18c>
 800cafa:	4ba7      	ldr	r3, [pc, #668]	; (800cd98 <UART_SetConfig+0x33c>)
 800cafc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cafe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cb02:	2b28      	cmp	r3, #40	; 0x28
 800cb04:	d86c      	bhi.n	800cbe0 <UART_SetConfig+0x184>
 800cb06:	a201      	add	r2, pc, #4	; (adr r2, 800cb0c <UART_SetConfig+0xb0>)
 800cb08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb0c:	0800cbb1 	.word	0x0800cbb1
 800cb10:	0800cbe1 	.word	0x0800cbe1
 800cb14:	0800cbe1 	.word	0x0800cbe1
 800cb18:	0800cbe1 	.word	0x0800cbe1
 800cb1c:	0800cbe1 	.word	0x0800cbe1
 800cb20:	0800cbe1 	.word	0x0800cbe1
 800cb24:	0800cbe1 	.word	0x0800cbe1
 800cb28:	0800cbe1 	.word	0x0800cbe1
 800cb2c:	0800cbb9 	.word	0x0800cbb9
 800cb30:	0800cbe1 	.word	0x0800cbe1
 800cb34:	0800cbe1 	.word	0x0800cbe1
 800cb38:	0800cbe1 	.word	0x0800cbe1
 800cb3c:	0800cbe1 	.word	0x0800cbe1
 800cb40:	0800cbe1 	.word	0x0800cbe1
 800cb44:	0800cbe1 	.word	0x0800cbe1
 800cb48:	0800cbe1 	.word	0x0800cbe1
 800cb4c:	0800cbc1 	.word	0x0800cbc1
 800cb50:	0800cbe1 	.word	0x0800cbe1
 800cb54:	0800cbe1 	.word	0x0800cbe1
 800cb58:	0800cbe1 	.word	0x0800cbe1
 800cb5c:	0800cbe1 	.word	0x0800cbe1
 800cb60:	0800cbe1 	.word	0x0800cbe1
 800cb64:	0800cbe1 	.word	0x0800cbe1
 800cb68:	0800cbe1 	.word	0x0800cbe1
 800cb6c:	0800cbc9 	.word	0x0800cbc9
 800cb70:	0800cbe1 	.word	0x0800cbe1
 800cb74:	0800cbe1 	.word	0x0800cbe1
 800cb78:	0800cbe1 	.word	0x0800cbe1
 800cb7c:	0800cbe1 	.word	0x0800cbe1
 800cb80:	0800cbe1 	.word	0x0800cbe1
 800cb84:	0800cbe1 	.word	0x0800cbe1
 800cb88:	0800cbe1 	.word	0x0800cbe1
 800cb8c:	0800cbd1 	.word	0x0800cbd1
 800cb90:	0800cbe1 	.word	0x0800cbe1
 800cb94:	0800cbe1 	.word	0x0800cbe1
 800cb98:	0800cbe1 	.word	0x0800cbe1
 800cb9c:	0800cbe1 	.word	0x0800cbe1
 800cba0:	0800cbe1 	.word	0x0800cbe1
 800cba4:	0800cbe1 	.word	0x0800cbe1
 800cba8:	0800cbe1 	.word	0x0800cbe1
 800cbac:	0800cbd9 	.word	0x0800cbd9
 800cbb0:	2301      	movs	r3, #1
 800cbb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cbb6:	e222      	b.n	800cffe <UART_SetConfig+0x5a2>
 800cbb8:	2304      	movs	r3, #4
 800cbba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cbbe:	e21e      	b.n	800cffe <UART_SetConfig+0x5a2>
 800cbc0:	2308      	movs	r3, #8
 800cbc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cbc6:	e21a      	b.n	800cffe <UART_SetConfig+0x5a2>
 800cbc8:	2310      	movs	r3, #16
 800cbca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cbce:	e216      	b.n	800cffe <UART_SetConfig+0x5a2>
 800cbd0:	2320      	movs	r3, #32
 800cbd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cbd6:	e212      	b.n	800cffe <UART_SetConfig+0x5a2>
 800cbd8:	2340      	movs	r3, #64	; 0x40
 800cbda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cbde:	e20e      	b.n	800cffe <UART_SetConfig+0x5a2>
 800cbe0:	2380      	movs	r3, #128	; 0x80
 800cbe2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cbe6:	e20a      	b.n	800cffe <UART_SetConfig+0x5a2>
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	4a6b      	ldr	r2, [pc, #428]	; (800cd9c <UART_SetConfig+0x340>)
 800cbee:	4293      	cmp	r3, r2
 800cbf0:	d130      	bne.n	800cc54 <UART_SetConfig+0x1f8>
 800cbf2:	4b69      	ldr	r3, [pc, #420]	; (800cd98 <UART_SetConfig+0x33c>)
 800cbf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cbf6:	f003 0307 	and.w	r3, r3, #7
 800cbfa:	2b05      	cmp	r3, #5
 800cbfc:	d826      	bhi.n	800cc4c <UART_SetConfig+0x1f0>
 800cbfe:	a201      	add	r2, pc, #4	; (adr r2, 800cc04 <UART_SetConfig+0x1a8>)
 800cc00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc04:	0800cc1d 	.word	0x0800cc1d
 800cc08:	0800cc25 	.word	0x0800cc25
 800cc0c:	0800cc2d 	.word	0x0800cc2d
 800cc10:	0800cc35 	.word	0x0800cc35
 800cc14:	0800cc3d 	.word	0x0800cc3d
 800cc18:	0800cc45 	.word	0x0800cc45
 800cc1c:	2300      	movs	r3, #0
 800cc1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc22:	e1ec      	b.n	800cffe <UART_SetConfig+0x5a2>
 800cc24:	2304      	movs	r3, #4
 800cc26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc2a:	e1e8      	b.n	800cffe <UART_SetConfig+0x5a2>
 800cc2c:	2308      	movs	r3, #8
 800cc2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc32:	e1e4      	b.n	800cffe <UART_SetConfig+0x5a2>
 800cc34:	2310      	movs	r3, #16
 800cc36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc3a:	e1e0      	b.n	800cffe <UART_SetConfig+0x5a2>
 800cc3c:	2320      	movs	r3, #32
 800cc3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc42:	e1dc      	b.n	800cffe <UART_SetConfig+0x5a2>
 800cc44:	2340      	movs	r3, #64	; 0x40
 800cc46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc4a:	e1d8      	b.n	800cffe <UART_SetConfig+0x5a2>
 800cc4c:	2380      	movs	r3, #128	; 0x80
 800cc4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc52:	e1d4      	b.n	800cffe <UART_SetConfig+0x5a2>
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	4a51      	ldr	r2, [pc, #324]	; (800cda0 <UART_SetConfig+0x344>)
 800cc5a:	4293      	cmp	r3, r2
 800cc5c:	d130      	bne.n	800ccc0 <UART_SetConfig+0x264>
 800cc5e:	4b4e      	ldr	r3, [pc, #312]	; (800cd98 <UART_SetConfig+0x33c>)
 800cc60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc62:	f003 0307 	and.w	r3, r3, #7
 800cc66:	2b05      	cmp	r3, #5
 800cc68:	d826      	bhi.n	800ccb8 <UART_SetConfig+0x25c>
 800cc6a:	a201      	add	r2, pc, #4	; (adr r2, 800cc70 <UART_SetConfig+0x214>)
 800cc6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc70:	0800cc89 	.word	0x0800cc89
 800cc74:	0800cc91 	.word	0x0800cc91
 800cc78:	0800cc99 	.word	0x0800cc99
 800cc7c:	0800cca1 	.word	0x0800cca1
 800cc80:	0800cca9 	.word	0x0800cca9
 800cc84:	0800ccb1 	.word	0x0800ccb1
 800cc88:	2300      	movs	r3, #0
 800cc8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc8e:	e1b6      	b.n	800cffe <UART_SetConfig+0x5a2>
 800cc90:	2304      	movs	r3, #4
 800cc92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc96:	e1b2      	b.n	800cffe <UART_SetConfig+0x5a2>
 800cc98:	2308      	movs	r3, #8
 800cc9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc9e:	e1ae      	b.n	800cffe <UART_SetConfig+0x5a2>
 800cca0:	2310      	movs	r3, #16
 800cca2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cca6:	e1aa      	b.n	800cffe <UART_SetConfig+0x5a2>
 800cca8:	2320      	movs	r3, #32
 800ccaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ccae:	e1a6      	b.n	800cffe <UART_SetConfig+0x5a2>
 800ccb0:	2340      	movs	r3, #64	; 0x40
 800ccb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ccb6:	e1a2      	b.n	800cffe <UART_SetConfig+0x5a2>
 800ccb8:	2380      	movs	r3, #128	; 0x80
 800ccba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ccbe:	e19e      	b.n	800cffe <UART_SetConfig+0x5a2>
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	4a37      	ldr	r2, [pc, #220]	; (800cda4 <UART_SetConfig+0x348>)
 800ccc6:	4293      	cmp	r3, r2
 800ccc8:	d130      	bne.n	800cd2c <UART_SetConfig+0x2d0>
 800ccca:	4b33      	ldr	r3, [pc, #204]	; (800cd98 <UART_SetConfig+0x33c>)
 800cccc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ccce:	f003 0307 	and.w	r3, r3, #7
 800ccd2:	2b05      	cmp	r3, #5
 800ccd4:	d826      	bhi.n	800cd24 <UART_SetConfig+0x2c8>
 800ccd6:	a201      	add	r2, pc, #4	; (adr r2, 800ccdc <UART_SetConfig+0x280>)
 800ccd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccdc:	0800ccf5 	.word	0x0800ccf5
 800cce0:	0800ccfd 	.word	0x0800ccfd
 800cce4:	0800cd05 	.word	0x0800cd05
 800cce8:	0800cd0d 	.word	0x0800cd0d
 800ccec:	0800cd15 	.word	0x0800cd15
 800ccf0:	0800cd1d 	.word	0x0800cd1d
 800ccf4:	2300      	movs	r3, #0
 800ccf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ccfa:	e180      	b.n	800cffe <UART_SetConfig+0x5a2>
 800ccfc:	2304      	movs	r3, #4
 800ccfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd02:	e17c      	b.n	800cffe <UART_SetConfig+0x5a2>
 800cd04:	2308      	movs	r3, #8
 800cd06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd0a:	e178      	b.n	800cffe <UART_SetConfig+0x5a2>
 800cd0c:	2310      	movs	r3, #16
 800cd0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd12:	e174      	b.n	800cffe <UART_SetConfig+0x5a2>
 800cd14:	2320      	movs	r3, #32
 800cd16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd1a:	e170      	b.n	800cffe <UART_SetConfig+0x5a2>
 800cd1c:	2340      	movs	r3, #64	; 0x40
 800cd1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd22:	e16c      	b.n	800cffe <UART_SetConfig+0x5a2>
 800cd24:	2380      	movs	r3, #128	; 0x80
 800cd26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd2a:	e168      	b.n	800cffe <UART_SetConfig+0x5a2>
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	4a1d      	ldr	r2, [pc, #116]	; (800cda8 <UART_SetConfig+0x34c>)
 800cd32:	4293      	cmp	r3, r2
 800cd34:	d142      	bne.n	800cdbc <UART_SetConfig+0x360>
 800cd36:	4b18      	ldr	r3, [pc, #96]	; (800cd98 <UART_SetConfig+0x33c>)
 800cd38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cd3a:	f003 0307 	and.w	r3, r3, #7
 800cd3e:	2b05      	cmp	r3, #5
 800cd40:	d838      	bhi.n	800cdb4 <UART_SetConfig+0x358>
 800cd42:	a201      	add	r2, pc, #4	; (adr r2, 800cd48 <UART_SetConfig+0x2ec>)
 800cd44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd48:	0800cd61 	.word	0x0800cd61
 800cd4c:	0800cd69 	.word	0x0800cd69
 800cd50:	0800cd71 	.word	0x0800cd71
 800cd54:	0800cd79 	.word	0x0800cd79
 800cd58:	0800cd81 	.word	0x0800cd81
 800cd5c:	0800cdad 	.word	0x0800cdad
 800cd60:	2300      	movs	r3, #0
 800cd62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd66:	e14a      	b.n	800cffe <UART_SetConfig+0x5a2>
 800cd68:	2304      	movs	r3, #4
 800cd6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd6e:	e146      	b.n	800cffe <UART_SetConfig+0x5a2>
 800cd70:	2308      	movs	r3, #8
 800cd72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd76:	e142      	b.n	800cffe <UART_SetConfig+0x5a2>
 800cd78:	2310      	movs	r3, #16
 800cd7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd7e:	e13e      	b.n	800cffe <UART_SetConfig+0x5a2>
 800cd80:	2320      	movs	r3, #32
 800cd82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd86:	e13a      	b.n	800cffe <UART_SetConfig+0x5a2>
 800cd88:	cfff69f3 	.word	0xcfff69f3
 800cd8c:	58000c00 	.word	0x58000c00
 800cd90:	11fff4ff 	.word	0x11fff4ff
 800cd94:	40011000 	.word	0x40011000
 800cd98:	58024400 	.word	0x58024400
 800cd9c:	40004400 	.word	0x40004400
 800cda0:	40004800 	.word	0x40004800
 800cda4:	40004c00 	.word	0x40004c00
 800cda8:	40005000 	.word	0x40005000
 800cdac:	2340      	movs	r3, #64	; 0x40
 800cdae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cdb2:	e124      	b.n	800cffe <UART_SetConfig+0x5a2>
 800cdb4:	2380      	movs	r3, #128	; 0x80
 800cdb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cdba:	e120      	b.n	800cffe <UART_SetConfig+0x5a2>
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	4acc      	ldr	r2, [pc, #816]	; (800d0f4 <UART_SetConfig+0x698>)
 800cdc2:	4293      	cmp	r3, r2
 800cdc4:	d176      	bne.n	800ceb4 <UART_SetConfig+0x458>
 800cdc6:	4bcc      	ldr	r3, [pc, #816]	; (800d0f8 <UART_SetConfig+0x69c>)
 800cdc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cdca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cdce:	2b28      	cmp	r3, #40	; 0x28
 800cdd0:	d86c      	bhi.n	800ceac <UART_SetConfig+0x450>
 800cdd2:	a201      	add	r2, pc, #4	; (adr r2, 800cdd8 <UART_SetConfig+0x37c>)
 800cdd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdd8:	0800ce7d 	.word	0x0800ce7d
 800cddc:	0800cead 	.word	0x0800cead
 800cde0:	0800cead 	.word	0x0800cead
 800cde4:	0800cead 	.word	0x0800cead
 800cde8:	0800cead 	.word	0x0800cead
 800cdec:	0800cead 	.word	0x0800cead
 800cdf0:	0800cead 	.word	0x0800cead
 800cdf4:	0800cead 	.word	0x0800cead
 800cdf8:	0800ce85 	.word	0x0800ce85
 800cdfc:	0800cead 	.word	0x0800cead
 800ce00:	0800cead 	.word	0x0800cead
 800ce04:	0800cead 	.word	0x0800cead
 800ce08:	0800cead 	.word	0x0800cead
 800ce0c:	0800cead 	.word	0x0800cead
 800ce10:	0800cead 	.word	0x0800cead
 800ce14:	0800cead 	.word	0x0800cead
 800ce18:	0800ce8d 	.word	0x0800ce8d
 800ce1c:	0800cead 	.word	0x0800cead
 800ce20:	0800cead 	.word	0x0800cead
 800ce24:	0800cead 	.word	0x0800cead
 800ce28:	0800cead 	.word	0x0800cead
 800ce2c:	0800cead 	.word	0x0800cead
 800ce30:	0800cead 	.word	0x0800cead
 800ce34:	0800cead 	.word	0x0800cead
 800ce38:	0800ce95 	.word	0x0800ce95
 800ce3c:	0800cead 	.word	0x0800cead
 800ce40:	0800cead 	.word	0x0800cead
 800ce44:	0800cead 	.word	0x0800cead
 800ce48:	0800cead 	.word	0x0800cead
 800ce4c:	0800cead 	.word	0x0800cead
 800ce50:	0800cead 	.word	0x0800cead
 800ce54:	0800cead 	.word	0x0800cead
 800ce58:	0800ce9d 	.word	0x0800ce9d
 800ce5c:	0800cead 	.word	0x0800cead
 800ce60:	0800cead 	.word	0x0800cead
 800ce64:	0800cead 	.word	0x0800cead
 800ce68:	0800cead 	.word	0x0800cead
 800ce6c:	0800cead 	.word	0x0800cead
 800ce70:	0800cead 	.word	0x0800cead
 800ce74:	0800cead 	.word	0x0800cead
 800ce78:	0800cea5 	.word	0x0800cea5
 800ce7c:	2301      	movs	r3, #1
 800ce7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ce82:	e0bc      	b.n	800cffe <UART_SetConfig+0x5a2>
 800ce84:	2304      	movs	r3, #4
 800ce86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ce8a:	e0b8      	b.n	800cffe <UART_SetConfig+0x5a2>
 800ce8c:	2308      	movs	r3, #8
 800ce8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ce92:	e0b4      	b.n	800cffe <UART_SetConfig+0x5a2>
 800ce94:	2310      	movs	r3, #16
 800ce96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ce9a:	e0b0      	b.n	800cffe <UART_SetConfig+0x5a2>
 800ce9c:	2320      	movs	r3, #32
 800ce9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cea2:	e0ac      	b.n	800cffe <UART_SetConfig+0x5a2>
 800cea4:	2340      	movs	r3, #64	; 0x40
 800cea6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ceaa:	e0a8      	b.n	800cffe <UART_SetConfig+0x5a2>
 800ceac:	2380      	movs	r3, #128	; 0x80
 800ceae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ceb2:	e0a4      	b.n	800cffe <UART_SetConfig+0x5a2>
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	4a90      	ldr	r2, [pc, #576]	; (800d0fc <UART_SetConfig+0x6a0>)
 800ceba:	4293      	cmp	r3, r2
 800cebc:	d130      	bne.n	800cf20 <UART_SetConfig+0x4c4>
 800cebe:	4b8e      	ldr	r3, [pc, #568]	; (800d0f8 <UART_SetConfig+0x69c>)
 800cec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cec2:	f003 0307 	and.w	r3, r3, #7
 800cec6:	2b05      	cmp	r3, #5
 800cec8:	d826      	bhi.n	800cf18 <UART_SetConfig+0x4bc>
 800ceca:	a201      	add	r2, pc, #4	; (adr r2, 800ced0 <UART_SetConfig+0x474>)
 800cecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ced0:	0800cee9 	.word	0x0800cee9
 800ced4:	0800cef1 	.word	0x0800cef1
 800ced8:	0800cef9 	.word	0x0800cef9
 800cedc:	0800cf01 	.word	0x0800cf01
 800cee0:	0800cf09 	.word	0x0800cf09
 800cee4:	0800cf11 	.word	0x0800cf11
 800cee8:	2300      	movs	r3, #0
 800ceea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ceee:	e086      	b.n	800cffe <UART_SetConfig+0x5a2>
 800cef0:	2304      	movs	r3, #4
 800cef2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cef6:	e082      	b.n	800cffe <UART_SetConfig+0x5a2>
 800cef8:	2308      	movs	r3, #8
 800cefa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cefe:	e07e      	b.n	800cffe <UART_SetConfig+0x5a2>
 800cf00:	2310      	movs	r3, #16
 800cf02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cf06:	e07a      	b.n	800cffe <UART_SetConfig+0x5a2>
 800cf08:	2320      	movs	r3, #32
 800cf0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cf0e:	e076      	b.n	800cffe <UART_SetConfig+0x5a2>
 800cf10:	2340      	movs	r3, #64	; 0x40
 800cf12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cf16:	e072      	b.n	800cffe <UART_SetConfig+0x5a2>
 800cf18:	2380      	movs	r3, #128	; 0x80
 800cf1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cf1e:	e06e      	b.n	800cffe <UART_SetConfig+0x5a2>
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	4a76      	ldr	r2, [pc, #472]	; (800d100 <UART_SetConfig+0x6a4>)
 800cf26:	4293      	cmp	r3, r2
 800cf28:	d130      	bne.n	800cf8c <UART_SetConfig+0x530>
 800cf2a:	4b73      	ldr	r3, [pc, #460]	; (800d0f8 <UART_SetConfig+0x69c>)
 800cf2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cf2e:	f003 0307 	and.w	r3, r3, #7
 800cf32:	2b05      	cmp	r3, #5
 800cf34:	d826      	bhi.n	800cf84 <UART_SetConfig+0x528>
 800cf36:	a201      	add	r2, pc, #4	; (adr r2, 800cf3c <UART_SetConfig+0x4e0>)
 800cf38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf3c:	0800cf55 	.word	0x0800cf55
 800cf40:	0800cf5d 	.word	0x0800cf5d
 800cf44:	0800cf65 	.word	0x0800cf65
 800cf48:	0800cf6d 	.word	0x0800cf6d
 800cf4c:	0800cf75 	.word	0x0800cf75
 800cf50:	0800cf7d 	.word	0x0800cf7d
 800cf54:	2300      	movs	r3, #0
 800cf56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cf5a:	e050      	b.n	800cffe <UART_SetConfig+0x5a2>
 800cf5c:	2304      	movs	r3, #4
 800cf5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cf62:	e04c      	b.n	800cffe <UART_SetConfig+0x5a2>
 800cf64:	2308      	movs	r3, #8
 800cf66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cf6a:	e048      	b.n	800cffe <UART_SetConfig+0x5a2>
 800cf6c:	2310      	movs	r3, #16
 800cf6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cf72:	e044      	b.n	800cffe <UART_SetConfig+0x5a2>
 800cf74:	2320      	movs	r3, #32
 800cf76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cf7a:	e040      	b.n	800cffe <UART_SetConfig+0x5a2>
 800cf7c:	2340      	movs	r3, #64	; 0x40
 800cf7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cf82:	e03c      	b.n	800cffe <UART_SetConfig+0x5a2>
 800cf84:	2380      	movs	r3, #128	; 0x80
 800cf86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cf8a:	e038      	b.n	800cffe <UART_SetConfig+0x5a2>
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	4a5c      	ldr	r2, [pc, #368]	; (800d104 <UART_SetConfig+0x6a8>)
 800cf92:	4293      	cmp	r3, r2
 800cf94:	d130      	bne.n	800cff8 <UART_SetConfig+0x59c>
 800cf96:	4b58      	ldr	r3, [pc, #352]	; (800d0f8 <UART_SetConfig+0x69c>)
 800cf98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cf9a:	f003 0307 	and.w	r3, r3, #7
 800cf9e:	2b05      	cmp	r3, #5
 800cfa0:	d826      	bhi.n	800cff0 <UART_SetConfig+0x594>
 800cfa2:	a201      	add	r2, pc, #4	; (adr r2, 800cfa8 <UART_SetConfig+0x54c>)
 800cfa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfa8:	0800cfc1 	.word	0x0800cfc1
 800cfac:	0800cfc9 	.word	0x0800cfc9
 800cfb0:	0800cfd1 	.word	0x0800cfd1
 800cfb4:	0800cfd9 	.word	0x0800cfd9
 800cfb8:	0800cfe1 	.word	0x0800cfe1
 800cfbc:	0800cfe9 	.word	0x0800cfe9
 800cfc0:	2302      	movs	r3, #2
 800cfc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cfc6:	e01a      	b.n	800cffe <UART_SetConfig+0x5a2>
 800cfc8:	2304      	movs	r3, #4
 800cfca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cfce:	e016      	b.n	800cffe <UART_SetConfig+0x5a2>
 800cfd0:	2308      	movs	r3, #8
 800cfd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cfd6:	e012      	b.n	800cffe <UART_SetConfig+0x5a2>
 800cfd8:	2310      	movs	r3, #16
 800cfda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cfde:	e00e      	b.n	800cffe <UART_SetConfig+0x5a2>
 800cfe0:	2320      	movs	r3, #32
 800cfe2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cfe6:	e00a      	b.n	800cffe <UART_SetConfig+0x5a2>
 800cfe8:	2340      	movs	r3, #64	; 0x40
 800cfea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cfee:	e006      	b.n	800cffe <UART_SetConfig+0x5a2>
 800cff0:	2380      	movs	r3, #128	; 0x80
 800cff2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cff6:	e002      	b.n	800cffe <UART_SetConfig+0x5a2>
 800cff8:	2380      	movs	r3, #128	; 0x80
 800cffa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	4a40      	ldr	r2, [pc, #256]	; (800d104 <UART_SetConfig+0x6a8>)
 800d004:	4293      	cmp	r3, r2
 800d006:	f040 80ef 	bne.w	800d1e8 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d00a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d00e:	2b20      	cmp	r3, #32
 800d010:	dc46      	bgt.n	800d0a0 <UART_SetConfig+0x644>
 800d012:	2b02      	cmp	r3, #2
 800d014:	f2c0 8081 	blt.w	800d11a <UART_SetConfig+0x6be>
 800d018:	3b02      	subs	r3, #2
 800d01a:	2b1e      	cmp	r3, #30
 800d01c:	d87d      	bhi.n	800d11a <UART_SetConfig+0x6be>
 800d01e:	a201      	add	r2, pc, #4	; (adr r2, 800d024 <UART_SetConfig+0x5c8>)
 800d020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d024:	0800d0a7 	.word	0x0800d0a7
 800d028:	0800d11b 	.word	0x0800d11b
 800d02c:	0800d0af 	.word	0x0800d0af
 800d030:	0800d11b 	.word	0x0800d11b
 800d034:	0800d11b 	.word	0x0800d11b
 800d038:	0800d11b 	.word	0x0800d11b
 800d03c:	0800d0bf 	.word	0x0800d0bf
 800d040:	0800d11b 	.word	0x0800d11b
 800d044:	0800d11b 	.word	0x0800d11b
 800d048:	0800d11b 	.word	0x0800d11b
 800d04c:	0800d11b 	.word	0x0800d11b
 800d050:	0800d11b 	.word	0x0800d11b
 800d054:	0800d11b 	.word	0x0800d11b
 800d058:	0800d11b 	.word	0x0800d11b
 800d05c:	0800d0cf 	.word	0x0800d0cf
 800d060:	0800d11b 	.word	0x0800d11b
 800d064:	0800d11b 	.word	0x0800d11b
 800d068:	0800d11b 	.word	0x0800d11b
 800d06c:	0800d11b 	.word	0x0800d11b
 800d070:	0800d11b 	.word	0x0800d11b
 800d074:	0800d11b 	.word	0x0800d11b
 800d078:	0800d11b 	.word	0x0800d11b
 800d07c:	0800d11b 	.word	0x0800d11b
 800d080:	0800d11b 	.word	0x0800d11b
 800d084:	0800d11b 	.word	0x0800d11b
 800d088:	0800d11b 	.word	0x0800d11b
 800d08c:	0800d11b 	.word	0x0800d11b
 800d090:	0800d11b 	.word	0x0800d11b
 800d094:	0800d11b 	.word	0x0800d11b
 800d098:	0800d11b 	.word	0x0800d11b
 800d09c:	0800d10d 	.word	0x0800d10d
 800d0a0:	2b40      	cmp	r3, #64	; 0x40
 800d0a2:	d036      	beq.n	800d112 <UART_SetConfig+0x6b6>
 800d0a4:	e039      	b.n	800d11a <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800d0a6:	f7fd fda3 	bl	800abf0 <HAL_RCCEx_GetD3PCLK1Freq>
 800d0aa:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d0ac:	e03b      	b.n	800d126 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d0ae:	f107 0314 	add.w	r3, r7, #20
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	f7fd fdb2 	bl	800ac1c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d0b8:	69bb      	ldr	r3, [r7, #24]
 800d0ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d0bc:	e033      	b.n	800d126 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d0be:	f107 0308 	add.w	r3, r7, #8
 800d0c2:	4618      	mov	r0, r3
 800d0c4:	f7fd fefe 	bl	800aec4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d0cc:	e02b      	b.n	800d126 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d0ce:	4b0a      	ldr	r3, [pc, #40]	; (800d0f8 <UART_SetConfig+0x69c>)
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	f003 0320 	and.w	r3, r3, #32
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d009      	beq.n	800d0ee <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d0da:	4b07      	ldr	r3, [pc, #28]	; (800d0f8 <UART_SetConfig+0x69c>)
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	08db      	lsrs	r3, r3, #3
 800d0e0:	f003 0303 	and.w	r3, r3, #3
 800d0e4:	4a08      	ldr	r2, [pc, #32]	; (800d108 <UART_SetConfig+0x6ac>)
 800d0e6:	fa22 f303 	lsr.w	r3, r2, r3
 800d0ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d0ec:	e01b      	b.n	800d126 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800d0ee:	4b06      	ldr	r3, [pc, #24]	; (800d108 <UART_SetConfig+0x6ac>)
 800d0f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d0f2:	e018      	b.n	800d126 <UART_SetConfig+0x6ca>
 800d0f4:	40011400 	.word	0x40011400
 800d0f8:	58024400 	.word	0x58024400
 800d0fc:	40007800 	.word	0x40007800
 800d100:	40007c00 	.word	0x40007c00
 800d104:	58000c00 	.word	0x58000c00
 800d108:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d10c:	4bc4      	ldr	r3, [pc, #784]	; (800d420 <UART_SetConfig+0x9c4>)
 800d10e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d110:	e009      	b.n	800d126 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d112:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d116:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d118:	e005      	b.n	800d126 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800d11a:	2300      	movs	r3, #0
 800d11c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800d11e:	2301      	movs	r3, #1
 800d120:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800d124:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d128:	2b00      	cmp	r3, #0
 800d12a:	f000 81da 	beq.w	800d4e2 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d132:	4abc      	ldr	r2, [pc, #752]	; (800d424 <UART_SetConfig+0x9c8>)
 800d134:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d138:	461a      	mov	r2, r3
 800d13a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d13c:	fbb3 f3f2 	udiv	r3, r3, r2
 800d140:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	685a      	ldr	r2, [r3, #4]
 800d146:	4613      	mov	r3, r2
 800d148:	005b      	lsls	r3, r3, #1
 800d14a:	4413      	add	r3, r2
 800d14c:	6a3a      	ldr	r2, [r7, #32]
 800d14e:	429a      	cmp	r2, r3
 800d150:	d305      	bcc.n	800d15e <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	685b      	ldr	r3, [r3, #4]
 800d156:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d158:	6a3a      	ldr	r2, [r7, #32]
 800d15a:	429a      	cmp	r2, r3
 800d15c:	d903      	bls.n	800d166 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800d15e:	2301      	movs	r3, #1
 800d160:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800d164:	e1bd      	b.n	800d4e2 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d168:	4618      	mov	r0, r3
 800d16a:	f04f 0100 	mov.w	r1, #0
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d172:	4aac      	ldr	r2, [pc, #688]	; (800d424 <UART_SetConfig+0x9c8>)
 800d174:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d178:	b29a      	uxth	r2, r3
 800d17a:	f04f 0300 	mov.w	r3, #0
 800d17e:	f7f3 f907 	bl	8000390 <__aeabi_uldivmod>
 800d182:	4602      	mov	r2, r0
 800d184:	460b      	mov	r3, r1
 800d186:	4610      	mov	r0, r2
 800d188:	4619      	mov	r1, r3
 800d18a:	f04f 0200 	mov.w	r2, #0
 800d18e:	f04f 0300 	mov.w	r3, #0
 800d192:	020b      	lsls	r3, r1, #8
 800d194:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d198:	0202      	lsls	r2, r0, #8
 800d19a:	6879      	ldr	r1, [r7, #4]
 800d19c:	6849      	ldr	r1, [r1, #4]
 800d19e:	0849      	lsrs	r1, r1, #1
 800d1a0:	4608      	mov	r0, r1
 800d1a2:	f04f 0100 	mov.w	r1, #0
 800d1a6:	1814      	adds	r4, r2, r0
 800d1a8:	eb43 0501 	adc.w	r5, r3, r1
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	685b      	ldr	r3, [r3, #4]
 800d1b0:	461a      	mov	r2, r3
 800d1b2:	f04f 0300 	mov.w	r3, #0
 800d1b6:	4620      	mov	r0, r4
 800d1b8:	4629      	mov	r1, r5
 800d1ba:	f7f3 f8e9 	bl	8000390 <__aeabi_uldivmod>
 800d1be:	4602      	mov	r2, r0
 800d1c0:	460b      	mov	r3, r1
 800d1c2:	4613      	mov	r3, r2
 800d1c4:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d1c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d1cc:	d308      	bcc.n	800d1e0 <UART_SetConfig+0x784>
 800d1ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d1d4:	d204      	bcs.n	800d1e0 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d1dc:	60da      	str	r2, [r3, #12]
 800d1de:	e180      	b.n	800d4e2 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800d1e0:	2301      	movs	r3, #1
 800d1e2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800d1e6:	e17c      	b.n	800d4e2 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	69db      	ldr	r3, [r3, #28]
 800d1ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d1f0:	f040 80bf 	bne.w	800d372 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 800d1f4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d1f8:	2b20      	cmp	r3, #32
 800d1fa:	dc49      	bgt.n	800d290 <UART_SetConfig+0x834>
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	db7c      	blt.n	800d2fa <UART_SetConfig+0x89e>
 800d200:	2b20      	cmp	r3, #32
 800d202:	d87a      	bhi.n	800d2fa <UART_SetConfig+0x89e>
 800d204:	a201      	add	r2, pc, #4	; (adr r2, 800d20c <UART_SetConfig+0x7b0>)
 800d206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d20a:	bf00      	nop
 800d20c:	0800d297 	.word	0x0800d297
 800d210:	0800d29f 	.word	0x0800d29f
 800d214:	0800d2fb 	.word	0x0800d2fb
 800d218:	0800d2fb 	.word	0x0800d2fb
 800d21c:	0800d2a7 	.word	0x0800d2a7
 800d220:	0800d2fb 	.word	0x0800d2fb
 800d224:	0800d2fb 	.word	0x0800d2fb
 800d228:	0800d2fb 	.word	0x0800d2fb
 800d22c:	0800d2b7 	.word	0x0800d2b7
 800d230:	0800d2fb 	.word	0x0800d2fb
 800d234:	0800d2fb 	.word	0x0800d2fb
 800d238:	0800d2fb 	.word	0x0800d2fb
 800d23c:	0800d2fb 	.word	0x0800d2fb
 800d240:	0800d2fb 	.word	0x0800d2fb
 800d244:	0800d2fb 	.word	0x0800d2fb
 800d248:	0800d2fb 	.word	0x0800d2fb
 800d24c:	0800d2c7 	.word	0x0800d2c7
 800d250:	0800d2fb 	.word	0x0800d2fb
 800d254:	0800d2fb 	.word	0x0800d2fb
 800d258:	0800d2fb 	.word	0x0800d2fb
 800d25c:	0800d2fb 	.word	0x0800d2fb
 800d260:	0800d2fb 	.word	0x0800d2fb
 800d264:	0800d2fb 	.word	0x0800d2fb
 800d268:	0800d2fb 	.word	0x0800d2fb
 800d26c:	0800d2fb 	.word	0x0800d2fb
 800d270:	0800d2fb 	.word	0x0800d2fb
 800d274:	0800d2fb 	.word	0x0800d2fb
 800d278:	0800d2fb 	.word	0x0800d2fb
 800d27c:	0800d2fb 	.word	0x0800d2fb
 800d280:	0800d2fb 	.word	0x0800d2fb
 800d284:	0800d2fb 	.word	0x0800d2fb
 800d288:	0800d2fb 	.word	0x0800d2fb
 800d28c:	0800d2ed 	.word	0x0800d2ed
 800d290:	2b40      	cmp	r3, #64	; 0x40
 800d292:	d02e      	beq.n	800d2f2 <UART_SetConfig+0x896>
 800d294:	e031      	b.n	800d2fa <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d296:	f7fc f86d 	bl	8009374 <HAL_RCC_GetPCLK1Freq>
 800d29a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d29c:	e033      	b.n	800d306 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d29e:	f7fc f87f 	bl	80093a0 <HAL_RCC_GetPCLK2Freq>
 800d2a2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d2a4:	e02f      	b.n	800d306 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d2a6:	f107 0314 	add.w	r3, r7, #20
 800d2aa:	4618      	mov	r0, r3
 800d2ac:	f7fd fcb6 	bl	800ac1c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d2b0:	69bb      	ldr	r3, [r7, #24]
 800d2b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d2b4:	e027      	b.n	800d306 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d2b6:	f107 0308 	add.w	r3, r7, #8
 800d2ba:	4618      	mov	r0, r3
 800d2bc:	f7fd fe02 	bl	800aec4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d2c4:	e01f      	b.n	800d306 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d2c6:	4b58      	ldr	r3, [pc, #352]	; (800d428 <UART_SetConfig+0x9cc>)
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	f003 0320 	and.w	r3, r3, #32
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d009      	beq.n	800d2e6 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d2d2:	4b55      	ldr	r3, [pc, #340]	; (800d428 <UART_SetConfig+0x9cc>)
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	08db      	lsrs	r3, r3, #3
 800d2d8:	f003 0303 	and.w	r3, r3, #3
 800d2dc:	4a53      	ldr	r2, [pc, #332]	; (800d42c <UART_SetConfig+0x9d0>)
 800d2de:	fa22 f303 	lsr.w	r3, r2, r3
 800d2e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d2e4:	e00f      	b.n	800d306 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800d2e6:	4b51      	ldr	r3, [pc, #324]	; (800d42c <UART_SetConfig+0x9d0>)
 800d2e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d2ea:	e00c      	b.n	800d306 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d2ec:	4b4c      	ldr	r3, [pc, #304]	; (800d420 <UART_SetConfig+0x9c4>)
 800d2ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d2f0:	e009      	b.n	800d306 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d2f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d2f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d2f8:	e005      	b.n	800d306 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800d2fa:	2300      	movs	r3, #0
 800d2fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800d2fe:	2301      	movs	r3, #1
 800d300:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800d304:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d308:	2b00      	cmp	r3, #0
 800d30a:	f000 80ea 	beq.w	800d4e2 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d312:	4a44      	ldr	r2, [pc, #272]	; (800d424 <UART_SetConfig+0x9c8>)
 800d314:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d318:	461a      	mov	r2, r3
 800d31a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d31c:	fbb3 f3f2 	udiv	r3, r3, r2
 800d320:	005a      	lsls	r2, r3, #1
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	685b      	ldr	r3, [r3, #4]
 800d326:	085b      	lsrs	r3, r3, #1
 800d328:	441a      	add	r2, r3
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	685b      	ldr	r3, [r3, #4]
 800d32e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d332:	b29b      	uxth	r3, r3
 800d334:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d338:	2b0f      	cmp	r3, #15
 800d33a:	d916      	bls.n	800d36a <UART_SetConfig+0x90e>
 800d33c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d33e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d342:	d212      	bcs.n	800d36a <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d346:	b29b      	uxth	r3, r3
 800d348:	f023 030f 	bic.w	r3, r3, #15
 800d34c:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d34e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d350:	085b      	lsrs	r3, r3, #1
 800d352:	b29b      	uxth	r3, r3
 800d354:	f003 0307 	and.w	r3, r3, #7
 800d358:	b29a      	uxth	r2, r3
 800d35a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d35c:	4313      	orrs	r3, r2
 800d35e:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d366:	60da      	str	r2, [r3, #12]
 800d368:	e0bb      	b.n	800d4e2 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800d36a:	2301      	movs	r3, #1
 800d36c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800d370:	e0b7      	b.n	800d4e2 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d372:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d376:	2b20      	cmp	r3, #32
 800d378:	dc4a      	bgt.n	800d410 <UART_SetConfig+0x9b4>
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	f2c0 8086 	blt.w	800d48c <UART_SetConfig+0xa30>
 800d380:	2b20      	cmp	r3, #32
 800d382:	f200 8083 	bhi.w	800d48c <UART_SetConfig+0xa30>
 800d386:	a201      	add	r2, pc, #4	; (adr r2, 800d38c <UART_SetConfig+0x930>)
 800d388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d38c:	0800d417 	.word	0x0800d417
 800d390:	0800d431 	.word	0x0800d431
 800d394:	0800d48d 	.word	0x0800d48d
 800d398:	0800d48d 	.word	0x0800d48d
 800d39c:	0800d439 	.word	0x0800d439
 800d3a0:	0800d48d 	.word	0x0800d48d
 800d3a4:	0800d48d 	.word	0x0800d48d
 800d3a8:	0800d48d 	.word	0x0800d48d
 800d3ac:	0800d449 	.word	0x0800d449
 800d3b0:	0800d48d 	.word	0x0800d48d
 800d3b4:	0800d48d 	.word	0x0800d48d
 800d3b8:	0800d48d 	.word	0x0800d48d
 800d3bc:	0800d48d 	.word	0x0800d48d
 800d3c0:	0800d48d 	.word	0x0800d48d
 800d3c4:	0800d48d 	.word	0x0800d48d
 800d3c8:	0800d48d 	.word	0x0800d48d
 800d3cc:	0800d459 	.word	0x0800d459
 800d3d0:	0800d48d 	.word	0x0800d48d
 800d3d4:	0800d48d 	.word	0x0800d48d
 800d3d8:	0800d48d 	.word	0x0800d48d
 800d3dc:	0800d48d 	.word	0x0800d48d
 800d3e0:	0800d48d 	.word	0x0800d48d
 800d3e4:	0800d48d 	.word	0x0800d48d
 800d3e8:	0800d48d 	.word	0x0800d48d
 800d3ec:	0800d48d 	.word	0x0800d48d
 800d3f0:	0800d48d 	.word	0x0800d48d
 800d3f4:	0800d48d 	.word	0x0800d48d
 800d3f8:	0800d48d 	.word	0x0800d48d
 800d3fc:	0800d48d 	.word	0x0800d48d
 800d400:	0800d48d 	.word	0x0800d48d
 800d404:	0800d48d 	.word	0x0800d48d
 800d408:	0800d48d 	.word	0x0800d48d
 800d40c:	0800d47f 	.word	0x0800d47f
 800d410:	2b40      	cmp	r3, #64	; 0x40
 800d412:	d037      	beq.n	800d484 <UART_SetConfig+0xa28>
 800d414:	e03a      	b.n	800d48c <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d416:	f7fb ffad 	bl	8009374 <HAL_RCC_GetPCLK1Freq>
 800d41a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d41c:	e03c      	b.n	800d498 <UART_SetConfig+0xa3c>
 800d41e:	bf00      	nop
 800d420:	003d0900 	.word	0x003d0900
 800d424:	08011628 	.word	0x08011628
 800d428:	58024400 	.word	0x58024400
 800d42c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d430:	f7fb ffb6 	bl	80093a0 <HAL_RCC_GetPCLK2Freq>
 800d434:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d436:	e02f      	b.n	800d498 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d438:	f107 0314 	add.w	r3, r7, #20
 800d43c:	4618      	mov	r0, r3
 800d43e:	f7fd fbed 	bl	800ac1c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d442:	69bb      	ldr	r3, [r7, #24]
 800d444:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d446:	e027      	b.n	800d498 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d448:	f107 0308 	add.w	r3, r7, #8
 800d44c:	4618      	mov	r0, r3
 800d44e:	f7fd fd39 	bl	800aec4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d456:	e01f      	b.n	800d498 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d458:	4b2c      	ldr	r3, [pc, #176]	; (800d50c <UART_SetConfig+0xab0>)
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	f003 0320 	and.w	r3, r3, #32
 800d460:	2b00      	cmp	r3, #0
 800d462:	d009      	beq.n	800d478 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d464:	4b29      	ldr	r3, [pc, #164]	; (800d50c <UART_SetConfig+0xab0>)
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	08db      	lsrs	r3, r3, #3
 800d46a:	f003 0303 	and.w	r3, r3, #3
 800d46e:	4a28      	ldr	r2, [pc, #160]	; (800d510 <UART_SetConfig+0xab4>)
 800d470:	fa22 f303 	lsr.w	r3, r2, r3
 800d474:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d476:	e00f      	b.n	800d498 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800d478:	4b25      	ldr	r3, [pc, #148]	; (800d510 <UART_SetConfig+0xab4>)
 800d47a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d47c:	e00c      	b.n	800d498 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d47e:	4b25      	ldr	r3, [pc, #148]	; (800d514 <UART_SetConfig+0xab8>)
 800d480:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d482:	e009      	b.n	800d498 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d484:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d488:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d48a:	e005      	b.n	800d498 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800d48c:	2300      	movs	r3, #0
 800d48e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800d490:	2301      	movs	r3, #1
 800d492:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800d496:	bf00      	nop
    }

    if (pclk != 0U)
 800d498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d021      	beq.n	800d4e2 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4a2:	4a1d      	ldr	r2, [pc, #116]	; (800d518 <UART_SetConfig+0xabc>)
 800d4a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d4a8:	461a      	mov	r2, r3
 800d4aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4ac:	fbb3 f2f2 	udiv	r2, r3, r2
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	685b      	ldr	r3, [r3, #4]
 800d4b4:	085b      	lsrs	r3, r3, #1
 800d4b6:	441a      	add	r2, r3
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	685b      	ldr	r3, [r3, #4]
 800d4bc:	fbb2 f3f3 	udiv	r3, r2, r3
 800d4c0:	b29b      	uxth	r3, r3
 800d4c2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d4c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4c6:	2b0f      	cmp	r3, #15
 800d4c8:	d908      	bls.n	800d4dc <UART_SetConfig+0xa80>
 800d4ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d4d0:	d204      	bcs.n	800d4dc <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d4d8:	60da      	str	r2, [r3, #12]
 800d4da:	e002      	b.n	800d4e2 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800d4dc:	2301      	movs	r3, #1
 800d4de:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	2201      	movs	r2, #1
 800d4e6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	2201      	movs	r2, #1
 800d4ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	2200      	movs	r2, #0
 800d4f6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	2200      	movs	r2, #0
 800d4fc:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800d4fe:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800d502:	4618      	mov	r0, r3
 800d504:	3738      	adds	r7, #56	; 0x38
 800d506:	46bd      	mov	sp, r7
 800d508:	bdb0      	pop	{r4, r5, r7, pc}
 800d50a:	bf00      	nop
 800d50c:	58024400 	.word	0x58024400
 800d510:	03d09000 	.word	0x03d09000
 800d514:	003d0900 	.word	0x003d0900
 800d518:	08011628 	.word	0x08011628

0800d51c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d51c:	b480      	push	{r7}
 800d51e:	b083      	sub	sp, #12
 800d520:	af00      	add	r7, sp, #0
 800d522:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d528:	f003 0301 	and.w	r3, r3, #1
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d00a      	beq.n	800d546 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	685b      	ldr	r3, [r3, #4]
 800d536:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	430a      	orrs	r2, r1
 800d544:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d54a:	f003 0302 	and.w	r3, r3, #2
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d00a      	beq.n	800d568 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	685b      	ldr	r3, [r3, #4]
 800d558:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	430a      	orrs	r2, r1
 800d566:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d56c:	f003 0304 	and.w	r3, r3, #4
 800d570:	2b00      	cmp	r3, #0
 800d572:	d00a      	beq.n	800d58a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	685b      	ldr	r3, [r3, #4]
 800d57a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	430a      	orrs	r2, r1
 800d588:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d58e:	f003 0308 	and.w	r3, r3, #8
 800d592:	2b00      	cmp	r3, #0
 800d594:	d00a      	beq.n	800d5ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	685b      	ldr	r3, [r3, #4]
 800d59c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	430a      	orrs	r2, r1
 800d5aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5b0:	f003 0310 	and.w	r3, r3, #16
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d00a      	beq.n	800d5ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	689b      	ldr	r3, [r3, #8]
 800d5be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	430a      	orrs	r2, r1
 800d5cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5d2:	f003 0320 	and.w	r3, r3, #32
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d00a      	beq.n	800d5f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	689b      	ldr	r3, [r3, #8]
 800d5e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	430a      	orrs	r2, r1
 800d5ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d01a      	beq.n	800d632 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	685b      	ldr	r3, [r3, #4]
 800d602:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	430a      	orrs	r2, r1
 800d610:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d616:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d61a:	d10a      	bne.n	800d632 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	685b      	ldr	r3, [r3, #4]
 800d622:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	430a      	orrs	r2, r1
 800d630:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d636:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d00a      	beq.n	800d654 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	685b      	ldr	r3, [r3, #4]
 800d644:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	430a      	orrs	r2, r1
 800d652:	605a      	str	r2, [r3, #4]
  }
}
 800d654:	bf00      	nop
 800d656:	370c      	adds	r7, #12
 800d658:	46bd      	mov	sp, r7
 800d65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d65e:	4770      	bx	lr

0800d660 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d660:	b580      	push	{r7, lr}
 800d662:	b086      	sub	sp, #24
 800d664:	af02      	add	r7, sp, #8
 800d666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	2200      	movs	r2, #0
 800d66c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d670:	f7f6 f840 	bl	80036f4 <HAL_GetTick>
 800d674:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	f003 0308 	and.w	r3, r3, #8
 800d680:	2b08      	cmp	r3, #8
 800d682:	d10e      	bne.n	800d6a2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d684:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d688:	9300      	str	r3, [sp, #0]
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	2200      	movs	r2, #0
 800d68e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d692:	6878      	ldr	r0, [r7, #4]
 800d694:	f000 f82f 	bl	800d6f6 <UART_WaitOnFlagUntilTimeout>
 800d698:	4603      	mov	r3, r0
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d001      	beq.n	800d6a2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d69e:	2303      	movs	r3, #3
 800d6a0:	e025      	b.n	800d6ee <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	f003 0304 	and.w	r3, r3, #4
 800d6ac:	2b04      	cmp	r3, #4
 800d6ae:	d10e      	bne.n	800d6ce <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d6b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d6b4:	9300      	str	r3, [sp, #0]
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	2200      	movs	r2, #0
 800d6ba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d6be:	6878      	ldr	r0, [r7, #4]
 800d6c0:	f000 f819 	bl	800d6f6 <UART_WaitOnFlagUntilTimeout>
 800d6c4:	4603      	mov	r3, r0
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d001      	beq.n	800d6ce <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d6ca:	2303      	movs	r3, #3
 800d6cc:	e00f      	b.n	800d6ee <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	2220      	movs	r2, #32
 800d6d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	2220      	movs	r2, #32
 800d6da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	2200      	movs	r2, #0
 800d6e2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	2200      	movs	r2, #0
 800d6e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d6ec:	2300      	movs	r3, #0
}
 800d6ee:	4618      	mov	r0, r3
 800d6f0:	3710      	adds	r7, #16
 800d6f2:	46bd      	mov	sp, r7
 800d6f4:	bd80      	pop	{r7, pc}

0800d6f6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d6f6:	b580      	push	{r7, lr}
 800d6f8:	b084      	sub	sp, #16
 800d6fa:	af00      	add	r7, sp, #0
 800d6fc:	60f8      	str	r0, [r7, #12]
 800d6fe:	60b9      	str	r1, [r7, #8]
 800d700:	603b      	str	r3, [r7, #0]
 800d702:	4613      	mov	r3, r2
 800d704:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d706:	e062      	b.n	800d7ce <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d708:	69bb      	ldr	r3, [r7, #24]
 800d70a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d70e:	d05e      	beq.n	800d7ce <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d710:	f7f5 fff0 	bl	80036f4 <HAL_GetTick>
 800d714:	4602      	mov	r2, r0
 800d716:	683b      	ldr	r3, [r7, #0]
 800d718:	1ad3      	subs	r3, r2, r3
 800d71a:	69ba      	ldr	r2, [r7, #24]
 800d71c:	429a      	cmp	r2, r3
 800d71e:	d302      	bcc.n	800d726 <UART_WaitOnFlagUntilTimeout+0x30>
 800d720:	69bb      	ldr	r3, [r7, #24]
 800d722:	2b00      	cmp	r3, #0
 800d724:	d11d      	bne.n	800d762 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	681a      	ldr	r2, [r3, #0]
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800d734:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	689a      	ldr	r2, [r3, #8]
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	f022 0201 	bic.w	r2, r2, #1
 800d744:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	2220      	movs	r2, #32
 800d74a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	2220      	movs	r2, #32
 800d752:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	2200      	movs	r2, #0
 800d75a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800d75e:	2303      	movs	r3, #3
 800d760:	e045      	b.n	800d7ee <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	f003 0304 	and.w	r3, r3, #4
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d02e      	beq.n	800d7ce <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	69db      	ldr	r3, [r3, #28]
 800d776:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d77a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d77e:	d126      	bne.n	800d7ce <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d788:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	681a      	ldr	r2, [r3, #0]
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800d798:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	689a      	ldr	r2, [r3, #8]
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	f022 0201 	bic.w	r2, r2, #1
 800d7a8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	2220      	movs	r2, #32
 800d7ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	2220      	movs	r2, #32
 800d7b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	2220      	movs	r2, #32
 800d7be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	2200      	movs	r2, #0
 800d7c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800d7ca:	2303      	movs	r3, #3
 800d7cc:	e00f      	b.n	800d7ee <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	69da      	ldr	r2, [r3, #28]
 800d7d4:	68bb      	ldr	r3, [r7, #8]
 800d7d6:	4013      	ands	r3, r2
 800d7d8:	68ba      	ldr	r2, [r7, #8]
 800d7da:	429a      	cmp	r2, r3
 800d7dc:	bf0c      	ite	eq
 800d7de:	2301      	moveq	r3, #1
 800d7e0:	2300      	movne	r3, #0
 800d7e2:	b2db      	uxtb	r3, r3
 800d7e4:	461a      	mov	r2, r3
 800d7e6:	79fb      	ldrb	r3, [r7, #7]
 800d7e8:	429a      	cmp	r2, r3
 800d7ea:	d08d      	beq.n	800d708 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d7ec:	2300      	movs	r3, #0
}
 800d7ee:	4618      	mov	r0, r3
 800d7f0:	3710      	adds	r7, #16
 800d7f2:	46bd      	mov	sp, r7
 800d7f4:	bd80      	pop	{r7, pc}

0800d7f6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d7f6:	b480      	push	{r7}
 800d7f8:	b085      	sub	sp, #20
 800d7fa:	af00      	add	r7, sp, #0
 800d7fc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d804:	2b01      	cmp	r3, #1
 800d806:	d101      	bne.n	800d80c <HAL_UARTEx_DisableFifoMode+0x16>
 800d808:	2302      	movs	r3, #2
 800d80a:	e027      	b.n	800d85c <HAL_UARTEx_DisableFifoMode+0x66>
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	2201      	movs	r2, #1
 800d810:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	2224      	movs	r2, #36	; 0x24
 800d818:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	681a      	ldr	r2, [r3, #0]
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	f022 0201 	bic.w	r2, r2, #1
 800d832:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d83a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	2200      	movs	r2, #0
 800d840:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	68fa      	ldr	r2, [r7, #12]
 800d848:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	2220      	movs	r2, #32
 800d84e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	2200      	movs	r2, #0
 800d856:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d85a:	2300      	movs	r3, #0
}
 800d85c:	4618      	mov	r0, r3
 800d85e:	3714      	adds	r7, #20
 800d860:	46bd      	mov	sp, r7
 800d862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d866:	4770      	bx	lr

0800d868 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d868:	b580      	push	{r7, lr}
 800d86a:	b084      	sub	sp, #16
 800d86c:	af00      	add	r7, sp, #0
 800d86e:	6078      	str	r0, [r7, #4]
 800d870:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d878:	2b01      	cmp	r3, #1
 800d87a:	d101      	bne.n	800d880 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d87c:	2302      	movs	r3, #2
 800d87e:	e02d      	b.n	800d8dc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	2201      	movs	r2, #1
 800d884:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	2224      	movs	r2, #36	; 0x24
 800d88c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	681a      	ldr	r2, [r3, #0]
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	f022 0201 	bic.w	r2, r2, #1
 800d8a6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	689b      	ldr	r3, [r3, #8]
 800d8ae:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	683a      	ldr	r2, [r7, #0]
 800d8b8:	430a      	orrs	r2, r1
 800d8ba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d8bc:	6878      	ldr	r0, [r7, #4]
 800d8be:	f000 f84f 	bl	800d960 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	68fa      	ldr	r2, [r7, #12]
 800d8c8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	2220      	movs	r2, #32
 800d8ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	2200      	movs	r2, #0
 800d8d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d8da:	2300      	movs	r3, #0
}
 800d8dc:	4618      	mov	r0, r3
 800d8de:	3710      	adds	r7, #16
 800d8e0:	46bd      	mov	sp, r7
 800d8e2:	bd80      	pop	{r7, pc}

0800d8e4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d8e4:	b580      	push	{r7, lr}
 800d8e6:	b084      	sub	sp, #16
 800d8e8:	af00      	add	r7, sp, #0
 800d8ea:	6078      	str	r0, [r7, #4]
 800d8ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d8f4:	2b01      	cmp	r3, #1
 800d8f6:	d101      	bne.n	800d8fc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d8f8:	2302      	movs	r3, #2
 800d8fa:	e02d      	b.n	800d958 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	2201      	movs	r2, #1
 800d900:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	2224      	movs	r2, #36	; 0x24
 800d908:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	681a      	ldr	r2, [r3, #0]
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	f022 0201 	bic.w	r2, r2, #1
 800d922:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	689b      	ldr	r3, [r3, #8]
 800d92a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	683a      	ldr	r2, [r7, #0]
 800d934:	430a      	orrs	r2, r1
 800d936:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d938:	6878      	ldr	r0, [r7, #4]
 800d93a:	f000 f811 	bl	800d960 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	68fa      	ldr	r2, [r7, #12]
 800d944:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	2220      	movs	r2, #32
 800d94a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	2200      	movs	r2, #0
 800d952:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d956:	2300      	movs	r3, #0
}
 800d958:	4618      	mov	r0, r3
 800d95a:	3710      	adds	r7, #16
 800d95c:	46bd      	mov	sp, r7
 800d95e:	bd80      	pop	{r7, pc}

0800d960 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d960:	b480      	push	{r7}
 800d962:	b085      	sub	sp, #20
 800d964:	af00      	add	r7, sp, #0
 800d966:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d108      	bne.n	800d982 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	2201      	movs	r2, #1
 800d974:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	2201      	movs	r2, #1
 800d97c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d980:	e031      	b.n	800d9e6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d982:	2310      	movs	r3, #16
 800d984:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d986:	2310      	movs	r3, #16
 800d988:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	689b      	ldr	r3, [r3, #8]
 800d990:	0e5b      	lsrs	r3, r3, #25
 800d992:	b2db      	uxtb	r3, r3
 800d994:	f003 0307 	and.w	r3, r3, #7
 800d998:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	689b      	ldr	r3, [r3, #8]
 800d9a0:	0f5b      	lsrs	r3, r3, #29
 800d9a2:	b2db      	uxtb	r3, r3
 800d9a4:	f003 0307 	and.w	r3, r3, #7
 800d9a8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d9aa:	7bbb      	ldrb	r3, [r7, #14]
 800d9ac:	7b3a      	ldrb	r2, [r7, #12]
 800d9ae:	4911      	ldr	r1, [pc, #68]	; (800d9f4 <UARTEx_SetNbDataToProcess+0x94>)
 800d9b0:	5c8a      	ldrb	r2, [r1, r2]
 800d9b2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d9b6:	7b3a      	ldrb	r2, [r7, #12]
 800d9b8:	490f      	ldr	r1, [pc, #60]	; (800d9f8 <UARTEx_SetNbDataToProcess+0x98>)
 800d9ba:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d9bc:	fb93 f3f2 	sdiv	r3, r3, r2
 800d9c0:	b29a      	uxth	r2, r3
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d9c8:	7bfb      	ldrb	r3, [r7, #15]
 800d9ca:	7b7a      	ldrb	r2, [r7, #13]
 800d9cc:	4909      	ldr	r1, [pc, #36]	; (800d9f4 <UARTEx_SetNbDataToProcess+0x94>)
 800d9ce:	5c8a      	ldrb	r2, [r1, r2]
 800d9d0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d9d4:	7b7a      	ldrb	r2, [r7, #13]
 800d9d6:	4908      	ldr	r1, [pc, #32]	; (800d9f8 <UARTEx_SetNbDataToProcess+0x98>)
 800d9d8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d9da:	fb93 f3f2 	sdiv	r3, r3, r2
 800d9de:	b29a      	uxth	r2, r3
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d9e6:	bf00      	nop
 800d9e8:	3714      	adds	r7, #20
 800d9ea:	46bd      	mov	sp, r7
 800d9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f0:	4770      	bx	lr
 800d9f2:	bf00      	nop
 800d9f4:	08011640 	.word	0x08011640
 800d9f8:	08011648 	.word	0x08011648

0800d9fc <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 800d9fc:	b580      	push	{r7, lr}
 800d9fe:	b082      	sub	sp, #8
 800da00:	af00      	add	r7, sp, #0
 800da02:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	2b00      	cmp	r3, #0
 800da08:	d101      	bne.n	800da0e <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 800da0a:	2301      	movs	r3, #1
 800da0c:	e03c      	b.n	800da88 <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800da14:	b2db      	uxtb	r3, r3
 800da16:	2b00      	cmp	r3, #0
 800da18:	d106      	bne.n	800da28 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	2200      	movs	r2, #0
 800da1e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 800da22:	6878      	ldr	r0, [r7, #4]
 800da24:	f7f4 fdf0 	bl	8002608 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	2202      	movs	r2, #2
 800da2c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	681a      	ldr	r2, [r3, #0]
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	f022 0201 	bic.w	r2, r2, #1
 800da3e:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 800da40:	6878      	ldr	r0, [r7, #4]
 800da42:	f000 f85b 	bl	800dafc <USART_SetConfig>
 800da46:	4603      	mov	r3, r0
 800da48:	2b01      	cmp	r3, #1
 800da4a:	d101      	bne.n	800da50 <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 800da4c:	2301      	movs	r3, #1
 800da4e:	e01b      	b.n	800da88 <HAL_USART_Init+0x8c>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	685a      	ldr	r2, [r3, #4]
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800da5e:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	689a      	ldr	r2, [r3, #8]
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800da6e:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	681a      	ldr	r2, [r3, #0]
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	f042 0201 	orr.w	r2, r2, #1
 800da7e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 800da80:	6878      	ldr	r0, [r7, #4]
 800da82:	f000 fd5b 	bl	800e53c <USART_CheckIdleState>
 800da86:	4603      	mov	r3, r0
}
 800da88:	4618      	mov	r0, r3
 800da8a:	3708      	adds	r7, #8
 800da8c:	46bd      	mov	sp, r7
 800da8e:	bd80      	pop	{r7, pc}

0800da90 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 800da90:	b580      	push	{r7, lr}
 800da92:	b084      	sub	sp, #16
 800da94:	af00      	add	r7, sp, #0
 800da96:	60f8      	str	r0, [r7, #12]
 800da98:	60b9      	str	r1, [r7, #8]
 800da9a:	603b      	str	r3, [r7, #0]
 800da9c:	4613      	mov	r3, r2
 800da9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800daa0:	e018      	b.n	800dad4 <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800daa2:	69bb      	ldr	r3, [r7, #24]
 800daa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800daa8:	d014      	beq.n	800dad4 <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800daaa:	f7f5 fe23 	bl	80036f4 <HAL_GetTick>
 800daae:	4602      	mov	r2, r0
 800dab0:	683b      	ldr	r3, [r7, #0]
 800dab2:	1ad3      	subs	r3, r2, r3
 800dab4:	69ba      	ldr	r2, [r7, #24]
 800dab6:	429a      	cmp	r2, r3
 800dab8:	d302      	bcc.n	800dac0 <USART_WaitOnFlagUntilTimeout+0x30>
 800daba:	69bb      	ldr	r3, [r7, #24]
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d109      	bne.n	800dad4 <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	2201      	movs	r2, #1
 800dac4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	2200      	movs	r2, #0
 800dacc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_TIMEOUT;
 800dad0:	2303      	movs	r3, #3
 800dad2:	e00f      	b.n	800daf4 <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	69da      	ldr	r2, [r3, #28]
 800dada:	68bb      	ldr	r3, [r7, #8]
 800dadc:	4013      	ands	r3, r2
 800dade:	68ba      	ldr	r2, [r7, #8]
 800dae0:	429a      	cmp	r2, r3
 800dae2:	bf0c      	ite	eq
 800dae4:	2301      	moveq	r3, #1
 800dae6:	2300      	movne	r3, #0
 800dae8:	b2db      	uxtb	r3, r3
 800daea:	461a      	mov	r2, r3
 800daec:	79fb      	ldrb	r3, [r7, #7]
 800daee:	429a      	cmp	r2, r3
 800daf0:	d0d7      	beq.n	800daa2 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800daf2:	2300      	movs	r3, #0
}
 800daf4:	4618      	mov	r0, r3
 800daf6:	3710      	adds	r7, #16
 800daf8:	46bd      	mov	sp, r7
 800dafa:	bd80      	pop	{r7, pc}

0800dafc <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 800dafc:	b580      	push	{r7, lr}
 800dafe:	b08e      	sub	sp, #56	; 0x38
 800db00:	af00      	add	r7, sp, #0
 800db02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 800db04:	2300      	movs	r3, #0
 800db06:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 800db0a:	2300      	movs	r3, #0
 800db0c:	633b      	str	r3, [r7, #48]	; 0x30
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	689a      	ldr	r2, [r3, #8]
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	691b      	ldr	r3, [r3, #16]
 800db16:	431a      	orrs	r2, r3
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	695b      	ldr	r3, [r3, #20]
 800db1c:	4313      	orrs	r3, r2
 800db1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800db22:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	681a      	ldr	r2, [r3, #0]
 800db2a:	4bc9      	ldr	r3, [pc, #804]	; (800de50 <USART_SetConfig+0x354>)
 800db2c:	4013      	ands	r3, r2
 800db2e:	687a      	ldr	r2, [r7, #4]
 800db30:	6812      	ldr	r2, [r2, #0]
 800db32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800db34:	430b      	orrs	r3, r1
 800db36:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 800db38:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800db3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	6a1b      	ldr	r3, [r3, #32]
 800db42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800db44:	4313      	orrs	r3, r2
 800db46:	62fb      	str	r3, [r7, #44]	; 0x2c
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	699a      	ldr	r2, [r3, #24]
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	69db      	ldr	r3, [r3, #28]
 800db50:	4313      	orrs	r3, r2
 800db52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800db54:	4313      	orrs	r3, r2
 800db56:	62fb      	str	r3, [r7, #44]	; 0x2c
  tmpreg |= (uint32_t)husart->Init.StopBits;
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	68db      	ldr	r3, [r3, #12]
 800db5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800db5e:	4313      	orrs	r3, r2
 800db60:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	685a      	ldr	r2, [r3, #4]
 800db68:	4bba      	ldr	r3, [pc, #744]	; (800de54 <USART_SetConfig+0x358>)
 800db6a:	4013      	ands	r3, r2
 800db6c:	687a      	ldr	r2, [r7, #4]
 800db6e:	6812      	ldr	r2, [r2, #0]
 800db70:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800db72:	430b      	orrs	r3, r1
 800db74:	6053      	str	r3, [r2, #4]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - USART Clock Prescaler : set PRESCALER according to husart->Init.ClockPrescaler value */
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db7c:	f023 010f 	bic.w	r1, r3, #15
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	430a      	orrs	r2, r1
 800db8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	4ab1      	ldr	r2, [pc, #708]	; (800de58 <USART_SetConfig+0x35c>)
 800db92:	4293      	cmp	r3, r2
 800db94:	d176      	bne.n	800dc84 <USART_SetConfig+0x188>
 800db96:	4bb1      	ldr	r3, [pc, #708]	; (800de5c <USART_SetConfig+0x360>)
 800db98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db9a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800db9e:	2b28      	cmp	r3, #40	; 0x28
 800dba0:	d86c      	bhi.n	800dc7c <USART_SetConfig+0x180>
 800dba2:	a201      	add	r2, pc, #4	; (adr r2, 800dba8 <USART_SetConfig+0xac>)
 800dba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dba8:	0800dc4d 	.word	0x0800dc4d
 800dbac:	0800dc7d 	.word	0x0800dc7d
 800dbb0:	0800dc7d 	.word	0x0800dc7d
 800dbb4:	0800dc7d 	.word	0x0800dc7d
 800dbb8:	0800dc7d 	.word	0x0800dc7d
 800dbbc:	0800dc7d 	.word	0x0800dc7d
 800dbc0:	0800dc7d 	.word	0x0800dc7d
 800dbc4:	0800dc7d 	.word	0x0800dc7d
 800dbc8:	0800dc55 	.word	0x0800dc55
 800dbcc:	0800dc7d 	.word	0x0800dc7d
 800dbd0:	0800dc7d 	.word	0x0800dc7d
 800dbd4:	0800dc7d 	.word	0x0800dc7d
 800dbd8:	0800dc7d 	.word	0x0800dc7d
 800dbdc:	0800dc7d 	.word	0x0800dc7d
 800dbe0:	0800dc7d 	.word	0x0800dc7d
 800dbe4:	0800dc7d 	.word	0x0800dc7d
 800dbe8:	0800dc5d 	.word	0x0800dc5d
 800dbec:	0800dc7d 	.word	0x0800dc7d
 800dbf0:	0800dc7d 	.word	0x0800dc7d
 800dbf4:	0800dc7d 	.word	0x0800dc7d
 800dbf8:	0800dc7d 	.word	0x0800dc7d
 800dbfc:	0800dc7d 	.word	0x0800dc7d
 800dc00:	0800dc7d 	.word	0x0800dc7d
 800dc04:	0800dc7d 	.word	0x0800dc7d
 800dc08:	0800dc65 	.word	0x0800dc65
 800dc0c:	0800dc7d 	.word	0x0800dc7d
 800dc10:	0800dc7d 	.word	0x0800dc7d
 800dc14:	0800dc7d 	.word	0x0800dc7d
 800dc18:	0800dc7d 	.word	0x0800dc7d
 800dc1c:	0800dc7d 	.word	0x0800dc7d
 800dc20:	0800dc7d 	.word	0x0800dc7d
 800dc24:	0800dc7d 	.word	0x0800dc7d
 800dc28:	0800dc6d 	.word	0x0800dc6d
 800dc2c:	0800dc7d 	.word	0x0800dc7d
 800dc30:	0800dc7d 	.word	0x0800dc7d
 800dc34:	0800dc7d 	.word	0x0800dc7d
 800dc38:	0800dc7d 	.word	0x0800dc7d
 800dc3c:	0800dc7d 	.word	0x0800dc7d
 800dc40:	0800dc7d 	.word	0x0800dc7d
 800dc44:	0800dc7d 	.word	0x0800dc7d
 800dc48:	0800dc75 	.word	0x0800dc75
 800dc4c:	2301      	movs	r3, #1
 800dc4e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800dc52:	e112      	b.n	800de7a <USART_SetConfig+0x37e>
 800dc54:	2302      	movs	r3, #2
 800dc56:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800dc5a:	e10e      	b.n	800de7a <USART_SetConfig+0x37e>
 800dc5c:	2304      	movs	r3, #4
 800dc5e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800dc62:	e10a      	b.n	800de7a <USART_SetConfig+0x37e>
 800dc64:	2308      	movs	r3, #8
 800dc66:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800dc6a:	e106      	b.n	800de7a <USART_SetConfig+0x37e>
 800dc6c:	2310      	movs	r3, #16
 800dc6e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800dc72:	e102      	b.n	800de7a <USART_SetConfig+0x37e>
 800dc74:	2320      	movs	r3, #32
 800dc76:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800dc7a:	e0fe      	b.n	800de7a <USART_SetConfig+0x37e>
 800dc7c:	2340      	movs	r3, #64	; 0x40
 800dc7e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800dc82:	e0fa      	b.n	800de7a <USART_SetConfig+0x37e>
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	4a75      	ldr	r2, [pc, #468]	; (800de60 <USART_SetConfig+0x364>)
 800dc8a:	4293      	cmp	r3, r2
 800dc8c:	d130      	bne.n	800dcf0 <USART_SetConfig+0x1f4>
 800dc8e:	4b73      	ldr	r3, [pc, #460]	; (800de5c <USART_SetConfig+0x360>)
 800dc90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc92:	f003 0307 	and.w	r3, r3, #7
 800dc96:	2b05      	cmp	r3, #5
 800dc98:	d826      	bhi.n	800dce8 <USART_SetConfig+0x1ec>
 800dc9a:	a201      	add	r2, pc, #4	; (adr r2, 800dca0 <USART_SetConfig+0x1a4>)
 800dc9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dca0:	0800dcb9 	.word	0x0800dcb9
 800dca4:	0800dcc1 	.word	0x0800dcc1
 800dca8:	0800dcc9 	.word	0x0800dcc9
 800dcac:	0800dcd1 	.word	0x0800dcd1
 800dcb0:	0800dcd9 	.word	0x0800dcd9
 800dcb4:	0800dce1 	.word	0x0800dce1
 800dcb8:	2300      	movs	r3, #0
 800dcba:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800dcbe:	e0dc      	b.n	800de7a <USART_SetConfig+0x37e>
 800dcc0:	2302      	movs	r3, #2
 800dcc2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800dcc6:	e0d8      	b.n	800de7a <USART_SetConfig+0x37e>
 800dcc8:	2304      	movs	r3, #4
 800dcca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800dcce:	e0d4      	b.n	800de7a <USART_SetConfig+0x37e>
 800dcd0:	2308      	movs	r3, #8
 800dcd2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800dcd6:	e0d0      	b.n	800de7a <USART_SetConfig+0x37e>
 800dcd8:	2310      	movs	r3, #16
 800dcda:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800dcde:	e0cc      	b.n	800de7a <USART_SetConfig+0x37e>
 800dce0:	2320      	movs	r3, #32
 800dce2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800dce6:	e0c8      	b.n	800de7a <USART_SetConfig+0x37e>
 800dce8:	2340      	movs	r3, #64	; 0x40
 800dcea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800dcee:	e0c4      	b.n	800de7a <USART_SetConfig+0x37e>
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	4a5b      	ldr	r2, [pc, #364]	; (800de64 <USART_SetConfig+0x368>)
 800dcf6:	4293      	cmp	r3, r2
 800dcf8:	d130      	bne.n	800dd5c <USART_SetConfig+0x260>
 800dcfa:	4b58      	ldr	r3, [pc, #352]	; (800de5c <USART_SetConfig+0x360>)
 800dcfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dcfe:	f003 0307 	and.w	r3, r3, #7
 800dd02:	2b05      	cmp	r3, #5
 800dd04:	d826      	bhi.n	800dd54 <USART_SetConfig+0x258>
 800dd06:	a201      	add	r2, pc, #4	; (adr r2, 800dd0c <USART_SetConfig+0x210>)
 800dd08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd0c:	0800dd25 	.word	0x0800dd25
 800dd10:	0800dd2d 	.word	0x0800dd2d
 800dd14:	0800dd35 	.word	0x0800dd35
 800dd18:	0800dd3d 	.word	0x0800dd3d
 800dd1c:	0800dd45 	.word	0x0800dd45
 800dd20:	0800dd4d 	.word	0x0800dd4d
 800dd24:	2300      	movs	r3, #0
 800dd26:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800dd2a:	e0a6      	b.n	800de7a <USART_SetConfig+0x37e>
 800dd2c:	2302      	movs	r3, #2
 800dd2e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800dd32:	e0a2      	b.n	800de7a <USART_SetConfig+0x37e>
 800dd34:	2304      	movs	r3, #4
 800dd36:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800dd3a:	e09e      	b.n	800de7a <USART_SetConfig+0x37e>
 800dd3c:	2308      	movs	r3, #8
 800dd3e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800dd42:	e09a      	b.n	800de7a <USART_SetConfig+0x37e>
 800dd44:	2310      	movs	r3, #16
 800dd46:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800dd4a:	e096      	b.n	800de7a <USART_SetConfig+0x37e>
 800dd4c:	2320      	movs	r3, #32
 800dd4e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800dd52:	e092      	b.n	800de7a <USART_SetConfig+0x37e>
 800dd54:	2340      	movs	r3, #64	; 0x40
 800dd56:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800dd5a:	e08e      	b.n	800de7a <USART_SetConfig+0x37e>
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	4a41      	ldr	r2, [pc, #260]	; (800de68 <USART_SetConfig+0x36c>)
 800dd62:	4293      	cmp	r3, r2
 800dd64:	f040 8086 	bne.w	800de74 <USART_SetConfig+0x378>
 800dd68:	4b3c      	ldr	r3, [pc, #240]	; (800de5c <USART_SetConfig+0x360>)
 800dd6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dd6c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dd70:	2b28      	cmp	r3, #40	; 0x28
 800dd72:	d87b      	bhi.n	800de6c <USART_SetConfig+0x370>
 800dd74:	a201      	add	r2, pc, #4	; (adr r2, 800dd7c <USART_SetConfig+0x280>)
 800dd76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd7a:	bf00      	nop
 800dd7c:	0800de21 	.word	0x0800de21
 800dd80:	0800de6d 	.word	0x0800de6d
 800dd84:	0800de6d 	.word	0x0800de6d
 800dd88:	0800de6d 	.word	0x0800de6d
 800dd8c:	0800de6d 	.word	0x0800de6d
 800dd90:	0800de6d 	.word	0x0800de6d
 800dd94:	0800de6d 	.word	0x0800de6d
 800dd98:	0800de6d 	.word	0x0800de6d
 800dd9c:	0800de29 	.word	0x0800de29
 800dda0:	0800de6d 	.word	0x0800de6d
 800dda4:	0800de6d 	.word	0x0800de6d
 800dda8:	0800de6d 	.word	0x0800de6d
 800ddac:	0800de6d 	.word	0x0800de6d
 800ddb0:	0800de6d 	.word	0x0800de6d
 800ddb4:	0800de6d 	.word	0x0800de6d
 800ddb8:	0800de6d 	.word	0x0800de6d
 800ddbc:	0800de31 	.word	0x0800de31
 800ddc0:	0800de6d 	.word	0x0800de6d
 800ddc4:	0800de6d 	.word	0x0800de6d
 800ddc8:	0800de6d 	.word	0x0800de6d
 800ddcc:	0800de6d 	.word	0x0800de6d
 800ddd0:	0800de6d 	.word	0x0800de6d
 800ddd4:	0800de6d 	.word	0x0800de6d
 800ddd8:	0800de6d 	.word	0x0800de6d
 800dddc:	0800de39 	.word	0x0800de39
 800dde0:	0800de6d 	.word	0x0800de6d
 800dde4:	0800de6d 	.word	0x0800de6d
 800dde8:	0800de6d 	.word	0x0800de6d
 800ddec:	0800de6d 	.word	0x0800de6d
 800ddf0:	0800de6d 	.word	0x0800de6d
 800ddf4:	0800de6d 	.word	0x0800de6d
 800ddf8:	0800de6d 	.word	0x0800de6d
 800ddfc:	0800de41 	.word	0x0800de41
 800de00:	0800de6d 	.word	0x0800de6d
 800de04:	0800de6d 	.word	0x0800de6d
 800de08:	0800de6d 	.word	0x0800de6d
 800de0c:	0800de6d 	.word	0x0800de6d
 800de10:	0800de6d 	.word	0x0800de6d
 800de14:	0800de6d 	.word	0x0800de6d
 800de18:	0800de6d 	.word	0x0800de6d
 800de1c:	0800de49 	.word	0x0800de49
 800de20:	2301      	movs	r3, #1
 800de22:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800de26:	e028      	b.n	800de7a <USART_SetConfig+0x37e>
 800de28:	2302      	movs	r3, #2
 800de2a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800de2e:	e024      	b.n	800de7a <USART_SetConfig+0x37e>
 800de30:	2304      	movs	r3, #4
 800de32:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800de36:	e020      	b.n	800de7a <USART_SetConfig+0x37e>
 800de38:	2308      	movs	r3, #8
 800de3a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800de3e:	e01c      	b.n	800de7a <USART_SetConfig+0x37e>
 800de40:	2310      	movs	r3, #16
 800de42:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800de46:	e018      	b.n	800de7a <USART_SetConfig+0x37e>
 800de48:	2320      	movs	r3, #32
 800de4a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800de4e:	e014      	b.n	800de7a <USART_SetConfig+0x37e>
 800de50:	cfff69f3 	.word	0xcfff69f3
 800de54:	ffffc0f6 	.word	0xffffc0f6
 800de58:	40011000 	.word	0x40011000
 800de5c:	58024400 	.word	0x58024400
 800de60:	40004400 	.word	0x40004400
 800de64:	40004800 	.word	0x40004800
 800de68:	40011400 	.word	0x40011400
 800de6c:	2340      	movs	r3, #64	; 0x40
 800de6e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800de72:	e002      	b.n	800de7a <USART_SetConfig+0x37e>
 800de74:	2340      	movs	r3, #64	; 0x40
 800de76:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

  switch (clocksource)
 800de7a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800de7e:	2b20      	cmp	r3, #32
 800de80:	f200 8329 	bhi.w	800e4d6 <USART_SetConfig+0x9da>
 800de84:	a201      	add	r2, pc, #4	; (adr r2, 800de8c <USART_SetConfig+0x390>)
 800de86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de8a:	bf00      	nop
 800de8c:	0800df11 	.word	0x0800df11
 800de90:	0800dfc7 	.word	0x0800dfc7
 800de94:	0800e07d 	.word	0x0800e07d
 800de98:	0800e4d7 	.word	0x0800e4d7
 800de9c:	0800e137 	.word	0x0800e137
 800dea0:	0800e4d7 	.word	0x0800e4d7
 800dea4:	0800e4d7 	.word	0x0800e4d7
 800dea8:	0800e4d7 	.word	0x0800e4d7
 800deac:	0800e1f1 	.word	0x0800e1f1
 800deb0:	0800e4d7 	.word	0x0800e4d7
 800deb4:	0800e4d7 	.word	0x0800e4d7
 800deb8:	0800e4d7 	.word	0x0800e4d7
 800debc:	0800e4d7 	.word	0x0800e4d7
 800dec0:	0800e4d7 	.word	0x0800e4d7
 800dec4:	0800e4d7 	.word	0x0800e4d7
 800dec8:	0800e4d7 	.word	0x0800e4d7
 800decc:	0800e369 	.word	0x0800e369
 800ded0:	0800e4d7 	.word	0x0800e4d7
 800ded4:	0800e4d7 	.word	0x0800e4d7
 800ded8:	0800e4d7 	.word	0x0800e4d7
 800dedc:	0800e4d7 	.word	0x0800e4d7
 800dee0:	0800e4d7 	.word	0x0800e4d7
 800dee4:	0800e4d7 	.word	0x0800e4d7
 800dee8:	0800e4d7 	.word	0x0800e4d7
 800deec:	0800e4d7 	.word	0x0800e4d7
 800def0:	0800e4d7 	.word	0x0800e4d7
 800def4:	0800e4d7 	.word	0x0800e4d7
 800def8:	0800e4d7 	.word	0x0800e4d7
 800defc:	0800e4d7 	.word	0x0800e4d7
 800df00:	0800e4d7 	.word	0x0800e4d7
 800df04:	0800e4d7 	.word	0x0800e4d7
 800df08:	0800e4d7 	.word	0x0800e4d7
 800df0c:	0800e425 	.word	0x0800e425
  {
    case USART_CLOCKSOURCE_D2PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 800df10:	f7fb fa30 	bl	8009374 <HAL_RCC_GetPCLK1Freq>
 800df14:	62b8      	str	r0, [r7, #40]	; 0x28
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d044      	beq.n	800dfa8 <USART_SetConfig+0x4ac>
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df22:	2b01      	cmp	r3, #1
 800df24:	d03e      	beq.n	800dfa4 <USART_SetConfig+0x4a8>
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df2a:	2b02      	cmp	r3, #2
 800df2c:	d038      	beq.n	800dfa0 <USART_SetConfig+0x4a4>
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df32:	2b03      	cmp	r3, #3
 800df34:	d032      	beq.n	800df9c <USART_SetConfig+0x4a0>
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df3a:	2b04      	cmp	r3, #4
 800df3c:	d02c      	beq.n	800df98 <USART_SetConfig+0x49c>
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df42:	2b05      	cmp	r3, #5
 800df44:	d026      	beq.n	800df94 <USART_SetConfig+0x498>
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df4a:	2b06      	cmp	r3, #6
 800df4c:	d020      	beq.n	800df90 <USART_SetConfig+0x494>
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df52:	2b07      	cmp	r3, #7
 800df54:	d01a      	beq.n	800df8c <USART_SetConfig+0x490>
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df5a:	2b08      	cmp	r3, #8
 800df5c:	d014      	beq.n	800df88 <USART_SetConfig+0x48c>
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df62:	2b09      	cmp	r3, #9
 800df64:	d00e      	beq.n	800df84 <USART_SetConfig+0x488>
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df6a:	2b0a      	cmp	r3, #10
 800df6c:	d008      	beq.n	800df80 <USART_SetConfig+0x484>
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df72:	2b0b      	cmp	r3, #11
 800df74:	d102      	bne.n	800df7c <USART_SetConfig+0x480>
 800df76:	f44f 7380 	mov.w	r3, #256	; 0x100
 800df7a:	e016      	b.n	800dfaa <USART_SetConfig+0x4ae>
 800df7c:	2301      	movs	r3, #1
 800df7e:	e014      	b.n	800dfaa <USART_SetConfig+0x4ae>
 800df80:	2380      	movs	r3, #128	; 0x80
 800df82:	e012      	b.n	800dfaa <USART_SetConfig+0x4ae>
 800df84:	2340      	movs	r3, #64	; 0x40
 800df86:	e010      	b.n	800dfaa <USART_SetConfig+0x4ae>
 800df88:	2320      	movs	r3, #32
 800df8a:	e00e      	b.n	800dfaa <USART_SetConfig+0x4ae>
 800df8c:	2310      	movs	r3, #16
 800df8e:	e00c      	b.n	800dfaa <USART_SetConfig+0x4ae>
 800df90:	230c      	movs	r3, #12
 800df92:	e00a      	b.n	800dfaa <USART_SetConfig+0x4ae>
 800df94:	230a      	movs	r3, #10
 800df96:	e008      	b.n	800dfaa <USART_SetConfig+0x4ae>
 800df98:	2308      	movs	r3, #8
 800df9a:	e006      	b.n	800dfaa <USART_SetConfig+0x4ae>
 800df9c:	2306      	movs	r3, #6
 800df9e:	e004      	b.n	800dfaa <USART_SetConfig+0x4ae>
 800dfa0:	2304      	movs	r3, #4
 800dfa2:	e002      	b.n	800dfaa <USART_SetConfig+0x4ae>
 800dfa4:	2302      	movs	r3, #2
 800dfa6:	e000      	b.n	800dfaa <USART_SetConfig+0x4ae>
 800dfa8:	2301      	movs	r3, #1
 800dfaa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dfac:	fbb2 f3f3 	udiv	r3, r2, r3
 800dfb0:	005a      	lsls	r2, r3, #1
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	685b      	ldr	r3, [r3, #4]
 800dfb6:	085b      	lsrs	r3, r3, #1
 800dfb8:	441a      	add	r2, r3
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	685b      	ldr	r3, [r3, #4]
 800dfbe:	fbb2 f3f3 	udiv	r3, r2, r3
 800dfc2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800dfc4:	e28b      	b.n	800e4de <USART_SetConfig+0x9e2>
    case USART_CLOCKSOURCE_D2PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 800dfc6:	f7fb f9eb 	bl	80093a0 <HAL_RCC_GetPCLK2Freq>
 800dfca:	62b8      	str	r0, [r7, #40]	; 0x28
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d044      	beq.n	800e05e <USART_SetConfig+0x562>
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfd8:	2b01      	cmp	r3, #1
 800dfda:	d03e      	beq.n	800e05a <USART_SetConfig+0x55e>
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfe0:	2b02      	cmp	r3, #2
 800dfe2:	d038      	beq.n	800e056 <USART_SetConfig+0x55a>
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfe8:	2b03      	cmp	r3, #3
 800dfea:	d032      	beq.n	800e052 <USART_SetConfig+0x556>
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dff0:	2b04      	cmp	r3, #4
 800dff2:	d02c      	beq.n	800e04e <USART_SetConfig+0x552>
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dff8:	2b05      	cmp	r3, #5
 800dffa:	d026      	beq.n	800e04a <USART_SetConfig+0x54e>
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e000:	2b06      	cmp	r3, #6
 800e002:	d020      	beq.n	800e046 <USART_SetConfig+0x54a>
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e008:	2b07      	cmp	r3, #7
 800e00a:	d01a      	beq.n	800e042 <USART_SetConfig+0x546>
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e010:	2b08      	cmp	r3, #8
 800e012:	d014      	beq.n	800e03e <USART_SetConfig+0x542>
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e018:	2b09      	cmp	r3, #9
 800e01a:	d00e      	beq.n	800e03a <USART_SetConfig+0x53e>
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e020:	2b0a      	cmp	r3, #10
 800e022:	d008      	beq.n	800e036 <USART_SetConfig+0x53a>
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e028:	2b0b      	cmp	r3, #11
 800e02a:	d102      	bne.n	800e032 <USART_SetConfig+0x536>
 800e02c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e030:	e016      	b.n	800e060 <USART_SetConfig+0x564>
 800e032:	2301      	movs	r3, #1
 800e034:	e014      	b.n	800e060 <USART_SetConfig+0x564>
 800e036:	2380      	movs	r3, #128	; 0x80
 800e038:	e012      	b.n	800e060 <USART_SetConfig+0x564>
 800e03a:	2340      	movs	r3, #64	; 0x40
 800e03c:	e010      	b.n	800e060 <USART_SetConfig+0x564>
 800e03e:	2320      	movs	r3, #32
 800e040:	e00e      	b.n	800e060 <USART_SetConfig+0x564>
 800e042:	2310      	movs	r3, #16
 800e044:	e00c      	b.n	800e060 <USART_SetConfig+0x564>
 800e046:	230c      	movs	r3, #12
 800e048:	e00a      	b.n	800e060 <USART_SetConfig+0x564>
 800e04a:	230a      	movs	r3, #10
 800e04c:	e008      	b.n	800e060 <USART_SetConfig+0x564>
 800e04e:	2308      	movs	r3, #8
 800e050:	e006      	b.n	800e060 <USART_SetConfig+0x564>
 800e052:	2306      	movs	r3, #6
 800e054:	e004      	b.n	800e060 <USART_SetConfig+0x564>
 800e056:	2304      	movs	r3, #4
 800e058:	e002      	b.n	800e060 <USART_SetConfig+0x564>
 800e05a:	2302      	movs	r3, #2
 800e05c:	e000      	b.n	800e060 <USART_SetConfig+0x564>
 800e05e:	2301      	movs	r3, #1
 800e060:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e062:	fbb2 f3f3 	udiv	r3, r2, r3
 800e066:	005a      	lsls	r2, r3, #1
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	685b      	ldr	r3, [r3, #4]
 800e06c:	085b      	lsrs	r3, r3, #1
 800e06e:	441a      	add	r2, r3
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	685b      	ldr	r3, [r3, #4]
 800e074:	fbb2 f3f3 	udiv	r3, r2, r3
 800e078:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800e07a:	e230      	b.n	800e4de <USART_SetConfig+0x9e2>
    case USART_CLOCKSOURCE_PLL2:
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e07c:	f107 0318 	add.w	r3, r7, #24
 800e080:	4618      	mov	r0, r3
 800e082:	f7fc fdcb 	bl	800ac1c <HAL_RCCEx_GetPLL2ClockFreq>
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, husart->Init.BaudRate,
 800e086:	69fa      	ldr	r2, [r7, #28]
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d044      	beq.n	800e11a <USART_SetConfig+0x61e>
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e094:	2b01      	cmp	r3, #1
 800e096:	d03e      	beq.n	800e116 <USART_SetConfig+0x61a>
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e09c:	2b02      	cmp	r3, #2
 800e09e:	d038      	beq.n	800e112 <USART_SetConfig+0x616>
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0a4:	2b03      	cmp	r3, #3
 800e0a6:	d032      	beq.n	800e10e <USART_SetConfig+0x612>
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0ac:	2b04      	cmp	r3, #4
 800e0ae:	d02c      	beq.n	800e10a <USART_SetConfig+0x60e>
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0b4:	2b05      	cmp	r3, #5
 800e0b6:	d026      	beq.n	800e106 <USART_SetConfig+0x60a>
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0bc:	2b06      	cmp	r3, #6
 800e0be:	d020      	beq.n	800e102 <USART_SetConfig+0x606>
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0c4:	2b07      	cmp	r3, #7
 800e0c6:	d01a      	beq.n	800e0fe <USART_SetConfig+0x602>
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0cc:	2b08      	cmp	r3, #8
 800e0ce:	d014      	beq.n	800e0fa <USART_SetConfig+0x5fe>
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0d4:	2b09      	cmp	r3, #9
 800e0d6:	d00e      	beq.n	800e0f6 <USART_SetConfig+0x5fa>
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0dc:	2b0a      	cmp	r3, #10
 800e0de:	d008      	beq.n	800e0f2 <USART_SetConfig+0x5f6>
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0e4:	2b0b      	cmp	r3, #11
 800e0e6:	d102      	bne.n	800e0ee <USART_SetConfig+0x5f2>
 800e0e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e0ec:	e016      	b.n	800e11c <USART_SetConfig+0x620>
 800e0ee:	2301      	movs	r3, #1
 800e0f0:	e014      	b.n	800e11c <USART_SetConfig+0x620>
 800e0f2:	2380      	movs	r3, #128	; 0x80
 800e0f4:	e012      	b.n	800e11c <USART_SetConfig+0x620>
 800e0f6:	2340      	movs	r3, #64	; 0x40
 800e0f8:	e010      	b.n	800e11c <USART_SetConfig+0x620>
 800e0fa:	2320      	movs	r3, #32
 800e0fc:	e00e      	b.n	800e11c <USART_SetConfig+0x620>
 800e0fe:	2310      	movs	r3, #16
 800e100:	e00c      	b.n	800e11c <USART_SetConfig+0x620>
 800e102:	230c      	movs	r3, #12
 800e104:	e00a      	b.n	800e11c <USART_SetConfig+0x620>
 800e106:	230a      	movs	r3, #10
 800e108:	e008      	b.n	800e11c <USART_SetConfig+0x620>
 800e10a:	2308      	movs	r3, #8
 800e10c:	e006      	b.n	800e11c <USART_SetConfig+0x620>
 800e10e:	2306      	movs	r3, #6
 800e110:	e004      	b.n	800e11c <USART_SetConfig+0x620>
 800e112:	2304      	movs	r3, #4
 800e114:	e002      	b.n	800e11c <USART_SetConfig+0x620>
 800e116:	2302      	movs	r3, #2
 800e118:	e000      	b.n	800e11c <USART_SetConfig+0x620>
 800e11a:	2301      	movs	r3, #1
 800e11c:	fbb2 f3f3 	udiv	r3, r2, r3
 800e120:	005a      	lsls	r2, r3, #1
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	685b      	ldr	r3, [r3, #4]
 800e126:	085b      	lsrs	r3, r3, #1
 800e128:	441a      	add	r2, r3
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	685b      	ldr	r3, [r3, #4]
 800e12e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e132:	633b      	str	r3, [r7, #48]	; 0x30
                                                husart->Init.ClockPrescaler));
      break;
 800e134:	e1d3      	b.n	800e4de <USART_SetConfig+0x9e2>
    case USART_CLOCKSOURCE_PLL3:
      HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e136:	f107 030c 	add.w	r3, r7, #12
 800e13a:	4618      	mov	r0, r3
 800e13c:	f7fc fec2 	bl	800aec4 <HAL_RCCEx_GetPLL3ClockFreq>
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, husart->Init.BaudRate,
 800e140:	693a      	ldr	r2, [r7, #16]
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e146:	2b00      	cmp	r3, #0
 800e148:	d044      	beq.n	800e1d4 <USART_SetConfig+0x6d8>
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e14e:	2b01      	cmp	r3, #1
 800e150:	d03e      	beq.n	800e1d0 <USART_SetConfig+0x6d4>
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e156:	2b02      	cmp	r3, #2
 800e158:	d038      	beq.n	800e1cc <USART_SetConfig+0x6d0>
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e15e:	2b03      	cmp	r3, #3
 800e160:	d032      	beq.n	800e1c8 <USART_SetConfig+0x6cc>
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e166:	2b04      	cmp	r3, #4
 800e168:	d02c      	beq.n	800e1c4 <USART_SetConfig+0x6c8>
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e16e:	2b05      	cmp	r3, #5
 800e170:	d026      	beq.n	800e1c0 <USART_SetConfig+0x6c4>
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e176:	2b06      	cmp	r3, #6
 800e178:	d020      	beq.n	800e1bc <USART_SetConfig+0x6c0>
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e17e:	2b07      	cmp	r3, #7
 800e180:	d01a      	beq.n	800e1b8 <USART_SetConfig+0x6bc>
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e186:	2b08      	cmp	r3, #8
 800e188:	d014      	beq.n	800e1b4 <USART_SetConfig+0x6b8>
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e18e:	2b09      	cmp	r3, #9
 800e190:	d00e      	beq.n	800e1b0 <USART_SetConfig+0x6b4>
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e196:	2b0a      	cmp	r3, #10
 800e198:	d008      	beq.n	800e1ac <USART_SetConfig+0x6b0>
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e19e:	2b0b      	cmp	r3, #11
 800e1a0:	d102      	bne.n	800e1a8 <USART_SetConfig+0x6ac>
 800e1a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e1a6:	e016      	b.n	800e1d6 <USART_SetConfig+0x6da>
 800e1a8:	2301      	movs	r3, #1
 800e1aa:	e014      	b.n	800e1d6 <USART_SetConfig+0x6da>
 800e1ac:	2380      	movs	r3, #128	; 0x80
 800e1ae:	e012      	b.n	800e1d6 <USART_SetConfig+0x6da>
 800e1b0:	2340      	movs	r3, #64	; 0x40
 800e1b2:	e010      	b.n	800e1d6 <USART_SetConfig+0x6da>
 800e1b4:	2320      	movs	r3, #32
 800e1b6:	e00e      	b.n	800e1d6 <USART_SetConfig+0x6da>
 800e1b8:	2310      	movs	r3, #16
 800e1ba:	e00c      	b.n	800e1d6 <USART_SetConfig+0x6da>
 800e1bc:	230c      	movs	r3, #12
 800e1be:	e00a      	b.n	800e1d6 <USART_SetConfig+0x6da>
 800e1c0:	230a      	movs	r3, #10
 800e1c2:	e008      	b.n	800e1d6 <USART_SetConfig+0x6da>
 800e1c4:	2308      	movs	r3, #8
 800e1c6:	e006      	b.n	800e1d6 <USART_SetConfig+0x6da>
 800e1c8:	2306      	movs	r3, #6
 800e1ca:	e004      	b.n	800e1d6 <USART_SetConfig+0x6da>
 800e1cc:	2304      	movs	r3, #4
 800e1ce:	e002      	b.n	800e1d6 <USART_SetConfig+0x6da>
 800e1d0:	2302      	movs	r3, #2
 800e1d2:	e000      	b.n	800e1d6 <USART_SetConfig+0x6da>
 800e1d4:	2301      	movs	r3, #1
 800e1d6:	fbb2 f3f3 	udiv	r3, r2, r3
 800e1da:	005a      	lsls	r2, r3, #1
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	685b      	ldr	r3, [r3, #4]
 800e1e0:	085b      	lsrs	r3, r3, #1
 800e1e2:	441a      	add	r2, r3
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	685b      	ldr	r3, [r3, #4]
 800e1e8:	fbb2 f3f3 	udiv	r3, r2, r3
 800e1ec:	633b      	str	r3, [r7, #48]	; 0x30
                                                husart->Init.ClockPrescaler));
      break;
 800e1ee:	e176      	b.n	800e4de <USART_SetConfig+0x9e2>
    case USART_CLOCKSOURCE_HSI:
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e1f0:	4b89      	ldr	r3, [pc, #548]	; (800e418 <USART_SetConfig+0x91c>)
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	f003 0320 	and.w	r3, r3, #32
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d05d      	beq.n	800e2b8 <USART_SetConfig+0x7bc>
      {
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800e1fc:	4b86      	ldr	r3, [pc, #536]	; (800e418 <USART_SetConfig+0x91c>)
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	08db      	lsrs	r3, r3, #3
 800e202:	f003 0303 	and.w	r3, r3, #3
 800e206:	4a85      	ldr	r2, [pc, #532]	; (800e41c <USART_SetConfig+0x920>)
 800e208:	40da      	lsrs	r2, r3
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d044      	beq.n	800e29c <USART_SetConfig+0x7a0>
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e216:	2b01      	cmp	r3, #1
 800e218:	d03e      	beq.n	800e298 <USART_SetConfig+0x79c>
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e21e:	2b02      	cmp	r3, #2
 800e220:	d038      	beq.n	800e294 <USART_SetConfig+0x798>
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e226:	2b03      	cmp	r3, #3
 800e228:	d032      	beq.n	800e290 <USART_SetConfig+0x794>
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e22e:	2b04      	cmp	r3, #4
 800e230:	d02c      	beq.n	800e28c <USART_SetConfig+0x790>
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e236:	2b05      	cmp	r3, #5
 800e238:	d026      	beq.n	800e288 <USART_SetConfig+0x78c>
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e23e:	2b06      	cmp	r3, #6
 800e240:	d020      	beq.n	800e284 <USART_SetConfig+0x788>
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e246:	2b07      	cmp	r3, #7
 800e248:	d01a      	beq.n	800e280 <USART_SetConfig+0x784>
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e24e:	2b08      	cmp	r3, #8
 800e250:	d014      	beq.n	800e27c <USART_SetConfig+0x780>
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e256:	2b09      	cmp	r3, #9
 800e258:	d00e      	beq.n	800e278 <USART_SetConfig+0x77c>
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e25e:	2b0a      	cmp	r3, #10
 800e260:	d008      	beq.n	800e274 <USART_SetConfig+0x778>
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e266:	2b0b      	cmp	r3, #11
 800e268:	d102      	bne.n	800e270 <USART_SetConfig+0x774>
 800e26a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e26e:	e016      	b.n	800e29e <USART_SetConfig+0x7a2>
 800e270:	2301      	movs	r3, #1
 800e272:	e014      	b.n	800e29e <USART_SetConfig+0x7a2>
 800e274:	2380      	movs	r3, #128	; 0x80
 800e276:	e012      	b.n	800e29e <USART_SetConfig+0x7a2>
 800e278:	2340      	movs	r3, #64	; 0x40
 800e27a:	e010      	b.n	800e29e <USART_SetConfig+0x7a2>
 800e27c:	2320      	movs	r3, #32
 800e27e:	e00e      	b.n	800e29e <USART_SetConfig+0x7a2>
 800e280:	2310      	movs	r3, #16
 800e282:	e00c      	b.n	800e29e <USART_SetConfig+0x7a2>
 800e284:	230c      	movs	r3, #12
 800e286:	e00a      	b.n	800e29e <USART_SetConfig+0x7a2>
 800e288:	230a      	movs	r3, #10
 800e28a:	e008      	b.n	800e29e <USART_SetConfig+0x7a2>
 800e28c:	2308      	movs	r3, #8
 800e28e:	e006      	b.n	800e29e <USART_SetConfig+0x7a2>
 800e290:	2306      	movs	r3, #6
 800e292:	e004      	b.n	800e29e <USART_SetConfig+0x7a2>
 800e294:	2304      	movs	r3, #4
 800e296:	e002      	b.n	800e29e <USART_SetConfig+0x7a2>
 800e298:	2302      	movs	r3, #2
 800e29a:	e000      	b.n	800e29e <USART_SetConfig+0x7a2>
 800e29c:	2301      	movs	r3, #1
 800e29e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e2a2:	005a      	lsls	r2, r3, #1
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	685b      	ldr	r3, [r3, #4]
 800e2a8:	085b      	lsrs	r3, r3, #1
 800e2aa:	441a      	add	r2, r3
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	685b      	ldr	r3, [r3, #4]
 800e2b0:	fbb2 f3f3 	udiv	r3, r2, r3
 800e2b4:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
      }
      break;
 800e2b6:	e112      	b.n	800e4de <USART_SetConfig+0x9e2>
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d044      	beq.n	800e34a <USART_SetConfig+0x84e>
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2c4:	2b01      	cmp	r3, #1
 800e2c6:	d03e      	beq.n	800e346 <USART_SetConfig+0x84a>
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2cc:	2b02      	cmp	r3, #2
 800e2ce:	d038      	beq.n	800e342 <USART_SetConfig+0x846>
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2d4:	2b03      	cmp	r3, #3
 800e2d6:	d032      	beq.n	800e33e <USART_SetConfig+0x842>
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2dc:	2b04      	cmp	r3, #4
 800e2de:	d02c      	beq.n	800e33a <USART_SetConfig+0x83e>
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2e4:	2b05      	cmp	r3, #5
 800e2e6:	d026      	beq.n	800e336 <USART_SetConfig+0x83a>
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2ec:	2b06      	cmp	r3, #6
 800e2ee:	d020      	beq.n	800e332 <USART_SetConfig+0x836>
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2f4:	2b07      	cmp	r3, #7
 800e2f6:	d01a      	beq.n	800e32e <USART_SetConfig+0x832>
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2fc:	2b08      	cmp	r3, #8
 800e2fe:	d014      	beq.n	800e32a <USART_SetConfig+0x82e>
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e304:	2b09      	cmp	r3, #9
 800e306:	d00e      	beq.n	800e326 <USART_SetConfig+0x82a>
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e30c:	2b0a      	cmp	r3, #10
 800e30e:	d008      	beq.n	800e322 <USART_SetConfig+0x826>
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e314:	2b0b      	cmp	r3, #11
 800e316:	d102      	bne.n	800e31e <USART_SetConfig+0x822>
 800e318:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e31c:	e016      	b.n	800e34c <USART_SetConfig+0x850>
 800e31e:	2301      	movs	r3, #1
 800e320:	e014      	b.n	800e34c <USART_SetConfig+0x850>
 800e322:	2380      	movs	r3, #128	; 0x80
 800e324:	e012      	b.n	800e34c <USART_SetConfig+0x850>
 800e326:	2340      	movs	r3, #64	; 0x40
 800e328:	e010      	b.n	800e34c <USART_SetConfig+0x850>
 800e32a:	2320      	movs	r3, #32
 800e32c:	e00e      	b.n	800e34c <USART_SetConfig+0x850>
 800e32e:	2310      	movs	r3, #16
 800e330:	e00c      	b.n	800e34c <USART_SetConfig+0x850>
 800e332:	230c      	movs	r3, #12
 800e334:	e00a      	b.n	800e34c <USART_SetConfig+0x850>
 800e336:	230a      	movs	r3, #10
 800e338:	e008      	b.n	800e34c <USART_SetConfig+0x850>
 800e33a:	2308      	movs	r3, #8
 800e33c:	e006      	b.n	800e34c <USART_SetConfig+0x850>
 800e33e:	2306      	movs	r3, #6
 800e340:	e004      	b.n	800e34c <USART_SetConfig+0x850>
 800e342:	2304      	movs	r3, #4
 800e344:	e002      	b.n	800e34c <USART_SetConfig+0x850>
 800e346:	2302      	movs	r3, #2
 800e348:	e000      	b.n	800e34c <USART_SetConfig+0x850>
 800e34a:	2301      	movs	r3, #1
 800e34c:	4a33      	ldr	r2, [pc, #204]	; (800e41c <USART_SetConfig+0x920>)
 800e34e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e352:	005a      	lsls	r2, r3, #1
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	685b      	ldr	r3, [r3, #4]
 800e358:	085b      	lsrs	r3, r3, #1
 800e35a:	441a      	add	r2, r3
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	685b      	ldr	r3, [r3, #4]
 800e360:	fbb2 f3f3 	udiv	r3, r2, r3
 800e364:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800e366:	e0ba      	b.n	800e4de <USART_SetConfig+0x9e2>
    case USART_CLOCKSOURCE_CSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(CSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d044      	beq.n	800e3fa <USART_SetConfig+0x8fe>
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e374:	2b01      	cmp	r3, #1
 800e376:	d03e      	beq.n	800e3f6 <USART_SetConfig+0x8fa>
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e37c:	2b02      	cmp	r3, #2
 800e37e:	d038      	beq.n	800e3f2 <USART_SetConfig+0x8f6>
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e384:	2b03      	cmp	r3, #3
 800e386:	d032      	beq.n	800e3ee <USART_SetConfig+0x8f2>
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e38c:	2b04      	cmp	r3, #4
 800e38e:	d02c      	beq.n	800e3ea <USART_SetConfig+0x8ee>
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e394:	2b05      	cmp	r3, #5
 800e396:	d026      	beq.n	800e3e6 <USART_SetConfig+0x8ea>
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e39c:	2b06      	cmp	r3, #6
 800e39e:	d020      	beq.n	800e3e2 <USART_SetConfig+0x8e6>
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3a4:	2b07      	cmp	r3, #7
 800e3a6:	d01a      	beq.n	800e3de <USART_SetConfig+0x8e2>
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3ac:	2b08      	cmp	r3, #8
 800e3ae:	d014      	beq.n	800e3da <USART_SetConfig+0x8de>
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3b4:	2b09      	cmp	r3, #9
 800e3b6:	d00e      	beq.n	800e3d6 <USART_SetConfig+0x8da>
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3bc:	2b0a      	cmp	r3, #10
 800e3be:	d008      	beq.n	800e3d2 <USART_SetConfig+0x8d6>
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3c4:	2b0b      	cmp	r3, #11
 800e3c6:	d102      	bne.n	800e3ce <USART_SetConfig+0x8d2>
 800e3c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e3cc:	e016      	b.n	800e3fc <USART_SetConfig+0x900>
 800e3ce:	2301      	movs	r3, #1
 800e3d0:	e014      	b.n	800e3fc <USART_SetConfig+0x900>
 800e3d2:	2380      	movs	r3, #128	; 0x80
 800e3d4:	e012      	b.n	800e3fc <USART_SetConfig+0x900>
 800e3d6:	2340      	movs	r3, #64	; 0x40
 800e3d8:	e010      	b.n	800e3fc <USART_SetConfig+0x900>
 800e3da:	2320      	movs	r3, #32
 800e3dc:	e00e      	b.n	800e3fc <USART_SetConfig+0x900>
 800e3de:	2310      	movs	r3, #16
 800e3e0:	e00c      	b.n	800e3fc <USART_SetConfig+0x900>
 800e3e2:	230c      	movs	r3, #12
 800e3e4:	e00a      	b.n	800e3fc <USART_SetConfig+0x900>
 800e3e6:	230a      	movs	r3, #10
 800e3e8:	e008      	b.n	800e3fc <USART_SetConfig+0x900>
 800e3ea:	2308      	movs	r3, #8
 800e3ec:	e006      	b.n	800e3fc <USART_SetConfig+0x900>
 800e3ee:	2306      	movs	r3, #6
 800e3f0:	e004      	b.n	800e3fc <USART_SetConfig+0x900>
 800e3f2:	2304      	movs	r3, #4
 800e3f4:	e002      	b.n	800e3fc <USART_SetConfig+0x900>
 800e3f6:	2302      	movs	r3, #2
 800e3f8:	e000      	b.n	800e3fc <USART_SetConfig+0x900>
 800e3fa:	2301      	movs	r3, #1
 800e3fc:	4a08      	ldr	r2, [pc, #32]	; (800e420 <USART_SetConfig+0x924>)
 800e3fe:	fbb2 f3f3 	udiv	r3, r2, r3
 800e402:	005a      	lsls	r2, r3, #1
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	685b      	ldr	r3, [r3, #4]
 800e408:	085b      	lsrs	r3, r3, #1
 800e40a:	441a      	add	r2, r3
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	685b      	ldr	r3, [r3, #4]
 800e410:	fbb2 f3f3 	udiv	r3, r2, r3
 800e414:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800e416:	e062      	b.n	800e4de <USART_SetConfig+0x9e2>
 800e418:	58024400 	.word	0x58024400
 800e41c:	03d09000 	.word	0x03d09000
 800e420:	003d0900 	.word	0x003d0900
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d044      	beq.n	800e4b6 <USART_SetConfig+0x9ba>
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e430:	2b01      	cmp	r3, #1
 800e432:	d03e      	beq.n	800e4b2 <USART_SetConfig+0x9b6>
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e438:	2b02      	cmp	r3, #2
 800e43a:	d038      	beq.n	800e4ae <USART_SetConfig+0x9b2>
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e440:	2b03      	cmp	r3, #3
 800e442:	d032      	beq.n	800e4aa <USART_SetConfig+0x9ae>
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e448:	2b04      	cmp	r3, #4
 800e44a:	d02c      	beq.n	800e4a6 <USART_SetConfig+0x9aa>
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e450:	2b05      	cmp	r3, #5
 800e452:	d026      	beq.n	800e4a2 <USART_SetConfig+0x9a6>
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e458:	2b06      	cmp	r3, #6
 800e45a:	d020      	beq.n	800e49e <USART_SetConfig+0x9a2>
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e460:	2b07      	cmp	r3, #7
 800e462:	d01a      	beq.n	800e49a <USART_SetConfig+0x99e>
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e468:	2b08      	cmp	r3, #8
 800e46a:	d014      	beq.n	800e496 <USART_SetConfig+0x99a>
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e470:	2b09      	cmp	r3, #9
 800e472:	d00e      	beq.n	800e492 <USART_SetConfig+0x996>
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e478:	2b0a      	cmp	r3, #10
 800e47a:	d008      	beq.n	800e48e <USART_SetConfig+0x992>
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e480:	2b0b      	cmp	r3, #11
 800e482:	d102      	bne.n	800e48a <USART_SetConfig+0x98e>
 800e484:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e488:	e016      	b.n	800e4b8 <USART_SetConfig+0x9bc>
 800e48a:	2301      	movs	r3, #1
 800e48c:	e014      	b.n	800e4b8 <USART_SetConfig+0x9bc>
 800e48e:	2380      	movs	r3, #128	; 0x80
 800e490:	e012      	b.n	800e4b8 <USART_SetConfig+0x9bc>
 800e492:	2340      	movs	r3, #64	; 0x40
 800e494:	e010      	b.n	800e4b8 <USART_SetConfig+0x9bc>
 800e496:	2320      	movs	r3, #32
 800e498:	e00e      	b.n	800e4b8 <USART_SetConfig+0x9bc>
 800e49a:	2310      	movs	r3, #16
 800e49c:	e00c      	b.n	800e4b8 <USART_SetConfig+0x9bc>
 800e49e:	230c      	movs	r3, #12
 800e4a0:	e00a      	b.n	800e4b8 <USART_SetConfig+0x9bc>
 800e4a2:	230a      	movs	r3, #10
 800e4a4:	e008      	b.n	800e4b8 <USART_SetConfig+0x9bc>
 800e4a6:	2308      	movs	r3, #8
 800e4a8:	e006      	b.n	800e4b8 <USART_SetConfig+0x9bc>
 800e4aa:	2306      	movs	r3, #6
 800e4ac:	e004      	b.n	800e4b8 <USART_SetConfig+0x9bc>
 800e4ae:	2304      	movs	r3, #4
 800e4b0:	e002      	b.n	800e4b8 <USART_SetConfig+0x9bc>
 800e4b2:	2302      	movs	r3, #2
 800e4b4:	e000      	b.n	800e4b8 <USART_SetConfig+0x9bc>
 800e4b6:	2301      	movs	r3, #1
 800e4b8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800e4bc:	fbb2 f3f3 	udiv	r3, r2, r3
 800e4c0:	005a      	lsls	r2, r3, #1
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	685b      	ldr	r3, [r3, #4]
 800e4c6:	085b      	lsrs	r3, r3, #1
 800e4c8:	441a      	add	r2, r3
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	685b      	ldr	r3, [r3, #4]
 800e4ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800e4d2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800e4d4:	e003      	b.n	800e4de <USART_SetConfig+0x9e2>
    default:
      ret = HAL_ERROR;
 800e4d6:	2301      	movs	r3, #1
 800e4d8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
      break;
 800e4dc:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 800e4de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4e0:	2b0f      	cmp	r3, #15
 800e4e2:	d916      	bls.n	800e512 <USART_SetConfig+0xa16>
 800e4e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e4ea:	d212      	bcs.n	800e512 <USART_SetConfig+0xa16>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e4ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4ee:	b29b      	uxth	r3, r3
 800e4f0:	f023 030f 	bic.w	r3, r3, #15
 800e4f4:	84fb      	strh	r3, [r7, #38]	; 0x26
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e4f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4f8:	085b      	lsrs	r3, r3, #1
 800e4fa:	b29b      	uxth	r3, r3
 800e4fc:	f003 0307 	and.w	r3, r3, #7
 800e500:	b29a      	uxth	r2, r3
 800e502:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e504:	4313      	orrs	r3, r2
 800e506:	84fb      	strh	r3, [r7, #38]	; 0x26
    husart->Instance->BRR = brrtemp;
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e50e:	60da      	str	r2, [r3, #12]
 800e510:	e002      	b.n	800e518 <USART_SetConfig+0xa1c>
  }
  else
  {
    ret = HAL_ERROR;
 800e512:	2301      	movs	r3, #1
 800e514:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  husart->NbTxDataToProcess = 1U;
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	2201      	movs	r2, #1
 800e51c:	879a      	strh	r2, [r3, #60]	; 0x3c
  husart->NbRxDataToProcess = 1U;
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	2201      	movs	r2, #1
 800e522:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	2200      	movs	r2, #0
 800e528:	649a      	str	r2, [r3, #72]	; 0x48
  husart->TxISR   = NULL;
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	2200      	movs	r2, #0
 800e52e:	64da      	str	r2, [r3, #76]	; 0x4c

  return ret;
 800e530:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
}
 800e534:	4618      	mov	r0, r3
 800e536:	3738      	adds	r7, #56	; 0x38
 800e538:	46bd      	mov	sp, r7
 800e53a:	bd80      	pop	{r7, pc}

0800e53c <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 800e53c:	b580      	push	{r7, lr}
 800e53e:	b086      	sub	sp, #24
 800e540:	af02      	add	r7, sp, #8
 800e542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	2200      	movs	r2, #0
 800e548:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e54a:	f7f5 f8d3 	bl	80036f4 <HAL_GetTick>
 800e54e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	f003 0308 	and.w	r3, r3, #8
 800e55a:	2b08      	cmp	r3, #8
 800e55c:	d10e      	bne.n	800e57c <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800e55e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e562:	9300      	str	r3, [sp, #0]
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	2200      	movs	r2, #0
 800e568:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e56c:	6878      	ldr	r0, [r7, #4]
 800e56e:	f7ff fa8f 	bl	800da90 <USART_WaitOnFlagUntilTimeout>
 800e572:	4603      	mov	r3, r0
 800e574:	2b00      	cmp	r3, #0
 800e576:	d001      	beq.n	800e57c <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e578:	2303      	movs	r3, #3
 800e57a:	e01e      	b.n	800e5ba <USART_CheckIdleState+0x7e>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	f003 0304 	and.w	r3, r3, #4
 800e586:	2b04      	cmp	r3, #4
 800e588:	d10e      	bne.n	800e5a8 <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800e58a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e58e:	9300      	str	r3, [sp, #0]
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	2200      	movs	r2, #0
 800e594:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e598:	6878      	ldr	r0, [r7, #4]
 800e59a:	f7ff fa79 	bl	800da90 <USART_WaitOnFlagUntilTimeout>
 800e59e:	4603      	mov	r3, r0
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d001      	beq.n	800e5a8 <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e5a4:	2303      	movs	r3, #3
 800e5a6:	e008      	b.n	800e5ba <USART_CheckIdleState+0x7e>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	2201      	movs	r2, #1
 800e5ac:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	2200      	movs	r2, #0
 800e5b4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800e5b8:	2300      	movs	r3, #0
}
 800e5ba:	4618      	mov	r0, r3
 800e5bc:	3710      	adds	r7, #16
 800e5be:	46bd      	mov	sp, r7
 800e5c0:	bd80      	pop	{r7, pc}

0800e5c2 <HAL_USARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param husart      USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_DisableFifoMode(USART_HandleTypeDef *husart)
{
 800e5c2:	b480      	push	{r7}
 800e5c4:	b085      	sub	sp, #20
 800e5c6:	af00      	add	r7, sp, #0
 800e5c8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));

  /* Process Locked */
  __HAL_LOCK(husart);
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800e5d0:	2b01      	cmp	r3, #1
 800e5d2:	d101      	bne.n	800e5d8 <HAL_USARTEx_DisableFifoMode+0x16>
 800e5d4:	2302      	movs	r3, #2
 800e5d6:	e027      	b.n	800e628 <HAL_USARTEx_DisableFifoMode+0x66>
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	2201      	movs	r2, #1
 800e5dc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	2202      	movs	r2, #2
 800e5e4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	681a      	ldr	r2, [r3, #0]
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	f022 0201 	bic.w	r2, r2, #1
 800e5fe:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800e606:	60fb      	str	r3, [r7, #12]
  husart->FifoMode = USART_FIFOMODE_DISABLE;
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	2200      	movs	r2, #0
 800e60c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	68fa      	ldr	r2, [r7, #12]
 800e614:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	2201      	movs	r2, #1
 800e61a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	2200      	movs	r2, #0
 800e622:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800e626:	2300      	movs	r3, #0
}
 800e628:	4618      	mov	r0, r3
 800e62a:	3714      	adds	r7, #20
 800e62c:	46bd      	mov	sp, r7
 800e62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e632:	4770      	bx	lr

0800e634 <HAL_USARTEx_SetTxFifoThreshold>:
  *            @arg @ref USART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetTxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 800e634:	b580      	push	{r7, lr}
 800e636:	b084      	sub	sp, #16
 800e638:	af00      	add	r7, sp, #0
 800e63a:	6078      	str	r0, [r7, #4]
 800e63c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800e644:	2b01      	cmp	r3, #1
 800e646:	d101      	bne.n	800e64c <HAL_USARTEx_SetTxFifoThreshold+0x18>
 800e648:	2302      	movs	r3, #2
 800e64a:	e02d      	b.n	800e6a8 <HAL_USARTEx_SetTxFifoThreshold+0x74>
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	2201      	movs	r2, #1
 800e650:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	2202      	movs	r2, #2
 800e658:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	681a      	ldr	r2, [r3, #0]
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	f022 0201 	bic.w	r2, r2, #1
 800e672:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	689b      	ldr	r3, [r3, #8]
 800e67a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	683a      	ldr	r2, [r7, #0]
 800e684:	430a      	orrs	r2, r1
 800e686:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 800e688:	6878      	ldr	r0, [r7, #4]
 800e68a:	f000 f84f 	bl	800e72c <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	68fa      	ldr	r2, [r7, #12]
 800e694:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	2201      	movs	r2, #1
 800e69a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	2200      	movs	r2, #0
 800e6a2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800e6a6:	2300      	movs	r3, #0
}
 800e6a8:	4618      	mov	r0, r3
 800e6aa:	3710      	adds	r7, #16
 800e6ac:	46bd      	mov	sp, r7
 800e6ae:	bd80      	pop	{r7, pc}

0800e6b0 <HAL_USARTEx_SetRxFifoThreshold>:
  *            @arg @ref USART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetRxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 800e6b0:	b580      	push	{r7, lr}
 800e6b2:	b084      	sub	sp, #16
 800e6b4:	af00      	add	r7, sp, #0
 800e6b6:	6078      	str	r0, [r7, #4]
 800e6b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800e6c0:	2b01      	cmp	r3, #1
 800e6c2:	d101      	bne.n	800e6c8 <HAL_USARTEx_SetRxFifoThreshold+0x18>
 800e6c4:	2302      	movs	r3, #2
 800e6c6:	e02d      	b.n	800e724 <HAL_USARTEx_SetRxFifoThreshold+0x74>
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	2201      	movs	r2, #1
 800e6cc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	2202      	movs	r2, #2
 800e6d4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	681a      	ldr	r2, [r3, #0]
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	f022 0201 	bic.w	r2, r2, #1
 800e6ee:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	689b      	ldr	r3, [r3, #8]
 800e6f6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	683a      	ldr	r2, [r7, #0]
 800e700:	430a      	orrs	r2, r1
 800e702:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 800e704:	6878      	ldr	r0, [r7, #4]
 800e706:	f000 f811 	bl	800e72c <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	68fa      	ldr	r2, [r7, #12]
 800e710:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	2201      	movs	r2, #1
 800e716:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	2200      	movs	r2, #0
 800e71e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800e722:	2300      	movs	r3, #0
}
 800e724:	4618      	mov	r0, r3
 800e726:	3710      	adds	r7, #16
 800e728:	46bd      	mov	sp, r7
 800e72a:	bd80      	pop	{r7, pc}

0800e72c <USARTEx_SetNbDataToProcess>:
  *       the USART configuration registers.
  * @param husart USART handle.
  * @retval None
  */
static void USARTEx_SetNbDataToProcess(USART_HandleTypeDef *husart)
{
 800e72c:	b480      	push	{r7}
 800e72e:	b085      	sub	sp, #20
 800e730:	af00      	add	r7, sp, #0
 800e732:	6078      	str	r0, [r7, #4]
  uint8_t tx_fifo_threshold;
  /* 2 0U/1U added for MISRAC2012-Rule-18.1_b and MISRAC2012-Rule-18.1_d */
  static const uint8_t numerator[]   = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (husart->FifoMode == USART_FIFOMODE_DISABLE)
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d106      	bne.n	800e74a <USARTEx_SetNbDataToProcess+0x1e>
  {
    husart->NbTxDataToProcess = 1U;
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	2201      	movs	r2, #1
 800e740:	879a      	strh	r2, [r3, #60]	; 0x3c
    husart->NbRxDataToProcess = 1U;
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	2201      	movs	r2, #1
 800e746:	875a      	strh	r2, [r3, #58]	; 0x3a
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                                (uint16_t)denominator[tx_fifo_threshold];
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                                (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e748:	e02f      	b.n	800e7aa <USARTEx_SetNbDataToProcess+0x7e>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e74a:	2310      	movs	r3, #16
 800e74c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e74e:	2310      	movs	r3, #16
 800e750:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos) & 0xFFU);
 800e758:	0e5b      	lsrs	r3, r3, #25
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800e75a:	b2db      	uxtb	r3, r3
 800e75c:	f003 0307 	and.w	r3, r3, #7
 800e760:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos) & 0xFFU);
 800e768:	0f5b      	lsrs	r3, r3, #29
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800e76a:	b2db      	uxtb	r3, r3
 800e76c:	f003 0307 	and.w	r3, r3, #7
 800e770:	733b      	strb	r3, [r7, #12]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e772:	7bbb      	ldrb	r3, [r7, #14]
 800e774:	7b3a      	ldrb	r2, [r7, #12]
 800e776:	4910      	ldr	r1, [pc, #64]	; (800e7b8 <USARTEx_SetNbDataToProcess+0x8c>)
 800e778:	5c8a      	ldrb	r2, [r1, r2]
 800e77a:	fb02 f303 	mul.w	r3, r2, r3
                                (uint16_t)denominator[tx_fifo_threshold];
 800e77e:	7b3a      	ldrb	r2, [r7, #12]
 800e780:	490e      	ldr	r1, [pc, #56]	; (800e7bc <USARTEx_SetNbDataToProcess+0x90>)
 800e782:	5c8a      	ldrb	r2, [r1, r2]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e784:	fb93 f3f2 	sdiv	r3, r3, r2
 800e788:	b29a      	uxth	r2, r3
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	879a      	strh	r2, [r3, #60]	; 0x3c
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e78e:	7bfb      	ldrb	r3, [r7, #15]
 800e790:	7b7a      	ldrb	r2, [r7, #13]
 800e792:	4909      	ldr	r1, [pc, #36]	; (800e7b8 <USARTEx_SetNbDataToProcess+0x8c>)
 800e794:	5c8a      	ldrb	r2, [r1, r2]
 800e796:	fb02 f303 	mul.w	r3, r2, r3
                                (uint16_t)denominator[rx_fifo_threshold];
 800e79a:	7b7a      	ldrb	r2, [r7, #13]
 800e79c:	4907      	ldr	r1, [pc, #28]	; (800e7bc <USARTEx_SetNbDataToProcess+0x90>)
 800e79e:	5c8a      	ldrb	r2, [r1, r2]
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e7a0:	fb93 f3f2 	sdiv	r3, r3, r2
 800e7a4:	b29a      	uxth	r2, r3
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	875a      	strh	r2, [r3, #58]	; 0x3a
}
 800e7aa:	bf00      	nop
 800e7ac:	3714      	adds	r7, #20
 800e7ae:	46bd      	mov	sp, r7
 800e7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b4:	4770      	bx	lr
 800e7b6:	bf00      	nop
 800e7b8:	08011650 	.word	0x08011650
 800e7bc:	08011658 	.word	0x08011658

0800e7c0 <__errno>:
 800e7c0:	4b01      	ldr	r3, [pc, #4]	; (800e7c8 <__errno+0x8>)
 800e7c2:	6818      	ldr	r0, [r3, #0]
 800e7c4:	4770      	bx	lr
 800e7c6:	bf00      	nop
 800e7c8:	24000010 	.word	0x24000010

0800e7cc <__libc_init_array>:
 800e7cc:	b570      	push	{r4, r5, r6, lr}
 800e7ce:	4d0d      	ldr	r5, [pc, #52]	; (800e804 <__libc_init_array+0x38>)
 800e7d0:	4c0d      	ldr	r4, [pc, #52]	; (800e808 <__libc_init_array+0x3c>)
 800e7d2:	1b64      	subs	r4, r4, r5
 800e7d4:	10a4      	asrs	r4, r4, #2
 800e7d6:	2600      	movs	r6, #0
 800e7d8:	42a6      	cmp	r6, r4
 800e7da:	d109      	bne.n	800e7f0 <__libc_init_array+0x24>
 800e7dc:	4d0b      	ldr	r5, [pc, #44]	; (800e80c <__libc_init_array+0x40>)
 800e7de:	4c0c      	ldr	r4, [pc, #48]	; (800e810 <__libc_init_array+0x44>)
 800e7e0:	f002 fe24 	bl	801142c <_init>
 800e7e4:	1b64      	subs	r4, r4, r5
 800e7e6:	10a4      	asrs	r4, r4, #2
 800e7e8:	2600      	movs	r6, #0
 800e7ea:	42a6      	cmp	r6, r4
 800e7ec:	d105      	bne.n	800e7fa <__libc_init_array+0x2e>
 800e7ee:	bd70      	pop	{r4, r5, r6, pc}
 800e7f0:	f855 3b04 	ldr.w	r3, [r5], #4
 800e7f4:	4798      	blx	r3
 800e7f6:	3601      	adds	r6, #1
 800e7f8:	e7ee      	b.n	800e7d8 <__libc_init_array+0xc>
 800e7fa:	f855 3b04 	ldr.w	r3, [r5], #4
 800e7fe:	4798      	blx	r3
 800e800:	3601      	adds	r6, #1
 800e802:	e7f2      	b.n	800e7ea <__libc_init_array+0x1e>
 800e804:	08011a4c 	.word	0x08011a4c
 800e808:	08011a4c 	.word	0x08011a4c
 800e80c:	08011a4c 	.word	0x08011a4c
 800e810:	08011a50 	.word	0x08011a50

0800e814 <memcpy>:
 800e814:	440a      	add	r2, r1
 800e816:	4291      	cmp	r1, r2
 800e818:	f100 33ff 	add.w	r3, r0, #4294967295
 800e81c:	d100      	bne.n	800e820 <memcpy+0xc>
 800e81e:	4770      	bx	lr
 800e820:	b510      	push	{r4, lr}
 800e822:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e826:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e82a:	4291      	cmp	r1, r2
 800e82c:	d1f9      	bne.n	800e822 <memcpy+0xe>
 800e82e:	bd10      	pop	{r4, pc}

0800e830 <memset>:
 800e830:	4402      	add	r2, r0
 800e832:	4603      	mov	r3, r0
 800e834:	4293      	cmp	r3, r2
 800e836:	d100      	bne.n	800e83a <memset+0xa>
 800e838:	4770      	bx	lr
 800e83a:	f803 1b01 	strb.w	r1, [r3], #1
 800e83e:	e7f9      	b.n	800e834 <memset+0x4>

0800e840 <__cvt>:
 800e840:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e842:	ed2d 8b02 	vpush	{d8}
 800e846:	eeb0 8b40 	vmov.f64	d8, d0
 800e84a:	b085      	sub	sp, #20
 800e84c:	4617      	mov	r7, r2
 800e84e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800e850:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800e852:	ee18 2a90 	vmov	r2, s17
 800e856:	f025 0520 	bic.w	r5, r5, #32
 800e85a:	2a00      	cmp	r2, #0
 800e85c:	bfb6      	itet	lt
 800e85e:	222d      	movlt	r2, #45	; 0x2d
 800e860:	2200      	movge	r2, #0
 800e862:	eeb1 8b40 	vneglt.f64	d8, d0
 800e866:	2d46      	cmp	r5, #70	; 0x46
 800e868:	460c      	mov	r4, r1
 800e86a:	701a      	strb	r2, [r3, #0]
 800e86c:	d004      	beq.n	800e878 <__cvt+0x38>
 800e86e:	2d45      	cmp	r5, #69	; 0x45
 800e870:	d100      	bne.n	800e874 <__cvt+0x34>
 800e872:	3401      	adds	r4, #1
 800e874:	2102      	movs	r1, #2
 800e876:	e000      	b.n	800e87a <__cvt+0x3a>
 800e878:	2103      	movs	r1, #3
 800e87a:	ab03      	add	r3, sp, #12
 800e87c:	9301      	str	r3, [sp, #4]
 800e87e:	ab02      	add	r3, sp, #8
 800e880:	9300      	str	r3, [sp, #0]
 800e882:	4622      	mov	r2, r4
 800e884:	4633      	mov	r3, r6
 800e886:	eeb0 0b48 	vmov.f64	d0, d8
 800e88a:	f000 fd89 	bl	800f3a0 <_dtoa_r>
 800e88e:	2d47      	cmp	r5, #71	; 0x47
 800e890:	d109      	bne.n	800e8a6 <__cvt+0x66>
 800e892:	07fb      	lsls	r3, r7, #31
 800e894:	d407      	bmi.n	800e8a6 <__cvt+0x66>
 800e896:	9b03      	ldr	r3, [sp, #12]
 800e898:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e89a:	1a1b      	subs	r3, r3, r0
 800e89c:	6013      	str	r3, [r2, #0]
 800e89e:	b005      	add	sp, #20
 800e8a0:	ecbd 8b02 	vpop	{d8}
 800e8a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e8a6:	2d46      	cmp	r5, #70	; 0x46
 800e8a8:	eb00 0204 	add.w	r2, r0, r4
 800e8ac:	d10c      	bne.n	800e8c8 <__cvt+0x88>
 800e8ae:	7803      	ldrb	r3, [r0, #0]
 800e8b0:	2b30      	cmp	r3, #48	; 0x30
 800e8b2:	d107      	bne.n	800e8c4 <__cvt+0x84>
 800e8b4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800e8b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8bc:	bf1c      	itt	ne
 800e8be:	f1c4 0401 	rsbne	r4, r4, #1
 800e8c2:	6034      	strne	r4, [r6, #0]
 800e8c4:	6833      	ldr	r3, [r6, #0]
 800e8c6:	441a      	add	r2, r3
 800e8c8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800e8cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8d0:	bf08      	it	eq
 800e8d2:	9203      	streq	r2, [sp, #12]
 800e8d4:	2130      	movs	r1, #48	; 0x30
 800e8d6:	9b03      	ldr	r3, [sp, #12]
 800e8d8:	4293      	cmp	r3, r2
 800e8da:	d2dc      	bcs.n	800e896 <__cvt+0x56>
 800e8dc:	1c5c      	adds	r4, r3, #1
 800e8de:	9403      	str	r4, [sp, #12]
 800e8e0:	7019      	strb	r1, [r3, #0]
 800e8e2:	e7f8      	b.n	800e8d6 <__cvt+0x96>

0800e8e4 <__exponent>:
 800e8e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e8e6:	4603      	mov	r3, r0
 800e8e8:	2900      	cmp	r1, #0
 800e8ea:	bfb8      	it	lt
 800e8ec:	4249      	neglt	r1, r1
 800e8ee:	f803 2b02 	strb.w	r2, [r3], #2
 800e8f2:	bfb4      	ite	lt
 800e8f4:	222d      	movlt	r2, #45	; 0x2d
 800e8f6:	222b      	movge	r2, #43	; 0x2b
 800e8f8:	2909      	cmp	r1, #9
 800e8fa:	7042      	strb	r2, [r0, #1]
 800e8fc:	dd2a      	ble.n	800e954 <__exponent+0x70>
 800e8fe:	f10d 0407 	add.w	r4, sp, #7
 800e902:	46a4      	mov	ip, r4
 800e904:	270a      	movs	r7, #10
 800e906:	46a6      	mov	lr, r4
 800e908:	460a      	mov	r2, r1
 800e90a:	fb91 f6f7 	sdiv	r6, r1, r7
 800e90e:	fb07 1516 	mls	r5, r7, r6, r1
 800e912:	3530      	adds	r5, #48	; 0x30
 800e914:	2a63      	cmp	r2, #99	; 0x63
 800e916:	f104 34ff 	add.w	r4, r4, #4294967295
 800e91a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800e91e:	4631      	mov	r1, r6
 800e920:	dcf1      	bgt.n	800e906 <__exponent+0x22>
 800e922:	3130      	adds	r1, #48	; 0x30
 800e924:	f1ae 0502 	sub.w	r5, lr, #2
 800e928:	f804 1c01 	strb.w	r1, [r4, #-1]
 800e92c:	1c44      	adds	r4, r0, #1
 800e92e:	4629      	mov	r1, r5
 800e930:	4561      	cmp	r1, ip
 800e932:	d30a      	bcc.n	800e94a <__exponent+0x66>
 800e934:	f10d 0209 	add.w	r2, sp, #9
 800e938:	eba2 020e 	sub.w	r2, r2, lr
 800e93c:	4565      	cmp	r5, ip
 800e93e:	bf88      	it	hi
 800e940:	2200      	movhi	r2, #0
 800e942:	4413      	add	r3, r2
 800e944:	1a18      	subs	r0, r3, r0
 800e946:	b003      	add	sp, #12
 800e948:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e94a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e94e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800e952:	e7ed      	b.n	800e930 <__exponent+0x4c>
 800e954:	2330      	movs	r3, #48	; 0x30
 800e956:	3130      	adds	r1, #48	; 0x30
 800e958:	7083      	strb	r3, [r0, #2]
 800e95a:	70c1      	strb	r1, [r0, #3]
 800e95c:	1d03      	adds	r3, r0, #4
 800e95e:	e7f1      	b.n	800e944 <__exponent+0x60>

0800e960 <_printf_float>:
 800e960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e964:	b08b      	sub	sp, #44	; 0x2c
 800e966:	460c      	mov	r4, r1
 800e968:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800e96c:	4616      	mov	r6, r2
 800e96e:	461f      	mov	r7, r3
 800e970:	4605      	mov	r5, r0
 800e972:	f001 fc4f 	bl	8010214 <_localeconv_r>
 800e976:	f8d0 b000 	ldr.w	fp, [r0]
 800e97a:	4658      	mov	r0, fp
 800e97c:	f7f1 fcb0 	bl	80002e0 <strlen>
 800e980:	2300      	movs	r3, #0
 800e982:	9308      	str	r3, [sp, #32]
 800e984:	f8d8 3000 	ldr.w	r3, [r8]
 800e988:	f894 9018 	ldrb.w	r9, [r4, #24]
 800e98c:	6822      	ldr	r2, [r4, #0]
 800e98e:	3307      	adds	r3, #7
 800e990:	f023 0307 	bic.w	r3, r3, #7
 800e994:	f103 0108 	add.w	r1, r3, #8
 800e998:	f8c8 1000 	str.w	r1, [r8]
 800e99c:	4682      	mov	sl, r0
 800e99e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e9a2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800e9a6:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800ec08 <_printf_float+0x2a8>
 800e9aa:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800e9ae:	eeb0 6bc0 	vabs.f64	d6, d0
 800e9b2:	eeb4 6b47 	vcmp.f64	d6, d7
 800e9b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9ba:	dd24      	ble.n	800ea06 <_printf_float+0xa6>
 800e9bc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800e9c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9c4:	d502      	bpl.n	800e9cc <_printf_float+0x6c>
 800e9c6:	232d      	movs	r3, #45	; 0x2d
 800e9c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e9cc:	4b90      	ldr	r3, [pc, #576]	; (800ec10 <_printf_float+0x2b0>)
 800e9ce:	4891      	ldr	r0, [pc, #580]	; (800ec14 <_printf_float+0x2b4>)
 800e9d0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800e9d4:	bf94      	ite	ls
 800e9d6:	4698      	movls	r8, r3
 800e9d8:	4680      	movhi	r8, r0
 800e9da:	2303      	movs	r3, #3
 800e9dc:	6123      	str	r3, [r4, #16]
 800e9de:	f022 0204 	bic.w	r2, r2, #4
 800e9e2:	2300      	movs	r3, #0
 800e9e4:	6022      	str	r2, [r4, #0]
 800e9e6:	9304      	str	r3, [sp, #16]
 800e9e8:	9700      	str	r7, [sp, #0]
 800e9ea:	4633      	mov	r3, r6
 800e9ec:	aa09      	add	r2, sp, #36	; 0x24
 800e9ee:	4621      	mov	r1, r4
 800e9f0:	4628      	mov	r0, r5
 800e9f2:	f000 f9d3 	bl	800ed9c <_printf_common>
 800e9f6:	3001      	adds	r0, #1
 800e9f8:	f040 808a 	bne.w	800eb10 <_printf_float+0x1b0>
 800e9fc:	f04f 30ff 	mov.w	r0, #4294967295
 800ea00:	b00b      	add	sp, #44	; 0x2c
 800ea02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea06:	eeb4 0b40 	vcmp.f64	d0, d0
 800ea0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea0e:	d709      	bvc.n	800ea24 <_printf_float+0xc4>
 800ea10:	ee10 3a90 	vmov	r3, s1
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	bfbc      	itt	lt
 800ea18:	232d      	movlt	r3, #45	; 0x2d
 800ea1a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ea1e:	487e      	ldr	r0, [pc, #504]	; (800ec18 <_printf_float+0x2b8>)
 800ea20:	4b7e      	ldr	r3, [pc, #504]	; (800ec1c <_printf_float+0x2bc>)
 800ea22:	e7d5      	b.n	800e9d0 <_printf_float+0x70>
 800ea24:	6863      	ldr	r3, [r4, #4]
 800ea26:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800ea2a:	9104      	str	r1, [sp, #16]
 800ea2c:	1c59      	adds	r1, r3, #1
 800ea2e:	d13c      	bne.n	800eaaa <_printf_float+0x14a>
 800ea30:	2306      	movs	r3, #6
 800ea32:	6063      	str	r3, [r4, #4]
 800ea34:	2300      	movs	r3, #0
 800ea36:	9303      	str	r3, [sp, #12]
 800ea38:	ab08      	add	r3, sp, #32
 800ea3a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800ea3e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ea42:	ab07      	add	r3, sp, #28
 800ea44:	6861      	ldr	r1, [r4, #4]
 800ea46:	9300      	str	r3, [sp, #0]
 800ea48:	6022      	str	r2, [r4, #0]
 800ea4a:	f10d 031b 	add.w	r3, sp, #27
 800ea4e:	4628      	mov	r0, r5
 800ea50:	f7ff fef6 	bl	800e840 <__cvt>
 800ea54:	9b04      	ldr	r3, [sp, #16]
 800ea56:	9907      	ldr	r1, [sp, #28]
 800ea58:	2b47      	cmp	r3, #71	; 0x47
 800ea5a:	4680      	mov	r8, r0
 800ea5c:	d108      	bne.n	800ea70 <_printf_float+0x110>
 800ea5e:	1cc8      	adds	r0, r1, #3
 800ea60:	db02      	blt.n	800ea68 <_printf_float+0x108>
 800ea62:	6863      	ldr	r3, [r4, #4]
 800ea64:	4299      	cmp	r1, r3
 800ea66:	dd41      	ble.n	800eaec <_printf_float+0x18c>
 800ea68:	f1a9 0902 	sub.w	r9, r9, #2
 800ea6c:	fa5f f989 	uxtb.w	r9, r9
 800ea70:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800ea74:	d820      	bhi.n	800eab8 <_printf_float+0x158>
 800ea76:	3901      	subs	r1, #1
 800ea78:	464a      	mov	r2, r9
 800ea7a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ea7e:	9107      	str	r1, [sp, #28]
 800ea80:	f7ff ff30 	bl	800e8e4 <__exponent>
 800ea84:	9a08      	ldr	r2, [sp, #32]
 800ea86:	9004      	str	r0, [sp, #16]
 800ea88:	1813      	adds	r3, r2, r0
 800ea8a:	2a01      	cmp	r2, #1
 800ea8c:	6123      	str	r3, [r4, #16]
 800ea8e:	dc02      	bgt.n	800ea96 <_printf_float+0x136>
 800ea90:	6822      	ldr	r2, [r4, #0]
 800ea92:	07d2      	lsls	r2, r2, #31
 800ea94:	d501      	bpl.n	800ea9a <_printf_float+0x13a>
 800ea96:	3301      	adds	r3, #1
 800ea98:	6123      	str	r3, [r4, #16]
 800ea9a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d0a2      	beq.n	800e9e8 <_printf_float+0x88>
 800eaa2:	232d      	movs	r3, #45	; 0x2d
 800eaa4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eaa8:	e79e      	b.n	800e9e8 <_printf_float+0x88>
 800eaaa:	9904      	ldr	r1, [sp, #16]
 800eaac:	2947      	cmp	r1, #71	; 0x47
 800eaae:	d1c1      	bne.n	800ea34 <_printf_float+0xd4>
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d1bf      	bne.n	800ea34 <_printf_float+0xd4>
 800eab4:	2301      	movs	r3, #1
 800eab6:	e7bc      	b.n	800ea32 <_printf_float+0xd2>
 800eab8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800eabc:	d118      	bne.n	800eaf0 <_printf_float+0x190>
 800eabe:	2900      	cmp	r1, #0
 800eac0:	6863      	ldr	r3, [r4, #4]
 800eac2:	dd0b      	ble.n	800eadc <_printf_float+0x17c>
 800eac4:	6121      	str	r1, [r4, #16]
 800eac6:	b913      	cbnz	r3, 800eace <_printf_float+0x16e>
 800eac8:	6822      	ldr	r2, [r4, #0]
 800eaca:	07d0      	lsls	r0, r2, #31
 800eacc:	d502      	bpl.n	800ead4 <_printf_float+0x174>
 800eace:	3301      	adds	r3, #1
 800ead0:	440b      	add	r3, r1
 800ead2:	6123      	str	r3, [r4, #16]
 800ead4:	2300      	movs	r3, #0
 800ead6:	65a1      	str	r1, [r4, #88]	; 0x58
 800ead8:	9304      	str	r3, [sp, #16]
 800eada:	e7de      	b.n	800ea9a <_printf_float+0x13a>
 800eadc:	b913      	cbnz	r3, 800eae4 <_printf_float+0x184>
 800eade:	6822      	ldr	r2, [r4, #0]
 800eae0:	07d2      	lsls	r2, r2, #31
 800eae2:	d501      	bpl.n	800eae8 <_printf_float+0x188>
 800eae4:	3302      	adds	r3, #2
 800eae6:	e7f4      	b.n	800ead2 <_printf_float+0x172>
 800eae8:	2301      	movs	r3, #1
 800eaea:	e7f2      	b.n	800ead2 <_printf_float+0x172>
 800eaec:	f04f 0967 	mov.w	r9, #103	; 0x67
 800eaf0:	9b08      	ldr	r3, [sp, #32]
 800eaf2:	4299      	cmp	r1, r3
 800eaf4:	db05      	blt.n	800eb02 <_printf_float+0x1a2>
 800eaf6:	6823      	ldr	r3, [r4, #0]
 800eaf8:	6121      	str	r1, [r4, #16]
 800eafa:	07d8      	lsls	r0, r3, #31
 800eafc:	d5ea      	bpl.n	800ead4 <_printf_float+0x174>
 800eafe:	1c4b      	adds	r3, r1, #1
 800eb00:	e7e7      	b.n	800ead2 <_printf_float+0x172>
 800eb02:	2900      	cmp	r1, #0
 800eb04:	bfd4      	ite	le
 800eb06:	f1c1 0202 	rsble	r2, r1, #2
 800eb0a:	2201      	movgt	r2, #1
 800eb0c:	4413      	add	r3, r2
 800eb0e:	e7e0      	b.n	800ead2 <_printf_float+0x172>
 800eb10:	6823      	ldr	r3, [r4, #0]
 800eb12:	055a      	lsls	r2, r3, #21
 800eb14:	d407      	bmi.n	800eb26 <_printf_float+0x1c6>
 800eb16:	6923      	ldr	r3, [r4, #16]
 800eb18:	4642      	mov	r2, r8
 800eb1a:	4631      	mov	r1, r6
 800eb1c:	4628      	mov	r0, r5
 800eb1e:	47b8      	blx	r7
 800eb20:	3001      	adds	r0, #1
 800eb22:	d12a      	bne.n	800eb7a <_printf_float+0x21a>
 800eb24:	e76a      	b.n	800e9fc <_printf_float+0x9c>
 800eb26:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800eb2a:	f240 80e2 	bls.w	800ecf2 <_printf_float+0x392>
 800eb2e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800eb32:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800eb36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb3a:	d133      	bne.n	800eba4 <_printf_float+0x244>
 800eb3c:	4a38      	ldr	r2, [pc, #224]	; (800ec20 <_printf_float+0x2c0>)
 800eb3e:	2301      	movs	r3, #1
 800eb40:	4631      	mov	r1, r6
 800eb42:	4628      	mov	r0, r5
 800eb44:	47b8      	blx	r7
 800eb46:	3001      	adds	r0, #1
 800eb48:	f43f af58 	beq.w	800e9fc <_printf_float+0x9c>
 800eb4c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800eb50:	429a      	cmp	r2, r3
 800eb52:	db02      	blt.n	800eb5a <_printf_float+0x1fa>
 800eb54:	6823      	ldr	r3, [r4, #0]
 800eb56:	07d8      	lsls	r0, r3, #31
 800eb58:	d50f      	bpl.n	800eb7a <_printf_float+0x21a>
 800eb5a:	4653      	mov	r3, sl
 800eb5c:	465a      	mov	r2, fp
 800eb5e:	4631      	mov	r1, r6
 800eb60:	4628      	mov	r0, r5
 800eb62:	47b8      	blx	r7
 800eb64:	3001      	adds	r0, #1
 800eb66:	f43f af49 	beq.w	800e9fc <_printf_float+0x9c>
 800eb6a:	f04f 0800 	mov.w	r8, #0
 800eb6e:	f104 091a 	add.w	r9, r4, #26
 800eb72:	9b08      	ldr	r3, [sp, #32]
 800eb74:	3b01      	subs	r3, #1
 800eb76:	4543      	cmp	r3, r8
 800eb78:	dc09      	bgt.n	800eb8e <_printf_float+0x22e>
 800eb7a:	6823      	ldr	r3, [r4, #0]
 800eb7c:	079b      	lsls	r3, r3, #30
 800eb7e:	f100 8108 	bmi.w	800ed92 <_printf_float+0x432>
 800eb82:	68e0      	ldr	r0, [r4, #12]
 800eb84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb86:	4298      	cmp	r0, r3
 800eb88:	bfb8      	it	lt
 800eb8a:	4618      	movlt	r0, r3
 800eb8c:	e738      	b.n	800ea00 <_printf_float+0xa0>
 800eb8e:	2301      	movs	r3, #1
 800eb90:	464a      	mov	r2, r9
 800eb92:	4631      	mov	r1, r6
 800eb94:	4628      	mov	r0, r5
 800eb96:	47b8      	blx	r7
 800eb98:	3001      	adds	r0, #1
 800eb9a:	f43f af2f 	beq.w	800e9fc <_printf_float+0x9c>
 800eb9e:	f108 0801 	add.w	r8, r8, #1
 800eba2:	e7e6      	b.n	800eb72 <_printf_float+0x212>
 800eba4:	9b07      	ldr	r3, [sp, #28]
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	dc3c      	bgt.n	800ec24 <_printf_float+0x2c4>
 800ebaa:	4a1d      	ldr	r2, [pc, #116]	; (800ec20 <_printf_float+0x2c0>)
 800ebac:	2301      	movs	r3, #1
 800ebae:	4631      	mov	r1, r6
 800ebb0:	4628      	mov	r0, r5
 800ebb2:	47b8      	blx	r7
 800ebb4:	3001      	adds	r0, #1
 800ebb6:	f43f af21 	beq.w	800e9fc <_printf_float+0x9c>
 800ebba:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800ebbe:	4313      	orrs	r3, r2
 800ebc0:	d102      	bne.n	800ebc8 <_printf_float+0x268>
 800ebc2:	6823      	ldr	r3, [r4, #0]
 800ebc4:	07d9      	lsls	r1, r3, #31
 800ebc6:	d5d8      	bpl.n	800eb7a <_printf_float+0x21a>
 800ebc8:	4653      	mov	r3, sl
 800ebca:	465a      	mov	r2, fp
 800ebcc:	4631      	mov	r1, r6
 800ebce:	4628      	mov	r0, r5
 800ebd0:	47b8      	blx	r7
 800ebd2:	3001      	adds	r0, #1
 800ebd4:	f43f af12 	beq.w	800e9fc <_printf_float+0x9c>
 800ebd8:	f04f 0900 	mov.w	r9, #0
 800ebdc:	f104 0a1a 	add.w	sl, r4, #26
 800ebe0:	9b07      	ldr	r3, [sp, #28]
 800ebe2:	425b      	negs	r3, r3
 800ebe4:	454b      	cmp	r3, r9
 800ebe6:	dc01      	bgt.n	800ebec <_printf_float+0x28c>
 800ebe8:	9b08      	ldr	r3, [sp, #32]
 800ebea:	e795      	b.n	800eb18 <_printf_float+0x1b8>
 800ebec:	2301      	movs	r3, #1
 800ebee:	4652      	mov	r2, sl
 800ebf0:	4631      	mov	r1, r6
 800ebf2:	4628      	mov	r0, r5
 800ebf4:	47b8      	blx	r7
 800ebf6:	3001      	adds	r0, #1
 800ebf8:	f43f af00 	beq.w	800e9fc <_printf_float+0x9c>
 800ebfc:	f109 0901 	add.w	r9, r9, #1
 800ec00:	e7ee      	b.n	800ebe0 <_printf_float+0x280>
 800ec02:	bf00      	nop
 800ec04:	f3af 8000 	nop.w
 800ec08:	ffffffff 	.word	0xffffffff
 800ec0c:	7fefffff 	.word	0x7fefffff
 800ec10:	08011664 	.word	0x08011664
 800ec14:	08011668 	.word	0x08011668
 800ec18:	08011670 	.word	0x08011670
 800ec1c:	0801166c 	.word	0x0801166c
 800ec20:	08011674 	.word	0x08011674
 800ec24:	9a08      	ldr	r2, [sp, #32]
 800ec26:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ec28:	429a      	cmp	r2, r3
 800ec2a:	bfa8      	it	ge
 800ec2c:	461a      	movge	r2, r3
 800ec2e:	2a00      	cmp	r2, #0
 800ec30:	4691      	mov	r9, r2
 800ec32:	dc38      	bgt.n	800eca6 <_printf_float+0x346>
 800ec34:	2300      	movs	r3, #0
 800ec36:	9305      	str	r3, [sp, #20]
 800ec38:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ec3c:	f104 021a 	add.w	r2, r4, #26
 800ec40:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ec42:	9905      	ldr	r1, [sp, #20]
 800ec44:	9304      	str	r3, [sp, #16]
 800ec46:	eba3 0309 	sub.w	r3, r3, r9
 800ec4a:	428b      	cmp	r3, r1
 800ec4c:	dc33      	bgt.n	800ecb6 <_printf_float+0x356>
 800ec4e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800ec52:	429a      	cmp	r2, r3
 800ec54:	db3c      	blt.n	800ecd0 <_printf_float+0x370>
 800ec56:	6823      	ldr	r3, [r4, #0]
 800ec58:	07da      	lsls	r2, r3, #31
 800ec5a:	d439      	bmi.n	800ecd0 <_printf_float+0x370>
 800ec5c:	9a08      	ldr	r2, [sp, #32]
 800ec5e:	9b04      	ldr	r3, [sp, #16]
 800ec60:	9907      	ldr	r1, [sp, #28]
 800ec62:	1ad3      	subs	r3, r2, r3
 800ec64:	eba2 0901 	sub.w	r9, r2, r1
 800ec68:	4599      	cmp	r9, r3
 800ec6a:	bfa8      	it	ge
 800ec6c:	4699      	movge	r9, r3
 800ec6e:	f1b9 0f00 	cmp.w	r9, #0
 800ec72:	dc35      	bgt.n	800ece0 <_printf_float+0x380>
 800ec74:	f04f 0800 	mov.w	r8, #0
 800ec78:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ec7c:	f104 0a1a 	add.w	sl, r4, #26
 800ec80:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800ec84:	1a9b      	subs	r3, r3, r2
 800ec86:	eba3 0309 	sub.w	r3, r3, r9
 800ec8a:	4543      	cmp	r3, r8
 800ec8c:	f77f af75 	ble.w	800eb7a <_printf_float+0x21a>
 800ec90:	2301      	movs	r3, #1
 800ec92:	4652      	mov	r2, sl
 800ec94:	4631      	mov	r1, r6
 800ec96:	4628      	mov	r0, r5
 800ec98:	47b8      	blx	r7
 800ec9a:	3001      	adds	r0, #1
 800ec9c:	f43f aeae 	beq.w	800e9fc <_printf_float+0x9c>
 800eca0:	f108 0801 	add.w	r8, r8, #1
 800eca4:	e7ec      	b.n	800ec80 <_printf_float+0x320>
 800eca6:	4613      	mov	r3, r2
 800eca8:	4631      	mov	r1, r6
 800ecaa:	4642      	mov	r2, r8
 800ecac:	4628      	mov	r0, r5
 800ecae:	47b8      	blx	r7
 800ecb0:	3001      	adds	r0, #1
 800ecb2:	d1bf      	bne.n	800ec34 <_printf_float+0x2d4>
 800ecb4:	e6a2      	b.n	800e9fc <_printf_float+0x9c>
 800ecb6:	2301      	movs	r3, #1
 800ecb8:	4631      	mov	r1, r6
 800ecba:	4628      	mov	r0, r5
 800ecbc:	9204      	str	r2, [sp, #16]
 800ecbe:	47b8      	blx	r7
 800ecc0:	3001      	adds	r0, #1
 800ecc2:	f43f ae9b 	beq.w	800e9fc <_printf_float+0x9c>
 800ecc6:	9b05      	ldr	r3, [sp, #20]
 800ecc8:	9a04      	ldr	r2, [sp, #16]
 800ecca:	3301      	adds	r3, #1
 800eccc:	9305      	str	r3, [sp, #20]
 800ecce:	e7b7      	b.n	800ec40 <_printf_float+0x2e0>
 800ecd0:	4653      	mov	r3, sl
 800ecd2:	465a      	mov	r2, fp
 800ecd4:	4631      	mov	r1, r6
 800ecd6:	4628      	mov	r0, r5
 800ecd8:	47b8      	blx	r7
 800ecda:	3001      	adds	r0, #1
 800ecdc:	d1be      	bne.n	800ec5c <_printf_float+0x2fc>
 800ecde:	e68d      	b.n	800e9fc <_printf_float+0x9c>
 800ece0:	9a04      	ldr	r2, [sp, #16]
 800ece2:	464b      	mov	r3, r9
 800ece4:	4442      	add	r2, r8
 800ece6:	4631      	mov	r1, r6
 800ece8:	4628      	mov	r0, r5
 800ecea:	47b8      	blx	r7
 800ecec:	3001      	adds	r0, #1
 800ecee:	d1c1      	bne.n	800ec74 <_printf_float+0x314>
 800ecf0:	e684      	b.n	800e9fc <_printf_float+0x9c>
 800ecf2:	9a08      	ldr	r2, [sp, #32]
 800ecf4:	2a01      	cmp	r2, #1
 800ecf6:	dc01      	bgt.n	800ecfc <_printf_float+0x39c>
 800ecf8:	07db      	lsls	r3, r3, #31
 800ecfa:	d537      	bpl.n	800ed6c <_printf_float+0x40c>
 800ecfc:	2301      	movs	r3, #1
 800ecfe:	4642      	mov	r2, r8
 800ed00:	4631      	mov	r1, r6
 800ed02:	4628      	mov	r0, r5
 800ed04:	47b8      	blx	r7
 800ed06:	3001      	adds	r0, #1
 800ed08:	f43f ae78 	beq.w	800e9fc <_printf_float+0x9c>
 800ed0c:	4653      	mov	r3, sl
 800ed0e:	465a      	mov	r2, fp
 800ed10:	4631      	mov	r1, r6
 800ed12:	4628      	mov	r0, r5
 800ed14:	47b8      	blx	r7
 800ed16:	3001      	adds	r0, #1
 800ed18:	f43f ae70 	beq.w	800e9fc <_printf_float+0x9c>
 800ed1c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800ed20:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ed24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed28:	d01b      	beq.n	800ed62 <_printf_float+0x402>
 800ed2a:	9b08      	ldr	r3, [sp, #32]
 800ed2c:	f108 0201 	add.w	r2, r8, #1
 800ed30:	3b01      	subs	r3, #1
 800ed32:	4631      	mov	r1, r6
 800ed34:	4628      	mov	r0, r5
 800ed36:	47b8      	blx	r7
 800ed38:	3001      	adds	r0, #1
 800ed3a:	d10e      	bne.n	800ed5a <_printf_float+0x3fa>
 800ed3c:	e65e      	b.n	800e9fc <_printf_float+0x9c>
 800ed3e:	2301      	movs	r3, #1
 800ed40:	464a      	mov	r2, r9
 800ed42:	4631      	mov	r1, r6
 800ed44:	4628      	mov	r0, r5
 800ed46:	47b8      	blx	r7
 800ed48:	3001      	adds	r0, #1
 800ed4a:	f43f ae57 	beq.w	800e9fc <_printf_float+0x9c>
 800ed4e:	f108 0801 	add.w	r8, r8, #1
 800ed52:	9b08      	ldr	r3, [sp, #32]
 800ed54:	3b01      	subs	r3, #1
 800ed56:	4543      	cmp	r3, r8
 800ed58:	dcf1      	bgt.n	800ed3e <_printf_float+0x3de>
 800ed5a:	9b04      	ldr	r3, [sp, #16]
 800ed5c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ed60:	e6db      	b.n	800eb1a <_printf_float+0x1ba>
 800ed62:	f04f 0800 	mov.w	r8, #0
 800ed66:	f104 091a 	add.w	r9, r4, #26
 800ed6a:	e7f2      	b.n	800ed52 <_printf_float+0x3f2>
 800ed6c:	2301      	movs	r3, #1
 800ed6e:	4642      	mov	r2, r8
 800ed70:	e7df      	b.n	800ed32 <_printf_float+0x3d2>
 800ed72:	2301      	movs	r3, #1
 800ed74:	464a      	mov	r2, r9
 800ed76:	4631      	mov	r1, r6
 800ed78:	4628      	mov	r0, r5
 800ed7a:	47b8      	blx	r7
 800ed7c:	3001      	adds	r0, #1
 800ed7e:	f43f ae3d 	beq.w	800e9fc <_printf_float+0x9c>
 800ed82:	f108 0801 	add.w	r8, r8, #1
 800ed86:	68e3      	ldr	r3, [r4, #12]
 800ed88:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ed8a:	1a5b      	subs	r3, r3, r1
 800ed8c:	4543      	cmp	r3, r8
 800ed8e:	dcf0      	bgt.n	800ed72 <_printf_float+0x412>
 800ed90:	e6f7      	b.n	800eb82 <_printf_float+0x222>
 800ed92:	f04f 0800 	mov.w	r8, #0
 800ed96:	f104 0919 	add.w	r9, r4, #25
 800ed9a:	e7f4      	b.n	800ed86 <_printf_float+0x426>

0800ed9c <_printf_common>:
 800ed9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eda0:	4616      	mov	r6, r2
 800eda2:	4699      	mov	r9, r3
 800eda4:	688a      	ldr	r2, [r1, #8]
 800eda6:	690b      	ldr	r3, [r1, #16]
 800eda8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800edac:	4293      	cmp	r3, r2
 800edae:	bfb8      	it	lt
 800edb0:	4613      	movlt	r3, r2
 800edb2:	6033      	str	r3, [r6, #0]
 800edb4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800edb8:	4607      	mov	r7, r0
 800edba:	460c      	mov	r4, r1
 800edbc:	b10a      	cbz	r2, 800edc2 <_printf_common+0x26>
 800edbe:	3301      	adds	r3, #1
 800edc0:	6033      	str	r3, [r6, #0]
 800edc2:	6823      	ldr	r3, [r4, #0]
 800edc4:	0699      	lsls	r1, r3, #26
 800edc6:	bf42      	ittt	mi
 800edc8:	6833      	ldrmi	r3, [r6, #0]
 800edca:	3302      	addmi	r3, #2
 800edcc:	6033      	strmi	r3, [r6, #0]
 800edce:	6825      	ldr	r5, [r4, #0]
 800edd0:	f015 0506 	ands.w	r5, r5, #6
 800edd4:	d106      	bne.n	800ede4 <_printf_common+0x48>
 800edd6:	f104 0a19 	add.w	sl, r4, #25
 800edda:	68e3      	ldr	r3, [r4, #12]
 800eddc:	6832      	ldr	r2, [r6, #0]
 800edde:	1a9b      	subs	r3, r3, r2
 800ede0:	42ab      	cmp	r3, r5
 800ede2:	dc26      	bgt.n	800ee32 <_printf_common+0x96>
 800ede4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ede8:	1e13      	subs	r3, r2, #0
 800edea:	6822      	ldr	r2, [r4, #0]
 800edec:	bf18      	it	ne
 800edee:	2301      	movne	r3, #1
 800edf0:	0692      	lsls	r2, r2, #26
 800edf2:	d42b      	bmi.n	800ee4c <_printf_common+0xb0>
 800edf4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800edf8:	4649      	mov	r1, r9
 800edfa:	4638      	mov	r0, r7
 800edfc:	47c0      	blx	r8
 800edfe:	3001      	adds	r0, #1
 800ee00:	d01e      	beq.n	800ee40 <_printf_common+0xa4>
 800ee02:	6823      	ldr	r3, [r4, #0]
 800ee04:	68e5      	ldr	r5, [r4, #12]
 800ee06:	6832      	ldr	r2, [r6, #0]
 800ee08:	f003 0306 	and.w	r3, r3, #6
 800ee0c:	2b04      	cmp	r3, #4
 800ee0e:	bf08      	it	eq
 800ee10:	1aad      	subeq	r5, r5, r2
 800ee12:	68a3      	ldr	r3, [r4, #8]
 800ee14:	6922      	ldr	r2, [r4, #16]
 800ee16:	bf0c      	ite	eq
 800ee18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ee1c:	2500      	movne	r5, #0
 800ee1e:	4293      	cmp	r3, r2
 800ee20:	bfc4      	itt	gt
 800ee22:	1a9b      	subgt	r3, r3, r2
 800ee24:	18ed      	addgt	r5, r5, r3
 800ee26:	2600      	movs	r6, #0
 800ee28:	341a      	adds	r4, #26
 800ee2a:	42b5      	cmp	r5, r6
 800ee2c:	d11a      	bne.n	800ee64 <_printf_common+0xc8>
 800ee2e:	2000      	movs	r0, #0
 800ee30:	e008      	b.n	800ee44 <_printf_common+0xa8>
 800ee32:	2301      	movs	r3, #1
 800ee34:	4652      	mov	r2, sl
 800ee36:	4649      	mov	r1, r9
 800ee38:	4638      	mov	r0, r7
 800ee3a:	47c0      	blx	r8
 800ee3c:	3001      	adds	r0, #1
 800ee3e:	d103      	bne.n	800ee48 <_printf_common+0xac>
 800ee40:	f04f 30ff 	mov.w	r0, #4294967295
 800ee44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee48:	3501      	adds	r5, #1
 800ee4a:	e7c6      	b.n	800edda <_printf_common+0x3e>
 800ee4c:	18e1      	adds	r1, r4, r3
 800ee4e:	1c5a      	adds	r2, r3, #1
 800ee50:	2030      	movs	r0, #48	; 0x30
 800ee52:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ee56:	4422      	add	r2, r4
 800ee58:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ee5c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ee60:	3302      	adds	r3, #2
 800ee62:	e7c7      	b.n	800edf4 <_printf_common+0x58>
 800ee64:	2301      	movs	r3, #1
 800ee66:	4622      	mov	r2, r4
 800ee68:	4649      	mov	r1, r9
 800ee6a:	4638      	mov	r0, r7
 800ee6c:	47c0      	blx	r8
 800ee6e:	3001      	adds	r0, #1
 800ee70:	d0e6      	beq.n	800ee40 <_printf_common+0xa4>
 800ee72:	3601      	adds	r6, #1
 800ee74:	e7d9      	b.n	800ee2a <_printf_common+0x8e>
	...

0800ee78 <_printf_i>:
 800ee78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ee7c:	460c      	mov	r4, r1
 800ee7e:	4691      	mov	r9, r2
 800ee80:	7e27      	ldrb	r7, [r4, #24]
 800ee82:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ee84:	2f78      	cmp	r7, #120	; 0x78
 800ee86:	4680      	mov	r8, r0
 800ee88:	469a      	mov	sl, r3
 800ee8a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ee8e:	d807      	bhi.n	800eea0 <_printf_i+0x28>
 800ee90:	2f62      	cmp	r7, #98	; 0x62
 800ee92:	d80a      	bhi.n	800eeaa <_printf_i+0x32>
 800ee94:	2f00      	cmp	r7, #0
 800ee96:	f000 80d8 	beq.w	800f04a <_printf_i+0x1d2>
 800ee9a:	2f58      	cmp	r7, #88	; 0x58
 800ee9c:	f000 80a3 	beq.w	800efe6 <_printf_i+0x16e>
 800eea0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800eea4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800eea8:	e03a      	b.n	800ef20 <_printf_i+0xa8>
 800eeaa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800eeae:	2b15      	cmp	r3, #21
 800eeb0:	d8f6      	bhi.n	800eea0 <_printf_i+0x28>
 800eeb2:	a001      	add	r0, pc, #4	; (adr r0, 800eeb8 <_printf_i+0x40>)
 800eeb4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800eeb8:	0800ef11 	.word	0x0800ef11
 800eebc:	0800ef25 	.word	0x0800ef25
 800eec0:	0800eea1 	.word	0x0800eea1
 800eec4:	0800eea1 	.word	0x0800eea1
 800eec8:	0800eea1 	.word	0x0800eea1
 800eecc:	0800eea1 	.word	0x0800eea1
 800eed0:	0800ef25 	.word	0x0800ef25
 800eed4:	0800eea1 	.word	0x0800eea1
 800eed8:	0800eea1 	.word	0x0800eea1
 800eedc:	0800eea1 	.word	0x0800eea1
 800eee0:	0800eea1 	.word	0x0800eea1
 800eee4:	0800f031 	.word	0x0800f031
 800eee8:	0800ef55 	.word	0x0800ef55
 800eeec:	0800f013 	.word	0x0800f013
 800eef0:	0800eea1 	.word	0x0800eea1
 800eef4:	0800eea1 	.word	0x0800eea1
 800eef8:	0800f053 	.word	0x0800f053
 800eefc:	0800eea1 	.word	0x0800eea1
 800ef00:	0800ef55 	.word	0x0800ef55
 800ef04:	0800eea1 	.word	0x0800eea1
 800ef08:	0800eea1 	.word	0x0800eea1
 800ef0c:	0800f01b 	.word	0x0800f01b
 800ef10:	680b      	ldr	r3, [r1, #0]
 800ef12:	1d1a      	adds	r2, r3, #4
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	600a      	str	r2, [r1, #0]
 800ef18:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ef1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ef20:	2301      	movs	r3, #1
 800ef22:	e0a3      	b.n	800f06c <_printf_i+0x1f4>
 800ef24:	6825      	ldr	r5, [r4, #0]
 800ef26:	6808      	ldr	r0, [r1, #0]
 800ef28:	062e      	lsls	r6, r5, #24
 800ef2a:	f100 0304 	add.w	r3, r0, #4
 800ef2e:	d50a      	bpl.n	800ef46 <_printf_i+0xce>
 800ef30:	6805      	ldr	r5, [r0, #0]
 800ef32:	600b      	str	r3, [r1, #0]
 800ef34:	2d00      	cmp	r5, #0
 800ef36:	da03      	bge.n	800ef40 <_printf_i+0xc8>
 800ef38:	232d      	movs	r3, #45	; 0x2d
 800ef3a:	426d      	negs	r5, r5
 800ef3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ef40:	485e      	ldr	r0, [pc, #376]	; (800f0bc <_printf_i+0x244>)
 800ef42:	230a      	movs	r3, #10
 800ef44:	e019      	b.n	800ef7a <_printf_i+0x102>
 800ef46:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ef4a:	6805      	ldr	r5, [r0, #0]
 800ef4c:	600b      	str	r3, [r1, #0]
 800ef4e:	bf18      	it	ne
 800ef50:	b22d      	sxthne	r5, r5
 800ef52:	e7ef      	b.n	800ef34 <_printf_i+0xbc>
 800ef54:	680b      	ldr	r3, [r1, #0]
 800ef56:	6825      	ldr	r5, [r4, #0]
 800ef58:	1d18      	adds	r0, r3, #4
 800ef5a:	6008      	str	r0, [r1, #0]
 800ef5c:	0628      	lsls	r0, r5, #24
 800ef5e:	d501      	bpl.n	800ef64 <_printf_i+0xec>
 800ef60:	681d      	ldr	r5, [r3, #0]
 800ef62:	e002      	b.n	800ef6a <_printf_i+0xf2>
 800ef64:	0669      	lsls	r1, r5, #25
 800ef66:	d5fb      	bpl.n	800ef60 <_printf_i+0xe8>
 800ef68:	881d      	ldrh	r5, [r3, #0]
 800ef6a:	4854      	ldr	r0, [pc, #336]	; (800f0bc <_printf_i+0x244>)
 800ef6c:	2f6f      	cmp	r7, #111	; 0x6f
 800ef6e:	bf0c      	ite	eq
 800ef70:	2308      	moveq	r3, #8
 800ef72:	230a      	movne	r3, #10
 800ef74:	2100      	movs	r1, #0
 800ef76:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ef7a:	6866      	ldr	r6, [r4, #4]
 800ef7c:	60a6      	str	r6, [r4, #8]
 800ef7e:	2e00      	cmp	r6, #0
 800ef80:	bfa2      	ittt	ge
 800ef82:	6821      	ldrge	r1, [r4, #0]
 800ef84:	f021 0104 	bicge.w	r1, r1, #4
 800ef88:	6021      	strge	r1, [r4, #0]
 800ef8a:	b90d      	cbnz	r5, 800ef90 <_printf_i+0x118>
 800ef8c:	2e00      	cmp	r6, #0
 800ef8e:	d04d      	beq.n	800f02c <_printf_i+0x1b4>
 800ef90:	4616      	mov	r6, r2
 800ef92:	fbb5 f1f3 	udiv	r1, r5, r3
 800ef96:	fb03 5711 	mls	r7, r3, r1, r5
 800ef9a:	5dc7      	ldrb	r7, [r0, r7]
 800ef9c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800efa0:	462f      	mov	r7, r5
 800efa2:	42bb      	cmp	r3, r7
 800efa4:	460d      	mov	r5, r1
 800efa6:	d9f4      	bls.n	800ef92 <_printf_i+0x11a>
 800efa8:	2b08      	cmp	r3, #8
 800efaa:	d10b      	bne.n	800efc4 <_printf_i+0x14c>
 800efac:	6823      	ldr	r3, [r4, #0]
 800efae:	07df      	lsls	r7, r3, #31
 800efb0:	d508      	bpl.n	800efc4 <_printf_i+0x14c>
 800efb2:	6923      	ldr	r3, [r4, #16]
 800efb4:	6861      	ldr	r1, [r4, #4]
 800efb6:	4299      	cmp	r1, r3
 800efb8:	bfde      	ittt	le
 800efba:	2330      	movle	r3, #48	; 0x30
 800efbc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800efc0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800efc4:	1b92      	subs	r2, r2, r6
 800efc6:	6122      	str	r2, [r4, #16]
 800efc8:	f8cd a000 	str.w	sl, [sp]
 800efcc:	464b      	mov	r3, r9
 800efce:	aa03      	add	r2, sp, #12
 800efd0:	4621      	mov	r1, r4
 800efd2:	4640      	mov	r0, r8
 800efd4:	f7ff fee2 	bl	800ed9c <_printf_common>
 800efd8:	3001      	adds	r0, #1
 800efda:	d14c      	bne.n	800f076 <_printf_i+0x1fe>
 800efdc:	f04f 30ff 	mov.w	r0, #4294967295
 800efe0:	b004      	add	sp, #16
 800efe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800efe6:	4835      	ldr	r0, [pc, #212]	; (800f0bc <_printf_i+0x244>)
 800efe8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800efec:	6823      	ldr	r3, [r4, #0]
 800efee:	680e      	ldr	r6, [r1, #0]
 800eff0:	061f      	lsls	r7, r3, #24
 800eff2:	f856 5b04 	ldr.w	r5, [r6], #4
 800eff6:	600e      	str	r6, [r1, #0]
 800eff8:	d514      	bpl.n	800f024 <_printf_i+0x1ac>
 800effa:	07d9      	lsls	r1, r3, #31
 800effc:	bf44      	itt	mi
 800effe:	f043 0320 	orrmi.w	r3, r3, #32
 800f002:	6023      	strmi	r3, [r4, #0]
 800f004:	b91d      	cbnz	r5, 800f00e <_printf_i+0x196>
 800f006:	6823      	ldr	r3, [r4, #0]
 800f008:	f023 0320 	bic.w	r3, r3, #32
 800f00c:	6023      	str	r3, [r4, #0]
 800f00e:	2310      	movs	r3, #16
 800f010:	e7b0      	b.n	800ef74 <_printf_i+0xfc>
 800f012:	6823      	ldr	r3, [r4, #0]
 800f014:	f043 0320 	orr.w	r3, r3, #32
 800f018:	6023      	str	r3, [r4, #0]
 800f01a:	2378      	movs	r3, #120	; 0x78
 800f01c:	4828      	ldr	r0, [pc, #160]	; (800f0c0 <_printf_i+0x248>)
 800f01e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f022:	e7e3      	b.n	800efec <_printf_i+0x174>
 800f024:	065e      	lsls	r6, r3, #25
 800f026:	bf48      	it	mi
 800f028:	b2ad      	uxthmi	r5, r5
 800f02a:	e7e6      	b.n	800effa <_printf_i+0x182>
 800f02c:	4616      	mov	r6, r2
 800f02e:	e7bb      	b.n	800efa8 <_printf_i+0x130>
 800f030:	680b      	ldr	r3, [r1, #0]
 800f032:	6826      	ldr	r6, [r4, #0]
 800f034:	6960      	ldr	r0, [r4, #20]
 800f036:	1d1d      	adds	r5, r3, #4
 800f038:	600d      	str	r5, [r1, #0]
 800f03a:	0635      	lsls	r5, r6, #24
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	d501      	bpl.n	800f044 <_printf_i+0x1cc>
 800f040:	6018      	str	r0, [r3, #0]
 800f042:	e002      	b.n	800f04a <_printf_i+0x1d2>
 800f044:	0671      	lsls	r1, r6, #25
 800f046:	d5fb      	bpl.n	800f040 <_printf_i+0x1c8>
 800f048:	8018      	strh	r0, [r3, #0]
 800f04a:	2300      	movs	r3, #0
 800f04c:	6123      	str	r3, [r4, #16]
 800f04e:	4616      	mov	r6, r2
 800f050:	e7ba      	b.n	800efc8 <_printf_i+0x150>
 800f052:	680b      	ldr	r3, [r1, #0]
 800f054:	1d1a      	adds	r2, r3, #4
 800f056:	600a      	str	r2, [r1, #0]
 800f058:	681e      	ldr	r6, [r3, #0]
 800f05a:	6862      	ldr	r2, [r4, #4]
 800f05c:	2100      	movs	r1, #0
 800f05e:	4630      	mov	r0, r6
 800f060:	f7f1 f946 	bl	80002f0 <memchr>
 800f064:	b108      	cbz	r0, 800f06a <_printf_i+0x1f2>
 800f066:	1b80      	subs	r0, r0, r6
 800f068:	6060      	str	r0, [r4, #4]
 800f06a:	6863      	ldr	r3, [r4, #4]
 800f06c:	6123      	str	r3, [r4, #16]
 800f06e:	2300      	movs	r3, #0
 800f070:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f074:	e7a8      	b.n	800efc8 <_printf_i+0x150>
 800f076:	6923      	ldr	r3, [r4, #16]
 800f078:	4632      	mov	r2, r6
 800f07a:	4649      	mov	r1, r9
 800f07c:	4640      	mov	r0, r8
 800f07e:	47d0      	blx	sl
 800f080:	3001      	adds	r0, #1
 800f082:	d0ab      	beq.n	800efdc <_printf_i+0x164>
 800f084:	6823      	ldr	r3, [r4, #0]
 800f086:	079b      	lsls	r3, r3, #30
 800f088:	d413      	bmi.n	800f0b2 <_printf_i+0x23a>
 800f08a:	68e0      	ldr	r0, [r4, #12]
 800f08c:	9b03      	ldr	r3, [sp, #12]
 800f08e:	4298      	cmp	r0, r3
 800f090:	bfb8      	it	lt
 800f092:	4618      	movlt	r0, r3
 800f094:	e7a4      	b.n	800efe0 <_printf_i+0x168>
 800f096:	2301      	movs	r3, #1
 800f098:	4632      	mov	r2, r6
 800f09a:	4649      	mov	r1, r9
 800f09c:	4640      	mov	r0, r8
 800f09e:	47d0      	blx	sl
 800f0a0:	3001      	adds	r0, #1
 800f0a2:	d09b      	beq.n	800efdc <_printf_i+0x164>
 800f0a4:	3501      	adds	r5, #1
 800f0a6:	68e3      	ldr	r3, [r4, #12]
 800f0a8:	9903      	ldr	r1, [sp, #12]
 800f0aa:	1a5b      	subs	r3, r3, r1
 800f0ac:	42ab      	cmp	r3, r5
 800f0ae:	dcf2      	bgt.n	800f096 <_printf_i+0x21e>
 800f0b0:	e7eb      	b.n	800f08a <_printf_i+0x212>
 800f0b2:	2500      	movs	r5, #0
 800f0b4:	f104 0619 	add.w	r6, r4, #25
 800f0b8:	e7f5      	b.n	800f0a6 <_printf_i+0x22e>
 800f0ba:	bf00      	nop
 800f0bc:	08011676 	.word	0x08011676
 800f0c0:	08011687 	.word	0x08011687

0800f0c4 <siprintf>:
 800f0c4:	b40e      	push	{r1, r2, r3}
 800f0c6:	b500      	push	{lr}
 800f0c8:	b09c      	sub	sp, #112	; 0x70
 800f0ca:	ab1d      	add	r3, sp, #116	; 0x74
 800f0cc:	9002      	str	r0, [sp, #8]
 800f0ce:	9006      	str	r0, [sp, #24]
 800f0d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f0d4:	4809      	ldr	r0, [pc, #36]	; (800f0fc <siprintf+0x38>)
 800f0d6:	9107      	str	r1, [sp, #28]
 800f0d8:	9104      	str	r1, [sp, #16]
 800f0da:	4909      	ldr	r1, [pc, #36]	; (800f100 <siprintf+0x3c>)
 800f0dc:	f853 2b04 	ldr.w	r2, [r3], #4
 800f0e0:	9105      	str	r1, [sp, #20]
 800f0e2:	6800      	ldr	r0, [r0, #0]
 800f0e4:	9301      	str	r3, [sp, #4]
 800f0e6:	a902      	add	r1, sp, #8
 800f0e8:	f001 fd9c 	bl	8010c24 <_svfiprintf_r>
 800f0ec:	9b02      	ldr	r3, [sp, #8]
 800f0ee:	2200      	movs	r2, #0
 800f0f0:	701a      	strb	r2, [r3, #0]
 800f0f2:	b01c      	add	sp, #112	; 0x70
 800f0f4:	f85d eb04 	ldr.w	lr, [sp], #4
 800f0f8:	b003      	add	sp, #12
 800f0fa:	4770      	bx	lr
 800f0fc:	24000010 	.word	0x24000010
 800f100:	ffff0208 	.word	0xffff0208

0800f104 <__swbuf_r>:
 800f104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f106:	460e      	mov	r6, r1
 800f108:	4614      	mov	r4, r2
 800f10a:	4605      	mov	r5, r0
 800f10c:	b118      	cbz	r0, 800f116 <__swbuf_r+0x12>
 800f10e:	6983      	ldr	r3, [r0, #24]
 800f110:	b90b      	cbnz	r3, 800f116 <__swbuf_r+0x12>
 800f112:	f000 ffe1 	bl	80100d8 <__sinit>
 800f116:	4b21      	ldr	r3, [pc, #132]	; (800f19c <__swbuf_r+0x98>)
 800f118:	429c      	cmp	r4, r3
 800f11a:	d12b      	bne.n	800f174 <__swbuf_r+0x70>
 800f11c:	686c      	ldr	r4, [r5, #4]
 800f11e:	69a3      	ldr	r3, [r4, #24]
 800f120:	60a3      	str	r3, [r4, #8]
 800f122:	89a3      	ldrh	r3, [r4, #12]
 800f124:	071a      	lsls	r2, r3, #28
 800f126:	d52f      	bpl.n	800f188 <__swbuf_r+0x84>
 800f128:	6923      	ldr	r3, [r4, #16]
 800f12a:	b36b      	cbz	r3, 800f188 <__swbuf_r+0x84>
 800f12c:	6923      	ldr	r3, [r4, #16]
 800f12e:	6820      	ldr	r0, [r4, #0]
 800f130:	1ac0      	subs	r0, r0, r3
 800f132:	6963      	ldr	r3, [r4, #20]
 800f134:	b2f6      	uxtb	r6, r6
 800f136:	4283      	cmp	r3, r0
 800f138:	4637      	mov	r7, r6
 800f13a:	dc04      	bgt.n	800f146 <__swbuf_r+0x42>
 800f13c:	4621      	mov	r1, r4
 800f13e:	4628      	mov	r0, r5
 800f140:	f000 ff36 	bl	800ffb0 <_fflush_r>
 800f144:	bb30      	cbnz	r0, 800f194 <__swbuf_r+0x90>
 800f146:	68a3      	ldr	r3, [r4, #8]
 800f148:	3b01      	subs	r3, #1
 800f14a:	60a3      	str	r3, [r4, #8]
 800f14c:	6823      	ldr	r3, [r4, #0]
 800f14e:	1c5a      	adds	r2, r3, #1
 800f150:	6022      	str	r2, [r4, #0]
 800f152:	701e      	strb	r6, [r3, #0]
 800f154:	6963      	ldr	r3, [r4, #20]
 800f156:	3001      	adds	r0, #1
 800f158:	4283      	cmp	r3, r0
 800f15a:	d004      	beq.n	800f166 <__swbuf_r+0x62>
 800f15c:	89a3      	ldrh	r3, [r4, #12]
 800f15e:	07db      	lsls	r3, r3, #31
 800f160:	d506      	bpl.n	800f170 <__swbuf_r+0x6c>
 800f162:	2e0a      	cmp	r6, #10
 800f164:	d104      	bne.n	800f170 <__swbuf_r+0x6c>
 800f166:	4621      	mov	r1, r4
 800f168:	4628      	mov	r0, r5
 800f16a:	f000 ff21 	bl	800ffb0 <_fflush_r>
 800f16e:	b988      	cbnz	r0, 800f194 <__swbuf_r+0x90>
 800f170:	4638      	mov	r0, r7
 800f172:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f174:	4b0a      	ldr	r3, [pc, #40]	; (800f1a0 <__swbuf_r+0x9c>)
 800f176:	429c      	cmp	r4, r3
 800f178:	d101      	bne.n	800f17e <__swbuf_r+0x7a>
 800f17a:	68ac      	ldr	r4, [r5, #8]
 800f17c:	e7cf      	b.n	800f11e <__swbuf_r+0x1a>
 800f17e:	4b09      	ldr	r3, [pc, #36]	; (800f1a4 <__swbuf_r+0xa0>)
 800f180:	429c      	cmp	r4, r3
 800f182:	bf08      	it	eq
 800f184:	68ec      	ldreq	r4, [r5, #12]
 800f186:	e7ca      	b.n	800f11e <__swbuf_r+0x1a>
 800f188:	4621      	mov	r1, r4
 800f18a:	4628      	mov	r0, r5
 800f18c:	f000 f80c 	bl	800f1a8 <__swsetup_r>
 800f190:	2800      	cmp	r0, #0
 800f192:	d0cb      	beq.n	800f12c <__swbuf_r+0x28>
 800f194:	f04f 37ff 	mov.w	r7, #4294967295
 800f198:	e7ea      	b.n	800f170 <__swbuf_r+0x6c>
 800f19a:	bf00      	nop
 800f19c:	0801174c 	.word	0x0801174c
 800f1a0:	0801176c 	.word	0x0801176c
 800f1a4:	0801172c 	.word	0x0801172c

0800f1a8 <__swsetup_r>:
 800f1a8:	4b32      	ldr	r3, [pc, #200]	; (800f274 <__swsetup_r+0xcc>)
 800f1aa:	b570      	push	{r4, r5, r6, lr}
 800f1ac:	681d      	ldr	r5, [r3, #0]
 800f1ae:	4606      	mov	r6, r0
 800f1b0:	460c      	mov	r4, r1
 800f1b2:	b125      	cbz	r5, 800f1be <__swsetup_r+0x16>
 800f1b4:	69ab      	ldr	r3, [r5, #24]
 800f1b6:	b913      	cbnz	r3, 800f1be <__swsetup_r+0x16>
 800f1b8:	4628      	mov	r0, r5
 800f1ba:	f000 ff8d 	bl	80100d8 <__sinit>
 800f1be:	4b2e      	ldr	r3, [pc, #184]	; (800f278 <__swsetup_r+0xd0>)
 800f1c0:	429c      	cmp	r4, r3
 800f1c2:	d10f      	bne.n	800f1e4 <__swsetup_r+0x3c>
 800f1c4:	686c      	ldr	r4, [r5, #4]
 800f1c6:	89a3      	ldrh	r3, [r4, #12]
 800f1c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f1cc:	0719      	lsls	r1, r3, #28
 800f1ce:	d42c      	bmi.n	800f22a <__swsetup_r+0x82>
 800f1d0:	06dd      	lsls	r5, r3, #27
 800f1d2:	d411      	bmi.n	800f1f8 <__swsetup_r+0x50>
 800f1d4:	2309      	movs	r3, #9
 800f1d6:	6033      	str	r3, [r6, #0]
 800f1d8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f1dc:	81a3      	strh	r3, [r4, #12]
 800f1de:	f04f 30ff 	mov.w	r0, #4294967295
 800f1e2:	e03e      	b.n	800f262 <__swsetup_r+0xba>
 800f1e4:	4b25      	ldr	r3, [pc, #148]	; (800f27c <__swsetup_r+0xd4>)
 800f1e6:	429c      	cmp	r4, r3
 800f1e8:	d101      	bne.n	800f1ee <__swsetup_r+0x46>
 800f1ea:	68ac      	ldr	r4, [r5, #8]
 800f1ec:	e7eb      	b.n	800f1c6 <__swsetup_r+0x1e>
 800f1ee:	4b24      	ldr	r3, [pc, #144]	; (800f280 <__swsetup_r+0xd8>)
 800f1f0:	429c      	cmp	r4, r3
 800f1f2:	bf08      	it	eq
 800f1f4:	68ec      	ldreq	r4, [r5, #12]
 800f1f6:	e7e6      	b.n	800f1c6 <__swsetup_r+0x1e>
 800f1f8:	0758      	lsls	r0, r3, #29
 800f1fa:	d512      	bpl.n	800f222 <__swsetup_r+0x7a>
 800f1fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f1fe:	b141      	cbz	r1, 800f212 <__swsetup_r+0x6a>
 800f200:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f204:	4299      	cmp	r1, r3
 800f206:	d002      	beq.n	800f20e <__swsetup_r+0x66>
 800f208:	4630      	mov	r0, r6
 800f20a:	f001 fc05 	bl	8010a18 <_free_r>
 800f20e:	2300      	movs	r3, #0
 800f210:	6363      	str	r3, [r4, #52]	; 0x34
 800f212:	89a3      	ldrh	r3, [r4, #12]
 800f214:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f218:	81a3      	strh	r3, [r4, #12]
 800f21a:	2300      	movs	r3, #0
 800f21c:	6063      	str	r3, [r4, #4]
 800f21e:	6923      	ldr	r3, [r4, #16]
 800f220:	6023      	str	r3, [r4, #0]
 800f222:	89a3      	ldrh	r3, [r4, #12]
 800f224:	f043 0308 	orr.w	r3, r3, #8
 800f228:	81a3      	strh	r3, [r4, #12]
 800f22a:	6923      	ldr	r3, [r4, #16]
 800f22c:	b94b      	cbnz	r3, 800f242 <__swsetup_r+0x9a>
 800f22e:	89a3      	ldrh	r3, [r4, #12]
 800f230:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f234:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f238:	d003      	beq.n	800f242 <__swsetup_r+0x9a>
 800f23a:	4621      	mov	r1, r4
 800f23c:	4630      	mov	r0, r6
 800f23e:	f001 f815 	bl	801026c <__smakebuf_r>
 800f242:	89a0      	ldrh	r0, [r4, #12]
 800f244:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f248:	f010 0301 	ands.w	r3, r0, #1
 800f24c:	d00a      	beq.n	800f264 <__swsetup_r+0xbc>
 800f24e:	2300      	movs	r3, #0
 800f250:	60a3      	str	r3, [r4, #8]
 800f252:	6963      	ldr	r3, [r4, #20]
 800f254:	425b      	negs	r3, r3
 800f256:	61a3      	str	r3, [r4, #24]
 800f258:	6923      	ldr	r3, [r4, #16]
 800f25a:	b943      	cbnz	r3, 800f26e <__swsetup_r+0xc6>
 800f25c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f260:	d1ba      	bne.n	800f1d8 <__swsetup_r+0x30>
 800f262:	bd70      	pop	{r4, r5, r6, pc}
 800f264:	0781      	lsls	r1, r0, #30
 800f266:	bf58      	it	pl
 800f268:	6963      	ldrpl	r3, [r4, #20]
 800f26a:	60a3      	str	r3, [r4, #8]
 800f26c:	e7f4      	b.n	800f258 <__swsetup_r+0xb0>
 800f26e:	2000      	movs	r0, #0
 800f270:	e7f7      	b.n	800f262 <__swsetup_r+0xba>
 800f272:	bf00      	nop
 800f274:	24000010 	.word	0x24000010
 800f278:	0801174c 	.word	0x0801174c
 800f27c:	0801176c 	.word	0x0801176c
 800f280:	0801172c 	.word	0x0801172c

0800f284 <quorem>:
 800f284:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f288:	6903      	ldr	r3, [r0, #16]
 800f28a:	690c      	ldr	r4, [r1, #16]
 800f28c:	42a3      	cmp	r3, r4
 800f28e:	4607      	mov	r7, r0
 800f290:	f2c0 8081 	blt.w	800f396 <quorem+0x112>
 800f294:	3c01      	subs	r4, #1
 800f296:	f101 0814 	add.w	r8, r1, #20
 800f29a:	f100 0514 	add.w	r5, r0, #20
 800f29e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f2a2:	9301      	str	r3, [sp, #4]
 800f2a4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f2a8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f2ac:	3301      	adds	r3, #1
 800f2ae:	429a      	cmp	r2, r3
 800f2b0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800f2b4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f2b8:	fbb2 f6f3 	udiv	r6, r2, r3
 800f2bc:	d331      	bcc.n	800f322 <quorem+0x9e>
 800f2be:	f04f 0e00 	mov.w	lr, #0
 800f2c2:	4640      	mov	r0, r8
 800f2c4:	46ac      	mov	ip, r5
 800f2c6:	46f2      	mov	sl, lr
 800f2c8:	f850 2b04 	ldr.w	r2, [r0], #4
 800f2cc:	b293      	uxth	r3, r2
 800f2ce:	fb06 e303 	mla	r3, r6, r3, lr
 800f2d2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800f2d6:	b29b      	uxth	r3, r3
 800f2d8:	ebaa 0303 	sub.w	r3, sl, r3
 800f2dc:	0c12      	lsrs	r2, r2, #16
 800f2de:	f8dc a000 	ldr.w	sl, [ip]
 800f2e2:	fb06 e202 	mla	r2, r6, r2, lr
 800f2e6:	fa13 f38a 	uxtah	r3, r3, sl
 800f2ea:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f2ee:	fa1f fa82 	uxth.w	sl, r2
 800f2f2:	f8dc 2000 	ldr.w	r2, [ip]
 800f2f6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800f2fa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f2fe:	b29b      	uxth	r3, r3
 800f300:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f304:	4581      	cmp	r9, r0
 800f306:	f84c 3b04 	str.w	r3, [ip], #4
 800f30a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800f30e:	d2db      	bcs.n	800f2c8 <quorem+0x44>
 800f310:	f855 300b 	ldr.w	r3, [r5, fp]
 800f314:	b92b      	cbnz	r3, 800f322 <quorem+0x9e>
 800f316:	9b01      	ldr	r3, [sp, #4]
 800f318:	3b04      	subs	r3, #4
 800f31a:	429d      	cmp	r5, r3
 800f31c:	461a      	mov	r2, r3
 800f31e:	d32e      	bcc.n	800f37e <quorem+0xfa>
 800f320:	613c      	str	r4, [r7, #16]
 800f322:	4638      	mov	r0, r7
 800f324:	f001 fa68 	bl	80107f8 <__mcmp>
 800f328:	2800      	cmp	r0, #0
 800f32a:	db24      	blt.n	800f376 <quorem+0xf2>
 800f32c:	3601      	adds	r6, #1
 800f32e:	4628      	mov	r0, r5
 800f330:	f04f 0c00 	mov.w	ip, #0
 800f334:	f858 2b04 	ldr.w	r2, [r8], #4
 800f338:	f8d0 e000 	ldr.w	lr, [r0]
 800f33c:	b293      	uxth	r3, r2
 800f33e:	ebac 0303 	sub.w	r3, ip, r3
 800f342:	0c12      	lsrs	r2, r2, #16
 800f344:	fa13 f38e 	uxtah	r3, r3, lr
 800f348:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800f34c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f350:	b29b      	uxth	r3, r3
 800f352:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f356:	45c1      	cmp	r9, r8
 800f358:	f840 3b04 	str.w	r3, [r0], #4
 800f35c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800f360:	d2e8      	bcs.n	800f334 <quorem+0xb0>
 800f362:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f366:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f36a:	b922      	cbnz	r2, 800f376 <quorem+0xf2>
 800f36c:	3b04      	subs	r3, #4
 800f36e:	429d      	cmp	r5, r3
 800f370:	461a      	mov	r2, r3
 800f372:	d30a      	bcc.n	800f38a <quorem+0x106>
 800f374:	613c      	str	r4, [r7, #16]
 800f376:	4630      	mov	r0, r6
 800f378:	b003      	add	sp, #12
 800f37a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f37e:	6812      	ldr	r2, [r2, #0]
 800f380:	3b04      	subs	r3, #4
 800f382:	2a00      	cmp	r2, #0
 800f384:	d1cc      	bne.n	800f320 <quorem+0x9c>
 800f386:	3c01      	subs	r4, #1
 800f388:	e7c7      	b.n	800f31a <quorem+0x96>
 800f38a:	6812      	ldr	r2, [r2, #0]
 800f38c:	3b04      	subs	r3, #4
 800f38e:	2a00      	cmp	r2, #0
 800f390:	d1f0      	bne.n	800f374 <quorem+0xf0>
 800f392:	3c01      	subs	r4, #1
 800f394:	e7eb      	b.n	800f36e <quorem+0xea>
 800f396:	2000      	movs	r0, #0
 800f398:	e7ee      	b.n	800f378 <quorem+0xf4>
 800f39a:	0000      	movs	r0, r0
 800f39c:	0000      	movs	r0, r0
	...

0800f3a0 <_dtoa_r>:
 800f3a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3a4:	ec59 8b10 	vmov	r8, r9, d0
 800f3a8:	b095      	sub	sp, #84	; 0x54
 800f3aa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f3ac:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800f3ae:	9107      	str	r1, [sp, #28]
 800f3b0:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800f3b4:	4606      	mov	r6, r0
 800f3b6:	9209      	str	r2, [sp, #36]	; 0x24
 800f3b8:	9310      	str	r3, [sp, #64]	; 0x40
 800f3ba:	b975      	cbnz	r5, 800f3da <_dtoa_r+0x3a>
 800f3bc:	2010      	movs	r0, #16
 800f3be:	f000 ff95 	bl	80102ec <malloc>
 800f3c2:	4602      	mov	r2, r0
 800f3c4:	6270      	str	r0, [r6, #36]	; 0x24
 800f3c6:	b920      	cbnz	r0, 800f3d2 <_dtoa_r+0x32>
 800f3c8:	4bab      	ldr	r3, [pc, #684]	; (800f678 <_dtoa_r+0x2d8>)
 800f3ca:	21ea      	movs	r1, #234	; 0xea
 800f3cc:	48ab      	ldr	r0, [pc, #684]	; (800f67c <_dtoa_r+0x2dc>)
 800f3ce:	f001 fee9 	bl	80111a4 <__assert_func>
 800f3d2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f3d6:	6005      	str	r5, [r0, #0]
 800f3d8:	60c5      	str	r5, [r0, #12]
 800f3da:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800f3dc:	6819      	ldr	r1, [r3, #0]
 800f3de:	b151      	cbz	r1, 800f3f6 <_dtoa_r+0x56>
 800f3e0:	685a      	ldr	r2, [r3, #4]
 800f3e2:	604a      	str	r2, [r1, #4]
 800f3e4:	2301      	movs	r3, #1
 800f3e6:	4093      	lsls	r3, r2
 800f3e8:	608b      	str	r3, [r1, #8]
 800f3ea:	4630      	mov	r0, r6
 800f3ec:	f000 ffc6 	bl	801037c <_Bfree>
 800f3f0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800f3f2:	2200      	movs	r2, #0
 800f3f4:	601a      	str	r2, [r3, #0]
 800f3f6:	f1b9 0300 	subs.w	r3, r9, #0
 800f3fa:	bfbb      	ittet	lt
 800f3fc:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800f400:	9303      	strlt	r3, [sp, #12]
 800f402:	2300      	movge	r3, #0
 800f404:	2201      	movlt	r2, #1
 800f406:	bfac      	ite	ge
 800f408:	6023      	strge	r3, [r4, #0]
 800f40a:	6022      	strlt	r2, [r4, #0]
 800f40c:	4b9c      	ldr	r3, [pc, #624]	; (800f680 <_dtoa_r+0x2e0>)
 800f40e:	9c03      	ldr	r4, [sp, #12]
 800f410:	43a3      	bics	r3, r4
 800f412:	d11a      	bne.n	800f44a <_dtoa_r+0xaa>
 800f414:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f416:	f242 730f 	movw	r3, #9999	; 0x270f
 800f41a:	6013      	str	r3, [r2, #0]
 800f41c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800f420:	ea53 0308 	orrs.w	r3, r3, r8
 800f424:	f000 8512 	beq.w	800fe4c <_dtoa_r+0xaac>
 800f428:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800f42a:	b953      	cbnz	r3, 800f442 <_dtoa_r+0xa2>
 800f42c:	4b95      	ldr	r3, [pc, #596]	; (800f684 <_dtoa_r+0x2e4>)
 800f42e:	e01f      	b.n	800f470 <_dtoa_r+0xd0>
 800f430:	4b95      	ldr	r3, [pc, #596]	; (800f688 <_dtoa_r+0x2e8>)
 800f432:	9300      	str	r3, [sp, #0]
 800f434:	3308      	adds	r3, #8
 800f436:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800f438:	6013      	str	r3, [r2, #0]
 800f43a:	9800      	ldr	r0, [sp, #0]
 800f43c:	b015      	add	sp, #84	; 0x54
 800f43e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f442:	4b90      	ldr	r3, [pc, #576]	; (800f684 <_dtoa_r+0x2e4>)
 800f444:	9300      	str	r3, [sp, #0]
 800f446:	3303      	adds	r3, #3
 800f448:	e7f5      	b.n	800f436 <_dtoa_r+0x96>
 800f44a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f44e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f456:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800f45a:	d10b      	bne.n	800f474 <_dtoa_r+0xd4>
 800f45c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f45e:	2301      	movs	r3, #1
 800f460:	6013      	str	r3, [r2, #0]
 800f462:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800f464:	2b00      	cmp	r3, #0
 800f466:	f000 84ee 	beq.w	800fe46 <_dtoa_r+0xaa6>
 800f46a:	4888      	ldr	r0, [pc, #544]	; (800f68c <_dtoa_r+0x2ec>)
 800f46c:	6018      	str	r0, [r3, #0]
 800f46e:	1e43      	subs	r3, r0, #1
 800f470:	9300      	str	r3, [sp, #0]
 800f472:	e7e2      	b.n	800f43a <_dtoa_r+0x9a>
 800f474:	a913      	add	r1, sp, #76	; 0x4c
 800f476:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800f47a:	aa12      	add	r2, sp, #72	; 0x48
 800f47c:	4630      	mov	r0, r6
 800f47e:	f001 fa5f 	bl	8010940 <__d2b>
 800f482:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800f486:	4605      	mov	r5, r0
 800f488:	9812      	ldr	r0, [sp, #72]	; 0x48
 800f48a:	2900      	cmp	r1, #0
 800f48c:	d047      	beq.n	800f51e <_dtoa_r+0x17e>
 800f48e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800f490:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800f494:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800f498:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800f49c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800f4a0:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800f4a4:	2400      	movs	r4, #0
 800f4a6:	ec43 2b16 	vmov	d6, r2, r3
 800f4aa:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800f4ae:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 800f660 <_dtoa_r+0x2c0>
 800f4b2:	ee36 7b47 	vsub.f64	d7, d6, d7
 800f4b6:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 800f668 <_dtoa_r+0x2c8>
 800f4ba:	eea7 6b05 	vfma.f64	d6, d7, d5
 800f4be:	eeb0 7b46 	vmov.f64	d7, d6
 800f4c2:	ee06 1a90 	vmov	s13, r1
 800f4c6:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 800f4ca:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800f670 <_dtoa_r+0x2d0>
 800f4ce:	eea5 7b06 	vfma.f64	d7, d5, d6
 800f4d2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800f4d6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800f4da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4de:	ee16 ba90 	vmov	fp, s13
 800f4e2:	9411      	str	r4, [sp, #68]	; 0x44
 800f4e4:	d508      	bpl.n	800f4f8 <_dtoa_r+0x158>
 800f4e6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800f4ea:	eeb4 6b47 	vcmp.f64	d6, d7
 800f4ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4f2:	bf18      	it	ne
 800f4f4:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800f4f8:	f1bb 0f16 	cmp.w	fp, #22
 800f4fc:	d832      	bhi.n	800f564 <_dtoa_r+0x1c4>
 800f4fe:	4b64      	ldr	r3, [pc, #400]	; (800f690 <_dtoa_r+0x2f0>)
 800f500:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f504:	ed93 7b00 	vldr	d7, [r3]
 800f508:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800f50c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f514:	d501      	bpl.n	800f51a <_dtoa_r+0x17a>
 800f516:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f51a:	2300      	movs	r3, #0
 800f51c:	e023      	b.n	800f566 <_dtoa_r+0x1c6>
 800f51e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800f520:	4401      	add	r1, r0
 800f522:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800f526:	2b20      	cmp	r3, #32
 800f528:	bfc3      	ittte	gt
 800f52a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f52e:	fa04 f303 	lslgt.w	r3, r4, r3
 800f532:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800f536:	f1c3 0320 	rsble	r3, r3, #32
 800f53a:	bfc6      	itte	gt
 800f53c:	fa28 f804 	lsrgt.w	r8, r8, r4
 800f540:	ea43 0308 	orrgt.w	r3, r3, r8
 800f544:	fa08 f303 	lslle.w	r3, r8, r3
 800f548:	ee07 3a90 	vmov	s15, r3
 800f54c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800f550:	3901      	subs	r1, #1
 800f552:	ed8d 7b00 	vstr	d7, [sp]
 800f556:	9c01      	ldr	r4, [sp, #4]
 800f558:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f55c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800f560:	2401      	movs	r4, #1
 800f562:	e7a0      	b.n	800f4a6 <_dtoa_r+0x106>
 800f564:	2301      	movs	r3, #1
 800f566:	930f      	str	r3, [sp, #60]	; 0x3c
 800f568:	1a43      	subs	r3, r0, r1
 800f56a:	1e5a      	subs	r2, r3, #1
 800f56c:	bf45      	ittet	mi
 800f56e:	f1c3 0301 	rsbmi	r3, r3, #1
 800f572:	9305      	strmi	r3, [sp, #20]
 800f574:	2300      	movpl	r3, #0
 800f576:	2300      	movmi	r3, #0
 800f578:	9206      	str	r2, [sp, #24]
 800f57a:	bf54      	ite	pl
 800f57c:	9305      	strpl	r3, [sp, #20]
 800f57e:	9306      	strmi	r3, [sp, #24]
 800f580:	f1bb 0f00 	cmp.w	fp, #0
 800f584:	db18      	blt.n	800f5b8 <_dtoa_r+0x218>
 800f586:	9b06      	ldr	r3, [sp, #24]
 800f588:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800f58c:	445b      	add	r3, fp
 800f58e:	9306      	str	r3, [sp, #24]
 800f590:	2300      	movs	r3, #0
 800f592:	9a07      	ldr	r2, [sp, #28]
 800f594:	2a09      	cmp	r2, #9
 800f596:	d849      	bhi.n	800f62c <_dtoa_r+0x28c>
 800f598:	2a05      	cmp	r2, #5
 800f59a:	bfc4      	itt	gt
 800f59c:	3a04      	subgt	r2, #4
 800f59e:	9207      	strgt	r2, [sp, #28]
 800f5a0:	9a07      	ldr	r2, [sp, #28]
 800f5a2:	f1a2 0202 	sub.w	r2, r2, #2
 800f5a6:	bfcc      	ite	gt
 800f5a8:	2400      	movgt	r4, #0
 800f5aa:	2401      	movle	r4, #1
 800f5ac:	2a03      	cmp	r2, #3
 800f5ae:	d848      	bhi.n	800f642 <_dtoa_r+0x2a2>
 800f5b0:	e8df f002 	tbb	[pc, r2]
 800f5b4:	3a2c2e0b 	.word	0x3a2c2e0b
 800f5b8:	9b05      	ldr	r3, [sp, #20]
 800f5ba:	2200      	movs	r2, #0
 800f5bc:	eba3 030b 	sub.w	r3, r3, fp
 800f5c0:	9305      	str	r3, [sp, #20]
 800f5c2:	920e      	str	r2, [sp, #56]	; 0x38
 800f5c4:	f1cb 0300 	rsb	r3, fp, #0
 800f5c8:	e7e3      	b.n	800f592 <_dtoa_r+0x1f2>
 800f5ca:	2200      	movs	r2, #0
 800f5cc:	9208      	str	r2, [sp, #32]
 800f5ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f5d0:	2a00      	cmp	r2, #0
 800f5d2:	dc39      	bgt.n	800f648 <_dtoa_r+0x2a8>
 800f5d4:	f04f 0a01 	mov.w	sl, #1
 800f5d8:	46d1      	mov	r9, sl
 800f5da:	4652      	mov	r2, sl
 800f5dc:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800f5e0:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800f5e2:	2100      	movs	r1, #0
 800f5e4:	6079      	str	r1, [r7, #4]
 800f5e6:	2004      	movs	r0, #4
 800f5e8:	f100 0c14 	add.w	ip, r0, #20
 800f5ec:	4594      	cmp	ip, r2
 800f5ee:	6879      	ldr	r1, [r7, #4]
 800f5f0:	d92f      	bls.n	800f652 <_dtoa_r+0x2b2>
 800f5f2:	4630      	mov	r0, r6
 800f5f4:	930c      	str	r3, [sp, #48]	; 0x30
 800f5f6:	f000 fe81 	bl	80102fc <_Balloc>
 800f5fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f5fc:	9000      	str	r0, [sp, #0]
 800f5fe:	4602      	mov	r2, r0
 800f600:	2800      	cmp	r0, #0
 800f602:	d149      	bne.n	800f698 <_dtoa_r+0x2f8>
 800f604:	4b23      	ldr	r3, [pc, #140]	; (800f694 <_dtoa_r+0x2f4>)
 800f606:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f60a:	e6df      	b.n	800f3cc <_dtoa_r+0x2c>
 800f60c:	2201      	movs	r2, #1
 800f60e:	e7dd      	b.n	800f5cc <_dtoa_r+0x22c>
 800f610:	2200      	movs	r2, #0
 800f612:	9208      	str	r2, [sp, #32]
 800f614:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f616:	eb0b 0a02 	add.w	sl, fp, r2
 800f61a:	f10a 0901 	add.w	r9, sl, #1
 800f61e:	464a      	mov	r2, r9
 800f620:	2a01      	cmp	r2, #1
 800f622:	bfb8      	it	lt
 800f624:	2201      	movlt	r2, #1
 800f626:	e7db      	b.n	800f5e0 <_dtoa_r+0x240>
 800f628:	2201      	movs	r2, #1
 800f62a:	e7f2      	b.n	800f612 <_dtoa_r+0x272>
 800f62c:	2401      	movs	r4, #1
 800f62e:	2200      	movs	r2, #0
 800f630:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800f634:	f04f 3aff 	mov.w	sl, #4294967295
 800f638:	2100      	movs	r1, #0
 800f63a:	46d1      	mov	r9, sl
 800f63c:	2212      	movs	r2, #18
 800f63e:	9109      	str	r1, [sp, #36]	; 0x24
 800f640:	e7ce      	b.n	800f5e0 <_dtoa_r+0x240>
 800f642:	2201      	movs	r2, #1
 800f644:	9208      	str	r2, [sp, #32]
 800f646:	e7f5      	b.n	800f634 <_dtoa_r+0x294>
 800f648:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800f64c:	46d1      	mov	r9, sl
 800f64e:	4652      	mov	r2, sl
 800f650:	e7c6      	b.n	800f5e0 <_dtoa_r+0x240>
 800f652:	3101      	adds	r1, #1
 800f654:	6079      	str	r1, [r7, #4]
 800f656:	0040      	lsls	r0, r0, #1
 800f658:	e7c6      	b.n	800f5e8 <_dtoa_r+0x248>
 800f65a:	bf00      	nop
 800f65c:	f3af 8000 	nop.w
 800f660:	636f4361 	.word	0x636f4361
 800f664:	3fd287a7 	.word	0x3fd287a7
 800f668:	8b60c8b3 	.word	0x8b60c8b3
 800f66c:	3fc68a28 	.word	0x3fc68a28
 800f670:	509f79fb 	.word	0x509f79fb
 800f674:	3fd34413 	.word	0x3fd34413
 800f678:	080116a5 	.word	0x080116a5
 800f67c:	080116bc 	.word	0x080116bc
 800f680:	7ff00000 	.word	0x7ff00000
 800f684:	080116a1 	.word	0x080116a1
 800f688:	08011698 	.word	0x08011698
 800f68c:	08011675 	.word	0x08011675
 800f690:	08011818 	.word	0x08011818
 800f694:	0801171b 	.word	0x0801171b
 800f698:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800f69a:	9900      	ldr	r1, [sp, #0]
 800f69c:	6011      	str	r1, [r2, #0]
 800f69e:	f1b9 0f0e 	cmp.w	r9, #14
 800f6a2:	d872      	bhi.n	800f78a <_dtoa_r+0x3ea>
 800f6a4:	2c00      	cmp	r4, #0
 800f6a6:	d070      	beq.n	800f78a <_dtoa_r+0x3ea>
 800f6a8:	f1bb 0f00 	cmp.w	fp, #0
 800f6ac:	f340 80a6 	ble.w	800f7fc <_dtoa_r+0x45c>
 800f6b0:	49ca      	ldr	r1, [pc, #808]	; (800f9dc <_dtoa_r+0x63c>)
 800f6b2:	f00b 020f 	and.w	r2, fp, #15
 800f6b6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800f6ba:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800f6be:	ed92 7b00 	vldr	d7, [r2]
 800f6c2:	ea4f 112b 	mov.w	r1, fp, asr #4
 800f6c6:	f000 808d 	beq.w	800f7e4 <_dtoa_r+0x444>
 800f6ca:	4ac5      	ldr	r2, [pc, #788]	; (800f9e0 <_dtoa_r+0x640>)
 800f6cc:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800f6d0:	ed92 6b08 	vldr	d6, [r2, #32]
 800f6d4:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800f6d8:	ed8d 6b02 	vstr	d6, [sp, #8]
 800f6dc:	f001 010f 	and.w	r1, r1, #15
 800f6e0:	2203      	movs	r2, #3
 800f6e2:	48bf      	ldr	r0, [pc, #764]	; (800f9e0 <_dtoa_r+0x640>)
 800f6e4:	2900      	cmp	r1, #0
 800f6e6:	d17f      	bne.n	800f7e8 <_dtoa_r+0x448>
 800f6e8:	ed9d 6b02 	vldr	d6, [sp, #8]
 800f6ec:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800f6f0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f6f4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800f6f6:	2900      	cmp	r1, #0
 800f6f8:	f000 80b2 	beq.w	800f860 <_dtoa_r+0x4c0>
 800f6fc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800f700:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f704:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800f708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f70c:	f140 80a8 	bpl.w	800f860 <_dtoa_r+0x4c0>
 800f710:	f1b9 0f00 	cmp.w	r9, #0
 800f714:	f000 80a4 	beq.w	800f860 <_dtoa_r+0x4c0>
 800f718:	f1ba 0f00 	cmp.w	sl, #0
 800f71c:	dd31      	ble.n	800f782 <_dtoa_r+0x3e2>
 800f71e:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800f722:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f726:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f72a:	f10b 37ff 	add.w	r7, fp, #4294967295
 800f72e:	3201      	adds	r2, #1
 800f730:	4650      	mov	r0, sl
 800f732:	ed9d 6b02 	vldr	d6, [sp, #8]
 800f736:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800f73a:	ee07 2a90 	vmov	s15, r2
 800f73e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800f742:	eea7 5b06 	vfma.f64	d5, d7, d6
 800f746:	ed8d 5b02 	vstr	d5, [sp, #8]
 800f74a:	9c03      	ldr	r4, [sp, #12]
 800f74c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800f750:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800f754:	2800      	cmp	r0, #0
 800f756:	f040 8086 	bne.w	800f866 <_dtoa_r+0x4c6>
 800f75a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800f75e:	ee36 6b47 	vsub.f64	d6, d6, d7
 800f762:	ec42 1b17 	vmov	d7, r1, r2
 800f766:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f76a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f76e:	f300 8272 	bgt.w	800fc56 <_dtoa_r+0x8b6>
 800f772:	eeb1 7b47 	vneg.f64	d7, d7
 800f776:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f77a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f77e:	f100 8267 	bmi.w	800fc50 <_dtoa_r+0x8b0>
 800f782:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 800f786:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800f78a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f78c:	2a00      	cmp	r2, #0
 800f78e:	f2c0 8129 	blt.w	800f9e4 <_dtoa_r+0x644>
 800f792:	f1bb 0f0e 	cmp.w	fp, #14
 800f796:	f300 8125 	bgt.w	800f9e4 <_dtoa_r+0x644>
 800f79a:	4b90      	ldr	r3, [pc, #576]	; (800f9dc <_dtoa_r+0x63c>)
 800f79c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f7a0:	ed93 6b00 	vldr	d6, [r3]
 800f7a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	f280 80c3 	bge.w	800f932 <_dtoa_r+0x592>
 800f7ac:	f1b9 0f00 	cmp.w	r9, #0
 800f7b0:	f300 80bf 	bgt.w	800f932 <_dtoa_r+0x592>
 800f7b4:	f040 824c 	bne.w	800fc50 <_dtoa_r+0x8b0>
 800f7b8:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800f7bc:	ee26 6b07 	vmul.f64	d6, d6, d7
 800f7c0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f7c4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f7c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7cc:	464c      	mov	r4, r9
 800f7ce:	464f      	mov	r7, r9
 800f7d0:	f280 8222 	bge.w	800fc18 <_dtoa_r+0x878>
 800f7d4:	f8dd 8000 	ldr.w	r8, [sp]
 800f7d8:	2331      	movs	r3, #49	; 0x31
 800f7da:	f808 3b01 	strb.w	r3, [r8], #1
 800f7de:	f10b 0b01 	add.w	fp, fp, #1
 800f7e2:	e21e      	b.n	800fc22 <_dtoa_r+0x882>
 800f7e4:	2202      	movs	r2, #2
 800f7e6:	e77c      	b.n	800f6e2 <_dtoa_r+0x342>
 800f7e8:	07cc      	lsls	r4, r1, #31
 800f7ea:	d504      	bpl.n	800f7f6 <_dtoa_r+0x456>
 800f7ec:	ed90 6b00 	vldr	d6, [r0]
 800f7f0:	3201      	adds	r2, #1
 800f7f2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f7f6:	1049      	asrs	r1, r1, #1
 800f7f8:	3008      	adds	r0, #8
 800f7fa:	e773      	b.n	800f6e4 <_dtoa_r+0x344>
 800f7fc:	d02e      	beq.n	800f85c <_dtoa_r+0x4bc>
 800f7fe:	f1cb 0100 	rsb	r1, fp, #0
 800f802:	4a76      	ldr	r2, [pc, #472]	; (800f9dc <_dtoa_r+0x63c>)
 800f804:	f001 000f 	and.w	r0, r1, #15
 800f808:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800f80c:	ed92 7b00 	vldr	d7, [r2]
 800f810:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800f814:	ee26 7b07 	vmul.f64	d7, d6, d7
 800f818:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800f81c:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 800f820:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800f824:	486e      	ldr	r0, [pc, #440]	; (800f9e0 <_dtoa_r+0x640>)
 800f826:	1109      	asrs	r1, r1, #4
 800f828:	2400      	movs	r4, #0
 800f82a:	2202      	movs	r2, #2
 800f82c:	b939      	cbnz	r1, 800f83e <_dtoa_r+0x49e>
 800f82e:	2c00      	cmp	r4, #0
 800f830:	f43f af60 	beq.w	800f6f4 <_dtoa_r+0x354>
 800f834:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f838:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f83c:	e75a      	b.n	800f6f4 <_dtoa_r+0x354>
 800f83e:	07cf      	lsls	r7, r1, #31
 800f840:	d509      	bpl.n	800f856 <_dtoa_r+0x4b6>
 800f842:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800f846:	ed90 7b00 	vldr	d7, [r0]
 800f84a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800f84e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800f852:	3201      	adds	r2, #1
 800f854:	2401      	movs	r4, #1
 800f856:	1049      	asrs	r1, r1, #1
 800f858:	3008      	adds	r0, #8
 800f85a:	e7e7      	b.n	800f82c <_dtoa_r+0x48c>
 800f85c:	2202      	movs	r2, #2
 800f85e:	e749      	b.n	800f6f4 <_dtoa_r+0x354>
 800f860:	465f      	mov	r7, fp
 800f862:	4648      	mov	r0, r9
 800f864:	e765      	b.n	800f732 <_dtoa_r+0x392>
 800f866:	ec42 1b17 	vmov	d7, r1, r2
 800f86a:	4a5c      	ldr	r2, [pc, #368]	; (800f9dc <_dtoa_r+0x63c>)
 800f86c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800f870:	ed12 4b02 	vldr	d4, [r2, #-8]
 800f874:	9a00      	ldr	r2, [sp, #0]
 800f876:	1814      	adds	r4, r2, r0
 800f878:	9a08      	ldr	r2, [sp, #32]
 800f87a:	b352      	cbz	r2, 800f8d2 <_dtoa_r+0x532>
 800f87c:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800f880:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800f884:	f8dd 8000 	ldr.w	r8, [sp]
 800f888:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800f88c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800f890:	ee35 7b47 	vsub.f64	d7, d5, d7
 800f894:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800f898:	ee14 2a90 	vmov	r2, s9
 800f89c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800f8a0:	3230      	adds	r2, #48	; 0x30
 800f8a2:	ee36 6b45 	vsub.f64	d6, d6, d5
 800f8a6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f8aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8ae:	f808 2b01 	strb.w	r2, [r8], #1
 800f8b2:	d439      	bmi.n	800f928 <_dtoa_r+0x588>
 800f8b4:	ee32 5b46 	vsub.f64	d5, d2, d6
 800f8b8:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800f8bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8c0:	d472      	bmi.n	800f9a8 <_dtoa_r+0x608>
 800f8c2:	45a0      	cmp	r8, r4
 800f8c4:	f43f af5d 	beq.w	800f782 <_dtoa_r+0x3e2>
 800f8c8:	ee27 7b03 	vmul.f64	d7, d7, d3
 800f8cc:	ee26 6b03 	vmul.f64	d6, d6, d3
 800f8d0:	e7e0      	b.n	800f894 <_dtoa_r+0x4f4>
 800f8d2:	f8dd 8000 	ldr.w	r8, [sp]
 800f8d6:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f8da:	4621      	mov	r1, r4
 800f8dc:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800f8e0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800f8e4:	ee14 2a90 	vmov	r2, s9
 800f8e8:	3230      	adds	r2, #48	; 0x30
 800f8ea:	f808 2b01 	strb.w	r2, [r8], #1
 800f8ee:	45a0      	cmp	r8, r4
 800f8f0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800f8f4:	ee36 6b45 	vsub.f64	d6, d6, d5
 800f8f8:	d118      	bne.n	800f92c <_dtoa_r+0x58c>
 800f8fa:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800f8fe:	ee37 4b05 	vadd.f64	d4, d7, d5
 800f902:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800f906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f90a:	dc4d      	bgt.n	800f9a8 <_dtoa_r+0x608>
 800f90c:	ee35 7b47 	vsub.f64	d7, d5, d7
 800f910:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f918:	f57f af33 	bpl.w	800f782 <_dtoa_r+0x3e2>
 800f91c:	4688      	mov	r8, r1
 800f91e:	3901      	subs	r1, #1
 800f920:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800f924:	2b30      	cmp	r3, #48	; 0x30
 800f926:	d0f9      	beq.n	800f91c <_dtoa_r+0x57c>
 800f928:	46bb      	mov	fp, r7
 800f92a:	e02a      	b.n	800f982 <_dtoa_r+0x5e2>
 800f92c:	ee26 6b03 	vmul.f64	d6, d6, d3
 800f930:	e7d6      	b.n	800f8e0 <_dtoa_r+0x540>
 800f932:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f936:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800f93a:	f8dd 8000 	ldr.w	r8, [sp]
 800f93e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800f942:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800f946:	ee15 3a10 	vmov	r3, s10
 800f94a:	3330      	adds	r3, #48	; 0x30
 800f94c:	f808 3b01 	strb.w	r3, [r8], #1
 800f950:	9b00      	ldr	r3, [sp, #0]
 800f952:	eba8 0303 	sub.w	r3, r8, r3
 800f956:	4599      	cmp	r9, r3
 800f958:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800f95c:	eea3 7b46 	vfms.f64	d7, d3, d6
 800f960:	d133      	bne.n	800f9ca <_dtoa_r+0x62a>
 800f962:	ee37 7b07 	vadd.f64	d7, d7, d7
 800f966:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800f96a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f96e:	dc1a      	bgt.n	800f9a6 <_dtoa_r+0x606>
 800f970:	eeb4 7b46 	vcmp.f64	d7, d6
 800f974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f978:	d103      	bne.n	800f982 <_dtoa_r+0x5e2>
 800f97a:	ee15 3a10 	vmov	r3, s10
 800f97e:	07d9      	lsls	r1, r3, #31
 800f980:	d411      	bmi.n	800f9a6 <_dtoa_r+0x606>
 800f982:	4629      	mov	r1, r5
 800f984:	4630      	mov	r0, r6
 800f986:	f000 fcf9 	bl	801037c <_Bfree>
 800f98a:	2300      	movs	r3, #0
 800f98c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f98e:	f888 3000 	strb.w	r3, [r8]
 800f992:	f10b 0301 	add.w	r3, fp, #1
 800f996:	6013      	str	r3, [r2, #0]
 800f998:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	f43f ad4d 	beq.w	800f43a <_dtoa_r+0x9a>
 800f9a0:	f8c3 8000 	str.w	r8, [r3]
 800f9a4:	e549      	b.n	800f43a <_dtoa_r+0x9a>
 800f9a6:	465f      	mov	r7, fp
 800f9a8:	4643      	mov	r3, r8
 800f9aa:	4698      	mov	r8, r3
 800f9ac:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f9b0:	2a39      	cmp	r2, #57	; 0x39
 800f9b2:	d106      	bne.n	800f9c2 <_dtoa_r+0x622>
 800f9b4:	9a00      	ldr	r2, [sp, #0]
 800f9b6:	429a      	cmp	r2, r3
 800f9b8:	d1f7      	bne.n	800f9aa <_dtoa_r+0x60a>
 800f9ba:	9900      	ldr	r1, [sp, #0]
 800f9bc:	2230      	movs	r2, #48	; 0x30
 800f9be:	3701      	adds	r7, #1
 800f9c0:	700a      	strb	r2, [r1, #0]
 800f9c2:	781a      	ldrb	r2, [r3, #0]
 800f9c4:	3201      	adds	r2, #1
 800f9c6:	701a      	strb	r2, [r3, #0]
 800f9c8:	e7ae      	b.n	800f928 <_dtoa_r+0x588>
 800f9ca:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f9ce:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f9d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9d6:	d1b2      	bne.n	800f93e <_dtoa_r+0x59e>
 800f9d8:	e7d3      	b.n	800f982 <_dtoa_r+0x5e2>
 800f9da:	bf00      	nop
 800f9dc:	08011818 	.word	0x08011818
 800f9e0:	080117f0 	.word	0x080117f0
 800f9e4:	9908      	ldr	r1, [sp, #32]
 800f9e6:	2900      	cmp	r1, #0
 800f9e8:	f000 80d1 	beq.w	800fb8e <_dtoa_r+0x7ee>
 800f9ec:	9907      	ldr	r1, [sp, #28]
 800f9ee:	2901      	cmp	r1, #1
 800f9f0:	f300 80b4 	bgt.w	800fb5c <_dtoa_r+0x7bc>
 800f9f4:	9911      	ldr	r1, [sp, #68]	; 0x44
 800f9f6:	2900      	cmp	r1, #0
 800f9f8:	f000 80ac 	beq.w	800fb54 <_dtoa_r+0x7b4>
 800f9fc:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800fa00:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800fa04:	461c      	mov	r4, r3
 800fa06:	930a      	str	r3, [sp, #40]	; 0x28
 800fa08:	9b05      	ldr	r3, [sp, #20]
 800fa0a:	4413      	add	r3, r2
 800fa0c:	9305      	str	r3, [sp, #20]
 800fa0e:	9b06      	ldr	r3, [sp, #24]
 800fa10:	2101      	movs	r1, #1
 800fa12:	4413      	add	r3, r2
 800fa14:	4630      	mov	r0, r6
 800fa16:	9306      	str	r3, [sp, #24]
 800fa18:	f000 fd6c 	bl	80104f4 <__i2b>
 800fa1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fa1e:	4607      	mov	r7, r0
 800fa20:	f1b8 0f00 	cmp.w	r8, #0
 800fa24:	dd0d      	ble.n	800fa42 <_dtoa_r+0x6a2>
 800fa26:	9a06      	ldr	r2, [sp, #24]
 800fa28:	2a00      	cmp	r2, #0
 800fa2a:	dd0a      	ble.n	800fa42 <_dtoa_r+0x6a2>
 800fa2c:	4542      	cmp	r2, r8
 800fa2e:	9905      	ldr	r1, [sp, #20]
 800fa30:	bfa8      	it	ge
 800fa32:	4642      	movge	r2, r8
 800fa34:	1a89      	subs	r1, r1, r2
 800fa36:	9105      	str	r1, [sp, #20]
 800fa38:	9906      	ldr	r1, [sp, #24]
 800fa3a:	eba8 0802 	sub.w	r8, r8, r2
 800fa3e:	1a8a      	subs	r2, r1, r2
 800fa40:	9206      	str	r2, [sp, #24]
 800fa42:	b303      	cbz	r3, 800fa86 <_dtoa_r+0x6e6>
 800fa44:	9a08      	ldr	r2, [sp, #32]
 800fa46:	2a00      	cmp	r2, #0
 800fa48:	f000 80a6 	beq.w	800fb98 <_dtoa_r+0x7f8>
 800fa4c:	2c00      	cmp	r4, #0
 800fa4e:	dd13      	ble.n	800fa78 <_dtoa_r+0x6d8>
 800fa50:	4639      	mov	r1, r7
 800fa52:	4622      	mov	r2, r4
 800fa54:	4630      	mov	r0, r6
 800fa56:	930c      	str	r3, [sp, #48]	; 0x30
 800fa58:	f000 fe08 	bl	801066c <__pow5mult>
 800fa5c:	462a      	mov	r2, r5
 800fa5e:	4601      	mov	r1, r0
 800fa60:	4607      	mov	r7, r0
 800fa62:	4630      	mov	r0, r6
 800fa64:	f000 fd5c 	bl	8010520 <__multiply>
 800fa68:	4629      	mov	r1, r5
 800fa6a:	900a      	str	r0, [sp, #40]	; 0x28
 800fa6c:	4630      	mov	r0, r6
 800fa6e:	f000 fc85 	bl	801037c <_Bfree>
 800fa72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fa74:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fa76:	4615      	mov	r5, r2
 800fa78:	1b1a      	subs	r2, r3, r4
 800fa7a:	d004      	beq.n	800fa86 <_dtoa_r+0x6e6>
 800fa7c:	4629      	mov	r1, r5
 800fa7e:	4630      	mov	r0, r6
 800fa80:	f000 fdf4 	bl	801066c <__pow5mult>
 800fa84:	4605      	mov	r5, r0
 800fa86:	2101      	movs	r1, #1
 800fa88:	4630      	mov	r0, r6
 800fa8a:	f000 fd33 	bl	80104f4 <__i2b>
 800fa8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	4604      	mov	r4, r0
 800fa94:	f340 8082 	ble.w	800fb9c <_dtoa_r+0x7fc>
 800fa98:	461a      	mov	r2, r3
 800fa9a:	4601      	mov	r1, r0
 800fa9c:	4630      	mov	r0, r6
 800fa9e:	f000 fde5 	bl	801066c <__pow5mult>
 800faa2:	9b07      	ldr	r3, [sp, #28]
 800faa4:	2b01      	cmp	r3, #1
 800faa6:	4604      	mov	r4, r0
 800faa8:	dd7b      	ble.n	800fba2 <_dtoa_r+0x802>
 800faaa:	2300      	movs	r3, #0
 800faac:	930a      	str	r3, [sp, #40]	; 0x28
 800faae:	6922      	ldr	r2, [r4, #16]
 800fab0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800fab4:	6910      	ldr	r0, [r2, #16]
 800fab6:	f000 fccd 	bl	8010454 <__hi0bits>
 800faba:	f1c0 0020 	rsb	r0, r0, #32
 800fabe:	9b06      	ldr	r3, [sp, #24]
 800fac0:	4418      	add	r0, r3
 800fac2:	f010 001f 	ands.w	r0, r0, #31
 800fac6:	f000 808d 	beq.w	800fbe4 <_dtoa_r+0x844>
 800faca:	f1c0 0220 	rsb	r2, r0, #32
 800face:	2a04      	cmp	r2, #4
 800fad0:	f340 8086 	ble.w	800fbe0 <_dtoa_r+0x840>
 800fad4:	f1c0 001c 	rsb	r0, r0, #28
 800fad8:	9b05      	ldr	r3, [sp, #20]
 800fada:	4403      	add	r3, r0
 800fadc:	9305      	str	r3, [sp, #20]
 800fade:	9b06      	ldr	r3, [sp, #24]
 800fae0:	4403      	add	r3, r0
 800fae2:	4480      	add	r8, r0
 800fae4:	9306      	str	r3, [sp, #24]
 800fae6:	9b05      	ldr	r3, [sp, #20]
 800fae8:	2b00      	cmp	r3, #0
 800faea:	dd05      	ble.n	800faf8 <_dtoa_r+0x758>
 800faec:	4629      	mov	r1, r5
 800faee:	461a      	mov	r2, r3
 800faf0:	4630      	mov	r0, r6
 800faf2:	f000 fe15 	bl	8010720 <__lshift>
 800faf6:	4605      	mov	r5, r0
 800faf8:	9b06      	ldr	r3, [sp, #24]
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	dd05      	ble.n	800fb0a <_dtoa_r+0x76a>
 800fafe:	4621      	mov	r1, r4
 800fb00:	461a      	mov	r2, r3
 800fb02:	4630      	mov	r0, r6
 800fb04:	f000 fe0c 	bl	8010720 <__lshift>
 800fb08:	4604      	mov	r4, r0
 800fb0a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d06b      	beq.n	800fbe8 <_dtoa_r+0x848>
 800fb10:	4621      	mov	r1, r4
 800fb12:	4628      	mov	r0, r5
 800fb14:	f000 fe70 	bl	80107f8 <__mcmp>
 800fb18:	2800      	cmp	r0, #0
 800fb1a:	da65      	bge.n	800fbe8 <_dtoa_r+0x848>
 800fb1c:	2300      	movs	r3, #0
 800fb1e:	4629      	mov	r1, r5
 800fb20:	220a      	movs	r2, #10
 800fb22:	4630      	mov	r0, r6
 800fb24:	f000 fc4c 	bl	80103c0 <__multadd>
 800fb28:	9b08      	ldr	r3, [sp, #32]
 800fb2a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800fb2e:	4605      	mov	r5, r0
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	f000 8192 	beq.w	800fe5a <_dtoa_r+0xaba>
 800fb36:	4639      	mov	r1, r7
 800fb38:	2300      	movs	r3, #0
 800fb3a:	220a      	movs	r2, #10
 800fb3c:	4630      	mov	r0, r6
 800fb3e:	f000 fc3f 	bl	80103c0 <__multadd>
 800fb42:	f1ba 0f00 	cmp.w	sl, #0
 800fb46:	4607      	mov	r7, r0
 800fb48:	f300 808e 	bgt.w	800fc68 <_dtoa_r+0x8c8>
 800fb4c:	9b07      	ldr	r3, [sp, #28]
 800fb4e:	2b02      	cmp	r3, #2
 800fb50:	dc51      	bgt.n	800fbf6 <_dtoa_r+0x856>
 800fb52:	e089      	b.n	800fc68 <_dtoa_r+0x8c8>
 800fb54:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800fb56:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800fb5a:	e751      	b.n	800fa00 <_dtoa_r+0x660>
 800fb5c:	f109 34ff 	add.w	r4, r9, #4294967295
 800fb60:	42a3      	cmp	r3, r4
 800fb62:	bfbf      	itttt	lt
 800fb64:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800fb66:	1ae3      	sublt	r3, r4, r3
 800fb68:	18d2      	addlt	r2, r2, r3
 800fb6a:	4613      	movlt	r3, r2
 800fb6c:	bfb7      	itett	lt
 800fb6e:	930e      	strlt	r3, [sp, #56]	; 0x38
 800fb70:	1b1c      	subge	r4, r3, r4
 800fb72:	4623      	movlt	r3, r4
 800fb74:	2400      	movlt	r4, #0
 800fb76:	f1b9 0f00 	cmp.w	r9, #0
 800fb7a:	bfb5      	itete	lt
 800fb7c:	9a05      	ldrlt	r2, [sp, #20]
 800fb7e:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 800fb82:	eba2 0809 	sublt.w	r8, r2, r9
 800fb86:	464a      	movge	r2, r9
 800fb88:	bfb8      	it	lt
 800fb8a:	2200      	movlt	r2, #0
 800fb8c:	e73b      	b.n	800fa06 <_dtoa_r+0x666>
 800fb8e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800fb92:	9f08      	ldr	r7, [sp, #32]
 800fb94:	461c      	mov	r4, r3
 800fb96:	e743      	b.n	800fa20 <_dtoa_r+0x680>
 800fb98:	461a      	mov	r2, r3
 800fb9a:	e76f      	b.n	800fa7c <_dtoa_r+0x6dc>
 800fb9c:	9b07      	ldr	r3, [sp, #28]
 800fb9e:	2b01      	cmp	r3, #1
 800fba0:	dc18      	bgt.n	800fbd4 <_dtoa_r+0x834>
 800fba2:	9b02      	ldr	r3, [sp, #8]
 800fba4:	b9b3      	cbnz	r3, 800fbd4 <_dtoa_r+0x834>
 800fba6:	9b03      	ldr	r3, [sp, #12]
 800fba8:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800fbac:	b9a2      	cbnz	r2, 800fbd8 <_dtoa_r+0x838>
 800fbae:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800fbb2:	0d12      	lsrs	r2, r2, #20
 800fbb4:	0512      	lsls	r2, r2, #20
 800fbb6:	b18a      	cbz	r2, 800fbdc <_dtoa_r+0x83c>
 800fbb8:	9b05      	ldr	r3, [sp, #20]
 800fbba:	3301      	adds	r3, #1
 800fbbc:	9305      	str	r3, [sp, #20]
 800fbbe:	9b06      	ldr	r3, [sp, #24]
 800fbc0:	3301      	adds	r3, #1
 800fbc2:	9306      	str	r3, [sp, #24]
 800fbc4:	2301      	movs	r3, #1
 800fbc6:	930a      	str	r3, [sp, #40]	; 0x28
 800fbc8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	f47f af6f 	bne.w	800faae <_dtoa_r+0x70e>
 800fbd0:	2001      	movs	r0, #1
 800fbd2:	e774      	b.n	800fabe <_dtoa_r+0x71e>
 800fbd4:	2300      	movs	r3, #0
 800fbd6:	e7f6      	b.n	800fbc6 <_dtoa_r+0x826>
 800fbd8:	9b02      	ldr	r3, [sp, #8]
 800fbda:	e7f4      	b.n	800fbc6 <_dtoa_r+0x826>
 800fbdc:	920a      	str	r2, [sp, #40]	; 0x28
 800fbde:	e7f3      	b.n	800fbc8 <_dtoa_r+0x828>
 800fbe0:	d081      	beq.n	800fae6 <_dtoa_r+0x746>
 800fbe2:	4610      	mov	r0, r2
 800fbe4:	301c      	adds	r0, #28
 800fbe6:	e777      	b.n	800fad8 <_dtoa_r+0x738>
 800fbe8:	f1b9 0f00 	cmp.w	r9, #0
 800fbec:	dc37      	bgt.n	800fc5e <_dtoa_r+0x8be>
 800fbee:	9b07      	ldr	r3, [sp, #28]
 800fbf0:	2b02      	cmp	r3, #2
 800fbf2:	dd34      	ble.n	800fc5e <_dtoa_r+0x8be>
 800fbf4:	46ca      	mov	sl, r9
 800fbf6:	f1ba 0f00 	cmp.w	sl, #0
 800fbfa:	d10d      	bne.n	800fc18 <_dtoa_r+0x878>
 800fbfc:	4621      	mov	r1, r4
 800fbfe:	4653      	mov	r3, sl
 800fc00:	2205      	movs	r2, #5
 800fc02:	4630      	mov	r0, r6
 800fc04:	f000 fbdc 	bl	80103c0 <__multadd>
 800fc08:	4601      	mov	r1, r0
 800fc0a:	4604      	mov	r4, r0
 800fc0c:	4628      	mov	r0, r5
 800fc0e:	f000 fdf3 	bl	80107f8 <__mcmp>
 800fc12:	2800      	cmp	r0, #0
 800fc14:	f73f adde 	bgt.w	800f7d4 <_dtoa_r+0x434>
 800fc18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fc1a:	f8dd 8000 	ldr.w	r8, [sp]
 800fc1e:	ea6f 0b03 	mvn.w	fp, r3
 800fc22:	f04f 0900 	mov.w	r9, #0
 800fc26:	4621      	mov	r1, r4
 800fc28:	4630      	mov	r0, r6
 800fc2a:	f000 fba7 	bl	801037c <_Bfree>
 800fc2e:	2f00      	cmp	r7, #0
 800fc30:	f43f aea7 	beq.w	800f982 <_dtoa_r+0x5e2>
 800fc34:	f1b9 0f00 	cmp.w	r9, #0
 800fc38:	d005      	beq.n	800fc46 <_dtoa_r+0x8a6>
 800fc3a:	45b9      	cmp	r9, r7
 800fc3c:	d003      	beq.n	800fc46 <_dtoa_r+0x8a6>
 800fc3e:	4649      	mov	r1, r9
 800fc40:	4630      	mov	r0, r6
 800fc42:	f000 fb9b 	bl	801037c <_Bfree>
 800fc46:	4639      	mov	r1, r7
 800fc48:	4630      	mov	r0, r6
 800fc4a:	f000 fb97 	bl	801037c <_Bfree>
 800fc4e:	e698      	b.n	800f982 <_dtoa_r+0x5e2>
 800fc50:	2400      	movs	r4, #0
 800fc52:	4627      	mov	r7, r4
 800fc54:	e7e0      	b.n	800fc18 <_dtoa_r+0x878>
 800fc56:	46bb      	mov	fp, r7
 800fc58:	4604      	mov	r4, r0
 800fc5a:	4607      	mov	r7, r0
 800fc5c:	e5ba      	b.n	800f7d4 <_dtoa_r+0x434>
 800fc5e:	9b08      	ldr	r3, [sp, #32]
 800fc60:	46ca      	mov	sl, r9
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	f000 8100 	beq.w	800fe68 <_dtoa_r+0xac8>
 800fc68:	f1b8 0f00 	cmp.w	r8, #0
 800fc6c:	dd05      	ble.n	800fc7a <_dtoa_r+0x8da>
 800fc6e:	4639      	mov	r1, r7
 800fc70:	4642      	mov	r2, r8
 800fc72:	4630      	mov	r0, r6
 800fc74:	f000 fd54 	bl	8010720 <__lshift>
 800fc78:	4607      	mov	r7, r0
 800fc7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	d05d      	beq.n	800fd3c <_dtoa_r+0x99c>
 800fc80:	6879      	ldr	r1, [r7, #4]
 800fc82:	4630      	mov	r0, r6
 800fc84:	f000 fb3a 	bl	80102fc <_Balloc>
 800fc88:	4680      	mov	r8, r0
 800fc8a:	b928      	cbnz	r0, 800fc98 <_dtoa_r+0x8f8>
 800fc8c:	4b82      	ldr	r3, [pc, #520]	; (800fe98 <_dtoa_r+0xaf8>)
 800fc8e:	4602      	mov	r2, r0
 800fc90:	f240 21ea 	movw	r1, #746	; 0x2ea
 800fc94:	f7ff bb9a 	b.w	800f3cc <_dtoa_r+0x2c>
 800fc98:	693a      	ldr	r2, [r7, #16]
 800fc9a:	3202      	adds	r2, #2
 800fc9c:	0092      	lsls	r2, r2, #2
 800fc9e:	f107 010c 	add.w	r1, r7, #12
 800fca2:	300c      	adds	r0, #12
 800fca4:	f7fe fdb6 	bl	800e814 <memcpy>
 800fca8:	2201      	movs	r2, #1
 800fcaa:	4641      	mov	r1, r8
 800fcac:	4630      	mov	r0, r6
 800fcae:	f000 fd37 	bl	8010720 <__lshift>
 800fcb2:	9b00      	ldr	r3, [sp, #0]
 800fcb4:	3301      	adds	r3, #1
 800fcb6:	9305      	str	r3, [sp, #20]
 800fcb8:	9b00      	ldr	r3, [sp, #0]
 800fcba:	4453      	add	r3, sl
 800fcbc:	9309      	str	r3, [sp, #36]	; 0x24
 800fcbe:	9b02      	ldr	r3, [sp, #8]
 800fcc0:	f003 0301 	and.w	r3, r3, #1
 800fcc4:	46b9      	mov	r9, r7
 800fcc6:	9308      	str	r3, [sp, #32]
 800fcc8:	4607      	mov	r7, r0
 800fcca:	9b05      	ldr	r3, [sp, #20]
 800fccc:	4621      	mov	r1, r4
 800fcce:	3b01      	subs	r3, #1
 800fcd0:	4628      	mov	r0, r5
 800fcd2:	9302      	str	r3, [sp, #8]
 800fcd4:	f7ff fad6 	bl	800f284 <quorem>
 800fcd8:	4603      	mov	r3, r0
 800fcda:	3330      	adds	r3, #48	; 0x30
 800fcdc:	9006      	str	r0, [sp, #24]
 800fcde:	4649      	mov	r1, r9
 800fce0:	4628      	mov	r0, r5
 800fce2:	930a      	str	r3, [sp, #40]	; 0x28
 800fce4:	f000 fd88 	bl	80107f8 <__mcmp>
 800fce8:	463a      	mov	r2, r7
 800fcea:	4682      	mov	sl, r0
 800fcec:	4621      	mov	r1, r4
 800fcee:	4630      	mov	r0, r6
 800fcf0:	f000 fd9e 	bl	8010830 <__mdiff>
 800fcf4:	68c2      	ldr	r2, [r0, #12]
 800fcf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fcf8:	4680      	mov	r8, r0
 800fcfa:	bb0a      	cbnz	r2, 800fd40 <_dtoa_r+0x9a0>
 800fcfc:	4601      	mov	r1, r0
 800fcfe:	4628      	mov	r0, r5
 800fd00:	f000 fd7a 	bl	80107f8 <__mcmp>
 800fd04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fd06:	4602      	mov	r2, r0
 800fd08:	4641      	mov	r1, r8
 800fd0a:	4630      	mov	r0, r6
 800fd0c:	920e      	str	r2, [sp, #56]	; 0x38
 800fd0e:	930a      	str	r3, [sp, #40]	; 0x28
 800fd10:	f000 fb34 	bl	801037c <_Bfree>
 800fd14:	9b07      	ldr	r3, [sp, #28]
 800fd16:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fd18:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800fd1c:	ea43 0102 	orr.w	r1, r3, r2
 800fd20:	9b08      	ldr	r3, [sp, #32]
 800fd22:	430b      	orrs	r3, r1
 800fd24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fd26:	d10d      	bne.n	800fd44 <_dtoa_r+0x9a4>
 800fd28:	2b39      	cmp	r3, #57	; 0x39
 800fd2a:	d029      	beq.n	800fd80 <_dtoa_r+0x9e0>
 800fd2c:	f1ba 0f00 	cmp.w	sl, #0
 800fd30:	dd01      	ble.n	800fd36 <_dtoa_r+0x996>
 800fd32:	9b06      	ldr	r3, [sp, #24]
 800fd34:	3331      	adds	r3, #49	; 0x31
 800fd36:	9a02      	ldr	r2, [sp, #8]
 800fd38:	7013      	strb	r3, [r2, #0]
 800fd3a:	e774      	b.n	800fc26 <_dtoa_r+0x886>
 800fd3c:	4638      	mov	r0, r7
 800fd3e:	e7b8      	b.n	800fcb2 <_dtoa_r+0x912>
 800fd40:	2201      	movs	r2, #1
 800fd42:	e7e1      	b.n	800fd08 <_dtoa_r+0x968>
 800fd44:	f1ba 0f00 	cmp.w	sl, #0
 800fd48:	db06      	blt.n	800fd58 <_dtoa_r+0x9b8>
 800fd4a:	9907      	ldr	r1, [sp, #28]
 800fd4c:	ea41 0a0a 	orr.w	sl, r1, sl
 800fd50:	9908      	ldr	r1, [sp, #32]
 800fd52:	ea5a 0101 	orrs.w	r1, sl, r1
 800fd56:	d120      	bne.n	800fd9a <_dtoa_r+0x9fa>
 800fd58:	2a00      	cmp	r2, #0
 800fd5a:	ddec      	ble.n	800fd36 <_dtoa_r+0x996>
 800fd5c:	4629      	mov	r1, r5
 800fd5e:	2201      	movs	r2, #1
 800fd60:	4630      	mov	r0, r6
 800fd62:	9305      	str	r3, [sp, #20]
 800fd64:	f000 fcdc 	bl	8010720 <__lshift>
 800fd68:	4621      	mov	r1, r4
 800fd6a:	4605      	mov	r5, r0
 800fd6c:	f000 fd44 	bl	80107f8 <__mcmp>
 800fd70:	2800      	cmp	r0, #0
 800fd72:	9b05      	ldr	r3, [sp, #20]
 800fd74:	dc02      	bgt.n	800fd7c <_dtoa_r+0x9dc>
 800fd76:	d1de      	bne.n	800fd36 <_dtoa_r+0x996>
 800fd78:	07da      	lsls	r2, r3, #31
 800fd7a:	d5dc      	bpl.n	800fd36 <_dtoa_r+0x996>
 800fd7c:	2b39      	cmp	r3, #57	; 0x39
 800fd7e:	d1d8      	bne.n	800fd32 <_dtoa_r+0x992>
 800fd80:	9a02      	ldr	r2, [sp, #8]
 800fd82:	2339      	movs	r3, #57	; 0x39
 800fd84:	7013      	strb	r3, [r2, #0]
 800fd86:	4643      	mov	r3, r8
 800fd88:	4698      	mov	r8, r3
 800fd8a:	3b01      	subs	r3, #1
 800fd8c:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800fd90:	2a39      	cmp	r2, #57	; 0x39
 800fd92:	d051      	beq.n	800fe38 <_dtoa_r+0xa98>
 800fd94:	3201      	adds	r2, #1
 800fd96:	701a      	strb	r2, [r3, #0]
 800fd98:	e745      	b.n	800fc26 <_dtoa_r+0x886>
 800fd9a:	2a00      	cmp	r2, #0
 800fd9c:	dd03      	ble.n	800fda6 <_dtoa_r+0xa06>
 800fd9e:	2b39      	cmp	r3, #57	; 0x39
 800fda0:	d0ee      	beq.n	800fd80 <_dtoa_r+0x9e0>
 800fda2:	3301      	adds	r3, #1
 800fda4:	e7c7      	b.n	800fd36 <_dtoa_r+0x996>
 800fda6:	9a05      	ldr	r2, [sp, #20]
 800fda8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fdaa:	f802 3c01 	strb.w	r3, [r2, #-1]
 800fdae:	428a      	cmp	r2, r1
 800fdb0:	d02b      	beq.n	800fe0a <_dtoa_r+0xa6a>
 800fdb2:	4629      	mov	r1, r5
 800fdb4:	2300      	movs	r3, #0
 800fdb6:	220a      	movs	r2, #10
 800fdb8:	4630      	mov	r0, r6
 800fdba:	f000 fb01 	bl	80103c0 <__multadd>
 800fdbe:	45b9      	cmp	r9, r7
 800fdc0:	4605      	mov	r5, r0
 800fdc2:	f04f 0300 	mov.w	r3, #0
 800fdc6:	f04f 020a 	mov.w	r2, #10
 800fdca:	4649      	mov	r1, r9
 800fdcc:	4630      	mov	r0, r6
 800fdce:	d107      	bne.n	800fde0 <_dtoa_r+0xa40>
 800fdd0:	f000 faf6 	bl	80103c0 <__multadd>
 800fdd4:	4681      	mov	r9, r0
 800fdd6:	4607      	mov	r7, r0
 800fdd8:	9b05      	ldr	r3, [sp, #20]
 800fdda:	3301      	adds	r3, #1
 800fddc:	9305      	str	r3, [sp, #20]
 800fdde:	e774      	b.n	800fcca <_dtoa_r+0x92a>
 800fde0:	f000 faee 	bl	80103c0 <__multadd>
 800fde4:	4639      	mov	r1, r7
 800fde6:	4681      	mov	r9, r0
 800fde8:	2300      	movs	r3, #0
 800fdea:	220a      	movs	r2, #10
 800fdec:	4630      	mov	r0, r6
 800fdee:	f000 fae7 	bl	80103c0 <__multadd>
 800fdf2:	4607      	mov	r7, r0
 800fdf4:	e7f0      	b.n	800fdd8 <_dtoa_r+0xa38>
 800fdf6:	f1ba 0f00 	cmp.w	sl, #0
 800fdfa:	9a00      	ldr	r2, [sp, #0]
 800fdfc:	bfcc      	ite	gt
 800fdfe:	46d0      	movgt	r8, sl
 800fe00:	f04f 0801 	movle.w	r8, #1
 800fe04:	4490      	add	r8, r2
 800fe06:	f04f 0900 	mov.w	r9, #0
 800fe0a:	4629      	mov	r1, r5
 800fe0c:	2201      	movs	r2, #1
 800fe0e:	4630      	mov	r0, r6
 800fe10:	9302      	str	r3, [sp, #8]
 800fe12:	f000 fc85 	bl	8010720 <__lshift>
 800fe16:	4621      	mov	r1, r4
 800fe18:	4605      	mov	r5, r0
 800fe1a:	f000 fced 	bl	80107f8 <__mcmp>
 800fe1e:	2800      	cmp	r0, #0
 800fe20:	dcb1      	bgt.n	800fd86 <_dtoa_r+0x9e6>
 800fe22:	d102      	bne.n	800fe2a <_dtoa_r+0xa8a>
 800fe24:	9b02      	ldr	r3, [sp, #8]
 800fe26:	07db      	lsls	r3, r3, #31
 800fe28:	d4ad      	bmi.n	800fd86 <_dtoa_r+0x9e6>
 800fe2a:	4643      	mov	r3, r8
 800fe2c:	4698      	mov	r8, r3
 800fe2e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fe32:	2a30      	cmp	r2, #48	; 0x30
 800fe34:	d0fa      	beq.n	800fe2c <_dtoa_r+0xa8c>
 800fe36:	e6f6      	b.n	800fc26 <_dtoa_r+0x886>
 800fe38:	9a00      	ldr	r2, [sp, #0]
 800fe3a:	429a      	cmp	r2, r3
 800fe3c:	d1a4      	bne.n	800fd88 <_dtoa_r+0x9e8>
 800fe3e:	f10b 0b01 	add.w	fp, fp, #1
 800fe42:	2331      	movs	r3, #49	; 0x31
 800fe44:	e778      	b.n	800fd38 <_dtoa_r+0x998>
 800fe46:	4b15      	ldr	r3, [pc, #84]	; (800fe9c <_dtoa_r+0xafc>)
 800fe48:	f7ff bb12 	b.w	800f470 <_dtoa_r+0xd0>
 800fe4c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	f47f aaee 	bne.w	800f430 <_dtoa_r+0x90>
 800fe54:	4b12      	ldr	r3, [pc, #72]	; (800fea0 <_dtoa_r+0xb00>)
 800fe56:	f7ff bb0b 	b.w	800f470 <_dtoa_r+0xd0>
 800fe5a:	f1ba 0f00 	cmp.w	sl, #0
 800fe5e:	dc03      	bgt.n	800fe68 <_dtoa_r+0xac8>
 800fe60:	9b07      	ldr	r3, [sp, #28]
 800fe62:	2b02      	cmp	r3, #2
 800fe64:	f73f aec7 	bgt.w	800fbf6 <_dtoa_r+0x856>
 800fe68:	f8dd 8000 	ldr.w	r8, [sp]
 800fe6c:	4621      	mov	r1, r4
 800fe6e:	4628      	mov	r0, r5
 800fe70:	f7ff fa08 	bl	800f284 <quorem>
 800fe74:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800fe78:	f808 3b01 	strb.w	r3, [r8], #1
 800fe7c:	9a00      	ldr	r2, [sp, #0]
 800fe7e:	eba8 0202 	sub.w	r2, r8, r2
 800fe82:	4592      	cmp	sl, r2
 800fe84:	ddb7      	ble.n	800fdf6 <_dtoa_r+0xa56>
 800fe86:	4629      	mov	r1, r5
 800fe88:	2300      	movs	r3, #0
 800fe8a:	220a      	movs	r2, #10
 800fe8c:	4630      	mov	r0, r6
 800fe8e:	f000 fa97 	bl	80103c0 <__multadd>
 800fe92:	4605      	mov	r5, r0
 800fe94:	e7ea      	b.n	800fe6c <_dtoa_r+0xacc>
 800fe96:	bf00      	nop
 800fe98:	0801171b 	.word	0x0801171b
 800fe9c:	08011674 	.word	0x08011674
 800fea0:	08011698 	.word	0x08011698

0800fea4 <__sflush_r>:
 800fea4:	898a      	ldrh	r2, [r1, #12]
 800fea6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800feaa:	4605      	mov	r5, r0
 800feac:	0710      	lsls	r0, r2, #28
 800feae:	460c      	mov	r4, r1
 800feb0:	d458      	bmi.n	800ff64 <__sflush_r+0xc0>
 800feb2:	684b      	ldr	r3, [r1, #4]
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	dc05      	bgt.n	800fec4 <__sflush_r+0x20>
 800feb8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800feba:	2b00      	cmp	r3, #0
 800febc:	dc02      	bgt.n	800fec4 <__sflush_r+0x20>
 800febe:	2000      	movs	r0, #0
 800fec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fec4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fec6:	2e00      	cmp	r6, #0
 800fec8:	d0f9      	beq.n	800febe <__sflush_r+0x1a>
 800feca:	2300      	movs	r3, #0
 800fecc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fed0:	682f      	ldr	r7, [r5, #0]
 800fed2:	602b      	str	r3, [r5, #0]
 800fed4:	d032      	beq.n	800ff3c <__sflush_r+0x98>
 800fed6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fed8:	89a3      	ldrh	r3, [r4, #12]
 800feda:	075a      	lsls	r2, r3, #29
 800fedc:	d505      	bpl.n	800feea <__sflush_r+0x46>
 800fede:	6863      	ldr	r3, [r4, #4]
 800fee0:	1ac0      	subs	r0, r0, r3
 800fee2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fee4:	b10b      	cbz	r3, 800feea <__sflush_r+0x46>
 800fee6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fee8:	1ac0      	subs	r0, r0, r3
 800feea:	2300      	movs	r3, #0
 800feec:	4602      	mov	r2, r0
 800feee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fef0:	6a21      	ldr	r1, [r4, #32]
 800fef2:	4628      	mov	r0, r5
 800fef4:	47b0      	blx	r6
 800fef6:	1c43      	adds	r3, r0, #1
 800fef8:	89a3      	ldrh	r3, [r4, #12]
 800fefa:	d106      	bne.n	800ff0a <__sflush_r+0x66>
 800fefc:	6829      	ldr	r1, [r5, #0]
 800fefe:	291d      	cmp	r1, #29
 800ff00:	d82c      	bhi.n	800ff5c <__sflush_r+0xb8>
 800ff02:	4a2a      	ldr	r2, [pc, #168]	; (800ffac <__sflush_r+0x108>)
 800ff04:	40ca      	lsrs	r2, r1
 800ff06:	07d6      	lsls	r6, r2, #31
 800ff08:	d528      	bpl.n	800ff5c <__sflush_r+0xb8>
 800ff0a:	2200      	movs	r2, #0
 800ff0c:	6062      	str	r2, [r4, #4]
 800ff0e:	04d9      	lsls	r1, r3, #19
 800ff10:	6922      	ldr	r2, [r4, #16]
 800ff12:	6022      	str	r2, [r4, #0]
 800ff14:	d504      	bpl.n	800ff20 <__sflush_r+0x7c>
 800ff16:	1c42      	adds	r2, r0, #1
 800ff18:	d101      	bne.n	800ff1e <__sflush_r+0x7a>
 800ff1a:	682b      	ldr	r3, [r5, #0]
 800ff1c:	b903      	cbnz	r3, 800ff20 <__sflush_r+0x7c>
 800ff1e:	6560      	str	r0, [r4, #84]	; 0x54
 800ff20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ff22:	602f      	str	r7, [r5, #0]
 800ff24:	2900      	cmp	r1, #0
 800ff26:	d0ca      	beq.n	800febe <__sflush_r+0x1a>
 800ff28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ff2c:	4299      	cmp	r1, r3
 800ff2e:	d002      	beq.n	800ff36 <__sflush_r+0x92>
 800ff30:	4628      	mov	r0, r5
 800ff32:	f000 fd71 	bl	8010a18 <_free_r>
 800ff36:	2000      	movs	r0, #0
 800ff38:	6360      	str	r0, [r4, #52]	; 0x34
 800ff3a:	e7c1      	b.n	800fec0 <__sflush_r+0x1c>
 800ff3c:	6a21      	ldr	r1, [r4, #32]
 800ff3e:	2301      	movs	r3, #1
 800ff40:	4628      	mov	r0, r5
 800ff42:	47b0      	blx	r6
 800ff44:	1c41      	adds	r1, r0, #1
 800ff46:	d1c7      	bne.n	800fed8 <__sflush_r+0x34>
 800ff48:	682b      	ldr	r3, [r5, #0]
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	d0c4      	beq.n	800fed8 <__sflush_r+0x34>
 800ff4e:	2b1d      	cmp	r3, #29
 800ff50:	d001      	beq.n	800ff56 <__sflush_r+0xb2>
 800ff52:	2b16      	cmp	r3, #22
 800ff54:	d101      	bne.n	800ff5a <__sflush_r+0xb6>
 800ff56:	602f      	str	r7, [r5, #0]
 800ff58:	e7b1      	b.n	800febe <__sflush_r+0x1a>
 800ff5a:	89a3      	ldrh	r3, [r4, #12]
 800ff5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ff60:	81a3      	strh	r3, [r4, #12]
 800ff62:	e7ad      	b.n	800fec0 <__sflush_r+0x1c>
 800ff64:	690f      	ldr	r7, [r1, #16]
 800ff66:	2f00      	cmp	r7, #0
 800ff68:	d0a9      	beq.n	800febe <__sflush_r+0x1a>
 800ff6a:	0793      	lsls	r3, r2, #30
 800ff6c:	680e      	ldr	r6, [r1, #0]
 800ff6e:	bf08      	it	eq
 800ff70:	694b      	ldreq	r3, [r1, #20]
 800ff72:	600f      	str	r7, [r1, #0]
 800ff74:	bf18      	it	ne
 800ff76:	2300      	movne	r3, #0
 800ff78:	eba6 0807 	sub.w	r8, r6, r7
 800ff7c:	608b      	str	r3, [r1, #8]
 800ff7e:	f1b8 0f00 	cmp.w	r8, #0
 800ff82:	dd9c      	ble.n	800febe <__sflush_r+0x1a>
 800ff84:	6a21      	ldr	r1, [r4, #32]
 800ff86:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ff88:	4643      	mov	r3, r8
 800ff8a:	463a      	mov	r2, r7
 800ff8c:	4628      	mov	r0, r5
 800ff8e:	47b0      	blx	r6
 800ff90:	2800      	cmp	r0, #0
 800ff92:	dc06      	bgt.n	800ffa2 <__sflush_r+0xfe>
 800ff94:	89a3      	ldrh	r3, [r4, #12]
 800ff96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ff9a:	81a3      	strh	r3, [r4, #12]
 800ff9c:	f04f 30ff 	mov.w	r0, #4294967295
 800ffa0:	e78e      	b.n	800fec0 <__sflush_r+0x1c>
 800ffa2:	4407      	add	r7, r0
 800ffa4:	eba8 0800 	sub.w	r8, r8, r0
 800ffa8:	e7e9      	b.n	800ff7e <__sflush_r+0xda>
 800ffaa:	bf00      	nop
 800ffac:	20400001 	.word	0x20400001

0800ffb0 <_fflush_r>:
 800ffb0:	b538      	push	{r3, r4, r5, lr}
 800ffb2:	690b      	ldr	r3, [r1, #16]
 800ffb4:	4605      	mov	r5, r0
 800ffb6:	460c      	mov	r4, r1
 800ffb8:	b913      	cbnz	r3, 800ffc0 <_fflush_r+0x10>
 800ffba:	2500      	movs	r5, #0
 800ffbc:	4628      	mov	r0, r5
 800ffbe:	bd38      	pop	{r3, r4, r5, pc}
 800ffc0:	b118      	cbz	r0, 800ffca <_fflush_r+0x1a>
 800ffc2:	6983      	ldr	r3, [r0, #24]
 800ffc4:	b90b      	cbnz	r3, 800ffca <_fflush_r+0x1a>
 800ffc6:	f000 f887 	bl	80100d8 <__sinit>
 800ffca:	4b14      	ldr	r3, [pc, #80]	; (801001c <_fflush_r+0x6c>)
 800ffcc:	429c      	cmp	r4, r3
 800ffce:	d11b      	bne.n	8010008 <_fflush_r+0x58>
 800ffd0:	686c      	ldr	r4, [r5, #4]
 800ffd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d0ef      	beq.n	800ffba <_fflush_r+0xa>
 800ffda:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ffdc:	07d0      	lsls	r0, r2, #31
 800ffde:	d404      	bmi.n	800ffea <_fflush_r+0x3a>
 800ffe0:	0599      	lsls	r1, r3, #22
 800ffe2:	d402      	bmi.n	800ffea <_fflush_r+0x3a>
 800ffe4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ffe6:	f000 f91a 	bl	801021e <__retarget_lock_acquire_recursive>
 800ffea:	4628      	mov	r0, r5
 800ffec:	4621      	mov	r1, r4
 800ffee:	f7ff ff59 	bl	800fea4 <__sflush_r>
 800fff2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fff4:	07da      	lsls	r2, r3, #31
 800fff6:	4605      	mov	r5, r0
 800fff8:	d4e0      	bmi.n	800ffbc <_fflush_r+0xc>
 800fffa:	89a3      	ldrh	r3, [r4, #12]
 800fffc:	059b      	lsls	r3, r3, #22
 800fffe:	d4dd      	bmi.n	800ffbc <_fflush_r+0xc>
 8010000:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010002:	f000 f90d 	bl	8010220 <__retarget_lock_release_recursive>
 8010006:	e7d9      	b.n	800ffbc <_fflush_r+0xc>
 8010008:	4b05      	ldr	r3, [pc, #20]	; (8010020 <_fflush_r+0x70>)
 801000a:	429c      	cmp	r4, r3
 801000c:	d101      	bne.n	8010012 <_fflush_r+0x62>
 801000e:	68ac      	ldr	r4, [r5, #8]
 8010010:	e7df      	b.n	800ffd2 <_fflush_r+0x22>
 8010012:	4b04      	ldr	r3, [pc, #16]	; (8010024 <_fflush_r+0x74>)
 8010014:	429c      	cmp	r4, r3
 8010016:	bf08      	it	eq
 8010018:	68ec      	ldreq	r4, [r5, #12]
 801001a:	e7da      	b.n	800ffd2 <_fflush_r+0x22>
 801001c:	0801174c 	.word	0x0801174c
 8010020:	0801176c 	.word	0x0801176c
 8010024:	0801172c 	.word	0x0801172c

08010028 <std>:
 8010028:	2300      	movs	r3, #0
 801002a:	b510      	push	{r4, lr}
 801002c:	4604      	mov	r4, r0
 801002e:	e9c0 3300 	strd	r3, r3, [r0]
 8010032:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010036:	6083      	str	r3, [r0, #8]
 8010038:	8181      	strh	r1, [r0, #12]
 801003a:	6643      	str	r3, [r0, #100]	; 0x64
 801003c:	81c2      	strh	r2, [r0, #14]
 801003e:	6183      	str	r3, [r0, #24]
 8010040:	4619      	mov	r1, r3
 8010042:	2208      	movs	r2, #8
 8010044:	305c      	adds	r0, #92	; 0x5c
 8010046:	f7fe fbf3 	bl	800e830 <memset>
 801004a:	4b05      	ldr	r3, [pc, #20]	; (8010060 <std+0x38>)
 801004c:	6263      	str	r3, [r4, #36]	; 0x24
 801004e:	4b05      	ldr	r3, [pc, #20]	; (8010064 <std+0x3c>)
 8010050:	62a3      	str	r3, [r4, #40]	; 0x28
 8010052:	4b05      	ldr	r3, [pc, #20]	; (8010068 <std+0x40>)
 8010054:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010056:	4b05      	ldr	r3, [pc, #20]	; (801006c <std+0x44>)
 8010058:	6224      	str	r4, [r4, #32]
 801005a:	6323      	str	r3, [r4, #48]	; 0x30
 801005c:	bd10      	pop	{r4, pc}
 801005e:	bf00      	nop
 8010060:	080110f9 	.word	0x080110f9
 8010064:	0801111b 	.word	0x0801111b
 8010068:	08011153 	.word	0x08011153
 801006c:	08011177 	.word	0x08011177

08010070 <_cleanup_r>:
 8010070:	4901      	ldr	r1, [pc, #4]	; (8010078 <_cleanup_r+0x8>)
 8010072:	f000 b8af 	b.w	80101d4 <_fwalk_reent>
 8010076:	bf00      	nop
 8010078:	0800ffb1 	.word	0x0800ffb1

0801007c <__sfmoreglue>:
 801007c:	b570      	push	{r4, r5, r6, lr}
 801007e:	1e4a      	subs	r2, r1, #1
 8010080:	2568      	movs	r5, #104	; 0x68
 8010082:	4355      	muls	r5, r2
 8010084:	460e      	mov	r6, r1
 8010086:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801008a:	f000 fd15 	bl	8010ab8 <_malloc_r>
 801008e:	4604      	mov	r4, r0
 8010090:	b140      	cbz	r0, 80100a4 <__sfmoreglue+0x28>
 8010092:	2100      	movs	r1, #0
 8010094:	e9c0 1600 	strd	r1, r6, [r0]
 8010098:	300c      	adds	r0, #12
 801009a:	60a0      	str	r0, [r4, #8]
 801009c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80100a0:	f7fe fbc6 	bl	800e830 <memset>
 80100a4:	4620      	mov	r0, r4
 80100a6:	bd70      	pop	{r4, r5, r6, pc}

080100a8 <__sfp_lock_acquire>:
 80100a8:	4801      	ldr	r0, [pc, #4]	; (80100b0 <__sfp_lock_acquire+0x8>)
 80100aa:	f000 b8b8 	b.w	801021e <__retarget_lock_acquire_recursive>
 80100ae:	bf00      	nop
 80100b0:	24000c6c 	.word	0x24000c6c

080100b4 <__sfp_lock_release>:
 80100b4:	4801      	ldr	r0, [pc, #4]	; (80100bc <__sfp_lock_release+0x8>)
 80100b6:	f000 b8b3 	b.w	8010220 <__retarget_lock_release_recursive>
 80100ba:	bf00      	nop
 80100bc:	24000c6c 	.word	0x24000c6c

080100c0 <__sinit_lock_acquire>:
 80100c0:	4801      	ldr	r0, [pc, #4]	; (80100c8 <__sinit_lock_acquire+0x8>)
 80100c2:	f000 b8ac 	b.w	801021e <__retarget_lock_acquire_recursive>
 80100c6:	bf00      	nop
 80100c8:	24000c67 	.word	0x24000c67

080100cc <__sinit_lock_release>:
 80100cc:	4801      	ldr	r0, [pc, #4]	; (80100d4 <__sinit_lock_release+0x8>)
 80100ce:	f000 b8a7 	b.w	8010220 <__retarget_lock_release_recursive>
 80100d2:	bf00      	nop
 80100d4:	24000c67 	.word	0x24000c67

080100d8 <__sinit>:
 80100d8:	b510      	push	{r4, lr}
 80100da:	4604      	mov	r4, r0
 80100dc:	f7ff fff0 	bl	80100c0 <__sinit_lock_acquire>
 80100e0:	69a3      	ldr	r3, [r4, #24]
 80100e2:	b11b      	cbz	r3, 80100ec <__sinit+0x14>
 80100e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80100e8:	f7ff bff0 	b.w	80100cc <__sinit_lock_release>
 80100ec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80100f0:	6523      	str	r3, [r4, #80]	; 0x50
 80100f2:	4b13      	ldr	r3, [pc, #76]	; (8010140 <__sinit+0x68>)
 80100f4:	4a13      	ldr	r2, [pc, #76]	; (8010144 <__sinit+0x6c>)
 80100f6:	681b      	ldr	r3, [r3, #0]
 80100f8:	62a2      	str	r2, [r4, #40]	; 0x28
 80100fa:	42a3      	cmp	r3, r4
 80100fc:	bf04      	itt	eq
 80100fe:	2301      	moveq	r3, #1
 8010100:	61a3      	streq	r3, [r4, #24]
 8010102:	4620      	mov	r0, r4
 8010104:	f000 f820 	bl	8010148 <__sfp>
 8010108:	6060      	str	r0, [r4, #4]
 801010a:	4620      	mov	r0, r4
 801010c:	f000 f81c 	bl	8010148 <__sfp>
 8010110:	60a0      	str	r0, [r4, #8]
 8010112:	4620      	mov	r0, r4
 8010114:	f000 f818 	bl	8010148 <__sfp>
 8010118:	2200      	movs	r2, #0
 801011a:	60e0      	str	r0, [r4, #12]
 801011c:	2104      	movs	r1, #4
 801011e:	6860      	ldr	r0, [r4, #4]
 8010120:	f7ff ff82 	bl	8010028 <std>
 8010124:	68a0      	ldr	r0, [r4, #8]
 8010126:	2201      	movs	r2, #1
 8010128:	2109      	movs	r1, #9
 801012a:	f7ff ff7d 	bl	8010028 <std>
 801012e:	68e0      	ldr	r0, [r4, #12]
 8010130:	2202      	movs	r2, #2
 8010132:	2112      	movs	r1, #18
 8010134:	f7ff ff78 	bl	8010028 <std>
 8010138:	2301      	movs	r3, #1
 801013a:	61a3      	str	r3, [r4, #24]
 801013c:	e7d2      	b.n	80100e4 <__sinit+0xc>
 801013e:	bf00      	nop
 8010140:	08011660 	.word	0x08011660
 8010144:	08010071 	.word	0x08010071

08010148 <__sfp>:
 8010148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801014a:	4607      	mov	r7, r0
 801014c:	f7ff ffac 	bl	80100a8 <__sfp_lock_acquire>
 8010150:	4b1e      	ldr	r3, [pc, #120]	; (80101cc <__sfp+0x84>)
 8010152:	681e      	ldr	r6, [r3, #0]
 8010154:	69b3      	ldr	r3, [r6, #24]
 8010156:	b913      	cbnz	r3, 801015e <__sfp+0x16>
 8010158:	4630      	mov	r0, r6
 801015a:	f7ff ffbd 	bl	80100d8 <__sinit>
 801015e:	3648      	adds	r6, #72	; 0x48
 8010160:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010164:	3b01      	subs	r3, #1
 8010166:	d503      	bpl.n	8010170 <__sfp+0x28>
 8010168:	6833      	ldr	r3, [r6, #0]
 801016a:	b30b      	cbz	r3, 80101b0 <__sfp+0x68>
 801016c:	6836      	ldr	r6, [r6, #0]
 801016e:	e7f7      	b.n	8010160 <__sfp+0x18>
 8010170:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010174:	b9d5      	cbnz	r5, 80101ac <__sfp+0x64>
 8010176:	4b16      	ldr	r3, [pc, #88]	; (80101d0 <__sfp+0x88>)
 8010178:	60e3      	str	r3, [r4, #12]
 801017a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801017e:	6665      	str	r5, [r4, #100]	; 0x64
 8010180:	f000 f84c 	bl	801021c <__retarget_lock_init_recursive>
 8010184:	f7ff ff96 	bl	80100b4 <__sfp_lock_release>
 8010188:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801018c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010190:	6025      	str	r5, [r4, #0]
 8010192:	61a5      	str	r5, [r4, #24]
 8010194:	2208      	movs	r2, #8
 8010196:	4629      	mov	r1, r5
 8010198:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801019c:	f7fe fb48 	bl	800e830 <memset>
 80101a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80101a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80101a8:	4620      	mov	r0, r4
 80101aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80101ac:	3468      	adds	r4, #104	; 0x68
 80101ae:	e7d9      	b.n	8010164 <__sfp+0x1c>
 80101b0:	2104      	movs	r1, #4
 80101b2:	4638      	mov	r0, r7
 80101b4:	f7ff ff62 	bl	801007c <__sfmoreglue>
 80101b8:	4604      	mov	r4, r0
 80101ba:	6030      	str	r0, [r6, #0]
 80101bc:	2800      	cmp	r0, #0
 80101be:	d1d5      	bne.n	801016c <__sfp+0x24>
 80101c0:	f7ff ff78 	bl	80100b4 <__sfp_lock_release>
 80101c4:	230c      	movs	r3, #12
 80101c6:	603b      	str	r3, [r7, #0]
 80101c8:	e7ee      	b.n	80101a8 <__sfp+0x60>
 80101ca:	bf00      	nop
 80101cc:	08011660 	.word	0x08011660
 80101d0:	ffff0001 	.word	0xffff0001

080101d4 <_fwalk_reent>:
 80101d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80101d8:	4606      	mov	r6, r0
 80101da:	4688      	mov	r8, r1
 80101dc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80101e0:	2700      	movs	r7, #0
 80101e2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80101e6:	f1b9 0901 	subs.w	r9, r9, #1
 80101ea:	d505      	bpl.n	80101f8 <_fwalk_reent+0x24>
 80101ec:	6824      	ldr	r4, [r4, #0]
 80101ee:	2c00      	cmp	r4, #0
 80101f0:	d1f7      	bne.n	80101e2 <_fwalk_reent+0xe>
 80101f2:	4638      	mov	r0, r7
 80101f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80101f8:	89ab      	ldrh	r3, [r5, #12]
 80101fa:	2b01      	cmp	r3, #1
 80101fc:	d907      	bls.n	801020e <_fwalk_reent+0x3a>
 80101fe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010202:	3301      	adds	r3, #1
 8010204:	d003      	beq.n	801020e <_fwalk_reent+0x3a>
 8010206:	4629      	mov	r1, r5
 8010208:	4630      	mov	r0, r6
 801020a:	47c0      	blx	r8
 801020c:	4307      	orrs	r7, r0
 801020e:	3568      	adds	r5, #104	; 0x68
 8010210:	e7e9      	b.n	80101e6 <_fwalk_reent+0x12>
	...

08010214 <_localeconv_r>:
 8010214:	4800      	ldr	r0, [pc, #0]	; (8010218 <_localeconv_r+0x4>)
 8010216:	4770      	bx	lr
 8010218:	24000164 	.word	0x24000164

0801021c <__retarget_lock_init_recursive>:
 801021c:	4770      	bx	lr

0801021e <__retarget_lock_acquire_recursive>:
 801021e:	4770      	bx	lr

08010220 <__retarget_lock_release_recursive>:
 8010220:	4770      	bx	lr

08010222 <__swhatbuf_r>:
 8010222:	b570      	push	{r4, r5, r6, lr}
 8010224:	460e      	mov	r6, r1
 8010226:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801022a:	2900      	cmp	r1, #0
 801022c:	b096      	sub	sp, #88	; 0x58
 801022e:	4614      	mov	r4, r2
 8010230:	461d      	mov	r5, r3
 8010232:	da07      	bge.n	8010244 <__swhatbuf_r+0x22>
 8010234:	2300      	movs	r3, #0
 8010236:	602b      	str	r3, [r5, #0]
 8010238:	89b3      	ldrh	r3, [r6, #12]
 801023a:	061a      	lsls	r2, r3, #24
 801023c:	d410      	bmi.n	8010260 <__swhatbuf_r+0x3e>
 801023e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010242:	e00e      	b.n	8010262 <__swhatbuf_r+0x40>
 8010244:	466a      	mov	r2, sp
 8010246:	f000 ffed 	bl	8011224 <_fstat_r>
 801024a:	2800      	cmp	r0, #0
 801024c:	dbf2      	blt.n	8010234 <__swhatbuf_r+0x12>
 801024e:	9a01      	ldr	r2, [sp, #4]
 8010250:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010254:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010258:	425a      	negs	r2, r3
 801025a:	415a      	adcs	r2, r3
 801025c:	602a      	str	r2, [r5, #0]
 801025e:	e7ee      	b.n	801023e <__swhatbuf_r+0x1c>
 8010260:	2340      	movs	r3, #64	; 0x40
 8010262:	2000      	movs	r0, #0
 8010264:	6023      	str	r3, [r4, #0]
 8010266:	b016      	add	sp, #88	; 0x58
 8010268:	bd70      	pop	{r4, r5, r6, pc}
	...

0801026c <__smakebuf_r>:
 801026c:	898b      	ldrh	r3, [r1, #12]
 801026e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010270:	079d      	lsls	r5, r3, #30
 8010272:	4606      	mov	r6, r0
 8010274:	460c      	mov	r4, r1
 8010276:	d507      	bpl.n	8010288 <__smakebuf_r+0x1c>
 8010278:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801027c:	6023      	str	r3, [r4, #0]
 801027e:	6123      	str	r3, [r4, #16]
 8010280:	2301      	movs	r3, #1
 8010282:	6163      	str	r3, [r4, #20]
 8010284:	b002      	add	sp, #8
 8010286:	bd70      	pop	{r4, r5, r6, pc}
 8010288:	ab01      	add	r3, sp, #4
 801028a:	466a      	mov	r2, sp
 801028c:	f7ff ffc9 	bl	8010222 <__swhatbuf_r>
 8010290:	9900      	ldr	r1, [sp, #0]
 8010292:	4605      	mov	r5, r0
 8010294:	4630      	mov	r0, r6
 8010296:	f000 fc0f 	bl	8010ab8 <_malloc_r>
 801029a:	b948      	cbnz	r0, 80102b0 <__smakebuf_r+0x44>
 801029c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80102a0:	059a      	lsls	r2, r3, #22
 80102a2:	d4ef      	bmi.n	8010284 <__smakebuf_r+0x18>
 80102a4:	f023 0303 	bic.w	r3, r3, #3
 80102a8:	f043 0302 	orr.w	r3, r3, #2
 80102ac:	81a3      	strh	r3, [r4, #12]
 80102ae:	e7e3      	b.n	8010278 <__smakebuf_r+0xc>
 80102b0:	4b0d      	ldr	r3, [pc, #52]	; (80102e8 <__smakebuf_r+0x7c>)
 80102b2:	62b3      	str	r3, [r6, #40]	; 0x28
 80102b4:	89a3      	ldrh	r3, [r4, #12]
 80102b6:	6020      	str	r0, [r4, #0]
 80102b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80102bc:	81a3      	strh	r3, [r4, #12]
 80102be:	9b00      	ldr	r3, [sp, #0]
 80102c0:	6163      	str	r3, [r4, #20]
 80102c2:	9b01      	ldr	r3, [sp, #4]
 80102c4:	6120      	str	r0, [r4, #16]
 80102c6:	b15b      	cbz	r3, 80102e0 <__smakebuf_r+0x74>
 80102c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80102cc:	4630      	mov	r0, r6
 80102ce:	f000 ffbb 	bl	8011248 <_isatty_r>
 80102d2:	b128      	cbz	r0, 80102e0 <__smakebuf_r+0x74>
 80102d4:	89a3      	ldrh	r3, [r4, #12]
 80102d6:	f023 0303 	bic.w	r3, r3, #3
 80102da:	f043 0301 	orr.w	r3, r3, #1
 80102de:	81a3      	strh	r3, [r4, #12]
 80102e0:	89a0      	ldrh	r0, [r4, #12]
 80102e2:	4305      	orrs	r5, r0
 80102e4:	81a5      	strh	r5, [r4, #12]
 80102e6:	e7cd      	b.n	8010284 <__smakebuf_r+0x18>
 80102e8:	08010071 	.word	0x08010071

080102ec <malloc>:
 80102ec:	4b02      	ldr	r3, [pc, #8]	; (80102f8 <malloc+0xc>)
 80102ee:	4601      	mov	r1, r0
 80102f0:	6818      	ldr	r0, [r3, #0]
 80102f2:	f000 bbe1 	b.w	8010ab8 <_malloc_r>
 80102f6:	bf00      	nop
 80102f8:	24000010 	.word	0x24000010

080102fc <_Balloc>:
 80102fc:	b570      	push	{r4, r5, r6, lr}
 80102fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010300:	4604      	mov	r4, r0
 8010302:	460d      	mov	r5, r1
 8010304:	b976      	cbnz	r6, 8010324 <_Balloc+0x28>
 8010306:	2010      	movs	r0, #16
 8010308:	f7ff fff0 	bl	80102ec <malloc>
 801030c:	4602      	mov	r2, r0
 801030e:	6260      	str	r0, [r4, #36]	; 0x24
 8010310:	b920      	cbnz	r0, 801031c <_Balloc+0x20>
 8010312:	4b18      	ldr	r3, [pc, #96]	; (8010374 <_Balloc+0x78>)
 8010314:	4818      	ldr	r0, [pc, #96]	; (8010378 <_Balloc+0x7c>)
 8010316:	2166      	movs	r1, #102	; 0x66
 8010318:	f000 ff44 	bl	80111a4 <__assert_func>
 801031c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010320:	6006      	str	r6, [r0, #0]
 8010322:	60c6      	str	r6, [r0, #12]
 8010324:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010326:	68f3      	ldr	r3, [r6, #12]
 8010328:	b183      	cbz	r3, 801034c <_Balloc+0x50>
 801032a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801032c:	68db      	ldr	r3, [r3, #12]
 801032e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010332:	b9b8      	cbnz	r0, 8010364 <_Balloc+0x68>
 8010334:	2101      	movs	r1, #1
 8010336:	fa01 f605 	lsl.w	r6, r1, r5
 801033a:	1d72      	adds	r2, r6, #5
 801033c:	0092      	lsls	r2, r2, #2
 801033e:	4620      	mov	r0, r4
 8010340:	f000 fb5a 	bl	80109f8 <_calloc_r>
 8010344:	b160      	cbz	r0, 8010360 <_Balloc+0x64>
 8010346:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801034a:	e00e      	b.n	801036a <_Balloc+0x6e>
 801034c:	2221      	movs	r2, #33	; 0x21
 801034e:	2104      	movs	r1, #4
 8010350:	4620      	mov	r0, r4
 8010352:	f000 fb51 	bl	80109f8 <_calloc_r>
 8010356:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010358:	60f0      	str	r0, [r6, #12]
 801035a:	68db      	ldr	r3, [r3, #12]
 801035c:	2b00      	cmp	r3, #0
 801035e:	d1e4      	bne.n	801032a <_Balloc+0x2e>
 8010360:	2000      	movs	r0, #0
 8010362:	bd70      	pop	{r4, r5, r6, pc}
 8010364:	6802      	ldr	r2, [r0, #0]
 8010366:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801036a:	2300      	movs	r3, #0
 801036c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010370:	e7f7      	b.n	8010362 <_Balloc+0x66>
 8010372:	bf00      	nop
 8010374:	080116a5 	.word	0x080116a5
 8010378:	0801178c 	.word	0x0801178c

0801037c <_Bfree>:
 801037c:	b570      	push	{r4, r5, r6, lr}
 801037e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010380:	4605      	mov	r5, r0
 8010382:	460c      	mov	r4, r1
 8010384:	b976      	cbnz	r6, 80103a4 <_Bfree+0x28>
 8010386:	2010      	movs	r0, #16
 8010388:	f7ff ffb0 	bl	80102ec <malloc>
 801038c:	4602      	mov	r2, r0
 801038e:	6268      	str	r0, [r5, #36]	; 0x24
 8010390:	b920      	cbnz	r0, 801039c <_Bfree+0x20>
 8010392:	4b09      	ldr	r3, [pc, #36]	; (80103b8 <_Bfree+0x3c>)
 8010394:	4809      	ldr	r0, [pc, #36]	; (80103bc <_Bfree+0x40>)
 8010396:	218a      	movs	r1, #138	; 0x8a
 8010398:	f000 ff04 	bl	80111a4 <__assert_func>
 801039c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80103a0:	6006      	str	r6, [r0, #0]
 80103a2:	60c6      	str	r6, [r0, #12]
 80103a4:	b13c      	cbz	r4, 80103b6 <_Bfree+0x3a>
 80103a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80103a8:	6862      	ldr	r2, [r4, #4]
 80103aa:	68db      	ldr	r3, [r3, #12]
 80103ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80103b0:	6021      	str	r1, [r4, #0]
 80103b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80103b6:	bd70      	pop	{r4, r5, r6, pc}
 80103b8:	080116a5 	.word	0x080116a5
 80103bc:	0801178c 	.word	0x0801178c

080103c0 <__multadd>:
 80103c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103c4:	690e      	ldr	r6, [r1, #16]
 80103c6:	4607      	mov	r7, r0
 80103c8:	4698      	mov	r8, r3
 80103ca:	460c      	mov	r4, r1
 80103cc:	f101 0014 	add.w	r0, r1, #20
 80103d0:	2300      	movs	r3, #0
 80103d2:	6805      	ldr	r5, [r0, #0]
 80103d4:	b2a9      	uxth	r1, r5
 80103d6:	fb02 8101 	mla	r1, r2, r1, r8
 80103da:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80103de:	0c2d      	lsrs	r5, r5, #16
 80103e0:	fb02 c505 	mla	r5, r2, r5, ip
 80103e4:	b289      	uxth	r1, r1
 80103e6:	3301      	adds	r3, #1
 80103e8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80103ec:	429e      	cmp	r6, r3
 80103ee:	f840 1b04 	str.w	r1, [r0], #4
 80103f2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80103f6:	dcec      	bgt.n	80103d2 <__multadd+0x12>
 80103f8:	f1b8 0f00 	cmp.w	r8, #0
 80103fc:	d022      	beq.n	8010444 <__multadd+0x84>
 80103fe:	68a3      	ldr	r3, [r4, #8]
 8010400:	42b3      	cmp	r3, r6
 8010402:	dc19      	bgt.n	8010438 <__multadd+0x78>
 8010404:	6861      	ldr	r1, [r4, #4]
 8010406:	4638      	mov	r0, r7
 8010408:	3101      	adds	r1, #1
 801040a:	f7ff ff77 	bl	80102fc <_Balloc>
 801040e:	4605      	mov	r5, r0
 8010410:	b928      	cbnz	r0, 801041e <__multadd+0x5e>
 8010412:	4602      	mov	r2, r0
 8010414:	4b0d      	ldr	r3, [pc, #52]	; (801044c <__multadd+0x8c>)
 8010416:	480e      	ldr	r0, [pc, #56]	; (8010450 <__multadd+0x90>)
 8010418:	21b5      	movs	r1, #181	; 0xb5
 801041a:	f000 fec3 	bl	80111a4 <__assert_func>
 801041e:	6922      	ldr	r2, [r4, #16]
 8010420:	3202      	adds	r2, #2
 8010422:	f104 010c 	add.w	r1, r4, #12
 8010426:	0092      	lsls	r2, r2, #2
 8010428:	300c      	adds	r0, #12
 801042a:	f7fe f9f3 	bl	800e814 <memcpy>
 801042e:	4621      	mov	r1, r4
 8010430:	4638      	mov	r0, r7
 8010432:	f7ff ffa3 	bl	801037c <_Bfree>
 8010436:	462c      	mov	r4, r5
 8010438:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801043c:	3601      	adds	r6, #1
 801043e:	f8c3 8014 	str.w	r8, [r3, #20]
 8010442:	6126      	str	r6, [r4, #16]
 8010444:	4620      	mov	r0, r4
 8010446:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801044a:	bf00      	nop
 801044c:	0801171b 	.word	0x0801171b
 8010450:	0801178c 	.word	0x0801178c

08010454 <__hi0bits>:
 8010454:	0c03      	lsrs	r3, r0, #16
 8010456:	041b      	lsls	r3, r3, #16
 8010458:	b9d3      	cbnz	r3, 8010490 <__hi0bits+0x3c>
 801045a:	0400      	lsls	r0, r0, #16
 801045c:	2310      	movs	r3, #16
 801045e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8010462:	bf04      	itt	eq
 8010464:	0200      	lsleq	r0, r0, #8
 8010466:	3308      	addeq	r3, #8
 8010468:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801046c:	bf04      	itt	eq
 801046e:	0100      	lsleq	r0, r0, #4
 8010470:	3304      	addeq	r3, #4
 8010472:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8010476:	bf04      	itt	eq
 8010478:	0080      	lsleq	r0, r0, #2
 801047a:	3302      	addeq	r3, #2
 801047c:	2800      	cmp	r0, #0
 801047e:	db05      	blt.n	801048c <__hi0bits+0x38>
 8010480:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010484:	f103 0301 	add.w	r3, r3, #1
 8010488:	bf08      	it	eq
 801048a:	2320      	moveq	r3, #32
 801048c:	4618      	mov	r0, r3
 801048e:	4770      	bx	lr
 8010490:	2300      	movs	r3, #0
 8010492:	e7e4      	b.n	801045e <__hi0bits+0xa>

08010494 <__lo0bits>:
 8010494:	6803      	ldr	r3, [r0, #0]
 8010496:	f013 0207 	ands.w	r2, r3, #7
 801049a:	4601      	mov	r1, r0
 801049c:	d00b      	beq.n	80104b6 <__lo0bits+0x22>
 801049e:	07da      	lsls	r2, r3, #31
 80104a0:	d424      	bmi.n	80104ec <__lo0bits+0x58>
 80104a2:	0798      	lsls	r0, r3, #30
 80104a4:	bf49      	itett	mi
 80104a6:	085b      	lsrmi	r3, r3, #1
 80104a8:	089b      	lsrpl	r3, r3, #2
 80104aa:	2001      	movmi	r0, #1
 80104ac:	600b      	strmi	r3, [r1, #0]
 80104ae:	bf5c      	itt	pl
 80104b0:	600b      	strpl	r3, [r1, #0]
 80104b2:	2002      	movpl	r0, #2
 80104b4:	4770      	bx	lr
 80104b6:	b298      	uxth	r0, r3
 80104b8:	b9b0      	cbnz	r0, 80104e8 <__lo0bits+0x54>
 80104ba:	0c1b      	lsrs	r3, r3, #16
 80104bc:	2010      	movs	r0, #16
 80104be:	f013 0fff 	tst.w	r3, #255	; 0xff
 80104c2:	bf04      	itt	eq
 80104c4:	0a1b      	lsreq	r3, r3, #8
 80104c6:	3008      	addeq	r0, #8
 80104c8:	071a      	lsls	r2, r3, #28
 80104ca:	bf04      	itt	eq
 80104cc:	091b      	lsreq	r3, r3, #4
 80104ce:	3004      	addeq	r0, #4
 80104d0:	079a      	lsls	r2, r3, #30
 80104d2:	bf04      	itt	eq
 80104d4:	089b      	lsreq	r3, r3, #2
 80104d6:	3002      	addeq	r0, #2
 80104d8:	07da      	lsls	r2, r3, #31
 80104da:	d403      	bmi.n	80104e4 <__lo0bits+0x50>
 80104dc:	085b      	lsrs	r3, r3, #1
 80104de:	f100 0001 	add.w	r0, r0, #1
 80104e2:	d005      	beq.n	80104f0 <__lo0bits+0x5c>
 80104e4:	600b      	str	r3, [r1, #0]
 80104e6:	4770      	bx	lr
 80104e8:	4610      	mov	r0, r2
 80104ea:	e7e8      	b.n	80104be <__lo0bits+0x2a>
 80104ec:	2000      	movs	r0, #0
 80104ee:	4770      	bx	lr
 80104f0:	2020      	movs	r0, #32
 80104f2:	4770      	bx	lr

080104f4 <__i2b>:
 80104f4:	b510      	push	{r4, lr}
 80104f6:	460c      	mov	r4, r1
 80104f8:	2101      	movs	r1, #1
 80104fa:	f7ff feff 	bl	80102fc <_Balloc>
 80104fe:	4602      	mov	r2, r0
 8010500:	b928      	cbnz	r0, 801050e <__i2b+0x1a>
 8010502:	4b05      	ldr	r3, [pc, #20]	; (8010518 <__i2b+0x24>)
 8010504:	4805      	ldr	r0, [pc, #20]	; (801051c <__i2b+0x28>)
 8010506:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801050a:	f000 fe4b 	bl	80111a4 <__assert_func>
 801050e:	2301      	movs	r3, #1
 8010510:	6144      	str	r4, [r0, #20]
 8010512:	6103      	str	r3, [r0, #16]
 8010514:	bd10      	pop	{r4, pc}
 8010516:	bf00      	nop
 8010518:	0801171b 	.word	0x0801171b
 801051c:	0801178c 	.word	0x0801178c

08010520 <__multiply>:
 8010520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010524:	4614      	mov	r4, r2
 8010526:	690a      	ldr	r2, [r1, #16]
 8010528:	6923      	ldr	r3, [r4, #16]
 801052a:	429a      	cmp	r2, r3
 801052c:	bfb8      	it	lt
 801052e:	460b      	movlt	r3, r1
 8010530:	460d      	mov	r5, r1
 8010532:	bfbc      	itt	lt
 8010534:	4625      	movlt	r5, r4
 8010536:	461c      	movlt	r4, r3
 8010538:	f8d5 a010 	ldr.w	sl, [r5, #16]
 801053c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8010540:	68ab      	ldr	r3, [r5, #8]
 8010542:	6869      	ldr	r1, [r5, #4]
 8010544:	eb0a 0709 	add.w	r7, sl, r9
 8010548:	42bb      	cmp	r3, r7
 801054a:	b085      	sub	sp, #20
 801054c:	bfb8      	it	lt
 801054e:	3101      	addlt	r1, #1
 8010550:	f7ff fed4 	bl	80102fc <_Balloc>
 8010554:	b930      	cbnz	r0, 8010564 <__multiply+0x44>
 8010556:	4602      	mov	r2, r0
 8010558:	4b42      	ldr	r3, [pc, #264]	; (8010664 <__multiply+0x144>)
 801055a:	4843      	ldr	r0, [pc, #268]	; (8010668 <__multiply+0x148>)
 801055c:	f240 115d 	movw	r1, #349	; 0x15d
 8010560:	f000 fe20 	bl	80111a4 <__assert_func>
 8010564:	f100 0614 	add.w	r6, r0, #20
 8010568:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 801056c:	4633      	mov	r3, r6
 801056e:	2200      	movs	r2, #0
 8010570:	4543      	cmp	r3, r8
 8010572:	d31e      	bcc.n	80105b2 <__multiply+0x92>
 8010574:	f105 0c14 	add.w	ip, r5, #20
 8010578:	f104 0314 	add.w	r3, r4, #20
 801057c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8010580:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8010584:	9202      	str	r2, [sp, #8]
 8010586:	ebac 0205 	sub.w	r2, ip, r5
 801058a:	3a15      	subs	r2, #21
 801058c:	f022 0203 	bic.w	r2, r2, #3
 8010590:	3204      	adds	r2, #4
 8010592:	f105 0115 	add.w	r1, r5, #21
 8010596:	458c      	cmp	ip, r1
 8010598:	bf38      	it	cc
 801059a:	2204      	movcc	r2, #4
 801059c:	9201      	str	r2, [sp, #4]
 801059e:	9a02      	ldr	r2, [sp, #8]
 80105a0:	9303      	str	r3, [sp, #12]
 80105a2:	429a      	cmp	r2, r3
 80105a4:	d808      	bhi.n	80105b8 <__multiply+0x98>
 80105a6:	2f00      	cmp	r7, #0
 80105a8:	dc55      	bgt.n	8010656 <__multiply+0x136>
 80105aa:	6107      	str	r7, [r0, #16]
 80105ac:	b005      	add	sp, #20
 80105ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105b2:	f843 2b04 	str.w	r2, [r3], #4
 80105b6:	e7db      	b.n	8010570 <__multiply+0x50>
 80105b8:	f8b3 a000 	ldrh.w	sl, [r3]
 80105bc:	f1ba 0f00 	cmp.w	sl, #0
 80105c0:	d020      	beq.n	8010604 <__multiply+0xe4>
 80105c2:	f105 0e14 	add.w	lr, r5, #20
 80105c6:	46b1      	mov	r9, r6
 80105c8:	2200      	movs	r2, #0
 80105ca:	f85e 4b04 	ldr.w	r4, [lr], #4
 80105ce:	f8d9 b000 	ldr.w	fp, [r9]
 80105d2:	b2a1      	uxth	r1, r4
 80105d4:	fa1f fb8b 	uxth.w	fp, fp
 80105d8:	fb0a b101 	mla	r1, sl, r1, fp
 80105dc:	4411      	add	r1, r2
 80105de:	f8d9 2000 	ldr.w	r2, [r9]
 80105e2:	0c24      	lsrs	r4, r4, #16
 80105e4:	0c12      	lsrs	r2, r2, #16
 80105e6:	fb0a 2404 	mla	r4, sl, r4, r2
 80105ea:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80105ee:	b289      	uxth	r1, r1
 80105f0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80105f4:	45f4      	cmp	ip, lr
 80105f6:	f849 1b04 	str.w	r1, [r9], #4
 80105fa:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80105fe:	d8e4      	bhi.n	80105ca <__multiply+0xaa>
 8010600:	9901      	ldr	r1, [sp, #4]
 8010602:	5072      	str	r2, [r6, r1]
 8010604:	9a03      	ldr	r2, [sp, #12]
 8010606:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801060a:	3304      	adds	r3, #4
 801060c:	f1b9 0f00 	cmp.w	r9, #0
 8010610:	d01f      	beq.n	8010652 <__multiply+0x132>
 8010612:	6834      	ldr	r4, [r6, #0]
 8010614:	f105 0114 	add.w	r1, r5, #20
 8010618:	46b6      	mov	lr, r6
 801061a:	f04f 0a00 	mov.w	sl, #0
 801061e:	880a      	ldrh	r2, [r1, #0]
 8010620:	f8be b002 	ldrh.w	fp, [lr, #2]
 8010624:	fb09 b202 	mla	r2, r9, r2, fp
 8010628:	4492      	add	sl, r2
 801062a:	b2a4      	uxth	r4, r4
 801062c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8010630:	f84e 4b04 	str.w	r4, [lr], #4
 8010634:	f851 4b04 	ldr.w	r4, [r1], #4
 8010638:	f8be 2000 	ldrh.w	r2, [lr]
 801063c:	0c24      	lsrs	r4, r4, #16
 801063e:	fb09 2404 	mla	r4, r9, r4, r2
 8010642:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8010646:	458c      	cmp	ip, r1
 8010648:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801064c:	d8e7      	bhi.n	801061e <__multiply+0xfe>
 801064e:	9a01      	ldr	r2, [sp, #4]
 8010650:	50b4      	str	r4, [r6, r2]
 8010652:	3604      	adds	r6, #4
 8010654:	e7a3      	b.n	801059e <__multiply+0x7e>
 8010656:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801065a:	2b00      	cmp	r3, #0
 801065c:	d1a5      	bne.n	80105aa <__multiply+0x8a>
 801065e:	3f01      	subs	r7, #1
 8010660:	e7a1      	b.n	80105a6 <__multiply+0x86>
 8010662:	bf00      	nop
 8010664:	0801171b 	.word	0x0801171b
 8010668:	0801178c 	.word	0x0801178c

0801066c <__pow5mult>:
 801066c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010670:	4615      	mov	r5, r2
 8010672:	f012 0203 	ands.w	r2, r2, #3
 8010676:	4606      	mov	r6, r0
 8010678:	460f      	mov	r7, r1
 801067a:	d007      	beq.n	801068c <__pow5mult+0x20>
 801067c:	4c25      	ldr	r4, [pc, #148]	; (8010714 <__pow5mult+0xa8>)
 801067e:	3a01      	subs	r2, #1
 8010680:	2300      	movs	r3, #0
 8010682:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010686:	f7ff fe9b 	bl	80103c0 <__multadd>
 801068a:	4607      	mov	r7, r0
 801068c:	10ad      	asrs	r5, r5, #2
 801068e:	d03d      	beq.n	801070c <__pow5mult+0xa0>
 8010690:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8010692:	b97c      	cbnz	r4, 80106b4 <__pow5mult+0x48>
 8010694:	2010      	movs	r0, #16
 8010696:	f7ff fe29 	bl	80102ec <malloc>
 801069a:	4602      	mov	r2, r0
 801069c:	6270      	str	r0, [r6, #36]	; 0x24
 801069e:	b928      	cbnz	r0, 80106ac <__pow5mult+0x40>
 80106a0:	4b1d      	ldr	r3, [pc, #116]	; (8010718 <__pow5mult+0xac>)
 80106a2:	481e      	ldr	r0, [pc, #120]	; (801071c <__pow5mult+0xb0>)
 80106a4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80106a8:	f000 fd7c 	bl	80111a4 <__assert_func>
 80106ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80106b0:	6004      	str	r4, [r0, #0]
 80106b2:	60c4      	str	r4, [r0, #12]
 80106b4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80106b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80106bc:	b94c      	cbnz	r4, 80106d2 <__pow5mult+0x66>
 80106be:	f240 2171 	movw	r1, #625	; 0x271
 80106c2:	4630      	mov	r0, r6
 80106c4:	f7ff ff16 	bl	80104f4 <__i2b>
 80106c8:	2300      	movs	r3, #0
 80106ca:	f8c8 0008 	str.w	r0, [r8, #8]
 80106ce:	4604      	mov	r4, r0
 80106d0:	6003      	str	r3, [r0, #0]
 80106d2:	f04f 0900 	mov.w	r9, #0
 80106d6:	07eb      	lsls	r3, r5, #31
 80106d8:	d50a      	bpl.n	80106f0 <__pow5mult+0x84>
 80106da:	4639      	mov	r1, r7
 80106dc:	4622      	mov	r2, r4
 80106de:	4630      	mov	r0, r6
 80106e0:	f7ff ff1e 	bl	8010520 <__multiply>
 80106e4:	4639      	mov	r1, r7
 80106e6:	4680      	mov	r8, r0
 80106e8:	4630      	mov	r0, r6
 80106ea:	f7ff fe47 	bl	801037c <_Bfree>
 80106ee:	4647      	mov	r7, r8
 80106f0:	106d      	asrs	r5, r5, #1
 80106f2:	d00b      	beq.n	801070c <__pow5mult+0xa0>
 80106f4:	6820      	ldr	r0, [r4, #0]
 80106f6:	b938      	cbnz	r0, 8010708 <__pow5mult+0x9c>
 80106f8:	4622      	mov	r2, r4
 80106fa:	4621      	mov	r1, r4
 80106fc:	4630      	mov	r0, r6
 80106fe:	f7ff ff0f 	bl	8010520 <__multiply>
 8010702:	6020      	str	r0, [r4, #0]
 8010704:	f8c0 9000 	str.w	r9, [r0]
 8010708:	4604      	mov	r4, r0
 801070a:	e7e4      	b.n	80106d6 <__pow5mult+0x6a>
 801070c:	4638      	mov	r0, r7
 801070e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010712:	bf00      	nop
 8010714:	080118e0 	.word	0x080118e0
 8010718:	080116a5 	.word	0x080116a5
 801071c:	0801178c 	.word	0x0801178c

08010720 <__lshift>:
 8010720:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010724:	460c      	mov	r4, r1
 8010726:	6849      	ldr	r1, [r1, #4]
 8010728:	6923      	ldr	r3, [r4, #16]
 801072a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801072e:	68a3      	ldr	r3, [r4, #8]
 8010730:	4607      	mov	r7, r0
 8010732:	4691      	mov	r9, r2
 8010734:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010738:	f108 0601 	add.w	r6, r8, #1
 801073c:	42b3      	cmp	r3, r6
 801073e:	db0b      	blt.n	8010758 <__lshift+0x38>
 8010740:	4638      	mov	r0, r7
 8010742:	f7ff fddb 	bl	80102fc <_Balloc>
 8010746:	4605      	mov	r5, r0
 8010748:	b948      	cbnz	r0, 801075e <__lshift+0x3e>
 801074a:	4602      	mov	r2, r0
 801074c:	4b28      	ldr	r3, [pc, #160]	; (80107f0 <__lshift+0xd0>)
 801074e:	4829      	ldr	r0, [pc, #164]	; (80107f4 <__lshift+0xd4>)
 8010750:	f240 11d9 	movw	r1, #473	; 0x1d9
 8010754:	f000 fd26 	bl	80111a4 <__assert_func>
 8010758:	3101      	adds	r1, #1
 801075a:	005b      	lsls	r3, r3, #1
 801075c:	e7ee      	b.n	801073c <__lshift+0x1c>
 801075e:	2300      	movs	r3, #0
 8010760:	f100 0114 	add.w	r1, r0, #20
 8010764:	f100 0210 	add.w	r2, r0, #16
 8010768:	4618      	mov	r0, r3
 801076a:	4553      	cmp	r3, sl
 801076c:	db33      	blt.n	80107d6 <__lshift+0xb6>
 801076e:	6920      	ldr	r0, [r4, #16]
 8010770:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010774:	f104 0314 	add.w	r3, r4, #20
 8010778:	f019 091f 	ands.w	r9, r9, #31
 801077c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010780:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010784:	d02b      	beq.n	80107de <__lshift+0xbe>
 8010786:	f1c9 0e20 	rsb	lr, r9, #32
 801078a:	468a      	mov	sl, r1
 801078c:	2200      	movs	r2, #0
 801078e:	6818      	ldr	r0, [r3, #0]
 8010790:	fa00 f009 	lsl.w	r0, r0, r9
 8010794:	4302      	orrs	r2, r0
 8010796:	f84a 2b04 	str.w	r2, [sl], #4
 801079a:	f853 2b04 	ldr.w	r2, [r3], #4
 801079e:	459c      	cmp	ip, r3
 80107a0:	fa22 f20e 	lsr.w	r2, r2, lr
 80107a4:	d8f3      	bhi.n	801078e <__lshift+0x6e>
 80107a6:	ebac 0304 	sub.w	r3, ip, r4
 80107aa:	3b15      	subs	r3, #21
 80107ac:	f023 0303 	bic.w	r3, r3, #3
 80107b0:	3304      	adds	r3, #4
 80107b2:	f104 0015 	add.w	r0, r4, #21
 80107b6:	4584      	cmp	ip, r0
 80107b8:	bf38      	it	cc
 80107ba:	2304      	movcc	r3, #4
 80107bc:	50ca      	str	r2, [r1, r3]
 80107be:	b10a      	cbz	r2, 80107c4 <__lshift+0xa4>
 80107c0:	f108 0602 	add.w	r6, r8, #2
 80107c4:	3e01      	subs	r6, #1
 80107c6:	4638      	mov	r0, r7
 80107c8:	612e      	str	r6, [r5, #16]
 80107ca:	4621      	mov	r1, r4
 80107cc:	f7ff fdd6 	bl	801037c <_Bfree>
 80107d0:	4628      	mov	r0, r5
 80107d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80107d6:	f842 0f04 	str.w	r0, [r2, #4]!
 80107da:	3301      	adds	r3, #1
 80107dc:	e7c5      	b.n	801076a <__lshift+0x4a>
 80107de:	3904      	subs	r1, #4
 80107e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80107e4:	f841 2f04 	str.w	r2, [r1, #4]!
 80107e8:	459c      	cmp	ip, r3
 80107ea:	d8f9      	bhi.n	80107e0 <__lshift+0xc0>
 80107ec:	e7ea      	b.n	80107c4 <__lshift+0xa4>
 80107ee:	bf00      	nop
 80107f0:	0801171b 	.word	0x0801171b
 80107f4:	0801178c 	.word	0x0801178c

080107f8 <__mcmp>:
 80107f8:	b530      	push	{r4, r5, lr}
 80107fa:	6902      	ldr	r2, [r0, #16]
 80107fc:	690c      	ldr	r4, [r1, #16]
 80107fe:	1b12      	subs	r2, r2, r4
 8010800:	d10e      	bne.n	8010820 <__mcmp+0x28>
 8010802:	f100 0314 	add.w	r3, r0, #20
 8010806:	3114      	adds	r1, #20
 8010808:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801080c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010810:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010814:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010818:	42a5      	cmp	r5, r4
 801081a:	d003      	beq.n	8010824 <__mcmp+0x2c>
 801081c:	d305      	bcc.n	801082a <__mcmp+0x32>
 801081e:	2201      	movs	r2, #1
 8010820:	4610      	mov	r0, r2
 8010822:	bd30      	pop	{r4, r5, pc}
 8010824:	4283      	cmp	r3, r0
 8010826:	d3f3      	bcc.n	8010810 <__mcmp+0x18>
 8010828:	e7fa      	b.n	8010820 <__mcmp+0x28>
 801082a:	f04f 32ff 	mov.w	r2, #4294967295
 801082e:	e7f7      	b.n	8010820 <__mcmp+0x28>

08010830 <__mdiff>:
 8010830:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010834:	460c      	mov	r4, r1
 8010836:	4606      	mov	r6, r0
 8010838:	4611      	mov	r1, r2
 801083a:	4620      	mov	r0, r4
 801083c:	4617      	mov	r7, r2
 801083e:	f7ff ffdb 	bl	80107f8 <__mcmp>
 8010842:	1e05      	subs	r5, r0, #0
 8010844:	d110      	bne.n	8010868 <__mdiff+0x38>
 8010846:	4629      	mov	r1, r5
 8010848:	4630      	mov	r0, r6
 801084a:	f7ff fd57 	bl	80102fc <_Balloc>
 801084e:	b930      	cbnz	r0, 801085e <__mdiff+0x2e>
 8010850:	4b39      	ldr	r3, [pc, #228]	; (8010938 <__mdiff+0x108>)
 8010852:	4602      	mov	r2, r0
 8010854:	f240 2132 	movw	r1, #562	; 0x232
 8010858:	4838      	ldr	r0, [pc, #224]	; (801093c <__mdiff+0x10c>)
 801085a:	f000 fca3 	bl	80111a4 <__assert_func>
 801085e:	2301      	movs	r3, #1
 8010860:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010864:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010868:	bfa4      	itt	ge
 801086a:	463b      	movge	r3, r7
 801086c:	4627      	movge	r7, r4
 801086e:	4630      	mov	r0, r6
 8010870:	6879      	ldr	r1, [r7, #4]
 8010872:	bfa6      	itte	ge
 8010874:	461c      	movge	r4, r3
 8010876:	2500      	movge	r5, #0
 8010878:	2501      	movlt	r5, #1
 801087a:	f7ff fd3f 	bl	80102fc <_Balloc>
 801087e:	b920      	cbnz	r0, 801088a <__mdiff+0x5a>
 8010880:	4b2d      	ldr	r3, [pc, #180]	; (8010938 <__mdiff+0x108>)
 8010882:	4602      	mov	r2, r0
 8010884:	f44f 7110 	mov.w	r1, #576	; 0x240
 8010888:	e7e6      	b.n	8010858 <__mdiff+0x28>
 801088a:	693e      	ldr	r6, [r7, #16]
 801088c:	60c5      	str	r5, [r0, #12]
 801088e:	6925      	ldr	r5, [r4, #16]
 8010890:	f107 0114 	add.w	r1, r7, #20
 8010894:	f104 0914 	add.w	r9, r4, #20
 8010898:	f100 0e14 	add.w	lr, r0, #20
 801089c:	f107 0210 	add.w	r2, r7, #16
 80108a0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80108a4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80108a8:	46f2      	mov	sl, lr
 80108aa:	2700      	movs	r7, #0
 80108ac:	f859 3b04 	ldr.w	r3, [r9], #4
 80108b0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80108b4:	fa1f f883 	uxth.w	r8, r3
 80108b8:	fa17 f78b 	uxtah	r7, r7, fp
 80108bc:	0c1b      	lsrs	r3, r3, #16
 80108be:	eba7 0808 	sub.w	r8, r7, r8
 80108c2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80108c6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80108ca:	fa1f f888 	uxth.w	r8, r8
 80108ce:	141f      	asrs	r7, r3, #16
 80108d0:	454d      	cmp	r5, r9
 80108d2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80108d6:	f84a 3b04 	str.w	r3, [sl], #4
 80108da:	d8e7      	bhi.n	80108ac <__mdiff+0x7c>
 80108dc:	1b2b      	subs	r3, r5, r4
 80108de:	3b15      	subs	r3, #21
 80108e0:	f023 0303 	bic.w	r3, r3, #3
 80108e4:	3304      	adds	r3, #4
 80108e6:	3415      	adds	r4, #21
 80108e8:	42a5      	cmp	r5, r4
 80108ea:	bf38      	it	cc
 80108ec:	2304      	movcc	r3, #4
 80108ee:	4419      	add	r1, r3
 80108f0:	4473      	add	r3, lr
 80108f2:	469e      	mov	lr, r3
 80108f4:	460d      	mov	r5, r1
 80108f6:	4565      	cmp	r5, ip
 80108f8:	d30e      	bcc.n	8010918 <__mdiff+0xe8>
 80108fa:	f10c 0203 	add.w	r2, ip, #3
 80108fe:	1a52      	subs	r2, r2, r1
 8010900:	f022 0203 	bic.w	r2, r2, #3
 8010904:	3903      	subs	r1, #3
 8010906:	458c      	cmp	ip, r1
 8010908:	bf38      	it	cc
 801090a:	2200      	movcc	r2, #0
 801090c:	441a      	add	r2, r3
 801090e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8010912:	b17b      	cbz	r3, 8010934 <__mdiff+0x104>
 8010914:	6106      	str	r6, [r0, #16]
 8010916:	e7a5      	b.n	8010864 <__mdiff+0x34>
 8010918:	f855 8b04 	ldr.w	r8, [r5], #4
 801091c:	fa17 f488 	uxtah	r4, r7, r8
 8010920:	1422      	asrs	r2, r4, #16
 8010922:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8010926:	b2a4      	uxth	r4, r4
 8010928:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801092c:	f84e 4b04 	str.w	r4, [lr], #4
 8010930:	1417      	asrs	r7, r2, #16
 8010932:	e7e0      	b.n	80108f6 <__mdiff+0xc6>
 8010934:	3e01      	subs	r6, #1
 8010936:	e7ea      	b.n	801090e <__mdiff+0xde>
 8010938:	0801171b 	.word	0x0801171b
 801093c:	0801178c 	.word	0x0801178c

08010940 <__d2b>:
 8010940:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010944:	4689      	mov	r9, r1
 8010946:	2101      	movs	r1, #1
 8010948:	ec57 6b10 	vmov	r6, r7, d0
 801094c:	4690      	mov	r8, r2
 801094e:	f7ff fcd5 	bl	80102fc <_Balloc>
 8010952:	4604      	mov	r4, r0
 8010954:	b930      	cbnz	r0, 8010964 <__d2b+0x24>
 8010956:	4602      	mov	r2, r0
 8010958:	4b25      	ldr	r3, [pc, #148]	; (80109f0 <__d2b+0xb0>)
 801095a:	4826      	ldr	r0, [pc, #152]	; (80109f4 <__d2b+0xb4>)
 801095c:	f240 310a 	movw	r1, #778	; 0x30a
 8010960:	f000 fc20 	bl	80111a4 <__assert_func>
 8010964:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8010968:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801096c:	bb35      	cbnz	r5, 80109bc <__d2b+0x7c>
 801096e:	2e00      	cmp	r6, #0
 8010970:	9301      	str	r3, [sp, #4]
 8010972:	d028      	beq.n	80109c6 <__d2b+0x86>
 8010974:	4668      	mov	r0, sp
 8010976:	9600      	str	r6, [sp, #0]
 8010978:	f7ff fd8c 	bl	8010494 <__lo0bits>
 801097c:	9900      	ldr	r1, [sp, #0]
 801097e:	b300      	cbz	r0, 80109c2 <__d2b+0x82>
 8010980:	9a01      	ldr	r2, [sp, #4]
 8010982:	f1c0 0320 	rsb	r3, r0, #32
 8010986:	fa02 f303 	lsl.w	r3, r2, r3
 801098a:	430b      	orrs	r3, r1
 801098c:	40c2      	lsrs	r2, r0
 801098e:	6163      	str	r3, [r4, #20]
 8010990:	9201      	str	r2, [sp, #4]
 8010992:	9b01      	ldr	r3, [sp, #4]
 8010994:	61a3      	str	r3, [r4, #24]
 8010996:	2b00      	cmp	r3, #0
 8010998:	bf14      	ite	ne
 801099a:	2202      	movne	r2, #2
 801099c:	2201      	moveq	r2, #1
 801099e:	6122      	str	r2, [r4, #16]
 80109a0:	b1d5      	cbz	r5, 80109d8 <__d2b+0x98>
 80109a2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80109a6:	4405      	add	r5, r0
 80109a8:	f8c9 5000 	str.w	r5, [r9]
 80109ac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80109b0:	f8c8 0000 	str.w	r0, [r8]
 80109b4:	4620      	mov	r0, r4
 80109b6:	b003      	add	sp, #12
 80109b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80109bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80109c0:	e7d5      	b.n	801096e <__d2b+0x2e>
 80109c2:	6161      	str	r1, [r4, #20]
 80109c4:	e7e5      	b.n	8010992 <__d2b+0x52>
 80109c6:	a801      	add	r0, sp, #4
 80109c8:	f7ff fd64 	bl	8010494 <__lo0bits>
 80109cc:	9b01      	ldr	r3, [sp, #4]
 80109ce:	6163      	str	r3, [r4, #20]
 80109d0:	2201      	movs	r2, #1
 80109d2:	6122      	str	r2, [r4, #16]
 80109d4:	3020      	adds	r0, #32
 80109d6:	e7e3      	b.n	80109a0 <__d2b+0x60>
 80109d8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80109dc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80109e0:	f8c9 0000 	str.w	r0, [r9]
 80109e4:	6918      	ldr	r0, [r3, #16]
 80109e6:	f7ff fd35 	bl	8010454 <__hi0bits>
 80109ea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80109ee:	e7df      	b.n	80109b0 <__d2b+0x70>
 80109f0:	0801171b 	.word	0x0801171b
 80109f4:	0801178c 	.word	0x0801178c

080109f8 <_calloc_r>:
 80109f8:	b513      	push	{r0, r1, r4, lr}
 80109fa:	434a      	muls	r2, r1
 80109fc:	4611      	mov	r1, r2
 80109fe:	9201      	str	r2, [sp, #4]
 8010a00:	f000 f85a 	bl	8010ab8 <_malloc_r>
 8010a04:	4604      	mov	r4, r0
 8010a06:	b118      	cbz	r0, 8010a10 <_calloc_r+0x18>
 8010a08:	9a01      	ldr	r2, [sp, #4]
 8010a0a:	2100      	movs	r1, #0
 8010a0c:	f7fd ff10 	bl	800e830 <memset>
 8010a10:	4620      	mov	r0, r4
 8010a12:	b002      	add	sp, #8
 8010a14:	bd10      	pop	{r4, pc}
	...

08010a18 <_free_r>:
 8010a18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010a1a:	2900      	cmp	r1, #0
 8010a1c:	d048      	beq.n	8010ab0 <_free_r+0x98>
 8010a1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010a22:	9001      	str	r0, [sp, #4]
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	f1a1 0404 	sub.w	r4, r1, #4
 8010a2a:	bfb8      	it	lt
 8010a2c:	18e4      	addlt	r4, r4, r3
 8010a2e:	f000 fc59 	bl	80112e4 <__malloc_lock>
 8010a32:	4a20      	ldr	r2, [pc, #128]	; (8010ab4 <_free_r+0x9c>)
 8010a34:	9801      	ldr	r0, [sp, #4]
 8010a36:	6813      	ldr	r3, [r2, #0]
 8010a38:	4615      	mov	r5, r2
 8010a3a:	b933      	cbnz	r3, 8010a4a <_free_r+0x32>
 8010a3c:	6063      	str	r3, [r4, #4]
 8010a3e:	6014      	str	r4, [r2, #0]
 8010a40:	b003      	add	sp, #12
 8010a42:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010a46:	f000 bc53 	b.w	80112f0 <__malloc_unlock>
 8010a4a:	42a3      	cmp	r3, r4
 8010a4c:	d90b      	bls.n	8010a66 <_free_r+0x4e>
 8010a4e:	6821      	ldr	r1, [r4, #0]
 8010a50:	1862      	adds	r2, r4, r1
 8010a52:	4293      	cmp	r3, r2
 8010a54:	bf04      	itt	eq
 8010a56:	681a      	ldreq	r2, [r3, #0]
 8010a58:	685b      	ldreq	r3, [r3, #4]
 8010a5a:	6063      	str	r3, [r4, #4]
 8010a5c:	bf04      	itt	eq
 8010a5e:	1852      	addeq	r2, r2, r1
 8010a60:	6022      	streq	r2, [r4, #0]
 8010a62:	602c      	str	r4, [r5, #0]
 8010a64:	e7ec      	b.n	8010a40 <_free_r+0x28>
 8010a66:	461a      	mov	r2, r3
 8010a68:	685b      	ldr	r3, [r3, #4]
 8010a6a:	b10b      	cbz	r3, 8010a70 <_free_r+0x58>
 8010a6c:	42a3      	cmp	r3, r4
 8010a6e:	d9fa      	bls.n	8010a66 <_free_r+0x4e>
 8010a70:	6811      	ldr	r1, [r2, #0]
 8010a72:	1855      	adds	r5, r2, r1
 8010a74:	42a5      	cmp	r5, r4
 8010a76:	d10b      	bne.n	8010a90 <_free_r+0x78>
 8010a78:	6824      	ldr	r4, [r4, #0]
 8010a7a:	4421      	add	r1, r4
 8010a7c:	1854      	adds	r4, r2, r1
 8010a7e:	42a3      	cmp	r3, r4
 8010a80:	6011      	str	r1, [r2, #0]
 8010a82:	d1dd      	bne.n	8010a40 <_free_r+0x28>
 8010a84:	681c      	ldr	r4, [r3, #0]
 8010a86:	685b      	ldr	r3, [r3, #4]
 8010a88:	6053      	str	r3, [r2, #4]
 8010a8a:	4421      	add	r1, r4
 8010a8c:	6011      	str	r1, [r2, #0]
 8010a8e:	e7d7      	b.n	8010a40 <_free_r+0x28>
 8010a90:	d902      	bls.n	8010a98 <_free_r+0x80>
 8010a92:	230c      	movs	r3, #12
 8010a94:	6003      	str	r3, [r0, #0]
 8010a96:	e7d3      	b.n	8010a40 <_free_r+0x28>
 8010a98:	6825      	ldr	r5, [r4, #0]
 8010a9a:	1961      	adds	r1, r4, r5
 8010a9c:	428b      	cmp	r3, r1
 8010a9e:	bf04      	itt	eq
 8010aa0:	6819      	ldreq	r1, [r3, #0]
 8010aa2:	685b      	ldreq	r3, [r3, #4]
 8010aa4:	6063      	str	r3, [r4, #4]
 8010aa6:	bf04      	itt	eq
 8010aa8:	1949      	addeq	r1, r1, r5
 8010aaa:	6021      	streq	r1, [r4, #0]
 8010aac:	6054      	str	r4, [r2, #4]
 8010aae:	e7c7      	b.n	8010a40 <_free_r+0x28>
 8010ab0:	b003      	add	sp, #12
 8010ab2:	bd30      	pop	{r4, r5, pc}
 8010ab4:	24000208 	.word	0x24000208

08010ab8 <_malloc_r>:
 8010ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010aba:	1ccd      	adds	r5, r1, #3
 8010abc:	f025 0503 	bic.w	r5, r5, #3
 8010ac0:	3508      	adds	r5, #8
 8010ac2:	2d0c      	cmp	r5, #12
 8010ac4:	bf38      	it	cc
 8010ac6:	250c      	movcc	r5, #12
 8010ac8:	2d00      	cmp	r5, #0
 8010aca:	4606      	mov	r6, r0
 8010acc:	db01      	blt.n	8010ad2 <_malloc_r+0x1a>
 8010ace:	42a9      	cmp	r1, r5
 8010ad0:	d903      	bls.n	8010ada <_malloc_r+0x22>
 8010ad2:	230c      	movs	r3, #12
 8010ad4:	6033      	str	r3, [r6, #0]
 8010ad6:	2000      	movs	r0, #0
 8010ad8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010ada:	f000 fc03 	bl	80112e4 <__malloc_lock>
 8010ade:	4921      	ldr	r1, [pc, #132]	; (8010b64 <_malloc_r+0xac>)
 8010ae0:	680a      	ldr	r2, [r1, #0]
 8010ae2:	4614      	mov	r4, r2
 8010ae4:	b99c      	cbnz	r4, 8010b0e <_malloc_r+0x56>
 8010ae6:	4f20      	ldr	r7, [pc, #128]	; (8010b68 <_malloc_r+0xb0>)
 8010ae8:	683b      	ldr	r3, [r7, #0]
 8010aea:	b923      	cbnz	r3, 8010af6 <_malloc_r+0x3e>
 8010aec:	4621      	mov	r1, r4
 8010aee:	4630      	mov	r0, r6
 8010af0:	f000 faf2 	bl	80110d8 <_sbrk_r>
 8010af4:	6038      	str	r0, [r7, #0]
 8010af6:	4629      	mov	r1, r5
 8010af8:	4630      	mov	r0, r6
 8010afa:	f000 faed 	bl	80110d8 <_sbrk_r>
 8010afe:	1c43      	adds	r3, r0, #1
 8010b00:	d123      	bne.n	8010b4a <_malloc_r+0x92>
 8010b02:	230c      	movs	r3, #12
 8010b04:	6033      	str	r3, [r6, #0]
 8010b06:	4630      	mov	r0, r6
 8010b08:	f000 fbf2 	bl	80112f0 <__malloc_unlock>
 8010b0c:	e7e3      	b.n	8010ad6 <_malloc_r+0x1e>
 8010b0e:	6823      	ldr	r3, [r4, #0]
 8010b10:	1b5b      	subs	r3, r3, r5
 8010b12:	d417      	bmi.n	8010b44 <_malloc_r+0x8c>
 8010b14:	2b0b      	cmp	r3, #11
 8010b16:	d903      	bls.n	8010b20 <_malloc_r+0x68>
 8010b18:	6023      	str	r3, [r4, #0]
 8010b1a:	441c      	add	r4, r3
 8010b1c:	6025      	str	r5, [r4, #0]
 8010b1e:	e004      	b.n	8010b2a <_malloc_r+0x72>
 8010b20:	6863      	ldr	r3, [r4, #4]
 8010b22:	42a2      	cmp	r2, r4
 8010b24:	bf0c      	ite	eq
 8010b26:	600b      	streq	r3, [r1, #0]
 8010b28:	6053      	strne	r3, [r2, #4]
 8010b2a:	4630      	mov	r0, r6
 8010b2c:	f000 fbe0 	bl	80112f0 <__malloc_unlock>
 8010b30:	f104 000b 	add.w	r0, r4, #11
 8010b34:	1d23      	adds	r3, r4, #4
 8010b36:	f020 0007 	bic.w	r0, r0, #7
 8010b3a:	1ac2      	subs	r2, r0, r3
 8010b3c:	d0cc      	beq.n	8010ad8 <_malloc_r+0x20>
 8010b3e:	1a1b      	subs	r3, r3, r0
 8010b40:	50a3      	str	r3, [r4, r2]
 8010b42:	e7c9      	b.n	8010ad8 <_malloc_r+0x20>
 8010b44:	4622      	mov	r2, r4
 8010b46:	6864      	ldr	r4, [r4, #4]
 8010b48:	e7cc      	b.n	8010ae4 <_malloc_r+0x2c>
 8010b4a:	1cc4      	adds	r4, r0, #3
 8010b4c:	f024 0403 	bic.w	r4, r4, #3
 8010b50:	42a0      	cmp	r0, r4
 8010b52:	d0e3      	beq.n	8010b1c <_malloc_r+0x64>
 8010b54:	1a21      	subs	r1, r4, r0
 8010b56:	4630      	mov	r0, r6
 8010b58:	f000 fabe 	bl	80110d8 <_sbrk_r>
 8010b5c:	3001      	adds	r0, #1
 8010b5e:	d1dd      	bne.n	8010b1c <_malloc_r+0x64>
 8010b60:	e7cf      	b.n	8010b02 <_malloc_r+0x4a>
 8010b62:	bf00      	nop
 8010b64:	24000208 	.word	0x24000208
 8010b68:	2400020c 	.word	0x2400020c

08010b6c <__ssputs_r>:
 8010b6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010b70:	688e      	ldr	r6, [r1, #8]
 8010b72:	429e      	cmp	r6, r3
 8010b74:	4682      	mov	sl, r0
 8010b76:	460c      	mov	r4, r1
 8010b78:	4690      	mov	r8, r2
 8010b7a:	461f      	mov	r7, r3
 8010b7c:	d838      	bhi.n	8010bf0 <__ssputs_r+0x84>
 8010b7e:	898a      	ldrh	r2, [r1, #12]
 8010b80:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010b84:	d032      	beq.n	8010bec <__ssputs_r+0x80>
 8010b86:	6825      	ldr	r5, [r4, #0]
 8010b88:	6909      	ldr	r1, [r1, #16]
 8010b8a:	eba5 0901 	sub.w	r9, r5, r1
 8010b8e:	6965      	ldr	r5, [r4, #20]
 8010b90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010b94:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010b98:	3301      	adds	r3, #1
 8010b9a:	444b      	add	r3, r9
 8010b9c:	106d      	asrs	r5, r5, #1
 8010b9e:	429d      	cmp	r5, r3
 8010ba0:	bf38      	it	cc
 8010ba2:	461d      	movcc	r5, r3
 8010ba4:	0553      	lsls	r3, r2, #21
 8010ba6:	d531      	bpl.n	8010c0c <__ssputs_r+0xa0>
 8010ba8:	4629      	mov	r1, r5
 8010baa:	f7ff ff85 	bl	8010ab8 <_malloc_r>
 8010bae:	4606      	mov	r6, r0
 8010bb0:	b950      	cbnz	r0, 8010bc8 <__ssputs_r+0x5c>
 8010bb2:	230c      	movs	r3, #12
 8010bb4:	f8ca 3000 	str.w	r3, [sl]
 8010bb8:	89a3      	ldrh	r3, [r4, #12]
 8010bba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010bbe:	81a3      	strh	r3, [r4, #12]
 8010bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8010bc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010bc8:	6921      	ldr	r1, [r4, #16]
 8010bca:	464a      	mov	r2, r9
 8010bcc:	f7fd fe22 	bl	800e814 <memcpy>
 8010bd0:	89a3      	ldrh	r3, [r4, #12]
 8010bd2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010bd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010bda:	81a3      	strh	r3, [r4, #12]
 8010bdc:	6126      	str	r6, [r4, #16]
 8010bde:	6165      	str	r5, [r4, #20]
 8010be0:	444e      	add	r6, r9
 8010be2:	eba5 0509 	sub.w	r5, r5, r9
 8010be6:	6026      	str	r6, [r4, #0]
 8010be8:	60a5      	str	r5, [r4, #8]
 8010bea:	463e      	mov	r6, r7
 8010bec:	42be      	cmp	r6, r7
 8010bee:	d900      	bls.n	8010bf2 <__ssputs_r+0x86>
 8010bf0:	463e      	mov	r6, r7
 8010bf2:	4632      	mov	r2, r6
 8010bf4:	6820      	ldr	r0, [r4, #0]
 8010bf6:	4641      	mov	r1, r8
 8010bf8:	f000 fb5a 	bl	80112b0 <memmove>
 8010bfc:	68a3      	ldr	r3, [r4, #8]
 8010bfe:	6822      	ldr	r2, [r4, #0]
 8010c00:	1b9b      	subs	r3, r3, r6
 8010c02:	4432      	add	r2, r6
 8010c04:	60a3      	str	r3, [r4, #8]
 8010c06:	6022      	str	r2, [r4, #0]
 8010c08:	2000      	movs	r0, #0
 8010c0a:	e7db      	b.n	8010bc4 <__ssputs_r+0x58>
 8010c0c:	462a      	mov	r2, r5
 8010c0e:	f000 fb75 	bl	80112fc <_realloc_r>
 8010c12:	4606      	mov	r6, r0
 8010c14:	2800      	cmp	r0, #0
 8010c16:	d1e1      	bne.n	8010bdc <__ssputs_r+0x70>
 8010c18:	6921      	ldr	r1, [r4, #16]
 8010c1a:	4650      	mov	r0, sl
 8010c1c:	f7ff fefc 	bl	8010a18 <_free_r>
 8010c20:	e7c7      	b.n	8010bb2 <__ssputs_r+0x46>
	...

08010c24 <_svfiprintf_r>:
 8010c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c28:	4698      	mov	r8, r3
 8010c2a:	898b      	ldrh	r3, [r1, #12]
 8010c2c:	061b      	lsls	r3, r3, #24
 8010c2e:	b09d      	sub	sp, #116	; 0x74
 8010c30:	4607      	mov	r7, r0
 8010c32:	460d      	mov	r5, r1
 8010c34:	4614      	mov	r4, r2
 8010c36:	d50e      	bpl.n	8010c56 <_svfiprintf_r+0x32>
 8010c38:	690b      	ldr	r3, [r1, #16]
 8010c3a:	b963      	cbnz	r3, 8010c56 <_svfiprintf_r+0x32>
 8010c3c:	2140      	movs	r1, #64	; 0x40
 8010c3e:	f7ff ff3b 	bl	8010ab8 <_malloc_r>
 8010c42:	6028      	str	r0, [r5, #0]
 8010c44:	6128      	str	r0, [r5, #16]
 8010c46:	b920      	cbnz	r0, 8010c52 <_svfiprintf_r+0x2e>
 8010c48:	230c      	movs	r3, #12
 8010c4a:	603b      	str	r3, [r7, #0]
 8010c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8010c50:	e0d1      	b.n	8010df6 <_svfiprintf_r+0x1d2>
 8010c52:	2340      	movs	r3, #64	; 0x40
 8010c54:	616b      	str	r3, [r5, #20]
 8010c56:	2300      	movs	r3, #0
 8010c58:	9309      	str	r3, [sp, #36]	; 0x24
 8010c5a:	2320      	movs	r3, #32
 8010c5c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010c60:	f8cd 800c 	str.w	r8, [sp, #12]
 8010c64:	2330      	movs	r3, #48	; 0x30
 8010c66:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8010e10 <_svfiprintf_r+0x1ec>
 8010c6a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010c6e:	f04f 0901 	mov.w	r9, #1
 8010c72:	4623      	mov	r3, r4
 8010c74:	469a      	mov	sl, r3
 8010c76:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010c7a:	b10a      	cbz	r2, 8010c80 <_svfiprintf_r+0x5c>
 8010c7c:	2a25      	cmp	r2, #37	; 0x25
 8010c7e:	d1f9      	bne.n	8010c74 <_svfiprintf_r+0x50>
 8010c80:	ebba 0b04 	subs.w	fp, sl, r4
 8010c84:	d00b      	beq.n	8010c9e <_svfiprintf_r+0x7a>
 8010c86:	465b      	mov	r3, fp
 8010c88:	4622      	mov	r2, r4
 8010c8a:	4629      	mov	r1, r5
 8010c8c:	4638      	mov	r0, r7
 8010c8e:	f7ff ff6d 	bl	8010b6c <__ssputs_r>
 8010c92:	3001      	adds	r0, #1
 8010c94:	f000 80aa 	beq.w	8010dec <_svfiprintf_r+0x1c8>
 8010c98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010c9a:	445a      	add	r2, fp
 8010c9c:	9209      	str	r2, [sp, #36]	; 0x24
 8010c9e:	f89a 3000 	ldrb.w	r3, [sl]
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	f000 80a2 	beq.w	8010dec <_svfiprintf_r+0x1c8>
 8010ca8:	2300      	movs	r3, #0
 8010caa:	f04f 32ff 	mov.w	r2, #4294967295
 8010cae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010cb2:	f10a 0a01 	add.w	sl, sl, #1
 8010cb6:	9304      	str	r3, [sp, #16]
 8010cb8:	9307      	str	r3, [sp, #28]
 8010cba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010cbe:	931a      	str	r3, [sp, #104]	; 0x68
 8010cc0:	4654      	mov	r4, sl
 8010cc2:	2205      	movs	r2, #5
 8010cc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010cc8:	4851      	ldr	r0, [pc, #324]	; (8010e10 <_svfiprintf_r+0x1ec>)
 8010cca:	f7ef fb11 	bl	80002f0 <memchr>
 8010cce:	9a04      	ldr	r2, [sp, #16]
 8010cd0:	b9d8      	cbnz	r0, 8010d0a <_svfiprintf_r+0xe6>
 8010cd2:	06d0      	lsls	r0, r2, #27
 8010cd4:	bf44      	itt	mi
 8010cd6:	2320      	movmi	r3, #32
 8010cd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010cdc:	0711      	lsls	r1, r2, #28
 8010cde:	bf44      	itt	mi
 8010ce0:	232b      	movmi	r3, #43	; 0x2b
 8010ce2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010ce6:	f89a 3000 	ldrb.w	r3, [sl]
 8010cea:	2b2a      	cmp	r3, #42	; 0x2a
 8010cec:	d015      	beq.n	8010d1a <_svfiprintf_r+0xf6>
 8010cee:	9a07      	ldr	r2, [sp, #28]
 8010cf0:	4654      	mov	r4, sl
 8010cf2:	2000      	movs	r0, #0
 8010cf4:	f04f 0c0a 	mov.w	ip, #10
 8010cf8:	4621      	mov	r1, r4
 8010cfa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010cfe:	3b30      	subs	r3, #48	; 0x30
 8010d00:	2b09      	cmp	r3, #9
 8010d02:	d94e      	bls.n	8010da2 <_svfiprintf_r+0x17e>
 8010d04:	b1b0      	cbz	r0, 8010d34 <_svfiprintf_r+0x110>
 8010d06:	9207      	str	r2, [sp, #28]
 8010d08:	e014      	b.n	8010d34 <_svfiprintf_r+0x110>
 8010d0a:	eba0 0308 	sub.w	r3, r0, r8
 8010d0e:	fa09 f303 	lsl.w	r3, r9, r3
 8010d12:	4313      	orrs	r3, r2
 8010d14:	9304      	str	r3, [sp, #16]
 8010d16:	46a2      	mov	sl, r4
 8010d18:	e7d2      	b.n	8010cc0 <_svfiprintf_r+0x9c>
 8010d1a:	9b03      	ldr	r3, [sp, #12]
 8010d1c:	1d19      	adds	r1, r3, #4
 8010d1e:	681b      	ldr	r3, [r3, #0]
 8010d20:	9103      	str	r1, [sp, #12]
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	bfbb      	ittet	lt
 8010d26:	425b      	neglt	r3, r3
 8010d28:	f042 0202 	orrlt.w	r2, r2, #2
 8010d2c:	9307      	strge	r3, [sp, #28]
 8010d2e:	9307      	strlt	r3, [sp, #28]
 8010d30:	bfb8      	it	lt
 8010d32:	9204      	strlt	r2, [sp, #16]
 8010d34:	7823      	ldrb	r3, [r4, #0]
 8010d36:	2b2e      	cmp	r3, #46	; 0x2e
 8010d38:	d10c      	bne.n	8010d54 <_svfiprintf_r+0x130>
 8010d3a:	7863      	ldrb	r3, [r4, #1]
 8010d3c:	2b2a      	cmp	r3, #42	; 0x2a
 8010d3e:	d135      	bne.n	8010dac <_svfiprintf_r+0x188>
 8010d40:	9b03      	ldr	r3, [sp, #12]
 8010d42:	1d1a      	adds	r2, r3, #4
 8010d44:	681b      	ldr	r3, [r3, #0]
 8010d46:	9203      	str	r2, [sp, #12]
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	bfb8      	it	lt
 8010d4c:	f04f 33ff 	movlt.w	r3, #4294967295
 8010d50:	3402      	adds	r4, #2
 8010d52:	9305      	str	r3, [sp, #20]
 8010d54:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010e20 <_svfiprintf_r+0x1fc>
 8010d58:	7821      	ldrb	r1, [r4, #0]
 8010d5a:	2203      	movs	r2, #3
 8010d5c:	4650      	mov	r0, sl
 8010d5e:	f7ef fac7 	bl	80002f0 <memchr>
 8010d62:	b140      	cbz	r0, 8010d76 <_svfiprintf_r+0x152>
 8010d64:	2340      	movs	r3, #64	; 0x40
 8010d66:	eba0 000a 	sub.w	r0, r0, sl
 8010d6a:	fa03 f000 	lsl.w	r0, r3, r0
 8010d6e:	9b04      	ldr	r3, [sp, #16]
 8010d70:	4303      	orrs	r3, r0
 8010d72:	3401      	adds	r4, #1
 8010d74:	9304      	str	r3, [sp, #16]
 8010d76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010d7a:	4826      	ldr	r0, [pc, #152]	; (8010e14 <_svfiprintf_r+0x1f0>)
 8010d7c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010d80:	2206      	movs	r2, #6
 8010d82:	f7ef fab5 	bl	80002f0 <memchr>
 8010d86:	2800      	cmp	r0, #0
 8010d88:	d038      	beq.n	8010dfc <_svfiprintf_r+0x1d8>
 8010d8a:	4b23      	ldr	r3, [pc, #140]	; (8010e18 <_svfiprintf_r+0x1f4>)
 8010d8c:	bb1b      	cbnz	r3, 8010dd6 <_svfiprintf_r+0x1b2>
 8010d8e:	9b03      	ldr	r3, [sp, #12]
 8010d90:	3307      	adds	r3, #7
 8010d92:	f023 0307 	bic.w	r3, r3, #7
 8010d96:	3308      	adds	r3, #8
 8010d98:	9303      	str	r3, [sp, #12]
 8010d9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d9c:	4433      	add	r3, r6
 8010d9e:	9309      	str	r3, [sp, #36]	; 0x24
 8010da0:	e767      	b.n	8010c72 <_svfiprintf_r+0x4e>
 8010da2:	fb0c 3202 	mla	r2, ip, r2, r3
 8010da6:	460c      	mov	r4, r1
 8010da8:	2001      	movs	r0, #1
 8010daa:	e7a5      	b.n	8010cf8 <_svfiprintf_r+0xd4>
 8010dac:	2300      	movs	r3, #0
 8010dae:	3401      	adds	r4, #1
 8010db0:	9305      	str	r3, [sp, #20]
 8010db2:	4619      	mov	r1, r3
 8010db4:	f04f 0c0a 	mov.w	ip, #10
 8010db8:	4620      	mov	r0, r4
 8010dba:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010dbe:	3a30      	subs	r2, #48	; 0x30
 8010dc0:	2a09      	cmp	r2, #9
 8010dc2:	d903      	bls.n	8010dcc <_svfiprintf_r+0x1a8>
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	d0c5      	beq.n	8010d54 <_svfiprintf_r+0x130>
 8010dc8:	9105      	str	r1, [sp, #20]
 8010dca:	e7c3      	b.n	8010d54 <_svfiprintf_r+0x130>
 8010dcc:	fb0c 2101 	mla	r1, ip, r1, r2
 8010dd0:	4604      	mov	r4, r0
 8010dd2:	2301      	movs	r3, #1
 8010dd4:	e7f0      	b.n	8010db8 <_svfiprintf_r+0x194>
 8010dd6:	ab03      	add	r3, sp, #12
 8010dd8:	9300      	str	r3, [sp, #0]
 8010dda:	462a      	mov	r2, r5
 8010ddc:	4b0f      	ldr	r3, [pc, #60]	; (8010e1c <_svfiprintf_r+0x1f8>)
 8010dde:	a904      	add	r1, sp, #16
 8010de0:	4638      	mov	r0, r7
 8010de2:	f7fd fdbd 	bl	800e960 <_printf_float>
 8010de6:	1c42      	adds	r2, r0, #1
 8010de8:	4606      	mov	r6, r0
 8010dea:	d1d6      	bne.n	8010d9a <_svfiprintf_r+0x176>
 8010dec:	89ab      	ldrh	r3, [r5, #12]
 8010dee:	065b      	lsls	r3, r3, #25
 8010df0:	f53f af2c 	bmi.w	8010c4c <_svfiprintf_r+0x28>
 8010df4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010df6:	b01d      	add	sp, #116	; 0x74
 8010df8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010dfc:	ab03      	add	r3, sp, #12
 8010dfe:	9300      	str	r3, [sp, #0]
 8010e00:	462a      	mov	r2, r5
 8010e02:	4b06      	ldr	r3, [pc, #24]	; (8010e1c <_svfiprintf_r+0x1f8>)
 8010e04:	a904      	add	r1, sp, #16
 8010e06:	4638      	mov	r0, r7
 8010e08:	f7fe f836 	bl	800ee78 <_printf_i>
 8010e0c:	e7eb      	b.n	8010de6 <_svfiprintf_r+0x1c2>
 8010e0e:	bf00      	nop
 8010e10:	080118ec 	.word	0x080118ec
 8010e14:	080118f6 	.word	0x080118f6
 8010e18:	0800e961 	.word	0x0800e961
 8010e1c:	08010b6d 	.word	0x08010b6d
 8010e20:	080118f2 	.word	0x080118f2

08010e24 <__sfputc_r>:
 8010e24:	6893      	ldr	r3, [r2, #8]
 8010e26:	3b01      	subs	r3, #1
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	b410      	push	{r4}
 8010e2c:	6093      	str	r3, [r2, #8]
 8010e2e:	da08      	bge.n	8010e42 <__sfputc_r+0x1e>
 8010e30:	6994      	ldr	r4, [r2, #24]
 8010e32:	42a3      	cmp	r3, r4
 8010e34:	db01      	blt.n	8010e3a <__sfputc_r+0x16>
 8010e36:	290a      	cmp	r1, #10
 8010e38:	d103      	bne.n	8010e42 <__sfputc_r+0x1e>
 8010e3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010e3e:	f7fe b961 	b.w	800f104 <__swbuf_r>
 8010e42:	6813      	ldr	r3, [r2, #0]
 8010e44:	1c58      	adds	r0, r3, #1
 8010e46:	6010      	str	r0, [r2, #0]
 8010e48:	7019      	strb	r1, [r3, #0]
 8010e4a:	4608      	mov	r0, r1
 8010e4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010e50:	4770      	bx	lr

08010e52 <__sfputs_r>:
 8010e52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e54:	4606      	mov	r6, r0
 8010e56:	460f      	mov	r7, r1
 8010e58:	4614      	mov	r4, r2
 8010e5a:	18d5      	adds	r5, r2, r3
 8010e5c:	42ac      	cmp	r4, r5
 8010e5e:	d101      	bne.n	8010e64 <__sfputs_r+0x12>
 8010e60:	2000      	movs	r0, #0
 8010e62:	e007      	b.n	8010e74 <__sfputs_r+0x22>
 8010e64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010e68:	463a      	mov	r2, r7
 8010e6a:	4630      	mov	r0, r6
 8010e6c:	f7ff ffda 	bl	8010e24 <__sfputc_r>
 8010e70:	1c43      	adds	r3, r0, #1
 8010e72:	d1f3      	bne.n	8010e5c <__sfputs_r+0xa>
 8010e74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010e78 <_vfiprintf_r>:
 8010e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e7c:	460d      	mov	r5, r1
 8010e7e:	b09d      	sub	sp, #116	; 0x74
 8010e80:	4614      	mov	r4, r2
 8010e82:	4698      	mov	r8, r3
 8010e84:	4606      	mov	r6, r0
 8010e86:	b118      	cbz	r0, 8010e90 <_vfiprintf_r+0x18>
 8010e88:	6983      	ldr	r3, [r0, #24]
 8010e8a:	b90b      	cbnz	r3, 8010e90 <_vfiprintf_r+0x18>
 8010e8c:	f7ff f924 	bl	80100d8 <__sinit>
 8010e90:	4b89      	ldr	r3, [pc, #548]	; (80110b8 <_vfiprintf_r+0x240>)
 8010e92:	429d      	cmp	r5, r3
 8010e94:	d11b      	bne.n	8010ece <_vfiprintf_r+0x56>
 8010e96:	6875      	ldr	r5, [r6, #4]
 8010e98:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010e9a:	07d9      	lsls	r1, r3, #31
 8010e9c:	d405      	bmi.n	8010eaa <_vfiprintf_r+0x32>
 8010e9e:	89ab      	ldrh	r3, [r5, #12]
 8010ea0:	059a      	lsls	r2, r3, #22
 8010ea2:	d402      	bmi.n	8010eaa <_vfiprintf_r+0x32>
 8010ea4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010ea6:	f7ff f9ba 	bl	801021e <__retarget_lock_acquire_recursive>
 8010eaa:	89ab      	ldrh	r3, [r5, #12]
 8010eac:	071b      	lsls	r3, r3, #28
 8010eae:	d501      	bpl.n	8010eb4 <_vfiprintf_r+0x3c>
 8010eb0:	692b      	ldr	r3, [r5, #16]
 8010eb2:	b9eb      	cbnz	r3, 8010ef0 <_vfiprintf_r+0x78>
 8010eb4:	4629      	mov	r1, r5
 8010eb6:	4630      	mov	r0, r6
 8010eb8:	f7fe f976 	bl	800f1a8 <__swsetup_r>
 8010ebc:	b1c0      	cbz	r0, 8010ef0 <_vfiprintf_r+0x78>
 8010ebe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010ec0:	07dc      	lsls	r4, r3, #31
 8010ec2:	d50e      	bpl.n	8010ee2 <_vfiprintf_r+0x6a>
 8010ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8010ec8:	b01d      	add	sp, #116	; 0x74
 8010eca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ece:	4b7b      	ldr	r3, [pc, #492]	; (80110bc <_vfiprintf_r+0x244>)
 8010ed0:	429d      	cmp	r5, r3
 8010ed2:	d101      	bne.n	8010ed8 <_vfiprintf_r+0x60>
 8010ed4:	68b5      	ldr	r5, [r6, #8]
 8010ed6:	e7df      	b.n	8010e98 <_vfiprintf_r+0x20>
 8010ed8:	4b79      	ldr	r3, [pc, #484]	; (80110c0 <_vfiprintf_r+0x248>)
 8010eda:	429d      	cmp	r5, r3
 8010edc:	bf08      	it	eq
 8010ede:	68f5      	ldreq	r5, [r6, #12]
 8010ee0:	e7da      	b.n	8010e98 <_vfiprintf_r+0x20>
 8010ee2:	89ab      	ldrh	r3, [r5, #12]
 8010ee4:	0598      	lsls	r0, r3, #22
 8010ee6:	d4ed      	bmi.n	8010ec4 <_vfiprintf_r+0x4c>
 8010ee8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010eea:	f7ff f999 	bl	8010220 <__retarget_lock_release_recursive>
 8010eee:	e7e9      	b.n	8010ec4 <_vfiprintf_r+0x4c>
 8010ef0:	2300      	movs	r3, #0
 8010ef2:	9309      	str	r3, [sp, #36]	; 0x24
 8010ef4:	2320      	movs	r3, #32
 8010ef6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010efa:	f8cd 800c 	str.w	r8, [sp, #12]
 8010efe:	2330      	movs	r3, #48	; 0x30
 8010f00:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80110c4 <_vfiprintf_r+0x24c>
 8010f04:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010f08:	f04f 0901 	mov.w	r9, #1
 8010f0c:	4623      	mov	r3, r4
 8010f0e:	469a      	mov	sl, r3
 8010f10:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010f14:	b10a      	cbz	r2, 8010f1a <_vfiprintf_r+0xa2>
 8010f16:	2a25      	cmp	r2, #37	; 0x25
 8010f18:	d1f9      	bne.n	8010f0e <_vfiprintf_r+0x96>
 8010f1a:	ebba 0b04 	subs.w	fp, sl, r4
 8010f1e:	d00b      	beq.n	8010f38 <_vfiprintf_r+0xc0>
 8010f20:	465b      	mov	r3, fp
 8010f22:	4622      	mov	r2, r4
 8010f24:	4629      	mov	r1, r5
 8010f26:	4630      	mov	r0, r6
 8010f28:	f7ff ff93 	bl	8010e52 <__sfputs_r>
 8010f2c:	3001      	adds	r0, #1
 8010f2e:	f000 80aa 	beq.w	8011086 <_vfiprintf_r+0x20e>
 8010f32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010f34:	445a      	add	r2, fp
 8010f36:	9209      	str	r2, [sp, #36]	; 0x24
 8010f38:	f89a 3000 	ldrb.w	r3, [sl]
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	f000 80a2 	beq.w	8011086 <_vfiprintf_r+0x20e>
 8010f42:	2300      	movs	r3, #0
 8010f44:	f04f 32ff 	mov.w	r2, #4294967295
 8010f48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010f4c:	f10a 0a01 	add.w	sl, sl, #1
 8010f50:	9304      	str	r3, [sp, #16]
 8010f52:	9307      	str	r3, [sp, #28]
 8010f54:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010f58:	931a      	str	r3, [sp, #104]	; 0x68
 8010f5a:	4654      	mov	r4, sl
 8010f5c:	2205      	movs	r2, #5
 8010f5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010f62:	4858      	ldr	r0, [pc, #352]	; (80110c4 <_vfiprintf_r+0x24c>)
 8010f64:	f7ef f9c4 	bl	80002f0 <memchr>
 8010f68:	9a04      	ldr	r2, [sp, #16]
 8010f6a:	b9d8      	cbnz	r0, 8010fa4 <_vfiprintf_r+0x12c>
 8010f6c:	06d1      	lsls	r1, r2, #27
 8010f6e:	bf44      	itt	mi
 8010f70:	2320      	movmi	r3, #32
 8010f72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010f76:	0713      	lsls	r3, r2, #28
 8010f78:	bf44      	itt	mi
 8010f7a:	232b      	movmi	r3, #43	; 0x2b
 8010f7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010f80:	f89a 3000 	ldrb.w	r3, [sl]
 8010f84:	2b2a      	cmp	r3, #42	; 0x2a
 8010f86:	d015      	beq.n	8010fb4 <_vfiprintf_r+0x13c>
 8010f88:	9a07      	ldr	r2, [sp, #28]
 8010f8a:	4654      	mov	r4, sl
 8010f8c:	2000      	movs	r0, #0
 8010f8e:	f04f 0c0a 	mov.w	ip, #10
 8010f92:	4621      	mov	r1, r4
 8010f94:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010f98:	3b30      	subs	r3, #48	; 0x30
 8010f9a:	2b09      	cmp	r3, #9
 8010f9c:	d94e      	bls.n	801103c <_vfiprintf_r+0x1c4>
 8010f9e:	b1b0      	cbz	r0, 8010fce <_vfiprintf_r+0x156>
 8010fa0:	9207      	str	r2, [sp, #28]
 8010fa2:	e014      	b.n	8010fce <_vfiprintf_r+0x156>
 8010fa4:	eba0 0308 	sub.w	r3, r0, r8
 8010fa8:	fa09 f303 	lsl.w	r3, r9, r3
 8010fac:	4313      	orrs	r3, r2
 8010fae:	9304      	str	r3, [sp, #16]
 8010fb0:	46a2      	mov	sl, r4
 8010fb2:	e7d2      	b.n	8010f5a <_vfiprintf_r+0xe2>
 8010fb4:	9b03      	ldr	r3, [sp, #12]
 8010fb6:	1d19      	adds	r1, r3, #4
 8010fb8:	681b      	ldr	r3, [r3, #0]
 8010fba:	9103      	str	r1, [sp, #12]
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	bfbb      	ittet	lt
 8010fc0:	425b      	neglt	r3, r3
 8010fc2:	f042 0202 	orrlt.w	r2, r2, #2
 8010fc6:	9307      	strge	r3, [sp, #28]
 8010fc8:	9307      	strlt	r3, [sp, #28]
 8010fca:	bfb8      	it	lt
 8010fcc:	9204      	strlt	r2, [sp, #16]
 8010fce:	7823      	ldrb	r3, [r4, #0]
 8010fd0:	2b2e      	cmp	r3, #46	; 0x2e
 8010fd2:	d10c      	bne.n	8010fee <_vfiprintf_r+0x176>
 8010fd4:	7863      	ldrb	r3, [r4, #1]
 8010fd6:	2b2a      	cmp	r3, #42	; 0x2a
 8010fd8:	d135      	bne.n	8011046 <_vfiprintf_r+0x1ce>
 8010fda:	9b03      	ldr	r3, [sp, #12]
 8010fdc:	1d1a      	adds	r2, r3, #4
 8010fde:	681b      	ldr	r3, [r3, #0]
 8010fe0:	9203      	str	r2, [sp, #12]
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	bfb8      	it	lt
 8010fe6:	f04f 33ff 	movlt.w	r3, #4294967295
 8010fea:	3402      	adds	r4, #2
 8010fec:	9305      	str	r3, [sp, #20]
 8010fee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80110d4 <_vfiprintf_r+0x25c>
 8010ff2:	7821      	ldrb	r1, [r4, #0]
 8010ff4:	2203      	movs	r2, #3
 8010ff6:	4650      	mov	r0, sl
 8010ff8:	f7ef f97a 	bl	80002f0 <memchr>
 8010ffc:	b140      	cbz	r0, 8011010 <_vfiprintf_r+0x198>
 8010ffe:	2340      	movs	r3, #64	; 0x40
 8011000:	eba0 000a 	sub.w	r0, r0, sl
 8011004:	fa03 f000 	lsl.w	r0, r3, r0
 8011008:	9b04      	ldr	r3, [sp, #16]
 801100a:	4303      	orrs	r3, r0
 801100c:	3401      	adds	r4, #1
 801100e:	9304      	str	r3, [sp, #16]
 8011010:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011014:	482c      	ldr	r0, [pc, #176]	; (80110c8 <_vfiprintf_r+0x250>)
 8011016:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801101a:	2206      	movs	r2, #6
 801101c:	f7ef f968 	bl	80002f0 <memchr>
 8011020:	2800      	cmp	r0, #0
 8011022:	d03f      	beq.n	80110a4 <_vfiprintf_r+0x22c>
 8011024:	4b29      	ldr	r3, [pc, #164]	; (80110cc <_vfiprintf_r+0x254>)
 8011026:	bb1b      	cbnz	r3, 8011070 <_vfiprintf_r+0x1f8>
 8011028:	9b03      	ldr	r3, [sp, #12]
 801102a:	3307      	adds	r3, #7
 801102c:	f023 0307 	bic.w	r3, r3, #7
 8011030:	3308      	adds	r3, #8
 8011032:	9303      	str	r3, [sp, #12]
 8011034:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011036:	443b      	add	r3, r7
 8011038:	9309      	str	r3, [sp, #36]	; 0x24
 801103a:	e767      	b.n	8010f0c <_vfiprintf_r+0x94>
 801103c:	fb0c 3202 	mla	r2, ip, r2, r3
 8011040:	460c      	mov	r4, r1
 8011042:	2001      	movs	r0, #1
 8011044:	e7a5      	b.n	8010f92 <_vfiprintf_r+0x11a>
 8011046:	2300      	movs	r3, #0
 8011048:	3401      	adds	r4, #1
 801104a:	9305      	str	r3, [sp, #20]
 801104c:	4619      	mov	r1, r3
 801104e:	f04f 0c0a 	mov.w	ip, #10
 8011052:	4620      	mov	r0, r4
 8011054:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011058:	3a30      	subs	r2, #48	; 0x30
 801105a:	2a09      	cmp	r2, #9
 801105c:	d903      	bls.n	8011066 <_vfiprintf_r+0x1ee>
 801105e:	2b00      	cmp	r3, #0
 8011060:	d0c5      	beq.n	8010fee <_vfiprintf_r+0x176>
 8011062:	9105      	str	r1, [sp, #20]
 8011064:	e7c3      	b.n	8010fee <_vfiprintf_r+0x176>
 8011066:	fb0c 2101 	mla	r1, ip, r1, r2
 801106a:	4604      	mov	r4, r0
 801106c:	2301      	movs	r3, #1
 801106e:	e7f0      	b.n	8011052 <_vfiprintf_r+0x1da>
 8011070:	ab03      	add	r3, sp, #12
 8011072:	9300      	str	r3, [sp, #0]
 8011074:	462a      	mov	r2, r5
 8011076:	4b16      	ldr	r3, [pc, #88]	; (80110d0 <_vfiprintf_r+0x258>)
 8011078:	a904      	add	r1, sp, #16
 801107a:	4630      	mov	r0, r6
 801107c:	f7fd fc70 	bl	800e960 <_printf_float>
 8011080:	4607      	mov	r7, r0
 8011082:	1c78      	adds	r0, r7, #1
 8011084:	d1d6      	bne.n	8011034 <_vfiprintf_r+0x1bc>
 8011086:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011088:	07d9      	lsls	r1, r3, #31
 801108a:	d405      	bmi.n	8011098 <_vfiprintf_r+0x220>
 801108c:	89ab      	ldrh	r3, [r5, #12]
 801108e:	059a      	lsls	r2, r3, #22
 8011090:	d402      	bmi.n	8011098 <_vfiprintf_r+0x220>
 8011092:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011094:	f7ff f8c4 	bl	8010220 <__retarget_lock_release_recursive>
 8011098:	89ab      	ldrh	r3, [r5, #12]
 801109a:	065b      	lsls	r3, r3, #25
 801109c:	f53f af12 	bmi.w	8010ec4 <_vfiprintf_r+0x4c>
 80110a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80110a2:	e711      	b.n	8010ec8 <_vfiprintf_r+0x50>
 80110a4:	ab03      	add	r3, sp, #12
 80110a6:	9300      	str	r3, [sp, #0]
 80110a8:	462a      	mov	r2, r5
 80110aa:	4b09      	ldr	r3, [pc, #36]	; (80110d0 <_vfiprintf_r+0x258>)
 80110ac:	a904      	add	r1, sp, #16
 80110ae:	4630      	mov	r0, r6
 80110b0:	f7fd fee2 	bl	800ee78 <_printf_i>
 80110b4:	e7e4      	b.n	8011080 <_vfiprintf_r+0x208>
 80110b6:	bf00      	nop
 80110b8:	0801174c 	.word	0x0801174c
 80110bc:	0801176c 	.word	0x0801176c
 80110c0:	0801172c 	.word	0x0801172c
 80110c4:	080118ec 	.word	0x080118ec
 80110c8:	080118f6 	.word	0x080118f6
 80110cc:	0800e961 	.word	0x0800e961
 80110d0:	08010e53 	.word	0x08010e53
 80110d4:	080118f2 	.word	0x080118f2

080110d8 <_sbrk_r>:
 80110d8:	b538      	push	{r3, r4, r5, lr}
 80110da:	4d06      	ldr	r5, [pc, #24]	; (80110f4 <_sbrk_r+0x1c>)
 80110dc:	2300      	movs	r3, #0
 80110de:	4604      	mov	r4, r0
 80110e0:	4608      	mov	r0, r1
 80110e2:	602b      	str	r3, [r5, #0]
 80110e4:	f7f1 ffd6 	bl	8003094 <_sbrk>
 80110e8:	1c43      	adds	r3, r0, #1
 80110ea:	d102      	bne.n	80110f2 <_sbrk_r+0x1a>
 80110ec:	682b      	ldr	r3, [r5, #0]
 80110ee:	b103      	cbz	r3, 80110f2 <_sbrk_r+0x1a>
 80110f0:	6023      	str	r3, [r4, #0]
 80110f2:	bd38      	pop	{r3, r4, r5, pc}
 80110f4:	24000c70 	.word	0x24000c70

080110f8 <__sread>:
 80110f8:	b510      	push	{r4, lr}
 80110fa:	460c      	mov	r4, r1
 80110fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011100:	f000 f922 	bl	8011348 <_read_r>
 8011104:	2800      	cmp	r0, #0
 8011106:	bfab      	itete	ge
 8011108:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801110a:	89a3      	ldrhlt	r3, [r4, #12]
 801110c:	181b      	addge	r3, r3, r0
 801110e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011112:	bfac      	ite	ge
 8011114:	6563      	strge	r3, [r4, #84]	; 0x54
 8011116:	81a3      	strhlt	r3, [r4, #12]
 8011118:	bd10      	pop	{r4, pc}

0801111a <__swrite>:
 801111a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801111e:	461f      	mov	r7, r3
 8011120:	898b      	ldrh	r3, [r1, #12]
 8011122:	05db      	lsls	r3, r3, #23
 8011124:	4605      	mov	r5, r0
 8011126:	460c      	mov	r4, r1
 8011128:	4616      	mov	r6, r2
 801112a:	d505      	bpl.n	8011138 <__swrite+0x1e>
 801112c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011130:	2302      	movs	r3, #2
 8011132:	2200      	movs	r2, #0
 8011134:	f000 f898 	bl	8011268 <_lseek_r>
 8011138:	89a3      	ldrh	r3, [r4, #12]
 801113a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801113e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011142:	81a3      	strh	r3, [r4, #12]
 8011144:	4632      	mov	r2, r6
 8011146:	463b      	mov	r3, r7
 8011148:	4628      	mov	r0, r5
 801114a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801114e:	f000 b817 	b.w	8011180 <_write_r>

08011152 <__sseek>:
 8011152:	b510      	push	{r4, lr}
 8011154:	460c      	mov	r4, r1
 8011156:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801115a:	f000 f885 	bl	8011268 <_lseek_r>
 801115e:	1c43      	adds	r3, r0, #1
 8011160:	89a3      	ldrh	r3, [r4, #12]
 8011162:	bf15      	itete	ne
 8011164:	6560      	strne	r0, [r4, #84]	; 0x54
 8011166:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801116a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801116e:	81a3      	strheq	r3, [r4, #12]
 8011170:	bf18      	it	ne
 8011172:	81a3      	strhne	r3, [r4, #12]
 8011174:	bd10      	pop	{r4, pc}

08011176 <__sclose>:
 8011176:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801117a:	f000 b831 	b.w	80111e0 <_close_r>
	...

08011180 <_write_r>:
 8011180:	b538      	push	{r3, r4, r5, lr}
 8011182:	4d07      	ldr	r5, [pc, #28]	; (80111a0 <_write_r+0x20>)
 8011184:	4604      	mov	r4, r0
 8011186:	4608      	mov	r0, r1
 8011188:	4611      	mov	r1, r2
 801118a:	2200      	movs	r2, #0
 801118c:	602a      	str	r2, [r5, #0]
 801118e:	461a      	mov	r2, r3
 8011190:	f7f1 ff2f 	bl	8002ff2 <_write>
 8011194:	1c43      	adds	r3, r0, #1
 8011196:	d102      	bne.n	801119e <_write_r+0x1e>
 8011198:	682b      	ldr	r3, [r5, #0]
 801119a:	b103      	cbz	r3, 801119e <_write_r+0x1e>
 801119c:	6023      	str	r3, [r4, #0]
 801119e:	bd38      	pop	{r3, r4, r5, pc}
 80111a0:	24000c70 	.word	0x24000c70

080111a4 <__assert_func>:
 80111a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80111a6:	4614      	mov	r4, r2
 80111a8:	461a      	mov	r2, r3
 80111aa:	4b09      	ldr	r3, [pc, #36]	; (80111d0 <__assert_func+0x2c>)
 80111ac:	681b      	ldr	r3, [r3, #0]
 80111ae:	4605      	mov	r5, r0
 80111b0:	68d8      	ldr	r0, [r3, #12]
 80111b2:	b14c      	cbz	r4, 80111c8 <__assert_func+0x24>
 80111b4:	4b07      	ldr	r3, [pc, #28]	; (80111d4 <__assert_func+0x30>)
 80111b6:	9100      	str	r1, [sp, #0]
 80111b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80111bc:	4906      	ldr	r1, [pc, #24]	; (80111d8 <__assert_func+0x34>)
 80111be:	462b      	mov	r3, r5
 80111c0:	f000 f81e 	bl	8011200 <fiprintf>
 80111c4:	f000 f8df 	bl	8011386 <abort>
 80111c8:	4b04      	ldr	r3, [pc, #16]	; (80111dc <__assert_func+0x38>)
 80111ca:	461c      	mov	r4, r3
 80111cc:	e7f3      	b.n	80111b6 <__assert_func+0x12>
 80111ce:	bf00      	nop
 80111d0:	24000010 	.word	0x24000010
 80111d4:	080118fd 	.word	0x080118fd
 80111d8:	0801190a 	.word	0x0801190a
 80111dc:	08011938 	.word	0x08011938

080111e0 <_close_r>:
 80111e0:	b538      	push	{r3, r4, r5, lr}
 80111e2:	4d06      	ldr	r5, [pc, #24]	; (80111fc <_close_r+0x1c>)
 80111e4:	2300      	movs	r3, #0
 80111e6:	4604      	mov	r4, r0
 80111e8:	4608      	mov	r0, r1
 80111ea:	602b      	str	r3, [r5, #0]
 80111ec:	f7f1 ff1d 	bl	800302a <_close>
 80111f0:	1c43      	adds	r3, r0, #1
 80111f2:	d102      	bne.n	80111fa <_close_r+0x1a>
 80111f4:	682b      	ldr	r3, [r5, #0]
 80111f6:	b103      	cbz	r3, 80111fa <_close_r+0x1a>
 80111f8:	6023      	str	r3, [r4, #0]
 80111fa:	bd38      	pop	{r3, r4, r5, pc}
 80111fc:	24000c70 	.word	0x24000c70

08011200 <fiprintf>:
 8011200:	b40e      	push	{r1, r2, r3}
 8011202:	b503      	push	{r0, r1, lr}
 8011204:	4601      	mov	r1, r0
 8011206:	ab03      	add	r3, sp, #12
 8011208:	4805      	ldr	r0, [pc, #20]	; (8011220 <fiprintf+0x20>)
 801120a:	f853 2b04 	ldr.w	r2, [r3], #4
 801120e:	6800      	ldr	r0, [r0, #0]
 8011210:	9301      	str	r3, [sp, #4]
 8011212:	f7ff fe31 	bl	8010e78 <_vfiprintf_r>
 8011216:	b002      	add	sp, #8
 8011218:	f85d eb04 	ldr.w	lr, [sp], #4
 801121c:	b003      	add	sp, #12
 801121e:	4770      	bx	lr
 8011220:	24000010 	.word	0x24000010

08011224 <_fstat_r>:
 8011224:	b538      	push	{r3, r4, r5, lr}
 8011226:	4d07      	ldr	r5, [pc, #28]	; (8011244 <_fstat_r+0x20>)
 8011228:	2300      	movs	r3, #0
 801122a:	4604      	mov	r4, r0
 801122c:	4608      	mov	r0, r1
 801122e:	4611      	mov	r1, r2
 8011230:	602b      	str	r3, [r5, #0]
 8011232:	f7f1 ff06 	bl	8003042 <_fstat>
 8011236:	1c43      	adds	r3, r0, #1
 8011238:	d102      	bne.n	8011240 <_fstat_r+0x1c>
 801123a:	682b      	ldr	r3, [r5, #0]
 801123c:	b103      	cbz	r3, 8011240 <_fstat_r+0x1c>
 801123e:	6023      	str	r3, [r4, #0]
 8011240:	bd38      	pop	{r3, r4, r5, pc}
 8011242:	bf00      	nop
 8011244:	24000c70 	.word	0x24000c70

08011248 <_isatty_r>:
 8011248:	b538      	push	{r3, r4, r5, lr}
 801124a:	4d06      	ldr	r5, [pc, #24]	; (8011264 <_isatty_r+0x1c>)
 801124c:	2300      	movs	r3, #0
 801124e:	4604      	mov	r4, r0
 8011250:	4608      	mov	r0, r1
 8011252:	602b      	str	r3, [r5, #0]
 8011254:	f7f1 ff05 	bl	8003062 <_isatty>
 8011258:	1c43      	adds	r3, r0, #1
 801125a:	d102      	bne.n	8011262 <_isatty_r+0x1a>
 801125c:	682b      	ldr	r3, [r5, #0]
 801125e:	b103      	cbz	r3, 8011262 <_isatty_r+0x1a>
 8011260:	6023      	str	r3, [r4, #0]
 8011262:	bd38      	pop	{r3, r4, r5, pc}
 8011264:	24000c70 	.word	0x24000c70

08011268 <_lseek_r>:
 8011268:	b538      	push	{r3, r4, r5, lr}
 801126a:	4d07      	ldr	r5, [pc, #28]	; (8011288 <_lseek_r+0x20>)
 801126c:	4604      	mov	r4, r0
 801126e:	4608      	mov	r0, r1
 8011270:	4611      	mov	r1, r2
 8011272:	2200      	movs	r2, #0
 8011274:	602a      	str	r2, [r5, #0]
 8011276:	461a      	mov	r2, r3
 8011278:	f7f1 fefe 	bl	8003078 <_lseek>
 801127c:	1c43      	adds	r3, r0, #1
 801127e:	d102      	bne.n	8011286 <_lseek_r+0x1e>
 8011280:	682b      	ldr	r3, [r5, #0]
 8011282:	b103      	cbz	r3, 8011286 <_lseek_r+0x1e>
 8011284:	6023      	str	r3, [r4, #0]
 8011286:	bd38      	pop	{r3, r4, r5, pc}
 8011288:	24000c70 	.word	0x24000c70

0801128c <__ascii_mbtowc>:
 801128c:	b082      	sub	sp, #8
 801128e:	b901      	cbnz	r1, 8011292 <__ascii_mbtowc+0x6>
 8011290:	a901      	add	r1, sp, #4
 8011292:	b142      	cbz	r2, 80112a6 <__ascii_mbtowc+0x1a>
 8011294:	b14b      	cbz	r3, 80112aa <__ascii_mbtowc+0x1e>
 8011296:	7813      	ldrb	r3, [r2, #0]
 8011298:	600b      	str	r3, [r1, #0]
 801129a:	7812      	ldrb	r2, [r2, #0]
 801129c:	1e10      	subs	r0, r2, #0
 801129e:	bf18      	it	ne
 80112a0:	2001      	movne	r0, #1
 80112a2:	b002      	add	sp, #8
 80112a4:	4770      	bx	lr
 80112a6:	4610      	mov	r0, r2
 80112a8:	e7fb      	b.n	80112a2 <__ascii_mbtowc+0x16>
 80112aa:	f06f 0001 	mvn.w	r0, #1
 80112ae:	e7f8      	b.n	80112a2 <__ascii_mbtowc+0x16>

080112b0 <memmove>:
 80112b0:	4288      	cmp	r0, r1
 80112b2:	b510      	push	{r4, lr}
 80112b4:	eb01 0402 	add.w	r4, r1, r2
 80112b8:	d902      	bls.n	80112c0 <memmove+0x10>
 80112ba:	4284      	cmp	r4, r0
 80112bc:	4623      	mov	r3, r4
 80112be:	d807      	bhi.n	80112d0 <memmove+0x20>
 80112c0:	1e43      	subs	r3, r0, #1
 80112c2:	42a1      	cmp	r1, r4
 80112c4:	d008      	beq.n	80112d8 <memmove+0x28>
 80112c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80112ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80112ce:	e7f8      	b.n	80112c2 <memmove+0x12>
 80112d0:	4402      	add	r2, r0
 80112d2:	4601      	mov	r1, r0
 80112d4:	428a      	cmp	r2, r1
 80112d6:	d100      	bne.n	80112da <memmove+0x2a>
 80112d8:	bd10      	pop	{r4, pc}
 80112da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80112de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80112e2:	e7f7      	b.n	80112d4 <memmove+0x24>

080112e4 <__malloc_lock>:
 80112e4:	4801      	ldr	r0, [pc, #4]	; (80112ec <__malloc_lock+0x8>)
 80112e6:	f7fe bf9a 	b.w	801021e <__retarget_lock_acquire_recursive>
 80112ea:	bf00      	nop
 80112ec:	24000c68 	.word	0x24000c68

080112f0 <__malloc_unlock>:
 80112f0:	4801      	ldr	r0, [pc, #4]	; (80112f8 <__malloc_unlock+0x8>)
 80112f2:	f7fe bf95 	b.w	8010220 <__retarget_lock_release_recursive>
 80112f6:	bf00      	nop
 80112f8:	24000c68 	.word	0x24000c68

080112fc <_realloc_r>:
 80112fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112fe:	4607      	mov	r7, r0
 8011300:	4614      	mov	r4, r2
 8011302:	460e      	mov	r6, r1
 8011304:	b921      	cbnz	r1, 8011310 <_realloc_r+0x14>
 8011306:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801130a:	4611      	mov	r1, r2
 801130c:	f7ff bbd4 	b.w	8010ab8 <_malloc_r>
 8011310:	b922      	cbnz	r2, 801131c <_realloc_r+0x20>
 8011312:	f7ff fb81 	bl	8010a18 <_free_r>
 8011316:	4625      	mov	r5, r4
 8011318:	4628      	mov	r0, r5
 801131a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801131c:	f000 f83a 	bl	8011394 <_malloc_usable_size_r>
 8011320:	42a0      	cmp	r0, r4
 8011322:	d20f      	bcs.n	8011344 <_realloc_r+0x48>
 8011324:	4621      	mov	r1, r4
 8011326:	4638      	mov	r0, r7
 8011328:	f7ff fbc6 	bl	8010ab8 <_malloc_r>
 801132c:	4605      	mov	r5, r0
 801132e:	2800      	cmp	r0, #0
 8011330:	d0f2      	beq.n	8011318 <_realloc_r+0x1c>
 8011332:	4631      	mov	r1, r6
 8011334:	4622      	mov	r2, r4
 8011336:	f7fd fa6d 	bl	800e814 <memcpy>
 801133a:	4631      	mov	r1, r6
 801133c:	4638      	mov	r0, r7
 801133e:	f7ff fb6b 	bl	8010a18 <_free_r>
 8011342:	e7e9      	b.n	8011318 <_realloc_r+0x1c>
 8011344:	4635      	mov	r5, r6
 8011346:	e7e7      	b.n	8011318 <_realloc_r+0x1c>

08011348 <_read_r>:
 8011348:	b538      	push	{r3, r4, r5, lr}
 801134a:	4d07      	ldr	r5, [pc, #28]	; (8011368 <_read_r+0x20>)
 801134c:	4604      	mov	r4, r0
 801134e:	4608      	mov	r0, r1
 8011350:	4611      	mov	r1, r2
 8011352:	2200      	movs	r2, #0
 8011354:	602a      	str	r2, [r5, #0]
 8011356:	461a      	mov	r2, r3
 8011358:	f7f1 fe2e 	bl	8002fb8 <_read>
 801135c:	1c43      	adds	r3, r0, #1
 801135e:	d102      	bne.n	8011366 <_read_r+0x1e>
 8011360:	682b      	ldr	r3, [r5, #0]
 8011362:	b103      	cbz	r3, 8011366 <_read_r+0x1e>
 8011364:	6023      	str	r3, [r4, #0]
 8011366:	bd38      	pop	{r3, r4, r5, pc}
 8011368:	24000c70 	.word	0x24000c70

0801136c <__ascii_wctomb>:
 801136c:	b149      	cbz	r1, 8011382 <__ascii_wctomb+0x16>
 801136e:	2aff      	cmp	r2, #255	; 0xff
 8011370:	bf85      	ittet	hi
 8011372:	238a      	movhi	r3, #138	; 0x8a
 8011374:	6003      	strhi	r3, [r0, #0]
 8011376:	700a      	strbls	r2, [r1, #0]
 8011378:	f04f 30ff 	movhi.w	r0, #4294967295
 801137c:	bf98      	it	ls
 801137e:	2001      	movls	r0, #1
 8011380:	4770      	bx	lr
 8011382:	4608      	mov	r0, r1
 8011384:	4770      	bx	lr

08011386 <abort>:
 8011386:	b508      	push	{r3, lr}
 8011388:	2006      	movs	r0, #6
 801138a:	f000 f833 	bl	80113f4 <raise>
 801138e:	2001      	movs	r0, #1
 8011390:	f7f1 fe08 	bl	8002fa4 <_exit>

08011394 <_malloc_usable_size_r>:
 8011394:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011398:	1f18      	subs	r0, r3, #4
 801139a:	2b00      	cmp	r3, #0
 801139c:	bfbc      	itt	lt
 801139e:	580b      	ldrlt	r3, [r1, r0]
 80113a0:	18c0      	addlt	r0, r0, r3
 80113a2:	4770      	bx	lr

080113a4 <_raise_r>:
 80113a4:	291f      	cmp	r1, #31
 80113a6:	b538      	push	{r3, r4, r5, lr}
 80113a8:	4604      	mov	r4, r0
 80113aa:	460d      	mov	r5, r1
 80113ac:	d904      	bls.n	80113b8 <_raise_r+0x14>
 80113ae:	2316      	movs	r3, #22
 80113b0:	6003      	str	r3, [r0, #0]
 80113b2:	f04f 30ff 	mov.w	r0, #4294967295
 80113b6:	bd38      	pop	{r3, r4, r5, pc}
 80113b8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80113ba:	b112      	cbz	r2, 80113c2 <_raise_r+0x1e>
 80113bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80113c0:	b94b      	cbnz	r3, 80113d6 <_raise_r+0x32>
 80113c2:	4620      	mov	r0, r4
 80113c4:	f000 f830 	bl	8011428 <_getpid_r>
 80113c8:	462a      	mov	r2, r5
 80113ca:	4601      	mov	r1, r0
 80113cc:	4620      	mov	r0, r4
 80113ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80113d2:	f000 b817 	b.w	8011404 <_kill_r>
 80113d6:	2b01      	cmp	r3, #1
 80113d8:	d00a      	beq.n	80113f0 <_raise_r+0x4c>
 80113da:	1c59      	adds	r1, r3, #1
 80113dc:	d103      	bne.n	80113e6 <_raise_r+0x42>
 80113de:	2316      	movs	r3, #22
 80113e0:	6003      	str	r3, [r0, #0]
 80113e2:	2001      	movs	r0, #1
 80113e4:	e7e7      	b.n	80113b6 <_raise_r+0x12>
 80113e6:	2400      	movs	r4, #0
 80113e8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80113ec:	4628      	mov	r0, r5
 80113ee:	4798      	blx	r3
 80113f0:	2000      	movs	r0, #0
 80113f2:	e7e0      	b.n	80113b6 <_raise_r+0x12>

080113f4 <raise>:
 80113f4:	4b02      	ldr	r3, [pc, #8]	; (8011400 <raise+0xc>)
 80113f6:	4601      	mov	r1, r0
 80113f8:	6818      	ldr	r0, [r3, #0]
 80113fa:	f7ff bfd3 	b.w	80113a4 <_raise_r>
 80113fe:	bf00      	nop
 8011400:	24000010 	.word	0x24000010

08011404 <_kill_r>:
 8011404:	b538      	push	{r3, r4, r5, lr}
 8011406:	4d07      	ldr	r5, [pc, #28]	; (8011424 <_kill_r+0x20>)
 8011408:	2300      	movs	r3, #0
 801140a:	4604      	mov	r4, r0
 801140c:	4608      	mov	r0, r1
 801140e:	4611      	mov	r1, r2
 8011410:	602b      	str	r3, [r5, #0]
 8011412:	f7f1 fdb7 	bl	8002f84 <_kill>
 8011416:	1c43      	adds	r3, r0, #1
 8011418:	d102      	bne.n	8011420 <_kill_r+0x1c>
 801141a:	682b      	ldr	r3, [r5, #0]
 801141c:	b103      	cbz	r3, 8011420 <_kill_r+0x1c>
 801141e:	6023      	str	r3, [r4, #0]
 8011420:	bd38      	pop	{r3, r4, r5, pc}
 8011422:	bf00      	nop
 8011424:	24000c70 	.word	0x24000c70

08011428 <_getpid_r>:
 8011428:	f7f1 bda4 	b.w	8002f74 <_getpid>

0801142c <_init>:
 801142c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801142e:	bf00      	nop
 8011430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011432:	bc08      	pop	{r3}
 8011434:	469e      	mov	lr, r3
 8011436:	4770      	bx	lr

08011438 <_fini>:
 8011438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801143a:	bf00      	nop
 801143c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801143e:	bc08      	pop	{r3}
 8011440:	469e      	mov	lr, r3
 8011442:	4770      	bx	lr
